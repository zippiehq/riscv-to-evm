Running in EVM:
0	 0	PUSH4	0530	 	 
- stack 0: 0x530
1	 5	PUSH2	0514	 ;; _rambegin	 
- stack 1: 0x530
- stack 0: 0x514
2	 8	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0x514
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x530
- stack 0: 0x515
4	 B	PUSH2	0400	 	 
- stack 2: 0x530
- stack 1: 0x515
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100010034F92000530042006600000086000000A0000000BA000000D10000
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100010034F92000530042006600000086000000A0000000BA000000D10000
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00001000	 	 
- stack 1: 0x400
- stack 0: 0x1000
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x1000
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F92000530042006600000086000000A0000000BA000000D1000000EB0002
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34F92000530042006600000086000000A0000000BA000000D1000000EB0002
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1760(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F92000530042006600000086000000A0000000BA000000D1000000EB0002
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34F92000530042006600000086000000A0000000BA000000D1000000EB0002
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34F920
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x34F920
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0xF920
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0xF920
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF920
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF920
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF920
- stack 0: 0x1000
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x920
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x920
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000000A0000000BA000000D1000000EB0002010504CC
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000000A0000000BA000000D1000000EB0002010504CC
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000000A0000000BA000000D1000000EB0002010504CC00860001
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000000A0000000BA000000D1000000EB0002010504CC00860001
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_fc879f5fc908966fa87c246484b94c49b53670061e81d81d42a698052933286d	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_fc879f5fc908966fa87c246484b94c49b53670061e81d81d42a698052933286d	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x920
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000BA000000D1000000EB0002010504CC0086000100A00001
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000BA000000D1000000EB0002010504CC0086000100A00001
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000BA000000D1000000EB0002010504CC0086000100A00001
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000BA000000D1000000EB0002010504CC0086000100A00001
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860000
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860000
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x0
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x0
84	 93	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x20
85	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000D1000000EB0002010504CC0086000100A0000100BA0000
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000D1000000EB0002010504CC0086000100A0000100BA0000
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000D1000000EB0002010504CC0086000100A0000100BA0000
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000D1000000EB0002010504CC0086000100A0000100BA0000
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	0040	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x40
103	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x414
104	 B1	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
105	 B3	ADD		 	 
- stack 0: 0x418
106	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
107	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000000D1000000EB0002010504CC0086000100A0000100BA000000D10002
108	 B6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBA000000D1000000EB0002010504CC0086000100A0000100BA000000D10002
- stack 0: 0xF0
109	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA
110	 B9	JUMP		 	 
- stack 0: 0x418
111	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x418
112	 BB	PUSH2	0020	 	 
- stack 1: 0x418
- stack 0: 0x20
113	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x418
- stack 0: 0x0
114	 BF	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x40
115	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x0
116	 C3	ADD		 	 
- stack 1: 0x418
- stack 0: 0x0
117	 C4	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x60
118	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
119	 C8	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
120	 CA	ADD		 	 
- stack 0: 0x41C
121	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
122	 CC	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD1000000EB0002010504CC0086000100A0000100BA000000D1000200EB0003
123	 CD	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD1000000EB0002010504CC0086000100A0000100BA000000D1000200EB0003
- stack 0: 0xF0
124	 CF	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD1
125	 D0	JUMP		 	 
- stack 0: 0x41C
126	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x41C
127	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
128	 D3	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD1000000EB0002010504CC0086000100A0000100BA000000D1000200EB0003
129	 D4	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xD1000000EB0002010504CC0086000100A0000100BA000000D1000200EB0003
- stack 0: 0xE0
130	 D6	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD10000
131	 D7	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xD10000
- stack 0: 0xFFFF
132	 DA	AND		 	 
- stack 1: 0x41C
- stack 0: 0x0
133	 DB	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x1
134	 DD	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x0
135	 DE	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x3A0
136	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
137	 E2	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
138	 E4	ADD		 	 
- stack 0: 0x420
139	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
140	 E6	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xEB0002010504CC0086000100A0000100BA000000D1000200EB0003010504B4
141	 E7	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xEB0002010504CC0086000100A0000100BA000000D1000200EB0003010504B4
- stack 0: 0xF0
142	 E9	SHR		 	 
- stack 1: 0x420
- stack 0: 0xEB
143	 EA	JUMP		 	 
- stack 0: 0x420
144	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x420
145	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
146	 ED	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xEB0002010504CC0086000100A0000100BA000000D1000200EB0003010504B4
147	 EE	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0xEB0002010504CC0086000100A0000100BA000000D1000200EB0003010504B4
- stack 0: 0xE0
148	 F0	SHR		 	 
- stack 1: 0x420
- stack 0: 0xEB0002
149	 F1	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0xEB0002
- stack 0: 0xFFFF
150	 F4	AND		 	 
- stack 1: 0x420
- stack 0: 0x2
151	 F5	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x1
152	 F7	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0x2
153	 F8	PUSH2	0380	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x380
154	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x420
155	 FC	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
156	 FE	ADD		 	 
- stack 0: 0x424
157	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
158	 100	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x10504CC0086000100A0000100BA000000D1000200EB0003010504B400860003
159	 101	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x10504CC0086000100A0000100BA000000D1000200EB0003010504B400860003
- stack 0: 0xF0
160	 103	SHR		 	 
- stack 1: 0x424
- stack 0: 0x105
161	 104	JUMP		 	 
- stack 0: 0x424
162	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x424
163	 106	PUSH2	0060	 	 
- stack 1: 0x424
- stack 0: 0x60
164	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x424
- stack 0: 0x0
165	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
166	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x0
167	 110	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x3A0
168	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x0
169	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
170	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x0
171	 11A	SUB		 	 
- stack 1: 0x424
- stack 0: 0x0
172	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x123
173	 11E	JUMPI		 	 
- stack 0: 0x424
174	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x424
- stack 0: 0x13D
175	 122	JUMP		 	 
- stack 0: 0x424
176	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x424
177	 13E	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
178	 140	ADD		 	 
- stack 0: 0x428
179	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
180	 142	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x86000100A0000100BA000000D1000200EB0003010504B40086000300A00007
181	 143	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x86000100A0000100BA000000D1000200EB0003010504B40086000300A00007
- stack 0: 0xF0
182	 145	SHR		 	 
- stack 1: 0x428
- stack 0: 0x86
183	 146	JUMP		 	 
- stack 0: 0x428
184	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x428
185	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
186	 88	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x86000100A0000100BA000000D1000200EB0003010504B40086000300A00007
187	 89	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0x86000100A0000100BA000000D1000200EB0003010504B40086000300A00007
- stack 0: 0xE0
188	 8B	SHR		 	 
- stack 1: 0x428
- stack 0: 0x860001
189	 8C	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0x860001
- stack 0: 0xFFFF
190	 8F	AND		 	 
- stack 1: 0x428
- stack 0: 0x1
191	 90	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x1
192	 92	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0x1
193	 93	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x20
194	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x428
195	 97	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
196	 99	ADD		 	 
- stack 0: 0x42C
197	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
198	 9B	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xA0000100BA000000D1000200EB0003010504B40086000300A0000700BA0000
199	 9C	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0xA0000100BA000000D1000200EB0003010504B40086000300A0000700BA0000
- stack 0: 0xF0
200	 9E	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xA0
201	 9F	JUMP		 	 
- stack 0: 0x42C
202	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x42C
203	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
204	 A2	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xA0000100BA000000D1000200EB0003010504B40086000300A0000700BA0000
205	 A3	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0xA0000100BA000000D1000200EB0003010504B40086000300A0000700BA0000
- stack 0: 0xE0
206	 A5	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xA00001
207	 A6	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0xA00001
- stack 0: 0xFFFF
208	 A9	AND		 	 
- stack 1: 0x42C
- stack 0: 0x1
209	 AA	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x1
210	 AC	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x1
211	 AD	PUSH2	0040	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x40
212	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x42C
213	 B1	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
214	 B3	ADD		 	 
- stack 0: 0x430
215	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
216	 B5	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xBA000000D1000200EB0003010504B40086000300A0000700BA000000D1000A
217	 B6	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xBA000000D1000200EB0003010504B40086000300A0000700BA000000D1000A
- stack 0: 0xF0
218	 B8	SHR		 	 
- stack 1: 0x430
- stack 0: 0xBA
219	 B9	JUMP		 	 
- stack 0: 0x430
220	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x430
221	 BB	PUSH2	0020	 	 
- stack 1: 0x430
- stack 0: 0x20
222	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x430
- stack 0: 0x1
223	 BF	PUSH2	0040	 	 
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x40
224	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x1
225	 C3	ADD		 	 
- stack 1: 0x430
- stack 0: 0x2
226	 C4	PUSH2	0060	 	 
- stack 2: 0x430
- stack 1: 0x2
- stack 0: 0x60
227	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x430
228	 C8	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
229	 CA	ADD		 	 
- stack 0: 0x434
230	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
231	 CC	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xD1000200EB0003010504B40086000300A0000700BA000000D1000A00EB0004
232	 CD	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xD1000200EB0003010504B40086000300A0000700BA000000D1000A00EB0004
- stack 0: 0xF0
233	 CF	SHR		 	 
- stack 1: 0x434
- stack 0: 0xD1
234	 D0	JUMP		 	 
- stack 0: 0x434
235	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x434
236	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
237	 D3	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xD1000200EB0003010504B40086000300A0000700BA000000D1000A00EB0004
238	 D4	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xD1000200EB0003010504B40086000300A0000700BA000000D1000A00EB0004
- stack 0: 0xE0
239	 D6	SHR		 	 
- stack 1: 0x434
- stack 0: 0xD10002
240	 D7	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xD10002
- stack 0: 0xFFFF
241	 DA	AND		 	 
- stack 1: 0x434
- stack 0: 0x2
242	 DB	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0x2
- stack 0: 0x1
243	 DD	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0x2
244	 DE	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0x2
- stack 0: 0x3A0
245	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x434
246	 E2	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
247	 E4	ADD		 	 
- stack 0: 0x438
248	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
249	 E6	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xEB0003010504B40086000300A0000700BA000000D1000A00EB00040105049C
250	 E7	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xEB0003010504B40086000300A0000700BA000000D1000A00EB00040105049C
- stack 0: 0xF0
251	 E9	SHR		 	 
- stack 1: 0x438
- stack 0: 0xEB
252	 EA	JUMP		 	 
- stack 0: 0x438
253	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x438
254	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
255	 ED	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xEB0003010504B40086000300A0000700BA000000D1000A00EB00040105049C
256	 EE	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xEB0003010504B40086000300A0000700BA000000D1000A00EB00040105049C
- stack 0: 0xE0
257	 F0	SHR		 	 
- stack 1: 0x438
- stack 0: 0xEB0003
258	 F1	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xEB0003
- stack 0: 0xFFFF
259	 F4	AND		 	 
- stack 1: 0x438
- stack 0: 0x3
260	 F5	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x1
261	 F7	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x3
262	 F8	PUSH2	0380	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x380
263	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x438
264	 FC	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
265	 FE	ADD		 	 
- stack 0: 0x43C
266	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
267	 100	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x10504B40086000300A0000700BA000000D1000A00EB00040105049C00860000
268	 101	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x10504B40086000300A0000700BA000000D1000A00EB00040105049C00860000
- stack 0: 0xF0
269	 103	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x105
270	 104	JUMP		 	 
- stack 0: 0x43C
271	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x43C
272	 106	PUSH2	0060	 	 
- stack 1: 0x43C
- stack 0: 0x60
273	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x43C
- stack 0: 0x2
274	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
275	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0x2
276	 110	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0x2
- stack 0: 0x3A0
277	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x43C
- stack 1: 0x2
- stack 0: 0x2
278	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
279	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0x2
- stack 0: 0x2
280	 11A	SUB		 	 
- stack 1: 0x43C
- stack 0: 0x0
281	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x123
282	 11E	JUMPI		 	 
- stack 0: 0x43C
283	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x43C
- stack 0: 0x13D
284	 122	JUMP		 	 
- stack 0: 0x43C
285	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x43C
286	 13E	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
287	 140	ADD		 	 
- stack 0: 0x440
288	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
289	 142	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x86000300A0000700BA000000D1000A00EB00040105049C008600000147FFF8
290	 143	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x86000300A0000700BA000000D1000A00EB00040105049C008600000147FFF8
- stack 0: 0xF0
291	 145	SHR		 	 
- stack 1: 0x440
- stack 0: 0x86
292	 146	JUMP		 	 
- stack 0: 0x440
293	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x440
294	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
295	 88	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x86000300A0000700BA000000D1000A00EB00040105049C008600000147FFF8
296	 89	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0x86000300A0000700BA000000D1000A00EB00040105049C008600000147FFF8
- stack 0: 0xE0
297	 8B	SHR		 	 
- stack 1: 0x440
- stack 0: 0x860003
298	 8C	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0x860003
- stack 0: 0xFFFF
299	 8F	AND		 	 
- stack 1: 0x440
- stack 0: 0x3
300	 90	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x1
301	 92	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0x3
302	 93	PUSH2	0020	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x20
303	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x440
304	 97	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
305	 99	ADD		 	 
- stack 0: 0x444
306	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
307	 9B	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xA0000700BA000000D1000A00EB00040105049C008600000147FFF800BA0000
308	 9C	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xA0000700BA000000D1000A00EB00040105049C008600000147FFF800BA0000
- stack 0: 0xF0
309	 9E	SHR		 	 
- stack 1: 0x444
- stack 0: 0xA0
310	 9F	JUMP		 	 
- stack 0: 0x444
311	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x444
312	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
313	 A2	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xA0000700BA000000D1000A00EB00040105049C008600000147FFF800BA0000
314	 A3	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0xA0000700BA000000D1000A00EB00040105049C008600000147FFF800BA0000
- stack 0: 0xE0
315	 A5	SHR		 	 
- stack 1: 0x444
- stack 0: 0xA00007
316	 A6	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0xA00007
- stack 0: 0xFFFF
317	 A9	AND		 	 
- stack 1: 0x444
- stack 0: 0x7
318	 AA	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x7
- stack 0: 0x1
319	 AC	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x7
320	 AD	PUSH2	0040	 	 
- stack 2: 0x444
- stack 1: 0x7
- stack 0: 0x40
321	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x444
322	 B1	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
323	 B3	ADD		 	 
- stack 0: 0x448
324	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
325	 B5	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xBA000000D1000A00EB00040105049C008600000147FFF800BA0000015AFFF8
326	 B6	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xBA000000D1000A00EB00040105049C008600000147FFF800BA0000015AFFF8
- stack 0: 0xF0
327	 B8	SHR		 	 
- stack 1: 0x448
- stack 0: 0xBA
328	 B9	JUMP		 	 
- stack 0: 0x448
329	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x448
330	 BB	PUSH2	0020	 	 
- stack 1: 0x448
- stack 0: 0x20
331	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x448
- stack 0: 0x3
332	 BF	PUSH2	0040	 	 
- stack 2: 0x448
- stack 1: 0x3
- stack 0: 0x40
333	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x448
- stack 1: 0x3
- stack 0: 0x7
334	 C3	ADD		 	 
- stack 1: 0x448
- stack 0: 0xA
335	 C4	PUSH2	0060	 	 
- stack 2: 0x448
- stack 1: 0xA
- stack 0: 0x60
336	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x448
337	 C8	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
338	 CA	ADD		 	 
- stack 0: 0x44C
339	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
340	 CC	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xD1000A00EB00040105049C008600000147FFF800BA0000015AFFF800EB0005
341	 CD	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0xD1000A00EB00040105049C008600000147FFF800BA0000015AFFF800EB0005
- stack 0: 0xF0
342	 CF	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xD1
343	 D0	JUMP		 	 
- stack 0: 0x44C
344	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x44C
345	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
346	 D3	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xD1000A00EB00040105049C008600000147FFF800BA0000015AFFF800EB0005
347	 D4	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0xD1000A00EB00040105049C008600000147FFF800BA0000015AFFF800EB0005
- stack 0: 0xE0
348	 D6	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xD1000A
349	 D7	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0xD1000A
- stack 0: 0xFFFF
350	 DA	AND		 	 
- stack 1: 0x44C
- stack 0: 0xA
351	 DB	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0xA
- stack 0: 0x1
352	 DD	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0xA
353	 DE	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0xA
- stack 0: 0x3A0
354	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x44C
355	 E2	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
356	 E4	ADD		 	 
- stack 0: 0x450
357	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
358	 E6	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xEB00040105049C008600000147FFF800BA0000015AFFF800EB000501050484
359	 E7	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0xEB00040105049C008600000147FFF800BA0000015AFFF800EB000501050484
- stack 0: 0xF0
360	 E9	SHR		 	 
- stack 1: 0x450
- stack 0: 0xEB
361	 EA	JUMP		 	 
- stack 0: 0x450
362	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
363	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
364	 ED	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xEB00040105049C008600000147FFF800BA0000015AFFF800EB000501050484
365	 EE	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0xEB00040105049C008600000147FFF800BA0000015AFFF800EB000501050484
- stack 0: 0xE0
366	 F0	SHR		 	 
- stack 1: 0x450
- stack 0: 0xEB0004
367	 F1	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0xEB0004
- stack 0: 0xFFFF
368	 F4	AND		 	 
- stack 1: 0x450
- stack 0: 0x4
369	 F5	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x1
370	 F7	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x4
371	 F8	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x380
372	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
373	 FC	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
374	 FE	ADD		 	 
- stack 0: 0x454
375	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
376	 100	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x105049C008600000147FFF800BA0000015AFFF800EB000501050484016D0000
377	 101	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x105049C008600000147FFF800BA0000015AFFF800EB000501050484016D0000
- stack 0: 0xF0
378	 103	SHR		 	 
- stack 1: 0x454
- stack 0: 0x105
379	 104	JUMP		 	 
- stack 0: 0x454
380	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x454
381	 106	PUSH2	0060	 	 
- stack 1: 0x454
- stack 0: 0x60
382	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x454
- stack 0: 0xA
383	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x454
- stack 1: 0xA
- stack 0: 0xFFFFFFFF
384	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x454
- stack 0: 0xA
385	 110	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xA
- stack 0: 0x3A0
386	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x454
- stack 1: 0xA
- stack 0: 0xA
387	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x454
- stack 2: 0xA
- stack 1: 0xA
- stack 0: 0xFFFFFFFF
388	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x454
- stack 1: 0xA
- stack 0: 0xA
389	 11A	SUB		 	 
- stack 1: 0x454
- stack 0: 0x0
390	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x454
- stack 1: 0x0
- stack 0: 0x123
391	 11E	JUMPI		 	 
- stack 0: 0x454
392	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x454
- stack 0: 0x13D
393	 122	JUMP		 	 
- stack 0: 0x454
394	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x454
395	 13E	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
396	 140	ADD		 	 
- stack 0: 0x458
397	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
398	 142	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x8600000147FFF800BA0000015AFFF800EB000501050484016D000000A00000
399	 143	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x8600000147FFF800BA0000015AFFF800EB000501050484016D000000A00000
- stack 0: 0xF0
400	 145	SHR		 	 
- stack 1: 0x458
- stack 0: 0x86
401	 146	JUMP		 	 
- stack 0: 0x458
402	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x458
403	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
404	 88	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x8600000147FFF800BA0000015AFFF800EB000501050484016D000000A00000
405	 89	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0x8600000147FFF800BA0000015AFFF800EB000501050484016D000000A00000
- stack 0: 0xE0
406	 8B	SHR		 	 
- stack 1: 0x458
- stack 0: 0x860000
407	 8C	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0x860000
- stack 0: 0xFFFF
408	 8F	AND		 	 
- stack 1: 0x458
- stack 0: 0x0
409	 90	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0x0
- stack 0: 0x1
410	 92	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0x0
411	 93	PUSH2	0020	 	 
- stack 2: 0x458
- stack 1: 0x0
- stack 0: 0x20
412	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x458
413	 97	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
414	 99	ADD		 	 
- stack 0: 0x45C
415	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
416	 9B	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x147FFF800BA0000015AFFF800EB000501050484016D000000A0000000BA0000
417	 9C	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x147FFF800BA0000015AFFF800EB000501050484016D000000A0000000BA0000
- stack 0: 0xF0
418	 9E	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x147
419	 9F	JUMP		 	 
- stack 0: 0x45C
420	 147	JUMPDEST		 ;; __riscvimpl_LUI_ffff8137	  ;; # instr: lui sp,0xffff8(ignore imm)
- stack 0: 0x45C
421	 148	PUSH4	ffff8000	 	 
- stack 1: 0x45C
- stack 0: 0xFFFF8000
422	 14D	PUSH2	0040	 	 
- stack 2: 0x45C
- stack 1: 0xFFFF8000
- stack 0: 0x40
423	 150	MSTORE		 	  ;; # store to x2
- stack 0: 0x45C
424	 151	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
425	 153	ADD		 	 
- stack 0: 0x460
426	 154	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
427	 155	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0xBA0000015AFFF800EB000501050484016D000000A0000000BA000001800000
428	 156	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0xBA0000015AFFF800EB000501050484016D000000A0000000BA000001800000
- stack 0: 0xF0
429	 158	SHR		 	 
- stack 1: 0x460
- stack 0: 0xBA
430	 159	JUMP		 	 
- stack 0: 0x460
431	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x460
432	 BB	PUSH2	0020	 	 
- stack 1: 0x460
- stack 0: 0x20
433	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x460
- stack 0: 0x0
434	 BF	PUSH2	0040	 	 
- stack 2: 0x460
- stack 1: 0x0
- stack 0: 0x40
435	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x460
- stack 1: 0x0
- stack 0: 0xFFFF8000
436	 C3	ADD		 	 
- stack 1: 0x460
- stack 0: 0xFFFF8000
437	 C4	PUSH2	0060	 	 
- stack 2: 0x460
- stack 1: 0xFFFF8000
- stack 0: 0x60
438	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x460
439	 C8	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
440	 CA	ADD		 	 
- stack 0: 0x464
441	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
442	 CC	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x15AFFF800EB000501050484016D000000A0000000BA00000180000000EB0006
443	 CD	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x15AFFF800EB000501050484016D000000A0000000BA00000180000000EB0006
- stack 0: 0xF0
444	 CF	SHR		 	 
- stack 1: 0x464
- stack 0: 0x15A
445	 D0	JUMP		 	 
- stack 0: 0x464
446	 15A	JUMPDEST		 ;; __riscvimpl_LUI_ffff8eb7	  ;; # instr: lui t4,0xffff8(ignore imm)
- stack 0: 0x464
447	 15B	PUSH4	ffff8000	 	 
- stack 1: 0x464
- stack 0: 0xFFFF8000
448	 160	PUSH2	03A0	 	 
- stack 2: 0x464
- stack 1: 0xFFFF8000
- stack 0: 0x3A0
449	 163	MSTORE		 	  ;; # store to x29
- stack 0: 0x464
450	 164	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
451	 166	ADD		 	 
- stack 0: 0x468
452	 167	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
453	 168	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xEB000501050484016D000000A0000000BA00000180000000EB00060105046C
454	 169	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xEB000501050484016D000000A0000000BA00000180000000EB00060105046C
- stack 0: 0xF0
455	 16B	SHR		 	 
- stack 1: 0x468
- stack 0: 0xEB
456	 16C	JUMP		 	 
- stack 0: 0x468
457	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x468
458	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
459	 ED	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xEB000501050484016D000000A0000000BA00000180000000EB00060105046C
460	 EE	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0xEB000501050484016D000000A0000000BA00000180000000EB00060105046C
- stack 0: 0xE0
461	 F0	SHR		 	 
- stack 1: 0x468
- stack 0: 0xEB0005
462	 F1	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0xEB0005
- stack 0: 0xFFFF
463	 F4	AND		 	 
- stack 1: 0x468
- stack 0: 0x5
464	 F5	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0x5
- stack 0: 0x1
465	 F7	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0x5
466	 F8	PUSH2	0380	 	 
- stack 2: 0x468
- stack 1: 0x5
- stack 0: 0x380
467	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x468
468	 FC	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
469	 FE	ADD		 	 
- stack 0: 0x46C
470	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
471	 100	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x1050484016D000000A0000000BA00000180000000EB00060105046C016D0000
472	 101	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x1050484016D000000A0000000BA00000180000000EB00060105046C016D0000
- stack 0: 0xF0
473	 103	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x105
474	 104	JUMP		 	 
- stack 0: 0x46C
475	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x46C
476	 106	PUSH2	0060	 	 
- stack 1: 0x46C
- stack 0: 0x60
477	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x46C
- stack 0: 0xFFFF8000
478	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x46C
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
479	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x46C
- stack 0: 0xFFFF8000
480	 110	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0xFFFF8000
- stack 0: 0x3A0
481	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x46C
- stack 1: 0xFFFF8000
- stack 0: 0xFFFF8000
482	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x46C
- stack 2: 0xFFFF8000
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
483	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x46C
- stack 1: 0xFFFF8000
- stack 0: 0xFFFF8000
484	 11A	SUB		 	 
- stack 1: 0x46C
- stack 0: 0x0
485	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x46C
- stack 1: 0x0
- stack 0: 0x123
486	 11E	JUMPI		 	 
- stack 0: 0x46C
487	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x46C
- stack 0: 0x13D
488	 122	JUMP		 	 
- stack 0: 0x46C
489	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x46C
490	 13E	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
491	 140	ADD		 	 
- stack 0: 0x470
492	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
493	 142	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x16D000000A0000000BA00000180000000EB00060105046C016D00000147FFF8
494	 143	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x16D000000A0000000BA00000180000000EB00060105046C016D00000147FFF8
- stack 0: 0xF0
495	 145	SHR		 	 
- stack 1: 0x470
- stack 0: 0x16D
496	 146	JUMP		 	 
- stack 0: 0x470
497	 16D	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x470
498	 16E	PUSH4	80000000	 	 
- stack 1: 0x470
- stack 0: 0x80000000
499	 173	PUSH2	0020	 	 
- stack 2: 0x470
- stack 1: 0x80000000
- stack 0: 0x20
500	 176	MSTORE		 	  ;; # store to x1
- stack 0: 0x470
501	 177	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
502	 179	ADD		 	 
- stack 0: 0x474
503	 17A	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
504	 17B	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000000BA00000180000000EB00060105046C016D00000147FFF800BA0000
505	 17C	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0xA0000000BA00000180000000EB00060105046C016D00000147FFF800BA0000
- stack 0: 0xF0
506	 17E	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA0
507	 17F	JUMP		 	 
- stack 0: 0x474
508	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x474
509	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
510	 A2	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000000BA00000180000000EB00060105046C016D00000147FFF800BA0000
511	 A3	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0xA0000000BA00000180000000EB00060105046C016D00000147FFF800BA0000
- stack 0: 0xE0
512	 A5	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA00000
513	 A6	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0xA00000
- stack 0: 0xFFFF
514	 A9	AND		 	 
- stack 1: 0x474
- stack 0: 0x0
515	 AA	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x0
- stack 0: 0x1
516	 AC	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x0
517	 AD	PUSH2	0040	 	 
- stack 2: 0x474
- stack 1: 0x0
- stack 0: 0x40
518	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x474
519	 B1	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
520	 B3	ADD		 	 
- stack 0: 0x478
521	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
522	 B5	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBA00000180000000EB00060105046C016D00000147FFF800BA00000193FFF8
523	 B6	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0xBA00000180000000EB00060105046C016D00000147FFF800BA00000193FFF8
- stack 0: 0xF0
524	 B8	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBA
525	 B9	JUMP		 	 
- stack 0: 0x478
526	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x478
527	 BB	PUSH2	0020	 	 
- stack 1: 0x478
- stack 0: 0x20
528	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x478
- stack 0: 0x80000000
529	 BF	PUSH2	0040	 	 
- stack 2: 0x478
- stack 1: 0x80000000
- stack 0: 0x40
530	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x478
- stack 1: 0x80000000
- stack 0: 0x0
531	 C3	ADD		 	 
- stack 1: 0x478
- stack 0: 0x80000000
532	 C4	PUSH2	0060	 	 
- stack 2: 0x478
- stack 1: 0x80000000
- stack 0: 0x60
533	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x478
534	 C8	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
535	 CA	ADD		 	 
- stack 0: 0x47C
536	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
537	 CC	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x180000000EB00060105046C016D00000147FFF800BA00000193FFF800EB0007
538	 CD	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x180000000EB00060105046C016D00000147FFF800BA00000193FFF800EB0007
- stack 0: 0xF0
539	 CF	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x180
540	 D0	JUMP		 	 
- stack 0: 0x47C
541	 180	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x47C
542	 181	PUSH4	80000000	 	 
- stack 1: 0x47C
- stack 0: 0x80000000
543	 186	PUSH2	03A0	 	 
- stack 2: 0x47C
- stack 1: 0x80000000
- stack 0: 0x3A0
544	 189	MSTORE		 	  ;; # store to x29
- stack 0: 0x47C
545	 18A	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
546	 18C	ADD		 	 
- stack 0: 0x480
547	 18D	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
548	 18E	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xEB00060105046C016D00000147FFF800BA00000193FFF800EB000701050454
549	 18F	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0xEB00060105046C016D00000147FFF800BA00000193FFF800EB000701050454
- stack 0: 0xF0
550	 191	SHR		 	 
- stack 1: 0x480
- stack 0: 0xEB
551	 192	JUMP		 	 
- stack 0: 0x480
552	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x480
553	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
554	 ED	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xEB00060105046C016D00000147FFF800BA00000193FFF800EB000701050454
555	 EE	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0xEB00060105046C016D00000147FFF800BA00000193FFF800EB000701050454
- stack 0: 0xE0
556	 F0	SHR		 	 
- stack 1: 0x480
- stack 0: 0xEB0006
557	 F1	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0xEB0006
- stack 0: 0xFFFF
558	 F4	AND		 	 
- stack 1: 0x480
- stack 0: 0x6
559	 F5	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0x6
- stack 0: 0x1
560	 F7	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x6
561	 F8	PUSH2	0380	 	 
- stack 2: 0x480
- stack 1: 0x6
- stack 0: 0x380
562	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x480
563	 FC	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
564	 FE	ADD		 	 
- stack 0: 0x484
565	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
566	 100	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x105046C016D00000147FFF800BA00000193FFF800EB00070105045400860000
567	 101	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x105046C016D00000147FFF800BA00000193FFF800EB00070105045400860000
- stack 0: 0xF0
568	 103	SHR		 	 
- stack 1: 0x484
- stack 0: 0x105
569	 104	JUMP		 	 
- stack 0: 0x484
570	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x484
571	 106	PUSH2	0060	 	 
- stack 1: 0x484
- stack 0: 0x60
572	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x484
- stack 0: 0x80000000
573	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x484
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
574	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x484
- stack 0: 0x80000000
575	 110	PUSH2	03A0	 	 
- stack 2: 0x484
- stack 1: 0x80000000
- stack 0: 0x3A0
576	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x484
- stack 1: 0x80000000
- stack 0: 0x80000000
577	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x484
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
578	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x484
- stack 1: 0x80000000
- stack 0: 0x80000000
579	 11A	SUB		 	 
- stack 1: 0x484
- stack 0: 0x0
580	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x123
581	 11E	JUMPI		 	 
- stack 0: 0x484
582	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x484
- stack 0: 0x13D
583	 122	JUMP		 	 
- stack 0: 0x484
584	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x484
585	 13E	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
586	 140	ADD		 	 
- stack 0: 0x488
587	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
588	 142	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x16D00000147FFF800BA00000193FFF800EB0007010504540086000001A60008
589	 143	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x16D00000147FFF800BA00000193FFF800EB0007010504540086000001A60008
- stack 0: 0xF0
590	 145	SHR		 	 
- stack 1: 0x488
- stack 0: 0x16D
591	 146	JUMP		 	 
- stack 0: 0x488
592	 16D	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x488
593	 16E	PUSH4	80000000	 	 
- stack 1: 0x488
- stack 0: 0x80000000
594	 173	PUSH2	0020	 	 
- stack 2: 0x488
- stack 1: 0x80000000
- stack 0: 0x20
595	 176	MSTORE		 	  ;; # store to x1
- stack 0: 0x488
596	 177	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
597	 179	ADD		 	 
- stack 0: 0x48C
598	 17A	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
599	 17B	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x147FFF800BA00000193FFF800EB0007010504540086000001A6000801B9FFFF
600	 17C	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x147FFF800BA00000193FFF800EB0007010504540086000001A6000801B9FFFF
- stack 0: 0xF0
601	 17E	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x147
602	 17F	JUMP		 	 
- stack 0: 0x48C
603	 147	JUMPDEST		 ;; __riscvimpl_LUI_ffff8137	  ;; # instr: lui sp,0xffff8(ignore imm)
- stack 0: 0x48C
604	 148	PUSH4	ffff8000	 	 
- stack 1: 0x48C
- stack 0: 0xFFFF8000
605	 14D	PUSH2	0040	 	 
- stack 2: 0x48C
- stack 1: 0xFFFF8000
- stack 0: 0x40
606	 150	MSTORE		 	  ;; # store to x2
- stack 0: 0x48C
607	 151	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
608	 153	ADD		 	 
- stack 0: 0x490
609	 154	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
610	 155	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xBA00000193FFF800EB0007010504540086000001A6000801B9FFFF00BA0000
611	 156	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xBA00000193FFF800EB0007010504540086000001A6000801B9FFFF00BA0000
- stack 0: 0xF0
612	 158	SHR		 	 
- stack 1: 0x490
- stack 0: 0xBA
613	 159	JUMP		 	 
- stack 0: 0x490
614	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x490
615	 BB	PUSH2	0020	 	 
- stack 1: 0x490
- stack 0: 0x20
616	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x490
- stack 0: 0x80000000
617	 BF	PUSH2	0040	 	 
- stack 2: 0x490
- stack 1: 0x80000000
- stack 0: 0x40
618	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x490
- stack 1: 0x80000000
- stack 0: 0xFFFF8000
619	 C3	ADD		 	 
- stack 1: 0x490
- stack 0: 0x17FFF8000
620	 C4	PUSH2	0060	 	 
- stack 2: 0x490
- stack 1: 0x17FFF8000
- stack 0: 0x60
621	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x490
622	 C8	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
623	 CA	ADD		 	 
- stack 0: 0x494
624	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
625	 CC	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x193FFF800EB0007010504540086000001A6000801B9FFFF00BA000001D80008
626	 CD	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x193FFF800EB0007010504540086000001A6000801B9FFFF00BA000001D80008
- stack 0: 0xF0
627	 CF	SHR		 	 
- stack 1: 0x494
- stack 0: 0x193
628	 D0	JUMP		 	 
- stack 0: 0x494
629	 193	JUMPDEST		 ;; __riscvimpl_LUI_7fff8eb7	  ;; # instr: lui t4,0x7fff8(ignore imm)
- stack 0: 0x494
630	 194	PUSH4	7fff8000	 	 
- stack 1: 0x494
- stack 0: 0x7FFF8000
631	 199	PUSH2	03A0	 	 
- stack 2: 0x494
- stack 1: 0x7FFF8000
- stack 0: 0x3A0
632	 19C	MSTORE		 	  ;; # store to x29
- stack 0: 0x494
633	 19D	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
634	 19F	ADD		 	 
- stack 0: 0x498
635	 1A0	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
636	 1A1	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xEB0007010504540086000001A6000801B9FFFF00BA000001D8000801EBFFFF
637	 1A2	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xEB0007010504540086000001A6000801B9FFFF00BA000001D8000801EBFFFF
- stack 0: 0xF0
638	 1A4	SHR		 	 
- stack 1: 0x498
- stack 0: 0xEB
639	 1A5	JUMP		 	 
- stack 0: 0x498
640	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x498
641	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
642	 ED	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xEB0007010504540086000001A6000801B9FFFF00BA000001D8000801EBFFFF
643	 EE	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0xEB0007010504540086000001A6000801B9FFFF00BA000001D8000801EBFFFF
- stack 0: 0xE0
644	 F0	SHR		 	 
- stack 1: 0x498
- stack 0: 0xEB0007
645	 F1	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0xEB0007
- stack 0: 0xFFFF
646	 F4	AND		 	 
- stack 1: 0x498
- stack 0: 0x7
647	 F5	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x7
- stack 0: 0x1
648	 F7	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x7
649	 F8	PUSH2	0380	 	 
- stack 2: 0x498
- stack 1: 0x7
- stack 0: 0x380
650	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x498
651	 FC	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
652	 FE	ADD		 	 
- stack 0: 0x49C
653	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
654	 100	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x10504540086000001A6000801B9FFFF00BA000001D8000801EBFFFF00EB0008
655	 101	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x10504540086000001A6000801B9FFFF00BA000001D8000801EBFFFF00EB0008
- stack 0: 0xF0
656	 103	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x105
657	 104	JUMP		 	 
- stack 0: 0x49C
658	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x49C
659	 106	PUSH2	0060	 	 
- stack 1: 0x49C
- stack 0: 0x60
660	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x49C
- stack 0: 0x17FFF8000
661	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0x17FFF8000
- stack 0: 0xFFFFFFFF
662	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0x7FFF8000
663	 110	PUSH2	03A0	 	 
- stack 2: 0x49C
- stack 1: 0x7FFF8000
- stack 0: 0x3A0
664	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x49C
- stack 1: 0x7FFF8000
- stack 0: 0x7FFF8000
665	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x49C
- stack 2: 0x7FFF8000
- stack 1: 0x7FFF8000
- stack 0: 0xFFFFFFFF
666	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x49C
- stack 1: 0x7FFF8000
- stack 0: 0x7FFF8000
667	 11A	SUB		 	 
- stack 1: 0x49C
- stack 0: 0x0
668	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x123
669	 11E	JUMPI		 	 
- stack 0: 0x49C
670	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x49C
- stack 0: 0x13D
671	 122	JUMP		 	 
- stack 0: 0x49C
672	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x49C
673	 13E	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
674	 140	ADD		 	 
- stack 0: 0x4A0
675	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
676	 142	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x86000001A6000801B9FFFF00BA000001D8000801EBFFFF00EB000801050434
677	 143	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x86000001A6000801B9FFFF00BA000001D8000801EBFFFF00EB000801050434
- stack 0: 0xF0
678	 145	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x86
679	 146	JUMP		 	 
- stack 0: 0x4A0
680	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4A0
681	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
682	 88	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x86000001A6000801B9FFFF00BA000001D8000801EBFFFF00EB000801050434
683	 89	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0x86000001A6000801B9FFFF00BA000001D8000801EBFFFF00EB000801050434
- stack 0: 0xE0
684	 8B	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x860000
685	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x860000
- stack 0: 0xFFFF
686	 8F	AND		 	 
- stack 1: 0x4A0
- stack 0: 0x0
687	 90	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0x0
- stack 0: 0x1
688	 92	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0x0
689	 93	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0x0
- stack 0: 0x20
690	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A0
691	 97	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
692	 99	ADD		 	 
- stack 0: 0x4A4
693	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
694	 9B	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x1A6000801B9FFFF00BA000001D8000801EBFFFF00EB000801050434016D0000
695	 9C	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x1A6000801B9FFFF00BA000001D8000801EBFFFF00EB000801050434016D0000
- stack 0: 0xF0
696	 9E	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x1A6
697	 9F	JUMP		 	 
- stack 0: 0x4A4
698	 1A6	JUMPDEST		 ;; __riscvimpl_LUI_8137	  ;; # instr: lui sp,0x8(ignore imm)
- stack 0: 0x4A4
699	 1A7	PUSH4	00008000	 	 
- stack 1: 0x4A4
- stack 0: 0x8000
700	 1AC	PUSH2	0040	 	 
- stack 2: 0x4A4
- stack 1: 0x8000
- stack 0: 0x40
701	 1AF	MSTORE		 	  ;; # store to x2
- stack 0: 0x4A4
702	 1B0	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
703	 1B2	ADD		 	 
- stack 0: 0x4A8
704	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
705	 1B4	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x1B9FFFF00BA000001D8000801EBFFFF00EB000801050434016D0000020AFFFF
706	 1B5	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x1B9FFFF00BA000001D8000801EBFFFF00EB000801050434016D0000020AFFFF
- stack 0: 0xF0
707	 1B7	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x1B9
708	 1B8	JUMP		 	 
- stack 0: 0x4A8
709	 1B9	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x4A8
710	 1BA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
711	 1BB	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x1B9FFFF00BA000001D8000801EBFFFF00EB000801050434016D0000020AFFFF
712	 1BC	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0x1B9FFFF00BA000001D8000801EBFFFF00EB000801050434016D0000020AFFFF
- stack 0: 0xE0
713	 1BE	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x1B9FFFF
714	 1BF	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x1B9FFFF
- stack 0: 0xFFFF
715	 1C2	AND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFFF
716	 1C3	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFF
- stack 0: 0x1
717	 1C5	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
718	 1C6	PUSH2	0040	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
719	 1C9	MLOAD		 	  ;; # read from x2
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x8000
720	 1CA	ADD		 	  ;; # ADDI 2
- stack 1: 0x4A8
- stack 0: 0x7FFF
721	 1CB	PUSH2	0040	 	 
- stack 2: 0x4A8
- stack 1: 0x7FFF
- stack 0: 0x40
722	 1CE	MSTORE		 	  ;; # store to x2
- stack 0: 0x4A8
723	 1CF	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
724	 1D1	ADD		 	 
- stack 0: 0x4AC
725	 1D2	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
726	 1D3	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xBA000001D8000801EBFFFF00EB000801050434016D0000020AFFFF00A00000
727	 1D4	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xBA000001D8000801EBFFFF00EB000801050434016D0000020AFFFF00A00000
- stack 0: 0xF0
728	 1D6	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xBA
729	 1D7	JUMP		 	 
- stack 0: 0x4AC
730	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x4AC
731	 BB	PUSH2	0020	 	 
- stack 1: 0x4AC
- stack 0: 0x20
732	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x4AC
- stack 0: 0x0
733	 BF	PUSH2	0040	 	 
- stack 2: 0x4AC
- stack 1: 0x0
- stack 0: 0x40
734	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4AC
- stack 1: 0x0
- stack 0: 0x7FFF
735	 C3	ADD		 	 
- stack 1: 0x4AC
- stack 0: 0x7FFF
736	 C4	PUSH2	0060	 	 
- stack 2: 0x4AC
- stack 1: 0x7FFF
- stack 0: 0x60
737	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x4AC
738	 C8	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
739	 CA	ADD		 	 
- stack 0: 0x4B0
740	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
741	 CC	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x1D8000801EBFFFF00EB000801050434016D0000020AFFFF00A0000000BA0000
742	 CD	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x1D8000801EBFFFF00EB000801050434016D0000020AFFFF00A0000000BA0000
- stack 0: 0xF0
743	 CF	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x1D8
744	 D0	JUMP		 	 
- stack 0: 0x4B0
745	 1D8	JUMPDEST		 ;; __riscvimpl_LUI_8eb7	  ;; # instr: lui t4,0x8(ignore imm)
- stack 0: 0x4B0
746	 1D9	PUSH4	00008000	 	 
- stack 1: 0x4B0
- stack 0: 0x8000
747	 1DE	PUSH2	03A0	 	 
- stack 2: 0x4B0
- stack 1: 0x8000
- stack 0: 0x3A0
748	 1E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B0
749	 1E2	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
750	 1E4	ADD		 	 
- stack 0: 0x4B4
751	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
752	 1E6	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x1EBFFFF00EB000801050434016D0000020AFFFF00A0000000BA000001800000
753	 1E7	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x1EBFFFF00EB000801050434016D0000020AFFFF00A0000000BA000001800000
- stack 0: 0xF0
754	 1E9	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x1EB
755	 1EA	JUMP		 	 
- stack 0: 0x4B4
756	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x4B4
757	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
758	 1ED	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x1EBFFFF00EB000801050434016D0000020AFFFF00A0000000BA000001800000
759	 1EE	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0x1EBFFFF00EB000801050434016D0000020AFFFF00A0000000BA000001800000
- stack 0: 0xE0
760	 1F0	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x1EBFFFF
761	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x1EBFFFF
- stack 0: 0xFFFF
762	 1F4	AND		 	 
- stack 1: 0x4B4
- stack 0: 0xFFFF
763	 1F5	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFF
- stack 0: 0x1
764	 1F7	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
765	 1F8	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
766	 1FB	MLOAD		 	  ;; # read from x29
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x8000
767	 1FC	ADD		 	  ;; # ADDI 29
- stack 1: 0x4B4
- stack 0: 0x7FFF
768	 1FD	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0x7FFF
- stack 0: 0x3A0
769	 200	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B4
770	 201	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
771	 203	ADD		 	 
- stack 0: 0x4B8
772	 204	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
773	 205	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xEB000801050434016D0000020AFFFF00A0000000BA00000180000001EBFFFF
774	 206	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0xEB000801050434016D0000020AFFFF00A0000000BA00000180000001EBFFFF
- stack 0: 0xF0
775	 208	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xEB
776	 209	JUMP		 	 
- stack 0: 0x4B8
777	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4B8
778	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
779	 ED	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xEB000801050434016D0000020AFFFF00A0000000BA00000180000001EBFFFF
780	 EE	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0xEB000801050434016D0000020AFFFF00A0000000BA00000180000001EBFFFF
- stack 0: 0xE0
781	 F0	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xEB0008
782	 F1	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0xEB0008
- stack 0: 0xFFFF
783	 F4	AND		 	 
- stack 1: 0x4B8
- stack 0: 0x8
784	 F5	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0x8
- stack 0: 0x1
785	 F7	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0x8
786	 F8	PUSH2	0380	 	 
- stack 2: 0x4B8
- stack 1: 0x8
- stack 0: 0x380
787	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x4B8
788	 FC	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
789	 FE	ADD		 	 
- stack 0: 0x4BC
790	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
791	 100	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x1050434016D0000020AFFFF00A0000000BA00000180000001EBFFFF00EB0009
792	 101	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x1050434016D0000020AFFFF00A0000000BA00000180000001EBFFFF00EB0009
- stack 0: 0xF0
793	 103	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x105
794	 104	JUMP		 	 
- stack 0: 0x4BC
795	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x4BC
796	 106	PUSH2	0060	 	 
- stack 1: 0x4BC
- stack 0: 0x60
797	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x4BC
- stack 0: 0x7FFF
798	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x7FFF
- stack 0: 0xFFFFFFFF
799	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4BC
- stack 0: 0x7FFF
800	 110	PUSH2	03A0	 	 
- stack 2: 0x4BC
- stack 1: 0x7FFF
- stack 0: 0x3A0
801	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x4BC
- stack 1: 0x7FFF
- stack 0: 0x7FFF
802	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4BC
- stack 2: 0x7FFF
- stack 1: 0x7FFF
- stack 0: 0xFFFFFFFF
803	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4BC
- stack 1: 0x7FFF
- stack 0: 0x7FFF
804	 11A	SUB		 	 
- stack 1: 0x4BC
- stack 0: 0x0
805	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x4BC
- stack 1: 0x0
- stack 0: 0x123
806	 11E	JUMPI		 	 
- stack 0: 0x4BC
807	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x4BC
- stack 0: 0x13D
808	 122	JUMP		 	 
- stack 0: 0x4BC
809	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x4BC
810	 13E	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
811	 140	ADD		 	 
- stack 0: 0x4C0
812	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
813	 142	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x16D0000020AFFFF00A0000000BA00000180000001EBFFFF00EB000901050414
814	 143	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x16D0000020AFFFF00A0000000BA00000180000001EBFFFF00EB000901050414
- stack 0: 0xF0
815	 145	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x16D
816	 146	JUMP		 	 
- stack 0: 0x4C0
817	 16D	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4C0
818	 16E	PUSH4	80000000	 	 
- stack 1: 0x4C0
- stack 0: 0x80000000
819	 173	PUSH2	0020	 	 
- stack 2: 0x4C0
- stack 1: 0x80000000
- stack 0: 0x20
820	 176	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C0
821	 177	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
822	 179	ADD		 	 
- stack 0: 0x4C4
823	 17A	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
824	 17B	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x20AFFFF00A0000000BA00000180000001EBFFFF00EB000901050414016D0000
825	 17C	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x20AFFFF00A0000000BA00000180000001EBFFFF00EB000901050414016D0000
- stack 0: 0xF0
826	 17E	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x20A
827	 17F	JUMP		 	 
- stack 0: 0x4C4
828	 20A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x4C4
829	 20B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
830	 20C	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x20AFFFF00A0000000BA00000180000001EBFFFF00EB000901050414016D0000
831	 20D	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0x20AFFFF00A0000000BA00000180000001EBFFFF00EB000901050414016D0000
- stack 0: 0xE0
832	 20F	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x20AFFFF
833	 210	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x20AFFFF
- stack 0: 0xFFFF
834	 213	AND		 	 
- stack 1: 0x4C4
- stack 0: 0xFFFF
835	 214	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0xFFFF
- stack 0: 0x1
836	 216	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
837	 217	PUSH2	0020	 	 
- stack 2: 0x4C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
838	 21A	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
839	 21B	ADD		 	  ;; # ADDI 1
- stack 1: 0x4C4
- stack 0: 0x7FFFFFFF
840	 21C	PUSH2	0020	 	 
- stack 2: 0x4C4
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
841	 21F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C4
842	 220	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
843	 222	ADD		 	 
- stack 0: 0x4C8
844	 223	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
845	 224	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xA0000000BA00000180000001EBFFFF00EB000901050414016D0000020AFFFF
846	 225	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0xA0000000BA00000180000001EBFFFF00EB000901050414016D0000020AFFFF
- stack 0: 0xF0
847	 227	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xA0
848	 228	JUMP		 	 
- stack 0: 0x4C8
849	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4C8
850	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
851	 A2	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xA0000000BA00000180000001EBFFFF00EB000901050414016D0000020AFFFF
852	 A3	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0xA0000000BA00000180000001EBFFFF00EB000901050414016D0000020AFFFF
- stack 0: 0xE0
853	 A5	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xA00000
854	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0xA00000
- stack 0: 0xFFFF
855	 A9	AND		 	 
- stack 1: 0x4C8
- stack 0: 0x0
856	 AA	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x1
857	 AC	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0x0
858	 AD	PUSH2	0040	 	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x40
859	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x4C8
860	 B1	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
861	 B3	ADD		 	 
- stack 0: 0x4CC
862	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
863	 B5	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xBA00000180000001EBFFFF00EB000901050414016D0000020AFFFF01A60008
864	 B6	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0xBA00000180000001EBFFFF00EB000901050414016D0000020AFFFF01A60008
- stack 0: 0xF0
865	 B8	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xBA
866	 B9	JUMP		 	 
- stack 0: 0x4CC
867	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x4CC
868	 BB	PUSH2	0020	 	 
- stack 1: 0x4CC
- stack 0: 0x20
869	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x4CC
- stack 0: 0x7FFFFFFF
870	 BF	PUSH2	0040	 	 
- stack 2: 0x4CC
- stack 1: 0x7FFFFFFF
- stack 0: 0x40
871	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4CC
- stack 1: 0x7FFFFFFF
- stack 0: 0x0
872	 C3	ADD		 	 
- stack 1: 0x4CC
- stack 0: 0x7FFFFFFF
873	 C4	PUSH2	0060	 	 
- stack 2: 0x4CC
- stack 1: 0x7FFFFFFF
- stack 0: 0x60
874	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x4CC
875	 C8	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
876	 CA	ADD		 	 
- stack 0: 0x4D0
877	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
878	 CC	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x180000001EBFFFF00EB000901050414016D0000020AFFFF01A6000801B9FFFF
879	 CD	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x180000001EBFFFF00EB000901050414016D0000020AFFFF01A6000801B9FFFF
- stack 0: 0xF0
880	 CF	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x180
881	 D0	JUMP		 	 
- stack 0: 0x4D0
882	 180	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x4D0
883	 181	PUSH4	80000000	 	 
- stack 1: 0x4D0
- stack 0: 0x80000000
884	 186	PUSH2	03A0	 	 
- stack 2: 0x4D0
- stack 1: 0x80000000
- stack 0: 0x3A0
885	 189	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D0
886	 18A	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
887	 18C	ADD		 	 
- stack 0: 0x4D4
888	 18D	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
889	 18E	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x1EBFFFF00EB000901050414016D0000020AFFFF01A6000801B9FFFF00BA0000
890	 18F	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x1EBFFFF00EB000901050414016D0000020AFFFF01A6000801B9FFFF00BA0000
- stack 0: 0xF0
891	 191	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x1EB
892	 192	JUMP		 	 
- stack 0: 0x4D4
893	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x4D4
894	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
895	 1ED	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x1EBFFFF00EB000901050414016D0000020AFFFF01A6000801B9FFFF00BA0000
896	 1EE	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0x1EBFFFF00EB000901050414016D0000020AFFFF01A6000801B9FFFF00BA0000
- stack 0: 0xE0
897	 1F0	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x1EBFFFF
898	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x1EBFFFF
- stack 0: 0xFFFF
899	 1F4	AND		 	 
- stack 1: 0x4D4
- stack 0: 0xFFFF
900	 1F5	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0xFFFF
- stack 0: 0x1
901	 1F7	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
902	 1F8	PUSH2	03A0	 	 
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
903	 1FB	MLOAD		 	  ;; # read from x29
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
904	 1FC	ADD		 	  ;; # ADDI 29
- stack 1: 0x4D4
- stack 0: 0x7FFFFFFF
905	 1FD	PUSH2	03A0	 	 
- stack 2: 0x4D4
- stack 1: 0x7FFFFFFF
- stack 0: 0x3A0
906	 200	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D4
907	 201	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
908	 203	ADD		 	 
- stack 0: 0x4D8
909	 204	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
910	 205	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xEB000901050414016D0000020AFFFF01A6000801B9FFFF00BA000002290008
911	 206	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0xEB000901050414016D0000020AFFFF01A6000801B9FFFF00BA000002290008
- stack 0: 0xF0
912	 208	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xEB
913	 209	JUMP		 	 
- stack 0: 0x4D8
914	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4D8
915	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
916	 ED	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xEB000901050414016D0000020AFFFF01A6000801B9FFFF00BA000002290008
917	 EE	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0xEB000901050414016D0000020AFFFF01A6000801B9FFFF00BA000002290008
- stack 0: 0xE0
918	 F0	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xEB0009
919	 F1	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0xEB0009
- stack 0: 0xFFFF
920	 F4	AND		 	 
- stack 1: 0x4D8
- stack 0: 0x9
921	 F5	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0x9
- stack 0: 0x1
922	 F7	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0x9
923	 F8	PUSH2	0380	 	 
- stack 2: 0x4D8
- stack 1: 0x9
- stack 0: 0x380
924	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x4D8
925	 FC	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
926	 FE	ADD		 	 
- stack 0: 0x4DC
927	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
928	 100	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x1050414016D0000020AFFFF01A6000801B9FFFF00BA00000229000801EBFFFE
929	 101	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x1050414016D0000020AFFFF01A6000801B9FFFF00BA00000229000801EBFFFE
- stack 0: 0xF0
930	 103	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x105
931	 104	JUMP		 	 
- stack 0: 0x4DC
932	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x4DC
933	 106	PUSH2	0060	 	 
- stack 1: 0x4DC
- stack 0: 0x60
934	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x4DC
- stack 0: 0x7FFFFFFF
935	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
936	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4DC
- stack 0: 0x7FFFFFFF
937	 110	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0x7FFFFFFF
- stack 0: 0x3A0
938	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x4DC
- stack 1: 0x7FFFFFFF
- stack 0: 0x7FFFFFFF
939	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4DC
- stack 2: 0x7FFFFFFF
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
940	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4DC
- stack 1: 0x7FFFFFFF
- stack 0: 0x7FFFFFFF
941	 11A	SUB		 	 
- stack 1: 0x4DC
- stack 0: 0x0
942	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x123
943	 11E	JUMPI		 	 
- stack 0: 0x4DC
944	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x4DC
- stack 0: 0x13D
945	 122	JUMP		 	 
- stack 0: 0x4DC
946	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x4DC
947	 13E	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
948	 140	ADD		 	 
- stack 0: 0x4E0
949	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
950	 142	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x16D0000020AFFFF01A6000801B9FFFF00BA00000229000801EBFFFE00EB000A
951	 143	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x16D0000020AFFFF01A6000801B9FFFF00BA00000229000801EBFFFE00EB000A
- stack 0: 0xF0
952	 145	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x16D
953	 146	JUMP		 	 
- stack 0: 0x4E0
954	 16D	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4E0
955	 16E	PUSH4	80000000	 	 
- stack 1: 0x4E0
- stack 0: 0x80000000
956	 173	PUSH2	0020	 	 
- stack 2: 0x4E0
- stack 1: 0x80000000
- stack 0: 0x20
957	 176	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E0
958	 177	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
959	 179	ADD		 	 
- stack 0: 0x4E4
960	 17A	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
961	 17B	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x20AFFFF01A6000801B9FFFF00BA00000229000801EBFFFE00EB000A010503F0
962	 17C	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x20AFFFF01A6000801B9FFFF00BA00000229000801EBFFFE00EB000A010503F0
- stack 0: 0xF0
963	 17E	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x20A
964	 17F	JUMP		 	 
- stack 0: 0x4E4
965	 20A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x4E4
966	 20B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
967	 20C	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x20AFFFF01A6000801B9FFFF00BA00000229000801EBFFFE00EB000A010503F0
968	 20D	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0x20AFFFF01A6000801B9FFFF00BA00000229000801EBFFFE00EB000A010503F0
- stack 0: 0xE0
969	 20F	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x20AFFFF
970	 210	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x20AFFFF
- stack 0: 0xFFFF
971	 213	AND		 	 
- stack 1: 0x4E4
- stack 0: 0xFFFF
972	 214	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0xFFFF
- stack 0: 0x1
973	 216	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
974	 217	PUSH2	0020	 	 
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
975	 21A	MLOAD		 	  ;; # read from x1
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
976	 21B	ADD		 	  ;; # ADDI 1
- stack 1: 0x4E4
- stack 0: 0x7FFFFFFF
977	 21C	PUSH2	0020	 	 
- stack 2: 0x4E4
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
978	 21F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E4
979	 220	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
980	 222	ADD		 	 
- stack 0: 0x4E8
981	 223	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
982	 224	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x1A6000801B9FFFF00BA00000229000801EBFFFE00EB000A010503F0016D0000
983	 225	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x1A6000801B9FFFF00BA00000229000801EBFFFE00EB000A010503F0016D0000
- stack 0: 0xF0
984	 227	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x1A6
985	 228	JUMP		 	 
- stack 0: 0x4E8
986	 1A6	JUMPDEST		 ;; __riscvimpl_LUI_8137	  ;; # instr: lui sp,0x8(ignore imm)
- stack 0: 0x4E8
987	 1A7	PUSH4	00008000	 	 
- stack 1: 0x4E8
- stack 0: 0x8000
988	 1AC	PUSH2	0040	 	 
- stack 2: 0x4E8
- stack 1: 0x8000
- stack 0: 0x40
989	 1AF	MSTORE		 	  ;; # store to x2
- stack 0: 0x4E8
990	 1B0	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
991	 1B2	ADD		 	 
- stack 0: 0x4EC
992	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
993	 1B4	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x1B9FFFF00BA00000229000801EBFFFE00EB000A010503F0016D000001A60008
994	 1B5	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x1B9FFFF00BA00000229000801EBFFFE00EB000A010503F0016D000001A60008
- stack 0: 0xF0
995	 1B7	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x1B9
996	 1B8	JUMP		 	 
- stack 0: 0x4EC
997	 1B9	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x4EC
998	 1BA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
999	 1BB	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x1B9FFFF00BA00000229000801EBFFFE00EB000A010503F0016D000001A60008
1000	 1BC	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0x1B9FFFF00BA00000229000801EBFFFE00EB000A010503F0016D000001A60008
- stack 0: 0xE0
1001	 1BE	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x1B9FFFF
1002	 1BF	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x1B9FFFF
- stack 0: 0xFFFF
1003	 1C2	AND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFF
1004	 1C3	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFF
- stack 0: 0x1
1005	 1C5	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1006	 1C6	PUSH2	0040	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1007	 1C9	MLOAD		 	  ;; # read from x2
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x8000
1008	 1CA	ADD		 	  ;; # ADDI 2
- stack 1: 0x4EC
- stack 0: 0x7FFF
1009	 1CB	PUSH2	0040	 	 
- stack 2: 0x4EC
- stack 1: 0x7FFF
- stack 0: 0x40
1010	 1CE	MSTORE		 	  ;; # store to x2
- stack 0: 0x4EC
1011	 1CF	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1012	 1D1	ADD		 	 
- stack 0: 0x4F0
1013	 1D2	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1014	 1D3	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xBA00000229000801EBFFFE00EB000A010503F0016D000001A6000801B9FFFF
1015	 1D4	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xBA00000229000801EBFFFE00EB000A010503F0016D000001A6000801B9FFFF
- stack 0: 0xF0
1016	 1D6	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xBA
1017	 1D7	JUMP		 	 
- stack 0: 0x4F0
1018	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x4F0
1019	 BB	PUSH2	0020	 	 
- stack 1: 0x4F0
- stack 0: 0x20
1020	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x4F0
- stack 0: 0x7FFFFFFF
1021	 BF	PUSH2	0040	 	 
- stack 2: 0x4F0
- stack 1: 0x7FFFFFFF
- stack 0: 0x40
1022	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4F0
- stack 1: 0x7FFFFFFF
- stack 0: 0x7FFF
1023	 C3	ADD		 	 
- stack 1: 0x4F0
- stack 0: 0x80007FFE
1024	 C4	PUSH2	0060	 	 
- stack 2: 0x4F0
- stack 1: 0x80007FFE
- stack 0: 0x60
1025	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x4F0
1026	 C8	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1027	 CA	ADD		 	 
- stack 0: 0x4F4
1028	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1029	 CC	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x229000801EBFFFE00EB000A010503F0016D000001A6000801B9FFFF00BA0000
1030	 CD	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x229000801EBFFFE00EB000A010503F0016D000001A6000801B9FFFF00BA0000
- stack 0: 0xF0
1031	 CF	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x229
1032	 D0	JUMP		 	 
- stack 0: 0x4F4
1033	 229	JUMPDEST		 ;; __riscvimpl_LUI_80008eb7	  ;; # instr: lui t4,0x80008(ignore imm)
- stack 0: 0x4F4
1034	 22A	PUSH4	80008000	 	 
- stack 1: 0x4F4
- stack 0: 0x80008000
1035	 22F	PUSH2	03A0	 	 
- stack 2: 0x4F4
- stack 1: 0x80008000
- stack 0: 0x3A0
1036	 232	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F4
1037	 233	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1038	 235	ADD		 	 
- stack 0: 0x4F8
1039	 236	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1040	 237	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x1EBFFFE00EB000A010503F0016D000001A6000801B9FFFF00BA000002290008
1041	 238	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x1EBFFFE00EB000A010503F0016D000001A6000801B9FFFF00BA000002290008
- stack 0: 0xF0
1042	 23A	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x1EB
1043	 23B	JUMP		 	 
- stack 0: 0x4F8
1044	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x4F8
1045	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1046	 1ED	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x1EBFFFE00EB000A010503F0016D000001A6000801B9FFFF00BA000002290008
1047	 1EE	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x1EBFFFE00EB000A010503F0016D000001A6000801B9FFFF00BA000002290008
- stack 0: 0xE0
1048	 1F0	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x1EBFFFE
1049	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x1EBFFFE
- stack 0: 0xFFFF
1050	 1F4	AND		 	 
- stack 1: 0x4F8
- stack 0: 0xFFFE
1051	 1F5	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0xFFFE
- stack 0: 0x1
1052	 1F7	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1053	 1F8	PUSH2	03A0	 	 
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3A0
1054	 1FB	MLOAD		 	  ;; # read from x29
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x80008000
1055	 1FC	ADD		 	  ;; # ADDI 29
- stack 1: 0x4F8
- stack 0: 0x80007FFE
1056	 1FD	PUSH2	03A0	 	 
- stack 2: 0x4F8
- stack 1: 0x80007FFE
- stack 0: 0x3A0
1057	 200	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F8
1058	 201	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1059	 203	ADD		 	 
- stack 0: 0x4FC
1060	 204	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1061	 205	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0xEB000A010503F0016D000001A6000801B9FFFF00BA00000229000801EBFFFF
1062	 206	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0xEB000A010503F0016D000001A6000801B9FFFF00BA00000229000801EBFFFF
- stack 0: 0xF0
1063	 208	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0xEB
1064	 209	JUMP		 	 
- stack 0: 0x4FC
1065	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4FC
1066	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1067	 ED	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0xEB000A010503F0016D000001A6000801B9FFFF00BA00000229000801EBFFFF
1068	 EE	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0xEB000A010503F0016D000001A6000801B9FFFF00BA00000229000801EBFFFF
- stack 0: 0xE0
1069	 F0	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0xEB000A
1070	 F1	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0xEB000A
- stack 0: 0xFFFF
1071	 F4	AND		 	 
- stack 1: 0x4FC
- stack 0: 0xA
1072	 F5	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0xA
- stack 0: 0x1
1073	 F7	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0xA
1074	 F8	PUSH2	0380	 	 
- stack 2: 0x4FC
- stack 1: 0xA
- stack 0: 0x380
1075	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x4FC
1076	 FC	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1077	 FE	ADD		 	 
- stack 0: 0x500
1078	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1079	 100	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x10503F0016D000001A6000801B9FFFF00BA00000229000801EBFFFF00EB000B
1080	 101	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x10503F0016D000001A6000801B9FFFF00BA00000229000801EBFFFF00EB000B
- stack 0: 0xF0
1081	 103	SHR		 	 
- stack 1: 0x500
- stack 0: 0x105
1082	 104	JUMP		 	 
- stack 0: 0x500
1083	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x500
1084	 106	PUSH2	0060	 	 
- stack 1: 0x500
- stack 0: 0x60
1085	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x500
- stack 0: 0x80007FFE
1086	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x500
- stack 1: 0x80007FFE
- stack 0: 0xFFFFFFFF
1087	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x500
- stack 0: 0x80007FFE
1088	 110	PUSH2	03A0	 	 
- stack 2: 0x500
- stack 1: 0x80007FFE
- stack 0: 0x3A0
1089	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x500
- stack 1: 0x80007FFE
- stack 0: 0x80007FFE
1090	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x500
- stack 2: 0x80007FFE
- stack 1: 0x80007FFE
- stack 0: 0xFFFFFFFF
1091	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x500
- stack 1: 0x80007FFE
- stack 0: 0x80007FFE
1092	 11A	SUB		 	 
- stack 1: 0x500
- stack 0: 0x0
1093	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x123
1094	 11E	JUMPI		 	 
- stack 0: 0x500
1095	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x500
- stack 0: 0x13D
1096	 122	JUMP		 	 
- stack 0: 0x500
1097	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x500
1098	 13E	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1099	 140	ADD		 	 
- stack 0: 0x504
1100	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1101	 142	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x16D000001A6000801B9FFFF00BA00000229000801EBFFFF00EB000B010503D0
1102	 143	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x16D000001A6000801B9FFFF00BA00000229000801EBFFFF00EB000B010503D0
- stack 0: 0xF0
1103	 145	SHR		 	 
- stack 1: 0x504
- stack 0: 0x16D
1104	 146	JUMP		 	 
- stack 0: 0x504
1105	 16D	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x504
1106	 16E	PUSH4	80000000	 	 
- stack 1: 0x504
- stack 0: 0x80000000
1107	 173	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0x80000000
- stack 0: 0x20
1108	 176	MSTORE		 	  ;; # store to x1
- stack 0: 0x504
1109	 177	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1110	 179	ADD		 	 
- stack 0: 0x508
1111	 17A	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1112	 17B	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x1A6000801B9FFFF00BA00000229000801EBFFFF00EB000B010503D0016D0000
1113	 17C	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x1A6000801B9FFFF00BA00000229000801EBFFFF00EB000B010503D0016D0000
- stack 0: 0xF0
1114	 17E	SHR		 	 
- stack 1: 0x508
- stack 0: 0x1A6
1115	 17F	JUMP		 	 
- stack 0: 0x508
1116	 1A6	JUMPDEST		 ;; __riscvimpl_LUI_8137	  ;; # instr: lui sp,0x8(ignore imm)
- stack 0: 0x508
1117	 1A7	PUSH4	00008000	 	 
- stack 1: 0x508
- stack 0: 0x8000
1118	 1AC	PUSH2	0040	 	 
- stack 2: 0x508
- stack 1: 0x8000
- stack 0: 0x40
1119	 1AF	MSTORE		 	  ;; # store to x2
- stack 0: 0x508
1120	 1B0	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1121	 1B2	ADD		 	 
- stack 0: 0x50C
1122	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1123	 1B4	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x1B9FFFF00BA00000229000801EBFFFF00EB000B010503D0016D0000020AFFFF
1124	 1B5	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x1B9FFFF00BA00000229000801EBFFFF00EB000B010503D0016D0000020AFFFF
- stack 0: 0xF0
1125	 1B7	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x1B9
1126	 1B8	JUMP		 	 
- stack 0: 0x50C
1127	 1B9	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x50C
1128	 1BA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1129	 1BB	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x1B9FFFF00BA00000229000801EBFFFF00EB000B010503D0016D0000020AFFFF
1130	 1BC	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0x1B9FFFF00BA00000229000801EBFFFF00EB000B010503D0016D0000020AFFFF
- stack 0: 0xE0
1131	 1BE	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x1B9FFFF
1132	 1BF	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0x1B9FFFF
- stack 0: 0xFFFF
1133	 1C2	AND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFF
1134	 1C3	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xFFFF
- stack 0: 0x1
1135	 1C5	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1136	 1C6	PUSH2	0040	 	 
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1137	 1C9	MLOAD		 	  ;; # read from x2
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x8000
1138	 1CA	ADD		 	  ;; # ADDI 2
- stack 1: 0x50C
- stack 0: 0x7FFF
1139	 1CB	PUSH2	0040	 	 
- stack 2: 0x50C
- stack 1: 0x7FFF
- stack 0: 0x40
1140	 1CE	MSTORE		 	  ;; # store to x2
- stack 0: 0x50C
1141	 1CF	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1142	 1D1	ADD		 	 
- stack 0: 0x510
1143	 1D2	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1144	 1D3	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xBA00000229000801EBFFFF00EB000B010503D0016D0000020AFFFF0147FFF8
1145	 1D4	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xBA00000229000801EBFFFF00EB000B010503D0016D0000020AFFFF0147FFF8
- stack 0: 0xF0
1146	 1D6	SHR		 	 
- stack 1: 0x510
- stack 0: 0xBA
1147	 1D7	JUMP		 	 
- stack 0: 0x510
1148	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x510
1149	 BB	PUSH2	0020	 	 
- stack 1: 0x510
- stack 0: 0x20
1150	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x510
- stack 0: 0x80000000
1151	 BF	PUSH2	0040	 	 
- stack 2: 0x510
- stack 1: 0x80000000
- stack 0: 0x40
1152	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x510
- stack 1: 0x80000000
- stack 0: 0x7FFF
1153	 C3	ADD		 	 
- stack 1: 0x510
- stack 0: 0x80007FFF
1154	 C4	PUSH2	0060	 	 
- stack 2: 0x510
- stack 1: 0x80007FFF
- stack 0: 0x60
1155	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x510
1156	 C8	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1157	 CA	ADD		 	 
- stack 0: 0x514
1158	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1159	 CC	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x229000801EBFFFF00EB000B010503D0016D0000020AFFFF0147FFF800BA0000
1160	 CD	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x229000801EBFFFF00EB000B010503D0016D0000020AFFFF0147FFF800BA0000
- stack 0: 0xF0
1161	 CF	SHR		 	 
- stack 1: 0x514
- stack 0: 0x229
1162	 D0	JUMP		 	 
- stack 0: 0x514
1163	 229	JUMPDEST		 ;; __riscvimpl_LUI_80008eb7	  ;; # instr: lui t4,0x80008(ignore imm)
- stack 0: 0x514
1164	 22A	PUSH4	80008000	 	 
- stack 1: 0x514
- stack 0: 0x80008000
1165	 22F	PUSH2	03A0	 	 
- stack 2: 0x514
- stack 1: 0x80008000
- stack 0: 0x3A0
1166	 232	MSTORE		 	  ;; # store to x29
- stack 0: 0x514
1167	 233	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1168	 235	ADD		 	 
- stack 0: 0x518
1169	 236	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1170	 237	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x1EBFFFF00EB000B010503D0016D0000020AFFFF0147FFF800BA00000193FFF8
1171	 238	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x1EBFFFF00EB000B010503D0016D0000020AFFFF0147FFF800BA00000193FFF8
- stack 0: 0xF0
1172	 23A	SHR		 	 
- stack 1: 0x518
- stack 0: 0x1EB
1173	 23B	JUMP		 	 
- stack 0: 0x518
1174	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x518
1175	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1176	 1ED	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x1EBFFFF00EB000B010503D0016D0000020AFFFF0147FFF800BA00000193FFF8
1177	 1EE	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x1EBFFFF00EB000B010503D0016D0000020AFFFF0147FFF800BA00000193FFF8
- stack 0: 0xE0
1178	 1F0	SHR		 	 
- stack 1: 0x518
- stack 0: 0x1EBFFFF
1179	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x1EBFFFF
- stack 0: 0xFFFF
1180	 1F4	AND		 	 
- stack 1: 0x518
- stack 0: 0xFFFF
1181	 1F5	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0xFFFF
- stack 0: 0x1
1182	 1F7	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1183	 1F8	PUSH2	03A0	 	 
- stack 2: 0x518
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
1184	 1FB	MLOAD		 	  ;; # read from x29
- stack 2: 0x518
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80008000
1185	 1FC	ADD		 	  ;; # ADDI 29
- stack 1: 0x518
- stack 0: 0x80007FFF
1186	 1FD	PUSH2	03A0	 	 
- stack 2: 0x518
- stack 1: 0x80007FFF
- stack 0: 0x3A0
1187	 200	MSTORE		 	  ;; # store to x29
- stack 0: 0x518
1188	 201	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1189	 203	ADD		 	 
- stack 0: 0x51C
1190	 204	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1191	 205	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0xEB000B010503D0016D0000020AFFFF0147FFF800BA00000193FFF801EBFFFF
1192	 206	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0xEB000B010503D0016D0000020AFFFF0147FFF800BA00000193FFF801EBFFFF
- stack 0: 0xF0
1193	 208	SHR		 	 
- stack 1: 0x51C
- stack 0: 0xEB
1194	 209	JUMP		 	 
- stack 0: 0x51C
1195	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x51C
1196	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1197	 ED	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0xEB000B010503D0016D0000020AFFFF0147FFF800BA00000193FFF801EBFFFF
1198	 EE	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0xEB000B010503D0016D0000020AFFFF0147FFF800BA00000193FFF801EBFFFF
- stack 0: 0xE0
1199	 F0	SHR		 	 
- stack 1: 0x51C
- stack 0: 0xEB000B
1200	 F1	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0xEB000B
- stack 0: 0xFFFF
1201	 F4	AND		 	 
- stack 1: 0x51C
- stack 0: 0xB
1202	 F5	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0xB
- stack 0: 0x1
1203	 F7	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0xB
1204	 F8	PUSH2	0380	 	 
- stack 2: 0x51C
- stack 1: 0xB
- stack 0: 0x380
1205	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x51C
1206	 FC	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1207	 FE	ADD		 	 
- stack 0: 0x520
1208	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1209	 100	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x10503D0016D0000020AFFFF0147FFF800BA00000193FFF801EBFFFF00EB000C
1210	 101	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x10503D0016D0000020AFFFF0147FFF800BA00000193FFF801EBFFFF00EB000C
- stack 0: 0xF0
1211	 103	SHR		 	 
- stack 1: 0x520
- stack 0: 0x105
1212	 104	JUMP		 	 
- stack 0: 0x520
1213	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x520
1214	 106	PUSH2	0060	 	 
- stack 1: 0x520
- stack 0: 0x60
1215	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x520
- stack 0: 0x80007FFF
1216	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x520
- stack 1: 0x80007FFF
- stack 0: 0xFFFFFFFF
1217	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x520
- stack 0: 0x80007FFF
1218	 110	PUSH2	03A0	 	 
- stack 2: 0x520
- stack 1: 0x80007FFF
- stack 0: 0x3A0
1219	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x520
- stack 1: 0x80007FFF
- stack 0: 0x80007FFF
1220	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x520
- stack 2: 0x80007FFF
- stack 1: 0x80007FFF
- stack 0: 0xFFFFFFFF
1221	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x520
- stack 1: 0x80007FFF
- stack 0: 0x80007FFF
1222	 11A	SUB		 	 
- stack 1: 0x520
- stack 0: 0x0
1223	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x520
- stack 1: 0x0
- stack 0: 0x123
1224	 11E	JUMPI		 	 
- stack 0: 0x520
1225	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x520
- stack 0: 0x13D
1226	 122	JUMP		 	 
- stack 0: 0x520
1227	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x520
1228	 13E	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1229	 140	ADD		 	 
- stack 0: 0x524
1230	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1231	 142	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x16D0000020AFFFF0147FFF800BA00000193FFF801EBFFFF00EB000C010503B0
1232	 143	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x16D0000020AFFFF0147FFF800BA00000193FFF801EBFFFF00EB000C010503B0
- stack 0: 0xF0
1233	 145	SHR		 	 
- stack 1: 0x524
- stack 0: 0x16D
1234	 146	JUMP		 	 
- stack 0: 0x524
1235	 16D	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x524
1236	 16E	PUSH4	80000000	 	 
- stack 1: 0x524
- stack 0: 0x80000000
1237	 173	PUSH2	0020	 	 
- stack 2: 0x524
- stack 1: 0x80000000
- stack 0: 0x20
1238	 176	MSTORE		 	  ;; # store to x1
- stack 0: 0x524
1239	 177	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1240	 179	ADD		 	 
- stack 0: 0x528
1241	 17A	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1242	 17B	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x20AFFFF0147FFF800BA00000193FFF801EBFFFF00EB000C010503B000860000
1243	 17C	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x20AFFFF0147FFF800BA00000193FFF801EBFFFF00EB000C010503B000860000
- stack 0: 0xF0
1244	 17E	SHR		 	 
- stack 1: 0x528
- stack 0: 0x20A
1245	 17F	JUMP		 	 
- stack 0: 0x528
1246	 20A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x528
1247	 20B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1248	 20C	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x20AFFFF0147FFF800BA00000193FFF801EBFFFF00EB000C010503B000860000
1249	 20D	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x20AFFFF0147FFF800BA00000193FFF801EBFFFF00EB000C010503B000860000
- stack 0: 0xE0
1250	 20F	SHR		 	 
- stack 1: 0x528
- stack 0: 0x20AFFFF
1251	 210	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x20AFFFF
- stack 0: 0xFFFF
1252	 213	AND		 	 
- stack 1: 0x528
- stack 0: 0xFFFF
1253	 214	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0xFFFF
- stack 0: 0x1
1254	 216	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1255	 217	PUSH2	0020	 	 
- stack 2: 0x528
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1256	 21A	MLOAD		 	  ;; # read from x1
- stack 2: 0x528
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
1257	 21B	ADD		 	  ;; # ADDI 1
- stack 1: 0x528
- stack 0: 0x7FFFFFFF
1258	 21C	PUSH2	0020	 	 
- stack 2: 0x528
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
1259	 21F	MSTORE		 	  ;; # store to x1
- stack 0: 0x528
1260	 220	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1261	 222	ADD		 	 
- stack 0: 0x52C
1262	 223	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1263	 224	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x147FFF800BA00000193FFF801EBFFFF00EB000C010503B00086000000A0FFFF
1264	 225	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x147FFF800BA00000193FFF801EBFFFF00EB000C010503B00086000000A0FFFF
- stack 0: 0xF0
1265	 227	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x147
1266	 228	JUMP		 	 
- stack 0: 0x52C
1267	 147	JUMPDEST		 ;; __riscvimpl_LUI_ffff8137	  ;; # instr: lui sp,0xffff8(ignore imm)
- stack 0: 0x52C
1268	 148	PUSH4	ffff8000	 	 
- stack 1: 0x52C
- stack 0: 0xFFFF8000
1269	 14D	PUSH2	0040	 	 
- stack 2: 0x52C
- stack 1: 0xFFFF8000
- stack 0: 0x40
1270	 150	MSTORE		 	  ;; # store to x2
- stack 0: 0x52C
1271	 151	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1272	 153	ADD		 	 
- stack 0: 0x530
1273	 154	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1274	 155	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xBA00000193FFF801EBFFFF00EB000C010503B00086000000A0FFFF00BA0000
1275	 156	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0xBA00000193FFF801EBFFFF00EB000C010503B00086000000A0FFFF00BA0000
- stack 0: 0xF0
1276	 158	SHR		 	 
- stack 1: 0x530
- stack 0: 0xBA
1277	 159	JUMP		 	 
- stack 0: 0x530
1278	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x530
1279	 BB	PUSH2	0020	 	 
- stack 1: 0x530
- stack 0: 0x20
1280	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x530
- stack 0: 0x7FFFFFFF
1281	 BF	PUSH2	0040	 	 
- stack 2: 0x530
- stack 1: 0x7FFFFFFF
- stack 0: 0x40
1282	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x530
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFF8000
1283	 C3	ADD		 	 
- stack 1: 0x530
- stack 0: 0x17FFF7FFF
1284	 C4	PUSH2	0060	 	 
- stack 2: 0x530
- stack 1: 0x17FFF7FFF
- stack 0: 0x60
1285	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x530
1286	 C8	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1287	 CA	ADD		 	 
- stack 0: 0x534
1288	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1289	 CC	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x193FFF801EBFFFF00EB000C010503B00086000000A0FFFF00BA000000D1FFFF
1290	 CD	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x193FFF801EBFFFF00EB000C010503B00086000000A0FFFF00BA000000D1FFFF
- stack 0: 0xF0
1291	 CF	SHR		 	 
- stack 1: 0x534
- stack 0: 0x193
1292	 D0	JUMP		 	 
- stack 0: 0x534
1293	 193	JUMPDEST		 ;; __riscvimpl_LUI_7fff8eb7	  ;; # instr: lui t4,0x7fff8(ignore imm)
- stack 0: 0x534
1294	 194	PUSH4	7fff8000	 	 
- stack 1: 0x534
- stack 0: 0x7FFF8000
1295	 199	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0x7FFF8000
- stack 0: 0x3A0
1296	 19C	MSTORE		 	  ;; # store to x29
- stack 0: 0x534
1297	 19D	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1298	 19F	ADD		 	 
- stack 0: 0x538
1299	 1A0	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1300	 1A1	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1EBFFFF00EB000C010503B00086000000A0FFFF00BA000000D1FFFF00EB000D
1301	 1A2	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x1EBFFFF00EB000C010503B00086000000A0FFFF00BA000000D1FFFF00EB000D
- stack 0: 0xF0
1302	 1A4	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1EB
1303	 1A5	JUMP		 	 
- stack 0: 0x538
1304	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x538
1305	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1306	 1ED	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1EBFFFF00EB000C010503B00086000000A0FFFF00BA000000D1FFFF00EB000D
1307	 1EE	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x1EBFFFF00EB000C010503B00086000000A0FFFF00BA000000D1FFFF00EB000D
- stack 0: 0xE0
1308	 1F0	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1EBFFFF
1309	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x1EBFFFF
- stack 0: 0xFFFF
1310	 1F4	AND		 	 
- stack 1: 0x538
- stack 0: 0xFFFF
1311	 1F5	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0xFFFF
- stack 0: 0x1
1312	 1F7	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1313	 1F8	PUSH2	03A0	 	 
- stack 2: 0x538
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
1314	 1FB	MLOAD		 	  ;; # read from x29
- stack 2: 0x538
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x7FFF8000
1315	 1FC	ADD		 	  ;; # ADDI 29
- stack 1: 0x538
- stack 0: 0x7FFF7FFF
1316	 1FD	PUSH2	03A0	 	 
- stack 2: 0x538
- stack 1: 0x7FFF7FFF
- stack 0: 0x3A0
1317	 200	MSTORE		 	  ;; # store to x29
- stack 0: 0x538
1318	 201	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1319	 203	ADD		 	 
- stack 0: 0x53C
1320	 204	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1321	 205	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xEB000C010503B00086000000A0FFFF00BA000000D1FFFF00EB000D01050398
1322	 206	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0xEB000C010503B00086000000A0FFFF00BA000000D1FFFF00EB000D01050398
- stack 0: 0xF0
1323	 208	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xEB
1324	 209	JUMP		 	 
- stack 0: 0x53C
1325	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x53C
1326	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1327	 ED	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xEB000C010503B00086000000A0FFFF00BA000000D1FFFF00EB000D01050398
1328	 EE	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0xEB000C010503B00086000000A0FFFF00BA000000D1FFFF00EB000D01050398
- stack 0: 0xE0
1329	 F0	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xEB000C
1330	 F1	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0xEB000C
- stack 0: 0xFFFF
1331	 F4	AND		 	 
- stack 1: 0x53C
- stack 0: 0xC
1332	 F5	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0xC
- stack 0: 0x1
1333	 F7	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0xC
1334	 F8	PUSH2	0380	 	 
- stack 2: 0x53C
- stack 1: 0xC
- stack 0: 0x380
1335	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x53C
1336	 FC	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1337	 FE	ADD		 	 
- stack 0: 0x540
1338	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1339	 100	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x10503B00086000000A0FFFF00BA000000D1FFFF00EB000D010503980086FFFF
1340	 101	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x10503B00086000000A0FFFF00BA000000D1FFFF00EB000D010503980086FFFF
- stack 0: 0xF0
1341	 103	SHR		 	 
- stack 1: 0x540
- stack 0: 0x105
1342	 104	JUMP		 	 
- stack 0: 0x540
1343	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x540
1344	 106	PUSH2	0060	 	 
- stack 1: 0x540
- stack 0: 0x60
1345	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x540
- stack 0: 0x17FFF7FFF
1346	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x540
- stack 1: 0x17FFF7FFF
- stack 0: 0xFFFFFFFF
1347	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x540
- stack 0: 0x7FFF7FFF
1348	 110	PUSH2	03A0	 	 
- stack 2: 0x540
- stack 1: 0x7FFF7FFF
- stack 0: 0x3A0
1349	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x540
- stack 1: 0x7FFF7FFF
- stack 0: 0x7FFF7FFF
1350	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x540
- stack 2: 0x7FFF7FFF
- stack 1: 0x7FFF7FFF
- stack 0: 0xFFFFFFFF
1351	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x540
- stack 1: 0x7FFF7FFF
- stack 0: 0x7FFF7FFF
1352	 11A	SUB		 	 
- stack 1: 0x540
- stack 0: 0x0
1353	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x540
- stack 1: 0x0
- stack 0: 0x123
1354	 11E	JUMPI		 	 
- stack 0: 0x540
1355	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x540
- stack 0: 0x13D
1356	 122	JUMP		 	 
- stack 0: 0x540
1357	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x540
1358	 13E	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1359	 140	ADD		 	 
- stack 0: 0x544
1360	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1361	 142	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x86000000A0FFFF00BA000000D1FFFF00EB000D010503980086FFFF00A00001
1362	 143	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x86000000A0FFFF00BA000000D1FFFF00EB000D010503980086FFFF00A00001
- stack 0: 0xF0
1363	 145	SHR		 	 
- stack 1: 0x544
- stack 0: 0x86
1364	 146	JUMP		 	 
- stack 0: 0x544
1365	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x544
1366	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1367	 88	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x86000000A0FFFF00BA000000D1FFFF00EB000D010503980086FFFF00A00001
1368	 89	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x86000000A0FFFF00BA000000D1FFFF00EB000D010503980086FFFF00A00001
- stack 0: 0xE0
1369	 8B	SHR		 	 
- stack 1: 0x544
- stack 0: 0x860000
1370	 8C	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x860000
- stack 0: 0xFFFF
1371	 8F	AND		 	 
- stack 1: 0x544
- stack 0: 0x0
1372	 90	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x1
1373	 92	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x0
1374	 93	PUSH2	0020	 	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x20
1375	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x544
1376	 97	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1377	 99	ADD		 	 
- stack 0: 0x548
1378	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1379	 9B	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xA0FFFF00BA000000D1FFFF00EB000D010503980086FFFF00A0000100BA0000
1380	 9C	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0xA0FFFF00BA000000D1FFFF00EB000D010503980086FFFF00A0000100BA0000
- stack 0: 0xF0
1381	 9E	SHR		 	 
- stack 1: 0x548
- stack 0: 0xA0
1382	 9F	JUMP		 	 
- stack 0: 0x548
1383	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x548
1384	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1385	 A2	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xA0FFFF00BA000000D1FFFF00EB000D010503980086FFFF00A0000100BA0000
1386	 A3	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0xA0FFFF00BA000000D1FFFF00EB000D010503980086FFFF00A0000100BA0000
- stack 0: 0xE0
1387	 A5	SHR		 	 
- stack 1: 0x548
- stack 0: 0xA0FFFF
1388	 A6	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
1389	 A9	AND		 	 
- stack 1: 0x548
- stack 0: 0xFFFF
1390	 AA	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0xFFFF
- stack 0: 0x1
1391	 AC	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1392	 AD	PUSH2	0040	 	 
- stack 2: 0x548
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1393	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x548
1394	 B1	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1395	 B3	ADD		 	 
- stack 0: 0x54C
1396	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1397	 B5	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xBA000000D1FFFF00EB000D010503980086FFFF00A0000100BA000000D10000
1398	 B6	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xBA000000D1FFFF00EB000D010503980086FFFF00A0000100BA000000D10000
- stack 0: 0xF0
1399	 B8	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xBA
1400	 B9	JUMP		 	 
- stack 0: 0x54C
1401	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x54C
1402	 BB	PUSH2	0020	 	 
- stack 1: 0x54C
- stack 0: 0x20
1403	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x54C
- stack 0: 0x0
1404	 BF	PUSH2	0040	 	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x40
1405	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1406	 C3	ADD		 	 
- stack 1: 0x54C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1407	 C4	PUSH2	0060	 	 
- stack 2: 0x54C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
1408	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x54C
1409	 C8	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1410	 CA	ADD		 	 
- stack 0: 0x550
1411	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1412	 CC	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xD1FFFF00EB000D010503980086FFFF00A0000100BA000000D1000000EB000E
1413	 CD	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0xD1FFFF00EB000D010503980086FFFF00A0000100BA000000D1000000EB000E
- stack 0: 0xF0
1414	 CF	SHR		 	 
- stack 1: 0x550
- stack 0: 0xD1
1415	 D0	JUMP		 	 
- stack 0: 0x550
1416	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x550
1417	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1418	 D3	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xD1FFFF00EB000D010503980086FFFF00A0000100BA000000D1000000EB000E
1419	 D4	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0xD1FFFF00EB000D010503980086FFFF00A0000100BA000000D1000000EB000E
- stack 0: 0xE0
1420	 D6	SHR		 	 
- stack 1: 0x550
- stack 0: 0xD1FFFF
1421	 D7	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0xD1FFFF
- stack 0: 0xFFFF
1422	 DA	AND		 	 
- stack 1: 0x550
- stack 0: 0xFFFF
1423	 DB	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0xFFFF
- stack 0: 0x1
1424	 DD	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1425	 DE	PUSH2	03A0	 	 
- stack 2: 0x550
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
1426	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x550
1427	 E2	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1428	 E4	ADD		 	 
- stack 0: 0x554
1429	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1430	 E6	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xEB000D010503980086FFFF00A0000100BA000000D1000000EB000E01050380
1431	 E7	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0xEB000D010503980086FFFF00A0000100BA000000D1000000EB000E01050380
- stack 0: 0xF0
1432	 E9	SHR		 	 
- stack 1: 0x554
- stack 0: 0xEB
1433	 EA	JUMP		 	 
- stack 0: 0x554
1434	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x554
1435	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1436	 ED	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xEB000D010503980086FFFF00A0000100BA000000D1000000EB000E01050380
1437	 EE	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0xEB000D010503980086FFFF00A0000100BA000000D1000000EB000E01050380
- stack 0: 0xE0
1438	 F0	SHR		 	 
- stack 1: 0x554
- stack 0: 0xEB000D
1439	 F1	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0xEB000D
- stack 0: 0xFFFF
1440	 F4	AND		 	 
- stack 1: 0x554
- stack 0: 0xD
1441	 F5	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0xD
- stack 0: 0x1
1442	 F7	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0xD
1443	 F8	PUSH2	0380	 	 
- stack 2: 0x554
- stack 1: 0xD
- stack 0: 0x380
1444	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x554
1445	 FC	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1446	 FE	ADD		 	 
- stack 0: 0x558
1447	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1448	 100	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x10503980086FFFF00A0000100BA000000D1000000EB000E010503800086FFFF
1449	 101	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x10503980086FFFF00A0000100BA000000D1000000EB000E010503800086FFFF
- stack 0: 0xF0
1450	 103	SHR		 	 
- stack 1: 0x558
- stack 0: 0x105
1451	 104	JUMP		 	 
- stack 0: 0x558
1452	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x558
1453	 106	PUSH2	0060	 	 
- stack 1: 0x558
- stack 0: 0x60
1454	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x558
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1455	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x558
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1456	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x558
- stack 0: 0xFFFFFFFF
1457	 110	PUSH2	03A0	 	 
- stack 2: 0x558
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
1458	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x558
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1459	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x558
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1460	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x558
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
1461	 11A	SUB		 	 
- stack 1: 0x558
- stack 0: 0x0
1462	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x123
1463	 11E	JUMPI		 	 
- stack 0: 0x558
1464	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x558
- stack 0: 0x13D
1465	 122	JUMP		 	 
- stack 0: 0x558
1466	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x558
1467	 13E	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1468	 140	ADD		 	 
- stack 0: 0x55C
1469	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1470	 142	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x86FFFF00A0000100BA000000D1000000EB000E010503800086FFFF00A0FFFF
1471	 143	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x86FFFF00A0000100BA000000D1000000EB000E010503800086FFFF00A0FFFF
- stack 0: 0xF0
1472	 145	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x86
1473	 146	JUMP		 	 
- stack 0: 0x55C
1474	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x55C
1475	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1476	 88	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x86FFFF00A0000100BA000000D1000000EB000E010503800086FFFF00A0FFFF
1477	 89	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x86FFFF00A0000100BA000000D1000000EB000E010503800086FFFF00A0FFFF
- stack 0: 0xE0
1478	 8B	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x86FFFF
1479	 8C	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
1480	 8F	AND		 	 
- stack 1: 0x55C
- stack 0: 0xFFFF
1481	 90	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0xFFFF
- stack 0: 0x1
1482	 92	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1483	 93	PUSH2	0020	 	 
- stack 2: 0x55C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1484	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x55C
1485	 97	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1486	 99	ADD		 	 
- stack 0: 0x560
1487	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1488	 9B	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0xA0000100BA000000D1000000EB000E010503800086FFFF00A0FFFF00BA0000
1489	 9C	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0xA0000100BA000000D1000000EB000E010503800086FFFF00A0FFFF00BA0000
- stack 0: 0xF0
1490	 9E	SHR		 	 
- stack 1: 0x560
- stack 0: 0xA0
1491	 9F	JUMP		 	 
- stack 0: 0x560
1492	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x560
1493	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1494	 A2	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0xA0000100BA000000D1000000EB000E010503800086FFFF00A0FFFF00BA0000
1495	 A3	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0xA0000100BA000000D1000000EB000E010503800086FFFF00A0FFFF00BA0000
- stack 0: 0xE0
1496	 A5	SHR		 	 
- stack 1: 0x560
- stack 0: 0xA00001
1497	 A6	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0xA00001
- stack 0: 0xFFFF
1498	 A9	AND		 	 
- stack 1: 0x560
- stack 0: 0x1
1499	 AA	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x1
1500	 AC	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x1
1501	 AD	PUSH2	0040	 	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x40
1502	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x560
1503	 B1	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1504	 B3	ADD		 	 
- stack 0: 0x564
1505	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1506	 B5	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xBA000000D1000000EB000E010503800086FFFF00A0FFFF00BA000000D1FFFE
1507	 B6	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0xBA000000D1000000EB000E010503800086FFFF00A0FFFF00BA000000D1FFFE
- stack 0: 0xF0
1508	 B8	SHR		 	 
- stack 1: 0x564
- stack 0: 0xBA
1509	 B9	JUMP		 	 
- stack 0: 0x564
1510	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x564
1511	 BB	PUSH2	0020	 	 
- stack 1: 0x564
- stack 0: 0x20
1512	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x564
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1513	 BF	PUSH2	0040	 	 
- stack 2: 0x564
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1514	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x564
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1
1515	 C3	ADD		 	 
- stack 1: 0x564
- stack 0: 0x0
1516	 C4	PUSH2	0060	 	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x60
1517	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x564
1518	 C8	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1519	 CA	ADD		 	 
- stack 0: 0x568
1520	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1521	 CC	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xD1000000EB000E010503800086FFFF00A0FFFF00BA000000D1FFFE00EB000F
1522	 CD	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0xD1000000EB000E010503800086FFFF00A0FFFF00BA000000D1FFFE00EB000F
- stack 0: 0xF0
1523	 CF	SHR		 	 
- stack 1: 0x568
- stack 0: 0xD1
1524	 D0	JUMP		 	 
- stack 0: 0x568
1525	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x568
1526	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1527	 D3	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xD1000000EB000E010503800086FFFF00A0FFFF00BA000000D1FFFE00EB000F
1528	 D4	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0xD1000000EB000E010503800086FFFF00A0FFFF00BA000000D1FFFE00EB000F
- stack 0: 0xE0
1529	 D6	SHR		 	 
- stack 1: 0x568
- stack 0: 0xD10000
1530	 D7	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0xD10000
- stack 0: 0xFFFF
1531	 DA	AND		 	 
- stack 1: 0x568
- stack 0: 0x0
1532	 DB	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x1
1533	 DD	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x0
1534	 DE	PUSH2	03A0	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x3A0
1535	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x568
1536	 E2	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1537	 E4	ADD		 	 
- stack 0: 0x56C
1538	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1539	 E6	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0xEB000E010503800086FFFF00A0FFFF00BA000000D1FFFE00EB000F01050368
1540	 E7	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0xEB000E010503800086FFFF00A0FFFF00BA000000D1FFFE00EB000F01050368
- stack 0: 0xF0
1541	 E9	SHR		 	 
- stack 1: 0x56C
- stack 0: 0xEB
1542	 EA	JUMP		 	 
- stack 0: 0x56C
1543	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x56C
1544	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
1545	 ED	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0xEB000E010503800086FFFF00A0FFFF00BA000000D1FFFE00EB000F01050368
1546	 EE	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0xEB000E010503800086FFFF00A0FFFF00BA000000D1FFFE00EB000F01050368
- stack 0: 0xE0
1547	 F0	SHR		 	 
- stack 1: 0x56C
- stack 0: 0xEB000E
1548	 F1	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0xEB000E
- stack 0: 0xFFFF
1549	 F4	AND		 	 
- stack 1: 0x56C
- stack 0: 0xE
1550	 F5	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0xE
- stack 0: 0x1
1551	 F7	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0xE
1552	 F8	PUSH2	0380	 	 
- stack 2: 0x56C
- stack 1: 0xE
- stack 0: 0x380
1553	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x56C
1554	 FC	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1555	 FE	ADD		 	 
- stack 0: 0x570
1556	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1557	 100	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x10503800086FFFF00A0FFFF00BA000000D1FFFE00EB000F0105036800860001
1558	 101	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x10503800086FFFF00A0FFFF00BA000000D1FFFE00EB000F0105036800860001
- stack 0: 0xF0
1559	 103	SHR		 	 
- stack 1: 0x570
- stack 0: 0x105
1560	 104	JUMP		 	 
- stack 0: 0x570
1561	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x570
1562	 106	PUSH2	0060	 	 
- stack 1: 0x570
- stack 0: 0x60
1563	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x570
- stack 0: 0x0
1564	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1565	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x570
- stack 0: 0x0
1566	 110	PUSH2	03A0	 	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x3A0
1567	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x0
1568	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x570
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1569	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x0
1570	 11A	SUB		 	 
- stack 1: 0x570
- stack 0: 0x0
1571	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x123
1572	 11E	JUMPI		 	 
- stack 0: 0x570
1573	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x570
- stack 0: 0x13D
1574	 122	JUMP		 	 
- stack 0: 0x570
1575	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x570
1576	 13E	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1577	 140	ADD		 	 
- stack 0: 0x574
1578	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1579	 142	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x86FFFF00A0FFFF00BA000000D1FFFE00EB000F0105036800860001023C0000
1580	 143	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x86FFFF00A0FFFF00BA000000D1FFFE00EB000F0105036800860001023C0000
- stack 0: 0xF0
1581	 145	SHR		 	 
- stack 1: 0x574
- stack 0: 0x86
1582	 146	JUMP		 	 
- stack 0: 0x574
1583	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x574
1584	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1585	 88	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x86FFFF00A0FFFF00BA000000D1FFFE00EB000F0105036800860001023C0000
1586	 89	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x86FFFF00A0FFFF00BA000000D1FFFE00EB000F0105036800860001023C0000
- stack 0: 0xE0
1587	 8B	SHR		 	 
- stack 1: 0x574
- stack 0: 0x86FFFF
1588	 8C	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
1589	 8F	AND		 	 
- stack 1: 0x574
- stack 0: 0xFFFF
1590	 90	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0xFFFF
- stack 0: 0x1
1591	 92	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1592	 93	PUSH2	0020	 	 
- stack 2: 0x574
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1593	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x574
1594	 97	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1595	 99	ADD		 	 
- stack 0: 0x578
1596	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1597	 9B	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xA0FFFF00BA000000D1FFFE00EB000F0105036800860001023C000001B9FFFF
1598	 9C	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0xA0FFFF00BA000000D1FFFE00EB000F0105036800860001023C000001B9FFFF
- stack 0: 0xF0
1599	 9E	SHR		 	 
- stack 1: 0x578
- stack 0: 0xA0
1600	 9F	JUMP		 	 
- stack 0: 0x578
1601	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x578
1602	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
1603	 A2	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xA0FFFF00BA000000D1FFFE00EB000F0105036800860001023C000001B9FFFF
1604	 A3	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0xA0FFFF00BA000000D1FFFE00EB000F0105036800860001023C000001B9FFFF
- stack 0: 0xE0
1605	 A5	SHR		 	 
- stack 1: 0x578
- stack 0: 0xA0FFFF
1606	 A6	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
1607	 A9	AND		 	 
- stack 1: 0x578
- stack 0: 0xFFFF
1608	 AA	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0xFFFF
- stack 0: 0x1
1609	 AC	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1610	 AD	PUSH2	0040	 	 
- stack 2: 0x578
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1611	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x578
1612	 B1	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1613	 B3	ADD		 	 
- stack 0: 0x57C
1614	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1615	 B5	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xBA000000D1FFFE00EB000F0105036800860001023C000001B9FFFF00BA0000
1616	 B6	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0xBA000000D1FFFE00EB000F0105036800860001023C000001B9FFFF00BA0000
- stack 0: 0xF0
1617	 B8	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xBA
1618	 B9	JUMP		 	 
- stack 0: 0x57C
1619	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x57C
1620	 BB	PUSH2	0020	 	 
- stack 1: 0x57C
- stack 0: 0x20
1621	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x57C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1622	 BF	PUSH2	0040	 	 
- stack 2: 0x57C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1623	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x57C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1624	 C3	ADD		 	 
- stack 1: 0x57C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1625	 C4	PUSH2	0060	 	 
- stack 2: 0x57C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x60
1626	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x57C
1627	 C8	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1628	 CA	ADD		 	 
- stack 0: 0x580
1629	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1630	 CC	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xD1FFFE00EB000F0105036800860001023C000001B9FFFF00BA000001800000
1631	 CD	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xD1FFFE00EB000F0105036800860001023C000001B9FFFF00BA000001800000
- stack 0: 0xF0
1632	 CF	SHR		 	 
- stack 1: 0x580
- stack 0: 0xD1
1633	 D0	JUMP		 	 
- stack 0: 0x580
1634	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x580
1635	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
1636	 D3	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xD1FFFE00EB000F0105036800860001023C000001B9FFFF00BA000001800000
1637	 D4	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0xD1FFFE00EB000F0105036800860001023C000001B9FFFF00BA000001800000
- stack 0: 0xE0
1638	 D6	SHR		 	 
- stack 1: 0x580
- stack 0: 0xD1FFFE
1639	 D7	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0xD1FFFE
- stack 0: 0xFFFF
1640	 DA	AND		 	 
- stack 1: 0x580
- stack 0: 0xFFFE
1641	 DB	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0xFFFE
- stack 0: 0x1
1642	 DD	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1643	 DE	PUSH2	03A0	 	 
- stack 2: 0x580
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3A0
1644	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x580
1645	 E2	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1646	 E4	ADD		 	 
- stack 0: 0x584
1647	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1648	 E6	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xEB000F0105036800860001023C000001B9FFFF00BA00000180000000EB0010
1649	 E7	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xEB000F0105036800860001023C000001B9FFFF00BA00000180000000EB0010
- stack 0: 0xF0
1650	 E9	SHR		 	 
- stack 1: 0x584
- stack 0: 0xEB
1651	 EA	JUMP		 	 
- stack 0: 0x584
1652	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x584
1653	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
1654	 ED	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xEB000F0105036800860001023C000001B9FFFF00BA00000180000000EB0010
1655	 EE	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0xEB000F0105036800860001023C000001B9FFFF00BA00000180000000EB0010
- stack 0: 0xE0
1656	 F0	SHR		 	 
- stack 1: 0x584
- stack 0: 0xEB000F
1657	 F1	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0xEB000F
- stack 0: 0xFFFF
1658	 F4	AND		 	 
- stack 1: 0x584
- stack 0: 0xF
1659	 F5	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0xF
- stack 0: 0x1
1660	 F7	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0xF
1661	 F8	PUSH2	0380	 	 
- stack 2: 0x584
- stack 1: 0xF
- stack 0: 0x380
1662	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x584
1663	 FC	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1664	 FE	ADD		 	 
- stack 0: 0x588
1665	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1666	 100	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x105036800860001023C000001B9FFFF00BA00000180000000EB00100105034C
1667	 101	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x105036800860001023C000001B9FFFF00BA00000180000000EB00100105034C
- stack 0: 0xF0
1668	 103	SHR		 	 
- stack 1: 0x588
- stack 0: 0x105
1669	 104	JUMP		 	 
- stack 0: 0x588
1670	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x588
1671	 106	PUSH2	0060	 	 
- stack 1: 0x588
- stack 0: 0x60
1672	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x588
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1673	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
1674	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0xFFFFFFFE
1675	 110	PUSH2	03A0	 	 
- stack 2: 0x588
- stack 1: 0xFFFFFFFE
- stack 0: 0x3A0
1676	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x588
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1677	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x588
- stack 2: 0xFFFFFFFE
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
1678	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x588
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFE
1679	 11A	SUB		 	 
- stack 1: 0x588
- stack 0: 0x0
1680	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x123
1681	 11E	JUMPI		 	 
- stack 0: 0x588
1682	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x588
- stack 0: 0x13D
1683	 122	JUMP		 	 
- stack 0: 0x588
1684	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x588
1685	 13E	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
1686	 140	ADD		 	 
- stack 0: 0x58C
1687	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
1688	 142	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x860001023C000001B9FFFF00BA00000180000000EB00100105034C0086000D
1689	 143	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x860001023C000001B9FFFF00BA00000180000000EB00100105034C0086000D
- stack 0: 0xF0
1690	 145	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x86
1691	 146	JUMP		 	 
- stack 0: 0x58C
1692	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x58C
1693	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
1694	 88	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x860001023C000001B9FFFF00BA00000180000000EB00100105034C0086000D
1695	 89	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x860001023C000001B9FFFF00BA00000180000000EB00100105034C0086000D
- stack 0: 0xE0
1696	 8B	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x860001
1697	 8C	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x860001
- stack 0: 0xFFFF
1698	 8F	AND		 	 
- stack 1: 0x58C
- stack 0: 0x1
1699	 90	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
1700	 92	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x1
1701	 93	PUSH2	0020	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x20
1702	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x58C
1703	 97	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
1704	 99	ADD		 	 
- stack 0: 0x590
1705	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
1706	 9B	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x23C000001B9FFFF00BA00000180000000EB00100105034C0086000D00A0000B
1707	 9C	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x23C000001B9FFFF00BA00000180000000EB00100105034C0086000D00A0000B
- stack 0: 0xF0
1708	 9E	SHR		 	 
- stack 1: 0x590
- stack 0: 0x23C
1709	 9F	JUMP		 	 
- stack 0: 0x590
1710	 23C	JUMPDEST		 ;; __riscvimpl_LUI_80000137	  ;; # instr: lui sp,0x80000(ignore imm)
- stack 0: 0x590
1711	 23D	PUSH4	80000000	 	 
- stack 1: 0x590
- stack 0: 0x80000000
1712	 242	PUSH2	0040	 	 
- stack 2: 0x590
- stack 1: 0x80000000
- stack 0: 0x40
1713	 245	MSTORE		 	  ;; # store to x2
- stack 0: 0x590
1714	 246	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
1715	 248	ADD		 	 
- stack 0: 0x594
1716	 249	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
1717	 24A	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1B9FFFF00BA00000180000000EB00100105034C0086000D00A0000B024F0000
1718	 24B	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x1B9FFFF00BA00000180000000EB00100105034C0086000D00A0000B024F0000
- stack 0: 0xF0
1719	 24D	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1B9
1720	 24E	JUMP		 	 
- stack 0: 0x594
1721	 1B9	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x594
1722	 1BA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
1723	 1BB	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1B9FFFF00BA00000180000000EB00100105034C0086000D00A0000B024F0000
1724	 1BC	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x1B9FFFF00BA00000180000000EB00100105034C0086000D00A0000B024F0000
- stack 0: 0xE0
1725	 1BE	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1B9FFFF
1726	 1BF	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x1B9FFFF
- stack 0: 0xFFFF
1727	 1C2	AND		 	 
- stack 1: 0x594
- stack 0: 0xFFFF
1728	 1C3	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0xFFFF
- stack 0: 0x1
1729	 1C5	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1730	 1C6	PUSH2	0040	 	 
- stack 2: 0x594
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1731	 1C9	MLOAD		 	  ;; # read from x2
- stack 2: 0x594
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
1732	 1CA	ADD		 	  ;; # ADDI 2
- stack 1: 0x594
- stack 0: 0x7FFFFFFF
1733	 1CB	PUSH2	0040	 	 
- stack 2: 0x594
- stack 1: 0x7FFFFFFF
- stack 0: 0x40
1734	 1CE	MSTORE		 	  ;; # store to x2
- stack 0: 0x594
1735	 1CF	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
1736	 1D1	ADD		 	 
- stack 0: 0x598
1737	 1D2	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
1738	 1D3	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0xBA00000180000000EB00100105034C0086000D00A0000B024F000000D10018
1739	 1D4	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0xBA00000180000000EB00100105034C0086000D00A0000B024F000000D10018
- stack 0: 0xF0
1740	 1D6	SHR		 	 
- stack 1: 0x598
- stack 0: 0xBA
1741	 1D7	JUMP		 	 
- stack 0: 0x598
1742	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x598
1743	 BB	PUSH2	0020	 	 
- stack 1: 0x598
- stack 0: 0x20
1744	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x598
- stack 0: 0x1
1745	 BF	PUSH2	0040	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x40
1746	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x7FFFFFFF
1747	 C3	ADD		 	 
- stack 1: 0x598
- stack 0: 0x80000000
1748	 C4	PUSH2	0060	 	 
- stack 2: 0x598
- stack 1: 0x80000000
- stack 0: 0x60
1749	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x598
1750	 C8	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
1751	 CA	ADD		 	 
- stack 0: 0x59C
1752	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
1753	 CC	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x180000000EB00100105034C0086000D00A0000B024F000000D1001800EB0011
1754	 CD	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x180000000EB00100105034C0086000D00A0000B024F000000D1001800EB0011
- stack 0: 0xF0
1755	 CF	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x180
1756	 D0	JUMP		 	 
- stack 0: 0x59C
1757	 180	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x59C
1758	 181	PUSH4	80000000	 	 
- stack 1: 0x59C
- stack 0: 0x80000000
1759	 186	PUSH2	03A0	 	 
- stack 2: 0x59C
- stack 1: 0x80000000
- stack 0: 0x3A0
1760	 189	MSTORE		 	  ;; # store to x29
- stack 0: 0x59C
1761	 18A	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
1762	 18C	ADD		 	 
- stack 0: 0x5A0
1763	 18D	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
1764	 18E	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xEB00100105034C0086000D00A0000B024F000000D1001800EB001102660334
1765	 18F	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0xEB00100105034C0086000D00A0000B024F000000D1001800EB001102660334
- stack 0: 0xF0
1766	 191	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xEB
1767	 192	JUMP		 	 
- stack 0: 0x5A0
1768	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5A0
1769	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
1770	 ED	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xEB00100105034C0086000D00A0000B024F000000D1001800EB001102660334
1771	 EE	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0xEB00100105034C0086000D00A0000B024F000000D1001800EB001102660334
- stack 0: 0xE0
1772	 F0	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xEB0010
1773	 F1	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0xEB0010
- stack 0: 0xFFFF
1774	 F4	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x10
1775	 F5	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x10
- stack 0: 0x1
1776	 F7	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x10
1777	 F8	PUSH2	0380	 	 
- stack 2: 0x5A0
- stack 1: 0x10
- stack 0: 0x380
1778	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x5A0
1779	 FC	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
1780	 FE	ADD		 	 
- stack 0: 0x5A4
1781	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
1782	 100	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x105034C0086000D00A0000B024F000000D1001800EB0011026603340086000E
1783	 101	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x105034C0086000D00A0000B024F000000D1001800EB0011026603340086000E
- stack 0: 0xF0
1784	 103	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x105
1785	 104	JUMP		 	 
- stack 0: 0x5A4
1786	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x5A4
1787	 106	PUSH2	0060	 	 
- stack 1: 0x5A4
- stack 0: 0x60
1788	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x5A4
- stack 0: 0x80000000
1789	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
1790	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A4
- stack 0: 0x80000000
1791	 110	PUSH2	03A0	 	 
- stack 2: 0x5A4
- stack 1: 0x80000000
- stack 0: 0x3A0
1792	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x5A4
- stack 1: 0x80000000
- stack 0: 0x80000000
1793	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A4
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
1794	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A4
- stack 1: 0x80000000
- stack 0: 0x80000000
1795	 11A	SUB		 	 
- stack 1: 0x5A4
- stack 0: 0x0
1796	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x123
1797	 11E	JUMPI		 	 
- stack 0: 0x5A4
1798	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x5A4
- stack 0: 0x13D
1799	 122	JUMP		 	 
- stack 0: 0x5A4
1800	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x5A4
1801	 13E	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
1802	 140	ADD		 	 
- stack 0: 0x5A8
1803	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
1804	 142	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x86000D00A0000B024F000000D1001800EB0011026603340086000E00A0000B
1805	 143	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x86000D00A0000B024F000000D1001800EB0011026603340086000E00A0000B
- stack 0: 0xF0
1806	 145	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x86
1807	 146	JUMP		 	 
- stack 0: 0x5A8
1808	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5A8
1809	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
1810	 88	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x86000D00A0000B024F000000D1001800EB0011026603340086000E00A0000B
1811	 89	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x86000D00A0000B024F000000D1001800EB0011026603340086000E00A0000B
- stack 0: 0xE0
1812	 8B	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x86000D
1813	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x86000D
- stack 0: 0xFFFF
1814	 8F	AND		 	 
- stack 1: 0x5A8
- stack 0: 0xD
1815	 90	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0xD
- stack 0: 0x1
1816	 92	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0xD
1817	 93	PUSH2	0020	 	 
- stack 2: 0x5A8
- stack 1: 0xD
- stack 0: 0x20
1818	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A8
1819	 97	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
1820	 99	ADD		 	 
- stack 0: 0x5AC
1821	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
1822	 9B	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xA0000B024F000000D1001800EB0011026603340086000E00A0000B02A80000
1823	 9C	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0xA0000B024F000000D1001800EB0011026603340086000E00A0000B02A80000
- stack 0: 0xF0
1824	 9E	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xA0
1825	 9F	JUMP		 	 
- stack 0: 0x5AC
1826	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5AC
1827	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
1828	 A2	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xA0000B024F000000D1001800EB0011026603340086000E00A0000B02A80000
1829	 A3	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0xA0000B024F000000D1001800EB0011026603340086000E00A0000B02A80000
- stack 0: 0xE0
1830	 A5	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xA0000B
1831	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0xA0000B
- stack 0: 0xFFFF
1832	 A9	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xB
1833	 AA	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xB
- stack 0: 0x1
1834	 AC	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xB
1835	 AD	PUSH2	0040	 	 
- stack 2: 0x5AC
- stack 1: 0xB
- stack 0: 0x40
1836	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5AC
1837	 B1	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
1838	 B3	ADD		 	 
- stack 0: 0x5B0
1839	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
1840	 B5	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x24F000000D1001800EB0011026603340086000E00A0000B02A8000000D10019
1841	 B6	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x24F000000D1001800EB0011026603340086000E00A0000B02A8000000D10019
- stack 0: 0xF0
1842	 B8	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x24F
1843	 B9	JUMP		 	 
- stack 0: 0x5B0
1844	 24F	JUMPDEST		 ;; __riscvimpl_ADD_1_1_2	  ;; # instr: add ra,ra,sp(ignore imm)
- stack 0: 0x5B0
1845	 250	PUSH2	0020	 	 
- stack 1: 0x5B0
- stack 0: 0x20
1846	 253	MLOAD		 	  ;; # read from x1
- stack 1: 0x5B0
- stack 0: 0xD
1847	 254	PUSH2	0040	 	 
- stack 2: 0x5B0
- stack 1: 0xD
- stack 0: 0x40
1848	 257	MLOAD		 	  ;; # read from x2
- stack 2: 0x5B0
- stack 1: 0xD
- stack 0: 0xB
1849	 258	ADD		 	 
- stack 1: 0x5B0
- stack 0: 0x18
1850	 259	PUSH2	0020	 	 
- stack 2: 0x5B0
- stack 1: 0x18
- stack 0: 0x20
1851	 25C	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B0
1852	 25D	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
1853	 25F	ADD		 	 
- stack 0: 0x5B4
1854	 260	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
1855	 261	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0xD1001800EB0011026603340086000E00A0000B02A8000000D1001900EB0012
1856	 262	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0xD1001800EB0011026603340086000E00A0000B02A8000000D1001900EB0012
- stack 0: 0xF0
1857	 264	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0xD1
1858	 265	JUMP		 	 
- stack 0: 0x5B4
1859	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x5B4
1860	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
1861	 D3	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0xD1001800EB0011026603340086000E00A0000B02A8000000D1001900EB0012
1862	 D4	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0xD1001800EB0011026603340086000E00A0000B02A8000000D1001900EB0012
- stack 0: 0xE0
1863	 D6	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0xD10018
1864	 D7	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0xD10018
- stack 0: 0xFFFF
1865	 DA	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x18
1866	 DB	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x18
- stack 0: 0x1
1867	 DD	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x18
1868	 DE	PUSH2	03A0	 	 
- stack 2: 0x5B4
- stack 1: 0x18
- stack 0: 0x3A0
1869	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x5B4
1870	 E2	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
1871	 E4	ADD		 	 
- stack 0: 0x5B8
1872	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
1873	 E6	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0xEB0011026603340086000E00A0000B02A8000000D1001900EB001202BF031C
1874	 E7	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0xEB0011026603340086000E00A0000B02A8000000D1001900EB001202BF031C
- stack 0: 0xF0
1875	 E9	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0xEB
1876	 EA	JUMP		 	 
- stack 0: 0x5B8
1877	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5B8
1878	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
1879	 ED	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0xEB0011026603340086000E00A0000B02A8000000D1001900EB001202BF031C
1880	 EE	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0xEB0011026603340086000E00A0000B02A8000000D1001900EB001202BF031C
- stack 0: 0xE0
1881	 F0	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0xEB0011
1882	 F1	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0xEB0011
- stack 0: 0xFFFF
1883	 F4	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x11
1884	 F5	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x11
- stack 0: 0x1
1885	 F7	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x11
1886	 F8	PUSH2	0380	 	 
- stack 2: 0x5B8
- stack 1: 0x11
- stack 0: 0x380
1887	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x5B8
1888	 FC	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
1889	 FE	ADD		 	 
- stack 0: 0x5BC
1890	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
1891	 100	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x26603340086000E00A0000B02A8000000D1001900EB001202BF031C0086000D
1892	 101	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x26603340086000E00A0000B02A8000000D1001900EB001202BF031C0086000D
- stack 0: 0xF0
1893	 103	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x266
1894	 104	JUMP		 	 
- stack 0: 0x5BC
1895	 266	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,334(ignore imm)
- stack 0: 0x5BC
1896	 267	PUSH2	0020	 	 
- stack 1: 0x5BC
- stack 0: 0x20
1897	 26A	MLOAD		 	  ;; # read from x1
- stack 1: 0x5BC
- stack 0: 0x18
1898	 26B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
1899	 270	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x18
1900	 271	PUSH2	03A0	 	 
- stack 2: 0x5BC
- stack 1: 0x18
- stack 0: 0x3A0
1901	 274	MLOAD		 	  ;; # read from x29
- stack 2: 0x5BC
- stack 1: 0x18
- stack 0: 0x18
1902	 275	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x18
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
1903	 27A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5BC
- stack 1: 0x18
- stack 0: 0x18
1904	 27B	SUB		 	 
- stack 1: 0x5BC
- stack 0: 0x0
1905	 27C	PUSH2	0284	 ;; _neq_2ff3c442480f18f414d4f63c5000521a10fcaa4d5fde456aa7625def0d57fad7	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x284
1906	 27F	JUMPI		 	 
- stack 0: 0x5BC
1907	 280	PUSH2	029E	 ;; _neq_after_2ff3c442480f18f414d4f63c5000521a10fcaa4d5fde456aa7625def0d57fad7	 
- stack 1: 0x5BC
- stack 0: 0x29E
1908	 283	JUMP		 	 
- stack 0: 0x5BC
1909	 29E	JUMPDEST		 ;; _neq_after_2ff3c442480f18f414d4f63c5000521a10fcaa4d5fde456aa7625def0d57fad7	 
- stack 0: 0x5BC
1910	 29F	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
1911	 2A1	ADD		 	 
- stack 0: 0x5C0
1912	 2A2	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
1913	 2A3	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x86000E00A0000B02A8000000D1001900EB001202BF031C0086000D03010000
1914	 2A4	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x86000E00A0000B02A8000000D1001900EB001202BF031C0086000D03010000
- stack 0: 0xF0
1915	 2A6	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x86
1916	 2A7	JUMP		 	 
- stack 0: 0x5C0
1917	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5C0
1918	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
1919	 88	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x86000E00A0000B02A8000000D1001900EB001202BF031C0086000D03010000
1920	 89	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x86000E00A0000B02A8000000D1001900EB001202BF031C0086000D03010000
- stack 0: 0xE0
1921	 8B	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x86000E
1922	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x86000E
- stack 0: 0xFFFF
1923	 8F	AND		 	 
- stack 1: 0x5C0
- stack 0: 0xE
1924	 90	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xE
- stack 0: 0x1
1925	 92	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xE
1926	 93	PUSH2	0020	 	 
- stack 2: 0x5C0
- stack 1: 0xE
- stack 0: 0x20
1927	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C0
1928	 97	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
1929	 99	ADD		 	 
- stack 0: 0x5C4
1930	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
1931	 9B	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xA0000B02A8000000D1001900EB001202BF031C0086000D0301000000D1001A
1932	 9C	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0xA0000B02A8000000D1001900EB001202BF031C0086000D0301000000D1001A
- stack 0: 0xF0
1933	 9E	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xA0
1934	 9F	JUMP		 	 
- stack 0: 0x5C4
1935	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5C4
1936	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
1937	 A2	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xA0000B02A8000000D1001900EB001202BF031C0086000D0301000000D1001A
1938	 A3	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0xA0000B02A8000000D1001900EB001202BF031C0086000D0301000000D1001A
- stack 0: 0xE0
1939	 A5	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xA0000B
1940	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0xA0000B
- stack 0: 0xFFFF
1941	 A9	AND		 	 
- stack 1: 0x5C4
- stack 0: 0xB
1942	 AA	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0xB
- stack 0: 0x1
1943	 AC	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0xB
1944	 AD	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0xB
- stack 0: 0x40
1945	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C4
1946	 B1	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
1947	 B3	ADD		 	 
- stack 0: 0x5C8
1948	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
1949	 B5	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x2A8000000D1001900EB001202BF031C0086000D0301000000D1001A00EB0013
1950	 B6	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x2A8000000D1001900EB001202BF031C0086000D0301000000D1001A00EB0013
- stack 0: 0xF0
1951	 B8	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x2A8
1952	 B9	JUMP		 	 
- stack 0: 0x5C8
1953	 2A8	JUMPDEST		 ;; __riscvimpl_ADD_2_1_2	  ;; # instr: add sp,ra,sp(ignore imm)
- stack 0: 0x5C8
1954	 2A9	PUSH2	0020	 	 
- stack 1: 0x5C8
- stack 0: 0x20
1955	 2AC	MLOAD		 	  ;; # read from x1
- stack 1: 0x5C8
- stack 0: 0xE
1956	 2AD	PUSH2	0040	 	 
- stack 2: 0x5C8
- stack 1: 0xE
- stack 0: 0x40
1957	 2B0	MLOAD		 	  ;; # read from x2
- stack 2: 0x5C8
- stack 1: 0xE
- stack 0: 0xB
1958	 2B1	ADD		 	 
- stack 1: 0x5C8
- stack 0: 0x19
1959	 2B2	PUSH2	0040	 	 
- stack 2: 0x5C8
- stack 1: 0x19
- stack 0: 0x40
1960	 2B5	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C8
1961	 2B6	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
1962	 2B8	ADD		 	 
- stack 0: 0x5CC
1963	 2B9	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
1964	 2BA	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xD1001900EB001202BF031C0086000D0301000000D1001A00EB001302660308
1965	 2BB	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xD1001900EB001202BF031C0086000D0301000000D1001A00EB001302660308
- stack 0: 0xF0
1966	 2BD	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xD1
1967	 2BE	JUMP		 	 
- stack 0: 0x5CC
1968	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x5CC
1969	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
1970	 D3	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xD1001900EB001202BF031C0086000D0301000000D1001A00EB001302660308
1971	 D4	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0xD1001900EB001202BF031C0086000D0301000000D1001A00EB001302660308
- stack 0: 0xE0
1972	 D6	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xD10019
1973	 D7	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0xD10019
- stack 0: 0xFFFF
1974	 DA	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x19
1975	 DB	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x19
- stack 0: 0x1
1976	 DD	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x19
1977	 DE	PUSH2	03A0	 	 
- stack 2: 0x5CC
- stack 1: 0x19
- stack 0: 0x3A0
1978	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x5CC
1979	 E2	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
1980	 E4	ADD		 	 
- stack 0: 0x5D0
1981	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
1982	 E6	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xEB001202BF031C0086000D0301000000D1001A00EB00130266030803180000
1983	 E7	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xEB001202BF031C0086000D0301000000D1001A00EB00130266030803180000
- stack 0: 0xF0
1984	 E9	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xEB
1985	 EA	JUMP		 	 
- stack 0: 0x5D0
1986	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5D0
1987	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
1988	 ED	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xEB001202BF031C0086000D0301000000D1001A00EB00130266030803180000
1989	 EE	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0xEB001202BF031C0086000D0301000000D1001A00EB00130266030803180000
- stack 0: 0xE0
1990	 F0	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xEB0012
1991	 F1	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0xEB0012
- stack 0: 0xFFFF
1992	 F4	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x12
1993	 F5	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x12
- stack 0: 0x1
1994	 F7	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x12
1995	 F8	PUSH2	0380	 	 
- stack 2: 0x5D0
- stack 1: 0x12
- stack 0: 0x380
1996	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x5D0
1997	 FC	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
1998	 FE	ADD		 	 
- stack 0: 0x5D4
1999	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2000	 100	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x2BF031C0086000D0301000000D1001A00EB001302660308031800000086000D
2001	 101	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x2BF031C0086000D0301000000D1001A00EB001302660308031800000086000D
- stack 0: 0xF0
2002	 103	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x2BF
2003	 104	JUMP		 	 
- stack 0: 0x5D4
2004	 2BF	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,31c(ignore imm)
- stack 0: 0x5D4
2005	 2C0	PUSH2	0040	 	 
- stack 1: 0x5D4
- stack 0: 0x40
2006	 2C3	MLOAD		 	  ;; # read from x2
- stack 1: 0x5D4
- stack 0: 0x19
2007	 2C4	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
2008	 2C9	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x19
2009	 2CA	PUSH2	03A0	 	 
- stack 2: 0x5D4
- stack 1: 0x19
- stack 0: 0x3A0
2010	 2CD	MLOAD		 	  ;; # read from x29
- stack 2: 0x5D4
- stack 1: 0x19
- stack 0: 0x19
2011	 2CE	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x19
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
2012	 2D3	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0x19
- stack 0: 0x19
2013	 2D4	SUB		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2014	 2D5	PUSH2	02DD	 ;; _neq_42cb5315520975377ebfdae83abd1a8e30bd17eba19963b5037960a4113f34bd	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x2DD
2015	 2D8	JUMPI		 	 
- stack 0: 0x5D4
2016	 2D9	PUSH2	02F7	 ;; _neq_after_42cb5315520975377ebfdae83abd1a8e30bd17eba19963b5037960a4113f34bd	 
- stack 1: 0x5D4
- stack 0: 0x2F7
2017	 2DC	JUMP		 	 
- stack 0: 0x5D4
2018	 2F7	JUMPDEST		 ;; _neq_after_42cb5315520975377ebfdae83abd1a8e30bd17eba19963b5037960a4113f34bd	 
- stack 0: 0x5D4
2019	 2F8	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2020	 2FA	ADD		 	 
- stack 0: 0x5D8
2021	 2FB	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2022	 2FC	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x86000D0301000000D1001A00EB001302660308031800000086000D00A0000B
2023	 2FD	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x86000D0301000000D1001A00EB001302660308031800000086000D00A0000B
- stack 0: 0xF0
2024	 2FF	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x86
2025	 300	JUMP		 	 
- stack 0: 0x5D8
2026	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5D8
2027	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2028	 88	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x86000D0301000000D1001A00EB001302660308031800000086000D00A0000B
2029	 89	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x86000D0301000000D1001A00EB001302660308031800000086000D00A0000B
- stack 0: 0xE0
2030	 8B	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x86000D
2031	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x86000D
- stack 0: 0xFFFF
2032	 8F	AND		 	 
- stack 1: 0x5D8
- stack 0: 0xD
2033	 90	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0xD
- stack 0: 0x1
2034	 92	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0xD
2035	 93	PUSH2	0020	 	 
- stack 2: 0x5D8
- stack 1: 0xD
- stack 0: 0x20
2036	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D8
2037	 97	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2038	 99	ADD		 	 
- stack 0: 0x5DC
2039	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2040	 9B	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x301000000D1001A00EB001302660308031800000086000D00A0000B00BA0000
2041	 9C	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x301000000D1001A00EB001302660308031800000086000D00A0000B00BA0000
- stack 0: 0xF0
2042	 9E	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x301
2043	 9F	JUMP		 	 
- stack 0: 0x5DC
2044	 301	JUMPDEST		 ;; __riscvimpl_ADD_1_1_1	  ;; # instr: add ra,ra,ra(ignore imm)
- stack 0: 0x5DC
2045	 302	PUSH2	0020	 	 
- stack 1: 0x5DC
- stack 0: 0x20
2046	 305	MLOAD		 	  ;; # read from x1
- stack 1: 0x5DC
- stack 0: 0xD
2047	 306	PUSH2	0020	 	 
- stack 2: 0x5DC
- stack 1: 0xD
- stack 0: 0x20
2048	 309	MLOAD		 	  ;; # read from x1
- stack 2: 0x5DC
- stack 1: 0xD
- stack 0: 0xD
2049	 30A	ADD		 	 
- stack 1: 0x5DC
- stack 0: 0x1A
2050	 30B	PUSH2	0020	 	 
- stack 2: 0x5DC
- stack 1: 0x1A
- stack 0: 0x20
2051	 30E	MSTORE		 	  ;; # store to x1
- stack 0: 0x5DC
2052	 30F	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2053	 311	ADD		 	 
- stack 0: 0x5E0
2054	 312	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2055	 313	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0xD1001A00EB001302660308031800000086000D00A0000B00BA000003320000
2056	 314	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0xD1001A00EB001302660308031800000086000D00A0000B00BA000003320000
- stack 0: 0xF0
2057	 316	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0xD1
2058	 317	JUMP		 	 
- stack 0: 0x5E0
2059	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x5E0
2060	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2061	 D3	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0xD1001A00EB001302660308031800000086000D00A0000B00BA000003320000
2062	 D4	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0xD1001A00EB001302660308031800000086000D00A0000B00BA000003320000
- stack 0: 0xE0
2063	 D6	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0xD1001A
2064	 D7	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0xD1001A
- stack 0: 0xFFFF
2065	 DA	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x1A
2066	 DB	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x1A
- stack 0: 0x1
2067	 DD	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x1A
2068	 DE	PUSH2	03A0	 	 
- stack 2: 0x5E0
- stack 1: 0x1A
- stack 0: 0x3A0
2069	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x5E0
2070	 E2	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2071	 E4	ADD		 	 
- stack 0: 0x5E4
2072	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2073	 E6	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0xEB001302660308031800000086000D00A0000B00BA00000332000003510001
2074	 E7	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0xEB001302660308031800000086000D00A0000B00BA00000332000003510001
- stack 0: 0xF0
2075	 E9	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0xEB
2076	 EA	JUMP		 	 
- stack 0: 0x5E4
2077	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5E4
2078	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2079	 ED	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0xEB001302660308031800000086000D00A0000B00BA00000332000003510001
2080	 EE	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0xEB001302660308031800000086000D00A0000B00BA00000332000003510001
- stack 0: 0xE0
2081	 F0	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0xEB0013
2082	 F1	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0xEB0013
- stack 0: 0xFFFF
2083	 F4	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x13
2084	 F5	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x13
- stack 0: 0x1
2085	 F7	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x13
2086	 F8	PUSH2	0380	 	 
- stack 2: 0x5E4
- stack 1: 0x13
- stack 0: 0x380
2087	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x5E4
2088	 FC	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2089	 FE	ADD		 	 
- stack 0: 0x5E8
2090	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2091	 100	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x2660308031800000086000D00A0000B00BA0000033200000351000103700002
2092	 101	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x2660308031800000086000D00A0000B00BA0000033200000351000103700002
- stack 0: 0xF0
2093	 103	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x266
2094	 104	JUMP		 	 
- stack 0: 0x5E8
2095	 266	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,334(ignore imm)
- stack 0: 0x5E8
2096	 267	PUSH2	0020	 	 
- stack 1: 0x5E8
- stack 0: 0x20
2097	 26A	MLOAD		 	  ;; # read from x1
- stack 1: 0x5E8
- stack 0: 0x1A
2098	 26B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x1A
- stack 0: 0xFFFFFFFF
2099	 270	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E8
- stack 0: 0x1A
2100	 271	PUSH2	03A0	 	 
- stack 2: 0x5E8
- stack 1: 0x1A
- stack 0: 0x3A0
2101	 274	MLOAD		 	  ;; # read from x29
- stack 2: 0x5E8
- stack 1: 0x1A
- stack 0: 0x1A
2102	 275	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E8
- stack 2: 0x1A
- stack 1: 0x1A
- stack 0: 0xFFFFFFFF
2103	 27A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E8
- stack 1: 0x1A
- stack 0: 0x1A
2104	 27B	SUB		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2105	 27C	PUSH2	0284	 ;; _neq_2ff3c442480f18f414d4f63c5000521a10fcaa4d5fde456aa7625def0d57fad7	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x284
2106	 27F	JUMPI		 	 
- stack 0: 0x5E8
2107	 280	PUSH2	029E	 ;; _neq_after_2ff3c442480f18f414d4f63c5000521a10fcaa4d5fde456aa7625def0d57fad7	 
- stack 1: 0x5E8
- stack 0: 0x29E
2108	 283	JUMP		 	 
- stack 0: 0x5E8
2109	 29E	JUMPDEST		 ;; _neq_after_2ff3c442480f18f414d4f63c5000521a10fcaa4d5fde456aa7625def0d57fad7	 
- stack 0: 0x5E8
2110	 29F	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2111	 2A1	ADD		 	 
- stack 0: 0x5EC
2112	 2A2	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2113	 2A3	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x31800000086000D00A0000B00BA0000033200000351000103700002038AFFE8
2114	 2A4	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x31800000086000D00A0000B00BA0000033200000351000103700002038AFFE8
- stack 0: 0xF0
2115	 2A6	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x318
2116	 2A7	JUMP		 	 
- stack 0: 0x5EC
2117	 318	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5EC
2118	 319	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2119	 31A	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x31800000086000D00A0000B00BA0000033200000351000103700002038AFFE8
2120	 31B	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x31800000086000D00A0000B00BA0000033200000351000103700002038AFFE8
- stack 0: 0xE0
2121	 31D	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x3180000
2122	 31E	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x3180000
- stack 0: 0xFFFF
2123	 321	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
2124	 322	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x1
2125	 324	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
2126	 325	PUSH2	0080	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x80
2127	 328	MSTORE		 	  ;; # store to x4
- stack 0: 0x5EC
2128	 329	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2129	 32B	ADD		 	 
- stack 0: 0x5F0
2130	 32C	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2131	 32D	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x86000D00A0000B00BA0000033200000351000103700002038AFFE800D10018
2132	 32E	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x86000D00A0000B00BA0000033200000351000103700002038AFFE800D10018
- stack 0: 0xF0
2133	 330	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x86
2134	 331	JUMP		 	 
- stack 0: 0x5F0
2135	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5F0
2136	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2137	 88	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x86000D00A0000B00BA0000033200000351000103700002038AFFE800D10018
2138	 89	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x86000D00A0000B00BA0000033200000351000103700002038AFFE800D10018
- stack 0: 0xE0
2139	 8B	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x86000D
2140	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x86000D
- stack 0: 0xFFFF
2141	 8F	AND		 	 
- stack 1: 0x5F0
- stack 0: 0xD
2142	 90	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0xD
- stack 0: 0x1
2143	 92	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0xD
2144	 93	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xD
- stack 0: 0x20
2145	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F0
2146	 97	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2147	 99	ADD		 	 
- stack 0: 0x5F4
2148	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2149	 9B	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0xA0000B00BA0000033200000351000103700002038AFFE800D1001800EB0014
2150	 9C	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0xA0000B00BA0000033200000351000103700002038AFFE800D1001800EB0014
- stack 0: 0xF0
2151	 9E	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0xA0
2152	 9F	JUMP		 	 
- stack 0: 0x5F4
2153	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5F4
2154	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
2155	 A2	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0xA0000B00BA0000033200000351000103700002038AFFE800D1001800EB0014
2156	 A3	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0xA0000B00BA0000033200000351000103700002038AFFE800D1001800EB0014
- stack 0: 0xE0
2157	 A5	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0xA0000B
2158	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0xA0000B
- stack 0: 0xFFFF
2159	 A9	AND		 	 
- stack 1: 0x5F4
- stack 0: 0xB
2160	 AA	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0xB
- stack 0: 0x1
2161	 AC	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0xB
2162	 AD	PUSH2	0040	 	 
- stack 2: 0x5F4
- stack 1: 0xB
- stack 0: 0x40
2163	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F4
2164	 B1	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2165	 B3	ADD		 	 
- stack 0: 0x5F8
2166	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2167	 B5	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xBA0000033200000351000103700002038AFFE800D1001800EB001403CC02DC
2168	 B6	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0xBA0000033200000351000103700002038AFFE800D1001800EB001403CC02DC
- stack 0: 0xF0
2169	 B8	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xBA
2170	 B9	JUMP		 	 
- stack 0: 0x5F8
2171	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x5F8
2172	 BB	PUSH2	0020	 	 
- stack 1: 0x5F8
- stack 0: 0x20
2173	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x5F8
- stack 0: 0xD
2174	 BF	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0xD
- stack 0: 0x40
2175	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x5F8
- stack 1: 0xD
- stack 0: 0xB
2176	 C3	ADD		 	 
- stack 1: 0x5F8
- stack 0: 0x18
2177	 C4	PUSH2	0060	 	 
- stack 2: 0x5F8
- stack 1: 0x18
- stack 0: 0x60
2178	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x5F8
2179	 C8	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2180	 CA	ADD		 	 
- stack 0: 0x5FC
2181	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2182	 CC	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x33200000351000103700002038AFFE800D1001800EB001403CC02DC03180000
2183	 CD	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x33200000351000103700002038AFFE800D1001800EB001403CC02DC03180000
- stack 0: 0xF0
2184	 CF	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x332
2185	 D0	JUMP		 	 
- stack 0: 0x5FC
2186	 332	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5FC
2187	 333	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2188	 334	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x33200000351000103700002038AFFE800D1001800EB001403CC02DC03180000
2189	 335	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x33200000351000103700002038AFFE800D1001800EB001403CC02DC03180000
- stack 0: 0xE0
2190	 337	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x3320000
2191	 338	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x3320000
- stack 0: 0xFFFF
2192	 33B	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
2193	 33C	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
2194	 33E	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
2195	 33F	PUSH2	0060	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x60
2196	 342	MLOAD		 	  ;; # read from x3
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x18
2197	 343	ADD		 	  ;; # ADDI 3
- stack 1: 0x5FC
- stack 0: 0x18
2198	 344	PUSH2	00C0	 	 
- stack 2: 0x5FC
- stack 1: 0x18
- stack 0: 0xC0
2199	 347	MSTORE		 	  ;; # store to x6
- stack 0: 0x5FC
2200	 348	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2201	 34A	ADD		 	 
- stack 0: 0x600
2202	 34B	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2203	 34C	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x351000103700002038AFFE800D1001800EB001403CC02DC031800000086000E
2204	 34D	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x351000103700002038AFFE800D1001800EB001403CC02DC031800000086000E
- stack 0: 0xF0
2205	 34F	SHR		 	 
- stack 1: 0x600
- stack 0: 0x351
2206	 350	JUMP		 	 
- stack 0: 0x600
2207	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x600
2208	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2209	 353	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x351000103700002038AFFE800D1001800EB001403CC02DC031800000086000E
2210	 354	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x351000103700002038AFFE800D1001800EB001403CC02DC031800000086000E
- stack 0: 0xE0
2211	 356	SHR		 	 
- stack 1: 0x600
- stack 0: 0x3510001
2212	 357	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x3510001
- stack 0: 0xFFFF
2213	 35A	AND		 	 
- stack 1: 0x600
- stack 0: 0x1
2214	 35B	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
2215	 35D	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x1
2216	 35E	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x80
2217	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x0
2218	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x600
- stack 0: 0x1
2219	 363	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x80
2220	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x600
2221	 367	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2222	 369	ADD		 	 
- stack 0: 0x604
2223	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2224	 36B	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3700002038AFFE800D1001800EB001403CC02DC031800000086000E00A0000B
2225	 36C	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x3700002038AFFE800D1001800EB001403CC02DC031800000086000E00A0000B
- stack 0: 0xF0
2226	 36E	SHR		 	 
- stack 1: 0x604
- stack 0: 0x370
2227	 36F	JUMP		 	 
- stack 0: 0x604
2228	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x604
2229	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
2230	 372	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3700002038AFFE800D1001800EB001403CC02DC031800000086000E00A0000B
2231	 373	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x3700002038AFFE800D1001800EB001403CC02DC031800000086000E00A0000B
- stack 0: 0xE0
2232	 375	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3700002
2233	 376	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x3700002
- stack 0: 0xFFFF
2234	 379	AND		 	 
- stack 1: 0x604
- stack 0: 0x2
2235	 37A	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x1
2236	 37C	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x2
2237	 37D	PUSH2	00A0	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0xA0
2238	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x604
2239	 381	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2240	 383	ADD		 	 
- stack 0: 0x608
2241	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2242	 385	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x38AFFE800D1001800EB001403CC02DC031800000086000E00A0000B00BA0000
2243	 386	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x38AFFE800D1001800EB001403CC02DC031800000086000E00A0000B00BA0000
- stack 0: 0xF0
2244	 388	SHR		 	 
- stack 1: 0x608
- stack 0: 0x38A
2245	 389	JUMP		 	 
- stack 0: 0x608
2246	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x608
2247	 38B	PUSH2	0080	 	 
- stack 1: 0x608
- stack 0: 0x80
2248	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x608
- stack 0: 0x1
2249	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2250	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x608
- stack 0: 0x1
2251	 395	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0xA0
2252	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x2
2253	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x608
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2254	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x2
2255	 39F	SUB		 	 
- stack 1: 0x608
- stack 0: 0x1
2256	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x3A8
2257	 3A3	JUMPI		 	 
- stack 0: 0x608
2258	 3A8	JUMPDEST		 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x608
2259	 3A9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2260	 3AA	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x38AFFE800D1001800EB001403CC02DC031800000086000E00A0000B00BA0000
2261	 3AB	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x38AFFE800D1001800EB001403CC02DC031800000086000E00A0000B00BA0000
- stack 0: 0xE0
2262	 3AD	SHR		 	 
- stack 1: 0x608
- stack 0: 0x38AFFE8
2263	 3AE	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x38AFFE8
- stack 0: 0xFFFF
2264	 3B1	AND		 	 
- stack 1: 0x608
- stack 0: 0xFFE8
2265	 3B2	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0xFFE8
- stack 0: 0x1
2266	 3B4	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2267	 3B5	ADD		 	 
- stack 0: 0x5F0
2268	 3B6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFF
2269	 3BB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5F0
2270	 3BC	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2271	 3BD	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x86000D00A0000B00BA0000033200000351000103700002038AFFE800D10018
2272	 3BE	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x86000D00A0000B00BA0000033200000351000103700002038AFFE800D10018
- stack 0: 0xF0
2273	 3C0	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x86
2274	 3C1	JUMP		 	 
- stack 0: 0x5F0
2275	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5F0
2276	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2277	 88	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x86000D00A0000B00BA0000033200000351000103700002038AFFE800D10018
2278	 89	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x86000D00A0000B00BA0000033200000351000103700002038AFFE800D10018
- stack 0: 0xE0
2279	 8B	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x86000D
2280	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x86000D
- stack 0: 0xFFFF
2281	 8F	AND		 	 
- stack 1: 0x5F0
- stack 0: 0xD
2282	 90	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0xD
- stack 0: 0x1
2283	 92	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0xD
2284	 93	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xD
- stack 0: 0x20
2285	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F0
2286	 97	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2287	 99	ADD		 	 
- stack 0: 0x5F4
2288	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2289	 9B	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0xA0000B00BA0000033200000351000103700002038AFFE800D1001800EB0014
2290	 9C	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0xA0000B00BA0000033200000351000103700002038AFFE800D1001800EB0014
- stack 0: 0xF0
2291	 9E	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0xA0
2292	 9F	JUMP		 	 
- stack 0: 0x5F4
2293	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5F4
2294	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
2295	 A2	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0xA0000B00BA0000033200000351000103700002038AFFE800D1001800EB0014
2296	 A3	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0xA0000B00BA0000033200000351000103700002038AFFE800D1001800EB0014
- stack 0: 0xE0
2297	 A5	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0xA0000B
2298	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0xA0000B
- stack 0: 0xFFFF
2299	 A9	AND		 	 
- stack 1: 0x5F4
- stack 0: 0xB
2300	 AA	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0xB
- stack 0: 0x1
2301	 AC	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0xB
2302	 AD	PUSH2	0040	 	 
- stack 2: 0x5F4
- stack 1: 0xB
- stack 0: 0x40
2303	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F4
2304	 B1	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2305	 B3	ADD		 	 
- stack 0: 0x5F8
2306	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2307	 B5	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xBA0000033200000351000103700002038AFFE800D1001800EB001403CC02DC
2308	 B6	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0xBA0000033200000351000103700002038AFFE800D1001800EB001403CC02DC
- stack 0: 0xF0
2309	 B8	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xBA
2310	 B9	JUMP		 	 
- stack 0: 0x5F8
2311	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x5F8
2312	 BB	PUSH2	0020	 	 
- stack 1: 0x5F8
- stack 0: 0x20
2313	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x5F8
- stack 0: 0xD
2314	 BF	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0xD
- stack 0: 0x40
2315	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x5F8
- stack 1: 0xD
- stack 0: 0xB
2316	 C3	ADD		 	 
- stack 1: 0x5F8
- stack 0: 0x18
2317	 C4	PUSH2	0060	 	 
- stack 2: 0x5F8
- stack 1: 0x18
- stack 0: 0x60
2318	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x5F8
2319	 C8	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2320	 CA	ADD		 	 
- stack 0: 0x5FC
2321	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2322	 CC	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x33200000351000103700002038AFFE800D1001800EB001403CC02DC03180000
2323	 CD	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x33200000351000103700002038AFFE800D1001800EB001403CC02DC03180000
- stack 0: 0xF0
2324	 CF	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x332
2325	 D0	JUMP		 	 
- stack 0: 0x5FC
2326	 332	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5FC
2327	 333	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2328	 334	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x33200000351000103700002038AFFE800D1001800EB001403CC02DC03180000
2329	 335	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x33200000351000103700002038AFFE800D1001800EB001403CC02DC03180000
- stack 0: 0xE0
2330	 337	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x3320000
2331	 338	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x3320000
- stack 0: 0xFFFF
2332	 33B	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
2333	 33C	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
2334	 33E	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
2335	 33F	PUSH2	0060	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x60
2336	 342	MLOAD		 	  ;; # read from x3
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x18
2337	 343	ADD		 	  ;; # ADDI 3
- stack 1: 0x5FC
- stack 0: 0x18
2338	 344	PUSH2	00C0	 	 
- stack 2: 0x5FC
- stack 1: 0x18
- stack 0: 0xC0
2339	 347	MSTORE		 	  ;; # store to x6
- stack 0: 0x5FC
2340	 348	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2341	 34A	ADD		 	 
- stack 0: 0x600
2342	 34B	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2343	 34C	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x351000103700002038AFFE800D1001800EB001403CC02DC031800000086000E
2344	 34D	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x351000103700002038AFFE800D1001800EB001403CC02DC031800000086000E
- stack 0: 0xF0
2345	 34F	SHR		 	 
- stack 1: 0x600
- stack 0: 0x351
2346	 350	JUMP		 	 
- stack 0: 0x600
2347	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x600
2348	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2349	 353	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x351000103700002038AFFE800D1001800EB001403CC02DC031800000086000E
2350	 354	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x351000103700002038AFFE800D1001800EB001403CC02DC031800000086000E
- stack 0: 0xE0
2351	 356	SHR		 	 
- stack 1: 0x600
- stack 0: 0x3510001
2352	 357	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x3510001
- stack 0: 0xFFFF
2353	 35A	AND		 	 
- stack 1: 0x600
- stack 0: 0x1
2354	 35B	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
2355	 35D	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x1
2356	 35E	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x80
2357	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
2358	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x600
- stack 0: 0x2
2359	 363	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0x80
2360	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x600
2361	 367	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2362	 369	ADD		 	 
- stack 0: 0x604
2363	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2364	 36B	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3700002038AFFE800D1001800EB001403CC02DC031800000086000E00A0000B
2365	 36C	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x3700002038AFFE800D1001800EB001403CC02DC031800000086000E00A0000B
- stack 0: 0xF0
2366	 36E	SHR		 	 
- stack 1: 0x604
- stack 0: 0x370
2367	 36F	JUMP		 	 
- stack 0: 0x604
2368	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x604
2369	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
2370	 372	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3700002038AFFE800D1001800EB001403CC02DC031800000086000E00A0000B
2371	 373	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x3700002038AFFE800D1001800EB001403CC02DC031800000086000E00A0000B
- stack 0: 0xE0
2372	 375	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3700002
2373	 376	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x3700002
- stack 0: 0xFFFF
2374	 379	AND		 	 
- stack 1: 0x604
- stack 0: 0x2
2375	 37A	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x1
2376	 37C	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x2
2377	 37D	PUSH2	00A0	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0xA0
2378	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x604
2379	 381	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2380	 383	ADD		 	 
- stack 0: 0x608
2381	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2382	 385	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x38AFFE800D1001800EB001403CC02DC031800000086000E00A0000B00BA0000
2383	 386	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x38AFFE800D1001800EB001403CC02DC031800000086000E00A0000B00BA0000
- stack 0: 0xF0
2384	 388	SHR		 	 
- stack 1: 0x608
- stack 0: 0x38A
2385	 389	JUMP		 	 
- stack 0: 0x608
2386	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x608
2387	 38B	PUSH2	0080	 	 
- stack 1: 0x608
- stack 0: 0x80
2388	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x608
- stack 0: 0x2
2389	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2390	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x608
- stack 0: 0x2
2391	 395	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xA0
2392	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x2
2393	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x608
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2394	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x2
2395	 39F	SUB		 	 
- stack 1: 0x608
- stack 0: 0x0
2396	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x3A8
2397	 3A3	JUMPI		 	 
- stack 0: 0x608
2398	 3A4	PUSH2	03C2	 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 1: 0x608
- stack 0: 0x3C2
2399	 3A7	JUMP		 	 
- stack 0: 0x608
2400	 3C2	JUMPDEST		 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x608
2401	 3C3	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2402	 3C5	ADD		 	 
- stack 0: 0x60C
2403	 3C6	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2404	 3C7	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xD1001800EB001403CC02DC031800000086000E00A0000B00BA0000040E0000
2405	 3C8	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0xD1001800EB001403CC02DC031800000086000E00A0000B00BA0000040E0000
- stack 0: 0xF0
2406	 3CA	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xD1
2407	 3CB	JUMP		 	 
- stack 0: 0x60C
2408	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x60C
2409	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
2410	 D3	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xD1001800EB001403CC02DC031800000086000E00A0000B00BA0000040E0000
2411	 D4	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0xD1001800EB001403CC02DC031800000086000E00A0000B00BA0000040E0000
- stack 0: 0xE0
2412	 D6	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xD10018
2413	 D7	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0xD10018
- stack 0: 0xFFFF
2414	 DA	AND		 	 
- stack 1: 0x60C
- stack 0: 0x18
2415	 DB	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x18
- stack 0: 0x1
2416	 DD	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x18
2417	 DE	PUSH2	03A0	 	 
- stack 2: 0x60C
- stack 1: 0x18
- stack 0: 0x3A0
2418	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x60C
2419	 E2	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
2420	 E4	ADD		 	 
- stack 0: 0x610
2421	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
2422	 E6	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xEB001403CC02DC031800000086000E00A0000B00BA0000040E000003320000
2423	 E7	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0xEB001403CC02DC031800000086000E00A0000B00BA0000040E000003320000
- stack 0: 0xF0
2424	 E9	SHR		 	 
- stack 1: 0x610
- stack 0: 0xEB
2425	 EA	JUMP		 	 
- stack 0: 0x610
2426	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x610
2427	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
2428	 ED	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xEB001403CC02DC031800000086000E00A0000B00BA0000040E000003320000
2429	 EE	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0xEB001403CC02DC031800000086000E00A0000B00BA0000040E000003320000
- stack 0: 0xE0
2430	 F0	SHR		 	 
- stack 1: 0x610
- stack 0: 0xEB0014
2431	 F1	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0xEB0014
- stack 0: 0xFFFF
2432	 F4	AND		 	 
- stack 1: 0x610
- stack 0: 0x14
2433	 F5	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x14
- stack 0: 0x1
2434	 F7	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x14
2435	 F8	PUSH2	0380	 	 
- stack 2: 0x610
- stack 1: 0x14
- stack 0: 0x380
2436	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x610
2437	 FC	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
2438	 FE	ADD		 	 
- stack 0: 0x614
2439	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
2440	 100	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x3CC02DC031800000086000E00A0000B00BA0000040E00000332000003510001
2441	 101	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x3CC02DC031800000086000E00A0000B00BA0000040E00000332000003510001
- stack 0: 0xF0
2442	 103	SHR		 	 
- stack 1: 0x614
- stack 0: 0x3CC
2443	 104	JUMP		 	 
- stack 0: 0x614
2444	 3CC	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,2dc(ignore imm)
- stack 0: 0x614
2445	 3CD	PUSH2	00C0	 	 
- stack 1: 0x614
- stack 0: 0xC0
2446	 3D0	MLOAD		 	  ;; # read from x6
- stack 1: 0x614
- stack 0: 0x18
2447	 3D1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x614
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
2448	 3D6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x614
- stack 0: 0x18
2449	 3D7	PUSH2	03A0	 	 
- stack 2: 0x614
- stack 1: 0x18
- stack 0: 0x3A0
2450	 3DA	MLOAD		 	  ;; # read from x29
- stack 2: 0x614
- stack 1: 0x18
- stack 0: 0x18
2451	 3DB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x614
- stack 2: 0x18
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
2452	 3E0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x614
- stack 1: 0x18
- stack 0: 0x18
2453	 3E1	SUB		 	 
- stack 1: 0x614
- stack 0: 0x0
2454	 3E2	PUSH2	03EA	 ;; _neq_b949c6f088610fa010606a3bfa6458684d29413528a0182a7a7d4d25e2c29dcf	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x3EA
2455	 3E5	JUMPI		 	 
- stack 0: 0x614
2456	 3E6	PUSH2	0404	 ;; _neq_after_b949c6f088610fa010606a3bfa6458684d29413528a0182a7a7d4d25e2c29dcf	 
- stack 1: 0x614
- stack 0: 0x404
2457	 3E9	JUMP		 	 
- stack 0: 0x614
2458	 404	JUMPDEST		 ;; _neq_after_b949c6f088610fa010606a3bfa6458684d29413528a0182a7a7d4d25e2c29dcf	 
- stack 0: 0x614
2459	 405	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
2460	 407	ADD		 	 
- stack 0: 0x618
2461	 408	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
2462	 409	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x31800000086000E00A0000B00BA0000040E0000033200000351000103700002
2463	 40A	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x31800000086000E00A0000B00BA0000040E0000033200000351000103700002
- stack 0: 0xF0
2464	 40C	SHR		 	 
- stack 1: 0x618
- stack 0: 0x318
2465	 40D	JUMP		 	 
- stack 0: 0x618
2466	 318	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x618
2467	 319	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
2468	 31A	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x31800000086000E00A0000B00BA0000040E0000033200000351000103700002
2469	 31B	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x31800000086000E00A0000B00BA0000040E0000033200000351000103700002
- stack 0: 0xE0
2470	 31D	SHR		 	 
- stack 1: 0x618
- stack 0: 0x3180000
2471	 31E	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x3180000
- stack 0: 0xFFFF
2472	 321	AND		 	 
- stack 1: 0x618
- stack 0: 0x0
2473	 322	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x1
2474	 324	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x0
2475	 325	PUSH2	0080	 	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x80
2476	 328	MSTORE		 	  ;; # store to x4
- stack 0: 0x618
2477	 329	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
2478	 32B	ADD		 	 
- stack 0: 0x61C
2479	 32C	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
2480	 32D	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x86000E00A0000B00BA0000040E0000033200000351000103700002038AFFE4
2481	 32E	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x86000E00A0000B00BA0000040E0000033200000351000103700002038AFFE4
- stack 0: 0xF0
2482	 330	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x86
2483	 331	JUMP		 	 
- stack 0: 0x61C
2484	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x61C
2485	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
2486	 88	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x86000E00A0000B00BA0000040E0000033200000351000103700002038AFFE4
2487	 89	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x86000E00A0000B00BA0000040E0000033200000351000103700002038AFFE4
- stack 0: 0xE0
2488	 8B	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x86000E
2489	 8C	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x86000E
- stack 0: 0xFFFF
2490	 8F	AND		 	 
- stack 1: 0x61C
- stack 0: 0xE
2491	 90	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0xE
- stack 0: 0x1
2492	 92	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0xE
2493	 93	PUSH2	0020	 	 
- stack 2: 0x61C
- stack 1: 0xE
- stack 0: 0x20
2494	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x61C
2495	 97	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
2496	 99	ADD		 	 
- stack 0: 0x620
2497	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
2498	 9B	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0xA0000B00BA0000040E0000033200000351000103700002038AFFE400D10019
2499	 9C	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0xA0000B00BA0000040E0000033200000351000103700002038AFFE400D10019
- stack 0: 0xF0
2500	 9E	SHR		 	 
- stack 1: 0x620
- stack 0: 0xA0
2501	 9F	JUMP		 	 
- stack 0: 0x620
2502	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x620
2503	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
2504	 A2	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0xA0000B00BA0000040E0000033200000351000103700002038AFFE400D10019
2505	 A3	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0xA0000B00BA0000040E0000033200000351000103700002038AFFE400D10019
- stack 0: 0xE0
2506	 A5	SHR		 	 
- stack 1: 0x620
- stack 0: 0xA0000B
2507	 A6	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0xA0000B
- stack 0: 0xFFFF
2508	 A9	AND		 	 
- stack 1: 0x620
- stack 0: 0xB
2509	 AA	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0xB
- stack 0: 0x1
2510	 AC	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0xB
2511	 AD	PUSH2	0040	 	 
- stack 2: 0x620
- stack 1: 0xB
- stack 0: 0x40
2512	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x620
2513	 B1	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
2514	 B3	ADD		 	 
- stack 0: 0x624
2515	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
2516	 B5	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xBA0000040E0000033200000351000103700002038AFFE400D1001900EB0015
2517	 B6	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0xBA0000040E0000033200000351000103700002038AFFE400D1001900EB0015
- stack 0: 0xF0
2518	 B8	SHR		 	 
- stack 1: 0x624
- stack 0: 0xBA
2519	 B9	JUMP		 	 
- stack 0: 0x624
2520	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x624
2521	 BB	PUSH2	0020	 	 
- stack 1: 0x624
- stack 0: 0x20
2522	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x624
- stack 0: 0xE
2523	 BF	PUSH2	0040	 	 
- stack 2: 0x624
- stack 1: 0xE
- stack 0: 0x40
2524	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x624
- stack 1: 0xE
- stack 0: 0xB
2525	 C3	ADD		 	 
- stack 1: 0x624
- stack 0: 0x19
2526	 C4	PUSH2	0060	 	 
- stack 2: 0x624
- stack 1: 0x19
- stack 0: 0x60
2527	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x624
2528	 C8	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
2529	 CA	ADD		 	 
- stack 0: 0x628
2530	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
2531	 CC	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x40E0000033200000351000103700002038AFFE400D1001900EB001503CC02AC
2532	 CD	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x40E0000033200000351000103700002038AFFE400D1001900EB001503CC02AC
- stack 0: 0xF0
2533	 CF	SHR		 	 
- stack 1: 0x628
- stack 0: 0x40E
2534	 D0	JUMP		 	 
- stack 0: 0x628
2535	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x628
2536	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
2537	 410	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x40E0000033200000351000103700002038AFFE400D1001900EB001503CC02AC
2538	 411	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x40E0000033200000351000103700002038AFFE400D1001900EB001503CC02AC
- stack 0: 0xE0
2539	 413	SHR		 	 
- stack 1: 0x628
- stack 0: 0x40E0000
2540	 414	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x40E0000
- stack 0: 0xFFFF
2541	 417	AND		 	 
- stack 1: 0x628
- stack 0: 0x0
2542	 418	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x0
- stack 0: 0x1
2543	 41A	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x0
2544	 41B	POP		 	 
- stack 0: 0x628
2545	 41C	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
2546	 41E	ADD		 	 
- stack 0: 0x62C
2547	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
2548	 420	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x33200000351000103700002038AFFE400D1001900EB001503CC02AC03180000
2549	 421	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x33200000351000103700002038AFFE400D1001900EB001503CC02AC03180000
- stack 0: 0xF0
2550	 423	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x332
2551	 424	JUMP		 	 
- stack 0: 0x62C
2552	 332	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x62C
2553	 333	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
2554	 334	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x33200000351000103700002038AFFE400D1001900EB001503CC02AC03180000
2555	 335	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x33200000351000103700002038AFFE400D1001900EB001503CC02AC03180000
- stack 0: 0xE0
2556	 337	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x3320000
2557	 338	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x3320000
- stack 0: 0xFFFF
2558	 33B	AND		 	 
- stack 1: 0x62C
- stack 0: 0x0
2559	 33C	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x1
2560	 33E	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x0
2561	 33F	PUSH2	0060	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x60
2562	 342	MLOAD		 	  ;; # read from x3
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x19
2563	 343	ADD		 	  ;; # ADDI 3
- stack 1: 0x62C
- stack 0: 0x19
2564	 344	PUSH2	00C0	 	 
- stack 2: 0x62C
- stack 1: 0x19
- stack 0: 0xC0
2565	 347	MSTORE		 	  ;; # store to x6
- stack 0: 0x62C
2566	 348	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
2567	 34A	ADD		 	 
- stack 0: 0x630
2568	 34B	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
2569	 34C	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x351000103700002038AFFE400D1001900EB001503CC02AC031800000086000F
2570	 34D	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x351000103700002038AFFE400D1001900EB001503CC02AC031800000086000F
- stack 0: 0xF0
2571	 34F	SHR		 	 
- stack 1: 0x630
- stack 0: 0x351
2572	 350	JUMP		 	 
- stack 0: 0x630
2573	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x630
2574	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
2575	 353	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x351000103700002038AFFE400D1001900EB001503CC02AC031800000086000F
2576	 354	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x351000103700002038AFFE400D1001900EB001503CC02AC031800000086000F
- stack 0: 0xE0
2577	 356	SHR		 	 
- stack 1: 0x630
- stack 0: 0x3510001
2578	 357	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x3510001
- stack 0: 0xFFFF
2579	 35A	AND		 	 
- stack 1: 0x630
- stack 0: 0x1
2580	 35B	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x1
2581	 35D	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x1
2582	 35E	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x80
2583	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x0
2584	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x630
- stack 0: 0x1
2585	 363	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x80
2586	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x630
2587	 367	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
2588	 369	ADD		 	 
- stack 0: 0x634
2589	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
2590	 36B	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3700002038AFFE400D1001900EB001503CC02AC031800000086000F00A0000B
2591	 36C	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x3700002038AFFE400D1001900EB001503CC02AC031800000086000F00A0000B
- stack 0: 0xF0
2592	 36E	SHR		 	 
- stack 1: 0x634
- stack 0: 0x370
2593	 36F	JUMP		 	 
- stack 0: 0x634
2594	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x634
2595	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
2596	 372	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3700002038AFFE400D1001900EB001503CC02AC031800000086000F00A0000B
2597	 373	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x3700002038AFFE400D1001900EB001503CC02AC031800000086000F00A0000B
- stack 0: 0xE0
2598	 375	SHR		 	 
- stack 1: 0x634
- stack 0: 0x3700002
2599	 376	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x3700002
- stack 0: 0xFFFF
2600	 379	AND		 	 
- stack 1: 0x634
- stack 0: 0x2
2601	 37A	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x1
2602	 37C	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x2
2603	 37D	PUSH2	00A0	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0xA0
2604	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x634
2605	 381	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
2606	 383	ADD		 	 
- stack 0: 0x638
2607	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
2608	 385	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x38AFFE400D1001900EB001503CC02AC031800000086000F00A0000B00BA0000
2609	 386	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x38AFFE400D1001900EB001503CC02AC031800000086000F00A0000B00BA0000
- stack 0: 0xF0
2610	 388	SHR		 	 
- stack 1: 0x638
- stack 0: 0x38A
2611	 389	JUMP		 	 
- stack 0: 0x638
2612	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x638
2613	 38B	PUSH2	0080	 	 
- stack 1: 0x638
- stack 0: 0x80
2614	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x638
- stack 0: 0x1
2615	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2616	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x638
- stack 0: 0x1
2617	 395	PUSH2	00A0	 	 
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0xA0
2618	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0x2
2619	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x638
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2620	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0x2
2621	 39F	SUB		 	 
- stack 1: 0x638
- stack 0: 0x1
2622	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0x3A8
2623	 3A3	JUMPI		 	 
- stack 0: 0x638
2624	 3A8	JUMPDEST		 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x638
2625	 3A9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
2626	 3AA	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x38AFFE400D1001900EB001503CC02AC031800000086000F00A0000B00BA0000
2627	 3AB	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x38AFFE400D1001900EB001503CC02AC031800000086000F00A0000B00BA0000
- stack 0: 0xE0
2628	 3AD	SHR		 	 
- stack 1: 0x638
- stack 0: 0x38AFFE4
2629	 3AE	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x38AFFE4
- stack 0: 0xFFFF
2630	 3B1	AND		 	 
- stack 1: 0x638
- stack 0: 0xFFE4
2631	 3B2	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0xFFE4
- stack 0: 0x1
2632	 3B4	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2633	 3B5	ADD		 	 
- stack 0: 0x61C
2634	 3B6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x61C
- stack 0: 0xFFFFFFFF
2635	 3BB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x61C
2636	 3BC	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
2637	 3BD	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x86000E00A0000B00BA0000040E0000033200000351000103700002038AFFE4
2638	 3BE	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x86000E00A0000B00BA0000040E0000033200000351000103700002038AFFE4
- stack 0: 0xF0
2639	 3C0	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x86
2640	 3C1	JUMP		 	 
- stack 0: 0x61C
2641	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x61C
2642	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
2643	 88	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x86000E00A0000B00BA0000040E0000033200000351000103700002038AFFE4
2644	 89	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x86000E00A0000B00BA0000040E0000033200000351000103700002038AFFE4
- stack 0: 0xE0
2645	 8B	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x86000E
2646	 8C	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x86000E
- stack 0: 0xFFFF
2647	 8F	AND		 	 
- stack 1: 0x61C
- stack 0: 0xE
2648	 90	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0xE
- stack 0: 0x1
2649	 92	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0xE
2650	 93	PUSH2	0020	 	 
- stack 2: 0x61C
- stack 1: 0xE
- stack 0: 0x20
2651	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x61C
2652	 97	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
2653	 99	ADD		 	 
- stack 0: 0x620
2654	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
2655	 9B	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0xA0000B00BA0000040E0000033200000351000103700002038AFFE400D10019
2656	 9C	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0xA0000B00BA0000040E0000033200000351000103700002038AFFE400D10019
- stack 0: 0xF0
2657	 9E	SHR		 	 
- stack 1: 0x620
- stack 0: 0xA0
2658	 9F	JUMP		 	 
- stack 0: 0x620
2659	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x620
2660	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
2661	 A2	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0xA0000B00BA0000040E0000033200000351000103700002038AFFE400D10019
2662	 A3	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0xA0000B00BA0000040E0000033200000351000103700002038AFFE400D10019
- stack 0: 0xE0
2663	 A5	SHR		 	 
- stack 1: 0x620
- stack 0: 0xA0000B
2664	 A6	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0xA0000B
- stack 0: 0xFFFF
2665	 A9	AND		 	 
- stack 1: 0x620
- stack 0: 0xB
2666	 AA	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0xB
- stack 0: 0x1
2667	 AC	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0xB
2668	 AD	PUSH2	0040	 	 
- stack 2: 0x620
- stack 1: 0xB
- stack 0: 0x40
2669	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x620
2670	 B1	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
2671	 B3	ADD		 	 
- stack 0: 0x624
2672	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
2673	 B5	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xBA0000040E0000033200000351000103700002038AFFE400D1001900EB0015
2674	 B6	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0xBA0000040E0000033200000351000103700002038AFFE400D1001900EB0015
- stack 0: 0xF0
2675	 B8	SHR		 	 
- stack 1: 0x624
- stack 0: 0xBA
2676	 B9	JUMP		 	 
- stack 0: 0x624
2677	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x624
2678	 BB	PUSH2	0020	 	 
- stack 1: 0x624
- stack 0: 0x20
2679	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x624
- stack 0: 0xE
2680	 BF	PUSH2	0040	 	 
- stack 2: 0x624
- stack 1: 0xE
- stack 0: 0x40
2681	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x624
- stack 1: 0xE
- stack 0: 0xB
2682	 C3	ADD		 	 
- stack 1: 0x624
- stack 0: 0x19
2683	 C4	PUSH2	0060	 	 
- stack 2: 0x624
- stack 1: 0x19
- stack 0: 0x60
2684	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x624
2685	 C8	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
2686	 CA	ADD		 	 
- stack 0: 0x628
2687	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
2688	 CC	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x40E0000033200000351000103700002038AFFE400D1001900EB001503CC02AC
2689	 CD	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x40E0000033200000351000103700002038AFFE400D1001900EB001503CC02AC
- stack 0: 0xF0
2690	 CF	SHR		 	 
- stack 1: 0x628
- stack 0: 0x40E
2691	 D0	JUMP		 	 
- stack 0: 0x628
2692	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x628
2693	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
2694	 410	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x40E0000033200000351000103700002038AFFE400D1001900EB001503CC02AC
2695	 411	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x40E0000033200000351000103700002038AFFE400D1001900EB001503CC02AC
- stack 0: 0xE0
2696	 413	SHR		 	 
- stack 1: 0x628
- stack 0: 0x40E0000
2697	 414	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x40E0000
- stack 0: 0xFFFF
2698	 417	AND		 	 
- stack 1: 0x628
- stack 0: 0x0
2699	 418	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x0
- stack 0: 0x1
2700	 41A	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x0
2701	 41B	POP		 	 
- stack 0: 0x628
2702	 41C	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
2703	 41E	ADD		 	 
- stack 0: 0x62C
2704	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
2705	 420	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x33200000351000103700002038AFFE400D1001900EB001503CC02AC03180000
2706	 421	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x33200000351000103700002038AFFE400D1001900EB001503CC02AC03180000
- stack 0: 0xF0
2707	 423	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x332
2708	 424	JUMP		 	 
- stack 0: 0x62C
2709	 332	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x62C
2710	 333	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
2711	 334	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x33200000351000103700002038AFFE400D1001900EB001503CC02AC03180000
2712	 335	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x33200000351000103700002038AFFE400D1001900EB001503CC02AC03180000
- stack 0: 0xE0
2713	 337	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x3320000
2714	 338	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x3320000
- stack 0: 0xFFFF
2715	 33B	AND		 	 
- stack 1: 0x62C
- stack 0: 0x0
2716	 33C	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x1
2717	 33E	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x0
2718	 33F	PUSH2	0060	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x60
2719	 342	MLOAD		 	  ;; # read from x3
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x19
2720	 343	ADD		 	  ;; # ADDI 3
- stack 1: 0x62C
- stack 0: 0x19
2721	 344	PUSH2	00C0	 	 
- stack 2: 0x62C
- stack 1: 0x19
- stack 0: 0xC0
2722	 347	MSTORE		 	  ;; # store to x6
- stack 0: 0x62C
2723	 348	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
2724	 34A	ADD		 	 
- stack 0: 0x630
2725	 34B	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
2726	 34C	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x351000103700002038AFFE400D1001900EB001503CC02AC031800000086000F
2727	 34D	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x351000103700002038AFFE400D1001900EB001503CC02AC031800000086000F
- stack 0: 0xF0
2728	 34F	SHR		 	 
- stack 1: 0x630
- stack 0: 0x351
2729	 350	JUMP		 	 
- stack 0: 0x630
2730	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x630
2731	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
2732	 353	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x351000103700002038AFFE400D1001900EB001503CC02AC031800000086000F
2733	 354	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x351000103700002038AFFE400D1001900EB001503CC02AC031800000086000F
- stack 0: 0xE0
2734	 356	SHR		 	 
- stack 1: 0x630
- stack 0: 0x3510001
2735	 357	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x3510001
- stack 0: 0xFFFF
2736	 35A	AND		 	 
- stack 1: 0x630
- stack 0: 0x1
2737	 35B	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x1
2738	 35D	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x1
2739	 35E	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x80
2740	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x1
2741	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x630
- stack 0: 0x2
2742	 363	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0x80
2743	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x630
2744	 367	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
2745	 369	ADD		 	 
- stack 0: 0x634
2746	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
2747	 36B	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3700002038AFFE400D1001900EB001503CC02AC031800000086000F00A0000B
2748	 36C	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x3700002038AFFE400D1001900EB001503CC02AC031800000086000F00A0000B
- stack 0: 0xF0
2749	 36E	SHR		 	 
- stack 1: 0x634
- stack 0: 0x370
2750	 36F	JUMP		 	 
- stack 0: 0x634
2751	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x634
2752	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
2753	 372	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3700002038AFFE400D1001900EB001503CC02AC031800000086000F00A0000B
2754	 373	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x3700002038AFFE400D1001900EB001503CC02AC031800000086000F00A0000B
- stack 0: 0xE0
2755	 375	SHR		 	 
- stack 1: 0x634
- stack 0: 0x3700002
2756	 376	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x3700002
- stack 0: 0xFFFF
2757	 379	AND		 	 
- stack 1: 0x634
- stack 0: 0x2
2758	 37A	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x1
2759	 37C	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x2
2760	 37D	PUSH2	00A0	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0xA0
2761	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x634
2762	 381	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
2763	 383	ADD		 	 
- stack 0: 0x638
2764	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
2765	 385	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x38AFFE400D1001900EB001503CC02AC031800000086000F00A0000B00BA0000
2766	 386	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x38AFFE400D1001900EB001503CC02AC031800000086000F00A0000B00BA0000
- stack 0: 0xF0
2767	 388	SHR		 	 
- stack 1: 0x638
- stack 0: 0x38A
2768	 389	JUMP		 	 
- stack 0: 0x638
2769	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x638
2770	 38B	PUSH2	0080	 	 
- stack 1: 0x638
- stack 0: 0x80
2771	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x638
- stack 0: 0x2
2772	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2773	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x638
- stack 0: 0x2
2774	 395	PUSH2	00A0	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0xA0
2775	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0x2
2776	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x638
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2777	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0x2
2778	 39F	SUB		 	 
- stack 1: 0x638
- stack 0: 0x0
2779	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x3A8
2780	 3A3	JUMPI		 	 
- stack 0: 0x638
2781	 3A4	PUSH2	03C2	 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 1: 0x638
- stack 0: 0x3C2
2782	 3A7	JUMP		 	 
- stack 0: 0x638
2783	 3C2	JUMPDEST		 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x638
2784	 3C3	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
2785	 3C5	ADD		 	 
- stack 0: 0x63C
2786	 3C6	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
2787	 3C7	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xD1001900EB001503CC02AC031800000086000F00A0000B00BA0000040E0000
2788	 3C8	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xD1001900EB001503CC02AC031800000086000F00A0000B00BA0000040E0000
- stack 0: 0xF0
2789	 3CA	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xD1
2790	 3CB	JUMP		 	 
- stack 0: 0x63C
2791	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x63C
2792	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
2793	 D3	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xD1001900EB001503CC02AC031800000086000F00A0000B00BA0000040E0000
2794	 D4	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0xD1001900EB001503CC02AC031800000086000F00A0000B00BA0000040E0000
- stack 0: 0xE0
2795	 D6	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xD10019
2796	 D7	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0xD10019
- stack 0: 0xFFFF
2797	 DA	AND		 	 
- stack 1: 0x63C
- stack 0: 0x19
2798	 DB	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x19
- stack 0: 0x1
2799	 DD	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x19
2800	 DE	PUSH2	03A0	 	 
- stack 2: 0x63C
- stack 1: 0x19
- stack 0: 0x3A0
2801	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x63C
2802	 E2	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
2803	 E4	ADD		 	 
- stack 0: 0x640
2804	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
2805	 E6	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xEB001503CC02AC031800000086000F00A0000B00BA0000040E0000040E0000
2806	 E7	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0xEB001503CC02AC031800000086000F00A0000B00BA0000040E0000040E0000
- stack 0: 0xF0
2807	 E9	SHR		 	 
- stack 1: 0x640
- stack 0: 0xEB
2808	 EA	JUMP		 	 
- stack 0: 0x640
2809	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x640
2810	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
2811	 ED	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xEB001503CC02AC031800000086000F00A0000B00BA0000040E0000040E0000
2812	 EE	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0xEB001503CC02AC031800000086000F00A0000B00BA0000040E0000040E0000
- stack 0: 0xE0
2813	 F0	SHR		 	 
- stack 1: 0x640
- stack 0: 0xEB0015
2814	 F1	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0xEB0015
- stack 0: 0xFFFF
2815	 F4	AND		 	 
- stack 1: 0x640
- stack 0: 0x15
2816	 F5	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x15
- stack 0: 0x1
2817	 F7	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x15
2818	 F8	PUSH2	0380	 	 
- stack 2: 0x640
- stack 1: 0x15
- stack 0: 0x380
2819	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x640
2820	 FC	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
2821	 FE	ADD		 	 
- stack 0: 0x644
2822	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
2823	 100	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x3CC02AC031800000086000F00A0000B00BA0000040E0000040E000003320000
2824	 101	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x3CC02AC031800000086000F00A0000B00BA0000040E0000040E000003320000
- stack 0: 0xF0
2825	 103	SHR		 	 
- stack 1: 0x644
- stack 0: 0x3CC
2826	 104	JUMP		 	 
- stack 0: 0x644
2827	 3CC	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,2dc(ignore imm)
- stack 0: 0x644
2828	 3CD	PUSH2	00C0	 	 
- stack 1: 0x644
- stack 0: 0xC0
2829	 3D0	MLOAD		 	  ;; # read from x6
- stack 1: 0x644
- stack 0: 0x19
2830	 3D1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x644
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
2831	 3D6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x644
- stack 0: 0x19
2832	 3D7	PUSH2	03A0	 	 
- stack 2: 0x644
- stack 1: 0x19
- stack 0: 0x3A0
2833	 3DA	MLOAD		 	  ;; # read from x29
- stack 2: 0x644
- stack 1: 0x19
- stack 0: 0x19
2834	 3DB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x644
- stack 2: 0x19
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
2835	 3E0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x644
- stack 1: 0x19
- stack 0: 0x19
2836	 3E1	SUB		 	 
- stack 1: 0x644
- stack 0: 0x0
2837	 3E2	PUSH2	03EA	 ;; _neq_b949c6f088610fa010606a3bfa6458684d29413528a0182a7a7d4d25e2c29dcf	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x3EA
2838	 3E5	JUMPI		 	 
- stack 0: 0x644
2839	 3E6	PUSH2	0404	 ;; _neq_after_b949c6f088610fa010606a3bfa6458684d29413528a0182a7a7d4d25e2c29dcf	 
- stack 1: 0x644
- stack 0: 0x404
2840	 3E9	JUMP		 	 
- stack 0: 0x644
2841	 404	JUMPDEST		 ;; _neq_after_b949c6f088610fa010606a3bfa6458684d29413528a0182a7a7d4d25e2c29dcf	 
- stack 0: 0x644
2842	 405	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
2843	 407	ADD		 	 
- stack 0: 0x648
2844	 408	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
2845	 409	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x31800000086000F00A0000B00BA0000040E0000040E00000332000003510001
2846	 40A	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x31800000086000F00A0000B00BA0000040E0000040E00000332000003510001
- stack 0: 0xF0
2847	 40C	SHR		 	 
- stack 1: 0x648
- stack 0: 0x318
2848	 40D	JUMP		 	 
- stack 0: 0x648
2849	 318	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x648
2850	 319	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
2851	 31A	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x31800000086000F00A0000B00BA0000040E0000040E00000332000003510001
2852	 31B	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x31800000086000F00A0000B00BA0000040E0000040E00000332000003510001
- stack 0: 0xE0
2853	 31D	SHR		 	 
- stack 1: 0x648
- stack 0: 0x3180000
2854	 31E	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x3180000
- stack 0: 0xFFFF
2855	 321	AND		 	 
- stack 1: 0x648
- stack 0: 0x0
2856	 322	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x1
2857	 324	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x0
2858	 325	PUSH2	0080	 	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x80
2859	 328	MSTORE		 	  ;; # store to x4
- stack 0: 0x648
2860	 329	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
2861	 32B	ADD		 	 
- stack 0: 0x64C
2862	 32C	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
2863	 32D	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x86000F00A0000B00BA0000040E0000040E0000033200000351000103700002
2864	 32E	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x86000F00A0000B00BA0000040E0000040E0000033200000351000103700002
- stack 0: 0xF0
2865	 330	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x86
2866	 331	JUMP		 	 
- stack 0: 0x64C
2867	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x64C
2868	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
2869	 88	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x86000F00A0000B00BA0000040E0000040E0000033200000351000103700002
2870	 89	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x86000F00A0000B00BA0000040E0000040E0000033200000351000103700002
- stack 0: 0xE0
2871	 8B	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x86000F
2872	 8C	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x86000F
- stack 0: 0xFFFF
2873	 8F	AND		 	 
- stack 1: 0x64C
- stack 0: 0xF
2874	 90	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0xF
- stack 0: 0x1
2875	 92	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0xF
2876	 93	PUSH2	0020	 	 
- stack 2: 0x64C
- stack 1: 0xF
- stack 0: 0x20
2877	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x64C
2878	 97	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
2879	 99	ADD		 	 
- stack 0: 0x650
2880	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
2881	 9B	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0xA0000B00BA0000040E0000040E0000033200000351000103700002038AFFE0
2882	 9C	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0xA0000B00BA0000040E0000040E0000033200000351000103700002038AFFE0
- stack 0: 0xF0
2883	 9E	SHR		 	 
- stack 1: 0x650
- stack 0: 0xA0
2884	 9F	JUMP		 	 
- stack 0: 0x650
2885	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x650
2886	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
2887	 A2	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0xA0000B00BA0000040E0000040E0000033200000351000103700002038AFFE0
2888	 A3	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0xA0000B00BA0000040E0000040E0000033200000351000103700002038AFFE0
- stack 0: 0xE0
2889	 A5	SHR		 	 
- stack 1: 0x650
- stack 0: 0xA0000B
2890	 A6	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0xA0000B
- stack 0: 0xFFFF
2891	 A9	AND		 	 
- stack 1: 0x650
- stack 0: 0xB
2892	 AA	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0xB
- stack 0: 0x1
2893	 AC	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0xB
2894	 AD	PUSH2	0040	 	 
- stack 2: 0x650
- stack 1: 0xB
- stack 0: 0x40
2895	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x650
2896	 B1	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
2897	 B3	ADD		 	 
- stack 0: 0x654
2898	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
2899	 B5	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0xBA0000040E0000040E0000033200000351000103700002038AFFE000D1001A
2900	 B6	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0xBA0000040E0000040E0000033200000351000103700002038AFFE000D1001A
- stack 0: 0xF0
2901	 B8	SHR		 	 
- stack 1: 0x654
- stack 0: 0xBA
2902	 B9	JUMP		 	 
- stack 0: 0x654
2903	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x654
2904	 BB	PUSH2	0020	 	 
- stack 1: 0x654
- stack 0: 0x20
2905	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x654
- stack 0: 0xF
2906	 BF	PUSH2	0040	 	 
- stack 2: 0x654
- stack 1: 0xF
- stack 0: 0x40
2907	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x654
- stack 1: 0xF
- stack 0: 0xB
2908	 C3	ADD		 	 
- stack 1: 0x654
- stack 0: 0x1A
2909	 C4	PUSH2	0060	 	 
- stack 2: 0x654
- stack 1: 0x1A
- stack 0: 0x60
2910	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x654
2911	 C8	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
2912	 CA	ADD		 	 
- stack 0: 0x658
2913	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
2914	 CC	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x40E0000040E0000033200000351000103700002038AFFE000D1001A00EB0016
2915	 CD	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x40E0000040E0000033200000351000103700002038AFFE000D1001A00EB0016
- stack 0: 0xF0
2916	 CF	SHR		 	 
- stack 1: 0x658
- stack 0: 0x40E
2917	 D0	JUMP		 	 
- stack 0: 0x658
2918	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x658
2919	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
2920	 410	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x40E0000040E0000033200000351000103700002038AFFE000D1001A00EB0016
2921	 411	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x40E0000040E0000033200000351000103700002038AFFE000D1001A00EB0016
- stack 0: 0xE0
2922	 413	SHR		 	 
- stack 1: 0x658
- stack 0: 0x40E0000
2923	 414	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x40E0000
- stack 0: 0xFFFF
2924	 417	AND		 	 
- stack 1: 0x658
- stack 0: 0x0
2925	 418	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x1
2926	 41A	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x0
2927	 41B	POP		 	 
- stack 0: 0x658
2928	 41C	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
2929	 41E	ADD		 	 
- stack 0: 0x65C
2930	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
2931	 420	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x40E0000033200000351000103700002038AFFE000D1001A00EB001603CC0278
2932	 421	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x40E0000033200000351000103700002038AFFE000D1001A00EB001603CC0278
- stack 0: 0xF0
2933	 423	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x40E
2934	 424	JUMP		 	 
- stack 0: 0x65C
2935	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x65C
2936	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
2937	 410	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x40E0000033200000351000103700002038AFFE000D1001A00EB001603CC0278
2938	 411	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x40E0000033200000351000103700002038AFFE000D1001A00EB001603CC0278
- stack 0: 0xE0
2939	 413	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x40E0000
2940	 414	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x40E0000
- stack 0: 0xFFFF
2941	 417	AND		 	 
- stack 1: 0x65C
- stack 0: 0x0
2942	 418	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x1
2943	 41A	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x0
2944	 41B	POP		 	 
- stack 0: 0x65C
2945	 41C	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
2946	 41E	ADD		 	 
- stack 0: 0x660
2947	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
2948	 420	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x33200000351000103700002038AFFE000D1001A00EB001603CC027803180000
2949	 421	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x33200000351000103700002038AFFE000D1001A00EB001603CC027803180000
- stack 0: 0xF0
2950	 423	SHR		 	 
- stack 1: 0x660
- stack 0: 0x332
2951	 424	JUMP		 	 
- stack 0: 0x660
2952	 332	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x660
2953	 333	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
2954	 334	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x33200000351000103700002038AFFE000D1001A00EB001603CC027803180000
2955	 335	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x33200000351000103700002038AFFE000D1001A00EB001603CC027803180000
- stack 0: 0xE0
2956	 337	SHR		 	 
- stack 1: 0x660
- stack 0: 0x3320000
2957	 338	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x3320000
- stack 0: 0xFFFF
2958	 33B	AND		 	 
- stack 1: 0x660
- stack 0: 0x0
2959	 33C	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x1
2960	 33E	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0x0
2961	 33F	PUSH2	0060	 	 
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x60
2962	 342	MLOAD		 	  ;; # read from x3
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x1A
2963	 343	ADD		 	  ;; # ADDI 3
- stack 1: 0x660
- stack 0: 0x1A
2964	 344	PUSH2	00C0	 	 
- stack 2: 0x660
- stack 1: 0x1A
- stack 0: 0xC0
2965	 347	MSTORE		 	  ;; # store to x6
- stack 0: 0x660
2966	 348	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
2967	 34A	ADD		 	 
- stack 0: 0x664
2968	 34B	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
2969	 34C	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x351000103700002038AFFE000D1001A00EB001603CC0278031800000086000D
2970	 34D	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x351000103700002038AFFE000D1001A00EB001603CC0278031800000086000D
- stack 0: 0xF0
2971	 34F	SHR		 	 
- stack 1: 0x664
- stack 0: 0x351
2972	 350	JUMP		 	 
- stack 0: 0x664
2973	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x664
2974	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
2975	 353	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x351000103700002038AFFE000D1001A00EB001603CC0278031800000086000D
2976	 354	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x351000103700002038AFFE000D1001A00EB001603CC0278031800000086000D
- stack 0: 0xE0
2977	 356	SHR		 	 
- stack 1: 0x664
- stack 0: 0x3510001
2978	 357	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x3510001
- stack 0: 0xFFFF
2979	 35A	AND		 	 
- stack 1: 0x664
- stack 0: 0x1
2980	 35B	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x1
- stack 0: 0x1
2981	 35D	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x1
2982	 35E	PUSH2	0080	 	 
- stack 2: 0x664
- stack 1: 0x1
- stack 0: 0x80
2983	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x664
- stack 1: 0x1
- stack 0: 0x0
2984	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x664
- stack 0: 0x1
2985	 363	PUSH2	0080	 	 
- stack 2: 0x664
- stack 1: 0x1
- stack 0: 0x80
2986	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x664
2987	 367	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
2988	 369	ADD		 	 
- stack 0: 0x668
2989	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
2990	 36B	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x3700002038AFFE000D1001A00EB001603CC0278031800000086000D00A0000B
2991	 36C	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x3700002038AFFE000D1001A00EB001603CC0278031800000086000D00A0000B
- stack 0: 0xF0
2992	 36E	SHR		 	 
- stack 1: 0x668
- stack 0: 0x370
2993	 36F	JUMP		 	 
- stack 0: 0x668
2994	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x668
2995	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
2996	 372	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x3700002038AFFE000D1001A00EB001603CC0278031800000086000D00A0000B
2997	 373	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x3700002038AFFE000D1001A00EB001603CC0278031800000086000D00A0000B
- stack 0: 0xE0
2998	 375	SHR		 	 
- stack 1: 0x668
- stack 0: 0x3700002
2999	 376	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x3700002
- stack 0: 0xFFFF
3000	 379	AND		 	 
- stack 1: 0x668
- stack 0: 0x2
3001	 37A	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0x2
- stack 0: 0x1
3002	 37C	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0x2
3003	 37D	PUSH2	00A0	 	 
- stack 2: 0x668
- stack 1: 0x2
- stack 0: 0xA0
3004	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x668
3005	 381	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3006	 383	ADD		 	 
- stack 0: 0x66C
3007	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3008	 385	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x38AFFE000D1001A00EB001603CC0278031800000086000D00A0000B00BA0000
3009	 386	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x38AFFE000D1001A00EB001603CC0278031800000086000D00A0000B00BA0000
- stack 0: 0xF0
3010	 388	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x38A
3011	 389	JUMP		 	 
- stack 0: 0x66C
3012	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x66C
3013	 38B	PUSH2	0080	 	 
- stack 1: 0x66C
- stack 0: 0x80
3014	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x66C
- stack 0: 0x1
3015	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3016	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x66C
- stack 0: 0x1
3017	 395	PUSH2	00A0	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0xA0
3018	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x2
3019	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x66C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3020	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x2
3021	 39F	SUB		 	 
- stack 1: 0x66C
- stack 0: 0x1
3022	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x3A8
3023	 3A3	JUMPI		 	 
- stack 0: 0x66C
3024	 3A8	JUMPDEST		 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x66C
3025	 3A9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
3026	 3AA	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x38AFFE000D1001A00EB001603CC0278031800000086000D00A0000B00BA0000
3027	 3AB	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x38AFFE000D1001A00EB001603CC0278031800000086000D00A0000B00BA0000
- stack 0: 0xE0
3028	 3AD	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x38AFFE0
3029	 3AE	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x38AFFE0
- stack 0: 0xFFFF
3030	 3B1	AND		 	 
- stack 1: 0x66C
- stack 0: 0xFFE0
3031	 3B2	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0xFFE0
- stack 0: 0x1
3032	 3B4	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3033	 3B5	ADD		 	 
- stack 0: 0x64C
3034	 3B6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x64C
- stack 0: 0xFFFFFFFF
3035	 3BB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x64C
3036	 3BC	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3037	 3BD	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x86000F00A0000B00BA0000040E0000040E0000033200000351000103700002
3038	 3BE	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x86000F00A0000B00BA0000040E0000040E0000033200000351000103700002
- stack 0: 0xF0
3039	 3C0	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x86
3040	 3C1	JUMP		 	 
- stack 0: 0x64C
3041	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x64C
3042	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3043	 88	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x86000F00A0000B00BA0000040E0000040E0000033200000351000103700002
3044	 89	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x86000F00A0000B00BA0000040E0000040E0000033200000351000103700002
- stack 0: 0xE0
3045	 8B	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x86000F
3046	 8C	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x86000F
- stack 0: 0xFFFF
3047	 8F	AND		 	 
- stack 1: 0x64C
- stack 0: 0xF
3048	 90	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0xF
- stack 0: 0x1
3049	 92	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0xF
3050	 93	PUSH2	0020	 	 
- stack 2: 0x64C
- stack 1: 0xF
- stack 0: 0x20
3051	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x64C
3052	 97	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3053	 99	ADD		 	 
- stack 0: 0x650
3054	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3055	 9B	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0xA0000B00BA0000040E0000040E0000033200000351000103700002038AFFE0
3056	 9C	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0xA0000B00BA0000040E0000040E0000033200000351000103700002038AFFE0
- stack 0: 0xF0
3057	 9E	SHR		 	 
- stack 1: 0x650
- stack 0: 0xA0
3058	 9F	JUMP		 	 
- stack 0: 0x650
3059	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x650
3060	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3061	 A2	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0xA0000B00BA0000040E0000040E0000033200000351000103700002038AFFE0
3062	 A3	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0xA0000B00BA0000040E0000040E0000033200000351000103700002038AFFE0
- stack 0: 0xE0
3063	 A5	SHR		 	 
- stack 1: 0x650
- stack 0: 0xA0000B
3064	 A6	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0xA0000B
- stack 0: 0xFFFF
3065	 A9	AND		 	 
- stack 1: 0x650
- stack 0: 0xB
3066	 AA	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0xB
- stack 0: 0x1
3067	 AC	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0xB
3068	 AD	PUSH2	0040	 	 
- stack 2: 0x650
- stack 1: 0xB
- stack 0: 0x40
3069	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x650
3070	 B1	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3071	 B3	ADD		 	 
- stack 0: 0x654
3072	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3073	 B5	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0xBA0000040E0000040E0000033200000351000103700002038AFFE000D1001A
3074	 B6	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0xBA0000040E0000040E0000033200000351000103700002038AFFE000D1001A
- stack 0: 0xF0
3075	 B8	SHR		 	 
- stack 1: 0x654
- stack 0: 0xBA
3076	 B9	JUMP		 	 
- stack 0: 0x654
3077	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x654
3078	 BB	PUSH2	0020	 	 
- stack 1: 0x654
- stack 0: 0x20
3079	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x654
- stack 0: 0xF
3080	 BF	PUSH2	0040	 	 
- stack 2: 0x654
- stack 1: 0xF
- stack 0: 0x40
3081	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x654
- stack 1: 0xF
- stack 0: 0xB
3082	 C3	ADD		 	 
- stack 1: 0x654
- stack 0: 0x1A
3083	 C4	PUSH2	0060	 	 
- stack 2: 0x654
- stack 1: 0x1A
- stack 0: 0x60
3084	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x654
3085	 C8	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3086	 CA	ADD		 	 
- stack 0: 0x658
3087	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3088	 CC	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x40E0000040E0000033200000351000103700002038AFFE000D1001A00EB0016
3089	 CD	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x40E0000040E0000033200000351000103700002038AFFE000D1001A00EB0016
- stack 0: 0xF0
3090	 CF	SHR		 	 
- stack 1: 0x658
- stack 0: 0x40E
3091	 D0	JUMP		 	 
- stack 0: 0x658
3092	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x658
3093	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3094	 410	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x40E0000040E0000033200000351000103700002038AFFE000D1001A00EB0016
3095	 411	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x40E0000040E0000033200000351000103700002038AFFE000D1001A00EB0016
- stack 0: 0xE0
3096	 413	SHR		 	 
- stack 1: 0x658
- stack 0: 0x40E0000
3097	 414	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x40E0000
- stack 0: 0xFFFF
3098	 417	AND		 	 
- stack 1: 0x658
- stack 0: 0x0
3099	 418	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x1
3100	 41A	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x0
3101	 41B	POP		 	 
- stack 0: 0x658
3102	 41C	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3103	 41E	ADD		 	 
- stack 0: 0x65C
3104	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3105	 420	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x40E0000033200000351000103700002038AFFE000D1001A00EB001603CC0278
3106	 421	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x40E0000033200000351000103700002038AFFE000D1001A00EB001603CC0278
- stack 0: 0xF0
3107	 423	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x40E
3108	 424	JUMP		 	 
- stack 0: 0x65C
3109	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x65C
3110	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3111	 410	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x40E0000033200000351000103700002038AFFE000D1001A00EB001603CC0278
3112	 411	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x40E0000033200000351000103700002038AFFE000D1001A00EB001603CC0278
- stack 0: 0xE0
3113	 413	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x40E0000
3114	 414	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x40E0000
- stack 0: 0xFFFF
3115	 417	AND		 	 
- stack 1: 0x65C
- stack 0: 0x0
3116	 418	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x1
3117	 41A	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x0
3118	 41B	POP		 	 
- stack 0: 0x65C
3119	 41C	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3120	 41E	ADD		 	 
- stack 0: 0x660
3121	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3122	 420	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x33200000351000103700002038AFFE000D1001A00EB001603CC027803180000
3123	 421	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x33200000351000103700002038AFFE000D1001A00EB001603CC027803180000
- stack 0: 0xF0
3124	 423	SHR		 	 
- stack 1: 0x660
- stack 0: 0x332
3125	 424	JUMP		 	 
- stack 0: 0x660
3126	 332	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x660
3127	 333	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
3128	 334	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x33200000351000103700002038AFFE000D1001A00EB001603CC027803180000
3129	 335	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x33200000351000103700002038AFFE000D1001A00EB001603CC027803180000
- stack 0: 0xE0
3130	 337	SHR		 	 
- stack 1: 0x660
- stack 0: 0x3320000
3131	 338	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x3320000
- stack 0: 0xFFFF
3132	 33B	AND		 	 
- stack 1: 0x660
- stack 0: 0x0
3133	 33C	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x1
3134	 33E	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0x0
3135	 33F	PUSH2	0060	 	 
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x60
3136	 342	MLOAD		 	  ;; # read from x3
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x1A
3137	 343	ADD		 	  ;; # ADDI 3
- stack 1: 0x660
- stack 0: 0x1A
3138	 344	PUSH2	00C0	 	 
- stack 2: 0x660
- stack 1: 0x1A
- stack 0: 0xC0
3139	 347	MSTORE		 	  ;; # store to x6
- stack 0: 0x660
3140	 348	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3141	 34A	ADD		 	 
- stack 0: 0x664
3142	 34B	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3143	 34C	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x351000103700002038AFFE000D1001A00EB001603CC0278031800000086000D
3144	 34D	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x351000103700002038AFFE000D1001A00EB001603CC0278031800000086000D
- stack 0: 0xF0
3145	 34F	SHR		 	 
- stack 1: 0x664
- stack 0: 0x351
3146	 350	JUMP		 	 
- stack 0: 0x664
3147	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x664
3148	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
3149	 353	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x351000103700002038AFFE000D1001A00EB001603CC0278031800000086000D
3150	 354	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x351000103700002038AFFE000D1001A00EB001603CC0278031800000086000D
- stack 0: 0xE0
3151	 356	SHR		 	 
- stack 1: 0x664
- stack 0: 0x3510001
3152	 357	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x3510001
- stack 0: 0xFFFF
3153	 35A	AND		 	 
- stack 1: 0x664
- stack 0: 0x1
3154	 35B	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x1
- stack 0: 0x1
3155	 35D	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x1
3156	 35E	PUSH2	0080	 	 
- stack 2: 0x664
- stack 1: 0x1
- stack 0: 0x80
3157	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x664
- stack 1: 0x1
- stack 0: 0x1
3158	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x664
- stack 0: 0x2
3159	 363	PUSH2	0080	 	 
- stack 2: 0x664
- stack 1: 0x2
- stack 0: 0x80
3160	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x664
3161	 367	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3162	 369	ADD		 	 
- stack 0: 0x668
3163	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3164	 36B	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x3700002038AFFE000D1001A00EB001603CC0278031800000086000D00A0000B
3165	 36C	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x3700002038AFFE000D1001A00EB001603CC0278031800000086000D00A0000B
- stack 0: 0xF0
3166	 36E	SHR		 	 
- stack 1: 0x668
- stack 0: 0x370
3167	 36F	JUMP		 	 
- stack 0: 0x668
3168	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x668
3169	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
3170	 372	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x3700002038AFFE000D1001A00EB001603CC0278031800000086000D00A0000B
3171	 373	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x3700002038AFFE000D1001A00EB001603CC0278031800000086000D00A0000B
- stack 0: 0xE0
3172	 375	SHR		 	 
- stack 1: 0x668
- stack 0: 0x3700002
3173	 376	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x3700002
- stack 0: 0xFFFF
3174	 379	AND		 	 
- stack 1: 0x668
- stack 0: 0x2
3175	 37A	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0x2
- stack 0: 0x1
3176	 37C	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0x2
3177	 37D	PUSH2	00A0	 	 
- stack 2: 0x668
- stack 1: 0x2
- stack 0: 0xA0
3178	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x668
3179	 381	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3180	 383	ADD		 	 
- stack 0: 0x66C
3181	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3182	 385	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x38AFFE000D1001A00EB001603CC0278031800000086000D00A0000B00BA0000
3183	 386	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x38AFFE000D1001A00EB001603CC0278031800000086000D00A0000B00BA0000
- stack 0: 0xF0
3184	 388	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x38A
3185	 389	JUMP		 	 
- stack 0: 0x66C
3186	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x66C
3187	 38B	PUSH2	0080	 	 
- stack 1: 0x66C
- stack 0: 0x80
3188	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x66C
- stack 0: 0x2
3189	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x66C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3190	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x66C
- stack 0: 0x2
3191	 395	PUSH2	00A0	 	 
- stack 2: 0x66C
- stack 1: 0x2
- stack 0: 0xA0
3192	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x66C
- stack 1: 0x2
- stack 0: 0x2
3193	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x66C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3194	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x66C
- stack 1: 0x2
- stack 0: 0x2
3195	 39F	SUB		 	 
- stack 1: 0x66C
- stack 0: 0x0
3196	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x3A8
3197	 3A3	JUMPI		 	 
- stack 0: 0x66C
3198	 3A4	PUSH2	03C2	 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 1: 0x66C
- stack 0: 0x3C2
3199	 3A7	JUMP		 	 
- stack 0: 0x66C
3200	 3C2	JUMPDEST		 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x66C
3201	 3C3	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3202	 3C5	ADD		 	 
- stack 0: 0x670
3203	 3C6	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3204	 3C7	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xD1001A00EB001603CC0278031800000086000D00A0000B00BA000003510001
3205	 3C8	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0xD1001A00EB001603CC0278031800000086000D00A0000B00BA000003510001
- stack 0: 0xF0
3206	 3CA	SHR		 	 
- stack 1: 0x670
- stack 0: 0xD1
3207	 3CB	JUMP		 	 
- stack 0: 0x670
3208	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x670
3209	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
3210	 D3	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xD1001A00EB001603CC0278031800000086000D00A0000B00BA000003510001
3211	 D4	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0xD1001A00EB001603CC0278031800000086000D00A0000B00BA000003510001
- stack 0: 0xE0
3212	 D6	SHR		 	 
- stack 1: 0x670
- stack 0: 0xD1001A
3213	 D7	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0xD1001A
- stack 0: 0xFFFF
3214	 DA	AND		 	 
- stack 1: 0x670
- stack 0: 0x1A
3215	 DB	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x1A
- stack 0: 0x1
3216	 DD	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x1A
3217	 DE	PUSH2	03A0	 	 
- stack 2: 0x670
- stack 1: 0x1A
- stack 0: 0x3A0
3218	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x670
3219	 E2	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3220	 E4	ADD		 	 
- stack 0: 0x674
3221	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3222	 E6	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xEB001603CC0278031800000086000D00A0000B00BA00000351000103700002
3223	 E7	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0xEB001603CC0278031800000086000D00A0000B00BA00000351000103700002
- stack 0: 0xF0
3224	 E9	SHR		 	 
- stack 1: 0x674
- stack 0: 0xEB
3225	 EA	JUMP		 	 
- stack 0: 0x674
3226	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x674
3227	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
3228	 ED	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xEB001603CC0278031800000086000D00A0000B00BA00000351000103700002
3229	 EE	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0xEB001603CC0278031800000086000D00A0000B00BA00000351000103700002
- stack 0: 0xE0
3230	 F0	SHR		 	 
- stack 1: 0x674
- stack 0: 0xEB0016
3231	 F1	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0xEB0016
- stack 0: 0xFFFF
3232	 F4	AND		 	 
- stack 1: 0x674
- stack 0: 0x16
3233	 F5	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x16
- stack 0: 0x1
3234	 F7	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x16
3235	 F8	PUSH2	0380	 	 
- stack 2: 0x674
- stack 1: 0x16
- stack 0: 0x380
3236	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x674
3237	 FC	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3238	 FE	ADD		 	 
- stack 0: 0x678
3239	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3240	 100	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x3CC0278031800000086000D00A0000B00BA00000351000103700002038AFFEC
3241	 101	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x3CC0278031800000086000D00A0000B00BA00000351000103700002038AFFEC
- stack 0: 0xF0
3242	 103	SHR		 	 
- stack 1: 0x678
- stack 0: 0x3CC
3243	 104	JUMP		 	 
- stack 0: 0x678
3244	 3CC	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,2dc(ignore imm)
- stack 0: 0x678
3245	 3CD	PUSH2	00C0	 	 
- stack 1: 0x678
- stack 0: 0xC0
3246	 3D0	MLOAD		 	  ;; # read from x6
- stack 1: 0x678
- stack 0: 0x1A
3247	 3D1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x678
- stack 1: 0x1A
- stack 0: 0xFFFFFFFF
3248	 3D6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x678
- stack 0: 0x1A
3249	 3D7	PUSH2	03A0	 	 
- stack 2: 0x678
- stack 1: 0x1A
- stack 0: 0x3A0
3250	 3DA	MLOAD		 	  ;; # read from x29
- stack 2: 0x678
- stack 1: 0x1A
- stack 0: 0x1A
3251	 3DB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x678
- stack 2: 0x1A
- stack 1: 0x1A
- stack 0: 0xFFFFFFFF
3252	 3E0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x678
- stack 1: 0x1A
- stack 0: 0x1A
3253	 3E1	SUB		 	 
- stack 1: 0x678
- stack 0: 0x0
3254	 3E2	PUSH2	03EA	 ;; _neq_b949c6f088610fa010606a3bfa6458684d29413528a0182a7a7d4d25e2c29dcf	 
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0x3EA
3255	 3E5	JUMPI		 	 
- stack 0: 0x678
3256	 3E6	PUSH2	0404	 ;; _neq_after_b949c6f088610fa010606a3bfa6458684d29413528a0182a7a7d4d25e2c29dcf	 
- stack 1: 0x678
- stack 0: 0x404
3257	 3E9	JUMP		 	 
- stack 0: 0x678
3258	 404	JUMPDEST		 ;; _neq_after_b949c6f088610fa010606a3bfa6458684d29413528a0182a7a7d4d25e2c29dcf	 
- stack 0: 0x678
3259	 405	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3260	 407	ADD		 	 
- stack 0: 0x67C
3261	 408	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3262	 409	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x31800000086000D00A0000B00BA00000351000103700002038AFFEC00D10018
3263	 40A	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x31800000086000D00A0000B00BA00000351000103700002038AFFEC00D10018
- stack 0: 0xF0
3264	 40C	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x318
3265	 40D	JUMP		 	 
- stack 0: 0x67C
3266	 318	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x67C
3267	 319	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
3268	 31A	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x31800000086000D00A0000B00BA00000351000103700002038AFFEC00D10018
3269	 31B	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x31800000086000D00A0000B00BA00000351000103700002038AFFEC00D10018
- stack 0: 0xE0
3270	 31D	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x3180000
3271	 31E	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x3180000
- stack 0: 0xFFFF
3272	 321	AND		 	 
- stack 1: 0x67C
- stack 0: 0x0
3273	 322	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x1
3274	 324	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x0
3275	 325	PUSH2	0080	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x80
3276	 328	MSTORE		 	  ;; # store to x4
- stack 0: 0x67C
3277	 329	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3278	 32B	ADD		 	 
- stack 0: 0x680
3279	 32C	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3280	 32D	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x86000D00A0000B00BA00000351000103700002038AFFEC00D1001800EB0017
3281	 32E	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x86000D00A0000B00BA00000351000103700002038AFFEC00D1001800EB0017
- stack 0: 0xF0
3282	 330	SHR		 	 
- stack 1: 0x680
- stack 0: 0x86
3283	 331	JUMP		 	 
- stack 0: 0x680
3284	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x680
3285	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
3286	 88	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x86000D00A0000B00BA00000351000103700002038AFFEC00D1001800EB0017
3287	 89	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x86000D00A0000B00BA00000351000103700002038AFFEC00D1001800EB0017
- stack 0: 0xE0
3288	 8B	SHR		 	 
- stack 1: 0x680
- stack 0: 0x86000D
3289	 8C	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x86000D
- stack 0: 0xFFFF
3290	 8F	AND		 	 
- stack 1: 0x680
- stack 0: 0xD
3291	 90	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0xD
- stack 0: 0x1
3292	 92	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0xD
3293	 93	PUSH2	0020	 	 
- stack 2: 0x680
- stack 1: 0xD
- stack 0: 0x20
3294	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x680
3295	 97	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
3296	 99	ADD		 	 
- stack 0: 0x684
3297	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
3298	 9B	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xA0000B00BA00000351000103700002038AFFEC00D1001800EB001701050250
3299	 9C	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0xA0000B00BA00000351000103700002038AFFEC00D1001800EB001701050250
- stack 0: 0xF0
3300	 9E	SHR		 	 
- stack 1: 0x684
- stack 0: 0xA0
3301	 9F	JUMP		 	 
- stack 0: 0x684
3302	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x684
3303	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
3304	 A2	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xA0000B00BA00000351000103700002038AFFEC00D1001800EB001701050250
3305	 A3	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0xA0000B00BA00000351000103700002038AFFEC00D1001800EB001701050250
- stack 0: 0xE0
3306	 A5	SHR		 	 
- stack 1: 0x684
- stack 0: 0xA0000B
3307	 A6	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0xA0000B
- stack 0: 0xFFFF
3308	 A9	AND		 	 
- stack 1: 0x684
- stack 0: 0xB
3309	 AA	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0xB
- stack 0: 0x1
3310	 AC	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0xB
3311	 AD	PUSH2	0040	 	 
- stack 2: 0x684
- stack 1: 0xB
- stack 0: 0x40
3312	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x684
3313	 B1	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
3314	 B3	ADD		 	 
- stack 0: 0x688
3315	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
3316	 B5	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0xBA00000351000103700002038AFFEC00D1001800EB00170105025003180000
3317	 B6	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0xBA00000351000103700002038AFFEC00D1001800EB00170105025003180000
- stack 0: 0xF0
3318	 B8	SHR		 	 
- stack 1: 0x688
- stack 0: 0xBA
3319	 B9	JUMP		 	 
- stack 0: 0x688
3320	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x688
3321	 BB	PUSH2	0020	 	 
- stack 1: 0x688
- stack 0: 0x20
3322	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x688
- stack 0: 0xD
3323	 BF	PUSH2	0040	 	 
- stack 2: 0x688
- stack 1: 0xD
- stack 0: 0x40
3324	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x688
- stack 1: 0xD
- stack 0: 0xB
3325	 C3	ADD		 	 
- stack 1: 0x688
- stack 0: 0x18
3326	 C4	PUSH2	0060	 	 
- stack 2: 0x688
- stack 1: 0x18
- stack 0: 0x60
3327	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x688
3328	 C8	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
3329	 CA	ADD		 	 
- stack 0: 0x68C
3330	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
3331	 CC	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x351000103700002038AFFEC00D1001800EB001701050250031800000086000E
3332	 CD	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x351000103700002038AFFEC00D1001800EB001701050250031800000086000E
- stack 0: 0xF0
3333	 CF	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x351
3334	 D0	JUMP		 	 
- stack 0: 0x68C
3335	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x68C
3336	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
3337	 353	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x351000103700002038AFFEC00D1001800EB001701050250031800000086000E
3338	 354	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x351000103700002038AFFEC00D1001800EB001701050250031800000086000E
- stack 0: 0xE0
3339	 356	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x3510001
3340	 357	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x3510001
- stack 0: 0xFFFF
3341	 35A	AND		 	 
- stack 1: 0x68C
- stack 0: 0x1
3342	 35B	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0x1
- stack 0: 0x1
3343	 35D	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0x1
3344	 35E	PUSH2	0080	 	 
- stack 2: 0x68C
- stack 1: 0x1
- stack 0: 0x80
3345	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x68C
- stack 1: 0x1
- stack 0: 0x0
3346	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x68C
- stack 0: 0x1
3347	 363	PUSH2	0080	 	 
- stack 2: 0x68C
- stack 1: 0x1
- stack 0: 0x80
3348	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x68C
3349	 367	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
3350	 369	ADD		 	 
- stack 0: 0x690
3351	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
3352	 36B	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x3700002038AFFEC00D1001800EB001701050250031800000086000E00A0000B
3353	 36C	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x3700002038AFFEC00D1001800EB001701050250031800000086000E00A0000B
- stack 0: 0xF0
3354	 36E	SHR		 	 
- stack 1: 0x690
- stack 0: 0x370
3355	 36F	JUMP		 	 
- stack 0: 0x690
3356	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x690
3357	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
3358	 372	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x3700002038AFFEC00D1001800EB001701050250031800000086000E00A0000B
3359	 373	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x3700002038AFFEC00D1001800EB001701050250031800000086000E00A0000B
- stack 0: 0xE0
3360	 375	SHR		 	 
- stack 1: 0x690
- stack 0: 0x3700002
3361	 376	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x3700002
- stack 0: 0xFFFF
3362	 379	AND		 	 
- stack 1: 0x690
- stack 0: 0x2
3363	 37A	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0x2
- stack 0: 0x1
3364	 37C	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0x2
3365	 37D	PUSH2	00A0	 	 
- stack 2: 0x690
- stack 1: 0x2
- stack 0: 0xA0
3366	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x690
3367	 381	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
3368	 383	ADD		 	 
- stack 0: 0x694
3369	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
3370	 385	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x38AFFEC00D1001800EB001701050250031800000086000E00A0000B040E0000
3371	 386	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x38AFFEC00D1001800EB001701050250031800000086000E00A0000B040E0000
- stack 0: 0xF0
3372	 388	SHR		 	 
- stack 1: 0x694
- stack 0: 0x38A
3373	 389	JUMP		 	 
- stack 0: 0x694
3374	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x694
3375	 38B	PUSH2	0080	 	 
- stack 1: 0x694
- stack 0: 0x80
3376	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x694
- stack 0: 0x1
3377	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3378	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x694
- stack 0: 0x1
3379	 395	PUSH2	00A0	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0xA0
3380	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x2
3381	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x694
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3382	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x2
3383	 39F	SUB		 	 
- stack 1: 0x694
- stack 0: 0x1
3384	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x3A8
3385	 3A3	JUMPI		 	 
- stack 0: 0x694
3386	 3A8	JUMPDEST		 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x694
3387	 3A9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
3388	 3AA	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x38AFFEC00D1001800EB001701050250031800000086000E00A0000B040E0000
3389	 3AB	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x38AFFEC00D1001800EB001701050250031800000086000E00A0000B040E0000
- stack 0: 0xE0
3390	 3AD	SHR		 	 
- stack 1: 0x694
- stack 0: 0x38AFFEC
3391	 3AE	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x38AFFEC
- stack 0: 0xFFFF
3392	 3B1	AND		 	 
- stack 1: 0x694
- stack 0: 0xFFEC
3393	 3B2	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0xFFEC
- stack 0: 0x1
3394	 3B4	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
3395	 3B5	ADD		 	 
- stack 0: 0x680
3396	 3B6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x680
- stack 0: 0xFFFFFFFF
3397	 3BB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x680
3398	 3BC	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3399	 3BD	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x86000D00A0000B00BA00000351000103700002038AFFEC00D1001800EB0017
3400	 3BE	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x86000D00A0000B00BA00000351000103700002038AFFEC00D1001800EB0017
- stack 0: 0xF0
3401	 3C0	SHR		 	 
- stack 1: 0x680
- stack 0: 0x86
3402	 3C1	JUMP		 	 
- stack 0: 0x680
3403	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x680
3404	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
3405	 88	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x86000D00A0000B00BA00000351000103700002038AFFEC00D1001800EB0017
3406	 89	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x86000D00A0000B00BA00000351000103700002038AFFEC00D1001800EB0017
- stack 0: 0xE0
3407	 8B	SHR		 	 
- stack 1: 0x680
- stack 0: 0x86000D
3408	 8C	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x86000D
- stack 0: 0xFFFF
3409	 8F	AND		 	 
- stack 1: 0x680
- stack 0: 0xD
3410	 90	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0xD
- stack 0: 0x1
3411	 92	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0xD
3412	 93	PUSH2	0020	 	 
- stack 2: 0x680
- stack 1: 0xD
- stack 0: 0x20
3413	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x680
3414	 97	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
3415	 99	ADD		 	 
- stack 0: 0x684
3416	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
3417	 9B	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xA0000B00BA00000351000103700002038AFFEC00D1001800EB001701050250
3418	 9C	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0xA0000B00BA00000351000103700002038AFFEC00D1001800EB001701050250
- stack 0: 0xF0
3419	 9E	SHR		 	 
- stack 1: 0x684
- stack 0: 0xA0
3420	 9F	JUMP		 	 
- stack 0: 0x684
3421	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x684
3422	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
3423	 A2	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xA0000B00BA00000351000103700002038AFFEC00D1001800EB001701050250
3424	 A3	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0xA0000B00BA00000351000103700002038AFFEC00D1001800EB001701050250
- stack 0: 0xE0
3425	 A5	SHR		 	 
- stack 1: 0x684
- stack 0: 0xA0000B
3426	 A6	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0xA0000B
- stack 0: 0xFFFF
3427	 A9	AND		 	 
- stack 1: 0x684
- stack 0: 0xB
3428	 AA	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0xB
- stack 0: 0x1
3429	 AC	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0xB
3430	 AD	PUSH2	0040	 	 
- stack 2: 0x684
- stack 1: 0xB
- stack 0: 0x40
3431	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x684
3432	 B1	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
3433	 B3	ADD		 	 
- stack 0: 0x688
3434	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
3435	 B5	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0xBA00000351000103700002038AFFEC00D1001800EB00170105025003180000
3436	 B6	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0xBA00000351000103700002038AFFEC00D1001800EB00170105025003180000
- stack 0: 0xF0
3437	 B8	SHR		 	 
- stack 1: 0x688
- stack 0: 0xBA
3438	 B9	JUMP		 	 
- stack 0: 0x688
3439	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x688
3440	 BB	PUSH2	0020	 	 
- stack 1: 0x688
- stack 0: 0x20
3441	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x688
- stack 0: 0xD
3442	 BF	PUSH2	0040	 	 
- stack 2: 0x688
- stack 1: 0xD
- stack 0: 0x40
3443	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x688
- stack 1: 0xD
- stack 0: 0xB
3444	 C3	ADD		 	 
- stack 1: 0x688
- stack 0: 0x18
3445	 C4	PUSH2	0060	 	 
- stack 2: 0x688
- stack 1: 0x18
- stack 0: 0x60
3446	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x688
3447	 C8	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
3448	 CA	ADD		 	 
- stack 0: 0x68C
3449	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
3450	 CC	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x351000103700002038AFFEC00D1001800EB001701050250031800000086000E
3451	 CD	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x351000103700002038AFFEC00D1001800EB001701050250031800000086000E
- stack 0: 0xF0
3452	 CF	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x351
3453	 D0	JUMP		 	 
- stack 0: 0x68C
3454	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x68C
3455	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
3456	 353	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x351000103700002038AFFEC00D1001800EB001701050250031800000086000E
3457	 354	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x351000103700002038AFFEC00D1001800EB001701050250031800000086000E
- stack 0: 0xE0
3458	 356	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x3510001
3459	 357	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x3510001
- stack 0: 0xFFFF
3460	 35A	AND		 	 
- stack 1: 0x68C
- stack 0: 0x1
3461	 35B	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0x1
- stack 0: 0x1
3462	 35D	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0x1
3463	 35E	PUSH2	0080	 	 
- stack 2: 0x68C
- stack 1: 0x1
- stack 0: 0x80
3464	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x68C
- stack 1: 0x1
- stack 0: 0x1
3465	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x68C
- stack 0: 0x2
3466	 363	PUSH2	0080	 	 
- stack 2: 0x68C
- stack 1: 0x2
- stack 0: 0x80
3467	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x68C
3468	 367	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
3469	 369	ADD		 	 
- stack 0: 0x690
3470	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
3471	 36B	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x3700002038AFFEC00D1001800EB001701050250031800000086000E00A0000B
3472	 36C	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x3700002038AFFEC00D1001800EB001701050250031800000086000E00A0000B
- stack 0: 0xF0
3473	 36E	SHR		 	 
- stack 1: 0x690
- stack 0: 0x370
3474	 36F	JUMP		 	 
- stack 0: 0x690
3475	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x690
3476	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
3477	 372	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x3700002038AFFEC00D1001800EB001701050250031800000086000E00A0000B
3478	 373	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x3700002038AFFEC00D1001800EB001701050250031800000086000E00A0000B
- stack 0: 0xE0
3479	 375	SHR		 	 
- stack 1: 0x690
- stack 0: 0x3700002
3480	 376	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x3700002
- stack 0: 0xFFFF
3481	 379	AND		 	 
- stack 1: 0x690
- stack 0: 0x2
3482	 37A	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0x2
- stack 0: 0x1
3483	 37C	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0x2
3484	 37D	PUSH2	00A0	 	 
- stack 2: 0x690
- stack 1: 0x2
- stack 0: 0xA0
3485	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x690
3486	 381	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
3487	 383	ADD		 	 
- stack 0: 0x694
3488	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
3489	 385	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x38AFFEC00D1001800EB001701050250031800000086000E00A0000B040E0000
3490	 386	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x38AFFEC00D1001800EB001701050250031800000086000E00A0000B040E0000
- stack 0: 0xF0
3491	 388	SHR		 	 
- stack 1: 0x694
- stack 0: 0x38A
3492	 389	JUMP		 	 
- stack 0: 0x694
3493	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x694
3494	 38B	PUSH2	0080	 	 
- stack 1: 0x694
- stack 0: 0x80
3495	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x694
- stack 0: 0x2
3496	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x694
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3497	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x694
- stack 0: 0x2
3498	 395	PUSH2	00A0	 	 
- stack 2: 0x694
- stack 1: 0x2
- stack 0: 0xA0
3499	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x694
- stack 1: 0x2
- stack 0: 0x2
3500	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x694
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3501	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x694
- stack 1: 0x2
- stack 0: 0x2
3502	 39F	SUB		 	 
- stack 1: 0x694
- stack 0: 0x0
3503	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x3A8
3504	 3A3	JUMPI		 	 
- stack 0: 0x694
3505	 3A4	PUSH2	03C2	 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 1: 0x694
- stack 0: 0x3C2
3506	 3A7	JUMP		 	 
- stack 0: 0x694
3507	 3C2	JUMPDEST		 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x694
3508	 3C3	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
3509	 3C5	ADD		 	 
- stack 0: 0x698
3510	 3C6	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
3511	 3C7	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0xD1001800EB001701050250031800000086000E00A0000B040E000000BA0000
3512	 3C8	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0xD1001800EB001701050250031800000086000E00A0000B040E000000BA0000
- stack 0: 0xF0
3513	 3CA	SHR		 	 
- stack 1: 0x698
- stack 0: 0xD1
3514	 3CB	JUMP		 	 
- stack 0: 0x698
3515	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x698
3516	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
3517	 D3	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0xD1001800EB001701050250031800000086000E00A0000B040E000000BA0000
3518	 D4	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0xD1001800EB001701050250031800000086000E00A0000B040E000000BA0000
- stack 0: 0xE0
3519	 D6	SHR		 	 
- stack 1: 0x698
- stack 0: 0xD10018
3520	 D7	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0xD10018
- stack 0: 0xFFFF
3521	 DA	AND		 	 
- stack 1: 0x698
- stack 0: 0x18
3522	 DB	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x18
- stack 0: 0x1
3523	 DD	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x18
3524	 DE	PUSH2	03A0	 	 
- stack 2: 0x698
- stack 1: 0x18
- stack 0: 0x3A0
3525	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x698
3526	 E2	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
3527	 E4	ADD		 	 
- stack 0: 0x69C
3528	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
3529	 E6	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0xEB001701050250031800000086000E00A0000B040E000000BA000003510001
3530	 E7	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0xEB001701050250031800000086000E00A0000B040E000000BA000003510001
- stack 0: 0xF0
3531	 E9	SHR		 	 
- stack 1: 0x69C
- stack 0: 0xEB
3532	 EA	JUMP		 	 
- stack 0: 0x69C
3533	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x69C
3534	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
3535	 ED	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0xEB001701050250031800000086000E00A0000B040E000000BA000003510001
3536	 EE	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0xEB001701050250031800000086000E00A0000B040E000000BA000003510001
- stack 0: 0xE0
3537	 F0	SHR		 	 
- stack 1: 0x69C
- stack 0: 0xEB0017
3538	 F1	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0xEB0017
- stack 0: 0xFFFF
3539	 F4	AND		 	 
- stack 1: 0x69C
- stack 0: 0x17
3540	 F5	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0x17
- stack 0: 0x1
3541	 F7	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0x17
3542	 F8	PUSH2	0380	 	 
- stack 2: 0x69C
- stack 1: 0x17
- stack 0: 0x380
3543	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x69C
3544	 FC	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
3545	 FE	ADD		 	 
- stack 0: 0x6A0
3546	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
3547	 100	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x1050250031800000086000E00A0000B040E000000BA00000351000103700002
3548	 101	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x1050250031800000086000E00A0000B040E000000BA00000351000103700002
- stack 0: 0xF0
3549	 103	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x105
3550	 104	JUMP		 	 
- stack 0: 0x6A0
3551	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x6A0
3552	 106	PUSH2	0060	 	 
- stack 1: 0x6A0
- stack 0: 0x60
3553	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x6A0
- stack 0: 0x18
3554	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
3555	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A0
- stack 0: 0x18
3556	 110	PUSH2	03A0	 	 
- stack 2: 0x6A0
- stack 1: 0x18
- stack 0: 0x3A0
3557	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x6A0
- stack 1: 0x18
- stack 0: 0x18
3558	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A0
- stack 2: 0x18
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
3559	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A0
- stack 1: 0x18
- stack 0: 0x18
3560	 11A	SUB		 	 
- stack 1: 0x6A0
- stack 0: 0x0
3561	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x123
3562	 11E	JUMPI		 	 
- stack 0: 0x6A0
3563	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x6A0
- stack 0: 0x13D
3564	 122	JUMP		 	 
- stack 0: 0x6A0
3565	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x6A0
3566	 13E	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
3567	 140	ADD		 	 
- stack 0: 0x6A4
3568	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
3569	 142	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x31800000086000E00A0000B040E000000BA00000351000103700002038AFFE8
3570	 143	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x31800000086000E00A0000B040E000000BA00000351000103700002038AFFE8
- stack 0: 0xF0
3571	 145	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x318
3572	 146	JUMP		 	 
- stack 0: 0x6A4
3573	 318	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6A4
3574	 319	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
3575	 31A	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x31800000086000E00A0000B040E000000BA00000351000103700002038AFFE8
3576	 31B	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x31800000086000E00A0000B040E000000BA00000351000103700002038AFFE8
- stack 0: 0xE0
3577	 31D	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x3180000
3578	 31E	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x3180000
- stack 0: 0xFFFF
3579	 321	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x0
3580	 322	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0x1
3581	 324	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x0
3582	 325	PUSH2	0080	 	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0x80
3583	 328	MSTORE		 	  ;; # store to x4
- stack 0: 0x6A4
3584	 329	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
3585	 32B	ADD		 	 
- stack 0: 0x6A8
3586	 32C	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
3587	 32D	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x86000E00A0000B040E000000BA00000351000103700002038AFFE800D10019
3588	 32E	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x86000E00A0000B040E000000BA00000351000103700002038AFFE800D10019
- stack 0: 0xF0
3589	 330	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x86
3590	 331	JUMP		 	 
- stack 0: 0x6A8
3591	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6A8
3592	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
3593	 88	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x86000E00A0000B040E000000BA00000351000103700002038AFFE800D10019
3594	 89	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0x86000E00A0000B040E000000BA00000351000103700002038AFFE800D10019
- stack 0: 0xE0
3595	 8B	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x86000E
3596	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x86000E
- stack 0: 0xFFFF
3597	 8F	AND		 	 
- stack 1: 0x6A8
- stack 0: 0xE
3598	 90	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0xE
- stack 0: 0x1
3599	 92	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0xE
3600	 93	PUSH2	0020	 	 
- stack 2: 0x6A8
- stack 1: 0xE
- stack 0: 0x20
3601	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A8
3602	 97	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
3603	 99	ADD		 	 
- stack 0: 0x6AC
3604	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
3605	 9B	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0xA0000B040E000000BA00000351000103700002038AFFE800D1001900EB0018
3606	 9C	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0xA0000B040E000000BA00000351000103700002038AFFE800D1001900EB0018
- stack 0: 0xF0
3607	 9E	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0xA0
3608	 9F	JUMP		 	 
- stack 0: 0x6AC
3609	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6AC
3610	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
3611	 A2	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0xA0000B040E000000BA00000351000103700002038AFFE800D1001900EB0018
3612	 A3	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0xA0000B040E000000BA00000351000103700002038AFFE800D1001900EB0018
- stack 0: 0xE0
3613	 A5	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0xA0000B
3614	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0xA0000B
- stack 0: 0xFFFF
3615	 A9	AND		 	 
- stack 1: 0x6AC
- stack 0: 0xB
3616	 AA	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0xB
- stack 0: 0x1
3617	 AC	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0xB
3618	 AD	PUSH2	0040	 	 
- stack 2: 0x6AC
- stack 1: 0xB
- stack 0: 0x40
3619	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6AC
3620	 B1	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
3621	 B3	ADD		 	 
- stack 0: 0x6B0
3622	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
3623	 B5	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001801050224
3624	 B6	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001801050224
- stack 0: 0xF0
3625	 B8	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x40E
3626	 B9	JUMP		 	 
- stack 0: 0x6B0
3627	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6B0
3628	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
3629	 410	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001801050224
3630	 411	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001801050224
- stack 0: 0xE0
3631	 413	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x40E0000
3632	 414	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x40E0000
- stack 0: 0xFFFF
3633	 417	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
3634	 418	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x0
- stack 0: 0x1
3635	 41A	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
3636	 41B	POP		 	 
- stack 0: 0x6B0
3637	 41C	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
3638	 41E	ADD		 	 
- stack 0: 0x6B4
3639	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
3640	 420	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0xBA00000351000103700002038AFFE800D1001900EB00180105022403180000
3641	 421	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0xBA00000351000103700002038AFFE800D1001900EB00180105022403180000
- stack 0: 0xF0
3642	 423	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0xBA
3643	 424	JUMP		 	 
- stack 0: 0x6B4
3644	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x6B4
3645	 BB	PUSH2	0020	 	 
- stack 1: 0x6B4
- stack 0: 0x20
3646	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x6B4
- stack 0: 0xE
3647	 BF	PUSH2	0040	 	 
- stack 2: 0x6B4
- stack 1: 0xE
- stack 0: 0x40
3648	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x6B4
- stack 1: 0xE
- stack 0: 0xB
3649	 C3	ADD		 	 
- stack 1: 0x6B4
- stack 0: 0x19
3650	 C4	PUSH2	0060	 	 
- stack 2: 0x6B4
- stack 1: 0x19
- stack 0: 0x60
3651	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6B4
3652	 C8	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3653	 CA	ADD		 	 
- stack 0: 0x6B8
3654	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
3655	 CC	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x351000103700002038AFFE800D1001900EB001801050224031800000086000F
3656	 CD	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x351000103700002038AFFE800D1001900EB001801050224031800000086000F
- stack 0: 0xF0
3657	 CF	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x351
3658	 D0	JUMP		 	 
- stack 0: 0x6B8
3659	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6B8
3660	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
3661	 353	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x351000103700002038AFFE800D1001900EB001801050224031800000086000F
3662	 354	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x351000103700002038AFFE800D1001900EB001801050224031800000086000F
- stack 0: 0xE0
3663	 356	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x3510001
3664	 357	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x3510001
- stack 0: 0xFFFF
3665	 35A	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
3666	 35B	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
3667	 35D	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
3668	 35E	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x80
3669	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x0
3670	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x6B8
- stack 0: 0x1
3671	 363	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x80
3672	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B8
3673	 367	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
3674	 369	ADD		 	 
- stack 0: 0x6BC
3675	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
3676	 36B	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3700002038AFFE800D1001900EB001801050224031800000086000F00A0000B
3677	 36C	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x3700002038AFFE800D1001900EB001801050224031800000086000F00A0000B
- stack 0: 0xF0
3678	 36E	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x370
3679	 36F	JUMP		 	 
- stack 0: 0x6BC
3680	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6BC
3681	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
3682	 372	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3700002038AFFE800D1001900EB001801050224031800000086000F00A0000B
3683	 373	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x3700002038AFFE800D1001900EB001801050224031800000086000F00A0000B
- stack 0: 0xE0
3684	 375	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x3700002
3685	 376	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x3700002
- stack 0: 0xFFFF
3686	 379	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
3687	 37A	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0x1
3688	 37C	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
3689	 37D	PUSH2	00A0	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0xA0
3690	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x6BC
3691	 381	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
3692	 383	ADD		 	 
- stack 0: 0x6C0
3693	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
3694	 385	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x38AFFE800D1001900EB001801050224031800000086000F00A0000B040E0000
3695	 386	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x38AFFE800D1001900EB001801050224031800000086000F00A0000B040E0000
- stack 0: 0xF0
3696	 388	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x38A
3697	 389	JUMP		 	 
- stack 0: 0x6C0
3698	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6C0
3699	 38B	PUSH2	0080	 	 
- stack 1: 0x6C0
- stack 0: 0x80
3700	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x6C0
- stack 0: 0x1
3701	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3702	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C0
- stack 0: 0x1
3703	 395	PUSH2	00A0	 	 
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0xA0
3704	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0x2
3705	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3706	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0x2
3707	 39F	SUB		 	 
- stack 1: 0x6C0
- stack 0: 0x1
3708	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0x3A8
3709	 3A3	JUMPI		 	 
- stack 0: 0x6C0
3710	 3A8	JUMPDEST		 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x6C0
3711	 3A9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
3712	 3AA	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x38AFFE800D1001900EB001801050224031800000086000F00A0000B040E0000
3713	 3AB	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x38AFFE800D1001900EB001801050224031800000086000F00A0000B040E0000
- stack 0: 0xE0
3714	 3AD	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x38AFFE8
3715	 3AE	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x38AFFE8
- stack 0: 0xFFFF
3716	 3B1	AND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFE8
3717	 3B2	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0xFFE8
- stack 0: 0x1
3718	 3B4	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
3719	 3B5	ADD		 	 
- stack 0: 0x6A8
3720	 3B6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6A8
- stack 0: 0xFFFFFFFF
3721	 3BB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6A8
3722	 3BC	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
3723	 3BD	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x86000E00A0000B040E000000BA00000351000103700002038AFFE800D10019
3724	 3BE	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x86000E00A0000B040E000000BA00000351000103700002038AFFE800D10019
- stack 0: 0xF0
3725	 3C0	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x86
3726	 3C1	JUMP		 	 
- stack 0: 0x6A8
3727	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6A8
3728	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
3729	 88	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x86000E00A0000B040E000000BA00000351000103700002038AFFE800D10019
3730	 89	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0x86000E00A0000B040E000000BA00000351000103700002038AFFE800D10019
- stack 0: 0xE0
3731	 8B	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x86000E
3732	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x86000E
- stack 0: 0xFFFF
3733	 8F	AND		 	 
- stack 1: 0x6A8
- stack 0: 0xE
3734	 90	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0xE
- stack 0: 0x1
3735	 92	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0xE
3736	 93	PUSH2	0020	 	 
- stack 2: 0x6A8
- stack 1: 0xE
- stack 0: 0x20
3737	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A8
3738	 97	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
3739	 99	ADD		 	 
- stack 0: 0x6AC
3740	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
3741	 9B	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0xA0000B040E000000BA00000351000103700002038AFFE800D1001900EB0018
3742	 9C	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0xA0000B040E000000BA00000351000103700002038AFFE800D1001900EB0018
- stack 0: 0xF0
3743	 9E	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0xA0
3744	 9F	JUMP		 	 
- stack 0: 0x6AC
3745	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6AC
3746	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
3747	 A2	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0xA0000B040E000000BA00000351000103700002038AFFE800D1001900EB0018
3748	 A3	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0xA0000B040E000000BA00000351000103700002038AFFE800D1001900EB0018
- stack 0: 0xE0
3749	 A5	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0xA0000B
3750	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0xA0000B
- stack 0: 0xFFFF
3751	 A9	AND		 	 
- stack 1: 0x6AC
- stack 0: 0xB
3752	 AA	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0xB
- stack 0: 0x1
3753	 AC	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0xB
3754	 AD	PUSH2	0040	 	 
- stack 2: 0x6AC
- stack 1: 0xB
- stack 0: 0x40
3755	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6AC
3756	 B1	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
3757	 B3	ADD		 	 
- stack 0: 0x6B0
3758	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
3759	 B5	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001801050224
3760	 B6	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001801050224
- stack 0: 0xF0
3761	 B8	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x40E
3762	 B9	JUMP		 	 
- stack 0: 0x6B0
3763	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6B0
3764	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
3765	 410	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001801050224
3766	 411	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001801050224
- stack 0: 0xE0
3767	 413	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x40E0000
3768	 414	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x40E0000
- stack 0: 0xFFFF
3769	 417	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
3770	 418	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x0
- stack 0: 0x1
3771	 41A	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
3772	 41B	POP		 	 
- stack 0: 0x6B0
3773	 41C	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
3774	 41E	ADD		 	 
- stack 0: 0x6B4
3775	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
3776	 420	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0xBA00000351000103700002038AFFE800D1001900EB00180105022403180000
3777	 421	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0xBA00000351000103700002038AFFE800D1001900EB00180105022403180000
- stack 0: 0xF0
3778	 423	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0xBA
3779	 424	JUMP		 	 
- stack 0: 0x6B4
3780	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x6B4
3781	 BB	PUSH2	0020	 	 
- stack 1: 0x6B4
- stack 0: 0x20
3782	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x6B4
- stack 0: 0xE
3783	 BF	PUSH2	0040	 	 
- stack 2: 0x6B4
- stack 1: 0xE
- stack 0: 0x40
3784	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x6B4
- stack 1: 0xE
- stack 0: 0xB
3785	 C3	ADD		 	 
- stack 1: 0x6B4
- stack 0: 0x19
3786	 C4	PUSH2	0060	 	 
- stack 2: 0x6B4
- stack 1: 0x19
- stack 0: 0x60
3787	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6B4
3788	 C8	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3789	 CA	ADD		 	 
- stack 0: 0x6B8
3790	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
3791	 CC	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x351000103700002038AFFE800D1001900EB001801050224031800000086000F
3792	 CD	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x351000103700002038AFFE800D1001900EB001801050224031800000086000F
- stack 0: 0xF0
3793	 CF	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x351
3794	 D0	JUMP		 	 
- stack 0: 0x6B8
3795	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6B8
3796	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
3797	 353	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x351000103700002038AFFE800D1001900EB001801050224031800000086000F
3798	 354	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x351000103700002038AFFE800D1001900EB001801050224031800000086000F
- stack 0: 0xE0
3799	 356	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x3510001
3800	 357	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x3510001
- stack 0: 0xFFFF
3801	 35A	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
3802	 35B	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
3803	 35D	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
3804	 35E	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x80
3805	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
3806	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x6B8
- stack 0: 0x2
3807	 363	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0x80
3808	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B8
3809	 367	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
3810	 369	ADD		 	 
- stack 0: 0x6BC
3811	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
3812	 36B	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3700002038AFFE800D1001900EB001801050224031800000086000F00A0000B
3813	 36C	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x3700002038AFFE800D1001900EB001801050224031800000086000F00A0000B
- stack 0: 0xF0
3814	 36E	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x370
3815	 36F	JUMP		 	 
- stack 0: 0x6BC
3816	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6BC
3817	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
3818	 372	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3700002038AFFE800D1001900EB001801050224031800000086000F00A0000B
3819	 373	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x3700002038AFFE800D1001900EB001801050224031800000086000F00A0000B
- stack 0: 0xE0
3820	 375	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x3700002
3821	 376	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x3700002
- stack 0: 0xFFFF
3822	 379	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
3823	 37A	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0x1
3824	 37C	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
3825	 37D	PUSH2	00A0	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0xA0
3826	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x6BC
3827	 381	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
3828	 383	ADD		 	 
- stack 0: 0x6C0
3829	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
3830	 385	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x38AFFE800D1001900EB001801050224031800000086000F00A0000B040E0000
3831	 386	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x38AFFE800D1001900EB001801050224031800000086000F00A0000B040E0000
- stack 0: 0xF0
3832	 388	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x38A
3833	 389	JUMP		 	 
- stack 0: 0x6C0
3834	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6C0
3835	 38B	PUSH2	0080	 	 
- stack 1: 0x6C0
- stack 0: 0x80
3836	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x6C0
- stack 0: 0x2
3837	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3838	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C0
- stack 0: 0x2
3839	 395	PUSH2	00A0	 	 
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0xA0
3840	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0x2
3841	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3842	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0x2
3843	 39F	SUB		 	 
- stack 1: 0x6C0
- stack 0: 0x0
3844	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x3A8
3845	 3A3	JUMPI		 	 
- stack 0: 0x6C0
3846	 3A4	PUSH2	03C2	 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 1: 0x6C0
- stack 0: 0x3C2
3847	 3A7	JUMP		 	 
- stack 0: 0x6C0
3848	 3C2	JUMPDEST		 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x6C0
3849	 3C3	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
3850	 3C5	ADD		 	 
- stack 0: 0x6C4
3851	 3C6	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
3852	 3C7	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0xD1001900EB001801050224031800000086000F00A0000B040E0000040E0000
3853	 3C8	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0xD1001900EB001801050224031800000086000F00A0000B040E0000040E0000
- stack 0: 0xF0
3854	 3CA	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0xD1
3855	 3CB	JUMP		 	 
- stack 0: 0x6C4
3856	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x6C4
3857	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C4
- stack 0: 0x6C4
3858	 D3	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0xD1001900EB001801050224031800000086000F00A0000B040E0000040E0000
3859	 D4	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0xD1001900EB001801050224031800000086000F00A0000B040E0000040E0000
- stack 0: 0xE0
3860	 D6	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0xD10019
3861	 D7	PUSH2	FFFF	 	 
- stack 2: 0x6C4
- stack 1: 0xD10019
- stack 0: 0xFFFF
3862	 DA	AND		 	 
- stack 1: 0x6C4
- stack 0: 0x19
3863	 DB	PUSH1	01	 	 
- stack 2: 0x6C4
- stack 1: 0x19
- stack 0: 0x1
3864	 DD	SIGNEXTEND		 	 
- stack 1: 0x6C4
- stack 0: 0x19
3865	 DE	PUSH2	03A0	 	 
- stack 2: 0x6C4
- stack 1: 0x19
- stack 0: 0x3A0
3866	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x6C4
3867	 E2	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
3868	 E4	ADD		 	 
- stack 0: 0x6C8
3869	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
3870	 E6	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0xEB001801050224031800000086000F00A0000B040E0000040E000000BA0000
3871	 E7	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0xEB001801050224031800000086000F00A0000B040E0000040E000000BA0000
- stack 0: 0xF0
3872	 E9	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0xEB
3873	 EA	JUMP		 	 
- stack 0: 0x6C8
3874	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6C8
3875	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
3876	 ED	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0xEB001801050224031800000086000F00A0000B040E0000040E000000BA0000
3877	 EE	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0xEB001801050224031800000086000F00A0000B040E0000040E000000BA0000
- stack 0: 0xE0
3878	 F0	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0xEB0018
3879	 F1	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0xEB0018
- stack 0: 0xFFFF
3880	 F4	AND		 	 
- stack 1: 0x6C8
- stack 0: 0x18
3881	 F5	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0x18
- stack 0: 0x1
3882	 F7	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x18
3883	 F8	PUSH2	0380	 	 
- stack 2: 0x6C8
- stack 1: 0x18
- stack 0: 0x380
3884	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x6C8
3885	 FC	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
3886	 FE	ADD		 	 
- stack 0: 0x6CC
3887	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
3888	 100	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x1050224031800000086000F00A0000B040E0000040E000000BA000003510001
3889	 101	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x1050224031800000086000F00A0000B040E0000040E000000BA000003510001
- stack 0: 0xF0
3890	 103	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x105
3891	 104	JUMP		 	 
- stack 0: 0x6CC
3892	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x6CC
3893	 106	PUSH2	0060	 	 
- stack 1: 0x6CC
- stack 0: 0x60
3894	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x6CC
- stack 0: 0x19
3895	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
3896	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6CC
- stack 0: 0x19
3897	 110	PUSH2	03A0	 	 
- stack 2: 0x6CC
- stack 1: 0x19
- stack 0: 0x3A0
3898	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x6CC
- stack 1: 0x19
- stack 0: 0x19
3899	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6CC
- stack 2: 0x19
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
3900	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6CC
- stack 1: 0x19
- stack 0: 0x19
3901	 11A	SUB		 	 
- stack 1: 0x6CC
- stack 0: 0x0
3902	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0x123
3903	 11E	JUMPI		 	 
- stack 0: 0x6CC
3904	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x6CC
- stack 0: 0x13D
3905	 122	JUMP		 	 
- stack 0: 0x6CC
3906	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x6CC
3907	 13E	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
3908	 140	ADD		 	 
- stack 0: 0x6D0
3909	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
3910	 142	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x31800000086000F00A0000B040E0000040E000000BA00000351000103700002
3911	 143	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x31800000086000F00A0000B040E0000040E000000BA00000351000103700002
- stack 0: 0xF0
3912	 145	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x318
3913	 146	JUMP		 	 
- stack 0: 0x6D0
3914	 318	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6D0
3915	 319	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
3916	 31A	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x31800000086000F00A0000B040E0000040E000000BA00000351000103700002
3917	 31B	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x31800000086000F00A0000B040E0000040E000000BA00000351000103700002
- stack 0: 0xE0
3918	 31D	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x3180000
3919	 31E	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x3180000
- stack 0: 0xFFFF
3920	 321	AND		 	 
- stack 1: 0x6D0
- stack 0: 0x0
3921	 322	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x1
3922	 324	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0x0
3923	 325	PUSH2	0080	 	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x80
3924	 328	MSTORE		 	  ;; # store to x4
- stack 0: 0x6D0
3925	 329	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
3926	 32B	ADD		 	 
- stack 0: 0x6D4
3927	 32C	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
3928	 32D	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x86000F00A0000B040E0000040E000000BA00000351000103700002038AFFE4
3929	 32E	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x86000F00A0000B040E0000040E000000BA00000351000103700002038AFFE4
- stack 0: 0xF0
3930	 330	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x86
3931	 331	JUMP		 	 
- stack 0: 0x6D4
3932	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6D4
3933	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
3934	 88	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x86000F00A0000B040E0000040E000000BA00000351000103700002038AFFE4
3935	 89	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0x86000F00A0000B040E0000040E000000BA00000351000103700002038AFFE4
- stack 0: 0xE0
3936	 8B	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x86000F
3937	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x86000F
- stack 0: 0xFFFF
3938	 8F	AND		 	 
- stack 1: 0x6D4
- stack 0: 0xF
3939	 90	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0xF
- stack 0: 0x1
3940	 92	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0xF
3941	 93	PUSH2	0020	 	 
- stack 2: 0x6D4
- stack 1: 0xF
- stack 0: 0x20
3942	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D4
3943	 97	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
3944	 99	ADD		 	 
- stack 0: 0x6D8
3945	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
3946	 9B	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0xA0000B040E0000040E000000BA00000351000103700002038AFFE400D1001A
3947	 9C	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0xA0000B040E0000040E000000BA00000351000103700002038AFFE400D1001A
- stack 0: 0xF0
3948	 9E	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0xA0
3949	 9F	JUMP		 	 
- stack 0: 0x6D8
3950	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6D8
3951	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
3952	 A2	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0xA0000B040E0000040E000000BA00000351000103700002038AFFE400D1001A
3953	 A3	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0xA0000B040E0000040E000000BA00000351000103700002038AFFE400D1001A
- stack 0: 0xE0
3954	 A5	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0xA0000B
3955	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0xA0000B
- stack 0: 0xFFFF
3956	 A9	AND		 	 
- stack 1: 0x6D8
- stack 0: 0xB
3957	 AA	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0xB
- stack 0: 0x1
3958	 AC	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0xB
3959	 AD	PUSH2	0040	 	 
- stack 2: 0x6D8
- stack 1: 0xB
- stack 0: 0x40
3960	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6D8
3961	 B1	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
3962	 B3	ADD		 	 
- stack 0: 0x6DC
3963	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
3964	 B5	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB0019
3965	 B6	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB0019
- stack 0: 0xF0
3966	 B8	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x40E
3967	 B9	JUMP		 	 
- stack 0: 0x6DC
3968	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6DC
3969	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
3970	 410	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB0019
3971	 411	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB0019
- stack 0: 0xE0
3972	 413	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x40E0000
3973	 414	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x40E0000
- stack 0: 0xFFFF
3974	 417	AND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
3975	 418	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x1
3976	 41A	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
3977	 41B	POP		 	 
- stack 0: 0x6DC
3978	 41C	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
3979	 41E	ADD		 	 
- stack 0: 0x6E0
3980	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
3981	 420	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB0019010501F4
3982	 421	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB0019010501F4
- stack 0: 0xF0
3983	 423	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x40E
3984	 424	JUMP		 	 
- stack 0: 0x6E0
3985	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E0
3986	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
3987	 410	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB0019010501F4
3988	 411	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB0019010501F4
- stack 0: 0xE0
3989	 413	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x40E0000
3990	 414	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x40E0000
- stack 0: 0xFFFF
3991	 417	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
3992	 418	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
3993	 41A	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
3994	 41B	POP		 	 
- stack 0: 0x6E0
3995	 41C	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
3996	 41E	ADD		 	 
- stack 0: 0x6E4
3997	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
3998	 420	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0xBA00000351000103700002038AFFE400D1001A00EB0019010501F403180000
3999	 421	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0xBA00000351000103700002038AFFE400D1001A00EB0019010501F403180000
- stack 0: 0xF0
4000	 423	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0xBA
4001	 424	JUMP		 	 
- stack 0: 0x6E4
4002	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x6E4
4003	 BB	PUSH2	0020	 	 
- stack 1: 0x6E4
- stack 0: 0x20
4004	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x6E4
- stack 0: 0xF
4005	 BF	PUSH2	0040	 	 
- stack 2: 0x6E4
- stack 1: 0xF
- stack 0: 0x40
4006	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x6E4
- stack 1: 0xF
- stack 0: 0xB
4007	 C3	ADD		 	 
- stack 1: 0x6E4
- stack 0: 0x1A
4008	 C4	PUSH2	0060	 	 
- stack 2: 0x6E4
- stack 1: 0x1A
- stack 0: 0x60
4009	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6E4
4010	 C8	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4011	 CA	ADD		 	 
- stack 0: 0x6E8
4012	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
4013	 CC	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x351000103700002038AFFE400D1001A00EB0019010501F4031800000086000D
4014	 CD	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x351000103700002038AFFE400D1001A00EB0019010501F4031800000086000D
- stack 0: 0xF0
4015	 CF	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x351
4016	 D0	JUMP		 	 
- stack 0: 0x6E8
4017	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6E8
4018	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
4019	 353	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x351000103700002038AFFE400D1001A00EB0019010501F4031800000086000D
4020	 354	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x351000103700002038AFFE400D1001A00EB0019010501F4031800000086000D
- stack 0: 0xE0
4021	 356	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x3510001
4022	 357	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x3510001
- stack 0: 0xFFFF
4023	 35A	AND		 	 
- stack 1: 0x6E8
- stack 0: 0x1
4024	 35B	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x1
4025	 35D	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0x1
4026	 35E	PUSH2	0080	 	 
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x80
4027	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x0
4028	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x6E8
- stack 0: 0x1
4029	 363	PUSH2	0080	 	 
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x80
4030	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x6E8
4031	 367	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4032	 369	ADD		 	 
- stack 0: 0x6EC
4033	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4034	 36B	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x3700002038AFFE400D1001A00EB0019010501F4031800000086000D040E0000
4035	 36C	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x3700002038AFFE400D1001A00EB0019010501F4031800000086000D040E0000
- stack 0: 0xF0
4036	 36E	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x370
4037	 36F	JUMP		 	 
- stack 0: 0x6EC
4038	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6EC
4039	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
4040	 372	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x3700002038AFFE400D1001A00EB0019010501F4031800000086000D040E0000
4041	 373	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x3700002038AFFE400D1001A00EB0019010501F4031800000086000D040E0000
- stack 0: 0xE0
4042	 375	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x3700002
4043	 376	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x3700002
- stack 0: 0xFFFF
4044	 379	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x2
4045	 37A	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x2
- stack 0: 0x1
4046	 37C	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x2
4047	 37D	PUSH2	00A0	 	 
- stack 2: 0x6EC
- stack 1: 0x2
- stack 0: 0xA0
4048	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x6EC
4049	 381	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
4050	 383	ADD		 	 
- stack 0: 0x6F0
4051	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
4052	 385	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x38AFFE400D1001A00EB0019010501F4031800000086000D040E000000A0000B
4053	 386	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x38AFFE400D1001A00EB0019010501F4031800000086000D040E000000A0000B
- stack 0: 0xF0
4054	 388	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x38A
4055	 389	JUMP		 	 
- stack 0: 0x6F0
4056	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6F0
4057	 38B	PUSH2	0080	 	 
- stack 1: 0x6F0
- stack 0: 0x80
4058	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x6F0
- stack 0: 0x1
4059	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4060	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F0
- stack 0: 0x1
4061	 395	PUSH2	00A0	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0xA0
4062	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x2
4063	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6F0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4064	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x2
4065	 39F	SUB		 	 
- stack 1: 0x6F0
- stack 0: 0x1
4066	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x3A8
4067	 3A3	JUMPI		 	 
- stack 0: 0x6F0
4068	 3A8	JUMPDEST		 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x6F0
4069	 3A9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
4070	 3AA	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x38AFFE400D1001A00EB0019010501F4031800000086000D040E000000A0000B
4071	 3AB	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x38AFFE400D1001A00EB0019010501F4031800000086000D040E000000A0000B
- stack 0: 0xE0
4072	 3AD	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x38AFFE4
4073	 3AE	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x38AFFE4
- stack 0: 0xFFFF
4074	 3B1	AND		 	 
- stack 1: 0x6F0
- stack 0: 0xFFE4
4075	 3B2	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0xFFE4
- stack 0: 0x1
4076	 3B4	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4077	 3B5	ADD		 	 
- stack 0: 0x6D4
4078	 3B6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFF
4079	 3BB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6D4
4080	 3BC	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
4081	 3BD	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x86000F00A0000B040E0000040E000000BA00000351000103700002038AFFE4
4082	 3BE	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x86000F00A0000B040E0000040E000000BA00000351000103700002038AFFE4
- stack 0: 0xF0
4083	 3C0	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x86
4084	 3C1	JUMP		 	 
- stack 0: 0x6D4
4085	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6D4
4086	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
4087	 88	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x86000F00A0000B040E0000040E000000BA00000351000103700002038AFFE4
4088	 89	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0x86000F00A0000B040E0000040E000000BA00000351000103700002038AFFE4
- stack 0: 0xE0
4089	 8B	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x86000F
4090	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x86000F
- stack 0: 0xFFFF
4091	 8F	AND		 	 
- stack 1: 0x6D4
- stack 0: 0xF
4092	 90	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0xF
- stack 0: 0x1
4093	 92	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0xF
4094	 93	PUSH2	0020	 	 
- stack 2: 0x6D4
- stack 1: 0xF
- stack 0: 0x20
4095	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D4
4096	 97	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
4097	 99	ADD		 	 
- stack 0: 0x6D8
4098	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
4099	 9B	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0xA0000B040E0000040E000000BA00000351000103700002038AFFE400D1001A
4100	 9C	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0xA0000B040E0000040E000000BA00000351000103700002038AFFE400D1001A
- stack 0: 0xF0
4101	 9E	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0xA0
4102	 9F	JUMP		 	 
- stack 0: 0x6D8
4103	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6D8
4104	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
4105	 A2	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0xA0000B040E0000040E000000BA00000351000103700002038AFFE400D1001A
4106	 A3	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0xA0000B040E0000040E000000BA00000351000103700002038AFFE400D1001A
- stack 0: 0xE0
4107	 A5	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0xA0000B
4108	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0xA0000B
- stack 0: 0xFFFF
4109	 A9	AND		 	 
- stack 1: 0x6D8
- stack 0: 0xB
4110	 AA	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0xB
- stack 0: 0x1
4111	 AC	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0xB
4112	 AD	PUSH2	0040	 	 
- stack 2: 0x6D8
- stack 1: 0xB
- stack 0: 0x40
4113	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6D8
4114	 B1	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
4115	 B3	ADD		 	 
- stack 0: 0x6DC
4116	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
4117	 B5	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB0019
4118	 B6	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB0019
- stack 0: 0xF0
4119	 B8	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x40E
4120	 B9	JUMP		 	 
- stack 0: 0x6DC
4121	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6DC
4122	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
4123	 410	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB0019
4124	 411	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB0019
- stack 0: 0xE0
4125	 413	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x40E0000
4126	 414	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x40E0000
- stack 0: 0xFFFF
4127	 417	AND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
4128	 418	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x1
4129	 41A	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
4130	 41B	POP		 	 
- stack 0: 0x6DC
4131	 41C	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
4132	 41E	ADD		 	 
- stack 0: 0x6E0
4133	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
4134	 420	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB0019010501F4
4135	 421	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB0019010501F4
- stack 0: 0xF0
4136	 423	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x40E
4137	 424	JUMP		 	 
- stack 0: 0x6E0
4138	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E0
4139	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
4140	 410	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB0019010501F4
4141	 411	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB0019010501F4
- stack 0: 0xE0
4142	 413	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x40E0000
4143	 414	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x40E0000
- stack 0: 0xFFFF
4144	 417	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4145	 418	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
4146	 41A	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4147	 41B	POP		 	 
- stack 0: 0x6E0
4148	 41C	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
4149	 41E	ADD		 	 
- stack 0: 0x6E4
4150	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
4151	 420	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0xBA00000351000103700002038AFFE400D1001A00EB0019010501F403180000
4152	 421	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0xBA00000351000103700002038AFFE400D1001A00EB0019010501F403180000
- stack 0: 0xF0
4153	 423	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0xBA
4154	 424	JUMP		 	 
- stack 0: 0x6E4
4155	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x6E4
4156	 BB	PUSH2	0020	 	 
- stack 1: 0x6E4
- stack 0: 0x20
4157	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x6E4
- stack 0: 0xF
4158	 BF	PUSH2	0040	 	 
- stack 2: 0x6E4
- stack 1: 0xF
- stack 0: 0x40
4159	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x6E4
- stack 1: 0xF
- stack 0: 0xB
4160	 C3	ADD		 	 
- stack 1: 0x6E4
- stack 0: 0x1A
4161	 C4	PUSH2	0060	 	 
- stack 2: 0x6E4
- stack 1: 0x1A
- stack 0: 0x60
4162	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6E4
4163	 C8	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4164	 CA	ADD		 	 
- stack 0: 0x6E8
4165	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
4166	 CC	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x351000103700002038AFFE400D1001A00EB0019010501F4031800000086000D
4167	 CD	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x351000103700002038AFFE400D1001A00EB0019010501F4031800000086000D
- stack 0: 0xF0
4168	 CF	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x351
4169	 D0	JUMP		 	 
- stack 0: 0x6E8
4170	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6E8
4171	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
4172	 353	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x351000103700002038AFFE400D1001A00EB0019010501F4031800000086000D
4173	 354	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x351000103700002038AFFE400D1001A00EB0019010501F4031800000086000D
- stack 0: 0xE0
4174	 356	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x3510001
4175	 357	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x3510001
- stack 0: 0xFFFF
4176	 35A	AND		 	 
- stack 1: 0x6E8
- stack 0: 0x1
4177	 35B	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x1
4178	 35D	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0x1
4179	 35E	PUSH2	0080	 	 
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x80
4180	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x1
4181	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x6E8
- stack 0: 0x2
4182	 363	PUSH2	0080	 	 
- stack 2: 0x6E8
- stack 1: 0x2
- stack 0: 0x80
4183	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x6E8
4184	 367	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4185	 369	ADD		 	 
- stack 0: 0x6EC
4186	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4187	 36B	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x3700002038AFFE400D1001A00EB0019010501F4031800000086000D040E0000
4188	 36C	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x3700002038AFFE400D1001A00EB0019010501F4031800000086000D040E0000
- stack 0: 0xF0
4189	 36E	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x370
4190	 36F	JUMP		 	 
- stack 0: 0x6EC
4191	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6EC
4192	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
4193	 372	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x3700002038AFFE400D1001A00EB0019010501F4031800000086000D040E0000
4194	 373	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x3700002038AFFE400D1001A00EB0019010501F4031800000086000D040E0000
- stack 0: 0xE0
4195	 375	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x3700002
4196	 376	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x3700002
- stack 0: 0xFFFF
4197	 379	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x2
4198	 37A	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x2
- stack 0: 0x1
4199	 37C	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x2
4200	 37D	PUSH2	00A0	 	 
- stack 2: 0x6EC
- stack 1: 0x2
- stack 0: 0xA0
4201	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x6EC
4202	 381	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
4203	 383	ADD		 	 
- stack 0: 0x6F0
4204	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
4205	 385	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x38AFFE400D1001A00EB0019010501F4031800000086000D040E000000A0000B
4206	 386	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x38AFFE400D1001A00EB0019010501F4031800000086000D040E000000A0000B
- stack 0: 0xF0
4207	 388	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x38A
4208	 389	JUMP		 	 
- stack 0: 0x6F0
4209	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6F0
4210	 38B	PUSH2	0080	 	 
- stack 1: 0x6F0
- stack 0: 0x80
4211	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x6F0
- stack 0: 0x2
4212	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4213	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F0
- stack 0: 0x2
4214	 395	PUSH2	00A0	 	 
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0xA0
4215	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0x2
4216	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6F0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4217	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0x2
4218	 39F	SUB		 	 
- stack 1: 0x6F0
- stack 0: 0x0
4219	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0x3A8
4220	 3A3	JUMPI		 	 
- stack 0: 0x6F0
4221	 3A4	PUSH2	03C2	 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 1: 0x6F0
- stack 0: 0x3C2
4222	 3A7	JUMP		 	 
- stack 0: 0x6F0
4223	 3C2	JUMPDEST		 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x6F0
4224	 3C3	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
4225	 3C5	ADD		 	 
- stack 0: 0x6F4
4226	 3C6	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
4227	 3C7	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0xD1001A00EB0019010501F4031800000086000D040E000000A0000B00BA0000
4228	 3C8	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0xD1001A00EB0019010501F4031800000086000D040E000000A0000B00BA0000
- stack 0: 0xF0
4229	 3CA	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0xD1
4230	 3CB	JUMP		 	 
- stack 0: 0x6F4
4231	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x6F4
4232	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
4233	 D3	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0xD1001A00EB0019010501F4031800000086000D040E000000A0000B00BA0000
4234	 D4	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0xD1001A00EB0019010501F4031800000086000D040E000000A0000B00BA0000
- stack 0: 0xE0
4235	 D6	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0xD1001A
4236	 D7	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0xD1001A
- stack 0: 0xFFFF
4237	 DA	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x1A
4238	 DB	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x1A
- stack 0: 0x1
4239	 DD	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x1A
4240	 DE	PUSH2	03A0	 	 
- stack 2: 0x6F4
- stack 1: 0x1A
- stack 0: 0x3A0
4241	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x6F4
4242	 E2	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
4243	 E4	ADD		 	 
- stack 0: 0x6F8
4244	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
4245	 E6	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0xEB0019010501F4031800000086000D040E000000A0000B00BA000003510001
4246	 E7	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0xEB0019010501F4031800000086000D040E000000A0000B00BA000003510001
- stack 0: 0xF0
4247	 E9	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0xEB
4248	 EA	JUMP		 	 
- stack 0: 0x6F8
4249	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6F8
4250	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F8
- stack 0: 0x6F8
4251	 ED	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0xEB0019010501F4031800000086000D040E000000A0000B00BA000003510001
4252	 EE	PUSH1	E0	 	 
- stack 2: 0x6F8
- stack 1: 0xEB0019010501F4031800000086000D040E000000A0000B00BA000003510001
- stack 0: 0xE0
4253	 F0	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0xEB0019
4254	 F1	PUSH2	FFFF	 	 
- stack 2: 0x6F8
- stack 1: 0xEB0019
- stack 0: 0xFFFF
4255	 F4	AND		 	 
- stack 1: 0x6F8
- stack 0: 0x19
4256	 F5	PUSH1	01	 	 
- stack 2: 0x6F8
- stack 1: 0x19
- stack 0: 0x1
4257	 F7	SIGNEXTEND		 	 
- stack 1: 0x6F8
- stack 0: 0x19
4258	 F8	PUSH2	0380	 	 
- stack 2: 0x6F8
- stack 1: 0x19
- stack 0: 0x380
4259	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x6F8
4260	 FC	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
4261	 FE	ADD		 	 
- stack 0: 0x6FC
4262	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
4263	 100	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x10501F4031800000086000D040E000000A0000B00BA00000351000103700002
4264	 101	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x10501F4031800000086000D040E000000A0000B00BA00000351000103700002
- stack 0: 0xF0
4265	 103	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x105
4266	 104	JUMP		 	 
- stack 0: 0x6FC
4267	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x6FC
4268	 106	PUSH2	0060	 	 
- stack 1: 0x6FC
- stack 0: 0x60
4269	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x6FC
- stack 0: 0x1A
4270	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x1A
- stack 0: 0xFFFFFFFF
4271	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6FC
- stack 0: 0x1A
4272	 110	PUSH2	03A0	 	 
- stack 2: 0x6FC
- stack 1: 0x1A
- stack 0: 0x3A0
4273	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x6FC
- stack 1: 0x1A
- stack 0: 0x1A
4274	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6FC
- stack 2: 0x1A
- stack 1: 0x1A
- stack 0: 0xFFFFFFFF
4275	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6FC
- stack 1: 0x1A
- stack 0: 0x1A
4276	 11A	SUB		 	 
- stack 1: 0x6FC
- stack 0: 0x0
4277	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x6FC
- stack 1: 0x0
- stack 0: 0x123
4278	 11E	JUMPI		 	 
- stack 0: 0x6FC
4279	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x6FC
- stack 0: 0x13D
4280	 122	JUMP		 	 
- stack 0: 0x6FC
4281	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x6FC
4282	 13E	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
4283	 140	ADD		 	 
- stack 0: 0x700
4284	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
4285	 142	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x31800000086000D040E000000A0000B00BA00000351000103700002038AFFE8
4286	 143	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x31800000086000D040E000000A0000B00BA00000351000103700002038AFFE8
- stack 0: 0xF0
4287	 145	SHR		 	 
- stack 1: 0x700
- stack 0: 0x318
4288	 146	JUMP		 	 
- stack 0: 0x700
4289	 318	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x700
4290	 319	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x700
- stack 0: 0x700
4291	 31A	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x31800000086000D040E000000A0000B00BA00000351000103700002038AFFE8
4292	 31B	PUSH1	E0	 	 
- stack 2: 0x700
- stack 1: 0x31800000086000D040E000000A0000B00BA00000351000103700002038AFFE8
- stack 0: 0xE0
4293	 31D	SHR		 	 
- stack 1: 0x700
- stack 0: 0x3180000
4294	 31E	PUSH2	FFFF	 	 
- stack 2: 0x700
- stack 1: 0x3180000
- stack 0: 0xFFFF
4295	 321	AND		 	 
- stack 1: 0x700
- stack 0: 0x0
4296	 322	PUSH1	01	 	 
- stack 2: 0x700
- stack 1: 0x0
- stack 0: 0x1
4297	 324	SIGNEXTEND		 	 
- stack 1: 0x700
- stack 0: 0x0
4298	 325	PUSH2	0080	 	 
- stack 2: 0x700
- stack 1: 0x0
- stack 0: 0x80
4299	 328	MSTORE		 	  ;; # store to x4
- stack 0: 0x700
4300	 329	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
4301	 32B	ADD		 	 
- stack 0: 0x704
4302	 32C	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
4303	 32D	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x86000D040E000000A0000B00BA00000351000103700002038AFFE800D10018
4304	 32E	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x86000D040E000000A0000B00BA00000351000103700002038AFFE800D10018
- stack 0: 0xF0
4305	 330	SHR		 	 
- stack 1: 0x704
- stack 0: 0x86
4306	 331	JUMP		 	 
- stack 0: 0x704
4307	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x704
4308	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x704
- stack 0: 0x704
4309	 88	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x86000D040E000000A0000B00BA00000351000103700002038AFFE800D10018
4310	 89	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0x86000D040E000000A0000B00BA00000351000103700002038AFFE800D10018
- stack 0: 0xE0
4311	 8B	SHR		 	 
- stack 1: 0x704
- stack 0: 0x86000D
4312	 8C	PUSH2	FFFF	 	 
- stack 2: 0x704
- stack 1: 0x86000D
- stack 0: 0xFFFF
4313	 8F	AND		 	 
- stack 1: 0x704
- stack 0: 0xD
4314	 90	PUSH1	01	 	 
- stack 2: 0x704
- stack 1: 0xD
- stack 0: 0x1
4315	 92	SIGNEXTEND		 	 
- stack 1: 0x704
- stack 0: 0xD
4316	 93	PUSH2	0020	 	 
- stack 2: 0x704
- stack 1: 0xD
- stack 0: 0x20
4317	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x704
4318	 97	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
4319	 99	ADD		 	 
- stack 0: 0x708
4320	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
4321	 9B	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x40E000000A0000B00BA00000351000103700002038AFFE800D1001800EB001A
4322	 9C	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x40E000000A0000B00BA00000351000103700002038AFFE800D1001800EB001A
- stack 0: 0xF0
4323	 9E	SHR		 	 
- stack 1: 0x708
- stack 0: 0x40E
4324	 9F	JUMP		 	 
- stack 0: 0x708
4325	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x708
4326	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x708
- stack 0: 0x708
4327	 410	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x40E000000A0000B00BA00000351000103700002038AFFE800D1001800EB001A
4328	 411	PUSH1	E0	 	 
- stack 2: 0x708
- stack 1: 0x40E000000A0000B00BA00000351000103700002038AFFE800D1001800EB001A
- stack 0: 0xE0
4329	 413	SHR		 	 
- stack 1: 0x708
- stack 0: 0x40E0000
4330	 414	PUSH2	FFFF	 	 
- stack 2: 0x708
- stack 1: 0x40E0000
- stack 0: 0xFFFF
4331	 417	AND		 	 
- stack 1: 0x708
- stack 0: 0x0
4332	 418	PUSH1	01	 	 
- stack 2: 0x708
- stack 1: 0x0
- stack 0: 0x1
4333	 41A	SIGNEXTEND		 	 
- stack 1: 0x708
- stack 0: 0x0
4334	 41B	POP		 	 
- stack 0: 0x708
4335	 41C	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
4336	 41E	ADD		 	 
- stack 0: 0x70C
4337	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
4338	 420	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0xA0000B00BA00000351000103700002038AFFE800D1001800EB001A010501C8
4339	 421	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0xA0000B00BA00000351000103700002038AFFE800D1001800EB001A010501C8
- stack 0: 0xF0
4340	 423	SHR		 	 
- stack 1: 0x70C
- stack 0: 0xA0
4341	 424	JUMP		 	 
- stack 0: 0x70C
4342	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x70C
4343	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
4344	 A2	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0xA0000B00BA00000351000103700002038AFFE800D1001800EB001A010501C8
4345	 A3	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0xA0000B00BA00000351000103700002038AFFE800D1001800EB001A010501C8
- stack 0: 0xE0
4346	 A5	SHR		 	 
- stack 1: 0x70C
- stack 0: 0xA0000B
4347	 A6	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0xA0000B
- stack 0: 0xFFFF
4348	 A9	AND		 	 
- stack 1: 0x70C
- stack 0: 0xB
4349	 AA	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0xB
- stack 0: 0x1
4350	 AC	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0xB
4351	 AD	PUSH2	0040	 	 
- stack 2: 0x70C
- stack 1: 0xB
- stack 0: 0x40
4352	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x70C
4353	 B1	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
4354	 B3	ADD		 	 
- stack 0: 0x710
4355	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
4356	 B5	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0xBA00000351000103700002038AFFE800D1001800EB001A010501C803180000
4357	 B6	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0xBA00000351000103700002038AFFE800D1001800EB001A010501C803180000
- stack 0: 0xF0
4358	 B8	SHR		 	 
- stack 1: 0x710
- stack 0: 0xBA
4359	 B9	JUMP		 	 
- stack 0: 0x710
4360	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x710
4361	 BB	PUSH2	0020	 	 
- stack 1: 0x710
- stack 0: 0x20
4362	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x710
- stack 0: 0xD
4363	 BF	PUSH2	0040	 	 
- stack 2: 0x710
- stack 1: 0xD
- stack 0: 0x40
4364	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x710
- stack 1: 0xD
- stack 0: 0xB
4365	 C3	ADD		 	 
- stack 1: 0x710
- stack 0: 0x18
4366	 C4	PUSH2	0060	 	 
- stack 2: 0x710
- stack 1: 0x18
- stack 0: 0x60
4367	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x710
4368	 C8	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
4369	 CA	ADD		 	 
- stack 0: 0x714
4370	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
4371	 CC	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x351000103700002038AFFE800D1001800EB001A010501C8031800000086000E
4372	 CD	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x351000103700002038AFFE800D1001800EB001A010501C8031800000086000E
- stack 0: 0xF0
4373	 CF	SHR		 	 
- stack 1: 0x714
- stack 0: 0x351
4374	 D0	JUMP		 	 
- stack 0: 0x714
4375	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x714
4376	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
4377	 353	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x351000103700002038AFFE800D1001800EB001A010501C8031800000086000E
4378	 354	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x351000103700002038AFFE800D1001800EB001A010501C8031800000086000E
- stack 0: 0xE0
4379	 356	SHR		 	 
- stack 1: 0x714
- stack 0: 0x3510001
4380	 357	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x3510001
- stack 0: 0xFFFF
4381	 35A	AND		 	 
- stack 1: 0x714
- stack 0: 0x1
4382	 35B	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x1
4383	 35D	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0x1
4384	 35E	PUSH2	0080	 	 
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x80
4385	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x0
4386	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x714
- stack 0: 0x1
4387	 363	PUSH2	0080	 	 
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x80
4388	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x714
4389	 367	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
4390	 369	ADD		 	 
- stack 0: 0x718
4391	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
4392	 36B	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x3700002038AFFE800D1001800EB001A010501C8031800000086000E040E0000
4393	 36C	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x3700002038AFFE800D1001800EB001A010501C8031800000086000E040E0000
- stack 0: 0xF0
4394	 36E	SHR		 	 
- stack 1: 0x718
- stack 0: 0x370
4395	 36F	JUMP		 	 
- stack 0: 0x718
4396	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x718
4397	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
4398	 372	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x3700002038AFFE800D1001800EB001A010501C8031800000086000E040E0000
4399	 373	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x3700002038AFFE800D1001800EB001A010501C8031800000086000E040E0000
- stack 0: 0xE0
4400	 375	SHR		 	 
- stack 1: 0x718
- stack 0: 0x3700002
4401	 376	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x3700002
- stack 0: 0xFFFF
4402	 379	AND		 	 
- stack 1: 0x718
- stack 0: 0x2
4403	 37A	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x2
- stack 0: 0x1
4404	 37C	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x2
4405	 37D	PUSH2	00A0	 	 
- stack 2: 0x718
- stack 1: 0x2
- stack 0: 0xA0
4406	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x718
4407	 381	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
4408	 383	ADD		 	 
- stack 0: 0x71C
4409	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
4410	 385	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x38AFFE800D1001800EB001A010501C8031800000086000E040E000000A0000B
4411	 386	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x38AFFE800D1001800EB001A010501C8031800000086000E040E000000A0000B
- stack 0: 0xF0
4412	 388	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x38A
4413	 389	JUMP		 	 
- stack 0: 0x71C
4414	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x71C
4415	 38B	PUSH2	0080	 	 
- stack 1: 0x71C
- stack 0: 0x80
4416	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x71C
- stack 0: 0x1
4417	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4418	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x71C
- stack 0: 0x1
4419	 395	PUSH2	00A0	 	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0xA0
4420	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x2
4421	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x71C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4422	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x2
4423	 39F	SUB		 	 
- stack 1: 0x71C
- stack 0: 0x1
4424	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x3A8
4425	 3A3	JUMPI		 	 
- stack 0: 0x71C
4426	 3A8	JUMPDEST		 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x71C
4427	 3A9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
4428	 3AA	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x38AFFE800D1001800EB001A010501C8031800000086000E040E000000A0000B
4429	 3AB	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x38AFFE800D1001800EB001A010501C8031800000086000E040E000000A0000B
- stack 0: 0xE0
4430	 3AD	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x38AFFE8
4431	 3AE	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x38AFFE8
- stack 0: 0xFFFF
4432	 3B1	AND		 	 
- stack 1: 0x71C
- stack 0: 0xFFE8
4433	 3B2	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0xFFE8
- stack 0: 0x1
4434	 3B4	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
4435	 3B5	ADD		 	 
- stack 0: 0x704
4436	 3B6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x704
- stack 0: 0xFFFFFFFF
4437	 3BB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x704
4438	 3BC	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
4439	 3BD	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x86000D040E000000A0000B00BA00000351000103700002038AFFE800D10018
4440	 3BE	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x86000D040E000000A0000B00BA00000351000103700002038AFFE800D10018
- stack 0: 0xF0
4441	 3C0	SHR		 	 
- stack 1: 0x704
- stack 0: 0x86
4442	 3C1	JUMP		 	 
- stack 0: 0x704
4443	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x704
4444	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x704
- stack 0: 0x704
4445	 88	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x86000D040E000000A0000B00BA00000351000103700002038AFFE800D10018
4446	 89	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0x86000D040E000000A0000B00BA00000351000103700002038AFFE800D10018
- stack 0: 0xE0
4447	 8B	SHR		 	 
- stack 1: 0x704
- stack 0: 0x86000D
4448	 8C	PUSH2	FFFF	 	 
- stack 2: 0x704
- stack 1: 0x86000D
- stack 0: 0xFFFF
4449	 8F	AND		 	 
- stack 1: 0x704
- stack 0: 0xD
4450	 90	PUSH1	01	 	 
- stack 2: 0x704
- stack 1: 0xD
- stack 0: 0x1
4451	 92	SIGNEXTEND		 	 
- stack 1: 0x704
- stack 0: 0xD
4452	 93	PUSH2	0020	 	 
- stack 2: 0x704
- stack 1: 0xD
- stack 0: 0x20
4453	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x704
4454	 97	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
4455	 99	ADD		 	 
- stack 0: 0x708
4456	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
4457	 9B	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x40E000000A0000B00BA00000351000103700002038AFFE800D1001800EB001A
4458	 9C	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x40E000000A0000B00BA00000351000103700002038AFFE800D1001800EB001A
- stack 0: 0xF0
4459	 9E	SHR		 	 
- stack 1: 0x708
- stack 0: 0x40E
4460	 9F	JUMP		 	 
- stack 0: 0x708
4461	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x708
4462	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x708
- stack 0: 0x708
4463	 410	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x40E000000A0000B00BA00000351000103700002038AFFE800D1001800EB001A
4464	 411	PUSH1	E0	 	 
- stack 2: 0x708
- stack 1: 0x40E000000A0000B00BA00000351000103700002038AFFE800D1001800EB001A
- stack 0: 0xE0
4465	 413	SHR		 	 
- stack 1: 0x708
- stack 0: 0x40E0000
4466	 414	PUSH2	FFFF	 	 
- stack 2: 0x708
- stack 1: 0x40E0000
- stack 0: 0xFFFF
4467	 417	AND		 	 
- stack 1: 0x708
- stack 0: 0x0
4468	 418	PUSH1	01	 	 
- stack 2: 0x708
- stack 1: 0x0
- stack 0: 0x1
4469	 41A	SIGNEXTEND		 	 
- stack 1: 0x708
- stack 0: 0x0
4470	 41B	POP		 	 
- stack 0: 0x708
4471	 41C	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
4472	 41E	ADD		 	 
- stack 0: 0x70C
4473	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
4474	 420	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0xA0000B00BA00000351000103700002038AFFE800D1001800EB001A010501C8
4475	 421	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0xA0000B00BA00000351000103700002038AFFE800D1001800EB001A010501C8
- stack 0: 0xF0
4476	 423	SHR		 	 
- stack 1: 0x70C
- stack 0: 0xA0
4477	 424	JUMP		 	 
- stack 0: 0x70C
4478	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x70C
4479	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
4480	 A2	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0xA0000B00BA00000351000103700002038AFFE800D1001800EB001A010501C8
4481	 A3	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0xA0000B00BA00000351000103700002038AFFE800D1001800EB001A010501C8
- stack 0: 0xE0
4482	 A5	SHR		 	 
- stack 1: 0x70C
- stack 0: 0xA0000B
4483	 A6	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0xA0000B
- stack 0: 0xFFFF
4484	 A9	AND		 	 
- stack 1: 0x70C
- stack 0: 0xB
4485	 AA	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0xB
- stack 0: 0x1
4486	 AC	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0xB
4487	 AD	PUSH2	0040	 	 
- stack 2: 0x70C
- stack 1: 0xB
- stack 0: 0x40
4488	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x70C
4489	 B1	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
4490	 B3	ADD		 	 
- stack 0: 0x710
4491	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
4492	 B5	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0xBA00000351000103700002038AFFE800D1001800EB001A010501C803180000
4493	 B6	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0xBA00000351000103700002038AFFE800D1001800EB001A010501C803180000
- stack 0: 0xF0
4494	 B8	SHR		 	 
- stack 1: 0x710
- stack 0: 0xBA
4495	 B9	JUMP		 	 
- stack 0: 0x710
4496	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x710
4497	 BB	PUSH2	0020	 	 
- stack 1: 0x710
- stack 0: 0x20
4498	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x710
- stack 0: 0xD
4499	 BF	PUSH2	0040	 	 
- stack 2: 0x710
- stack 1: 0xD
- stack 0: 0x40
4500	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x710
- stack 1: 0xD
- stack 0: 0xB
4501	 C3	ADD		 	 
- stack 1: 0x710
- stack 0: 0x18
4502	 C4	PUSH2	0060	 	 
- stack 2: 0x710
- stack 1: 0x18
- stack 0: 0x60
4503	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x710
4504	 C8	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
4505	 CA	ADD		 	 
- stack 0: 0x714
4506	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
4507	 CC	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x351000103700002038AFFE800D1001800EB001A010501C8031800000086000E
4508	 CD	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x351000103700002038AFFE800D1001800EB001A010501C8031800000086000E
- stack 0: 0xF0
4509	 CF	SHR		 	 
- stack 1: 0x714
- stack 0: 0x351
4510	 D0	JUMP		 	 
- stack 0: 0x714
4511	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x714
4512	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
4513	 353	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x351000103700002038AFFE800D1001800EB001A010501C8031800000086000E
4514	 354	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x351000103700002038AFFE800D1001800EB001A010501C8031800000086000E
- stack 0: 0xE0
4515	 356	SHR		 	 
- stack 1: 0x714
- stack 0: 0x3510001
4516	 357	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x3510001
- stack 0: 0xFFFF
4517	 35A	AND		 	 
- stack 1: 0x714
- stack 0: 0x1
4518	 35B	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x1
4519	 35D	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0x1
4520	 35E	PUSH2	0080	 	 
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x80
4521	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x1
4522	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x714
- stack 0: 0x2
4523	 363	PUSH2	0080	 	 
- stack 2: 0x714
- stack 1: 0x2
- stack 0: 0x80
4524	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x714
4525	 367	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
4526	 369	ADD		 	 
- stack 0: 0x718
4527	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
4528	 36B	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x3700002038AFFE800D1001800EB001A010501C8031800000086000E040E0000
4529	 36C	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x3700002038AFFE800D1001800EB001A010501C8031800000086000E040E0000
- stack 0: 0xF0
4530	 36E	SHR		 	 
- stack 1: 0x718
- stack 0: 0x370
4531	 36F	JUMP		 	 
- stack 0: 0x718
4532	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x718
4533	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
4534	 372	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x3700002038AFFE800D1001800EB001A010501C8031800000086000E040E0000
4535	 373	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x3700002038AFFE800D1001800EB001A010501C8031800000086000E040E0000
- stack 0: 0xE0
4536	 375	SHR		 	 
- stack 1: 0x718
- stack 0: 0x3700002
4537	 376	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x3700002
- stack 0: 0xFFFF
4538	 379	AND		 	 
- stack 1: 0x718
- stack 0: 0x2
4539	 37A	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x2
- stack 0: 0x1
4540	 37C	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x2
4541	 37D	PUSH2	00A0	 	 
- stack 2: 0x718
- stack 1: 0x2
- stack 0: 0xA0
4542	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x718
4543	 381	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
4544	 383	ADD		 	 
- stack 0: 0x71C
4545	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
4546	 385	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x38AFFE800D1001800EB001A010501C8031800000086000E040E000000A0000B
4547	 386	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x38AFFE800D1001800EB001A010501C8031800000086000E040E000000A0000B
- stack 0: 0xF0
4548	 388	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x38A
4549	 389	JUMP		 	 
- stack 0: 0x71C
4550	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x71C
4551	 38B	PUSH2	0080	 	 
- stack 1: 0x71C
- stack 0: 0x80
4552	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x71C
- stack 0: 0x2
4553	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4554	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x71C
- stack 0: 0x2
4555	 395	PUSH2	00A0	 	 
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0xA0
4556	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0x2
4557	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x71C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4558	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0x2
4559	 39F	SUB		 	 
- stack 1: 0x71C
- stack 0: 0x0
4560	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x71C
- stack 1: 0x0
- stack 0: 0x3A8
4561	 3A3	JUMPI		 	 
- stack 0: 0x71C
4562	 3A4	PUSH2	03C2	 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 1: 0x71C
- stack 0: 0x3C2
4563	 3A7	JUMP		 	 
- stack 0: 0x71C
4564	 3C2	JUMPDEST		 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x71C
4565	 3C3	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
4566	 3C5	ADD		 	 
- stack 0: 0x720
4567	 3C6	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
4568	 3C7	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0xD1001800EB001A010501C8031800000086000E040E000000A0000B040E0000
4569	 3C8	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0xD1001800EB001A010501C8031800000086000E040E000000A0000B040E0000
- stack 0: 0xF0
4570	 3CA	SHR		 	 
- stack 1: 0x720
- stack 0: 0xD1
4571	 3CB	JUMP		 	 
- stack 0: 0x720
4572	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x720
4573	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x720
- stack 0: 0x720
4574	 D3	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0xD1001800EB001A010501C8031800000086000E040E000000A0000B040E0000
4575	 D4	PUSH1	E0	 	 
- stack 2: 0x720
- stack 1: 0xD1001800EB001A010501C8031800000086000E040E000000A0000B040E0000
- stack 0: 0xE0
4576	 D6	SHR		 	 
- stack 1: 0x720
- stack 0: 0xD10018
4577	 D7	PUSH2	FFFF	 	 
- stack 2: 0x720
- stack 1: 0xD10018
- stack 0: 0xFFFF
4578	 DA	AND		 	 
- stack 1: 0x720
- stack 0: 0x18
4579	 DB	PUSH1	01	 	 
- stack 2: 0x720
- stack 1: 0x18
- stack 0: 0x1
4580	 DD	SIGNEXTEND		 	 
- stack 1: 0x720
- stack 0: 0x18
4581	 DE	PUSH2	03A0	 	 
- stack 2: 0x720
- stack 1: 0x18
- stack 0: 0x3A0
4582	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x720
4583	 E2	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
4584	 E4	ADD		 	 
- stack 0: 0x724
4585	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
4586	 E6	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0xEB001A010501C8031800000086000E040E000000A0000B040E000000BA0000
4587	 E7	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0xEB001A010501C8031800000086000E040E000000A0000B040E000000BA0000
- stack 0: 0xF0
4588	 E9	SHR		 	 
- stack 1: 0x724
- stack 0: 0xEB
4589	 EA	JUMP		 	 
- stack 0: 0x724
4590	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x724
4591	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
4592	 ED	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0xEB001A010501C8031800000086000E040E000000A0000B040E000000BA0000
4593	 EE	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0xEB001A010501C8031800000086000E040E000000A0000B040E000000BA0000
- stack 0: 0xE0
4594	 F0	SHR		 	 
- stack 1: 0x724
- stack 0: 0xEB001A
4595	 F1	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0xEB001A
- stack 0: 0xFFFF
4596	 F4	AND		 	 
- stack 1: 0x724
- stack 0: 0x1A
4597	 F5	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x1A
- stack 0: 0x1
4598	 F7	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x1A
4599	 F8	PUSH2	0380	 	 
- stack 2: 0x724
- stack 1: 0x1A
- stack 0: 0x380
4600	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x724
4601	 FC	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
4602	 FE	ADD		 	 
- stack 0: 0x728
4603	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
4604	 100	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x10501C8031800000086000E040E000000A0000B040E000000BA000003510001
4605	 101	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x10501C8031800000086000E040E000000A0000B040E000000BA000003510001
- stack 0: 0xF0
4606	 103	SHR		 	 
- stack 1: 0x728
- stack 0: 0x105
4607	 104	JUMP		 	 
- stack 0: 0x728
4608	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x728
4609	 106	PUSH2	0060	 	 
- stack 1: 0x728
- stack 0: 0x60
4610	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x728
- stack 0: 0x18
4611	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x728
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
4612	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x728
- stack 0: 0x18
4613	 110	PUSH2	03A0	 	 
- stack 2: 0x728
- stack 1: 0x18
- stack 0: 0x3A0
4614	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x728
- stack 1: 0x18
- stack 0: 0x18
4615	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x728
- stack 2: 0x18
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
4616	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x728
- stack 1: 0x18
- stack 0: 0x18
4617	 11A	SUB		 	 
- stack 1: 0x728
- stack 0: 0x0
4618	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x728
- stack 1: 0x0
- stack 0: 0x123
4619	 11E	JUMPI		 	 
- stack 0: 0x728
4620	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x728
- stack 0: 0x13D
4621	 122	JUMP		 	 
- stack 0: 0x728
4622	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x728
4623	 13E	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
4624	 140	ADD		 	 
- stack 0: 0x72C
4625	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
4626	 142	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x31800000086000E040E000000A0000B040E000000BA00000351000103700002
4627	 143	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x31800000086000E040E000000A0000B040E000000BA00000351000103700002
- stack 0: 0xF0
4628	 145	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x318
4629	 146	JUMP		 	 
- stack 0: 0x72C
4630	 318	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x72C
4631	 319	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
4632	 31A	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x31800000086000E040E000000A0000B040E000000BA00000351000103700002
4633	 31B	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0x31800000086000E040E000000A0000B040E000000BA00000351000103700002
- stack 0: 0xE0
4634	 31D	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x3180000
4635	 31E	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0x3180000
- stack 0: 0xFFFF
4636	 321	AND		 	 
- stack 1: 0x72C
- stack 0: 0x0
4637	 322	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x0
- stack 0: 0x1
4638	 324	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x0
4639	 325	PUSH2	0080	 	 
- stack 2: 0x72C
- stack 1: 0x0
- stack 0: 0x80
4640	 328	MSTORE		 	  ;; # store to x4
- stack 0: 0x72C
4641	 329	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
4642	 32B	ADD		 	 
- stack 0: 0x730
4643	 32C	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
4644	 32D	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x86000E040E000000A0000B040E000000BA00000351000103700002038AFFE4
4645	 32E	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x86000E040E000000A0000B040E000000BA00000351000103700002038AFFE4
- stack 0: 0xF0
4646	 330	SHR		 	 
- stack 1: 0x730
- stack 0: 0x86
4647	 331	JUMP		 	 
- stack 0: 0x730
4648	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x730
4649	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x730
- stack 0: 0x730
4650	 88	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x86000E040E000000A0000B040E000000BA00000351000103700002038AFFE4
4651	 89	PUSH1	E0	 	 
- stack 2: 0x730
- stack 1: 0x86000E040E000000A0000B040E000000BA00000351000103700002038AFFE4
- stack 0: 0xE0
4652	 8B	SHR		 	 
- stack 1: 0x730
- stack 0: 0x86000E
4653	 8C	PUSH2	FFFF	 	 
- stack 2: 0x730
- stack 1: 0x86000E
- stack 0: 0xFFFF
4654	 8F	AND		 	 
- stack 1: 0x730
- stack 0: 0xE
4655	 90	PUSH1	01	 	 
- stack 2: 0x730
- stack 1: 0xE
- stack 0: 0x1
4656	 92	SIGNEXTEND		 	 
- stack 1: 0x730
- stack 0: 0xE
4657	 93	PUSH2	0020	 	 
- stack 2: 0x730
- stack 1: 0xE
- stack 0: 0x20
4658	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x730
4659	 97	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
4660	 99	ADD		 	 
- stack 0: 0x734
4661	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
4662	 9B	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x40E000000A0000B040E000000BA00000351000103700002038AFFE400D10019
4663	 9C	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0x40E000000A0000B040E000000BA00000351000103700002038AFFE400D10019
- stack 0: 0xF0
4664	 9E	SHR		 	 
- stack 1: 0x734
- stack 0: 0x40E
4665	 9F	JUMP		 	 
- stack 0: 0x734
4666	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x734
4667	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x734
- stack 0: 0x734
4668	 410	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x40E000000A0000B040E000000BA00000351000103700002038AFFE400D10019
4669	 411	PUSH1	E0	 	 
- stack 2: 0x734
- stack 1: 0x40E000000A0000B040E000000BA00000351000103700002038AFFE400D10019
- stack 0: 0xE0
4670	 413	SHR		 	 
- stack 1: 0x734
- stack 0: 0x40E0000
4671	 414	PUSH2	FFFF	 	 
- stack 2: 0x734
- stack 1: 0x40E0000
- stack 0: 0xFFFF
4672	 417	AND		 	 
- stack 1: 0x734
- stack 0: 0x0
4673	 418	PUSH1	01	 	 
- stack 2: 0x734
- stack 1: 0x0
- stack 0: 0x1
4674	 41A	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0x0
4675	 41B	POP		 	 
- stack 0: 0x734
4676	 41C	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
4677	 41E	ADD		 	 
- stack 0: 0x738
4678	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
4679	 420	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0xA0000B040E000000BA00000351000103700002038AFFE400D1001900EB001B
4680	 421	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0xA0000B040E000000BA00000351000103700002038AFFE400D1001900EB001B
- stack 0: 0xF0
4681	 423	SHR		 	 
- stack 1: 0x738
- stack 0: 0xA0
4682	 424	JUMP		 	 
- stack 0: 0x738
4683	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x738
4684	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x738
- stack 0: 0x738
4685	 A2	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0xA0000B040E000000BA00000351000103700002038AFFE400D1001900EB001B
4686	 A3	PUSH1	E0	 	 
- stack 2: 0x738
- stack 1: 0xA0000B040E000000BA00000351000103700002038AFFE400D1001900EB001B
- stack 0: 0xE0
4687	 A5	SHR		 	 
- stack 1: 0x738
- stack 0: 0xA0000B
4688	 A6	PUSH2	FFFF	 	 
- stack 2: 0x738
- stack 1: 0xA0000B
- stack 0: 0xFFFF
4689	 A9	AND		 	 
- stack 1: 0x738
- stack 0: 0xB
4690	 AA	PUSH1	01	 	 
- stack 2: 0x738
- stack 1: 0xB
- stack 0: 0x1
4691	 AC	SIGNEXTEND		 	 
- stack 1: 0x738
- stack 0: 0xB
4692	 AD	PUSH2	0040	 	 
- stack 2: 0x738
- stack 1: 0xB
- stack 0: 0x40
4693	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x738
4694	 B1	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
4695	 B3	ADD		 	 
- stack 0: 0x73C
4696	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
4697	 B5	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001900EB001B01050198
4698	 B6	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001900EB001B01050198
- stack 0: 0xF0
4699	 B8	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x40E
4700	 B9	JUMP		 	 
- stack 0: 0x73C
4701	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x73C
4702	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x73C
- stack 0: 0x73C
4703	 410	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001900EB001B01050198
4704	 411	PUSH1	E0	 	 
- stack 2: 0x73C
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001900EB001B01050198
- stack 0: 0xE0
4705	 413	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x40E0000
4706	 414	PUSH2	FFFF	 	 
- stack 2: 0x73C
- stack 1: 0x40E0000
- stack 0: 0xFFFF
4707	 417	AND		 	 
- stack 1: 0x73C
- stack 0: 0x0
4708	 418	PUSH1	01	 	 
- stack 2: 0x73C
- stack 1: 0x0
- stack 0: 0x1
4709	 41A	SIGNEXTEND		 	 
- stack 1: 0x73C
- stack 0: 0x0
4710	 41B	POP		 	 
- stack 0: 0x73C
4711	 41C	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
4712	 41E	ADD		 	 
- stack 0: 0x740
4713	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
4714	 420	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0xBA00000351000103700002038AFFE400D1001900EB001B0105019803180000
4715	 421	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0xBA00000351000103700002038AFFE400D1001900EB001B0105019803180000
- stack 0: 0xF0
4716	 423	SHR		 	 
- stack 1: 0x740
- stack 0: 0xBA
4717	 424	JUMP		 	 
- stack 0: 0x740
4718	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x740
4719	 BB	PUSH2	0020	 	 
- stack 1: 0x740
- stack 0: 0x20
4720	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x740
- stack 0: 0xE
4721	 BF	PUSH2	0040	 	 
- stack 2: 0x740
- stack 1: 0xE
- stack 0: 0x40
4722	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x740
- stack 1: 0xE
- stack 0: 0xB
4723	 C3	ADD		 	 
- stack 1: 0x740
- stack 0: 0x19
4724	 C4	PUSH2	0060	 	 
- stack 2: 0x740
- stack 1: 0x19
- stack 0: 0x60
4725	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x740
4726	 C8	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
4727	 CA	ADD		 	 
- stack 0: 0x744
4728	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
4729	 CC	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x351000103700002038AFFE400D1001900EB001B01050198031800000086000F
4730	 CD	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x351000103700002038AFFE400D1001900EB001B01050198031800000086000F
- stack 0: 0xF0
4731	 CF	SHR		 	 
- stack 1: 0x744
- stack 0: 0x351
4732	 D0	JUMP		 	 
- stack 0: 0x744
4733	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x744
4734	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
4735	 353	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x351000103700002038AFFE400D1001900EB001B01050198031800000086000F
4736	 354	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x351000103700002038AFFE400D1001900EB001B01050198031800000086000F
- stack 0: 0xE0
4737	 356	SHR		 	 
- stack 1: 0x744
- stack 0: 0x3510001
4738	 357	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x3510001
- stack 0: 0xFFFF
4739	 35A	AND		 	 
- stack 1: 0x744
- stack 0: 0x1
4740	 35B	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x1
4741	 35D	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x1
4742	 35E	PUSH2	0080	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x80
4743	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x0
4744	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x744
- stack 0: 0x1
4745	 363	PUSH2	0080	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x80
4746	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x744
4747	 367	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
4748	 369	ADD		 	 
- stack 0: 0x748
4749	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
4750	 36B	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3700002038AFFE400D1001900EB001B01050198031800000086000F040E0000
4751	 36C	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x3700002038AFFE400D1001900EB001B01050198031800000086000F040E0000
- stack 0: 0xF0
4752	 36E	SHR		 	 
- stack 1: 0x748
- stack 0: 0x370
4753	 36F	JUMP		 	 
- stack 0: 0x748
4754	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x748
4755	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
4756	 372	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3700002038AFFE400D1001900EB001B01050198031800000086000F040E0000
4757	 373	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0x3700002038AFFE400D1001900EB001B01050198031800000086000F040E0000
- stack 0: 0xE0
4758	 375	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3700002
4759	 376	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0x3700002
- stack 0: 0xFFFF
4760	 379	AND		 	 
- stack 1: 0x748
- stack 0: 0x2
4761	 37A	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0x1
4762	 37C	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0x2
4763	 37D	PUSH2	00A0	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0xA0
4764	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x748
4765	 381	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
4766	 383	ADD		 	 
- stack 0: 0x74C
4767	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
4768	 385	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x38AFFE400D1001900EB001B01050198031800000086000F040E0000040E0000
4769	 386	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x38AFFE400D1001900EB001B01050198031800000086000F040E0000040E0000
- stack 0: 0xF0
4770	 388	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x38A
4771	 389	JUMP		 	 
- stack 0: 0x74C
4772	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x74C
4773	 38B	PUSH2	0080	 	 
- stack 1: 0x74C
- stack 0: 0x80
4774	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x74C
- stack 0: 0x1
4775	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4776	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x74C
- stack 0: 0x1
4777	 395	PUSH2	00A0	 	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0xA0
4778	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x2
4779	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x74C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4780	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x2
4781	 39F	SUB		 	 
- stack 1: 0x74C
- stack 0: 0x1
4782	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x3A8
4783	 3A3	JUMPI		 	 
- stack 0: 0x74C
4784	 3A8	JUMPDEST		 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x74C
4785	 3A9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x74C
- stack 0: 0x74C
4786	 3AA	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x38AFFE400D1001900EB001B01050198031800000086000F040E0000040E0000
4787	 3AB	PUSH1	E0	 	 
- stack 2: 0x74C
- stack 1: 0x38AFFE400D1001900EB001B01050198031800000086000F040E0000040E0000
- stack 0: 0xE0
4788	 3AD	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x38AFFE4
4789	 3AE	PUSH2	FFFF	 	 
- stack 2: 0x74C
- stack 1: 0x38AFFE4
- stack 0: 0xFFFF
4790	 3B1	AND		 	 
- stack 1: 0x74C
- stack 0: 0xFFE4
4791	 3B2	PUSH1	01	 	 
- stack 2: 0x74C
- stack 1: 0xFFE4
- stack 0: 0x1
4792	 3B4	SIGNEXTEND		 	 
- stack 1: 0x74C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4793	 3B5	ADD		 	 
- stack 0: 0x730
4794	 3B6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x730
- stack 0: 0xFFFFFFFF
4795	 3BB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x730
4796	 3BC	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
4797	 3BD	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x86000E040E000000A0000B040E000000BA00000351000103700002038AFFE4
4798	 3BE	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x86000E040E000000A0000B040E000000BA00000351000103700002038AFFE4
- stack 0: 0xF0
4799	 3C0	SHR		 	 
- stack 1: 0x730
- stack 0: 0x86
4800	 3C1	JUMP		 	 
- stack 0: 0x730
4801	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x730
4802	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x730
- stack 0: 0x730
4803	 88	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x86000E040E000000A0000B040E000000BA00000351000103700002038AFFE4
4804	 89	PUSH1	E0	 	 
- stack 2: 0x730
- stack 1: 0x86000E040E000000A0000B040E000000BA00000351000103700002038AFFE4
- stack 0: 0xE0
4805	 8B	SHR		 	 
- stack 1: 0x730
- stack 0: 0x86000E
4806	 8C	PUSH2	FFFF	 	 
- stack 2: 0x730
- stack 1: 0x86000E
- stack 0: 0xFFFF
4807	 8F	AND		 	 
- stack 1: 0x730
- stack 0: 0xE
4808	 90	PUSH1	01	 	 
- stack 2: 0x730
- stack 1: 0xE
- stack 0: 0x1
4809	 92	SIGNEXTEND		 	 
- stack 1: 0x730
- stack 0: 0xE
4810	 93	PUSH2	0020	 	 
- stack 2: 0x730
- stack 1: 0xE
- stack 0: 0x20
4811	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x730
4812	 97	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
4813	 99	ADD		 	 
- stack 0: 0x734
4814	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
4815	 9B	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x40E000000A0000B040E000000BA00000351000103700002038AFFE400D10019
4816	 9C	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0x40E000000A0000B040E000000BA00000351000103700002038AFFE400D10019
- stack 0: 0xF0
4817	 9E	SHR		 	 
- stack 1: 0x734
- stack 0: 0x40E
4818	 9F	JUMP		 	 
- stack 0: 0x734
4819	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x734
4820	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x734
- stack 0: 0x734
4821	 410	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x40E000000A0000B040E000000BA00000351000103700002038AFFE400D10019
4822	 411	PUSH1	E0	 	 
- stack 2: 0x734
- stack 1: 0x40E000000A0000B040E000000BA00000351000103700002038AFFE400D10019
- stack 0: 0xE0
4823	 413	SHR		 	 
- stack 1: 0x734
- stack 0: 0x40E0000
4824	 414	PUSH2	FFFF	 	 
- stack 2: 0x734
- stack 1: 0x40E0000
- stack 0: 0xFFFF
4825	 417	AND		 	 
- stack 1: 0x734
- stack 0: 0x0
4826	 418	PUSH1	01	 	 
- stack 2: 0x734
- stack 1: 0x0
- stack 0: 0x1
4827	 41A	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0x0
4828	 41B	POP		 	 
- stack 0: 0x734
4829	 41C	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
4830	 41E	ADD		 	 
- stack 0: 0x738
4831	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
4832	 420	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0xA0000B040E000000BA00000351000103700002038AFFE400D1001900EB001B
4833	 421	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0xA0000B040E000000BA00000351000103700002038AFFE400D1001900EB001B
- stack 0: 0xF0
4834	 423	SHR		 	 
- stack 1: 0x738
- stack 0: 0xA0
4835	 424	JUMP		 	 
- stack 0: 0x738
4836	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x738
4837	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x738
- stack 0: 0x738
4838	 A2	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0xA0000B040E000000BA00000351000103700002038AFFE400D1001900EB001B
4839	 A3	PUSH1	E0	 	 
- stack 2: 0x738
- stack 1: 0xA0000B040E000000BA00000351000103700002038AFFE400D1001900EB001B
- stack 0: 0xE0
4840	 A5	SHR		 	 
- stack 1: 0x738
- stack 0: 0xA0000B
4841	 A6	PUSH2	FFFF	 	 
- stack 2: 0x738
- stack 1: 0xA0000B
- stack 0: 0xFFFF
4842	 A9	AND		 	 
- stack 1: 0x738
- stack 0: 0xB
4843	 AA	PUSH1	01	 	 
- stack 2: 0x738
- stack 1: 0xB
- stack 0: 0x1
4844	 AC	SIGNEXTEND		 	 
- stack 1: 0x738
- stack 0: 0xB
4845	 AD	PUSH2	0040	 	 
- stack 2: 0x738
- stack 1: 0xB
- stack 0: 0x40
4846	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x738
4847	 B1	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
4848	 B3	ADD		 	 
- stack 0: 0x73C
4849	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
4850	 B5	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001900EB001B01050198
4851	 B6	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001900EB001B01050198
- stack 0: 0xF0
4852	 B8	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x40E
4853	 B9	JUMP		 	 
- stack 0: 0x73C
4854	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x73C
4855	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x73C
- stack 0: 0x73C
4856	 410	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001900EB001B01050198
4857	 411	PUSH1	E0	 	 
- stack 2: 0x73C
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001900EB001B01050198
- stack 0: 0xE0
4858	 413	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x40E0000
4859	 414	PUSH2	FFFF	 	 
- stack 2: 0x73C
- stack 1: 0x40E0000
- stack 0: 0xFFFF
4860	 417	AND		 	 
- stack 1: 0x73C
- stack 0: 0x0
4861	 418	PUSH1	01	 	 
- stack 2: 0x73C
- stack 1: 0x0
- stack 0: 0x1
4862	 41A	SIGNEXTEND		 	 
- stack 1: 0x73C
- stack 0: 0x0
4863	 41B	POP		 	 
- stack 0: 0x73C
4864	 41C	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
4865	 41E	ADD		 	 
- stack 0: 0x740
4866	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
4867	 420	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0xBA00000351000103700002038AFFE400D1001900EB001B0105019803180000
4868	 421	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0xBA00000351000103700002038AFFE400D1001900EB001B0105019803180000
- stack 0: 0xF0
4869	 423	SHR		 	 
- stack 1: 0x740
- stack 0: 0xBA
4870	 424	JUMP		 	 
- stack 0: 0x740
4871	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x740
4872	 BB	PUSH2	0020	 	 
- stack 1: 0x740
- stack 0: 0x20
4873	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x740
- stack 0: 0xE
4874	 BF	PUSH2	0040	 	 
- stack 2: 0x740
- stack 1: 0xE
- stack 0: 0x40
4875	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x740
- stack 1: 0xE
- stack 0: 0xB
4876	 C3	ADD		 	 
- stack 1: 0x740
- stack 0: 0x19
4877	 C4	PUSH2	0060	 	 
- stack 2: 0x740
- stack 1: 0x19
- stack 0: 0x60
4878	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x740
4879	 C8	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
4880	 CA	ADD		 	 
- stack 0: 0x744
4881	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
4882	 CC	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x351000103700002038AFFE400D1001900EB001B01050198031800000086000F
4883	 CD	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x351000103700002038AFFE400D1001900EB001B01050198031800000086000F
- stack 0: 0xF0
4884	 CF	SHR		 	 
- stack 1: 0x744
- stack 0: 0x351
4885	 D0	JUMP		 	 
- stack 0: 0x744
4886	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x744
4887	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
4888	 353	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x351000103700002038AFFE400D1001900EB001B01050198031800000086000F
4889	 354	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x351000103700002038AFFE400D1001900EB001B01050198031800000086000F
- stack 0: 0xE0
4890	 356	SHR		 	 
- stack 1: 0x744
- stack 0: 0x3510001
4891	 357	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x3510001
- stack 0: 0xFFFF
4892	 35A	AND		 	 
- stack 1: 0x744
- stack 0: 0x1
4893	 35B	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x1
4894	 35D	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x1
4895	 35E	PUSH2	0080	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x80
4896	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x1
4897	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x744
- stack 0: 0x2
4898	 363	PUSH2	0080	 	 
- stack 2: 0x744
- stack 1: 0x2
- stack 0: 0x80
4899	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x744
4900	 367	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
4901	 369	ADD		 	 
- stack 0: 0x748
4902	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
4903	 36B	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3700002038AFFE400D1001900EB001B01050198031800000086000F040E0000
4904	 36C	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x3700002038AFFE400D1001900EB001B01050198031800000086000F040E0000
- stack 0: 0xF0
4905	 36E	SHR		 	 
- stack 1: 0x748
- stack 0: 0x370
4906	 36F	JUMP		 	 
- stack 0: 0x748
4907	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x748
4908	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
4909	 372	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3700002038AFFE400D1001900EB001B01050198031800000086000F040E0000
4910	 373	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0x3700002038AFFE400D1001900EB001B01050198031800000086000F040E0000
- stack 0: 0xE0
4911	 375	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3700002
4912	 376	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0x3700002
- stack 0: 0xFFFF
4913	 379	AND		 	 
- stack 1: 0x748
- stack 0: 0x2
4914	 37A	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0x1
4915	 37C	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0x2
4916	 37D	PUSH2	00A0	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0xA0
4917	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x748
4918	 381	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
4919	 383	ADD		 	 
- stack 0: 0x74C
4920	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
4921	 385	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x38AFFE400D1001900EB001B01050198031800000086000F040E0000040E0000
4922	 386	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x38AFFE400D1001900EB001B01050198031800000086000F040E0000040E0000
- stack 0: 0xF0
4923	 388	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x38A
4924	 389	JUMP		 	 
- stack 0: 0x74C
4925	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x74C
4926	 38B	PUSH2	0080	 	 
- stack 1: 0x74C
- stack 0: 0x80
4927	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x74C
- stack 0: 0x2
4928	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x74C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4929	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x74C
- stack 0: 0x2
4930	 395	PUSH2	00A0	 	 
- stack 2: 0x74C
- stack 1: 0x2
- stack 0: 0xA0
4931	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x74C
- stack 1: 0x2
- stack 0: 0x2
4932	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x74C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4933	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x74C
- stack 1: 0x2
- stack 0: 0x2
4934	 39F	SUB		 	 
- stack 1: 0x74C
- stack 0: 0x0
4935	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x74C
- stack 1: 0x0
- stack 0: 0x3A8
4936	 3A3	JUMPI		 	 
- stack 0: 0x74C
4937	 3A4	PUSH2	03C2	 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 1: 0x74C
- stack 0: 0x3C2
4938	 3A7	JUMP		 	 
- stack 0: 0x74C
4939	 3C2	JUMPDEST		 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x74C
4940	 3C3	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
4941	 3C5	ADD		 	 
- stack 0: 0x750
4942	 3C6	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
4943	 3C7	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0xD1001900EB001B01050198031800000086000F040E0000040E000000A0000B
4944	 3C8	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0xD1001900EB001B01050198031800000086000F040E0000040E000000A0000B
- stack 0: 0xF0
4945	 3CA	SHR		 	 
- stack 1: 0x750
- stack 0: 0xD1
4946	 3CB	JUMP		 	 
- stack 0: 0x750
4947	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x750
4948	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x750
- stack 0: 0x750
4949	 D3	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0xD1001900EB001B01050198031800000086000F040E0000040E000000A0000B
4950	 D4	PUSH1	E0	 	 
- stack 2: 0x750
- stack 1: 0xD1001900EB001B01050198031800000086000F040E0000040E000000A0000B
- stack 0: 0xE0
4951	 D6	SHR		 	 
- stack 1: 0x750
- stack 0: 0xD10019
4952	 D7	PUSH2	FFFF	 	 
- stack 2: 0x750
- stack 1: 0xD10019
- stack 0: 0xFFFF
4953	 DA	AND		 	 
- stack 1: 0x750
- stack 0: 0x19
4954	 DB	PUSH1	01	 	 
- stack 2: 0x750
- stack 1: 0x19
- stack 0: 0x1
4955	 DD	SIGNEXTEND		 	 
- stack 1: 0x750
- stack 0: 0x19
4956	 DE	PUSH2	03A0	 	 
- stack 2: 0x750
- stack 1: 0x19
- stack 0: 0x3A0
4957	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x750
4958	 E2	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
4959	 E4	ADD		 	 
- stack 0: 0x754
4960	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
4961	 E6	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0xEB001B01050198031800000086000F040E0000040E000000A0000B00BA0000
4962	 E7	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0xEB001B01050198031800000086000F040E0000040E000000A0000B00BA0000
- stack 0: 0xF0
4963	 E9	SHR		 	 
- stack 1: 0x754
- stack 0: 0xEB
4964	 EA	JUMP		 	 
- stack 0: 0x754
4965	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x754
4966	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
4967	 ED	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0xEB001B01050198031800000086000F040E0000040E000000A0000B00BA0000
4968	 EE	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0xEB001B01050198031800000086000F040E0000040E000000A0000B00BA0000
- stack 0: 0xE0
4969	 F0	SHR		 	 
- stack 1: 0x754
- stack 0: 0xEB001B
4970	 F1	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0xEB001B
- stack 0: 0xFFFF
4971	 F4	AND		 	 
- stack 1: 0x754
- stack 0: 0x1B
4972	 F5	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0x1B
- stack 0: 0x1
4973	 F7	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0x1B
4974	 F8	PUSH2	0380	 	 
- stack 2: 0x754
- stack 1: 0x1B
- stack 0: 0x380
4975	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x754
4976	 FC	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
4977	 FE	ADD		 	 
- stack 0: 0x758
4978	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
4979	 100	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x1050198031800000086000F040E0000040E000000A0000B00BA000003510001
4980	 101	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0x1050198031800000086000F040E0000040E000000A0000B00BA000003510001
- stack 0: 0xF0
4981	 103	SHR		 	 
- stack 1: 0x758
- stack 0: 0x105
4982	 104	JUMP		 	 
- stack 0: 0x758
4983	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x758
4984	 106	PUSH2	0060	 	 
- stack 1: 0x758
- stack 0: 0x60
4985	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x758
- stack 0: 0x19
4986	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x758
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
4987	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x758
- stack 0: 0x19
4988	 110	PUSH2	03A0	 	 
- stack 2: 0x758
- stack 1: 0x19
- stack 0: 0x3A0
4989	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x758
- stack 1: 0x19
- stack 0: 0x19
4990	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x758
- stack 2: 0x19
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
4991	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x758
- stack 1: 0x19
- stack 0: 0x19
4992	 11A	SUB		 	 
- stack 1: 0x758
- stack 0: 0x0
4993	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x758
- stack 1: 0x0
- stack 0: 0x123
4994	 11E	JUMPI		 	 
- stack 0: 0x758
4995	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x758
- stack 0: 0x13D
4996	 122	JUMP		 	 
- stack 0: 0x758
4997	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x758
4998	 13E	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
4999	 140	ADD		 	 
- stack 0: 0x75C
5000	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
5001	 142	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x31800000086000F040E0000040E000000A0000B00BA00000351000103700002
5002	 143	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x31800000086000F040E0000040E000000A0000B00BA00000351000103700002
- stack 0: 0xF0
5003	 145	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x318
5004	 146	JUMP		 	 
- stack 0: 0x75C
5005	 318	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x75C
5006	 319	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
5007	 31A	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x31800000086000F040E0000040E000000A0000B00BA00000351000103700002
5008	 31B	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x31800000086000F040E0000040E000000A0000B00BA00000351000103700002
- stack 0: 0xE0
5009	 31D	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x3180000
5010	 31E	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x3180000
- stack 0: 0xFFFF
5011	 321	AND		 	 
- stack 1: 0x75C
- stack 0: 0x0
5012	 322	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x0
- stack 0: 0x1
5013	 324	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x0
5014	 325	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x0
- stack 0: 0x80
5015	 328	MSTORE		 	  ;; # store to x4
- stack 0: 0x75C
5016	 329	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
5017	 32B	ADD		 	 
- stack 0: 0x760
5018	 32C	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
5019	 32D	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x86000F040E0000040E000000A0000B00BA00000351000103700002038AFFE4
5020	 32E	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x86000F040E0000040E000000A0000B00BA00000351000103700002038AFFE4
- stack 0: 0xF0
5021	 330	SHR		 	 
- stack 1: 0x760
- stack 0: 0x86
5022	 331	JUMP		 	 
- stack 0: 0x760
5023	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x760
5024	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
5025	 88	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x86000F040E0000040E000000A0000B00BA00000351000103700002038AFFE4
5026	 89	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0x86000F040E0000040E000000A0000B00BA00000351000103700002038AFFE4
- stack 0: 0xE0
5027	 8B	SHR		 	 
- stack 1: 0x760
- stack 0: 0x86000F
5028	 8C	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0x86000F
- stack 0: 0xFFFF
5029	 8F	AND		 	 
- stack 1: 0x760
- stack 0: 0xF
5030	 90	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0xF
- stack 0: 0x1
5031	 92	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0xF
5032	 93	PUSH2	0020	 	 
- stack 2: 0x760
- stack 1: 0xF
- stack 0: 0x20
5033	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x760
5034	 97	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
5035	 99	ADD		 	 
- stack 0: 0x764
5036	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
5037	 9B	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x40E0000040E000000A0000B00BA00000351000103700002038AFFE400D1001A
5038	 9C	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x40E0000040E000000A0000B00BA00000351000103700002038AFFE400D1001A
- stack 0: 0xF0
5039	 9E	SHR		 	 
- stack 1: 0x764
- stack 0: 0x40E
5040	 9F	JUMP		 	 
- stack 0: 0x764
5041	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x764
5042	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
5043	 410	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x40E0000040E000000A0000B00BA00000351000103700002038AFFE400D1001A
5044	 411	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0x40E0000040E000000A0000B00BA00000351000103700002038AFFE400D1001A
- stack 0: 0xE0
5045	 413	SHR		 	 
- stack 1: 0x764
- stack 0: 0x40E0000
5046	 414	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0x40E0000
- stack 0: 0xFFFF
5047	 417	AND		 	 
- stack 1: 0x764
- stack 0: 0x0
5048	 418	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0x0
- stack 0: 0x1
5049	 41A	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0x0
5050	 41B	POP		 	 
- stack 0: 0x764
5051	 41C	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
5052	 41E	ADD		 	 
- stack 0: 0x768
5053	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
5054	 420	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x40E000000A0000B00BA00000351000103700002038AFFE400D1001A00EB001C
5055	 421	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x40E000000A0000B00BA00000351000103700002038AFFE400D1001A00EB001C
- stack 0: 0xF0
5056	 423	SHR		 	 
- stack 1: 0x768
- stack 0: 0x40E
5057	 424	JUMP		 	 
- stack 0: 0x768
5058	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x768
5059	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x768
- stack 0: 0x768
5060	 410	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x40E000000A0000B00BA00000351000103700002038AFFE400D1001A00EB001C
5061	 411	PUSH1	E0	 	 
- stack 2: 0x768
- stack 1: 0x40E000000A0000B00BA00000351000103700002038AFFE400D1001A00EB001C
- stack 0: 0xE0
5062	 413	SHR		 	 
- stack 1: 0x768
- stack 0: 0x40E0000
5063	 414	PUSH2	FFFF	 	 
- stack 2: 0x768
- stack 1: 0x40E0000
- stack 0: 0xFFFF
5064	 417	AND		 	 
- stack 1: 0x768
- stack 0: 0x0
5065	 418	PUSH1	01	 	 
- stack 2: 0x768
- stack 1: 0x0
- stack 0: 0x1
5066	 41A	SIGNEXTEND		 	 
- stack 1: 0x768
- stack 0: 0x0
5067	 41B	POP		 	 
- stack 0: 0x768
5068	 41C	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
5069	 41E	ADD		 	 
- stack 0: 0x76C
5070	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
5071	 420	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0xA0000B00BA00000351000103700002038AFFE400D1001A00EB001C01050168
5072	 421	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0xA0000B00BA00000351000103700002038AFFE400D1001A00EB001C01050168
- stack 0: 0xF0
5073	 423	SHR		 	 
- stack 1: 0x76C
- stack 0: 0xA0
5074	 424	JUMP		 	 
- stack 0: 0x76C
5075	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x76C
5076	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x76C
- stack 0: 0x76C
5077	 A2	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0xA0000B00BA00000351000103700002038AFFE400D1001A00EB001C01050168
5078	 A3	PUSH1	E0	 	 
- stack 2: 0x76C
- stack 1: 0xA0000B00BA00000351000103700002038AFFE400D1001A00EB001C01050168
- stack 0: 0xE0
5079	 A5	SHR		 	 
- stack 1: 0x76C
- stack 0: 0xA0000B
5080	 A6	PUSH2	FFFF	 	 
- stack 2: 0x76C
- stack 1: 0xA0000B
- stack 0: 0xFFFF
5081	 A9	AND		 	 
- stack 1: 0x76C
- stack 0: 0xB
5082	 AA	PUSH1	01	 	 
- stack 2: 0x76C
- stack 1: 0xB
- stack 0: 0x1
5083	 AC	SIGNEXTEND		 	 
- stack 1: 0x76C
- stack 0: 0xB
5084	 AD	PUSH2	0040	 	 
- stack 2: 0x76C
- stack 1: 0xB
- stack 0: 0x40
5085	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x76C
5086	 B1	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
5087	 B3	ADD		 	 
- stack 0: 0x770
5088	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
5089	 B5	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0xBA00000351000103700002038AFFE400D1001A00EB001C0105016803180000
5090	 B6	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0xBA00000351000103700002038AFFE400D1001A00EB001C0105016803180000
- stack 0: 0xF0
5091	 B8	SHR		 	 
- stack 1: 0x770
- stack 0: 0xBA
5092	 B9	JUMP		 	 
- stack 0: 0x770
5093	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x770
5094	 BB	PUSH2	0020	 	 
- stack 1: 0x770
- stack 0: 0x20
5095	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x770
- stack 0: 0xF
5096	 BF	PUSH2	0040	 	 
- stack 2: 0x770
- stack 1: 0xF
- stack 0: 0x40
5097	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x770
- stack 1: 0xF
- stack 0: 0xB
5098	 C3	ADD		 	 
- stack 1: 0x770
- stack 0: 0x1A
5099	 C4	PUSH2	0060	 	 
- stack 2: 0x770
- stack 1: 0x1A
- stack 0: 0x60
5100	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x770
5101	 C8	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
5102	 CA	ADD		 	 
- stack 0: 0x774
5103	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
5104	 CC	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x351000103700002038AFFE400D1001A00EB001C010501680318000000A0000B
5105	 CD	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x351000103700002038AFFE400D1001A00EB001C010501680318000000A0000B
- stack 0: 0xF0
5106	 CF	SHR		 	 
- stack 1: 0x774
- stack 0: 0x351
5107	 D0	JUMP		 	 
- stack 0: 0x774
5108	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x774
5109	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x774
- stack 0: 0x774
5110	 353	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x351000103700002038AFFE400D1001A00EB001C010501680318000000A0000B
5111	 354	PUSH1	E0	 	 
- stack 2: 0x774
- stack 1: 0x351000103700002038AFFE400D1001A00EB001C010501680318000000A0000B
- stack 0: 0xE0
5112	 356	SHR		 	 
- stack 1: 0x774
- stack 0: 0x3510001
5113	 357	PUSH2	FFFF	 	 
- stack 2: 0x774
- stack 1: 0x3510001
- stack 0: 0xFFFF
5114	 35A	AND		 	 
- stack 1: 0x774
- stack 0: 0x1
5115	 35B	PUSH1	01	 	 
- stack 2: 0x774
- stack 1: 0x1
- stack 0: 0x1
5116	 35D	SIGNEXTEND		 	 
- stack 1: 0x774
- stack 0: 0x1
5117	 35E	PUSH2	0080	 	 
- stack 2: 0x774
- stack 1: 0x1
- stack 0: 0x80
5118	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x774
- stack 1: 0x1
- stack 0: 0x0
5119	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x774
- stack 0: 0x1
5120	 363	PUSH2	0080	 	 
- stack 2: 0x774
- stack 1: 0x1
- stack 0: 0x80
5121	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x774
5122	 367	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
5123	 369	ADD		 	 
- stack 0: 0x778
5124	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
5125	 36B	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x3700002038AFFE400D1001A00EB001C010501680318000000A0000B0086000D
5126	 36C	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x3700002038AFFE400D1001A00EB001C010501680318000000A0000B0086000D
- stack 0: 0xF0
5127	 36E	SHR		 	 
- stack 1: 0x778
- stack 0: 0x370
5128	 36F	JUMP		 	 
- stack 0: 0x778
5129	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x778
5130	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x778
- stack 0: 0x778
5131	 372	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x3700002038AFFE400D1001A00EB001C010501680318000000A0000B0086000D
5132	 373	PUSH1	E0	 	 
- stack 2: 0x778
- stack 1: 0x3700002038AFFE400D1001A00EB001C010501680318000000A0000B0086000D
- stack 0: 0xE0
5133	 375	SHR		 	 
- stack 1: 0x778
- stack 0: 0x3700002
5134	 376	PUSH2	FFFF	 	 
- stack 2: 0x778
- stack 1: 0x3700002
- stack 0: 0xFFFF
5135	 379	AND		 	 
- stack 1: 0x778
- stack 0: 0x2
5136	 37A	PUSH1	01	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0x1
5137	 37C	SIGNEXTEND		 	 
- stack 1: 0x778
- stack 0: 0x2
5138	 37D	PUSH2	00A0	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0xA0
5139	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x778
5140	 381	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
5141	 383	ADD		 	 
- stack 0: 0x77C
5142	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
5143	 385	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x38AFFE400D1001A00EB001C010501680318000000A0000B0086000D00BA0000
5144	 386	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x38AFFE400D1001A00EB001C010501680318000000A0000B0086000D00BA0000
- stack 0: 0xF0
5145	 388	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x38A
5146	 389	JUMP		 	 
- stack 0: 0x77C
5147	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x77C
5148	 38B	PUSH2	0080	 	 
- stack 1: 0x77C
- stack 0: 0x80
5149	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x77C
- stack 0: 0x1
5150	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5151	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x77C
- stack 0: 0x1
5152	 395	PUSH2	00A0	 	 
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0xA0
5153	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0x2
5154	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x77C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5155	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0x2
5156	 39F	SUB		 	 
- stack 1: 0x77C
- stack 0: 0x1
5157	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0x3A8
5158	 3A3	JUMPI		 	 
- stack 0: 0x77C
5159	 3A8	JUMPDEST		 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x77C
5160	 3A9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x77C
- stack 0: 0x77C
5161	 3AA	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x38AFFE400D1001A00EB001C010501680318000000A0000B0086000D00BA0000
5162	 3AB	PUSH1	E0	 	 
- stack 2: 0x77C
- stack 1: 0x38AFFE400D1001A00EB001C010501680318000000A0000B0086000D00BA0000
- stack 0: 0xE0
5163	 3AD	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x38AFFE4
5164	 3AE	PUSH2	FFFF	 	 
- stack 2: 0x77C
- stack 1: 0x38AFFE4
- stack 0: 0xFFFF
5165	 3B1	AND		 	 
- stack 1: 0x77C
- stack 0: 0xFFE4
5166	 3B2	PUSH1	01	 	 
- stack 2: 0x77C
- stack 1: 0xFFE4
- stack 0: 0x1
5167	 3B4	SIGNEXTEND		 	 
- stack 1: 0x77C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
5168	 3B5	ADD		 	 
- stack 0: 0x760
5169	 3B6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x760
- stack 0: 0xFFFFFFFF
5170	 3BB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x760
5171	 3BC	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
5172	 3BD	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x86000F040E0000040E000000A0000B00BA00000351000103700002038AFFE4
5173	 3BE	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x86000F040E0000040E000000A0000B00BA00000351000103700002038AFFE4
- stack 0: 0xF0
5174	 3C0	SHR		 	 
- stack 1: 0x760
- stack 0: 0x86
5175	 3C1	JUMP		 	 
- stack 0: 0x760
5176	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x760
5177	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
5178	 88	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x86000F040E0000040E000000A0000B00BA00000351000103700002038AFFE4
5179	 89	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0x86000F040E0000040E000000A0000B00BA00000351000103700002038AFFE4
- stack 0: 0xE0
5180	 8B	SHR		 	 
- stack 1: 0x760
- stack 0: 0x86000F
5181	 8C	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0x86000F
- stack 0: 0xFFFF
5182	 8F	AND		 	 
- stack 1: 0x760
- stack 0: 0xF
5183	 90	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0xF
- stack 0: 0x1
5184	 92	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0xF
5185	 93	PUSH2	0020	 	 
- stack 2: 0x760
- stack 1: 0xF
- stack 0: 0x20
5186	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x760
5187	 97	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
5188	 99	ADD		 	 
- stack 0: 0x764
5189	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
5190	 9B	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x40E0000040E000000A0000B00BA00000351000103700002038AFFE400D1001A
5191	 9C	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x40E0000040E000000A0000B00BA00000351000103700002038AFFE400D1001A
- stack 0: 0xF0
5192	 9E	SHR		 	 
- stack 1: 0x764
- stack 0: 0x40E
5193	 9F	JUMP		 	 
- stack 0: 0x764
5194	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x764
5195	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
5196	 410	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x40E0000040E000000A0000B00BA00000351000103700002038AFFE400D1001A
5197	 411	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0x40E0000040E000000A0000B00BA00000351000103700002038AFFE400D1001A
- stack 0: 0xE0
5198	 413	SHR		 	 
- stack 1: 0x764
- stack 0: 0x40E0000
5199	 414	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0x40E0000
- stack 0: 0xFFFF
5200	 417	AND		 	 
- stack 1: 0x764
- stack 0: 0x0
5201	 418	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0x0
- stack 0: 0x1
5202	 41A	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0x0
5203	 41B	POP		 	 
- stack 0: 0x764
5204	 41C	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
5205	 41E	ADD		 	 
- stack 0: 0x768
5206	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
5207	 420	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x40E000000A0000B00BA00000351000103700002038AFFE400D1001A00EB001C
5208	 421	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x40E000000A0000B00BA00000351000103700002038AFFE400D1001A00EB001C
- stack 0: 0xF0
5209	 423	SHR		 	 
- stack 1: 0x768
- stack 0: 0x40E
5210	 424	JUMP		 	 
- stack 0: 0x768
5211	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x768
5212	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x768
- stack 0: 0x768
5213	 410	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x40E000000A0000B00BA00000351000103700002038AFFE400D1001A00EB001C
5214	 411	PUSH1	E0	 	 
- stack 2: 0x768
- stack 1: 0x40E000000A0000B00BA00000351000103700002038AFFE400D1001A00EB001C
- stack 0: 0xE0
5215	 413	SHR		 	 
- stack 1: 0x768
- stack 0: 0x40E0000
5216	 414	PUSH2	FFFF	 	 
- stack 2: 0x768
- stack 1: 0x40E0000
- stack 0: 0xFFFF
5217	 417	AND		 	 
- stack 1: 0x768
- stack 0: 0x0
5218	 418	PUSH1	01	 	 
- stack 2: 0x768
- stack 1: 0x0
- stack 0: 0x1
5219	 41A	SIGNEXTEND		 	 
- stack 1: 0x768
- stack 0: 0x0
5220	 41B	POP		 	 
- stack 0: 0x768
5221	 41C	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
5222	 41E	ADD		 	 
- stack 0: 0x76C
5223	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
5224	 420	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0xA0000B00BA00000351000103700002038AFFE400D1001A00EB001C01050168
5225	 421	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0xA0000B00BA00000351000103700002038AFFE400D1001A00EB001C01050168
- stack 0: 0xF0
5226	 423	SHR		 	 
- stack 1: 0x76C
- stack 0: 0xA0
5227	 424	JUMP		 	 
- stack 0: 0x76C
5228	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x76C
5229	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x76C
- stack 0: 0x76C
5230	 A2	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0xA0000B00BA00000351000103700002038AFFE400D1001A00EB001C01050168
5231	 A3	PUSH1	E0	 	 
- stack 2: 0x76C
- stack 1: 0xA0000B00BA00000351000103700002038AFFE400D1001A00EB001C01050168
- stack 0: 0xE0
5232	 A5	SHR		 	 
- stack 1: 0x76C
- stack 0: 0xA0000B
5233	 A6	PUSH2	FFFF	 	 
- stack 2: 0x76C
- stack 1: 0xA0000B
- stack 0: 0xFFFF
5234	 A9	AND		 	 
- stack 1: 0x76C
- stack 0: 0xB
5235	 AA	PUSH1	01	 	 
- stack 2: 0x76C
- stack 1: 0xB
- stack 0: 0x1
5236	 AC	SIGNEXTEND		 	 
- stack 1: 0x76C
- stack 0: 0xB
5237	 AD	PUSH2	0040	 	 
- stack 2: 0x76C
- stack 1: 0xB
- stack 0: 0x40
5238	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x76C
5239	 B1	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
5240	 B3	ADD		 	 
- stack 0: 0x770
5241	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
5242	 B5	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0xBA00000351000103700002038AFFE400D1001A00EB001C0105016803180000
5243	 B6	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0xBA00000351000103700002038AFFE400D1001A00EB001C0105016803180000
- stack 0: 0xF0
5244	 B8	SHR		 	 
- stack 1: 0x770
- stack 0: 0xBA
5245	 B9	JUMP		 	 
- stack 0: 0x770
5246	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x770
5247	 BB	PUSH2	0020	 	 
- stack 1: 0x770
- stack 0: 0x20
5248	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x770
- stack 0: 0xF
5249	 BF	PUSH2	0040	 	 
- stack 2: 0x770
- stack 1: 0xF
- stack 0: 0x40
5250	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x770
- stack 1: 0xF
- stack 0: 0xB
5251	 C3	ADD		 	 
- stack 1: 0x770
- stack 0: 0x1A
5252	 C4	PUSH2	0060	 	 
- stack 2: 0x770
- stack 1: 0x1A
- stack 0: 0x60
5253	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x770
5254	 C8	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
5255	 CA	ADD		 	 
- stack 0: 0x774
5256	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
5257	 CC	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x351000103700002038AFFE400D1001A00EB001C010501680318000000A0000B
5258	 CD	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x351000103700002038AFFE400D1001A00EB001C010501680318000000A0000B
- stack 0: 0xF0
5259	 CF	SHR		 	 
- stack 1: 0x774
- stack 0: 0x351
5260	 D0	JUMP		 	 
- stack 0: 0x774
5261	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x774
5262	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x774
- stack 0: 0x774
5263	 353	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x351000103700002038AFFE400D1001A00EB001C010501680318000000A0000B
5264	 354	PUSH1	E0	 	 
- stack 2: 0x774
- stack 1: 0x351000103700002038AFFE400D1001A00EB001C010501680318000000A0000B
- stack 0: 0xE0
5265	 356	SHR		 	 
- stack 1: 0x774
- stack 0: 0x3510001
5266	 357	PUSH2	FFFF	 	 
- stack 2: 0x774
- stack 1: 0x3510001
- stack 0: 0xFFFF
5267	 35A	AND		 	 
- stack 1: 0x774
- stack 0: 0x1
5268	 35B	PUSH1	01	 	 
- stack 2: 0x774
- stack 1: 0x1
- stack 0: 0x1
5269	 35D	SIGNEXTEND		 	 
- stack 1: 0x774
- stack 0: 0x1
5270	 35E	PUSH2	0080	 	 
- stack 2: 0x774
- stack 1: 0x1
- stack 0: 0x80
5271	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x774
- stack 1: 0x1
- stack 0: 0x1
5272	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x774
- stack 0: 0x2
5273	 363	PUSH2	0080	 	 
- stack 2: 0x774
- stack 1: 0x2
- stack 0: 0x80
5274	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x774
5275	 367	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
5276	 369	ADD		 	 
- stack 0: 0x778
5277	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
5278	 36B	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x3700002038AFFE400D1001A00EB001C010501680318000000A0000B0086000D
5279	 36C	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x3700002038AFFE400D1001A00EB001C010501680318000000A0000B0086000D
- stack 0: 0xF0
5280	 36E	SHR		 	 
- stack 1: 0x778
- stack 0: 0x370
5281	 36F	JUMP		 	 
- stack 0: 0x778
5282	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x778
5283	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x778
- stack 0: 0x778
5284	 372	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x3700002038AFFE400D1001A00EB001C010501680318000000A0000B0086000D
5285	 373	PUSH1	E0	 	 
- stack 2: 0x778
- stack 1: 0x3700002038AFFE400D1001A00EB001C010501680318000000A0000B0086000D
- stack 0: 0xE0
5286	 375	SHR		 	 
- stack 1: 0x778
- stack 0: 0x3700002
5287	 376	PUSH2	FFFF	 	 
- stack 2: 0x778
- stack 1: 0x3700002
- stack 0: 0xFFFF
5288	 379	AND		 	 
- stack 1: 0x778
- stack 0: 0x2
5289	 37A	PUSH1	01	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0x1
5290	 37C	SIGNEXTEND		 	 
- stack 1: 0x778
- stack 0: 0x2
5291	 37D	PUSH2	00A0	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0xA0
5292	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x778
5293	 381	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
5294	 383	ADD		 	 
- stack 0: 0x77C
5295	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
5296	 385	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x38AFFE400D1001A00EB001C010501680318000000A0000B0086000D00BA0000
5297	 386	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x38AFFE400D1001A00EB001C010501680318000000A0000B0086000D00BA0000
- stack 0: 0xF0
5298	 388	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x38A
5299	 389	JUMP		 	 
- stack 0: 0x77C
5300	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x77C
5301	 38B	PUSH2	0080	 	 
- stack 1: 0x77C
- stack 0: 0x80
5302	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x77C
- stack 0: 0x2
5303	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x77C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5304	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x77C
- stack 0: 0x2
5305	 395	PUSH2	00A0	 	 
- stack 2: 0x77C
- stack 1: 0x2
- stack 0: 0xA0
5306	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x77C
- stack 1: 0x2
- stack 0: 0x2
5307	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x77C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5308	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x77C
- stack 1: 0x2
- stack 0: 0x2
5309	 39F	SUB		 	 
- stack 1: 0x77C
- stack 0: 0x0
5310	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x77C
- stack 1: 0x0
- stack 0: 0x3A8
5311	 3A3	JUMPI		 	 
- stack 0: 0x77C
5312	 3A4	PUSH2	03C2	 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 1: 0x77C
- stack 0: 0x3C2
5313	 3A7	JUMP		 	 
- stack 0: 0x77C
5314	 3C2	JUMPDEST		 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x77C
5315	 3C3	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
5316	 3C5	ADD		 	 
- stack 0: 0x780
5317	 3C6	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
5318	 3C7	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xD1001A00EB001C010501680318000000A0000B0086000D00BA000003510001
5319	 3C8	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0xD1001A00EB001C010501680318000000A0000B0086000D00BA000003510001
- stack 0: 0xF0
5320	 3CA	SHR		 	 
- stack 1: 0x780
- stack 0: 0xD1
5321	 3CB	JUMP		 	 
- stack 0: 0x780
5322	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x780
5323	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x780
- stack 0: 0x780
5324	 D3	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xD1001A00EB001C010501680318000000A0000B0086000D00BA000003510001
5325	 D4	PUSH1	E0	 	 
- stack 2: 0x780
- stack 1: 0xD1001A00EB001C010501680318000000A0000B0086000D00BA000003510001
- stack 0: 0xE0
5326	 D6	SHR		 	 
- stack 1: 0x780
- stack 0: 0xD1001A
5327	 D7	PUSH2	FFFF	 	 
- stack 2: 0x780
- stack 1: 0xD1001A
- stack 0: 0xFFFF
5328	 DA	AND		 	 
- stack 1: 0x780
- stack 0: 0x1A
5329	 DB	PUSH1	01	 	 
- stack 2: 0x780
- stack 1: 0x1A
- stack 0: 0x1
5330	 DD	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0x1A
5331	 DE	PUSH2	03A0	 	 
- stack 2: 0x780
- stack 1: 0x1A
- stack 0: 0x3A0
5332	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x780
5333	 E2	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
5334	 E4	ADD		 	 
- stack 0: 0x784
5335	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
5336	 E6	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0xEB001C010501680318000000A0000B0086000D00BA00000351000103700002
5337	 E7	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0xEB001C010501680318000000A0000B0086000D00BA00000351000103700002
- stack 0: 0xF0
5338	 E9	SHR		 	 
- stack 1: 0x784
- stack 0: 0xEB
5339	 EA	JUMP		 	 
- stack 0: 0x784
5340	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x784
5341	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x784
- stack 0: 0x784
5342	 ED	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0xEB001C010501680318000000A0000B0086000D00BA00000351000103700002
5343	 EE	PUSH1	E0	 	 
- stack 2: 0x784
- stack 1: 0xEB001C010501680318000000A0000B0086000D00BA00000351000103700002
- stack 0: 0xE0
5344	 F0	SHR		 	 
- stack 1: 0x784
- stack 0: 0xEB001C
5345	 F1	PUSH2	FFFF	 	 
- stack 2: 0x784
- stack 1: 0xEB001C
- stack 0: 0xFFFF
5346	 F4	AND		 	 
- stack 1: 0x784
- stack 0: 0x1C
5347	 F5	PUSH1	01	 	 
- stack 2: 0x784
- stack 1: 0x1C
- stack 0: 0x1
5348	 F7	SIGNEXTEND		 	 
- stack 1: 0x784
- stack 0: 0x1C
5349	 F8	PUSH2	0380	 	 
- stack 2: 0x784
- stack 1: 0x1C
- stack 0: 0x380
5350	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x784
5351	 FC	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
5352	 FE	ADD		 	 
- stack 0: 0x788
5353	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
5354	 100	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x10501680318000000A0000B0086000D00BA00000351000103700002038AFFEC
5355	 101	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x10501680318000000A0000B0086000D00BA00000351000103700002038AFFEC
- stack 0: 0xF0
5356	 103	SHR		 	 
- stack 1: 0x788
- stack 0: 0x105
5357	 104	JUMP		 	 
- stack 0: 0x788
5358	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x788
5359	 106	PUSH2	0060	 	 
- stack 1: 0x788
- stack 0: 0x60
5360	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x788
- stack 0: 0x1A
5361	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x788
- stack 1: 0x1A
- stack 0: 0xFFFFFFFF
5362	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x788
- stack 0: 0x1A
5363	 110	PUSH2	03A0	 	 
- stack 2: 0x788
- stack 1: 0x1A
- stack 0: 0x3A0
5364	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x788
- stack 1: 0x1A
- stack 0: 0x1A
5365	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x788
- stack 2: 0x1A
- stack 1: 0x1A
- stack 0: 0xFFFFFFFF
5366	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x788
- stack 1: 0x1A
- stack 0: 0x1A
5367	 11A	SUB		 	 
- stack 1: 0x788
- stack 0: 0x0
5368	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x788
- stack 1: 0x0
- stack 0: 0x123
5369	 11E	JUMPI		 	 
- stack 0: 0x788
5370	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x788
- stack 0: 0x13D
5371	 122	JUMP		 	 
- stack 0: 0x788
5372	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x788
5373	 13E	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
5374	 140	ADD		 	 
- stack 0: 0x78C
5375	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
5376	 142	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x318000000A0000B0086000D00BA00000351000103700002038AFFEC00D10018
5377	 143	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x318000000A0000B0086000D00BA00000351000103700002038AFFEC00D10018
- stack 0: 0xF0
5378	 145	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x318
5379	 146	JUMP		 	 
- stack 0: 0x78C
5380	 318	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x78C
5381	 319	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
5382	 31A	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x318000000A0000B0086000D00BA00000351000103700002038AFFEC00D10018
5383	 31B	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0x318000000A0000B0086000D00BA00000351000103700002038AFFEC00D10018
- stack 0: 0xE0
5384	 31D	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x3180000
5385	 31E	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0x3180000
- stack 0: 0xFFFF
5386	 321	AND		 	 
- stack 1: 0x78C
- stack 0: 0x0
5387	 322	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0x0
- stack 0: 0x1
5388	 324	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0x0
5389	 325	PUSH2	0080	 	 
- stack 2: 0x78C
- stack 1: 0x0
- stack 0: 0x80
5390	 328	MSTORE		 	  ;; # store to x4
- stack 0: 0x78C
5391	 329	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
5392	 32B	ADD		 	 
- stack 0: 0x790
5393	 32C	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
5394	 32D	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0xA0000B0086000D00BA00000351000103700002038AFFEC00D1001800EB001D
5395	 32E	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0xA0000B0086000D00BA00000351000103700002038AFFEC00D1001800EB001D
- stack 0: 0xF0
5396	 330	SHR		 	 
- stack 1: 0x790
- stack 0: 0xA0
5397	 331	JUMP		 	 
- stack 0: 0x790
5398	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x790
5399	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
5400	 A2	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0xA0000B0086000D00BA00000351000103700002038AFFEC00D1001800EB001D
5401	 A3	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0xA0000B0086000D00BA00000351000103700002038AFFEC00D1001800EB001D
- stack 0: 0xE0
5402	 A5	SHR		 	 
- stack 1: 0x790
- stack 0: 0xA0000B
5403	 A6	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0xA0000B
- stack 0: 0xFFFF
5404	 A9	AND		 	 
- stack 1: 0x790
- stack 0: 0xB
5405	 AA	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0xB
- stack 0: 0x1
5406	 AC	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0xB
5407	 AD	PUSH2	0040	 	 
- stack 2: 0x790
- stack 1: 0xB
- stack 0: 0x40
5408	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x790
5409	 B1	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
5410	 B3	ADD		 	 
- stack 0: 0x794
5411	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
5412	 B5	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x86000D00BA00000351000103700002038AFFEC00D1001800EB001D01050140
5413	 B6	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0x86000D00BA00000351000103700002038AFFEC00D1001800EB001D01050140
- stack 0: 0xF0
5414	 B8	SHR		 	 
- stack 1: 0x794
- stack 0: 0x86
5415	 B9	JUMP		 	 
- stack 0: 0x794
5416	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x794
5417	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x794
- stack 0: 0x794
5418	 88	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x86000D00BA00000351000103700002038AFFEC00D1001800EB001D01050140
5419	 89	PUSH1	E0	 	 
- stack 2: 0x794
- stack 1: 0x86000D00BA00000351000103700002038AFFEC00D1001800EB001D01050140
- stack 0: 0xE0
5420	 8B	SHR		 	 
- stack 1: 0x794
- stack 0: 0x86000D
5421	 8C	PUSH2	FFFF	 	 
- stack 2: 0x794
- stack 1: 0x86000D
- stack 0: 0xFFFF
5422	 8F	AND		 	 
- stack 1: 0x794
- stack 0: 0xD
5423	 90	PUSH1	01	 	 
- stack 2: 0x794
- stack 1: 0xD
- stack 0: 0x1
5424	 92	SIGNEXTEND		 	 
- stack 1: 0x794
- stack 0: 0xD
5425	 93	PUSH2	0020	 	 
- stack 2: 0x794
- stack 1: 0xD
- stack 0: 0x20
5426	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x794
5427	 97	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
5428	 99	ADD		 	 
- stack 0: 0x798
5429	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
5430	 9B	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0xBA00000351000103700002038AFFEC00D1001800EB001D0105014003180000
5431	 9C	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0xBA00000351000103700002038AFFEC00D1001800EB001D0105014003180000
- stack 0: 0xF0
5432	 9E	SHR		 	 
- stack 1: 0x798
- stack 0: 0xBA
5433	 9F	JUMP		 	 
- stack 0: 0x798
5434	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x798
5435	 BB	PUSH2	0020	 	 
- stack 1: 0x798
- stack 0: 0x20
5436	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x798
- stack 0: 0xD
5437	 BF	PUSH2	0040	 	 
- stack 2: 0x798
- stack 1: 0xD
- stack 0: 0x40
5438	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x798
- stack 1: 0xD
- stack 0: 0xB
5439	 C3	ADD		 	 
- stack 1: 0x798
- stack 0: 0x18
5440	 C4	PUSH2	0060	 	 
- stack 2: 0x798
- stack 1: 0x18
- stack 0: 0x60
5441	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x798
5442	 C8	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
5443	 CA	ADD		 	 
- stack 0: 0x79C
5444	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
5445	 CC	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x351000103700002038AFFEC00D1001800EB001D010501400318000000A0000B
5446	 CD	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x351000103700002038AFFEC00D1001800EB001D010501400318000000A0000B
- stack 0: 0xF0
5447	 CF	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x351
5448	 D0	JUMP		 	 
- stack 0: 0x79C
5449	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x79C
5450	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
5451	 353	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x351000103700002038AFFEC00D1001800EB001D010501400318000000A0000B
5452	 354	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x351000103700002038AFFEC00D1001800EB001D010501400318000000A0000B
- stack 0: 0xE0
5453	 356	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x3510001
5454	 357	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x3510001
- stack 0: 0xFFFF
5455	 35A	AND		 	 
- stack 1: 0x79C
- stack 0: 0x1
5456	 35B	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x1
5457	 35D	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0x1
5458	 35E	PUSH2	0080	 	 
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x80
5459	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x0
5460	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x79C
- stack 0: 0x1
5461	 363	PUSH2	0080	 	 
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x80
5462	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x79C
5463	 367	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
5464	 369	ADD		 	 
- stack 0: 0x7A0
5465	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
5466	 36B	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x3700002038AFFEC00D1001800EB001D010501400318000000A0000B0086000E
5467	 36C	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x3700002038AFFEC00D1001800EB001D010501400318000000A0000B0086000E
- stack 0: 0xF0
5468	 36E	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x370
5469	 36F	JUMP		 	 
- stack 0: 0x7A0
5470	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7A0
5471	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
5472	 372	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x3700002038AFFEC00D1001800EB001D010501400318000000A0000B0086000E
5473	 373	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0x3700002038AFFEC00D1001800EB001D010501400318000000A0000B0086000E
- stack 0: 0xE0
5474	 375	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x3700002
5475	 376	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x3700002
- stack 0: 0xFFFF
5476	 379	AND		 	 
- stack 1: 0x7A0
- stack 0: 0x2
5477	 37A	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0x1
5478	 37C	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x2
5479	 37D	PUSH2	00A0	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0xA0
5480	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x7A0
5481	 381	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
5482	 383	ADD		 	 
- stack 0: 0x7A4
5483	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
5484	 385	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x38AFFEC00D1001800EB001D010501400318000000A0000B0086000E040E0000
5485	 386	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x38AFFEC00D1001800EB001D010501400318000000A0000B0086000E040E0000
- stack 0: 0xF0
5486	 388	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x38A
5487	 389	JUMP		 	 
- stack 0: 0x7A4
5488	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7A4
5489	 38B	PUSH2	0080	 	 
- stack 1: 0x7A4
- stack 0: 0x80
5490	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x7A4
- stack 0: 0x1
5491	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5492	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A4
- stack 0: 0x1
5493	 395	PUSH2	00A0	 	 
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0xA0
5494	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x2
5495	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7A4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5496	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x2
5497	 39F	SUB		 	 
- stack 1: 0x7A4
- stack 0: 0x1
5498	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x3A8
5499	 3A3	JUMPI		 	 
- stack 0: 0x7A4
5500	 3A8	JUMPDEST		 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x7A4
5501	 3A9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A4
- stack 0: 0x7A4
5502	 3AA	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x38AFFEC00D1001800EB001D010501400318000000A0000B0086000E040E0000
5503	 3AB	PUSH1	E0	 	 
- stack 2: 0x7A4
- stack 1: 0x38AFFEC00D1001800EB001D010501400318000000A0000B0086000E040E0000
- stack 0: 0xE0
5504	 3AD	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x38AFFEC
5505	 3AE	PUSH2	FFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x38AFFEC
- stack 0: 0xFFFF
5506	 3B1	AND		 	 
- stack 1: 0x7A4
- stack 0: 0xFFEC
5507	 3B2	PUSH1	01	 	 
- stack 2: 0x7A4
- stack 1: 0xFFEC
- stack 0: 0x1
5508	 3B4	SIGNEXTEND		 	 
- stack 1: 0x7A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
5509	 3B5	ADD		 	 
- stack 0: 0x790
5510	 3B6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x790
- stack 0: 0xFFFFFFFF
5511	 3BB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x790
5512	 3BC	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
5513	 3BD	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0xA0000B0086000D00BA00000351000103700002038AFFEC00D1001800EB001D
5514	 3BE	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0xA0000B0086000D00BA00000351000103700002038AFFEC00D1001800EB001D
- stack 0: 0xF0
5515	 3C0	SHR		 	 
- stack 1: 0x790
- stack 0: 0xA0
5516	 3C1	JUMP		 	 
- stack 0: 0x790
5517	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x790
5518	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
5519	 A2	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0xA0000B0086000D00BA00000351000103700002038AFFEC00D1001800EB001D
5520	 A3	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0xA0000B0086000D00BA00000351000103700002038AFFEC00D1001800EB001D
- stack 0: 0xE0
5521	 A5	SHR		 	 
- stack 1: 0x790
- stack 0: 0xA0000B
5522	 A6	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0xA0000B
- stack 0: 0xFFFF
5523	 A9	AND		 	 
- stack 1: 0x790
- stack 0: 0xB
5524	 AA	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0xB
- stack 0: 0x1
5525	 AC	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0xB
5526	 AD	PUSH2	0040	 	 
- stack 2: 0x790
- stack 1: 0xB
- stack 0: 0x40
5527	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x790
5528	 B1	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
5529	 B3	ADD		 	 
- stack 0: 0x794
5530	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
5531	 B5	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x86000D00BA00000351000103700002038AFFEC00D1001800EB001D01050140
5532	 B6	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0x86000D00BA00000351000103700002038AFFEC00D1001800EB001D01050140
- stack 0: 0xF0
5533	 B8	SHR		 	 
- stack 1: 0x794
- stack 0: 0x86
5534	 B9	JUMP		 	 
- stack 0: 0x794
5535	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x794
5536	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x794
- stack 0: 0x794
5537	 88	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x86000D00BA00000351000103700002038AFFEC00D1001800EB001D01050140
5538	 89	PUSH1	E0	 	 
- stack 2: 0x794
- stack 1: 0x86000D00BA00000351000103700002038AFFEC00D1001800EB001D01050140
- stack 0: 0xE0
5539	 8B	SHR		 	 
- stack 1: 0x794
- stack 0: 0x86000D
5540	 8C	PUSH2	FFFF	 	 
- stack 2: 0x794
- stack 1: 0x86000D
- stack 0: 0xFFFF
5541	 8F	AND		 	 
- stack 1: 0x794
- stack 0: 0xD
5542	 90	PUSH1	01	 	 
- stack 2: 0x794
- stack 1: 0xD
- stack 0: 0x1
5543	 92	SIGNEXTEND		 	 
- stack 1: 0x794
- stack 0: 0xD
5544	 93	PUSH2	0020	 	 
- stack 2: 0x794
- stack 1: 0xD
- stack 0: 0x20
5545	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x794
5546	 97	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
5547	 99	ADD		 	 
- stack 0: 0x798
5548	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
5549	 9B	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0xBA00000351000103700002038AFFEC00D1001800EB001D0105014003180000
5550	 9C	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0xBA00000351000103700002038AFFEC00D1001800EB001D0105014003180000
- stack 0: 0xF0
5551	 9E	SHR		 	 
- stack 1: 0x798
- stack 0: 0xBA
5552	 9F	JUMP		 	 
- stack 0: 0x798
5553	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x798
5554	 BB	PUSH2	0020	 	 
- stack 1: 0x798
- stack 0: 0x20
5555	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x798
- stack 0: 0xD
5556	 BF	PUSH2	0040	 	 
- stack 2: 0x798
- stack 1: 0xD
- stack 0: 0x40
5557	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x798
- stack 1: 0xD
- stack 0: 0xB
5558	 C3	ADD		 	 
- stack 1: 0x798
- stack 0: 0x18
5559	 C4	PUSH2	0060	 	 
- stack 2: 0x798
- stack 1: 0x18
- stack 0: 0x60
5560	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x798
5561	 C8	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
5562	 CA	ADD		 	 
- stack 0: 0x79C
5563	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
5564	 CC	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x351000103700002038AFFEC00D1001800EB001D010501400318000000A0000B
5565	 CD	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x351000103700002038AFFEC00D1001800EB001D010501400318000000A0000B
- stack 0: 0xF0
5566	 CF	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x351
5567	 D0	JUMP		 	 
- stack 0: 0x79C
5568	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x79C
5569	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
5570	 353	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x351000103700002038AFFEC00D1001800EB001D010501400318000000A0000B
5571	 354	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x351000103700002038AFFEC00D1001800EB001D010501400318000000A0000B
- stack 0: 0xE0
5572	 356	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x3510001
5573	 357	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x3510001
- stack 0: 0xFFFF
5574	 35A	AND		 	 
- stack 1: 0x79C
- stack 0: 0x1
5575	 35B	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x1
5576	 35D	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0x1
5577	 35E	PUSH2	0080	 	 
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x80
5578	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x1
5579	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x79C
- stack 0: 0x2
5580	 363	PUSH2	0080	 	 
- stack 2: 0x79C
- stack 1: 0x2
- stack 0: 0x80
5581	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x79C
5582	 367	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
5583	 369	ADD		 	 
- stack 0: 0x7A0
5584	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
5585	 36B	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x3700002038AFFEC00D1001800EB001D010501400318000000A0000B0086000E
5586	 36C	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x3700002038AFFEC00D1001800EB001D010501400318000000A0000B0086000E
- stack 0: 0xF0
5587	 36E	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x370
5588	 36F	JUMP		 	 
- stack 0: 0x7A0
5589	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7A0
5590	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
5591	 372	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x3700002038AFFEC00D1001800EB001D010501400318000000A0000B0086000E
5592	 373	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0x3700002038AFFEC00D1001800EB001D010501400318000000A0000B0086000E
- stack 0: 0xE0
5593	 375	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x3700002
5594	 376	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x3700002
- stack 0: 0xFFFF
5595	 379	AND		 	 
- stack 1: 0x7A0
- stack 0: 0x2
5596	 37A	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0x1
5597	 37C	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x2
5598	 37D	PUSH2	00A0	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0xA0
5599	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x7A0
5600	 381	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
5601	 383	ADD		 	 
- stack 0: 0x7A4
5602	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
5603	 385	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x38AFFEC00D1001800EB001D010501400318000000A0000B0086000E040E0000
5604	 386	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x38AFFEC00D1001800EB001D010501400318000000A0000B0086000E040E0000
- stack 0: 0xF0
5605	 388	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x38A
5606	 389	JUMP		 	 
- stack 0: 0x7A4
5607	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7A4
5608	 38B	PUSH2	0080	 	 
- stack 1: 0x7A4
- stack 0: 0x80
5609	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x7A4
- stack 0: 0x2
5610	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5611	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A4
- stack 0: 0x2
5612	 395	PUSH2	00A0	 	 
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0xA0
5613	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0x2
5614	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7A4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5615	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0x2
5616	 39F	SUB		 	 
- stack 1: 0x7A4
- stack 0: 0x0
5617	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x7A4
- stack 1: 0x0
- stack 0: 0x3A8
5618	 3A3	JUMPI		 	 
- stack 0: 0x7A4
5619	 3A4	PUSH2	03C2	 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 1: 0x7A4
- stack 0: 0x3C2
5620	 3A7	JUMP		 	 
- stack 0: 0x7A4
5621	 3C2	JUMPDEST		 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x7A4
5622	 3C3	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
5623	 3C5	ADD		 	 
- stack 0: 0x7A8
5624	 3C6	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
5625	 3C7	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0xD1001800EB001D010501400318000000A0000B0086000E040E000000BA0000
5626	 3C8	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0xD1001800EB001D010501400318000000A0000B0086000E040E000000BA0000
- stack 0: 0xF0
5627	 3CA	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0xD1
5628	 3CB	JUMP		 	 
- stack 0: 0x7A8
5629	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x7A8
5630	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A8
- stack 0: 0x7A8
5631	 D3	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0xD1001800EB001D010501400318000000A0000B0086000E040E000000BA0000
5632	 D4	PUSH1	E0	 	 
- stack 2: 0x7A8
- stack 1: 0xD1001800EB001D010501400318000000A0000B0086000E040E000000BA0000
- stack 0: 0xE0
5633	 D6	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0xD10018
5634	 D7	PUSH2	FFFF	 	 
- stack 2: 0x7A8
- stack 1: 0xD10018
- stack 0: 0xFFFF
5635	 DA	AND		 	 
- stack 1: 0x7A8
- stack 0: 0x18
5636	 DB	PUSH1	01	 	 
- stack 2: 0x7A8
- stack 1: 0x18
- stack 0: 0x1
5637	 DD	SIGNEXTEND		 	 
- stack 1: 0x7A8
- stack 0: 0x18
5638	 DE	PUSH2	03A0	 	 
- stack 2: 0x7A8
- stack 1: 0x18
- stack 0: 0x3A0
5639	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x7A8
5640	 E2	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
5641	 E4	ADD		 	 
- stack 0: 0x7AC
5642	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
5643	 E6	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0xEB001D010501400318000000A0000B0086000E040E000000BA000003510001
5644	 E7	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0xEB001D010501400318000000A0000B0086000E040E000000BA000003510001
- stack 0: 0xF0
5645	 E9	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0xEB
5646	 EA	JUMP		 	 
- stack 0: 0x7AC
5647	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7AC
5648	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7AC
- stack 0: 0x7AC
5649	 ED	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0xEB001D010501400318000000A0000B0086000E040E000000BA000003510001
5650	 EE	PUSH1	E0	 	 
- stack 2: 0x7AC
- stack 1: 0xEB001D010501400318000000A0000B0086000E040E000000BA000003510001
- stack 0: 0xE0
5651	 F0	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0xEB001D
5652	 F1	PUSH2	FFFF	 	 
- stack 2: 0x7AC
- stack 1: 0xEB001D
- stack 0: 0xFFFF
5653	 F4	AND		 	 
- stack 1: 0x7AC
- stack 0: 0x1D
5654	 F5	PUSH1	01	 	 
- stack 2: 0x7AC
- stack 1: 0x1D
- stack 0: 0x1
5655	 F7	SIGNEXTEND		 	 
- stack 1: 0x7AC
- stack 0: 0x1D
5656	 F8	PUSH2	0380	 	 
- stack 2: 0x7AC
- stack 1: 0x1D
- stack 0: 0x380
5657	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x7AC
5658	 FC	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
5659	 FE	ADD		 	 
- stack 0: 0x7B0
5660	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
5661	 100	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x10501400318000000A0000B0086000E040E000000BA00000351000103700002
5662	 101	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x10501400318000000A0000B0086000E040E000000BA00000351000103700002
- stack 0: 0xF0
5663	 103	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x105
5664	 104	JUMP		 	 
- stack 0: 0x7B0
5665	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x7B0
5666	 106	PUSH2	0060	 	 
- stack 1: 0x7B0
- stack 0: 0x60
5667	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x7B0
- stack 0: 0x18
5668	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B0
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
5669	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B0
- stack 0: 0x18
5670	 110	PUSH2	03A0	 	 
- stack 2: 0x7B0
- stack 1: 0x18
- stack 0: 0x3A0
5671	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x7B0
- stack 1: 0x18
- stack 0: 0x18
5672	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7B0
- stack 2: 0x18
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
5673	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7B0
- stack 1: 0x18
- stack 0: 0x18
5674	 11A	SUB		 	 
- stack 1: 0x7B0
- stack 0: 0x0
5675	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x7B0
- stack 1: 0x0
- stack 0: 0x123
5676	 11E	JUMPI		 	 
- stack 0: 0x7B0
5677	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x7B0
- stack 0: 0x13D
5678	 122	JUMP		 	 
- stack 0: 0x7B0
5679	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x7B0
5680	 13E	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
5681	 140	ADD		 	 
- stack 0: 0x7B4
5682	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
5683	 142	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x318000000A0000B0086000E040E000000BA00000351000103700002038AFFE8
5684	 143	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0x318000000A0000B0086000E040E000000BA00000351000103700002038AFFE8
- stack 0: 0xF0
5685	 145	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x318
5686	 146	JUMP		 	 
- stack 0: 0x7B4
5687	 318	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7B4
5688	 319	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B4
- stack 0: 0x7B4
5689	 31A	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x318000000A0000B0086000E040E000000BA00000351000103700002038AFFE8
5690	 31B	PUSH1	E0	 	 
- stack 2: 0x7B4
- stack 1: 0x318000000A0000B0086000E040E000000BA00000351000103700002038AFFE8
- stack 0: 0xE0
5691	 31D	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x3180000
5692	 31E	PUSH2	FFFF	 	 
- stack 2: 0x7B4
- stack 1: 0x3180000
- stack 0: 0xFFFF
5693	 321	AND		 	 
- stack 1: 0x7B4
- stack 0: 0x0
5694	 322	PUSH1	01	 	 
- stack 2: 0x7B4
- stack 1: 0x0
- stack 0: 0x1
5695	 324	SIGNEXTEND		 	 
- stack 1: 0x7B4
- stack 0: 0x0
5696	 325	PUSH2	0080	 	 
- stack 2: 0x7B4
- stack 1: 0x0
- stack 0: 0x80
5697	 328	MSTORE		 	  ;; # store to x4
- stack 0: 0x7B4
5698	 329	PUSH1	04	 	 
- stack 1: 0x7B4
- stack 0: 0x4
5699	 32B	ADD		 	 
- stack 0: 0x7B8
5700	 32C	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
5701	 32D	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0xA0000B0086000E040E000000BA00000351000103700002038AFFE800D10019
5702	 32E	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0xA0000B0086000E040E000000BA00000351000103700002038AFFE800D10019
- stack 0: 0xF0
5703	 330	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0xA0
5704	 331	JUMP		 	 
- stack 0: 0x7B8
5705	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7B8
5706	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B8
- stack 0: 0x7B8
5707	 A2	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0xA0000B0086000E040E000000BA00000351000103700002038AFFE800D10019
5708	 A3	PUSH1	E0	 	 
- stack 2: 0x7B8
- stack 1: 0xA0000B0086000E040E000000BA00000351000103700002038AFFE800D10019
- stack 0: 0xE0
5709	 A5	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0xA0000B
5710	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7B8
- stack 1: 0xA0000B
- stack 0: 0xFFFF
5711	 A9	AND		 	 
- stack 1: 0x7B8
- stack 0: 0xB
5712	 AA	PUSH1	01	 	 
- stack 2: 0x7B8
- stack 1: 0xB
- stack 0: 0x1
5713	 AC	SIGNEXTEND		 	 
- stack 1: 0x7B8
- stack 0: 0xB
5714	 AD	PUSH2	0040	 	 
- stack 2: 0x7B8
- stack 1: 0xB
- stack 0: 0x40
5715	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7B8
5716	 B1	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
5717	 B3	ADD		 	 
- stack 0: 0x7BC
5718	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
5719	 B5	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x86000E040E000000BA00000351000103700002038AFFE800D1001900EB001E
5720	 B6	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0x86000E040E000000BA00000351000103700002038AFFE800D1001900EB001E
- stack 0: 0xF0
5721	 B8	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x86
5722	 B9	JUMP		 	 
- stack 0: 0x7BC
5723	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x7BC
5724	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7BC
- stack 0: 0x7BC
5725	 88	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x86000E040E000000BA00000351000103700002038AFFE800D1001900EB001E
5726	 89	PUSH1	E0	 	 
- stack 2: 0x7BC
- stack 1: 0x86000E040E000000BA00000351000103700002038AFFE800D1001900EB001E
- stack 0: 0xE0
5727	 8B	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x86000E
5728	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7BC
- stack 1: 0x86000E
- stack 0: 0xFFFF
5729	 8F	AND		 	 
- stack 1: 0x7BC
- stack 0: 0xE
5730	 90	PUSH1	01	 	 
- stack 2: 0x7BC
- stack 1: 0xE
- stack 0: 0x1
5731	 92	SIGNEXTEND		 	 
- stack 1: 0x7BC
- stack 0: 0xE
5732	 93	PUSH2	0020	 	 
- stack 2: 0x7BC
- stack 1: 0xE
- stack 0: 0x20
5733	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7BC
5734	 97	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
5735	 99	ADD		 	 
- stack 0: 0x7C0
5736	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
5737	 9B	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001E01050114
5738	 9C	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001E01050114
- stack 0: 0xF0
5739	 9E	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x40E
5740	 9F	JUMP		 	 
- stack 0: 0x7C0
5741	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C0
5742	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
5743	 410	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001E01050114
5744	 411	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001E01050114
- stack 0: 0xE0
5745	 413	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x40E0000
5746	 414	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0x40E0000
- stack 0: 0xFFFF
5747	 417	AND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
5748	 418	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0x0
- stack 0: 0x1
5749	 41A	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
5750	 41B	POP		 	 
- stack 0: 0x7C0
5751	 41C	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
5752	 41E	ADD		 	 
- stack 0: 0x7C4
5753	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
5754	 420	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0xBA00000351000103700002038AFFE800D1001900EB001E0105011403180000
5755	 421	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0xBA00000351000103700002038AFFE800D1001900EB001E0105011403180000
- stack 0: 0xF0
5756	 423	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0xBA
5757	 424	JUMP		 	 
- stack 0: 0x7C4
5758	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x7C4
5759	 BB	PUSH2	0020	 	 
- stack 1: 0x7C4
- stack 0: 0x20
5760	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x7C4
- stack 0: 0xE
5761	 BF	PUSH2	0040	 	 
- stack 2: 0x7C4
- stack 1: 0xE
- stack 0: 0x40
5762	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x7C4
- stack 1: 0xE
- stack 0: 0xB
5763	 C3	ADD		 	 
- stack 1: 0x7C4
- stack 0: 0x19
5764	 C4	PUSH2	0060	 	 
- stack 2: 0x7C4
- stack 1: 0x19
- stack 0: 0x60
5765	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x7C4
5766	 C8	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
5767	 CA	ADD		 	 
- stack 0: 0x7C8
5768	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
5769	 CC	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x351000103700002038AFFE800D1001900EB001E010501140318000000A0000B
5770	 CD	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x351000103700002038AFFE800D1001900EB001E010501140318000000A0000B
- stack 0: 0xF0
5771	 CF	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x351
5772	 D0	JUMP		 	 
- stack 0: 0x7C8
5773	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7C8
5774	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
5775	 353	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x351000103700002038AFFE800D1001900EB001E010501140318000000A0000B
5776	 354	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x351000103700002038AFFE800D1001900EB001E010501140318000000A0000B
- stack 0: 0xE0
5777	 356	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x3510001
5778	 357	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x3510001
- stack 0: 0xFFFF
5779	 35A	AND		 	 
- stack 1: 0x7C8
- stack 0: 0x1
5780	 35B	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x1
5781	 35D	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0x1
5782	 35E	PUSH2	0080	 	 
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x80
5783	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x0
5784	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x7C8
- stack 0: 0x1
5785	 363	PUSH2	0080	 	 
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x80
5786	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x7C8
5787	 367	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
5788	 369	ADD		 	 
- stack 0: 0x7CC
5789	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
5790	 36B	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x3700002038AFFE800D1001900EB001E010501140318000000A0000B0086000F
5791	 36C	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x3700002038AFFE800D1001900EB001E010501140318000000A0000B0086000F
- stack 0: 0xF0
5792	 36E	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x370
5793	 36F	JUMP		 	 
- stack 0: 0x7CC
5794	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7CC
5795	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
5796	 372	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x3700002038AFFE800D1001900EB001E010501140318000000A0000B0086000F
5797	 373	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x3700002038AFFE800D1001900EB001E010501140318000000A0000B0086000F
- stack 0: 0xE0
5798	 375	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x3700002
5799	 376	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x3700002
- stack 0: 0xFFFF
5800	 379	AND		 	 
- stack 1: 0x7CC
- stack 0: 0x2
5801	 37A	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0x2
- stack 0: 0x1
5802	 37C	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0x2
5803	 37D	PUSH2	00A0	 	 
- stack 2: 0x7CC
- stack 1: 0x2
- stack 0: 0xA0
5804	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x7CC
5805	 381	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
5806	 383	ADD		 	 
- stack 0: 0x7D0
5807	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
5808	 385	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x38AFFE800D1001900EB001E010501140318000000A0000B0086000F040E0000
5809	 386	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x38AFFE800D1001900EB001E010501140318000000A0000B0086000F040E0000
- stack 0: 0xF0
5810	 388	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x38A
5811	 389	JUMP		 	 
- stack 0: 0x7D0
5812	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7D0
5813	 38B	PUSH2	0080	 	 
- stack 1: 0x7D0
- stack 0: 0x80
5814	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x7D0
- stack 0: 0x1
5815	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5816	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D0
- stack 0: 0x1
5817	 395	PUSH2	00A0	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0xA0
5818	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x2
5819	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7D0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5820	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x2
5821	 39F	SUB		 	 
- stack 1: 0x7D0
- stack 0: 0x1
5822	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x3A8
5823	 3A3	JUMPI		 	 
- stack 0: 0x7D0
5824	 3A8	JUMPDEST		 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x7D0
5825	 3A9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
5826	 3AA	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x38AFFE800D1001900EB001E010501140318000000A0000B0086000F040E0000
5827	 3AB	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x38AFFE800D1001900EB001E010501140318000000A0000B0086000F040E0000
- stack 0: 0xE0
5828	 3AD	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x38AFFE8
5829	 3AE	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x38AFFE8
- stack 0: 0xFFFF
5830	 3B1	AND		 	 
- stack 1: 0x7D0
- stack 0: 0xFFE8
5831	 3B2	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0xFFE8
- stack 0: 0x1
5832	 3B4	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
5833	 3B5	ADD		 	 
- stack 0: 0x7B8
5834	 3B6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7B8
- stack 0: 0xFFFFFFFF
5835	 3BB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7B8
5836	 3BC	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
5837	 3BD	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0xA0000B0086000E040E000000BA00000351000103700002038AFFE800D10019
5838	 3BE	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0xA0000B0086000E040E000000BA00000351000103700002038AFFE800D10019
- stack 0: 0xF0
5839	 3C0	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0xA0
5840	 3C1	JUMP		 	 
- stack 0: 0x7B8
5841	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7B8
5842	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B8
- stack 0: 0x7B8
5843	 A2	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0xA0000B0086000E040E000000BA00000351000103700002038AFFE800D10019
5844	 A3	PUSH1	E0	 	 
- stack 2: 0x7B8
- stack 1: 0xA0000B0086000E040E000000BA00000351000103700002038AFFE800D10019
- stack 0: 0xE0
5845	 A5	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0xA0000B
5846	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7B8
- stack 1: 0xA0000B
- stack 0: 0xFFFF
5847	 A9	AND		 	 
- stack 1: 0x7B8
- stack 0: 0xB
5848	 AA	PUSH1	01	 	 
- stack 2: 0x7B8
- stack 1: 0xB
- stack 0: 0x1
5849	 AC	SIGNEXTEND		 	 
- stack 1: 0x7B8
- stack 0: 0xB
5850	 AD	PUSH2	0040	 	 
- stack 2: 0x7B8
- stack 1: 0xB
- stack 0: 0x40
5851	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7B8
5852	 B1	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
5853	 B3	ADD		 	 
- stack 0: 0x7BC
5854	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
5855	 B5	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x86000E040E000000BA00000351000103700002038AFFE800D1001900EB001E
5856	 B6	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0x86000E040E000000BA00000351000103700002038AFFE800D1001900EB001E
- stack 0: 0xF0
5857	 B8	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x86
5858	 B9	JUMP		 	 
- stack 0: 0x7BC
5859	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x7BC
5860	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7BC
- stack 0: 0x7BC
5861	 88	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x86000E040E000000BA00000351000103700002038AFFE800D1001900EB001E
5862	 89	PUSH1	E0	 	 
- stack 2: 0x7BC
- stack 1: 0x86000E040E000000BA00000351000103700002038AFFE800D1001900EB001E
- stack 0: 0xE0
5863	 8B	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x86000E
5864	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7BC
- stack 1: 0x86000E
- stack 0: 0xFFFF
5865	 8F	AND		 	 
- stack 1: 0x7BC
- stack 0: 0xE
5866	 90	PUSH1	01	 	 
- stack 2: 0x7BC
- stack 1: 0xE
- stack 0: 0x1
5867	 92	SIGNEXTEND		 	 
- stack 1: 0x7BC
- stack 0: 0xE
5868	 93	PUSH2	0020	 	 
- stack 2: 0x7BC
- stack 1: 0xE
- stack 0: 0x20
5869	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7BC
5870	 97	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
5871	 99	ADD		 	 
- stack 0: 0x7C0
5872	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
5873	 9B	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001E01050114
5874	 9C	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001E01050114
- stack 0: 0xF0
5875	 9E	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x40E
5876	 9F	JUMP		 	 
- stack 0: 0x7C0
5877	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C0
5878	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
5879	 410	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001E01050114
5880	 411	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0x40E000000BA00000351000103700002038AFFE800D1001900EB001E01050114
- stack 0: 0xE0
5881	 413	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x40E0000
5882	 414	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0x40E0000
- stack 0: 0xFFFF
5883	 417	AND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
5884	 418	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0x0
- stack 0: 0x1
5885	 41A	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
5886	 41B	POP		 	 
- stack 0: 0x7C0
5887	 41C	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
5888	 41E	ADD		 	 
- stack 0: 0x7C4
5889	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
5890	 420	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0xBA00000351000103700002038AFFE800D1001900EB001E0105011403180000
5891	 421	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0xBA00000351000103700002038AFFE800D1001900EB001E0105011403180000
- stack 0: 0xF0
5892	 423	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0xBA
5893	 424	JUMP		 	 
- stack 0: 0x7C4
5894	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x7C4
5895	 BB	PUSH2	0020	 	 
- stack 1: 0x7C4
- stack 0: 0x20
5896	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x7C4
- stack 0: 0xE
5897	 BF	PUSH2	0040	 	 
- stack 2: 0x7C4
- stack 1: 0xE
- stack 0: 0x40
5898	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x7C4
- stack 1: 0xE
- stack 0: 0xB
5899	 C3	ADD		 	 
- stack 1: 0x7C4
- stack 0: 0x19
5900	 C4	PUSH2	0060	 	 
- stack 2: 0x7C4
- stack 1: 0x19
- stack 0: 0x60
5901	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x7C4
5902	 C8	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
5903	 CA	ADD		 	 
- stack 0: 0x7C8
5904	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
5905	 CC	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x351000103700002038AFFE800D1001900EB001E010501140318000000A0000B
5906	 CD	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x351000103700002038AFFE800D1001900EB001E010501140318000000A0000B
- stack 0: 0xF0
5907	 CF	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x351
5908	 D0	JUMP		 	 
- stack 0: 0x7C8
5909	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7C8
5910	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
5911	 353	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x351000103700002038AFFE800D1001900EB001E010501140318000000A0000B
5912	 354	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x351000103700002038AFFE800D1001900EB001E010501140318000000A0000B
- stack 0: 0xE0
5913	 356	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x3510001
5914	 357	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x3510001
- stack 0: 0xFFFF
5915	 35A	AND		 	 
- stack 1: 0x7C8
- stack 0: 0x1
5916	 35B	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x1
5917	 35D	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0x1
5918	 35E	PUSH2	0080	 	 
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x80
5919	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x1
5920	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x7C8
- stack 0: 0x2
5921	 363	PUSH2	0080	 	 
- stack 2: 0x7C8
- stack 1: 0x2
- stack 0: 0x80
5922	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x7C8
5923	 367	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
5924	 369	ADD		 	 
- stack 0: 0x7CC
5925	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
5926	 36B	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x3700002038AFFE800D1001900EB001E010501140318000000A0000B0086000F
5927	 36C	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x3700002038AFFE800D1001900EB001E010501140318000000A0000B0086000F
- stack 0: 0xF0
5928	 36E	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x370
5929	 36F	JUMP		 	 
- stack 0: 0x7CC
5930	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7CC
5931	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
5932	 372	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x3700002038AFFE800D1001900EB001E010501140318000000A0000B0086000F
5933	 373	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x3700002038AFFE800D1001900EB001E010501140318000000A0000B0086000F
- stack 0: 0xE0
5934	 375	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x3700002
5935	 376	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x3700002
- stack 0: 0xFFFF
5936	 379	AND		 	 
- stack 1: 0x7CC
- stack 0: 0x2
5937	 37A	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0x2
- stack 0: 0x1
5938	 37C	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0x2
5939	 37D	PUSH2	00A0	 	 
- stack 2: 0x7CC
- stack 1: 0x2
- stack 0: 0xA0
5940	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x7CC
5941	 381	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
5942	 383	ADD		 	 
- stack 0: 0x7D0
5943	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
5944	 385	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x38AFFE800D1001900EB001E010501140318000000A0000B0086000F040E0000
5945	 386	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x38AFFE800D1001900EB001E010501140318000000A0000B0086000F040E0000
- stack 0: 0xF0
5946	 388	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x38A
5947	 389	JUMP		 	 
- stack 0: 0x7D0
5948	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7D0
5949	 38B	PUSH2	0080	 	 
- stack 1: 0x7D0
- stack 0: 0x80
5950	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x7D0
- stack 0: 0x2
5951	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5952	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D0
- stack 0: 0x2
5953	 395	PUSH2	00A0	 	 
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0xA0
5954	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0x2
5955	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7D0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5956	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0x2
5957	 39F	SUB		 	 
- stack 1: 0x7D0
- stack 0: 0x0
5958	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x7D0
- stack 1: 0x0
- stack 0: 0x3A8
5959	 3A3	JUMPI		 	 
- stack 0: 0x7D0
5960	 3A4	PUSH2	03C2	 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 1: 0x7D0
- stack 0: 0x3C2
5961	 3A7	JUMP		 	 
- stack 0: 0x7D0
5962	 3C2	JUMPDEST		 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x7D0
5963	 3C3	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
5964	 3C5	ADD		 	 
- stack 0: 0x7D4
5965	 3C6	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
5966	 3C7	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0xD1001900EB001E010501140318000000A0000B0086000F040E0000040E0000
5967	 3C8	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0xD1001900EB001E010501140318000000A0000B0086000F040E0000040E0000
- stack 0: 0xF0
5968	 3CA	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0xD1
5969	 3CB	JUMP		 	 
- stack 0: 0x7D4
5970	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x7D4
5971	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
5972	 D3	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0xD1001900EB001E010501140318000000A0000B0086000F040E0000040E0000
5973	 D4	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0xD1001900EB001E010501140318000000A0000B0086000F040E0000040E0000
- stack 0: 0xE0
5974	 D6	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0xD10019
5975	 D7	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0xD10019
- stack 0: 0xFFFF
5976	 DA	AND		 	 
- stack 1: 0x7D4
- stack 0: 0x19
5977	 DB	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0x19
- stack 0: 0x1
5978	 DD	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0x19
5979	 DE	PUSH2	03A0	 	 
- stack 2: 0x7D4
- stack 1: 0x19
- stack 0: 0x3A0
5980	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x7D4
5981	 E2	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
5982	 E4	ADD		 	 
- stack 0: 0x7D8
5983	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
5984	 E6	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0xEB001E010501140318000000A0000B0086000F040E0000040E000000BA0000
5985	 E7	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0xEB001E010501140318000000A0000B0086000F040E0000040E000000BA0000
- stack 0: 0xF0
5986	 E9	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0xEB
5987	 EA	JUMP		 	 
- stack 0: 0x7D8
5988	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7D8
5989	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D8
- stack 0: 0x7D8
5990	 ED	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0xEB001E010501140318000000A0000B0086000F040E0000040E000000BA0000
5991	 EE	PUSH1	E0	 	 
- stack 2: 0x7D8
- stack 1: 0xEB001E010501140318000000A0000B0086000F040E0000040E000000BA0000
- stack 0: 0xE0
5992	 F0	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0xEB001E
5993	 F1	PUSH2	FFFF	 	 
- stack 2: 0x7D8
- stack 1: 0xEB001E
- stack 0: 0xFFFF
5994	 F4	AND		 	 
- stack 1: 0x7D8
- stack 0: 0x1E
5995	 F5	PUSH1	01	 	 
- stack 2: 0x7D8
- stack 1: 0x1E
- stack 0: 0x1
5996	 F7	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0x1E
5997	 F8	PUSH2	0380	 	 
- stack 2: 0x7D8
- stack 1: 0x1E
- stack 0: 0x380
5998	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x7D8
5999	 FC	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
6000	 FE	ADD		 	 
- stack 0: 0x7DC
6001	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
6002	 100	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x10501140318000000A0000B0086000F040E0000040E000000BA000003510001
6003	 101	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0x10501140318000000A0000B0086000F040E0000040E000000BA000003510001
- stack 0: 0xF0
6004	 103	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x105
6005	 104	JUMP		 	 
- stack 0: 0x7DC
6006	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x7DC
6007	 106	PUSH2	0060	 	 
- stack 1: 0x7DC
- stack 0: 0x60
6008	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x7DC
- stack 0: 0x19
6009	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7DC
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
6010	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7DC
- stack 0: 0x19
6011	 110	PUSH2	03A0	 	 
- stack 2: 0x7DC
- stack 1: 0x19
- stack 0: 0x3A0
6012	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x7DC
- stack 1: 0x19
- stack 0: 0x19
6013	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7DC
- stack 2: 0x19
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
6014	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7DC
- stack 1: 0x19
- stack 0: 0x19
6015	 11A	SUB		 	 
- stack 1: 0x7DC
- stack 0: 0x0
6016	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x7DC
- stack 1: 0x0
- stack 0: 0x123
6017	 11E	JUMPI		 	 
- stack 0: 0x7DC
6018	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x7DC
- stack 0: 0x13D
6019	 122	JUMP		 	 
- stack 0: 0x7DC
6020	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x7DC
6021	 13E	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
6022	 140	ADD		 	 
- stack 0: 0x7E0
6023	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
6024	 142	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x318000000A0000B0086000F040E0000040E000000BA00000351000103700002
6025	 143	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x318000000A0000B0086000F040E0000040E000000BA00000351000103700002
- stack 0: 0xF0
6026	 145	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x318
6027	 146	JUMP		 	 
- stack 0: 0x7E0
6028	 318	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7E0
6029	 319	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E0
- stack 0: 0x7E0
6030	 31A	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x318000000A0000B0086000F040E0000040E000000BA00000351000103700002
6031	 31B	PUSH1	E0	 	 
- stack 2: 0x7E0
- stack 1: 0x318000000A0000B0086000F040E0000040E000000BA00000351000103700002
- stack 0: 0xE0
6032	 31D	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x3180000
6033	 31E	PUSH2	FFFF	 	 
- stack 2: 0x7E0
- stack 1: 0x3180000
- stack 0: 0xFFFF
6034	 321	AND		 	 
- stack 1: 0x7E0
- stack 0: 0x0
6035	 322	PUSH1	01	 	 
- stack 2: 0x7E0
- stack 1: 0x0
- stack 0: 0x1
6036	 324	SIGNEXTEND		 	 
- stack 1: 0x7E0
- stack 0: 0x0
6037	 325	PUSH2	0080	 	 
- stack 2: 0x7E0
- stack 1: 0x0
- stack 0: 0x80
6038	 328	MSTORE		 	  ;; # store to x4
- stack 0: 0x7E0
6039	 329	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
6040	 32B	ADD		 	 
- stack 0: 0x7E4
6041	 32C	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
6042	 32D	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0xA0000B0086000F040E0000040E000000BA00000351000103700002038AFFE4
6043	 32E	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0xA0000B0086000F040E0000040E000000BA00000351000103700002038AFFE4
- stack 0: 0xF0
6044	 330	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0xA0
6045	 331	JUMP		 	 
- stack 0: 0x7E4
6046	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7E4
6047	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
6048	 A2	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0xA0000B0086000F040E0000040E000000BA00000351000103700002038AFFE4
6049	 A3	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0xA0000B0086000F040E0000040E000000BA00000351000103700002038AFFE4
- stack 0: 0xE0
6050	 A5	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0xA0000B
6051	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0xA0000B
- stack 0: 0xFFFF
6052	 A9	AND		 	 
- stack 1: 0x7E4
- stack 0: 0xB
6053	 AA	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0xB
- stack 0: 0x1
6054	 AC	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0xB
6055	 AD	PUSH2	0040	 	 
- stack 2: 0x7E4
- stack 1: 0xB
- stack 0: 0x40
6056	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7E4
6057	 B1	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
6058	 B3	ADD		 	 
- stack 0: 0x7E8
6059	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
6060	 B5	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x86000F040E0000040E000000BA00000351000103700002038AFFE400D1001A
6061	 B6	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x86000F040E0000040E000000BA00000351000103700002038AFFE400D1001A
- stack 0: 0xF0
6062	 B8	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x86
6063	 B9	JUMP		 	 
- stack 0: 0x7E8
6064	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x7E8
6065	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E8
- stack 0: 0x7E8
6066	 88	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x86000F040E0000040E000000BA00000351000103700002038AFFE400D1001A
6067	 89	PUSH1	E0	 	 
- stack 2: 0x7E8
- stack 1: 0x86000F040E0000040E000000BA00000351000103700002038AFFE400D1001A
- stack 0: 0xE0
6068	 8B	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x86000F
6069	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7E8
- stack 1: 0x86000F
- stack 0: 0xFFFF
6070	 8F	AND		 	 
- stack 1: 0x7E8
- stack 0: 0xF
6071	 90	PUSH1	01	 	 
- stack 2: 0x7E8
- stack 1: 0xF
- stack 0: 0x1
6072	 92	SIGNEXTEND		 	 
- stack 1: 0x7E8
- stack 0: 0xF
6073	 93	PUSH2	0020	 	 
- stack 2: 0x7E8
- stack 1: 0xF
- stack 0: 0x20
6074	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7E8
6075	 97	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
6076	 99	ADD		 	 
- stack 0: 0x7EC
6077	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
6078	 9B	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB001F
6079	 9C	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB001F
- stack 0: 0xF0
6080	 9E	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x40E
6081	 9F	JUMP		 	 
- stack 0: 0x7EC
6082	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7EC
6083	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7EC
- stack 0: 0x7EC
6084	 410	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB001F
6085	 411	PUSH1	E0	 	 
- stack 2: 0x7EC
- stack 1: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB001F
- stack 0: 0xE0
6086	 413	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x40E0000
6087	 414	PUSH2	FFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x40E0000
- stack 0: 0xFFFF
6088	 417	AND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
6089	 418	PUSH1	01	 	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x1
6090	 41A	SIGNEXTEND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
6091	 41B	POP		 	 
- stack 0: 0x7EC
6092	 41C	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
6093	 41E	ADD		 	 
- stack 0: 0x7F0
6094	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
6095	 420	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB001F010500E4
6096	 421	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB001F010500E4
- stack 0: 0xF0
6097	 423	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x40E
6098	 424	JUMP		 	 
- stack 0: 0x7F0
6099	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7F0
6100	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F0
- stack 0: 0x7F0
6101	 410	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB001F010500E4
6102	 411	PUSH1	E0	 	 
- stack 2: 0x7F0
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB001F010500E4
- stack 0: 0xE0
6103	 413	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x40E0000
6104	 414	PUSH2	FFFF	 	 
- stack 2: 0x7F0
- stack 1: 0x40E0000
- stack 0: 0xFFFF
6105	 417	AND		 	 
- stack 1: 0x7F0
- stack 0: 0x0
6106	 418	PUSH1	01	 	 
- stack 2: 0x7F0
- stack 1: 0x0
- stack 0: 0x1
6107	 41A	SIGNEXTEND		 	 
- stack 1: 0x7F0
- stack 0: 0x0
6108	 41B	POP		 	 
- stack 0: 0x7F0
6109	 41C	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
6110	 41E	ADD		 	 
- stack 0: 0x7F4
6111	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
6112	 420	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xBA00000351000103700002038AFFE400D1001A00EB001F010500E403180000
6113	 421	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0xBA00000351000103700002038AFFE400D1001A00EB001F010500E403180000
- stack 0: 0xF0
6114	 423	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xBA
6115	 424	JUMP		 	 
- stack 0: 0x7F4
6116	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x7F4
6117	 BB	PUSH2	0020	 	 
- stack 1: 0x7F4
- stack 0: 0x20
6118	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x7F4
- stack 0: 0xF
6119	 BF	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0xF
- stack 0: 0x40
6120	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x7F4
- stack 1: 0xF
- stack 0: 0xB
6121	 C3	ADD		 	 
- stack 1: 0x7F4
- stack 0: 0x1A
6122	 C4	PUSH2	0060	 	 
- stack 2: 0x7F4
- stack 1: 0x1A
- stack 0: 0x60
6123	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x7F4
6124	 C8	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
6125	 CA	ADD		 	 
- stack 0: 0x7F8
6126	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
6127	 CC	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x351000103700002038AFFE400D1001A00EB001F010500E40318000000A0000B
6128	 CD	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0x351000103700002038AFFE400D1001A00EB001F010500E40318000000A0000B
- stack 0: 0xF0
6129	 CF	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x351
6130	 D0	JUMP		 	 
- stack 0: 0x7F8
6131	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7F8
6132	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F8
- stack 0: 0x7F8
6133	 353	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x351000103700002038AFFE400D1001A00EB001F010500E40318000000A0000B
6134	 354	PUSH1	E0	 	 
- stack 2: 0x7F8
- stack 1: 0x351000103700002038AFFE400D1001A00EB001F010500E40318000000A0000B
- stack 0: 0xE0
6135	 356	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x3510001
6136	 357	PUSH2	FFFF	 	 
- stack 2: 0x7F8
- stack 1: 0x3510001
- stack 0: 0xFFFF
6137	 35A	AND		 	 
- stack 1: 0x7F8
- stack 0: 0x1
6138	 35B	PUSH1	01	 	 
- stack 2: 0x7F8
- stack 1: 0x1
- stack 0: 0x1
6139	 35D	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0x1
6140	 35E	PUSH2	0080	 	 
- stack 2: 0x7F8
- stack 1: 0x1
- stack 0: 0x80
6141	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x7F8
- stack 1: 0x1
- stack 0: 0x0
6142	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x7F8
- stack 0: 0x1
6143	 363	PUSH2	0080	 	 
- stack 2: 0x7F8
- stack 1: 0x1
- stack 0: 0x80
6144	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x7F8
6145	 367	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
6146	 369	ADD		 	 
- stack 0: 0x7FC
6147	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
6148	 36B	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x3700002038AFFE400D1001A00EB001F010500E40318000000A0000B040E0000
6149	 36C	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x3700002038AFFE400D1001A00EB001F010500E40318000000A0000B040E0000
- stack 0: 0xF0
6150	 36E	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x370
6151	 36F	JUMP		 	 
- stack 0: 0x7FC
6152	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7FC
6153	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
6154	 372	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x3700002038AFFE400D1001A00EB001F010500E40318000000A0000B040E0000
6155	 373	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0x3700002038AFFE400D1001A00EB001F010500E40318000000A0000B040E0000
- stack 0: 0xE0
6156	 375	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x3700002
6157	 376	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0x3700002
- stack 0: 0xFFFF
6158	 379	AND		 	 
- stack 1: 0x7FC
- stack 0: 0x2
6159	 37A	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0x2
- stack 0: 0x1
6160	 37C	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0x2
6161	 37D	PUSH2	00A0	 	 
- stack 2: 0x7FC
- stack 1: 0x2
- stack 0: 0xA0
6162	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x7FC
6163	 381	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
6164	 383	ADD		 	 
- stack 0: 0x800
6165	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
6166	 385	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x38AFFE400D1001A00EB001F010500E40318000000A0000B040E00000086000D
6167	 386	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x38AFFE400D1001A00EB001F010500E40318000000A0000B040E00000086000D
- stack 0: 0xF0
6168	 388	SHR		 	 
- stack 1: 0x800
- stack 0: 0x38A
6169	 389	JUMP		 	 
- stack 0: 0x800
6170	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x800
6171	 38B	PUSH2	0080	 	 
- stack 1: 0x800
- stack 0: 0x80
6172	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x800
- stack 0: 0x1
6173	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x800
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6174	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x800
- stack 0: 0x1
6175	 395	PUSH2	00A0	 	 
- stack 2: 0x800
- stack 1: 0x1
- stack 0: 0xA0
6176	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x800
- stack 1: 0x1
- stack 0: 0x2
6177	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x800
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6178	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x800
- stack 1: 0x1
- stack 0: 0x2
6179	 39F	SUB		 	 
- stack 1: 0x800
- stack 0: 0x1
6180	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x800
- stack 1: 0x1
- stack 0: 0x3A8
6181	 3A3	JUMPI		 	 
- stack 0: 0x800
6182	 3A8	JUMPDEST		 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x800
6183	 3A9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x800
- stack 0: 0x800
6184	 3AA	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x38AFFE400D1001A00EB001F010500E40318000000A0000B040E00000086000D
6185	 3AB	PUSH1	E0	 	 
- stack 2: 0x800
- stack 1: 0x38AFFE400D1001A00EB001F010500E40318000000A0000B040E00000086000D
- stack 0: 0xE0
6186	 3AD	SHR		 	 
- stack 1: 0x800
- stack 0: 0x38AFFE4
6187	 3AE	PUSH2	FFFF	 	 
- stack 2: 0x800
- stack 1: 0x38AFFE4
- stack 0: 0xFFFF
6188	 3B1	AND		 	 
- stack 1: 0x800
- stack 0: 0xFFE4
6189	 3B2	PUSH1	01	 	 
- stack 2: 0x800
- stack 1: 0xFFE4
- stack 0: 0x1
6190	 3B4	SIGNEXTEND		 	 
- stack 1: 0x800
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
6191	 3B5	ADD		 	 
- stack 0: 0x7E4
6192	 3B6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7E4
- stack 0: 0xFFFFFFFF
6193	 3BB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7E4
6194	 3BC	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
6195	 3BD	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0xA0000B0086000F040E0000040E000000BA00000351000103700002038AFFE4
6196	 3BE	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0xA0000B0086000F040E0000040E000000BA00000351000103700002038AFFE4
- stack 0: 0xF0
6197	 3C0	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0xA0
6198	 3C1	JUMP		 	 
- stack 0: 0x7E4
6199	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7E4
6200	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
6201	 A2	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0xA0000B0086000F040E0000040E000000BA00000351000103700002038AFFE4
6202	 A3	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0xA0000B0086000F040E0000040E000000BA00000351000103700002038AFFE4
- stack 0: 0xE0
6203	 A5	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0xA0000B
6204	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0xA0000B
- stack 0: 0xFFFF
6205	 A9	AND		 	 
- stack 1: 0x7E4
- stack 0: 0xB
6206	 AA	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0xB
- stack 0: 0x1
6207	 AC	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0xB
6208	 AD	PUSH2	0040	 	 
- stack 2: 0x7E4
- stack 1: 0xB
- stack 0: 0x40
6209	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7E4
6210	 B1	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
6211	 B3	ADD		 	 
- stack 0: 0x7E8
6212	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
6213	 B5	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x86000F040E0000040E000000BA00000351000103700002038AFFE400D1001A
6214	 B6	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x86000F040E0000040E000000BA00000351000103700002038AFFE400D1001A
- stack 0: 0xF0
6215	 B8	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x86
6216	 B9	JUMP		 	 
- stack 0: 0x7E8
6217	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x7E8
6218	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E8
- stack 0: 0x7E8
6219	 88	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x86000F040E0000040E000000BA00000351000103700002038AFFE400D1001A
6220	 89	PUSH1	E0	 	 
- stack 2: 0x7E8
- stack 1: 0x86000F040E0000040E000000BA00000351000103700002038AFFE400D1001A
- stack 0: 0xE0
6221	 8B	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x86000F
6222	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7E8
- stack 1: 0x86000F
- stack 0: 0xFFFF
6223	 8F	AND		 	 
- stack 1: 0x7E8
- stack 0: 0xF
6224	 90	PUSH1	01	 	 
- stack 2: 0x7E8
- stack 1: 0xF
- stack 0: 0x1
6225	 92	SIGNEXTEND		 	 
- stack 1: 0x7E8
- stack 0: 0xF
6226	 93	PUSH2	0020	 	 
- stack 2: 0x7E8
- stack 1: 0xF
- stack 0: 0x20
6227	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7E8
6228	 97	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
6229	 99	ADD		 	 
- stack 0: 0x7EC
6230	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
6231	 9B	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB001F
6232	 9C	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB001F
- stack 0: 0xF0
6233	 9E	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x40E
6234	 9F	JUMP		 	 
- stack 0: 0x7EC
6235	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7EC
6236	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7EC
- stack 0: 0x7EC
6237	 410	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB001F
6238	 411	PUSH1	E0	 	 
- stack 2: 0x7EC
- stack 1: 0x40E0000040E000000BA00000351000103700002038AFFE400D1001A00EB001F
- stack 0: 0xE0
6239	 413	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x40E0000
6240	 414	PUSH2	FFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x40E0000
- stack 0: 0xFFFF
6241	 417	AND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
6242	 418	PUSH1	01	 	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x1
6243	 41A	SIGNEXTEND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
6244	 41B	POP		 	 
- stack 0: 0x7EC
6245	 41C	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
6246	 41E	ADD		 	 
- stack 0: 0x7F0
6247	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
6248	 420	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB001F010500E4
6249	 421	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB001F010500E4
- stack 0: 0xF0
6250	 423	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x40E
6251	 424	JUMP		 	 
- stack 0: 0x7F0
6252	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7F0
6253	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F0
- stack 0: 0x7F0
6254	 410	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB001F010500E4
6255	 411	PUSH1	E0	 	 
- stack 2: 0x7F0
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001A00EB001F010500E4
- stack 0: 0xE0
6256	 413	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x40E0000
6257	 414	PUSH2	FFFF	 	 
- stack 2: 0x7F0
- stack 1: 0x40E0000
- stack 0: 0xFFFF
6258	 417	AND		 	 
- stack 1: 0x7F0
- stack 0: 0x0
6259	 418	PUSH1	01	 	 
- stack 2: 0x7F0
- stack 1: 0x0
- stack 0: 0x1
6260	 41A	SIGNEXTEND		 	 
- stack 1: 0x7F0
- stack 0: 0x0
6261	 41B	POP		 	 
- stack 0: 0x7F0
6262	 41C	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
6263	 41E	ADD		 	 
- stack 0: 0x7F4
6264	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
6265	 420	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xBA00000351000103700002038AFFE400D1001A00EB001F010500E403180000
6266	 421	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0xBA00000351000103700002038AFFE400D1001A00EB001F010500E403180000
- stack 0: 0xF0
6267	 423	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xBA
6268	 424	JUMP		 	 
- stack 0: 0x7F4
6269	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x7F4
6270	 BB	PUSH2	0020	 	 
- stack 1: 0x7F4
- stack 0: 0x20
6271	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x7F4
- stack 0: 0xF
6272	 BF	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0xF
- stack 0: 0x40
6273	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x7F4
- stack 1: 0xF
- stack 0: 0xB
6274	 C3	ADD		 	 
- stack 1: 0x7F4
- stack 0: 0x1A
6275	 C4	PUSH2	0060	 	 
- stack 2: 0x7F4
- stack 1: 0x1A
- stack 0: 0x60
6276	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x7F4
6277	 C8	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
6278	 CA	ADD		 	 
- stack 0: 0x7F8
6279	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
6280	 CC	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x351000103700002038AFFE400D1001A00EB001F010500E40318000000A0000B
6281	 CD	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0x351000103700002038AFFE400D1001A00EB001F010500E40318000000A0000B
- stack 0: 0xF0
6282	 CF	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x351
6283	 D0	JUMP		 	 
- stack 0: 0x7F8
6284	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7F8
6285	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F8
- stack 0: 0x7F8
6286	 353	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x351000103700002038AFFE400D1001A00EB001F010500E40318000000A0000B
6287	 354	PUSH1	E0	 	 
- stack 2: 0x7F8
- stack 1: 0x351000103700002038AFFE400D1001A00EB001F010500E40318000000A0000B
- stack 0: 0xE0
6288	 356	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x3510001
6289	 357	PUSH2	FFFF	 	 
- stack 2: 0x7F8
- stack 1: 0x3510001
- stack 0: 0xFFFF
6290	 35A	AND		 	 
- stack 1: 0x7F8
- stack 0: 0x1
6291	 35B	PUSH1	01	 	 
- stack 2: 0x7F8
- stack 1: 0x1
- stack 0: 0x1
6292	 35D	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0x1
6293	 35E	PUSH2	0080	 	 
- stack 2: 0x7F8
- stack 1: 0x1
- stack 0: 0x80
6294	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x7F8
- stack 1: 0x1
- stack 0: 0x1
6295	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x7F8
- stack 0: 0x2
6296	 363	PUSH2	0080	 	 
- stack 2: 0x7F8
- stack 1: 0x2
- stack 0: 0x80
6297	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x7F8
6298	 367	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
6299	 369	ADD		 	 
- stack 0: 0x7FC
6300	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
6301	 36B	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x3700002038AFFE400D1001A00EB001F010500E40318000000A0000B040E0000
6302	 36C	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x3700002038AFFE400D1001A00EB001F010500E40318000000A0000B040E0000
- stack 0: 0xF0
6303	 36E	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x370
6304	 36F	JUMP		 	 
- stack 0: 0x7FC
6305	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7FC
6306	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
6307	 372	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x3700002038AFFE400D1001A00EB001F010500E40318000000A0000B040E0000
6308	 373	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0x3700002038AFFE400D1001A00EB001F010500E40318000000A0000B040E0000
- stack 0: 0xE0
6309	 375	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x3700002
6310	 376	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0x3700002
- stack 0: 0xFFFF
6311	 379	AND		 	 
- stack 1: 0x7FC
- stack 0: 0x2
6312	 37A	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0x2
- stack 0: 0x1
6313	 37C	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0x2
6314	 37D	PUSH2	00A0	 	 
- stack 2: 0x7FC
- stack 1: 0x2
- stack 0: 0xA0
6315	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x7FC
6316	 381	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
6317	 383	ADD		 	 
- stack 0: 0x800
6318	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
6319	 385	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x38AFFE400D1001A00EB001F010500E40318000000A0000B040E00000086000D
6320	 386	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x38AFFE400D1001A00EB001F010500E40318000000A0000B040E00000086000D
- stack 0: 0xF0
6321	 388	SHR		 	 
- stack 1: 0x800
- stack 0: 0x38A
6322	 389	JUMP		 	 
- stack 0: 0x800
6323	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x800
6324	 38B	PUSH2	0080	 	 
- stack 1: 0x800
- stack 0: 0x80
6325	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x800
- stack 0: 0x2
6326	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x800
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6327	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x800
- stack 0: 0x2
6328	 395	PUSH2	00A0	 	 
- stack 2: 0x800
- stack 1: 0x2
- stack 0: 0xA0
6329	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x800
- stack 1: 0x2
- stack 0: 0x2
6330	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x800
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6331	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x800
- stack 1: 0x2
- stack 0: 0x2
6332	 39F	SUB		 	 
- stack 1: 0x800
- stack 0: 0x0
6333	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x800
- stack 1: 0x0
- stack 0: 0x3A8
6334	 3A3	JUMPI		 	 
- stack 0: 0x800
6335	 3A4	PUSH2	03C2	 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 1: 0x800
- stack 0: 0x3C2
6336	 3A7	JUMP		 	 
- stack 0: 0x800
6337	 3C2	JUMPDEST		 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x800
6338	 3C3	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
6339	 3C5	ADD		 	 
- stack 0: 0x804
6340	 3C6	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
6341	 3C7	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0xD1001A00EB001F010500E40318000000A0000B040E00000086000D00BA0000
6342	 3C8	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0xD1001A00EB001F010500E40318000000A0000B040E00000086000D00BA0000
- stack 0: 0xF0
6343	 3CA	SHR		 	 
- stack 1: 0x804
- stack 0: 0xD1
6344	 3CB	JUMP		 	 
- stack 0: 0x804
6345	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x804
6346	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
6347	 D3	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0xD1001A00EB001F010500E40318000000A0000B040E00000086000D00BA0000
6348	 D4	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0xD1001A00EB001F010500E40318000000A0000B040E00000086000D00BA0000
- stack 0: 0xE0
6349	 D6	SHR		 	 
- stack 1: 0x804
- stack 0: 0xD1001A
6350	 D7	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0xD1001A
- stack 0: 0xFFFF
6351	 DA	AND		 	 
- stack 1: 0x804
- stack 0: 0x1A
6352	 DB	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0x1A
- stack 0: 0x1
6353	 DD	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0x1A
6354	 DE	PUSH2	03A0	 	 
- stack 2: 0x804
- stack 1: 0x1A
- stack 0: 0x3A0
6355	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x804
6356	 E2	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
6357	 E4	ADD		 	 
- stack 0: 0x808
6358	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
6359	 E6	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0xEB001F010500E40318000000A0000B040E00000086000D00BA000003510001
6360	 E7	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0xEB001F010500E40318000000A0000B040E00000086000D00BA000003510001
- stack 0: 0xF0
6361	 E9	SHR		 	 
- stack 1: 0x808
- stack 0: 0xEB
6362	 EA	JUMP		 	 
- stack 0: 0x808
6363	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x808
6364	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x808
- stack 0: 0x808
6365	 ED	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0xEB001F010500E40318000000A0000B040E00000086000D00BA000003510001
6366	 EE	PUSH1	E0	 	 
- stack 2: 0x808
- stack 1: 0xEB001F010500E40318000000A0000B040E00000086000D00BA000003510001
- stack 0: 0xE0
6367	 F0	SHR		 	 
- stack 1: 0x808
- stack 0: 0xEB001F
6368	 F1	PUSH2	FFFF	 	 
- stack 2: 0x808
- stack 1: 0xEB001F
- stack 0: 0xFFFF
6369	 F4	AND		 	 
- stack 1: 0x808
- stack 0: 0x1F
6370	 F5	PUSH1	01	 	 
- stack 2: 0x808
- stack 1: 0x1F
- stack 0: 0x1
6371	 F7	SIGNEXTEND		 	 
- stack 1: 0x808
- stack 0: 0x1F
6372	 F8	PUSH2	0380	 	 
- stack 2: 0x808
- stack 1: 0x1F
- stack 0: 0x380
6373	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x808
6374	 FC	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
6375	 FE	ADD		 	 
- stack 0: 0x80C
6376	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
6377	 100	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x10500E40318000000A0000B040E00000086000D00BA00000351000103700002
6378	 101	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0x10500E40318000000A0000B040E00000086000D00BA00000351000103700002
- stack 0: 0xF0
6379	 103	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x105
6380	 104	JUMP		 	 
- stack 0: 0x80C
6381	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x80C
6382	 106	PUSH2	0060	 	 
- stack 1: 0x80C
- stack 0: 0x60
6383	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x80C
- stack 0: 0x1A
6384	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x80C
- stack 1: 0x1A
- stack 0: 0xFFFFFFFF
6385	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x80C
- stack 0: 0x1A
6386	 110	PUSH2	03A0	 	 
- stack 2: 0x80C
- stack 1: 0x1A
- stack 0: 0x3A0
6387	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x80C
- stack 1: 0x1A
- stack 0: 0x1A
6388	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x80C
- stack 2: 0x1A
- stack 1: 0x1A
- stack 0: 0xFFFFFFFF
6389	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x80C
- stack 1: 0x1A
- stack 0: 0x1A
6390	 11A	SUB		 	 
- stack 1: 0x80C
- stack 0: 0x0
6391	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x80C
- stack 1: 0x0
- stack 0: 0x123
6392	 11E	JUMPI		 	 
- stack 0: 0x80C
6393	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x80C
- stack 0: 0x13D
6394	 122	JUMP		 	 
- stack 0: 0x80C
6395	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x80C
6396	 13E	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
6397	 140	ADD		 	 
- stack 0: 0x810
6398	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
6399	 142	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x318000000A0000B040E00000086000D00BA00000351000103700002038AFFE8
6400	 143	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0x318000000A0000B040E00000086000D00BA00000351000103700002038AFFE8
- stack 0: 0xF0
6401	 145	SHR		 	 
- stack 1: 0x810
- stack 0: 0x318
6402	 146	JUMP		 	 
- stack 0: 0x810
6403	 318	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x810
6404	 319	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x810
- stack 0: 0x810
6405	 31A	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x318000000A0000B040E00000086000D00BA00000351000103700002038AFFE8
6406	 31B	PUSH1	E0	 	 
- stack 2: 0x810
- stack 1: 0x318000000A0000B040E00000086000D00BA00000351000103700002038AFFE8
- stack 0: 0xE0
6407	 31D	SHR		 	 
- stack 1: 0x810
- stack 0: 0x3180000
6408	 31E	PUSH2	FFFF	 	 
- stack 2: 0x810
- stack 1: 0x3180000
- stack 0: 0xFFFF
6409	 321	AND		 	 
- stack 1: 0x810
- stack 0: 0x0
6410	 322	PUSH1	01	 	 
- stack 2: 0x810
- stack 1: 0x0
- stack 0: 0x1
6411	 324	SIGNEXTEND		 	 
- stack 1: 0x810
- stack 0: 0x0
6412	 325	PUSH2	0080	 	 
- stack 2: 0x810
- stack 1: 0x0
- stack 0: 0x80
6413	 328	MSTORE		 	  ;; # store to x4
- stack 0: 0x810
6414	 329	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
6415	 32B	ADD		 	 
- stack 0: 0x814
6416	 32C	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
6417	 32D	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0xA0000B040E00000086000D00BA00000351000103700002038AFFE800D10018
6418	 32E	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0xA0000B040E00000086000D00BA00000351000103700002038AFFE800D10018
- stack 0: 0xF0
6419	 330	SHR		 	 
- stack 1: 0x814
- stack 0: 0xA0
6420	 331	JUMP		 	 
- stack 0: 0x814
6421	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x814
6422	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x814
- stack 0: 0x814
6423	 A2	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0xA0000B040E00000086000D00BA00000351000103700002038AFFE800D10018
6424	 A3	PUSH1	E0	 	 
- stack 2: 0x814
- stack 1: 0xA0000B040E00000086000D00BA00000351000103700002038AFFE800D10018
- stack 0: 0xE0
6425	 A5	SHR		 	 
- stack 1: 0x814
- stack 0: 0xA0000B
6426	 A6	PUSH2	FFFF	 	 
- stack 2: 0x814
- stack 1: 0xA0000B
- stack 0: 0xFFFF
6427	 A9	AND		 	 
- stack 1: 0x814
- stack 0: 0xB
6428	 AA	PUSH1	01	 	 
- stack 2: 0x814
- stack 1: 0xB
- stack 0: 0x1
6429	 AC	SIGNEXTEND		 	 
- stack 1: 0x814
- stack 0: 0xB
6430	 AD	PUSH2	0040	 	 
- stack 2: 0x814
- stack 1: 0xB
- stack 0: 0x40
6431	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x814
6432	 B1	PUSH1	04	 	 
- stack 1: 0x814
- stack 0: 0x4
6433	 B3	ADD		 	 
- stack 0: 0x818
6434	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
6435	 B5	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x40E00000086000D00BA00000351000103700002038AFFE800D1001800EB0020
6436	 B6	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x40E00000086000D00BA00000351000103700002038AFFE800D1001800EB0020
- stack 0: 0xF0
6437	 B8	SHR		 	 
- stack 1: 0x818
- stack 0: 0x40E
6438	 B9	JUMP		 	 
- stack 0: 0x818
6439	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x818
6440	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x818
- stack 0: 0x818
6441	 410	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x40E00000086000D00BA00000351000103700002038AFFE800D1001800EB0020
6442	 411	PUSH1	E0	 	 
- stack 2: 0x818
- stack 1: 0x40E00000086000D00BA00000351000103700002038AFFE800D1001800EB0020
- stack 0: 0xE0
6443	 413	SHR		 	 
- stack 1: 0x818
- stack 0: 0x40E0000
6444	 414	PUSH2	FFFF	 	 
- stack 2: 0x818
- stack 1: 0x40E0000
- stack 0: 0xFFFF
6445	 417	AND		 	 
- stack 1: 0x818
- stack 0: 0x0
6446	 418	PUSH1	01	 	 
- stack 2: 0x818
- stack 1: 0x0
- stack 0: 0x1
6447	 41A	SIGNEXTEND		 	 
- stack 1: 0x818
- stack 0: 0x0
6448	 41B	POP		 	 
- stack 0: 0x818
6449	 41C	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
6450	 41E	ADD		 	 
- stack 0: 0x81C
6451	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
6452	 420	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x86000D00BA00000351000103700002038AFFE800D1001800EB0020010500B8
6453	 421	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0x86000D00BA00000351000103700002038AFFE800D1001800EB0020010500B8
- stack 0: 0xF0
6454	 423	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x86
6455	 424	JUMP		 	 
- stack 0: 0x81C
6456	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x81C
6457	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x81C
- stack 0: 0x81C
6458	 88	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x86000D00BA00000351000103700002038AFFE800D1001800EB0020010500B8
6459	 89	PUSH1	E0	 	 
- stack 2: 0x81C
- stack 1: 0x86000D00BA00000351000103700002038AFFE800D1001800EB0020010500B8
- stack 0: 0xE0
6460	 8B	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x86000D
6461	 8C	PUSH2	FFFF	 	 
- stack 2: 0x81C
- stack 1: 0x86000D
- stack 0: 0xFFFF
6462	 8F	AND		 	 
- stack 1: 0x81C
- stack 0: 0xD
6463	 90	PUSH1	01	 	 
- stack 2: 0x81C
- stack 1: 0xD
- stack 0: 0x1
6464	 92	SIGNEXTEND		 	 
- stack 1: 0x81C
- stack 0: 0xD
6465	 93	PUSH2	0020	 	 
- stack 2: 0x81C
- stack 1: 0xD
- stack 0: 0x20
6466	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x81C
6467	 97	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
6468	 99	ADD		 	 
- stack 0: 0x820
6469	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
6470	 9B	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0xBA00000351000103700002038AFFE800D1001800EB0020010500B803180000
6471	 9C	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0xBA00000351000103700002038AFFE800D1001800EB0020010500B803180000
- stack 0: 0xF0
6472	 9E	SHR		 	 
- stack 1: 0x820
- stack 0: 0xBA
6473	 9F	JUMP		 	 
- stack 0: 0x820
6474	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x820
6475	 BB	PUSH2	0020	 	 
- stack 1: 0x820
- stack 0: 0x20
6476	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x820
- stack 0: 0xD
6477	 BF	PUSH2	0040	 	 
- stack 2: 0x820
- stack 1: 0xD
- stack 0: 0x40
6478	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x820
- stack 1: 0xD
- stack 0: 0xB
6479	 C3	ADD		 	 
- stack 1: 0x820
- stack 0: 0x18
6480	 C4	PUSH2	0060	 	 
- stack 2: 0x820
- stack 1: 0x18
- stack 0: 0x60
6481	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x820
6482	 C8	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
6483	 CA	ADD		 	 
- stack 0: 0x824
6484	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
6485	 CC	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x351000103700002038AFFE800D1001800EB0020010500B80318000000A0000B
6486	 CD	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x351000103700002038AFFE800D1001800EB0020010500B80318000000A0000B
- stack 0: 0xF0
6487	 CF	SHR		 	 
- stack 1: 0x824
- stack 0: 0x351
6488	 D0	JUMP		 	 
- stack 0: 0x824
6489	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x824
6490	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x824
- stack 0: 0x824
6491	 353	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x351000103700002038AFFE800D1001800EB0020010500B80318000000A0000B
6492	 354	PUSH1	E0	 	 
- stack 2: 0x824
- stack 1: 0x351000103700002038AFFE800D1001800EB0020010500B80318000000A0000B
- stack 0: 0xE0
6493	 356	SHR		 	 
- stack 1: 0x824
- stack 0: 0x3510001
6494	 357	PUSH2	FFFF	 	 
- stack 2: 0x824
- stack 1: 0x3510001
- stack 0: 0xFFFF
6495	 35A	AND		 	 
- stack 1: 0x824
- stack 0: 0x1
6496	 35B	PUSH1	01	 	 
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x1
6497	 35D	SIGNEXTEND		 	 
- stack 1: 0x824
- stack 0: 0x1
6498	 35E	PUSH2	0080	 	 
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x80
6499	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x0
6500	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x824
- stack 0: 0x1
6501	 363	PUSH2	0080	 	 
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x80
6502	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x824
6503	 367	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
6504	 369	ADD		 	 
- stack 0: 0x828
6505	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
6506	 36B	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x3700002038AFFE800D1001800EB0020010500B80318000000A0000B040E0000
6507	 36C	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x3700002038AFFE800D1001800EB0020010500B80318000000A0000B040E0000
- stack 0: 0xF0
6508	 36E	SHR		 	 
- stack 1: 0x828
- stack 0: 0x370
6509	 36F	JUMP		 	 
- stack 0: 0x828
6510	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x828
6511	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
6512	 372	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x3700002038AFFE800D1001800EB0020010500B80318000000A0000B040E0000
6513	 373	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0x3700002038AFFE800D1001800EB0020010500B80318000000A0000B040E0000
- stack 0: 0xE0
6514	 375	SHR		 	 
- stack 1: 0x828
- stack 0: 0x3700002
6515	 376	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0x3700002
- stack 0: 0xFFFF
6516	 379	AND		 	 
- stack 1: 0x828
- stack 0: 0x2
6517	 37A	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0x2
- stack 0: 0x1
6518	 37C	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0x2
6519	 37D	PUSH2	00A0	 	 
- stack 2: 0x828
- stack 1: 0x2
- stack 0: 0xA0
6520	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x828
6521	 381	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
6522	 383	ADD		 	 
- stack 0: 0x82C
6523	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
6524	 385	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x38AFFE800D1001800EB0020010500B80318000000A0000B040E00000086000E
6525	 386	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x38AFFE800D1001800EB0020010500B80318000000A0000B040E00000086000E
- stack 0: 0xF0
6526	 388	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x38A
6527	 389	JUMP		 	 
- stack 0: 0x82C
6528	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x82C
6529	 38B	PUSH2	0080	 	 
- stack 1: 0x82C
- stack 0: 0x80
6530	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x82C
- stack 0: 0x1
6531	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6532	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x82C
- stack 0: 0x1
6533	 395	PUSH2	00A0	 	 
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0xA0
6534	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x2
6535	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x82C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6536	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x2
6537	 39F	SUB		 	 
- stack 1: 0x82C
- stack 0: 0x1
6538	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x3A8
6539	 3A3	JUMPI		 	 
- stack 0: 0x82C
6540	 3A8	JUMPDEST		 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x82C
6541	 3A9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x82C
- stack 0: 0x82C
6542	 3AA	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x38AFFE800D1001800EB0020010500B80318000000A0000B040E00000086000E
6543	 3AB	PUSH1	E0	 	 
- stack 2: 0x82C
- stack 1: 0x38AFFE800D1001800EB0020010500B80318000000A0000B040E00000086000E
- stack 0: 0xE0
6544	 3AD	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x38AFFE8
6545	 3AE	PUSH2	FFFF	 	 
- stack 2: 0x82C
- stack 1: 0x38AFFE8
- stack 0: 0xFFFF
6546	 3B1	AND		 	 
- stack 1: 0x82C
- stack 0: 0xFFE8
6547	 3B2	PUSH1	01	 	 
- stack 2: 0x82C
- stack 1: 0xFFE8
- stack 0: 0x1
6548	 3B4	SIGNEXTEND		 	 
- stack 1: 0x82C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
6549	 3B5	ADD		 	 
- stack 0: 0x814
6550	 3B6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x814
- stack 0: 0xFFFFFFFF
6551	 3BB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x814
6552	 3BC	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
6553	 3BD	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0xA0000B040E00000086000D00BA00000351000103700002038AFFE800D10018
6554	 3BE	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0xA0000B040E00000086000D00BA00000351000103700002038AFFE800D10018
- stack 0: 0xF0
6555	 3C0	SHR		 	 
- stack 1: 0x814
- stack 0: 0xA0
6556	 3C1	JUMP		 	 
- stack 0: 0x814
6557	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x814
6558	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x814
- stack 0: 0x814
6559	 A2	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0xA0000B040E00000086000D00BA00000351000103700002038AFFE800D10018
6560	 A3	PUSH1	E0	 	 
- stack 2: 0x814
- stack 1: 0xA0000B040E00000086000D00BA00000351000103700002038AFFE800D10018
- stack 0: 0xE0
6561	 A5	SHR		 	 
- stack 1: 0x814
- stack 0: 0xA0000B
6562	 A6	PUSH2	FFFF	 	 
- stack 2: 0x814
- stack 1: 0xA0000B
- stack 0: 0xFFFF
6563	 A9	AND		 	 
- stack 1: 0x814
- stack 0: 0xB
6564	 AA	PUSH1	01	 	 
- stack 2: 0x814
- stack 1: 0xB
- stack 0: 0x1
6565	 AC	SIGNEXTEND		 	 
- stack 1: 0x814
- stack 0: 0xB
6566	 AD	PUSH2	0040	 	 
- stack 2: 0x814
- stack 1: 0xB
- stack 0: 0x40
6567	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x814
6568	 B1	PUSH1	04	 	 
- stack 1: 0x814
- stack 0: 0x4
6569	 B3	ADD		 	 
- stack 0: 0x818
6570	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
6571	 B5	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x40E00000086000D00BA00000351000103700002038AFFE800D1001800EB0020
6572	 B6	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x40E00000086000D00BA00000351000103700002038AFFE800D1001800EB0020
- stack 0: 0xF0
6573	 B8	SHR		 	 
- stack 1: 0x818
- stack 0: 0x40E
6574	 B9	JUMP		 	 
- stack 0: 0x818
6575	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x818
6576	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x818
- stack 0: 0x818
6577	 410	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x40E00000086000D00BA00000351000103700002038AFFE800D1001800EB0020
6578	 411	PUSH1	E0	 	 
- stack 2: 0x818
- stack 1: 0x40E00000086000D00BA00000351000103700002038AFFE800D1001800EB0020
- stack 0: 0xE0
6579	 413	SHR		 	 
- stack 1: 0x818
- stack 0: 0x40E0000
6580	 414	PUSH2	FFFF	 	 
- stack 2: 0x818
- stack 1: 0x40E0000
- stack 0: 0xFFFF
6581	 417	AND		 	 
- stack 1: 0x818
- stack 0: 0x0
6582	 418	PUSH1	01	 	 
- stack 2: 0x818
- stack 1: 0x0
- stack 0: 0x1
6583	 41A	SIGNEXTEND		 	 
- stack 1: 0x818
- stack 0: 0x0
6584	 41B	POP		 	 
- stack 0: 0x818
6585	 41C	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
6586	 41E	ADD		 	 
- stack 0: 0x81C
6587	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
6588	 420	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x86000D00BA00000351000103700002038AFFE800D1001800EB0020010500B8
6589	 421	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0x86000D00BA00000351000103700002038AFFE800D1001800EB0020010500B8
- stack 0: 0xF0
6590	 423	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x86
6591	 424	JUMP		 	 
- stack 0: 0x81C
6592	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x81C
6593	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x81C
- stack 0: 0x81C
6594	 88	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x86000D00BA00000351000103700002038AFFE800D1001800EB0020010500B8
6595	 89	PUSH1	E0	 	 
- stack 2: 0x81C
- stack 1: 0x86000D00BA00000351000103700002038AFFE800D1001800EB0020010500B8
- stack 0: 0xE0
6596	 8B	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x86000D
6597	 8C	PUSH2	FFFF	 	 
- stack 2: 0x81C
- stack 1: 0x86000D
- stack 0: 0xFFFF
6598	 8F	AND		 	 
- stack 1: 0x81C
- stack 0: 0xD
6599	 90	PUSH1	01	 	 
- stack 2: 0x81C
- stack 1: 0xD
- stack 0: 0x1
6600	 92	SIGNEXTEND		 	 
- stack 1: 0x81C
- stack 0: 0xD
6601	 93	PUSH2	0020	 	 
- stack 2: 0x81C
- stack 1: 0xD
- stack 0: 0x20
6602	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x81C
6603	 97	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
6604	 99	ADD		 	 
- stack 0: 0x820
6605	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
6606	 9B	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0xBA00000351000103700002038AFFE800D1001800EB0020010500B803180000
6607	 9C	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0xBA00000351000103700002038AFFE800D1001800EB0020010500B803180000
- stack 0: 0xF0
6608	 9E	SHR		 	 
- stack 1: 0x820
- stack 0: 0xBA
6609	 9F	JUMP		 	 
- stack 0: 0x820
6610	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x820
6611	 BB	PUSH2	0020	 	 
- stack 1: 0x820
- stack 0: 0x20
6612	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x820
- stack 0: 0xD
6613	 BF	PUSH2	0040	 	 
- stack 2: 0x820
- stack 1: 0xD
- stack 0: 0x40
6614	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x820
- stack 1: 0xD
- stack 0: 0xB
6615	 C3	ADD		 	 
- stack 1: 0x820
- stack 0: 0x18
6616	 C4	PUSH2	0060	 	 
- stack 2: 0x820
- stack 1: 0x18
- stack 0: 0x60
6617	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x820
6618	 C8	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
6619	 CA	ADD		 	 
- stack 0: 0x824
6620	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
6621	 CC	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x351000103700002038AFFE800D1001800EB0020010500B80318000000A0000B
6622	 CD	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x351000103700002038AFFE800D1001800EB0020010500B80318000000A0000B
- stack 0: 0xF0
6623	 CF	SHR		 	 
- stack 1: 0x824
- stack 0: 0x351
6624	 D0	JUMP		 	 
- stack 0: 0x824
6625	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x824
6626	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x824
- stack 0: 0x824
6627	 353	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x351000103700002038AFFE800D1001800EB0020010500B80318000000A0000B
6628	 354	PUSH1	E0	 	 
- stack 2: 0x824
- stack 1: 0x351000103700002038AFFE800D1001800EB0020010500B80318000000A0000B
- stack 0: 0xE0
6629	 356	SHR		 	 
- stack 1: 0x824
- stack 0: 0x3510001
6630	 357	PUSH2	FFFF	 	 
- stack 2: 0x824
- stack 1: 0x3510001
- stack 0: 0xFFFF
6631	 35A	AND		 	 
- stack 1: 0x824
- stack 0: 0x1
6632	 35B	PUSH1	01	 	 
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x1
6633	 35D	SIGNEXTEND		 	 
- stack 1: 0x824
- stack 0: 0x1
6634	 35E	PUSH2	0080	 	 
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x80
6635	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x1
6636	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x824
- stack 0: 0x2
6637	 363	PUSH2	0080	 	 
- stack 2: 0x824
- stack 1: 0x2
- stack 0: 0x80
6638	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x824
6639	 367	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
6640	 369	ADD		 	 
- stack 0: 0x828
6641	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
6642	 36B	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x3700002038AFFE800D1001800EB0020010500B80318000000A0000B040E0000
6643	 36C	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x3700002038AFFE800D1001800EB0020010500B80318000000A0000B040E0000
- stack 0: 0xF0
6644	 36E	SHR		 	 
- stack 1: 0x828
- stack 0: 0x370
6645	 36F	JUMP		 	 
- stack 0: 0x828
6646	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x828
6647	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
6648	 372	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x3700002038AFFE800D1001800EB0020010500B80318000000A0000B040E0000
6649	 373	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0x3700002038AFFE800D1001800EB0020010500B80318000000A0000B040E0000
- stack 0: 0xE0
6650	 375	SHR		 	 
- stack 1: 0x828
- stack 0: 0x3700002
6651	 376	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0x3700002
- stack 0: 0xFFFF
6652	 379	AND		 	 
- stack 1: 0x828
- stack 0: 0x2
6653	 37A	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0x2
- stack 0: 0x1
6654	 37C	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0x2
6655	 37D	PUSH2	00A0	 	 
- stack 2: 0x828
- stack 1: 0x2
- stack 0: 0xA0
6656	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x828
6657	 381	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
6658	 383	ADD		 	 
- stack 0: 0x82C
6659	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
6660	 385	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x38AFFE800D1001800EB0020010500B80318000000A0000B040E00000086000E
6661	 386	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x38AFFE800D1001800EB0020010500B80318000000A0000B040E00000086000E
- stack 0: 0xF0
6662	 388	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x38A
6663	 389	JUMP		 	 
- stack 0: 0x82C
6664	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x82C
6665	 38B	PUSH2	0080	 	 
- stack 1: 0x82C
- stack 0: 0x80
6666	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x82C
- stack 0: 0x2
6667	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x82C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6668	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x82C
- stack 0: 0x2
6669	 395	PUSH2	00A0	 	 
- stack 2: 0x82C
- stack 1: 0x2
- stack 0: 0xA0
6670	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x82C
- stack 1: 0x2
- stack 0: 0x2
6671	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x82C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6672	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x82C
- stack 1: 0x2
- stack 0: 0x2
6673	 39F	SUB		 	 
- stack 1: 0x82C
- stack 0: 0x0
6674	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x82C
- stack 1: 0x0
- stack 0: 0x3A8
6675	 3A3	JUMPI		 	 
- stack 0: 0x82C
6676	 3A4	PUSH2	03C2	 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 1: 0x82C
- stack 0: 0x3C2
6677	 3A7	JUMP		 	 
- stack 0: 0x82C
6678	 3C2	JUMPDEST		 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x82C
6679	 3C3	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
6680	 3C5	ADD		 	 
- stack 0: 0x830
6681	 3C6	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
6682	 3C7	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xD1001800EB0020010500B80318000000A0000B040E00000086000E040E0000
6683	 3C8	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0xD1001800EB0020010500B80318000000A0000B040E00000086000E040E0000
- stack 0: 0xF0
6684	 3CA	SHR		 	 
- stack 1: 0x830
- stack 0: 0xD1
6685	 3CB	JUMP		 	 
- stack 0: 0x830
6686	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x830
6687	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x830
- stack 0: 0x830
6688	 D3	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xD1001800EB0020010500B80318000000A0000B040E00000086000E040E0000
6689	 D4	PUSH1	E0	 	 
- stack 2: 0x830
- stack 1: 0xD1001800EB0020010500B80318000000A0000B040E00000086000E040E0000
- stack 0: 0xE0
6690	 D6	SHR		 	 
- stack 1: 0x830
- stack 0: 0xD10018
6691	 D7	PUSH2	FFFF	 	 
- stack 2: 0x830
- stack 1: 0xD10018
- stack 0: 0xFFFF
6692	 DA	AND		 	 
- stack 1: 0x830
- stack 0: 0x18
6693	 DB	PUSH1	01	 	 
- stack 2: 0x830
- stack 1: 0x18
- stack 0: 0x1
6694	 DD	SIGNEXTEND		 	 
- stack 1: 0x830
- stack 0: 0x18
6695	 DE	PUSH2	03A0	 	 
- stack 2: 0x830
- stack 1: 0x18
- stack 0: 0x3A0
6696	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x830
6697	 E2	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
6698	 E4	ADD		 	 
- stack 0: 0x834
6699	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
6700	 E6	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0xEB0020010500B80318000000A0000B040E00000086000E040E000000BA0000
6701	 E7	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0xEB0020010500B80318000000A0000B040E00000086000E040E000000BA0000
- stack 0: 0xF0
6702	 E9	SHR		 	 
- stack 1: 0x834
- stack 0: 0xEB
6703	 EA	JUMP		 	 
- stack 0: 0x834
6704	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x834
6705	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x834
- stack 0: 0x834
6706	 ED	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0xEB0020010500B80318000000A0000B040E00000086000E040E000000BA0000
6707	 EE	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0xEB0020010500B80318000000A0000B040E00000086000E040E000000BA0000
- stack 0: 0xE0
6708	 F0	SHR		 	 
- stack 1: 0x834
- stack 0: 0xEB0020
6709	 F1	PUSH2	FFFF	 	 
- stack 2: 0x834
- stack 1: 0xEB0020
- stack 0: 0xFFFF
6710	 F4	AND		 	 
- stack 1: 0x834
- stack 0: 0x20
6711	 F5	PUSH1	01	 	 
- stack 2: 0x834
- stack 1: 0x20
- stack 0: 0x1
6712	 F7	SIGNEXTEND		 	 
- stack 1: 0x834
- stack 0: 0x20
6713	 F8	PUSH2	0380	 	 
- stack 2: 0x834
- stack 1: 0x20
- stack 0: 0x380
6714	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x834
6715	 FC	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
6716	 FE	ADD		 	 
- stack 0: 0x838
6717	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
6718	 100	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x10500B80318000000A0000B040E00000086000E040E000000BA000003510001
6719	 101	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x10500B80318000000A0000B040E00000086000E040E000000BA000003510001
- stack 0: 0xF0
6720	 103	SHR		 	 
- stack 1: 0x838
- stack 0: 0x105
6721	 104	JUMP		 	 
- stack 0: 0x838
6722	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x838
6723	 106	PUSH2	0060	 	 
- stack 1: 0x838
- stack 0: 0x60
6724	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x838
- stack 0: 0x18
6725	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x838
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
6726	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x838
- stack 0: 0x18
6727	 110	PUSH2	03A0	 	 
- stack 2: 0x838
- stack 1: 0x18
- stack 0: 0x3A0
6728	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x838
- stack 1: 0x18
- stack 0: 0x18
6729	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x838
- stack 2: 0x18
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
6730	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x838
- stack 1: 0x18
- stack 0: 0x18
6731	 11A	SUB		 	 
- stack 1: 0x838
- stack 0: 0x0
6732	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x838
- stack 1: 0x0
- stack 0: 0x123
6733	 11E	JUMPI		 	 
- stack 0: 0x838
6734	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x838
- stack 0: 0x13D
6735	 122	JUMP		 	 
- stack 0: 0x838
6736	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x838
6737	 13E	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
6738	 140	ADD		 	 
- stack 0: 0x83C
6739	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
6740	 142	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x318000000A0000B040E00000086000E040E000000BA00000351000103700002
6741	 143	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x318000000A0000B040E00000086000E040E000000BA00000351000103700002
- stack 0: 0xF0
6742	 145	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x318
6743	 146	JUMP		 	 
- stack 0: 0x83C
6744	 318	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x83C
6745	 319	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x83C
- stack 0: 0x83C
6746	 31A	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x318000000A0000B040E00000086000E040E000000BA00000351000103700002
6747	 31B	PUSH1	E0	 	 
- stack 2: 0x83C
- stack 1: 0x318000000A0000B040E00000086000E040E000000BA00000351000103700002
- stack 0: 0xE0
6748	 31D	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x3180000
6749	 31E	PUSH2	FFFF	 	 
- stack 2: 0x83C
- stack 1: 0x3180000
- stack 0: 0xFFFF
6750	 321	AND		 	 
- stack 1: 0x83C
- stack 0: 0x0
6751	 322	PUSH1	01	 	 
- stack 2: 0x83C
- stack 1: 0x0
- stack 0: 0x1
6752	 324	SIGNEXTEND		 	 
- stack 1: 0x83C
- stack 0: 0x0
6753	 325	PUSH2	0080	 	 
- stack 2: 0x83C
- stack 1: 0x0
- stack 0: 0x80
6754	 328	MSTORE		 	  ;; # store to x4
- stack 0: 0x83C
6755	 329	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
6756	 32B	ADD		 	 
- stack 0: 0x840
6757	 32C	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
6758	 32D	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0xA0000B040E00000086000E040E000000BA00000351000103700002038AFFE4
6759	 32E	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0xA0000B040E00000086000E040E000000BA00000351000103700002038AFFE4
- stack 0: 0xF0
6760	 330	SHR		 	 
- stack 1: 0x840
- stack 0: 0xA0
6761	 331	JUMP		 	 
- stack 0: 0x840
6762	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x840
6763	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x840
- stack 0: 0x840
6764	 A2	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0xA0000B040E00000086000E040E000000BA00000351000103700002038AFFE4
6765	 A3	PUSH1	E0	 	 
- stack 2: 0x840
- stack 1: 0xA0000B040E00000086000E040E000000BA00000351000103700002038AFFE4
- stack 0: 0xE0
6766	 A5	SHR		 	 
- stack 1: 0x840
- stack 0: 0xA0000B
6767	 A6	PUSH2	FFFF	 	 
- stack 2: 0x840
- stack 1: 0xA0000B
- stack 0: 0xFFFF
6768	 A9	AND		 	 
- stack 1: 0x840
- stack 0: 0xB
6769	 AA	PUSH1	01	 	 
- stack 2: 0x840
- stack 1: 0xB
- stack 0: 0x1
6770	 AC	SIGNEXTEND		 	 
- stack 1: 0x840
- stack 0: 0xB
6771	 AD	PUSH2	0040	 	 
- stack 2: 0x840
- stack 1: 0xB
- stack 0: 0x40
6772	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x840
6773	 B1	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
6774	 B3	ADD		 	 
- stack 0: 0x844
6775	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
6776	 B5	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x40E00000086000E040E000000BA00000351000103700002038AFFE400D10019
6777	 B6	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0x40E00000086000E040E000000BA00000351000103700002038AFFE400D10019
- stack 0: 0xF0
6778	 B8	SHR		 	 
- stack 1: 0x844
- stack 0: 0x40E
6779	 B9	JUMP		 	 
- stack 0: 0x844
6780	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x844
6781	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x844
- stack 0: 0x844
6782	 410	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x40E00000086000E040E000000BA00000351000103700002038AFFE400D10019
6783	 411	PUSH1	E0	 	 
- stack 2: 0x844
- stack 1: 0x40E00000086000E040E000000BA00000351000103700002038AFFE400D10019
- stack 0: 0xE0
6784	 413	SHR		 	 
- stack 1: 0x844
- stack 0: 0x40E0000
6785	 414	PUSH2	FFFF	 	 
- stack 2: 0x844
- stack 1: 0x40E0000
- stack 0: 0xFFFF
6786	 417	AND		 	 
- stack 1: 0x844
- stack 0: 0x0
6787	 418	PUSH1	01	 	 
- stack 2: 0x844
- stack 1: 0x0
- stack 0: 0x1
6788	 41A	SIGNEXTEND		 	 
- stack 1: 0x844
- stack 0: 0x0
6789	 41B	POP		 	 
- stack 0: 0x844
6790	 41C	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
6791	 41E	ADD		 	 
- stack 0: 0x848
6792	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
6793	 420	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x86000E040E000000BA00000351000103700002038AFFE400D1001900EB0021
6794	 421	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x86000E040E000000BA00000351000103700002038AFFE400D1001900EB0021
- stack 0: 0xF0
6795	 423	SHR		 	 
- stack 1: 0x848
- stack 0: 0x86
6796	 424	JUMP		 	 
- stack 0: 0x848
6797	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x848
6798	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x848
- stack 0: 0x848
6799	 88	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x86000E040E000000BA00000351000103700002038AFFE400D1001900EB0021
6800	 89	PUSH1	E0	 	 
- stack 2: 0x848
- stack 1: 0x86000E040E000000BA00000351000103700002038AFFE400D1001900EB0021
- stack 0: 0xE0
6801	 8B	SHR		 	 
- stack 1: 0x848
- stack 0: 0x86000E
6802	 8C	PUSH2	FFFF	 	 
- stack 2: 0x848
- stack 1: 0x86000E
- stack 0: 0xFFFF
6803	 8F	AND		 	 
- stack 1: 0x848
- stack 0: 0xE
6804	 90	PUSH1	01	 	 
- stack 2: 0x848
- stack 1: 0xE
- stack 0: 0x1
6805	 92	SIGNEXTEND		 	 
- stack 1: 0x848
- stack 0: 0xE
6806	 93	PUSH2	0020	 	 
- stack 2: 0x848
- stack 1: 0xE
- stack 0: 0x20
6807	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x848
6808	 97	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
6809	 99	ADD		 	 
- stack 0: 0x84C
6810	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
6811	 9B	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001900EB002101050088
6812	 9C	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001900EB002101050088
- stack 0: 0xF0
6813	 9E	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x40E
6814	 9F	JUMP		 	 
- stack 0: 0x84C
6815	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x84C
6816	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x84C
- stack 0: 0x84C
6817	 410	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001900EB002101050088
6818	 411	PUSH1	E0	 	 
- stack 2: 0x84C
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001900EB002101050088
- stack 0: 0xE0
6819	 413	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x40E0000
6820	 414	PUSH2	FFFF	 	 
- stack 2: 0x84C
- stack 1: 0x40E0000
- stack 0: 0xFFFF
6821	 417	AND		 	 
- stack 1: 0x84C
- stack 0: 0x0
6822	 418	PUSH1	01	 	 
- stack 2: 0x84C
- stack 1: 0x0
- stack 0: 0x1
6823	 41A	SIGNEXTEND		 	 
- stack 1: 0x84C
- stack 0: 0x0
6824	 41B	POP		 	 
- stack 0: 0x84C
6825	 41C	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
6826	 41E	ADD		 	 
- stack 0: 0x850
6827	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
6828	 420	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0xBA00000351000103700002038AFFE400D1001900EB00210105008803180000
6829	 421	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0xBA00000351000103700002038AFFE400D1001900EB00210105008803180000
- stack 0: 0xF0
6830	 423	SHR		 	 
- stack 1: 0x850
- stack 0: 0xBA
6831	 424	JUMP		 	 
- stack 0: 0x850
6832	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x850
6833	 BB	PUSH2	0020	 	 
- stack 1: 0x850
- stack 0: 0x20
6834	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x850
- stack 0: 0xE
6835	 BF	PUSH2	0040	 	 
- stack 2: 0x850
- stack 1: 0xE
- stack 0: 0x40
6836	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x850
- stack 1: 0xE
- stack 0: 0xB
6837	 C3	ADD		 	 
- stack 1: 0x850
- stack 0: 0x19
6838	 C4	PUSH2	0060	 	 
- stack 2: 0x850
- stack 1: 0x19
- stack 0: 0x60
6839	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x850
6840	 C8	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
6841	 CA	ADD		 	 
- stack 0: 0x854
6842	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
6843	 CC	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x351000103700002038AFFE400D1001900EB0021010500880318000000A0000B
6844	 CD	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x351000103700002038AFFE400D1001900EB0021010500880318000000A0000B
- stack 0: 0xF0
6845	 CF	SHR		 	 
- stack 1: 0x854
- stack 0: 0x351
6846	 D0	JUMP		 	 
- stack 0: 0x854
6847	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x854
6848	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x854
- stack 0: 0x854
6849	 353	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x351000103700002038AFFE400D1001900EB0021010500880318000000A0000B
6850	 354	PUSH1	E0	 	 
- stack 2: 0x854
- stack 1: 0x351000103700002038AFFE400D1001900EB0021010500880318000000A0000B
- stack 0: 0xE0
6851	 356	SHR		 	 
- stack 1: 0x854
- stack 0: 0x3510001
6852	 357	PUSH2	FFFF	 	 
- stack 2: 0x854
- stack 1: 0x3510001
- stack 0: 0xFFFF
6853	 35A	AND		 	 
- stack 1: 0x854
- stack 0: 0x1
6854	 35B	PUSH1	01	 	 
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x1
6855	 35D	SIGNEXTEND		 	 
- stack 1: 0x854
- stack 0: 0x1
6856	 35E	PUSH2	0080	 	 
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x80
6857	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x0
6858	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x854
- stack 0: 0x1
6859	 363	PUSH2	0080	 	 
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x80
6860	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x854
6861	 367	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
6862	 369	ADD		 	 
- stack 0: 0x858
6863	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
6864	 36B	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3700002038AFFE400D1001900EB0021010500880318000000A0000B040E0000
6865	 36C	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x3700002038AFFE400D1001900EB0021010500880318000000A0000B040E0000
- stack 0: 0xF0
6866	 36E	SHR		 	 
- stack 1: 0x858
- stack 0: 0x370
6867	 36F	JUMP		 	 
- stack 0: 0x858
6868	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x858
6869	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x858
- stack 0: 0x858
6870	 372	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3700002038AFFE400D1001900EB0021010500880318000000A0000B040E0000
6871	 373	PUSH1	E0	 	 
- stack 2: 0x858
- stack 1: 0x3700002038AFFE400D1001900EB0021010500880318000000A0000B040E0000
- stack 0: 0xE0
6872	 375	SHR		 	 
- stack 1: 0x858
- stack 0: 0x3700002
6873	 376	PUSH2	FFFF	 	 
- stack 2: 0x858
- stack 1: 0x3700002
- stack 0: 0xFFFF
6874	 379	AND		 	 
- stack 1: 0x858
- stack 0: 0x2
6875	 37A	PUSH1	01	 	 
- stack 2: 0x858
- stack 1: 0x2
- stack 0: 0x1
6876	 37C	SIGNEXTEND		 	 
- stack 1: 0x858
- stack 0: 0x2
6877	 37D	PUSH2	00A0	 	 
- stack 2: 0x858
- stack 1: 0x2
- stack 0: 0xA0
6878	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x858
6879	 381	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
6880	 383	ADD		 	 
- stack 0: 0x85C
6881	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
6882	 385	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x38AFFE400D1001900EB0021010500880318000000A0000B040E0000040E0000
6883	 386	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x38AFFE400D1001900EB0021010500880318000000A0000B040E0000040E0000
- stack 0: 0xF0
6884	 388	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x38A
6885	 389	JUMP		 	 
- stack 0: 0x85C
6886	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x85C
6887	 38B	PUSH2	0080	 	 
- stack 1: 0x85C
- stack 0: 0x80
6888	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x85C
- stack 0: 0x1
6889	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6890	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x85C
- stack 0: 0x1
6891	 395	PUSH2	00A0	 	 
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0xA0
6892	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0x2
6893	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x85C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6894	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0x2
6895	 39F	SUB		 	 
- stack 1: 0x85C
- stack 0: 0x1
6896	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0x3A8
6897	 3A3	JUMPI		 	 
- stack 0: 0x85C
6898	 3A8	JUMPDEST		 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x85C
6899	 3A9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x85C
- stack 0: 0x85C
6900	 3AA	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x38AFFE400D1001900EB0021010500880318000000A0000B040E0000040E0000
6901	 3AB	PUSH1	E0	 	 
- stack 2: 0x85C
- stack 1: 0x38AFFE400D1001900EB0021010500880318000000A0000B040E0000040E0000
- stack 0: 0xE0
6902	 3AD	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x38AFFE4
6903	 3AE	PUSH2	FFFF	 	 
- stack 2: 0x85C
- stack 1: 0x38AFFE4
- stack 0: 0xFFFF
6904	 3B1	AND		 	 
- stack 1: 0x85C
- stack 0: 0xFFE4
6905	 3B2	PUSH1	01	 	 
- stack 2: 0x85C
- stack 1: 0xFFE4
- stack 0: 0x1
6906	 3B4	SIGNEXTEND		 	 
- stack 1: 0x85C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
6907	 3B5	ADD		 	 
- stack 0: 0x840
6908	 3B6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
6909	 3BB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x840
6910	 3BC	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
6911	 3BD	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0xA0000B040E00000086000E040E000000BA00000351000103700002038AFFE4
6912	 3BE	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0xA0000B040E00000086000E040E000000BA00000351000103700002038AFFE4
- stack 0: 0xF0
6913	 3C0	SHR		 	 
- stack 1: 0x840
- stack 0: 0xA0
6914	 3C1	JUMP		 	 
- stack 0: 0x840
6915	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x840
6916	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x840
- stack 0: 0x840
6917	 A2	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0xA0000B040E00000086000E040E000000BA00000351000103700002038AFFE4
6918	 A3	PUSH1	E0	 	 
- stack 2: 0x840
- stack 1: 0xA0000B040E00000086000E040E000000BA00000351000103700002038AFFE4
- stack 0: 0xE0
6919	 A5	SHR		 	 
- stack 1: 0x840
- stack 0: 0xA0000B
6920	 A6	PUSH2	FFFF	 	 
- stack 2: 0x840
- stack 1: 0xA0000B
- stack 0: 0xFFFF
6921	 A9	AND		 	 
- stack 1: 0x840
- stack 0: 0xB
6922	 AA	PUSH1	01	 	 
- stack 2: 0x840
- stack 1: 0xB
- stack 0: 0x1
6923	 AC	SIGNEXTEND		 	 
- stack 1: 0x840
- stack 0: 0xB
6924	 AD	PUSH2	0040	 	 
- stack 2: 0x840
- stack 1: 0xB
- stack 0: 0x40
6925	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x840
6926	 B1	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
6927	 B3	ADD		 	 
- stack 0: 0x844
6928	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
6929	 B5	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x40E00000086000E040E000000BA00000351000103700002038AFFE400D10019
6930	 B6	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0x40E00000086000E040E000000BA00000351000103700002038AFFE400D10019
- stack 0: 0xF0
6931	 B8	SHR		 	 
- stack 1: 0x844
- stack 0: 0x40E
6932	 B9	JUMP		 	 
- stack 0: 0x844
6933	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x844
6934	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x844
- stack 0: 0x844
6935	 410	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x40E00000086000E040E000000BA00000351000103700002038AFFE400D10019
6936	 411	PUSH1	E0	 	 
- stack 2: 0x844
- stack 1: 0x40E00000086000E040E000000BA00000351000103700002038AFFE400D10019
- stack 0: 0xE0
6937	 413	SHR		 	 
- stack 1: 0x844
- stack 0: 0x40E0000
6938	 414	PUSH2	FFFF	 	 
- stack 2: 0x844
- stack 1: 0x40E0000
- stack 0: 0xFFFF
6939	 417	AND		 	 
- stack 1: 0x844
- stack 0: 0x0
6940	 418	PUSH1	01	 	 
- stack 2: 0x844
- stack 1: 0x0
- stack 0: 0x1
6941	 41A	SIGNEXTEND		 	 
- stack 1: 0x844
- stack 0: 0x0
6942	 41B	POP		 	 
- stack 0: 0x844
6943	 41C	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
6944	 41E	ADD		 	 
- stack 0: 0x848
6945	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
6946	 420	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x86000E040E000000BA00000351000103700002038AFFE400D1001900EB0021
6947	 421	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x86000E040E000000BA00000351000103700002038AFFE400D1001900EB0021
- stack 0: 0xF0
6948	 423	SHR		 	 
- stack 1: 0x848
- stack 0: 0x86
6949	 424	JUMP		 	 
- stack 0: 0x848
6950	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x848
6951	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x848
- stack 0: 0x848
6952	 88	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x86000E040E000000BA00000351000103700002038AFFE400D1001900EB0021
6953	 89	PUSH1	E0	 	 
- stack 2: 0x848
- stack 1: 0x86000E040E000000BA00000351000103700002038AFFE400D1001900EB0021
- stack 0: 0xE0
6954	 8B	SHR		 	 
- stack 1: 0x848
- stack 0: 0x86000E
6955	 8C	PUSH2	FFFF	 	 
- stack 2: 0x848
- stack 1: 0x86000E
- stack 0: 0xFFFF
6956	 8F	AND		 	 
- stack 1: 0x848
- stack 0: 0xE
6957	 90	PUSH1	01	 	 
- stack 2: 0x848
- stack 1: 0xE
- stack 0: 0x1
6958	 92	SIGNEXTEND		 	 
- stack 1: 0x848
- stack 0: 0xE
6959	 93	PUSH2	0020	 	 
- stack 2: 0x848
- stack 1: 0xE
- stack 0: 0x20
6960	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x848
6961	 97	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
6962	 99	ADD		 	 
- stack 0: 0x84C
6963	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
6964	 9B	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001900EB002101050088
6965	 9C	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001900EB002101050088
- stack 0: 0xF0
6966	 9E	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x40E
6967	 9F	JUMP		 	 
- stack 0: 0x84C
6968	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x84C
6969	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x84C
- stack 0: 0x84C
6970	 410	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x40E000000BA00000351000103700002038AFFE400D1001900EB002101050088
6971	 411	PUSH1	E0	 	 
- stack 2: 0x84C
- stack 1: 0x40E000000BA00000351000103700002038AFFE400D1001900EB002101050088
- stack 0: 0xE0
6972	 413	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x40E0000
6973	 414	PUSH2	FFFF	 	 
- stack 2: 0x84C
- stack 1: 0x40E0000
- stack 0: 0xFFFF
6974	 417	AND		 	 
- stack 1: 0x84C
- stack 0: 0x0
6975	 418	PUSH1	01	 	 
- stack 2: 0x84C
- stack 1: 0x0
- stack 0: 0x1
6976	 41A	SIGNEXTEND		 	 
- stack 1: 0x84C
- stack 0: 0x0
6977	 41B	POP		 	 
- stack 0: 0x84C
6978	 41C	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
6979	 41E	ADD		 	 
- stack 0: 0x850
6980	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
6981	 420	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0xBA00000351000103700002038AFFE400D1001900EB00210105008803180000
6982	 421	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0xBA00000351000103700002038AFFE400D1001900EB00210105008803180000
- stack 0: 0xF0
6983	 423	SHR		 	 
- stack 1: 0x850
- stack 0: 0xBA
6984	 424	JUMP		 	 
- stack 0: 0x850
6985	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x850
6986	 BB	PUSH2	0020	 	 
- stack 1: 0x850
- stack 0: 0x20
6987	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x850
- stack 0: 0xE
6988	 BF	PUSH2	0040	 	 
- stack 2: 0x850
- stack 1: 0xE
- stack 0: 0x40
6989	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x850
- stack 1: 0xE
- stack 0: 0xB
6990	 C3	ADD		 	 
- stack 1: 0x850
- stack 0: 0x19
6991	 C4	PUSH2	0060	 	 
- stack 2: 0x850
- stack 1: 0x19
- stack 0: 0x60
6992	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x850
6993	 C8	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
6994	 CA	ADD		 	 
- stack 0: 0x854
6995	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
6996	 CC	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x351000103700002038AFFE400D1001900EB0021010500880318000000A0000B
6997	 CD	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x351000103700002038AFFE400D1001900EB0021010500880318000000A0000B
- stack 0: 0xF0
6998	 CF	SHR		 	 
- stack 1: 0x854
- stack 0: 0x351
6999	 D0	JUMP		 	 
- stack 0: 0x854
7000	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x854
7001	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x854
- stack 0: 0x854
7002	 353	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x351000103700002038AFFE400D1001900EB0021010500880318000000A0000B
7003	 354	PUSH1	E0	 	 
- stack 2: 0x854
- stack 1: 0x351000103700002038AFFE400D1001900EB0021010500880318000000A0000B
- stack 0: 0xE0
7004	 356	SHR		 	 
- stack 1: 0x854
- stack 0: 0x3510001
7005	 357	PUSH2	FFFF	 	 
- stack 2: 0x854
- stack 1: 0x3510001
- stack 0: 0xFFFF
7006	 35A	AND		 	 
- stack 1: 0x854
- stack 0: 0x1
7007	 35B	PUSH1	01	 	 
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x1
7008	 35D	SIGNEXTEND		 	 
- stack 1: 0x854
- stack 0: 0x1
7009	 35E	PUSH2	0080	 	 
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x80
7010	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x1
7011	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x854
- stack 0: 0x2
7012	 363	PUSH2	0080	 	 
- stack 2: 0x854
- stack 1: 0x2
- stack 0: 0x80
7013	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x854
7014	 367	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
7015	 369	ADD		 	 
- stack 0: 0x858
7016	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
7017	 36B	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3700002038AFFE400D1001900EB0021010500880318000000A0000B040E0000
7018	 36C	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x3700002038AFFE400D1001900EB0021010500880318000000A0000B040E0000
- stack 0: 0xF0
7019	 36E	SHR		 	 
- stack 1: 0x858
- stack 0: 0x370
7020	 36F	JUMP		 	 
- stack 0: 0x858
7021	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x858
7022	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x858
- stack 0: 0x858
7023	 372	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3700002038AFFE400D1001900EB0021010500880318000000A0000B040E0000
7024	 373	PUSH1	E0	 	 
- stack 2: 0x858
- stack 1: 0x3700002038AFFE400D1001900EB0021010500880318000000A0000B040E0000
- stack 0: 0xE0
7025	 375	SHR		 	 
- stack 1: 0x858
- stack 0: 0x3700002
7026	 376	PUSH2	FFFF	 	 
- stack 2: 0x858
- stack 1: 0x3700002
- stack 0: 0xFFFF
7027	 379	AND		 	 
- stack 1: 0x858
- stack 0: 0x2
7028	 37A	PUSH1	01	 	 
- stack 2: 0x858
- stack 1: 0x2
- stack 0: 0x1
7029	 37C	SIGNEXTEND		 	 
- stack 1: 0x858
- stack 0: 0x2
7030	 37D	PUSH2	00A0	 	 
- stack 2: 0x858
- stack 1: 0x2
- stack 0: 0xA0
7031	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x858
7032	 381	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
7033	 383	ADD		 	 
- stack 0: 0x85C
7034	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
7035	 385	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x38AFFE400D1001900EB0021010500880318000000A0000B040E0000040E0000
7036	 386	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x38AFFE400D1001900EB0021010500880318000000A0000B040E0000040E0000
- stack 0: 0xF0
7037	 388	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x38A
7038	 389	JUMP		 	 
- stack 0: 0x85C
7039	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x85C
7040	 38B	PUSH2	0080	 	 
- stack 1: 0x85C
- stack 0: 0x80
7041	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x85C
- stack 0: 0x2
7042	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x85C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7043	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x85C
- stack 0: 0x2
7044	 395	PUSH2	00A0	 	 
- stack 2: 0x85C
- stack 1: 0x2
- stack 0: 0xA0
7045	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x85C
- stack 1: 0x2
- stack 0: 0x2
7046	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x85C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7047	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x85C
- stack 1: 0x2
- stack 0: 0x2
7048	 39F	SUB		 	 
- stack 1: 0x85C
- stack 0: 0x0
7049	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x85C
- stack 1: 0x0
- stack 0: 0x3A8
7050	 3A3	JUMPI		 	 
- stack 0: 0x85C
7051	 3A4	PUSH2	03C2	 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 1: 0x85C
- stack 0: 0x3C2
7052	 3A7	JUMP		 	 
- stack 0: 0x85C
7053	 3C2	JUMPDEST		 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x85C
7054	 3C3	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
7055	 3C5	ADD		 	 
- stack 0: 0x860
7056	 3C6	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
7057	 3C7	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0xD1001900EB0021010500880318000000A0000B040E0000040E00000086000F
7058	 3C8	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0xD1001900EB0021010500880318000000A0000B040E0000040E00000086000F
- stack 0: 0xF0
7059	 3CA	SHR		 	 
- stack 1: 0x860
- stack 0: 0xD1
7060	 3CB	JUMP		 	 
- stack 0: 0x860
7061	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x860
7062	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x860
- stack 0: 0x860
7063	 D3	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0xD1001900EB0021010500880318000000A0000B040E0000040E00000086000F
7064	 D4	PUSH1	E0	 	 
- stack 2: 0x860
- stack 1: 0xD1001900EB0021010500880318000000A0000B040E0000040E00000086000F
- stack 0: 0xE0
7065	 D6	SHR		 	 
- stack 1: 0x860
- stack 0: 0xD10019
7066	 D7	PUSH2	FFFF	 	 
- stack 2: 0x860
- stack 1: 0xD10019
- stack 0: 0xFFFF
7067	 DA	AND		 	 
- stack 1: 0x860
- stack 0: 0x19
7068	 DB	PUSH1	01	 	 
- stack 2: 0x860
- stack 1: 0x19
- stack 0: 0x1
7069	 DD	SIGNEXTEND		 	 
- stack 1: 0x860
- stack 0: 0x19
7070	 DE	PUSH2	03A0	 	 
- stack 2: 0x860
- stack 1: 0x19
- stack 0: 0x3A0
7071	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x860
7072	 E2	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
7073	 E4	ADD		 	 
- stack 0: 0x864
7074	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
7075	 E6	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0xEB0021010500880318000000A0000B040E0000040E00000086000F00BA0000
7076	 E7	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0xEB0021010500880318000000A0000B040E0000040E00000086000F00BA0000
- stack 0: 0xF0
7077	 E9	SHR		 	 
- stack 1: 0x864
- stack 0: 0xEB
7078	 EA	JUMP		 	 
- stack 0: 0x864
7079	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x864
7080	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x864
- stack 0: 0x864
7081	 ED	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0xEB0021010500880318000000A0000B040E0000040E00000086000F00BA0000
7082	 EE	PUSH1	E0	 	 
- stack 2: 0x864
- stack 1: 0xEB0021010500880318000000A0000B040E0000040E00000086000F00BA0000
- stack 0: 0xE0
7083	 F0	SHR		 	 
- stack 1: 0x864
- stack 0: 0xEB0021
7084	 F1	PUSH2	FFFF	 	 
- stack 2: 0x864
- stack 1: 0xEB0021
- stack 0: 0xFFFF
7085	 F4	AND		 	 
- stack 1: 0x864
- stack 0: 0x21
7086	 F5	PUSH1	01	 	 
- stack 2: 0x864
- stack 1: 0x21
- stack 0: 0x1
7087	 F7	SIGNEXTEND		 	 
- stack 1: 0x864
- stack 0: 0x21
7088	 F8	PUSH2	0380	 	 
- stack 2: 0x864
- stack 1: 0x21
- stack 0: 0x380
7089	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x864
7090	 FC	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
7091	 FE	ADD		 	 
- stack 0: 0x868
7092	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
7093	 100	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x10500880318000000A0000B040E0000040E00000086000F00BA000003510001
7094	 101	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0x10500880318000000A0000B040E0000040E00000086000F00BA000003510001
- stack 0: 0xF0
7095	 103	SHR		 	 
- stack 1: 0x868
- stack 0: 0x105
7096	 104	JUMP		 	 
- stack 0: 0x868
7097	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x868
7098	 106	PUSH2	0060	 	 
- stack 1: 0x868
- stack 0: 0x60
7099	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x868
- stack 0: 0x19
7100	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x868
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
7101	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x868
- stack 0: 0x19
7102	 110	PUSH2	03A0	 	 
- stack 2: 0x868
- stack 1: 0x19
- stack 0: 0x3A0
7103	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x868
- stack 1: 0x19
- stack 0: 0x19
7104	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x868
- stack 2: 0x19
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
7105	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x868
- stack 1: 0x19
- stack 0: 0x19
7106	 11A	SUB		 	 
- stack 1: 0x868
- stack 0: 0x0
7107	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x868
- stack 1: 0x0
- stack 0: 0x123
7108	 11E	JUMPI		 	 
- stack 0: 0x868
7109	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x868
- stack 0: 0x13D
7110	 122	JUMP		 	 
- stack 0: 0x868
7111	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x868
7112	 13E	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
7113	 140	ADD		 	 
- stack 0: 0x86C
7114	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
7115	 142	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x318000000A0000B040E0000040E00000086000F00BA00000351000103700002
7116	 143	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0x318000000A0000B040E0000040E00000086000F00BA00000351000103700002
- stack 0: 0xF0
7117	 145	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x318
7118	 146	JUMP		 	 
- stack 0: 0x86C
7119	 318	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x86C
7120	 319	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x86C
- stack 0: 0x86C
7121	 31A	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x318000000A0000B040E0000040E00000086000F00BA00000351000103700002
7122	 31B	PUSH1	E0	 	 
- stack 2: 0x86C
- stack 1: 0x318000000A0000B040E0000040E00000086000F00BA00000351000103700002
- stack 0: 0xE0
7123	 31D	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x3180000
7124	 31E	PUSH2	FFFF	 	 
- stack 2: 0x86C
- stack 1: 0x3180000
- stack 0: 0xFFFF
7125	 321	AND		 	 
- stack 1: 0x86C
- stack 0: 0x0
7126	 322	PUSH1	01	 	 
- stack 2: 0x86C
- stack 1: 0x0
- stack 0: 0x1
7127	 324	SIGNEXTEND		 	 
- stack 1: 0x86C
- stack 0: 0x0
7128	 325	PUSH2	0080	 	 
- stack 2: 0x86C
- stack 1: 0x0
- stack 0: 0x80
7129	 328	MSTORE		 	  ;; # store to x4
- stack 0: 0x86C
7130	 329	PUSH1	04	 	 
- stack 1: 0x86C
- stack 0: 0x4
7131	 32B	ADD		 	 
- stack 0: 0x870
7132	 32C	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
7133	 32D	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0xA0000B040E0000040E00000086000F00BA00000351000103700002038AFFE4
7134	 32E	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0xA0000B040E0000040E00000086000F00BA00000351000103700002038AFFE4
- stack 0: 0xF0
7135	 330	SHR		 	 
- stack 1: 0x870
- stack 0: 0xA0
7136	 331	JUMP		 	 
- stack 0: 0x870
7137	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x870
7138	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x870
- stack 0: 0x870
7139	 A2	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0xA0000B040E0000040E00000086000F00BA00000351000103700002038AFFE4
7140	 A3	PUSH1	E0	 	 
- stack 2: 0x870
- stack 1: 0xA0000B040E0000040E00000086000F00BA00000351000103700002038AFFE4
- stack 0: 0xE0
7141	 A5	SHR		 	 
- stack 1: 0x870
- stack 0: 0xA0000B
7142	 A6	PUSH2	FFFF	 	 
- stack 2: 0x870
- stack 1: 0xA0000B
- stack 0: 0xFFFF
7143	 A9	AND		 	 
- stack 1: 0x870
- stack 0: 0xB
7144	 AA	PUSH1	01	 	 
- stack 2: 0x870
- stack 1: 0xB
- stack 0: 0x1
7145	 AC	SIGNEXTEND		 	 
- stack 1: 0x870
- stack 0: 0xB
7146	 AD	PUSH2	0040	 	 
- stack 2: 0x870
- stack 1: 0xB
- stack 0: 0x40
7147	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x870
7148	 B1	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
7149	 B3	ADD		 	 
- stack 0: 0x874
7150	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
7151	 B5	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x40E0000040E00000086000F00BA00000351000103700002038AFFE400D1001A
7152	 B6	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0x40E0000040E00000086000F00BA00000351000103700002038AFFE400D1001A
- stack 0: 0xF0
7153	 B8	SHR		 	 
- stack 1: 0x874
- stack 0: 0x40E
7154	 B9	JUMP		 	 
- stack 0: 0x874
7155	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x874
7156	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x874
- stack 0: 0x874
7157	 410	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x40E0000040E00000086000F00BA00000351000103700002038AFFE400D1001A
7158	 411	PUSH1	E0	 	 
- stack 2: 0x874
- stack 1: 0x40E0000040E00000086000F00BA00000351000103700002038AFFE400D1001A
- stack 0: 0xE0
7159	 413	SHR		 	 
- stack 1: 0x874
- stack 0: 0x40E0000
7160	 414	PUSH2	FFFF	 	 
- stack 2: 0x874
- stack 1: 0x40E0000
- stack 0: 0xFFFF
7161	 417	AND		 	 
- stack 1: 0x874
- stack 0: 0x0
7162	 418	PUSH1	01	 	 
- stack 2: 0x874
- stack 1: 0x0
- stack 0: 0x1
7163	 41A	SIGNEXTEND		 	 
- stack 1: 0x874
- stack 0: 0x0
7164	 41B	POP		 	 
- stack 0: 0x874
7165	 41C	PUSH1	04	 	 
- stack 1: 0x874
- stack 0: 0x4
7166	 41E	ADD		 	 
- stack 0: 0x878
7167	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x878
- stack 0: 0x878
7168	 420	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x40E00000086000F00BA00000351000103700002038AFFE400D1001A00EB0022
7169	 421	PUSH1	F0	 	 
- stack 2: 0x878
- stack 1: 0x40E00000086000F00BA00000351000103700002038AFFE400D1001A00EB0022
- stack 0: 0xF0
7170	 423	SHR		 	 
- stack 1: 0x878
- stack 0: 0x40E
7171	 424	JUMP		 	 
- stack 0: 0x878
7172	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x878
7173	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x878
- stack 0: 0x878
7174	 410	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x40E00000086000F00BA00000351000103700002038AFFE400D1001A00EB0022
7175	 411	PUSH1	E0	 	 
- stack 2: 0x878
- stack 1: 0x40E00000086000F00BA00000351000103700002038AFFE400D1001A00EB0022
- stack 0: 0xE0
7176	 413	SHR		 	 
- stack 1: 0x878
- stack 0: 0x40E0000
7177	 414	PUSH2	FFFF	 	 
- stack 2: 0x878
- stack 1: 0x40E0000
- stack 0: 0xFFFF
7178	 417	AND		 	 
- stack 1: 0x878
- stack 0: 0x0
7179	 418	PUSH1	01	 	 
- stack 2: 0x878
- stack 1: 0x0
- stack 0: 0x1
7180	 41A	SIGNEXTEND		 	 
- stack 1: 0x878
- stack 0: 0x0
7181	 41B	POP		 	 
- stack 0: 0x878
7182	 41C	PUSH1	04	 	 
- stack 1: 0x878
- stack 0: 0x4
7183	 41E	ADD		 	 
- stack 0: 0x87C
7184	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x87C
- stack 0: 0x87C
7185	 420	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x86000F00BA00000351000103700002038AFFE400D1001A00EB002201050058
7186	 421	PUSH1	F0	 	 
- stack 2: 0x87C
- stack 1: 0x86000F00BA00000351000103700002038AFFE400D1001A00EB002201050058
- stack 0: 0xF0
7187	 423	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x86
7188	 424	JUMP		 	 
- stack 0: 0x87C
7189	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x87C
7190	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x87C
- stack 0: 0x87C
7191	 88	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x86000F00BA00000351000103700002038AFFE400D1001A00EB002201050058
7192	 89	PUSH1	E0	 	 
- stack 2: 0x87C
- stack 1: 0x86000F00BA00000351000103700002038AFFE400D1001A00EB002201050058
- stack 0: 0xE0
7193	 8B	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x86000F
7194	 8C	PUSH2	FFFF	 	 
- stack 2: 0x87C
- stack 1: 0x86000F
- stack 0: 0xFFFF
7195	 8F	AND		 	 
- stack 1: 0x87C
- stack 0: 0xF
7196	 90	PUSH1	01	 	 
- stack 2: 0x87C
- stack 1: 0xF
- stack 0: 0x1
7197	 92	SIGNEXTEND		 	 
- stack 1: 0x87C
- stack 0: 0xF
7198	 93	PUSH2	0020	 	 
- stack 2: 0x87C
- stack 1: 0xF
- stack 0: 0x20
7199	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x87C
7200	 97	PUSH1	04	 	 
- stack 1: 0x87C
- stack 0: 0x4
7201	 99	ADD		 	 
- stack 0: 0x880
7202	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
7203	 9B	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0xBA00000351000103700002038AFFE400D1001A00EB0022010500580086000F
7204	 9C	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0xBA00000351000103700002038AFFE400D1001A00EB0022010500580086000F
- stack 0: 0xF0
7205	 9E	SHR		 	 
- stack 1: 0x880
- stack 0: 0xBA
7206	 9F	JUMP		 	 
- stack 0: 0x880
7207	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x880
7208	 BB	PUSH2	0020	 	 
- stack 1: 0x880
- stack 0: 0x20
7209	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x880
- stack 0: 0xF
7210	 BF	PUSH2	0040	 	 
- stack 2: 0x880
- stack 1: 0xF
- stack 0: 0x40
7211	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x880
- stack 1: 0xF
- stack 0: 0xB
7212	 C3	ADD		 	 
- stack 1: 0x880
- stack 0: 0x1A
7213	 C4	PUSH2	0060	 	 
- stack 2: 0x880
- stack 1: 0x1A
- stack 0: 0x60
7214	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x880
7215	 C8	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
7216	 CA	ADD		 	 
- stack 0: 0x884
7217	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
7218	 CC	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x351000103700002038AFFE400D1001A00EB0022010500580086000F04250000
7219	 CD	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0x351000103700002038AFFE400D1001A00EB0022010500580086000F04250000
- stack 0: 0xF0
7220	 CF	SHR		 	 
- stack 1: 0x884
- stack 0: 0x351
7221	 D0	JUMP		 	 
- stack 0: 0x884
7222	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x884
7223	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x884
- stack 0: 0x884
7224	 353	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x351000103700002038AFFE400D1001A00EB0022010500580086000F04250000
7225	 354	PUSH1	E0	 	 
- stack 2: 0x884
- stack 1: 0x351000103700002038AFFE400D1001A00EB0022010500580086000F04250000
- stack 0: 0xE0
7226	 356	SHR		 	 
- stack 1: 0x884
- stack 0: 0x3510001
7227	 357	PUSH2	FFFF	 	 
- stack 2: 0x884
- stack 1: 0x3510001
- stack 0: 0xFFFF
7228	 35A	AND		 	 
- stack 1: 0x884
- stack 0: 0x1
7229	 35B	PUSH1	01	 	 
- stack 2: 0x884
- stack 1: 0x1
- stack 0: 0x1
7230	 35D	SIGNEXTEND		 	 
- stack 1: 0x884
- stack 0: 0x1
7231	 35E	PUSH2	0080	 	 
- stack 2: 0x884
- stack 1: 0x1
- stack 0: 0x80
7232	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x884
- stack 1: 0x1
- stack 0: 0x0
7233	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x884
- stack 0: 0x1
7234	 363	PUSH2	0080	 	 
- stack 2: 0x884
- stack 1: 0x1
- stack 0: 0x80
7235	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x884
7236	 367	PUSH1	04	 	 
- stack 1: 0x884
- stack 0: 0x4
7237	 369	ADD		 	 
- stack 0: 0x888
7238	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x888
- stack 0: 0x888
7239	 36B	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x3700002038AFFE400D1001A00EB0022010500580086000F0425000000D1000F
7240	 36C	PUSH1	F0	 	 
- stack 2: 0x888
- stack 1: 0x3700002038AFFE400D1001A00EB0022010500580086000F0425000000D1000F
- stack 0: 0xF0
7241	 36E	SHR		 	 
- stack 1: 0x888
- stack 0: 0x370
7242	 36F	JUMP		 	 
- stack 0: 0x888
7243	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x888
7244	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x888
- stack 0: 0x888
7245	 372	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x3700002038AFFE400D1001A00EB0022010500580086000F0425000000D1000F
7246	 373	PUSH1	E0	 	 
- stack 2: 0x888
- stack 1: 0x3700002038AFFE400D1001A00EB0022010500580086000F0425000000D1000F
- stack 0: 0xE0
7247	 375	SHR		 	 
- stack 1: 0x888
- stack 0: 0x3700002
7248	 376	PUSH2	FFFF	 	 
- stack 2: 0x888
- stack 1: 0x3700002
- stack 0: 0xFFFF
7249	 379	AND		 	 
- stack 1: 0x888
- stack 0: 0x2
7250	 37A	PUSH1	01	 	 
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0x1
7251	 37C	SIGNEXTEND		 	 
- stack 1: 0x888
- stack 0: 0x2
7252	 37D	PUSH2	00A0	 	 
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0xA0
7253	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x888
7254	 381	PUSH1	04	 	 
- stack 1: 0x888
- stack 0: 0x4
7255	 383	ADD		 	 
- stack 0: 0x88C
7256	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x88C
- stack 0: 0x88C
7257	 385	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0x38AFFE400D1001A00EB0022010500580086000F0425000000D1000F00EB0023
7258	 386	PUSH1	F0	 	 
- stack 2: 0x88C
- stack 1: 0x38AFFE400D1001A00EB0022010500580086000F0425000000D1000F00EB0023
- stack 0: 0xF0
7259	 388	SHR		 	 
- stack 1: 0x88C
- stack 0: 0x38A
7260	 389	JUMP		 	 
- stack 0: 0x88C
7261	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x88C
7262	 38B	PUSH2	0080	 	 
- stack 1: 0x88C
- stack 0: 0x80
7263	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x88C
- stack 0: 0x1
7264	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x88C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7265	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x88C
- stack 0: 0x1
7266	 395	PUSH2	00A0	 	 
- stack 2: 0x88C
- stack 1: 0x1
- stack 0: 0xA0
7267	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x88C
- stack 1: 0x1
- stack 0: 0x2
7268	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x88C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7269	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x88C
- stack 1: 0x1
- stack 0: 0x2
7270	 39F	SUB		 	 
- stack 1: 0x88C
- stack 0: 0x1
7271	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x88C
- stack 1: 0x1
- stack 0: 0x3A8
7272	 3A3	JUMPI		 	 
- stack 0: 0x88C
7273	 3A8	JUMPDEST		 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x88C
7274	 3A9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x88C
- stack 0: 0x88C
7275	 3AA	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0x38AFFE400D1001A00EB0022010500580086000F0425000000D1000F00EB0023
7276	 3AB	PUSH1	E0	 	 
- stack 2: 0x88C
- stack 1: 0x38AFFE400D1001A00EB0022010500580086000F0425000000D1000F00EB0023
- stack 0: 0xE0
7277	 3AD	SHR		 	 
- stack 1: 0x88C
- stack 0: 0x38AFFE4
7278	 3AE	PUSH2	FFFF	 	 
- stack 2: 0x88C
- stack 1: 0x38AFFE4
- stack 0: 0xFFFF
7279	 3B1	AND		 	 
- stack 1: 0x88C
- stack 0: 0xFFE4
7280	 3B2	PUSH1	01	 	 
- stack 2: 0x88C
- stack 1: 0xFFE4
- stack 0: 0x1
7281	 3B4	SIGNEXTEND		 	 
- stack 1: 0x88C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
7282	 3B5	ADD		 	 
- stack 0: 0x870
7283	 3B6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x870
- stack 0: 0xFFFFFFFF
7284	 3BB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x870
7285	 3BC	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
7286	 3BD	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0xA0000B040E0000040E00000086000F00BA00000351000103700002038AFFE4
7287	 3BE	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0xA0000B040E0000040E00000086000F00BA00000351000103700002038AFFE4
- stack 0: 0xF0
7288	 3C0	SHR		 	 
- stack 1: 0x870
- stack 0: 0xA0
7289	 3C1	JUMP		 	 
- stack 0: 0x870
7290	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x870
7291	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x870
- stack 0: 0x870
7292	 A2	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0xA0000B040E0000040E00000086000F00BA00000351000103700002038AFFE4
7293	 A3	PUSH1	E0	 	 
- stack 2: 0x870
- stack 1: 0xA0000B040E0000040E00000086000F00BA00000351000103700002038AFFE4
- stack 0: 0xE0
7294	 A5	SHR		 	 
- stack 1: 0x870
- stack 0: 0xA0000B
7295	 A6	PUSH2	FFFF	 	 
- stack 2: 0x870
- stack 1: 0xA0000B
- stack 0: 0xFFFF
7296	 A9	AND		 	 
- stack 1: 0x870
- stack 0: 0xB
7297	 AA	PUSH1	01	 	 
- stack 2: 0x870
- stack 1: 0xB
- stack 0: 0x1
7298	 AC	SIGNEXTEND		 	 
- stack 1: 0x870
- stack 0: 0xB
7299	 AD	PUSH2	0040	 	 
- stack 2: 0x870
- stack 1: 0xB
- stack 0: 0x40
7300	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x870
7301	 B1	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
7302	 B3	ADD		 	 
- stack 0: 0x874
7303	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
7304	 B5	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x40E0000040E00000086000F00BA00000351000103700002038AFFE400D1001A
7305	 B6	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0x40E0000040E00000086000F00BA00000351000103700002038AFFE400D1001A
- stack 0: 0xF0
7306	 B8	SHR		 	 
- stack 1: 0x874
- stack 0: 0x40E
7307	 B9	JUMP		 	 
- stack 0: 0x874
7308	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x874
7309	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x874
- stack 0: 0x874
7310	 410	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x40E0000040E00000086000F00BA00000351000103700002038AFFE400D1001A
7311	 411	PUSH1	E0	 	 
- stack 2: 0x874
- stack 1: 0x40E0000040E00000086000F00BA00000351000103700002038AFFE400D1001A
- stack 0: 0xE0
7312	 413	SHR		 	 
- stack 1: 0x874
- stack 0: 0x40E0000
7313	 414	PUSH2	FFFF	 	 
- stack 2: 0x874
- stack 1: 0x40E0000
- stack 0: 0xFFFF
7314	 417	AND		 	 
- stack 1: 0x874
- stack 0: 0x0
7315	 418	PUSH1	01	 	 
- stack 2: 0x874
- stack 1: 0x0
- stack 0: 0x1
7316	 41A	SIGNEXTEND		 	 
- stack 1: 0x874
- stack 0: 0x0
7317	 41B	POP		 	 
- stack 0: 0x874
7318	 41C	PUSH1	04	 	 
- stack 1: 0x874
- stack 0: 0x4
7319	 41E	ADD		 	 
- stack 0: 0x878
7320	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x878
- stack 0: 0x878
7321	 420	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x40E00000086000F00BA00000351000103700002038AFFE400D1001A00EB0022
7322	 421	PUSH1	F0	 	 
- stack 2: 0x878
- stack 1: 0x40E00000086000F00BA00000351000103700002038AFFE400D1001A00EB0022
- stack 0: 0xF0
7323	 423	SHR		 	 
- stack 1: 0x878
- stack 0: 0x40E
7324	 424	JUMP		 	 
- stack 0: 0x878
7325	 40E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x878
7326	 40F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x878
- stack 0: 0x878
7327	 410	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x40E00000086000F00BA00000351000103700002038AFFE400D1001A00EB0022
7328	 411	PUSH1	E0	 	 
- stack 2: 0x878
- stack 1: 0x40E00000086000F00BA00000351000103700002038AFFE400D1001A00EB0022
- stack 0: 0xE0
7329	 413	SHR		 	 
- stack 1: 0x878
- stack 0: 0x40E0000
7330	 414	PUSH2	FFFF	 	 
- stack 2: 0x878
- stack 1: 0x40E0000
- stack 0: 0xFFFF
7331	 417	AND		 	 
- stack 1: 0x878
- stack 0: 0x0
7332	 418	PUSH1	01	 	 
- stack 2: 0x878
- stack 1: 0x0
- stack 0: 0x1
7333	 41A	SIGNEXTEND		 	 
- stack 1: 0x878
- stack 0: 0x0
7334	 41B	POP		 	 
- stack 0: 0x878
7335	 41C	PUSH1	04	 	 
- stack 1: 0x878
- stack 0: 0x4
7336	 41E	ADD		 	 
- stack 0: 0x87C
7337	 41F	DUP1		 	  ;; # executing pc
- stack 1: 0x87C
- stack 0: 0x87C
7338	 420	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x86000F00BA00000351000103700002038AFFE400D1001A00EB002201050058
7339	 421	PUSH1	F0	 	 
- stack 2: 0x87C
- stack 1: 0x86000F00BA00000351000103700002038AFFE400D1001A00EB002201050058
- stack 0: 0xF0
7340	 423	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x86
7341	 424	JUMP		 	 
- stack 0: 0x87C
7342	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x87C
7343	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x87C
- stack 0: 0x87C
7344	 88	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x86000F00BA00000351000103700002038AFFE400D1001A00EB002201050058
7345	 89	PUSH1	E0	 	 
- stack 2: 0x87C
- stack 1: 0x86000F00BA00000351000103700002038AFFE400D1001A00EB002201050058
- stack 0: 0xE0
7346	 8B	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x86000F
7347	 8C	PUSH2	FFFF	 	 
- stack 2: 0x87C
- stack 1: 0x86000F
- stack 0: 0xFFFF
7348	 8F	AND		 	 
- stack 1: 0x87C
- stack 0: 0xF
7349	 90	PUSH1	01	 	 
- stack 2: 0x87C
- stack 1: 0xF
- stack 0: 0x1
7350	 92	SIGNEXTEND		 	 
- stack 1: 0x87C
- stack 0: 0xF
7351	 93	PUSH2	0020	 	 
- stack 2: 0x87C
- stack 1: 0xF
- stack 0: 0x20
7352	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x87C
7353	 97	PUSH1	04	 	 
- stack 1: 0x87C
- stack 0: 0x4
7354	 99	ADD		 	 
- stack 0: 0x880
7355	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
7356	 9B	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0xBA00000351000103700002038AFFE400D1001A00EB0022010500580086000F
7357	 9C	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0xBA00000351000103700002038AFFE400D1001A00EB0022010500580086000F
- stack 0: 0xF0
7358	 9E	SHR		 	 
- stack 1: 0x880
- stack 0: 0xBA
7359	 9F	JUMP		 	 
- stack 0: 0x880
7360	 BA	JUMPDEST		 ;; __riscvimpl_ADD_3_1_2	  ;; # instr: add gp,ra,sp(ignore imm)
- stack 0: 0x880
7361	 BB	PUSH2	0020	 	 
- stack 1: 0x880
- stack 0: 0x20
7362	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x880
- stack 0: 0xF
7363	 BF	PUSH2	0040	 	 
- stack 2: 0x880
- stack 1: 0xF
- stack 0: 0x40
7364	 C2	MLOAD		 	  ;; # read from x2
- stack 2: 0x880
- stack 1: 0xF
- stack 0: 0xB
7365	 C3	ADD		 	 
- stack 1: 0x880
- stack 0: 0x1A
7366	 C4	PUSH2	0060	 	 
- stack 2: 0x880
- stack 1: 0x1A
- stack 0: 0x60
7367	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x880
7368	 C8	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
7369	 CA	ADD		 	 
- stack 0: 0x884
7370	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
7371	 CC	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x351000103700002038AFFE400D1001A00EB0022010500580086000F04250000
7372	 CD	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0x351000103700002038AFFE400D1001A00EB0022010500580086000F04250000
- stack 0: 0xF0
7373	 CF	SHR		 	 
- stack 1: 0x884
- stack 0: 0x351
7374	 D0	JUMP		 	 
- stack 0: 0x884
7375	 351	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x884
7376	 352	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x884
- stack 0: 0x884
7377	 353	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x351000103700002038AFFE400D1001A00EB0022010500580086000F04250000
7378	 354	PUSH1	E0	 	 
- stack 2: 0x884
- stack 1: 0x351000103700002038AFFE400D1001A00EB0022010500580086000F04250000
- stack 0: 0xE0
7379	 356	SHR		 	 
- stack 1: 0x884
- stack 0: 0x3510001
7380	 357	PUSH2	FFFF	 	 
- stack 2: 0x884
- stack 1: 0x3510001
- stack 0: 0xFFFF
7381	 35A	AND		 	 
- stack 1: 0x884
- stack 0: 0x1
7382	 35B	PUSH1	01	 	 
- stack 2: 0x884
- stack 1: 0x1
- stack 0: 0x1
7383	 35D	SIGNEXTEND		 	 
- stack 1: 0x884
- stack 0: 0x1
7384	 35E	PUSH2	0080	 	 
- stack 2: 0x884
- stack 1: 0x1
- stack 0: 0x80
7385	 361	MLOAD		 	  ;; # read from x4
- stack 2: 0x884
- stack 1: 0x1
- stack 0: 0x1
7386	 362	ADD		 	  ;; # ADDI 4
- stack 1: 0x884
- stack 0: 0x2
7387	 363	PUSH2	0080	 	 
- stack 2: 0x884
- stack 1: 0x2
- stack 0: 0x80
7388	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x884
7389	 367	PUSH1	04	 	 
- stack 1: 0x884
- stack 0: 0x4
7390	 369	ADD		 	 
- stack 0: 0x888
7391	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x888
- stack 0: 0x888
7392	 36B	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x3700002038AFFE400D1001A00EB0022010500580086000F0425000000D1000F
7393	 36C	PUSH1	F0	 	 
- stack 2: 0x888
- stack 1: 0x3700002038AFFE400D1001A00EB0022010500580086000F0425000000D1000F
- stack 0: 0xF0
7394	 36E	SHR		 	 
- stack 1: 0x888
- stack 0: 0x370
7395	 36F	JUMP		 	 
- stack 0: 0x888
7396	 370	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x888
7397	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x888
- stack 0: 0x888
7398	 372	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x3700002038AFFE400D1001A00EB0022010500580086000F0425000000D1000F
7399	 373	PUSH1	E0	 	 
- stack 2: 0x888
- stack 1: 0x3700002038AFFE400D1001A00EB0022010500580086000F0425000000D1000F
- stack 0: 0xE0
7400	 375	SHR		 	 
- stack 1: 0x888
- stack 0: 0x3700002
7401	 376	PUSH2	FFFF	 	 
- stack 2: 0x888
- stack 1: 0x3700002
- stack 0: 0xFFFF
7402	 379	AND		 	 
- stack 1: 0x888
- stack 0: 0x2
7403	 37A	PUSH1	01	 	 
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0x1
7404	 37C	SIGNEXTEND		 	 
- stack 1: 0x888
- stack 0: 0x2
7405	 37D	PUSH2	00A0	 	 
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0xA0
7406	 380	MSTORE		 	  ;; # store to x5
- stack 0: 0x888
7407	 381	PUSH1	04	 	 
- stack 1: 0x888
- stack 0: 0x4
7408	 383	ADD		 	 
- stack 0: 0x88C
7409	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x88C
- stack 0: 0x88C
7410	 385	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0x38AFFE400D1001A00EB0022010500580086000F0425000000D1000F00EB0023
7411	 386	PUSH1	F0	 	 
- stack 2: 0x88C
- stack 1: 0x38AFFE400D1001A00EB0022010500580086000F0425000000D1000F00EB0023
- stack 0: 0xF0
7412	 388	SHR		 	 
- stack 1: 0x88C
- stack 0: 0x38A
7413	 389	JUMP		 	 
- stack 0: 0x88C
7414	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x88C
7415	 38B	PUSH2	0080	 	 
- stack 1: 0x88C
- stack 0: 0x80
7416	 38E	MLOAD		 	  ;; # read from x4
- stack 1: 0x88C
- stack 0: 0x2
7417	 38F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x88C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7418	 394	AND		 	  ;; # mask to 32 bits
- stack 1: 0x88C
- stack 0: 0x2
7419	 395	PUSH2	00A0	 	 
- stack 2: 0x88C
- stack 1: 0x2
- stack 0: 0xA0
7420	 398	MLOAD		 	  ;; # read from x5
- stack 2: 0x88C
- stack 1: 0x2
- stack 0: 0x2
7421	 399	PUSH4	FFFFFFFF	 	 
- stack 3: 0x88C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7422	 39E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x88C
- stack 1: 0x2
- stack 0: 0x2
7423	 39F	SUB		 	 
- stack 1: 0x88C
- stack 0: 0x0
7424	 3A0	PUSH2	03A8	 ;; _neq_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 2: 0x88C
- stack 1: 0x0
- stack 0: 0x3A8
7425	 3A3	JUMPI		 	 
- stack 0: 0x88C
7426	 3A4	PUSH2	03C2	 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 1: 0x88C
- stack 0: 0x3C2
7427	 3A7	JUMP		 	 
- stack 0: 0x88C
7428	 3C2	JUMPDEST		 ;; _neq_after_ece20473d408d9f21cbe004b85a06555717d599769b02acc4b391a6fb71642e2	 
- stack 0: 0x88C
7429	 3C3	PUSH1	04	 	 
- stack 1: 0x88C
- stack 0: 0x4
7430	 3C5	ADD		 	 
- stack 0: 0x890
7431	 3C6	DUP1		 	  ;; # executing pc
- stack 1: 0x890
- stack 0: 0x890
7432	 3C7	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0xD1001A00EB0022010500580086000F0425000000D1000F00EB002302BF0044
7433	 3C8	PUSH1	F0	 	 
- stack 2: 0x890
- stack 1: 0xD1001A00EB0022010500580086000F0425000000D1000F00EB002302BF0044
- stack 0: 0xF0
7434	 3CA	SHR		 	 
- stack 1: 0x890
- stack 0: 0xD1
7435	 3CB	JUMP		 	 
- stack 0: 0x890
7436	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x890
7437	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x890
- stack 0: 0x890
7438	 D3	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0xD1001A00EB0022010500580086000F0425000000D1000F00EB002302BF0044
7439	 D4	PUSH1	E0	 	 
- stack 2: 0x890
- stack 1: 0xD1001A00EB0022010500580086000F0425000000D1000F00EB002302BF0044
- stack 0: 0xE0
7440	 D6	SHR		 	 
- stack 1: 0x890
- stack 0: 0xD1001A
7441	 D7	PUSH2	FFFF	 	 
- stack 2: 0x890
- stack 1: 0xD1001A
- stack 0: 0xFFFF
7442	 DA	AND		 	 
- stack 1: 0x890
- stack 0: 0x1A
7443	 DB	PUSH1	01	 	 
- stack 2: 0x890
- stack 1: 0x1A
- stack 0: 0x1
7444	 DD	SIGNEXTEND		 	 
- stack 1: 0x890
- stack 0: 0x1A
7445	 DE	PUSH2	03A0	 	 
- stack 2: 0x890
- stack 1: 0x1A
- stack 0: 0x3A0
7446	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x890
7447	 E2	PUSH1	04	 	 
- stack 1: 0x890
- stack 0: 0x4
7448	 E4	ADD		 	 
- stack 0: 0x894
7449	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x894
- stack 0: 0x894
7450	 E6	MLOAD		 	 
- stack 1: 0x894
- stack 0: 0xEB0022010500580086000F0425000000D1000F00EB002302BF004400860020
7451	 E7	PUSH1	F0	 	 
- stack 2: 0x894
- stack 1: 0xEB0022010500580086000F0425000000D1000F00EB002302BF004400860020
- stack 0: 0xF0
7452	 E9	SHR		 	 
- stack 1: 0x894
- stack 0: 0xEB
7453	 EA	JUMP		 	 
- stack 0: 0x894
7454	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x894
7455	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x894
- stack 0: 0x894
7456	 ED	MLOAD		 	 
- stack 1: 0x894
- stack 0: 0xEB0022010500580086000F0425000000D1000F00EB002302BF004400860020
7457	 EE	PUSH1	E0	 	 
- stack 2: 0x894
- stack 1: 0xEB0022010500580086000F0425000000D1000F00EB002302BF004400860020
- stack 0: 0xE0
7458	 F0	SHR		 	 
- stack 1: 0x894
- stack 0: 0xEB0022
7459	 F1	PUSH2	FFFF	 	 
- stack 2: 0x894
- stack 1: 0xEB0022
- stack 0: 0xFFFF
7460	 F4	AND		 	 
- stack 1: 0x894
- stack 0: 0x22
7461	 F5	PUSH1	01	 	 
- stack 2: 0x894
- stack 1: 0x22
- stack 0: 0x1
7462	 F7	SIGNEXTEND		 	 
- stack 1: 0x894
- stack 0: 0x22
7463	 F8	PUSH2	0380	 	 
- stack 2: 0x894
- stack 1: 0x22
- stack 0: 0x380
7464	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x894
7465	 FC	PUSH1	04	 	 
- stack 1: 0x894
- stack 0: 0x4
7466	 FE	ADD		 	 
- stack 0: 0x898
7467	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x898
- stack 0: 0x898
7468	 100	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0x10500580086000F0425000000D1000F00EB002302BF004400860020043A0000
7469	 101	PUSH1	F0	 	 
- stack 2: 0x898
- stack 1: 0x10500580086000F0425000000D1000F00EB002302BF004400860020043A0000
- stack 0: 0xF0
7470	 103	SHR		 	 
- stack 1: 0x898
- stack 0: 0x105
7471	 104	JUMP		 	 
- stack 0: 0x898
7472	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4cc(ignore imm)
- stack 0: 0x898
7473	 106	PUSH2	0060	 	 
- stack 1: 0x898
- stack 0: 0x60
7474	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x898
- stack 0: 0x1A
7475	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x898
- stack 1: 0x1A
- stack 0: 0xFFFFFFFF
7476	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x898
- stack 0: 0x1A
7477	 110	PUSH2	03A0	 	 
- stack 2: 0x898
- stack 1: 0x1A
- stack 0: 0x3A0
7478	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x898
- stack 1: 0x1A
- stack 0: 0x1A
7479	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x898
- stack 2: 0x1A
- stack 1: 0x1A
- stack 0: 0xFFFFFFFF
7480	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x898
- stack 1: 0x1A
- stack 0: 0x1A
7481	 11A	SUB		 	 
- stack 1: 0x898
- stack 0: 0x0
7482	 11B	PUSH2	0123	 ;; _neq_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 2: 0x898
- stack 1: 0x0
- stack 0: 0x123
7483	 11E	JUMPI		 	 
- stack 0: 0x898
7484	 11F	PUSH2	013D	 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 1: 0x898
- stack 0: 0x13D
7485	 122	JUMP		 	 
- stack 0: 0x898
7486	 13D	JUMPDEST		 ;; _neq_after_d97df3e63de78839e97af2593cda367689f881ee9cffe99b14c19accbafc32cc	 
- stack 0: 0x898
7487	 13E	PUSH1	04	 	 
- stack 1: 0x898
- stack 0: 0x4
7488	 140	ADD		 	 
- stack 0: 0x89C
7489	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x89C
- stack 0: 0x89C
7490	 142	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0x86000F0425000000D1000F00EB002302BF004400860020043A000000D10020
7491	 143	PUSH1	F0	 	 
- stack 2: 0x89C
- stack 1: 0x86000F0425000000D1000F00EB002302BF004400860020043A000000D10020
- stack 0: 0xF0
7492	 145	SHR		 	 
- stack 1: 0x89C
- stack 0: 0x86
7493	 146	JUMP		 	 
- stack 0: 0x89C
7494	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x89C
7495	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x89C
- stack 0: 0x89C
7496	 88	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0x86000F0425000000D1000F00EB002302BF004400860020043A000000D10020
7497	 89	PUSH1	E0	 	 
- stack 2: 0x89C
- stack 1: 0x86000F0425000000D1000F00EB002302BF004400860020043A000000D10020
- stack 0: 0xE0
7498	 8B	SHR		 	 
- stack 1: 0x89C
- stack 0: 0x86000F
7499	 8C	PUSH2	FFFF	 	 
- stack 2: 0x89C
- stack 1: 0x86000F
- stack 0: 0xFFFF
7500	 8F	AND		 	 
- stack 1: 0x89C
- stack 0: 0xF
7501	 90	PUSH1	01	 	 
- stack 2: 0x89C
- stack 1: 0xF
- stack 0: 0x1
7502	 92	SIGNEXTEND		 	 
- stack 1: 0x89C
- stack 0: 0xF
7503	 93	PUSH2	0020	 	 
- stack 2: 0x89C
- stack 1: 0xF
- stack 0: 0x20
7504	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x89C
7505	 97	PUSH1	04	 	 
- stack 1: 0x89C
- stack 0: 0x4
7506	 99	ADD		 	 
- stack 0: 0x8A0
7507	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x8A0
- stack 0: 0x8A0
7508	 9B	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x425000000D1000F00EB002302BF004400860020043A000000D1002000EB0024
7509	 9C	PUSH1	F0	 	 
- stack 2: 0x8A0
- stack 1: 0x425000000D1000F00EB002302BF004400860020043A000000D1002000EB0024
- stack 0: 0xF0
7510	 9E	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x425
7511	 9F	JUMP		 	 
- stack 0: 0x8A0
7512	 425	JUMPDEST		 ;; __riscvimpl_ADD_2_0_1	  ;; # instr: add sp,zero,ra(ignore imm)
- stack 0: 0x8A0
7513	 426	PUSH1	00	 	 
- stack 1: 0x8A0
- stack 0: 0x0
7514	 428	PUSH2	0020	 	 
- stack 2: 0x8A0
- stack 1: 0x0
- stack 0: 0x20
7515	 42B	MLOAD		 	  ;; # read from x1
- stack 2: 0x8A0
- stack 1: 0x0
- stack 0: 0xF
7516	 42C	ADD		 	 
- stack 1: 0x8A0
- stack 0: 0xF
7517	 42D	PUSH2	0040	 	 
- stack 2: 0x8A0
- stack 1: 0xF
- stack 0: 0x40
7518	 430	MSTORE		 	  ;; # store to x2
- stack 0: 0x8A0
7519	 431	PUSH1	04	 	 
- stack 1: 0x8A0
- stack 0: 0x4
7520	 433	ADD		 	 
- stack 0: 0x8A4
7521	 434	DUP1		 	  ;; # executing pc
- stack 1: 0x8A4
- stack 0: 0x8A4
7522	 435	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0xD1000F00EB002302BF004400860020043A000000D1002000EB002402BF0030
7523	 436	PUSH1	F0	 	 
- stack 2: 0x8A4
- stack 1: 0xD1000F00EB002302BF004400860020043A000000D1002000EB002402BF0030
- stack 0: 0xF0
7524	 438	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0xD1
7525	 439	JUMP		 	 
- stack 0: 0x8A4
7526	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x8A4
7527	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A4
- stack 0: 0x8A4
7528	 D3	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0xD1000F00EB002302BF004400860020043A000000D1002000EB002402BF0030
7529	 D4	PUSH1	E0	 	 
- stack 2: 0x8A4
- stack 1: 0xD1000F00EB002302BF004400860020043A000000D1002000EB002402BF0030
- stack 0: 0xE0
7530	 D6	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0xD1000F
7531	 D7	PUSH2	FFFF	 	 
- stack 2: 0x8A4
- stack 1: 0xD1000F
- stack 0: 0xFFFF
7532	 DA	AND		 	 
- stack 1: 0x8A4
- stack 0: 0xF
7533	 DB	PUSH1	01	 	 
- stack 2: 0x8A4
- stack 1: 0xF
- stack 0: 0x1
7534	 DD	SIGNEXTEND		 	 
- stack 1: 0x8A4
- stack 0: 0xF
7535	 DE	PUSH2	03A0	 	 
- stack 2: 0x8A4
- stack 1: 0xF
- stack 0: 0x3A0
7536	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x8A4
7537	 E2	PUSH1	04	 	 
- stack 1: 0x8A4
- stack 0: 0x4
7538	 E4	ADD		 	 
- stack 0: 0x8A8
7539	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x8A8
- stack 0: 0x8A8
7540	 E6	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0xEB002302BF004400860020043A000000D1002000EB002402BF0030044F0000
7541	 E7	PUSH1	F0	 	 
- stack 2: 0x8A8
- stack 1: 0xEB002302BF004400860020043A000000D1002000EB002402BF0030044F0000
- stack 0: 0xF0
7542	 E9	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0xEB
7543	 EA	JUMP		 	 
- stack 0: 0x8A8
7544	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8A8
7545	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A8
- stack 0: 0x8A8
7546	 ED	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0xEB002302BF004400860020043A000000D1002000EB002402BF0030044F0000
7547	 EE	PUSH1	E0	 	 
- stack 2: 0x8A8
- stack 1: 0xEB002302BF004400860020043A000000D1002000EB002402BF0030044F0000
- stack 0: 0xE0
7548	 F0	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0xEB0023
7549	 F1	PUSH2	FFFF	 	 
- stack 2: 0x8A8
- stack 1: 0xEB0023
- stack 0: 0xFFFF
7550	 F4	AND		 	 
- stack 1: 0x8A8
- stack 0: 0x23
7551	 F5	PUSH1	01	 	 
- stack 2: 0x8A8
- stack 1: 0x23
- stack 0: 0x1
7552	 F7	SIGNEXTEND		 	 
- stack 1: 0x8A8
- stack 0: 0x23
7553	 F8	PUSH2	0380	 	 
- stack 2: 0x8A8
- stack 1: 0x23
- stack 0: 0x380
7554	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x8A8
7555	 FC	PUSH1	04	 	 
- stack 1: 0x8A8
- stack 0: 0x4
7556	 FE	ADD		 	 
- stack 0: 0x8AC
7557	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x8AC
- stack 0: 0x8AC
7558	 100	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0x2BF004400860020043A000000D1002000EB002402BF0030044F000000D10000
7559	 101	PUSH1	F0	 	 
- stack 2: 0x8AC
- stack 1: 0x2BF004400860020043A000000D1002000EB002402BF0030044F000000D10000
- stack 0: 0xF0
7560	 103	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0x2BF
7561	 104	JUMP		 	 
- stack 0: 0x8AC
7562	 2BF	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,31c(ignore imm)
- stack 0: 0x8AC
7563	 2C0	PUSH2	0040	 	 
- stack 1: 0x8AC
- stack 0: 0x40
7564	 2C3	MLOAD		 	  ;; # read from x2
- stack 1: 0x8AC
- stack 0: 0xF
7565	 2C4	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8AC
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
7566	 2C9	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8AC
- stack 0: 0xF
7567	 2CA	PUSH2	03A0	 	 
- stack 2: 0x8AC
- stack 1: 0xF
- stack 0: 0x3A0
7568	 2CD	MLOAD		 	  ;; # read from x29
- stack 2: 0x8AC
- stack 1: 0xF
- stack 0: 0xF
7569	 2CE	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8AC
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
7570	 2D3	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8AC
- stack 1: 0xF
- stack 0: 0xF
7571	 2D4	SUB		 	 
- stack 1: 0x8AC
- stack 0: 0x0
7572	 2D5	PUSH2	02DD	 ;; _neq_42cb5315520975377ebfdae83abd1a8e30bd17eba19963b5037960a4113f34bd	 
- stack 2: 0x8AC
- stack 1: 0x0
- stack 0: 0x2DD
7573	 2D8	JUMPI		 	 
- stack 0: 0x8AC
7574	 2D9	PUSH2	02F7	 ;; _neq_after_42cb5315520975377ebfdae83abd1a8e30bd17eba19963b5037960a4113f34bd	 
- stack 1: 0x8AC
- stack 0: 0x2F7
7575	 2DC	JUMP		 	 
- stack 0: 0x8AC
7576	 2F7	JUMPDEST		 ;; _neq_after_42cb5315520975377ebfdae83abd1a8e30bd17eba19963b5037960a4113f34bd	 
- stack 0: 0x8AC
7577	 2F8	PUSH1	04	 	 
- stack 1: 0x8AC
- stack 0: 0x4
7578	 2FA	ADD		 	 
- stack 0: 0x8B0
7579	 2FB	DUP1		 	  ;; # executing pc
- stack 1: 0x8B0
- stack 0: 0x8B0
7580	 2FC	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x860020043A000000D1002000EB002402BF0030044F000000D1000000EB0025
7581	 2FD	PUSH1	F0	 	 
- stack 2: 0x8B0
- stack 1: 0x860020043A000000D1002000EB002402BF0030044F000000D1000000EB0025
- stack 0: 0xF0
7582	 2FF	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x86
7583	 300	JUMP		 	 
- stack 0: 0x8B0
7584	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x8B0
7585	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B0
- stack 0: 0x8B0
7586	 88	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x860020043A000000D1002000EB002402BF0030044F000000D1000000EB0025
7587	 89	PUSH1	E0	 	 
- stack 2: 0x8B0
- stack 1: 0x860020043A000000D1002000EB002402BF0030044F000000D1000000EB0025
- stack 0: 0xE0
7588	 8B	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x860020
7589	 8C	PUSH2	FFFF	 	 
- stack 2: 0x8B0
- stack 1: 0x860020
- stack 0: 0xFFFF
7590	 8F	AND		 	 
- stack 1: 0x8B0
- stack 0: 0x20
7591	 90	PUSH1	01	 	 
- stack 2: 0x8B0
- stack 1: 0x20
- stack 0: 0x1
7592	 92	SIGNEXTEND		 	 
- stack 1: 0x8B0
- stack 0: 0x20
7593	 93	PUSH2	0020	 	 
- stack 2: 0x8B0
- stack 1: 0x20
- stack 0: 0x20
7594	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x8B0
7595	 97	PUSH1	04	 	 
- stack 1: 0x8B0
- stack 0: 0x4
7596	 99	ADD		 	 
- stack 0: 0x8B4
7597	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x8B4
- stack 0: 0x8B4
7598	 9B	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x43A000000D1002000EB002402BF0030044F000000D1000000EB002502660020
7599	 9C	PUSH1	F0	 	 
- stack 2: 0x8B4
- stack 1: 0x43A000000D1002000EB002402BF0030044F000000D1000000EB002502660020
- stack 0: 0xF0
7600	 9E	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x43A
7601	 9F	JUMP		 	 
- stack 0: 0x8B4
7602	 43A	JUMPDEST		 ;; __riscvimpl_ADD_2_1_0	  ;; # instr: add sp,ra,zero(ignore imm)
- stack 0: 0x8B4
7603	 43B	PUSH2	0020	 	 
- stack 1: 0x8B4
- stack 0: 0x20
7604	 43E	MLOAD		 	  ;; # read from x1
- stack 1: 0x8B4
- stack 0: 0x20
7605	 43F	PUSH1	00	 	 
- stack 2: 0x8B4
- stack 1: 0x20
- stack 0: 0x0
7606	 441	ADD		 	 
- stack 1: 0x8B4
- stack 0: 0x20
7607	 442	PUSH2	0040	 	 
- stack 2: 0x8B4
- stack 1: 0x20
- stack 0: 0x40
7608	 445	MSTORE		 	  ;; # store to x2
- stack 0: 0x8B4
7609	 446	PUSH1	04	 	 
- stack 1: 0x8B4
- stack 0: 0x4
7610	 448	ADD		 	 
- stack 0: 0x8B8
7611	 449	DUP1		 	  ;; # executing pc
- stack 1: 0x8B8
- stack 0: 0x8B8
7612	 44A	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0xD1002000EB002402BF0030044F000000D1000000EB00250266002000860010
7613	 44B	PUSH1	F0	 	 
- stack 2: 0x8B8
- stack 1: 0xD1002000EB002402BF0030044F000000D1000000EB00250266002000860010
- stack 0: 0xF0
7614	 44D	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0xD1
7615	 44E	JUMP		 	 
- stack 0: 0x8B8
7616	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x8B8
7617	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B8
- stack 0: 0x8B8
7618	 D3	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0xD1002000EB002402BF0030044F000000D1000000EB00250266002000860010
7619	 D4	PUSH1	E0	 	 
- stack 2: 0x8B8
- stack 1: 0xD1002000EB002402BF0030044F000000D1000000EB00250266002000860010
- stack 0: 0xE0
7620	 D6	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0xD10020
7621	 D7	PUSH2	FFFF	 	 
- stack 2: 0x8B8
- stack 1: 0xD10020
- stack 0: 0xFFFF
7622	 DA	AND		 	 
- stack 1: 0x8B8
- stack 0: 0x20
7623	 DB	PUSH1	01	 	 
- stack 2: 0x8B8
- stack 1: 0x20
- stack 0: 0x1
7624	 DD	SIGNEXTEND		 	 
- stack 1: 0x8B8
- stack 0: 0x20
7625	 DE	PUSH2	03A0	 	 
- stack 2: 0x8B8
- stack 1: 0x20
- stack 0: 0x3A0
7626	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x8B8
7627	 E2	PUSH1	04	 	 
- stack 1: 0x8B8
- stack 0: 0x4
7628	 E4	ADD		 	 
- stack 0: 0x8BC
7629	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x8BC
- stack 0: 0x8BC
7630	 E6	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0xEB002402BF0030044F000000D1000000EB0025026600200086001000A0001E
7631	 E7	PUSH1	F0	 	 
- stack 2: 0x8BC
- stack 1: 0xEB002402BF0030044F000000D1000000EB0025026600200086001000A0001E
- stack 0: 0xF0
7632	 E9	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0xEB
7633	 EA	JUMP		 	 
- stack 0: 0x8BC
7634	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8BC
7635	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8BC
- stack 0: 0x8BC
7636	 ED	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0xEB002402BF0030044F000000D1000000EB0025026600200086001000A0001E
7637	 EE	PUSH1	E0	 	 
- stack 2: 0x8BC
- stack 1: 0xEB002402BF0030044F000000D1000000EB0025026600200086001000A0001E
- stack 0: 0xE0
7638	 F0	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0xEB0024
7639	 F1	PUSH2	FFFF	 	 
- stack 2: 0x8BC
- stack 1: 0xEB0024
- stack 0: 0xFFFF
7640	 F4	AND		 	 
- stack 1: 0x8BC
- stack 0: 0x24
7641	 F5	PUSH1	01	 	 
- stack 2: 0x8BC
- stack 1: 0x24
- stack 0: 0x1
7642	 F7	SIGNEXTEND		 	 
- stack 1: 0x8BC
- stack 0: 0x24
7643	 F8	PUSH2	0380	 	 
- stack 2: 0x8BC
- stack 1: 0x24
- stack 0: 0x380
7644	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x8BC
7645	 FC	PUSH1	04	 	 
- stack 1: 0x8BC
- stack 0: 0x4
7646	 FE	ADD		 	 
- stack 0: 0x8C0
7647	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x8C0
- stack 0: 0x8C0
7648	 100	MLOAD		 	 
- stack 1: 0x8C0
- stack 0: 0x2BF0030044F000000D1000000EB0025026600200086001000A0001E04620000
7649	 101	PUSH1	F0	 	 
- stack 2: 0x8C0
- stack 1: 0x2BF0030044F000000D1000000EB0025026600200086001000A0001E04620000
- stack 0: 0xF0
7650	 103	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0x2BF
7651	 104	JUMP		 	 
- stack 0: 0x8C0
7652	 2BF	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,31c(ignore imm)
- stack 0: 0x8C0
7653	 2C0	PUSH2	0040	 	 
- stack 1: 0x8C0
- stack 0: 0x40
7654	 2C3	MLOAD		 	  ;; # read from x2
- stack 1: 0x8C0
- stack 0: 0x20
7655	 2C4	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8C0
- stack 1: 0x20
- stack 0: 0xFFFFFFFF
7656	 2C9	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8C0
- stack 0: 0x20
7657	 2CA	PUSH2	03A0	 	 
- stack 2: 0x8C0
- stack 1: 0x20
- stack 0: 0x3A0
7658	 2CD	MLOAD		 	  ;; # read from x29
- stack 2: 0x8C0
- stack 1: 0x20
- stack 0: 0x20
7659	 2CE	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8C0
- stack 2: 0x20
- stack 1: 0x20
- stack 0: 0xFFFFFFFF
7660	 2D3	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8C0
- stack 1: 0x20
- stack 0: 0x20
7661	 2D4	SUB		 	 
- stack 1: 0x8C0
- stack 0: 0x0
7662	 2D5	PUSH2	02DD	 ;; _neq_42cb5315520975377ebfdae83abd1a8e30bd17eba19963b5037960a4113f34bd	 
- stack 2: 0x8C0
- stack 1: 0x0
- stack 0: 0x2DD
7663	 2D8	JUMPI		 	 
- stack 0: 0x8C0
7664	 2D9	PUSH2	02F7	 ;; _neq_after_42cb5315520975377ebfdae83abd1a8e30bd17eba19963b5037960a4113f34bd	 
- stack 1: 0x8C0
- stack 0: 0x2F7
7665	 2DC	JUMP		 	 
- stack 0: 0x8C0
7666	 2F7	JUMPDEST		 ;; _neq_after_42cb5315520975377ebfdae83abd1a8e30bd17eba19963b5037960a4113f34bd	 
- stack 0: 0x8C0
7667	 2F8	PUSH1	04	 	 
- stack 1: 0x8C0
- stack 0: 0x4
7668	 2FA	ADD		 	 
- stack 0: 0x8C4
7669	 2FB	DUP1		 	  ;; # executing pc
- stack 1: 0x8C4
- stack 0: 0x8C4
7670	 2FC	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0x44F000000D1000000EB0025026600200086001000A0001E0462000000D10000
7671	 2FD	PUSH1	F0	 	 
- stack 2: 0x8C4
- stack 1: 0x44F000000D1000000EB0025026600200086001000A0001E0462000000D10000
- stack 0: 0xF0
7672	 2FF	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0x44F
7673	 300	JUMP		 	 
- stack 0: 0x8C4
7674	 44F	JUMPDEST		 ;; __riscvimpl_ADD_1_0_0	  ;; # instr: add ra,zero,zero(ignore imm)
- stack 0: 0x8C4
7675	 450	PUSH1	00	 	 
- stack 1: 0x8C4
- stack 0: 0x0
7676	 452	PUSH1	00	 	 
- stack 2: 0x8C4
- stack 1: 0x0
- stack 0: 0x0
7677	 454	ADD		 	 
- stack 1: 0x8C4
- stack 0: 0x0
7678	 455	PUSH2	0020	 	 
- stack 2: 0x8C4
- stack 1: 0x0
- stack 0: 0x20
7679	 458	MSTORE		 	  ;; # store to x1
- stack 0: 0x8C4
7680	 459	PUSH1	04	 	 
- stack 1: 0x8C4
- stack 0: 0x4
7681	 45B	ADD		 	 
- stack 0: 0x8C8
7682	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x8C8
- stack 0: 0x8C8
7683	 45D	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0xD1000000EB0025026600200086001000A0001E0462000000D1000000EB0026
7684	 45E	PUSH1	F0	 	 
- stack 2: 0x8C8
- stack 1: 0xD1000000EB0025026600200086001000A0001E0462000000D1000000EB0026
- stack 0: 0xF0
7685	 460	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0xD1
7686	 461	JUMP		 	 
- stack 0: 0x8C8
7687	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x8C8
7688	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C8
- stack 0: 0x8C8
7689	 D3	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0xD1000000EB0025026600200086001000A0001E0462000000D1000000EB0026
7690	 D4	PUSH1	E0	 	 
- stack 2: 0x8C8
- stack 1: 0xD1000000EB0025026600200086001000A0001E0462000000D1000000EB0026
- stack 0: 0xE0
7691	 D6	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0xD10000
7692	 D7	PUSH2	FFFF	 	 
- stack 2: 0x8C8
- stack 1: 0xD10000
- stack 0: 0xFFFF
7693	 DA	AND		 	 
- stack 1: 0x8C8
- stack 0: 0x0
7694	 DB	PUSH1	01	 	 
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0x1
7695	 DD	SIGNEXTEND		 	 
- stack 1: 0x8C8
- stack 0: 0x0
7696	 DE	PUSH2	03A0	 	 
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0x3A0
7697	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x8C8
7698	 E2	PUSH1	04	 	 
- stack 1: 0x8C8
- stack 0: 0x4
7699	 E4	ADD		 	 
- stack 0: 0x8CC
7700	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x8CC
- stack 0: 0x8CC
7701	 E6	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0xEB0025026600200086001000A0001E0462000000D1000000EB002604760008
7702	 E7	PUSH1	F0	 	 
- stack 2: 0x8CC
- stack 1: 0xEB0025026600200086001000A0001E0462000000D1000000EB002604760008
- stack 0: 0xF0
7703	 E9	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0xEB
7704	 EA	JUMP		 	 
- stack 0: 0x8CC
7705	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8CC
7706	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8CC
- stack 0: 0x8CC
7707	 ED	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0xEB0025026600200086001000A0001E0462000000D1000000EB002604760008
7708	 EE	PUSH1	E0	 	 
- stack 2: 0x8CC
- stack 1: 0xEB0025026600200086001000A0001E0462000000D1000000EB002604760008
- stack 0: 0xE0
7709	 F0	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0xEB0025
7710	 F1	PUSH2	FFFF	 	 
- stack 2: 0x8CC
- stack 1: 0xEB0025
- stack 0: 0xFFFF
7711	 F4	AND		 	 
- stack 1: 0x8CC
- stack 0: 0x25
7712	 F5	PUSH1	01	 	 
- stack 2: 0x8CC
- stack 1: 0x25
- stack 0: 0x1
7713	 F7	SIGNEXTEND		 	 
- stack 1: 0x8CC
- stack 0: 0x25
7714	 F8	PUSH2	0380	 	 
- stack 2: 0x8CC
- stack 1: 0x25
- stack 0: 0x380
7715	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x8CC
7716	 FC	PUSH1	04	 	 
- stack 1: 0x8CC
- stack 0: 0x4
7717	 FE	ADD		 	 
- stack 0: 0x8D0
7718	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x8D0
- stack 0: 0x8D0
7719	 100	MLOAD		 	 
- stack 1: 0x8D0
- stack 0: 0x26600200086001000A0001E0462000000D1000000EB00260476000804B60018
7720	 101	PUSH1	F0	 	 
- stack 2: 0x8D0
- stack 1: 0x26600200086001000A0001E0462000000D1000000EB00260476000804B60018
- stack 0: 0xF0
7721	 103	SHR		 	 
- stack 1: 0x8D0
- stack 0: 0x266
7722	 104	JUMP		 	 
- stack 0: 0x8D0
7723	 266	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,334(ignore imm)
- stack 0: 0x8D0
7724	 267	PUSH2	0020	 	 
- stack 1: 0x8D0
- stack 0: 0x20
7725	 26A	MLOAD		 	  ;; # read from x1
- stack 1: 0x8D0
- stack 0: 0x0
7726	 26B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7727	 270	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8D0
- stack 0: 0x0
7728	 271	PUSH2	03A0	 	 
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x3A0
7729	 274	MLOAD		 	  ;; # read from x29
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x0
7730	 275	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8D0
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7731	 27A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x0
7732	 27B	SUB		 	 
- stack 1: 0x8D0
- stack 0: 0x0
7733	 27C	PUSH2	0284	 ;; _neq_2ff3c442480f18f414d4f63c5000521a10fcaa4d5fde456aa7625def0d57fad7	 
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x284
7734	 27F	JUMPI		 	 
- stack 0: 0x8D0
7735	 280	PUSH2	029E	 ;; _neq_after_2ff3c442480f18f414d4f63c5000521a10fcaa4d5fde456aa7625def0d57fad7	 
- stack 1: 0x8D0
- stack 0: 0x29E
7736	 283	JUMP		 	 
- stack 0: 0x8D0
7737	 29E	JUMPDEST		 ;; _neq_after_2ff3c442480f18f414d4f63c5000521a10fcaa4d5fde456aa7625def0d57fad7	 
- stack 0: 0x8D0
7738	 29F	PUSH1	04	 	 
- stack 1: 0x8D0
- stack 0: 0x4
7739	 2A1	ADD		 	 
- stack 0: 0x8D4
7740	 2A2	DUP1		 	  ;; # executing pc
- stack 1: 0x8D4
- stack 0: 0x8D4
7741	 2A3	MLOAD		 	 
- stack 1: 0x8D4
- stack 0: 0x86001000A0001E0462000000D1000000EB00260476000804B6001800210001
7742	 2A4	PUSH1	F0	 	 
- stack 2: 0x8D4
- stack 1: 0x86001000A0001E0462000000D1000000EB00260476000804B6001800210001
- stack 0: 0xF0
7743	 2A6	SHR		 	 
- stack 1: 0x8D4
- stack 0: 0x86
7744	 2A7	JUMP		 	 
- stack 0: 0x8D4
7745	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x8D4
7746	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8D4
- stack 0: 0x8D4
7747	 88	MLOAD		 	 
- stack 1: 0x8D4
- stack 0: 0x86001000A0001E0462000000D1000000EB00260476000804B6001800210001
7748	 89	PUSH1	E0	 	 
- stack 2: 0x8D4
- stack 1: 0x86001000A0001E0462000000D1000000EB00260476000804B6001800210001
- stack 0: 0xE0
7749	 8B	SHR		 	 
- stack 1: 0x8D4
- stack 0: 0x860010
7750	 8C	PUSH2	FFFF	 	 
- stack 2: 0x8D4
- stack 1: 0x860010
- stack 0: 0xFFFF
7751	 8F	AND		 	 
- stack 1: 0x8D4
- stack 0: 0x10
7752	 90	PUSH1	01	 	 
- stack 2: 0x8D4
- stack 1: 0x10
- stack 0: 0x1
7753	 92	SIGNEXTEND		 	 
- stack 1: 0x8D4
- stack 0: 0x10
7754	 93	PUSH2	0020	 	 
- stack 2: 0x8D4
- stack 1: 0x10
- stack 0: 0x20
7755	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x8D4
7756	 97	PUSH1	04	 	 
- stack 1: 0x8D4
- stack 0: 0x4
7757	 99	ADD		 	 
- stack 0: 0x8D8
7758	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x8D8
- stack 0: 0x8D8
7759	 9B	MLOAD		 	 
- stack 1: 0x8D8
- stack 0: 0xA0001E0462000000D1000000EB00260476000804B60018002100010034F928
7760	 9C	PUSH1	F0	 	 
- stack 2: 0x8D8
- stack 1: 0xA0001E0462000000D1000000EB00260476000804B60018002100010034F928
- stack 0: 0xF0
7761	 9E	SHR		 	 
- stack 1: 0x8D8
- stack 0: 0xA0
7762	 9F	JUMP		 	 
- stack 0: 0x8D8
7763	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x8D8
7764	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8D8
- stack 0: 0x8D8
7765	 A2	MLOAD		 	 
- stack 1: 0x8D8
- stack 0: 0xA0001E0462000000D1000000EB00260476000804B60018002100010034F928
7766	 A3	PUSH1	E0	 	 
- stack 2: 0x8D8
- stack 1: 0xA0001E0462000000D1000000EB00260476000804B60018002100010034F928
- stack 0: 0xE0
7767	 A5	SHR		 	 
- stack 1: 0x8D8
- stack 0: 0xA0001E
7768	 A6	PUSH2	FFFF	 	 
- stack 2: 0x8D8
- stack 1: 0xA0001E
- stack 0: 0xFFFF
7769	 A9	AND		 	 
- stack 1: 0x8D8
- stack 0: 0x1E
7770	 AA	PUSH1	01	 	 
- stack 2: 0x8D8
- stack 1: 0x1E
- stack 0: 0x1
7771	 AC	SIGNEXTEND		 	 
- stack 1: 0x8D8
- stack 0: 0x1E
7772	 AD	PUSH2	0040	 	 
- stack 2: 0x8D8
- stack 1: 0x1E
- stack 0: 0x40
7773	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x8D8
7774	 B1	PUSH1	04	 	 
- stack 1: 0x8D8
- stack 0: 0x4
7775	 B3	ADD		 	 
- stack 0: 0x8DC
7776	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x8DC
- stack 0: 0x8DC
7777	 B5	MLOAD		 	 
- stack 1: 0x8DC
- stack 0: 0x462000000D1000000EB00260476000804B60018002100010034F92800530042
7778	 B6	PUSH1	F0	 	 
- stack 2: 0x8DC
- stack 1: 0x462000000D1000000EB00260476000804B60018002100010034F92800530042
- stack 0: 0xF0
7779	 B8	SHR		 	 
- stack 1: 0x8DC
- stack 0: 0x462
7780	 B9	JUMP		 	 
- stack 0: 0x8DC
7781	 462	JUMPDEST		 ;; __riscvimpl_ADD_0_1_2	  ;; # instr: add zero,ra,sp(ignore imm)
- stack 0: 0x8DC
7782	 463	PUSH2	0020	 	 
- stack 1: 0x8DC
- stack 0: 0x20
7783	 466	MLOAD		 	  ;; # read from x1
- stack 1: 0x8DC
- stack 0: 0x10
7784	 467	PUSH2	0040	 	 
- stack 2: 0x8DC
- stack 1: 0x10
- stack 0: 0x40
7785	 46A	MLOAD		 	  ;; # read from x2
- stack 2: 0x8DC
- stack 1: 0x10
- stack 0: 0x1E
7786	 46B	ADD		 	 
- stack 1: 0x8DC
- stack 0: 0x2E
7787	 46C	POP		 	 
- stack 0: 0x8DC
7788	 46D	PUSH1	04	 	 
- stack 1: 0x8DC
- stack 0: 0x4
7789	 46F	ADD		 	 
- stack 0: 0x8E0
7790	 470	DUP1		 	  ;; # executing pc
- stack 1: 0x8E0
- stack 0: 0x8E0
7791	 471	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0xD1000000EB00260476000804B60018002100010034F9280053004200660000
7792	 472	PUSH1	F0	 	 
- stack 2: 0x8E0
- stack 1: 0xD1000000EB00260476000804B60018002100010034F9280053004200660000
- stack 0: 0xF0
7793	 474	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0xD1
7794	 475	JUMP		 	 
- stack 0: 0x8E0
7795	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x8E0
7796	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E0
- stack 0: 0x8E0
7797	 D3	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0xD1000000EB00260476000804B60018002100010034F9280053004200660000
7798	 D4	PUSH1	E0	 	 
- stack 2: 0x8E0
- stack 1: 0xD1000000EB00260476000804B60018002100010034F9280053004200660000
- stack 0: 0xE0
7799	 D6	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0xD10000
7800	 D7	PUSH2	FFFF	 	 
- stack 2: 0x8E0
- stack 1: 0xD10000
- stack 0: 0xFFFF
7801	 DA	AND		 	 
- stack 1: 0x8E0
- stack 0: 0x0
7802	 DB	PUSH1	01	 	 
- stack 2: 0x8E0
- stack 1: 0x0
- stack 0: 0x1
7803	 DD	SIGNEXTEND		 	 
- stack 1: 0x8E0
- stack 0: 0x0
7804	 DE	PUSH2	03A0	 	 
- stack 2: 0x8E0
- stack 1: 0x0
- stack 0: 0x3A0
7805	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x8E0
7806	 E2	PUSH1	04	 	 
- stack 1: 0x8E0
- stack 0: 0x4
7807	 E4	ADD		 	 
- stack 0: 0x8E4
7808	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x8E4
- stack 0: 0x8E4
7809	 E6	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0xEB00260476000804B60018002100010034F928005300420066000004F60001
7810	 E7	PUSH1	F0	 	 
- stack 2: 0x8E4
- stack 1: 0xEB00260476000804B60018002100010034F928005300420066000004F60001
- stack 0: 0xF0
7811	 E9	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0xEB
7812	 EA	JUMP		 	 
- stack 0: 0x8E4
7813	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8E4
7814	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E4
- stack 0: 0x8E4
7815	 ED	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0xEB00260476000804B60018002100010034F928005300420066000004F60001
7816	 EE	PUSH1	E0	 	 
- stack 2: 0x8E4
- stack 1: 0xEB00260476000804B60018002100010034F928005300420066000004F60001
- stack 0: 0xE0
7817	 F0	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0xEB0026
7818	 F1	PUSH2	FFFF	 	 
- stack 2: 0x8E4
- stack 1: 0xEB0026
- stack 0: 0xFFFF
7819	 F4	AND		 	 
- stack 1: 0x8E4
- stack 0: 0x26
7820	 F5	PUSH1	01	 	 
- stack 2: 0x8E4
- stack 1: 0x26
- stack 0: 0x1
7821	 F7	SIGNEXTEND		 	 
- stack 1: 0x8E4
- stack 0: 0x26
7822	 F8	PUSH2	0380	 	 
- stack 2: 0x8E4
- stack 1: 0x26
- stack 0: 0x380
7823	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x8E4
7824	 FC	PUSH1	04	 	 
- stack 1: 0x8E4
- stack 0: 0x4
7825	 FE	ADD		 	 
- stack 0: 0x8E8
7826	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x8E8
- stack 0: 0x8E8
7827	 100	MLOAD		 	 
- stack 1: 0x8E8
- stack 0: 0x476000804B60018002100010034F928005300420066000004F6000100210001
7828	 101	PUSH1	F0	 	 
- stack 2: 0x8E8
- stack 1: 0x476000804B60018002100010034F928005300420066000004F6000100210001
- stack 0: 0xF0
7829	 103	SHR		 	 
- stack 1: 0x8E8
- stack 0: 0x476
7830	 104	JUMP		 	 
- stack 0: 0x8E8
7831	 476	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x8E8
7832	 477	PUSH1	00	 	 
- stack 1: 0x8E8
- stack 0: 0x0
7833	 479	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8E8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7834	 47E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8E8
- stack 0: 0x0
7835	 47F	PUSH2	03A0	 	 
- stack 2: 0x8E8
- stack 1: 0x0
- stack 0: 0x3A0
7836	 482	MLOAD		 	  ;; # read from x29
- stack 2: 0x8E8
- stack 1: 0x0
- stack 0: 0x0
7837	 483	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8E8
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7838	 488	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8E8
- stack 1: 0x0
- stack 0: 0x0
7839	 489	SUB		 	 
- stack 1: 0x8E8
- stack 0: 0x0
7840	 48A	PUSH2	0492	 ;; _neq_ae77ba92ccfc8eeb918b5a33c8e001b85d64fd5f5f58b97ab65cfd0faf55aeb0	 
- stack 2: 0x8E8
- stack 1: 0x0
- stack 0: 0x492
7841	 48D	JUMPI		 	 
- stack 0: 0x8E8
7842	 48E	PUSH2	04AC	 ;; _neq_after_ae77ba92ccfc8eeb918b5a33c8e001b85d64fd5f5f58b97ab65cfd0faf55aeb0	 
- stack 1: 0x8E8
- stack 0: 0x4AC
7843	 491	JUMP		 	 
- stack 0: 0x8E8
7844	 4AC	JUMPDEST		 ;; _neq_after_ae77ba92ccfc8eeb918b5a33c8e001b85d64fd5f5f58b97ab65cfd0faf55aeb0	 
- stack 0: 0x8E8
7845	 4AD	PUSH1	04	 	 
- stack 1: 0x8E8
- stack 0: 0x4
7846	 4AF	ADD		 	 
- stack 0: 0x8EC
7847	 4B0	DUP1		 	  ;; # executing pc
- stack 1: 0x8EC
- stack 0: 0x8EC
7848	 4B1	MLOAD		 	 
- stack 1: 0x8EC
- stack 0: 0x4B60018002100010034F928005300420066000004F60001002100010034F92C
7849	 4B2	PUSH1	F0	 	 
- stack 2: 0x8EC
- stack 1: 0x4B60018002100010034F928005300420066000004F60001002100010034F92C
- stack 0: 0xF0
7850	 4B4	SHR		 	 
- stack 1: 0x8EC
- stack 0: 0x4B6
7851	 4B5	JUMP		 	 
- stack 0: 0x8EC
7852	 4B6	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x8EC
7853	 4B7	PUSH1	00	 	 
- stack 1: 0x8EC
- stack 0: 0x0
7854	 4B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8EC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7855	 4BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8EC
- stack 0: 0x0
7856	 4BF	PUSH2	0380	 	 
- stack 2: 0x8EC
- stack 1: 0x0
- stack 0: 0x380
7857	 4C2	MLOAD		 	  ;; # read from x28
- stack 2: 0x8EC
- stack 1: 0x0
- stack 0: 0x26
7858	 4C3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8EC
- stack 2: 0x0
- stack 1: 0x26
- stack 0: 0xFFFFFFFF
7859	 4C8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8EC
- stack 1: 0x0
- stack 0: 0x26
7860	 4C9	SUB		 	 
- stack 1: 0x8EC
- stack 0: 0x26
7861	 4CA	PUSH2	04D2	 ;; _neq_0aea5161710432046faa338f760101f03c85d7740205052e876f4069d280b5b6	 
- stack 2: 0x8EC
- stack 1: 0x26
- stack 0: 0x4D2
7862	 4CD	JUMPI		 	 
- stack 0: 0x8EC
7863	 4D2	JUMPDEST		 ;; _neq_0aea5161710432046faa338f760101f03c85d7740205052e876f4069d280b5b6	 
- stack 0: 0x8EC
7864	 4D3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8EC
- stack 0: 0x8EC
7865	 4D4	MLOAD		 	 
- stack 1: 0x8EC
- stack 0: 0x4B60018002100010034F928005300420066000004F60001002100010034F92C
7866	 4D5	PUSH1	E0	 	 
- stack 2: 0x8EC
- stack 1: 0x4B60018002100010034F928005300420066000004F60001002100010034F92C
- stack 0: 0xE0
7867	 4D7	SHR		 	 
- stack 1: 0x8EC
- stack 0: 0x4B60018
7868	 4D8	PUSH2	FFFF	 	 
- stack 2: 0x8EC
- stack 1: 0x4B60018
- stack 0: 0xFFFF
7869	 4DB	AND		 	 
- stack 1: 0x8EC
- stack 0: 0x18
7870	 4DC	PUSH1	01	 	 
- stack 2: 0x8EC
- stack 1: 0x18
- stack 0: 0x1
7871	 4DE	SIGNEXTEND		 	 
- stack 1: 0x8EC
- stack 0: 0x18
7872	 4DF	ADD		 	 
- stack 0: 0x904
7873	 4E0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x904
- stack 0: 0xFFFFFFFF
7874	 4E5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x904
7875	 4E6	DUP1		 	  ;; # executing pc
- stack 1: 0x904
- stack 0: 0x904
7876	 4E7	MLOAD		 	 
- stack 1: 0x904
- stack 0: 0x2100010034F92C00530042006600000501000000660000000000006574796D
7877	 4E8	PUSH1	F0	 	 
- stack 2: 0x904
- stack 1: 0x2100010034F92C00530042006600000501000000660000000000006574796D
- stack 0: 0xF0
7878	 4EA	SHR		 	 
- stack 1: 0x904
- stack 0: 0x21
7879	 4EB	JUMP		 	 
- stack 0: 0x904
7880	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x904
7881	 22	PUSH4	00001000	 	 
- stack 1: 0x904
- stack 0: 0x1000
7882	 27	PUSH2	0160	 	 
- stack 2: 0x904
- stack 1: 0x1000
- stack 0: 0x160
7883	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x904
7884	 2B	PUSH1	04	 	 
- stack 1: 0x904
- stack 0: 0x4
7885	 2D	ADD		 	 
- stack 0: 0x908
7886	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x908
- stack 0: 0x908
7887	 2F	MLOAD		 	 
- stack 1: 0x908
- stack 0: 0x34F92C00530042006600000501000000660000000000006574796D00007473
7888	 30	PUSH1	F0	 	 
- stack 2: 0x908
- stack 1: 0x34F92C00530042006600000501000000660000000000006574796D00007473
- stack 0: 0xF0
7889	 32	SHR		 	 
- stack 1: 0x908
- stack 0: 0x34
7890	 33	JUMP		 	 
- stack 0: 0x908
7891	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1760(ignore imm)
- stack 0: 0x908
7892	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x908
- stack 0: 0x908
7893	 36	MLOAD		 	 
- stack 1: 0x908
- stack 0: 0x34F92C00530042006600000501000000660000000000006574796D00007473
7894	 37	PUSH1	E0	 	 
- stack 2: 0x908
- stack 1: 0x34F92C00530042006600000501000000660000000000006574796D00007473
- stack 0: 0xE0
7895	 39	SHR		 	 
- stack 1: 0x908
- stack 0: 0x34F92C
7896	 3A	PUSH2	FFFF	 	 
- stack 2: 0x908
- stack 1: 0x34F92C
- stack 0: 0xFFFF
7897	 3D	AND		 	 
- stack 1: 0x908
- stack 0: 0xF92C
7898	 3E	PUSH1	01	 	 
- stack 2: 0x908
- stack 1: 0xF92C
- stack 0: 0x1
7899	 40	SIGNEXTEND		 	 
- stack 1: 0x908
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF92C
7900	 41	PUSH2	0160	 	 
- stack 2: 0x908
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF92C
- stack 0: 0x160
7901	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x908
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF92C
- stack 0: 0x1000
7902	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x908
- stack 0: 0x92C
7903	 46	PUSH2	0160	 	 
- stack 2: 0x908
- stack 1: 0x92C
- stack 0: 0x160
7904	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x908
7905	 4A	PUSH1	04	 	 
- stack 1: 0x908
- stack 0: 0x4
7906	 4C	ADD		 	 
- stack 0: 0x90C
7907	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x90C
- stack 0: 0x90C
7908	 4E	MLOAD		 	 
- stack 1: 0x90C
- stack 0: 0x530042006600000501000000660000000000006574796D0000747300525245
7909	 4F	PUSH1	F0	 	 
- stack 2: 0x90C
- stack 1: 0x530042006600000501000000660000000000006574796D0000747300525245
- stack 0: 0xF0
7910	 51	SHR		 	 
- stack 1: 0x90C
- stack 0: 0x53
7911	 52	JUMP		 	 
- stack 0: 0x90C
7912	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x90C
7913	 54	PUSH4	00042000	 	 
- stack 1: 0x90C
- stack 0: 0x42000
7914	 59	PUSH2	0140	 	 
- stack 2: 0x90C
- stack 1: 0x42000
- stack 0: 0x140
7915	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x90C
7916	 5D	PUSH1	04	 	 
- stack 1: 0x90C
- stack 0: 0x4
7917	 5F	ADD		 	 
- stack 0: 0x910
7918	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x910
- stack 0: 0x910
7919	 61	MLOAD		 	 
- stack 1: 0x910
- stack 0: 0x6600000501000000660000000000006574796D000074730052524500004B4F
7920	 62	PUSH1	F0	 	 
- stack 2: 0x910
- stack 1: 0x6600000501000000660000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
7921	 64	SHR		 	 
- stack 1: 0x910
- stack 0: 0x66
7922	 65	JUMP		 	 
- stack 0: 0x910
7923	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x910
7924	 67	PUSH2	0140	 	 
- stack 1: 0x910
- stack 0: 0x140
7925	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x910
- stack 0: 0x42000
7926	 6B	PUSH2	0075	 ;; _ecall_fc879f5fc908966fa87c246484b94c49b53670061e81d81d42a698052933286d	 
- stack 2: 0x910
- stack 1: 0x42000
- stack 0: 0x75
7927	 6E	JUMPI		 	 
- stack 0: 0x910
7928	 75	JUMPDEST		 ;; _ecall_fc879f5fc908966fa87c246484b94c49b53670061e81d81d42a698052933286d	 
- stack 0: 0x910
7929	 76	PUSH1	04	 	 
- stack 1: 0x910
- stack 0: 0x4
7930	 78	PUSH2	0160	 	 
- stack 2: 0x910
- stack 1: 0x4
- stack 0: 0x160
7931	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x910
- stack 1: 0x4
- stack 0: 0x92C
7932	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x910
7933	 7D	PUSH1	04	 	 
- stack 1: 0x910
- stack 0: 0x4
7934	 7F	ADD		 	 
- stack 0: 0x914
7935	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x914
- stack 0: 0x914
7936	 81	MLOAD		 	 
- stack 1: 0x914
- stack 0: 0x501000000660000000000006574796D000074730052524500004B4F00000000
7937	 82	PUSH1	F0	 	 
- stack 2: 0x914
- stack 1: 0x501000000660000000000006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
7938	 84	SHR		 	 
- stack 1: 0x914
- stack 0: 0x501
7939	 85	JUMP		 	 
- stack 0: 0x914
7940	 501	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x914
7941	 502	PUSH4	00000000	 	 
- stack 1: 0x914
- stack 0: 0x0
7942	 507	PUSH2	0140	 	 
- stack 2: 0x914
- stack 1: 0x0
- stack 0: 0x140
7943	 50A	MSTORE		 	  ;; # store to x10
- stack 0: 0x914
7944	 50B	PUSH1	04	 	 
- stack 1: 0x914
- stack 0: 0x4
7945	 50D	ADD		 	 
- stack 0: 0x918
7946	 50E	DUP1		 	  ;; # executing pc
- stack 1: 0x918
- stack 0: 0x918
7947	 50F	MLOAD		 	 
- stack 1: 0x918
- stack 0: 0x660000000000006574796D000074730052524500004B4F0000000000000000
7948	 510	PUSH1	F0	 	 
- stack 2: 0x918
- stack 1: 0x660000000000006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
7949	 512	SHR		 	 
- stack 1: 0x918
- stack 0: 0x66
7950	 513	JUMP		 	 
- stack 0: 0x918
7951	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x918
7952	 67	PUSH2	0140	 	 
- stack 1: 0x918
- stack 0: 0x140
7953	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x918
- stack 0: 0x0
7954	 6B	PUSH2	0075	 ;; _ecall_fc879f5fc908966fa87c246484b94c49b53670061e81d81d42a698052933286d	 
- stack 2: 0x918
- stack 1: 0x0
- stack 0: 0x75
7955	 6E	JUMPI		 	 
- stack 0: 0x918
7956	 6F	PUSH1	20	 	 
- stack 1: 0x918
- stack 0: 0x20
7957	 71	PUSH2	0160	 	 
- stack 2: 0x918
- stack 1: 0x20
- stack 0: 0x160
7958	 74	RETURN		 	 
Final bytecode length; 2629
Returned: 000000000000000000000000000000000000000000000000000000000000092c
gasUsed : 27523
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424
** HOT: 428 - range: 428,42c,430,434,438,43c
** HOT: 440 - range: 440,444,448,44c,450,454
** HOT: 458 - range: 458,45c,460,464,468,46c
** HOT: 470 - range: 470,474,478,47c,480,484
** HOT: 488 - range: 488,48c,490,494,498,49c
** HOT: 4a0 - range: 4a0,4a4,4a8,4ac,4b0,4b4,4b8,4bc
** HOT: 4c0 - range: 4c0,4c4,4c8,4cc,4d0,4d4,4d8,4dc
** HOT: 4e0 - range: 4e0,4e4,4e8,4ec,4f0,4f4,4f8,4fc,500
** HOT: 504 - range: 504,508,50c,510,514,518,51c,520
** HOT: 524 - range: 524,528,52c,530,534,538,53c,540
** HOT: 544 - range: 544,548,54c,550,554,558
** HOT: 55c - range: 55c,560,564,568,56c,570
** HOT: 574 - range: 574,578,57c,580,584,588
** HOT: 58c - range: 58c,590,594,598,59c,5a0,5a4
** HOT: 5a8 - range: 5a8,5ac,5b0,5b4,5b8,5bc
** HOT: 5c0 - range: 5c0,5c4,5c8,5cc,5d0,5d4
** HOT: 5d8 - range: 5d8,5dc,5e0,5e4,5e8
** HOT: 5ec - range: 5ec,5f0,5f4,5f8,5fc,600,604,608
** HOT: 5f0 - range: 5f0,5f4,5f8,5fc,600,604,608
** HOT: 60c - range: 60c,610,614
** HOT: 618 - range: 618,61c,620,624,628,62c,630,634,638
** HOT: 61c - range: 61c,620,624,628,62c,630,634,638
** HOT: 63c - range: 63c,640,644
** HOT: 648 - range: 648,64c,650,654,658,65c,660,664,668,66c
** HOT: 64c - range: 64c,650,654,658,65c,660,664,668,66c
** HOT: 670 - range: 670,674,678
** HOT: 67c - range: 67c,680,684,688,68c,690,694
** HOT: 680 - range: 680,684,688,68c,690,694
** HOT: 698 - range: 698,69c,6a0
** HOT: 6a4 - range: 6a4,6a8,6ac,6b0,6b4,6b8,6bc,6c0
** HOT: 6a8 - range: 6a8,6ac,6b0,6b4,6b8,6bc,6c0
** HOT: 6c4 - range: 6c4,6c8,6cc
** HOT: 6d0 - range: 6d0,6d4,6d8,6dc,6e0,6e4,6e8,6ec,6f0
** HOT: 6d4 - range: 6d4,6d8,6dc,6e0,6e4,6e8,6ec,6f0
** HOT: 6f4 - range: 6f4,6f8,6fc
** HOT: 700 - range: 700,704,708,70c,710,714,718,71c
** HOT: 704 - range: 704,708,70c,710,714,718,71c
** HOT: 720 - range: 720,724,728
** HOT: 72c - range: 72c,730,734,738,73c,740,744,748,74c
** HOT: 730 - range: 730,734,738,73c,740,744,748,74c
** HOT: 750 - range: 750,754,758
** HOT: 75c - range: 75c,760,764,768,76c,770,774,778,77c
** HOT: 760 - range: 760,764,768,76c,770,774,778,77c
** HOT: 780 - range: 780,784,788
** HOT: 78c - range: 78c,790,794,798,79c,7a0,7a4
** HOT: 790 - range: 790,794,798,79c,7a0,7a4
** HOT: 7a8 - range: 7a8,7ac,7b0
** HOT: 7b4 - range: 7b4,7b8,7bc,7c0,7c4,7c8,7cc,7d0
** HOT: 7b8 - range: 7b8,7bc,7c0,7c4,7c8,7cc,7d0
** HOT: 7d4 - range: 7d4,7d8,7dc
** HOT: 7e0 - range: 7e0,7e4,7e8,7ec,7f0,7f4,7f8,7fc,800
** HOT: 7e4 - range: 7e4,7e8,7ec,7f0,7f4,7f8,7fc,800
** HOT: 804 - range: 804,808,80c
** HOT: 810 - range: 810,814,818,81c,820,824,828,82c
** HOT: 814 - range: 814,818,81c,820,824,828,82c
** HOT: 830 - range: 830,834,838
** HOT: 83c - range: 83c,840,844,848,84c,850,854,858,85c
** HOT: 840 - range: 840,844,848,84c,850,854,858,85c
** HOT: 860 - range: 860,864,868
** HOT: 86c - range: 86c,870,874,878,87c,880,884,888,88c
** HOT: 870 - range: 870,874,878,87c,880,884,888,88c
** HOT: 890 - range: 890,894,898
** HOT: 89c - range: 89c,8a0,8a4,8a8,8ac
** HOT: 8b0 - range: 8b0,8b4,8b8,8bc,8c0
** HOT: 8c4 - range: 8c4,8c8,8cc,8d0
** HOT: 8d4 - range: 8d4,8d8,8dc,8e0,8e4,8e8
