Running in EVM:
0	 0	PUSH4	02E0	 	 
- stack 0: 0x2E0
1	 5	PUSH2	03B5	 ;; _rambegin	 
- stack 1: 0x2E0
- stack 0: 0x3B5
2	 8	PUSH1	01	 	 
- stack 2: 0x2E0
- stack 1: 0x3B5
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x2E0
- stack 0: 0x3B6
4	 B	PUSH2	0400	 	 
- stack 2: 0x2E0
- stack 1: 0x3B6
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x210000003406D000530042006600000086000000A0000000BF000000D90002
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x210000003406D000530042006600000086000000A0000000BF000000D90002
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406D000530042006600000086000000A0000000BF000000D9000200F30278
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x3406D000530042006600000086000000A0000000BF000000D9000200F30278
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1744(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406D000530042006600000086000000A0000000BF000000D9000200F30278
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x3406D000530042006600000086000000A0000000BF000000D9000200F30278
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x3406D0
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x3406D0
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x6D0
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x6D0
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x6D0
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x6D0
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x6D0
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x6D0
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x6D0
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000000A0000000BF000000D9000200F3027800860001
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000000A0000000BF000000D9000200F3027800860001
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000000A0000000BF000000D9000200F302780086000100A00001
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000000A0000000BF000000D9000200F302780086000100A00001
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_ce229fdd04043c459d62365e144410168669de36dcf0951dc80becf14644d174	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_ce229fdd04043c459d62365e144410168669de36dcf0951dc80becf14644d174	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x6D0
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000BF000000D9000200F302780086000100A0000100BF0002
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000BF000000D9000200F302780086000100A0000100BF0002
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000BF000000D9000200F302780086000100A0000100BF0002
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000BF000000D9000200F302780086000100A0000100BF0002
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860000
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860000
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x0
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x0
84	 93	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x20
85	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BF000000D9000200F302780086000100A0000100BF000200D90003
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BF000000D9000200F302780086000100A0000100BF000200D90003
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BF000000D9000200F302780086000100A0000100BF000200D90003
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BF000000D9000200F302780086000100A0000100BF000200D90003
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x20
103	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x0
104	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x414
- stack 0: 0x0
105	 B2	PUSH2	0060	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x60
106	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x414
107	 B6	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
108	 B8	ADD		 	 
- stack 0: 0x418
109	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
110	 BA	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBF000000D9000200F302780086000100A0000100BF000200D9000300F30264
111	 BB	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBF000000D9000200F302780086000100A0000100BF000200D9000300F30264
- stack 0: 0xF0
112	 BD	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBF
113	 BE	JUMP		 	 
- stack 0: 0x418
114	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x418
115	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
116	 C1	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBF000000D9000200F302780086000100A0000100BF000200D9000300F30264
117	 C2	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xBF000000D9000200F302780086000100A0000100BF000200D9000300F30264
- stack 0: 0xE0
118	 C4	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBF0000
119	 C5	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xBF0000
- stack 0: 0xFFFF
120	 C8	AND		 	 
- stack 1: 0x418
- stack 0: 0x0
121	 C9	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x1
122	 CB	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0x0
123	 CC	PUSH2	03A0	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x3A0
124	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x418
125	 D0	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
126	 D2	ADD		 	 
- stack 0: 0x41C
127	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
128	 D4	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD9000200F302780086000100A0000100BF000200D9000300F3026400860003
129	 D5	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD9000200F302780086000100A0000100BF000200D9000300F3026400860003
- stack 0: 0xF0
130	 D7	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD9
131	 D8	JUMP		 	 
- stack 0: 0x41C
132	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x41C
133	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
134	 DB	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD9000200F302780086000100A0000100BF000200D9000300F3026400860003
135	 DC	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xD9000200F302780086000100A0000100BF000200D9000300F3026400860003
- stack 0: 0xE0
136	 DE	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD90002
137	 DF	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xD90002
- stack 0: 0xFFFF
138	 E2	AND		 	 
- stack 1: 0x41C
- stack 0: 0x2
139	 E3	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0x2
- stack 0: 0x1
140	 E5	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x2
141	 E6	PUSH2	0380	 	 
- stack 2: 0x41C
- stack 1: 0x2
- stack 0: 0x380
142	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x41C
143	 EA	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
144	 EC	ADD		 	 
- stack 0: 0x420
145	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
146	 EE	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF302780086000100A0000100BF000200D9000300F302640086000300A00007
147	 EF	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xF302780086000100A0000100BF000200D9000300F302640086000300A00007
- stack 0: 0xF0
148	 F1	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF3
149	 F2	JUMP		 	 
- stack 0: 0x420
150	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x420
151	 F4	PUSH2	0060	 	 
- stack 1: 0x420
- stack 0: 0x60
152	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x420
- stack 0: 0x0
153	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
154	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x420
- stack 0: 0x0
155	 FE	PUSH2	03A0	 	 
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x3A0
156	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x0
157	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x420
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
158	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x0
159	 108	SUB		 	 
- stack 1: 0x420
- stack 0: 0x0
160	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x111
161	 10C	JUMPI		 	 
- stack 0: 0x420
162	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x420
- stack 0: 0x12B
163	 110	JUMP		 	 
- stack 0: 0x420
164	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x420
165	 12C	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
166	 12E	ADD		 	 
- stack 0: 0x424
167	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
168	 130	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x86000100A0000100BF000200D9000300F302640086000300A0000700BF000A
169	 131	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x86000100A0000100BF000200D9000300F302640086000300A0000700BF000A
- stack 0: 0xF0
170	 133	SHR		 	 
- stack 1: 0x424
- stack 0: 0x86
171	 134	JUMP		 	 
- stack 0: 0x424
172	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x424
173	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
174	 88	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x86000100A0000100BF000200D9000300F302640086000300A0000700BF000A
175	 89	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x86000100A0000100BF000200D9000300F302640086000300A0000700BF000A
- stack 0: 0xE0
176	 8B	SHR		 	 
- stack 1: 0x424
- stack 0: 0x860001
177	 8C	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x860001
- stack 0: 0xFFFF
178	 8F	AND		 	 
- stack 1: 0x424
- stack 0: 0x1
179	 90	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0x1
- stack 0: 0x1
180	 92	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0x1
181	 93	PUSH2	0020	 	 
- stack 2: 0x424
- stack 1: 0x1
- stack 0: 0x20
182	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x424
183	 97	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
184	 99	ADD		 	 
- stack 0: 0x428
185	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
186	 9B	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xA0000100BF000200D9000300F302640086000300A0000700BF000A00D90004
187	 9C	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0xA0000100BF000200D9000300F302640086000300A0000700BF000A00D90004
- stack 0: 0xF0
188	 9E	SHR		 	 
- stack 1: 0x428
- stack 0: 0xA0
189	 9F	JUMP		 	 
- stack 0: 0x428
190	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x428
191	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
192	 A2	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xA0000100BF000200D9000300F302640086000300A0000700BF000A00D90004
193	 A3	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0xA0000100BF000200D9000300F302640086000300A0000700BF000A00D90004
- stack 0: 0xE0
194	 A5	SHR		 	 
- stack 1: 0x428
- stack 0: 0xA00001
195	 A6	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0xA00001
- stack 0: 0xFFFF
196	 A9	AND		 	 
- stack 1: 0x428
- stack 0: 0x1
197	 AA	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x1
198	 AC	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0x1
199	 AD	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x20
200	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x1
201	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x428
- stack 0: 0x2
202	 B2	PUSH2	0060	 	 
- stack 2: 0x428
- stack 1: 0x2
- stack 0: 0x60
203	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x428
204	 B6	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
205	 B8	ADD		 	 
- stack 0: 0x42C
206	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
207	 BA	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xBF000200D9000300F302640086000300A0000700BF000A00D9000400F30250
208	 BB	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0xBF000200D9000300F302640086000300A0000700BF000A00D9000400F30250
- stack 0: 0xF0
209	 BD	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xBF
210	 BE	JUMP		 	 
- stack 0: 0x42C
211	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x42C
212	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
213	 C1	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xBF000200D9000300F302640086000300A0000700BF000A00D9000400F30250
214	 C2	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0xBF000200D9000300F302640086000300A0000700BF000A00D9000400F30250
- stack 0: 0xE0
215	 C4	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xBF0002
216	 C5	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0xBF0002
- stack 0: 0xFFFF
217	 C8	AND		 	 
- stack 1: 0x42C
- stack 0: 0x2
218	 C9	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x2
- stack 0: 0x1
219	 CB	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x2
220	 CC	PUSH2	03A0	 	 
- stack 2: 0x42C
- stack 1: 0x2
- stack 0: 0x3A0
221	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x42C
222	 D0	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
223	 D2	ADD		 	 
- stack 0: 0x430
224	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
225	 D4	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xD9000300F302640086000300A0000700BF000A00D9000400F3025000860000
226	 D5	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xD9000300F302640086000300A0000700BF000A00D9000400F3025000860000
- stack 0: 0xF0
227	 D7	SHR		 	 
- stack 1: 0x430
- stack 0: 0xD9
228	 D8	JUMP		 	 
- stack 0: 0x430
229	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x430
230	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
231	 DB	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xD9000300F302640086000300A0000700BF000A00D9000400F3025000860000
232	 DC	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0xD9000300F302640086000300A0000700BF000A00D9000400F3025000860000
- stack 0: 0xE0
233	 DE	SHR		 	 
- stack 1: 0x430
- stack 0: 0xD90003
234	 DF	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0xD90003
- stack 0: 0xFFFF
235	 E2	AND		 	 
- stack 1: 0x430
- stack 0: 0x3
236	 E3	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x1
237	 E5	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x3
238	 E6	PUSH2	0380	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x380
239	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x430
240	 EA	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
241	 EC	ADD		 	 
- stack 0: 0x434
242	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
243	 EE	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xF302640086000300A0000700BF000A00D9000400F302500086000000A0F800
244	 EF	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xF302640086000300A0000700BF000A00D9000400F302500086000000A0F800
- stack 0: 0xF0
245	 F1	SHR		 	 
- stack 1: 0x434
- stack 0: 0xF3
246	 F2	JUMP		 	 
- stack 0: 0x434
247	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x434
248	 F4	PUSH2	0060	 	 
- stack 1: 0x434
- stack 0: 0x60
249	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x434
- stack 0: 0x2
250	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x434
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
251	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x434
- stack 0: 0x2
252	 FE	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0x2
- stack 0: 0x3A0
253	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x434
- stack 1: 0x2
- stack 0: 0x2
254	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x434
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
255	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x434
- stack 1: 0x2
- stack 0: 0x2
256	 108	SUB		 	 
- stack 1: 0x434
- stack 0: 0x0
257	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x111
258	 10C	JUMPI		 	 
- stack 0: 0x434
259	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x434
- stack 0: 0x12B
260	 110	JUMP		 	 
- stack 0: 0x434
261	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x434
262	 12C	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
263	 12E	ADD		 	 
- stack 0: 0x438
264	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
265	 130	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x86000300A0000700BF000A00D9000400F302500086000000A0F80000BFF800
266	 131	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x86000300A0000700BF000A00D9000400F302500086000000A0F80000BFF800
- stack 0: 0xF0
267	 133	SHR		 	 
- stack 1: 0x438
- stack 0: 0x86
268	 134	JUMP		 	 
- stack 0: 0x438
269	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x438
270	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
271	 88	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x86000300A0000700BF000A00D9000400F302500086000000A0F80000BFF800
272	 89	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0x86000300A0000700BF000A00D9000400F302500086000000A0F80000BFF800
- stack 0: 0xE0
273	 8B	SHR		 	 
- stack 1: 0x438
- stack 0: 0x860003
274	 8C	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0x860003
- stack 0: 0xFFFF
275	 8F	AND		 	 
- stack 1: 0x438
- stack 0: 0x3
276	 90	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x1
277	 92	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x3
278	 93	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x20
279	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x438
280	 97	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
281	 99	ADD		 	 
- stack 0: 0x43C
282	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
283	 9B	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xA0000700BF000A00D9000400F302500086000000A0F80000BFF80000D90005
284	 9C	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xA0000700BF000A00D9000400F302500086000000A0F80000BFF80000D90005
- stack 0: 0xF0
285	 9E	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xA0
286	 9F	JUMP		 	 
- stack 0: 0x43C
287	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x43C
288	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
289	 A2	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xA0000700BF000A00D9000400F302500086000000A0F80000BFF80000D90005
290	 A3	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0xA0000700BF000A00D9000400F302500086000000A0F80000BFF80000D90005
- stack 0: 0xE0
291	 A5	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xA00007
292	 A6	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0xA00007
- stack 0: 0xFFFF
293	 A9	AND		 	 
- stack 1: 0x43C
- stack 0: 0x7
294	 AA	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0x7
- stack 0: 0x1
295	 AC	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0x7
296	 AD	PUSH2	0020	 	 
- stack 2: 0x43C
- stack 1: 0x7
- stack 0: 0x20
297	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x43C
- stack 1: 0x7
- stack 0: 0x3
298	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x43C
- stack 0: 0xA
299	 B2	PUSH2	0060	 	 
- stack 2: 0x43C
- stack 1: 0xA
- stack 0: 0x60
300	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x43C
301	 B6	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
302	 B8	ADD		 	 
- stack 0: 0x440
303	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
304	 BA	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xBF000A00D9000400F302500086000000A0F80000BFF80000D9000500F3023C
305	 BB	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0xBF000A00D9000400F302500086000000A0F80000BFF80000D9000500F3023C
- stack 0: 0xF0
306	 BD	SHR		 	 
- stack 1: 0x440
- stack 0: 0xBF
307	 BE	JUMP		 	 
- stack 0: 0x440
308	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x440
309	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
310	 C1	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xBF000A00D9000400F302500086000000A0F80000BFF80000D9000500F3023C
311	 C2	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0xBF000A00D9000400F302500086000000A0F80000BFF80000D9000500F3023C
- stack 0: 0xE0
312	 C4	SHR		 	 
- stack 1: 0x440
- stack 0: 0xBF000A
313	 C5	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0xBF000A
- stack 0: 0xFFFF
314	 C8	AND		 	 
- stack 1: 0x440
- stack 0: 0xA
315	 C9	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0xA
- stack 0: 0x1
316	 CB	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0xA
317	 CC	PUSH2	03A0	 	 
- stack 2: 0x440
- stack 1: 0xA
- stack 0: 0x3A0
318	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x440
319	 D0	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
320	 D2	ADD		 	 
- stack 0: 0x444
321	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
322	 D4	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xD9000400F302500086000000A0F80000BFF80000D9000500F3023C01350000
323	 D5	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xD9000400F302500086000000A0F80000BFF80000D9000500F3023C01350000
- stack 0: 0xF0
324	 D7	SHR		 	 
- stack 1: 0x444
- stack 0: 0xD9
325	 D8	JUMP		 	 
- stack 0: 0x444
326	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x444
327	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
328	 DB	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xD9000400F302500086000000A0F80000BFF80000D9000500F3023C01350000
329	 DC	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0xD9000400F302500086000000A0F80000BFF80000D9000500F3023C01350000
- stack 0: 0xE0
330	 DE	SHR		 	 
- stack 1: 0x444
- stack 0: 0xD90004
331	 DF	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0xD90004
- stack 0: 0xFFFF
332	 E2	AND		 	 
- stack 1: 0x444
- stack 0: 0x4
333	 E3	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x4
- stack 0: 0x1
334	 E5	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x4
335	 E6	PUSH2	0380	 	 
- stack 2: 0x444
- stack 1: 0x4
- stack 0: 0x380
336	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x444
337	 EA	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
338	 EC	ADD		 	 
- stack 0: 0x448
339	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
340	 EE	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xF302500086000000A0F80000BFF80000D9000500F3023C0135000000A00000
341	 EF	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xF302500086000000A0F80000BFF80000D9000500F3023C0135000000A00000
- stack 0: 0xF0
342	 F1	SHR		 	 
- stack 1: 0x448
- stack 0: 0xF3
343	 F2	JUMP		 	 
- stack 0: 0x448
344	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x448
345	 F4	PUSH2	0060	 	 
- stack 1: 0x448
- stack 0: 0x60
346	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x448
- stack 0: 0xA
347	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0xA
- stack 0: 0xFFFFFFFF
348	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0xA
349	 FE	PUSH2	03A0	 	 
- stack 2: 0x448
- stack 1: 0xA
- stack 0: 0x3A0
350	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x448
- stack 1: 0xA
- stack 0: 0xA
351	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x448
- stack 2: 0xA
- stack 1: 0xA
- stack 0: 0xFFFFFFFF
352	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x448
- stack 1: 0xA
- stack 0: 0xA
353	 108	SUB		 	 
- stack 1: 0x448
- stack 0: 0x0
354	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x448
- stack 1: 0x0
- stack 0: 0x111
355	 10C	JUMPI		 	 
- stack 0: 0x448
356	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x448
- stack 0: 0x12B
357	 110	JUMP		 	 
- stack 0: 0x448
358	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x448
359	 12C	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
360	 12E	ADD		 	 
- stack 0: 0x44C
361	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
362	 130	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x86000000A0F80000BFF80000D9000500F3023C0135000000A0000001480000
363	 131	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x86000000A0F80000BFF80000D9000500F3023C0135000000A0000001480000
- stack 0: 0xF0
364	 133	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x86
365	 134	JUMP		 	 
- stack 0: 0x44C
366	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x44C
367	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
368	 88	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x86000000A0F80000BFF80000D9000500F3023C0135000000A0000001480000
369	 89	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0x86000000A0F80000BFF80000D9000500F3023C0135000000A0000001480000
- stack 0: 0xE0
370	 8B	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x860000
371	 8C	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0x860000
- stack 0: 0xFFFF
372	 8F	AND		 	 
- stack 1: 0x44C
- stack 0: 0x0
373	 90	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0x0
- stack 0: 0x1
374	 92	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0x0
375	 93	PUSH2	0020	 	 
- stack 2: 0x44C
- stack 1: 0x0
- stack 0: 0x20
376	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x44C
377	 97	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
378	 99	ADD		 	 
- stack 0: 0x450
379	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
380	 9B	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xA0F80000BFF80000D9000500F3023C0135000000A000000148000000D90006
381	 9C	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0xA0F80000BFF80000D9000500F3023C0135000000A000000148000000D90006
- stack 0: 0xF0
382	 9E	SHR		 	 
- stack 1: 0x450
- stack 0: 0xA0
383	 9F	JUMP		 	 
- stack 0: 0x450
384	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x450
385	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
386	 A2	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xA0F80000BFF80000D9000500F3023C0135000000A000000148000000D90006
387	 A3	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0xA0F80000BFF80000D9000500F3023C0135000000A000000148000000D90006
- stack 0: 0xE0
388	 A5	SHR		 	 
- stack 1: 0x450
- stack 0: 0xA0F800
389	 A6	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0xA0F800
- stack 0: 0xFFFF
390	 A9	AND		 	 
- stack 1: 0x450
- stack 0: 0xF800
391	 AA	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0xF800
- stack 0: 0x1
392	 AC	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
393	 AD	PUSH2	0020	 	 
- stack 2: 0x450
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x20
394	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x450
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x0
395	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x450
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
396	 B2	PUSH2	0060	 	 
- stack 2: 0x450
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x60
397	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x450
398	 B6	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
399	 B8	ADD		 	 
- stack 0: 0x454
400	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
401	 BA	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xBFF80000D9000500F3023C0135000000A000000148000000D9000600F30228
402	 BB	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0xBFF80000D9000500F3023C0135000000A000000148000000D9000600F30228
- stack 0: 0xF0
403	 BD	SHR		 	 
- stack 1: 0x454
- stack 0: 0xBF
404	 BE	JUMP		 	 
- stack 0: 0x454
405	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x454
406	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
407	 C1	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xBFF80000D9000500F3023C0135000000A000000148000000D9000600F30228
408	 C2	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0xBFF80000D9000500F3023C0135000000A000000148000000D9000600F30228
- stack 0: 0xE0
409	 C4	SHR		 	 
- stack 1: 0x454
- stack 0: 0xBFF800
410	 C5	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0xBFF800
- stack 0: 0xFFFF
411	 C8	AND		 	 
- stack 1: 0x454
- stack 0: 0xF800
412	 C9	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0xF800
- stack 0: 0x1
413	 CB	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
414	 CC	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x3A0
415	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x454
416	 D0	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
417	 D2	ADD		 	 
- stack 0: 0x458
418	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
419	 D4	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xD9000500F3023C0135000000A000000148000000D9000600F3022801350000
420	 D5	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0xD9000500F3023C0135000000A000000148000000D9000600F3022801350000
- stack 0: 0xF0
421	 D7	SHR		 	 
- stack 1: 0x458
- stack 0: 0xD9
422	 D8	JUMP		 	 
- stack 0: 0x458
423	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x458
424	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
425	 DB	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xD9000500F3023C0135000000A000000148000000D9000600F3022801350000
426	 DC	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0xD9000500F3023C0135000000A000000148000000D9000600F3022801350000
- stack 0: 0xE0
427	 DE	SHR		 	 
- stack 1: 0x458
- stack 0: 0xD90005
428	 DF	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0xD90005
- stack 0: 0xFFFF
429	 E2	AND		 	 
- stack 1: 0x458
- stack 0: 0x5
430	 E3	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0x5
- stack 0: 0x1
431	 E5	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0x5
432	 E6	PUSH2	0380	 	 
- stack 2: 0x458
- stack 1: 0x5
- stack 0: 0x380
433	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x458
434	 EA	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
435	 EC	ADD		 	 
- stack 0: 0x45C
436	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
437	 EE	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xF3023C0135000000A000000148000000D9000600F302280135000000A0F800
438	 EF	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0xF3023C0135000000A000000148000000D9000600F302280135000000A0F800
- stack 0: 0xF0
439	 F1	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xF3
440	 F2	JUMP		 	 
- stack 0: 0x45C
441	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x45C
442	 F4	PUSH2	0060	 	 
- stack 1: 0x45C
- stack 0: 0x60
443	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x45C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
444	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0xFFFFFFFF
445	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x45C
- stack 0: 0xFFFFF800
446	 FE	PUSH2	03A0	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFF800
- stack 0: 0x3A0
447	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x45C
- stack 1: 0xFFFFF800
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
448	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x45C
- stack 2: 0xFFFFF800
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0xFFFFFFFF
449	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x45C
- stack 1: 0xFFFFF800
- stack 0: 0xFFFFF800
450	 108	SUB		 	 
- stack 1: 0x45C
- stack 0: 0x0
451	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x45C
- stack 1: 0x0
- stack 0: 0x111
452	 10C	JUMPI		 	 
- stack 0: 0x45C
453	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x45C
- stack 0: 0x12B
454	 110	JUMP		 	 
- stack 0: 0x45C
455	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x45C
456	 12C	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
457	 12E	ADD		 	 
- stack 0: 0x460
458	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
459	 130	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x135000000A000000148000000D9000600F302280135000000A0F80001480000
460	 131	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x135000000A000000148000000D9000600F302280135000000A0F80001480000
- stack 0: 0xF0
461	 133	SHR		 	 
- stack 1: 0x460
- stack 0: 0x135
462	 134	JUMP		 	 
- stack 0: 0x460
463	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x460
464	 136	PUSH4	80000000	 	 
- stack 1: 0x460
- stack 0: 0x80000000
465	 13B	PUSH2	0020	 	 
- stack 2: 0x460
- stack 1: 0x80000000
- stack 0: 0x20
466	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x460
467	 13F	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
468	 141	ADD		 	 
- stack 0: 0x464
469	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
470	 143	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xA000000148000000D9000600F302280135000000A0F80001480000015BF800
471	 144	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xA000000148000000D9000600F302280135000000A0F80001480000015BF800
- stack 0: 0xF0
472	 146	SHR		 	 
- stack 1: 0x464
- stack 0: 0xA0
473	 147	JUMP		 	 
- stack 0: 0x464
474	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x464
475	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
476	 A2	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xA000000148000000D9000600F302280135000000A0F80001480000015BF800
477	 A3	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0xA000000148000000D9000600F302280135000000A0F80001480000015BF800
- stack 0: 0xE0
478	 A5	SHR		 	 
- stack 1: 0x464
- stack 0: 0xA00000
479	 A6	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0xA00000
- stack 0: 0xFFFF
480	 A9	AND		 	 
- stack 1: 0x464
- stack 0: 0x0
481	 AA	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x1
482	 AC	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0x0
483	 AD	PUSH2	0020	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x20
484	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x80000000
485	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x464
- stack 0: 0x80000000
486	 B2	PUSH2	0060	 	 
- stack 2: 0x464
- stack 1: 0x80000000
- stack 0: 0x60
487	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x464
488	 B6	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
489	 B8	ADD		 	 
- stack 0: 0x468
490	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
491	 BA	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x148000000D9000600F302280135000000A0F80001480000015BF80000D90007
492	 BB	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x148000000D9000600F302280135000000A0F80001480000015BF80000D90007
- stack 0: 0xF0
493	 BD	SHR		 	 
- stack 1: 0x468
- stack 0: 0x148
494	 BE	JUMP		 	 
- stack 0: 0x468
495	 148	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x468
496	 149	PUSH4	80000000	 	 
- stack 1: 0x468
- stack 0: 0x80000000
497	 14E	PUSH2	03A0	 	 
- stack 2: 0x468
- stack 1: 0x80000000
- stack 0: 0x3A0
498	 151	MSTORE		 	  ;; # store to x29
- stack 0: 0x468
499	 152	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
500	 154	ADD		 	 
- stack 0: 0x46C
501	 155	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
502	 156	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xD9000600F302280135000000A0F80001480000015BF80000D9000700F30210
503	 157	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0xD9000600F302280135000000A0F80001480000015BF80000D9000700F30210
- stack 0: 0xF0
504	 159	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xD9
505	 15A	JUMP		 	 
- stack 0: 0x46C
506	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x46C
507	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x46C
- stack 0: 0x46C
508	 DB	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xD9000600F302280135000000A0F80001480000015BF80000D9000700F30210
509	 DC	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0xD9000600F302280135000000A0F80001480000015BF80000D9000700F30210
- stack 0: 0xE0
510	 DE	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xD90006
511	 DF	PUSH2	FFFF	 	 
- stack 2: 0x46C
- stack 1: 0xD90006
- stack 0: 0xFFFF
512	 E2	AND		 	 
- stack 1: 0x46C
- stack 0: 0x6
513	 E3	PUSH1	01	 	 
- stack 2: 0x46C
- stack 1: 0x6
- stack 0: 0x1
514	 E5	SIGNEXTEND		 	 
- stack 1: 0x46C
- stack 0: 0x6
515	 E6	PUSH2	0380	 	 
- stack 2: 0x46C
- stack 1: 0x6
- stack 0: 0x380
516	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x46C
517	 EA	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
518	 EC	ADD		 	 
- stack 0: 0x470
519	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
520	 EE	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0xF302280135000000A0F80001480000015BF80000D9000700F3021000860000
521	 EF	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0xF302280135000000A0F80001480000015BF80000D9000700F3021000860000
- stack 0: 0xF0
522	 F1	SHR		 	 
- stack 1: 0x470
- stack 0: 0xF3
523	 F2	JUMP		 	 
- stack 0: 0x470
524	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x470
525	 F4	PUSH2	0060	 	 
- stack 1: 0x470
- stack 0: 0x60
526	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x470
- stack 0: 0x80000000
527	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x470
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
528	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x470
- stack 0: 0x80000000
529	 FE	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0x80000000
- stack 0: 0x3A0
530	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x470
- stack 1: 0x80000000
- stack 0: 0x80000000
531	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x470
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
532	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x470
- stack 1: 0x80000000
- stack 0: 0x80000000
533	 108	SUB		 	 
- stack 1: 0x470
- stack 0: 0x0
534	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x111
535	 10C	JUMPI		 	 
- stack 0: 0x470
536	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x470
- stack 0: 0x12B
537	 110	JUMP		 	 
- stack 0: 0x470
538	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x470
539	 12C	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
540	 12E	ADD		 	 
- stack 0: 0x474
541	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
542	 130	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x135000000A0F80001480000015BF80000D9000700F302100086000000A007FF
543	 131	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x135000000A0F80001480000015BF80000D9000700F302100086000000A007FF
- stack 0: 0xF0
544	 133	SHR		 	 
- stack 1: 0x474
- stack 0: 0x135
545	 134	JUMP		 	 
- stack 0: 0x474
546	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x474
547	 136	PUSH4	80000000	 	 
- stack 1: 0x474
- stack 0: 0x80000000
548	 13B	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0x80000000
- stack 0: 0x20
549	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x474
550	 13F	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
551	 141	ADD		 	 
- stack 0: 0x478
552	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
553	 143	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xA0F80001480000015BF80000D9000700F302100086000000A007FF00BF07FF
554	 144	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0xA0F80001480000015BF80000D9000700F302100086000000A007FF00BF07FF
- stack 0: 0xF0
555	 146	SHR		 	 
- stack 1: 0x478
- stack 0: 0xA0
556	 147	JUMP		 	 
- stack 0: 0x478
557	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x478
558	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
559	 A2	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xA0F80001480000015BF80000D9000700F302100086000000A007FF00BF07FF
560	 A3	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0xA0F80001480000015BF80000D9000700F302100086000000A007FF00BF07FF
- stack 0: 0xE0
561	 A5	SHR		 	 
- stack 1: 0x478
- stack 0: 0xA0F800
562	 A6	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0xA0F800
- stack 0: 0xFFFF
563	 A9	AND		 	 
- stack 1: 0x478
- stack 0: 0xF800
564	 AA	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0xF800
- stack 0: 0x1
565	 AC	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
566	 AD	PUSH2	0020	 	 
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x20
567	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x80000000
568	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x478
- stack 0: 0x7FFFF800
569	 B2	PUSH2	0060	 	 
- stack 2: 0x478
- stack 1: 0x7FFFF800
- stack 0: 0x60
570	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x478
571	 B6	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
572	 B8	ADD		 	 
- stack 0: 0x47C
573	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
574	 BA	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x1480000015BF80000D9000700F302100086000000A007FF00BF07FF00D90008
575	 BB	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x1480000015BF80000D9000700F302100086000000A007FF00BF07FF00D90008
- stack 0: 0xF0
576	 BD	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x148
577	 BE	JUMP		 	 
- stack 0: 0x47C
578	 148	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x47C
579	 149	PUSH4	80000000	 	 
- stack 1: 0x47C
- stack 0: 0x80000000
580	 14E	PUSH2	03A0	 	 
- stack 2: 0x47C
- stack 1: 0x80000000
- stack 0: 0x3A0
581	 151	MSTORE		 	  ;; # store to x29
- stack 0: 0x47C
582	 152	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
583	 154	ADD		 	 
- stack 0: 0x480
584	 155	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
585	 156	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x15BF80000D9000700F302100086000000A007FF00BF07FF00D9000800F301FC
586	 157	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x15BF80000D9000700F302100086000000A007FF00BF07FF00D9000800F301FC
- stack 0: 0xF0
587	 159	SHR		 	 
- stack 1: 0x480
- stack 0: 0x15B
588	 15A	JUMP		 	 
- stack 0: 0x480
589	 15B	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-2048(ignore imm)
- stack 0: 0x480
590	 15C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
591	 15D	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x15BF80000D9000700F302100086000000A007FF00BF07FF00D9000800F301FC
592	 15E	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x15BF80000D9000700F302100086000000A007FF00BF07FF00D9000800F301FC
- stack 0: 0xE0
593	 160	SHR		 	 
- stack 1: 0x480
- stack 0: 0x15BF800
594	 161	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x15BF800
- stack 0: 0xFFFF
595	 164	AND		 	 
- stack 1: 0x480
- stack 0: 0xF800
596	 165	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0xF800
- stack 0: 0x1
597	 167	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
598	 168	PUSH2	03A0	 	 
- stack 2: 0x480
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x3A0
599	 16B	MLOAD		 	  ;; # read from x29
- stack 2: 0x480
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x80000000
600	 16C	ADD		 	  ;; # ADDI 29
- stack 1: 0x480
- stack 0: 0x7FFFF800
601	 16D	PUSH2	03A0	 	 
- stack 2: 0x480
- stack 1: 0x7FFFF800
- stack 0: 0x3A0
602	 170	MSTORE		 	  ;; # store to x29
- stack 0: 0x480
603	 171	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
604	 173	ADD		 	 
- stack 0: 0x484
605	 174	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
606	 175	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0xD9000700F302100086000000A007FF00BF07FF00D9000800F301FC01350000
607	 176	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0xD9000700F302100086000000A007FF00BF07FF00D9000800F301FC01350000
- stack 0: 0xF0
608	 178	SHR		 	 
- stack 1: 0x484
- stack 0: 0xD9
609	 179	JUMP		 	 
- stack 0: 0x484
610	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x484
611	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x484
- stack 0: 0x484
612	 DB	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0xD9000700F302100086000000A007FF00BF07FF00D9000800F301FC01350000
613	 DC	PUSH1	E0	 	 
- stack 2: 0x484
- stack 1: 0xD9000700F302100086000000A007FF00BF07FF00D9000800F301FC01350000
- stack 0: 0xE0
614	 DE	SHR		 	 
- stack 1: 0x484
- stack 0: 0xD90007
615	 DF	PUSH2	FFFF	 	 
- stack 2: 0x484
- stack 1: 0xD90007
- stack 0: 0xFFFF
616	 E2	AND		 	 
- stack 1: 0x484
- stack 0: 0x7
617	 E3	PUSH1	01	 	 
- stack 2: 0x484
- stack 1: 0x7
- stack 0: 0x1
618	 E5	SIGNEXTEND		 	 
- stack 1: 0x484
- stack 0: 0x7
619	 E6	PUSH2	0380	 	 
- stack 2: 0x484
- stack 1: 0x7
- stack 0: 0x380
620	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x484
621	 EA	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
622	 EC	ADD		 	 
- stack 0: 0x488
623	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
624	 EE	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xF302100086000000A007FF00BF07FF00D9000800F301FC01350000017AFFFF
625	 EF	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0xF302100086000000A007FF00BF07FF00D9000800F301FC01350000017AFFFF
- stack 0: 0xF0
626	 F1	SHR		 	 
- stack 1: 0x488
- stack 0: 0xF3
627	 F2	JUMP		 	 
- stack 0: 0x488
628	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x488
629	 F4	PUSH2	0060	 	 
- stack 1: 0x488
- stack 0: 0x60
630	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x488
- stack 0: 0x7FFFF800
631	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x488
- stack 1: 0x7FFFF800
- stack 0: 0xFFFFFFFF
632	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x488
- stack 0: 0x7FFFF800
633	 FE	PUSH2	03A0	 	 
- stack 2: 0x488
- stack 1: 0x7FFFF800
- stack 0: 0x3A0
634	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x488
- stack 1: 0x7FFFF800
- stack 0: 0x7FFFF800
635	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x488
- stack 2: 0x7FFFF800
- stack 1: 0x7FFFF800
- stack 0: 0xFFFFFFFF
636	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x488
- stack 1: 0x7FFFF800
- stack 0: 0x7FFFF800
637	 108	SUB		 	 
- stack 1: 0x488
- stack 0: 0x0
638	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x111
639	 10C	JUMPI		 	 
- stack 0: 0x488
640	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x488
- stack 0: 0x12B
641	 110	JUMP		 	 
- stack 0: 0x488
642	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x488
643	 12C	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
644	 12E	ADD		 	 
- stack 0: 0x48C
645	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
646	 130	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x86000000A007FF00BF07FF00D9000800F301FC01350000017AFFFF00A00000
647	 131	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x86000000A007FF00BF07FF00D9000800F301FC01350000017AFFFF00A00000
- stack 0: 0xF0
648	 133	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x86
649	 134	JUMP		 	 
- stack 0: 0x48C
650	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x48C
651	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
652	 88	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x86000000A007FF00BF07FF00D9000800F301FC01350000017AFFFF00A00000
653	 89	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0x86000000A007FF00BF07FF00D9000800F301FC01350000017AFFFF00A00000
- stack 0: 0xE0
654	 8B	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x860000
655	 8C	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0x860000
- stack 0: 0xFFFF
656	 8F	AND		 	 
- stack 1: 0x48C
- stack 0: 0x0
657	 90	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0x0
- stack 0: 0x1
658	 92	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0x0
659	 93	PUSH2	0020	 	 
- stack 2: 0x48C
- stack 1: 0x0
- stack 0: 0x20
660	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x48C
661	 97	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
662	 99	ADD		 	 
- stack 0: 0x490
663	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
664	 9B	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xA007FF00BF07FF00D9000800F301FC01350000017AFFFF00A0000001480000
665	 9C	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xA007FF00BF07FF00D9000800F301FC01350000017AFFFF00A0000001480000
- stack 0: 0xF0
666	 9E	SHR		 	 
- stack 1: 0x490
- stack 0: 0xA0
667	 9F	JUMP		 	 
- stack 0: 0x490
668	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x490
669	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
670	 A2	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xA007FF00BF07FF00D9000800F301FC01350000017AFFFF00A0000001480000
671	 A3	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0xA007FF00BF07FF00D9000800F301FC01350000017AFFFF00A0000001480000
- stack 0: 0xE0
672	 A5	SHR		 	 
- stack 1: 0x490
- stack 0: 0xA007FF
673	 A6	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0xA007FF
- stack 0: 0xFFFF
674	 A9	AND		 	 
- stack 1: 0x490
- stack 0: 0x7FF
675	 AA	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0x7FF
- stack 0: 0x1
676	 AC	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0x7FF
677	 AD	PUSH2	0020	 	 
- stack 2: 0x490
- stack 1: 0x7FF
- stack 0: 0x20
678	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x490
- stack 1: 0x7FF
- stack 0: 0x0
679	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x490
- stack 0: 0x7FF
680	 B2	PUSH2	0060	 	 
- stack 2: 0x490
- stack 1: 0x7FF
- stack 0: 0x60
681	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x490
682	 B6	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
683	 B8	ADD		 	 
- stack 0: 0x494
684	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
685	 BA	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xBF07FF00D9000800F301FC01350000017AFFFF00A0000001480000015BFFFF
686	 BB	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xBF07FF00D9000800F301FC01350000017AFFFF00A0000001480000015BFFFF
- stack 0: 0xF0
687	 BD	SHR		 	 
- stack 1: 0x494
- stack 0: 0xBF
688	 BE	JUMP		 	 
- stack 0: 0x494
689	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x494
690	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
691	 C1	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xBF07FF00D9000800F301FC01350000017AFFFF00A0000001480000015BFFFF
692	 C2	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0xBF07FF00D9000800F301FC01350000017AFFFF00A0000001480000015BFFFF
- stack 0: 0xE0
693	 C4	SHR		 	 
- stack 1: 0x494
- stack 0: 0xBF07FF
694	 C5	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0xBF07FF
- stack 0: 0xFFFF
695	 C8	AND		 	 
- stack 1: 0x494
- stack 0: 0x7FF
696	 C9	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x7FF
- stack 0: 0x1
697	 CB	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x7FF
698	 CC	PUSH2	03A0	 	 
- stack 2: 0x494
- stack 1: 0x7FF
- stack 0: 0x3A0
699	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x494
700	 D0	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
701	 D2	ADD		 	 
- stack 0: 0x498
702	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
703	 D4	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xD9000800F301FC01350000017AFFFF00A0000001480000015BFFFF00D90009
704	 D5	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xD9000800F301FC01350000017AFFFF00A0000001480000015BFFFF00D90009
- stack 0: 0xF0
705	 D7	SHR		 	 
- stack 1: 0x498
- stack 0: 0xD9
706	 D8	JUMP		 	 
- stack 0: 0x498
707	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x498
708	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
709	 DB	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xD9000800F301FC01350000017AFFFF00A0000001480000015BFFFF00D90009
710	 DC	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0xD9000800F301FC01350000017AFFFF00A0000001480000015BFFFF00D90009
- stack 0: 0xE0
711	 DE	SHR		 	 
- stack 1: 0x498
- stack 0: 0xD90008
712	 DF	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0xD90008
- stack 0: 0xFFFF
713	 E2	AND		 	 
- stack 1: 0x498
- stack 0: 0x8
714	 E3	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x8
- stack 0: 0x1
715	 E5	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x8
716	 E6	PUSH2	0380	 	 
- stack 2: 0x498
- stack 1: 0x8
- stack 0: 0x380
717	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x498
718	 EA	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
719	 EC	ADD		 	 
- stack 0: 0x49C
720	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
721	 EE	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0xF301FC01350000017AFFFF00A0000001480000015BFFFF00D9000900F301E0
722	 EF	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0xF301FC01350000017AFFFF00A0000001480000015BFFFF00D9000900F301E0
- stack 0: 0xF0
723	 F1	SHR		 	 
- stack 1: 0x49C
- stack 0: 0xF3
724	 F2	JUMP		 	 
- stack 0: 0x49C
725	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x49C
726	 F4	PUSH2	0060	 	 
- stack 1: 0x49C
- stack 0: 0x60
727	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x49C
- stack 0: 0x7FF
728	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0x7FF
- stack 0: 0xFFFFFFFF
729	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0x7FF
730	 FE	PUSH2	03A0	 	 
- stack 2: 0x49C
- stack 1: 0x7FF
- stack 0: 0x3A0
731	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x49C
- stack 1: 0x7FF
- stack 0: 0x7FF
732	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x49C
- stack 2: 0x7FF
- stack 1: 0x7FF
- stack 0: 0xFFFFFFFF
733	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x49C
- stack 1: 0x7FF
- stack 0: 0x7FF
734	 108	SUB		 	 
- stack 1: 0x49C
- stack 0: 0x0
735	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x111
736	 10C	JUMPI		 	 
- stack 0: 0x49C
737	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x49C
- stack 0: 0x12B
738	 110	JUMP		 	 
- stack 0: 0x49C
739	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x49C
740	 12C	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
741	 12E	ADD		 	 
- stack 0: 0x4A0
742	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
743	 130	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x1350000017AFFFF00A0000001480000015BFFFF00D9000900F301E001350000
744	 131	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x1350000017AFFFF00A0000001480000015BFFFF00D9000900F301E001350000
- stack 0: 0xF0
745	 133	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x135
746	 134	JUMP		 	 
- stack 0: 0x4A0
747	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4A0
748	 136	PUSH4	80000000	 	 
- stack 1: 0x4A0
- stack 0: 0x80000000
749	 13B	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0x80000000
- stack 0: 0x20
750	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A0
751	 13F	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
752	 141	ADD		 	 
- stack 0: 0x4A4
753	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
754	 143	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x17AFFFF00A0000001480000015BFFFF00D9000900F301E001350000017AFFFF
755	 144	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x17AFFFF00A0000001480000015BFFFF00D9000900F301E001350000017AFFFF
- stack 0: 0xF0
756	 146	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x17A
757	 147	JUMP		 	 
- stack 0: 0x4A4
758	 17A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x4A4
759	 17B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
760	 17C	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x17AFFFF00A0000001480000015BFFFF00D9000900F301E001350000017AFFFF
761	 17D	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x17AFFFF00A0000001480000015BFFFF00D9000900F301E001350000017AFFFF
- stack 0: 0xE0
762	 17F	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x17AFFFF
763	 180	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x17AFFFF
- stack 0: 0xFFFF
764	 183	AND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFFF
765	 184	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFF
- stack 0: 0x1
766	 186	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
767	 187	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
768	 18A	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
769	 18B	ADD		 	  ;; # ADDI 1
- stack 1: 0x4A4
- stack 0: 0x7FFFFFFF
770	 18C	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
771	 18F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A4
772	 190	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
773	 192	ADD		 	 
- stack 0: 0x4A8
774	 193	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
775	 194	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xA0000001480000015BFFFF00D9000900F301E001350000017AFFFF00A007FF
776	 195	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xA0000001480000015BFFFF00D9000900F301E001350000017AFFFF00A007FF
- stack 0: 0xF0
777	 197	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xA0
778	 198	JUMP		 	 
- stack 0: 0x4A8
779	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x4A8
780	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
781	 A2	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xA0000001480000015BFFFF00D9000900F301E001350000017AFFFF00A007FF
782	 A3	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0xA0000001480000015BFFFF00D9000900F301E001350000017AFFFF00A007FF
- stack 0: 0xE0
783	 A5	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xA00000
784	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0xA00000
- stack 0: 0xFFFF
785	 A9	AND		 	 
- stack 1: 0x4A8
- stack 0: 0x0
786	 AA	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0x1
787	 AC	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0x0
788	 AD	PUSH2	0020	 	 
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0x20
789	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0x7FFFFFFF
790	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x4A8
- stack 0: 0x7FFFFFFF
791	 B2	PUSH2	0060	 	 
- stack 2: 0x4A8
- stack 1: 0x7FFFFFFF
- stack 0: 0x60
792	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x4A8
793	 B6	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
794	 B8	ADD		 	 
- stack 0: 0x4AC
795	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
796	 BA	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x1480000015BFFFF00D9000900F301E001350000017AFFFF00A007FF01480000
797	 BB	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x1480000015BFFFF00D9000900F301E001350000017AFFFF00A007FF01480000
- stack 0: 0xF0
798	 BD	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x148
799	 BE	JUMP		 	 
- stack 0: 0x4AC
800	 148	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x4AC
801	 149	PUSH4	80000000	 	 
- stack 1: 0x4AC
- stack 0: 0x80000000
802	 14E	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0x80000000
- stack 0: 0x3A0
803	 151	MSTORE		 	  ;; # store to x29
- stack 0: 0x4AC
804	 152	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
805	 154	ADD		 	 
- stack 0: 0x4B0
806	 155	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
807	 156	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x15BFFFF00D9000900F301E001350000017AFFFF00A007FF01480000015B07FE
808	 157	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x15BFFFF00D9000900F301E001350000017AFFFF00A007FF01480000015B07FE
- stack 0: 0xF0
809	 159	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x15B
810	 15A	JUMP		 	 
- stack 0: 0x4B0
811	 15B	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-2048(ignore imm)
- stack 0: 0x4B0
812	 15C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
813	 15D	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x15BFFFF00D9000900F301E001350000017AFFFF00A007FF01480000015B07FE
814	 15E	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x15BFFFF00D9000900F301E001350000017AFFFF00A007FF01480000015B07FE
- stack 0: 0xE0
815	 160	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x15BFFFF
816	 161	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x15BFFFF
- stack 0: 0xFFFF
817	 164	AND		 	 
- stack 1: 0x4B0
- stack 0: 0xFFFF
818	 165	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0xFFFF
- stack 0: 0x1
819	 167	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
820	 168	PUSH2	03A0	 	 
- stack 2: 0x4B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
821	 16B	MLOAD		 	  ;; # read from x29
- stack 2: 0x4B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
822	 16C	ADD		 	  ;; # ADDI 29
- stack 1: 0x4B0
- stack 0: 0x7FFFFFFF
823	 16D	PUSH2	03A0	 	 
- stack 2: 0x4B0
- stack 1: 0x7FFFFFFF
- stack 0: 0x3A0
824	 170	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B0
825	 171	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
826	 173	ADD		 	 
- stack 0: 0x4B4
827	 174	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
828	 175	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0xD9000900F301E001350000017AFFFF00A007FF01480000015B07FE00D9000A
829	 176	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0xD9000900F301E001350000017AFFFF00A007FF01480000015B07FE00D9000A
- stack 0: 0xF0
830	 178	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0xD9
831	 179	JUMP		 	 
- stack 0: 0x4B4
832	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4B4
833	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
834	 DB	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0xD9000900F301E001350000017AFFFF00A007FF01480000015B07FE00D9000A
835	 DC	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0xD9000900F301E001350000017AFFFF00A007FF01480000015B07FE00D9000A
- stack 0: 0xE0
836	 DE	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0xD90009
837	 DF	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0xD90009
- stack 0: 0xFFFF
838	 E2	AND		 	 
- stack 1: 0x4B4
- stack 0: 0x9
839	 E3	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0x9
- stack 0: 0x1
840	 E5	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0x9
841	 E6	PUSH2	0380	 	 
- stack 2: 0x4B4
- stack 1: 0x9
- stack 0: 0x380
842	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x4B4
843	 EA	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
844	 EC	ADD		 	 
- stack 0: 0x4B8
845	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
846	 EE	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xF301E001350000017AFFFF00A007FF01480000015B07FE00D9000A00F301C4
847	 EF	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0xF301E001350000017AFFFF00A007FF01480000015B07FE00D9000A00F301C4
- stack 0: 0xF0
848	 F1	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xF3
849	 F2	JUMP		 	 
- stack 0: 0x4B8
850	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x4B8
851	 F4	PUSH2	0060	 	 
- stack 1: 0x4B8
- stack 0: 0x60
852	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x4B8
- stack 0: 0x7FFFFFFF
853	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
854	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B8
- stack 0: 0x7FFFFFFF
855	 FE	PUSH2	03A0	 	 
- stack 2: 0x4B8
- stack 1: 0x7FFFFFFF
- stack 0: 0x3A0
856	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x4B8
- stack 1: 0x7FFFFFFF
- stack 0: 0x7FFFFFFF
857	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B8
- stack 2: 0x7FFFFFFF
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
858	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B8
- stack 1: 0x7FFFFFFF
- stack 0: 0x7FFFFFFF
859	 108	SUB		 	 
- stack 1: 0x4B8
- stack 0: 0x0
860	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x111
861	 10C	JUMPI		 	 
- stack 0: 0x4B8
862	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x4B8
- stack 0: 0x12B
863	 110	JUMP		 	 
- stack 0: 0x4B8
864	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x4B8
865	 12C	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
866	 12E	ADD		 	 
- stack 0: 0x4BC
867	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
868	 130	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x1350000017AFFFF00A007FF01480000015B07FE00D9000A00F301C401350000
869	 131	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x1350000017AFFFF00A007FF01480000015B07FE00D9000A00F301C401350000
- stack 0: 0xF0
870	 133	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x135
871	 134	JUMP		 	 
- stack 0: 0x4BC
872	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4BC
873	 136	PUSH4	80000000	 	 
- stack 1: 0x4BC
- stack 0: 0x80000000
874	 13B	PUSH2	0020	 	 
- stack 2: 0x4BC
- stack 1: 0x80000000
- stack 0: 0x20
875	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x4BC
876	 13F	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
877	 141	ADD		 	 
- stack 0: 0x4C0
878	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
879	 143	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x17AFFFF00A007FF01480000015B07FE00D9000A00F301C40135000000A007FF
880	 144	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x17AFFFF00A007FF01480000015B07FE00D9000A00F301C40135000000A007FF
- stack 0: 0xF0
881	 146	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x17A
882	 147	JUMP		 	 
- stack 0: 0x4C0
883	 17A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x4C0
884	 17B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
885	 17C	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x17AFFFF00A007FF01480000015B07FE00D9000A00F301C40135000000A007FF
886	 17D	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0x17AFFFF00A007FF01480000015B07FE00D9000A00F301C40135000000A007FF
- stack 0: 0xE0
887	 17F	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x17AFFFF
888	 180	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x17AFFFF
- stack 0: 0xFFFF
889	 183	AND		 	 
- stack 1: 0x4C0
- stack 0: 0xFFFF
890	 184	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFF
- stack 0: 0x1
891	 186	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
892	 187	PUSH2	0020	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
893	 18A	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
894	 18B	ADD		 	  ;; # ADDI 1
- stack 1: 0x4C0
- stack 0: 0x7FFFFFFF
895	 18C	PUSH2	0020	 	 
- stack 2: 0x4C0
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
896	 18F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C0
897	 190	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
898	 192	ADD		 	 
- stack 0: 0x4C4
899	 193	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
900	 194	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xA007FF01480000015B07FE00D9000A00F301C40135000000A007FF01480000
901	 195	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0xA007FF01480000015B07FE00D9000A00F301C40135000000A007FF01480000
- stack 0: 0xF0
902	 197	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xA0
903	 198	JUMP		 	 
- stack 0: 0x4C4
904	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x4C4
905	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
906	 A2	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xA007FF01480000015B07FE00D9000A00F301C40135000000A007FF01480000
907	 A3	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0xA007FF01480000015B07FE00D9000A00F301C40135000000A007FF01480000
- stack 0: 0xE0
908	 A5	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xA007FF
909	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0xA007FF
- stack 0: 0xFFFF
910	 A9	AND		 	 
- stack 1: 0x4C4
- stack 0: 0x7FF
911	 AA	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0x7FF
- stack 0: 0x1
912	 AC	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0x7FF
913	 AD	PUSH2	0020	 	 
- stack 2: 0x4C4
- stack 1: 0x7FF
- stack 0: 0x20
914	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C4
- stack 1: 0x7FF
- stack 0: 0x7FFFFFFF
915	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x4C4
- stack 0: 0x800007FE
916	 B2	PUSH2	0060	 	 
- stack 2: 0x4C4
- stack 1: 0x800007FE
- stack 0: 0x60
917	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x4C4
918	 B6	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
919	 B8	ADD		 	 
- stack 0: 0x4C8
920	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
921	 BA	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x1480000015B07FE00D9000A00F301C40135000000A007FF01480000015B07FF
922	 BB	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x1480000015B07FE00D9000A00F301C40135000000A007FF01480000015B07FF
- stack 0: 0xF0
923	 BD	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x148
924	 BE	JUMP		 	 
- stack 0: 0x4C8
925	 148	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x4C8
926	 149	PUSH4	80000000	 	 
- stack 1: 0x4C8
- stack 0: 0x80000000
927	 14E	PUSH2	03A0	 	 
- stack 2: 0x4C8
- stack 1: 0x80000000
- stack 0: 0x3A0
928	 151	MSTORE		 	  ;; # store to x29
- stack 0: 0x4C8
929	 152	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
930	 154	ADD		 	 
- stack 0: 0x4CC
931	 155	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
932	 156	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x15B07FE00D9000A00F301C40135000000A007FF01480000015B07FF00D9000B
933	 157	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x15B07FE00D9000A00F301C40135000000A007FF01480000015B07FF00D9000B
- stack 0: 0xF0
934	 159	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x15B
935	 15A	JUMP		 	 
- stack 0: 0x4CC
936	 15B	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-2048(ignore imm)
- stack 0: 0x4CC
937	 15C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
938	 15D	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x15B07FE00D9000A00F301C40135000000A007FF01480000015B07FF00D9000B
939	 15E	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0x15B07FE00D9000A00F301C40135000000A007FF01480000015B07FF00D9000B
- stack 0: 0xE0
940	 160	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x15B07FE
941	 161	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0x15B07FE
- stack 0: 0xFFFF
942	 164	AND		 	 
- stack 1: 0x4CC
- stack 0: 0x7FE
943	 165	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0x7FE
- stack 0: 0x1
944	 167	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0x7FE
945	 168	PUSH2	03A0	 	 
- stack 2: 0x4CC
- stack 1: 0x7FE
- stack 0: 0x3A0
946	 16B	MLOAD		 	  ;; # read from x29
- stack 2: 0x4CC
- stack 1: 0x7FE
- stack 0: 0x80000000
947	 16C	ADD		 	  ;; # ADDI 29
- stack 1: 0x4CC
- stack 0: 0x800007FE
948	 16D	PUSH2	03A0	 	 
- stack 2: 0x4CC
- stack 1: 0x800007FE
- stack 0: 0x3A0
949	 170	MSTORE		 	  ;; # store to x29
- stack 0: 0x4CC
950	 171	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
951	 173	ADD		 	 
- stack 0: 0x4D0
952	 174	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
953	 175	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0xD9000A00F301C40135000000A007FF01480000015B07FF00D9000B00F301AC
954	 176	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0xD9000A00F301C40135000000A007FF01480000015B07FF00D9000B00F301AC
- stack 0: 0xF0
955	 178	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0xD9
956	 179	JUMP		 	 
- stack 0: 0x4D0
957	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4D0
958	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
959	 DB	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0xD9000A00F301C40135000000A007FF01480000015B07FF00D9000B00F301AC
960	 DC	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0xD9000A00F301C40135000000A007FF01480000015B07FF00D9000B00F301AC
- stack 0: 0xE0
961	 DE	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0xD9000A
962	 DF	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0xD9000A
- stack 0: 0xFFFF
963	 E2	AND		 	 
- stack 1: 0x4D0
- stack 0: 0xA
964	 E3	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0xA
- stack 0: 0x1
965	 E5	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0xA
966	 E6	PUSH2	0380	 	 
- stack 2: 0x4D0
- stack 1: 0xA
- stack 0: 0x380
967	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x4D0
968	 EA	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
969	 EC	ADD		 	 
- stack 0: 0x4D4
970	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
971	 EE	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xF301C40135000000A007FF01480000015B07FF00D9000B00F301AC01350000
972	 EF	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0xF301C40135000000A007FF01480000015B07FF00D9000B00F301AC01350000
- stack 0: 0xF0
973	 F1	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xF3
974	 F2	JUMP		 	 
- stack 0: 0x4D4
975	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x4D4
976	 F4	PUSH2	0060	 	 
- stack 1: 0x4D4
- stack 0: 0x60
977	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x4D4
- stack 0: 0x800007FE
978	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x800007FE
- stack 0: 0xFFFFFFFF
979	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D4
- stack 0: 0x800007FE
980	 FE	PUSH2	03A0	 	 
- stack 2: 0x4D4
- stack 1: 0x800007FE
- stack 0: 0x3A0
981	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x4D4
- stack 1: 0x800007FE
- stack 0: 0x800007FE
982	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D4
- stack 2: 0x800007FE
- stack 1: 0x800007FE
- stack 0: 0xFFFFFFFF
983	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D4
- stack 1: 0x800007FE
- stack 0: 0x800007FE
984	 108	SUB		 	 
- stack 1: 0x4D4
- stack 0: 0x0
985	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x111
986	 10C	JUMPI		 	 
- stack 0: 0x4D4
987	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x4D4
- stack 0: 0x12B
988	 110	JUMP		 	 
- stack 0: 0x4D4
989	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x4D4
990	 12C	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
991	 12E	ADD		 	 
- stack 0: 0x4D8
992	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
993	 130	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x135000000A007FF01480000015B07FF00D9000B00F301AC01350000017AFFFF
994	 131	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x135000000A007FF01480000015B07FF00D9000B00F301AC01350000017AFFFF
- stack 0: 0xF0
995	 133	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x135
996	 134	JUMP		 	 
- stack 0: 0x4D8
997	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4D8
998	 136	PUSH4	80000000	 	 
- stack 1: 0x4D8
- stack 0: 0x80000000
999	 13B	PUSH2	0020	 	 
- stack 2: 0x4D8
- stack 1: 0x80000000
- stack 0: 0x20
1000	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D8
1001	 13F	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1002	 141	ADD		 	 
- stack 0: 0x4DC
1003	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1004	 143	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xA007FF01480000015B07FF00D9000B00F301AC01350000017AFFFF00A0F800
1005	 144	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0xA007FF01480000015B07FF00D9000B00F301AC01350000017AFFFF00A0F800
- stack 0: 0xF0
1006	 146	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xA0
1007	 147	JUMP		 	 
- stack 0: 0x4DC
1008	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x4DC
1009	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
1010	 A2	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xA007FF01480000015B07FF00D9000B00F301AC01350000017AFFFF00A0F800
1011	 A3	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0xA007FF01480000015B07FF00D9000B00F301AC01350000017AFFFF00A0F800
- stack 0: 0xE0
1012	 A5	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xA007FF
1013	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0xA007FF
- stack 0: 0xFFFF
1014	 A9	AND		 	 
- stack 1: 0x4DC
- stack 0: 0x7FF
1015	 AA	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0x7FF
- stack 0: 0x1
1016	 AC	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0x7FF
1017	 AD	PUSH2	0020	 	 
- stack 2: 0x4DC
- stack 1: 0x7FF
- stack 0: 0x20
1018	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x4DC
- stack 1: 0x7FF
- stack 0: 0x80000000
1019	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x4DC
- stack 0: 0x800007FF
1020	 B2	PUSH2	0060	 	 
- stack 2: 0x4DC
- stack 1: 0x800007FF
- stack 0: 0x60
1021	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x4DC
1022	 B6	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1023	 B8	ADD		 	 
- stack 0: 0x4E0
1024	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1025	 BA	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x1480000015B07FF00D9000B00F301AC01350000017AFFFF00A0F8000199FFFF
1026	 BB	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x1480000015B07FF00D9000B00F301AC01350000017AFFFF00A0F8000199FFFF
- stack 0: 0xF0
1027	 BD	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x148
1028	 BE	JUMP		 	 
- stack 0: 0x4E0
1029	 148	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x4E0
1030	 149	PUSH4	80000000	 	 
- stack 1: 0x4E0
- stack 0: 0x80000000
1031	 14E	PUSH2	03A0	 	 
- stack 2: 0x4E0
- stack 1: 0x80000000
- stack 0: 0x3A0
1032	 151	MSTORE		 	  ;; # store to x29
- stack 0: 0x4E0
1033	 152	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1034	 154	ADD		 	 
- stack 0: 0x4E4
1035	 155	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1036	 156	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x15B07FF00D9000B00F301AC01350000017AFFFF00A0F8000199FFFF015B07FF
1037	 157	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x15B07FF00D9000B00F301AC01350000017AFFFF00A0F8000199FFFF015B07FF
- stack 0: 0xF0
1038	 159	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x15B
1039	 15A	JUMP		 	 
- stack 0: 0x4E4
1040	 15B	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-2048(ignore imm)
- stack 0: 0x4E4
1041	 15C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1042	 15D	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x15B07FF00D9000B00F301AC01350000017AFFFF00A0F8000199FFFF015B07FF
1043	 15E	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0x15B07FF00D9000B00F301AC01350000017AFFFF00A0F8000199FFFF015B07FF
- stack 0: 0xE0
1044	 160	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x15B07FF
1045	 161	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x15B07FF
- stack 0: 0xFFFF
1046	 164	AND		 	 
- stack 1: 0x4E4
- stack 0: 0x7FF
1047	 165	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0x7FF
- stack 0: 0x1
1048	 167	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0x7FF
1049	 168	PUSH2	03A0	 	 
- stack 2: 0x4E4
- stack 1: 0x7FF
- stack 0: 0x3A0
1050	 16B	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E4
- stack 1: 0x7FF
- stack 0: 0x80000000
1051	 16C	ADD		 	  ;; # ADDI 29
- stack 1: 0x4E4
- stack 0: 0x800007FF
1052	 16D	PUSH2	03A0	 	 
- stack 2: 0x4E4
- stack 1: 0x800007FF
- stack 0: 0x3A0
1053	 170	MSTORE		 	  ;; # store to x29
- stack 0: 0x4E4
1054	 171	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1055	 173	ADD		 	 
- stack 0: 0x4E8
1056	 174	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1057	 175	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xD9000B00F301AC01350000017AFFFF00A0F8000199FFFF015B07FF00D9000C
1058	 176	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0xD9000B00F301AC01350000017AFFFF00A0F8000199FFFF015B07FF00D9000C
- stack 0: 0xF0
1059	 178	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xD9
1060	 179	JUMP		 	 
- stack 0: 0x4E8
1061	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E8
1062	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1063	 DB	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xD9000B00F301AC01350000017AFFFF00A0F8000199FFFF015B07FF00D9000C
1064	 DC	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0xD9000B00F301AC01350000017AFFFF00A0F8000199FFFF015B07FF00D9000C
- stack 0: 0xE0
1065	 DE	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xD9000B
1066	 DF	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0xD9000B
- stack 0: 0xFFFF
1067	 E2	AND		 	 
- stack 1: 0x4E8
- stack 0: 0xB
1068	 E3	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0xB
- stack 0: 0x1
1069	 E5	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0xB
1070	 E6	PUSH2	0380	 	 
- stack 2: 0x4E8
- stack 1: 0xB
- stack 0: 0x380
1071	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E8
1072	 EA	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1073	 EC	ADD		 	 
- stack 0: 0x4EC
1074	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1075	 EE	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xF301AC01350000017AFFFF00A0F8000199FFFF015B07FF00D9000C00F30190
1076	 EF	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0xF301AC01350000017AFFFF00A0F8000199FFFF015B07FF00D9000C00F30190
- stack 0: 0xF0
1077	 F1	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xF3
1078	 F2	JUMP		 	 
- stack 0: 0x4EC
1079	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x4EC
1080	 F4	PUSH2	0060	 	 
- stack 1: 0x4EC
- stack 0: 0x60
1081	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x4EC
- stack 0: 0x800007FF
1082	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x800007FF
- stack 0: 0xFFFFFFFF
1083	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4EC
- stack 0: 0x800007FF
1084	 FE	PUSH2	03A0	 	 
- stack 2: 0x4EC
- stack 1: 0x800007FF
- stack 0: 0x3A0
1085	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x4EC
- stack 1: 0x800007FF
- stack 0: 0x800007FF
1086	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4EC
- stack 2: 0x800007FF
- stack 1: 0x800007FF
- stack 0: 0xFFFFFFFF
1087	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4EC
- stack 1: 0x800007FF
- stack 0: 0x800007FF
1088	 108	SUB		 	 
- stack 1: 0x4EC
- stack 0: 0x0
1089	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x4EC
- stack 1: 0x0
- stack 0: 0x111
1090	 10C	JUMPI		 	 
- stack 0: 0x4EC
1091	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x4EC
- stack 0: 0x12B
1092	 110	JUMP		 	 
- stack 0: 0x4EC
1093	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x4EC
1094	 12C	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1095	 12E	ADD		 	 
- stack 0: 0x4F0
1096	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1097	 130	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x1350000017AFFFF00A0F8000199FFFF015B07FF00D9000C00F3019000860000
1098	 131	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x1350000017AFFFF00A0F8000199FFFF015B07FF00D9000C00F3019000860000
- stack 0: 0xF0
1099	 133	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x135
1100	 134	JUMP		 	 
- stack 0: 0x4F0
1101	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4F0
1102	 136	PUSH4	80000000	 	 
- stack 1: 0x4F0
- stack 0: 0x80000000
1103	 13B	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0x80000000
- stack 0: 0x20
1104	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F0
1105	 13F	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1106	 141	ADD		 	 
- stack 0: 0x4F4
1107	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1108	 143	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x17AFFFF00A0F8000199FFFF015B07FF00D9000C00F301900086000000A0FFFF
1109	 144	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x17AFFFF00A0F8000199FFFF015B07FF00D9000C00F301900086000000A0FFFF
- stack 0: 0xF0
1110	 146	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x17A
1111	 147	JUMP		 	 
- stack 0: 0x4F4
1112	 17A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x4F4
1113	 17B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1114	 17C	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x17AFFFF00A0F8000199FFFF015B07FF00D9000C00F301900086000000A0FFFF
1115	 17D	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x17AFFFF00A0F8000199FFFF015B07FF00D9000C00F301900086000000A0FFFF
- stack 0: 0xE0
1116	 17F	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x17AFFFF
1117	 180	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x17AFFFF
- stack 0: 0xFFFF
1118	 183	AND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFF
1119	 184	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFF
- stack 0: 0x1
1120	 186	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1121	 187	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1122	 18A	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
1123	 18B	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F4
- stack 0: 0x7FFFFFFF
1124	 18C	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
1125	 18F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F4
1126	 190	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1127	 192	ADD		 	 
- stack 0: 0x4F8
1128	 193	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1129	 194	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xA0F8000199FFFF015B07FF00D9000C00F301900086000000A0FFFF00BFFFFF
1130	 195	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0xA0F8000199FFFF015B07FF00D9000C00F301900086000000A0FFFF00BFFFFF
- stack 0: 0xF0
1131	 197	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xA0
1132	 198	JUMP		 	 
- stack 0: 0x4F8
1133	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x4F8
1134	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1135	 A2	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xA0F8000199FFFF015B07FF00D9000C00F301900086000000A0FFFF00BFFFFF
1136	 A3	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0xA0F8000199FFFF015B07FF00D9000C00F301900086000000A0FFFF00BFFFFF
- stack 0: 0xE0
1137	 A5	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xA0F800
1138	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0xA0F800
- stack 0: 0xFFFF
1139	 A9	AND		 	 
- stack 1: 0x4F8
- stack 0: 0xF800
1140	 AA	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0xF800
- stack 0: 0x1
1141	 AC	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
1142	 AD	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x20
1143	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x7FFFFFFF
1144	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F8
- stack 0: 0x7FFFF7FF
1145	 B2	PUSH2	0060	 	 
- stack 2: 0x4F8
- stack 1: 0x7FFFF7FF
- stack 0: 0x60
1146	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x4F8
1147	 B6	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1148	 B8	ADD		 	 
- stack 0: 0x4FC
1149	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1150	 BA	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x199FFFF015B07FF00D9000C00F301900086000000A0FFFF00BFFFFF00D9000D
1151	 BB	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x199FFFF015B07FF00D9000C00F301900086000000A0FFFF00BFFFFF00D9000D
- stack 0: 0xF0
1152	 BD	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x199
1153	 BE	JUMP		 	 
- stack 0: 0x4FC
1154	 199	JUMPDEST		 ;; __riscvimpl_LUI_7ffffeb7	  ;; # instr: lui t4,0x7ffff(ignore imm)
- stack 0: 0x4FC
1155	 19A	PUSH4	7ffff000	 	 
- stack 1: 0x4FC
- stack 0: 0x7FFFF000
1156	 19F	PUSH2	03A0	 	 
- stack 2: 0x4FC
- stack 1: 0x7FFFF000
- stack 0: 0x3A0
1157	 1A2	MSTORE		 	  ;; # store to x29
- stack 0: 0x4FC
1158	 1A3	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1159	 1A5	ADD		 	 
- stack 0: 0x500
1160	 1A6	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1161	 1A7	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x15B07FF00D9000C00F301900086000000A0FFFF00BFFFFF00D9000D00F3017C
1162	 1A8	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x15B07FF00D9000C00F301900086000000A0FFFF00BFFFFF00D9000D00F3017C
- stack 0: 0xF0
1163	 1AA	SHR		 	 
- stack 1: 0x500
- stack 0: 0x15B
1164	 1AB	JUMP		 	 
- stack 0: 0x500
1165	 15B	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-2048(ignore imm)
- stack 0: 0x500
1166	 15C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1167	 15D	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x15B07FF00D9000C00F301900086000000A0FFFF00BFFFFF00D9000D00F3017C
1168	 15E	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x15B07FF00D9000C00F301900086000000A0FFFF00BFFFFF00D9000D00F3017C
- stack 0: 0xE0
1169	 160	SHR		 	 
- stack 1: 0x500
- stack 0: 0x15B07FF
1170	 161	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x15B07FF
- stack 0: 0xFFFF
1171	 164	AND		 	 
- stack 1: 0x500
- stack 0: 0x7FF
1172	 165	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0x7FF
- stack 0: 0x1
1173	 167	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0x7FF
1174	 168	PUSH2	03A0	 	 
- stack 2: 0x500
- stack 1: 0x7FF
- stack 0: 0x3A0
1175	 16B	MLOAD		 	  ;; # read from x29
- stack 2: 0x500
- stack 1: 0x7FF
- stack 0: 0x7FFFF000
1176	 16C	ADD		 	  ;; # ADDI 29
- stack 1: 0x500
- stack 0: 0x7FFFF7FF
1177	 16D	PUSH2	03A0	 	 
- stack 2: 0x500
- stack 1: 0x7FFFF7FF
- stack 0: 0x3A0
1178	 170	MSTORE		 	  ;; # store to x29
- stack 0: 0x500
1179	 171	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1180	 173	ADD		 	 
- stack 0: 0x504
1181	 174	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1182	 175	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0xD9000C00F301900086000000A0FFFF00BFFFFF00D9000D00F3017C0086FFFF
1183	 176	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0xD9000C00F301900086000000A0FFFF00BFFFFF00D9000D00F3017C0086FFFF
- stack 0: 0xF0
1184	 178	SHR		 	 
- stack 1: 0x504
- stack 0: 0xD9
1185	 179	JUMP		 	 
- stack 0: 0x504
1186	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x504
1187	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1188	 DB	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0xD9000C00F301900086000000A0FFFF00BFFFFF00D9000D00F3017C0086FFFF
1189	 DC	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0xD9000C00F301900086000000A0FFFF00BFFFFF00D9000D00F3017C0086FFFF
- stack 0: 0xE0
1190	 DE	SHR		 	 
- stack 1: 0x504
- stack 0: 0xD9000C
1191	 DF	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0xD9000C
- stack 0: 0xFFFF
1192	 E2	AND		 	 
- stack 1: 0x504
- stack 0: 0xC
1193	 E3	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0xC
- stack 0: 0x1
1194	 E5	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0xC
1195	 E6	PUSH2	0380	 	 
- stack 2: 0x504
- stack 1: 0xC
- stack 0: 0x380
1196	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x504
1197	 EA	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1198	 EC	ADD		 	 
- stack 0: 0x508
1199	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1200	 EE	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xF301900086000000A0FFFF00BFFFFF00D9000D00F3017C0086FFFF00A00001
1201	 EF	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xF301900086000000A0FFFF00BFFFFF00D9000D00F3017C0086FFFF00A00001
- stack 0: 0xF0
1202	 F1	SHR		 	 
- stack 1: 0x508
- stack 0: 0xF3
1203	 F2	JUMP		 	 
- stack 0: 0x508
1204	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x508
1205	 F4	PUSH2	0060	 	 
- stack 1: 0x508
- stack 0: 0x60
1206	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x508
- stack 0: 0x7FFFF7FF
1207	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x508
- stack 1: 0x7FFFF7FF
- stack 0: 0xFFFFFFFF
1208	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x508
- stack 0: 0x7FFFF7FF
1209	 FE	PUSH2	03A0	 	 
- stack 2: 0x508
- stack 1: 0x7FFFF7FF
- stack 0: 0x3A0
1210	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x508
- stack 1: 0x7FFFF7FF
- stack 0: 0x7FFFF7FF
1211	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x508
- stack 2: 0x7FFFF7FF
- stack 1: 0x7FFFF7FF
- stack 0: 0xFFFFFFFF
1212	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x508
- stack 1: 0x7FFFF7FF
- stack 0: 0x7FFFF7FF
1213	 108	SUB		 	 
- stack 1: 0x508
- stack 0: 0x0
1214	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x111
1215	 10C	JUMPI		 	 
- stack 0: 0x508
1216	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x508
- stack 0: 0x12B
1217	 110	JUMP		 	 
- stack 0: 0x508
1218	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x508
1219	 12C	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1220	 12E	ADD		 	 
- stack 0: 0x50C
1221	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1222	 130	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x86000000A0FFFF00BFFFFF00D9000D00F3017C0086FFFF00A0000100BF0000
1223	 131	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x86000000A0FFFF00BFFFFF00D9000D00F3017C0086FFFF00A0000100BF0000
- stack 0: 0xF0
1224	 133	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x86
1225	 134	JUMP		 	 
- stack 0: 0x50C
1226	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x50C
1227	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1228	 88	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x86000000A0FFFF00BFFFFF00D9000D00F3017C0086FFFF00A0000100BF0000
1229	 89	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0x86000000A0FFFF00BFFFFF00D9000D00F3017C0086FFFF00A0000100BF0000
- stack 0: 0xE0
1230	 8B	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x860000
1231	 8C	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0x860000
- stack 0: 0xFFFF
1232	 8F	AND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1233	 90	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x1
1234	 92	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1235	 93	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x20
1236	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x50C
1237	 97	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1238	 99	ADD		 	 
- stack 0: 0x510
1239	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1240	 9B	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xA0FFFF00BFFFFF00D9000D00F3017C0086FFFF00A0000100BF000000D9000E
1241	 9C	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xA0FFFF00BFFFFF00D9000D00F3017C0086FFFF00A0000100BF000000D9000E
- stack 0: 0xF0
1242	 9E	SHR		 	 
- stack 1: 0x510
- stack 0: 0xA0
1243	 9F	JUMP		 	 
- stack 0: 0x510
1244	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x510
1245	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1246	 A2	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xA0FFFF00BFFFFF00D9000D00F3017C0086FFFF00A0000100BF000000D9000E
1247	 A3	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0xA0FFFF00BFFFFF00D9000D00F3017C0086FFFF00A0000100BF000000D9000E
- stack 0: 0xE0
1248	 A5	SHR		 	 
- stack 1: 0x510
- stack 0: 0xA0FFFF
1249	 A6	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
1250	 A9	AND		 	 
- stack 1: 0x510
- stack 0: 0xFFFF
1251	 AA	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0xFFFF
- stack 0: 0x1
1252	 AC	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1253	 AD	PUSH2	0020	 	 
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1254	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1255	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x510
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1256	 B2	PUSH2	0060	 	 
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
1257	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x510
1258	 B6	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1259	 B8	ADD		 	 
- stack 0: 0x514
1260	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1261	 BA	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xBFFFFF00D9000D00F3017C0086FFFF00A0000100BF000000D9000E00F30168
1262	 BB	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xBFFFFF00D9000D00F3017C0086FFFF00A0000100BF000000D9000E00F30168
- stack 0: 0xF0
1263	 BD	SHR		 	 
- stack 1: 0x514
- stack 0: 0xBF
1264	 BE	JUMP		 	 
- stack 0: 0x514
1265	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x514
1266	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1267	 C1	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xBFFFFF00D9000D00F3017C0086FFFF00A0000100BF000000D9000E00F30168
1268	 C2	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0xBFFFFF00D9000D00F3017C0086FFFF00A0000100BF000000D9000E00F30168
- stack 0: 0xE0
1269	 C4	SHR		 	 
- stack 1: 0x514
- stack 0: 0xBFFFFF
1270	 C5	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0xBFFFFF
- stack 0: 0xFFFF
1271	 C8	AND		 	 
- stack 1: 0x514
- stack 0: 0xFFFF
1272	 C9	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0xFFFF
- stack 0: 0x1
1273	 CB	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1274	 CC	PUSH2	03A0	 	 
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
1275	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x514
1276	 D0	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1277	 D2	ADD		 	 
- stack 0: 0x518
1278	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1279	 D4	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xD9000D00F3017C0086FFFF00A0000100BF000000D9000E00F301680086FFFF
1280	 D5	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0xD9000D00F3017C0086FFFF00A0000100BF000000D9000E00F301680086FFFF
- stack 0: 0xF0
1281	 D7	SHR		 	 
- stack 1: 0x518
- stack 0: 0xD9
1282	 D8	JUMP		 	 
- stack 0: 0x518
1283	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x518
1284	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1285	 DB	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xD9000D00F3017C0086FFFF00A0000100BF000000D9000E00F301680086FFFF
1286	 DC	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0xD9000D00F3017C0086FFFF00A0000100BF000000D9000E00F301680086FFFF
- stack 0: 0xE0
1287	 DE	SHR		 	 
- stack 1: 0x518
- stack 0: 0xD9000D
1288	 DF	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0xD9000D
- stack 0: 0xFFFF
1289	 E2	AND		 	 
- stack 1: 0x518
- stack 0: 0xD
1290	 E3	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0xD
- stack 0: 0x1
1291	 E5	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0xD
1292	 E6	PUSH2	0380	 	 
- stack 2: 0x518
- stack 1: 0xD
- stack 0: 0x380
1293	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x518
1294	 EA	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1295	 EC	ADD		 	 
- stack 0: 0x51C
1296	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1297	 EE	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0xF3017C0086FFFF00A0000100BF000000D9000E00F301680086FFFF00A0FFFF
1298	 EF	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0xF3017C0086FFFF00A0000100BF000000D9000E00F301680086FFFF00A0FFFF
- stack 0: 0xF0
1299	 F1	SHR		 	 
- stack 1: 0x51C
- stack 0: 0xF3
1300	 F2	JUMP		 	 
- stack 0: 0x51C
1301	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x51C
1302	 F4	PUSH2	0060	 	 
- stack 1: 0x51C
- stack 0: 0x60
1303	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x51C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1304	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x51C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1305	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x51C
- stack 0: 0xFFFFFFFF
1306	 FE	PUSH2	03A0	 	 
- stack 2: 0x51C
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
1307	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x51C
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1308	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x51C
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1309	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x51C
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
1310	 108	SUB		 	 
- stack 1: 0x51C
- stack 0: 0x0
1311	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x111
1312	 10C	JUMPI		 	 
- stack 0: 0x51C
1313	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x51C
- stack 0: 0x12B
1314	 110	JUMP		 	 
- stack 0: 0x51C
1315	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x51C
1316	 12C	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1317	 12E	ADD		 	 
- stack 0: 0x520
1318	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1319	 130	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x86FFFF00A0000100BF000000D9000E00F301680086FFFF00A0FFFF00BFFFFE
1320	 131	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x86FFFF00A0000100BF000000D9000E00F301680086FFFF00A0FFFF00BFFFFE
- stack 0: 0xF0
1321	 133	SHR		 	 
- stack 1: 0x520
- stack 0: 0x86
1322	 134	JUMP		 	 
- stack 0: 0x520
1323	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x520
1324	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1325	 88	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x86FFFF00A0000100BF000000D9000E00F301680086FFFF00A0FFFF00BFFFFE
1326	 89	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x86FFFF00A0000100BF000000D9000E00F301680086FFFF00A0FFFF00BFFFFE
- stack 0: 0xE0
1327	 8B	SHR		 	 
- stack 1: 0x520
- stack 0: 0x86FFFF
1328	 8C	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
1329	 8F	AND		 	 
- stack 1: 0x520
- stack 0: 0xFFFF
1330	 90	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0xFFFF
- stack 0: 0x1
1331	 92	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1332	 93	PUSH2	0020	 	 
- stack 2: 0x520
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1333	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x520
1334	 97	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1335	 99	ADD		 	 
- stack 0: 0x524
1336	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1337	 9B	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0xA0000100BF000000D9000E00F301680086FFFF00A0FFFF00BFFFFE00D9000F
1338	 9C	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0xA0000100BF000000D9000E00F301680086FFFF00A0FFFF00BFFFFE00D9000F
- stack 0: 0xF0
1339	 9E	SHR		 	 
- stack 1: 0x524
- stack 0: 0xA0
1340	 9F	JUMP		 	 
- stack 0: 0x524
1341	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x524
1342	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1343	 A2	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0xA0000100BF000000D9000E00F301680086FFFF00A0FFFF00BFFFFE00D9000F
1344	 A3	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0xA0000100BF000000D9000E00F301680086FFFF00A0FFFF00BFFFFE00D9000F
- stack 0: 0xE0
1345	 A5	SHR		 	 
- stack 1: 0x524
- stack 0: 0xA00001
1346	 A6	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0xA00001
- stack 0: 0xFFFF
1347	 A9	AND		 	 
- stack 1: 0x524
- stack 0: 0x1
1348	 AA	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x1
1349	 AC	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0x1
1350	 AD	PUSH2	0020	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x20
1351	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1352	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x524
- stack 0: 0x0
1353	 B2	PUSH2	0060	 	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x60
1354	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x524
1355	 B6	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1356	 B8	ADD		 	 
- stack 0: 0x528
1357	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1358	 BA	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xBF000000D9000E00F301680086FFFF00A0FFFF00BFFFFE00D9000F00F30154
1359	 BB	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0xBF000000D9000E00F301680086FFFF00A0FFFF00BFFFFE00D9000F00F30154
- stack 0: 0xF0
1360	 BD	SHR		 	 
- stack 1: 0x528
- stack 0: 0xBF
1361	 BE	JUMP		 	 
- stack 0: 0x528
1362	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x528
1363	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1364	 C1	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xBF000000D9000E00F301680086FFFF00A0FFFF00BFFFFE00D9000F00F30154
1365	 C2	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0xBF000000D9000E00F301680086FFFF00A0FFFF00BFFFFE00D9000F00F30154
- stack 0: 0xE0
1366	 C4	SHR		 	 
- stack 1: 0x528
- stack 0: 0xBF0000
1367	 C5	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0xBF0000
- stack 0: 0xFFFF
1368	 C8	AND		 	 
- stack 1: 0x528
- stack 0: 0x0
1369	 C9	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0x0
- stack 0: 0x1
1370	 CB	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0x0
1371	 CC	PUSH2	03A0	 	 
- stack 2: 0x528
- stack 1: 0x0
- stack 0: 0x3A0
1372	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x528
1373	 D0	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1374	 D2	ADD		 	 
- stack 0: 0x52C
1375	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1376	 D4	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xD9000E00F301680086FFFF00A0FFFF00BFFFFE00D9000F00F3015401350000
1377	 D5	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0xD9000E00F301680086FFFF00A0FFFF00BFFFFE00D9000F00F3015401350000
- stack 0: 0xF0
1378	 D7	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xD9
1379	 D8	JUMP		 	 
- stack 0: 0x52C
1380	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x52C
1381	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1382	 DB	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xD9000E00F301680086FFFF00A0FFFF00BFFFFE00D9000F00F3015401350000
1383	 DC	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0xD9000E00F301680086FFFF00A0FFFF00BFFFFE00D9000F00F3015401350000
- stack 0: 0xE0
1384	 DE	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xD9000E
1385	 DF	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0xD9000E
- stack 0: 0xFFFF
1386	 E2	AND		 	 
- stack 1: 0x52C
- stack 0: 0xE
1387	 E3	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0xE
- stack 0: 0x1
1388	 E5	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0xE
1389	 E6	PUSH2	0380	 	 
- stack 2: 0x52C
- stack 1: 0xE
- stack 0: 0x380
1390	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x52C
1391	 EA	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1392	 EC	ADD		 	 
- stack 0: 0x530
1393	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1394	 EE	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xF301680086FFFF00A0FFFF00BFFFFE00D9000F00F3015401350000017AFFFF
1395	 EF	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0xF301680086FFFF00A0FFFF00BFFFFE00D9000F00F3015401350000017AFFFF
- stack 0: 0xF0
1396	 F1	SHR		 	 
- stack 1: 0x530
- stack 0: 0xF3
1397	 F2	JUMP		 	 
- stack 0: 0x530
1398	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x530
1399	 F4	PUSH2	0060	 	 
- stack 1: 0x530
- stack 0: 0x60
1400	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x530
- stack 0: 0x0
1401	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1402	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x530
- stack 0: 0x0
1403	 FE	PUSH2	03A0	 	 
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0x3A0
1404	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0x0
1405	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x530
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1406	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0x0
1407	 108	SUB		 	 
- stack 1: 0x530
- stack 0: 0x0
1408	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0x111
1409	 10C	JUMPI		 	 
- stack 0: 0x530
1410	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x530
- stack 0: 0x12B
1411	 110	JUMP		 	 
- stack 0: 0x530
1412	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x530
1413	 12C	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1414	 12E	ADD		 	 
- stack 0: 0x534
1415	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1416	 130	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x86FFFF00A0FFFF00BFFFFE00D9000F00F3015401350000017AFFFF00A00001
1417	 131	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x86FFFF00A0FFFF00BFFFFE00D9000F00F3015401350000017AFFFF00A00001
- stack 0: 0xF0
1418	 133	SHR		 	 
- stack 1: 0x534
- stack 0: 0x86
1419	 134	JUMP		 	 
- stack 0: 0x534
1420	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x534
1421	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1422	 88	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x86FFFF00A0FFFF00BFFFFE00D9000F00F3015401350000017AFFFF00A00001
1423	 89	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x86FFFF00A0FFFF00BFFFFE00D9000F00F3015401350000017AFFFF00A00001
- stack 0: 0xE0
1424	 8B	SHR		 	 
- stack 1: 0x534
- stack 0: 0x86FFFF
1425	 8C	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
1426	 8F	AND		 	 
- stack 1: 0x534
- stack 0: 0xFFFF
1427	 90	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0xFFFF
- stack 0: 0x1
1428	 92	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1429	 93	PUSH2	0020	 	 
- stack 2: 0x534
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1430	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x534
1431	 97	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1432	 99	ADD		 	 
- stack 0: 0x538
1433	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1434	 9B	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0xA0FFFF00BFFFFE00D9000F00F3015401350000017AFFFF00A0000101480000
1435	 9C	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0xA0FFFF00BFFFFE00D9000F00F3015401350000017AFFFF00A0000101480000
- stack 0: 0xF0
1436	 9E	SHR		 	 
- stack 1: 0x538
- stack 0: 0xA0
1437	 9F	JUMP		 	 
- stack 0: 0x538
1438	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x538
1439	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1440	 A2	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0xA0FFFF00BFFFFE00D9000F00F3015401350000017AFFFF00A0000101480000
1441	 A3	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0xA0FFFF00BFFFFE00D9000F00F3015401350000017AFFFF00A0000101480000
- stack 0: 0xE0
1442	 A5	SHR		 	 
- stack 1: 0x538
- stack 0: 0xA0FFFF
1443	 A6	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
1444	 A9	AND		 	 
- stack 1: 0x538
- stack 0: 0xFFFF
1445	 AA	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0xFFFF
- stack 0: 0x1
1446	 AC	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1447	 AD	PUSH2	0020	 	 
- stack 2: 0x538
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1448	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x538
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1449	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x538
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1450	 B2	PUSH2	0060	 	 
- stack 2: 0x538
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x60
1451	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x538
1452	 B6	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1453	 B8	ADD		 	 
- stack 0: 0x53C
1454	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1455	 BA	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xBFFFFE00D9000F00F3015401350000017AFFFF00A000010148000000D90010
1456	 BB	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0xBFFFFE00D9000F00F3015401350000017AFFFF00A000010148000000D90010
- stack 0: 0xF0
1457	 BD	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xBF
1458	 BE	JUMP		 	 
- stack 0: 0x53C
1459	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x53C
1460	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1461	 C1	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xBFFFFE00D9000F00F3015401350000017AFFFF00A000010148000000D90010
1462	 C2	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0xBFFFFE00D9000F00F3015401350000017AFFFF00A000010148000000D90010
- stack 0: 0xE0
1463	 C4	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xBFFFFE
1464	 C5	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0xBFFFFE
- stack 0: 0xFFFF
1465	 C8	AND		 	 
- stack 1: 0x53C
- stack 0: 0xFFFE
1466	 C9	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0xFFFE
- stack 0: 0x1
1467	 CB	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1468	 CC	PUSH2	03A0	 	 
- stack 2: 0x53C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3A0
1469	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x53C
1470	 D0	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1471	 D2	ADD		 	 
- stack 0: 0x540
1472	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1473	 D4	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xD9000F00F3015401350000017AFFFF00A000010148000000D9001000F3013C
1474	 D5	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0xD9000F00F3015401350000017AFFFF00A000010148000000D9001000F3013C
- stack 0: 0xF0
1475	 D7	SHR		 	 
- stack 1: 0x540
- stack 0: 0xD9
1476	 D8	JUMP		 	 
- stack 0: 0x540
1477	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x540
1478	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1479	 DB	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xD9000F00F3015401350000017AFFFF00A000010148000000D9001000F3013C
1480	 DC	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0xD9000F00F3015401350000017AFFFF00A000010148000000D9001000F3013C
- stack 0: 0xE0
1481	 DE	SHR		 	 
- stack 1: 0x540
- stack 0: 0xD9000F
1482	 DF	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0xD9000F
- stack 0: 0xFFFF
1483	 E2	AND		 	 
- stack 1: 0x540
- stack 0: 0xF
1484	 E3	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xF
- stack 0: 0x1
1485	 E5	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xF
1486	 E6	PUSH2	0380	 	 
- stack 2: 0x540
- stack 1: 0xF
- stack 0: 0x380
1487	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x540
1488	 EA	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1489	 EC	ADD		 	 
- stack 0: 0x544
1490	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1491	 EE	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xF3015401350000017AFFFF00A000010148000000D9001000F3013C0086000D
1492	 EF	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0xF3015401350000017AFFFF00A000010148000000D9001000F3013C0086000D
- stack 0: 0xF0
1493	 F1	SHR		 	 
- stack 1: 0x544
- stack 0: 0xF3
1494	 F2	JUMP		 	 
- stack 0: 0x544
1495	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x544
1496	 F4	PUSH2	0060	 	 
- stack 1: 0x544
- stack 0: 0x60
1497	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x544
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1498	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
1499	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0xFFFFFFFE
1500	 FE	PUSH2	03A0	 	 
- stack 2: 0x544
- stack 1: 0xFFFFFFFE
- stack 0: 0x3A0
1501	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x544
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1502	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x544
- stack 2: 0xFFFFFFFE
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
1503	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x544
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFE
1504	 108	SUB		 	 
- stack 1: 0x544
- stack 0: 0x0
1505	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x111
1506	 10C	JUMPI		 	 
- stack 0: 0x544
1507	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x544
- stack 0: 0x12B
1508	 110	JUMP		 	 
- stack 0: 0x544
1509	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x544
1510	 12C	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1511	 12E	ADD		 	 
- stack 0: 0x548
1512	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1513	 130	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x1350000017AFFFF00A000010148000000D9001000F3013C0086000D017A000B
1514	 131	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x1350000017AFFFF00A000010148000000D9001000F3013C0086000D017A000B
- stack 0: 0xF0
1515	 133	SHR		 	 
- stack 1: 0x548
- stack 0: 0x135
1516	 134	JUMP		 	 
- stack 0: 0x548
1517	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x548
1518	 136	PUSH4	80000000	 	 
- stack 1: 0x548
- stack 0: 0x80000000
1519	 13B	PUSH2	0020	 	 
- stack 2: 0x548
- stack 1: 0x80000000
- stack 0: 0x20
1520	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x548
1521	 13F	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1522	 141	ADD		 	 
- stack 0: 0x54C
1523	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1524	 143	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x17AFFFF00A000010148000000D9001000F3013C0086000D017A000B00BF0018
1525	 144	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x17AFFFF00A000010148000000D9001000F3013C0086000D017A000B00BF0018
- stack 0: 0xF0
1526	 146	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x17A
1527	 147	JUMP		 	 
- stack 0: 0x54C
1528	 17A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x54C
1529	 17B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1530	 17C	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x17AFFFF00A000010148000000D9001000F3013C0086000D017A000B00BF0018
1531	 17D	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x17AFFFF00A000010148000000D9001000F3013C0086000D017A000B00BF0018
- stack 0: 0xE0
1532	 17F	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x17AFFFF
1533	 180	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x17AFFFF
- stack 0: 0xFFFF
1534	 183	AND		 	 
- stack 1: 0x54C
- stack 0: 0xFFFF
1535	 184	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0xFFFF
- stack 0: 0x1
1536	 186	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1537	 187	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1538	 18A	MLOAD		 	  ;; # read from x1
- stack 2: 0x54C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
1539	 18B	ADD		 	  ;; # ADDI 1
- stack 1: 0x54C
- stack 0: 0x7FFFFFFF
1540	 18C	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
1541	 18F	MSTORE		 	  ;; # store to x1
- stack 0: 0x54C
1542	 190	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1543	 192	ADD		 	 
- stack 0: 0x550
1544	 193	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1545	 194	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xA000010148000000D9001000F3013C0086000D017A000B00BF001800D90011
1546	 195	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0xA000010148000000D9001000F3013C0086000D017A000B00BF001800D90011
- stack 0: 0xF0
1547	 197	SHR		 	 
- stack 1: 0x550
- stack 0: 0xA0
1548	 198	JUMP		 	 
- stack 0: 0x550
1549	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x550
1550	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1551	 A2	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xA000010148000000D9001000F3013C0086000D017A000B00BF001800D90011
1552	 A3	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0xA000010148000000D9001000F3013C0086000D017A000B00BF001800D90011
- stack 0: 0xE0
1553	 A5	SHR		 	 
- stack 1: 0x550
- stack 0: 0xA00001
1554	 A6	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0xA00001
- stack 0: 0xFFFF
1555	 A9	AND		 	 
- stack 1: 0x550
- stack 0: 0x1
1556	 AA	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x1
1557	 AC	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0x1
1558	 AD	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x20
1559	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x7FFFFFFF
1560	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x550
- stack 0: 0x80000000
1561	 B2	PUSH2	0060	 	 
- stack 2: 0x550
- stack 1: 0x80000000
- stack 0: 0x60
1562	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x550
1563	 B6	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1564	 B8	ADD		 	 
- stack 0: 0x554
1565	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1566	 BA	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x148000000D9001000F3013C0086000D017A000B00BF001800D9001101AC0128
1567	 BB	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x148000000D9001000F3013C0086000D017A000B00BF001800D9001101AC0128
- stack 0: 0xF0
1568	 BD	SHR		 	 
- stack 1: 0x554
- stack 0: 0x148
1569	 BE	JUMP		 	 
- stack 0: 0x554
1570	 148	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x554
1571	 149	PUSH4	80000000	 	 
- stack 1: 0x554
- stack 0: 0x80000000
1572	 14E	PUSH2	03A0	 	 
- stack 2: 0x554
- stack 1: 0x80000000
- stack 0: 0x3A0
1573	 151	MSTORE		 	  ;; # store to x29
- stack 0: 0x554
1574	 152	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1575	 154	ADD		 	 
- stack 0: 0x558
1576	 155	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1577	 156	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xD9001000F3013C0086000D017A000B00BF001800D9001101AC012801EE0000
1578	 157	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xD9001000F3013C0086000D017A000B00BF001800D9001101AC012801EE0000
- stack 0: 0xF0
1579	 159	SHR		 	 
- stack 1: 0x558
- stack 0: 0xD9
1580	 15A	JUMP		 	 
- stack 0: 0x558
1581	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x558
1582	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1583	 DB	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xD9001000F3013C0086000D017A000B00BF001800D9001101AC012801EE0000
1584	 DC	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0xD9001000F3013C0086000D017A000B00BF001800D9001101AC012801EE0000
- stack 0: 0xE0
1585	 DE	SHR		 	 
- stack 1: 0x558
- stack 0: 0xD90010
1586	 DF	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0xD90010
- stack 0: 0xFFFF
1587	 E2	AND		 	 
- stack 1: 0x558
- stack 0: 0x10
1588	 E3	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x10
- stack 0: 0x1
1589	 E5	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x10
1590	 E6	PUSH2	0380	 	 
- stack 2: 0x558
- stack 1: 0x10
- stack 0: 0x380
1591	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x558
1592	 EA	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1593	 EC	ADD		 	 
- stack 0: 0x55C
1594	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1595	 EE	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xF3013C0086000D017A000B00BF001800D9001101AC012801EE00000086000D
1596	 EF	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0xF3013C0086000D017A000B00BF001800D9001101AC012801EE00000086000D
- stack 0: 0xF0
1597	 F1	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xF3
1598	 F2	JUMP		 	 
- stack 0: 0x55C
1599	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x55C
1600	 F4	PUSH2	0060	 	 
- stack 1: 0x55C
- stack 0: 0x60
1601	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x55C
- stack 0: 0x80000000
1602	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x55C
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
1603	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x55C
- stack 0: 0x80000000
1604	 FE	PUSH2	03A0	 	 
- stack 2: 0x55C
- stack 1: 0x80000000
- stack 0: 0x3A0
1605	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x55C
- stack 1: 0x80000000
- stack 0: 0x80000000
1606	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x55C
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
1607	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x55C
- stack 1: 0x80000000
- stack 0: 0x80000000
1608	 108	SUB		 	 
- stack 1: 0x55C
- stack 0: 0x0
1609	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0x111
1610	 10C	JUMPI		 	 
- stack 0: 0x55C
1611	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x55C
- stack 0: 0x12B
1612	 110	JUMP		 	 
- stack 0: 0x55C
1613	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x55C
1614	 12C	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1615	 12E	ADD		 	 
- stack 0: 0x560
1616	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1617	 130	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x86000D017A000B00BF001800D9001101AC012801EE00000086000D00A0000B
1618	 131	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x86000D017A000B00BF001800D9001101AC012801EE00000086000D00A0000B
- stack 0: 0xF0
1619	 133	SHR		 	 
- stack 1: 0x560
- stack 0: 0x86
1620	 134	JUMP		 	 
- stack 0: 0x560
1621	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x560
1622	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1623	 88	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x86000D017A000B00BF001800D9001101AC012801EE00000086000D00A0000B
1624	 89	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x86000D017A000B00BF001800D9001101AC012801EE00000086000D00A0000B
- stack 0: 0xE0
1625	 8B	SHR		 	 
- stack 1: 0x560
- stack 0: 0x86000D
1626	 8C	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x86000D
- stack 0: 0xFFFF
1627	 8F	AND		 	 
- stack 1: 0x560
- stack 0: 0xD
1628	 90	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0xD
- stack 0: 0x1
1629	 92	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0xD
1630	 93	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0xD
- stack 0: 0x20
1631	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x560
1632	 97	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1633	 99	ADD		 	 
- stack 0: 0x564
1634	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1635	 9B	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x17A000B00BF001800D9001101AC012801EE00000086000D00A0000B02080000
1636	 9C	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x17A000B00BF001800D9001101AC012801EE00000086000D00A0000B02080000
- stack 0: 0xF0
1637	 9E	SHR		 	 
- stack 1: 0x564
- stack 0: 0x17A
1638	 9F	JUMP		 	 
- stack 0: 0x564
1639	 17A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x564
1640	 17B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
1641	 17C	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x17A000B00BF001800D9001101AC012801EE00000086000D00A0000B02080000
1642	 17D	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x17A000B00BF001800D9001101AC012801EE00000086000D00A0000B02080000
- stack 0: 0xE0
1643	 17F	SHR		 	 
- stack 1: 0x564
- stack 0: 0x17A000B
1644	 180	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x17A000B
- stack 0: 0xFFFF
1645	 183	AND		 	 
- stack 1: 0x564
- stack 0: 0xB
1646	 184	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0xB
- stack 0: 0x1
1647	 186	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0xB
1648	 187	PUSH2	0020	 	 
- stack 2: 0x564
- stack 1: 0xB
- stack 0: 0x20
1649	 18A	MLOAD		 	  ;; # read from x1
- stack 2: 0x564
- stack 1: 0xB
- stack 0: 0xD
1650	 18B	ADD		 	  ;; # ADDI 1
- stack 1: 0x564
- stack 0: 0x18
1651	 18C	PUSH2	0020	 	 
- stack 2: 0x564
- stack 1: 0x18
- stack 0: 0x20
1652	 18F	MSTORE		 	  ;; # store to x1
- stack 0: 0x564
1653	 190	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1654	 192	ADD		 	 
- stack 0: 0x568
1655	 193	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1656	 194	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xBF001800D9001101AC012801EE00000086000D00A0000B0208000002270001
1657	 195	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0xBF001800D9001101AC012801EE00000086000D00A0000B0208000002270001
- stack 0: 0xF0
1658	 197	SHR		 	 
- stack 1: 0x568
- stack 0: 0xBF
1659	 198	JUMP		 	 
- stack 0: 0x568
1660	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x568
1661	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1662	 C1	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xBF001800D9001101AC012801EE00000086000D00A0000B0208000002270001
1663	 C2	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0xBF001800D9001101AC012801EE00000086000D00A0000B0208000002270001
- stack 0: 0xE0
1664	 C4	SHR		 	 
- stack 1: 0x568
- stack 0: 0xBF0018
1665	 C5	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0xBF0018
- stack 0: 0xFFFF
1666	 C8	AND		 	 
- stack 1: 0x568
- stack 0: 0x18
1667	 C9	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x18
- stack 0: 0x1
1668	 CB	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x18
1669	 CC	PUSH2	03A0	 	 
- stack 2: 0x568
- stack 1: 0x18
- stack 0: 0x3A0
1670	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x568
1671	 D0	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1672	 D2	ADD		 	 
- stack 0: 0x56C
1673	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1674	 D4	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0xD9001101AC012801EE00000086000D00A0000B020800000227000102460002
1675	 D5	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0xD9001101AC012801EE00000086000D00A0000B020800000227000102460002
- stack 0: 0xF0
1676	 D7	SHR		 	 
- stack 1: 0x56C
- stack 0: 0xD9
1677	 D8	JUMP		 	 
- stack 0: 0x56C
1678	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x56C
1679	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
1680	 DB	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0xD9001101AC012801EE00000086000D00A0000B020800000227000102460002
1681	 DC	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0xD9001101AC012801EE00000086000D00A0000B020800000227000102460002
- stack 0: 0xE0
1682	 DE	SHR		 	 
- stack 1: 0x56C
- stack 0: 0xD90011
1683	 DF	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0xD90011
- stack 0: 0xFFFF
1684	 E2	AND		 	 
- stack 1: 0x56C
- stack 0: 0x11
1685	 E3	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x11
- stack 0: 0x1
1686	 E5	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x11
1687	 E6	PUSH2	0380	 	 
- stack 2: 0x56C
- stack 1: 0x11
- stack 0: 0x380
1688	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x56C
1689	 EA	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1690	 EC	ADD		 	 
- stack 0: 0x570
1691	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1692	 EE	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x1AC012801EE00000086000D00A0000B0208000002270001024600020260FFEC
1693	 EF	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x1AC012801EE00000086000D00A0000B0208000002270001024600020260FFEC
- stack 0: 0xF0
1694	 F1	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1AC
1695	 F2	JUMP		 	 
- stack 0: 0x570
1696	 1AC	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,128(ignore imm)
- stack 0: 0x570
1697	 1AD	PUSH2	0020	 	 
- stack 1: 0x570
- stack 0: 0x20
1698	 1B0	MLOAD		 	  ;; # read from x1
- stack 1: 0x570
- stack 0: 0x18
1699	 1B1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x570
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
1700	 1B6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x570
- stack 0: 0x18
1701	 1B7	PUSH2	03A0	 	 
- stack 2: 0x570
- stack 1: 0x18
- stack 0: 0x3A0
1702	 1BA	MLOAD		 	  ;; # read from x29
- stack 2: 0x570
- stack 1: 0x18
- stack 0: 0x18
1703	 1BB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x570
- stack 2: 0x18
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
1704	 1C0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x570
- stack 1: 0x18
- stack 0: 0x18
1705	 1C1	SUB		 	 
- stack 1: 0x570
- stack 0: 0x0
1706	 1C2	PUSH2	01CA	 ;; _neq_a76a7de132fe127f526779f9773b3dc2f7c2e72a528981afeb301b37a36ab06f	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x1CA
1707	 1C5	JUMPI		 	 
- stack 0: 0x570
1708	 1C6	PUSH2	01E4	 ;; _neq_after_a76a7de132fe127f526779f9773b3dc2f7c2e72a528981afeb301b37a36ab06f	 
- stack 1: 0x570
- stack 0: 0x1E4
1709	 1C9	JUMP		 	 
- stack 0: 0x570
1710	 1E4	JUMPDEST		 ;; _neq_after_a76a7de132fe127f526779f9773b3dc2f7c2e72a528981afeb301b37a36ab06f	 
- stack 0: 0x570
1711	 1E5	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1712	 1E7	ADD		 	 
- stack 0: 0x574
1713	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1714	 1E9	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x1EE00000086000D00A0000B0208000002270001024600020260FFEC00BF0018
1715	 1EA	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x1EE00000086000D00A0000B0208000002270001024600020260FFEC00BF0018
- stack 0: 0xF0
1716	 1EC	SHR		 	 
- stack 1: 0x574
- stack 0: 0x1EE
1717	 1ED	JUMP		 	 
- stack 0: 0x574
1718	 1EE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x574
1719	 1EF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1720	 1F0	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x1EE00000086000D00A0000B0208000002270001024600020260FFEC00BF0018
1721	 1F1	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x1EE00000086000D00A0000B0208000002270001024600020260FFEC00BF0018
- stack 0: 0xE0
1722	 1F3	SHR		 	 
- stack 1: 0x574
- stack 0: 0x1EE0000
1723	 1F4	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x1EE0000
- stack 0: 0xFFFF
1724	 1F7	AND		 	 
- stack 1: 0x574
- stack 0: 0x0
1725	 1F8	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x1
1726	 1FA	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x0
1727	 1FB	PUSH2	0080	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x80
1728	 1FE	MSTORE		 	  ;; # store to x4
- stack 0: 0x574
1729	 1FF	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1730	 201	ADD		 	 
- stack 0: 0x578
1731	 202	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1732	 203	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x86000D00A0000B0208000002270001024600020260FFEC00BF001800D90012
1733	 204	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x86000D00A0000B0208000002270001024600020260FFEC00BF001800D90012
- stack 0: 0xF0
1734	 206	SHR		 	 
- stack 1: 0x578
- stack 0: 0x86
1735	 207	JUMP		 	 
- stack 0: 0x578
1736	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x578
1737	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
1738	 88	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x86000D00A0000B0208000002270001024600020260FFEC00BF001800D90012
1739	 89	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x86000D00A0000B0208000002270001024600020260FFEC00BF001800D90012
- stack 0: 0xE0
1740	 8B	SHR		 	 
- stack 1: 0x578
- stack 0: 0x86000D
1741	 8C	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x86000D
- stack 0: 0xFFFF
1742	 8F	AND		 	 
- stack 1: 0x578
- stack 0: 0xD
1743	 90	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0xD
- stack 0: 0x1
1744	 92	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0xD
1745	 93	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0xD
- stack 0: 0x20
1746	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x578
1747	 97	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1748	 99	ADD		 	 
- stack 0: 0x57C
1749	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1750	 9B	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xA0000B0208000002270001024600020260FFEC00BF001800D9001202A20100
1751	 9C	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0xA0000B0208000002270001024600020260FFEC00BF001800D9001202A20100
- stack 0: 0xF0
1752	 9E	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xA0
1753	 9F	JUMP		 	 
- stack 0: 0x57C
1754	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x57C
1755	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
1756	 A2	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xA0000B0208000002270001024600020260FFEC00BF001800D9001202A20100
1757	 A3	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0xA0000B0208000002270001024600020260FFEC00BF001800D9001202A20100
- stack 0: 0xE0
1758	 A5	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xA0000B
1759	 A6	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0xA0000B
- stack 0: 0xFFFF
1760	 A9	AND		 	 
- stack 1: 0x57C
- stack 0: 0xB
1761	 AA	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0xB
- stack 0: 0x1
1762	 AC	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0xB
1763	 AD	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xB
- stack 0: 0x20
1764	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x57C
- stack 1: 0xB
- stack 0: 0xD
1765	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x57C
- stack 0: 0x18
1766	 B2	PUSH2	0060	 	 
- stack 2: 0x57C
- stack 1: 0x18
- stack 0: 0x60
1767	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x57C
1768	 B6	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1769	 B8	ADD		 	 
- stack 0: 0x580
1770	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1771	 BA	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x208000002270001024600020260FFEC00BF001800D9001202A2010001EE0000
1772	 BB	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x208000002270001024600020260FFEC00BF001800D9001202A2010001EE0000
- stack 0: 0xF0
1773	 BD	SHR		 	 
- stack 1: 0x580
- stack 0: 0x208
1774	 BE	JUMP		 	 
- stack 0: 0x580
1775	 208	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x580
1776	 209	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
1777	 20A	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x208000002270001024600020260FFEC00BF001800D9001202A2010001EE0000
1778	 20B	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x208000002270001024600020260FFEC00BF001800D9001202A2010001EE0000
- stack 0: 0xE0
1779	 20D	SHR		 	 
- stack 1: 0x580
- stack 0: 0x2080000
1780	 20E	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x2080000
- stack 0: 0xFFFF
1781	 211	AND		 	 
- stack 1: 0x580
- stack 0: 0x0
1782	 212	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x1
1783	 214	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x0
1784	 215	PUSH2	0060	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x60
1785	 218	MLOAD		 	  ;; # read from x3
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x18
1786	 219	ADD		 	  ;; # ADDI 3
- stack 1: 0x580
- stack 0: 0x18
1787	 21A	PUSH2	00C0	 	 
- stack 2: 0x580
- stack 1: 0x18
- stack 0: 0xC0
1788	 21D	MSTORE		 	  ;; # store to x6
- stack 0: 0x580
1789	 21E	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1790	 220	ADD		 	 
- stack 0: 0x584
1791	 221	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1792	 222	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x2270001024600020260FFEC00BF001800D9001202A2010001EE00000086000D
1793	 223	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x2270001024600020260FFEC00BF001800D9001202A2010001EE00000086000D
- stack 0: 0xF0
1794	 225	SHR		 	 
- stack 1: 0x584
- stack 0: 0x227
1795	 226	JUMP		 	 
- stack 0: 0x584
1796	 227	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x584
1797	 228	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
1798	 229	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x2270001024600020260FFEC00BF001800D9001202A2010001EE00000086000D
1799	 22A	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x2270001024600020260FFEC00BF001800D9001202A2010001EE00000086000D
- stack 0: 0xE0
1800	 22C	SHR		 	 
- stack 1: 0x584
- stack 0: 0x2270001
1801	 22D	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x2270001
- stack 0: 0xFFFF
1802	 230	AND		 	 
- stack 1: 0x584
- stack 0: 0x1
1803	 231	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x1
1804	 233	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x1
1805	 234	PUSH2	0080	 	 
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x80
1806	 237	MLOAD		 	  ;; # read from x4
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x0
1807	 238	ADD		 	  ;; # ADDI 4
- stack 1: 0x584
- stack 0: 0x1
1808	 239	PUSH2	0080	 	 
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x80
1809	 23C	MSTORE		 	  ;; # store to x4
- stack 0: 0x584
1810	 23D	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1811	 23F	ADD		 	 
- stack 0: 0x588
1812	 240	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1813	 241	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x24600020260FFEC00BF001800D9001202A2010001EE00000086000D00A0000A
1814	 242	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x24600020260FFEC00BF001800D9001202A2010001EE00000086000D00A0000A
- stack 0: 0xF0
1815	 244	SHR		 	 
- stack 1: 0x588
- stack 0: 0x246
1816	 245	JUMP		 	 
- stack 0: 0x588
1817	 246	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x588
1818	 247	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
1819	 248	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x24600020260FFEC00BF001800D9001202A2010001EE00000086000D00A0000A
1820	 249	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x24600020260FFEC00BF001800D9001202A2010001EE00000086000D00A0000A
- stack 0: 0xE0
1821	 24B	SHR		 	 
- stack 1: 0x588
- stack 0: 0x2460002
1822	 24C	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x2460002
- stack 0: 0xFFFF
1823	 24F	AND		 	 
- stack 1: 0x588
- stack 0: 0x2
1824	 250	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x2
- stack 0: 0x1
1825	 252	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x2
1826	 253	PUSH2	00A0	 	 
- stack 2: 0x588
- stack 1: 0x2
- stack 0: 0xA0
1827	 256	MSTORE		 	  ;; # store to x5
- stack 0: 0x588
1828	 257	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
1829	 259	ADD		 	 
- stack 0: 0x58C
1830	 25A	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
1831	 25B	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x260FFEC00BF001800D9001202A2010001EE00000086000D00A0000A02E40000
1832	 25C	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x260FFEC00BF001800D9001202A2010001EE00000086000D00A0000A02E40000
- stack 0: 0xF0
1833	 25E	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x260
1834	 25F	JUMP		 	 
- stack 0: 0x58C
1835	 260	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x58C
1836	 261	PUSH2	0080	 	 
- stack 1: 0x58C
- stack 0: 0x80
1837	 264	MLOAD		 	  ;; # read from x4
- stack 1: 0x58C
- stack 0: 0x1
1838	 265	PUSH4	FFFFFFFF	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1839	 26A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x58C
- stack 0: 0x1
1840	 26B	PUSH2	00A0	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0xA0
1841	 26E	MLOAD		 	  ;; # read from x5
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x2
1842	 26F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x58C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1843	 274	AND		 	  ;; # mask to 32 bits
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x2
1844	 275	SUB		 	 
- stack 1: 0x58C
- stack 0: 0x1
1845	 276	PUSH2	027E	 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x27E
1846	 279	JUMPI		 	 
- stack 0: 0x58C
1847	 27E	JUMPDEST		 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 0: 0x58C
1848	 27F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
1849	 280	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x260FFEC00BF001800D9001202A2010001EE00000086000D00A0000A02E40000
1850	 281	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x260FFEC00BF001800D9001202A2010001EE00000086000D00A0000A02E40000
- stack 0: 0xE0
1851	 283	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x260FFEC
1852	 284	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x260FFEC
- stack 0: 0xFFFF
1853	 287	AND		 	 
- stack 1: 0x58C
- stack 0: 0xFFEC
1854	 288	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0xFFEC
- stack 0: 0x1
1855	 28A	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
1856	 28B	ADD		 	 
- stack 0: 0x578
1857	 28C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x578
- stack 0: 0xFFFFFFFF
1858	 291	AND		 	  ;; # mask to 32 bits
- stack 0: 0x578
1859	 292	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1860	 293	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x86000D00A0000B0208000002270001024600020260FFEC00BF001800D90012
1861	 294	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x86000D00A0000B0208000002270001024600020260FFEC00BF001800D90012
- stack 0: 0xF0
1862	 296	SHR		 	 
- stack 1: 0x578
- stack 0: 0x86
1863	 297	JUMP		 	 
- stack 0: 0x578
1864	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x578
1865	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
1866	 88	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x86000D00A0000B0208000002270001024600020260FFEC00BF001800D90012
1867	 89	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x86000D00A0000B0208000002270001024600020260FFEC00BF001800D90012
- stack 0: 0xE0
1868	 8B	SHR		 	 
- stack 1: 0x578
- stack 0: 0x86000D
1869	 8C	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x86000D
- stack 0: 0xFFFF
1870	 8F	AND		 	 
- stack 1: 0x578
- stack 0: 0xD
1871	 90	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0xD
- stack 0: 0x1
1872	 92	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0xD
1873	 93	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0xD
- stack 0: 0x20
1874	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x578
1875	 97	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1876	 99	ADD		 	 
- stack 0: 0x57C
1877	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1878	 9B	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xA0000B0208000002270001024600020260FFEC00BF001800D9001202A20100
1879	 9C	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0xA0000B0208000002270001024600020260FFEC00BF001800D9001202A20100
- stack 0: 0xF0
1880	 9E	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xA0
1881	 9F	JUMP		 	 
- stack 0: 0x57C
1882	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x57C
1883	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
1884	 A2	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xA0000B0208000002270001024600020260FFEC00BF001800D9001202A20100
1885	 A3	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0xA0000B0208000002270001024600020260FFEC00BF001800D9001202A20100
- stack 0: 0xE0
1886	 A5	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xA0000B
1887	 A6	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0xA0000B
- stack 0: 0xFFFF
1888	 A9	AND		 	 
- stack 1: 0x57C
- stack 0: 0xB
1889	 AA	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0xB
- stack 0: 0x1
1890	 AC	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0xB
1891	 AD	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xB
- stack 0: 0x20
1892	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x57C
- stack 1: 0xB
- stack 0: 0xD
1893	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x57C
- stack 0: 0x18
1894	 B2	PUSH2	0060	 	 
- stack 2: 0x57C
- stack 1: 0x18
- stack 0: 0x60
1895	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x57C
1896	 B6	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1897	 B8	ADD		 	 
- stack 0: 0x580
1898	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1899	 BA	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x208000002270001024600020260FFEC00BF001800D9001202A2010001EE0000
1900	 BB	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x208000002270001024600020260FFEC00BF001800D9001202A2010001EE0000
- stack 0: 0xF0
1901	 BD	SHR		 	 
- stack 1: 0x580
- stack 0: 0x208
1902	 BE	JUMP		 	 
- stack 0: 0x580
1903	 208	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x580
1904	 209	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
1905	 20A	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x208000002270001024600020260FFEC00BF001800D9001202A2010001EE0000
1906	 20B	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x208000002270001024600020260FFEC00BF001800D9001202A2010001EE0000
- stack 0: 0xE0
1907	 20D	SHR		 	 
- stack 1: 0x580
- stack 0: 0x2080000
1908	 20E	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x2080000
- stack 0: 0xFFFF
1909	 211	AND		 	 
- stack 1: 0x580
- stack 0: 0x0
1910	 212	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x1
1911	 214	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x0
1912	 215	PUSH2	0060	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x60
1913	 218	MLOAD		 	  ;; # read from x3
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x18
1914	 219	ADD		 	  ;; # ADDI 3
- stack 1: 0x580
- stack 0: 0x18
1915	 21A	PUSH2	00C0	 	 
- stack 2: 0x580
- stack 1: 0x18
- stack 0: 0xC0
1916	 21D	MSTORE		 	  ;; # store to x6
- stack 0: 0x580
1917	 21E	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1918	 220	ADD		 	 
- stack 0: 0x584
1919	 221	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1920	 222	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x2270001024600020260FFEC00BF001800D9001202A2010001EE00000086000D
1921	 223	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x2270001024600020260FFEC00BF001800D9001202A2010001EE00000086000D
- stack 0: 0xF0
1922	 225	SHR		 	 
- stack 1: 0x584
- stack 0: 0x227
1923	 226	JUMP		 	 
- stack 0: 0x584
1924	 227	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x584
1925	 228	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
1926	 229	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x2270001024600020260FFEC00BF001800D9001202A2010001EE00000086000D
1927	 22A	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x2270001024600020260FFEC00BF001800D9001202A2010001EE00000086000D
- stack 0: 0xE0
1928	 22C	SHR		 	 
- stack 1: 0x584
- stack 0: 0x2270001
1929	 22D	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x2270001
- stack 0: 0xFFFF
1930	 230	AND		 	 
- stack 1: 0x584
- stack 0: 0x1
1931	 231	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x1
1932	 233	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x1
1933	 234	PUSH2	0080	 	 
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x80
1934	 237	MLOAD		 	  ;; # read from x4
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x1
1935	 238	ADD		 	  ;; # ADDI 4
- stack 1: 0x584
- stack 0: 0x2
1936	 239	PUSH2	0080	 	 
- stack 2: 0x584
- stack 1: 0x2
- stack 0: 0x80
1937	 23C	MSTORE		 	  ;; # store to x4
- stack 0: 0x584
1938	 23D	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1939	 23F	ADD		 	 
- stack 0: 0x588
1940	 240	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1941	 241	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x24600020260FFEC00BF001800D9001202A2010001EE00000086000D00A0000A
1942	 242	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x24600020260FFEC00BF001800D9001202A2010001EE00000086000D00A0000A
- stack 0: 0xF0
1943	 244	SHR		 	 
- stack 1: 0x588
- stack 0: 0x246
1944	 245	JUMP		 	 
- stack 0: 0x588
1945	 246	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x588
1946	 247	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
1947	 248	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x24600020260FFEC00BF001800D9001202A2010001EE00000086000D00A0000A
1948	 249	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x24600020260FFEC00BF001800D9001202A2010001EE00000086000D00A0000A
- stack 0: 0xE0
1949	 24B	SHR		 	 
- stack 1: 0x588
- stack 0: 0x2460002
1950	 24C	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x2460002
- stack 0: 0xFFFF
1951	 24F	AND		 	 
- stack 1: 0x588
- stack 0: 0x2
1952	 250	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x2
- stack 0: 0x1
1953	 252	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x2
1954	 253	PUSH2	00A0	 	 
- stack 2: 0x588
- stack 1: 0x2
- stack 0: 0xA0
1955	 256	MSTORE		 	  ;; # store to x5
- stack 0: 0x588
1956	 257	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
1957	 259	ADD		 	 
- stack 0: 0x58C
1958	 25A	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
1959	 25B	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x260FFEC00BF001800D9001202A2010001EE00000086000D00A0000A02E40000
1960	 25C	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x260FFEC00BF001800D9001202A2010001EE00000086000D00A0000A02E40000
- stack 0: 0xF0
1961	 25E	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x260
1962	 25F	JUMP		 	 
- stack 0: 0x58C
1963	 260	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x58C
1964	 261	PUSH2	0080	 	 
- stack 1: 0x58C
- stack 0: 0x80
1965	 264	MLOAD		 	  ;; # read from x4
- stack 1: 0x58C
- stack 0: 0x2
1966	 265	PUSH4	FFFFFFFF	 	 
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1967	 26A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x58C
- stack 0: 0x2
1968	 26B	PUSH2	00A0	 	 
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0xA0
1969	 26E	MLOAD		 	  ;; # read from x5
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0x2
1970	 26F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x58C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1971	 274	AND		 	  ;; # mask to 32 bits
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0x2
1972	 275	SUB		 	 
- stack 1: 0x58C
- stack 0: 0x0
1973	 276	PUSH2	027E	 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x27E
1974	 279	JUMPI		 	 
- stack 0: 0x58C
1975	 27A	PUSH2	0298	 ;; _neq_after_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 1: 0x58C
- stack 0: 0x298
1976	 27D	JUMP		 	 
- stack 0: 0x58C
1977	 298	JUMPDEST		 ;; _neq_after_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 0: 0x58C
1978	 299	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
1979	 29B	ADD		 	 
- stack 0: 0x590
1980	 29C	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
1981	 29D	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0xBF001800D9001202A2010001EE00000086000D00A0000A02E4000002080000
1982	 29E	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0xBF001800D9001202A2010001EE00000086000D00A0000A02E4000002080000
- stack 0: 0xF0
1983	 2A0	SHR		 	 
- stack 1: 0x590
- stack 0: 0xBF
1984	 2A1	JUMP		 	 
- stack 0: 0x590
1985	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x590
1986	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
1987	 C1	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0xBF001800D9001202A2010001EE00000086000D00A0000A02E4000002080000
1988	 C2	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0xBF001800D9001202A2010001EE00000086000D00A0000A02E4000002080000
- stack 0: 0xE0
1989	 C4	SHR		 	 
- stack 1: 0x590
- stack 0: 0xBF0018
1990	 C5	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0xBF0018
- stack 0: 0xFFFF
1991	 C8	AND		 	 
- stack 1: 0x590
- stack 0: 0x18
1992	 C9	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x18
- stack 0: 0x1
1993	 CB	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x18
1994	 CC	PUSH2	03A0	 	 
- stack 2: 0x590
- stack 1: 0x18
- stack 0: 0x3A0
1995	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x590
1996	 D0	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
1997	 D2	ADD		 	 
- stack 0: 0x594
1998	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
1999	 D4	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0xD9001202A2010001EE00000086000D00A0000A02E400000208000002270001
2000	 D5	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0xD9001202A2010001EE00000086000D00A0000A02E400000208000002270001
- stack 0: 0xF0
2001	 D7	SHR		 	 
- stack 1: 0x594
- stack 0: 0xD9
2002	 D8	JUMP		 	 
- stack 0: 0x594
2003	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x594
2004	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2005	 DB	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0xD9001202A2010001EE00000086000D00A0000A02E400000208000002270001
2006	 DC	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0xD9001202A2010001EE00000086000D00A0000A02E400000208000002270001
- stack 0: 0xE0
2007	 DE	SHR		 	 
- stack 1: 0x594
- stack 0: 0xD90012
2008	 DF	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0xD90012
- stack 0: 0xFFFF
2009	 E2	AND		 	 
- stack 1: 0x594
- stack 0: 0x12
2010	 E3	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x12
- stack 0: 0x1
2011	 E5	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x12
2012	 E6	PUSH2	0380	 	 
- stack 2: 0x594
- stack 1: 0x12
- stack 0: 0x380
2013	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x594
2014	 EA	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2015	 EC	ADD		 	 
- stack 0: 0x598
2016	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2017	 EE	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x2A2010001EE00000086000D00A0000A02E40000020800000227000102460002
2018	 EF	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x2A2010001EE00000086000D00A0000A02E40000020800000227000102460002
- stack 0: 0xF0
2019	 F1	SHR		 	 
- stack 1: 0x598
- stack 0: 0x2A2
2020	 F2	JUMP		 	 
- stack 0: 0x598
2021	 2A2	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,100(ignore imm)
- stack 0: 0x598
2022	 2A3	PUSH2	00C0	 	 
- stack 1: 0x598
- stack 0: 0xC0
2023	 2A6	MLOAD		 	  ;; # read from x6
- stack 1: 0x598
- stack 0: 0x18
2024	 2A7	PUSH4	FFFFFFFF	 	 
- stack 2: 0x598
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
2025	 2AC	AND		 	  ;; # mask to 32 bits
- stack 1: 0x598
- stack 0: 0x18
2026	 2AD	PUSH2	03A0	 	 
- stack 2: 0x598
- stack 1: 0x18
- stack 0: 0x3A0
2027	 2B0	MLOAD		 	  ;; # read from x29
- stack 2: 0x598
- stack 1: 0x18
- stack 0: 0x18
2028	 2B1	PUSH4	FFFFFFFF	 	 
- stack 3: 0x598
- stack 2: 0x18
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
2029	 2B6	AND		 	  ;; # mask to 32 bits
- stack 2: 0x598
- stack 1: 0x18
- stack 0: 0x18
2030	 2B7	SUB		 	 
- stack 1: 0x598
- stack 0: 0x0
2031	 2B8	PUSH2	02C0	 ;; _neq_fee63d395bca5cbed282f1814546141fe82cc6477944e258a9a78549b8d23b85	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x2C0
2032	 2BB	JUMPI		 	 
- stack 0: 0x598
2033	 2BC	PUSH2	02DA	 ;; _neq_after_fee63d395bca5cbed282f1814546141fe82cc6477944e258a9a78549b8d23b85	 
- stack 1: 0x598
- stack 0: 0x2DA
2034	 2BF	JUMP		 	 
- stack 0: 0x598
2035	 2DA	JUMPDEST		 ;; _neq_after_fee63d395bca5cbed282f1814546141fe82cc6477944e258a9a78549b8d23b85	 
- stack 0: 0x598
2036	 2DB	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2037	 2DD	ADD		 	 
- stack 0: 0x59C
2038	 2DE	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2039	 2DF	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x1EE00000086000D00A0000A02E400000208000002270001024600020260FFE8
2040	 2E0	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x1EE00000086000D00A0000A02E400000208000002270001024600020260FFE8
- stack 0: 0xF0
2041	 2E2	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x1EE
2042	 2E3	JUMP		 	 
- stack 0: 0x59C
2043	 1EE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x59C
2044	 1EF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2045	 1F0	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x1EE00000086000D00A0000A02E400000208000002270001024600020260FFE8
2046	 1F1	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x1EE00000086000D00A0000A02E400000208000002270001024600020260FFE8
- stack 0: 0xE0
2047	 1F3	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x1EE0000
2048	 1F4	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x1EE0000
- stack 0: 0xFFFF
2049	 1F7	AND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2050	 1F8	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1
2051	 1FA	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2052	 1FB	PUSH2	0080	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x80
2053	 1FE	MSTORE		 	  ;; # store to x4
- stack 0: 0x59C
2054	 1FF	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2055	 201	ADD		 	 
- stack 0: 0x5A0
2056	 202	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2057	 203	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x86000D00A0000A02E400000208000002270001024600020260FFE800BF0017
2058	 204	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x86000D00A0000A02E400000208000002270001024600020260FFE800BF0017
- stack 0: 0xF0
2059	 206	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x86
2060	 207	JUMP		 	 
- stack 0: 0x5A0
2061	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5A0
2062	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2063	 88	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x86000D00A0000A02E400000208000002270001024600020260FFE800BF0017
2064	 89	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x86000D00A0000A02E400000208000002270001024600020260FFE800BF0017
- stack 0: 0xE0
2065	 8B	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x86000D
2066	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x86000D
- stack 0: 0xFFFF
2067	 8F	AND		 	 
- stack 1: 0x5A0
- stack 0: 0xD
2068	 90	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0xD
- stack 0: 0x1
2069	 92	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0xD
2070	 93	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0xD
- stack 0: 0x20
2071	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
2072	 97	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2073	 99	ADD		 	 
- stack 0: 0x5A4
2074	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2075	 9B	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xA0000A02E400000208000002270001024600020260FFE800BF001700D90013
2076	 9C	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0xA0000A02E400000208000002270001024600020260FFE800BF001700D90013
- stack 0: 0xF0
2077	 9E	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xA0
2078	 9F	JUMP		 	 
- stack 0: 0x5A4
2079	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x5A4
2080	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2081	 A2	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xA0000A02E400000208000002270001024600020260FFE800BF001700D90013
2082	 A3	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0xA0000A02E400000208000002270001024600020260FFE800BF001700D90013
- stack 0: 0xE0
2083	 A5	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xA0000A
2084	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0xA0000A
- stack 0: 0xFFFF
2085	 A9	AND		 	 
- stack 1: 0x5A4
- stack 0: 0xA
2086	 AA	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0xA
- stack 0: 0x1
2087	 AC	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0xA
2088	 AD	PUSH2	0020	 	 
- stack 2: 0x5A4
- stack 1: 0xA
- stack 0: 0x20
2089	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A4
- stack 1: 0xA
- stack 0: 0xD
2090	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x5A4
- stack 0: 0x17
2091	 B2	PUSH2	0060	 	 
- stack 2: 0x5A4
- stack 1: 0x17
- stack 0: 0x60
2092	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A4
2093	 B6	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2094	 B8	ADD		 	 
- stack 0: 0x5A8
2095	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2096	 BA	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2E400000208000002270001024600020260FFE800BF001700D9001302A200D4
2097	 BB	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x2E400000208000002270001024600020260FFE800BF001700D9001302A200D4
- stack 0: 0xF0
2098	 BD	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2E4
2099	 BE	JUMP		 	 
- stack 0: 0x5A8
2100	 2E4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A8
2101	 2E5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2102	 2E6	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2E400000208000002270001024600020260FFE800BF001700D9001302A200D4
2103	 2E7	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x2E400000208000002270001024600020260FFE800BF001700D9001302A200D4
- stack 0: 0xE0
2104	 2E9	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2E40000
2105	 2EA	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x2E40000
- stack 0: 0xFFFF
2106	 2ED	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2107	 2EE	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2108	 2F0	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2109	 2F1	POP		 	 
- stack 0: 0x5A8
2110	 2F2	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2111	 2F4	ADD		 	 
- stack 0: 0x5AC
2112	 2F5	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2113	 2F6	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x208000002270001024600020260FFE800BF001700D9001302A200D401EE0000
2114	 2F7	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x208000002270001024600020260FFE800BF001700D9001302A200D401EE0000
- stack 0: 0xF0
2115	 2F9	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x208
2116	 2FA	JUMP		 	 
- stack 0: 0x5AC
2117	 208	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5AC
2118	 209	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2119	 20A	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x208000002270001024600020260FFE800BF001700D9001302A200D401EE0000
2120	 20B	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x208000002270001024600020260FFE800BF001700D9001302A200D401EE0000
- stack 0: 0xE0
2121	 20D	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2080000
2122	 20E	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x2080000
- stack 0: 0xFFFF
2123	 211	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2124	 212	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x1
2125	 214	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2126	 215	PUSH2	0060	 	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x60
2127	 218	MLOAD		 	  ;; # read from x3
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x17
2128	 219	ADD		 	  ;; # ADDI 3
- stack 1: 0x5AC
- stack 0: 0x17
2129	 21A	PUSH2	00C0	 	 
- stack 2: 0x5AC
- stack 1: 0x17
- stack 0: 0xC0
2130	 21D	MSTORE		 	  ;; # store to x6
- stack 0: 0x5AC
2131	 21E	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2132	 220	ADD		 	 
- stack 0: 0x5B0
2133	 221	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2134	 222	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x2270001024600020260FFE800BF001700D9001302A200D401EE00000086000D
2135	 223	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x2270001024600020260FFE800BF001700D9001302A200D401EE00000086000D
- stack 0: 0xF0
2136	 225	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x227
2137	 226	JUMP		 	 
- stack 0: 0x5B0
2138	 227	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B0
2139	 228	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2140	 229	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x2270001024600020260FFE800BF001700D9001302A200D401EE00000086000D
2141	 22A	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x2270001024600020260FFE800BF001700D9001302A200D401EE00000086000D
- stack 0: 0xE0
2142	 22C	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x2270001
2143	 22D	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x2270001
- stack 0: 0xFFFF
2144	 230	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x1
2145	 231	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x1
- stack 0: 0x1
2146	 233	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x1
2147	 234	PUSH2	0080	 	 
- stack 2: 0x5B0
- stack 1: 0x1
- stack 0: 0x80
2148	 237	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B0
- stack 1: 0x1
- stack 0: 0x0
2149	 238	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B0
- stack 0: 0x1
2150	 239	PUSH2	0080	 	 
- stack 2: 0x5B0
- stack 1: 0x1
- stack 0: 0x80
2151	 23C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B0
2152	 23D	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2153	 23F	ADD		 	 
- stack 0: 0x5B4
2154	 240	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2155	 241	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x24600020260FFE800BF001700D9001302A200D401EE00000086000D00A00009
2156	 242	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x24600020260FFE800BF001700D9001302A200D401EE00000086000D00A00009
- stack 0: 0xF0
2157	 244	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x246
2158	 245	JUMP		 	 
- stack 0: 0x5B4
2159	 246	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B4
2160	 247	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2161	 248	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x24600020260FFE800BF001700D9001302A200D401EE00000086000D00A00009
2162	 249	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x24600020260FFE800BF001700D9001302A200D401EE00000086000D00A00009
- stack 0: 0xE0
2163	 24B	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x2460002
2164	 24C	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x2460002
- stack 0: 0xFFFF
2165	 24F	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x2
2166	 250	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0x1
2167	 252	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x2
2168	 253	PUSH2	00A0	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0xA0
2169	 256	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B4
2170	 257	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2171	 259	ADD		 	 
- stack 0: 0x5B8
2172	 25A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2173	 25B	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x260FFE800BF001700D9001302A200D401EE00000086000D00A0000902E40000
2174	 25C	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x260FFE800BF001700D9001302A200D401EE00000086000D00A0000902E40000
- stack 0: 0xF0
2175	 25E	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x260
2176	 25F	JUMP		 	 
- stack 0: 0x5B8
2177	 260	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5B8
2178	 261	PUSH2	0080	 	 
- stack 1: 0x5B8
- stack 0: 0x80
2179	 264	MLOAD		 	  ;; # read from x4
- stack 1: 0x5B8
- stack 0: 0x1
2180	 265	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2181	 26A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B8
- stack 0: 0x1
2182	 26B	PUSH2	00A0	 	 
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0xA0
2183	 26E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0x2
2184	 26F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2185	 274	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0x2
2186	 275	SUB		 	 
- stack 1: 0x5B8
- stack 0: 0x1
2187	 276	PUSH2	027E	 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0x27E
2188	 279	JUMPI		 	 
- stack 0: 0x5B8
2189	 27E	JUMPDEST		 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 0: 0x5B8
2190	 27F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2191	 280	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x260FFE800BF001700D9001302A200D401EE00000086000D00A0000902E40000
2192	 281	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x260FFE800BF001700D9001302A200D401EE00000086000D00A0000902E40000
- stack 0: 0xE0
2193	 283	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x260FFE8
2194	 284	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x260FFE8
- stack 0: 0xFFFF
2195	 287	AND		 	 
- stack 1: 0x5B8
- stack 0: 0xFFE8
2196	 288	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0xFFE8
- stack 0: 0x1
2197	 28A	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2198	 28B	ADD		 	 
- stack 0: 0x5A0
2199	 28C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5A0
- stack 0: 0xFFFFFFFF
2200	 291	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5A0
2201	 292	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2202	 293	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x86000D00A0000A02E400000208000002270001024600020260FFE800BF0017
2203	 294	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x86000D00A0000A02E400000208000002270001024600020260FFE800BF0017
- stack 0: 0xF0
2204	 296	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x86
2205	 297	JUMP		 	 
- stack 0: 0x5A0
2206	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5A0
2207	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2208	 88	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x86000D00A0000A02E400000208000002270001024600020260FFE800BF0017
2209	 89	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x86000D00A0000A02E400000208000002270001024600020260FFE800BF0017
- stack 0: 0xE0
2210	 8B	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x86000D
2211	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x86000D
- stack 0: 0xFFFF
2212	 8F	AND		 	 
- stack 1: 0x5A0
- stack 0: 0xD
2213	 90	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0xD
- stack 0: 0x1
2214	 92	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0xD
2215	 93	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0xD
- stack 0: 0x20
2216	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
2217	 97	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2218	 99	ADD		 	 
- stack 0: 0x5A4
2219	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2220	 9B	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xA0000A02E400000208000002270001024600020260FFE800BF001700D90013
2221	 9C	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0xA0000A02E400000208000002270001024600020260FFE800BF001700D90013
- stack 0: 0xF0
2222	 9E	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xA0
2223	 9F	JUMP		 	 
- stack 0: 0x5A4
2224	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x5A4
2225	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2226	 A2	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xA0000A02E400000208000002270001024600020260FFE800BF001700D90013
2227	 A3	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0xA0000A02E400000208000002270001024600020260FFE800BF001700D90013
- stack 0: 0xE0
2228	 A5	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xA0000A
2229	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0xA0000A
- stack 0: 0xFFFF
2230	 A9	AND		 	 
- stack 1: 0x5A4
- stack 0: 0xA
2231	 AA	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0xA
- stack 0: 0x1
2232	 AC	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0xA
2233	 AD	PUSH2	0020	 	 
- stack 2: 0x5A4
- stack 1: 0xA
- stack 0: 0x20
2234	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A4
- stack 1: 0xA
- stack 0: 0xD
2235	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x5A4
- stack 0: 0x17
2236	 B2	PUSH2	0060	 	 
- stack 2: 0x5A4
- stack 1: 0x17
- stack 0: 0x60
2237	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A4
2238	 B6	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2239	 B8	ADD		 	 
- stack 0: 0x5A8
2240	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2241	 BA	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2E400000208000002270001024600020260FFE800BF001700D9001302A200D4
2242	 BB	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x2E400000208000002270001024600020260FFE800BF001700D9001302A200D4
- stack 0: 0xF0
2243	 BD	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2E4
2244	 BE	JUMP		 	 
- stack 0: 0x5A8
2245	 2E4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A8
2246	 2E5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2247	 2E6	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2E400000208000002270001024600020260FFE800BF001700D9001302A200D4
2248	 2E7	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x2E400000208000002270001024600020260FFE800BF001700D9001302A200D4
- stack 0: 0xE0
2249	 2E9	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2E40000
2250	 2EA	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x2E40000
- stack 0: 0xFFFF
2251	 2ED	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2252	 2EE	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2253	 2F0	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2254	 2F1	POP		 	 
- stack 0: 0x5A8
2255	 2F2	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2256	 2F4	ADD		 	 
- stack 0: 0x5AC
2257	 2F5	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2258	 2F6	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x208000002270001024600020260FFE800BF001700D9001302A200D401EE0000
2259	 2F7	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x208000002270001024600020260FFE800BF001700D9001302A200D401EE0000
- stack 0: 0xF0
2260	 2F9	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x208
2261	 2FA	JUMP		 	 
- stack 0: 0x5AC
2262	 208	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5AC
2263	 209	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2264	 20A	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x208000002270001024600020260FFE800BF001700D9001302A200D401EE0000
2265	 20B	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x208000002270001024600020260FFE800BF001700D9001302A200D401EE0000
- stack 0: 0xE0
2266	 20D	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2080000
2267	 20E	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x2080000
- stack 0: 0xFFFF
2268	 211	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2269	 212	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x1
2270	 214	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2271	 215	PUSH2	0060	 	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x60
2272	 218	MLOAD		 	  ;; # read from x3
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x17
2273	 219	ADD		 	  ;; # ADDI 3
- stack 1: 0x5AC
- stack 0: 0x17
2274	 21A	PUSH2	00C0	 	 
- stack 2: 0x5AC
- stack 1: 0x17
- stack 0: 0xC0
2275	 21D	MSTORE		 	  ;; # store to x6
- stack 0: 0x5AC
2276	 21E	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2277	 220	ADD		 	 
- stack 0: 0x5B0
2278	 221	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2279	 222	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x2270001024600020260FFE800BF001700D9001302A200D401EE00000086000D
2280	 223	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x2270001024600020260FFE800BF001700D9001302A200D401EE00000086000D
- stack 0: 0xF0
2281	 225	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x227
2282	 226	JUMP		 	 
- stack 0: 0x5B0
2283	 227	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B0
2284	 228	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2285	 229	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x2270001024600020260FFE800BF001700D9001302A200D401EE00000086000D
2286	 22A	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x2270001024600020260FFE800BF001700D9001302A200D401EE00000086000D
- stack 0: 0xE0
2287	 22C	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x2270001
2288	 22D	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x2270001
- stack 0: 0xFFFF
2289	 230	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x1
2290	 231	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x1
- stack 0: 0x1
2291	 233	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x1
2292	 234	PUSH2	0080	 	 
- stack 2: 0x5B0
- stack 1: 0x1
- stack 0: 0x80
2293	 237	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B0
- stack 1: 0x1
- stack 0: 0x1
2294	 238	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B0
- stack 0: 0x2
2295	 239	PUSH2	0080	 	 
- stack 2: 0x5B0
- stack 1: 0x2
- stack 0: 0x80
2296	 23C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B0
2297	 23D	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2298	 23F	ADD		 	 
- stack 0: 0x5B4
2299	 240	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2300	 241	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x24600020260FFE800BF001700D9001302A200D401EE00000086000D00A00009
2301	 242	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x24600020260FFE800BF001700D9001302A200D401EE00000086000D00A00009
- stack 0: 0xF0
2302	 244	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x246
2303	 245	JUMP		 	 
- stack 0: 0x5B4
2304	 246	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B4
2305	 247	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2306	 248	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x24600020260FFE800BF001700D9001302A200D401EE00000086000D00A00009
2307	 249	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x24600020260FFE800BF001700D9001302A200D401EE00000086000D00A00009
- stack 0: 0xE0
2308	 24B	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x2460002
2309	 24C	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x2460002
- stack 0: 0xFFFF
2310	 24F	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x2
2311	 250	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0x1
2312	 252	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x2
2313	 253	PUSH2	00A0	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0xA0
2314	 256	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B4
2315	 257	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2316	 259	ADD		 	 
- stack 0: 0x5B8
2317	 25A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2318	 25B	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x260FFE800BF001700D9001302A200D401EE00000086000D00A0000902E40000
2319	 25C	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x260FFE800BF001700D9001302A200D401EE00000086000D00A0000902E40000
- stack 0: 0xF0
2320	 25E	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x260
2321	 25F	JUMP		 	 
- stack 0: 0x5B8
2322	 260	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5B8
2323	 261	PUSH2	0080	 	 
- stack 1: 0x5B8
- stack 0: 0x80
2324	 264	MLOAD		 	  ;; # read from x4
- stack 1: 0x5B8
- stack 0: 0x2
2325	 265	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2326	 26A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B8
- stack 0: 0x2
2327	 26B	PUSH2	00A0	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0xA0
2328	 26E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0x2
2329	 26F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2330	 274	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0x2
2331	 275	SUB		 	 
- stack 1: 0x5B8
- stack 0: 0x0
2332	 276	PUSH2	027E	 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 2: 0x5B8
- stack 1: 0x0
- stack 0: 0x27E
2333	 279	JUMPI		 	 
- stack 0: 0x5B8
2334	 27A	PUSH2	0298	 ;; _neq_after_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 1: 0x5B8
- stack 0: 0x298
2335	 27D	JUMP		 	 
- stack 0: 0x5B8
2336	 298	JUMPDEST		 ;; _neq_after_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 0: 0x5B8
2337	 299	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2338	 29B	ADD		 	 
- stack 0: 0x5BC
2339	 29C	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2340	 29D	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xBF001700D9001302A200D401EE00000086000D00A0000902E4000002E40000
2341	 29E	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0xBF001700D9001302A200D401EE00000086000D00A0000902E4000002E40000
- stack 0: 0xF0
2342	 2A0	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xBF
2343	 2A1	JUMP		 	 
- stack 0: 0x5BC
2344	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x5BC
2345	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2346	 C1	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xBF001700D9001302A200D401EE00000086000D00A0000902E4000002E40000
2347	 C2	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0xBF001700D9001302A200D401EE00000086000D00A0000902E4000002E40000
- stack 0: 0xE0
2348	 C4	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xBF0017
2349	 C5	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0xBF0017
- stack 0: 0xFFFF
2350	 C8	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x17
2351	 C9	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x17
- stack 0: 0x1
2352	 CB	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x17
2353	 CC	PUSH2	03A0	 	 
- stack 2: 0x5BC
- stack 1: 0x17
- stack 0: 0x3A0
2354	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x5BC
2355	 D0	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2356	 D2	ADD		 	 
- stack 0: 0x5C0
2357	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2358	 D4	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xD9001302A200D401EE00000086000D00A0000902E4000002E4000002080000
2359	 D5	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0xD9001302A200D401EE00000086000D00A0000902E4000002E4000002080000
- stack 0: 0xF0
2360	 D7	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xD9
2361	 D8	JUMP		 	 
- stack 0: 0x5C0
2362	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5C0
2363	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2364	 DB	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xD9001302A200D401EE00000086000D00A0000902E4000002E4000002080000
2365	 DC	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0xD9001302A200D401EE00000086000D00A0000902E4000002E4000002080000
- stack 0: 0xE0
2366	 DE	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xD90013
2367	 DF	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0xD90013
- stack 0: 0xFFFF
2368	 E2	AND		 	 
- stack 1: 0x5C0
- stack 0: 0x13
2369	 E3	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0x13
- stack 0: 0x1
2370	 E5	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0x13
2371	 E6	PUSH2	0380	 	 
- stack 2: 0x5C0
- stack 1: 0x13
- stack 0: 0x380
2372	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x5C0
2373	 EA	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2374	 EC	ADD		 	 
- stack 0: 0x5C4
2375	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2376	 EE	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x2A200D401EE00000086000D00A0000902E4000002E400000208000002270001
2377	 EF	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x2A200D401EE00000086000D00A0000902E4000002E400000208000002270001
- stack 0: 0xF0
2378	 F1	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x2A2
2379	 F2	JUMP		 	 
- stack 0: 0x5C4
2380	 2A2	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,100(ignore imm)
- stack 0: 0x5C4
2381	 2A3	PUSH2	00C0	 	 
- stack 1: 0x5C4
- stack 0: 0xC0
2382	 2A6	MLOAD		 	  ;; # read from x6
- stack 1: 0x5C4
- stack 0: 0x17
2383	 2A7	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x17
- stack 0: 0xFFFFFFFF
2384	 2AC	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C4
- stack 0: 0x17
2385	 2AD	PUSH2	03A0	 	 
- stack 2: 0x5C4
- stack 1: 0x17
- stack 0: 0x3A0
2386	 2B0	MLOAD		 	  ;; # read from x29
- stack 2: 0x5C4
- stack 1: 0x17
- stack 0: 0x17
2387	 2B1	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5C4
- stack 2: 0x17
- stack 1: 0x17
- stack 0: 0xFFFFFFFF
2388	 2B6	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5C4
- stack 1: 0x17
- stack 0: 0x17
2389	 2B7	SUB		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2390	 2B8	PUSH2	02C0	 ;; _neq_fee63d395bca5cbed282f1814546141fe82cc6477944e258a9a78549b8d23b85	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x2C0
2391	 2BB	JUMPI		 	 
- stack 0: 0x5C4
2392	 2BC	PUSH2	02DA	 ;; _neq_after_fee63d395bca5cbed282f1814546141fe82cc6477944e258a9a78549b8d23b85	 
- stack 1: 0x5C4
- stack 0: 0x2DA
2393	 2BF	JUMP		 	 
- stack 0: 0x5C4
2394	 2DA	JUMPDEST		 ;; _neq_after_fee63d395bca5cbed282f1814546141fe82cc6477944e258a9a78549b8d23b85	 
- stack 0: 0x5C4
2395	 2DB	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2396	 2DD	ADD		 	 
- stack 0: 0x5C8
2397	 2DE	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2398	 2DF	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x1EE00000086000D00A0000902E4000002E40000020800000227000102460002
2399	 2E0	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x1EE00000086000D00A0000902E4000002E40000020800000227000102460002
- stack 0: 0xF0
2400	 2E2	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x1EE
2401	 2E3	JUMP		 	 
- stack 0: 0x5C8
2402	 1EE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5C8
2403	 1EF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2404	 1F0	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x1EE00000086000D00A0000902E4000002E40000020800000227000102460002
2405	 1F1	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x1EE00000086000D00A0000902E4000002E40000020800000227000102460002
- stack 0: 0xE0
2406	 1F3	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x1EE0000
2407	 1F4	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x1EE0000
- stack 0: 0xFFFF
2408	 1F7	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
2409	 1F8	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x1
2410	 1FA	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
2411	 1FB	PUSH2	0080	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x80
2412	 1FE	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C8
2413	 1FF	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2414	 201	ADD		 	 
- stack 0: 0x5CC
2415	 202	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2416	 203	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x86000D00A0000902E4000002E400000208000002270001024600020260FFE4
2417	 204	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x86000D00A0000902E4000002E400000208000002270001024600020260FFE4
- stack 0: 0xF0
2418	 206	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x86
2419	 207	JUMP		 	 
- stack 0: 0x5CC
2420	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5CC
2421	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2422	 88	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x86000D00A0000902E4000002E400000208000002270001024600020260FFE4
2423	 89	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x86000D00A0000902E4000002E400000208000002270001024600020260FFE4
- stack 0: 0xE0
2424	 8B	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x86000D
2425	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x86000D
- stack 0: 0xFFFF
2426	 8F	AND		 	 
- stack 1: 0x5CC
- stack 0: 0xD
2427	 90	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0xD
- stack 0: 0x1
2428	 92	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xD
2429	 93	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0xD
- stack 0: 0x20
2430	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5CC
2431	 97	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2432	 99	ADD		 	 
- stack 0: 0x5D0
2433	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2434	 9B	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xA0000902E4000002E400000208000002270001024600020260FFE400BF0016
2435	 9C	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xA0000902E4000002E400000208000002270001024600020260FFE400BF0016
- stack 0: 0xF0
2436	 9E	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xA0
2437	 9F	JUMP		 	 
- stack 0: 0x5D0
2438	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x5D0
2439	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2440	 A2	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xA0000902E4000002E400000208000002270001024600020260FFE400BF0016
2441	 A3	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0xA0000902E4000002E400000208000002270001024600020260FFE400BF0016
- stack 0: 0xE0
2442	 A5	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xA00009
2443	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0xA00009
- stack 0: 0xFFFF
2444	 A9	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x9
2445	 AA	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x9
- stack 0: 0x1
2446	 AC	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x9
2447	 AD	PUSH2	0020	 	 
- stack 2: 0x5D0
- stack 1: 0x9
- stack 0: 0x20
2448	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x5D0
- stack 1: 0x9
- stack 0: 0xD
2449	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x5D0
- stack 0: 0x16
2450	 B2	PUSH2	0060	 	 
- stack 2: 0x5D0
- stack 1: 0x16
- stack 0: 0x60
2451	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x5D0
2452	 B6	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2453	 B8	ADD		 	 
- stack 0: 0x5D4
2454	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2455	 BA	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x2E4000002E400000208000002270001024600020260FFE400BF001600D90014
2456	 BB	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x2E4000002E400000208000002270001024600020260FFE400BF001600D90014
- stack 0: 0xF0
2457	 BD	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x2E4
2458	 BE	JUMP		 	 
- stack 0: 0x5D4
2459	 2E4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5D4
2460	 2E5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2461	 2E6	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x2E4000002E400000208000002270001024600020260FFE400BF001600D90014
2462	 2E7	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x2E4000002E400000208000002270001024600020260FFE400BF001600D90014
- stack 0: 0xE0
2463	 2E9	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x2E40000
2464	 2EA	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x2E40000
- stack 0: 0xFFFF
2465	 2ED	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2466	 2EE	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x1
2467	 2F0	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2468	 2F1	POP		 	 
- stack 0: 0x5D4
2469	 2F2	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2470	 2F4	ADD		 	 
- stack 0: 0x5D8
2471	 2F5	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2472	 2F6	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x2E400000208000002270001024600020260FFE400BF001600D9001402A200A4
2473	 2F7	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x2E400000208000002270001024600020260FFE400BF001600D9001402A200A4
- stack 0: 0xF0
2474	 2F9	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x2E4
2475	 2FA	JUMP		 	 
- stack 0: 0x5D8
2476	 2E4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5D8
2477	 2E5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2478	 2E6	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x2E400000208000002270001024600020260FFE400BF001600D9001402A200A4
2479	 2E7	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x2E400000208000002270001024600020260FFE400BF001600D9001402A200A4
- stack 0: 0xE0
2480	 2E9	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x2E40000
2481	 2EA	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x2E40000
- stack 0: 0xFFFF
2482	 2ED	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x0
2483	 2EE	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x0
- stack 0: 0x1
2484	 2F0	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x0
2485	 2F1	POP		 	 
- stack 0: 0x5D8
2486	 2F2	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2487	 2F4	ADD		 	 
- stack 0: 0x5DC
2488	 2F5	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2489	 2F6	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x208000002270001024600020260FFE400BF001600D9001402A200A401EE0000
2490	 2F7	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x208000002270001024600020260FFE400BF001600D9001402A200A401EE0000
- stack 0: 0xF0
2491	 2F9	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x208
2492	 2FA	JUMP		 	 
- stack 0: 0x5DC
2493	 208	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5DC
2494	 209	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2495	 20A	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x208000002270001024600020260FFE400BF001600D9001402A200A401EE0000
2496	 20B	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x208000002270001024600020260FFE400BF001600D9001402A200A401EE0000
- stack 0: 0xE0
2497	 20D	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x2080000
2498	 20E	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x2080000
- stack 0: 0xFFFF
2499	 211	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2500	 212	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x1
2501	 214	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2502	 215	PUSH2	0060	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x60
2503	 218	MLOAD		 	  ;; # read from x3
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x16
2504	 219	ADD		 	  ;; # ADDI 3
- stack 1: 0x5DC
- stack 0: 0x16
2505	 21A	PUSH2	00C0	 	 
- stack 2: 0x5DC
- stack 1: 0x16
- stack 0: 0xC0
2506	 21D	MSTORE		 	  ;; # store to x6
- stack 0: 0x5DC
2507	 21E	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2508	 220	ADD		 	 
- stack 0: 0x5E0
2509	 221	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2510	 222	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x2270001024600020260FFE400BF001600D9001402A200A401EE00000086000D
2511	 223	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x2270001024600020260FFE400BF001600D9001402A200A401EE00000086000D
- stack 0: 0xF0
2512	 225	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x227
2513	 226	JUMP		 	 
- stack 0: 0x5E0
2514	 227	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5E0
2515	 228	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2516	 229	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x2270001024600020260FFE400BF001600D9001402A200A401EE00000086000D
2517	 22A	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x2270001024600020260FFE400BF001600D9001402A200A401EE00000086000D
- stack 0: 0xE0
2518	 22C	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x2270001
2519	 22D	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x2270001
- stack 0: 0xFFFF
2520	 230	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
2521	 231	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1
2522	 233	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
2523	 234	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x80
2524	 237	MLOAD		 	  ;; # read from x4
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x0
2525	 238	ADD		 	  ;; # ADDI 4
- stack 1: 0x5E0
- stack 0: 0x1
2526	 239	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x80
2527	 23C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E0
2528	 23D	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2529	 23F	ADD		 	 
- stack 0: 0x5E4
2530	 240	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2531	 241	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x24600020260FFE400BF001600D9001402A200A401EE00000086000D00A0000B
2532	 242	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x24600020260FFE400BF001600D9001402A200A401EE00000086000D00A0000B
- stack 0: 0xF0
2533	 244	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x246
2534	 245	JUMP		 	 
- stack 0: 0x5E4
2535	 246	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5E4
2536	 247	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2537	 248	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x24600020260FFE400BF001600D9001402A200A401EE00000086000D00A0000B
2538	 249	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x24600020260FFE400BF001600D9001402A200A401EE00000086000D00A0000B
- stack 0: 0xE0
2539	 24B	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x2460002
2540	 24C	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x2460002
- stack 0: 0xFFFF
2541	 24F	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
2542	 250	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0x1
2543	 252	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
2544	 253	PUSH2	00A0	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0xA0
2545	 256	MSTORE		 	  ;; # store to x5
- stack 0: 0x5E4
2546	 257	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2547	 259	ADD		 	 
- stack 0: 0x5E8
2548	 25A	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2549	 25B	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x260FFE400BF001600D9001402A200A401EE00000086000D00A0000B02270001
2550	 25C	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x260FFE400BF001600D9001402A200A401EE00000086000D00A0000B02270001
- stack 0: 0xF0
2551	 25E	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x260
2552	 25F	JUMP		 	 
- stack 0: 0x5E8
2553	 260	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5E8
2554	 261	PUSH2	0080	 	 
- stack 1: 0x5E8
- stack 0: 0x80
2555	 264	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E8
- stack 0: 0x1
2556	 265	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2557	 26A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E8
- stack 0: 0x1
2558	 26B	PUSH2	00A0	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0xA0
2559	 26E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x2
2560	 26F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2561	 274	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x2
2562	 275	SUB		 	 
- stack 1: 0x5E8
- stack 0: 0x1
2563	 276	PUSH2	027E	 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x27E
2564	 279	JUMPI		 	 
- stack 0: 0x5E8
2565	 27E	JUMPDEST		 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 0: 0x5E8
2566	 27F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
2567	 280	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x260FFE400BF001600D9001402A200A401EE00000086000D00A0000B02270001
2568	 281	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x260FFE400BF001600D9001402A200A401EE00000086000D00A0000B02270001
- stack 0: 0xE0
2569	 283	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x260FFE4
2570	 284	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x260FFE4
- stack 0: 0xFFFF
2571	 287	AND		 	 
- stack 1: 0x5E8
- stack 0: 0xFFE4
2572	 288	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0xFFE4
- stack 0: 0x1
2573	 28A	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2574	 28B	ADD		 	 
- stack 0: 0x5CC
2575	 28C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5CC
- stack 0: 0xFFFFFFFF
2576	 291	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5CC
2577	 292	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2578	 293	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x86000D00A0000902E4000002E400000208000002270001024600020260FFE4
2579	 294	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x86000D00A0000902E4000002E400000208000002270001024600020260FFE4
- stack 0: 0xF0
2580	 296	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x86
2581	 297	JUMP		 	 
- stack 0: 0x5CC
2582	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5CC
2583	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2584	 88	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x86000D00A0000902E4000002E400000208000002270001024600020260FFE4
2585	 89	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x86000D00A0000902E4000002E400000208000002270001024600020260FFE4
- stack 0: 0xE0
2586	 8B	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x86000D
2587	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x86000D
- stack 0: 0xFFFF
2588	 8F	AND		 	 
- stack 1: 0x5CC
- stack 0: 0xD
2589	 90	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0xD
- stack 0: 0x1
2590	 92	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xD
2591	 93	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0xD
- stack 0: 0x20
2592	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5CC
2593	 97	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2594	 99	ADD		 	 
- stack 0: 0x5D0
2595	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2596	 9B	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xA0000902E4000002E400000208000002270001024600020260FFE400BF0016
2597	 9C	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xA0000902E4000002E400000208000002270001024600020260FFE400BF0016
- stack 0: 0xF0
2598	 9E	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xA0
2599	 9F	JUMP		 	 
- stack 0: 0x5D0
2600	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x5D0
2601	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2602	 A2	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xA0000902E4000002E400000208000002270001024600020260FFE400BF0016
2603	 A3	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0xA0000902E4000002E400000208000002270001024600020260FFE400BF0016
- stack 0: 0xE0
2604	 A5	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xA00009
2605	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0xA00009
- stack 0: 0xFFFF
2606	 A9	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x9
2607	 AA	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x9
- stack 0: 0x1
2608	 AC	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x9
2609	 AD	PUSH2	0020	 	 
- stack 2: 0x5D0
- stack 1: 0x9
- stack 0: 0x20
2610	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x5D0
- stack 1: 0x9
- stack 0: 0xD
2611	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x5D0
- stack 0: 0x16
2612	 B2	PUSH2	0060	 	 
- stack 2: 0x5D0
- stack 1: 0x16
- stack 0: 0x60
2613	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x5D0
2614	 B6	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2615	 B8	ADD		 	 
- stack 0: 0x5D4
2616	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2617	 BA	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x2E4000002E400000208000002270001024600020260FFE400BF001600D90014
2618	 BB	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x2E4000002E400000208000002270001024600020260FFE400BF001600D90014
- stack 0: 0xF0
2619	 BD	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x2E4
2620	 BE	JUMP		 	 
- stack 0: 0x5D4
2621	 2E4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5D4
2622	 2E5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2623	 2E6	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x2E4000002E400000208000002270001024600020260FFE400BF001600D90014
2624	 2E7	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x2E4000002E400000208000002270001024600020260FFE400BF001600D90014
- stack 0: 0xE0
2625	 2E9	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x2E40000
2626	 2EA	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x2E40000
- stack 0: 0xFFFF
2627	 2ED	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2628	 2EE	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x1
2629	 2F0	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2630	 2F1	POP		 	 
- stack 0: 0x5D4
2631	 2F2	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2632	 2F4	ADD		 	 
- stack 0: 0x5D8
2633	 2F5	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2634	 2F6	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x2E400000208000002270001024600020260FFE400BF001600D9001402A200A4
2635	 2F7	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x2E400000208000002270001024600020260FFE400BF001600D9001402A200A4
- stack 0: 0xF0
2636	 2F9	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x2E4
2637	 2FA	JUMP		 	 
- stack 0: 0x5D8
2638	 2E4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5D8
2639	 2E5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2640	 2E6	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x2E400000208000002270001024600020260FFE400BF001600D9001402A200A4
2641	 2E7	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x2E400000208000002270001024600020260FFE400BF001600D9001402A200A4
- stack 0: 0xE0
2642	 2E9	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x2E40000
2643	 2EA	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x2E40000
- stack 0: 0xFFFF
2644	 2ED	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x0
2645	 2EE	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x0
- stack 0: 0x1
2646	 2F0	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x0
2647	 2F1	POP		 	 
- stack 0: 0x5D8
2648	 2F2	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2649	 2F4	ADD		 	 
- stack 0: 0x5DC
2650	 2F5	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2651	 2F6	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x208000002270001024600020260FFE400BF001600D9001402A200A401EE0000
2652	 2F7	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x208000002270001024600020260FFE400BF001600D9001402A200A401EE0000
- stack 0: 0xF0
2653	 2F9	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x208
2654	 2FA	JUMP		 	 
- stack 0: 0x5DC
2655	 208	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5DC
2656	 209	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2657	 20A	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x208000002270001024600020260FFE400BF001600D9001402A200A401EE0000
2658	 20B	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x208000002270001024600020260FFE400BF001600D9001402A200A401EE0000
- stack 0: 0xE0
2659	 20D	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x2080000
2660	 20E	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x2080000
- stack 0: 0xFFFF
2661	 211	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2662	 212	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x1
2663	 214	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2664	 215	PUSH2	0060	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x60
2665	 218	MLOAD		 	  ;; # read from x3
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x16
2666	 219	ADD		 	  ;; # ADDI 3
- stack 1: 0x5DC
- stack 0: 0x16
2667	 21A	PUSH2	00C0	 	 
- stack 2: 0x5DC
- stack 1: 0x16
- stack 0: 0xC0
2668	 21D	MSTORE		 	  ;; # store to x6
- stack 0: 0x5DC
2669	 21E	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2670	 220	ADD		 	 
- stack 0: 0x5E0
2671	 221	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2672	 222	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x2270001024600020260FFE400BF001600D9001402A200A401EE00000086000D
2673	 223	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x2270001024600020260FFE400BF001600D9001402A200A401EE00000086000D
- stack 0: 0xF0
2674	 225	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x227
2675	 226	JUMP		 	 
- stack 0: 0x5E0
2676	 227	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5E0
2677	 228	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2678	 229	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x2270001024600020260FFE400BF001600D9001402A200A401EE00000086000D
2679	 22A	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x2270001024600020260FFE400BF001600D9001402A200A401EE00000086000D
- stack 0: 0xE0
2680	 22C	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x2270001
2681	 22D	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x2270001
- stack 0: 0xFFFF
2682	 230	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
2683	 231	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1
2684	 233	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
2685	 234	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x80
2686	 237	MLOAD		 	  ;; # read from x4
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1
2687	 238	ADD		 	  ;; # ADDI 4
- stack 1: 0x5E0
- stack 0: 0x2
2688	 239	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0x80
2689	 23C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E0
2690	 23D	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2691	 23F	ADD		 	 
- stack 0: 0x5E4
2692	 240	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2693	 241	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x24600020260FFE400BF001600D9001402A200A401EE00000086000D00A0000B
2694	 242	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x24600020260FFE400BF001600D9001402A200A401EE00000086000D00A0000B
- stack 0: 0xF0
2695	 244	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x246
2696	 245	JUMP		 	 
- stack 0: 0x5E4
2697	 246	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5E4
2698	 247	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2699	 248	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x24600020260FFE400BF001600D9001402A200A401EE00000086000D00A0000B
2700	 249	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x24600020260FFE400BF001600D9001402A200A401EE00000086000D00A0000B
- stack 0: 0xE0
2701	 24B	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x2460002
2702	 24C	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x2460002
- stack 0: 0xFFFF
2703	 24F	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
2704	 250	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0x1
2705	 252	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
2706	 253	PUSH2	00A0	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0xA0
2707	 256	MSTORE		 	  ;; # store to x5
- stack 0: 0x5E4
2708	 257	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2709	 259	ADD		 	 
- stack 0: 0x5E8
2710	 25A	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2711	 25B	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x260FFE400BF001600D9001402A200A401EE00000086000D00A0000B02270001
2712	 25C	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x260FFE400BF001600D9001402A200A401EE00000086000D00A0000B02270001
- stack 0: 0xF0
2713	 25E	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x260
2714	 25F	JUMP		 	 
- stack 0: 0x5E8
2715	 260	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5E8
2716	 261	PUSH2	0080	 	 
- stack 1: 0x5E8
- stack 0: 0x80
2717	 264	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E8
- stack 0: 0x2
2718	 265	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2719	 26A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E8
- stack 0: 0x2
2720	 26B	PUSH2	00A0	 	 
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0xA0
2721	 26E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0x2
2722	 26F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2723	 274	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0x2
2724	 275	SUB		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2725	 276	PUSH2	027E	 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x27E
2726	 279	JUMPI		 	 
- stack 0: 0x5E8
2727	 27A	PUSH2	0298	 ;; _neq_after_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 1: 0x5E8
- stack 0: 0x298
2728	 27D	JUMP		 	 
- stack 0: 0x5E8
2729	 298	JUMPDEST		 ;; _neq_after_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 0: 0x5E8
2730	 299	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2731	 29B	ADD		 	 
- stack 0: 0x5EC
2732	 29C	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2733	 29D	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xBF001600D9001402A200A401EE00000086000D00A0000B0227000102460002
2734	 29E	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0xBF001600D9001402A200A401EE00000086000D00A0000B0227000102460002
- stack 0: 0xF0
2735	 2A0	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xBF
2736	 2A1	JUMP		 	 
- stack 0: 0x5EC
2737	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x5EC
2738	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2739	 C1	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xBF001600D9001402A200A401EE00000086000D00A0000B0227000102460002
2740	 C2	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0xBF001600D9001402A200A401EE00000086000D00A0000B0227000102460002
- stack 0: 0xE0
2741	 C4	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xBF0016
2742	 C5	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0xBF0016
- stack 0: 0xFFFF
2743	 C8	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x16
2744	 C9	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x16
- stack 0: 0x1
2745	 CB	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x16
2746	 CC	PUSH2	03A0	 	 
- stack 2: 0x5EC
- stack 1: 0x16
- stack 0: 0x3A0
2747	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x5EC
2748	 D0	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2749	 D2	ADD		 	 
- stack 0: 0x5F0
2750	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2751	 D4	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xD9001402A200A401EE00000086000D00A0000B02270001024600020260FFF0
2752	 D5	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0xD9001402A200A401EE00000086000D00A0000B02270001024600020260FFF0
- stack 0: 0xF0
2753	 D7	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xD9
2754	 D8	JUMP		 	 
- stack 0: 0x5F0
2755	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5F0
2756	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2757	 DB	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xD9001402A200A401EE00000086000D00A0000B02270001024600020260FFF0
2758	 DC	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0xD9001402A200A401EE00000086000D00A0000B02270001024600020260FFF0
- stack 0: 0xE0
2759	 DE	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xD90014
2760	 DF	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0xD90014
- stack 0: 0xFFFF
2761	 E2	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x14
2762	 E3	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x14
- stack 0: 0x1
2763	 E5	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x14
2764	 E6	PUSH2	0380	 	 
- stack 2: 0x5F0
- stack 1: 0x14
- stack 0: 0x380
2765	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x5F0
2766	 EA	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2767	 EC	ADD		 	 
- stack 0: 0x5F4
2768	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2769	 EE	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x2A200A401EE00000086000D00A0000B02270001024600020260FFF000BF0018
2770	 EF	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x2A200A401EE00000086000D00A0000B02270001024600020260FFF000BF0018
- stack 0: 0xF0
2771	 F1	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x2A2
2772	 F2	JUMP		 	 
- stack 0: 0x5F4
2773	 2A2	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,100(ignore imm)
- stack 0: 0x5F4
2774	 2A3	PUSH2	00C0	 	 
- stack 1: 0x5F4
- stack 0: 0xC0
2775	 2A6	MLOAD		 	  ;; # read from x6
- stack 1: 0x5F4
- stack 0: 0x16
2776	 2A7	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x16
- stack 0: 0xFFFFFFFF
2777	 2AC	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x16
2778	 2AD	PUSH2	03A0	 	 
- stack 2: 0x5F4
- stack 1: 0x16
- stack 0: 0x3A0
2779	 2B0	MLOAD		 	  ;; # read from x29
- stack 2: 0x5F4
- stack 1: 0x16
- stack 0: 0x16
2780	 2B1	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x16
- stack 1: 0x16
- stack 0: 0xFFFFFFFF
2781	 2B6	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F4
- stack 1: 0x16
- stack 0: 0x16
2782	 2B7	SUB		 	 
- stack 1: 0x5F4
- stack 0: 0x0
2783	 2B8	PUSH2	02C0	 ;; _neq_fee63d395bca5cbed282f1814546141fe82cc6477944e258a9a78549b8d23b85	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x2C0
2784	 2BB	JUMPI		 	 
- stack 0: 0x5F4
2785	 2BC	PUSH2	02DA	 ;; _neq_after_fee63d395bca5cbed282f1814546141fe82cc6477944e258a9a78549b8d23b85	 
- stack 1: 0x5F4
- stack 0: 0x2DA
2786	 2BF	JUMP		 	 
- stack 0: 0x5F4
2787	 2DA	JUMPDEST		 ;; _neq_after_fee63d395bca5cbed282f1814546141fe82cc6477944e258a9a78549b8d23b85	 
- stack 0: 0x5F4
2788	 2DB	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2789	 2DD	ADD		 	 
- stack 0: 0x5F8
2790	 2DE	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2791	 2DF	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1EE00000086000D00A0000B02270001024600020260FFF000BF001800D90015
2792	 2E0	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x1EE00000086000D00A0000B02270001024600020260FFF000BF001800D90015
- stack 0: 0xF0
2793	 2E2	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1EE
2794	 2E3	JUMP		 	 
- stack 0: 0x5F8
2795	 1EE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5F8
2796	 1EF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
2797	 1F0	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1EE00000086000D00A0000B02270001024600020260FFF000BF001800D90015
2798	 1F1	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x1EE00000086000D00A0000B02270001024600020260FFF000BF001800D90015
- stack 0: 0xE0
2799	 1F3	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1EE0000
2800	 1F4	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x1EE0000
- stack 0: 0xFFFF
2801	 1F7	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x0
2802	 1F8	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0x1
2803	 1FA	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x0
2804	 1FB	PUSH2	0080	 	 
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0x80
2805	 1FE	MSTORE		 	  ;; # store to x4
- stack 0: 0x5F8
2806	 1FF	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2807	 201	ADD		 	 
- stack 0: 0x5FC
2808	 202	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2809	 203	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x86000D00A0000B02270001024600020260FFF000BF001800D9001500F30080
2810	 204	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x86000D00A0000B02270001024600020260FFF000BF001800D9001500F30080
- stack 0: 0xF0
2811	 206	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x86
2812	 207	JUMP		 	 
- stack 0: 0x5FC
2813	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5FC
2814	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2815	 88	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x86000D00A0000B02270001024600020260FFF000BF001800D9001500F30080
2816	 89	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x86000D00A0000B02270001024600020260FFF000BF001800D9001500F30080
- stack 0: 0xE0
2817	 8B	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x86000D
2818	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x86000D
- stack 0: 0xFFFF
2819	 8F	AND		 	 
- stack 1: 0x5FC
- stack 0: 0xD
2820	 90	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0xD
- stack 0: 0x1
2821	 92	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0xD
2822	 93	PUSH2	0020	 	 
- stack 2: 0x5FC
- stack 1: 0xD
- stack 0: 0x20
2823	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5FC
2824	 97	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2825	 99	ADD		 	 
- stack 0: 0x600
2826	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2827	 9B	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xA0000B02270001024600020260FFF000BF001800D9001500F3008001EE0000
2828	 9C	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xA0000B02270001024600020260FFF000BF001800D9001500F3008001EE0000
- stack 0: 0xF0
2829	 9E	SHR		 	 
- stack 1: 0x600
- stack 0: 0xA0
2830	 9F	JUMP		 	 
- stack 0: 0x600
2831	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x600
2832	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2833	 A2	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xA0000B02270001024600020260FFF000BF001800D9001500F3008001EE0000
2834	 A3	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0xA0000B02270001024600020260FFF000BF001800D9001500F3008001EE0000
- stack 0: 0xE0
2835	 A5	SHR		 	 
- stack 1: 0x600
- stack 0: 0xA0000B
2836	 A6	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0xA0000B
- stack 0: 0xFFFF
2837	 A9	AND		 	 
- stack 1: 0x600
- stack 0: 0xB
2838	 AA	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0xB
- stack 0: 0x1
2839	 AC	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0xB
2840	 AD	PUSH2	0020	 	 
- stack 2: 0x600
- stack 1: 0xB
- stack 0: 0x20
2841	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x600
- stack 1: 0xB
- stack 0: 0xD
2842	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x600
- stack 0: 0x18
2843	 B2	PUSH2	0060	 	 
- stack 2: 0x600
- stack 1: 0x18
- stack 0: 0x60
2844	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x600
2845	 B6	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2846	 B8	ADD		 	 
- stack 0: 0x604
2847	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2848	 BA	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x2270001024600020260FFF000BF001800D9001500F3008001EE00000086000D
2849	 BB	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x2270001024600020260FFF000BF001800D9001500F3008001EE00000086000D
- stack 0: 0xF0
2850	 BD	SHR		 	 
- stack 1: 0x604
- stack 0: 0x227
2851	 BE	JUMP		 	 
- stack 0: 0x604
2852	 227	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x604
2853	 228	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
2854	 229	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x2270001024600020260FFF000BF001800D9001500F3008001EE00000086000D
2855	 22A	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x2270001024600020260FFF000BF001800D9001500F3008001EE00000086000D
- stack 0: 0xE0
2856	 22C	SHR		 	 
- stack 1: 0x604
- stack 0: 0x2270001
2857	 22D	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x2270001
- stack 0: 0xFFFF
2858	 230	AND		 	 
- stack 1: 0x604
- stack 0: 0x1
2859	 231	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x1
2860	 233	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x1
2861	 234	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x80
2862	 237	MLOAD		 	  ;; # read from x4
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x0
2863	 238	ADD		 	  ;; # ADDI 4
- stack 1: 0x604
- stack 0: 0x1
2864	 239	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x80
2865	 23C	MSTORE		 	  ;; # store to x4
- stack 0: 0x604
2866	 23D	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2867	 23F	ADD		 	 
- stack 0: 0x608
2868	 240	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2869	 241	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x24600020260FFF000BF001800D9001500F3008001EE00000086000D02E40000
2870	 242	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x24600020260FFF000BF001800D9001500F3008001EE00000086000D02E40000
- stack 0: 0xF0
2871	 244	SHR		 	 
- stack 1: 0x608
- stack 0: 0x246
2872	 245	JUMP		 	 
- stack 0: 0x608
2873	 246	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x608
2874	 247	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2875	 248	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x24600020260FFF000BF001800D9001500F3008001EE00000086000D02E40000
2876	 249	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x24600020260FFF000BF001800D9001500F3008001EE00000086000D02E40000
- stack 0: 0xE0
2877	 24B	SHR		 	 
- stack 1: 0x608
- stack 0: 0x2460002
2878	 24C	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x2460002
- stack 0: 0xFFFF
2879	 24F	AND		 	 
- stack 1: 0x608
- stack 0: 0x2
2880	 250	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x1
2881	 252	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x2
2882	 253	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xA0
2883	 256	MSTORE		 	  ;; # store to x5
- stack 0: 0x608
2884	 257	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2885	 259	ADD		 	 
- stack 0: 0x60C
2886	 25A	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2887	 25B	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x260FFF000BF001800D9001500F3008001EE00000086000D02E4000000A0000A
2888	 25C	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x260FFF000BF001800D9001500F3008001EE00000086000D02E4000000A0000A
- stack 0: 0xF0
2889	 25E	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x260
2890	 25F	JUMP		 	 
- stack 0: 0x60C
2891	 260	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x60C
2892	 261	PUSH2	0080	 	 
- stack 1: 0x60C
- stack 0: 0x80
2893	 264	MLOAD		 	  ;; # read from x4
- stack 1: 0x60C
- stack 0: 0x1
2894	 265	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2895	 26A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x1
2896	 26B	PUSH2	00A0	 	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0xA0
2897	 26E	MLOAD		 	  ;; # read from x5
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x2
2898	 26F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x60C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2899	 274	AND		 	  ;; # mask to 32 bits
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x2
2900	 275	SUB		 	 
- stack 1: 0x60C
- stack 0: 0x1
2901	 276	PUSH2	027E	 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x27E
2902	 279	JUMPI		 	 
- stack 0: 0x60C
2903	 27E	JUMPDEST		 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 0: 0x60C
2904	 27F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
2905	 280	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x260FFF000BF001800D9001500F3008001EE00000086000D02E4000000A0000A
2906	 281	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x260FFF000BF001800D9001500F3008001EE00000086000D02E4000000A0000A
- stack 0: 0xE0
2907	 283	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x260FFF0
2908	 284	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x260FFF0
- stack 0: 0xFFFF
2909	 287	AND		 	 
- stack 1: 0x60C
- stack 0: 0xFFF0
2910	 288	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0xFFF0
- stack 0: 0x1
2911	 28A	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2912	 28B	ADD		 	 
- stack 0: 0x5FC
2913	 28C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5FC
- stack 0: 0xFFFFFFFF
2914	 291	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5FC
2915	 292	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2916	 293	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x86000D00A0000B02270001024600020260FFF000BF001800D9001500F30080
2917	 294	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x86000D00A0000B02270001024600020260FFF000BF001800D9001500F30080
- stack 0: 0xF0
2918	 296	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x86
2919	 297	JUMP		 	 
- stack 0: 0x5FC
2920	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5FC
2921	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2922	 88	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x86000D00A0000B02270001024600020260FFF000BF001800D9001500F30080
2923	 89	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x86000D00A0000B02270001024600020260FFF000BF001800D9001500F30080
- stack 0: 0xE0
2924	 8B	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x86000D
2925	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x86000D
- stack 0: 0xFFFF
2926	 8F	AND		 	 
- stack 1: 0x5FC
- stack 0: 0xD
2927	 90	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0xD
- stack 0: 0x1
2928	 92	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0xD
2929	 93	PUSH2	0020	 	 
- stack 2: 0x5FC
- stack 1: 0xD
- stack 0: 0x20
2930	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5FC
2931	 97	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2932	 99	ADD		 	 
- stack 0: 0x600
2933	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2934	 9B	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xA0000B02270001024600020260FFF000BF001800D9001500F3008001EE0000
2935	 9C	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xA0000B02270001024600020260FFF000BF001800D9001500F3008001EE0000
- stack 0: 0xF0
2936	 9E	SHR		 	 
- stack 1: 0x600
- stack 0: 0xA0
2937	 9F	JUMP		 	 
- stack 0: 0x600
2938	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x600
2939	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2940	 A2	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xA0000B02270001024600020260FFF000BF001800D9001500F3008001EE0000
2941	 A3	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0xA0000B02270001024600020260FFF000BF001800D9001500F3008001EE0000
- stack 0: 0xE0
2942	 A5	SHR		 	 
- stack 1: 0x600
- stack 0: 0xA0000B
2943	 A6	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0xA0000B
- stack 0: 0xFFFF
2944	 A9	AND		 	 
- stack 1: 0x600
- stack 0: 0xB
2945	 AA	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0xB
- stack 0: 0x1
2946	 AC	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0xB
2947	 AD	PUSH2	0020	 	 
- stack 2: 0x600
- stack 1: 0xB
- stack 0: 0x20
2948	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x600
- stack 1: 0xB
- stack 0: 0xD
2949	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x600
- stack 0: 0x18
2950	 B2	PUSH2	0060	 	 
- stack 2: 0x600
- stack 1: 0x18
- stack 0: 0x60
2951	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x600
2952	 B6	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2953	 B8	ADD		 	 
- stack 0: 0x604
2954	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2955	 BA	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x2270001024600020260FFF000BF001800D9001500F3008001EE00000086000D
2956	 BB	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x2270001024600020260FFF000BF001800D9001500F3008001EE00000086000D
- stack 0: 0xF0
2957	 BD	SHR		 	 
- stack 1: 0x604
- stack 0: 0x227
2958	 BE	JUMP		 	 
- stack 0: 0x604
2959	 227	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x604
2960	 228	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
2961	 229	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x2270001024600020260FFF000BF001800D9001500F3008001EE00000086000D
2962	 22A	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x2270001024600020260FFF000BF001800D9001500F3008001EE00000086000D
- stack 0: 0xE0
2963	 22C	SHR		 	 
- stack 1: 0x604
- stack 0: 0x2270001
2964	 22D	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x2270001
- stack 0: 0xFFFF
2965	 230	AND		 	 
- stack 1: 0x604
- stack 0: 0x1
2966	 231	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x1
2967	 233	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x1
2968	 234	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x80
2969	 237	MLOAD		 	  ;; # read from x4
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x1
2970	 238	ADD		 	  ;; # ADDI 4
- stack 1: 0x604
- stack 0: 0x2
2971	 239	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x80
2972	 23C	MSTORE		 	  ;; # store to x4
- stack 0: 0x604
2973	 23D	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2974	 23F	ADD		 	 
- stack 0: 0x608
2975	 240	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2976	 241	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x24600020260FFF000BF001800D9001500F3008001EE00000086000D02E40000
2977	 242	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x24600020260FFF000BF001800D9001500F3008001EE00000086000D02E40000
- stack 0: 0xF0
2978	 244	SHR		 	 
- stack 1: 0x608
- stack 0: 0x246
2979	 245	JUMP		 	 
- stack 0: 0x608
2980	 246	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x608
2981	 247	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2982	 248	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x24600020260FFF000BF001800D9001500F3008001EE00000086000D02E40000
2983	 249	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x24600020260FFF000BF001800D9001500F3008001EE00000086000D02E40000
- stack 0: 0xE0
2984	 24B	SHR		 	 
- stack 1: 0x608
- stack 0: 0x2460002
2985	 24C	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x2460002
- stack 0: 0xFFFF
2986	 24F	AND		 	 
- stack 1: 0x608
- stack 0: 0x2
2987	 250	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x1
2988	 252	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x2
2989	 253	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xA0
2990	 256	MSTORE		 	  ;; # store to x5
- stack 0: 0x608
2991	 257	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2992	 259	ADD		 	 
- stack 0: 0x60C
2993	 25A	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2994	 25B	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x260FFF000BF001800D9001500F3008001EE00000086000D02E4000000A0000A
2995	 25C	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x260FFF000BF001800D9001500F3008001EE00000086000D02E4000000A0000A
- stack 0: 0xF0
2996	 25E	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x260
2997	 25F	JUMP		 	 
- stack 0: 0x60C
2998	 260	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x60C
2999	 261	PUSH2	0080	 	 
- stack 1: 0x60C
- stack 0: 0x80
3000	 264	MLOAD		 	  ;; # read from x4
- stack 1: 0x60C
- stack 0: 0x2
3001	 265	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3002	 26A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x2
3003	 26B	PUSH2	00A0	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0xA0
3004	 26E	MLOAD		 	  ;; # read from x5
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0x2
3005	 26F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x60C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3006	 274	AND		 	  ;; # mask to 32 bits
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0x2
3007	 275	SUB		 	 
- stack 1: 0x60C
- stack 0: 0x0
3008	 276	PUSH2	027E	 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x27E
3009	 279	JUMPI		 	 
- stack 0: 0x60C
3010	 27A	PUSH2	0298	 ;; _neq_after_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 1: 0x60C
- stack 0: 0x298
3011	 27D	JUMP		 	 
- stack 0: 0x60C
3012	 298	JUMPDEST		 ;; _neq_after_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 0: 0x60C
3013	 299	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3014	 29B	ADD		 	 
- stack 0: 0x610
3015	 29C	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3016	 29D	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xBF001800D9001500F3008001EE00000086000D02E4000000A0000A02270001
3017	 29E	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0xBF001800D9001500F3008001EE00000086000D02E4000000A0000A02270001
- stack 0: 0xF0
3018	 2A0	SHR		 	 
- stack 1: 0x610
- stack 0: 0xBF
3019	 2A1	JUMP		 	 
- stack 0: 0x610
3020	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x610
3021	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3022	 C1	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xBF001800D9001500F3008001EE00000086000D02E4000000A0000A02270001
3023	 C2	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0xBF001800D9001500F3008001EE00000086000D02E4000000A0000A02270001
- stack 0: 0xE0
3024	 C4	SHR		 	 
- stack 1: 0x610
- stack 0: 0xBF0018
3025	 C5	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0xBF0018
- stack 0: 0xFFFF
3026	 C8	AND		 	 
- stack 1: 0x610
- stack 0: 0x18
3027	 C9	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x18
- stack 0: 0x1
3028	 CB	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x18
3029	 CC	PUSH2	03A0	 	 
- stack 2: 0x610
- stack 1: 0x18
- stack 0: 0x3A0
3030	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x610
3031	 D0	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3032	 D2	ADD		 	 
- stack 0: 0x614
3033	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3034	 D4	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0xD9001500F3008001EE00000086000D02E4000000A0000A0227000102460002
3035	 D5	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0xD9001500F3008001EE00000086000D02E4000000A0000A0227000102460002
- stack 0: 0xF0
3036	 D7	SHR		 	 
- stack 1: 0x614
- stack 0: 0xD9
3037	 D8	JUMP		 	 
- stack 0: 0x614
3038	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x614
3039	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3040	 DB	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0xD9001500F3008001EE00000086000D02E4000000A0000A0227000102460002
3041	 DC	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0xD9001500F3008001EE00000086000D02E4000000A0000A0227000102460002
- stack 0: 0xE0
3042	 DE	SHR		 	 
- stack 1: 0x614
- stack 0: 0xD90015
3043	 DF	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0xD90015
- stack 0: 0xFFFF
3044	 E2	AND		 	 
- stack 1: 0x614
- stack 0: 0x15
3045	 E3	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x15
- stack 0: 0x1
3046	 E5	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x15
3047	 E6	PUSH2	0380	 	 
- stack 2: 0x614
- stack 1: 0x15
- stack 0: 0x380
3048	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x614
3049	 EA	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3050	 EC	ADD		 	 
- stack 0: 0x618
3051	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3052	 EE	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0xF3008001EE00000086000D02E4000000A0000A02270001024600020260FFEC
3053	 EF	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0xF3008001EE00000086000D02E4000000A0000A02270001024600020260FFEC
- stack 0: 0xF0
3054	 F1	SHR		 	 
- stack 1: 0x618
- stack 0: 0xF3
3055	 F2	JUMP		 	 
- stack 0: 0x618
3056	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x618
3057	 F4	PUSH2	0060	 	 
- stack 1: 0x618
- stack 0: 0x60
3058	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x618
- stack 0: 0x18
3059	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x618
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
3060	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x618
- stack 0: 0x18
3061	 FE	PUSH2	03A0	 	 
- stack 2: 0x618
- stack 1: 0x18
- stack 0: 0x3A0
3062	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x618
- stack 1: 0x18
- stack 0: 0x18
3063	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x618
- stack 2: 0x18
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
3064	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x618
- stack 1: 0x18
- stack 0: 0x18
3065	 108	SUB		 	 
- stack 1: 0x618
- stack 0: 0x0
3066	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x111
3067	 10C	JUMPI		 	 
- stack 0: 0x618
3068	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x618
- stack 0: 0x12B
3069	 110	JUMP		 	 
- stack 0: 0x618
3070	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x618
3071	 12C	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3072	 12E	ADD		 	 
- stack 0: 0x61C
3073	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3074	 130	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x1EE00000086000D02E4000000A0000A02270001024600020260FFEC00BF0017
3075	 131	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x1EE00000086000D02E4000000A0000A02270001024600020260FFEC00BF0017
- stack 0: 0xF0
3076	 133	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x1EE
3077	 134	JUMP		 	 
- stack 0: 0x61C
3078	 1EE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x61C
3079	 1EF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3080	 1F0	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x1EE00000086000D02E4000000A0000A02270001024600020260FFEC00BF0017
3081	 1F1	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x1EE00000086000D02E4000000A0000A02270001024600020260FFEC00BF0017
- stack 0: 0xE0
3082	 1F3	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x1EE0000
3083	 1F4	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x1EE0000
- stack 0: 0xFFFF
3084	 1F7	AND		 	 
- stack 1: 0x61C
- stack 0: 0x0
3085	 1F8	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0x1
3086	 1FA	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x0
3087	 1FB	PUSH2	0080	 	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0x80
3088	 1FE	MSTORE		 	  ;; # store to x4
- stack 0: 0x61C
3089	 1FF	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3090	 201	ADD		 	 
- stack 0: 0x620
3091	 202	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3092	 203	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x86000D02E4000000A0000A02270001024600020260FFEC00BF001700D90016
3093	 204	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x86000D02E4000000A0000A02270001024600020260FFEC00BF001700D90016
- stack 0: 0xF0
3094	 206	SHR		 	 
- stack 1: 0x620
- stack 0: 0x86
3095	 207	JUMP		 	 
- stack 0: 0x620
3096	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x620
3097	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3098	 88	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x86000D02E4000000A0000A02270001024600020260FFEC00BF001700D90016
3099	 89	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x86000D02E4000000A0000A02270001024600020260FFEC00BF001700D90016
- stack 0: 0xE0
3100	 8B	SHR		 	 
- stack 1: 0x620
- stack 0: 0x86000D
3101	 8C	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x86000D
- stack 0: 0xFFFF
3102	 8F	AND		 	 
- stack 1: 0x620
- stack 0: 0xD
3103	 90	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0xD
- stack 0: 0x1
3104	 92	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0xD
3105	 93	PUSH2	0020	 	 
- stack 2: 0x620
- stack 1: 0xD
- stack 0: 0x20
3106	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x620
3107	 97	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3108	 99	ADD		 	 
- stack 0: 0x624
3109	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3110	 9B	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x2E4000000A0000A02270001024600020260FFEC00BF001700D9001600F30058
3111	 9C	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x2E4000000A0000A02270001024600020260FFEC00BF001700D9001600F30058
- stack 0: 0xF0
3112	 9E	SHR		 	 
- stack 1: 0x624
- stack 0: 0x2E4
3113	 9F	JUMP		 	 
- stack 0: 0x624
3114	 2E4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x624
3115	 2E5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3116	 2E6	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x2E4000000A0000A02270001024600020260FFEC00BF001700D9001600F30058
3117	 2E7	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x2E4000000A0000A02270001024600020260FFEC00BF001700D9001600F30058
- stack 0: 0xE0
3118	 2E9	SHR		 	 
- stack 1: 0x624
- stack 0: 0x2E40000
3119	 2EA	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x2E40000
- stack 0: 0xFFFF
3120	 2ED	AND		 	 
- stack 1: 0x624
- stack 0: 0x0
3121	 2EE	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x1
3122	 2F0	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x0
3123	 2F1	POP		 	 
- stack 0: 0x624
3124	 2F2	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3125	 2F4	ADD		 	 
- stack 0: 0x628
3126	 2F5	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3127	 2F6	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xA0000A02270001024600020260FFEC00BF001700D9001600F3005801EE0000
3128	 2F7	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0xA0000A02270001024600020260FFEC00BF001700D9001600F3005801EE0000
- stack 0: 0xF0
3129	 2F9	SHR		 	 
- stack 1: 0x628
- stack 0: 0xA0
3130	 2FA	JUMP		 	 
- stack 0: 0x628
3131	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x628
3132	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3133	 A2	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xA0000A02270001024600020260FFEC00BF001700D9001600F3005801EE0000
3134	 A3	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0xA0000A02270001024600020260FFEC00BF001700D9001600F3005801EE0000
- stack 0: 0xE0
3135	 A5	SHR		 	 
- stack 1: 0x628
- stack 0: 0xA0000A
3136	 A6	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0xA0000A
- stack 0: 0xFFFF
3137	 A9	AND		 	 
- stack 1: 0x628
- stack 0: 0xA
3138	 AA	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0xA
- stack 0: 0x1
3139	 AC	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xA
3140	 AD	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xA
- stack 0: 0x20
3141	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x628
- stack 1: 0xA
- stack 0: 0xD
3142	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x628
- stack 0: 0x17
3143	 B2	PUSH2	0060	 	 
- stack 2: 0x628
- stack 1: 0x17
- stack 0: 0x60
3144	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x628
3145	 B6	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3146	 B8	ADD		 	 
- stack 0: 0x62C
3147	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3148	 BA	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x2270001024600020260FFEC00BF001700D9001600F3005801EE00000086000D
3149	 BB	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x2270001024600020260FFEC00BF001700D9001600F3005801EE00000086000D
- stack 0: 0xF0
3150	 BD	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x227
3151	 BE	JUMP		 	 
- stack 0: 0x62C
3152	 227	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x62C
3153	 228	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3154	 229	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x2270001024600020260FFEC00BF001700D9001600F3005801EE00000086000D
3155	 22A	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x2270001024600020260FFEC00BF001700D9001600F3005801EE00000086000D
- stack 0: 0xE0
3156	 22C	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x2270001
3157	 22D	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x2270001
- stack 0: 0xFFFF
3158	 230	AND		 	 
- stack 1: 0x62C
- stack 0: 0x1
3159	 231	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x1
- stack 0: 0x1
3160	 233	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x1
3161	 234	PUSH2	0080	 	 
- stack 2: 0x62C
- stack 1: 0x1
- stack 0: 0x80
3162	 237	MLOAD		 	  ;; # read from x4
- stack 2: 0x62C
- stack 1: 0x1
- stack 0: 0x0
3163	 238	ADD		 	  ;; # ADDI 4
- stack 1: 0x62C
- stack 0: 0x1
3164	 239	PUSH2	0080	 	 
- stack 2: 0x62C
- stack 1: 0x1
- stack 0: 0x80
3165	 23C	MSTORE		 	  ;; # store to x4
- stack 0: 0x62C
3166	 23D	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3167	 23F	ADD		 	 
- stack 0: 0x630
3168	 240	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3169	 241	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x24600020260FFEC00BF001700D9001600F3005801EE00000086000D02E40000
3170	 242	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x24600020260FFEC00BF001700D9001600F3005801EE00000086000D02E40000
- stack 0: 0xF0
3171	 244	SHR		 	 
- stack 1: 0x630
- stack 0: 0x246
3172	 245	JUMP		 	 
- stack 0: 0x630
3173	 246	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x630
3174	 247	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3175	 248	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x24600020260FFEC00BF001700D9001600F3005801EE00000086000D02E40000
3176	 249	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x24600020260FFEC00BF001700D9001600F3005801EE00000086000D02E40000
- stack 0: 0xE0
3177	 24B	SHR		 	 
- stack 1: 0x630
- stack 0: 0x2460002
3178	 24C	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x2460002
- stack 0: 0xFFFF
3179	 24F	AND		 	 
- stack 1: 0x630
- stack 0: 0x2
3180	 250	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0x1
3181	 252	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x2
3182	 253	PUSH2	00A0	 	 
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0xA0
3183	 256	MSTORE		 	  ;; # store to x5
- stack 0: 0x630
3184	 257	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3185	 259	ADD		 	 
- stack 0: 0x634
3186	 25A	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3187	 25B	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x260FFEC00BF001700D9001600F3005801EE00000086000D02E4000002E40000
3188	 25C	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x260FFEC00BF001700D9001600F3005801EE00000086000D02E4000002E40000
- stack 0: 0xF0
3189	 25E	SHR		 	 
- stack 1: 0x634
- stack 0: 0x260
3190	 25F	JUMP		 	 
- stack 0: 0x634
3191	 260	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x634
3192	 261	PUSH2	0080	 	 
- stack 1: 0x634
- stack 0: 0x80
3193	 264	MLOAD		 	  ;; # read from x4
- stack 1: 0x634
- stack 0: 0x1
3194	 265	PUSH4	FFFFFFFF	 	 
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3195	 26A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x634
- stack 0: 0x1
3196	 26B	PUSH2	00A0	 	 
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0xA0
3197	 26E	MLOAD		 	  ;; # read from x5
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x2
3198	 26F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x634
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3199	 274	AND		 	  ;; # mask to 32 bits
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x2
3200	 275	SUB		 	 
- stack 1: 0x634
- stack 0: 0x1
3201	 276	PUSH2	027E	 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x27E
3202	 279	JUMPI		 	 
- stack 0: 0x634
3203	 27E	JUMPDEST		 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 0: 0x634
3204	 27F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3205	 280	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x260FFEC00BF001700D9001600F3005801EE00000086000D02E4000002E40000
3206	 281	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x260FFEC00BF001700D9001600F3005801EE00000086000D02E4000002E40000
- stack 0: 0xE0
3207	 283	SHR		 	 
- stack 1: 0x634
- stack 0: 0x260FFEC
3208	 284	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x260FFEC
- stack 0: 0xFFFF
3209	 287	AND		 	 
- stack 1: 0x634
- stack 0: 0xFFEC
3210	 288	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0xFFEC
- stack 0: 0x1
3211	 28A	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
3212	 28B	ADD		 	 
- stack 0: 0x620
3213	 28C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x620
- stack 0: 0xFFFFFFFF
3214	 291	AND		 	  ;; # mask to 32 bits
- stack 0: 0x620
3215	 292	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3216	 293	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x86000D02E4000000A0000A02270001024600020260FFEC00BF001700D90016
3217	 294	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x86000D02E4000000A0000A02270001024600020260FFEC00BF001700D90016
- stack 0: 0xF0
3218	 296	SHR		 	 
- stack 1: 0x620
- stack 0: 0x86
3219	 297	JUMP		 	 
- stack 0: 0x620
3220	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x620
3221	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3222	 88	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x86000D02E4000000A0000A02270001024600020260FFEC00BF001700D90016
3223	 89	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x86000D02E4000000A0000A02270001024600020260FFEC00BF001700D90016
- stack 0: 0xE0
3224	 8B	SHR		 	 
- stack 1: 0x620
- stack 0: 0x86000D
3225	 8C	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x86000D
- stack 0: 0xFFFF
3226	 8F	AND		 	 
- stack 1: 0x620
- stack 0: 0xD
3227	 90	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0xD
- stack 0: 0x1
3228	 92	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0xD
3229	 93	PUSH2	0020	 	 
- stack 2: 0x620
- stack 1: 0xD
- stack 0: 0x20
3230	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x620
3231	 97	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3232	 99	ADD		 	 
- stack 0: 0x624
3233	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3234	 9B	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x2E4000000A0000A02270001024600020260FFEC00BF001700D9001600F30058
3235	 9C	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x2E4000000A0000A02270001024600020260FFEC00BF001700D9001600F30058
- stack 0: 0xF0
3236	 9E	SHR		 	 
- stack 1: 0x624
- stack 0: 0x2E4
3237	 9F	JUMP		 	 
- stack 0: 0x624
3238	 2E4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x624
3239	 2E5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3240	 2E6	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x2E4000000A0000A02270001024600020260FFEC00BF001700D9001600F30058
3241	 2E7	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x2E4000000A0000A02270001024600020260FFEC00BF001700D9001600F30058
- stack 0: 0xE0
3242	 2E9	SHR		 	 
- stack 1: 0x624
- stack 0: 0x2E40000
3243	 2EA	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x2E40000
- stack 0: 0xFFFF
3244	 2ED	AND		 	 
- stack 1: 0x624
- stack 0: 0x0
3245	 2EE	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x1
3246	 2F0	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x0
3247	 2F1	POP		 	 
- stack 0: 0x624
3248	 2F2	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3249	 2F4	ADD		 	 
- stack 0: 0x628
3250	 2F5	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3251	 2F6	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xA0000A02270001024600020260FFEC00BF001700D9001600F3005801EE0000
3252	 2F7	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0xA0000A02270001024600020260FFEC00BF001700D9001600F3005801EE0000
- stack 0: 0xF0
3253	 2F9	SHR		 	 
- stack 1: 0x628
- stack 0: 0xA0
3254	 2FA	JUMP		 	 
- stack 0: 0x628
3255	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x628
3256	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3257	 A2	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xA0000A02270001024600020260FFEC00BF001700D9001600F3005801EE0000
3258	 A3	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0xA0000A02270001024600020260FFEC00BF001700D9001600F3005801EE0000
- stack 0: 0xE0
3259	 A5	SHR		 	 
- stack 1: 0x628
- stack 0: 0xA0000A
3260	 A6	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0xA0000A
- stack 0: 0xFFFF
3261	 A9	AND		 	 
- stack 1: 0x628
- stack 0: 0xA
3262	 AA	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0xA
- stack 0: 0x1
3263	 AC	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xA
3264	 AD	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xA
- stack 0: 0x20
3265	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x628
- stack 1: 0xA
- stack 0: 0xD
3266	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x628
- stack 0: 0x17
3267	 B2	PUSH2	0060	 	 
- stack 2: 0x628
- stack 1: 0x17
- stack 0: 0x60
3268	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x628
3269	 B6	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3270	 B8	ADD		 	 
- stack 0: 0x62C
3271	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3272	 BA	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x2270001024600020260FFEC00BF001700D9001600F3005801EE00000086000D
3273	 BB	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x2270001024600020260FFEC00BF001700D9001600F3005801EE00000086000D
- stack 0: 0xF0
3274	 BD	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x227
3275	 BE	JUMP		 	 
- stack 0: 0x62C
3276	 227	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x62C
3277	 228	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3278	 229	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x2270001024600020260FFEC00BF001700D9001600F3005801EE00000086000D
3279	 22A	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x2270001024600020260FFEC00BF001700D9001600F3005801EE00000086000D
- stack 0: 0xE0
3280	 22C	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x2270001
3281	 22D	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x2270001
- stack 0: 0xFFFF
3282	 230	AND		 	 
- stack 1: 0x62C
- stack 0: 0x1
3283	 231	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x1
- stack 0: 0x1
3284	 233	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x1
3285	 234	PUSH2	0080	 	 
- stack 2: 0x62C
- stack 1: 0x1
- stack 0: 0x80
3286	 237	MLOAD		 	  ;; # read from x4
- stack 2: 0x62C
- stack 1: 0x1
- stack 0: 0x1
3287	 238	ADD		 	  ;; # ADDI 4
- stack 1: 0x62C
- stack 0: 0x2
3288	 239	PUSH2	0080	 	 
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0x80
3289	 23C	MSTORE		 	  ;; # store to x4
- stack 0: 0x62C
3290	 23D	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3291	 23F	ADD		 	 
- stack 0: 0x630
3292	 240	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3293	 241	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x24600020260FFEC00BF001700D9001600F3005801EE00000086000D02E40000
3294	 242	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x24600020260FFEC00BF001700D9001600F3005801EE00000086000D02E40000
- stack 0: 0xF0
3295	 244	SHR		 	 
- stack 1: 0x630
- stack 0: 0x246
3296	 245	JUMP		 	 
- stack 0: 0x630
3297	 246	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x630
3298	 247	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3299	 248	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x24600020260FFEC00BF001700D9001600F3005801EE00000086000D02E40000
3300	 249	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x24600020260FFEC00BF001700D9001600F3005801EE00000086000D02E40000
- stack 0: 0xE0
3301	 24B	SHR		 	 
- stack 1: 0x630
- stack 0: 0x2460002
3302	 24C	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x2460002
- stack 0: 0xFFFF
3303	 24F	AND		 	 
- stack 1: 0x630
- stack 0: 0x2
3304	 250	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0x1
3305	 252	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x2
3306	 253	PUSH2	00A0	 	 
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0xA0
3307	 256	MSTORE		 	  ;; # store to x5
- stack 0: 0x630
3308	 257	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3309	 259	ADD		 	 
- stack 0: 0x634
3310	 25A	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3311	 25B	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x260FFEC00BF001700D9001600F3005801EE00000086000D02E4000002E40000
3312	 25C	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x260FFEC00BF001700D9001600F3005801EE00000086000D02E4000002E40000
- stack 0: 0xF0
3313	 25E	SHR		 	 
- stack 1: 0x634
- stack 0: 0x260
3314	 25F	JUMP		 	 
- stack 0: 0x634
3315	 260	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x634
3316	 261	PUSH2	0080	 	 
- stack 1: 0x634
- stack 0: 0x80
3317	 264	MLOAD		 	  ;; # read from x4
- stack 1: 0x634
- stack 0: 0x2
3318	 265	PUSH4	FFFFFFFF	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3319	 26A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x634
- stack 0: 0x2
3320	 26B	PUSH2	00A0	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0xA0
3321	 26E	MLOAD		 	  ;; # read from x5
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x2
3322	 26F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x634
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3323	 274	AND		 	  ;; # mask to 32 bits
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x2
3324	 275	SUB		 	 
- stack 1: 0x634
- stack 0: 0x0
3325	 276	PUSH2	027E	 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x27E
3326	 279	JUMPI		 	 
- stack 0: 0x634
3327	 27A	PUSH2	0298	 ;; _neq_after_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 1: 0x634
- stack 0: 0x298
3328	 27D	JUMP		 	 
- stack 0: 0x634
3329	 298	JUMPDEST		 ;; _neq_after_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 0: 0x634
3330	 299	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3331	 29B	ADD		 	 
- stack 0: 0x638
3332	 29C	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3333	 29D	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xBF001700D9001600F3005801EE00000086000D02E4000002E4000000A00009
3334	 29E	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0xBF001700D9001600F3005801EE00000086000D02E4000002E4000000A00009
- stack 0: 0xF0
3335	 2A0	SHR		 	 
- stack 1: 0x638
- stack 0: 0xBF
3336	 2A1	JUMP		 	 
- stack 0: 0x638
3337	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x638
3338	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3339	 C1	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xBF001700D9001600F3005801EE00000086000D02E4000002E4000000A00009
3340	 C2	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0xBF001700D9001600F3005801EE00000086000D02E4000002E4000000A00009
- stack 0: 0xE0
3341	 C4	SHR		 	 
- stack 1: 0x638
- stack 0: 0xBF0017
3342	 C5	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0xBF0017
- stack 0: 0xFFFF
3343	 C8	AND		 	 
- stack 1: 0x638
- stack 0: 0x17
3344	 C9	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x17
- stack 0: 0x1
3345	 CB	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x17
3346	 CC	PUSH2	03A0	 	 
- stack 2: 0x638
- stack 1: 0x17
- stack 0: 0x3A0
3347	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x638
3348	 D0	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3349	 D2	ADD		 	 
- stack 0: 0x63C
3350	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3351	 D4	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xD9001600F3005801EE00000086000D02E4000002E4000000A0000902270001
3352	 D5	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xD9001600F3005801EE00000086000D02E4000002E4000000A0000902270001
- stack 0: 0xF0
3353	 D7	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xD9
3354	 D8	JUMP		 	 
- stack 0: 0x63C
3355	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x63C
3356	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3357	 DB	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xD9001600F3005801EE00000086000D02E4000002E4000000A0000902270001
3358	 DC	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0xD9001600F3005801EE00000086000D02E4000002E4000000A0000902270001
- stack 0: 0xE0
3359	 DE	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xD90016
3360	 DF	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0xD90016
- stack 0: 0xFFFF
3361	 E2	AND		 	 
- stack 1: 0x63C
- stack 0: 0x16
3362	 E3	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x16
- stack 0: 0x1
3363	 E5	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x16
3364	 E6	PUSH2	0380	 	 
- stack 2: 0x63C
- stack 1: 0x16
- stack 0: 0x380
3365	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x63C
3366	 EA	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3367	 EC	ADD		 	 
- stack 0: 0x640
3368	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3369	 EE	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xF3005801EE00000086000D02E4000002E4000000A000090227000102460002
3370	 EF	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0xF3005801EE00000086000D02E4000002E4000000A000090227000102460002
- stack 0: 0xF0
3371	 F1	SHR		 	 
- stack 1: 0x640
- stack 0: 0xF3
3372	 F2	JUMP		 	 
- stack 0: 0x640
3373	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x640
3374	 F4	PUSH2	0060	 	 
- stack 1: 0x640
- stack 0: 0x60
3375	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x640
- stack 0: 0x17
3376	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x640
- stack 1: 0x17
- stack 0: 0xFFFFFFFF
3377	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x640
- stack 0: 0x17
3378	 FE	PUSH2	03A0	 	 
- stack 2: 0x640
- stack 1: 0x17
- stack 0: 0x3A0
3379	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x640
- stack 1: 0x17
- stack 0: 0x17
3380	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x640
- stack 2: 0x17
- stack 1: 0x17
- stack 0: 0xFFFFFFFF
3381	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x640
- stack 1: 0x17
- stack 0: 0x17
3382	 108	SUB		 	 
- stack 1: 0x640
- stack 0: 0x0
3383	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x111
3384	 10C	JUMPI		 	 
- stack 0: 0x640
3385	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x640
- stack 0: 0x12B
3386	 110	JUMP		 	 
- stack 0: 0x640
3387	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x640
3388	 12C	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3389	 12E	ADD		 	 
- stack 0: 0x644
3390	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3391	 130	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x1EE00000086000D02E4000002E4000000A0000902270001024600020260FFE8
3392	 131	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x1EE00000086000D02E4000002E4000000A0000902270001024600020260FFE8
- stack 0: 0xF0
3393	 133	SHR		 	 
- stack 1: 0x644
- stack 0: 0x1EE
3394	 134	JUMP		 	 
- stack 0: 0x644
3395	 1EE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x644
3396	 1EF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3397	 1F0	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x1EE00000086000D02E4000002E4000000A0000902270001024600020260FFE8
3398	 1F1	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x1EE00000086000D02E4000002E4000000A0000902270001024600020260FFE8
- stack 0: 0xE0
3399	 1F3	SHR		 	 
- stack 1: 0x644
- stack 0: 0x1EE0000
3400	 1F4	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x1EE0000
- stack 0: 0xFFFF
3401	 1F7	AND		 	 
- stack 1: 0x644
- stack 0: 0x0
3402	 1F8	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x1
3403	 1FA	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x0
3404	 1FB	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x80
3405	 1FE	MSTORE		 	  ;; # store to x4
- stack 0: 0x644
3406	 1FF	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3407	 201	ADD		 	 
- stack 0: 0x648
3408	 202	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3409	 203	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x86000D02E4000002E4000000A0000902270001024600020260FFE800BF0016
3410	 204	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x86000D02E4000002E4000000A0000902270001024600020260FFE800BF0016
- stack 0: 0xF0
3411	 206	SHR		 	 
- stack 1: 0x648
- stack 0: 0x86
3412	 207	JUMP		 	 
- stack 0: 0x648
3413	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x648
3414	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3415	 88	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x86000D02E4000002E4000000A0000902270001024600020260FFE800BF0016
3416	 89	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x86000D02E4000002E4000000A0000902270001024600020260FFE800BF0016
- stack 0: 0xE0
3417	 8B	SHR		 	 
- stack 1: 0x648
- stack 0: 0x86000D
3418	 8C	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x86000D
- stack 0: 0xFFFF
3419	 8F	AND		 	 
- stack 1: 0x648
- stack 0: 0xD
3420	 90	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0xD
- stack 0: 0x1
3421	 92	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0xD
3422	 93	PUSH2	0020	 	 
- stack 2: 0x648
- stack 1: 0xD
- stack 0: 0x20
3423	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x648
3424	 97	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3425	 99	ADD		 	 
- stack 0: 0x64C
3426	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3427	 9B	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x2E4000002E4000000A0000902270001024600020260FFE800BF001600D90017
3428	 9C	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x2E4000002E4000000A0000902270001024600020260FFE800BF001600D90017
- stack 0: 0xF0
3429	 9E	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x2E4
3430	 9F	JUMP		 	 
- stack 0: 0x64C
3431	 2E4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x64C
3432	 2E5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3433	 2E6	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x2E4000002E4000000A0000902270001024600020260FFE800BF001600D90017
3434	 2E7	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x2E4000002E4000000A0000902270001024600020260FFE800BF001600D90017
- stack 0: 0xE0
3435	 2E9	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x2E40000
3436	 2EA	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x2E40000
- stack 0: 0xFFFF
3437	 2ED	AND		 	 
- stack 1: 0x64C
- stack 0: 0x0
3438	 2EE	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x1
3439	 2F0	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x0
3440	 2F1	POP		 	 
- stack 0: 0x64C
3441	 2F2	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3442	 2F4	ADD		 	 
- stack 0: 0x650
3443	 2F5	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3444	 2F6	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x2E4000000A0000902270001024600020260FFE800BF001600D9001700F3002C
3445	 2F7	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x2E4000000A0000902270001024600020260FFE800BF001600D9001700F3002C
- stack 0: 0xF0
3446	 2F9	SHR		 	 
- stack 1: 0x650
- stack 0: 0x2E4
3447	 2FA	JUMP		 	 
- stack 0: 0x650
3448	 2E4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x650
3449	 2E5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3450	 2E6	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x2E4000000A0000902270001024600020260FFE800BF001600D9001700F3002C
3451	 2E7	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x2E4000000A0000902270001024600020260FFE800BF001600D9001700F3002C
- stack 0: 0xE0
3452	 2E9	SHR		 	 
- stack 1: 0x650
- stack 0: 0x2E40000
3453	 2EA	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x2E40000
- stack 0: 0xFFFF
3454	 2ED	AND		 	 
- stack 1: 0x650
- stack 0: 0x0
3455	 2EE	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0x1
3456	 2F0	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x0
3457	 2F1	POP		 	 
- stack 0: 0x650
3458	 2F2	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3459	 2F4	ADD		 	 
- stack 0: 0x654
3460	 2F5	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3461	 2F6	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0xA0000902270001024600020260FFE800BF001600D9001700F3002C00860020
3462	 2F7	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0xA0000902270001024600020260FFE800BF001600D9001700F3002C00860020
- stack 0: 0xF0
3463	 2F9	SHR		 	 
- stack 1: 0x654
- stack 0: 0xA0
3464	 2FA	JUMP		 	 
- stack 0: 0x654
3465	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x654
3466	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3467	 A2	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0xA0000902270001024600020260FFE800BF001600D9001700F3002C00860020
3468	 A3	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0xA0000902270001024600020260FFE800BF001600D9001700F3002C00860020
- stack 0: 0xE0
3469	 A5	SHR		 	 
- stack 1: 0x654
- stack 0: 0xA00009
3470	 A6	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0xA00009
- stack 0: 0xFFFF
3471	 A9	AND		 	 
- stack 1: 0x654
- stack 0: 0x9
3472	 AA	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x9
- stack 0: 0x1
3473	 AC	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x9
3474	 AD	PUSH2	0020	 	 
- stack 2: 0x654
- stack 1: 0x9
- stack 0: 0x20
3475	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x654
- stack 1: 0x9
- stack 0: 0xD
3476	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x654
- stack 0: 0x16
3477	 B2	PUSH2	0060	 	 
- stack 2: 0x654
- stack 1: 0x16
- stack 0: 0x60
3478	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x654
3479	 B6	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3480	 B8	ADD		 	 
- stack 0: 0x658
3481	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3482	 BA	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2270001024600020260FFE800BF001600D9001700F3002C0086002000BF0020
3483	 BB	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x2270001024600020260FFE800BF001600D9001700F3002C0086002000BF0020
- stack 0: 0xF0
3484	 BD	SHR		 	 
- stack 1: 0x658
- stack 0: 0x227
3485	 BE	JUMP		 	 
- stack 0: 0x658
3486	 227	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x658
3487	 228	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3488	 229	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2270001024600020260FFE800BF001600D9001700F3002C0086002000BF0020
3489	 22A	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x2270001024600020260FFE800BF001600D9001700F3002C0086002000BF0020
- stack 0: 0xE0
3490	 22C	SHR		 	 
- stack 1: 0x658
- stack 0: 0x2270001
3491	 22D	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x2270001
- stack 0: 0xFFFF
3492	 230	AND		 	 
- stack 1: 0x658
- stack 0: 0x1
3493	 231	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x1
3494	 233	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x1
3495	 234	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x80
3496	 237	MLOAD		 	  ;; # read from x4
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x0
3497	 238	ADD		 	  ;; # ADDI 4
- stack 1: 0x658
- stack 0: 0x1
3498	 239	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x80
3499	 23C	MSTORE		 	  ;; # store to x4
- stack 0: 0x658
3500	 23D	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3501	 23F	ADD		 	 
- stack 0: 0x65C
3502	 240	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3503	 241	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x24600020260FFE800BF001600D9001700F3002C0086002000BF002000D90018
3504	 242	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x24600020260FFE800BF001600D9001700F3002C0086002000BF002000D90018
- stack 0: 0xF0
3505	 244	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x246
3506	 245	JUMP		 	 
- stack 0: 0x65C
3507	 246	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x65C
3508	 247	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3509	 248	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x24600020260FFE800BF001600D9001700F3002C0086002000BF002000D90018
3510	 249	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x24600020260FFE800BF001600D9001700F3002C0086002000BF002000D90018
- stack 0: 0xE0
3511	 24B	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x2460002
3512	 24C	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x2460002
- stack 0: 0xFFFF
3513	 24F	AND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3514	 250	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0x1
3515	 252	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3516	 253	PUSH2	00A0	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0xA0
3517	 256	MSTORE		 	  ;; # store to x5
- stack 0: 0x65C
3518	 257	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3519	 259	ADD		 	 
- stack 0: 0x660
3520	 25A	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3521	 25B	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x260FFE800BF001600D9001700F3002C0086002000BF002000D9001801AC001C
3522	 25C	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x260FFE800BF001600D9001700F3002C0086002000BF002000D9001801AC001C
- stack 0: 0xF0
3523	 25E	SHR		 	 
- stack 1: 0x660
- stack 0: 0x260
3524	 25F	JUMP		 	 
- stack 0: 0x660
3525	 260	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x660
3526	 261	PUSH2	0080	 	 
- stack 1: 0x660
- stack 0: 0x80
3527	 264	MLOAD		 	  ;; # read from x4
- stack 1: 0x660
- stack 0: 0x1
3528	 265	PUSH4	FFFFFFFF	 	 
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3529	 26A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x660
- stack 0: 0x1
3530	 26B	PUSH2	00A0	 	 
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0xA0
3531	 26E	MLOAD		 	  ;; # read from x5
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0x2
3532	 26F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x660
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3533	 274	AND		 	  ;; # mask to 32 bits
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0x2
3534	 275	SUB		 	 
- stack 1: 0x660
- stack 0: 0x1
3535	 276	PUSH2	027E	 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0x27E
3536	 279	JUMPI		 	 
- stack 0: 0x660
3537	 27E	JUMPDEST		 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 0: 0x660
3538	 27F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
3539	 280	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x260FFE800BF001600D9001700F3002C0086002000BF002000D9001801AC001C
3540	 281	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x260FFE800BF001600D9001700F3002C0086002000BF002000D9001801AC001C
- stack 0: 0xE0
3541	 283	SHR		 	 
- stack 1: 0x660
- stack 0: 0x260FFE8
3542	 284	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x260FFE8
- stack 0: 0xFFFF
3543	 287	AND		 	 
- stack 1: 0x660
- stack 0: 0xFFE8
3544	 288	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0xFFE8
- stack 0: 0x1
3545	 28A	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
3546	 28B	ADD		 	 
- stack 0: 0x648
3547	 28C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x648
- stack 0: 0xFFFFFFFF
3548	 291	AND		 	  ;; # mask to 32 bits
- stack 0: 0x648
3549	 292	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3550	 293	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x86000D02E4000002E4000000A0000902270001024600020260FFE800BF0016
3551	 294	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x86000D02E4000002E4000000A0000902270001024600020260FFE800BF0016
- stack 0: 0xF0
3552	 296	SHR		 	 
- stack 1: 0x648
- stack 0: 0x86
3553	 297	JUMP		 	 
- stack 0: 0x648
3554	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x648
3555	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3556	 88	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x86000D02E4000002E4000000A0000902270001024600020260FFE800BF0016
3557	 89	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x86000D02E4000002E4000000A0000902270001024600020260FFE800BF0016
- stack 0: 0xE0
3558	 8B	SHR		 	 
- stack 1: 0x648
- stack 0: 0x86000D
3559	 8C	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x86000D
- stack 0: 0xFFFF
3560	 8F	AND		 	 
- stack 1: 0x648
- stack 0: 0xD
3561	 90	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0xD
- stack 0: 0x1
3562	 92	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0xD
3563	 93	PUSH2	0020	 	 
- stack 2: 0x648
- stack 1: 0xD
- stack 0: 0x20
3564	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x648
3565	 97	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3566	 99	ADD		 	 
- stack 0: 0x64C
3567	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3568	 9B	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x2E4000002E4000000A0000902270001024600020260FFE800BF001600D90017
3569	 9C	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x2E4000002E4000000A0000902270001024600020260FFE800BF001600D90017
- stack 0: 0xF0
3570	 9E	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x2E4
3571	 9F	JUMP		 	 
- stack 0: 0x64C
3572	 2E4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x64C
3573	 2E5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3574	 2E6	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x2E4000002E4000000A0000902270001024600020260FFE800BF001600D90017
3575	 2E7	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x2E4000002E4000000A0000902270001024600020260FFE800BF001600D90017
- stack 0: 0xE0
3576	 2E9	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x2E40000
3577	 2EA	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x2E40000
- stack 0: 0xFFFF
3578	 2ED	AND		 	 
- stack 1: 0x64C
- stack 0: 0x0
3579	 2EE	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x1
3580	 2F0	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x0
3581	 2F1	POP		 	 
- stack 0: 0x64C
3582	 2F2	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3583	 2F4	ADD		 	 
- stack 0: 0x650
3584	 2F5	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3585	 2F6	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x2E4000000A0000902270001024600020260FFE800BF001600D9001700F3002C
3586	 2F7	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x2E4000000A0000902270001024600020260FFE800BF001600D9001700F3002C
- stack 0: 0xF0
3587	 2F9	SHR		 	 
- stack 1: 0x650
- stack 0: 0x2E4
3588	 2FA	JUMP		 	 
- stack 0: 0x650
3589	 2E4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x650
3590	 2E5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3591	 2E6	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x2E4000000A0000902270001024600020260FFE800BF001600D9001700F3002C
3592	 2E7	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x2E4000000A0000902270001024600020260FFE800BF001600D9001700F3002C
- stack 0: 0xE0
3593	 2E9	SHR		 	 
- stack 1: 0x650
- stack 0: 0x2E40000
3594	 2EA	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x2E40000
- stack 0: 0xFFFF
3595	 2ED	AND		 	 
- stack 1: 0x650
- stack 0: 0x0
3596	 2EE	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0x1
3597	 2F0	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x0
3598	 2F1	POP		 	 
- stack 0: 0x650
3599	 2F2	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3600	 2F4	ADD		 	 
- stack 0: 0x654
3601	 2F5	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3602	 2F6	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0xA0000902270001024600020260FFE800BF001600D9001700F3002C00860020
3603	 2F7	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0xA0000902270001024600020260FFE800BF001600D9001700F3002C00860020
- stack 0: 0xF0
3604	 2F9	SHR		 	 
- stack 1: 0x654
- stack 0: 0xA0
3605	 2FA	JUMP		 	 
- stack 0: 0x654
3606	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_3_1_0	  ;; # instr: addi gp,ra,0(ignore imm)
- stack 0: 0x654
3607	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3608	 A2	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0xA0000902270001024600020260FFE800BF001600D9001700F3002C00860020
3609	 A3	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0xA0000902270001024600020260FFE800BF001600D9001700F3002C00860020
- stack 0: 0xE0
3610	 A5	SHR		 	 
- stack 1: 0x654
- stack 0: 0xA00009
3611	 A6	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0xA00009
- stack 0: 0xFFFF
3612	 A9	AND		 	 
- stack 1: 0x654
- stack 0: 0x9
3613	 AA	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x9
- stack 0: 0x1
3614	 AC	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x9
3615	 AD	PUSH2	0020	 	 
- stack 2: 0x654
- stack 1: 0x9
- stack 0: 0x20
3616	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x654
- stack 1: 0x9
- stack 0: 0xD
3617	 B1	ADD		 	  ;; # ADDI 1
- stack 1: 0x654
- stack 0: 0x16
3618	 B2	PUSH2	0060	 	 
- stack 2: 0x654
- stack 1: 0x16
- stack 0: 0x60
3619	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x654
3620	 B6	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3621	 B8	ADD		 	 
- stack 0: 0x658
3622	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3623	 BA	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2270001024600020260FFE800BF001600D9001700F3002C0086002000BF0020
3624	 BB	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x2270001024600020260FFE800BF001600D9001700F3002C0086002000BF0020
- stack 0: 0xF0
3625	 BD	SHR		 	 
- stack 1: 0x658
- stack 0: 0x227
3626	 BE	JUMP		 	 
- stack 0: 0x658
3627	 227	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x658
3628	 228	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3629	 229	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2270001024600020260FFE800BF001600D9001700F3002C0086002000BF0020
3630	 22A	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x2270001024600020260FFE800BF001600D9001700F3002C0086002000BF0020
- stack 0: 0xE0
3631	 22C	SHR		 	 
- stack 1: 0x658
- stack 0: 0x2270001
3632	 22D	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x2270001
- stack 0: 0xFFFF
3633	 230	AND		 	 
- stack 1: 0x658
- stack 0: 0x1
3634	 231	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x1
3635	 233	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x1
3636	 234	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x80
3637	 237	MLOAD		 	  ;; # read from x4
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x1
3638	 238	ADD		 	  ;; # ADDI 4
- stack 1: 0x658
- stack 0: 0x2
3639	 239	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0x80
3640	 23C	MSTORE		 	  ;; # store to x4
- stack 0: 0x658
3641	 23D	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3642	 23F	ADD		 	 
- stack 0: 0x65C
3643	 240	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3644	 241	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x24600020260FFE800BF001600D9001700F3002C0086002000BF002000D90018
3645	 242	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x24600020260FFE800BF001600D9001700F3002C0086002000BF002000D90018
- stack 0: 0xF0
3646	 244	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x246
3647	 245	JUMP		 	 
- stack 0: 0x65C
3648	 246	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x65C
3649	 247	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3650	 248	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x24600020260FFE800BF001600D9001700F3002C0086002000BF002000D90018
3651	 249	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x24600020260FFE800BF001600D9001700F3002C0086002000BF002000D90018
- stack 0: 0xE0
3652	 24B	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x2460002
3653	 24C	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x2460002
- stack 0: 0xFFFF
3654	 24F	AND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3655	 250	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0x1
3656	 252	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3657	 253	PUSH2	00A0	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0xA0
3658	 256	MSTORE		 	  ;; # store to x5
- stack 0: 0x65C
3659	 257	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3660	 259	ADD		 	 
- stack 0: 0x660
3661	 25A	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3662	 25B	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x260FFE800BF001600D9001700F3002C0086002000BF002000D9001801AC001C
3663	 25C	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x260FFE800BF001600D9001700F3002C0086002000BF002000D9001801AC001C
- stack 0: 0xF0
3664	 25E	SHR		 	 
- stack 1: 0x660
- stack 0: 0x260
3665	 25F	JUMP		 	 
- stack 0: 0x660
3666	 260	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x660
3667	 261	PUSH2	0080	 	 
- stack 1: 0x660
- stack 0: 0x80
3668	 264	MLOAD		 	  ;; # read from x4
- stack 1: 0x660
- stack 0: 0x2
3669	 265	PUSH4	FFFFFFFF	 	 
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3670	 26A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x660
- stack 0: 0x2
3671	 26B	PUSH2	00A0	 	 
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0xA0
3672	 26E	MLOAD		 	  ;; # read from x5
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0x2
3673	 26F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x660
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3674	 274	AND		 	  ;; # mask to 32 bits
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0x2
3675	 275	SUB		 	 
- stack 1: 0x660
- stack 0: 0x0
3676	 276	PUSH2	027E	 ;; _neq_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x27E
3677	 279	JUMPI		 	 
- stack 0: 0x660
3678	 27A	PUSH2	0298	 ;; _neq_after_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 1: 0x660
- stack 0: 0x298
3679	 27D	JUMP		 	 
- stack 0: 0x660
3680	 298	JUMPDEST		 ;; _neq_after_275787b10ba30d5c6781226aa22918b53f8e5be06a956154c6dffc2b5d71f85a	 
- stack 0: 0x660
3681	 299	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3682	 29B	ADD		 	 
- stack 0: 0x664
3683	 29C	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3684	 29D	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xBF001600D9001700F3002C0086002000BF002000D9001801AC001C00860021
3685	 29E	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0xBF001600D9001700F3002C0086002000BF002000D9001801AC001C00860021
- stack 0: 0xF0
3686	 2A0	SHR		 	 
- stack 1: 0x664
- stack 0: 0xBF
3687	 2A1	JUMP		 	 
- stack 0: 0x664
3688	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x664
3689	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
3690	 C1	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xBF001600D9001700F3002C0086002000BF002000D9001801AC001C00860021
3691	 C2	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0xBF001600D9001700F3002C0086002000BF002000D9001801AC001C00860021
- stack 0: 0xE0
3692	 C4	SHR		 	 
- stack 1: 0x664
- stack 0: 0xBF0016
3693	 C5	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0xBF0016
- stack 0: 0xFFFF
3694	 C8	AND		 	 
- stack 1: 0x664
- stack 0: 0x16
3695	 C9	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x16
- stack 0: 0x1
3696	 CB	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x16
3697	 CC	PUSH2	03A0	 	 
- stack 2: 0x664
- stack 1: 0x16
- stack 0: 0x3A0
3698	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x664
3699	 D0	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3700	 D2	ADD		 	 
- stack 0: 0x668
3701	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3702	 D4	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0xD9001700F3002C0086002000BF002000D9001801AC001C0086002102FB0032
3703	 D5	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0xD9001700F3002C0086002000BF002000D9001801AC001C0086002102FB0032
- stack 0: 0xF0
3704	 D7	SHR		 	 
- stack 1: 0x668
- stack 0: 0xD9
3705	 D8	JUMP		 	 
- stack 0: 0x668
3706	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x668
3707	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
3708	 DB	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0xD9001700F3002C0086002000BF002000D9001801AC001C0086002102FB0032
3709	 DC	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0xD9001700F3002C0086002000BF002000D9001801AC001C0086002102FB0032
- stack 0: 0xE0
3710	 DE	SHR		 	 
- stack 1: 0x668
- stack 0: 0xD90017
3711	 DF	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0xD90017
- stack 0: 0xFFFF
3712	 E2	AND		 	 
- stack 1: 0x668
- stack 0: 0x17
3713	 E3	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0x17
- stack 0: 0x1
3714	 E5	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0x17
3715	 E6	PUSH2	0380	 	 
- stack 2: 0x668
- stack 1: 0x17
- stack 0: 0x380
3716	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x668
3717	 EA	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3718	 EC	ADD		 	 
- stack 0: 0x66C
3719	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3720	 EE	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xF3002C0086002000BF002000D9001801AC001C0086002102FB003200BF0000
3721	 EF	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xF3002C0086002000BF002000D9001801AC001C0086002102FB003200BF0000
- stack 0: 0xF0
3722	 F1	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xF3
3723	 F2	JUMP		 	 
- stack 0: 0x66C
3724	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,278(ignore imm)
- stack 0: 0x66C
3725	 F4	PUSH2	0060	 	 
- stack 1: 0x66C
- stack 0: 0x60
3726	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x66C
- stack 0: 0x16
3727	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x66C
- stack 1: 0x16
- stack 0: 0xFFFFFFFF
3728	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x66C
- stack 0: 0x16
3729	 FE	PUSH2	03A0	 	 
- stack 2: 0x66C
- stack 1: 0x16
- stack 0: 0x3A0
3730	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x66C
- stack 1: 0x16
- stack 0: 0x16
3731	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x66C
- stack 2: 0x16
- stack 1: 0x16
- stack 0: 0xFFFFFFFF
3732	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x66C
- stack 1: 0x16
- stack 0: 0x16
3733	 108	SUB		 	 
- stack 1: 0x66C
- stack 0: 0x0
3734	 109	PUSH2	0111	 ;; _neq_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x111
3735	 10C	JUMPI		 	 
- stack 0: 0x66C
3736	 10D	PUSH2	012B	 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 1: 0x66C
- stack 0: 0x12B
3737	 110	JUMP		 	 
- stack 0: 0x66C
3738	 12B	JUMPDEST		 ;; _neq_after_a03b1aca23aff4587748d83d336c3166ceed9f1be50e75bdf98f6910306d4a9f	 
- stack 0: 0x66C
3739	 12C	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3740	 12E	ADD		 	 
- stack 0: 0x670
3741	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3742	 130	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x86002000BF002000D9001801AC001C0086002102FB003200BF000000D90019
3743	 131	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x86002000BF002000D9001801AC001C0086002102FB003200BF000000D90019
- stack 0: 0xF0
3744	 133	SHR		 	 
- stack 1: 0x670
- stack 0: 0x86
3745	 134	JUMP		 	 
- stack 0: 0x670
3746	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x670
3747	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
3748	 88	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x86002000BF002000D9001801AC001C0086002102FB003200BF000000D90019
3749	 89	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x86002000BF002000D9001801AC001C0086002102FB003200BF000000D90019
- stack 0: 0xE0
3750	 8B	SHR		 	 
- stack 1: 0x670
- stack 0: 0x860020
3751	 8C	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x860020
- stack 0: 0xFFFF
3752	 8F	AND		 	 
- stack 1: 0x670
- stack 0: 0x20
3753	 90	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x20
- stack 0: 0x1
3754	 92	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x20
3755	 93	PUSH2	0020	 	 
- stack 2: 0x670
- stack 1: 0x20
- stack 0: 0x20
3756	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x670
3757	 97	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3758	 99	ADD		 	 
- stack 0: 0x674
3759	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3760	 9B	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xBF002000D9001801AC001C0086002102FB003200BF000000D9001903170008
3761	 9C	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0xBF002000D9001801AC001C0086002102FB003200BF000000D9001903170008
- stack 0: 0xF0
3762	 9E	SHR		 	 
- stack 1: 0x674
- stack 0: 0xBF
3763	 9F	JUMP		 	 
- stack 0: 0x674
3764	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x674
3765	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
3766	 C1	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xBF002000D9001801AC001C0086002102FB003200BF000000D9001903170008
3767	 C2	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0xBF002000D9001801AC001C0086002102FB003200BF000000D9001903170008
- stack 0: 0xE0
3768	 C4	SHR		 	 
- stack 1: 0x674
- stack 0: 0xBF0020
3769	 C5	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0xBF0020
- stack 0: 0xFFFF
3770	 C8	AND		 	 
- stack 1: 0x674
- stack 0: 0x20
3771	 C9	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x20
- stack 0: 0x1
3772	 CB	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x20
3773	 CC	PUSH2	03A0	 	 
- stack 2: 0x674
- stack 1: 0x20
- stack 0: 0x3A0
3774	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x674
3775	 D0	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3776	 D2	ADD		 	 
- stack 0: 0x678
3777	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3778	 D4	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0xD9001801AC001C0086002102FB003200BF000000D900190317000803570018
3779	 D5	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0xD9001801AC001C0086002102FB003200BF000000D900190317000803570018
- stack 0: 0xF0
3780	 D7	SHR		 	 
- stack 1: 0x678
- stack 0: 0xD9
3781	 D8	JUMP		 	 
- stack 0: 0x678
3782	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x678
3783	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
3784	 DB	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0xD9001801AC001C0086002102FB003200BF000000D900190317000803570018
3785	 DC	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0xD9001801AC001C0086002102FB003200BF000000D900190317000803570018
- stack 0: 0xE0
3786	 DE	SHR		 	 
- stack 1: 0x678
- stack 0: 0xD90018
3787	 DF	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0xD90018
- stack 0: 0xFFFF
3788	 E2	AND		 	 
- stack 1: 0x678
- stack 0: 0x18
3789	 E3	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x18
- stack 0: 0x1
3790	 E5	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x18
3791	 E6	PUSH2	0380	 	 
- stack 2: 0x678
- stack 1: 0x18
- stack 0: 0x380
3792	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x678
3793	 EA	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3794	 EC	ADD		 	 
- stack 0: 0x67C
3795	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3796	 EE	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x1AC001C0086002102FB003200BF000000D90019031700080357001800210000
3797	 EF	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x1AC001C0086002102FB003200BF000000D90019031700080357001800210000
- stack 0: 0xF0
3798	 F1	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x1AC
3799	 F2	JUMP		 	 
- stack 0: 0x67C
3800	 1AC	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,128(ignore imm)
- stack 0: 0x67C
3801	 1AD	PUSH2	0020	 	 
- stack 1: 0x67C
- stack 0: 0x20
3802	 1B0	MLOAD		 	  ;; # read from x1
- stack 1: 0x67C
- stack 0: 0x20
3803	 1B1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x67C
- stack 1: 0x20
- stack 0: 0xFFFFFFFF
3804	 1B6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x67C
- stack 0: 0x20
3805	 1B7	PUSH2	03A0	 	 
- stack 2: 0x67C
- stack 1: 0x20
- stack 0: 0x3A0
3806	 1BA	MLOAD		 	  ;; # read from x29
- stack 2: 0x67C
- stack 1: 0x20
- stack 0: 0x20
3807	 1BB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x67C
- stack 2: 0x20
- stack 1: 0x20
- stack 0: 0xFFFFFFFF
3808	 1C0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x67C
- stack 1: 0x20
- stack 0: 0x20
3809	 1C1	SUB		 	 
- stack 1: 0x67C
- stack 0: 0x0
3810	 1C2	PUSH2	01CA	 ;; _neq_a76a7de132fe127f526779f9773b3dc2f7c2e72a528981afeb301b37a36ab06f	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x1CA
3811	 1C5	JUMPI		 	 
- stack 0: 0x67C
3812	 1C6	PUSH2	01E4	 ;; _neq_after_a76a7de132fe127f526779f9773b3dc2f7c2e72a528981afeb301b37a36ab06f	 
- stack 1: 0x67C
- stack 0: 0x1E4
3813	 1C9	JUMP		 	 
- stack 0: 0x67C
3814	 1E4	JUMPDEST		 ;; _neq_after_a76a7de132fe127f526779f9773b3dc2f7c2e72a528981afeb301b37a36ab06f	 
- stack 0: 0x67C
3815	 1E5	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3816	 1E7	ADD		 	 
- stack 0: 0x680
3817	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3818	 1E9	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x86002102FB003200BF000000D90019031700080357001800210000003406D8
3819	 1EA	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x86002102FB003200BF000000D90019031700080357001800210000003406D8
- stack 0: 0xF0
3820	 1EC	SHR		 	 
- stack 1: 0x680
- stack 0: 0x86
3821	 1ED	JUMP		 	 
- stack 0: 0x680
3822	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x680
3823	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
3824	 88	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x86002102FB003200BF000000D90019031700080357001800210000003406D8
3825	 89	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x86002102FB003200BF000000D90019031700080357001800210000003406D8
- stack 0: 0xE0
3826	 8B	SHR		 	 
- stack 1: 0x680
- stack 0: 0x860021
3827	 8C	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x860021
- stack 0: 0xFFFF
3828	 8F	AND		 	 
- stack 1: 0x680
- stack 0: 0x21
3829	 90	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x21
- stack 0: 0x1
3830	 92	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x21
3831	 93	PUSH2	0020	 	 
- stack 2: 0x680
- stack 1: 0x21
- stack 0: 0x20
3832	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x680
3833	 97	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
3834	 99	ADD		 	 
- stack 0: 0x684
3835	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
3836	 9B	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x2FB003200BF000000D90019031700080357001800210000003406D800530042
3837	 9C	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x2FB003200BF000000D90019031700080357001800210000003406D800530042
- stack 0: 0xF0
3838	 9E	SHR		 	 
- stack 1: 0x684
- stack 0: 0x2FB
3839	 9F	JUMP		 	 
- stack 0: 0x684
3840	 2FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_1_0	  ;; # instr: addi zero,ra,50(ignore imm)
- stack 0: 0x684
3841	 2FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
3842	 2FD	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x2FB003200BF000000D90019031700080357001800210000003406D800530042
3843	 2FE	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x2FB003200BF000000D90019031700080357001800210000003406D800530042
- stack 0: 0xE0
3844	 300	SHR		 	 
- stack 1: 0x684
- stack 0: 0x2FB0032
3845	 301	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x2FB0032
- stack 0: 0xFFFF
3846	 304	AND		 	 
- stack 1: 0x684
- stack 0: 0x32
3847	 305	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x32
- stack 0: 0x1
3848	 307	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x32
3849	 308	PUSH2	0020	 	 
- stack 2: 0x684
- stack 1: 0x32
- stack 0: 0x20
3850	 30B	MLOAD		 	  ;; # read from x1
- stack 2: 0x684
- stack 1: 0x32
- stack 0: 0x21
3851	 30C	ADD		 	  ;; # ADDI 1
- stack 1: 0x684
- stack 0: 0x53
3852	 30D	POP		 	 
- stack 0: 0x684
3853	 30E	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
3854	 310	ADD		 	 
- stack 0: 0x688
3855	 311	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
3856	 312	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0xBF000000D90019031700080357001800210000003406D80053004200660000
3857	 313	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0xBF000000D90019031700080357001800210000003406D80053004200660000
- stack 0: 0xF0
3858	 315	SHR		 	 
- stack 1: 0x688
- stack 0: 0xBF
3859	 316	JUMP		 	 
- stack 0: 0x688
3860	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x688
3861	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
3862	 C1	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0xBF000000D90019031700080357001800210000003406D80053004200660000
3863	 C2	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0xBF000000D90019031700080357001800210000003406D80053004200660000
- stack 0: 0xE0
3864	 C4	SHR		 	 
- stack 1: 0x688
- stack 0: 0xBF0000
3865	 C5	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0xBF0000
- stack 0: 0xFFFF
3866	 C8	AND		 	 
- stack 1: 0x688
- stack 0: 0x0
3867	 C9	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x1
3868	 CB	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x0
3869	 CC	PUSH2	03A0	 	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x3A0
3870	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x688
3871	 D0	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
3872	 D2	ADD		 	 
- stack 0: 0x68C
3873	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
3874	 D4	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0xD90019031700080357001800210000003406D8005300420066000003970001
3875	 D5	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0xD90019031700080357001800210000003406D8005300420066000003970001
- stack 0: 0xF0
3876	 D7	SHR		 	 
- stack 1: 0x68C
- stack 0: 0xD9
3877	 D8	JUMP		 	 
- stack 0: 0x68C
3878	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x68C
3879	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
3880	 DB	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0xD90019031700080357001800210000003406D8005300420066000003970001
3881	 DC	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0xD90019031700080357001800210000003406D8005300420066000003970001
- stack 0: 0xE0
3882	 DE	SHR		 	 
- stack 1: 0x68C
- stack 0: 0xD90019
3883	 DF	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0xD90019
- stack 0: 0xFFFF
3884	 E2	AND		 	 
- stack 1: 0x68C
- stack 0: 0x19
3885	 E3	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0x19
- stack 0: 0x1
3886	 E5	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0x19
3887	 E6	PUSH2	0380	 	 
- stack 2: 0x68C
- stack 1: 0x19
- stack 0: 0x380
3888	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x68C
3889	 EA	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
3890	 EC	ADD		 	 
- stack 0: 0x690
3891	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
3892	 EE	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x31700080357001800210000003406D800530042006600000397000100210000
3893	 EF	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x31700080357001800210000003406D800530042006600000397000100210000
- stack 0: 0xF0
3894	 F1	SHR		 	 
- stack 1: 0x690
- stack 0: 0x317
3895	 F2	JUMP		 	 
- stack 0: 0x690
3896	 317	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x690
3897	 318	PUSH1	00	 	 
- stack 1: 0x690
- stack 0: 0x0
3898	 31A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3899	 31F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x690
- stack 0: 0x0
3900	 320	PUSH2	03A0	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x3A0
3901	 323	MLOAD		 	  ;; # read from x29
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x0
3902	 324	PUSH4	FFFFFFFF	 	 
- stack 3: 0x690
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3903	 329	AND		 	  ;; # mask to 32 bits
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x0
3904	 32A	SUB		 	 
- stack 1: 0x690
- stack 0: 0x0
3905	 32B	PUSH2	0333	 ;; _neq_44e12f013345943284ec5ab605cb76fb8928901303b9b044798b0530b9affa34	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x333
3906	 32E	JUMPI		 	 
- stack 0: 0x690
3907	 32F	PUSH2	034D	 ;; _neq_after_44e12f013345943284ec5ab605cb76fb8928901303b9b044798b0530b9affa34	 
- stack 1: 0x690
- stack 0: 0x34D
3908	 332	JUMP		 	 
- stack 0: 0x690
3909	 34D	JUMPDEST		 ;; _neq_after_44e12f013345943284ec5ab605cb76fb8928901303b9b044798b0530b9affa34	 
- stack 0: 0x690
3910	 34E	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
3911	 350	ADD		 	 
- stack 0: 0x694
3912	 351	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
3913	 352	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x357001800210000003406D800530042006600000397000100210000003406DC
3914	 353	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x357001800210000003406D800530042006600000397000100210000003406DC
- stack 0: 0xF0
3915	 355	SHR		 	 
- stack 1: 0x694
- stack 0: 0x357
3916	 356	JUMP		 	 
- stack 0: 0x694
3917	 357	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x694
3918	 358	PUSH1	00	 	 
- stack 1: 0x694
- stack 0: 0x0
3919	 35A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3920	 35F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x694
- stack 0: 0x0
3921	 360	PUSH2	0380	 	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x380
3922	 363	MLOAD		 	  ;; # read from x28
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x19
3923	 364	PUSH4	FFFFFFFF	 	 
- stack 3: 0x694
- stack 2: 0x0
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
3924	 369	AND		 	  ;; # mask to 32 bits
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x19
3925	 36A	SUB		 	 
- stack 1: 0x694
- stack 0: 0x19
3926	 36B	PUSH2	0373	 ;; _neq_9b2106ba87483b2ee33a2cc94a5529f1da9d82bfb4a8e99ba2b708f914e4864e	 
- stack 2: 0x694
- stack 1: 0x19
- stack 0: 0x373
3927	 36E	JUMPI		 	 
- stack 0: 0x694
3928	 373	JUMPDEST		 ;; _neq_9b2106ba87483b2ee33a2cc94a5529f1da9d82bfb4a8e99ba2b708f914e4864e	 
- stack 0: 0x694
3929	 374	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
3930	 375	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x357001800210000003406D800530042006600000397000100210000003406DC
3931	 376	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x357001800210000003406D800530042006600000397000100210000003406DC
- stack 0: 0xE0
3932	 378	SHR		 	 
- stack 1: 0x694
- stack 0: 0x3570018
3933	 379	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x3570018
- stack 0: 0xFFFF
3934	 37C	AND		 	 
- stack 1: 0x694
- stack 0: 0x18
3935	 37D	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x18
- stack 0: 0x1
3936	 37F	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x18
3937	 380	ADD		 	 
- stack 0: 0x6AC
3938	 381	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6AC
- stack 0: 0xFFFFFFFF
3939	 386	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6AC
3940	 387	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
3941	 388	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x210000003406DC005300420066000003A20000006600000000000000000000
3942	 389	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x210000003406DC005300420066000003A20000006600000000000000000000
- stack 0: 0xF0
3943	 38B	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x21
3944	 38C	JUMP		 	 
- stack 0: 0x6AC
3945	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x6AC
3946	 22	PUSH4	00000000	 	 
- stack 1: 0x6AC
- stack 0: 0x0
3947	 27	PUSH2	0160	 	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x160
3948	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x6AC
3949	 2B	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
3950	 2D	ADD		 	 
- stack 0: 0x6B0
3951	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
3952	 2F	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x3406DC005300420066000003A2000000660000000000000000000000000000
3953	 30	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x3406DC005300420066000003A2000000660000000000000000000000000000
- stack 0: 0xF0
3954	 32	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x34
3955	 33	JUMP		 	 
- stack 0: 0x6B0
3956	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1744(ignore imm)
- stack 0: 0x6B0
3957	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
3958	 36	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x3406DC005300420066000003A2000000660000000000000000000000000000
3959	 37	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x3406DC005300420066000003A2000000660000000000000000000000000000
- stack 0: 0xE0
3960	 39	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x3406DC
3961	 3A	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x3406DC
- stack 0: 0xFFFF
3962	 3D	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x6DC
3963	 3E	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x6DC
- stack 0: 0x1
3964	 40	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x6DC
3965	 41	PUSH2	0160	 	 
- stack 2: 0x6B0
- stack 1: 0x6DC
- stack 0: 0x160
3966	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x6B0
- stack 1: 0x6DC
- stack 0: 0x0
3967	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x6B0
- stack 0: 0x6DC
3968	 46	PUSH2	0160	 	 
- stack 2: 0x6B0
- stack 1: 0x6DC
- stack 0: 0x160
3969	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x6B0
3970	 4A	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
3971	 4C	ADD		 	 
- stack 0: 0x6B4
3972	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
3973	 4E	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x5300420066000003A20000006600000000000000000000000000006574796D
3974	 4F	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x5300420066000003A20000006600000000000000000000000000006574796D
- stack 0: 0xF0
3975	 51	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x53
3976	 52	JUMP		 	 
- stack 0: 0x6B4
3977	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x6B4
3978	 54	PUSH4	00042000	 	 
- stack 1: 0x6B4
- stack 0: 0x42000
3979	 59	PUSH2	0140	 	 
- stack 2: 0x6B4
- stack 1: 0x42000
- stack 0: 0x140
3980	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x6B4
3981	 5D	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3982	 5F	ADD		 	 
- stack 0: 0x6B8
3983	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
3984	 61	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x66000003A20000006600000000000000000000000000006574796D00007473
3985	 62	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x66000003A20000006600000000000000000000000000006574796D00007473
- stack 0: 0xF0
3986	 64	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x66
3987	 65	JUMP		 	 
- stack 0: 0x6B8
3988	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6B8
3989	 67	PUSH2	0140	 	 
- stack 1: 0x6B8
- stack 0: 0x140
3990	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6B8
- stack 0: 0x42000
3991	 6B	PUSH2	0075	 ;; _ecall_ce229fdd04043c459d62365e144410168669de36dcf0951dc80becf14644d174	 
- stack 2: 0x6B8
- stack 1: 0x42000
- stack 0: 0x75
3992	 6E	JUMPI		 	 
- stack 0: 0x6B8
3993	 75	JUMPDEST		 ;; _ecall_ce229fdd04043c459d62365e144410168669de36dcf0951dc80becf14644d174	 
- stack 0: 0x6B8
3994	 76	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
3995	 78	PUSH2	0160	 	 
- stack 2: 0x6B8
- stack 1: 0x4
- stack 0: 0x160
3996	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x6B8
- stack 1: 0x4
- stack 0: 0x6DC
3997	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x6B8
3998	 7D	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
3999	 7F	ADD		 	 
- stack 0: 0x6BC
4000	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4001	 81	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3A20000006600000000000000000000000000006574796D0000747300525245
4002	 82	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x3A20000006600000000000000000000000000006574796D0000747300525245
- stack 0: 0xF0
4003	 84	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x3A2
4004	 85	JUMP		 	 
- stack 0: 0x6BC
4005	 3A2	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x6BC
4006	 3A3	PUSH4	00000000	 	 
- stack 1: 0x6BC
- stack 0: 0x0
4007	 3A8	PUSH2	0140	 	 
- stack 2: 0x6BC
- stack 1: 0x0
- stack 0: 0x140
4008	 3AB	MSTORE		 	  ;; # store to x10
- stack 0: 0x6BC
4009	 3AC	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4010	 3AE	ADD		 	 
- stack 0: 0x6C0
4011	 3AF	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4012	 3B0	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x6600000000000000000000000000006574796D000074730052524500004B4F
4013	 3B1	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x6600000000000000000000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
4014	 3B3	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x66
4015	 3B4	JUMP		 	 
- stack 0: 0x6C0
4016	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6C0
4017	 67	PUSH2	0140	 	 
- stack 1: 0x6C0
- stack 0: 0x140
4018	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6C0
- stack 0: 0x0
4019	 6B	PUSH2	0075	 ;; _ecall_ce229fdd04043c459d62365e144410168669de36dcf0951dc80becf14644d174	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x75
4020	 6E	JUMPI		 	 
- stack 0: 0x6C0
4021	 6F	PUSH1	20	 	 
- stack 1: 0x6C0
- stack 0: 0x20
4022	 71	PUSH2	0160	 	 
- stack 2: 0x6C0
- stack 1: 0x20
- stack 0: 0x160
4023	 74	RETURN		 	 
Final bytecode length; 1686
Returned: 00000000000000000000000000000000000000000000000000000000000006dc
gasUsed : 14409
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420
** HOT: 424 - range: 424,428,42c,430,434
** HOT: 438 - range: 438,43c,440,444,448
** HOT: 44c - range: 44c,450,454,458,45c
** HOT: 460 - range: 460,464,468,46c,470
** HOT: 474 - range: 474,478,47c,480,484,488
** HOT: 48c - range: 48c,490,494,498,49c
** HOT: 4a0 - range: 4a0,4a4,4a8,4ac,4b0,4b4,4b8
** HOT: 4bc - range: 4bc,4c0,4c4,4c8,4cc,4d0,4d4
** HOT: 4d8 - range: 4d8,4dc,4e0,4e4,4e8,4ec
** HOT: 4f0 - range: 4f0,4f4,4f8,4fc,500,504,508
** HOT: 50c - range: 50c,510,514,518,51c
** HOT: 520 - range: 520,524,528,52c,530
** HOT: 534 - range: 534,538,53c,540,544
** HOT: 548 - range: 548,54c,550,554,558,55c
** HOT: 560 - range: 560,564,568,56c,570
** HOT: 574 - range: 574,578,57c,580,584,588,58c
** HOT: 578 - range: 578,57c,580,584,588,58c
** HOT: 590 - range: 590,594,598
** HOT: 59c - range: 59c,5a0,5a4,5a8,5ac,5b0,5b4,5b8
** HOT: 5a0 - range: 5a0,5a4,5a8,5ac,5b0,5b4,5b8
** HOT: 5bc - range: 5bc,5c0,5c4
** HOT: 5c8 - range: 5c8,5cc,5d0,5d4,5d8,5dc,5e0,5e4,5e8
** HOT: 5cc - range: 5cc,5d0,5d4,5d8,5dc,5e0,5e4,5e8
** HOT: 5ec - range: 5ec,5f0,5f4
** HOT: 5f8 - range: 5f8,5fc,600,604,608,60c
** HOT: 5fc - range: 5fc,600,604,608,60c
** HOT: 610 - range: 610,614,618
** HOT: 61c - range: 61c,620,624,628,62c,630,634
** HOT: 620 - range: 620,624,628,62c,630,634
** HOT: 638 - range: 638,63c,640
** HOT: 644 - range: 644,648,64c,650,654,658,65c,660
** HOT: 648 - range: 648,64c,650,654,658,65c,660
** HOT: 664 - range: 664,668,66c
** HOT: 670 - range: 670,674,678,67c
** HOT: 680 - range: 680,684,688,68c,690
