Running in EVM:
0	 0	PUSH4	0510	 	 
- stack 0: 0x510
1	 5	PUSH2	052C	 ;; _rambegin	 
- stack 1: 0x510
- stack 0: 0x52C
2	 8	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x52C
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x510
- stack 0: 0x52D
4	 B	PUSH2	0400	 	 
- stack 2: 0x510
- stack 1: 0x52D
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100010034F90000530042006600000086F0100099FF0000B8F0F100CBFF0F
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100010034F90000530042006600000086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00001000	 	 
- stack 1: 0x400
- stack 0: 0x1000
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x1000
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F90000530042006600000086F0100099FF0000B8F0F100CBFF0F00EA0000
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34F90000530042006600000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1792(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F90000530042006600000086F0100099FF0000B8F0F100CBFF0F00EA0000
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34F90000530042006600000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34F900
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x34F900
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0xF900
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0xF900
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF900
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF900
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF900
- stack 0: 0x1000
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x900
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x900
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086F0100099FF0000B8F0F100CBFF0F00EA00000101F001
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086F0100099FF0000B8F0F100CBFF0F00EA00000101F001
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086F0100099FF0000B8F0F100CBFF0F00EA00000101F0010114FF00
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086F0100099FF0000B8F0F100CBFF0F00EA00000101F0010114FF00
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_493e1b48830fb26071102b8f58e7c702eb84046d611bd6eacfbcdecc2278109a	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_493e1b48830fb26071102b8f58e7c702eb84046d611bd6eacfbcdecc2278109a	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x900
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F00EA00000101F0010114FF0001330002
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F00EA00000101F0010114FF0001330002
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x410
76	 87	PUSH4	ff010000	 	 
- stack 1: 0x410
- stack 0: 0xFF010000
77	 8C	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0xFF010000
- stack 0: 0x20
78	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 90	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 92	ADD		 	 
- stack 0: 0x414
81	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 94	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA00000101F0010114FF0001330002014D0498
83	 95	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA00000101F0010114FF0001330002014D0498
- stack 0: 0xF0
84	 97	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99
85	 98	JUMP		 	 
- stack 0: 0x414
86	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x414
87	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA00000101F0010114FF0001330002014D0498
89	 9C	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA00000101F0010114FF0001330002014D0498
- stack 0: 0xE0
90	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99FF00
91	 9F	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x99FF00
- stack 0: 0xFFFF
92	 A2	AND		 	 
- stack 1: 0x414
- stack 0: 0xFF00
93	 A3	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0xFF00
- stack 0: 0x1
94	 A5	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
95	 A6	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
96	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
97	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x414
- stack 0: 0xFF00FF00
98	 AB	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0xFF00FF00
- stack 0: 0x20
99	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
100	 AF	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
101	 B1	ADD		 	 
- stack 0: 0x418
102	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
103	 B3	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB8F0F100CBFF0F00EA00000101F0010114FF0001330002014D0498018FFF01
104	 B4	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB8F0F100CBFF0F00EA00000101F0010114FF0001330002014D0498018FFF01
- stack 0: 0xF0
105	 B6	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB8
106	 B7	JUMP		 	 
- stack 0: 0x418
107	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x418
108	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x418
- stack 0: 0xF0F1000
109	 BE	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0xF0F1000
- stack 0: 0x40
110	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x418
111	 C2	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
112	 C4	ADD		 	 
- stack 0: 0x41C
113	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
114	 C6	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xCBFF0F00EA00000101F0010114FF0001330002014D0498018FFF010099FFF0
115	 C7	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xCBFF0F00EA00000101F0010114FF0001330002014D0498018FFF010099FFF0
- stack 0: 0xF0
116	 C9	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xCB
117	 CA	JUMP		 	 
- stack 0: 0x41C
118	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x41C
119	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
120	 CD	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xCBFF0F00EA00000101F0010114FF0001330002014D0498018FFF010099FFF0
121	 CE	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xCBFF0F00EA00000101F0010114FF0001330002014D0498018FFF010099FFF0
- stack 0: 0xE0
122	 D0	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xCBFF0F
123	 D1	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
124	 D4	AND		 	 
- stack 1: 0x41C
- stack 0: 0xFF0F
125	 D5	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0xFF0F
- stack 0: 0x1
126	 D7	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
127	 D8	PUSH2	0040	 	 
- stack 2: 0x41C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
128	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x41C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
129	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x41C
- stack 0: 0xF0F0F0F
130	 DD	PUSH2	0040	 	 
- stack 2: 0x41C
- stack 1: 0xF0F0F0F
- stack 0: 0x40
131	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x41C
132	 E1	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
133	 E3	ADD		 	 
- stack 0: 0x420
134	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
135	 E5	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xEA00000101F0010114FF0001330002014D0498018FFF010099FFF001A20F0F
136	 E6	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xEA00000101F0010114FF0001330002014D0498018FFF010099FFF001A20F0F
- stack 0: 0xF0
137	 E8	SHR		 	 
- stack 1: 0x420
- stack 0: 0xEA
138	 E9	JUMP		 	 
- stack 0: 0x420
139	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x420
140	 EB	PUSH2	0040	 	 
- stack 1: 0x420
- stack 0: 0x40
141	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x420
- stack 0: 0xF0F0F0F
142	 EF	PUSH2	0020	 	 
- stack 2: 0x420
- stack 1: 0xF0F0F0F
- stack 0: 0x20
143	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x420
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
144	 F3	AND		 	  ;; # AND
- stack 1: 0x420
- stack 0: 0xF000F00
145	 F4	PUSH2	0060	 	 
- stack 2: 0x420
- stack 1: 0xF000F00
- stack 0: 0x60
146	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x420
147	 F8	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
148	 FA	ADD		 	 
- stack 0: 0x424
149	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
150	 FC	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x101F0010114FF0001330002014D0498018FFF010099FFF001A20F0F00CB00F0
151	 FD	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x101F0010114FF0001330002014D0498018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xF0
152	 FF	SHR		 	 
- stack 1: 0x424
- stack 0: 0x101
153	 100	JUMP		 	 
- stack 0: 0x424
154	 101	JUMPDEST		 ;; __riscvimpl_LUI_f001eb7	  ;; # instr: lui t4,0xf001(ignore imm)
- stack 0: 0x424
155	 102	PUSH4	0f001000	 	 
- stack 1: 0x424
- stack 0: 0xF001000
156	 107	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0xF001000
- stack 0: 0x3A0
157	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x424
158	 10B	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
159	 10D	ADD		 	 
- stack 0: 0x428
160	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
161	 10F	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x114FF0001330002014D0498018FFF010099FFF001A20F0F00CB00F000EA0000
162	 110	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x114FF0001330002014D0498018FFF010099FFF001A20F0F00CB00F000EA0000
- stack 0: 0xF0
163	 112	SHR		 	 
- stack 1: 0x428
- stack 0: 0x114
164	 113	JUMP		 	 
- stack 0: 0x428
165	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x428
166	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
167	 116	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x114FF0001330002014D0498018FFF010099FFF001A20F0F00CB00F000EA0000
168	 117	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0x114FF0001330002014D0498018FFF010099FFF001A20F0F00CB00F000EA0000
- stack 0: 0xE0
169	 119	SHR		 	 
- stack 1: 0x428
- stack 0: 0x114FF00
170	 11A	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0x114FF00
- stack 0: 0xFFFF
171	 11D	AND		 	 
- stack 1: 0x428
- stack 0: 0xFF00
172	 11E	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0xFF00
- stack 0: 0x1
173	 120	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
174	 121	PUSH2	03A0	 	 
- stack 2: 0x428
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
175	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x428
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xF001000
176	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x428
- stack 0: 0xF000F00
177	 126	PUSH2	03A0	 	 
- stack 2: 0x428
- stack 1: 0xF000F00
- stack 0: 0x3A0
178	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x428
179	 12A	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
180	 12C	ADD		 	 
- stack 0: 0x42C
181	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
182	 12E	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x1330002014D0498018FFF010099FFF001A20F0F00CB00F000EA000001B50F00
183	 12F	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x1330002014D0498018FFF010099FFF001A20F0F00CB00F000EA000001B50F00
- stack 0: 0xF0
184	 131	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x133
185	 132	JUMP		 	 
- stack 0: 0x42C
186	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x42C
187	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
188	 135	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x1330002014D0498018FFF010099FFF001A20F0F00CB00F000EA000001B50F00
189	 136	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0x1330002014D0498018FFF010099FFF001A20F0F00CB00F000EA000001B50F00
- stack 0: 0xE0
190	 138	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x1330002
191	 139	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0x1330002
- stack 0: 0xFFFF
192	 13C	AND		 	 
- stack 1: 0x42C
- stack 0: 0x2
193	 13D	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x2
- stack 0: 0x1
194	 13F	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x2
195	 140	PUSH2	0380	 	 
- stack 2: 0x42C
- stack 1: 0x2
- stack 0: 0x380
196	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x42C
197	 144	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
198	 146	ADD		 	 
- stack 0: 0x430
199	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
200	 148	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x14D0498018FFF010099FFF001A20F0F00CB00F000EA000001B50F00011400F0
201	 149	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x14D0498018FFF010099FFF001A20F0F00CB00F000EA000001B50F00011400F0
- stack 0: 0xF0
202	 14B	SHR		 	 
- stack 1: 0x430
- stack 0: 0x14D
203	 14C	JUMP		 	 
- stack 0: 0x430
204	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x430
205	 14E	PUSH2	0060	 	 
- stack 1: 0x430
- stack 0: 0x60
206	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x430
- stack 0: 0xF000F00
207	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x430
- stack 1: 0xF000F00
- stack 0: 0xFFFFFFFF
208	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x430
- stack 0: 0xF000F00
209	 158	PUSH2	03A0	 	 
- stack 2: 0x430
- stack 1: 0xF000F00
- stack 0: 0x3A0
210	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x430
- stack 1: 0xF000F00
- stack 0: 0xF000F00
211	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x430
- stack 2: 0xF000F00
- stack 1: 0xF000F00
- stack 0: 0xFFFFFFFF
212	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x430
- stack 1: 0xF000F00
- stack 0: 0xF000F00
213	 162	SUB		 	 
- stack 1: 0x430
- stack 0: 0x0
214	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x430
- stack 1: 0x0
- stack 0: 0x16B
215	 166	JUMPI		 	 
- stack 0: 0x430
216	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x430
- stack 0: 0x185
217	 16A	JUMP		 	 
- stack 0: 0x430
218	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x430
219	 186	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
220	 188	ADD		 	 
- stack 0: 0x434
221	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
222	 18A	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F000EA000001B50F00011400F001330003
223	 18B	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F000EA000001B50F00011400F001330003
- stack 0: 0xF0
224	 18D	SHR		 	 
- stack 1: 0x434
- stack 0: 0x18F
225	 18E	JUMP		 	 
- stack 0: 0x434
226	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x434
227	 190	PUSH4	0ff01000	 	 
- stack 1: 0x434
- stack 0: 0xFF01000
228	 195	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0xFF01000
- stack 0: 0x20
229	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x434
230	 199	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
231	 19B	ADD		 	 
- stack 0: 0x438
232	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
233	 19D	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x99FFF001A20F0F00CB00F000EA000001B50F00011400F001330003014D0474
234	 19E	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x99FFF001A20F0F00CB00F000EA000001B50F00011400F001330003014D0474
- stack 0: 0xF0
235	 1A0	SHR		 	 
- stack 1: 0x438
- stack 0: 0x99
236	 1A1	JUMP		 	 
- stack 0: 0x438
237	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x438
238	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
239	 9B	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x99FFF001A20F0F00CB00F000EA000001B50F00011400F001330003014D0474
240	 9C	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0x99FFF001A20F0F00CB00F000EA000001B50F00011400F001330003014D0474
- stack 0: 0xE0
241	 9E	SHR		 	 
- stack 1: 0x438
- stack 0: 0x99FFF0
242	 9F	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
243	 A2	AND		 	 
- stack 1: 0x438
- stack 0: 0xFFF0
244	 A3	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0xFFF0
- stack 0: 0x1
245	 A5	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
246	 A6	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
247	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x438
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
248	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x438
- stack 0: 0xFF00FF0
249	 AB	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0xFF00FF0
- stack 0: 0x20
250	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x438
251	 AF	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
252	 B1	ADD		 	 
- stack 0: 0x43C
253	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
254	 B3	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x1A20F0F00CB00F000EA000001B50F00011400F001330003014D047401C80FF0
255	 B4	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x1A20F0F00CB00F000EA000001B50F00011400F001330003014D047401C80FF0
- stack 0: 0xF0
256	 B6	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x1A2
257	 B7	JUMP		 	 
- stack 0: 0x43C
258	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x43C
259	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x43C
- stack 0: 0xF0F0F000
260	 1A8	PUSH2	0040	 	 
- stack 2: 0x43C
- stack 1: 0xF0F0F000
- stack 0: 0x40
261	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x43C
262	 1AC	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
263	 1AE	ADD		 	 
- stack 0: 0x440
264	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
265	 1B0	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xCB00F000EA000001B50F00011400F001330003014D047401C80FF0009900FF
266	 1B1	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0xCB00F000EA000001B50F00011400F001330003014D047401C80FF0009900FF
- stack 0: 0xF0
267	 1B3	SHR		 	 
- stack 1: 0x440
- stack 0: 0xCB
268	 1B4	JUMP		 	 
- stack 0: 0x440
269	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x440
270	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
271	 CD	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xCB00F000EA000001B50F00011400F001330003014D047401C80FF0009900FF
272	 CE	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0xCB00F000EA000001B50F00011400F001330003014D047401C80FF0009900FF
- stack 0: 0xE0
273	 D0	SHR		 	 
- stack 1: 0x440
- stack 0: 0xCB00F0
274	 D1	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
275	 D4	AND		 	 
- stack 1: 0x440
- stack 0: 0xF0
276	 D5	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0xF0
- stack 0: 0x1
277	 D7	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0xF0
278	 D8	PUSH2	0040	 	 
- stack 2: 0x440
- stack 1: 0xF0
- stack 0: 0x40
279	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x440
- stack 1: 0xF0
- stack 0: 0xF0F0F000
280	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x440
- stack 0: 0xF0F0F0F0
281	 DD	PUSH2	0040	 	 
- stack 2: 0x440
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
282	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x440
283	 E1	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
284	 E3	ADD		 	 
- stack 0: 0x444
285	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
286	 E5	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xEA000001B50F00011400F001330003014D047401C80FF0009900FF00B8F0F1
287	 E6	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xEA000001B50F00011400F001330003014D047401C80FF0009900FF00B8F0F1
- stack 0: 0xF0
288	 E8	SHR		 	 
- stack 1: 0x444
- stack 0: 0xEA
289	 E9	JUMP		 	 
- stack 0: 0x444
290	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x444
291	 EB	PUSH2	0040	 	 
- stack 1: 0x444
- stack 0: 0x40
292	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x444
- stack 0: 0xF0F0F0F0
293	 EF	PUSH2	0020	 	 
- stack 2: 0x444
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
294	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x444
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
295	 F3	AND		 	  ;; # AND
- stack 1: 0x444
- stack 0: 0xF000F0
296	 F4	PUSH2	0060	 	 
- stack 2: 0x444
- stack 1: 0xF000F0
- stack 0: 0x60
297	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x444
298	 F8	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
299	 FA	ADD		 	 
- stack 0: 0x448
300	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
301	 FC	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x1B50F00011400F001330003014D047401C80FF0009900FF00B8F0F100CBFF0F
302	 FD	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0x1B50F00011400F001330003014D047401C80FF0009900FF00B8F0F100CBFF0F
- stack 0: 0xF0
303	 FF	SHR		 	 
- stack 1: 0x448
- stack 0: 0x1B5
304	 100	JUMP		 	 
- stack 0: 0x448
305	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00eb7	  ;; # instr: lui t4,0xf00(ignore imm)
- stack 0: 0x448
306	 1B6	PUSH4	00f00000	 	 
- stack 1: 0x448
- stack 0: 0xF00000
307	 1BB	PUSH2	03A0	 	 
- stack 2: 0x448
- stack 1: 0xF00000
- stack 0: 0x3A0
308	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x448
309	 1BF	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
310	 1C1	ADD		 	 
- stack 0: 0x44C
311	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
312	 1C3	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x11400F001330003014D047401C80FF0009900FF00B8F0F100CBFF0F00EA0000
313	 1C4	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x11400F001330003014D047401C80FF0009900FF00B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
314	 1C6	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x114
315	 1C7	JUMP		 	 
- stack 0: 0x44C
316	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x44C
317	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
318	 116	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x11400F001330003014D047401C80FF0009900FF00B8F0F100CBFF0F00EA0000
319	 117	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0x11400F001330003014D047401C80FF0009900FF00B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
320	 119	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x11400F0
321	 11A	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0x11400F0
- stack 0: 0xFFFF
322	 11D	AND		 	 
- stack 1: 0x44C
- stack 0: 0xF0
323	 11E	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0xF0
- stack 0: 0x1
324	 120	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0xF0
325	 121	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0xF0
- stack 0: 0x3A0
326	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x44C
- stack 1: 0xF0
- stack 0: 0xF00000
327	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x44C
- stack 0: 0xF000F0
328	 126	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0xF000F0
- stack 0: 0x3A0
329	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x44C
330	 12A	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
331	 12C	ADD		 	 
- stack 0: 0x450
332	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
333	 12E	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x1330003014D047401C80FF0009900FF00B8F0F100CBFF0F00EA000001DB00F0
334	 12F	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x1330003014D047401C80FF0009900FF00B8F0F100CBFF0F00EA000001DB00F0
- stack 0: 0xF0
335	 131	SHR		 	 
- stack 1: 0x450
- stack 0: 0x133
336	 132	JUMP		 	 
- stack 0: 0x450
337	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
338	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
339	 135	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x1330003014D047401C80FF0009900FF00B8F0F100CBFF0F00EA000001DB00F0
340	 136	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x1330003014D047401C80FF0009900FF00B8F0F100CBFF0F00EA000001DB00F0
- stack 0: 0xE0
341	 138	SHR		 	 
- stack 1: 0x450
- stack 0: 0x1330003
342	 139	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x1330003
- stack 0: 0xFFFF
343	 13C	AND		 	 
- stack 1: 0x450
- stack 0: 0x3
344	 13D	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x3
- stack 0: 0x1
345	 13F	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x3
346	 140	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x3
- stack 0: 0x380
347	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
348	 144	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
349	 146	ADD		 	 
- stack 0: 0x454
350	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
351	 148	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x14D047401C80FF0009900FF00B8F0F100CBFF0F00EA000001DB00F00114000F
352	 149	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x14D047401C80FF0009900FF00B8F0F100CBFF0F00EA000001DB00F00114000F
- stack 0: 0xF0
353	 14B	SHR		 	 
- stack 1: 0x454
- stack 0: 0x14D
354	 14C	JUMP		 	 
- stack 0: 0x454
355	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x454
356	 14E	PUSH2	0060	 	 
- stack 1: 0x454
- stack 0: 0x60
357	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x454
- stack 0: 0xF000F0
358	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x454
- stack 1: 0xF000F0
- stack 0: 0xFFFFFFFF
359	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x454
- stack 0: 0xF000F0
360	 158	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xF000F0
- stack 0: 0x3A0
361	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x454
- stack 1: 0xF000F0
- stack 0: 0xF000F0
362	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x454
- stack 2: 0xF000F0
- stack 1: 0xF000F0
- stack 0: 0xFFFFFFFF
363	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x454
- stack 1: 0xF000F0
- stack 0: 0xF000F0
364	 162	SUB		 	 
- stack 1: 0x454
- stack 0: 0x0
365	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x454
- stack 1: 0x0
- stack 0: 0x16B
366	 166	JUMPI		 	 
- stack 0: 0x454
367	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x454
- stack 0: 0x185
368	 16A	JUMP		 	 
- stack 0: 0x454
369	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x454
370	 186	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
371	 188	ADD		 	 
- stack 0: 0x458
372	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
373	 18A	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000001DB00F00114000F01330004
374	 18B	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000001DB00F00114000F01330004
- stack 0: 0xF0
375	 18D	SHR		 	 
- stack 1: 0x458
- stack 0: 0x1C8
376	 18E	JUMP		 	 
- stack 0: 0x458
377	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x458
378	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x458
- stack 0: 0xFF0000
379	 1CE	PUSH2	0020	 	 
- stack 2: 0x458
- stack 1: 0xFF0000
- stack 0: 0x20
380	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x458
381	 1D2	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
382	 1D4	ADD		 	 
- stack 0: 0x45C
383	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
384	 1D6	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000001DB00F00114000F01330004014D0450
385	 1D7	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000001DB00F00114000F01330004014D0450
- stack 0: 0xF0
386	 1D9	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x99
387	 1DA	JUMP		 	 
- stack 0: 0x45C
388	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x45C
389	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
390	 9B	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000001DB00F00114000F01330004014D0450
391	 9C	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000001DB00F00114000F01330004014D0450
- stack 0: 0xE0
392	 9E	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x9900FF
393	 9F	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0x9900FF
- stack 0: 0xFFFF
394	 A2	AND		 	 
- stack 1: 0x45C
- stack 0: 0xFF
395	 A3	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0xFF
- stack 0: 0x1
396	 A5	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0xFF
397	 A6	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0xFF
- stack 0: 0x20
398	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x45C
- stack 1: 0xFF
- stack 0: 0xFF0000
399	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x45C
- stack 0: 0xFF00FF
400	 AB	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0xFF00FF
- stack 0: 0x20
401	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x45C
402	 AF	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
403	 B1	ADD		 	 
- stack 0: 0x460
404	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
405	 B3	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0xB8F0F100CBFF0F00EA000001DB00F00114000F01330004014D045001EE00FF
406	 B4	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0xB8F0F100CBFF0F00EA000001DB00F00114000F01330004014D045001EE00FF
- stack 0: 0xF0
407	 B6	SHR		 	 
- stack 1: 0x460
- stack 0: 0xB8
408	 B7	JUMP		 	 
- stack 0: 0x460
409	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x460
410	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x460
- stack 0: 0xF0F1000
411	 BE	PUSH2	0040	 	 
- stack 2: 0x460
- stack 1: 0xF0F1000
- stack 0: 0x40
412	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x460
413	 C2	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
414	 C4	ADD		 	 
- stack 0: 0x464
415	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
416	 C6	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xCBFF0F00EA000001DB00F00114000F01330004014D045001EE00FF0099000F
417	 C7	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xCBFF0F00EA000001DB00F00114000F01330004014D045001EE00FF0099000F
- stack 0: 0xF0
418	 C9	SHR		 	 
- stack 1: 0x464
- stack 0: 0xCB
419	 CA	JUMP		 	 
- stack 0: 0x464
420	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x464
421	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
422	 CD	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xCBFF0F00EA000001DB00F00114000F01330004014D045001EE00FF0099000F
423	 CE	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0xCBFF0F00EA000001DB00F00114000F01330004014D045001EE00FF0099000F
- stack 0: 0xE0
424	 D0	SHR		 	 
- stack 1: 0x464
- stack 0: 0xCBFF0F
425	 D1	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
426	 D4	AND		 	 
- stack 1: 0x464
- stack 0: 0xFF0F
427	 D5	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xFF0F
- stack 0: 0x1
428	 D7	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
429	 D8	PUSH2	0040	 	 
- stack 2: 0x464
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
430	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x464
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
431	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x464
- stack 0: 0xF0F0F0F
432	 DD	PUSH2	0040	 	 
- stack 2: 0x464
- stack 1: 0xF0F0F0F
- stack 0: 0x40
433	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x464
434	 E1	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
435	 E3	ADD		 	 
- stack 0: 0x468
436	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
437	 E5	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xEA000001DB00F00114000F01330004014D045001EE00FF0099000F01A20F0F
438	 E6	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xEA000001DB00F00114000F01330004014D045001EE00FF0099000F01A20F0F
- stack 0: 0xF0
439	 E8	SHR		 	 
- stack 1: 0x468
- stack 0: 0xEA
440	 E9	JUMP		 	 
- stack 0: 0x468
441	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x468
442	 EB	PUSH2	0040	 	 
- stack 1: 0x468
- stack 0: 0x40
443	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x468
- stack 0: 0xF0F0F0F
444	 EF	PUSH2	0020	 	 
- stack 2: 0x468
- stack 1: 0xF0F0F0F
- stack 0: 0x20
445	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x468
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
446	 F3	AND		 	  ;; # AND
- stack 1: 0x468
- stack 0: 0xF000F
447	 F4	PUSH2	0060	 	 
- stack 2: 0x468
- stack 1: 0xF000F
- stack 0: 0x60
448	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x468
449	 F8	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
450	 FA	ADD		 	 
- stack 0: 0x46C
451	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
452	 FC	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x1DB00F00114000F01330004014D045001EE00FF0099000F01A20F0F00CB00F0
453	 FD	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x1DB00F00114000F01330004014D045001EE00FF0099000F01A20F0F00CB00F0
- stack 0: 0xF0
454	 FF	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x1DB
455	 100	JUMP		 	 
- stack 0: 0x46C
456	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_f0eb7	  ;; # instr: lui t4,0xf0(ignore imm)
- stack 0: 0x46C
457	 1DC	PUSH4	000f0000	 	 
- stack 1: 0x46C
- stack 0: 0xF0000
458	 1E1	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0xF0000
- stack 0: 0x3A0
459	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x46C
460	 1E5	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
461	 1E7	ADD		 	 
- stack 0: 0x470
462	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
463	 1E9	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x114000F01330004014D045001EE00FF0099000F01A20F0F00CB00F000EA0000
464	 1EA	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x114000F01330004014D045001EE00FF0099000F01A20F0F00CB00F000EA0000
- stack 0: 0xF0
465	 1EC	SHR		 	 
- stack 1: 0x470
- stack 0: 0x114
466	 1ED	JUMP		 	 
- stack 0: 0x470
467	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x470
468	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
469	 116	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x114000F01330004014D045001EE00FF0099000F01A20F0F00CB00F000EA0000
470	 117	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x114000F01330004014D045001EE00FF0099000F01A20F0F00CB00F000EA0000
- stack 0: 0xE0
471	 119	SHR		 	 
- stack 1: 0x470
- stack 0: 0x114000F
472	 11A	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x114000F
- stack 0: 0xFFFF
473	 11D	AND		 	 
- stack 1: 0x470
- stack 0: 0xF
474	 11E	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0xF
- stack 0: 0x1
475	 120	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0xF
476	 121	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0xF
- stack 0: 0x3A0
477	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x470
- stack 1: 0xF
- stack 0: 0xF0000
478	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x470
- stack 0: 0xF000F
479	 126	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0xF000F
- stack 0: 0x3A0
480	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x470
481	 12A	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
482	 12C	ADD		 	 
- stack 0: 0x474
483	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
484	 12E	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x1330004014D045001EE00FF0099000F01A20F0F00CB00F000EA00000201000F
485	 12F	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x1330004014D045001EE00FF0099000F01A20F0F00CB00F000EA00000201000F
- stack 0: 0xF0
486	 131	SHR		 	 
- stack 1: 0x474
- stack 0: 0x133
487	 132	JUMP		 	 
- stack 0: 0x474
488	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x474
489	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
490	 135	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x1330004014D045001EE00FF0099000F01A20F0F00CB00F000EA00000201000F
491	 136	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0x1330004014D045001EE00FF0099000F01A20F0F00CB00F000EA00000201000F
- stack 0: 0xE0
492	 138	SHR		 	 
- stack 1: 0x474
- stack 0: 0x1330004
493	 139	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0x1330004
- stack 0: 0xFFFF
494	 13C	AND		 	 
- stack 1: 0x474
- stack 0: 0x4
495	 13D	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x4
- stack 0: 0x1
496	 13F	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x4
497	 140	PUSH2	0380	 	 
- stack 2: 0x474
- stack 1: 0x4
- stack 0: 0x380
498	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x474
499	 144	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
500	 146	ADD		 	 
- stack 0: 0x478
501	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
502	 148	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x14D045001EE00FF0099000F01A20F0F00CB00F000EA00000201000F01330005
503	 149	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x14D045001EE00FF0099000F01A20F0F00CB00F000EA00000201000F01330005
- stack 0: 0xF0
504	 14B	SHR		 	 
- stack 1: 0x478
- stack 0: 0x14D
505	 14C	JUMP		 	 
- stack 0: 0x478
506	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x478
507	 14E	PUSH2	0060	 	 
- stack 1: 0x478
- stack 0: 0x60
508	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x478
- stack 0: 0xF000F
509	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x478
- stack 1: 0xF000F
- stack 0: 0xFFFFFFFF
510	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x478
- stack 0: 0xF000F
511	 158	PUSH2	03A0	 	 
- stack 2: 0x478
- stack 1: 0xF000F
- stack 0: 0x3A0
512	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x478
- stack 1: 0xF000F
- stack 0: 0xF000F
513	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x478
- stack 2: 0xF000F
- stack 1: 0xF000F
- stack 0: 0xFFFFFFFF
514	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x478
- stack 1: 0xF000F
- stack 0: 0xF000F
515	 162	SUB		 	 
- stack 1: 0x478
- stack 0: 0x0
516	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x16B
517	 166	JUMPI		 	 
- stack 0: 0x478
518	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x478
- stack 0: 0x185
519	 16A	JUMP		 	 
- stack 0: 0x478
520	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x478
521	 186	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
522	 188	ADD		 	 
- stack 0: 0x47C
523	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
524	 18A	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x1EE00FF0099000F01A20F0F00CB00F000EA00000201000F01330005014D0430
525	 18B	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x1EE00FF0099000F01A20F0F00CB00F000EA00000201000F01330005014D0430
- stack 0: 0xF0
526	 18D	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x1EE
527	 18E	JUMP		 	 
- stack 0: 0x47C
528	 1EE	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x47C
529	 1EF	PUSH4	f00ff000	 	 
- stack 1: 0x47C
- stack 0: 0xF00FF000
530	 1F4	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0xF00FF000
- stack 0: 0x20
531	 1F7	MSTORE		 	  ;; # store to x1
- stack 0: 0x47C
532	 1F8	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
533	 1FA	ADD		 	 
- stack 0: 0x480
534	 1FB	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
535	 1FC	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x99000F01A20F0F00CB00F000EA00000201000F01330005014D04300086F010
536	 1FD	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x99000F01A20F0F00CB00F000EA00000201000F01330005014D04300086F010
- stack 0: 0xF0
537	 1FF	SHR		 	 
- stack 1: 0x480
- stack 0: 0x99
538	 200	JUMP		 	 
- stack 0: 0x480
539	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x480
540	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
541	 9B	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x99000F01A20F0F00CB00F000EA00000201000F01330005014D04300086F010
542	 9C	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x99000F01A20F0F00CB00F000EA00000201000F01330005014D04300086F010
- stack 0: 0xE0
543	 9E	SHR		 	 
- stack 1: 0x480
- stack 0: 0x99000F
544	 9F	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x99000F
- stack 0: 0xFFFF
545	 A2	AND		 	 
- stack 1: 0x480
- stack 0: 0xF
546	 A3	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0xF
- stack 0: 0x1
547	 A5	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0xF
548	 A6	PUSH2	0020	 	 
- stack 2: 0x480
- stack 1: 0xF
- stack 0: 0x20
549	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x480
- stack 1: 0xF
- stack 0: 0xF00FF000
550	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x480
- stack 0: 0xF00FF00F
551	 AB	PUSH2	0020	 	 
- stack 2: 0x480
- stack 1: 0xF00FF00F
- stack 0: 0x20
552	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x480
553	 AF	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
554	 B1	ADD		 	 
- stack 0: 0x484
555	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
556	 B3	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x1A20F0F00CB00F000EA00000201000F01330005014D04300086F0100099FF00
557	 B4	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x1A20F0F00CB00F000EA00000201000F01330005014D04300086F0100099FF00
- stack 0: 0xF0
558	 B6	SHR		 	 
- stack 1: 0x484
- stack 0: 0x1A2
559	 B7	JUMP		 	 
- stack 0: 0x484
560	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x484
561	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x484
- stack 0: 0xF0F0F000
562	 1A8	PUSH2	0040	 	 
- stack 2: 0x484
- stack 1: 0xF0F0F000
- stack 0: 0x40
563	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x484
564	 1AC	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
565	 1AE	ADD		 	 
- stack 0: 0x488
566	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
567	 1B0	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xCB00F000EA00000201000F01330005014D04300086F0100099FF0000B8F0F1
568	 1B1	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0xCB00F000EA00000201000F01330005014D04300086F0100099FF0000B8F0F1
- stack 0: 0xF0
569	 1B3	SHR		 	 
- stack 1: 0x488
- stack 0: 0xCB
570	 1B4	JUMP		 	 
- stack 0: 0x488
571	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x488
572	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x488
- stack 0: 0x488
573	 CD	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xCB00F000EA00000201000F01330005014D04300086F0100099FF0000B8F0F1
574	 CE	PUSH1	E0	 	 
- stack 2: 0x488
- stack 1: 0xCB00F000EA00000201000F01330005014D04300086F0100099FF0000B8F0F1
- stack 0: 0xE0
575	 D0	SHR		 	 
- stack 1: 0x488
- stack 0: 0xCB00F0
576	 D1	PUSH2	FFFF	 	 
- stack 2: 0x488
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
577	 D4	AND		 	 
- stack 1: 0x488
- stack 0: 0xF0
578	 D5	PUSH1	01	 	 
- stack 2: 0x488
- stack 1: 0xF0
- stack 0: 0x1
579	 D7	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0xF0
580	 D8	PUSH2	0040	 	 
- stack 2: 0x488
- stack 1: 0xF0
- stack 0: 0x40
581	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x488
- stack 1: 0xF0
- stack 0: 0xF0F0F000
582	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x488
- stack 0: 0xF0F0F0F0
583	 DD	PUSH2	0040	 	 
- stack 2: 0x488
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
584	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x488
585	 E1	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
586	 E3	ADD		 	 
- stack 0: 0x48C
587	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
588	 E5	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0xEA00000201000F01330005014D04300086F0100099FF0000B8F0F100CBFF0F
589	 E6	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0xEA00000201000F01330005014D04300086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xF0
590	 E8	SHR		 	 
- stack 1: 0x48C
- stack 0: 0xEA
591	 E9	JUMP		 	 
- stack 0: 0x48C
592	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x48C
593	 EB	PUSH2	0040	 	 
- stack 1: 0x48C
- stack 0: 0x40
594	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x48C
- stack 0: 0xF0F0F0F0
595	 EF	PUSH2	0020	 	 
- stack 2: 0x48C
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
596	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x48C
- stack 1: 0xF0F0F0F0
- stack 0: 0xF00FF00F
597	 F3	AND		 	  ;; # AND
- stack 1: 0x48C
- stack 0: 0xF000F000
598	 F4	PUSH2	0060	 	 
- stack 2: 0x48C
- stack 1: 0xF000F000
- stack 0: 0x60
599	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x48C
600	 F8	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
601	 FA	ADD		 	 
- stack 0: 0x490
602	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
603	 FC	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x201000F01330005014D04300086F0100099FF0000B8F0F100CBFF0F02140000
604	 FD	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x201000F01330005014D04300086F0100099FF0000B8F0F100CBFF0F02140000
- stack 0: 0xF0
605	 FF	SHR		 	 
- stack 1: 0x490
- stack 0: 0x201
606	 100	JUMP		 	 
- stack 0: 0x490
607	 201	JUMPDEST		 ;; __riscvimpl_LUI_f000feb7	  ;; # instr: lui t4,0xf000f(ignore imm)
- stack 0: 0x490
608	 202	PUSH4	f000f000	 	 
- stack 1: 0x490
- stack 0: 0xF000F000
609	 207	PUSH2	03A0	 	 
- stack 2: 0x490
- stack 1: 0xF000F000
- stack 0: 0x3A0
610	 20A	MSTORE		 	  ;; # store to x29
- stack 0: 0x490
611	 20B	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
612	 20D	ADD		 	 
- stack 0: 0x494
613	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
614	 20F	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x1330005014D04300086F0100099FF0000B8F0F100CBFF0F021400000101F001
615	 210	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x1330005014D04300086F0100099FF0000B8F0F100CBFF0F021400000101F001
- stack 0: 0xF0
616	 212	SHR		 	 
- stack 1: 0x494
- stack 0: 0x133
617	 213	JUMP		 	 
- stack 0: 0x494
618	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x494
619	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
620	 135	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x1330005014D04300086F0100099FF0000B8F0F100CBFF0F021400000101F001
621	 136	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0x1330005014D04300086F0100099FF0000B8F0F100CBFF0F021400000101F001
- stack 0: 0xE0
622	 138	SHR		 	 
- stack 1: 0x494
- stack 0: 0x1330005
623	 139	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0x1330005
- stack 0: 0xFFFF
624	 13C	AND		 	 
- stack 1: 0x494
- stack 0: 0x5
625	 13D	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x5
- stack 0: 0x1
626	 13F	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x5
627	 140	PUSH2	0380	 	 
- stack 2: 0x494
- stack 1: 0x5
- stack 0: 0x380
628	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x494
629	 144	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
630	 146	ADD		 	 
- stack 0: 0x498
631	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
632	 148	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x14D04300086F0100099FF0000B8F0F100CBFF0F021400000101F0010114FF00
633	 149	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x14D04300086F0100099FF0000B8F0F100CBFF0F021400000101F0010114FF00
- stack 0: 0xF0
634	 14B	SHR		 	 
- stack 1: 0x498
- stack 0: 0x14D
635	 14C	JUMP		 	 
- stack 0: 0x498
636	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x498
637	 14E	PUSH2	0060	 	 
- stack 1: 0x498
- stack 0: 0x60
638	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x498
- stack 0: 0xF000F000
639	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x498
- stack 1: 0xF000F000
- stack 0: 0xFFFFFFFF
640	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x498
- stack 0: 0xF000F000
641	 158	PUSH2	03A0	 	 
- stack 2: 0x498
- stack 1: 0xF000F000
- stack 0: 0x3A0
642	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x498
- stack 1: 0xF000F000
- stack 0: 0xF000F000
643	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x498
- stack 2: 0xF000F000
- stack 1: 0xF000F000
- stack 0: 0xFFFFFFFF
644	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x498
- stack 1: 0xF000F000
- stack 0: 0xF000F000
645	 162	SUB		 	 
- stack 1: 0x498
- stack 0: 0x0
646	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0x16B
647	 166	JUMPI		 	 
- stack 0: 0x498
648	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x498
- stack 0: 0x185
649	 16A	JUMP		 	 
- stack 0: 0x498
650	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x498
651	 186	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
652	 188	ADD		 	 
- stack 0: 0x49C
653	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
654	 18A	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F021400000101F0010114FF0001330006
655	 18B	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F021400000101F0010114FF0001330006
- stack 0: 0xF0
656	 18D	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x86
657	 18E	JUMP		 	 
- stack 0: 0x49C
658	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x49C
659	 87	PUSH4	ff010000	 	 
- stack 1: 0x49C
- stack 0: 0xFF010000
660	 8C	PUSH2	0020	 	 
- stack 2: 0x49C
- stack 1: 0xFF010000
- stack 0: 0x20
661	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x49C
662	 90	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
663	 92	ADD		 	 
- stack 0: 0x4A0
664	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
665	 94	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x99FF0000B8F0F100CBFF0F021400000101F0010114FF0001330006022B040C
666	 95	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x99FF0000B8F0F100CBFF0F021400000101F0010114FF0001330006022B040C
- stack 0: 0xF0
667	 97	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x99
668	 98	JUMP		 	 
- stack 0: 0x4A0
669	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4A0
670	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
671	 9B	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x99FF0000B8F0F100CBFF0F021400000101F0010114FF0001330006022B040C
672	 9C	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0x99FF0000B8F0F100CBFF0F021400000101F0010114FF0001330006022B040C
- stack 0: 0xE0
673	 9E	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x99FF00
674	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x99FF00
- stack 0: 0xFFFF
675	 A2	AND		 	 
- stack 1: 0x4A0
- stack 0: 0xFF00
676	 A3	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0xFF00
- stack 0: 0x1
677	 A5	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
678	 A6	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
679	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
680	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4A0
- stack 0: 0xFF00FF00
681	 AB	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0xFF00FF00
- stack 0: 0x20
682	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A0
683	 AF	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
684	 B1	ADD		 	 
- stack 0: 0x4A4
685	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
686	 B3	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xB8F0F100CBFF0F021400000101F0010114FF0001330006022B040C018FFF01
687	 B4	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0xB8F0F100CBFF0F021400000101F0010114FF0001330006022B040C018FFF01
- stack 0: 0xF0
688	 B6	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xB8
689	 B7	JUMP		 	 
- stack 0: 0x4A4
690	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x4A4
691	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x4A4
- stack 0: 0xF0F1000
692	 BE	PUSH2	0040	 	 
- stack 2: 0x4A4
- stack 1: 0xF0F1000
- stack 0: 0x40
693	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x4A4
694	 C2	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
695	 C4	ADD		 	 
- stack 0: 0x4A8
696	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
697	 C6	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xCBFF0F021400000101F0010114FF0001330006022B040C018FFF010099FFF0
698	 C7	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xCBFF0F021400000101F0010114FF0001330006022B040C018FFF010099FFF0
- stack 0: 0xF0
699	 C9	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xCB
700	 CA	JUMP		 	 
- stack 0: 0x4A8
701	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x4A8
702	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
703	 CD	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xCBFF0F021400000101F0010114FF0001330006022B040C018FFF010099FFF0
704	 CE	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0xCBFF0F021400000101F0010114FF0001330006022B040C018FFF010099FFF0
- stack 0: 0xE0
705	 D0	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xCBFF0F
706	 D1	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
707	 D4	AND		 	 
- stack 1: 0x4A8
- stack 0: 0xFF0F
708	 D5	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0xFF0F
- stack 0: 0x1
709	 D7	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
710	 D8	PUSH2	0040	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
711	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
712	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x4A8
- stack 0: 0xF0F0F0F
713	 DD	PUSH2	0040	 	 
- stack 2: 0x4A8
- stack 1: 0xF0F0F0F
- stack 0: 0x40
714	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x4A8
715	 E1	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
716	 E3	ADD		 	 
- stack 0: 0x4AC
717	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
718	 E5	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x21400000101F0010114FF0001330006022B040C018FFF010099FFF001A20F0F
719	 E6	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x21400000101F0010114FF0001330006022B040C018FFF010099FFF001A20F0F
- stack 0: 0xF0
720	 E8	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x214
721	 E9	JUMP		 	 
- stack 0: 0x4AC
722	 214	JUMPDEST		 ;; __riscvimpl_AND_1_1_2	  ;; # instr: and ra,ra,sp(ignore imm)
- stack 0: 0x4AC
723	 215	PUSH2	0040	 	 
- stack 1: 0x4AC
- stack 0: 0x40
724	 218	MLOAD		 	  ;; # read from x2
- stack 1: 0x4AC
- stack 0: 0xF0F0F0F
725	 219	PUSH2	0020	 	 
- stack 2: 0x4AC
- stack 1: 0xF0F0F0F
- stack 0: 0x20
726	 21C	MLOAD		 	  ;; # read from x1
- stack 2: 0x4AC
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
727	 21D	AND		 	  ;; # AND
- stack 1: 0x4AC
- stack 0: 0xF000F00
728	 21E	PUSH2	0020	 	 
- stack 2: 0x4AC
- stack 1: 0xF000F00
- stack 0: 0x20
729	 221	MSTORE		 	  ;; # store to x1
- stack 0: 0x4AC
730	 222	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
731	 224	ADD		 	 
- stack 0: 0x4B0
732	 225	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
733	 226	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x101F0010114FF0001330006022B040C018FFF010099FFF001A20F0F00CB00F0
734	 227	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x101F0010114FF0001330006022B040C018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xF0
735	 229	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x101
736	 22A	JUMP		 	 
- stack 0: 0x4B0
737	 101	JUMPDEST		 ;; __riscvimpl_LUI_f001eb7	  ;; # instr: lui t4,0xf001(ignore imm)
- stack 0: 0x4B0
738	 102	PUSH4	0f001000	 	 
- stack 1: 0x4B0
- stack 0: 0xF001000
739	 107	PUSH2	03A0	 	 
- stack 2: 0x4B0
- stack 1: 0xF001000
- stack 0: 0x3A0
740	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B0
741	 10B	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
742	 10D	ADD		 	 
- stack 0: 0x4B4
743	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
744	 10F	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x114FF0001330006022B040C018FFF010099FFF001A20F0F00CB00F0026D0000
745	 110	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x114FF0001330006022B040C018FFF010099FFF001A20F0F00CB00F0026D0000
- stack 0: 0xF0
746	 112	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x114
747	 113	JUMP		 	 
- stack 0: 0x4B4
748	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x4B4
749	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
750	 116	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x114FF0001330006022B040C018FFF010099FFF001A20F0F00CB00F0026D0000
751	 117	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0x114FF0001330006022B040C018FFF010099FFF001A20F0F00CB00F0026D0000
- stack 0: 0xE0
752	 119	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x114FF00
753	 11A	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x114FF00
- stack 0: 0xFFFF
754	 11D	AND		 	 
- stack 1: 0x4B4
- stack 0: 0xFF00
755	 11E	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0xFF00
- stack 0: 0x1
756	 120	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
757	 121	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
758	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xF001000
759	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x4B4
- stack 0: 0xF000F00
760	 126	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0xF000F00
- stack 0: 0x3A0
761	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B4
762	 12A	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
763	 12C	ADD		 	 
- stack 0: 0x4B8
764	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
765	 12E	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x1330006022B040C018FFF010099FFF001A20F0F00CB00F0026D000001B50F00
766	 12F	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x1330006022B040C018FFF010099FFF001A20F0F00CB00F0026D000001B50F00
- stack 0: 0xF0
767	 131	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x133
768	 132	JUMP		 	 
- stack 0: 0x4B8
769	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4B8
770	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
771	 135	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x1330006022B040C018FFF010099FFF001A20F0F00CB00F0026D000001B50F00
772	 136	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0x1330006022B040C018FFF010099FFF001A20F0F00CB00F0026D000001B50F00
- stack 0: 0xE0
773	 138	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x1330006
774	 139	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x1330006
- stack 0: 0xFFFF
775	 13C	AND		 	 
- stack 1: 0x4B8
- stack 0: 0x6
776	 13D	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0x6
- stack 0: 0x1
777	 13F	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0x6
778	 140	PUSH2	0380	 	 
- stack 2: 0x4B8
- stack 1: 0x6
- stack 0: 0x380
779	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x4B8
780	 144	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
781	 146	ADD		 	 
- stack 0: 0x4BC
782	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
783	 148	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x22B040C018FFF010099FFF001A20F0F00CB00F0026D000001B50F00011400F0
784	 149	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x22B040C018FFF010099FFF001A20F0F00CB00F0026D000001B50F00011400F0
- stack 0: 0xF0
785	 14B	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x22B
786	 14C	JUMP		 	 
- stack 0: 0x4BC
787	 22B	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,40c(ignore imm)
- stack 0: 0x4BC
788	 22C	PUSH2	0020	 	 
- stack 1: 0x4BC
- stack 0: 0x20
789	 22F	MLOAD		 	  ;; # read from x1
- stack 1: 0x4BC
- stack 0: 0xF000F00
790	 230	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4BC
- stack 1: 0xF000F00
- stack 0: 0xFFFFFFFF
791	 235	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4BC
- stack 0: 0xF000F00
792	 236	PUSH2	03A0	 	 
- stack 2: 0x4BC
- stack 1: 0xF000F00
- stack 0: 0x3A0
793	 239	MLOAD		 	  ;; # read from x29
- stack 2: 0x4BC
- stack 1: 0xF000F00
- stack 0: 0xF000F00
794	 23A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4BC
- stack 2: 0xF000F00
- stack 1: 0xF000F00
- stack 0: 0xFFFFFFFF
795	 23F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4BC
- stack 1: 0xF000F00
- stack 0: 0xF000F00
796	 240	SUB		 	 
- stack 1: 0x4BC
- stack 0: 0x0
797	 241	PUSH2	0249	 ;; _neq_bcd9aa3a0dc4df2c0f75cdb01e459221b14fc29f62d894044f03c8e9cf1ecaba	 
- stack 2: 0x4BC
- stack 1: 0x0
- stack 0: 0x249
798	 244	JUMPI		 	 
- stack 0: 0x4BC
799	 245	PUSH2	0263	 ;; _neq_after_bcd9aa3a0dc4df2c0f75cdb01e459221b14fc29f62d894044f03c8e9cf1ecaba	 
- stack 1: 0x4BC
- stack 0: 0x263
800	 248	JUMP		 	 
- stack 0: 0x4BC
801	 263	JUMPDEST		 ;; _neq_after_bcd9aa3a0dc4df2c0f75cdb01e459221b14fc29f62d894044f03c8e9cf1ecaba	 
- stack 0: 0x4BC
802	 264	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
803	 266	ADD		 	 
- stack 0: 0x4C0
804	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
805	 268	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F0026D000001B50F00011400F001330007
806	 269	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F0026D000001B50F00011400F001330007
- stack 0: 0xF0
807	 26B	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x18F
808	 26C	JUMP		 	 
- stack 0: 0x4C0
809	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x4C0
810	 190	PUSH4	0ff01000	 	 
- stack 1: 0x4C0
- stack 0: 0xFF01000
811	 195	PUSH2	0020	 	 
- stack 2: 0x4C0
- stack 1: 0xFF01000
- stack 0: 0x20
812	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C0
813	 199	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
814	 19B	ADD		 	 
- stack 0: 0x4C4
815	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
816	 19D	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x99FFF001A20F0F00CB00F0026D000001B50F00011400F001330007028403E8
817	 19E	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x99FFF001A20F0F00CB00F0026D000001B50F00011400F001330007028403E8
- stack 0: 0xF0
818	 1A0	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x99
819	 1A1	JUMP		 	 
- stack 0: 0x4C4
820	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4C4
821	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
822	 9B	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x99FFF001A20F0F00CB00F0026D000001B50F00011400F001330007028403E8
823	 9C	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0x99FFF001A20F0F00CB00F0026D000001B50F00011400F001330007028403E8
- stack 0: 0xE0
824	 9E	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x99FFF0
825	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
826	 A2	AND		 	 
- stack 1: 0x4C4
- stack 0: 0xFFF0
827	 A3	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0xFFF0
- stack 0: 0x1
828	 A5	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
829	 A6	PUSH2	0020	 	 
- stack 2: 0x4C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
830	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
831	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4C4
- stack 0: 0xFF00FF0
832	 AB	PUSH2	0020	 	 
- stack 2: 0x4C4
- stack 1: 0xFF00FF0
- stack 0: 0x20
833	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C4
834	 AF	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
835	 B1	ADD		 	 
- stack 0: 0x4C8
836	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
837	 B3	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x1A20F0F00CB00F0026D000001B50F00011400F001330007028403E80086F010
838	 B4	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x1A20F0F00CB00F0026D000001B50F00011400F001330007028403E80086F010
- stack 0: 0xF0
839	 B6	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x1A2
840	 B7	JUMP		 	 
- stack 0: 0x4C8
841	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x4C8
842	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x4C8
- stack 0: 0xF0F0F000
843	 1A8	PUSH2	0040	 	 
- stack 2: 0x4C8
- stack 1: 0xF0F0F000
- stack 0: 0x40
844	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x4C8
845	 1AC	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
846	 1AE	ADD		 	 
- stack 0: 0x4CC
847	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
848	 1B0	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xCB00F0026D000001B50F00011400F001330007028403E80086F0100099FF00
849	 1B1	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0xCB00F0026D000001B50F00011400F001330007028403E80086F0100099FF00
- stack 0: 0xF0
850	 1B3	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xCB
851	 1B4	JUMP		 	 
- stack 0: 0x4CC
852	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x4CC
853	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
854	 CD	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xCB00F0026D000001B50F00011400F001330007028403E80086F0100099FF00
855	 CE	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0xCB00F0026D000001B50F00011400F001330007028403E80086F0100099FF00
- stack 0: 0xE0
856	 D0	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xCB00F0
857	 D1	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
858	 D4	AND		 	 
- stack 1: 0x4CC
- stack 0: 0xF0
859	 D5	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0xF0
- stack 0: 0x1
860	 D7	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0xF0
861	 D8	PUSH2	0040	 	 
- stack 2: 0x4CC
- stack 1: 0xF0
- stack 0: 0x40
862	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x4CC
- stack 1: 0xF0
- stack 0: 0xF0F0F000
863	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x4CC
- stack 0: 0xF0F0F0F0
864	 DD	PUSH2	0040	 	 
- stack 2: 0x4CC
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
865	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x4CC
866	 E1	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
867	 E3	ADD		 	 
- stack 0: 0x4D0
868	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
869	 E5	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x26D000001B50F00011400F001330007028403E80086F0100099FF0002C60000
870	 E6	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x26D000001B50F00011400F001330007028403E80086F0100099FF0002C60000
- stack 0: 0xF0
871	 E8	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x26D
872	 E9	JUMP		 	 
- stack 0: 0x4D0
873	 26D	JUMPDEST		 ;; __riscvimpl_AND_2_1_2	  ;; # instr: and sp,ra,sp(ignore imm)
- stack 0: 0x4D0
874	 26E	PUSH2	0040	 	 
- stack 1: 0x4D0
- stack 0: 0x40
875	 271	MLOAD		 	  ;; # read from x2
- stack 1: 0x4D0
- stack 0: 0xF0F0F0F0
876	 272	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
877	 275	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D0
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
878	 276	AND		 	  ;; # AND
- stack 1: 0x4D0
- stack 0: 0xF000F0
879	 277	PUSH2	0040	 	 
- stack 2: 0x4D0
- stack 1: 0xF000F0
- stack 0: 0x40
880	 27A	MSTORE		 	  ;; # store to x2
- stack 0: 0x4D0
881	 27B	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
882	 27D	ADD		 	 
- stack 0: 0x4D4
883	 27E	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
884	 27F	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x1B50F00011400F001330007028403E80086F0100099FF0002C6000002DDF010
885	 280	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x1B50F00011400F001330007028403E80086F0100099FF0002C6000002DDF010
- stack 0: 0xF0
886	 282	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x1B5
887	 283	JUMP		 	 
- stack 0: 0x4D4
888	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00eb7	  ;; # instr: lui t4,0xf00(ignore imm)
- stack 0: 0x4D4
889	 1B6	PUSH4	00f00000	 	 
- stack 1: 0x4D4
- stack 0: 0xF00000
890	 1BB	PUSH2	03A0	 	 
- stack 2: 0x4D4
- stack 1: 0xF00000
- stack 0: 0x3A0
891	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D4
892	 1BF	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
893	 1C1	ADD		 	 
- stack 0: 0x4D8
894	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
895	 1C3	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x11400F001330007028403E80086F0100099FF0002C6000002DDF0100114FF00
896	 1C4	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x11400F001330007028403E80086F0100099FF0002C6000002DDF0100114FF00
- stack 0: 0xF0
897	 1C6	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x114
898	 1C7	JUMP		 	 
- stack 0: 0x4D8
899	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x4D8
900	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
901	 116	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x11400F001330007028403E80086F0100099FF0002C6000002DDF0100114FF00
902	 117	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0x11400F001330007028403E80086F0100099FF0002C6000002DDF0100114FF00
- stack 0: 0xE0
903	 119	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x11400F0
904	 11A	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x11400F0
- stack 0: 0xFFFF
905	 11D	AND		 	 
- stack 1: 0x4D8
- stack 0: 0xF0
906	 11E	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0xF0
- stack 0: 0x1
907	 120	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0xF0
908	 121	PUSH2	03A0	 	 
- stack 2: 0x4D8
- stack 1: 0xF0
- stack 0: 0x3A0
909	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x4D8
- stack 1: 0xF0
- stack 0: 0xF00000
910	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x4D8
- stack 0: 0xF000F0
911	 126	PUSH2	03A0	 	 
- stack 2: 0x4D8
- stack 1: 0xF000F0
- stack 0: 0x3A0
912	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D8
913	 12A	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
914	 12C	ADD		 	 
- stack 0: 0x4DC
915	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
916	 12E	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x1330007028403E80086F0100099FF0002C6000002DDF0100114FF0001330008
917	 12F	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x1330007028403E80086F0100099FF0002C6000002DDF0100114FF0001330008
- stack 0: 0xF0
918	 131	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x133
919	 132	JUMP		 	 
- stack 0: 0x4DC
920	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4DC
921	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
922	 135	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x1330007028403E80086F0100099FF0002C6000002DDF0100114FF0001330008
923	 136	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0x1330007028403E80086F0100099FF0002C6000002DDF0100114FF0001330008
- stack 0: 0xE0
924	 138	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x1330007
925	 139	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x1330007
- stack 0: 0xFFFF
926	 13C	AND		 	 
- stack 1: 0x4DC
- stack 0: 0x7
927	 13D	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0x7
- stack 0: 0x1
928	 13F	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0x7
929	 140	PUSH2	0380	 	 
- stack 2: 0x4DC
- stack 1: 0x7
- stack 0: 0x380
930	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x4DC
931	 144	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
932	 146	ADD		 	 
- stack 0: 0x4E0
933	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
934	 148	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x28403E80086F0100099FF0002C6000002DDF0100114FF0001330008022B03CC
935	 149	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x28403E80086F0100099FF0002C6000002DDF0100114FF0001330008022B03CC
- stack 0: 0xF0
936	 14B	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x284
937	 14C	JUMP		 	 
- stack 0: 0x4E0
938	 284	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,3e8(ignore imm)
- stack 0: 0x4E0
939	 285	PUSH2	0040	 	 
- stack 1: 0x4E0
- stack 0: 0x40
940	 288	MLOAD		 	  ;; # read from x2
- stack 1: 0x4E0
- stack 0: 0xF000F0
941	 289	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E0
- stack 1: 0xF000F0
- stack 0: 0xFFFFFFFF
942	 28E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E0
- stack 0: 0xF000F0
943	 28F	PUSH2	03A0	 	 
- stack 2: 0x4E0
- stack 1: 0xF000F0
- stack 0: 0x3A0
944	 292	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E0
- stack 1: 0xF000F0
- stack 0: 0xF000F0
945	 293	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E0
- stack 2: 0xF000F0
- stack 1: 0xF000F0
- stack 0: 0xFFFFFFFF
946	 298	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E0
- stack 1: 0xF000F0
- stack 0: 0xF000F0
947	 299	SUB		 	 
- stack 1: 0x4E0
- stack 0: 0x0
948	 29A	PUSH2	02A2	 ;; _neq_f15815ee127881859fac9f9bc0c26de635c51b738047cf1a54aea4ac31ec16dd	 
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x2A2
949	 29D	JUMPI		 	 
- stack 0: 0x4E0
950	 29E	PUSH2	02BC	 ;; _neq_after_f15815ee127881859fac9f9bc0c26de635c51b738047cf1a54aea4ac31ec16dd	 
- stack 1: 0x4E0
- stack 0: 0x2BC
951	 2A1	JUMP		 	 
- stack 0: 0x4E0
952	 2BC	JUMPDEST		 ;; _neq_after_f15815ee127881859fac9f9bc0c26de635c51b738047cf1a54aea4ac31ec16dd	 
- stack 0: 0x4E0
953	 2BD	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
954	 2BF	ADD		 	 
- stack 0: 0x4E4
955	 2C0	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
956	 2C1	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x86F0100099FF0002C6000002DDF0100114FF0001330008022B03CC02F00000
957	 2C2	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x86F0100099FF0002C6000002DDF0100114FF0001330008022B03CC02F00000
- stack 0: 0xF0
958	 2C4	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x86
959	 2C5	JUMP		 	 
- stack 0: 0x4E4
960	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x4E4
961	 87	PUSH4	ff010000	 	 
- stack 1: 0x4E4
- stack 0: 0xFF010000
962	 8C	PUSH2	0020	 	 
- stack 2: 0x4E4
- stack 1: 0xFF010000
- stack 0: 0x20
963	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E4
964	 90	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
965	 92	ADD		 	 
- stack 0: 0x4E8
966	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
967	 94	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x99FF0002C6000002DDF0100114FF0001330008022B03CC02F000000086F010
968	 95	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x99FF0002C6000002DDF0100114FF0001330008022B03CC02F000000086F010
- stack 0: 0xF0
969	 97	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x99
970	 98	JUMP		 	 
- stack 0: 0x4E8
971	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4E8
972	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
973	 9B	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x99FF0002C6000002DDF0100114FF0001330008022B03CC02F000000086F010
974	 9C	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0x99FF0002C6000002DDF0100114FF0001330008022B03CC02F000000086F010
- stack 0: 0xE0
975	 9E	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x99FF00
976	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x99FF00
- stack 0: 0xFFFF
977	 A2	AND		 	 
- stack 1: 0x4E8
- stack 0: 0xFF00
978	 A3	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0xFF00
- stack 0: 0x1
979	 A5	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
980	 A6	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
981	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
982	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4E8
- stack 0: 0xFF00FF00
983	 AB	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0xFF00FF00
- stack 0: 0x20
984	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E8
985	 AF	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
986	 B1	ADD		 	 
- stack 0: 0x4EC
987	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
988	 B3	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x2C6000002DDF0100114FF0001330008022B03CC02F000000086F0100099FF00
989	 B4	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x2C6000002DDF0100114FF0001330008022B03CC02F000000086F0100099FF00
- stack 0: 0xF0
990	 B6	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x2C6
991	 B7	JUMP		 	 
- stack 0: 0x4EC
992	 2C6	JUMPDEST		 ;; __riscvimpl_AND_1_1_1	  ;; # instr: and ra,ra,ra(ignore imm)
- stack 0: 0x4EC
993	 2C7	PUSH2	0020	 	 
- stack 1: 0x4EC
- stack 0: 0x20
994	 2CA	MLOAD		 	  ;; # read from x1
- stack 1: 0x4EC
- stack 0: 0xFF00FF00
995	 2CB	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0xFF00FF00
- stack 0: 0x20
996	 2CE	MLOAD		 	  ;; # read from x1
- stack 2: 0x4EC
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
997	 2CF	AND		 	  ;; # AND
- stack 1: 0x4EC
- stack 0: 0xFF00FF00
998	 2D0	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0xFF00FF00
- stack 0: 0x20
999	 2D3	MSTORE		 	  ;; # store to x1
- stack 0: 0x4EC
1000	 2D4	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1001	 2D6	ADD		 	 
- stack 0: 0x4F0
1002	 2D7	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1003	 2D8	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x2DDF0100114FF0001330008022B03CC02F000000086F0100099FF0000B8F0F1
1004	 2D9	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x2DDF0100114FF0001330008022B03CC02F000000086F0100099FF0000B8F0F1
- stack 0: 0xF0
1005	 2DB	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x2DD
1006	 2DC	JUMP		 	 
- stack 0: 0x4F0
1007	 2DD	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x4F0
1008	 2DE	PUSH4	ff010000	 	 
- stack 1: 0x4F0
- stack 0: 0xFF010000
1009	 2E3	PUSH2	03A0	 	 
- stack 2: 0x4F0
- stack 1: 0xFF010000
- stack 0: 0x3A0
1010	 2E6	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F0
1011	 2E7	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1012	 2E9	ADD		 	 
- stack 0: 0x4F4
1013	 2EA	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1014	 2EB	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x114FF0001330008022B03CC02F000000086F0100099FF0000B8F0F100CBFF0F
1015	 2EC	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x114FF0001330008022B03CC02F000000086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xF0
1016	 2EE	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x114
1017	 2EF	JUMP		 	 
- stack 0: 0x4F4
1018	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x4F4
1019	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1020	 116	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x114FF0001330008022B03CC02F000000086F0100099FF0000B8F0F100CBFF0F
1021	 117	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x114FF0001330008022B03CC02F000000086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xE0
1022	 119	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x114FF00
1023	 11A	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x114FF00
- stack 0: 0xFFFF
1024	 11D	AND		 	 
- stack 1: 0x4F4
- stack 0: 0xFF00
1025	 11E	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0xFF00
- stack 0: 0x1
1026	 120	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1027	 121	PUSH2	03A0	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
1028	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
1029	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x4F4
- stack 0: 0xFF00FF00
1030	 126	PUSH2	03A0	 	 
- stack 2: 0x4F4
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
1031	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F4
1032	 12A	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1033	 12C	ADD		 	 
- stack 0: 0x4F8
1034	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1035	 12E	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x1330008022B03CC02F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
1036	 12F	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x1330008022B03CC02F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
1037	 131	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x133
1038	 132	JUMP		 	 
- stack 0: 0x4F8
1039	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4F8
1040	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1041	 135	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x1330008022B03CC02F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
1042	 136	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x1330008022B03CC02F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
1043	 138	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x1330008
1044	 139	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x1330008
- stack 0: 0xFFFF
1045	 13C	AND		 	 
- stack 1: 0x4F8
- stack 0: 0x8
1046	 13D	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x8
- stack 0: 0x1
1047	 13F	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x8
1048	 140	PUSH2	0380	 	 
- stack 2: 0x4F8
- stack 1: 0x8
- stack 0: 0x380
1049	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x4F8
1050	 144	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1051	 146	ADD		 	 
- stack 0: 0x4FC
1052	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1053	 148	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x22B03CC02F000000086F0100099FF0000B8F0F100CBFF0F00EA0000030A0000
1054	 149	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x22B03CC02F000000086F0100099FF0000B8F0F100CBFF0F00EA0000030A0000
- stack 0: 0xF0
1055	 14B	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x22B
1056	 14C	JUMP		 	 
- stack 0: 0x4FC
1057	 22B	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,40c(ignore imm)
- stack 0: 0x4FC
1058	 22C	PUSH2	0020	 	 
- stack 1: 0x4FC
- stack 0: 0x20
1059	 22F	MLOAD		 	  ;; # read from x1
- stack 1: 0x4FC
- stack 0: 0xFF00FF00
1060	 230	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
1061	 235	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0xFF00FF00
1062	 236	PUSH2	03A0	 	 
- stack 2: 0x4FC
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
1063	 239	MLOAD		 	  ;; # read from x29
- stack 2: 0x4FC
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
1064	 23A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4FC
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
1065	 23F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4FC
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
1066	 240	SUB		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1067	 241	PUSH2	0249	 ;; _neq_bcd9aa3a0dc4df2c0f75cdb01e459221b14fc29f62d894044f03c8e9cf1ecaba	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x249
1068	 244	JUMPI		 	 
- stack 0: 0x4FC
1069	 245	PUSH2	0263	 ;; _neq_after_bcd9aa3a0dc4df2c0f75cdb01e459221b14fc29f62d894044f03c8e9cf1ecaba	 
- stack 1: 0x4FC
- stack 0: 0x263
1070	 248	JUMP		 	 
- stack 0: 0x4FC
1071	 263	JUMPDEST		 ;; _neq_after_bcd9aa3a0dc4df2c0f75cdb01e459221b14fc29f62d894044f03c8e9cf1ecaba	 
- stack 0: 0x4FC
1072	 264	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1073	 266	ADD		 	 
- stack 0: 0x500
1074	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1075	 268	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA0000030A000003290001
1076	 269	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA0000030A000003290001
- stack 0: 0xF0
1077	 26B	SHR		 	 
- stack 1: 0x500
- stack 0: 0x2F0
1078	 26C	JUMP		 	 
- stack 0: 0x500
1079	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x500
1080	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1081	 2F2	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA0000030A000003290001
1082	 2F3	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA0000030A000003290001
- stack 0: 0xE0
1083	 2F5	SHR		 	 
- stack 1: 0x500
- stack 0: 0x2F00000
1084	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x2F00000
- stack 0: 0xFFFF
1085	 2F9	AND		 	 
- stack 1: 0x500
- stack 0: 0x0
1086	 2FA	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x1
1087	 2FC	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0x0
1088	 2FD	PUSH2	0080	 	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x80
1089	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x500
1090	 301	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1091	 303	ADD		 	 
- stack 0: 0x504
1092	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1093	 305	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F00EA0000030A00000329000103480002
1094	 306	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F00EA0000030A00000329000103480002
- stack 0: 0xF0
1095	 308	SHR		 	 
- stack 1: 0x504
- stack 0: 0x86
1096	 309	JUMP		 	 
- stack 0: 0x504
1097	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x504
1098	 87	PUSH4	ff010000	 	 
- stack 1: 0x504
- stack 0: 0xFF010000
1099	 8C	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0xFF010000
- stack 0: 0x20
1100	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x504
1101	 90	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1102	 92	ADD		 	 
- stack 0: 0x508
1103	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1104	 94	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
1105	 95	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
- stack 0: 0xF0
1106	 97	SHR		 	 
- stack 1: 0x508
- stack 0: 0x99
1107	 98	JUMP		 	 
- stack 0: 0x508
1108	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x508
1109	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1110	 9B	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
1111	 9C	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
- stack 0: 0xE0
1112	 9E	SHR		 	 
- stack 1: 0x508
- stack 0: 0x99FF00
1113	 9F	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x99FF00
- stack 0: 0xFFFF
1114	 A2	AND		 	 
- stack 1: 0x508
- stack 0: 0xFF00
1115	 A3	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xFF00
- stack 0: 0x1
1116	 A5	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1117	 A6	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
1118	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
1119	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x508
- stack 0: 0xFF00FF00
1120	 AB	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xFF00FF00
- stack 0: 0x20
1121	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x508
1122	 AF	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1123	 B1	ADD		 	 
- stack 0: 0x50C
1124	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1125	 B3	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xB8F0F100CBFF0F00EA0000030A000003290001034800020362FFE00101F001
1126	 B4	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xB8F0F100CBFF0F00EA0000030A000003290001034800020362FFE00101F001
- stack 0: 0xF0
1127	 B6	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xB8
1128	 B7	JUMP		 	 
- stack 0: 0x50C
1129	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x50C
1130	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x50C
- stack 0: 0xF0F1000
1131	 BE	PUSH2	0040	 	 
- stack 2: 0x50C
- stack 1: 0xF0F1000
- stack 0: 0x40
1132	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x50C
1133	 C2	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1134	 C4	ADD		 	 
- stack 0: 0x510
1135	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1136	 C6	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F0010114FF00
1137	 C7	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F0010114FF00
- stack 0: 0xF0
1138	 C9	SHR		 	 
- stack 1: 0x510
- stack 0: 0xCB
1139	 CA	JUMP		 	 
- stack 0: 0x510
1140	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x510
1141	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1142	 CD	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F0010114FF00
1143	 CE	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F0010114FF00
- stack 0: 0xE0
1144	 D0	SHR		 	 
- stack 1: 0x510
- stack 0: 0xCBFF0F
1145	 D1	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
1146	 D4	AND		 	 
- stack 1: 0x510
- stack 0: 0xFF0F
1147	 D5	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0xFF0F
- stack 0: 0x1
1148	 D7	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
1149	 D8	PUSH2	0040	 	 
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
1150	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
1151	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x510
- stack 0: 0xF0F0F0F
1152	 DD	PUSH2	0040	 	 
- stack 2: 0x510
- stack 1: 0xF0F0F0F
- stack 0: 0x40
1153	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x510
1154	 E1	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1155	 E3	ADD		 	 
- stack 0: 0x514
1156	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1157	 E5	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xEA0000030A000003290001034800020362FFE00101F0010114FF0001330009
1158	 E6	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xEA0000030A000003290001034800020362FFE00101F0010114FF0001330009
- stack 0: 0xF0
1159	 E8	SHR		 	 
- stack 1: 0x514
- stack 0: 0xEA
1160	 E9	JUMP		 	 
- stack 0: 0x514
1161	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x514
1162	 EB	PUSH2	0040	 	 
- stack 1: 0x514
- stack 0: 0x40
1163	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x514
- stack 0: 0xF0F0F0F
1164	 EF	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0xF0F0F0F
- stack 0: 0x20
1165	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x514
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
1166	 F3	AND		 	  ;; # AND
- stack 1: 0x514
- stack 0: 0xF000F00
1167	 F4	PUSH2	0060	 	 
- stack 2: 0x514
- stack 1: 0xF000F00
- stack 0: 0x60
1168	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x514
1169	 F8	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1170	 FA	ADD		 	 
- stack 0: 0x518
1171	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1172	 FC	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x30A000003290001034800020362FFE00101F0010114FF000133000903A40394
1173	 FD	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x30A000003290001034800020362FFE00101F0010114FF000133000903A40394
- stack 0: 0xF0
1174	 FF	SHR		 	 
- stack 1: 0x518
- stack 0: 0x30A
1175	 100	JUMP		 	 
- stack 0: 0x518
1176	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x518
1177	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1178	 30C	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x30A000003290001034800020362FFE00101F0010114FF000133000903A40394
1179	 30D	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x30A000003290001034800020362FFE00101F0010114FF000133000903A40394
- stack 0: 0xE0
1180	 30F	SHR		 	 
- stack 1: 0x518
- stack 0: 0x30A0000
1181	 310	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x30A0000
- stack 0: 0xFFFF
1182	 313	AND		 	 
- stack 1: 0x518
- stack 0: 0x0
1183	 314	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x1
1184	 316	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x0
1185	 317	PUSH2	0060	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x60
1186	 31A	MLOAD		 	  ;; # read from x3
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xF000F00
1187	 31B	ADD		 	  ;; # ADDI 3
- stack 1: 0x518
- stack 0: 0xF000F00
1188	 31C	PUSH2	00C0	 	 
- stack 2: 0x518
- stack 1: 0xF000F00
- stack 0: 0xC0
1189	 31F	MSTORE		 	  ;; # store to x6
- stack 0: 0x518
1190	 320	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1191	 322	ADD		 	 
- stack 0: 0x51C
1192	 323	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1193	 324	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x3290001034800020362FFE00101F0010114FF000133000903A4039402F00000
1194	 325	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x3290001034800020362FFE00101F0010114FF000133000903A4039402F00000
- stack 0: 0xF0
1195	 327	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x329
1196	 328	JUMP		 	 
- stack 0: 0x51C
1197	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x51C
1198	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1199	 32B	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x3290001034800020362FFE00101F0010114FF000133000903A4039402F00000
1200	 32C	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x3290001034800020362FFE00101F0010114FF000133000903A4039402F00000
- stack 0: 0xE0
1201	 32E	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x3290001
1202	 32F	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x3290001
- stack 0: 0xFFFF
1203	 332	AND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1204	 333	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x1
1205	 335	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1206	 336	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x80
1207	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x0
1208	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x51C
- stack 0: 0x1
1209	 33B	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x80
1210	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x51C
1211	 33F	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1212	 341	ADD		 	 
- stack 0: 0x520
1213	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1214	 343	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x34800020362FFE00101F0010114FF000133000903A4039402F00000018FFF01
1215	 344	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x34800020362FFE00101F0010114FF000133000903A4039402F00000018FFF01
- stack 0: 0xF0
1216	 346	SHR		 	 
- stack 1: 0x520
- stack 0: 0x348
1217	 347	JUMP		 	 
- stack 0: 0x520
1218	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x520
1219	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1220	 34A	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x34800020362FFE00101F0010114FF000133000903A4039402F00000018FFF01
1221	 34B	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x34800020362FFE00101F0010114FF000133000903A4039402F00000018FFF01
- stack 0: 0xE0
1222	 34D	SHR		 	 
- stack 1: 0x520
- stack 0: 0x3480002
1223	 34E	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x3480002
- stack 0: 0xFFFF
1224	 351	AND		 	 
- stack 1: 0x520
- stack 0: 0x2
1225	 352	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0x1
1226	 354	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x2
1227	 355	PUSH2	00A0	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0xA0
1228	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x520
1229	 359	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1230	 35B	ADD		 	 
- stack 0: 0x524
1231	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1232	 35D	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x362FFE00101F0010114FF000133000903A4039402F00000018FFF010099FFF0
1233	 35E	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x362FFE00101F0010114FF000133000903A4039402F00000018FFF010099FFF0
- stack 0: 0xF0
1234	 360	SHR		 	 
- stack 1: 0x524
- stack 0: 0x362
1235	 361	JUMP		 	 
- stack 0: 0x524
1236	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x524
1237	 363	PUSH2	0080	 	 
- stack 1: 0x524
- stack 0: 0x80
1238	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x524
- stack 0: 0x1
1239	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1240	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x524
- stack 0: 0x1
1241	 36D	PUSH2	00A0	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0xA0
1242	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x2
1243	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x524
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1244	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x2
1245	 377	SUB		 	 
- stack 1: 0x524
- stack 0: 0x1
1246	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x380
1247	 37B	JUMPI		 	 
- stack 0: 0x524
1248	 380	JUMPDEST		 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x524
1249	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1250	 382	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x362FFE00101F0010114FF000133000903A4039402F00000018FFF010099FFF0
1251	 383	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x362FFE00101F0010114FF000133000903A4039402F00000018FFF010099FFF0
- stack 0: 0xE0
1252	 385	SHR		 	 
- stack 1: 0x524
- stack 0: 0x362FFE0
1253	 386	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x362FFE0
- stack 0: 0xFFFF
1254	 389	AND		 	 
- stack 1: 0x524
- stack 0: 0xFFE0
1255	 38A	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0xFFE0
- stack 0: 0x1
1256	 38C	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1257	 38D	ADD		 	 
- stack 0: 0x504
1258	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x504
- stack 0: 0xFFFFFFFF
1259	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x504
1260	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1261	 395	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F00EA0000030A00000329000103480002
1262	 396	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F00EA0000030A00000329000103480002
- stack 0: 0xF0
1263	 398	SHR		 	 
- stack 1: 0x504
- stack 0: 0x86
1264	 399	JUMP		 	 
- stack 0: 0x504
1265	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x504
1266	 87	PUSH4	ff010000	 	 
- stack 1: 0x504
- stack 0: 0xFF010000
1267	 8C	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0xFF010000
- stack 0: 0x20
1268	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x504
1269	 90	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1270	 92	ADD		 	 
- stack 0: 0x508
1271	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1272	 94	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
1273	 95	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
- stack 0: 0xF0
1274	 97	SHR		 	 
- stack 1: 0x508
- stack 0: 0x99
1275	 98	JUMP		 	 
- stack 0: 0x508
1276	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x508
1277	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1278	 9B	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
1279	 9C	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
- stack 0: 0xE0
1280	 9E	SHR		 	 
- stack 1: 0x508
- stack 0: 0x99FF00
1281	 9F	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x99FF00
- stack 0: 0xFFFF
1282	 A2	AND		 	 
- stack 1: 0x508
- stack 0: 0xFF00
1283	 A3	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xFF00
- stack 0: 0x1
1284	 A5	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1285	 A6	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
1286	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
1287	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x508
- stack 0: 0xFF00FF00
1288	 AB	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xFF00FF00
- stack 0: 0x20
1289	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x508
1290	 AF	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1291	 B1	ADD		 	 
- stack 0: 0x50C
1292	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1293	 B3	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xB8F0F100CBFF0F00EA0000030A000003290001034800020362FFE00101F001
1294	 B4	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xB8F0F100CBFF0F00EA0000030A000003290001034800020362FFE00101F001
- stack 0: 0xF0
1295	 B6	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xB8
1296	 B7	JUMP		 	 
- stack 0: 0x50C
1297	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x50C
1298	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x50C
- stack 0: 0xF0F1000
1299	 BE	PUSH2	0040	 	 
- stack 2: 0x50C
- stack 1: 0xF0F1000
- stack 0: 0x40
1300	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x50C
1301	 C2	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1302	 C4	ADD		 	 
- stack 0: 0x510
1303	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1304	 C6	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F0010114FF00
1305	 C7	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F0010114FF00
- stack 0: 0xF0
1306	 C9	SHR		 	 
- stack 1: 0x510
- stack 0: 0xCB
1307	 CA	JUMP		 	 
- stack 0: 0x510
1308	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x510
1309	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1310	 CD	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F0010114FF00
1311	 CE	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F0010114FF00
- stack 0: 0xE0
1312	 D0	SHR		 	 
- stack 1: 0x510
- stack 0: 0xCBFF0F
1313	 D1	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
1314	 D4	AND		 	 
- stack 1: 0x510
- stack 0: 0xFF0F
1315	 D5	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0xFF0F
- stack 0: 0x1
1316	 D7	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
1317	 D8	PUSH2	0040	 	 
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
1318	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
1319	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x510
- stack 0: 0xF0F0F0F
1320	 DD	PUSH2	0040	 	 
- stack 2: 0x510
- stack 1: 0xF0F0F0F
- stack 0: 0x40
1321	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x510
1322	 E1	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1323	 E3	ADD		 	 
- stack 0: 0x514
1324	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1325	 E5	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xEA0000030A000003290001034800020362FFE00101F0010114FF0001330009
1326	 E6	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xEA0000030A000003290001034800020362FFE00101F0010114FF0001330009
- stack 0: 0xF0
1327	 E8	SHR		 	 
- stack 1: 0x514
- stack 0: 0xEA
1328	 E9	JUMP		 	 
- stack 0: 0x514
1329	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x514
1330	 EB	PUSH2	0040	 	 
- stack 1: 0x514
- stack 0: 0x40
1331	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x514
- stack 0: 0xF0F0F0F
1332	 EF	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0xF0F0F0F
- stack 0: 0x20
1333	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x514
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
1334	 F3	AND		 	  ;; # AND
- stack 1: 0x514
- stack 0: 0xF000F00
1335	 F4	PUSH2	0060	 	 
- stack 2: 0x514
- stack 1: 0xF000F00
- stack 0: 0x60
1336	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x514
1337	 F8	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1338	 FA	ADD		 	 
- stack 0: 0x518
1339	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1340	 FC	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x30A000003290001034800020362FFE00101F0010114FF000133000903A40394
1341	 FD	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x30A000003290001034800020362FFE00101F0010114FF000133000903A40394
- stack 0: 0xF0
1342	 FF	SHR		 	 
- stack 1: 0x518
- stack 0: 0x30A
1343	 100	JUMP		 	 
- stack 0: 0x518
1344	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x518
1345	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1346	 30C	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x30A000003290001034800020362FFE00101F0010114FF000133000903A40394
1347	 30D	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x30A000003290001034800020362FFE00101F0010114FF000133000903A40394
- stack 0: 0xE0
1348	 30F	SHR		 	 
- stack 1: 0x518
- stack 0: 0x30A0000
1349	 310	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x30A0000
- stack 0: 0xFFFF
1350	 313	AND		 	 
- stack 1: 0x518
- stack 0: 0x0
1351	 314	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x1
1352	 316	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x0
1353	 317	PUSH2	0060	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x60
1354	 31A	MLOAD		 	  ;; # read from x3
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xF000F00
1355	 31B	ADD		 	  ;; # ADDI 3
- stack 1: 0x518
- stack 0: 0xF000F00
1356	 31C	PUSH2	00C0	 	 
- stack 2: 0x518
- stack 1: 0xF000F00
- stack 0: 0xC0
1357	 31F	MSTORE		 	  ;; # store to x6
- stack 0: 0x518
1358	 320	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1359	 322	ADD		 	 
- stack 0: 0x51C
1360	 323	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1361	 324	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x3290001034800020362FFE00101F0010114FF000133000903A4039402F00000
1362	 325	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x3290001034800020362FFE00101F0010114FF000133000903A4039402F00000
- stack 0: 0xF0
1363	 327	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x329
1364	 328	JUMP		 	 
- stack 0: 0x51C
1365	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x51C
1366	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1367	 32B	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x3290001034800020362FFE00101F0010114FF000133000903A4039402F00000
1368	 32C	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x3290001034800020362FFE00101F0010114FF000133000903A4039402F00000
- stack 0: 0xE0
1369	 32E	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x3290001
1370	 32F	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x3290001
- stack 0: 0xFFFF
1371	 332	AND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1372	 333	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x1
1373	 335	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1374	 336	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x80
1375	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x1
1376	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x51C
- stack 0: 0x2
1377	 33B	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0x80
1378	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x51C
1379	 33F	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1380	 341	ADD		 	 
- stack 0: 0x520
1381	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1382	 343	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x34800020362FFE00101F0010114FF000133000903A4039402F00000018FFF01
1383	 344	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x34800020362FFE00101F0010114FF000133000903A4039402F00000018FFF01
- stack 0: 0xF0
1384	 346	SHR		 	 
- stack 1: 0x520
- stack 0: 0x348
1385	 347	JUMP		 	 
- stack 0: 0x520
1386	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x520
1387	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1388	 34A	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x34800020362FFE00101F0010114FF000133000903A4039402F00000018FFF01
1389	 34B	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x34800020362FFE00101F0010114FF000133000903A4039402F00000018FFF01
- stack 0: 0xE0
1390	 34D	SHR		 	 
- stack 1: 0x520
- stack 0: 0x3480002
1391	 34E	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x3480002
- stack 0: 0xFFFF
1392	 351	AND		 	 
- stack 1: 0x520
- stack 0: 0x2
1393	 352	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0x1
1394	 354	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x2
1395	 355	PUSH2	00A0	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0xA0
1396	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x520
1397	 359	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1398	 35B	ADD		 	 
- stack 0: 0x524
1399	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1400	 35D	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x362FFE00101F0010114FF000133000903A4039402F00000018FFF010099FFF0
1401	 35E	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x362FFE00101F0010114FF000133000903A4039402F00000018FFF010099FFF0
- stack 0: 0xF0
1402	 360	SHR		 	 
- stack 1: 0x524
- stack 0: 0x362
1403	 361	JUMP		 	 
- stack 0: 0x524
1404	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x524
1405	 363	PUSH2	0080	 	 
- stack 1: 0x524
- stack 0: 0x80
1406	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x524
- stack 0: 0x2
1407	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1408	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x524
- stack 0: 0x2
1409	 36D	PUSH2	00A0	 	 
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0xA0
1410	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0x2
1411	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x524
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1412	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0x2
1413	 377	SUB		 	 
- stack 1: 0x524
- stack 0: 0x0
1414	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x380
1415	 37B	JUMPI		 	 
- stack 0: 0x524
1416	 37C	PUSH2	039A	 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 1: 0x524
- stack 0: 0x39A
1417	 37F	JUMP		 	 
- stack 0: 0x524
1418	 39A	JUMPDEST		 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x524
1419	 39B	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1420	 39D	ADD		 	 
- stack 0: 0x528
1421	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1422	 39F	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x101F0010114FF000133000903A4039402F00000018FFF010099FFF001A20F0F
1423	 3A0	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x101F0010114FF000133000903A4039402F00000018FFF010099FFF001A20F0F
- stack 0: 0xF0
1424	 3A2	SHR		 	 
- stack 1: 0x528
- stack 0: 0x101
1425	 3A3	JUMP		 	 
- stack 0: 0x528
1426	 101	JUMPDEST		 ;; __riscvimpl_LUI_f001eb7	  ;; # instr: lui t4,0xf001(ignore imm)
- stack 0: 0x528
1427	 102	PUSH4	0f001000	 	 
- stack 1: 0x528
- stack 0: 0xF001000
1428	 107	PUSH2	03A0	 	 
- stack 2: 0x528
- stack 1: 0xF001000
- stack 0: 0x3A0
1429	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x528
1430	 10B	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1431	 10D	ADD		 	 
- stack 0: 0x52C
1432	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1433	 10F	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x114FF000133000903A4039402F00000018FFF010099FFF001A20F0F00CB00F0
1434	 110	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x114FF000133000903A4039402F00000018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xF0
1435	 112	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x114
1436	 113	JUMP		 	 
- stack 0: 0x52C
1437	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x52C
1438	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1439	 116	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x114FF000133000903A4039402F00000018FFF010099FFF001A20F0F00CB00F0
1440	 117	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0x114FF000133000903A4039402F00000018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xE0
1441	 119	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x114FF00
1442	 11A	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0x114FF00
- stack 0: 0xFFFF
1443	 11D	AND		 	 
- stack 1: 0x52C
- stack 0: 0xFF00
1444	 11E	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0xFF00
- stack 0: 0x1
1445	 120	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1446	 121	PUSH2	03A0	 	 
- stack 2: 0x52C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
1447	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x52C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xF001000
1448	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x52C
- stack 0: 0xF000F00
1449	 126	PUSH2	03A0	 	 
- stack 2: 0x52C
- stack 1: 0xF000F00
- stack 0: 0x3A0
1450	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x52C
1451	 12A	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1452	 12C	ADD		 	 
- stack 0: 0x530
1453	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1454	 12E	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x133000903A4039402F00000018FFF010099FFF001A20F0F00CB00F000EA0000
1455	 12F	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x133000903A4039402F00000018FFF010099FFF001A20F0F00CB00F000EA0000
- stack 0: 0xF0
1456	 131	SHR		 	 
- stack 1: 0x530
- stack 0: 0x133
1457	 132	JUMP		 	 
- stack 0: 0x530
1458	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x530
1459	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1460	 135	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x133000903A4039402F00000018FFF010099FFF001A20F0F00CB00F000EA0000
1461	 136	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x133000903A4039402F00000018FFF010099FFF001A20F0F00CB00F000EA0000
- stack 0: 0xE0
1462	 138	SHR		 	 
- stack 1: 0x530
- stack 0: 0x1330009
1463	 139	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x1330009
- stack 0: 0xFFFF
1464	 13C	AND		 	 
- stack 1: 0x530
- stack 0: 0x9
1465	 13D	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0x9
- stack 0: 0x1
1466	 13F	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0x9
1467	 140	PUSH2	0380	 	 
- stack 2: 0x530
- stack 1: 0x9
- stack 0: 0x380
1468	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x530
1469	 144	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1470	 146	ADD		 	 
- stack 0: 0x534
1471	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1472	 148	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x3A4039402F00000018FFF010099FFF001A20F0F00CB00F000EA000003E60000
1473	 149	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x3A4039402F00000018FFF010099FFF001A20F0F00CB00F000EA000003E60000
- stack 0: 0xF0
1474	 14B	SHR		 	 
- stack 1: 0x534
- stack 0: 0x3A4
1475	 14C	JUMP		 	 
- stack 0: 0x534
1476	 3A4	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,394(ignore imm)
- stack 0: 0x534
1477	 3A5	PUSH2	00C0	 	 
- stack 1: 0x534
- stack 0: 0xC0
1478	 3A8	MLOAD		 	  ;; # read from x6
- stack 1: 0x534
- stack 0: 0xF000F00
1479	 3A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x534
- stack 1: 0xF000F00
- stack 0: 0xFFFFFFFF
1480	 3AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x534
- stack 0: 0xF000F00
1481	 3AF	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0xF000F00
- stack 0: 0x3A0
1482	 3B2	MLOAD		 	  ;; # read from x29
- stack 2: 0x534
- stack 1: 0xF000F00
- stack 0: 0xF000F00
1483	 3B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x534
- stack 2: 0xF000F00
- stack 1: 0xF000F00
- stack 0: 0xFFFFFFFF
1484	 3B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x534
- stack 1: 0xF000F00
- stack 0: 0xF000F00
1485	 3B9	SUB		 	 
- stack 1: 0x534
- stack 0: 0x0
1486	 3BA	PUSH2	03C2	 ;; _neq_36f94e36f7096026b70cc098a3a8e7b5a2e4a99c749d61304a91af9587204e5a	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x3C2
1487	 3BD	JUMPI		 	 
- stack 0: 0x534
1488	 3BE	PUSH2	03DC	 ;; _neq_after_36f94e36f7096026b70cc098a3a8e7b5a2e4a99c749d61304a91af9587204e5a	 
- stack 1: 0x534
- stack 0: 0x3DC
1489	 3C1	JUMP		 	 
- stack 0: 0x534
1490	 3DC	JUMPDEST		 ;; _neq_after_36f94e36f7096026b70cc098a3a8e7b5a2e4a99c749d61304a91af9587204e5a	 
- stack 0: 0x534
1491	 3DD	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1492	 3DF	ADD		 	 
- stack 0: 0x538
1493	 3E0	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1494	 3E1	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x2F00000018FFF010099FFF001A20F0F00CB00F000EA000003E60000030A0000
1495	 3E2	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x2F00000018FFF010099FFF001A20F0F00CB00F000EA000003E60000030A0000
- stack 0: 0xF0
1496	 3E4	SHR		 	 
- stack 1: 0x538
- stack 0: 0x2F0
1497	 3E5	JUMP		 	 
- stack 0: 0x538
1498	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x538
1499	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1500	 2F2	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x2F00000018FFF010099FFF001A20F0F00CB00F000EA000003E60000030A0000
1501	 2F3	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x2F00000018FFF010099FFF001A20F0F00CB00F000EA000003E60000030A0000
- stack 0: 0xE0
1502	 2F5	SHR		 	 
- stack 1: 0x538
- stack 0: 0x2F00000
1503	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x2F00000
- stack 0: 0xFFFF
1504	 2F9	AND		 	 
- stack 1: 0x538
- stack 0: 0x0
1505	 2FA	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x1
1506	 2FC	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0x0
1507	 2FD	PUSH2	0080	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x80
1508	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x538
1509	 301	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1510	 303	ADD		 	 
- stack 0: 0x53C
1511	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1512	 305	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F000EA000003E60000030A000003290001
1513	 306	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F000EA000003E60000030A000003290001
- stack 0: 0xF0
1514	 308	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x18F
1515	 309	JUMP		 	 
- stack 0: 0x53C
1516	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x53C
1517	 190	PUSH4	0ff01000	 	 
- stack 1: 0x53C
- stack 0: 0xFF01000
1518	 195	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0xFF01000
- stack 0: 0x20
1519	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
1520	 199	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1521	 19B	ADD		 	 
- stack 0: 0x540
1522	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1523	 19D	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
1524	 19E	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
- stack 0: 0xF0
1525	 1A0	SHR		 	 
- stack 1: 0x540
- stack 0: 0x99
1526	 1A1	JUMP		 	 
- stack 0: 0x540
1527	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x540
1528	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1529	 9B	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
1530	 9C	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
- stack 0: 0xE0
1531	 9E	SHR		 	 
- stack 1: 0x540
- stack 0: 0x99FFF0
1532	 9F	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
1533	 A2	AND		 	 
- stack 1: 0x540
- stack 0: 0xFFF0
1534	 A3	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xFFF0
- stack 0: 0x1
1535	 A5	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1536	 A6	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
1537	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
1538	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x540
- stack 0: 0xFF00FF0
1539	 AB	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xFF00FF0
- stack 0: 0x20
1540	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
1541	 AF	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1542	 B1	ADD		 	 
- stack 0: 0x544
1543	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1544	 B3	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x1A20F0F00CB00F000EA000003E60000030A000003290001034800020362FFDC
1545	 B4	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x1A20F0F00CB00F000EA000003E60000030A000003290001034800020362FFDC
- stack 0: 0xF0
1546	 B6	SHR		 	 
- stack 1: 0x544
- stack 0: 0x1A2
1547	 B7	JUMP		 	 
- stack 0: 0x544
1548	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x544
1549	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x544
- stack 0: 0xF0F0F000
1550	 1A8	PUSH2	0040	 	 
- stack 2: 0x544
- stack 1: 0xF0F0F000
- stack 0: 0x40
1551	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x544
1552	 1AC	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1553	 1AE	ADD		 	 
- stack 0: 0x548
1554	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1555	 1B0	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B50F00
1556	 1B1	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B50F00
- stack 0: 0xF0
1557	 1B3	SHR		 	 
- stack 1: 0x548
- stack 0: 0xCB
1558	 1B4	JUMP		 	 
- stack 0: 0x548
1559	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x548
1560	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1561	 CD	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B50F00
1562	 CE	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B50F00
- stack 0: 0xE0
1563	 D0	SHR		 	 
- stack 1: 0x548
- stack 0: 0xCB00F0
1564	 D1	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
1565	 D4	AND		 	 
- stack 1: 0x548
- stack 0: 0xF0
1566	 D5	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0xF0
- stack 0: 0x1
1567	 D7	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0xF0
1568	 D8	PUSH2	0040	 	 
- stack 2: 0x548
- stack 1: 0xF0
- stack 0: 0x40
1569	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x548
- stack 1: 0xF0
- stack 0: 0xF0F0F000
1570	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x548
- stack 0: 0xF0F0F0F0
1571	 DD	PUSH2	0040	 	 
- stack 2: 0x548
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
1572	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x548
1573	 E1	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1574	 E3	ADD		 	 
- stack 0: 0x54C
1575	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1576	 E5	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xEA000003E60000030A000003290001034800020362FFDC01B50F00011400F0
1577	 E6	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xEA000003E60000030A000003290001034800020362FFDC01B50F00011400F0
- stack 0: 0xF0
1578	 E8	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xEA
1579	 E9	JUMP		 	 
- stack 0: 0x54C
1580	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x54C
1581	 EB	PUSH2	0040	 	 
- stack 1: 0x54C
- stack 0: 0x40
1582	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x54C
- stack 0: 0xF0F0F0F0
1583	 EF	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
1584	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x54C
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
1585	 F3	AND		 	  ;; # AND
- stack 1: 0x54C
- stack 0: 0xF000F0
1586	 F4	PUSH2	0060	 	 
- stack 2: 0x54C
- stack 1: 0xF000F0
- stack 0: 0x60
1587	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x54C
1588	 F8	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1589	 FA	ADD		 	 
- stack 0: 0x550
1590	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1591	 FC	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x3E60000030A000003290001034800020362FFDC01B50F00011400F00133000A
1592	 FD	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x3E60000030A000003290001034800020362FFDC01B50F00011400F00133000A
- stack 0: 0xF0
1593	 FF	SHR		 	 
- stack 1: 0x550
- stack 0: 0x3E6
1594	 100	JUMP		 	 
- stack 0: 0x550
1595	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x550
1596	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1597	 3E8	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x3E60000030A000003290001034800020362FFDC01B50F00011400F00133000A
1598	 3E9	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x3E60000030A000003290001034800020362FFDC01B50F00011400F00133000A
- stack 0: 0xE0
1599	 3EB	SHR		 	 
- stack 1: 0x550
- stack 0: 0x3E60000
1600	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x3E60000
- stack 0: 0xFFFF
1601	 3EF	AND		 	 
- stack 1: 0x550
- stack 0: 0x0
1602	 3F0	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x1
1603	 3F2	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0x0
1604	 3F3	POP		 	 
- stack 0: 0x550
1605	 3F4	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1606	 3F6	ADD		 	 
- stack 0: 0x554
1607	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1608	 3F8	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x30A000003290001034800020362FFDC01B50F00011400F00133000A03A40358
1609	 3F9	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x30A000003290001034800020362FFDC01B50F00011400F00133000A03A40358
- stack 0: 0xF0
1610	 3FB	SHR		 	 
- stack 1: 0x554
- stack 0: 0x30A
1611	 3FC	JUMP		 	 
- stack 0: 0x554
1612	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x554
1613	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1614	 30C	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x30A000003290001034800020362FFDC01B50F00011400F00133000A03A40358
1615	 30D	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x30A000003290001034800020362FFDC01B50F00011400F00133000A03A40358
- stack 0: 0xE0
1616	 30F	SHR		 	 
- stack 1: 0x554
- stack 0: 0x30A0000
1617	 310	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x30A0000
- stack 0: 0xFFFF
1618	 313	AND		 	 
- stack 1: 0x554
- stack 0: 0x0
1619	 314	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1
1620	 316	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x0
1621	 317	PUSH2	0060	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x60
1622	 31A	MLOAD		 	  ;; # read from x3
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0xF000F0
1623	 31B	ADD		 	  ;; # ADDI 3
- stack 1: 0x554
- stack 0: 0xF000F0
1624	 31C	PUSH2	00C0	 	 
- stack 2: 0x554
- stack 1: 0xF000F0
- stack 0: 0xC0
1625	 31F	MSTORE		 	  ;; # store to x6
- stack 0: 0x554
1626	 320	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1627	 322	ADD		 	 
- stack 0: 0x558
1628	 323	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1629	 324	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x3290001034800020362FFDC01B50F00011400F00133000A03A4035802F00000
1630	 325	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x3290001034800020362FFDC01B50F00011400F00133000A03A4035802F00000
- stack 0: 0xF0
1631	 327	SHR		 	 
- stack 1: 0x558
- stack 0: 0x329
1632	 328	JUMP		 	 
- stack 0: 0x558
1633	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x558
1634	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1635	 32B	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x3290001034800020362FFDC01B50F00011400F00133000A03A4035802F00000
1636	 32C	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x3290001034800020362FFDC01B50F00011400F00133000A03A4035802F00000
- stack 0: 0xE0
1637	 32E	SHR		 	 
- stack 1: 0x558
- stack 0: 0x3290001
1638	 32F	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x3290001
- stack 0: 0xFFFF
1639	 332	AND		 	 
- stack 1: 0x558
- stack 0: 0x1
1640	 333	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x1
1641	 335	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x1
1642	 336	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x80
1643	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x0
1644	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x558
- stack 0: 0x1
1645	 33B	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x80
1646	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x558
1647	 33F	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1648	 341	ADD		 	 
- stack 0: 0x55C
1649	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1650	 343	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x34800020362FFDC01B50F00011400F00133000A03A4035802F0000001C80FF0
1651	 344	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x34800020362FFDC01B50F00011400F00133000A03A4035802F0000001C80FF0
- stack 0: 0xF0
1652	 346	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x348
1653	 347	JUMP		 	 
- stack 0: 0x55C
1654	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x55C
1655	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1656	 34A	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x34800020362FFDC01B50F00011400F00133000A03A4035802F0000001C80FF0
1657	 34B	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x34800020362FFDC01B50F00011400F00133000A03A4035802F0000001C80FF0
- stack 0: 0xE0
1658	 34D	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x3480002
1659	 34E	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x3480002
- stack 0: 0xFFFF
1660	 351	AND		 	 
- stack 1: 0x55C
- stack 0: 0x2
1661	 352	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0x1
1662	 354	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x2
1663	 355	PUSH2	00A0	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0xA0
1664	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x55C
1665	 359	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1666	 35B	ADD		 	 
- stack 0: 0x560
1667	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1668	 35D	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x362FFDC01B50F00011400F00133000A03A4035802F0000001C80FF0009900FF
1669	 35E	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x362FFDC01B50F00011400F00133000A03A4035802F0000001C80FF0009900FF
- stack 0: 0xF0
1670	 360	SHR		 	 
- stack 1: 0x560
- stack 0: 0x362
1671	 361	JUMP		 	 
- stack 0: 0x560
1672	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x560
1673	 363	PUSH2	0080	 	 
- stack 1: 0x560
- stack 0: 0x80
1674	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x560
- stack 0: 0x1
1675	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1676	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x560
- stack 0: 0x1
1677	 36D	PUSH2	00A0	 	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0xA0
1678	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x2
1679	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x560
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1680	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x2
1681	 377	SUB		 	 
- stack 1: 0x560
- stack 0: 0x1
1682	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x380
1683	 37B	JUMPI		 	 
- stack 0: 0x560
1684	 380	JUMPDEST		 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x560
1685	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1686	 382	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x362FFDC01B50F00011400F00133000A03A4035802F0000001C80FF0009900FF
1687	 383	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x362FFDC01B50F00011400F00133000A03A4035802F0000001C80FF0009900FF
- stack 0: 0xE0
1688	 385	SHR		 	 
- stack 1: 0x560
- stack 0: 0x362FFDC
1689	 386	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x362FFDC
- stack 0: 0xFFFF
1690	 389	AND		 	 
- stack 1: 0x560
- stack 0: 0xFFDC
1691	 38A	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0xFFDC
- stack 0: 0x1
1692	 38C	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
1693	 38D	ADD		 	 
- stack 0: 0x53C
1694	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x53C
- stack 0: 0xFFFFFFFF
1695	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x53C
1696	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1697	 395	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F000EA000003E60000030A000003290001
1698	 396	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F000EA000003E60000030A000003290001
- stack 0: 0xF0
1699	 398	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x18F
1700	 399	JUMP		 	 
- stack 0: 0x53C
1701	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x53C
1702	 190	PUSH4	0ff01000	 	 
- stack 1: 0x53C
- stack 0: 0xFF01000
1703	 195	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0xFF01000
- stack 0: 0x20
1704	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
1705	 199	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1706	 19B	ADD		 	 
- stack 0: 0x540
1707	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1708	 19D	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
1709	 19E	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
- stack 0: 0xF0
1710	 1A0	SHR		 	 
- stack 1: 0x540
- stack 0: 0x99
1711	 1A1	JUMP		 	 
- stack 0: 0x540
1712	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x540
1713	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1714	 9B	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
1715	 9C	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
- stack 0: 0xE0
1716	 9E	SHR		 	 
- stack 1: 0x540
- stack 0: 0x99FFF0
1717	 9F	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
1718	 A2	AND		 	 
- stack 1: 0x540
- stack 0: 0xFFF0
1719	 A3	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xFFF0
- stack 0: 0x1
1720	 A5	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1721	 A6	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
1722	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
1723	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x540
- stack 0: 0xFF00FF0
1724	 AB	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xFF00FF0
- stack 0: 0x20
1725	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
1726	 AF	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1727	 B1	ADD		 	 
- stack 0: 0x544
1728	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1729	 B3	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x1A20F0F00CB00F000EA000003E60000030A000003290001034800020362FFDC
1730	 B4	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x1A20F0F00CB00F000EA000003E60000030A000003290001034800020362FFDC
- stack 0: 0xF0
1731	 B6	SHR		 	 
- stack 1: 0x544
- stack 0: 0x1A2
1732	 B7	JUMP		 	 
- stack 0: 0x544
1733	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x544
1734	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x544
- stack 0: 0xF0F0F000
1735	 1A8	PUSH2	0040	 	 
- stack 2: 0x544
- stack 1: 0xF0F0F000
- stack 0: 0x40
1736	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x544
1737	 1AC	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1738	 1AE	ADD		 	 
- stack 0: 0x548
1739	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1740	 1B0	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B50F00
1741	 1B1	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B50F00
- stack 0: 0xF0
1742	 1B3	SHR		 	 
- stack 1: 0x548
- stack 0: 0xCB
1743	 1B4	JUMP		 	 
- stack 0: 0x548
1744	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x548
1745	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1746	 CD	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B50F00
1747	 CE	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B50F00
- stack 0: 0xE0
1748	 D0	SHR		 	 
- stack 1: 0x548
- stack 0: 0xCB00F0
1749	 D1	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
1750	 D4	AND		 	 
- stack 1: 0x548
- stack 0: 0xF0
1751	 D5	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0xF0
- stack 0: 0x1
1752	 D7	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0xF0
1753	 D8	PUSH2	0040	 	 
- stack 2: 0x548
- stack 1: 0xF0
- stack 0: 0x40
1754	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x548
- stack 1: 0xF0
- stack 0: 0xF0F0F000
1755	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x548
- stack 0: 0xF0F0F0F0
1756	 DD	PUSH2	0040	 	 
- stack 2: 0x548
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
1757	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x548
1758	 E1	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1759	 E3	ADD		 	 
- stack 0: 0x54C
1760	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1761	 E5	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xEA000003E60000030A000003290001034800020362FFDC01B50F00011400F0
1762	 E6	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xEA000003E60000030A000003290001034800020362FFDC01B50F00011400F0
- stack 0: 0xF0
1763	 E8	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xEA
1764	 E9	JUMP		 	 
- stack 0: 0x54C
1765	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x54C
1766	 EB	PUSH2	0040	 	 
- stack 1: 0x54C
- stack 0: 0x40
1767	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x54C
- stack 0: 0xF0F0F0F0
1768	 EF	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
1769	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x54C
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
1770	 F3	AND		 	  ;; # AND
- stack 1: 0x54C
- stack 0: 0xF000F0
1771	 F4	PUSH2	0060	 	 
- stack 2: 0x54C
- stack 1: 0xF000F0
- stack 0: 0x60
1772	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x54C
1773	 F8	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1774	 FA	ADD		 	 
- stack 0: 0x550
1775	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1776	 FC	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x3E60000030A000003290001034800020362FFDC01B50F00011400F00133000A
1777	 FD	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x3E60000030A000003290001034800020362FFDC01B50F00011400F00133000A
- stack 0: 0xF0
1778	 FF	SHR		 	 
- stack 1: 0x550
- stack 0: 0x3E6
1779	 100	JUMP		 	 
- stack 0: 0x550
1780	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x550
1781	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1782	 3E8	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x3E60000030A000003290001034800020362FFDC01B50F00011400F00133000A
1783	 3E9	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x3E60000030A000003290001034800020362FFDC01B50F00011400F00133000A
- stack 0: 0xE0
1784	 3EB	SHR		 	 
- stack 1: 0x550
- stack 0: 0x3E60000
1785	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x3E60000
- stack 0: 0xFFFF
1786	 3EF	AND		 	 
- stack 1: 0x550
- stack 0: 0x0
1787	 3F0	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x1
1788	 3F2	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0x0
1789	 3F3	POP		 	 
- stack 0: 0x550
1790	 3F4	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1791	 3F6	ADD		 	 
- stack 0: 0x554
1792	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1793	 3F8	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x30A000003290001034800020362FFDC01B50F00011400F00133000A03A40358
1794	 3F9	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x30A000003290001034800020362FFDC01B50F00011400F00133000A03A40358
- stack 0: 0xF0
1795	 3FB	SHR		 	 
- stack 1: 0x554
- stack 0: 0x30A
1796	 3FC	JUMP		 	 
- stack 0: 0x554
1797	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x554
1798	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1799	 30C	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x30A000003290001034800020362FFDC01B50F00011400F00133000A03A40358
1800	 30D	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x30A000003290001034800020362FFDC01B50F00011400F00133000A03A40358
- stack 0: 0xE0
1801	 30F	SHR		 	 
- stack 1: 0x554
- stack 0: 0x30A0000
1802	 310	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x30A0000
- stack 0: 0xFFFF
1803	 313	AND		 	 
- stack 1: 0x554
- stack 0: 0x0
1804	 314	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1
1805	 316	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x0
1806	 317	PUSH2	0060	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x60
1807	 31A	MLOAD		 	  ;; # read from x3
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0xF000F0
1808	 31B	ADD		 	  ;; # ADDI 3
- stack 1: 0x554
- stack 0: 0xF000F0
1809	 31C	PUSH2	00C0	 	 
- stack 2: 0x554
- stack 1: 0xF000F0
- stack 0: 0xC0
1810	 31F	MSTORE		 	  ;; # store to x6
- stack 0: 0x554
1811	 320	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1812	 322	ADD		 	 
- stack 0: 0x558
1813	 323	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1814	 324	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x3290001034800020362FFDC01B50F00011400F00133000A03A4035802F00000
1815	 325	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x3290001034800020362FFDC01B50F00011400F00133000A03A4035802F00000
- stack 0: 0xF0
1816	 327	SHR		 	 
- stack 1: 0x558
- stack 0: 0x329
1817	 328	JUMP		 	 
- stack 0: 0x558
1818	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x558
1819	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1820	 32B	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x3290001034800020362FFDC01B50F00011400F00133000A03A4035802F00000
1821	 32C	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x3290001034800020362FFDC01B50F00011400F00133000A03A4035802F00000
- stack 0: 0xE0
1822	 32E	SHR		 	 
- stack 1: 0x558
- stack 0: 0x3290001
1823	 32F	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x3290001
- stack 0: 0xFFFF
1824	 332	AND		 	 
- stack 1: 0x558
- stack 0: 0x1
1825	 333	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x1
1826	 335	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x1
1827	 336	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x80
1828	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x1
1829	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x558
- stack 0: 0x2
1830	 33B	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0x80
1831	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x558
1832	 33F	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1833	 341	ADD		 	 
- stack 0: 0x55C
1834	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1835	 343	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x34800020362FFDC01B50F00011400F00133000A03A4035802F0000001C80FF0
1836	 344	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x34800020362FFDC01B50F00011400F00133000A03A4035802F0000001C80FF0
- stack 0: 0xF0
1837	 346	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x348
1838	 347	JUMP		 	 
- stack 0: 0x55C
1839	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x55C
1840	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1841	 34A	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x34800020362FFDC01B50F00011400F00133000A03A4035802F0000001C80FF0
1842	 34B	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x34800020362FFDC01B50F00011400F00133000A03A4035802F0000001C80FF0
- stack 0: 0xE0
1843	 34D	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x3480002
1844	 34E	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x3480002
- stack 0: 0xFFFF
1845	 351	AND		 	 
- stack 1: 0x55C
- stack 0: 0x2
1846	 352	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0x1
1847	 354	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x2
1848	 355	PUSH2	00A0	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0xA0
1849	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x55C
1850	 359	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1851	 35B	ADD		 	 
- stack 0: 0x560
1852	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1853	 35D	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x362FFDC01B50F00011400F00133000A03A4035802F0000001C80FF0009900FF
1854	 35E	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x362FFDC01B50F00011400F00133000A03A4035802F0000001C80FF0009900FF
- stack 0: 0xF0
1855	 360	SHR		 	 
- stack 1: 0x560
- stack 0: 0x362
1856	 361	JUMP		 	 
- stack 0: 0x560
1857	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x560
1858	 363	PUSH2	0080	 	 
- stack 1: 0x560
- stack 0: 0x80
1859	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x560
- stack 0: 0x2
1860	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1861	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x560
- stack 0: 0x2
1862	 36D	PUSH2	00A0	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0xA0
1863	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0x2
1864	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x560
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1865	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0x2
1866	 377	SUB		 	 
- stack 1: 0x560
- stack 0: 0x0
1867	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x380
1868	 37B	JUMPI		 	 
- stack 0: 0x560
1869	 37C	PUSH2	039A	 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 1: 0x560
- stack 0: 0x39A
1870	 37F	JUMP		 	 
- stack 0: 0x560
1871	 39A	JUMPDEST		 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x560
1872	 39B	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1873	 39D	ADD		 	 
- stack 0: 0x564
1874	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1875	 39F	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x1B50F00011400F00133000A03A4035802F0000001C80FF0009900FF00B8F0F1
1876	 3A0	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x1B50F00011400F00133000A03A4035802F0000001C80FF0009900FF00B8F0F1
- stack 0: 0xF0
1877	 3A2	SHR		 	 
- stack 1: 0x564
- stack 0: 0x1B5
1878	 3A3	JUMP		 	 
- stack 0: 0x564
1879	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00eb7	  ;; # instr: lui t4,0xf00(ignore imm)
- stack 0: 0x564
1880	 1B6	PUSH4	00f00000	 	 
- stack 1: 0x564
- stack 0: 0xF00000
1881	 1BB	PUSH2	03A0	 	 
- stack 2: 0x564
- stack 1: 0xF00000
- stack 0: 0x3A0
1882	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x564
1883	 1BF	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1884	 1C1	ADD		 	 
- stack 0: 0x568
1885	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1886	 1C3	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x11400F00133000A03A4035802F0000001C80FF0009900FF00B8F0F100CBFF0F
1887	 1C4	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x11400F00133000A03A4035802F0000001C80FF0009900FF00B8F0F100CBFF0F
- stack 0: 0xF0
1888	 1C6	SHR		 	 
- stack 1: 0x568
- stack 0: 0x114
1889	 1C7	JUMP		 	 
- stack 0: 0x568
1890	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x568
1891	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1892	 116	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x11400F00133000A03A4035802F0000001C80FF0009900FF00B8F0F100CBFF0F
1893	 117	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x11400F00133000A03A4035802F0000001C80FF0009900FF00B8F0F100CBFF0F
- stack 0: 0xE0
1894	 119	SHR		 	 
- stack 1: 0x568
- stack 0: 0x11400F0
1895	 11A	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x11400F0
- stack 0: 0xFFFF
1896	 11D	AND		 	 
- stack 1: 0x568
- stack 0: 0xF0
1897	 11E	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0xF0
- stack 0: 0x1
1898	 120	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0xF0
1899	 121	PUSH2	03A0	 	 
- stack 2: 0x568
- stack 1: 0xF0
- stack 0: 0x3A0
1900	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x568
- stack 1: 0xF0
- stack 0: 0xF00000
1901	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x568
- stack 0: 0xF000F0
1902	 126	PUSH2	03A0	 	 
- stack 2: 0x568
- stack 1: 0xF000F0
- stack 0: 0x3A0
1903	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x568
1904	 12A	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1905	 12C	ADD		 	 
- stack 0: 0x56C
1906	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1907	 12E	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x133000A03A4035802F0000001C80FF0009900FF00B8F0F100CBFF0F00EA0000
1908	 12F	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x133000A03A4035802F0000001C80FF0009900FF00B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
1909	 131	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x133
1910	 132	JUMP		 	 
- stack 0: 0x56C
1911	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x56C
1912	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
1913	 135	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x133000A03A4035802F0000001C80FF0009900FF00B8F0F100CBFF0F00EA0000
1914	 136	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x133000A03A4035802F0000001C80FF0009900FF00B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
1915	 138	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x133000A
1916	 139	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x133000A
- stack 0: 0xFFFF
1917	 13C	AND		 	 
- stack 1: 0x56C
- stack 0: 0xA
1918	 13D	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0xA
- stack 0: 0x1
1919	 13F	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0xA
1920	 140	PUSH2	0380	 	 
- stack 2: 0x56C
- stack 1: 0xA
- stack 0: 0x380
1921	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x56C
1922	 144	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1923	 146	ADD		 	 
- stack 0: 0x570
1924	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1925	 148	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x3A4035802F0000001C80FF0009900FF00B8F0F100CBFF0F00EA000003E60000
1926	 149	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x3A4035802F0000001C80FF0009900FF00B8F0F100CBFF0F00EA000003E60000
- stack 0: 0xF0
1927	 14B	SHR		 	 
- stack 1: 0x570
- stack 0: 0x3A4
1928	 14C	JUMP		 	 
- stack 0: 0x570
1929	 3A4	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,394(ignore imm)
- stack 0: 0x570
1930	 3A5	PUSH2	00C0	 	 
- stack 1: 0x570
- stack 0: 0xC0
1931	 3A8	MLOAD		 	  ;; # read from x6
- stack 1: 0x570
- stack 0: 0xF000F0
1932	 3A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x570
- stack 1: 0xF000F0
- stack 0: 0xFFFFFFFF
1933	 3AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x570
- stack 0: 0xF000F0
1934	 3AF	PUSH2	03A0	 	 
- stack 2: 0x570
- stack 1: 0xF000F0
- stack 0: 0x3A0
1935	 3B2	MLOAD		 	  ;; # read from x29
- stack 2: 0x570
- stack 1: 0xF000F0
- stack 0: 0xF000F0
1936	 3B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x570
- stack 2: 0xF000F0
- stack 1: 0xF000F0
- stack 0: 0xFFFFFFFF
1937	 3B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x570
- stack 1: 0xF000F0
- stack 0: 0xF000F0
1938	 3B9	SUB		 	 
- stack 1: 0x570
- stack 0: 0x0
1939	 3BA	PUSH2	03C2	 ;; _neq_36f94e36f7096026b70cc098a3a8e7b5a2e4a99c749d61304a91af9587204e5a	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x3C2
1940	 3BD	JUMPI		 	 
- stack 0: 0x570
1941	 3BE	PUSH2	03DC	 ;; _neq_after_36f94e36f7096026b70cc098a3a8e7b5a2e4a99c749d61304a91af9587204e5a	 
- stack 1: 0x570
- stack 0: 0x3DC
1942	 3C1	JUMP		 	 
- stack 0: 0x570
1943	 3DC	JUMPDEST		 ;; _neq_after_36f94e36f7096026b70cc098a3a8e7b5a2e4a99c749d61304a91af9587204e5a	 
- stack 0: 0x570
1944	 3DD	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1945	 3DF	ADD		 	 
- stack 0: 0x574
1946	 3E0	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1947	 3E1	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000
1948	 3E2	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000
- stack 0: 0xF0
1949	 3E4	SHR		 	 
- stack 1: 0x574
- stack 0: 0x2F0
1950	 3E5	JUMP		 	 
- stack 0: 0x574
1951	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x574
1952	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1953	 2F2	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000
1954	 2F3	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000
- stack 0: 0xE0
1955	 2F5	SHR		 	 
- stack 1: 0x574
- stack 0: 0x2F00000
1956	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x2F00000
- stack 0: 0xFFFF
1957	 2F9	AND		 	 
- stack 1: 0x574
- stack 0: 0x0
1958	 2FA	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x1
1959	 2FC	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x0
1960	 2FD	PUSH2	0080	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x80
1961	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x574
1962	 301	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1963	 303	ADD		 	 
- stack 0: 0x578
1964	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1965	 305	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A0000
1966	 306	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A0000
- stack 0: 0xF0
1967	 308	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1C8
1968	 309	JUMP		 	 
- stack 0: 0x578
1969	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x578
1970	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x578
- stack 0: 0xFF0000
1971	 1CE	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0xFF0000
- stack 0: 0x20
1972	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x578
1973	 1D2	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1974	 1D4	ADD		 	 
- stack 0: 0x57C
1975	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1976	 1D6	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
1977	 1D7	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
- stack 0: 0xF0
1978	 1D9	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x99
1979	 1DA	JUMP		 	 
- stack 0: 0x57C
1980	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x57C
1981	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
1982	 9B	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
1983	 9C	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
- stack 0: 0xE0
1984	 9E	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x9900FF
1985	 9F	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x9900FF
- stack 0: 0xFFFF
1986	 A2	AND		 	 
- stack 1: 0x57C
- stack 0: 0xFF
1987	 A3	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0xFF
- stack 0: 0x1
1988	 A5	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0xFF
1989	 A6	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xFF
- stack 0: 0x20
1990	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x57C
- stack 1: 0xFF
- stack 0: 0xFF0000
1991	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x57C
- stack 0: 0xFF00FF
1992	 AB	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xFF00FF
- stack 0: 0x20
1993	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x57C
1994	 AF	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1995	 B1	ADD		 	 
- stack 0: 0x580
1996	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1997	 B3	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xB8F0F100CBFF0F00EA000003E6000003E60000030A00000329000103480002
1998	 B4	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xB8F0F100CBFF0F00EA000003E6000003E60000030A00000329000103480002
- stack 0: 0xF0
1999	 B6	SHR		 	 
- stack 1: 0x580
- stack 0: 0xB8
2000	 B7	JUMP		 	 
- stack 0: 0x580
2001	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x580
2002	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x580
- stack 0: 0xF0F1000
2003	 BE	PUSH2	0040	 	 
- stack 2: 0x580
- stack 1: 0xF0F1000
- stack 0: 0x40
2004	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x580
2005	 C2	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2006	 C4	ADD		 	 
- stack 0: 0x584
2007	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2008	 C6	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
2009	 C7	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
- stack 0: 0xF0
2010	 C9	SHR		 	 
- stack 1: 0x584
- stack 0: 0xCB
2011	 CA	JUMP		 	 
- stack 0: 0x584
2012	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x584
2013	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2014	 CD	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
2015	 CE	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
- stack 0: 0xE0
2016	 D0	SHR		 	 
- stack 1: 0x584
- stack 0: 0xCBFF0F
2017	 D1	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
2018	 D4	AND		 	 
- stack 1: 0x584
- stack 0: 0xFF0F
2019	 D5	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0xFF0F
- stack 0: 0x1
2020	 D7	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
2021	 D8	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
2022	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
2023	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x584
- stack 0: 0xF0F0F0F
2024	 DD	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0xF0F0F0F
- stack 0: 0x40
2025	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x584
2026	 E1	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2027	 E3	ADD		 	 
- stack 0: 0x588
2028	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2029	 E5	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xEA000003E6000003E60000030A000003290001034800020362FFD801DB00F0
2030	 E6	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xEA000003E6000003E60000030A000003290001034800020362FFD801DB00F0
- stack 0: 0xF0
2031	 E8	SHR		 	 
- stack 1: 0x588
- stack 0: 0xEA
2032	 E9	JUMP		 	 
- stack 0: 0x588
2033	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x588
2034	 EB	PUSH2	0040	 	 
- stack 1: 0x588
- stack 0: 0x40
2035	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x588
- stack 0: 0xF0F0F0F
2036	 EF	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0xF0F0F0F
- stack 0: 0x20
2037	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x588
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
2038	 F3	AND		 	  ;; # AND
- stack 1: 0x588
- stack 0: 0xF000F
2039	 F4	PUSH2	0060	 	 
- stack 2: 0x588
- stack 1: 0xF000F
- stack 0: 0x60
2040	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x588
2041	 F8	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2042	 FA	ADD		 	 
- stack 0: 0x58C
2043	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2044	 FC	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x3E6000003E60000030A000003290001034800020362FFD801DB00F00114000F
2045	 FD	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x3E6000003E60000030A000003290001034800020362FFD801DB00F00114000F
- stack 0: 0xF0
2046	 FF	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x3E6
2047	 100	JUMP		 	 
- stack 0: 0x58C
2048	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x58C
2049	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2050	 3E8	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x3E6000003E60000030A000003290001034800020362FFD801DB00F00114000F
2051	 3E9	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x3E6000003E60000030A000003290001034800020362FFD801DB00F00114000F
- stack 0: 0xE0
2052	 3EB	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x3E60000
2053	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x3E60000
- stack 0: 0xFFFF
2054	 3EF	AND		 	 
- stack 1: 0x58C
- stack 0: 0x0
2055	 3F0	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x1
2056	 3F2	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x0
2057	 3F3	POP		 	 
- stack 0: 0x58C
2058	 3F4	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2059	 3F6	ADD		 	 
- stack 0: 0x590
2060	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2061	 3F8	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x3E60000030A000003290001034800020362FFD801DB00F00114000F0133000B
2062	 3F9	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x3E60000030A000003290001034800020362FFD801DB00F00114000F0133000B
- stack 0: 0xF0
2063	 3FB	SHR		 	 
- stack 1: 0x590
- stack 0: 0x3E6
2064	 3FC	JUMP		 	 
- stack 0: 0x590
2065	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x590
2066	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2067	 3E8	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x3E60000030A000003290001034800020362FFD801DB00F00114000F0133000B
2068	 3E9	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x3E60000030A000003290001034800020362FFD801DB00F00114000F0133000B
- stack 0: 0xE0
2069	 3EB	SHR		 	 
- stack 1: 0x590
- stack 0: 0x3E60000
2070	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x3E60000
- stack 0: 0xFFFF
2071	 3EF	AND		 	 
- stack 1: 0x590
- stack 0: 0x0
2072	 3F0	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x1
2073	 3F2	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x0
2074	 3F3	POP		 	 
- stack 0: 0x590
2075	 3F4	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2076	 3F6	ADD		 	 
- stack 0: 0x594
2077	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2078	 3F8	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x30A000003290001034800020362FFD801DB00F00114000F0133000B03A40318
2079	 3F9	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x30A000003290001034800020362FFD801DB00F00114000F0133000B03A40318
- stack 0: 0xF0
2080	 3FB	SHR		 	 
- stack 1: 0x594
- stack 0: 0x30A
2081	 3FC	JUMP		 	 
- stack 0: 0x594
2082	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x594
2083	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2084	 30C	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x30A000003290001034800020362FFD801DB00F00114000F0133000B03A40318
2085	 30D	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x30A000003290001034800020362FFD801DB00F00114000F0133000B03A40318
- stack 0: 0xE0
2086	 30F	SHR		 	 
- stack 1: 0x594
- stack 0: 0x30A0000
2087	 310	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x30A0000
- stack 0: 0xFFFF
2088	 313	AND		 	 
- stack 1: 0x594
- stack 0: 0x0
2089	 314	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2090	 316	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x0
2091	 317	PUSH2	0060	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x60
2092	 31A	MLOAD		 	  ;; # read from x3
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0xF000F
2093	 31B	ADD		 	  ;; # ADDI 3
- stack 1: 0x594
- stack 0: 0xF000F
2094	 31C	PUSH2	00C0	 	 
- stack 2: 0x594
- stack 1: 0xF000F
- stack 0: 0xC0
2095	 31F	MSTORE		 	  ;; # store to x6
- stack 0: 0x594
2096	 320	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2097	 322	ADD		 	 
- stack 0: 0x598
2098	 323	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2099	 324	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x3290001034800020362FFD801DB00F00114000F0133000B03A4031802F00000
2100	 325	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x3290001034800020362FFD801DB00F00114000F0133000B03A4031802F00000
- stack 0: 0xF0
2101	 327	SHR		 	 
- stack 1: 0x598
- stack 0: 0x329
2102	 328	JUMP		 	 
- stack 0: 0x598
2103	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x598
2104	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2105	 32B	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x3290001034800020362FFD801DB00F00114000F0133000B03A4031802F00000
2106	 32C	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x3290001034800020362FFD801DB00F00114000F0133000B03A4031802F00000
- stack 0: 0xE0
2107	 32E	SHR		 	 
- stack 1: 0x598
- stack 0: 0x3290001
2108	 32F	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x3290001
- stack 0: 0xFFFF
2109	 332	AND		 	 
- stack 1: 0x598
- stack 0: 0x1
2110	 333	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x1
2111	 335	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x1
2112	 336	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x80
2113	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x0
2114	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x598
- stack 0: 0x1
2115	 33B	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x80
2116	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x598
2117	 33F	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2118	 341	ADD		 	 
- stack 0: 0x59C
2119	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2120	 343	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x34800020362FFD801DB00F00114000F0133000B03A4031802F000000086F010
2121	 344	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x34800020362FFD801DB00F00114000F0133000B03A4031802F000000086F010
- stack 0: 0xF0
2122	 346	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x348
2123	 347	JUMP		 	 
- stack 0: 0x59C
2124	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x59C
2125	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2126	 34A	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x34800020362FFD801DB00F00114000F0133000B03A4031802F000000086F010
2127	 34B	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x34800020362FFD801DB00F00114000F0133000B03A4031802F000000086F010
- stack 0: 0xE0
2128	 34D	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x3480002
2129	 34E	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x3480002
- stack 0: 0xFFFF
2130	 351	AND		 	 
- stack 1: 0x59C
- stack 0: 0x2
2131	 352	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0x1
2132	 354	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x2
2133	 355	PUSH2	00A0	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0xA0
2134	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x59C
2135	 359	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2136	 35B	ADD		 	 
- stack 0: 0x5A0
2137	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2138	 35D	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x362FFD801DB00F00114000F0133000B03A4031802F000000086F0100099FF00
2139	 35E	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x362FFD801DB00F00114000F0133000B03A4031802F000000086F0100099FF00
- stack 0: 0xF0
2140	 360	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x362
2141	 361	JUMP		 	 
- stack 0: 0x5A0
2142	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5A0
2143	 363	PUSH2	0080	 	 
- stack 1: 0x5A0
- stack 0: 0x80
2144	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x5A0
- stack 0: 0x1
2145	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2146	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A0
- stack 0: 0x1
2147	 36D	PUSH2	00A0	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0xA0
2148	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x2
2149	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2150	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x2
2151	 377	SUB		 	 
- stack 1: 0x5A0
- stack 0: 0x1
2152	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x380
2153	 37B	JUMPI		 	 
- stack 0: 0x5A0
2154	 380	JUMPDEST		 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x5A0
2155	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2156	 382	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x362FFD801DB00F00114000F0133000B03A4031802F000000086F0100099FF00
2157	 383	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x362FFD801DB00F00114000F0133000B03A4031802F000000086F0100099FF00
- stack 0: 0xE0
2158	 385	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x362FFD8
2159	 386	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x362FFD8
- stack 0: 0xFFFF
2160	 389	AND		 	 
- stack 1: 0x5A0
- stack 0: 0xFFD8
2161	 38A	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0xFFD8
- stack 0: 0x1
2162	 38C	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
2163	 38D	ADD		 	 
- stack 0: 0x578
2164	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x578
- stack 0: 0xFFFFFFFF
2165	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x578
2166	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2167	 395	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A0000
2168	 396	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A0000
- stack 0: 0xF0
2169	 398	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1C8
2170	 399	JUMP		 	 
- stack 0: 0x578
2171	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x578
2172	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x578
- stack 0: 0xFF0000
2173	 1CE	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0xFF0000
- stack 0: 0x20
2174	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x578
2175	 1D2	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2176	 1D4	ADD		 	 
- stack 0: 0x57C
2177	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2178	 1D6	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
2179	 1D7	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
- stack 0: 0xF0
2180	 1D9	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x99
2181	 1DA	JUMP		 	 
- stack 0: 0x57C
2182	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x57C
2183	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2184	 9B	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
2185	 9C	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
- stack 0: 0xE0
2186	 9E	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x9900FF
2187	 9F	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x9900FF
- stack 0: 0xFFFF
2188	 A2	AND		 	 
- stack 1: 0x57C
- stack 0: 0xFF
2189	 A3	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0xFF
- stack 0: 0x1
2190	 A5	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0xFF
2191	 A6	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xFF
- stack 0: 0x20
2192	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x57C
- stack 1: 0xFF
- stack 0: 0xFF0000
2193	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x57C
- stack 0: 0xFF00FF
2194	 AB	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xFF00FF
- stack 0: 0x20
2195	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x57C
2196	 AF	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2197	 B1	ADD		 	 
- stack 0: 0x580
2198	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2199	 B3	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xB8F0F100CBFF0F00EA000003E6000003E60000030A00000329000103480002
2200	 B4	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xB8F0F100CBFF0F00EA000003E6000003E60000030A00000329000103480002
- stack 0: 0xF0
2201	 B6	SHR		 	 
- stack 1: 0x580
- stack 0: 0xB8
2202	 B7	JUMP		 	 
- stack 0: 0x580
2203	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x580
2204	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x580
- stack 0: 0xF0F1000
2205	 BE	PUSH2	0040	 	 
- stack 2: 0x580
- stack 1: 0xF0F1000
- stack 0: 0x40
2206	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x580
2207	 C2	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2208	 C4	ADD		 	 
- stack 0: 0x584
2209	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2210	 C6	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
2211	 C7	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
- stack 0: 0xF0
2212	 C9	SHR		 	 
- stack 1: 0x584
- stack 0: 0xCB
2213	 CA	JUMP		 	 
- stack 0: 0x584
2214	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x584
2215	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2216	 CD	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
2217	 CE	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
- stack 0: 0xE0
2218	 D0	SHR		 	 
- stack 1: 0x584
- stack 0: 0xCBFF0F
2219	 D1	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
2220	 D4	AND		 	 
- stack 1: 0x584
- stack 0: 0xFF0F
2221	 D5	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0xFF0F
- stack 0: 0x1
2222	 D7	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
2223	 D8	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
2224	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
2225	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x584
- stack 0: 0xF0F0F0F
2226	 DD	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0xF0F0F0F
- stack 0: 0x40
2227	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x584
2228	 E1	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2229	 E3	ADD		 	 
- stack 0: 0x588
2230	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2231	 E5	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xEA000003E6000003E60000030A000003290001034800020362FFD801DB00F0
2232	 E6	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xEA000003E6000003E60000030A000003290001034800020362FFD801DB00F0
- stack 0: 0xF0
2233	 E8	SHR		 	 
- stack 1: 0x588
- stack 0: 0xEA
2234	 E9	JUMP		 	 
- stack 0: 0x588
2235	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x588
2236	 EB	PUSH2	0040	 	 
- stack 1: 0x588
- stack 0: 0x40
2237	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x588
- stack 0: 0xF0F0F0F
2238	 EF	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0xF0F0F0F
- stack 0: 0x20
2239	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x588
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
2240	 F3	AND		 	  ;; # AND
- stack 1: 0x588
- stack 0: 0xF000F
2241	 F4	PUSH2	0060	 	 
- stack 2: 0x588
- stack 1: 0xF000F
- stack 0: 0x60
2242	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x588
2243	 F8	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2244	 FA	ADD		 	 
- stack 0: 0x58C
2245	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2246	 FC	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x3E6000003E60000030A000003290001034800020362FFD801DB00F00114000F
2247	 FD	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x3E6000003E60000030A000003290001034800020362FFD801DB00F00114000F
- stack 0: 0xF0
2248	 FF	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x3E6
2249	 100	JUMP		 	 
- stack 0: 0x58C
2250	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x58C
2251	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2252	 3E8	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x3E6000003E60000030A000003290001034800020362FFD801DB00F00114000F
2253	 3E9	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x3E6000003E60000030A000003290001034800020362FFD801DB00F00114000F
- stack 0: 0xE0
2254	 3EB	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x3E60000
2255	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x3E60000
- stack 0: 0xFFFF
2256	 3EF	AND		 	 
- stack 1: 0x58C
- stack 0: 0x0
2257	 3F0	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x1
2258	 3F2	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x0
2259	 3F3	POP		 	 
- stack 0: 0x58C
2260	 3F4	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2261	 3F6	ADD		 	 
- stack 0: 0x590
2262	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2263	 3F8	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x3E60000030A000003290001034800020362FFD801DB00F00114000F0133000B
2264	 3F9	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x3E60000030A000003290001034800020362FFD801DB00F00114000F0133000B
- stack 0: 0xF0
2265	 3FB	SHR		 	 
- stack 1: 0x590
- stack 0: 0x3E6
2266	 3FC	JUMP		 	 
- stack 0: 0x590
2267	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x590
2268	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2269	 3E8	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x3E60000030A000003290001034800020362FFD801DB00F00114000F0133000B
2270	 3E9	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x3E60000030A000003290001034800020362FFD801DB00F00114000F0133000B
- stack 0: 0xE0
2271	 3EB	SHR		 	 
- stack 1: 0x590
- stack 0: 0x3E60000
2272	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x3E60000
- stack 0: 0xFFFF
2273	 3EF	AND		 	 
- stack 1: 0x590
- stack 0: 0x0
2274	 3F0	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x1
2275	 3F2	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x0
2276	 3F3	POP		 	 
- stack 0: 0x590
2277	 3F4	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2278	 3F6	ADD		 	 
- stack 0: 0x594
2279	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2280	 3F8	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x30A000003290001034800020362FFD801DB00F00114000F0133000B03A40318
2281	 3F9	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x30A000003290001034800020362FFD801DB00F00114000F0133000B03A40318
- stack 0: 0xF0
2282	 3FB	SHR		 	 
- stack 1: 0x594
- stack 0: 0x30A
2283	 3FC	JUMP		 	 
- stack 0: 0x594
2284	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x594
2285	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2286	 30C	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x30A000003290001034800020362FFD801DB00F00114000F0133000B03A40318
2287	 30D	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x30A000003290001034800020362FFD801DB00F00114000F0133000B03A40318
- stack 0: 0xE0
2288	 30F	SHR		 	 
- stack 1: 0x594
- stack 0: 0x30A0000
2289	 310	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x30A0000
- stack 0: 0xFFFF
2290	 313	AND		 	 
- stack 1: 0x594
- stack 0: 0x0
2291	 314	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2292	 316	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x0
2293	 317	PUSH2	0060	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x60
2294	 31A	MLOAD		 	  ;; # read from x3
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0xF000F
2295	 31B	ADD		 	  ;; # ADDI 3
- stack 1: 0x594
- stack 0: 0xF000F
2296	 31C	PUSH2	00C0	 	 
- stack 2: 0x594
- stack 1: 0xF000F
- stack 0: 0xC0
2297	 31F	MSTORE		 	  ;; # store to x6
- stack 0: 0x594
2298	 320	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2299	 322	ADD		 	 
- stack 0: 0x598
2300	 323	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2301	 324	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x3290001034800020362FFD801DB00F00114000F0133000B03A4031802F00000
2302	 325	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x3290001034800020362FFD801DB00F00114000F0133000B03A4031802F00000
- stack 0: 0xF0
2303	 327	SHR		 	 
- stack 1: 0x598
- stack 0: 0x329
2304	 328	JUMP		 	 
- stack 0: 0x598
2305	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x598
2306	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2307	 32B	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x3290001034800020362FFD801DB00F00114000F0133000B03A4031802F00000
2308	 32C	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x3290001034800020362FFD801DB00F00114000F0133000B03A4031802F00000
- stack 0: 0xE0
2309	 32E	SHR		 	 
- stack 1: 0x598
- stack 0: 0x3290001
2310	 32F	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x3290001
- stack 0: 0xFFFF
2311	 332	AND		 	 
- stack 1: 0x598
- stack 0: 0x1
2312	 333	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x1
2313	 335	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x1
2314	 336	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x80
2315	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x1
2316	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x598
- stack 0: 0x2
2317	 33B	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x2
- stack 0: 0x80
2318	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x598
2319	 33F	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2320	 341	ADD		 	 
- stack 0: 0x59C
2321	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2322	 343	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x34800020362FFD801DB00F00114000F0133000B03A4031802F000000086F010
2323	 344	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x34800020362FFD801DB00F00114000F0133000B03A4031802F000000086F010
- stack 0: 0xF0
2324	 346	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x348
2325	 347	JUMP		 	 
- stack 0: 0x59C
2326	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x59C
2327	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2328	 34A	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x34800020362FFD801DB00F00114000F0133000B03A4031802F000000086F010
2329	 34B	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x34800020362FFD801DB00F00114000F0133000B03A4031802F000000086F010
- stack 0: 0xE0
2330	 34D	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x3480002
2331	 34E	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x3480002
- stack 0: 0xFFFF
2332	 351	AND		 	 
- stack 1: 0x59C
- stack 0: 0x2
2333	 352	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0x1
2334	 354	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x2
2335	 355	PUSH2	00A0	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0xA0
2336	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x59C
2337	 359	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2338	 35B	ADD		 	 
- stack 0: 0x5A0
2339	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2340	 35D	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x362FFD801DB00F00114000F0133000B03A4031802F000000086F0100099FF00
2341	 35E	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x362FFD801DB00F00114000F0133000B03A4031802F000000086F0100099FF00
- stack 0: 0xF0
2342	 360	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x362
2343	 361	JUMP		 	 
- stack 0: 0x5A0
2344	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5A0
2345	 363	PUSH2	0080	 	 
- stack 1: 0x5A0
- stack 0: 0x80
2346	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x5A0
- stack 0: 0x2
2347	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2348	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A0
- stack 0: 0x2
2349	 36D	PUSH2	00A0	 	 
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0xA0
2350	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0x2
2351	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2352	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0x2
2353	 377	SUB		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2354	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x380
2355	 37B	JUMPI		 	 
- stack 0: 0x5A0
2356	 37C	PUSH2	039A	 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 1: 0x5A0
- stack 0: 0x39A
2357	 37F	JUMP		 	 
- stack 0: 0x5A0
2358	 39A	JUMPDEST		 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x5A0
2359	 39B	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2360	 39D	ADD		 	 
- stack 0: 0x5A4
2361	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2362	 39F	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1DB00F00114000F0133000B03A4031802F000000086F0100099FF0000B8F0F1
2363	 3A0	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x1DB00F00114000F0133000B03A4031802F000000086F0100099FF0000B8F0F1
- stack 0: 0xF0
2364	 3A2	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1DB
2365	 3A3	JUMP		 	 
- stack 0: 0x5A4
2366	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_f0eb7	  ;; # instr: lui t4,0xf0(ignore imm)
- stack 0: 0x5A4
2367	 1DC	PUSH4	000f0000	 	 
- stack 1: 0x5A4
- stack 0: 0xF0000
2368	 1E1	PUSH2	03A0	 	 
- stack 2: 0x5A4
- stack 1: 0xF0000
- stack 0: 0x3A0
2369	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x5A4
2370	 1E5	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2371	 1E7	ADD		 	 
- stack 0: 0x5A8
2372	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2373	 1E9	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x114000F0133000B03A4031802F000000086F0100099FF0000B8F0F100CBFF0F
2374	 1EA	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x114000F0133000B03A4031802F000000086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xF0
2375	 1EC	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x114
2376	 1ED	JUMP		 	 
- stack 0: 0x5A8
2377	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x5A8
2378	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2379	 116	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x114000F0133000B03A4031802F000000086F0100099FF0000B8F0F100CBFF0F
2380	 117	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x114000F0133000B03A4031802F000000086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xE0
2381	 119	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x114000F
2382	 11A	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x114000F
- stack 0: 0xFFFF
2383	 11D	AND		 	 
- stack 1: 0x5A8
- stack 0: 0xF
2384	 11E	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0xF
- stack 0: 0x1
2385	 120	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0xF
2386	 121	PUSH2	03A0	 	 
- stack 2: 0x5A8
- stack 1: 0xF
- stack 0: 0x3A0
2387	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x5A8
- stack 1: 0xF
- stack 0: 0xF0000
2388	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x5A8
- stack 0: 0xF000F
2389	 126	PUSH2	03A0	 	 
- stack 2: 0x5A8
- stack 1: 0xF000F
- stack 0: 0x3A0
2390	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x5A8
2391	 12A	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2392	 12C	ADD		 	 
- stack 0: 0x5AC
2393	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2394	 12E	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x133000B03A4031802F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
2395	 12F	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x133000B03A4031802F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
2396	 131	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x133
2397	 132	JUMP		 	 
- stack 0: 0x5AC
2398	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5AC
2399	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2400	 135	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x133000B03A4031802F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
2401	 136	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x133000B03A4031802F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
2402	 138	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x133000B
2403	 139	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x133000B
- stack 0: 0xFFFF
2404	 13C	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xB
2405	 13D	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xB
- stack 0: 0x1
2406	 13F	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xB
2407	 140	PUSH2	0380	 	 
- stack 2: 0x5AC
- stack 1: 0xB
- stack 0: 0x380
2408	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x5AC
2409	 144	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2410	 146	ADD		 	 
- stack 0: 0x5B0
2411	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2412	 148	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x3A4031802F000000086F0100099FF0000B8F0F100CBFF0F00EA000003290001
2413	 149	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x3A4031802F000000086F0100099FF0000B8F0F100CBFF0F00EA000003290001
- stack 0: 0xF0
2414	 14B	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x3A4
2415	 14C	JUMP		 	 
- stack 0: 0x5B0
2416	 3A4	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,394(ignore imm)
- stack 0: 0x5B0
2417	 3A5	PUSH2	00C0	 	 
- stack 1: 0x5B0
- stack 0: 0xC0
2418	 3A8	MLOAD		 	  ;; # read from x6
- stack 1: 0x5B0
- stack 0: 0xF000F
2419	 3A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B0
- stack 1: 0xF000F
- stack 0: 0xFFFFFFFF
2420	 3AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B0
- stack 0: 0xF000F
2421	 3AF	PUSH2	03A0	 	 
- stack 2: 0x5B0
- stack 1: 0xF000F
- stack 0: 0x3A0
2422	 3B2	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B0
- stack 1: 0xF000F
- stack 0: 0xF000F
2423	 3B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B0
- stack 2: 0xF000F
- stack 1: 0xF000F
- stack 0: 0xFFFFFFFF
2424	 3B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B0
- stack 1: 0xF000F
- stack 0: 0xF000F
2425	 3B9	SUB		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2426	 3BA	PUSH2	03C2	 ;; _neq_36f94e36f7096026b70cc098a3a8e7b5a2e4a99c749d61304a91af9587204e5a	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x3C2
2427	 3BD	JUMPI		 	 
- stack 0: 0x5B0
2428	 3BE	PUSH2	03DC	 ;; _neq_after_36f94e36f7096026b70cc098a3a8e7b5a2e4a99c749d61304a91af9587204e5a	 
- stack 1: 0x5B0
- stack 0: 0x3DC
2429	 3C1	JUMP		 	 
- stack 0: 0x5B0
2430	 3DC	JUMPDEST		 ;; _neq_after_36f94e36f7096026b70cc098a3a8e7b5a2e4a99c749d61304a91af9587204e5a	 
- stack 0: 0x5B0
2431	 3DD	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2432	 3DF	ADD		 	 
- stack 0: 0x5B4
2433	 3E0	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2434	 3E1	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA00000329000103480002
2435	 3E2	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xF0
2436	 3E4	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x2F0
2437	 3E5	JUMP		 	 
- stack 0: 0x5B4
2438	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5B4
2439	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2440	 2F2	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA00000329000103480002
2441	 2F3	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xE0
2442	 2F5	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x2F00000
2443	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x2F00000
- stack 0: 0xFFFF
2444	 2F9	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2445	 2FA	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x1
2446	 2FC	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2447	 2FD	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x80
2448	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B4
2449	 301	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2450	 303	ADD		 	 
- stack 0: 0x5B8
2451	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2452	 305	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE4
2453	 306	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE4
- stack 0: 0xF0
2454	 308	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x86
2455	 309	JUMP		 	 
- stack 0: 0x5B8
2456	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x5B8
2457	 87	PUSH4	ff010000	 	 
- stack 1: 0x5B8
- stack 0: 0xFF010000
2458	 8C	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0xFF010000
- stack 0: 0x20
2459	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B8
2460	 90	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2461	 92	ADD		 	 
- stack 0: 0x5BC
2462	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2463	 94	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F001
2464	 95	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F001
- stack 0: 0xF0
2465	 97	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x99
2466	 98	JUMP		 	 
- stack 0: 0x5BC
2467	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x5BC
2468	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2469	 9B	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F001
2470	 9C	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F001
- stack 0: 0xE0
2471	 9E	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x99FF00
2472	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x99FF00
- stack 0: 0xFFFF
2473	 A2	AND		 	 
- stack 1: 0x5BC
- stack 0: 0xFF00
2474	 A3	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0xFF00
- stack 0: 0x1
2475	 A5	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2476	 A6	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
2477	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
2478	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x5BC
- stack 0: 0xFF00FF00
2479	 AB	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xFF00FF00
- stack 0: 0x20
2480	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5BC
2481	 AF	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2482	 B1	ADD		 	 
- stack 0: 0x5C0
2483	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2484	 B3	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE40101F0010114FF00
2485	 B4	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE40101F0010114FF00
- stack 0: 0xF0
2486	 B6	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xB8
2487	 B7	JUMP		 	 
- stack 0: 0x5C0
2488	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x5C0
2489	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x5C0
- stack 0: 0xF0F1000
2490	 BE	PUSH2	0040	 	 
- stack 2: 0x5C0
- stack 1: 0xF0F1000
- stack 0: 0x40
2491	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C0
2492	 C2	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2493	 C4	ADD		 	 
- stack 0: 0x5C4
2494	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2495	 C6	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE40101F0010114FF000133000C
2496	 C7	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE40101F0010114FF000133000C
- stack 0: 0xF0
2497	 C9	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xCB
2498	 CA	JUMP		 	 
- stack 0: 0x5C4
2499	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x5C4
2500	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2501	 CD	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE40101F0010114FF000133000C
2502	 CE	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE40101F0010114FF000133000C
- stack 0: 0xE0
2503	 D0	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xCBFF0F
2504	 D1	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
2505	 D4	AND		 	 
- stack 1: 0x5C4
- stack 0: 0xFF0F
2506	 D5	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0xFF0F
- stack 0: 0x1
2507	 D7	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
2508	 D8	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
2509	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x5C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
2510	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x5C4
- stack 0: 0xF0F0F0F
2511	 DD	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0xF0F0F0F
- stack 0: 0x40
2512	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C4
2513	 E1	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2514	 E3	ADD		 	 
- stack 0: 0x5C8
2515	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2516	 E5	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xEA000003290001034800020362FFE40101F0010114FF000133000C014D02E4
2517	 E6	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0xEA000003290001034800020362FFE40101F0010114FF000133000C014D02E4
- stack 0: 0xF0
2518	 E8	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xEA
2519	 E9	JUMP		 	 
- stack 0: 0x5C8
2520	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x5C8
2521	 EB	PUSH2	0040	 	 
- stack 1: 0x5C8
- stack 0: 0x40
2522	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x5C8
- stack 0: 0xF0F0F0F
2523	 EF	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0xF0F0F0F
- stack 0: 0x20
2524	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5C8
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
2525	 F3	AND		 	  ;; # AND
- stack 1: 0x5C8
- stack 0: 0xF000F00
2526	 F4	PUSH2	0060	 	 
- stack 2: 0x5C8
- stack 1: 0xF000F00
- stack 0: 0x60
2527	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x5C8
2528	 F8	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2529	 FA	ADD		 	 
- stack 0: 0x5CC
2530	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2531	 FC	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x3290001034800020362FFE40101F0010114FF000133000C014D02E402F00000
2532	 FD	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x3290001034800020362FFE40101F0010114FF000133000C014D02E402F00000
- stack 0: 0xF0
2533	 FF	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x329
2534	 100	JUMP		 	 
- stack 0: 0x5CC
2535	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5CC
2536	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2537	 32B	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x3290001034800020362FFE40101F0010114FF000133000C014D02E402F00000
2538	 32C	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x3290001034800020362FFE40101F0010114FF000133000C014D02E402F00000
- stack 0: 0xE0
2539	 32E	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x3290001
2540	 32F	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x3290001
- stack 0: 0xFFFF
2541	 332	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2542	 333	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x1
2543	 335	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2544	 336	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x80
2545	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x0
2546	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x5CC
- stack 0: 0x1
2547	 33B	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x80
2548	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x5CC
2549	 33F	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2550	 341	ADD		 	 
- stack 0: 0x5D0
2551	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2552	 343	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x34800020362FFE40101F0010114FF000133000C014D02E402F00000018FFF01
2553	 344	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x34800020362FFE40101F0010114FF000133000C014D02E402F00000018FFF01
- stack 0: 0xF0
2554	 346	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x348
2555	 347	JUMP		 	 
- stack 0: 0x5D0
2556	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D0
2557	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2558	 34A	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x34800020362FFE40101F0010114FF000133000C014D02E402F00000018FFF01
2559	 34B	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x34800020362FFE40101F0010114FF000133000C014D02E402F00000018FFF01
- stack 0: 0xE0
2560	 34D	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x3480002
2561	 34E	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x3480002
- stack 0: 0xFFFF
2562	 351	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2563	 352	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0x1
2564	 354	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2565	 355	PUSH2	00A0	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0xA0
2566	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D0
2567	 359	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2568	 35B	ADD		 	 
- stack 0: 0x5D4
2569	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2570	 35D	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x362FFE40101F0010114FF000133000C014D02E402F00000018FFF010099FFF0
2571	 35E	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x362FFE40101F0010114FF000133000C014D02E402F00000018FFF010099FFF0
- stack 0: 0xF0
2572	 360	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x362
2573	 361	JUMP		 	 
- stack 0: 0x5D4
2574	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5D4
2575	 363	PUSH2	0080	 	 
- stack 1: 0x5D4
- stack 0: 0x80
2576	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D4
- stack 0: 0x1
2577	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2578	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x1
2579	 36D	PUSH2	00A0	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0xA0
2580	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x2
2581	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2582	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x2
2583	 377	SUB		 	 
- stack 1: 0x5D4
- stack 0: 0x1
2584	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x380
2585	 37B	JUMPI		 	 
- stack 0: 0x5D4
2586	 380	JUMPDEST		 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x5D4
2587	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2588	 382	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x362FFE40101F0010114FF000133000C014D02E402F00000018FFF010099FFF0
2589	 383	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x362FFE40101F0010114FF000133000C014D02E402F00000018FFF010099FFF0
- stack 0: 0xE0
2590	 385	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x362FFE4
2591	 386	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x362FFE4
- stack 0: 0xFFFF
2592	 389	AND		 	 
- stack 1: 0x5D4
- stack 0: 0xFFE4
2593	 38A	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0xFFE4
- stack 0: 0x1
2594	 38C	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2595	 38D	ADD		 	 
- stack 0: 0x5B8
2596	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5B8
- stack 0: 0xFFFFFFFF
2597	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5B8
2598	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2599	 395	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE4
2600	 396	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE4
- stack 0: 0xF0
2601	 398	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x86
2602	 399	JUMP		 	 
- stack 0: 0x5B8
2603	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x5B8
2604	 87	PUSH4	ff010000	 	 
- stack 1: 0x5B8
- stack 0: 0xFF010000
2605	 8C	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0xFF010000
- stack 0: 0x20
2606	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B8
2607	 90	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2608	 92	ADD		 	 
- stack 0: 0x5BC
2609	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2610	 94	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F001
2611	 95	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F001
- stack 0: 0xF0
2612	 97	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x99
2613	 98	JUMP		 	 
- stack 0: 0x5BC
2614	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x5BC
2615	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2616	 9B	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F001
2617	 9C	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F001
- stack 0: 0xE0
2618	 9E	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x99FF00
2619	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x99FF00
- stack 0: 0xFFFF
2620	 A2	AND		 	 
- stack 1: 0x5BC
- stack 0: 0xFF00
2621	 A3	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0xFF00
- stack 0: 0x1
2622	 A5	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2623	 A6	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
2624	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
2625	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x5BC
- stack 0: 0xFF00FF00
2626	 AB	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xFF00FF00
- stack 0: 0x20
2627	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5BC
2628	 AF	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2629	 B1	ADD		 	 
- stack 0: 0x5C0
2630	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2631	 B3	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE40101F0010114FF00
2632	 B4	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE40101F0010114FF00
- stack 0: 0xF0
2633	 B6	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xB8
2634	 B7	JUMP		 	 
- stack 0: 0x5C0
2635	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x5C0
2636	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x5C0
- stack 0: 0xF0F1000
2637	 BE	PUSH2	0040	 	 
- stack 2: 0x5C0
- stack 1: 0xF0F1000
- stack 0: 0x40
2638	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C0
2639	 C2	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2640	 C4	ADD		 	 
- stack 0: 0x5C4
2641	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2642	 C6	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE40101F0010114FF000133000C
2643	 C7	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE40101F0010114FF000133000C
- stack 0: 0xF0
2644	 C9	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xCB
2645	 CA	JUMP		 	 
- stack 0: 0x5C4
2646	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x5C4
2647	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2648	 CD	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE40101F0010114FF000133000C
2649	 CE	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE40101F0010114FF000133000C
- stack 0: 0xE0
2650	 D0	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xCBFF0F
2651	 D1	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
2652	 D4	AND		 	 
- stack 1: 0x5C4
- stack 0: 0xFF0F
2653	 D5	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0xFF0F
- stack 0: 0x1
2654	 D7	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
2655	 D8	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
2656	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x5C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
2657	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x5C4
- stack 0: 0xF0F0F0F
2658	 DD	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0xF0F0F0F
- stack 0: 0x40
2659	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C4
2660	 E1	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2661	 E3	ADD		 	 
- stack 0: 0x5C8
2662	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2663	 E5	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xEA000003290001034800020362FFE40101F0010114FF000133000C014D02E4
2664	 E6	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0xEA000003290001034800020362FFE40101F0010114FF000133000C014D02E4
- stack 0: 0xF0
2665	 E8	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xEA
2666	 E9	JUMP		 	 
- stack 0: 0x5C8
2667	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x5C8
2668	 EB	PUSH2	0040	 	 
- stack 1: 0x5C8
- stack 0: 0x40
2669	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x5C8
- stack 0: 0xF0F0F0F
2670	 EF	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0xF0F0F0F
- stack 0: 0x20
2671	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5C8
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
2672	 F3	AND		 	  ;; # AND
- stack 1: 0x5C8
- stack 0: 0xF000F00
2673	 F4	PUSH2	0060	 	 
- stack 2: 0x5C8
- stack 1: 0xF000F00
- stack 0: 0x60
2674	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x5C8
2675	 F8	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2676	 FA	ADD		 	 
- stack 0: 0x5CC
2677	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2678	 FC	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x3290001034800020362FFE40101F0010114FF000133000C014D02E402F00000
2679	 FD	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x3290001034800020362FFE40101F0010114FF000133000C014D02E402F00000
- stack 0: 0xF0
2680	 FF	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x329
2681	 100	JUMP		 	 
- stack 0: 0x5CC
2682	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5CC
2683	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2684	 32B	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x3290001034800020362FFE40101F0010114FF000133000C014D02E402F00000
2685	 32C	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x3290001034800020362FFE40101F0010114FF000133000C014D02E402F00000
- stack 0: 0xE0
2686	 32E	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x3290001
2687	 32F	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x3290001
- stack 0: 0xFFFF
2688	 332	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2689	 333	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x1
2690	 335	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2691	 336	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x80
2692	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x1
2693	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x5CC
- stack 0: 0x2
2694	 33B	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0x80
2695	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x5CC
2696	 33F	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2697	 341	ADD		 	 
- stack 0: 0x5D0
2698	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2699	 343	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x34800020362FFE40101F0010114FF000133000C014D02E402F00000018FFF01
2700	 344	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x34800020362FFE40101F0010114FF000133000C014D02E402F00000018FFF01
- stack 0: 0xF0
2701	 346	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x348
2702	 347	JUMP		 	 
- stack 0: 0x5D0
2703	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D0
2704	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2705	 34A	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x34800020362FFE40101F0010114FF000133000C014D02E402F00000018FFF01
2706	 34B	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x34800020362FFE40101F0010114FF000133000C014D02E402F00000018FFF01
- stack 0: 0xE0
2707	 34D	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x3480002
2708	 34E	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x3480002
- stack 0: 0xFFFF
2709	 351	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2710	 352	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0x1
2711	 354	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2712	 355	PUSH2	00A0	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0xA0
2713	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D0
2714	 359	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2715	 35B	ADD		 	 
- stack 0: 0x5D4
2716	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2717	 35D	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x362FFE40101F0010114FF000133000C014D02E402F00000018FFF010099FFF0
2718	 35E	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x362FFE40101F0010114FF000133000C014D02E402F00000018FFF010099FFF0
- stack 0: 0xF0
2719	 360	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x362
2720	 361	JUMP		 	 
- stack 0: 0x5D4
2721	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5D4
2722	 363	PUSH2	0080	 	 
- stack 1: 0x5D4
- stack 0: 0x80
2723	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D4
- stack 0: 0x2
2724	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2725	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x2
2726	 36D	PUSH2	00A0	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0xA0
2727	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x2
2728	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2729	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x2
2730	 377	SUB		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2731	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x380
2732	 37B	JUMPI		 	 
- stack 0: 0x5D4
2733	 37C	PUSH2	039A	 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 1: 0x5D4
- stack 0: 0x39A
2734	 37F	JUMP		 	 
- stack 0: 0x5D4
2735	 39A	JUMPDEST		 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x5D4
2736	 39B	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2737	 39D	ADD		 	 
- stack 0: 0x5D8
2738	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2739	 39F	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x101F0010114FF000133000C014D02E402F00000018FFF010099FFF001A20F0F
2740	 3A0	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x101F0010114FF000133000C014D02E402F00000018FFF010099FFF001A20F0F
- stack 0: 0xF0
2741	 3A2	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x101
2742	 3A3	JUMP		 	 
- stack 0: 0x5D8
2743	 101	JUMPDEST		 ;; __riscvimpl_LUI_f001eb7	  ;; # instr: lui t4,0xf001(ignore imm)
- stack 0: 0x5D8
2744	 102	PUSH4	0f001000	 	 
- stack 1: 0x5D8
- stack 0: 0xF001000
2745	 107	PUSH2	03A0	 	 
- stack 2: 0x5D8
- stack 1: 0xF001000
- stack 0: 0x3A0
2746	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D8
2747	 10B	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2748	 10D	ADD		 	 
- stack 0: 0x5DC
2749	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2750	 10F	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x114FF000133000C014D02E402F00000018FFF010099FFF001A20F0F00CB00F0
2751	 110	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x114FF000133000C014D02E402F00000018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xF0
2752	 112	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x114
2753	 113	JUMP		 	 
- stack 0: 0x5DC
2754	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x5DC
2755	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2756	 116	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x114FF000133000C014D02E402F00000018FFF010099FFF001A20F0F00CB00F0
2757	 117	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x114FF000133000C014D02E402F00000018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xE0
2758	 119	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x114FF00
2759	 11A	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x114FF00
- stack 0: 0xFFFF
2760	 11D	AND		 	 
- stack 1: 0x5DC
- stack 0: 0xFF00
2761	 11E	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0xFF00
- stack 0: 0x1
2762	 120	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2763	 121	PUSH2	03A0	 	 
- stack 2: 0x5DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
2764	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x5DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xF001000
2765	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x5DC
- stack 0: 0xF000F00
2766	 126	PUSH2	03A0	 	 
- stack 2: 0x5DC
- stack 1: 0xF000F00
- stack 0: 0x3A0
2767	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x5DC
2768	 12A	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2769	 12C	ADD		 	 
- stack 0: 0x5E0
2770	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2771	 12E	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x133000C014D02E402F00000018FFF010099FFF001A20F0F00CB00F003E60000
2772	 12F	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x133000C014D02E402F00000018FFF010099FFF001A20F0F00CB00F003E60000
- stack 0: 0xF0
2773	 131	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x133
2774	 132	JUMP		 	 
- stack 0: 0x5E0
2775	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5E0
2776	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2777	 135	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x133000C014D02E402F00000018FFF010099FFF001A20F0F00CB00F003E60000
2778	 136	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x133000C014D02E402F00000018FFF010099FFF001A20F0F00CB00F003E60000
- stack 0: 0xE0
2779	 138	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x133000C
2780	 139	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x133000C
- stack 0: 0xFFFF
2781	 13C	AND		 	 
- stack 1: 0x5E0
- stack 0: 0xC
2782	 13D	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0xC
- stack 0: 0x1
2783	 13F	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0xC
2784	 140	PUSH2	0380	 	 
- stack 2: 0x5E0
- stack 1: 0xC
- stack 0: 0x380
2785	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x5E0
2786	 144	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2787	 146	ADD		 	 
- stack 0: 0x5E4
2788	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2789	 148	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x14D02E402F00000018FFF010099FFF001A20F0F00CB00F003E6000000EA0000
2790	 149	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x14D02E402F00000018FFF010099FFF001A20F0F00CB00F003E6000000EA0000
- stack 0: 0xF0
2791	 14B	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x14D
2792	 14C	JUMP		 	 
- stack 0: 0x5E4
2793	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x5E4
2794	 14E	PUSH2	0060	 	 
- stack 1: 0x5E4
- stack 0: 0x60
2795	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x5E4
- stack 0: 0xF000F00
2796	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E4
- stack 1: 0xF000F00
- stack 0: 0xFFFFFFFF
2797	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E4
- stack 0: 0xF000F00
2798	 158	PUSH2	03A0	 	 
- stack 2: 0x5E4
- stack 1: 0xF000F00
- stack 0: 0x3A0
2799	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x5E4
- stack 1: 0xF000F00
- stack 0: 0xF000F00
2800	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E4
- stack 2: 0xF000F00
- stack 1: 0xF000F00
- stack 0: 0xFFFFFFFF
2801	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E4
- stack 1: 0xF000F00
- stack 0: 0xF000F00
2802	 162	SUB		 	 
- stack 1: 0x5E4
- stack 0: 0x0
2803	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x16B
2804	 166	JUMPI		 	 
- stack 0: 0x5E4
2805	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x5E4
- stack 0: 0x185
2806	 16A	JUMP		 	 
- stack 0: 0x5E4
2807	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x5E4
2808	 186	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2809	 188	ADD		 	 
- stack 0: 0x5E8
2810	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2811	 18A	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x2F00000018FFF010099FFF001A20F0F00CB00F003E6000000EA000003290001
2812	 18B	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x2F00000018FFF010099FFF001A20F0F00CB00F003E6000000EA000003290001
- stack 0: 0xF0
2813	 18D	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x2F0
2814	 18E	JUMP		 	 
- stack 0: 0x5E8
2815	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5E8
2816	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
2817	 2F2	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x2F00000018FFF010099FFF001A20F0F00CB00F003E6000000EA000003290001
2818	 2F3	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x2F00000018FFF010099FFF001A20F0F00CB00F003E6000000EA000003290001
- stack 0: 0xE0
2819	 2F5	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x2F00000
2820	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x2F00000
- stack 0: 0xFFFF
2821	 2F9	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2822	 2FA	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x1
2823	 2FC	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2824	 2FD	PUSH2	0080	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x80
2825	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E8
2826	 301	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2827	 303	ADD		 	 
- stack 0: 0x5EC
2828	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2829	 305	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F003E6000000EA00000329000103480002
2830	 306	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F003E6000000EA00000329000103480002
- stack 0: 0xF0
2831	 308	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x18F
2832	 309	JUMP		 	 
- stack 0: 0x5EC
2833	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x5EC
2834	 190	PUSH4	0ff01000	 	 
- stack 1: 0x5EC
- stack 0: 0xFF01000
2835	 195	PUSH2	0020	 	 
- stack 2: 0x5EC
- stack 1: 0xFF01000
- stack 0: 0x20
2836	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x5EC
2837	 199	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2838	 19B	ADD		 	 
- stack 0: 0x5F0
2839	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2840	 19D	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
2841	 19E	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
- stack 0: 0xF0
2842	 1A0	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x99
2843	 1A1	JUMP		 	 
- stack 0: 0x5F0
2844	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x5F0
2845	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2846	 9B	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
2847	 9C	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
- stack 0: 0xE0
2848	 9E	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x99FFF0
2849	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
2850	 A2	AND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFF0
2851	 A3	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0xFFF0
- stack 0: 0x1
2852	 A5	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2853	 A6	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
2854	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
2855	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F0
- stack 0: 0xFF00FF0
2856	 AB	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xFF00FF0
- stack 0: 0x20
2857	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F0
2858	 AF	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2859	 B1	ADD		 	 
- stack 0: 0x5F4
2860	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2861	 B3	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFE001B50F00
2862	 B4	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFE001B50F00
- stack 0: 0xF0
2863	 B6	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x1A2
2864	 B7	JUMP		 	 
- stack 0: 0x5F4
2865	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x5F4
2866	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x5F4
- stack 0: 0xF0F0F000
2867	 1A8	PUSH2	0040	 	 
- stack 2: 0x5F4
- stack 1: 0xF0F0F000
- stack 0: 0x40
2868	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F4
2869	 1AC	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2870	 1AE	ADD		 	 
- stack 0: 0x5F8
2871	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2872	 1B0	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFE001B50F00011400F0
2873	 1B1	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFE001B50F00011400F0
- stack 0: 0xF0
2874	 1B3	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xCB
2875	 1B4	JUMP		 	 
- stack 0: 0x5F8
2876	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x5F8
2877	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
2878	 CD	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFE001B50F00011400F0
2879	 CE	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFE001B50F00011400F0
- stack 0: 0xE0
2880	 D0	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xCB00F0
2881	 D1	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
2882	 D4	AND		 	 
- stack 1: 0x5F8
- stack 0: 0xF0
2883	 D5	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xF0
- stack 0: 0x1
2884	 D7	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xF0
2885	 D8	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0xF0
- stack 0: 0x40
2886	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x5F8
- stack 1: 0xF0
- stack 0: 0xF0F0F000
2887	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x5F8
- stack 0: 0xF0F0F0F0
2888	 DD	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
2889	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F8
2890	 E1	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2891	 E3	ADD		 	 
- stack 0: 0x5FC
2892	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2893	 E5	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F00133000D
2894	 E6	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F00133000D
- stack 0: 0xF0
2895	 E8	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x3E6
2896	 E9	JUMP		 	 
- stack 0: 0x5FC
2897	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5FC
2898	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2899	 3E8	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F00133000D
2900	 3E9	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F00133000D
- stack 0: 0xE0
2901	 3EB	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x3E60000
2902	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x3E60000
- stack 0: 0xFFFF
2903	 3EF	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
2904	 3F0	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
2905	 3F2	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
2906	 3F3	POP		 	 
- stack 0: 0x5FC
2907	 3F4	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2908	 3F6	ADD		 	 
- stack 0: 0x600
2909	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2910	 3F8	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xEA000003290001034800020362FFE001B50F00011400F00133000D014D02AC
2911	 3F9	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xEA000003290001034800020362FFE001B50F00011400F00133000D014D02AC
- stack 0: 0xF0
2912	 3FB	SHR		 	 
- stack 1: 0x600
- stack 0: 0xEA
2913	 3FC	JUMP		 	 
- stack 0: 0x600
2914	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x600
2915	 EB	PUSH2	0040	 	 
- stack 1: 0x600
- stack 0: 0x40
2916	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x600
- stack 0: 0xF0F0F0F0
2917	 EF	PUSH2	0020	 	 
- stack 2: 0x600
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
2918	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x600
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
2919	 F3	AND		 	  ;; # AND
- stack 1: 0x600
- stack 0: 0xF000F0
2920	 F4	PUSH2	0060	 	 
- stack 2: 0x600
- stack 1: 0xF000F0
- stack 0: 0x60
2921	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x600
2922	 F8	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2923	 FA	ADD		 	 
- stack 0: 0x604
2924	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2925	 FC	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3290001034800020362FFE001B50F00011400F00133000D014D02AC02F00000
2926	 FD	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x3290001034800020362FFE001B50F00011400F00133000D014D02AC02F00000
- stack 0: 0xF0
2927	 FF	SHR		 	 
- stack 1: 0x604
- stack 0: 0x329
2928	 100	JUMP		 	 
- stack 0: 0x604
2929	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x604
2930	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
2931	 32B	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3290001034800020362FFE001B50F00011400F00133000D014D02AC02F00000
2932	 32C	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x3290001034800020362FFE001B50F00011400F00133000D014D02AC02F00000
- stack 0: 0xE0
2933	 32E	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3290001
2934	 32F	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x3290001
- stack 0: 0xFFFF
2935	 332	AND		 	 
- stack 1: 0x604
- stack 0: 0x1
2936	 333	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x1
2937	 335	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x1
2938	 336	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x80
2939	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x0
2940	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x604
- stack 0: 0x1
2941	 33B	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x80
2942	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x604
2943	 33F	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2944	 341	ADD		 	 
- stack 0: 0x608
2945	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2946	 343	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x34800020362FFE001B50F00011400F00133000D014D02AC02F0000001C80FF0
2947	 344	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x34800020362FFE001B50F00011400F00133000D014D02AC02F0000001C80FF0
- stack 0: 0xF0
2948	 346	SHR		 	 
- stack 1: 0x608
- stack 0: 0x348
2949	 347	JUMP		 	 
- stack 0: 0x608
2950	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x608
2951	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2952	 34A	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x34800020362FFE001B50F00011400F00133000D014D02AC02F0000001C80FF0
2953	 34B	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x34800020362FFE001B50F00011400F00133000D014D02AC02F0000001C80FF0
- stack 0: 0xE0
2954	 34D	SHR		 	 
- stack 1: 0x608
- stack 0: 0x3480002
2955	 34E	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x3480002
- stack 0: 0xFFFF
2956	 351	AND		 	 
- stack 1: 0x608
- stack 0: 0x2
2957	 352	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x1
2958	 354	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x2
2959	 355	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xA0
2960	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x608
2961	 359	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2962	 35B	ADD		 	 
- stack 0: 0x60C
2963	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2964	 35D	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x362FFE001B50F00011400F00133000D014D02AC02F0000001C80FF0009900FF
2965	 35E	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x362FFE001B50F00011400F00133000D014D02AC02F0000001C80FF0009900FF
- stack 0: 0xF0
2966	 360	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x362
2967	 361	JUMP		 	 
- stack 0: 0x60C
2968	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x60C
2969	 363	PUSH2	0080	 	 
- stack 1: 0x60C
- stack 0: 0x80
2970	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x60C
- stack 0: 0x1
2971	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2972	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x1
2973	 36D	PUSH2	00A0	 	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0xA0
2974	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x2
2975	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x60C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2976	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x2
2977	 377	SUB		 	 
- stack 1: 0x60C
- stack 0: 0x1
2978	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x380
2979	 37B	JUMPI		 	 
- stack 0: 0x60C
2980	 380	JUMPDEST		 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x60C
2981	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
2982	 382	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x362FFE001B50F00011400F00133000D014D02AC02F0000001C80FF0009900FF
2983	 383	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x362FFE001B50F00011400F00133000D014D02AC02F0000001C80FF0009900FF
- stack 0: 0xE0
2984	 385	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x362FFE0
2985	 386	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x362FFE0
- stack 0: 0xFFFF
2986	 389	AND		 	 
- stack 1: 0x60C
- stack 0: 0xFFE0
2987	 38A	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0xFFE0
- stack 0: 0x1
2988	 38C	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
2989	 38D	ADD		 	 
- stack 0: 0x5EC
2990	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5EC
- stack 0: 0xFFFFFFFF
2991	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5EC
2992	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2993	 395	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F003E6000000EA00000329000103480002
2994	 396	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F003E6000000EA00000329000103480002
- stack 0: 0xF0
2995	 398	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x18F
2996	 399	JUMP		 	 
- stack 0: 0x5EC
2997	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x5EC
2998	 190	PUSH4	0ff01000	 	 
- stack 1: 0x5EC
- stack 0: 0xFF01000
2999	 195	PUSH2	0020	 	 
- stack 2: 0x5EC
- stack 1: 0xFF01000
- stack 0: 0x20
3000	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x5EC
3001	 199	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3002	 19B	ADD		 	 
- stack 0: 0x5F0
3003	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3004	 19D	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
3005	 19E	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
- stack 0: 0xF0
3006	 1A0	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x99
3007	 1A1	JUMP		 	 
- stack 0: 0x5F0
3008	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x5F0
3009	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3010	 9B	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
3011	 9C	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
- stack 0: 0xE0
3012	 9E	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x99FFF0
3013	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
3014	 A2	AND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFF0
3015	 A3	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0xFFF0
- stack 0: 0x1
3016	 A5	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3017	 A6	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
3018	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
3019	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F0
- stack 0: 0xFF00FF0
3020	 AB	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xFF00FF0
- stack 0: 0x20
3021	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F0
3022	 AF	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3023	 B1	ADD		 	 
- stack 0: 0x5F4
3024	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3025	 B3	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFE001B50F00
3026	 B4	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFE001B50F00
- stack 0: 0xF0
3027	 B6	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x1A2
3028	 B7	JUMP		 	 
- stack 0: 0x5F4
3029	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x5F4
3030	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x5F4
- stack 0: 0xF0F0F000
3031	 1A8	PUSH2	0040	 	 
- stack 2: 0x5F4
- stack 1: 0xF0F0F000
- stack 0: 0x40
3032	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F4
3033	 1AC	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3034	 1AE	ADD		 	 
- stack 0: 0x5F8
3035	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3036	 1B0	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFE001B50F00011400F0
3037	 1B1	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFE001B50F00011400F0
- stack 0: 0xF0
3038	 1B3	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xCB
3039	 1B4	JUMP		 	 
- stack 0: 0x5F8
3040	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x5F8
3041	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3042	 CD	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFE001B50F00011400F0
3043	 CE	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFE001B50F00011400F0
- stack 0: 0xE0
3044	 D0	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xCB00F0
3045	 D1	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
3046	 D4	AND		 	 
- stack 1: 0x5F8
- stack 0: 0xF0
3047	 D5	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xF0
- stack 0: 0x1
3048	 D7	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xF0
3049	 D8	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0xF0
- stack 0: 0x40
3050	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x5F8
- stack 1: 0xF0
- stack 0: 0xF0F0F000
3051	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x5F8
- stack 0: 0xF0F0F0F0
3052	 DD	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
3053	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F8
3054	 E1	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3055	 E3	ADD		 	 
- stack 0: 0x5FC
3056	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3057	 E5	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F00133000D
3058	 E6	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F00133000D
- stack 0: 0xF0
3059	 E8	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x3E6
3060	 E9	JUMP		 	 
- stack 0: 0x5FC
3061	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5FC
3062	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3063	 3E8	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F00133000D
3064	 3E9	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F00133000D
- stack 0: 0xE0
3065	 3EB	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x3E60000
3066	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x3E60000
- stack 0: 0xFFFF
3067	 3EF	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3068	 3F0	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
3069	 3F2	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3070	 3F3	POP		 	 
- stack 0: 0x5FC
3071	 3F4	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3072	 3F6	ADD		 	 
- stack 0: 0x600
3073	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3074	 3F8	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xEA000003290001034800020362FFE001B50F00011400F00133000D014D02AC
3075	 3F9	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xEA000003290001034800020362FFE001B50F00011400F00133000D014D02AC
- stack 0: 0xF0
3076	 3FB	SHR		 	 
- stack 1: 0x600
- stack 0: 0xEA
3077	 3FC	JUMP		 	 
- stack 0: 0x600
3078	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x600
3079	 EB	PUSH2	0040	 	 
- stack 1: 0x600
- stack 0: 0x40
3080	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x600
- stack 0: 0xF0F0F0F0
3081	 EF	PUSH2	0020	 	 
- stack 2: 0x600
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
3082	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x600
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
3083	 F3	AND		 	  ;; # AND
- stack 1: 0x600
- stack 0: 0xF000F0
3084	 F4	PUSH2	0060	 	 
- stack 2: 0x600
- stack 1: 0xF000F0
- stack 0: 0x60
3085	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x600
3086	 F8	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3087	 FA	ADD		 	 
- stack 0: 0x604
3088	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3089	 FC	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3290001034800020362FFE001B50F00011400F00133000D014D02AC02F00000
3090	 FD	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x3290001034800020362FFE001B50F00011400F00133000D014D02AC02F00000
- stack 0: 0xF0
3091	 FF	SHR		 	 
- stack 1: 0x604
- stack 0: 0x329
3092	 100	JUMP		 	 
- stack 0: 0x604
3093	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x604
3094	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3095	 32B	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3290001034800020362FFE001B50F00011400F00133000D014D02AC02F00000
3096	 32C	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x3290001034800020362FFE001B50F00011400F00133000D014D02AC02F00000
- stack 0: 0xE0
3097	 32E	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3290001
3098	 32F	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x3290001
- stack 0: 0xFFFF
3099	 332	AND		 	 
- stack 1: 0x604
- stack 0: 0x1
3100	 333	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x1
3101	 335	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x1
3102	 336	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x80
3103	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x1
3104	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x604
- stack 0: 0x2
3105	 33B	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x80
3106	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x604
3107	 33F	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3108	 341	ADD		 	 
- stack 0: 0x608
3109	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3110	 343	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x34800020362FFE001B50F00011400F00133000D014D02AC02F0000001C80FF0
3111	 344	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x34800020362FFE001B50F00011400F00133000D014D02AC02F0000001C80FF0
- stack 0: 0xF0
3112	 346	SHR		 	 
- stack 1: 0x608
- stack 0: 0x348
3113	 347	JUMP		 	 
- stack 0: 0x608
3114	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x608
3115	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3116	 34A	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x34800020362FFE001B50F00011400F00133000D014D02AC02F0000001C80FF0
3117	 34B	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x34800020362FFE001B50F00011400F00133000D014D02AC02F0000001C80FF0
- stack 0: 0xE0
3118	 34D	SHR		 	 
- stack 1: 0x608
- stack 0: 0x3480002
3119	 34E	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x3480002
- stack 0: 0xFFFF
3120	 351	AND		 	 
- stack 1: 0x608
- stack 0: 0x2
3121	 352	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x1
3122	 354	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x2
3123	 355	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xA0
3124	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x608
3125	 359	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3126	 35B	ADD		 	 
- stack 0: 0x60C
3127	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3128	 35D	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x362FFE001B50F00011400F00133000D014D02AC02F0000001C80FF0009900FF
3129	 35E	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x362FFE001B50F00011400F00133000D014D02AC02F0000001C80FF0009900FF
- stack 0: 0xF0
3130	 360	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x362
3131	 361	JUMP		 	 
- stack 0: 0x60C
3132	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x60C
3133	 363	PUSH2	0080	 	 
- stack 1: 0x60C
- stack 0: 0x80
3134	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x60C
- stack 0: 0x2
3135	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3136	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x2
3137	 36D	PUSH2	00A0	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0xA0
3138	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0x2
3139	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x60C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3140	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0x2
3141	 377	SUB		 	 
- stack 1: 0x60C
- stack 0: 0x0
3142	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x380
3143	 37B	JUMPI		 	 
- stack 0: 0x60C
3144	 37C	PUSH2	039A	 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 1: 0x60C
- stack 0: 0x39A
3145	 37F	JUMP		 	 
- stack 0: 0x60C
3146	 39A	JUMPDEST		 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x60C
3147	 39B	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3148	 39D	ADD		 	 
- stack 0: 0x610
3149	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3150	 39F	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x1B50F00011400F00133000D014D02AC02F0000001C80FF0009900FF00B8F0F1
3151	 3A0	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x1B50F00011400F00133000D014D02AC02F0000001C80FF0009900FF00B8F0F1
- stack 0: 0xF0
3152	 3A2	SHR		 	 
- stack 1: 0x610
- stack 0: 0x1B5
3153	 3A3	JUMP		 	 
- stack 0: 0x610
3154	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00eb7	  ;; # instr: lui t4,0xf00(ignore imm)
- stack 0: 0x610
3155	 1B6	PUSH4	00f00000	 	 
- stack 1: 0x610
- stack 0: 0xF00000
3156	 1BB	PUSH2	03A0	 	 
- stack 2: 0x610
- stack 1: 0xF00000
- stack 0: 0x3A0
3157	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x610
3158	 1BF	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3159	 1C1	ADD		 	 
- stack 0: 0x614
3160	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3161	 1C3	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x11400F00133000D014D02AC02F0000001C80FF0009900FF00B8F0F100CBFF0F
3162	 1C4	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x11400F00133000D014D02AC02F0000001C80FF0009900FF00B8F0F100CBFF0F
- stack 0: 0xF0
3163	 1C6	SHR		 	 
- stack 1: 0x614
- stack 0: 0x114
3164	 1C7	JUMP		 	 
- stack 0: 0x614
3165	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x614
3166	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3167	 116	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x11400F00133000D014D02AC02F0000001C80FF0009900FF00B8F0F100CBFF0F
3168	 117	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x11400F00133000D014D02AC02F0000001C80FF0009900FF00B8F0F100CBFF0F
- stack 0: 0xE0
3169	 119	SHR		 	 
- stack 1: 0x614
- stack 0: 0x11400F0
3170	 11A	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x11400F0
- stack 0: 0xFFFF
3171	 11D	AND		 	 
- stack 1: 0x614
- stack 0: 0xF0
3172	 11E	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0xF0
- stack 0: 0x1
3173	 120	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0xF0
3174	 121	PUSH2	03A0	 	 
- stack 2: 0x614
- stack 1: 0xF0
- stack 0: 0x3A0
3175	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x614
- stack 1: 0xF0
- stack 0: 0xF00000
3176	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x614
- stack 0: 0xF000F0
3177	 126	PUSH2	03A0	 	 
- stack 2: 0x614
- stack 1: 0xF000F0
- stack 0: 0x3A0
3178	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x614
3179	 12A	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3180	 12C	ADD		 	 
- stack 0: 0x618
3181	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3182	 12E	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x133000D014D02AC02F0000001C80FF0009900FF00B8F0F100CBFF0F03E60000
3183	 12F	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x133000D014D02AC02F0000001C80FF0009900FF00B8F0F100CBFF0F03E60000
- stack 0: 0xF0
3184	 131	SHR		 	 
- stack 1: 0x618
- stack 0: 0x133
3185	 132	JUMP		 	 
- stack 0: 0x618
3186	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x618
3187	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3188	 135	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x133000D014D02AC02F0000001C80FF0009900FF00B8F0F100CBFF0F03E60000
3189	 136	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x133000D014D02AC02F0000001C80FF0009900FF00B8F0F100CBFF0F03E60000
- stack 0: 0xE0
3190	 138	SHR		 	 
- stack 1: 0x618
- stack 0: 0x133000D
3191	 139	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x133000D
- stack 0: 0xFFFF
3192	 13C	AND		 	 
- stack 1: 0x618
- stack 0: 0xD
3193	 13D	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0xD
- stack 0: 0x1
3194	 13F	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0xD
3195	 140	PUSH2	0380	 	 
- stack 2: 0x618
- stack 1: 0xD
- stack 0: 0x380
3196	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x618
3197	 144	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3198	 146	ADD		 	 
- stack 0: 0x61C
3199	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3200	 148	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x14D02AC02F0000001C80FF0009900FF00B8F0F100CBFF0F03E6000003E60000
3201	 149	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x14D02AC02F0000001C80FF0009900FF00B8F0F100CBFF0F03E6000003E60000
- stack 0: 0xF0
3202	 14B	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x14D
3203	 14C	JUMP		 	 
- stack 0: 0x61C
3204	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x61C
3205	 14E	PUSH2	0060	 	 
- stack 1: 0x61C
- stack 0: 0x60
3206	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x61C
- stack 0: 0xF000F0
3207	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x61C
- stack 1: 0xF000F0
- stack 0: 0xFFFFFFFF
3208	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x61C
- stack 0: 0xF000F0
3209	 158	PUSH2	03A0	 	 
- stack 2: 0x61C
- stack 1: 0xF000F0
- stack 0: 0x3A0
3210	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x61C
- stack 1: 0xF000F0
- stack 0: 0xF000F0
3211	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x61C
- stack 2: 0xF000F0
- stack 1: 0xF000F0
- stack 0: 0xFFFFFFFF
3212	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x61C
- stack 1: 0xF000F0
- stack 0: 0xF000F0
3213	 162	SUB		 	 
- stack 1: 0x61C
- stack 0: 0x0
3214	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0x16B
3215	 166	JUMPI		 	 
- stack 0: 0x61C
3216	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x61C
- stack 0: 0x185
3217	 16A	JUMP		 	 
- stack 0: 0x61C
3218	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x61C
3219	 186	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3220	 188	ADD		 	 
- stack 0: 0x620
3221	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3222	 18A	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA0000
3223	 18B	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA0000
- stack 0: 0xF0
3224	 18D	SHR		 	 
- stack 1: 0x620
- stack 0: 0x2F0
3225	 18E	JUMP		 	 
- stack 0: 0x620
3226	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x620
3227	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3228	 2F2	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA0000
3229	 2F3	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA0000
- stack 0: 0xE0
3230	 2F5	SHR		 	 
- stack 1: 0x620
- stack 0: 0x2F00000
3231	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x2F00000
- stack 0: 0xFFFF
3232	 2F9	AND		 	 
- stack 1: 0x620
- stack 0: 0x0
3233	 2FA	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x1
3234	 2FC	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x0
3235	 2FD	PUSH2	0080	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x80
3236	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x620
3237	 301	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3238	 303	ADD		 	 
- stack 0: 0x624
3239	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3240	 305	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x1C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA000003290001
3241	 306	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x1C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA000003290001
- stack 0: 0xF0
3242	 308	SHR		 	 
- stack 1: 0x624
- stack 0: 0x1C8
3243	 309	JUMP		 	 
- stack 0: 0x624
3244	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x624
3245	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x624
- stack 0: 0xFF0000
3246	 1CE	PUSH2	0020	 	 
- stack 2: 0x624
- stack 1: 0xFF0000
- stack 0: 0x20
3247	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x624
3248	 1D2	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3249	 1D4	ADD		 	 
- stack 0: 0x628
3250	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3251	 1D6	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
3252	 1D7	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
- stack 0: 0xF0
3253	 1D9	SHR		 	 
- stack 1: 0x628
- stack 0: 0x99
3254	 1DA	JUMP		 	 
- stack 0: 0x628
3255	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x628
3256	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3257	 9B	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
3258	 9C	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
- stack 0: 0xE0
3259	 9E	SHR		 	 
- stack 1: 0x628
- stack 0: 0x9900FF
3260	 9F	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x9900FF
- stack 0: 0xFFFF
3261	 A2	AND		 	 
- stack 1: 0x628
- stack 0: 0xFF
3262	 A3	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0xFF
- stack 0: 0x1
3263	 A5	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xFF
3264	 A6	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xFF
- stack 0: 0x20
3265	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x628
- stack 1: 0xFF
- stack 0: 0xFF0000
3266	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x628
- stack 0: 0xFF00FF
3267	 AB	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xFF00FF
- stack 0: 0x20
3268	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x628
3269	 AF	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3270	 B1	ADD		 	 
- stack 0: 0x62C
3271	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3272	 B3	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xB8F0F100CBFF0F03E6000003E6000000EA000003290001034800020362FFDC
3273	 B4	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0xB8F0F100CBFF0F03E6000003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
3274	 B6	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xB8
3275	 B7	JUMP		 	 
- stack 0: 0x62C
3276	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x62C
3277	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x62C
- stack 0: 0xF0F1000
3278	 BE	PUSH2	0040	 	 
- stack 2: 0x62C
- stack 1: 0xF0F1000
- stack 0: 0x40
3279	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x62C
3280	 C2	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3281	 C4	ADD		 	 
- stack 0: 0x630
3282	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3283	 C6	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
3284	 C7	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xF0
3285	 C9	SHR		 	 
- stack 1: 0x630
- stack 0: 0xCB
3286	 CA	JUMP		 	 
- stack 0: 0x630
3287	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x630
3288	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3289	 CD	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
3290	 CE	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xE0
3291	 D0	SHR		 	 
- stack 1: 0x630
- stack 0: 0xCBFF0F
3292	 D1	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
3293	 D4	AND		 	 
- stack 1: 0x630
- stack 0: 0xFF0F
3294	 D5	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0xFF0F
- stack 0: 0x1
3295	 D7	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
3296	 D8	PUSH2	0040	 	 
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
3297	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
3298	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x630
- stack 0: 0xF0F0F0F
3299	 DD	PUSH2	0040	 	 
- stack 2: 0x630
- stack 1: 0xF0F0F0F
- stack 0: 0x40
3300	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x630
3301	 E1	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3302	 E3	ADD		 	 
- stack 0: 0x634
3303	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3304	 E5	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
3305	 E6	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
- stack 0: 0xF0
3306	 E8	SHR		 	 
- stack 1: 0x634
- stack 0: 0x3E6
3307	 E9	JUMP		 	 
- stack 0: 0x634
3308	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x634
3309	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3310	 3E8	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
3311	 3E9	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
- stack 0: 0xE0
3312	 3EB	SHR		 	 
- stack 1: 0x634
- stack 0: 0x3E60000
3313	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x3E60000
- stack 0: 0xFFFF
3314	 3EF	AND		 	 
- stack 1: 0x634
- stack 0: 0x0
3315	 3F0	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x1
3316	 3F2	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x0
3317	 3F3	POP		 	 
- stack 0: 0x634
3318	 3F4	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3319	 3F6	ADD		 	 
- stack 0: 0x638
3320	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3321	 3F8	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F0133000E
3322	 3F9	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F0133000E
- stack 0: 0xF0
3323	 3FB	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3E6
3324	 3FC	JUMP		 	 
- stack 0: 0x638
3325	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
3326	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3327	 3E8	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F0133000E
3328	 3E9	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F0133000E
- stack 0: 0xE0
3329	 3EB	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3E60000
3330	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x3E60000
- stack 0: 0xFFFF
3331	 3EF	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
3332	 3F0	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
3333	 3F2	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
3334	 3F3	POP		 	 
- stack 0: 0x638
3335	 3F4	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3336	 3F6	ADD		 	 
- stack 0: 0x63C
3337	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3338	 3F8	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xEA000003290001034800020362FFDC01DB00F00114000F0133000E014D0270
3339	 3F9	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xEA000003290001034800020362FFDC01DB00F00114000F0133000E014D0270
- stack 0: 0xF0
3340	 3FB	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xEA
3341	 3FC	JUMP		 	 
- stack 0: 0x63C
3342	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x63C
3343	 EB	PUSH2	0040	 	 
- stack 1: 0x63C
- stack 0: 0x40
3344	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x63C
- stack 0: 0xF0F0F0F
3345	 EF	PUSH2	0020	 	 
- stack 2: 0x63C
- stack 1: 0xF0F0F0F
- stack 0: 0x20
3346	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x63C
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
3347	 F3	AND		 	  ;; # AND
- stack 1: 0x63C
- stack 0: 0xF000F
3348	 F4	PUSH2	0060	 	 
- stack 2: 0x63C
- stack 1: 0xF000F
- stack 0: 0x60
3349	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x63C
3350	 F8	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3351	 FA	ADD		 	 
- stack 0: 0x640
3352	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3353	 FC	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F0133000E014D027002F00000
3354	 FD	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F0133000E014D027002F00000
- stack 0: 0xF0
3355	 FF	SHR		 	 
- stack 1: 0x640
- stack 0: 0x329
3356	 100	JUMP		 	 
- stack 0: 0x640
3357	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x640
3358	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3359	 32B	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F0133000E014D027002F00000
3360	 32C	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F0133000E014D027002F00000
- stack 0: 0xE0
3361	 32E	SHR		 	 
- stack 1: 0x640
- stack 0: 0x3290001
3362	 32F	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x3290001
- stack 0: 0xFFFF
3363	 332	AND		 	 
- stack 1: 0x640
- stack 0: 0x1
3364	 333	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x1
3365	 335	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x1
3366	 336	PUSH2	0080	 	 
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x80
3367	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x0
3368	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x640
- stack 0: 0x1
3369	 33B	PUSH2	0080	 	 
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x80
3370	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x640
3371	 33F	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3372	 341	ADD		 	 
- stack 0: 0x644
3373	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3374	 343	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x34800020362FFDC01DB00F00114000F0133000E014D027002F000000086F010
3375	 344	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x34800020362FFDC01DB00F00114000F0133000E014D027002F000000086F010
- stack 0: 0xF0
3376	 346	SHR		 	 
- stack 1: 0x644
- stack 0: 0x348
3377	 347	JUMP		 	 
- stack 0: 0x644
3378	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x644
3379	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3380	 34A	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x34800020362FFDC01DB00F00114000F0133000E014D027002F000000086F010
3381	 34B	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x34800020362FFDC01DB00F00114000F0133000E014D027002F000000086F010
- stack 0: 0xE0
3382	 34D	SHR		 	 
- stack 1: 0x644
- stack 0: 0x3480002
3383	 34E	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x3480002
- stack 0: 0xFFFF
3384	 351	AND		 	 
- stack 1: 0x644
- stack 0: 0x2
3385	 352	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0x1
3386	 354	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x2
3387	 355	PUSH2	00A0	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0xA0
3388	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x644
3389	 359	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3390	 35B	ADD		 	 
- stack 0: 0x648
3391	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3392	 35D	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x362FFDC01DB00F00114000F0133000E014D027002F000000086F0100099FF00
3393	 35E	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x362FFDC01DB00F00114000F0133000E014D027002F000000086F0100099FF00
- stack 0: 0xF0
3394	 360	SHR		 	 
- stack 1: 0x648
- stack 0: 0x362
3395	 361	JUMP		 	 
- stack 0: 0x648
3396	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x648
3397	 363	PUSH2	0080	 	 
- stack 1: 0x648
- stack 0: 0x80
3398	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x648
- stack 0: 0x1
3399	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3400	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x648
- stack 0: 0x1
3401	 36D	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0xA0
3402	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x2
3403	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x648
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3404	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x2
3405	 377	SUB		 	 
- stack 1: 0x648
- stack 0: 0x1
3406	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x380
3407	 37B	JUMPI		 	 
- stack 0: 0x648
3408	 380	JUMPDEST		 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x648
3409	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3410	 382	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x362FFDC01DB00F00114000F0133000E014D027002F000000086F0100099FF00
3411	 383	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x362FFDC01DB00F00114000F0133000E014D027002F000000086F0100099FF00
- stack 0: 0xE0
3412	 385	SHR		 	 
- stack 1: 0x648
- stack 0: 0x362FFDC
3413	 386	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x362FFDC
- stack 0: 0xFFFF
3414	 389	AND		 	 
- stack 1: 0x648
- stack 0: 0xFFDC
3415	 38A	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0xFFDC
- stack 0: 0x1
3416	 38C	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
3417	 38D	ADD		 	 
- stack 0: 0x624
3418	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x624
- stack 0: 0xFFFFFFFF
3419	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x624
3420	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3421	 395	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x1C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA000003290001
3422	 396	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x1C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA000003290001
- stack 0: 0xF0
3423	 398	SHR		 	 
- stack 1: 0x624
- stack 0: 0x1C8
3424	 399	JUMP		 	 
- stack 0: 0x624
3425	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x624
3426	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x624
- stack 0: 0xFF0000
3427	 1CE	PUSH2	0020	 	 
- stack 2: 0x624
- stack 1: 0xFF0000
- stack 0: 0x20
3428	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x624
3429	 1D2	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3430	 1D4	ADD		 	 
- stack 0: 0x628
3431	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3432	 1D6	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
3433	 1D7	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
- stack 0: 0xF0
3434	 1D9	SHR		 	 
- stack 1: 0x628
- stack 0: 0x99
3435	 1DA	JUMP		 	 
- stack 0: 0x628
3436	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x628
3437	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3438	 9B	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
3439	 9C	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
- stack 0: 0xE0
3440	 9E	SHR		 	 
- stack 1: 0x628
- stack 0: 0x9900FF
3441	 9F	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x9900FF
- stack 0: 0xFFFF
3442	 A2	AND		 	 
- stack 1: 0x628
- stack 0: 0xFF
3443	 A3	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0xFF
- stack 0: 0x1
3444	 A5	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xFF
3445	 A6	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xFF
- stack 0: 0x20
3446	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x628
- stack 1: 0xFF
- stack 0: 0xFF0000
3447	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x628
- stack 0: 0xFF00FF
3448	 AB	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xFF00FF
- stack 0: 0x20
3449	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x628
3450	 AF	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3451	 B1	ADD		 	 
- stack 0: 0x62C
3452	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3453	 B3	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xB8F0F100CBFF0F03E6000003E6000000EA000003290001034800020362FFDC
3454	 B4	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0xB8F0F100CBFF0F03E6000003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
3455	 B6	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xB8
3456	 B7	JUMP		 	 
- stack 0: 0x62C
3457	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x62C
3458	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x62C
- stack 0: 0xF0F1000
3459	 BE	PUSH2	0040	 	 
- stack 2: 0x62C
- stack 1: 0xF0F1000
- stack 0: 0x40
3460	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x62C
3461	 C2	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3462	 C4	ADD		 	 
- stack 0: 0x630
3463	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3464	 C6	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
3465	 C7	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xF0
3466	 C9	SHR		 	 
- stack 1: 0x630
- stack 0: 0xCB
3467	 CA	JUMP		 	 
- stack 0: 0x630
3468	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x630
3469	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3470	 CD	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
3471	 CE	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xE0
3472	 D0	SHR		 	 
- stack 1: 0x630
- stack 0: 0xCBFF0F
3473	 D1	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
3474	 D4	AND		 	 
- stack 1: 0x630
- stack 0: 0xFF0F
3475	 D5	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0xFF0F
- stack 0: 0x1
3476	 D7	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
3477	 D8	PUSH2	0040	 	 
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
3478	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
3479	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x630
- stack 0: 0xF0F0F0F
3480	 DD	PUSH2	0040	 	 
- stack 2: 0x630
- stack 1: 0xF0F0F0F
- stack 0: 0x40
3481	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x630
3482	 E1	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3483	 E3	ADD		 	 
- stack 0: 0x634
3484	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3485	 E5	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
3486	 E6	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
- stack 0: 0xF0
3487	 E8	SHR		 	 
- stack 1: 0x634
- stack 0: 0x3E6
3488	 E9	JUMP		 	 
- stack 0: 0x634
3489	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x634
3490	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3491	 3E8	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
3492	 3E9	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
- stack 0: 0xE0
3493	 3EB	SHR		 	 
- stack 1: 0x634
- stack 0: 0x3E60000
3494	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x3E60000
- stack 0: 0xFFFF
3495	 3EF	AND		 	 
- stack 1: 0x634
- stack 0: 0x0
3496	 3F0	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x1
3497	 3F2	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x0
3498	 3F3	POP		 	 
- stack 0: 0x634
3499	 3F4	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3500	 3F6	ADD		 	 
- stack 0: 0x638
3501	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3502	 3F8	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F0133000E
3503	 3F9	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F0133000E
- stack 0: 0xF0
3504	 3FB	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3E6
3505	 3FC	JUMP		 	 
- stack 0: 0x638
3506	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
3507	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3508	 3E8	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F0133000E
3509	 3E9	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F0133000E
- stack 0: 0xE0
3510	 3EB	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3E60000
3511	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x3E60000
- stack 0: 0xFFFF
3512	 3EF	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
3513	 3F0	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
3514	 3F2	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
3515	 3F3	POP		 	 
- stack 0: 0x638
3516	 3F4	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3517	 3F6	ADD		 	 
- stack 0: 0x63C
3518	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3519	 3F8	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xEA000003290001034800020362FFDC01DB00F00114000F0133000E014D0270
3520	 3F9	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xEA000003290001034800020362FFDC01DB00F00114000F0133000E014D0270
- stack 0: 0xF0
3521	 3FB	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xEA
3522	 3FC	JUMP		 	 
- stack 0: 0x63C
3523	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x63C
3524	 EB	PUSH2	0040	 	 
- stack 1: 0x63C
- stack 0: 0x40
3525	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x63C
- stack 0: 0xF0F0F0F
3526	 EF	PUSH2	0020	 	 
- stack 2: 0x63C
- stack 1: 0xF0F0F0F
- stack 0: 0x20
3527	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x63C
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
3528	 F3	AND		 	  ;; # AND
- stack 1: 0x63C
- stack 0: 0xF000F
3529	 F4	PUSH2	0060	 	 
- stack 2: 0x63C
- stack 1: 0xF000F
- stack 0: 0x60
3530	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x63C
3531	 F8	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3532	 FA	ADD		 	 
- stack 0: 0x640
3533	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3534	 FC	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F0133000E014D027002F00000
3535	 FD	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F0133000E014D027002F00000
- stack 0: 0xF0
3536	 FF	SHR		 	 
- stack 1: 0x640
- stack 0: 0x329
3537	 100	JUMP		 	 
- stack 0: 0x640
3538	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x640
3539	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3540	 32B	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F0133000E014D027002F00000
3541	 32C	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F0133000E014D027002F00000
- stack 0: 0xE0
3542	 32E	SHR		 	 
- stack 1: 0x640
- stack 0: 0x3290001
3543	 32F	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x3290001
- stack 0: 0xFFFF
3544	 332	AND		 	 
- stack 1: 0x640
- stack 0: 0x1
3545	 333	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x1
3546	 335	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x1
3547	 336	PUSH2	0080	 	 
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x80
3548	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x1
3549	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x640
- stack 0: 0x2
3550	 33B	PUSH2	0080	 	 
- stack 2: 0x640
- stack 1: 0x2
- stack 0: 0x80
3551	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x640
3552	 33F	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3553	 341	ADD		 	 
- stack 0: 0x644
3554	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3555	 343	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x34800020362FFDC01DB00F00114000F0133000E014D027002F000000086F010
3556	 344	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x34800020362FFDC01DB00F00114000F0133000E014D027002F000000086F010
- stack 0: 0xF0
3557	 346	SHR		 	 
- stack 1: 0x644
- stack 0: 0x348
3558	 347	JUMP		 	 
- stack 0: 0x644
3559	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x644
3560	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3561	 34A	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x34800020362FFDC01DB00F00114000F0133000E014D027002F000000086F010
3562	 34B	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x34800020362FFDC01DB00F00114000F0133000E014D027002F000000086F010
- stack 0: 0xE0
3563	 34D	SHR		 	 
- stack 1: 0x644
- stack 0: 0x3480002
3564	 34E	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x3480002
- stack 0: 0xFFFF
3565	 351	AND		 	 
- stack 1: 0x644
- stack 0: 0x2
3566	 352	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0x1
3567	 354	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x2
3568	 355	PUSH2	00A0	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0xA0
3569	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x644
3570	 359	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3571	 35B	ADD		 	 
- stack 0: 0x648
3572	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3573	 35D	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x362FFDC01DB00F00114000F0133000E014D027002F000000086F0100099FF00
3574	 35E	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x362FFDC01DB00F00114000F0133000E014D027002F000000086F0100099FF00
- stack 0: 0xF0
3575	 360	SHR		 	 
- stack 1: 0x648
- stack 0: 0x362
3576	 361	JUMP		 	 
- stack 0: 0x648
3577	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x648
3578	 363	PUSH2	0080	 	 
- stack 1: 0x648
- stack 0: 0x80
3579	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x648
- stack 0: 0x2
3580	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3581	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x648
- stack 0: 0x2
3582	 36D	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xA0
3583	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x2
3584	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x648
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3585	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x2
3586	 377	SUB		 	 
- stack 1: 0x648
- stack 0: 0x0
3587	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x380
3588	 37B	JUMPI		 	 
- stack 0: 0x648
3589	 37C	PUSH2	039A	 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 1: 0x648
- stack 0: 0x39A
3590	 37F	JUMP		 	 
- stack 0: 0x648
3591	 39A	JUMPDEST		 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x648
3592	 39B	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3593	 39D	ADD		 	 
- stack 0: 0x64C
3594	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3595	 39F	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x1DB00F00114000F0133000E014D027002F000000086F0100099FF0003E60000
3596	 3A0	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x1DB00F00114000F0133000E014D027002F000000086F0100099FF0003E60000
- stack 0: 0xF0
3597	 3A2	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x1DB
3598	 3A3	JUMP		 	 
- stack 0: 0x64C
3599	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_f0eb7	  ;; # instr: lui t4,0xf0(ignore imm)
- stack 0: 0x64C
3600	 1DC	PUSH4	000f0000	 	 
- stack 1: 0x64C
- stack 0: 0xF0000
3601	 1E1	PUSH2	03A0	 	 
- stack 2: 0x64C
- stack 1: 0xF0000
- stack 0: 0x3A0
3602	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x64C
3603	 1E5	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3604	 1E7	ADD		 	 
- stack 0: 0x650
3605	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3606	 1E9	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x114000F0133000E014D027002F000000086F0100099FF0003E6000000B8F0F1
3607	 1EA	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x114000F0133000E014D027002F000000086F0100099FF0003E6000000B8F0F1
- stack 0: 0xF0
3608	 1EC	SHR		 	 
- stack 1: 0x650
- stack 0: 0x114
3609	 1ED	JUMP		 	 
- stack 0: 0x650
3610	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x650
3611	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3612	 116	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x114000F0133000E014D027002F000000086F0100099FF0003E6000000B8F0F1
3613	 117	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x114000F0133000E014D027002F000000086F0100099FF0003E6000000B8F0F1
- stack 0: 0xE0
3614	 119	SHR		 	 
- stack 1: 0x650
- stack 0: 0x114000F
3615	 11A	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x114000F
- stack 0: 0xFFFF
3616	 11D	AND		 	 
- stack 1: 0x650
- stack 0: 0xF
3617	 11E	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0xF
- stack 0: 0x1
3618	 120	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0xF
3619	 121	PUSH2	03A0	 	 
- stack 2: 0x650
- stack 1: 0xF
- stack 0: 0x3A0
3620	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x650
- stack 1: 0xF
- stack 0: 0xF0000
3621	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x650
- stack 0: 0xF000F
3622	 126	PUSH2	03A0	 	 
- stack 2: 0x650
- stack 1: 0xF000F
- stack 0: 0x3A0
3623	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x650
3624	 12A	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3625	 12C	ADD		 	 
- stack 0: 0x654
3626	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3627	 12E	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x133000E014D027002F000000086F0100099FF0003E6000000B8F0F100CBFF0F
3628	 12F	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x133000E014D027002F000000086F0100099FF0003E6000000B8F0F100CBFF0F
- stack 0: 0xF0
3629	 131	SHR		 	 
- stack 1: 0x654
- stack 0: 0x133
3630	 132	JUMP		 	 
- stack 0: 0x654
3631	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x654
3632	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3633	 135	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x133000E014D027002F000000086F0100099FF0003E6000000B8F0F100CBFF0F
3634	 136	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x133000E014D027002F000000086F0100099FF0003E6000000B8F0F100CBFF0F
- stack 0: 0xE0
3635	 138	SHR		 	 
- stack 1: 0x654
- stack 0: 0x133000E
3636	 139	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x133000E
- stack 0: 0xFFFF
3637	 13C	AND		 	 
- stack 1: 0x654
- stack 0: 0xE
3638	 13D	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0xE
- stack 0: 0x1
3639	 13F	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0xE
3640	 140	PUSH2	0380	 	 
- stack 2: 0x654
- stack 1: 0xE
- stack 0: 0x380
3641	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x654
3642	 144	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3643	 146	ADD		 	 
- stack 0: 0x658
3644	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3645	 148	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x14D027002F000000086F0100099FF0003E6000000B8F0F100CBFF0F00EA0000
3646	 149	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x14D027002F000000086F0100099FF0003E6000000B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
3647	 14B	SHR		 	 
- stack 1: 0x658
- stack 0: 0x14D
3648	 14C	JUMP		 	 
- stack 0: 0x658
3649	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x658
3650	 14E	PUSH2	0060	 	 
- stack 1: 0x658
- stack 0: 0x60
3651	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x658
- stack 0: 0xF000F
3652	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x658
- stack 1: 0xF000F
- stack 0: 0xFFFFFFFF
3653	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x658
- stack 0: 0xF000F
3654	 158	PUSH2	03A0	 	 
- stack 2: 0x658
- stack 1: 0xF000F
- stack 0: 0x3A0
3655	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x658
- stack 1: 0xF000F
- stack 0: 0xF000F
3656	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x658
- stack 2: 0xF000F
- stack 1: 0xF000F
- stack 0: 0xFFFFFFFF
3657	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x658
- stack 1: 0xF000F
- stack 0: 0xF000F
3658	 162	SUB		 	 
- stack 1: 0x658
- stack 0: 0x0
3659	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x16B
3660	 166	JUMPI		 	 
- stack 0: 0x658
3661	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x658
- stack 0: 0x185
3662	 16A	JUMP		 	 
- stack 0: 0x658
3663	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x658
3664	 186	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3665	 188	ADD		 	 
- stack 0: 0x65C
3666	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3667	 18A	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x2F000000086F0100099FF0003E6000000B8F0F100CBFF0F00EA000003290001
3668	 18B	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x2F000000086F0100099FF0003E6000000B8F0F100CBFF0F00EA000003290001
- stack 0: 0xF0
3669	 18D	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x2F0
3670	 18E	JUMP		 	 
- stack 0: 0x65C
3671	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x65C
3672	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3673	 2F2	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x2F000000086F0100099FF0003E6000000B8F0F100CBFF0F00EA000003290001
3674	 2F3	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x2F000000086F0100099FF0003E6000000B8F0F100CBFF0F00EA000003290001
- stack 0: 0xE0
3675	 2F5	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x2F00000
3676	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x2F00000
- stack 0: 0xFFFF
3677	 2F9	AND		 	 
- stack 1: 0x65C
- stack 0: 0x0
3678	 2FA	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x1
3679	 2FC	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x0
3680	 2FD	PUSH2	0080	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x80
3681	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x65C
3682	 301	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3683	 303	ADD		 	 
- stack 0: 0x660
3684	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3685	 305	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x86F0100099FF0003E6000000B8F0F100CBFF0F00EA00000329000103480002
3686	 306	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x86F0100099FF0003E6000000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xF0
3687	 308	SHR		 	 
- stack 1: 0x660
- stack 0: 0x86
3688	 309	JUMP		 	 
- stack 0: 0x660
3689	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x660
3690	 87	PUSH4	ff010000	 	 
- stack 1: 0x660
- stack 0: 0xFF010000
3691	 8C	PUSH2	0020	 	 
- stack 2: 0x660
- stack 1: 0xFF010000
- stack 0: 0x20
3692	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x660
3693	 90	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3694	 92	ADD		 	 
- stack 0: 0x664
3695	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3696	 94	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
3697	 95	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
- stack 0: 0xF0
3698	 97	SHR		 	 
- stack 1: 0x664
- stack 0: 0x99
3699	 98	JUMP		 	 
- stack 0: 0x664
3700	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x664
3701	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
3702	 9B	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
3703	 9C	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
- stack 0: 0xE0
3704	 9E	SHR		 	 
- stack 1: 0x664
- stack 0: 0x99FF00
3705	 9F	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x99FF00
- stack 0: 0xFFFF
3706	 A2	AND		 	 
- stack 1: 0x664
- stack 0: 0xFF00
3707	 A3	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0xFF00
- stack 0: 0x1
3708	 A5	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3709	 A6	PUSH2	0020	 	 
- stack 2: 0x664
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
3710	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x664
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
3711	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x664
- stack 0: 0xFF00FF00
3712	 AB	PUSH2	0020	 	 
- stack 2: 0x664
- stack 1: 0xFF00FF00
- stack 0: 0x20
3713	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x664
3714	 AF	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3715	 B1	ADD		 	 
- stack 0: 0x668
3716	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3717	 B3	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F001
3718	 B4	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F001
- stack 0: 0xF0
3719	 B6	SHR		 	 
- stack 1: 0x668
- stack 0: 0x3E6
3720	 B7	JUMP		 	 
- stack 0: 0x668
3721	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x668
3722	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
3723	 3E8	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F001
3724	 3E9	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F001
- stack 0: 0xE0
3725	 3EB	SHR		 	 
- stack 1: 0x668
- stack 0: 0x3E60000
3726	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x3E60000
- stack 0: 0xFFFF
3727	 3EF	AND		 	 
- stack 1: 0x668
- stack 0: 0x0
3728	 3F0	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x1
3729	 3F2	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0x0
3730	 3F3	POP		 	 
- stack 0: 0x668
3731	 3F4	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3732	 3F6	ADD		 	 
- stack 0: 0x66C
3733	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3734	 3F8	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE00101F0010114FF00
3735	 3F9	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE00101F0010114FF00
- stack 0: 0xF0
3736	 3FB	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xB8
3737	 3FC	JUMP		 	 
- stack 0: 0x66C
3738	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x66C
3739	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x66C
- stack 0: 0xF0F1000
3740	 BE	PUSH2	0040	 	 
- stack 2: 0x66C
- stack 1: 0xF0F1000
- stack 0: 0x40
3741	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x66C
3742	 C2	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3743	 C4	ADD		 	 
- stack 0: 0x670
3744	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3745	 C6	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE00101F0010114FF000133000F
3746	 C7	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE00101F0010114FF000133000F
- stack 0: 0xF0
3747	 C9	SHR		 	 
- stack 1: 0x670
- stack 0: 0xCB
3748	 CA	JUMP		 	 
- stack 0: 0x670
3749	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x670
3750	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
3751	 CD	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE00101F0010114FF000133000F
3752	 CE	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE00101F0010114FF000133000F
- stack 0: 0xE0
3753	 D0	SHR		 	 
- stack 1: 0x670
- stack 0: 0xCBFF0F
3754	 D1	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
3755	 D4	AND		 	 
- stack 1: 0x670
- stack 0: 0xFF0F
3756	 D5	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0xFF0F
- stack 0: 0x1
3757	 D7	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
3758	 D8	PUSH2	0040	 	 
- stack 2: 0x670
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
3759	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x670
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
3760	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x670
- stack 0: 0xF0F0F0F
3761	 DD	PUSH2	0040	 	 
- stack 2: 0x670
- stack 1: 0xF0F0F0F
- stack 0: 0x40
3762	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x670
3763	 E1	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3764	 E3	ADD		 	 
- stack 0: 0x674
3765	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3766	 E5	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xEA000003290001034800020362FFE00101F0010114FF000133000F014D0238
3767	 E6	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0xEA000003290001034800020362FFE00101F0010114FF000133000F014D0238
- stack 0: 0xF0
3768	 E8	SHR		 	 
- stack 1: 0x674
- stack 0: 0xEA
3769	 E9	JUMP		 	 
- stack 0: 0x674
3770	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x674
3771	 EB	PUSH2	0040	 	 
- stack 1: 0x674
- stack 0: 0x40
3772	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x674
- stack 0: 0xF0F0F0F
3773	 EF	PUSH2	0020	 	 
- stack 2: 0x674
- stack 1: 0xF0F0F0F
- stack 0: 0x20
3774	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x674
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
3775	 F3	AND		 	  ;; # AND
- stack 1: 0x674
- stack 0: 0xF000F00
3776	 F4	PUSH2	0060	 	 
- stack 2: 0x674
- stack 1: 0xF000F00
- stack 0: 0x60
3777	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x674
3778	 F8	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3779	 FA	ADD		 	 
- stack 0: 0x678
3780	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3781	 FC	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x3290001034800020362FFE00101F0010114FF000133000F014D023802F00000
3782	 FD	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x3290001034800020362FFE00101F0010114FF000133000F014D023802F00000
- stack 0: 0xF0
3783	 FF	SHR		 	 
- stack 1: 0x678
- stack 0: 0x329
3784	 100	JUMP		 	 
- stack 0: 0x678
3785	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x678
3786	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
3787	 32B	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x3290001034800020362FFE00101F0010114FF000133000F014D023802F00000
3788	 32C	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x3290001034800020362FFE00101F0010114FF000133000F014D023802F00000
- stack 0: 0xE0
3789	 32E	SHR		 	 
- stack 1: 0x678
- stack 0: 0x3290001
3790	 32F	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x3290001
- stack 0: 0xFFFF
3791	 332	AND		 	 
- stack 1: 0x678
- stack 0: 0x1
3792	 333	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x1
3793	 335	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x1
3794	 336	PUSH2	0080	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x80
3795	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x0
3796	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x678
- stack 0: 0x1
3797	 33B	PUSH2	0080	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x80
3798	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x678
3799	 33F	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3800	 341	ADD		 	 
- stack 0: 0x67C
3801	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3802	 343	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x34800020362FFE00101F0010114FF000133000F014D023802F00000018FFF01
3803	 344	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x34800020362FFE00101F0010114FF000133000F014D023802F00000018FFF01
- stack 0: 0xF0
3804	 346	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x348
3805	 347	JUMP		 	 
- stack 0: 0x67C
3806	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x67C
3807	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
3808	 34A	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x34800020362FFE00101F0010114FF000133000F014D023802F00000018FFF01
3809	 34B	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x34800020362FFE00101F0010114FF000133000F014D023802F00000018FFF01
- stack 0: 0xE0
3810	 34D	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x3480002
3811	 34E	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x3480002
- stack 0: 0xFFFF
3812	 351	AND		 	 
- stack 1: 0x67C
- stack 0: 0x2
3813	 352	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0x1
3814	 354	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x2
3815	 355	PUSH2	00A0	 	 
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0xA0
3816	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x67C
3817	 359	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3818	 35B	ADD		 	 
- stack 0: 0x680
3819	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3820	 35D	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x362FFE00101F0010114FF000133000F014D023802F00000018FFF010099FFF0
3821	 35E	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x362FFE00101F0010114FF000133000F014D023802F00000018FFF010099FFF0
- stack 0: 0xF0
3822	 360	SHR		 	 
- stack 1: 0x680
- stack 0: 0x362
3823	 361	JUMP		 	 
- stack 0: 0x680
3824	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x680
3825	 363	PUSH2	0080	 	 
- stack 1: 0x680
- stack 0: 0x80
3826	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x680
- stack 0: 0x1
3827	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3828	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x680
- stack 0: 0x1
3829	 36D	PUSH2	00A0	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0xA0
3830	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x2
3831	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x680
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3832	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x2
3833	 377	SUB		 	 
- stack 1: 0x680
- stack 0: 0x1
3834	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x380
3835	 37B	JUMPI		 	 
- stack 0: 0x680
3836	 380	JUMPDEST		 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x680
3837	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
3838	 382	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x362FFE00101F0010114FF000133000F014D023802F00000018FFF010099FFF0
3839	 383	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x362FFE00101F0010114FF000133000F014D023802F00000018FFF010099FFF0
- stack 0: 0xE0
3840	 385	SHR		 	 
- stack 1: 0x680
- stack 0: 0x362FFE0
3841	 386	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x362FFE0
- stack 0: 0xFFFF
3842	 389	AND		 	 
- stack 1: 0x680
- stack 0: 0xFFE0
3843	 38A	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0xFFE0
- stack 0: 0x1
3844	 38C	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3845	 38D	ADD		 	 
- stack 0: 0x660
3846	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFF
3847	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x660
3848	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3849	 395	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x86F0100099FF0003E6000000B8F0F100CBFF0F00EA00000329000103480002
3850	 396	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x86F0100099FF0003E6000000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xF0
3851	 398	SHR		 	 
- stack 1: 0x660
- stack 0: 0x86
3852	 399	JUMP		 	 
- stack 0: 0x660
3853	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x660
3854	 87	PUSH4	ff010000	 	 
- stack 1: 0x660
- stack 0: 0xFF010000
3855	 8C	PUSH2	0020	 	 
- stack 2: 0x660
- stack 1: 0xFF010000
- stack 0: 0x20
3856	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x660
3857	 90	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3858	 92	ADD		 	 
- stack 0: 0x664
3859	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3860	 94	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
3861	 95	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
- stack 0: 0xF0
3862	 97	SHR		 	 
- stack 1: 0x664
- stack 0: 0x99
3863	 98	JUMP		 	 
- stack 0: 0x664
3864	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x664
3865	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
3866	 9B	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
3867	 9C	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
- stack 0: 0xE0
3868	 9E	SHR		 	 
- stack 1: 0x664
- stack 0: 0x99FF00
3869	 9F	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x99FF00
- stack 0: 0xFFFF
3870	 A2	AND		 	 
- stack 1: 0x664
- stack 0: 0xFF00
3871	 A3	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0xFF00
- stack 0: 0x1
3872	 A5	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3873	 A6	PUSH2	0020	 	 
- stack 2: 0x664
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
3874	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x664
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
3875	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x664
- stack 0: 0xFF00FF00
3876	 AB	PUSH2	0020	 	 
- stack 2: 0x664
- stack 1: 0xFF00FF00
- stack 0: 0x20
3877	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x664
3878	 AF	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3879	 B1	ADD		 	 
- stack 0: 0x668
3880	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3881	 B3	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F001
3882	 B4	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F001
- stack 0: 0xF0
3883	 B6	SHR		 	 
- stack 1: 0x668
- stack 0: 0x3E6
3884	 B7	JUMP		 	 
- stack 0: 0x668
3885	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x668
3886	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
3887	 3E8	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F001
3888	 3E9	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F001
- stack 0: 0xE0
3889	 3EB	SHR		 	 
- stack 1: 0x668
- stack 0: 0x3E60000
3890	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x3E60000
- stack 0: 0xFFFF
3891	 3EF	AND		 	 
- stack 1: 0x668
- stack 0: 0x0
3892	 3F0	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x1
3893	 3F2	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0x0
3894	 3F3	POP		 	 
- stack 0: 0x668
3895	 3F4	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3896	 3F6	ADD		 	 
- stack 0: 0x66C
3897	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3898	 3F8	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE00101F0010114FF00
3899	 3F9	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE00101F0010114FF00
- stack 0: 0xF0
3900	 3FB	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xB8
3901	 3FC	JUMP		 	 
- stack 0: 0x66C
3902	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x66C
3903	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x66C
- stack 0: 0xF0F1000
3904	 BE	PUSH2	0040	 	 
- stack 2: 0x66C
- stack 1: 0xF0F1000
- stack 0: 0x40
3905	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x66C
3906	 C2	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3907	 C4	ADD		 	 
- stack 0: 0x670
3908	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3909	 C6	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE00101F0010114FF000133000F
3910	 C7	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE00101F0010114FF000133000F
- stack 0: 0xF0
3911	 C9	SHR		 	 
- stack 1: 0x670
- stack 0: 0xCB
3912	 CA	JUMP		 	 
- stack 0: 0x670
3913	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x670
3914	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
3915	 CD	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE00101F0010114FF000133000F
3916	 CE	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE00101F0010114FF000133000F
- stack 0: 0xE0
3917	 D0	SHR		 	 
- stack 1: 0x670
- stack 0: 0xCBFF0F
3918	 D1	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
3919	 D4	AND		 	 
- stack 1: 0x670
- stack 0: 0xFF0F
3920	 D5	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0xFF0F
- stack 0: 0x1
3921	 D7	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
3922	 D8	PUSH2	0040	 	 
- stack 2: 0x670
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
3923	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x670
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
3924	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x670
- stack 0: 0xF0F0F0F
3925	 DD	PUSH2	0040	 	 
- stack 2: 0x670
- stack 1: 0xF0F0F0F
- stack 0: 0x40
3926	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x670
3927	 E1	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3928	 E3	ADD		 	 
- stack 0: 0x674
3929	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3930	 E5	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xEA000003290001034800020362FFE00101F0010114FF000133000F014D0238
3931	 E6	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0xEA000003290001034800020362FFE00101F0010114FF000133000F014D0238
- stack 0: 0xF0
3932	 E8	SHR		 	 
- stack 1: 0x674
- stack 0: 0xEA
3933	 E9	JUMP		 	 
- stack 0: 0x674
3934	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x674
3935	 EB	PUSH2	0040	 	 
- stack 1: 0x674
- stack 0: 0x40
3936	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x674
- stack 0: 0xF0F0F0F
3937	 EF	PUSH2	0020	 	 
- stack 2: 0x674
- stack 1: 0xF0F0F0F
- stack 0: 0x20
3938	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x674
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
3939	 F3	AND		 	  ;; # AND
- stack 1: 0x674
- stack 0: 0xF000F00
3940	 F4	PUSH2	0060	 	 
- stack 2: 0x674
- stack 1: 0xF000F00
- stack 0: 0x60
3941	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x674
3942	 F8	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3943	 FA	ADD		 	 
- stack 0: 0x678
3944	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3945	 FC	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x3290001034800020362FFE00101F0010114FF000133000F014D023802F00000
3946	 FD	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x3290001034800020362FFE00101F0010114FF000133000F014D023802F00000
- stack 0: 0xF0
3947	 FF	SHR		 	 
- stack 1: 0x678
- stack 0: 0x329
3948	 100	JUMP		 	 
- stack 0: 0x678
3949	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x678
3950	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
3951	 32B	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x3290001034800020362FFE00101F0010114FF000133000F014D023802F00000
3952	 32C	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x3290001034800020362FFE00101F0010114FF000133000F014D023802F00000
- stack 0: 0xE0
3953	 32E	SHR		 	 
- stack 1: 0x678
- stack 0: 0x3290001
3954	 32F	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x3290001
- stack 0: 0xFFFF
3955	 332	AND		 	 
- stack 1: 0x678
- stack 0: 0x1
3956	 333	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x1
3957	 335	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x1
3958	 336	PUSH2	0080	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x80
3959	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x1
3960	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x678
- stack 0: 0x2
3961	 33B	PUSH2	0080	 	 
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0x80
3962	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x678
3963	 33F	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3964	 341	ADD		 	 
- stack 0: 0x67C
3965	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3966	 343	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x34800020362FFE00101F0010114FF000133000F014D023802F00000018FFF01
3967	 344	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x34800020362FFE00101F0010114FF000133000F014D023802F00000018FFF01
- stack 0: 0xF0
3968	 346	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x348
3969	 347	JUMP		 	 
- stack 0: 0x67C
3970	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x67C
3971	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
3972	 34A	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x34800020362FFE00101F0010114FF000133000F014D023802F00000018FFF01
3973	 34B	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x34800020362FFE00101F0010114FF000133000F014D023802F00000018FFF01
- stack 0: 0xE0
3974	 34D	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x3480002
3975	 34E	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x3480002
- stack 0: 0xFFFF
3976	 351	AND		 	 
- stack 1: 0x67C
- stack 0: 0x2
3977	 352	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0x1
3978	 354	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x2
3979	 355	PUSH2	00A0	 	 
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0xA0
3980	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x67C
3981	 359	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3982	 35B	ADD		 	 
- stack 0: 0x680
3983	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3984	 35D	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x362FFE00101F0010114FF000133000F014D023802F00000018FFF010099FFF0
3985	 35E	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x362FFE00101F0010114FF000133000F014D023802F00000018FFF010099FFF0
- stack 0: 0xF0
3986	 360	SHR		 	 
- stack 1: 0x680
- stack 0: 0x362
3987	 361	JUMP		 	 
- stack 0: 0x680
3988	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x680
3989	 363	PUSH2	0080	 	 
- stack 1: 0x680
- stack 0: 0x80
3990	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x680
- stack 0: 0x2
3991	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3992	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x680
- stack 0: 0x2
3993	 36D	PUSH2	00A0	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0xA0
3994	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0x2
3995	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x680
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3996	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0x2
3997	 377	SUB		 	 
- stack 1: 0x680
- stack 0: 0x0
3998	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x380
3999	 37B	JUMPI		 	 
- stack 0: 0x680
4000	 37C	PUSH2	039A	 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 1: 0x680
- stack 0: 0x39A
4001	 37F	JUMP		 	 
- stack 0: 0x680
4002	 39A	JUMPDEST		 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x680
4003	 39B	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4004	 39D	ADD		 	 
- stack 0: 0x684
4005	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4006	 39F	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x101F0010114FF000133000F014D023802F00000018FFF010099FFF003E60000
4007	 3A0	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x101F0010114FF000133000F014D023802F00000018FFF010099FFF003E60000
- stack 0: 0xF0
4008	 3A2	SHR		 	 
- stack 1: 0x684
- stack 0: 0x101
4009	 3A3	JUMP		 	 
- stack 0: 0x684
4010	 101	JUMPDEST		 ;; __riscvimpl_LUI_f001eb7	  ;; # instr: lui t4,0xf001(ignore imm)
- stack 0: 0x684
4011	 102	PUSH4	0f001000	 	 
- stack 1: 0x684
- stack 0: 0xF001000
4012	 107	PUSH2	03A0	 	 
- stack 2: 0x684
- stack 1: 0xF001000
- stack 0: 0x3A0
4013	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x684
4014	 10B	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4015	 10D	ADD		 	 
- stack 0: 0x688
4016	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4017	 10F	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x114FF000133000F014D023802F00000018FFF010099FFF003E6000001A20F0F
4018	 110	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x114FF000133000F014D023802F00000018FFF010099FFF003E6000001A20F0F
- stack 0: 0xF0
4019	 112	SHR		 	 
- stack 1: 0x688
- stack 0: 0x114
4020	 113	JUMP		 	 
- stack 0: 0x688
4021	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x688
4022	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4023	 116	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x114FF000133000F014D023802F00000018FFF010099FFF003E6000001A20F0F
4024	 117	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x114FF000133000F014D023802F00000018FFF010099FFF003E6000001A20F0F
- stack 0: 0xE0
4025	 119	SHR		 	 
- stack 1: 0x688
- stack 0: 0x114FF00
4026	 11A	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x114FF00
- stack 0: 0xFFFF
4027	 11D	AND		 	 
- stack 1: 0x688
- stack 0: 0xFF00
4028	 11E	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0xFF00
- stack 0: 0x1
4029	 120	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
4030	 121	PUSH2	03A0	 	 
- stack 2: 0x688
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
4031	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x688
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xF001000
4032	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x688
- stack 0: 0xF000F00
4033	 126	PUSH2	03A0	 	 
- stack 2: 0x688
- stack 1: 0xF000F00
- stack 0: 0x3A0
4034	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x688
4035	 12A	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4036	 12C	ADD		 	 
- stack 0: 0x68C
4037	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4038	 12E	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x133000F014D023802F00000018FFF010099FFF003E6000001A20F0F00CB00F0
4039	 12F	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x133000F014D023802F00000018FFF010099FFF003E6000001A20F0F00CB00F0
- stack 0: 0xF0
4040	 131	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x133
4041	 132	JUMP		 	 
- stack 0: 0x68C
4042	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x68C
4043	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
4044	 135	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x133000F014D023802F00000018FFF010099FFF003E6000001A20F0F00CB00F0
4045	 136	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x133000F014D023802F00000018FFF010099FFF003E6000001A20F0F00CB00F0
- stack 0: 0xE0
4046	 138	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x133000F
4047	 139	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x133000F
- stack 0: 0xFFFF
4048	 13C	AND		 	 
- stack 1: 0x68C
- stack 0: 0xF
4049	 13D	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0xF
- stack 0: 0x1
4050	 13F	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0xF
4051	 140	PUSH2	0380	 	 
- stack 2: 0x68C
- stack 1: 0xF
- stack 0: 0x380
4052	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x68C
4053	 144	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4054	 146	ADD		 	 
- stack 0: 0x690
4055	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4056	 148	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x14D023802F00000018FFF010099FFF003E6000001A20F0F00CB00F003E60000
4057	 149	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x14D023802F00000018FFF010099FFF003E6000001A20F0F00CB00F003E60000
- stack 0: 0xF0
4058	 14B	SHR		 	 
- stack 1: 0x690
- stack 0: 0x14D
4059	 14C	JUMP		 	 
- stack 0: 0x690
4060	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x690
4061	 14E	PUSH2	0060	 	 
- stack 1: 0x690
- stack 0: 0x60
4062	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x690
- stack 0: 0xF000F00
4063	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x690
- stack 1: 0xF000F00
- stack 0: 0xFFFFFFFF
4064	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x690
- stack 0: 0xF000F00
4065	 158	PUSH2	03A0	 	 
- stack 2: 0x690
- stack 1: 0xF000F00
- stack 0: 0x3A0
4066	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x690
- stack 1: 0xF000F00
- stack 0: 0xF000F00
4067	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x690
- stack 2: 0xF000F00
- stack 1: 0xF000F00
- stack 0: 0xFFFFFFFF
4068	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x690
- stack 1: 0xF000F00
- stack 0: 0xF000F00
4069	 162	SUB		 	 
- stack 1: 0x690
- stack 0: 0x0
4070	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x16B
4071	 166	JUMPI		 	 
- stack 0: 0x690
4072	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x690
- stack 0: 0x185
4073	 16A	JUMP		 	 
- stack 0: 0x690
4074	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x690
4075	 186	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4076	 188	ADD		 	 
- stack 0: 0x694
4077	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4078	 18A	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x2F00000018FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA0000
4079	 18B	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x2F00000018FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA0000
- stack 0: 0xF0
4080	 18D	SHR		 	 
- stack 1: 0x694
- stack 0: 0x2F0
4081	 18E	JUMP		 	 
- stack 0: 0x694
4082	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x694
4083	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4084	 2F2	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x2F00000018FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA0000
4085	 2F3	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x2F00000018FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA0000
- stack 0: 0xE0
4086	 2F5	SHR		 	 
- stack 1: 0x694
- stack 0: 0x2F00000
4087	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x2F00000
- stack 0: 0xFFFF
4088	 2F9	AND		 	 
- stack 1: 0x694
- stack 0: 0x0
4089	 2FA	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x1
4090	 2FC	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x0
4091	 2FD	PUSH2	0080	 	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x80
4092	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x694
4093	 301	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4094	 303	ADD		 	 
- stack 0: 0x698
4095	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4096	 305	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x18FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA000003290001
4097	 306	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x18FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA000003290001
- stack 0: 0xF0
4098	 308	SHR		 	 
- stack 1: 0x698
- stack 0: 0x18F
4099	 309	JUMP		 	 
- stack 0: 0x698
4100	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x698
4101	 190	PUSH4	0ff01000	 	 
- stack 1: 0x698
- stack 0: 0xFF01000
4102	 195	PUSH2	0020	 	 
- stack 2: 0x698
- stack 1: 0xFF01000
- stack 0: 0x20
4103	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x698
4104	 199	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4105	 19B	ADD		 	 
- stack 0: 0x69C
4106	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4107	 19D	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
4108	 19E	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
- stack 0: 0xF0
4109	 1A0	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x99
4110	 1A1	JUMP		 	 
- stack 0: 0x69C
4111	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x69C
4112	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4113	 9B	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
4114	 9C	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
- stack 0: 0xE0
4115	 9E	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x99FFF0
4116	 9F	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
4117	 A2	AND		 	 
- stack 1: 0x69C
- stack 0: 0xFFF0
4118	 A3	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0xFFF0
- stack 0: 0x1
4119	 A5	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
4120	 A6	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
4121	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x69C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
4122	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x69C
- stack 0: 0xFF00FF0
4123	 AB	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xFF00FF0
- stack 0: 0x20
4124	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x69C
4125	 AF	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4126	 B1	ADD		 	 
- stack 0: 0x6A0
4127	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4128	 B3	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
4129	 B4	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
4130	 B6	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x3E6
4131	 B7	JUMP		 	 
- stack 0: 0x6A0
4132	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6A0
4133	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4134	 3E8	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
4135	 3E9	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
- stack 0: 0xE0
4136	 3EB	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x3E60000
4137	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4138	 3EF	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4139	 3F0	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
4140	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4141	 3F3	POP		 	 
- stack 0: 0x6A0
4142	 3F4	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4143	 3F6	ADD		 	 
- stack 0: 0x6A4
4144	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4145	 3F8	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFDC01B50F00
4146	 3F9	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFDC01B50F00
- stack 0: 0xF0
4147	 3FB	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x1A2
4148	 3FC	JUMP		 	 
- stack 0: 0x6A4
4149	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x6A4
4150	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x6A4
- stack 0: 0xF0F0F000
4151	 1A8	PUSH2	0040	 	 
- stack 2: 0x6A4
- stack 1: 0xF0F0F000
- stack 0: 0x40
4152	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A4
4153	 1AC	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4154	 1AE	ADD		 	 
- stack 0: 0x6A8
4155	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4156	 1B0	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFDC01B50F00011400F0
4157	 1B1	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFDC01B50F00011400F0
- stack 0: 0xF0
4158	 1B3	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xCB
4159	 1B4	JUMP		 	 
- stack 0: 0x6A8
4160	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x6A8
4161	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
4162	 CD	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFDC01B50F00011400F0
4163	 CE	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFDC01B50F00011400F0
- stack 0: 0xE0
4164	 D0	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xCB00F0
4165	 D1	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
4166	 D4	AND		 	 
- stack 1: 0x6A8
- stack 0: 0xF0
4167	 D5	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0xF0
- stack 0: 0x1
4168	 D7	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0xF0
4169	 D8	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0xF0
- stack 0: 0x40
4170	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x6A8
- stack 1: 0xF0
- stack 0: 0xF0F0F000
4171	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x6A8
- stack 0: 0xF0F0F0F0
4172	 DD	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
4173	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A8
4174	 E1	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4175	 E3	ADD		 	 
- stack 0: 0x6AC
4176	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4177	 E5	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330010
4178	 E6	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330010
- stack 0: 0xF0
4179	 E8	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x3E6
4180	 E9	JUMP		 	 
- stack 0: 0x6AC
4181	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6AC
4182	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
4183	 3E8	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330010
4184	 3E9	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330010
- stack 0: 0xE0
4185	 3EB	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x3E60000
4186	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4187	 3EF	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4188	 3F0	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x1
4189	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4190	 3F3	POP		 	 
- stack 0: 0x6AC
4191	 3F4	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4192	 3F6	ADD		 	 
- stack 0: 0x6B0
4193	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4194	 3F8	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0xEA000003290001034800020362FFDC01B50F00011400F001330010014D01FC
4195	 3F9	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0xEA000003290001034800020362FFDC01B50F00011400F001330010014D01FC
- stack 0: 0xF0
4196	 3FB	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0xEA
4197	 3FC	JUMP		 	 
- stack 0: 0x6B0
4198	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x6B0
4199	 EB	PUSH2	0040	 	 
- stack 1: 0x6B0
- stack 0: 0x40
4200	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6B0
- stack 0: 0xF0F0F0F0
4201	 EF	PUSH2	0020	 	 
- stack 2: 0x6B0
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
4202	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6B0
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
4203	 F3	AND		 	  ;; # AND
- stack 1: 0x6B0
- stack 0: 0xF000F0
4204	 F4	PUSH2	0060	 	 
- stack 2: 0x6B0
- stack 1: 0xF000F0
- stack 0: 0x60
4205	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6B0
4206	 F8	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4207	 FA	ADD		 	 
- stack 0: 0x6B4
4208	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4209	 FC	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3290001034800020362FFDC01B50F00011400F001330010014D01FC02F00000
4210	 FD	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x3290001034800020362FFDC01B50F00011400F001330010014D01FC02F00000
- stack 0: 0xF0
4211	 FF	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x329
4212	 100	JUMP		 	 
- stack 0: 0x6B4
4213	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6B4
4214	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
4215	 32B	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3290001034800020362FFDC01B50F00011400F001330010014D01FC02F00000
4216	 32C	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x3290001034800020362FFDC01B50F00011400F001330010014D01FC02F00000
- stack 0: 0xE0
4217	 32E	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3290001
4218	 32F	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x3290001
- stack 0: 0xFFFF
4219	 332	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x1
4220	 333	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x1
4221	 335	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x1
4222	 336	PUSH2	0080	 	 
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x80
4223	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x0
4224	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x6B4
- stack 0: 0x1
4225	 33B	PUSH2	0080	 	 
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x80
4226	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B4
4227	 33F	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4228	 341	ADD		 	 
- stack 0: 0x6B8
4229	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4230	 343	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x34800020362FFDC01B50F00011400F001330010014D01FC02F0000001C80FF0
4231	 344	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x34800020362FFDC01B50F00011400F001330010014D01FC02F0000001C80FF0
- stack 0: 0xF0
4232	 346	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x348
4233	 347	JUMP		 	 
- stack 0: 0x6B8
4234	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6B8
4235	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
4236	 34A	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x34800020362FFDC01B50F00011400F001330010014D01FC02F0000001C80FF0
4237	 34B	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x34800020362FFDC01B50F00011400F001330010014D01FC02F0000001C80FF0
- stack 0: 0xE0
4238	 34D	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x3480002
4239	 34E	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x3480002
- stack 0: 0xFFFF
4240	 351	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x2
4241	 352	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0x1
4242	 354	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x2
4243	 355	PUSH2	00A0	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0xA0
4244	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x6B8
4245	 359	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4246	 35B	ADD		 	 
- stack 0: 0x6BC
4247	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4248	 35D	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x362FFDC01B50F00011400F001330010014D01FC02F0000001C80FF0009900FF
4249	 35E	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x362FFDC01B50F00011400F001330010014D01FC02F0000001C80FF0009900FF
- stack 0: 0xF0
4250	 360	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x362
4251	 361	JUMP		 	 
- stack 0: 0x6BC
4252	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x6BC
4253	 363	PUSH2	0080	 	 
- stack 1: 0x6BC
- stack 0: 0x80
4254	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x6BC
- stack 0: 0x1
4255	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4256	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6BC
- stack 0: 0x1
4257	 36D	PUSH2	00A0	 	 
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0xA0
4258	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0x2
4259	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6BC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4260	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0x2
4261	 377	SUB		 	 
- stack 1: 0x6BC
- stack 0: 0x1
4262	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0x380
4263	 37B	JUMPI		 	 
- stack 0: 0x6BC
4264	 380	JUMPDEST		 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x6BC
4265	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
4266	 382	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x362FFDC01B50F00011400F001330010014D01FC02F0000001C80FF0009900FF
4267	 383	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x362FFDC01B50F00011400F001330010014D01FC02F0000001C80FF0009900FF
- stack 0: 0xE0
4268	 385	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x362FFDC
4269	 386	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x362FFDC
- stack 0: 0xFFFF
4270	 389	AND		 	 
- stack 1: 0x6BC
- stack 0: 0xFFDC
4271	 38A	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0xFFDC
- stack 0: 0x1
4272	 38C	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
4273	 38D	ADD		 	 
- stack 0: 0x698
4274	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x698
- stack 0: 0xFFFFFFFF
4275	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x698
4276	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4277	 395	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x18FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA000003290001
4278	 396	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x18FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA000003290001
- stack 0: 0xF0
4279	 398	SHR		 	 
- stack 1: 0x698
- stack 0: 0x18F
4280	 399	JUMP		 	 
- stack 0: 0x698
4281	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x698
4282	 190	PUSH4	0ff01000	 	 
- stack 1: 0x698
- stack 0: 0xFF01000
4283	 195	PUSH2	0020	 	 
- stack 2: 0x698
- stack 1: 0xFF01000
- stack 0: 0x20
4284	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x698
4285	 199	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4286	 19B	ADD		 	 
- stack 0: 0x69C
4287	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4288	 19D	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
4289	 19E	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
- stack 0: 0xF0
4290	 1A0	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x99
4291	 1A1	JUMP		 	 
- stack 0: 0x69C
4292	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x69C
4293	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4294	 9B	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
4295	 9C	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
- stack 0: 0xE0
4296	 9E	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x99FFF0
4297	 9F	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
4298	 A2	AND		 	 
- stack 1: 0x69C
- stack 0: 0xFFF0
4299	 A3	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0xFFF0
- stack 0: 0x1
4300	 A5	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
4301	 A6	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
4302	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x69C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
4303	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x69C
- stack 0: 0xFF00FF0
4304	 AB	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xFF00FF0
- stack 0: 0x20
4305	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x69C
4306	 AF	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4307	 B1	ADD		 	 
- stack 0: 0x6A0
4308	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4309	 B3	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
4310	 B4	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
4311	 B6	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x3E6
4312	 B7	JUMP		 	 
- stack 0: 0x6A0
4313	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6A0
4314	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4315	 3E8	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
4316	 3E9	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
- stack 0: 0xE0
4317	 3EB	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x3E60000
4318	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4319	 3EF	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4320	 3F0	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
4321	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4322	 3F3	POP		 	 
- stack 0: 0x6A0
4323	 3F4	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4324	 3F6	ADD		 	 
- stack 0: 0x6A4
4325	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4326	 3F8	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFDC01B50F00
4327	 3F9	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFDC01B50F00
- stack 0: 0xF0
4328	 3FB	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x1A2
4329	 3FC	JUMP		 	 
- stack 0: 0x6A4
4330	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x6A4
4331	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x6A4
- stack 0: 0xF0F0F000
4332	 1A8	PUSH2	0040	 	 
- stack 2: 0x6A4
- stack 1: 0xF0F0F000
- stack 0: 0x40
4333	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A4
4334	 1AC	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4335	 1AE	ADD		 	 
- stack 0: 0x6A8
4336	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4337	 1B0	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFDC01B50F00011400F0
4338	 1B1	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFDC01B50F00011400F0
- stack 0: 0xF0
4339	 1B3	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xCB
4340	 1B4	JUMP		 	 
- stack 0: 0x6A8
4341	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x6A8
4342	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
4343	 CD	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFDC01B50F00011400F0
4344	 CE	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFDC01B50F00011400F0
- stack 0: 0xE0
4345	 D0	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xCB00F0
4346	 D1	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
4347	 D4	AND		 	 
- stack 1: 0x6A8
- stack 0: 0xF0
4348	 D5	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0xF0
- stack 0: 0x1
4349	 D7	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0xF0
4350	 D8	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0xF0
- stack 0: 0x40
4351	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x6A8
- stack 1: 0xF0
- stack 0: 0xF0F0F000
4352	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x6A8
- stack 0: 0xF0F0F0F0
4353	 DD	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
4354	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A8
4355	 E1	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4356	 E3	ADD		 	 
- stack 0: 0x6AC
4357	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4358	 E5	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330010
4359	 E6	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330010
- stack 0: 0xF0
4360	 E8	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x3E6
4361	 E9	JUMP		 	 
- stack 0: 0x6AC
4362	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6AC
4363	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
4364	 3E8	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330010
4365	 3E9	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330010
- stack 0: 0xE0
4366	 3EB	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x3E60000
4367	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4368	 3EF	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4369	 3F0	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x1
4370	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4371	 3F3	POP		 	 
- stack 0: 0x6AC
4372	 3F4	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4373	 3F6	ADD		 	 
- stack 0: 0x6B0
4374	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4375	 3F8	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0xEA000003290001034800020362FFDC01B50F00011400F001330010014D01FC
4376	 3F9	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0xEA000003290001034800020362FFDC01B50F00011400F001330010014D01FC
- stack 0: 0xF0
4377	 3FB	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0xEA
4378	 3FC	JUMP		 	 
- stack 0: 0x6B0
4379	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x6B0
4380	 EB	PUSH2	0040	 	 
- stack 1: 0x6B0
- stack 0: 0x40
4381	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6B0
- stack 0: 0xF0F0F0F0
4382	 EF	PUSH2	0020	 	 
- stack 2: 0x6B0
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
4383	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6B0
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
4384	 F3	AND		 	  ;; # AND
- stack 1: 0x6B0
- stack 0: 0xF000F0
4385	 F4	PUSH2	0060	 	 
- stack 2: 0x6B0
- stack 1: 0xF000F0
- stack 0: 0x60
4386	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6B0
4387	 F8	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4388	 FA	ADD		 	 
- stack 0: 0x6B4
4389	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4390	 FC	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3290001034800020362FFDC01B50F00011400F001330010014D01FC02F00000
4391	 FD	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x3290001034800020362FFDC01B50F00011400F001330010014D01FC02F00000
- stack 0: 0xF0
4392	 FF	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x329
4393	 100	JUMP		 	 
- stack 0: 0x6B4
4394	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6B4
4395	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
4396	 32B	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3290001034800020362FFDC01B50F00011400F001330010014D01FC02F00000
4397	 32C	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x3290001034800020362FFDC01B50F00011400F001330010014D01FC02F00000
- stack 0: 0xE0
4398	 32E	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3290001
4399	 32F	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x3290001
- stack 0: 0xFFFF
4400	 332	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x1
4401	 333	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x1
4402	 335	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x1
4403	 336	PUSH2	0080	 	 
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x80
4404	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x1
4405	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x6B4
- stack 0: 0x2
4406	 33B	PUSH2	0080	 	 
- stack 2: 0x6B4
- stack 1: 0x2
- stack 0: 0x80
4407	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B4
4408	 33F	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4409	 341	ADD		 	 
- stack 0: 0x6B8
4410	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4411	 343	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x34800020362FFDC01B50F00011400F001330010014D01FC02F0000001C80FF0
4412	 344	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x34800020362FFDC01B50F00011400F001330010014D01FC02F0000001C80FF0
- stack 0: 0xF0
4413	 346	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x348
4414	 347	JUMP		 	 
- stack 0: 0x6B8
4415	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6B8
4416	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
4417	 34A	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x34800020362FFDC01B50F00011400F001330010014D01FC02F0000001C80FF0
4418	 34B	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x34800020362FFDC01B50F00011400F001330010014D01FC02F0000001C80FF0
- stack 0: 0xE0
4419	 34D	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x3480002
4420	 34E	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x3480002
- stack 0: 0xFFFF
4421	 351	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x2
4422	 352	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0x1
4423	 354	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x2
4424	 355	PUSH2	00A0	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0xA0
4425	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x6B8
4426	 359	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4427	 35B	ADD		 	 
- stack 0: 0x6BC
4428	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4429	 35D	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x362FFDC01B50F00011400F001330010014D01FC02F0000001C80FF0009900FF
4430	 35E	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x362FFDC01B50F00011400F001330010014D01FC02F0000001C80FF0009900FF
- stack 0: 0xF0
4431	 360	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x362
4432	 361	JUMP		 	 
- stack 0: 0x6BC
4433	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x6BC
4434	 363	PUSH2	0080	 	 
- stack 1: 0x6BC
- stack 0: 0x80
4435	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x6BC
- stack 0: 0x2
4436	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4437	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6BC
- stack 0: 0x2
4438	 36D	PUSH2	00A0	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0xA0
4439	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0x2
4440	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6BC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4441	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0x2
4442	 377	SUB		 	 
- stack 1: 0x6BC
- stack 0: 0x0
4443	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x6BC
- stack 1: 0x0
- stack 0: 0x380
4444	 37B	JUMPI		 	 
- stack 0: 0x6BC
4445	 37C	PUSH2	039A	 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 1: 0x6BC
- stack 0: 0x39A
4446	 37F	JUMP		 	 
- stack 0: 0x6BC
4447	 39A	JUMPDEST		 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x6BC
4448	 39B	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4449	 39D	ADD		 	 
- stack 0: 0x6C0
4450	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4451	 39F	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x1B50F00011400F001330010014D01FC02F0000001C80FF0009900FF03E60000
4452	 3A0	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x1B50F00011400F001330010014D01FC02F0000001C80FF0009900FF03E60000
- stack 0: 0xF0
4453	 3A2	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x1B5
4454	 3A3	JUMP		 	 
- stack 0: 0x6C0
4455	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00eb7	  ;; # instr: lui t4,0xf00(ignore imm)
- stack 0: 0x6C0
4456	 1B6	PUSH4	00f00000	 	 
- stack 1: 0x6C0
- stack 0: 0xF00000
4457	 1BB	PUSH2	03A0	 	 
- stack 2: 0x6C0
- stack 1: 0xF00000
- stack 0: 0x3A0
4458	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x6C0
4459	 1BF	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4460	 1C1	ADD		 	 
- stack 0: 0x6C4
4461	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4462	 1C3	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x11400F001330010014D01FC02F0000001C80FF0009900FF03E6000003E60000
4463	 1C4	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x11400F001330010014D01FC02F0000001C80FF0009900FF03E6000003E60000
- stack 0: 0xF0
4464	 1C6	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x114
4465	 1C7	JUMP		 	 
- stack 0: 0x6C4
4466	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x6C4
4467	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C4
- stack 0: 0x6C4
4468	 116	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x11400F001330010014D01FC02F0000001C80FF0009900FF03E6000003E60000
4469	 117	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0x11400F001330010014D01FC02F0000001C80FF0009900FF03E6000003E60000
- stack 0: 0xE0
4470	 119	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x11400F0
4471	 11A	PUSH2	FFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x11400F0
- stack 0: 0xFFFF
4472	 11D	AND		 	 
- stack 1: 0x6C4
- stack 0: 0xF0
4473	 11E	PUSH1	01	 	 
- stack 2: 0x6C4
- stack 1: 0xF0
- stack 0: 0x1
4474	 120	SIGNEXTEND		 	 
- stack 1: 0x6C4
- stack 0: 0xF0
4475	 121	PUSH2	03A0	 	 
- stack 2: 0x6C4
- stack 1: 0xF0
- stack 0: 0x3A0
4476	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x6C4
- stack 1: 0xF0
- stack 0: 0xF00000
4477	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x6C4
- stack 0: 0xF000F0
4478	 126	PUSH2	03A0	 	 
- stack 2: 0x6C4
- stack 1: 0xF000F0
- stack 0: 0x3A0
4479	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x6C4
4480	 12A	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
4481	 12C	ADD		 	 
- stack 0: 0x6C8
4482	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
4483	 12E	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x1330010014D01FC02F0000001C80FF0009900FF03E6000003E6000000B8F0F1
4484	 12F	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x1330010014D01FC02F0000001C80FF0009900FF03E6000003E6000000B8F0F1
- stack 0: 0xF0
4485	 131	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x133
4486	 132	JUMP		 	 
- stack 0: 0x6C8
4487	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6C8
4488	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
4489	 135	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x1330010014D01FC02F0000001C80FF0009900FF03E6000003E6000000B8F0F1
4490	 136	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0x1330010014D01FC02F0000001C80FF0009900FF03E6000003E6000000B8F0F1
- stack 0: 0xE0
4491	 138	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x1330010
4492	 139	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x1330010
- stack 0: 0xFFFF
4493	 13C	AND		 	 
- stack 1: 0x6C8
- stack 0: 0x10
4494	 13D	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0x10
- stack 0: 0x1
4495	 13F	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x10
4496	 140	PUSH2	0380	 	 
- stack 2: 0x6C8
- stack 1: 0x10
- stack 0: 0x380
4497	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x6C8
4498	 144	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
4499	 146	ADD		 	 
- stack 0: 0x6CC
4500	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
4501	 148	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x14D01FC02F0000001C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F
4502	 149	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x14D01FC02F0000001C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F
- stack 0: 0xF0
4503	 14B	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x14D
4504	 14C	JUMP		 	 
- stack 0: 0x6CC
4505	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x6CC
4506	 14E	PUSH2	0060	 	 
- stack 1: 0x6CC
- stack 0: 0x60
4507	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x6CC
- stack 0: 0xF000F0
4508	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6CC
- stack 1: 0xF000F0
- stack 0: 0xFFFFFFFF
4509	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6CC
- stack 0: 0xF000F0
4510	 158	PUSH2	03A0	 	 
- stack 2: 0x6CC
- stack 1: 0xF000F0
- stack 0: 0x3A0
4511	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x6CC
- stack 1: 0xF000F0
- stack 0: 0xF000F0
4512	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6CC
- stack 2: 0xF000F0
- stack 1: 0xF000F0
- stack 0: 0xFFFFFFFF
4513	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6CC
- stack 1: 0xF000F0
- stack 0: 0xF000F0
4514	 162	SUB		 	 
- stack 1: 0x6CC
- stack 0: 0x0
4515	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0x16B
4516	 166	JUMPI		 	 
- stack 0: 0x6CC
4517	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x6CC
- stack 0: 0x185
4518	 16A	JUMP		 	 
- stack 0: 0x6CC
4519	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x6CC
4520	 186	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
4521	 188	ADD		 	 
- stack 0: 0x6D0
4522	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
4523	 18A	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x2F0000001C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA0000
4524	 18B	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x2F0000001C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
4525	 18D	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x2F0
4526	 18E	JUMP		 	 
- stack 0: 0x6D0
4527	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6D0
4528	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
4529	 2F2	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x2F0000001C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA0000
4530	 2F3	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x2F0000001C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
4531	 2F5	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x2F00000
4532	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x2F00000
- stack 0: 0xFFFF
4533	 2F9	AND		 	 
- stack 1: 0x6D0
- stack 0: 0x0
4534	 2FA	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x1
4535	 2FC	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0x0
4536	 2FD	PUSH2	0080	 	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x80
4537	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x6D0
4538	 301	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
4539	 303	ADD		 	 
- stack 0: 0x6D4
4540	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
4541	 305	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x1C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA000003290001
4542	 306	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x1C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA000003290001
- stack 0: 0xF0
4543	 308	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x1C8
4544	 309	JUMP		 	 
- stack 0: 0x6D4
4545	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x6D4
4546	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x6D4
- stack 0: 0xFF0000
4547	 1CE	PUSH2	0020	 	 
- stack 2: 0x6D4
- stack 1: 0xFF0000
- stack 0: 0x20
4548	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D4
4549	 1D2	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
4550	 1D4	ADD		 	 
- stack 0: 0x6D8
4551	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
4552	 1D6	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
4553	 1D7	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xF0
4554	 1D9	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x99
4555	 1DA	JUMP		 	 
- stack 0: 0x6D8
4556	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x6D8
4557	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
4558	 9B	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
4559	 9C	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xE0
4560	 9E	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x9900FF
4561	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x9900FF
- stack 0: 0xFFFF
4562	 A2	AND		 	 
- stack 1: 0x6D8
- stack 0: 0xFF
4563	 A3	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0xFF
- stack 0: 0x1
4564	 A5	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0xFF
4565	 A6	PUSH2	0020	 	 
- stack 2: 0x6D8
- stack 1: 0xFF
- stack 0: 0x20
4566	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x6D8
- stack 1: 0xFF
- stack 0: 0xFF0000
4567	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x6D8
- stack 0: 0xFF00FF
4568	 AB	PUSH2	0020	 	 
- stack 2: 0x6D8
- stack 1: 0xFF00FF
- stack 0: 0x20
4569	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D8
4570	 AF	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
4571	 B1	ADD		 	 
- stack 0: 0x6DC
4572	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
4573	 B3	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
4574	 B4	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
- stack 0: 0xF0
4575	 B6	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x3E6
4576	 B7	JUMP		 	 
- stack 0: 0x6DC
4577	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6DC
4578	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
4579	 3E8	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
4580	 3E9	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
- stack 0: 0xE0
4581	 3EB	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x3E60000
4582	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4583	 3EF	AND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
4584	 3F0	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x1
4585	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
4586	 3F3	POP		 	 
- stack 0: 0x6DC
4587	 3F4	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
4588	 3F6	ADD		 	 
- stack 0: 0x6E0
4589	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
4590	 3F8	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DB00F0
4591	 3F9	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xF0
4592	 3FB	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x3E6
4593	 3FC	JUMP		 	 
- stack 0: 0x6E0
4594	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E0
4595	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
4596	 3E8	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DB00F0
4597	 3E9	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xE0
4598	 3EB	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x3E60000
4599	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4600	 3EF	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4601	 3F0	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
4602	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4603	 3F3	POP		 	 
- stack 0: 0x6E0
4604	 3F4	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
4605	 3F6	ADD		 	 
- stack 0: 0x6E4
4606	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
4607	 3F8	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0xB8F0F100CBFF0F00EA000003290001034800020362FFDC01DB00F00114000F
4608	 3F9	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0xB8F0F100CBFF0F00EA000003290001034800020362FFDC01DB00F00114000F
- stack 0: 0xF0
4609	 3FB	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0xB8
4610	 3FC	JUMP		 	 
- stack 0: 0x6E4
4611	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x6E4
4612	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x6E4
- stack 0: 0xF0F1000
4613	 BE	PUSH2	0040	 	 
- stack 2: 0x6E4
- stack 1: 0xF0F1000
- stack 0: 0x40
4614	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x6E4
4615	 C2	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4616	 C4	ADD		 	 
- stack 0: 0x6E8
4617	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
4618	 C6	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0xCBFF0F00EA000003290001034800020362FFDC01DB00F00114000F01330011
4619	 C7	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0xCBFF0F00EA000003290001034800020362FFDC01DB00F00114000F01330011
- stack 0: 0xF0
4620	 C9	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0xCB
4621	 CA	JUMP		 	 
- stack 0: 0x6E8
4622	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x6E8
4623	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
4624	 CD	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0xCBFF0F00EA000003290001034800020362FFDC01DB00F00114000F01330011
4625	 CE	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0xCBFF0F00EA000003290001034800020362FFDC01DB00F00114000F01330011
- stack 0: 0xE0
4626	 D0	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0xCBFF0F
4627	 D1	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
4628	 D4	AND		 	 
- stack 1: 0x6E8
- stack 0: 0xFF0F
4629	 D5	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0xFF0F
- stack 0: 0x1
4630	 D7	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
4631	 D8	PUSH2	0040	 	 
- stack 2: 0x6E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
4632	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x6E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
4633	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x6E8
- stack 0: 0xF0F0F0F
4634	 DD	PUSH2	0040	 	 
- stack 2: 0x6E8
- stack 1: 0xF0F0F0F
- stack 0: 0x40
4635	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6E8
4636	 E1	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4637	 E3	ADD		 	 
- stack 0: 0x6EC
4638	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4639	 E5	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xEA000003290001034800020362FFDC01DB00F00114000F01330011014D01C0
4640	 E6	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0xEA000003290001034800020362FFDC01DB00F00114000F01330011014D01C0
- stack 0: 0xF0
4641	 E8	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xEA
4642	 E9	JUMP		 	 
- stack 0: 0x6EC
4643	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x6EC
4644	 EB	PUSH2	0040	 	 
- stack 1: 0x6EC
- stack 0: 0x40
4645	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6EC
- stack 0: 0xF0F0F0F
4646	 EF	PUSH2	0020	 	 
- stack 2: 0x6EC
- stack 1: 0xF0F0F0F
- stack 0: 0x20
4647	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6EC
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
4648	 F3	AND		 	  ;; # AND
- stack 1: 0x6EC
- stack 0: 0xF000F
4649	 F4	PUSH2	0060	 	 
- stack 2: 0x6EC
- stack 1: 0xF000F
- stack 0: 0x60
4650	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6EC
4651	 F8	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
4652	 FA	ADD		 	 
- stack 0: 0x6F0
4653	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
4654	 FC	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F01330011014D01C002F00000
4655	 FD	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F01330011014D01C002F00000
- stack 0: 0xF0
4656	 FF	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x329
4657	 100	JUMP		 	 
- stack 0: 0x6F0
4658	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6F0
4659	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
4660	 32B	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F01330011014D01C002F00000
4661	 32C	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F01330011014D01C002F00000
- stack 0: 0xE0
4662	 32E	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x3290001
4663	 32F	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x3290001
- stack 0: 0xFFFF
4664	 332	AND		 	 
- stack 1: 0x6F0
- stack 0: 0x1
4665	 333	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x1
4666	 335	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0x1
4667	 336	PUSH2	0080	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x80
4668	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x0
4669	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x6F0
- stack 0: 0x1
4670	 33B	PUSH2	0080	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x80
4671	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x6F0
4672	 33F	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
4673	 341	ADD		 	 
- stack 0: 0x6F4
4674	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
4675	 343	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x34800020362FFDC01DB00F00114000F01330011014D01C002F0000000B8F0F1
4676	 344	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x34800020362FFDC01DB00F00114000F01330011014D01C002F0000000B8F0F1
- stack 0: 0xF0
4677	 346	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x348
4678	 347	JUMP		 	 
- stack 0: 0x6F4
4679	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6F4
4680	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
4681	 34A	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x34800020362FFDC01DB00F00114000F01330011014D01C002F0000000B8F0F1
4682	 34B	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x34800020362FFDC01DB00F00114000F01330011014D01C002F0000000B8F0F1
- stack 0: 0xE0
4683	 34D	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x3480002
4684	 34E	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x3480002
- stack 0: 0xFFFF
4685	 351	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x2
4686	 352	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x2
- stack 0: 0x1
4687	 354	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x2
4688	 355	PUSH2	00A0	 	 
- stack 2: 0x6F4
- stack 1: 0x2
- stack 0: 0xA0
4689	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x6F4
4690	 359	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
4691	 35B	ADD		 	 
- stack 0: 0x6F8
4692	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
4693	 35D	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x362FFDC01DB00F00114000F01330011014D01C002F0000000B8F0F100CBFF0F
4694	 35E	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x362FFDC01DB00F00114000F01330011014D01C002F0000000B8F0F100CBFF0F
- stack 0: 0xF0
4695	 360	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x362
4696	 361	JUMP		 	 
- stack 0: 0x6F8
4697	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x6F8
4698	 363	PUSH2	0080	 	 
- stack 1: 0x6F8
- stack 0: 0x80
4699	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x6F8
- stack 0: 0x1
4700	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4701	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F8
- stack 0: 0x1
4702	 36D	PUSH2	00A0	 	 
- stack 2: 0x6F8
- stack 1: 0x1
- stack 0: 0xA0
4703	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x6F8
- stack 1: 0x1
- stack 0: 0x2
4704	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6F8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4705	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6F8
- stack 1: 0x1
- stack 0: 0x2
4706	 377	SUB		 	 
- stack 1: 0x6F8
- stack 0: 0x1
4707	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x6F8
- stack 1: 0x1
- stack 0: 0x380
4708	 37B	JUMPI		 	 
- stack 0: 0x6F8
4709	 380	JUMPDEST		 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x6F8
4710	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F8
- stack 0: 0x6F8
4711	 382	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x362FFDC01DB00F00114000F01330011014D01C002F0000000B8F0F100CBFF0F
4712	 383	PUSH1	E0	 	 
- stack 2: 0x6F8
- stack 1: 0x362FFDC01DB00F00114000F01330011014D01C002F0000000B8F0F100CBFF0F
- stack 0: 0xE0
4713	 385	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x362FFDC
4714	 386	PUSH2	FFFF	 	 
- stack 2: 0x6F8
- stack 1: 0x362FFDC
- stack 0: 0xFFFF
4715	 389	AND		 	 
- stack 1: 0x6F8
- stack 0: 0xFFDC
4716	 38A	PUSH1	01	 	 
- stack 2: 0x6F8
- stack 1: 0xFFDC
- stack 0: 0x1
4717	 38C	SIGNEXTEND		 	 
- stack 1: 0x6F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
4718	 38D	ADD		 	 
- stack 0: 0x6D4
4719	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFF
4720	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6D4
4721	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
4722	 395	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x1C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA000003290001
4723	 396	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x1C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA000003290001
- stack 0: 0xF0
4724	 398	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x1C8
4725	 399	JUMP		 	 
- stack 0: 0x6D4
4726	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x6D4
4727	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x6D4
- stack 0: 0xFF0000
4728	 1CE	PUSH2	0020	 	 
- stack 2: 0x6D4
- stack 1: 0xFF0000
- stack 0: 0x20
4729	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D4
4730	 1D2	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
4731	 1D4	ADD		 	 
- stack 0: 0x6D8
4732	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
4733	 1D6	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
4734	 1D7	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xF0
4735	 1D9	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x99
4736	 1DA	JUMP		 	 
- stack 0: 0x6D8
4737	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x6D8
4738	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
4739	 9B	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
4740	 9C	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xE0
4741	 9E	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x9900FF
4742	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x9900FF
- stack 0: 0xFFFF
4743	 A2	AND		 	 
- stack 1: 0x6D8
- stack 0: 0xFF
4744	 A3	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0xFF
- stack 0: 0x1
4745	 A5	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0xFF
4746	 A6	PUSH2	0020	 	 
- stack 2: 0x6D8
- stack 1: 0xFF
- stack 0: 0x20
4747	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x6D8
- stack 1: 0xFF
- stack 0: 0xFF0000
4748	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x6D8
- stack 0: 0xFF00FF
4749	 AB	PUSH2	0020	 	 
- stack 2: 0x6D8
- stack 1: 0xFF00FF
- stack 0: 0x20
4750	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D8
4751	 AF	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
4752	 B1	ADD		 	 
- stack 0: 0x6DC
4753	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
4754	 B3	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
4755	 B4	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
- stack 0: 0xF0
4756	 B6	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x3E6
4757	 B7	JUMP		 	 
- stack 0: 0x6DC
4758	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6DC
4759	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
4760	 3E8	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
4761	 3E9	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
- stack 0: 0xE0
4762	 3EB	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x3E60000
4763	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4764	 3EF	AND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
4765	 3F0	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x1
4766	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
4767	 3F3	POP		 	 
- stack 0: 0x6DC
4768	 3F4	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
4769	 3F6	ADD		 	 
- stack 0: 0x6E0
4770	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
4771	 3F8	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DB00F0
4772	 3F9	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xF0
4773	 3FB	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x3E6
4774	 3FC	JUMP		 	 
- stack 0: 0x6E0
4775	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E0
4776	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
4777	 3E8	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DB00F0
4778	 3E9	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xE0
4779	 3EB	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x3E60000
4780	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4781	 3EF	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4782	 3F0	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
4783	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4784	 3F3	POP		 	 
- stack 0: 0x6E0
4785	 3F4	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
4786	 3F6	ADD		 	 
- stack 0: 0x6E4
4787	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
4788	 3F8	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0xB8F0F100CBFF0F00EA000003290001034800020362FFDC01DB00F00114000F
4789	 3F9	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0xB8F0F100CBFF0F00EA000003290001034800020362FFDC01DB00F00114000F
- stack 0: 0xF0
4790	 3FB	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0xB8
4791	 3FC	JUMP		 	 
- stack 0: 0x6E4
4792	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x6E4
4793	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x6E4
- stack 0: 0xF0F1000
4794	 BE	PUSH2	0040	 	 
- stack 2: 0x6E4
- stack 1: 0xF0F1000
- stack 0: 0x40
4795	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x6E4
4796	 C2	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4797	 C4	ADD		 	 
- stack 0: 0x6E8
4798	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
4799	 C6	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0xCBFF0F00EA000003290001034800020362FFDC01DB00F00114000F01330011
4800	 C7	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0xCBFF0F00EA000003290001034800020362FFDC01DB00F00114000F01330011
- stack 0: 0xF0
4801	 C9	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0xCB
4802	 CA	JUMP		 	 
- stack 0: 0x6E8
4803	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x6E8
4804	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
4805	 CD	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0xCBFF0F00EA000003290001034800020362FFDC01DB00F00114000F01330011
4806	 CE	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0xCBFF0F00EA000003290001034800020362FFDC01DB00F00114000F01330011
- stack 0: 0xE0
4807	 D0	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0xCBFF0F
4808	 D1	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
4809	 D4	AND		 	 
- stack 1: 0x6E8
- stack 0: 0xFF0F
4810	 D5	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0xFF0F
- stack 0: 0x1
4811	 D7	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
4812	 D8	PUSH2	0040	 	 
- stack 2: 0x6E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
4813	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x6E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
4814	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x6E8
- stack 0: 0xF0F0F0F
4815	 DD	PUSH2	0040	 	 
- stack 2: 0x6E8
- stack 1: 0xF0F0F0F
- stack 0: 0x40
4816	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6E8
4817	 E1	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4818	 E3	ADD		 	 
- stack 0: 0x6EC
4819	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4820	 E5	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xEA000003290001034800020362FFDC01DB00F00114000F01330011014D01C0
4821	 E6	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0xEA000003290001034800020362FFDC01DB00F00114000F01330011014D01C0
- stack 0: 0xF0
4822	 E8	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xEA
4823	 E9	JUMP		 	 
- stack 0: 0x6EC
4824	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x6EC
4825	 EB	PUSH2	0040	 	 
- stack 1: 0x6EC
- stack 0: 0x40
4826	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6EC
- stack 0: 0xF0F0F0F
4827	 EF	PUSH2	0020	 	 
- stack 2: 0x6EC
- stack 1: 0xF0F0F0F
- stack 0: 0x20
4828	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6EC
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
4829	 F3	AND		 	  ;; # AND
- stack 1: 0x6EC
- stack 0: 0xF000F
4830	 F4	PUSH2	0060	 	 
- stack 2: 0x6EC
- stack 1: 0xF000F
- stack 0: 0x60
4831	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6EC
4832	 F8	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
4833	 FA	ADD		 	 
- stack 0: 0x6F0
4834	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
4835	 FC	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F01330011014D01C002F00000
4836	 FD	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F01330011014D01C002F00000
- stack 0: 0xF0
4837	 FF	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x329
4838	 100	JUMP		 	 
- stack 0: 0x6F0
4839	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6F0
4840	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
4841	 32B	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F01330011014D01C002F00000
4842	 32C	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F01330011014D01C002F00000
- stack 0: 0xE0
4843	 32E	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x3290001
4844	 32F	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x3290001
- stack 0: 0xFFFF
4845	 332	AND		 	 
- stack 1: 0x6F0
- stack 0: 0x1
4846	 333	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x1
4847	 335	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0x1
4848	 336	PUSH2	0080	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x80
4849	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x1
4850	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x6F0
- stack 0: 0x2
4851	 33B	PUSH2	0080	 	 
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0x80
4852	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x6F0
4853	 33F	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
4854	 341	ADD		 	 
- stack 0: 0x6F4
4855	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
4856	 343	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x34800020362FFDC01DB00F00114000F01330011014D01C002F0000000B8F0F1
4857	 344	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x34800020362FFDC01DB00F00114000F01330011014D01C002F0000000B8F0F1
- stack 0: 0xF0
4858	 346	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x348
4859	 347	JUMP		 	 
- stack 0: 0x6F4
4860	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6F4
4861	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
4862	 34A	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x34800020362FFDC01DB00F00114000F01330011014D01C002F0000000B8F0F1
4863	 34B	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x34800020362FFDC01DB00F00114000F01330011014D01C002F0000000B8F0F1
- stack 0: 0xE0
4864	 34D	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x3480002
4865	 34E	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x3480002
- stack 0: 0xFFFF
4866	 351	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x2
4867	 352	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x2
- stack 0: 0x1
4868	 354	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x2
4869	 355	PUSH2	00A0	 	 
- stack 2: 0x6F4
- stack 1: 0x2
- stack 0: 0xA0
4870	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x6F4
4871	 359	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
4872	 35B	ADD		 	 
- stack 0: 0x6F8
4873	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
4874	 35D	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x362FFDC01DB00F00114000F01330011014D01C002F0000000B8F0F100CBFF0F
4875	 35E	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x362FFDC01DB00F00114000F01330011014D01C002F0000000B8F0F100CBFF0F
- stack 0: 0xF0
4876	 360	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x362
4877	 361	JUMP		 	 
- stack 0: 0x6F8
4878	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x6F8
4879	 363	PUSH2	0080	 	 
- stack 1: 0x6F8
- stack 0: 0x80
4880	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x6F8
- stack 0: 0x2
4881	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4882	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F8
- stack 0: 0x2
4883	 36D	PUSH2	00A0	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0xA0
4884	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0x2
4885	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6F8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4886	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0x2
4887	 377	SUB		 	 
- stack 1: 0x6F8
- stack 0: 0x0
4888	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x6F8
- stack 1: 0x0
- stack 0: 0x380
4889	 37B	JUMPI		 	 
- stack 0: 0x6F8
4890	 37C	PUSH2	039A	 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 1: 0x6F8
- stack 0: 0x39A
4891	 37F	JUMP		 	 
- stack 0: 0x6F8
4892	 39A	JUMPDEST		 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x6F8
4893	 39B	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
4894	 39D	ADD		 	 
- stack 0: 0x6FC
4895	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
4896	 39F	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x1DB00F00114000F01330011014D01C002F0000000B8F0F100CBFF0F0086F010
4897	 3A0	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x1DB00F00114000F01330011014D01C002F0000000B8F0F100CBFF0F0086F010
- stack 0: 0xF0
4898	 3A2	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x1DB
4899	 3A3	JUMP		 	 
- stack 0: 0x6FC
4900	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_f0eb7	  ;; # instr: lui t4,0xf0(ignore imm)
- stack 0: 0x6FC
4901	 1DC	PUSH4	000f0000	 	 
- stack 1: 0x6FC
- stack 0: 0xF0000
4902	 1E1	PUSH2	03A0	 	 
- stack 2: 0x6FC
- stack 1: 0xF0000
- stack 0: 0x3A0
4903	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x6FC
4904	 1E5	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
4905	 1E7	ADD		 	 
- stack 0: 0x700
4906	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
4907	 1E9	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x114000F01330011014D01C002F0000000B8F0F100CBFF0F0086F0100099FF00
4908	 1EA	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x114000F01330011014D01C002F0000000B8F0F100CBFF0F0086F0100099FF00
- stack 0: 0xF0
4909	 1EC	SHR		 	 
- stack 1: 0x700
- stack 0: 0x114
4910	 1ED	JUMP		 	 
- stack 0: 0x700
4911	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x700
4912	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x700
- stack 0: 0x700
4913	 116	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x114000F01330011014D01C002F0000000B8F0F100CBFF0F0086F0100099FF00
4914	 117	PUSH1	E0	 	 
- stack 2: 0x700
- stack 1: 0x114000F01330011014D01C002F0000000B8F0F100CBFF0F0086F0100099FF00
- stack 0: 0xE0
4915	 119	SHR		 	 
- stack 1: 0x700
- stack 0: 0x114000F
4916	 11A	PUSH2	FFFF	 	 
- stack 2: 0x700
- stack 1: 0x114000F
- stack 0: 0xFFFF
4917	 11D	AND		 	 
- stack 1: 0x700
- stack 0: 0xF
4918	 11E	PUSH1	01	 	 
- stack 2: 0x700
- stack 1: 0xF
- stack 0: 0x1
4919	 120	SIGNEXTEND		 	 
- stack 1: 0x700
- stack 0: 0xF
4920	 121	PUSH2	03A0	 	 
- stack 2: 0x700
- stack 1: 0xF
- stack 0: 0x3A0
4921	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x700
- stack 1: 0xF
- stack 0: 0xF0000
4922	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x700
- stack 0: 0xF000F
4923	 126	PUSH2	03A0	 	 
- stack 2: 0x700
- stack 1: 0xF000F
- stack 0: 0x3A0
4924	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x700
4925	 12A	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
4926	 12C	ADD		 	 
- stack 0: 0x704
4927	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
4928	 12E	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x1330011014D01C002F0000000B8F0F100CBFF0F0086F0100099FF0000EA0000
4929	 12F	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x1330011014D01C002F0000000B8F0F100CBFF0F0086F0100099FF0000EA0000
- stack 0: 0xF0
4930	 131	SHR		 	 
- stack 1: 0x704
- stack 0: 0x133
4931	 132	JUMP		 	 
- stack 0: 0x704
4932	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x704
4933	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x704
- stack 0: 0x704
4934	 135	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x1330011014D01C002F0000000B8F0F100CBFF0F0086F0100099FF0000EA0000
4935	 136	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0x1330011014D01C002F0000000B8F0F100CBFF0F0086F0100099FF0000EA0000
- stack 0: 0xE0
4936	 138	SHR		 	 
- stack 1: 0x704
- stack 0: 0x1330011
4937	 139	PUSH2	FFFF	 	 
- stack 2: 0x704
- stack 1: 0x1330011
- stack 0: 0xFFFF
4938	 13C	AND		 	 
- stack 1: 0x704
- stack 0: 0x11
4939	 13D	PUSH1	01	 	 
- stack 2: 0x704
- stack 1: 0x11
- stack 0: 0x1
4940	 13F	SIGNEXTEND		 	 
- stack 1: 0x704
- stack 0: 0x11
4941	 140	PUSH2	0380	 	 
- stack 2: 0x704
- stack 1: 0x11
- stack 0: 0x380
4942	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x704
4943	 144	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
4944	 146	ADD		 	 
- stack 0: 0x708
4945	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
4946	 148	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x14D01C002F0000000B8F0F100CBFF0F0086F0100099FF0000EA000003290001
4947	 149	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x14D01C002F0000000B8F0F100CBFF0F0086F0100099FF0000EA000003290001
- stack 0: 0xF0
4948	 14B	SHR		 	 
- stack 1: 0x708
- stack 0: 0x14D
4949	 14C	JUMP		 	 
- stack 0: 0x708
4950	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x708
4951	 14E	PUSH2	0060	 	 
- stack 1: 0x708
- stack 0: 0x60
4952	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x708
- stack 0: 0xF000F
4953	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x708
- stack 1: 0xF000F
- stack 0: 0xFFFFFFFF
4954	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x708
- stack 0: 0xF000F
4955	 158	PUSH2	03A0	 	 
- stack 2: 0x708
- stack 1: 0xF000F
- stack 0: 0x3A0
4956	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x708
- stack 1: 0xF000F
- stack 0: 0xF000F
4957	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x708
- stack 2: 0xF000F
- stack 1: 0xF000F
- stack 0: 0xFFFFFFFF
4958	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x708
- stack 1: 0xF000F
- stack 0: 0xF000F
4959	 162	SUB		 	 
- stack 1: 0x708
- stack 0: 0x0
4960	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x708
- stack 1: 0x0
- stack 0: 0x16B
4961	 166	JUMPI		 	 
- stack 0: 0x708
4962	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x708
- stack 0: 0x185
4963	 16A	JUMP		 	 
- stack 0: 0x708
4964	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x708
4965	 186	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
4966	 188	ADD		 	 
- stack 0: 0x70C
4967	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
4968	 18A	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x2F0000000B8F0F100CBFF0F0086F0100099FF0000EA00000329000103480002
4969	 18B	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0x2F0000000B8F0F100CBFF0F0086F0100099FF0000EA00000329000103480002
- stack 0: 0xF0
4970	 18D	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x2F0
4971	 18E	JUMP		 	 
- stack 0: 0x70C
4972	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x70C
4973	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
4974	 2F2	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x2F0000000B8F0F100CBFF0F0086F0100099FF0000EA00000329000103480002
4975	 2F3	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0x2F0000000B8F0F100CBFF0F0086F0100099FF0000EA00000329000103480002
- stack 0: 0xE0
4976	 2F5	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x2F00000
4977	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0x2F00000
- stack 0: 0xFFFF
4978	 2F9	AND		 	 
- stack 1: 0x70C
- stack 0: 0x0
4979	 2FA	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0x0
- stack 0: 0x1
4980	 2FC	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0x0
4981	 2FD	PUSH2	0080	 	 
- stack 2: 0x70C
- stack 1: 0x0
- stack 0: 0x80
4982	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x70C
4983	 301	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
4984	 303	ADD		 	 
- stack 0: 0x710
4985	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
4986	 305	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0xB8F0F100CBFF0F0086F0100099FF0000EA000003290001034800020362FFE4
4987	 306	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0xB8F0F100CBFF0F0086F0100099FF0000EA000003290001034800020362FFE4
- stack 0: 0xF0
4988	 308	SHR		 	 
- stack 1: 0x710
- stack 0: 0xB8
4989	 309	JUMP		 	 
- stack 0: 0x710
4990	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x710
4991	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x710
- stack 0: 0xF0F1000
4992	 BE	PUSH2	0040	 	 
- stack 2: 0x710
- stack 1: 0xF0F1000
- stack 0: 0x40
4993	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x710
4994	 C2	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
4995	 C4	ADD		 	 
- stack 0: 0x714
4996	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
4997	 C6	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F001
4998	 C7	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F001
- stack 0: 0xF0
4999	 C9	SHR		 	 
- stack 1: 0x714
- stack 0: 0xCB
5000	 CA	JUMP		 	 
- stack 0: 0x714
5001	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x714
5002	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
5003	 CD	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F001
5004	 CE	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F001
- stack 0: 0xE0
5005	 D0	SHR		 	 
- stack 1: 0x714
- stack 0: 0xCBFF0F
5006	 D1	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
5007	 D4	AND		 	 
- stack 1: 0x714
- stack 0: 0xFF0F
5008	 D5	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0xFF0F
- stack 0: 0x1
5009	 D7	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
5010	 D8	PUSH2	0040	 	 
- stack 2: 0x714
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
5011	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x714
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
5012	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x714
- stack 0: 0xF0F0F0F
5013	 DD	PUSH2	0040	 	 
- stack 2: 0x714
- stack 1: 0xF0F0F0F
- stack 0: 0x40
5014	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x714
5015	 E1	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
5016	 E3	ADD		 	 
- stack 0: 0x718
5017	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
5018	 E5	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x86F0100099FF0000EA000003290001034800020362FFE40101F0010114FF00
5019	 E6	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x86F0100099FF0000EA000003290001034800020362FFE40101F0010114FF00
- stack 0: 0xF0
5020	 E8	SHR		 	 
- stack 1: 0x718
- stack 0: 0x86
5021	 E9	JUMP		 	 
- stack 0: 0x718
5022	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x718
5023	 87	PUSH4	ff010000	 	 
- stack 1: 0x718
- stack 0: 0xFF010000
5024	 8C	PUSH2	0020	 	 
- stack 2: 0x718
- stack 1: 0xFF010000
- stack 0: 0x20
5025	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x718
5026	 90	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
5027	 92	ADD		 	 
- stack 0: 0x71C
5028	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
5029	 94	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x99FF0000EA000003290001034800020362FFE40101F0010114FF0001330012
5030	 95	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x99FF0000EA000003290001034800020362FFE40101F0010114FF0001330012
- stack 0: 0xF0
5031	 97	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x99
5032	 98	JUMP		 	 
- stack 0: 0x71C
5033	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x71C
5034	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
5035	 9B	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x99FF0000EA000003290001034800020362FFE40101F0010114FF0001330012
5036	 9C	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x99FF0000EA000003290001034800020362FFE40101F0010114FF0001330012
- stack 0: 0xE0
5037	 9E	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x99FF00
5038	 9F	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x99FF00
- stack 0: 0xFFFF
5039	 A2	AND		 	 
- stack 1: 0x71C
- stack 0: 0xFF00
5040	 A3	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0xFF00
- stack 0: 0x1
5041	 A5	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
5042	 A6	PUSH2	0020	 	 
- stack 2: 0x71C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
5043	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x71C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
5044	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x71C
- stack 0: 0xFF00FF00
5045	 AB	PUSH2	0020	 	 
- stack 2: 0x71C
- stack 1: 0xFF00FF00
- stack 0: 0x20
5046	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x71C
5047	 AF	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
5048	 B1	ADD		 	 
- stack 0: 0x720
5049	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
5050	 B3	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0xEA000003290001034800020362FFE40101F0010114FF0001330012014D018C
5051	 B4	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0xEA000003290001034800020362FFE40101F0010114FF0001330012014D018C
- stack 0: 0xF0
5052	 B6	SHR		 	 
- stack 1: 0x720
- stack 0: 0xEA
5053	 B7	JUMP		 	 
- stack 0: 0x720
5054	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x720
5055	 EB	PUSH2	0040	 	 
- stack 1: 0x720
- stack 0: 0x40
5056	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x720
- stack 0: 0xF0F0F0F
5057	 EF	PUSH2	0020	 	 
- stack 2: 0x720
- stack 1: 0xF0F0F0F
- stack 0: 0x20
5058	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x720
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
5059	 F3	AND		 	  ;; # AND
- stack 1: 0x720
- stack 0: 0xF000F00
5060	 F4	PUSH2	0060	 	 
- stack 2: 0x720
- stack 1: 0xF000F00
- stack 0: 0x60
5061	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x720
5062	 F8	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
5063	 FA	ADD		 	 
- stack 0: 0x724
5064	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
5065	 FC	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x3290001034800020362FFE40101F0010114FF0001330012014D018C02F00000
5066	 FD	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x3290001034800020362FFE40101F0010114FF0001330012014D018C02F00000
- stack 0: 0xF0
5067	 FF	SHR		 	 
- stack 1: 0x724
- stack 0: 0x329
5068	 100	JUMP		 	 
- stack 0: 0x724
5069	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x724
5070	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
5071	 32B	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x3290001034800020362FFE40101F0010114FF0001330012014D018C02F00000
5072	 32C	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0x3290001034800020362FFE40101F0010114FF0001330012014D018C02F00000
- stack 0: 0xE0
5073	 32E	SHR		 	 
- stack 1: 0x724
- stack 0: 0x3290001
5074	 32F	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0x3290001
- stack 0: 0xFFFF
5075	 332	AND		 	 
- stack 1: 0x724
- stack 0: 0x1
5076	 333	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x1
5077	 335	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x1
5078	 336	PUSH2	0080	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x80
5079	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x0
5080	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x724
- stack 0: 0x1
5081	 33B	PUSH2	0080	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x80
5082	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x724
5083	 33F	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
5084	 341	ADD		 	 
- stack 0: 0x728
5085	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
5086	 343	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x34800020362FFE40101F0010114FF0001330012014D018C02F0000001A20F0F
5087	 344	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x34800020362FFE40101F0010114FF0001330012014D018C02F0000001A20F0F
- stack 0: 0xF0
5088	 346	SHR		 	 
- stack 1: 0x728
- stack 0: 0x348
5089	 347	JUMP		 	 
- stack 0: 0x728
5090	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x728
5091	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x728
- stack 0: 0x728
5092	 34A	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x34800020362FFE40101F0010114FF0001330012014D018C02F0000001A20F0F
5093	 34B	PUSH1	E0	 	 
- stack 2: 0x728
- stack 1: 0x34800020362FFE40101F0010114FF0001330012014D018C02F0000001A20F0F
- stack 0: 0xE0
5094	 34D	SHR		 	 
- stack 1: 0x728
- stack 0: 0x3480002
5095	 34E	PUSH2	FFFF	 	 
- stack 2: 0x728
- stack 1: 0x3480002
- stack 0: 0xFFFF
5096	 351	AND		 	 
- stack 1: 0x728
- stack 0: 0x2
5097	 352	PUSH1	01	 	 
- stack 2: 0x728
- stack 1: 0x2
- stack 0: 0x1
5098	 354	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0x2
5099	 355	PUSH2	00A0	 	 
- stack 2: 0x728
- stack 1: 0x2
- stack 0: 0xA0
5100	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x728
5101	 359	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
5102	 35B	ADD		 	 
- stack 0: 0x72C
5103	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
5104	 35D	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x362FFE40101F0010114FF0001330012014D018C02F0000001A20F0F00CB00F0
5105	 35E	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x362FFE40101F0010114FF0001330012014D018C02F0000001A20F0F00CB00F0
- stack 0: 0xF0
5106	 360	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x362
5107	 361	JUMP		 	 
- stack 0: 0x72C
5108	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x72C
5109	 363	PUSH2	0080	 	 
- stack 1: 0x72C
- stack 0: 0x80
5110	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x72C
- stack 0: 0x1
5111	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5112	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x72C
- stack 0: 0x1
5113	 36D	PUSH2	00A0	 	 
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0xA0
5114	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x2
5115	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x72C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5116	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x2
5117	 377	SUB		 	 
- stack 1: 0x72C
- stack 0: 0x1
5118	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x380
5119	 37B	JUMPI		 	 
- stack 0: 0x72C
5120	 380	JUMPDEST		 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x72C
5121	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
5122	 382	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x362FFE40101F0010114FF0001330012014D018C02F0000001A20F0F00CB00F0
5123	 383	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0x362FFE40101F0010114FF0001330012014D018C02F0000001A20F0F00CB00F0
- stack 0: 0xE0
5124	 385	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x362FFE4
5125	 386	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0x362FFE4
- stack 0: 0xFFFF
5126	 389	AND		 	 
- stack 1: 0x72C
- stack 0: 0xFFE4
5127	 38A	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0xFFE4
- stack 0: 0x1
5128	 38C	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
5129	 38D	ADD		 	 
- stack 0: 0x710
5130	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x710
- stack 0: 0xFFFFFFFF
5131	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x710
5132	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
5133	 395	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0xB8F0F100CBFF0F0086F0100099FF0000EA000003290001034800020362FFE4
5134	 396	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0xB8F0F100CBFF0F0086F0100099FF0000EA000003290001034800020362FFE4
- stack 0: 0xF0
5135	 398	SHR		 	 
- stack 1: 0x710
- stack 0: 0xB8
5136	 399	JUMP		 	 
- stack 0: 0x710
5137	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x710
5138	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x710
- stack 0: 0xF0F1000
5139	 BE	PUSH2	0040	 	 
- stack 2: 0x710
- stack 1: 0xF0F1000
- stack 0: 0x40
5140	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x710
5141	 C2	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
5142	 C4	ADD		 	 
- stack 0: 0x714
5143	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
5144	 C6	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F001
5145	 C7	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F001
- stack 0: 0xF0
5146	 C9	SHR		 	 
- stack 1: 0x714
- stack 0: 0xCB
5147	 CA	JUMP		 	 
- stack 0: 0x714
5148	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x714
5149	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
5150	 CD	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F001
5151	 CE	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F001
- stack 0: 0xE0
5152	 D0	SHR		 	 
- stack 1: 0x714
- stack 0: 0xCBFF0F
5153	 D1	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
5154	 D4	AND		 	 
- stack 1: 0x714
- stack 0: 0xFF0F
5155	 D5	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0xFF0F
- stack 0: 0x1
5156	 D7	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
5157	 D8	PUSH2	0040	 	 
- stack 2: 0x714
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
5158	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x714
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
5159	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x714
- stack 0: 0xF0F0F0F
5160	 DD	PUSH2	0040	 	 
- stack 2: 0x714
- stack 1: 0xF0F0F0F
- stack 0: 0x40
5161	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x714
5162	 E1	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
5163	 E3	ADD		 	 
- stack 0: 0x718
5164	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
5165	 E5	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x86F0100099FF0000EA000003290001034800020362FFE40101F0010114FF00
5166	 E6	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x86F0100099FF0000EA000003290001034800020362FFE40101F0010114FF00
- stack 0: 0xF0
5167	 E8	SHR		 	 
- stack 1: 0x718
- stack 0: 0x86
5168	 E9	JUMP		 	 
- stack 0: 0x718
5169	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x718
5170	 87	PUSH4	ff010000	 	 
- stack 1: 0x718
- stack 0: 0xFF010000
5171	 8C	PUSH2	0020	 	 
- stack 2: 0x718
- stack 1: 0xFF010000
- stack 0: 0x20
5172	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x718
5173	 90	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
5174	 92	ADD		 	 
- stack 0: 0x71C
5175	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
5176	 94	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x99FF0000EA000003290001034800020362FFE40101F0010114FF0001330012
5177	 95	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x99FF0000EA000003290001034800020362FFE40101F0010114FF0001330012
- stack 0: 0xF0
5178	 97	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x99
5179	 98	JUMP		 	 
- stack 0: 0x71C
5180	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x71C
5181	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
5182	 9B	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x99FF0000EA000003290001034800020362FFE40101F0010114FF0001330012
5183	 9C	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x99FF0000EA000003290001034800020362FFE40101F0010114FF0001330012
- stack 0: 0xE0
5184	 9E	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x99FF00
5185	 9F	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x99FF00
- stack 0: 0xFFFF
5186	 A2	AND		 	 
- stack 1: 0x71C
- stack 0: 0xFF00
5187	 A3	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0xFF00
- stack 0: 0x1
5188	 A5	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
5189	 A6	PUSH2	0020	 	 
- stack 2: 0x71C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
5190	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x71C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
5191	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x71C
- stack 0: 0xFF00FF00
5192	 AB	PUSH2	0020	 	 
- stack 2: 0x71C
- stack 1: 0xFF00FF00
- stack 0: 0x20
5193	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x71C
5194	 AF	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
5195	 B1	ADD		 	 
- stack 0: 0x720
5196	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
5197	 B3	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0xEA000003290001034800020362FFE40101F0010114FF0001330012014D018C
5198	 B4	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0xEA000003290001034800020362FFE40101F0010114FF0001330012014D018C
- stack 0: 0xF0
5199	 B6	SHR		 	 
- stack 1: 0x720
- stack 0: 0xEA
5200	 B7	JUMP		 	 
- stack 0: 0x720
5201	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x720
5202	 EB	PUSH2	0040	 	 
- stack 1: 0x720
- stack 0: 0x40
5203	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x720
- stack 0: 0xF0F0F0F
5204	 EF	PUSH2	0020	 	 
- stack 2: 0x720
- stack 1: 0xF0F0F0F
- stack 0: 0x20
5205	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x720
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
5206	 F3	AND		 	  ;; # AND
- stack 1: 0x720
- stack 0: 0xF000F00
5207	 F4	PUSH2	0060	 	 
- stack 2: 0x720
- stack 1: 0xF000F00
- stack 0: 0x60
5208	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x720
5209	 F8	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
5210	 FA	ADD		 	 
- stack 0: 0x724
5211	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
5212	 FC	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x3290001034800020362FFE40101F0010114FF0001330012014D018C02F00000
5213	 FD	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x3290001034800020362FFE40101F0010114FF0001330012014D018C02F00000
- stack 0: 0xF0
5214	 FF	SHR		 	 
- stack 1: 0x724
- stack 0: 0x329
5215	 100	JUMP		 	 
- stack 0: 0x724
5216	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x724
5217	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
5218	 32B	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x3290001034800020362FFE40101F0010114FF0001330012014D018C02F00000
5219	 32C	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0x3290001034800020362FFE40101F0010114FF0001330012014D018C02F00000
- stack 0: 0xE0
5220	 32E	SHR		 	 
- stack 1: 0x724
- stack 0: 0x3290001
5221	 32F	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0x3290001
- stack 0: 0xFFFF
5222	 332	AND		 	 
- stack 1: 0x724
- stack 0: 0x1
5223	 333	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x1
5224	 335	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x1
5225	 336	PUSH2	0080	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x80
5226	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x1
5227	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x724
- stack 0: 0x2
5228	 33B	PUSH2	0080	 	 
- stack 2: 0x724
- stack 1: 0x2
- stack 0: 0x80
5229	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x724
5230	 33F	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
5231	 341	ADD		 	 
- stack 0: 0x728
5232	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
5233	 343	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x34800020362FFE40101F0010114FF0001330012014D018C02F0000001A20F0F
5234	 344	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x34800020362FFE40101F0010114FF0001330012014D018C02F0000001A20F0F
- stack 0: 0xF0
5235	 346	SHR		 	 
- stack 1: 0x728
- stack 0: 0x348
5236	 347	JUMP		 	 
- stack 0: 0x728
5237	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x728
5238	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x728
- stack 0: 0x728
5239	 34A	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x34800020362FFE40101F0010114FF0001330012014D018C02F0000001A20F0F
5240	 34B	PUSH1	E0	 	 
- stack 2: 0x728
- stack 1: 0x34800020362FFE40101F0010114FF0001330012014D018C02F0000001A20F0F
- stack 0: 0xE0
5241	 34D	SHR		 	 
- stack 1: 0x728
- stack 0: 0x3480002
5242	 34E	PUSH2	FFFF	 	 
- stack 2: 0x728
- stack 1: 0x3480002
- stack 0: 0xFFFF
5243	 351	AND		 	 
- stack 1: 0x728
- stack 0: 0x2
5244	 352	PUSH1	01	 	 
- stack 2: 0x728
- stack 1: 0x2
- stack 0: 0x1
5245	 354	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0x2
5246	 355	PUSH2	00A0	 	 
- stack 2: 0x728
- stack 1: 0x2
- stack 0: 0xA0
5247	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x728
5248	 359	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
5249	 35B	ADD		 	 
- stack 0: 0x72C
5250	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
5251	 35D	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x362FFE40101F0010114FF0001330012014D018C02F0000001A20F0F00CB00F0
5252	 35E	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x362FFE40101F0010114FF0001330012014D018C02F0000001A20F0F00CB00F0
- stack 0: 0xF0
5253	 360	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x362
5254	 361	JUMP		 	 
- stack 0: 0x72C
5255	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x72C
5256	 363	PUSH2	0080	 	 
- stack 1: 0x72C
- stack 0: 0x80
5257	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x72C
- stack 0: 0x2
5258	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5259	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x72C
- stack 0: 0x2
5260	 36D	PUSH2	00A0	 	 
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0xA0
5261	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0x2
5262	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x72C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5263	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0x2
5264	 377	SUB		 	 
- stack 1: 0x72C
- stack 0: 0x0
5265	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x72C
- stack 1: 0x0
- stack 0: 0x380
5266	 37B	JUMPI		 	 
- stack 0: 0x72C
5267	 37C	PUSH2	039A	 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 1: 0x72C
- stack 0: 0x39A
5268	 37F	JUMP		 	 
- stack 0: 0x72C
5269	 39A	JUMPDEST		 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x72C
5270	 39B	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
5271	 39D	ADD		 	 
- stack 0: 0x730
5272	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
5273	 39F	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x101F0010114FF0001330012014D018C02F0000001A20F0F00CB00F0018FFF01
5274	 3A0	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x101F0010114FF0001330012014D018C02F0000001A20F0F00CB00F0018FFF01
- stack 0: 0xF0
5275	 3A2	SHR		 	 
- stack 1: 0x730
- stack 0: 0x101
5276	 3A3	JUMP		 	 
- stack 0: 0x730
5277	 101	JUMPDEST		 ;; __riscvimpl_LUI_f001eb7	  ;; # instr: lui t4,0xf001(ignore imm)
- stack 0: 0x730
5278	 102	PUSH4	0f001000	 	 
- stack 1: 0x730
- stack 0: 0xF001000
5279	 107	PUSH2	03A0	 	 
- stack 2: 0x730
- stack 1: 0xF001000
- stack 0: 0x3A0
5280	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x730
5281	 10B	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
5282	 10D	ADD		 	 
- stack 0: 0x734
5283	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
5284	 10F	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x114FF0001330012014D018C02F0000001A20F0F00CB00F0018FFF010099FFF0
5285	 110	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0x114FF0001330012014D018C02F0000001A20F0F00CB00F0018FFF010099FFF0
- stack 0: 0xF0
5286	 112	SHR		 	 
- stack 1: 0x734
- stack 0: 0x114
5287	 113	JUMP		 	 
- stack 0: 0x734
5288	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x734
5289	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x734
- stack 0: 0x734
5290	 116	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x114FF0001330012014D018C02F0000001A20F0F00CB00F0018FFF010099FFF0
5291	 117	PUSH1	E0	 	 
- stack 2: 0x734
- stack 1: 0x114FF0001330012014D018C02F0000001A20F0F00CB00F0018FFF010099FFF0
- stack 0: 0xE0
5292	 119	SHR		 	 
- stack 1: 0x734
- stack 0: 0x114FF00
5293	 11A	PUSH2	FFFF	 	 
- stack 2: 0x734
- stack 1: 0x114FF00
- stack 0: 0xFFFF
5294	 11D	AND		 	 
- stack 1: 0x734
- stack 0: 0xFF00
5295	 11E	PUSH1	01	 	 
- stack 2: 0x734
- stack 1: 0xFF00
- stack 0: 0x1
5296	 120	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
5297	 121	PUSH2	03A0	 	 
- stack 2: 0x734
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
5298	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x734
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xF001000
5299	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x734
- stack 0: 0xF000F00
5300	 126	PUSH2	03A0	 	 
- stack 2: 0x734
- stack 1: 0xF000F00
- stack 0: 0x3A0
5301	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x734
5302	 12A	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
5303	 12C	ADD		 	 
- stack 0: 0x738
5304	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
5305	 12E	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x1330012014D018C02F0000001A20F0F00CB00F0018FFF010099FFF003E60000
5306	 12F	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x1330012014D018C02F0000001A20F0F00CB00F0018FFF010099FFF003E60000
- stack 0: 0xF0
5307	 131	SHR		 	 
- stack 1: 0x738
- stack 0: 0x133
5308	 132	JUMP		 	 
- stack 0: 0x738
5309	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x738
5310	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x738
- stack 0: 0x738
5311	 135	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x1330012014D018C02F0000001A20F0F00CB00F0018FFF010099FFF003E60000
5312	 136	PUSH1	E0	 	 
- stack 2: 0x738
- stack 1: 0x1330012014D018C02F0000001A20F0F00CB00F0018FFF010099FFF003E60000
- stack 0: 0xE0
5313	 138	SHR		 	 
- stack 1: 0x738
- stack 0: 0x1330012
5314	 139	PUSH2	FFFF	 	 
- stack 2: 0x738
- stack 1: 0x1330012
- stack 0: 0xFFFF
5315	 13C	AND		 	 
- stack 1: 0x738
- stack 0: 0x12
5316	 13D	PUSH1	01	 	 
- stack 2: 0x738
- stack 1: 0x12
- stack 0: 0x1
5317	 13F	SIGNEXTEND		 	 
- stack 1: 0x738
- stack 0: 0x12
5318	 140	PUSH2	0380	 	 
- stack 2: 0x738
- stack 1: 0x12
- stack 0: 0x380
5319	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x738
5320	 144	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
5321	 146	ADD		 	 
- stack 0: 0x73C
5322	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
5323	 148	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x14D018C02F0000001A20F0F00CB00F0018FFF010099FFF003E6000000EA0000
5324	 149	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x14D018C02F0000001A20F0F00CB00F0018FFF010099FFF003E6000000EA0000
- stack 0: 0xF0
5325	 14B	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x14D
5326	 14C	JUMP		 	 
- stack 0: 0x73C
5327	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x73C
5328	 14E	PUSH2	0060	 	 
- stack 1: 0x73C
- stack 0: 0x60
5329	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x73C
- stack 0: 0xF000F00
5330	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x73C
- stack 1: 0xF000F00
- stack 0: 0xFFFFFFFF
5331	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x73C
- stack 0: 0xF000F00
5332	 158	PUSH2	03A0	 	 
- stack 2: 0x73C
- stack 1: 0xF000F00
- stack 0: 0x3A0
5333	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x73C
- stack 1: 0xF000F00
- stack 0: 0xF000F00
5334	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x73C
- stack 2: 0xF000F00
- stack 1: 0xF000F00
- stack 0: 0xFFFFFFFF
5335	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x73C
- stack 1: 0xF000F00
- stack 0: 0xF000F00
5336	 162	SUB		 	 
- stack 1: 0x73C
- stack 0: 0x0
5337	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x73C
- stack 1: 0x0
- stack 0: 0x16B
5338	 166	JUMPI		 	 
- stack 0: 0x73C
5339	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x73C
- stack 0: 0x185
5340	 16A	JUMP		 	 
- stack 0: 0x73C
5341	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x73C
5342	 186	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
5343	 188	ADD		 	 
- stack 0: 0x740
5344	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
5345	 18A	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x2F0000001A20F0F00CB00F0018FFF010099FFF003E6000000EA000003290001
5346	 18B	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0x2F0000001A20F0F00CB00F0018FFF010099FFF003E6000000EA000003290001
- stack 0: 0xF0
5347	 18D	SHR		 	 
- stack 1: 0x740
- stack 0: 0x2F0
5348	 18E	JUMP		 	 
- stack 0: 0x740
5349	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x740
5350	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x740
- stack 0: 0x740
5351	 2F2	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x2F0000001A20F0F00CB00F0018FFF010099FFF003E6000000EA000003290001
5352	 2F3	PUSH1	E0	 	 
- stack 2: 0x740
- stack 1: 0x2F0000001A20F0F00CB00F0018FFF010099FFF003E6000000EA000003290001
- stack 0: 0xE0
5353	 2F5	SHR		 	 
- stack 1: 0x740
- stack 0: 0x2F00000
5354	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x740
- stack 1: 0x2F00000
- stack 0: 0xFFFF
5355	 2F9	AND		 	 
- stack 1: 0x740
- stack 0: 0x0
5356	 2FA	PUSH1	01	 	 
- stack 2: 0x740
- stack 1: 0x0
- stack 0: 0x1
5357	 2FC	SIGNEXTEND		 	 
- stack 1: 0x740
- stack 0: 0x0
5358	 2FD	PUSH2	0080	 	 
- stack 2: 0x740
- stack 1: 0x0
- stack 0: 0x80
5359	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x740
5360	 301	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
5361	 303	ADD		 	 
- stack 0: 0x744
5362	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
5363	 305	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x1A20F0F00CB00F0018FFF010099FFF003E6000000EA00000329000103480002
5364	 306	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x1A20F0F00CB00F0018FFF010099FFF003E6000000EA00000329000103480002
- stack 0: 0xF0
5365	 308	SHR		 	 
- stack 1: 0x744
- stack 0: 0x1A2
5366	 309	JUMP		 	 
- stack 0: 0x744
5367	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x744
5368	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x744
- stack 0: 0xF0F0F000
5369	 1A8	PUSH2	0040	 	 
- stack 2: 0x744
- stack 1: 0xF0F0F000
- stack 0: 0x40
5370	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x744
5371	 1AC	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
5372	 1AE	ADD		 	 
- stack 0: 0x748
5373	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
5374	 1B0	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
5375	 1B1	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
- stack 0: 0xF0
5376	 1B3	SHR		 	 
- stack 1: 0x748
- stack 0: 0xCB
5377	 1B4	JUMP		 	 
- stack 0: 0x748
5378	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x748
5379	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
5380	 CD	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
5381	 CE	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
- stack 0: 0xE0
5382	 D0	SHR		 	 
- stack 1: 0x748
- stack 0: 0xCB00F0
5383	 D1	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
5384	 D4	AND		 	 
- stack 1: 0x748
- stack 0: 0xF0
5385	 D5	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0xF0
- stack 0: 0x1
5386	 D7	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0xF0
5387	 D8	PUSH2	0040	 	 
- stack 2: 0x748
- stack 1: 0xF0
- stack 0: 0x40
5388	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x748
- stack 1: 0xF0
- stack 0: 0xF0F0F000
5389	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x748
- stack 0: 0xF0F0F0F0
5390	 DD	PUSH2	0040	 	 
- stack 2: 0x748
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
5391	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x748
5392	 E1	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
5393	 E3	ADD		 	 
- stack 0: 0x74C
5394	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
5395	 E5	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFE001B50F00
5396	 E6	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFE001B50F00
- stack 0: 0xF0
5397	 E8	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x18F
5398	 E9	JUMP		 	 
- stack 0: 0x74C
5399	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x74C
5400	 190	PUSH4	0ff01000	 	 
- stack 1: 0x74C
- stack 0: 0xFF01000
5401	 195	PUSH2	0020	 	 
- stack 2: 0x74C
- stack 1: 0xFF01000
- stack 0: 0x20
5402	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x74C
5403	 199	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
5404	 19B	ADD		 	 
- stack 0: 0x750
5405	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
5406	 19D	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFE001B50F00011400F0
5407	 19E	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFE001B50F00011400F0
- stack 0: 0xF0
5408	 1A0	SHR		 	 
- stack 1: 0x750
- stack 0: 0x99
5409	 1A1	JUMP		 	 
- stack 0: 0x750
5410	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x750
5411	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x750
- stack 0: 0x750
5412	 9B	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFE001B50F00011400F0
5413	 9C	PUSH1	E0	 	 
- stack 2: 0x750
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFE001B50F00011400F0
- stack 0: 0xE0
5414	 9E	SHR		 	 
- stack 1: 0x750
- stack 0: 0x99FFF0
5415	 9F	PUSH2	FFFF	 	 
- stack 2: 0x750
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
5416	 A2	AND		 	 
- stack 1: 0x750
- stack 0: 0xFFF0
5417	 A3	PUSH1	01	 	 
- stack 2: 0x750
- stack 1: 0xFFF0
- stack 0: 0x1
5418	 A5	SIGNEXTEND		 	 
- stack 1: 0x750
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
5419	 A6	PUSH2	0020	 	 
- stack 2: 0x750
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
5420	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x750
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
5421	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x750
- stack 0: 0xFF00FF0
5422	 AB	PUSH2	0020	 	 
- stack 2: 0x750
- stack 1: 0xFF00FF0
- stack 0: 0x20
5423	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x750
5424	 AF	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
5425	 B1	ADD		 	 
- stack 0: 0x754
5426	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
5427	 B3	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F001330013
5428	 B4	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F001330013
- stack 0: 0xF0
5429	 B6	SHR		 	 
- stack 1: 0x754
- stack 0: 0x3E6
5430	 B7	JUMP		 	 
- stack 0: 0x754
5431	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x754
5432	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
5433	 3E8	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F001330013
5434	 3E9	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F001330013
- stack 0: 0xE0
5435	 3EB	SHR		 	 
- stack 1: 0x754
- stack 0: 0x3E60000
5436	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0x3E60000
- stack 0: 0xFFFF
5437	 3EF	AND		 	 
- stack 1: 0x754
- stack 0: 0x0
5438	 3F0	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0x0
- stack 0: 0x1
5439	 3F2	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0x0
5440	 3F3	POP		 	 
- stack 0: 0x754
5441	 3F4	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
5442	 3F6	ADD		 	 
- stack 0: 0x758
5443	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
5444	 3F8	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0xEA000003290001034800020362FFE001B50F00011400F001330013014D0154
5445	 3F9	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0xEA000003290001034800020362FFE001B50F00011400F001330013014D0154
- stack 0: 0xF0
5446	 3FB	SHR		 	 
- stack 1: 0x758
- stack 0: 0xEA
5447	 3FC	JUMP		 	 
- stack 0: 0x758
5448	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x758
5449	 EB	PUSH2	0040	 	 
- stack 1: 0x758
- stack 0: 0x40
5450	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x758
- stack 0: 0xF0F0F0F0
5451	 EF	PUSH2	0020	 	 
- stack 2: 0x758
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
5452	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x758
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
5453	 F3	AND		 	  ;; # AND
- stack 1: 0x758
- stack 0: 0xF000F0
5454	 F4	PUSH2	0060	 	 
- stack 2: 0x758
- stack 1: 0xF000F0
- stack 0: 0x60
5455	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x758
5456	 F8	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
5457	 FA	ADD		 	 
- stack 0: 0x75C
5458	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
5459	 FC	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x3290001034800020362FFE001B50F00011400F001330013014D015402F00000
5460	 FD	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x3290001034800020362FFE001B50F00011400F001330013014D015402F00000
- stack 0: 0xF0
5461	 FF	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x329
5462	 100	JUMP		 	 
- stack 0: 0x75C
5463	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x75C
5464	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
5465	 32B	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x3290001034800020362FFE001B50F00011400F001330013014D015402F00000
5466	 32C	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x3290001034800020362FFE001B50F00011400F001330013014D015402F00000
- stack 0: 0xE0
5467	 32E	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x3290001
5468	 32F	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x3290001
- stack 0: 0xFFFF
5469	 332	AND		 	 
- stack 1: 0x75C
- stack 0: 0x1
5470	 333	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x1
5471	 335	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x1
5472	 336	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x80
5473	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x0
5474	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x75C
- stack 0: 0x1
5475	 33B	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x80
5476	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x75C
5477	 33F	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
5478	 341	ADD		 	 
- stack 0: 0x760
5479	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
5480	 343	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x34800020362FFE001B50F00011400F001330013014D015402F0000000B8F0F1
5481	 344	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x34800020362FFE001B50F00011400F001330013014D015402F0000000B8F0F1
- stack 0: 0xF0
5482	 346	SHR		 	 
- stack 1: 0x760
- stack 0: 0x348
5483	 347	JUMP		 	 
- stack 0: 0x760
5484	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x760
5485	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
5486	 34A	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x34800020362FFE001B50F00011400F001330013014D015402F0000000B8F0F1
5487	 34B	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0x34800020362FFE001B50F00011400F001330013014D015402F0000000B8F0F1
- stack 0: 0xE0
5488	 34D	SHR		 	 
- stack 1: 0x760
- stack 0: 0x3480002
5489	 34E	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0x3480002
- stack 0: 0xFFFF
5490	 351	AND		 	 
- stack 1: 0x760
- stack 0: 0x2
5491	 352	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x2
- stack 0: 0x1
5492	 354	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x2
5493	 355	PUSH2	00A0	 	 
- stack 2: 0x760
- stack 1: 0x2
- stack 0: 0xA0
5494	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x760
5495	 359	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
5496	 35B	ADD		 	 
- stack 0: 0x764
5497	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
5498	 35D	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x362FFE001B50F00011400F001330013014D015402F0000000B8F0F100CBFF0F
5499	 35E	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x362FFE001B50F00011400F001330013014D015402F0000000B8F0F100CBFF0F
- stack 0: 0xF0
5500	 360	SHR		 	 
- stack 1: 0x764
- stack 0: 0x362
5501	 361	JUMP		 	 
- stack 0: 0x764
5502	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x764
5503	 363	PUSH2	0080	 	 
- stack 1: 0x764
- stack 0: 0x80
5504	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x764
- stack 0: 0x1
5505	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x764
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5506	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x764
- stack 0: 0x1
5507	 36D	PUSH2	00A0	 	 
- stack 2: 0x764
- stack 1: 0x1
- stack 0: 0xA0
5508	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x764
- stack 1: 0x1
- stack 0: 0x2
5509	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x764
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5510	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x764
- stack 1: 0x1
- stack 0: 0x2
5511	 377	SUB		 	 
- stack 1: 0x764
- stack 0: 0x1
5512	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x764
- stack 1: 0x1
- stack 0: 0x380
5513	 37B	JUMPI		 	 
- stack 0: 0x764
5514	 380	JUMPDEST		 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x764
5515	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
5516	 382	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x362FFE001B50F00011400F001330013014D015402F0000000B8F0F100CBFF0F
5517	 383	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0x362FFE001B50F00011400F001330013014D015402F0000000B8F0F100CBFF0F
- stack 0: 0xE0
5518	 385	SHR		 	 
- stack 1: 0x764
- stack 0: 0x362FFE0
5519	 386	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0x362FFE0
- stack 0: 0xFFFF
5520	 389	AND		 	 
- stack 1: 0x764
- stack 0: 0xFFE0
5521	 38A	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0xFFE0
- stack 0: 0x1
5522	 38C	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
5523	 38D	ADD		 	 
- stack 0: 0x744
5524	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x744
- stack 0: 0xFFFFFFFF
5525	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x744
5526	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
5527	 395	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x1A20F0F00CB00F0018FFF010099FFF003E6000000EA00000329000103480002
5528	 396	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x1A20F0F00CB00F0018FFF010099FFF003E6000000EA00000329000103480002
- stack 0: 0xF0
5529	 398	SHR		 	 
- stack 1: 0x744
- stack 0: 0x1A2
5530	 399	JUMP		 	 
- stack 0: 0x744
5531	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x744
5532	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x744
- stack 0: 0xF0F0F000
5533	 1A8	PUSH2	0040	 	 
- stack 2: 0x744
- stack 1: 0xF0F0F000
- stack 0: 0x40
5534	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x744
5535	 1AC	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
5536	 1AE	ADD		 	 
- stack 0: 0x748
5537	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
5538	 1B0	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
5539	 1B1	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
- stack 0: 0xF0
5540	 1B3	SHR		 	 
- stack 1: 0x748
- stack 0: 0xCB
5541	 1B4	JUMP		 	 
- stack 0: 0x748
5542	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x748
5543	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
5544	 CD	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
5545	 CE	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
- stack 0: 0xE0
5546	 D0	SHR		 	 
- stack 1: 0x748
- stack 0: 0xCB00F0
5547	 D1	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
5548	 D4	AND		 	 
- stack 1: 0x748
- stack 0: 0xF0
5549	 D5	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0xF0
- stack 0: 0x1
5550	 D7	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0xF0
5551	 D8	PUSH2	0040	 	 
- stack 2: 0x748
- stack 1: 0xF0
- stack 0: 0x40
5552	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x748
- stack 1: 0xF0
- stack 0: 0xF0F0F000
5553	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x748
- stack 0: 0xF0F0F0F0
5554	 DD	PUSH2	0040	 	 
- stack 2: 0x748
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
5555	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x748
5556	 E1	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
5557	 E3	ADD		 	 
- stack 0: 0x74C
5558	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
5559	 E5	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFE001B50F00
5560	 E6	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFE001B50F00
- stack 0: 0xF0
5561	 E8	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x18F
5562	 E9	JUMP		 	 
- stack 0: 0x74C
5563	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x74C
5564	 190	PUSH4	0ff01000	 	 
- stack 1: 0x74C
- stack 0: 0xFF01000
5565	 195	PUSH2	0020	 	 
- stack 2: 0x74C
- stack 1: 0xFF01000
- stack 0: 0x20
5566	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x74C
5567	 199	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
5568	 19B	ADD		 	 
- stack 0: 0x750
5569	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
5570	 19D	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFE001B50F00011400F0
5571	 19E	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFE001B50F00011400F0
- stack 0: 0xF0
5572	 1A0	SHR		 	 
- stack 1: 0x750
- stack 0: 0x99
5573	 1A1	JUMP		 	 
- stack 0: 0x750
5574	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x750
5575	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x750
- stack 0: 0x750
5576	 9B	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFE001B50F00011400F0
5577	 9C	PUSH1	E0	 	 
- stack 2: 0x750
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFE001B50F00011400F0
- stack 0: 0xE0
5578	 9E	SHR		 	 
- stack 1: 0x750
- stack 0: 0x99FFF0
5579	 9F	PUSH2	FFFF	 	 
- stack 2: 0x750
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
5580	 A2	AND		 	 
- stack 1: 0x750
- stack 0: 0xFFF0
5581	 A3	PUSH1	01	 	 
- stack 2: 0x750
- stack 1: 0xFFF0
- stack 0: 0x1
5582	 A5	SIGNEXTEND		 	 
- stack 1: 0x750
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
5583	 A6	PUSH2	0020	 	 
- stack 2: 0x750
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
5584	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x750
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
5585	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x750
- stack 0: 0xFF00FF0
5586	 AB	PUSH2	0020	 	 
- stack 2: 0x750
- stack 1: 0xFF00FF0
- stack 0: 0x20
5587	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x750
5588	 AF	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
5589	 B1	ADD		 	 
- stack 0: 0x754
5590	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
5591	 B3	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F001330013
5592	 B4	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F001330013
- stack 0: 0xF0
5593	 B6	SHR		 	 
- stack 1: 0x754
- stack 0: 0x3E6
5594	 B7	JUMP		 	 
- stack 0: 0x754
5595	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x754
5596	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
5597	 3E8	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F001330013
5598	 3E9	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B50F00011400F001330013
- stack 0: 0xE0
5599	 3EB	SHR		 	 
- stack 1: 0x754
- stack 0: 0x3E60000
5600	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0x3E60000
- stack 0: 0xFFFF
5601	 3EF	AND		 	 
- stack 1: 0x754
- stack 0: 0x0
5602	 3F0	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0x0
- stack 0: 0x1
5603	 3F2	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0x0
5604	 3F3	POP		 	 
- stack 0: 0x754
5605	 3F4	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
5606	 3F6	ADD		 	 
- stack 0: 0x758
5607	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
5608	 3F8	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0xEA000003290001034800020362FFE001B50F00011400F001330013014D0154
5609	 3F9	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0xEA000003290001034800020362FFE001B50F00011400F001330013014D0154
- stack 0: 0xF0
5610	 3FB	SHR		 	 
- stack 1: 0x758
- stack 0: 0xEA
5611	 3FC	JUMP		 	 
- stack 0: 0x758
5612	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x758
5613	 EB	PUSH2	0040	 	 
- stack 1: 0x758
- stack 0: 0x40
5614	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x758
- stack 0: 0xF0F0F0F0
5615	 EF	PUSH2	0020	 	 
- stack 2: 0x758
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
5616	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x758
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
5617	 F3	AND		 	  ;; # AND
- stack 1: 0x758
- stack 0: 0xF000F0
5618	 F4	PUSH2	0060	 	 
- stack 2: 0x758
- stack 1: 0xF000F0
- stack 0: 0x60
5619	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x758
5620	 F8	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
5621	 FA	ADD		 	 
- stack 0: 0x75C
5622	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
5623	 FC	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x3290001034800020362FFE001B50F00011400F001330013014D015402F00000
5624	 FD	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x3290001034800020362FFE001B50F00011400F001330013014D015402F00000
- stack 0: 0xF0
5625	 FF	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x329
5626	 100	JUMP		 	 
- stack 0: 0x75C
5627	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x75C
5628	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
5629	 32B	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x3290001034800020362FFE001B50F00011400F001330013014D015402F00000
5630	 32C	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x3290001034800020362FFE001B50F00011400F001330013014D015402F00000
- stack 0: 0xE0
5631	 32E	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x3290001
5632	 32F	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x3290001
- stack 0: 0xFFFF
5633	 332	AND		 	 
- stack 1: 0x75C
- stack 0: 0x1
5634	 333	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x1
5635	 335	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x1
5636	 336	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x80
5637	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x1
5638	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x75C
- stack 0: 0x2
5639	 33B	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x2
- stack 0: 0x80
5640	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x75C
5641	 33F	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
5642	 341	ADD		 	 
- stack 0: 0x760
5643	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
5644	 343	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x34800020362FFE001B50F00011400F001330013014D015402F0000000B8F0F1
5645	 344	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x34800020362FFE001B50F00011400F001330013014D015402F0000000B8F0F1
- stack 0: 0xF0
5646	 346	SHR		 	 
- stack 1: 0x760
- stack 0: 0x348
5647	 347	JUMP		 	 
- stack 0: 0x760
5648	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x760
5649	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
5650	 34A	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x34800020362FFE001B50F00011400F001330013014D015402F0000000B8F0F1
5651	 34B	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0x34800020362FFE001B50F00011400F001330013014D015402F0000000B8F0F1
- stack 0: 0xE0
5652	 34D	SHR		 	 
- stack 1: 0x760
- stack 0: 0x3480002
5653	 34E	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0x3480002
- stack 0: 0xFFFF
5654	 351	AND		 	 
- stack 1: 0x760
- stack 0: 0x2
5655	 352	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x2
- stack 0: 0x1
5656	 354	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x2
5657	 355	PUSH2	00A0	 	 
- stack 2: 0x760
- stack 1: 0x2
- stack 0: 0xA0
5658	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x760
5659	 359	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
5660	 35B	ADD		 	 
- stack 0: 0x764
5661	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
5662	 35D	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x362FFE001B50F00011400F001330013014D015402F0000000B8F0F100CBFF0F
5663	 35E	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x362FFE001B50F00011400F001330013014D015402F0000000B8F0F100CBFF0F
- stack 0: 0xF0
5664	 360	SHR		 	 
- stack 1: 0x764
- stack 0: 0x362
5665	 361	JUMP		 	 
- stack 0: 0x764
5666	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x764
5667	 363	PUSH2	0080	 	 
- stack 1: 0x764
- stack 0: 0x80
5668	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x764
- stack 0: 0x2
5669	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5670	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x764
- stack 0: 0x2
5671	 36D	PUSH2	00A0	 	 
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0xA0
5672	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0x2
5673	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x764
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5674	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0x2
5675	 377	SUB		 	 
- stack 1: 0x764
- stack 0: 0x0
5676	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x764
- stack 1: 0x0
- stack 0: 0x380
5677	 37B	JUMPI		 	 
- stack 0: 0x764
5678	 37C	PUSH2	039A	 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 1: 0x764
- stack 0: 0x39A
5679	 37F	JUMP		 	 
- stack 0: 0x764
5680	 39A	JUMPDEST		 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x764
5681	 39B	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
5682	 39D	ADD		 	 
- stack 0: 0x768
5683	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
5684	 39F	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x1B50F00011400F001330013014D015402F0000000B8F0F100CBFF0F01C80FF0
5685	 3A0	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x1B50F00011400F001330013014D015402F0000000B8F0F100CBFF0F01C80FF0
- stack 0: 0xF0
5686	 3A2	SHR		 	 
- stack 1: 0x768
- stack 0: 0x1B5
5687	 3A3	JUMP		 	 
- stack 0: 0x768
5688	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00eb7	  ;; # instr: lui t4,0xf00(ignore imm)
- stack 0: 0x768
5689	 1B6	PUSH4	00f00000	 	 
- stack 1: 0x768
- stack 0: 0xF00000
5690	 1BB	PUSH2	03A0	 	 
- stack 2: 0x768
- stack 1: 0xF00000
- stack 0: 0x3A0
5691	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x768
5692	 1BF	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
5693	 1C1	ADD		 	 
- stack 0: 0x76C
5694	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
5695	 1C3	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x11400F001330013014D015402F0000000B8F0F100CBFF0F01C80FF0009900FF
5696	 1C4	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0x11400F001330013014D015402F0000000B8F0F100CBFF0F01C80FF0009900FF
- stack 0: 0xF0
5697	 1C6	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x114
5698	 1C7	JUMP		 	 
- stack 0: 0x76C
5699	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x76C
5700	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x76C
- stack 0: 0x76C
5701	 116	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x11400F001330013014D015402F0000000B8F0F100CBFF0F01C80FF0009900FF
5702	 117	PUSH1	E0	 	 
- stack 2: 0x76C
- stack 1: 0x11400F001330013014D015402F0000000B8F0F100CBFF0F01C80FF0009900FF
- stack 0: 0xE0
5703	 119	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x11400F0
5704	 11A	PUSH2	FFFF	 	 
- stack 2: 0x76C
- stack 1: 0x11400F0
- stack 0: 0xFFFF
5705	 11D	AND		 	 
- stack 1: 0x76C
- stack 0: 0xF0
5706	 11E	PUSH1	01	 	 
- stack 2: 0x76C
- stack 1: 0xF0
- stack 0: 0x1
5707	 120	SIGNEXTEND		 	 
- stack 1: 0x76C
- stack 0: 0xF0
5708	 121	PUSH2	03A0	 	 
- stack 2: 0x76C
- stack 1: 0xF0
- stack 0: 0x3A0
5709	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x76C
- stack 1: 0xF0
- stack 0: 0xF00000
5710	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x76C
- stack 0: 0xF000F0
5711	 126	PUSH2	03A0	 	 
- stack 2: 0x76C
- stack 1: 0xF000F0
- stack 0: 0x3A0
5712	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x76C
5713	 12A	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
5714	 12C	ADD		 	 
- stack 0: 0x770
5715	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
5716	 12E	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x1330013014D015402F0000000B8F0F100CBFF0F01C80FF0009900FF03E60000
5717	 12F	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x1330013014D015402F0000000B8F0F100CBFF0F01C80FF0009900FF03E60000
- stack 0: 0xF0
5718	 131	SHR		 	 
- stack 1: 0x770
- stack 0: 0x133
5719	 132	JUMP		 	 
- stack 0: 0x770
5720	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x770
5721	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x770
- stack 0: 0x770
5722	 135	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x1330013014D015402F0000000B8F0F100CBFF0F01C80FF0009900FF03E60000
5723	 136	PUSH1	E0	 	 
- stack 2: 0x770
- stack 1: 0x1330013014D015402F0000000B8F0F100CBFF0F01C80FF0009900FF03E60000
- stack 0: 0xE0
5724	 138	SHR		 	 
- stack 1: 0x770
- stack 0: 0x1330013
5725	 139	PUSH2	FFFF	 	 
- stack 2: 0x770
- stack 1: 0x1330013
- stack 0: 0xFFFF
5726	 13C	AND		 	 
- stack 1: 0x770
- stack 0: 0x13
5727	 13D	PUSH1	01	 	 
- stack 2: 0x770
- stack 1: 0x13
- stack 0: 0x1
5728	 13F	SIGNEXTEND		 	 
- stack 1: 0x770
- stack 0: 0x13
5729	 140	PUSH2	0380	 	 
- stack 2: 0x770
- stack 1: 0x13
- stack 0: 0x380
5730	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x770
5731	 144	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
5732	 146	ADD		 	 
- stack 0: 0x774
5733	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
5734	 148	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x14D015402F0000000B8F0F100CBFF0F01C80FF0009900FF03E6000003E60000
5735	 149	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x14D015402F0000000B8F0F100CBFF0F01C80FF0009900FF03E6000003E60000
- stack 0: 0xF0
5736	 14B	SHR		 	 
- stack 1: 0x774
- stack 0: 0x14D
5737	 14C	JUMP		 	 
- stack 0: 0x774
5738	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x774
5739	 14E	PUSH2	0060	 	 
- stack 1: 0x774
- stack 0: 0x60
5740	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x774
- stack 0: 0xF000F0
5741	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x774
- stack 1: 0xF000F0
- stack 0: 0xFFFFFFFF
5742	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x774
- stack 0: 0xF000F0
5743	 158	PUSH2	03A0	 	 
- stack 2: 0x774
- stack 1: 0xF000F0
- stack 0: 0x3A0
5744	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x774
- stack 1: 0xF000F0
- stack 0: 0xF000F0
5745	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x774
- stack 2: 0xF000F0
- stack 1: 0xF000F0
- stack 0: 0xFFFFFFFF
5746	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x774
- stack 1: 0xF000F0
- stack 0: 0xF000F0
5747	 162	SUB		 	 
- stack 1: 0x774
- stack 0: 0x0
5748	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x774
- stack 1: 0x0
- stack 0: 0x16B
5749	 166	JUMPI		 	 
- stack 0: 0x774
5750	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x774
- stack 0: 0x185
5751	 16A	JUMP		 	 
- stack 0: 0x774
5752	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x774
5753	 186	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
5754	 188	ADD		 	 
- stack 0: 0x778
5755	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
5756	 18A	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x2F0000000B8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA0000
5757	 18B	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x2F0000000B8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA0000
- stack 0: 0xF0
5758	 18D	SHR		 	 
- stack 1: 0x778
- stack 0: 0x2F0
5759	 18E	JUMP		 	 
- stack 0: 0x778
5760	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x778
5761	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x778
- stack 0: 0x778
5762	 2F2	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x2F0000000B8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA0000
5763	 2F3	PUSH1	E0	 	 
- stack 2: 0x778
- stack 1: 0x2F0000000B8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA0000
- stack 0: 0xE0
5764	 2F5	SHR		 	 
- stack 1: 0x778
- stack 0: 0x2F00000
5765	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x778
- stack 1: 0x2F00000
- stack 0: 0xFFFF
5766	 2F9	AND		 	 
- stack 1: 0x778
- stack 0: 0x0
5767	 2FA	PUSH1	01	 	 
- stack 2: 0x778
- stack 1: 0x0
- stack 0: 0x1
5768	 2FC	SIGNEXTEND		 	 
- stack 1: 0x778
- stack 0: 0x0
5769	 2FD	PUSH2	0080	 	 
- stack 2: 0x778
- stack 1: 0x0
- stack 0: 0x80
5770	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x778
5771	 301	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
5772	 303	ADD		 	 
- stack 0: 0x77C
5773	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
5774	 305	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0xB8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA000003290001
5775	 306	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0xB8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA000003290001
- stack 0: 0xF0
5776	 308	SHR		 	 
- stack 1: 0x77C
- stack 0: 0xB8
5777	 309	JUMP		 	 
- stack 0: 0x77C
5778	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x77C
5779	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x77C
- stack 0: 0xF0F1000
5780	 BE	PUSH2	0040	 	 
- stack 2: 0x77C
- stack 1: 0xF0F1000
- stack 0: 0x40
5781	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x77C
5782	 C2	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
5783	 C4	ADD		 	 
- stack 0: 0x780
5784	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
5785	 C6	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
5786	 C7	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
- stack 0: 0xF0
5787	 C9	SHR		 	 
- stack 1: 0x780
- stack 0: 0xCB
5788	 CA	JUMP		 	 
- stack 0: 0x780
5789	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x780
5790	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x780
- stack 0: 0x780
5791	 CD	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
5792	 CE	PUSH1	E0	 	 
- stack 2: 0x780
- stack 1: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
- stack 0: 0xE0
5793	 D0	SHR		 	 
- stack 1: 0x780
- stack 0: 0xCBFF0F
5794	 D1	PUSH2	FFFF	 	 
- stack 2: 0x780
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
5795	 D4	AND		 	 
- stack 1: 0x780
- stack 0: 0xFF0F
5796	 D5	PUSH1	01	 	 
- stack 2: 0x780
- stack 1: 0xFF0F
- stack 0: 0x1
5797	 D7	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
5798	 D8	PUSH2	0040	 	 
- stack 2: 0x780
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
5799	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x780
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
5800	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x780
- stack 0: 0xF0F0F0F
5801	 DD	PUSH2	0040	 	 
- stack 2: 0x780
- stack 1: 0xF0F0F0F
- stack 0: 0x40
5802	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x780
5803	 E1	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
5804	 E3	ADD		 	 
- stack 0: 0x784
5805	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
5806	 E5	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x1C80FF0009900FF03E6000003E6000000EA000003290001034800020362FFDC
5807	 E6	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0x1C80FF0009900FF03E6000003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
5808	 E8	SHR		 	 
- stack 1: 0x784
- stack 0: 0x1C8
5809	 E9	JUMP		 	 
- stack 0: 0x784
5810	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x784
5811	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x784
- stack 0: 0xFF0000
5812	 1CE	PUSH2	0020	 	 
- stack 2: 0x784
- stack 1: 0xFF0000
- stack 0: 0x20
5813	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x784
5814	 1D2	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
5815	 1D4	ADD		 	 
- stack 0: 0x788
5816	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
5817	 1D6	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
5818	 1D7	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xF0
5819	 1D9	SHR		 	 
- stack 1: 0x788
- stack 0: 0x99
5820	 1DA	JUMP		 	 
- stack 0: 0x788
5821	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x788
5822	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x788
- stack 0: 0x788
5823	 9B	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
5824	 9C	PUSH1	E0	 	 
- stack 2: 0x788
- stack 1: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xE0
5825	 9E	SHR		 	 
- stack 1: 0x788
- stack 0: 0x9900FF
5826	 9F	PUSH2	FFFF	 	 
- stack 2: 0x788
- stack 1: 0x9900FF
- stack 0: 0xFFFF
5827	 A2	AND		 	 
- stack 1: 0x788
- stack 0: 0xFF
5828	 A3	PUSH1	01	 	 
- stack 2: 0x788
- stack 1: 0xFF
- stack 0: 0x1
5829	 A5	SIGNEXTEND		 	 
- stack 1: 0x788
- stack 0: 0xFF
5830	 A6	PUSH2	0020	 	 
- stack 2: 0x788
- stack 1: 0xFF
- stack 0: 0x20
5831	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x788
- stack 1: 0xFF
- stack 0: 0xFF0000
5832	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x788
- stack 0: 0xFF00FF
5833	 AB	PUSH2	0020	 	 
- stack 2: 0x788
- stack 1: 0xFF00FF
- stack 0: 0x20
5834	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x788
5835	 AF	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
5836	 B1	ADD		 	 
- stack 0: 0x78C
5837	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
5838	 B3	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
5839	 B4	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
- stack 0: 0xF0
5840	 B6	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x3E6
5841	 B7	JUMP		 	 
- stack 0: 0x78C
5842	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x78C
5843	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
5844	 3E8	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
5845	 3E9	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
- stack 0: 0xE0
5846	 3EB	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x3E60000
5847	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0x3E60000
- stack 0: 0xFFFF
5848	 3EF	AND		 	 
- stack 1: 0x78C
- stack 0: 0x0
5849	 3F0	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0x0
- stack 0: 0x1
5850	 3F2	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0x0
5851	 3F3	POP		 	 
- stack 0: 0x78C
5852	 3F4	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
5853	 3F6	ADD		 	 
- stack 0: 0x790
5854	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
5855	 3F8	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F01330014
5856	 3F9	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F01330014
- stack 0: 0xF0
5857	 3FB	SHR		 	 
- stack 1: 0x790
- stack 0: 0x3E6
5858	 3FC	JUMP		 	 
- stack 0: 0x790
5859	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x790
5860	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
5861	 3E8	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F01330014
5862	 3E9	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F01330014
- stack 0: 0xE0
5863	 3EB	SHR		 	 
- stack 1: 0x790
- stack 0: 0x3E60000
5864	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0x3E60000
- stack 0: 0xFFFF
5865	 3EF	AND		 	 
- stack 1: 0x790
- stack 0: 0x0
5866	 3F0	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0x0
- stack 0: 0x1
5867	 3F2	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0x0
5868	 3F3	POP		 	 
- stack 0: 0x790
5869	 3F4	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
5870	 3F6	ADD		 	 
- stack 0: 0x794
5871	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
5872	 3F8	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0xEA000003290001034800020362FFDC01DB00F00114000F01330014014D0118
5873	 3F9	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0xEA000003290001034800020362FFDC01DB00F00114000F01330014014D0118
- stack 0: 0xF0
5874	 3FB	SHR		 	 
- stack 1: 0x794
- stack 0: 0xEA
5875	 3FC	JUMP		 	 
- stack 0: 0x794
5876	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x794
5877	 EB	PUSH2	0040	 	 
- stack 1: 0x794
- stack 0: 0x40
5878	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x794
- stack 0: 0xF0F0F0F
5879	 EF	PUSH2	0020	 	 
- stack 2: 0x794
- stack 1: 0xF0F0F0F
- stack 0: 0x20
5880	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x794
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
5881	 F3	AND		 	  ;; # AND
- stack 1: 0x794
- stack 0: 0xF000F
5882	 F4	PUSH2	0060	 	 
- stack 2: 0x794
- stack 1: 0xF000F
- stack 0: 0x60
5883	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x794
5884	 F8	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
5885	 FA	ADD		 	 
- stack 0: 0x798
5886	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
5887	 FC	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F01330014014D011802F00000
5888	 FD	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F01330014014D011802F00000
- stack 0: 0xF0
5889	 FF	SHR		 	 
- stack 1: 0x798
- stack 0: 0x329
5890	 100	JUMP		 	 
- stack 0: 0x798
5891	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x798
5892	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x798
- stack 0: 0x798
5893	 32B	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F01330014014D011802F00000
5894	 32C	PUSH1	E0	 	 
- stack 2: 0x798
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F01330014014D011802F00000
- stack 0: 0xE0
5895	 32E	SHR		 	 
- stack 1: 0x798
- stack 0: 0x3290001
5896	 32F	PUSH2	FFFF	 	 
- stack 2: 0x798
- stack 1: 0x3290001
- stack 0: 0xFFFF
5897	 332	AND		 	 
- stack 1: 0x798
- stack 0: 0x1
5898	 333	PUSH1	01	 	 
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x1
5899	 335	SIGNEXTEND		 	 
- stack 1: 0x798
- stack 0: 0x1
5900	 336	PUSH2	0080	 	 
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x80
5901	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x0
5902	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x798
- stack 0: 0x1
5903	 33B	PUSH2	0080	 	 
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x80
5904	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x798
5905	 33F	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
5906	 341	ADD		 	 
- stack 0: 0x79C
5907	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
5908	 343	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x34800020362FFDC01DB00F00114000F01330014014D011802F0000000B8F0F1
5909	 344	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x34800020362FFDC01DB00F00114000F01330014014D011802F0000000B8F0F1
- stack 0: 0xF0
5910	 346	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x348
5911	 347	JUMP		 	 
- stack 0: 0x79C
5912	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x79C
5913	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
5914	 34A	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x34800020362FFDC01DB00F00114000F01330014014D011802F0000000B8F0F1
5915	 34B	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x34800020362FFDC01DB00F00114000F01330014014D011802F0000000B8F0F1
- stack 0: 0xE0
5916	 34D	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x3480002
5917	 34E	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x3480002
- stack 0: 0xFFFF
5918	 351	AND		 	 
- stack 1: 0x79C
- stack 0: 0x2
5919	 352	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0x2
- stack 0: 0x1
5920	 354	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0x2
5921	 355	PUSH2	00A0	 	 
- stack 2: 0x79C
- stack 1: 0x2
- stack 0: 0xA0
5922	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x79C
5923	 359	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
5924	 35B	ADD		 	 
- stack 0: 0x7A0
5925	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
5926	 35D	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x362FFDC01DB00F00114000F01330014014D011802F0000000B8F0F100CBFF0F
5927	 35E	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x362FFDC01DB00F00114000F01330014014D011802F0000000B8F0F100CBFF0F
- stack 0: 0xF0
5928	 360	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x362
5929	 361	JUMP		 	 
- stack 0: 0x7A0
5930	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x7A0
5931	 363	PUSH2	0080	 	 
- stack 1: 0x7A0
- stack 0: 0x80
5932	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x7A0
- stack 0: 0x1
5933	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5934	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A0
- stack 0: 0x1
5935	 36D	PUSH2	00A0	 	 
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0xA0
5936	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0x2
5937	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7A0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5938	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0x2
5939	 377	SUB		 	 
- stack 1: 0x7A0
- stack 0: 0x1
5940	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0x380
5941	 37B	JUMPI		 	 
- stack 0: 0x7A0
5942	 380	JUMPDEST		 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x7A0
5943	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
5944	 382	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x362FFDC01DB00F00114000F01330014014D011802F0000000B8F0F100CBFF0F
5945	 383	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0x362FFDC01DB00F00114000F01330014014D011802F0000000B8F0F100CBFF0F
- stack 0: 0xE0
5946	 385	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x362FFDC
5947	 386	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x362FFDC
- stack 0: 0xFFFF
5948	 389	AND		 	 
- stack 1: 0x7A0
- stack 0: 0xFFDC
5949	 38A	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0xFFDC
- stack 0: 0x1
5950	 38C	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
5951	 38D	ADD		 	 
- stack 0: 0x77C
5952	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x77C
- stack 0: 0xFFFFFFFF
5953	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x77C
5954	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
5955	 395	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0xB8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA000003290001
5956	 396	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0xB8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA000003290001
- stack 0: 0xF0
5957	 398	SHR		 	 
- stack 1: 0x77C
- stack 0: 0xB8
5958	 399	JUMP		 	 
- stack 0: 0x77C
5959	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x77C
5960	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x77C
- stack 0: 0xF0F1000
5961	 BE	PUSH2	0040	 	 
- stack 2: 0x77C
- stack 1: 0xF0F1000
- stack 0: 0x40
5962	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x77C
5963	 C2	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
5964	 C4	ADD		 	 
- stack 0: 0x780
5965	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
5966	 C6	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
5967	 C7	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
- stack 0: 0xF0
5968	 C9	SHR		 	 
- stack 1: 0x780
- stack 0: 0xCB
5969	 CA	JUMP		 	 
- stack 0: 0x780
5970	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x780
5971	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x780
- stack 0: 0x780
5972	 CD	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
5973	 CE	PUSH1	E0	 	 
- stack 2: 0x780
- stack 1: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
- stack 0: 0xE0
5974	 D0	SHR		 	 
- stack 1: 0x780
- stack 0: 0xCBFF0F
5975	 D1	PUSH2	FFFF	 	 
- stack 2: 0x780
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
5976	 D4	AND		 	 
- stack 1: 0x780
- stack 0: 0xFF0F
5977	 D5	PUSH1	01	 	 
- stack 2: 0x780
- stack 1: 0xFF0F
- stack 0: 0x1
5978	 D7	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
5979	 D8	PUSH2	0040	 	 
- stack 2: 0x780
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
5980	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x780
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
5981	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x780
- stack 0: 0xF0F0F0F
5982	 DD	PUSH2	0040	 	 
- stack 2: 0x780
- stack 1: 0xF0F0F0F
- stack 0: 0x40
5983	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x780
5984	 E1	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
5985	 E3	ADD		 	 
- stack 0: 0x784
5986	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
5987	 E5	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x1C80FF0009900FF03E6000003E6000000EA000003290001034800020362FFDC
5988	 E6	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0x1C80FF0009900FF03E6000003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
5989	 E8	SHR		 	 
- stack 1: 0x784
- stack 0: 0x1C8
5990	 E9	JUMP		 	 
- stack 0: 0x784
5991	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x784
5992	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x784
- stack 0: 0xFF0000
5993	 1CE	PUSH2	0020	 	 
- stack 2: 0x784
- stack 1: 0xFF0000
- stack 0: 0x20
5994	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x784
5995	 1D2	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
5996	 1D4	ADD		 	 
- stack 0: 0x788
5997	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
5998	 1D6	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
5999	 1D7	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xF0
6000	 1D9	SHR		 	 
- stack 1: 0x788
- stack 0: 0x99
6001	 1DA	JUMP		 	 
- stack 0: 0x788
6002	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x788
6003	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x788
- stack 0: 0x788
6004	 9B	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
6005	 9C	PUSH1	E0	 	 
- stack 2: 0x788
- stack 1: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xE0
6006	 9E	SHR		 	 
- stack 1: 0x788
- stack 0: 0x9900FF
6007	 9F	PUSH2	FFFF	 	 
- stack 2: 0x788
- stack 1: 0x9900FF
- stack 0: 0xFFFF
6008	 A2	AND		 	 
- stack 1: 0x788
- stack 0: 0xFF
6009	 A3	PUSH1	01	 	 
- stack 2: 0x788
- stack 1: 0xFF
- stack 0: 0x1
6010	 A5	SIGNEXTEND		 	 
- stack 1: 0x788
- stack 0: 0xFF
6011	 A6	PUSH2	0020	 	 
- stack 2: 0x788
- stack 1: 0xFF
- stack 0: 0x20
6012	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x788
- stack 1: 0xFF
- stack 0: 0xFF0000
6013	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x788
- stack 0: 0xFF00FF
6014	 AB	PUSH2	0020	 	 
- stack 2: 0x788
- stack 1: 0xFF00FF
- stack 0: 0x20
6015	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x788
6016	 AF	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
6017	 B1	ADD		 	 
- stack 0: 0x78C
6018	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
6019	 B3	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
6020	 B4	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
- stack 0: 0xF0
6021	 B6	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x3E6
6022	 B7	JUMP		 	 
- stack 0: 0x78C
6023	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x78C
6024	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
6025	 3E8	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
6026	 3E9	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DB00F00114000F
- stack 0: 0xE0
6027	 3EB	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x3E60000
6028	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6029	 3EF	AND		 	 
- stack 1: 0x78C
- stack 0: 0x0
6030	 3F0	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0x0
- stack 0: 0x1
6031	 3F2	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0x0
6032	 3F3	POP		 	 
- stack 0: 0x78C
6033	 3F4	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
6034	 3F6	ADD		 	 
- stack 0: 0x790
6035	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
6036	 3F8	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F01330014
6037	 3F9	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F01330014
- stack 0: 0xF0
6038	 3FB	SHR		 	 
- stack 1: 0x790
- stack 0: 0x3E6
6039	 3FC	JUMP		 	 
- stack 0: 0x790
6040	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x790
6041	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
6042	 3E8	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F01330014
6043	 3E9	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DB00F00114000F01330014
- stack 0: 0xE0
6044	 3EB	SHR		 	 
- stack 1: 0x790
- stack 0: 0x3E60000
6045	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6046	 3EF	AND		 	 
- stack 1: 0x790
- stack 0: 0x0
6047	 3F0	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0x0
- stack 0: 0x1
6048	 3F2	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0x0
6049	 3F3	POP		 	 
- stack 0: 0x790
6050	 3F4	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
6051	 3F6	ADD		 	 
- stack 0: 0x794
6052	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
6053	 3F8	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0xEA000003290001034800020362FFDC01DB00F00114000F01330014014D0118
6054	 3F9	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0xEA000003290001034800020362FFDC01DB00F00114000F01330014014D0118
- stack 0: 0xF0
6055	 3FB	SHR		 	 
- stack 1: 0x794
- stack 0: 0xEA
6056	 3FC	JUMP		 	 
- stack 0: 0x794
6057	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x794
6058	 EB	PUSH2	0040	 	 
- stack 1: 0x794
- stack 0: 0x40
6059	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x794
- stack 0: 0xF0F0F0F
6060	 EF	PUSH2	0020	 	 
- stack 2: 0x794
- stack 1: 0xF0F0F0F
- stack 0: 0x20
6061	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x794
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
6062	 F3	AND		 	  ;; # AND
- stack 1: 0x794
- stack 0: 0xF000F
6063	 F4	PUSH2	0060	 	 
- stack 2: 0x794
- stack 1: 0xF000F
- stack 0: 0x60
6064	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x794
6065	 F8	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
6066	 FA	ADD		 	 
- stack 0: 0x798
6067	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
6068	 FC	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F01330014014D011802F00000
6069	 FD	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F01330014014D011802F00000
- stack 0: 0xF0
6070	 FF	SHR		 	 
- stack 1: 0x798
- stack 0: 0x329
6071	 100	JUMP		 	 
- stack 0: 0x798
6072	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x798
6073	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x798
- stack 0: 0x798
6074	 32B	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F01330014014D011802F00000
6075	 32C	PUSH1	E0	 	 
- stack 2: 0x798
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F01330014014D011802F00000
- stack 0: 0xE0
6076	 32E	SHR		 	 
- stack 1: 0x798
- stack 0: 0x3290001
6077	 32F	PUSH2	FFFF	 	 
- stack 2: 0x798
- stack 1: 0x3290001
- stack 0: 0xFFFF
6078	 332	AND		 	 
- stack 1: 0x798
- stack 0: 0x1
6079	 333	PUSH1	01	 	 
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x1
6080	 335	SIGNEXTEND		 	 
- stack 1: 0x798
- stack 0: 0x1
6081	 336	PUSH2	0080	 	 
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x80
6082	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x1
6083	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x798
- stack 0: 0x2
6084	 33B	PUSH2	0080	 	 
- stack 2: 0x798
- stack 1: 0x2
- stack 0: 0x80
6085	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x798
6086	 33F	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
6087	 341	ADD		 	 
- stack 0: 0x79C
6088	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
6089	 343	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x34800020362FFDC01DB00F00114000F01330014014D011802F0000000B8F0F1
6090	 344	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x34800020362FFDC01DB00F00114000F01330014014D011802F0000000B8F0F1
- stack 0: 0xF0
6091	 346	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x348
6092	 347	JUMP		 	 
- stack 0: 0x79C
6093	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x79C
6094	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
6095	 34A	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x34800020362FFDC01DB00F00114000F01330014014D011802F0000000B8F0F1
6096	 34B	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x34800020362FFDC01DB00F00114000F01330014014D011802F0000000B8F0F1
- stack 0: 0xE0
6097	 34D	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x3480002
6098	 34E	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x3480002
- stack 0: 0xFFFF
6099	 351	AND		 	 
- stack 1: 0x79C
- stack 0: 0x2
6100	 352	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0x2
- stack 0: 0x1
6101	 354	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0x2
6102	 355	PUSH2	00A0	 	 
- stack 2: 0x79C
- stack 1: 0x2
- stack 0: 0xA0
6103	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x79C
6104	 359	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
6105	 35B	ADD		 	 
- stack 0: 0x7A0
6106	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
6107	 35D	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x362FFDC01DB00F00114000F01330014014D011802F0000000B8F0F100CBFF0F
6108	 35E	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x362FFDC01DB00F00114000F01330014014D011802F0000000B8F0F100CBFF0F
- stack 0: 0xF0
6109	 360	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x362
6110	 361	JUMP		 	 
- stack 0: 0x7A0
6111	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x7A0
6112	 363	PUSH2	0080	 	 
- stack 1: 0x7A0
- stack 0: 0x80
6113	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x7A0
- stack 0: 0x2
6114	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6115	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A0
- stack 0: 0x2
6116	 36D	PUSH2	00A0	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0xA0
6117	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0x2
6118	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7A0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6119	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0x2
6120	 377	SUB		 	 
- stack 1: 0x7A0
- stack 0: 0x0
6121	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x7A0
- stack 1: 0x0
- stack 0: 0x380
6122	 37B	JUMPI		 	 
- stack 0: 0x7A0
6123	 37C	PUSH2	039A	 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 1: 0x7A0
- stack 0: 0x39A
6124	 37F	JUMP		 	 
- stack 0: 0x7A0
6125	 39A	JUMPDEST		 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x7A0
6126	 39B	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
6127	 39D	ADD		 	 
- stack 0: 0x7A4
6128	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
6129	 39F	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x1DB00F00114000F01330014014D011802F0000000B8F0F100CBFF0F03E60000
6130	 3A0	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x1DB00F00114000F01330014014D011802F0000000B8F0F100CBFF0F03E60000
- stack 0: 0xF0
6131	 3A2	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x1DB
6132	 3A3	JUMP		 	 
- stack 0: 0x7A4
6133	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_f0eb7	  ;; # instr: lui t4,0xf0(ignore imm)
- stack 0: 0x7A4
6134	 1DC	PUSH4	000f0000	 	 
- stack 1: 0x7A4
- stack 0: 0xF0000
6135	 1E1	PUSH2	03A0	 	 
- stack 2: 0x7A4
- stack 1: 0xF0000
- stack 0: 0x3A0
6136	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x7A4
6137	 1E5	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
6138	 1E7	ADD		 	 
- stack 0: 0x7A8
6139	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
6140	 1E9	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x114000F01330014014D011802F0000000B8F0F100CBFF0F03E600000086F010
6141	 1EA	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x114000F01330014014D011802F0000000B8F0F100CBFF0F03E600000086F010
- stack 0: 0xF0
6142	 1EC	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x114
6143	 1ED	JUMP		 	 
- stack 0: 0x7A8
6144	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x7A8
6145	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A8
- stack 0: 0x7A8
6146	 116	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x114000F01330014014D011802F0000000B8F0F100CBFF0F03E600000086F010
6147	 117	PUSH1	E0	 	 
- stack 2: 0x7A8
- stack 1: 0x114000F01330014014D011802F0000000B8F0F100CBFF0F03E600000086F010
- stack 0: 0xE0
6148	 119	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x114000F
6149	 11A	PUSH2	FFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x114000F
- stack 0: 0xFFFF
6150	 11D	AND		 	 
- stack 1: 0x7A8
- stack 0: 0xF
6151	 11E	PUSH1	01	 	 
- stack 2: 0x7A8
- stack 1: 0xF
- stack 0: 0x1
6152	 120	SIGNEXTEND		 	 
- stack 1: 0x7A8
- stack 0: 0xF
6153	 121	PUSH2	03A0	 	 
- stack 2: 0x7A8
- stack 1: 0xF
- stack 0: 0x3A0
6154	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x7A8
- stack 1: 0xF
- stack 0: 0xF0000
6155	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x7A8
- stack 0: 0xF000F
6156	 126	PUSH2	03A0	 	 
- stack 2: 0x7A8
- stack 1: 0xF000F
- stack 0: 0x3A0
6157	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x7A8
6158	 12A	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
6159	 12C	ADD		 	 
- stack 0: 0x7AC
6160	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
6161	 12E	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x1330014014D011802F0000000B8F0F100CBFF0F03E600000086F0100099FF00
6162	 12F	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0x1330014014D011802F0000000B8F0F100CBFF0F03E600000086F0100099FF00
- stack 0: 0xF0
6163	 131	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x133
6164	 132	JUMP		 	 
- stack 0: 0x7AC
6165	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7AC
6166	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7AC
- stack 0: 0x7AC
6167	 135	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x1330014014D011802F0000000B8F0F100CBFF0F03E600000086F0100099FF00
6168	 136	PUSH1	E0	 	 
- stack 2: 0x7AC
- stack 1: 0x1330014014D011802F0000000B8F0F100CBFF0F03E600000086F0100099FF00
- stack 0: 0xE0
6169	 138	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x1330014
6170	 139	PUSH2	FFFF	 	 
- stack 2: 0x7AC
- stack 1: 0x1330014
- stack 0: 0xFFFF
6171	 13C	AND		 	 
- stack 1: 0x7AC
- stack 0: 0x14
6172	 13D	PUSH1	01	 	 
- stack 2: 0x7AC
- stack 1: 0x14
- stack 0: 0x1
6173	 13F	SIGNEXTEND		 	 
- stack 1: 0x7AC
- stack 0: 0x14
6174	 140	PUSH2	0380	 	 
- stack 2: 0x7AC
- stack 1: 0x14
- stack 0: 0x380
6175	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x7AC
6176	 144	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
6177	 146	ADD		 	 
- stack 0: 0x7B0
6178	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
6179	 148	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x14D011802F0000000B8F0F100CBFF0F03E600000086F0100099FF0000EA0000
6180	 149	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x14D011802F0000000B8F0F100CBFF0F03E600000086F0100099FF0000EA0000
- stack 0: 0xF0
6181	 14B	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x14D
6182	 14C	JUMP		 	 
- stack 0: 0x7B0
6183	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x7B0
6184	 14E	PUSH2	0060	 	 
- stack 1: 0x7B0
- stack 0: 0x60
6185	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x7B0
- stack 0: 0xF000F
6186	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B0
- stack 1: 0xF000F
- stack 0: 0xFFFFFFFF
6187	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B0
- stack 0: 0xF000F
6188	 158	PUSH2	03A0	 	 
- stack 2: 0x7B0
- stack 1: 0xF000F
- stack 0: 0x3A0
6189	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x7B0
- stack 1: 0xF000F
- stack 0: 0xF000F
6190	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7B0
- stack 2: 0xF000F
- stack 1: 0xF000F
- stack 0: 0xFFFFFFFF
6191	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7B0
- stack 1: 0xF000F
- stack 0: 0xF000F
6192	 162	SUB		 	 
- stack 1: 0x7B0
- stack 0: 0x0
6193	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x7B0
- stack 1: 0x0
- stack 0: 0x16B
6194	 166	JUMPI		 	 
- stack 0: 0x7B0
6195	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x7B0
- stack 0: 0x185
6196	 16A	JUMP		 	 
- stack 0: 0x7B0
6197	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x7B0
6198	 186	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
6199	 188	ADD		 	 
- stack 0: 0x7B4
6200	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
6201	 18A	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x2F0000000B8F0F100CBFF0F03E600000086F0100099FF0000EA000003290001
6202	 18B	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0x2F0000000B8F0F100CBFF0F03E600000086F0100099FF0000EA000003290001
- stack 0: 0xF0
6203	 18D	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x2F0
6204	 18E	JUMP		 	 
- stack 0: 0x7B4
6205	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7B4
6206	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B4
- stack 0: 0x7B4
6207	 2F2	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x2F0000000B8F0F100CBFF0F03E600000086F0100099FF0000EA000003290001
6208	 2F3	PUSH1	E0	 	 
- stack 2: 0x7B4
- stack 1: 0x2F0000000B8F0F100CBFF0F03E600000086F0100099FF0000EA000003290001
- stack 0: 0xE0
6209	 2F5	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x2F00000
6210	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x7B4
- stack 1: 0x2F00000
- stack 0: 0xFFFF
6211	 2F9	AND		 	 
- stack 1: 0x7B4
- stack 0: 0x0
6212	 2FA	PUSH1	01	 	 
- stack 2: 0x7B4
- stack 1: 0x0
- stack 0: 0x1
6213	 2FC	SIGNEXTEND		 	 
- stack 1: 0x7B4
- stack 0: 0x0
6214	 2FD	PUSH2	0080	 	 
- stack 2: 0x7B4
- stack 1: 0x0
- stack 0: 0x80
6215	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x7B4
6216	 301	PUSH1	04	 	 
- stack 1: 0x7B4
- stack 0: 0x4
6217	 303	ADD		 	 
- stack 0: 0x7B8
6218	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
6219	 305	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0xB8F0F100CBFF0F03E600000086F0100099FF0000EA00000329000103480002
6220	 306	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0xB8F0F100CBFF0F03E600000086F0100099FF0000EA00000329000103480002
- stack 0: 0xF0
6221	 308	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0xB8
6222	 309	JUMP		 	 
- stack 0: 0x7B8
6223	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x7B8
6224	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x7B8
- stack 0: 0xF0F1000
6225	 BE	PUSH2	0040	 	 
- stack 2: 0x7B8
- stack 1: 0xF0F1000
- stack 0: 0x40
6226	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x7B8
6227	 C2	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
6228	 C4	ADD		 	 
- stack 0: 0x7BC
6229	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
6230	 C6	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
6231	 C7	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
- stack 0: 0xF0
6232	 C9	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0xCB
6233	 CA	JUMP		 	 
- stack 0: 0x7BC
6234	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x7BC
6235	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7BC
- stack 0: 0x7BC
6236	 CD	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
6237	 CE	PUSH1	E0	 	 
- stack 2: 0x7BC
- stack 1: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
- stack 0: 0xE0
6238	 D0	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0xCBFF0F
6239	 D1	PUSH2	FFFF	 	 
- stack 2: 0x7BC
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
6240	 D4	AND		 	 
- stack 1: 0x7BC
- stack 0: 0xFF0F
6241	 D5	PUSH1	01	 	 
- stack 2: 0x7BC
- stack 1: 0xFF0F
- stack 0: 0x1
6242	 D7	SIGNEXTEND		 	 
- stack 1: 0x7BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
6243	 D8	PUSH2	0040	 	 
- stack 2: 0x7BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
6244	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x7BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
6245	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x7BC
- stack 0: 0xF0F0F0F
6246	 DD	PUSH2	0040	 	 
- stack 2: 0x7BC
- stack 1: 0xF0F0F0F
- stack 0: 0x40
6247	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7BC
6248	 E1	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
6249	 E3	ADD		 	 
- stack 0: 0x7C0
6250	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
6251	 E5	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F001
6252	 E6	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F001
- stack 0: 0xF0
6253	 E8	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x3E6
6254	 E9	JUMP		 	 
- stack 0: 0x7C0
6255	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C0
6256	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
6257	 3E8	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F001
6258	 3E9	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F001
- stack 0: 0xE0
6259	 3EB	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x3E60000
6260	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6261	 3EF	AND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
6262	 3F0	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0x0
- stack 0: 0x1
6263	 3F2	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
6264	 3F3	POP		 	 
- stack 0: 0x7C0
6265	 3F4	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
6266	 3F6	ADD		 	 
- stack 0: 0x7C4
6267	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
6268	 3F8	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x86F0100099FF0000EA000003290001034800020362FFE00101F0010114FF00
6269	 3F9	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x86F0100099FF0000EA000003290001034800020362FFE00101F0010114FF00
- stack 0: 0xF0
6270	 3FB	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x86
6271	 3FC	JUMP		 	 
- stack 0: 0x7C4
6272	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x7C4
6273	 87	PUSH4	ff010000	 	 
- stack 1: 0x7C4
- stack 0: 0xFF010000
6274	 8C	PUSH2	0020	 	 
- stack 2: 0x7C4
- stack 1: 0xFF010000
- stack 0: 0x20
6275	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x7C4
6276	 90	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
6277	 92	ADD		 	 
- stack 0: 0x7C8
6278	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
6279	 94	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x99FF0000EA000003290001034800020362FFE00101F0010114FF0001330015
6280	 95	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x99FF0000EA000003290001034800020362FFE00101F0010114FF0001330015
- stack 0: 0xF0
6281	 97	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x99
6282	 98	JUMP		 	 
- stack 0: 0x7C8
6283	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x7C8
6284	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
6285	 9B	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x99FF0000EA000003290001034800020362FFE00101F0010114FF0001330015
6286	 9C	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x99FF0000EA000003290001034800020362FFE00101F0010114FF0001330015
- stack 0: 0xE0
6287	 9E	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x99FF00
6288	 9F	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x99FF00
- stack 0: 0xFFFF
6289	 A2	AND		 	 
- stack 1: 0x7C8
- stack 0: 0xFF00
6290	 A3	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0xFF00
- stack 0: 0x1
6291	 A5	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
6292	 A6	PUSH2	0020	 	 
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
6293	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
6294	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x7C8
- stack 0: 0xFF00FF00
6295	 AB	PUSH2	0020	 	 
- stack 2: 0x7C8
- stack 1: 0xFF00FF00
- stack 0: 0x20
6296	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x7C8
6297	 AF	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
6298	 B1	ADD		 	 
- stack 0: 0x7CC
6299	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
6300	 B3	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0xEA000003290001034800020362FFE00101F0010114FF0001330015014D00E0
6301	 B4	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0xEA000003290001034800020362FFE00101F0010114FF0001330015014D00E0
- stack 0: 0xF0
6302	 B6	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0xEA
6303	 B7	JUMP		 	 
- stack 0: 0x7CC
6304	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x7CC
6305	 EB	PUSH2	0040	 	 
- stack 1: 0x7CC
- stack 0: 0x40
6306	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x7CC
- stack 0: 0xF0F0F0F
6307	 EF	PUSH2	0020	 	 
- stack 2: 0x7CC
- stack 1: 0xF0F0F0F
- stack 0: 0x20
6308	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x7CC
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
6309	 F3	AND		 	  ;; # AND
- stack 1: 0x7CC
- stack 0: 0xF000F00
6310	 F4	PUSH2	0060	 	 
- stack 2: 0x7CC
- stack 1: 0xF000F00
- stack 0: 0x60
6311	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x7CC
6312	 F8	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
6313	 FA	ADD		 	 
- stack 0: 0x7D0
6314	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
6315	 FC	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3290001034800020362FFE00101F0010114FF0001330015014D00E002F00000
6316	 FD	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x3290001034800020362FFE00101F0010114FF0001330015014D00E002F00000
- stack 0: 0xF0
6317	 FF	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x329
6318	 100	JUMP		 	 
- stack 0: 0x7D0
6319	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7D0
6320	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
6321	 32B	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3290001034800020362FFE00101F0010114FF0001330015014D00E002F00000
6322	 32C	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x3290001034800020362FFE00101F0010114FF0001330015014D00E002F00000
- stack 0: 0xE0
6323	 32E	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3290001
6324	 32F	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x3290001
- stack 0: 0xFFFF
6325	 332	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x1
6326	 333	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x1
6327	 335	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x1
6328	 336	PUSH2	0080	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x80
6329	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x0
6330	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x7D0
- stack 0: 0x1
6331	 33B	PUSH2	0080	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x80
6332	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x7D0
6333	 33F	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
6334	 341	ADD		 	 
- stack 0: 0x7D4
6335	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
6336	 343	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x34800020362FFE00101F0010114FF0001330015014D00E002F0000001A20F0F
6337	 344	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x34800020362FFE00101F0010114FF0001330015014D00E002F0000001A20F0F
- stack 0: 0xF0
6338	 346	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x348
6339	 347	JUMP		 	 
- stack 0: 0x7D4
6340	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7D4
6341	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
6342	 34A	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x34800020362FFE00101F0010114FF0001330015014D00E002F0000001A20F0F
6343	 34B	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0x34800020362FFE00101F0010114FF0001330015014D00E002F0000001A20F0F
- stack 0: 0xE0
6344	 34D	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x3480002
6345	 34E	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x3480002
- stack 0: 0xFFFF
6346	 351	AND		 	 
- stack 1: 0x7D4
- stack 0: 0x2
6347	 352	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0x1
6348	 354	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0x2
6349	 355	PUSH2	00A0	 	 
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0xA0
6350	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x7D4
6351	 359	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
6352	 35B	ADD		 	 
- stack 0: 0x7D8
6353	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
6354	 35D	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x362FFE00101F0010114FF0001330015014D00E002F0000001A20F0F00CB00F0
6355	 35E	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x362FFE00101F0010114FF0001330015014D00E002F0000001A20F0F00CB00F0
- stack 0: 0xF0
6356	 360	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x362
6357	 361	JUMP		 	 
- stack 0: 0x7D8
6358	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x7D8
6359	 363	PUSH2	0080	 	 
- stack 1: 0x7D8
- stack 0: 0x80
6360	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x7D8
- stack 0: 0x1
6361	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6362	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D8
- stack 0: 0x1
6363	 36D	PUSH2	00A0	 	 
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0xA0
6364	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x2
6365	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7D8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6366	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x2
6367	 377	SUB		 	 
- stack 1: 0x7D8
- stack 0: 0x1
6368	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x380
6369	 37B	JUMPI		 	 
- stack 0: 0x7D8
6370	 380	JUMPDEST		 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x7D8
6371	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D8
- stack 0: 0x7D8
6372	 382	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x362FFE00101F0010114FF0001330015014D00E002F0000001A20F0F00CB00F0
6373	 383	PUSH1	E0	 	 
- stack 2: 0x7D8
- stack 1: 0x362FFE00101F0010114FF0001330015014D00E002F0000001A20F0F00CB00F0
- stack 0: 0xE0
6374	 385	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x362FFE0
6375	 386	PUSH2	FFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x362FFE0
- stack 0: 0xFFFF
6376	 389	AND		 	 
- stack 1: 0x7D8
- stack 0: 0xFFE0
6377	 38A	PUSH1	01	 	 
- stack 2: 0x7D8
- stack 1: 0xFFE0
- stack 0: 0x1
6378	 38C	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
6379	 38D	ADD		 	 
- stack 0: 0x7B8
6380	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7B8
- stack 0: 0xFFFFFFFF
6381	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7B8
6382	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
6383	 395	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0xB8F0F100CBFF0F03E600000086F0100099FF0000EA00000329000103480002
6384	 396	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0xB8F0F100CBFF0F03E600000086F0100099FF0000EA00000329000103480002
- stack 0: 0xF0
6385	 398	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0xB8
6386	 399	JUMP		 	 
- stack 0: 0x7B8
6387	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x7B8
6388	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x7B8
- stack 0: 0xF0F1000
6389	 BE	PUSH2	0040	 	 
- stack 2: 0x7B8
- stack 1: 0xF0F1000
- stack 0: 0x40
6390	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x7B8
6391	 C2	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
6392	 C4	ADD		 	 
- stack 0: 0x7BC
6393	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
6394	 C6	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
6395	 C7	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
- stack 0: 0xF0
6396	 C9	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0xCB
6397	 CA	JUMP		 	 
- stack 0: 0x7BC
6398	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x7BC
6399	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7BC
- stack 0: 0x7BC
6400	 CD	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
6401	 CE	PUSH1	E0	 	 
- stack 2: 0x7BC
- stack 1: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
- stack 0: 0xE0
6402	 D0	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0xCBFF0F
6403	 D1	PUSH2	FFFF	 	 
- stack 2: 0x7BC
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
6404	 D4	AND		 	 
- stack 1: 0x7BC
- stack 0: 0xFF0F
6405	 D5	PUSH1	01	 	 
- stack 2: 0x7BC
- stack 1: 0xFF0F
- stack 0: 0x1
6406	 D7	SIGNEXTEND		 	 
- stack 1: 0x7BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
6407	 D8	PUSH2	0040	 	 
- stack 2: 0x7BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
6408	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x7BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
6409	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x7BC
- stack 0: 0xF0F0F0F
6410	 DD	PUSH2	0040	 	 
- stack 2: 0x7BC
- stack 1: 0xF0F0F0F
- stack 0: 0x40
6411	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7BC
6412	 E1	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
6413	 E3	ADD		 	 
- stack 0: 0x7C0
6414	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
6415	 E5	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F001
6416	 E6	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F001
- stack 0: 0xF0
6417	 E8	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x3E6
6418	 E9	JUMP		 	 
- stack 0: 0x7C0
6419	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C0
6420	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
6421	 3E8	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F001
6422	 3E9	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F001
- stack 0: 0xE0
6423	 3EB	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x3E60000
6424	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6425	 3EF	AND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
6426	 3F0	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0x0
- stack 0: 0x1
6427	 3F2	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
6428	 3F3	POP		 	 
- stack 0: 0x7C0
6429	 3F4	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
6430	 3F6	ADD		 	 
- stack 0: 0x7C4
6431	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
6432	 3F8	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x86F0100099FF0000EA000003290001034800020362FFE00101F0010114FF00
6433	 3F9	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x86F0100099FF0000EA000003290001034800020362FFE00101F0010114FF00
- stack 0: 0xF0
6434	 3FB	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x86
6435	 3FC	JUMP		 	 
- stack 0: 0x7C4
6436	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x7C4
6437	 87	PUSH4	ff010000	 	 
- stack 1: 0x7C4
- stack 0: 0xFF010000
6438	 8C	PUSH2	0020	 	 
- stack 2: 0x7C4
- stack 1: 0xFF010000
- stack 0: 0x20
6439	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x7C4
6440	 90	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
6441	 92	ADD		 	 
- stack 0: 0x7C8
6442	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
6443	 94	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x99FF0000EA000003290001034800020362FFE00101F0010114FF0001330015
6444	 95	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x99FF0000EA000003290001034800020362FFE00101F0010114FF0001330015
- stack 0: 0xF0
6445	 97	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x99
6446	 98	JUMP		 	 
- stack 0: 0x7C8
6447	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x7C8
6448	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
6449	 9B	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x99FF0000EA000003290001034800020362FFE00101F0010114FF0001330015
6450	 9C	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x99FF0000EA000003290001034800020362FFE00101F0010114FF0001330015
- stack 0: 0xE0
6451	 9E	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x99FF00
6452	 9F	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x99FF00
- stack 0: 0xFFFF
6453	 A2	AND		 	 
- stack 1: 0x7C8
- stack 0: 0xFF00
6454	 A3	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0xFF00
- stack 0: 0x1
6455	 A5	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
6456	 A6	PUSH2	0020	 	 
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
6457	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
6458	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x7C8
- stack 0: 0xFF00FF00
6459	 AB	PUSH2	0020	 	 
- stack 2: 0x7C8
- stack 1: 0xFF00FF00
- stack 0: 0x20
6460	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x7C8
6461	 AF	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
6462	 B1	ADD		 	 
- stack 0: 0x7CC
6463	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
6464	 B3	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0xEA000003290001034800020362FFE00101F0010114FF0001330015014D00E0
6465	 B4	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0xEA000003290001034800020362FFE00101F0010114FF0001330015014D00E0
- stack 0: 0xF0
6466	 B6	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0xEA
6467	 B7	JUMP		 	 
- stack 0: 0x7CC
6468	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x7CC
6469	 EB	PUSH2	0040	 	 
- stack 1: 0x7CC
- stack 0: 0x40
6470	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x7CC
- stack 0: 0xF0F0F0F
6471	 EF	PUSH2	0020	 	 
- stack 2: 0x7CC
- stack 1: 0xF0F0F0F
- stack 0: 0x20
6472	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x7CC
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
6473	 F3	AND		 	  ;; # AND
- stack 1: 0x7CC
- stack 0: 0xF000F00
6474	 F4	PUSH2	0060	 	 
- stack 2: 0x7CC
- stack 1: 0xF000F00
- stack 0: 0x60
6475	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x7CC
6476	 F8	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
6477	 FA	ADD		 	 
- stack 0: 0x7D0
6478	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
6479	 FC	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3290001034800020362FFE00101F0010114FF0001330015014D00E002F00000
6480	 FD	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x3290001034800020362FFE00101F0010114FF0001330015014D00E002F00000
- stack 0: 0xF0
6481	 FF	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x329
6482	 100	JUMP		 	 
- stack 0: 0x7D0
6483	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7D0
6484	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
6485	 32B	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3290001034800020362FFE00101F0010114FF0001330015014D00E002F00000
6486	 32C	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x3290001034800020362FFE00101F0010114FF0001330015014D00E002F00000
- stack 0: 0xE0
6487	 32E	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3290001
6488	 32F	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x3290001
- stack 0: 0xFFFF
6489	 332	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x1
6490	 333	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x1
6491	 335	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x1
6492	 336	PUSH2	0080	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x80
6493	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x1
6494	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x7D0
- stack 0: 0x2
6495	 33B	PUSH2	0080	 	 
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0x80
6496	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x7D0
6497	 33F	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
6498	 341	ADD		 	 
- stack 0: 0x7D4
6499	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
6500	 343	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x34800020362FFE00101F0010114FF0001330015014D00E002F0000001A20F0F
6501	 344	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x34800020362FFE00101F0010114FF0001330015014D00E002F0000001A20F0F
- stack 0: 0xF0
6502	 346	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x348
6503	 347	JUMP		 	 
- stack 0: 0x7D4
6504	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7D4
6505	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
6506	 34A	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x34800020362FFE00101F0010114FF0001330015014D00E002F0000001A20F0F
6507	 34B	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0x34800020362FFE00101F0010114FF0001330015014D00E002F0000001A20F0F
- stack 0: 0xE0
6508	 34D	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x3480002
6509	 34E	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x3480002
- stack 0: 0xFFFF
6510	 351	AND		 	 
- stack 1: 0x7D4
- stack 0: 0x2
6511	 352	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0x1
6512	 354	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0x2
6513	 355	PUSH2	00A0	 	 
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0xA0
6514	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x7D4
6515	 359	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
6516	 35B	ADD		 	 
- stack 0: 0x7D8
6517	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
6518	 35D	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x362FFE00101F0010114FF0001330015014D00E002F0000001A20F0F00CB00F0
6519	 35E	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x362FFE00101F0010114FF0001330015014D00E002F0000001A20F0F00CB00F0
- stack 0: 0xF0
6520	 360	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x362
6521	 361	JUMP		 	 
- stack 0: 0x7D8
6522	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x7D8
6523	 363	PUSH2	0080	 	 
- stack 1: 0x7D8
- stack 0: 0x80
6524	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x7D8
- stack 0: 0x2
6525	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6526	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D8
- stack 0: 0x2
6527	 36D	PUSH2	00A0	 	 
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0xA0
6528	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0x2
6529	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7D8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6530	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0x2
6531	 377	SUB		 	 
- stack 1: 0x7D8
- stack 0: 0x0
6532	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x7D8
- stack 1: 0x0
- stack 0: 0x380
6533	 37B	JUMPI		 	 
- stack 0: 0x7D8
6534	 37C	PUSH2	039A	 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 1: 0x7D8
- stack 0: 0x39A
6535	 37F	JUMP		 	 
- stack 0: 0x7D8
6536	 39A	JUMPDEST		 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x7D8
6537	 39B	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
6538	 39D	ADD		 	 
- stack 0: 0x7DC
6539	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
6540	 39F	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x101F0010114FF0001330015014D00E002F0000001A20F0F00CB00F003E60000
6541	 3A0	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0x101F0010114FF0001330015014D00E002F0000001A20F0F00CB00F003E60000
- stack 0: 0xF0
6542	 3A2	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x101
6543	 3A3	JUMP		 	 
- stack 0: 0x7DC
6544	 101	JUMPDEST		 ;; __riscvimpl_LUI_f001eb7	  ;; # instr: lui t4,0xf001(ignore imm)
- stack 0: 0x7DC
6545	 102	PUSH4	0f001000	 	 
- stack 1: 0x7DC
- stack 0: 0xF001000
6546	 107	PUSH2	03A0	 	 
- stack 2: 0x7DC
- stack 1: 0xF001000
- stack 0: 0x3A0
6547	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x7DC
6548	 10B	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
6549	 10D	ADD		 	 
- stack 0: 0x7E0
6550	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
6551	 10F	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x114FF0001330015014D00E002F0000001A20F0F00CB00F003E60000018FFF01
6552	 110	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x114FF0001330015014D00E002F0000001A20F0F00CB00F003E60000018FFF01
- stack 0: 0xF0
6553	 112	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x114
6554	 113	JUMP		 	 
- stack 0: 0x7E0
6555	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x7E0
6556	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E0
- stack 0: 0x7E0
6557	 116	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x114FF0001330015014D00E002F0000001A20F0F00CB00F003E60000018FFF01
6558	 117	PUSH1	E0	 	 
- stack 2: 0x7E0
- stack 1: 0x114FF0001330015014D00E002F0000001A20F0F00CB00F003E60000018FFF01
- stack 0: 0xE0
6559	 119	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x114FF00
6560	 11A	PUSH2	FFFF	 	 
- stack 2: 0x7E0
- stack 1: 0x114FF00
- stack 0: 0xFFFF
6561	 11D	AND		 	 
- stack 1: 0x7E0
- stack 0: 0xFF00
6562	 11E	PUSH1	01	 	 
- stack 2: 0x7E0
- stack 1: 0xFF00
- stack 0: 0x1
6563	 120	SIGNEXTEND		 	 
- stack 1: 0x7E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
6564	 121	PUSH2	03A0	 	 
- stack 2: 0x7E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
6565	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x7E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xF001000
6566	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x7E0
- stack 0: 0xF000F00
6567	 126	PUSH2	03A0	 	 
- stack 2: 0x7E0
- stack 1: 0xF000F00
- stack 0: 0x3A0
6568	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x7E0
6569	 12A	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
6570	 12C	ADD		 	 
- stack 0: 0x7E4
6571	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
6572	 12E	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x1330015014D00E002F0000001A20F0F00CB00F003E60000018FFF010099FFF0
6573	 12F	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0x1330015014D00E002F0000001A20F0F00CB00F003E60000018FFF010099FFF0
- stack 0: 0xF0
6574	 131	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x133
6575	 132	JUMP		 	 
- stack 0: 0x7E4
6576	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7E4
6577	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
6578	 135	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x1330015014D00E002F0000001A20F0F00CB00F003E60000018FFF010099FFF0
6579	 136	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0x1330015014D00E002F0000001A20F0F00CB00F003E60000018FFF010099FFF0
- stack 0: 0xE0
6580	 138	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x1330015
6581	 139	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0x1330015
- stack 0: 0xFFFF
6582	 13C	AND		 	 
- stack 1: 0x7E4
- stack 0: 0x15
6583	 13D	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0x15
- stack 0: 0x1
6584	 13F	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0x15
6585	 140	PUSH2	0380	 	 
- stack 2: 0x7E4
- stack 1: 0x15
- stack 0: 0x380
6586	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x7E4
6587	 144	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
6588	 146	ADD		 	 
- stack 0: 0x7E8
6589	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
6590	 148	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x14D00E002F0000001A20F0F00CB00F003E60000018FFF010099FFF003E60000
6591	 149	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x14D00E002F0000001A20F0F00CB00F003E60000018FFF010099FFF003E60000
- stack 0: 0xF0
6592	 14B	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x14D
6593	 14C	JUMP		 	 
- stack 0: 0x7E8
6594	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x7E8
6595	 14E	PUSH2	0060	 	 
- stack 1: 0x7E8
- stack 0: 0x60
6596	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x7E8
- stack 0: 0xF000F00
6597	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E8
- stack 1: 0xF000F00
- stack 0: 0xFFFFFFFF
6598	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E8
- stack 0: 0xF000F00
6599	 158	PUSH2	03A0	 	 
- stack 2: 0x7E8
- stack 1: 0xF000F00
- stack 0: 0x3A0
6600	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x7E8
- stack 1: 0xF000F00
- stack 0: 0xF000F00
6601	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7E8
- stack 2: 0xF000F00
- stack 1: 0xF000F00
- stack 0: 0xFFFFFFFF
6602	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7E8
- stack 1: 0xF000F00
- stack 0: 0xF000F00
6603	 162	SUB		 	 
- stack 1: 0x7E8
- stack 0: 0x0
6604	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x7E8
- stack 1: 0x0
- stack 0: 0x16B
6605	 166	JUMPI		 	 
- stack 0: 0x7E8
6606	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x7E8
- stack 0: 0x185
6607	 16A	JUMP		 	 
- stack 0: 0x7E8
6608	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x7E8
6609	 186	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
6610	 188	ADD		 	 
- stack 0: 0x7EC
6611	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
6612	 18A	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x2F0000001A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA0000
6613	 18B	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x2F0000001A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA0000
- stack 0: 0xF0
6614	 18D	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x2F0
6615	 18E	JUMP		 	 
- stack 0: 0x7EC
6616	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7EC
6617	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7EC
- stack 0: 0x7EC
6618	 2F2	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x2F0000001A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA0000
6619	 2F3	PUSH1	E0	 	 
- stack 2: 0x7EC
- stack 1: 0x2F0000001A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA0000
- stack 0: 0xE0
6620	 2F5	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x2F00000
6621	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x2F00000
- stack 0: 0xFFFF
6622	 2F9	AND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
6623	 2FA	PUSH1	01	 	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x1
6624	 2FC	SIGNEXTEND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
6625	 2FD	PUSH2	0080	 	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x80
6626	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x7EC
6627	 301	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
6628	 303	ADD		 	 
- stack 0: 0x7F0
6629	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
6630	 305	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x1A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA000003290001
6631	 306	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x1A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA000003290001
- stack 0: 0xF0
6632	 308	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x1A2
6633	 309	JUMP		 	 
- stack 0: 0x7F0
6634	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x7F0
6635	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x7F0
- stack 0: 0xF0F0F000
6636	 1A8	PUSH2	0040	 	 
- stack 2: 0x7F0
- stack 1: 0xF0F0F000
- stack 0: 0x40
6637	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F0
6638	 1AC	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
6639	 1AE	ADD		 	 
- stack 0: 0x7F4
6640	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
6641	 1B0	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
6642	 1B1	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
- stack 0: 0xF0
6643	 1B3	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xCB
6644	 1B4	JUMP		 	 
- stack 0: 0x7F4
6645	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x7F4
6646	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F4
- stack 0: 0x7F4
6647	 CD	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
6648	 CE	PUSH1	E0	 	 
- stack 2: 0x7F4
- stack 1: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
- stack 0: 0xE0
6649	 D0	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xCB00F0
6650	 D1	PUSH2	FFFF	 	 
- stack 2: 0x7F4
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
6651	 D4	AND		 	 
- stack 1: 0x7F4
- stack 0: 0xF0
6652	 D5	PUSH1	01	 	 
- stack 2: 0x7F4
- stack 1: 0xF0
- stack 0: 0x1
6653	 D7	SIGNEXTEND		 	 
- stack 1: 0x7F4
- stack 0: 0xF0
6654	 D8	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0xF0
- stack 0: 0x40
6655	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x7F4
- stack 1: 0xF0
- stack 0: 0xF0F0F000
6656	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x7F4
- stack 0: 0xF0F0F0F0
6657	 DD	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
6658	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F4
6659	 E1	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
6660	 E3	ADD		 	 
- stack 0: 0x7F8
6661	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
6662	 E5	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
6663	 E6	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
6664	 E8	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x3E6
6665	 E9	JUMP		 	 
- stack 0: 0x7F8
6666	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7F8
6667	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F8
- stack 0: 0x7F8
6668	 3E8	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
6669	 3E9	PUSH1	E0	 	 
- stack 2: 0x7F8
- stack 1: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
- stack 0: 0xE0
6670	 3EB	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x3E60000
6671	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x7F8
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6672	 3EF	AND		 	 
- stack 1: 0x7F8
- stack 0: 0x0
6673	 3F0	PUSH1	01	 	 
- stack 2: 0x7F8
- stack 1: 0x0
- stack 0: 0x1
6674	 3F2	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0x0
6675	 3F3	POP		 	 
- stack 0: 0x7F8
6676	 3F4	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
6677	 3F6	ADD		 	 
- stack 0: 0x7FC
6678	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
6679	 3F8	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFDC01B50F00
6680	 3F9	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFDC01B50F00
- stack 0: 0xF0
6681	 3FB	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x18F
6682	 3FC	JUMP		 	 
- stack 0: 0x7FC
6683	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x7FC
6684	 190	PUSH4	0ff01000	 	 
- stack 1: 0x7FC
- stack 0: 0xFF01000
6685	 195	PUSH2	0020	 	 
- stack 2: 0x7FC
- stack 1: 0xFF01000
- stack 0: 0x20
6686	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x7FC
6687	 199	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
6688	 19B	ADD		 	 
- stack 0: 0x800
6689	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
6690	 19D	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFDC01B50F00011400F0
6691	 19E	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFDC01B50F00011400F0
- stack 0: 0xF0
6692	 1A0	SHR		 	 
- stack 1: 0x800
- stack 0: 0x99
6693	 1A1	JUMP		 	 
- stack 0: 0x800
6694	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x800
6695	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x800
- stack 0: 0x800
6696	 9B	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFDC01B50F00011400F0
6697	 9C	PUSH1	E0	 	 
- stack 2: 0x800
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFDC01B50F00011400F0
- stack 0: 0xE0
6698	 9E	SHR		 	 
- stack 1: 0x800
- stack 0: 0x99FFF0
6699	 9F	PUSH2	FFFF	 	 
- stack 2: 0x800
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
6700	 A2	AND		 	 
- stack 1: 0x800
- stack 0: 0xFFF0
6701	 A3	PUSH1	01	 	 
- stack 2: 0x800
- stack 1: 0xFFF0
- stack 0: 0x1
6702	 A5	SIGNEXTEND		 	 
- stack 1: 0x800
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
6703	 A6	PUSH2	0020	 	 
- stack 2: 0x800
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
6704	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x800
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
6705	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x800
- stack 0: 0xFF00FF0
6706	 AB	PUSH2	0020	 	 
- stack 2: 0x800
- stack 1: 0xFF00FF0
- stack 0: 0x20
6707	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x800
6708	 AF	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
6709	 B1	ADD		 	 
- stack 0: 0x804
6710	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
6711	 B3	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330016
6712	 B4	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330016
- stack 0: 0xF0
6713	 B6	SHR		 	 
- stack 1: 0x804
- stack 0: 0x3E6
6714	 B7	JUMP		 	 
- stack 0: 0x804
6715	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x804
6716	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
6717	 3E8	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330016
6718	 3E9	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330016
- stack 0: 0xE0
6719	 3EB	SHR		 	 
- stack 1: 0x804
- stack 0: 0x3E60000
6720	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6721	 3EF	AND		 	 
- stack 1: 0x804
- stack 0: 0x0
6722	 3F0	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0x0
- stack 0: 0x1
6723	 3F2	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0x0
6724	 3F3	POP		 	 
- stack 0: 0x804
6725	 3F4	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
6726	 3F6	ADD		 	 
- stack 0: 0x808
6727	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
6728	 3F8	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0xEA000003290001034800020362FFDC01B50F00011400F001330016014D00A4
6729	 3F9	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0xEA000003290001034800020362FFDC01B50F00011400F001330016014D00A4
- stack 0: 0xF0
6730	 3FB	SHR		 	 
- stack 1: 0x808
- stack 0: 0xEA
6731	 3FC	JUMP		 	 
- stack 0: 0x808
6732	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x808
6733	 EB	PUSH2	0040	 	 
- stack 1: 0x808
- stack 0: 0x40
6734	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x808
- stack 0: 0xF0F0F0F0
6735	 EF	PUSH2	0020	 	 
- stack 2: 0x808
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
6736	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x808
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
6737	 F3	AND		 	  ;; # AND
- stack 1: 0x808
- stack 0: 0xF000F0
6738	 F4	PUSH2	0060	 	 
- stack 2: 0x808
- stack 1: 0xF000F0
- stack 0: 0x60
6739	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x808
6740	 F8	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
6741	 FA	ADD		 	 
- stack 0: 0x80C
6742	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
6743	 FC	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x3290001034800020362FFDC01B50F00011400F001330016014D00A402F00000
6744	 FD	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0x3290001034800020362FFDC01B50F00011400F001330016014D00A402F00000
- stack 0: 0xF0
6745	 FF	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x329
6746	 100	JUMP		 	 
- stack 0: 0x80C
6747	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x80C
6748	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x80C
- stack 0: 0x80C
6749	 32B	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x3290001034800020362FFDC01B50F00011400F001330016014D00A402F00000
6750	 32C	PUSH1	E0	 	 
- stack 2: 0x80C
- stack 1: 0x3290001034800020362FFDC01B50F00011400F001330016014D00A402F00000
- stack 0: 0xE0
6751	 32E	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x3290001
6752	 32F	PUSH2	FFFF	 	 
- stack 2: 0x80C
- stack 1: 0x3290001
- stack 0: 0xFFFF
6753	 332	AND		 	 
- stack 1: 0x80C
- stack 0: 0x1
6754	 333	PUSH1	01	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x1
6755	 335	SIGNEXTEND		 	 
- stack 1: 0x80C
- stack 0: 0x1
6756	 336	PUSH2	0080	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x80
6757	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x0
6758	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x80C
- stack 0: 0x1
6759	 33B	PUSH2	0080	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x80
6760	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x80C
6761	 33F	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
6762	 341	ADD		 	 
- stack 0: 0x810
6763	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
6764	 343	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x34800020362FFDC01B50F00011400F001330016014D00A402F0000000B8F0F1
6765	 344	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0x34800020362FFDC01B50F00011400F001330016014D00A402F0000000B8F0F1
- stack 0: 0xF0
6766	 346	SHR		 	 
- stack 1: 0x810
- stack 0: 0x348
6767	 347	JUMP		 	 
- stack 0: 0x810
6768	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x810
6769	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x810
- stack 0: 0x810
6770	 34A	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x34800020362FFDC01B50F00011400F001330016014D00A402F0000000B8F0F1
6771	 34B	PUSH1	E0	 	 
- stack 2: 0x810
- stack 1: 0x34800020362FFDC01B50F00011400F001330016014D00A402F0000000B8F0F1
- stack 0: 0xE0
6772	 34D	SHR		 	 
- stack 1: 0x810
- stack 0: 0x3480002
6773	 34E	PUSH2	FFFF	 	 
- stack 2: 0x810
- stack 1: 0x3480002
- stack 0: 0xFFFF
6774	 351	AND		 	 
- stack 1: 0x810
- stack 0: 0x2
6775	 352	PUSH1	01	 	 
- stack 2: 0x810
- stack 1: 0x2
- stack 0: 0x1
6776	 354	SIGNEXTEND		 	 
- stack 1: 0x810
- stack 0: 0x2
6777	 355	PUSH2	00A0	 	 
- stack 2: 0x810
- stack 1: 0x2
- stack 0: 0xA0
6778	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x810
6779	 359	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
6780	 35B	ADD		 	 
- stack 0: 0x814
6781	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
6782	 35D	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x362FFDC01B50F00011400F001330016014D00A402F0000000B8F0F100CBFF0F
6783	 35E	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0x362FFDC01B50F00011400F001330016014D00A402F0000000B8F0F100CBFF0F
- stack 0: 0xF0
6784	 360	SHR		 	 
- stack 1: 0x814
- stack 0: 0x362
6785	 361	JUMP		 	 
- stack 0: 0x814
6786	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x814
6787	 363	PUSH2	0080	 	 
- stack 1: 0x814
- stack 0: 0x80
6788	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x814
- stack 0: 0x1
6789	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x814
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6790	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x814
- stack 0: 0x1
6791	 36D	PUSH2	00A0	 	 
- stack 2: 0x814
- stack 1: 0x1
- stack 0: 0xA0
6792	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x814
- stack 1: 0x1
- stack 0: 0x2
6793	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x814
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6794	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x814
- stack 1: 0x1
- stack 0: 0x2
6795	 377	SUB		 	 
- stack 1: 0x814
- stack 0: 0x1
6796	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x814
- stack 1: 0x1
- stack 0: 0x380
6797	 37B	JUMPI		 	 
- stack 0: 0x814
6798	 380	JUMPDEST		 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x814
6799	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x814
- stack 0: 0x814
6800	 382	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x362FFDC01B50F00011400F001330016014D00A402F0000000B8F0F100CBFF0F
6801	 383	PUSH1	E0	 	 
- stack 2: 0x814
- stack 1: 0x362FFDC01B50F00011400F001330016014D00A402F0000000B8F0F100CBFF0F
- stack 0: 0xE0
6802	 385	SHR		 	 
- stack 1: 0x814
- stack 0: 0x362FFDC
6803	 386	PUSH2	FFFF	 	 
- stack 2: 0x814
- stack 1: 0x362FFDC
- stack 0: 0xFFFF
6804	 389	AND		 	 
- stack 1: 0x814
- stack 0: 0xFFDC
6805	 38A	PUSH1	01	 	 
- stack 2: 0x814
- stack 1: 0xFFDC
- stack 0: 0x1
6806	 38C	SIGNEXTEND		 	 
- stack 1: 0x814
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
6807	 38D	ADD		 	 
- stack 0: 0x7F0
6808	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7F0
- stack 0: 0xFFFFFFFF
6809	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7F0
6810	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
6811	 395	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x1A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA000003290001
6812	 396	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x1A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA000003290001
- stack 0: 0xF0
6813	 398	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x1A2
6814	 399	JUMP		 	 
- stack 0: 0x7F0
6815	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x7F0
6816	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x7F0
- stack 0: 0xF0F0F000
6817	 1A8	PUSH2	0040	 	 
- stack 2: 0x7F0
- stack 1: 0xF0F0F000
- stack 0: 0x40
6818	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F0
6819	 1AC	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
6820	 1AE	ADD		 	 
- stack 0: 0x7F4
6821	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
6822	 1B0	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
6823	 1B1	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
- stack 0: 0xF0
6824	 1B3	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xCB
6825	 1B4	JUMP		 	 
- stack 0: 0x7F4
6826	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x7F4
6827	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F4
- stack 0: 0x7F4
6828	 CD	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
6829	 CE	PUSH1	E0	 	 
- stack 2: 0x7F4
- stack 1: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
- stack 0: 0xE0
6830	 D0	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xCB00F0
6831	 D1	PUSH2	FFFF	 	 
- stack 2: 0x7F4
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
6832	 D4	AND		 	 
- stack 1: 0x7F4
- stack 0: 0xF0
6833	 D5	PUSH1	01	 	 
- stack 2: 0x7F4
- stack 1: 0xF0
- stack 0: 0x1
6834	 D7	SIGNEXTEND		 	 
- stack 1: 0x7F4
- stack 0: 0xF0
6835	 D8	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0xF0
- stack 0: 0x40
6836	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x7F4
- stack 1: 0xF0
- stack 0: 0xF0F0F000
6837	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x7F4
- stack 0: 0xF0F0F0F0
6838	 DD	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
6839	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F4
6840	 E1	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
6841	 E3	ADD		 	 
- stack 0: 0x7F8
6842	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
6843	 E5	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
6844	 E6	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
6845	 E8	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x3E6
6846	 E9	JUMP		 	 
- stack 0: 0x7F8
6847	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7F8
6848	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F8
- stack 0: 0x7F8
6849	 3E8	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
6850	 3E9	PUSH1	E0	 	 
- stack 2: 0x7F8
- stack 1: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
- stack 0: 0xE0
6851	 3EB	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x3E60000
6852	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x7F8
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6853	 3EF	AND		 	 
- stack 1: 0x7F8
- stack 0: 0x0
6854	 3F0	PUSH1	01	 	 
- stack 2: 0x7F8
- stack 1: 0x0
- stack 0: 0x1
6855	 3F2	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0x0
6856	 3F3	POP		 	 
- stack 0: 0x7F8
6857	 3F4	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
6858	 3F6	ADD		 	 
- stack 0: 0x7FC
6859	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
6860	 3F8	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFDC01B50F00
6861	 3F9	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFDC01B50F00
- stack 0: 0xF0
6862	 3FB	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x18F
6863	 3FC	JUMP		 	 
- stack 0: 0x7FC
6864	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x7FC
6865	 190	PUSH4	0ff01000	 	 
- stack 1: 0x7FC
- stack 0: 0xFF01000
6866	 195	PUSH2	0020	 	 
- stack 2: 0x7FC
- stack 1: 0xFF01000
- stack 0: 0x20
6867	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x7FC
6868	 199	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
6869	 19B	ADD		 	 
- stack 0: 0x800
6870	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
6871	 19D	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFDC01B50F00011400F0
6872	 19E	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFDC01B50F00011400F0
- stack 0: 0xF0
6873	 1A0	SHR		 	 
- stack 1: 0x800
- stack 0: 0x99
6874	 1A1	JUMP		 	 
- stack 0: 0x800
6875	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x800
6876	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x800
- stack 0: 0x800
6877	 9B	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFDC01B50F00011400F0
6878	 9C	PUSH1	E0	 	 
- stack 2: 0x800
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFDC01B50F00011400F0
- stack 0: 0xE0
6879	 9E	SHR		 	 
- stack 1: 0x800
- stack 0: 0x99FFF0
6880	 9F	PUSH2	FFFF	 	 
- stack 2: 0x800
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
6881	 A2	AND		 	 
- stack 1: 0x800
- stack 0: 0xFFF0
6882	 A3	PUSH1	01	 	 
- stack 2: 0x800
- stack 1: 0xFFF0
- stack 0: 0x1
6883	 A5	SIGNEXTEND		 	 
- stack 1: 0x800
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
6884	 A6	PUSH2	0020	 	 
- stack 2: 0x800
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
6885	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x800
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
6886	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x800
- stack 0: 0xFF00FF0
6887	 AB	PUSH2	0020	 	 
- stack 2: 0x800
- stack 1: 0xFF00FF0
- stack 0: 0x20
6888	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x800
6889	 AF	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
6890	 B1	ADD		 	 
- stack 0: 0x804
6891	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
6892	 B3	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330016
6893	 B4	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330016
- stack 0: 0xF0
6894	 B6	SHR		 	 
- stack 1: 0x804
- stack 0: 0x3E6
6895	 B7	JUMP		 	 
- stack 0: 0x804
6896	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x804
6897	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
6898	 3E8	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330016
6899	 3E9	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B50F00011400F001330016
- stack 0: 0xE0
6900	 3EB	SHR		 	 
- stack 1: 0x804
- stack 0: 0x3E60000
6901	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6902	 3EF	AND		 	 
- stack 1: 0x804
- stack 0: 0x0
6903	 3F0	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0x0
- stack 0: 0x1
6904	 3F2	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0x0
6905	 3F3	POP		 	 
- stack 0: 0x804
6906	 3F4	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
6907	 3F6	ADD		 	 
- stack 0: 0x808
6908	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
6909	 3F8	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0xEA000003290001034800020362FFDC01B50F00011400F001330016014D00A4
6910	 3F9	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0xEA000003290001034800020362FFDC01B50F00011400F001330016014D00A4
- stack 0: 0xF0
6911	 3FB	SHR		 	 
- stack 1: 0x808
- stack 0: 0xEA
6912	 3FC	JUMP		 	 
- stack 0: 0x808
6913	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x808
6914	 EB	PUSH2	0040	 	 
- stack 1: 0x808
- stack 0: 0x40
6915	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x808
- stack 0: 0xF0F0F0F0
6916	 EF	PUSH2	0020	 	 
- stack 2: 0x808
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
6917	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x808
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
6918	 F3	AND		 	  ;; # AND
- stack 1: 0x808
- stack 0: 0xF000F0
6919	 F4	PUSH2	0060	 	 
- stack 2: 0x808
- stack 1: 0xF000F0
- stack 0: 0x60
6920	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x808
6921	 F8	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
6922	 FA	ADD		 	 
- stack 0: 0x80C
6923	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
6924	 FC	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x3290001034800020362FFDC01B50F00011400F001330016014D00A402F00000
6925	 FD	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0x3290001034800020362FFDC01B50F00011400F001330016014D00A402F00000
- stack 0: 0xF0
6926	 FF	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x329
6927	 100	JUMP		 	 
- stack 0: 0x80C
6928	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x80C
6929	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x80C
- stack 0: 0x80C
6930	 32B	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x3290001034800020362FFDC01B50F00011400F001330016014D00A402F00000
6931	 32C	PUSH1	E0	 	 
- stack 2: 0x80C
- stack 1: 0x3290001034800020362FFDC01B50F00011400F001330016014D00A402F00000
- stack 0: 0xE0
6932	 32E	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x3290001
6933	 32F	PUSH2	FFFF	 	 
- stack 2: 0x80C
- stack 1: 0x3290001
- stack 0: 0xFFFF
6934	 332	AND		 	 
- stack 1: 0x80C
- stack 0: 0x1
6935	 333	PUSH1	01	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x1
6936	 335	SIGNEXTEND		 	 
- stack 1: 0x80C
- stack 0: 0x1
6937	 336	PUSH2	0080	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x80
6938	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x1
6939	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x80C
- stack 0: 0x2
6940	 33B	PUSH2	0080	 	 
- stack 2: 0x80C
- stack 1: 0x2
- stack 0: 0x80
6941	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x80C
6942	 33F	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
6943	 341	ADD		 	 
- stack 0: 0x810
6944	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
6945	 343	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x34800020362FFDC01B50F00011400F001330016014D00A402F0000000B8F0F1
6946	 344	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0x34800020362FFDC01B50F00011400F001330016014D00A402F0000000B8F0F1
- stack 0: 0xF0
6947	 346	SHR		 	 
- stack 1: 0x810
- stack 0: 0x348
6948	 347	JUMP		 	 
- stack 0: 0x810
6949	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x810
6950	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x810
- stack 0: 0x810
6951	 34A	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x34800020362FFDC01B50F00011400F001330016014D00A402F0000000B8F0F1
6952	 34B	PUSH1	E0	 	 
- stack 2: 0x810
- stack 1: 0x34800020362FFDC01B50F00011400F001330016014D00A402F0000000B8F0F1
- stack 0: 0xE0
6953	 34D	SHR		 	 
- stack 1: 0x810
- stack 0: 0x3480002
6954	 34E	PUSH2	FFFF	 	 
- stack 2: 0x810
- stack 1: 0x3480002
- stack 0: 0xFFFF
6955	 351	AND		 	 
- stack 1: 0x810
- stack 0: 0x2
6956	 352	PUSH1	01	 	 
- stack 2: 0x810
- stack 1: 0x2
- stack 0: 0x1
6957	 354	SIGNEXTEND		 	 
- stack 1: 0x810
- stack 0: 0x2
6958	 355	PUSH2	00A0	 	 
- stack 2: 0x810
- stack 1: 0x2
- stack 0: 0xA0
6959	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x810
6960	 359	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
6961	 35B	ADD		 	 
- stack 0: 0x814
6962	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
6963	 35D	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x362FFDC01B50F00011400F001330016014D00A402F0000000B8F0F100CBFF0F
6964	 35E	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0x362FFDC01B50F00011400F001330016014D00A402F0000000B8F0F100CBFF0F
- stack 0: 0xF0
6965	 360	SHR		 	 
- stack 1: 0x814
- stack 0: 0x362
6966	 361	JUMP		 	 
- stack 0: 0x814
6967	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x814
6968	 363	PUSH2	0080	 	 
- stack 1: 0x814
- stack 0: 0x80
6969	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x814
- stack 0: 0x2
6970	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6971	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x814
- stack 0: 0x2
6972	 36D	PUSH2	00A0	 	 
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0xA0
6973	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0x2
6974	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x814
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6975	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0x2
6976	 377	SUB		 	 
- stack 1: 0x814
- stack 0: 0x0
6977	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x814
- stack 1: 0x0
- stack 0: 0x380
6978	 37B	JUMPI		 	 
- stack 0: 0x814
6979	 37C	PUSH2	039A	 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 1: 0x814
- stack 0: 0x39A
6980	 37F	JUMP		 	 
- stack 0: 0x814
6981	 39A	JUMPDEST		 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x814
6982	 39B	PUSH1	04	 	 
- stack 1: 0x814
- stack 0: 0x4
6983	 39D	ADD		 	 
- stack 0: 0x818
6984	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
6985	 39F	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x1B50F00011400F001330016014D00A402F0000000B8F0F100CBFF0F03E60000
6986	 3A0	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x1B50F00011400F001330016014D00A402F0000000B8F0F100CBFF0F03E60000
- stack 0: 0xF0
6987	 3A2	SHR		 	 
- stack 1: 0x818
- stack 0: 0x1B5
6988	 3A3	JUMP		 	 
- stack 0: 0x818
6989	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00eb7	  ;; # instr: lui t4,0xf00(ignore imm)
- stack 0: 0x818
6990	 1B6	PUSH4	00f00000	 	 
- stack 1: 0x818
- stack 0: 0xF00000
6991	 1BB	PUSH2	03A0	 	 
- stack 2: 0x818
- stack 1: 0xF00000
- stack 0: 0x3A0
6992	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x818
6993	 1BF	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
6994	 1C1	ADD		 	 
- stack 0: 0x81C
6995	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
6996	 1C3	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x11400F001330016014D00A402F0000000B8F0F100CBFF0F03E6000003E60000
6997	 1C4	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0x11400F001330016014D00A402F0000000B8F0F100CBFF0F03E6000003E60000
- stack 0: 0xF0
6998	 1C6	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x114
6999	 1C7	JUMP		 	 
- stack 0: 0x81C
7000	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x81C
7001	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x81C
- stack 0: 0x81C
7002	 116	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x11400F001330016014D00A402F0000000B8F0F100CBFF0F03E6000003E60000
7003	 117	PUSH1	E0	 	 
- stack 2: 0x81C
- stack 1: 0x11400F001330016014D00A402F0000000B8F0F100CBFF0F03E6000003E60000
- stack 0: 0xE0
7004	 119	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x11400F0
7005	 11A	PUSH2	FFFF	 	 
- stack 2: 0x81C
- stack 1: 0x11400F0
- stack 0: 0xFFFF
7006	 11D	AND		 	 
- stack 1: 0x81C
- stack 0: 0xF0
7007	 11E	PUSH1	01	 	 
- stack 2: 0x81C
- stack 1: 0xF0
- stack 0: 0x1
7008	 120	SIGNEXTEND		 	 
- stack 1: 0x81C
- stack 0: 0xF0
7009	 121	PUSH2	03A0	 	 
- stack 2: 0x81C
- stack 1: 0xF0
- stack 0: 0x3A0
7010	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x81C
- stack 1: 0xF0
- stack 0: 0xF00000
7011	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x81C
- stack 0: 0xF000F0
7012	 126	PUSH2	03A0	 	 
- stack 2: 0x81C
- stack 1: 0xF000F0
- stack 0: 0x3A0
7013	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x81C
7014	 12A	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
7015	 12C	ADD		 	 
- stack 0: 0x820
7016	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
7017	 12E	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x1330016014D00A402F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0
7018	 12F	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0x1330016014D00A402F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0
- stack 0: 0xF0
7019	 131	SHR		 	 
- stack 1: 0x820
- stack 0: 0x133
7020	 132	JUMP		 	 
- stack 0: 0x820
7021	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x820
7022	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x820
- stack 0: 0x820
7023	 135	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x1330016014D00A402F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0
7024	 136	PUSH1	E0	 	 
- stack 2: 0x820
- stack 1: 0x1330016014D00A402F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0
- stack 0: 0xE0
7025	 138	SHR		 	 
- stack 1: 0x820
- stack 0: 0x1330016
7026	 139	PUSH2	FFFF	 	 
- stack 2: 0x820
- stack 1: 0x1330016
- stack 0: 0xFFFF
7027	 13C	AND		 	 
- stack 1: 0x820
- stack 0: 0x16
7028	 13D	PUSH1	01	 	 
- stack 2: 0x820
- stack 1: 0x16
- stack 0: 0x1
7029	 13F	SIGNEXTEND		 	 
- stack 1: 0x820
- stack 0: 0x16
7030	 140	PUSH2	0380	 	 
- stack 2: 0x820
- stack 1: 0x16
- stack 0: 0x380
7031	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x820
7032	 144	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
7033	 146	ADD		 	 
- stack 0: 0x824
7034	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
7035	 148	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x14D00A402F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0009900FF
7036	 149	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x14D00A402F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0009900FF
- stack 0: 0xF0
7037	 14B	SHR		 	 
- stack 1: 0x824
- stack 0: 0x14D
7038	 14C	JUMP		 	 
- stack 0: 0x824
7039	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x824
7040	 14E	PUSH2	0060	 	 
- stack 1: 0x824
- stack 0: 0x60
7041	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x824
- stack 0: 0xF000F0
7042	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x824
- stack 1: 0xF000F0
- stack 0: 0xFFFFFFFF
7043	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x824
- stack 0: 0xF000F0
7044	 158	PUSH2	03A0	 	 
- stack 2: 0x824
- stack 1: 0xF000F0
- stack 0: 0x3A0
7045	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x824
- stack 1: 0xF000F0
- stack 0: 0xF000F0
7046	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x824
- stack 2: 0xF000F0
- stack 1: 0xF000F0
- stack 0: 0xFFFFFFFF
7047	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x824
- stack 1: 0xF000F0
- stack 0: 0xF000F0
7048	 162	SUB		 	 
- stack 1: 0x824
- stack 0: 0x0
7049	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x824
- stack 1: 0x0
- stack 0: 0x16B
7050	 166	JUMPI		 	 
- stack 0: 0x824
7051	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x824
- stack 0: 0x185
7052	 16A	JUMP		 	 
- stack 0: 0x824
7053	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x824
7054	 186	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
7055	 188	ADD		 	 
- stack 0: 0x828
7056	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
7057	 18A	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x2F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA0000
7058	 18B	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x2F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA0000
- stack 0: 0xF0
7059	 18D	SHR		 	 
- stack 1: 0x828
- stack 0: 0x2F0
7060	 18E	JUMP		 	 
- stack 0: 0x828
7061	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x828
7062	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
7063	 2F2	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x2F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA0000
7064	 2F3	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0x2F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA0000
- stack 0: 0xE0
7065	 2F5	SHR		 	 
- stack 1: 0x828
- stack 0: 0x2F00000
7066	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0x2F00000
- stack 0: 0xFFFF
7067	 2F9	AND		 	 
- stack 1: 0x828
- stack 0: 0x0
7068	 2FA	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0x0
- stack 0: 0x1
7069	 2FC	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0x0
7070	 2FD	PUSH2	0080	 	 
- stack 2: 0x828
- stack 1: 0x0
- stack 0: 0x80
7071	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x828
7072	 301	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
7073	 303	ADD		 	 
- stack 0: 0x82C
7074	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
7075	 305	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0xB8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA000003290001
7076	 306	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0xB8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA000003290001
- stack 0: 0xF0
7077	 308	SHR		 	 
- stack 1: 0x82C
- stack 0: 0xB8
7078	 309	JUMP		 	 
- stack 0: 0x82C
7079	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x82C
7080	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x82C
- stack 0: 0xF0F1000
7081	 BE	PUSH2	0040	 	 
- stack 2: 0x82C
- stack 1: 0xF0F1000
- stack 0: 0x40
7082	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x82C
7083	 C2	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
7084	 C4	ADD		 	 
- stack 0: 0x830
7085	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
7086	 C6	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
7087	 C7	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
- stack 0: 0xF0
7088	 C9	SHR		 	 
- stack 1: 0x830
- stack 0: 0xCB
7089	 CA	JUMP		 	 
- stack 0: 0x830
7090	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x830
7091	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x830
- stack 0: 0x830
7092	 CD	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
7093	 CE	PUSH1	E0	 	 
- stack 2: 0x830
- stack 1: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
- stack 0: 0xE0
7094	 D0	SHR		 	 
- stack 1: 0x830
- stack 0: 0xCBFF0F
7095	 D1	PUSH2	FFFF	 	 
- stack 2: 0x830
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
7096	 D4	AND		 	 
- stack 1: 0x830
- stack 0: 0xFF0F
7097	 D5	PUSH1	01	 	 
- stack 2: 0x830
- stack 1: 0xFF0F
- stack 0: 0x1
7098	 D7	SIGNEXTEND		 	 
- stack 1: 0x830
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
7099	 D8	PUSH2	0040	 	 
- stack 2: 0x830
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
7100	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x830
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
7101	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x830
- stack 0: 0xF0F0F0F
7102	 DD	PUSH2	0040	 	 
- stack 2: 0x830
- stack 1: 0xF0F0F0F
- stack 0: 0x40
7103	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x830
7104	 E1	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
7105	 E3	ADD		 	 
- stack 0: 0x834
7106	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
7107	 E5	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
7108	 E6	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
- stack 0: 0xF0
7109	 E8	SHR		 	 
- stack 1: 0x834
- stack 0: 0x3E6
7110	 E9	JUMP		 	 
- stack 0: 0x834
7111	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x834
7112	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x834
- stack 0: 0x834
7113	 3E8	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
7114	 3E9	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
- stack 0: 0xE0
7115	 3EB	SHR		 	 
- stack 1: 0x834
- stack 0: 0x3E60000
7116	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x834
- stack 1: 0x3E60000
- stack 0: 0xFFFF
7117	 3EF	AND		 	 
- stack 1: 0x834
- stack 0: 0x0
7118	 3F0	PUSH1	01	 	 
- stack 2: 0x834
- stack 1: 0x0
- stack 0: 0x1
7119	 3F2	SIGNEXTEND		 	 
- stack 1: 0x834
- stack 0: 0x0
7120	 3F3	POP		 	 
- stack 0: 0x834
7121	 3F4	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
7122	 3F6	ADD		 	 
- stack 0: 0x838
7123	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
7124	 3F8	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DB00F0
7125	 3F9	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xF0
7126	 3FB	SHR		 	 
- stack 1: 0x838
- stack 0: 0x3E6
7127	 3FC	JUMP		 	 
- stack 0: 0x838
7128	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x838
7129	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x838
- stack 0: 0x838
7130	 3E8	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DB00F0
7131	 3E9	PUSH1	E0	 	 
- stack 2: 0x838
- stack 1: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xE0
7132	 3EB	SHR		 	 
- stack 1: 0x838
- stack 0: 0x3E60000
7133	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x838
- stack 1: 0x3E60000
- stack 0: 0xFFFF
7134	 3EF	AND		 	 
- stack 1: 0x838
- stack 0: 0x0
7135	 3F0	PUSH1	01	 	 
- stack 2: 0x838
- stack 1: 0x0
- stack 0: 0x1
7136	 3F2	SIGNEXTEND		 	 
- stack 1: 0x838
- stack 0: 0x0
7137	 3F3	POP		 	 
- stack 0: 0x838
7138	 3F4	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
7139	 3F6	ADD		 	 
- stack 0: 0x83C
7140	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
7141	 3F8	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x1C80FF0009900FF00EA000003290001034800020362FFDC01DB00F00114000F
7142	 3F9	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x1C80FF0009900FF00EA000003290001034800020362FFDC01DB00F00114000F
- stack 0: 0xF0
7143	 3FB	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x1C8
7144	 3FC	JUMP		 	 
- stack 0: 0x83C
7145	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x83C
7146	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x83C
- stack 0: 0xFF0000
7147	 1CE	PUSH2	0020	 	 
- stack 2: 0x83C
- stack 1: 0xFF0000
- stack 0: 0x20
7148	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x83C
7149	 1D2	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
7150	 1D4	ADD		 	 
- stack 0: 0x840
7151	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
7152	 1D6	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x9900FF00EA000003290001034800020362FFDC01DB00F00114000F01330017
7153	 1D7	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0x9900FF00EA000003290001034800020362FFDC01DB00F00114000F01330017
- stack 0: 0xF0
7154	 1D9	SHR		 	 
- stack 1: 0x840
- stack 0: 0x99
7155	 1DA	JUMP		 	 
- stack 0: 0x840
7156	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x840
7157	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x840
- stack 0: 0x840
7158	 9B	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x9900FF00EA000003290001034800020362FFDC01DB00F00114000F01330017
7159	 9C	PUSH1	E0	 	 
- stack 2: 0x840
- stack 1: 0x9900FF00EA000003290001034800020362FFDC01DB00F00114000F01330017
- stack 0: 0xE0
7160	 9E	SHR		 	 
- stack 1: 0x840
- stack 0: 0x9900FF
7161	 9F	PUSH2	FFFF	 	 
- stack 2: 0x840
- stack 1: 0x9900FF
- stack 0: 0xFFFF
7162	 A2	AND		 	 
- stack 1: 0x840
- stack 0: 0xFF
7163	 A3	PUSH1	01	 	 
- stack 2: 0x840
- stack 1: 0xFF
- stack 0: 0x1
7164	 A5	SIGNEXTEND		 	 
- stack 1: 0x840
- stack 0: 0xFF
7165	 A6	PUSH2	0020	 	 
- stack 2: 0x840
- stack 1: 0xFF
- stack 0: 0x20
7166	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x840
- stack 1: 0xFF
- stack 0: 0xFF0000
7167	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x840
- stack 0: 0xFF00FF
7168	 AB	PUSH2	0020	 	 
- stack 2: 0x840
- stack 1: 0xFF00FF
- stack 0: 0x20
7169	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x840
7170	 AF	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
7171	 B1	ADD		 	 
- stack 0: 0x844
7172	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
7173	 B3	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0xEA000003290001034800020362FFDC01DB00F00114000F01330017014D0068
7174	 B4	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0xEA000003290001034800020362FFDC01DB00F00114000F01330017014D0068
- stack 0: 0xF0
7175	 B6	SHR		 	 
- stack 1: 0x844
- stack 0: 0xEA
7176	 B7	JUMP		 	 
- stack 0: 0x844
7177	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x844
7178	 EB	PUSH2	0040	 	 
- stack 1: 0x844
- stack 0: 0x40
7179	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x844
- stack 0: 0xF0F0F0F
7180	 EF	PUSH2	0020	 	 
- stack 2: 0x844
- stack 1: 0xF0F0F0F
- stack 0: 0x20
7181	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x844
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
7182	 F3	AND		 	  ;; # AND
- stack 1: 0x844
- stack 0: 0xF000F
7183	 F4	PUSH2	0060	 	 
- stack 2: 0x844
- stack 1: 0xF000F
- stack 0: 0x60
7184	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x844
7185	 F8	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
7186	 FA	ADD		 	 
- stack 0: 0x848
7187	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
7188	 FC	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F01330017014D00680086F010
7189	 FD	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F01330017014D00680086F010
- stack 0: 0xF0
7190	 FF	SHR		 	 
- stack 1: 0x848
- stack 0: 0x329
7191	 100	JUMP		 	 
- stack 0: 0x848
7192	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x848
7193	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x848
- stack 0: 0x848
7194	 32B	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F01330017014D00680086F010
7195	 32C	PUSH1	E0	 	 
- stack 2: 0x848
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F01330017014D00680086F010
- stack 0: 0xE0
7196	 32E	SHR		 	 
- stack 1: 0x848
- stack 0: 0x3290001
7197	 32F	PUSH2	FFFF	 	 
- stack 2: 0x848
- stack 1: 0x3290001
- stack 0: 0xFFFF
7198	 332	AND		 	 
- stack 1: 0x848
- stack 0: 0x1
7199	 333	PUSH1	01	 	 
- stack 2: 0x848
- stack 1: 0x1
- stack 0: 0x1
7200	 335	SIGNEXTEND		 	 
- stack 1: 0x848
- stack 0: 0x1
7201	 336	PUSH2	0080	 	 
- stack 2: 0x848
- stack 1: 0x1
- stack 0: 0x80
7202	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x848
- stack 1: 0x1
- stack 0: 0x0
7203	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x848
- stack 0: 0x1
7204	 33B	PUSH2	0080	 	 
- stack 2: 0x848
- stack 1: 0x1
- stack 0: 0x80
7205	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x848
7206	 33F	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
7207	 341	ADD		 	 
- stack 0: 0x84C
7208	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
7209	 343	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x34800020362FFDC01DB00F00114000F01330017014D00680086F0100099FF00
7210	 344	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0x34800020362FFDC01DB00F00114000F01330017014D00680086F0100099FF00
- stack 0: 0xF0
7211	 346	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x348
7212	 347	JUMP		 	 
- stack 0: 0x84C
7213	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x84C
7214	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x84C
- stack 0: 0x84C
7215	 34A	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x34800020362FFDC01DB00F00114000F01330017014D00680086F0100099FF00
7216	 34B	PUSH1	E0	 	 
- stack 2: 0x84C
- stack 1: 0x34800020362FFDC01DB00F00114000F01330017014D00680086F0100099FF00
- stack 0: 0xE0
7217	 34D	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x3480002
7218	 34E	PUSH2	FFFF	 	 
- stack 2: 0x84C
- stack 1: 0x3480002
- stack 0: 0xFFFF
7219	 351	AND		 	 
- stack 1: 0x84C
- stack 0: 0x2
7220	 352	PUSH1	01	 	 
- stack 2: 0x84C
- stack 1: 0x2
- stack 0: 0x1
7221	 354	SIGNEXTEND		 	 
- stack 1: 0x84C
- stack 0: 0x2
7222	 355	PUSH2	00A0	 	 
- stack 2: 0x84C
- stack 1: 0x2
- stack 0: 0xA0
7223	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x84C
7224	 359	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
7225	 35B	ADD		 	 
- stack 0: 0x850
7226	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
7227	 35D	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x362FFDC01DB00F00114000F01330017014D00680086F0100099FF0003FD0000
7228	 35E	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0x362FFDC01DB00F00114000F01330017014D00680086F0100099FF0003FD0000
- stack 0: 0xF0
7229	 360	SHR		 	 
- stack 1: 0x850
- stack 0: 0x362
7230	 361	JUMP		 	 
- stack 0: 0x850
7231	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x850
7232	 363	PUSH2	0080	 	 
- stack 1: 0x850
- stack 0: 0x80
7233	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x850
- stack 0: 0x1
7234	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7235	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x850
- stack 0: 0x1
7236	 36D	PUSH2	00A0	 	 
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0xA0
7237	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0x2
7238	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x850
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7239	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0x2
7240	 377	SUB		 	 
- stack 1: 0x850
- stack 0: 0x1
7241	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0x380
7242	 37B	JUMPI		 	 
- stack 0: 0x850
7243	 380	JUMPDEST		 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x850
7244	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x850
- stack 0: 0x850
7245	 382	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x362FFDC01DB00F00114000F01330017014D00680086F0100099FF0003FD0000
7246	 383	PUSH1	E0	 	 
- stack 2: 0x850
- stack 1: 0x362FFDC01DB00F00114000F01330017014D00680086F0100099FF0003FD0000
- stack 0: 0xE0
7247	 385	SHR		 	 
- stack 1: 0x850
- stack 0: 0x362FFDC
7248	 386	PUSH2	FFFF	 	 
- stack 2: 0x850
- stack 1: 0x362FFDC
- stack 0: 0xFFFF
7249	 389	AND		 	 
- stack 1: 0x850
- stack 0: 0xFFDC
7250	 38A	PUSH1	01	 	 
- stack 2: 0x850
- stack 1: 0xFFDC
- stack 0: 0x1
7251	 38C	SIGNEXTEND		 	 
- stack 1: 0x850
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
7252	 38D	ADD		 	 
- stack 0: 0x82C
7253	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x82C
- stack 0: 0xFFFFFFFF
7254	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x82C
7255	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
7256	 395	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0xB8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA000003290001
7257	 396	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0xB8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA000003290001
- stack 0: 0xF0
7258	 398	SHR		 	 
- stack 1: 0x82C
- stack 0: 0xB8
7259	 399	JUMP		 	 
- stack 0: 0x82C
7260	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x82C
7261	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x82C
- stack 0: 0xF0F1000
7262	 BE	PUSH2	0040	 	 
- stack 2: 0x82C
- stack 1: 0xF0F1000
- stack 0: 0x40
7263	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x82C
7264	 C2	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
7265	 C4	ADD		 	 
- stack 0: 0x830
7266	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
7267	 C6	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
7268	 C7	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
- stack 0: 0xF0
7269	 C9	SHR		 	 
- stack 1: 0x830
- stack 0: 0xCB
7270	 CA	JUMP		 	 
- stack 0: 0x830
7271	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x830
7272	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x830
- stack 0: 0x830
7273	 CD	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
7274	 CE	PUSH1	E0	 	 
- stack 2: 0x830
- stack 1: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
- stack 0: 0xE0
7275	 D0	SHR		 	 
- stack 1: 0x830
- stack 0: 0xCBFF0F
7276	 D1	PUSH2	FFFF	 	 
- stack 2: 0x830
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
7277	 D4	AND		 	 
- stack 1: 0x830
- stack 0: 0xFF0F
7278	 D5	PUSH1	01	 	 
- stack 2: 0x830
- stack 1: 0xFF0F
- stack 0: 0x1
7279	 D7	SIGNEXTEND		 	 
- stack 1: 0x830
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
7280	 D8	PUSH2	0040	 	 
- stack 2: 0x830
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
7281	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x830
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
7282	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x830
- stack 0: 0xF0F0F0F
7283	 DD	PUSH2	0040	 	 
- stack 2: 0x830
- stack 1: 0xF0F0F0F
- stack 0: 0x40
7284	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x830
7285	 E1	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
7286	 E3	ADD		 	 
- stack 0: 0x834
7287	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
7288	 E5	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
7289	 E6	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
- stack 0: 0xF0
7290	 E8	SHR		 	 
- stack 1: 0x834
- stack 0: 0x3E6
7291	 E9	JUMP		 	 
- stack 0: 0x834
7292	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x834
7293	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x834
- stack 0: 0x834
7294	 3E8	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
7295	 3E9	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
- stack 0: 0xE0
7296	 3EB	SHR		 	 
- stack 1: 0x834
- stack 0: 0x3E60000
7297	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x834
- stack 1: 0x3E60000
- stack 0: 0xFFFF
7298	 3EF	AND		 	 
- stack 1: 0x834
- stack 0: 0x0
7299	 3F0	PUSH1	01	 	 
- stack 2: 0x834
- stack 1: 0x0
- stack 0: 0x1
7300	 3F2	SIGNEXTEND		 	 
- stack 1: 0x834
- stack 0: 0x0
7301	 3F3	POP		 	 
- stack 0: 0x834
7302	 3F4	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
7303	 3F6	ADD		 	 
- stack 0: 0x838
7304	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
7305	 3F8	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DB00F0
7306	 3F9	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xF0
7307	 3FB	SHR		 	 
- stack 1: 0x838
- stack 0: 0x3E6
7308	 3FC	JUMP		 	 
- stack 0: 0x838
7309	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x838
7310	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x838
- stack 0: 0x838
7311	 3E8	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DB00F0
7312	 3E9	PUSH1	E0	 	 
- stack 2: 0x838
- stack 1: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DB00F0
- stack 0: 0xE0
7313	 3EB	SHR		 	 
- stack 1: 0x838
- stack 0: 0x3E60000
7314	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x838
- stack 1: 0x3E60000
- stack 0: 0xFFFF
7315	 3EF	AND		 	 
- stack 1: 0x838
- stack 0: 0x0
7316	 3F0	PUSH1	01	 	 
- stack 2: 0x838
- stack 1: 0x0
- stack 0: 0x1
7317	 3F2	SIGNEXTEND		 	 
- stack 1: 0x838
- stack 0: 0x0
7318	 3F3	POP		 	 
- stack 0: 0x838
7319	 3F4	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
7320	 3F6	ADD		 	 
- stack 0: 0x83C
7321	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
7322	 3F8	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x1C80FF0009900FF00EA000003290001034800020362FFDC01DB00F00114000F
7323	 3F9	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x1C80FF0009900FF00EA000003290001034800020362FFDC01DB00F00114000F
- stack 0: 0xF0
7324	 3FB	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x1C8
7325	 3FC	JUMP		 	 
- stack 0: 0x83C
7326	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x83C
7327	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x83C
- stack 0: 0xFF0000
7328	 1CE	PUSH2	0020	 	 
- stack 2: 0x83C
- stack 1: 0xFF0000
- stack 0: 0x20
7329	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x83C
7330	 1D2	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
7331	 1D4	ADD		 	 
- stack 0: 0x840
7332	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
7333	 1D6	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x9900FF00EA000003290001034800020362FFDC01DB00F00114000F01330017
7334	 1D7	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0x9900FF00EA000003290001034800020362FFDC01DB00F00114000F01330017
- stack 0: 0xF0
7335	 1D9	SHR		 	 
- stack 1: 0x840
- stack 0: 0x99
7336	 1DA	JUMP		 	 
- stack 0: 0x840
7337	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x840
7338	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x840
- stack 0: 0x840
7339	 9B	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x9900FF00EA000003290001034800020362FFDC01DB00F00114000F01330017
7340	 9C	PUSH1	E0	 	 
- stack 2: 0x840
- stack 1: 0x9900FF00EA000003290001034800020362FFDC01DB00F00114000F01330017
- stack 0: 0xE0
7341	 9E	SHR		 	 
- stack 1: 0x840
- stack 0: 0x9900FF
7342	 9F	PUSH2	FFFF	 	 
- stack 2: 0x840
- stack 1: 0x9900FF
- stack 0: 0xFFFF
7343	 A2	AND		 	 
- stack 1: 0x840
- stack 0: 0xFF
7344	 A3	PUSH1	01	 	 
- stack 2: 0x840
- stack 1: 0xFF
- stack 0: 0x1
7345	 A5	SIGNEXTEND		 	 
- stack 1: 0x840
- stack 0: 0xFF
7346	 A6	PUSH2	0020	 	 
- stack 2: 0x840
- stack 1: 0xFF
- stack 0: 0x20
7347	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x840
- stack 1: 0xFF
- stack 0: 0xFF0000
7348	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x840
- stack 0: 0xFF00FF
7349	 AB	PUSH2	0020	 	 
- stack 2: 0x840
- stack 1: 0xFF00FF
- stack 0: 0x20
7350	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x840
7351	 AF	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
7352	 B1	ADD		 	 
- stack 0: 0x844
7353	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
7354	 B3	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0xEA000003290001034800020362FFDC01DB00F00114000F01330017014D0068
7355	 B4	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0xEA000003290001034800020362FFDC01DB00F00114000F01330017014D0068
- stack 0: 0xF0
7356	 B6	SHR		 	 
- stack 1: 0x844
- stack 0: 0xEA
7357	 B7	JUMP		 	 
- stack 0: 0x844
7358	 EA	JUMPDEST		 ;; __riscvimpl_AND_3_1_2	  ;; # instr: and gp,ra,sp(ignore imm)
- stack 0: 0x844
7359	 EB	PUSH2	0040	 	 
- stack 1: 0x844
- stack 0: 0x40
7360	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x844
- stack 0: 0xF0F0F0F
7361	 EF	PUSH2	0020	 	 
- stack 2: 0x844
- stack 1: 0xF0F0F0F
- stack 0: 0x20
7362	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x844
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
7363	 F3	AND		 	  ;; # AND
- stack 1: 0x844
- stack 0: 0xF000F
7364	 F4	PUSH2	0060	 	 
- stack 2: 0x844
- stack 1: 0xF000F
- stack 0: 0x60
7365	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x844
7366	 F8	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
7367	 FA	ADD		 	 
- stack 0: 0x848
7368	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
7369	 FC	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F01330017014D00680086F010
7370	 FD	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F01330017014D00680086F010
- stack 0: 0xF0
7371	 FF	SHR		 	 
- stack 1: 0x848
- stack 0: 0x329
7372	 100	JUMP		 	 
- stack 0: 0x848
7373	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x848
7374	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x848
- stack 0: 0x848
7375	 32B	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x3290001034800020362FFDC01DB00F00114000F01330017014D00680086F010
7376	 32C	PUSH1	E0	 	 
- stack 2: 0x848
- stack 1: 0x3290001034800020362FFDC01DB00F00114000F01330017014D00680086F010
- stack 0: 0xE0
7377	 32E	SHR		 	 
- stack 1: 0x848
- stack 0: 0x3290001
7378	 32F	PUSH2	FFFF	 	 
- stack 2: 0x848
- stack 1: 0x3290001
- stack 0: 0xFFFF
7379	 332	AND		 	 
- stack 1: 0x848
- stack 0: 0x1
7380	 333	PUSH1	01	 	 
- stack 2: 0x848
- stack 1: 0x1
- stack 0: 0x1
7381	 335	SIGNEXTEND		 	 
- stack 1: 0x848
- stack 0: 0x1
7382	 336	PUSH2	0080	 	 
- stack 2: 0x848
- stack 1: 0x1
- stack 0: 0x80
7383	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x848
- stack 1: 0x1
- stack 0: 0x1
7384	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x848
- stack 0: 0x2
7385	 33B	PUSH2	0080	 	 
- stack 2: 0x848
- stack 1: 0x2
- stack 0: 0x80
7386	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x848
7387	 33F	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
7388	 341	ADD		 	 
- stack 0: 0x84C
7389	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
7390	 343	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x34800020362FFDC01DB00F00114000F01330017014D00680086F0100099FF00
7391	 344	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0x34800020362FFDC01DB00F00114000F01330017014D00680086F0100099FF00
- stack 0: 0xF0
7392	 346	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x348
7393	 347	JUMP		 	 
- stack 0: 0x84C
7394	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x84C
7395	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x84C
- stack 0: 0x84C
7396	 34A	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x34800020362FFDC01DB00F00114000F01330017014D00680086F0100099FF00
7397	 34B	PUSH1	E0	 	 
- stack 2: 0x84C
- stack 1: 0x34800020362FFDC01DB00F00114000F01330017014D00680086F0100099FF00
- stack 0: 0xE0
7398	 34D	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x3480002
7399	 34E	PUSH2	FFFF	 	 
- stack 2: 0x84C
- stack 1: 0x3480002
- stack 0: 0xFFFF
7400	 351	AND		 	 
- stack 1: 0x84C
- stack 0: 0x2
7401	 352	PUSH1	01	 	 
- stack 2: 0x84C
- stack 1: 0x2
- stack 0: 0x1
7402	 354	SIGNEXTEND		 	 
- stack 1: 0x84C
- stack 0: 0x2
7403	 355	PUSH2	00A0	 	 
- stack 2: 0x84C
- stack 1: 0x2
- stack 0: 0xA0
7404	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x84C
7405	 359	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
7406	 35B	ADD		 	 
- stack 0: 0x850
7407	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
7408	 35D	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x362FFDC01DB00F00114000F01330017014D00680086F0100099FF0003FD0000
7409	 35E	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0x362FFDC01DB00F00114000F01330017014D00680086F0100099FF0003FD0000
- stack 0: 0xF0
7410	 360	SHR		 	 
- stack 1: 0x850
- stack 0: 0x362
7411	 361	JUMP		 	 
- stack 0: 0x850
7412	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x850
7413	 363	PUSH2	0080	 	 
- stack 1: 0x850
- stack 0: 0x80
7414	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x850
- stack 0: 0x2
7415	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x850
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7416	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x850
- stack 0: 0x2
7417	 36D	PUSH2	00A0	 	 
- stack 2: 0x850
- stack 1: 0x2
- stack 0: 0xA0
7418	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x850
- stack 1: 0x2
- stack 0: 0x2
7419	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x850
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7420	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x850
- stack 1: 0x2
- stack 0: 0x2
7421	 377	SUB		 	 
- stack 1: 0x850
- stack 0: 0x0
7422	 378	PUSH2	0380	 ;; _neq_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 2: 0x850
- stack 1: 0x0
- stack 0: 0x380
7423	 37B	JUMPI		 	 
- stack 0: 0x850
7424	 37C	PUSH2	039A	 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 1: 0x850
- stack 0: 0x39A
7425	 37F	JUMP		 	 
- stack 0: 0x850
7426	 39A	JUMPDEST		 ;; _neq_after_88d54eb4f41798735eddf23af95a991ff34e96ae70f8b06afcf20e4cbb842d3a	 
- stack 0: 0x850
7427	 39B	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
7428	 39D	ADD		 	 
- stack 0: 0x854
7429	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
7430	 39F	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x1DB00F00114000F01330017014D00680086F0100099FF0003FD000004120000
7431	 3A0	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x1DB00F00114000F01330017014D00680086F0100099FF0003FD000004120000
- stack 0: 0xF0
7432	 3A2	SHR		 	 
- stack 1: 0x854
- stack 0: 0x1DB
7433	 3A3	JUMP		 	 
- stack 0: 0x854
7434	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_f0eb7	  ;; # instr: lui t4,0xf0(ignore imm)
- stack 0: 0x854
7435	 1DC	PUSH4	000f0000	 	 
- stack 1: 0x854
- stack 0: 0xF0000
7436	 1E1	PUSH2	03A0	 	 
- stack 2: 0x854
- stack 1: 0xF0000
- stack 0: 0x3A0
7437	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x854
7438	 1E5	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
7439	 1E7	ADD		 	 
- stack 0: 0x858
7440	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
7441	 1E9	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x114000F01330017014D00680086F0100099FF0003FD00000412000001330018
7442	 1EA	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x114000F01330017014D00680086F0100099FF0003FD00000412000001330018
- stack 0: 0xF0
7443	 1EC	SHR		 	 
- stack 1: 0x858
- stack 0: 0x114
7444	 1ED	JUMP		 	 
- stack 0: 0x858
7445	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x858
7446	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x858
- stack 0: 0x858
7447	 116	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x114000F01330017014D00680086F0100099FF0003FD00000412000001330018
7448	 117	PUSH1	E0	 	 
- stack 2: 0x858
- stack 1: 0x114000F01330017014D00680086F0100099FF0003FD00000412000001330018
- stack 0: 0xE0
7449	 119	SHR		 	 
- stack 1: 0x858
- stack 0: 0x114000F
7450	 11A	PUSH2	FFFF	 	 
- stack 2: 0x858
- stack 1: 0x114000F
- stack 0: 0xFFFF
7451	 11D	AND		 	 
- stack 1: 0x858
- stack 0: 0xF
7452	 11E	PUSH1	01	 	 
- stack 2: 0x858
- stack 1: 0xF
- stack 0: 0x1
7453	 120	SIGNEXTEND		 	 
- stack 1: 0x858
- stack 0: 0xF
7454	 121	PUSH2	03A0	 	 
- stack 2: 0x858
- stack 1: 0xF
- stack 0: 0x3A0
7455	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x858
- stack 1: 0xF
- stack 0: 0xF0000
7456	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x858
- stack 0: 0xF000F
7457	 126	PUSH2	03A0	 	 
- stack 2: 0x858
- stack 1: 0xF000F
- stack 0: 0x3A0
7458	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x858
7459	 12A	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
7460	 12C	ADD		 	 
- stack 0: 0x85C
7461	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
7462	 12E	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x1330017014D00680086F0100099FF0003FD0000041200000133001802840050
7463	 12F	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x1330017014D00680086F0100099FF0003FD0000041200000133001802840050
- stack 0: 0xF0
7464	 131	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x133
7465	 132	JUMP		 	 
- stack 0: 0x85C
7466	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x85C
7467	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x85C
- stack 0: 0x85C
7468	 135	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x1330017014D00680086F0100099FF0003FD0000041200000133001802840050
7469	 136	PUSH1	E0	 	 
- stack 2: 0x85C
- stack 1: 0x1330017014D00680086F0100099FF0003FD0000041200000133001802840050
- stack 0: 0xE0
7470	 138	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x1330017
7471	 139	PUSH2	FFFF	 	 
- stack 2: 0x85C
- stack 1: 0x1330017
- stack 0: 0xFFFF
7472	 13C	AND		 	 
- stack 1: 0x85C
- stack 0: 0x17
7473	 13D	PUSH1	01	 	 
- stack 2: 0x85C
- stack 1: 0x17
- stack 0: 0x1
7474	 13F	SIGNEXTEND		 	 
- stack 1: 0x85C
- stack 0: 0x17
7475	 140	PUSH2	0380	 	 
- stack 2: 0x85C
- stack 1: 0x17
- stack 0: 0x380
7476	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x85C
7477	 144	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
7478	 146	ADD		 	 
- stack 0: 0x860
7479	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
7480	 148	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0x14D00680086F0100099FF0003FD000004120000013300180284005001C80FF0
7481	 149	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0x14D00680086F0100099FF0003FD000004120000013300180284005001C80FF0
- stack 0: 0xF0
7482	 14B	SHR		 	 
- stack 1: 0x860
- stack 0: 0x14D
7483	 14C	JUMP		 	 
- stack 0: 0x860
7484	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,498(ignore imm)
- stack 0: 0x860
7485	 14E	PUSH2	0060	 	 
- stack 1: 0x860
- stack 0: 0x60
7486	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x860
- stack 0: 0xF000F
7487	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x860
- stack 1: 0xF000F
- stack 0: 0xFFFFFFFF
7488	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x860
- stack 0: 0xF000F
7489	 158	PUSH2	03A0	 	 
- stack 2: 0x860
- stack 1: 0xF000F
- stack 0: 0x3A0
7490	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x860
- stack 1: 0xF000F
- stack 0: 0xF000F
7491	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x860
- stack 2: 0xF000F
- stack 1: 0xF000F
- stack 0: 0xFFFFFFFF
7492	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x860
- stack 1: 0xF000F
- stack 0: 0xF000F
7493	 162	SUB		 	 
- stack 1: 0x860
- stack 0: 0x0
7494	 163	PUSH2	016B	 ;; _neq_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 2: 0x860
- stack 1: 0x0
- stack 0: 0x16B
7495	 166	JUMPI		 	 
- stack 0: 0x860
7496	 167	PUSH2	0185	 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 1: 0x860
- stack 0: 0x185
7497	 16A	JUMP		 	 
- stack 0: 0x860
7498	 185	JUMPDEST		 ;; _neq_after_b5515d5e65343144557939847f5d9f21aa64860d76f4a1c8dd722464f1e65fb0	 
- stack 0: 0x860
7499	 186	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
7500	 188	ADD		 	 
- stack 0: 0x864
7501	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
7502	 18A	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x86F0100099FF0003FD000004120000013300180284005001C80FF0009900FF
7503	 18B	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0x86F0100099FF0003FD000004120000013300180284005001C80FF0009900FF
- stack 0: 0xF0
7504	 18D	SHR		 	 
- stack 1: 0x864
- stack 0: 0x86
7505	 18E	JUMP		 	 
- stack 0: 0x864
7506	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x864
7507	 87	PUSH4	ff010000	 	 
- stack 1: 0x864
- stack 0: 0xFF010000
7508	 8C	PUSH2	0020	 	 
- stack 2: 0x864
- stack 1: 0xFF010000
- stack 0: 0x20
7509	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x864
7510	 90	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
7511	 92	ADD		 	 
- stack 0: 0x868
7512	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
7513	 94	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x99FF0003FD000004120000013300180284005001C80FF0009900FF042C0000
7514	 95	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0x99FF0003FD000004120000013300180284005001C80FF0009900FF042C0000
- stack 0: 0xF0
7515	 97	SHR		 	 
- stack 1: 0x868
- stack 0: 0x99
7516	 98	JUMP		 	 
- stack 0: 0x868
7517	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x868
7518	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x868
- stack 0: 0x868
7519	 9B	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x99FF0003FD000004120000013300180284005001C80FF0009900FF042C0000
7520	 9C	PUSH1	E0	 	 
- stack 2: 0x868
- stack 1: 0x99FF0003FD000004120000013300180284005001C80FF0009900FF042C0000
- stack 0: 0xE0
7521	 9E	SHR		 	 
- stack 1: 0x868
- stack 0: 0x99FF00
7522	 9F	PUSH2	FFFF	 	 
- stack 2: 0x868
- stack 1: 0x99FF00
- stack 0: 0xFFFF
7523	 A2	AND		 	 
- stack 1: 0x868
- stack 0: 0xFF00
7524	 A3	PUSH1	01	 	 
- stack 2: 0x868
- stack 1: 0xFF00
- stack 0: 0x1
7525	 A5	SIGNEXTEND		 	 
- stack 1: 0x868
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
7526	 A6	PUSH2	0020	 	 
- stack 2: 0x868
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
7527	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x868
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
7528	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x868
- stack 0: 0xFF00FF00
7529	 AB	PUSH2	0020	 	 
- stack 2: 0x868
- stack 1: 0xFF00FF00
- stack 0: 0x20
7530	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x868
7531	 AF	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
7532	 B1	ADD		 	 
- stack 0: 0x86C
7533	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
7534	 B3	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x3FD000004120000013300180284005001C80FF0009900FF042C000004120000
7535	 B4	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0x3FD000004120000013300180284005001C80FF0009900FF042C000004120000
- stack 0: 0xF0
7536	 B6	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x3FD
7537	 B7	JUMP		 	 
- stack 0: 0x86C
7538	 3FD	JUMPDEST		 ;; __riscvimpl_AND_2_0_1	  ;; # instr: and sp,zero,ra(ignore imm)
- stack 0: 0x86C
7539	 3FE	PUSH2	0020	 	 
- stack 1: 0x86C
- stack 0: 0x20
7540	 401	MLOAD		 	  ;; # read from x1
- stack 1: 0x86C
- stack 0: 0xFF00FF00
7541	 402	PUSH1	00	 	 
- stack 2: 0x86C
- stack 1: 0xFF00FF00
- stack 0: 0x0
7542	 404	AND		 	  ;; # AND
- stack 1: 0x86C
- stack 0: 0x0
7543	 405	PUSH2	0040	 	 
- stack 2: 0x86C
- stack 1: 0x0
- stack 0: 0x40
7544	 408	MSTORE		 	  ;; # store to x2
- stack 0: 0x86C
7545	 409	PUSH1	04	 	 
- stack 1: 0x86C
- stack 0: 0x4
7546	 40B	ADD		 	 
- stack 0: 0x870
7547	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
7548	 40D	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x4120000013300180284005001C80FF0009900FF042C00000412000001330019
7549	 40E	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0x4120000013300180284005001C80FF0009900FF042C00000412000001330019
- stack 0: 0xF0
7550	 410	SHR		 	 
- stack 1: 0x870
- stack 0: 0x412
7551	 411	JUMP		 	 
- stack 0: 0x870
7552	 412	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x870
7553	 413	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x870
- stack 0: 0x870
7554	 414	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x4120000013300180284005001C80FF0009900FF042C00000412000001330019
7555	 415	PUSH1	E0	 	 
- stack 2: 0x870
- stack 1: 0x4120000013300180284005001C80FF0009900FF042C00000412000001330019
- stack 0: 0xE0
7556	 417	SHR		 	 
- stack 1: 0x870
- stack 0: 0x4120000
7557	 418	PUSH2	FFFF	 	 
- stack 2: 0x870
- stack 1: 0x4120000
- stack 0: 0xFFFF
7558	 41B	AND		 	 
- stack 1: 0x870
- stack 0: 0x0
7559	 41C	PUSH1	01	 	 
- stack 2: 0x870
- stack 1: 0x0
- stack 0: 0x1
7560	 41E	SIGNEXTEND		 	 
- stack 1: 0x870
- stack 0: 0x0
7561	 41F	PUSH2	03A0	 	 
- stack 2: 0x870
- stack 1: 0x0
- stack 0: 0x3A0
7562	 422	MSTORE		 	  ;; # store to x29
- stack 0: 0x870
7563	 423	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
7564	 425	ADD		 	 
- stack 0: 0x874
7565	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
7566	 427	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x13300180284005001C80FF0009900FF042C0000041200000133001902840038
7567	 428	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0x13300180284005001C80FF0009900FF042C0000041200000133001902840038
- stack 0: 0xF0
7568	 42A	SHR		 	 
- stack 1: 0x874
- stack 0: 0x133
7569	 42B	JUMP		 	 
- stack 0: 0x874
7570	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x874
7571	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x874
- stack 0: 0x874
7572	 135	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x13300180284005001C80FF0009900FF042C0000041200000133001902840038
7573	 136	PUSH1	E0	 	 
- stack 2: 0x874
- stack 1: 0x13300180284005001C80FF0009900FF042C0000041200000133001902840038
- stack 0: 0xE0
7574	 138	SHR		 	 
- stack 1: 0x874
- stack 0: 0x1330018
7575	 139	PUSH2	FFFF	 	 
- stack 2: 0x874
- stack 1: 0x1330018
- stack 0: 0xFFFF
7576	 13C	AND		 	 
- stack 1: 0x874
- stack 0: 0x18
7577	 13D	PUSH1	01	 	 
- stack 2: 0x874
- stack 1: 0x18
- stack 0: 0x1
7578	 13F	SIGNEXTEND		 	 
- stack 1: 0x874
- stack 0: 0x18
7579	 140	PUSH2	0380	 	 
- stack 2: 0x874
- stack 1: 0x18
- stack 0: 0x380
7580	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x874
7581	 144	PUSH1	04	 	 
- stack 1: 0x874
- stack 0: 0x4
7582	 146	ADD		 	 
- stack 0: 0x878
7583	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x878
- stack 0: 0x878
7584	 148	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x284005001C80FF0009900FF042C000004120000013300190284003804410000
7585	 149	PUSH1	F0	 	 
- stack 2: 0x878
- stack 1: 0x284005001C80FF0009900FF042C000004120000013300190284003804410000
- stack 0: 0xF0
7586	 14B	SHR		 	 
- stack 1: 0x878
- stack 0: 0x284
7587	 14C	JUMP		 	 
- stack 0: 0x878
7588	 284	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,3e8(ignore imm)
- stack 0: 0x878
7589	 285	PUSH2	0040	 	 
- stack 1: 0x878
- stack 0: 0x40
7590	 288	MLOAD		 	  ;; # read from x2
- stack 1: 0x878
- stack 0: 0x0
7591	 289	PUSH4	FFFFFFFF	 	 
- stack 2: 0x878
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7592	 28E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x878
- stack 0: 0x0
7593	 28F	PUSH2	03A0	 	 
- stack 2: 0x878
- stack 1: 0x0
- stack 0: 0x3A0
7594	 292	MLOAD		 	  ;; # read from x29
- stack 2: 0x878
- stack 1: 0x0
- stack 0: 0x0
7595	 293	PUSH4	FFFFFFFF	 	 
- stack 3: 0x878
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7596	 298	AND		 	  ;; # mask to 32 bits
- stack 2: 0x878
- stack 1: 0x0
- stack 0: 0x0
7597	 299	SUB		 	 
- stack 1: 0x878
- stack 0: 0x0
7598	 29A	PUSH2	02A2	 ;; _neq_f15815ee127881859fac9f9bc0c26de635c51b738047cf1a54aea4ac31ec16dd	 
- stack 2: 0x878
- stack 1: 0x0
- stack 0: 0x2A2
7599	 29D	JUMPI		 	 
- stack 0: 0x878
7600	 29E	PUSH2	02BC	 ;; _neq_after_f15815ee127881859fac9f9bc0c26de635c51b738047cf1a54aea4ac31ec16dd	 
- stack 1: 0x878
- stack 0: 0x2BC
7601	 2A1	JUMP		 	 
- stack 0: 0x878
7602	 2BC	JUMPDEST		 ;; _neq_after_f15815ee127881859fac9f9bc0c26de635c51b738047cf1a54aea4ac31ec16dd	 
- stack 0: 0x878
7603	 2BD	PUSH1	04	 	 
- stack 1: 0x878
- stack 0: 0x4
7604	 2BF	ADD		 	 
- stack 0: 0x87C
7605	 2C0	DUP1		 	  ;; # executing pc
- stack 1: 0x87C
- stack 0: 0x87C
7606	 2C1	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x1C80FF0009900FF042C00000412000001330019028400380441000004120000
7607	 2C2	PUSH1	F0	 	 
- stack 2: 0x87C
- stack 1: 0x1C80FF0009900FF042C00000412000001330019028400380441000004120000
- stack 0: 0xF0
7608	 2C4	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x1C8
7609	 2C5	JUMP		 	 
- stack 0: 0x87C
7610	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x87C
7611	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x87C
- stack 0: 0xFF0000
7612	 1CE	PUSH2	0020	 	 
- stack 2: 0x87C
- stack 1: 0xFF0000
- stack 0: 0x20
7613	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x87C
7614	 1D2	PUSH1	04	 	 
- stack 1: 0x87C
- stack 0: 0x4
7615	 1D4	ADD		 	 
- stack 0: 0x880
7616	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
7617	 1D6	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x9900FF042C000004120000013300190284003804410000041200000133001A
7618	 1D7	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0x9900FF042C000004120000013300190284003804410000041200000133001A
- stack 0: 0xF0
7619	 1D9	SHR		 	 
- stack 1: 0x880
- stack 0: 0x99
7620	 1DA	JUMP		 	 
- stack 0: 0x880
7621	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x880
7622	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x880
- stack 0: 0x880
7623	 9B	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x9900FF042C000004120000013300190284003804410000041200000133001A
7624	 9C	PUSH1	E0	 	 
- stack 2: 0x880
- stack 1: 0x9900FF042C000004120000013300190284003804410000041200000133001A
- stack 0: 0xE0
7625	 9E	SHR		 	 
- stack 1: 0x880
- stack 0: 0x9900FF
7626	 9F	PUSH2	FFFF	 	 
- stack 2: 0x880
- stack 1: 0x9900FF
- stack 0: 0xFFFF
7627	 A2	AND		 	 
- stack 1: 0x880
- stack 0: 0xFF
7628	 A3	PUSH1	01	 	 
- stack 2: 0x880
- stack 1: 0xFF
- stack 0: 0x1
7629	 A5	SIGNEXTEND		 	 
- stack 1: 0x880
- stack 0: 0xFF
7630	 A6	PUSH2	0020	 	 
- stack 2: 0x880
- stack 1: 0xFF
- stack 0: 0x20
7631	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x880
- stack 1: 0xFF
- stack 0: 0xFF0000
7632	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x880
- stack 0: 0xFF00FF
7633	 AB	PUSH2	0020	 	 
- stack 2: 0x880
- stack 1: 0xFF00FF
- stack 0: 0x20
7634	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x880
7635	 AF	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
7636	 B1	ADD		 	 
- stack 0: 0x884
7637	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
7638	 B3	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x42C000004120000013300190284003804410000041200000133001A022B0028
7639	 B4	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0x42C000004120000013300190284003804410000041200000133001A022B0028
- stack 0: 0xF0
7640	 B6	SHR		 	 
- stack 1: 0x884
- stack 0: 0x42C
7641	 B7	JUMP		 	 
- stack 0: 0x884
7642	 42C	JUMPDEST		 ;; __riscvimpl_AND_2_1_0	  ;; # instr: and sp,ra,zero(ignore imm)
- stack 0: 0x884
7643	 42D	PUSH1	00	 	 
- stack 1: 0x884
- stack 0: 0x0
7644	 42F	PUSH2	0020	 	 
- stack 2: 0x884
- stack 1: 0x0
- stack 0: 0x20
7645	 432	MLOAD		 	  ;; # read from x1
- stack 2: 0x884
- stack 1: 0x0
- stack 0: 0xFF00FF
7646	 433	AND		 	  ;; # AND
- stack 1: 0x884
- stack 0: 0x0
7647	 434	PUSH2	0040	 	 
- stack 2: 0x884
- stack 1: 0x0
- stack 0: 0x40
7648	 437	MSTORE		 	  ;; # store to x2
- stack 0: 0x884
7649	 438	PUSH1	04	 	 
- stack 1: 0x884
- stack 0: 0x4
7650	 43A	ADD		 	 
- stack 0: 0x888
7651	 43B	DUP1		 	  ;; # executing pc
- stack 1: 0x888
- stack 0: 0x888
7652	 43C	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x4120000013300190284003804410000041200000133001A022B002804541111
7653	 43D	PUSH1	F0	 	 
- stack 2: 0x888
- stack 1: 0x4120000013300190284003804410000041200000133001A022B002804541111
- stack 0: 0xF0
7654	 43F	SHR		 	 
- stack 1: 0x888
- stack 0: 0x412
7655	 440	JUMP		 	 
- stack 0: 0x888
7656	 412	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x888
7657	 413	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x888
- stack 0: 0x888
7658	 414	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x4120000013300190284003804410000041200000133001A022B002804541111
7659	 415	PUSH1	E0	 	 
- stack 2: 0x888
- stack 1: 0x4120000013300190284003804410000041200000133001A022B002804541111
- stack 0: 0xE0
7660	 417	SHR		 	 
- stack 1: 0x888
- stack 0: 0x4120000
7661	 418	PUSH2	FFFF	 	 
- stack 2: 0x888
- stack 1: 0x4120000
- stack 0: 0xFFFF
7662	 41B	AND		 	 
- stack 1: 0x888
- stack 0: 0x0
7663	 41C	PUSH1	01	 	 
- stack 2: 0x888
- stack 1: 0x0
- stack 0: 0x1
7664	 41E	SIGNEXTEND		 	 
- stack 1: 0x888
- stack 0: 0x0
7665	 41F	PUSH2	03A0	 	 
- stack 2: 0x888
- stack 1: 0x0
- stack 0: 0x3A0
7666	 422	MSTORE		 	  ;; # store to x29
- stack 0: 0x888
7667	 423	PUSH1	04	 	 
- stack 1: 0x888
- stack 0: 0x4
7668	 425	ADD		 	 
- stack 0: 0x88C
7669	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x88C
- stack 0: 0x88C
7670	 427	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0x13300190284003804410000041200000133001A022B00280454111100990111
7671	 428	PUSH1	F0	 	 
- stack 2: 0x88C
- stack 1: 0x13300190284003804410000041200000133001A022B00280454111100990111
- stack 0: 0xF0
7672	 42A	SHR		 	 
- stack 1: 0x88C
- stack 0: 0x133
7673	 42B	JUMP		 	 
- stack 0: 0x88C
7674	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x88C
7675	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x88C
- stack 0: 0x88C
7676	 135	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0x13300190284003804410000041200000133001A022B00280454111100990111
7677	 136	PUSH1	E0	 	 
- stack 2: 0x88C
- stack 1: 0x13300190284003804410000041200000133001A022B00280454111100990111
- stack 0: 0xE0
7678	 138	SHR		 	 
- stack 1: 0x88C
- stack 0: 0x1330019
7679	 139	PUSH2	FFFF	 	 
- stack 2: 0x88C
- stack 1: 0x1330019
- stack 0: 0xFFFF
7680	 13C	AND		 	 
- stack 1: 0x88C
- stack 0: 0x19
7681	 13D	PUSH1	01	 	 
- stack 2: 0x88C
- stack 1: 0x19
- stack 0: 0x1
7682	 13F	SIGNEXTEND		 	 
- stack 1: 0x88C
- stack 0: 0x19
7683	 140	PUSH2	0380	 	 
- stack 2: 0x88C
- stack 1: 0x19
- stack 0: 0x380
7684	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x88C
7685	 144	PUSH1	04	 	 
- stack 1: 0x88C
- stack 0: 0x4
7686	 146	ADD		 	 
- stack 0: 0x890
7687	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x890
- stack 0: 0x890
7688	 148	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0x284003804410000041200000133001A022B0028045411110099011104672222
7689	 149	PUSH1	F0	 	 
- stack 2: 0x890
- stack 1: 0x284003804410000041200000133001A022B0028045411110099011104672222
- stack 0: 0xF0
7690	 14B	SHR		 	 
- stack 1: 0x890
- stack 0: 0x284
7691	 14C	JUMP		 	 
- stack 0: 0x890
7692	 284	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,3e8(ignore imm)
- stack 0: 0x890
7693	 285	PUSH2	0040	 	 
- stack 1: 0x890
- stack 0: 0x40
7694	 288	MLOAD		 	  ;; # read from x2
- stack 1: 0x890
- stack 0: 0x0
7695	 289	PUSH4	FFFFFFFF	 	 
- stack 2: 0x890
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7696	 28E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x890
- stack 0: 0x0
7697	 28F	PUSH2	03A0	 	 
- stack 2: 0x890
- stack 1: 0x0
- stack 0: 0x3A0
7698	 292	MLOAD		 	  ;; # read from x29
- stack 2: 0x890
- stack 1: 0x0
- stack 0: 0x0
7699	 293	PUSH4	FFFFFFFF	 	 
- stack 3: 0x890
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7700	 298	AND		 	  ;; # mask to 32 bits
- stack 2: 0x890
- stack 1: 0x0
- stack 0: 0x0
7701	 299	SUB		 	 
- stack 1: 0x890
- stack 0: 0x0
7702	 29A	PUSH2	02A2	 ;; _neq_f15815ee127881859fac9f9bc0c26de635c51b738047cf1a54aea4ac31ec16dd	 
- stack 2: 0x890
- stack 1: 0x0
- stack 0: 0x2A2
7703	 29D	JUMPI		 	 
- stack 0: 0x890
7704	 29E	PUSH2	02BC	 ;; _neq_after_f15815ee127881859fac9f9bc0c26de635c51b738047cf1a54aea4ac31ec16dd	 
- stack 1: 0x890
- stack 0: 0x2BC
7705	 2A1	JUMP		 	 
- stack 0: 0x890
7706	 2BC	JUMPDEST		 ;; _neq_after_f15815ee127881859fac9f9bc0c26de635c51b738047cf1a54aea4ac31ec16dd	 
- stack 0: 0x890
7707	 2BD	PUSH1	04	 	 
- stack 1: 0x890
- stack 0: 0x4
7708	 2BF	ADD		 	 
- stack 0: 0x894
7709	 2C0	DUP1		 	  ;; # executing pc
- stack 1: 0x894
- stack 0: 0x894
7710	 2C1	MLOAD		 	 
- stack 1: 0x894
- stack 0: 0x4410000041200000133001A022B002804541111009901110467222200CB0222
7711	 2C2	PUSH1	F0	 	 
- stack 2: 0x894
- stack 1: 0x4410000041200000133001A022B002804541111009901110467222200CB0222
- stack 0: 0xF0
7712	 2C4	SHR		 	 
- stack 1: 0x894
- stack 0: 0x441
7713	 2C5	JUMP		 	 
- stack 0: 0x894
7714	 441	JUMPDEST		 ;; __riscvimpl_AND_1_0_0	  ;; # instr: and ra,zero,zero(ignore imm)
- stack 0: 0x894
7715	 442	PUSH1	00	 	 
- stack 1: 0x894
- stack 0: 0x0
7716	 444	PUSH1	00	 	 
- stack 2: 0x894
- stack 1: 0x0
- stack 0: 0x0
7717	 446	AND		 	  ;; # AND
- stack 1: 0x894
- stack 0: 0x0
7718	 447	PUSH2	0020	 	 
- stack 2: 0x894
- stack 1: 0x0
- stack 0: 0x20
7719	 44A	MSTORE		 	  ;; # store to x1
- stack 0: 0x894
7720	 44B	PUSH1	04	 	 
- stack 1: 0x894
- stack 0: 0x4
7721	 44D	ADD		 	 
- stack 0: 0x898
7722	 44E	DUP1		 	  ;; # executing pc
- stack 1: 0x898
- stack 0: 0x898
7723	 44F	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0x41200000133001A022B002804541111009901110467222200CB0222047A0000
7724	 450	PUSH1	F0	 	 
- stack 2: 0x898
- stack 1: 0x41200000133001A022B002804541111009901110467222200CB0222047A0000
- stack 0: 0xF0
7725	 452	SHR		 	 
- stack 1: 0x898
- stack 0: 0x412
7726	 453	JUMP		 	 
- stack 0: 0x898
7727	 412	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x898
7728	 413	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x898
- stack 0: 0x898
7729	 414	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0x41200000133001A022B002804541111009901110467222200CB0222047A0000
7730	 415	PUSH1	E0	 	 
- stack 2: 0x898
- stack 1: 0x41200000133001A022B002804541111009901110467222200CB0222047A0000
- stack 0: 0xE0
7731	 417	SHR		 	 
- stack 1: 0x898
- stack 0: 0x4120000
7732	 418	PUSH2	FFFF	 	 
- stack 2: 0x898
- stack 1: 0x4120000
- stack 0: 0xFFFF
7733	 41B	AND		 	 
- stack 1: 0x898
- stack 0: 0x0
7734	 41C	PUSH1	01	 	 
- stack 2: 0x898
- stack 1: 0x0
- stack 0: 0x1
7735	 41E	SIGNEXTEND		 	 
- stack 1: 0x898
- stack 0: 0x0
7736	 41F	PUSH2	03A0	 	 
- stack 2: 0x898
- stack 1: 0x0
- stack 0: 0x3A0
7737	 422	MSTORE		 	  ;; # store to x29
- stack 0: 0x898
7738	 423	PUSH1	04	 	 
- stack 1: 0x898
- stack 0: 0x4
7739	 425	ADD		 	 
- stack 0: 0x89C
7740	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x89C
- stack 0: 0x89C
7741	 427	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0x133001A022B002804541111009901110467222200CB0222047A000004120000
7742	 428	PUSH1	F0	 	 
- stack 2: 0x89C
- stack 1: 0x133001A022B002804541111009901110467222200CB0222047A000004120000
- stack 0: 0xF0
7743	 42A	SHR		 	 
- stack 1: 0x89C
- stack 0: 0x133
7744	 42B	JUMP		 	 
- stack 0: 0x89C
7745	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x89C
7746	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x89C
- stack 0: 0x89C
7747	 135	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0x133001A022B002804541111009901110467222200CB0222047A000004120000
7748	 136	PUSH1	E0	 	 
- stack 2: 0x89C
- stack 1: 0x133001A022B002804541111009901110467222200CB0222047A000004120000
- stack 0: 0xE0
7749	 138	SHR		 	 
- stack 1: 0x89C
- stack 0: 0x133001A
7750	 139	PUSH2	FFFF	 	 
- stack 2: 0x89C
- stack 1: 0x133001A
- stack 0: 0xFFFF
7751	 13C	AND		 	 
- stack 1: 0x89C
- stack 0: 0x1A
7752	 13D	PUSH1	01	 	 
- stack 2: 0x89C
- stack 1: 0x1A
- stack 0: 0x1
7753	 13F	SIGNEXTEND		 	 
- stack 1: 0x89C
- stack 0: 0x1A
7754	 140	PUSH2	0380	 	 
- stack 2: 0x89C
- stack 1: 0x1A
- stack 0: 0x380
7755	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x89C
7756	 144	PUSH1	04	 	 
- stack 1: 0x89C
- stack 0: 0x4
7757	 146	ADD		 	 
- stack 0: 0x8A0
7758	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x8A0
- stack 0: 0x8A0
7759	 148	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x22B002804541111009901110467222200CB0222047A0000041200000133001B
7760	 149	PUSH1	F0	 	 
- stack 2: 0x8A0
- stack 1: 0x22B002804541111009901110467222200CB0222047A0000041200000133001B
- stack 0: 0xF0
7761	 14B	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x22B
7762	 14C	JUMP		 	 
- stack 0: 0x8A0
7763	 22B	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,40c(ignore imm)
- stack 0: 0x8A0
7764	 22C	PUSH2	0020	 	 
- stack 1: 0x8A0
- stack 0: 0x20
7765	 22F	MLOAD		 	  ;; # read from x1
- stack 1: 0x8A0
- stack 0: 0x0
7766	 230	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8A0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7767	 235	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8A0
- stack 0: 0x0
7768	 236	PUSH2	03A0	 	 
- stack 2: 0x8A0
- stack 1: 0x0
- stack 0: 0x3A0
7769	 239	MLOAD		 	  ;; # read from x29
- stack 2: 0x8A0
- stack 1: 0x0
- stack 0: 0x0
7770	 23A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8A0
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7771	 23F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8A0
- stack 1: 0x0
- stack 0: 0x0
7772	 240	SUB		 	 
- stack 1: 0x8A0
- stack 0: 0x0
7773	 241	PUSH2	0249	 ;; _neq_bcd9aa3a0dc4df2c0f75cdb01e459221b14fc29f62d894044f03c8e9cf1ecaba	 
- stack 2: 0x8A0
- stack 1: 0x0
- stack 0: 0x249
7774	 244	JUMPI		 	 
- stack 0: 0x8A0
7775	 245	PUSH2	0263	 ;; _neq_after_bcd9aa3a0dc4df2c0f75cdb01e459221b14fc29f62d894044f03c8e9cf1ecaba	 
- stack 1: 0x8A0
- stack 0: 0x263
7776	 248	JUMP		 	 
- stack 0: 0x8A0
7777	 263	JUMPDEST		 ;; _neq_after_bcd9aa3a0dc4df2c0f75cdb01e459221b14fc29f62d894044f03c8e9cf1ecaba	 
- stack 0: 0x8A0
7778	 264	PUSH1	04	 	 
- stack 1: 0x8A0
- stack 0: 0x4
7779	 266	ADD		 	 
- stack 0: 0x8A4
7780	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x8A4
- stack 0: 0x8A4
7781	 268	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0x4541111009901110467222200CB0222047A0000041200000133001B048E0008
7782	 269	PUSH1	F0	 	 
- stack 2: 0x8A4
- stack 1: 0x4541111009901110467222200CB0222047A0000041200000133001B048E0008
- stack 0: 0xF0
7783	 26B	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0x454
7784	 26C	JUMP		 	 
- stack 0: 0x8A4
7785	 454	JUMPDEST		 ;; __riscvimpl_LUI_111110b7	  ;; # instr: lui ra,0x11111(ignore imm)
- stack 0: 0x8A4
7786	 455	PUSH4	11111000	 	 
- stack 1: 0x8A4
- stack 0: 0x11111000
7787	 45A	PUSH2	0020	 	 
- stack 2: 0x8A4
- stack 1: 0x11111000
- stack 0: 0x20
7788	 45D	MSTORE		 	  ;; # store to x1
- stack 0: 0x8A4
7789	 45E	PUSH1	04	 	 
- stack 1: 0x8A4
- stack 0: 0x4
7790	 460	ADD		 	 
- stack 0: 0x8A8
7791	 461	DUP1		 	  ;; # executing pc
- stack 1: 0x8A8
- stack 0: 0x8A8
7792	 462	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0x9901110467222200CB0222047A0000041200000133001B048E000804CE0018
7793	 463	PUSH1	F0	 	 
- stack 2: 0x8A8
- stack 1: 0x9901110467222200CB0222047A0000041200000133001B048E000804CE0018
- stack 0: 0xF0
7794	 465	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0x99
7795	 466	JUMP		 	 
- stack 0: 0x8A8
7796	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x8A8
7797	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A8
- stack 0: 0x8A8
7798	 9B	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0x9901110467222200CB0222047A0000041200000133001B048E000804CE0018
7799	 9C	PUSH1	E0	 	 
- stack 2: 0x8A8
- stack 1: 0x9901110467222200CB0222047A0000041200000133001B048E000804CE0018
- stack 0: 0xE0
7800	 9E	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0x990111
7801	 9F	PUSH2	FFFF	 	 
- stack 2: 0x8A8
- stack 1: 0x990111
- stack 0: 0xFFFF
7802	 A2	AND		 	 
- stack 1: 0x8A8
- stack 0: 0x111
7803	 A3	PUSH1	01	 	 
- stack 2: 0x8A8
- stack 1: 0x111
- stack 0: 0x1
7804	 A5	SIGNEXTEND		 	 
- stack 1: 0x8A8
- stack 0: 0x111
7805	 A6	PUSH2	0020	 	 
- stack 2: 0x8A8
- stack 1: 0x111
- stack 0: 0x20
7806	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x8A8
- stack 1: 0x111
- stack 0: 0x11111000
7807	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x8A8
- stack 0: 0x11111111
7808	 AB	PUSH2	0020	 	 
- stack 2: 0x8A8
- stack 1: 0x11111111
- stack 0: 0x20
7809	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x8A8
7810	 AF	PUSH1	04	 	 
- stack 1: 0x8A8
- stack 0: 0x4
7811	 B1	ADD		 	 
- stack 0: 0x8AC
7812	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x8AC
- stack 0: 0x8AC
7813	 B3	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0x467222200CB0222047A0000041200000133001B048E000804CE001800210001
7814	 B4	PUSH1	F0	 	 
- stack 2: 0x8AC
- stack 1: 0x467222200CB0222047A0000041200000133001B048E000804CE001800210001
- stack 0: 0xF0
7815	 B6	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0x467
7816	 B7	JUMP		 	 
- stack 0: 0x8AC
7817	 467	JUMPDEST		 ;; __riscvimpl_LUI_22222137	  ;; # instr: lui sp,0x22222(ignore imm)
- stack 0: 0x8AC
7818	 468	PUSH4	22222000	 	 
- stack 1: 0x8AC
- stack 0: 0x22222000
7819	 46D	PUSH2	0040	 	 
- stack 2: 0x8AC
- stack 1: 0x22222000
- stack 0: 0x40
7820	 470	MSTORE		 	  ;; # store to x2
- stack 0: 0x8AC
7821	 471	PUSH1	04	 	 
- stack 1: 0x8AC
- stack 0: 0x4
7822	 473	ADD		 	 
- stack 0: 0x8B0
7823	 474	DUP1		 	  ;; # executing pc
- stack 1: 0x8B0
- stack 0: 0x8B0
7824	 475	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0xCB0222047A0000041200000133001B048E000804CE0018002100010034F908
7825	 476	PUSH1	F0	 	 
- stack 2: 0x8B0
- stack 1: 0xCB0222047A0000041200000133001B048E000804CE0018002100010034F908
- stack 0: 0xF0
7826	 478	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0xCB
7827	 479	JUMP		 	 
- stack 0: 0x8B0
7828	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x8B0
7829	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B0
- stack 0: 0x8B0
7830	 CD	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0xCB0222047A0000041200000133001B048E000804CE0018002100010034F908
7831	 CE	PUSH1	E0	 	 
- stack 2: 0x8B0
- stack 1: 0xCB0222047A0000041200000133001B048E000804CE0018002100010034F908
- stack 0: 0xE0
7832	 D0	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0xCB0222
7833	 D1	PUSH2	FFFF	 	 
- stack 2: 0x8B0
- stack 1: 0xCB0222
- stack 0: 0xFFFF
7834	 D4	AND		 	 
- stack 1: 0x8B0
- stack 0: 0x222
7835	 D5	PUSH1	01	 	 
- stack 2: 0x8B0
- stack 1: 0x222
- stack 0: 0x1
7836	 D7	SIGNEXTEND		 	 
- stack 1: 0x8B0
- stack 0: 0x222
7837	 D8	PUSH2	0040	 	 
- stack 2: 0x8B0
- stack 1: 0x222
- stack 0: 0x40
7838	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x8B0
- stack 1: 0x222
- stack 0: 0x22222000
7839	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x8B0
- stack 0: 0x22222222
7840	 DD	PUSH2	0040	 	 
- stack 2: 0x8B0
- stack 1: 0x22222222
- stack 0: 0x40
7841	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x8B0
7842	 E1	PUSH1	04	 	 
- stack 1: 0x8B0
- stack 0: 0x4
7843	 E3	ADD		 	 
- stack 0: 0x8B4
7844	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x8B4
- stack 0: 0x8B4
7845	 E5	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x47A0000041200000133001B048E000804CE0018002100010034F90800530042
7846	 E6	PUSH1	F0	 	 
- stack 2: 0x8B4
- stack 1: 0x47A0000041200000133001B048E000804CE0018002100010034F90800530042
- stack 0: 0xF0
7847	 E8	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x47A
7848	 E9	JUMP		 	 
- stack 0: 0x8B4
7849	 47A	JUMPDEST		 ;; __riscvimpl_AND_0_1_2	  ;; # instr: and zero,ra,sp(ignore imm)
- stack 0: 0x8B4
7850	 47B	PUSH2	0040	 	 
- stack 1: 0x8B4
- stack 0: 0x40
7851	 47E	MLOAD		 	  ;; # read from x2
- stack 1: 0x8B4
- stack 0: 0x22222222
7852	 47F	PUSH2	0020	 	 
- stack 2: 0x8B4
- stack 1: 0x22222222
- stack 0: 0x20
7853	 482	MLOAD		 	  ;; # read from x1
- stack 2: 0x8B4
- stack 1: 0x22222222
- stack 0: 0x11111111
7854	 483	AND		 	  ;; # AND
- stack 1: 0x8B4
- stack 0: 0x0
7855	 484	POP		 	 
- stack 0: 0x8B4
7856	 485	PUSH1	04	 	 
- stack 1: 0x8B4
- stack 0: 0x4
7857	 487	ADD		 	 
- stack 0: 0x8B8
7858	 488	DUP1		 	  ;; # executing pc
- stack 1: 0x8B8
- stack 0: 0x8B8
7859	 489	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0x41200000133001B048E000804CE0018002100010034F9080053004200660000
7860	 48A	PUSH1	F0	 	 
- stack 2: 0x8B8
- stack 1: 0x41200000133001B048E000804CE0018002100010034F9080053004200660000
- stack 0: 0xF0
7861	 48C	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0x412
7862	 48D	JUMP		 	 
- stack 0: 0x8B8
7863	 412	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x8B8
7864	 413	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B8
- stack 0: 0x8B8
7865	 414	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0x41200000133001B048E000804CE0018002100010034F9080053004200660000
7866	 415	PUSH1	E0	 	 
- stack 2: 0x8B8
- stack 1: 0x41200000133001B048E000804CE0018002100010034F9080053004200660000
- stack 0: 0xE0
7867	 417	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0x4120000
7868	 418	PUSH2	FFFF	 	 
- stack 2: 0x8B8
- stack 1: 0x4120000
- stack 0: 0xFFFF
7869	 41B	AND		 	 
- stack 1: 0x8B8
- stack 0: 0x0
7870	 41C	PUSH1	01	 	 
- stack 2: 0x8B8
- stack 1: 0x0
- stack 0: 0x1
7871	 41E	SIGNEXTEND		 	 
- stack 1: 0x8B8
- stack 0: 0x0
7872	 41F	PUSH2	03A0	 	 
- stack 2: 0x8B8
- stack 1: 0x0
- stack 0: 0x3A0
7873	 422	MSTORE		 	  ;; # store to x29
- stack 0: 0x8B8
7874	 423	PUSH1	04	 	 
- stack 1: 0x8B8
- stack 0: 0x4
7875	 425	ADD		 	 
- stack 0: 0x8BC
7876	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x8BC
- stack 0: 0x8BC
7877	 427	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0x133001B048E000804CE0018002100010034F9080053004200660000050E0001
7878	 428	PUSH1	F0	 	 
- stack 2: 0x8BC
- stack 1: 0x133001B048E000804CE0018002100010034F9080053004200660000050E0001
- stack 0: 0xF0
7879	 42A	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0x133
7880	 42B	JUMP		 	 
- stack 0: 0x8BC
7881	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8BC
7882	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8BC
- stack 0: 0x8BC
7883	 135	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0x133001B048E000804CE0018002100010034F9080053004200660000050E0001
7884	 136	PUSH1	E0	 	 
- stack 2: 0x8BC
- stack 1: 0x133001B048E000804CE0018002100010034F9080053004200660000050E0001
- stack 0: 0xE0
7885	 138	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0x133001B
7886	 139	PUSH2	FFFF	 	 
- stack 2: 0x8BC
- stack 1: 0x133001B
- stack 0: 0xFFFF
7887	 13C	AND		 	 
- stack 1: 0x8BC
- stack 0: 0x1B
7888	 13D	PUSH1	01	 	 
- stack 2: 0x8BC
- stack 1: 0x1B
- stack 0: 0x1
7889	 13F	SIGNEXTEND		 	 
- stack 1: 0x8BC
- stack 0: 0x1B
7890	 140	PUSH2	0380	 	 
- stack 2: 0x8BC
- stack 1: 0x1B
- stack 0: 0x380
7891	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x8BC
7892	 144	PUSH1	04	 	 
- stack 1: 0x8BC
- stack 0: 0x4
7893	 146	ADD		 	 
- stack 0: 0x8C0
7894	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x8C0
- stack 0: 0x8C0
7895	 148	MLOAD		 	 
- stack 1: 0x8C0
- stack 0: 0x48E000804CE0018002100010034F9080053004200660000050E000100210001
7896	 149	PUSH1	F0	 	 
- stack 2: 0x8C0
- stack 1: 0x48E000804CE0018002100010034F9080053004200660000050E000100210001
- stack 0: 0xF0
7897	 14B	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0x48E
7898	 14C	JUMP		 	 
- stack 0: 0x8C0
7899	 48E	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x8C0
7900	 48F	PUSH1	00	 	 
- stack 1: 0x8C0
- stack 0: 0x0
7901	 491	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8C0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7902	 496	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8C0
- stack 0: 0x0
7903	 497	PUSH2	03A0	 	 
- stack 2: 0x8C0
- stack 1: 0x0
- stack 0: 0x3A0
7904	 49A	MLOAD		 	  ;; # read from x29
- stack 2: 0x8C0
- stack 1: 0x0
- stack 0: 0x0
7905	 49B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8C0
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7906	 4A0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8C0
- stack 1: 0x0
- stack 0: 0x0
7907	 4A1	SUB		 	 
- stack 1: 0x8C0
- stack 0: 0x0
7908	 4A2	PUSH2	04AA	 ;; _neq_744227c0344d077a66a430e3809114da53867ec3a882fb10266c4b1f7e91e965	 
- stack 2: 0x8C0
- stack 1: 0x0
- stack 0: 0x4AA
7909	 4A5	JUMPI		 	 
- stack 0: 0x8C0
7910	 4A6	PUSH2	04C4	 ;; _neq_after_744227c0344d077a66a430e3809114da53867ec3a882fb10266c4b1f7e91e965	 
- stack 1: 0x8C0
- stack 0: 0x4C4
7911	 4A9	JUMP		 	 
- stack 0: 0x8C0
7912	 4C4	JUMPDEST		 ;; _neq_after_744227c0344d077a66a430e3809114da53867ec3a882fb10266c4b1f7e91e965	 
- stack 0: 0x8C0
7913	 4C5	PUSH1	04	 	 
- stack 1: 0x8C0
- stack 0: 0x4
7914	 4C7	ADD		 	 
- stack 0: 0x8C4
7915	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x8C4
- stack 0: 0x8C4
7916	 4C9	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0x4CE0018002100010034F9080053004200660000050E0001002100010034F90C
7917	 4CA	PUSH1	F0	 	 
- stack 2: 0x8C4
- stack 1: 0x4CE0018002100010034F9080053004200660000050E0001002100010034F90C
- stack 0: 0xF0
7918	 4CC	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0x4CE
7919	 4CD	JUMP		 	 
- stack 0: 0x8C4
7920	 4CE	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x8C4
7921	 4CF	PUSH1	00	 	 
- stack 1: 0x8C4
- stack 0: 0x0
7922	 4D1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8C4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7923	 4D6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8C4
- stack 0: 0x0
7924	 4D7	PUSH2	0380	 	 
- stack 2: 0x8C4
- stack 1: 0x0
- stack 0: 0x380
7925	 4DA	MLOAD		 	  ;; # read from x28
- stack 2: 0x8C4
- stack 1: 0x0
- stack 0: 0x1B
7926	 4DB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8C4
- stack 2: 0x0
- stack 1: 0x1B
- stack 0: 0xFFFFFFFF
7927	 4E0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8C4
- stack 1: 0x0
- stack 0: 0x1B
7928	 4E1	SUB		 	 
- stack 1: 0x8C4
- stack 0: 0x1B
7929	 4E2	PUSH2	04EA	 ;; _neq_4b41f9239774635f4e2a52b281240e419798350717e771cbf045e65283447f88	 
- stack 2: 0x8C4
- stack 1: 0x1B
- stack 0: 0x4EA
7930	 4E5	JUMPI		 	 
- stack 0: 0x8C4
7931	 4EA	JUMPDEST		 ;; _neq_4b41f9239774635f4e2a52b281240e419798350717e771cbf045e65283447f88	 
- stack 0: 0x8C4
7932	 4EB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C4
- stack 0: 0x8C4
7933	 4EC	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0x4CE0018002100010034F9080053004200660000050E0001002100010034F90C
7934	 4ED	PUSH1	E0	 	 
- stack 2: 0x8C4
- stack 1: 0x4CE0018002100010034F9080053004200660000050E0001002100010034F90C
- stack 0: 0xE0
7935	 4EF	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0x4CE0018
7936	 4F0	PUSH2	FFFF	 	 
- stack 2: 0x8C4
- stack 1: 0x4CE0018
- stack 0: 0xFFFF
7937	 4F3	AND		 	 
- stack 1: 0x8C4
- stack 0: 0x18
7938	 4F4	PUSH1	01	 	 
- stack 2: 0x8C4
- stack 1: 0x18
- stack 0: 0x1
7939	 4F6	SIGNEXTEND		 	 
- stack 1: 0x8C4
- stack 0: 0x18
7940	 4F7	ADD		 	 
- stack 0: 0x8DC
7941	 4F8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x8DC
- stack 0: 0xFFFFFFFF
7942	 4FD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x8DC
7943	 4FE	DUP1		 	  ;; # executing pc
- stack 1: 0x8DC
- stack 0: 0x8DC
7944	 4FF	MLOAD		 	 
- stack 1: 0x8DC
- stack 0: 0x2100010034F90C005300420066000005190000006600000000000000000000
7945	 500	PUSH1	F0	 	 
- stack 2: 0x8DC
- stack 1: 0x2100010034F90C005300420066000005190000006600000000000000000000
- stack 0: 0xF0
7946	 502	SHR		 	 
- stack 1: 0x8DC
- stack 0: 0x21
7947	 503	JUMP		 	 
- stack 0: 0x8DC
7948	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x8DC
7949	 22	PUSH4	00001000	 	 
- stack 1: 0x8DC
- stack 0: 0x1000
7950	 27	PUSH2	0160	 	 
- stack 2: 0x8DC
- stack 1: 0x1000
- stack 0: 0x160
7951	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x8DC
7952	 2B	PUSH1	04	 	 
- stack 1: 0x8DC
- stack 0: 0x4
7953	 2D	ADD		 	 
- stack 0: 0x8E0
7954	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x8E0
- stack 0: 0x8E0
7955	 2F	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0x34F90C00530042006600000519000000660000000000000000000000000000
7956	 30	PUSH1	F0	 	 
- stack 2: 0x8E0
- stack 1: 0x34F90C00530042006600000519000000660000000000000000000000000000
- stack 0: 0xF0
7957	 32	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0x34
7958	 33	JUMP		 	 
- stack 0: 0x8E0
7959	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1792(ignore imm)
- stack 0: 0x8E0
7960	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E0
- stack 0: 0x8E0
7961	 36	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0x34F90C00530042006600000519000000660000000000000000000000000000
7962	 37	PUSH1	E0	 	 
- stack 2: 0x8E0
- stack 1: 0x34F90C00530042006600000519000000660000000000000000000000000000
- stack 0: 0xE0
7963	 39	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0x34F90C
7964	 3A	PUSH2	FFFF	 	 
- stack 2: 0x8E0
- stack 1: 0x34F90C
- stack 0: 0xFFFF
7965	 3D	AND		 	 
- stack 1: 0x8E0
- stack 0: 0xF90C
7966	 3E	PUSH1	01	 	 
- stack 2: 0x8E0
- stack 1: 0xF90C
- stack 0: 0x1
7967	 40	SIGNEXTEND		 	 
- stack 1: 0x8E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF90C
7968	 41	PUSH2	0160	 	 
- stack 2: 0x8E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF90C
- stack 0: 0x160
7969	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x8E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF90C
- stack 0: 0x1000
7970	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x8E0
- stack 0: 0x90C
7971	 46	PUSH2	0160	 	 
- stack 2: 0x8E0
- stack 1: 0x90C
- stack 0: 0x160
7972	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x8E0
7973	 4A	PUSH1	04	 	 
- stack 1: 0x8E0
- stack 0: 0x4
7974	 4C	ADD		 	 
- stack 0: 0x8E4
7975	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x8E4
- stack 0: 0x8E4
7976	 4E	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0x5300420066000005190000006600000000000000000000000000006574796D
7977	 4F	PUSH1	F0	 	 
- stack 2: 0x8E4
- stack 1: 0x5300420066000005190000006600000000000000000000000000006574796D
- stack 0: 0xF0
7978	 51	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0x53
7979	 52	JUMP		 	 
- stack 0: 0x8E4
7980	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x8E4
7981	 54	PUSH4	00042000	 	 
- stack 1: 0x8E4
- stack 0: 0x42000
7982	 59	PUSH2	0140	 	 
- stack 2: 0x8E4
- stack 1: 0x42000
- stack 0: 0x140
7983	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x8E4
7984	 5D	PUSH1	04	 	 
- stack 1: 0x8E4
- stack 0: 0x4
7985	 5F	ADD		 	 
- stack 0: 0x8E8
7986	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x8E8
- stack 0: 0x8E8
7987	 61	MLOAD		 	 
- stack 1: 0x8E8
- stack 0: 0x66000005190000006600000000000000000000000000006574796D00007473
7988	 62	PUSH1	F0	 	 
- stack 2: 0x8E8
- stack 1: 0x66000005190000006600000000000000000000000000006574796D00007473
- stack 0: 0xF0
7989	 64	SHR		 	 
- stack 1: 0x8E8
- stack 0: 0x66
7990	 65	JUMP		 	 
- stack 0: 0x8E8
7991	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x8E8
7992	 67	PUSH2	0140	 	 
- stack 1: 0x8E8
- stack 0: 0x140
7993	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x8E8
- stack 0: 0x42000
7994	 6B	PUSH2	0075	 ;; _ecall_493e1b48830fb26071102b8f58e7c702eb84046d611bd6eacfbcdecc2278109a	 
- stack 2: 0x8E8
- stack 1: 0x42000
- stack 0: 0x75
7995	 6E	JUMPI		 	 
- stack 0: 0x8E8
7996	 75	JUMPDEST		 ;; _ecall_493e1b48830fb26071102b8f58e7c702eb84046d611bd6eacfbcdecc2278109a	 
- stack 0: 0x8E8
7997	 76	PUSH1	04	 	 
- stack 1: 0x8E8
- stack 0: 0x4
7998	 78	PUSH2	0160	 	 
- stack 2: 0x8E8
- stack 1: 0x4
- stack 0: 0x160
7999	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x8E8
- stack 1: 0x4
- stack 0: 0x90C
8000	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x8E8
8001	 7D	PUSH1	04	 	 
- stack 1: 0x8E8
- stack 0: 0x4
8002	 7F	ADD		 	 
- stack 0: 0x8EC
8003	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x8EC
- stack 0: 0x8EC
8004	 81	MLOAD		 	 
- stack 1: 0x8EC
- stack 0: 0x5190000006600000000000000000000000000006574796D0000747300525245
8005	 82	PUSH1	F0	 	 
- stack 2: 0x8EC
- stack 1: 0x5190000006600000000000000000000000000006574796D0000747300525245
- stack 0: 0xF0
8006	 84	SHR		 	 
- stack 1: 0x8EC
- stack 0: 0x519
8007	 85	JUMP		 	 
- stack 0: 0x8EC
8008	 519	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x8EC
8009	 51A	PUSH4	00000000	 	 
- stack 1: 0x8EC
- stack 0: 0x0
8010	 51F	PUSH2	0140	 	 
- stack 2: 0x8EC
- stack 1: 0x0
- stack 0: 0x140
8011	 522	MSTORE		 	  ;; # store to x10
- stack 0: 0x8EC
8012	 523	PUSH1	04	 	 
- stack 1: 0x8EC
- stack 0: 0x4
8013	 525	ADD		 	 
- stack 0: 0x8F0
8014	 526	DUP1		 	  ;; # executing pc
- stack 1: 0x8F0
- stack 0: 0x8F0
8015	 527	MLOAD		 	 
- stack 1: 0x8F0
- stack 0: 0x6600000000000000000000000000006574796D000074730052524500004B4F
8016	 528	PUSH1	F0	 	 
- stack 2: 0x8F0
- stack 1: 0x6600000000000000000000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
8017	 52A	SHR		 	 
- stack 1: 0x8F0
- stack 0: 0x66
8018	 52B	JUMP		 	 
- stack 0: 0x8F0
8019	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x8F0
8020	 67	PUSH2	0140	 	 
- stack 1: 0x8F0
- stack 0: 0x140
8021	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x8F0
- stack 0: 0x0
8022	 6B	PUSH2	0075	 ;; _ecall_493e1b48830fb26071102b8f58e7c702eb84046d611bd6eacfbcdecc2278109a	 
- stack 2: 0x8F0
- stack 1: 0x0
- stack 0: 0x75
8023	 6E	JUMPI		 	 
- stack 0: 0x8F0
8024	 6F	PUSH1	20	 	 
- stack 1: 0x8F0
- stack 0: 0x20
8025	 71	PUSH2	0160	 	 
- stack 2: 0x8F0
- stack 1: 0x20
- stack 0: 0x160
8026	 74	RETURN		 	 
Final bytecode length; 2621
Returned: 000000000000000000000000000000000000000000000000000000000000090c
gasUsed : 27601
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424,428,42c,430
** HOT: 434 - range: 434,438,43c,440,444,448,44c,450,454
** HOT: 458 - range: 458,45c,460,464,468,46c,470,474,478
** HOT: 47c - range: 47c,480,484,488,48c,490,494,498
** HOT: 49c - range: 49c,4a0,4a4,4a8,4ac,4b0,4b4,4b8,4bc
** HOT: 4c0 - range: 4c0,4c4,4c8,4cc,4d0,4d4,4d8,4dc,4e0
** HOT: 4e4 - range: 4e4,4e8,4ec,4f0,4f4,4f8,4fc
** HOT: 500 - range: 500,504,508,50c,510,514,518,51c,520,524
** HOT: 504 - range: 504,508,50c,510,514,518,51c,520,524
** HOT: 528 - range: 528,52c,530,534
** HOT: 538 - range: 538,53c,540,544,548,54c,550,554,558,55c,560
** HOT: 53c - range: 53c,540,544,548,54c,550,554,558,55c,560
** HOT: 564 - range: 564,568,56c,570
** HOT: 574 - range: 574,578,57c,580,584,588,58c,590,594,598,59c,5a0
** HOT: 578 - range: 578,57c,580,584,588,58c,590,594,598,59c,5a0
** HOT: 5a4 - range: 5a4,5a8,5ac,5b0
** HOT: 5b4 - range: 5b4,5b8,5bc,5c0,5c4,5c8,5cc,5d0,5d4
** HOT: 5b8 - range: 5b8,5bc,5c0,5c4,5c8,5cc,5d0,5d4
** HOT: 5d8 - range: 5d8,5dc,5e0,5e4
** HOT: 5e8 - range: 5e8,5ec,5f0,5f4,5f8,5fc,600,604,608,60c
** HOT: 5ec - range: 5ec,5f0,5f4,5f8,5fc,600,604,608,60c
** HOT: 610 - range: 610,614,618,61c
** HOT: 620 - range: 620,624,628,62c,630,634,638,63c,640,644,648
** HOT: 624 - range: 624,628,62c,630,634,638,63c,640,644,648
** HOT: 64c - range: 64c,650,654,658
** HOT: 65c - range: 65c,660,664,668,66c,670,674,678,67c,680
** HOT: 660 - range: 660,664,668,66c,670,674,678,67c,680
** HOT: 684 - range: 684,688,68c,690
** HOT: 694 - range: 694,698,69c,6a0,6a4,6a8,6ac,6b0,6b4,6b8,6bc
** HOT: 698 - range: 698,69c,6a0,6a4,6a8,6ac,6b0,6b4,6b8,6bc
** HOT: 6c0 - range: 6c0,6c4,6c8,6cc
** HOT: 6d0 - range: 6d0,6d4,6d8,6dc,6e0,6e4,6e8,6ec,6f0,6f4,6f8
** HOT: 6d4 - range: 6d4,6d8,6dc,6e0,6e4,6e8,6ec,6f0,6f4,6f8
** HOT: 6fc - range: 6fc,700,704,708
** HOT: 70c - range: 70c,710,714,718,71c,720,724,728,72c
** HOT: 710 - range: 710,714,718,71c,720,724,728,72c
** HOT: 730 - range: 730,734,738,73c
** HOT: 740 - range: 740,744,748,74c,750,754,758,75c,760,764
** HOT: 744 - range: 744,748,74c,750,754,758,75c,760,764
** HOT: 768 - range: 768,76c,770,774
** HOT: 778 - range: 778,77c,780,784,788,78c,790,794,798,79c,7a0
** HOT: 77c - range: 77c,780,784,788,78c,790,794,798,79c,7a0
** HOT: 7a4 - range: 7a4,7a8,7ac,7b0
** HOT: 7b4 - range: 7b4,7b8,7bc,7c0,7c4,7c8,7cc,7d0,7d4,7d8
** HOT: 7b8 - range: 7b8,7bc,7c0,7c4,7c8,7cc,7d0,7d4,7d8
** HOT: 7dc - range: 7dc,7e0,7e4,7e8
** HOT: 7ec - range: 7ec,7f0,7f4,7f8,7fc,800,804,808,80c,810,814
** HOT: 7f0 - range: 7f0,7f4,7f8,7fc,800,804,808,80c,810,814
** HOT: 818 - range: 818,81c,820,824
** HOT: 828 - range: 828,82c,830,834,838,83c,840,844,848,84c,850
** HOT: 82c - range: 82c,830,834,838,83c,840,844,848,84c,850
** HOT: 854 - range: 854,858,85c,860
** HOT: 864 - range: 864,868,86c,870,874,878
** HOT: 87c - range: 87c,880,884,888,88c,890
** HOT: 894 - range: 894,898,89c,8a0
** HOT: 8a4 - range: 8a4,8a8,8ac,8b0,8b4,8b8,8bc,8c0
