Running in EVM:
0	 0	PUSH4	0210	 	 
- stack 0: 0x210
1	 5	PUSH2	0410	 ;; _rambegin	 
- stack 1: 0x210
- stack 0: 0x410
2	 8	PUSH1	01	 	 
- stack 2: 0x210
- stack 1: 0x410
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x210
- stack 0: 0x411
4	 B	PUSH2	0400	 	 
- stack 2: 0x210
- stack 1: 0x411
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100000034060000530042006600000086F0100099FF0000B8FF0F00D7F010
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100000034060000530042006600000086F0100099FF0000B8FF0F00D7F010
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34060000530042006600000086F0100099FF0000B8FF0F00D7F01000EAFF00
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34060000530042006600000086F0100099FF0000B8FF0F00D7F01000EAFF00
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1536(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34060000530042006600000086F0100099FF0000B8FF0F00D7F01000EAFF00
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34060000530042006600000086F0100099FF0000B8FF0F00D7F01000EAFF00
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340600
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340600
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x600
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x600
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x600
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x600
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x600
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x600
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x600
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086F0100099FF0000B8FF0F00D7F01000EAFF0001090002
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086F0100099FF0000B8FF0F00D7F01000EAFF0001090002
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086F0100099FF0000B8FF0F00D7F01000EAFF0001090002012301A8
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086F0100099FF0000B8FF0F00D7F01000EAFF0001090002012301A8
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_aacf10e688c5a54e0aac1f2860336eb75df013d87ac8af90cecc493f34d91039	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_aacf10e688c5a54e0aac1f2860336eb75df013d87ac8af90cecc493f34d91039	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x600
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86F0100099FF0000B8FF0F00D7F01000EAFF0001090002012301A80165FF01
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86F0100099FF0000B8FF0F00D7F01000EAFF0001090002012301A80165FF01
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x410
76	 87	PUSH4	ff010000	 	 
- stack 1: 0x410
- stack 0: 0xFF010000
77	 8C	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0xFF010000
- stack 0: 0x20
78	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 90	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 92	ADD		 	 
- stack 0: 0x414
81	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 94	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99FF0000B8FF0F00D7F01000EAFF0001090002012301A80165FF010099FFF0
83	 95	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x99FF0000B8FF0F00D7F01000EAFF0001090002012301A80165FF010099FFF0
- stack 0: 0xF0
84	 97	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99
85	 98	JUMP		 	 
- stack 0: 0x414
86	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x414
87	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99FF0000B8FF0F00D7F01000EAFF0001090002012301A80165FF010099FFF0
89	 9C	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x99FF0000B8FF0F00D7F01000EAFF0001090002012301A80165FF010099FFF0
- stack 0: 0xE0
90	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99FF00
91	 9F	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x99FF00
- stack 0: 0xFFFF
92	 A2	AND		 	 
- stack 1: 0x414
- stack 0: 0xFF00
93	 A3	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0xFF00
- stack 0: 0x1
94	 A5	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
95	 A6	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
96	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
97	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x414
- stack 0: 0xFF00FF00
98	 AB	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0xFF00FF00
- stack 0: 0x20
99	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
100	 AF	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
101	 B1	ADD		 	 
- stack 0: 0x418
102	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
103	 B3	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB8FF0F00D7F01000EAFF0001090002012301A80165FF010099FFF000B800F0
104	 B4	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB8FF0F00D7F01000EAFF0001090002012301A80165FF010099FFF000B800F0
- stack 0: 0xF0
105	 B6	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB8
106	 B7	JUMP		 	 
- stack 0: 0x418
107	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x418
108	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
109	 BA	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB8FF0F00D7F01000EAFF0001090002012301A80165FF010099FFF000B800F0
110	 BB	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xB8FF0F00D7F01000EAFF0001090002012301A80165FF010099FFF000B800F0
- stack 0: 0xE0
111	 BD	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB8FF0F
112	 BE	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xB8FF0F
- stack 0: 0xFFFF
113	 C1	AND		 	 
- stack 1: 0x418
- stack 0: 0xFF0F
114	 C2	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0xFF0F
- stack 0: 0x1
115	 C4	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
116	 C5	PUSH2	0020	 	 
- stack 2: 0x418
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x20
117	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x418
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xFF00FF00
118	 C9	AND		 	  ;; # ANDI
- stack 1: 0x418
- stack 0: 0xFF00FF00
119	 CA	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0xFF00FF00
- stack 0: 0x60
120	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
121	 CE	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
122	 D0	ADD		 	 
- stack 0: 0x41C
123	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
124	 D2	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD7F01000EAFF0001090002012301A80165FF010099FFF000B800F0017800F0
125	 D3	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD7F01000EAFF0001090002012301A80165FF010099FFF000B800F0017800F0
- stack 0: 0xF0
126	 D5	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD7
127	 D6	JUMP		 	 
- stack 0: 0x41C
128	 D7	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x41C
129	 D8	PUSH4	ff010000	 	 
- stack 1: 0x41C
- stack 0: 0xFF010000
130	 DD	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0xFF010000
- stack 0: 0x3A0
131	 E0	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
132	 E1	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
133	 E3	ADD		 	 
- stack 0: 0x420
134	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
135	 E5	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xEAFF0001090002012301A80165FF010099FFF000B800F0017800F001090003
136	 E6	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xEAFF0001090002012301A80165FF010099FFF000B800F0017800F001090003
- stack 0: 0xF0
137	 E8	SHR		 	 
- stack 1: 0x420
- stack 0: 0xEA
138	 E9	JUMP		 	 
- stack 0: 0x420
139	 EA	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x420
140	 EB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
141	 EC	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xEAFF0001090002012301A80165FF010099FFF000B800F0017800F001090003
142	 ED	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0xEAFF0001090002012301A80165FF010099FFF000B800F0017800F001090003
- stack 0: 0xE0
143	 EF	SHR		 	 
- stack 1: 0x420
- stack 0: 0xEAFF00
144	 F0	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0xEAFF00
- stack 0: 0xFFFF
145	 F3	AND		 	 
- stack 1: 0x420
- stack 0: 0xFF00
146	 F4	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0xFF00
- stack 0: 0x1
147	 F6	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
148	 F7	PUSH2	03A0	 	 
- stack 2: 0x420
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
149	 FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x420
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
150	 FB	ADD		 	  ;; # ADDI 29
- stack 1: 0x420
- stack 0: 0xFF00FF00
151	 FC	PUSH2	03A0	 	 
- stack 2: 0x420
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
152	 FF	MSTORE		 	  ;; # store to x29
- stack 0: 0x420
153	 100	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
154	 102	ADD		 	 
- stack 0: 0x424
155	 103	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
156	 104	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x1090002012301A80165FF010099FFF000B800F0017800F00109000301230190
157	 105	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x1090002012301A80165FF010099FFF000B800F0017800F00109000301230190
- stack 0: 0xF0
158	 107	SHR		 	 
- stack 1: 0x424
- stack 0: 0x109
159	 108	JUMP		 	 
- stack 0: 0x424
160	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x424
161	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
162	 10B	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x1090002012301A80165FF010099FFF000B800F0017800F00109000301230190
163	 10C	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x1090002012301A80165FF010099FFF000B800F0017800F00109000301230190
- stack 0: 0xE0
164	 10E	SHR		 	 
- stack 1: 0x424
- stack 0: 0x1090002
165	 10F	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x1090002
- stack 0: 0xFFFF
166	 112	AND		 	 
- stack 1: 0x424
- stack 0: 0x2
167	 113	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0x2
- stack 0: 0x1
168	 115	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0x2
169	 116	PUSH2	0380	 	 
- stack 2: 0x424
- stack 1: 0x2
- stack 0: 0x380
170	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x424
171	 11A	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
172	 11C	ADD		 	 
- stack 0: 0x428
173	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
174	 11E	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x12301A80165FF010099FFF000B800F0017800F0010900030123019001920FF0
175	 11F	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x12301A80165FF010099FFF000B800F0017800F0010900030123019001920FF0
- stack 0: 0xF0
176	 121	SHR		 	 
- stack 1: 0x428
- stack 0: 0x123
177	 122	JUMP		 	 
- stack 0: 0x428
178	 123	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1a8(ignore imm)
- stack 0: 0x428
179	 124	PUSH2	0060	 	 
- stack 1: 0x428
- stack 0: 0x60
180	 127	MLOAD		 	  ;; # read from x3
- stack 1: 0x428
- stack 0: 0xFF00FF00
181	 128	PUSH4	FFFFFFFF	 	 
- stack 2: 0x428
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
182	 12D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x428
- stack 0: 0xFF00FF00
183	 12E	PUSH2	03A0	 	 
- stack 2: 0x428
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
184	 131	MLOAD		 	  ;; # read from x29
- stack 2: 0x428
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
185	 132	PUSH4	FFFFFFFF	 	 
- stack 3: 0x428
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
186	 137	AND		 	  ;; # mask to 32 bits
- stack 2: 0x428
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
187	 138	SUB		 	 
- stack 1: 0x428
- stack 0: 0x0
188	 139	PUSH2	0141	 ;; _neq_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x141
189	 13C	JUMPI		 	 
- stack 0: 0x428
190	 13D	PUSH2	015B	 ;; _neq_after_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 1: 0x428
- stack 0: 0x15B
191	 140	JUMP		 	 
- stack 0: 0x428
192	 15B	JUMPDEST		 ;; _neq_after_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 0: 0x428
193	 15C	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
194	 15E	ADD		 	 
- stack 0: 0x42C
195	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
196	 160	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x165FF010099FFF000B800F0017800F0010900030123019001920FF0009900FF
197	 161	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x165FF010099FFF000B800F0017800F0010900030123019001920FF0009900FF
- stack 0: 0xF0
198	 163	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x165
199	 164	JUMP		 	 
- stack 0: 0x42C
200	 165	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x42C
201	 166	PUSH4	0ff01000	 	 
- stack 1: 0x42C
- stack 0: 0xFF01000
202	 16B	PUSH2	0020	 	 
- stack 2: 0x42C
- stack 1: 0xFF01000
- stack 0: 0x20
203	 16E	MSTORE		 	  ;; # store to x1
- stack 0: 0x42C
204	 16F	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
205	 171	ADD		 	 
- stack 0: 0x430
206	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
207	 173	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x99FFF000B800F0017800F0010900030123019001920FF0009900FF00B8070F
208	 174	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x99FFF000B800F0017800F0010900030123019001920FF0009900FF00B8070F
- stack 0: 0xF0
209	 176	SHR		 	 
- stack 1: 0x430
- stack 0: 0x99
210	 177	JUMP		 	 
- stack 0: 0x430
211	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x430
212	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
213	 9B	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x99FFF000B800F0017800F0010900030123019001920FF0009900FF00B8070F
214	 9C	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0x99FFF000B800F0017800F0010900030123019001920FF0009900FF00B8070F
- stack 0: 0xE0
215	 9E	SHR		 	 
- stack 1: 0x430
- stack 0: 0x99FFF0
216	 9F	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
217	 A2	AND		 	 
- stack 1: 0x430
- stack 0: 0xFFF0
218	 A3	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0xFFF0
- stack 0: 0x1
219	 A5	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
220	 A6	PUSH2	0020	 	 
- stack 2: 0x430
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
221	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x430
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
222	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x430
- stack 0: 0xFF00FF0
223	 AB	PUSH2	0020	 	 
- stack 2: 0x430
- stack 1: 0xFF00FF0
- stack 0: 0x20
224	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x430
225	 AF	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
226	 B1	ADD		 	 
- stack 0: 0x434
227	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
228	 B3	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xB800F0017800F0010900030123019001920FF0009900FF00B8070F0178000F
229	 B4	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xB800F0017800F0010900030123019001920FF0009900FF00B8070F0178000F
- stack 0: 0xF0
230	 B6	SHR		 	 
- stack 1: 0x434
- stack 0: 0xB8
231	 B7	JUMP		 	 
- stack 0: 0x434
232	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x434
233	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
234	 BA	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xB800F0017800F0010900030123019001920FF0009900FF00B8070F0178000F
235	 BB	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xB800F0017800F0010900030123019001920FF0009900FF00B8070F0178000F
- stack 0: 0xE0
236	 BD	SHR		 	 
- stack 1: 0x434
- stack 0: 0xB800F0
237	 BE	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xB800F0
- stack 0: 0xFFFF
238	 C1	AND		 	 
- stack 1: 0x434
- stack 0: 0xF0
239	 C2	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0xF0
- stack 0: 0x1
240	 C4	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0xF0
241	 C5	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0xF0
- stack 0: 0x20
242	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x434
- stack 1: 0xF0
- stack 0: 0xFF00FF0
243	 C9	AND		 	  ;; # ANDI
- stack 1: 0x434
- stack 0: 0xF0
244	 CA	PUSH2	0060	 	 
- stack 2: 0x434
- stack 1: 0xF0
- stack 0: 0x60
245	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x434
246	 CE	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
247	 D0	ADD		 	 
- stack 0: 0x438
248	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
249	 D2	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x17800F0010900030123019001920FF0009900FF00B8070F0178000F01090004
250	 D3	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x17800F0010900030123019001920FF0009900FF00B8070F0178000F01090004
- stack 0: 0xF0
251	 D5	SHR		 	 
- stack 1: 0x438
- stack 0: 0x178
252	 D6	JUMP		 	 
- stack 0: 0x438
253	 178	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,240(ignore imm)
- stack 0: 0x438
254	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
255	 17A	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x17800F0010900030123019001920FF0009900FF00B8070F0178000F01090004
256	 17B	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0x17800F0010900030123019001920FF0009900FF00B8070F0178000F01090004
- stack 0: 0xE0
257	 17D	SHR		 	 
- stack 1: 0x438
- stack 0: 0x17800F0
258	 17E	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0x17800F0
- stack 0: 0xFFFF
259	 181	AND		 	 
- stack 1: 0x438
- stack 0: 0xF0
260	 182	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0xF0
- stack 0: 0x1
261	 184	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0xF0
262	 185	PUSH2	03A0	 	 
- stack 2: 0x438
- stack 1: 0xF0
- stack 0: 0x3A0
263	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x438
264	 189	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
265	 18B	ADD		 	 
- stack 0: 0x43C
266	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
267	 18D	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x10900030123019001920FF0009900FF00B8070F0178000F0109000401230178
268	 18E	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x10900030123019001920FF0009900FF00B8070F0178000F0109000401230178
- stack 0: 0xF0
269	 190	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x109
270	 191	JUMP		 	 
- stack 0: 0x43C
271	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x43C
272	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
273	 10B	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x10900030123019001920FF0009900FF00B8070F0178000F0109000401230178
274	 10C	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0x10900030123019001920FF0009900FF00B8070F0178000F0109000401230178
- stack 0: 0xE0
275	 10E	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x1090003
276	 10F	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0x1090003
- stack 0: 0xFFFF
277	 112	AND		 	 
- stack 1: 0x43C
- stack 0: 0x3
278	 113	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0x3
- stack 0: 0x1
279	 115	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0x3
280	 116	PUSH2	0380	 	 
- stack 2: 0x43C
- stack 1: 0x3
- stack 0: 0x380
281	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x43C
282	 11A	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
283	 11C	ADD		 	 
- stack 0: 0x440
284	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
285	 11E	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x123019001920FF0009900FF00B8070F0178000F010900040123017801A500FF
286	 11F	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x123019001920FF0009900FF00B8070F0178000F010900040123017801A500FF
- stack 0: 0xF0
287	 121	SHR		 	 
- stack 1: 0x440
- stack 0: 0x123
288	 122	JUMP		 	 
- stack 0: 0x440
289	 123	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1a8(ignore imm)
- stack 0: 0x440
290	 124	PUSH2	0060	 	 
- stack 1: 0x440
- stack 0: 0x60
291	 127	MLOAD		 	  ;; # read from x3
- stack 1: 0x440
- stack 0: 0xF0
292	 128	PUSH4	FFFFFFFF	 	 
- stack 2: 0x440
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
293	 12D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x440
- stack 0: 0xF0
294	 12E	PUSH2	03A0	 	 
- stack 2: 0x440
- stack 1: 0xF0
- stack 0: 0x3A0
295	 131	MLOAD		 	  ;; # read from x29
- stack 2: 0x440
- stack 1: 0xF0
- stack 0: 0xF0
296	 132	PUSH4	FFFFFFFF	 	 
- stack 3: 0x440
- stack 2: 0xF0
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
297	 137	AND		 	  ;; # mask to 32 bits
- stack 2: 0x440
- stack 1: 0xF0
- stack 0: 0xF0
298	 138	SUB		 	 
- stack 1: 0x440
- stack 0: 0x0
299	 139	PUSH2	0141	 ;; _neq_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 2: 0x440
- stack 1: 0x0
- stack 0: 0x141
300	 13C	JUMPI		 	 
- stack 0: 0x440
301	 13D	PUSH2	015B	 ;; _neq_after_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 1: 0x440
- stack 0: 0x15B
302	 140	JUMP		 	 
- stack 0: 0x440
303	 15B	JUMPDEST		 ;; _neq_after_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 0: 0x440
304	 15C	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
305	 15E	ADD		 	 
- stack 0: 0x444
306	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
307	 160	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x1920FF0009900FF00B8070F0178000F010900040123017801A500FF0099000F
308	 161	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x1920FF0009900FF00B8070F0178000F010900040123017801A500FF0099000F
- stack 0: 0xF0
309	 163	SHR		 	 
- stack 1: 0x444
- stack 0: 0x192
310	 164	JUMP		 	 
- stack 0: 0x444
311	 192	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x444
312	 193	PUSH4	00ff0000	 	 
- stack 1: 0x444
- stack 0: 0xFF0000
313	 198	PUSH2	0020	 	 
- stack 2: 0x444
- stack 1: 0xFF0000
- stack 0: 0x20
314	 19B	MSTORE		 	  ;; # store to x1
- stack 0: 0x444
315	 19C	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
316	 19E	ADD		 	 
- stack 0: 0x448
317	 19F	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
318	 1A0	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x9900FF00B8070F0178000F010900040123017801A500FF0099000F00B800F0
319	 1A1	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0x9900FF00B8070F0178000F010900040123017801A500FF0099000F00B800F0
- stack 0: 0xF0
320	 1A3	SHR		 	 
- stack 1: 0x448
- stack 0: 0x99
321	 1A4	JUMP		 	 
- stack 0: 0x448
322	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x448
323	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x448
- stack 0: 0x448
324	 9B	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x9900FF00B8070F0178000F010900040123017801A500FF0099000F00B800F0
325	 9C	PUSH1	E0	 	 
- stack 2: 0x448
- stack 1: 0x9900FF00B8070F0178000F010900040123017801A500FF0099000F00B800F0
- stack 0: 0xE0
326	 9E	SHR		 	 
- stack 1: 0x448
- stack 0: 0x9900FF
327	 9F	PUSH2	FFFF	 	 
- stack 2: 0x448
- stack 1: 0x9900FF
- stack 0: 0xFFFF
328	 A2	AND		 	 
- stack 1: 0x448
- stack 0: 0xFF
329	 A3	PUSH1	01	 	 
- stack 2: 0x448
- stack 1: 0xFF
- stack 0: 0x1
330	 A5	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0xFF
331	 A6	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0xFF
- stack 0: 0x20
332	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x448
- stack 1: 0xFF
- stack 0: 0xFF0000
333	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x448
- stack 0: 0xFF00FF
334	 AB	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0xFF00FF
- stack 0: 0x20
335	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x448
336	 AF	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
337	 B1	ADD		 	 
- stack 0: 0x44C
338	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
339	 B3	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xB8070F0178000F010900040123017801A500FF0099000F00B800F001780000
340	 B4	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0xB8070F0178000F010900040123017801A500FF0099000F00B800F001780000
- stack 0: 0xF0
341	 B6	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xB8
342	 B7	JUMP		 	 
- stack 0: 0x44C
343	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x44C
344	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
345	 BA	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xB8070F0178000F010900040123017801A500FF0099000F00B800F001780000
346	 BB	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0xB8070F0178000F010900040123017801A500FF0099000F00B800F001780000
- stack 0: 0xE0
347	 BD	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xB8070F
348	 BE	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0xB8070F
- stack 0: 0xFFFF
349	 C1	AND		 	 
- stack 1: 0x44C
- stack 0: 0x70F
350	 C2	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0x70F
- stack 0: 0x1
351	 C4	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0x70F
352	 C5	PUSH2	0020	 	 
- stack 2: 0x44C
- stack 1: 0x70F
- stack 0: 0x20
353	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x44C
- stack 1: 0x70F
- stack 0: 0xFF00FF
354	 C9	AND		 	  ;; # ANDI
- stack 1: 0x44C
- stack 0: 0xF
355	 CA	PUSH2	0060	 	 
- stack 2: 0x44C
- stack 1: 0xF
- stack 0: 0x60
356	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x44C
357	 CE	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
358	 D0	ADD		 	 
- stack 0: 0x450
359	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
360	 D2	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x178000F010900040123017801A500FF0099000F00B800F00178000001090005
361	 D3	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x178000F010900040123017801A500FF0099000F00B800F00178000001090005
- stack 0: 0xF0
362	 D5	SHR		 	 
- stack 1: 0x450
- stack 0: 0x178
363	 D6	JUMP		 	 
- stack 0: 0x450
364	 178	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,240(ignore imm)
- stack 0: 0x450
365	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
366	 17A	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x178000F010900040123017801A500FF0099000F00B800F00178000001090005
367	 17B	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x178000F010900040123017801A500FF0099000F00B800F00178000001090005
- stack 0: 0xE0
368	 17D	SHR		 	 
- stack 1: 0x450
- stack 0: 0x178000F
369	 17E	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x178000F
- stack 0: 0xFFFF
370	 181	AND		 	 
- stack 1: 0x450
- stack 0: 0xF
371	 182	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0xF
- stack 0: 0x1
372	 184	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0xF
373	 185	PUSH2	03A0	 	 
- stack 2: 0x450
- stack 1: 0xF
- stack 0: 0x3A0
374	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x450
375	 189	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
376	 18B	ADD		 	 
- stack 0: 0x454
377	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
378	 18D	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x10900040123017801A500FF0099000F00B800F0017800000109000501230160
379	 18E	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x10900040123017801A500FF0099000F00B800F0017800000109000501230160
- stack 0: 0xF0
380	 190	SHR		 	 
- stack 1: 0x454
- stack 0: 0x109
381	 191	JUMP		 	 
- stack 0: 0x454
382	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x454
383	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
384	 10B	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x10900040123017801A500FF0099000F00B800F0017800000109000501230160
385	 10C	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0x10900040123017801A500FF0099000F00B800F0017800000109000501230160
- stack 0: 0xE0
386	 10E	SHR		 	 
- stack 1: 0x454
- stack 0: 0x1090004
387	 10F	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0x1090004
- stack 0: 0xFFFF
388	 112	AND		 	 
- stack 1: 0x454
- stack 0: 0x4
389	 113	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0x4
- stack 0: 0x1
390	 115	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0x4
391	 116	PUSH2	0380	 	 
- stack 2: 0x454
- stack 1: 0x4
- stack 0: 0x380
392	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x454
393	 11A	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
394	 11C	ADD		 	 
- stack 0: 0x458
395	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
396	 11E	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x123017801A500FF0099000F00B800F00178000001090005012301600086F010
397	 11F	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x123017801A500FF0099000F00B800F00178000001090005012301600086F010
- stack 0: 0xF0
398	 121	SHR		 	 
- stack 1: 0x458
- stack 0: 0x123
399	 122	JUMP		 	 
- stack 0: 0x458
400	 123	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1a8(ignore imm)
- stack 0: 0x458
401	 124	PUSH2	0060	 	 
- stack 1: 0x458
- stack 0: 0x60
402	 127	MLOAD		 	  ;; # read from x3
- stack 1: 0x458
- stack 0: 0xF
403	 128	PUSH4	FFFFFFFF	 	 
- stack 2: 0x458
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
404	 12D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x458
- stack 0: 0xF
405	 12E	PUSH2	03A0	 	 
- stack 2: 0x458
- stack 1: 0xF
- stack 0: 0x3A0
406	 131	MLOAD		 	  ;; # read from x29
- stack 2: 0x458
- stack 1: 0xF
- stack 0: 0xF
407	 132	PUSH4	FFFFFFFF	 	 
- stack 3: 0x458
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
408	 137	AND		 	  ;; # mask to 32 bits
- stack 2: 0x458
- stack 1: 0xF
- stack 0: 0xF
409	 138	SUB		 	 
- stack 1: 0x458
- stack 0: 0x0
410	 139	PUSH2	0141	 ;; _neq_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 2: 0x458
- stack 1: 0x0
- stack 0: 0x141
411	 13C	JUMPI		 	 
- stack 0: 0x458
412	 13D	PUSH2	015B	 ;; _neq_after_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 1: 0x458
- stack 0: 0x15B
413	 140	JUMP		 	 
- stack 0: 0x458
414	 15B	JUMPDEST		 ;; _neq_after_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 0: 0x458
415	 15C	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
416	 15E	ADD		 	 
- stack 0: 0x45C
417	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
418	 160	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x1A500FF0099000F00B800F00178000001090005012301600086F0100099FF00
419	 161	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x1A500FF0099000F00B800F00178000001090005012301600086F0100099FF00
- stack 0: 0xF0
420	 163	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x1A5
421	 164	JUMP		 	 
- stack 0: 0x45C
422	 1A5	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x45C
423	 1A6	PUSH4	f00ff000	 	 
- stack 1: 0x45C
- stack 0: 0xF00FF000
424	 1AB	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0xF00FF000
- stack 0: 0x20
425	 1AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x45C
426	 1AF	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
427	 1B1	ADD		 	 
- stack 0: 0x460
428	 1B2	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
429	 1B3	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x99000F00B800F00178000001090005012301600086F0100099FF0001B800F0
430	 1B4	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x99000F00B800F00178000001090005012301600086F0100099FF0001B800F0
- stack 0: 0xF0
431	 1B6	SHR		 	 
- stack 1: 0x460
- stack 0: 0x99
432	 1B7	JUMP		 	 
- stack 0: 0x460
433	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x460
434	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x460
- stack 0: 0x460
435	 9B	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x99000F00B800F00178000001090005012301600086F0100099FF0001B800F0
436	 9C	PUSH1	E0	 	 
- stack 2: 0x460
- stack 1: 0x99000F00B800F00178000001090005012301600086F0100099FF0001B800F0
- stack 0: 0xE0
437	 9E	SHR		 	 
- stack 1: 0x460
- stack 0: 0x99000F
438	 9F	PUSH2	FFFF	 	 
- stack 2: 0x460
- stack 1: 0x99000F
- stack 0: 0xFFFF
439	 A2	AND		 	 
- stack 1: 0x460
- stack 0: 0xF
440	 A3	PUSH1	01	 	 
- stack 2: 0x460
- stack 1: 0xF
- stack 0: 0x1
441	 A5	SIGNEXTEND		 	 
- stack 1: 0x460
- stack 0: 0xF
442	 A6	PUSH2	0020	 	 
- stack 2: 0x460
- stack 1: 0xF
- stack 0: 0x20
443	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x460
- stack 1: 0xF
- stack 0: 0xF00FF000
444	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x460
- stack 0: 0xF00FF00F
445	 AB	PUSH2	0020	 	 
- stack 2: 0x460
- stack 1: 0xF00FF00F
- stack 0: 0x20
446	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x460
447	 AF	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
448	 B1	ADD		 	 
- stack 0: 0x464
449	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
450	 B3	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xB800F00178000001090005012301600086F0100099FF0001B800F001780000
451	 B4	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xB800F00178000001090005012301600086F0100099FF0001B800F001780000
- stack 0: 0xF0
452	 B6	SHR		 	 
- stack 1: 0x464
- stack 0: 0xB8
453	 B7	JUMP		 	 
- stack 0: 0x464
454	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x464
455	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
456	 BA	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xB800F00178000001090005012301600086F0100099FF0001B800F001780000
457	 BB	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0xB800F00178000001090005012301600086F0100099FF0001B800F001780000
- stack 0: 0xE0
458	 BD	SHR		 	 
- stack 1: 0x464
- stack 0: 0xB800F0
459	 BE	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0xB800F0
- stack 0: 0xFFFF
460	 C1	AND		 	 
- stack 1: 0x464
- stack 0: 0xF0
461	 C2	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xF0
- stack 0: 0x1
462	 C4	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xF0
463	 C5	PUSH2	0020	 	 
- stack 2: 0x464
- stack 1: 0xF0
- stack 0: 0x20
464	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x464
- stack 1: 0xF0
- stack 0: 0xF00FF00F
465	 C9	AND		 	  ;; # ANDI
- stack 1: 0x464
- stack 0: 0x0
466	 CA	PUSH2	0060	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x60
467	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x464
468	 CE	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
469	 D0	ADD		 	 
- stack 0: 0x468
470	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
471	 D2	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x178000001090005012301600086F0100099FF0001B800F00178000001090006
472	 D3	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x178000001090005012301600086F0100099FF0001B800F00178000001090006
- stack 0: 0xF0
473	 D5	SHR		 	 
- stack 1: 0x468
- stack 0: 0x178
474	 D6	JUMP		 	 
- stack 0: 0x468
475	 178	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,240(ignore imm)
- stack 0: 0x468
476	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
477	 17A	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x178000001090005012301600086F0100099FF0001B800F00178000001090006
478	 17B	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0x178000001090005012301600086F0100099FF0001B800F00178000001090006
- stack 0: 0xE0
479	 17D	SHR		 	 
- stack 1: 0x468
- stack 0: 0x1780000
480	 17E	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0x1780000
- stack 0: 0xFFFF
481	 181	AND		 	 
- stack 1: 0x468
- stack 0: 0x0
482	 182	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0x0
- stack 0: 0x1
483	 184	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0x0
484	 185	PUSH2	03A0	 	 
- stack 2: 0x468
- stack 1: 0x0
- stack 0: 0x3A0
485	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x468
486	 189	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
487	 18B	ADD		 	 
- stack 0: 0x46C
488	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
489	 18D	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x1090005012301600086F0100099FF0001B800F0017800000109000601D70148
490	 18E	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x1090005012301600086F0100099FF0001B800F0017800000109000601D70148
- stack 0: 0xF0
491	 190	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x109
492	 191	JUMP		 	 
- stack 0: 0x46C
493	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x46C
494	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x46C
- stack 0: 0x46C
495	 10B	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x1090005012301600086F0100099FF0001B800F0017800000109000601D70148
496	 10C	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0x1090005012301600086F0100099FF0001B800F0017800000109000601D70148
- stack 0: 0xE0
497	 10E	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x1090005
498	 10F	PUSH2	FFFF	 	 
- stack 2: 0x46C
- stack 1: 0x1090005
- stack 0: 0xFFFF
499	 112	AND		 	 
- stack 1: 0x46C
- stack 0: 0x5
500	 113	PUSH1	01	 	 
- stack 2: 0x46C
- stack 1: 0x5
- stack 0: 0x1
501	 115	SIGNEXTEND		 	 
- stack 1: 0x46C
- stack 0: 0x5
502	 116	PUSH2	0380	 	 
- stack 2: 0x46C
- stack 1: 0x5
- stack 0: 0x380
503	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x46C
504	 11A	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
505	 11C	ADD		 	 
- stack 0: 0x470
506	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
507	 11E	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x12301600086F0100099FF0001B800F0017800000109000601D7014802190000
508	 11F	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x12301600086F0100099FF0001B800F0017800000109000601D7014802190000
- stack 0: 0xF0
509	 121	SHR		 	 
- stack 1: 0x470
- stack 0: 0x123
510	 122	JUMP		 	 
- stack 0: 0x470
511	 123	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1a8(ignore imm)
- stack 0: 0x470
512	 124	PUSH2	0060	 	 
- stack 1: 0x470
- stack 0: 0x60
513	 127	MLOAD		 	  ;; # read from x3
- stack 1: 0x470
- stack 0: 0x0
514	 128	PUSH4	FFFFFFFF	 	 
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
515	 12D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x470
- stack 0: 0x0
516	 12E	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x3A0
517	 131	MLOAD		 	  ;; # read from x29
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x0
518	 132	PUSH4	FFFFFFFF	 	 
- stack 3: 0x470
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
519	 137	AND		 	  ;; # mask to 32 bits
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x0
520	 138	SUB		 	 
- stack 1: 0x470
- stack 0: 0x0
521	 139	PUSH2	0141	 ;; _neq_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x141
522	 13C	JUMPI		 	 
- stack 0: 0x470
523	 13D	PUSH2	015B	 ;; _neq_after_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 1: 0x470
- stack 0: 0x15B
524	 140	JUMP		 	 
- stack 0: 0x470
525	 15B	JUMPDEST		 ;; _neq_after_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 0: 0x470
526	 15C	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
527	 15E	ADD		 	 
- stack 0: 0x474
528	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
529	 160	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x86F0100099FF0001B800F0017800000109000601D70148021900000165FF01
530	 161	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x86F0100099FF0001B800F0017800000109000601D70148021900000165FF01
- stack 0: 0xF0
531	 163	SHR		 	 
- stack 1: 0x474
- stack 0: 0x86
532	 164	JUMP		 	 
- stack 0: 0x474
533	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x474
534	 87	PUSH4	ff010000	 	 
- stack 1: 0x474
- stack 0: 0xFF010000
535	 8C	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0xFF010000
- stack 0: 0x20
536	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x474
537	 90	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
538	 92	ADD		 	 
- stack 0: 0x478
539	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
540	 94	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x99FF0001B800F0017800000109000601D70148021900000165FF010099FFF0
541	 95	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x99FF0001B800F0017800000109000601D70148021900000165FF010099FFF0
- stack 0: 0xF0
542	 97	SHR		 	 
- stack 1: 0x478
- stack 0: 0x99
543	 98	JUMP		 	 
- stack 0: 0x478
544	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x478
545	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
546	 9B	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x99FF0001B800F0017800000109000601D70148021900000165FF010099FFF0
547	 9C	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0x99FF0001B800F0017800000109000601D70148021900000165FF010099FFF0
- stack 0: 0xE0
548	 9E	SHR		 	 
- stack 1: 0x478
- stack 0: 0x99FF00
549	 9F	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0x99FF00
- stack 0: 0xFFFF
550	 A2	AND		 	 
- stack 1: 0x478
- stack 0: 0xFF00
551	 A3	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0xFF00
- stack 0: 0x1
552	 A5	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
553	 A6	PUSH2	0020	 	 
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
554	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
555	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x478
- stack 0: 0xFF00FF00
556	 AB	PUSH2	0020	 	 
- stack 2: 0x478
- stack 1: 0xFF00FF00
- stack 0: 0x20
557	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x478
558	 AF	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
559	 B1	ADD		 	 
- stack 0: 0x47C
560	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
561	 B3	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x1B800F0017800000109000601D70148021900000165FF010099FFF000B8070F
562	 B4	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x1B800F0017800000109000601D70148021900000165FF010099FFF000B8070F
- stack 0: 0xF0
563	 B6	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x1B8
564	 B7	JUMP		 	 
- stack 0: 0x47C
565	 1B8	JUMPDEST		 ;; __riscvimpl_ANDI_1_1_0	  ;; # instr: andi ra,ra,240(ignore imm)
- stack 0: 0x47C
566	 1B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
567	 1BA	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x1B800F0017800000109000601D70148021900000165FF010099FFF000B8070F
568	 1BB	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0x1B800F0017800000109000601D70148021900000165FF010099FFF000B8070F
- stack 0: 0xE0
569	 1BD	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x1B800F0
570	 1BE	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0x1B800F0
- stack 0: 0xFFFF
571	 1C1	AND		 	 
- stack 1: 0x47C
- stack 0: 0xF0
572	 1C2	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0xF0
- stack 0: 0x1
573	 1C4	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0xF0
574	 1C5	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0xF0
- stack 0: 0x20
575	 1C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x47C
- stack 1: 0xF0
- stack 0: 0xFF00FF00
576	 1C9	AND		 	  ;; # ANDI
- stack 1: 0x47C
- stack 0: 0x0
577	 1CA	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x20
578	 1CD	MSTORE		 	  ;; # store to x1
- stack 0: 0x47C
579	 1CE	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
580	 1D0	ADD		 	 
- stack 0: 0x480
581	 1D1	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
582	 1D2	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x17800000109000601D70148021900000165FF010099FFF000B8070F02330000
583	 1D3	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x17800000109000601D70148021900000165FF010099FFF000B8070F02330000
- stack 0: 0xF0
584	 1D5	SHR		 	 
- stack 1: 0x480
- stack 0: 0x178
585	 1D6	JUMP		 	 
- stack 0: 0x480
586	 178	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,240(ignore imm)
- stack 0: 0x480
587	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
588	 17A	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x17800000109000601D70148021900000165FF010099FFF000B8070F02330000
589	 17B	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x17800000109000601D70148021900000165FF010099FFF000B8070F02330000
- stack 0: 0xE0
590	 17D	SHR		 	 
- stack 1: 0x480
- stack 0: 0x1780000
591	 17E	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x1780000
- stack 0: 0xFFFF
592	 181	AND		 	 
- stack 1: 0x480
- stack 0: 0x0
593	 182	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0x1
594	 184	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x0
595	 185	PUSH2	03A0	 	 
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0x3A0
596	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x480
597	 189	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
598	 18B	ADD		 	 
- stack 0: 0x484
599	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
600	 18D	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x109000601D70148021900000165FF010099FFF000B8070F0233000002520001
601	 18E	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x109000601D70148021900000165FF010099FFF000B8070F0233000002520001
- stack 0: 0xF0
602	 190	SHR		 	 
- stack 1: 0x484
- stack 0: 0x109
603	 191	JUMP		 	 
- stack 0: 0x484
604	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x484
605	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x484
- stack 0: 0x484
606	 10B	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x109000601D70148021900000165FF010099FFF000B8070F0233000002520001
607	 10C	PUSH1	E0	 	 
- stack 2: 0x484
- stack 1: 0x109000601D70148021900000165FF010099FFF000B8070F0233000002520001
- stack 0: 0xE0
608	 10E	SHR		 	 
- stack 1: 0x484
- stack 0: 0x1090006
609	 10F	PUSH2	FFFF	 	 
- stack 2: 0x484
- stack 1: 0x1090006
- stack 0: 0xFFFF
610	 112	AND		 	 
- stack 1: 0x484
- stack 0: 0x6
611	 113	PUSH1	01	 	 
- stack 2: 0x484
- stack 1: 0x6
- stack 0: 0x1
612	 115	SIGNEXTEND		 	 
- stack 1: 0x484
- stack 0: 0x6
613	 116	PUSH2	0380	 	 
- stack 2: 0x484
- stack 1: 0x6
- stack 0: 0x380
614	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x484
615	 11A	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
616	 11C	ADD		 	 
- stack 0: 0x488
617	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
618	 11E	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x1D70148021900000165FF010099FFF000B8070F023300000252000102710002
619	 11F	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x1D70148021900000165FF010099FFF000B8070F023300000252000102710002
- stack 0: 0xF0
620	 121	SHR		 	 
- stack 1: 0x488
- stack 0: 0x1D7
621	 122	JUMP		 	 
- stack 0: 0x488
622	 1D7	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,148(ignore imm)
- stack 0: 0x488
623	 1D8	PUSH2	0020	 	 
- stack 1: 0x488
- stack 0: 0x20
624	 1DB	MLOAD		 	  ;; # read from x1
- stack 1: 0x488
- stack 0: 0x0
625	 1DC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
626	 1E1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x488
- stack 0: 0x0
627	 1E2	PUSH2	03A0	 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x3A0
628	 1E5	MLOAD		 	  ;; # read from x29
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x0
629	 1E6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x488
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
630	 1EB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x0
631	 1EC	SUB		 	 
- stack 1: 0x488
- stack 0: 0x0
632	 1ED	PUSH2	01F5	 ;; _neq_09167e04b0a668846532e57f015a3315647c881541aaa3be3809b2a2f7394612	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x1F5
633	 1F0	JUMPI		 	 
- stack 0: 0x488
634	 1F1	PUSH2	020F	 ;; _neq_after_09167e04b0a668846532e57f015a3315647c881541aaa3be3809b2a2f7394612	 
- stack 1: 0x488
- stack 0: 0x20F
635	 1F4	JUMP		 	 
- stack 0: 0x488
636	 20F	JUMPDEST		 ;; _neq_after_09167e04b0a668846532e57f015a3315647c881541aaa3be3809b2a2f7394612	 
- stack 0: 0x488
637	 210	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
638	 212	ADD		 	 
- stack 0: 0x48C
639	 213	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
640	 214	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x21900000165FF010099FFF000B8070F023300000252000102710002028BFFE8
641	 215	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x21900000165FF010099FFF000B8070F023300000252000102710002028BFFE8
- stack 0: 0xF0
642	 217	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x219
643	 218	JUMP		 	 
- stack 0: 0x48C
644	 219	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x48C
645	 21A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
646	 21B	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x21900000165FF010099FFF000B8070F023300000252000102710002028BFFE8
647	 21C	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0x21900000165FF010099FFF000B8070F023300000252000102710002028BFFE8
- stack 0: 0xE0
648	 21E	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x2190000
649	 21F	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0x2190000
- stack 0: 0xFFFF
650	 222	AND		 	 
- stack 1: 0x48C
- stack 0: 0x0
651	 223	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0x0
- stack 0: 0x1
652	 225	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0x0
653	 226	PUSH2	0080	 	 
- stack 2: 0x48C
- stack 1: 0x0
- stack 0: 0x80
654	 229	MSTORE		 	  ;; # store to x4
- stack 0: 0x48C
655	 22A	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
656	 22C	ADD		 	 
- stack 0: 0x490
657	 22D	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
658	 22E	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x165FF010099FFF000B8070F023300000252000102710002028BFFE801780700
659	 22F	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x165FF010099FFF000B8070F023300000252000102710002028BFFE801780700
- stack 0: 0xF0
660	 231	SHR		 	 
- stack 1: 0x490
- stack 0: 0x165
661	 232	JUMP		 	 
- stack 0: 0x490
662	 165	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x490
663	 166	PUSH4	0ff01000	 	 
- stack 1: 0x490
- stack 0: 0xFF01000
664	 16B	PUSH2	0020	 	 
- stack 2: 0x490
- stack 1: 0xFF01000
- stack 0: 0x20
665	 16E	MSTORE		 	  ;; # store to x1
- stack 0: 0x490
666	 16F	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
667	 171	ADD		 	 
- stack 0: 0x494
668	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
669	 173	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x99FFF000B8070F023300000252000102710002028BFFE80178070001090007
670	 174	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x99FFF000B8070F023300000252000102710002028BFFE80178070001090007
- stack 0: 0xF0
671	 176	SHR		 	 
- stack 1: 0x494
- stack 0: 0x99
672	 177	JUMP		 	 
- stack 0: 0x494
673	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x494
674	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
675	 9B	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x99FFF000B8070F023300000252000102710002028BFFE80178070001090007
676	 9C	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0x99FFF000B8070F023300000252000102710002028BFFE80178070001090007
- stack 0: 0xE0
677	 9E	SHR		 	 
- stack 1: 0x494
- stack 0: 0x99FFF0
678	 9F	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
679	 A2	AND		 	 
- stack 1: 0x494
- stack 0: 0xFFF0
680	 A3	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0xFFF0
- stack 0: 0x1
681	 A5	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
682	 A6	PUSH2	0020	 	 
- stack 2: 0x494
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
683	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x494
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
684	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x494
- stack 0: 0xFF00FF0
685	 AB	PUSH2	0020	 	 
- stack 2: 0x494
- stack 1: 0xFF00FF0
- stack 0: 0x20
686	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x494
687	 AF	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
688	 B1	ADD		 	 
- stack 0: 0x498
689	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
690	 B3	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xB8070F023300000252000102710002028BFFE8017807000109000702CD011C
691	 B4	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xB8070F023300000252000102710002028BFFE8017807000109000702CD011C
- stack 0: 0xF0
692	 B6	SHR		 	 
- stack 1: 0x498
- stack 0: 0xB8
693	 B7	JUMP		 	 
- stack 0: 0x498
694	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x498
695	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
696	 BA	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xB8070F023300000252000102710002028BFFE8017807000109000702CD011C
697	 BB	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0xB8070F023300000252000102710002028BFFE8017807000109000702CD011C
- stack 0: 0xE0
698	 BD	SHR		 	 
- stack 1: 0x498
- stack 0: 0xB8070F
699	 BE	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0xB8070F
- stack 0: 0xFFFF
700	 C1	AND		 	 
- stack 1: 0x498
- stack 0: 0x70F
701	 C2	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x70F
- stack 0: 0x1
702	 C4	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x70F
703	 C5	PUSH2	0020	 	 
- stack 2: 0x498
- stack 1: 0x70F
- stack 0: 0x20
704	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x498
- stack 1: 0x70F
- stack 0: 0xFF00FF0
705	 C9	AND		 	  ;; # ANDI
- stack 1: 0x498
- stack 0: 0x700
706	 CA	PUSH2	0060	 	 
- stack 2: 0x498
- stack 1: 0x700
- stack 0: 0x60
707	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x498
708	 CE	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
709	 D0	ADD		 	 
- stack 0: 0x49C
710	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
711	 D2	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x23300000252000102710002028BFFE8017807000109000702CD011C02190000
712	 D3	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x23300000252000102710002028BFFE8017807000109000702CD011C02190000
- stack 0: 0xF0
713	 D5	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x233
714	 D6	JUMP		 	 
- stack 0: 0x49C
715	 233	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x49C
716	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x49C
- stack 0: 0x49C
717	 235	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x23300000252000102710002028BFFE8017807000109000702CD011C02190000
718	 236	PUSH1	E0	 	 
- stack 2: 0x49C
- stack 1: 0x23300000252000102710002028BFFE8017807000109000702CD011C02190000
- stack 0: 0xE0
719	 238	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x2330000
720	 239	PUSH2	FFFF	 	 
- stack 2: 0x49C
- stack 1: 0x2330000
- stack 0: 0xFFFF
721	 23C	AND		 	 
- stack 1: 0x49C
- stack 0: 0x0
722	 23D	PUSH1	01	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x1
723	 23F	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0x0
724	 240	PUSH2	0060	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x60
725	 243	MLOAD		 	  ;; # read from x3
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x700
726	 244	ADD		 	  ;; # ADDI 3
- stack 1: 0x49C
- stack 0: 0x700
727	 245	PUSH2	00C0	 	 
- stack 2: 0x49C
- stack 1: 0x700
- stack 0: 0xC0
728	 248	MSTORE		 	  ;; # store to x6
- stack 0: 0x49C
729	 249	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
730	 24B	ADD		 	 
- stack 0: 0x4A0
731	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
732	 24D	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x252000102710002028BFFE8017807000109000702CD011C0219000001920FF0
733	 24E	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x252000102710002028BFFE8017807000109000702CD011C0219000001920FF0
- stack 0: 0xF0
734	 250	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x252
735	 251	JUMP		 	 
- stack 0: 0x4A0
736	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4A0
737	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
738	 254	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x252000102710002028BFFE8017807000109000702CD011C0219000001920FF0
739	 255	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0x252000102710002028BFFE8017807000109000702CD011C0219000001920FF0
- stack 0: 0xE0
740	 257	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x2520001
741	 258	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x2520001
- stack 0: 0xFFFF
742	 25B	AND		 	 
- stack 1: 0x4A0
- stack 0: 0x1
743	 25C	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0x1
- stack 0: 0x1
744	 25E	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0x1
745	 25F	PUSH2	0080	 	 
- stack 2: 0x4A0
- stack 1: 0x1
- stack 0: 0x80
746	 262	MLOAD		 	  ;; # read from x4
- stack 2: 0x4A0
- stack 1: 0x1
- stack 0: 0x0
747	 263	ADD		 	  ;; # ADDI 4
- stack 1: 0x4A0
- stack 0: 0x1
748	 264	PUSH2	0080	 	 
- stack 2: 0x4A0
- stack 1: 0x1
- stack 0: 0x80
749	 267	MSTORE		 	  ;; # store to x4
- stack 0: 0x4A0
750	 268	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
751	 26A	ADD		 	 
- stack 0: 0x4A4
752	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
753	 26C	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x2710002028BFFE8017807000109000702CD011C0219000001920FF0009900FF
754	 26D	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x2710002028BFFE8017807000109000702CD011C0219000001920FF0009900FF
- stack 0: 0xF0
755	 26F	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x271
756	 270	JUMP		 	 
- stack 0: 0x4A4
757	 271	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4A4
758	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
759	 273	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x2710002028BFFE8017807000109000702CD011C0219000001920FF0009900FF
760	 274	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x2710002028BFFE8017807000109000702CD011C0219000001920FF0009900FF
- stack 0: 0xE0
761	 276	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x2710002
762	 277	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x2710002
- stack 0: 0xFFFF
763	 27A	AND		 	 
- stack 1: 0x4A4
- stack 0: 0x2
764	 27B	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0x2
- stack 0: 0x1
765	 27D	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0x2
766	 27E	PUSH2	00A0	 	 
- stack 2: 0x4A4
- stack 1: 0x2
- stack 0: 0xA0
767	 281	MSTORE		 	  ;; # store to x5
- stack 0: 0x4A4
768	 282	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
769	 284	ADD		 	 
- stack 0: 0x4A8
770	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
771	 286	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x28BFFE8017807000109000702CD011C0219000001920FF0009900FF00B800F0
772	 287	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x28BFFE8017807000109000702CD011C0219000001920FF0009900FF00B800F0
- stack 0: 0xF0
773	 289	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x28B
774	 28A	JUMP		 	 
- stack 0: 0x4A8
775	 28B	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4A8
776	 28C	PUSH2	0080	 	 
- stack 1: 0x4A8
- stack 0: 0x80
777	 28F	MLOAD		 	  ;; # read from x4
- stack 1: 0x4A8
- stack 0: 0x1
778	 290	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
779	 295	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A8
- stack 0: 0x1
780	 296	PUSH2	00A0	 	 
- stack 2: 0x4A8
- stack 1: 0x1
- stack 0: 0xA0
781	 299	MLOAD		 	  ;; # read from x5
- stack 2: 0x4A8
- stack 1: 0x1
- stack 0: 0x2
782	 29A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4A8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
783	 29F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4A8
- stack 1: 0x1
- stack 0: 0x2
784	 2A0	SUB		 	 
- stack 1: 0x4A8
- stack 0: 0x1
785	 2A1	PUSH2	02A9	 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 2: 0x4A8
- stack 1: 0x1
- stack 0: 0x2A9
786	 2A4	JUMPI		 	 
- stack 0: 0x4A8
787	 2A9	JUMPDEST		 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 0: 0x4A8
788	 2AA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
789	 2AB	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x28BFFE8017807000109000702CD011C0219000001920FF0009900FF00B800F0
790	 2AC	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0x28BFFE8017807000109000702CD011C0219000001920FF0009900FF00B800F0
- stack 0: 0xE0
791	 2AE	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x28BFFE8
792	 2AF	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x28BFFE8
- stack 0: 0xFFFF
793	 2B2	AND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFE8
794	 2B3	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0xFFE8
- stack 0: 0x1
795	 2B5	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
796	 2B6	ADD		 	 
- stack 0: 0x490
797	 2B7	PUSH4	FFFFFFFF	 	 
- stack 1: 0x490
- stack 0: 0xFFFFFFFF
798	 2BC	AND		 	  ;; # mask to 32 bits
- stack 0: 0x490
799	 2BD	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
800	 2BE	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x165FF010099FFF000B8070F023300000252000102710002028BFFE801780700
801	 2BF	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x165FF010099FFF000B8070F023300000252000102710002028BFFE801780700
- stack 0: 0xF0
802	 2C1	SHR		 	 
- stack 1: 0x490
- stack 0: 0x165
803	 2C2	JUMP		 	 
- stack 0: 0x490
804	 165	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x490
805	 166	PUSH4	0ff01000	 	 
- stack 1: 0x490
- stack 0: 0xFF01000
806	 16B	PUSH2	0020	 	 
- stack 2: 0x490
- stack 1: 0xFF01000
- stack 0: 0x20
807	 16E	MSTORE		 	  ;; # store to x1
- stack 0: 0x490
808	 16F	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
809	 171	ADD		 	 
- stack 0: 0x494
810	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
811	 173	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x99FFF000B8070F023300000252000102710002028BFFE80178070001090007
812	 174	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x99FFF000B8070F023300000252000102710002028BFFE80178070001090007
- stack 0: 0xF0
813	 176	SHR		 	 
- stack 1: 0x494
- stack 0: 0x99
814	 177	JUMP		 	 
- stack 0: 0x494
815	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x494
816	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
817	 9B	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x99FFF000B8070F023300000252000102710002028BFFE80178070001090007
818	 9C	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0x99FFF000B8070F023300000252000102710002028BFFE80178070001090007
- stack 0: 0xE0
819	 9E	SHR		 	 
- stack 1: 0x494
- stack 0: 0x99FFF0
820	 9F	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
821	 A2	AND		 	 
- stack 1: 0x494
- stack 0: 0xFFF0
822	 A3	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0xFFF0
- stack 0: 0x1
823	 A5	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
824	 A6	PUSH2	0020	 	 
- stack 2: 0x494
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
825	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x494
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
826	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x494
- stack 0: 0xFF00FF0
827	 AB	PUSH2	0020	 	 
- stack 2: 0x494
- stack 1: 0xFF00FF0
- stack 0: 0x20
828	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x494
829	 AF	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
830	 B1	ADD		 	 
- stack 0: 0x498
831	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
832	 B3	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xB8070F023300000252000102710002028BFFE8017807000109000702CD011C
833	 B4	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xB8070F023300000252000102710002028BFFE8017807000109000702CD011C
- stack 0: 0xF0
834	 B6	SHR		 	 
- stack 1: 0x498
- stack 0: 0xB8
835	 B7	JUMP		 	 
- stack 0: 0x498
836	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x498
837	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
838	 BA	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xB8070F023300000252000102710002028BFFE8017807000109000702CD011C
839	 BB	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0xB8070F023300000252000102710002028BFFE8017807000109000702CD011C
- stack 0: 0xE0
840	 BD	SHR		 	 
- stack 1: 0x498
- stack 0: 0xB8070F
841	 BE	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0xB8070F
- stack 0: 0xFFFF
842	 C1	AND		 	 
- stack 1: 0x498
- stack 0: 0x70F
843	 C2	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x70F
- stack 0: 0x1
844	 C4	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x70F
845	 C5	PUSH2	0020	 	 
- stack 2: 0x498
- stack 1: 0x70F
- stack 0: 0x20
846	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x498
- stack 1: 0x70F
- stack 0: 0xFF00FF0
847	 C9	AND		 	  ;; # ANDI
- stack 1: 0x498
- stack 0: 0x700
848	 CA	PUSH2	0060	 	 
- stack 2: 0x498
- stack 1: 0x700
- stack 0: 0x60
849	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x498
850	 CE	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
851	 D0	ADD		 	 
- stack 0: 0x49C
852	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
853	 D2	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x23300000252000102710002028BFFE8017807000109000702CD011C02190000
854	 D3	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x23300000252000102710002028BFFE8017807000109000702CD011C02190000
- stack 0: 0xF0
855	 D5	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x233
856	 D6	JUMP		 	 
- stack 0: 0x49C
857	 233	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x49C
858	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x49C
- stack 0: 0x49C
859	 235	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x23300000252000102710002028BFFE8017807000109000702CD011C02190000
860	 236	PUSH1	E0	 	 
- stack 2: 0x49C
- stack 1: 0x23300000252000102710002028BFFE8017807000109000702CD011C02190000
- stack 0: 0xE0
861	 238	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x2330000
862	 239	PUSH2	FFFF	 	 
- stack 2: 0x49C
- stack 1: 0x2330000
- stack 0: 0xFFFF
863	 23C	AND		 	 
- stack 1: 0x49C
- stack 0: 0x0
864	 23D	PUSH1	01	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x1
865	 23F	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0x0
866	 240	PUSH2	0060	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x60
867	 243	MLOAD		 	  ;; # read from x3
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x700
868	 244	ADD		 	  ;; # ADDI 3
- stack 1: 0x49C
- stack 0: 0x700
869	 245	PUSH2	00C0	 	 
- stack 2: 0x49C
- stack 1: 0x700
- stack 0: 0xC0
870	 248	MSTORE		 	  ;; # store to x6
- stack 0: 0x49C
871	 249	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
872	 24B	ADD		 	 
- stack 0: 0x4A0
873	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
874	 24D	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x252000102710002028BFFE8017807000109000702CD011C0219000001920FF0
875	 24E	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x252000102710002028BFFE8017807000109000702CD011C0219000001920FF0
- stack 0: 0xF0
876	 250	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x252
877	 251	JUMP		 	 
- stack 0: 0x4A0
878	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4A0
879	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
880	 254	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x252000102710002028BFFE8017807000109000702CD011C0219000001920FF0
881	 255	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0x252000102710002028BFFE8017807000109000702CD011C0219000001920FF0
- stack 0: 0xE0
882	 257	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x2520001
883	 258	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x2520001
- stack 0: 0xFFFF
884	 25B	AND		 	 
- stack 1: 0x4A0
- stack 0: 0x1
885	 25C	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0x1
- stack 0: 0x1
886	 25E	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0x1
887	 25F	PUSH2	0080	 	 
- stack 2: 0x4A0
- stack 1: 0x1
- stack 0: 0x80
888	 262	MLOAD		 	  ;; # read from x4
- stack 2: 0x4A0
- stack 1: 0x1
- stack 0: 0x1
889	 263	ADD		 	  ;; # ADDI 4
- stack 1: 0x4A0
- stack 0: 0x2
890	 264	PUSH2	0080	 	 
- stack 2: 0x4A0
- stack 1: 0x2
- stack 0: 0x80
891	 267	MSTORE		 	  ;; # store to x4
- stack 0: 0x4A0
892	 268	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
893	 26A	ADD		 	 
- stack 0: 0x4A4
894	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
895	 26C	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x2710002028BFFE8017807000109000702CD011C0219000001920FF0009900FF
896	 26D	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x2710002028BFFE8017807000109000702CD011C0219000001920FF0009900FF
- stack 0: 0xF0
897	 26F	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x271
898	 270	JUMP		 	 
- stack 0: 0x4A4
899	 271	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4A4
900	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
901	 273	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x2710002028BFFE8017807000109000702CD011C0219000001920FF0009900FF
902	 274	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x2710002028BFFE8017807000109000702CD011C0219000001920FF0009900FF
- stack 0: 0xE0
903	 276	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x2710002
904	 277	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x2710002
- stack 0: 0xFFFF
905	 27A	AND		 	 
- stack 1: 0x4A4
- stack 0: 0x2
906	 27B	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0x2
- stack 0: 0x1
907	 27D	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0x2
908	 27E	PUSH2	00A0	 	 
- stack 2: 0x4A4
- stack 1: 0x2
- stack 0: 0xA0
909	 281	MSTORE		 	  ;; # store to x5
- stack 0: 0x4A4
910	 282	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
911	 284	ADD		 	 
- stack 0: 0x4A8
912	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
913	 286	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x28BFFE8017807000109000702CD011C0219000001920FF0009900FF00B800F0
914	 287	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x28BFFE8017807000109000702CD011C0219000001920FF0009900FF00B800F0
- stack 0: 0xF0
915	 289	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x28B
916	 28A	JUMP		 	 
- stack 0: 0x4A8
917	 28B	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4A8
918	 28C	PUSH2	0080	 	 
- stack 1: 0x4A8
- stack 0: 0x80
919	 28F	MLOAD		 	  ;; # read from x4
- stack 1: 0x4A8
- stack 0: 0x2
920	 290	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
921	 295	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A8
- stack 0: 0x2
922	 296	PUSH2	00A0	 	 
- stack 2: 0x4A8
- stack 1: 0x2
- stack 0: 0xA0
923	 299	MLOAD		 	  ;; # read from x5
- stack 2: 0x4A8
- stack 1: 0x2
- stack 0: 0x2
924	 29A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4A8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
925	 29F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4A8
- stack 1: 0x2
- stack 0: 0x2
926	 2A0	SUB		 	 
- stack 1: 0x4A8
- stack 0: 0x0
927	 2A1	PUSH2	02A9	 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0x2A9
928	 2A4	JUMPI		 	 
- stack 0: 0x4A8
929	 2A5	PUSH2	02C3	 ;; _neq_after_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 1: 0x4A8
- stack 0: 0x2C3
930	 2A8	JUMP		 	 
- stack 0: 0x4A8
931	 2C3	JUMPDEST		 ;; _neq_after_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 0: 0x4A8
932	 2C4	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
933	 2C6	ADD		 	 
- stack 0: 0x4AC
934	 2C7	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
935	 2C8	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x17807000109000702CD011C0219000001920FF0009900FF00B800F0030F0000
936	 2C9	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x17807000109000702CD011C0219000001920FF0009900FF00B800F0030F0000
- stack 0: 0xF0
937	 2CB	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x178
938	 2CC	JUMP		 	 
- stack 0: 0x4AC
939	 178	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,240(ignore imm)
- stack 0: 0x4AC
940	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
941	 17A	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x17807000109000702CD011C0219000001920FF0009900FF00B800F0030F0000
942	 17B	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0x17807000109000702CD011C0219000001920FF0009900FF00B800F0030F0000
- stack 0: 0xE0
943	 17D	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x1780700
944	 17E	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0x1780700
- stack 0: 0xFFFF
945	 181	AND		 	 
- stack 1: 0x4AC
- stack 0: 0x700
946	 182	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0x700
- stack 0: 0x1
947	 184	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0x700
948	 185	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0x700
- stack 0: 0x3A0
949	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x4AC
950	 189	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
951	 18B	ADD		 	 
- stack 0: 0x4B0
952	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
953	 18D	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x109000702CD011C0219000001920FF0009900FF00B800F0030F000002330000
954	 18E	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x109000702CD011C0219000001920FF0009900FF00B800F0030F000002330000
- stack 0: 0xF0
955	 190	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x109
956	 191	JUMP		 	 
- stack 0: 0x4B0
957	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4B0
958	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
959	 10B	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x109000702CD011C0219000001920FF0009900FF00B800F0030F000002330000
960	 10C	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x109000702CD011C0219000001920FF0009900FF00B800F0030F000002330000
- stack 0: 0xE0
961	 10E	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x1090007
962	 10F	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x1090007
- stack 0: 0xFFFF
963	 112	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x7
964	 113	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x7
- stack 0: 0x1
965	 115	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x7
966	 116	PUSH2	0380	 	 
- stack 2: 0x4B0
- stack 1: 0x7
- stack 0: 0x380
967	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x4B0
968	 11A	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
969	 11C	ADD		 	 
- stack 0: 0x4B4
970	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
971	 11E	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x2CD011C0219000001920FF0009900FF00B800F0030F00000233000002520001
972	 11F	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x2CD011C0219000001920FF0009900FF00B800F0030F00000233000002520001
- stack 0: 0xF0
973	 121	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x2CD
974	 122	JUMP		 	 
- stack 0: 0x4B4
975	 2CD	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,11c(ignore imm)
- stack 0: 0x4B4
976	 2CE	PUSH2	00C0	 	 
- stack 1: 0x4B4
- stack 0: 0xC0
977	 2D1	MLOAD		 	  ;; # read from x6
- stack 1: 0x4B4
- stack 0: 0x700
978	 2D2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x700
- stack 0: 0xFFFFFFFF
979	 2D7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B4
- stack 0: 0x700
980	 2D8	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0x700
- stack 0: 0x3A0
981	 2DB	MLOAD		 	  ;; # read from x29
- stack 2: 0x4B4
- stack 1: 0x700
- stack 0: 0x700
982	 2DC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B4
- stack 2: 0x700
- stack 1: 0x700
- stack 0: 0xFFFFFFFF
983	 2E1	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B4
- stack 1: 0x700
- stack 0: 0x700
984	 2E2	SUB		 	 
- stack 1: 0x4B4
- stack 0: 0x0
985	 2E3	PUSH2	02EB	 ;; _neq_4db1744ef0f3242697d2f70193944f9a24196563c720540798812c35709d60d3	 
- stack 2: 0x4B4
- stack 1: 0x0
- stack 0: 0x2EB
986	 2E6	JUMPI		 	 
- stack 0: 0x4B4
987	 2E7	PUSH2	0305	 ;; _neq_after_4db1744ef0f3242697d2f70193944f9a24196563c720540798812c35709d60d3	 
- stack 1: 0x4B4
- stack 0: 0x305
988	 2EA	JUMP		 	 
- stack 0: 0x4B4
989	 305	JUMPDEST		 ;; _neq_after_4db1744ef0f3242697d2f70193944f9a24196563c720540798812c35709d60d3	 
- stack 0: 0x4B4
990	 306	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
991	 308	ADD		 	 
- stack 0: 0x4B8
992	 309	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
993	 30A	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x219000001920FF0009900FF00B800F0030F0000023300000252000102710002
994	 30B	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x219000001920FF0009900FF00B800F0030F0000023300000252000102710002
- stack 0: 0xF0
995	 30D	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x219
996	 30E	JUMP		 	 
- stack 0: 0x4B8
997	 219	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x4B8
998	 21A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
999	 21B	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x219000001920FF0009900FF00B800F0030F0000023300000252000102710002
1000	 21C	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0x219000001920FF0009900FF00B800F0030F0000023300000252000102710002
- stack 0: 0xE0
1001	 21E	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x2190000
1002	 21F	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x2190000
- stack 0: 0xFFFF
1003	 222	AND		 	 
- stack 1: 0x4B8
- stack 0: 0x0
1004	 223	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x1
1005	 225	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0x0
1006	 226	PUSH2	0080	 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x80
1007	 229	MSTORE		 	  ;; # store to x4
- stack 0: 0x4B8
1008	 22A	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
1009	 22C	ADD		 	 
- stack 0: 0x4BC
1010	 22D	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
1011	 22E	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x1920FF0009900FF00B800F0030F0000023300000252000102710002028BFFE4
1012	 22F	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x1920FF0009900FF00B800F0030F0000023300000252000102710002028BFFE4
- stack 0: 0xF0
1013	 231	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x192
1014	 232	JUMP		 	 
- stack 0: 0x4BC
1015	 192	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x4BC
1016	 193	PUSH4	00ff0000	 	 
- stack 1: 0x4BC
- stack 0: 0xFF0000
1017	 198	PUSH2	0020	 	 
- stack 2: 0x4BC
- stack 1: 0xFF0000
- stack 0: 0x20
1018	 19B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4BC
1019	 19C	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
1020	 19E	ADD		 	 
- stack 0: 0x4C0
1021	 19F	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
1022	 1A0	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x9900FF00B800F0030F0000023300000252000102710002028BFFE4017800F0
1023	 1A1	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x9900FF00B800F0030F0000023300000252000102710002028BFFE4017800F0
- stack 0: 0xF0
1024	 1A3	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x99
1025	 1A4	JUMP		 	 
- stack 0: 0x4C0
1026	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4C0
1027	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
1028	 9B	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x9900FF00B800F0030F0000023300000252000102710002028BFFE4017800F0
1029	 9C	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0x9900FF00B800F0030F0000023300000252000102710002028BFFE4017800F0
- stack 0: 0xE0
1030	 9E	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x9900FF
1031	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x9900FF
- stack 0: 0xFFFF
1032	 A2	AND		 	 
- stack 1: 0x4C0
- stack 0: 0xFF
1033	 A3	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0xFF
- stack 0: 0x1
1034	 A5	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0xFF
1035	 A6	PUSH2	0020	 	 
- stack 2: 0x4C0
- stack 1: 0xFF
- stack 0: 0x20
1036	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C0
- stack 1: 0xFF
- stack 0: 0xFF0000
1037	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4C0
- stack 0: 0xFF00FF
1038	 AB	PUSH2	0020	 	 
- stack 2: 0x4C0
- stack 1: 0xFF00FF
- stack 0: 0x20
1039	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C0
1040	 AF	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
1041	 B1	ADD		 	 
- stack 0: 0x4C4
1042	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
1043	 B3	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xB800F0030F0000023300000252000102710002028BFFE4017800F001090008
1044	 B4	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0xB800F0030F0000023300000252000102710002028BFFE4017800F001090008
- stack 0: 0xF0
1045	 B6	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xB8
1046	 B7	JUMP		 	 
- stack 0: 0x4C4
1047	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x4C4
1048	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
1049	 BA	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xB800F0030F0000023300000252000102710002028BFFE4017800F001090008
1050	 BB	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0xB800F0030F0000023300000252000102710002028BFFE4017800F001090008
- stack 0: 0xE0
1051	 BD	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xB800F0
1052	 BE	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0xB800F0
- stack 0: 0xFFFF
1053	 C1	AND		 	 
- stack 1: 0x4C4
- stack 0: 0xF0
1054	 C2	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0xF0
- stack 0: 0x1
1055	 C4	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0xF0
1056	 C5	PUSH2	0020	 	 
- stack 2: 0x4C4
- stack 1: 0xF0
- stack 0: 0x20
1057	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C4
- stack 1: 0xF0
- stack 0: 0xFF00FF
1058	 C9	AND		 	  ;; # ANDI
- stack 1: 0x4C4
- stack 0: 0xF0
1059	 CA	PUSH2	0060	 	 
- stack 2: 0x4C4
- stack 1: 0xF0
- stack 0: 0x60
1060	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x4C4
1061	 CE	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
1062	 D0	ADD		 	 
- stack 0: 0x4C8
1063	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
1064	 D2	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x30F0000023300000252000102710002028BFFE4017800F00109000802CD00EC
1065	 D3	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x30F0000023300000252000102710002028BFFE4017800F00109000802CD00EC
- stack 0: 0xF0
1066	 D5	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x30F
1067	 D6	JUMP		 	 
- stack 0: 0x4C8
1068	 30F	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x4C8
1069	 310	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
1070	 311	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x30F0000023300000252000102710002028BFFE4017800F00109000802CD00EC
1071	 312	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0x30F0000023300000252000102710002028BFFE4017800F00109000802CD00EC
- stack 0: 0xE0
1072	 314	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x30F0000
1073	 315	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0x30F0000
- stack 0: 0xFFFF
1074	 318	AND		 	 
- stack 1: 0x4C8
- stack 0: 0x0
1075	 319	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x1
1076	 31B	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0x0
1077	 31C	POP		 	 
- stack 0: 0x4C8
1078	 31D	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
1079	 31F	ADD		 	 
- stack 0: 0x4CC
1080	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
1081	 321	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x23300000252000102710002028BFFE4017800F00109000802CD00EC02190000
1082	 322	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x23300000252000102710002028BFFE4017800F00109000802CD00EC02190000
- stack 0: 0xF0
1083	 324	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x233
1084	 325	JUMP		 	 
- stack 0: 0x4CC
1085	 233	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x4CC
1086	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
1087	 235	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x23300000252000102710002028BFFE4017800F00109000802CD00EC02190000
1088	 236	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0x23300000252000102710002028BFFE4017800F00109000802CD00EC02190000
- stack 0: 0xE0
1089	 238	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x2330000
1090	 239	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0x2330000
- stack 0: 0xFFFF
1091	 23C	AND		 	 
- stack 1: 0x4CC
- stack 0: 0x0
1092	 23D	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0x0
- stack 0: 0x1
1093	 23F	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0x0
1094	 240	PUSH2	0060	 	 
- stack 2: 0x4CC
- stack 1: 0x0
- stack 0: 0x60
1095	 243	MLOAD		 	  ;; # read from x3
- stack 2: 0x4CC
- stack 1: 0x0
- stack 0: 0xF0
1096	 244	ADD		 	  ;; # ADDI 3
- stack 1: 0x4CC
- stack 0: 0xF0
1097	 245	PUSH2	00C0	 	 
- stack 2: 0x4CC
- stack 1: 0xF0
- stack 0: 0xC0
1098	 248	MSTORE		 	  ;; # store to x6
- stack 0: 0x4CC
1099	 249	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
1100	 24B	ADD		 	 
- stack 0: 0x4D0
1101	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
1102	 24D	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x252000102710002028BFFE4017800F00109000802CD00EC0219000001A500FF
1103	 24E	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x252000102710002028BFFE4017800F00109000802CD00EC0219000001A500FF
- stack 0: 0xF0
1104	 250	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x252
1105	 251	JUMP		 	 
- stack 0: 0x4D0
1106	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4D0
1107	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
1108	 254	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x252000102710002028BFFE4017800F00109000802CD00EC0219000001A500FF
1109	 255	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x252000102710002028BFFE4017800F00109000802CD00EC0219000001A500FF
- stack 0: 0xE0
1110	 257	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x2520001
1111	 258	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x2520001
- stack 0: 0xFFFF
1112	 25B	AND		 	 
- stack 1: 0x4D0
- stack 0: 0x1
1113	 25C	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0x1
- stack 0: 0x1
1114	 25E	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0x1
1115	 25F	PUSH2	0080	 	 
- stack 2: 0x4D0
- stack 1: 0x1
- stack 0: 0x80
1116	 262	MLOAD		 	  ;; # read from x4
- stack 2: 0x4D0
- stack 1: 0x1
- stack 0: 0x0
1117	 263	ADD		 	  ;; # ADDI 4
- stack 1: 0x4D0
- stack 0: 0x1
1118	 264	PUSH2	0080	 	 
- stack 2: 0x4D0
- stack 1: 0x1
- stack 0: 0x80
1119	 267	MSTORE		 	  ;; # store to x4
- stack 0: 0x4D0
1120	 268	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1121	 26A	ADD		 	 
- stack 0: 0x4D4
1122	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1123	 26C	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x2710002028BFFE4017800F00109000802CD00EC0219000001A500FF0099000F
1124	 26D	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x2710002028BFFE4017800F00109000802CD00EC0219000001A500FF0099000F
- stack 0: 0xF0
1125	 26F	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x271
1126	 270	JUMP		 	 
- stack 0: 0x4D4
1127	 271	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4D4
1128	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
1129	 273	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x2710002028BFFE4017800F00109000802CD00EC0219000001A500FF0099000F
1130	 274	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0x2710002028BFFE4017800F00109000802CD00EC0219000001A500FF0099000F
- stack 0: 0xE0
1131	 276	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x2710002
1132	 277	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x2710002
- stack 0: 0xFFFF
1133	 27A	AND		 	 
- stack 1: 0x4D4
- stack 0: 0x2
1134	 27B	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0x2
- stack 0: 0x1
1135	 27D	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0x2
1136	 27E	PUSH2	00A0	 	 
- stack 2: 0x4D4
- stack 1: 0x2
- stack 0: 0xA0
1137	 281	MSTORE		 	  ;; # store to x5
- stack 0: 0x4D4
1138	 282	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1139	 284	ADD		 	 
- stack 0: 0x4D8
1140	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1141	 286	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x28BFFE4017800F00109000802CD00EC0219000001A500FF0099000F00B8FF0F
1142	 287	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x28BFFE4017800F00109000802CD00EC0219000001A500FF0099000F00B8FF0F
- stack 0: 0xF0
1143	 289	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x28B
1144	 28A	JUMP		 	 
- stack 0: 0x4D8
1145	 28B	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4D8
1146	 28C	PUSH2	0080	 	 
- stack 1: 0x4D8
- stack 0: 0x80
1147	 28F	MLOAD		 	  ;; # read from x4
- stack 1: 0x4D8
- stack 0: 0x1
1148	 290	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1149	 295	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D8
- stack 0: 0x1
1150	 296	PUSH2	00A0	 	 
- stack 2: 0x4D8
- stack 1: 0x1
- stack 0: 0xA0
1151	 299	MLOAD		 	  ;; # read from x5
- stack 2: 0x4D8
- stack 1: 0x1
- stack 0: 0x2
1152	 29A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1153	 29F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D8
- stack 1: 0x1
- stack 0: 0x2
1154	 2A0	SUB		 	 
- stack 1: 0x4D8
- stack 0: 0x1
1155	 2A1	PUSH2	02A9	 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 2: 0x4D8
- stack 1: 0x1
- stack 0: 0x2A9
1156	 2A4	JUMPI		 	 
- stack 0: 0x4D8
1157	 2A9	JUMPDEST		 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 0: 0x4D8
1158	 2AA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
1159	 2AB	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x28BFFE4017800F00109000802CD00EC0219000001A500FF0099000F00B8FF0F
1160	 2AC	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0x28BFFE4017800F00109000802CD00EC0219000001A500FF0099000F00B8FF0F
- stack 0: 0xE0
1161	 2AE	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x28BFFE4
1162	 2AF	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x28BFFE4
- stack 0: 0xFFFF
1163	 2B2	AND		 	 
- stack 1: 0x4D8
- stack 0: 0xFFE4
1164	 2B3	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0xFFE4
- stack 0: 0x1
1165	 2B5	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
1166	 2B6	ADD		 	 
- stack 0: 0x4BC
1167	 2B7	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4BC
- stack 0: 0xFFFFFFFF
1168	 2BC	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4BC
1169	 2BD	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
1170	 2BE	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x1920FF0009900FF00B800F0030F0000023300000252000102710002028BFFE4
1171	 2BF	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x1920FF0009900FF00B800F0030F0000023300000252000102710002028BFFE4
- stack 0: 0xF0
1172	 2C1	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x192
1173	 2C2	JUMP		 	 
- stack 0: 0x4BC
1174	 192	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x4BC
1175	 193	PUSH4	00ff0000	 	 
- stack 1: 0x4BC
- stack 0: 0xFF0000
1176	 198	PUSH2	0020	 	 
- stack 2: 0x4BC
- stack 1: 0xFF0000
- stack 0: 0x20
1177	 19B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4BC
1178	 19C	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
1179	 19E	ADD		 	 
- stack 0: 0x4C0
1180	 19F	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
1181	 1A0	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x9900FF00B800F0030F0000023300000252000102710002028BFFE4017800F0
1182	 1A1	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x9900FF00B800F0030F0000023300000252000102710002028BFFE4017800F0
- stack 0: 0xF0
1183	 1A3	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x99
1184	 1A4	JUMP		 	 
- stack 0: 0x4C0
1185	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4C0
1186	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
1187	 9B	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x9900FF00B800F0030F0000023300000252000102710002028BFFE4017800F0
1188	 9C	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0x9900FF00B800F0030F0000023300000252000102710002028BFFE4017800F0
- stack 0: 0xE0
1189	 9E	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x9900FF
1190	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x9900FF
- stack 0: 0xFFFF
1191	 A2	AND		 	 
- stack 1: 0x4C0
- stack 0: 0xFF
1192	 A3	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0xFF
- stack 0: 0x1
1193	 A5	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0xFF
1194	 A6	PUSH2	0020	 	 
- stack 2: 0x4C0
- stack 1: 0xFF
- stack 0: 0x20
1195	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C0
- stack 1: 0xFF
- stack 0: 0xFF0000
1196	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4C0
- stack 0: 0xFF00FF
1197	 AB	PUSH2	0020	 	 
- stack 2: 0x4C0
- stack 1: 0xFF00FF
- stack 0: 0x20
1198	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C0
1199	 AF	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
1200	 B1	ADD		 	 
- stack 0: 0x4C4
1201	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
1202	 B3	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xB800F0030F0000023300000252000102710002028BFFE4017800F001090008
1203	 B4	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0xB800F0030F0000023300000252000102710002028BFFE4017800F001090008
- stack 0: 0xF0
1204	 B6	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xB8
1205	 B7	JUMP		 	 
- stack 0: 0x4C4
1206	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x4C4
1207	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
1208	 BA	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xB800F0030F0000023300000252000102710002028BFFE4017800F001090008
1209	 BB	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0xB800F0030F0000023300000252000102710002028BFFE4017800F001090008
- stack 0: 0xE0
1210	 BD	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xB800F0
1211	 BE	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0xB800F0
- stack 0: 0xFFFF
1212	 C1	AND		 	 
- stack 1: 0x4C4
- stack 0: 0xF0
1213	 C2	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0xF0
- stack 0: 0x1
1214	 C4	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0xF0
1215	 C5	PUSH2	0020	 	 
- stack 2: 0x4C4
- stack 1: 0xF0
- stack 0: 0x20
1216	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C4
- stack 1: 0xF0
- stack 0: 0xFF00FF
1217	 C9	AND		 	  ;; # ANDI
- stack 1: 0x4C4
- stack 0: 0xF0
1218	 CA	PUSH2	0060	 	 
- stack 2: 0x4C4
- stack 1: 0xF0
- stack 0: 0x60
1219	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x4C4
1220	 CE	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
1221	 D0	ADD		 	 
- stack 0: 0x4C8
1222	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
1223	 D2	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x30F0000023300000252000102710002028BFFE4017800F00109000802CD00EC
1224	 D3	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x30F0000023300000252000102710002028BFFE4017800F00109000802CD00EC
- stack 0: 0xF0
1225	 D5	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x30F
1226	 D6	JUMP		 	 
- stack 0: 0x4C8
1227	 30F	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x4C8
1228	 310	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
1229	 311	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x30F0000023300000252000102710002028BFFE4017800F00109000802CD00EC
1230	 312	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0x30F0000023300000252000102710002028BFFE4017800F00109000802CD00EC
- stack 0: 0xE0
1231	 314	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x30F0000
1232	 315	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0x30F0000
- stack 0: 0xFFFF
1233	 318	AND		 	 
- stack 1: 0x4C8
- stack 0: 0x0
1234	 319	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x1
1235	 31B	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0x0
1236	 31C	POP		 	 
- stack 0: 0x4C8
1237	 31D	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
1238	 31F	ADD		 	 
- stack 0: 0x4CC
1239	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
1240	 321	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x23300000252000102710002028BFFE4017800F00109000802CD00EC02190000
1241	 322	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x23300000252000102710002028BFFE4017800F00109000802CD00EC02190000
- stack 0: 0xF0
1242	 324	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x233
1243	 325	JUMP		 	 
- stack 0: 0x4CC
1244	 233	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x4CC
1245	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
1246	 235	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x23300000252000102710002028BFFE4017800F00109000802CD00EC02190000
1247	 236	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0x23300000252000102710002028BFFE4017800F00109000802CD00EC02190000
- stack 0: 0xE0
1248	 238	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x2330000
1249	 239	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0x2330000
- stack 0: 0xFFFF
1250	 23C	AND		 	 
- stack 1: 0x4CC
- stack 0: 0x0
1251	 23D	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0x0
- stack 0: 0x1
1252	 23F	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0x0
1253	 240	PUSH2	0060	 	 
- stack 2: 0x4CC
- stack 1: 0x0
- stack 0: 0x60
1254	 243	MLOAD		 	  ;; # read from x3
- stack 2: 0x4CC
- stack 1: 0x0
- stack 0: 0xF0
1255	 244	ADD		 	  ;; # ADDI 3
- stack 1: 0x4CC
- stack 0: 0xF0
1256	 245	PUSH2	00C0	 	 
- stack 2: 0x4CC
- stack 1: 0xF0
- stack 0: 0xC0
1257	 248	MSTORE		 	  ;; # store to x6
- stack 0: 0x4CC
1258	 249	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
1259	 24B	ADD		 	 
- stack 0: 0x4D0
1260	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
1261	 24D	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x252000102710002028BFFE4017800F00109000802CD00EC0219000001A500FF
1262	 24E	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x252000102710002028BFFE4017800F00109000802CD00EC0219000001A500FF
- stack 0: 0xF0
1263	 250	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x252
1264	 251	JUMP		 	 
- stack 0: 0x4D0
1265	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4D0
1266	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
1267	 254	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x252000102710002028BFFE4017800F00109000802CD00EC0219000001A500FF
1268	 255	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x252000102710002028BFFE4017800F00109000802CD00EC0219000001A500FF
- stack 0: 0xE0
1269	 257	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x2520001
1270	 258	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x2520001
- stack 0: 0xFFFF
1271	 25B	AND		 	 
- stack 1: 0x4D0
- stack 0: 0x1
1272	 25C	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0x1
- stack 0: 0x1
1273	 25E	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0x1
1274	 25F	PUSH2	0080	 	 
- stack 2: 0x4D0
- stack 1: 0x1
- stack 0: 0x80
1275	 262	MLOAD		 	  ;; # read from x4
- stack 2: 0x4D0
- stack 1: 0x1
- stack 0: 0x1
1276	 263	ADD		 	  ;; # ADDI 4
- stack 1: 0x4D0
- stack 0: 0x2
1277	 264	PUSH2	0080	 	 
- stack 2: 0x4D0
- stack 1: 0x2
- stack 0: 0x80
1278	 267	MSTORE		 	  ;; # store to x4
- stack 0: 0x4D0
1279	 268	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1280	 26A	ADD		 	 
- stack 0: 0x4D4
1281	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1282	 26C	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x2710002028BFFE4017800F00109000802CD00EC0219000001A500FF0099000F
1283	 26D	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x2710002028BFFE4017800F00109000802CD00EC0219000001A500FF0099000F
- stack 0: 0xF0
1284	 26F	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x271
1285	 270	JUMP		 	 
- stack 0: 0x4D4
1286	 271	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4D4
1287	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
1288	 273	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x2710002028BFFE4017800F00109000802CD00EC0219000001A500FF0099000F
1289	 274	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0x2710002028BFFE4017800F00109000802CD00EC0219000001A500FF0099000F
- stack 0: 0xE0
1290	 276	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x2710002
1291	 277	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x2710002
- stack 0: 0xFFFF
1292	 27A	AND		 	 
- stack 1: 0x4D4
- stack 0: 0x2
1293	 27B	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0x2
- stack 0: 0x1
1294	 27D	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0x2
1295	 27E	PUSH2	00A0	 	 
- stack 2: 0x4D4
- stack 1: 0x2
- stack 0: 0xA0
1296	 281	MSTORE		 	  ;; # store to x5
- stack 0: 0x4D4
1297	 282	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1298	 284	ADD		 	 
- stack 0: 0x4D8
1299	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1300	 286	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x28BFFE4017800F00109000802CD00EC0219000001A500FF0099000F00B8FF0F
1301	 287	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x28BFFE4017800F00109000802CD00EC0219000001A500FF0099000F00B8FF0F
- stack 0: 0xF0
1302	 289	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x28B
1303	 28A	JUMP		 	 
- stack 0: 0x4D8
1304	 28B	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4D8
1305	 28C	PUSH2	0080	 	 
- stack 1: 0x4D8
- stack 0: 0x80
1306	 28F	MLOAD		 	  ;; # read from x4
- stack 1: 0x4D8
- stack 0: 0x2
1307	 290	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1308	 295	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D8
- stack 0: 0x2
1309	 296	PUSH2	00A0	 	 
- stack 2: 0x4D8
- stack 1: 0x2
- stack 0: 0xA0
1310	 299	MLOAD		 	  ;; # read from x5
- stack 2: 0x4D8
- stack 1: 0x2
- stack 0: 0x2
1311	 29A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1312	 29F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D8
- stack 1: 0x2
- stack 0: 0x2
1313	 2A0	SUB		 	 
- stack 1: 0x4D8
- stack 0: 0x0
1314	 2A1	PUSH2	02A9	 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 2: 0x4D8
- stack 1: 0x0
- stack 0: 0x2A9
1315	 2A4	JUMPI		 	 
- stack 0: 0x4D8
1316	 2A5	PUSH2	02C3	 ;; _neq_after_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 1: 0x4D8
- stack 0: 0x2C3
1317	 2A8	JUMP		 	 
- stack 0: 0x4D8
1318	 2C3	JUMPDEST		 ;; _neq_after_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 0: 0x4D8
1319	 2C4	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1320	 2C6	ADD		 	 
- stack 0: 0x4DC
1321	 2C7	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1322	 2C8	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x17800F00109000802CD00EC0219000001A500FF0099000F00B8FF0F030F0000
1323	 2C9	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x17800F00109000802CD00EC0219000001A500FF0099000F00B8FF0F030F0000
- stack 0: 0xF0
1324	 2CB	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x178
1325	 2CC	JUMP		 	 
- stack 0: 0x4DC
1326	 178	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,240(ignore imm)
- stack 0: 0x4DC
1327	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
1328	 17A	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x17800F00109000802CD00EC0219000001A500FF0099000F00B8FF0F030F0000
1329	 17B	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0x17800F00109000802CD00EC0219000001A500FF0099000F00B8FF0F030F0000
- stack 0: 0xE0
1330	 17D	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x17800F0
1331	 17E	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x17800F0
- stack 0: 0xFFFF
1332	 181	AND		 	 
- stack 1: 0x4DC
- stack 0: 0xF0
1333	 182	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0xF0
- stack 0: 0x1
1334	 184	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0xF0
1335	 185	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0xF0
- stack 0: 0x3A0
1336	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x4DC
1337	 189	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1338	 18B	ADD		 	 
- stack 0: 0x4E0
1339	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1340	 18D	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x109000802CD00EC0219000001A500FF0099000F00B8FF0F030F0000030F0000
1341	 18E	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x109000802CD00EC0219000001A500FF0099000F00B8FF0F030F0000030F0000
- stack 0: 0xF0
1342	 190	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x109
1343	 191	JUMP		 	 
- stack 0: 0x4E0
1344	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E0
1345	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1346	 10B	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x109000802CD00EC0219000001A500FF0099000F00B8FF0F030F0000030F0000
1347	 10C	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0x109000802CD00EC0219000001A500FF0099000F00B8FF0F030F0000030F0000
- stack 0: 0xE0
1348	 10E	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x1090008
1349	 10F	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x1090008
- stack 0: 0xFFFF
1350	 112	AND		 	 
- stack 1: 0x4E0
- stack 0: 0x8
1351	 113	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0x8
- stack 0: 0x1
1352	 115	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0x8
1353	 116	PUSH2	0380	 	 
- stack 2: 0x4E0
- stack 1: 0x8
- stack 0: 0x380
1354	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E0
1355	 11A	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1356	 11C	ADD		 	 
- stack 0: 0x4E4
1357	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1358	 11E	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x2CD00EC0219000001A500FF0099000F00B8FF0F030F0000030F000002330000
1359	 11F	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x2CD00EC0219000001A500FF0099000F00B8FF0F030F0000030F000002330000
- stack 0: 0xF0
1360	 121	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x2CD
1361	 122	JUMP		 	 
- stack 0: 0x4E4
1362	 2CD	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,11c(ignore imm)
- stack 0: 0x4E4
1363	 2CE	PUSH2	00C0	 	 
- stack 1: 0x4E4
- stack 0: 0xC0
1364	 2D1	MLOAD		 	  ;; # read from x6
- stack 1: 0x4E4
- stack 0: 0xF0
1365	 2D2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E4
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
1366	 2D7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E4
- stack 0: 0xF0
1367	 2D8	PUSH2	03A0	 	 
- stack 2: 0x4E4
- stack 1: 0xF0
- stack 0: 0x3A0
1368	 2DB	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E4
- stack 1: 0xF0
- stack 0: 0xF0
1369	 2DC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E4
- stack 2: 0xF0
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
1370	 2E1	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E4
- stack 1: 0xF0
- stack 0: 0xF0
1371	 2E2	SUB		 	 
- stack 1: 0x4E4
- stack 0: 0x0
1372	 2E3	PUSH2	02EB	 ;; _neq_4db1744ef0f3242697d2f70193944f9a24196563c720540798812c35709d60d3	 
- stack 2: 0x4E4
- stack 1: 0x0
- stack 0: 0x2EB
1373	 2E6	JUMPI		 	 
- stack 0: 0x4E4
1374	 2E7	PUSH2	0305	 ;; _neq_after_4db1744ef0f3242697d2f70193944f9a24196563c720540798812c35709d60d3	 
- stack 1: 0x4E4
- stack 0: 0x305
1375	 2EA	JUMP		 	 
- stack 0: 0x4E4
1376	 305	JUMPDEST		 ;; _neq_after_4db1744ef0f3242697d2f70193944f9a24196563c720540798812c35709d60d3	 
- stack 0: 0x4E4
1377	 306	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1378	 308	ADD		 	 
- stack 0: 0x4E8
1379	 309	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1380	 30A	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x219000001A500FF0099000F00B8FF0F030F0000030F00000233000002520001
1381	 30B	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x219000001A500FF0099000F00B8FF0F030F0000030F00000233000002520001
- stack 0: 0xF0
1382	 30D	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x219
1383	 30E	JUMP		 	 
- stack 0: 0x4E8
1384	 219	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x4E8
1385	 21A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1386	 21B	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x219000001A500FF0099000F00B8FF0F030F0000030F00000233000002520001
1387	 21C	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0x219000001A500FF0099000F00B8FF0F030F0000030F00000233000002520001
- stack 0: 0xE0
1388	 21E	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x2190000
1389	 21F	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x2190000
- stack 0: 0xFFFF
1390	 222	AND		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1391	 223	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x1
1392	 225	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1393	 226	PUSH2	0080	 	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x80
1394	 229	MSTORE		 	  ;; # store to x4
- stack 0: 0x4E8
1395	 22A	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1396	 22C	ADD		 	 
- stack 0: 0x4EC
1397	 22D	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1398	 22E	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x1A500FF0099000F00B8FF0F030F0000030F0000023300000252000102710002
1399	 22F	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x1A500FF0099000F00B8FF0F030F0000030F0000023300000252000102710002
- stack 0: 0xF0
1400	 231	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x1A5
1401	 232	JUMP		 	 
- stack 0: 0x4EC
1402	 1A5	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x4EC
1403	 1A6	PUSH4	f00ff000	 	 
- stack 1: 0x4EC
- stack 0: 0xF00FF000
1404	 1AB	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0xF00FF000
- stack 0: 0x20
1405	 1AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4EC
1406	 1AF	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1407	 1B1	ADD		 	 
- stack 0: 0x4F0
1408	 1B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1409	 1B3	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x99000F00B8FF0F030F0000030F0000023300000252000102710002028BFFE0
1410	 1B4	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x99000F00B8FF0F030F0000030F0000023300000252000102710002028BFFE0
- stack 0: 0xF0
1411	 1B6	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x99
1412	 1B7	JUMP		 	 
- stack 0: 0x4F0
1413	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4F0
1414	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F0
- stack 0: 0x4F0
1415	 9B	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x99000F00B8FF0F030F0000030F0000023300000252000102710002028BFFE0
1416	 9C	PUSH1	E0	 	 
- stack 2: 0x4F0
- stack 1: 0x99000F00B8FF0F030F0000030F0000023300000252000102710002028BFFE0
- stack 0: 0xE0
1417	 9E	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x99000F
1418	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4F0
- stack 1: 0x99000F
- stack 0: 0xFFFF
1419	 A2	AND		 	 
- stack 1: 0x4F0
- stack 0: 0xF
1420	 A3	PUSH1	01	 	 
- stack 2: 0x4F0
- stack 1: 0xF
- stack 0: 0x1
1421	 A5	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0xF
1422	 A6	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0xF
- stack 0: 0x20
1423	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F0
- stack 1: 0xF
- stack 0: 0xF00FF000
1424	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F0
- stack 0: 0xF00FF00F
1425	 AB	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0xF00FF00F
- stack 0: 0x20
1426	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F0
1427	 AF	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1428	 B1	ADD		 	 
- stack 0: 0x4F4
1429	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1430	 B3	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xB8FF0F030F0000030F0000023300000252000102710002028BFFE0032600FF
1431	 B4	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0xB8FF0F030F0000030F0000023300000252000102710002028BFFE0032600FF
- stack 0: 0xF0
1432	 B6	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xB8
1433	 B7	JUMP		 	 
- stack 0: 0x4F4
1434	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x4F4
1435	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1436	 BA	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xB8FF0F030F0000030F0000023300000252000102710002028BFFE0032600FF
1437	 BB	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0xB8FF0F030F0000030F0000023300000252000102710002028BFFE0032600FF
- stack 0: 0xE0
1438	 BD	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xB8FF0F
1439	 BE	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0xB8FF0F
- stack 0: 0xFFFF
1440	 C1	AND		 	 
- stack 1: 0x4F4
- stack 0: 0xFF0F
1441	 C2	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0xFF0F
- stack 0: 0x1
1442	 C4	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
1443	 C5	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x20
1444	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF00FF00F
1445	 C9	AND		 	  ;; # ANDI
- stack 1: 0x4F4
- stack 0: 0xF00FF00F
1446	 CA	PUSH2	0060	 	 
- stack 2: 0x4F4
- stack 1: 0xF00FF00F
- stack 0: 0x60
1447	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x4F4
1448	 CE	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1449	 D0	ADD		 	 
- stack 0: 0x4F8
1450	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1451	 D2	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x30F0000030F0000023300000252000102710002028BFFE0032600FF00EA000F
1452	 D3	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x30F0000030F0000023300000252000102710002028BFFE0032600FF00EA000F
- stack 0: 0xF0
1453	 D5	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x30F
1454	 D6	JUMP		 	 
- stack 0: 0x4F8
1455	 30F	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x4F8
1456	 310	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1457	 311	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x30F0000030F0000023300000252000102710002028BFFE0032600FF00EA000F
1458	 312	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x30F0000030F0000023300000252000102710002028BFFE0032600FF00EA000F
- stack 0: 0xE0
1459	 314	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x30F0000
1460	 315	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x30F0000
- stack 0: 0xFFFF
1461	 318	AND		 	 
- stack 1: 0x4F8
- stack 0: 0x0
1462	 319	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x0
- stack 0: 0x1
1463	 31B	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x0
1464	 31C	POP		 	 
- stack 0: 0x4F8
1465	 31D	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1466	 31F	ADD		 	 
- stack 0: 0x4FC
1467	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1468	 321	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x30F0000023300000252000102710002028BFFE0032600FF00EA000F01090009
1469	 322	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x30F0000023300000252000102710002028BFFE0032600FF00EA000F01090009
- stack 0: 0xF0
1470	 324	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x30F
1471	 325	JUMP		 	 
- stack 0: 0x4FC
1472	 30F	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x4FC
1473	 310	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1474	 311	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x30F0000023300000252000102710002028BFFE0032600FF00EA000F01090009
1475	 312	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x30F0000023300000252000102710002028BFFE0032600FF00EA000F01090009
- stack 0: 0xE0
1476	 314	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x30F0000
1477	 315	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x30F0000
- stack 0: 0xFFFF
1478	 318	AND		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1479	 319	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x1
1480	 31B	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1481	 31C	POP		 	 
- stack 0: 0x4FC
1482	 31D	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1483	 31F	ADD		 	 
- stack 0: 0x500
1484	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1485	 321	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x23300000252000102710002028BFFE0032600FF00EA000F0109000902CD00B4
1486	 322	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x23300000252000102710002028BFFE0032600FF00EA000F0109000902CD00B4
- stack 0: 0xF0
1487	 324	SHR		 	 
- stack 1: 0x500
- stack 0: 0x233
1488	 325	JUMP		 	 
- stack 0: 0x500
1489	 233	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x500
1490	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1491	 235	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x23300000252000102710002028BFFE0032600FF00EA000F0109000902CD00B4
1492	 236	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x23300000252000102710002028BFFE0032600FF00EA000F0109000902CD00B4
- stack 0: 0xE0
1493	 238	SHR		 	 
- stack 1: 0x500
- stack 0: 0x2330000
1494	 239	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x2330000
- stack 0: 0xFFFF
1495	 23C	AND		 	 
- stack 1: 0x500
- stack 0: 0x0
1496	 23D	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x1
1497	 23F	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0x0
1498	 240	PUSH2	0060	 	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x60
1499	 243	MLOAD		 	  ;; # read from x3
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0xF00FF00F
1500	 244	ADD		 	  ;; # ADDI 3
- stack 1: 0x500
- stack 0: 0xF00FF00F
1501	 245	PUSH2	00C0	 	 
- stack 2: 0x500
- stack 1: 0xF00FF00F
- stack 0: 0xC0
1502	 248	MSTORE		 	  ;; # store to x6
- stack 0: 0x500
1503	 249	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1504	 24B	ADD		 	 
- stack 0: 0x504
1505	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1506	 24D	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x252000102710002028BFFE0032600FF00EA000F0109000902CD00B402190000
1507	 24E	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x252000102710002028BFFE0032600FF00EA000F0109000902CD00B402190000
- stack 0: 0xF0
1508	 250	SHR		 	 
- stack 1: 0x504
- stack 0: 0x252
1509	 251	JUMP		 	 
- stack 0: 0x504
1510	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x504
1511	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1512	 254	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x252000102710002028BFFE0032600FF00EA000F0109000902CD00B402190000
1513	 255	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x252000102710002028BFFE0032600FF00EA000F0109000902CD00B402190000
- stack 0: 0xE0
1514	 257	SHR		 	 
- stack 1: 0x504
- stack 0: 0x2520001
1515	 258	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x2520001
- stack 0: 0xFFFF
1516	 25B	AND		 	 
- stack 1: 0x504
- stack 0: 0x1
1517	 25C	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0x1
1518	 25E	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0x1
1519	 25F	PUSH2	0080	 	 
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0x80
1520	 262	MLOAD		 	  ;; # read from x4
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0x0
1521	 263	ADD		 	  ;; # ADDI 4
- stack 1: 0x504
- stack 0: 0x1
1522	 264	PUSH2	0080	 	 
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0x80
1523	 267	MSTORE		 	  ;; # store to x4
- stack 0: 0x504
1524	 268	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1525	 26A	ADD		 	 
- stack 0: 0x508
1526	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1527	 26C	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x2710002028BFFE0032600FF00EA000F0109000902CD00B4021900000165FF01
1528	 26D	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x2710002028BFFE0032600FF00EA000F0109000902CD00B4021900000165FF01
- stack 0: 0xF0
1529	 26F	SHR		 	 
- stack 1: 0x508
- stack 0: 0x271
1530	 270	JUMP		 	 
- stack 0: 0x508
1531	 271	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x508
1532	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1533	 273	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x2710002028BFFE0032600FF00EA000F0109000902CD00B4021900000165FF01
1534	 274	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x2710002028BFFE0032600FF00EA000F0109000902CD00B4021900000165FF01
- stack 0: 0xE0
1535	 276	SHR		 	 
- stack 1: 0x508
- stack 0: 0x2710002
1536	 277	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x2710002
- stack 0: 0xFFFF
1537	 27A	AND		 	 
- stack 1: 0x508
- stack 0: 0x2
1538	 27B	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0x2
- stack 0: 0x1
1539	 27D	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0x2
1540	 27E	PUSH2	00A0	 	 
- stack 2: 0x508
- stack 1: 0x2
- stack 0: 0xA0
1541	 281	MSTORE		 	  ;; # store to x5
- stack 0: 0x508
1542	 282	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1543	 284	ADD		 	 
- stack 0: 0x50C
1544	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1545	 286	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x28BFFE0032600FF00EA000F0109000902CD00B4021900000165FF010099FFF0
1546	 287	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x28BFFE0032600FF00EA000F0109000902CD00B4021900000165FF010099FFF0
- stack 0: 0xF0
1547	 289	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x28B
1548	 28A	JUMP		 	 
- stack 0: 0x50C
1549	 28B	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x50C
1550	 28C	PUSH2	0080	 	 
- stack 1: 0x50C
- stack 0: 0x80
1551	 28F	MLOAD		 	  ;; # read from x4
- stack 1: 0x50C
- stack 0: 0x1
1552	 290	PUSH4	FFFFFFFF	 	 
- stack 2: 0x50C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1553	 295	AND		 	  ;; # mask to 32 bits
- stack 1: 0x50C
- stack 0: 0x1
1554	 296	PUSH2	00A0	 	 
- stack 2: 0x50C
- stack 1: 0x1
- stack 0: 0xA0
1555	 299	MLOAD		 	  ;; # read from x5
- stack 2: 0x50C
- stack 1: 0x1
- stack 0: 0x2
1556	 29A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x50C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1557	 29F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x50C
- stack 1: 0x1
- stack 0: 0x2
1558	 2A0	SUB		 	 
- stack 1: 0x50C
- stack 0: 0x1
1559	 2A1	PUSH2	02A9	 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 2: 0x50C
- stack 1: 0x1
- stack 0: 0x2A9
1560	 2A4	JUMPI		 	 
- stack 0: 0x50C
1561	 2A9	JUMPDEST		 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 0: 0x50C
1562	 2AA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1563	 2AB	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x28BFFE0032600FF00EA000F0109000902CD00B4021900000165FF010099FFF0
1564	 2AC	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0x28BFFE0032600FF00EA000F0109000902CD00B4021900000165FF010099FFF0
- stack 0: 0xE0
1565	 2AE	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x28BFFE0
1566	 2AF	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0x28BFFE0
- stack 0: 0xFFFF
1567	 2B2	AND		 	 
- stack 1: 0x50C
- stack 0: 0xFFE0
1568	 2B3	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xFFE0
- stack 0: 0x1
1569	 2B5	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1570	 2B6	ADD		 	 
- stack 0: 0x4EC
1571	 2B7	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFF
1572	 2BC	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4EC
1573	 2BD	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1574	 2BE	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x1A500FF0099000F00B8FF0F030F0000030F0000023300000252000102710002
1575	 2BF	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x1A500FF0099000F00B8FF0F030F0000030F0000023300000252000102710002
- stack 0: 0xF0
1576	 2C1	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x1A5
1577	 2C2	JUMP		 	 
- stack 0: 0x4EC
1578	 1A5	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x4EC
1579	 1A6	PUSH4	f00ff000	 	 
- stack 1: 0x4EC
- stack 0: 0xF00FF000
1580	 1AB	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0xF00FF000
- stack 0: 0x20
1581	 1AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4EC
1582	 1AF	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1583	 1B1	ADD		 	 
- stack 0: 0x4F0
1584	 1B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1585	 1B3	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x99000F00B8FF0F030F0000030F0000023300000252000102710002028BFFE0
1586	 1B4	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x99000F00B8FF0F030F0000030F0000023300000252000102710002028BFFE0
- stack 0: 0xF0
1587	 1B6	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x99
1588	 1B7	JUMP		 	 
- stack 0: 0x4F0
1589	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4F0
1590	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F0
- stack 0: 0x4F0
1591	 9B	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x99000F00B8FF0F030F0000030F0000023300000252000102710002028BFFE0
1592	 9C	PUSH1	E0	 	 
- stack 2: 0x4F0
- stack 1: 0x99000F00B8FF0F030F0000030F0000023300000252000102710002028BFFE0
- stack 0: 0xE0
1593	 9E	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x99000F
1594	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4F0
- stack 1: 0x99000F
- stack 0: 0xFFFF
1595	 A2	AND		 	 
- stack 1: 0x4F0
- stack 0: 0xF
1596	 A3	PUSH1	01	 	 
- stack 2: 0x4F0
- stack 1: 0xF
- stack 0: 0x1
1597	 A5	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0xF
1598	 A6	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0xF
- stack 0: 0x20
1599	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F0
- stack 1: 0xF
- stack 0: 0xF00FF000
1600	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F0
- stack 0: 0xF00FF00F
1601	 AB	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0xF00FF00F
- stack 0: 0x20
1602	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F0
1603	 AF	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1604	 B1	ADD		 	 
- stack 0: 0x4F4
1605	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1606	 B3	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xB8FF0F030F0000030F0000023300000252000102710002028BFFE0032600FF
1607	 B4	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0xB8FF0F030F0000030F0000023300000252000102710002028BFFE0032600FF
- stack 0: 0xF0
1608	 B6	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xB8
1609	 B7	JUMP		 	 
- stack 0: 0x4F4
1610	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x4F4
1611	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1612	 BA	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xB8FF0F030F0000030F0000023300000252000102710002028BFFE0032600FF
1613	 BB	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0xB8FF0F030F0000030F0000023300000252000102710002028BFFE0032600FF
- stack 0: 0xE0
1614	 BD	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xB8FF0F
1615	 BE	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0xB8FF0F
- stack 0: 0xFFFF
1616	 C1	AND		 	 
- stack 1: 0x4F4
- stack 0: 0xFF0F
1617	 C2	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0xFF0F
- stack 0: 0x1
1618	 C4	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
1619	 C5	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x20
1620	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF00FF00F
1621	 C9	AND		 	  ;; # ANDI
- stack 1: 0x4F4
- stack 0: 0xF00FF00F
1622	 CA	PUSH2	0060	 	 
- stack 2: 0x4F4
- stack 1: 0xF00FF00F
- stack 0: 0x60
1623	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x4F4
1624	 CE	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1625	 D0	ADD		 	 
- stack 0: 0x4F8
1626	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1627	 D2	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x30F0000030F0000023300000252000102710002028BFFE0032600FF00EA000F
1628	 D3	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x30F0000030F0000023300000252000102710002028BFFE0032600FF00EA000F
- stack 0: 0xF0
1629	 D5	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x30F
1630	 D6	JUMP		 	 
- stack 0: 0x4F8
1631	 30F	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x4F8
1632	 310	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1633	 311	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x30F0000030F0000023300000252000102710002028BFFE0032600FF00EA000F
1634	 312	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x30F0000030F0000023300000252000102710002028BFFE0032600FF00EA000F
- stack 0: 0xE0
1635	 314	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x30F0000
1636	 315	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x30F0000
- stack 0: 0xFFFF
1637	 318	AND		 	 
- stack 1: 0x4F8
- stack 0: 0x0
1638	 319	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x0
- stack 0: 0x1
1639	 31B	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x0
1640	 31C	POP		 	 
- stack 0: 0x4F8
1641	 31D	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1642	 31F	ADD		 	 
- stack 0: 0x4FC
1643	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1644	 321	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x30F0000023300000252000102710002028BFFE0032600FF00EA000F01090009
1645	 322	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x30F0000023300000252000102710002028BFFE0032600FF00EA000F01090009
- stack 0: 0xF0
1646	 324	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x30F
1647	 325	JUMP		 	 
- stack 0: 0x4FC
1648	 30F	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x4FC
1649	 310	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1650	 311	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x30F0000023300000252000102710002028BFFE0032600FF00EA000F01090009
1651	 312	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x30F0000023300000252000102710002028BFFE0032600FF00EA000F01090009
- stack 0: 0xE0
1652	 314	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x30F0000
1653	 315	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x30F0000
- stack 0: 0xFFFF
1654	 318	AND		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1655	 319	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x1
1656	 31B	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1657	 31C	POP		 	 
- stack 0: 0x4FC
1658	 31D	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1659	 31F	ADD		 	 
- stack 0: 0x500
1660	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1661	 321	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x23300000252000102710002028BFFE0032600FF00EA000F0109000902CD00B4
1662	 322	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x23300000252000102710002028BFFE0032600FF00EA000F0109000902CD00B4
- stack 0: 0xF0
1663	 324	SHR		 	 
- stack 1: 0x500
- stack 0: 0x233
1664	 325	JUMP		 	 
- stack 0: 0x500
1665	 233	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x500
1666	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1667	 235	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x23300000252000102710002028BFFE0032600FF00EA000F0109000902CD00B4
1668	 236	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x23300000252000102710002028BFFE0032600FF00EA000F0109000902CD00B4
- stack 0: 0xE0
1669	 238	SHR		 	 
- stack 1: 0x500
- stack 0: 0x2330000
1670	 239	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x2330000
- stack 0: 0xFFFF
1671	 23C	AND		 	 
- stack 1: 0x500
- stack 0: 0x0
1672	 23D	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x1
1673	 23F	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0x0
1674	 240	PUSH2	0060	 	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x60
1675	 243	MLOAD		 	  ;; # read from x3
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0xF00FF00F
1676	 244	ADD		 	  ;; # ADDI 3
- stack 1: 0x500
- stack 0: 0xF00FF00F
1677	 245	PUSH2	00C0	 	 
- stack 2: 0x500
- stack 1: 0xF00FF00F
- stack 0: 0xC0
1678	 248	MSTORE		 	  ;; # store to x6
- stack 0: 0x500
1679	 249	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1680	 24B	ADD		 	 
- stack 0: 0x504
1681	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1682	 24D	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x252000102710002028BFFE0032600FF00EA000F0109000902CD00B402190000
1683	 24E	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x252000102710002028BFFE0032600FF00EA000F0109000902CD00B402190000
- stack 0: 0xF0
1684	 250	SHR		 	 
- stack 1: 0x504
- stack 0: 0x252
1685	 251	JUMP		 	 
- stack 0: 0x504
1686	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x504
1687	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1688	 254	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x252000102710002028BFFE0032600FF00EA000F0109000902CD00B402190000
1689	 255	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x252000102710002028BFFE0032600FF00EA000F0109000902CD00B402190000
- stack 0: 0xE0
1690	 257	SHR		 	 
- stack 1: 0x504
- stack 0: 0x2520001
1691	 258	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x2520001
- stack 0: 0xFFFF
1692	 25B	AND		 	 
- stack 1: 0x504
- stack 0: 0x1
1693	 25C	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0x1
1694	 25E	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0x1
1695	 25F	PUSH2	0080	 	 
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0x80
1696	 262	MLOAD		 	  ;; # read from x4
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0x1
1697	 263	ADD		 	  ;; # ADDI 4
- stack 1: 0x504
- stack 0: 0x2
1698	 264	PUSH2	0080	 	 
- stack 2: 0x504
- stack 1: 0x2
- stack 0: 0x80
1699	 267	MSTORE		 	  ;; # store to x4
- stack 0: 0x504
1700	 268	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1701	 26A	ADD		 	 
- stack 0: 0x508
1702	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1703	 26C	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x2710002028BFFE0032600FF00EA000F0109000902CD00B4021900000165FF01
1704	 26D	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x2710002028BFFE0032600FF00EA000F0109000902CD00B4021900000165FF01
- stack 0: 0xF0
1705	 26F	SHR		 	 
- stack 1: 0x508
- stack 0: 0x271
1706	 270	JUMP		 	 
- stack 0: 0x508
1707	 271	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x508
1708	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1709	 273	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x2710002028BFFE0032600FF00EA000F0109000902CD00B4021900000165FF01
1710	 274	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x2710002028BFFE0032600FF00EA000F0109000902CD00B4021900000165FF01
- stack 0: 0xE0
1711	 276	SHR		 	 
- stack 1: 0x508
- stack 0: 0x2710002
1712	 277	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x2710002
- stack 0: 0xFFFF
1713	 27A	AND		 	 
- stack 1: 0x508
- stack 0: 0x2
1714	 27B	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0x2
- stack 0: 0x1
1715	 27D	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0x2
1716	 27E	PUSH2	00A0	 	 
- stack 2: 0x508
- stack 1: 0x2
- stack 0: 0xA0
1717	 281	MSTORE		 	  ;; # store to x5
- stack 0: 0x508
1718	 282	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1719	 284	ADD		 	 
- stack 0: 0x50C
1720	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1721	 286	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x28BFFE0032600FF00EA000F0109000902CD00B4021900000165FF010099FFF0
1722	 287	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x28BFFE0032600FF00EA000F0109000902CD00B4021900000165FF010099FFF0
- stack 0: 0xF0
1723	 289	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x28B
1724	 28A	JUMP		 	 
- stack 0: 0x50C
1725	 28B	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x50C
1726	 28C	PUSH2	0080	 	 
- stack 1: 0x50C
- stack 0: 0x80
1727	 28F	MLOAD		 	  ;; # read from x4
- stack 1: 0x50C
- stack 0: 0x2
1728	 290	PUSH4	FFFFFFFF	 	 
- stack 2: 0x50C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1729	 295	AND		 	  ;; # mask to 32 bits
- stack 1: 0x50C
- stack 0: 0x2
1730	 296	PUSH2	00A0	 	 
- stack 2: 0x50C
- stack 1: 0x2
- stack 0: 0xA0
1731	 299	MLOAD		 	  ;; # read from x5
- stack 2: 0x50C
- stack 1: 0x2
- stack 0: 0x2
1732	 29A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x50C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1733	 29F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x50C
- stack 1: 0x2
- stack 0: 0x2
1734	 2A0	SUB		 	 
- stack 1: 0x50C
- stack 0: 0x0
1735	 2A1	PUSH2	02A9	 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x2A9
1736	 2A4	JUMPI		 	 
- stack 0: 0x50C
1737	 2A5	PUSH2	02C3	 ;; _neq_after_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 1: 0x50C
- stack 0: 0x2C3
1738	 2A8	JUMP		 	 
- stack 0: 0x50C
1739	 2C3	JUMPDEST		 ;; _neq_after_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 0: 0x50C
1740	 2C4	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1741	 2C6	ADD		 	 
- stack 0: 0x510
1742	 2C7	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1743	 2C8	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x32600FF00EA000F0109000902CD00B4021900000165FF010099FFF000B8070F
1744	 2C9	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x32600FF00EA000F0109000902CD00B4021900000165FF010099FFF000B8070F
- stack 0: 0xF0
1745	 2CB	SHR		 	 
- stack 1: 0x510
- stack 0: 0x326
1746	 2CC	JUMP		 	 
- stack 0: 0x510
1747	 326	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x510
1748	 327	PUSH4	f00ff000	 	 
- stack 1: 0x510
- stack 0: 0xF00FF000
1749	 32C	PUSH2	03A0	 	 
- stack 2: 0x510
- stack 1: 0xF00FF000
- stack 0: 0x3A0
1750	 32F	MSTORE		 	  ;; # store to x29
- stack 0: 0x510
1751	 330	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1752	 332	ADD		 	 
- stack 0: 0x514
1753	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1754	 334	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xEA000F0109000902CD00B4021900000165FF010099FFF000B8070F02520001
1755	 335	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xEA000F0109000902CD00B4021900000165FF010099FFF000B8070F02520001
- stack 0: 0xF0
1756	 337	SHR		 	 
- stack 1: 0x514
- stack 0: 0xEA
1757	 338	JUMP		 	 
- stack 0: 0x514
1758	 EA	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x514
1759	 EB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1760	 EC	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xEA000F0109000902CD00B4021900000165FF010099FFF000B8070F02520001
1761	 ED	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0xEA000F0109000902CD00B4021900000165FF010099FFF000B8070F02520001
- stack 0: 0xE0
1762	 EF	SHR		 	 
- stack 1: 0x514
- stack 0: 0xEA000F
1763	 F0	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0xEA000F
- stack 0: 0xFFFF
1764	 F3	AND		 	 
- stack 1: 0x514
- stack 0: 0xF
1765	 F4	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0xF
- stack 0: 0x1
1766	 F6	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0xF
1767	 F7	PUSH2	03A0	 	 
- stack 2: 0x514
- stack 1: 0xF
- stack 0: 0x3A0
1768	 FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x514
- stack 1: 0xF
- stack 0: 0xF00FF000
1769	 FB	ADD		 	  ;; # ADDI 29
- stack 1: 0x514
- stack 0: 0xF00FF00F
1770	 FC	PUSH2	03A0	 	 
- stack 2: 0x514
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
1771	 FF	MSTORE		 	  ;; # store to x29
- stack 0: 0x514
1772	 100	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1773	 102	ADD		 	 
- stack 0: 0x518
1774	 103	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1775	 104	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x109000902CD00B4021900000165FF010099FFF000B8070F0252000102710002
1776	 105	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x109000902CD00B4021900000165FF010099FFF000B8070F0252000102710002
- stack 0: 0xF0
1777	 107	SHR		 	 
- stack 1: 0x518
- stack 0: 0x109
1778	 108	JUMP		 	 
- stack 0: 0x518
1779	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x518
1780	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1781	 10B	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x109000902CD00B4021900000165FF010099FFF000B8070F0252000102710002
1782	 10C	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x109000902CD00B4021900000165FF010099FFF000B8070F0252000102710002
- stack 0: 0xE0
1783	 10E	SHR		 	 
- stack 1: 0x518
- stack 0: 0x1090009
1784	 10F	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x1090009
- stack 0: 0xFFFF
1785	 112	AND		 	 
- stack 1: 0x518
- stack 0: 0x9
1786	 113	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0x9
- stack 0: 0x1
1787	 115	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x9
1788	 116	PUSH2	0380	 	 
- stack 2: 0x518
- stack 1: 0x9
- stack 0: 0x380
1789	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x518
1790	 11A	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1791	 11C	ADD		 	 
- stack 0: 0x51C
1792	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1793	 11E	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x2CD00B4021900000165FF010099FFF000B8070F0252000102710002028BFFEC
1794	 11F	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x2CD00B4021900000165FF010099FFF000B8070F0252000102710002028BFFEC
- stack 0: 0xF0
1795	 121	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x2CD
1796	 122	JUMP		 	 
- stack 0: 0x51C
1797	 2CD	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,11c(ignore imm)
- stack 0: 0x51C
1798	 2CE	PUSH2	00C0	 	 
- stack 1: 0x51C
- stack 0: 0xC0
1799	 2D1	MLOAD		 	  ;; # read from x6
- stack 1: 0x51C
- stack 0: 0xF00FF00F
1800	 2D2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x51C
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
1801	 2D7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x51C
- stack 0: 0xF00FF00F
1802	 2D8	PUSH2	03A0	 	 
- stack 2: 0x51C
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
1803	 2DB	MLOAD		 	  ;; # read from x29
- stack 2: 0x51C
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
1804	 2DC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x51C
- stack 2: 0xF00FF00F
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
1805	 2E1	AND		 	  ;; # mask to 32 bits
- stack 2: 0x51C
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
1806	 2E2	SUB		 	 
- stack 1: 0x51C
- stack 0: 0x0
1807	 2E3	PUSH2	02EB	 ;; _neq_4db1744ef0f3242697d2f70193944f9a24196563c720540798812c35709d60d3	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x2EB
1808	 2E6	JUMPI		 	 
- stack 0: 0x51C
1809	 2E7	PUSH2	0305	 ;; _neq_after_4db1744ef0f3242697d2f70193944f9a24196563c720540798812c35709d60d3	 
- stack 1: 0x51C
- stack 0: 0x305
1810	 2EA	JUMP		 	 
- stack 0: 0x51C
1811	 305	JUMPDEST		 ;; _neq_after_4db1744ef0f3242697d2f70193944f9a24196563c720540798812c35709d60d3	 
- stack 0: 0x51C
1812	 306	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1813	 308	ADD		 	 
- stack 0: 0x520
1814	 309	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1815	 30A	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x21900000165FF010099FFF000B8070F0252000102710002028BFFEC01780700
1816	 30B	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x21900000165FF010099FFF000B8070F0252000102710002028BFFEC01780700
- stack 0: 0xF0
1817	 30D	SHR		 	 
- stack 1: 0x520
- stack 0: 0x219
1818	 30E	JUMP		 	 
- stack 0: 0x520
1819	 219	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x520
1820	 21A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1821	 21B	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x21900000165FF010099FFF000B8070F0252000102710002028BFFEC01780700
1822	 21C	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x21900000165FF010099FFF000B8070F0252000102710002028BFFEC01780700
- stack 0: 0xE0
1823	 21E	SHR		 	 
- stack 1: 0x520
- stack 0: 0x2190000
1824	 21F	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x2190000
- stack 0: 0xFFFF
1825	 222	AND		 	 
- stack 1: 0x520
- stack 0: 0x0
1826	 223	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x0
- stack 0: 0x1
1827	 225	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x0
1828	 226	PUSH2	0080	 	 
- stack 2: 0x520
- stack 1: 0x0
- stack 0: 0x80
1829	 229	MSTORE		 	  ;; # store to x4
- stack 0: 0x520
1830	 22A	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1831	 22C	ADD		 	 
- stack 0: 0x524
1832	 22D	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1833	 22E	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x165FF010099FFF000B8070F0252000102710002028BFFEC017807000109000A
1834	 22F	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x165FF010099FFF000B8070F0252000102710002028BFFEC017807000109000A
- stack 0: 0xF0
1835	 231	SHR		 	 
- stack 1: 0x524
- stack 0: 0x165
1836	 232	JUMP		 	 
- stack 0: 0x524
1837	 165	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x524
1838	 166	PUSH4	0ff01000	 	 
- stack 1: 0x524
- stack 0: 0xFF01000
1839	 16B	PUSH2	0020	 	 
- stack 2: 0x524
- stack 1: 0xFF01000
- stack 0: 0x20
1840	 16E	MSTORE		 	  ;; # store to x1
- stack 0: 0x524
1841	 16F	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1842	 171	ADD		 	 
- stack 0: 0x528
1843	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1844	 173	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x99FFF000B8070F0252000102710002028BFFEC017807000109000A0123008C
1845	 174	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x99FFF000B8070F0252000102710002028BFFEC017807000109000A0123008C
- stack 0: 0xF0
1846	 176	SHR		 	 
- stack 1: 0x528
- stack 0: 0x99
1847	 177	JUMP		 	 
- stack 0: 0x528
1848	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x528
1849	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1850	 9B	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x99FFF000B8070F0252000102710002028BFFEC017807000109000A0123008C
1851	 9C	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x99FFF000B8070F0252000102710002028BFFEC017807000109000A0123008C
- stack 0: 0xE0
1852	 9E	SHR		 	 
- stack 1: 0x528
- stack 0: 0x99FFF0
1853	 9F	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
1854	 A2	AND		 	 
- stack 1: 0x528
- stack 0: 0xFFF0
1855	 A3	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0xFFF0
- stack 0: 0x1
1856	 A5	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1857	 A6	PUSH2	0020	 	 
- stack 2: 0x528
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
1858	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x528
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
1859	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x528
- stack 0: 0xFF00FF0
1860	 AB	PUSH2	0020	 	 
- stack 2: 0x528
- stack 1: 0xFF00FF0
- stack 0: 0x20
1861	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x528
1862	 AF	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1863	 B1	ADD		 	 
- stack 0: 0x52C
1864	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1865	 B3	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xB8070F0252000102710002028BFFEC017807000109000A0123008C02190000
1866	 B4	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0xB8070F0252000102710002028BFFEC017807000109000A0123008C02190000
- stack 0: 0xF0
1867	 B6	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xB8
1868	 B7	JUMP		 	 
- stack 0: 0x52C
1869	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x52C
1870	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1871	 BA	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xB8070F0252000102710002028BFFEC017807000109000A0123008C02190000
1872	 BB	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0xB8070F0252000102710002028BFFEC017807000109000A0123008C02190000
- stack 0: 0xE0
1873	 BD	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xB8070F
1874	 BE	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0xB8070F
- stack 0: 0xFFFF
1875	 C1	AND		 	 
- stack 1: 0x52C
- stack 0: 0x70F
1876	 C2	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x70F
- stack 0: 0x1
1877	 C4	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x70F
1878	 C5	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x70F
- stack 0: 0x20
1879	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x52C
- stack 1: 0x70F
- stack 0: 0xFF00FF0
1880	 C9	AND		 	  ;; # ANDI
- stack 1: 0x52C
- stack 0: 0x700
1881	 CA	PUSH2	0060	 	 
- stack 2: 0x52C
- stack 1: 0x700
- stack 0: 0x60
1882	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x52C
1883	 CE	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1884	 D0	ADD		 	 
- stack 0: 0x530
1885	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1886	 D2	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x252000102710002028BFFEC017807000109000A0123008C0219000001920FF0
1887	 D3	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x252000102710002028BFFEC017807000109000A0123008C0219000001920FF0
- stack 0: 0xF0
1888	 D5	SHR		 	 
- stack 1: 0x530
- stack 0: 0x252
1889	 D6	JUMP		 	 
- stack 0: 0x530
1890	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x530
1891	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1892	 254	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x252000102710002028BFFEC017807000109000A0123008C0219000001920FF0
1893	 255	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x252000102710002028BFFEC017807000109000A0123008C0219000001920FF0
- stack 0: 0xE0
1894	 257	SHR		 	 
- stack 1: 0x530
- stack 0: 0x2520001
1895	 258	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x2520001
- stack 0: 0xFFFF
1896	 25B	AND		 	 
- stack 1: 0x530
- stack 0: 0x1
1897	 25C	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x1
1898	 25E	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0x1
1899	 25F	PUSH2	0080	 	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x80
1900	 262	MLOAD		 	  ;; # read from x4
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x0
1901	 263	ADD		 	  ;; # ADDI 4
- stack 1: 0x530
- stack 0: 0x1
1902	 264	PUSH2	0080	 	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x80
1903	 267	MSTORE		 	  ;; # store to x4
- stack 0: 0x530
1904	 268	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1905	 26A	ADD		 	 
- stack 0: 0x534
1906	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1907	 26C	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x2710002028BFFEC017807000109000A0123008C0219000001920FF0009900FF
1908	 26D	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x2710002028BFFEC017807000109000A0123008C0219000001920FF0009900FF
- stack 0: 0xF0
1909	 26F	SHR		 	 
- stack 1: 0x534
- stack 0: 0x271
1910	 270	JUMP		 	 
- stack 0: 0x534
1911	 271	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x534
1912	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1913	 273	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x2710002028BFFEC017807000109000A0123008C0219000001920FF0009900FF
1914	 274	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x2710002028BFFEC017807000109000A0123008C0219000001920FF0009900FF
- stack 0: 0xE0
1915	 276	SHR		 	 
- stack 1: 0x534
- stack 0: 0x2710002
1916	 277	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x2710002
- stack 0: 0xFFFF
1917	 27A	AND		 	 
- stack 1: 0x534
- stack 0: 0x2
1918	 27B	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0x2
- stack 0: 0x1
1919	 27D	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0x2
1920	 27E	PUSH2	00A0	 	 
- stack 2: 0x534
- stack 1: 0x2
- stack 0: 0xA0
1921	 281	MSTORE		 	  ;; # store to x5
- stack 0: 0x534
1922	 282	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1923	 284	ADD		 	 
- stack 0: 0x538
1924	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1925	 286	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x28BFFEC017807000109000A0123008C0219000001920FF0009900FF030F0000
1926	 287	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x28BFFEC017807000109000A0123008C0219000001920FF0009900FF030F0000
- stack 0: 0xF0
1927	 289	SHR		 	 
- stack 1: 0x538
- stack 0: 0x28B
1928	 28A	JUMP		 	 
- stack 0: 0x538
1929	 28B	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x538
1930	 28C	PUSH2	0080	 	 
- stack 1: 0x538
- stack 0: 0x80
1931	 28F	MLOAD		 	  ;; # read from x4
- stack 1: 0x538
- stack 0: 0x1
1932	 290	PUSH4	FFFFFFFF	 	 
- stack 2: 0x538
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1933	 295	AND		 	  ;; # mask to 32 bits
- stack 1: 0x538
- stack 0: 0x1
1934	 296	PUSH2	00A0	 	 
- stack 2: 0x538
- stack 1: 0x1
- stack 0: 0xA0
1935	 299	MLOAD		 	  ;; # read from x5
- stack 2: 0x538
- stack 1: 0x1
- stack 0: 0x2
1936	 29A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x538
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1937	 29F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x538
- stack 1: 0x1
- stack 0: 0x2
1938	 2A0	SUB		 	 
- stack 1: 0x538
- stack 0: 0x1
1939	 2A1	PUSH2	02A9	 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 2: 0x538
- stack 1: 0x1
- stack 0: 0x2A9
1940	 2A4	JUMPI		 	 
- stack 0: 0x538
1941	 2A9	JUMPDEST		 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 0: 0x538
1942	 2AA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1943	 2AB	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x28BFFEC017807000109000A0123008C0219000001920FF0009900FF030F0000
1944	 2AC	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x28BFFEC017807000109000A0123008C0219000001920FF0009900FF030F0000
- stack 0: 0xE0
1945	 2AE	SHR		 	 
- stack 1: 0x538
- stack 0: 0x28BFFEC
1946	 2AF	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x28BFFEC
- stack 0: 0xFFFF
1947	 2B2	AND		 	 
- stack 1: 0x538
- stack 0: 0xFFEC
1948	 2B3	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0xFFEC
- stack 0: 0x1
1949	 2B5	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
1950	 2B6	ADD		 	 
- stack 0: 0x524
1951	 2B7	PUSH4	FFFFFFFF	 	 
- stack 1: 0x524
- stack 0: 0xFFFFFFFF
1952	 2BC	AND		 	  ;; # mask to 32 bits
- stack 0: 0x524
1953	 2BD	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1954	 2BE	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x165FF010099FFF000B8070F0252000102710002028BFFEC017807000109000A
1955	 2BF	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x165FF010099FFF000B8070F0252000102710002028BFFEC017807000109000A
- stack 0: 0xF0
1956	 2C1	SHR		 	 
- stack 1: 0x524
- stack 0: 0x165
1957	 2C2	JUMP		 	 
- stack 0: 0x524
1958	 165	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x524
1959	 166	PUSH4	0ff01000	 	 
- stack 1: 0x524
- stack 0: 0xFF01000
1960	 16B	PUSH2	0020	 	 
- stack 2: 0x524
- stack 1: 0xFF01000
- stack 0: 0x20
1961	 16E	MSTORE		 	  ;; # store to x1
- stack 0: 0x524
1962	 16F	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1963	 171	ADD		 	 
- stack 0: 0x528
1964	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1965	 173	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x99FFF000B8070F0252000102710002028BFFEC017807000109000A0123008C
1966	 174	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x99FFF000B8070F0252000102710002028BFFEC017807000109000A0123008C
- stack 0: 0xF0
1967	 176	SHR		 	 
- stack 1: 0x528
- stack 0: 0x99
1968	 177	JUMP		 	 
- stack 0: 0x528
1969	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x528
1970	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1971	 9B	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x99FFF000B8070F0252000102710002028BFFEC017807000109000A0123008C
1972	 9C	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x99FFF000B8070F0252000102710002028BFFEC017807000109000A0123008C
- stack 0: 0xE0
1973	 9E	SHR		 	 
- stack 1: 0x528
- stack 0: 0x99FFF0
1974	 9F	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
1975	 A2	AND		 	 
- stack 1: 0x528
- stack 0: 0xFFF0
1976	 A3	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0xFFF0
- stack 0: 0x1
1977	 A5	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1978	 A6	PUSH2	0020	 	 
- stack 2: 0x528
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
1979	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x528
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
1980	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x528
- stack 0: 0xFF00FF0
1981	 AB	PUSH2	0020	 	 
- stack 2: 0x528
- stack 1: 0xFF00FF0
- stack 0: 0x20
1982	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x528
1983	 AF	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1984	 B1	ADD		 	 
- stack 0: 0x52C
1985	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1986	 B3	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xB8070F0252000102710002028BFFEC017807000109000A0123008C02190000
1987	 B4	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0xB8070F0252000102710002028BFFEC017807000109000A0123008C02190000
- stack 0: 0xF0
1988	 B6	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xB8
1989	 B7	JUMP		 	 
- stack 0: 0x52C
1990	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x52C
1991	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1992	 BA	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xB8070F0252000102710002028BFFEC017807000109000A0123008C02190000
1993	 BB	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0xB8070F0252000102710002028BFFEC017807000109000A0123008C02190000
- stack 0: 0xE0
1994	 BD	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xB8070F
1995	 BE	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0xB8070F
- stack 0: 0xFFFF
1996	 C1	AND		 	 
- stack 1: 0x52C
- stack 0: 0x70F
1997	 C2	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x70F
- stack 0: 0x1
1998	 C4	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x70F
1999	 C5	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x70F
- stack 0: 0x20
2000	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x52C
- stack 1: 0x70F
- stack 0: 0xFF00FF0
2001	 C9	AND		 	  ;; # ANDI
- stack 1: 0x52C
- stack 0: 0x700
2002	 CA	PUSH2	0060	 	 
- stack 2: 0x52C
- stack 1: 0x700
- stack 0: 0x60
2003	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x52C
2004	 CE	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
2005	 D0	ADD		 	 
- stack 0: 0x530
2006	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
2007	 D2	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x252000102710002028BFFEC017807000109000A0123008C0219000001920FF0
2008	 D3	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x252000102710002028BFFEC017807000109000A0123008C0219000001920FF0
- stack 0: 0xF0
2009	 D5	SHR		 	 
- stack 1: 0x530
- stack 0: 0x252
2010	 D6	JUMP		 	 
- stack 0: 0x530
2011	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x530
2012	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
2013	 254	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x252000102710002028BFFEC017807000109000A0123008C0219000001920FF0
2014	 255	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x252000102710002028BFFEC017807000109000A0123008C0219000001920FF0
- stack 0: 0xE0
2015	 257	SHR		 	 
- stack 1: 0x530
- stack 0: 0x2520001
2016	 258	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x2520001
- stack 0: 0xFFFF
2017	 25B	AND		 	 
- stack 1: 0x530
- stack 0: 0x1
2018	 25C	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x1
2019	 25E	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0x1
2020	 25F	PUSH2	0080	 	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x80
2021	 262	MLOAD		 	  ;; # read from x4
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x1
2022	 263	ADD		 	  ;; # ADDI 4
- stack 1: 0x530
- stack 0: 0x2
2023	 264	PUSH2	0080	 	 
- stack 2: 0x530
- stack 1: 0x2
- stack 0: 0x80
2024	 267	MSTORE		 	  ;; # store to x4
- stack 0: 0x530
2025	 268	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
2026	 26A	ADD		 	 
- stack 0: 0x534
2027	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
2028	 26C	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x2710002028BFFEC017807000109000A0123008C0219000001920FF0009900FF
2029	 26D	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x2710002028BFFEC017807000109000A0123008C0219000001920FF0009900FF
- stack 0: 0xF0
2030	 26F	SHR		 	 
- stack 1: 0x534
- stack 0: 0x271
2031	 270	JUMP		 	 
- stack 0: 0x534
2032	 271	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x534
2033	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
2034	 273	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x2710002028BFFEC017807000109000A0123008C0219000001920FF0009900FF
2035	 274	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x2710002028BFFEC017807000109000A0123008C0219000001920FF0009900FF
- stack 0: 0xE0
2036	 276	SHR		 	 
- stack 1: 0x534
- stack 0: 0x2710002
2037	 277	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x2710002
- stack 0: 0xFFFF
2038	 27A	AND		 	 
- stack 1: 0x534
- stack 0: 0x2
2039	 27B	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0x2
- stack 0: 0x1
2040	 27D	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0x2
2041	 27E	PUSH2	00A0	 	 
- stack 2: 0x534
- stack 1: 0x2
- stack 0: 0xA0
2042	 281	MSTORE		 	  ;; # store to x5
- stack 0: 0x534
2043	 282	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
2044	 284	ADD		 	 
- stack 0: 0x538
2045	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
2046	 286	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x28BFFEC017807000109000A0123008C0219000001920FF0009900FF030F0000
2047	 287	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x28BFFEC017807000109000A0123008C0219000001920FF0009900FF030F0000
- stack 0: 0xF0
2048	 289	SHR		 	 
- stack 1: 0x538
- stack 0: 0x28B
2049	 28A	JUMP		 	 
- stack 0: 0x538
2050	 28B	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x538
2051	 28C	PUSH2	0080	 	 
- stack 1: 0x538
- stack 0: 0x80
2052	 28F	MLOAD		 	  ;; # read from x4
- stack 1: 0x538
- stack 0: 0x2
2053	 290	PUSH4	FFFFFFFF	 	 
- stack 2: 0x538
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2054	 295	AND		 	  ;; # mask to 32 bits
- stack 1: 0x538
- stack 0: 0x2
2055	 296	PUSH2	00A0	 	 
- stack 2: 0x538
- stack 1: 0x2
- stack 0: 0xA0
2056	 299	MLOAD		 	  ;; # read from x5
- stack 2: 0x538
- stack 1: 0x2
- stack 0: 0x2
2057	 29A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x538
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2058	 29F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x538
- stack 1: 0x2
- stack 0: 0x2
2059	 2A0	SUB		 	 
- stack 1: 0x538
- stack 0: 0x0
2060	 2A1	PUSH2	02A9	 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x2A9
2061	 2A4	JUMPI		 	 
- stack 0: 0x538
2062	 2A5	PUSH2	02C3	 ;; _neq_after_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 1: 0x538
- stack 0: 0x2C3
2063	 2A8	JUMP		 	 
- stack 0: 0x538
2064	 2C3	JUMPDEST		 ;; _neq_after_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 0: 0x538
2065	 2C4	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
2066	 2C6	ADD		 	 
- stack 0: 0x53C
2067	 2C7	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
2068	 2C8	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x17807000109000A0123008C0219000001920FF0009900FF030F000000B800F0
2069	 2C9	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x17807000109000A0123008C0219000001920FF0009900FF030F000000B800F0
- stack 0: 0xF0
2070	 2CB	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x178
2071	 2CC	JUMP		 	 
- stack 0: 0x53C
2072	 178	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,240(ignore imm)
- stack 0: 0x53C
2073	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
2074	 17A	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x17807000109000A0123008C0219000001920FF0009900FF030F000000B800F0
2075	 17B	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0x17807000109000A0123008C0219000001920FF0009900FF030F000000B800F0
- stack 0: 0xE0
2076	 17D	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x1780700
2077	 17E	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0x1780700
- stack 0: 0xFFFF
2078	 181	AND		 	 
- stack 1: 0x53C
- stack 0: 0x700
2079	 182	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0x700
- stack 0: 0x1
2080	 184	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0x700
2081	 185	PUSH2	03A0	 	 
- stack 2: 0x53C
- stack 1: 0x700
- stack 0: 0x3A0
2082	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x53C
2083	 189	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
2084	 18B	ADD		 	 
- stack 0: 0x540
2085	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
2086	 18D	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x109000A0123008C0219000001920FF0009900FF030F000000B800F002520001
2087	 18E	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x109000A0123008C0219000001920FF0009900FF030F000000B800F002520001
- stack 0: 0xF0
2088	 190	SHR		 	 
- stack 1: 0x540
- stack 0: 0x109
2089	 191	JUMP		 	 
- stack 0: 0x540
2090	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x540
2091	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
2092	 10B	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x109000A0123008C0219000001920FF0009900FF030F000000B800F002520001
2093	 10C	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x109000A0123008C0219000001920FF0009900FF030F000000B800F002520001
- stack 0: 0xE0
2094	 10E	SHR		 	 
- stack 1: 0x540
- stack 0: 0x109000A
2095	 10F	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x109000A
- stack 0: 0xFFFF
2096	 112	AND		 	 
- stack 1: 0x540
- stack 0: 0xA
2097	 113	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xA
- stack 0: 0x1
2098	 115	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xA
2099	 116	PUSH2	0380	 	 
- stack 2: 0x540
- stack 1: 0xA
- stack 0: 0x380
2100	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x540
2101	 11A	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
2102	 11C	ADD		 	 
- stack 0: 0x544
2103	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
2104	 11E	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x123008C0219000001920FF0009900FF030F000000B800F00252000102710002
2105	 11F	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x123008C0219000001920FF0009900FF030F000000B800F00252000102710002
- stack 0: 0xF0
2106	 121	SHR		 	 
- stack 1: 0x544
- stack 0: 0x123
2107	 122	JUMP		 	 
- stack 0: 0x544
2108	 123	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1a8(ignore imm)
- stack 0: 0x544
2109	 124	PUSH2	0060	 	 
- stack 1: 0x544
- stack 0: 0x60
2110	 127	MLOAD		 	  ;; # read from x3
- stack 1: 0x544
- stack 0: 0x700
2111	 128	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0x700
- stack 0: 0xFFFFFFFF
2112	 12D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0x700
2113	 12E	PUSH2	03A0	 	 
- stack 2: 0x544
- stack 1: 0x700
- stack 0: 0x3A0
2114	 131	MLOAD		 	  ;; # read from x29
- stack 2: 0x544
- stack 1: 0x700
- stack 0: 0x700
2115	 132	PUSH4	FFFFFFFF	 	 
- stack 3: 0x544
- stack 2: 0x700
- stack 1: 0x700
- stack 0: 0xFFFFFFFF
2116	 137	AND		 	  ;; # mask to 32 bits
- stack 2: 0x544
- stack 1: 0x700
- stack 0: 0x700
2117	 138	SUB		 	 
- stack 1: 0x544
- stack 0: 0x0
2118	 139	PUSH2	0141	 ;; _neq_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x141
2119	 13C	JUMPI		 	 
- stack 0: 0x544
2120	 13D	PUSH2	015B	 ;; _neq_after_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 1: 0x544
- stack 0: 0x15B
2121	 140	JUMP		 	 
- stack 0: 0x544
2122	 15B	JUMPDEST		 ;; _neq_after_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 0: 0x544
2123	 15C	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
2124	 15E	ADD		 	 
- stack 0: 0x548
2125	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
2126	 160	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x219000001920FF0009900FF030F000000B800F00252000102710002028BFFE8
2127	 161	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x219000001920FF0009900FF030F000000B800F00252000102710002028BFFE8
- stack 0: 0xF0
2128	 163	SHR		 	 
- stack 1: 0x548
- stack 0: 0x219
2129	 164	JUMP		 	 
- stack 0: 0x548
2130	 219	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x548
2131	 21A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
2132	 21B	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x219000001920FF0009900FF030F000000B800F00252000102710002028BFFE8
2133	 21C	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x219000001920FF0009900FF030F000000B800F00252000102710002028BFFE8
- stack 0: 0xE0
2134	 21E	SHR		 	 
- stack 1: 0x548
- stack 0: 0x2190000
2135	 21F	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x2190000
- stack 0: 0xFFFF
2136	 222	AND		 	 
- stack 1: 0x548
- stack 0: 0x0
2137	 223	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x0
- stack 0: 0x1
2138	 225	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x0
2139	 226	PUSH2	0080	 	 
- stack 2: 0x548
- stack 1: 0x0
- stack 0: 0x80
2140	 229	MSTORE		 	  ;; # store to x4
- stack 0: 0x548
2141	 22A	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
2142	 22C	ADD		 	 
- stack 0: 0x54C
2143	 22D	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
2144	 22E	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x1920FF0009900FF030F000000B800F00252000102710002028BFFE8017800F0
2145	 22F	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x1920FF0009900FF030F000000B800F00252000102710002028BFFE8017800F0
- stack 0: 0xF0
2146	 231	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x192
2147	 232	JUMP		 	 
- stack 0: 0x54C
2148	 192	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x54C
2149	 193	PUSH4	00ff0000	 	 
- stack 1: 0x54C
- stack 0: 0xFF0000
2150	 198	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0xFF0000
- stack 0: 0x20
2151	 19B	MSTORE		 	  ;; # store to x1
- stack 0: 0x54C
2152	 19C	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
2153	 19E	ADD		 	 
- stack 0: 0x550
2154	 19F	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
2155	 1A0	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x9900FF030F000000B800F00252000102710002028BFFE8017800F00109000B
2156	 1A1	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x9900FF030F000000B800F00252000102710002028BFFE8017800F00109000B
- stack 0: 0xF0
2157	 1A3	SHR		 	 
- stack 1: 0x550
- stack 0: 0x99
2158	 1A4	JUMP		 	 
- stack 0: 0x550
2159	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x550
2160	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
2161	 9B	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x9900FF030F000000B800F00252000102710002028BFFE8017800F00109000B
2162	 9C	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x9900FF030F000000B800F00252000102710002028BFFE8017800F00109000B
- stack 0: 0xE0
2163	 9E	SHR		 	 
- stack 1: 0x550
- stack 0: 0x9900FF
2164	 9F	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x9900FF
- stack 0: 0xFFFF
2165	 A2	AND		 	 
- stack 1: 0x550
- stack 0: 0xFF
2166	 A3	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0xFF
- stack 0: 0x1
2167	 A5	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xFF
2168	 A6	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0xFF
- stack 0: 0x20
2169	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x550
- stack 1: 0xFF
- stack 0: 0xFF0000
2170	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x550
- stack 0: 0xFF00FF
2171	 AB	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0xFF00FF
- stack 0: 0x20
2172	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x550
2173	 AF	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
2174	 B1	ADD		 	 
- stack 0: 0x554
2175	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
2176	 B3	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x30F000000B800F00252000102710002028BFFE8017800F00109000B01230060
2177	 B4	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x30F000000B800F00252000102710002028BFFE8017800F00109000B01230060
- stack 0: 0xF0
2178	 B6	SHR		 	 
- stack 1: 0x554
- stack 0: 0x30F
2179	 B7	JUMP		 	 
- stack 0: 0x554
2180	 30F	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x554
2181	 310	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
2182	 311	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x30F000000B800F00252000102710002028BFFE8017800F00109000B01230060
2183	 312	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x30F000000B800F00252000102710002028BFFE8017800F00109000B01230060
- stack 0: 0xE0
2184	 314	SHR		 	 
- stack 1: 0x554
- stack 0: 0x30F0000
2185	 315	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x30F0000
- stack 0: 0xFFFF
2186	 318	AND		 	 
- stack 1: 0x554
- stack 0: 0x0
2187	 319	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1
2188	 31B	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x0
2189	 31C	POP		 	 
- stack 0: 0x554
2190	 31D	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
2191	 31F	ADD		 	 
- stack 0: 0x558
2192	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
2193	 321	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xB800F00252000102710002028BFFE8017800F00109000B0123006002190000
2194	 322	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xB800F00252000102710002028BFFE8017800F00109000B0123006002190000
- stack 0: 0xF0
2195	 324	SHR		 	 
- stack 1: 0x558
- stack 0: 0xB8
2196	 325	JUMP		 	 
- stack 0: 0x558
2197	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x558
2198	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
2199	 BA	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xB800F00252000102710002028BFFE8017800F00109000B0123006002190000
2200	 BB	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0xB800F00252000102710002028BFFE8017800F00109000B0123006002190000
- stack 0: 0xE0
2201	 BD	SHR		 	 
- stack 1: 0x558
- stack 0: 0xB800F0
2202	 BE	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0xB800F0
- stack 0: 0xFFFF
2203	 C1	AND		 	 
- stack 1: 0x558
- stack 0: 0xF0
2204	 C2	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0xF0
- stack 0: 0x1
2205	 C4	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0xF0
2206	 C5	PUSH2	0020	 	 
- stack 2: 0x558
- stack 1: 0xF0
- stack 0: 0x20
2207	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x558
- stack 1: 0xF0
- stack 0: 0xFF00FF
2208	 C9	AND		 	  ;; # ANDI
- stack 1: 0x558
- stack 0: 0xF0
2209	 CA	PUSH2	0060	 	 
- stack 2: 0x558
- stack 1: 0xF0
- stack 0: 0x60
2210	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x558
2211	 CE	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
2212	 D0	ADD		 	 
- stack 0: 0x55C
2213	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
2214	 D2	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x252000102710002028BFFE8017800F00109000B012300600219000001A500FF
2215	 D3	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x252000102710002028BFFE8017800F00109000B012300600219000001A500FF
- stack 0: 0xF0
2216	 D5	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x252
2217	 D6	JUMP		 	 
- stack 0: 0x55C
2218	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x55C
2219	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
2220	 254	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x252000102710002028BFFE8017800F00109000B012300600219000001A500FF
2221	 255	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x252000102710002028BFFE8017800F00109000B012300600219000001A500FF
- stack 0: 0xE0
2222	 257	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x2520001
2223	 258	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x2520001
- stack 0: 0xFFFF
2224	 25B	AND		 	 
- stack 1: 0x55C
- stack 0: 0x1
2225	 25C	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x1
2226	 25E	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x1
2227	 25F	PUSH2	0080	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x80
2228	 262	MLOAD		 	  ;; # read from x4
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x0
2229	 263	ADD		 	  ;; # ADDI 4
- stack 1: 0x55C
- stack 0: 0x1
2230	 264	PUSH2	0080	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x80
2231	 267	MSTORE		 	  ;; # store to x4
- stack 0: 0x55C
2232	 268	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
2233	 26A	ADD		 	 
- stack 0: 0x560
2234	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
2235	 26C	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x2710002028BFFE8017800F00109000B012300600219000001A500FF0099000F
2236	 26D	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x2710002028BFFE8017800F00109000B012300600219000001A500FF0099000F
- stack 0: 0xF0
2237	 26F	SHR		 	 
- stack 1: 0x560
- stack 0: 0x271
2238	 270	JUMP		 	 
- stack 0: 0x560
2239	 271	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x560
2240	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
2241	 273	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x2710002028BFFE8017800F00109000B012300600219000001A500FF0099000F
2242	 274	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x2710002028BFFE8017800F00109000B012300600219000001A500FF0099000F
- stack 0: 0xE0
2243	 276	SHR		 	 
- stack 1: 0x560
- stack 0: 0x2710002
2244	 277	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x2710002
- stack 0: 0xFFFF
2245	 27A	AND		 	 
- stack 1: 0x560
- stack 0: 0x2
2246	 27B	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0x1
2247	 27D	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x2
2248	 27E	PUSH2	00A0	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0xA0
2249	 281	MSTORE		 	  ;; # store to x5
- stack 0: 0x560
2250	 282	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
2251	 284	ADD		 	 
- stack 0: 0x564
2252	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2253	 286	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x28BFFE8017800F00109000B012300600219000001A500FF0099000F030F0000
2254	 287	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x28BFFE8017800F00109000B012300600219000001A500FF0099000F030F0000
- stack 0: 0xF0
2255	 289	SHR		 	 
- stack 1: 0x564
- stack 0: 0x28B
2256	 28A	JUMP		 	 
- stack 0: 0x564
2257	 28B	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x564
2258	 28C	PUSH2	0080	 	 
- stack 1: 0x564
- stack 0: 0x80
2259	 28F	MLOAD		 	  ;; # read from x4
- stack 1: 0x564
- stack 0: 0x1
2260	 290	PUSH4	FFFFFFFF	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2261	 295	AND		 	  ;; # mask to 32 bits
- stack 1: 0x564
- stack 0: 0x1
2262	 296	PUSH2	00A0	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0xA0
2263	 299	MLOAD		 	  ;; # read from x5
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x2
2264	 29A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x564
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2265	 29F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x2
2266	 2A0	SUB		 	 
- stack 1: 0x564
- stack 0: 0x1
2267	 2A1	PUSH2	02A9	 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x2A9
2268	 2A4	JUMPI		 	 
- stack 0: 0x564
2269	 2A9	JUMPDEST		 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 0: 0x564
2270	 2AA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
2271	 2AB	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x28BFFE8017800F00109000B012300600219000001A500FF0099000F030F0000
2272	 2AC	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x28BFFE8017800F00109000B012300600219000001A500FF0099000F030F0000
- stack 0: 0xE0
2273	 2AE	SHR		 	 
- stack 1: 0x564
- stack 0: 0x28BFFE8
2274	 2AF	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x28BFFE8
- stack 0: 0xFFFF
2275	 2B2	AND		 	 
- stack 1: 0x564
- stack 0: 0xFFE8
2276	 2B3	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0xFFE8
- stack 0: 0x1
2277	 2B5	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2278	 2B6	ADD		 	 
- stack 0: 0x54C
2279	 2B7	PUSH4	FFFFFFFF	 	 
- stack 1: 0x54C
- stack 0: 0xFFFFFFFF
2280	 2BC	AND		 	  ;; # mask to 32 bits
- stack 0: 0x54C
2281	 2BD	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
2282	 2BE	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x1920FF0009900FF030F000000B800F00252000102710002028BFFE8017800F0
2283	 2BF	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x1920FF0009900FF030F000000B800F00252000102710002028BFFE8017800F0
- stack 0: 0xF0
2284	 2C1	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x192
2285	 2C2	JUMP		 	 
- stack 0: 0x54C
2286	 192	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x54C
2287	 193	PUSH4	00ff0000	 	 
- stack 1: 0x54C
- stack 0: 0xFF0000
2288	 198	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0xFF0000
- stack 0: 0x20
2289	 19B	MSTORE		 	  ;; # store to x1
- stack 0: 0x54C
2290	 19C	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
2291	 19E	ADD		 	 
- stack 0: 0x550
2292	 19F	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
2293	 1A0	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x9900FF030F000000B800F00252000102710002028BFFE8017800F00109000B
2294	 1A1	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x9900FF030F000000B800F00252000102710002028BFFE8017800F00109000B
- stack 0: 0xF0
2295	 1A3	SHR		 	 
- stack 1: 0x550
- stack 0: 0x99
2296	 1A4	JUMP		 	 
- stack 0: 0x550
2297	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x550
2298	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
2299	 9B	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x9900FF030F000000B800F00252000102710002028BFFE8017800F00109000B
2300	 9C	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x9900FF030F000000B800F00252000102710002028BFFE8017800F00109000B
- stack 0: 0xE0
2301	 9E	SHR		 	 
- stack 1: 0x550
- stack 0: 0x9900FF
2302	 9F	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x9900FF
- stack 0: 0xFFFF
2303	 A2	AND		 	 
- stack 1: 0x550
- stack 0: 0xFF
2304	 A3	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0xFF
- stack 0: 0x1
2305	 A5	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xFF
2306	 A6	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0xFF
- stack 0: 0x20
2307	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x550
- stack 1: 0xFF
- stack 0: 0xFF0000
2308	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x550
- stack 0: 0xFF00FF
2309	 AB	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0xFF00FF
- stack 0: 0x20
2310	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x550
2311	 AF	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
2312	 B1	ADD		 	 
- stack 0: 0x554
2313	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
2314	 B3	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x30F000000B800F00252000102710002028BFFE8017800F00109000B01230060
2315	 B4	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x30F000000B800F00252000102710002028BFFE8017800F00109000B01230060
- stack 0: 0xF0
2316	 B6	SHR		 	 
- stack 1: 0x554
- stack 0: 0x30F
2317	 B7	JUMP		 	 
- stack 0: 0x554
2318	 30F	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x554
2319	 310	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
2320	 311	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x30F000000B800F00252000102710002028BFFE8017800F00109000B01230060
2321	 312	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x30F000000B800F00252000102710002028BFFE8017800F00109000B01230060
- stack 0: 0xE0
2322	 314	SHR		 	 
- stack 1: 0x554
- stack 0: 0x30F0000
2323	 315	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x30F0000
- stack 0: 0xFFFF
2324	 318	AND		 	 
- stack 1: 0x554
- stack 0: 0x0
2325	 319	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1
2326	 31B	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x0
2327	 31C	POP		 	 
- stack 0: 0x554
2328	 31D	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
2329	 31F	ADD		 	 
- stack 0: 0x558
2330	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
2331	 321	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xB800F00252000102710002028BFFE8017800F00109000B0123006002190000
2332	 322	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xB800F00252000102710002028BFFE8017800F00109000B0123006002190000
- stack 0: 0xF0
2333	 324	SHR		 	 
- stack 1: 0x558
- stack 0: 0xB8
2334	 325	JUMP		 	 
- stack 0: 0x558
2335	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x558
2336	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
2337	 BA	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xB800F00252000102710002028BFFE8017800F00109000B0123006002190000
2338	 BB	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0xB800F00252000102710002028BFFE8017800F00109000B0123006002190000
- stack 0: 0xE0
2339	 BD	SHR		 	 
- stack 1: 0x558
- stack 0: 0xB800F0
2340	 BE	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0xB800F0
- stack 0: 0xFFFF
2341	 C1	AND		 	 
- stack 1: 0x558
- stack 0: 0xF0
2342	 C2	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0xF0
- stack 0: 0x1
2343	 C4	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0xF0
2344	 C5	PUSH2	0020	 	 
- stack 2: 0x558
- stack 1: 0xF0
- stack 0: 0x20
2345	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x558
- stack 1: 0xF0
- stack 0: 0xFF00FF
2346	 C9	AND		 	  ;; # ANDI
- stack 1: 0x558
- stack 0: 0xF0
2347	 CA	PUSH2	0060	 	 
- stack 2: 0x558
- stack 1: 0xF0
- stack 0: 0x60
2348	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x558
2349	 CE	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
2350	 D0	ADD		 	 
- stack 0: 0x55C
2351	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
2352	 D2	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x252000102710002028BFFE8017800F00109000B012300600219000001A500FF
2353	 D3	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x252000102710002028BFFE8017800F00109000B012300600219000001A500FF
- stack 0: 0xF0
2354	 D5	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x252
2355	 D6	JUMP		 	 
- stack 0: 0x55C
2356	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x55C
2357	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
2358	 254	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x252000102710002028BFFE8017800F00109000B012300600219000001A500FF
2359	 255	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x252000102710002028BFFE8017800F00109000B012300600219000001A500FF
- stack 0: 0xE0
2360	 257	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x2520001
2361	 258	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x2520001
- stack 0: 0xFFFF
2362	 25B	AND		 	 
- stack 1: 0x55C
- stack 0: 0x1
2363	 25C	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x1
2364	 25E	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x1
2365	 25F	PUSH2	0080	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x80
2366	 262	MLOAD		 	  ;; # read from x4
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x1
2367	 263	ADD		 	  ;; # ADDI 4
- stack 1: 0x55C
- stack 0: 0x2
2368	 264	PUSH2	0080	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0x80
2369	 267	MSTORE		 	  ;; # store to x4
- stack 0: 0x55C
2370	 268	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
2371	 26A	ADD		 	 
- stack 0: 0x560
2372	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
2373	 26C	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x2710002028BFFE8017800F00109000B012300600219000001A500FF0099000F
2374	 26D	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x2710002028BFFE8017800F00109000B012300600219000001A500FF0099000F
- stack 0: 0xF0
2375	 26F	SHR		 	 
- stack 1: 0x560
- stack 0: 0x271
2376	 270	JUMP		 	 
- stack 0: 0x560
2377	 271	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x560
2378	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
2379	 273	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x2710002028BFFE8017800F00109000B012300600219000001A500FF0099000F
2380	 274	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x2710002028BFFE8017800F00109000B012300600219000001A500FF0099000F
- stack 0: 0xE0
2381	 276	SHR		 	 
- stack 1: 0x560
- stack 0: 0x2710002
2382	 277	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x2710002
- stack 0: 0xFFFF
2383	 27A	AND		 	 
- stack 1: 0x560
- stack 0: 0x2
2384	 27B	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0x1
2385	 27D	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x2
2386	 27E	PUSH2	00A0	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0xA0
2387	 281	MSTORE		 	  ;; # store to x5
- stack 0: 0x560
2388	 282	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
2389	 284	ADD		 	 
- stack 0: 0x564
2390	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2391	 286	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x28BFFE8017800F00109000B012300600219000001A500FF0099000F030F0000
2392	 287	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x28BFFE8017800F00109000B012300600219000001A500FF0099000F030F0000
- stack 0: 0xF0
2393	 289	SHR		 	 
- stack 1: 0x564
- stack 0: 0x28B
2394	 28A	JUMP		 	 
- stack 0: 0x564
2395	 28B	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x564
2396	 28C	PUSH2	0080	 	 
- stack 1: 0x564
- stack 0: 0x80
2397	 28F	MLOAD		 	  ;; # read from x4
- stack 1: 0x564
- stack 0: 0x2
2398	 290	PUSH4	FFFFFFFF	 	 
- stack 2: 0x564
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2399	 295	AND		 	  ;; # mask to 32 bits
- stack 1: 0x564
- stack 0: 0x2
2400	 296	PUSH2	00A0	 	 
- stack 2: 0x564
- stack 1: 0x2
- stack 0: 0xA0
2401	 299	MLOAD		 	  ;; # read from x5
- stack 2: 0x564
- stack 1: 0x2
- stack 0: 0x2
2402	 29A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x564
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2403	 29F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x564
- stack 1: 0x2
- stack 0: 0x2
2404	 2A0	SUB		 	 
- stack 1: 0x564
- stack 0: 0x0
2405	 2A1	PUSH2	02A9	 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x2A9
2406	 2A4	JUMPI		 	 
- stack 0: 0x564
2407	 2A5	PUSH2	02C3	 ;; _neq_after_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 1: 0x564
- stack 0: 0x2C3
2408	 2A8	JUMP		 	 
- stack 0: 0x564
2409	 2C3	JUMPDEST		 ;; _neq_after_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 0: 0x564
2410	 2C4	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2411	 2C6	ADD		 	 
- stack 0: 0x568
2412	 2C7	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2413	 2C8	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x17800F00109000B012300600219000001A500FF0099000F030F0000030F0000
2414	 2C9	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x17800F00109000B012300600219000001A500FF0099000F030F0000030F0000
- stack 0: 0xF0
2415	 2CB	SHR		 	 
- stack 1: 0x568
- stack 0: 0x178
2416	 2CC	JUMP		 	 
- stack 0: 0x568
2417	 178	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,240(ignore imm)
- stack 0: 0x568
2418	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
2419	 17A	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x17800F00109000B012300600219000001A500FF0099000F030F0000030F0000
2420	 17B	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x17800F00109000B012300600219000001A500FF0099000F030F0000030F0000
- stack 0: 0xE0
2421	 17D	SHR		 	 
- stack 1: 0x568
- stack 0: 0x17800F0
2422	 17E	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x17800F0
- stack 0: 0xFFFF
2423	 181	AND		 	 
- stack 1: 0x568
- stack 0: 0xF0
2424	 182	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0xF0
- stack 0: 0x1
2425	 184	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0xF0
2426	 185	PUSH2	03A0	 	 
- stack 2: 0x568
- stack 1: 0xF0
- stack 0: 0x3A0
2427	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x568
2428	 189	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2429	 18B	ADD		 	 
- stack 0: 0x56C
2430	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2431	 18D	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x109000B012300600219000001A500FF0099000F030F0000030F000000B8070F
2432	 18E	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x109000B012300600219000001A500FF0099000F030F0000030F000000B8070F
- stack 0: 0xF0
2433	 190	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x109
2434	 191	JUMP		 	 
- stack 0: 0x56C
2435	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x56C
2436	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
2437	 10B	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x109000B012300600219000001A500FF0099000F030F0000030F000000B8070F
2438	 10C	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x109000B012300600219000001A500FF0099000F030F0000030F000000B8070F
- stack 0: 0xE0
2439	 10E	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x109000B
2440	 10F	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x109000B
- stack 0: 0xFFFF
2441	 112	AND		 	 
- stack 1: 0x56C
- stack 0: 0xB
2442	 113	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0xB
- stack 0: 0x1
2443	 115	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0xB
2444	 116	PUSH2	0380	 	 
- stack 2: 0x56C
- stack 1: 0xB
- stack 0: 0x380
2445	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x56C
2446	 11A	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2447	 11C	ADD		 	 
- stack 0: 0x570
2448	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2449	 11E	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x12300600219000001A500FF0099000F030F0000030F000000B8070F02520001
2450	 11F	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x12300600219000001A500FF0099000F030F0000030F000000B8070F02520001
- stack 0: 0xF0
2451	 121	SHR		 	 
- stack 1: 0x570
- stack 0: 0x123
2452	 122	JUMP		 	 
- stack 0: 0x570
2453	 123	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1a8(ignore imm)
- stack 0: 0x570
2454	 124	PUSH2	0060	 	 
- stack 1: 0x570
- stack 0: 0x60
2455	 127	MLOAD		 	  ;; # read from x3
- stack 1: 0x570
- stack 0: 0xF0
2456	 128	PUSH4	FFFFFFFF	 	 
- stack 2: 0x570
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
2457	 12D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x570
- stack 0: 0xF0
2458	 12E	PUSH2	03A0	 	 
- stack 2: 0x570
- stack 1: 0xF0
- stack 0: 0x3A0
2459	 131	MLOAD		 	  ;; # read from x29
- stack 2: 0x570
- stack 1: 0xF0
- stack 0: 0xF0
2460	 132	PUSH4	FFFFFFFF	 	 
- stack 3: 0x570
- stack 2: 0xF0
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
2461	 137	AND		 	  ;; # mask to 32 bits
- stack 2: 0x570
- stack 1: 0xF0
- stack 0: 0xF0
2462	 138	SUB		 	 
- stack 1: 0x570
- stack 0: 0x0
2463	 139	PUSH2	0141	 ;; _neq_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x141
2464	 13C	JUMPI		 	 
- stack 0: 0x570
2465	 13D	PUSH2	015B	 ;; _neq_after_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 1: 0x570
- stack 0: 0x15B
2466	 140	JUMP		 	 
- stack 0: 0x570
2467	 15B	JUMPDEST		 ;; _neq_after_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 0: 0x570
2468	 15C	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2469	 15E	ADD		 	 
- stack 0: 0x574
2470	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2471	 160	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x219000001A500FF0099000F030F0000030F000000B8070F0252000102710002
2472	 161	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x219000001A500FF0099000F030F0000030F000000B8070F0252000102710002
- stack 0: 0xF0
2473	 163	SHR		 	 
- stack 1: 0x574
- stack 0: 0x219
2474	 164	JUMP		 	 
- stack 0: 0x574
2475	 219	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x574
2476	 21A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
2477	 21B	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x219000001A500FF0099000F030F0000030F000000B8070F0252000102710002
2478	 21C	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x219000001A500FF0099000F030F0000030F000000B8070F0252000102710002
- stack 0: 0xE0
2479	 21E	SHR		 	 
- stack 1: 0x574
- stack 0: 0x2190000
2480	 21F	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x2190000
- stack 0: 0xFFFF
2481	 222	AND		 	 
- stack 1: 0x574
- stack 0: 0x0
2482	 223	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x1
2483	 225	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x0
2484	 226	PUSH2	0080	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x80
2485	 229	MSTORE		 	  ;; # store to x4
- stack 0: 0x574
2486	 22A	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2487	 22C	ADD		 	 
- stack 0: 0x578
2488	 22D	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2489	 22E	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1A500FF0099000F030F0000030F000000B8070F0252000102710002028BFFE4
2490	 22F	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1A500FF0099000F030F0000030F000000B8070F0252000102710002028BFFE4
- stack 0: 0xF0
2491	 231	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1A5
2492	 232	JUMP		 	 
- stack 0: 0x578
2493	 1A5	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x578
2494	 1A6	PUSH4	f00ff000	 	 
- stack 1: 0x578
- stack 0: 0xF00FF000
2495	 1AB	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0xF00FF000
- stack 0: 0x20
2496	 1AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x578
2497	 1AF	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2498	 1B1	ADD		 	 
- stack 0: 0x57C
2499	 1B2	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2500	 1B3	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x99000F030F0000030F000000B8070F0252000102710002028BFFE40178000F
2501	 1B4	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x99000F030F0000030F000000B8070F0252000102710002028BFFE40178000F
- stack 0: 0xF0
2502	 1B6	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x99
2503	 1B7	JUMP		 	 
- stack 0: 0x57C
2504	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x57C
2505	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2506	 9B	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x99000F030F0000030F000000B8070F0252000102710002028BFFE40178000F
2507	 9C	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x99000F030F0000030F000000B8070F0252000102710002028BFFE40178000F
- stack 0: 0xE0
2508	 9E	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x99000F
2509	 9F	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x99000F
- stack 0: 0xFFFF
2510	 A2	AND		 	 
- stack 1: 0x57C
- stack 0: 0xF
2511	 A3	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0xF
- stack 0: 0x1
2512	 A5	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0xF
2513	 A6	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xF
- stack 0: 0x20
2514	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x57C
- stack 1: 0xF
- stack 0: 0xF00FF000
2515	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x57C
- stack 0: 0xF00FF00F
2516	 AB	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xF00FF00F
- stack 0: 0x20
2517	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x57C
2518	 AF	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2519	 B1	ADD		 	 
- stack 0: 0x580
2520	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2521	 B3	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x30F0000030F000000B8070F0252000102710002028BFFE40178000F0109000C
2522	 B4	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x30F0000030F000000B8070F0252000102710002028BFFE40178000F0109000C
- stack 0: 0xF0
2523	 B6	SHR		 	 
- stack 1: 0x580
- stack 0: 0x30F
2524	 B7	JUMP		 	 
- stack 0: 0x580
2525	 30F	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x580
2526	 310	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2527	 311	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x30F0000030F000000B8070F0252000102710002028BFFE40178000F0109000C
2528	 312	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x30F0000030F000000B8070F0252000102710002028BFFE40178000F0109000C
- stack 0: 0xE0
2529	 314	SHR		 	 
- stack 1: 0x580
- stack 0: 0x30F0000
2530	 315	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x30F0000
- stack 0: 0xFFFF
2531	 318	AND		 	 
- stack 1: 0x580
- stack 0: 0x0
2532	 319	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x1
2533	 31B	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x0
2534	 31C	POP		 	 
- stack 0: 0x580
2535	 31D	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2536	 31F	ADD		 	 
- stack 0: 0x584
2537	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2538	 321	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x30F000000B8070F0252000102710002028BFFE40178000F0109000C01230030
2539	 322	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x30F000000B8070F0252000102710002028BFFE40178000F0109000C01230030
- stack 0: 0xF0
2540	 324	SHR		 	 
- stack 1: 0x584
- stack 0: 0x30F
2541	 325	JUMP		 	 
- stack 0: 0x584
2542	 30F	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x584
2543	 310	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2544	 311	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x30F000000B8070F0252000102710002028BFFE40178000F0109000C01230030
2545	 312	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x30F000000B8070F0252000102710002028BFFE40178000F0109000C01230030
- stack 0: 0xE0
2546	 314	SHR		 	 
- stack 1: 0x584
- stack 0: 0x30F0000
2547	 315	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x30F0000
- stack 0: 0xFFFF
2548	 318	AND		 	 
- stack 1: 0x584
- stack 0: 0x0
2549	 319	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x1
2550	 31B	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x0
2551	 31C	POP		 	 
- stack 0: 0x584
2552	 31D	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2553	 31F	ADD		 	 
- stack 0: 0x588
2554	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2555	 321	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xB8070F0252000102710002028BFFE40178000F0109000C01230030033900F0
2556	 322	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xB8070F0252000102710002028BFFE40178000F0109000C01230030033900F0
- stack 0: 0xF0
2557	 324	SHR		 	 
- stack 1: 0x588
- stack 0: 0xB8
2558	 325	JUMP		 	 
- stack 0: 0x588
2559	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x588
2560	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2561	 BA	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xB8070F0252000102710002028BFFE40178000F0109000C01230030033900F0
2562	 BB	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0xB8070F0252000102710002028BFFE40178000F0109000C01230030033900F0
- stack 0: 0xE0
2563	 BD	SHR		 	 
- stack 1: 0x588
- stack 0: 0xB8070F
2564	 BE	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0xB8070F
- stack 0: 0xFFFF
2565	 C1	AND		 	 
- stack 1: 0x588
- stack 0: 0x70F
2566	 C2	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x70F
- stack 0: 0x1
2567	 C4	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x70F
2568	 C5	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0x70F
- stack 0: 0x20
2569	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x588
- stack 1: 0x70F
- stack 0: 0xF00FF00F
2570	 C9	AND		 	  ;; # ANDI
- stack 1: 0x588
- stack 0: 0xF
2571	 CA	PUSH2	0060	 	 
- stack 2: 0x588
- stack 1: 0xF
- stack 0: 0x60
2572	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x588
2573	 CE	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2574	 D0	ADD		 	 
- stack 0: 0x58C
2575	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2576	 D2	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x252000102710002028BFFE40178000F0109000C01230030033900F001780000
2577	 D3	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x252000102710002028BFFE40178000F0109000C01230030033900F001780000
- stack 0: 0xF0
2578	 D5	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x252
2579	 D6	JUMP		 	 
- stack 0: 0x58C
2580	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x58C
2581	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2582	 254	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x252000102710002028BFFE40178000F0109000C01230030033900F001780000
2583	 255	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x252000102710002028BFFE40178000F0109000C01230030033900F001780000
- stack 0: 0xE0
2584	 257	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x2520001
2585	 258	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x2520001
- stack 0: 0xFFFF
2586	 25B	AND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2587	 25C	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
2588	 25E	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2589	 25F	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x80
2590	 262	MLOAD		 	  ;; # read from x4
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x0
2591	 263	ADD		 	  ;; # ADDI 4
- stack 1: 0x58C
- stack 0: 0x1
2592	 264	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x80
2593	 267	MSTORE		 	  ;; # store to x4
- stack 0: 0x58C
2594	 268	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2595	 26A	ADD		 	 
- stack 0: 0x590
2596	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2597	 26C	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x2710002028BFFE40178000F0109000C01230030033900F0017800000109000D
2598	 26D	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x2710002028BFFE40178000F0109000C01230030033900F0017800000109000D
- stack 0: 0xF0
2599	 26F	SHR		 	 
- stack 1: 0x590
- stack 0: 0x271
2600	 270	JUMP		 	 
- stack 0: 0x590
2601	 271	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x590
2602	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2603	 273	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x2710002028BFFE40178000F0109000C01230030033900F0017800000109000D
2604	 274	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x2710002028BFFE40178000F0109000C01230030033900F0017800000109000D
- stack 0: 0xE0
2605	 276	SHR		 	 
- stack 1: 0x590
- stack 0: 0x2710002
2606	 277	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x2710002
- stack 0: 0xFFFF
2607	 27A	AND		 	 
- stack 1: 0x590
- stack 0: 0x2
2608	 27B	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0x1
2609	 27D	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x2
2610	 27E	PUSH2	00A0	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0xA0
2611	 281	MSTORE		 	  ;; # store to x5
- stack 0: 0x590
2612	 282	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2613	 284	ADD		 	 
- stack 0: 0x594
2614	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2615	 286	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x28BFFE40178000F0109000C01230030033900F0017800000109000D01D70020
2616	 287	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x28BFFE40178000F0109000C01230030033900F0017800000109000D01D70020
- stack 0: 0xF0
2617	 289	SHR		 	 
- stack 1: 0x594
- stack 0: 0x28B
2618	 28A	JUMP		 	 
- stack 0: 0x594
2619	 28B	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x594
2620	 28C	PUSH2	0080	 	 
- stack 1: 0x594
- stack 0: 0x80
2621	 28F	MLOAD		 	  ;; # read from x4
- stack 1: 0x594
- stack 0: 0x1
2622	 290	PUSH4	FFFFFFFF	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2623	 295	AND		 	  ;; # mask to 32 bits
- stack 1: 0x594
- stack 0: 0x1
2624	 296	PUSH2	00A0	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0xA0
2625	 299	MLOAD		 	  ;; # read from x5
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x2
2626	 29A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x594
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2627	 29F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x2
2628	 2A0	SUB		 	 
- stack 1: 0x594
- stack 0: 0x1
2629	 2A1	PUSH2	02A9	 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x2A9
2630	 2A4	JUMPI		 	 
- stack 0: 0x594
2631	 2A9	JUMPDEST		 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 0: 0x594
2632	 2AA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2633	 2AB	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x28BFFE40178000F0109000C01230030033900F0017800000109000D01D70020
2634	 2AC	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x28BFFE40178000F0109000C01230030033900F0017800000109000D01D70020
- stack 0: 0xE0
2635	 2AE	SHR		 	 
- stack 1: 0x594
- stack 0: 0x28BFFE4
2636	 2AF	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x28BFFE4
- stack 0: 0xFFFF
2637	 2B2	AND		 	 
- stack 1: 0x594
- stack 0: 0xFFE4
2638	 2B3	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0xFFE4
- stack 0: 0x1
2639	 2B5	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2640	 2B6	ADD		 	 
- stack 0: 0x578
2641	 2B7	PUSH4	FFFFFFFF	 	 
- stack 1: 0x578
- stack 0: 0xFFFFFFFF
2642	 2BC	AND		 	  ;; # mask to 32 bits
- stack 0: 0x578
2643	 2BD	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2644	 2BE	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1A500FF0099000F030F0000030F000000B8070F0252000102710002028BFFE4
2645	 2BF	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1A500FF0099000F030F0000030F000000B8070F0252000102710002028BFFE4
- stack 0: 0xF0
2646	 2C1	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1A5
2647	 2C2	JUMP		 	 
- stack 0: 0x578
2648	 1A5	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x578
2649	 1A6	PUSH4	f00ff000	 	 
- stack 1: 0x578
- stack 0: 0xF00FF000
2650	 1AB	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0xF00FF000
- stack 0: 0x20
2651	 1AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x578
2652	 1AF	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2653	 1B1	ADD		 	 
- stack 0: 0x57C
2654	 1B2	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2655	 1B3	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x99000F030F0000030F000000B8070F0252000102710002028BFFE40178000F
2656	 1B4	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x99000F030F0000030F000000B8070F0252000102710002028BFFE40178000F
- stack 0: 0xF0
2657	 1B6	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x99
2658	 1B7	JUMP		 	 
- stack 0: 0x57C
2659	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x57C
2660	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2661	 9B	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x99000F030F0000030F000000B8070F0252000102710002028BFFE40178000F
2662	 9C	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x99000F030F0000030F000000B8070F0252000102710002028BFFE40178000F
- stack 0: 0xE0
2663	 9E	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x99000F
2664	 9F	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x99000F
- stack 0: 0xFFFF
2665	 A2	AND		 	 
- stack 1: 0x57C
- stack 0: 0xF
2666	 A3	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0xF
- stack 0: 0x1
2667	 A5	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0xF
2668	 A6	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xF
- stack 0: 0x20
2669	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x57C
- stack 1: 0xF
- stack 0: 0xF00FF000
2670	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x57C
- stack 0: 0xF00FF00F
2671	 AB	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xF00FF00F
- stack 0: 0x20
2672	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x57C
2673	 AF	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2674	 B1	ADD		 	 
- stack 0: 0x580
2675	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2676	 B3	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x30F0000030F000000B8070F0252000102710002028BFFE40178000F0109000C
2677	 B4	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x30F0000030F000000B8070F0252000102710002028BFFE40178000F0109000C
- stack 0: 0xF0
2678	 B6	SHR		 	 
- stack 1: 0x580
- stack 0: 0x30F
2679	 B7	JUMP		 	 
- stack 0: 0x580
2680	 30F	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x580
2681	 310	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2682	 311	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x30F0000030F000000B8070F0252000102710002028BFFE40178000F0109000C
2683	 312	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x30F0000030F000000B8070F0252000102710002028BFFE40178000F0109000C
- stack 0: 0xE0
2684	 314	SHR		 	 
- stack 1: 0x580
- stack 0: 0x30F0000
2685	 315	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x30F0000
- stack 0: 0xFFFF
2686	 318	AND		 	 
- stack 1: 0x580
- stack 0: 0x0
2687	 319	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x1
2688	 31B	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x0
2689	 31C	POP		 	 
- stack 0: 0x580
2690	 31D	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2691	 31F	ADD		 	 
- stack 0: 0x584
2692	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2693	 321	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x30F000000B8070F0252000102710002028BFFE40178000F0109000C01230030
2694	 322	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x30F000000B8070F0252000102710002028BFFE40178000F0109000C01230030
- stack 0: 0xF0
2695	 324	SHR		 	 
- stack 1: 0x584
- stack 0: 0x30F
2696	 325	JUMP		 	 
- stack 0: 0x584
2697	 30F	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x584
2698	 310	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2699	 311	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x30F000000B8070F0252000102710002028BFFE40178000F0109000C01230030
2700	 312	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x30F000000B8070F0252000102710002028BFFE40178000F0109000C01230030
- stack 0: 0xE0
2701	 314	SHR		 	 
- stack 1: 0x584
- stack 0: 0x30F0000
2702	 315	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x30F0000
- stack 0: 0xFFFF
2703	 318	AND		 	 
- stack 1: 0x584
- stack 0: 0x0
2704	 319	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x1
2705	 31B	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x0
2706	 31C	POP		 	 
- stack 0: 0x584
2707	 31D	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2708	 31F	ADD		 	 
- stack 0: 0x588
2709	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2710	 321	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xB8070F0252000102710002028BFFE40178000F0109000C01230030033900F0
2711	 322	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xB8070F0252000102710002028BFFE40178000F0109000C01230030033900F0
- stack 0: 0xF0
2712	 324	SHR		 	 
- stack 1: 0x588
- stack 0: 0xB8
2713	 325	JUMP		 	 
- stack 0: 0x588
2714	 B8	JUMPDEST		 ;; __riscvimpl_ANDI_3_1_0	  ;; # instr: andi gp,ra,-241(ignore imm)
- stack 0: 0x588
2715	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2716	 BA	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xB8070F0252000102710002028BFFE40178000F0109000C01230030033900F0
2717	 BB	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0xB8070F0252000102710002028BFFE40178000F0109000C01230030033900F0
- stack 0: 0xE0
2718	 BD	SHR		 	 
- stack 1: 0x588
- stack 0: 0xB8070F
2719	 BE	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0xB8070F
- stack 0: 0xFFFF
2720	 C1	AND		 	 
- stack 1: 0x588
- stack 0: 0x70F
2721	 C2	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x70F
- stack 0: 0x1
2722	 C4	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x70F
2723	 C5	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0x70F
- stack 0: 0x20
2724	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x588
- stack 1: 0x70F
- stack 0: 0xF00FF00F
2725	 C9	AND		 	  ;; # ANDI
- stack 1: 0x588
- stack 0: 0xF
2726	 CA	PUSH2	0060	 	 
- stack 2: 0x588
- stack 1: 0xF
- stack 0: 0x60
2727	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x588
2728	 CE	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2729	 D0	ADD		 	 
- stack 0: 0x58C
2730	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2731	 D2	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x252000102710002028BFFE40178000F0109000C01230030033900F001780000
2732	 D3	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x252000102710002028BFFE40178000F0109000C01230030033900F001780000
- stack 0: 0xF0
2733	 D5	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x252
2734	 D6	JUMP		 	 
- stack 0: 0x58C
2735	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x58C
2736	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2737	 254	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x252000102710002028BFFE40178000F0109000C01230030033900F001780000
2738	 255	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x252000102710002028BFFE40178000F0109000C01230030033900F001780000
- stack 0: 0xE0
2739	 257	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x2520001
2740	 258	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x2520001
- stack 0: 0xFFFF
2741	 25B	AND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2742	 25C	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
2743	 25E	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2744	 25F	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x80
2745	 262	MLOAD		 	  ;; # read from x4
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
2746	 263	ADD		 	  ;; # ADDI 4
- stack 1: 0x58C
- stack 0: 0x2
2747	 264	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0x80
2748	 267	MSTORE		 	  ;; # store to x4
- stack 0: 0x58C
2749	 268	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2750	 26A	ADD		 	 
- stack 0: 0x590
2751	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2752	 26C	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x2710002028BFFE40178000F0109000C01230030033900F0017800000109000D
2753	 26D	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x2710002028BFFE40178000F0109000C01230030033900F0017800000109000D
- stack 0: 0xF0
2754	 26F	SHR		 	 
- stack 1: 0x590
- stack 0: 0x271
2755	 270	JUMP		 	 
- stack 0: 0x590
2756	 271	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x590
2757	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2758	 273	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x2710002028BFFE40178000F0109000C01230030033900F0017800000109000D
2759	 274	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x2710002028BFFE40178000F0109000C01230030033900F0017800000109000D
- stack 0: 0xE0
2760	 276	SHR		 	 
- stack 1: 0x590
- stack 0: 0x2710002
2761	 277	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x2710002
- stack 0: 0xFFFF
2762	 27A	AND		 	 
- stack 1: 0x590
- stack 0: 0x2
2763	 27B	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0x1
2764	 27D	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x2
2765	 27E	PUSH2	00A0	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0xA0
2766	 281	MSTORE		 	  ;; # store to x5
- stack 0: 0x590
2767	 282	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2768	 284	ADD		 	 
- stack 0: 0x594
2769	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2770	 286	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x28BFFE40178000F0109000C01230030033900F0017800000109000D01D70020
2771	 287	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x28BFFE40178000F0109000C01230030033900F0017800000109000D01D70020
- stack 0: 0xF0
2772	 289	SHR		 	 
- stack 1: 0x594
- stack 0: 0x28B
2773	 28A	JUMP		 	 
- stack 0: 0x594
2774	 28B	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x594
2775	 28C	PUSH2	0080	 	 
- stack 1: 0x594
- stack 0: 0x80
2776	 28F	MLOAD		 	  ;; # read from x4
- stack 1: 0x594
- stack 0: 0x2
2777	 290	PUSH4	FFFFFFFF	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2778	 295	AND		 	  ;; # mask to 32 bits
- stack 1: 0x594
- stack 0: 0x2
2779	 296	PUSH2	00A0	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0xA0
2780	 299	MLOAD		 	  ;; # read from x5
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0x2
2781	 29A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x594
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2782	 29F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0x2
2783	 2A0	SUB		 	 
- stack 1: 0x594
- stack 0: 0x0
2784	 2A1	PUSH2	02A9	 ;; _neq_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x2A9
2785	 2A4	JUMPI		 	 
- stack 0: 0x594
2786	 2A5	PUSH2	02C3	 ;; _neq_after_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 1: 0x594
- stack 0: 0x2C3
2787	 2A8	JUMP		 	 
- stack 0: 0x594
2788	 2C3	JUMPDEST		 ;; _neq_after_629c00415a9967b2698741d001ccbfc4e7d1a63918c8b490f5bcce7c40c25833	 
- stack 0: 0x594
2789	 2C4	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2790	 2C6	ADD		 	 
- stack 0: 0x598
2791	 2C7	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2792	 2C8	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x178000F0109000C01230030033900F0017800000109000D01D7002001920FF0
2793	 2C9	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x178000F0109000C01230030033900F0017800000109000D01D7002001920FF0
- stack 0: 0xF0
2794	 2CB	SHR		 	 
- stack 1: 0x598
- stack 0: 0x178
2795	 2CC	JUMP		 	 
- stack 0: 0x598
2796	 178	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,240(ignore imm)
- stack 0: 0x598
2797	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2798	 17A	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x178000F0109000C01230030033900F0017800000109000D01D7002001920FF0
2799	 17B	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x178000F0109000C01230030033900F0017800000109000D01D7002001920FF0
- stack 0: 0xE0
2800	 17D	SHR		 	 
- stack 1: 0x598
- stack 0: 0x178000F
2801	 17E	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x178000F
- stack 0: 0xFFFF
2802	 181	AND		 	 
- stack 1: 0x598
- stack 0: 0xF
2803	 182	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0xF
- stack 0: 0x1
2804	 184	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0xF
2805	 185	PUSH2	03A0	 	 
- stack 2: 0x598
- stack 1: 0xF
- stack 0: 0x3A0
2806	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x598
2807	 189	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2808	 18B	ADD		 	 
- stack 0: 0x59C
2809	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2810	 18D	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x109000C01230030033900F0017800000109000D01D7002001920FF0009900FF
2811	 18E	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x109000C01230030033900F0017800000109000D01D7002001920FF0009900FF
- stack 0: 0xF0
2812	 190	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x109
2813	 191	JUMP		 	 
- stack 0: 0x59C
2814	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x59C
2815	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2816	 10B	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x109000C01230030033900F0017800000109000D01D7002001920FF0009900FF
2817	 10C	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x109000C01230030033900F0017800000109000D01D7002001920FF0009900FF
- stack 0: 0xE0
2818	 10E	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x109000C
2819	 10F	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x109000C
- stack 0: 0xFFFF
2820	 112	AND		 	 
- stack 1: 0x59C
- stack 0: 0xC
2821	 113	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0xC
- stack 0: 0x1
2822	 115	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0xC
2823	 116	PUSH2	0380	 	 
- stack 2: 0x59C
- stack 1: 0xC
- stack 0: 0x380
2824	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x59C
2825	 11A	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2826	 11C	ADD		 	 
- stack 0: 0x5A0
2827	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2828	 11E	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x1230030033900F0017800000109000D01D7002001920FF0009900FF0356070F
2829	 11F	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x1230030033900F0017800000109000D01D7002001920FF0009900FF0356070F
- stack 0: 0xF0
2830	 121	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x123
2831	 122	JUMP		 	 
- stack 0: 0x5A0
2832	 123	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1a8(ignore imm)
- stack 0: 0x5A0
2833	 124	PUSH2	0060	 	 
- stack 1: 0x5A0
- stack 0: 0x60
2834	 127	MLOAD		 	  ;; # read from x3
- stack 1: 0x5A0
- stack 0: 0xF
2835	 128	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A0
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
2836	 12D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A0
- stack 0: 0xF
2837	 12E	PUSH2	03A0	 	 
- stack 2: 0x5A0
- stack 1: 0xF
- stack 0: 0x3A0
2838	 131	MLOAD		 	  ;; # read from x29
- stack 2: 0x5A0
- stack 1: 0xF
- stack 0: 0xF
2839	 132	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A0
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
2840	 137	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A0
- stack 1: 0xF
- stack 0: 0xF
2841	 138	SUB		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2842	 139	PUSH2	0141	 ;; _neq_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x141
2843	 13C	JUMPI		 	 
- stack 0: 0x5A0
2844	 13D	PUSH2	015B	 ;; _neq_after_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 1: 0x5A0
- stack 0: 0x15B
2845	 140	JUMP		 	 
- stack 0: 0x5A0
2846	 15B	JUMPDEST		 ;; _neq_after_e16fdd59bc759a4d0f1b07ee059c7ce1e3a4eb2a0eb435b53c9ef311d4827ba9	 
- stack 0: 0x5A0
2847	 15C	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2848	 15E	ADD		 	 
- stack 0: 0x5A4
2849	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2850	 160	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x33900F0017800000109000D01D7002001920FF0009900FF0356070F01780000
2851	 161	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x33900F0017800000109000D01D7002001920FF0009900FF0356070F01780000
- stack 0: 0xF0
2852	 163	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x339
2853	 164	JUMP		 	 
- stack 0: 0x5A4
2854	 339	JUMPDEST		 ;; __riscvimpl_ANDI_1_0_0	  ;; # instr: andi ra,zero,240(ignore imm)
- stack 0: 0x5A4
2855	 33A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2856	 33B	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x33900F0017800000109000D01D7002001920FF0009900FF0356070F01780000
2857	 33C	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x33900F0017800000109000D01D7002001920FF0009900FF0356070F01780000
- stack 0: 0xE0
2858	 33E	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x33900F0
2859	 33F	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x33900F0
- stack 0: 0xFFFF
2860	 342	AND		 	 
- stack 1: 0x5A4
- stack 0: 0xF0
2861	 343	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0xF0
- stack 0: 0x1
2862	 345	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0xF0
2863	 346	PUSH1	00	 	 
- stack 2: 0x5A4
- stack 1: 0xF0
- stack 0: 0x0
2864	 348	AND		 	  ;; # ANDI
- stack 1: 0x5A4
- stack 0: 0x0
2865	 349	PUSH2	0020	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x20
2866	 34C	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A4
2867	 34D	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2868	 34F	ADD		 	 
- stack 0: 0x5A8
2869	 350	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2870	 351	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x17800000109000D01D7002001920FF0009900FF0356070F017800000109000E
2871	 352	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x17800000109000D01D7002001920FF0009900FF0356070F017800000109000E
- stack 0: 0xF0
2872	 354	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x178
2873	 355	JUMP		 	 
- stack 0: 0x5A8
2874	 178	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,240(ignore imm)
- stack 0: 0x5A8
2875	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2876	 17A	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x17800000109000D01D7002001920FF0009900FF0356070F017800000109000E
2877	 17B	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x17800000109000D01D7002001920FF0009900FF0356070F017800000109000E
- stack 0: 0xE0
2878	 17D	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1780000
2879	 17E	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x1780000
- stack 0: 0xFFFF
2880	 181	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2881	 182	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2882	 184	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2883	 185	PUSH2	03A0	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x3A0
2884	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x5A8
2885	 189	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2886	 18B	ADD		 	 
- stack 0: 0x5AC
2887	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2888	 18D	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x109000D01D7002001920FF0009900FF0356070F017800000109000E03720008
2889	 18E	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x109000D01D7002001920FF0009900FF0356070F017800000109000E03720008
- stack 0: 0xF0
2890	 190	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x109
2891	 191	JUMP		 	 
- stack 0: 0x5AC
2892	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5AC
2893	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2894	 10B	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x109000D01D7002001920FF0009900FF0356070F017800000109000E03720008
2895	 10C	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x109000D01D7002001920FF0009900FF0356070F017800000109000E03720008
- stack 0: 0xE0
2896	 10E	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x109000D
2897	 10F	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x109000D
- stack 0: 0xFFFF
2898	 112	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xD
2899	 113	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xD
- stack 0: 0x1
2900	 115	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xD
2901	 116	PUSH2	0380	 	 
- stack 2: 0x5AC
- stack 1: 0xD
- stack 0: 0x380
2902	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x5AC
2903	 11A	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2904	 11C	ADD		 	 
- stack 0: 0x5B0
2905	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2906	 11E	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1D7002001920FF0009900FF0356070F017800000109000E0372000803B20018
2907	 11F	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x1D7002001920FF0009900FF0356070F017800000109000E0372000803B20018
- stack 0: 0xF0
2908	 121	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1D7
2909	 122	JUMP		 	 
- stack 0: 0x5B0
2910	 1D7	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,148(ignore imm)
- stack 0: 0x5B0
2911	 1D8	PUSH2	0020	 	 
- stack 1: 0x5B0
- stack 0: 0x20
2912	 1DB	MLOAD		 	  ;; # read from x1
- stack 1: 0x5B0
- stack 0: 0x0
2913	 1DC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2914	 1E1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B0
- stack 0: 0x0
2915	 1E2	PUSH2	03A0	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x3A0
2916	 1E5	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x0
2917	 1E6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B0
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2918	 1EB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x0
2919	 1EC	SUB		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2920	 1ED	PUSH2	01F5	 ;; _neq_09167e04b0a668846532e57f015a3315647c881541aaa3be3809b2a2f7394612	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x1F5
2921	 1F0	JUMPI		 	 
- stack 0: 0x5B0
2922	 1F1	PUSH2	020F	 ;; _neq_after_09167e04b0a668846532e57f015a3315647c881541aaa3be3809b2a2f7394612	 
- stack 1: 0x5B0
- stack 0: 0x20F
2923	 1F4	JUMP		 	 
- stack 0: 0x5B0
2924	 20F	JUMPDEST		 ;; _neq_after_09167e04b0a668846532e57f015a3315647c881541aaa3be3809b2a2f7394612	 
- stack 0: 0x5B0
2925	 210	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2926	 212	ADD		 	 
- stack 0: 0x5B4
2927	 213	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2928	 214	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1920FF0009900FF0356070F017800000109000E0372000803B2001800210000
2929	 215	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x1920FF0009900FF0356070F017800000109000E0372000803B2001800210000
- stack 0: 0xF0
2930	 217	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x192
2931	 218	JUMP		 	 
- stack 0: 0x5B4
2932	 192	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x5B4
2933	 193	PUSH4	00ff0000	 	 
- stack 1: 0x5B4
- stack 0: 0xFF0000
2934	 198	PUSH2	0020	 	 
- stack 2: 0x5B4
- stack 1: 0xFF0000
- stack 0: 0x20
2935	 19B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B4
2936	 19C	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2937	 19E	ADD		 	 
- stack 0: 0x5B8
2938	 19F	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2939	 1A0	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x9900FF0356070F017800000109000E0372000803B200180021000000340608
2940	 1A1	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x9900FF0356070F017800000109000E0372000803B200180021000000340608
- stack 0: 0xF0
2941	 1A3	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x99
2942	 1A4	JUMP		 	 
- stack 0: 0x5B8
2943	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x5B8
2944	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2945	 9B	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x9900FF0356070F017800000109000E0372000803B200180021000000340608
2946	 9C	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x9900FF0356070F017800000109000E0372000803B200180021000000340608
- stack 0: 0xE0
2947	 9E	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x9900FF
2948	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x9900FF
- stack 0: 0xFFFF
2949	 A2	AND		 	 
- stack 1: 0x5B8
- stack 0: 0xFF
2950	 A3	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0xFF
- stack 0: 0x1
2951	 A5	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0xFF
2952	 A6	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0xFF
- stack 0: 0x20
2953	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x5B8
- stack 1: 0xFF
- stack 0: 0xFF0000
2954	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x5B8
- stack 0: 0xFF00FF
2955	 AB	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0xFF00FF
- stack 0: 0x20
2956	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B8
2957	 AF	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2958	 B1	ADD		 	 
- stack 0: 0x5BC
2959	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2960	 B3	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x356070F017800000109000E0372000803B20018002100000034060800530042
2961	 B4	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x356070F017800000109000E0372000803B20018002100000034060800530042
- stack 0: 0xF0
2962	 B6	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x356
2963	 B7	JUMP		 	 
- stack 0: 0x5BC
2964	 356	JUMPDEST		 ;; __riscvimpl_ANDI_0_1_0	  ;; # instr: andi zero,ra,1807(ignore imm)
- stack 0: 0x5BC
2965	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2966	 358	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x356070F017800000109000E0372000803B20018002100000034060800530042
2967	 359	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x356070F017800000109000E0372000803B20018002100000034060800530042
- stack 0: 0xE0
2968	 35B	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x356070F
2969	 35C	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x356070F
- stack 0: 0xFFFF
2970	 35F	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x70F
2971	 360	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x70F
- stack 0: 0x1
2972	 362	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x70F
2973	 363	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0x70F
- stack 0: 0x20
2974	 366	MLOAD		 	  ;; # read from x1
- stack 2: 0x5BC
- stack 1: 0x70F
- stack 0: 0xFF00FF
2975	 367	AND		 	  ;; # ANDI
- stack 1: 0x5BC
- stack 0: 0xF
2976	 368	POP		 	 
- stack 0: 0x5BC
2977	 369	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2978	 36B	ADD		 	 
- stack 0: 0x5C0
2979	 36C	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2980	 36D	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x17800000109000E0372000803B2001800210000003406080053004200660000
2981	 36E	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x17800000109000E0372000803B2001800210000003406080053004200660000
- stack 0: 0xF0
2982	 370	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x178
2983	 371	JUMP		 	 
- stack 0: 0x5C0
2984	 178	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,240(ignore imm)
- stack 0: 0x5C0
2985	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2986	 17A	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x17800000109000E0372000803B2001800210000003406080053004200660000
2987	 17B	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x17800000109000E0372000803B2001800210000003406080053004200660000
- stack 0: 0xE0
2988	 17D	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x1780000
2989	 17E	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x1780000
- stack 0: 0xFFFF
2990	 181	AND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2991	 182	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x1
2992	 184	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2993	 185	PUSH2	03A0	 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x3A0
2994	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C0
2995	 189	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2996	 18B	ADD		 	 
- stack 0: 0x5C4
2997	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2998	 18D	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x109000E0372000803B200180021000000340608005300420066000003F20001
2999	 18E	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x109000E0372000803B200180021000000340608005300420066000003F20001
- stack 0: 0xF0
3000	 190	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x109
3001	 191	JUMP		 	 
- stack 0: 0x5C4
3002	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5C4
3003	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
3004	 10B	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x109000E0372000803B200180021000000340608005300420066000003F20001
3005	 10C	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x109000E0372000803B200180021000000340608005300420066000003F20001
- stack 0: 0xE0
3006	 10E	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x109000E
3007	 10F	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x109000E
- stack 0: 0xFFFF
3008	 112	AND		 	 
- stack 1: 0x5C4
- stack 0: 0xE
3009	 113	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0xE
- stack 0: 0x1
3010	 115	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0xE
3011	 116	PUSH2	0380	 	 
- stack 2: 0x5C4
- stack 1: 0xE
- stack 0: 0x380
3012	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x5C4
3013	 11A	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
3014	 11C	ADD		 	 
- stack 0: 0x5C8
3015	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
3016	 11E	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x372000803B200180021000000340608005300420066000003F2000100210000
3017	 11F	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x372000803B200180021000000340608005300420066000003F2000100210000
- stack 0: 0xF0
3018	 121	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x372
3019	 122	JUMP		 	 
- stack 0: 0x5C8
3020	 372	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x5C8
3021	 373	PUSH1	00	 	 
- stack 1: 0x5C8
- stack 0: 0x0
3022	 375	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3023	 37A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C8
- stack 0: 0x0
3024	 37B	PUSH2	03A0	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x3A0
3025	 37E	MLOAD		 	  ;; # read from x29
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x0
3026	 37F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5C8
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3027	 384	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x0
3028	 385	SUB		 	 
- stack 1: 0x5C8
- stack 0: 0x0
3029	 386	PUSH2	038E	 ;; _neq_4382642a575f1e467a4449ce45db38a7bfea4e68601755ab3ad81612d2940a0d	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x38E
3030	 389	JUMPI		 	 
- stack 0: 0x5C8
3031	 38A	PUSH2	03A8	 ;; _neq_after_4382642a575f1e467a4449ce45db38a7bfea4e68601755ab3ad81612d2940a0d	 
- stack 1: 0x5C8
- stack 0: 0x3A8
3032	 38D	JUMP		 	 
- stack 0: 0x5C8
3033	 3A8	JUMPDEST		 ;; _neq_after_4382642a575f1e467a4449ce45db38a7bfea4e68601755ab3ad81612d2940a0d	 
- stack 0: 0x5C8
3034	 3A9	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
3035	 3AB	ADD		 	 
- stack 0: 0x5CC
3036	 3AC	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
3037	 3AD	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x3B200180021000000340608005300420066000003F20001002100000034060C
3038	 3AE	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x3B200180021000000340608005300420066000003F20001002100000034060C
- stack 0: 0xF0
3039	 3B0	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x3B2
3040	 3B1	JUMP		 	 
- stack 0: 0x5CC
3041	 3B2	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x5CC
3042	 3B3	PUSH1	00	 	 
- stack 1: 0x5CC
- stack 0: 0x0
3043	 3B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3044	 3BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5CC
- stack 0: 0x0
3045	 3BB	PUSH2	0380	 	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0x380
3046	 3BE	MLOAD		 	  ;; # read from x28
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0xE
3047	 3BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5CC
- stack 2: 0x0
- stack 1: 0xE
- stack 0: 0xFFFFFFFF
3048	 3C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0xE
3049	 3C5	SUB		 	 
- stack 1: 0x5CC
- stack 0: 0xE
3050	 3C6	PUSH2	03CE	 ;; _neq_ec3c2dcb7bad99ed9432db4656eca00da66832673cce33e4f3b4ebd19255dc78	 
- stack 2: 0x5CC
- stack 1: 0xE
- stack 0: 0x3CE
3051	 3C9	JUMPI		 	 
- stack 0: 0x5CC
3052	 3CE	JUMPDEST		 ;; _neq_ec3c2dcb7bad99ed9432db4656eca00da66832673cce33e4f3b4ebd19255dc78	 
- stack 0: 0x5CC
3053	 3CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
3054	 3D0	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x3B200180021000000340608005300420066000003F20001002100000034060C
3055	 3D1	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x3B200180021000000340608005300420066000003F20001002100000034060C
- stack 0: 0xE0
3056	 3D3	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x3B20018
3057	 3D4	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x3B20018
- stack 0: 0xFFFF
3058	 3D7	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x18
3059	 3D8	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x18
- stack 0: 0x1
3060	 3DA	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x18
3061	 3DB	ADD		 	 
- stack 0: 0x5E4
3062	 3DC	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5E4
- stack 0: 0xFFFFFFFF
3063	 3E1	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5E4
3064	 3E2	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3065	 3E3	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x2100000034060C005300420066000003FD000000660000000000006574796D
3066	 3E4	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x2100000034060C005300420066000003FD000000660000000000006574796D
- stack 0: 0xF0
3067	 3E6	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x21
3068	 3E7	JUMP		 	 
- stack 0: 0x5E4
3069	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x5E4
3070	 22	PUSH4	00000000	 	 
- stack 1: 0x5E4
- stack 0: 0x0
3071	 27	PUSH2	0160	 	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x160
3072	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x5E4
3073	 2B	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3074	 2D	ADD		 	 
- stack 0: 0x5E8
3075	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3076	 2F	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x34060C005300420066000003FD000000660000000000006574796D00007473
3077	 30	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x34060C005300420066000003FD000000660000000000006574796D00007473
- stack 0: 0xF0
3078	 32	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x34
3079	 33	JUMP		 	 
- stack 0: 0x5E8
3080	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1536(ignore imm)
- stack 0: 0x5E8
3081	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
3082	 36	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x34060C005300420066000003FD000000660000000000006574796D00007473
3083	 37	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x34060C005300420066000003FD000000660000000000006574796D00007473
- stack 0: 0xE0
3084	 39	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x34060C
3085	 3A	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x34060C
- stack 0: 0xFFFF
3086	 3D	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x60C
3087	 3E	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x60C
- stack 0: 0x1
3088	 40	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x60C
3089	 41	PUSH2	0160	 	 
- stack 2: 0x5E8
- stack 1: 0x60C
- stack 0: 0x160
3090	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x5E8
- stack 1: 0x60C
- stack 0: 0x0
3091	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x5E8
- stack 0: 0x60C
3092	 46	PUSH2	0160	 	 
- stack 2: 0x5E8
- stack 1: 0x60C
- stack 0: 0x160
3093	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x5E8
3094	 4A	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3095	 4C	ADD		 	 
- stack 0: 0x5EC
3096	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3097	 4E	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x5300420066000003FD000000660000000000006574796D0000747300525245
3098	 4F	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x5300420066000003FD000000660000000000006574796D0000747300525245
- stack 0: 0xF0
3099	 51	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x53
3100	 52	JUMP		 	 
- stack 0: 0x5EC
3101	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x5EC
3102	 54	PUSH4	00042000	 	 
- stack 1: 0x5EC
- stack 0: 0x42000
3103	 59	PUSH2	0140	 	 
- stack 2: 0x5EC
- stack 1: 0x42000
- stack 0: 0x140
3104	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x5EC
3105	 5D	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3106	 5F	ADD		 	 
- stack 0: 0x5F0
3107	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3108	 61	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x66000003FD000000660000000000006574796D000074730052524500004B4F
3109	 62	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x66000003FD000000660000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
3110	 64	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x66
3111	 65	JUMP		 	 
- stack 0: 0x5F0
3112	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x5F0
3113	 67	PUSH2	0140	 	 
- stack 1: 0x5F0
- stack 0: 0x140
3114	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x5F0
- stack 0: 0x42000
3115	 6B	PUSH2	0075	 ;; _ecall_aacf10e688c5a54e0aac1f2860336eb75df013d87ac8af90cecc493f34d91039	 
- stack 2: 0x5F0
- stack 1: 0x42000
- stack 0: 0x75
3116	 6E	JUMPI		 	 
- stack 0: 0x5F0
3117	 75	JUMPDEST		 ;; _ecall_aacf10e688c5a54e0aac1f2860336eb75df013d87ac8af90cecc493f34d91039	 
- stack 0: 0x5F0
3118	 76	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3119	 78	PUSH2	0160	 	 
- stack 2: 0x5F0
- stack 1: 0x4
- stack 0: 0x160
3120	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x5F0
- stack 1: 0x4
- stack 0: 0x60C
3121	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x5F0
3122	 7D	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3123	 7F	ADD		 	 
- stack 0: 0x5F4
3124	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3125	 81	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x3FD000000660000000000006574796D000074730052524500004B4F00000000
3126	 82	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x3FD000000660000000000006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
3127	 84	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x3FD
3128	 85	JUMP		 	 
- stack 0: 0x5F4
3129	 3FD	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x5F4
3130	 3FE	PUSH4	00000000	 	 
- stack 1: 0x5F4
- stack 0: 0x0
3131	 403	PUSH2	0140	 	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x140
3132	 406	MSTORE		 	  ;; # store to x10
- stack 0: 0x5F4
3133	 407	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3134	 409	ADD		 	 
- stack 0: 0x5F8
3135	 40A	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3136	 40B	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x660000000000006574796D000074730052524500004B4F0000000000000000
3137	 40C	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x660000000000006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
3138	 40E	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x66
3139	 40F	JUMP		 	 
- stack 0: 0x5F8
3140	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x5F8
3141	 67	PUSH2	0140	 	 
- stack 1: 0x5F8
- stack 0: 0x140
3142	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x5F8
- stack 0: 0x0
3143	 6B	PUSH2	0075	 ;; _ecall_aacf10e688c5a54e0aac1f2860336eb75df013d87ac8af90cecc493f34d91039	 
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0x75
3144	 6E	JUMPI		 	 
- stack 0: 0x5F8
3145	 6F	PUSH1	20	 	 
- stack 1: 0x5F8
- stack 0: 0x20
3146	 71	PUSH2	0160	 	 
- stack 2: 0x5F8
- stack 1: 0x20
- stack 0: 0x160
3147	 74	RETURN		 	 
Final bytecode length; 1569
Returned: 000000000000000000000000000000000000000000000000000000000000060c
gasUsed : 11424
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424,428
** HOT: 42c - range: 42c,430,434,438,43c,440
** HOT: 444 - range: 444,448,44c,450,454,458
** HOT: 45c - range: 45c,460,464,468,46c,470
** HOT: 474 - range: 474,478,47c,480,484,488
** HOT: 48c - range: 48c,490,494,498,49c,4a0,4a4,4a8
** HOT: 490 - range: 490,494,498,49c,4a0,4a4,4a8
** HOT: 4ac - range: 4ac,4b0,4b4
** HOT: 4b8 - range: 4b8,4bc,4c0,4c4,4c8,4cc,4d0,4d4,4d8
** HOT: 4bc - range: 4bc,4c0,4c4,4c8,4cc,4d0,4d4,4d8
** HOT: 4dc - range: 4dc,4e0,4e4
** HOT: 4e8 - range: 4e8,4ec,4f0,4f4,4f8,4fc,500,504,508,50c
** HOT: 4ec - range: 4ec,4f0,4f4,4f8,4fc,500,504,508,50c
** HOT: 510 - range: 510,514,518,51c
** HOT: 520 - range: 520,524,528,52c,530,534,538
** HOT: 524 - range: 524,528,52c,530,534,538
** HOT: 53c - range: 53c,540,544
** HOT: 548 - range: 548,54c,550,554,558,55c,560,564
** HOT: 54c - range: 54c,550,554,558,55c,560,564
** HOT: 568 - range: 568,56c,570
** HOT: 574 - range: 574,578,57c,580,584,588,58c,590,594
** HOT: 578 - range: 578,57c,580,584,588,58c,590,594
** HOT: 598 - range: 598,59c,5a0
** HOT: 5a4 - range: 5a4,5a8,5ac,5b0
** HOT: 5b4 - range: 5b4,5b8,5bc,5c0,5c4,5c8
