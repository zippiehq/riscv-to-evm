Running in EVM:
0	 0	PUSH4	0090	 	 
- stack 0: 0x90
1	 5	PUSH2	0249	 ;; _rambegin	 
- stack 1: 0x90
- stack 0: 0x249
2	 8	PUSH1	01	 	 
- stack 2: 0x90
- stack 1: 0x249
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x90
- stack 0: 0x24A
4	 B	PUSH2	0400	 	 
- stack 2: 0x90
- stack 1: 0x24A
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100000034048000530042006600000086000200B7071C00D6000401020000
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100000034048000530042006600000086000200B7071C00D6000401020000
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34048000530042006600000086000200B7071C00D600040102000001190002
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34048000530042006600000086000200B7071C00D600040102000001190002
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1152(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34048000530042006600000086000200B7071C00D600040102000001190002
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34048000530042006600000086000200B7071C00D600040102000001190002
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340480
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340480
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x480
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x480
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x480
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x480
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x480
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x480
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x480
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000200B7071C00D600040102000001190002012C0710
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000200B7071C00D600040102000001190002012C0710
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000200B7071C00D600040102000001190002012C0710014B0002
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000200B7071C00D600040102000001190002012C0710014B0002
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_4da0b5ca89b76e1793e801fbdd893eb1ab28cfcf437f3ee6315ded03099ea063	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_4da0b5ca89b76e1793e801fbdd893eb1ab28cfcf437f3ee6315ded03099ea063	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x480
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200B7071C00D600040102000001190002012C0710014B000201650028
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000200B7071C00D600040102000001190002012C0710014B000201650028
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_17250000	  ;; # instr: auipc a0,0x2(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	 
- stack 1: 0x410
- stack 0: 0x410
77	 88	PUSH32	0000000000000000000000000000000000000000000000000000000000002000	 	  ;; # signextended 8192
- stack 2: 0x410
- stack 1: 0x410
- stack 0: 0x2000
78	 A9	ADD		 	 
- stack 1: 0x410
- stack 0: 0x2410
79	 AA	PUSH2	0140	 	 
- stack 2: 0x410
- stack 1: 0x2410
- stack 0: 0x140
80	 AD	MSTORE		 	  ;; # store to x10
- stack 0: 0x410
81	 AE	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
82	 B0	ADD		 	 
- stack 0: 0x414
83	 B1	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
84	 B2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xB7071C00D600040102000001190002012C0710014B00020165002801A7FFFE
85	 B3	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xB7071C00D600040102000001190002012C0710014B00020165002801A7FFFE
- stack 0: 0xF0
86	 B5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xB7
87	 B6	JUMP		 	 
- stack 0: 0x414
88	 B7	JUMPDEST		 ;; __riscvimpl_ADDI_10_10_0	  ;; # instr: addi a0,a0,1820(ignore imm)
- stack 0: 0x414
89	 B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
90	 B9	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xB7071C00D600040102000001190002012C0710014B00020165002801A7FFFE
91	 BA	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xB7071C00D600040102000001190002012C0710014B00020165002801A7FFFE
- stack 0: 0xE0
92	 BC	SHR		 	 
- stack 1: 0x414
- stack 0: 0xB7071C
93	 BD	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xB7071C
- stack 0: 0xFFFF
94	 C0	AND		 	 
- stack 1: 0x414
- stack 0: 0x71C
95	 C1	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x71C
- stack 0: 0x1
96	 C3	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x71C
97	 C4	PUSH2	0140	 	 
- stack 2: 0x414
- stack 1: 0x71C
- stack 0: 0x140
98	 C7	MLOAD		 	  ;; # read from x10
- stack 2: 0x414
- stack 1: 0x71C
- stack 0: 0x2410
99	 C8	ADD		 	  ;; # ADDI 10
- stack 1: 0x414
- stack 0: 0x2B2C
100	 C9	PUSH2	0140	 	 
- stack 2: 0x414
- stack 1: 0x2B2C
- stack 0: 0x140
101	 CC	MSTORE		 	  ;; # store to x10
- stack 0: 0x414
102	 CD	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
103	 CF	ADD		 	 
- stack 0: 0x418
104	 D0	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
105	 D1	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xD600040102000001190002012C0710014B00020165002801A7FFFE00B7F8FC
106	 D2	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xD600040102000001190002012C0710014B00020165002801A7FFFE00B7F8FC
- stack 0: 0xF0
107	 D4	SHR		 	 
- stack 1: 0x418
- stack 0: 0xD6
108	 D5	JUMP		 	 
- stack 0: 0x418
109	 D6	JUMPDEST		 ;; __riscvimpl_JAL_11_0_0	  ;; # instr: jal a1,4(ignore imm)
- stack 0: 0x418
110	 D7	DUP1		 	 
- stack 1: 0x418
- stack 0: 0x418
111	 D8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x418
- stack 1: 0x418
- stack 0: 0x418
112	 D9	MLOAD		 	 
- stack 2: 0x418
- stack 1: 0x418
- stack 0: 0xD600040102000001190002012C0710014B00020165002801A7FFFE00B7F8FC
113	 DA	PUSH1	E0	 	 
- stack 3: 0x418
- stack 2: 0x418
- stack 1: 0xD600040102000001190002012C0710014B00020165002801A7FFFE00B7F8FC
- stack 0: 0xE0
114	 DC	SHR		 	 
- stack 2: 0x418
- stack 1: 0x418
- stack 0: 0xD60004
115	 DD	PUSH2	FFFF	 	 
- stack 3: 0x418
- stack 2: 0x418
- stack 1: 0xD60004
- stack 0: 0xFFFF
116	 E0	AND		 	 
- stack 2: 0x418
- stack 1: 0x418
- stack 0: 0x4
117	 E1	PUSH1	01	 	 
- stack 3: 0x418
- stack 2: 0x418
- stack 1: 0x4
- stack 0: 0x1
118	 E3	SIGNEXTEND		 	 
- stack 2: 0x418
- stack 1: 0x418
- stack 0: 0x4
119	 E4	ADD		 	 
- stack 1: 0x418
- stack 0: 0x41C
120	 E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x418
- stack 1: 0x41C
- stack 0: 0xFFFFFFFF
121	 EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x418
- stack 0: 0x41C
122	 EB	SWAP1		 	 
- stack 1: 0x41C
- stack 0: 0x418
123	 EC	PUSH1	04	 	 
- stack 2: 0x41C
- stack 1: 0x418
- stack 0: 0x4
124	 EE	ADD		 	 
- stack 1: 0x41C
- stack 0: 0x41C
125	 EF	PUSH2	0160	 	 
- stack 2: 0x41C
- stack 1: 0x41C
- stack 0: 0x160
126	 F2	MSTORE		 	  ;; # store to x11
- stack 0: 0x41C
127	 F3	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
128	 F4	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0x102000001190002012C0710014B00020165002801A7FFFE00B7F8FC00D60004
129	 F5	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0x102000001190002012C0710014B00020165002801A7FFFE00B7F8FC00D60004
- stack 0: 0xF0
130	 F7	SHR		 	 
- stack 1: 0x41C
- stack 0: 0x102
131	 F8	JUMP		 	 
- stack 0: 0x41C
132	 102	JUMPDEST		 ;; __riscvimpl_SUB_10_10_11	  ;; # instr: sub a0,a0,a1(ignore imm)
- stack 0: 0x41C
133	 103	PUSH2	0160	 	 
- stack 1: 0x41C
- stack 0: 0x160
134	 106	MLOAD		 	  ;; # read from x11
- stack 1: 0x41C
- stack 0: 0x41C
135	 107	PUSH2	0140	 	 
- stack 2: 0x41C
- stack 1: 0x41C
- stack 0: 0x140
136	 10A	MLOAD		 	  ;; # read from x10
- stack 2: 0x41C
- stack 1: 0x41C
- stack 0: 0x2B2C
137	 10B	SUB		 	  ;; # SUB
- stack 1: 0x41C
- stack 0: 0x2710
138	 10C	PUSH2	0140	 	 
- stack 2: 0x41C
- stack 1: 0x2710
- stack 0: 0x140
139	 10F	MSTORE		 	  ;; # store to x10
- stack 0: 0x41C
140	 110	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
141	 112	ADD		 	 
- stack 0: 0x420
142	 113	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
143	 114	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0x1190002012C0710014B00020165002801A7FFFE00B7F8FC00D6000401020000
144	 115	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0x1190002012C0710014B00020165002801A7FFFE00B7F8FC00D6000401020000
- stack 0: 0xF0
145	 117	SHR		 	 
- stack 1: 0x420
- stack 0: 0x119
146	 118	JUMP		 	 
- stack 0: 0x420
147	 119	JUMPDEST		 ;; __riscvimpl_LUI_2eb7	  ;; # instr: lui t4,0x2(ignore imm)
- stack 0: 0x420
148	 11A	PUSH4	00002000	 	 
- stack 1: 0x420
- stack 0: 0x2000
149	 11F	PUSH2	03A0	 	 
- stack 2: 0x420
- stack 1: 0x2000
- stack 0: 0x3A0
150	 122	MSTORE		 	  ;; # store to x29
- stack 0: 0x420
151	 123	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
152	 125	ADD		 	 
- stack 0: 0x424
153	 126	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
154	 127	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x12C0710014B00020165002801A7FFFE00B7F8FC00D600040102000001D8FFFE
155	 128	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x12C0710014B00020165002801A7FFFE00B7F8FC00D600040102000001D8FFFE
- stack 0: 0xF0
156	 12A	SHR		 	 
- stack 1: 0x424
- stack 0: 0x12C
157	 12B	JUMP		 	 
- stack 0: 0x424
158	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,1808(ignore imm)
- stack 0: 0x424
159	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
160	 12E	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x12C0710014B00020165002801A7FFFE00B7F8FC00D600040102000001D8FFFE
161	 12F	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x12C0710014B00020165002801A7FFFE00B7F8FC00D600040102000001D8FFFE
- stack 0: 0xE0
162	 131	SHR		 	 
- stack 1: 0x424
- stack 0: 0x12C0710
163	 132	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x12C0710
- stack 0: 0xFFFF
164	 135	AND		 	 
- stack 1: 0x424
- stack 0: 0x710
165	 136	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0x710
- stack 0: 0x1
166	 138	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0x710
167	 139	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0x710
- stack 0: 0x3A0
168	 13C	MLOAD		 	  ;; # read from x29
- stack 2: 0x424
- stack 1: 0x710
- stack 0: 0x2000
169	 13D	ADD		 	  ;; # ADDI 29
- stack 1: 0x424
- stack 0: 0x2710
170	 13E	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0x2710
- stack 0: 0x3A0
171	 141	MSTORE		 	  ;; # store to x29
- stack 0: 0x424
172	 142	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
173	 144	ADD		 	 
- stack 0: 0x428
174	 145	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
175	 146	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x14B00020165002801A7FFFE00B7F8FC00D600040102000001D8FFFE012CF8F0
176	 147	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x14B00020165002801A7FFFE00B7F8FC00D600040102000001D8FFFE012CF8F0
- stack 0: 0xF0
177	 149	SHR		 	 
- stack 1: 0x428
- stack 0: 0x14B
178	 14A	JUMP		 	 
- stack 0: 0x428
179	 14B	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x428
180	 14C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
181	 14D	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x14B00020165002801A7FFFE00B7F8FC00D600040102000001D8FFFE012CF8F0
182	 14E	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0x14B00020165002801A7FFFE00B7F8FC00D600040102000001D8FFFE012CF8F0
- stack 0: 0xE0
183	 150	SHR		 	 
- stack 1: 0x428
- stack 0: 0x14B0002
184	 151	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0x14B0002
- stack 0: 0xFFFF
185	 154	AND		 	 
- stack 1: 0x428
- stack 0: 0x2
186	 155	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0x2
- stack 0: 0x1
187	 157	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0x2
188	 158	PUSH2	0380	 	 
- stack 2: 0x428
- stack 1: 0x2
- stack 0: 0x380
189	 15B	MSTORE		 	  ;; # store to x28
- stack 0: 0x428
190	 15C	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
191	 15E	ADD		 	 
- stack 0: 0x42C
192	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
193	 160	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x165002801A7FFFE00B7F8FC00D600040102000001D8FFFE012CF8F0014B0003
194	 161	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x165002801A7FFFE00B7F8FC00D600040102000001D8FFFE012CF8F0014B0003
- stack 0: 0xF0
195	 163	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x165
196	 164	JUMP		 	 
- stack 0: 0x42C
197	 165	JUMPDEST		 ;; __riscvimpl_BNE_0_10_29	  ;; # instr: bne a0,t4,28(ignore imm)
- stack 0: 0x42C
198	 166	PUSH2	0140	 	 
- stack 1: 0x42C
- stack 0: 0x140
199	 169	MLOAD		 	  ;; # read from x10
- stack 1: 0x42C
- stack 0: 0x2710
200	 16A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x42C
- stack 1: 0x2710
- stack 0: 0xFFFFFFFF
201	 16F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x42C
- stack 0: 0x2710
202	 170	PUSH2	03A0	 	 
- stack 2: 0x42C
- stack 1: 0x2710
- stack 0: 0x3A0
203	 173	MLOAD		 	  ;; # read from x29
- stack 2: 0x42C
- stack 1: 0x2710
- stack 0: 0x2710
204	 174	PUSH4	FFFFFFFF	 	 
- stack 3: 0x42C
- stack 2: 0x2710
- stack 1: 0x2710
- stack 0: 0xFFFFFFFF
205	 179	AND		 	  ;; # mask to 32 bits
- stack 2: 0x42C
- stack 1: 0x2710
- stack 0: 0x2710
206	 17A	SUB		 	 
- stack 1: 0x42C
- stack 0: 0x0
207	 17B	PUSH2	0183	 ;; _neq_61f3567ab9a60775e19eb10f2d359236d520bf1c08cd4345063c582133939035	 
- stack 2: 0x42C
- stack 1: 0x0
- stack 0: 0x183
208	 17E	JUMPI		 	 
- stack 0: 0x42C
209	 17F	PUSH2	019D	 ;; _neq_after_61f3567ab9a60775e19eb10f2d359236d520bf1c08cd4345063c582133939035	 
- stack 1: 0x42C
- stack 0: 0x19D
210	 182	JUMP		 	 
- stack 0: 0x42C
211	 19D	JUMPDEST		 ;; _neq_after_61f3567ab9a60775e19eb10f2d359236d520bf1c08cd4345063c582133939035	 
- stack 0: 0x42C
212	 19E	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
213	 1A0	ADD		 	 
- stack 0: 0x430
214	 1A1	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
215	 1A2	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x1A7FFFE00B7F8FC00D600040102000001D8FFFE012CF8F0014B000301650008
216	 1A3	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x1A7FFFE00B7F8FC00D600040102000001D8FFFE012CF8F0014B000301650008
- stack 0: 0xF0
217	 1A5	SHR		 	 
- stack 1: 0x430
- stack 0: 0x1A7
218	 1A6	JUMP		 	 
- stack 0: 0x430
219	 1A7	JUMPDEST		 ;; __riscvimpl_AUIPC_17e5ffff	  ;; # instr: auipc a0,0xffffe(ignore imm)
- stack 0: 0x430
220	 1A8	DUP1		 	 
- stack 1: 0x430
- stack 0: 0x430
221	 1A9	PUSH32	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE000	 	  ;; # signextended -8192
- stack 2: 0x430
- stack 1: 0x430
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE000
222	 1CA	ADD		 	 
- stack 1: 0x430
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE430
223	 1CB	PUSH2	0140	 	 
- stack 2: 0x430
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE430
- stack 0: 0x140
224	 1CE	MSTORE		 	  ;; # store to x10
- stack 0: 0x430
225	 1CF	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
226	 1D1	ADD		 	 
- stack 0: 0x434
227	 1D2	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
228	 1D3	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xB7F8FC00D600040102000001D8FFFE012CF8F0014B00030165000801EB0018
229	 1D4	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xB7F8FC00D600040102000001D8FFFE012CF8F0014B00030165000801EB0018
- stack 0: 0xF0
230	 1D6	SHR		 	 
- stack 1: 0x434
- stack 0: 0xB7
231	 1D7	JUMP		 	 
- stack 0: 0x434
232	 B7	JUMPDEST		 ;; __riscvimpl_ADDI_10_10_0	  ;; # instr: addi a0,a0,1820(ignore imm)
- stack 0: 0x434
233	 B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
234	 B9	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xB7F8FC00D600040102000001D8FFFE012CF8F0014B00030165000801EB0018
235	 BA	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xB7F8FC00D600040102000001D8FFFE012CF8F0014B00030165000801EB0018
- stack 0: 0xE0
236	 BC	SHR		 	 
- stack 1: 0x434
- stack 0: 0xB7F8FC
237	 BD	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xB7F8FC
- stack 0: 0xFFFF
238	 C0	AND		 	 
- stack 1: 0x434
- stack 0: 0xF8FC
239	 C1	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0xF8FC
- stack 0: 0x1
240	 C3	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8FC
241	 C4	PUSH2	0140	 	 
- stack 2: 0x434
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8FC
- stack 0: 0x140
242	 C7	MLOAD		 	  ;; # read from x10
- stack 2: 0x434
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE430
243	 C8	ADD		 	  ;; # ADDI 10
- stack 1: 0x434
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD2C
244	 C9	PUSH2	0140	 	 
- stack 2: 0x434
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD2C
- stack 0: 0x140
245	 CC	MSTORE		 	  ;; # store to x10
- stack 0: 0x434
246	 CD	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
247	 CF	ADD		 	 
- stack 0: 0x438
248	 D0	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
249	 D1	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xD600040102000001D8FFFE012CF8F0014B00030165000801EB001800210000
250	 D2	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xD600040102000001D8FFFE012CF8F0014B00030165000801EB001800210000
- stack 0: 0xF0
251	 D4	SHR		 	 
- stack 1: 0x438
- stack 0: 0xD6
252	 D5	JUMP		 	 
- stack 0: 0x438
253	 D6	JUMPDEST		 ;; __riscvimpl_JAL_11_0_0	  ;; # instr: jal a1,4(ignore imm)
- stack 0: 0x438
254	 D7	DUP1		 	 
- stack 1: 0x438
- stack 0: 0x438
255	 D8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x438
- stack 1: 0x438
- stack 0: 0x438
256	 D9	MLOAD		 	 
- stack 2: 0x438
- stack 1: 0x438
- stack 0: 0xD600040102000001D8FFFE012CF8F0014B00030165000801EB001800210000
257	 DA	PUSH1	E0	 	 
- stack 3: 0x438
- stack 2: 0x438
- stack 1: 0xD600040102000001D8FFFE012CF8F0014B00030165000801EB001800210000
- stack 0: 0xE0
258	 DC	SHR		 	 
- stack 2: 0x438
- stack 1: 0x438
- stack 0: 0xD60004
259	 DD	PUSH2	FFFF	 	 
- stack 3: 0x438
- stack 2: 0x438
- stack 1: 0xD60004
- stack 0: 0xFFFF
260	 E0	AND		 	 
- stack 2: 0x438
- stack 1: 0x438
- stack 0: 0x4
261	 E1	PUSH1	01	 	 
- stack 3: 0x438
- stack 2: 0x438
- stack 1: 0x4
- stack 0: 0x1
262	 E3	SIGNEXTEND		 	 
- stack 2: 0x438
- stack 1: 0x438
- stack 0: 0x4
263	 E4	ADD		 	 
- stack 1: 0x438
- stack 0: 0x43C
264	 E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x438
- stack 1: 0x43C
- stack 0: 0xFFFFFFFF
265	 EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x438
- stack 0: 0x43C
266	 EB	SWAP1		 	 
- stack 1: 0x43C
- stack 0: 0x438
267	 EC	PUSH1	04	 	 
- stack 2: 0x43C
- stack 1: 0x438
- stack 0: 0x4
268	 EE	ADD		 	 
- stack 1: 0x43C
- stack 0: 0x43C
269	 EF	PUSH2	0160	 	 
- stack 2: 0x43C
- stack 1: 0x43C
- stack 0: 0x160
270	 F2	MSTORE		 	  ;; # store to x11
- stack 0: 0x43C
271	 F3	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
272	 F4	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x102000001D8FFFE012CF8F0014B00030165000801EB00180021000000340488
273	 F5	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x102000001D8FFFE012CF8F0014B00030165000801EB00180021000000340488
- stack 0: 0xF0
274	 F7	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x102
275	 F8	JUMP		 	 
- stack 0: 0x43C
276	 102	JUMPDEST		 ;; __riscvimpl_SUB_10_10_11	  ;; # instr: sub a0,a0,a1(ignore imm)
- stack 0: 0x43C
277	 103	PUSH2	0160	 	 
- stack 1: 0x43C
- stack 0: 0x160
278	 106	MLOAD		 	  ;; # read from x11
- stack 1: 0x43C
- stack 0: 0x43C
279	 107	PUSH2	0140	 	 
- stack 2: 0x43C
- stack 1: 0x43C
- stack 0: 0x140
280	 10A	MLOAD		 	  ;; # read from x10
- stack 2: 0x43C
- stack 1: 0x43C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD2C
281	 10B	SUB		 	  ;; # SUB
- stack 1: 0x43C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8F0
282	 10C	PUSH2	0140	 	 
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8F0
- stack 0: 0x140
283	 10F	MSTORE		 	  ;; # store to x10
- stack 0: 0x43C
284	 110	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
285	 112	ADD		 	 
- stack 0: 0x440
286	 113	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
287	 114	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x1D8FFFE012CF8F0014B00030165000801EB0018002100000034048800530042
288	 115	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x1D8FFFE012CF8F0014B00030165000801EB0018002100000034048800530042
- stack 0: 0xF0
289	 117	SHR		 	 
- stack 1: 0x440
- stack 0: 0x1D8
290	 118	JUMP		 	 
- stack 0: 0x440
291	 1D8	JUMPDEST		 ;; __riscvimpl_LUI_ffffeeb7	  ;; # instr: lui t4,0xffffe(ignore imm)
- stack 0: 0x440
292	 1D9	PUSH4	ffffe000	 	 
- stack 1: 0x440
- stack 0: 0xFFFFE000
293	 1DE	PUSH2	03A0	 	 
- stack 2: 0x440
- stack 1: 0xFFFFE000
- stack 0: 0x3A0
294	 1E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x440
295	 1E2	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
296	 1E4	ADD		 	 
- stack 0: 0x444
297	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
298	 1E6	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x12CF8F0014B00030165000801EB001800210000003404880053004200660000
299	 1E7	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x12CF8F0014B00030165000801EB001800210000003404880053004200660000
- stack 0: 0xF0
300	 1E9	SHR		 	 
- stack 1: 0x444
- stack 0: 0x12C
301	 1EA	JUMP		 	 
- stack 0: 0x444
302	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,1808(ignore imm)
- stack 0: 0x444
303	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
304	 12E	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x12CF8F0014B00030165000801EB001800210000003404880053004200660000
305	 12F	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0x12CF8F0014B00030165000801EB001800210000003404880053004200660000
- stack 0: 0xE0
306	 131	SHR		 	 
- stack 1: 0x444
- stack 0: 0x12CF8F0
307	 132	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0x12CF8F0
- stack 0: 0xFFFF
308	 135	AND		 	 
- stack 1: 0x444
- stack 0: 0xF8F0
309	 136	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0xF8F0
- stack 0: 0x1
310	 138	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8F0
311	 139	PUSH2	03A0	 	 
- stack 2: 0x444
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8F0
- stack 0: 0x3A0
312	 13C	MLOAD		 	  ;; # read from x29
- stack 2: 0x444
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8F0
- stack 0: 0xFFFFE000
313	 13D	ADD		 	  ;; # ADDI 29
- stack 1: 0x444
- stack 0: 0xFFFFD8F0
314	 13E	PUSH2	03A0	 	 
- stack 2: 0x444
- stack 1: 0xFFFFD8F0
- stack 0: 0x3A0
315	 141	MSTORE		 	  ;; # store to x29
- stack 0: 0x444
316	 142	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
317	 144	ADD		 	 
- stack 0: 0x448
318	 145	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
319	 146	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x14B00030165000801EB001800210000003404880053004200660000022B0001
320	 147	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0x14B00030165000801EB001800210000003404880053004200660000022B0001
- stack 0: 0xF0
321	 149	SHR		 	 
- stack 1: 0x448
- stack 0: 0x14B
322	 14A	JUMP		 	 
- stack 0: 0x448
323	 14B	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x448
324	 14C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x448
- stack 0: 0x448
325	 14D	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x14B00030165000801EB001800210000003404880053004200660000022B0001
326	 14E	PUSH1	E0	 	 
- stack 2: 0x448
- stack 1: 0x14B00030165000801EB001800210000003404880053004200660000022B0001
- stack 0: 0xE0
327	 150	SHR		 	 
- stack 1: 0x448
- stack 0: 0x14B0003
328	 151	PUSH2	FFFF	 	 
- stack 2: 0x448
- stack 1: 0x14B0003
- stack 0: 0xFFFF
329	 154	AND		 	 
- stack 1: 0x448
- stack 0: 0x3
330	 155	PUSH1	01	 	 
- stack 2: 0x448
- stack 1: 0x3
- stack 0: 0x1
331	 157	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0x3
332	 158	PUSH2	0380	 	 
- stack 2: 0x448
- stack 1: 0x3
- stack 0: 0x380
333	 15B	MSTORE		 	  ;; # store to x28
- stack 0: 0x448
334	 15C	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
335	 15E	ADD		 	 
- stack 0: 0x44C
336	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
337	 160	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x165000801EB001800210000003404880053004200660000022B000100210000
338	 161	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x165000801EB001800210000003404880053004200660000022B000100210000
- stack 0: 0xF0
339	 163	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x165
340	 164	JUMP		 	 
- stack 0: 0x44C
341	 165	JUMPDEST		 ;; __riscvimpl_BNE_0_10_29	  ;; # instr: bne a0,t4,28(ignore imm)
- stack 0: 0x44C
342	 166	PUSH2	0140	 	 
- stack 1: 0x44C
- stack 0: 0x140
343	 169	MLOAD		 	  ;; # read from x10
- stack 1: 0x44C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8F0
344	 16A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8F0
- stack 0: 0xFFFFFFFF
345	 16F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x44C
- stack 0: 0xFFFFD8F0
346	 170	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0xFFFFD8F0
- stack 0: 0x3A0
347	 173	MLOAD		 	  ;; # read from x29
- stack 2: 0x44C
- stack 1: 0xFFFFD8F0
- stack 0: 0xFFFFD8F0
348	 174	PUSH4	FFFFFFFF	 	 
- stack 3: 0x44C
- stack 2: 0xFFFFD8F0
- stack 1: 0xFFFFD8F0
- stack 0: 0xFFFFFFFF
349	 179	AND		 	  ;; # mask to 32 bits
- stack 2: 0x44C
- stack 1: 0xFFFFD8F0
- stack 0: 0xFFFFD8F0
350	 17A	SUB		 	 
- stack 1: 0x44C
- stack 0: 0x0
351	 17B	PUSH2	0183	 ;; _neq_61f3567ab9a60775e19eb10f2d359236d520bf1c08cd4345063c582133939035	 
- stack 2: 0x44C
- stack 1: 0x0
- stack 0: 0x183
352	 17E	JUMPI		 	 
- stack 0: 0x44C
353	 17F	PUSH2	019D	 ;; _neq_after_61f3567ab9a60775e19eb10f2d359236d520bf1c08cd4345063c582133939035	 
- stack 1: 0x44C
- stack 0: 0x19D
354	 182	JUMP		 	 
- stack 0: 0x44C
355	 19D	JUMPDEST		 ;; _neq_after_61f3567ab9a60775e19eb10f2d359236d520bf1c08cd4345063c582133939035	 
- stack 0: 0x44C
356	 19E	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
357	 1A0	ADD		 	 
- stack 0: 0x450
358	 1A1	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
359	 1A2	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x1EB001800210000003404880053004200660000022B0001002100000034048C
360	 1A3	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x1EB001800210000003404880053004200660000022B0001002100000034048C
- stack 0: 0xF0
361	 1A5	SHR		 	 
- stack 1: 0x450
- stack 0: 0x1EB
362	 1A6	JUMP		 	 
- stack 0: 0x450
363	 1EB	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x450
364	 1EC	PUSH1	00	 	 
- stack 1: 0x450
- stack 0: 0x0
365	 1EE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x450
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
366	 1F3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x450
- stack 0: 0x0
367	 1F4	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x0
- stack 0: 0x380
368	 1F7	MLOAD		 	  ;; # read from x28
- stack 2: 0x450
- stack 1: 0x0
- stack 0: 0x3
369	 1F8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x450
- stack 2: 0x0
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
370	 1FD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x450
- stack 1: 0x0
- stack 0: 0x3
371	 1FE	SUB		 	 
- stack 1: 0x450
- stack 0: 0x3
372	 1FF	PUSH2	0207	 ;; _neq_036044fe47586f2d6c9aa1a2555c699c68653e6638c336d1ff2414df309b4a5b	 
- stack 2: 0x450
- stack 1: 0x3
- stack 0: 0x207
373	 202	JUMPI		 	 
- stack 0: 0x450
374	 207	JUMPDEST		 ;; _neq_036044fe47586f2d6c9aa1a2555c699c68653e6638c336d1ff2414df309b4a5b	 
- stack 0: 0x450
375	 208	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
376	 209	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x1EB001800210000003404880053004200660000022B0001002100000034048C
377	 20A	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x1EB001800210000003404880053004200660000022B0001002100000034048C
- stack 0: 0xE0
378	 20C	SHR		 	 
- stack 1: 0x450
- stack 0: 0x1EB0018
379	 20D	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x1EB0018
- stack 0: 0xFFFF
380	 210	AND		 	 
- stack 1: 0x450
- stack 0: 0x18
381	 211	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x18
- stack 0: 0x1
382	 213	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x18
383	 214	ADD		 	 
- stack 0: 0x468
384	 215	PUSH4	FFFFFFFF	 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFF
385	 21A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x468
386	 21B	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
387	 21C	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x2100000034048C005300420066000002360000006600006574796D00007473
388	 21D	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x2100000034048C005300420066000002360000006600006574796D00007473
- stack 0: 0xF0
389	 21F	SHR		 	 
- stack 1: 0x468
- stack 0: 0x21
390	 220	JUMP		 	 
- stack 0: 0x468
391	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x468
392	 22	PUSH4	00000000	 	 
- stack 1: 0x468
- stack 0: 0x0
393	 27	PUSH2	0160	 	 
- stack 2: 0x468
- stack 1: 0x0
- stack 0: 0x160
394	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x468
395	 2B	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
396	 2D	ADD		 	 
- stack 0: 0x46C
397	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
398	 2F	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x34048C005300420066000002360000006600006574796D0000747300525245
399	 30	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x34048C005300420066000002360000006600006574796D0000747300525245
- stack 0: 0xF0
400	 32	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x34
401	 33	JUMP		 	 
- stack 0: 0x46C
402	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1152(ignore imm)
- stack 0: 0x46C
403	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x46C
- stack 0: 0x46C
404	 36	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x34048C005300420066000002360000006600006574796D0000747300525245
405	 37	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0x34048C005300420066000002360000006600006574796D0000747300525245
- stack 0: 0xE0
406	 39	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x34048C
407	 3A	PUSH2	FFFF	 	 
- stack 2: 0x46C
- stack 1: 0x34048C
- stack 0: 0xFFFF
408	 3D	AND		 	 
- stack 1: 0x46C
- stack 0: 0x48C
409	 3E	PUSH1	01	 	 
- stack 2: 0x46C
- stack 1: 0x48C
- stack 0: 0x1
410	 40	SIGNEXTEND		 	 
- stack 1: 0x46C
- stack 0: 0x48C
411	 41	PUSH2	0160	 	 
- stack 2: 0x46C
- stack 1: 0x48C
- stack 0: 0x160
412	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x46C
- stack 1: 0x48C
- stack 0: 0x0
413	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x46C
- stack 0: 0x48C
414	 46	PUSH2	0160	 	 
- stack 2: 0x46C
- stack 1: 0x48C
- stack 0: 0x160
415	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x46C
416	 4A	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
417	 4C	ADD		 	 
- stack 0: 0x470
418	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
419	 4E	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x5300420066000002360000006600006574796D000074730052524500004B4F
420	 4F	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x5300420066000002360000006600006574796D000074730052524500004B4F
- stack 0: 0xF0
421	 51	SHR		 	 
- stack 1: 0x470
- stack 0: 0x53
422	 52	JUMP		 	 
- stack 0: 0x470
423	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x470
424	 54	PUSH4	00042000	 	 
- stack 1: 0x470
- stack 0: 0x42000
425	 59	PUSH2	0140	 	 
- stack 2: 0x470
- stack 1: 0x42000
- stack 0: 0x140
426	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x470
427	 5D	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
428	 5F	ADD		 	 
- stack 0: 0x474
429	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
430	 61	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x66000002360000006600006574796D000074730052524500004B4F00000000
431	 62	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x66000002360000006600006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
432	 64	SHR		 	 
- stack 1: 0x474
- stack 0: 0x66
433	 65	JUMP		 	 
- stack 0: 0x474
434	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x474
435	 67	PUSH2	0140	 	 
- stack 1: 0x474
- stack 0: 0x140
436	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x474
- stack 0: 0x42000
437	 6B	PUSH2	0075	 ;; _ecall_4da0b5ca89b76e1793e801fbdd893eb1ab28cfcf437f3ee6315ded03099ea063	 
- stack 2: 0x474
- stack 1: 0x42000
- stack 0: 0x75
438	 6E	JUMPI		 	 
- stack 0: 0x474
439	 75	JUMPDEST		 ;; _ecall_4da0b5ca89b76e1793e801fbdd893eb1ab28cfcf437f3ee6315ded03099ea063	 
- stack 0: 0x474
440	 76	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
441	 78	PUSH2	0160	 	 
- stack 2: 0x474
- stack 1: 0x4
- stack 0: 0x160
442	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x474
- stack 1: 0x4
- stack 0: 0x48C
443	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x474
444	 7D	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
445	 7F	ADD		 	 
- stack 0: 0x478
446	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
447	 81	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x2360000006600006574796D000074730052524500004B4F0000000000000000
448	 82	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x2360000006600006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
449	 84	SHR		 	 
- stack 1: 0x478
- stack 0: 0x236
450	 85	JUMP		 	 
- stack 0: 0x478
451	 236	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x478
452	 237	PUSH4	00000000	 	 
- stack 1: 0x478
- stack 0: 0x0
453	 23C	PUSH2	0140	 	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x140
454	 23F	MSTORE		 	  ;; # store to x10
- stack 0: 0x478
455	 240	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
456	 242	ADD		 	 
- stack 0: 0x47C
457	 243	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
458	 244	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x6600006574796D000074730052524500004B4F000000000000000000000000
459	 245	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x6600006574796D000074730052524500004B4F000000000000000000000000
- stack 0: 0xF0
460	 247	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x66
461	 248	JUMP		 	 
- stack 0: 0x47C
462	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x47C
463	 67	PUSH2	0140	 	 
- stack 1: 0x47C
- stack 0: 0x140
464	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x47C
- stack 0: 0x0
465	 6B	PUSH2	0075	 ;; _ecall_4da0b5ca89b76e1793e801fbdd893eb1ab28cfcf437f3ee6315ded03099ea063	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x75
466	 6E	JUMPI		 	 
- stack 0: 0x47C
467	 6F	PUSH1	20	 	 
- stack 1: 0x47C
- stack 0: 0x20
468	 71	PUSH2	0160	 	 
- stack 2: 0x47C
- stack 1: 0x20
- stack 0: 0x160
469	 74	RETURN		 	 
Final bytecode length; 730
Returned: 000000000000000000000000000000000000000000000000000000000000048c
gasUsed : 2491
** HOT: 400 - range: 400,404,408,40c,410,414,418
** HOT: 41c - range: 41c,420,424,428,42c
** HOT: 430 - range: 430,434,438
** HOT: 43c - range: 43c,440,444,448,44c
