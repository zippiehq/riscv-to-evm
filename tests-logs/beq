Running in EVM:
0	 0	PUSH4	0310	 	 
- stack 0: 0x310
1	 5	PUSH2	02D9	 ;; _rambegin	 
- stack 1: 0x310
- stack 0: 0x2D9
2	 8	PUSH1	01	 	 
- stack 2: 0x310
- stack 1: 0x2D9
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x310
- stack 0: 0x2DA
4	 B	PUSH2	0400	 	 
- stack 2: 0x310
- stack 1: 0x2DA
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100000034070000530042006600000086000200A0000000BA000000D4000C
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100000034070000530042006600000086000200A0000000BA000000D4000C
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34070000530042006600000086000200A0000000BA000000D4000C011602B0
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34070000530042006600000086000200A0000000BA000000D4000C011602B0
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1792(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34070000530042006600000086000200A0000000BA000000D4000C011602B0
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34070000530042006600000086000200A0000000BA000000D4000C011602B0
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340700
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340700
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x700
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x700
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x700
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000200A0000000BA000000D4000C011602B00116000C
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000200A0000000BA000000D4000C011602B00116000C
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000200A0000000BA000000D4000C011602B00116000C00D4FFFC
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000200A0000000BA000000D4000C011602B00116000C00D4FFFC
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_5f56cd4864000118466abb6371402b034c6eb3e314b6f632113dd884555bc2f8	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_5f56cd4864000118466abb6371402b034c6eb3e314b6f632113dd884555bc2f8	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x700
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA000000D4000C011602B00116000C00D4FFFC011602A4
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA000000D4000C011602B00116000C00D4FFFC011602A4
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA000000D4000C011602B00116000C00D4FFFC011602A4
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA000000D4000C011602B00116000C00D4FFFC011602A4
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860002
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860002
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x2
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x2
84	 93	PUSH2	0380	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x380
85	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000D4000C011602B00116000C00D4FFFC011602A400860003
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000D4000C011602B00116000C00D4FFFC011602A400860003
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000D4000C011602B00116000C00D4FFFC011602A400860003
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000D4000C011602B00116000C00D4FFFC011602A400860003
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x20
103	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
104	 B1	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
105	 B3	ADD		 	 
- stack 0: 0x418
106	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
107	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000000D4000C011602B00116000C00D4FFFC011602A40086000300A00001
108	 B6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBA000000D4000C011602B00116000C00D4FFFC011602A40086000300A00001
- stack 0: 0xF0
109	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA
110	 B9	JUMP		 	 
- stack 0: 0x418
111	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x418
112	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
113	 BC	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000000D4000C011602B00116000C00D4FFFC011602A40086000300A00001
114	 BD	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xBA000000D4000C011602B00116000C00D4FFFC011602A40086000300A00001
- stack 0: 0xE0
115	 BF	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA0000
116	 C0	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xBA0000
- stack 0: 0xFFFF
117	 C3	AND		 	 
- stack 1: 0x418
- stack 0: 0x0
118	 C4	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x1
119	 C6	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0x0
120	 C7	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x40
121	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x418
122	 CB	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
123	 CD	ADD		 	 
- stack 0: 0x41C
124	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
125	 CF	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C011602B00116000C00D4FFFC011602A40086000300A0000100BA0001
126	 D0	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C011602B00116000C00D4FFFC011602A40086000300A0000100BA0001
- stack 0: 0xF0
127	 D2	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD4
128	 D3	JUMP		 	 
- stack 0: 0x41C
129	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x41C
130	 D5	PUSH2	0020	 	 
- stack 1: 0x41C
- stack 0: 0x20
131	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x41C
- stack 0: 0x0
132	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
133	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x41C
- stack 0: 0x0
134	 DF	PUSH2	0040	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x40
135	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x0
136	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x41C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
137	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x0
138	 E9	EQ		 	 
- stack 1: 0x41C
- stack 0: 0x1
139	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0xF2
140	 ED	JUMPI		 	 
- stack 0: 0x41C
141	 F2	JUMPDEST		 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x41C
142	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
143	 F4	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C011602B00116000C00D4FFFC011602A40086000300A0000100BA0001
144	 F5	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C011602B00116000C00D4FFFC011602A40086000300A0000100BA0001
- stack 0: 0xE0
145	 F7	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C
146	 F8	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
147	 FB	AND		 	 
- stack 1: 0x41C
- stack 0: 0xC
148	 FC	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0xC
- stack 0: 0x1
149	 FE	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0xC
150	 FF	ADD		 	 
- stack 0: 0x428
151	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFF
152	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x428
153	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
154	 107	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC011602A40086000300A0000100BA000100D4000C011602900116000C
155	 108	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC011602A40086000300A0000100BA000100D4000C011602900116000C
- stack 0: 0xF0
156	 10A	SHR		 	 
- stack 1: 0x428
- stack 0: 0xD4
157	 10B	JUMP		 	 
- stack 0: 0x428
158	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x428
159	 D5	PUSH2	0020	 	 
- stack 1: 0x428
- stack 0: 0x20
160	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x428
- stack 0: 0x0
161	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
162	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x428
- stack 0: 0x0
163	 DF	PUSH2	0040	 	 
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x40
164	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x0
165	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x428
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
166	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x0
167	 E9	EQ		 	 
- stack 1: 0x428
- stack 0: 0x1
168	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0xF2
169	 ED	JUMPI		 	 
- stack 0: 0x428
170	 F2	JUMPDEST		 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x428
171	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
172	 F4	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC011602A40086000300A0000100BA000100D4000C011602900116000C
173	 F5	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC011602A40086000300A0000100BA000100D4000C011602900116000C
- stack 0: 0xE0
174	 F7	SHR		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC
175	 F8	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
176	 FB	AND		 	 
- stack 1: 0x428
- stack 0: 0xFFFC
177	 FC	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0xFFFC
- stack 0: 0x1
178	 FE	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
179	 FF	ADD		 	 
- stack 0: 0x424
180	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x424
- stack 0: 0xFFFFFFFF
181	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x424
182	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
183	 107	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x116000C00D4FFFC011602A40086000300A0000100BA000100D4000C01160290
184	 108	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x116000C00D4FFFC011602A40086000300A0000100BA000100D4000C01160290
- stack 0: 0xF0
185	 10A	SHR		 	 
- stack 1: 0x424
- stack 0: 0x116
186	 10B	JUMP		 	 
- stack 0: 0x424
187	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x424
188	 117	PUSH1	00	 	 
- stack 1: 0x424
- stack 0: 0x0
189	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
190	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x0
191	 11F	PUSH2	0380	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x380
192	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x2
193	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0x0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
194	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x2
195	 129	SUB		 	 
- stack 1: 0x424
- stack 0: 0x2
196	 12A	PUSH2	0132	 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 2: 0x424
- stack 1: 0x2
- stack 0: 0x132
197	 12D	JUMPI		 	 
- stack 0: 0x424
198	 132	JUMPDEST		 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 0: 0x424
199	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
200	 134	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x116000C00D4FFFC011602A40086000300A0000100BA000100D4000C01160290
201	 135	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x116000C00D4FFFC011602A40086000300A0000100BA000100D4000C01160290
- stack 0: 0xE0
202	 137	SHR		 	 
- stack 1: 0x424
- stack 0: 0x116000C
203	 138	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x116000C
- stack 0: 0xFFFF
204	 13B	AND		 	 
- stack 1: 0x424
- stack 0: 0xC
205	 13C	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0xC
- stack 0: 0x1
206	 13E	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0xC
207	 13F	ADD		 	 
- stack 0: 0x430
208	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x430
- stack 0: 0xFFFFFFFF
209	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x430
210	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
211	 147	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x86000300A0000100BA000100D4000C011602900116000C00D4FFFC01160284
212	 148	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x86000300A0000100BA000100D4000C011602900116000C00D4FFFC01160284
- stack 0: 0xF0
213	 14A	SHR		 	 
- stack 1: 0x430
- stack 0: 0x86
214	 14B	JUMP		 	 
- stack 0: 0x430
215	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x430
216	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
217	 88	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x86000300A0000100BA000100D4000C011602900116000C00D4FFFC01160284
218	 89	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0x86000300A0000100BA000100D4000C011602900116000C00D4FFFC01160284
- stack 0: 0xE0
219	 8B	SHR		 	 
- stack 1: 0x430
- stack 0: 0x860003
220	 8C	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0x860003
- stack 0: 0xFFFF
221	 8F	AND		 	 
- stack 1: 0x430
- stack 0: 0x3
222	 90	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x1
223	 92	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x3
224	 93	PUSH2	0380	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x380
225	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x430
226	 97	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
227	 99	ADD		 	 
- stack 0: 0x434
228	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
229	 9B	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xA0000100BA000100D4000C011602900116000C00D4FFFC0116028400860004
230	 9C	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xA0000100BA000100D4000C011602900116000C00D4FFFC0116028400860004
- stack 0: 0xF0
231	 9E	SHR		 	 
- stack 1: 0x434
- stack 0: 0xA0
232	 9F	JUMP		 	 
- stack 0: 0x434
233	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x434
234	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
235	 A2	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xA0000100BA000100D4000C011602900116000C00D4FFFC0116028400860004
236	 A3	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xA0000100BA000100D4000C011602900116000C00D4FFFC0116028400860004
- stack 0: 0xE0
237	 A5	SHR		 	 
- stack 1: 0x434
- stack 0: 0xA00001
238	 A6	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xA00001
- stack 0: 0xFFFF
239	 A9	AND		 	 
- stack 1: 0x434
- stack 0: 0x1
240	 AA	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0x1
- stack 0: 0x1
241	 AC	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0x1
242	 AD	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0x1
- stack 0: 0x20
243	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x434
244	 B1	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
245	 B3	ADD		 	 
- stack 0: 0x438
246	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
247	 B5	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xBA000100D4000C011602900116000C00D4FFFC011602840086000400A0FFFF
248	 B6	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xBA000100D4000C011602900116000C00D4FFFC011602840086000400A0FFFF
- stack 0: 0xF0
249	 B8	SHR		 	 
- stack 1: 0x438
- stack 0: 0xBA
250	 B9	JUMP		 	 
- stack 0: 0x438
251	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x438
252	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
253	 BC	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xBA000100D4000C011602900116000C00D4FFFC011602840086000400A0FFFF
254	 BD	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xBA000100D4000C011602900116000C00D4FFFC011602840086000400A0FFFF
- stack 0: 0xE0
255	 BF	SHR		 	 
- stack 1: 0x438
- stack 0: 0xBA0001
256	 C0	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xBA0001
- stack 0: 0xFFFF
257	 C3	AND		 	 
- stack 1: 0x438
- stack 0: 0x1
258	 C4	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x1
- stack 0: 0x1
259	 C6	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x1
260	 C7	PUSH2	0040	 	 
- stack 2: 0x438
- stack 1: 0x1
- stack 0: 0x40
261	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x438
262	 CB	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
263	 CD	ADD		 	 
- stack 0: 0x43C
264	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
265	 CF	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C011602900116000C00D4FFFC011602840086000400A0FFFF00BAFFFF
266	 D0	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C011602900116000C00D4FFFC011602840086000400A0FFFF00BAFFFF
- stack 0: 0xF0
267	 D2	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xD4
268	 D3	JUMP		 	 
- stack 0: 0x43C
269	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x43C
270	 D5	PUSH2	0020	 	 
- stack 1: 0x43C
- stack 0: 0x20
271	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x43C
- stack 0: 0x1
272	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
273	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0x1
274	 DF	PUSH2	0040	 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x40
275	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x1
276	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
277	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x1
278	 E9	EQ		 	 
- stack 1: 0x43C
- stack 0: 0x1
279	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0xF2
280	 ED	JUMPI		 	 
- stack 0: 0x43C
281	 F2	JUMPDEST		 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x43C
282	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
283	 F4	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C011602900116000C00D4FFFC011602840086000400A0FFFF00BAFFFF
284	 F5	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C011602900116000C00D4FFFC011602840086000400A0FFFF00BAFFFF
- stack 0: 0xE0
285	 F7	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C
286	 F8	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
287	 FB	AND		 	 
- stack 1: 0x43C
- stack 0: 0xC
288	 FC	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0xC
- stack 0: 0x1
289	 FE	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0xC
290	 FF	ADD		 	 
- stack 0: 0x448
291	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFF
292	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x448
293	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
294	 107	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC011602840086000400A0FFFF00BAFFFF00D4000C011602700116000C
295	 108	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC011602840086000400A0FFFF00BAFFFF00D4000C011602700116000C
- stack 0: 0xF0
296	 10A	SHR		 	 
- stack 1: 0x448
- stack 0: 0xD4
297	 10B	JUMP		 	 
- stack 0: 0x448
298	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x448
299	 D5	PUSH2	0020	 	 
- stack 1: 0x448
- stack 0: 0x20
300	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x448
- stack 0: 0x1
301	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
302	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0x1
303	 DF	PUSH2	0040	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x40
304	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x1
305	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x448
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
306	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x1
307	 E9	EQ		 	 
- stack 1: 0x448
- stack 0: 0x1
308	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0xF2
309	 ED	JUMPI		 	 
- stack 0: 0x448
310	 F2	JUMPDEST		 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x448
311	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x448
- stack 0: 0x448
312	 F4	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC011602840086000400A0FFFF00BAFFFF00D4000C011602700116000C
313	 F5	PUSH1	E0	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC011602840086000400A0FFFF00BAFFFF00D4000C011602700116000C
- stack 0: 0xE0
314	 F7	SHR		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC
315	 F8	PUSH2	FFFF	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
316	 FB	AND		 	 
- stack 1: 0x448
- stack 0: 0xFFFC
317	 FC	PUSH1	01	 	 
- stack 2: 0x448
- stack 1: 0xFFFC
- stack 0: 0x1
318	 FE	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
319	 FF	ADD		 	 
- stack 0: 0x444
320	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x444
- stack 0: 0xFFFFFFFF
321	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x444
322	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
323	 107	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x116000C00D4FFFC011602840086000400A0FFFF00BAFFFF00D4000C01160270
324	 108	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x116000C00D4FFFC011602840086000400A0FFFF00BAFFFF00D4000C01160270
- stack 0: 0xF0
325	 10A	SHR		 	 
- stack 1: 0x444
- stack 0: 0x116
326	 10B	JUMP		 	 
- stack 0: 0x444
327	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x444
328	 117	PUSH1	00	 	 
- stack 1: 0x444
- stack 0: 0x0
329	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
330	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x444
- stack 0: 0x0
331	 11F	PUSH2	0380	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x380
332	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x3
333	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x444
- stack 2: 0x0
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
334	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x3
335	 129	SUB		 	 
- stack 1: 0x444
- stack 0: 0x3
336	 12A	PUSH2	0132	 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 2: 0x444
- stack 1: 0x3
- stack 0: 0x132
337	 12D	JUMPI		 	 
- stack 0: 0x444
338	 132	JUMPDEST		 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 0: 0x444
339	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
340	 134	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x116000C00D4FFFC011602840086000400A0FFFF00BAFFFF00D4000C01160270
341	 135	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0x116000C00D4FFFC011602840086000400A0FFFF00BAFFFF00D4000C01160270
- stack 0: 0xE0
342	 137	SHR		 	 
- stack 1: 0x444
- stack 0: 0x116000C
343	 138	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0x116000C
- stack 0: 0xFFFF
344	 13B	AND		 	 
- stack 1: 0x444
- stack 0: 0xC
345	 13C	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0xC
- stack 0: 0x1
346	 13E	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0xC
347	 13F	ADD		 	 
- stack 0: 0x450
348	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x450
- stack 0: 0xFFFFFFFF
349	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x450
350	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
351	 147	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x86000400A0FFFF00BAFFFF00D4000C011602700116000C00D4FFFC01160264
352	 148	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x86000400A0FFFF00BAFFFF00D4000C011602700116000C00D4FFFC01160264
- stack 0: 0xF0
353	 14A	SHR		 	 
- stack 1: 0x450
- stack 0: 0x86
354	 14B	JUMP		 	 
- stack 0: 0x450
355	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
356	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
357	 88	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x86000400A0FFFF00BAFFFF00D4000C011602700116000C00D4FFFC01160264
358	 89	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x86000400A0FFFF00BAFFFF00D4000C011602700116000C00D4FFFC01160264
- stack 0: 0xE0
359	 8B	SHR		 	 
- stack 1: 0x450
- stack 0: 0x860004
360	 8C	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x860004
- stack 0: 0xFFFF
361	 8F	AND		 	 
- stack 1: 0x450
- stack 0: 0x4
362	 90	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x1
363	 92	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x4
364	 93	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x380
365	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
366	 97	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
367	 99	ADD		 	 
- stack 0: 0x454
368	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
369	 9B	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xA0FFFF00BAFFFF00D4000C011602700116000C00D4FFFC0116026400860005
370	 9C	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0xA0FFFF00BAFFFF00D4000C011602700116000C00D4FFFC0116026400860005
- stack 0: 0xF0
371	 9E	SHR		 	 
- stack 1: 0x454
- stack 0: 0xA0
372	 9F	JUMP		 	 
- stack 0: 0x454
373	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x454
374	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
375	 A2	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xA0FFFF00BAFFFF00D4000C011602700116000C00D4FFFC0116026400860005
376	 A3	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0xA0FFFF00BAFFFF00D4000C011602700116000C00D4FFFC0116026400860005
- stack 0: 0xE0
377	 A5	SHR		 	 
- stack 1: 0x454
- stack 0: 0xA0FFFF
378	 A6	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
379	 A9	AND		 	 
- stack 1: 0x454
- stack 0: 0xFFFF
380	 AA	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0xFFFF
- stack 0: 0x1
381	 AC	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
382	 AD	PUSH2	0020	 	 
- stack 2: 0x454
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
383	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x454
384	 B1	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
385	 B3	ADD		 	 
- stack 0: 0x458
386	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
387	 B5	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xBAFFFF00D4000C011602700116000C00D4FFFC011602640086000500A00000
388	 B6	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0xBAFFFF00D4000C011602700116000C00D4FFFC011602640086000500A00000
- stack 0: 0xF0
389	 B8	SHR		 	 
- stack 1: 0x458
- stack 0: 0xBA
390	 B9	JUMP		 	 
- stack 0: 0x458
391	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x458
392	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
393	 BC	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xBAFFFF00D4000C011602700116000C00D4FFFC011602640086000500A00000
394	 BD	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0xBAFFFF00D4000C011602700116000C00D4FFFC011602640086000500A00000
- stack 0: 0xE0
395	 BF	SHR		 	 
- stack 1: 0x458
- stack 0: 0xBAFFFF
396	 C0	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
397	 C3	AND		 	 
- stack 1: 0x458
- stack 0: 0xFFFF
398	 C4	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0xFFFF
- stack 0: 0x1
399	 C6	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
400	 C7	PUSH2	0040	 	 
- stack 2: 0x458
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
401	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x458
402	 CB	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
403	 CD	ADD		 	 
- stack 0: 0x45C
404	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
405	 CF	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C011602700116000C00D4FFFC011602640086000500A0000000BA0001
406	 D0	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C011602700116000C00D4FFFC011602640086000500A0000000BA0001
- stack 0: 0xF0
407	 D2	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xD4
408	 D3	JUMP		 	 
- stack 0: 0x45C
409	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x45C
410	 D5	PUSH2	0020	 	 
- stack 1: 0x45C
- stack 0: 0x20
411	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x45C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
412	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
413	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x45C
- stack 0: 0xFFFFFFFF
414	 DF	PUSH2	0040	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
415	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x45C
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
416	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x45C
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
417	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x45C
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
418	 E9	EQ		 	 
- stack 1: 0x45C
- stack 0: 0x1
419	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x45C
- stack 1: 0x1
- stack 0: 0xF2
420	 ED	JUMPI		 	 
- stack 0: 0x45C
421	 F2	JUMPDEST		 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x45C
422	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
423	 F4	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C011602700116000C00D4FFFC011602640086000500A0000000BA0001
424	 F5	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C011602700116000C00D4FFFC011602640086000500A0000000BA0001
- stack 0: 0xE0
425	 F7	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C
426	 F8	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
427	 FB	AND		 	 
- stack 1: 0x45C
- stack 0: 0xC
428	 FC	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0xC
- stack 0: 0x1
429	 FE	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0xC
430	 FF	ADD		 	 
- stack 0: 0x468
431	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFF
432	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x468
433	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
434	 107	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC011602640086000500A0000000BA000100D40008011600080116024C
435	 108	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC011602640086000500A0000000BA000100D40008011600080116024C
- stack 0: 0xF0
436	 10A	SHR		 	 
- stack 1: 0x468
- stack 0: 0xD4
437	 10B	JUMP		 	 
- stack 0: 0x468
438	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x468
439	 D5	PUSH2	0020	 	 
- stack 1: 0x468
- stack 0: 0x20
440	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
441	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
442	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x468
- stack 0: 0xFFFFFFFF
443	 DF	PUSH2	0040	 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
444	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x468
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
445	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x468
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
446	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x468
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
447	 E9	EQ		 	 
- stack 1: 0x468
- stack 0: 0x1
448	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x468
- stack 1: 0x1
- stack 0: 0xF2
449	 ED	JUMPI		 	 
- stack 0: 0x468
450	 F2	JUMPDEST		 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x468
451	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
452	 F4	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC011602640086000500A0000000BA000100D40008011600080116024C
453	 F5	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC011602640086000500A0000000BA000100D40008011600080116024C
- stack 0: 0xE0
454	 F7	SHR		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC
455	 F8	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
456	 FB	AND		 	 
- stack 1: 0x468
- stack 0: 0xFFFC
457	 FC	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0xFFFC
- stack 0: 0x1
458	 FE	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
459	 FF	ADD		 	 
- stack 0: 0x464
460	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x464
- stack 0: 0xFFFFFFFF
461	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x464
462	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
463	 107	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x116000C00D4FFFC011602640086000500A0000000BA000100D4000801160008
464	 108	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x116000C00D4FFFC011602640086000500A0000000BA000100D4000801160008
- stack 0: 0xF0
465	 10A	SHR		 	 
- stack 1: 0x464
- stack 0: 0x116
466	 10B	JUMP		 	 
- stack 0: 0x464
467	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x464
468	 117	PUSH1	00	 	 
- stack 1: 0x464
- stack 0: 0x0
469	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
470	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x464
- stack 0: 0x0
471	 11F	PUSH2	0380	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x380
472	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x4
473	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x464
- stack 2: 0x0
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
474	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x4
475	 129	SUB		 	 
- stack 1: 0x464
- stack 0: 0x4
476	 12A	PUSH2	0132	 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 2: 0x464
- stack 1: 0x4
- stack 0: 0x132
477	 12D	JUMPI		 	 
- stack 0: 0x464
478	 132	JUMPDEST		 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 0: 0x464
479	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
480	 134	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x116000C00D4FFFC011602640086000500A0000000BA000100D4000801160008
481	 135	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0x116000C00D4FFFC011602640086000500A0000000BA000100D4000801160008
- stack 0: 0xE0
482	 137	SHR		 	 
- stack 1: 0x464
- stack 0: 0x116000C
483	 138	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0x116000C
- stack 0: 0xFFFF
484	 13B	AND		 	 
- stack 1: 0x464
- stack 0: 0xC
485	 13C	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xC
- stack 0: 0x1
486	 13E	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xC
487	 13F	ADD		 	 
- stack 0: 0x470
488	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x470
- stack 0: 0xFFFFFFFF
489	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x470
490	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
491	 147	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x86000500A0000000BA000100D40008011600080116024C00D4FFFC00860006
492	 148	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x86000500A0000000BA000100D40008011600080116024C00D4FFFC00860006
- stack 0: 0xF0
493	 14A	SHR		 	 
- stack 1: 0x470
- stack 0: 0x86
494	 14B	JUMP		 	 
- stack 0: 0x470
495	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x470
496	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
497	 88	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x86000500A0000000BA000100D40008011600080116024C00D4FFFC00860006
498	 89	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x86000500A0000000BA000100D40008011600080116024C00D4FFFC00860006
- stack 0: 0xE0
499	 8B	SHR		 	 
- stack 1: 0x470
- stack 0: 0x860005
500	 8C	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x860005
- stack 0: 0xFFFF
501	 8F	AND		 	 
- stack 1: 0x470
- stack 0: 0x5
502	 90	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x1
503	 92	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0x5
504	 93	PUSH2	0380	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x380
505	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x470
506	 97	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
507	 99	ADD		 	 
- stack 0: 0x474
508	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
509	 9B	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000000BA000100D40008011600080116024C00D4FFFC0086000600A00001
510	 9C	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0xA0000000BA000100D40008011600080116024C00D4FFFC0086000600A00001
- stack 0: 0xF0
511	 9E	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA0
512	 9F	JUMP		 	 
- stack 0: 0x474
513	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x474
514	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
515	 A2	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000000BA000100D40008011600080116024C00D4FFFC0086000600A00001
516	 A3	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0xA0000000BA000100D40008011600080116024C00D4FFFC0086000600A00001
- stack 0: 0xE0
517	 A5	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA00000
518	 A6	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0xA00000
- stack 0: 0xFFFF
519	 A9	AND		 	 
- stack 1: 0x474
- stack 0: 0x0
520	 AA	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x0
- stack 0: 0x1
521	 AC	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x0
522	 AD	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0x0
- stack 0: 0x20
523	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x474
524	 B1	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
525	 B3	ADD		 	 
- stack 0: 0x478
526	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
527	 B5	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBA000100D40008011600080116024C00D4FFFC0086000600A0000100BA0000
528	 B6	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0xBA000100D40008011600080116024C00D4FFFC0086000600A0000100BA0000
- stack 0: 0xF0
529	 B8	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBA
530	 B9	JUMP		 	 
- stack 0: 0x478
531	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x478
532	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
533	 BC	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBA000100D40008011600080116024C00D4FFFC0086000600A0000100BA0000
534	 BD	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0xBA000100D40008011600080116024C00D4FFFC0086000600A0000100BA0000
- stack 0: 0xE0
535	 BF	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBA0001
536	 C0	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0xBA0001
- stack 0: 0xFFFF
537	 C3	AND		 	 
- stack 1: 0x478
- stack 0: 0x1
538	 C4	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0x1
- stack 0: 0x1
539	 C6	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0x1
540	 C7	PUSH2	0040	 	 
- stack 2: 0x478
- stack 1: 0x1
- stack 0: 0x40
541	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x478
542	 CB	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
543	 CD	ADD		 	 
- stack 0: 0x47C
544	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
545	 CF	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xD40008011600080116024C00D4FFFC0086000600A0000100BA000000D40008
546	 D0	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0xD40008011600080116024C00D4FFFC0086000600A0000100BA000000D40008
- stack 0: 0xF0
547	 D2	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xD4
548	 D3	JUMP		 	 
- stack 0: 0x47C
549	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x47C
550	 D5	PUSH2	0020	 	 
- stack 1: 0x47C
- stack 0: 0x20
551	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x47C
- stack 0: 0x0
552	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
553	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x47C
- stack 0: 0x0
554	 DF	PUSH2	0040	 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x40
555	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x1
556	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x47C
- stack 2: 0x0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
557	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x1
558	 E9	EQ		 	 
- stack 1: 0x47C
- stack 0: 0x0
559	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0xF2
560	 ED	JUMPI		 	 
- stack 0: 0x47C
561	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x47C
- stack 0: 0x10C
562	 F1	JUMP		 	 
- stack 0: 0x47C
563	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x47C
564	 10D	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
565	 10F	ADD		 	 
- stack 0: 0x480
566	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
567	 111	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x11600080116024C00D4FFFC0086000600A0000100BA000000D4000801160008
568	 112	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x11600080116024C00D4FFFC0086000600A0000100BA000000D4000801160008
- stack 0: 0xF0
569	 114	SHR		 	 
- stack 1: 0x480
- stack 0: 0x116
570	 115	JUMP		 	 
- stack 0: 0x480
571	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x480
572	 117	PUSH1	00	 	 
- stack 1: 0x480
- stack 0: 0x0
573	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
574	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x480
- stack 0: 0x0
575	 11F	PUSH2	0380	 	 
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0x380
576	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0x5
577	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x480
- stack 2: 0x0
- stack 1: 0x5
- stack 0: 0xFFFFFFFF
578	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0x5
579	 129	SUB		 	 
- stack 1: 0x480
- stack 0: 0x5
580	 12A	PUSH2	0132	 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 2: 0x480
- stack 1: 0x5
- stack 0: 0x132
581	 12D	JUMPI		 	 
- stack 0: 0x480
582	 132	JUMPDEST		 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 0: 0x480
583	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
584	 134	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x11600080116024C00D4FFFC0086000600A0000100BA000000D4000801160008
585	 135	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x11600080116024C00D4FFFC0086000600A0000100BA000000D4000801160008
- stack 0: 0xE0
586	 137	SHR		 	 
- stack 1: 0x480
- stack 0: 0x1160008
587	 138	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x1160008
- stack 0: 0xFFFF
588	 13B	AND		 	 
- stack 1: 0x480
- stack 0: 0x8
589	 13C	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0x8
- stack 0: 0x1
590	 13E	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x8
591	 13F	ADD		 	 
- stack 0: 0x488
592	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x488
- stack 0: 0xFFFFFFFF
593	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x488
594	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
595	 147	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xD4FFFC0086000600A0000100BA000000D40008011600080116023000D4FFFC
596	 148	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0xD4FFFC0086000600A0000100BA000000D40008011600080116023000D4FFFC
- stack 0: 0xF0
597	 14A	SHR		 	 
- stack 1: 0x488
- stack 0: 0xD4
598	 14B	JUMP		 	 
- stack 0: 0x488
599	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x488
600	 D5	PUSH2	0020	 	 
- stack 1: 0x488
- stack 0: 0x20
601	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x488
- stack 0: 0x0
602	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
603	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x488
- stack 0: 0x0
604	 DF	PUSH2	0040	 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x40
605	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x1
606	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x488
- stack 2: 0x0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
607	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x1
608	 E9	EQ		 	 
- stack 1: 0x488
- stack 0: 0x0
609	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0xF2
610	 ED	JUMPI		 	 
- stack 0: 0x488
611	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x488
- stack 0: 0x10C
612	 F1	JUMP		 	 
- stack 0: 0x488
613	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x488
614	 10D	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
615	 10F	ADD		 	 
- stack 0: 0x48C
616	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
617	 111	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x86000600A0000100BA000000D40008011600080116023000D4FFFC00860007
618	 112	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x86000600A0000100BA000000D40008011600080116023000D4FFFC00860007
- stack 0: 0xF0
619	 114	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x86
620	 115	JUMP		 	 
- stack 0: 0x48C
621	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x48C
622	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
623	 88	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x86000600A0000100BA000000D40008011600080116023000D4FFFC00860007
624	 89	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0x86000600A0000100BA000000D40008011600080116023000D4FFFC00860007
- stack 0: 0xE0
625	 8B	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x860006
626	 8C	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0x860006
- stack 0: 0xFFFF
627	 8F	AND		 	 
- stack 1: 0x48C
- stack 0: 0x6
628	 90	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0x6
- stack 0: 0x1
629	 92	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0x6
630	 93	PUSH2	0380	 	 
- stack 2: 0x48C
- stack 1: 0x6
- stack 0: 0x380
631	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x48C
632	 97	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
633	 99	ADD		 	 
- stack 0: 0x490
634	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
635	 9B	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xA0000100BA000000D40008011600080116023000D4FFFC0086000700A0FFFF
636	 9C	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xA0000100BA000000D40008011600080116023000D4FFFC0086000700A0FFFF
- stack 0: 0xF0
637	 9E	SHR		 	 
- stack 1: 0x490
- stack 0: 0xA0
638	 9F	JUMP		 	 
- stack 0: 0x490
639	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x490
640	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
641	 A2	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xA0000100BA000000D40008011600080116023000D4FFFC0086000700A0FFFF
642	 A3	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0xA0000100BA000000D40008011600080116023000D4FFFC0086000700A0FFFF
- stack 0: 0xE0
643	 A5	SHR		 	 
- stack 1: 0x490
- stack 0: 0xA00001
644	 A6	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0xA00001
- stack 0: 0xFFFF
645	 A9	AND		 	 
- stack 1: 0x490
- stack 0: 0x1
646	 AA	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0x1
- stack 0: 0x1
647	 AC	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0x1
648	 AD	PUSH2	0020	 	 
- stack 2: 0x490
- stack 1: 0x1
- stack 0: 0x20
649	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x490
650	 B1	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
651	 B3	ADD		 	 
- stack 0: 0x494
652	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
653	 B5	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xBA000000D40008011600080116023000D4FFFC0086000700A0FFFF00BA0001
654	 B6	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xBA000000D40008011600080116023000D4FFFC0086000700A0FFFF00BA0001
- stack 0: 0xF0
655	 B8	SHR		 	 
- stack 1: 0x494
- stack 0: 0xBA
656	 B9	JUMP		 	 
- stack 0: 0x494
657	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x494
658	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
659	 BC	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xBA000000D40008011600080116023000D4FFFC0086000700A0FFFF00BA0001
660	 BD	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0xBA000000D40008011600080116023000D4FFFC0086000700A0FFFF00BA0001
- stack 0: 0xE0
661	 BF	SHR		 	 
- stack 1: 0x494
- stack 0: 0xBA0000
662	 C0	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0xBA0000
- stack 0: 0xFFFF
663	 C3	AND		 	 
- stack 1: 0x494
- stack 0: 0x0
664	 C4	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x1
665	 C6	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x0
666	 C7	PUSH2	0040	 	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x40
667	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x494
668	 CB	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
669	 CD	ADD		 	 
- stack 0: 0x498
670	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
671	 CF	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xD40008011600080116023000D4FFFC0086000700A0FFFF00BA000100D40008
672	 D0	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xD40008011600080116023000D4FFFC0086000700A0FFFF00BA000100D40008
- stack 0: 0xF0
673	 D2	SHR		 	 
- stack 1: 0x498
- stack 0: 0xD4
674	 D3	JUMP		 	 
- stack 0: 0x498
675	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x498
676	 D5	PUSH2	0020	 	 
- stack 1: 0x498
- stack 0: 0x20
677	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x498
- stack 0: 0x1
678	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x498
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
679	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x498
- stack 0: 0x1
680	 DF	PUSH2	0040	 	 
- stack 2: 0x498
- stack 1: 0x1
- stack 0: 0x40
681	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x498
- stack 1: 0x1
- stack 0: 0x0
682	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x498
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
683	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x498
- stack 1: 0x1
- stack 0: 0x0
684	 E9	EQ		 	 
- stack 1: 0x498
- stack 0: 0x0
685	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0xF2
686	 ED	JUMPI		 	 
- stack 0: 0x498
687	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x498
- stack 0: 0x10C
688	 F1	JUMP		 	 
- stack 0: 0x498
689	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x498
690	 10D	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
691	 10F	ADD		 	 
- stack 0: 0x49C
692	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
693	 111	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x11600080116023000D4FFFC0086000700A0FFFF00BA000100D4000801160008
694	 112	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x11600080116023000D4FFFC0086000700A0FFFF00BA000100D4000801160008
- stack 0: 0xF0
695	 114	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x116
696	 115	JUMP		 	 
- stack 0: 0x49C
697	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x49C
698	 117	PUSH1	00	 	 
- stack 1: 0x49C
- stack 0: 0x0
699	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
700	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0x0
701	 11F	PUSH2	0380	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x380
702	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x6
703	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x49C
- stack 2: 0x0
- stack 1: 0x6
- stack 0: 0xFFFFFFFF
704	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x6
705	 129	SUB		 	 
- stack 1: 0x49C
- stack 0: 0x6
706	 12A	PUSH2	0132	 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 2: 0x49C
- stack 1: 0x6
- stack 0: 0x132
707	 12D	JUMPI		 	 
- stack 0: 0x49C
708	 132	JUMPDEST		 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 0: 0x49C
709	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x49C
- stack 0: 0x49C
710	 134	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x11600080116023000D4FFFC0086000700A0FFFF00BA000100D4000801160008
711	 135	PUSH1	E0	 	 
- stack 2: 0x49C
- stack 1: 0x11600080116023000D4FFFC0086000700A0FFFF00BA000100D4000801160008
- stack 0: 0xE0
712	 137	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x1160008
713	 138	PUSH2	FFFF	 	 
- stack 2: 0x49C
- stack 1: 0x1160008
- stack 0: 0xFFFF
714	 13B	AND		 	 
- stack 1: 0x49C
- stack 0: 0x8
715	 13C	PUSH1	01	 	 
- stack 2: 0x49C
- stack 1: 0x8
- stack 0: 0x1
716	 13E	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0x8
717	 13F	ADD		 	 
- stack 0: 0x4A4
718	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFF
719	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4A4
720	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
721	 147	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xD4FFFC0086000700A0FFFF00BA000100D40008011600080116021400D4FFFC
722	 148	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0xD4FFFC0086000700A0FFFF00BA000100D40008011600080116021400D4FFFC
- stack 0: 0xF0
723	 14A	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xD4
724	 14B	JUMP		 	 
- stack 0: 0x4A4
725	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x4A4
726	 D5	PUSH2	0020	 	 
- stack 1: 0x4A4
- stack 0: 0x20
727	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4A4
- stack 0: 0x1
728	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
729	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A4
- stack 0: 0x1
730	 DF	PUSH2	0040	 	 
- stack 2: 0x4A4
- stack 1: 0x1
- stack 0: 0x40
731	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4A4
- stack 1: 0x1
- stack 0: 0x0
732	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4A4
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
733	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4A4
- stack 1: 0x1
- stack 0: 0x0
734	 E9	EQ		 	 
- stack 1: 0x4A4
- stack 0: 0x0
735	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x4A4
- stack 1: 0x0
- stack 0: 0xF2
736	 ED	JUMPI		 	 
- stack 0: 0x4A4
737	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x4A4
- stack 0: 0x10C
738	 F1	JUMP		 	 
- stack 0: 0x4A4
739	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x4A4
740	 10D	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
741	 10F	ADD		 	 
- stack 0: 0x4A8
742	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
743	 111	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x86000700A0FFFF00BA000100D40008011600080116021400D4FFFC00860008
744	 112	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x86000700A0FFFF00BA000100D40008011600080116021400D4FFFC00860008
- stack 0: 0xF0
745	 114	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x86
746	 115	JUMP		 	 
- stack 0: 0x4A8
747	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4A8
748	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
749	 88	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x86000700A0FFFF00BA000100D40008011600080116021400D4FFFC00860008
750	 89	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0x86000700A0FFFF00BA000100D40008011600080116021400D4FFFC00860008
- stack 0: 0xE0
751	 8B	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x860007
752	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x860007
- stack 0: 0xFFFF
753	 8F	AND		 	 
- stack 1: 0x4A8
- stack 0: 0x7
754	 90	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0x7
- stack 0: 0x1
755	 92	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0x7
756	 93	PUSH2	0380	 	 
- stack 2: 0x4A8
- stack 1: 0x7
- stack 0: 0x380
757	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4A8
758	 97	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
759	 99	ADD		 	 
- stack 0: 0x4AC
760	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
761	 9B	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xA0FFFF00BA000100D40008011600080116021400D4FFFC0086000800A00001
762	 9C	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xA0FFFF00BA000100D40008011600080116021400D4FFFC0086000800A00001
- stack 0: 0xF0
763	 9E	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xA0
764	 9F	JUMP		 	 
- stack 0: 0x4AC
765	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4AC
766	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
767	 A2	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xA0FFFF00BA000100D40008011600080116021400D4FFFC0086000800A00001
768	 A3	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0xA0FFFF00BA000100D40008011600080116021400D4FFFC0086000800A00001
- stack 0: 0xE0
769	 A5	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xA0FFFF
770	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
771	 A9	AND		 	 
- stack 1: 0x4AC
- stack 0: 0xFFFF
772	 AA	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFF
- stack 0: 0x1
773	 AC	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
774	 AD	PUSH2	0020	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
775	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4AC
776	 B1	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
777	 B3	ADD		 	 
- stack 0: 0x4B0
778	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
779	 B5	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xBA000100D40008011600080116021400D4FFFC0086000800A0000100BAFFFF
780	 B6	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0xBA000100D40008011600080116021400D4FFFC0086000800A0000100BAFFFF
- stack 0: 0xF0
781	 B8	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xBA
782	 B9	JUMP		 	 
- stack 0: 0x4B0
783	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4B0
784	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
785	 BC	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xBA000100D40008011600080116021400D4FFFC0086000800A0000100BAFFFF
786	 BD	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0xBA000100D40008011600080116021400D4FFFC0086000800A0000100BAFFFF
- stack 0: 0xE0
787	 BF	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xBA0001
788	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0xBA0001
- stack 0: 0xFFFF
789	 C3	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x1
790	 C4	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x1
- stack 0: 0x1
791	 C6	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x1
792	 C7	PUSH2	0040	 	 
- stack 2: 0x4B0
- stack 1: 0x1
- stack 0: 0x40
793	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4B0
794	 CB	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
795	 CD	ADD		 	 
- stack 0: 0x4B4
796	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
797	 CF	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0xD40008011600080116021400D4FFFC0086000800A0000100BAFFFF00D40008
798	 D0	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0xD40008011600080116021400D4FFFC0086000800A0000100BAFFFF00D40008
- stack 0: 0xF0
799	 D2	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0xD4
800	 D3	JUMP		 	 
- stack 0: 0x4B4
801	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x4B4
802	 D5	PUSH2	0020	 	 
- stack 1: 0x4B4
- stack 0: 0x20
803	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
804	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
805	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFF
806	 DF	PUSH2	0040	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
807	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFF
- stack 0: 0x1
808	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B4
- stack 2: 0xFFFFFFFF
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
809	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFF
- stack 0: 0x1
810	 E9	EQ		 	 
- stack 1: 0x4B4
- stack 0: 0x0
811	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x4B4
- stack 1: 0x0
- stack 0: 0xF2
812	 ED	JUMPI		 	 
- stack 0: 0x4B4
813	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x4B4
- stack 0: 0x10C
814	 F1	JUMP		 	 
- stack 0: 0x4B4
815	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x4B4
816	 10D	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
817	 10F	ADD		 	 
- stack 0: 0x4B8
818	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
819	 111	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x11600080116021400D4FFFC0086000800A0000100BAFFFF00D4000801160008
820	 112	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x11600080116021400D4FFFC0086000800A0000100BAFFFF00D4000801160008
- stack 0: 0xF0
821	 114	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x116
822	 115	JUMP		 	 
- stack 0: 0x4B8
823	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x4B8
824	 117	PUSH1	00	 	 
- stack 1: 0x4B8
- stack 0: 0x0
825	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
826	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B8
- stack 0: 0x0
827	 11F	PUSH2	0380	 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x380
828	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x7
829	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B8
- stack 2: 0x0
- stack 1: 0x7
- stack 0: 0xFFFFFFFF
830	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x7
831	 129	SUB		 	 
- stack 1: 0x4B8
- stack 0: 0x7
832	 12A	PUSH2	0132	 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 2: 0x4B8
- stack 1: 0x7
- stack 0: 0x132
833	 12D	JUMPI		 	 
- stack 0: 0x4B8
834	 132	JUMPDEST		 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 0: 0x4B8
835	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
836	 134	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x11600080116021400D4FFFC0086000800A0000100BAFFFF00D4000801160008
837	 135	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0x11600080116021400D4FFFC0086000800A0000100BAFFFF00D4000801160008
- stack 0: 0xE0
838	 137	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x1160008
839	 138	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x1160008
- stack 0: 0xFFFF
840	 13B	AND		 	 
- stack 1: 0x4B8
- stack 0: 0x8
841	 13C	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0x8
- stack 0: 0x1
842	 13E	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0x8
843	 13F	ADD		 	 
- stack 0: 0x4C0
844	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFF
845	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4C0
846	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
847	 147	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xD4FFFC0086000800A0000100BAFFFF00D4000801160008011601F800D4FFFC
848	 148	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0xD4FFFC0086000800A0000100BAFFFF00D4000801160008011601F800D4FFFC
- stack 0: 0xF0
849	 14A	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xD4
850	 14B	JUMP		 	 
- stack 0: 0x4C0
851	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x4C0
852	 D5	PUSH2	0020	 	 
- stack 1: 0x4C0
- stack 0: 0x20
853	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
854	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
855	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFF
856	 DF	PUSH2	0040	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
857	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFF
- stack 0: 0x1
858	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C0
- stack 2: 0xFFFFFFFF
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
859	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFF
- stack 0: 0x1
860	 E9	EQ		 	 
- stack 1: 0x4C0
- stack 0: 0x0
861	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x4C0
- stack 1: 0x0
- stack 0: 0xF2
862	 ED	JUMPI		 	 
- stack 0: 0x4C0
863	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x4C0
- stack 0: 0x10C
864	 F1	JUMP		 	 
- stack 0: 0x4C0
865	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x4C0
866	 10D	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
867	 10F	ADD		 	 
- stack 0: 0x4C4
868	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
869	 111	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x86000800A0000100BAFFFF00D4000801160008011601F800D4FFFC00860009
870	 112	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x86000800A0000100BAFFFF00D4000801160008011601F800D4FFFC00860009
- stack 0: 0xF0
871	 114	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x86
872	 115	JUMP		 	 
- stack 0: 0x4C4
873	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C4
874	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
875	 88	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x86000800A0000100BAFFFF00D4000801160008011601F800D4FFFC00860009
876	 89	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0x86000800A0000100BAFFFF00D4000801160008011601F800D4FFFC00860009
- stack 0: 0xE0
877	 8B	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x860008
878	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x860008
- stack 0: 0xFFFF
879	 8F	AND		 	 
- stack 1: 0x4C4
- stack 0: 0x8
880	 90	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0x8
- stack 0: 0x1
881	 92	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0x8
882	 93	PUSH2	0380	 	 
- stack 2: 0x4C4
- stack 1: 0x8
- stack 0: 0x380
883	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C4
884	 97	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
885	 99	ADD		 	 
- stack 0: 0x4C8
886	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
887	 9B	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xA0000100BAFFFF00D4000801160008011601F800D4FFFC0086000901560000
888	 9C	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0xA0000100BAFFFF00D4000801160008011601F800D4FFFC0086000901560000
- stack 0: 0xF0
889	 9E	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xA0
890	 9F	JUMP		 	 
- stack 0: 0x4C8
891	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4C8
892	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
893	 A2	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xA0000100BAFFFF00D4000801160008011601F800D4FFFC0086000901560000
894	 A3	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0xA0000100BAFFFF00D4000801160008011601F800D4FFFC0086000901560000
- stack 0: 0xE0
895	 A5	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xA00001
896	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0xA00001
- stack 0: 0xFFFF
897	 A9	AND		 	 
- stack 1: 0x4C8
- stack 0: 0x1
898	 AA	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0x1
- stack 0: 0x1
899	 AC	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0x1
900	 AD	PUSH2	0020	 	 
- stack 2: 0x4C8
- stack 1: 0x1
- stack 0: 0x20
901	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C8
902	 B1	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
903	 B3	ADD		 	 
- stack 0: 0x4CC
904	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
905	 B5	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xBAFFFF00D4000801160008011601F800D4FFFC008600090156000000A00000
906	 B6	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0xBAFFFF00D4000801160008011601F800D4FFFC008600090156000000A00000
- stack 0: 0xF0
907	 B8	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xBA
908	 B9	JUMP		 	 
- stack 0: 0x4CC
909	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4CC
910	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
911	 BC	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xBAFFFF00D4000801160008011601F800D4FFFC008600090156000000A00000
912	 BD	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0xBAFFFF00D4000801160008011601F800D4FFFC008600090156000000A00000
- stack 0: 0xE0
913	 BF	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xBAFFFF
914	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
915	 C3	AND		 	 
- stack 1: 0x4CC
- stack 0: 0xFFFF
916	 C4	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0xFFFF
- stack 0: 0x1
917	 C6	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
918	 C7	PUSH2	0040	 	 
- stack 2: 0x4CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
919	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4CC
920	 CB	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
921	 CD	ADD		 	 
- stack 0: 0x4D0
922	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
923	 CF	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0xD4000801160008011601F800D4FFFC008600090156000000A0000000BAFFFF
924	 D0	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0xD4000801160008011601F800D4FFFC008600090156000000A0000000BAFFFF
- stack 0: 0xF0
925	 D2	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0xD4
926	 D3	JUMP		 	 
- stack 0: 0x4D0
927	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x4D0
928	 D5	PUSH2	0020	 	 
- stack 1: 0x4D0
- stack 0: 0x20
929	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4D0
- stack 0: 0x1
930	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
931	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D0
- stack 0: 0x1
932	 DF	PUSH2	0040	 	 
- stack 2: 0x4D0
- stack 1: 0x1
- stack 0: 0x40
933	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4D0
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
934	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D0
- stack 2: 0x1
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
935	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
936	 E9	EQ		 	 
- stack 1: 0x4D0
- stack 0: 0x0
937	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x4D0
- stack 1: 0x0
- stack 0: 0xF2
938	 ED	JUMPI		 	 
- stack 0: 0x4D0
939	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x4D0
- stack 0: 0x10C
940	 F1	JUMP		 	 
- stack 0: 0x4D0
941	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x4D0
942	 10D	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
943	 10F	ADD		 	 
- stack 0: 0x4D4
944	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
945	 111	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x1160008011601F800D4FFFC008600090156000000A0000000BAFFFF00D401E0
946	 112	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x1160008011601F800D4FFFC008600090156000000A0000000BAFFFF00D401E0
- stack 0: 0xF0
947	 114	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x116
948	 115	JUMP		 	 
- stack 0: 0x4D4
949	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x4D4
950	 117	PUSH1	00	 	 
- stack 1: 0x4D4
- stack 0: 0x0
951	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
952	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D4
- stack 0: 0x0
953	 11F	PUSH2	0380	 	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x380
954	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x8
955	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D4
- stack 2: 0x0
- stack 1: 0x8
- stack 0: 0xFFFFFFFF
956	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x8
957	 129	SUB		 	 
- stack 1: 0x4D4
- stack 0: 0x8
958	 12A	PUSH2	0132	 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 2: 0x4D4
- stack 1: 0x8
- stack 0: 0x132
959	 12D	JUMPI		 	 
- stack 0: 0x4D4
960	 132	JUMPDEST		 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 0: 0x4D4
961	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
962	 134	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x1160008011601F800D4FFFC008600090156000000A0000000BAFFFF00D401E0
963	 135	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0x1160008011601F800D4FFFC008600090156000000A0000000BAFFFF00D401E0
- stack 0: 0xE0
964	 137	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x1160008
965	 138	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x1160008
- stack 0: 0xFFFF
966	 13B	AND		 	 
- stack 1: 0x4D4
- stack 0: 0x8
967	 13C	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0x8
- stack 0: 0x1
968	 13E	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0x8
969	 13F	ADD		 	 
- stack 0: 0x4DC
970	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4DC
- stack 0: 0xFFFFFFFF
971	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4DC
972	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
973	 147	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xD4FFFC008600090156000000A0000000BAFFFF00D401E001700001018F0002
974	 148	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0xD4FFFC008600090156000000A0000000BAFFFF00D401E001700001018F0002
- stack 0: 0xF0
975	 14A	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xD4
976	 14B	JUMP		 	 
- stack 0: 0x4DC
977	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x4DC
978	 D5	PUSH2	0020	 	 
- stack 1: 0x4DC
- stack 0: 0x20
979	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4DC
- stack 0: 0x1
980	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
981	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4DC
- stack 0: 0x1
982	 DF	PUSH2	0040	 	 
- stack 2: 0x4DC
- stack 1: 0x1
- stack 0: 0x40
983	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4DC
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
984	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4DC
- stack 2: 0x1
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
985	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4DC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
986	 E9	EQ		 	 
- stack 1: 0x4DC
- stack 0: 0x0
987	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0xF2
988	 ED	JUMPI		 	 
- stack 0: 0x4DC
989	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x4DC
- stack 0: 0x10C
990	 F1	JUMP		 	 
- stack 0: 0x4DC
991	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x4DC
992	 10D	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
993	 10F	ADD		 	 
- stack 0: 0x4E0
994	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
995	 111	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x8600090156000000A0000000BAFFFF00D401E001700001018F000201A9FFEC
996	 112	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x8600090156000000A0000000BAFFFF00D401E001700001018F000201A9FFEC
- stack 0: 0xF0
997	 114	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x86
998	 115	JUMP		 	 
- stack 0: 0x4E0
999	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E0
1000	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1001	 88	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x8600090156000000A0000000BAFFFF00D401E001700001018F000201A9FFEC
1002	 89	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0x8600090156000000A0000000BAFFFF00D401E001700001018F000201A9FFEC
- stack 0: 0xE0
1003	 8B	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x860009
1004	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x860009
- stack 0: 0xFFFF
1005	 8F	AND		 	 
- stack 1: 0x4E0
- stack 0: 0x9
1006	 90	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0x9
- stack 0: 0x1
1007	 92	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0x9
1008	 93	PUSH2	0380	 	 
- stack 2: 0x4E0
- stack 1: 0x9
- stack 0: 0x380
1009	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E0
1010	 97	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1011	 99	ADD		 	 
- stack 0: 0x4E4
1012	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1013	 9B	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x156000000A0000000BAFFFF00D401E001700001018F000201A9FFEC0086000A
1014	 9C	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x156000000A0000000BAFFFF00D401E001700001018F000201A9FFEC0086000A
- stack 0: 0xF0
1015	 9E	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x156
1016	 9F	JUMP		 	 
- stack 0: 0x4E4
1017	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x4E4
1018	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1019	 158	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x156000000A0000000BAFFFF00D401E001700001018F000201A9FFEC0086000A
1020	 159	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0x156000000A0000000BAFFFF00D401E001700001018F000201A9FFEC0086000A
- stack 0: 0xE0
1021	 15B	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x1560000
1022	 15C	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x1560000
- stack 0: 0xFFFF
1023	 15F	AND		 	 
- stack 1: 0x4E4
- stack 0: 0x0
1024	 160	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0x0
- stack 0: 0x1
1025	 162	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0x0
1026	 163	PUSH2	0080	 	 
- stack 2: 0x4E4
- stack 1: 0x0
- stack 0: 0x80
1027	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x4E4
1028	 167	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1029	 169	ADD		 	 
- stack 0: 0x4E8
1030	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1031	 16B	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xA0000000BAFFFF00D401E001700001018F000201A9FFEC0086000A01560000
1032	 16C	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0xA0000000BAFFFF00D401E001700001018F000201A9FFEC0086000A01560000
- stack 0: 0xF0
1033	 16E	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xA0
1034	 16F	JUMP		 	 
- stack 0: 0x4E8
1035	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4E8
1036	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1037	 A2	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xA0000000BAFFFF00D401E001700001018F000201A9FFEC0086000A01560000
1038	 A3	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0xA0000000BAFFFF00D401E001700001018F000201A9FFEC0086000A01560000
- stack 0: 0xE0
1039	 A5	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xA00000
1040	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0xA00000
- stack 0: 0xFFFF
1041	 A9	AND		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1042	 AA	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x1
1043	 AC	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1044	 AD	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x20
1045	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E8
1046	 B1	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1047	 B3	ADD		 	 
- stack 0: 0x4EC
1048	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1049	 B5	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xBAFFFF00D401E001700001018F000201A9FFEC0086000A0156000000A00000
1050	 B6	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0xBAFFFF00D401E001700001018F000201A9FFEC0086000A0156000000A00000
- stack 0: 0xF0
1051	 B8	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xBA
1052	 B9	JUMP		 	 
- stack 0: 0x4EC
1053	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4EC
1054	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1055	 BC	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xBAFFFF00D401E001700001018F000201A9FFEC0086000A0156000000A00000
1056	 BD	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0xBAFFFF00D401E001700001018F000201A9FFEC0086000A0156000000A00000
- stack 0: 0xE0
1057	 BF	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xBAFFFF
1058	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
1059	 C3	AND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFF
1060	 C4	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFF
- stack 0: 0x1
1061	 C6	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1062	 C7	PUSH2	0040	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1063	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4EC
1064	 CB	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1065	 CD	ADD		 	 
- stack 0: 0x4F0
1066	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1067	 CF	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xD401E001700001018F000201A9FFEC0086000A0156000000A0000000BAFFFF
1068	 D0	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xD401E001700001018F000201A9FFEC0086000A0156000000A0000000BAFFFF
- stack 0: 0xF0
1069	 D2	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xD4
1070	 D3	JUMP		 	 
- stack 0: 0x4F0
1071	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x4F0
1072	 D5	PUSH2	0020	 	 
- stack 1: 0x4F0
- stack 0: 0x20
1073	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4F0
- stack 0: 0x0
1074	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1075	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F0
- stack 0: 0x0
1076	 DF	PUSH2	0040	 	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0x40
1077	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1078	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4F0
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1079	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1080	 E9	EQ		 	 
- stack 1: 0x4F0
- stack 0: 0x0
1081	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0xF2
1082	 ED	JUMPI		 	 
- stack 0: 0x4F0
1083	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x4F0
- stack 0: 0x10C
1084	 F1	JUMP		 	 
- stack 0: 0x4F0
1085	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x4F0
1086	 10D	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1087	 10F	ADD		 	 
- stack 0: 0x4F4
1088	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1089	 111	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB0000
1090	 112	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB0000
- stack 0: 0xF0
1091	 114	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x170
1092	 115	JUMP		 	 
- stack 0: 0x4F4
1093	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4F4
1094	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1095	 172	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB0000
1096	 173	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB0000
- stack 0: 0xE0
1097	 175	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x1700001
1098	 176	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x1700001
- stack 0: 0xFFFF
1099	 179	AND		 	 
- stack 1: 0x4F4
- stack 0: 0x1
1100	 17A	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x1
1101	 17C	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0x1
1102	 17D	PUSH2	0080	 	 
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x80
1103	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x0
1104	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x4F4
- stack 0: 0x1
1105	 182	PUSH2	0080	 	 
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x80
1106	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x4F4
1107	 186	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1108	 188	ADD		 	 
- stack 0: 0x4F8
1109	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1110	 18A	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x18F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB000000D401BC
1111	 18B	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x18F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB000000D401BC
- stack 0: 0xF0
1112	 18D	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x18F
1113	 18E	JUMP		 	 
- stack 0: 0x4F8
1114	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4F8
1115	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1116	 191	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x18F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB000000D401BC
1117	 192	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x18F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB000000D401BC
- stack 0: 0xE0
1118	 194	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x18F0002
1119	 195	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x18F0002
- stack 0: 0xFFFF
1120	 198	AND		 	 
- stack 1: 0x4F8
- stack 0: 0x2
1121	 199	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x2
- stack 0: 0x1
1122	 19B	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x2
1123	 19C	PUSH2	00A0	 	 
- stack 2: 0x4F8
- stack 1: 0x2
- stack 0: 0xA0
1124	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x4F8
1125	 1A0	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1126	 1A2	ADD		 	 
- stack 0: 0x4FC
1127	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1128	 1A4	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1A9FFEC0086000A0156000000A0000000BAFFFF01EB000000D401BC01700001
1129	 1A5	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x1A9FFEC0086000A0156000000A0000000BAFFFF01EB000000D401BC01700001
- stack 0: 0xF0
1130	 1A7	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1A9
1131	 1A8	JUMP		 	 
- stack 0: 0x4FC
1132	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x4FC
1133	 1AA	PUSH2	0080	 	 
- stack 1: 0x4FC
- stack 0: 0x80
1134	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x4FC
- stack 0: 0x1
1135	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1136	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0x1
1137	 1B4	PUSH2	00A0	 	 
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0xA0
1138	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x2
1139	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4FC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1140	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x2
1141	 1BE	SUB		 	 
- stack 1: 0x4FC
- stack 0: 0x1
1142	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x1C7
1143	 1C2	JUMPI		 	 
- stack 0: 0x4FC
1144	 1C7	JUMPDEST		 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x4FC
1145	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1146	 1C9	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1A9FFEC0086000A0156000000A0000000BAFFFF01EB000000D401BC01700001
1147	 1CA	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x1A9FFEC0086000A0156000000A0000000BAFFFF01EB000000D401BC01700001
- stack 0: 0xE0
1148	 1CC	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1A9FFEC
1149	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x1A9FFEC
- stack 0: 0xFFFF
1150	 1D0	AND		 	 
- stack 1: 0x4FC
- stack 0: 0xFFEC
1151	 1D1	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0xFFEC
- stack 0: 0x1
1152	 1D3	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
1153	 1D4	ADD		 	 
- stack 0: 0x4E8
1154	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4E8
- stack 0: 0xFFFFFFFF
1155	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4E8
1156	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1157	 1DC	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xA0000000BAFFFF00D401E001700001018F000201A9FFEC0086000A01560000
1158	 1DD	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0xA0000000BAFFFF00D401E001700001018F000201A9FFEC0086000A01560000
- stack 0: 0xF0
1159	 1DF	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xA0
1160	 1E0	JUMP		 	 
- stack 0: 0x4E8
1161	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4E8
1162	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1163	 A2	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xA0000000BAFFFF00D401E001700001018F000201A9FFEC0086000A01560000
1164	 A3	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0xA0000000BAFFFF00D401E001700001018F000201A9FFEC0086000A01560000
- stack 0: 0xE0
1165	 A5	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xA00000
1166	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0xA00000
- stack 0: 0xFFFF
1167	 A9	AND		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1168	 AA	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x1
1169	 AC	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1170	 AD	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x20
1171	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E8
1172	 B1	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1173	 B3	ADD		 	 
- stack 0: 0x4EC
1174	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1175	 B5	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xBAFFFF00D401E001700001018F000201A9FFEC0086000A0156000000A00000
1176	 B6	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0xBAFFFF00D401E001700001018F000201A9FFEC0086000A0156000000A00000
- stack 0: 0xF0
1177	 B8	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xBA
1178	 B9	JUMP		 	 
- stack 0: 0x4EC
1179	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4EC
1180	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1181	 BC	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xBAFFFF00D401E001700001018F000201A9FFEC0086000A0156000000A00000
1182	 BD	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0xBAFFFF00D401E001700001018F000201A9FFEC0086000A0156000000A00000
- stack 0: 0xE0
1183	 BF	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xBAFFFF
1184	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
1185	 C3	AND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFF
1186	 C4	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFF
- stack 0: 0x1
1187	 C6	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1188	 C7	PUSH2	0040	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1189	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4EC
1190	 CB	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1191	 CD	ADD		 	 
- stack 0: 0x4F0
1192	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1193	 CF	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xD401E001700001018F000201A9FFEC0086000A0156000000A0000000BAFFFF
1194	 D0	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xD401E001700001018F000201A9FFEC0086000A0156000000A0000000BAFFFF
- stack 0: 0xF0
1195	 D2	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xD4
1196	 D3	JUMP		 	 
- stack 0: 0x4F0
1197	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x4F0
1198	 D5	PUSH2	0020	 	 
- stack 1: 0x4F0
- stack 0: 0x20
1199	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4F0
- stack 0: 0x0
1200	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1201	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F0
- stack 0: 0x0
1202	 DF	PUSH2	0040	 	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0x40
1203	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1204	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4F0
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1205	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1206	 E9	EQ		 	 
- stack 1: 0x4F0
- stack 0: 0x0
1207	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0xF2
1208	 ED	JUMPI		 	 
- stack 0: 0x4F0
1209	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x4F0
- stack 0: 0x10C
1210	 F1	JUMP		 	 
- stack 0: 0x4F0
1211	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x4F0
1212	 10D	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1213	 10F	ADD		 	 
- stack 0: 0x4F4
1214	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1215	 111	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB0000
1216	 112	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB0000
- stack 0: 0xF0
1217	 114	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x170
1218	 115	JUMP		 	 
- stack 0: 0x4F4
1219	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4F4
1220	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1221	 172	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB0000
1222	 173	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB0000
- stack 0: 0xE0
1223	 175	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x1700001
1224	 176	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x1700001
- stack 0: 0xFFFF
1225	 179	AND		 	 
- stack 1: 0x4F4
- stack 0: 0x1
1226	 17A	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x1
1227	 17C	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0x1
1228	 17D	PUSH2	0080	 	 
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x80
1229	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x1
1230	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x4F4
- stack 0: 0x2
1231	 182	PUSH2	0080	 	 
- stack 2: 0x4F4
- stack 1: 0x2
- stack 0: 0x80
1232	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x4F4
1233	 186	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1234	 188	ADD		 	 
- stack 0: 0x4F8
1235	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1236	 18A	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x18F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB000000D401BC
1237	 18B	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x18F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB000000D401BC
- stack 0: 0xF0
1238	 18D	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x18F
1239	 18E	JUMP		 	 
- stack 0: 0x4F8
1240	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4F8
1241	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1242	 191	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x18F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB000000D401BC
1243	 192	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x18F000201A9FFEC0086000A0156000000A0000000BAFFFF01EB000000D401BC
- stack 0: 0xE0
1244	 194	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x18F0002
1245	 195	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x18F0002
- stack 0: 0xFFFF
1246	 198	AND		 	 
- stack 1: 0x4F8
- stack 0: 0x2
1247	 199	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x2
- stack 0: 0x1
1248	 19B	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x2
1249	 19C	PUSH2	00A0	 	 
- stack 2: 0x4F8
- stack 1: 0x2
- stack 0: 0xA0
1250	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x4F8
1251	 1A0	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1252	 1A2	ADD		 	 
- stack 0: 0x4FC
1253	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1254	 1A4	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1A9FFEC0086000A0156000000A0000000BAFFFF01EB000000D401BC01700001
1255	 1A5	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x1A9FFEC0086000A0156000000A0000000BAFFFF01EB000000D401BC01700001
- stack 0: 0xF0
1256	 1A7	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1A9
1257	 1A8	JUMP		 	 
- stack 0: 0x4FC
1258	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x4FC
1259	 1AA	PUSH2	0080	 	 
- stack 1: 0x4FC
- stack 0: 0x80
1260	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x4FC
- stack 0: 0x2
1261	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1262	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0x2
1263	 1B4	PUSH2	00A0	 	 
- stack 2: 0x4FC
- stack 1: 0x2
- stack 0: 0xA0
1264	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x4FC
- stack 1: 0x2
- stack 0: 0x2
1265	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4FC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1266	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4FC
- stack 1: 0x2
- stack 0: 0x2
1267	 1BE	SUB		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1268	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x1C7
1269	 1C2	JUMPI		 	 
- stack 0: 0x4FC
1270	 1C3	PUSH2	01E1	 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 1: 0x4FC
- stack 0: 0x1E1
1271	 1C6	JUMP		 	 
- stack 0: 0x4FC
1272	 1E1	JUMPDEST		 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x4FC
1273	 1E2	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1274	 1E4	ADD		 	 
- stack 0: 0x500
1275	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1276	 1E6	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x86000A0156000000A0000000BAFFFF01EB000000D401BC01700001018F0002
1277	 1E7	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x86000A0156000000A0000000BAFFFF01EB000000D401BC01700001018F0002
- stack 0: 0xF0
1278	 1E9	SHR		 	 
- stack 1: 0x500
- stack 0: 0x86
1279	 1EA	JUMP		 	 
- stack 0: 0x500
1280	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x500
1281	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1282	 88	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x86000A0156000000A0000000BAFFFF01EB000000D401BC01700001018F0002
1283	 89	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x86000A0156000000A0000000BAFFFF01EB000000D401BC01700001018F0002
- stack 0: 0xE0
1284	 8B	SHR		 	 
- stack 1: 0x500
- stack 0: 0x86000A
1285	 8C	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x86000A
- stack 0: 0xFFFF
1286	 8F	AND		 	 
- stack 1: 0x500
- stack 0: 0xA
1287	 90	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0xA
- stack 0: 0x1
1288	 92	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0xA
1289	 93	PUSH2	0380	 	 
- stack 2: 0x500
- stack 1: 0xA
- stack 0: 0x380
1290	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x500
1291	 97	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1292	 99	ADD		 	 
- stack 0: 0x504
1293	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1294	 9B	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x156000000A0000000BAFFFF01EB000000D401BC01700001018F000201A9FFE8
1295	 9C	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x156000000A0000000BAFFFF01EB000000D401BC01700001018F000201A9FFE8
- stack 0: 0xF0
1296	 9E	SHR		 	 
- stack 1: 0x504
- stack 0: 0x156
1297	 9F	JUMP		 	 
- stack 0: 0x504
1298	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x504
1299	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1300	 158	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x156000000A0000000BAFFFF01EB000000D401BC01700001018F000201A9FFE8
1301	 159	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x156000000A0000000BAFFFF01EB000000D401BC01700001018F000201A9FFE8
- stack 0: 0xE0
1302	 15B	SHR		 	 
- stack 1: 0x504
- stack 0: 0x1560000
1303	 15C	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x1560000
- stack 0: 0xFFFF
1304	 15F	AND		 	 
- stack 1: 0x504
- stack 0: 0x0
1305	 160	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x1
1306	 162	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0x0
1307	 163	PUSH2	0080	 	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x80
1308	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x504
1309	 167	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1310	 169	ADD		 	 
- stack 0: 0x508
1311	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1312	 16B	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xA0000000BAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B
1313	 16C	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xA0000000BAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B
- stack 0: 0xF0
1314	 16E	SHR		 	 
- stack 1: 0x508
- stack 0: 0xA0
1315	 16F	JUMP		 	 
- stack 0: 0x508
1316	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x508
1317	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1318	 A2	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xA0000000BAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B
1319	 A3	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0xA0000000BAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B
- stack 0: 0xE0
1320	 A5	SHR		 	 
- stack 1: 0x508
- stack 0: 0xA00000
1321	 A6	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0xA00000
- stack 0: 0xFFFF
1322	 A9	AND		 	 
- stack 1: 0x508
- stack 0: 0x0
1323	 AA	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x1
1324	 AC	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0x0
1325	 AD	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x20
1326	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x508
1327	 B1	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1328	 B3	ADD		 	 
- stack 0: 0x50C
1329	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1330	 B5	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xBAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B01560000
1331	 B6	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xBAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B01560000
- stack 0: 0xF0
1332	 B8	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xBA
1333	 B9	JUMP		 	 
- stack 0: 0x50C
1334	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x50C
1335	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1336	 BC	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xBAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B01560000
1337	 BD	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0xBAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B01560000
- stack 0: 0xE0
1338	 BF	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xBAFFFF
1339	 C0	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
1340	 C3	AND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFF
1341	 C4	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xFFFF
- stack 0: 0x1
1342	 C6	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1343	 C7	PUSH2	0040	 	 
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1344	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x50C
1345	 CB	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1346	 CD	ADD		 	 
- stack 0: 0x510
1347	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1348	 CF	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
1349	 D0	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
- stack 0: 0xF0
1350	 D2	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1EB
1351	 D3	JUMP		 	 
- stack 0: 0x510
1352	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x510
1353	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1354	 1ED	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
1355	 1EE	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
- stack 0: 0xE0
1356	 1F0	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1EB0000
1357	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
1358	 1F4	AND		 	 
- stack 1: 0x510
- stack 0: 0x0
1359	 1F5	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x0
- stack 0: 0x1
1360	 1F7	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0x0
1361	 1F8	POP		 	 
- stack 0: 0x510
1362	 1F9	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1363	 1FB	ADD		 	 
- stack 0: 0x514
1364	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1365	 1FD	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xD401BC01700001018F000201A9FFE80086000B0156000000A0000000BAFFFF
1366	 1FE	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xD401BC01700001018F000201A9FFE80086000B0156000000A0000000BAFFFF
- stack 0: 0xF0
1367	 200	SHR		 	 
- stack 1: 0x514
- stack 0: 0xD4
1368	 201	JUMP		 	 
- stack 0: 0x514
1369	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x514
1370	 D5	PUSH2	0020	 	 
- stack 1: 0x514
- stack 0: 0x20
1371	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x514
- stack 0: 0x0
1372	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1373	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x514
- stack 0: 0x0
1374	 DF	PUSH2	0040	 	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0x40
1375	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1376	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x514
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1377	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1378	 E9	EQ		 	 
- stack 1: 0x514
- stack 0: 0x0
1379	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0xF2
1380	 ED	JUMPI		 	 
- stack 0: 0x514
1381	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x514
- stack 0: 0x10C
1382	 F1	JUMP		 	 
- stack 0: 0x514
1383	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x514
1384	 10D	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1385	 10F	ADD		 	 
- stack 0: 0x518
1386	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1387	 111	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x1700001018F000201A9FFE80086000B0156000000A0000000BAFFFF01EB0000
1388	 112	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x1700001018F000201A9FFE80086000B0156000000A0000000BAFFFF01EB0000
- stack 0: 0xF0
1389	 114	SHR		 	 
- stack 1: 0x518
- stack 0: 0x170
1390	 115	JUMP		 	 
- stack 0: 0x518
1391	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x518
1392	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1393	 172	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x1700001018F000201A9FFE80086000B0156000000A0000000BAFFFF01EB0000
1394	 173	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x1700001018F000201A9FFE80086000B0156000000A0000000BAFFFF01EB0000
- stack 0: 0xE0
1395	 175	SHR		 	 
- stack 1: 0x518
- stack 0: 0x1700001
1396	 176	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x1700001
- stack 0: 0xFFFF
1397	 179	AND		 	 
- stack 1: 0x518
- stack 0: 0x1
1398	 17A	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x1
1399	 17C	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x1
1400	 17D	PUSH2	0080	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x80
1401	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x0
1402	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x518
- stack 0: 0x1
1403	 182	PUSH2	0080	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x80
1404	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x518
1405	 186	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1406	 188	ADD		 	 
- stack 0: 0x51C
1407	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1408	 18A	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x18F000201A9FFE80086000B0156000000A0000000BAFFFF01EB000001EB0000
1409	 18B	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x18F000201A9FFE80086000B0156000000A0000000BAFFFF01EB000001EB0000
- stack 0: 0xF0
1410	 18D	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x18F
1411	 18E	JUMP		 	 
- stack 0: 0x51C
1412	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x51C
1413	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1414	 191	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x18F000201A9FFE80086000B0156000000A0000000BAFFFF01EB000001EB0000
1415	 192	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x18F000201A9FFE80086000B0156000000A0000000BAFFFF01EB000001EB0000
- stack 0: 0xE0
1416	 194	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x18F0002
1417	 195	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x18F0002
- stack 0: 0xFFFF
1418	 198	AND		 	 
- stack 1: 0x51C
- stack 0: 0x2
1419	 199	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0x1
1420	 19B	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x2
1421	 19C	PUSH2	00A0	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0xA0
1422	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x51C
1423	 1A0	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1424	 1A2	ADD		 	 
- stack 0: 0x520
1425	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1426	 1A4	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x1A9FFE80086000B0156000000A0000000BAFFFF01EB000001EB000000D40194
1427	 1A5	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x1A9FFE80086000B0156000000A0000000BAFFFF01EB000001EB000000D40194
- stack 0: 0xF0
1428	 1A7	SHR		 	 
- stack 1: 0x520
- stack 0: 0x1A9
1429	 1A8	JUMP		 	 
- stack 0: 0x520
1430	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x520
1431	 1AA	PUSH2	0080	 	 
- stack 1: 0x520
- stack 0: 0x80
1432	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x520
- stack 0: 0x1
1433	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1434	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x520
- stack 0: 0x1
1435	 1B4	PUSH2	00A0	 	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0xA0
1436	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x2
1437	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x520
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1438	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x2
1439	 1BE	SUB		 	 
- stack 1: 0x520
- stack 0: 0x1
1440	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x1C7
1441	 1C2	JUMPI		 	 
- stack 0: 0x520
1442	 1C7	JUMPDEST		 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x520
1443	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1444	 1C9	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x1A9FFE80086000B0156000000A0000000BAFFFF01EB000001EB000000D40194
1445	 1CA	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x1A9FFE80086000B0156000000A0000000BAFFFF01EB000001EB000000D40194
- stack 0: 0xE0
1446	 1CC	SHR		 	 
- stack 1: 0x520
- stack 0: 0x1A9FFE8
1447	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x1A9FFE8
- stack 0: 0xFFFF
1448	 1D0	AND		 	 
- stack 1: 0x520
- stack 0: 0xFFE8
1449	 1D1	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0xFFE8
- stack 0: 0x1
1450	 1D3	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
1451	 1D4	ADD		 	 
- stack 0: 0x508
1452	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x508
- stack 0: 0xFFFFFFFF
1453	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x508
1454	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1455	 1DC	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xA0000000BAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B
1456	 1DD	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xA0000000BAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B
- stack 0: 0xF0
1457	 1DF	SHR		 	 
- stack 1: 0x508
- stack 0: 0xA0
1458	 1E0	JUMP		 	 
- stack 0: 0x508
1459	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x508
1460	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1461	 A2	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xA0000000BAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B
1462	 A3	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0xA0000000BAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B
- stack 0: 0xE0
1463	 A5	SHR		 	 
- stack 1: 0x508
- stack 0: 0xA00000
1464	 A6	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0xA00000
- stack 0: 0xFFFF
1465	 A9	AND		 	 
- stack 1: 0x508
- stack 0: 0x0
1466	 AA	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x1
1467	 AC	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0x0
1468	 AD	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x20
1469	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x508
1470	 B1	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1471	 B3	ADD		 	 
- stack 0: 0x50C
1472	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1473	 B5	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xBAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B01560000
1474	 B6	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xBAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B01560000
- stack 0: 0xF0
1475	 B8	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xBA
1476	 B9	JUMP		 	 
- stack 0: 0x50C
1477	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x50C
1478	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1479	 BC	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xBAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B01560000
1480	 BD	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0xBAFFFF01EB000000D401BC01700001018F000201A9FFE80086000B01560000
- stack 0: 0xE0
1481	 BF	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xBAFFFF
1482	 C0	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
1483	 C3	AND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFF
1484	 C4	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xFFFF
- stack 0: 0x1
1485	 C6	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1486	 C7	PUSH2	0040	 	 
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1487	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x50C
1488	 CB	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1489	 CD	ADD		 	 
- stack 0: 0x510
1490	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1491	 CF	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
1492	 D0	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
- stack 0: 0xF0
1493	 D2	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1EB
1494	 D3	JUMP		 	 
- stack 0: 0x510
1495	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x510
1496	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1497	 1ED	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
1498	 1EE	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
- stack 0: 0xE0
1499	 1F0	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1EB0000
1500	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
1501	 1F4	AND		 	 
- stack 1: 0x510
- stack 0: 0x0
1502	 1F5	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x0
- stack 0: 0x1
1503	 1F7	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0x0
1504	 1F8	POP		 	 
- stack 0: 0x510
1505	 1F9	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1506	 1FB	ADD		 	 
- stack 0: 0x514
1507	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1508	 1FD	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xD401BC01700001018F000201A9FFE80086000B0156000000A0000000BAFFFF
1509	 1FE	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xD401BC01700001018F000201A9FFE80086000B0156000000A0000000BAFFFF
- stack 0: 0xF0
1510	 200	SHR		 	 
- stack 1: 0x514
- stack 0: 0xD4
1511	 201	JUMP		 	 
- stack 0: 0x514
1512	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x514
1513	 D5	PUSH2	0020	 	 
- stack 1: 0x514
- stack 0: 0x20
1514	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x514
- stack 0: 0x0
1515	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1516	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x514
- stack 0: 0x0
1517	 DF	PUSH2	0040	 	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0x40
1518	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1519	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x514
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1520	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1521	 E9	EQ		 	 
- stack 1: 0x514
- stack 0: 0x0
1522	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0xF2
1523	 ED	JUMPI		 	 
- stack 0: 0x514
1524	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x514
- stack 0: 0x10C
1525	 F1	JUMP		 	 
- stack 0: 0x514
1526	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x514
1527	 10D	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1528	 10F	ADD		 	 
- stack 0: 0x518
1529	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1530	 111	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x1700001018F000201A9FFE80086000B0156000000A0000000BAFFFF01EB0000
1531	 112	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x1700001018F000201A9FFE80086000B0156000000A0000000BAFFFF01EB0000
- stack 0: 0xF0
1532	 114	SHR		 	 
- stack 1: 0x518
- stack 0: 0x170
1533	 115	JUMP		 	 
- stack 0: 0x518
1534	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x518
1535	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1536	 172	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x1700001018F000201A9FFE80086000B0156000000A0000000BAFFFF01EB0000
1537	 173	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x1700001018F000201A9FFE80086000B0156000000A0000000BAFFFF01EB0000
- stack 0: 0xE0
1538	 175	SHR		 	 
- stack 1: 0x518
- stack 0: 0x1700001
1539	 176	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x1700001
- stack 0: 0xFFFF
1540	 179	AND		 	 
- stack 1: 0x518
- stack 0: 0x1
1541	 17A	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x1
1542	 17C	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x1
1543	 17D	PUSH2	0080	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x80
1544	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x1
1545	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x518
- stack 0: 0x2
1546	 182	PUSH2	0080	 	 
- stack 2: 0x518
- stack 1: 0x2
- stack 0: 0x80
1547	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x518
1548	 186	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1549	 188	ADD		 	 
- stack 0: 0x51C
1550	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1551	 18A	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x18F000201A9FFE80086000B0156000000A0000000BAFFFF01EB000001EB0000
1552	 18B	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x18F000201A9FFE80086000B0156000000A0000000BAFFFF01EB000001EB0000
- stack 0: 0xF0
1553	 18D	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x18F
1554	 18E	JUMP		 	 
- stack 0: 0x51C
1555	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x51C
1556	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1557	 191	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x18F000201A9FFE80086000B0156000000A0000000BAFFFF01EB000001EB0000
1558	 192	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x18F000201A9FFE80086000B0156000000A0000000BAFFFF01EB000001EB0000
- stack 0: 0xE0
1559	 194	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x18F0002
1560	 195	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x18F0002
- stack 0: 0xFFFF
1561	 198	AND		 	 
- stack 1: 0x51C
- stack 0: 0x2
1562	 199	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0x1
1563	 19B	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x2
1564	 19C	PUSH2	00A0	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0xA0
1565	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x51C
1566	 1A0	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1567	 1A2	ADD		 	 
- stack 0: 0x520
1568	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1569	 1A4	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x1A9FFE80086000B0156000000A0000000BAFFFF01EB000001EB000000D40194
1570	 1A5	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x1A9FFE80086000B0156000000A0000000BAFFFF01EB000001EB000000D40194
- stack 0: 0xF0
1571	 1A7	SHR		 	 
- stack 1: 0x520
- stack 0: 0x1A9
1572	 1A8	JUMP		 	 
- stack 0: 0x520
1573	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x520
1574	 1AA	PUSH2	0080	 	 
- stack 1: 0x520
- stack 0: 0x80
1575	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x520
- stack 0: 0x2
1576	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1577	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x520
- stack 0: 0x2
1578	 1B4	PUSH2	00A0	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0xA0
1579	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0x2
1580	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x520
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1581	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0x2
1582	 1BE	SUB		 	 
- stack 1: 0x520
- stack 0: 0x0
1583	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x520
- stack 1: 0x0
- stack 0: 0x1C7
1584	 1C2	JUMPI		 	 
- stack 0: 0x520
1585	 1C3	PUSH2	01E1	 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 1: 0x520
- stack 0: 0x1E1
1586	 1C6	JUMP		 	 
- stack 0: 0x520
1587	 1E1	JUMPDEST		 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x520
1588	 1E2	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1589	 1E4	ADD		 	 
- stack 0: 0x524
1590	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1591	 1E6	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x86000B0156000000A0000000BAFFFF01EB000001EB000000D4019401700001
1592	 1E7	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x86000B0156000000A0000000BAFFFF01EB000001EB000000D4019401700001
- stack 0: 0xF0
1593	 1E9	SHR		 	 
- stack 1: 0x524
- stack 0: 0x86
1594	 1EA	JUMP		 	 
- stack 0: 0x524
1595	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x524
1596	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1597	 88	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x86000B0156000000A0000000BAFFFF01EB000001EB000000D4019401700001
1598	 89	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x86000B0156000000A0000000BAFFFF01EB000001EB000000D4019401700001
- stack 0: 0xE0
1599	 8B	SHR		 	 
- stack 1: 0x524
- stack 0: 0x86000B
1600	 8C	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x86000B
- stack 0: 0xFFFF
1601	 8F	AND		 	 
- stack 1: 0x524
- stack 0: 0xB
1602	 90	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0xB
- stack 0: 0x1
1603	 92	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xB
1604	 93	PUSH2	0380	 	 
- stack 2: 0x524
- stack 1: 0xB
- stack 0: 0x380
1605	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x524
1606	 97	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1607	 99	ADD		 	 
- stack 0: 0x528
1608	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1609	 9B	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x156000000A0000000BAFFFF01EB000001EB000000D4019401700001018F0002
1610	 9C	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x156000000A0000000BAFFFF01EB000001EB000000D4019401700001018F0002
- stack 0: 0xF0
1611	 9E	SHR		 	 
- stack 1: 0x528
- stack 0: 0x156
1612	 9F	JUMP		 	 
- stack 0: 0x528
1613	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x528
1614	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1615	 158	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x156000000A0000000BAFFFF01EB000001EB000000D4019401700001018F0002
1616	 159	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x156000000A0000000BAFFFF01EB000001EB000000D4019401700001018F0002
- stack 0: 0xE0
1617	 15B	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1560000
1618	 15C	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x1560000
- stack 0: 0xFFFF
1619	 15F	AND		 	 
- stack 1: 0x528
- stack 0: 0x0
1620	 160	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0x0
- stack 0: 0x1
1621	 162	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0x0
1622	 163	PUSH2	0080	 	 
- stack 2: 0x528
- stack 1: 0x0
- stack 0: 0x80
1623	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x528
1624	 167	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1625	 169	ADD		 	 
- stack 0: 0x52C
1626	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1627	 16B	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xA0000000BAFFFF01EB000001EB000000D4019401700001018F000201A9FFE4
1628	 16C	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0xA0000000BAFFFF01EB000001EB000000D4019401700001018F000201A9FFE4
- stack 0: 0xF0
1629	 16E	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xA0
1630	 16F	JUMP		 	 
- stack 0: 0x52C
1631	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x52C
1632	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1633	 A2	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xA0000000BAFFFF01EB000001EB000000D4019401700001018F000201A9FFE4
1634	 A3	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0xA0000000BAFFFF01EB000001EB000000D4019401700001018F000201A9FFE4
- stack 0: 0xE0
1635	 A5	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xA00000
1636	 A6	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0xA00000
- stack 0: 0xFFFF
1637	 A9	AND		 	 
- stack 1: 0x52C
- stack 0: 0x0
1638	 AA	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x1
1639	 AC	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x0
1640	 AD	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x20
1641	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x52C
1642	 B1	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1643	 B3	ADD		 	 
- stack 0: 0x530
1644	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1645	 B5	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xBAFFFF01EB000001EB000000D4019401700001018F000201A9FFE40086000C
1646	 B6	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0xBAFFFF01EB000001EB000000D4019401700001018F000201A9FFE40086000C
- stack 0: 0xF0
1647	 B8	SHR		 	 
- stack 1: 0x530
- stack 0: 0xBA
1648	 B9	JUMP		 	 
- stack 0: 0x530
1649	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x530
1650	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1651	 BC	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xBAFFFF01EB000001EB000000D4019401700001018F000201A9FFE40086000C
1652	 BD	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0xBAFFFF01EB000001EB000000D4019401700001018F000201A9FFE40086000C
- stack 0: 0xE0
1653	 BF	SHR		 	 
- stack 1: 0x530
- stack 0: 0xBAFFFF
1654	 C0	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
1655	 C3	AND		 	 
- stack 1: 0x530
- stack 0: 0xFFFF
1656	 C4	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0xFFFF
- stack 0: 0x1
1657	 C6	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1658	 C7	PUSH2	0040	 	 
- stack 2: 0x530
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1659	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x530
1660	 CB	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1661	 CD	ADD		 	 
- stack 0: 0x534
1662	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1663	 CF	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
1664	 D0	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
- stack 0: 0xF0
1665	 D2	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1EB
1666	 D3	JUMP		 	 
- stack 0: 0x534
1667	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x534
1668	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1669	 1ED	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
1670	 1EE	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
- stack 0: 0xE0
1671	 1F0	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1EB0000
1672	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
1673	 1F4	AND		 	 
- stack 1: 0x534
- stack 0: 0x0
1674	 1F5	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x1
1675	 1F7	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0x0
1676	 1F8	POP		 	 
- stack 0: 0x534
1677	 1F9	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1678	 1FB	ADD		 	 
- stack 0: 0x538
1679	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1680	 1FD	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
1681	 1FE	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
- stack 0: 0xF0
1682	 200	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1EB
1683	 201	JUMP		 	 
- stack 0: 0x538
1684	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x538
1685	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1686	 1ED	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
1687	 1EE	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
- stack 0: 0xE0
1688	 1F0	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1EB0000
1689	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
1690	 1F4	AND		 	 
- stack 1: 0x538
- stack 0: 0x0
1691	 1F5	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x1
1692	 1F7	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0x0
1693	 1F8	POP		 	 
- stack 0: 0x538
1694	 1F9	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1695	 1FB	ADD		 	 
- stack 0: 0x53C
1696	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1697	 1FD	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xD4019401700001018F000201A9FFE40086000C0156000000A0000001EB0000
1698	 1FE	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0xD4019401700001018F000201A9FFE40086000C0156000000A0000001EB0000
- stack 0: 0xF0
1699	 200	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xD4
1700	 201	JUMP		 	 
- stack 0: 0x53C
1701	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x53C
1702	 D5	PUSH2	0020	 	 
- stack 1: 0x53C
- stack 0: 0x20
1703	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x53C
- stack 0: 0x0
1704	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1705	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x53C
- stack 0: 0x0
1706	 DF	PUSH2	0040	 	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0x40
1707	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1708	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x53C
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1709	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1710	 E9	EQ		 	 
- stack 1: 0x53C
- stack 0: 0x0
1711	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0xF2
1712	 ED	JUMPI		 	 
- stack 0: 0x53C
1713	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x53C
- stack 0: 0x10C
1714	 F1	JUMP		 	 
- stack 0: 0x53C
1715	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x53C
1716	 10D	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1717	 10F	ADD		 	 
- stack 0: 0x540
1718	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1719	 111	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF
1720	 112	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF
- stack 0: 0xF0
1721	 114	SHR		 	 
- stack 1: 0x540
- stack 0: 0x170
1722	 115	JUMP		 	 
- stack 0: 0x540
1723	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x540
1724	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1725	 172	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF
1726	 173	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF
- stack 0: 0xE0
1727	 175	SHR		 	 
- stack 1: 0x540
- stack 0: 0x1700001
1728	 176	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x1700001
- stack 0: 0xFFFF
1729	 179	AND		 	 
- stack 1: 0x540
- stack 0: 0x1
1730	 17A	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0x1
- stack 0: 0x1
1731	 17C	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0x1
1732	 17D	PUSH2	0080	 	 
- stack 2: 0x540
- stack 1: 0x1
- stack 0: 0x80
1733	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x540
- stack 1: 0x1
- stack 0: 0x0
1734	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x540
- stack 0: 0x1
1735	 182	PUSH2	0080	 	 
- stack 2: 0x540
- stack 1: 0x1
- stack 0: 0x80
1736	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x540
1737	 186	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1738	 188	ADD		 	 
- stack 0: 0x544
1739	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1740	 18A	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF00D40170
1741	 18B	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF00D40170
- stack 0: 0xF0
1742	 18D	SHR		 	 
- stack 1: 0x544
- stack 0: 0x18F
1743	 18E	JUMP		 	 
- stack 0: 0x544
1744	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x544
1745	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1746	 191	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF00D40170
1747	 192	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF00D40170
- stack 0: 0xE0
1748	 194	SHR		 	 
- stack 1: 0x544
- stack 0: 0x18F0002
1749	 195	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x18F0002
- stack 0: 0xFFFF
1750	 198	AND		 	 
- stack 1: 0x544
- stack 0: 0x2
1751	 199	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x2
- stack 0: 0x1
1752	 19B	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x2
1753	 19C	PUSH2	00A0	 	 
- stack 2: 0x544
- stack 1: 0x2
- stack 0: 0xA0
1754	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x544
1755	 1A0	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1756	 1A2	ADD		 	 
- stack 0: 0x548
1757	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1758	 1A4	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x1A9FFE40086000C0156000000A0000001EB000000BAFFFF00D4017001700001
1759	 1A5	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x1A9FFE40086000C0156000000A0000001EB000000BAFFFF00D4017001700001
- stack 0: 0xF0
1760	 1A7	SHR		 	 
- stack 1: 0x548
- stack 0: 0x1A9
1761	 1A8	JUMP		 	 
- stack 0: 0x548
1762	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x548
1763	 1AA	PUSH2	0080	 	 
- stack 1: 0x548
- stack 0: 0x80
1764	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x548
- stack 0: 0x1
1765	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1766	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x548
- stack 0: 0x1
1767	 1B4	PUSH2	00A0	 	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0xA0
1768	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x2
1769	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x548
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1770	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x2
1771	 1BE	SUB		 	 
- stack 1: 0x548
- stack 0: 0x1
1772	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x1C7
1773	 1C2	JUMPI		 	 
- stack 0: 0x548
1774	 1C7	JUMPDEST		 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x548
1775	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1776	 1C9	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x1A9FFE40086000C0156000000A0000001EB000000BAFFFF00D4017001700001
1777	 1CA	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x1A9FFE40086000C0156000000A0000001EB000000BAFFFF00D4017001700001
- stack 0: 0xE0
1778	 1CC	SHR		 	 
- stack 1: 0x548
- stack 0: 0x1A9FFE4
1779	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x1A9FFE4
- stack 0: 0xFFFF
1780	 1D0	AND		 	 
- stack 1: 0x548
- stack 0: 0xFFE4
1781	 1D1	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0xFFE4
- stack 0: 0x1
1782	 1D3	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
1783	 1D4	ADD		 	 
- stack 0: 0x52C
1784	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x52C
- stack 0: 0xFFFFFFFF
1785	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x52C
1786	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1787	 1DC	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xA0000000BAFFFF01EB000001EB000000D4019401700001018F000201A9FFE4
1788	 1DD	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0xA0000000BAFFFF01EB000001EB000000D4019401700001018F000201A9FFE4
- stack 0: 0xF0
1789	 1DF	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xA0
1790	 1E0	JUMP		 	 
- stack 0: 0x52C
1791	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x52C
1792	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1793	 A2	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xA0000000BAFFFF01EB000001EB000000D4019401700001018F000201A9FFE4
1794	 A3	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0xA0000000BAFFFF01EB000001EB000000D4019401700001018F000201A9FFE4
- stack 0: 0xE0
1795	 A5	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xA00000
1796	 A6	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0xA00000
- stack 0: 0xFFFF
1797	 A9	AND		 	 
- stack 1: 0x52C
- stack 0: 0x0
1798	 AA	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x1
1799	 AC	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x0
1800	 AD	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x20
1801	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x52C
1802	 B1	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1803	 B3	ADD		 	 
- stack 0: 0x530
1804	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1805	 B5	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xBAFFFF01EB000001EB000000D4019401700001018F000201A9FFE40086000C
1806	 B6	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0xBAFFFF01EB000001EB000000D4019401700001018F000201A9FFE40086000C
- stack 0: 0xF0
1807	 B8	SHR		 	 
- stack 1: 0x530
- stack 0: 0xBA
1808	 B9	JUMP		 	 
- stack 0: 0x530
1809	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x530
1810	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1811	 BC	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xBAFFFF01EB000001EB000000D4019401700001018F000201A9FFE40086000C
1812	 BD	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0xBAFFFF01EB000001EB000000D4019401700001018F000201A9FFE40086000C
- stack 0: 0xE0
1813	 BF	SHR		 	 
- stack 1: 0x530
- stack 0: 0xBAFFFF
1814	 C0	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
1815	 C3	AND		 	 
- stack 1: 0x530
- stack 0: 0xFFFF
1816	 C4	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0xFFFF
- stack 0: 0x1
1817	 C6	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1818	 C7	PUSH2	0040	 	 
- stack 2: 0x530
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1819	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x530
1820	 CB	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1821	 CD	ADD		 	 
- stack 0: 0x534
1822	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1823	 CF	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
1824	 D0	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
- stack 0: 0xF0
1825	 D2	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1EB
1826	 D3	JUMP		 	 
- stack 0: 0x534
1827	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x534
1828	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1829	 1ED	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
1830	 1EE	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
- stack 0: 0xE0
1831	 1F0	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1EB0000
1832	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
1833	 1F4	AND		 	 
- stack 1: 0x534
- stack 0: 0x0
1834	 1F5	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x1
1835	 1F7	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0x0
1836	 1F8	POP		 	 
- stack 0: 0x534
1837	 1F9	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1838	 1FB	ADD		 	 
- stack 0: 0x538
1839	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1840	 1FD	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
1841	 1FE	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
- stack 0: 0xF0
1842	 200	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1EB
1843	 201	JUMP		 	 
- stack 0: 0x538
1844	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x538
1845	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1846	 1ED	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
1847	 1EE	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
- stack 0: 0xE0
1848	 1F0	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1EB0000
1849	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
1850	 1F4	AND		 	 
- stack 1: 0x538
- stack 0: 0x0
1851	 1F5	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x1
1852	 1F7	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0x0
1853	 1F8	POP		 	 
- stack 0: 0x538
1854	 1F9	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1855	 1FB	ADD		 	 
- stack 0: 0x53C
1856	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1857	 1FD	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xD4019401700001018F000201A9FFE40086000C0156000000A0000001EB0000
1858	 1FE	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0xD4019401700001018F000201A9FFE40086000C0156000000A0000001EB0000
- stack 0: 0xF0
1859	 200	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xD4
1860	 201	JUMP		 	 
- stack 0: 0x53C
1861	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x53C
1862	 D5	PUSH2	0020	 	 
- stack 1: 0x53C
- stack 0: 0x20
1863	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x53C
- stack 0: 0x0
1864	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1865	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x53C
- stack 0: 0x0
1866	 DF	PUSH2	0040	 	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0x40
1867	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1868	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x53C
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1869	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1870	 E9	EQ		 	 
- stack 1: 0x53C
- stack 0: 0x0
1871	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0xF2
1872	 ED	JUMPI		 	 
- stack 0: 0x53C
1873	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x53C
- stack 0: 0x10C
1874	 F1	JUMP		 	 
- stack 0: 0x53C
1875	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x53C
1876	 10D	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1877	 10F	ADD		 	 
- stack 0: 0x540
1878	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1879	 111	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF
1880	 112	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF
- stack 0: 0xF0
1881	 114	SHR		 	 
- stack 1: 0x540
- stack 0: 0x170
1882	 115	JUMP		 	 
- stack 0: 0x540
1883	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x540
1884	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1885	 172	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF
1886	 173	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF
- stack 0: 0xE0
1887	 175	SHR		 	 
- stack 1: 0x540
- stack 0: 0x1700001
1888	 176	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x1700001
- stack 0: 0xFFFF
1889	 179	AND		 	 
- stack 1: 0x540
- stack 0: 0x1
1890	 17A	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0x1
- stack 0: 0x1
1891	 17C	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0x1
1892	 17D	PUSH2	0080	 	 
- stack 2: 0x540
- stack 1: 0x1
- stack 0: 0x80
1893	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x540
- stack 1: 0x1
- stack 0: 0x1
1894	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x540
- stack 0: 0x2
1895	 182	PUSH2	0080	 	 
- stack 2: 0x540
- stack 1: 0x2
- stack 0: 0x80
1896	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x540
1897	 186	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1898	 188	ADD		 	 
- stack 0: 0x544
1899	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1900	 18A	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF00D40170
1901	 18B	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF00D40170
- stack 0: 0xF0
1902	 18D	SHR		 	 
- stack 1: 0x544
- stack 0: 0x18F
1903	 18E	JUMP		 	 
- stack 0: 0x544
1904	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x544
1905	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1906	 191	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF00D40170
1907	 192	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BAFFFF00D40170
- stack 0: 0xE0
1908	 194	SHR		 	 
- stack 1: 0x544
- stack 0: 0x18F0002
1909	 195	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x18F0002
- stack 0: 0xFFFF
1910	 198	AND		 	 
- stack 1: 0x544
- stack 0: 0x2
1911	 199	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x2
- stack 0: 0x1
1912	 19B	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x2
1913	 19C	PUSH2	00A0	 	 
- stack 2: 0x544
- stack 1: 0x2
- stack 0: 0xA0
1914	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x544
1915	 1A0	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1916	 1A2	ADD		 	 
- stack 0: 0x548
1917	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1918	 1A4	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x1A9FFE40086000C0156000000A0000001EB000000BAFFFF00D4017001700001
1919	 1A5	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x1A9FFE40086000C0156000000A0000001EB000000BAFFFF00D4017001700001
- stack 0: 0xF0
1920	 1A7	SHR		 	 
- stack 1: 0x548
- stack 0: 0x1A9
1921	 1A8	JUMP		 	 
- stack 0: 0x548
1922	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x548
1923	 1AA	PUSH2	0080	 	 
- stack 1: 0x548
- stack 0: 0x80
1924	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x548
- stack 0: 0x2
1925	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1926	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x548
- stack 0: 0x2
1927	 1B4	PUSH2	00A0	 	 
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0xA0
1928	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0x2
1929	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x548
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1930	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0x2
1931	 1BE	SUB		 	 
- stack 1: 0x548
- stack 0: 0x0
1932	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x548
- stack 1: 0x0
- stack 0: 0x1C7
1933	 1C2	JUMPI		 	 
- stack 0: 0x548
1934	 1C3	PUSH2	01E1	 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 1: 0x548
- stack 0: 0x1E1
1935	 1C6	JUMP		 	 
- stack 0: 0x548
1936	 1E1	JUMPDEST		 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x548
1937	 1E2	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1938	 1E4	ADD		 	 
- stack 0: 0x54C
1939	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1940	 1E6	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x86000C0156000000A0000001EB000000BAFFFF00D4017001700001018F0002
1941	 1E7	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x86000C0156000000A0000001EB000000BAFFFF00D4017001700001018F0002
- stack 0: 0xF0
1942	 1E9	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x86
1943	 1EA	JUMP		 	 
- stack 0: 0x54C
1944	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x54C
1945	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1946	 88	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x86000C0156000000A0000001EB000000BAFFFF00D4017001700001018F0002
1947	 89	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x86000C0156000000A0000001EB000000BAFFFF00D4017001700001018F0002
- stack 0: 0xE0
1948	 8B	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x86000C
1949	 8C	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x86000C
- stack 0: 0xFFFF
1950	 8F	AND		 	 
- stack 1: 0x54C
- stack 0: 0xC
1951	 90	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0xC
- stack 0: 0x1
1952	 92	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0xC
1953	 93	PUSH2	0380	 	 
- stack 2: 0x54C
- stack 1: 0xC
- stack 0: 0x380
1954	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x54C
1955	 97	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1956	 99	ADD		 	 
- stack 0: 0x550
1957	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1958	 9B	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x156000000A0000001EB000000BAFFFF00D4017001700001018F000201A9FFE8
1959	 9C	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x156000000A0000001EB000000BAFFFF00D4017001700001018F000201A9FFE8
- stack 0: 0xF0
1960	 9E	SHR		 	 
- stack 1: 0x550
- stack 0: 0x156
1961	 9F	JUMP		 	 
- stack 0: 0x550
1962	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x550
1963	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1964	 158	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x156000000A0000001EB000000BAFFFF00D4017001700001018F000201A9FFE8
1965	 159	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x156000000A0000001EB000000BAFFFF00D4017001700001018F000201A9FFE8
- stack 0: 0xE0
1966	 15B	SHR		 	 
- stack 1: 0x550
- stack 0: 0x1560000
1967	 15C	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x1560000
- stack 0: 0xFFFF
1968	 15F	AND		 	 
- stack 1: 0x550
- stack 0: 0x0
1969	 160	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x1
1970	 162	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0x0
1971	 163	PUSH2	0080	 	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x80
1972	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x550
1973	 167	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1974	 169	ADD		 	 
- stack 0: 0x554
1975	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1976	 16B	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xA0000001EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D
1977	 16C	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0xA0000001EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D
- stack 0: 0xF0
1978	 16E	SHR		 	 
- stack 1: 0x554
- stack 0: 0xA0
1979	 16F	JUMP		 	 
- stack 0: 0x554
1980	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x554
1981	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1982	 A2	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xA0000001EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D
1983	 A3	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0xA0000001EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D
- stack 0: 0xE0
1984	 A5	SHR		 	 
- stack 1: 0x554
- stack 0: 0xA00000
1985	 A6	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0xA00000
- stack 0: 0xFFFF
1986	 A9	AND		 	 
- stack 1: 0x554
- stack 0: 0x0
1987	 AA	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1
1988	 AC	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x0
1989	 AD	PUSH2	0020	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x20
1990	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x554
1991	 B1	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1992	 B3	ADD		 	 
- stack 0: 0x558
1993	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1994	 B5	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D01560000
1995	 B6	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x1EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D01560000
- stack 0: 0xF0
1996	 B8	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1EB
1997	 B9	JUMP		 	 
- stack 0: 0x558
1998	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x558
1999	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
2000	 1ED	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D01560000
2001	 1EE	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x1EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D01560000
- stack 0: 0xE0
2002	 1F0	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1EB0000
2003	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2004	 1F4	AND		 	 
- stack 1: 0x558
- stack 0: 0x0
2005	 1F5	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x1
2006	 1F7	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x0
2007	 1F8	POP		 	 
- stack 0: 0x558
2008	 1F9	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
2009	 1FB	ADD		 	 
- stack 0: 0x55C
2010	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
2011	 1FD	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xBAFFFF00D4017001700001018F000201A9FFE80086000D0156000000A00000
2012	 1FE	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0xBAFFFF00D4017001700001018F000201A9FFE80086000D0156000000A00000
- stack 0: 0xF0
2013	 200	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xBA
2014	 201	JUMP		 	 
- stack 0: 0x55C
2015	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x55C
2016	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
2017	 BC	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xBAFFFF00D4017001700001018F000201A9FFE80086000D0156000000A00000
2018	 BD	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0xBAFFFF00D4017001700001018F000201A9FFE80086000D0156000000A00000
- stack 0: 0xE0
2019	 BF	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xBAFFFF
2020	 C0	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
2021	 C3	AND		 	 
- stack 1: 0x55C
- stack 0: 0xFFFF
2022	 C4	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0xFFFF
- stack 0: 0x1
2023	 C6	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2024	 C7	PUSH2	0040	 	 
- stack 2: 0x55C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2025	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x55C
2026	 CB	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
2027	 CD	ADD		 	 
- stack 0: 0x560
2028	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
2029	 CF	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0xD4017001700001018F000201A9FFE80086000D0156000000A0000001EB0000
2030	 D0	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0xD4017001700001018F000201A9FFE80086000D0156000000A0000001EB0000
- stack 0: 0xF0
2031	 D2	SHR		 	 
- stack 1: 0x560
- stack 0: 0xD4
2032	 D3	JUMP		 	 
- stack 0: 0x560
2033	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x560
2034	 D5	PUSH2	0020	 	 
- stack 1: 0x560
- stack 0: 0x20
2035	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x560
- stack 0: 0x0
2036	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2037	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x560
- stack 0: 0x0
2038	 DF	PUSH2	0040	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x40
2039	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2040	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x560
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
2041	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2042	 E9	EQ		 	 
- stack 1: 0x560
- stack 0: 0x0
2043	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0xF2
2044	 ED	JUMPI		 	 
- stack 0: 0x560
2045	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x560
- stack 0: 0x10C
2046	 F1	JUMP		 	 
- stack 0: 0x560
2047	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x560
2048	 10D	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
2049	 10F	ADD		 	 
- stack 0: 0x564
2050	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2051	 111	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF
2052	 112	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF
- stack 0: 0xF0
2053	 114	SHR		 	 
- stack 1: 0x564
- stack 0: 0x170
2054	 115	JUMP		 	 
- stack 0: 0x564
2055	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x564
2056	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
2057	 172	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF
2058	 173	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF
- stack 0: 0xE0
2059	 175	SHR		 	 
- stack 1: 0x564
- stack 0: 0x1700001
2060	 176	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x1700001
- stack 0: 0xFFFF
2061	 179	AND		 	 
- stack 1: 0x564
- stack 0: 0x1
2062	 17A	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x1
2063	 17C	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0x1
2064	 17D	PUSH2	0080	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x80
2065	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x0
2066	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x564
- stack 0: 0x1
2067	 182	PUSH2	0080	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x80
2068	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x564
2069	 186	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2070	 188	ADD		 	 
- stack 0: 0x568
2071	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2072	 18A	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF01EB0000
2073	 18B	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF01EB0000
- stack 0: 0xF0
2074	 18D	SHR		 	 
- stack 1: 0x568
- stack 0: 0x18F
2075	 18E	JUMP		 	 
- stack 0: 0x568
2076	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x568
2077	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
2078	 191	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF01EB0000
2079	 192	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF01EB0000
- stack 0: 0xE0
2080	 194	SHR		 	 
- stack 1: 0x568
- stack 0: 0x18F0002
2081	 195	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x18F0002
- stack 0: 0xFFFF
2082	 198	AND		 	 
- stack 1: 0x568
- stack 0: 0x2
2083	 199	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x2
- stack 0: 0x1
2084	 19B	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x2
2085	 19C	PUSH2	00A0	 	 
- stack 2: 0x568
- stack 1: 0x2
- stack 0: 0xA0
2086	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x568
2087	 1A0	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2088	 1A2	ADD		 	 
- stack 0: 0x56C
2089	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2090	 1A4	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x1A9FFE80086000D0156000000A0000001EB000000BAFFFF01EB000000D40148
2091	 1A5	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x1A9FFE80086000D0156000000A0000001EB000000BAFFFF01EB000000D40148
- stack 0: 0xF0
2092	 1A7	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x1A9
2093	 1A8	JUMP		 	 
- stack 0: 0x56C
2094	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x56C
2095	 1AA	PUSH2	0080	 	 
- stack 1: 0x56C
- stack 0: 0x80
2096	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x56C
- stack 0: 0x1
2097	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2098	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x56C
- stack 0: 0x1
2099	 1B4	PUSH2	00A0	 	 
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0xA0
2100	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0x2
2101	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x56C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2102	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0x2
2103	 1BE	SUB		 	 
- stack 1: 0x56C
- stack 0: 0x1
2104	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0x1C7
2105	 1C2	JUMPI		 	 
- stack 0: 0x56C
2106	 1C7	JUMPDEST		 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x56C
2107	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
2108	 1C9	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x1A9FFE80086000D0156000000A0000001EB000000BAFFFF01EB000000D40148
2109	 1CA	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x1A9FFE80086000D0156000000A0000001EB000000BAFFFF01EB000000D40148
- stack 0: 0xE0
2110	 1CC	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x1A9FFE8
2111	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x1A9FFE8
- stack 0: 0xFFFF
2112	 1D0	AND		 	 
- stack 1: 0x56C
- stack 0: 0xFFE8
2113	 1D1	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0xFFE8
- stack 0: 0x1
2114	 1D3	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2115	 1D4	ADD		 	 
- stack 0: 0x554
2116	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x554
- stack 0: 0xFFFFFFFF
2117	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x554
2118	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
2119	 1DC	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xA0000001EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D
2120	 1DD	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0xA0000001EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D
- stack 0: 0xF0
2121	 1DF	SHR		 	 
- stack 1: 0x554
- stack 0: 0xA0
2122	 1E0	JUMP		 	 
- stack 0: 0x554
2123	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x554
2124	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
2125	 A2	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xA0000001EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D
2126	 A3	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0xA0000001EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D
- stack 0: 0xE0
2127	 A5	SHR		 	 
- stack 1: 0x554
- stack 0: 0xA00000
2128	 A6	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0xA00000
- stack 0: 0xFFFF
2129	 A9	AND		 	 
- stack 1: 0x554
- stack 0: 0x0
2130	 AA	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1
2131	 AC	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x0
2132	 AD	PUSH2	0020	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x20
2133	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x554
2134	 B1	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
2135	 B3	ADD		 	 
- stack 0: 0x558
2136	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
2137	 B5	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D01560000
2138	 B6	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x1EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D01560000
- stack 0: 0xF0
2139	 B8	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1EB
2140	 B9	JUMP		 	 
- stack 0: 0x558
2141	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x558
2142	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
2143	 1ED	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D01560000
2144	 1EE	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x1EB000000BAFFFF00D4017001700001018F000201A9FFE80086000D01560000
- stack 0: 0xE0
2145	 1F0	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1EB0000
2146	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2147	 1F4	AND		 	 
- stack 1: 0x558
- stack 0: 0x0
2148	 1F5	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x1
2149	 1F7	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x0
2150	 1F8	POP		 	 
- stack 0: 0x558
2151	 1F9	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
2152	 1FB	ADD		 	 
- stack 0: 0x55C
2153	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
2154	 1FD	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xBAFFFF00D4017001700001018F000201A9FFE80086000D0156000000A00000
2155	 1FE	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0xBAFFFF00D4017001700001018F000201A9FFE80086000D0156000000A00000
- stack 0: 0xF0
2156	 200	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xBA
2157	 201	JUMP		 	 
- stack 0: 0x55C
2158	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x55C
2159	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
2160	 BC	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xBAFFFF00D4017001700001018F000201A9FFE80086000D0156000000A00000
2161	 BD	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0xBAFFFF00D4017001700001018F000201A9FFE80086000D0156000000A00000
- stack 0: 0xE0
2162	 BF	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xBAFFFF
2163	 C0	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
2164	 C3	AND		 	 
- stack 1: 0x55C
- stack 0: 0xFFFF
2165	 C4	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0xFFFF
- stack 0: 0x1
2166	 C6	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2167	 C7	PUSH2	0040	 	 
- stack 2: 0x55C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2168	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x55C
2169	 CB	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
2170	 CD	ADD		 	 
- stack 0: 0x560
2171	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
2172	 CF	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0xD4017001700001018F000201A9FFE80086000D0156000000A0000001EB0000
2173	 D0	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0xD4017001700001018F000201A9FFE80086000D0156000000A0000001EB0000
- stack 0: 0xF0
2174	 D2	SHR		 	 
- stack 1: 0x560
- stack 0: 0xD4
2175	 D3	JUMP		 	 
- stack 0: 0x560
2176	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x560
2177	 D5	PUSH2	0020	 	 
- stack 1: 0x560
- stack 0: 0x20
2178	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x560
- stack 0: 0x0
2179	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2180	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x560
- stack 0: 0x0
2181	 DF	PUSH2	0040	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x40
2182	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2183	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x560
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
2184	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2185	 E9	EQ		 	 
- stack 1: 0x560
- stack 0: 0x0
2186	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0xF2
2187	 ED	JUMPI		 	 
- stack 0: 0x560
2188	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x560
- stack 0: 0x10C
2189	 F1	JUMP		 	 
- stack 0: 0x560
2190	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x560
2191	 10D	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
2192	 10F	ADD		 	 
- stack 0: 0x564
2193	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2194	 111	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF
2195	 112	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF
- stack 0: 0xF0
2196	 114	SHR		 	 
- stack 1: 0x564
- stack 0: 0x170
2197	 115	JUMP		 	 
- stack 0: 0x564
2198	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x564
2199	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
2200	 172	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF
2201	 173	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF
- stack 0: 0xE0
2202	 175	SHR		 	 
- stack 1: 0x564
- stack 0: 0x1700001
2203	 176	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x1700001
- stack 0: 0xFFFF
2204	 179	AND		 	 
- stack 1: 0x564
- stack 0: 0x1
2205	 17A	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x1
2206	 17C	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0x1
2207	 17D	PUSH2	0080	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x80
2208	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x1
2209	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x564
- stack 0: 0x2
2210	 182	PUSH2	0080	 	 
- stack 2: 0x564
- stack 1: 0x2
- stack 0: 0x80
2211	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x564
2212	 186	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2213	 188	ADD		 	 
- stack 0: 0x568
2214	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2215	 18A	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF01EB0000
2216	 18B	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF01EB0000
- stack 0: 0xF0
2217	 18D	SHR		 	 
- stack 1: 0x568
- stack 0: 0x18F
2218	 18E	JUMP		 	 
- stack 0: 0x568
2219	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x568
2220	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
2221	 191	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF01EB0000
2222	 192	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BAFFFF01EB0000
- stack 0: 0xE0
2223	 194	SHR		 	 
- stack 1: 0x568
- stack 0: 0x18F0002
2224	 195	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x18F0002
- stack 0: 0xFFFF
2225	 198	AND		 	 
- stack 1: 0x568
- stack 0: 0x2
2226	 199	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x2
- stack 0: 0x1
2227	 19B	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x2
2228	 19C	PUSH2	00A0	 	 
- stack 2: 0x568
- stack 1: 0x2
- stack 0: 0xA0
2229	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x568
2230	 1A0	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2231	 1A2	ADD		 	 
- stack 0: 0x56C
2232	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2233	 1A4	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x1A9FFE80086000D0156000000A0000001EB000000BAFFFF01EB000000D40148
2234	 1A5	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x1A9FFE80086000D0156000000A0000001EB000000BAFFFF01EB000000D40148
- stack 0: 0xF0
2235	 1A7	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x1A9
2236	 1A8	JUMP		 	 
- stack 0: 0x56C
2237	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x56C
2238	 1AA	PUSH2	0080	 	 
- stack 1: 0x56C
- stack 0: 0x80
2239	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x56C
- stack 0: 0x2
2240	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x56C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2241	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x56C
- stack 0: 0x2
2242	 1B4	PUSH2	00A0	 	 
- stack 2: 0x56C
- stack 1: 0x2
- stack 0: 0xA0
2243	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x56C
- stack 1: 0x2
- stack 0: 0x2
2244	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x56C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2245	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x56C
- stack 1: 0x2
- stack 0: 0x2
2246	 1BE	SUB		 	 
- stack 1: 0x56C
- stack 0: 0x0
2247	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x1C7
2248	 1C2	JUMPI		 	 
- stack 0: 0x56C
2249	 1C3	PUSH2	01E1	 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 1: 0x56C
- stack 0: 0x1E1
2250	 1C6	JUMP		 	 
- stack 0: 0x56C
2251	 1E1	JUMPDEST		 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x56C
2252	 1E2	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2253	 1E4	ADD		 	 
- stack 0: 0x570
2254	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2255	 1E6	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x86000D0156000000A0000001EB000000BAFFFF01EB000000D4014801700001
2256	 1E7	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x86000D0156000000A0000001EB000000BAFFFF01EB000000D4014801700001
- stack 0: 0xF0
2257	 1E9	SHR		 	 
- stack 1: 0x570
- stack 0: 0x86
2258	 1EA	JUMP		 	 
- stack 0: 0x570
2259	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x570
2260	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
2261	 88	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x86000D0156000000A0000001EB000000BAFFFF01EB000000D4014801700001
2262	 89	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x86000D0156000000A0000001EB000000BAFFFF01EB000000D4014801700001
- stack 0: 0xE0
2263	 8B	SHR		 	 
- stack 1: 0x570
- stack 0: 0x86000D
2264	 8C	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x86000D
- stack 0: 0xFFFF
2265	 8F	AND		 	 
- stack 1: 0x570
- stack 0: 0xD
2266	 90	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0xD
- stack 0: 0x1
2267	 92	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0xD
2268	 93	PUSH2	0380	 	 
- stack 2: 0x570
- stack 1: 0xD
- stack 0: 0x380
2269	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x570
2270	 97	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2271	 99	ADD		 	 
- stack 0: 0x574
2272	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2273	 9B	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x156000000A0000001EB000000BAFFFF01EB000000D4014801700001018F0002
2274	 9C	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x156000000A0000001EB000000BAFFFF01EB000000D4014801700001018F0002
- stack 0: 0xF0
2275	 9E	SHR		 	 
- stack 1: 0x574
- stack 0: 0x156
2276	 9F	JUMP		 	 
- stack 0: 0x574
2277	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x574
2278	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
2279	 158	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x156000000A0000001EB000000BAFFFF01EB000000D4014801700001018F0002
2280	 159	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x156000000A0000001EB000000BAFFFF01EB000000D4014801700001018F0002
- stack 0: 0xE0
2281	 15B	SHR		 	 
- stack 1: 0x574
- stack 0: 0x1560000
2282	 15C	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x1560000
- stack 0: 0xFFFF
2283	 15F	AND		 	 
- stack 1: 0x574
- stack 0: 0x0
2284	 160	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x1
2285	 162	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x0
2286	 163	PUSH2	0080	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x80
2287	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x574
2288	 167	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2289	 169	ADD		 	 
- stack 0: 0x578
2290	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2291	 16B	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xA0000001EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE4
2292	 16C	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0xA0000001EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE4
- stack 0: 0xF0
2293	 16E	SHR		 	 
- stack 1: 0x578
- stack 0: 0xA0
2294	 16F	JUMP		 	 
- stack 0: 0x578
2295	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x578
2296	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2297	 A2	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xA0000001EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE4
2298	 A3	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0xA0000001EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE4
- stack 0: 0xE0
2299	 A5	SHR		 	 
- stack 1: 0x578
- stack 0: 0xA00000
2300	 A6	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0xA00000
- stack 0: 0xFFFF
2301	 A9	AND		 	 
- stack 1: 0x578
- stack 0: 0x0
2302	 AA	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x1
2303	 AC	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x0
2304	 AD	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x20
2305	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x578
2306	 B1	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2307	 B3	ADD		 	 
- stack 0: 0x57C
2308	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2309	 B5	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE40086000E
2310	 B6	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x1EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE40086000E
- stack 0: 0xF0
2311	 B8	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1EB
2312	 B9	JUMP		 	 
- stack 0: 0x57C
2313	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x57C
2314	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2315	 1ED	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE40086000E
2316	 1EE	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x1EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE40086000E
- stack 0: 0xE0
2317	 1F0	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1EB0000
2318	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2319	 1F4	AND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2320	 1F5	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x1
2321	 1F7	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2322	 1F8	POP		 	 
- stack 0: 0x57C
2323	 1F9	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2324	 1FB	ADD		 	 
- stack 0: 0x580
2325	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2326	 1FD	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xBAFFFF01EB000000D4014801700001018F000201A9FFE40086000E01560000
2327	 1FE	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xBAFFFF01EB000000D4014801700001018F000201A9FFE40086000E01560000
- stack 0: 0xF0
2328	 200	SHR		 	 
- stack 1: 0x580
- stack 0: 0xBA
2329	 201	JUMP		 	 
- stack 0: 0x580
2330	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x580
2331	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2332	 BC	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xBAFFFF01EB000000D4014801700001018F000201A9FFE40086000E01560000
2333	 BD	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0xBAFFFF01EB000000D4014801700001018F000201A9FFE40086000E01560000
- stack 0: 0xE0
2334	 BF	SHR		 	 
- stack 1: 0x580
- stack 0: 0xBAFFFF
2335	 C0	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
2336	 C3	AND		 	 
- stack 1: 0x580
- stack 0: 0xFFFF
2337	 C4	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0xFFFF
- stack 0: 0x1
2338	 C6	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2339	 C7	PUSH2	0040	 	 
- stack 2: 0x580
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2340	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x580
2341	 CB	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2342	 CD	ADD		 	 
- stack 0: 0x584
2343	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2344	 CF	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
2345	 D0	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
- stack 0: 0xF0
2346	 D2	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1EB
2347	 D3	JUMP		 	 
- stack 0: 0x584
2348	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x584
2349	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2350	 1ED	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
2351	 1EE	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
- stack 0: 0xE0
2352	 1F0	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1EB0000
2353	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2354	 1F4	AND		 	 
- stack 1: 0x584
- stack 0: 0x0
2355	 1F5	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x1
2356	 1F7	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x0
2357	 1F8	POP		 	 
- stack 0: 0x584
2358	 1F9	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2359	 1FB	ADD		 	 
- stack 0: 0x588
2360	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2361	 1FD	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xD4014801700001018F000201A9FFE40086000E0156000000A0000001EB0000
2362	 1FE	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xD4014801700001018F000201A9FFE40086000E0156000000A0000001EB0000
- stack 0: 0xF0
2363	 200	SHR		 	 
- stack 1: 0x588
- stack 0: 0xD4
2364	 201	JUMP		 	 
- stack 0: 0x588
2365	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x588
2366	 D5	PUSH2	0020	 	 
- stack 1: 0x588
- stack 0: 0x20
2367	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x588
- stack 0: 0x0
2368	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2369	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0x0
2370	 DF	PUSH2	0040	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x40
2371	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2372	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x588
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
2373	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2374	 E9	EQ		 	 
- stack 1: 0x588
- stack 0: 0x0
2375	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0xF2
2376	 ED	JUMPI		 	 
- stack 0: 0x588
2377	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x588
- stack 0: 0x10C
2378	 F1	JUMP		 	 
- stack 0: 0x588
2379	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x588
2380	 10D	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2381	 10F	ADD		 	 
- stack 0: 0x58C
2382	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2383	 111	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
2384	 112	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
- stack 0: 0xF0
2385	 114	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x170
2386	 115	JUMP		 	 
- stack 0: 0x58C
2387	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x58C
2388	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2389	 172	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
2390	 173	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
- stack 0: 0xE0
2391	 175	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x1700001
2392	 176	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x1700001
- stack 0: 0xFFFF
2393	 179	AND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2394	 17A	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
2395	 17C	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2396	 17D	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x80
2397	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x0
2398	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x58C
- stack 0: 0x1
2399	 182	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x80
2400	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x58C
2401	 186	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2402	 188	ADD		 	 
- stack 0: 0x590
2403	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2404	 18A	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BAFFFF
2405	 18B	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BAFFFF
- stack 0: 0xF0
2406	 18D	SHR		 	 
- stack 1: 0x590
- stack 0: 0x18F
2407	 18E	JUMP		 	 
- stack 0: 0x590
2408	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x590
2409	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2410	 191	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BAFFFF
2411	 192	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BAFFFF
- stack 0: 0xE0
2412	 194	SHR		 	 
- stack 1: 0x590
- stack 0: 0x18F0002
2413	 195	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x18F0002
- stack 0: 0xFFFF
2414	 198	AND		 	 
- stack 1: 0x590
- stack 0: 0x2
2415	 199	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0x1
2416	 19B	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x2
2417	 19C	PUSH2	00A0	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0xA0
2418	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x590
2419	 1A0	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2420	 1A2	ADD		 	 
- stack 0: 0x594
2421	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2422	 1A4	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1A9FFE40086000E0156000000A0000001EB000001EB000000BAFFFF00D40120
2423	 1A5	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x1A9FFE40086000E0156000000A0000001EB000001EB000000BAFFFF00D40120
- stack 0: 0xF0
2424	 1A7	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1A9
2425	 1A8	JUMP		 	 
- stack 0: 0x594
2426	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x594
2427	 1AA	PUSH2	0080	 	 
- stack 1: 0x594
- stack 0: 0x80
2428	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x594
- stack 0: 0x1
2429	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2430	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x594
- stack 0: 0x1
2431	 1B4	PUSH2	00A0	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0xA0
2432	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x2
2433	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x594
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2434	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x2
2435	 1BE	SUB		 	 
- stack 1: 0x594
- stack 0: 0x1
2436	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x1C7
2437	 1C2	JUMPI		 	 
- stack 0: 0x594
2438	 1C7	JUMPDEST		 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x594
2439	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2440	 1C9	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1A9FFE40086000E0156000000A0000001EB000001EB000000BAFFFF00D40120
2441	 1CA	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x1A9FFE40086000E0156000000A0000001EB000001EB000000BAFFFF00D40120
- stack 0: 0xE0
2442	 1CC	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1A9FFE4
2443	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x1A9FFE4
- stack 0: 0xFFFF
2444	 1D0	AND		 	 
- stack 1: 0x594
- stack 0: 0xFFE4
2445	 1D1	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0xFFE4
- stack 0: 0x1
2446	 1D3	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2447	 1D4	ADD		 	 
- stack 0: 0x578
2448	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x578
- stack 0: 0xFFFFFFFF
2449	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x578
2450	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2451	 1DC	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xA0000001EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE4
2452	 1DD	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0xA0000001EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE4
- stack 0: 0xF0
2453	 1DF	SHR		 	 
- stack 1: 0x578
- stack 0: 0xA0
2454	 1E0	JUMP		 	 
- stack 0: 0x578
2455	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x578
2456	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2457	 A2	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xA0000001EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE4
2458	 A3	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0xA0000001EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE4
- stack 0: 0xE0
2459	 A5	SHR		 	 
- stack 1: 0x578
- stack 0: 0xA00000
2460	 A6	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0xA00000
- stack 0: 0xFFFF
2461	 A9	AND		 	 
- stack 1: 0x578
- stack 0: 0x0
2462	 AA	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x1
2463	 AC	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x0
2464	 AD	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x20
2465	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x578
2466	 B1	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2467	 B3	ADD		 	 
- stack 0: 0x57C
2468	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2469	 B5	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE40086000E
2470	 B6	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x1EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE40086000E
- stack 0: 0xF0
2471	 B8	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1EB
2472	 B9	JUMP		 	 
- stack 0: 0x57C
2473	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x57C
2474	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2475	 1ED	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE40086000E
2476	 1EE	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x1EB000000BAFFFF01EB000000D4014801700001018F000201A9FFE40086000E
- stack 0: 0xE0
2477	 1F0	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1EB0000
2478	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2479	 1F4	AND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2480	 1F5	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x1
2481	 1F7	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2482	 1F8	POP		 	 
- stack 0: 0x57C
2483	 1F9	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2484	 1FB	ADD		 	 
- stack 0: 0x580
2485	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2486	 1FD	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xBAFFFF01EB000000D4014801700001018F000201A9FFE40086000E01560000
2487	 1FE	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xBAFFFF01EB000000D4014801700001018F000201A9FFE40086000E01560000
- stack 0: 0xF0
2488	 200	SHR		 	 
- stack 1: 0x580
- stack 0: 0xBA
2489	 201	JUMP		 	 
- stack 0: 0x580
2490	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x580
2491	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2492	 BC	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xBAFFFF01EB000000D4014801700001018F000201A9FFE40086000E01560000
2493	 BD	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0xBAFFFF01EB000000D4014801700001018F000201A9FFE40086000E01560000
- stack 0: 0xE0
2494	 BF	SHR		 	 
- stack 1: 0x580
- stack 0: 0xBAFFFF
2495	 C0	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
2496	 C3	AND		 	 
- stack 1: 0x580
- stack 0: 0xFFFF
2497	 C4	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0xFFFF
- stack 0: 0x1
2498	 C6	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2499	 C7	PUSH2	0040	 	 
- stack 2: 0x580
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2500	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x580
2501	 CB	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2502	 CD	ADD		 	 
- stack 0: 0x584
2503	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2504	 CF	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
2505	 D0	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
- stack 0: 0xF0
2506	 D2	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1EB
2507	 D3	JUMP		 	 
- stack 0: 0x584
2508	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x584
2509	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2510	 1ED	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
2511	 1EE	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
- stack 0: 0xE0
2512	 1F0	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1EB0000
2513	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2514	 1F4	AND		 	 
- stack 1: 0x584
- stack 0: 0x0
2515	 1F5	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x1
2516	 1F7	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x0
2517	 1F8	POP		 	 
- stack 0: 0x584
2518	 1F9	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2519	 1FB	ADD		 	 
- stack 0: 0x588
2520	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2521	 1FD	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xD4014801700001018F000201A9FFE40086000E0156000000A0000001EB0000
2522	 1FE	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xD4014801700001018F000201A9FFE40086000E0156000000A0000001EB0000
- stack 0: 0xF0
2523	 200	SHR		 	 
- stack 1: 0x588
- stack 0: 0xD4
2524	 201	JUMP		 	 
- stack 0: 0x588
2525	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x588
2526	 D5	PUSH2	0020	 	 
- stack 1: 0x588
- stack 0: 0x20
2527	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x588
- stack 0: 0x0
2528	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2529	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0x0
2530	 DF	PUSH2	0040	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x40
2531	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2532	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x588
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
2533	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2534	 E9	EQ		 	 
- stack 1: 0x588
- stack 0: 0x0
2535	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0xF2
2536	 ED	JUMPI		 	 
- stack 0: 0x588
2537	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x588
- stack 0: 0x10C
2538	 F1	JUMP		 	 
- stack 0: 0x588
2539	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x588
2540	 10D	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2541	 10F	ADD		 	 
- stack 0: 0x58C
2542	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2543	 111	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
2544	 112	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
- stack 0: 0xF0
2545	 114	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x170
2546	 115	JUMP		 	 
- stack 0: 0x58C
2547	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x58C
2548	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2549	 172	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
2550	 173	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
- stack 0: 0xE0
2551	 175	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x1700001
2552	 176	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x1700001
- stack 0: 0xFFFF
2553	 179	AND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2554	 17A	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
2555	 17C	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2556	 17D	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x80
2557	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
2558	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x58C
- stack 0: 0x2
2559	 182	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0x80
2560	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x58C
2561	 186	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2562	 188	ADD		 	 
- stack 0: 0x590
2563	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2564	 18A	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BAFFFF
2565	 18B	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BAFFFF
- stack 0: 0xF0
2566	 18D	SHR		 	 
- stack 1: 0x590
- stack 0: 0x18F
2567	 18E	JUMP		 	 
- stack 0: 0x590
2568	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x590
2569	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2570	 191	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BAFFFF
2571	 192	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BAFFFF
- stack 0: 0xE0
2572	 194	SHR		 	 
- stack 1: 0x590
- stack 0: 0x18F0002
2573	 195	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x18F0002
- stack 0: 0xFFFF
2574	 198	AND		 	 
- stack 1: 0x590
- stack 0: 0x2
2575	 199	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0x1
2576	 19B	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x2
2577	 19C	PUSH2	00A0	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0xA0
2578	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x590
2579	 1A0	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2580	 1A2	ADD		 	 
- stack 0: 0x594
2581	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2582	 1A4	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1A9FFE40086000E0156000000A0000001EB000001EB000000BAFFFF00D40120
2583	 1A5	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x1A9FFE40086000E0156000000A0000001EB000001EB000000BAFFFF00D40120
- stack 0: 0xF0
2584	 1A7	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1A9
2585	 1A8	JUMP		 	 
- stack 0: 0x594
2586	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x594
2587	 1AA	PUSH2	0080	 	 
- stack 1: 0x594
- stack 0: 0x80
2588	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x594
- stack 0: 0x2
2589	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2590	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x594
- stack 0: 0x2
2591	 1B4	PUSH2	00A0	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0xA0
2592	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0x2
2593	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x594
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2594	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0x2
2595	 1BE	SUB		 	 
- stack 1: 0x594
- stack 0: 0x0
2596	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1C7
2597	 1C2	JUMPI		 	 
- stack 0: 0x594
2598	 1C3	PUSH2	01E1	 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 1: 0x594
- stack 0: 0x1E1
2599	 1C6	JUMP		 	 
- stack 0: 0x594
2600	 1E1	JUMPDEST		 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x594
2601	 1E2	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2602	 1E4	ADD		 	 
- stack 0: 0x598
2603	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2604	 1E6	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x86000E0156000000A0000001EB000001EB000000BAFFFF00D4012001700001
2605	 1E7	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x86000E0156000000A0000001EB000001EB000000BAFFFF00D4012001700001
- stack 0: 0xF0
2606	 1E9	SHR		 	 
- stack 1: 0x598
- stack 0: 0x86
2607	 1EA	JUMP		 	 
- stack 0: 0x598
2608	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x598
2609	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2610	 88	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x86000E0156000000A0000001EB000001EB000000BAFFFF00D4012001700001
2611	 89	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x86000E0156000000A0000001EB000001EB000000BAFFFF00D4012001700001
- stack 0: 0xE0
2612	 8B	SHR		 	 
- stack 1: 0x598
- stack 0: 0x86000E
2613	 8C	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x86000E
- stack 0: 0xFFFF
2614	 8F	AND		 	 
- stack 1: 0x598
- stack 0: 0xE
2615	 90	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0xE
- stack 0: 0x1
2616	 92	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0xE
2617	 93	PUSH2	0380	 	 
- stack 2: 0x598
- stack 1: 0xE
- stack 0: 0x380
2618	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x598
2619	 97	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2620	 99	ADD		 	 
- stack 0: 0x59C
2621	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2622	 9B	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x156000000A0000001EB000001EB000000BAFFFF00D4012001700001018F0002
2623	 9C	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x156000000A0000001EB000001EB000000BAFFFF00D4012001700001018F0002
- stack 0: 0xF0
2624	 9E	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x156
2625	 9F	JUMP		 	 
- stack 0: 0x59C
2626	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x59C
2627	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2628	 158	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x156000000A0000001EB000001EB000000BAFFFF00D4012001700001018F0002
2629	 159	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x156000000A0000001EB000001EB000000BAFFFF00D4012001700001018F0002
- stack 0: 0xE0
2630	 15B	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x1560000
2631	 15C	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x1560000
- stack 0: 0xFFFF
2632	 15F	AND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2633	 160	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1
2634	 162	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2635	 163	PUSH2	0080	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x80
2636	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x59C
2637	 167	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2638	 169	ADD		 	 
- stack 0: 0x5A0
2639	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2640	 16B	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xA0000001EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE4
2641	 16C	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0xA0000001EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE4
- stack 0: 0xF0
2642	 16E	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xA0
2643	 16F	JUMP		 	 
- stack 0: 0x5A0
2644	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5A0
2645	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2646	 A2	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xA0000001EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE4
2647	 A3	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0xA0000001EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE4
- stack 0: 0xE0
2648	 A5	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xA00000
2649	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0xA00000
- stack 0: 0xFFFF
2650	 A9	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2651	 AA	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x1
2652	 AC	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2653	 AD	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x20
2654	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
2655	 B1	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2656	 B3	ADD		 	 
- stack 0: 0x5A4
2657	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2658	 B5	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F
2659	 B6	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x1EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F
- stack 0: 0xF0
2660	 B8	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1EB
2661	 B9	JUMP		 	 
- stack 0: 0x5A4
2662	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A4
2663	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2664	 1ED	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F
2665	 1EE	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x1EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F
- stack 0: 0xE0
2666	 1F0	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1EB0000
2667	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2668	 1F4	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2669	 1F5	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2670	 1F7	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2671	 1F8	POP		 	 
- stack 0: 0x5A4
2672	 1F9	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2673	 1FB	ADD		 	 
- stack 0: 0x5A8
2674	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2675	 1FD	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F01560000
2676	 1FE	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x1EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F01560000
- stack 0: 0xF0
2677	 200	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB
2678	 201	JUMP		 	 
- stack 0: 0x5A8
2679	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A8
2680	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2681	 1ED	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F01560000
2682	 1EE	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x1EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F01560000
- stack 0: 0xE0
2683	 1F0	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB0000
2684	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2685	 1F4	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2686	 1F5	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2687	 1F7	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2688	 1F8	POP		 	 
- stack 0: 0x5A8
2689	 1F9	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2690	 1FB	ADD		 	 
- stack 0: 0x5AC
2691	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2692	 1FD	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xBAFFFF00D4012001700001018F000201A9FFE40086000F0156000000A00000
2693	 1FE	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0xBAFFFF00D4012001700001018F000201A9FFE40086000F0156000000A00000
- stack 0: 0xF0
2694	 200	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xBA
2695	 201	JUMP		 	 
- stack 0: 0x5AC
2696	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5AC
2697	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2698	 BC	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xBAFFFF00D4012001700001018F000201A9FFE40086000F0156000000A00000
2699	 BD	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0xBAFFFF00D4012001700001018F000201A9FFE40086000F0156000000A00000
- stack 0: 0xE0
2700	 BF	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xBAFFFF
2701	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
2702	 C3	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFF
2703	 C4	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFF
- stack 0: 0x1
2704	 C6	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2705	 C7	PUSH2	0040	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2706	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5AC
2707	 CB	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2708	 CD	ADD		 	 
- stack 0: 0x5B0
2709	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2710	 CF	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xD4012001700001018F000201A9FFE40086000F0156000000A0000000BAFFFF
2711	 D0	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0xD4012001700001018F000201A9FFE40086000F0156000000A0000000BAFFFF
- stack 0: 0xF0
2712	 D2	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xD4
2713	 D3	JUMP		 	 
- stack 0: 0x5B0
2714	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x5B0
2715	 D5	PUSH2	0020	 	 
- stack 1: 0x5B0
- stack 0: 0x20
2716	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5B0
- stack 0: 0x0
2717	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2718	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B0
- stack 0: 0x0
2719	 DF	PUSH2	0040	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x40
2720	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2721	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B0
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
2722	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2723	 E9	EQ		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2724	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0xF2
2725	 ED	JUMPI		 	 
- stack 0: 0x5B0
2726	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x5B0
- stack 0: 0x10C
2727	 F1	JUMP		 	 
- stack 0: 0x5B0
2728	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x5B0
2729	 10D	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2730	 10F	ADD		 	 
- stack 0: 0x5B4
2731	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2732	 111	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1700001018F000201A9FFE40086000F0156000000A0000000BAFFFF00D40100
2733	 112	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x1700001018F000201A9FFE40086000F0156000000A0000000BAFFFF00D40100
- stack 0: 0xF0
2734	 114	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x170
2735	 115	JUMP		 	 
- stack 0: 0x5B4
2736	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B4
2737	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2738	 172	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1700001018F000201A9FFE40086000F0156000000A0000000BAFFFF00D40100
2739	 173	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x1700001018F000201A9FFE40086000F0156000000A0000000BAFFFF00D40100
- stack 0: 0xE0
2740	 175	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1700001
2741	 176	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x1700001
- stack 0: 0xFFFF
2742	 179	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2743	 17A	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
2744	 17C	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2745	 17D	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x80
2746	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x0
2747	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B4
- stack 0: 0x1
2748	 182	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x80
2749	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B4
2750	 186	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2751	 188	ADD		 	 
- stack 0: 0x5B8
2752	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2753	 18A	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x18F000201A9FFE40086000F0156000000A0000000BAFFFF00D4010001700001
2754	 18B	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x18F000201A9FFE40086000F0156000000A0000000BAFFFF00D4010001700001
- stack 0: 0xF0
2755	 18D	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x18F
2756	 18E	JUMP		 	 
- stack 0: 0x5B8
2757	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B8
2758	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2759	 191	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x18F000201A9FFE40086000F0156000000A0000000BAFFFF00D4010001700001
2760	 192	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x18F000201A9FFE40086000F0156000000A0000000BAFFFF00D4010001700001
- stack 0: 0xE0
2761	 194	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x18F0002
2762	 195	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x18F0002
- stack 0: 0xFFFF
2763	 198	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2764	 199	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0x1
2765	 19B	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2766	 19C	PUSH2	00A0	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0xA0
2767	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B8
2768	 1A0	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2769	 1A2	ADD		 	 
- stack 0: 0x5BC
2770	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2771	 1A4	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x1A9FFE40086000F0156000000A0000000BAFFFF00D4010001700001018F0002
2772	 1A5	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x1A9FFE40086000F0156000000A0000000BAFFFF00D4010001700001018F0002
- stack 0: 0xF0
2773	 1A7	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x1A9
2774	 1A8	JUMP		 	 
- stack 0: 0x5BC
2775	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5BC
2776	 1AA	PUSH2	0080	 	 
- stack 1: 0x5BC
- stack 0: 0x80
2777	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x5BC
- stack 0: 0x1
2778	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2779	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x1
2780	 1B4	PUSH2	00A0	 	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0xA0
2781	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x2
2782	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2783	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x2
2784	 1BE	SUB		 	 
- stack 1: 0x5BC
- stack 0: 0x1
2785	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x1C7
2786	 1C2	JUMPI		 	 
- stack 0: 0x5BC
2787	 1C7	JUMPDEST		 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x5BC
2788	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2789	 1C9	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x1A9FFE40086000F0156000000A0000000BAFFFF00D4010001700001018F0002
2790	 1CA	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x1A9FFE40086000F0156000000A0000000BAFFFF00D4010001700001018F0002
- stack 0: 0xE0
2791	 1CC	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x1A9FFE4
2792	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x1A9FFE4
- stack 0: 0xFFFF
2793	 1D0	AND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFE4
2794	 1D1	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0xFFE4
- stack 0: 0x1
2795	 1D3	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2796	 1D4	ADD		 	 
- stack 0: 0x5A0
2797	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5A0
- stack 0: 0xFFFFFFFF
2798	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5A0
2799	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2800	 1DC	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xA0000001EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE4
2801	 1DD	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0xA0000001EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE4
- stack 0: 0xF0
2802	 1DF	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xA0
2803	 1E0	JUMP		 	 
- stack 0: 0x5A0
2804	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5A0
2805	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2806	 A2	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xA0000001EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE4
2807	 A3	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0xA0000001EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE4
- stack 0: 0xE0
2808	 A5	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xA00000
2809	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0xA00000
- stack 0: 0xFFFF
2810	 A9	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2811	 AA	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x1
2812	 AC	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2813	 AD	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x20
2814	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
2815	 B1	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2816	 B3	ADD		 	 
- stack 0: 0x5A4
2817	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2818	 B5	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F
2819	 B6	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x1EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F
- stack 0: 0xF0
2820	 B8	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1EB
2821	 B9	JUMP		 	 
- stack 0: 0x5A4
2822	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A4
2823	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2824	 1ED	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F
2825	 1EE	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x1EB000001EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F
- stack 0: 0xE0
2826	 1F0	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1EB0000
2827	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2828	 1F4	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2829	 1F5	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2830	 1F7	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2831	 1F8	POP		 	 
- stack 0: 0x5A4
2832	 1F9	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2833	 1FB	ADD		 	 
- stack 0: 0x5A8
2834	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2835	 1FD	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F01560000
2836	 1FE	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x1EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F01560000
- stack 0: 0xF0
2837	 200	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB
2838	 201	JUMP		 	 
- stack 0: 0x5A8
2839	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A8
2840	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2841	 1ED	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F01560000
2842	 1EE	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x1EB000000BAFFFF00D4012001700001018F000201A9FFE40086000F01560000
- stack 0: 0xE0
2843	 1F0	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB0000
2844	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2845	 1F4	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2846	 1F5	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2847	 1F7	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2848	 1F8	POP		 	 
- stack 0: 0x5A8
2849	 1F9	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2850	 1FB	ADD		 	 
- stack 0: 0x5AC
2851	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2852	 1FD	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xBAFFFF00D4012001700001018F000201A9FFE40086000F0156000000A00000
2853	 1FE	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0xBAFFFF00D4012001700001018F000201A9FFE40086000F0156000000A00000
- stack 0: 0xF0
2854	 200	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xBA
2855	 201	JUMP		 	 
- stack 0: 0x5AC
2856	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5AC
2857	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2858	 BC	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xBAFFFF00D4012001700001018F000201A9FFE40086000F0156000000A00000
2859	 BD	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0xBAFFFF00D4012001700001018F000201A9FFE40086000F0156000000A00000
- stack 0: 0xE0
2860	 BF	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xBAFFFF
2861	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
2862	 C3	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFF
2863	 C4	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFF
- stack 0: 0x1
2864	 C6	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2865	 C7	PUSH2	0040	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2866	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5AC
2867	 CB	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2868	 CD	ADD		 	 
- stack 0: 0x5B0
2869	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2870	 CF	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xD4012001700001018F000201A9FFE40086000F0156000000A0000000BAFFFF
2871	 D0	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0xD4012001700001018F000201A9FFE40086000F0156000000A0000000BAFFFF
- stack 0: 0xF0
2872	 D2	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xD4
2873	 D3	JUMP		 	 
- stack 0: 0x5B0
2874	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x5B0
2875	 D5	PUSH2	0020	 	 
- stack 1: 0x5B0
- stack 0: 0x20
2876	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5B0
- stack 0: 0x0
2877	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2878	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B0
- stack 0: 0x0
2879	 DF	PUSH2	0040	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x40
2880	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2881	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B0
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
2882	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2883	 E9	EQ		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2884	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0xF2
2885	 ED	JUMPI		 	 
- stack 0: 0x5B0
2886	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x5B0
- stack 0: 0x10C
2887	 F1	JUMP		 	 
- stack 0: 0x5B0
2888	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x5B0
2889	 10D	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2890	 10F	ADD		 	 
- stack 0: 0x5B4
2891	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2892	 111	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1700001018F000201A9FFE40086000F0156000000A0000000BAFFFF00D40100
2893	 112	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x1700001018F000201A9FFE40086000F0156000000A0000000BAFFFF00D40100
- stack 0: 0xF0
2894	 114	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x170
2895	 115	JUMP		 	 
- stack 0: 0x5B4
2896	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B4
2897	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2898	 172	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1700001018F000201A9FFE40086000F0156000000A0000000BAFFFF00D40100
2899	 173	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x1700001018F000201A9FFE40086000F0156000000A0000000BAFFFF00D40100
- stack 0: 0xE0
2900	 175	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1700001
2901	 176	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x1700001
- stack 0: 0xFFFF
2902	 179	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2903	 17A	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
2904	 17C	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2905	 17D	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x80
2906	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
2907	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B4
- stack 0: 0x2
2908	 182	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0x80
2909	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B4
2910	 186	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2911	 188	ADD		 	 
- stack 0: 0x5B8
2912	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2913	 18A	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x18F000201A9FFE40086000F0156000000A0000000BAFFFF00D4010001700001
2914	 18B	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x18F000201A9FFE40086000F0156000000A0000000BAFFFF00D4010001700001
- stack 0: 0xF0
2915	 18D	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x18F
2916	 18E	JUMP		 	 
- stack 0: 0x5B8
2917	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B8
2918	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2919	 191	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x18F000201A9FFE40086000F0156000000A0000000BAFFFF00D4010001700001
2920	 192	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x18F000201A9FFE40086000F0156000000A0000000BAFFFF00D4010001700001
- stack 0: 0xE0
2921	 194	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x18F0002
2922	 195	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x18F0002
- stack 0: 0xFFFF
2923	 198	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2924	 199	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0x1
2925	 19B	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2926	 19C	PUSH2	00A0	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0xA0
2927	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B8
2928	 1A0	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2929	 1A2	ADD		 	 
- stack 0: 0x5BC
2930	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2931	 1A4	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x1A9FFE40086000F0156000000A0000000BAFFFF00D4010001700001018F0002
2932	 1A5	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x1A9FFE40086000F0156000000A0000000BAFFFF00D4010001700001018F0002
- stack 0: 0xF0
2933	 1A7	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x1A9
2934	 1A8	JUMP		 	 
- stack 0: 0x5BC
2935	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5BC
2936	 1AA	PUSH2	0080	 	 
- stack 1: 0x5BC
- stack 0: 0x80
2937	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x5BC
- stack 0: 0x2
2938	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2939	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x2
2940	 1B4	PUSH2	00A0	 	 
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0xA0
2941	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0x2
2942	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2943	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0x2
2944	 1BE	SUB		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2945	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x1C7
2946	 1C2	JUMPI		 	 
- stack 0: 0x5BC
2947	 1C3	PUSH2	01E1	 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 1: 0x5BC
- stack 0: 0x1E1
2948	 1C6	JUMP		 	 
- stack 0: 0x5BC
2949	 1E1	JUMPDEST		 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x5BC
2950	 1E2	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2951	 1E4	ADD		 	 
- stack 0: 0x5C0
2952	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2953	 1E6	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x86000F0156000000A0000000BAFFFF00D4010001700001018F000201A9FFEC
2954	 1E7	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x86000F0156000000A0000000BAFFFF00D4010001700001018F000201A9FFEC
- stack 0: 0xF0
2955	 1E9	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x86
2956	 1EA	JUMP		 	 
- stack 0: 0x5C0
2957	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5C0
2958	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2959	 88	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x86000F0156000000A0000000BAFFFF00D4010001700001018F000201A9FFEC
2960	 89	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x86000F0156000000A0000000BAFFFF00D4010001700001018F000201A9FFEC
- stack 0: 0xE0
2961	 8B	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x86000F
2962	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x86000F
- stack 0: 0xFFFF
2963	 8F	AND		 	 
- stack 1: 0x5C0
- stack 0: 0xF
2964	 90	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xF
- stack 0: 0x1
2965	 92	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xF
2966	 93	PUSH2	0380	 	 
- stack 2: 0x5C0
- stack 1: 0xF
- stack 0: 0x380
2967	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x5C0
2968	 97	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2969	 99	ADD		 	 
- stack 0: 0x5C4
2970	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2971	 9B	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x156000000A0000000BAFFFF00D4010001700001018F000201A9FFEC00860010
2972	 9C	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x156000000A0000000BAFFFF00D4010001700001018F000201A9FFEC00860010
- stack 0: 0xF0
2973	 9E	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x156
2974	 9F	JUMP		 	 
- stack 0: 0x5C4
2975	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5C4
2976	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2977	 158	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x156000000A0000000BAFFFF00D4010001700001018F000201A9FFEC00860010
2978	 159	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x156000000A0000000BAFFFF00D4010001700001018F000201A9FFEC00860010
- stack 0: 0xE0
2979	 15B	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x1560000
2980	 15C	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x1560000
- stack 0: 0xFFFF
2981	 15F	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2982	 160	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x1
2983	 162	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2984	 163	PUSH2	0080	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x80
2985	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C4
2986	 167	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2987	 169	ADD		 	 
- stack 0: 0x5C8
2988	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2989	 16B	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xA0000000BAFFFF00D4010001700001018F000201A9FFEC0086001001560000
2990	 16C	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0xA0000000BAFFFF00D4010001700001018F000201A9FFEC0086001001560000
- stack 0: 0xF0
2991	 16E	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xA0
2992	 16F	JUMP		 	 
- stack 0: 0x5C8
2993	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5C8
2994	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2995	 A2	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xA0000000BAFFFF00D4010001700001018F000201A9FFEC0086001001560000
2996	 A3	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0xA0000000BAFFFF00D4010001700001018F000201A9FFEC0086001001560000
- stack 0: 0xE0
2997	 A5	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xA00000
2998	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0xA00000
- stack 0: 0xFFFF
2999	 A9	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
3000	 AA	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x1
3001	 AC	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
3002	 AD	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x20
3003	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
3004	 B1	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
3005	 B3	ADD		 	 
- stack 0: 0x5CC
3006	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
3007	 B5	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xBAFFFF00D4010001700001018F000201A9FFEC008600100156000000A00000
3008	 B6	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xBAFFFF00D4010001700001018F000201A9FFEC008600100156000000A00000
- stack 0: 0xF0
3009	 B8	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xBA
3010	 B9	JUMP		 	 
- stack 0: 0x5CC
3011	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5CC
3012	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
3013	 BC	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xBAFFFF00D4010001700001018F000201A9FFEC008600100156000000A00000
3014	 BD	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0xBAFFFF00D4010001700001018F000201A9FFEC008600100156000000A00000
- stack 0: 0xE0
3015	 BF	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xBAFFFF
3016	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
3017	 C3	AND		 	 
- stack 1: 0x5CC
- stack 0: 0xFFFF
3018	 C4	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0xFFFF
- stack 0: 0x1
3019	 C6	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3020	 C7	PUSH2	0040	 	 
- stack 2: 0x5CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3021	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5CC
3022	 CB	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
3023	 CD	ADD		 	 
- stack 0: 0x5D0
3024	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
3025	 CF	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xD4010001700001018F000201A9FFEC008600100156000000A0000000BAFFFF
3026	 D0	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xD4010001700001018F000201A9FFEC008600100156000000A0000000BAFFFF
- stack 0: 0xF0
3027	 D2	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xD4
3028	 D3	JUMP		 	 
- stack 0: 0x5D0
3029	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x5D0
3030	 D5	PUSH2	0020	 	 
- stack 1: 0x5D0
- stack 0: 0x20
3031	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5D0
- stack 0: 0x0
3032	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3033	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D0
- stack 0: 0x0
3034	 DF	PUSH2	0040	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x40
3035	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3036	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D0
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
3037	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3038	 E9	EQ		 	 
- stack 1: 0x5D0
- stack 0: 0x0
3039	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0xF2
3040	 ED	JUMPI		 	 
- stack 0: 0x5D0
3041	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x5D0
- stack 0: 0x10C
3042	 F1	JUMP		 	 
- stack 0: 0x5D0
3043	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x5D0
3044	 10D	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
3045	 10F	ADD		 	 
- stack 0: 0x5D4
3046	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3047	 111	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x1700001018F000201A9FFEC008600100156000000A0000000BAFFFF01EB0000
3048	 112	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x1700001018F000201A9FFEC008600100156000000A0000000BAFFFF01EB0000
- stack 0: 0xF0
3049	 114	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x170
3050	 115	JUMP		 	 
- stack 0: 0x5D4
3051	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D4
3052	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
3053	 172	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x1700001018F000201A9FFEC008600100156000000A0000000BAFFFF01EB0000
3054	 173	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x1700001018F000201A9FFEC008600100156000000A0000000BAFFFF01EB0000
- stack 0: 0xE0
3055	 175	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x1700001
3056	 176	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x1700001
- stack 0: 0xFFFF
3057	 179	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x1
3058	 17A	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x1
3059	 17C	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x1
3060	 17D	PUSH2	0080	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x80
3061	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x0
3062	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D4
- stack 0: 0x1
3063	 182	PUSH2	0080	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x80
3064	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D4
3065	 186	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3066	 188	ADD		 	 
- stack 0: 0x5D8
3067	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3068	 18A	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x18F000201A9FFEC008600100156000000A0000000BAFFFF01EB000000D400DC
3069	 18B	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x18F000201A9FFEC008600100156000000A0000000BAFFFF01EB000000D400DC
- stack 0: 0xF0
3070	 18D	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x18F
3071	 18E	JUMP		 	 
- stack 0: 0x5D8
3072	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D8
3073	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
3074	 191	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x18F000201A9FFEC008600100156000000A0000000BAFFFF01EB000000D400DC
3075	 192	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x18F000201A9FFEC008600100156000000A0000000BAFFFF01EB000000D400DC
- stack 0: 0xE0
3076	 194	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x18F0002
3077	 195	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x18F0002
- stack 0: 0xFFFF
3078	 198	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x2
3079	 199	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0x1
3080	 19B	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x2
3081	 19C	PUSH2	00A0	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0xA0
3082	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D8
3083	 1A0	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3084	 1A2	ADD		 	 
- stack 0: 0x5DC
3085	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3086	 1A4	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x1A9FFEC008600100156000000A0000000BAFFFF01EB000000D400DC01700001
3087	 1A5	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x1A9FFEC008600100156000000A0000000BAFFFF01EB000000D400DC01700001
- stack 0: 0xF0
3088	 1A7	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x1A9
3089	 1A8	JUMP		 	 
- stack 0: 0x5DC
3090	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5DC
3091	 1AA	PUSH2	0080	 	 
- stack 1: 0x5DC
- stack 0: 0x80
3092	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x5DC
- stack 0: 0x1
3093	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3094	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5DC
- stack 0: 0x1
3095	 1B4	PUSH2	00A0	 	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0xA0
3096	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x2
3097	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5DC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3098	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x2
3099	 1BE	SUB		 	 
- stack 1: 0x5DC
- stack 0: 0x1
3100	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x1C7
3101	 1C2	JUMPI		 	 
- stack 0: 0x5DC
3102	 1C7	JUMPDEST		 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x5DC
3103	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
3104	 1C9	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x1A9FFEC008600100156000000A0000000BAFFFF01EB000000D400DC01700001
3105	 1CA	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x1A9FFEC008600100156000000A0000000BAFFFF01EB000000D400DC01700001
- stack 0: 0xE0
3106	 1CC	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x1A9FFEC
3107	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x1A9FFEC
- stack 0: 0xFFFF
3108	 1D0	AND		 	 
- stack 1: 0x5DC
- stack 0: 0xFFEC
3109	 1D1	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0xFFEC
- stack 0: 0x1
3110	 1D3	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
3111	 1D4	ADD		 	 
- stack 0: 0x5C8
3112	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFF
3113	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5C8
3114	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
3115	 1DC	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xA0000000BAFFFF00D4010001700001018F000201A9FFEC0086001001560000
3116	 1DD	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0xA0000000BAFFFF00D4010001700001018F000201A9FFEC0086001001560000
- stack 0: 0xF0
3117	 1DF	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xA0
3118	 1E0	JUMP		 	 
- stack 0: 0x5C8
3119	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5C8
3120	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
3121	 A2	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xA0000000BAFFFF00D4010001700001018F000201A9FFEC0086001001560000
3122	 A3	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0xA0000000BAFFFF00D4010001700001018F000201A9FFEC0086001001560000
- stack 0: 0xE0
3123	 A5	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xA00000
3124	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0xA00000
- stack 0: 0xFFFF
3125	 A9	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
3126	 AA	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x1
3127	 AC	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
3128	 AD	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x20
3129	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
3130	 B1	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
3131	 B3	ADD		 	 
- stack 0: 0x5CC
3132	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
3133	 B5	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xBAFFFF00D4010001700001018F000201A9FFEC008600100156000000A00000
3134	 B6	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xBAFFFF00D4010001700001018F000201A9FFEC008600100156000000A00000
- stack 0: 0xF0
3135	 B8	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xBA
3136	 B9	JUMP		 	 
- stack 0: 0x5CC
3137	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5CC
3138	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
3139	 BC	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xBAFFFF00D4010001700001018F000201A9FFEC008600100156000000A00000
3140	 BD	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0xBAFFFF00D4010001700001018F000201A9FFEC008600100156000000A00000
- stack 0: 0xE0
3141	 BF	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xBAFFFF
3142	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
3143	 C3	AND		 	 
- stack 1: 0x5CC
- stack 0: 0xFFFF
3144	 C4	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0xFFFF
- stack 0: 0x1
3145	 C6	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3146	 C7	PUSH2	0040	 	 
- stack 2: 0x5CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3147	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5CC
3148	 CB	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
3149	 CD	ADD		 	 
- stack 0: 0x5D0
3150	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
3151	 CF	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xD4010001700001018F000201A9FFEC008600100156000000A0000000BAFFFF
3152	 D0	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xD4010001700001018F000201A9FFEC008600100156000000A0000000BAFFFF
- stack 0: 0xF0
3153	 D2	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xD4
3154	 D3	JUMP		 	 
- stack 0: 0x5D0
3155	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x5D0
3156	 D5	PUSH2	0020	 	 
- stack 1: 0x5D0
- stack 0: 0x20
3157	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5D0
- stack 0: 0x0
3158	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3159	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D0
- stack 0: 0x0
3160	 DF	PUSH2	0040	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x40
3161	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3162	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D0
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
3163	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3164	 E9	EQ		 	 
- stack 1: 0x5D0
- stack 0: 0x0
3165	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0xF2
3166	 ED	JUMPI		 	 
- stack 0: 0x5D0
3167	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x5D0
- stack 0: 0x10C
3168	 F1	JUMP		 	 
- stack 0: 0x5D0
3169	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x5D0
3170	 10D	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
3171	 10F	ADD		 	 
- stack 0: 0x5D4
3172	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3173	 111	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x1700001018F000201A9FFEC008600100156000000A0000000BAFFFF01EB0000
3174	 112	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x1700001018F000201A9FFEC008600100156000000A0000000BAFFFF01EB0000
- stack 0: 0xF0
3175	 114	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x170
3176	 115	JUMP		 	 
- stack 0: 0x5D4
3177	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D4
3178	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
3179	 172	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x1700001018F000201A9FFEC008600100156000000A0000000BAFFFF01EB0000
3180	 173	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x1700001018F000201A9FFEC008600100156000000A0000000BAFFFF01EB0000
- stack 0: 0xE0
3181	 175	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x1700001
3182	 176	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x1700001
- stack 0: 0xFFFF
3183	 179	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x1
3184	 17A	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x1
3185	 17C	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x1
3186	 17D	PUSH2	0080	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x80
3187	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x1
3188	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D4
- stack 0: 0x2
3189	 182	PUSH2	0080	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x80
3190	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D4
3191	 186	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3192	 188	ADD		 	 
- stack 0: 0x5D8
3193	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3194	 18A	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x18F000201A9FFEC008600100156000000A0000000BAFFFF01EB000000D400DC
3195	 18B	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x18F000201A9FFEC008600100156000000A0000000BAFFFF01EB000000D400DC
- stack 0: 0xF0
3196	 18D	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x18F
3197	 18E	JUMP		 	 
- stack 0: 0x5D8
3198	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D8
3199	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
3200	 191	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x18F000201A9FFEC008600100156000000A0000000BAFFFF01EB000000D400DC
3201	 192	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x18F000201A9FFEC008600100156000000A0000000BAFFFF01EB000000D400DC
- stack 0: 0xE0
3202	 194	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x18F0002
3203	 195	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x18F0002
- stack 0: 0xFFFF
3204	 198	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x2
3205	 199	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0x1
3206	 19B	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x2
3207	 19C	PUSH2	00A0	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0xA0
3208	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D8
3209	 1A0	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3210	 1A2	ADD		 	 
- stack 0: 0x5DC
3211	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3212	 1A4	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x1A9FFEC008600100156000000A0000000BAFFFF01EB000000D400DC01700001
3213	 1A5	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x1A9FFEC008600100156000000A0000000BAFFFF01EB000000D400DC01700001
- stack 0: 0xF0
3214	 1A7	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x1A9
3215	 1A8	JUMP		 	 
- stack 0: 0x5DC
3216	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5DC
3217	 1AA	PUSH2	0080	 	 
- stack 1: 0x5DC
- stack 0: 0x80
3218	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x5DC
- stack 0: 0x2
3219	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3220	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5DC
- stack 0: 0x2
3221	 1B4	PUSH2	00A0	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0xA0
3222	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0x2
3223	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5DC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3224	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0x2
3225	 1BE	SUB		 	 
- stack 1: 0x5DC
- stack 0: 0x0
3226	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x1C7
3227	 1C2	JUMPI		 	 
- stack 0: 0x5DC
3228	 1C3	PUSH2	01E1	 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 1: 0x5DC
- stack 0: 0x1E1
3229	 1C6	JUMP		 	 
- stack 0: 0x5DC
3230	 1E1	JUMPDEST		 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x5DC
3231	 1E2	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
3232	 1E4	ADD		 	 
- stack 0: 0x5E0
3233	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
3234	 1E6	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x8600100156000000A0000000BAFFFF01EB000000D400DC01700001018F0002
3235	 1E7	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x8600100156000000A0000000BAFFFF01EB000000D400DC01700001018F0002
- stack 0: 0xF0
3236	 1E9	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x86
3237	 1EA	JUMP		 	 
- stack 0: 0x5E0
3238	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5E0
3239	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
3240	 88	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x8600100156000000A0000000BAFFFF01EB000000D400DC01700001018F0002
3241	 89	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x8600100156000000A0000000BAFFFF01EB000000D400DC01700001018F0002
- stack 0: 0xE0
3242	 8B	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x860010
3243	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x860010
- stack 0: 0xFFFF
3244	 8F	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x10
3245	 90	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x10
- stack 0: 0x1
3246	 92	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x10
3247	 93	PUSH2	0380	 	 
- stack 2: 0x5E0
- stack 1: 0x10
- stack 0: 0x380
3248	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x5E0
3249	 97	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
3250	 99	ADD		 	 
- stack 0: 0x5E4
3251	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3252	 9B	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x156000000A0000000BAFFFF01EB000000D400DC01700001018F000201A9FFE8
3253	 9C	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x156000000A0000000BAFFFF01EB000000D400DC01700001018F000201A9FFE8
- stack 0: 0xF0
3254	 9E	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x156
3255	 9F	JUMP		 	 
- stack 0: 0x5E4
3256	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5E4
3257	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
3258	 158	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x156000000A0000000BAFFFF01EB000000D400DC01700001018F000201A9FFE8
3259	 159	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x156000000A0000000BAFFFF01EB000000D400DC01700001018F000201A9FFE8
- stack 0: 0xE0
3260	 15B	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1560000
3261	 15C	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x1560000
- stack 0: 0xFFFF
3262	 15F	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x0
3263	 160	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x1
3264	 162	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x0
3265	 163	PUSH2	0080	 	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x80
3266	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E4
3267	 167	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3268	 169	ADD		 	 
- stack 0: 0x5E8
3269	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3270	 16B	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xA0000000BAFFFF01EB000000D400DC01700001018F000201A9FFE800860011
3271	 16C	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0xA0000000BAFFFF01EB000000D400DC01700001018F000201A9FFE800860011
- stack 0: 0xF0
3272	 16E	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xA0
3273	 16F	JUMP		 	 
- stack 0: 0x5E8
3274	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5E8
3275	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
3276	 A2	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xA0000000BAFFFF01EB000000D400DC01700001018F000201A9FFE800860011
3277	 A3	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0xA0000000BAFFFF01EB000000D400DC01700001018F000201A9FFE800860011
- stack 0: 0xE0
3278	 A5	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xA00000
3279	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0xA00000
- stack 0: 0xFFFF
3280	 A9	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3281	 AA	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x1
3282	 AC	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3283	 AD	PUSH2	0020	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x20
3284	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E8
3285	 B1	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3286	 B3	ADD		 	 
- stack 0: 0x5EC
3287	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3288	 B5	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xBAFFFF01EB000000D400DC01700001018F000201A9FFE80086001101560000
3289	 B6	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0xBAFFFF01EB000000D400DC01700001018F000201A9FFE80086001101560000
- stack 0: 0xF0
3290	 B8	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xBA
3291	 B9	JUMP		 	 
- stack 0: 0x5EC
3292	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5EC
3293	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
3294	 BC	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xBAFFFF01EB000000D400DC01700001018F000201A9FFE80086001101560000
3295	 BD	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0xBAFFFF01EB000000D400DC01700001018F000201A9FFE80086001101560000
- stack 0: 0xE0
3296	 BF	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xBAFFFF
3297	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
3298	 C3	AND		 	 
- stack 1: 0x5EC
- stack 0: 0xFFFF
3299	 C4	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFF
- stack 0: 0x1
3300	 C6	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3301	 C7	PUSH2	0040	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3302	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5EC
3303	 CB	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3304	 CD	ADD		 	 
- stack 0: 0x5F0
3305	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3306	 CF	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
3307	 D0	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
- stack 0: 0xF0
3308	 D2	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x1EB
3309	 D3	JUMP		 	 
- stack 0: 0x5F0
3310	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5F0
3311	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3312	 1ED	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
3313	 1EE	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
- stack 0: 0xE0
3314	 1F0	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x1EB0000
3315	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
3316	 1F4	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3317	 1F5	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x1
3318	 1F7	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3319	 1F8	POP		 	 
- stack 0: 0x5F0
3320	 1F9	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3321	 1FB	ADD		 	 
- stack 0: 0x5F4
3322	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3323	 1FD	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0xD400DC01700001018F000201A9FFE8008600110156000000A0000000BAFFFF
3324	 1FE	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0xD400DC01700001018F000201A9FFE8008600110156000000A0000000BAFFFF
- stack 0: 0xF0
3325	 200	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0xD4
3326	 201	JUMP		 	 
- stack 0: 0x5F4
3327	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x5F4
3328	 D5	PUSH2	0020	 	 
- stack 1: 0x5F4
- stack 0: 0x20
3329	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5F4
- stack 0: 0x0
3330	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3331	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x0
3332	 DF	PUSH2	0040	 	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x40
3333	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3334	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
3335	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3336	 E9	EQ		 	 
- stack 1: 0x5F4
- stack 0: 0x0
3337	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0xF2
3338	 ED	JUMPI		 	 
- stack 0: 0x5F4
3339	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x5F4
- stack 0: 0x10C
3340	 F1	JUMP		 	 
- stack 0: 0x5F4
3341	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x5F4
3342	 10D	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3343	 10F	ADD		 	 
- stack 0: 0x5F8
3344	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3345	 111	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1700001018F000201A9FFE8008600110156000000A0000000BAFFFF01EB0000
3346	 112	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x1700001018F000201A9FFE8008600110156000000A0000000BAFFFF01EB0000
- stack 0: 0xF0
3347	 114	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x170
3348	 115	JUMP		 	 
- stack 0: 0x5F8
3349	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5F8
3350	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3351	 172	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1700001018F000201A9FFE8008600110156000000A0000000BAFFFF01EB0000
3352	 173	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x1700001018F000201A9FFE8008600110156000000A0000000BAFFFF01EB0000
- stack 0: 0xE0
3353	 175	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1700001
3354	 176	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x1700001
- stack 0: 0xFFFF
3355	 179	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
3356	 17A	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x1
3357	 17C	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
3358	 17D	PUSH2	0080	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x80
3359	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x0
3360	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x5F8
- stack 0: 0x1
3361	 182	PUSH2	0080	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x80
3362	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x5F8
3363	 186	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3364	 188	ADD		 	 
- stack 0: 0x5FC
3365	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3366	 18A	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x18F000201A9FFE8008600110156000000A0000000BAFFFF01EB000001EB0000
3367	 18B	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x18F000201A9FFE8008600110156000000A0000000BAFFFF01EB000001EB0000
- stack 0: 0xF0
3368	 18D	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x18F
3369	 18E	JUMP		 	 
- stack 0: 0x5FC
3370	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5FC
3371	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3372	 191	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x18F000201A9FFE8008600110156000000A0000000BAFFFF01EB000001EB0000
3373	 192	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x18F000201A9FFE8008600110156000000A0000000BAFFFF01EB000001EB0000
- stack 0: 0xE0
3374	 194	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x18F0002
3375	 195	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x18F0002
- stack 0: 0xFFFF
3376	 198	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x2
3377	 199	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x2
- stack 0: 0x1
3378	 19B	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x2
3379	 19C	PUSH2	00A0	 	 
- stack 2: 0x5FC
- stack 1: 0x2
- stack 0: 0xA0
3380	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x5FC
3381	 1A0	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3382	 1A2	ADD		 	 
- stack 0: 0x600
3383	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3384	 1A4	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x1A9FFE8008600110156000000A0000000BAFFFF01EB000001EB000000D400B4
3385	 1A5	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x1A9FFE8008600110156000000A0000000BAFFFF01EB000001EB000000D400B4
- stack 0: 0xF0
3386	 1A7	SHR		 	 
- stack 1: 0x600
- stack 0: 0x1A9
3387	 1A8	JUMP		 	 
- stack 0: 0x600
3388	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x600
3389	 1AA	PUSH2	0080	 	 
- stack 1: 0x600
- stack 0: 0x80
3390	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x600
- stack 0: 0x1
3391	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3392	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x600
- stack 0: 0x1
3393	 1B4	PUSH2	00A0	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0xA0
3394	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x2
3395	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x600
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3396	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x2
3397	 1BE	SUB		 	 
- stack 1: 0x600
- stack 0: 0x1
3398	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1C7
3399	 1C2	JUMPI		 	 
- stack 0: 0x600
3400	 1C7	JUMPDEST		 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x600
3401	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3402	 1C9	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x1A9FFE8008600110156000000A0000000BAFFFF01EB000001EB000000D400B4
3403	 1CA	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x1A9FFE8008600110156000000A0000000BAFFFF01EB000001EB000000D400B4
- stack 0: 0xE0
3404	 1CC	SHR		 	 
- stack 1: 0x600
- stack 0: 0x1A9FFE8
3405	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x1A9FFE8
- stack 0: 0xFFFF
3406	 1D0	AND		 	 
- stack 1: 0x600
- stack 0: 0xFFE8
3407	 1D1	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0xFFE8
- stack 0: 0x1
3408	 1D3	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
3409	 1D4	ADD		 	 
- stack 0: 0x5E8
3410	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5E8
- stack 0: 0xFFFFFFFF
3411	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5E8
3412	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3413	 1DC	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xA0000000BAFFFF01EB000000D400DC01700001018F000201A9FFE800860011
3414	 1DD	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0xA0000000BAFFFF01EB000000D400DC01700001018F000201A9FFE800860011
- stack 0: 0xF0
3415	 1DF	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xA0
3416	 1E0	JUMP		 	 
- stack 0: 0x5E8
3417	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5E8
3418	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
3419	 A2	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xA0000000BAFFFF01EB000000D400DC01700001018F000201A9FFE800860011
3420	 A3	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0xA0000000BAFFFF01EB000000D400DC01700001018F000201A9FFE800860011
- stack 0: 0xE0
3421	 A5	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xA00000
3422	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0xA00000
- stack 0: 0xFFFF
3423	 A9	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3424	 AA	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x1
3425	 AC	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3426	 AD	PUSH2	0020	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x20
3427	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E8
3428	 B1	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3429	 B3	ADD		 	 
- stack 0: 0x5EC
3430	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3431	 B5	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xBAFFFF01EB000000D400DC01700001018F000201A9FFE80086001101560000
3432	 B6	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0xBAFFFF01EB000000D400DC01700001018F000201A9FFE80086001101560000
- stack 0: 0xF0
3433	 B8	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xBA
3434	 B9	JUMP		 	 
- stack 0: 0x5EC
3435	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5EC
3436	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
3437	 BC	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xBAFFFF01EB000000D400DC01700001018F000201A9FFE80086001101560000
3438	 BD	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0xBAFFFF01EB000000D400DC01700001018F000201A9FFE80086001101560000
- stack 0: 0xE0
3439	 BF	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xBAFFFF
3440	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
3441	 C3	AND		 	 
- stack 1: 0x5EC
- stack 0: 0xFFFF
3442	 C4	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFF
- stack 0: 0x1
3443	 C6	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3444	 C7	PUSH2	0040	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3445	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5EC
3446	 CB	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3447	 CD	ADD		 	 
- stack 0: 0x5F0
3448	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3449	 CF	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
3450	 D0	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
- stack 0: 0xF0
3451	 D2	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x1EB
3452	 D3	JUMP		 	 
- stack 0: 0x5F0
3453	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5F0
3454	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3455	 1ED	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
3456	 1EE	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
- stack 0: 0xE0
3457	 1F0	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x1EB0000
3458	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
3459	 1F4	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3460	 1F5	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x1
3461	 1F7	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3462	 1F8	POP		 	 
- stack 0: 0x5F0
3463	 1F9	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3464	 1FB	ADD		 	 
- stack 0: 0x5F4
3465	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3466	 1FD	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0xD400DC01700001018F000201A9FFE8008600110156000000A0000000BAFFFF
3467	 1FE	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0xD400DC01700001018F000201A9FFE8008600110156000000A0000000BAFFFF
- stack 0: 0xF0
3468	 200	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0xD4
3469	 201	JUMP		 	 
- stack 0: 0x5F4
3470	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x5F4
3471	 D5	PUSH2	0020	 	 
- stack 1: 0x5F4
- stack 0: 0x20
3472	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5F4
- stack 0: 0x0
3473	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3474	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x0
3475	 DF	PUSH2	0040	 	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x40
3476	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3477	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
3478	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3479	 E9	EQ		 	 
- stack 1: 0x5F4
- stack 0: 0x0
3480	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0xF2
3481	 ED	JUMPI		 	 
- stack 0: 0x5F4
3482	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x5F4
- stack 0: 0x10C
3483	 F1	JUMP		 	 
- stack 0: 0x5F4
3484	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x5F4
3485	 10D	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3486	 10F	ADD		 	 
- stack 0: 0x5F8
3487	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3488	 111	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1700001018F000201A9FFE8008600110156000000A0000000BAFFFF01EB0000
3489	 112	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x1700001018F000201A9FFE8008600110156000000A0000000BAFFFF01EB0000
- stack 0: 0xF0
3490	 114	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x170
3491	 115	JUMP		 	 
- stack 0: 0x5F8
3492	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5F8
3493	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3494	 172	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1700001018F000201A9FFE8008600110156000000A0000000BAFFFF01EB0000
3495	 173	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x1700001018F000201A9FFE8008600110156000000A0000000BAFFFF01EB0000
- stack 0: 0xE0
3496	 175	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1700001
3497	 176	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x1700001
- stack 0: 0xFFFF
3498	 179	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
3499	 17A	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x1
3500	 17C	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
3501	 17D	PUSH2	0080	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x80
3502	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x1
3503	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x5F8
- stack 0: 0x2
3504	 182	PUSH2	0080	 	 
- stack 2: 0x5F8
- stack 1: 0x2
- stack 0: 0x80
3505	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x5F8
3506	 186	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3507	 188	ADD		 	 
- stack 0: 0x5FC
3508	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3509	 18A	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x18F000201A9FFE8008600110156000000A0000000BAFFFF01EB000001EB0000
3510	 18B	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x18F000201A9FFE8008600110156000000A0000000BAFFFF01EB000001EB0000
- stack 0: 0xF0
3511	 18D	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x18F
3512	 18E	JUMP		 	 
- stack 0: 0x5FC
3513	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5FC
3514	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3515	 191	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x18F000201A9FFE8008600110156000000A0000000BAFFFF01EB000001EB0000
3516	 192	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x18F000201A9FFE8008600110156000000A0000000BAFFFF01EB000001EB0000
- stack 0: 0xE0
3517	 194	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x18F0002
3518	 195	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x18F0002
- stack 0: 0xFFFF
3519	 198	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x2
3520	 199	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x2
- stack 0: 0x1
3521	 19B	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x2
3522	 19C	PUSH2	00A0	 	 
- stack 2: 0x5FC
- stack 1: 0x2
- stack 0: 0xA0
3523	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x5FC
3524	 1A0	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3525	 1A2	ADD		 	 
- stack 0: 0x600
3526	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3527	 1A4	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x1A9FFE8008600110156000000A0000000BAFFFF01EB000001EB000000D400B4
3528	 1A5	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x1A9FFE8008600110156000000A0000000BAFFFF01EB000001EB000000D400B4
- stack 0: 0xF0
3529	 1A7	SHR		 	 
- stack 1: 0x600
- stack 0: 0x1A9
3530	 1A8	JUMP		 	 
- stack 0: 0x600
3531	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x600
3532	 1AA	PUSH2	0080	 	 
- stack 1: 0x600
- stack 0: 0x80
3533	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x600
- stack 0: 0x2
3534	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3535	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x600
- stack 0: 0x2
3536	 1B4	PUSH2	00A0	 	 
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0xA0
3537	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0x2
3538	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x600
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3539	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0x2
3540	 1BE	SUB		 	 
- stack 1: 0x600
- stack 0: 0x0
3541	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x1C7
3542	 1C2	JUMPI		 	 
- stack 0: 0x600
3543	 1C3	PUSH2	01E1	 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 1: 0x600
- stack 0: 0x1E1
3544	 1C6	JUMP		 	 
- stack 0: 0x600
3545	 1E1	JUMPDEST		 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x600
3546	 1E2	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3547	 1E4	ADD		 	 
- stack 0: 0x604
3548	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3549	 1E6	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x8600110156000000A0000000BAFFFF01EB000001EB000000D400B401700001
3550	 1E7	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x8600110156000000A0000000BAFFFF01EB000001EB000000D400B401700001
- stack 0: 0xF0
3551	 1E9	SHR		 	 
- stack 1: 0x604
- stack 0: 0x86
3552	 1EA	JUMP		 	 
- stack 0: 0x604
3553	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x604
3554	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3555	 88	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x8600110156000000A0000000BAFFFF01EB000001EB000000D400B401700001
3556	 89	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x8600110156000000A0000000BAFFFF01EB000001EB000000D400B401700001
- stack 0: 0xE0
3557	 8B	SHR		 	 
- stack 1: 0x604
- stack 0: 0x860011
3558	 8C	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x860011
- stack 0: 0xFFFF
3559	 8F	AND		 	 
- stack 1: 0x604
- stack 0: 0x11
3560	 90	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x11
- stack 0: 0x1
3561	 92	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x11
3562	 93	PUSH2	0380	 	 
- stack 2: 0x604
- stack 1: 0x11
- stack 0: 0x380
3563	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x604
3564	 97	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3565	 99	ADD		 	 
- stack 0: 0x608
3566	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3567	 9B	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x156000000A0000000BAFFFF01EB000001EB000000D400B401700001018F0002
3568	 9C	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x156000000A0000000BAFFFF01EB000001EB000000D400B401700001018F0002
- stack 0: 0xF0
3569	 9E	SHR		 	 
- stack 1: 0x608
- stack 0: 0x156
3570	 9F	JUMP		 	 
- stack 0: 0x608
3571	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x608
3572	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3573	 158	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x156000000A0000000BAFFFF01EB000001EB000000D400B401700001018F0002
3574	 159	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x156000000A0000000BAFFFF01EB000001EB000000D400B401700001018F0002
- stack 0: 0xE0
3575	 15B	SHR		 	 
- stack 1: 0x608
- stack 0: 0x1560000
3576	 15C	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x1560000
- stack 0: 0xFFFF
3577	 15F	AND		 	 
- stack 1: 0x608
- stack 0: 0x0
3578	 160	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x1
3579	 162	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x0
3580	 163	PUSH2	0080	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x80
3581	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x608
3582	 167	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3583	 169	ADD		 	 
- stack 0: 0x60C
3584	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3585	 16B	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xA0000000BAFFFF01EB000001EB000000D400B401700001018F000201A9FFE4
3586	 16C	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0xA0000000BAFFFF01EB000001EB000000D400B401700001018F000201A9FFE4
- stack 0: 0xF0
3587	 16E	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xA0
3588	 16F	JUMP		 	 
- stack 0: 0x60C
3589	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x60C
3590	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
3591	 A2	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xA0000000BAFFFF01EB000001EB000000D400B401700001018F000201A9FFE4
3592	 A3	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0xA0000000BAFFFF01EB000001EB000000D400B401700001018F000201A9FFE4
- stack 0: 0xE0
3593	 A5	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xA00000
3594	 A6	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0xA00000
- stack 0: 0xFFFF
3595	 A9	AND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3596	 AA	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x1
3597	 AC	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3598	 AD	PUSH2	0020	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x20
3599	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x60C
3600	 B1	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3601	 B3	ADD		 	 
- stack 0: 0x610
3602	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3603	 B5	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xBAFFFF01EB000001EB000000D400B401700001018F000201A9FFE400860012
3604	 B6	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0xBAFFFF01EB000001EB000000D400B401700001018F000201A9FFE400860012
- stack 0: 0xF0
3605	 B8	SHR		 	 
- stack 1: 0x610
- stack 0: 0xBA
3606	 B9	JUMP		 	 
- stack 0: 0x610
3607	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x610
3608	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3609	 BC	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xBAFFFF01EB000001EB000000D400B401700001018F000201A9FFE400860012
3610	 BD	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0xBAFFFF01EB000001EB000000D400B401700001018F000201A9FFE400860012
- stack 0: 0xE0
3611	 BF	SHR		 	 
- stack 1: 0x610
- stack 0: 0xBAFFFF
3612	 C0	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
3613	 C3	AND		 	 
- stack 1: 0x610
- stack 0: 0xFFFF
3614	 C4	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0xFFFF
- stack 0: 0x1
3615	 C6	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3616	 C7	PUSH2	0040	 	 
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3617	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x610
3618	 CB	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3619	 CD	ADD		 	 
- stack 0: 0x614
3620	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3621	 CF	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
3622	 D0	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
- stack 0: 0xF0
3623	 D2	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1EB
3624	 D3	JUMP		 	 
- stack 0: 0x614
3625	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x614
3626	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3627	 1ED	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
3628	 1EE	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
- stack 0: 0xE0
3629	 1F0	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1EB0000
3630	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
3631	 1F4	AND		 	 
- stack 1: 0x614
- stack 0: 0x0
3632	 1F5	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x1
3633	 1F7	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x0
3634	 1F8	POP		 	 
- stack 0: 0x614
3635	 1F9	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3636	 1FB	ADD		 	 
- stack 0: 0x618
3637	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3638	 1FD	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
3639	 1FE	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
- stack 0: 0xF0
3640	 200	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1EB
3641	 201	JUMP		 	 
- stack 0: 0x618
3642	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x618
3643	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3644	 1ED	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
3645	 1EE	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
- stack 0: 0xE0
3646	 1F0	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1EB0000
3647	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
3648	 1F4	AND		 	 
- stack 1: 0x618
- stack 0: 0x0
3649	 1F5	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x1
3650	 1F7	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x0
3651	 1F8	POP		 	 
- stack 0: 0x618
3652	 1F9	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3653	 1FB	ADD		 	 
- stack 0: 0x61C
3654	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3655	 1FD	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0xD400B401700001018F000201A9FFE4008600120156000000A0000001EB0000
3656	 1FE	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0xD400B401700001018F000201A9FFE4008600120156000000A0000001EB0000
- stack 0: 0xF0
3657	 200	SHR		 	 
- stack 1: 0x61C
- stack 0: 0xD4
3658	 201	JUMP		 	 
- stack 0: 0x61C
3659	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x61C
3660	 D5	PUSH2	0020	 	 
- stack 1: 0x61C
- stack 0: 0x20
3661	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x61C
- stack 0: 0x0
3662	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3663	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x61C
- stack 0: 0x0
3664	 DF	PUSH2	0040	 	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0x40
3665	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3666	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x61C
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
3667	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3668	 E9	EQ		 	 
- stack 1: 0x61C
- stack 0: 0x0
3669	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0xF2
3670	 ED	JUMPI		 	 
- stack 0: 0x61C
3671	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x61C
- stack 0: 0x10C
3672	 F1	JUMP		 	 
- stack 0: 0x61C
3673	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x61C
3674	 10D	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3675	 10F	ADD		 	 
- stack 0: 0x620
3676	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3677	 111	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BAFFFF
3678	 112	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BAFFFF
- stack 0: 0xF0
3679	 114	SHR		 	 
- stack 1: 0x620
- stack 0: 0x170
3680	 115	JUMP		 	 
- stack 0: 0x620
3681	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x620
3682	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3683	 172	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BAFFFF
3684	 173	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BAFFFF
- stack 0: 0xE0
3685	 175	SHR		 	 
- stack 1: 0x620
- stack 0: 0x1700001
3686	 176	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x1700001
- stack 0: 0xFFFF
3687	 179	AND		 	 
- stack 1: 0x620
- stack 0: 0x1
3688	 17A	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x1
3689	 17C	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x1
3690	 17D	PUSH2	0080	 	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x80
3691	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x0
3692	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x620
- stack 0: 0x1
3693	 182	PUSH2	0080	 	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x80
3694	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x620
3695	 186	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3696	 188	ADD		 	 
- stack 0: 0x624
3697	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3698	 18A	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x18F000201A9FFE4008600120156000000A0000001EB000000BAFFFF00D40090
3699	 18B	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x18F000201A9FFE4008600120156000000A0000001EB000000BAFFFF00D40090
- stack 0: 0xF0
3700	 18D	SHR		 	 
- stack 1: 0x624
- stack 0: 0x18F
3701	 18E	JUMP		 	 
- stack 0: 0x624
3702	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x624
3703	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3704	 191	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x18F000201A9FFE4008600120156000000A0000001EB000000BAFFFF00D40090
3705	 192	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x18F000201A9FFE4008600120156000000A0000001EB000000BAFFFF00D40090
- stack 0: 0xE0
3706	 194	SHR		 	 
- stack 1: 0x624
- stack 0: 0x18F0002
3707	 195	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x18F0002
- stack 0: 0xFFFF
3708	 198	AND		 	 
- stack 1: 0x624
- stack 0: 0x2
3709	 199	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0x1
3710	 19B	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x2
3711	 19C	PUSH2	00A0	 	 
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0xA0
3712	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x624
3713	 1A0	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3714	 1A2	ADD		 	 
- stack 0: 0x628
3715	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3716	 1A4	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x1A9FFE4008600120156000000A0000001EB000000BAFFFF00D4009001700001
3717	 1A5	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x1A9FFE4008600120156000000A0000001EB000000BAFFFF00D4009001700001
- stack 0: 0xF0
3718	 1A7	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1A9
3719	 1A8	JUMP		 	 
- stack 0: 0x628
3720	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x628
3721	 1AA	PUSH2	0080	 	 
- stack 1: 0x628
- stack 0: 0x80
3722	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x628
- stack 0: 0x1
3723	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3724	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x628
- stack 0: 0x1
3725	 1B4	PUSH2	00A0	 	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0xA0
3726	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x2
3727	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x628
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3728	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x2
3729	 1BE	SUB		 	 
- stack 1: 0x628
- stack 0: 0x1
3730	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x1C7
3731	 1C2	JUMPI		 	 
- stack 0: 0x628
3732	 1C7	JUMPDEST		 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x628
3733	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3734	 1C9	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x1A9FFE4008600120156000000A0000001EB000000BAFFFF00D4009001700001
3735	 1CA	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x1A9FFE4008600120156000000A0000001EB000000BAFFFF00D4009001700001
- stack 0: 0xE0
3736	 1CC	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1A9FFE4
3737	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x1A9FFE4
- stack 0: 0xFFFF
3738	 1D0	AND		 	 
- stack 1: 0x628
- stack 0: 0xFFE4
3739	 1D1	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0xFFE4
- stack 0: 0x1
3740	 1D3	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
3741	 1D4	ADD		 	 
- stack 0: 0x60C
3742	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x60C
- stack 0: 0xFFFFFFFF
3743	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x60C
3744	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3745	 1DC	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xA0000000BAFFFF01EB000001EB000000D400B401700001018F000201A9FFE4
3746	 1DD	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0xA0000000BAFFFF01EB000001EB000000D400B401700001018F000201A9FFE4
- stack 0: 0xF0
3747	 1DF	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xA0
3748	 1E0	JUMP		 	 
- stack 0: 0x60C
3749	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x60C
3750	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
3751	 A2	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xA0000000BAFFFF01EB000001EB000000D400B401700001018F000201A9FFE4
3752	 A3	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0xA0000000BAFFFF01EB000001EB000000D400B401700001018F000201A9FFE4
- stack 0: 0xE0
3753	 A5	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xA00000
3754	 A6	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0xA00000
- stack 0: 0xFFFF
3755	 A9	AND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3756	 AA	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x1
3757	 AC	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3758	 AD	PUSH2	0020	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x20
3759	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x60C
3760	 B1	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3761	 B3	ADD		 	 
- stack 0: 0x610
3762	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3763	 B5	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xBAFFFF01EB000001EB000000D400B401700001018F000201A9FFE400860012
3764	 B6	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0xBAFFFF01EB000001EB000000D400B401700001018F000201A9FFE400860012
- stack 0: 0xF0
3765	 B8	SHR		 	 
- stack 1: 0x610
- stack 0: 0xBA
3766	 B9	JUMP		 	 
- stack 0: 0x610
3767	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x610
3768	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3769	 BC	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xBAFFFF01EB000001EB000000D400B401700001018F000201A9FFE400860012
3770	 BD	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0xBAFFFF01EB000001EB000000D400B401700001018F000201A9FFE400860012
- stack 0: 0xE0
3771	 BF	SHR		 	 
- stack 1: 0x610
- stack 0: 0xBAFFFF
3772	 C0	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
3773	 C3	AND		 	 
- stack 1: 0x610
- stack 0: 0xFFFF
3774	 C4	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0xFFFF
- stack 0: 0x1
3775	 C6	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3776	 C7	PUSH2	0040	 	 
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3777	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x610
3778	 CB	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3779	 CD	ADD		 	 
- stack 0: 0x614
3780	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3781	 CF	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
3782	 D0	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
- stack 0: 0xF0
3783	 D2	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1EB
3784	 D3	JUMP		 	 
- stack 0: 0x614
3785	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x614
3786	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3787	 1ED	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
3788	 1EE	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
- stack 0: 0xE0
3789	 1F0	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1EB0000
3790	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
3791	 1F4	AND		 	 
- stack 1: 0x614
- stack 0: 0x0
3792	 1F5	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x1
3793	 1F7	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x0
3794	 1F8	POP		 	 
- stack 0: 0x614
3795	 1F9	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3796	 1FB	ADD		 	 
- stack 0: 0x618
3797	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3798	 1FD	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
3799	 1FE	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
- stack 0: 0xF0
3800	 200	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1EB
3801	 201	JUMP		 	 
- stack 0: 0x618
3802	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x618
3803	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3804	 1ED	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
3805	 1EE	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
- stack 0: 0xE0
3806	 1F0	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1EB0000
3807	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
3808	 1F4	AND		 	 
- stack 1: 0x618
- stack 0: 0x0
3809	 1F5	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x1
3810	 1F7	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x0
3811	 1F8	POP		 	 
- stack 0: 0x618
3812	 1F9	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3813	 1FB	ADD		 	 
- stack 0: 0x61C
3814	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3815	 1FD	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0xD400B401700001018F000201A9FFE4008600120156000000A0000001EB0000
3816	 1FE	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0xD400B401700001018F000201A9FFE4008600120156000000A0000001EB0000
- stack 0: 0xF0
3817	 200	SHR		 	 
- stack 1: 0x61C
- stack 0: 0xD4
3818	 201	JUMP		 	 
- stack 0: 0x61C
3819	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x61C
3820	 D5	PUSH2	0020	 	 
- stack 1: 0x61C
- stack 0: 0x20
3821	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x61C
- stack 0: 0x0
3822	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3823	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x61C
- stack 0: 0x0
3824	 DF	PUSH2	0040	 	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0x40
3825	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3826	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x61C
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
3827	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3828	 E9	EQ		 	 
- stack 1: 0x61C
- stack 0: 0x0
3829	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0xF2
3830	 ED	JUMPI		 	 
- stack 0: 0x61C
3831	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x61C
- stack 0: 0x10C
3832	 F1	JUMP		 	 
- stack 0: 0x61C
3833	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x61C
3834	 10D	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3835	 10F	ADD		 	 
- stack 0: 0x620
3836	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3837	 111	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BAFFFF
3838	 112	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BAFFFF
- stack 0: 0xF0
3839	 114	SHR		 	 
- stack 1: 0x620
- stack 0: 0x170
3840	 115	JUMP		 	 
- stack 0: 0x620
3841	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x620
3842	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3843	 172	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BAFFFF
3844	 173	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BAFFFF
- stack 0: 0xE0
3845	 175	SHR		 	 
- stack 1: 0x620
- stack 0: 0x1700001
3846	 176	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x1700001
- stack 0: 0xFFFF
3847	 179	AND		 	 
- stack 1: 0x620
- stack 0: 0x1
3848	 17A	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x1
3849	 17C	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x1
3850	 17D	PUSH2	0080	 	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x80
3851	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x1
3852	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x620
- stack 0: 0x2
3853	 182	PUSH2	0080	 	 
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0x80
3854	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x620
3855	 186	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3856	 188	ADD		 	 
- stack 0: 0x624
3857	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3858	 18A	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x18F000201A9FFE4008600120156000000A0000001EB000000BAFFFF00D40090
3859	 18B	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x18F000201A9FFE4008600120156000000A0000001EB000000BAFFFF00D40090
- stack 0: 0xF0
3860	 18D	SHR		 	 
- stack 1: 0x624
- stack 0: 0x18F
3861	 18E	JUMP		 	 
- stack 0: 0x624
3862	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x624
3863	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3864	 191	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x18F000201A9FFE4008600120156000000A0000001EB000000BAFFFF00D40090
3865	 192	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x18F000201A9FFE4008600120156000000A0000001EB000000BAFFFF00D40090
- stack 0: 0xE0
3866	 194	SHR		 	 
- stack 1: 0x624
- stack 0: 0x18F0002
3867	 195	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x18F0002
- stack 0: 0xFFFF
3868	 198	AND		 	 
- stack 1: 0x624
- stack 0: 0x2
3869	 199	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0x1
3870	 19B	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x2
3871	 19C	PUSH2	00A0	 	 
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0xA0
3872	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x624
3873	 1A0	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3874	 1A2	ADD		 	 
- stack 0: 0x628
3875	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3876	 1A4	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x1A9FFE4008600120156000000A0000001EB000000BAFFFF00D4009001700001
3877	 1A5	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x1A9FFE4008600120156000000A0000001EB000000BAFFFF00D4009001700001
- stack 0: 0xF0
3878	 1A7	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1A9
3879	 1A8	JUMP		 	 
- stack 0: 0x628
3880	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x628
3881	 1AA	PUSH2	0080	 	 
- stack 1: 0x628
- stack 0: 0x80
3882	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x628
- stack 0: 0x2
3883	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3884	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x628
- stack 0: 0x2
3885	 1B4	PUSH2	00A0	 	 
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0xA0
3886	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0x2
3887	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x628
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3888	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0x2
3889	 1BE	SUB		 	 
- stack 1: 0x628
- stack 0: 0x0
3890	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x628
- stack 1: 0x0
- stack 0: 0x1C7
3891	 1C2	JUMPI		 	 
- stack 0: 0x628
3892	 1C3	PUSH2	01E1	 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 1: 0x628
- stack 0: 0x1E1
3893	 1C6	JUMP		 	 
- stack 0: 0x628
3894	 1E1	JUMPDEST		 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x628
3895	 1E2	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3896	 1E4	ADD		 	 
- stack 0: 0x62C
3897	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3898	 1E6	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x8600120156000000A0000001EB000000BAFFFF00D4009001700001018F0002
3899	 1E7	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x8600120156000000A0000001EB000000BAFFFF00D4009001700001018F0002
- stack 0: 0xF0
3900	 1E9	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x86
3901	 1EA	JUMP		 	 
- stack 0: 0x62C
3902	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x62C
3903	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3904	 88	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x8600120156000000A0000001EB000000BAFFFF00D4009001700001018F0002
3905	 89	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x8600120156000000A0000001EB000000BAFFFF00D4009001700001018F0002
- stack 0: 0xE0
3906	 8B	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x860012
3907	 8C	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x860012
- stack 0: 0xFFFF
3908	 8F	AND		 	 
- stack 1: 0x62C
- stack 0: 0x12
3909	 90	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x12
- stack 0: 0x1
3910	 92	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x12
3911	 93	PUSH2	0380	 	 
- stack 2: 0x62C
- stack 1: 0x12
- stack 0: 0x380
3912	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x62C
3913	 97	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3914	 99	ADD		 	 
- stack 0: 0x630
3915	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3916	 9B	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x156000000A0000001EB000000BAFFFF00D4009001700001018F000201A9FFE8
3917	 9C	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x156000000A0000001EB000000BAFFFF00D4009001700001018F000201A9FFE8
- stack 0: 0xF0
3918	 9E	SHR		 	 
- stack 1: 0x630
- stack 0: 0x156
3919	 9F	JUMP		 	 
- stack 0: 0x630
3920	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x630
3921	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3922	 158	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x156000000A0000001EB000000BAFFFF00D4009001700001018F000201A9FFE8
3923	 159	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x156000000A0000001EB000000BAFFFF00D4009001700001018F000201A9FFE8
- stack 0: 0xE0
3924	 15B	SHR		 	 
- stack 1: 0x630
- stack 0: 0x1560000
3925	 15C	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x1560000
- stack 0: 0xFFFF
3926	 15F	AND		 	 
- stack 1: 0x630
- stack 0: 0x0
3927	 160	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x1
3928	 162	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x0
3929	 163	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x80
3930	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x630
3931	 167	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3932	 169	ADD		 	 
- stack 0: 0x634
3933	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3934	 16B	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xA0000001EB000000BAFFFF00D4009001700001018F000201A9FFE800860013
3935	 16C	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0xA0000001EB000000BAFFFF00D4009001700001018F000201A9FFE800860013
- stack 0: 0xF0
3936	 16E	SHR		 	 
- stack 1: 0x634
- stack 0: 0xA0
3937	 16F	JUMP		 	 
- stack 0: 0x634
3938	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x634
3939	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3940	 A2	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xA0000001EB000000BAFFFF00D4009001700001018F000201A9FFE800860013
3941	 A3	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0xA0000001EB000000BAFFFF00D4009001700001018F000201A9FFE800860013
- stack 0: 0xE0
3942	 A5	SHR		 	 
- stack 1: 0x634
- stack 0: 0xA00000
3943	 A6	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0xA00000
- stack 0: 0xFFFF
3944	 A9	AND		 	 
- stack 1: 0x634
- stack 0: 0x0
3945	 AA	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x1
3946	 AC	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x0
3947	 AD	PUSH2	0020	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x20
3948	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x634
3949	 B1	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3950	 B3	ADD		 	 
- stack 0: 0x638
3951	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3952	 B5	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x1EB000000BAFFFF00D4009001700001018F000201A9FFE80086001301560000
3953	 B6	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x1EB000000BAFFFF00D4009001700001018F000201A9FFE80086001301560000
- stack 0: 0xF0
3954	 B8	SHR		 	 
- stack 1: 0x638
- stack 0: 0x1EB
3955	 B9	JUMP		 	 
- stack 0: 0x638
3956	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
3957	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3958	 1ED	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x1EB000000BAFFFF00D4009001700001018F000201A9FFE80086001301560000
3959	 1EE	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x1EB000000BAFFFF00D4009001700001018F000201A9FFE80086001301560000
- stack 0: 0xE0
3960	 1F0	SHR		 	 
- stack 1: 0x638
- stack 0: 0x1EB0000
3961	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
3962	 1F4	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
3963	 1F5	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
3964	 1F7	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
3965	 1F8	POP		 	 
- stack 0: 0x638
3966	 1F9	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3967	 1FB	ADD		 	 
- stack 0: 0x63C
3968	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3969	 1FD	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xBAFFFF00D4009001700001018F000201A9FFE8008600130156000000A00000
3970	 1FE	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xBAFFFF00D4009001700001018F000201A9FFE8008600130156000000A00000
- stack 0: 0xF0
3971	 200	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xBA
3972	 201	JUMP		 	 
- stack 0: 0x63C
3973	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x63C
3974	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3975	 BC	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xBAFFFF00D4009001700001018F000201A9FFE8008600130156000000A00000
3976	 BD	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0xBAFFFF00D4009001700001018F000201A9FFE8008600130156000000A00000
- stack 0: 0xE0
3977	 BF	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xBAFFFF
3978	 C0	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
3979	 C3	AND		 	 
- stack 1: 0x63C
- stack 0: 0xFFFF
3980	 C4	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0xFFFF
- stack 0: 0x1
3981	 C6	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3982	 C7	PUSH2	0040	 	 
- stack 2: 0x63C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3983	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x63C
3984	 CB	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3985	 CD	ADD		 	 
- stack 0: 0x640
3986	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3987	 CF	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xD4009001700001018F000201A9FFE8008600130156000000A0000001EB0000
3988	 D0	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0xD4009001700001018F000201A9FFE8008600130156000000A0000001EB0000
- stack 0: 0xF0
3989	 D2	SHR		 	 
- stack 1: 0x640
- stack 0: 0xD4
3990	 D3	JUMP		 	 
- stack 0: 0x640
3991	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x640
3992	 D5	PUSH2	0020	 	 
- stack 1: 0x640
- stack 0: 0x20
3993	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x640
- stack 0: 0x0
3994	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3995	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x640
- stack 0: 0x0
3996	 DF	PUSH2	0040	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x40
3997	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3998	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x640
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
3999	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4000	 E9	EQ		 	 
- stack 1: 0x640
- stack 0: 0x0
4001	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0xF2
4002	 ED	JUMPI		 	 
- stack 0: 0x640
4003	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x640
- stack 0: 0x10C
4004	 F1	JUMP		 	 
- stack 0: 0x640
4005	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x640
4006	 10D	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
4007	 10F	ADD		 	 
- stack 0: 0x644
4008	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
4009	 111	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BAFFFF
4010	 112	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BAFFFF
- stack 0: 0xF0
4011	 114	SHR		 	 
- stack 1: 0x644
- stack 0: 0x170
4012	 115	JUMP		 	 
- stack 0: 0x644
4013	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x644
4014	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
4015	 172	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BAFFFF
4016	 173	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BAFFFF
- stack 0: 0xE0
4017	 175	SHR		 	 
- stack 1: 0x644
- stack 0: 0x1700001
4018	 176	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x1700001
- stack 0: 0xFFFF
4019	 179	AND		 	 
- stack 1: 0x644
- stack 0: 0x1
4020	 17A	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
4021	 17C	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x1
4022	 17D	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x80
4023	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x0
4024	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x644
- stack 0: 0x1
4025	 182	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x80
4026	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x644
4027	 186	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
4028	 188	ADD		 	 
- stack 0: 0x648
4029	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
4030	 18A	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x18F000201A9FFE8008600130156000000A0000001EB000000BAFFFF01EB0000
4031	 18B	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x18F000201A9FFE8008600130156000000A0000001EB000000BAFFFF01EB0000
- stack 0: 0xF0
4032	 18D	SHR		 	 
- stack 1: 0x648
- stack 0: 0x18F
4033	 18E	JUMP		 	 
- stack 0: 0x648
4034	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x648
4035	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
4036	 191	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x18F000201A9FFE8008600130156000000A0000001EB000000BAFFFF01EB0000
4037	 192	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x18F000201A9FFE8008600130156000000A0000001EB000000BAFFFF01EB0000
- stack 0: 0xE0
4038	 194	SHR		 	 
- stack 1: 0x648
- stack 0: 0x18F0002
4039	 195	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x18F0002
- stack 0: 0xFFFF
4040	 198	AND		 	 
- stack 1: 0x648
- stack 0: 0x2
4041	 199	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x1
4042	 19B	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x2
4043	 19C	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xA0
4044	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x648
4045	 1A0	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
4046	 1A2	ADD		 	 
- stack 0: 0x64C
4047	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
4048	 1A4	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x1A9FFE8008600130156000000A0000001EB000000BAFFFF01EB000000D40068
4049	 1A5	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x1A9FFE8008600130156000000A0000001EB000000BAFFFF01EB000000D40068
- stack 0: 0xF0
4050	 1A7	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x1A9
4051	 1A8	JUMP		 	 
- stack 0: 0x64C
4052	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x64C
4053	 1AA	PUSH2	0080	 	 
- stack 1: 0x64C
- stack 0: 0x80
4054	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x64C
- stack 0: 0x1
4055	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4056	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x64C
- stack 0: 0x1
4057	 1B4	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0xA0
4058	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x2
4059	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x64C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4060	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x2
4061	 1BE	SUB		 	 
- stack 1: 0x64C
- stack 0: 0x1
4062	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x1C7
4063	 1C2	JUMPI		 	 
- stack 0: 0x64C
4064	 1C7	JUMPDEST		 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x64C
4065	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
4066	 1C9	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x1A9FFE8008600130156000000A0000001EB000000BAFFFF01EB000000D40068
4067	 1CA	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x1A9FFE8008600130156000000A0000001EB000000BAFFFF01EB000000D40068
- stack 0: 0xE0
4068	 1CC	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x1A9FFE8
4069	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x1A9FFE8
- stack 0: 0xFFFF
4070	 1D0	AND		 	 
- stack 1: 0x64C
- stack 0: 0xFFE8
4071	 1D1	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0xFFE8
- stack 0: 0x1
4072	 1D3	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
4073	 1D4	ADD		 	 
- stack 0: 0x634
4074	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x634
- stack 0: 0xFFFFFFFF
4075	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x634
4076	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
4077	 1DC	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xA0000001EB000000BAFFFF00D4009001700001018F000201A9FFE800860013
4078	 1DD	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0xA0000001EB000000BAFFFF00D4009001700001018F000201A9FFE800860013
- stack 0: 0xF0
4079	 1DF	SHR		 	 
- stack 1: 0x634
- stack 0: 0xA0
4080	 1E0	JUMP		 	 
- stack 0: 0x634
4081	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x634
4082	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
4083	 A2	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xA0000001EB000000BAFFFF00D4009001700001018F000201A9FFE800860013
4084	 A3	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0xA0000001EB000000BAFFFF00D4009001700001018F000201A9FFE800860013
- stack 0: 0xE0
4085	 A5	SHR		 	 
- stack 1: 0x634
- stack 0: 0xA00000
4086	 A6	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0xA00000
- stack 0: 0xFFFF
4087	 A9	AND		 	 
- stack 1: 0x634
- stack 0: 0x0
4088	 AA	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x1
4089	 AC	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x0
4090	 AD	PUSH2	0020	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x20
4091	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x634
4092	 B1	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
4093	 B3	ADD		 	 
- stack 0: 0x638
4094	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
4095	 B5	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x1EB000000BAFFFF00D4009001700001018F000201A9FFE80086001301560000
4096	 B6	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x1EB000000BAFFFF00D4009001700001018F000201A9FFE80086001301560000
- stack 0: 0xF0
4097	 B8	SHR		 	 
- stack 1: 0x638
- stack 0: 0x1EB
4098	 B9	JUMP		 	 
- stack 0: 0x638
4099	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
4100	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
4101	 1ED	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x1EB000000BAFFFF00D4009001700001018F000201A9FFE80086001301560000
4102	 1EE	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x1EB000000BAFFFF00D4009001700001018F000201A9FFE80086001301560000
- stack 0: 0xE0
4103	 1F0	SHR		 	 
- stack 1: 0x638
- stack 0: 0x1EB0000
4104	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4105	 1F4	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
4106	 1F5	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
4107	 1F7	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
4108	 1F8	POP		 	 
- stack 0: 0x638
4109	 1F9	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
4110	 1FB	ADD		 	 
- stack 0: 0x63C
4111	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
4112	 1FD	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xBAFFFF00D4009001700001018F000201A9FFE8008600130156000000A00000
4113	 1FE	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xBAFFFF00D4009001700001018F000201A9FFE8008600130156000000A00000
- stack 0: 0xF0
4114	 200	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xBA
4115	 201	JUMP		 	 
- stack 0: 0x63C
4116	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x63C
4117	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
4118	 BC	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xBAFFFF00D4009001700001018F000201A9FFE8008600130156000000A00000
4119	 BD	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0xBAFFFF00D4009001700001018F000201A9FFE8008600130156000000A00000
- stack 0: 0xE0
4120	 BF	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xBAFFFF
4121	 C0	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
4122	 C3	AND		 	 
- stack 1: 0x63C
- stack 0: 0xFFFF
4123	 C4	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0xFFFF
- stack 0: 0x1
4124	 C6	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4125	 C7	PUSH2	0040	 	 
- stack 2: 0x63C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4126	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x63C
4127	 CB	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
4128	 CD	ADD		 	 
- stack 0: 0x640
4129	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
4130	 CF	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xD4009001700001018F000201A9FFE8008600130156000000A0000001EB0000
4131	 D0	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0xD4009001700001018F000201A9FFE8008600130156000000A0000001EB0000
- stack 0: 0xF0
4132	 D2	SHR		 	 
- stack 1: 0x640
- stack 0: 0xD4
4133	 D3	JUMP		 	 
- stack 0: 0x640
4134	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x640
4135	 D5	PUSH2	0020	 	 
- stack 1: 0x640
- stack 0: 0x20
4136	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x640
- stack 0: 0x0
4137	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4138	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x640
- stack 0: 0x0
4139	 DF	PUSH2	0040	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x40
4140	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4141	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x640
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
4142	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4143	 E9	EQ		 	 
- stack 1: 0x640
- stack 0: 0x0
4144	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0xF2
4145	 ED	JUMPI		 	 
- stack 0: 0x640
4146	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x640
- stack 0: 0x10C
4147	 F1	JUMP		 	 
- stack 0: 0x640
4148	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x640
4149	 10D	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
4150	 10F	ADD		 	 
- stack 0: 0x644
4151	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
4152	 111	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BAFFFF
4153	 112	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BAFFFF
- stack 0: 0xF0
4154	 114	SHR		 	 
- stack 1: 0x644
- stack 0: 0x170
4155	 115	JUMP		 	 
- stack 0: 0x644
4156	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x644
4157	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
4158	 172	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BAFFFF
4159	 173	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BAFFFF
- stack 0: 0xE0
4160	 175	SHR		 	 
- stack 1: 0x644
- stack 0: 0x1700001
4161	 176	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x1700001
- stack 0: 0xFFFF
4162	 179	AND		 	 
- stack 1: 0x644
- stack 0: 0x1
4163	 17A	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
4164	 17C	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x1
4165	 17D	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x80
4166	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
4167	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x644
- stack 0: 0x2
4168	 182	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0x80
4169	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x644
4170	 186	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
4171	 188	ADD		 	 
- stack 0: 0x648
4172	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
4173	 18A	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x18F000201A9FFE8008600130156000000A0000001EB000000BAFFFF01EB0000
4174	 18B	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x18F000201A9FFE8008600130156000000A0000001EB000000BAFFFF01EB0000
- stack 0: 0xF0
4175	 18D	SHR		 	 
- stack 1: 0x648
- stack 0: 0x18F
4176	 18E	JUMP		 	 
- stack 0: 0x648
4177	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x648
4178	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
4179	 191	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x18F000201A9FFE8008600130156000000A0000001EB000000BAFFFF01EB0000
4180	 192	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x18F000201A9FFE8008600130156000000A0000001EB000000BAFFFF01EB0000
- stack 0: 0xE0
4181	 194	SHR		 	 
- stack 1: 0x648
- stack 0: 0x18F0002
4182	 195	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x18F0002
- stack 0: 0xFFFF
4183	 198	AND		 	 
- stack 1: 0x648
- stack 0: 0x2
4184	 199	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x1
4185	 19B	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x2
4186	 19C	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xA0
4187	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x648
4188	 1A0	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
4189	 1A2	ADD		 	 
- stack 0: 0x64C
4190	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
4191	 1A4	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x1A9FFE8008600130156000000A0000001EB000000BAFFFF01EB000000D40068
4192	 1A5	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x1A9FFE8008600130156000000A0000001EB000000BAFFFF01EB000000D40068
- stack 0: 0xF0
4193	 1A7	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x1A9
4194	 1A8	JUMP		 	 
- stack 0: 0x64C
4195	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x64C
4196	 1AA	PUSH2	0080	 	 
- stack 1: 0x64C
- stack 0: 0x80
4197	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x64C
- stack 0: 0x2
4198	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4199	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x64C
- stack 0: 0x2
4200	 1B4	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xA0
4201	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x2
4202	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x64C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4203	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x2
4204	 1BE	SUB		 	 
- stack 1: 0x64C
- stack 0: 0x0
4205	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x1C7
4206	 1C2	JUMPI		 	 
- stack 0: 0x64C
4207	 1C3	PUSH2	01E1	 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 1: 0x64C
- stack 0: 0x1E1
4208	 1C6	JUMP		 	 
- stack 0: 0x64C
4209	 1E1	JUMPDEST		 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x64C
4210	 1E2	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
4211	 1E4	ADD		 	 
- stack 0: 0x650
4212	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
4213	 1E6	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x8600130156000000A0000001EB000000BAFFFF01EB000000D4006801700001
4214	 1E7	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x8600130156000000A0000001EB000000BAFFFF01EB000000D4006801700001
- stack 0: 0xF0
4215	 1E9	SHR		 	 
- stack 1: 0x650
- stack 0: 0x86
4216	 1EA	JUMP		 	 
- stack 0: 0x650
4217	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x650
4218	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
4219	 88	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x8600130156000000A0000001EB000000BAFFFF01EB000000D4006801700001
4220	 89	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x8600130156000000A0000001EB000000BAFFFF01EB000000D4006801700001
- stack 0: 0xE0
4221	 8B	SHR		 	 
- stack 1: 0x650
- stack 0: 0x860013
4222	 8C	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x860013
- stack 0: 0xFFFF
4223	 8F	AND		 	 
- stack 1: 0x650
- stack 0: 0x13
4224	 90	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x13
- stack 0: 0x1
4225	 92	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x13
4226	 93	PUSH2	0380	 	 
- stack 2: 0x650
- stack 1: 0x13
- stack 0: 0x380
4227	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x650
4228	 97	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
4229	 99	ADD		 	 
- stack 0: 0x654
4230	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
4231	 9B	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x156000000A0000001EB000000BAFFFF01EB000000D4006801700001018F0002
4232	 9C	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x156000000A0000001EB000000BAFFFF01EB000000D4006801700001018F0002
- stack 0: 0xF0
4233	 9E	SHR		 	 
- stack 1: 0x654
- stack 0: 0x156
4234	 9F	JUMP		 	 
- stack 0: 0x654
4235	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x654
4236	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
4237	 158	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x156000000A0000001EB000000BAFFFF01EB000000D4006801700001018F0002
4238	 159	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x156000000A0000001EB000000BAFFFF01EB000000D4006801700001018F0002
- stack 0: 0xE0
4239	 15B	SHR		 	 
- stack 1: 0x654
- stack 0: 0x1560000
4240	 15C	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x1560000
- stack 0: 0xFFFF
4241	 15F	AND		 	 
- stack 1: 0x654
- stack 0: 0x0
4242	 160	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0x1
4243	 162	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x0
4244	 163	PUSH2	0080	 	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0x80
4245	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x654
4246	 167	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
4247	 169	ADD		 	 
- stack 0: 0x658
4248	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
4249	 16B	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0xA0000001EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE4
4250	 16C	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0xA0000001EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE4
- stack 0: 0xF0
4251	 16E	SHR		 	 
- stack 1: 0x658
- stack 0: 0xA0
4252	 16F	JUMP		 	 
- stack 0: 0x658
4253	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x658
4254	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
4255	 A2	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0xA0000001EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE4
4256	 A3	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0xA0000001EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE4
- stack 0: 0xE0
4257	 A5	SHR		 	 
- stack 1: 0x658
- stack 0: 0xA00000
4258	 A6	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0xA00000
- stack 0: 0xFFFF
4259	 A9	AND		 	 
- stack 1: 0x658
- stack 0: 0x0
4260	 AA	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x1
4261	 AC	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x0
4262	 AD	PUSH2	0020	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x20
4263	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x658
4264	 B1	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
4265	 B3	ADD		 	 
- stack 0: 0x65C
4266	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
4267	 B5	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x1EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE400860014
4268	 B6	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x1EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE400860014
- stack 0: 0xF0
4269	 B8	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x1EB
4270	 B9	JUMP		 	 
- stack 0: 0x65C
4271	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x65C
4272	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
4273	 1ED	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x1EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE400860014
4274	 1EE	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x1EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE400860014
- stack 0: 0xE0
4275	 1F0	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x1EB0000
4276	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4277	 1F4	AND		 	 
- stack 1: 0x65C
- stack 0: 0x0
4278	 1F5	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x1
4279	 1F7	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x0
4280	 1F8	POP		 	 
- stack 0: 0x65C
4281	 1F9	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
4282	 1FB	ADD		 	 
- stack 0: 0x660
4283	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
4284	 1FD	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0xBAFFFF01EB000000D4006801700001018F000201A9FFE40086001401560000
4285	 1FE	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0xBAFFFF01EB000000D4006801700001018F000201A9FFE40086001401560000
- stack 0: 0xF0
4286	 200	SHR		 	 
- stack 1: 0x660
- stack 0: 0xBA
4287	 201	JUMP		 	 
- stack 0: 0x660
4288	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x660
4289	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
4290	 BC	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0xBAFFFF01EB000000D4006801700001018F000201A9FFE40086001401560000
4291	 BD	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0xBAFFFF01EB000000D4006801700001018F000201A9FFE40086001401560000
- stack 0: 0xE0
4292	 BF	SHR		 	 
- stack 1: 0x660
- stack 0: 0xBAFFFF
4293	 C0	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
4294	 C3	AND		 	 
- stack 1: 0x660
- stack 0: 0xFFFF
4295	 C4	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0xFFFF
- stack 0: 0x1
4296	 C6	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4297	 C7	PUSH2	0040	 	 
- stack 2: 0x660
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4298	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x660
4299	 CB	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
4300	 CD	ADD		 	 
- stack 0: 0x664
4301	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
4302	 CF	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
4303	 D0	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
- stack 0: 0xF0
4304	 D2	SHR		 	 
- stack 1: 0x664
- stack 0: 0x1EB
4305	 D3	JUMP		 	 
- stack 0: 0x664
4306	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x664
4307	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
4308	 1ED	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
4309	 1EE	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
- stack 0: 0xE0
4310	 1F0	SHR		 	 
- stack 1: 0x664
- stack 0: 0x1EB0000
4311	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4312	 1F4	AND		 	 
- stack 1: 0x664
- stack 0: 0x0
4313	 1F5	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x1
4314	 1F7	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x0
4315	 1F8	POP		 	 
- stack 0: 0x664
4316	 1F9	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
4317	 1FB	ADD		 	 
- stack 0: 0x668
4318	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
4319	 1FD	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0xD4006801700001018F000201A9FFE4008600140156000000A0000001EB0000
4320	 1FE	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0xD4006801700001018F000201A9FFE4008600140156000000A0000001EB0000
- stack 0: 0xF0
4321	 200	SHR		 	 
- stack 1: 0x668
- stack 0: 0xD4
4322	 201	JUMP		 	 
- stack 0: 0x668
4323	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x668
4324	 D5	PUSH2	0020	 	 
- stack 1: 0x668
- stack 0: 0x20
4325	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x668
- stack 0: 0x0
4326	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4327	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x668
- stack 0: 0x0
4328	 DF	PUSH2	0040	 	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x40
4329	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4330	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x668
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
4331	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4332	 E9	EQ		 	 
- stack 1: 0x668
- stack 0: 0x0
4333	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0xF2
4334	 ED	JUMPI		 	 
- stack 0: 0x668
4335	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x668
- stack 0: 0x10C
4336	 F1	JUMP		 	 
- stack 0: 0x668
4337	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x668
4338	 10D	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
4339	 10F	ADD		 	 
- stack 0: 0x66C
4340	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4341	 111	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
4342	 112	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
- stack 0: 0xF0
4343	 114	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x170
4344	 115	JUMP		 	 
- stack 0: 0x66C
4345	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x66C
4346	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
4347	 172	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
4348	 173	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
- stack 0: 0xE0
4349	 175	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x1700001
4350	 176	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x1700001
- stack 0: 0xFFFF
4351	 179	AND		 	 
- stack 1: 0x66C
- stack 0: 0x1
4352	 17A	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x1
4353	 17C	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x1
4354	 17D	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x80
4355	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x0
4356	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x66C
- stack 0: 0x1
4357	 182	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x80
4358	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x66C
4359	 186	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4360	 188	ADD		 	 
- stack 0: 0x670
4361	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4362	 18A	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BAFFFF
4363	 18B	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BAFFFF
- stack 0: 0xF0
4364	 18D	SHR		 	 
- stack 1: 0x670
- stack 0: 0x18F
4365	 18E	JUMP		 	 
- stack 0: 0x670
4366	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x670
4367	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4368	 191	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BAFFFF
4369	 192	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BAFFFF
- stack 0: 0xE0
4370	 194	SHR		 	 
- stack 1: 0x670
- stack 0: 0x18F0002
4371	 195	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x18F0002
- stack 0: 0xFFFF
4372	 198	AND		 	 
- stack 1: 0x670
- stack 0: 0x2
4373	 199	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0x1
4374	 19B	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x2
4375	 19C	PUSH2	00A0	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0xA0
4376	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x670
4377	 1A0	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4378	 1A2	ADD		 	 
- stack 0: 0x674
4379	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4380	 1A4	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x1A9FFE4008600140156000000A0000001EB000001EB000000BAFFFF00D40040
4381	 1A5	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x1A9FFE4008600140156000000A0000001EB000001EB000000BAFFFF00D40040
- stack 0: 0xF0
4382	 1A7	SHR		 	 
- stack 1: 0x674
- stack 0: 0x1A9
4383	 1A8	JUMP		 	 
- stack 0: 0x674
4384	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x674
4385	 1AA	PUSH2	0080	 	 
- stack 1: 0x674
- stack 0: 0x80
4386	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x674
- stack 0: 0x1
4387	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4388	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x1
4389	 1B4	PUSH2	00A0	 	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0xA0
4390	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x2
4391	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x674
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4392	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x2
4393	 1BE	SUB		 	 
- stack 1: 0x674
- stack 0: 0x1
4394	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x1C7
4395	 1C2	JUMPI		 	 
- stack 0: 0x674
4396	 1C7	JUMPDEST		 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x674
4397	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
4398	 1C9	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x1A9FFE4008600140156000000A0000001EB000001EB000000BAFFFF00D40040
4399	 1CA	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x1A9FFE4008600140156000000A0000001EB000001EB000000BAFFFF00D40040
- stack 0: 0xE0
4400	 1CC	SHR		 	 
- stack 1: 0x674
- stack 0: 0x1A9FFE4
4401	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x1A9FFE4
- stack 0: 0xFFFF
4402	 1D0	AND		 	 
- stack 1: 0x674
- stack 0: 0xFFE4
4403	 1D1	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0xFFE4
- stack 0: 0x1
4404	 1D3	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4405	 1D4	ADD		 	 
- stack 0: 0x658
4406	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x658
- stack 0: 0xFFFFFFFF
4407	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x658
4408	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
4409	 1DC	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0xA0000001EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE4
4410	 1DD	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0xA0000001EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE4
- stack 0: 0xF0
4411	 1DF	SHR		 	 
- stack 1: 0x658
- stack 0: 0xA0
4412	 1E0	JUMP		 	 
- stack 0: 0x658
4413	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x658
4414	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
4415	 A2	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0xA0000001EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE4
4416	 A3	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0xA0000001EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE4
- stack 0: 0xE0
4417	 A5	SHR		 	 
- stack 1: 0x658
- stack 0: 0xA00000
4418	 A6	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0xA00000
- stack 0: 0xFFFF
4419	 A9	AND		 	 
- stack 1: 0x658
- stack 0: 0x0
4420	 AA	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x1
4421	 AC	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x0
4422	 AD	PUSH2	0020	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x20
4423	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x658
4424	 B1	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
4425	 B3	ADD		 	 
- stack 0: 0x65C
4426	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
4427	 B5	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x1EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE400860014
4428	 B6	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x1EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE400860014
- stack 0: 0xF0
4429	 B8	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x1EB
4430	 B9	JUMP		 	 
- stack 0: 0x65C
4431	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x65C
4432	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
4433	 1ED	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x1EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE400860014
4434	 1EE	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x1EB000000BAFFFF01EB000000D4006801700001018F000201A9FFE400860014
- stack 0: 0xE0
4435	 1F0	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x1EB0000
4436	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4437	 1F4	AND		 	 
- stack 1: 0x65C
- stack 0: 0x0
4438	 1F5	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x1
4439	 1F7	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x0
4440	 1F8	POP		 	 
- stack 0: 0x65C
4441	 1F9	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
4442	 1FB	ADD		 	 
- stack 0: 0x660
4443	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
4444	 1FD	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0xBAFFFF01EB000000D4006801700001018F000201A9FFE40086001401560000
4445	 1FE	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0xBAFFFF01EB000000D4006801700001018F000201A9FFE40086001401560000
- stack 0: 0xF0
4446	 200	SHR		 	 
- stack 1: 0x660
- stack 0: 0xBA
4447	 201	JUMP		 	 
- stack 0: 0x660
4448	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x660
4449	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
4450	 BC	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0xBAFFFF01EB000000D4006801700001018F000201A9FFE40086001401560000
4451	 BD	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0xBAFFFF01EB000000D4006801700001018F000201A9FFE40086001401560000
- stack 0: 0xE0
4452	 BF	SHR		 	 
- stack 1: 0x660
- stack 0: 0xBAFFFF
4453	 C0	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
4454	 C3	AND		 	 
- stack 1: 0x660
- stack 0: 0xFFFF
4455	 C4	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0xFFFF
- stack 0: 0x1
4456	 C6	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4457	 C7	PUSH2	0040	 	 
- stack 2: 0x660
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4458	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x660
4459	 CB	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
4460	 CD	ADD		 	 
- stack 0: 0x664
4461	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
4462	 CF	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
4463	 D0	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
- stack 0: 0xF0
4464	 D2	SHR		 	 
- stack 1: 0x664
- stack 0: 0x1EB
4465	 D3	JUMP		 	 
- stack 0: 0x664
4466	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x664
4467	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
4468	 1ED	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
4469	 1EE	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
- stack 0: 0xE0
4470	 1F0	SHR		 	 
- stack 1: 0x664
- stack 0: 0x1EB0000
4471	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4472	 1F4	AND		 	 
- stack 1: 0x664
- stack 0: 0x0
4473	 1F5	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x1
4474	 1F7	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x0
4475	 1F8	POP		 	 
- stack 0: 0x664
4476	 1F9	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
4477	 1FB	ADD		 	 
- stack 0: 0x668
4478	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
4479	 1FD	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0xD4006801700001018F000201A9FFE4008600140156000000A0000001EB0000
4480	 1FE	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0xD4006801700001018F000201A9FFE4008600140156000000A0000001EB0000
- stack 0: 0xF0
4481	 200	SHR		 	 
- stack 1: 0x668
- stack 0: 0xD4
4482	 201	JUMP		 	 
- stack 0: 0x668
4483	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x668
4484	 D5	PUSH2	0020	 	 
- stack 1: 0x668
- stack 0: 0x20
4485	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x668
- stack 0: 0x0
4486	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4487	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x668
- stack 0: 0x0
4488	 DF	PUSH2	0040	 	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x40
4489	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4490	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x668
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
4491	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4492	 E9	EQ		 	 
- stack 1: 0x668
- stack 0: 0x0
4493	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0xF2
4494	 ED	JUMPI		 	 
- stack 0: 0x668
4495	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x668
- stack 0: 0x10C
4496	 F1	JUMP		 	 
- stack 0: 0x668
4497	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x668
4498	 10D	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
4499	 10F	ADD		 	 
- stack 0: 0x66C
4500	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4501	 111	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
4502	 112	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
- stack 0: 0xF0
4503	 114	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x170
4504	 115	JUMP		 	 
- stack 0: 0x66C
4505	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x66C
4506	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
4507	 172	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
4508	 173	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
- stack 0: 0xE0
4509	 175	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x1700001
4510	 176	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x1700001
- stack 0: 0xFFFF
4511	 179	AND		 	 
- stack 1: 0x66C
- stack 0: 0x1
4512	 17A	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x1
4513	 17C	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x1
4514	 17D	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x80
4515	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x1
4516	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x66C
- stack 0: 0x2
4517	 182	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x2
- stack 0: 0x80
4518	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x66C
4519	 186	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4520	 188	ADD		 	 
- stack 0: 0x670
4521	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4522	 18A	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BAFFFF
4523	 18B	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BAFFFF
- stack 0: 0xF0
4524	 18D	SHR		 	 
- stack 1: 0x670
- stack 0: 0x18F
4525	 18E	JUMP		 	 
- stack 0: 0x670
4526	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x670
4527	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4528	 191	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BAFFFF
4529	 192	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BAFFFF
- stack 0: 0xE0
4530	 194	SHR		 	 
- stack 1: 0x670
- stack 0: 0x18F0002
4531	 195	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x18F0002
- stack 0: 0xFFFF
4532	 198	AND		 	 
- stack 1: 0x670
- stack 0: 0x2
4533	 199	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0x1
4534	 19B	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x2
4535	 19C	PUSH2	00A0	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0xA0
4536	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x670
4537	 1A0	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4538	 1A2	ADD		 	 
- stack 0: 0x674
4539	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4540	 1A4	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x1A9FFE4008600140156000000A0000001EB000001EB000000BAFFFF00D40040
4541	 1A5	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x1A9FFE4008600140156000000A0000001EB000001EB000000BAFFFF00D40040
- stack 0: 0xF0
4542	 1A7	SHR		 	 
- stack 1: 0x674
- stack 0: 0x1A9
4543	 1A8	JUMP		 	 
- stack 0: 0x674
4544	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x674
4545	 1AA	PUSH2	0080	 	 
- stack 1: 0x674
- stack 0: 0x80
4546	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x674
- stack 0: 0x2
4547	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4548	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x2
4549	 1B4	PUSH2	00A0	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0xA0
4550	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x2
4551	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x674
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4552	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x2
4553	 1BE	SUB		 	 
- stack 1: 0x674
- stack 0: 0x0
4554	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x1C7
4555	 1C2	JUMPI		 	 
- stack 0: 0x674
4556	 1C3	PUSH2	01E1	 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 1: 0x674
- stack 0: 0x1E1
4557	 1C6	JUMP		 	 
- stack 0: 0x674
4558	 1E1	JUMPDEST		 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x674
4559	 1E2	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4560	 1E4	ADD		 	 
- stack 0: 0x678
4561	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4562	 1E6	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x8600140156000000A0000001EB000001EB000000BAFFFF00D4004001700001
4563	 1E7	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x8600140156000000A0000001EB000001EB000000BAFFFF00D4004001700001
- stack 0: 0xF0
4564	 1E9	SHR		 	 
- stack 1: 0x678
- stack 0: 0x86
4565	 1EA	JUMP		 	 
- stack 0: 0x678
4566	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x678
4567	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
4568	 88	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x8600140156000000A0000001EB000001EB000000BAFFFF00D4004001700001
4569	 89	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x8600140156000000A0000001EB000001EB000000BAFFFF00D4004001700001
- stack 0: 0xE0
4570	 8B	SHR		 	 
- stack 1: 0x678
- stack 0: 0x860014
4571	 8C	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x860014
- stack 0: 0xFFFF
4572	 8F	AND		 	 
- stack 1: 0x678
- stack 0: 0x14
4573	 90	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x14
- stack 0: 0x1
4574	 92	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x14
4575	 93	PUSH2	0380	 	 
- stack 2: 0x678
- stack 1: 0x14
- stack 0: 0x380
4576	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x678
4577	 97	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
4578	 99	ADD		 	 
- stack 0: 0x67C
4579	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
4580	 9B	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x156000000A0000001EB000001EB000000BAFFFF00D4004001700001018F0002
4581	 9C	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x156000000A0000001EB000001EB000000BAFFFF00D4004001700001018F0002
- stack 0: 0xF0
4582	 9E	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x156
4583	 9F	JUMP		 	 
- stack 0: 0x67C
4584	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x67C
4585	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
4586	 158	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x156000000A0000001EB000001EB000000BAFFFF00D4004001700001018F0002
4587	 159	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x156000000A0000001EB000001EB000000BAFFFF00D4004001700001018F0002
- stack 0: 0xE0
4588	 15B	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x1560000
4589	 15C	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x1560000
- stack 0: 0xFFFF
4590	 15F	AND		 	 
- stack 1: 0x67C
- stack 0: 0x0
4591	 160	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x1
4592	 162	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x0
4593	 163	PUSH2	0080	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x80
4594	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x67C
4595	 167	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4596	 169	ADD		 	 
- stack 0: 0x680
4597	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4598	 16B	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xA0000001EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE4
4599	 16C	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0xA0000001EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE4
- stack 0: 0xF0
4600	 16E	SHR		 	 
- stack 1: 0x680
- stack 0: 0xA0
4601	 16F	JUMP		 	 
- stack 0: 0x680
4602	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x680
4603	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
4604	 A2	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xA0000001EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE4
4605	 A3	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0xA0000001EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE4
- stack 0: 0xE0
4606	 A5	SHR		 	 
- stack 1: 0x680
- stack 0: 0xA00000
4607	 A6	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0xA00000
- stack 0: 0xFFFF
4608	 A9	AND		 	 
- stack 1: 0x680
- stack 0: 0x0
4609	 AA	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x1
4610	 AC	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x0
4611	 AD	PUSH2	0020	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x20
4612	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x680
4613	 B1	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4614	 B3	ADD		 	 
- stack 0: 0x684
4615	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4616	 B5	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x1EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE400A00001
4617	 B6	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x1EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE400A00001
- stack 0: 0xF0
4618	 B8	SHR		 	 
- stack 1: 0x684
- stack 0: 0x1EB
4619	 B9	JUMP		 	 
- stack 0: 0x684
4620	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x684
4621	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
4622	 1ED	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x1EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE400A00001
4623	 1EE	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x1EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE400A00001
- stack 0: 0xE0
4624	 1F0	SHR		 	 
- stack 1: 0x684
- stack 0: 0x1EB0000
4625	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4626	 1F4	AND		 	 
- stack 1: 0x684
- stack 0: 0x0
4627	 1F5	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x1
4628	 1F7	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x0
4629	 1F8	POP		 	 
- stack 0: 0x684
4630	 1F9	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4631	 1FB	ADD		 	 
- stack 0: 0x688
4632	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4633	 1FD	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1EB000000BAFFFF00D4004001700001018F000201A9FFE400A0000102020014
4634	 1FE	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x1EB000000BAFFFF00D4004001700001018F000201A9FFE400A0000102020014
- stack 0: 0xF0
4635	 200	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1EB
4636	 201	JUMP		 	 
- stack 0: 0x688
4637	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x688
4638	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4639	 1ED	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1EB000000BAFFFF00D4004001700001018F000201A9FFE400A0000102020014
4640	 1EE	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x1EB000000BAFFFF00D4004001700001018F000201A9FFE400A0000102020014
- stack 0: 0xE0
4641	 1F0	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1EB0000
4642	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4643	 1F4	AND		 	 
- stack 1: 0x688
- stack 0: 0x0
4644	 1F5	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x1
4645	 1F7	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x0
4646	 1F8	POP		 	 
- stack 0: 0x688
4647	 1F9	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4648	 1FB	ADD		 	 
- stack 0: 0x68C
4649	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4650	 1FD	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0xBAFFFF00D4004001700001018F000201A9FFE400A000010202001402400001
4651	 1FE	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0xBAFFFF00D4004001700001018F000201A9FFE400A000010202001402400001
- stack 0: 0xF0
4652	 200	SHR		 	 
- stack 1: 0x68C
- stack 0: 0xBA
4653	 201	JUMP		 	 
- stack 0: 0x68C
4654	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x68C
4655	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
4656	 BC	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0xBAFFFF00D4004001700001018F000201A9FFE400A000010202001402400001
4657	 BD	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0xBAFFFF00D4004001700001018F000201A9FFE400A000010202001402400001
- stack 0: 0xE0
4658	 BF	SHR		 	 
- stack 1: 0x68C
- stack 0: 0xBAFFFF
4659	 C0	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
4660	 C3	AND		 	 
- stack 1: 0x68C
- stack 0: 0xFFFF
4661	 C4	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0xFFFF
- stack 0: 0x1
4662	 C6	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4663	 C7	PUSH2	0040	 	 
- stack 2: 0x68C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4664	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x68C
4665	 CB	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4666	 CD	ADD		 	 
- stack 0: 0x690
4667	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4668	 CF	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0xD4004001700001018F000201A9FFE400A00001020200140240000102400001
4669	 D0	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0xD4004001700001018F000201A9FFE400A00001020200140240000102400001
- stack 0: 0xF0
4670	 D2	SHR		 	 
- stack 1: 0x690
- stack 0: 0xD4
4671	 D3	JUMP		 	 
- stack 0: 0x690
4672	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x690
4673	 D5	PUSH2	0020	 	 
- stack 1: 0x690
- stack 0: 0x20
4674	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x690
- stack 0: 0x0
4675	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4676	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x690
- stack 0: 0x0
4677	 DF	PUSH2	0040	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x40
4678	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4679	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x690
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
4680	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4681	 E9	EQ		 	 
- stack 1: 0x690
- stack 0: 0x0
4682	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0xF2
4683	 ED	JUMPI		 	 
- stack 0: 0x690
4684	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x690
- stack 0: 0x10C
4685	 F1	JUMP		 	 
- stack 0: 0x690
4686	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x690
4687	 10D	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4688	 10F	ADD		 	 
- stack 0: 0x694
4689	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4690	 111	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x1700001018F000201A9FFE400A0000102020014024000010240000102400001
4691	 112	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x1700001018F000201A9FFE400A0000102020014024000010240000102400001
- stack 0: 0xF0
4692	 114	SHR		 	 
- stack 1: 0x694
- stack 0: 0x170
4693	 115	JUMP		 	 
- stack 0: 0x694
4694	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x694
4695	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4696	 172	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x1700001018F000201A9FFE400A0000102020014024000010240000102400001
4697	 173	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x1700001018F000201A9FFE400A0000102020014024000010240000102400001
- stack 0: 0xE0
4698	 175	SHR		 	 
- stack 1: 0x694
- stack 0: 0x1700001
4699	 176	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x1700001
- stack 0: 0xFFFF
4700	 179	AND		 	 
- stack 1: 0x694
- stack 0: 0x1
4701	 17A	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x1
4702	 17C	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x1
4703	 17D	PUSH2	0080	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x80
4704	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x0
4705	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x694
- stack 0: 0x1
4706	 182	PUSH2	0080	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x80
4707	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x694
4708	 186	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4709	 188	ADD		 	 
- stack 0: 0x698
4710	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4711	 18A	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x18F000201A9FFE400A000010202001402400001024000010240000102400001
4712	 18B	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x18F000201A9FFE400A000010202001402400001024000010240000102400001
- stack 0: 0xF0
4713	 18D	SHR		 	 
- stack 1: 0x698
- stack 0: 0x18F
4714	 18E	JUMP		 	 
- stack 0: 0x698
4715	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x698
4716	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
4717	 191	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x18F000201A9FFE400A000010202001402400001024000010240000102400001
4718	 192	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x18F000201A9FFE400A000010202001402400001024000010240000102400001
- stack 0: 0xE0
4719	 194	SHR		 	 
- stack 1: 0x698
- stack 0: 0x18F0002
4720	 195	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x18F0002
- stack 0: 0xFFFF
4721	 198	AND		 	 
- stack 1: 0x698
- stack 0: 0x2
4722	 199	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x2
- stack 0: 0x1
4723	 19B	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x2
4724	 19C	PUSH2	00A0	 	 
- stack 2: 0x698
- stack 1: 0x2
- stack 0: 0xA0
4725	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x698
4726	 1A0	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4727	 1A2	ADD		 	 
- stack 0: 0x69C
4728	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4729	 1A4	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x1A9FFE400A00001020200140240000102400001024000010240000102400001
4730	 1A5	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x1A9FFE400A00001020200140240000102400001024000010240000102400001
- stack 0: 0xF0
4731	 1A7	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x1A9
4732	 1A8	JUMP		 	 
- stack 0: 0x69C
4733	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x69C
4734	 1AA	PUSH2	0080	 	 
- stack 1: 0x69C
- stack 0: 0x80
4735	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x69C
- stack 0: 0x1
4736	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4737	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x69C
- stack 0: 0x1
4738	 1B4	PUSH2	00A0	 	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0xA0
4739	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x2
4740	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x69C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4741	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x2
4742	 1BE	SUB		 	 
- stack 1: 0x69C
- stack 0: 0x1
4743	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x1C7
4744	 1C2	JUMPI		 	 
- stack 0: 0x69C
4745	 1C7	JUMPDEST		 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x69C
4746	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4747	 1C9	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x1A9FFE400A00001020200140240000102400001024000010240000102400001
4748	 1CA	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x1A9FFE400A00001020200140240000102400001024000010240000102400001
- stack 0: 0xE0
4749	 1CC	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x1A9FFE4
4750	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x1A9FFE4
- stack 0: 0xFFFF
4751	 1D0	AND		 	 
- stack 1: 0x69C
- stack 0: 0xFFE4
4752	 1D1	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0xFFE4
- stack 0: 0x1
4753	 1D3	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4754	 1D4	ADD		 	 
- stack 0: 0x680
4755	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x680
- stack 0: 0xFFFFFFFF
4756	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x680
4757	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4758	 1DC	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xA0000001EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE4
4759	 1DD	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0xA0000001EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE4
- stack 0: 0xF0
4760	 1DF	SHR		 	 
- stack 1: 0x680
- stack 0: 0xA0
4761	 1E0	JUMP		 	 
- stack 0: 0x680
4762	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x680
4763	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
4764	 A2	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xA0000001EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE4
4765	 A3	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0xA0000001EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE4
- stack 0: 0xE0
4766	 A5	SHR		 	 
- stack 1: 0x680
- stack 0: 0xA00000
4767	 A6	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0xA00000
- stack 0: 0xFFFF
4768	 A9	AND		 	 
- stack 1: 0x680
- stack 0: 0x0
4769	 AA	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x1
4770	 AC	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x0
4771	 AD	PUSH2	0020	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x20
4772	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x680
4773	 B1	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4774	 B3	ADD		 	 
- stack 0: 0x684
4775	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4776	 B5	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x1EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE400A00001
4777	 B6	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x1EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE400A00001
- stack 0: 0xF0
4778	 B8	SHR		 	 
- stack 1: 0x684
- stack 0: 0x1EB
4779	 B9	JUMP		 	 
- stack 0: 0x684
4780	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x684
4781	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
4782	 1ED	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x1EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE400A00001
4783	 1EE	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x1EB000001EB000000BAFFFF00D4004001700001018F000201A9FFE400A00001
- stack 0: 0xE0
4784	 1F0	SHR		 	 
- stack 1: 0x684
- stack 0: 0x1EB0000
4785	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4786	 1F4	AND		 	 
- stack 1: 0x684
- stack 0: 0x0
4787	 1F5	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x1
4788	 1F7	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x0
4789	 1F8	POP		 	 
- stack 0: 0x684
4790	 1F9	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4791	 1FB	ADD		 	 
- stack 0: 0x688
4792	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4793	 1FD	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1EB000000BAFFFF00D4004001700001018F000201A9FFE400A0000102020014
4794	 1FE	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x1EB000000BAFFFF00D4004001700001018F000201A9FFE400A0000102020014
- stack 0: 0xF0
4795	 200	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1EB
4796	 201	JUMP		 	 
- stack 0: 0x688
4797	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x688
4798	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4799	 1ED	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1EB000000BAFFFF00D4004001700001018F000201A9FFE400A0000102020014
4800	 1EE	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x1EB000000BAFFFF00D4004001700001018F000201A9FFE400A0000102020014
- stack 0: 0xE0
4801	 1F0	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1EB0000
4802	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4803	 1F4	AND		 	 
- stack 1: 0x688
- stack 0: 0x0
4804	 1F5	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x1
4805	 1F7	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x0
4806	 1F8	POP		 	 
- stack 0: 0x688
4807	 1F9	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4808	 1FB	ADD		 	 
- stack 0: 0x68C
4809	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4810	 1FD	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0xBAFFFF00D4004001700001018F000201A9FFE400A000010202001402400001
4811	 1FE	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0xBAFFFF00D4004001700001018F000201A9FFE400A000010202001402400001
- stack 0: 0xF0
4812	 200	SHR		 	 
- stack 1: 0x68C
- stack 0: 0xBA
4813	 201	JUMP		 	 
- stack 0: 0x68C
4814	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x68C
4815	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
4816	 BC	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0xBAFFFF00D4004001700001018F000201A9FFE400A000010202001402400001
4817	 BD	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0xBAFFFF00D4004001700001018F000201A9FFE400A000010202001402400001
- stack 0: 0xE0
4818	 BF	SHR		 	 
- stack 1: 0x68C
- stack 0: 0xBAFFFF
4819	 C0	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
4820	 C3	AND		 	 
- stack 1: 0x68C
- stack 0: 0xFFFF
4821	 C4	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0xFFFF
- stack 0: 0x1
4822	 C6	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4823	 C7	PUSH2	0040	 	 
- stack 2: 0x68C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4824	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x68C
4825	 CB	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4826	 CD	ADD		 	 
- stack 0: 0x690
4827	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4828	 CF	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0xD4004001700001018F000201A9FFE400A00001020200140240000102400001
4829	 D0	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0xD4004001700001018F000201A9FFE400A00001020200140240000102400001
- stack 0: 0xF0
4830	 D2	SHR		 	 
- stack 1: 0x690
- stack 0: 0xD4
4831	 D3	JUMP		 	 
- stack 0: 0x690
4832	 D4	JUMPDEST		 ;; __riscvimpl_BEQ_0_1_2	  ;; # instr: beq ra,sp,c(ignore imm)
- stack 0: 0x690
4833	 D5	PUSH2	0020	 	 
- stack 1: 0x690
- stack 0: 0x20
4834	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x690
- stack 0: 0x0
4835	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4836	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x690
- stack 0: 0x0
4837	 DF	PUSH2	0040	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x40
4838	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4839	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x690
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
4840	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4841	 E9	EQ		 	 
- stack 1: 0x690
- stack 0: 0x0
4842	 EA	PUSH2	00F2	 ;; _beq_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0xF2
4843	 ED	JUMPI		 	 
- stack 0: 0x690
4844	 EE	PUSH2	010C	 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 1: 0x690
- stack 0: 0x10C
4845	 F1	JUMP		 	 
- stack 0: 0x690
4846	 10C	JUMPDEST		 ;; _beq_after_75176e23f1833831ee6a00640e405170f28c0cab78bac070438a1f3e157815ee	 
- stack 0: 0x690
4847	 10D	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4848	 10F	ADD		 	 
- stack 0: 0x694
4849	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4850	 111	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x1700001018F000201A9FFE400A0000102020014024000010240000102400001
4851	 112	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x1700001018F000201A9FFE400A0000102020014024000010240000102400001
- stack 0: 0xF0
4852	 114	SHR		 	 
- stack 1: 0x694
- stack 0: 0x170
4853	 115	JUMP		 	 
- stack 0: 0x694
4854	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x694
4855	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4856	 172	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x1700001018F000201A9FFE400A0000102020014024000010240000102400001
4857	 173	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x1700001018F000201A9FFE400A0000102020014024000010240000102400001
- stack 0: 0xE0
4858	 175	SHR		 	 
- stack 1: 0x694
- stack 0: 0x1700001
4859	 176	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x1700001
- stack 0: 0xFFFF
4860	 179	AND		 	 
- stack 1: 0x694
- stack 0: 0x1
4861	 17A	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x1
4862	 17C	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x1
4863	 17D	PUSH2	0080	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x80
4864	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x1
4865	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x694
- stack 0: 0x2
4866	 182	PUSH2	0080	 	 
- stack 2: 0x694
- stack 1: 0x2
- stack 0: 0x80
4867	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x694
4868	 186	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4869	 188	ADD		 	 
- stack 0: 0x698
4870	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4871	 18A	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x18F000201A9FFE400A000010202001402400001024000010240000102400001
4872	 18B	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x18F000201A9FFE400A000010202001402400001024000010240000102400001
- stack 0: 0xF0
4873	 18D	SHR		 	 
- stack 1: 0x698
- stack 0: 0x18F
4874	 18E	JUMP		 	 
- stack 0: 0x698
4875	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x698
4876	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
4877	 191	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x18F000201A9FFE400A000010202001402400001024000010240000102400001
4878	 192	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x18F000201A9FFE400A000010202001402400001024000010240000102400001
- stack 0: 0xE0
4879	 194	SHR		 	 
- stack 1: 0x698
- stack 0: 0x18F0002
4880	 195	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x18F0002
- stack 0: 0xFFFF
4881	 198	AND		 	 
- stack 1: 0x698
- stack 0: 0x2
4882	 199	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x2
- stack 0: 0x1
4883	 19B	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x2
4884	 19C	PUSH2	00A0	 	 
- stack 2: 0x698
- stack 1: 0x2
- stack 0: 0xA0
4885	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x698
4886	 1A0	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4887	 1A2	ADD		 	 
- stack 0: 0x69C
4888	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4889	 1A4	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x1A9FFE400A00001020200140240000102400001024000010240000102400001
4890	 1A5	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x1A9FFE400A00001020200140240000102400001024000010240000102400001
- stack 0: 0xF0
4891	 1A7	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x1A9
4892	 1A8	JUMP		 	 
- stack 0: 0x69C
4893	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x69C
4894	 1AA	PUSH2	0080	 	 
- stack 1: 0x69C
- stack 0: 0x80
4895	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x69C
- stack 0: 0x2
4896	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4897	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x69C
- stack 0: 0x2
4898	 1B4	PUSH2	00A0	 	 
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0xA0
4899	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0x2
4900	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x69C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4901	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0x2
4902	 1BE	SUB		 	 
- stack 1: 0x69C
- stack 0: 0x0
4903	 1BF	PUSH2	01C7	 ;; _neq_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x1C7
4904	 1C2	JUMPI		 	 
- stack 0: 0x69C
4905	 1C3	PUSH2	01E1	 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 1: 0x69C
- stack 0: 0x1E1
4906	 1C6	JUMP		 	 
- stack 0: 0x69C
4907	 1E1	JUMPDEST		 ;; _neq_after_79eb911f4a9ab7f0944b5405db8145ce70e5762f387e475e6b869ffc460527fb	 
- stack 0: 0x69C
4908	 1E2	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4909	 1E4	ADD		 	 
- stack 0: 0x6A0
4910	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4911	 1E6	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0xA0000102020014024000010240000102400001024000010240000102400001
4912	 1E7	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0xA0000102020014024000010240000102400001024000010240000102400001
- stack 0: 0xF0
4913	 1E9	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0xA0
4914	 1EA	JUMP		 	 
- stack 0: 0x6A0
4915	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6A0
4916	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4917	 A2	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0xA0000102020014024000010240000102400001024000010240000102400001
4918	 A3	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0xA0000102020014024000010240000102400001024000010240000102400001
- stack 0: 0xE0
4919	 A5	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0xA00001
4920	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0xA00001
- stack 0: 0xFFFF
4921	 A9	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x1
4922	 AA	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1
4923	 AC	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x1
4924	 AD	PUSH2	0020	 	 
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x20
4925	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A0
4926	 B1	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4927	 B3	ADD		 	 
- stack 0: 0x6A4
4928	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4929	 B5	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x2020014024000010240000102400001024000010240000102400001025F0003
4930	 B6	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x2020014024000010240000102400001024000010240000102400001025F0003
- stack 0: 0xF0
4931	 B8	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x202
4932	 B9	JUMP		 	 
- stack 0: 0x6A4
4933	 202	JUMPDEST		 ;; __riscvimpl_BEQ_0_0_0	  ;; # instr: beq zero,zero,14(ignore imm)
- stack 0: 0x6A4
4934	 203	PUSH1	00	 	 
- stack 1: 0x6A4
- stack 0: 0x0
4935	 205	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4936	 20A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A4
- stack 0: 0x0
4937	 20B	PUSH1	00	 	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0x0
4938	 20D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4939	 212	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0x0
4940	 213	EQ		 	 
- stack 1: 0x6A4
- stack 0: 0x1
4941	 214	PUSH2	021C	 ;; _beq_021f3398c8835988bdc58ee4b24c323480c875b168b750173500cad269b00f67	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x21C
4942	 217	JUMPI		 	 
- stack 0: 0x6A4
4943	 21C	JUMPDEST		 ;; _beq_021f3398c8835988bdc58ee4b24c323480c875b168b750173500cad269b00f67	 
- stack 0: 0x6A4
4944	 21D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
4945	 21E	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x2020014024000010240000102400001024000010240000102400001025F0003
4946	 21F	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x2020014024000010240000102400001024000010240000102400001025F0003
- stack 0: 0xE0
4947	 221	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x2020014
4948	 222	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x2020014
- stack 0: 0xFFFF
4949	 225	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x14
4950	 226	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x14
- stack 0: 0x1
4951	 228	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x14
4952	 229	ADD		 	 
- stack 0: 0x6B8
4953	 22A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6B8
- stack 0: 0xFFFFFFFF
4954	 22F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6B8
4955	 230	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4956	 231	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x240000102400001025F00030086001502790008011600180021000000340708
4957	 232	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x240000102400001025F00030086001502790008011600180021000000340708
- stack 0: 0xF0
4958	 234	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x240
4959	 235	JUMP		 	 
- stack 0: 0x6B8
4960	 240	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x6B8
4961	 241	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
4962	 242	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x240000102400001025F00030086001502790008011600180021000000340708
4963	 243	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x240000102400001025F00030086001502790008011600180021000000340708
- stack 0: 0xE0
4964	 245	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x2400001
4965	 246	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x2400001
- stack 0: 0xFFFF
4966	 249	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
4967	 24A	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
4968	 24C	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
4969	 24D	PUSH2	0020	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x20
4970	 250	MLOAD		 	  ;; # read from x1
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
4971	 251	ADD		 	  ;; # ADDI 1
- stack 1: 0x6B8
- stack 0: 0x2
4972	 252	PUSH2	0020	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0x20
4973	 255	MSTORE		 	  ;; # store to x1
- stack 0: 0x6B8
4974	 256	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4975	 258	ADD		 	 
- stack 0: 0x6BC
4976	 259	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4977	 25A	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x2400001025F0003008600150279000801160018002100000034070800530042
4978	 25B	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x2400001025F0003008600150279000801160018002100000034070800530042
- stack 0: 0xF0
4979	 25D	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x240
4980	 25E	JUMP		 	 
- stack 0: 0x6BC
4981	 240	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x6BC
4982	 241	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
4983	 242	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x2400001025F0003008600150279000801160018002100000034070800530042
4984	 243	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x2400001025F0003008600150279000801160018002100000034070800530042
- stack 0: 0xE0
4985	 245	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x2400001
4986	 246	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x2400001
- stack 0: 0xFFFF
4987	 249	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x1
4988	 24A	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0x1
4989	 24C	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x1
4990	 24D	PUSH2	0020	 	 
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0x20
4991	 250	MLOAD		 	  ;; # read from x1
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0x2
4992	 251	ADD		 	  ;; # ADDI 1
- stack 1: 0x6BC
- stack 0: 0x3
4993	 252	PUSH2	0020	 	 
- stack 2: 0x6BC
- stack 1: 0x3
- stack 0: 0x20
4994	 255	MSTORE		 	  ;; # store to x1
- stack 0: 0x6BC
4995	 256	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4996	 258	ADD		 	 
- stack 0: 0x6C0
4997	 259	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4998	 25A	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x25F000300860015027900080116001800210000003407080053004200660000
4999	 25B	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x25F000300860015027900080116001800210000003407080053004200660000
- stack 0: 0xF0
5000	 25D	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x25F
5001	 25E	JUMP		 	 
- stack 0: 0x6C0
5002	 25F	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,3(ignore imm)
- stack 0: 0x6C0
5003	 260	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
5004	 261	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x25F000300860015027900080116001800210000003407080053004200660000
5005	 262	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x25F000300860015027900080116001800210000003407080053004200660000
- stack 0: 0xE0
5006	 264	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x25F0003
5007	 265	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x25F0003
- stack 0: 0xFFFF
5008	 268	AND		 	 
- stack 1: 0x6C0
- stack 0: 0x3
5009	 269	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0x3
- stack 0: 0x1
5010	 26B	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0x3
5011	 26C	PUSH2	03A0	 	 
- stack 2: 0x6C0
- stack 1: 0x3
- stack 0: 0x3A0
5012	 26F	MSTORE		 	  ;; # store to x29
- stack 0: 0x6C0
5013	 270	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
5014	 272	ADD		 	 
- stack 0: 0x6C4
5015	 273	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
5016	 274	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x86001502790008011600180021000000340708005300420066000002BB0001
5017	 275	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x86001502790008011600180021000000340708005300420066000002BB0001
- stack 0: 0xF0
5018	 277	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x86
5019	 278	JUMP		 	 
- stack 0: 0x6C4
5020	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6C4
5021	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C4
- stack 0: 0x6C4
5022	 88	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x86001502790008011600180021000000340708005300420066000002BB0001
5023	 89	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0x86001502790008011600180021000000340708005300420066000002BB0001
- stack 0: 0xE0
5024	 8B	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x860015
5025	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x860015
- stack 0: 0xFFFF
5026	 8F	AND		 	 
- stack 1: 0x6C4
- stack 0: 0x15
5027	 90	PUSH1	01	 	 
- stack 2: 0x6C4
- stack 1: 0x15
- stack 0: 0x1
5028	 92	SIGNEXTEND		 	 
- stack 1: 0x6C4
- stack 0: 0x15
5029	 93	PUSH2	0380	 	 
- stack 2: 0x6C4
- stack 1: 0x15
- stack 0: 0x380
5030	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x6C4
5031	 97	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
5032	 99	ADD		 	 
- stack 0: 0x6C8
5033	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
5034	 9B	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x2790008011600180021000000340708005300420066000002BB000100210000
5035	 9C	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x2790008011600180021000000340708005300420066000002BB000100210000
- stack 0: 0xF0
5036	 9E	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x279
5037	 9F	JUMP		 	 
- stack 0: 0x6C8
5038	 279	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,8(ignore imm)
- stack 0: 0x6C8
5039	 27A	PUSH2	0020	 	 
- stack 1: 0x6C8
- stack 0: 0x20
5040	 27D	MLOAD		 	  ;; # read from x1
- stack 1: 0x6C8
- stack 0: 0x3
5041	 27E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
5042	 283	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C8
- stack 0: 0x3
5043	 284	PUSH2	03A0	 	 
- stack 2: 0x6C8
- stack 1: 0x3
- stack 0: 0x3A0
5044	 287	MLOAD		 	  ;; # read from x29
- stack 2: 0x6C8
- stack 1: 0x3
- stack 0: 0x3
5045	 288	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C8
- stack 2: 0x3
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
5046	 28D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C8
- stack 1: 0x3
- stack 0: 0x3
5047	 28E	SUB		 	 
- stack 1: 0x6C8
- stack 0: 0x0
5048	 28F	PUSH2	0297	 ;; _neq_8957af9cd2ed1735877c8d882e35bfbd95dab11701a6dae64eddabca43cfbeff	 
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0x297
5049	 292	JUMPI		 	 
- stack 0: 0x6C8
5050	 293	PUSH2	02B1	 ;; _neq_after_8957af9cd2ed1735877c8d882e35bfbd95dab11701a6dae64eddabca43cfbeff	 
- stack 1: 0x6C8
- stack 0: 0x2B1
5051	 296	JUMP		 	 
- stack 0: 0x6C8
5052	 2B1	JUMPDEST		 ;; _neq_after_8957af9cd2ed1735877c8d882e35bfbd95dab11701a6dae64eddabca43cfbeff	 
- stack 0: 0x6C8
5053	 2B2	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
5054	 2B4	ADD		 	 
- stack 0: 0x6CC
5055	 2B5	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
5056	 2B6	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x11600180021000000340708005300420066000002BB0001002100000034070C
5057	 2B7	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x11600180021000000340708005300420066000002BB0001002100000034070C
- stack 0: 0xF0
5058	 2B9	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x116
5059	 2BA	JUMP		 	 
- stack 0: 0x6CC
5060	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x6CC
5061	 117	PUSH1	00	 	 
- stack 1: 0x6CC
- stack 0: 0x0
5062	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
5063	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6CC
- stack 0: 0x0
5064	 11F	PUSH2	0380	 	 
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0x380
5065	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0x15
5066	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6CC
- stack 2: 0x0
- stack 1: 0x15
- stack 0: 0xFFFFFFFF
5067	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0x15
5068	 129	SUB		 	 
- stack 1: 0x6CC
- stack 0: 0x15
5069	 12A	PUSH2	0132	 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 2: 0x6CC
- stack 1: 0x15
- stack 0: 0x132
5070	 12D	JUMPI		 	 
- stack 0: 0x6CC
5071	 132	JUMPDEST		 ;; _neq_82f6444990186f0445d8ab6126dc3f9de794cdc7e3da400974fb626c8d2ceb5e	 
- stack 0: 0x6CC
5072	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6CC
- stack 0: 0x6CC
5073	 134	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x11600180021000000340708005300420066000002BB0001002100000034070C
5074	 135	PUSH1	E0	 	 
- stack 2: 0x6CC
- stack 1: 0x11600180021000000340708005300420066000002BB0001002100000034070C
- stack 0: 0xE0
5075	 137	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x1160018
5076	 138	PUSH2	FFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x1160018
- stack 0: 0xFFFF
5077	 13B	AND		 	 
- stack 1: 0x6CC
- stack 0: 0x18
5078	 13C	PUSH1	01	 	 
- stack 2: 0x6CC
- stack 1: 0x18
- stack 0: 0x1
5079	 13E	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0x18
5080	 13F	ADD		 	 
- stack 0: 0x6E4
5081	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFF
5082	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6E4
5083	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
5084	 147	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x2100000034070C005300420066000002C6000000660000000000006574796D
5085	 148	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x2100000034070C005300420066000002C6000000660000000000006574796D
- stack 0: 0xF0
5086	 14A	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x21
5087	 14B	JUMP		 	 
- stack 0: 0x6E4
5088	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x6E4
5089	 22	PUSH4	00000000	 	 
- stack 1: 0x6E4
- stack 0: 0x0
5090	 27	PUSH2	0160	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x160
5091	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x6E4
5092	 2B	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
5093	 2D	ADD		 	 
- stack 0: 0x6E8
5094	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
5095	 2F	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x34070C005300420066000002C6000000660000000000006574796D00007473
5096	 30	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x34070C005300420066000002C6000000660000000000006574796D00007473
- stack 0: 0xF0
5097	 32	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x34
5098	 33	JUMP		 	 
- stack 0: 0x6E8
5099	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1792(ignore imm)
- stack 0: 0x6E8
5100	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
5101	 36	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x34070C005300420066000002C6000000660000000000006574796D00007473
5102	 37	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x34070C005300420066000002C6000000660000000000006574796D00007473
- stack 0: 0xE0
5103	 39	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x34070C
5104	 3A	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x34070C
- stack 0: 0xFFFF
5105	 3D	AND		 	 
- stack 1: 0x6E8
- stack 0: 0x70C
5106	 3E	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0x70C
- stack 0: 0x1
5107	 40	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0x70C
5108	 41	PUSH2	0160	 	 
- stack 2: 0x6E8
- stack 1: 0x70C
- stack 0: 0x160
5109	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x6E8
- stack 1: 0x70C
- stack 0: 0x0
5110	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x6E8
- stack 0: 0x70C
5111	 46	PUSH2	0160	 	 
- stack 2: 0x6E8
- stack 1: 0x70C
- stack 0: 0x160
5112	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x6E8
5113	 4A	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
5114	 4C	ADD		 	 
- stack 0: 0x6EC
5115	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
5116	 4E	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x5300420066000002C6000000660000000000006574796D0000747300525245
5117	 4F	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x5300420066000002C6000000660000000000006574796D0000747300525245
- stack 0: 0xF0
5118	 51	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x53
5119	 52	JUMP		 	 
- stack 0: 0x6EC
5120	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x6EC
5121	 54	PUSH4	00042000	 	 
- stack 1: 0x6EC
- stack 0: 0x42000
5122	 59	PUSH2	0140	 	 
- stack 2: 0x6EC
- stack 1: 0x42000
- stack 0: 0x140
5123	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x6EC
5124	 5D	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
5125	 5F	ADD		 	 
- stack 0: 0x6F0
5126	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
5127	 61	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x66000002C6000000660000000000006574796D000074730052524500004B4F
5128	 62	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x66000002C6000000660000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
5129	 64	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x66
5130	 65	JUMP		 	 
- stack 0: 0x6F0
5131	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6F0
5132	 67	PUSH2	0140	 	 
- stack 1: 0x6F0
- stack 0: 0x140
5133	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6F0
- stack 0: 0x42000
5134	 6B	PUSH2	0075	 ;; _ecall_5f56cd4864000118466abb6371402b034c6eb3e314b6f632113dd884555bc2f8	 
- stack 2: 0x6F0
- stack 1: 0x42000
- stack 0: 0x75
5135	 6E	JUMPI		 	 
- stack 0: 0x6F0
5136	 75	JUMPDEST		 ;; _ecall_5f56cd4864000118466abb6371402b034c6eb3e314b6f632113dd884555bc2f8	 
- stack 0: 0x6F0
5137	 76	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
5138	 78	PUSH2	0160	 	 
- stack 2: 0x6F0
- stack 1: 0x4
- stack 0: 0x160
5139	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x6F0
- stack 1: 0x4
- stack 0: 0x70C
5140	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x6F0
5141	 7D	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
5142	 7F	ADD		 	 
- stack 0: 0x6F4
5143	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
5144	 81	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x2C6000000660000000000006574796D000074730052524500004B4F00000000
5145	 82	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x2C6000000660000000000006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
5146	 84	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x2C6
5147	 85	JUMP		 	 
- stack 0: 0x6F4
5148	 2C6	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x6F4
5149	 2C7	PUSH4	00000000	 	 
- stack 1: 0x6F4
- stack 0: 0x0
5150	 2CC	PUSH2	0140	 	 
- stack 2: 0x6F4
- stack 1: 0x0
- stack 0: 0x140
5151	 2CF	MSTORE		 	  ;; # store to x10
- stack 0: 0x6F4
5152	 2D0	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
5153	 2D2	ADD		 	 
- stack 0: 0x6F8
5154	 2D3	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
5155	 2D4	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x660000000000006574796D000074730052524500004B4F0000000000000000
5156	 2D5	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x660000000000006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
5157	 2D7	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x66
5158	 2D8	JUMP		 	 
- stack 0: 0x6F8
5159	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6F8
5160	 67	PUSH2	0140	 	 
- stack 1: 0x6F8
- stack 0: 0x140
5161	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6F8
- stack 0: 0x0
5162	 6B	PUSH2	0075	 ;; _ecall_5f56cd4864000118466abb6371402b034c6eb3e314b6f632113dd884555bc2f8	 
- stack 2: 0x6F8
- stack 1: 0x0
- stack 0: 0x75
5163	 6E	JUMPI		 	 
- stack 0: 0x6F8
5164	 6F	PUSH1	20	 	 
- stack 1: 0x6F8
- stack 0: 0x20
5165	 71	PUSH2	0160	 	 
- stack 2: 0x6F8
- stack 1: 0x20
- stack 0: 0x160
5166	 74	RETURN		 	 
Final bytecode length; 1514
Returned: 000000000000000000000000000000000000000000000000000000000000070c
gasUsed : 18325
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c
** HOT: 430 - range: 430,434,438,43c
** HOT: 450 - range: 450,454,458,45c
** HOT: 470 - range: 470,474,478,47c
** HOT: 48c - range: 48c,490,494,498
** HOT: 4a8 - range: 4a8,4ac,4b0,4b4
** HOT: 4c4 - range: 4c4,4c8,4cc,4d0
** HOT: 4e0 - range: 4e0,4e4,4e8,4ec,4f0
** HOT: 4e8 - range: 4e8,4ec,4f0
** HOT: 4f4 - range: 4f4,4f8,4fc
** HOT: 500 - range: 500,504,508,50c,510,514
** HOT: 508 - range: 508,50c,510,514
** HOT: 518 - range: 518,51c,520
** HOT: 524 - range: 524,528,52c,530,534,538,53c
** HOT: 52c - range: 52c,530,534,538,53c
** HOT: 540 - range: 540,544,548
** HOT: 54c - range: 54c,550,554,558,55c,560
** HOT: 554 - range: 554,558,55c,560
** HOT: 564 - range: 564,568,56c
** HOT: 570 - range: 570,574,578,57c,580,584,588
** HOT: 578 - range: 578,57c,580,584,588
** HOT: 58c - range: 58c,590,594
** HOT: 598 - range: 598,59c,5a0,5a4,5a8,5ac,5b0
** HOT: 5a0 - range: 5a0,5a4,5a8,5ac,5b0
** HOT: 5b4 - range: 5b4,5b8,5bc
** HOT: 5c0 - range: 5c0,5c4,5c8,5cc,5d0
** HOT: 5c8 - range: 5c8,5cc,5d0
** HOT: 5d4 - range: 5d4,5d8,5dc
** HOT: 5e0 - range: 5e0,5e4,5e8,5ec,5f0,5f4
** HOT: 5e8 - range: 5e8,5ec,5f0,5f4
** HOT: 5f8 - range: 5f8,5fc,600
** HOT: 604 - range: 604,608,60c,610,614,618,61c
** HOT: 60c - range: 60c,610,614,618,61c
** HOT: 620 - range: 620,624,628
** HOT: 62c - range: 62c,630,634,638,63c,640
** HOT: 634 - range: 634,638,63c,640
** HOT: 644 - range: 644,648,64c
** HOT: 650 - range: 650,654,658,65c,660,664,668
** HOT: 658 - range: 658,65c,660,664,668
** HOT: 66c - range: 66c,670,674
** HOT: 678 - range: 678,67c,680,684,688,68c,690
** HOT: 680 - range: 680,684,688,68c,690
** HOT: 694 - range: 694,698,69c
** HOT: 6b8 - range: 6b8,6bc,6c0,6c4,6c8
