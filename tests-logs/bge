Running in EVM:
0	 0	PUSH4	0370	 	 
- stack 0: 0x370
1	 5	PUSH2	02D1	 ;; _rambegin	 
- stack 1: 0x370
- stack 0: 0x2D1
2	 8	PUSH1	01	 	 
- stack 2: 0x370
- stack 1: 0x2D1
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x370
- stack 0: 0x2D2
4	 B	PUSH2	0400	 	 
- stack 2: 0x370
- stack 1: 0x2D2
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100000034076000530042006600000086000200A0000000BA000000D4000C
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100000034076000530042006600000086000200A0000000BA000000D4000C
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34076000530042006600000086000200A0000000BA000000D4000C01110310
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34076000530042006600000086000200A0000000BA000000D4000C01110310
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1888(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34076000530042006600000086000200A0000000BA000000D4000C01110310
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34076000530042006600000086000200A0000000BA000000D4000C01110310
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340760
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340760
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x760
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x760
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x760
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x760
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x760
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x760
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x760
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000200A0000000BA000000D4000C011103100111000C
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000200A0000000BA000000D4000C011103100111000C
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000200A0000000BA000000D4000C011103100111000C00D4FFFC
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000200A0000000BA000000D4000C011103100111000C00D4FFFC
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_cbb3db1db70e75a8356401ecd48f516c78afbd75b0899b82a3dab2d6d2f3a6b7	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_cbb3db1db70e75a8356401ecd48f516c78afbd75b0899b82a3dab2d6d2f3a6b7	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x760
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA000000D4000C011103100111000C00D4FFFC01110304
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA000000D4000C011103100111000C00D4FFFC01110304
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA000000D4000C011103100111000C00D4FFFC01110304
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA000000D4000C011103100111000C00D4FFFC01110304
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860002
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860002
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x2
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x2
84	 93	PUSH2	0380	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x380
85	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000D4000C011103100111000C00D4FFFC0111030400860003
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000D4000C011103100111000C00D4FFFC0111030400860003
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000D4000C011103100111000C00D4FFFC0111030400860003
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000D4000C011103100111000C00D4FFFC0111030400860003
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x20
103	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
104	 B1	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
105	 B3	ADD		 	 
- stack 0: 0x418
106	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
107	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000000D4000C011103100111000C00D4FFFC011103040086000300A00001
108	 B6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBA000000D4000C011103100111000C00D4FFFC011103040086000300A00001
- stack 0: 0xF0
109	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA
110	 B9	JUMP		 	 
- stack 0: 0x418
111	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x418
112	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
113	 BC	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000000D4000C011103100111000C00D4FFFC011103040086000300A00001
114	 BD	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xBA000000D4000C011103100111000C00D4FFFC011103040086000300A00001
- stack 0: 0xE0
115	 BF	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA0000
116	 C0	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xBA0000
- stack 0: 0xFFFF
117	 C3	AND		 	 
- stack 1: 0x418
- stack 0: 0x0
118	 C4	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x1
119	 C6	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0x0
120	 C7	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x40
121	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x418
122	 CB	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
123	 CD	ADD		 	 
- stack 0: 0x41C
124	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
125	 CF	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C011103100111000C00D4FFFC011103040086000300A0000100BA0001
126	 D0	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C011103100111000C00D4FFFC011103040086000300A0000100BA0001
- stack 0: 0xF0
127	 D2	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD4
128	 D3	JUMP		 	 
- stack 0: 0x41C
129	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x41C
130	 D5	PUSH2	0040	 	 
- stack 1: 0x41C
- stack 0: 0x40
131	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x41C
- stack 0: 0x0
132	 D9	PUSH1	03	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x3
133	 DB	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x0
134	 DC	PUSH2	0020	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x20
135	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x0
136	 E0	PUSH1	03	 	 
- stack 3: 0x41C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0x3
137	 E2	SIGNEXTEND		 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x0
138	 E3	SLT		 	  ;; # bge
- stack 1: 0x41C
- stack 0: 0x0
139	 E4	ISZERO		 	 
- stack 1: 0x41C
- stack 0: 0x1
140	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0xED
141	 E8	JUMPI		 	 
- stack 0: 0x41C
142	 ED	JUMPDEST		 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x41C
143	 EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
144	 EF	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C011103100111000C00D4FFFC011103040086000300A0000100BA0001
145	 F0	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C011103100111000C00D4FFFC011103040086000300A0000100BA0001
- stack 0: 0xE0
146	 F2	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C
147	 F3	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
148	 F6	AND		 	 
- stack 1: 0x41C
- stack 0: 0xC
149	 F7	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0xC
- stack 0: 0x1
150	 F9	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0xC
151	 FA	ADD		 	 
- stack 0: 0x428
152	 FB	PUSH4	FFFFFFFF	 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFF
153	 100	AND		 	  ;; # mask to 32 bits
- stack 0: 0x428
154	 101	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
155	 102	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC011103040086000300A0000100BA000100D4000C011102F00111000C
156	 103	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC011103040086000300A0000100BA000100D4000C011102F00111000C
- stack 0: 0xF0
157	 105	SHR		 	 
- stack 1: 0x428
- stack 0: 0xD4
158	 106	JUMP		 	 
- stack 0: 0x428
159	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x428
160	 D5	PUSH2	0040	 	 
- stack 1: 0x428
- stack 0: 0x40
161	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x428
- stack 0: 0x0
162	 D9	PUSH1	03	 	 
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x3
163	 DB	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0x0
164	 DC	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x20
165	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x0
166	 E0	PUSH1	03	 	 
- stack 3: 0x428
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0x3
167	 E2	SIGNEXTEND		 	 
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x0
168	 E3	SLT		 	  ;; # bge
- stack 1: 0x428
- stack 0: 0x0
169	 E4	ISZERO		 	 
- stack 1: 0x428
- stack 0: 0x1
170	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0xED
171	 E8	JUMPI		 	 
- stack 0: 0x428
172	 ED	JUMPDEST		 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x428
173	 EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
174	 EF	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC011103040086000300A0000100BA000100D4000C011102F00111000C
175	 F0	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC011103040086000300A0000100BA000100D4000C011102F00111000C
- stack 0: 0xE0
176	 F2	SHR		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC
177	 F3	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
178	 F6	AND		 	 
- stack 1: 0x428
- stack 0: 0xFFFC
179	 F7	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0xFFFC
- stack 0: 0x1
180	 F9	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
181	 FA	ADD		 	 
- stack 0: 0x424
182	 FB	PUSH4	FFFFFFFF	 	 
- stack 1: 0x424
- stack 0: 0xFFFFFFFF
183	 100	AND		 	  ;; # mask to 32 bits
- stack 0: 0x424
184	 101	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
185	 102	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x111000C00D4FFFC011103040086000300A0000100BA000100D4000C011102F0
186	 103	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x111000C00D4FFFC011103040086000300A0000100BA000100D4000C011102F0
- stack 0: 0xF0
187	 105	SHR		 	 
- stack 1: 0x424
- stack 0: 0x111
188	 106	JUMP		 	 
- stack 0: 0x424
189	 111	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,310(ignore imm)
- stack 0: 0x424
190	 112	PUSH1	00	 	 
- stack 1: 0x424
- stack 0: 0x0
191	 114	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
192	 119	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x0
193	 11A	PUSH2	0380	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x380
194	 11D	MLOAD		 	  ;; # read from x28
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x2
195	 11E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0x0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
196	 123	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x2
197	 124	SUB		 	 
- stack 1: 0x424
- stack 0: 0x2
198	 125	PUSH2	012D	 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 2: 0x424
- stack 1: 0x2
- stack 0: 0x12D
199	 128	JUMPI		 	 
- stack 0: 0x424
200	 12D	JUMPDEST		 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 0: 0x424
201	 12E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
202	 12F	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x111000C00D4FFFC011103040086000300A0000100BA000100D4000C011102F0
203	 130	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x111000C00D4FFFC011103040086000300A0000100BA000100D4000C011102F0
- stack 0: 0xE0
204	 132	SHR		 	 
- stack 1: 0x424
- stack 0: 0x111000C
205	 133	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x111000C
- stack 0: 0xFFFF
206	 136	AND		 	 
- stack 1: 0x424
- stack 0: 0xC
207	 137	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0xC
- stack 0: 0x1
208	 139	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0xC
209	 13A	ADD		 	 
- stack 0: 0x430
210	 13B	PUSH4	FFFFFFFF	 	 
- stack 1: 0x430
- stack 0: 0xFFFFFFFF
211	 140	AND		 	  ;; # mask to 32 bits
- stack 0: 0x430
212	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
213	 142	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x86000300A0000100BA000100D4000C011102F00111000C00D4FFFC011102E4
214	 143	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x86000300A0000100BA000100D4000C011102F00111000C00D4FFFC011102E4
- stack 0: 0xF0
215	 145	SHR		 	 
- stack 1: 0x430
- stack 0: 0x86
216	 146	JUMP		 	 
- stack 0: 0x430
217	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x430
218	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
219	 88	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x86000300A0000100BA000100D4000C011102F00111000C00D4FFFC011102E4
220	 89	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0x86000300A0000100BA000100D4000C011102F00111000C00D4FFFC011102E4
- stack 0: 0xE0
221	 8B	SHR		 	 
- stack 1: 0x430
- stack 0: 0x860003
222	 8C	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0x860003
- stack 0: 0xFFFF
223	 8F	AND		 	 
- stack 1: 0x430
- stack 0: 0x3
224	 90	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x1
225	 92	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x3
226	 93	PUSH2	0380	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x380
227	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x430
228	 97	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
229	 99	ADD		 	 
- stack 0: 0x434
230	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
231	 9B	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xA0000100BA000100D4000C011102F00111000C00D4FFFC011102E400860004
232	 9C	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xA0000100BA000100D4000C011102F00111000C00D4FFFC011102E400860004
- stack 0: 0xF0
233	 9E	SHR		 	 
- stack 1: 0x434
- stack 0: 0xA0
234	 9F	JUMP		 	 
- stack 0: 0x434
235	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x434
236	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
237	 A2	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xA0000100BA000100D4000C011102F00111000C00D4FFFC011102E400860004
238	 A3	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xA0000100BA000100D4000C011102F00111000C00D4FFFC011102E400860004
- stack 0: 0xE0
239	 A5	SHR		 	 
- stack 1: 0x434
- stack 0: 0xA00001
240	 A6	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xA00001
- stack 0: 0xFFFF
241	 A9	AND		 	 
- stack 1: 0x434
- stack 0: 0x1
242	 AA	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0x1
- stack 0: 0x1
243	 AC	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0x1
244	 AD	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0x1
- stack 0: 0x20
245	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x434
246	 B1	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
247	 B3	ADD		 	 
- stack 0: 0x438
248	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
249	 B5	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xBA000100D4000C011102F00111000C00D4FFFC011102E40086000400A0FFFF
250	 B6	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xBA000100D4000C011102F00111000C00D4FFFC011102E40086000400A0FFFF
- stack 0: 0xF0
251	 B8	SHR		 	 
- stack 1: 0x438
- stack 0: 0xBA
252	 B9	JUMP		 	 
- stack 0: 0x438
253	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x438
254	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
255	 BC	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xBA000100D4000C011102F00111000C00D4FFFC011102E40086000400A0FFFF
256	 BD	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xBA000100D4000C011102F00111000C00D4FFFC011102E40086000400A0FFFF
- stack 0: 0xE0
257	 BF	SHR		 	 
- stack 1: 0x438
- stack 0: 0xBA0001
258	 C0	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xBA0001
- stack 0: 0xFFFF
259	 C3	AND		 	 
- stack 1: 0x438
- stack 0: 0x1
260	 C4	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x1
- stack 0: 0x1
261	 C6	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x1
262	 C7	PUSH2	0040	 	 
- stack 2: 0x438
- stack 1: 0x1
- stack 0: 0x40
263	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x438
264	 CB	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
265	 CD	ADD		 	 
- stack 0: 0x43C
266	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
267	 CF	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C011102F00111000C00D4FFFC011102E40086000400A0FFFF00BAFFFF
268	 D0	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C011102F00111000C00D4FFFC011102E40086000400A0FFFF00BAFFFF
- stack 0: 0xF0
269	 D2	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xD4
270	 D3	JUMP		 	 
- stack 0: 0x43C
271	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x43C
272	 D5	PUSH2	0040	 	 
- stack 1: 0x43C
- stack 0: 0x40
273	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x43C
- stack 0: 0x1
274	 D9	PUSH1	03	 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x3
275	 DB	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0x1
276	 DC	PUSH2	0020	 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x20
277	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x1
278	 E0	PUSH1	03	 	 
- stack 3: 0x43C
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0x3
279	 E2	SIGNEXTEND		 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x1
280	 E3	SLT		 	  ;; # bge
- stack 1: 0x43C
- stack 0: 0x0
281	 E4	ISZERO		 	 
- stack 1: 0x43C
- stack 0: 0x1
282	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0xED
283	 E8	JUMPI		 	 
- stack 0: 0x43C
284	 ED	JUMPDEST		 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x43C
285	 EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
286	 EF	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C011102F00111000C00D4FFFC011102E40086000400A0FFFF00BAFFFF
287	 F0	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C011102F00111000C00D4FFFC011102E40086000400A0FFFF00BAFFFF
- stack 0: 0xE0
288	 F2	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C
289	 F3	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
290	 F6	AND		 	 
- stack 1: 0x43C
- stack 0: 0xC
291	 F7	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0xC
- stack 0: 0x1
292	 F9	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0xC
293	 FA	ADD		 	 
- stack 0: 0x448
294	 FB	PUSH4	FFFFFFFF	 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFF
295	 100	AND		 	  ;; # mask to 32 bits
- stack 0: 0x448
296	 101	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
297	 102	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC011102E40086000400A0FFFF00BAFFFF00D4000C011102D00111000C
298	 103	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC011102E40086000400A0FFFF00BAFFFF00D4000C011102D00111000C
- stack 0: 0xF0
299	 105	SHR		 	 
- stack 1: 0x448
- stack 0: 0xD4
300	 106	JUMP		 	 
- stack 0: 0x448
301	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x448
302	 D5	PUSH2	0040	 	 
- stack 1: 0x448
- stack 0: 0x40
303	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x448
- stack 0: 0x1
304	 D9	PUSH1	03	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x3
305	 DB	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0x1
306	 DC	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x20
307	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x1
308	 E0	PUSH1	03	 	 
- stack 3: 0x448
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0x3
309	 E2	SIGNEXTEND		 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x1
310	 E3	SLT		 	  ;; # bge
- stack 1: 0x448
- stack 0: 0x0
311	 E4	ISZERO		 	 
- stack 1: 0x448
- stack 0: 0x1
312	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0xED
313	 E8	JUMPI		 	 
- stack 0: 0x448
314	 ED	JUMPDEST		 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x448
315	 EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x448
- stack 0: 0x448
316	 EF	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC011102E40086000400A0FFFF00BAFFFF00D4000C011102D00111000C
317	 F0	PUSH1	E0	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC011102E40086000400A0FFFF00BAFFFF00D4000C011102D00111000C
- stack 0: 0xE0
318	 F2	SHR		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC
319	 F3	PUSH2	FFFF	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
320	 F6	AND		 	 
- stack 1: 0x448
- stack 0: 0xFFFC
321	 F7	PUSH1	01	 	 
- stack 2: 0x448
- stack 1: 0xFFFC
- stack 0: 0x1
322	 F9	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
323	 FA	ADD		 	 
- stack 0: 0x444
324	 FB	PUSH4	FFFFFFFF	 	 
- stack 1: 0x444
- stack 0: 0xFFFFFFFF
325	 100	AND		 	  ;; # mask to 32 bits
- stack 0: 0x444
326	 101	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
327	 102	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x111000C00D4FFFC011102E40086000400A0FFFF00BAFFFF00D4000C011102D0
328	 103	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x111000C00D4FFFC011102E40086000400A0FFFF00BAFFFF00D4000C011102D0
- stack 0: 0xF0
329	 105	SHR		 	 
- stack 1: 0x444
- stack 0: 0x111
330	 106	JUMP		 	 
- stack 0: 0x444
331	 111	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,310(ignore imm)
- stack 0: 0x444
332	 112	PUSH1	00	 	 
- stack 1: 0x444
- stack 0: 0x0
333	 114	PUSH4	FFFFFFFF	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
334	 119	AND		 	  ;; # mask to 32 bits
- stack 1: 0x444
- stack 0: 0x0
335	 11A	PUSH2	0380	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x380
336	 11D	MLOAD		 	  ;; # read from x28
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x3
337	 11E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x444
- stack 2: 0x0
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
338	 123	AND		 	  ;; # mask to 32 bits
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x3
339	 124	SUB		 	 
- stack 1: 0x444
- stack 0: 0x3
340	 125	PUSH2	012D	 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 2: 0x444
- stack 1: 0x3
- stack 0: 0x12D
341	 128	JUMPI		 	 
- stack 0: 0x444
342	 12D	JUMPDEST		 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 0: 0x444
343	 12E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
344	 12F	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x111000C00D4FFFC011102E40086000400A0FFFF00BAFFFF00D4000C011102D0
345	 130	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0x111000C00D4FFFC011102E40086000400A0FFFF00BAFFFF00D4000C011102D0
- stack 0: 0xE0
346	 132	SHR		 	 
- stack 1: 0x444
- stack 0: 0x111000C
347	 133	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0x111000C
- stack 0: 0xFFFF
348	 136	AND		 	 
- stack 1: 0x444
- stack 0: 0xC
349	 137	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0xC
- stack 0: 0x1
350	 139	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0xC
351	 13A	ADD		 	 
- stack 0: 0x450
352	 13B	PUSH4	FFFFFFFF	 	 
- stack 1: 0x450
- stack 0: 0xFFFFFFFF
353	 140	AND		 	  ;; # mask to 32 bits
- stack 0: 0x450
354	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
355	 142	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x86000400A0FFFF00BAFFFF00D4000C011102D00111000C00D4FFFC011102C4
356	 143	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x86000400A0FFFF00BAFFFF00D4000C011102D00111000C00D4FFFC011102C4
- stack 0: 0xF0
357	 145	SHR		 	 
- stack 1: 0x450
- stack 0: 0x86
358	 146	JUMP		 	 
- stack 0: 0x450
359	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
360	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
361	 88	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x86000400A0FFFF00BAFFFF00D4000C011102D00111000C00D4FFFC011102C4
362	 89	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x86000400A0FFFF00BAFFFF00D4000C011102D00111000C00D4FFFC011102C4
- stack 0: 0xE0
363	 8B	SHR		 	 
- stack 1: 0x450
- stack 0: 0x860004
364	 8C	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x860004
- stack 0: 0xFFFF
365	 8F	AND		 	 
- stack 1: 0x450
- stack 0: 0x4
366	 90	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x1
367	 92	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x4
368	 93	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x380
369	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
370	 97	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
371	 99	ADD		 	 
- stack 0: 0x454
372	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
373	 9B	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xA0FFFF00BAFFFF00D4000C011102D00111000C00D4FFFC011102C400860005
374	 9C	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0xA0FFFF00BAFFFF00D4000C011102D00111000C00D4FFFC011102C400860005
- stack 0: 0xF0
375	 9E	SHR		 	 
- stack 1: 0x454
- stack 0: 0xA0
376	 9F	JUMP		 	 
- stack 0: 0x454
377	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x454
378	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
379	 A2	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xA0FFFF00BAFFFF00D4000C011102D00111000C00D4FFFC011102C400860005
380	 A3	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0xA0FFFF00BAFFFF00D4000C011102D00111000C00D4FFFC011102C400860005
- stack 0: 0xE0
381	 A5	SHR		 	 
- stack 1: 0x454
- stack 0: 0xA0FFFF
382	 A6	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
383	 A9	AND		 	 
- stack 1: 0x454
- stack 0: 0xFFFF
384	 AA	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0xFFFF
- stack 0: 0x1
385	 AC	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
386	 AD	PUSH2	0020	 	 
- stack 2: 0x454
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
387	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x454
388	 B1	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
389	 B3	ADD		 	 
- stack 0: 0x458
390	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
391	 B5	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xBAFFFF00D4000C011102D00111000C00D4FFFC011102C40086000500A00001
392	 B6	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0xBAFFFF00D4000C011102D00111000C00D4FFFC011102C40086000500A00001
- stack 0: 0xF0
393	 B8	SHR		 	 
- stack 1: 0x458
- stack 0: 0xBA
394	 B9	JUMP		 	 
- stack 0: 0x458
395	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x458
396	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
397	 BC	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xBAFFFF00D4000C011102D00111000C00D4FFFC011102C40086000500A00001
398	 BD	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0xBAFFFF00D4000C011102D00111000C00D4FFFC011102C40086000500A00001
- stack 0: 0xE0
399	 BF	SHR		 	 
- stack 1: 0x458
- stack 0: 0xBAFFFF
400	 C0	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
401	 C3	AND		 	 
- stack 1: 0x458
- stack 0: 0xFFFF
402	 C4	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0xFFFF
- stack 0: 0x1
403	 C6	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
404	 C7	PUSH2	0040	 	 
- stack 2: 0x458
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
405	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x458
406	 CB	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
407	 CD	ADD		 	 
- stack 0: 0x45C
408	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
409	 CF	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C011102D00111000C00D4FFFC011102C40086000500A0000100BA0000
410	 D0	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C011102D00111000C00D4FFFC011102C40086000500A0000100BA0000
- stack 0: 0xF0
411	 D2	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xD4
412	 D3	JUMP		 	 
- stack 0: 0x45C
413	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x45C
414	 D5	PUSH2	0040	 	 
- stack 1: 0x45C
- stack 0: 0x40
415	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x45C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
416	 D9	PUSH1	03	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
417	 DB	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
418	 DC	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
419	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
420	 E0	PUSH1	03	 	 
- stack 3: 0x45C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
421	 E2	SIGNEXTEND		 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
422	 E3	SLT		 	  ;; # bge
- stack 1: 0x45C
- stack 0: 0x0
423	 E4	ISZERO		 	 
- stack 1: 0x45C
- stack 0: 0x1
424	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x45C
- stack 1: 0x1
- stack 0: 0xED
425	 E8	JUMPI		 	 
- stack 0: 0x45C
426	 ED	JUMPDEST		 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x45C
427	 EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
428	 EF	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C011102D00111000C00D4FFFC011102C40086000500A0000100BA0000
429	 F0	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C011102D00111000C00D4FFFC011102C40086000500A0000100BA0000
- stack 0: 0xE0
430	 F2	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C
431	 F3	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
432	 F6	AND		 	 
- stack 1: 0x45C
- stack 0: 0xC
433	 F7	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0xC
- stack 0: 0x1
434	 F9	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0xC
435	 FA	ADD		 	 
- stack 0: 0x468
436	 FB	PUSH4	FFFFFFFF	 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFF
437	 100	AND		 	  ;; # mask to 32 bits
- stack 0: 0x468
438	 101	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
439	 102	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC011102C40086000500A0000100BA000000D4000C011102B00111000C
440	 103	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC011102C40086000500A0000100BA000000D4000C011102B00111000C
- stack 0: 0xF0
441	 105	SHR		 	 
- stack 1: 0x468
- stack 0: 0xD4
442	 106	JUMP		 	 
- stack 0: 0x468
443	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x468
444	 D5	PUSH2	0040	 	 
- stack 1: 0x468
- stack 0: 0x40
445	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
446	 D9	PUSH1	03	 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
447	 DB	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
448	 DC	PUSH2	0020	 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
449	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
450	 E0	PUSH1	03	 	 
- stack 3: 0x468
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
451	 E2	SIGNEXTEND		 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
452	 E3	SLT		 	  ;; # bge
- stack 1: 0x468
- stack 0: 0x0
453	 E4	ISZERO		 	 
- stack 1: 0x468
- stack 0: 0x1
454	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x468
- stack 1: 0x1
- stack 0: 0xED
455	 E8	JUMPI		 	 
- stack 0: 0x468
456	 ED	JUMPDEST		 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x468
457	 EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
458	 EF	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC011102C40086000500A0000100BA000000D4000C011102B00111000C
459	 F0	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC011102C40086000500A0000100BA000000D4000C011102B00111000C
- stack 0: 0xE0
460	 F2	SHR		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC
461	 F3	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
462	 F6	AND		 	 
- stack 1: 0x468
- stack 0: 0xFFFC
463	 F7	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0xFFFC
- stack 0: 0x1
464	 F9	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
465	 FA	ADD		 	 
- stack 0: 0x464
466	 FB	PUSH4	FFFFFFFF	 	 
- stack 1: 0x464
- stack 0: 0xFFFFFFFF
467	 100	AND		 	  ;; # mask to 32 bits
- stack 0: 0x464
468	 101	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
469	 102	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x111000C00D4FFFC011102C40086000500A0000100BA000000D4000C011102B0
470	 103	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x111000C00D4FFFC011102C40086000500A0000100BA000000D4000C011102B0
- stack 0: 0xF0
471	 105	SHR		 	 
- stack 1: 0x464
- stack 0: 0x111
472	 106	JUMP		 	 
- stack 0: 0x464
473	 111	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,310(ignore imm)
- stack 0: 0x464
474	 112	PUSH1	00	 	 
- stack 1: 0x464
- stack 0: 0x0
475	 114	PUSH4	FFFFFFFF	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
476	 119	AND		 	  ;; # mask to 32 bits
- stack 1: 0x464
- stack 0: 0x0
477	 11A	PUSH2	0380	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x380
478	 11D	MLOAD		 	  ;; # read from x28
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x4
479	 11E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x464
- stack 2: 0x0
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
480	 123	AND		 	  ;; # mask to 32 bits
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x4
481	 124	SUB		 	 
- stack 1: 0x464
- stack 0: 0x4
482	 125	PUSH2	012D	 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 2: 0x464
- stack 1: 0x4
- stack 0: 0x12D
483	 128	JUMPI		 	 
- stack 0: 0x464
484	 12D	JUMPDEST		 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 0: 0x464
485	 12E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
486	 12F	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x111000C00D4FFFC011102C40086000500A0000100BA000000D4000C011102B0
487	 130	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0x111000C00D4FFFC011102C40086000500A0000100BA000000D4000C011102B0
- stack 0: 0xE0
488	 132	SHR		 	 
- stack 1: 0x464
- stack 0: 0x111000C
489	 133	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0x111000C
- stack 0: 0xFFFF
490	 136	AND		 	 
- stack 1: 0x464
- stack 0: 0xC
491	 137	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xC
- stack 0: 0x1
492	 139	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xC
493	 13A	ADD		 	 
- stack 0: 0x470
494	 13B	PUSH4	FFFFFFFF	 	 
- stack 1: 0x470
- stack 0: 0xFFFFFFFF
495	 140	AND		 	  ;; # mask to 32 bits
- stack 0: 0x470
496	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
497	 142	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x86000500A0000100BA000000D4000C011102B00111000C00D4FFFC011102A4
498	 143	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x86000500A0000100BA000000D4000C011102B00111000C00D4FFFC011102A4
- stack 0: 0xF0
499	 145	SHR		 	 
- stack 1: 0x470
- stack 0: 0x86
500	 146	JUMP		 	 
- stack 0: 0x470
501	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x470
502	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
503	 88	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x86000500A0000100BA000000D4000C011102B00111000C00D4FFFC011102A4
504	 89	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x86000500A0000100BA000000D4000C011102B00111000C00D4FFFC011102A4
- stack 0: 0xE0
505	 8B	SHR		 	 
- stack 1: 0x470
- stack 0: 0x860005
506	 8C	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x860005
- stack 0: 0xFFFF
507	 8F	AND		 	 
- stack 1: 0x470
- stack 0: 0x5
508	 90	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x1
509	 92	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0x5
510	 93	PUSH2	0380	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x380
511	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x470
512	 97	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
513	 99	ADD		 	 
- stack 0: 0x474
514	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
515	 9B	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000100BA000000D4000C011102B00111000C00D4FFFC011102A400860006
516	 9C	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0xA0000100BA000000D4000C011102B00111000C00D4FFFC011102A400860006
- stack 0: 0xF0
517	 9E	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA0
518	 9F	JUMP		 	 
- stack 0: 0x474
519	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x474
520	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
521	 A2	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000100BA000000D4000C011102B00111000C00D4FFFC011102A400860006
522	 A3	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0xA0000100BA000000D4000C011102B00111000C00D4FFFC011102A400860006
- stack 0: 0xE0
523	 A5	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA00001
524	 A6	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0xA00001
- stack 0: 0xFFFF
525	 A9	AND		 	 
- stack 1: 0x474
- stack 0: 0x1
526	 AA	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x1
- stack 0: 0x1
527	 AC	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x1
528	 AD	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0x1
- stack 0: 0x20
529	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x474
530	 B1	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
531	 B3	ADD		 	 
- stack 0: 0x478
532	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
533	 B5	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBA000000D4000C011102B00111000C00D4FFFC011102A40086000600A00001
534	 B6	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0xBA000000D4000C011102B00111000C00D4FFFC011102A40086000600A00001
- stack 0: 0xF0
535	 B8	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBA
536	 B9	JUMP		 	 
- stack 0: 0x478
537	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x478
538	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
539	 BC	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBA000000D4000C011102B00111000C00D4FFFC011102A40086000600A00001
540	 BD	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0xBA000000D4000C011102B00111000C00D4FFFC011102A40086000600A00001
- stack 0: 0xE0
541	 BF	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBA0000
542	 C0	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0xBA0000
- stack 0: 0xFFFF
543	 C3	AND		 	 
- stack 1: 0x478
- stack 0: 0x0
544	 C4	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x1
545	 C6	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0x0
546	 C7	PUSH2	0040	 	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x40
547	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x478
548	 CB	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
549	 CD	ADD		 	 
- stack 0: 0x47C
550	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
551	 CF	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xD4000C011102B00111000C00D4FFFC011102A40086000600A0000100BAFFFF
552	 D0	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0xD4000C011102B00111000C00D4FFFC011102A40086000600A0000100BAFFFF
- stack 0: 0xF0
553	 D2	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xD4
554	 D3	JUMP		 	 
- stack 0: 0x47C
555	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x47C
556	 D5	PUSH2	0040	 	 
- stack 1: 0x47C
- stack 0: 0x40
557	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x47C
- stack 0: 0x0
558	 D9	PUSH1	03	 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x3
559	 DB	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0x0
560	 DC	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x20
561	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x1
562	 E0	PUSH1	03	 	 
- stack 3: 0x47C
- stack 2: 0x0
- stack 1: 0x1
- stack 0: 0x3
563	 E2	SIGNEXTEND		 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x1
564	 E3	SLT		 	  ;; # bge
- stack 1: 0x47C
- stack 0: 0x0
565	 E4	ISZERO		 	 
- stack 1: 0x47C
- stack 0: 0x1
566	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x47C
- stack 1: 0x1
- stack 0: 0xED
567	 E8	JUMPI		 	 
- stack 0: 0x47C
568	 ED	JUMPDEST		 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x47C
569	 EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
570	 EF	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xD4000C011102B00111000C00D4FFFC011102A40086000600A0000100BAFFFF
571	 F0	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0xD4000C011102B00111000C00D4FFFC011102A40086000600A0000100BAFFFF
- stack 0: 0xE0
572	 F2	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xD4000C
573	 F3	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
574	 F6	AND		 	 
- stack 1: 0x47C
- stack 0: 0xC
575	 F7	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0xC
- stack 0: 0x1
576	 F9	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0xC
577	 FA	ADD		 	 
- stack 0: 0x488
578	 FB	PUSH4	FFFFFFFF	 	 
- stack 1: 0x488
- stack 0: 0xFFFFFFFF
579	 100	AND		 	  ;; # mask to 32 bits
- stack 0: 0x488
580	 101	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
581	 102	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xD4FFFC011102A40086000600A0000100BAFFFF00D4000C011102900111000C
582	 103	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0xD4FFFC011102A40086000600A0000100BAFFFF00D4000C011102900111000C
- stack 0: 0xF0
583	 105	SHR		 	 
- stack 1: 0x488
- stack 0: 0xD4
584	 106	JUMP		 	 
- stack 0: 0x488
585	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x488
586	 D5	PUSH2	0040	 	 
- stack 1: 0x488
- stack 0: 0x40
587	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x488
- stack 0: 0x0
588	 D9	PUSH1	03	 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x3
589	 DB	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0x0
590	 DC	PUSH2	0020	 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x20
591	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x1
592	 E0	PUSH1	03	 	 
- stack 3: 0x488
- stack 2: 0x0
- stack 1: 0x1
- stack 0: 0x3
593	 E2	SIGNEXTEND		 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x1
594	 E3	SLT		 	  ;; # bge
- stack 1: 0x488
- stack 0: 0x0
595	 E4	ISZERO		 	 
- stack 1: 0x488
- stack 0: 0x1
596	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x488
- stack 1: 0x1
- stack 0: 0xED
597	 E8	JUMPI		 	 
- stack 0: 0x488
598	 ED	JUMPDEST		 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x488
599	 EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x488
- stack 0: 0x488
600	 EF	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xD4FFFC011102A40086000600A0000100BAFFFF00D4000C011102900111000C
601	 F0	PUSH1	E0	 	 
- stack 2: 0x488
- stack 1: 0xD4FFFC011102A40086000600A0000100BAFFFF00D4000C011102900111000C
- stack 0: 0xE0
602	 F2	SHR		 	 
- stack 1: 0x488
- stack 0: 0xD4FFFC
603	 F3	PUSH2	FFFF	 	 
- stack 2: 0x488
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
604	 F6	AND		 	 
- stack 1: 0x488
- stack 0: 0xFFFC
605	 F7	PUSH1	01	 	 
- stack 2: 0x488
- stack 1: 0xFFFC
- stack 0: 0x1
606	 F9	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
607	 FA	ADD		 	 
- stack 0: 0x484
608	 FB	PUSH4	FFFFFFFF	 	 
- stack 1: 0x484
- stack 0: 0xFFFFFFFF
609	 100	AND		 	  ;; # mask to 32 bits
- stack 0: 0x484
610	 101	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
611	 102	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x111000C00D4FFFC011102A40086000600A0000100BAFFFF00D4000C01110290
612	 103	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x111000C00D4FFFC011102A40086000600A0000100BAFFFF00D4000C01110290
- stack 0: 0xF0
613	 105	SHR		 	 
- stack 1: 0x484
- stack 0: 0x111
614	 106	JUMP		 	 
- stack 0: 0x484
615	 111	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,310(ignore imm)
- stack 0: 0x484
616	 112	PUSH1	00	 	 
- stack 1: 0x484
- stack 0: 0x0
617	 114	PUSH4	FFFFFFFF	 	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
618	 119	AND		 	  ;; # mask to 32 bits
- stack 1: 0x484
- stack 0: 0x0
619	 11A	PUSH2	0380	 	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x380
620	 11D	MLOAD		 	  ;; # read from x28
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x5
621	 11E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x484
- stack 2: 0x0
- stack 1: 0x5
- stack 0: 0xFFFFFFFF
622	 123	AND		 	  ;; # mask to 32 bits
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x5
623	 124	SUB		 	 
- stack 1: 0x484
- stack 0: 0x5
624	 125	PUSH2	012D	 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 2: 0x484
- stack 1: 0x5
- stack 0: 0x12D
625	 128	JUMPI		 	 
- stack 0: 0x484
626	 12D	JUMPDEST		 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 0: 0x484
627	 12E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x484
- stack 0: 0x484
628	 12F	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x111000C00D4FFFC011102A40086000600A0000100BAFFFF00D4000C01110290
629	 130	PUSH1	E0	 	 
- stack 2: 0x484
- stack 1: 0x111000C00D4FFFC011102A40086000600A0000100BAFFFF00D4000C01110290
- stack 0: 0xE0
630	 132	SHR		 	 
- stack 1: 0x484
- stack 0: 0x111000C
631	 133	PUSH2	FFFF	 	 
- stack 2: 0x484
- stack 1: 0x111000C
- stack 0: 0xFFFF
632	 136	AND		 	 
- stack 1: 0x484
- stack 0: 0xC
633	 137	PUSH1	01	 	 
- stack 2: 0x484
- stack 1: 0xC
- stack 0: 0x1
634	 139	SIGNEXTEND		 	 
- stack 1: 0x484
- stack 0: 0xC
635	 13A	ADD		 	 
- stack 0: 0x490
636	 13B	PUSH4	FFFFFFFF	 	 
- stack 1: 0x490
- stack 0: 0xFFFFFFFF
637	 140	AND		 	  ;; # mask to 32 bits
- stack 0: 0x490
638	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
639	 142	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x86000600A0000100BAFFFF00D4000C011102900111000C00D4FFFC01110284
640	 143	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x86000600A0000100BAFFFF00D4000C011102900111000C00D4FFFC01110284
- stack 0: 0xF0
641	 145	SHR		 	 
- stack 1: 0x490
- stack 0: 0x86
642	 146	JUMP		 	 
- stack 0: 0x490
643	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x490
644	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
645	 88	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x86000600A0000100BAFFFF00D4000C011102900111000C00D4FFFC01110284
646	 89	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0x86000600A0000100BAFFFF00D4000C011102900111000C00D4FFFC01110284
- stack 0: 0xE0
647	 8B	SHR		 	 
- stack 1: 0x490
- stack 0: 0x860006
648	 8C	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0x860006
- stack 0: 0xFFFF
649	 8F	AND		 	 
- stack 1: 0x490
- stack 0: 0x6
650	 90	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0x6
- stack 0: 0x1
651	 92	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0x6
652	 93	PUSH2	0380	 	 
- stack 2: 0x490
- stack 1: 0x6
- stack 0: 0x380
653	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x490
654	 97	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
655	 99	ADD		 	 
- stack 0: 0x494
656	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
657	 9B	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xA0000100BAFFFF00D4000C011102900111000C00D4FFFC0111028400860007
658	 9C	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xA0000100BAFFFF00D4000C011102900111000C00D4FFFC0111028400860007
- stack 0: 0xF0
659	 9E	SHR		 	 
- stack 1: 0x494
- stack 0: 0xA0
660	 9F	JUMP		 	 
- stack 0: 0x494
661	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x494
662	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
663	 A2	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xA0000100BAFFFF00D4000C011102900111000C00D4FFFC0111028400860007
664	 A3	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0xA0000100BAFFFF00D4000C011102900111000C00D4FFFC0111028400860007
- stack 0: 0xE0
665	 A5	SHR		 	 
- stack 1: 0x494
- stack 0: 0xA00001
666	 A6	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0xA00001
- stack 0: 0xFFFF
667	 A9	AND		 	 
- stack 1: 0x494
- stack 0: 0x1
668	 AA	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x1
- stack 0: 0x1
669	 AC	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x1
670	 AD	PUSH2	0020	 	 
- stack 2: 0x494
- stack 1: 0x1
- stack 0: 0x20
671	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x494
672	 B1	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
673	 B3	ADD		 	 
- stack 0: 0x498
674	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
675	 B5	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xBAFFFF00D4000C011102900111000C00D4FFFC011102840086000700A0FFFF
676	 B6	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xBAFFFF00D4000C011102900111000C00D4FFFC011102840086000700A0FFFF
- stack 0: 0xF0
677	 B8	SHR		 	 
- stack 1: 0x498
- stack 0: 0xBA
678	 B9	JUMP		 	 
- stack 0: 0x498
679	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x498
680	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
681	 BC	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xBAFFFF00D4000C011102900111000C00D4FFFC011102840086000700A0FFFF
682	 BD	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0xBAFFFF00D4000C011102900111000C00D4FFFC011102840086000700A0FFFF
- stack 0: 0xE0
683	 BF	SHR		 	 
- stack 1: 0x498
- stack 0: 0xBAFFFF
684	 C0	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
685	 C3	AND		 	 
- stack 1: 0x498
- stack 0: 0xFFFF
686	 C4	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0xFFFF
- stack 0: 0x1
687	 C6	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
688	 C7	PUSH2	0040	 	 
- stack 2: 0x498
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
689	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x498
690	 CB	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
691	 CD	ADD		 	 
- stack 0: 0x49C
692	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
693	 CF	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0xD4000C011102900111000C00D4FFFC011102840086000700A0FFFF00BAFFFE
694	 D0	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0xD4000C011102900111000C00D4FFFC011102840086000700A0FFFF00BAFFFE
- stack 0: 0xF0
695	 D2	SHR		 	 
- stack 1: 0x49C
- stack 0: 0xD4
696	 D3	JUMP		 	 
- stack 0: 0x49C
697	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x49C
698	 D5	PUSH2	0040	 	 
- stack 1: 0x49C
- stack 0: 0x40
699	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x49C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
700	 D9	PUSH1	03	 	 
- stack 2: 0x49C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
701	 DB	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
702	 DC	PUSH2	0020	 	 
- stack 2: 0x49C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
703	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x49C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1
704	 E0	PUSH1	03	 	 
- stack 3: 0x49C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x1
- stack 0: 0x3
705	 E2	SIGNEXTEND		 	 
- stack 2: 0x49C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1
706	 E3	SLT		 	  ;; # bge
- stack 1: 0x49C
- stack 0: 0x0
707	 E4	ISZERO		 	 
- stack 1: 0x49C
- stack 0: 0x1
708	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x49C
- stack 1: 0x1
- stack 0: 0xED
709	 E8	JUMPI		 	 
- stack 0: 0x49C
710	 ED	JUMPDEST		 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x49C
711	 EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x49C
- stack 0: 0x49C
712	 EF	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0xD4000C011102900111000C00D4FFFC011102840086000700A0FFFF00BAFFFE
713	 F0	PUSH1	E0	 	 
- stack 2: 0x49C
- stack 1: 0xD4000C011102900111000C00D4FFFC011102840086000700A0FFFF00BAFFFE
- stack 0: 0xE0
714	 F2	SHR		 	 
- stack 1: 0x49C
- stack 0: 0xD4000C
715	 F3	PUSH2	FFFF	 	 
- stack 2: 0x49C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
716	 F6	AND		 	 
- stack 1: 0x49C
- stack 0: 0xC
717	 F7	PUSH1	01	 	 
- stack 2: 0x49C
- stack 1: 0xC
- stack 0: 0x1
718	 F9	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0xC
719	 FA	ADD		 	 
- stack 0: 0x4A8
720	 FB	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFF
721	 100	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4A8
722	 101	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
723	 102	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xD4FFFC011102840086000700A0FFFF00BAFFFE00D4000C011102700111000C
724	 103	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xD4FFFC011102840086000700A0FFFF00BAFFFE00D4000C011102700111000C
- stack 0: 0xF0
725	 105	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xD4
726	 106	JUMP		 	 
- stack 0: 0x4A8
727	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x4A8
728	 D5	PUSH2	0040	 	 
- stack 1: 0x4A8
- stack 0: 0x40
729	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
730	 D9	PUSH1	03	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
731	 DB	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
732	 DC	PUSH2	0020	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
733	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1
734	 E0	PUSH1	03	 	 
- stack 3: 0x4A8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x1
- stack 0: 0x3
735	 E2	SIGNEXTEND		 	 
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1
736	 E3	SLT		 	  ;; # bge
- stack 1: 0x4A8
- stack 0: 0x0
737	 E4	ISZERO		 	 
- stack 1: 0x4A8
- stack 0: 0x1
738	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x4A8
- stack 1: 0x1
- stack 0: 0xED
739	 E8	JUMPI		 	 
- stack 0: 0x4A8
740	 ED	JUMPDEST		 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x4A8
741	 EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
742	 EF	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xD4FFFC011102840086000700A0FFFF00BAFFFE00D4000C011102700111000C
743	 F0	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0xD4FFFC011102840086000700A0FFFF00BAFFFE00D4000C011102700111000C
- stack 0: 0xE0
744	 F2	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xD4FFFC
745	 F3	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
746	 F6	AND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFFC
747	 F7	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFC
- stack 0: 0x1
748	 F9	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
749	 FA	ADD		 	 
- stack 0: 0x4A4
750	 FB	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFF
751	 100	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4A4
752	 101	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
753	 102	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x111000C00D4FFFC011102840086000700A0FFFF00BAFFFE00D4000C01110270
754	 103	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x111000C00D4FFFC011102840086000700A0FFFF00BAFFFE00D4000C01110270
- stack 0: 0xF0
755	 105	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x111
756	 106	JUMP		 	 
- stack 0: 0x4A4
757	 111	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,310(ignore imm)
- stack 0: 0x4A4
758	 112	PUSH1	00	 	 
- stack 1: 0x4A4
- stack 0: 0x0
759	 114	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
760	 119	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A4
- stack 0: 0x0
761	 11A	PUSH2	0380	 	 
- stack 2: 0x4A4
- stack 1: 0x0
- stack 0: 0x380
762	 11D	MLOAD		 	  ;; # read from x28
- stack 2: 0x4A4
- stack 1: 0x0
- stack 0: 0x6
763	 11E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4A4
- stack 2: 0x0
- stack 1: 0x6
- stack 0: 0xFFFFFFFF
764	 123	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4A4
- stack 1: 0x0
- stack 0: 0x6
765	 124	SUB		 	 
- stack 1: 0x4A4
- stack 0: 0x6
766	 125	PUSH2	012D	 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 2: 0x4A4
- stack 1: 0x6
- stack 0: 0x12D
767	 128	JUMPI		 	 
- stack 0: 0x4A4
768	 12D	JUMPDEST		 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 0: 0x4A4
769	 12E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
770	 12F	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x111000C00D4FFFC011102840086000700A0FFFF00BAFFFE00D4000C01110270
771	 130	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x111000C00D4FFFC011102840086000700A0FFFF00BAFFFE00D4000C01110270
- stack 0: 0xE0
772	 132	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x111000C
773	 133	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x111000C
- stack 0: 0xFFFF
774	 136	AND		 	 
- stack 1: 0x4A4
- stack 0: 0xC
775	 137	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0xC
- stack 0: 0x1
776	 139	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xC
777	 13A	ADD		 	 
- stack 0: 0x4B0
778	 13B	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4B0
- stack 0: 0xFFFFFFFF
779	 140	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4B0
780	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
781	 142	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x86000700A0FFFF00BAFFFE00D4000C011102700111000C00D4FFFC01110264
782	 143	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x86000700A0FFFF00BAFFFE00D4000C011102700111000C00D4FFFC01110264
- stack 0: 0xF0
783	 145	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x86
784	 146	JUMP		 	 
- stack 0: 0x4B0
785	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4B0
786	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
787	 88	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x86000700A0FFFF00BAFFFE00D4000C011102700111000C00D4FFFC01110264
788	 89	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x86000700A0FFFF00BAFFFE00D4000C011102700111000C00D4FFFC01110264
- stack 0: 0xE0
789	 8B	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x860007
790	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x860007
- stack 0: 0xFFFF
791	 8F	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x7
792	 90	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x7
- stack 0: 0x1
793	 92	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x7
794	 93	PUSH2	0380	 	 
- stack 2: 0x4B0
- stack 1: 0x7
- stack 0: 0x380
795	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4B0
796	 97	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
797	 99	ADD		 	 
- stack 0: 0x4B4
798	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
799	 9B	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0xA0FFFF00BAFFFE00D4000C011102700111000C00D4FFFC0111026400860008
800	 9C	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0xA0FFFF00BAFFFE00D4000C011102700111000C00D4FFFC0111026400860008
- stack 0: 0xF0
801	 9E	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0xA0
802	 9F	JUMP		 	 
- stack 0: 0x4B4
803	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4B4
804	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
805	 A2	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0xA0FFFF00BAFFFE00D4000C011102700111000C00D4FFFC0111026400860008
806	 A3	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0xA0FFFF00BAFFFE00D4000C011102700111000C00D4FFFC0111026400860008
- stack 0: 0xE0
807	 A5	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0xA0FFFF
808	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
809	 A9	AND		 	 
- stack 1: 0x4B4
- stack 0: 0xFFFF
810	 AA	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFF
- stack 0: 0x1
811	 AC	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
812	 AD	PUSH2	0020	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
813	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B4
814	 B1	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
815	 B3	ADD		 	 
- stack 0: 0x4B8
816	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
817	 B5	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xBAFFFE00D4000C011102700111000C00D4FFFC011102640086000800A00000
818	 B6	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0xBAFFFE00D4000C011102700111000C00D4FFFC011102640086000800A00000
- stack 0: 0xF0
819	 B8	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xBA
820	 B9	JUMP		 	 
- stack 0: 0x4B8
821	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4B8
822	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
823	 BC	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xBAFFFE00D4000C011102700111000C00D4FFFC011102640086000800A00000
824	 BD	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0xBAFFFE00D4000C011102700111000C00D4FFFC011102640086000800A00000
- stack 0: 0xE0
825	 BF	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xBAFFFE
826	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0xBAFFFE
- stack 0: 0xFFFF
827	 C3	AND		 	 
- stack 1: 0x4B8
- stack 0: 0xFFFE
828	 C4	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0xFFFE
- stack 0: 0x1
829	 C6	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
830	 C7	PUSH2	0040	 	 
- stack 2: 0x4B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x40
831	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4B8
832	 CB	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
833	 CD	ADD		 	 
- stack 0: 0x4BC
834	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
835	 CF	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0xD4000C011102700111000C00D4FFFC011102640086000800A0000000BA0001
836	 D0	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0xD4000C011102700111000C00D4FFFC011102640086000800A0000000BA0001
- stack 0: 0xF0
837	 D2	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0xD4
838	 D3	JUMP		 	 
- stack 0: 0x4BC
839	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x4BC
840	 D5	PUSH2	0040	 	 
- stack 1: 0x4BC
- stack 0: 0x40
841	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
842	 D9	PUSH1	03	 	 
- stack 2: 0x4BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3
843	 DB	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
844	 DC	PUSH2	0020	 	 
- stack 2: 0x4BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x20
845	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x4BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
846	 E0	PUSH1	03	 	 
- stack 3: 0x4BC
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
847	 E2	SIGNEXTEND		 	 
- stack 2: 0x4BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
848	 E3	SLT		 	  ;; # bge
- stack 1: 0x4BC
- stack 0: 0x0
849	 E4	ISZERO		 	 
- stack 1: 0x4BC
- stack 0: 0x1
850	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x4BC
- stack 1: 0x1
- stack 0: 0xED
851	 E8	JUMPI		 	 
- stack 0: 0x4BC
852	 ED	JUMPDEST		 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x4BC
853	 EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
854	 EF	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0xD4000C011102700111000C00D4FFFC011102640086000800A0000000BA0001
855	 F0	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0xD4000C011102700111000C00D4FFFC011102640086000800A0000000BA0001
- stack 0: 0xE0
856	 F2	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0xD4000C
857	 F3	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0xD4000C
- stack 0: 0xFFFF
858	 F6	AND		 	 
- stack 1: 0x4BC
- stack 0: 0xC
859	 F7	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0xC
- stack 0: 0x1
860	 F9	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0xC
861	 FA	ADD		 	 
- stack 0: 0x4C8
862	 FB	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4C8
- stack 0: 0xFFFFFFFF
863	 100	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4C8
864	 101	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
865	 102	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xD4FFFC011102640086000800A0000000BA000100D40008011100080111024C
866	 103	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0xD4FFFC011102640086000800A0000000BA000100D40008011100080111024C
- stack 0: 0xF0
867	 105	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xD4
868	 106	JUMP		 	 
- stack 0: 0x4C8
869	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x4C8
870	 D5	PUSH2	0040	 	 
- stack 1: 0x4C8
- stack 0: 0x40
871	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
872	 D9	PUSH1	03	 	 
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3
873	 DB	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
874	 DC	PUSH2	0020	 	 
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x20
875	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
876	 E0	PUSH1	03	 	 
- stack 3: 0x4C8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
877	 E2	SIGNEXTEND		 	 
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
878	 E3	SLT		 	  ;; # bge
- stack 1: 0x4C8
- stack 0: 0x0
879	 E4	ISZERO		 	 
- stack 1: 0x4C8
- stack 0: 0x1
880	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x4C8
- stack 1: 0x1
- stack 0: 0xED
881	 E8	JUMPI		 	 
- stack 0: 0x4C8
882	 ED	JUMPDEST		 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x4C8
883	 EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
884	 EF	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xD4FFFC011102640086000800A0000000BA000100D40008011100080111024C
885	 F0	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0xD4FFFC011102640086000800A0000000BA000100D40008011100080111024C
- stack 0: 0xE0
886	 F2	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xD4FFFC
887	 F3	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
888	 F6	AND		 	 
- stack 1: 0x4C8
- stack 0: 0xFFFC
889	 F7	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0xFFFC
- stack 0: 0x1
890	 F9	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
891	 FA	ADD		 	 
- stack 0: 0x4C4
892	 FB	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4C4
- stack 0: 0xFFFFFFFF
893	 100	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4C4
894	 101	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
895	 102	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x111000C00D4FFFC011102640086000800A0000000BA000100D4000801110008
896	 103	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x111000C00D4FFFC011102640086000800A0000000BA000100D4000801110008
- stack 0: 0xF0
897	 105	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x111
898	 106	JUMP		 	 
- stack 0: 0x4C4
899	 111	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,310(ignore imm)
- stack 0: 0x4C4
900	 112	PUSH1	00	 	 
- stack 1: 0x4C4
- stack 0: 0x0
901	 114	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
902	 119	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C4
- stack 0: 0x0
903	 11A	PUSH2	0380	 	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x380
904	 11D	MLOAD		 	  ;; # read from x28
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x7
905	 11E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C4
- stack 2: 0x0
- stack 1: 0x7
- stack 0: 0xFFFFFFFF
906	 123	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x7
907	 124	SUB		 	 
- stack 1: 0x4C4
- stack 0: 0x7
908	 125	PUSH2	012D	 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 2: 0x4C4
- stack 1: 0x7
- stack 0: 0x12D
909	 128	JUMPI		 	 
- stack 0: 0x4C4
910	 12D	JUMPDEST		 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 0: 0x4C4
911	 12E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
912	 12F	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x111000C00D4FFFC011102640086000800A0000000BA000100D4000801110008
913	 130	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0x111000C00D4FFFC011102640086000800A0000000BA000100D4000801110008
- stack 0: 0xE0
914	 132	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x111000C
915	 133	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x111000C
- stack 0: 0xFFFF
916	 136	AND		 	 
- stack 1: 0x4C4
- stack 0: 0xC
917	 137	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0xC
- stack 0: 0x1
918	 139	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0xC
919	 13A	ADD		 	 
- stack 0: 0x4D0
920	 13B	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4D0
- stack 0: 0xFFFFFFFF
921	 140	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4D0
922	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
923	 142	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x86000800A0000000BA000100D40008011100080111024C00D4FFFC00860009
924	 143	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x86000800A0000000BA000100D40008011100080111024C00D4FFFC00860009
- stack 0: 0xF0
925	 145	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x86
926	 146	JUMP		 	 
- stack 0: 0x4D0
927	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4D0
928	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
929	 88	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x86000800A0000000BA000100D40008011100080111024C00D4FFFC00860009
930	 89	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x86000800A0000000BA000100D40008011100080111024C00D4FFFC00860009
- stack 0: 0xE0
931	 8B	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x860008
932	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x860008
- stack 0: 0xFFFF
933	 8F	AND		 	 
- stack 1: 0x4D0
- stack 0: 0x8
934	 90	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0x8
- stack 0: 0x1
935	 92	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0x8
936	 93	PUSH2	0380	 	 
- stack 2: 0x4D0
- stack 1: 0x8
- stack 0: 0x380
937	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4D0
938	 97	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
939	 99	ADD		 	 
- stack 0: 0x4D4
940	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
941	 9B	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xA0000000BA000100D40008011100080111024C00D4FFFC0086000900A0FFFF
942	 9C	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0xA0000000BA000100D40008011100080111024C00D4FFFC0086000900A0FFFF
- stack 0: 0xF0
943	 9E	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xA0
944	 9F	JUMP		 	 
- stack 0: 0x4D4
945	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4D4
946	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
947	 A2	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xA0000000BA000100D40008011100080111024C00D4FFFC0086000900A0FFFF
948	 A3	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0xA0000000BA000100D40008011100080111024C00D4FFFC0086000900A0FFFF
- stack 0: 0xE0
949	 A5	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xA00000
950	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0xA00000
- stack 0: 0xFFFF
951	 A9	AND		 	 
- stack 1: 0x4D4
- stack 0: 0x0
952	 AA	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x1
953	 AC	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0x0
954	 AD	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x20
955	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D4
956	 B1	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
957	 B3	ADD		 	 
- stack 0: 0x4D8
958	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
959	 B5	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xBA000100D40008011100080111024C00D4FFFC0086000900A0FFFF00BA0001
960	 B6	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0xBA000100D40008011100080111024C00D4FFFC0086000900A0FFFF00BA0001
- stack 0: 0xF0
961	 B8	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xBA
962	 B9	JUMP		 	 
- stack 0: 0x4D8
963	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4D8
964	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
965	 BC	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xBA000100D40008011100080111024C00D4FFFC0086000900A0FFFF00BA0001
966	 BD	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0xBA000100D40008011100080111024C00D4FFFC0086000900A0FFFF00BA0001
- stack 0: 0xE0
967	 BF	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xBA0001
968	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0xBA0001
- stack 0: 0xFFFF
969	 C3	AND		 	 
- stack 1: 0x4D8
- stack 0: 0x1
970	 C4	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0x1
- stack 0: 0x1
971	 C6	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0x1
972	 C7	PUSH2	0040	 	 
- stack 2: 0x4D8
- stack 1: 0x1
- stack 0: 0x40
973	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4D8
974	 CB	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
975	 CD	ADD		 	 
- stack 0: 0x4DC
976	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
977	 CF	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xD40008011100080111024C00D4FFFC0086000900A0FFFF00BA000100D40008
978	 D0	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0xD40008011100080111024C00D4FFFC0086000900A0FFFF00BA000100D40008
- stack 0: 0xF0
979	 D2	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xD4
980	 D3	JUMP		 	 
- stack 0: 0x4DC
981	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x4DC
982	 D5	PUSH2	0040	 	 
- stack 1: 0x4DC
- stack 0: 0x40
983	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4DC
- stack 0: 0x1
984	 D9	PUSH1	03	 	 
- stack 2: 0x4DC
- stack 1: 0x1
- stack 0: 0x3
985	 DB	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0x1
986	 DC	PUSH2	0020	 	 
- stack 2: 0x4DC
- stack 1: 0x1
- stack 0: 0x20
987	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x4DC
- stack 1: 0x1
- stack 0: 0x0
988	 E0	PUSH1	03	 	 
- stack 3: 0x4DC
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0x3
989	 E2	SIGNEXTEND		 	 
- stack 2: 0x4DC
- stack 1: 0x1
- stack 0: 0x0
990	 E3	SLT		 	  ;; # bge
- stack 1: 0x4DC
- stack 0: 0x1
991	 E4	ISZERO		 	 
- stack 1: 0x4DC
- stack 0: 0x0
992	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0xED
993	 E8	JUMPI		 	 
- stack 0: 0x4DC
994	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x4DC
- stack 0: 0x107
995	 EC	JUMP		 	 
- stack 0: 0x4DC
996	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x4DC
997	 108	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
998	 10A	ADD		 	 
- stack 0: 0x4E0
999	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1000	 10C	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x11100080111024C00D4FFFC0086000900A0FFFF00BA000100D4000801110008
1001	 10D	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x11100080111024C00D4FFFC0086000900A0FFFF00BA000100D4000801110008
- stack 0: 0xF0
1002	 10F	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x111
1003	 110	JUMP		 	 
- stack 0: 0x4E0
1004	 111	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,310(ignore imm)
- stack 0: 0x4E0
1005	 112	PUSH1	00	 	 
- stack 1: 0x4E0
- stack 0: 0x0
1006	 114	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1007	 119	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E0
- stack 0: 0x0
1008	 11A	PUSH2	0380	 	 
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x380
1009	 11D	MLOAD		 	  ;; # read from x28
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x8
1010	 11E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E0
- stack 2: 0x0
- stack 1: 0x8
- stack 0: 0xFFFFFFFF
1011	 123	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x8
1012	 124	SUB		 	 
- stack 1: 0x4E0
- stack 0: 0x8
1013	 125	PUSH2	012D	 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 2: 0x4E0
- stack 1: 0x8
- stack 0: 0x12D
1014	 128	JUMPI		 	 
- stack 0: 0x4E0
1015	 12D	JUMPDEST		 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 0: 0x4E0
1016	 12E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1017	 12F	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x11100080111024C00D4FFFC0086000900A0FFFF00BA000100D4000801110008
1018	 130	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0x11100080111024C00D4FFFC0086000900A0FFFF00BA000100D4000801110008
- stack 0: 0xE0
1019	 132	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x1110008
1020	 133	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x1110008
- stack 0: 0xFFFF
1021	 136	AND		 	 
- stack 1: 0x4E0
- stack 0: 0x8
1022	 137	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0x8
- stack 0: 0x1
1023	 139	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0x8
1024	 13A	ADD		 	 
- stack 0: 0x4E8
1025	 13B	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4E8
- stack 0: 0xFFFFFFFF
1026	 140	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4E8
1027	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1028	 142	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xD4FFFC0086000900A0FFFF00BA000100D40008011100080111023000D4FFFC
1029	 143	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0xD4FFFC0086000900A0FFFF00BA000100D40008011100080111023000D4FFFC
- stack 0: 0xF0
1030	 145	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xD4
1031	 146	JUMP		 	 
- stack 0: 0x4E8
1032	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x4E8
1033	 D5	PUSH2	0040	 	 
- stack 1: 0x4E8
- stack 0: 0x40
1034	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4E8
- stack 0: 0x1
1035	 D9	PUSH1	03	 	 
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0x3
1036	 DB	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0x1
1037	 DC	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0x20
1038	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0x0
1039	 E0	PUSH1	03	 	 
- stack 3: 0x4E8
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0x3
1040	 E2	SIGNEXTEND		 	 
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0x0
1041	 E3	SLT		 	  ;; # bge
- stack 1: 0x4E8
- stack 0: 0x1
1042	 E4	ISZERO		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1043	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0xED
1044	 E8	JUMPI		 	 
- stack 0: 0x4E8
1045	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x4E8
- stack 0: 0x107
1046	 EC	JUMP		 	 
- stack 0: 0x4E8
1047	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x4E8
1048	 108	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1049	 10A	ADD		 	 
- stack 0: 0x4EC
1050	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1051	 10C	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x86000900A0FFFF00BA000100D40008011100080111023000D4FFFC0086000A
1052	 10D	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x86000900A0FFFF00BA000100D40008011100080111023000D4FFFC0086000A
- stack 0: 0xF0
1053	 10F	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x86
1054	 110	JUMP		 	 
- stack 0: 0x4EC
1055	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4EC
1056	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1057	 88	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x86000900A0FFFF00BA000100D40008011100080111023000D4FFFC0086000A
1058	 89	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0x86000900A0FFFF00BA000100D40008011100080111023000D4FFFC0086000A
- stack 0: 0xE0
1059	 8B	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x860009
1060	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x860009
- stack 0: 0xFFFF
1061	 8F	AND		 	 
- stack 1: 0x4EC
- stack 0: 0x9
1062	 90	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0x9
- stack 0: 0x1
1063	 92	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0x9
1064	 93	PUSH2	0380	 	 
- stack 2: 0x4EC
- stack 1: 0x9
- stack 0: 0x380
1065	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4EC
1066	 97	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1067	 99	ADD		 	 
- stack 0: 0x4F0
1068	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1069	 9B	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xA0FFFF00BA000100D40008011100080111023000D4FFFC0086000A00A0FFFE
1070	 9C	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xA0FFFF00BA000100D40008011100080111023000D4FFFC0086000A00A0FFFE
- stack 0: 0xF0
1071	 9E	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xA0
1072	 9F	JUMP		 	 
- stack 0: 0x4F0
1073	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4F0
1074	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F0
- stack 0: 0x4F0
1075	 A2	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xA0FFFF00BA000100D40008011100080111023000D4FFFC0086000A00A0FFFE
1076	 A3	PUSH1	E0	 	 
- stack 2: 0x4F0
- stack 1: 0xA0FFFF00BA000100D40008011100080111023000D4FFFC0086000A00A0FFFE
- stack 0: 0xE0
1077	 A5	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xA0FFFF
1078	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4F0
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
1079	 A9	AND		 	 
- stack 1: 0x4F0
- stack 0: 0xFFFF
1080	 AA	PUSH1	01	 	 
- stack 2: 0x4F0
- stack 1: 0xFFFF
- stack 0: 0x1
1081	 AC	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1082	 AD	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1083	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F0
1084	 B1	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1085	 B3	ADD		 	 
- stack 0: 0x4F4
1086	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1087	 B5	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xBA000100D40008011100080111023000D4FFFC0086000A00A0FFFE00BAFFFF
1088	 B6	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0xBA000100D40008011100080111023000D4FFFC0086000A00A0FFFE00BAFFFF
- stack 0: 0xF0
1089	 B8	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xBA
1090	 B9	JUMP		 	 
- stack 0: 0x4F4
1091	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4F4
1092	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1093	 BC	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xBA000100D40008011100080111023000D4FFFC0086000A00A0FFFE00BAFFFF
1094	 BD	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0xBA000100D40008011100080111023000D4FFFC0086000A00A0FFFE00BAFFFF
- stack 0: 0xE0
1095	 BF	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xBA0001
1096	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0xBA0001
- stack 0: 0xFFFF
1097	 C3	AND		 	 
- stack 1: 0x4F4
- stack 0: 0x1
1098	 C4	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x1
1099	 C6	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0x1
1100	 C7	PUSH2	0040	 	 
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x40
1101	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4F4
1102	 CB	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1103	 CD	ADD		 	 
- stack 0: 0x4F8
1104	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1105	 CF	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xD40008011100080111023000D4FFFC0086000A00A0FFFE00BAFFFF00D40008
1106	 D0	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0xD40008011100080111023000D4FFFC0086000A00A0FFFE00BAFFFF00D40008
- stack 0: 0xF0
1107	 D2	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xD4
1108	 D3	JUMP		 	 
- stack 0: 0x4F8
1109	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x4F8
1110	 D5	PUSH2	0040	 	 
- stack 1: 0x4F8
- stack 0: 0x40
1111	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4F8
- stack 0: 0x1
1112	 D9	PUSH1	03	 	 
- stack 2: 0x4F8
- stack 1: 0x1
- stack 0: 0x3
1113	 DB	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x1
1114	 DC	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0x1
- stack 0: 0x20
1115	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F8
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1116	 E0	PUSH1	03	 	 
- stack 3: 0x4F8
- stack 2: 0x1
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1117	 E2	SIGNEXTEND		 	 
- stack 2: 0x4F8
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1118	 E3	SLT		 	  ;; # bge
- stack 1: 0x4F8
- stack 0: 0x1
1119	 E4	ISZERO		 	 
- stack 1: 0x4F8
- stack 0: 0x0
1120	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x4F8
- stack 1: 0x0
- stack 0: 0xED
1121	 E8	JUMPI		 	 
- stack 0: 0x4F8
1122	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x4F8
- stack 0: 0x107
1123	 EC	JUMP		 	 
- stack 0: 0x4F8
1124	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x4F8
1125	 108	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1126	 10A	ADD		 	 
- stack 0: 0x4FC
1127	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1128	 10C	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x11100080111023000D4FFFC0086000A00A0FFFE00BAFFFF00D4000801110008
1129	 10D	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x11100080111023000D4FFFC0086000A00A0FFFE00BAFFFF00D4000801110008
- stack 0: 0xF0
1130	 10F	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x111
1131	 110	JUMP		 	 
- stack 0: 0x4FC
1132	 111	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,310(ignore imm)
- stack 0: 0x4FC
1133	 112	PUSH1	00	 	 
- stack 1: 0x4FC
- stack 0: 0x0
1134	 114	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1135	 119	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0x0
1136	 11A	PUSH2	0380	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x380
1137	 11D	MLOAD		 	  ;; # read from x28
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x9
1138	 11E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4FC
- stack 2: 0x0
- stack 1: 0x9
- stack 0: 0xFFFFFFFF
1139	 123	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x9
1140	 124	SUB		 	 
- stack 1: 0x4FC
- stack 0: 0x9
1141	 125	PUSH2	012D	 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 2: 0x4FC
- stack 1: 0x9
- stack 0: 0x12D
1142	 128	JUMPI		 	 
- stack 0: 0x4FC
1143	 12D	JUMPDEST		 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 0: 0x4FC
1144	 12E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1145	 12F	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x11100080111023000D4FFFC0086000A00A0FFFE00BAFFFF00D4000801110008
1146	 130	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x11100080111023000D4FFFC0086000A00A0FFFE00BAFFFF00D4000801110008
- stack 0: 0xE0
1147	 132	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1110008
1148	 133	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x1110008
- stack 0: 0xFFFF
1149	 136	AND		 	 
- stack 1: 0x4FC
- stack 0: 0x8
1150	 137	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0x8
- stack 0: 0x1
1151	 139	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0x8
1152	 13A	ADD		 	 
- stack 0: 0x504
1153	 13B	PUSH4	FFFFFFFF	 	 
- stack 1: 0x504
- stack 0: 0xFFFFFFFF
1154	 140	AND		 	  ;; # mask to 32 bits
- stack 0: 0x504
1155	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1156	 142	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0xD4FFFC0086000A00A0FFFE00BAFFFF00D40008011100080111021400D4FFFC
1157	 143	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0xD4FFFC0086000A00A0FFFE00BAFFFF00D40008011100080111021400D4FFFC
- stack 0: 0xF0
1158	 145	SHR		 	 
- stack 1: 0x504
- stack 0: 0xD4
1159	 146	JUMP		 	 
- stack 0: 0x504
1160	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x504
1161	 D5	PUSH2	0040	 	 
- stack 1: 0x504
- stack 0: 0x40
1162	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x504
- stack 0: 0x1
1163	 D9	PUSH1	03	 	 
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0x3
1164	 DB	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0x1
1165	 DC	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0x20
1166	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1167	 E0	PUSH1	03	 	 
- stack 3: 0x504
- stack 2: 0x1
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1168	 E2	SIGNEXTEND		 	 
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1169	 E3	SLT		 	  ;; # bge
- stack 1: 0x504
- stack 0: 0x1
1170	 E4	ISZERO		 	 
- stack 1: 0x504
- stack 0: 0x0
1171	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0xED
1172	 E8	JUMPI		 	 
- stack 0: 0x504
1173	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x504
- stack 0: 0x107
1174	 EC	JUMP		 	 
- stack 0: 0x504
1175	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x504
1176	 108	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1177	 10A	ADD		 	 
- stack 0: 0x508
1178	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1179	 10C	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x86000A00A0FFFE00BAFFFF00D40008011100080111021400D4FFFC0086000B
1180	 10D	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x86000A00A0FFFE00BAFFFF00D40008011100080111021400D4FFFC0086000B
- stack 0: 0xF0
1181	 10F	SHR		 	 
- stack 1: 0x508
- stack 0: 0x86
1182	 110	JUMP		 	 
- stack 0: 0x508
1183	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x508
1184	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1185	 88	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x86000A00A0FFFE00BAFFFF00D40008011100080111021400D4FFFC0086000B
1186	 89	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x86000A00A0FFFE00BAFFFF00D40008011100080111021400D4FFFC0086000B
- stack 0: 0xE0
1187	 8B	SHR		 	 
- stack 1: 0x508
- stack 0: 0x86000A
1188	 8C	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x86000A
- stack 0: 0xFFFF
1189	 8F	AND		 	 
- stack 1: 0x508
- stack 0: 0xA
1190	 90	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xA
- stack 0: 0x1
1191	 92	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xA
1192	 93	PUSH2	0380	 	 
- stack 2: 0x508
- stack 1: 0xA
- stack 0: 0x380
1193	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x508
1194	 97	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1195	 99	ADD		 	 
- stack 0: 0x50C
1196	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1197	 9B	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xA0FFFE00BAFFFF00D40008011100080111021400D4FFFC0086000B00A0FFFE
1198	 9C	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xA0FFFE00BAFFFF00D40008011100080111021400D4FFFC0086000B00A0FFFE
- stack 0: 0xF0
1199	 9E	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xA0
1200	 9F	JUMP		 	 
- stack 0: 0x50C
1201	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x50C
1202	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1203	 A2	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xA0FFFE00BAFFFF00D40008011100080111021400D4FFFC0086000B00A0FFFE
1204	 A3	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0xA0FFFE00BAFFFF00D40008011100080111021400D4FFFC0086000B00A0FFFE
- stack 0: 0xE0
1205	 A5	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xA0FFFE
1206	 A6	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0xA0FFFE
- stack 0: 0xFFFF
1207	 A9	AND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFE
1208	 AA	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xFFFE
- stack 0: 0x1
1209	 AC	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1210	 AD	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x20
1211	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x50C
1212	 B1	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1213	 B3	ADD		 	 
- stack 0: 0x510
1214	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1215	 B5	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xBAFFFF00D40008011100080111021400D4FFFC0086000B00A0FFFE00BA0001
1216	 B6	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xBAFFFF00D40008011100080111021400D4FFFC0086000B00A0FFFE00BA0001
- stack 0: 0xF0
1217	 B8	SHR		 	 
- stack 1: 0x510
- stack 0: 0xBA
1218	 B9	JUMP		 	 
- stack 0: 0x510
1219	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x510
1220	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1221	 BC	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xBAFFFF00D40008011100080111021400D4FFFC0086000B00A0FFFE00BA0001
1222	 BD	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0xBAFFFF00D40008011100080111021400D4FFFC0086000B00A0FFFE00BA0001
- stack 0: 0xE0
1223	 BF	SHR		 	 
- stack 1: 0x510
- stack 0: 0xBAFFFF
1224	 C0	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
1225	 C3	AND		 	 
- stack 1: 0x510
- stack 0: 0xFFFF
1226	 C4	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0xFFFF
- stack 0: 0x1
1227	 C6	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1228	 C7	PUSH2	0040	 	 
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1229	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x510
1230	 CB	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1231	 CD	ADD		 	 
- stack 0: 0x514
1232	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1233	 CF	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xD40008011100080111021400D4FFFC0086000B00A0FFFE00BA000100D40008
1234	 D0	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xD40008011100080111021400D4FFFC0086000B00A0FFFE00BA000100D40008
- stack 0: 0xF0
1235	 D2	SHR		 	 
- stack 1: 0x514
- stack 0: 0xD4
1236	 D3	JUMP		 	 
- stack 0: 0x514
1237	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x514
1238	 D5	PUSH2	0040	 	 
- stack 1: 0x514
- stack 0: 0x40
1239	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x514
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1240	 D9	PUSH1	03	 	 
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1241	 DB	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1242	 DC	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1243	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1244	 E0	PUSH1	03	 	 
- stack 3: 0x514
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3
1245	 E2	SIGNEXTEND		 	 
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1246	 E3	SLT		 	  ;; # bge
- stack 1: 0x514
- stack 0: 0x1
1247	 E4	ISZERO		 	 
- stack 1: 0x514
- stack 0: 0x0
1248	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0xED
1249	 E8	JUMPI		 	 
- stack 0: 0x514
1250	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x514
- stack 0: 0x107
1251	 EC	JUMP		 	 
- stack 0: 0x514
1252	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x514
1253	 108	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1254	 10A	ADD		 	 
- stack 0: 0x518
1255	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1256	 10C	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x11100080111021400D4FFFC0086000B00A0FFFE00BA000100D4000801110008
1257	 10D	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x11100080111021400D4FFFC0086000B00A0FFFE00BA000100D4000801110008
- stack 0: 0xF0
1258	 10F	SHR		 	 
- stack 1: 0x518
- stack 0: 0x111
1259	 110	JUMP		 	 
- stack 0: 0x518
1260	 111	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,310(ignore imm)
- stack 0: 0x518
1261	 112	PUSH1	00	 	 
- stack 1: 0x518
- stack 0: 0x0
1262	 114	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1263	 119	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x0
1264	 11A	PUSH2	0380	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x380
1265	 11D	MLOAD		 	  ;; # read from x28
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xA
1266	 11E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x518
- stack 2: 0x0
- stack 1: 0xA
- stack 0: 0xFFFFFFFF
1267	 123	AND		 	  ;; # mask to 32 bits
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xA
1268	 124	SUB		 	 
- stack 1: 0x518
- stack 0: 0xA
1269	 125	PUSH2	012D	 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 2: 0x518
- stack 1: 0xA
- stack 0: 0x12D
1270	 128	JUMPI		 	 
- stack 0: 0x518
1271	 12D	JUMPDEST		 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 0: 0x518
1272	 12E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1273	 12F	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x11100080111021400D4FFFC0086000B00A0FFFE00BA000100D4000801110008
1274	 130	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x11100080111021400D4FFFC0086000B00A0FFFE00BA000100D4000801110008
- stack 0: 0xE0
1275	 132	SHR		 	 
- stack 1: 0x518
- stack 0: 0x1110008
1276	 133	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x1110008
- stack 0: 0xFFFF
1277	 136	AND		 	 
- stack 1: 0x518
- stack 0: 0x8
1278	 137	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0x8
- stack 0: 0x1
1279	 139	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x8
1280	 13A	ADD		 	 
- stack 0: 0x520
1281	 13B	PUSH4	FFFFFFFF	 	 
- stack 1: 0x520
- stack 0: 0xFFFFFFFF
1282	 140	AND		 	  ;; # mask to 32 bits
- stack 0: 0x520
1283	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1284	 142	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xD4FFFC0086000B00A0FFFE00BA000100D4000801110008011101F800D4FFFC
1285	 143	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0xD4FFFC0086000B00A0FFFE00BA000100D4000801110008011101F800D4FFFC
- stack 0: 0xF0
1286	 145	SHR		 	 
- stack 1: 0x520
- stack 0: 0xD4
1287	 146	JUMP		 	 
- stack 0: 0x520
1288	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x520
1289	 D5	PUSH2	0040	 	 
- stack 1: 0x520
- stack 0: 0x40
1290	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x520
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1291	 D9	PUSH1	03	 	 
- stack 2: 0x520
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1292	 DB	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1293	 DC	PUSH2	0020	 	 
- stack 2: 0x520
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1294	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x520
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1295	 E0	PUSH1	03	 	 
- stack 3: 0x520
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3
1296	 E2	SIGNEXTEND		 	 
- stack 2: 0x520
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1297	 E3	SLT		 	  ;; # bge
- stack 1: 0x520
- stack 0: 0x1
1298	 E4	ISZERO		 	 
- stack 1: 0x520
- stack 0: 0x0
1299	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x520
- stack 1: 0x0
- stack 0: 0xED
1300	 E8	JUMPI		 	 
- stack 0: 0x520
1301	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x520
- stack 0: 0x107
1302	 EC	JUMP		 	 
- stack 0: 0x520
1303	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x520
1304	 108	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1305	 10A	ADD		 	 
- stack 0: 0x524
1306	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1307	 10C	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x86000B00A0FFFE00BA000100D4000801110008011101F800D4FFFC0086000C
1308	 10D	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x86000B00A0FFFE00BA000100D4000801110008011101F800D4FFFC0086000C
- stack 0: 0xF0
1309	 10F	SHR		 	 
- stack 1: 0x524
- stack 0: 0x86
1310	 110	JUMP		 	 
- stack 0: 0x524
1311	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x524
1312	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1313	 88	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x86000B00A0FFFE00BA000100D4000801110008011101F800D4FFFC0086000C
1314	 89	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x86000B00A0FFFE00BA000100D4000801110008011101F800D4FFFC0086000C
- stack 0: 0xE0
1315	 8B	SHR		 	 
- stack 1: 0x524
- stack 0: 0x86000B
1316	 8C	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x86000B
- stack 0: 0xFFFF
1317	 8F	AND		 	 
- stack 1: 0x524
- stack 0: 0xB
1318	 90	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0xB
- stack 0: 0x1
1319	 92	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xB
1320	 93	PUSH2	0380	 	 
- stack 2: 0x524
- stack 1: 0xB
- stack 0: 0x380
1321	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x524
1322	 97	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1323	 99	ADD		 	 
- stack 0: 0x528
1324	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1325	 9B	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xA0FFFE00BA000100D4000801110008011101F800D4FFFC0086000C01510000
1326	 9C	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0xA0FFFE00BA000100D4000801110008011101F800D4FFFC0086000C01510000
- stack 0: 0xF0
1327	 9E	SHR		 	 
- stack 1: 0x528
- stack 0: 0xA0
1328	 9F	JUMP		 	 
- stack 0: 0x528
1329	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x528
1330	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1331	 A2	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xA0FFFE00BA000100D4000801110008011101F800D4FFFC0086000C01510000
1332	 A3	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0xA0FFFE00BA000100D4000801110008011101F800D4FFFC0086000C01510000
- stack 0: 0xE0
1333	 A5	SHR		 	 
- stack 1: 0x528
- stack 0: 0xA0FFFE
1334	 A6	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0xA0FFFE
- stack 0: 0xFFFF
1335	 A9	AND		 	 
- stack 1: 0x528
- stack 0: 0xFFFE
1336	 AA	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0xFFFE
- stack 0: 0x1
1337	 AC	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1338	 AD	PUSH2	0020	 	 
- stack 2: 0x528
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x20
1339	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x528
1340	 B1	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1341	 B3	ADD		 	 
- stack 0: 0x52C
1342	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1343	 B5	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xBA000100D4000801110008011101F800D4FFFC0086000C0151000000A0FFFF
1344	 B6	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0xBA000100D4000801110008011101F800D4FFFC0086000C0151000000A0FFFF
- stack 0: 0xF0
1345	 B8	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xBA
1346	 B9	JUMP		 	 
- stack 0: 0x52C
1347	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x52C
1348	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1349	 BC	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xBA000100D4000801110008011101F800D4FFFC0086000C0151000000A0FFFF
1350	 BD	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0xBA000100D4000801110008011101F800D4FFFC0086000C0151000000A0FFFF
- stack 0: 0xE0
1351	 BF	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xBA0001
1352	 C0	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0xBA0001
- stack 0: 0xFFFF
1353	 C3	AND		 	 
- stack 1: 0x52C
- stack 0: 0x1
1354	 C4	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x1
- stack 0: 0x1
1355	 C6	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x1
1356	 C7	PUSH2	0040	 	 
- stack 2: 0x52C
- stack 1: 0x1
- stack 0: 0x40
1357	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x52C
1358	 CB	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1359	 CD	ADD		 	 
- stack 0: 0x530
1360	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1361	 CF	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xD4000801110008011101F800D4FFFC0086000C0151000000A0FFFF00BA0000
1362	 D0	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0xD4000801110008011101F800D4FFFC0086000C0151000000A0FFFF00BA0000
- stack 0: 0xF0
1363	 D2	SHR		 	 
- stack 1: 0x530
- stack 0: 0xD4
1364	 D3	JUMP		 	 
- stack 0: 0x530
1365	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x530
1366	 D5	PUSH2	0040	 	 
- stack 1: 0x530
- stack 0: 0x40
1367	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x530
- stack 0: 0x1
1368	 D9	PUSH1	03	 	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x3
1369	 DB	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0x1
1370	 DC	PUSH2	0020	 	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x20
1371	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1372	 E0	PUSH1	03	 	 
- stack 3: 0x530
- stack 2: 0x1
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3
1373	 E2	SIGNEXTEND		 	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1374	 E3	SLT		 	  ;; # bge
- stack 1: 0x530
- stack 0: 0x1
1375	 E4	ISZERO		 	 
- stack 1: 0x530
- stack 0: 0x0
1376	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0xED
1377	 E8	JUMPI		 	 
- stack 0: 0x530
1378	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x530
- stack 0: 0x107
1379	 EC	JUMP		 	 
- stack 0: 0x530
1380	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x530
1381	 108	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1382	 10A	ADD		 	 
- stack 0: 0x534
1383	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1384	 10C	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1110008011101F800D4FFFC0086000C0151000000A0FFFF00BA000000D401E0
1385	 10D	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x1110008011101F800D4FFFC0086000C0151000000A0FFFF00BA000000D401E0
- stack 0: 0xF0
1386	 10F	SHR		 	 
- stack 1: 0x534
- stack 0: 0x111
1387	 110	JUMP		 	 
- stack 0: 0x534
1388	 111	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,310(ignore imm)
- stack 0: 0x534
1389	 112	PUSH1	00	 	 
- stack 1: 0x534
- stack 0: 0x0
1390	 114	PUSH4	FFFFFFFF	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1391	 119	AND		 	  ;; # mask to 32 bits
- stack 1: 0x534
- stack 0: 0x0
1392	 11A	PUSH2	0380	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x380
1393	 11D	MLOAD		 	  ;; # read from x28
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0xB
1394	 11E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x534
- stack 2: 0x0
- stack 1: 0xB
- stack 0: 0xFFFFFFFF
1395	 123	AND		 	  ;; # mask to 32 bits
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0xB
1396	 124	SUB		 	 
- stack 1: 0x534
- stack 0: 0xB
1397	 125	PUSH2	012D	 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 2: 0x534
- stack 1: 0xB
- stack 0: 0x12D
1398	 128	JUMPI		 	 
- stack 0: 0x534
1399	 12D	JUMPDEST		 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 0: 0x534
1400	 12E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1401	 12F	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1110008011101F800D4FFFC0086000C0151000000A0FFFF00BA000000D401E0
1402	 130	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x1110008011101F800D4FFFC0086000C0151000000A0FFFF00BA000000D401E0
- stack 0: 0xE0
1403	 132	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1110008
1404	 133	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x1110008
- stack 0: 0xFFFF
1405	 136	AND		 	 
- stack 1: 0x534
- stack 0: 0x8
1406	 137	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0x8
- stack 0: 0x1
1407	 139	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0x8
1408	 13A	ADD		 	 
- stack 0: 0x53C
1409	 13B	PUSH4	FFFFFFFF	 	 
- stack 1: 0x53C
- stack 0: 0xFFFFFFFF
1410	 140	AND		 	  ;; # mask to 32 bits
- stack 0: 0x53C
1411	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1412	 142	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xD4FFFC0086000C0151000000A0FFFF00BA000000D401E0016B0001018A0002
1413	 143	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0xD4FFFC0086000C0151000000A0FFFF00BA000000D401E0016B0001018A0002
- stack 0: 0xF0
1414	 145	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xD4
1415	 146	JUMP		 	 
- stack 0: 0x53C
1416	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x53C
1417	 D5	PUSH2	0040	 	 
- stack 1: 0x53C
- stack 0: 0x40
1418	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x53C
- stack 0: 0x1
1419	 D9	PUSH1	03	 	 
- stack 2: 0x53C
- stack 1: 0x1
- stack 0: 0x3
1420	 DB	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0x1
1421	 DC	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0x1
- stack 0: 0x20
1422	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x53C
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1423	 E0	PUSH1	03	 	 
- stack 3: 0x53C
- stack 2: 0x1
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3
1424	 E2	SIGNEXTEND		 	 
- stack 2: 0x53C
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1425	 E3	SLT		 	  ;; # bge
- stack 1: 0x53C
- stack 0: 0x1
1426	 E4	ISZERO		 	 
- stack 1: 0x53C
- stack 0: 0x0
1427	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0xED
1428	 E8	JUMPI		 	 
- stack 0: 0x53C
1429	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x53C
- stack 0: 0x107
1430	 EC	JUMP		 	 
- stack 0: 0x53C
1431	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x53C
1432	 108	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1433	 10A	ADD		 	 
- stack 0: 0x540
1434	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1435	 10C	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x86000C0151000000A0FFFF00BA000000D401E0016B0001018A000201A4FFEC
1436	 10D	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x86000C0151000000A0FFFF00BA000000D401E0016B0001018A000201A4FFEC
- stack 0: 0xF0
1437	 10F	SHR		 	 
- stack 1: 0x540
- stack 0: 0x86
1438	 110	JUMP		 	 
- stack 0: 0x540
1439	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x540
1440	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1441	 88	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x86000C0151000000A0FFFF00BA000000D401E0016B0001018A000201A4FFEC
1442	 89	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x86000C0151000000A0FFFF00BA000000D401E0016B0001018A000201A4FFEC
- stack 0: 0xE0
1443	 8B	SHR		 	 
- stack 1: 0x540
- stack 0: 0x86000C
1444	 8C	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x86000C
- stack 0: 0xFFFF
1445	 8F	AND		 	 
- stack 1: 0x540
- stack 0: 0xC
1446	 90	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xC
- stack 0: 0x1
1447	 92	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xC
1448	 93	PUSH2	0380	 	 
- stack 2: 0x540
- stack 1: 0xC
- stack 0: 0x380
1449	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x540
1450	 97	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1451	 99	ADD		 	 
- stack 0: 0x544
1452	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1453	 9B	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x151000000A0FFFF00BA000000D401E0016B0001018A000201A4FFEC0086000D
1454	 9C	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x151000000A0FFFF00BA000000D401E0016B0001018A000201A4FFEC0086000D
- stack 0: 0xF0
1455	 9E	SHR		 	 
- stack 1: 0x544
- stack 0: 0x151
1456	 9F	JUMP		 	 
- stack 0: 0x544
1457	 151	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x544
1458	 152	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1459	 153	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x151000000A0FFFF00BA000000D401E0016B0001018A000201A4FFEC0086000D
1460	 154	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x151000000A0FFFF00BA000000D401E0016B0001018A000201A4FFEC0086000D
- stack 0: 0xE0
1461	 156	SHR		 	 
- stack 1: 0x544
- stack 0: 0x1510000
1462	 157	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x1510000
- stack 0: 0xFFFF
1463	 15A	AND		 	 
- stack 1: 0x544
- stack 0: 0x0
1464	 15B	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x1
1465	 15D	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x0
1466	 15E	PUSH2	0080	 	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x80
1467	 161	MSTORE		 	  ;; # store to x4
- stack 0: 0x544
1468	 162	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1469	 164	ADD		 	 
- stack 0: 0x548
1470	 165	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1471	 166	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xA0FFFF00BA000000D401E0016B0001018A000201A4FFEC0086000D01510000
1472	 167	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0xA0FFFF00BA000000D401E0016B0001018A000201A4FFEC0086000D01510000
- stack 0: 0xF0
1473	 169	SHR		 	 
- stack 1: 0x548
- stack 0: 0xA0
1474	 16A	JUMP		 	 
- stack 0: 0x548
1475	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x548
1476	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1477	 A2	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xA0FFFF00BA000000D401E0016B0001018A000201A4FFEC0086000D01510000
1478	 A3	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0xA0FFFF00BA000000D401E0016B0001018A000201A4FFEC0086000D01510000
- stack 0: 0xE0
1479	 A5	SHR		 	 
- stack 1: 0x548
- stack 0: 0xA0FFFF
1480	 A6	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
1481	 A9	AND		 	 
- stack 1: 0x548
- stack 0: 0xFFFF
1482	 AA	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0xFFFF
- stack 0: 0x1
1483	 AC	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1484	 AD	PUSH2	0020	 	 
- stack 2: 0x548
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1485	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x548
1486	 B1	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1487	 B3	ADD		 	 
- stack 0: 0x54C
1488	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1489	 B5	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xBA000000D401E0016B0001018A000201A4FFEC0086000D0151000000A0FFFF
1490	 B6	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xBA000000D401E0016B0001018A000201A4FFEC0086000D0151000000A0FFFF
- stack 0: 0xF0
1491	 B8	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xBA
1492	 B9	JUMP		 	 
- stack 0: 0x54C
1493	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x54C
1494	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1495	 BC	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xBA000000D401E0016B0001018A000201A4FFEC0086000D0151000000A0FFFF
1496	 BD	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0xBA000000D401E0016B0001018A000201A4FFEC0086000D0151000000A0FFFF
- stack 0: 0xE0
1497	 BF	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xBA0000
1498	 C0	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0xBA0000
- stack 0: 0xFFFF
1499	 C3	AND		 	 
- stack 1: 0x54C
- stack 0: 0x0
1500	 C4	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x1
1501	 C6	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x0
1502	 C7	PUSH2	0040	 	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x40
1503	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x54C
1504	 CB	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1505	 CD	ADD		 	 
- stack 0: 0x550
1506	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1507	 CF	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xD401E0016B0001018A000201A4FFEC0086000D0151000000A0FFFF00BA0000
1508	 D0	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0xD401E0016B0001018A000201A4FFEC0086000D0151000000A0FFFF00BA0000
- stack 0: 0xF0
1509	 D2	SHR		 	 
- stack 1: 0x550
- stack 0: 0xD4
1510	 D3	JUMP		 	 
- stack 0: 0x550
1511	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x550
1512	 D5	PUSH2	0040	 	 
- stack 1: 0x550
- stack 0: 0x40
1513	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x550
- stack 0: 0x0
1514	 D9	PUSH1	03	 	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x3
1515	 DB	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0x0
1516	 DC	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x20
1517	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1518	 E0	PUSH1	03	 	 
- stack 3: 0x550
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1519	 E2	SIGNEXTEND		 	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1520	 E3	SLT		 	  ;; # bge
- stack 1: 0x550
- stack 0: 0x1
1521	 E4	ISZERO		 	 
- stack 1: 0x550
- stack 0: 0x0
1522	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0xED
1523	 E8	JUMPI		 	 
- stack 0: 0x550
1524	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x550
- stack 0: 0x107
1525	 EC	JUMP		 	 
- stack 0: 0x550
1526	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x550
1527	 108	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1528	 10A	ADD		 	 
- stack 0: 0x554
1529	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1530	 10C	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x16B0001018A000201A4FFEC0086000D0151000000A0FFFF00BA000001E60000
1531	 10D	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x16B0001018A000201A4FFEC0086000D0151000000A0FFFF00BA000001E60000
- stack 0: 0xF0
1532	 10F	SHR		 	 
- stack 1: 0x554
- stack 0: 0x16B
1533	 110	JUMP		 	 
- stack 0: 0x554
1534	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x554
1535	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1536	 16D	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x16B0001018A000201A4FFEC0086000D0151000000A0FFFF00BA000001E60000
1537	 16E	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x16B0001018A000201A4FFEC0086000D0151000000A0FFFF00BA000001E60000
- stack 0: 0xE0
1538	 170	SHR		 	 
- stack 1: 0x554
- stack 0: 0x16B0001
1539	 171	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x16B0001
- stack 0: 0xFFFF
1540	 174	AND		 	 
- stack 1: 0x554
- stack 0: 0x1
1541	 175	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x1
1542	 177	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x1
1543	 178	PUSH2	0080	 	 
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x80
1544	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x0
1545	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x554
- stack 0: 0x1
1546	 17D	PUSH2	0080	 	 
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x80
1547	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x554
1548	 181	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1549	 183	ADD		 	 
- stack 0: 0x558
1550	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1551	 185	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x18A000201A4FFEC0086000D0151000000A0FFFF00BA000001E6000000D401BC
1552	 186	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x18A000201A4FFEC0086000D0151000000A0FFFF00BA000001E6000000D401BC
- stack 0: 0xF0
1553	 188	SHR		 	 
- stack 1: 0x558
- stack 0: 0x18A
1554	 189	JUMP		 	 
- stack 0: 0x558
1555	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x558
1556	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1557	 18C	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x18A000201A4FFEC0086000D0151000000A0FFFF00BA000001E6000000D401BC
1558	 18D	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x18A000201A4FFEC0086000D0151000000A0FFFF00BA000001E6000000D401BC
- stack 0: 0xE0
1559	 18F	SHR		 	 
- stack 1: 0x558
- stack 0: 0x18A0002
1560	 190	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x18A0002
- stack 0: 0xFFFF
1561	 193	AND		 	 
- stack 1: 0x558
- stack 0: 0x2
1562	 194	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0x1
1563	 196	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x2
1564	 197	PUSH2	00A0	 	 
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0xA0
1565	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x558
1566	 19B	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1567	 19D	ADD		 	 
- stack 0: 0x55C
1568	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1569	 19F	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1A4FFEC0086000D0151000000A0FFFF00BA000001E6000000D401BC016B0001
1570	 1A0	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x1A4FFEC0086000D0151000000A0FFFF00BA000001E6000000D401BC016B0001
- stack 0: 0xF0
1571	 1A2	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1A4
1572	 1A3	JUMP		 	 
- stack 0: 0x55C
1573	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x55C
1574	 1A5	PUSH2	0080	 	 
- stack 1: 0x55C
- stack 0: 0x80
1575	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x55C
- stack 0: 0x1
1576	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1577	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x55C
- stack 0: 0x1
1578	 1AF	PUSH2	00A0	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0xA0
1579	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x2
1580	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x55C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1581	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x2
1582	 1B9	SUB		 	 
- stack 1: 0x55C
- stack 0: 0x1
1583	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x1C2
1584	 1BD	JUMPI		 	 
- stack 0: 0x55C
1585	 1C2	JUMPDEST		 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x55C
1586	 1C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1587	 1C4	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1A4FFEC0086000D0151000000A0FFFF00BA000001E6000000D401BC016B0001
1588	 1C5	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x1A4FFEC0086000D0151000000A0FFFF00BA000001E6000000D401BC016B0001
- stack 0: 0xE0
1589	 1C7	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1A4FFEC
1590	 1C8	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x1A4FFEC
- stack 0: 0xFFFF
1591	 1CB	AND		 	 
- stack 1: 0x55C
- stack 0: 0xFFEC
1592	 1CC	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0xFFEC
- stack 0: 0x1
1593	 1CE	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
1594	 1CF	ADD		 	 
- stack 0: 0x548
1595	 1D0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x548
- stack 0: 0xFFFFFFFF
1596	 1D5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x548
1597	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1598	 1D7	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xA0FFFF00BA000000D401E0016B0001018A000201A4FFEC0086000D01510000
1599	 1D8	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0xA0FFFF00BA000000D401E0016B0001018A000201A4FFEC0086000D01510000
- stack 0: 0xF0
1600	 1DA	SHR		 	 
- stack 1: 0x548
- stack 0: 0xA0
1601	 1DB	JUMP		 	 
- stack 0: 0x548
1602	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x548
1603	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1604	 A2	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xA0FFFF00BA000000D401E0016B0001018A000201A4FFEC0086000D01510000
1605	 A3	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0xA0FFFF00BA000000D401E0016B0001018A000201A4FFEC0086000D01510000
- stack 0: 0xE0
1606	 A5	SHR		 	 
- stack 1: 0x548
- stack 0: 0xA0FFFF
1607	 A6	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
1608	 A9	AND		 	 
- stack 1: 0x548
- stack 0: 0xFFFF
1609	 AA	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0xFFFF
- stack 0: 0x1
1610	 AC	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1611	 AD	PUSH2	0020	 	 
- stack 2: 0x548
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1612	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x548
1613	 B1	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1614	 B3	ADD		 	 
- stack 0: 0x54C
1615	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1616	 B5	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xBA000000D401E0016B0001018A000201A4FFEC0086000D0151000000A0FFFF
1617	 B6	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xBA000000D401E0016B0001018A000201A4FFEC0086000D0151000000A0FFFF
- stack 0: 0xF0
1618	 B8	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xBA
1619	 B9	JUMP		 	 
- stack 0: 0x54C
1620	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x54C
1621	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1622	 BC	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xBA000000D401E0016B0001018A000201A4FFEC0086000D0151000000A0FFFF
1623	 BD	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0xBA000000D401E0016B0001018A000201A4FFEC0086000D0151000000A0FFFF
- stack 0: 0xE0
1624	 BF	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xBA0000
1625	 C0	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0xBA0000
- stack 0: 0xFFFF
1626	 C3	AND		 	 
- stack 1: 0x54C
- stack 0: 0x0
1627	 C4	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x1
1628	 C6	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x0
1629	 C7	PUSH2	0040	 	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x40
1630	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x54C
1631	 CB	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1632	 CD	ADD		 	 
- stack 0: 0x550
1633	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1634	 CF	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xD401E0016B0001018A000201A4FFEC0086000D0151000000A0FFFF00BA0000
1635	 D0	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0xD401E0016B0001018A000201A4FFEC0086000D0151000000A0FFFF00BA0000
- stack 0: 0xF0
1636	 D2	SHR		 	 
- stack 1: 0x550
- stack 0: 0xD4
1637	 D3	JUMP		 	 
- stack 0: 0x550
1638	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x550
1639	 D5	PUSH2	0040	 	 
- stack 1: 0x550
- stack 0: 0x40
1640	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x550
- stack 0: 0x0
1641	 D9	PUSH1	03	 	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x3
1642	 DB	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0x0
1643	 DC	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x20
1644	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1645	 E0	PUSH1	03	 	 
- stack 3: 0x550
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1646	 E2	SIGNEXTEND		 	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1647	 E3	SLT		 	  ;; # bge
- stack 1: 0x550
- stack 0: 0x1
1648	 E4	ISZERO		 	 
- stack 1: 0x550
- stack 0: 0x0
1649	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0xED
1650	 E8	JUMPI		 	 
- stack 0: 0x550
1651	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x550
- stack 0: 0x107
1652	 EC	JUMP		 	 
- stack 0: 0x550
1653	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x550
1654	 108	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1655	 10A	ADD		 	 
- stack 0: 0x554
1656	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1657	 10C	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x16B0001018A000201A4FFEC0086000D0151000000A0FFFF00BA000001E60000
1658	 10D	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x16B0001018A000201A4FFEC0086000D0151000000A0FFFF00BA000001E60000
- stack 0: 0xF0
1659	 10F	SHR		 	 
- stack 1: 0x554
- stack 0: 0x16B
1660	 110	JUMP		 	 
- stack 0: 0x554
1661	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x554
1662	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1663	 16D	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x16B0001018A000201A4FFEC0086000D0151000000A0FFFF00BA000001E60000
1664	 16E	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x16B0001018A000201A4FFEC0086000D0151000000A0FFFF00BA000001E60000
- stack 0: 0xE0
1665	 170	SHR		 	 
- stack 1: 0x554
- stack 0: 0x16B0001
1666	 171	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x16B0001
- stack 0: 0xFFFF
1667	 174	AND		 	 
- stack 1: 0x554
- stack 0: 0x1
1668	 175	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x1
1669	 177	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x1
1670	 178	PUSH2	0080	 	 
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x80
1671	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x1
1672	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x554
- stack 0: 0x2
1673	 17D	PUSH2	0080	 	 
- stack 2: 0x554
- stack 1: 0x2
- stack 0: 0x80
1674	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x554
1675	 181	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1676	 183	ADD		 	 
- stack 0: 0x558
1677	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1678	 185	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x18A000201A4FFEC0086000D0151000000A0FFFF00BA000001E6000000D401BC
1679	 186	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x18A000201A4FFEC0086000D0151000000A0FFFF00BA000001E6000000D401BC
- stack 0: 0xF0
1680	 188	SHR		 	 
- stack 1: 0x558
- stack 0: 0x18A
1681	 189	JUMP		 	 
- stack 0: 0x558
1682	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x558
1683	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1684	 18C	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x18A000201A4FFEC0086000D0151000000A0FFFF00BA000001E6000000D401BC
1685	 18D	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x18A000201A4FFEC0086000D0151000000A0FFFF00BA000001E6000000D401BC
- stack 0: 0xE0
1686	 18F	SHR		 	 
- stack 1: 0x558
- stack 0: 0x18A0002
1687	 190	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x18A0002
- stack 0: 0xFFFF
1688	 193	AND		 	 
- stack 1: 0x558
- stack 0: 0x2
1689	 194	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0x1
1690	 196	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x2
1691	 197	PUSH2	00A0	 	 
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0xA0
1692	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x558
1693	 19B	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1694	 19D	ADD		 	 
- stack 0: 0x55C
1695	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1696	 19F	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1A4FFEC0086000D0151000000A0FFFF00BA000001E6000000D401BC016B0001
1697	 1A0	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x1A4FFEC0086000D0151000000A0FFFF00BA000001E6000000D401BC016B0001
- stack 0: 0xF0
1698	 1A2	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1A4
1699	 1A3	JUMP		 	 
- stack 0: 0x55C
1700	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x55C
1701	 1A5	PUSH2	0080	 	 
- stack 1: 0x55C
- stack 0: 0x80
1702	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x55C
- stack 0: 0x2
1703	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1704	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x55C
- stack 0: 0x2
1705	 1AF	PUSH2	00A0	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0xA0
1706	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0x2
1707	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x55C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1708	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0x2
1709	 1B9	SUB		 	 
- stack 1: 0x55C
- stack 0: 0x0
1710	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0x1C2
1711	 1BD	JUMPI		 	 
- stack 0: 0x55C
1712	 1BE	PUSH2	01DC	 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 1: 0x55C
- stack 0: 0x1DC
1713	 1C1	JUMP		 	 
- stack 0: 0x55C
1714	 1DC	JUMPDEST		 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x55C
1715	 1DD	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1716	 1DF	ADD		 	 
- stack 0: 0x560
1717	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1718	 1E1	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x86000D0151000000A0FFFF00BA000001E6000000D401BC016B0001018A0002
1719	 1E2	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x86000D0151000000A0FFFF00BA000001E6000000D401BC016B0001018A0002
- stack 0: 0xF0
1720	 1E4	SHR		 	 
- stack 1: 0x560
- stack 0: 0x86
1721	 1E5	JUMP		 	 
- stack 0: 0x560
1722	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x560
1723	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1724	 88	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x86000D0151000000A0FFFF00BA000001E6000000D401BC016B0001018A0002
1725	 89	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x86000D0151000000A0FFFF00BA000001E6000000D401BC016B0001018A0002
- stack 0: 0xE0
1726	 8B	SHR		 	 
- stack 1: 0x560
- stack 0: 0x86000D
1727	 8C	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x86000D
- stack 0: 0xFFFF
1728	 8F	AND		 	 
- stack 1: 0x560
- stack 0: 0xD
1729	 90	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0xD
- stack 0: 0x1
1730	 92	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0xD
1731	 93	PUSH2	0380	 	 
- stack 2: 0x560
- stack 1: 0xD
- stack 0: 0x380
1732	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x560
1733	 97	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1734	 99	ADD		 	 
- stack 0: 0x564
1735	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1736	 9B	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x151000000A0FFFF00BA000001E6000000D401BC016B0001018A000201A4FFE8
1737	 9C	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x151000000A0FFFF00BA000001E6000000D401BC016B0001018A000201A4FFE8
- stack 0: 0xF0
1738	 9E	SHR		 	 
- stack 1: 0x564
- stack 0: 0x151
1739	 9F	JUMP		 	 
- stack 0: 0x564
1740	 151	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x564
1741	 152	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
1742	 153	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x151000000A0FFFF00BA000001E6000000D401BC016B0001018A000201A4FFE8
1743	 154	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x151000000A0FFFF00BA000001E6000000D401BC016B0001018A000201A4FFE8
- stack 0: 0xE0
1744	 156	SHR		 	 
- stack 1: 0x564
- stack 0: 0x1510000
1745	 157	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x1510000
- stack 0: 0xFFFF
1746	 15A	AND		 	 
- stack 1: 0x564
- stack 0: 0x0
1747	 15B	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x1
1748	 15D	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0x0
1749	 15E	PUSH2	0080	 	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x80
1750	 161	MSTORE		 	  ;; # store to x4
- stack 0: 0x564
1751	 162	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1752	 164	ADD		 	 
- stack 0: 0x568
1753	 165	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1754	 166	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xA0FFFF00BA000001E6000000D401BC016B0001018A000201A4FFE80086000E
1755	 167	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0xA0FFFF00BA000001E6000000D401BC016B0001018A000201A4FFE80086000E
- stack 0: 0xF0
1756	 169	SHR		 	 
- stack 1: 0x568
- stack 0: 0xA0
1757	 16A	JUMP		 	 
- stack 0: 0x568
1758	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x568
1759	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1760	 A2	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xA0FFFF00BA000001E6000000D401BC016B0001018A000201A4FFE80086000E
1761	 A3	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0xA0FFFF00BA000001E6000000D401BC016B0001018A000201A4FFE80086000E
- stack 0: 0xE0
1762	 A5	SHR		 	 
- stack 1: 0x568
- stack 0: 0xA0FFFF
1763	 A6	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
1764	 A9	AND		 	 
- stack 1: 0x568
- stack 0: 0xFFFF
1765	 AA	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0xFFFF
- stack 0: 0x1
1766	 AC	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1767	 AD	PUSH2	0020	 	 
- stack 2: 0x568
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1768	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x568
1769	 B1	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1770	 B3	ADD		 	 
- stack 0: 0x56C
1771	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1772	 B5	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0xBA000001E6000000D401BC016B0001018A000201A4FFE80086000E01510000
1773	 B6	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0xBA000001E6000000D401BC016B0001018A000201A4FFE80086000E01510000
- stack 0: 0xF0
1774	 B8	SHR		 	 
- stack 1: 0x56C
- stack 0: 0xBA
1775	 B9	JUMP		 	 
- stack 0: 0x56C
1776	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x56C
1777	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
1778	 BC	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0xBA000001E6000000D401BC016B0001018A000201A4FFE80086000E01510000
1779	 BD	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0xBA000001E6000000D401BC016B0001018A000201A4FFE80086000E01510000
- stack 0: 0xE0
1780	 BF	SHR		 	 
- stack 1: 0x56C
- stack 0: 0xBA0000
1781	 C0	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0xBA0000
- stack 0: 0xFFFF
1782	 C3	AND		 	 
- stack 1: 0x56C
- stack 0: 0x0
1783	 C4	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x1
1784	 C6	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x0
1785	 C7	PUSH2	0040	 	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x40
1786	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x56C
1787	 CB	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1788	 CD	ADD		 	 
- stack 0: 0x570
1789	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1790	 CF	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x1E6000000D401BC016B0001018A000201A4FFE80086000E0151000000A0FFFF
1791	 D0	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x1E6000000D401BC016B0001018A000201A4FFE80086000E0151000000A0FFFF
- stack 0: 0xF0
1792	 D2	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1E6
1793	 D3	JUMP		 	 
- stack 0: 0x570
1794	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x570
1795	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
1796	 1E8	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x1E6000000D401BC016B0001018A000201A4FFE80086000E0151000000A0FFFF
1797	 1E9	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x1E6000000D401BC016B0001018A000201A4FFE80086000E0151000000A0FFFF
- stack 0: 0xE0
1798	 1EB	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1E60000
1799	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x1E60000
- stack 0: 0xFFFF
1800	 1EF	AND		 	 
- stack 1: 0x570
- stack 0: 0x0
1801	 1F0	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x1
1802	 1F2	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x0
1803	 1F3	POP		 	 
- stack 0: 0x570
1804	 1F4	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1805	 1F6	ADD		 	 
- stack 0: 0x574
1806	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1807	 1F8	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xD401BC016B0001018A000201A4FFE80086000E0151000000A0FFFF00BA0000
1808	 1F9	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0xD401BC016B0001018A000201A4FFE80086000E0151000000A0FFFF00BA0000
- stack 0: 0xF0
1809	 1FB	SHR		 	 
- stack 1: 0x574
- stack 0: 0xD4
1810	 1FC	JUMP		 	 
- stack 0: 0x574
1811	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x574
1812	 D5	PUSH2	0040	 	 
- stack 1: 0x574
- stack 0: 0x40
1813	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x574
- stack 0: 0x0
1814	 D9	PUSH1	03	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x3
1815	 DB	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x0
1816	 DC	PUSH2	0020	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x20
1817	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1818	 E0	PUSH1	03	 	 
- stack 3: 0x574
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1819	 E2	SIGNEXTEND		 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1820	 E3	SLT		 	  ;; # bge
- stack 1: 0x574
- stack 0: 0x1
1821	 E4	ISZERO		 	 
- stack 1: 0x574
- stack 0: 0x0
1822	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0xED
1823	 E8	JUMPI		 	 
- stack 0: 0x574
1824	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x574
- stack 0: 0x107
1825	 EC	JUMP		 	 
- stack 0: 0x574
1826	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x574
1827	 108	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1828	 10A	ADD		 	 
- stack 0: 0x578
1829	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1830	 10C	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x16B0001018A000201A4FFE80086000E0151000000A0FFFF00BA000001E60000
1831	 10D	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x16B0001018A000201A4FFE80086000E0151000000A0FFFF00BA000001E60000
- stack 0: 0xF0
1832	 10F	SHR		 	 
- stack 1: 0x578
- stack 0: 0x16B
1833	 110	JUMP		 	 
- stack 0: 0x578
1834	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x578
1835	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
1836	 16D	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x16B0001018A000201A4FFE80086000E0151000000A0FFFF00BA000001E60000
1837	 16E	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x16B0001018A000201A4FFE80086000E0151000000A0FFFF00BA000001E60000
- stack 0: 0xE0
1838	 170	SHR		 	 
- stack 1: 0x578
- stack 0: 0x16B0001
1839	 171	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x16B0001
- stack 0: 0xFFFF
1840	 174	AND		 	 
- stack 1: 0x578
- stack 0: 0x1
1841	 175	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x1
1842	 177	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x1
1843	 178	PUSH2	0080	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x80
1844	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x0
1845	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x578
- stack 0: 0x1
1846	 17D	PUSH2	0080	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x80
1847	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x578
1848	 181	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1849	 183	ADD		 	 
- stack 0: 0x57C
1850	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1851	 185	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x18A000201A4FFE80086000E0151000000A0FFFF00BA000001E6000001E60000
1852	 186	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x18A000201A4FFE80086000E0151000000A0FFFF00BA000001E6000001E60000
- stack 0: 0xF0
1853	 188	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x18A
1854	 189	JUMP		 	 
- stack 0: 0x57C
1855	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x57C
1856	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
1857	 18C	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x18A000201A4FFE80086000E0151000000A0FFFF00BA000001E6000001E60000
1858	 18D	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x18A000201A4FFE80086000E0151000000A0FFFF00BA000001E6000001E60000
- stack 0: 0xE0
1859	 18F	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x18A0002
1860	 190	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x18A0002
- stack 0: 0xFFFF
1861	 193	AND		 	 
- stack 1: 0x57C
- stack 0: 0x2
1862	 194	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0x1
1863	 196	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x2
1864	 197	PUSH2	00A0	 	 
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0xA0
1865	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x57C
1866	 19B	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1867	 19D	ADD		 	 
- stack 0: 0x580
1868	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1869	 19F	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x1A4FFE80086000E0151000000A0FFFF00BA000001E6000001E6000000D40194
1870	 1A0	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x1A4FFE80086000E0151000000A0FFFF00BA000001E6000001E6000000D40194
- stack 0: 0xF0
1871	 1A2	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1A4
1872	 1A3	JUMP		 	 
- stack 0: 0x580
1873	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x580
1874	 1A5	PUSH2	0080	 	 
- stack 1: 0x580
- stack 0: 0x80
1875	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x580
- stack 0: 0x1
1876	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1877	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x580
- stack 0: 0x1
1878	 1AF	PUSH2	00A0	 	 
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0xA0
1879	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x2
1880	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x580
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1881	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x2
1882	 1B9	SUB		 	 
- stack 1: 0x580
- stack 0: 0x1
1883	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x1C2
1884	 1BD	JUMPI		 	 
- stack 0: 0x580
1885	 1C2	JUMPDEST		 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x580
1886	 1C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
1887	 1C4	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x1A4FFE80086000E0151000000A0FFFF00BA000001E6000001E6000000D40194
1888	 1C5	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x1A4FFE80086000E0151000000A0FFFF00BA000001E6000001E6000000D40194
- stack 0: 0xE0
1889	 1C7	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1A4FFE8
1890	 1C8	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x1A4FFE8
- stack 0: 0xFFFF
1891	 1CB	AND		 	 
- stack 1: 0x580
- stack 0: 0xFFE8
1892	 1CC	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0xFFE8
- stack 0: 0x1
1893	 1CE	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
1894	 1CF	ADD		 	 
- stack 0: 0x568
1895	 1D0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x568
- stack 0: 0xFFFFFFFF
1896	 1D5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x568
1897	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1898	 1D7	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xA0FFFF00BA000001E6000000D401BC016B0001018A000201A4FFE80086000E
1899	 1D8	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0xA0FFFF00BA000001E6000000D401BC016B0001018A000201A4FFE80086000E
- stack 0: 0xF0
1900	 1DA	SHR		 	 
- stack 1: 0x568
- stack 0: 0xA0
1901	 1DB	JUMP		 	 
- stack 0: 0x568
1902	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x568
1903	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1904	 A2	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xA0FFFF00BA000001E6000000D401BC016B0001018A000201A4FFE80086000E
1905	 A3	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0xA0FFFF00BA000001E6000000D401BC016B0001018A000201A4FFE80086000E
- stack 0: 0xE0
1906	 A5	SHR		 	 
- stack 1: 0x568
- stack 0: 0xA0FFFF
1907	 A6	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
1908	 A9	AND		 	 
- stack 1: 0x568
- stack 0: 0xFFFF
1909	 AA	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0xFFFF
- stack 0: 0x1
1910	 AC	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1911	 AD	PUSH2	0020	 	 
- stack 2: 0x568
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1912	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x568
1913	 B1	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1914	 B3	ADD		 	 
- stack 0: 0x56C
1915	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1916	 B5	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0xBA000001E6000000D401BC016B0001018A000201A4FFE80086000E01510000
1917	 B6	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0xBA000001E6000000D401BC016B0001018A000201A4FFE80086000E01510000
- stack 0: 0xF0
1918	 B8	SHR		 	 
- stack 1: 0x56C
- stack 0: 0xBA
1919	 B9	JUMP		 	 
- stack 0: 0x56C
1920	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x56C
1921	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
1922	 BC	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0xBA000001E6000000D401BC016B0001018A000201A4FFE80086000E01510000
1923	 BD	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0xBA000001E6000000D401BC016B0001018A000201A4FFE80086000E01510000
- stack 0: 0xE0
1924	 BF	SHR		 	 
- stack 1: 0x56C
- stack 0: 0xBA0000
1925	 C0	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0xBA0000
- stack 0: 0xFFFF
1926	 C3	AND		 	 
- stack 1: 0x56C
- stack 0: 0x0
1927	 C4	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x1
1928	 C6	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x0
1929	 C7	PUSH2	0040	 	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x40
1930	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x56C
1931	 CB	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1932	 CD	ADD		 	 
- stack 0: 0x570
1933	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1934	 CF	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x1E6000000D401BC016B0001018A000201A4FFE80086000E0151000000A0FFFF
1935	 D0	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x1E6000000D401BC016B0001018A000201A4FFE80086000E0151000000A0FFFF
- stack 0: 0xF0
1936	 D2	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1E6
1937	 D3	JUMP		 	 
- stack 0: 0x570
1938	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x570
1939	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
1940	 1E8	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x1E6000000D401BC016B0001018A000201A4FFE80086000E0151000000A0FFFF
1941	 1E9	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x1E6000000D401BC016B0001018A000201A4FFE80086000E0151000000A0FFFF
- stack 0: 0xE0
1942	 1EB	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1E60000
1943	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x1E60000
- stack 0: 0xFFFF
1944	 1EF	AND		 	 
- stack 1: 0x570
- stack 0: 0x0
1945	 1F0	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x1
1946	 1F2	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x0
1947	 1F3	POP		 	 
- stack 0: 0x570
1948	 1F4	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1949	 1F6	ADD		 	 
- stack 0: 0x574
1950	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1951	 1F8	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xD401BC016B0001018A000201A4FFE80086000E0151000000A0FFFF00BA0000
1952	 1F9	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0xD401BC016B0001018A000201A4FFE80086000E0151000000A0FFFF00BA0000
- stack 0: 0xF0
1953	 1FB	SHR		 	 
- stack 1: 0x574
- stack 0: 0xD4
1954	 1FC	JUMP		 	 
- stack 0: 0x574
1955	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x574
1956	 D5	PUSH2	0040	 	 
- stack 1: 0x574
- stack 0: 0x40
1957	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x574
- stack 0: 0x0
1958	 D9	PUSH1	03	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x3
1959	 DB	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x0
1960	 DC	PUSH2	0020	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x20
1961	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1962	 E0	PUSH1	03	 	 
- stack 3: 0x574
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1963	 E2	SIGNEXTEND		 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1964	 E3	SLT		 	  ;; # bge
- stack 1: 0x574
- stack 0: 0x1
1965	 E4	ISZERO		 	 
- stack 1: 0x574
- stack 0: 0x0
1966	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0xED
1967	 E8	JUMPI		 	 
- stack 0: 0x574
1968	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x574
- stack 0: 0x107
1969	 EC	JUMP		 	 
- stack 0: 0x574
1970	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x574
1971	 108	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1972	 10A	ADD		 	 
- stack 0: 0x578
1973	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1974	 10C	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x16B0001018A000201A4FFE80086000E0151000000A0FFFF00BA000001E60000
1975	 10D	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x16B0001018A000201A4FFE80086000E0151000000A0FFFF00BA000001E60000
- stack 0: 0xF0
1976	 10F	SHR		 	 
- stack 1: 0x578
- stack 0: 0x16B
1977	 110	JUMP		 	 
- stack 0: 0x578
1978	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x578
1979	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
1980	 16D	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x16B0001018A000201A4FFE80086000E0151000000A0FFFF00BA000001E60000
1981	 16E	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x16B0001018A000201A4FFE80086000E0151000000A0FFFF00BA000001E60000
- stack 0: 0xE0
1982	 170	SHR		 	 
- stack 1: 0x578
- stack 0: 0x16B0001
1983	 171	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x16B0001
- stack 0: 0xFFFF
1984	 174	AND		 	 
- stack 1: 0x578
- stack 0: 0x1
1985	 175	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x1
1986	 177	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x1
1987	 178	PUSH2	0080	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x80
1988	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x1
1989	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x578
- stack 0: 0x2
1990	 17D	PUSH2	0080	 	 
- stack 2: 0x578
- stack 1: 0x2
- stack 0: 0x80
1991	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x578
1992	 181	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1993	 183	ADD		 	 
- stack 0: 0x57C
1994	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1995	 185	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x18A000201A4FFE80086000E0151000000A0FFFF00BA000001E6000001E60000
1996	 186	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x18A000201A4FFE80086000E0151000000A0FFFF00BA000001E6000001E60000
- stack 0: 0xF0
1997	 188	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x18A
1998	 189	JUMP		 	 
- stack 0: 0x57C
1999	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x57C
2000	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2001	 18C	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x18A000201A4FFE80086000E0151000000A0FFFF00BA000001E6000001E60000
2002	 18D	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x18A000201A4FFE80086000E0151000000A0FFFF00BA000001E6000001E60000
- stack 0: 0xE0
2003	 18F	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x18A0002
2004	 190	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x18A0002
- stack 0: 0xFFFF
2005	 193	AND		 	 
- stack 1: 0x57C
- stack 0: 0x2
2006	 194	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0x1
2007	 196	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x2
2008	 197	PUSH2	00A0	 	 
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0xA0
2009	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x57C
2010	 19B	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2011	 19D	ADD		 	 
- stack 0: 0x580
2012	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2013	 19F	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x1A4FFE80086000E0151000000A0FFFF00BA000001E6000001E6000000D40194
2014	 1A0	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x1A4FFE80086000E0151000000A0FFFF00BA000001E6000001E6000000D40194
- stack 0: 0xF0
2015	 1A2	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1A4
2016	 1A3	JUMP		 	 
- stack 0: 0x580
2017	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x580
2018	 1A5	PUSH2	0080	 	 
- stack 1: 0x580
- stack 0: 0x80
2019	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x580
- stack 0: 0x2
2020	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2021	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x580
- stack 0: 0x2
2022	 1AF	PUSH2	00A0	 	 
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0xA0
2023	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0x2
2024	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x580
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2025	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0x2
2026	 1B9	SUB		 	 
- stack 1: 0x580
- stack 0: 0x0
2027	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x1C2
2028	 1BD	JUMPI		 	 
- stack 0: 0x580
2029	 1BE	PUSH2	01DC	 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 1: 0x580
- stack 0: 0x1DC
2030	 1C1	JUMP		 	 
- stack 0: 0x580
2031	 1DC	JUMPDEST		 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x580
2032	 1DD	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2033	 1DF	ADD		 	 
- stack 0: 0x584
2034	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2035	 1E1	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x86000E0151000000A0FFFF00BA000001E6000001E6000000D40194016B0001
2036	 1E2	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x86000E0151000000A0FFFF00BA000001E6000001E6000000D40194016B0001
- stack 0: 0xF0
2037	 1E4	SHR		 	 
- stack 1: 0x584
- stack 0: 0x86
2038	 1E5	JUMP		 	 
- stack 0: 0x584
2039	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x584
2040	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2041	 88	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x86000E0151000000A0FFFF00BA000001E6000001E6000000D40194016B0001
2042	 89	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x86000E0151000000A0FFFF00BA000001E6000001E6000000D40194016B0001
- stack 0: 0xE0
2043	 8B	SHR		 	 
- stack 1: 0x584
- stack 0: 0x86000E
2044	 8C	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x86000E
- stack 0: 0xFFFF
2045	 8F	AND		 	 
- stack 1: 0x584
- stack 0: 0xE
2046	 90	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0xE
- stack 0: 0x1
2047	 92	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0xE
2048	 93	PUSH2	0380	 	 
- stack 2: 0x584
- stack 1: 0xE
- stack 0: 0x380
2049	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x584
2050	 97	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2051	 99	ADD		 	 
- stack 0: 0x588
2052	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2053	 9B	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x151000000A0FFFF00BA000001E6000001E6000000D40194016B0001018A0002
2054	 9C	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x151000000A0FFFF00BA000001E6000001E6000000D40194016B0001018A0002
- stack 0: 0xF0
2055	 9E	SHR		 	 
- stack 1: 0x588
- stack 0: 0x151
2056	 9F	JUMP		 	 
- stack 0: 0x588
2057	 151	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x588
2058	 152	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2059	 153	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x151000000A0FFFF00BA000001E6000001E6000000D40194016B0001018A0002
2060	 154	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x151000000A0FFFF00BA000001E6000001E6000000D40194016B0001018A0002
- stack 0: 0xE0
2061	 156	SHR		 	 
- stack 1: 0x588
- stack 0: 0x1510000
2062	 157	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x1510000
- stack 0: 0xFFFF
2063	 15A	AND		 	 
- stack 1: 0x588
- stack 0: 0x0
2064	 15B	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x1
2065	 15D	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x0
2066	 15E	PUSH2	0080	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x80
2067	 161	MSTORE		 	  ;; # store to x4
- stack 0: 0x588
2068	 162	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2069	 164	ADD		 	 
- stack 0: 0x58C
2070	 165	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2071	 166	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xA0FFFF00BA000001E6000001E6000000D40194016B0001018A000201A4FFE4
2072	 167	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0xA0FFFF00BA000001E6000001E6000000D40194016B0001018A000201A4FFE4
- stack 0: 0xF0
2073	 169	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xA0
2074	 16A	JUMP		 	 
- stack 0: 0x58C
2075	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x58C
2076	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2077	 A2	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xA0FFFF00BA000001E6000001E6000000D40194016B0001018A000201A4FFE4
2078	 A3	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0xA0FFFF00BA000001E6000001E6000000D40194016B0001018A000201A4FFE4
- stack 0: 0xE0
2079	 A5	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xA0FFFF
2080	 A6	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
2081	 A9	AND		 	 
- stack 1: 0x58C
- stack 0: 0xFFFF
2082	 AA	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0xFFFF
- stack 0: 0x1
2083	 AC	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2084	 AD	PUSH2	0020	 	 
- stack 2: 0x58C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2085	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x58C
2086	 B1	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2087	 B3	ADD		 	 
- stack 0: 0x590
2088	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2089	 B5	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0xBA000001E6000001E6000000D40194016B0001018A000201A4FFE40086000F
2090	 B6	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0xBA000001E6000001E6000000D40194016B0001018A000201A4FFE40086000F
- stack 0: 0xF0
2091	 B8	SHR		 	 
- stack 1: 0x590
- stack 0: 0xBA
2092	 B9	JUMP		 	 
- stack 0: 0x590
2093	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x590
2094	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2095	 BC	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0xBA000001E6000001E6000000D40194016B0001018A000201A4FFE40086000F
2096	 BD	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0xBA000001E6000001E6000000D40194016B0001018A000201A4FFE40086000F
- stack 0: 0xE0
2097	 BF	SHR		 	 
- stack 1: 0x590
- stack 0: 0xBA0000
2098	 C0	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0xBA0000
- stack 0: 0xFFFF
2099	 C3	AND		 	 
- stack 1: 0x590
- stack 0: 0x0
2100	 C4	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x1
2101	 C6	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x0
2102	 C7	PUSH2	0040	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x40
2103	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x590
2104	 CB	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2105	 CD	ADD		 	 
- stack 0: 0x594
2106	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2107	 CF	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1E6000001E6000000D40194016B0001018A000201A4FFE40086000F01510000
2108	 D0	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x1E6000001E6000000D40194016B0001018A000201A4FFE40086000F01510000
- stack 0: 0xF0
2109	 D2	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1E6
2110	 D3	JUMP		 	 
- stack 0: 0x594
2111	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x594
2112	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2113	 1E8	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1E6000001E6000000D40194016B0001018A000201A4FFE40086000F01510000
2114	 1E9	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x1E6000001E6000000D40194016B0001018A000201A4FFE40086000F01510000
- stack 0: 0xE0
2115	 1EB	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1E60000
2116	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x1E60000
- stack 0: 0xFFFF
2117	 1EF	AND		 	 
- stack 1: 0x594
- stack 0: 0x0
2118	 1F0	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2119	 1F2	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x0
2120	 1F3	POP		 	 
- stack 0: 0x594
2121	 1F4	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2122	 1F6	ADD		 	 
- stack 0: 0x598
2123	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2124	 1F8	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1E6000000D40194016B0001018A000201A4FFE40086000F0151000000A0FFFF
2125	 1F9	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x1E6000000D40194016B0001018A000201A4FFE40086000F0151000000A0FFFF
- stack 0: 0xF0
2126	 1FB	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1E6
2127	 1FC	JUMP		 	 
- stack 0: 0x598
2128	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x598
2129	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2130	 1E8	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1E6000000D40194016B0001018A000201A4FFE40086000F0151000000A0FFFF
2131	 1E9	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x1E6000000D40194016B0001018A000201A4FFE40086000F0151000000A0FFFF
- stack 0: 0xE0
2132	 1EB	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1E60000
2133	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x1E60000
- stack 0: 0xFFFF
2134	 1EF	AND		 	 
- stack 1: 0x598
- stack 0: 0x0
2135	 1F0	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x1
2136	 1F2	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x0
2137	 1F3	POP		 	 
- stack 0: 0x598
2138	 1F4	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2139	 1F6	ADD		 	 
- stack 0: 0x59C
2140	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2141	 1F8	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0xD40194016B0001018A000201A4FFE40086000F0151000000A0FFFF01E60000
2142	 1F9	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0xD40194016B0001018A000201A4FFE40086000F0151000000A0FFFF01E60000
- stack 0: 0xF0
2143	 1FB	SHR		 	 
- stack 1: 0x59C
- stack 0: 0xD4
2144	 1FC	JUMP		 	 
- stack 0: 0x59C
2145	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x59C
2146	 D5	PUSH2	0040	 	 
- stack 1: 0x59C
- stack 0: 0x40
2147	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x59C
- stack 0: 0x0
2148	 D9	PUSH1	03	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x3
2149	 DB	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2150	 DC	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x20
2151	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2152	 E0	PUSH1	03	 	 
- stack 3: 0x59C
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
2153	 E2	SIGNEXTEND		 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2154	 E3	SLT		 	  ;; # bge
- stack 1: 0x59C
- stack 0: 0x1
2155	 E4	ISZERO		 	 
- stack 1: 0x59C
- stack 0: 0x0
2156	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0xED
2157	 E8	JUMPI		 	 
- stack 0: 0x59C
2158	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x59C
- stack 0: 0x107
2159	 EC	JUMP		 	 
- stack 0: 0x59C
2160	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x59C
2161	 108	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2162	 10A	ADD		 	 
- stack 0: 0x5A0
2163	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2164	 10C	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x16B0001018A000201A4FFE40086000F0151000000A0FFFF01E6000000BA0000
2165	 10D	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x16B0001018A000201A4FFE40086000F0151000000A0FFFF01E6000000BA0000
- stack 0: 0xF0
2166	 10F	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x16B
2167	 110	JUMP		 	 
- stack 0: 0x5A0
2168	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5A0
2169	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2170	 16D	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x16B0001018A000201A4FFE40086000F0151000000A0FFFF01E6000000BA0000
2171	 16E	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x16B0001018A000201A4FFE40086000F0151000000A0FFFF01E6000000BA0000
- stack 0: 0xE0
2172	 170	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x16B0001
2173	 171	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x16B0001
- stack 0: 0xFFFF
2174	 174	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x1
2175	 175	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x1
2176	 177	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x1
2177	 178	PUSH2	0080	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x80
2178	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x0
2179	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x5A0
- stack 0: 0x1
2180	 17D	PUSH2	0080	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x80
2181	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x5A0
2182	 181	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2183	 183	ADD		 	 
- stack 0: 0x5A4
2184	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2185	 185	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x18A000201A4FFE40086000F0151000000A0FFFF01E6000000BA000000D40170
2186	 186	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x18A000201A4FFE40086000F0151000000A0FFFF01E6000000BA000000D40170
- stack 0: 0xF0
2187	 188	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x18A
2188	 189	JUMP		 	 
- stack 0: 0x5A4
2189	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5A4
2190	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2191	 18C	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x18A000201A4FFE40086000F0151000000A0FFFF01E6000000BA000000D40170
2192	 18D	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x18A000201A4FFE40086000F0151000000A0FFFF01E6000000BA000000D40170
- stack 0: 0xE0
2193	 18F	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x18A0002
2194	 190	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x18A0002
- stack 0: 0xFFFF
2195	 193	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x2
2196	 194	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x2
- stack 0: 0x1
2197	 196	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x2
2198	 197	PUSH2	00A0	 	 
- stack 2: 0x5A4
- stack 1: 0x2
- stack 0: 0xA0
2199	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x5A4
2200	 19B	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2201	 19D	ADD		 	 
- stack 0: 0x5A8
2202	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2203	 19F	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1A4FFE40086000F0151000000A0FFFF01E6000000BA000000D40170016B0001
2204	 1A0	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x1A4FFE40086000F0151000000A0FFFF01E6000000BA000000D40170016B0001
- stack 0: 0xF0
2205	 1A2	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1A4
2206	 1A3	JUMP		 	 
- stack 0: 0x5A8
2207	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5A8
2208	 1A5	PUSH2	0080	 	 
- stack 1: 0x5A8
- stack 0: 0x80
2209	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x5A8
- stack 0: 0x1
2210	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2211	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A8
- stack 0: 0x1
2212	 1AF	PUSH2	00A0	 	 
- stack 2: 0x5A8
- stack 1: 0x1
- stack 0: 0xA0
2213	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x5A8
- stack 1: 0x1
- stack 0: 0x2
2214	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2215	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A8
- stack 1: 0x1
- stack 0: 0x2
2216	 1B9	SUB		 	 
- stack 1: 0x5A8
- stack 0: 0x1
2217	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x5A8
- stack 1: 0x1
- stack 0: 0x1C2
2218	 1BD	JUMPI		 	 
- stack 0: 0x5A8
2219	 1C2	JUMPDEST		 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x5A8
2220	 1C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2221	 1C4	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1A4FFE40086000F0151000000A0FFFF01E6000000BA000000D40170016B0001
2222	 1C5	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x1A4FFE40086000F0151000000A0FFFF01E6000000BA000000D40170016B0001
- stack 0: 0xE0
2223	 1C7	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1A4FFE4
2224	 1C8	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x1A4FFE4
- stack 0: 0xFFFF
2225	 1CB	AND		 	 
- stack 1: 0x5A8
- stack 0: 0xFFE4
2226	 1CC	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0xFFE4
- stack 0: 0x1
2227	 1CE	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2228	 1CF	ADD		 	 
- stack 0: 0x58C
2229	 1D0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x58C
- stack 0: 0xFFFFFFFF
2230	 1D5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x58C
2231	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2232	 1D7	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xA0FFFF00BA000001E6000001E6000000D40194016B0001018A000201A4FFE4
2233	 1D8	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0xA0FFFF00BA000001E6000001E6000000D40194016B0001018A000201A4FFE4
- stack 0: 0xF0
2234	 1DA	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xA0
2235	 1DB	JUMP		 	 
- stack 0: 0x58C
2236	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x58C
2237	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2238	 A2	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xA0FFFF00BA000001E6000001E6000000D40194016B0001018A000201A4FFE4
2239	 A3	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0xA0FFFF00BA000001E6000001E6000000D40194016B0001018A000201A4FFE4
- stack 0: 0xE0
2240	 A5	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xA0FFFF
2241	 A6	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
2242	 A9	AND		 	 
- stack 1: 0x58C
- stack 0: 0xFFFF
2243	 AA	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0xFFFF
- stack 0: 0x1
2244	 AC	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2245	 AD	PUSH2	0020	 	 
- stack 2: 0x58C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2246	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x58C
2247	 B1	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2248	 B3	ADD		 	 
- stack 0: 0x590
2249	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2250	 B5	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0xBA000001E6000001E6000000D40194016B0001018A000201A4FFE40086000F
2251	 B6	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0xBA000001E6000001E6000000D40194016B0001018A000201A4FFE40086000F
- stack 0: 0xF0
2252	 B8	SHR		 	 
- stack 1: 0x590
- stack 0: 0xBA
2253	 B9	JUMP		 	 
- stack 0: 0x590
2254	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x590
2255	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2256	 BC	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0xBA000001E6000001E6000000D40194016B0001018A000201A4FFE40086000F
2257	 BD	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0xBA000001E6000001E6000000D40194016B0001018A000201A4FFE40086000F
- stack 0: 0xE0
2258	 BF	SHR		 	 
- stack 1: 0x590
- stack 0: 0xBA0000
2259	 C0	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0xBA0000
- stack 0: 0xFFFF
2260	 C3	AND		 	 
- stack 1: 0x590
- stack 0: 0x0
2261	 C4	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x1
2262	 C6	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x0
2263	 C7	PUSH2	0040	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x40
2264	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x590
2265	 CB	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2266	 CD	ADD		 	 
- stack 0: 0x594
2267	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2268	 CF	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1E6000001E6000000D40194016B0001018A000201A4FFE40086000F01510000
2269	 D0	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x1E6000001E6000000D40194016B0001018A000201A4FFE40086000F01510000
- stack 0: 0xF0
2270	 D2	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1E6
2271	 D3	JUMP		 	 
- stack 0: 0x594
2272	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x594
2273	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2274	 1E8	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1E6000001E6000000D40194016B0001018A000201A4FFE40086000F01510000
2275	 1E9	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x1E6000001E6000000D40194016B0001018A000201A4FFE40086000F01510000
- stack 0: 0xE0
2276	 1EB	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1E60000
2277	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x1E60000
- stack 0: 0xFFFF
2278	 1EF	AND		 	 
- stack 1: 0x594
- stack 0: 0x0
2279	 1F0	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2280	 1F2	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x0
2281	 1F3	POP		 	 
- stack 0: 0x594
2282	 1F4	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2283	 1F6	ADD		 	 
- stack 0: 0x598
2284	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2285	 1F8	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1E6000000D40194016B0001018A000201A4FFE40086000F0151000000A0FFFF
2286	 1F9	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x1E6000000D40194016B0001018A000201A4FFE40086000F0151000000A0FFFF
- stack 0: 0xF0
2287	 1FB	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1E6
2288	 1FC	JUMP		 	 
- stack 0: 0x598
2289	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x598
2290	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2291	 1E8	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1E6000000D40194016B0001018A000201A4FFE40086000F0151000000A0FFFF
2292	 1E9	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x1E6000000D40194016B0001018A000201A4FFE40086000F0151000000A0FFFF
- stack 0: 0xE0
2293	 1EB	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1E60000
2294	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x1E60000
- stack 0: 0xFFFF
2295	 1EF	AND		 	 
- stack 1: 0x598
- stack 0: 0x0
2296	 1F0	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x1
2297	 1F2	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x0
2298	 1F3	POP		 	 
- stack 0: 0x598
2299	 1F4	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2300	 1F6	ADD		 	 
- stack 0: 0x59C
2301	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2302	 1F8	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0xD40194016B0001018A000201A4FFE40086000F0151000000A0FFFF01E60000
2303	 1F9	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0xD40194016B0001018A000201A4FFE40086000F0151000000A0FFFF01E60000
- stack 0: 0xF0
2304	 1FB	SHR		 	 
- stack 1: 0x59C
- stack 0: 0xD4
2305	 1FC	JUMP		 	 
- stack 0: 0x59C
2306	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x59C
2307	 D5	PUSH2	0040	 	 
- stack 1: 0x59C
- stack 0: 0x40
2308	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x59C
- stack 0: 0x0
2309	 D9	PUSH1	03	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x3
2310	 DB	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2311	 DC	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x20
2312	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2313	 E0	PUSH1	03	 	 
- stack 3: 0x59C
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
2314	 E2	SIGNEXTEND		 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2315	 E3	SLT		 	  ;; # bge
- stack 1: 0x59C
- stack 0: 0x1
2316	 E4	ISZERO		 	 
- stack 1: 0x59C
- stack 0: 0x0
2317	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0xED
2318	 E8	JUMPI		 	 
- stack 0: 0x59C
2319	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x59C
- stack 0: 0x107
2320	 EC	JUMP		 	 
- stack 0: 0x59C
2321	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x59C
2322	 108	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2323	 10A	ADD		 	 
- stack 0: 0x5A0
2324	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2325	 10C	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x16B0001018A000201A4FFE40086000F0151000000A0FFFF01E6000000BA0000
2326	 10D	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x16B0001018A000201A4FFE40086000F0151000000A0FFFF01E6000000BA0000
- stack 0: 0xF0
2327	 10F	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x16B
2328	 110	JUMP		 	 
- stack 0: 0x5A0
2329	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5A0
2330	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2331	 16D	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x16B0001018A000201A4FFE40086000F0151000000A0FFFF01E6000000BA0000
2332	 16E	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x16B0001018A000201A4FFE40086000F0151000000A0FFFF01E6000000BA0000
- stack 0: 0xE0
2333	 170	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x16B0001
2334	 171	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x16B0001
- stack 0: 0xFFFF
2335	 174	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x1
2336	 175	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x1
2337	 177	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x1
2338	 178	PUSH2	0080	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x80
2339	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x1
2340	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x5A0
- stack 0: 0x2
2341	 17D	PUSH2	0080	 	 
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0x80
2342	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x5A0
2343	 181	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2344	 183	ADD		 	 
- stack 0: 0x5A4
2345	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2346	 185	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x18A000201A4FFE40086000F0151000000A0FFFF01E6000000BA000000D40170
2347	 186	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x18A000201A4FFE40086000F0151000000A0FFFF01E6000000BA000000D40170
- stack 0: 0xF0
2348	 188	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x18A
2349	 189	JUMP		 	 
- stack 0: 0x5A4
2350	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5A4
2351	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2352	 18C	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x18A000201A4FFE40086000F0151000000A0FFFF01E6000000BA000000D40170
2353	 18D	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x18A000201A4FFE40086000F0151000000A0FFFF01E6000000BA000000D40170
- stack 0: 0xE0
2354	 18F	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x18A0002
2355	 190	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x18A0002
- stack 0: 0xFFFF
2356	 193	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x2
2357	 194	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x2
- stack 0: 0x1
2358	 196	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x2
2359	 197	PUSH2	00A0	 	 
- stack 2: 0x5A4
- stack 1: 0x2
- stack 0: 0xA0
2360	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x5A4
2361	 19B	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2362	 19D	ADD		 	 
- stack 0: 0x5A8
2363	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2364	 19F	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1A4FFE40086000F0151000000A0FFFF01E6000000BA000000D40170016B0001
2365	 1A0	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x1A4FFE40086000F0151000000A0FFFF01E6000000BA000000D40170016B0001
- stack 0: 0xF0
2366	 1A2	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1A4
2367	 1A3	JUMP		 	 
- stack 0: 0x5A8
2368	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5A8
2369	 1A5	PUSH2	0080	 	 
- stack 1: 0x5A8
- stack 0: 0x80
2370	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x5A8
- stack 0: 0x2
2371	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2372	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A8
- stack 0: 0x2
2373	 1AF	PUSH2	00A0	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0xA0
2374	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0x2
2375	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2376	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0x2
2377	 1B9	SUB		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2378	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1C2
2379	 1BD	JUMPI		 	 
- stack 0: 0x5A8
2380	 1BE	PUSH2	01DC	 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 1: 0x5A8
- stack 0: 0x1DC
2381	 1C1	JUMP		 	 
- stack 0: 0x5A8
2382	 1DC	JUMPDEST		 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x5A8
2383	 1DD	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2384	 1DF	ADD		 	 
- stack 0: 0x5AC
2385	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2386	 1E1	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x86000F0151000000A0FFFF01E6000000BA000000D40170016B0001018A0002
2387	 1E2	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x86000F0151000000A0FFFF01E6000000BA000000D40170016B0001018A0002
- stack 0: 0xF0
2388	 1E4	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x86
2389	 1E5	JUMP		 	 
- stack 0: 0x5AC
2390	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5AC
2391	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2392	 88	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x86000F0151000000A0FFFF01E6000000BA000000D40170016B0001018A0002
2393	 89	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x86000F0151000000A0FFFF01E6000000BA000000D40170016B0001018A0002
- stack 0: 0xE0
2394	 8B	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x86000F
2395	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x86000F
- stack 0: 0xFFFF
2396	 8F	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xF
2397	 90	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xF
- stack 0: 0x1
2398	 92	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xF
2399	 93	PUSH2	0380	 	 
- stack 2: 0x5AC
- stack 1: 0xF
- stack 0: 0x380
2400	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x5AC
2401	 97	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2402	 99	ADD		 	 
- stack 0: 0x5B0
2403	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2404	 9B	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x151000000A0FFFF01E6000000BA000000D40170016B0001018A000201A4FFE8
2405	 9C	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x151000000A0FFFF01E6000000BA000000D40170016B0001018A000201A4FFE8
- stack 0: 0xF0
2406	 9E	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x151
2407	 9F	JUMP		 	 
- stack 0: 0x5B0
2408	 151	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5B0
2409	 152	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2410	 153	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x151000000A0FFFF01E6000000BA000000D40170016B0001018A000201A4FFE8
2411	 154	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x151000000A0FFFF01E6000000BA000000D40170016B0001018A000201A4FFE8
- stack 0: 0xE0
2412	 156	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1510000
2413	 157	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x1510000
- stack 0: 0xFFFF
2414	 15A	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2415	 15B	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x1
2416	 15D	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2417	 15E	PUSH2	0080	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x80
2418	 161	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B0
2419	 162	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2420	 164	ADD		 	 
- stack 0: 0x5B4
2421	 165	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2422	 166	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0xA0FFFF01E6000000BA000000D40170016B0001018A000201A4FFE800860010
2423	 167	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0xA0FFFF01E6000000BA000000D40170016B0001018A000201A4FFE800860010
- stack 0: 0xF0
2424	 169	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0xA0
2425	 16A	JUMP		 	 
- stack 0: 0x5B4
2426	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5B4
2427	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2428	 A2	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0xA0FFFF01E6000000BA000000D40170016B0001018A000201A4FFE800860010
2429	 A3	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0xA0FFFF01E6000000BA000000D40170016B0001018A000201A4FFE800860010
- stack 0: 0xE0
2430	 A5	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0xA0FFFF
2431	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
2432	 A9	AND		 	 
- stack 1: 0x5B4
- stack 0: 0xFFFF
2433	 AA	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0xFFFF
- stack 0: 0x1
2434	 AC	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2435	 AD	PUSH2	0020	 	 
- stack 2: 0x5B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2436	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B4
2437	 B1	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2438	 B3	ADD		 	 
- stack 0: 0x5B8
2439	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2440	 B5	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1E6000000BA000000D40170016B0001018A000201A4FFE80086001001510000
2441	 B6	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x1E6000000BA000000D40170016B0001018A000201A4FFE80086001001510000
- stack 0: 0xF0
2442	 B8	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1E6
2443	 B9	JUMP		 	 
- stack 0: 0x5B8
2444	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5B8
2445	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2446	 1E8	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1E6000000BA000000D40170016B0001018A000201A4FFE80086001001510000
2447	 1E9	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x1E6000000BA000000D40170016B0001018A000201A4FFE80086001001510000
- stack 0: 0xE0
2448	 1EB	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1E60000
2449	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x1E60000
- stack 0: 0xFFFF
2450	 1EF	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x0
2451	 1F0	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x0
- stack 0: 0x1
2452	 1F2	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x0
2453	 1F3	POP		 	 
- stack 0: 0x5B8
2454	 1F4	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2455	 1F6	ADD		 	 
- stack 0: 0x5BC
2456	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2457	 1F8	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xBA000000D40170016B0001018A000201A4FFE8008600100151000000A0FFFF
2458	 1F9	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0xBA000000D40170016B0001018A000201A4FFE8008600100151000000A0FFFF
- stack 0: 0xF0
2459	 1FB	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xBA
2460	 1FC	JUMP		 	 
- stack 0: 0x5BC
2461	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5BC
2462	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2463	 BC	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xBA000000D40170016B0001018A000201A4FFE8008600100151000000A0FFFF
2464	 BD	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0xBA000000D40170016B0001018A000201A4FFE8008600100151000000A0FFFF
- stack 0: 0xE0
2465	 BF	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xBA0000
2466	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0xBA0000
- stack 0: 0xFFFF
2467	 C3	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2468	 C4	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x1
2469	 C6	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2470	 C7	PUSH2	0040	 	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x40
2471	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5BC
2472	 CB	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2473	 CD	ADD		 	 
- stack 0: 0x5C0
2474	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2475	 CF	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xD40170016B0001018A000201A4FFE8008600100151000000A0FFFF01E60000
2476	 D0	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0xD40170016B0001018A000201A4FFE8008600100151000000A0FFFF01E60000
- stack 0: 0xF0
2477	 D2	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xD4
2478	 D3	JUMP		 	 
- stack 0: 0x5C0
2479	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x5C0
2480	 D5	PUSH2	0040	 	 
- stack 1: 0x5C0
- stack 0: 0x40
2481	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5C0
- stack 0: 0x0
2482	 D9	PUSH1	03	 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x3
2483	 DB	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2484	 DC	PUSH2	0020	 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x20
2485	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2486	 E0	PUSH1	03	 	 
- stack 3: 0x5C0
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
2487	 E2	SIGNEXTEND		 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2488	 E3	SLT		 	  ;; # bge
- stack 1: 0x5C0
- stack 0: 0x1
2489	 E4	ISZERO		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2490	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0xED
2491	 E8	JUMPI		 	 
- stack 0: 0x5C0
2492	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x5C0
- stack 0: 0x107
2493	 EC	JUMP		 	 
- stack 0: 0x5C0
2494	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x5C0
2495	 108	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2496	 10A	ADD		 	 
- stack 0: 0x5C4
2497	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2498	 10C	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x16B0001018A000201A4FFE8008600100151000000A0FFFF01E6000000BA0000
2499	 10D	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x16B0001018A000201A4FFE8008600100151000000A0FFFF01E6000000BA0000
- stack 0: 0xF0
2500	 10F	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x16B
2501	 110	JUMP		 	 
- stack 0: 0x5C4
2502	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5C4
2503	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2504	 16D	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x16B0001018A000201A4FFE8008600100151000000A0FFFF01E6000000BA0000
2505	 16E	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x16B0001018A000201A4FFE8008600100151000000A0FFFF01E6000000BA0000
- stack 0: 0xE0
2506	 170	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x16B0001
2507	 171	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x16B0001
- stack 0: 0xFFFF
2508	 174	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x1
2509	 175	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x1
- stack 0: 0x1
2510	 177	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x1
2511	 178	PUSH2	0080	 	 
- stack 2: 0x5C4
- stack 1: 0x1
- stack 0: 0x80
2512	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x5C4
- stack 1: 0x1
- stack 0: 0x0
2513	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x5C4
- stack 0: 0x1
2514	 17D	PUSH2	0080	 	 
- stack 2: 0x5C4
- stack 1: 0x1
- stack 0: 0x80
2515	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C4
2516	 181	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2517	 183	ADD		 	 
- stack 0: 0x5C8
2518	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2519	 185	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x18A000201A4FFE8008600100151000000A0FFFF01E6000000BA000001E60000
2520	 186	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x18A000201A4FFE8008600100151000000A0FFFF01E6000000BA000001E60000
- stack 0: 0xF0
2521	 188	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x18A
2522	 189	JUMP		 	 
- stack 0: 0x5C8
2523	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5C8
2524	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2525	 18C	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x18A000201A4FFE8008600100151000000A0FFFF01E6000000BA000001E60000
2526	 18D	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x18A000201A4FFE8008600100151000000A0FFFF01E6000000BA000001E60000
- stack 0: 0xE0
2527	 18F	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x18A0002
2528	 190	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x18A0002
- stack 0: 0xFFFF
2529	 193	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x2
2530	 194	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x2
- stack 0: 0x1
2531	 196	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x2
2532	 197	PUSH2	00A0	 	 
- stack 2: 0x5C8
- stack 1: 0x2
- stack 0: 0xA0
2533	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x5C8
2534	 19B	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2535	 19D	ADD		 	 
- stack 0: 0x5CC
2536	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2537	 19F	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x1A4FFE8008600100151000000A0FFFF01E6000000BA000001E6000000D40148
2538	 1A0	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x1A4FFE8008600100151000000A0FFFF01E6000000BA000001E6000000D40148
- stack 0: 0xF0
2539	 1A2	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x1A4
2540	 1A3	JUMP		 	 
- stack 0: 0x5CC
2541	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5CC
2542	 1A5	PUSH2	0080	 	 
- stack 1: 0x5CC
- stack 0: 0x80
2543	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x5CC
- stack 0: 0x1
2544	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2545	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5CC
- stack 0: 0x1
2546	 1AF	PUSH2	00A0	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0xA0
2547	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x2
2548	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5CC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2549	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x2
2550	 1B9	SUB		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2551	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x1C2
2552	 1BD	JUMPI		 	 
- stack 0: 0x5CC
2553	 1C2	JUMPDEST		 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x5CC
2554	 1C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2555	 1C4	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x1A4FFE8008600100151000000A0FFFF01E6000000BA000001E6000000D40148
2556	 1C5	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x1A4FFE8008600100151000000A0FFFF01E6000000BA000001E6000000D40148
- stack 0: 0xE0
2557	 1C7	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x1A4FFE8
2558	 1C8	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x1A4FFE8
- stack 0: 0xFFFF
2559	 1CB	AND		 	 
- stack 1: 0x5CC
- stack 0: 0xFFE8
2560	 1CC	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0xFFE8
- stack 0: 0x1
2561	 1CE	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2562	 1CF	ADD		 	 
- stack 0: 0x5B4
2563	 1D0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5B4
- stack 0: 0xFFFFFFFF
2564	 1D5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5B4
2565	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2566	 1D7	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0xA0FFFF01E6000000BA000000D40170016B0001018A000201A4FFE800860010
2567	 1D8	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0xA0FFFF01E6000000BA000000D40170016B0001018A000201A4FFE800860010
- stack 0: 0xF0
2568	 1DA	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0xA0
2569	 1DB	JUMP		 	 
- stack 0: 0x5B4
2570	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5B4
2571	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2572	 A2	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0xA0FFFF01E6000000BA000000D40170016B0001018A000201A4FFE800860010
2573	 A3	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0xA0FFFF01E6000000BA000000D40170016B0001018A000201A4FFE800860010
- stack 0: 0xE0
2574	 A5	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0xA0FFFF
2575	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
2576	 A9	AND		 	 
- stack 1: 0x5B4
- stack 0: 0xFFFF
2577	 AA	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0xFFFF
- stack 0: 0x1
2578	 AC	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2579	 AD	PUSH2	0020	 	 
- stack 2: 0x5B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2580	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B4
2581	 B1	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2582	 B3	ADD		 	 
- stack 0: 0x5B8
2583	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2584	 B5	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1E6000000BA000000D40170016B0001018A000201A4FFE80086001001510000
2585	 B6	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x1E6000000BA000000D40170016B0001018A000201A4FFE80086001001510000
- stack 0: 0xF0
2586	 B8	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1E6
2587	 B9	JUMP		 	 
- stack 0: 0x5B8
2588	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5B8
2589	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2590	 1E8	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1E6000000BA000000D40170016B0001018A000201A4FFE80086001001510000
2591	 1E9	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x1E6000000BA000000D40170016B0001018A000201A4FFE80086001001510000
- stack 0: 0xE0
2592	 1EB	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1E60000
2593	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x1E60000
- stack 0: 0xFFFF
2594	 1EF	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x0
2595	 1F0	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x0
- stack 0: 0x1
2596	 1F2	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x0
2597	 1F3	POP		 	 
- stack 0: 0x5B8
2598	 1F4	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2599	 1F6	ADD		 	 
- stack 0: 0x5BC
2600	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2601	 1F8	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xBA000000D40170016B0001018A000201A4FFE8008600100151000000A0FFFF
2602	 1F9	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0xBA000000D40170016B0001018A000201A4FFE8008600100151000000A0FFFF
- stack 0: 0xF0
2603	 1FB	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xBA
2604	 1FC	JUMP		 	 
- stack 0: 0x5BC
2605	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5BC
2606	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2607	 BC	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xBA000000D40170016B0001018A000201A4FFE8008600100151000000A0FFFF
2608	 BD	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0xBA000000D40170016B0001018A000201A4FFE8008600100151000000A0FFFF
- stack 0: 0xE0
2609	 BF	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xBA0000
2610	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0xBA0000
- stack 0: 0xFFFF
2611	 C3	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2612	 C4	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x1
2613	 C6	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2614	 C7	PUSH2	0040	 	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x40
2615	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5BC
2616	 CB	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2617	 CD	ADD		 	 
- stack 0: 0x5C0
2618	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2619	 CF	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xD40170016B0001018A000201A4FFE8008600100151000000A0FFFF01E60000
2620	 D0	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0xD40170016B0001018A000201A4FFE8008600100151000000A0FFFF01E60000
- stack 0: 0xF0
2621	 D2	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xD4
2622	 D3	JUMP		 	 
- stack 0: 0x5C0
2623	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x5C0
2624	 D5	PUSH2	0040	 	 
- stack 1: 0x5C0
- stack 0: 0x40
2625	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5C0
- stack 0: 0x0
2626	 D9	PUSH1	03	 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x3
2627	 DB	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2628	 DC	PUSH2	0020	 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x20
2629	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2630	 E0	PUSH1	03	 	 
- stack 3: 0x5C0
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
2631	 E2	SIGNEXTEND		 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2632	 E3	SLT		 	  ;; # bge
- stack 1: 0x5C0
- stack 0: 0x1
2633	 E4	ISZERO		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2634	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0xED
2635	 E8	JUMPI		 	 
- stack 0: 0x5C0
2636	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x5C0
- stack 0: 0x107
2637	 EC	JUMP		 	 
- stack 0: 0x5C0
2638	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x5C0
2639	 108	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2640	 10A	ADD		 	 
- stack 0: 0x5C4
2641	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2642	 10C	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x16B0001018A000201A4FFE8008600100151000000A0FFFF01E6000000BA0000
2643	 10D	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x16B0001018A000201A4FFE8008600100151000000A0FFFF01E6000000BA0000
- stack 0: 0xF0
2644	 10F	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x16B
2645	 110	JUMP		 	 
- stack 0: 0x5C4
2646	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5C4
2647	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2648	 16D	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x16B0001018A000201A4FFE8008600100151000000A0FFFF01E6000000BA0000
2649	 16E	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x16B0001018A000201A4FFE8008600100151000000A0FFFF01E6000000BA0000
- stack 0: 0xE0
2650	 170	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x16B0001
2651	 171	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x16B0001
- stack 0: 0xFFFF
2652	 174	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x1
2653	 175	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x1
- stack 0: 0x1
2654	 177	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x1
2655	 178	PUSH2	0080	 	 
- stack 2: 0x5C4
- stack 1: 0x1
- stack 0: 0x80
2656	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x5C4
- stack 1: 0x1
- stack 0: 0x1
2657	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x5C4
- stack 0: 0x2
2658	 17D	PUSH2	0080	 	 
- stack 2: 0x5C4
- stack 1: 0x2
- stack 0: 0x80
2659	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C4
2660	 181	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2661	 183	ADD		 	 
- stack 0: 0x5C8
2662	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2663	 185	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x18A000201A4FFE8008600100151000000A0FFFF01E6000000BA000001E60000
2664	 186	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x18A000201A4FFE8008600100151000000A0FFFF01E6000000BA000001E60000
- stack 0: 0xF0
2665	 188	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x18A
2666	 189	JUMP		 	 
- stack 0: 0x5C8
2667	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5C8
2668	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2669	 18C	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x18A000201A4FFE8008600100151000000A0FFFF01E6000000BA000001E60000
2670	 18D	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x18A000201A4FFE8008600100151000000A0FFFF01E6000000BA000001E60000
- stack 0: 0xE0
2671	 18F	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x18A0002
2672	 190	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x18A0002
- stack 0: 0xFFFF
2673	 193	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x2
2674	 194	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x2
- stack 0: 0x1
2675	 196	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x2
2676	 197	PUSH2	00A0	 	 
- stack 2: 0x5C8
- stack 1: 0x2
- stack 0: 0xA0
2677	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x5C8
2678	 19B	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2679	 19D	ADD		 	 
- stack 0: 0x5CC
2680	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2681	 19F	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x1A4FFE8008600100151000000A0FFFF01E6000000BA000001E6000000D40148
2682	 1A0	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x1A4FFE8008600100151000000A0FFFF01E6000000BA000001E6000000D40148
- stack 0: 0xF0
2683	 1A2	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x1A4
2684	 1A3	JUMP		 	 
- stack 0: 0x5CC
2685	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5CC
2686	 1A5	PUSH2	0080	 	 
- stack 1: 0x5CC
- stack 0: 0x80
2687	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x5CC
- stack 0: 0x2
2688	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2689	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5CC
- stack 0: 0x2
2690	 1AF	PUSH2	00A0	 	 
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0xA0
2691	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0x2
2692	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5CC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2693	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0x2
2694	 1B9	SUB		 	 
- stack 1: 0x5CC
- stack 0: 0x0
2695	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0x1C2
2696	 1BD	JUMPI		 	 
- stack 0: 0x5CC
2697	 1BE	PUSH2	01DC	 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 1: 0x5CC
- stack 0: 0x1DC
2698	 1C1	JUMP		 	 
- stack 0: 0x5CC
2699	 1DC	JUMPDEST		 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x5CC
2700	 1DD	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2701	 1DF	ADD		 	 
- stack 0: 0x5D0
2702	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2703	 1E1	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x8600100151000000A0FFFF01E6000000BA000001E6000000D40148016B0001
2704	 1E2	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x8600100151000000A0FFFF01E6000000BA000001E6000000D40148016B0001
- stack 0: 0xF0
2705	 1E4	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x86
2706	 1E5	JUMP		 	 
- stack 0: 0x5D0
2707	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5D0
2708	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2709	 88	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x8600100151000000A0FFFF01E6000000BA000001E6000000D40148016B0001
2710	 89	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x8600100151000000A0FFFF01E6000000BA000001E6000000D40148016B0001
- stack 0: 0xE0
2711	 8B	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x860010
2712	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x860010
- stack 0: 0xFFFF
2713	 8F	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x10
2714	 90	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x10
- stack 0: 0x1
2715	 92	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x10
2716	 93	PUSH2	0380	 	 
- stack 2: 0x5D0
- stack 1: 0x10
- stack 0: 0x380
2717	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x5D0
2718	 97	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2719	 99	ADD		 	 
- stack 0: 0x5D4
2720	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2721	 9B	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x151000000A0FFFF01E6000000BA000001E6000000D40148016B0001018A0002
2722	 9C	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x151000000A0FFFF01E6000000BA000001E6000000D40148016B0001018A0002
- stack 0: 0xF0
2723	 9E	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x151
2724	 9F	JUMP		 	 
- stack 0: 0x5D4
2725	 151	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5D4
2726	 152	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2727	 153	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x151000000A0FFFF01E6000000BA000001E6000000D40148016B0001018A0002
2728	 154	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x151000000A0FFFF01E6000000BA000001E6000000D40148016B0001018A0002
- stack 0: 0xE0
2729	 156	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x1510000
2730	 157	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x1510000
- stack 0: 0xFFFF
2731	 15A	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2732	 15B	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x1
2733	 15D	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2734	 15E	PUSH2	0080	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x80
2735	 161	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D4
2736	 162	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2737	 164	ADD		 	 
- stack 0: 0x5D8
2738	 165	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2739	 166	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xA0FFFF01E6000000BA000001E6000000D40148016B0001018A000201A4FFE4
2740	 167	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0xA0FFFF01E6000000BA000001E6000000D40148016B0001018A000201A4FFE4
- stack 0: 0xF0
2741	 169	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xA0
2742	 16A	JUMP		 	 
- stack 0: 0x5D8
2743	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5D8
2744	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2745	 A2	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xA0FFFF01E6000000BA000001E6000000D40148016B0001018A000201A4FFE4
2746	 A3	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0xA0FFFF01E6000000BA000001E6000000D40148016B0001018A000201A4FFE4
- stack 0: 0xE0
2747	 A5	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xA0FFFF
2748	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
2749	 A9	AND		 	 
- stack 1: 0x5D8
- stack 0: 0xFFFF
2750	 AA	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0xFFFF
- stack 0: 0x1
2751	 AC	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2752	 AD	PUSH2	0020	 	 
- stack 2: 0x5D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2753	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D8
2754	 B1	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2755	 B3	ADD		 	 
- stack 0: 0x5DC
2756	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2757	 B5	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x1E6000000BA000001E6000000D40148016B0001018A000201A4FFE400860011
2758	 B6	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x1E6000000BA000001E6000000D40148016B0001018A000201A4FFE400860011
- stack 0: 0xF0
2759	 B8	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x1E6
2760	 B9	JUMP		 	 
- stack 0: 0x5DC
2761	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5DC
2762	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2763	 1E8	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x1E6000000BA000001E6000000D40148016B0001018A000201A4FFE400860011
2764	 1E9	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x1E6000000BA000001E6000000D40148016B0001018A000201A4FFE400860011
- stack 0: 0xE0
2765	 1EB	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x1E60000
2766	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x1E60000
- stack 0: 0xFFFF
2767	 1EF	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2768	 1F0	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x1
2769	 1F2	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2770	 1F3	POP		 	 
- stack 0: 0x5DC
2771	 1F4	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2772	 1F6	ADD		 	 
- stack 0: 0x5E0
2773	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2774	 1F8	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0xBA000001E6000000D40148016B0001018A000201A4FFE40086001101510000
2775	 1F9	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0xBA000001E6000000D40148016B0001018A000201A4FFE40086001101510000
- stack 0: 0xF0
2776	 1FB	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0xBA
2777	 1FC	JUMP		 	 
- stack 0: 0x5E0
2778	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5E0
2779	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2780	 BC	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0xBA000001E6000000D40148016B0001018A000201A4FFE40086001101510000
2781	 BD	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0xBA000001E6000000D40148016B0001018A000201A4FFE40086001101510000
- stack 0: 0xE0
2782	 BF	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0xBA0000
2783	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0xBA0000
- stack 0: 0xFFFF
2784	 C3	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x0
2785	 C4	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x0
- stack 0: 0x1
2786	 C6	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x0
2787	 C7	PUSH2	0040	 	 
- stack 2: 0x5E0
- stack 1: 0x0
- stack 0: 0x40
2788	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5E0
2789	 CB	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2790	 CD	ADD		 	 
- stack 0: 0x5E4
2791	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2792	 CF	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1E6000000D40148016B0001018A000201A4FFE4008600110151000000A0FFFF
2793	 D0	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x1E6000000D40148016B0001018A000201A4FFE4008600110151000000A0FFFF
- stack 0: 0xF0
2794	 D2	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1E6
2795	 D3	JUMP		 	 
- stack 0: 0x5E4
2796	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5E4
2797	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2798	 1E8	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1E6000000D40148016B0001018A000201A4FFE4008600110151000000A0FFFF
2799	 1E9	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x1E6000000D40148016B0001018A000201A4FFE4008600110151000000A0FFFF
- stack 0: 0xE0
2800	 1EB	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1E60000
2801	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x1E60000
- stack 0: 0xFFFF
2802	 1EF	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x0
2803	 1F0	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x1
2804	 1F2	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x0
2805	 1F3	POP		 	 
- stack 0: 0x5E4
2806	 1F4	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2807	 1F6	ADD		 	 
- stack 0: 0x5E8
2808	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2809	 1F8	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xD40148016B0001018A000201A4FFE4008600110151000000A0FFFF01E60000
2810	 1F9	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0xD40148016B0001018A000201A4FFE4008600110151000000A0FFFF01E60000
- stack 0: 0xF0
2811	 1FB	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xD4
2812	 1FC	JUMP		 	 
- stack 0: 0x5E8
2813	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x5E8
2814	 D5	PUSH2	0040	 	 
- stack 1: 0x5E8
- stack 0: 0x40
2815	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5E8
- stack 0: 0x0
2816	 D9	PUSH1	03	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x3
2817	 DB	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2818	 DC	PUSH2	0020	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x20
2819	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2820	 E0	PUSH1	03	 	 
- stack 3: 0x5E8
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
2821	 E2	SIGNEXTEND		 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2822	 E3	SLT		 	  ;; # bge
- stack 1: 0x5E8
- stack 0: 0x1
2823	 E4	ISZERO		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2824	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0xED
2825	 E8	JUMPI		 	 
- stack 0: 0x5E8
2826	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x5E8
- stack 0: 0x107
2827	 EC	JUMP		 	 
- stack 0: 0x5E8
2828	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x5E8
2829	 108	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2830	 10A	ADD		 	 
- stack 0: 0x5EC
2831	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2832	 10C	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x16B0001018A000201A4FFE4008600110151000000A0FFFF01E6000001E60000
2833	 10D	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x16B0001018A000201A4FFE4008600110151000000A0FFFF01E6000001E60000
- stack 0: 0xF0
2834	 10F	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x16B
2835	 110	JUMP		 	 
- stack 0: 0x5EC
2836	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5EC
2837	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2838	 16D	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x16B0001018A000201A4FFE4008600110151000000A0FFFF01E6000001E60000
2839	 16E	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x16B0001018A000201A4FFE4008600110151000000A0FFFF01E6000001E60000
- stack 0: 0xE0
2840	 170	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x16B0001
2841	 171	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x16B0001
- stack 0: 0xFFFF
2842	 174	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x1
2843	 175	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x1
2844	 177	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x1
2845	 178	PUSH2	0080	 	 
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x80
2846	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x0
2847	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x5EC
- stack 0: 0x1
2848	 17D	PUSH2	0080	 	 
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x80
2849	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x5EC
2850	 181	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2851	 183	ADD		 	 
- stack 0: 0x5F0
2852	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2853	 185	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x18A000201A4FFE4008600110151000000A0FFFF01E6000001E6000000BA0000
2854	 186	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x18A000201A4FFE4008600110151000000A0FFFF01E6000001E6000000BA0000
- stack 0: 0xF0
2855	 188	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x18A
2856	 189	JUMP		 	 
- stack 0: 0x5F0
2857	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5F0
2858	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2859	 18C	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x18A000201A4FFE4008600110151000000A0FFFF01E6000001E6000000BA0000
2860	 18D	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x18A000201A4FFE4008600110151000000A0FFFF01E6000001E6000000BA0000
- stack 0: 0xE0
2861	 18F	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x18A0002
2862	 190	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x18A0002
- stack 0: 0xFFFF
2863	 193	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x2
2864	 194	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0x1
2865	 196	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x2
2866	 197	PUSH2	00A0	 	 
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0xA0
2867	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x5F0
2868	 19B	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2869	 19D	ADD		 	 
- stack 0: 0x5F4
2870	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2871	 19F	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x1A4FFE4008600110151000000A0FFFF01E6000001E6000000BA000000D40120
2872	 1A0	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x1A4FFE4008600110151000000A0FFFF01E6000001E6000000BA000000D40120
- stack 0: 0xF0
2873	 1A2	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x1A4
2874	 1A3	JUMP		 	 
- stack 0: 0x5F4
2875	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5F4
2876	 1A5	PUSH2	0080	 	 
- stack 1: 0x5F4
- stack 0: 0x80
2877	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x5F4
- stack 0: 0x1
2878	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2879	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x1
2880	 1AF	PUSH2	00A0	 	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0xA0
2881	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x2
2882	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2883	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x2
2884	 1B9	SUB		 	 
- stack 1: 0x5F4
- stack 0: 0x1
2885	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x1C2
2886	 1BD	JUMPI		 	 
- stack 0: 0x5F4
2887	 1C2	JUMPDEST		 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x5F4
2888	 1C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
2889	 1C4	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x1A4FFE4008600110151000000A0FFFF01E6000001E6000000BA000000D40120
2890	 1C5	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x1A4FFE4008600110151000000A0FFFF01E6000001E6000000BA000000D40120
- stack 0: 0xE0
2891	 1C7	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x1A4FFE4
2892	 1C8	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x1A4FFE4
- stack 0: 0xFFFF
2893	 1CB	AND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFE4
2894	 1CC	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0xFFE4
- stack 0: 0x1
2895	 1CE	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2896	 1CF	ADD		 	 
- stack 0: 0x5D8
2897	 1D0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5D8
- stack 0: 0xFFFFFFFF
2898	 1D5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5D8
2899	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2900	 1D7	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xA0FFFF01E6000000BA000001E6000000D40148016B0001018A000201A4FFE4
2901	 1D8	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0xA0FFFF01E6000000BA000001E6000000D40148016B0001018A000201A4FFE4
- stack 0: 0xF0
2902	 1DA	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xA0
2903	 1DB	JUMP		 	 
- stack 0: 0x5D8
2904	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5D8
2905	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2906	 A2	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xA0FFFF01E6000000BA000001E6000000D40148016B0001018A000201A4FFE4
2907	 A3	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0xA0FFFF01E6000000BA000001E6000000D40148016B0001018A000201A4FFE4
- stack 0: 0xE0
2908	 A5	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xA0FFFF
2909	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
2910	 A9	AND		 	 
- stack 1: 0x5D8
- stack 0: 0xFFFF
2911	 AA	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0xFFFF
- stack 0: 0x1
2912	 AC	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2913	 AD	PUSH2	0020	 	 
- stack 2: 0x5D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2914	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D8
2915	 B1	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2916	 B3	ADD		 	 
- stack 0: 0x5DC
2917	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2918	 B5	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x1E6000000BA000001E6000000D40148016B0001018A000201A4FFE400860011
2919	 B6	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x1E6000000BA000001E6000000D40148016B0001018A000201A4FFE400860011
- stack 0: 0xF0
2920	 B8	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x1E6
2921	 B9	JUMP		 	 
- stack 0: 0x5DC
2922	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5DC
2923	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2924	 1E8	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x1E6000000BA000001E6000000D40148016B0001018A000201A4FFE400860011
2925	 1E9	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x1E6000000BA000001E6000000D40148016B0001018A000201A4FFE400860011
- stack 0: 0xE0
2926	 1EB	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x1E60000
2927	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x1E60000
- stack 0: 0xFFFF
2928	 1EF	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2929	 1F0	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x1
2930	 1F2	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2931	 1F3	POP		 	 
- stack 0: 0x5DC
2932	 1F4	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2933	 1F6	ADD		 	 
- stack 0: 0x5E0
2934	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2935	 1F8	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0xBA000001E6000000D40148016B0001018A000201A4FFE40086001101510000
2936	 1F9	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0xBA000001E6000000D40148016B0001018A000201A4FFE40086001101510000
- stack 0: 0xF0
2937	 1FB	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0xBA
2938	 1FC	JUMP		 	 
- stack 0: 0x5E0
2939	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5E0
2940	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2941	 BC	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0xBA000001E6000000D40148016B0001018A000201A4FFE40086001101510000
2942	 BD	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0xBA000001E6000000D40148016B0001018A000201A4FFE40086001101510000
- stack 0: 0xE0
2943	 BF	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0xBA0000
2944	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0xBA0000
- stack 0: 0xFFFF
2945	 C3	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x0
2946	 C4	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x0
- stack 0: 0x1
2947	 C6	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x0
2948	 C7	PUSH2	0040	 	 
- stack 2: 0x5E0
- stack 1: 0x0
- stack 0: 0x40
2949	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5E0
2950	 CB	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2951	 CD	ADD		 	 
- stack 0: 0x5E4
2952	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2953	 CF	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1E6000000D40148016B0001018A000201A4FFE4008600110151000000A0FFFF
2954	 D0	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x1E6000000D40148016B0001018A000201A4FFE4008600110151000000A0FFFF
- stack 0: 0xF0
2955	 D2	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1E6
2956	 D3	JUMP		 	 
- stack 0: 0x5E4
2957	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5E4
2958	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2959	 1E8	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1E6000000D40148016B0001018A000201A4FFE4008600110151000000A0FFFF
2960	 1E9	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x1E6000000D40148016B0001018A000201A4FFE4008600110151000000A0FFFF
- stack 0: 0xE0
2961	 1EB	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1E60000
2962	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x1E60000
- stack 0: 0xFFFF
2963	 1EF	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x0
2964	 1F0	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x1
2965	 1F2	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x0
2966	 1F3	POP		 	 
- stack 0: 0x5E4
2967	 1F4	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2968	 1F6	ADD		 	 
- stack 0: 0x5E8
2969	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2970	 1F8	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xD40148016B0001018A000201A4FFE4008600110151000000A0FFFF01E60000
2971	 1F9	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0xD40148016B0001018A000201A4FFE4008600110151000000A0FFFF01E60000
- stack 0: 0xF0
2972	 1FB	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xD4
2973	 1FC	JUMP		 	 
- stack 0: 0x5E8
2974	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x5E8
2975	 D5	PUSH2	0040	 	 
- stack 1: 0x5E8
- stack 0: 0x40
2976	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5E8
- stack 0: 0x0
2977	 D9	PUSH1	03	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x3
2978	 DB	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2979	 DC	PUSH2	0020	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x20
2980	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2981	 E0	PUSH1	03	 	 
- stack 3: 0x5E8
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
2982	 E2	SIGNEXTEND		 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2983	 E3	SLT		 	  ;; # bge
- stack 1: 0x5E8
- stack 0: 0x1
2984	 E4	ISZERO		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2985	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0xED
2986	 E8	JUMPI		 	 
- stack 0: 0x5E8
2987	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x5E8
- stack 0: 0x107
2988	 EC	JUMP		 	 
- stack 0: 0x5E8
2989	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x5E8
2990	 108	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2991	 10A	ADD		 	 
- stack 0: 0x5EC
2992	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2993	 10C	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x16B0001018A000201A4FFE4008600110151000000A0FFFF01E6000001E60000
2994	 10D	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x16B0001018A000201A4FFE4008600110151000000A0FFFF01E6000001E60000
- stack 0: 0xF0
2995	 10F	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x16B
2996	 110	JUMP		 	 
- stack 0: 0x5EC
2997	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5EC
2998	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2999	 16D	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x16B0001018A000201A4FFE4008600110151000000A0FFFF01E6000001E60000
3000	 16E	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x16B0001018A000201A4FFE4008600110151000000A0FFFF01E6000001E60000
- stack 0: 0xE0
3001	 170	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x16B0001
3002	 171	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x16B0001
- stack 0: 0xFFFF
3003	 174	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x1
3004	 175	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x1
3005	 177	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x1
3006	 178	PUSH2	0080	 	 
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x80
3007	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x1
3008	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x5EC
- stack 0: 0x2
3009	 17D	PUSH2	0080	 	 
- stack 2: 0x5EC
- stack 1: 0x2
- stack 0: 0x80
3010	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x5EC
3011	 181	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3012	 183	ADD		 	 
- stack 0: 0x5F0
3013	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3014	 185	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x18A000201A4FFE4008600110151000000A0FFFF01E6000001E6000000BA0000
3015	 186	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x18A000201A4FFE4008600110151000000A0FFFF01E6000001E6000000BA0000
- stack 0: 0xF0
3016	 188	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x18A
3017	 189	JUMP		 	 
- stack 0: 0x5F0
3018	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5F0
3019	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3020	 18C	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x18A000201A4FFE4008600110151000000A0FFFF01E6000001E6000000BA0000
3021	 18D	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x18A000201A4FFE4008600110151000000A0FFFF01E6000001E6000000BA0000
- stack 0: 0xE0
3022	 18F	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x18A0002
3023	 190	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x18A0002
- stack 0: 0xFFFF
3024	 193	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x2
3025	 194	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0x1
3026	 196	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x2
3027	 197	PUSH2	00A0	 	 
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0xA0
3028	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x5F0
3029	 19B	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3030	 19D	ADD		 	 
- stack 0: 0x5F4
3031	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3032	 19F	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x1A4FFE4008600110151000000A0FFFF01E6000001E6000000BA000000D40120
3033	 1A0	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x1A4FFE4008600110151000000A0FFFF01E6000001E6000000BA000000D40120
- stack 0: 0xF0
3034	 1A2	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x1A4
3035	 1A3	JUMP		 	 
- stack 0: 0x5F4
3036	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5F4
3037	 1A5	PUSH2	0080	 	 
- stack 1: 0x5F4
- stack 0: 0x80
3038	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x5F4
- stack 0: 0x2
3039	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3040	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x2
3041	 1AF	PUSH2	00A0	 	 
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0xA0
3042	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0x2
3043	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3044	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0x2
3045	 1B9	SUB		 	 
- stack 1: 0x5F4
- stack 0: 0x0
3046	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x1C2
3047	 1BD	JUMPI		 	 
- stack 0: 0x5F4
3048	 1BE	PUSH2	01DC	 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 1: 0x5F4
- stack 0: 0x1DC
3049	 1C1	JUMP		 	 
- stack 0: 0x5F4
3050	 1DC	JUMPDEST		 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x5F4
3051	 1DD	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3052	 1DF	ADD		 	 
- stack 0: 0x5F8
3053	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3054	 1E1	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x8600110151000000A0FFFF01E6000001E6000000BA000000D40120016B0001
3055	 1E2	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x8600110151000000A0FFFF01E6000001E6000000BA000000D40120016B0001
- stack 0: 0xF0
3056	 1E4	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x86
3057	 1E5	JUMP		 	 
- stack 0: 0x5F8
3058	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5F8
3059	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3060	 88	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x8600110151000000A0FFFF01E6000001E6000000BA000000D40120016B0001
3061	 89	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x8600110151000000A0FFFF01E6000001E6000000BA000000D40120016B0001
- stack 0: 0xE0
3062	 8B	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x860011
3063	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x860011
- stack 0: 0xFFFF
3064	 8F	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x11
3065	 90	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x11
- stack 0: 0x1
3066	 92	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x11
3067	 93	PUSH2	0380	 	 
- stack 2: 0x5F8
- stack 1: 0x11
- stack 0: 0x380
3068	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x5F8
3069	 97	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3070	 99	ADD		 	 
- stack 0: 0x5FC
3071	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3072	 9B	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x151000000A0FFFF01E6000001E6000000BA000000D40120016B0001018A0002
3073	 9C	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x151000000A0FFFF01E6000001E6000000BA000000D40120016B0001018A0002
- stack 0: 0xF0
3074	 9E	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x151
3075	 9F	JUMP		 	 
- stack 0: 0x5FC
3076	 151	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5FC
3077	 152	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3078	 153	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x151000000A0FFFF01E6000001E6000000BA000000D40120016B0001018A0002
3079	 154	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x151000000A0FFFF01E6000001E6000000BA000000D40120016B0001018A0002
- stack 0: 0xE0
3080	 156	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x1510000
3081	 157	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x1510000
- stack 0: 0xFFFF
3082	 15A	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3083	 15B	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
3084	 15D	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3085	 15E	PUSH2	0080	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x80
3086	 161	MSTORE		 	  ;; # store to x4
- stack 0: 0x5FC
3087	 162	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3088	 164	ADD		 	 
- stack 0: 0x600
3089	 165	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3090	 166	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xA0FFFF01E6000001E6000000BA000000D40120016B0001018A000201A4FFE4
3091	 167	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xA0FFFF01E6000001E6000000BA000000D40120016B0001018A000201A4FFE4
- stack 0: 0xF0
3092	 169	SHR		 	 
- stack 1: 0x600
- stack 0: 0xA0
3093	 16A	JUMP		 	 
- stack 0: 0x600
3094	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x600
3095	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3096	 A2	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xA0FFFF01E6000001E6000000BA000000D40120016B0001018A000201A4FFE4
3097	 A3	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0xA0FFFF01E6000001E6000000BA000000D40120016B0001018A000201A4FFE4
- stack 0: 0xE0
3098	 A5	SHR		 	 
- stack 1: 0x600
- stack 0: 0xA0FFFF
3099	 A6	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
3100	 A9	AND		 	 
- stack 1: 0x600
- stack 0: 0xFFFF
3101	 AA	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0xFFFF
- stack 0: 0x1
3102	 AC	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3103	 AD	PUSH2	0020	 	 
- stack 2: 0x600
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3104	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x600
3105	 B1	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3106	 B3	ADD		 	 
- stack 0: 0x604
3107	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3108	 B5	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x1E6000001E6000000BA000000D40120016B0001018A000201A4FFE400860012
3109	 B6	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x1E6000001E6000000BA000000D40120016B0001018A000201A4FFE400860012
- stack 0: 0xF0
3110	 B8	SHR		 	 
- stack 1: 0x604
- stack 0: 0x1E6
3111	 B9	JUMP		 	 
- stack 0: 0x604
3112	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x604
3113	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3114	 1E8	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x1E6000001E6000000BA000000D40120016B0001018A000201A4FFE400860012
3115	 1E9	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x1E6000001E6000000BA000000D40120016B0001018A000201A4FFE400860012
- stack 0: 0xE0
3116	 1EB	SHR		 	 
- stack 1: 0x604
- stack 0: 0x1E60000
3117	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x1E60000
- stack 0: 0xFFFF
3118	 1EF	AND		 	 
- stack 1: 0x604
- stack 0: 0x0
3119	 1F0	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x1
3120	 1F2	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x0
3121	 1F3	POP		 	 
- stack 0: 0x604
3122	 1F4	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3123	 1F6	ADD		 	 
- stack 0: 0x608
3124	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3125	 1F8	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x1E6000000BA000000D40120016B0001018A000201A4FFE40086001201510000
3126	 1F9	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x1E6000000BA000000D40120016B0001018A000201A4FFE40086001201510000
- stack 0: 0xF0
3127	 1FB	SHR		 	 
- stack 1: 0x608
- stack 0: 0x1E6
3128	 1FC	JUMP		 	 
- stack 0: 0x608
3129	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x608
3130	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3131	 1E8	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x1E6000000BA000000D40120016B0001018A000201A4FFE40086001201510000
3132	 1E9	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x1E6000000BA000000D40120016B0001018A000201A4FFE40086001201510000
- stack 0: 0xE0
3133	 1EB	SHR		 	 
- stack 1: 0x608
- stack 0: 0x1E60000
3134	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x1E60000
- stack 0: 0xFFFF
3135	 1EF	AND		 	 
- stack 1: 0x608
- stack 0: 0x0
3136	 1F0	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x1
3137	 1F2	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x0
3138	 1F3	POP		 	 
- stack 0: 0x608
3139	 1F4	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3140	 1F6	ADD		 	 
- stack 0: 0x60C
3141	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3142	 1F8	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xBA000000D40120016B0001018A000201A4FFE4008600120151000000A0FFFF
3143	 1F9	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0xBA000000D40120016B0001018A000201A4FFE4008600120151000000A0FFFF
- stack 0: 0xF0
3144	 1FB	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xBA
3145	 1FC	JUMP		 	 
- stack 0: 0x60C
3146	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x60C
3147	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
3148	 BC	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xBA000000D40120016B0001018A000201A4FFE4008600120151000000A0FFFF
3149	 BD	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0xBA000000D40120016B0001018A000201A4FFE4008600120151000000A0FFFF
- stack 0: 0xE0
3150	 BF	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xBA0000
3151	 C0	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0xBA0000
- stack 0: 0xFFFF
3152	 C3	AND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3153	 C4	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x1
3154	 C6	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3155	 C7	PUSH2	0040	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x40
3156	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x60C
3157	 CB	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3158	 CD	ADD		 	 
- stack 0: 0x610
3159	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3160	 CF	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xD40120016B0001018A000201A4FFE4008600120151000000A0FFFF00BA0000
3161	 D0	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0xD40120016B0001018A000201A4FFE4008600120151000000A0FFFF00BA0000
- stack 0: 0xF0
3162	 D2	SHR		 	 
- stack 1: 0x610
- stack 0: 0xD4
3163	 D3	JUMP		 	 
- stack 0: 0x610
3164	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x610
3165	 D5	PUSH2	0040	 	 
- stack 1: 0x610
- stack 0: 0x40
3166	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x610
- stack 0: 0x0
3167	 D9	PUSH1	03	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x3
3168	 DB	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x0
3169	 DC	PUSH2	0020	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x20
3170	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3171	 E0	PUSH1	03	 	 
- stack 3: 0x610
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
3172	 E2	SIGNEXTEND		 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3173	 E3	SLT		 	  ;; # bge
- stack 1: 0x610
- stack 0: 0x1
3174	 E4	ISZERO		 	 
- stack 1: 0x610
- stack 0: 0x0
3175	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0xED
3176	 E8	JUMPI		 	 
- stack 0: 0x610
3177	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x610
- stack 0: 0x107
3178	 EC	JUMP		 	 
- stack 0: 0x610
3179	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x610
3180	 108	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3181	 10A	ADD		 	 
- stack 0: 0x614
3182	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3183	 10C	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x16B0001018A000201A4FFE4008600120151000000A0FFFF00BA000000D40100
3184	 10D	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x16B0001018A000201A4FFE4008600120151000000A0FFFF00BA000000D40100
- stack 0: 0xF0
3185	 10F	SHR		 	 
- stack 1: 0x614
- stack 0: 0x16B
3186	 110	JUMP		 	 
- stack 0: 0x614
3187	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x614
3188	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3189	 16D	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x16B0001018A000201A4FFE4008600120151000000A0FFFF00BA000000D40100
3190	 16E	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x16B0001018A000201A4FFE4008600120151000000A0FFFF00BA000000D40100
- stack 0: 0xE0
3191	 170	SHR		 	 
- stack 1: 0x614
- stack 0: 0x16B0001
3192	 171	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x16B0001
- stack 0: 0xFFFF
3193	 174	AND		 	 
- stack 1: 0x614
- stack 0: 0x1
3194	 175	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x1
3195	 177	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x1
3196	 178	PUSH2	0080	 	 
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x80
3197	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x0
3198	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x614
- stack 0: 0x1
3199	 17D	PUSH2	0080	 	 
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x80
3200	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x614
3201	 181	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3202	 183	ADD		 	 
- stack 0: 0x618
3203	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3204	 185	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x18A000201A4FFE4008600120151000000A0FFFF00BA000000D40100016B0001
3205	 186	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x18A000201A4FFE4008600120151000000A0FFFF00BA000000D40100016B0001
- stack 0: 0xF0
3206	 188	SHR		 	 
- stack 1: 0x618
- stack 0: 0x18A
3207	 189	JUMP		 	 
- stack 0: 0x618
3208	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x618
3209	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3210	 18C	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x18A000201A4FFE4008600120151000000A0FFFF00BA000000D40100016B0001
3211	 18D	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x18A000201A4FFE4008600120151000000A0FFFF00BA000000D40100016B0001
- stack 0: 0xE0
3212	 18F	SHR		 	 
- stack 1: 0x618
- stack 0: 0x18A0002
3213	 190	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x18A0002
- stack 0: 0xFFFF
3214	 193	AND		 	 
- stack 1: 0x618
- stack 0: 0x2
3215	 194	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0x1
3216	 196	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x2
3217	 197	PUSH2	00A0	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0xA0
3218	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x618
3219	 19B	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3220	 19D	ADD		 	 
- stack 0: 0x61C
3221	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3222	 19F	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x1A4FFE4008600120151000000A0FFFF00BA000000D40100016B0001018A0002
3223	 1A0	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x1A4FFE4008600120151000000A0FFFF00BA000000D40100016B0001018A0002
- stack 0: 0xF0
3224	 1A2	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x1A4
3225	 1A3	JUMP		 	 
- stack 0: 0x61C
3226	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x61C
3227	 1A5	PUSH2	0080	 	 
- stack 1: 0x61C
- stack 0: 0x80
3228	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x61C
- stack 0: 0x1
3229	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3230	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x61C
- stack 0: 0x1
3231	 1AF	PUSH2	00A0	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0xA0
3232	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x2
3233	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x61C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3234	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x2
3235	 1B9	SUB		 	 
- stack 1: 0x61C
- stack 0: 0x1
3236	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x1C2
3237	 1BD	JUMPI		 	 
- stack 0: 0x61C
3238	 1C2	JUMPDEST		 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x61C
3239	 1C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3240	 1C4	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x1A4FFE4008600120151000000A0FFFF00BA000000D40100016B0001018A0002
3241	 1C5	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x1A4FFE4008600120151000000A0FFFF00BA000000D40100016B0001018A0002
- stack 0: 0xE0
3242	 1C7	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x1A4FFE4
3243	 1C8	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x1A4FFE4
- stack 0: 0xFFFF
3244	 1CB	AND		 	 
- stack 1: 0x61C
- stack 0: 0xFFE4
3245	 1CC	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0xFFE4
- stack 0: 0x1
3246	 1CE	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
3247	 1CF	ADD		 	 
- stack 0: 0x600
3248	 1D0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x600
- stack 0: 0xFFFFFFFF
3249	 1D5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x600
3250	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3251	 1D7	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xA0FFFF01E6000001E6000000BA000000D40120016B0001018A000201A4FFE4
3252	 1D8	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xA0FFFF01E6000001E6000000BA000000D40120016B0001018A000201A4FFE4
- stack 0: 0xF0
3253	 1DA	SHR		 	 
- stack 1: 0x600
- stack 0: 0xA0
3254	 1DB	JUMP		 	 
- stack 0: 0x600
3255	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x600
3256	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3257	 A2	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xA0FFFF01E6000001E6000000BA000000D40120016B0001018A000201A4FFE4
3258	 A3	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0xA0FFFF01E6000001E6000000BA000000D40120016B0001018A000201A4FFE4
- stack 0: 0xE0
3259	 A5	SHR		 	 
- stack 1: 0x600
- stack 0: 0xA0FFFF
3260	 A6	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
3261	 A9	AND		 	 
- stack 1: 0x600
- stack 0: 0xFFFF
3262	 AA	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0xFFFF
- stack 0: 0x1
3263	 AC	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3264	 AD	PUSH2	0020	 	 
- stack 2: 0x600
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3265	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x600
3266	 B1	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3267	 B3	ADD		 	 
- stack 0: 0x604
3268	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3269	 B5	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x1E6000001E6000000BA000000D40120016B0001018A000201A4FFE400860012
3270	 B6	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x1E6000001E6000000BA000000D40120016B0001018A000201A4FFE400860012
- stack 0: 0xF0
3271	 B8	SHR		 	 
- stack 1: 0x604
- stack 0: 0x1E6
3272	 B9	JUMP		 	 
- stack 0: 0x604
3273	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x604
3274	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3275	 1E8	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x1E6000001E6000000BA000000D40120016B0001018A000201A4FFE400860012
3276	 1E9	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x1E6000001E6000000BA000000D40120016B0001018A000201A4FFE400860012
- stack 0: 0xE0
3277	 1EB	SHR		 	 
- stack 1: 0x604
- stack 0: 0x1E60000
3278	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x1E60000
- stack 0: 0xFFFF
3279	 1EF	AND		 	 
- stack 1: 0x604
- stack 0: 0x0
3280	 1F0	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x1
3281	 1F2	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x0
3282	 1F3	POP		 	 
- stack 0: 0x604
3283	 1F4	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3284	 1F6	ADD		 	 
- stack 0: 0x608
3285	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3286	 1F8	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x1E6000000BA000000D40120016B0001018A000201A4FFE40086001201510000
3287	 1F9	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x1E6000000BA000000D40120016B0001018A000201A4FFE40086001201510000
- stack 0: 0xF0
3288	 1FB	SHR		 	 
- stack 1: 0x608
- stack 0: 0x1E6
3289	 1FC	JUMP		 	 
- stack 0: 0x608
3290	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x608
3291	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3292	 1E8	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x1E6000000BA000000D40120016B0001018A000201A4FFE40086001201510000
3293	 1E9	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x1E6000000BA000000D40120016B0001018A000201A4FFE40086001201510000
- stack 0: 0xE0
3294	 1EB	SHR		 	 
- stack 1: 0x608
- stack 0: 0x1E60000
3295	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x1E60000
- stack 0: 0xFFFF
3296	 1EF	AND		 	 
- stack 1: 0x608
- stack 0: 0x0
3297	 1F0	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x1
3298	 1F2	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x0
3299	 1F3	POP		 	 
- stack 0: 0x608
3300	 1F4	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3301	 1F6	ADD		 	 
- stack 0: 0x60C
3302	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3303	 1F8	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xBA000000D40120016B0001018A000201A4FFE4008600120151000000A0FFFF
3304	 1F9	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0xBA000000D40120016B0001018A000201A4FFE4008600120151000000A0FFFF
- stack 0: 0xF0
3305	 1FB	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xBA
3306	 1FC	JUMP		 	 
- stack 0: 0x60C
3307	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x60C
3308	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
3309	 BC	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xBA000000D40120016B0001018A000201A4FFE4008600120151000000A0FFFF
3310	 BD	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0xBA000000D40120016B0001018A000201A4FFE4008600120151000000A0FFFF
- stack 0: 0xE0
3311	 BF	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xBA0000
3312	 C0	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0xBA0000
- stack 0: 0xFFFF
3313	 C3	AND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3314	 C4	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x1
3315	 C6	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3316	 C7	PUSH2	0040	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x40
3317	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x60C
3318	 CB	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3319	 CD	ADD		 	 
- stack 0: 0x610
3320	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3321	 CF	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xD40120016B0001018A000201A4FFE4008600120151000000A0FFFF00BA0000
3322	 D0	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0xD40120016B0001018A000201A4FFE4008600120151000000A0FFFF00BA0000
- stack 0: 0xF0
3323	 D2	SHR		 	 
- stack 1: 0x610
- stack 0: 0xD4
3324	 D3	JUMP		 	 
- stack 0: 0x610
3325	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x610
3326	 D5	PUSH2	0040	 	 
- stack 1: 0x610
- stack 0: 0x40
3327	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x610
- stack 0: 0x0
3328	 D9	PUSH1	03	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x3
3329	 DB	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x0
3330	 DC	PUSH2	0020	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x20
3331	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3332	 E0	PUSH1	03	 	 
- stack 3: 0x610
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
3333	 E2	SIGNEXTEND		 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3334	 E3	SLT		 	  ;; # bge
- stack 1: 0x610
- stack 0: 0x1
3335	 E4	ISZERO		 	 
- stack 1: 0x610
- stack 0: 0x0
3336	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0xED
3337	 E8	JUMPI		 	 
- stack 0: 0x610
3338	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x610
- stack 0: 0x107
3339	 EC	JUMP		 	 
- stack 0: 0x610
3340	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x610
3341	 108	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3342	 10A	ADD		 	 
- stack 0: 0x614
3343	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3344	 10C	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x16B0001018A000201A4FFE4008600120151000000A0FFFF00BA000000D40100
3345	 10D	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x16B0001018A000201A4FFE4008600120151000000A0FFFF00BA000000D40100
- stack 0: 0xF0
3346	 10F	SHR		 	 
- stack 1: 0x614
- stack 0: 0x16B
3347	 110	JUMP		 	 
- stack 0: 0x614
3348	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x614
3349	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3350	 16D	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x16B0001018A000201A4FFE4008600120151000000A0FFFF00BA000000D40100
3351	 16E	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x16B0001018A000201A4FFE4008600120151000000A0FFFF00BA000000D40100
- stack 0: 0xE0
3352	 170	SHR		 	 
- stack 1: 0x614
- stack 0: 0x16B0001
3353	 171	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x16B0001
- stack 0: 0xFFFF
3354	 174	AND		 	 
- stack 1: 0x614
- stack 0: 0x1
3355	 175	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x1
3356	 177	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x1
3357	 178	PUSH2	0080	 	 
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x80
3358	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x1
3359	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x614
- stack 0: 0x2
3360	 17D	PUSH2	0080	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0x80
3361	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x614
3362	 181	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3363	 183	ADD		 	 
- stack 0: 0x618
3364	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3365	 185	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x18A000201A4FFE4008600120151000000A0FFFF00BA000000D40100016B0001
3366	 186	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x18A000201A4FFE4008600120151000000A0FFFF00BA000000D40100016B0001
- stack 0: 0xF0
3367	 188	SHR		 	 
- stack 1: 0x618
- stack 0: 0x18A
3368	 189	JUMP		 	 
- stack 0: 0x618
3369	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x618
3370	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3371	 18C	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x18A000201A4FFE4008600120151000000A0FFFF00BA000000D40100016B0001
3372	 18D	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x18A000201A4FFE4008600120151000000A0FFFF00BA000000D40100016B0001
- stack 0: 0xE0
3373	 18F	SHR		 	 
- stack 1: 0x618
- stack 0: 0x18A0002
3374	 190	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x18A0002
- stack 0: 0xFFFF
3375	 193	AND		 	 
- stack 1: 0x618
- stack 0: 0x2
3376	 194	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0x1
3377	 196	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x2
3378	 197	PUSH2	00A0	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0xA0
3379	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x618
3380	 19B	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3381	 19D	ADD		 	 
- stack 0: 0x61C
3382	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3383	 19F	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x1A4FFE4008600120151000000A0FFFF00BA000000D40100016B0001018A0002
3384	 1A0	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x1A4FFE4008600120151000000A0FFFF00BA000000D40100016B0001018A0002
- stack 0: 0xF0
3385	 1A2	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x1A4
3386	 1A3	JUMP		 	 
- stack 0: 0x61C
3387	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x61C
3388	 1A5	PUSH2	0080	 	 
- stack 1: 0x61C
- stack 0: 0x80
3389	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x61C
- stack 0: 0x2
3390	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3391	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x61C
- stack 0: 0x2
3392	 1AF	PUSH2	00A0	 	 
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0xA0
3393	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0x2
3394	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x61C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3395	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0x2
3396	 1B9	SUB		 	 
- stack 1: 0x61C
- stack 0: 0x0
3397	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0x1C2
3398	 1BD	JUMPI		 	 
- stack 0: 0x61C
3399	 1BE	PUSH2	01DC	 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 1: 0x61C
- stack 0: 0x1DC
3400	 1C1	JUMP		 	 
- stack 0: 0x61C
3401	 1DC	JUMPDEST		 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x61C
3402	 1DD	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3403	 1DF	ADD		 	 
- stack 0: 0x620
3404	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3405	 1E1	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x8600120151000000A0FFFF00BA000000D40100016B0001018A000201A4FFEC
3406	 1E2	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x8600120151000000A0FFFF00BA000000D40100016B0001018A000201A4FFEC
- stack 0: 0xF0
3407	 1E4	SHR		 	 
- stack 1: 0x620
- stack 0: 0x86
3408	 1E5	JUMP		 	 
- stack 0: 0x620
3409	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x620
3410	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3411	 88	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x8600120151000000A0FFFF00BA000000D40100016B0001018A000201A4FFEC
3412	 89	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x8600120151000000A0FFFF00BA000000D40100016B0001018A000201A4FFEC
- stack 0: 0xE0
3413	 8B	SHR		 	 
- stack 1: 0x620
- stack 0: 0x860012
3414	 8C	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x860012
- stack 0: 0xFFFF
3415	 8F	AND		 	 
- stack 1: 0x620
- stack 0: 0x12
3416	 90	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x12
- stack 0: 0x1
3417	 92	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x12
3418	 93	PUSH2	0380	 	 
- stack 2: 0x620
- stack 1: 0x12
- stack 0: 0x380
3419	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x620
3420	 97	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3421	 99	ADD		 	 
- stack 0: 0x624
3422	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3423	 9B	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x151000000A0FFFF00BA000000D40100016B0001018A000201A4FFEC00860013
3424	 9C	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x151000000A0FFFF00BA000000D40100016B0001018A000201A4FFEC00860013
- stack 0: 0xF0
3425	 9E	SHR		 	 
- stack 1: 0x624
- stack 0: 0x151
3426	 9F	JUMP		 	 
- stack 0: 0x624
3427	 151	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x624
3428	 152	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3429	 153	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x151000000A0FFFF00BA000000D40100016B0001018A000201A4FFEC00860013
3430	 154	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x151000000A0FFFF00BA000000D40100016B0001018A000201A4FFEC00860013
- stack 0: 0xE0
3431	 156	SHR		 	 
- stack 1: 0x624
- stack 0: 0x1510000
3432	 157	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x1510000
- stack 0: 0xFFFF
3433	 15A	AND		 	 
- stack 1: 0x624
- stack 0: 0x0
3434	 15B	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x1
3435	 15D	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x0
3436	 15E	PUSH2	0080	 	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x80
3437	 161	MSTORE		 	  ;; # store to x4
- stack 0: 0x624
3438	 162	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3439	 164	ADD		 	 
- stack 0: 0x628
3440	 165	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3441	 166	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xA0FFFF00BA000000D40100016B0001018A000201A4FFEC0086001301510000
3442	 167	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0xA0FFFF00BA000000D40100016B0001018A000201A4FFEC0086001301510000
- stack 0: 0xF0
3443	 169	SHR		 	 
- stack 1: 0x628
- stack 0: 0xA0
3444	 16A	JUMP		 	 
- stack 0: 0x628
3445	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x628
3446	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3447	 A2	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xA0FFFF00BA000000D40100016B0001018A000201A4FFEC0086001301510000
3448	 A3	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0xA0FFFF00BA000000D40100016B0001018A000201A4FFEC0086001301510000
- stack 0: 0xE0
3449	 A5	SHR		 	 
- stack 1: 0x628
- stack 0: 0xA0FFFF
3450	 A6	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
3451	 A9	AND		 	 
- stack 1: 0x628
- stack 0: 0xFFFF
3452	 AA	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0xFFFF
- stack 0: 0x1
3453	 AC	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3454	 AD	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3455	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x628
3456	 B1	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3457	 B3	ADD		 	 
- stack 0: 0x62C
3458	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3459	 B5	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xBA000000D40100016B0001018A000201A4FFEC008600130151000000A0FFFF
3460	 B6	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0xBA000000D40100016B0001018A000201A4FFEC008600130151000000A0FFFF
- stack 0: 0xF0
3461	 B8	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xBA
3462	 B9	JUMP		 	 
- stack 0: 0x62C
3463	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x62C
3464	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3465	 BC	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xBA000000D40100016B0001018A000201A4FFEC008600130151000000A0FFFF
3466	 BD	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0xBA000000D40100016B0001018A000201A4FFEC008600130151000000A0FFFF
- stack 0: 0xE0
3467	 BF	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xBA0000
3468	 C0	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0xBA0000
- stack 0: 0xFFFF
3469	 C3	AND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3470	 C4	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x1
3471	 C6	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3472	 C7	PUSH2	0040	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x40
3473	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x62C
3474	 CB	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3475	 CD	ADD		 	 
- stack 0: 0x630
3476	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3477	 CF	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xD40100016B0001018A000201A4FFEC008600130151000000A0FFFF00BA0000
3478	 D0	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0xD40100016B0001018A000201A4FFEC008600130151000000A0FFFF00BA0000
- stack 0: 0xF0
3479	 D2	SHR		 	 
- stack 1: 0x630
- stack 0: 0xD4
3480	 D3	JUMP		 	 
- stack 0: 0x630
3481	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x630
3482	 D5	PUSH2	0040	 	 
- stack 1: 0x630
- stack 0: 0x40
3483	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x630
- stack 0: 0x0
3484	 D9	PUSH1	03	 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x3
3485	 DB	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x0
3486	 DC	PUSH2	0020	 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x20
3487	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3488	 E0	PUSH1	03	 	 
- stack 3: 0x630
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
3489	 E2	SIGNEXTEND		 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3490	 E3	SLT		 	  ;; # bge
- stack 1: 0x630
- stack 0: 0x1
3491	 E4	ISZERO		 	 
- stack 1: 0x630
- stack 0: 0x0
3492	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0xED
3493	 E8	JUMPI		 	 
- stack 0: 0x630
3494	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x630
- stack 0: 0x107
3495	 EC	JUMP		 	 
- stack 0: 0x630
3496	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x630
3497	 108	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3498	 10A	ADD		 	 
- stack 0: 0x634
3499	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3500	 10C	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x16B0001018A000201A4FFEC008600130151000000A0FFFF00BA000001E60000
3501	 10D	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x16B0001018A000201A4FFEC008600130151000000A0FFFF00BA000001E60000
- stack 0: 0xF0
3502	 10F	SHR		 	 
- stack 1: 0x634
- stack 0: 0x16B
3503	 110	JUMP		 	 
- stack 0: 0x634
3504	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x634
3505	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3506	 16D	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x16B0001018A000201A4FFEC008600130151000000A0FFFF00BA000001E60000
3507	 16E	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x16B0001018A000201A4FFEC008600130151000000A0FFFF00BA000001E60000
- stack 0: 0xE0
3508	 170	SHR		 	 
- stack 1: 0x634
- stack 0: 0x16B0001
3509	 171	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x16B0001
- stack 0: 0xFFFF
3510	 174	AND		 	 
- stack 1: 0x634
- stack 0: 0x1
3511	 175	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x1
3512	 177	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x1
3513	 178	PUSH2	0080	 	 
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x80
3514	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x0
3515	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x634
- stack 0: 0x1
3516	 17D	PUSH2	0080	 	 
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x80
3517	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x634
3518	 181	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3519	 183	ADD		 	 
- stack 0: 0x638
3520	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3521	 185	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x18A000201A4FFEC008600130151000000A0FFFF00BA000001E6000000D400DC
3522	 186	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x18A000201A4FFEC008600130151000000A0FFFF00BA000001E6000000D400DC
- stack 0: 0xF0
3523	 188	SHR		 	 
- stack 1: 0x638
- stack 0: 0x18A
3524	 189	JUMP		 	 
- stack 0: 0x638
3525	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x638
3526	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3527	 18C	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x18A000201A4FFEC008600130151000000A0FFFF00BA000001E6000000D400DC
3528	 18D	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x18A000201A4FFEC008600130151000000A0FFFF00BA000001E6000000D400DC
- stack 0: 0xE0
3529	 18F	SHR		 	 
- stack 1: 0x638
- stack 0: 0x18A0002
3530	 190	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x18A0002
- stack 0: 0xFFFF
3531	 193	AND		 	 
- stack 1: 0x638
- stack 0: 0x2
3532	 194	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0x1
3533	 196	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x2
3534	 197	PUSH2	00A0	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0xA0
3535	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x638
3536	 19B	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3537	 19D	ADD		 	 
- stack 0: 0x63C
3538	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3539	 19F	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x1A4FFEC008600130151000000A0FFFF00BA000001E6000000D400DC016B0001
3540	 1A0	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x1A4FFEC008600130151000000A0FFFF00BA000001E6000000D400DC016B0001
- stack 0: 0xF0
3541	 1A2	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x1A4
3542	 1A3	JUMP		 	 
- stack 0: 0x63C
3543	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x63C
3544	 1A5	PUSH2	0080	 	 
- stack 1: 0x63C
- stack 0: 0x80
3545	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x63C
- stack 0: 0x1
3546	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x63C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3547	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x63C
- stack 0: 0x1
3548	 1AF	PUSH2	00A0	 	 
- stack 2: 0x63C
- stack 1: 0x1
- stack 0: 0xA0
3549	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x63C
- stack 1: 0x1
- stack 0: 0x2
3550	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x63C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3551	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x63C
- stack 1: 0x1
- stack 0: 0x2
3552	 1B9	SUB		 	 
- stack 1: 0x63C
- stack 0: 0x1
3553	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x63C
- stack 1: 0x1
- stack 0: 0x1C2
3554	 1BD	JUMPI		 	 
- stack 0: 0x63C
3555	 1C2	JUMPDEST		 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x63C
3556	 1C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3557	 1C4	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x1A4FFEC008600130151000000A0FFFF00BA000001E6000000D400DC016B0001
3558	 1C5	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x1A4FFEC008600130151000000A0FFFF00BA000001E6000000D400DC016B0001
- stack 0: 0xE0
3559	 1C7	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x1A4FFEC
3560	 1C8	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x1A4FFEC
- stack 0: 0xFFFF
3561	 1CB	AND		 	 
- stack 1: 0x63C
- stack 0: 0xFFEC
3562	 1CC	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0xFFEC
- stack 0: 0x1
3563	 1CE	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
3564	 1CF	ADD		 	 
- stack 0: 0x628
3565	 1D0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x628
- stack 0: 0xFFFFFFFF
3566	 1D5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x628
3567	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3568	 1D7	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xA0FFFF00BA000000D40100016B0001018A000201A4FFEC0086001301510000
3569	 1D8	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0xA0FFFF00BA000000D40100016B0001018A000201A4FFEC0086001301510000
- stack 0: 0xF0
3570	 1DA	SHR		 	 
- stack 1: 0x628
- stack 0: 0xA0
3571	 1DB	JUMP		 	 
- stack 0: 0x628
3572	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x628
3573	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3574	 A2	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xA0FFFF00BA000000D40100016B0001018A000201A4FFEC0086001301510000
3575	 A3	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0xA0FFFF00BA000000D40100016B0001018A000201A4FFEC0086001301510000
- stack 0: 0xE0
3576	 A5	SHR		 	 
- stack 1: 0x628
- stack 0: 0xA0FFFF
3577	 A6	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
3578	 A9	AND		 	 
- stack 1: 0x628
- stack 0: 0xFFFF
3579	 AA	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0xFFFF
- stack 0: 0x1
3580	 AC	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3581	 AD	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3582	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x628
3583	 B1	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3584	 B3	ADD		 	 
- stack 0: 0x62C
3585	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3586	 B5	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xBA000000D40100016B0001018A000201A4FFEC008600130151000000A0FFFF
3587	 B6	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0xBA000000D40100016B0001018A000201A4FFEC008600130151000000A0FFFF
- stack 0: 0xF0
3588	 B8	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xBA
3589	 B9	JUMP		 	 
- stack 0: 0x62C
3590	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x62C
3591	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3592	 BC	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xBA000000D40100016B0001018A000201A4FFEC008600130151000000A0FFFF
3593	 BD	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0xBA000000D40100016B0001018A000201A4FFEC008600130151000000A0FFFF
- stack 0: 0xE0
3594	 BF	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xBA0000
3595	 C0	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0xBA0000
- stack 0: 0xFFFF
3596	 C3	AND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3597	 C4	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x1
3598	 C6	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3599	 C7	PUSH2	0040	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x40
3600	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x62C
3601	 CB	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3602	 CD	ADD		 	 
- stack 0: 0x630
3603	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3604	 CF	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xD40100016B0001018A000201A4FFEC008600130151000000A0FFFF00BA0000
3605	 D0	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0xD40100016B0001018A000201A4FFEC008600130151000000A0FFFF00BA0000
- stack 0: 0xF0
3606	 D2	SHR		 	 
- stack 1: 0x630
- stack 0: 0xD4
3607	 D3	JUMP		 	 
- stack 0: 0x630
3608	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x630
3609	 D5	PUSH2	0040	 	 
- stack 1: 0x630
- stack 0: 0x40
3610	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x630
- stack 0: 0x0
3611	 D9	PUSH1	03	 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x3
3612	 DB	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x0
3613	 DC	PUSH2	0020	 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x20
3614	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3615	 E0	PUSH1	03	 	 
- stack 3: 0x630
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
3616	 E2	SIGNEXTEND		 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3617	 E3	SLT		 	  ;; # bge
- stack 1: 0x630
- stack 0: 0x1
3618	 E4	ISZERO		 	 
- stack 1: 0x630
- stack 0: 0x0
3619	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0xED
3620	 E8	JUMPI		 	 
- stack 0: 0x630
3621	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x630
- stack 0: 0x107
3622	 EC	JUMP		 	 
- stack 0: 0x630
3623	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x630
3624	 108	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3625	 10A	ADD		 	 
- stack 0: 0x634
3626	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3627	 10C	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x16B0001018A000201A4FFEC008600130151000000A0FFFF00BA000001E60000
3628	 10D	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x16B0001018A000201A4FFEC008600130151000000A0FFFF00BA000001E60000
- stack 0: 0xF0
3629	 10F	SHR		 	 
- stack 1: 0x634
- stack 0: 0x16B
3630	 110	JUMP		 	 
- stack 0: 0x634
3631	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x634
3632	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3633	 16D	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x16B0001018A000201A4FFEC008600130151000000A0FFFF00BA000001E60000
3634	 16E	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x16B0001018A000201A4FFEC008600130151000000A0FFFF00BA000001E60000
- stack 0: 0xE0
3635	 170	SHR		 	 
- stack 1: 0x634
- stack 0: 0x16B0001
3636	 171	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x16B0001
- stack 0: 0xFFFF
3637	 174	AND		 	 
- stack 1: 0x634
- stack 0: 0x1
3638	 175	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x1
3639	 177	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x1
3640	 178	PUSH2	0080	 	 
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x80
3641	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x1
3642	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x634
- stack 0: 0x2
3643	 17D	PUSH2	0080	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x80
3644	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x634
3645	 181	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3646	 183	ADD		 	 
- stack 0: 0x638
3647	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3648	 185	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x18A000201A4FFEC008600130151000000A0FFFF00BA000001E6000000D400DC
3649	 186	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x18A000201A4FFEC008600130151000000A0FFFF00BA000001E6000000D400DC
- stack 0: 0xF0
3650	 188	SHR		 	 
- stack 1: 0x638
- stack 0: 0x18A
3651	 189	JUMP		 	 
- stack 0: 0x638
3652	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x638
3653	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3654	 18C	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x18A000201A4FFEC008600130151000000A0FFFF00BA000001E6000000D400DC
3655	 18D	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x18A000201A4FFEC008600130151000000A0FFFF00BA000001E6000000D400DC
- stack 0: 0xE0
3656	 18F	SHR		 	 
- stack 1: 0x638
- stack 0: 0x18A0002
3657	 190	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x18A0002
- stack 0: 0xFFFF
3658	 193	AND		 	 
- stack 1: 0x638
- stack 0: 0x2
3659	 194	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0x1
3660	 196	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x2
3661	 197	PUSH2	00A0	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0xA0
3662	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x638
3663	 19B	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3664	 19D	ADD		 	 
- stack 0: 0x63C
3665	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3666	 19F	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x1A4FFEC008600130151000000A0FFFF00BA000001E6000000D400DC016B0001
3667	 1A0	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x1A4FFEC008600130151000000A0FFFF00BA000001E6000000D400DC016B0001
- stack 0: 0xF0
3668	 1A2	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x1A4
3669	 1A3	JUMP		 	 
- stack 0: 0x63C
3670	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x63C
3671	 1A5	PUSH2	0080	 	 
- stack 1: 0x63C
- stack 0: 0x80
3672	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x63C
- stack 0: 0x2
3673	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x63C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3674	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x63C
- stack 0: 0x2
3675	 1AF	PUSH2	00A0	 	 
- stack 2: 0x63C
- stack 1: 0x2
- stack 0: 0xA0
3676	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x63C
- stack 1: 0x2
- stack 0: 0x2
3677	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x63C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3678	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x63C
- stack 1: 0x2
- stack 0: 0x2
3679	 1B9	SUB		 	 
- stack 1: 0x63C
- stack 0: 0x0
3680	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x1C2
3681	 1BD	JUMPI		 	 
- stack 0: 0x63C
3682	 1BE	PUSH2	01DC	 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 1: 0x63C
- stack 0: 0x1DC
3683	 1C1	JUMP		 	 
- stack 0: 0x63C
3684	 1DC	JUMPDEST		 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x63C
3685	 1DD	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3686	 1DF	ADD		 	 
- stack 0: 0x640
3687	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3688	 1E1	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x8600130151000000A0FFFF00BA000001E6000000D400DC016B0001018A0002
3689	 1E2	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x8600130151000000A0FFFF00BA000001E6000000D400DC016B0001018A0002
- stack 0: 0xF0
3690	 1E4	SHR		 	 
- stack 1: 0x640
- stack 0: 0x86
3691	 1E5	JUMP		 	 
- stack 0: 0x640
3692	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x640
3693	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3694	 88	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x8600130151000000A0FFFF00BA000001E6000000D400DC016B0001018A0002
3695	 89	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x8600130151000000A0FFFF00BA000001E6000000D400DC016B0001018A0002
- stack 0: 0xE0
3696	 8B	SHR		 	 
- stack 1: 0x640
- stack 0: 0x860013
3697	 8C	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x860013
- stack 0: 0xFFFF
3698	 8F	AND		 	 
- stack 1: 0x640
- stack 0: 0x13
3699	 90	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x13
- stack 0: 0x1
3700	 92	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x13
3701	 93	PUSH2	0380	 	 
- stack 2: 0x640
- stack 1: 0x13
- stack 0: 0x380
3702	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x640
3703	 97	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3704	 99	ADD		 	 
- stack 0: 0x644
3705	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3706	 9B	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x151000000A0FFFF00BA000001E6000000D400DC016B0001018A000201A4FFE8
3707	 9C	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x151000000A0FFFF00BA000001E6000000D400DC016B0001018A000201A4FFE8
- stack 0: 0xF0
3708	 9E	SHR		 	 
- stack 1: 0x644
- stack 0: 0x151
3709	 9F	JUMP		 	 
- stack 0: 0x644
3710	 151	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x644
3711	 152	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3712	 153	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x151000000A0FFFF00BA000001E6000000D400DC016B0001018A000201A4FFE8
3713	 154	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x151000000A0FFFF00BA000001E6000000D400DC016B0001018A000201A4FFE8
- stack 0: 0xE0
3714	 156	SHR		 	 
- stack 1: 0x644
- stack 0: 0x1510000
3715	 157	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x1510000
- stack 0: 0xFFFF
3716	 15A	AND		 	 
- stack 1: 0x644
- stack 0: 0x0
3717	 15B	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x1
3718	 15D	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x0
3719	 15E	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x80
3720	 161	MSTORE		 	  ;; # store to x4
- stack 0: 0x644
3721	 162	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3722	 164	ADD		 	 
- stack 0: 0x648
3723	 165	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3724	 166	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0xA0FFFF00BA000001E6000000D400DC016B0001018A000201A4FFE800860014
3725	 167	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0xA0FFFF00BA000001E6000000D400DC016B0001018A000201A4FFE800860014
- stack 0: 0xF0
3726	 169	SHR		 	 
- stack 1: 0x648
- stack 0: 0xA0
3727	 16A	JUMP		 	 
- stack 0: 0x648
3728	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x648
3729	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3730	 A2	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0xA0FFFF00BA000001E6000000D400DC016B0001018A000201A4FFE800860014
3731	 A3	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0xA0FFFF00BA000001E6000000D400DC016B0001018A000201A4FFE800860014
- stack 0: 0xE0
3732	 A5	SHR		 	 
- stack 1: 0x648
- stack 0: 0xA0FFFF
3733	 A6	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
3734	 A9	AND		 	 
- stack 1: 0x648
- stack 0: 0xFFFF
3735	 AA	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0xFFFF
- stack 0: 0x1
3736	 AC	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3737	 AD	PUSH2	0020	 	 
- stack 2: 0x648
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3738	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x648
3739	 B1	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3740	 B3	ADD		 	 
- stack 0: 0x64C
3741	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3742	 B5	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xBA000001E6000000D400DC016B0001018A000201A4FFE80086001401510000
3743	 B6	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0xBA000001E6000000D400DC016B0001018A000201A4FFE80086001401510000
- stack 0: 0xF0
3744	 B8	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xBA
3745	 B9	JUMP		 	 
- stack 0: 0x64C
3746	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x64C
3747	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3748	 BC	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xBA000001E6000000D400DC016B0001018A000201A4FFE80086001401510000
3749	 BD	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0xBA000001E6000000D400DC016B0001018A000201A4FFE80086001401510000
- stack 0: 0xE0
3750	 BF	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xBA0000
3751	 C0	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0xBA0000
- stack 0: 0xFFFF
3752	 C3	AND		 	 
- stack 1: 0x64C
- stack 0: 0x0
3753	 C4	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x1
3754	 C6	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x0
3755	 C7	PUSH2	0040	 	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x40
3756	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x64C
3757	 CB	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3758	 CD	ADD		 	 
- stack 0: 0x650
3759	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3760	 CF	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x1E6000000D400DC016B0001018A000201A4FFE8008600140151000000A0FFFF
3761	 D0	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x1E6000000D400DC016B0001018A000201A4FFE8008600140151000000A0FFFF
- stack 0: 0xF0
3762	 D2	SHR		 	 
- stack 1: 0x650
- stack 0: 0x1E6
3763	 D3	JUMP		 	 
- stack 0: 0x650
3764	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x650
3765	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3766	 1E8	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x1E6000000D400DC016B0001018A000201A4FFE8008600140151000000A0FFFF
3767	 1E9	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x1E6000000D400DC016B0001018A000201A4FFE8008600140151000000A0FFFF
- stack 0: 0xE0
3768	 1EB	SHR		 	 
- stack 1: 0x650
- stack 0: 0x1E60000
3769	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x1E60000
- stack 0: 0xFFFF
3770	 1EF	AND		 	 
- stack 1: 0x650
- stack 0: 0x0
3771	 1F0	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0x1
3772	 1F2	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x0
3773	 1F3	POP		 	 
- stack 0: 0x650
3774	 1F4	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3775	 1F6	ADD		 	 
- stack 0: 0x654
3776	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3777	 1F8	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0xD400DC016B0001018A000201A4FFE8008600140151000000A0FFFF00BA0000
3778	 1F9	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0xD400DC016B0001018A000201A4FFE8008600140151000000A0FFFF00BA0000
- stack 0: 0xF0
3779	 1FB	SHR		 	 
- stack 1: 0x654
- stack 0: 0xD4
3780	 1FC	JUMP		 	 
- stack 0: 0x654
3781	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x654
3782	 D5	PUSH2	0040	 	 
- stack 1: 0x654
- stack 0: 0x40
3783	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x654
- stack 0: 0x0
3784	 D9	PUSH1	03	 	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0x3
3785	 DB	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x0
3786	 DC	PUSH2	0020	 	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0x20
3787	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3788	 E0	PUSH1	03	 	 
- stack 3: 0x654
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
3789	 E2	SIGNEXTEND		 	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3790	 E3	SLT		 	  ;; # bge
- stack 1: 0x654
- stack 0: 0x1
3791	 E4	ISZERO		 	 
- stack 1: 0x654
- stack 0: 0x0
3792	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0xED
3793	 E8	JUMPI		 	 
- stack 0: 0x654
3794	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x654
- stack 0: 0x107
3795	 EC	JUMP		 	 
- stack 0: 0x654
3796	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x654
3797	 108	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3798	 10A	ADD		 	 
- stack 0: 0x658
3799	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3800	 10C	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x16B0001018A000201A4FFE8008600140151000000A0FFFF00BA000001E60000
3801	 10D	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x16B0001018A000201A4FFE8008600140151000000A0FFFF00BA000001E60000
- stack 0: 0xF0
3802	 10F	SHR		 	 
- stack 1: 0x658
- stack 0: 0x16B
3803	 110	JUMP		 	 
- stack 0: 0x658
3804	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x658
3805	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3806	 16D	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x16B0001018A000201A4FFE8008600140151000000A0FFFF00BA000001E60000
3807	 16E	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x16B0001018A000201A4FFE8008600140151000000A0FFFF00BA000001E60000
- stack 0: 0xE0
3808	 170	SHR		 	 
- stack 1: 0x658
- stack 0: 0x16B0001
3809	 171	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x16B0001
- stack 0: 0xFFFF
3810	 174	AND		 	 
- stack 1: 0x658
- stack 0: 0x1
3811	 175	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x1
3812	 177	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x1
3813	 178	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x80
3814	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x0
3815	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x658
- stack 0: 0x1
3816	 17D	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x80
3817	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x658
3818	 181	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3819	 183	ADD		 	 
- stack 0: 0x65C
3820	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3821	 185	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x18A000201A4FFE8008600140151000000A0FFFF00BA000001E6000001E60000
3822	 186	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x18A000201A4FFE8008600140151000000A0FFFF00BA000001E6000001E60000
- stack 0: 0xF0
3823	 188	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x18A
3824	 189	JUMP		 	 
- stack 0: 0x65C
3825	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x65C
3826	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3827	 18C	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x18A000201A4FFE8008600140151000000A0FFFF00BA000001E6000001E60000
3828	 18D	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x18A000201A4FFE8008600140151000000A0FFFF00BA000001E6000001E60000
- stack 0: 0xE0
3829	 18F	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x18A0002
3830	 190	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x18A0002
- stack 0: 0xFFFF
3831	 193	AND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3832	 194	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0x1
3833	 196	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3834	 197	PUSH2	00A0	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0xA0
3835	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x65C
3836	 19B	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3837	 19D	ADD		 	 
- stack 0: 0x660
3838	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3839	 19F	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x1A4FFE8008600140151000000A0FFFF00BA000001E6000001E6000000D400B4
3840	 1A0	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x1A4FFE8008600140151000000A0FFFF00BA000001E6000001E6000000D400B4
- stack 0: 0xF0
3841	 1A2	SHR		 	 
- stack 1: 0x660
- stack 0: 0x1A4
3842	 1A3	JUMP		 	 
- stack 0: 0x660
3843	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x660
3844	 1A5	PUSH2	0080	 	 
- stack 1: 0x660
- stack 0: 0x80
3845	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x660
- stack 0: 0x1
3846	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3847	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x660
- stack 0: 0x1
3848	 1AF	PUSH2	00A0	 	 
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0xA0
3849	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0x2
3850	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x660
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3851	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0x2
3852	 1B9	SUB		 	 
- stack 1: 0x660
- stack 0: 0x1
3853	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0x1C2
3854	 1BD	JUMPI		 	 
- stack 0: 0x660
3855	 1C2	JUMPDEST		 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x660
3856	 1C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
3857	 1C4	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x1A4FFE8008600140151000000A0FFFF00BA000001E6000001E6000000D400B4
3858	 1C5	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x1A4FFE8008600140151000000A0FFFF00BA000001E6000001E6000000D400B4
- stack 0: 0xE0
3859	 1C7	SHR		 	 
- stack 1: 0x660
- stack 0: 0x1A4FFE8
3860	 1C8	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x1A4FFE8
- stack 0: 0xFFFF
3861	 1CB	AND		 	 
- stack 1: 0x660
- stack 0: 0xFFE8
3862	 1CC	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0xFFE8
- stack 0: 0x1
3863	 1CE	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
3864	 1CF	ADD		 	 
- stack 0: 0x648
3865	 1D0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x648
- stack 0: 0xFFFFFFFF
3866	 1D5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x648
3867	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3868	 1D7	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0xA0FFFF00BA000001E6000000D400DC016B0001018A000201A4FFE800860014
3869	 1D8	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0xA0FFFF00BA000001E6000000D400DC016B0001018A000201A4FFE800860014
- stack 0: 0xF0
3870	 1DA	SHR		 	 
- stack 1: 0x648
- stack 0: 0xA0
3871	 1DB	JUMP		 	 
- stack 0: 0x648
3872	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x648
3873	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3874	 A2	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0xA0FFFF00BA000001E6000000D400DC016B0001018A000201A4FFE800860014
3875	 A3	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0xA0FFFF00BA000001E6000000D400DC016B0001018A000201A4FFE800860014
- stack 0: 0xE0
3876	 A5	SHR		 	 
- stack 1: 0x648
- stack 0: 0xA0FFFF
3877	 A6	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
3878	 A9	AND		 	 
- stack 1: 0x648
- stack 0: 0xFFFF
3879	 AA	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0xFFFF
- stack 0: 0x1
3880	 AC	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3881	 AD	PUSH2	0020	 	 
- stack 2: 0x648
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3882	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x648
3883	 B1	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3884	 B3	ADD		 	 
- stack 0: 0x64C
3885	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3886	 B5	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xBA000001E6000000D400DC016B0001018A000201A4FFE80086001401510000
3887	 B6	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0xBA000001E6000000D400DC016B0001018A000201A4FFE80086001401510000
- stack 0: 0xF0
3888	 B8	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xBA
3889	 B9	JUMP		 	 
- stack 0: 0x64C
3890	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x64C
3891	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3892	 BC	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xBA000001E6000000D400DC016B0001018A000201A4FFE80086001401510000
3893	 BD	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0xBA000001E6000000D400DC016B0001018A000201A4FFE80086001401510000
- stack 0: 0xE0
3894	 BF	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xBA0000
3895	 C0	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0xBA0000
- stack 0: 0xFFFF
3896	 C3	AND		 	 
- stack 1: 0x64C
- stack 0: 0x0
3897	 C4	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x1
3898	 C6	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x0
3899	 C7	PUSH2	0040	 	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x40
3900	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x64C
3901	 CB	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3902	 CD	ADD		 	 
- stack 0: 0x650
3903	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3904	 CF	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x1E6000000D400DC016B0001018A000201A4FFE8008600140151000000A0FFFF
3905	 D0	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x1E6000000D400DC016B0001018A000201A4FFE8008600140151000000A0FFFF
- stack 0: 0xF0
3906	 D2	SHR		 	 
- stack 1: 0x650
- stack 0: 0x1E6
3907	 D3	JUMP		 	 
- stack 0: 0x650
3908	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x650
3909	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3910	 1E8	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x1E6000000D400DC016B0001018A000201A4FFE8008600140151000000A0FFFF
3911	 1E9	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x1E6000000D400DC016B0001018A000201A4FFE8008600140151000000A0FFFF
- stack 0: 0xE0
3912	 1EB	SHR		 	 
- stack 1: 0x650
- stack 0: 0x1E60000
3913	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x1E60000
- stack 0: 0xFFFF
3914	 1EF	AND		 	 
- stack 1: 0x650
- stack 0: 0x0
3915	 1F0	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0x1
3916	 1F2	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x0
3917	 1F3	POP		 	 
- stack 0: 0x650
3918	 1F4	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3919	 1F6	ADD		 	 
- stack 0: 0x654
3920	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3921	 1F8	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0xD400DC016B0001018A000201A4FFE8008600140151000000A0FFFF00BA0000
3922	 1F9	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0xD400DC016B0001018A000201A4FFE8008600140151000000A0FFFF00BA0000
- stack 0: 0xF0
3923	 1FB	SHR		 	 
- stack 1: 0x654
- stack 0: 0xD4
3924	 1FC	JUMP		 	 
- stack 0: 0x654
3925	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x654
3926	 D5	PUSH2	0040	 	 
- stack 1: 0x654
- stack 0: 0x40
3927	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x654
- stack 0: 0x0
3928	 D9	PUSH1	03	 	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0x3
3929	 DB	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x0
3930	 DC	PUSH2	0020	 	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0x20
3931	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3932	 E0	PUSH1	03	 	 
- stack 3: 0x654
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
3933	 E2	SIGNEXTEND		 	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3934	 E3	SLT		 	  ;; # bge
- stack 1: 0x654
- stack 0: 0x1
3935	 E4	ISZERO		 	 
- stack 1: 0x654
- stack 0: 0x0
3936	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0xED
3937	 E8	JUMPI		 	 
- stack 0: 0x654
3938	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x654
- stack 0: 0x107
3939	 EC	JUMP		 	 
- stack 0: 0x654
3940	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x654
3941	 108	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3942	 10A	ADD		 	 
- stack 0: 0x658
3943	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3944	 10C	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x16B0001018A000201A4FFE8008600140151000000A0FFFF00BA000001E60000
3945	 10D	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x16B0001018A000201A4FFE8008600140151000000A0FFFF00BA000001E60000
- stack 0: 0xF0
3946	 10F	SHR		 	 
- stack 1: 0x658
- stack 0: 0x16B
3947	 110	JUMP		 	 
- stack 0: 0x658
3948	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x658
3949	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3950	 16D	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x16B0001018A000201A4FFE8008600140151000000A0FFFF00BA000001E60000
3951	 16E	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x16B0001018A000201A4FFE8008600140151000000A0FFFF00BA000001E60000
- stack 0: 0xE0
3952	 170	SHR		 	 
- stack 1: 0x658
- stack 0: 0x16B0001
3953	 171	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x16B0001
- stack 0: 0xFFFF
3954	 174	AND		 	 
- stack 1: 0x658
- stack 0: 0x1
3955	 175	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x1
3956	 177	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x1
3957	 178	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x80
3958	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x1
3959	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x658
- stack 0: 0x2
3960	 17D	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0x80
3961	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x658
3962	 181	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3963	 183	ADD		 	 
- stack 0: 0x65C
3964	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3965	 185	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x18A000201A4FFE8008600140151000000A0FFFF00BA000001E6000001E60000
3966	 186	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x18A000201A4FFE8008600140151000000A0FFFF00BA000001E6000001E60000
- stack 0: 0xF0
3967	 188	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x18A
3968	 189	JUMP		 	 
- stack 0: 0x65C
3969	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x65C
3970	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3971	 18C	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x18A000201A4FFE8008600140151000000A0FFFF00BA000001E6000001E60000
3972	 18D	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x18A000201A4FFE8008600140151000000A0FFFF00BA000001E6000001E60000
- stack 0: 0xE0
3973	 18F	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x18A0002
3974	 190	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x18A0002
- stack 0: 0xFFFF
3975	 193	AND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3976	 194	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0x1
3977	 196	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3978	 197	PUSH2	00A0	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0xA0
3979	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x65C
3980	 19B	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3981	 19D	ADD		 	 
- stack 0: 0x660
3982	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3983	 19F	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x1A4FFE8008600140151000000A0FFFF00BA000001E6000001E6000000D400B4
3984	 1A0	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x1A4FFE8008600140151000000A0FFFF00BA000001E6000001E6000000D400B4
- stack 0: 0xF0
3985	 1A2	SHR		 	 
- stack 1: 0x660
- stack 0: 0x1A4
3986	 1A3	JUMP		 	 
- stack 0: 0x660
3987	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x660
3988	 1A5	PUSH2	0080	 	 
- stack 1: 0x660
- stack 0: 0x80
3989	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x660
- stack 0: 0x2
3990	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3991	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x660
- stack 0: 0x2
3992	 1AF	PUSH2	00A0	 	 
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0xA0
3993	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0x2
3994	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x660
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3995	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0x2
3996	 1B9	SUB		 	 
- stack 1: 0x660
- stack 0: 0x0
3997	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x1C2
3998	 1BD	JUMPI		 	 
- stack 0: 0x660
3999	 1BE	PUSH2	01DC	 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 1: 0x660
- stack 0: 0x1DC
4000	 1C1	JUMP		 	 
- stack 0: 0x660
4001	 1DC	JUMPDEST		 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x660
4002	 1DD	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
4003	 1DF	ADD		 	 
- stack 0: 0x664
4004	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
4005	 1E1	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x8600140151000000A0FFFF00BA000001E6000001E6000000D400B4016B0001
4006	 1E2	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x8600140151000000A0FFFF00BA000001E6000001E6000000D400B4016B0001
- stack 0: 0xF0
4007	 1E4	SHR		 	 
- stack 1: 0x664
- stack 0: 0x86
4008	 1E5	JUMP		 	 
- stack 0: 0x664
4009	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x664
4010	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
4011	 88	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x8600140151000000A0FFFF00BA000001E6000001E6000000D400B4016B0001
4012	 89	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x8600140151000000A0FFFF00BA000001E6000001E6000000D400B4016B0001
- stack 0: 0xE0
4013	 8B	SHR		 	 
- stack 1: 0x664
- stack 0: 0x860014
4014	 8C	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x860014
- stack 0: 0xFFFF
4015	 8F	AND		 	 
- stack 1: 0x664
- stack 0: 0x14
4016	 90	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x14
- stack 0: 0x1
4017	 92	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x14
4018	 93	PUSH2	0380	 	 
- stack 2: 0x664
- stack 1: 0x14
- stack 0: 0x380
4019	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x664
4020	 97	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
4021	 99	ADD		 	 
- stack 0: 0x668
4022	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
4023	 9B	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x151000000A0FFFF00BA000001E6000001E6000000D400B4016B0001018A0002
4024	 9C	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x151000000A0FFFF00BA000001E6000001E6000000D400B4016B0001018A0002
- stack 0: 0xF0
4025	 9E	SHR		 	 
- stack 1: 0x668
- stack 0: 0x151
4026	 9F	JUMP		 	 
- stack 0: 0x668
4027	 151	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x668
4028	 152	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
4029	 153	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x151000000A0FFFF00BA000001E6000001E6000000D400B4016B0001018A0002
4030	 154	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x151000000A0FFFF00BA000001E6000001E6000000D400B4016B0001018A0002
- stack 0: 0xE0
4031	 156	SHR		 	 
- stack 1: 0x668
- stack 0: 0x1510000
4032	 157	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x1510000
- stack 0: 0xFFFF
4033	 15A	AND		 	 
- stack 1: 0x668
- stack 0: 0x0
4034	 15B	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x1
4035	 15D	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0x0
4036	 15E	PUSH2	0080	 	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x80
4037	 161	MSTORE		 	  ;; # store to x4
- stack 0: 0x668
4038	 162	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
4039	 164	ADD		 	 
- stack 0: 0x66C
4040	 165	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4041	 166	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xA0FFFF00BA000001E6000001E6000000D400B4016B0001018A000201A4FFE4
4042	 167	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xA0FFFF00BA000001E6000001E6000000D400B4016B0001018A000201A4FFE4
- stack 0: 0xF0
4043	 169	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xA0
4044	 16A	JUMP		 	 
- stack 0: 0x66C
4045	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x66C
4046	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
4047	 A2	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xA0FFFF00BA000001E6000001E6000000D400B4016B0001018A000201A4FFE4
4048	 A3	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0xA0FFFF00BA000001E6000001E6000000D400B4016B0001018A000201A4FFE4
- stack 0: 0xE0
4049	 A5	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xA0FFFF
4050	 A6	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
4051	 A9	AND		 	 
- stack 1: 0x66C
- stack 0: 0xFFFF
4052	 AA	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0xFFFF
- stack 0: 0x1
4053	 AC	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4054	 AD	PUSH2	0020	 	 
- stack 2: 0x66C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4055	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x66C
4056	 B1	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4057	 B3	ADD		 	 
- stack 0: 0x670
4058	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4059	 B5	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xBA000001E6000001E6000000D400B4016B0001018A000201A4FFE400860015
4060	 B6	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0xBA000001E6000001E6000000D400B4016B0001018A000201A4FFE400860015
- stack 0: 0xF0
4061	 B8	SHR		 	 
- stack 1: 0x670
- stack 0: 0xBA
4062	 B9	JUMP		 	 
- stack 0: 0x670
4063	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x670
4064	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4065	 BC	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xBA000001E6000001E6000000D400B4016B0001018A000201A4FFE400860015
4066	 BD	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0xBA000001E6000001E6000000D400B4016B0001018A000201A4FFE400860015
- stack 0: 0xE0
4067	 BF	SHR		 	 
- stack 1: 0x670
- stack 0: 0xBA0000
4068	 C0	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0xBA0000
- stack 0: 0xFFFF
4069	 C3	AND		 	 
- stack 1: 0x670
- stack 0: 0x0
4070	 C4	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x0
- stack 0: 0x1
4071	 C6	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x0
4072	 C7	PUSH2	0040	 	 
- stack 2: 0x670
- stack 1: 0x0
- stack 0: 0x40
4073	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x670
4074	 CB	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4075	 CD	ADD		 	 
- stack 0: 0x674
4076	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4077	 CF	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x1E6000001E6000000D400B4016B0001018A000201A4FFE40086001501510000
4078	 D0	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x1E6000001E6000000D400B4016B0001018A000201A4FFE40086001501510000
- stack 0: 0xF0
4079	 D2	SHR		 	 
- stack 1: 0x674
- stack 0: 0x1E6
4080	 D3	JUMP		 	 
- stack 0: 0x674
4081	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x674
4082	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
4083	 1E8	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x1E6000001E6000000D400B4016B0001018A000201A4FFE40086001501510000
4084	 1E9	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x1E6000001E6000000D400B4016B0001018A000201A4FFE40086001501510000
- stack 0: 0xE0
4085	 1EB	SHR		 	 
- stack 1: 0x674
- stack 0: 0x1E60000
4086	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x1E60000
- stack 0: 0xFFFF
4087	 1EF	AND		 	 
- stack 1: 0x674
- stack 0: 0x0
4088	 1F0	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x1
4089	 1F2	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x0
4090	 1F3	POP		 	 
- stack 0: 0x674
4091	 1F4	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4092	 1F6	ADD		 	 
- stack 0: 0x678
4093	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4094	 1F8	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x1E6000000D400B4016B0001018A000201A4FFE4008600150151000000A0FFFF
4095	 1F9	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x1E6000000D400B4016B0001018A000201A4FFE4008600150151000000A0FFFF
- stack 0: 0xF0
4096	 1FB	SHR		 	 
- stack 1: 0x678
- stack 0: 0x1E6
4097	 1FC	JUMP		 	 
- stack 0: 0x678
4098	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x678
4099	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
4100	 1E8	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x1E6000000D400B4016B0001018A000201A4FFE4008600150151000000A0FFFF
4101	 1E9	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x1E6000000D400B4016B0001018A000201A4FFE4008600150151000000A0FFFF
- stack 0: 0xE0
4102	 1EB	SHR		 	 
- stack 1: 0x678
- stack 0: 0x1E60000
4103	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x1E60000
- stack 0: 0xFFFF
4104	 1EF	AND		 	 
- stack 1: 0x678
- stack 0: 0x0
4105	 1F0	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0x1
4106	 1F2	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x0
4107	 1F3	POP		 	 
- stack 0: 0x678
4108	 1F4	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
4109	 1F6	ADD		 	 
- stack 0: 0x67C
4110	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
4111	 1F8	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0xD400B4016B0001018A000201A4FFE4008600150151000000A0FFFF01E60000
4112	 1F9	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0xD400B4016B0001018A000201A4FFE4008600150151000000A0FFFF01E60000
- stack 0: 0xF0
4113	 1FB	SHR		 	 
- stack 1: 0x67C
- stack 0: 0xD4
4114	 1FC	JUMP		 	 
- stack 0: 0x67C
4115	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x67C
4116	 D5	PUSH2	0040	 	 
- stack 1: 0x67C
- stack 0: 0x40
4117	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x67C
- stack 0: 0x0
4118	 D9	PUSH1	03	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x3
4119	 DB	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x0
4120	 DC	PUSH2	0020	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x20
4121	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4122	 E0	PUSH1	03	 	 
- stack 3: 0x67C
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
4123	 E2	SIGNEXTEND		 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4124	 E3	SLT		 	  ;; # bge
- stack 1: 0x67C
- stack 0: 0x1
4125	 E4	ISZERO		 	 
- stack 1: 0x67C
- stack 0: 0x0
4126	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0xED
4127	 E8	JUMPI		 	 
- stack 0: 0x67C
4128	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x67C
- stack 0: 0x107
4129	 EC	JUMP		 	 
- stack 0: 0x67C
4130	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x67C
4131	 108	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4132	 10A	ADD		 	 
- stack 0: 0x680
4133	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4134	 10C	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x16B0001018A000201A4FFE4008600150151000000A0FFFF01E6000000BA0000
4135	 10D	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x16B0001018A000201A4FFE4008600150151000000A0FFFF01E6000000BA0000
- stack 0: 0xF0
4136	 10F	SHR		 	 
- stack 1: 0x680
- stack 0: 0x16B
4137	 110	JUMP		 	 
- stack 0: 0x680
4138	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x680
4139	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
4140	 16D	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x16B0001018A000201A4FFE4008600150151000000A0FFFF01E6000000BA0000
4141	 16E	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x16B0001018A000201A4FFE4008600150151000000A0FFFF01E6000000BA0000
- stack 0: 0xE0
4142	 170	SHR		 	 
- stack 1: 0x680
- stack 0: 0x16B0001
4143	 171	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x16B0001
- stack 0: 0xFFFF
4144	 174	AND		 	 
- stack 1: 0x680
- stack 0: 0x1
4145	 175	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x1
4146	 177	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x1
4147	 178	PUSH2	0080	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x80
4148	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x0
4149	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x680
- stack 0: 0x1
4150	 17D	PUSH2	0080	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x80
4151	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x680
4152	 181	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4153	 183	ADD		 	 
- stack 0: 0x684
4154	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4155	 185	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x18A000201A4FFE4008600150151000000A0FFFF01E6000000BA000000D40090
4156	 186	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x18A000201A4FFE4008600150151000000A0FFFF01E6000000BA000000D40090
- stack 0: 0xF0
4157	 188	SHR		 	 
- stack 1: 0x684
- stack 0: 0x18A
4158	 189	JUMP		 	 
- stack 0: 0x684
4159	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x684
4160	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
4161	 18C	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x18A000201A4FFE4008600150151000000A0FFFF01E6000000BA000000D40090
4162	 18D	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x18A000201A4FFE4008600150151000000A0FFFF01E6000000BA000000D40090
- stack 0: 0xE0
4163	 18F	SHR		 	 
- stack 1: 0x684
- stack 0: 0x18A0002
4164	 190	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x18A0002
- stack 0: 0xFFFF
4165	 193	AND		 	 
- stack 1: 0x684
- stack 0: 0x2
4166	 194	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0x1
4167	 196	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x2
4168	 197	PUSH2	00A0	 	 
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0xA0
4169	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x684
4170	 19B	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4171	 19D	ADD		 	 
- stack 0: 0x688
4172	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4173	 19F	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1A4FFE4008600150151000000A0FFFF01E6000000BA000000D40090016B0001
4174	 1A0	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x1A4FFE4008600150151000000A0FFFF01E6000000BA000000D40090016B0001
- stack 0: 0xF0
4175	 1A2	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1A4
4176	 1A3	JUMP		 	 
- stack 0: 0x688
4177	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x688
4178	 1A5	PUSH2	0080	 	 
- stack 1: 0x688
- stack 0: 0x80
4179	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x688
- stack 0: 0x1
4180	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4181	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x688
- stack 0: 0x1
4182	 1AF	PUSH2	00A0	 	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0xA0
4183	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x2
4184	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x688
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4185	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x2
4186	 1B9	SUB		 	 
- stack 1: 0x688
- stack 0: 0x1
4187	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x1C2
4188	 1BD	JUMPI		 	 
- stack 0: 0x688
4189	 1C2	JUMPDEST		 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x688
4190	 1C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4191	 1C4	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1A4FFE4008600150151000000A0FFFF01E6000000BA000000D40090016B0001
4192	 1C5	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x1A4FFE4008600150151000000A0FFFF01E6000000BA000000D40090016B0001
- stack 0: 0xE0
4193	 1C7	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1A4FFE4
4194	 1C8	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x1A4FFE4
- stack 0: 0xFFFF
4195	 1CB	AND		 	 
- stack 1: 0x688
- stack 0: 0xFFE4
4196	 1CC	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0xFFE4
- stack 0: 0x1
4197	 1CE	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4198	 1CF	ADD		 	 
- stack 0: 0x66C
4199	 1D0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x66C
- stack 0: 0xFFFFFFFF
4200	 1D5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x66C
4201	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4202	 1D7	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xA0FFFF00BA000001E6000001E6000000D400B4016B0001018A000201A4FFE4
4203	 1D8	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xA0FFFF00BA000001E6000001E6000000D400B4016B0001018A000201A4FFE4
- stack 0: 0xF0
4204	 1DA	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xA0
4205	 1DB	JUMP		 	 
- stack 0: 0x66C
4206	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x66C
4207	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
4208	 A2	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xA0FFFF00BA000001E6000001E6000000D400B4016B0001018A000201A4FFE4
4209	 A3	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0xA0FFFF00BA000001E6000001E6000000D400B4016B0001018A000201A4FFE4
- stack 0: 0xE0
4210	 A5	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xA0FFFF
4211	 A6	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
4212	 A9	AND		 	 
- stack 1: 0x66C
- stack 0: 0xFFFF
4213	 AA	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0xFFFF
- stack 0: 0x1
4214	 AC	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4215	 AD	PUSH2	0020	 	 
- stack 2: 0x66C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4216	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x66C
4217	 B1	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4218	 B3	ADD		 	 
- stack 0: 0x670
4219	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4220	 B5	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xBA000001E6000001E6000000D400B4016B0001018A000201A4FFE400860015
4221	 B6	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0xBA000001E6000001E6000000D400B4016B0001018A000201A4FFE400860015
- stack 0: 0xF0
4222	 B8	SHR		 	 
- stack 1: 0x670
- stack 0: 0xBA
4223	 B9	JUMP		 	 
- stack 0: 0x670
4224	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x670
4225	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4226	 BC	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xBA000001E6000001E6000000D400B4016B0001018A000201A4FFE400860015
4227	 BD	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0xBA000001E6000001E6000000D400B4016B0001018A000201A4FFE400860015
- stack 0: 0xE0
4228	 BF	SHR		 	 
- stack 1: 0x670
- stack 0: 0xBA0000
4229	 C0	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0xBA0000
- stack 0: 0xFFFF
4230	 C3	AND		 	 
- stack 1: 0x670
- stack 0: 0x0
4231	 C4	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x0
- stack 0: 0x1
4232	 C6	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x0
4233	 C7	PUSH2	0040	 	 
- stack 2: 0x670
- stack 1: 0x0
- stack 0: 0x40
4234	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x670
4235	 CB	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4236	 CD	ADD		 	 
- stack 0: 0x674
4237	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4238	 CF	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x1E6000001E6000000D400B4016B0001018A000201A4FFE40086001501510000
4239	 D0	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x1E6000001E6000000D400B4016B0001018A000201A4FFE40086001501510000
- stack 0: 0xF0
4240	 D2	SHR		 	 
- stack 1: 0x674
- stack 0: 0x1E6
4241	 D3	JUMP		 	 
- stack 0: 0x674
4242	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x674
4243	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
4244	 1E8	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x1E6000001E6000000D400B4016B0001018A000201A4FFE40086001501510000
4245	 1E9	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x1E6000001E6000000D400B4016B0001018A000201A4FFE40086001501510000
- stack 0: 0xE0
4246	 1EB	SHR		 	 
- stack 1: 0x674
- stack 0: 0x1E60000
4247	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x1E60000
- stack 0: 0xFFFF
4248	 1EF	AND		 	 
- stack 1: 0x674
- stack 0: 0x0
4249	 1F0	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x1
4250	 1F2	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x0
4251	 1F3	POP		 	 
- stack 0: 0x674
4252	 1F4	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4253	 1F6	ADD		 	 
- stack 0: 0x678
4254	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4255	 1F8	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x1E6000000D400B4016B0001018A000201A4FFE4008600150151000000A0FFFF
4256	 1F9	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x1E6000000D400B4016B0001018A000201A4FFE4008600150151000000A0FFFF
- stack 0: 0xF0
4257	 1FB	SHR		 	 
- stack 1: 0x678
- stack 0: 0x1E6
4258	 1FC	JUMP		 	 
- stack 0: 0x678
4259	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x678
4260	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
4261	 1E8	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x1E6000000D400B4016B0001018A000201A4FFE4008600150151000000A0FFFF
4262	 1E9	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x1E6000000D400B4016B0001018A000201A4FFE4008600150151000000A0FFFF
- stack 0: 0xE0
4263	 1EB	SHR		 	 
- stack 1: 0x678
- stack 0: 0x1E60000
4264	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x1E60000
- stack 0: 0xFFFF
4265	 1EF	AND		 	 
- stack 1: 0x678
- stack 0: 0x0
4266	 1F0	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0x1
4267	 1F2	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x0
4268	 1F3	POP		 	 
- stack 0: 0x678
4269	 1F4	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
4270	 1F6	ADD		 	 
- stack 0: 0x67C
4271	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
4272	 1F8	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0xD400B4016B0001018A000201A4FFE4008600150151000000A0FFFF01E60000
4273	 1F9	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0xD400B4016B0001018A000201A4FFE4008600150151000000A0FFFF01E60000
- stack 0: 0xF0
4274	 1FB	SHR		 	 
- stack 1: 0x67C
- stack 0: 0xD4
4275	 1FC	JUMP		 	 
- stack 0: 0x67C
4276	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x67C
4277	 D5	PUSH2	0040	 	 
- stack 1: 0x67C
- stack 0: 0x40
4278	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x67C
- stack 0: 0x0
4279	 D9	PUSH1	03	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x3
4280	 DB	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x0
4281	 DC	PUSH2	0020	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x20
4282	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4283	 E0	PUSH1	03	 	 
- stack 3: 0x67C
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
4284	 E2	SIGNEXTEND		 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4285	 E3	SLT		 	  ;; # bge
- stack 1: 0x67C
- stack 0: 0x1
4286	 E4	ISZERO		 	 
- stack 1: 0x67C
- stack 0: 0x0
4287	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0xED
4288	 E8	JUMPI		 	 
- stack 0: 0x67C
4289	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x67C
- stack 0: 0x107
4290	 EC	JUMP		 	 
- stack 0: 0x67C
4291	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x67C
4292	 108	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4293	 10A	ADD		 	 
- stack 0: 0x680
4294	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4295	 10C	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x16B0001018A000201A4FFE4008600150151000000A0FFFF01E6000000BA0000
4296	 10D	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x16B0001018A000201A4FFE4008600150151000000A0FFFF01E6000000BA0000
- stack 0: 0xF0
4297	 10F	SHR		 	 
- stack 1: 0x680
- stack 0: 0x16B
4298	 110	JUMP		 	 
- stack 0: 0x680
4299	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x680
4300	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
4301	 16D	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x16B0001018A000201A4FFE4008600150151000000A0FFFF01E6000000BA0000
4302	 16E	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x16B0001018A000201A4FFE4008600150151000000A0FFFF01E6000000BA0000
- stack 0: 0xE0
4303	 170	SHR		 	 
- stack 1: 0x680
- stack 0: 0x16B0001
4304	 171	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x16B0001
- stack 0: 0xFFFF
4305	 174	AND		 	 
- stack 1: 0x680
- stack 0: 0x1
4306	 175	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x1
4307	 177	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x1
4308	 178	PUSH2	0080	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x80
4309	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x1
4310	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x680
- stack 0: 0x2
4311	 17D	PUSH2	0080	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0x80
4312	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x680
4313	 181	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4314	 183	ADD		 	 
- stack 0: 0x684
4315	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4316	 185	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x18A000201A4FFE4008600150151000000A0FFFF01E6000000BA000000D40090
4317	 186	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x18A000201A4FFE4008600150151000000A0FFFF01E6000000BA000000D40090
- stack 0: 0xF0
4318	 188	SHR		 	 
- stack 1: 0x684
- stack 0: 0x18A
4319	 189	JUMP		 	 
- stack 0: 0x684
4320	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x684
4321	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
4322	 18C	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x18A000201A4FFE4008600150151000000A0FFFF01E6000000BA000000D40090
4323	 18D	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x18A000201A4FFE4008600150151000000A0FFFF01E6000000BA000000D40090
- stack 0: 0xE0
4324	 18F	SHR		 	 
- stack 1: 0x684
- stack 0: 0x18A0002
4325	 190	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x18A0002
- stack 0: 0xFFFF
4326	 193	AND		 	 
- stack 1: 0x684
- stack 0: 0x2
4327	 194	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0x1
4328	 196	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x2
4329	 197	PUSH2	00A0	 	 
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0xA0
4330	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x684
4331	 19B	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4332	 19D	ADD		 	 
- stack 0: 0x688
4333	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4334	 19F	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1A4FFE4008600150151000000A0FFFF01E6000000BA000000D40090016B0001
4335	 1A0	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x1A4FFE4008600150151000000A0FFFF01E6000000BA000000D40090016B0001
- stack 0: 0xF0
4336	 1A2	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1A4
4337	 1A3	JUMP		 	 
- stack 0: 0x688
4338	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x688
4339	 1A5	PUSH2	0080	 	 
- stack 1: 0x688
- stack 0: 0x80
4340	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x688
- stack 0: 0x2
4341	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4342	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x688
- stack 0: 0x2
4343	 1AF	PUSH2	00A0	 	 
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0xA0
4344	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0x2
4345	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x688
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4346	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0x2
4347	 1B9	SUB		 	 
- stack 1: 0x688
- stack 0: 0x0
4348	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x1C2
4349	 1BD	JUMPI		 	 
- stack 0: 0x688
4350	 1BE	PUSH2	01DC	 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 1: 0x688
- stack 0: 0x1DC
4351	 1C1	JUMP		 	 
- stack 0: 0x688
4352	 1DC	JUMPDEST		 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x688
4353	 1DD	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4354	 1DF	ADD		 	 
- stack 0: 0x68C
4355	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4356	 1E1	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x8600150151000000A0FFFF01E6000000BA000000D40090016B0001018A0002
4357	 1E2	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x8600150151000000A0FFFF01E6000000BA000000D40090016B0001018A0002
- stack 0: 0xF0
4358	 1E4	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x86
4359	 1E5	JUMP		 	 
- stack 0: 0x68C
4360	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x68C
4361	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
4362	 88	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x8600150151000000A0FFFF01E6000000BA000000D40090016B0001018A0002
4363	 89	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x8600150151000000A0FFFF01E6000000BA000000D40090016B0001018A0002
- stack 0: 0xE0
4364	 8B	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x860015
4365	 8C	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x860015
- stack 0: 0xFFFF
4366	 8F	AND		 	 
- stack 1: 0x68C
- stack 0: 0x15
4367	 90	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0x15
- stack 0: 0x1
4368	 92	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0x15
4369	 93	PUSH2	0380	 	 
- stack 2: 0x68C
- stack 1: 0x15
- stack 0: 0x380
4370	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x68C
4371	 97	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4372	 99	ADD		 	 
- stack 0: 0x690
4373	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4374	 9B	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x151000000A0FFFF01E6000000BA000000D40090016B0001018A000201A4FFE8
4375	 9C	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x151000000A0FFFF01E6000000BA000000D40090016B0001018A000201A4FFE8
- stack 0: 0xF0
4376	 9E	SHR		 	 
- stack 1: 0x690
- stack 0: 0x151
4377	 9F	JUMP		 	 
- stack 0: 0x690
4378	 151	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x690
4379	 152	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
4380	 153	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x151000000A0FFFF01E6000000BA000000D40090016B0001018A000201A4FFE8
4381	 154	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x151000000A0FFFF01E6000000BA000000D40090016B0001018A000201A4FFE8
- stack 0: 0xE0
4382	 156	SHR		 	 
- stack 1: 0x690
- stack 0: 0x1510000
4383	 157	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x1510000
- stack 0: 0xFFFF
4384	 15A	AND		 	 
- stack 1: 0x690
- stack 0: 0x0
4385	 15B	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x1
4386	 15D	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0x0
4387	 15E	PUSH2	0080	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x80
4388	 161	MSTORE		 	  ;; # store to x4
- stack 0: 0x690
4389	 162	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4390	 164	ADD		 	 
- stack 0: 0x694
4391	 165	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4392	 166	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xA0FFFF01E6000000BA000000D40090016B0001018A000201A4FFE800860016
4393	 167	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0xA0FFFF01E6000000BA000000D40090016B0001018A000201A4FFE800860016
- stack 0: 0xF0
4394	 169	SHR		 	 
- stack 1: 0x694
- stack 0: 0xA0
4395	 16A	JUMP		 	 
- stack 0: 0x694
4396	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x694
4397	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4398	 A2	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xA0FFFF01E6000000BA000000D40090016B0001018A000201A4FFE800860016
4399	 A3	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0xA0FFFF01E6000000BA000000D40090016B0001018A000201A4FFE800860016
- stack 0: 0xE0
4400	 A5	SHR		 	 
- stack 1: 0x694
- stack 0: 0xA0FFFF
4401	 A6	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
4402	 A9	AND		 	 
- stack 1: 0x694
- stack 0: 0xFFFF
4403	 AA	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0xFFFF
- stack 0: 0x1
4404	 AC	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4405	 AD	PUSH2	0020	 	 
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4406	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x694
4407	 B1	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4408	 B3	ADD		 	 
- stack 0: 0x698
4409	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4410	 B5	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x1E6000000BA000000D40090016B0001018A000201A4FFE80086001601510000
4411	 B6	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x1E6000000BA000000D40090016B0001018A000201A4FFE80086001601510000
- stack 0: 0xF0
4412	 B8	SHR		 	 
- stack 1: 0x698
- stack 0: 0x1E6
4413	 B9	JUMP		 	 
- stack 0: 0x698
4414	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x698
4415	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
4416	 1E8	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x1E6000000BA000000D40090016B0001018A000201A4FFE80086001601510000
4417	 1E9	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x1E6000000BA000000D40090016B0001018A000201A4FFE80086001601510000
- stack 0: 0xE0
4418	 1EB	SHR		 	 
- stack 1: 0x698
- stack 0: 0x1E60000
4419	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x1E60000
- stack 0: 0xFFFF
4420	 1EF	AND		 	 
- stack 1: 0x698
- stack 0: 0x0
4421	 1F0	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x1
4422	 1F2	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x0
4423	 1F3	POP		 	 
- stack 0: 0x698
4424	 1F4	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4425	 1F6	ADD		 	 
- stack 0: 0x69C
4426	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4427	 1F8	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0xBA000000D40090016B0001018A000201A4FFE8008600160151000000A0FFFF
4428	 1F9	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0xBA000000D40090016B0001018A000201A4FFE8008600160151000000A0FFFF
- stack 0: 0xF0
4429	 1FB	SHR		 	 
- stack 1: 0x69C
- stack 0: 0xBA
4430	 1FC	JUMP		 	 
- stack 0: 0x69C
4431	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x69C
4432	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4433	 BC	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0xBA000000D40090016B0001018A000201A4FFE8008600160151000000A0FFFF
4434	 BD	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0xBA000000D40090016B0001018A000201A4FFE8008600160151000000A0FFFF
- stack 0: 0xE0
4435	 BF	SHR		 	 
- stack 1: 0x69C
- stack 0: 0xBA0000
4436	 C0	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0xBA0000
- stack 0: 0xFFFF
4437	 C3	AND		 	 
- stack 1: 0x69C
- stack 0: 0x0
4438	 C4	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x1
4439	 C6	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0x0
4440	 C7	PUSH2	0040	 	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x40
4441	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x69C
4442	 CB	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4443	 CD	ADD		 	 
- stack 0: 0x6A0
4444	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4445	 CF	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0xD40090016B0001018A000201A4FFE8008600160151000000A0FFFF01E60000
4446	 D0	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0xD40090016B0001018A000201A4FFE8008600160151000000A0FFFF01E60000
- stack 0: 0xF0
4447	 D2	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0xD4
4448	 D3	JUMP		 	 
- stack 0: 0x6A0
4449	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x6A0
4450	 D5	PUSH2	0040	 	 
- stack 1: 0x6A0
- stack 0: 0x40
4451	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x6A0
- stack 0: 0x0
4452	 D9	PUSH1	03	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x3
4453	 DB	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4454	 DC	PUSH2	0020	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x20
4455	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4456	 E0	PUSH1	03	 	 
- stack 3: 0x6A0
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
4457	 E2	SIGNEXTEND		 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4458	 E3	SLT		 	  ;; # bge
- stack 1: 0x6A0
- stack 0: 0x1
4459	 E4	ISZERO		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4460	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0xED
4461	 E8	JUMPI		 	 
- stack 0: 0x6A0
4462	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x6A0
- stack 0: 0x107
4463	 EC	JUMP		 	 
- stack 0: 0x6A0
4464	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x6A0
4465	 108	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4466	 10A	ADD		 	 
- stack 0: 0x6A4
4467	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4468	 10C	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x16B0001018A000201A4FFE8008600160151000000A0FFFF01E6000000BA0000
4469	 10D	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x16B0001018A000201A4FFE8008600160151000000A0FFFF01E6000000BA0000
- stack 0: 0xF0
4470	 10F	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x16B
4471	 110	JUMP		 	 
- stack 0: 0x6A4
4472	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6A4
4473	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
4474	 16D	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x16B0001018A000201A4FFE8008600160151000000A0FFFF01E6000000BA0000
4475	 16E	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x16B0001018A000201A4FFE8008600160151000000A0FFFF01E6000000BA0000
- stack 0: 0xE0
4476	 170	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x16B0001
4477	 171	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x16B0001
- stack 0: 0xFFFF
4478	 174	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
4479	 175	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x1
4480	 177	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
4481	 178	PUSH2	0080	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x80
4482	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x0
4483	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x6A4
- stack 0: 0x1
4484	 17D	PUSH2	0080	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x80
4485	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x6A4
4486	 181	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4487	 183	ADD		 	 
- stack 0: 0x6A8
4488	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4489	 185	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x18A000201A4FFE8008600160151000000A0FFFF01E6000000BA000001E60000
4490	 186	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x18A000201A4FFE8008600160151000000A0FFFF01E6000000BA000001E60000
- stack 0: 0xF0
4491	 188	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x18A
4492	 189	JUMP		 	 
- stack 0: 0x6A8
4493	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6A8
4494	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
4495	 18C	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x18A000201A4FFE8008600160151000000A0FFFF01E6000000BA000001E60000
4496	 18D	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0x18A000201A4FFE8008600160151000000A0FFFF01E6000000BA000001E60000
- stack 0: 0xE0
4497	 18F	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x18A0002
4498	 190	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x18A0002
- stack 0: 0xFFFF
4499	 193	AND		 	 
- stack 1: 0x6A8
- stack 0: 0x2
4500	 194	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0x2
- stack 0: 0x1
4501	 196	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0x2
4502	 197	PUSH2	00A0	 	 
- stack 2: 0x6A8
- stack 1: 0x2
- stack 0: 0xA0
4503	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x6A8
4504	 19B	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4505	 19D	ADD		 	 
- stack 0: 0x6AC
4506	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4507	 19F	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x1A4FFE8008600160151000000A0FFFF01E6000000BA000001E6000000D40068
4508	 1A0	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x1A4FFE8008600160151000000A0FFFF01E6000000BA000001E6000000D40068
- stack 0: 0xF0
4509	 1A2	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x1A4
4510	 1A3	JUMP		 	 
- stack 0: 0x6AC
4511	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x6AC
4512	 1A5	PUSH2	0080	 	 
- stack 1: 0x6AC
- stack 0: 0x80
4513	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x6AC
- stack 0: 0x1
4514	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4515	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6AC
- stack 0: 0x1
4516	 1AF	PUSH2	00A0	 	 
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0xA0
4517	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0x2
4518	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6AC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4519	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0x2
4520	 1B9	SUB		 	 
- stack 1: 0x6AC
- stack 0: 0x1
4521	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0x1C2
4522	 1BD	JUMPI		 	 
- stack 0: 0x6AC
4523	 1C2	JUMPDEST		 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x6AC
4524	 1C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
4525	 1C4	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x1A4FFE8008600160151000000A0FFFF01E6000000BA000001E6000000D40068
4526	 1C5	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x1A4FFE8008600160151000000A0FFFF01E6000000BA000001E6000000D40068
- stack 0: 0xE0
4527	 1C7	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x1A4FFE8
4528	 1C8	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x1A4FFE8
- stack 0: 0xFFFF
4529	 1CB	AND		 	 
- stack 1: 0x6AC
- stack 0: 0xFFE8
4530	 1CC	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0xFFE8
- stack 0: 0x1
4531	 1CE	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
4532	 1CF	ADD		 	 
- stack 0: 0x694
4533	 1D0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x694
- stack 0: 0xFFFFFFFF
4534	 1D5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x694
4535	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4536	 1D7	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xA0FFFF01E6000000BA000000D40090016B0001018A000201A4FFE800860016
4537	 1D8	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0xA0FFFF01E6000000BA000000D40090016B0001018A000201A4FFE800860016
- stack 0: 0xF0
4538	 1DA	SHR		 	 
- stack 1: 0x694
- stack 0: 0xA0
4539	 1DB	JUMP		 	 
- stack 0: 0x694
4540	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x694
4541	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4542	 A2	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xA0FFFF01E6000000BA000000D40090016B0001018A000201A4FFE800860016
4543	 A3	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0xA0FFFF01E6000000BA000000D40090016B0001018A000201A4FFE800860016
- stack 0: 0xE0
4544	 A5	SHR		 	 
- stack 1: 0x694
- stack 0: 0xA0FFFF
4545	 A6	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
4546	 A9	AND		 	 
- stack 1: 0x694
- stack 0: 0xFFFF
4547	 AA	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0xFFFF
- stack 0: 0x1
4548	 AC	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4549	 AD	PUSH2	0020	 	 
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4550	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x694
4551	 B1	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4552	 B3	ADD		 	 
- stack 0: 0x698
4553	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4554	 B5	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x1E6000000BA000000D40090016B0001018A000201A4FFE80086001601510000
4555	 B6	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x1E6000000BA000000D40090016B0001018A000201A4FFE80086001601510000
- stack 0: 0xF0
4556	 B8	SHR		 	 
- stack 1: 0x698
- stack 0: 0x1E6
4557	 B9	JUMP		 	 
- stack 0: 0x698
4558	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x698
4559	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
4560	 1E8	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x1E6000000BA000000D40090016B0001018A000201A4FFE80086001601510000
4561	 1E9	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x1E6000000BA000000D40090016B0001018A000201A4FFE80086001601510000
- stack 0: 0xE0
4562	 1EB	SHR		 	 
- stack 1: 0x698
- stack 0: 0x1E60000
4563	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x1E60000
- stack 0: 0xFFFF
4564	 1EF	AND		 	 
- stack 1: 0x698
- stack 0: 0x0
4565	 1F0	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x1
4566	 1F2	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x0
4567	 1F3	POP		 	 
- stack 0: 0x698
4568	 1F4	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4569	 1F6	ADD		 	 
- stack 0: 0x69C
4570	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4571	 1F8	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0xBA000000D40090016B0001018A000201A4FFE8008600160151000000A0FFFF
4572	 1F9	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0xBA000000D40090016B0001018A000201A4FFE8008600160151000000A0FFFF
- stack 0: 0xF0
4573	 1FB	SHR		 	 
- stack 1: 0x69C
- stack 0: 0xBA
4574	 1FC	JUMP		 	 
- stack 0: 0x69C
4575	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x69C
4576	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4577	 BC	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0xBA000000D40090016B0001018A000201A4FFE8008600160151000000A0FFFF
4578	 BD	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0xBA000000D40090016B0001018A000201A4FFE8008600160151000000A0FFFF
- stack 0: 0xE0
4579	 BF	SHR		 	 
- stack 1: 0x69C
- stack 0: 0xBA0000
4580	 C0	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0xBA0000
- stack 0: 0xFFFF
4581	 C3	AND		 	 
- stack 1: 0x69C
- stack 0: 0x0
4582	 C4	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x1
4583	 C6	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0x0
4584	 C7	PUSH2	0040	 	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x40
4585	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x69C
4586	 CB	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4587	 CD	ADD		 	 
- stack 0: 0x6A0
4588	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4589	 CF	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0xD40090016B0001018A000201A4FFE8008600160151000000A0FFFF01E60000
4590	 D0	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0xD40090016B0001018A000201A4FFE8008600160151000000A0FFFF01E60000
- stack 0: 0xF0
4591	 D2	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0xD4
4592	 D3	JUMP		 	 
- stack 0: 0x6A0
4593	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x6A0
4594	 D5	PUSH2	0040	 	 
- stack 1: 0x6A0
- stack 0: 0x40
4595	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x6A0
- stack 0: 0x0
4596	 D9	PUSH1	03	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x3
4597	 DB	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4598	 DC	PUSH2	0020	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x20
4599	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4600	 E0	PUSH1	03	 	 
- stack 3: 0x6A0
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
4601	 E2	SIGNEXTEND		 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4602	 E3	SLT		 	  ;; # bge
- stack 1: 0x6A0
- stack 0: 0x1
4603	 E4	ISZERO		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4604	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0xED
4605	 E8	JUMPI		 	 
- stack 0: 0x6A0
4606	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x6A0
- stack 0: 0x107
4607	 EC	JUMP		 	 
- stack 0: 0x6A0
4608	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x6A0
4609	 108	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4610	 10A	ADD		 	 
- stack 0: 0x6A4
4611	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4612	 10C	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x16B0001018A000201A4FFE8008600160151000000A0FFFF01E6000000BA0000
4613	 10D	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x16B0001018A000201A4FFE8008600160151000000A0FFFF01E6000000BA0000
- stack 0: 0xF0
4614	 10F	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x16B
4615	 110	JUMP		 	 
- stack 0: 0x6A4
4616	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6A4
4617	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
4618	 16D	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x16B0001018A000201A4FFE8008600160151000000A0FFFF01E6000000BA0000
4619	 16E	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x16B0001018A000201A4FFE8008600160151000000A0FFFF01E6000000BA0000
- stack 0: 0xE0
4620	 170	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x16B0001
4621	 171	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x16B0001
- stack 0: 0xFFFF
4622	 174	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
4623	 175	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x1
4624	 177	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
4625	 178	PUSH2	0080	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x80
4626	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x1
4627	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x6A4
- stack 0: 0x2
4628	 17D	PUSH2	0080	 	 
- stack 2: 0x6A4
- stack 1: 0x2
- stack 0: 0x80
4629	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x6A4
4630	 181	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4631	 183	ADD		 	 
- stack 0: 0x6A8
4632	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4633	 185	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x18A000201A4FFE8008600160151000000A0FFFF01E6000000BA000001E60000
4634	 186	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x18A000201A4FFE8008600160151000000A0FFFF01E6000000BA000001E60000
- stack 0: 0xF0
4635	 188	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x18A
4636	 189	JUMP		 	 
- stack 0: 0x6A8
4637	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6A8
4638	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
4639	 18C	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x18A000201A4FFE8008600160151000000A0FFFF01E6000000BA000001E60000
4640	 18D	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0x18A000201A4FFE8008600160151000000A0FFFF01E6000000BA000001E60000
- stack 0: 0xE0
4641	 18F	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x18A0002
4642	 190	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x18A0002
- stack 0: 0xFFFF
4643	 193	AND		 	 
- stack 1: 0x6A8
- stack 0: 0x2
4644	 194	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0x2
- stack 0: 0x1
4645	 196	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0x2
4646	 197	PUSH2	00A0	 	 
- stack 2: 0x6A8
- stack 1: 0x2
- stack 0: 0xA0
4647	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x6A8
4648	 19B	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4649	 19D	ADD		 	 
- stack 0: 0x6AC
4650	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4651	 19F	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x1A4FFE8008600160151000000A0FFFF01E6000000BA000001E6000000D40068
4652	 1A0	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x1A4FFE8008600160151000000A0FFFF01E6000000BA000001E6000000D40068
- stack 0: 0xF0
4653	 1A2	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x1A4
4654	 1A3	JUMP		 	 
- stack 0: 0x6AC
4655	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x6AC
4656	 1A5	PUSH2	0080	 	 
- stack 1: 0x6AC
- stack 0: 0x80
4657	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x6AC
- stack 0: 0x2
4658	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4659	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6AC
- stack 0: 0x2
4660	 1AF	PUSH2	00A0	 	 
- stack 2: 0x6AC
- stack 1: 0x2
- stack 0: 0xA0
4661	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x6AC
- stack 1: 0x2
- stack 0: 0x2
4662	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6AC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4663	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6AC
- stack 1: 0x2
- stack 0: 0x2
4664	 1B9	SUB		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4665	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x1C2
4666	 1BD	JUMPI		 	 
- stack 0: 0x6AC
4667	 1BE	PUSH2	01DC	 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 1: 0x6AC
- stack 0: 0x1DC
4668	 1C1	JUMP		 	 
- stack 0: 0x6AC
4669	 1DC	JUMPDEST		 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x6AC
4670	 1DD	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4671	 1DF	ADD		 	 
- stack 0: 0x6B0
4672	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4673	 1E1	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x8600160151000000A0FFFF01E6000000BA000001E6000000D40068016B0001
4674	 1E2	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x8600160151000000A0FFFF01E6000000BA000001E6000000D40068016B0001
- stack 0: 0xF0
4675	 1E4	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x86
4676	 1E5	JUMP		 	 
- stack 0: 0x6B0
4677	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6B0
4678	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
4679	 88	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x8600160151000000A0FFFF01E6000000BA000001E6000000D40068016B0001
4680	 89	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x8600160151000000A0FFFF01E6000000BA000001E6000000D40068016B0001
- stack 0: 0xE0
4681	 8B	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x860016
4682	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x860016
- stack 0: 0xFFFF
4683	 8F	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x16
4684	 90	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x16
- stack 0: 0x1
4685	 92	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x16
4686	 93	PUSH2	0380	 	 
- stack 2: 0x6B0
- stack 1: 0x16
- stack 0: 0x380
4687	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x6B0
4688	 97	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4689	 99	ADD		 	 
- stack 0: 0x6B4
4690	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4691	 9B	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x151000000A0FFFF01E6000000BA000001E6000000D40068016B0001018A0002
4692	 9C	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x151000000A0FFFF01E6000000BA000001E6000000D40068016B0001018A0002
- stack 0: 0xF0
4693	 9E	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x151
4694	 9F	JUMP		 	 
- stack 0: 0x6B4
4695	 151	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6B4
4696	 152	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
4697	 153	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x151000000A0FFFF01E6000000BA000001E6000000D40068016B0001018A0002
4698	 154	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x151000000A0FFFF01E6000000BA000001E6000000D40068016B0001018A0002
- stack 0: 0xE0
4699	 156	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x1510000
4700	 157	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x1510000
- stack 0: 0xFFFF
4701	 15A	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
4702	 15B	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x1
4703	 15D	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
4704	 15E	PUSH2	0080	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x80
4705	 161	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B4
4706	 162	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4707	 164	ADD		 	 
- stack 0: 0x6B8
4708	 165	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4709	 166	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xA0FFFF01E6000000BA000001E6000000D40068016B0001018A000201A4FFE4
4710	 167	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0xA0FFFF01E6000000BA000001E6000000D40068016B0001018A000201A4FFE4
- stack 0: 0xF0
4711	 169	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xA0
4712	 16A	JUMP		 	 
- stack 0: 0x6B8
4713	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6B8
4714	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
4715	 A2	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xA0FFFF01E6000000BA000001E6000000D40068016B0001018A000201A4FFE4
4716	 A3	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0xA0FFFF01E6000000BA000001E6000000D40068016B0001018A000201A4FFE4
- stack 0: 0xE0
4717	 A5	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xA0FFFF
4718	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
4719	 A9	AND		 	 
- stack 1: 0x6B8
- stack 0: 0xFFFF
4720	 AA	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0xFFFF
- stack 0: 0x1
4721	 AC	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4722	 AD	PUSH2	0020	 	 
- stack 2: 0x6B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4723	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x6B8
4724	 B1	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4725	 B3	ADD		 	 
- stack 0: 0x6BC
4726	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4727	 B5	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x1E6000000BA000001E6000000D40068016B0001018A000201A4FFE400860017
4728	 B6	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x1E6000000BA000001E6000000D40068016B0001018A000201A4FFE400860017
- stack 0: 0xF0
4729	 B8	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x1E6
4730	 B9	JUMP		 	 
- stack 0: 0x6BC
4731	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6BC
4732	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
4733	 1E8	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x1E6000000BA000001E6000000D40068016B0001018A000201A4FFE400860017
4734	 1E9	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x1E6000000BA000001E6000000D40068016B0001018A000201A4FFE400860017
- stack 0: 0xE0
4735	 1EB	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x1E60000
4736	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x1E60000
- stack 0: 0xFFFF
4737	 1EF	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x0
4738	 1F0	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x0
- stack 0: 0x1
4739	 1F2	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x0
4740	 1F3	POP		 	 
- stack 0: 0x6BC
4741	 1F4	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4742	 1F6	ADD		 	 
- stack 0: 0x6C0
4743	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4744	 1F8	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0xBA000001E6000000D40068016B0001018A000201A4FFE40086001701510000
4745	 1F9	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0xBA000001E6000000D40068016B0001018A000201A4FFE40086001701510000
- stack 0: 0xF0
4746	 1FB	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0xBA
4747	 1FC	JUMP		 	 
- stack 0: 0x6C0
4748	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6C0
4749	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
4750	 BC	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0xBA000001E6000000D40068016B0001018A000201A4FFE40086001701510000
4751	 BD	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0xBA000001E6000000D40068016B0001018A000201A4FFE40086001701510000
- stack 0: 0xE0
4752	 BF	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0xBA0000
4753	 C0	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0xBA0000
- stack 0: 0xFFFF
4754	 C3	AND		 	 
- stack 1: 0x6C0
- stack 0: 0x0
4755	 C4	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x1
4756	 C6	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0x0
4757	 C7	PUSH2	0040	 	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x40
4758	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x6C0
4759	 CB	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4760	 CD	ADD		 	 
- stack 0: 0x6C4
4761	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4762	 CF	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x1E6000000D40068016B0001018A000201A4FFE4008600170151000000A0FFFF
4763	 D0	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x1E6000000D40068016B0001018A000201A4FFE4008600170151000000A0FFFF
- stack 0: 0xF0
4764	 D2	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x1E6
4765	 D3	JUMP		 	 
- stack 0: 0x6C4
4766	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6C4
4767	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C4
- stack 0: 0x6C4
4768	 1E8	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x1E6000000D40068016B0001018A000201A4FFE4008600170151000000A0FFFF
4769	 1E9	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0x1E6000000D40068016B0001018A000201A4FFE4008600170151000000A0FFFF
- stack 0: 0xE0
4770	 1EB	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x1E60000
4771	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x1E60000
- stack 0: 0xFFFF
4772	 1EF	AND		 	 
- stack 1: 0x6C4
- stack 0: 0x0
4773	 1F0	PUSH1	01	 	 
- stack 2: 0x6C4
- stack 1: 0x0
- stack 0: 0x1
4774	 1F2	SIGNEXTEND		 	 
- stack 1: 0x6C4
- stack 0: 0x0
4775	 1F3	POP		 	 
- stack 0: 0x6C4
4776	 1F4	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
4777	 1F6	ADD		 	 
- stack 0: 0x6C8
4778	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
4779	 1F8	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0xD40068016B0001018A000201A4FFE4008600170151000000A0FFFF01E60000
4780	 1F9	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0xD40068016B0001018A000201A4FFE4008600170151000000A0FFFF01E60000
- stack 0: 0xF0
4781	 1FB	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0xD4
4782	 1FC	JUMP		 	 
- stack 0: 0x6C8
4783	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x6C8
4784	 D5	PUSH2	0040	 	 
- stack 1: 0x6C8
- stack 0: 0x40
4785	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x6C8
- stack 0: 0x0
4786	 D9	PUSH1	03	 	 
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0x3
4787	 DB	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x0
4788	 DC	PUSH2	0020	 	 
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0x20
4789	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4790	 E0	PUSH1	03	 	 
- stack 3: 0x6C8
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
4791	 E2	SIGNEXTEND		 	 
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4792	 E3	SLT		 	  ;; # bge
- stack 1: 0x6C8
- stack 0: 0x1
4793	 E4	ISZERO		 	 
- stack 1: 0x6C8
- stack 0: 0x0
4794	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0xED
4795	 E8	JUMPI		 	 
- stack 0: 0x6C8
4796	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x6C8
- stack 0: 0x107
4797	 EC	JUMP		 	 
- stack 0: 0x6C8
4798	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x6C8
4799	 108	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
4800	 10A	ADD		 	 
- stack 0: 0x6CC
4801	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
4802	 10C	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x16B0001018A000201A4FFE4008600170151000000A0FFFF01E6000001E60000
4803	 10D	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x16B0001018A000201A4FFE4008600170151000000A0FFFF01E6000001E60000
- stack 0: 0xF0
4804	 10F	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x16B
4805	 110	JUMP		 	 
- stack 0: 0x6CC
4806	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6CC
4807	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6CC
- stack 0: 0x6CC
4808	 16D	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x16B0001018A000201A4FFE4008600170151000000A0FFFF01E6000001E60000
4809	 16E	PUSH1	E0	 	 
- stack 2: 0x6CC
- stack 1: 0x16B0001018A000201A4FFE4008600170151000000A0FFFF01E6000001E60000
- stack 0: 0xE0
4810	 170	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x16B0001
4811	 171	PUSH2	FFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x16B0001
- stack 0: 0xFFFF
4812	 174	AND		 	 
- stack 1: 0x6CC
- stack 0: 0x1
4813	 175	PUSH1	01	 	 
- stack 2: 0x6CC
- stack 1: 0x1
- stack 0: 0x1
4814	 177	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0x1
4815	 178	PUSH2	0080	 	 
- stack 2: 0x6CC
- stack 1: 0x1
- stack 0: 0x80
4816	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x6CC
- stack 1: 0x1
- stack 0: 0x0
4817	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x6CC
- stack 0: 0x1
4818	 17D	PUSH2	0080	 	 
- stack 2: 0x6CC
- stack 1: 0x1
- stack 0: 0x80
4819	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x6CC
4820	 181	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
4821	 183	ADD		 	 
- stack 0: 0x6D0
4822	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
4823	 185	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x18A000201A4FFE4008600170151000000A0FFFF01E6000001E6000000BA0000
4824	 186	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x18A000201A4FFE4008600170151000000A0FFFF01E6000001E6000000BA0000
- stack 0: 0xF0
4825	 188	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x18A
4826	 189	JUMP		 	 
- stack 0: 0x6D0
4827	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6D0
4828	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
4829	 18C	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x18A000201A4FFE4008600170151000000A0FFFF01E6000001E6000000BA0000
4830	 18D	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x18A000201A4FFE4008600170151000000A0FFFF01E6000001E6000000BA0000
- stack 0: 0xE0
4831	 18F	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x18A0002
4832	 190	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x18A0002
- stack 0: 0xFFFF
4833	 193	AND		 	 
- stack 1: 0x6D0
- stack 0: 0x2
4834	 194	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0x1
4835	 196	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0x2
4836	 197	PUSH2	00A0	 	 
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0xA0
4837	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x6D0
4838	 19B	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
4839	 19D	ADD		 	 
- stack 0: 0x6D4
4840	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
4841	 19F	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x1A4FFE4008600170151000000A0FFFF01E6000001E6000000BA000000D40040
4842	 1A0	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x1A4FFE4008600170151000000A0FFFF01E6000001E6000000BA000000D40040
- stack 0: 0xF0
4843	 1A2	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x1A4
4844	 1A3	JUMP		 	 
- stack 0: 0x6D4
4845	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x6D4
4846	 1A5	PUSH2	0080	 	 
- stack 1: 0x6D4
- stack 0: 0x80
4847	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x6D4
- stack 0: 0x1
4848	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4849	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D4
- stack 0: 0x1
4850	 1AF	PUSH2	00A0	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0xA0
4851	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x2
4852	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4853	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x2
4854	 1B9	SUB		 	 
- stack 1: 0x6D4
- stack 0: 0x1
4855	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x1C2
4856	 1BD	JUMPI		 	 
- stack 0: 0x6D4
4857	 1C2	JUMPDEST		 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x6D4
4858	 1C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
4859	 1C4	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x1A4FFE4008600170151000000A0FFFF01E6000001E6000000BA000000D40040
4860	 1C5	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0x1A4FFE4008600170151000000A0FFFF01E6000001E6000000BA000000D40040
- stack 0: 0xE0
4861	 1C7	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x1A4FFE4
4862	 1C8	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x1A4FFE4
- stack 0: 0xFFFF
4863	 1CB	AND		 	 
- stack 1: 0x6D4
- stack 0: 0xFFE4
4864	 1CC	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0xFFE4
- stack 0: 0x1
4865	 1CE	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4866	 1CF	ADD		 	 
- stack 0: 0x6B8
4867	 1D0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6B8
- stack 0: 0xFFFFFFFF
4868	 1D5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6B8
4869	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4870	 1D7	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xA0FFFF01E6000000BA000001E6000000D40068016B0001018A000201A4FFE4
4871	 1D8	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0xA0FFFF01E6000000BA000001E6000000D40068016B0001018A000201A4FFE4
- stack 0: 0xF0
4872	 1DA	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xA0
4873	 1DB	JUMP		 	 
- stack 0: 0x6B8
4874	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6B8
4875	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
4876	 A2	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xA0FFFF01E6000000BA000001E6000000D40068016B0001018A000201A4FFE4
4877	 A3	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0xA0FFFF01E6000000BA000001E6000000D40068016B0001018A000201A4FFE4
- stack 0: 0xE0
4878	 A5	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xA0FFFF
4879	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
4880	 A9	AND		 	 
- stack 1: 0x6B8
- stack 0: 0xFFFF
4881	 AA	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0xFFFF
- stack 0: 0x1
4882	 AC	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4883	 AD	PUSH2	0020	 	 
- stack 2: 0x6B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4884	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x6B8
4885	 B1	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4886	 B3	ADD		 	 
- stack 0: 0x6BC
4887	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4888	 B5	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x1E6000000BA000001E6000000D40068016B0001018A000201A4FFE400860017
4889	 B6	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x1E6000000BA000001E6000000D40068016B0001018A000201A4FFE400860017
- stack 0: 0xF0
4890	 B8	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x1E6
4891	 B9	JUMP		 	 
- stack 0: 0x6BC
4892	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6BC
4893	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
4894	 1E8	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x1E6000000BA000001E6000000D40068016B0001018A000201A4FFE400860017
4895	 1E9	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x1E6000000BA000001E6000000D40068016B0001018A000201A4FFE400860017
- stack 0: 0xE0
4896	 1EB	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x1E60000
4897	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x1E60000
- stack 0: 0xFFFF
4898	 1EF	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x0
4899	 1F0	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x0
- stack 0: 0x1
4900	 1F2	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x0
4901	 1F3	POP		 	 
- stack 0: 0x6BC
4902	 1F4	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4903	 1F6	ADD		 	 
- stack 0: 0x6C0
4904	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4905	 1F8	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0xBA000001E6000000D40068016B0001018A000201A4FFE40086001701510000
4906	 1F9	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0xBA000001E6000000D40068016B0001018A000201A4FFE40086001701510000
- stack 0: 0xF0
4907	 1FB	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0xBA
4908	 1FC	JUMP		 	 
- stack 0: 0x6C0
4909	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6C0
4910	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
4911	 BC	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0xBA000001E6000000D40068016B0001018A000201A4FFE40086001701510000
4912	 BD	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0xBA000001E6000000D40068016B0001018A000201A4FFE40086001701510000
- stack 0: 0xE0
4913	 BF	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0xBA0000
4914	 C0	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0xBA0000
- stack 0: 0xFFFF
4915	 C3	AND		 	 
- stack 1: 0x6C0
- stack 0: 0x0
4916	 C4	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x1
4917	 C6	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0x0
4918	 C7	PUSH2	0040	 	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x40
4919	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x6C0
4920	 CB	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4921	 CD	ADD		 	 
- stack 0: 0x6C4
4922	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4923	 CF	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x1E6000000D40068016B0001018A000201A4FFE4008600170151000000A0FFFF
4924	 D0	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x1E6000000D40068016B0001018A000201A4FFE4008600170151000000A0FFFF
- stack 0: 0xF0
4925	 D2	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x1E6
4926	 D3	JUMP		 	 
- stack 0: 0x6C4
4927	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6C4
4928	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C4
- stack 0: 0x6C4
4929	 1E8	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x1E6000000D40068016B0001018A000201A4FFE4008600170151000000A0FFFF
4930	 1E9	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0x1E6000000D40068016B0001018A000201A4FFE4008600170151000000A0FFFF
- stack 0: 0xE0
4931	 1EB	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x1E60000
4932	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x1E60000
- stack 0: 0xFFFF
4933	 1EF	AND		 	 
- stack 1: 0x6C4
- stack 0: 0x0
4934	 1F0	PUSH1	01	 	 
- stack 2: 0x6C4
- stack 1: 0x0
- stack 0: 0x1
4935	 1F2	SIGNEXTEND		 	 
- stack 1: 0x6C4
- stack 0: 0x0
4936	 1F3	POP		 	 
- stack 0: 0x6C4
4937	 1F4	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
4938	 1F6	ADD		 	 
- stack 0: 0x6C8
4939	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
4940	 1F8	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0xD40068016B0001018A000201A4FFE4008600170151000000A0FFFF01E60000
4941	 1F9	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0xD40068016B0001018A000201A4FFE4008600170151000000A0FFFF01E60000
- stack 0: 0xF0
4942	 1FB	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0xD4
4943	 1FC	JUMP		 	 
- stack 0: 0x6C8
4944	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x6C8
4945	 D5	PUSH2	0040	 	 
- stack 1: 0x6C8
- stack 0: 0x40
4946	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x6C8
- stack 0: 0x0
4947	 D9	PUSH1	03	 	 
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0x3
4948	 DB	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x0
4949	 DC	PUSH2	0020	 	 
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0x20
4950	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4951	 E0	PUSH1	03	 	 
- stack 3: 0x6C8
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
4952	 E2	SIGNEXTEND		 	 
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4953	 E3	SLT		 	  ;; # bge
- stack 1: 0x6C8
- stack 0: 0x1
4954	 E4	ISZERO		 	 
- stack 1: 0x6C8
- stack 0: 0x0
4955	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0xED
4956	 E8	JUMPI		 	 
- stack 0: 0x6C8
4957	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x6C8
- stack 0: 0x107
4958	 EC	JUMP		 	 
- stack 0: 0x6C8
4959	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x6C8
4960	 108	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
4961	 10A	ADD		 	 
- stack 0: 0x6CC
4962	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
4963	 10C	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x16B0001018A000201A4FFE4008600170151000000A0FFFF01E6000001E60000
4964	 10D	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x16B0001018A000201A4FFE4008600170151000000A0FFFF01E6000001E60000
- stack 0: 0xF0
4965	 10F	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x16B
4966	 110	JUMP		 	 
- stack 0: 0x6CC
4967	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6CC
4968	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6CC
- stack 0: 0x6CC
4969	 16D	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x16B0001018A000201A4FFE4008600170151000000A0FFFF01E6000001E60000
4970	 16E	PUSH1	E0	 	 
- stack 2: 0x6CC
- stack 1: 0x16B0001018A000201A4FFE4008600170151000000A0FFFF01E6000001E60000
- stack 0: 0xE0
4971	 170	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x16B0001
4972	 171	PUSH2	FFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x16B0001
- stack 0: 0xFFFF
4973	 174	AND		 	 
- stack 1: 0x6CC
- stack 0: 0x1
4974	 175	PUSH1	01	 	 
- stack 2: 0x6CC
- stack 1: 0x1
- stack 0: 0x1
4975	 177	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0x1
4976	 178	PUSH2	0080	 	 
- stack 2: 0x6CC
- stack 1: 0x1
- stack 0: 0x80
4977	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x6CC
- stack 1: 0x1
- stack 0: 0x1
4978	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x6CC
- stack 0: 0x2
4979	 17D	PUSH2	0080	 	 
- stack 2: 0x6CC
- stack 1: 0x2
- stack 0: 0x80
4980	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x6CC
4981	 181	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
4982	 183	ADD		 	 
- stack 0: 0x6D0
4983	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
4984	 185	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x18A000201A4FFE4008600170151000000A0FFFF01E6000001E6000000BA0000
4985	 186	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x18A000201A4FFE4008600170151000000A0FFFF01E6000001E6000000BA0000
- stack 0: 0xF0
4986	 188	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x18A
4987	 189	JUMP		 	 
- stack 0: 0x6D0
4988	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6D0
4989	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
4990	 18C	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x18A000201A4FFE4008600170151000000A0FFFF01E6000001E6000000BA0000
4991	 18D	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x18A000201A4FFE4008600170151000000A0FFFF01E6000001E6000000BA0000
- stack 0: 0xE0
4992	 18F	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x18A0002
4993	 190	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x18A0002
- stack 0: 0xFFFF
4994	 193	AND		 	 
- stack 1: 0x6D0
- stack 0: 0x2
4995	 194	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0x1
4996	 196	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0x2
4997	 197	PUSH2	00A0	 	 
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0xA0
4998	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x6D0
4999	 19B	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
5000	 19D	ADD		 	 
- stack 0: 0x6D4
5001	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
5002	 19F	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x1A4FFE4008600170151000000A0FFFF01E6000001E6000000BA000000D40040
5003	 1A0	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x1A4FFE4008600170151000000A0FFFF01E6000001E6000000BA000000D40040
- stack 0: 0xF0
5004	 1A2	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x1A4
5005	 1A3	JUMP		 	 
- stack 0: 0x6D4
5006	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x6D4
5007	 1A5	PUSH2	0080	 	 
- stack 1: 0x6D4
- stack 0: 0x80
5008	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x6D4
- stack 0: 0x2
5009	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5010	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D4
- stack 0: 0x2
5011	 1AF	PUSH2	00A0	 	 
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0xA0
5012	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0x2
5013	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5014	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0x2
5015	 1B9	SUB		 	 
- stack 1: 0x6D4
- stack 0: 0x0
5016	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x6D4
- stack 1: 0x0
- stack 0: 0x1C2
5017	 1BD	JUMPI		 	 
- stack 0: 0x6D4
5018	 1BE	PUSH2	01DC	 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 1: 0x6D4
- stack 0: 0x1DC
5019	 1C1	JUMP		 	 
- stack 0: 0x6D4
5020	 1DC	JUMPDEST		 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x6D4
5021	 1DD	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
5022	 1DF	ADD		 	 
- stack 0: 0x6D8
5023	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
5024	 1E1	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x8600170151000000A0FFFF01E6000001E6000000BA000000D40040016B0001
5025	 1E2	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x8600170151000000A0FFFF01E6000001E6000000BA000000D40040016B0001
- stack 0: 0xF0
5026	 1E4	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x86
5027	 1E5	JUMP		 	 
- stack 0: 0x6D8
5028	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6D8
5029	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
5030	 88	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x8600170151000000A0FFFF01E6000001E6000000BA000000D40040016B0001
5031	 89	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x8600170151000000A0FFFF01E6000001E6000000BA000000D40040016B0001
- stack 0: 0xE0
5032	 8B	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x860017
5033	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x860017
- stack 0: 0xFFFF
5034	 8F	AND		 	 
- stack 1: 0x6D8
- stack 0: 0x17
5035	 90	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0x17
- stack 0: 0x1
5036	 92	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0x17
5037	 93	PUSH2	0380	 	 
- stack 2: 0x6D8
- stack 1: 0x17
- stack 0: 0x380
5038	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x6D8
5039	 97	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
5040	 99	ADD		 	 
- stack 0: 0x6DC
5041	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
5042	 9B	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x151000000A0FFFF01E6000001E6000000BA000000D40040016B0001018A0002
5043	 9C	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x151000000A0FFFF01E6000001E6000000BA000000D40040016B0001018A0002
- stack 0: 0xF0
5044	 9E	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x151
5045	 9F	JUMP		 	 
- stack 0: 0x6DC
5046	 151	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6DC
5047	 152	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
5048	 153	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x151000000A0FFFF01E6000001E6000000BA000000D40040016B0001018A0002
5049	 154	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x151000000A0FFFF01E6000001E6000000BA000000D40040016B0001018A0002
- stack 0: 0xE0
5050	 156	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x1510000
5051	 157	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x1510000
- stack 0: 0xFFFF
5052	 15A	AND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
5053	 15B	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x1
5054	 15D	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
5055	 15E	PUSH2	0080	 	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x80
5056	 161	MSTORE		 	  ;; # store to x4
- stack 0: 0x6DC
5057	 162	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
5058	 164	ADD		 	 
- stack 0: 0x6E0
5059	 165	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
5060	 166	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0xA0FFFF01E6000001E6000000BA000000D40040016B0001018A000201A4FFE4
5061	 167	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0xA0FFFF01E6000001E6000000BA000000D40040016B0001018A000201A4FFE4
- stack 0: 0xF0
5062	 169	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0xA0
5063	 16A	JUMP		 	 
- stack 0: 0x6E0
5064	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6E0
5065	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
5066	 A2	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0xA0FFFF01E6000001E6000000BA000000D40040016B0001018A000201A4FFE4
5067	 A3	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0xA0FFFF01E6000001E6000000BA000000D40040016B0001018A000201A4FFE4
- stack 0: 0xE0
5068	 A5	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0xA0FFFF
5069	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
5070	 A9	AND		 	 
- stack 1: 0x6E0
- stack 0: 0xFFFF
5071	 AA	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0xFFFF
- stack 0: 0x1
5072	 AC	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5073	 AD	PUSH2	0020	 	 
- stack 2: 0x6E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
5074	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x6E0
5075	 B1	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
5076	 B3	ADD		 	 
- stack 0: 0x6E4
5077	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
5078	 B5	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x1E6000001E6000000BA000000D40040016B0001018A000201A4FFE400A00001
5079	 B6	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x1E6000001E6000000BA000000D40040016B0001018A000201A4FFE400A00001
- stack 0: 0xF0
5080	 B8	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x1E6
5081	 B9	JUMP		 	 
- stack 0: 0x6E4
5082	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E4
5083	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
5084	 1E8	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x1E6000001E6000000BA000000D40040016B0001018A000201A4FFE400A00001
5085	 1E9	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x1E6000001E6000000BA000000D40040016B0001018A000201A4FFE400A00001
- stack 0: 0xE0
5086	 1EB	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x1E60000
5087	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x1E60000
- stack 0: 0xFFFF
5088	 1EF	AND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
5089	 1F0	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x1
5090	 1F2	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
5091	 1F3	POP		 	 
- stack 0: 0x6E4
5092	 1F4	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
5093	 1F6	ADD		 	 
- stack 0: 0x6E8
5094	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
5095	 1F8	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x1E6000000BA000000D40040016B0001018A000201A4FFE400A0000101FD0014
5096	 1F9	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x1E6000000BA000000D40040016B0001018A000201A4FFE400A0000101FD0014
- stack 0: 0xF0
5097	 1FB	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x1E6
5098	 1FC	JUMP		 	 
- stack 0: 0x6E8
5099	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E8
5100	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
5101	 1E8	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x1E6000000BA000000D40040016B0001018A000201A4FFE400A0000101FD0014
5102	 1E9	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x1E6000000BA000000D40040016B0001018A000201A4FFE400A0000101FD0014
- stack 0: 0xE0
5103	 1EB	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x1E60000
5104	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x1E60000
- stack 0: 0xFFFF
5105	 1EF	AND		 	 
- stack 1: 0x6E8
- stack 0: 0x0
5106	 1F0	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0x0
- stack 0: 0x1
5107	 1F2	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0x0
5108	 1F3	POP		 	 
- stack 0: 0x6E8
5109	 1F4	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
5110	 1F6	ADD		 	 
- stack 0: 0x6EC
5111	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
5112	 1F8	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xBA000000D40040016B0001018A000201A4FFE400A0000101FD001402380001
5113	 1F9	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0xBA000000D40040016B0001018A000201A4FFE400A0000101FD001402380001
- stack 0: 0xF0
5114	 1FB	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xBA
5115	 1FC	JUMP		 	 
- stack 0: 0x6EC
5116	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6EC
5117	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
5118	 BC	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xBA000000D40040016B0001018A000201A4FFE400A0000101FD001402380001
5119	 BD	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0xBA000000D40040016B0001018A000201A4FFE400A0000101FD001402380001
- stack 0: 0xE0
5120	 BF	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xBA0000
5121	 C0	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0xBA0000
- stack 0: 0xFFFF
5122	 C3	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x0
5123	 C4	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x0
- stack 0: 0x1
5124	 C6	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x0
5125	 C7	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0x0
- stack 0: 0x40
5126	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x6EC
5127	 CB	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
5128	 CD	ADD		 	 
- stack 0: 0x6F0
5129	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
5130	 CF	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0xD40040016B0001018A000201A4FFE400A0000101FD00140238000102380001
5131	 D0	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0xD40040016B0001018A000201A4FFE400A0000101FD00140238000102380001
- stack 0: 0xF0
5132	 D2	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0xD4
5133	 D3	JUMP		 	 
- stack 0: 0x6F0
5134	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x6F0
5135	 D5	PUSH2	0040	 	 
- stack 1: 0x6F0
- stack 0: 0x40
5136	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x6F0
- stack 0: 0x0
5137	 D9	PUSH1	03	 	 
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0x3
5138	 DB	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0x0
5139	 DC	PUSH2	0020	 	 
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0x20
5140	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5141	 E0	PUSH1	03	 	 
- stack 3: 0x6F0
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
5142	 E2	SIGNEXTEND		 	 
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5143	 E3	SLT		 	  ;; # bge
- stack 1: 0x6F0
- stack 0: 0x1
5144	 E4	ISZERO		 	 
- stack 1: 0x6F0
- stack 0: 0x0
5145	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0xED
5146	 E8	JUMPI		 	 
- stack 0: 0x6F0
5147	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x6F0
- stack 0: 0x107
5148	 EC	JUMP		 	 
- stack 0: 0x6F0
5149	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x6F0
5150	 108	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
5151	 10A	ADD		 	 
- stack 0: 0x6F4
5152	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
5153	 10C	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x16B0001018A000201A4FFE400A0000101FD0014023800010238000102380001
5154	 10D	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x16B0001018A000201A4FFE400A0000101FD0014023800010238000102380001
- stack 0: 0xF0
5155	 10F	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x16B
5156	 110	JUMP		 	 
- stack 0: 0x6F4
5157	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6F4
5158	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
5159	 16D	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x16B0001018A000201A4FFE400A0000101FD0014023800010238000102380001
5160	 16E	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x16B0001018A000201A4FFE400A0000101FD0014023800010238000102380001
- stack 0: 0xE0
5161	 170	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x16B0001
5162	 171	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x16B0001
- stack 0: 0xFFFF
5163	 174	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x1
5164	 175	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x1
5165	 177	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x1
5166	 178	PUSH2	0080	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x80
5167	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x0
5168	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x6F4
- stack 0: 0x1
5169	 17D	PUSH2	0080	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x80
5170	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x6F4
5171	 181	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
5172	 183	ADD		 	 
- stack 0: 0x6F8
5173	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
5174	 185	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x18A000201A4FFE400A0000101FD001402380001023800010238000102380001
5175	 186	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x18A000201A4FFE400A0000101FD001402380001023800010238000102380001
- stack 0: 0xF0
5176	 188	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x18A
5177	 189	JUMP		 	 
- stack 0: 0x6F8
5178	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6F8
5179	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F8
- stack 0: 0x6F8
5180	 18C	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x18A000201A4FFE400A0000101FD001402380001023800010238000102380001
5181	 18D	PUSH1	E0	 	 
- stack 2: 0x6F8
- stack 1: 0x18A000201A4FFE400A0000101FD001402380001023800010238000102380001
- stack 0: 0xE0
5182	 18F	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x18A0002
5183	 190	PUSH2	FFFF	 	 
- stack 2: 0x6F8
- stack 1: 0x18A0002
- stack 0: 0xFFFF
5184	 193	AND		 	 
- stack 1: 0x6F8
- stack 0: 0x2
5185	 194	PUSH1	01	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0x1
5186	 196	SIGNEXTEND		 	 
- stack 1: 0x6F8
- stack 0: 0x2
5187	 197	PUSH2	00A0	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0xA0
5188	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x6F8
5189	 19B	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
5190	 19D	ADD		 	 
- stack 0: 0x6FC
5191	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
5192	 19F	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x1A4FFE400A0000101FD00140238000102380001023800010238000102380001
5193	 1A0	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x1A4FFE400A0000101FD00140238000102380001023800010238000102380001
- stack 0: 0xF0
5194	 1A2	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x1A4
5195	 1A3	JUMP		 	 
- stack 0: 0x6FC
5196	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x6FC
5197	 1A5	PUSH2	0080	 	 
- stack 1: 0x6FC
- stack 0: 0x80
5198	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x6FC
- stack 0: 0x1
5199	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5200	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6FC
- stack 0: 0x1
5201	 1AF	PUSH2	00A0	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0xA0
5202	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x2
5203	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6FC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5204	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x2
5205	 1B9	SUB		 	 
- stack 1: 0x6FC
- stack 0: 0x1
5206	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x1C2
5207	 1BD	JUMPI		 	 
- stack 0: 0x6FC
5208	 1C2	JUMPDEST		 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x6FC
5209	 1C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6FC
- stack 0: 0x6FC
5210	 1C4	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x1A4FFE400A0000101FD00140238000102380001023800010238000102380001
5211	 1C5	PUSH1	E0	 	 
- stack 2: 0x6FC
- stack 1: 0x1A4FFE400A0000101FD00140238000102380001023800010238000102380001
- stack 0: 0xE0
5212	 1C7	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x1A4FFE4
5213	 1C8	PUSH2	FFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x1A4FFE4
- stack 0: 0xFFFF
5214	 1CB	AND		 	 
- stack 1: 0x6FC
- stack 0: 0xFFE4
5215	 1CC	PUSH1	01	 	 
- stack 2: 0x6FC
- stack 1: 0xFFE4
- stack 0: 0x1
5216	 1CE	SIGNEXTEND		 	 
- stack 1: 0x6FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
5217	 1CF	ADD		 	 
- stack 0: 0x6E0
5218	 1D0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
5219	 1D5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6E0
5220	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
5221	 1D7	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0xA0FFFF01E6000001E6000000BA000000D40040016B0001018A000201A4FFE4
5222	 1D8	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0xA0FFFF01E6000001E6000000BA000000D40040016B0001018A000201A4FFE4
- stack 0: 0xF0
5223	 1DA	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0xA0
5224	 1DB	JUMP		 	 
- stack 0: 0x6E0
5225	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6E0
5226	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
5227	 A2	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0xA0FFFF01E6000001E6000000BA000000D40040016B0001018A000201A4FFE4
5228	 A3	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0xA0FFFF01E6000001E6000000BA000000D40040016B0001018A000201A4FFE4
- stack 0: 0xE0
5229	 A5	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0xA0FFFF
5230	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
5231	 A9	AND		 	 
- stack 1: 0x6E0
- stack 0: 0xFFFF
5232	 AA	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0xFFFF
- stack 0: 0x1
5233	 AC	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5234	 AD	PUSH2	0020	 	 
- stack 2: 0x6E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
5235	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x6E0
5236	 B1	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
5237	 B3	ADD		 	 
- stack 0: 0x6E4
5238	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
5239	 B5	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x1E6000001E6000000BA000000D40040016B0001018A000201A4FFE400A00001
5240	 B6	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x1E6000001E6000000BA000000D40040016B0001018A000201A4FFE400A00001
- stack 0: 0xF0
5241	 B8	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x1E6
5242	 B9	JUMP		 	 
- stack 0: 0x6E4
5243	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E4
5244	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
5245	 1E8	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x1E6000001E6000000BA000000D40040016B0001018A000201A4FFE400A00001
5246	 1E9	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x1E6000001E6000000BA000000D40040016B0001018A000201A4FFE400A00001
- stack 0: 0xE0
5247	 1EB	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x1E60000
5248	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x1E60000
- stack 0: 0xFFFF
5249	 1EF	AND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
5250	 1F0	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x1
5251	 1F2	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
5252	 1F3	POP		 	 
- stack 0: 0x6E4
5253	 1F4	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
5254	 1F6	ADD		 	 
- stack 0: 0x6E8
5255	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
5256	 1F8	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x1E6000000BA000000D40040016B0001018A000201A4FFE400A0000101FD0014
5257	 1F9	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x1E6000000BA000000D40040016B0001018A000201A4FFE400A0000101FD0014
- stack 0: 0xF0
5258	 1FB	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x1E6
5259	 1FC	JUMP		 	 
- stack 0: 0x6E8
5260	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E8
5261	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
5262	 1E8	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x1E6000000BA000000D40040016B0001018A000201A4FFE400A0000101FD0014
5263	 1E9	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x1E6000000BA000000D40040016B0001018A000201A4FFE400A0000101FD0014
- stack 0: 0xE0
5264	 1EB	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x1E60000
5265	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x1E60000
- stack 0: 0xFFFF
5266	 1EF	AND		 	 
- stack 1: 0x6E8
- stack 0: 0x0
5267	 1F0	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0x0
- stack 0: 0x1
5268	 1F2	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0x0
5269	 1F3	POP		 	 
- stack 0: 0x6E8
5270	 1F4	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
5271	 1F6	ADD		 	 
- stack 0: 0x6EC
5272	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
5273	 1F8	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xBA000000D40040016B0001018A000201A4FFE400A0000101FD001402380001
5274	 1F9	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0xBA000000D40040016B0001018A000201A4FFE400A0000101FD001402380001
- stack 0: 0xF0
5275	 1FB	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xBA
5276	 1FC	JUMP		 	 
- stack 0: 0x6EC
5277	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6EC
5278	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
5279	 BC	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xBA000000D40040016B0001018A000201A4FFE400A0000101FD001402380001
5280	 BD	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0xBA000000D40040016B0001018A000201A4FFE400A0000101FD001402380001
- stack 0: 0xE0
5281	 BF	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xBA0000
5282	 C0	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0xBA0000
- stack 0: 0xFFFF
5283	 C3	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x0
5284	 C4	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x0
- stack 0: 0x1
5285	 C6	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x0
5286	 C7	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0x0
- stack 0: 0x40
5287	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x6EC
5288	 CB	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
5289	 CD	ADD		 	 
- stack 0: 0x6F0
5290	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
5291	 CF	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0xD40040016B0001018A000201A4FFE400A0000101FD00140238000102380001
5292	 D0	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0xD40040016B0001018A000201A4FFE400A0000101FD00140238000102380001
- stack 0: 0xF0
5293	 D2	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0xD4
5294	 D3	JUMP		 	 
- stack 0: 0x6F0
5295	 D4	JUMPDEST		 ;; __riscvimpl_BGE_0_1_2	  ;; # instr: bge ra,sp,c(ignore imm)
- stack 0: 0x6F0
5296	 D5	PUSH2	0040	 	 
- stack 1: 0x6F0
- stack 0: 0x40
5297	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x6F0
- stack 0: 0x0
5298	 D9	PUSH1	03	 	 
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0x3
5299	 DB	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0x0
5300	 DC	PUSH2	0020	 	 
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0x20
5301	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5302	 E0	PUSH1	03	 	 
- stack 3: 0x6F0
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
5303	 E2	SIGNEXTEND		 	 
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5304	 E3	SLT		 	  ;; # bge
- stack 1: 0x6F0
- stack 0: 0x1
5305	 E4	ISZERO		 	 
- stack 1: 0x6F0
- stack 0: 0x0
5306	 E5	PUSH2	00ED	 ;; _bge_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0xED
5307	 E8	JUMPI		 	 
- stack 0: 0x6F0
5308	 E9	PUSH2	0107	 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 1: 0x6F0
- stack 0: 0x107
5309	 EC	JUMP		 	 
- stack 0: 0x6F0
5310	 107	JUMPDEST		 ;; _bge_after_7ef52ea10ffe11a04bd95c1e0109a393fafcd0cb3e236f35ae163f6478aa5176	 
- stack 0: 0x6F0
5311	 108	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
5312	 10A	ADD		 	 
- stack 0: 0x6F4
5313	 10B	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
5314	 10C	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x16B0001018A000201A4FFE400A0000101FD0014023800010238000102380001
5315	 10D	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x16B0001018A000201A4FFE400A0000101FD0014023800010238000102380001
- stack 0: 0xF0
5316	 10F	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x16B
5317	 110	JUMP		 	 
- stack 0: 0x6F4
5318	 16B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6F4
5319	 16C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
5320	 16D	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x16B0001018A000201A4FFE400A0000101FD0014023800010238000102380001
5321	 16E	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x16B0001018A000201A4FFE400A0000101FD0014023800010238000102380001
- stack 0: 0xE0
5322	 170	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x16B0001
5323	 171	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x16B0001
- stack 0: 0xFFFF
5324	 174	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x1
5325	 175	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x1
5326	 177	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x1
5327	 178	PUSH2	0080	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x80
5328	 17B	MLOAD		 	  ;; # read from x4
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x1
5329	 17C	ADD		 	  ;; # ADDI 4
- stack 1: 0x6F4
- stack 0: 0x2
5330	 17D	PUSH2	0080	 	 
- stack 2: 0x6F4
- stack 1: 0x2
- stack 0: 0x80
5331	 180	MSTORE		 	  ;; # store to x4
- stack 0: 0x6F4
5332	 181	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
5333	 183	ADD		 	 
- stack 0: 0x6F8
5334	 184	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
5335	 185	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x18A000201A4FFE400A0000101FD001402380001023800010238000102380001
5336	 186	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x18A000201A4FFE400A0000101FD001402380001023800010238000102380001
- stack 0: 0xF0
5337	 188	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x18A
5338	 189	JUMP		 	 
- stack 0: 0x6F8
5339	 18A	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6F8
5340	 18B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F8
- stack 0: 0x6F8
5341	 18C	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x18A000201A4FFE400A0000101FD001402380001023800010238000102380001
5342	 18D	PUSH1	E0	 	 
- stack 2: 0x6F8
- stack 1: 0x18A000201A4FFE400A0000101FD001402380001023800010238000102380001
- stack 0: 0xE0
5343	 18F	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x18A0002
5344	 190	PUSH2	FFFF	 	 
- stack 2: 0x6F8
- stack 1: 0x18A0002
- stack 0: 0xFFFF
5345	 193	AND		 	 
- stack 1: 0x6F8
- stack 0: 0x2
5346	 194	PUSH1	01	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0x1
5347	 196	SIGNEXTEND		 	 
- stack 1: 0x6F8
- stack 0: 0x2
5348	 197	PUSH2	00A0	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0xA0
5349	 19A	MSTORE		 	  ;; # store to x5
- stack 0: 0x6F8
5350	 19B	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
5351	 19D	ADD		 	 
- stack 0: 0x6FC
5352	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
5353	 19F	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x1A4FFE400A0000101FD00140238000102380001023800010238000102380001
5354	 1A0	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x1A4FFE400A0000101FD00140238000102380001023800010238000102380001
- stack 0: 0xF0
5355	 1A2	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x1A4
5356	 1A3	JUMP		 	 
- stack 0: 0x6FC
5357	 1A4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x6FC
5358	 1A5	PUSH2	0080	 	 
- stack 1: 0x6FC
- stack 0: 0x80
5359	 1A8	MLOAD		 	  ;; # read from x4
- stack 1: 0x6FC
- stack 0: 0x2
5360	 1A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5361	 1AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6FC
- stack 0: 0x2
5362	 1AF	PUSH2	00A0	 	 
- stack 2: 0x6FC
- stack 1: 0x2
- stack 0: 0xA0
5363	 1B2	MLOAD		 	  ;; # read from x5
- stack 2: 0x6FC
- stack 1: 0x2
- stack 0: 0x2
5364	 1B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6FC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5365	 1B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6FC
- stack 1: 0x2
- stack 0: 0x2
5366	 1B9	SUB		 	 
- stack 1: 0x6FC
- stack 0: 0x0
5367	 1BA	PUSH2	01C2	 ;; _neq_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 2: 0x6FC
- stack 1: 0x0
- stack 0: 0x1C2
5368	 1BD	JUMPI		 	 
- stack 0: 0x6FC
5369	 1BE	PUSH2	01DC	 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 1: 0x6FC
- stack 0: 0x1DC
5370	 1C1	JUMP		 	 
- stack 0: 0x6FC
5371	 1DC	JUMPDEST		 ;; _neq_after_dd0b1077ed8734e0e40d006b57dc4e39654dea561bebbe9a7177f3222b65346c	 
- stack 0: 0x6FC
5372	 1DD	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
5373	 1DF	ADD		 	 
- stack 0: 0x700
5374	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
5375	 1E1	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0xA0000101FD0014023800010238000102380001023800010238000102380001
5376	 1E2	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0xA0000101FD0014023800010238000102380001023800010238000102380001
- stack 0: 0xF0
5377	 1E4	SHR		 	 
- stack 1: 0x700
- stack 0: 0xA0
5378	 1E5	JUMP		 	 
- stack 0: 0x700
5379	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x700
5380	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x700
- stack 0: 0x700
5381	 A2	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0xA0000101FD0014023800010238000102380001023800010238000102380001
5382	 A3	PUSH1	E0	 	 
- stack 2: 0x700
- stack 1: 0xA0000101FD0014023800010238000102380001023800010238000102380001
- stack 0: 0xE0
5383	 A5	SHR		 	 
- stack 1: 0x700
- stack 0: 0xA00001
5384	 A6	PUSH2	FFFF	 	 
- stack 2: 0x700
- stack 1: 0xA00001
- stack 0: 0xFFFF
5385	 A9	AND		 	 
- stack 1: 0x700
- stack 0: 0x1
5386	 AA	PUSH1	01	 	 
- stack 2: 0x700
- stack 1: 0x1
- stack 0: 0x1
5387	 AC	SIGNEXTEND		 	 
- stack 1: 0x700
- stack 0: 0x1
5388	 AD	PUSH2	0020	 	 
- stack 2: 0x700
- stack 1: 0x1
- stack 0: 0x20
5389	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x700
5390	 B1	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
5391	 B3	ADD		 	 
- stack 0: 0x704
5392	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
5393	 B5	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x1FD001402380001023800010238000102380001023800010238000102570003
5394	 B6	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x1FD001402380001023800010238000102380001023800010238000102570003
- stack 0: 0xF0
5395	 B8	SHR		 	 
- stack 1: 0x704
- stack 0: 0x1FD
5396	 B9	JUMP		 	 
- stack 0: 0x704
5397	 1FD	JUMPDEST		 ;; __riscvimpl_BGE_0_1_0	  ;; # instr: bge ra,zero,14(ignore imm)
- stack 0: 0x704
5398	 1FE	PUSH1	00	 	 
- stack 1: 0x704
- stack 0: 0x0
5399	 200	PUSH1	03	 	 
- stack 2: 0x704
- stack 1: 0x0
- stack 0: 0x3
5400	 202	SIGNEXTEND		 	 
- stack 1: 0x704
- stack 0: 0x0
5401	 203	PUSH2	0020	 	 
- stack 2: 0x704
- stack 1: 0x0
- stack 0: 0x20
5402	 206	MLOAD		 	  ;; # read from x1
- stack 2: 0x704
- stack 1: 0x0
- stack 0: 0x1
5403	 207	PUSH1	03	 	 
- stack 3: 0x704
- stack 2: 0x0
- stack 1: 0x1
- stack 0: 0x3
5404	 209	SIGNEXTEND		 	 
- stack 2: 0x704
- stack 1: 0x0
- stack 0: 0x1
5405	 20A	SLT		 	  ;; # bge
- stack 1: 0x704
- stack 0: 0x0
5406	 20B	ISZERO		 	 
- stack 1: 0x704
- stack 0: 0x1
5407	 20C	PUSH2	0214	 ;; _bge_3001e47e197b846b6c17a4610bd8e286f2dddd85847e82c944a4ae458dad2814	 
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0x214
5408	 20F	JUMPI		 	 
- stack 0: 0x704
5409	 214	JUMPDEST		 ;; _bge_3001e47e197b846b6c17a4610bd8e286f2dddd85847e82c944a4ae458dad2814	 
- stack 0: 0x704
5410	 215	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x704
- stack 0: 0x704
5411	 216	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x1FD001402380001023800010238000102380001023800010238000102570003
5412	 217	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0x1FD001402380001023800010238000102380001023800010238000102570003
- stack 0: 0xE0
5413	 219	SHR		 	 
- stack 1: 0x704
- stack 0: 0x1FD0014
5414	 21A	PUSH2	FFFF	 	 
- stack 2: 0x704
- stack 1: 0x1FD0014
- stack 0: 0xFFFF
5415	 21D	AND		 	 
- stack 1: 0x704
- stack 0: 0x14
5416	 21E	PUSH1	01	 	 
- stack 2: 0x704
- stack 1: 0x14
- stack 0: 0x1
5417	 220	SIGNEXTEND		 	 
- stack 1: 0x704
- stack 0: 0x14
5418	 221	ADD		 	 
- stack 0: 0x718
5419	 222	PUSH4	FFFFFFFF	 	 
- stack 1: 0x718
- stack 0: 0xFFFFFFFF
5420	 227	AND		 	  ;; # mask to 32 bits
- stack 0: 0x718
5421	 228	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
5422	 229	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x238000102380001025700030086001802710008011100180021000000340768
5423	 22A	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x238000102380001025700030086001802710008011100180021000000340768
- stack 0: 0xF0
5424	 22C	SHR		 	 
- stack 1: 0x718
- stack 0: 0x238
5425	 22D	JUMP		 	 
- stack 0: 0x718
5426	 238	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x718
5427	 239	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
5428	 23A	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x238000102380001025700030086001802710008011100180021000000340768
5429	 23B	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x238000102380001025700030086001802710008011100180021000000340768
- stack 0: 0xE0
5430	 23D	SHR		 	 
- stack 1: 0x718
- stack 0: 0x2380001
5431	 23E	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x2380001
- stack 0: 0xFFFF
5432	 241	AND		 	 
- stack 1: 0x718
- stack 0: 0x1
5433	 242	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x1
- stack 0: 0x1
5434	 244	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x1
5435	 245	PUSH2	0020	 	 
- stack 2: 0x718
- stack 1: 0x1
- stack 0: 0x20
5436	 248	MLOAD		 	  ;; # read from x1
- stack 2: 0x718
- stack 1: 0x1
- stack 0: 0x1
5437	 249	ADD		 	  ;; # ADDI 1
- stack 1: 0x718
- stack 0: 0x2
5438	 24A	PUSH2	0020	 	 
- stack 2: 0x718
- stack 1: 0x2
- stack 0: 0x20
5439	 24D	MSTORE		 	  ;; # store to x1
- stack 0: 0x718
5440	 24E	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
5441	 250	ADD		 	 
- stack 0: 0x71C
5442	 251	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
5443	 252	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x238000102570003008600180271000801110018002100000034076800530042
5444	 253	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x238000102570003008600180271000801110018002100000034076800530042
- stack 0: 0xF0
5445	 255	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x238
5446	 256	JUMP		 	 
- stack 0: 0x71C
5447	 238	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x71C
5448	 239	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
5449	 23A	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x238000102570003008600180271000801110018002100000034076800530042
5450	 23B	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x238000102570003008600180271000801110018002100000034076800530042
- stack 0: 0xE0
5451	 23D	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x2380001
5452	 23E	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x2380001
- stack 0: 0xFFFF
5453	 241	AND		 	 
- stack 1: 0x71C
- stack 0: 0x1
5454	 242	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x1
5455	 244	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0x1
5456	 245	PUSH2	0020	 	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x20
5457	 248	MLOAD		 	  ;; # read from x1
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x2
5458	 249	ADD		 	  ;; # ADDI 1
- stack 1: 0x71C
- stack 0: 0x3
5459	 24A	PUSH2	0020	 	 
- stack 2: 0x71C
- stack 1: 0x3
- stack 0: 0x20
5460	 24D	MSTORE		 	  ;; # store to x1
- stack 0: 0x71C
5461	 24E	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
5462	 250	ADD		 	 
- stack 0: 0x720
5463	 251	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
5464	 252	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x257000300860018027100080111001800210000003407680053004200660000
5465	 253	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0x257000300860018027100080111001800210000003407680053004200660000
- stack 0: 0xF0
5466	 255	SHR		 	 
- stack 1: 0x720
- stack 0: 0x257
5467	 256	JUMP		 	 
- stack 0: 0x720
5468	 257	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,3(ignore imm)
- stack 0: 0x720
5469	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x720
- stack 0: 0x720
5470	 259	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x257000300860018027100080111001800210000003407680053004200660000
5471	 25A	PUSH1	E0	 	 
- stack 2: 0x720
- stack 1: 0x257000300860018027100080111001800210000003407680053004200660000
- stack 0: 0xE0
5472	 25C	SHR		 	 
- stack 1: 0x720
- stack 0: 0x2570003
5473	 25D	PUSH2	FFFF	 	 
- stack 2: 0x720
- stack 1: 0x2570003
- stack 0: 0xFFFF
5474	 260	AND		 	 
- stack 1: 0x720
- stack 0: 0x3
5475	 261	PUSH1	01	 	 
- stack 2: 0x720
- stack 1: 0x3
- stack 0: 0x1
5476	 263	SIGNEXTEND		 	 
- stack 1: 0x720
- stack 0: 0x3
5477	 264	PUSH2	03A0	 	 
- stack 2: 0x720
- stack 1: 0x3
- stack 0: 0x3A0
5478	 267	MSTORE		 	  ;; # store to x29
- stack 0: 0x720
5479	 268	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
5480	 26A	ADD		 	 
- stack 0: 0x724
5481	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
5482	 26C	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x86001802710008011100180021000000340768005300420066000002B30001
5483	 26D	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x86001802710008011100180021000000340768005300420066000002B30001
- stack 0: 0xF0
5484	 26F	SHR		 	 
- stack 1: 0x724
- stack 0: 0x86
5485	 270	JUMP		 	 
- stack 0: 0x724
5486	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x724
5487	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
5488	 88	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x86001802710008011100180021000000340768005300420066000002B30001
5489	 89	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0x86001802710008011100180021000000340768005300420066000002B30001
- stack 0: 0xE0
5490	 8B	SHR		 	 
- stack 1: 0x724
- stack 0: 0x860018
5491	 8C	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0x860018
- stack 0: 0xFFFF
5492	 8F	AND		 	 
- stack 1: 0x724
- stack 0: 0x18
5493	 90	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x18
- stack 0: 0x1
5494	 92	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x18
5495	 93	PUSH2	0380	 	 
- stack 2: 0x724
- stack 1: 0x18
- stack 0: 0x380
5496	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x724
5497	 97	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
5498	 99	ADD		 	 
- stack 0: 0x728
5499	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
5500	 9B	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x2710008011100180021000000340768005300420066000002B3000100210000
5501	 9C	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x2710008011100180021000000340768005300420066000002B3000100210000
- stack 0: 0xF0
5502	 9E	SHR		 	 
- stack 1: 0x728
- stack 0: 0x271
5503	 9F	JUMP		 	 
- stack 0: 0x728
5504	 271	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,8(ignore imm)
- stack 0: 0x728
5505	 272	PUSH2	0020	 	 
- stack 1: 0x728
- stack 0: 0x20
5506	 275	MLOAD		 	  ;; # read from x1
- stack 1: 0x728
- stack 0: 0x3
5507	 276	PUSH4	FFFFFFFF	 	 
- stack 2: 0x728
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
5508	 27B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x728
- stack 0: 0x3
5509	 27C	PUSH2	03A0	 	 
- stack 2: 0x728
- stack 1: 0x3
- stack 0: 0x3A0
5510	 27F	MLOAD		 	  ;; # read from x29
- stack 2: 0x728
- stack 1: 0x3
- stack 0: 0x3
5511	 280	PUSH4	FFFFFFFF	 	 
- stack 3: 0x728
- stack 2: 0x3
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
5512	 285	AND		 	  ;; # mask to 32 bits
- stack 2: 0x728
- stack 1: 0x3
- stack 0: 0x3
5513	 286	SUB		 	 
- stack 1: 0x728
- stack 0: 0x0
5514	 287	PUSH2	028F	 ;; _neq_96e3d0173e55942c23406202c03bd79ce4c212707420c1dfb67451e173edeffe	 
- stack 2: 0x728
- stack 1: 0x0
- stack 0: 0x28F
5515	 28A	JUMPI		 	 
- stack 0: 0x728
5516	 28B	PUSH2	02A9	 ;; _neq_after_96e3d0173e55942c23406202c03bd79ce4c212707420c1dfb67451e173edeffe	 
- stack 1: 0x728
- stack 0: 0x2A9
5517	 28E	JUMP		 	 
- stack 0: 0x728
5518	 2A9	JUMPDEST		 ;; _neq_after_96e3d0173e55942c23406202c03bd79ce4c212707420c1dfb67451e173edeffe	 
- stack 0: 0x728
5519	 2AA	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
5520	 2AC	ADD		 	 
- stack 0: 0x72C
5521	 2AD	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
5522	 2AE	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x11100180021000000340768005300420066000002B30001002100000034076C
5523	 2AF	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x11100180021000000340768005300420066000002B30001002100000034076C
- stack 0: 0xF0
5524	 2B1	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x111
5525	 2B2	JUMP		 	 
- stack 0: 0x72C
5526	 111	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,310(ignore imm)
- stack 0: 0x72C
5527	 112	PUSH1	00	 	 
- stack 1: 0x72C
- stack 0: 0x0
5528	 114	PUSH4	FFFFFFFF	 	 
- stack 2: 0x72C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
5529	 119	AND		 	  ;; # mask to 32 bits
- stack 1: 0x72C
- stack 0: 0x0
5530	 11A	PUSH2	0380	 	 
- stack 2: 0x72C
- stack 1: 0x0
- stack 0: 0x380
5531	 11D	MLOAD		 	  ;; # read from x28
- stack 2: 0x72C
- stack 1: 0x0
- stack 0: 0x18
5532	 11E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x72C
- stack 2: 0x0
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
5533	 123	AND		 	  ;; # mask to 32 bits
- stack 2: 0x72C
- stack 1: 0x0
- stack 0: 0x18
5534	 124	SUB		 	 
- stack 1: 0x72C
- stack 0: 0x18
5535	 125	PUSH2	012D	 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 2: 0x72C
- stack 1: 0x18
- stack 0: 0x12D
5536	 128	JUMPI		 	 
- stack 0: 0x72C
5537	 12D	JUMPDEST		 ;; _neq_71f82d2d05b6b6885b4cb8da9f402ace70a12177909e6c30978c1b1b922b6fb2	 
- stack 0: 0x72C
5538	 12E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
5539	 12F	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x11100180021000000340768005300420066000002B30001002100000034076C
5540	 130	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0x11100180021000000340768005300420066000002B30001002100000034076C
- stack 0: 0xE0
5541	 132	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x1110018
5542	 133	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0x1110018
- stack 0: 0xFFFF
5543	 136	AND		 	 
- stack 1: 0x72C
- stack 0: 0x18
5544	 137	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x18
- stack 0: 0x1
5545	 139	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x18
5546	 13A	ADD		 	 
- stack 0: 0x744
5547	 13B	PUSH4	FFFFFFFF	 	 
- stack 1: 0x744
- stack 0: 0xFFFFFFFF
5548	 140	AND		 	  ;; # mask to 32 bits
- stack 0: 0x744
5549	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
5550	 142	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x2100000034076C005300420066000002BE000000660000000000006574796D
5551	 143	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x2100000034076C005300420066000002BE000000660000000000006574796D
- stack 0: 0xF0
5552	 145	SHR		 	 
- stack 1: 0x744
- stack 0: 0x21
5553	 146	JUMP		 	 
- stack 0: 0x744
5554	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x744
5555	 22	PUSH4	00000000	 	 
- stack 1: 0x744
- stack 0: 0x0
5556	 27	PUSH2	0160	 	 
- stack 2: 0x744
- stack 1: 0x0
- stack 0: 0x160
5557	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x744
5558	 2B	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
5559	 2D	ADD		 	 
- stack 0: 0x748
5560	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
5561	 2F	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x34076C005300420066000002BE000000660000000000006574796D00007473
5562	 30	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x34076C005300420066000002BE000000660000000000006574796D00007473
- stack 0: 0xF0
5563	 32	SHR		 	 
- stack 1: 0x748
- stack 0: 0x34
5564	 33	JUMP		 	 
- stack 0: 0x748
5565	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1888(ignore imm)
- stack 0: 0x748
5566	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
5567	 36	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x34076C005300420066000002BE000000660000000000006574796D00007473
5568	 37	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0x34076C005300420066000002BE000000660000000000006574796D00007473
- stack 0: 0xE0
5569	 39	SHR		 	 
- stack 1: 0x748
- stack 0: 0x34076C
5570	 3A	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0x34076C
- stack 0: 0xFFFF
5571	 3D	AND		 	 
- stack 1: 0x748
- stack 0: 0x76C
5572	 3E	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0x76C
- stack 0: 0x1
5573	 40	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0x76C
5574	 41	PUSH2	0160	 	 
- stack 2: 0x748
- stack 1: 0x76C
- stack 0: 0x160
5575	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x748
- stack 1: 0x76C
- stack 0: 0x0
5576	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x748
- stack 0: 0x76C
5577	 46	PUSH2	0160	 	 
- stack 2: 0x748
- stack 1: 0x76C
- stack 0: 0x160
5578	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x748
5579	 4A	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
5580	 4C	ADD		 	 
- stack 0: 0x74C
5581	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
5582	 4E	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x5300420066000002BE000000660000000000006574796D0000747300525245
5583	 4F	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x5300420066000002BE000000660000000000006574796D0000747300525245
- stack 0: 0xF0
5584	 51	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x53
5585	 52	JUMP		 	 
- stack 0: 0x74C
5586	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x74C
5587	 54	PUSH4	00042000	 	 
- stack 1: 0x74C
- stack 0: 0x42000
5588	 59	PUSH2	0140	 	 
- stack 2: 0x74C
- stack 1: 0x42000
- stack 0: 0x140
5589	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x74C
5590	 5D	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
5591	 5F	ADD		 	 
- stack 0: 0x750
5592	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
5593	 61	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x66000002BE000000660000000000006574796D000074730052524500004B4F
5594	 62	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x66000002BE000000660000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
5595	 64	SHR		 	 
- stack 1: 0x750
- stack 0: 0x66
5596	 65	JUMP		 	 
- stack 0: 0x750
5597	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x750
5598	 67	PUSH2	0140	 	 
- stack 1: 0x750
- stack 0: 0x140
5599	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x750
- stack 0: 0x42000
5600	 6B	PUSH2	0075	 ;; _ecall_cbb3db1db70e75a8356401ecd48f516c78afbd75b0899b82a3dab2d6d2f3a6b7	 
- stack 2: 0x750
- stack 1: 0x42000
- stack 0: 0x75
5601	 6E	JUMPI		 	 
- stack 0: 0x750
5602	 75	JUMPDEST		 ;; _ecall_cbb3db1db70e75a8356401ecd48f516c78afbd75b0899b82a3dab2d6d2f3a6b7	 
- stack 0: 0x750
5603	 76	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
5604	 78	PUSH2	0160	 	 
- stack 2: 0x750
- stack 1: 0x4
- stack 0: 0x160
5605	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x750
- stack 1: 0x4
- stack 0: 0x76C
5606	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x750
5607	 7D	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
5608	 7F	ADD		 	 
- stack 0: 0x754
5609	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
5610	 81	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x2BE000000660000000000006574796D000074730052524500004B4F00000000
5611	 82	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x2BE000000660000000000006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
5612	 84	SHR		 	 
- stack 1: 0x754
- stack 0: 0x2BE
5613	 85	JUMP		 	 
- stack 0: 0x754
5614	 2BE	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x754
5615	 2BF	PUSH4	00000000	 	 
- stack 1: 0x754
- stack 0: 0x0
5616	 2C4	PUSH2	0140	 	 
- stack 2: 0x754
- stack 1: 0x0
- stack 0: 0x140
5617	 2C7	MSTORE		 	  ;; # store to x10
- stack 0: 0x754
5618	 2C8	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
5619	 2CA	ADD		 	 
- stack 0: 0x758
5620	 2CB	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
5621	 2CC	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x660000000000006574796D000074730052524500004B4F0000000000000000
5622	 2CD	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0x660000000000006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
5623	 2CF	SHR		 	 
- stack 1: 0x758
- stack 0: 0x66
5624	 2D0	JUMP		 	 
- stack 0: 0x758
5625	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x758
5626	 67	PUSH2	0140	 	 
- stack 1: 0x758
- stack 0: 0x140
5627	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x758
- stack 0: 0x0
5628	 6B	PUSH2	0075	 ;; _ecall_cbb3db1db70e75a8356401ecd48f516c78afbd75b0899b82a3dab2d6d2f3a6b7	 
- stack 2: 0x758
- stack 1: 0x0
- stack 0: 0x75
5629	 6E	JUMPI		 	 
- stack 0: 0x758
5630	 6F	PUSH1	20	 	 
- stack 1: 0x758
- stack 0: 0x20
5631	 71	PUSH2	0160	 	 
- stack 2: 0x758
- stack 1: 0x20
- stack 0: 0x160
5632	 74	RETURN		 	 
Final bytecode length; 1602
Returned: 000000000000000000000000000000000000000000000000000000000000076c
gasUsed : 20057
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c
** HOT: 430 - range: 430,434,438,43c
** HOT: 450 - range: 450,454,458,45c
** HOT: 470 - range: 470,474,478,47c
** HOT: 490 - range: 490,494,498,49c
** HOT: 4b0 - range: 4b0,4b4,4b8,4bc
** HOT: 4d0 - range: 4d0,4d4,4d8,4dc
** HOT: 4ec - range: 4ec,4f0,4f4,4f8
** HOT: 508 - range: 508,50c,510,514
** HOT: 524 - range: 524,528,52c,530
** HOT: 540 - range: 540,544,548,54c,550
** HOT: 548 - range: 548,54c,550
** HOT: 554 - range: 554,558,55c
** HOT: 560 - range: 560,564,568,56c,570,574
** HOT: 568 - range: 568,56c,570,574
** HOT: 578 - range: 578,57c,580
** HOT: 584 - range: 584,588,58c,590,594,598,59c
** HOT: 58c - range: 58c,590,594,598,59c
** HOT: 5a0 - range: 5a0,5a4,5a8
** HOT: 5ac - range: 5ac,5b0,5b4,5b8,5bc,5c0
** HOT: 5b4 - range: 5b4,5b8,5bc,5c0
** HOT: 5c4 - range: 5c4,5c8,5cc
** HOT: 5d0 - range: 5d0,5d4,5d8,5dc,5e0,5e4,5e8
** HOT: 5d8 - range: 5d8,5dc,5e0,5e4,5e8
** HOT: 5ec - range: 5ec,5f0,5f4
** HOT: 5f8 - range: 5f8,5fc,600,604,608,60c,610
** HOT: 600 - range: 600,604,608,60c,610
** HOT: 614 - range: 614,618,61c
** HOT: 620 - range: 620,624,628,62c,630
** HOT: 628 - range: 628,62c,630
** HOT: 634 - range: 634,638,63c
** HOT: 640 - range: 640,644,648,64c,650,654
** HOT: 648 - range: 648,64c,650,654
** HOT: 658 - range: 658,65c,660
** HOT: 664 - range: 664,668,66c,670,674,678,67c
** HOT: 66c - range: 66c,670,674,678,67c
** HOT: 680 - range: 680,684,688
** HOT: 68c - range: 68c,690,694,698,69c,6a0
** HOT: 694 - range: 694,698,69c,6a0
** HOT: 6a4 - range: 6a4,6a8,6ac
** HOT: 6b0 - range: 6b0,6b4,6b8,6bc,6c0,6c4,6c8
** HOT: 6b8 - range: 6b8,6bc,6c0,6c4,6c8
** HOT: 6cc - range: 6cc,6d0,6d4
** HOT: 6d8 - range: 6d8,6dc,6e0,6e4,6e8,6ec,6f0
** HOT: 6e0 - range: 6e0,6e4,6e8,6ec,6f0
** HOT: 6f4 - range: 6f4,6f8,6fc
** HOT: 718 - range: 718,71c,720,724,728
