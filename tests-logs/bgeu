Running in EVM:
0	 0	PUSH4	03A0	 	 
- stack 0: 0x3A0
1	 5	PUSH2	0329	 ;; _rambegin	 
- stack 1: 0x3A0
- stack 0: 0x329
2	 8	PUSH1	01	 	 
- stack 2: 0x3A0
- stack 1: 0x329
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x3A0
- stack 0: 0x32A
4	 B	PUSH2	0400	 	 
- stack 2: 0x3A0
- stack 1: 0x32A
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100000034079000530042006600000086000200A0000000BA000000D4000C
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100000034079000530042006600000086000200A0000000BA000000D4000C
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34079000530042006600000086000200A0000000BA000000D4000C01170344
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34079000530042006600000086000200A0000000BA000000D4000C01170344
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1936(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34079000530042006600000086000200A0000000BA000000D4000C01170344
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34079000530042006600000086000200A0000000BA000000D4000C01170344
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340790
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340790
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x790
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x790
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x790
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x790
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x790
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x790
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x790
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000200A0000000BA000000D4000C011703440117000C
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000200A0000000BA000000D4000C011703440117000C
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000200A0000000BA000000D4000C011703440117000C00D4FFFC
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000200A0000000BA000000D4000C011703440117000C00D4FFFC
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_828c8ba48fedb93fe8f2f9d96ba68a2e4d861c3b580c58554da2c7323d86962a	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_828c8ba48fedb93fe8f2f9d96ba68a2e4d861c3b580c58554da2c7323d86962a	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x790
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA000000D4000C011703440117000C00D4FFFC01170338
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA000000D4000C011703440117000C00D4FFFC01170338
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA000000D4000C011703440117000C00D4FFFC01170338
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA000000D4000C011703440117000C00D4FFFC01170338
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860002
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860002
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x2
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x2
84	 93	PUSH2	0380	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x380
85	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000D4000C011703440117000C00D4FFFC0117033800860003
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000D4000C011703440117000C00D4FFFC0117033800860003
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000D4000C011703440117000C00D4FFFC0117033800860003
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000D4000C011703440117000C00D4FFFC0117033800860003
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x20
103	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
104	 B1	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
105	 B3	ADD		 	 
- stack 0: 0x418
106	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
107	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000000D4000C011703440117000C00D4FFFC011703380086000300A00001
108	 B6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBA000000D4000C011703440117000C00D4FFFC011703380086000300A00001
- stack 0: 0xF0
109	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA
110	 B9	JUMP		 	 
- stack 0: 0x418
111	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x418
112	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
113	 BC	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000000D4000C011703440117000C00D4FFFC011703380086000300A00001
114	 BD	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xBA000000D4000C011703440117000C00D4FFFC011703380086000300A00001
- stack 0: 0xE0
115	 BF	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA0000
116	 C0	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xBA0000
- stack 0: 0xFFFF
117	 C3	AND		 	 
- stack 1: 0x418
- stack 0: 0x0
118	 C4	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x1
119	 C6	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0x0
120	 C7	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x40
121	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x418
122	 CB	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
123	 CD	ADD		 	 
- stack 0: 0x41C
124	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
125	 CF	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C011703440117000C00D4FFFC011703380086000300A0000100BA0001
126	 D0	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C011703440117000C00D4FFFC011703380086000300A0000100BA0001
- stack 0: 0xF0
127	 D2	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD4
128	 D3	JUMP		 	 
- stack 0: 0x41C
129	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x41C
130	 D5	PUSH2	0040	 	 
- stack 1: 0x41C
- stack 0: 0x40
131	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x41C
- stack 0: 0x0
132	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
133	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x41C
- stack 0: 0x0
134	 DF	PUSH2	0020	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x20
135	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x0
136	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x41C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
137	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x0
138	 E9	LT		 	  ;; # bgeu
- stack 1: 0x41C
- stack 0: 0x0
139	 EA	ISZERO		 	 
- stack 1: 0x41C
- stack 0: 0x1
140	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0xF3
141	 EE	JUMPI		 	 
- stack 0: 0x41C
142	 F3	JUMPDEST		 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x41C
143	 F4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
144	 F5	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C011703440117000C00D4FFFC011703380086000300A0000100BA0001
145	 F6	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C011703440117000C00D4FFFC011703380086000300A0000100BA0001
- stack 0: 0xE0
146	 F8	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C
147	 F9	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
148	 FC	AND		 	 
- stack 1: 0x41C
- stack 0: 0xC
149	 FD	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0xC
- stack 0: 0x1
150	 FF	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0xC
151	 100	ADD		 	 
- stack 0: 0x428
152	 101	PUSH4	FFFFFFFF	 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFF
153	 106	AND		 	  ;; # mask to 32 bits
- stack 0: 0x428
154	 107	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
155	 108	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC011703380086000300A0000100BA000100D4000C011703240117000C
156	 109	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC011703380086000300A0000100BA000100D4000C011703240117000C
- stack 0: 0xF0
157	 10B	SHR		 	 
- stack 1: 0x428
- stack 0: 0xD4
158	 10C	JUMP		 	 
- stack 0: 0x428
159	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x428
160	 D5	PUSH2	0040	 	 
- stack 1: 0x428
- stack 0: 0x40
161	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x428
- stack 0: 0x0
162	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
163	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x428
- stack 0: 0x0
164	 DF	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x20
165	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x0
166	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x428
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
167	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x0
168	 E9	LT		 	  ;; # bgeu
- stack 1: 0x428
- stack 0: 0x0
169	 EA	ISZERO		 	 
- stack 1: 0x428
- stack 0: 0x1
170	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0xF3
171	 EE	JUMPI		 	 
- stack 0: 0x428
172	 F3	JUMPDEST		 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x428
173	 F4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
174	 F5	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC011703380086000300A0000100BA000100D4000C011703240117000C
175	 F6	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC011703380086000300A0000100BA000100D4000C011703240117000C
- stack 0: 0xE0
176	 F8	SHR		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC
177	 F9	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
178	 FC	AND		 	 
- stack 1: 0x428
- stack 0: 0xFFFC
179	 FD	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0xFFFC
- stack 0: 0x1
180	 FF	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
181	 100	ADD		 	 
- stack 0: 0x424
182	 101	PUSH4	FFFFFFFF	 	 
- stack 1: 0x424
- stack 0: 0xFFFFFFFF
183	 106	AND		 	  ;; # mask to 32 bits
- stack 0: 0x424
184	 107	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
185	 108	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x117000C00D4FFFC011703380086000300A0000100BA000100D4000C01170324
186	 109	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x117000C00D4FFFC011703380086000300A0000100BA000100D4000C01170324
- stack 0: 0xF0
187	 10B	SHR		 	 
- stack 1: 0x424
- stack 0: 0x117
188	 10C	JUMP		 	 
- stack 0: 0x424
189	 117	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,344(ignore imm)
- stack 0: 0x424
190	 118	PUSH1	00	 	 
- stack 1: 0x424
- stack 0: 0x0
191	 11A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
192	 11F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x0
193	 120	PUSH2	0380	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x380
194	 123	MLOAD		 	  ;; # read from x28
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x2
195	 124	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0x0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
196	 129	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x2
197	 12A	SUB		 	 
- stack 1: 0x424
- stack 0: 0x2
198	 12B	PUSH2	0133	 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 2: 0x424
- stack 1: 0x2
- stack 0: 0x133
199	 12E	JUMPI		 	 
- stack 0: 0x424
200	 133	JUMPDEST		 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 0: 0x424
201	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
202	 135	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x117000C00D4FFFC011703380086000300A0000100BA000100D4000C01170324
203	 136	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x117000C00D4FFFC011703380086000300A0000100BA000100D4000C01170324
- stack 0: 0xE0
204	 138	SHR		 	 
- stack 1: 0x424
- stack 0: 0x117000C
205	 139	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x117000C
- stack 0: 0xFFFF
206	 13C	AND		 	 
- stack 1: 0x424
- stack 0: 0xC
207	 13D	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0xC
- stack 0: 0x1
208	 13F	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0xC
209	 140	ADD		 	 
- stack 0: 0x430
210	 141	PUSH4	FFFFFFFF	 	 
- stack 1: 0x430
- stack 0: 0xFFFFFFFF
211	 146	AND		 	  ;; # mask to 32 bits
- stack 0: 0x430
212	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
213	 148	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x86000300A0000100BA000100D4000C011703240117000C00D4FFFC01170318
214	 149	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x86000300A0000100BA000100D4000C011703240117000C00D4FFFC01170318
- stack 0: 0xF0
215	 14B	SHR		 	 
- stack 1: 0x430
- stack 0: 0x86
216	 14C	JUMP		 	 
- stack 0: 0x430
217	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x430
218	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
219	 88	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x86000300A0000100BA000100D4000C011703240117000C00D4FFFC01170318
220	 89	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0x86000300A0000100BA000100D4000C011703240117000C00D4FFFC01170318
- stack 0: 0xE0
221	 8B	SHR		 	 
- stack 1: 0x430
- stack 0: 0x860003
222	 8C	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0x860003
- stack 0: 0xFFFF
223	 8F	AND		 	 
- stack 1: 0x430
- stack 0: 0x3
224	 90	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x1
225	 92	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x3
226	 93	PUSH2	0380	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x380
227	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x430
228	 97	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
229	 99	ADD		 	 
- stack 0: 0x434
230	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
231	 9B	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xA0000100BA000100D4000C011703240117000C00D4FFFC0117031800860004
232	 9C	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xA0000100BA000100D4000C011703240117000C00D4FFFC0117031800860004
- stack 0: 0xF0
233	 9E	SHR		 	 
- stack 1: 0x434
- stack 0: 0xA0
234	 9F	JUMP		 	 
- stack 0: 0x434
235	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x434
236	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
237	 A2	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xA0000100BA000100D4000C011703240117000C00D4FFFC0117031800860004
238	 A3	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xA0000100BA000100D4000C011703240117000C00D4FFFC0117031800860004
- stack 0: 0xE0
239	 A5	SHR		 	 
- stack 1: 0x434
- stack 0: 0xA00001
240	 A6	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xA00001
- stack 0: 0xFFFF
241	 A9	AND		 	 
- stack 1: 0x434
- stack 0: 0x1
242	 AA	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0x1
- stack 0: 0x1
243	 AC	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0x1
244	 AD	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0x1
- stack 0: 0x20
245	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x434
246	 B1	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
247	 B3	ADD		 	 
- stack 0: 0x438
248	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
249	 B5	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xBA000100D4000C011703240117000C00D4FFFC011703180086000400A0FFFF
250	 B6	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xBA000100D4000C011703240117000C00D4FFFC011703180086000400A0FFFF
- stack 0: 0xF0
251	 B8	SHR		 	 
- stack 1: 0x438
- stack 0: 0xBA
252	 B9	JUMP		 	 
- stack 0: 0x438
253	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x438
254	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
255	 BC	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xBA000100D4000C011703240117000C00D4FFFC011703180086000400A0FFFF
256	 BD	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xBA000100D4000C011703240117000C00D4FFFC011703180086000400A0FFFF
- stack 0: 0xE0
257	 BF	SHR		 	 
- stack 1: 0x438
- stack 0: 0xBA0001
258	 C0	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xBA0001
- stack 0: 0xFFFF
259	 C3	AND		 	 
- stack 1: 0x438
- stack 0: 0x1
260	 C4	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x1
- stack 0: 0x1
261	 C6	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x1
262	 C7	PUSH2	0040	 	 
- stack 2: 0x438
- stack 1: 0x1
- stack 0: 0x40
263	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x438
264	 CB	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
265	 CD	ADD		 	 
- stack 0: 0x43C
266	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
267	 CF	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C011703240117000C00D4FFFC011703180086000400A0FFFF00BAFFFF
268	 D0	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C011703240117000C00D4FFFC011703180086000400A0FFFF00BAFFFF
- stack 0: 0xF0
269	 D2	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xD4
270	 D3	JUMP		 	 
- stack 0: 0x43C
271	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x43C
272	 D5	PUSH2	0040	 	 
- stack 1: 0x43C
- stack 0: 0x40
273	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x43C
- stack 0: 0x1
274	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
275	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0x1
276	 DF	PUSH2	0020	 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x20
277	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x1
278	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
279	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x1
280	 E9	LT		 	  ;; # bgeu
- stack 1: 0x43C
- stack 0: 0x0
281	 EA	ISZERO		 	 
- stack 1: 0x43C
- stack 0: 0x1
282	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0xF3
283	 EE	JUMPI		 	 
- stack 0: 0x43C
284	 F3	JUMPDEST		 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x43C
285	 F4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
286	 F5	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C011703240117000C00D4FFFC011703180086000400A0FFFF00BAFFFF
287	 F6	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C011703240117000C00D4FFFC011703180086000400A0FFFF00BAFFFF
- stack 0: 0xE0
288	 F8	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C
289	 F9	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
290	 FC	AND		 	 
- stack 1: 0x43C
- stack 0: 0xC
291	 FD	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0xC
- stack 0: 0x1
292	 FF	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0xC
293	 100	ADD		 	 
- stack 0: 0x448
294	 101	PUSH4	FFFFFFFF	 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFF
295	 106	AND		 	  ;; # mask to 32 bits
- stack 0: 0x448
296	 107	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
297	 108	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC011703180086000400A0FFFF00BAFFFF00D4000C011703040117000C
298	 109	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC011703180086000400A0FFFF00BAFFFF00D4000C011703040117000C
- stack 0: 0xF0
299	 10B	SHR		 	 
- stack 1: 0x448
- stack 0: 0xD4
300	 10C	JUMP		 	 
- stack 0: 0x448
301	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x448
302	 D5	PUSH2	0040	 	 
- stack 1: 0x448
- stack 0: 0x40
303	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x448
- stack 0: 0x1
304	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
305	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0x1
306	 DF	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x20
307	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x1
308	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x448
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
309	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x1
310	 E9	LT		 	  ;; # bgeu
- stack 1: 0x448
- stack 0: 0x0
311	 EA	ISZERO		 	 
- stack 1: 0x448
- stack 0: 0x1
312	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0xF3
313	 EE	JUMPI		 	 
- stack 0: 0x448
314	 F3	JUMPDEST		 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x448
315	 F4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x448
- stack 0: 0x448
316	 F5	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC011703180086000400A0FFFF00BAFFFF00D4000C011703040117000C
317	 F6	PUSH1	E0	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC011703180086000400A0FFFF00BAFFFF00D4000C011703040117000C
- stack 0: 0xE0
318	 F8	SHR		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC
319	 F9	PUSH2	FFFF	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
320	 FC	AND		 	 
- stack 1: 0x448
- stack 0: 0xFFFC
321	 FD	PUSH1	01	 	 
- stack 2: 0x448
- stack 1: 0xFFFC
- stack 0: 0x1
322	 FF	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
323	 100	ADD		 	 
- stack 0: 0x444
324	 101	PUSH4	FFFFFFFF	 	 
- stack 1: 0x444
- stack 0: 0xFFFFFFFF
325	 106	AND		 	  ;; # mask to 32 bits
- stack 0: 0x444
326	 107	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
327	 108	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x117000C00D4FFFC011703180086000400A0FFFF00BAFFFF00D4000C01170304
328	 109	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x117000C00D4FFFC011703180086000400A0FFFF00BAFFFF00D4000C01170304
- stack 0: 0xF0
329	 10B	SHR		 	 
- stack 1: 0x444
- stack 0: 0x117
330	 10C	JUMP		 	 
- stack 0: 0x444
331	 117	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,344(ignore imm)
- stack 0: 0x444
332	 118	PUSH1	00	 	 
- stack 1: 0x444
- stack 0: 0x0
333	 11A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
334	 11F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x444
- stack 0: 0x0
335	 120	PUSH2	0380	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x380
336	 123	MLOAD		 	  ;; # read from x28
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x3
337	 124	PUSH4	FFFFFFFF	 	 
- stack 3: 0x444
- stack 2: 0x0
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
338	 129	AND		 	  ;; # mask to 32 bits
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x3
339	 12A	SUB		 	 
- stack 1: 0x444
- stack 0: 0x3
340	 12B	PUSH2	0133	 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 2: 0x444
- stack 1: 0x3
- stack 0: 0x133
341	 12E	JUMPI		 	 
- stack 0: 0x444
342	 133	JUMPDEST		 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 0: 0x444
343	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
344	 135	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x117000C00D4FFFC011703180086000400A0FFFF00BAFFFF00D4000C01170304
345	 136	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0x117000C00D4FFFC011703180086000400A0FFFF00BAFFFF00D4000C01170304
- stack 0: 0xE0
346	 138	SHR		 	 
- stack 1: 0x444
- stack 0: 0x117000C
347	 139	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0x117000C
- stack 0: 0xFFFF
348	 13C	AND		 	 
- stack 1: 0x444
- stack 0: 0xC
349	 13D	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0xC
- stack 0: 0x1
350	 13F	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0xC
351	 140	ADD		 	 
- stack 0: 0x450
352	 141	PUSH4	FFFFFFFF	 	 
- stack 1: 0x450
- stack 0: 0xFFFFFFFF
353	 146	AND		 	  ;; # mask to 32 bits
- stack 0: 0x450
354	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
355	 148	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x86000400A0FFFF00BAFFFF00D4000C011703040117000C00D4FFFC011702F8
356	 149	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x86000400A0FFFF00BAFFFF00D4000C011703040117000C00D4FFFC011702F8
- stack 0: 0xF0
357	 14B	SHR		 	 
- stack 1: 0x450
- stack 0: 0x86
358	 14C	JUMP		 	 
- stack 0: 0x450
359	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
360	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
361	 88	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x86000400A0FFFF00BAFFFF00D4000C011703040117000C00D4FFFC011702F8
362	 89	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x86000400A0FFFF00BAFFFF00D4000C011703040117000C00D4FFFC011702F8
- stack 0: 0xE0
363	 8B	SHR		 	 
- stack 1: 0x450
- stack 0: 0x860004
364	 8C	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x860004
- stack 0: 0xFFFF
365	 8F	AND		 	 
- stack 1: 0x450
- stack 0: 0x4
366	 90	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x1
367	 92	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x4
368	 93	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x380
369	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
370	 97	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
371	 99	ADD		 	 
- stack 0: 0x454
372	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
373	 9B	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xA0FFFF00BAFFFF00D4000C011703040117000C00D4FFFC011702F800860005
374	 9C	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0xA0FFFF00BAFFFF00D4000C011703040117000C00D4FFFC011702F800860005
- stack 0: 0xF0
375	 9E	SHR		 	 
- stack 1: 0x454
- stack 0: 0xA0
376	 9F	JUMP		 	 
- stack 0: 0x454
377	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x454
378	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
379	 A2	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xA0FFFF00BAFFFF00D4000C011703040117000C00D4FFFC011702F800860005
380	 A3	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0xA0FFFF00BAFFFF00D4000C011703040117000C00D4FFFC011702F800860005
- stack 0: 0xE0
381	 A5	SHR		 	 
- stack 1: 0x454
- stack 0: 0xA0FFFF
382	 A6	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
383	 A9	AND		 	 
- stack 1: 0x454
- stack 0: 0xFFFF
384	 AA	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0xFFFF
- stack 0: 0x1
385	 AC	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
386	 AD	PUSH2	0020	 	 
- stack 2: 0x454
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
387	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x454
388	 B1	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
389	 B3	ADD		 	 
- stack 0: 0x458
390	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
391	 B5	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xBAFFFF00D4000C011703040117000C00D4FFFC011702F80086000500A00001
392	 B6	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0xBAFFFF00D4000C011703040117000C00D4FFFC011702F80086000500A00001
- stack 0: 0xF0
393	 B8	SHR		 	 
- stack 1: 0x458
- stack 0: 0xBA
394	 B9	JUMP		 	 
- stack 0: 0x458
395	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x458
396	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
397	 BC	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xBAFFFF00D4000C011703040117000C00D4FFFC011702F80086000500A00001
398	 BD	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0xBAFFFF00D4000C011703040117000C00D4FFFC011702F80086000500A00001
- stack 0: 0xE0
399	 BF	SHR		 	 
- stack 1: 0x458
- stack 0: 0xBAFFFF
400	 C0	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
401	 C3	AND		 	 
- stack 1: 0x458
- stack 0: 0xFFFF
402	 C4	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0xFFFF
- stack 0: 0x1
403	 C6	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
404	 C7	PUSH2	0040	 	 
- stack 2: 0x458
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
405	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x458
406	 CB	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
407	 CD	ADD		 	 
- stack 0: 0x45C
408	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
409	 CF	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C011703040117000C00D4FFFC011702F80086000500A0000100BA0000
410	 D0	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C011703040117000C00D4FFFC011702F80086000500A0000100BA0000
- stack 0: 0xF0
411	 D2	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xD4
412	 D3	JUMP		 	 
- stack 0: 0x45C
413	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x45C
414	 D5	PUSH2	0040	 	 
- stack 1: 0x45C
- stack 0: 0x40
415	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x45C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
416	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
417	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x45C
- stack 0: 0xFFFFFFFF
418	 DF	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFF
- stack 0: 0x20
419	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x45C
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
420	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x45C
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
421	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x45C
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
422	 E9	LT		 	  ;; # bgeu
- stack 1: 0x45C
- stack 0: 0x0
423	 EA	ISZERO		 	 
- stack 1: 0x45C
- stack 0: 0x1
424	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x45C
- stack 1: 0x1
- stack 0: 0xF3
425	 EE	JUMPI		 	 
- stack 0: 0x45C
426	 F3	JUMPDEST		 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x45C
427	 F4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
428	 F5	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C011703040117000C00D4FFFC011702F80086000500A0000100BA0000
429	 F6	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C011703040117000C00D4FFFC011702F80086000500A0000100BA0000
- stack 0: 0xE0
430	 F8	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C
431	 F9	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
432	 FC	AND		 	 
- stack 1: 0x45C
- stack 0: 0xC
433	 FD	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0xC
- stack 0: 0x1
434	 FF	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0xC
435	 100	ADD		 	 
- stack 0: 0x468
436	 101	PUSH4	FFFFFFFF	 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFF
437	 106	AND		 	  ;; # mask to 32 bits
- stack 0: 0x468
438	 107	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
439	 108	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC011702F80086000500A0000100BA000000D4000C011702E40117000C
440	 109	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC011702F80086000500A0000100BA000000D4000C011702E40117000C
- stack 0: 0xF0
441	 10B	SHR		 	 
- stack 1: 0x468
- stack 0: 0xD4
442	 10C	JUMP		 	 
- stack 0: 0x468
443	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x468
444	 D5	PUSH2	0040	 	 
- stack 1: 0x468
- stack 0: 0x40
445	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
446	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
447	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x468
- stack 0: 0xFFFFFFFF
448	 DF	PUSH2	0020	 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFF
- stack 0: 0x20
449	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x468
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
450	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x468
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
451	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x468
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
452	 E9	LT		 	  ;; # bgeu
- stack 1: 0x468
- stack 0: 0x0
453	 EA	ISZERO		 	 
- stack 1: 0x468
- stack 0: 0x1
454	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x468
- stack 1: 0x1
- stack 0: 0xF3
455	 EE	JUMPI		 	 
- stack 0: 0x468
456	 F3	JUMPDEST		 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x468
457	 F4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
458	 F5	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC011702F80086000500A0000100BA000000D4000C011702E40117000C
459	 F6	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC011702F80086000500A0000100BA000000D4000C011702E40117000C
- stack 0: 0xE0
460	 F8	SHR		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC
461	 F9	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
462	 FC	AND		 	 
- stack 1: 0x468
- stack 0: 0xFFFC
463	 FD	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0xFFFC
- stack 0: 0x1
464	 FF	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
465	 100	ADD		 	 
- stack 0: 0x464
466	 101	PUSH4	FFFFFFFF	 	 
- stack 1: 0x464
- stack 0: 0xFFFFFFFF
467	 106	AND		 	  ;; # mask to 32 bits
- stack 0: 0x464
468	 107	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
469	 108	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x117000C00D4FFFC011702F80086000500A0000100BA000000D4000C011702E4
470	 109	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x117000C00D4FFFC011702F80086000500A0000100BA000000D4000C011702E4
- stack 0: 0xF0
471	 10B	SHR		 	 
- stack 1: 0x464
- stack 0: 0x117
472	 10C	JUMP		 	 
- stack 0: 0x464
473	 117	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,344(ignore imm)
- stack 0: 0x464
474	 118	PUSH1	00	 	 
- stack 1: 0x464
- stack 0: 0x0
475	 11A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
476	 11F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x464
- stack 0: 0x0
477	 120	PUSH2	0380	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x380
478	 123	MLOAD		 	  ;; # read from x28
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x4
479	 124	PUSH4	FFFFFFFF	 	 
- stack 3: 0x464
- stack 2: 0x0
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
480	 129	AND		 	  ;; # mask to 32 bits
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x4
481	 12A	SUB		 	 
- stack 1: 0x464
- stack 0: 0x4
482	 12B	PUSH2	0133	 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 2: 0x464
- stack 1: 0x4
- stack 0: 0x133
483	 12E	JUMPI		 	 
- stack 0: 0x464
484	 133	JUMPDEST		 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 0: 0x464
485	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
486	 135	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x117000C00D4FFFC011702F80086000500A0000100BA000000D4000C011702E4
487	 136	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0x117000C00D4FFFC011702F80086000500A0000100BA000000D4000C011702E4
- stack 0: 0xE0
488	 138	SHR		 	 
- stack 1: 0x464
- stack 0: 0x117000C
489	 139	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0x117000C
- stack 0: 0xFFFF
490	 13C	AND		 	 
- stack 1: 0x464
- stack 0: 0xC
491	 13D	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xC
- stack 0: 0x1
492	 13F	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xC
493	 140	ADD		 	 
- stack 0: 0x470
494	 141	PUSH4	FFFFFFFF	 	 
- stack 1: 0x470
- stack 0: 0xFFFFFFFF
495	 146	AND		 	  ;; # mask to 32 bits
- stack 0: 0x470
496	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
497	 148	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x86000500A0000100BA000000D4000C011702E40117000C00D4FFFC011702D8
498	 149	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x86000500A0000100BA000000D4000C011702E40117000C00D4FFFC011702D8
- stack 0: 0xF0
499	 14B	SHR		 	 
- stack 1: 0x470
- stack 0: 0x86
500	 14C	JUMP		 	 
- stack 0: 0x470
501	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x470
502	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
503	 88	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x86000500A0000100BA000000D4000C011702E40117000C00D4FFFC011702D8
504	 89	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x86000500A0000100BA000000D4000C011702E40117000C00D4FFFC011702D8
- stack 0: 0xE0
505	 8B	SHR		 	 
- stack 1: 0x470
- stack 0: 0x860005
506	 8C	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x860005
- stack 0: 0xFFFF
507	 8F	AND		 	 
- stack 1: 0x470
- stack 0: 0x5
508	 90	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x1
509	 92	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0x5
510	 93	PUSH2	0380	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x380
511	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x470
512	 97	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
513	 99	ADD		 	 
- stack 0: 0x474
514	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
515	 9B	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000100BA000000D4000C011702E40117000C00D4FFFC011702D800860006
516	 9C	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0xA0000100BA000000D4000C011702E40117000C00D4FFFC011702D800860006
- stack 0: 0xF0
517	 9E	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA0
518	 9F	JUMP		 	 
- stack 0: 0x474
519	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x474
520	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
521	 A2	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000100BA000000D4000C011702E40117000C00D4FFFC011702D800860006
522	 A3	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0xA0000100BA000000D4000C011702E40117000C00D4FFFC011702D800860006
- stack 0: 0xE0
523	 A5	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA00001
524	 A6	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0xA00001
- stack 0: 0xFFFF
525	 A9	AND		 	 
- stack 1: 0x474
- stack 0: 0x1
526	 AA	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x1
- stack 0: 0x1
527	 AC	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x1
528	 AD	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0x1
- stack 0: 0x20
529	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x474
530	 B1	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
531	 B3	ADD		 	 
- stack 0: 0x478
532	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
533	 B5	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBA000000D4000C011702E40117000C00D4FFFC011702D80086000600A0FFFF
534	 B6	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0xBA000000D4000C011702E40117000C00D4FFFC011702D80086000600A0FFFF
- stack 0: 0xF0
535	 B8	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBA
536	 B9	JUMP		 	 
- stack 0: 0x478
537	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x478
538	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
539	 BC	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBA000000D4000C011702E40117000C00D4FFFC011702D80086000600A0FFFF
540	 BD	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0xBA000000D4000C011702E40117000C00D4FFFC011702D80086000600A0FFFF
- stack 0: 0xE0
541	 BF	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBA0000
542	 C0	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0xBA0000
- stack 0: 0xFFFF
543	 C3	AND		 	 
- stack 1: 0x478
- stack 0: 0x0
544	 C4	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x1
545	 C6	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0x0
546	 C7	PUSH2	0040	 	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x40
547	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x478
548	 CB	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
549	 CD	ADD		 	 
- stack 0: 0x47C
550	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
551	 CF	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xD4000C011702E40117000C00D4FFFC011702D80086000600A0FFFF00BAFFFE
552	 D0	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0xD4000C011702E40117000C00D4FFFC011702D80086000600A0FFFF00BAFFFE
- stack 0: 0xF0
553	 D2	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xD4
554	 D3	JUMP		 	 
- stack 0: 0x47C
555	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x47C
556	 D5	PUSH2	0040	 	 
- stack 1: 0x47C
- stack 0: 0x40
557	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x47C
- stack 0: 0x0
558	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
559	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x47C
- stack 0: 0x0
560	 DF	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x20
561	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x1
562	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x47C
- stack 2: 0x0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
563	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x1
564	 E9	LT		 	  ;; # bgeu
- stack 1: 0x47C
- stack 0: 0x0
565	 EA	ISZERO		 	 
- stack 1: 0x47C
- stack 0: 0x1
566	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x47C
- stack 1: 0x1
- stack 0: 0xF3
567	 EE	JUMPI		 	 
- stack 0: 0x47C
568	 F3	JUMPDEST		 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x47C
569	 F4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
570	 F5	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xD4000C011702E40117000C00D4FFFC011702D80086000600A0FFFF00BAFFFE
571	 F6	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0xD4000C011702E40117000C00D4FFFC011702D80086000600A0FFFF00BAFFFE
- stack 0: 0xE0
572	 F8	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xD4000C
573	 F9	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
574	 FC	AND		 	 
- stack 1: 0x47C
- stack 0: 0xC
575	 FD	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0xC
- stack 0: 0x1
576	 FF	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0xC
577	 100	ADD		 	 
- stack 0: 0x488
578	 101	PUSH4	FFFFFFFF	 	 
- stack 1: 0x488
- stack 0: 0xFFFFFFFF
579	 106	AND		 	  ;; # mask to 32 bits
- stack 0: 0x488
580	 107	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
581	 108	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xD4FFFC011702D80086000600A0FFFF00BAFFFE00D4000C011702C40117000C
582	 109	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0xD4FFFC011702D80086000600A0FFFF00BAFFFE00D4000C011702C40117000C
- stack 0: 0xF0
583	 10B	SHR		 	 
- stack 1: 0x488
- stack 0: 0xD4
584	 10C	JUMP		 	 
- stack 0: 0x488
585	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x488
586	 D5	PUSH2	0040	 	 
- stack 1: 0x488
- stack 0: 0x40
587	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x488
- stack 0: 0x0
588	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
589	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x488
- stack 0: 0x0
590	 DF	PUSH2	0020	 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x20
591	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x1
592	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x488
- stack 2: 0x0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
593	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x1
594	 E9	LT		 	  ;; # bgeu
- stack 1: 0x488
- stack 0: 0x0
595	 EA	ISZERO		 	 
- stack 1: 0x488
- stack 0: 0x1
596	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x488
- stack 1: 0x1
- stack 0: 0xF3
597	 EE	JUMPI		 	 
- stack 0: 0x488
598	 F3	JUMPDEST		 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x488
599	 F4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x488
- stack 0: 0x488
600	 F5	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xD4FFFC011702D80086000600A0FFFF00BAFFFE00D4000C011702C40117000C
601	 F6	PUSH1	E0	 	 
- stack 2: 0x488
- stack 1: 0xD4FFFC011702D80086000600A0FFFF00BAFFFE00D4000C011702C40117000C
- stack 0: 0xE0
602	 F8	SHR		 	 
- stack 1: 0x488
- stack 0: 0xD4FFFC
603	 F9	PUSH2	FFFF	 	 
- stack 2: 0x488
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
604	 FC	AND		 	 
- stack 1: 0x488
- stack 0: 0xFFFC
605	 FD	PUSH1	01	 	 
- stack 2: 0x488
- stack 1: 0xFFFC
- stack 0: 0x1
606	 FF	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
607	 100	ADD		 	 
- stack 0: 0x484
608	 101	PUSH4	FFFFFFFF	 	 
- stack 1: 0x484
- stack 0: 0xFFFFFFFF
609	 106	AND		 	  ;; # mask to 32 bits
- stack 0: 0x484
610	 107	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
611	 108	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x117000C00D4FFFC011702D80086000600A0FFFF00BAFFFE00D4000C011702C4
612	 109	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x117000C00D4FFFC011702D80086000600A0FFFF00BAFFFE00D4000C011702C4
- stack 0: 0xF0
613	 10B	SHR		 	 
- stack 1: 0x484
- stack 0: 0x117
614	 10C	JUMP		 	 
- stack 0: 0x484
615	 117	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,344(ignore imm)
- stack 0: 0x484
616	 118	PUSH1	00	 	 
- stack 1: 0x484
- stack 0: 0x0
617	 11A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
618	 11F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x484
- stack 0: 0x0
619	 120	PUSH2	0380	 	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x380
620	 123	MLOAD		 	  ;; # read from x28
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x5
621	 124	PUSH4	FFFFFFFF	 	 
- stack 3: 0x484
- stack 2: 0x0
- stack 1: 0x5
- stack 0: 0xFFFFFFFF
622	 129	AND		 	  ;; # mask to 32 bits
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x5
623	 12A	SUB		 	 
- stack 1: 0x484
- stack 0: 0x5
624	 12B	PUSH2	0133	 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 2: 0x484
- stack 1: 0x5
- stack 0: 0x133
625	 12E	JUMPI		 	 
- stack 0: 0x484
626	 133	JUMPDEST		 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 0: 0x484
627	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x484
- stack 0: 0x484
628	 135	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x117000C00D4FFFC011702D80086000600A0FFFF00BAFFFE00D4000C011702C4
629	 136	PUSH1	E0	 	 
- stack 2: 0x484
- stack 1: 0x117000C00D4FFFC011702D80086000600A0FFFF00BAFFFE00D4000C011702C4
- stack 0: 0xE0
630	 138	SHR		 	 
- stack 1: 0x484
- stack 0: 0x117000C
631	 139	PUSH2	FFFF	 	 
- stack 2: 0x484
- stack 1: 0x117000C
- stack 0: 0xFFFF
632	 13C	AND		 	 
- stack 1: 0x484
- stack 0: 0xC
633	 13D	PUSH1	01	 	 
- stack 2: 0x484
- stack 1: 0xC
- stack 0: 0x1
634	 13F	SIGNEXTEND		 	 
- stack 1: 0x484
- stack 0: 0xC
635	 140	ADD		 	 
- stack 0: 0x490
636	 141	PUSH4	FFFFFFFF	 	 
- stack 1: 0x490
- stack 0: 0xFFFFFFFF
637	 146	AND		 	  ;; # mask to 32 bits
- stack 0: 0x490
638	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
639	 148	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x86000600A0FFFF00BAFFFE00D4000C011702C40117000C00D4FFFC011702B8
640	 149	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x86000600A0FFFF00BAFFFE00D4000C011702C40117000C00D4FFFC011702B8
- stack 0: 0xF0
641	 14B	SHR		 	 
- stack 1: 0x490
- stack 0: 0x86
642	 14C	JUMP		 	 
- stack 0: 0x490
643	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x490
644	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
645	 88	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x86000600A0FFFF00BAFFFE00D4000C011702C40117000C00D4FFFC011702B8
646	 89	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0x86000600A0FFFF00BAFFFE00D4000C011702C40117000C00D4FFFC011702B8
- stack 0: 0xE0
647	 8B	SHR		 	 
- stack 1: 0x490
- stack 0: 0x860006
648	 8C	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0x860006
- stack 0: 0xFFFF
649	 8F	AND		 	 
- stack 1: 0x490
- stack 0: 0x6
650	 90	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0x6
- stack 0: 0x1
651	 92	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0x6
652	 93	PUSH2	0380	 	 
- stack 2: 0x490
- stack 1: 0x6
- stack 0: 0x380
653	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x490
654	 97	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
655	 99	ADD		 	 
- stack 0: 0x494
656	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
657	 9B	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xA0FFFF00BAFFFE00D4000C011702C40117000C00D4FFFC011702B800860007
658	 9C	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xA0FFFF00BAFFFE00D4000C011702C40117000C00D4FFFC011702B800860007
- stack 0: 0xF0
659	 9E	SHR		 	 
- stack 1: 0x494
- stack 0: 0xA0
660	 9F	JUMP		 	 
- stack 0: 0x494
661	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x494
662	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
663	 A2	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xA0FFFF00BAFFFE00D4000C011702C40117000C00D4FFFC011702B800860007
664	 A3	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0xA0FFFF00BAFFFE00D4000C011702C40117000C00D4FFFC011702B800860007
- stack 0: 0xE0
665	 A5	SHR		 	 
- stack 1: 0x494
- stack 0: 0xA0FFFF
666	 A6	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
667	 A9	AND		 	 
- stack 1: 0x494
- stack 0: 0xFFFF
668	 AA	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0xFFFF
- stack 0: 0x1
669	 AC	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
670	 AD	PUSH2	0020	 	 
- stack 2: 0x494
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
671	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x494
672	 B1	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
673	 B3	ADD		 	 
- stack 0: 0x498
674	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
675	 B5	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xBAFFFE00D4000C011702C40117000C00D4FFFC011702B80086000700A0FFFF
676	 B6	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xBAFFFE00D4000C011702C40117000C00D4FFFC011702B80086000700A0FFFF
- stack 0: 0xF0
677	 B8	SHR		 	 
- stack 1: 0x498
- stack 0: 0xBA
678	 B9	JUMP		 	 
- stack 0: 0x498
679	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x498
680	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
681	 BC	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xBAFFFE00D4000C011702C40117000C00D4FFFC011702B80086000700A0FFFF
682	 BD	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0xBAFFFE00D4000C011702C40117000C00D4FFFC011702B80086000700A0FFFF
- stack 0: 0xE0
683	 BF	SHR		 	 
- stack 1: 0x498
- stack 0: 0xBAFFFE
684	 C0	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0xBAFFFE
- stack 0: 0xFFFF
685	 C3	AND		 	 
- stack 1: 0x498
- stack 0: 0xFFFE
686	 C4	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0xFFFE
- stack 0: 0x1
687	 C6	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
688	 C7	PUSH2	0040	 	 
- stack 2: 0x498
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x40
689	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x498
690	 CB	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
691	 CD	ADD		 	 
- stack 0: 0x49C
692	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
693	 CF	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0xD4000C011702C40117000C00D4FFFC011702B80086000700A0FFFF00BA0000
694	 D0	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0xD4000C011702C40117000C00D4FFFC011702B80086000700A0FFFF00BA0000
- stack 0: 0xF0
695	 D2	SHR		 	 
- stack 1: 0x49C
- stack 0: 0xD4
696	 D3	JUMP		 	 
- stack 0: 0x49C
697	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x49C
698	 D5	PUSH2	0040	 	 
- stack 1: 0x49C
- stack 0: 0x40
699	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x49C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
700	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
701	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0xFFFFFFFE
702	 DF	PUSH2	0020	 	 
- stack 2: 0x49C
- stack 1: 0xFFFFFFFE
- stack 0: 0x20
703	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x49C
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
704	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x49C
- stack 2: 0xFFFFFFFE
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
705	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x49C
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFF
706	 E9	LT		 	  ;; # bgeu
- stack 1: 0x49C
- stack 0: 0x0
707	 EA	ISZERO		 	 
- stack 1: 0x49C
- stack 0: 0x1
708	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x49C
- stack 1: 0x1
- stack 0: 0xF3
709	 EE	JUMPI		 	 
- stack 0: 0x49C
710	 F3	JUMPDEST		 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x49C
711	 F4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x49C
- stack 0: 0x49C
712	 F5	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0xD4000C011702C40117000C00D4FFFC011702B80086000700A0FFFF00BA0000
713	 F6	PUSH1	E0	 	 
- stack 2: 0x49C
- stack 1: 0xD4000C011702C40117000C00D4FFFC011702B80086000700A0FFFF00BA0000
- stack 0: 0xE0
714	 F8	SHR		 	 
- stack 1: 0x49C
- stack 0: 0xD4000C
715	 F9	PUSH2	FFFF	 	 
- stack 2: 0x49C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
716	 FC	AND		 	 
- stack 1: 0x49C
- stack 0: 0xC
717	 FD	PUSH1	01	 	 
- stack 2: 0x49C
- stack 1: 0xC
- stack 0: 0x1
718	 FF	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0xC
719	 100	ADD		 	 
- stack 0: 0x4A8
720	 101	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFF
721	 106	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4A8
722	 107	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
723	 108	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xD4FFFC011702B80086000700A0FFFF00BA000000D4000C011702A40117000C
724	 109	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xD4FFFC011702B80086000700A0FFFF00BA000000D4000C011702A40117000C
- stack 0: 0xF0
725	 10B	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xD4
726	 10C	JUMP		 	 
- stack 0: 0x4A8
727	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x4A8
728	 D5	PUSH2	0040	 	 
- stack 1: 0x4A8
- stack 0: 0x40
729	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
730	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
731	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFE
732	 DF	PUSH2	0020	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFE
- stack 0: 0x20
733	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
734	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4A8
- stack 2: 0xFFFFFFFE
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
735	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFF
736	 E9	LT		 	  ;; # bgeu
- stack 1: 0x4A8
- stack 0: 0x0
737	 EA	ISZERO		 	 
- stack 1: 0x4A8
- stack 0: 0x1
738	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x4A8
- stack 1: 0x1
- stack 0: 0xF3
739	 EE	JUMPI		 	 
- stack 0: 0x4A8
740	 F3	JUMPDEST		 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x4A8
741	 F4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
742	 F5	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xD4FFFC011702B80086000700A0FFFF00BA000000D4000C011702A40117000C
743	 F6	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0xD4FFFC011702B80086000700A0FFFF00BA000000D4000C011702A40117000C
- stack 0: 0xE0
744	 F8	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xD4FFFC
745	 F9	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
746	 FC	AND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFFC
747	 FD	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFC
- stack 0: 0x1
748	 FF	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
749	 100	ADD		 	 
- stack 0: 0x4A4
750	 101	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFF
751	 106	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4A4
752	 107	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
753	 108	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x117000C00D4FFFC011702B80086000700A0FFFF00BA000000D4000C011702A4
754	 109	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x117000C00D4FFFC011702B80086000700A0FFFF00BA000000D4000C011702A4
- stack 0: 0xF0
755	 10B	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x117
756	 10C	JUMP		 	 
- stack 0: 0x4A4
757	 117	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,344(ignore imm)
- stack 0: 0x4A4
758	 118	PUSH1	00	 	 
- stack 1: 0x4A4
- stack 0: 0x0
759	 11A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
760	 11F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A4
- stack 0: 0x0
761	 120	PUSH2	0380	 	 
- stack 2: 0x4A4
- stack 1: 0x0
- stack 0: 0x380
762	 123	MLOAD		 	  ;; # read from x28
- stack 2: 0x4A4
- stack 1: 0x0
- stack 0: 0x6
763	 124	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4A4
- stack 2: 0x0
- stack 1: 0x6
- stack 0: 0xFFFFFFFF
764	 129	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4A4
- stack 1: 0x0
- stack 0: 0x6
765	 12A	SUB		 	 
- stack 1: 0x4A4
- stack 0: 0x6
766	 12B	PUSH2	0133	 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 2: 0x4A4
- stack 1: 0x6
- stack 0: 0x133
767	 12E	JUMPI		 	 
- stack 0: 0x4A4
768	 133	JUMPDEST		 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 0: 0x4A4
769	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
770	 135	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x117000C00D4FFFC011702B80086000700A0FFFF00BA000000D4000C011702A4
771	 136	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x117000C00D4FFFC011702B80086000700A0FFFF00BA000000D4000C011702A4
- stack 0: 0xE0
772	 138	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x117000C
773	 139	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x117000C
- stack 0: 0xFFFF
774	 13C	AND		 	 
- stack 1: 0x4A4
- stack 0: 0xC
775	 13D	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0xC
- stack 0: 0x1
776	 13F	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xC
777	 140	ADD		 	 
- stack 0: 0x4B0
778	 141	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4B0
- stack 0: 0xFFFFFFFF
779	 146	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4B0
780	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
781	 148	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x86000700A0FFFF00BA000000D4000C011702A40117000C00D4FFFC01170298
782	 149	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x86000700A0FFFF00BA000000D4000C011702A40117000C00D4FFFC01170298
- stack 0: 0xF0
783	 14B	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x86
784	 14C	JUMP		 	 
- stack 0: 0x4B0
785	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4B0
786	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
787	 88	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x86000700A0FFFF00BA000000D4000C011702A40117000C00D4FFFC01170298
788	 89	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x86000700A0FFFF00BA000000D4000C011702A40117000C00D4FFFC01170298
- stack 0: 0xE0
789	 8B	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x860007
790	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x860007
- stack 0: 0xFFFF
791	 8F	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x7
792	 90	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x7
- stack 0: 0x1
793	 92	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x7
794	 93	PUSH2	0380	 	 
- stack 2: 0x4B0
- stack 1: 0x7
- stack 0: 0x380
795	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4B0
796	 97	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
797	 99	ADD		 	 
- stack 0: 0x4B4
798	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
799	 9B	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0xA0FFFF00BA000000D4000C011702A40117000C00D4FFFC0117029800860008
800	 9C	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0xA0FFFF00BA000000D4000C011702A40117000C00D4FFFC0117029800860008
- stack 0: 0xF0
801	 9E	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0xA0
802	 9F	JUMP		 	 
- stack 0: 0x4B4
803	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4B4
804	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
805	 A2	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0xA0FFFF00BA000000D4000C011702A40117000C00D4FFFC0117029800860008
806	 A3	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0xA0FFFF00BA000000D4000C011702A40117000C00D4FFFC0117029800860008
- stack 0: 0xE0
807	 A5	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0xA0FFFF
808	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
809	 A9	AND		 	 
- stack 1: 0x4B4
- stack 0: 0xFFFF
810	 AA	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFF
- stack 0: 0x1
811	 AC	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
812	 AD	PUSH2	0020	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
813	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B4
814	 B1	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
815	 B3	ADD		 	 
- stack 0: 0x4B8
816	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
817	 B5	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xBA000000D4000C011702A40117000C00D4FFFC011702980086000800A00000
818	 B6	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0xBA000000D4000C011702A40117000C00D4FFFC011702980086000800A00000
- stack 0: 0xF0
819	 B8	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xBA
820	 B9	JUMP		 	 
- stack 0: 0x4B8
821	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4B8
822	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
823	 BC	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xBA000000D4000C011702A40117000C00D4FFFC011702980086000800A00000
824	 BD	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0xBA000000D4000C011702A40117000C00D4FFFC011702980086000800A00000
- stack 0: 0xE0
825	 BF	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xBA0000
826	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0xBA0000
- stack 0: 0xFFFF
827	 C3	AND		 	 
- stack 1: 0x4B8
- stack 0: 0x0
828	 C4	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x1
829	 C6	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0x0
830	 C7	PUSH2	0040	 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x40
831	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4B8
832	 CB	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
833	 CD	ADD		 	 
- stack 0: 0x4BC
834	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
835	 CF	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0xD4000C011702A40117000C00D4FFFC011702980086000800A0000000BA0001
836	 D0	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0xD4000C011702A40117000C00D4FFFC011702980086000800A0000000BA0001
- stack 0: 0xF0
837	 D2	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0xD4
838	 D3	JUMP		 	 
- stack 0: 0x4BC
839	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x4BC
840	 D5	PUSH2	0040	 	 
- stack 1: 0x4BC
- stack 0: 0x40
841	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4BC
- stack 0: 0x0
842	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
843	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4BC
- stack 0: 0x0
844	 DF	PUSH2	0020	 	 
- stack 2: 0x4BC
- stack 1: 0x0
- stack 0: 0x20
845	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4BC
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
846	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4BC
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
847	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4BC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
848	 E9	LT		 	  ;; # bgeu
- stack 1: 0x4BC
- stack 0: 0x0
849	 EA	ISZERO		 	 
- stack 1: 0x4BC
- stack 0: 0x1
850	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x4BC
- stack 1: 0x1
- stack 0: 0xF3
851	 EE	JUMPI		 	 
- stack 0: 0x4BC
852	 F3	JUMPDEST		 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x4BC
853	 F4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
854	 F5	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0xD4000C011702A40117000C00D4FFFC011702980086000800A0000000BA0001
855	 F6	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0xD4000C011702A40117000C00D4FFFC011702980086000800A0000000BA0001
- stack 0: 0xE0
856	 F8	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0xD4000C
857	 F9	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0xD4000C
- stack 0: 0xFFFF
858	 FC	AND		 	 
- stack 1: 0x4BC
- stack 0: 0xC
859	 FD	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0xC
- stack 0: 0x1
860	 FF	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0xC
861	 100	ADD		 	 
- stack 0: 0x4C8
862	 101	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4C8
- stack 0: 0xFFFFFFFF
863	 106	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4C8
864	 107	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
865	 108	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xD4FFFC011702980086000800A0000000BA000100D400080117000801170280
866	 109	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0xD4FFFC011702980086000800A0000000BA000100D400080117000801170280
- stack 0: 0xF0
867	 10B	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xD4
868	 10C	JUMP		 	 
- stack 0: 0x4C8
869	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x4C8
870	 D5	PUSH2	0040	 	 
- stack 1: 0x4C8
- stack 0: 0x40
871	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4C8
- stack 0: 0x0
872	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
873	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C8
- stack 0: 0x0
874	 DF	PUSH2	0020	 	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x20
875	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
876	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C8
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
877	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
878	 E9	LT		 	  ;; # bgeu
- stack 1: 0x4C8
- stack 0: 0x0
879	 EA	ISZERO		 	 
- stack 1: 0x4C8
- stack 0: 0x1
880	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x4C8
- stack 1: 0x1
- stack 0: 0xF3
881	 EE	JUMPI		 	 
- stack 0: 0x4C8
882	 F3	JUMPDEST		 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x4C8
883	 F4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
884	 F5	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xD4FFFC011702980086000800A0000000BA000100D400080117000801170280
885	 F6	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0xD4FFFC011702980086000800A0000000BA000100D400080117000801170280
- stack 0: 0xE0
886	 F8	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xD4FFFC
887	 F9	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
888	 FC	AND		 	 
- stack 1: 0x4C8
- stack 0: 0xFFFC
889	 FD	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0xFFFC
- stack 0: 0x1
890	 FF	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
891	 100	ADD		 	 
- stack 0: 0x4C4
892	 101	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4C4
- stack 0: 0xFFFFFFFF
893	 106	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4C4
894	 107	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
895	 108	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x117000C00D4FFFC011702980086000800A0000000BA000100D4000801170008
896	 109	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x117000C00D4FFFC011702980086000800A0000000BA000100D4000801170008
- stack 0: 0xF0
897	 10B	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x117
898	 10C	JUMP		 	 
- stack 0: 0x4C4
899	 117	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,344(ignore imm)
- stack 0: 0x4C4
900	 118	PUSH1	00	 	 
- stack 1: 0x4C4
- stack 0: 0x0
901	 11A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
902	 11F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C4
- stack 0: 0x0
903	 120	PUSH2	0380	 	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x380
904	 123	MLOAD		 	  ;; # read from x28
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x7
905	 124	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C4
- stack 2: 0x0
- stack 1: 0x7
- stack 0: 0xFFFFFFFF
906	 129	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x7
907	 12A	SUB		 	 
- stack 1: 0x4C4
- stack 0: 0x7
908	 12B	PUSH2	0133	 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 2: 0x4C4
- stack 1: 0x7
- stack 0: 0x133
909	 12E	JUMPI		 	 
- stack 0: 0x4C4
910	 133	JUMPDEST		 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 0: 0x4C4
911	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
912	 135	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x117000C00D4FFFC011702980086000800A0000000BA000100D4000801170008
913	 136	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0x117000C00D4FFFC011702980086000800A0000000BA000100D4000801170008
- stack 0: 0xE0
914	 138	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x117000C
915	 139	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x117000C
- stack 0: 0xFFFF
916	 13C	AND		 	 
- stack 1: 0x4C4
- stack 0: 0xC
917	 13D	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0xC
- stack 0: 0x1
918	 13F	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0xC
919	 140	ADD		 	 
- stack 0: 0x4D0
920	 141	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4D0
- stack 0: 0xFFFFFFFF
921	 146	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4D0
922	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
923	 148	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x86000800A0000000BA000100D40008011700080117028000D4FFFC00860009
924	 149	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x86000800A0000000BA000100D40008011700080117028000D4FFFC00860009
- stack 0: 0xF0
925	 14B	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x86
926	 14C	JUMP		 	 
- stack 0: 0x4D0
927	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4D0
928	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
929	 88	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x86000800A0000000BA000100D40008011700080117028000D4FFFC00860009
930	 89	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x86000800A0000000BA000100D40008011700080117028000D4FFFC00860009
- stack 0: 0xE0
931	 8B	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x860008
932	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x860008
- stack 0: 0xFFFF
933	 8F	AND		 	 
- stack 1: 0x4D0
- stack 0: 0x8
934	 90	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0x8
- stack 0: 0x1
935	 92	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0x8
936	 93	PUSH2	0380	 	 
- stack 2: 0x4D0
- stack 1: 0x8
- stack 0: 0x380
937	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4D0
938	 97	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
939	 99	ADD		 	 
- stack 0: 0x4D4
940	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
941	 9B	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xA0000000BA000100D40008011700080117028000D4FFFC0086000900A0FFFE
942	 9C	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0xA0000000BA000100D40008011700080117028000D4FFFC0086000900A0FFFE
- stack 0: 0xF0
943	 9E	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xA0
944	 9F	JUMP		 	 
- stack 0: 0x4D4
945	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4D4
946	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
947	 A2	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xA0000000BA000100D40008011700080117028000D4FFFC0086000900A0FFFE
948	 A3	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0xA0000000BA000100D40008011700080117028000D4FFFC0086000900A0FFFE
- stack 0: 0xE0
949	 A5	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xA00000
950	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0xA00000
- stack 0: 0xFFFF
951	 A9	AND		 	 
- stack 1: 0x4D4
- stack 0: 0x0
952	 AA	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x1
953	 AC	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0x0
954	 AD	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x20
955	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D4
956	 B1	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
957	 B3	ADD		 	 
- stack 0: 0x4D8
958	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
959	 B5	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xBA000100D40008011700080117028000D4FFFC0086000900A0FFFE00BAFFFF
960	 B6	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0xBA000100D40008011700080117028000D4FFFC0086000900A0FFFE00BAFFFF
- stack 0: 0xF0
961	 B8	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xBA
962	 B9	JUMP		 	 
- stack 0: 0x4D8
963	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4D8
964	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
965	 BC	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xBA000100D40008011700080117028000D4FFFC0086000900A0FFFE00BAFFFF
966	 BD	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0xBA000100D40008011700080117028000D4FFFC0086000900A0FFFE00BAFFFF
- stack 0: 0xE0
967	 BF	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xBA0001
968	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0xBA0001
- stack 0: 0xFFFF
969	 C3	AND		 	 
- stack 1: 0x4D8
- stack 0: 0x1
970	 C4	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0x1
- stack 0: 0x1
971	 C6	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0x1
972	 C7	PUSH2	0040	 	 
- stack 2: 0x4D8
- stack 1: 0x1
- stack 0: 0x40
973	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4D8
974	 CB	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
975	 CD	ADD		 	 
- stack 0: 0x4DC
976	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
977	 CF	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xD40008011700080117028000D4FFFC0086000900A0FFFE00BAFFFF00D40008
978	 D0	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0xD40008011700080117028000D4FFFC0086000900A0FFFE00BAFFFF00D40008
- stack 0: 0xF0
979	 D2	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xD4
980	 D3	JUMP		 	 
- stack 0: 0x4DC
981	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x4DC
982	 D5	PUSH2	0040	 	 
- stack 1: 0x4DC
- stack 0: 0x40
983	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4DC
- stack 0: 0x1
984	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
985	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4DC
- stack 0: 0x1
986	 DF	PUSH2	0020	 	 
- stack 2: 0x4DC
- stack 1: 0x1
- stack 0: 0x20
987	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4DC
- stack 1: 0x1
- stack 0: 0x0
988	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4DC
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
989	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4DC
- stack 1: 0x1
- stack 0: 0x0
990	 E9	LT		 	  ;; # bgeu
- stack 1: 0x4DC
- stack 0: 0x1
991	 EA	ISZERO		 	 
- stack 1: 0x4DC
- stack 0: 0x0
992	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0xF3
993	 EE	JUMPI		 	 
- stack 0: 0x4DC
994	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x4DC
- stack 0: 0x10D
995	 F2	JUMP		 	 
- stack 0: 0x4DC
996	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x4DC
997	 10E	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
998	 110	ADD		 	 
- stack 0: 0x4E0
999	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1000	 112	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x11700080117028000D4FFFC0086000900A0FFFE00BAFFFF00D4000801170008
1001	 113	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x11700080117028000D4FFFC0086000900A0FFFE00BAFFFF00D4000801170008
- stack 0: 0xF0
1002	 115	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x117
1003	 116	JUMP		 	 
- stack 0: 0x4E0
1004	 117	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,344(ignore imm)
- stack 0: 0x4E0
1005	 118	PUSH1	00	 	 
- stack 1: 0x4E0
- stack 0: 0x0
1006	 11A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1007	 11F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E0
- stack 0: 0x0
1008	 120	PUSH2	0380	 	 
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x380
1009	 123	MLOAD		 	  ;; # read from x28
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x8
1010	 124	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E0
- stack 2: 0x0
- stack 1: 0x8
- stack 0: 0xFFFFFFFF
1011	 129	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x8
1012	 12A	SUB		 	 
- stack 1: 0x4E0
- stack 0: 0x8
1013	 12B	PUSH2	0133	 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 2: 0x4E0
- stack 1: 0x8
- stack 0: 0x133
1014	 12E	JUMPI		 	 
- stack 0: 0x4E0
1015	 133	JUMPDEST		 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 0: 0x4E0
1016	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1017	 135	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x11700080117028000D4FFFC0086000900A0FFFE00BAFFFF00D4000801170008
1018	 136	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0x11700080117028000D4FFFC0086000900A0FFFE00BAFFFF00D4000801170008
- stack 0: 0xE0
1019	 138	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x1170008
1020	 139	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x1170008
- stack 0: 0xFFFF
1021	 13C	AND		 	 
- stack 1: 0x4E0
- stack 0: 0x8
1022	 13D	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0x8
- stack 0: 0x1
1023	 13F	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0x8
1024	 140	ADD		 	 
- stack 0: 0x4E8
1025	 141	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4E8
- stack 0: 0xFFFFFFFF
1026	 146	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4E8
1027	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1028	 148	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xD4FFFC0086000900A0FFFE00BAFFFF00D40008011700080117026400D4FFFC
1029	 149	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0xD4FFFC0086000900A0FFFE00BAFFFF00D40008011700080117026400D4FFFC
- stack 0: 0xF0
1030	 14B	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xD4
1031	 14C	JUMP		 	 
- stack 0: 0x4E8
1032	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x4E8
1033	 D5	PUSH2	0040	 	 
- stack 1: 0x4E8
- stack 0: 0x40
1034	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4E8
- stack 0: 0x1
1035	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1036	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E8
- stack 0: 0x1
1037	 DF	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0x20
1038	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0x0
1039	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E8
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1040	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0x0
1041	 E9	LT		 	  ;; # bgeu
- stack 1: 0x4E8
- stack 0: 0x1
1042	 EA	ISZERO		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1043	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0xF3
1044	 EE	JUMPI		 	 
- stack 0: 0x4E8
1045	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x4E8
- stack 0: 0x10D
1046	 F2	JUMP		 	 
- stack 0: 0x4E8
1047	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x4E8
1048	 10E	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1049	 110	ADD		 	 
- stack 0: 0x4EC
1050	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1051	 112	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x86000900A0FFFE00BAFFFF00D40008011700080117026400D4FFFC0086000A
1052	 113	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x86000900A0FFFE00BAFFFF00D40008011700080117026400D4FFFC0086000A
- stack 0: 0xF0
1053	 115	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x86
1054	 116	JUMP		 	 
- stack 0: 0x4EC
1055	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4EC
1056	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1057	 88	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x86000900A0FFFE00BAFFFF00D40008011700080117026400D4FFFC0086000A
1058	 89	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0x86000900A0FFFE00BAFFFF00D40008011700080117026400D4FFFC0086000A
- stack 0: 0xE0
1059	 8B	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x860009
1060	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x860009
- stack 0: 0xFFFF
1061	 8F	AND		 	 
- stack 1: 0x4EC
- stack 0: 0x9
1062	 90	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0x9
- stack 0: 0x1
1063	 92	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0x9
1064	 93	PUSH2	0380	 	 
- stack 2: 0x4EC
- stack 1: 0x9
- stack 0: 0x380
1065	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4EC
1066	 97	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1067	 99	ADD		 	 
- stack 0: 0x4F0
1068	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1069	 9B	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xA0FFFE00BAFFFF00D40008011700080117026400D4FFFC0086000A00A00000
1070	 9C	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xA0FFFE00BAFFFF00D40008011700080117026400D4FFFC0086000A00A00000
- stack 0: 0xF0
1071	 9E	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xA0
1072	 9F	JUMP		 	 
- stack 0: 0x4F0
1073	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4F0
1074	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F0
- stack 0: 0x4F0
1075	 A2	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xA0FFFE00BAFFFF00D40008011700080117026400D4FFFC0086000A00A00000
1076	 A3	PUSH1	E0	 	 
- stack 2: 0x4F0
- stack 1: 0xA0FFFE00BAFFFF00D40008011700080117026400D4FFFC0086000A00A00000
- stack 0: 0xE0
1077	 A5	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xA0FFFE
1078	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4F0
- stack 1: 0xA0FFFE
- stack 0: 0xFFFF
1079	 A9	AND		 	 
- stack 1: 0x4F0
- stack 0: 0xFFFE
1080	 AA	PUSH1	01	 	 
- stack 2: 0x4F0
- stack 1: 0xFFFE
- stack 0: 0x1
1081	 AC	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1082	 AD	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x20
1083	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F0
1084	 B1	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1085	 B3	ADD		 	 
- stack 0: 0x4F4
1086	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1087	 B5	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xBAFFFF00D40008011700080117026400D4FFFC0086000A00A0000000BAFFFF
1088	 B6	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0xBAFFFF00D40008011700080117026400D4FFFC0086000A00A0000000BAFFFF
- stack 0: 0xF0
1089	 B8	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xBA
1090	 B9	JUMP		 	 
- stack 0: 0x4F4
1091	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4F4
1092	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1093	 BC	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xBAFFFF00D40008011700080117026400D4FFFC0086000A00A0000000BAFFFF
1094	 BD	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0xBAFFFF00D40008011700080117026400D4FFFC0086000A00A0000000BAFFFF
- stack 0: 0xE0
1095	 BF	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xBAFFFF
1096	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
1097	 C3	AND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFF
1098	 C4	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFF
- stack 0: 0x1
1099	 C6	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1100	 C7	PUSH2	0040	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1101	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4F4
1102	 CB	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1103	 CD	ADD		 	 
- stack 0: 0x4F8
1104	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1105	 CF	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xD40008011700080117026400D4FFFC0086000A00A0000000BAFFFF00D40008
1106	 D0	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0xD40008011700080117026400D4FFFC0086000A00A0000000BAFFFF00D40008
- stack 0: 0xF0
1107	 D2	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xD4
1108	 D3	JUMP		 	 
- stack 0: 0x4F8
1109	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x4F8
1110	 D5	PUSH2	0040	 	 
- stack 1: 0x4F8
- stack 0: 0x40
1111	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1112	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1113	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F8
- stack 0: 0xFFFFFFFF
1114	 DF	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFF
- stack 0: 0x20
1115	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1116	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4F8
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
1117	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFE
1118	 E9	LT		 	  ;; # bgeu
- stack 1: 0x4F8
- stack 0: 0x1
1119	 EA	ISZERO		 	 
- stack 1: 0x4F8
- stack 0: 0x0
1120	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x4F8
- stack 1: 0x0
- stack 0: 0xF3
1121	 EE	JUMPI		 	 
- stack 0: 0x4F8
1122	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x4F8
- stack 0: 0x10D
1123	 F2	JUMP		 	 
- stack 0: 0x4F8
1124	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x4F8
1125	 10E	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1126	 110	ADD		 	 
- stack 0: 0x4FC
1127	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1128	 112	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x11700080117026400D4FFFC0086000A00A0000000BAFFFF00D4000801170008
1129	 113	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x11700080117026400D4FFFC0086000A00A0000000BAFFFF00D4000801170008
- stack 0: 0xF0
1130	 115	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x117
1131	 116	JUMP		 	 
- stack 0: 0x4FC
1132	 117	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,344(ignore imm)
- stack 0: 0x4FC
1133	 118	PUSH1	00	 	 
- stack 1: 0x4FC
- stack 0: 0x0
1134	 11A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1135	 11F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0x0
1136	 120	PUSH2	0380	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x380
1137	 123	MLOAD		 	  ;; # read from x28
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x9
1138	 124	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4FC
- stack 2: 0x0
- stack 1: 0x9
- stack 0: 0xFFFFFFFF
1139	 129	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x9
1140	 12A	SUB		 	 
- stack 1: 0x4FC
- stack 0: 0x9
1141	 12B	PUSH2	0133	 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 2: 0x4FC
- stack 1: 0x9
- stack 0: 0x133
1142	 12E	JUMPI		 	 
- stack 0: 0x4FC
1143	 133	JUMPDEST		 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 0: 0x4FC
1144	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1145	 135	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x11700080117026400D4FFFC0086000A00A0000000BAFFFF00D4000801170008
1146	 136	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x11700080117026400D4FFFC0086000A00A0000000BAFFFF00D4000801170008
- stack 0: 0xE0
1147	 138	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1170008
1148	 139	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x1170008
- stack 0: 0xFFFF
1149	 13C	AND		 	 
- stack 1: 0x4FC
- stack 0: 0x8
1150	 13D	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0x8
- stack 0: 0x1
1151	 13F	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0x8
1152	 140	ADD		 	 
- stack 0: 0x504
1153	 141	PUSH4	FFFFFFFF	 	 
- stack 1: 0x504
- stack 0: 0xFFFFFFFF
1154	 146	AND		 	  ;; # mask to 32 bits
- stack 0: 0x504
1155	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1156	 148	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0xD4FFFC0086000A00A0000000BAFFFF00D40008011700080117024800D4FFFC
1157	 149	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0xD4FFFC0086000A00A0000000BAFFFF00D40008011700080117024800D4FFFC
- stack 0: 0xF0
1158	 14B	SHR		 	 
- stack 1: 0x504
- stack 0: 0xD4
1159	 14C	JUMP		 	 
- stack 0: 0x504
1160	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x504
1161	 D5	PUSH2	0040	 	 
- stack 1: 0x504
- stack 0: 0x40
1162	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x504
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1163	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x504
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1164	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x504
- stack 0: 0xFFFFFFFF
1165	 DF	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0xFFFFFFFF
- stack 0: 0x20
1166	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x504
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1167	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x504
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
1168	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x504
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFE
1169	 E9	LT		 	  ;; # bgeu
- stack 1: 0x504
- stack 0: 0x1
1170	 EA	ISZERO		 	 
- stack 1: 0x504
- stack 0: 0x0
1171	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0xF3
1172	 EE	JUMPI		 	 
- stack 0: 0x504
1173	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x504
- stack 0: 0x10D
1174	 F2	JUMP		 	 
- stack 0: 0x504
1175	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x504
1176	 10E	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1177	 110	ADD		 	 
- stack 0: 0x508
1178	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1179	 112	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x86000A00A0000000BAFFFF00D40008011700080117024800D4FFFC0086000B
1180	 113	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x86000A00A0000000BAFFFF00D40008011700080117024800D4FFFC0086000B
- stack 0: 0xF0
1181	 115	SHR		 	 
- stack 1: 0x508
- stack 0: 0x86
1182	 116	JUMP		 	 
- stack 0: 0x508
1183	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x508
1184	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1185	 88	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x86000A00A0000000BAFFFF00D40008011700080117024800D4FFFC0086000B
1186	 89	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x86000A00A0000000BAFFFF00D40008011700080117024800D4FFFC0086000B
- stack 0: 0xE0
1187	 8B	SHR		 	 
- stack 1: 0x508
- stack 0: 0x86000A
1188	 8C	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x86000A
- stack 0: 0xFFFF
1189	 8F	AND		 	 
- stack 1: 0x508
- stack 0: 0xA
1190	 90	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xA
- stack 0: 0x1
1191	 92	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xA
1192	 93	PUSH2	0380	 	 
- stack 2: 0x508
- stack 1: 0xA
- stack 0: 0x380
1193	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x508
1194	 97	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1195	 99	ADD		 	 
- stack 0: 0x50C
1196	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1197	 9B	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xA0000000BAFFFF00D40008011700080117024800D4FFFC0086000B01570000
1198	 9C	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xA0000000BAFFFF00D40008011700080117024800D4FFFC0086000B01570000
- stack 0: 0xF0
1199	 9E	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xA0
1200	 9F	JUMP		 	 
- stack 0: 0x50C
1201	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x50C
1202	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1203	 A2	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xA0000000BAFFFF00D40008011700080117024800D4FFFC0086000B01570000
1204	 A3	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0xA0000000BAFFFF00D40008011700080117024800D4FFFC0086000B01570000
- stack 0: 0xE0
1205	 A5	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xA00000
1206	 A6	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0xA00000
- stack 0: 0xFFFF
1207	 A9	AND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1208	 AA	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x1
1209	 AC	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1210	 AD	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x20
1211	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x50C
1212	 B1	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1213	 B3	ADD		 	 
- stack 0: 0x510
1214	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1215	 B5	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xBAFFFF00D40008011700080117024800D4FFFC0086000B01570000016AFFFF
1216	 B6	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xBAFFFF00D40008011700080117024800D4FFFC0086000B01570000016AFFFF
- stack 0: 0xF0
1217	 B8	SHR		 	 
- stack 1: 0x510
- stack 0: 0xBA
1218	 B9	JUMP		 	 
- stack 0: 0x510
1219	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x510
1220	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1221	 BC	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xBAFFFF00D40008011700080117024800D4FFFC0086000B01570000016AFFFF
1222	 BD	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0xBAFFFF00D40008011700080117024800D4FFFC0086000B01570000016AFFFF
- stack 0: 0xE0
1223	 BF	SHR		 	 
- stack 1: 0x510
- stack 0: 0xBAFFFF
1224	 C0	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
1225	 C3	AND		 	 
- stack 1: 0x510
- stack 0: 0xFFFF
1226	 C4	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0xFFFF
- stack 0: 0x1
1227	 C6	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1228	 C7	PUSH2	0040	 	 
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1229	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x510
1230	 CB	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1231	 CD	ADD		 	 
- stack 0: 0x514
1232	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1233	 CF	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xD40008011700080117024800D4FFFC0086000B01570000016AFFFF01890000
1234	 D0	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xD40008011700080117024800D4FFFC0086000B01570000016AFFFF01890000
- stack 0: 0xF0
1235	 D2	SHR		 	 
- stack 1: 0x514
- stack 0: 0xD4
1236	 D3	JUMP		 	 
- stack 0: 0x514
1237	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x514
1238	 D5	PUSH2	0040	 	 
- stack 1: 0x514
- stack 0: 0x40
1239	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x514
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1240	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1241	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x514
- stack 0: 0xFFFFFFFF
1242	 DF	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0xFFFFFFFF
- stack 0: 0x20
1243	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x514
- stack 1: 0xFFFFFFFF
- stack 0: 0x0
1244	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x514
- stack 2: 0xFFFFFFFF
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1245	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x514
- stack 1: 0xFFFFFFFF
- stack 0: 0x0
1246	 E9	LT		 	  ;; # bgeu
- stack 1: 0x514
- stack 0: 0x1
1247	 EA	ISZERO		 	 
- stack 1: 0x514
- stack 0: 0x0
1248	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0xF3
1249	 EE	JUMPI		 	 
- stack 0: 0x514
1250	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x514
- stack 0: 0x10D
1251	 F2	JUMP		 	 
- stack 0: 0x514
1252	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x514
1253	 10E	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1254	 110	ADD		 	 
- stack 0: 0x518
1255	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1256	 112	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x11700080117024800D4FFFC0086000B01570000016AFFFF0189000000D40008
1257	 113	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x11700080117024800D4FFFC0086000B01570000016AFFFF0189000000D40008
- stack 0: 0xF0
1258	 115	SHR		 	 
- stack 1: 0x518
- stack 0: 0x117
1259	 116	JUMP		 	 
- stack 0: 0x518
1260	 117	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,344(ignore imm)
- stack 0: 0x518
1261	 118	PUSH1	00	 	 
- stack 1: 0x518
- stack 0: 0x0
1262	 11A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1263	 11F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x0
1264	 120	PUSH2	0380	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x380
1265	 123	MLOAD		 	  ;; # read from x28
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xA
1266	 124	PUSH4	FFFFFFFF	 	 
- stack 3: 0x518
- stack 2: 0x0
- stack 1: 0xA
- stack 0: 0xFFFFFFFF
1267	 129	AND		 	  ;; # mask to 32 bits
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xA
1268	 12A	SUB		 	 
- stack 1: 0x518
- stack 0: 0xA
1269	 12B	PUSH2	0133	 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 2: 0x518
- stack 1: 0xA
- stack 0: 0x133
1270	 12E	JUMPI		 	 
- stack 0: 0x518
1271	 133	JUMPDEST		 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 0: 0x518
1272	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1273	 135	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x11700080117024800D4FFFC0086000B01570000016AFFFF0189000000D40008
1274	 136	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x11700080117024800D4FFFC0086000B01570000016AFFFF0189000000D40008
- stack 0: 0xE0
1275	 138	SHR		 	 
- stack 1: 0x518
- stack 0: 0x1170008
1276	 139	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x1170008
- stack 0: 0xFFFF
1277	 13C	AND		 	 
- stack 1: 0x518
- stack 0: 0x8
1278	 13D	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0x8
- stack 0: 0x1
1279	 13F	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x8
1280	 140	ADD		 	 
- stack 0: 0x520
1281	 141	PUSH4	FFFFFFFF	 	 
- stack 1: 0x520
- stack 0: 0xFFFFFFFF
1282	 146	AND		 	  ;; # mask to 32 bits
- stack 0: 0x520
1283	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1284	 148	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xD4FFFC0086000B01570000016AFFFF0189000000D400080117000801170228
1285	 149	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0xD4FFFC0086000B01570000016AFFFF0189000000D400080117000801170228
- stack 0: 0xF0
1286	 14B	SHR		 	 
- stack 1: 0x520
- stack 0: 0xD4
1287	 14C	JUMP		 	 
- stack 0: 0x520
1288	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x520
1289	 D5	PUSH2	0040	 	 
- stack 1: 0x520
- stack 0: 0x40
1290	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x520
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1291	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x520
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1292	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x520
- stack 0: 0xFFFFFFFF
1293	 DF	PUSH2	0020	 	 
- stack 2: 0x520
- stack 1: 0xFFFFFFFF
- stack 0: 0x20
1294	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x520
- stack 1: 0xFFFFFFFF
- stack 0: 0x0
1295	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x520
- stack 2: 0xFFFFFFFF
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1296	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x520
- stack 1: 0xFFFFFFFF
- stack 0: 0x0
1297	 E9	LT		 	  ;; # bgeu
- stack 1: 0x520
- stack 0: 0x1
1298	 EA	ISZERO		 	 
- stack 1: 0x520
- stack 0: 0x0
1299	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x520
- stack 1: 0x0
- stack 0: 0xF3
1300	 EE	JUMPI		 	 
- stack 0: 0x520
1301	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x520
- stack 0: 0x10D
1302	 F2	JUMP		 	 
- stack 0: 0x520
1303	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x520
1304	 10E	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1305	 110	ADD		 	 
- stack 0: 0x524
1306	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1307	 112	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x86000B01570000016AFFFF0189000000D40008011700080117022800D4FFFC
1308	 113	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x86000B01570000016AFFFF0189000000D40008011700080117022800D4FFFC
- stack 0: 0xF0
1309	 115	SHR		 	 
- stack 1: 0x524
- stack 0: 0x86
1310	 116	JUMP		 	 
- stack 0: 0x524
1311	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x524
1312	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1313	 88	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x86000B01570000016AFFFF0189000000D40008011700080117022800D4FFFC
1314	 89	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x86000B01570000016AFFFF0189000000D40008011700080117022800D4FFFC
- stack 0: 0xE0
1315	 8B	SHR		 	 
- stack 1: 0x524
- stack 0: 0x86000B
1316	 8C	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x86000B
- stack 0: 0xFFFF
1317	 8F	AND		 	 
- stack 1: 0x524
- stack 0: 0xB
1318	 90	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0xB
- stack 0: 0x1
1319	 92	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xB
1320	 93	PUSH2	0380	 	 
- stack 2: 0x524
- stack 1: 0xB
- stack 0: 0x380
1321	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x524
1322	 97	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1323	 99	ADD		 	 
- stack 0: 0x528
1324	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1325	 9B	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1570000016AFFFF0189000000D40008011700080117022800D4FFFC0086000C
1326	 9C	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x1570000016AFFFF0189000000D40008011700080117022800D4FFFC0086000C
- stack 0: 0xF0
1327	 9E	SHR		 	 
- stack 1: 0x528
- stack 0: 0x157
1328	 9F	JUMP		 	 
- stack 0: 0x528
1329	 157	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x528
1330	 158	PUSH4	80000000	 	 
- stack 1: 0x528
- stack 0: 0x80000000
1331	 15D	PUSH2	0020	 	 
- stack 2: 0x528
- stack 1: 0x80000000
- stack 0: 0x20
1332	 160	MSTORE		 	  ;; # store to x1
- stack 0: 0x528
1333	 161	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1334	 163	ADD		 	 
- stack 0: 0x52C
1335	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1336	 165	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x16AFFFF0189000000D40008011700080117022800D4FFFC0086000C019C0000
1337	 166	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x16AFFFF0189000000D40008011700080117022800D4FFFC0086000C019C0000
- stack 0: 0xF0
1338	 168	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x16A
1339	 169	JUMP		 	 
- stack 0: 0x52C
1340	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x52C
1341	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1342	 16C	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x16AFFFF0189000000D40008011700080117022800D4FFFC0086000C019C0000
1343	 16D	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0x16AFFFF0189000000D40008011700080117022800D4FFFC0086000C019C0000
- stack 0: 0xE0
1344	 16F	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x16AFFFF
1345	 170	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
1346	 173	AND		 	 
- stack 1: 0x52C
- stack 0: 0xFFFF
1347	 174	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0xFFFF
- stack 0: 0x1
1348	 176	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1349	 177	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1350	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x52C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
1351	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x52C
- stack 0: 0x7FFFFFFF
1352	 17C	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
1353	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x52C
1354	 180	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1355	 182	ADD		 	 
- stack 0: 0x530
1356	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1357	 184	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x189000000D40008011700080117022800D4FFFC0086000C019C000001B60000
1358	 185	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x189000000D40008011700080117022800D4FFFC0086000C019C000001B60000
- stack 0: 0xF0
1359	 187	SHR		 	 
- stack 1: 0x530
- stack 0: 0x189
1360	 188	JUMP		 	 
- stack 0: 0x530
1361	 189	JUMPDEST		 ;; __riscvimpl_LUI_80000137	  ;; # instr: lui sp,0x80000(ignore imm)
- stack 0: 0x530
1362	 18A	PUSH4	80000000	 	 
- stack 1: 0x530
- stack 0: 0x80000000
1363	 18F	PUSH2	0040	 	 
- stack 2: 0x530
- stack 1: 0x80000000
- stack 0: 0x40
1364	 192	MSTORE		 	  ;; # store to x2
- stack 0: 0x530
1365	 193	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1366	 195	ADD		 	 
- stack 0: 0x534
1367	 196	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1368	 197	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xD40008011700080117022800D4FFFC0086000C019C000001B60000016AFFFF
1369	 198	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0xD40008011700080117022800D4FFFC0086000C019C000001B60000016AFFFF
- stack 0: 0xF0
1370	 19A	SHR		 	 
- stack 1: 0x534
- stack 0: 0xD4
1371	 19B	JUMP		 	 
- stack 0: 0x534
1372	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x534
1373	 D5	PUSH2	0040	 	 
- stack 1: 0x534
- stack 0: 0x40
1374	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x534
- stack 0: 0x80000000
1375	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x534
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
1376	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x534
- stack 0: 0x80000000
1377	 DF	PUSH2	0020	 	 
- stack 2: 0x534
- stack 1: 0x80000000
- stack 0: 0x20
1378	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x534
- stack 1: 0x80000000
- stack 0: 0x7FFFFFFF
1379	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x534
- stack 2: 0x80000000
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
1380	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x534
- stack 1: 0x80000000
- stack 0: 0x7FFFFFFF
1381	 E9	LT		 	  ;; # bgeu
- stack 1: 0x534
- stack 0: 0x1
1382	 EA	ISZERO		 	 
- stack 1: 0x534
- stack 0: 0x0
1383	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0xF3
1384	 EE	JUMPI		 	 
- stack 0: 0x534
1385	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x534
- stack 0: 0x10D
1386	 F2	JUMP		 	 
- stack 0: 0x534
1387	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x534
1388	 10E	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1389	 110	ADD		 	 
- stack 0: 0x538
1390	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1391	 112	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x11700080117022800D4FFFC0086000C019C000001B60000016AFFFF01C90000
1392	 113	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x11700080117022800D4FFFC0086000C019C000001B60000016AFFFF01C90000
- stack 0: 0xF0
1393	 115	SHR		 	 
- stack 1: 0x538
- stack 0: 0x117
1394	 116	JUMP		 	 
- stack 0: 0x538
1395	 117	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,344(ignore imm)
- stack 0: 0x538
1396	 118	PUSH1	00	 	 
- stack 1: 0x538
- stack 0: 0x0
1397	 11A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1398	 11F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x538
- stack 0: 0x0
1399	 120	PUSH2	0380	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x380
1400	 123	MLOAD		 	  ;; # read from x28
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0xB
1401	 124	PUSH4	FFFFFFFF	 	 
- stack 3: 0x538
- stack 2: 0x0
- stack 1: 0xB
- stack 0: 0xFFFFFFFF
1402	 129	AND		 	  ;; # mask to 32 bits
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0xB
1403	 12A	SUB		 	 
- stack 1: 0x538
- stack 0: 0xB
1404	 12B	PUSH2	0133	 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 2: 0x538
- stack 1: 0xB
- stack 0: 0x133
1405	 12E	JUMPI		 	 
- stack 0: 0x538
1406	 133	JUMPDEST		 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 0: 0x538
1407	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1408	 135	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x11700080117022800D4FFFC0086000C019C000001B60000016AFFFF01C90000
1409	 136	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x11700080117022800D4FFFC0086000C019C000001B60000016AFFFF01C90000
- stack 0: 0xE0
1410	 138	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1170008
1411	 139	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x1170008
- stack 0: 0xFFFF
1412	 13C	AND		 	 
- stack 1: 0x538
- stack 0: 0x8
1413	 13D	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0x8
- stack 0: 0x1
1414	 13F	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0x8
1415	 140	ADD		 	 
- stack 0: 0x540
1416	 141	PUSH4	FFFFFFFF	 	 
- stack 1: 0x540
- stack 0: 0xFFFFFFFF
1417	 146	AND		 	  ;; # mask to 32 bits
- stack 0: 0x540
1418	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1419	 148	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xD4FFFC0086000C019C000001B60000016AFFFF01C9000000D4020C01DC0001
1420	 149	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0xD4FFFC0086000C019C000001B60000016AFFFF01C9000000D4020C01DC0001
- stack 0: 0xF0
1421	 14B	SHR		 	 
- stack 1: 0x540
- stack 0: 0xD4
1422	 14C	JUMP		 	 
- stack 0: 0x540
1423	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x540
1424	 D5	PUSH2	0040	 	 
- stack 1: 0x540
- stack 0: 0x40
1425	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x540
- stack 0: 0x80000000
1426	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x540
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
1427	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x540
- stack 0: 0x80000000
1428	 DF	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0x80000000
- stack 0: 0x20
1429	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x540
- stack 1: 0x80000000
- stack 0: 0x7FFFFFFF
1430	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x540
- stack 2: 0x80000000
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
1431	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x540
- stack 1: 0x80000000
- stack 0: 0x7FFFFFFF
1432	 E9	LT		 	  ;; # bgeu
- stack 1: 0x540
- stack 0: 0x1
1433	 EA	ISZERO		 	 
- stack 1: 0x540
- stack 0: 0x0
1434	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x540
- stack 1: 0x0
- stack 0: 0xF3
1435	 EE	JUMPI		 	 
- stack 0: 0x540
1436	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x540
- stack 0: 0x10D
1437	 F2	JUMP		 	 
- stack 0: 0x540
1438	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x540
1439	 10E	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1440	 110	ADD		 	 
- stack 0: 0x544
1441	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1442	 112	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x86000C019C000001B60000016AFFFF01C9000000D4020C01DC000101FB0002
1443	 113	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x86000C019C000001B60000016AFFFF01C9000000D4020C01DC000101FB0002
- stack 0: 0xF0
1444	 115	SHR		 	 
- stack 1: 0x544
- stack 0: 0x86
1445	 116	JUMP		 	 
- stack 0: 0x544
1446	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x544
1447	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1448	 88	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x86000C019C000001B60000016AFFFF01C9000000D4020C01DC000101FB0002
1449	 89	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x86000C019C000001B60000016AFFFF01C9000000D4020C01DC000101FB0002
- stack 0: 0xE0
1450	 8B	SHR		 	 
- stack 1: 0x544
- stack 0: 0x86000C
1451	 8C	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x86000C
- stack 0: 0xFFFF
1452	 8F	AND		 	 
- stack 1: 0x544
- stack 0: 0xC
1453	 90	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0xC
- stack 0: 0x1
1454	 92	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0xC
1455	 93	PUSH2	0380	 	 
- stack 2: 0x544
- stack 1: 0xC
- stack 0: 0x380
1456	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x544
1457	 97	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1458	 99	ADD		 	 
- stack 0: 0x548
1459	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1460	 9B	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x19C000001B60000016AFFFF01C9000000D4020C01DC000101FB00020215FFE8
1461	 9C	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x19C000001B60000016AFFFF01C9000000D4020C01DC000101FB00020215FFE8
- stack 0: 0xF0
1462	 9E	SHR		 	 
- stack 1: 0x548
- stack 0: 0x19C
1463	 9F	JUMP		 	 
- stack 0: 0x548
1464	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x548
1465	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1466	 19E	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x19C000001B60000016AFFFF01C9000000D4020C01DC000101FB00020215FFE8
1467	 19F	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x19C000001B60000016AFFFF01C9000000D4020C01DC000101FB00020215FFE8
- stack 0: 0xE0
1468	 1A1	SHR		 	 
- stack 1: 0x548
- stack 0: 0x19C0000
1469	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x19C0000
- stack 0: 0xFFFF
1470	 1A5	AND		 	 
- stack 1: 0x548
- stack 0: 0x0
1471	 1A6	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x0
- stack 0: 0x1
1472	 1A8	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x0
1473	 1A9	PUSH2	0080	 	 
- stack 2: 0x548
- stack 1: 0x0
- stack 0: 0x80
1474	 1AC	MSTORE		 	  ;; # store to x4
- stack 0: 0x548
1475	 1AD	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1476	 1AF	ADD		 	 
- stack 0: 0x54C
1477	 1B0	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1478	 1B1	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x1B60000016AFFFF01C9000000D4020C01DC000101FB00020215FFE80086000D
1479	 1B2	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x1B60000016AFFFF01C9000000D4020C01DC000101FB00020215FFE80086000D
- stack 0: 0xF0
1480	 1B4	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1B6
1481	 1B5	JUMP		 	 
- stack 0: 0x54C
1482	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x54C
1483	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x54C
- stack 0: 0xF0000000
1484	 1BC	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0xF0000000
- stack 0: 0x20
1485	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x54C
1486	 1C0	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1487	 1C2	ADD		 	 
- stack 0: 0x550
1488	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1489	 1C4	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x16AFFFF01C9000000D4020C01DC000101FB00020215FFE80086000D019C0000
1490	 1C5	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x16AFFFF01C9000000D4020C01DC000101FB00020215FFE80086000D019C0000
- stack 0: 0xF0
1491	 1C7	SHR		 	 
- stack 1: 0x550
- stack 0: 0x16A
1492	 1C8	JUMP		 	 
- stack 0: 0x550
1493	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x550
1494	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1495	 16C	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x16AFFFF01C9000000D4020C01DC000101FB00020215FFE80086000D019C0000
1496	 16D	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x16AFFFF01C9000000D4020C01DC000101FB00020215FFE80086000D019C0000
- stack 0: 0xE0
1497	 16F	SHR		 	 
- stack 1: 0x550
- stack 0: 0x16AFFFF
1498	 170	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
1499	 173	AND		 	 
- stack 1: 0x550
- stack 0: 0xFFFF
1500	 174	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0xFFFF
- stack 0: 0x1
1501	 176	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1502	 177	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1503	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x550
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
1504	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x550
- stack 0: 0xEFFFFFFF
1505	 17C	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
1506	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x550
1507	 180	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1508	 182	ADD		 	 
- stack 0: 0x554
1509	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1510	 184	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x1C9000000D4020C01DC000101FB00020215FFE80086000D019C000001B60000
1511	 185	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x1C9000000D4020C01DC000101FB00020215FFE80086000D019C000001B60000
- stack 0: 0xF0
1512	 187	SHR		 	 
- stack 1: 0x554
- stack 0: 0x1C9
1513	 188	JUMP		 	 
- stack 0: 0x554
1514	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x554
1515	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x554
- stack 0: 0xF0000000
1516	 1CF	PUSH2	0040	 	 
- stack 2: 0x554
- stack 1: 0xF0000000
- stack 0: 0x40
1517	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x554
1518	 1D3	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1519	 1D5	ADD		 	 
- stack 0: 0x558
1520	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1521	 1D7	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xD4020C01DC000101FB00020215FFE80086000D019C000001B60000016AFFFF
1522	 1D8	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xD4020C01DC000101FB00020215FFE80086000D019C000001B60000016AFFFF
- stack 0: 0xF0
1523	 1DA	SHR		 	 
- stack 1: 0x558
- stack 0: 0xD4
1524	 1DB	JUMP		 	 
- stack 0: 0x558
1525	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x558
1526	 D5	PUSH2	0040	 	 
- stack 1: 0x558
- stack 0: 0x40
1527	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x558
- stack 0: 0xF0000000
1528	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x558
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
1529	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x558
- stack 0: 0xF0000000
1530	 DF	PUSH2	0020	 	 
- stack 2: 0x558
- stack 1: 0xF0000000
- stack 0: 0x20
1531	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x558
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
1532	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x558
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
1533	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x558
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
1534	 E9	LT		 	  ;; # bgeu
- stack 1: 0x558
- stack 0: 0x1
1535	 EA	ISZERO		 	 
- stack 1: 0x558
- stack 0: 0x0
1536	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0xF3
1537	 EE	JUMPI		 	 
- stack 0: 0x558
1538	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x558
- stack 0: 0x10D
1539	 F2	JUMP		 	 
- stack 0: 0x558
1540	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x558
1541	 10E	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1542	 110	ADD		 	 
- stack 0: 0x55C
1543	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1544	 112	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1DC000101FB00020215FFE80086000D019C000001B60000016AFFFF01C90000
1545	 113	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x1DC000101FB00020215FFE80086000D019C000001B60000016AFFFF01C90000
- stack 0: 0xF0
1546	 115	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1DC
1547	 116	JUMP		 	 
- stack 0: 0x55C
1548	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x55C
1549	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1550	 1DE	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1DC000101FB00020215FFE80086000D019C000001B60000016AFFFF01C90000
1551	 1DF	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x1DC000101FB00020215FFE80086000D019C000001B60000016AFFFF01C90000
- stack 0: 0xE0
1552	 1E1	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1DC0001
1553	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
1554	 1E5	AND		 	 
- stack 1: 0x55C
- stack 0: 0x1
1555	 1E6	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x1
1556	 1E8	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x1
1557	 1E9	PUSH2	0080	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x80
1558	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x0
1559	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x55C
- stack 0: 0x1
1560	 1EE	PUSH2	0080	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x80
1561	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x55C
1562	 1F2	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1563	 1F4	ADD		 	 
- stack 0: 0x560
1564	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1565	 1F6	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x1FB00020215FFE80086000D019C000001B60000016AFFFF01C9000002570000
1566	 1F7	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x1FB00020215FFE80086000D019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xF0
1567	 1F9	SHR		 	 
- stack 1: 0x560
- stack 0: 0x1FB
1568	 1FA	JUMP		 	 
- stack 0: 0x560
1569	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x560
1570	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1571	 1FD	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x1FB00020215FFE80086000D019C000001B60000016AFFFF01C9000002570000
1572	 1FE	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x1FB00020215FFE80086000D019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xE0
1573	 200	SHR		 	 
- stack 1: 0x560
- stack 0: 0x1FB0002
1574	 201	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
1575	 204	AND		 	 
- stack 1: 0x560
- stack 0: 0x2
1576	 205	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0x1
1577	 207	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x2
1578	 208	PUSH2	00A0	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0xA0
1579	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x560
1580	 20C	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1581	 20E	ADD		 	 
- stack 0: 0x564
1582	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1583	 210	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x215FFE80086000D019C000001B60000016AFFFF01C900000257000000D401E4
1584	 211	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x215FFE80086000D019C000001B60000016AFFFF01C900000257000000D401E4
- stack 0: 0xF0
1585	 213	SHR		 	 
- stack 1: 0x564
- stack 0: 0x215
1586	 214	JUMP		 	 
- stack 0: 0x564
1587	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x564
1588	 216	PUSH2	0080	 	 
- stack 1: 0x564
- stack 0: 0x80
1589	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x564
- stack 0: 0x1
1590	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1591	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x564
- stack 0: 0x1
1592	 220	PUSH2	00A0	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0xA0
1593	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x2
1594	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x564
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1595	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x2
1596	 22A	SUB		 	 
- stack 1: 0x564
- stack 0: 0x1
1597	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x233
1598	 22E	JUMPI		 	 
- stack 0: 0x564
1599	 233	JUMPDEST		 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x564
1600	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
1601	 235	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x215FFE80086000D019C000001B60000016AFFFF01C900000257000000D401E4
1602	 236	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x215FFE80086000D019C000001B60000016AFFFF01C900000257000000D401E4
- stack 0: 0xE0
1603	 238	SHR		 	 
- stack 1: 0x564
- stack 0: 0x215FFE8
1604	 239	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x215FFE8
- stack 0: 0xFFFF
1605	 23C	AND		 	 
- stack 1: 0x564
- stack 0: 0xFFE8
1606	 23D	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0xFFE8
- stack 0: 0x1
1607	 23F	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
1608	 240	ADD		 	 
- stack 0: 0x54C
1609	 241	PUSH4	FFFFFFFF	 	 
- stack 1: 0x54C
- stack 0: 0xFFFFFFFF
1610	 246	AND		 	  ;; # mask to 32 bits
- stack 0: 0x54C
1611	 247	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1612	 248	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x1B60000016AFFFF01C9000000D4020C01DC000101FB00020215FFE80086000D
1613	 249	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x1B60000016AFFFF01C9000000D4020C01DC000101FB00020215FFE80086000D
- stack 0: 0xF0
1614	 24B	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1B6
1615	 24C	JUMP		 	 
- stack 0: 0x54C
1616	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x54C
1617	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x54C
- stack 0: 0xF0000000
1618	 1BC	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0xF0000000
- stack 0: 0x20
1619	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x54C
1620	 1C0	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1621	 1C2	ADD		 	 
- stack 0: 0x550
1622	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1623	 1C4	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x16AFFFF01C9000000D4020C01DC000101FB00020215FFE80086000D019C0000
1624	 1C5	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x16AFFFF01C9000000D4020C01DC000101FB00020215FFE80086000D019C0000
- stack 0: 0xF0
1625	 1C7	SHR		 	 
- stack 1: 0x550
- stack 0: 0x16A
1626	 1C8	JUMP		 	 
- stack 0: 0x550
1627	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x550
1628	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1629	 16C	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x16AFFFF01C9000000D4020C01DC000101FB00020215FFE80086000D019C0000
1630	 16D	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x16AFFFF01C9000000D4020C01DC000101FB00020215FFE80086000D019C0000
- stack 0: 0xE0
1631	 16F	SHR		 	 
- stack 1: 0x550
- stack 0: 0x16AFFFF
1632	 170	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
1633	 173	AND		 	 
- stack 1: 0x550
- stack 0: 0xFFFF
1634	 174	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0xFFFF
- stack 0: 0x1
1635	 176	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1636	 177	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1637	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x550
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
1638	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x550
- stack 0: 0xEFFFFFFF
1639	 17C	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
1640	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x550
1641	 180	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1642	 182	ADD		 	 
- stack 0: 0x554
1643	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1644	 184	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x1C9000000D4020C01DC000101FB00020215FFE80086000D019C000001B60000
1645	 185	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x1C9000000D4020C01DC000101FB00020215FFE80086000D019C000001B60000
- stack 0: 0xF0
1646	 187	SHR		 	 
- stack 1: 0x554
- stack 0: 0x1C9
1647	 188	JUMP		 	 
- stack 0: 0x554
1648	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x554
1649	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x554
- stack 0: 0xF0000000
1650	 1CF	PUSH2	0040	 	 
- stack 2: 0x554
- stack 1: 0xF0000000
- stack 0: 0x40
1651	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x554
1652	 1D3	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1653	 1D5	ADD		 	 
- stack 0: 0x558
1654	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1655	 1D7	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xD4020C01DC000101FB00020215FFE80086000D019C000001B60000016AFFFF
1656	 1D8	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xD4020C01DC000101FB00020215FFE80086000D019C000001B60000016AFFFF
- stack 0: 0xF0
1657	 1DA	SHR		 	 
- stack 1: 0x558
- stack 0: 0xD4
1658	 1DB	JUMP		 	 
- stack 0: 0x558
1659	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x558
1660	 D5	PUSH2	0040	 	 
- stack 1: 0x558
- stack 0: 0x40
1661	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x558
- stack 0: 0xF0000000
1662	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x558
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
1663	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x558
- stack 0: 0xF0000000
1664	 DF	PUSH2	0020	 	 
- stack 2: 0x558
- stack 1: 0xF0000000
- stack 0: 0x20
1665	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x558
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
1666	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x558
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
1667	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x558
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
1668	 E9	LT		 	  ;; # bgeu
- stack 1: 0x558
- stack 0: 0x1
1669	 EA	ISZERO		 	 
- stack 1: 0x558
- stack 0: 0x0
1670	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0xF3
1671	 EE	JUMPI		 	 
- stack 0: 0x558
1672	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x558
- stack 0: 0x10D
1673	 F2	JUMP		 	 
- stack 0: 0x558
1674	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x558
1675	 10E	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1676	 110	ADD		 	 
- stack 0: 0x55C
1677	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1678	 112	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1DC000101FB00020215FFE80086000D019C000001B60000016AFFFF01C90000
1679	 113	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x1DC000101FB00020215FFE80086000D019C000001B60000016AFFFF01C90000
- stack 0: 0xF0
1680	 115	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1DC
1681	 116	JUMP		 	 
- stack 0: 0x55C
1682	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x55C
1683	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1684	 1DE	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1DC000101FB00020215FFE80086000D019C000001B60000016AFFFF01C90000
1685	 1DF	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x1DC000101FB00020215FFE80086000D019C000001B60000016AFFFF01C90000
- stack 0: 0xE0
1686	 1E1	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1DC0001
1687	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
1688	 1E5	AND		 	 
- stack 1: 0x55C
- stack 0: 0x1
1689	 1E6	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x1
1690	 1E8	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x1
1691	 1E9	PUSH2	0080	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x80
1692	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x1
1693	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x55C
- stack 0: 0x2
1694	 1EE	PUSH2	0080	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0x80
1695	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x55C
1696	 1F2	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1697	 1F4	ADD		 	 
- stack 0: 0x560
1698	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1699	 1F6	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x1FB00020215FFE80086000D019C000001B60000016AFFFF01C9000002570000
1700	 1F7	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x1FB00020215FFE80086000D019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xF0
1701	 1F9	SHR		 	 
- stack 1: 0x560
- stack 0: 0x1FB
1702	 1FA	JUMP		 	 
- stack 0: 0x560
1703	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x560
1704	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1705	 1FD	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x1FB00020215FFE80086000D019C000001B60000016AFFFF01C9000002570000
1706	 1FE	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x1FB00020215FFE80086000D019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xE0
1707	 200	SHR		 	 
- stack 1: 0x560
- stack 0: 0x1FB0002
1708	 201	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
1709	 204	AND		 	 
- stack 1: 0x560
- stack 0: 0x2
1710	 205	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0x1
1711	 207	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x2
1712	 208	PUSH2	00A0	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0xA0
1713	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x560
1714	 20C	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1715	 20E	ADD		 	 
- stack 0: 0x564
1716	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1717	 210	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x215FFE80086000D019C000001B60000016AFFFF01C900000257000000D401E4
1718	 211	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x215FFE80086000D019C000001B60000016AFFFF01C900000257000000D401E4
- stack 0: 0xF0
1719	 213	SHR		 	 
- stack 1: 0x564
- stack 0: 0x215
1720	 214	JUMP		 	 
- stack 0: 0x564
1721	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x564
1722	 216	PUSH2	0080	 	 
- stack 1: 0x564
- stack 0: 0x80
1723	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x564
- stack 0: 0x2
1724	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x564
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1725	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x564
- stack 0: 0x2
1726	 220	PUSH2	00A0	 	 
- stack 2: 0x564
- stack 1: 0x2
- stack 0: 0xA0
1727	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x564
- stack 1: 0x2
- stack 0: 0x2
1728	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x564
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1729	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x564
- stack 1: 0x2
- stack 0: 0x2
1730	 22A	SUB		 	 
- stack 1: 0x564
- stack 0: 0x0
1731	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x233
1732	 22E	JUMPI		 	 
- stack 0: 0x564
1733	 22F	PUSH2	024D	 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 1: 0x564
- stack 0: 0x24D
1734	 232	JUMP		 	 
- stack 0: 0x564
1735	 24D	JUMPDEST		 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x564
1736	 24E	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1737	 250	ADD		 	 
- stack 0: 0x568
1738	 251	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1739	 252	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x86000D019C000001B60000016AFFFF01C900000257000000D401E401DC0001
1740	 253	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x86000D019C000001B60000016AFFFF01C900000257000000D401E401DC0001
- stack 0: 0xF0
1741	 255	SHR		 	 
- stack 1: 0x568
- stack 0: 0x86
1742	 256	JUMP		 	 
- stack 0: 0x568
1743	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x568
1744	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1745	 88	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x86000D019C000001B60000016AFFFF01C900000257000000D401E401DC0001
1746	 89	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x86000D019C000001B60000016AFFFF01C900000257000000D401E401DC0001
- stack 0: 0xE0
1747	 8B	SHR		 	 
- stack 1: 0x568
- stack 0: 0x86000D
1748	 8C	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x86000D
- stack 0: 0xFFFF
1749	 8F	AND		 	 
- stack 1: 0x568
- stack 0: 0xD
1750	 90	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0xD
- stack 0: 0x1
1751	 92	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0xD
1752	 93	PUSH2	0380	 	 
- stack 2: 0x568
- stack 1: 0xD
- stack 0: 0x380
1753	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x568
1754	 97	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1755	 99	ADD		 	 
- stack 0: 0x56C
1756	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1757	 9B	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x19C000001B60000016AFFFF01C900000257000000D401E401DC000101FB0002
1758	 9C	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x19C000001B60000016AFFFF01C900000257000000D401E401DC000101FB0002
- stack 0: 0xF0
1759	 9E	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x19C
1760	 9F	JUMP		 	 
- stack 0: 0x56C
1761	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x56C
1762	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
1763	 19E	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x19C000001B60000016AFFFF01C900000257000000D401E401DC000101FB0002
1764	 19F	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x19C000001B60000016AFFFF01C900000257000000D401E401DC000101FB0002
- stack 0: 0xE0
1765	 1A1	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x19C0000
1766	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x19C0000
- stack 0: 0xFFFF
1767	 1A5	AND		 	 
- stack 1: 0x56C
- stack 0: 0x0
1768	 1A6	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x1
1769	 1A8	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x0
1770	 1A9	PUSH2	0080	 	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x80
1771	 1AC	MSTORE		 	  ;; # store to x4
- stack 0: 0x56C
1772	 1AD	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1773	 1AF	ADD		 	 
- stack 0: 0x570
1774	 1B0	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1775	 1B1	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x1B60000016AFFFF01C900000257000000D401E401DC000101FB00020215FFE4
1776	 1B2	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x1B60000016AFFFF01C900000257000000D401E401DC000101FB00020215FFE4
- stack 0: 0xF0
1777	 1B4	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1B6
1778	 1B5	JUMP		 	 
- stack 0: 0x570
1779	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x570
1780	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x570
- stack 0: 0xF0000000
1781	 1BC	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0xF0000000
- stack 0: 0x20
1782	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x570
1783	 1C0	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1784	 1C2	ADD		 	 
- stack 0: 0x574
1785	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1786	 1C4	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x16AFFFF01C900000257000000D401E401DC000101FB00020215FFE40086000E
1787	 1C5	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x16AFFFF01C900000257000000D401E401DC000101FB00020215FFE40086000E
- stack 0: 0xF0
1788	 1C7	SHR		 	 
- stack 1: 0x574
- stack 0: 0x16A
1789	 1C8	JUMP		 	 
- stack 0: 0x574
1790	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x574
1791	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1792	 16C	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x16AFFFF01C900000257000000D401E401DC000101FB00020215FFE40086000E
1793	 16D	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x16AFFFF01C900000257000000D401E401DC000101FB00020215FFE40086000E
- stack 0: 0xE0
1794	 16F	SHR		 	 
- stack 1: 0x574
- stack 0: 0x16AFFFF
1795	 170	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
1796	 173	AND		 	 
- stack 1: 0x574
- stack 0: 0xFFFF
1797	 174	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0xFFFF
- stack 0: 0x1
1798	 176	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1799	 177	PUSH2	0020	 	 
- stack 2: 0x574
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1800	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x574
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
1801	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x574
- stack 0: 0xEFFFFFFF
1802	 17C	PUSH2	0020	 	 
- stack 2: 0x574
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
1803	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x574
1804	 180	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1805	 182	ADD		 	 
- stack 0: 0x578
1806	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1807	 184	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1C900000257000000D401E401DC000101FB00020215FFE40086000E019C0000
1808	 185	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1C900000257000000D401E401DC000101FB00020215FFE40086000E019C0000
- stack 0: 0xF0
1809	 187	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1C9
1810	 188	JUMP		 	 
- stack 0: 0x578
1811	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x578
1812	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x578
- stack 0: 0xF0000000
1813	 1CF	PUSH2	0040	 	 
- stack 2: 0x578
- stack 1: 0xF0000000
- stack 0: 0x40
1814	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x578
1815	 1D3	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1816	 1D5	ADD		 	 
- stack 0: 0x57C
1817	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1818	 1D7	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x257000000D401E401DC000101FB00020215FFE40086000E019C000001B60000
1819	 1D8	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x257000000D401E401DC000101FB00020215FFE40086000E019C000001B60000
- stack 0: 0xF0
1820	 1DA	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x257
1821	 1DB	JUMP		 	 
- stack 0: 0x57C
1822	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x57C
1823	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
1824	 259	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x257000000D401E401DC000101FB00020215FFE40086000E019C000001B60000
1825	 25A	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x257000000D401E401DC000101FB00020215FFE40086000E019C000001B60000
- stack 0: 0xE0
1826	 25C	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x2570000
1827	 25D	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x2570000
- stack 0: 0xFFFF
1828	 260	AND		 	 
- stack 1: 0x57C
- stack 0: 0x0
1829	 261	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x1
1830	 263	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x0
1831	 264	POP		 	 
- stack 0: 0x57C
1832	 265	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1833	 267	ADD		 	 
- stack 0: 0x580
1834	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1835	 269	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xD401E401DC000101FB00020215FFE40086000E019C000001B60000016AFFFF
1836	 26A	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xD401E401DC000101FB00020215FFE40086000E019C000001B60000016AFFFF
- stack 0: 0xF0
1837	 26C	SHR		 	 
- stack 1: 0x580
- stack 0: 0xD4
1838	 26D	JUMP		 	 
- stack 0: 0x580
1839	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x580
1840	 D5	PUSH2	0040	 	 
- stack 1: 0x580
- stack 0: 0x40
1841	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x580
- stack 0: 0xF0000000
1842	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x580
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
1843	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x580
- stack 0: 0xF0000000
1844	 DF	PUSH2	0020	 	 
- stack 2: 0x580
- stack 1: 0xF0000000
- stack 0: 0x20
1845	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x580
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
1846	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x580
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
1847	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x580
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
1848	 E9	LT		 	  ;; # bgeu
- stack 1: 0x580
- stack 0: 0x1
1849	 EA	ISZERO		 	 
- stack 1: 0x580
- stack 0: 0x0
1850	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0xF3
1851	 EE	JUMPI		 	 
- stack 0: 0x580
1852	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x580
- stack 0: 0x10D
1853	 F2	JUMP		 	 
- stack 0: 0x580
1854	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x580
1855	 10E	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1856	 110	ADD		 	 
- stack 0: 0x584
1857	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1858	 112	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1DC000101FB00020215FFE40086000E019C000001B60000016AFFFF01C90000
1859	 113	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x1DC000101FB00020215FFE40086000E019C000001B60000016AFFFF01C90000
- stack 0: 0xF0
1860	 115	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1DC
1861	 116	JUMP		 	 
- stack 0: 0x584
1862	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x584
1863	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
1864	 1DE	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1DC000101FB00020215FFE40086000E019C000001B60000016AFFFF01C90000
1865	 1DF	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x1DC000101FB00020215FFE40086000E019C000001B60000016AFFFF01C90000
- stack 0: 0xE0
1866	 1E1	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1DC0001
1867	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
1868	 1E5	AND		 	 
- stack 1: 0x584
- stack 0: 0x1
1869	 1E6	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x1
1870	 1E8	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x1
1871	 1E9	PUSH2	0080	 	 
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x80
1872	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x0
1873	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x584
- stack 0: 0x1
1874	 1EE	PUSH2	0080	 	 
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x80
1875	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x584
1876	 1F2	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1877	 1F4	ADD		 	 
- stack 0: 0x588
1878	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1879	 1F6	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x1FB00020215FFE40086000E019C000001B60000016AFFFF01C9000002570000
1880	 1F7	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x1FB00020215FFE40086000E019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xF0
1881	 1F9	SHR		 	 
- stack 1: 0x588
- stack 0: 0x1FB
1882	 1FA	JUMP		 	 
- stack 0: 0x588
1883	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x588
1884	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
1885	 1FD	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x1FB00020215FFE40086000E019C000001B60000016AFFFF01C9000002570000
1886	 1FE	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x1FB00020215FFE40086000E019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xE0
1887	 200	SHR		 	 
- stack 1: 0x588
- stack 0: 0x1FB0002
1888	 201	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
1889	 204	AND		 	 
- stack 1: 0x588
- stack 0: 0x2
1890	 205	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x2
- stack 0: 0x1
1891	 207	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x2
1892	 208	PUSH2	00A0	 	 
- stack 2: 0x588
- stack 1: 0x2
- stack 0: 0xA0
1893	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x588
1894	 20C	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
1895	 20E	ADD		 	 
- stack 0: 0x58C
1896	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
1897	 210	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x215FFE40086000E019C000001B60000016AFFFF01C900000257000002570000
1898	 211	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x215FFE40086000E019C000001B60000016AFFFF01C900000257000002570000
- stack 0: 0xF0
1899	 213	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x215
1900	 214	JUMP		 	 
- stack 0: 0x58C
1901	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x58C
1902	 216	PUSH2	0080	 	 
- stack 1: 0x58C
- stack 0: 0x80
1903	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x58C
- stack 0: 0x1
1904	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1905	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x58C
- stack 0: 0x1
1906	 220	PUSH2	00A0	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0xA0
1907	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x2
1908	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x58C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1909	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x2
1910	 22A	SUB		 	 
- stack 1: 0x58C
- stack 0: 0x1
1911	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x233
1912	 22E	JUMPI		 	 
- stack 0: 0x58C
1913	 233	JUMPDEST		 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x58C
1914	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
1915	 235	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x215FFE40086000E019C000001B60000016AFFFF01C900000257000002570000
1916	 236	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x215FFE40086000E019C000001B60000016AFFFF01C900000257000002570000
- stack 0: 0xE0
1917	 238	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x215FFE4
1918	 239	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x215FFE4
- stack 0: 0xFFFF
1919	 23C	AND		 	 
- stack 1: 0x58C
- stack 0: 0xFFE4
1920	 23D	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0xFFE4
- stack 0: 0x1
1921	 23F	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
1922	 240	ADD		 	 
- stack 0: 0x570
1923	 241	PUSH4	FFFFFFFF	 	 
- stack 1: 0x570
- stack 0: 0xFFFFFFFF
1924	 246	AND		 	  ;; # mask to 32 bits
- stack 0: 0x570
1925	 247	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1926	 248	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x1B60000016AFFFF01C900000257000000D401E401DC000101FB00020215FFE4
1927	 249	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x1B60000016AFFFF01C900000257000000D401E401DC000101FB00020215FFE4
- stack 0: 0xF0
1928	 24B	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1B6
1929	 24C	JUMP		 	 
- stack 0: 0x570
1930	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x570
1931	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x570
- stack 0: 0xF0000000
1932	 1BC	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0xF0000000
- stack 0: 0x20
1933	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x570
1934	 1C0	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1935	 1C2	ADD		 	 
- stack 0: 0x574
1936	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1937	 1C4	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x16AFFFF01C900000257000000D401E401DC000101FB00020215FFE40086000E
1938	 1C5	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x16AFFFF01C900000257000000D401E401DC000101FB00020215FFE40086000E
- stack 0: 0xF0
1939	 1C7	SHR		 	 
- stack 1: 0x574
- stack 0: 0x16A
1940	 1C8	JUMP		 	 
- stack 0: 0x574
1941	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x574
1942	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1943	 16C	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x16AFFFF01C900000257000000D401E401DC000101FB00020215FFE40086000E
1944	 16D	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x16AFFFF01C900000257000000D401E401DC000101FB00020215FFE40086000E
- stack 0: 0xE0
1945	 16F	SHR		 	 
- stack 1: 0x574
- stack 0: 0x16AFFFF
1946	 170	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
1947	 173	AND		 	 
- stack 1: 0x574
- stack 0: 0xFFFF
1948	 174	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0xFFFF
- stack 0: 0x1
1949	 176	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1950	 177	PUSH2	0020	 	 
- stack 2: 0x574
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1951	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x574
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
1952	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x574
- stack 0: 0xEFFFFFFF
1953	 17C	PUSH2	0020	 	 
- stack 2: 0x574
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
1954	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x574
1955	 180	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1956	 182	ADD		 	 
- stack 0: 0x578
1957	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1958	 184	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1C900000257000000D401E401DC000101FB00020215FFE40086000E019C0000
1959	 185	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1C900000257000000D401E401DC000101FB00020215FFE40086000E019C0000
- stack 0: 0xF0
1960	 187	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1C9
1961	 188	JUMP		 	 
- stack 0: 0x578
1962	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x578
1963	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x578
- stack 0: 0xF0000000
1964	 1CF	PUSH2	0040	 	 
- stack 2: 0x578
- stack 1: 0xF0000000
- stack 0: 0x40
1965	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x578
1966	 1D3	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1967	 1D5	ADD		 	 
- stack 0: 0x57C
1968	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1969	 1D7	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x257000000D401E401DC000101FB00020215FFE40086000E019C000001B60000
1970	 1D8	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x257000000D401E401DC000101FB00020215FFE40086000E019C000001B60000
- stack 0: 0xF0
1971	 1DA	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x257
1972	 1DB	JUMP		 	 
- stack 0: 0x57C
1973	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x57C
1974	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
1975	 259	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x257000000D401E401DC000101FB00020215FFE40086000E019C000001B60000
1976	 25A	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x257000000D401E401DC000101FB00020215FFE40086000E019C000001B60000
- stack 0: 0xE0
1977	 25C	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x2570000
1978	 25D	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x2570000
- stack 0: 0xFFFF
1979	 260	AND		 	 
- stack 1: 0x57C
- stack 0: 0x0
1980	 261	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x1
1981	 263	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x0
1982	 264	POP		 	 
- stack 0: 0x57C
1983	 265	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1984	 267	ADD		 	 
- stack 0: 0x580
1985	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1986	 269	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xD401E401DC000101FB00020215FFE40086000E019C000001B60000016AFFFF
1987	 26A	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xD401E401DC000101FB00020215FFE40086000E019C000001B60000016AFFFF
- stack 0: 0xF0
1988	 26C	SHR		 	 
- stack 1: 0x580
- stack 0: 0xD4
1989	 26D	JUMP		 	 
- stack 0: 0x580
1990	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x580
1991	 D5	PUSH2	0040	 	 
- stack 1: 0x580
- stack 0: 0x40
1992	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x580
- stack 0: 0xF0000000
1993	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x580
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
1994	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x580
- stack 0: 0xF0000000
1995	 DF	PUSH2	0020	 	 
- stack 2: 0x580
- stack 1: 0xF0000000
- stack 0: 0x20
1996	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x580
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
1997	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x580
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
1998	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x580
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
1999	 E9	LT		 	  ;; # bgeu
- stack 1: 0x580
- stack 0: 0x1
2000	 EA	ISZERO		 	 
- stack 1: 0x580
- stack 0: 0x0
2001	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0xF3
2002	 EE	JUMPI		 	 
- stack 0: 0x580
2003	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x580
- stack 0: 0x10D
2004	 F2	JUMP		 	 
- stack 0: 0x580
2005	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x580
2006	 10E	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2007	 110	ADD		 	 
- stack 0: 0x584
2008	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2009	 112	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1DC000101FB00020215FFE40086000E019C000001B60000016AFFFF01C90000
2010	 113	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x1DC000101FB00020215FFE40086000E019C000001B60000016AFFFF01C90000
- stack 0: 0xF0
2011	 115	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1DC
2012	 116	JUMP		 	 
- stack 0: 0x584
2013	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x584
2014	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2015	 1DE	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1DC000101FB00020215FFE40086000E019C000001B60000016AFFFF01C90000
2016	 1DF	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x1DC000101FB00020215FFE40086000E019C000001B60000016AFFFF01C90000
- stack 0: 0xE0
2017	 1E1	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1DC0001
2018	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
2019	 1E5	AND		 	 
- stack 1: 0x584
- stack 0: 0x1
2020	 1E6	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x1
2021	 1E8	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x1
2022	 1E9	PUSH2	0080	 	 
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x80
2023	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x1
2024	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x584
- stack 0: 0x2
2025	 1EE	PUSH2	0080	 	 
- stack 2: 0x584
- stack 1: 0x2
- stack 0: 0x80
2026	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x584
2027	 1F2	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2028	 1F4	ADD		 	 
- stack 0: 0x588
2029	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2030	 1F6	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x1FB00020215FFE40086000E019C000001B60000016AFFFF01C9000002570000
2031	 1F7	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x1FB00020215FFE40086000E019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xF0
2032	 1F9	SHR		 	 
- stack 1: 0x588
- stack 0: 0x1FB
2033	 1FA	JUMP		 	 
- stack 0: 0x588
2034	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x588
2035	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2036	 1FD	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x1FB00020215FFE40086000E019C000001B60000016AFFFF01C9000002570000
2037	 1FE	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x1FB00020215FFE40086000E019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xE0
2038	 200	SHR		 	 
- stack 1: 0x588
- stack 0: 0x1FB0002
2039	 201	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
2040	 204	AND		 	 
- stack 1: 0x588
- stack 0: 0x2
2041	 205	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x2
- stack 0: 0x1
2042	 207	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x2
2043	 208	PUSH2	00A0	 	 
- stack 2: 0x588
- stack 1: 0x2
- stack 0: 0xA0
2044	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x588
2045	 20C	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2046	 20E	ADD		 	 
- stack 0: 0x58C
2047	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2048	 210	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x215FFE40086000E019C000001B60000016AFFFF01C900000257000002570000
2049	 211	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x215FFE40086000E019C000001B60000016AFFFF01C900000257000002570000
- stack 0: 0xF0
2050	 213	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x215
2051	 214	JUMP		 	 
- stack 0: 0x58C
2052	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x58C
2053	 216	PUSH2	0080	 	 
- stack 1: 0x58C
- stack 0: 0x80
2054	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x58C
- stack 0: 0x2
2055	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2056	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x58C
- stack 0: 0x2
2057	 220	PUSH2	00A0	 	 
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0xA0
2058	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0x2
2059	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x58C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2060	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0x2
2061	 22A	SUB		 	 
- stack 1: 0x58C
- stack 0: 0x0
2062	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x233
2063	 22E	JUMPI		 	 
- stack 0: 0x58C
2064	 22F	PUSH2	024D	 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 1: 0x58C
- stack 0: 0x24D
2065	 232	JUMP		 	 
- stack 0: 0x58C
2066	 24D	JUMPDEST		 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x58C
2067	 24E	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2068	 250	ADD		 	 
- stack 0: 0x590
2069	 251	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2070	 252	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x86000E019C000001B60000016AFFFF01C90000025700000257000000D401B8
2071	 253	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x86000E019C000001B60000016AFFFF01C90000025700000257000000D401B8
- stack 0: 0xF0
2072	 255	SHR		 	 
- stack 1: 0x590
- stack 0: 0x86
2073	 256	JUMP		 	 
- stack 0: 0x590
2074	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x590
2075	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2076	 88	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x86000E019C000001B60000016AFFFF01C90000025700000257000000D401B8
2077	 89	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x86000E019C000001B60000016AFFFF01C90000025700000257000000D401B8
- stack 0: 0xE0
2078	 8B	SHR		 	 
- stack 1: 0x590
- stack 0: 0x86000E
2079	 8C	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x86000E
- stack 0: 0xFFFF
2080	 8F	AND		 	 
- stack 1: 0x590
- stack 0: 0xE
2081	 90	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0xE
- stack 0: 0x1
2082	 92	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0xE
2083	 93	PUSH2	0380	 	 
- stack 2: 0x590
- stack 1: 0xE
- stack 0: 0x380
2084	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x590
2085	 97	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2086	 99	ADD		 	 
- stack 0: 0x594
2087	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2088	 9B	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x19C000001B60000016AFFFF01C90000025700000257000000D401B801DC0001
2089	 9C	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x19C000001B60000016AFFFF01C90000025700000257000000D401B801DC0001
- stack 0: 0xF0
2090	 9E	SHR		 	 
- stack 1: 0x594
- stack 0: 0x19C
2091	 9F	JUMP		 	 
- stack 0: 0x594
2092	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x594
2093	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2094	 19E	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x19C000001B60000016AFFFF01C90000025700000257000000D401B801DC0001
2095	 19F	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x19C000001B60000016AFFFF01C90000025700000257000000D401B801DC0001
- stack 0: 0xE0
2096	 1A1	SHR		 	 
- stack 1: 0x594
- stack 0: 0x19C0000
2097	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x19C0000
- stack 0: 0xFFFF
2098	 1A5	AND		 	 
- stack 1: 0x594
- stack 0: 0x0
2099	 1A6	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2100	 1A8	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x0
2101	 1A9	PUSH2	0080	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x80
2102	 1AC	MSTORE		 	  ;; # store to x4
- stack 0: 0x594
2103	 1AD	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2104	 1AF	ADD		 	 
- stack 0: 0x598
2105	 1B0	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2106	 1B1	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1B60000016AFFFF01C90000025700000257000000D401B801DC000101FB0002
2107	 1B2	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x1B60000016AFFFF01C90000025700000257000000D401B801DC000101FB0002
- stack 0: 0xF0
2108	 1B4	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1B6
2109	 1B5	JUMP		 	 
- stack 0: 0x598
2110	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x598
2111	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x598
- stack 0: 0xF0000000
2112	 1BC	PUSH2	0020	 	 
- stack 2: 0x598
- stack 1: 0xF0000000
- stack 0: 0x20
2113	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x598
2114	 1C0	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2115	 1C2	ADD		 	 
- stack 0: 0x59C
2116	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2117	 1C4	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x16AFFFF01C90000025700000257000000D401B801DC000101FB00020215FFE0
2118	 1C5	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x16AFFFF01C90000025700000257000000D401B801DC000101FB00020215FFE0
- stack 0: 0xF0
2119	 1C7	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x16A
2120	 1C8	JUMP		 	 
- stack 0: 0x59C
2121	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x59C
2122	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2123	 16C	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x16AFFFF01C90000025700000257000000D401B801DC000101FB00020215FFE0
2124	 16D	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x16AFFFF01C90000025700000257000000D401B801DC000101FB00020215FFE0
- stack 0: 0xE0
2125	 16F	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x16AFFFF
2126	 170	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
2127	 173	AND		 	 
- stack 1: 0x59C
- stack 0: 0xFFFF
2128	 174	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0xFFFF
- stack 0: 0x1
2129	 176	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2130	 177	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2131	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x59C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
2132	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x59C
- stack 0: 0xEFFFFFFF
2133	 17C	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
2134	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x59C
2135	 180	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2136	 182	ADD		 	 
- stack 0: 0x5A0
2137	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2138	 184	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x1C90000025700000257000000D401B801DC000101FB00020215FFE00086000F
2139	 185	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x1C90000025700000257000000D401B801DC000101FB00020215FFE00086000F
- stack 0: 0xF0
2140	 187	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x1C9
2141	 188	JUMP		 	 
- stack 0: 0x5A0
2142	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x5A0
2143	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x5A0
- stack 0: 0xF0000000
2144	 1CF	PUSH2	0040	 	 
- stack 2: 0x5A0
- stack 1: 0xF0000000
- stack 0: 0x40
2145	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x5A0
2146	 1D3	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2147	 1D5	ADD		 	 
- stack 0: 0x5A4
2148	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2149	 1D7	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x25700000257000000D401B801DC000101FB00020215FFE00086000F019C0000
2150	 1D8	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x25700000257000000D401B801DC000101FB00020215FFE00086000F019C0000
- stack 0: 0xF0
2151	 1DA	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x257
2152	 1DB	JUMP		 	 
- stack 0: 0x5A4
2153	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A4
2154	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2155	 259	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x25700000257000000D401B801DC000101FB00020215FFE00086000F019C0000
2156	 25A	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x25700000257000000D401B801DC000101FB00020215FFE00086000F019C0000
- stack 0: 0xE0
2157	 25C	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x2570000
2158	 25D	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x2570000
- stack 0: 0xFFFF
2159	 260	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2160	 261	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2161	 263	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2162	 264	POP		 	 
- stack 0: 0x5A4
2163	 265	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2164	 267	ADD		 	 
- stack 0: 0x5A8
2165	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2166	 269	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x257000000D401B801DC000101FB00020215FFE00086000F019C000001B60000
2167	 26A	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x257000000D401B801DC000101FB00020215FFE00086000F019C000001B60000
- stack 0: 0xF0
2168	 26C	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x257
2169	 26D	JUMP		 	 
- stack 0: 0x5A8
2170	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A8
2171	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2172	 259	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x257000000D401B801DC000101FB00020215FFE00086000F019C000001B60000
2173	 25A	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x257000000D401B801DC000101FB00020215FFE00086000F019C000001B60000
- stack 0: 0xE0
2174	 25C	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2570000
2175	 25D	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x2570000
- stack 0: 0xFFFF
2176	 260	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2177	 261	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2178	 263	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2179	 264	POP		 	 
- stack 0: 0x5A8
2180	 265	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2181	 267	ADD		 	 
- stack 0: 0x5AC
2182	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2183	 269	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xD401B801DC000101FB00020215FFE00086000F019C000001B60000016AFFFF
2184	 26A	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0xD401B801DC000101FB00020215FFE00086000F019C000001B60000016AFFFF
- stack 0: 0xF0
2185	 26C	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xD4
2186	 26D	JUMP		 	 
- stack 0: 0x5AC
2187	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x5AC
2188	 D5	PUSH2	0040	 	 
- stack 1: 0x5AC
- stack 0: 0x40
2189	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5AC
- stack 0: 0xF0000000
2190	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5AC
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
2191	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5AC
- stack 0: 0xF0000000
2192	 DF	PUSH2	0020	 	 
- stack 2: 0x5AC
- stack 1: 0xF0000000
- stack 0: 0x20
2193	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5AC
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
2194	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5AC
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
2195	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5AC
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
2196	 E9	LT		 	  ;; # bgeu
- stack 1: 0x5AC
- stack 0: 0x1
2197	 EA	ISZERO		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2198	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0xF3
2199	 EE	JUMPI		 	 
- stack 0: 0x5AC
2200	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x5AC
- stack 0: 0x10D
2201	 F2	JUMP		 	 
- stack 0: 0x5AC
2202	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x5AC
2203	 10E	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2204	 110	ADD		 	 
- stack 0: 0x5B0
2205	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2206	 112	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1DC000101FB00020215FFE00086000F019C000001B60000016AFFFF02570000
2207	 113	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x1DC000101FB00020215FFE00086000F019C000001B60000016AFFFF02570000
- stack 0: 0xF0
2208	 115	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1DC
2209	 116	JUMP		 	 
- stack 0: 0x5B0
2210	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B0
2211	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2212	 1DE	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1DC000101FB00020215FFE00086000F019C000001B60000016AFFFF02570000
2213	 1DF	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x1DC000101FB00020215FFE00086000F019C000001B60000016AFFFF02570000
- stack 0: 0xE0
2214	 1E1	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1DC0001
2215	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
2216	 1E5	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x1
2217	 1E6	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x1
- stack 0: 0x1
2218	 1E8	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x1
2219	 1E9	PUSH2	0080	 	 
- stack 2: 0x5B0
- stack 1: 0x1
- stack 0: 0x80
2220	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B0
- stack 1: 0x1
- stack 0: 0x0
2221	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B0
- stack 0: 0x1
2222	 1EE	PUSH2	0080	 	 
- stack 2: 0x5B0
- stack 1: 0x1
- stack 0: 0x80
2223	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B0
2224	 1F2	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2225	 1F4	ADD		 	 
- stack 0: 0x5B4
2226	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2227	 1F6	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1FB00020215FFE00086000F019C000001B60000016AFFFF0257000001C90000
2228	 1F7	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x1FB00020215FFE00086000F019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xF0
2229	 1F9	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1FB
2230	 1FA	JUMP		 	 
- stack 0: 0x5B4
2231	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B4
2232	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2233	 1FD	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1FB00020215FFE00086000F019C000001B60000016AFFFF0257000001C90000
2234	 1FE	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x1FB00020215FFE00086000F019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xE0
2235	 200	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1FB0002
2236	 201	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
2237	 204	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x2
2238	 205	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0x1
2239	 207	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x2
2240	 208	PUSH2	00A0	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0xA0
2241	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B4
2242	 20C	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2243	 20E	ADD		 	 
- stack 0: 0x5B8
2244	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2245	 210	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x215FFE00086000F019C000001B60000016AFFFF0257000001C9000000D40190
2246	 211	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x215FFE00086000F019C000001B60000016AFFFF0257000001C9000000D40190
- stack 0: 0xF0
2247	 213	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x215
2248	 214	JUMP		 	 
- stack 0: 0x5B8
2249	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5B8
2250	 216	PUSH2	0080	 	 
- stack 1: 0x5B8
- stack 0: 0x80
2251	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x5B8
- stack 0: 0x1
2252	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2253	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B8
- stack 0: 0x1
2254	 220	PUSH2	00A0	 	 
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0xA0
2255	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0x2
2256	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2257	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0x2
2258	 22A	SUB		 	 
- stack 1: 0x5B8
- stack 0: 0x1
2259	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0x233
2260	 22E	JUMPI		 	 
- stack 0: 0x5B8
2261	 233	JUMPDEST		 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x5B8
2262	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2263	 235	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x215FFE00086000F019C000001B60000016AFFFF0257000001C9000000D40190
2264	 236	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x215FFE00086000F019C000001B60000016AFFFF0257000001C9000000D40190
- stack 0: 0xE0
2265	 238	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x215FFE0
2266	 239	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x215FFE0
- stack 0: 0xFFFF
2267	 23C	AND		 	 
- stack 1: 0x5B8
- stack 0: 0xFFE0
2268	 23D	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0xFFE0
- stack 0: 0x1
2269	 23F	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
2270	 240	ADD		 	 
- stack 0: 0x598
2271	 241	PUSH4	FFFFFFFF	 	 
- stack 1: 0x598
- stack 0: 0xFFFFFFFF
2272	 246	AND		 	  ;; # mask to 32 bits
- stack 0: 0x598
2273	 247	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2274	 248	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1B60000016AFFFF01C90000025700000257000000D401B801DC000101FB0002
2275	 249	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x1B60000016AFFFF01C90000025700000257000000D401B801DC000101FB0002
- stack 0: 0xF0
2276	 24B	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1B6
2277	 24C	JUMP		 	 
- stack 0: 0x598
2278	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x598
2279	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x598
- stack 0: 0xF0000000
2280	 1BC	PUSH2	0020	 	 
- stack 2: 0x598
- stack 1: 0xF0000000
- stack 0: 0x20
2281	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x598
2282	 1C0	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2283	 1C2	ADD		 	 
- stack 0: 0x59C
2284	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2285	 1C4	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x16AFFFF01C90000025700000257000000D401B801DC000101FB00020215FFE0
2286	 1C5	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x16AFFFF01C90000025700000257000000D401B801DC000101FB00020215FFE0
- stack 0: 0xF0
2287	 1C7	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x16A
2288	 1C8	JUMP		 	 
- stack 0: 0x59C
2289	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x59C
2290	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2291	 16C	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x16AFFFF01C90000025700000257000000D401B801DC000101FB00020215FFE0
2292	 16D	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x16AFFFF01C90000025700000257000000D401B801DC000101FB00020215FFE0
- stack 0: 0xE0
2293	 16F	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x16AFFFF
2294	 170	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
2295	 173	AND		 	 
- stack 1: 0x59C
- stack 0: 0xFFFF
2296	 174	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0xFFFF
- stack 0: 0x1
2297	 176	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2298	 177	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2299	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x59C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
2300	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x59C
- stack 0: 0xEFFFFFFF
2301	 17C	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
2302	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x59C
2303	 180	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2304	 182	ADD		 	 
- stack 0: 0x5A0
2305	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2306	 184	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x1C90000025700000257000000D401B801DC000101FB00020215FFE00086000F
2307	 185	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x1C90000025700000257000000D401B801DC000101FB00020215FFE00086000F
- stack 0: 0xF0
2308	 187	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x1C9
2309	 188	JUMP		 	 
- stack 0: 0x5A0
2310	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x5A0
2311	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x5A0
- stack 0: 0xF0000000
2312	 1CF	PUSH2	0040	 	 
- stack 2: 0x5A0
- stack 1: 0xF0000000
- stack 0: 0x40
2313	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x5A0
2314	 1D3	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2315	 1D5	ADD		 	 
- stack 0: 0x5A4
2316	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2317	 1D7	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x25700000257000000D401B801DC000101FB00020215FFE00086000F019C0000
2318	 1D8	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x25700000257000000D401B801DC000101FB00020215FFE00086000F019C0000
- stack 0: 0xF0
2319	 1DA	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x257
2320	 1DB	JUMP		 	 
- stack 0: 0x5A4
2321	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A4
2322	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2323	 259	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x25700000257000000D401B801DC000101FB00020215FFE00086000F019C0000
2324	 25A	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x25700000257000000D401B801DC000101FB00020215FFE00086000F019C0000
- stack 0: 0xE0
2325	 25C	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x2570000
2326	 25D	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x2570000
- stack 0: 0xFFFF
2327	 260	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2328	 261	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2329	 263	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2330	 264	POP		 	 
- stack 0: 0x5A4
2331	 265	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2332	 267	ADD		 	 
- stack 0: 0x5A8
2333	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2334	 269	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x257000000D401B801DC000101FB00020215FFE00086000F019C000001B60000
2335	 26A	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x257000000D401B801DC000101FB00020215FFE00086000F019C000001B60000
- stack 0: 0xF0
2336	 26C	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x257
2337	 26D	JUMP		 	 
- stack 0: 0x5A8
2338	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A8
2339	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2340	 259	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x257000000D401B801DC000101FB00020215FFE00086000F019C000001B60000
2341	 25A	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x257000000D401B801DC000101FB00020215FFE00086000F019C000001B60000
- stack 0: 0xE0
2342	 25C	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2570000
2343	 25D	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x2570000
- stack 0: 0xFFFF
2344	 260	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2345	 261	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2346	 263	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2347	 264	POP		 	 
- stack 0: 0x5A8
2348	 265	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2349	 267	ADD		 	 
- stack 0: 0x5AC
2350	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2351	 269	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xD401B801DC000101FB00020215FFE00086000F019C000001B60000016AFFFF
2352	 26A	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0xD401B801DC000101FB00020215FFE00086000F019C000001B60000016AFFFF
- stack 0: 0xF0
2353	 26C	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xD4
2354	 26D	JUMP		 	 
- stack 0: 0x5AC
2355	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x5AC
2356	 D5	PUSH2	0040	 	 
- stack 1: 0x5AC
- stack 0: 0x40
2357	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5AC
- stack 0: 0xF0000000
2358	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5AC
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
2359	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5AC
- stack 0: 0xF0000000
2360	 DF	PUSH2	0020	 	 
- stack 2: 0x5AC
- stack 1: 0xF0000000
- stack 0: 0x20
2361	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5AC
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
2362	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5AC
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
2363	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5AC
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
2364	 E9	LT		 	  ;; # bgeu
- stack 1: 0x5AC
- stack 0: 0x1
2365	 EA	ISZERO		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2366	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0xF3
2367	 EE	JUMPI		 	 
- stack 0: 0x5AC
2368	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x5AC
- stack 0: 0x10D
2369	 F2	JUMP		 	 
- stack 0: 0x5AC
2370	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x5AC
2371	 10E	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2372	 110	ADD		 	 
- stack 0: 0x5B0
2373	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2374	 112	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1DC000101FB00020215FFE00086000F019C000001B60000016AFFFF02570000
2375	 113	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x1DC000101FB00020215FFE00086000F019C000001B60000016AFFFF02570000
- stack 0: 0xF0
2376	 115	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1DC
2377	 116	JUMP		 	 
- stack 0: 0x5B0
2378	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B0
2379	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2380	 1DE	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1DC000101FB00020215FFE00086000F019C000001B60000016AFFFF02570000
2381	 1DF	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x1DC000101FB00020215FFE00086000F019C000001B60000016AFFFF02570000
- stack 0: 0xE0
2382	 1E1	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1DC0001
2383	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
2384	 1E5	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x1
2385	 1E6	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x1
- stack 0: 0x1
2386	 1E8	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x1
2387	 1E9	PUSH2	0080	 	 
- stack 2: 0x5B0
- stack 1: 0x1
- stack 0: 0x80
2388	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B0
- stack 1: 0x1
- stack 0: 0x1
2389	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B0
- stack 0: 0x2
2390	 1EE	PUSH2	0080	 	 
- stack 2: 0x5B0
- stack 1: 0x2
- stack 0: 0x80
2391	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B0
2392	 1F2	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2393	 1F4	ADD		 	 
- stack 0: 0x5B4
2394	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2395	 1F6	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1FB00020215FFE00086000F019C000001B60000016AFFFF0257000001C90000
2396	 1F7	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x1FB00020215FFE00086000F019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xF0
2397	 1F9	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1FB
2398	 1FA	JUMP		 	 
- stack 0: 0x5B4
2399	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B4
2400	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2401	 1FD	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1FB00020215FFE00086000F019C000001B60000016AFFFF0257000001C90000
2402	 1FE	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x1FB00020215FFE00086000F019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xE0
2403	 200	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1FB0002
2404	 201	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
2405	 204	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x2
2406	 205	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0x1
2407	 207	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x2
2408	 208	PUSH2	00A0	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0xA0
2409	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B4
2410	 20C	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2411	 20E	ADD		 	 
- stack 0: 0x5B8
2412	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2413	 210	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x215FFE00086000F019C000001B60000016AFFFF0257000001C9000000D40190
2414	 211	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x215FFE00086000F019C000001B60000016AFFFF0257000001C9000000D40190
- stack 0: 0xF0
2415	 213	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x215
2416	 214	JUMP		 	 
- stack 0: 0x5B8
2417	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5B8
2418	 216	PUSH2	0080	 	 
- stack 1: 0x5B8
- stack 0: 0x80
2419	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x5B8
- stack 0: 0x2
2420	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2421	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B8
- stack 0: 0x2
2422	 220	PUSH2	00A0	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0xA0
2423	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0x2
2424	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2425	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0x2
2426	 22A	SUB		 	 
- stack 1: 0x5B8
- stack 0: 0x0
2427	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x5B8
- stack 1: 0x0
- stack 0: 0x233
2428	 22E	JUMPI		 	 
- stack 0: 0x5B8
2429	 22F	PUSH2	024D	 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 1: 0x5B8
- stack 0: 0x24D
2430	 232	JUMP		 	 
- stack 0: 0x5B8
2431	 24D	JUMPDEST		 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x5B8
2432	 24E	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2433	 250	ADD		 	 
- stack 0: 0x5BC
2434	 251	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2435	 252	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x86000F019C000001B60000016AFFFF0257000001C9000000D4019001DC0001
2436	 253	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x86000F019C000001B60000016AFFFF0257000001C9000000D4019001DC0001
- stack 0: 0xF0
2437	 255	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x86
2438	 256	JUMP		 	 
- stack 0: 0x5BC
2439	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5BC
2440	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2441	 88	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x86000F019C000001B60000016AFFFF0257000001C9000000D4019001DC0001
2442	 89	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x86000F019C000001B60000016AFFFF0257000001C9000000D4019001DC0001
- stack 0: 0xE0
2443	 8B	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x86000F
2444	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x86000F
- stack 0: 0xFFFF
2445	 8F	AND		 	 
- stack 1: 0x5BC
- stack 0: 0xF
2446	 90	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0xF
- stack 0: 0x1
2447	 92	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xF
2448	 93	PUSH2	0380	 	 
- stack 2: 0x5BC
- stack 1: 0xF
- stack 0: 0x380
2449	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x5BC
2450	 97	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2451	 99	ADD		 	 
- stack 0: 0x5C0
2452	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2453	 9B	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x19C000001B60000016AFFFF0257000001C9000000D4019001DC000101FB0002
2454	 9C	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x19C000001B60000016AFFFF0257000001C9000000D4019001DC000101FB0002
- stack 0: 0xF0
2455	 9E	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x19C
2456	 9F	JUMP		 	 
- stack 0: 0x5C0
2457	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5C0
2458	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2459	 19E	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x19C000001B60000016AFFFF0257000001C9000000D4019001DC000101FB0002
2460	 19F	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x19C000001B60000016AFFFF0257000001C9000000D4019001DC000101FB0002
- stack 0: 0xE0
2461	 1A1	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x19C0000
2462	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x19C0000
- stack 0: 0xFFFF
2463	 1A5	AND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2464	 1A6	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x1
2465	 1A8	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2466	 1A9	PUSH2	0080	 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x80
2467	 1AC	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C0
2468	 1AD	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2469	 1AF	ADD		 	 
- stack 0: 0x5C4
2470	 1B0	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2471	 1B1	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x1B60000016AFFFF0257000001C9000000D4019001DC000101FB00020215FFE4
2472	 1B2	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x1B60000016AFFFF0257000001C9000000D4019001DC000101FB00020215FFE4
- stack 0: 0xF0
2473	 1B4	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x1B6
2474	 1B5	JUMP		 	 
- stack 0: 0x5C4
2475	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x5C4
2476	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x5C4
- stack 0: 0xF0000000
2477	 1BC	PUSH2	0020	 	 
- stack 2: 0x5C4
- stack 1: 0xF0000000
- stack 0: 0x20
2478	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C4
2479	 1C0	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2480	 1C2	ADD		 	 
- stack 0: 0x5C8
2481	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2482	 1C4	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x16AFFFF0257000001C9000000D4019001DC000101FB00020215FFE400860010
2483	 1C5	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x16AFFFF0257000001C9000000D4019001DC000101FB00020215FFE400860010
- stack 0: 0xF0
2484	 1C7	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x16A
2485	 1C8	JUMP		 	 
- stack 0: 0x5C8
2486	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x5C8
2487	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2488	 16C	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x16AFFFF0257000001C9000000D4019001DC000101FB00020215FFE400860010
2489	 16D	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x16AFFFF0257000001C9000000D4019001DC000101FB00020215FFE400860010
- stack 0: 0xE0
2490	 16F	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x16AFFFF
2491	 170	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
2492	 173	AND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFFF
2493	 174	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFF
- stack 0: 0x1
2494	 176	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2495	 177	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2496	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
2497	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x5C8
- stack 0: 0xEFFFFFFF
2498	 17C	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
2499	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
2500	 180	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2501	 182	ADD		 	 
- stack 0: 0x5CC
2502	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2503	 184	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x257000001C9000000D4019001DC000101FB00020215FFE400860010019C0000
2504	 185	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x257000001C9000000D4019001DC000101FB00020215FFE400860010019C0000
- stack 0: 0xF0
2505	 187	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x257
2506	 188	JUMP		 	 
- stack 0: 0x5CC
2507	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5CC
2508	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2509	 259	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x257000001C9000000D4019001DC000101FB00020215FFE400860010019C0000
2510	 25A	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x257000001C9000000D4019001DC000101FB00020215FFE400860010019C0000
- stack 0: 0xE0
2511	 25C	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x2570000
2512	 25D	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x2570000
- stack 0: 0xFFFF
2513	 260	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x0
2514	 261	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0x1
2515	 263	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x0
2516	 264	POP		 	 
- stack 0: 0x5CC
2517	 265	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2518	 267	ADD		 	 
- stack 0: 0x5D0
2519	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2520	 269	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x1C9000000D4019001DC000101FB00020215FFE400860010019C000001B60000
2521	 26A	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x1C9000000D4019001DC000101FB00020215FFE400860010019C000001B60000
- stack 0: 0xF0
2522	 26C	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x1C9
2523	 26D	JUMP		 	 
- stack 0: 0x5D0
2524	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x5D0
2525	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x5D0
- stack 0: 0xF0000000
2526	 1CF	PUSH2	0040	 	 
- stack 2: 0x5D0
- stack 1: 0xF0000000
- stack 0: 0x40
2527	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x5D0
2528	 1D3	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2529	 1D5	ADD		 	 
- stack 0: 0x5D4
2530	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2531	 1D7	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xD4019001DC000101FB00020215FFE400860010019C000001B60000016AFFFF
2532	 1D8	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0xD4019001DC000101FB00020215FFE400860010019C000001B60000016AFFFF
- stack 0: 0xF0
2533	 1DA	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xD4
2534	 1DB	JUMP		 	 
- stack 0: 0x5D4
2535	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x5D4
2536	 D5	PUSH2	0040	 	 
- stack 1: 0x5D4
- stack 0: 0x40
2537	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5D4
- stack 0: 0xF0000000
2538	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
2539	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0xF0000000
2540	 DF	PUSH2	0020	 	 
- stack 2: 0x5D4
- stack 1: 0xF0000000
- stack 0: 0x20
2541	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5D4
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
2542	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
2543	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
2544	 E9	LT		 	  ;; # bgeu
- stack 1: 0x5D4
- stack 0: 0x1
2545	 EA	ISZERO		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2546	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0xF3
2547	 EE	JUMPI		 	 
- stack 0: 0x5D4
2548	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x5D4
- stack 0: 0x10D
2549	 F2	JUMP		 	 
- stack 0: 0x5D4
2550	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x5D4
2551	 10E	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2552	 110	ADD		 	 
- stack 0: 0x5D8
2553	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2554	 112	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x1DC000101FB00020215FFE400860010019C000001B60000016AFFFF02570000
2555	 113	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x1DC000101FB00020215FFE400860010019C000001B60000016AFFFF02570000
- stack 0: 0xF0
2556	 115	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x1DC
2557	 116	JUMP		 	 
- stack 0: 0x5D8
2558	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D8
2559	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2560	 1DE	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x1DC000101FB00020215FFE400860010019C000001B60000016AFFFF02570000
2561	 1DF	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x1DC000101FB00020215FFE400860010019C000001B60000016AFFFF02570000
- stack 0: 0xE0
2562	 1E1	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x1DC0001
2563	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
2564	 1E5	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x1
2565	 1E6	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x1
2566	 1E8	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x1
2567	 1E9	PUSH2	0080	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x80
2568	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x0
2569	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D8
- stack 0: 0x1
2570	 1EE	PUSH2	0080	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x80
2571	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D8
2572	 1F2	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2573	 1F4	ADD		 	 
- stack 0: 0x5DC
2574	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2575	 1F6	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x1FB00020215FFE400860010019C000001B60000016AFFFF0257000001C90000
2576	 1F7	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x1FB00020215FFE400860010019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xF0
2577	 1F9	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x1FB
2578	 1FA	JUMP		 	 
- stack 0: 0x5DC
2579	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5DC
2580	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2581	 1FD	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x1FB00020215FFE400860010019C000001B60000016AFFFF0257000001C90000
2582	 1FE	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x1FB00020215FFE400860010019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xE0
2583	 200	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x1FB0002
2584	 201	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
2585	 204	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x2
2586	 205	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0x1
2587	 207	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x2
2588	 208	PUSH2	00A0	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0xA0
2589	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x5DC
2590	 20C	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2591	 20E	ADD		 	 
- stack 0: 0x5E0
2592	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2593	 210	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x215FFE400860010019C000001B60000016AFFFF0257000001C9000002570000
2594	 211	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x215FFE400860010019C000001B60000016AFFFF0257000001C9000002570000
- stack 0: 0xF0
2595	 213	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x215
2596	 214	JUMP		 	 
- stack 0: 0x5E0
2597	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5E0
2598	 216	PUSH2	0080	 	 
- stack 1: 0x5E0
- stack 0: 0x80
2599	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E0
- stack 0: 0x1
2600	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2601	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E0
- stack 0: 0x1
2602	 220	PUSH2	00A0	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0xA0
2603	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x2
2604	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2605	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x2
2606	 22A	SUB		 	 
- stack 1: 0x5E0
- stack 0: 0x1
2607	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x233
2608	 22E	JUMPI		 	 
- stack 0: 0x5E0
2609	 233	JUMPDEST		 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x5E0
2610	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2611	 235	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x215FFE400860010019C000001B60000016AFFFF0257000001C9000002570000
2612	 236	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x215FFE400860010019C000001B60000016AFFFF0257000001C9000002570000
- stack 0: 0xE0
2613	 238	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x215FFE4
2614	 239	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x215FFE4
- stack 0: 0xFFFF
2615	 23C	AND		 	 
- stack 1: 0x5E0
- stack 0: 0xFFE4
2616	 23D	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0xFFE4
- stack 0: 0x1
2617	 23F	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2618	 240	ADD		 	 
- stack 0: 0x5C4
2619	 241	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5C4
- stack 0: 0xFFFFFFFF
2620	 246	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5C4
2621	 247	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2622	 248	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x1B60000016AFFFF0257000001C9000000D4019001DC000101FB00020215FFE4
2623	 249	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x1B60000016AFFFF0257000001C9000000D4019001DC000101FB00020215FFE4
- stack 0: 0xF0
2624	 24B	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x1B6
2625	 24C	JUMP		 	 
- stack 0: 0x5C4
2626	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x5C4
2627	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x5C4
- stack 0: 0xF0000000
2628	 1BC	PUSH2	0020	 	 
- stack 2: 0x5C4
- stack 1: 0xF0000000
- stack 0: 0x20
2629	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C4
2630	 1C0	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2631	 1C2	ADD		 	 
- stack 0: 0x5C8
2632	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2633	 1C4	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x16AFFFF0257000001C9000000D4019001DC000101FB00020215FFE400860010
2634	 1C5	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x16AFFFF0257000001C9000000D4019001DC000101FB00020215FFE400860010
- stack 0: 0xF0
2635	 1C7	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x16A
2636	 1C8	JUMP		 	 
- stack 0: 0x5C8
2637	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x5C8
2638	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2639	 16C	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x16AFFFF0257000001C9000000D4019001DC000101FB00020215FFE400860010
2640	 16D	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x16AFFFF0257000001C9000000D4019001DC000101FB00020215FFE400860010
- stack 0: 0xE0
2641	 16F	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x16AFFFF
2642	 170	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
2643	 173	AND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFFF
2644	 174	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFF
- stack 0: 0x1
2645	 176	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2646	 177	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2647	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
2648	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x5C8
- stack 0: 0xEFFFFFFF
2649	 17C	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
2650	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
2651	 180	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2652	 182	ADD		 	 
- stack 0: 0x5CC
2653	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2654	 184	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x257000001C9000000D4019001DC000101FB00020215FFE400860010019C0000
2655	 185	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x257000001C9000000D4019001DC000101FB00020215FFE400860010019C0000
- stack 0: 0xF0
2656	 187	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x257
2657	 188	JUMP		 	 
- stack 0: 0x5CC
2658	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5CC
2659	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2660	 259	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x257000001C9000000D4019001DC000101FB00020215FFE400860010019C0000
2661	 25A	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x257000001C9000000D4019001DC000101FB00020215FFE400860010019C0000
- stack 0: 0xE0
2662	 25C	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x2570000
2663	 25D	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x2570000
- stack 0: 0xFFFF
2664	 260	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x0
2665	 261	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0x1
2666	 263	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x0
2667	 264	POP		 	 
- stack 0: 0x5CC
2668	 265	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2669	 267	ADD		 	 
- stack 0: 0x5D0
2670	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2671	 269	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x1C9000000D4019001DC000101FB00020215FFE400860010019C000001B60000
2672	 26A	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x1C9000000D4019001DC000101FB00020215FFE400860010019C000001B60000
- stack 0: 0xF0
2673	 26C	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x1C9
2674	 26D	JUMP		 	 
- stack 0: 0x5D0
2675	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x5D0
2676	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x5D0
- stack 0: 0xF0000000
2677	 1CF	PUSH2	0040	 	 
- stack 2: 0x5D0
- stack 1: 0xF0000000
- stack 0: 0x40
2678	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x5D0
2679	 1D3	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2680	 1D5	ADD		 	 
- stack 0: 0x5D4
2681	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2682	 1D7	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xD4019001DC000101FB00020215FFE400860010019C000001B60000016AFFFF
2683	 1D8	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0xD4019001DC000101FB00020215FFE400860010019C000001B60000016AFFFF
- stack 0: 0xF0
2684	 1DA	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xD4
2685	 1DB	JUMP		 	 
- stack 0: 0x5D4
2686	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x5D4
2687	 D5	PUSH2	0040	 	 
- stack 1: 0x5D4
- stack 0: 0x40
2688	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5D4
- stack 0: 0xF0000000
2689	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
2690	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0xF0000000
2691	 DF	PUSH2	0020	 	 
- stack 2: 0x5D4
- stack 1: 0xF0000000
- stack 0: 0x20
2692	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5D4
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
2693	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
2694	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
2695	 E9	LT		 	  ;; # bgeu
- stack 1: 0x5D4
- stack 0: 0x1
2696	 EA	ISZERO		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2697	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0xF3
2698	 EE	JUMPI		 	 
- stack 0: 0x5D4
2699	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x5D4
- stack 0: 0x10D
2700	 F2	JUMP		 	 
- stack 0: 0x5D4
2701	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x5D4
2702	 10E	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2703	 110	ADD		 	 
- stack 0: 0x5D8
2704	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2705	 112	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x1DC000101FB00020215FFE400860010019C000001B60000016AFFFF02570000
2706	 113	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x1DC000101FB00020215FFE400860010019C000001B60000016AFFFF02570000
- stack 0: 0xF0
2707	 115	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x1DC
2708	 116	JUMP		 	 
- stack 0: 0x5D8
2709	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D8
2710	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2711	 1DE	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x1DC000101FB00020215FFE400860010019C000001B60000016AFFFF02570000
2712	 1DF	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x1DC000101FB00020215FFE400860010019C000001B60000016AFFFF02570000
- stack 0: 0xE0
2713	 1E1	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x1DC0001
2714	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
2715	 1E5	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x1
2716	 1E6	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x1
2717	 1E8	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x1
2718	 1E9	PUSH2	0080	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x80
2719	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x1
2720	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D8
- stack 0: 0x2
2721	 1EE	PUSH2	0080	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0x80
2722	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D8
2723	 1F2	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2724	 1F4	ADD		 	 
- stack 0: 0x5DC
2725	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2726	 1F6	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x1FB00020215FFE400860010019C000001B60000016AFFFF0257000001C90000
2727	 1F7	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x1FB00020215FFE400860010019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xF0
2728	 1F9	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x1FB
2729	 1FA	JUMP		 	 
- stack 0: 0x5DC
2730	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5DC
2731	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2732	 1FD	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x1FB00020215FFE400860010019C000001B60000016AFFFF0257000001C90000
2733	 1FE	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x1FB00020215FFE400860010019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xE0
2734	 200	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x1FB0002
2735	 201	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
2736	 204	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x2
2737	 205	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0x1
2738	 207	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x2
2739	 208	PUSH2	00A0	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0xA0
2740	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x5DC
2741	 20C	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2742	 20E	ADD		 	 
- stack 0: 0x5E0
2743	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2744	 210	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x215FFE400860010019C000001B60000016AFFFF0257000001C9000002570000
2745	 211	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x215FFE400860010019C000001B60000016AFFFF0257000001C9000002570000
- stack 0: 0xF0
2746	 213	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x215
2747	 214	JUMP		 	 
- stack 0: 0x5E0
2748	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5E0
2749	 216	PUSH2	0080	 	 
- stack 1: 0x5E0
- stack 0: 0x80
2750	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E0
- stack 0: 0x2
2751	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2752	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E0
- stack 0: 0x2
2753	 220	PUSH2	00A0	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0xA0
2754	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0x2
2755	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2756	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0x2
2757	 22A	SUB		 	 
- stack 1: 0x5E0
- stack 0: 0x0
2758	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x5E0
- stack 1: 0x0
- stack 0: 0x233
2759	 22E	JUMPI		 	 
- stack 0: 0x5E0
2760	 22F	PUSH2	024D	 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 1: 0x5E0
- stack 0: 0x24D
2761	 232	JUMP		 	 
- stack 0: 0x5E0
2762	 24D	JUMPDEST		 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x5E0
2763	 24E	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2764	 250	ADD		 	 
- stack 0: 0x5E4
2765	 251	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2766	 252	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x860010019C000001B60000016AFFFF0257000001C900000257000000D40164
2767	 253	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x860010019C000001B60000016AFFFF0257000001C900000257000000D40164
- stack 0: 0xF0
2768	 255	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x86
2769	 256	JUMP		 	 
- stack 0: 0x5E4
2770	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5E4
2771	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2772	 88	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x860010019C000001B60000016AFFFF0257000001C900000257000000D40164
2773	 89	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x860010019C000001B60000016AFFFF0257000001C900000257000000D40164
- stack 0: 0xE0
2774	 8B	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x860010
2775	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x860010
- stack 0: 0xFFFF
2776	 8F	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x10
2777	 90	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x10
- stack 0: 0x1
2778	 92	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x10
2779	 93	PUSH2	0380	 	 
- stack 2: 0x5E4
- stack 1: 0x10
- stack 0: 0x380
2780	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x5E4
2781	 97	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2782	 99	ADD		 	 
- stack 0: 0x5E8
2783	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2784	 9B	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x19C000001B60000016AFFFF0257000001C900000257000000D4016401DC0001
2785	 9C	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x19C000001B60000016AFFFF0257000001C900000257000000D4016401DC0001
- stack 0: 0xF0
2786	 9E	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x19C
2787	 9F	JUMP		 	 
- stack 0: 0x5E8
2788	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5E8
2789	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
2790	 19E	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x19C000001B60000016AFFFF0257000001C900000257000000D4016401DC0001
2791	 19F	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x19C000001B60000016AFFFF0257000001C900000257000000D4016401DC0001
- stack 0: 0xE0
2792	 1A1	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x19C0000
2793	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x19C0000
- stack 0: 0xFFFF
2794	 1A5	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2795	 1A6	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x1
2796	 1A8	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2797	 1A9	PUSH2	0080	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x80
2798	 1AC	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E8
2799	 1AD	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2800	 1AF	ADD		 	 
- stack 0: 0x5EC
2801	 1B0	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2802	 1B1	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x1B60000016AFFFF0257000001C900000257000000D4016401DC000101FB0002
2803	 1B2	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x1B60000016AFFFF0257000001C900000257000000D4016401DC000101FB0002
- stack 0: 0xF0
2804	 1B4	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x1B6
2805	 1B5	JUMP		 	 
- stack 0: 0x5EC
2806	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x5EC
2807	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x5EC
- stack 0: 0xF0000000
2808	 1BC	PUSH2	0020	 	 
- stack 2: 0x5EC
- stack 1: 0xF0000000
- stack 0: 0x20
2809	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x5EC
2810	 1C0	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2811	 1C2	ADD		 	 
- stack 0: 0x5F0
2812	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2813	 1C4	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x16AFFFF0257000001C900000257000000D4016401DC000101FB00020215FFE0
2814	 1C5	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x16AFFFF0257000001C900000257000000D4016401DC000101FB00020215FFE0
- stack 0: 0xF0
2815	 1C7	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x16A
2816	 1C8	JUMP		 	 
- stack 0: 0x5F0
2817	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x5F0
2818	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2819	 16C	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x16AFFFF0257000001C900000257000000D4016401DC000101FB00020215FFE0
2820	 16D	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x16AFFFF0257000001C900000257000000D4016401DC000101FB00020215FFE0
- stack 0: 0xE0
2821	 16F	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x16AFFFF
2822	 170	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
2823	 173	AND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFFF
2824	 174	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFF
- stack 0: 0x1
2825	 176	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2826	 177	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2827	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
2828	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F0
- stack 0: 0xEFFFFFFF
2829	 17C	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
2830	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F0
2831	 180	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2832	 182	ADD		 	 
- stack 0: 0x5F4
2833	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2834	 184	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x257000001C900000257000000D4016401DC000101FB00020215FFE000860011
2835	 185	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x257000001C900000257000000D4016401DC000101FB00020215FFE000860011
- stack 0: 0xF0
2836	 187	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x257
2837	 188	JUMP		 	 
- stack 0: 0x5F4
2838	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5F4
2839	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
2840	 259	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x257000001C900000257000000D4016401DC000101FB00020215FFE000860011
2841	 25A	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x257000001C900000257000000D4016401DC000101FB00020215FFE000860011
- stack 0: 0xE0
2842	 25C	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x2570000
2843	 25D	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x2570000
- stack 0: 0xFFFF
2844	 260	AND		 	 
- stack 1: 0x5F4
- stack 0: 0x0
2845	 261	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x1
2846	 263	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0x0
2847	 264	POP		 	 
- stack 0: 0x5F4
2848	 265	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2849	 267	ADD		 	 
- stack 0: 0x5F8
2850	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2851	 269	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1C900000257000000D4016401DC000101FB00020215FFE000860011019C0000
2852	 26A	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x1C900000257000000D4016401DC000101FB00020215FFE000860011019C0000
- stack 0: 0xF0
2853	 26C	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1C9
2854	 26D	JUMP		 	 
- stack 0: 0x5F8
2855	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x5F8
2856	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x5F8
- stack 0: 0xF0000000
2857	 1CF	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0xF0000000
- stack 0: 0x40
2858	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F8
2859	 1D3	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2860	 1D5	ADD		 	 
- stack 0: 0x5FC
2861	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2862	 1D7	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x257000000D4016401DC000101FB00020215FFE000860011019C000001B60000
2863	 1D8	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x257000000D4016401DC000101FB00020215FFE000860011019C000001B60000
- stack 0: 0xF0
2864	 1DA	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x257
2865	 1DB	JUMP		 	 
- stack 0: 0x5FC
2866	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5FC
2867	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2868	 259	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x257000000D4016401DC000101FB00020215FFE000860011019C000001B60000
2869	 25A	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x257000000D4016401DC000101FB00020215FFE000860011019C000001B60000
- stack 0: 0xE0
2870	 25C	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x2570000
2871	 25D	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x2570000
- stack 0: 0xFFFF
2872	 260	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
2873	 261	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
2874	 263	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
2875	 264	POP		 	 
- stack 0: 0x5FC
2876	 265	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2877	 267	ADD		 	 
- stack 0: 0x600
2878	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2879	 269	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xD4016401DC000101FB00020215FFE000860011019C000001B60000016AFFFF
2880	 26A	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xD4016401DC000101FB00020215FFE000860011019C000001B60000016AFFFF
- stack 0: 0xF0
2881	 26C	SHR		 	 
- stack 1: 0x600
- stack 0: 0xD4
2882	 26D	JUMP		 	 
- stack 0: 0x600
2883	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x600
2884	 D5	PUSH2	0040	 	 
- stack 1: 0x600
- stack 0: 0x40
2885	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x600
- stack 0: 0xF0000000
2886	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x600
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
2887	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x600
- stack 0: 0xF0000000
2888	 DF	PUSH2	0020	 	 
- stack 2: 0x600
- stack 1: 0xF0000000
- stack 0: 0x20
2889	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x600
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
2890	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x600
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
2891	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x600
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
2892	 E9	LT		 	  ;; # bgeu
- stack 1: 0x600
- stack 0: 0x1
2893	 EA	ISZERO		 	 
- stack 1: 0x600
- stack 0: 0x0
2894	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0xF3
2895	 EE	JUMPI		 	 
- stack 0: 0x600
2896	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x600
- stack 0: 0x10D
2897	 F2	JUMP		 	 
- stack 0: 0x600
2898	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x600
2899	 10E	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2900	 110	ADD		 	 
- stack 0: 0x604
2901	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2902	 112	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x1DC000101FB00020215FFE000860011019C000001B60000016AFFFF02570000
2903	 113	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x1DC000101FB00020215FFE000860011019C000001B60000016AFFFF02570000
- stack 0: 0xF0
2904	 115	SHR		 	 
- stack 1: 0x604
- stack 0: 0x1DC
2905	 116	JUMP		 	 
- stack 0: 0x604
2906	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x604
2907	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
2908	 1DE	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x1DC000101FB00020215FFE000860011019C000001B60000016AFFFF02570000
2909	 1DF	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x1DC000101FB00020215FFE000860011019C000001B60000016AFFFF02570000
- stack 0: 0xE0
2910	 1E1	SHR		 	 
- stack 1: 0x604
- stack 0: 0x1DC0001
2911	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
2912	 1E5	AND		 	 
- stack 1: 0x604
- stack 0: 0x1
2913	 1E6	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x1
2914	 1E8	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x1
2915	 1E9	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x80
2916	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x0
2917	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x604
- stack 0: 0x1
2918	 1EE	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x80
2919	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x604
2920	 1F2	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2921	 1F4	ADD		 	 
- stack 0: 0x608
2922	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2923	 1F6	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x1FB00020215FFE000860011019C000001B60000016AFFFF0257000002570000
2924	 1F7	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x1FB00020215FFE000860011019C000001B60000016AFFFF0257000002570000
- stack 0: 0xF0
2925	 1F9	SHR		 	 
- stack 1: 0x608
- stack 0: 0x1FB
2926	 1FA	JUMP		 	 
- stack 0: 0x608
2927	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x608
2928	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2929	 1FD	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x1FB00020215FFE000860011019C000001B60000016AFFFF0257000002570000
2930	 1FE	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x1FB00020215FFE000860011019C000001B60000016AFFFF0257000002570000
- stack 0: 0xE0
2931	 200	SHR		 	 
- stack 1: 0x608
- stack 0: 0x1FB0002
2932	 201	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
2933	 204	AND		 	 
- stack 1: 0x608
- stack 0: 0x2
2934	 205	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x1
2935	 207	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x2
2936	 208	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xA0
2937	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x608
2938	 20C	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2939	 20E	ADD		 	 
- stack 0: 0x60C
2940	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2941	 210	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x215FFE000860011019C000001B60000016AFFFF025700000257000001C90000
2942	 211	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x215FFE000860011019C000001B60000016AFFFF025700000257000001C90000
- stack 0: 0xF0
2943	 213	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x215
2944	 214	JUMP		 	 
- stack 0: 0x60C
2945	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x60C
2946	 216	PUSH2	0080	 	 
- stack 1: 0x60C
- stack 0: 0x80
2947	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x60C
- stack 0: 0x1
2948	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2949	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x1
2950	 220	PUSH2	00A0	 	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0xA0
2951	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x2
2952	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x60C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2953	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x2
2954	 22A	SUB		 	 
- stack 1: 0x60C
- stack 0: 0x1
2955	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x233
2956	 22E	JUMPI		 	 
- stack 0: 0x60C
2957	 233	JUMPDEST		 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x60C
2958	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
2959	 235	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x215FFE000860011019C000001B60000016AFFFF025700000257000001C90000
2960	 236	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x215FFE000860011019C000001B60000016AFFFF025700000257000001C90000
- stack 0: 0xE0
2961	 238	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x215FFE0
2962	 239	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x215FFE0
- stack 0: 0xFFFF
2963	 23C	AND		 	 
- stack 1: 0x60C
- stack 0: 0xFFE0
2964	 23D	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0xFFE0
- stack 0: 0x1
2965	 23F	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
2966	 240	ADD		 	 
- stack 0: 0x5EC
2967	 241	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5EC
- stack 0: 0xFFFFFFFF
2968	 246	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5EC
2969	 247	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2970	 248	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x1B60000016AFFFF0257000001C900000257000000D4016401DC000101FB0002
2971	 249	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x1B60000016AFFFF0257000001C900000257000000D4016401DC000101FB0002
- stack 0: 0xF0
2972	 24B	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x1B6
2973	 24C	JUMP		 	 
- stack 0: 0x5EC
2974	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x5EC
2975	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x5EC
- stack 0: 0xF0000000
2976	 1BC	PUSH2	0020	 	 
- stack 2: 0x5EC
- stack 1: 0xF0000000
- stack 0: 0x20
2977	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x5EC
2978	 1C0	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2979	 1C2	ADD		 	 
- stack 0: 0x5F0
2980	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2981	 1C4	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x16AFFFF0257000001C900000257000000D4016401DC000101FB00020215FFE0
2982	 1C5	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x16AFFFF0257000001C900000257000000D4016401DC000101FB00020215FFE0
- stack 0: 0xF0
2983	 1C7	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x16A
2984	 1C8	JUMP		 	 
- stack 0: 0x5F0
2985	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x5F0
2986	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2987	 16C	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x16AFFFF0257000001C900000257000000D4016401DC000101FB00020215FFE0
2988	 16D	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x16AFFFF0257000001C900000257000000D4016401DC000101FB00020215FFE0
- stack 0: 0xE0
2989	 16F	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x16AFFFF
2990	 170	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
2991	 173	AND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFFF
2992	 174	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFF
- stack 0: 0x1
2993	 176	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2994	 177	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2995	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
2996	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F0
- stack 0: 0xEFFFFFFF
2997	 17C	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
2998	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F0
2999	 180	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3000	 182	ADD		 	 
- stack 0: 0x5F4
3001	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3002	 184	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x257000001C900000257000000D4016401DC000101FB00020215FFE000860011
3003	 185	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x257000001C900000257000000D4016401DC000101FB00020215FFE000860011
- stack 0: 0xF0
3004	 187	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x257
3005	 188	JUMP		 	 
- stack 0: 0x5F4
3006	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5F4
3007	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
3008	 259	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x257000001C900000257000000D4016401DC000101FB00020215FFE000860011
3009	 25A	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x257000001C900000257000000D4016401DC000101FB00020215FFE000860011
- stack 0: 0xE0
3010	 25C	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x2570000
3011	 25D	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x2570000
- stack 0: 0xFFFF
3012	 260	AND		 	 
- stack 1: 0x5F4
- stack 0: 0x0
3013	 261	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x1
3014	 263	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0x0
3015	 264	POP		 	 
- stack 0: 0x5F4
3016	 265	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3017	 267	ADD		 	 
- stack 0: 0x5F8
3018	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3019	 269	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1C900000257000000D4016401DC000101FB00020215FFE000860011019C0000
3020	 26A	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x1C900000257000000D4016401DC000101FB00020215FFE000860011019C0000
- stack 0: 0xF0
3021	 26C	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1C9
3022	 26D	JUMP		 	 
- stack 0: 0x5F8
3023	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x5F8
3024	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x5F8
- stack 0: 0xF0000000
3025	 1CF	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0xF0000000
- stack 0: 0x40
3026	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F8
3027	 1D3	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3028	 1D5	ADD		 	 
- stack 0: 0x5FC
3029	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3030	 1D7	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x257000000D4016401DC000101FB00020215FFE000860011019C000001B60000
3031	 1D8	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x257000000D4016401DC000101FB00020215FFE000860011019C000001B60000
- stack 0: 0xF0
3032	 1DA	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x257
3033	 1DB	JUMP		 	 
- stack 0: 0x5FC
3034	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5FC
3035	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3036	 259	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x257000000D4016401DC000101FB00020215FFE000860011019C000001B60000
3037	 25A	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x257000000D4016401DC000101FB00020215FFE000860011019C000001B60000
- stack 0: 0xE0
3038	 25C	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x2570000
3039	 25D	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x2570000
- stack 0: 0xFFFF
3040	 260	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3041	 261	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
3042	 263	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3043	 264	POP		 	 
- stack 0: 0x5FC
3044	 265	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3045	 267	ADD		 	 
- stack 0: 0x600
3046	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3047	 269	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xD4016401DC000101FB00020215FFE000860011019C000001B60000016AFFFF
3048	 26A	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xD4016401DC000101FB00020215FFE000860011019C000001B60000016AFFFF
- stack 0: 0xF0
3049	 26C	SHR		 	 
- stack 1: 0x600
- stack 0: 0xD4
3050	 26D	JUMP		 	 
- stack 0: 0x600
3051	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x600
3052	 D5	PUSH2	0040	 	 
- stack 1: 0x600
- stack 0: 0x40
3053	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x600
- stack 0: 0xF0000000
3054	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x600
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
3055	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x600
- stack 0: 0xF0000000
3056	 DF	PUSH2	0020	 	 
- stack 2: 0x600
- stack 1: 0xF0000000
- stack 0: 0x20
3057	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x600
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
3058	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x600
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
3059	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x600
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
3060	 E9	LT		 	  ;; # bgeu
- stack 1: 0x600
- stack 0: 0x1
3061	 EA	ISZERO		 	 
- stack 1: 0x600
- stack 0: 0x0
3062	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0xF3
3063	 EE	JUMPI		 	 
- stack 0: 0x600
3064	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x600
- stack 0: 0x10D
3065	 F2	JUMP		 	 
- stack 0: 0x600
3066	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x600
3067	 10E	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3068	 110	ADD		 	 
- stack 0: 0x604
3069	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3070	 112	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x1DC000101FB00020215FFE000860011019C000001B60000016AFFFF02570000
3071	 113	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x1DC000101FB00020215FFE000860011019C000001B60000016AFFFF02570000
- stack 0: 0xF0
3072	 115	SHR		 	 
- stack 1: 0x604
- stack 0: 0x1DC
3073	 116	JUMP		 	 
- stack 0: 0x604
3074	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x604
3075	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3076	 1DE	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x1DC000101FB00020215FFE000860011019C000001B60000016AFFFF02570000
3077	 1DF	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x1DC000101FB00020215FFE000860011019C000001B60000016AFFFF02570000
- stack 0: 0xE0
3078	 1E1	SHR		 	 
- stack 1: 0x604
- stack 0: 0x1DC0001
3079	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
3080	 1E5	AND		 	 
- stack 1: 0x604
- stack 0: 0x1
3081	 1E6	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x1
3082	 1E8	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x1
3083	 1E9	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x80
3084	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x1
3085	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x604
- stack 0: 0x2
3086	 1EE	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x80
3087	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x604
3088	 1F2	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3089	 1F4	ADD		 	 
- stack 0: 0x608
3090	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3091	 1F6	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x1FB00020215FFE000860011019C000001B60000016AFFFF0257000002570000
3092	 1F7	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x1FB00020215FFE000860011019C000001B60000016AFFFF0257000002570000
- stack 0: 0xF0
3093	 1F9	SHR		 	 
- stack 1: 0x608
- stack 0: 0x1FB
3094	 1FA	JUMP		 	 
- stack 0: 0x608
3095	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x608
3096	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3097	 1FD	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x1FB00020215FFE000860011019C000001B60000016AFFFF0257000002570000
3098	 1FE	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x1FB00020215FFE000860011019C000001B60000016AFFFF0257000002570000
- stack 0: 0xE0
3099	 200	SHR		 	 
- stack 1: 0x608
- stack 0: 0x1FB0002
3100	 201	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
3101	 204	AND		 	 
- stack 1: 0x608
- stack 0: 0x2
3102	 205	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x1
3103	 207	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x2
3104	 208	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xA0
3105	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x608
3106	 20C	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3107	 20E	ADD		 	 
- stack 0: 0x60C
3108	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3109	 210	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x215FFE000860011019C000001B60000016AFFFF025700000257000001C90000
3110	 211	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x215FFE000860011019C000001B60000016AFFFF025700000257000001C90000
- stack 0: 0xF0
3111	 213	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x215
3112	 214	JUMP		 	 
- stack 0: 0x60C
3113	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x60C
3114	 216	PUSH2	0080	 	 
- stack 1: 0x60C
- stack 0: 0x80
3115	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x60C
- stack 0: 0x2
3116	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3117	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x2
3118	 220	PUSH2	00A0	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0xA0
3119	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0x2
3120	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x60C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3121	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0x2
3122	 22A	SUB		 	 
- stack 1: 0x60C
- stack 0: 0x0
3123	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x233
3124	 22E	JUMPI		 	 
- stack 0: 0x60C
3125	 22F	PUSH2	024D	 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 1: 0x60C
- stack 0: 0x24D
3126	 232	JUMP		 	 
- stack 0: 0x60C
3127	 24D	JUMPDEST		 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x60C
3128	 24E	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3129	 250	ADD		 	 
- stack 0: 0x610
3130	 251	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3131	 252	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x860011019C000001B60000016AFFFF025700000257000001C9000000D40138
3132	 253	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x860011019C000001B60000016AFFFF025700000257000001C9000000D40138
- stack 0: 0xF0
3133	 255	SHR		 	 
- stack 1: 0x610
- stack 0: 0x86
3134	 256	JUMP		 	 
- stack 0: 0x610
3135	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x610
3136	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3137	 88	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x860011019C000001B60000016AFFFF025700000257000001C9000000D40138
3138	 89	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x860011019C000001B60000016AFFFF025700000257000001C9000000D40138
- stack 0: 0xE0
3139	 8B	SHR		 	 
- stack 1: 0x610
- stack 0: 0x860011
3140	 8C	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x860011
- stack 0: 0xFFFF
3141	 8F	AND		 	 
- stack 1: 0x610
- stack 0: 0x11
3142	 90	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x11
- stack 0: 0x1
3143	 92	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x11
3144	 93	PUSH2	0380	 	 
- stack 2: 0x610
- stack 1: 0x11
- stack 0: 0x380
3145	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x610
3146	 97	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3147	 99	ADD		 	 
- stack 0: 0x614
3148	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3149	 9B	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x19C000001B60000016AFFFF025700000257000001C9000000D4013801DC0001
3150	 9C	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x19C000001B60000016AFFFF025700000257000001C9000000D4013801DC0001
- stack 0: 0xF0
3151	 9E	SHR		 	 
- stack 1: 0x614
- stack 0: 0x19C
3152	 9F	JUMP		 	 
- stack 0: 0x614
3153	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x614
3154	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3155	 19E	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x19C000001B60000016AFFFF025700000257000001C9000000D4013801DC0001
3156	 19F	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x19C000001B60000016AFFFF025700000257000001C9000000D4013801DC0001
- stack 0: 0xE0
3157	 1A1	SHR		 	 
- stack 1: 0x614
- stack 0: 0x19C0000
3158	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x19C0000
- stack 0: 0xFFFF
3159	 1A5	AND		 	 
- stack 1: 0x614
- stack 0: 0x0
3160	 1A6	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x1
3161	 1A8	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x0
3162	 1A9	PUSH2	0080	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x80
3163	 1AC	MSTORE		 	  ;; # store to x4
- stack 0: 0x614
3164	 1AD	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3165	 1AF	ADD		 	 
- stack 0: 0x618
3166	 1B0	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3167	 1B1	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1B60000016AFFFF025700000257000001C9000000D4013801DC000101FB0002
3168	 1B2	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x1B60000016AFFFF025700000257000001C9000000D4013801DC000101FB0002
- stack 0: 0xF0
3169	 1B4	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1B6
3170	 1B5	JUMP		 	 
- stack 0: 0x618
3171	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x618
3172	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x618
- stack 0: 0xF0000000
3173	 1BC	PUSH2	0020	 	 
- stack 2: 0x618
- stack 1: 0xF0000000
- stack 0: 0x20
3174	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x618
3175	 1C0	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3176	 1C2	ADD		 	 
- stack 0: 0x61C
3177	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3178	 1C4	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x16AFFFF025700000257000001C9000000D4013801DC000101FB00020215FFE0
3179	 1C5	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x16AFFFF025700000257000001C9000000D4013801DC000101FB00020215FFE0
- stack 0: 0xF0
3180	 1C7	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x16A
3181	 1C8	JUMP		 	 
- stack 0: 0x61C
3182	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x61C
3183	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3184	 16C	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x16AFFFF025700000257000001C9000000D4013801DC000101FB00020215FFE0
3185	 16D	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x16AFFFF025700000257000001C9000000D4013801DC000101FB00020215FFE0
- stack 0: 0xE0
3186	 16F	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x16AFFFF
3187	 170	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
3188	 173	AND		 	 
- stack 1: 0x61C
- stack 0: 0xFFFF
3189	 174	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0xFFFF
- stack 0: 0x1
3190	 176	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3191	 177	PUSH2	0020	 	 
- stack 2: 0x61C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3192	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x61C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
3193	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x61C
- stack 0: 0xEFFFFFFF
3194	 17C	PUSH2	0020	 	 
- stack 2: 0x61C
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
3195	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x61C
3196	 180	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3197	 182	ADD		 	 
- stack 0: 0x620
3198	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3199	 184	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x25700000257000001C9000000D4013801DC000101FB00020215FFE000860012
3200	 185	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x25700000257000001C9000000D4013801DC000101FB00020215FFE000860012
- stack 0: 0xF0
3201	 187	SHR		 	 
- stack 1: 0x620
- stack 0: 0x257
3202	 188	JUMP		 	 
- stack 0: 0x620
3203	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x620
3204	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3205	 259	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x25700000257000001C9000000D4013801DC000101FB00020215FFE000860012
3206	 25A	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x25700000257000001C9000000D4013801DC000101FB00020215FFE000860012
- stack 0: 0xE0
3207	 25C	SHR		 	 
- stack 1: 0x620
- stack 0: 0x2570000
3208	 25D	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x2570000
- stack 0: 0xFFFF
3209	 260	AND		 	 
- stack 1: 0x620
- stack 0: 0x0
3210	 261	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x1
3211	 263	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x0
3212	 264	POP		 	 
- stack 0: 0x620
3213	 265	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3214	 267	ADD		 	 
- stack 0: 0x624
3215	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3216	 269	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x257000001C9000000D4013801DC000101FB00020215FFE000860012019C0000
3217	 26A	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x257000001C9000000D4013801DC000101FB00020215FFE000860012019C0000
- stack 0: 0xF0
3218	 26C	SHR		 	 
- stack 1: 0x624
- stack 0: 0x257
3219	 26D	JUMP		 	 
- stack 0: 0x624
3220	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x624
3221	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3222	 259	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x257000001C9000000D4013801DC000101FB00020215FFE000860012019C0000
3223	 25A	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x257000001C9000000D4013801DC000101FB00020215FFE000860012019C0000
- stack 0: 0xE0
3224	 25C	SHR		 	 
- stack 1: 0x624
- stack 0: 0x2570000
3225	 25D	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x2570000
- stack 0: 0xFFFF
3226	 260	AND		 	 
- stack 1: 0x624
- stack 0: 0x0
3227	 261	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x1
3228	 263	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x0
3229	 264	POP		 	 
- stack 0: 0x624
3230	 265	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3231	 267	ADD		 	 
- stack 0: 0x628
3232	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3233	 269	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x1C9000000D4013801DC000101FB00020215FFE000860012019C000001B60000
3234	 26A	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x1C9000000D4013801DC000101FB00020215FFE000860012019C000001B60000
- stack 0: 0xF0
3235	 26C	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1C9
3236	 26D	JUMP		 	 
- stack 0: 0x628
3237	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x628
3238	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x628
- stack 0: 0xF0000000
3239	 1CF	PUSH2	0040	 	 
- stack 2: 0x628
- stack 1: 0xF0000000
- stack 0: 0x40
3240	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x628
3241	 1D3	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3242	 1D5	ADD		 	 
- stack 0: 0x62C
3243	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3244	 1D7	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xD4013801DC000101FB00020215FFE000860012019C000001B60000016AFFFF
3245	 1D8	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0xD4013801DC000101FB00020215FFE000860012019C000001B60000016AFFFF
- stack 0: 0xF0
3246	 1DA	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xD4
3247	 1DB	JUMP		 	 
- stack 0: 0x62C
3248	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x62C
3249	 D5	PUSH2	0040	 	 
- stack 1: 0x62C
- stack 0: 0x40
3250	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x62C
- stack 0: 0xF0000000
3251	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x62C
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
3252	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x62C
- stack 0: 0xF0000000
3253	 DF	PUSH2	0020	 	 
- stack 2: 0x62C
- stack 1: 0xF0000000
- stack 0: 0x20
3254	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x62C
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
3255	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x62C
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
3256	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x62C
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
3257	 E9	LT		 	  ;; # bgeu
- stack 1: 0x62C
- stack 0: 0x1
3258	 EA	ISZERO		 	 
- stack 1: 0x62C
- stack 0: 0x0
3259	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0xF3
3260	 EE	JUMPI		 	 
- stack 0: 0x62C
3261	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x62C
- stack 0: 0x10D
3262	 F2	JUMP		 	 
- stack 0: 0x62C
3263	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x62C
3264	 10E	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3265	 110	ADD		 	 
- stack 0: 0x630
3266	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3267	 112	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x1DC000101FB00020215FFE000860012019C000001B60000016AFFFF01C90000
3268	 113	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x1DC000101FB00020215FFE000860012019C000001B60000016AFFFF01C90000
- stack 0: 0xF0
3269	 115	SHR		 	 
- stack 1: 0x630
- stack 0: 0x1DC
3270	 116	JUMP		 	 
- stack 0: 0x630
3271	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x630
3272	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3273	 1DE	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x1DC000101FB00020215FFE000860012019C000001B60000016AFFFF01C90000
3274	 1DF	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x1DC000101FB00020215FFE000860012019C000001B60000016AFFFF01C90000
- stack 0: 0xE0
3275	 1E1	SHR		 	 
- stack 1: 0x630
- stack 0: 0x1DC0001
3276	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
3277	 1E5	AND		 	 
- stack 1: 0x630
- stack 0: 0x1
3278	 1E6	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x1
3279	 1E8	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x1
3280	 1E9	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x80
3281	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x0
3282	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x630
- stack 0: 0x1
3283	 1EE	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x80
3284	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x630
3285	 1F2	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3286	 1F4	ADD		 	 
- stack 0: 0x634
3287	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3288	 1F6	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x1FB00020215FFE000860012019C000001B60000016AFFFF01C9000000D40114
3289	 1F7	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x1FB00020215FFE000860012019C000001B60000016AFFFF01C9000000D40114
- stack 0: 0xF0
3290	 1F9	SHR		 	 
- stack 1: 0x634
- stack 0: 0x1FB
3291	 1FA	JUMP		 	 
- stack 0: 0x634
3292	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x634
3293	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3294	 1FD	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x1FB00020215FFE000860012019C000001B60000016AFFFF01C9000000D40114
3295	 1FE	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x1FB00020215FFE000860012019C000001B60000016AFFFF01C9000000D40114
- stack 0: 0xE0
3296	 200	SHR		 	 
- stack 1: 0x634
- stack 0: 0x1FB0002
3297	 201	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
3298	 204	AND		 	 
- stack 1: 0x634
- stack 0: 0x2
3299	 205	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x1
3300	 207	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x2
3301	 208	PUSH2	00A0	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0xA0
3302	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x634
3303	 20C	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3304	 20E	ADD		 	 
- stack 0: 0x638
3305	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3306	 210	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x215FFE000860012019C000001B60000016AFFFF01C9000000D4011401DC0001
3307	 211	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x215FFE000860012019C000001B60000016AFFFF01C9000000D4011401DC0001
- stack 0: 0xF0
3308	 213	SHR		 	 
- stack 1: 0x638
- stack 0: 0x215
3309	 214	JUMP		 	 
- stack 0: 0x638
3310	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x638
3311	 216	PUSH2	0080	 	 
- stack 1: 0x638
- stack 0: 0x80
3312	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x638
- stack 0: 0x1
3313	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3314	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x638
- stack 0: 0x1
3315	 220	PUSH2	00A0	 	 
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0xA0
3316	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0x2
3317	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x638
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3318	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0x2
3319	 22A	SUB		 	 
- stack 1: 0x638
- stack 0: 0x1
3320	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0x233
3321	 22E	JUMPI		 	 
- stack 0: 0x638
3322	 233	JUMPDEST		 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x638
3323	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3324	 235	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x215FFE000860012019C000001B60000016AFFFF01C9000000D4011401DC0001
3325	 236	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x215FFE000860012019C000001B60000016AFFFF01C9000000D4011401DC0001
- stack 0: 0xE0
3326	 238	SHR		 	 
- stack 1: 0x638
- stack 0: 0x215FFE0
3327	 239	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x215FFE0
- stack 0: 0xFFFF
3328	 23C	AND		 	 
- stack 1: 0x638
- stack 0: 0xFFE0
3329	 23D	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0xFFE0
- stack 0: 0x1
3330	 23F	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3331	 240	ADD		 	 
- stack 0: 0x618
3332	 241	PUSH4	FFFFFFFF	 	 
- stack 1: 0x618
- stack 0: 0xFFFFFFFF
3333	 246	AND		 	  ;; # mask to 32 bits
- stack 0: 0x618
3334	 247	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3335	 248	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1B60000016AFFFF025700000257000001C9000000D4013801DC000101FB0002
3336	 249	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x1B60000016AFFFF025700000257000001C9000000D4013801DC000101FB0002
- stack 0: 0xF0
3337	 24B	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1B6
3338	 24C	JUMP		 	 
- stack 0: 0x618
3339	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x618
3340	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x618
- stack 0: 0xF0000000
3341	 1BC	PUSH2	0020	 	 
- stack 2: 0x618
- stack 1: 0xF0000000
- stack 0: 0x20
3342	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x618
3343	 1C0	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3344	 1C2	ADD		 	 
- stack 0: 0x61C
3345	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3346	 1C4	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x16AFFFF025700000257000001C9000000D4013801DC000101FB00020215FFE0
3347	 1C5	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x16AFFFF025700000257000001C9000000D4013801DC000101FB00020215FFE0
- stack 0: 0xF0
3348	 1C7	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x16A
3349	 1C8	JUMP		 	 
- stack 0: 0x61C
3350	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x61C
3351	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3352	 16C	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x16AFFFF025700000257000001C9000000D4013801DC000101FB00020215FFE0
3353	 16D	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x16AFFFF025700000257000001C9000000D4013801DC000101FB00020215FFE0
- stack 0: 0xE0
3354	 16F	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x16AFFFF
3355	 170	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
3356	 173	AND		 	 
- stack 1: 0x61C
- stack 0: 0xFFFF
3357	 174	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0xFFFF
- stack 0: 0x1
3358	 176	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3359	 177	PUSH2	0020	 	 
- stack 2: 0x61C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3360	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x61C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
3361	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x61C
- stack 0: 0xEFFFFFFF
3362	 17C	PUSH2	0020	 	 
- stack 2: 0x61C
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
3363	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x61C
3364	 180	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3365	 182	ADD		 	 
- stack 0: 0x620
3366	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3367	 184	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x25700000257000001C9000000D4013801DC000101FB00020215FFE000860012
3368	 185	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x25700000257000001C9000000D4013801DC000101FB00020215FFE000860012
- stack 0: 0xF0
3369	 187	SHR		 	 
- stack 1: 0x620
- stack 0: 0x257
3370	 188	JUMP		 	 
- stack 0: 0x620
3371	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x620
3372	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3373	 259	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x25700000257000001C9000000D4013801DC000101FB00020215FFE000860012
3374	 25A	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x25700000257000001C9000000D4013801DC000101FB00020215FFE000860012
- stack 0: 0xE0
3375	 25C	SHR		 	 
- stack 1: 0x620
- stack 0: 0x2570000
3376	 25D	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x2570000
- stack 0: 0xFFFF
3377	 260	AND		 	 
- stack 1: 0x620
- stack 0: 0x0
3378	 261	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x1
3379	 263	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x0
3380	 264	POP		 	 
- stack 0: 0x620
3381	 265	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3382	 267	ADD		 	 
- stack 0: 0x624
3383	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3384	 269	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x257000001C9000000D4013801DC000101FB00020215FFE000860012019C0000
3385	 26A	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x257000001C9000000D4013801DC000101FB00020215FFE000860012019C0000
- stack 0: 0xF0
3386	 26C	SHR		 	 
- stack 1: 0x624
- stack 0: 0x257
3387	 26D	JUMP		 	 
- stack 0: 0x624
3388	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x624
3389	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3390	 259	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x257000001C9000000D4013801DC000101FB00020215FFE000860012019C0000
3391	 25A	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x257000001C9000000D4013801DC000101FB00020215FFE000860012019C0000
- stack 0: 0xE0
3392	 25C	SHR		 	 
- stack 1: 0x624
- stack 0: 0x2570000
3393	 25D	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x2570000
- stack 0: 0xFFFF
3394	 260	AND		 	 
- stack 1: 0x624
- stack 0: 0x0
3395	 261	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x1
3396	 263	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x0
3397	 264	POP		 	 
- stack 0: 0x624
3398	 265	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3399	 267	ADD		 	 
- stack 0: 0x628
3400	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3401	 269	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x1C9000000D4013801DC000101FB00020215FFE000860012019C000001B60000
3402	 26A	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x1C9000000D4013801DC000101FB00020215FFE000860012019C000001B60000
- stack 0: 0xF0
3403	 26C	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1C9
3404	 26D	JUMP		 	 
- stack 0: 0x628
3405	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x628
3406	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x628
- stack 0: 0xF0000000
3407	 1CF	PUSH2	0040	 	 
- stack 2: 0x628
- stack 1: 0xF0000000
- stack 0: 0x40
3408	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x628
3409	 1D3	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3410	 1D5	ADD		 	 
- stack 0: 0x62C
3411	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3412	 1D7	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xD4013801DC000101FB00020215FFE000860012019C000001B60000016AFFFF
3413	 1D8	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0xD4013801DC000101FB00020215FFE000860012019C000001B60000016AFFFF
- stack 0: 0xF0
3414	 1DA	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xD4
3415	 1DB	JUMP		 	 
- stack 0: 0x62C
3416	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x62C
3417	 D5	PUSH2	0040	 	 
- stack 1: 0x62C
- stack 0: 0x40
3418	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x62C
- stack 0: 0xF0000000
3419	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x62C
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
3420	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x62C
- stack 0: 0xF0000000
3421	 DF	PUSH2	0020	 	 
- stack 2: 0x62C
- stack 1: 0xF0000000
- stack 0: 0x20
3422	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x62C
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
3423	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x62C
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
3424	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x62C
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
3425	 E9	LT		 	  ;; # bgeu
- stack 1: 0x62C
- stack 0: 0x1
3426	 EA	ISZERO		 	 
- stack 1: 0x62C
- stack 0: 0x0
3427	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0xF3
3428	 EE	JUMPI		 	 
- stack 0: 0x62C
3429	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x62C
- stack 0: 0x10D
3430	 F2	JUMP		 	 
- stack 0: 0x62C
3431	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x62C
3432	 10E	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3433	 110	ADD		 	 
- stack 0: 0x630
3434	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3435	 112	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x1DC000101FB00020215FFE000860012019C000001B60000016AFFFF01C90000
3436	 113	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x1DC000101FB00020215FFE000860012019C000001B60000016AFFFF01C90000
- stack 0: 0xF0
3437	 115	SHR		 	 
- stack 1: 0x630
- stack 0: 0x1DC
3438	 116	JUMP		 	 
- stack 0: 0x630
3439	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x630
3440	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3441	 1DE	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x1DC000101FB00020215FFE000860012019C000001B60000016AFFFF01C90000
3442	 1DF	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x1DC000101FB00020215FFE000860012019C000001B60000016AFFFF01C90000
- stack 0: 0xE0
3443	 1E1	SHR		 	 
- stack 1: 0x630
- stack 0: 0x1DC0001
3444	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
3445	 1E5	AND		 	 
- stack 1: 0x630
- stack 0: 0x1
3446	 1E6	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x1
3447	 1E8	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x1
3448	 1E9	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x80
3449	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x1
3450	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x630
- stack 0: 0x2
3451	 1EE	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0x80
3452	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x630
3453	 1F2	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3454	 1F4	ADD		 	 
- stack 0: 0x634
3455	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3456	 1F6	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x1FB00020215FFE000860012019C000001B60000016AFFFF01C9000000D40114
3457	 1F7	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x1FB00020215FFE000860012019C000001B60000016AFFFF01C9000000D40114
- stack 0: 0xF0
3458	 1F9	SHR		 	 
- stack 1: 0x634
- stack 0: 0x1FB
3459	 1FA	JUMP		 	 
- stack 0: 0x634
3460	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x634
3461	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3462	 1FD	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x1FB00020215FFE000860012019C000001B60000016AFFFF01C9000000D40114
3463	 1FE	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x1FB00020215FFE000860012019C000001B60000016AFFFF01C9000000D40114
- stack 0: 0xE0
3464	 200	SHR		 	 
- stack 1: 0x634
- stack 0: 0x1FB0002
3465	 201	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
3466	 204	AND		 	 
- stack 1: 0x634
- stack 0: 0x2
3467	 205	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x1
3468	 207	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x2
3469	 208	PUSH2	00A0	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0xA0
3470	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x634
3471	 20C	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3472	 20E	ADD		 	 
- stack 0: 0x638
3473	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3474	 210	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x215FFE000860012019C000001B60000016AFFFF01C9000000D4011401DC0001
3475	 211	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x215FFE000860012019C000001B60000016AFFFF01C9000000D4011401DC0001
- stack 0: 0xF0
3476	 213	SHR		 	 
- stack 1: 0x638
- stack 0: 0x215
3477	 214	JUMP		 	 
- stack 0: 0x638
3478	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x638
3479	 216	PUSH2	0080	 	 
- stack 1: 0x638
- stack 0: 0x80
3480	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x638
- stack 0: 0x2
3481	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3482	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x638
- stack 0: 0x2
3483	 220	PUSH2	00A0	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0xA0
3484	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0x2
3485	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x638
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3486	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0x2
3487	 22A	SUB		 	 
- stack 1: 0x638
- stack 0: 0x0
3488	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x233
3489	 22E	JUMPI		 	 
- stack 0: 0x638
3490	 22F	PUSH2	024D	 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 1: 0x638
- stack 0: 0x24D
3491	 232	JUMP		 	 
- stack 0: 0x638
3492	 24D	JUMPDEST		 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x638
3493	 24E	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3494	 250	ADD		 	 
- stack 0: 0x63C
3495	 251	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3496	 252	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x860012019C000001B60000016AFFFF01C9000000D4011401DC000101FB0002
3497	 253	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x860012019C000001B60000016AFFFF01C9000000D4011401DC000101FB0002
- stack 0: 0xF0
3498	 255	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x86
3499	 256	JUMP		 	 
- stack 0: 0x63C
3500	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x63C
3501	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3502	 88	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x860012019C000001B60000016AFFFF01C9000000D4011401DC000101FB0002
3503	 89	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x860012019C000001B60000016AFFFF01C9000000D4011401DC000101FB0002
- stack 0: 0xE0
3504	 8B	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x860012
3505	 8C	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x860012
- stack 0: 0xFFFF
3506	 8F	AND		 	 
- stack 1: 0x63C
- stack 0: 0x12
3507	 90	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x12
- stack 0: 0x1
3508	 92	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x12
3509	 93	PUSH2	0380	 	 
- stack 2: 0x63C
- stack 1: 0x12
- stack 0: 0x380
3510	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x63C
3511	 97	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3512	 99	ADD		 	 
- stack 0: 0x640
3513	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3514	 9B	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x19C000001B60000016AFFFF01C9000000D4011401DC000101FB00020215FFE8
3515	 9C	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x19C000001B60000016AFFFF01C9000000D4011401DC000101FB00020215FFE8
- stack 0: 0xF0
3516	 9E	SHR		 	 
- stack 1: 0x640
- stack 0: 0x19C
3517	 9F	JUMP		 	 
- stack 0: 0x640
3518	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x640
3519	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3520	 19E	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x19C000001B60000016AFFFF01C9000000D4011401DC000101FB00020215FFE8
3521	 19F	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x19C000001B60000016AFFFF01C9000000D4011401DC000101FB00020215FFE8
- stack 0: 0xE0
3522	 1A1	SHR		 	 
- stack 1: 0x640
- stack 0: 0x19C0000
3523	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x19C0000
- stack 0: 0xFFFF
3524	 1A5	AND		 	 
- stack 1: 0x640
- stack 0: 0x0
3525	 1A6	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x1
3526	 1A8	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x0
3527	 1A9	PUSH2	0080	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x80
3528	 1AC	MSTORE		 	  ;; # store to x4
- stack 0: 0x640
3529	 1AD	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3530	 1AF	ADD		 	 
- stack 0: 0x644
3531	 1B0	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3532	 1B1	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x1B60000016AFFFF01C9000000D4011401DC000101FB00020215FFE800860013
3533	 1B2	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x1B60000016AFFFF01C9000000D4011401DC000101FB00020215FFE800860013
- stack 0: 0xF0
3534	 1B4	SHR		 	 
- stack 1: 0x644
- stack 0: 0x1B6
3535	 1B5	JUMP		 	 
- stack 0: 0x644
3536	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x644
3537	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x644
- stack 0: 0xF0000000
3538	 1BC	PUSH2	0020	 	 
- stack 2: 0x644
- stack 1: 0xF0000000
- stack 0: 0x20
3539	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x644
3540	 1C0	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3541	 1C2	ADD		 	 
- stack 0: 0x648
3542	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3543	 1C4	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x16AFFFF01C9000000D4011401DC000101FB00020215FFE800860013019C0000
3544	 1C5	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x16AFFFF01C9000000D4011401DC000101FB00020215FFE800860013019C0000
- stack 0: 0xF0
3545	 1C7	SHR		 	 
- stack 1: 0x648
- stack 0: 0x16A
3546	 1C8	JUMP		 	 
- stack 0: 0x648
3547	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x648
3548	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3549	 16C	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x16AFFFF01C9000000D4011401DC000101FB00020215FFE800860013019C0000
3550	 16D	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x16AFFFF01C9000000D4011401DC000101FB00020215FFE800860013019C0000
- stack 0: 0xE0
3551	 16F	SHR		 	 
- stack 1: 0x648
- stack 0: 0x16AFFFF
3552	 170	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
3553	 173	AND		 	 
- stack 1: 0x648
- stack 0: 0xFFFF
3554	 174	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0xFFFF
- stack 0: 0x1
3555	 176	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3556	 177	PUSH2	0020	 	 
- stack 2: 0x648
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3557	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x648
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
3558	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x648
- stack 0: 0xEFFFFFFF
3559	 17C	PUSH2	0020	 	 
- stack 2: 0x648
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
3560	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x648
3561	 180	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3562	 182	ADD		 	 
- stack 0: 0x64C
3563	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3564	 184	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x1C9000000D4011401DC000101FB00020215FFE800860013019C000001B60000
3565	 185	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x1C9000000D4011401DC000101FB00020215FFE800860013019C000001B60000
- stack 0: 0xF0
3566	 187	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x1C9
3567	 188	JUMP		 	 
- stack 0: 0x64C
3568	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x64C
3569	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x64C
- stack 0: 0xF0000000
3570	 1CF	PUSH2	0040	 	 
- stack 2: 0x64C
- stack 1: 0xF0000000
- stack 0: 0x40
3571	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x64C
3572	 1D3	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3573	 1D5	ADD		 	 
- stack 0: 0x650
3574	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3575	 1D7	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0xD4011401DC000101FB00020215FFE800860013019C000001B60000016AFFFF
3576	 1D8	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0xD4011401DC000101FB00020215FFE800860013019C000001B60000016AFFFF
- stack 0: 0xF0
3577	 1DA	SHR		 	 
- stack 1: 0x650
- stack 0: 0xD4
3578	 1DB	JUMP		 	 
- stack 0: 0x650
3579	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x650
3580	 D5	PUSH2	0040	 	 
- stack 1: 0x650
- stack 0: 0x40
3581	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x650
- stack 0: 0xF0000000
3582	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x650
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
3583	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x650
- stack 0: 0xF0000000
3584	 DF	PUSH2	0020	 	 
- stack 2: 0x650
- stack 1: 0xF0000000
- stack 0: 0x20
3585	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x650
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
3586	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x650
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
3587	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x650
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
3588	 E9	LT		 	  ;; # bgeu
- stack 1: 0x650
- stack 0: 0x1
3589	 EA	ISZERO		 	 
- stack 1: 0x650
- stack 0: 0x0
3590	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0xF3
3591	 EE	JUMPI		 	 
- stack 0: 0x650
3592	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x650
- stack 0: 0x10D
3593	 F2	JUMP		 	 
- stack 0: 0x650
3594	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x650
3595	 10E	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3596	 110	ADD		 	 
- stack 0: 0x654
3597	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3598	 112	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x1DC000101FB00020215FFE800860013019C000001B60000016AFFFF01C90000
3599	 113	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x1DC000101FB00020215FFE800860013019C000001B60000016AFFFF01C90000
- stack 0: 0xF0
3600	 115	SHR		 	 
- stack 1: 0x654
- stack 0: 0x1DC
3601	 116	JUMP		 	 
- stack 0: 0x654
3602	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x654
3603	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3604	 1DE	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x1DC000101FB00020215FFE800860013019C000001B60000016AFFFF01C90000
3605	 1DF	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x1DC000101FB00020215FFE800860013019C000001B60000016AFFFF01C90000
- stack 0: 0xE0
3606	 1E1	SHR		 	 
- stack 1: 0x654
- stack 0: 0x1DC0001
3607	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
3608	 1E5	AND		 	 
- stack 1: 0x654
- stack 0: 0x1
3609	 1E6	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x1
3610	 1E8	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x1
3611	 1E9	PUSH2	0080	 	 
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x80
3612	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x0
3613	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x654
- stack 0: 0x1
3614	 1EE	PUSH2	0080	 	 
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x80
3615	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x654
3616	 1F2	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3617	 1F4	ADD		 	 
- stack 0: 0x658
3618	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3619	 1F6	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x1FB00020215FFE800860013019C000001B60000016AFFFF01C9000002570000
3620	 1F7	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x1FB00020215FFE800860013019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xF0
3621	 1F9	SHR		 	 
- stack 1: 0x658
- stack 0: 0x1FB
3622	 1FA	JUMP		 	 
- stack 0: 0x658
3623	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x658
3624	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3625	 1FD	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x1FB00020215FFE800860013019C000001B60000016AFFFF01C9000002570000
3626	 1FE	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x1FB00020215FFE800860013019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xE0
3627	 200	SHR		 	 
- stack 1: 0x658
- stack 0: 0x1FB0002
3628	 201	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
3629	 204	AND		 	 
- stack 1: 0x658
- stack 0: 0x2
3630	 205	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0x1
3631	 207	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x2
3632	 208	PUSH2	00A0	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0xA0
3633	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x658
3634	 20C	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3635	 20E	ADD		 	 
- stack 0: 0x65C
3636	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3637	 210	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x215FFE800860013019C000001B60000016AFFFF01C900000257000000D400EC
3638	 211	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x215FFE800860013019C000001B60000016AFFFF01C900000257000000D400EC
- stack 0: 0xF0
3639	 213	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x215
3640	 214	JUMP		 	 
- stack 0: 0x65C
3641	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x65C
3642	 216	PUSH2	0080	 	 
- stack 1: 0x65C
- stack 0: 0x80
3643	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x65C
- stack 0: 0x1
3644	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x65C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3645	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x65C
- stack 0: 0x1
3646	 220	PUSH2	00A0	 	 
- stack 2: 0x65C
- stack 1: 0x1
- stack 0: 0xA0
3647	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x65C
- stack 1: 0x1
- stack 0: 0x2
3648	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x65C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3649	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x65C
- stack 1: 0x1
- stack 0: 0x2
3650	 22A	SUB		 	 
- stack 1: 0x65C
- stack 0: 0x1
3651	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x65C
- stack 1: 0x1
- stack 0: 0x233
3652	 22E	JUMPI		 	 
- stack 0: 0x65C
3653	 233	JUMPDEST		 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x65C
3654	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3655	 235	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x215FFE800860013019C000001B60000016AFFFF01C900000257000000D400EC
3656	 236	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x215FFE800860013019C000001B60000016AFFFF01C900000257000000D400EC
- stack 0: 0xE0
3657	 238	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x215FFE8
3658	 239	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x215FFE8
- stack 0: 0xFFFF
3659	 23C	AND		 	 
- stack 1: 0x65C
- stack 0: 0xFFE8
3660	 23D	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0xFFE8
- stack 0: 0x1
3661	 23F	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
3662	 240	ADD		 	 
- stack 0: 0x644
3663	 241	PUSH4	FFFFFFFF	 	 
- stack 1: 0x644
- stack 0: 0xFFFFFFFF
3664	 246	AND		 	  ;; # mask to 32 bits
- stack 0: 0x644
3665	 247	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3666	 248	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x1B60000016AFFFF01C9000000D4011401DC000101FB00020215FFE800860013
3667	 249	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x1B60000016AFFFF01C9000000D4011401DC000101FB00020215FFE800860013
- stack 0: 0xF0
3668	 24B	SHR		 	 
- stack 1: 0x644
- stack 0: 0x1B6
3669	 24C	JUMP		 	 
- stack 0: 0x644
3670	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x644
3671	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x644
- stack 0: 0xF0000000
3672	 1BC	PUSH2	0020	 	 
- stack 2: 0x644
- stack 1: 0xF0000000
- stack 0: 0x20
3673	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x644
3674	 1C0	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3675	 1C2	ADD		 	 
- stack 0: 0x648
3676	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3677	 1C4	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x16AFFFF01C9000000D4011401DC000101FB00020215FFE800860013019C0000
3678	 1C5	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x16AFFFF01C9000000D4011401DC000101FB00020215FFE800860013019C0000
- stack 0: 0xF0
3679	 1C7	SHR		 	 
- stack 1: 0x648
- stack 0: 0x16A
3680	 1C8	JUMP		 	 
- stack 0: 0x648
3681	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x648
3682	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3683	 16C	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x16AFFFF01C9000000D4011401DC000101FB00020215FFE800860013019C0000
3684	 16D	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x16AFFFF01C9000000D4011401DC000101FB00020215FFE800860013019C0000
- stack 0: 0xE0
3685	 16F	SHR		 	 
- stack 1: 0x648
- stack 0: 0x16AFFFF
3686	 170	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
3687	 173	AND		 	 
- stack 1: 0x648
- stack 0: 0xFFFF
3688	 174	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0xFFFF
- stack 0: 0x1
3689	 176	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3690	 177	PUSH2	0020	 	 
- stack 2: 0x648
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3691	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x648
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
3692	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x648
- stack 0: 0xEFFFFFFF
3693	 17C	PUSH2	0020	 	 
- stack 2: 0x648
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
3694	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x648
3695	 180	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3696	 182	ADD		 	 
- stack 0: 0x64C
3697	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3698	 184	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x1C9000000D4011401DC000101FB00020215FFE800860013019C000001B60000
3699	 185	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x1C9000000D4011401DC000101FB00020215FFE800860013019C000001B60000
- stack 0: 0xF0
3700	 187	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x1C9
3701	 188	JUMP		 	 
- stack 0: 0x64C
3702	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x64C
3703	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x64C
- stack 0: 0xF0000000
3704	 1CF	PUSH2	0040	 	 
- stack 2: 0x64C
- stack 1: 0xF0000000
- stack 0: 0x40
3705	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x64C
3706	 1D3	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3707	 1D5	ADD		 	 
- stack 0: 0x650
3708	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3709	 1D7	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0xD4011401DC000101FB00020215FFE800860013019C000001B60000016AFFFF
3710	 1D8	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0xD4011401DC000101FB00020215FFE800860013019C000001B60000016AFFFF
- stack 0: 0xF0
3711	 1DA	SHR		 	 
- stack 1: 0x650
- stack 0: 0xD4
3712	 1DB	JUMP		 	 
- stack 0: 0x650
3713	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x650
3714	 D5	PUSH2	0040	 	 
- stack 1: 0x650
- stack 0: 0x40
3715	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x650
- stack 0: 0xF0000000
3716	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x650
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
3717	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x650
- stack 0: 0xF0000000
3718	 DF	PUSH2	0020	 	 
- stack 2: 0x650
- stack 1: 0xF0000000
- stack 0: 0x20
3719	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x650
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
3720	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x650
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
3721	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x650
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
3722	 E9	LT		 	  ;; # bgeu
- stack 1: 0x650
- stack 0: 0x1
3723	 EA	ISZERO		 	 
- stack 1: 0x650
- stack 0: 0x0
3724	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0xF3
3725	 EE	JUMPI		 	 
- stack 0: 0x650
3726	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x650
- stack 0: 0x10D
3727	 F2	JUMP		 	 
- stack 0: 0x650
3728	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x650
3729	 10E	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3730	 110	ADD		 	 
- stack 0: 0x654
3731	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3732	 112	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x1DC000101FB00020215FFE800860013019C000001B60000016AFFFF01C90000
3733	 113	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x1DC000101FB00020215FFE800860013019C000001B60000016AFFFF01C90000
- stack 0: 0xF0
3734	 115	SHR		 	 
- stack 1: 0x654
- stack 0: 0x1DC
3735	 116	JUMP		 	 
- stack 0: 0x654
3736	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x654
3737	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3738	 1DE	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x1DC000101FB00020215FFE800860013019C000001B60000016AFFFF01C90000
3739	 1DF	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x1DC000101FB00020215FFE800860013019C000001B60000016AFFFF01C90000
- stack 0: 0xE0
3740	 1E1	SHR		 	 
- stack 1: 0x654
- stack 0: 0x1DC0001
3741	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
3742	 1E5	AND		 	 
- stack 1: 0x654
- stack 0: 0x1
3743	 1E6	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x1
3744	 1E8	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x1
3745	 1E9	PUSH2	0080	 	 
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x80
3746	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x1
3747	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x654
- stack 0: 0x2
3748	 1EE	PUSH2	0080	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x80
3749	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x654
3750	 1F2	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3751	 1F4	ADD		 	 
- stack 0: 0x658
3752	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3753	 1F6	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x1FB00020215FFE800860013019C000001B60000016AFFFF01C9000002570000
3754	 1F7	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x1FB00020215FFE800860013019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xF0
3755	 1F9	SHR		 	 
- stack 1: 0x658
- stack 0: 0x1FB
3756	 1FA	JUMP		 	 
- stack 0: 0x658
3757	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x658
3758	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3759	 1FD	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x1FB00020215FFE800860013019C000001B60000016AFFFF01C9000002570000
3760	 1FE	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x1FB00020215FFE800860013019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xE0
3761	 200	SHR		 	 
- stack 1: 0x658
- stack 0: 0x1FB0002
3762	 201	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
3763	 204	AND		 	 
- stack 1: 0x658
- stack 0: 0x2
3764	 205	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0x1
3765	 207	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x2
3766	 208	PUSH2	00A0	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0xA0
3767	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x658
3768	 20C	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3769	 20E	ADD		 	 
- stack 0: 0x65C
3770	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3771	 210	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x215FFE800860013019C000001B60000016AFFFF01C900000257000000D400EC
3772	 211	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x215FFE800860013019C000001B60000016AFFFF01C900000257000000D400EC
- stack 0: 0xF0
3773	 213	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x215
3774	 214	JUMP		 	 
- stack 0: 0x65C
3775	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x65C
3776	 216	PUSH2	0080	 	 
- stack 1: 0x65C
- stack 0: 0x80
3777	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x65C
- stack 0: 0x2
3778	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3779	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x65C
- stack 0: 0x2
3780	 220	PUSH2	00A0	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0xA0
3781	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0x2
3782	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x65C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3783	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0x2
3784	 22A	SUB		 	 
- stack 1: 0x65C
- stack 0: 0x0
3785	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x233
3786	 22E	JUMPI		 	 
- stack 0: 0x65C
3787	 22F	PUSH2	024D	 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 1: 0x65C
- stack 0: 0x24D
3788	 232	JUMP		 	 
- stack 0: 0x65C
3789	 24D	JUMPDEST		 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x65C
3790	 24E	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3791	 250	ADD		 	 
- stack 0: 0x660
3792	 251	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3793	 252	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x860013019C000001B60000016AFFFF01C900000257000000D400EC01DC0001
3794	 253	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x860013019C000001B60000016AFFFF01C900000257000000D400EC01DC0001
- stack 0: 0xF0
3795	 255	SHR		 	 
- stack 1: 0x660
- stack 0: 0x86
3796	 256	JUMP		 	 
- stack 0: 0x660
3797	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x660
3798	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
3799	 88	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x860013019C000001B60000016AFFFF01C900000257000000D400EC01DC0001
3800	 89	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x860013019C000001B60000016AFFFF01C900000257000000D400EC01DC0001
- stack 0: 0xE0
3801	 8B	SHR		 	 
- stack 1: 0x660
- stack 0: 0x860013
3802	 8C	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x860013
- stack 0: 0xFFFF
3803	 8F	AND		 	 
- stack 1: 0x660
- stack 0: 0x13
3804	 90	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0x13
- stack 0: 0x1
3805	 92	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0x13
3806	 93	PUSH2	0380	 	 
- stack 2: 0x660
- stack 1: 0x13
- stack 0: 0x380
3807	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x660
3808	 97	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3809	 99	ADD		 	 
- stack 0: 0x664
3810	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3811	 9B	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x19C000001B60000016AFFFF01C900000257000000D400EC01DC000101FB0002
3812	 9C	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x19C000001B60000016AFFFF01C900000257000000D400EC01DC000101FB0002
- stack 0: 0xF0
3813	 9E	SHR		 	 
- stack 1: 0x664
- stack 0: 0x19C
3814	 9F	JUMP		 	 
- stack 0: 0x664
3815	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x664
3816	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
3817	 19E	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x19C000001B60000016AFFFF01C900000257000000D400EC01DC000101FB0002
3818	 19F	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x19C000001B60000016AFFFF01C900000257000000D400EC01DC000101FB0002
- stack 0: 0xE0
3819	 1A1	SHR		 	 
- stack 1: 0x664
- stack 0: 0x19C0000
3820	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x19C0000
- stack 0: 0xFFFF
3821	 1A5	AND		 	 
- stack 1: 0x664
- stack 0: 0x0
3822	 1A6	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x1
3823	 1A8	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x0
3824	 1A9	PUSH2	0080	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x80
3825	 1AC	MSTORE		 	  ;; # store to x4
- stack 0: 0x664
3826	 1AD	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3827	 1AF	ADD		 	 
- stack 0: 0x668
3828	 1B0	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3829	 1B1	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x1B60000016AFFFF01C900000257000000D400EC01DC000101FB00020215FFE4
3830	 1B2	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x1B60000016AFFFF01C900000257000000D400EC01DC000101FB00020215FFE4
- stack 0: 0xF0
3831	 1B4	SHR		 	 
- stack 1: 0x668
- stack 0: 0x1B6
3832	 1B5	JUMP		 	 
- stack 0: 0x668
3833	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x668
3834	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x668
- stack 0: 0xF0000000
3835	 1BC	PUSH2	0020	 	 
- stack 2: 0x668
- stack 1: 0xF0000000
- stack 0: 0x20
3836	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x668
3837	 1C0	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3838	 1C2	ADD		 	 
- stack 0: 0x66C
3839	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3840	 1C4	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x16AFFFF01C900000257000000D400EC01DC000101FB00020215FFE400860014
3841	 1C5	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x16AFFFF01C900000257000000D400EC01DC000101FB00020215FFE400860014
- stack 0: 0xF0
3842	 1C7	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x16A
3843	 1C8	JUMP		 	 
- stack 0: 0x66C
3844	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x66C
3845	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
3846	 16C	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x16AFFFF01C900000257000000D400EC01DC000101FB00020215FFE400860014
3847	 16D	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x16AFFFF01C900000257000000D400EC01DC000101FB00020215FFE400860014
- stack 0: 0xE0
3848	 16F	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x16AFFFF
3849	 170	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
3850	 173	AND		 	 
- stack 1: 0x66C
- stack 0: 0xFFFF
3851	 174	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0xFFFF
- stack 0: 0x1
3852	 176	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3853	 177	PUSH2	0020	 	 
- stack 2: 0x66C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3854	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x66C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
3855	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x66C
- stack 0: 0xEFFFFFFF
3856	 17C	PUSH2	0020	 	 
- stack 2: 0x66C
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
3857	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x66C
3858	 180	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3859	 182	ADD		 	 
- stack 0: 0x670
3860	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3861	 184	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x1C900000257000000D400EC01DC000101FB00020215FFE400860014019C0000
3862	 185	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x1C900000257000000D400EC01DC000101FB00020215FFE400860014019C0000
- stack 0: 0xF0
3863	 187	SHR		 	 
- stack 1: 0x670
- stack 0: 0x1C9
3864	 188	JUMP		 	 
- stack 0: 0x670
3865	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x670
3866	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x670
- stack 0: 0xF0000000
3867	 1CF	PUSH2	0040	 	 
- stack 2: 0x670
- stack 1: 0xF0000000
- stack 0: 0x40
3868	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x670
3869	 1D3	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3870	 1D5	ADD		 	 
- stack 0: 0x674
3871	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3872	 1D7	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x257000000D400EC01DC000101FB00020215FFE400860014019C000001B60000
3873	 1D8	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x257000000D400EC01DC000101FB00020215FFE400860014019C000001B60000
- stack 0: 0xF0
3874	 1DA	SHR		 	 
- stack 1: 0x674
- stack 0: 0x257
3875	 1DB	JUMP		 	 
- stack 0: 0x674
3876	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x674
3877	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
3878	 259	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x257000000D400EC01DC000101FB00020215FFE400860014019C000001B60000
3879	 25A	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x257000000D400EC01DC000101FB00020215FFE400860014019C000001B60000
- stack 0: 0xE0
3880	 25C	SHR		 	 
- stack 1: 0x674
- stack 0: 0x2570000
3881	 25D	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x2570000
- stack 0: 0xFFFF
3882	 260	AND		 	 
- stack 1: 0x674
- stack 0: 0x0
3883	 261	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x1
3884	 263	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x0
3885	 264	POP		 	 
- stack 0: 0x674
3886	 265	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3887	 267	ADD		 	 
- stack 0: 0x678
3888	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3889	 269	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0xD400EC01DC000101FB00020215FFE400860014019C000001B60000016AFFFF
3890	 26A	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0xD400EC01DC000101FB00020215FFE400860014019C000001B60000016AFFFF
- stack 0: 0xF0
3891	 26C	SHR		 	 
- stack 1: 0x678
- stack 0: 0xD4
3892	 26D	JUMP		 	 
- stack 0: 0x678
3893	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x678
3894	 D5	PUSH2	0040	 	 
- stack 1: 0x678
- stack 0: 0x40
3895	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x678
- stack 0: 0xF0000000
3896	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x678
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
3897	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x678
- stack 0: 0xF0000000
3898	 DF	PUSH2	0020	 	 
- stack 2: 0x678
- stack 1: 0xF0000000
- stack 0: 0x20
3899	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x678
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
3900	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x678
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
3901	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x678
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
3902	 E9	LT		 	  ;; # bgeu
- stack 1: 0x678
- stack 0: 0x1
3903	 EA	ISZERO		 	 
- stack 1: 0x678
- stack 0: 0x0
3904	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0xF3
3905	 EE	JUMPI		 	 
- stack 0: 0x678
3906	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x678
- stack 0: 0x10D
3907	 F2	JUMP		 	 
- stack 0: 0x678
3908	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x678
3909	 10E	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3910	 110	ADD		 	 
- stack 0: 0x67C
3911	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3912	 112	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x1DC000101FB00020215FFE400860014019C000001B60000016AFFFF01C90000
3913	 113	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x1DC000101FB00020215FFE400860014019C000001B60000016AFFFF01C90000
- stack 0: 0xF0
3914	 115	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x1DC
3915	 116	JUMP		 	 
- stack 0: 0x67C
3916	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x67C
3917	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
3918	 1DE	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x1DC000101FB00020215FFE400860014019C000001B60000016AFFFF01C90000
3919	 1DF	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x1DC000101FB00020215FFE400860014019C000001B60000016AFFFF01C90000
- stack 0: 0xE0
3920	 1E1	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x1DC0001
3921	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
3922	 1E5	AND		 	 
- stack 1: 0x67C
- stack 0: 0x1
3923	 1E6	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x1
3924	 1E8	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x1
3925	 1E9	PUSH2	0080	 	 
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x80
3926	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x0
3927	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x67C
- stack 0: 0x1
3928	 1EE	PUSH2	0080	 	 
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x80
3929	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x67C
3930	 1F2	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3931	 1F4	ADD		 	 
- stack 0: 0x680
3932	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3933	 1F6	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x1FB00020215FFE400860014019C000001B60000016AFFFF01C9000002570000
3934	 1F7	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x1FB00020215FFE400860014019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xF0
3935	 1F9	SHR		 	 
- stack 1: 0x680
- stack 0: 0x1FB
3936	 1FA	JUMP		 	 
- stack 0: 0x680
3937	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x680
3938	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
3939	 1FD	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x1FB00020215FFE400860014019C000001B60000016AFFFF01C9000002570000
3940	 1FE	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x1FB00020215FFE400860014019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xE0
3941	 200	SHR		 	 
- stack 1: 0x680
- stack 0: 0x1FB0002
3942	 201	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
3943	 204	AND		 	 
- stack 1: 0x680
- stack 0: 0x2
3944	 205	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0x1
3945	 207	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x2
3946	 208	PUSH2	00A0	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0xA0
3947	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x680
3948	 20C	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
3949	 20E	ADD		 	 
- stack 0: 0x684
3950	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
3951	 210	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x215FFE400860014019C000001B60000016AFFFF01C900000257000002570000
3952	 211	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x215FFE400860014019C000001B60000016AFFFF01C900000257000002570000
- stack 0: 0xF0
3953	 213	SHR		 	 
- stack 1: 0x684
- stack 0: 0x215
3954	 214	JUMP		 	 
- stack 0: 0x684
3955	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x684
3956	 216	PUSH2	0080	 	 
- stack 1: 0x684
- stack 0: 0x80
3957	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x684
- stack 0: 0x1
3958	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3959	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x684
- stack 0: 0x1
3960	 220	PUSH2	00A0	 	 
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0xA0
3961	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0x2
3962	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x684
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3963	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0x2
3964	 22A	SUB		 	 
- stack 1: 0x684
- stack 0: 0x1
3965	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0x233
3966	 22E	JUMPI		 	 
- stack 0: 0x684
3967	 233	JUMPDEST		 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x684
3968	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
3969	 235	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x215FFE400860014019C000001B60000016AFFFF01C900000257000002570000
3970	 236	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x215FFE400860014019C000001B60000016AFFFF01C900000257000002570000
- stack 0: 0xE0
3971	 238	SHR		 	 
- stack 1: 0x684
- stack 0: 0x215FFE4
3972	 239	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x215FFE4
- stack 0: 0xFFFF
3973	 23C	AND		 	 
- stack 1: 0x684
- stack 0: 0xFFE4
3974	 23D	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0xFFE4
- stack 0: 0x1
3975	 23F	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
3976	 240	ADD		 	 
- stack 0: 0x668
3977	 241	PUSH4	FFFFFFFF	 	 
- stack 1: 0x668
- stack 0: 0xFFFFFFFF
3978	 246	AND		 	  ;; # mask to 32 bits
- stack 0: 0x668
3979	 247	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3980	 248	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x1B60000016AFFFF01C900000257000000D400EC01DC000101FB00020215FFE4
3981	 249	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x1B60000016AFFFF01C900000257000000D400EC01DC000101FB00020215FFE4
- stack 0: 0xF0
3982	 24B	SHR		 	 
- stack 1: 0x668
- stack 0: 0x1B6
3983	 24C	JUMP		 	 
- stack 0: 0x668
3984	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x668
3985	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x668
- stack 0: 0xF0000000
3986	 1BC	PUSH2	0020	 	 
- stack 2: 0x668
- stack 1: 0xF0000000
- stack 0: 0x20
3987	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x668
3988	 1C0	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3989	 1C2	ADD		 	 
- stack 0: 0x66C
3990	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3991	 1C4	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x16AFFFF01C900000257000000D400EC01DC000101FB00020215FFE400860014
3992	 1C5	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x16AFFFF01C900000257000000D400EC01DC000101FB00020215FFE400860014
- stack 0: 0xF0
3993	 1C7	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x16A
3994	 1C8	JUMP		 	 
- stack 0: 0x66C
3995	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x66C
3996	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
3997	 16C	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x16AFFFF01C900000257000000D400EC01DC000101FB00020215FFE400860014
3998	 16D	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x16AFFFF01C900000257000000D400EC01DC000101FB00020215FFE400860014
- stack 0: 0xE0
3999	 16F	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x16AFFFF
4000	 170	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
4001	 173	AND		 	 
- stack 1: 0x66C
- stack 0: 0xFFFF
4002	 174	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0xFFFF
- stack 0: 0x1
4003	 176	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4004	 177	PUSH2	0020	 	 
- stack 2: 0x66C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4005	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x66C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
4006	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x66C
- stack 0: 0xEFFFFFFF
4007	 17C	PUSH2	0020	 	 
- stack 2: 0x66C
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
4008	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x66C
4009	 180	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4010	 182	ADD		 	 
- stack 0: 0x670
4011	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4012	 184	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x1C900000257000000D400EC01DC000101FB00020215FFE400860014019C0000
4013	 185	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x1C900000257000000D400EC01DC000101FB00020215FFE400860014019C0000
- stack 0: 0xF0
4014	 187	SHR		 	 
- stack 1: 0x670
- stack 0: 0x1C9
4015	 188	JUMP		 	 
- stack 0: 0x670
4016	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x670
4017	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x670
- stack 0: 0xF0000000
4018	 1CF	PUSH2	0040	 	 
- stack 2: 0x670
- stack 1: 0xF0000000
- stack 0: 0x40
4019	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x670
4020	 1D3	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4021	 1D5	ADD		 	 
- stack 0: 0x674
4022	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4023	 1D7	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x257000000D400EC01DC000101FB00020215FFE400860014019C000001B60000
4024	 1D8	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x257000000D400EC01DC000101FB00020215FFE400860014019C000001B60000
- stack 0: 0xF0
4025	 1DA	SHR		 	 
- stack 1: 0x674
- stack 0: 0x257
4026	 1DB	JUMP		 	 
- stack 0: 0x674
4027	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x674
4028	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
4029	 259	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x257000000D400EC01DC000101FB00020215FFE400860014019C000001B60000
4030	 25A	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x257000000D400EC01DC000101FB00020215FFE400860014019C000001B60000
- stack 0: 0xE0
4031	 25C	SHR		 	 
- stack 1: 0x674
- stack 0: 0x2570000
4032	 25D	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x2570000
- stack 0: 0xFFFF
4033	 260	AND		 	 
- stack 1: 0x674
- stack 0: 0x0
4034	 261	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x1
4035	 263	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x0
4036	 264	POP		 	 
- stack 0: 0x674
4037	 265	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4038	 267	ADD		 	 
- stack 0: 0x678
4039	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4040	 269	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0xD400EC01DC000101FB00020215FFE400860014019C000001B60000016AFFFF
4041	 26A	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0xD400EC01DC000101FB00020215FFE400860014019C000001B60000016AFFFF
- stack 0: 0xF0
4042	 26C	SHR		 	 
- stack 1: 0x678
- stack 0: 0xD4
4043	 26D	JUMP		 	 
- stack 0: 0x678
4044	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x678
4045	 D5	PUSH2	0040	 	 
- stack 1: 0x678
- stack 0: 0x40
4046	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x678
- stack 0: 0xF0000000
4047	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x678
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
4048	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x678
- stack 0: 0xF0000000
4049	 DF	PUSH2	0020	 	 
- stack 2: 0x678
- stack 1: 0xF0000000
- stack 0: 0x20
4050	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x678
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
4051	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x678
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
4052	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x678
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
4053	 E9	LT		 	  ;; # bgeu
- stack 1: 0x678
- stack 0: 0x1
4054	 EA	ISZERO		 	 
- stack 1: 0x678
- stack 0: 0x0
4055	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0xF3
4056	 EE	JUMPI		 	 
- stack 0: 0x678
4057	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x678
- stack 0: 0x10D
4058	 F2	JUMP		 	 
- stack 0: 0x678
4059	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x678
4060	 10E	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
4061	 110	ADD		 	 
- stack 0: 0x67C
4062	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
4063	 112	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x1DC000101FB00020215FFE400860014019C000001B60000016AFFFF01C90000
4064	 113	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x1DC000101FB00020215FFE400860014019C000001B60000016AFFFF01C90000
- stack 0: 0xF0
4065	 115	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x1DC
4066	 116	JUMP		 	 
- stack 0: 0x67C
4067	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x67C
4068	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
4069	 1DE	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x1DC000101FB00020215FFE400860014019C000001B60000016AFFFF01C90000
4070	 1DF	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x1DC000101FB00020215FFE400860014019C000001B60000016AFFFF01C90000
- stack 0: 0xE0
4071	 1E1	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x1DC0001
4072	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
4073	 1E5	AND		 	 
- stack 1: 0x67C
- stack 0: 0x1
4074	 1E6	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x1
4075	 1E8	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x1
4076	 1E9	PUSH2	0080	 	 
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x80
4077	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x1
4078	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x67C
- stack 0: 0x2
4079	 1EE	PUSH2	0080	 	 
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0x80
4080	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x67C
4081	 1F2	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4082	 1F4	ADD		 	 
- stack 0: 0x680
4083	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4084	 1F6	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x1FB00020215FFE400860014019C000001B60000016AFFFF01C9000002570000
4085	 1F7	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x1FB00020215FFE400860014019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xF0
4086	 1F9	SHR		 	 
- stack 1: 0x680
- stack 0: 0x1FB
4087	 1FA	JUMP		 	 
- stack 0: 0x680
4088	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x680
4089	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
4090	 1FD	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x1FB00020215FFE400860014019C000001B60000016AFFFF01C9000002570000
4091	 1FE	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x1FB00020215FFE400860014019C000001B60000016AFFFF01C9000002570000
- stack 0: 0xE0
4092	 200	SHR		 	 
- stack 1: 0x680
- stack 0: 0x1FB0002
4093	 201	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
4094	 204	AND		 	 
- stack 1: 0x680
- stack 0: 0x2
4095	 205	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0x1
4096	 207	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x2
4097	 208	PUSH2	00A0	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0xA0
4098	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x680
4099	 20C	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4100	 20E	ADD		 	 
- stack 0: 0x684
4101	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4102	 210	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x215FFE400860014019C000001B60000016AFFFF01C900000257000002570000
4103	 211	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x215FFE400860014019C000001B60000016AFFFF01C900000257000002570000
- stack 0: 0xF0
4104	 213	SHR		 	 
- stack 1: 0x684
- stack 0: 0x215
4105	 214	JUMP		 	 
- stack 0: 0x684
4106	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x684
4107	 216	PUSH2	0080	 	 
- stack 1: 0x684
- stack 0: 0x80
4108	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x684
- stack 0: 0x2
4109	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4110	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x684
- stack 0: 0x2
4111	 220	PUSH2	00A0	 	 
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0xA0
4112	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0x2
4113	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x684
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4114	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0x2
4115	 22A	SUB		 	 
- stack 1: 0x684
- stack 0: 0x0
4116	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x233
4117	 22E	JUMPI		 	 
- stack 0: 0x684
4118	 22F	PUSH2	024D	 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 1: 0x684
- stack 0: 0x24D
4119	 232	JUMP		 	 
- stack 0: 0x684
4120	 24D	JUMPDEST		 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x684
4121	 24E	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4122	 250	ADD		 	 
- stack 0: 0x688
4123	 251	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4124	 252	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x860014019C000001B60000016AFFFF01C90000025700000257000000D400C0
4125	 253	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x860014019C000001B60000016AFFFF01C90000025700000257000000D400C0
- stack 0: 0xF0
4126	 255	SHR		 	 
- stack 1: 0x688
- stack 0: 0x86
4127	 256	JUMP		 	 
- stack 0: 0x688
4128	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x688
4129	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4130	 88	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x860014019C000001B60000016AFFFF01C90000025700000257000000D400C0
4131	 89	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x860014019C000001B60000016AFFFF01C90000025700000257000000D400C0
- stack 0: 0xE0
4132	 8B	SHR		 	 
- stack 1: 0x688
- stack 0: 0x860014
4133	 8C	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x860014
- stack 0: 0xFFFF
4134	 8F	AND		 	 
- stack 1: 0x688
- stack 0: 0x14
4135	 90	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x14
- stack 0: 0x1
4136	 92	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x14
4137	 93	PUSH2	0380	 	 
- stack 2: 0x688
- stack 1: 0x14
- stack 0: 0x380
4138	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x688
4139	 97	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4140	 99	ADD		 	 
- stack 0: 0x68C
4141	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4142	 9B	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x19C000001B60000016AFFFF01C90000025700000257000000D400C001DC0001
4143	 9C	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x19C000001B60000016AFFFF01C90000025700000257000000D400C001DC0001
- stack 0: 0xF0
4144	 9E	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x19C
4145	 9F	JUMP		 	 
- stack 0: 0x68C
4146	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x68C
4147	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
4148	 19E	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x19C000001B60000016AFFFF01C90000025700000257000000D400C001DC0001
4149	 19F	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x19C000001B60000016AFFFF01C90000025700000257000000D400C001DC0001
- stack 0: 0xE0
4150	 1A1	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x19C0000
4151	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x19C0000
- stack 0: 0xFFFF
4152	 1A5	AND		 	 
- stack 1: 0x68C
- stack 0: 0x0
4153	 1A6	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x1
4154	 1A8	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0x0
4155	 1A9	PUSH2	0080	 	 
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x80
4156	 1AC	MSTORE		 	  ;; # store to x4
- stack 0: 0x68C
4157	 1AD	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4158	 1AF	ADD		 	 
- stack 0: 0x690
4159	 1B0	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4160	 1B1	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x1B60000016AFFFF01C90000025700000257000000D400C001DC000101FB0002
4161	 1B2	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x1B60000016AFFFF01C90000025700000257000000D400C001DC000101FB0002
- stack 0: 0xF0
4162	 1B4	SHR		 	 
- stack 1: 0x690
- stack 0: 0x1B6
4163	 1B5	JUMP		 	 
- stack 0: 0x690
4164	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x690
4165	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x690
- stack 0: 0xF0000000
4166	 1BC	PUSH2	0020	 	 
- stack 2: 0x690
- stack 1: 0xF0000000
- stack 0: 0x20
4167	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x690
4168	 1C0	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4169	 1C2	ADD		 	 
- stack 0: 0x694
4170	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4171	 1C4	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x16AFFFF01C90000025700000257000000D400C001DC000101FB00020215FFE0
4172	 1C5	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x16AFFFF01C90000025700000257000000D400C001DC000101FB00020215FFE0
- stack 0: 0xF0
4173	 1C7	SHR		 	 
- stack 1: 0x694
- stack 0: 0x16A
4174	 1C8	JUMP		 	 
- stack 0: 0x694
4175	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x694
4176	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4177	 16C	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x16AFFFF01C90000025700000257000000D400C001DC000101FB00020215FFE0
4178	 16D	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x16AFFFF01C90000025700000257000000D400C001DC000101FB00020215FFE0
- stack 0: 0xE0
4179	 16F	SHR		 	 
- stack 1: 0x694
- stack 0: 0x16AFFFF
4180	 170	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
4181	 173	AND		 	 
- stack 1: 0x694
- stack 0: 0xFFFF
4182	 174	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0xFFFF
- stack 0: 0x1
4183	 176	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4184	 177	PUSH2	0020	 	 
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4185	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
4186	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x694
- stack 0: 0xEFFFFFFF
4187	 17C	PUSH2	0020	 	 
- stack 2: 0x694
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
4188	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x694
4189	 180	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4190	 182	ADD		 	 
- stack 0: 0x698
4191	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4192	 184	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x1C90000025700000257000000D400C001DC000101FB00020215FFE000860015
4193	 185	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x1C90000025700000257000000D400C001DC000101FB00020215FFE000860015
- stack 0: 0xF0
4194	 187	SHR		 	 
- stack 1: 0x698
- stack 0: 0x1C9
4195	 188	JUMP		 	 
- stack 0: 0x698
4196	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x698
4197	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x698
- stack 0: 0xF0000000
4198	 1CF	PUSH2	0040	 	 
- stack 2: 0x698
- stack 1: 0xF0000000
- stack 0: 0x40
4199	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x698
4200	 1D3	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4201	 1D5	ADD		 	 
- stack 0: 0x69C
4202	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4203	 1D7	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x25700000257000000D400C001DC000101FB00020215FFE000860015019C0000
4204	 1D8	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x25700000257000000D400C001DC000101FB00020215FFE000860015019C0000
- stack 0: 0xF0
4205	 1DA	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x257
4206	 1DB	JUMP		 	 
- stack 0: 0x69C
4207	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x69C
4208	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4209	 259	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x25700000257000000D400C001DC000101FB00020215FFE000860015019C0000
4210	 25A	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x25700000257000000D400C001DC000101FB00020215FFE000860015019C0000
- stack 0: 0xE0
4211	 25C	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x2570000
4212	 25D	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x2570000
- stack 0: 0xFFFF
4213	 260	AND		 	 
- stack 1: 0x69C
- stack 0: 0x0
4214	 261	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x1
4215	 263	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0x0
4216	 264	POP		 	 
- stack 0: 0x69C
4217	 265	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4218	 267	ADD		 	 
- stack 0: 0x6A0
4219	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4220	 269	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x257000000D400C001DC000101FB00020215FFE000860015019C000001B60000
4221	 26A	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x257000000D400C001DC000101FB00020215FFE000860015019C000001B60000
- stack 0: 0xF0
4222	 26C	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x257
4223	 26D	JUMP		 	 
- stack 0: 0x6A0
4224	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6A0
4225	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4226	 259	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x257000000D400C001DC000101FB00020215FFE000860015019C000001B60000
4227	 25A	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x257000000D400C001DC000101FB00020215FFE000860015019C000001B60000
- stack 0: 0xE0
4228	 25C	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x2570000
4229	 25D	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x2570000
- stack 0: 0xFFFF
4230	 260	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4231	 261	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
4232	 263	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4233	 264	POP		 	 
- stack 0: 0x6A0
4234	 265	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4235	 267	ADD		 	 
- stack 0: 0x6A4
4236	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4237	 269	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0xD400C001DC000101FB00020215FFE000860015019C000001B60000016AFFFF
4238	 26A	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0xD400C001DC000101FB00020215FFE000860015019C000001B60000016AFFFF
- stack 0: 0xF0
4239	 26C	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0xD4
4240	 26D	JUMP		 	 
- stack 0: 0x6A4
4241	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x6A4
4242	 D5	PUSH2	0040	 	 
- stack 1: 0x6A4
- stack 0: 0x40
4243	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x6A4
- stack 0: 0xF0000000
4244	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A4
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
4245	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A4
- stack 0: 0xF0000000
4246	 DF	PUSH2	0020	 	 
- stack 2: 0x6A4
- stack 1: 0xF0000000
- stack 0: 0x20
4247	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6A4
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
4248	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A4
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
4249	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A4
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
4250	 E9	LT		 	  ;; # bgeu
- stack 1: 0x6A4
- stack 0: 0x1
4251	 EA	ISZERO		 	 
- stack 1: 0x6A4
- stack 0: 0x0
4252	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0xF3
4253	 EE	JUMPI		 	 
- stack 0: 0x6A4
4254	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x6A4
- stack 0: 0x10D
4255	 F2	JUMP		 	 
- stack 0: 0x6A4
4256	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x6A4
4257	 10E	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4258	 110	ADD		 	 
- stack 0: 0x6A8
4259	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4260	 112	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x1DC000101FB00020215FFE000860015019C000001B60000016AFFFF02570000
4261	 113	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x1DC000101FB00020215FFE000860015019C000001B60000016AFFFF02570000
- stack 0: 0xF0
4262	 115	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x1DC
4263	 116	JUMP		 	 
- stack 0: 0x6A8
4264	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6A8
4265	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
4266	 1DE	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x1DC000101FB00020215FFE000860015019C000001B60000016AFFFF02570000
4267	 1DF	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0x1DC000101FB00020215FFE000860015019C000001B60000016AFFFF02570000
- stack 0: 0xE0
4268	 1E1	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x1DC0001
4269	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
4270	 1E5	AND		 	 
- stack 1: 0x6A8
- stack 0: 0x1
4271	 1E6	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0x1
- stack 0: 0x1
4272	 1E8	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0x1
4273	 1E9	PUSH2	0080	 	 
- stack 2: 0x6A8
- stack 1: 0x1
- stack 0: 0x80
4274	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x6A8
- stack 1: 0x1
- stack 0: 0x0
4275	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x6A8
- stack 0: 0x1
4276	 1EE	PUSH2	0080	 	 
- stack 2: 0x6A8
- stack 1: 0x1
- stack 0: 0x80
4277	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x6A8
4278	 1F2	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4279	 1F4	ADD		 	 
- stack 0: 0x6AC
4280	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4281	 1F6	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x1FB00020215FFE000860015019C000001B60000016AFFFF0257000001C90000
4282	 1F7	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x1FB00020215FFE000860015019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xF0
4283	 1F9	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x1FB
4284	 1FA	JUMP		 	 
- stack 0: 0x6AC
4285	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6AC
4286	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
4287	 1FD	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x1FB00020215FFE000860015019C000001B60000016AFFFF0257000001C90000
4288	 1FE	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x1FB00020215FFE000860015019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xE0
4289	 200	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x1FB0002
4290	 201	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
4291	 204	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x2
4292	 205	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x2
- stack 0: 0x1
4293	 207	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x2
4294	 208	PUSH2	00A0	 	 
- stack 2: 0x6AC
- stack 1: 0x2
- stack 0: 0xA0
4295	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x6AC
4296	 20C	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4297	 20E	ADD		 	 
- stack 0: 0x6B0
4298	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4299	 210	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x215FFE000860015019C000001B60000016AFFFF0257000001C9000000D40098
4300	 211	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x215FFE000860015019C000001B60000016AFFFF0257000001C9000000D40098
- stack 0: 0xF0
4301	 213	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x215
4302	 214	JUMP		 	 
- stack 0: 0x6B0
4303	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6B0
4304	 216	PUSH2	0080	 	 
- stack 1: 0x6B0
- stack 0: 0x80
4305	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x6B0
- stack 0: 0x1
4306	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4307	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6B0
- stack 0: 0x1
4308	 220	PUSH2	00A0	 	 
- stack 2: 0x6B0
- stack 1: 0x1
- stack 0: 0xA0
4309	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x6B0
- stack 1: 0x1
- stack 0: 0x2
4310	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6B0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4311	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6B0
- stack 1: 0x1
- stack 0: 0x2
4312	 22A	SUB		 	 
- stack 1: 0x6B0
- stack 0: 0x1
4313	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x6B0
- stack 1: 0x1
- stack 0: 0x233
4314	 22E	JUMPI		 	 
- stack 0: 0x6B0
4315	 233	JUMPDEST		 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x6B0
4316	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
4317	 235	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x215FFE000860015019C000001B60000016AFFFF0257000001C9000000D40098
4318	 236	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x215FFE000860015019C000001B60000016AFFFF0257000001C9000000D40098
- stack 0: 0xE0
4319	 238	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x215FFE0
4320	 239	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x215FFE0
- stack 0: 0xFFFF
4321	 23C	AND		 	 
- stack 1: 0x6B0
- stack 0: 0xFFE0
4322	 23D	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0xFFE0
- stack 0: 0x1
4323	 23F	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
4324	 240	ADD		 	 
- stack 0: 0x690
4325	 241	PUSH4	FFFFFFFF	 	 
- stack 1: 0x690
- stack 0: 0xFFFFFFFF
4326	 246	AND		 	  ;; # mask to 32 bits
- stack 0: 0x690
4327	 247	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4328	 248	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x1B60000016AFFFF01C90000025700000257000000D400C001DC000101FB0002
4329	 249	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x1B60000016AFFFF01C90000025700000257000000D400C001DC000101FB0002
- stack 0: 0xF0
4330	 24B	SHR		 	 
- stack 1: 0x690
- stack 0: 0x1B6
4331	 24C	JUMP		 	 
- stack 0: 0x690
4332	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x690
4333	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x690
- stack 0: 0xF0000000
4334	 1BC	PUSH2	0020	 	 
- stack 2: 0x690
- stack 1: 0xF0000000
- stack 0: 0x20
4335	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x690
4336	 1C0	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4337	 1C2	ADD		 	 
- stack 0: 0x694
4338	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4339	 1C4	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x16AFFFF01C90000025700000257000000D400C001DC000101FB00020215FFE0
4340	 1C5	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x16AFFFF01C90000025700000257000000D400C001DC000101FB00020215FFE0
- stack 0: 0xF0
4341	 1C7	SHR		 	 
- stack 1: 0x694
- stack 0: 0x16A
4342	 1C8	JUMP		 	 
- stack 0: 0x694
4343	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x694
4344	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4345	 16C	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x16AFFFF01C90000025700000257000000D400C001DC000101FB00020215FFE0
4346	 16D	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x16AFFFF01C90000025700000257000000D400C001DC000101FB00020215FFE0
- stack 0: 0xE0
4347	 16F	SHR		 	 
- stack 1: 0x694
- stack 0: 0x16AFFFF
4348	 170	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
4349	 173	AND		 	 
- stack 1: 0x694
- stack 0: 0xFFFF
4350	 174	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0xFFFF
- stack 0: 0x1
4351	 176	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4352	 177	PUSH2	0020	 	 
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4353	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
4354	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x694
- stack 0: 0xEFFFFFFF
4355	 17C	PUSH2	0020	 	 
- stack 2: 0x694
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
4356	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x694
4357	 180	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4358	 182	ADD		 	 
- stack 0: 0x698
4359	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4360	 184	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x1C90000025700000257000000D400C001DC000101FB00020215FFE000860015
4361	 185	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x1C90000025700000257000000D400C001DC000101FB00020215FFE000860015
- stack 0: 0xF0
4362	 187	SHR		 	 
- stack 1: 0x698
- stack 0: 0x1C9
4363	 188	JUMP		 	 
- stack 0: 0x698
4364	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x698
4365	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x698
- stack 0: 0xF0000000
4366	 1CF	PUSH2	0040	 	 
- stack 2: 0x698
- stack 1: 0xF0000000
- stack 0: 0x40
4367	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x698
4368	 1D3	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4369	 1D5	ADD		 	 
- stack 0: 0x69C
4370	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4371	 1D7	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x25700000257000000D400C001DC000101FB00020215FFE000860015019C0000
4372	 1D8	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x25700000257000000D400C001DC000101FB00020215FFE000860015019C0000
- stack 0: 0xF0
4373	 1DA	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x257
4374	 1DB	JUMP		 	 
- stack 0: 0x69C
4375	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x69C
4376	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4377	 259	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x25700000257000000D400C001DC000101FB00020215FFE000860015019C0000
4378	 25A	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x25700000257000000D400C001DC000101FB00020215FFE000860015019C0000
- stack 0: 0xE0
4379	 25C	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x2570000
4380	 25D	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x2570000
- stack 0: 0xFFFF
4381	 260	AND		 	 
- stack 1: 0x69C
- stack 0: 0x0
4382	 261	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x1
4383	 263	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0x0
4384	 264	POP		 	 
- stack 0: 0x69C
4385	 265	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4386	 267	ADD		 	 
- stack 0: 0x6A0
4387	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4388	 269	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x257000000D400C001DC000101FB00020215FFE000860015019C000001B60000
4389	 26A	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x257000000D400C001DC000101FB00020215FFE000860015019C000001B60000
- stack 0: 0xF0
4390	 26C	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x257
4391	 26D	JUMP		 	 
- stack 0: 0x6A0
4392	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6A0
4393	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4394	 259	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x257000000D400C001DC000101FB00020215FFE000860015019C000001B60000
4395	 25A	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x257000000D400C001DC000101FB00020215FFE000860015019C000001B60000
- stack 0: 0xE0
4396	 25C	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x2570000
4397	 25D	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x2570000
- stack 0: 0xFFFF
4398	 260	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4399	 261	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
4400	 263	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4401	 264	POP		 	 
- stack 0: 0x6A0
4402	 265	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4403	 267	ADD		 	 
- stack 0: 0x6A4
4404	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4405	 269	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0xD400C001DC000101FB00020215FFE000860015019C000001B60000016AFFFF
4406	 26A	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0xD400C001DC000101FB00020215FFE000860015019C000001B60000016AFFFF
- stack 0: 0xF0
4407	 26C	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0xD4
4408	 26D	JUMP		 	 
- stack 0: 0x6A4
4409	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x6A4
4410	 D5	PUSH2	0040	 	 
- stack 1: 0x6A4
- stack 0: 0x40
4411	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x6A4
- stack 0: 0xF0000000
4412	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A4
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
4413	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A4
- stack 0: 0xF0000000
4414	 DF	PUSH2	0020	 	 
- stack 2: 0x6A4
- stack 1: 0xF0000000
- stack 0: 0x20
4415	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6A4
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
4416	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A4
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
4417	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A4
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
4418	 E9	LT		 	  ;; # bgeu
- stack 1: 0x6A4
- stack 0: 0x1
4419	 EA	ISZERO		 	 
- stack 1: 0x6A4
- stack 0: 0x0
4420	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0xF3
4421	 EE	JUMPI		 	 
- stack 0: 0x6A4
4422	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x6A4
- stack 0: 0x10D
4423	 F2	JUMP		 	 
- stack 0: 0x6A4
4424	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x6A4
4425	 10E	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4426	 110	ADD		 	 
- stack 0: 0x6A8
4427	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4428	 112	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x1DC000101FB00020215FFE000860015019C000001B60000016AFFFF02570000
4429	 113	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x1DC000101FB00020215FFE000860015019C000001B60000016AFFFF02570000
- stack 0: 0xF0
4430	 115	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x1DC
4431	 116	JUMP		 	 
- stack 0: 0x6A8
4432	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6A8
4433	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
4434	 1DE	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x1DC000101FB00020215FFE000860015019C000001B60000016AFFFF02570000
4435	 1DF	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0x1DC000101FB00020215FFE000860015019C000001B60000016AFFFF02570000
- stack 0: 0xE0
4436	 1E1	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x1DC0001
4437	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
4438	 1E5	AND		 	 
- stack 1: 0x6A8
- stack 0: 0x1
4439	 1E6	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0x1
- stack 0: 0x1
4440	 1E8	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0x1
4441	 1E9	PUSH2	0080	 	 
- stack 2: 0x6A8
- stack 1: 0x1
- stack 0: 0x80
4442	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x6A8
- stack 1: 0x1
- stack 0: 0x1
4443	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x6A8
- stack 0: 0x2
4444	 1EE	PUSH2	0080	 	 
- stack 2: 0x6A8
- stack 1: 0x2
- stack 0: 0x80
4445	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x6A8
4446	 1F2	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4447	 1F4	ADD		 	 
- stack 0: 0x6AC
4448	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4449	 1F6	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x1FB00020215FFE000860015019C000001B60000016AFFFF0257000001C90000
4450	 1F7	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x1FB00020215FFE000860015019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xF0
4451	 1F9	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x1FB
4452	 1FA	JUMP		 	 
- stack 0: 0x6AC
4453	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6AC
4454	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
4455	 1FD	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x1FB00020215FFE000860015019C000001B60000016AFFFF0257000001C90000
4456	 1FE	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x1FB00020215FFE000860015019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xE0
4457	 200	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x1FB0002
4458	 201	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
4459	 204	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x2
4460	 205	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x2
- stack 0: 0x1
4461	 207	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x2
4462	 208	PUSH2	00A0	 	 
- stack 2: 0x6AC
- stack 1: 0x2
- stack 0: 0xA0
4463	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x6AC
4464	 20C	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4465	 20E	ADD		 	 
- stack 0: 0x6B0
4466	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4467	 210	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x215FFE000860015019C000001B60000016AFFFF0257000001C9000000D40098
4468	 211	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x215FFE000860015019C000001B60000016AFFFF0257000001C9000000D40098
- stack 0: 0xF0
4469	 213	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x215
4470	 214	JUMP		 	 
- stack 0: 0x6B0
4471	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6B0
4472	 216	PUSH2	0080	 	 
- stack 1: 0x6B0
- stack 0: 0x80
4473	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x6B0
- stack 0: 0x2
4474	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4475	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6B0
- stack 0: 0x2
4476	 220	PUSH2	00A0	 	 
- stack 2: 0x6B0
- stack 1: 0x2
- stack 0: 0xA0
4477	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x6B0
- stack 1: 0x2
- stack 0: 0x2
4478	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6B0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4479	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6B0
- stack 1: 0x2
- stack 0: 0x2
4480	 22A	SUB		 	 
- stack 1: 0x6B0
- stack 0: 0x0
4481	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x6B0
- stack 1: 0x0
- stack 0: 0x233
4482	 22E	JUMPI		 	 
- stack 0: 0x6B0
4483	 22F	PUSH2	024D	 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 1: 0x6B0
- stack 0: 0x24D
4484	 232	JUMP		 	 
- stack 0: 0x6B0
4485	 24D	JUMPDEST		 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x6B0
4486	 24E	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4487	 250	ADD		 	 
- stack 0: 0x6B4
4488	 251	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4489	 252	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x860015019C000001B60000016AFFFF0257000001C9000000D4009801DC0001
4490	 253	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x860015019C000001B60000016AFFFF0257000001C9000000D4009801DC0001
- stack 0: 0xF0
4491	 255	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x86
4492	 256	JUMP		 	 
- stack 0: 0x6B4
4493	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6B4
4494	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
4495	 88	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x860015019C000001B60000016AFFFF0257000001C9000000D4009801DC0001
4496	 89	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x860015019C000001B60000016AFFFF0257000001C9000000D4009801DC0001
- stack 0: 0xE0
4497	 8B	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x860015
4498	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x860015
- stack 0: 0xFFFF
4499	 8F	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x15
4500	 90	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x15
- stack 0: 0x1
4501	 92	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x15
4502	 93	PUSH2	0380	 	 
- stack 2: 0x6B4
- stack 1: 0x15
- stack 0: 0x380
4503	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x6B4
4504	 97	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4505	 99	ADD		 	 
- stack 0: 0x6B8
4506	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4507	 9B	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x19C000001B60000016AFFFF0257000001C9000000D4009801DC000101FB0002
4508	 9C	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x19C000001B60000016AFFFF0257000001C9000000D4009801DC000101FB0002
- stack 0: 0xF0
4509	 9E	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x19C
4510	 9F	JUMP		 	 
- stack 0: 0x6B8
4511	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6B8
4512	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
4513	 19E	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x19C000001B60000016AFFFF0257000001C9000000D4009801DC000101FB0002
4514	 19F	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x19C000001B60000016AFFFF0257000001C9000000D4009801DC000101FB0002
- stack 0: 0xE0
4515	 1A1	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x19C0000
4516	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x19C0000
- stack 0: 0xFFFF
4517	 1A5	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x0
4518	 1A6	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x0
- stack 0: 0x1
4519	 1A8	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x0
4520	 1A9	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x0
- stack 0: 0x80
4521	 1AC	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B8
4522	 1AD	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4523	 1AF	ADD		 	 
- stack 0: 0x6BC
4524	 1B0	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4525	 1B1	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x1B60000016AFFFF0257000001C9000000D4009801DC000101FB00020215FFE4
4526	 1B2	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x1B60000016AFFFF0257000001C9000000D4009801DC000101FB00020215FFE4
- stack 0: 0xF0
4527	 1B4	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x1B6
4528	 1B5	JUMP		 	 
- stack 0: 0x6BC
4529	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x6BC
4530	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x6BC
- stack 0: 0xF0000000
4531	 1BC	PUSH2	0020	 	 
- stack 2: 0x6BC
- stack 1: 0xF0000000
- stack 0: 0x20
4532	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x6BC
4533	 1C0	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4534	 1C2	ADD		 	 
- stack 0: 0x6C0
4535	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4536	 1C4	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x16AFFFF0257000001C9000000D4009801DC000101FB00020215FFE400860016
4537	 1C5	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x16AFFFF0257000001C9000000D4009801DC000101FB00020215FFE400860016
- stack 0: 0xF0
4538	 1C7	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x16A
4539	 1C8	JUMP		 	 
- stack 0: 0x6C0
4540	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x6C0
4541	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
4542	 16C	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x16AFFFF0257000001C9000000D4009801DC000101FB00020215FFE400860016
4543	 16D	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x16AFFFF0257000001C9000000D4009801DC000101FB00020215FFE400860016
- stack 0: 0xE0
4544	 16F	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x16AFFFF
4545	 170	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
4546	 173	AND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFFF
4547	 174	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0xFFFF
- stack 0: 0x1
4548	 176	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4549	 177	PUSH2	0020	 	 
- stack 2: 0x6C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4550	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x6C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
4551	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x6C0
- stack 0: 0xEFFFFFFF
4552	 17C	PUSH2	0020	 	 
- stack 2: 0x6C0
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
4553	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x6C0
4554	 180	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4555	 182	ADD		 	 
- stack 0: 0x6C4
4556	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4557	 184	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x257000001C9000000D4009801DC000101FB00020215FFE400860016019C0000
4558	 185	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x257000001C9000000D4009801DC000101FB00020215FFE400860016019C0000
- stack 0: 0xF0
4559	 187	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x257
4560	 188	JUMP		 	 
- stack 0: 0x6C4
4561	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6C4
4562	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C4
- stack 0: 0x6C4
4563	 259	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x257000001C9000000D4009801DC000101FB00020215FFE400860016019C0000
4564	 25A	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0x257000001C9000000D4009801DC000101FB00020215FFE400860016019C0000
- stack 0: 0xE0
4565	 25C	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x2570000
4566	 25D	PUSH2	FFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x2570000
- stack 0: 0xFFFF
4567	 260	AND		 	 
- stack 1: 0x6C4
- stack 0: 0x0
4568	 261	PUSH1	01	 	 
- stack 2: 0x6C4
- stack 1: 0x0
- stack 0: 0x1
4569	 263	SIGNEXTEND		 	 
- stack 1: 0x6C4
- stack 0: 0x0
4570	 264	POP		 	 
- stack 0: 0x6C4
4571	 265	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
4572	 267	ADD		 	 
- stack 0: 0x6C8
4573	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
4574	 269	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x1C9000000D4009801DC000101FB00020215FFE400860016019C000001B60000
4575	 26A	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x1C9000000D4009801DC000101FB00020215FFE400860016019C000001B60000
- stack 0: 0xF0
4576	 26C	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x1C9
4577	 26D	JUMP		 	 
- stack 0: 0x6C8
4578	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x6C8
4579	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x6C8
- stack 0: 0xF0000000
4580	 1CF	PUSH2	0040	 	 
- stack 2: 0x6C8
- stack 1: 0xF0000000
- stack 0: 0x40
4581	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x6C8
4582	 1D3	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
4583	 1D5	ADD		 	 
- stack 0: 0x6CC
4584	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
4585	 1D7	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0xD4009801DC000101FB00020215FFE400860016019C000001B60000016AFFFF
4586	 1D8	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0xD4009801DC000101FB00020215FFE400860016019C000001B60000016AFFFF
- stack 0: 0xF0
4587	 1DA	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0xD4
4588	 1DB	JUMP		 	 
- stack 0: 0x6CC
4589	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x6CC
4590	 D5	PUSH2	0040	 	 
- stack 1: 0x6CC
- stack 0: 0x40
4591	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x6CC
- stack 0: 0xF0000000
4592	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6CC
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
4593	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6CC
- stack 0: 0xF0000000
4594	 DF	PUSH2	0020	 	 
- stack 2: 0x6CC
- stack 1: 0xF0000000
- stack 0: 0x20
4595	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6CC
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
4596	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6CC
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
4597	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6CC
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
4598	 E9	LT		 	  ;; # bgeu
- stack 1: 0x6CC
- stack 0: 0x1
4599	 EA	ISZERO		 	 
- stack 1: 0x6CC
- stack 0: 0x0
4600	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0xF3
4601	 EE	JUMPI		 	 
- stack 0: 0x6CC
4602	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x6CC
- stack 0: 0x10D
4603	 F2	JUMP		 	 
- stack 0: 0x6CC
4604	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x6CC
4605	 10E	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
4606	 110	ADD		 	 
- stack 0: 0x6D0
4607	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
4608	 112	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x1DC000101FB00020215FFE400860016019C000001B60000016AFFFF02570000
4609	 113	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x1DC000101FB00020215FFE400860016019C000001B60000016AFFFF02570000
- stack 0: 0xF0
4610	 115	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x1DC
4611	 116	JUMP		 	 
- stack 0: 0x6D0
4612	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6D0
4613	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
4614	 1DE	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x1DC000101FB00020215FFE400860016019C000001B60000016AFFFF02570000
4615	 1DF	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x1DC000101FB00020215FFE400860016019C000001B60000016AFFFF02570000
- stack 0: 0xE0
4616	 1E1	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x1DC0001
4617	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
4618	 1E5	AND		 	 
- stack 1: 0x6D0
- stack 0: 0x1
4619	 1E6	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x1
4620	 1E8	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0x1
4621	 1E9	PUSH2	0080	 	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x80
4622	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x0
4623	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x6D0
- stack 0: 0x1
4624	 1EE	PUSH2	0080	 	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x80
4625	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x6D0
4626	 1F2	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
4627	 1F4	ADD		 	 
- stack 0: 0x6D4
4628	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
4629	 1F6	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x1FB00020215FFE400860016019C000001B60000016AFFFF0257000001C90000
4630	 1F7	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x1FB00020215FFE400860016019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xF0
4631	 1F9	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x1FB
4632	 1FA	JUMP		 	 
- stack 0: 0x6D4
4633	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6D4
4634	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
4635	 1FD	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x1FB00020215FFE400860016019C000001B60000016AFFFF0257000001C90000
4636	 1FE	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0x1FB00020215FFE400860016019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xE0
4637	 200	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x1FB0002
4638	 201	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
4639	 204	AND		 	 
- stack 1: 0x6D4
- stack 0: 0x2
4640	 205	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0x1
4641	 207	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0x2
4642	 208	PUSH2	00A0	 	 
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0xA0
4643	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x6D4
4644	 20C	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
4645	 20E	ADD		 	 
- stack 0: 0x6D8
4646	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
4647	 210	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x215FFE400860016019C000001B60000016AFFFF0257000001C9000002570000
4648	 211	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x215FFE400860016019C000001B60000016AFFFF0257000001C9000002570000
- stack 0: 0xF0
4649	 213	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x215
4650	 214	JUMP		 	 
- stack 0: 0x6D8
4651	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6D8
4652	 216	PUSH2	0080	 	 
- stack 1: 0x6D8
- stack 0: 0x80
4653	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x6D8
- stack 0: 0x1
4654	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4655	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D8
- stack 0: 0x1
4656	 220	PUSH2	00A0	 	 
- stack 2: 0x6D8
- stack 1: 0x1
- stack 0: 0xA0
4657	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x6D8
- stack 1: 0x1
- stack 0: 0x2
4658	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4659	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D8
- stack 1: 0x1
- stack 0: 0x2
4660	 22A	SUB		 	 
- stack 1: 0x6D8
- stack 0: 0x1
4661	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x6D8
- stack 1: 0x1
- stack 0: 0x233
4662	 22E	JUMPI		 	 
- stack 0: 0x6D8
4663	 233	JUMPDEST		 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x6D8
4664	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
4665	 235	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x215FFE400860016019C000001B60000016AFFFF0257000001C9000002570000
4666	 236	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x215FFE400860016019C000001B60000016AFFFF0257000001C9000002570000
- stack 0: 0xE0
4667	 238	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x215FFE4
4668	 239	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x215FFE4
- stack 0: 0xFFFF
4669	 23C	AND		 	 
- stack 1: 0x6D8
- stack 0: 0xFFE4
4670	 23D	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0xFFE4
- stack 0: 0x1
4671	 23F	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4672	 240	ADD		 	 
- stack 0: 0x6BC
4673	 241	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6BC
- stack 0: 0xFFFFFFFF
4674	 246	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6BC
4675	 247	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4676	 248	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x1B60000016AFFFF0257000001C9000000D4009801DC000101FB00020215FFE4
4677	 249	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x1B60000016AFFFF0257000001C9000000D4009801DC000101FB00020215FFE4
- stack 0: 0xF0
4678	 24B	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x1B6
4679	 24C	JUMP		 	 
- stack 0: 0x6BC
4680	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x6BC
4681	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x6BC
- stack 0: 0xF0000000
4682	 1BC	PUSH2	0020	 	 
- stack 2: 0x6BC
- stack 1: 0xF0000000
- stack 0: 0x20
4683	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x6BC
4684	 1C0	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4685	 1C2	ADD		 	 
- stack 0: 0x6C0
4686	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4687	 1C4	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x16AFFFF0257000001C9000000D4009801DC000101FB00020215FFE400860016
4688	 1C5	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x16AFFFF0257000001C9000000D4009801DC000101FB00020215FFE400860016
- stack 0: 0xF0
4689	 1C7	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x16A
4690	 1C8	JUMP		 	 
- stack 0: 0x6C0
4691	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x6C0
4692	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
4693	 16C	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x16AFFFF0257000001C9000000D4009801DC000101FB00020215FFE400860016
4694	 16D	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x16AFFFF0257000001C9000000D4009801DC000101FB00020215FFE400860016
- stack 0: 0xE0
4695	 16F	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x16AFFFF
4696	 170	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
4697	 173	AND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFFF
4698	 174	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0xFFFF
- stack 0: 0x1
4699	 176	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4700	 177	PUSH2	0020	 	 
- stack 2: 0x6C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4701	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x6C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
4702	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x6C0
- stack 0: 0xEFFFFFFF
4703	 17C	PUSH2	0020	 	 
- stack 2: 0x6C0
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
4704	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x6C0
4705	 180	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4706	 182	ADD		 	 
- stack 0: 0x6C4
4707	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4708	 184	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x257000001C9000000D4009801DC000101FB00020215FFE400860016019C0000
4709	 185	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x257000001C9000000D4009801DC000101FB00020215FFE400860016019C0000
- stack 0: 0xF0
4710	 187	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x257
4711	 188	JUMP		 	 
- stack 0: 0x6C4
4712	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6C4
4713	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C4
- stack 0: 0x6C4
4714	 259	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x257000001C9000000D4009801DC000101FB00020215FFE400860016019C0000
4715	 25A	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0x257000001C9000000D4009801DC000101FB00020215FFE400860016019C0000
- stack 0: 0xE0
4716	 25C	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x2570000
4717	 25D	PUSH2	FFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x2570000
- stack 0: 0xFFFF
4718	 260	AND		 	 
- stack 1: 0x6C4
- stack 0: 0x0
4719	 261	PUSH1	01	 	 
- stack 2: 0x6C4
- stack 1: 0x0
- stack 0: 0x1
4720	 263	SIGNEXTEND		 	 
- stack 1: 0x6C4
- stack 0: 0x0
4721	 264	POP		 	 
- stack 0: 0x6C4
4722	 265	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
4723	 267	ADD		 	 
- stack 0: 0x6C8
4724	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
4725	 269	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x1C9000000D4009801DC000101FB00020215FFE400860016019C000001B60000
4726	 26A	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x1C9000000D4009801DC000101FB00020215FFE400860016019C000001B60000
- stack 0: 0xF0
4727	 26C	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x1C9
4728	 26D	JUMP		 	 
- stack 0: 0x6C8
4729	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x6C8
4730	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x6C8
- stack 0: 0xF0000000
4731	 1CF	PUSH2	0040	 	 
- stack 2: 0x6C8
- stack 1: 0xF0000000
- stack 0: 0x40
4732	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x6C8
4733	 1D3	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
4734	 1D5	ADD		 	 
- stack 0: 0x6CC
4735	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
4736	 1D7	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0xD4009801DC000101FB00020215FFE400860016019C000001B60000016AFFFF
4737	 1D8	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0xD4009801DC000101FB00020215FFE400860016019C000001B60000016AFFFF
- stack 0: 0xF0
4738	 1DA	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0xD4
4739	 1DB	JUMP		 	 
- stack 0: 0x6CC
4740	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x6CC
4741	 D5	PUSH2	0040	 	 
- stack 1: 0x6CC
- stack 0: 0x40
4742	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x6CC
- stack 0: 0xF0000000
4743	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6CC
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
4744	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6CC
- stack 0: 0xF0000000
4745	 DF	PUSH2	0020	 	 
- stack 2: 0x6CC
- stack 1: 0xF0000000
- stack 0: 0x20
4746	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6CC
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
4747	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6CC
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
4748	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6CC
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
4749	 E9	LT		 	  ;; # bgeu
- stack 1: 0x6CC
- stack 0: 0x1
4750	 EA	ISZERO		 	 
- stack 1: 0x6CC
- stack 0: 0x0
4751	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0xF3
4752	 EE	JUMPI		 	 
- stack 0: 0x6CC
4753	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x6CC
- stack 0: 0x10D
4754	 F2	JUMP		 	 
- stack 0: 0x6CC
4755	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x6CC
4756	 10E	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
4757	 110	ADD		 	 
- stack 0: 0x6D0
4758	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
4759	 112	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x1DC000101FB00020215FFE400860016019C000001B60000016AFFFF02570000
4760	 113	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x1DC000101FB00020215FFE400860016019C000001B60000016AFFFF02570000
- stack 0: 0xF0
4761	 115	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x1DC
4762	 116	JUMP		 	 
- stack 0: 0x6D0
4763	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6D0
4764	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
4765	 1DE	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x1DC000101FB00020215FFE400860016019C000001B60000016AFFFF02570000
4766	 1DF	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x1DC000101FB00020215FFE400860016019C000001B60000016AFFFF02570000
- stack 0: 0xE0
4767	 1E1	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x1DC0001
4768	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
4769	 1E5	AND		 	 
- stack 1: 0x6D0
- stack 0: 0x1
4770	 1E6	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x1
4771	 1E8	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0x1
4772	 1E9	PUSH2	0080	 	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x80
4773	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x1
4774	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x6D0
- stack 0: 0x2
4775	 1EE	PUSH2	0080	 	 
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0x80
4776	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x6D0
4777	 1F2	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
4778	 1F4	ADD		 	 
- stack 0: 0x6D4
4779	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
4780	 1F6	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x1FB00020215FFE400860016019C000001B60000016AFFFF0257000001C90000
4781	 1F7	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x1FB00020215FFE400860016019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xF0
4782	 1F9	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x1FB
4783	 1FA	JUMP		 	 
- stack 0: 0x6D4
4784	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6D4
4785	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
4786	 1FD	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x1FB00020215FFE400860016019C000001B60000016AFFFF0257000001C90000
4787	 1FE	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0x1FB00020215FFE400860016019C000001B60000016AFFFF0257000001C90000
- stack 0: 0xE0
4788	 200	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x1FB0002
4789	 201	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
4790	 204	AND		 	 
- stack 1: 0x6D4
- stack 0: 0x2
4791	 205	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0x1
4792	 207	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0x2
4793	 208	PUSH2	00A0	 	 
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0xA0
4794	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x6D4
4795	 20C	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
4796	 20E	ADD		 	 
- stack 0: 0x6D8
4797	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
4798	 210	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x215FFE400860016019C000001B60000016AFFFF0257000001C9000002570000
4799	 211	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x215FFE400860016019C000001B60000016AFFFF0257000001C9000002570000
- stack 0: 0xF0
4800	 213	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x215
4801	 214	JUMP		 	 
- stack 0: 0x6D8
4802	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6D8
4803	 216	PUSH2	0080	 	 
- stack 1: 0x6D8
- stack 0: 0x80
4804	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x6D8
- stack 0: 0x2
4805	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4806	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D8
- stack 0: 0x2
4807	 220	PUSH2	00A0	 	 
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0xA0
4808	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0x2
4809	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4810	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0x2
4811	 22A	SUB		 	 
- stack 1: 0x6D8
- stack 0: 0x0
4812	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x6D8
- stack 1: 0x0
- stack 0: 0x233
4813	 22E	JUMPI		 	 
- stack 0: 0x6D8
4814	 22F	PUSH2	024D	 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 1: 0x6D8
- stack 0: 0x24D
4815	 232	JUMP		 	 
- stack 0: 0x6D8
4816	 24D	JUMPDEST		 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x6D8
4817	 24E	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
4818	 250	ADD		 	 
- stack 0: 0x6DC
4819	 251	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
4820	 252	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x860016019C000001B60000016AFFFF0257000001C900000257000000D4006C
4821	 253	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x860016019C000001B60000016AFFFF0257000001C900000257000000D4006C
- stack 0: 0xF0
4822	 255	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x86
4823	 256	JUMP		 	 
- stack 0: 0x6DC
4824	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6DC
4825	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
4826	 88	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x860016019C000001B60000016AFFFF0257000001C900000257000000D4006C
4827	 89	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x860016019C000001B60000016AFFFF0257000001C900000257000000D4006C
- stack 0: 0xE0
4828	 8B	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x860016
4829	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x860016
- stack 0: 0xFFFF
4830	 8F	AND		 	 
- stack 1: 0x6DC
- stack 0: 0x16
4831	 90	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0x16
- stack 0: 0x1
4832	 92	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0x16
4833	 93	PUSH2	0380	 	 
- stack 2: 0x6DC
- stack 1: 0x16
- stack 0: 0x380
4834	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x6DC
4835	 97	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
4836	 99	ADD		 	 
- stack 0: 0x6E0
4837	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
4838	 9B	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x19C000001B60000016AFFFF0257000001C900000257000000D4006C01DC0001
4839	 9C	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x19C000001B60000016AFFFF0257000001C900000257000000D4006C01DC0001
- stack 0: 0xF0
4840	 9E	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x19C
4841	 9F	JUMP		 	 
- stack 0: 0x6E0
4842	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6E0
4843	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
4844	 19E	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x19C000001B60000016AFFFF0257000001C900000257000000D4006C01DC0001
4845	 19F	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x19C000001B60000016AFFFF0257000001C900000257000000D4006C01DC0001
- stack 0: 0xE0
4846	 1A1	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x19C0000
4847	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x19C0000
- stack 0: 0xFFFF
4848	 1A5	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4849	 1A6	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
4850	 1A8	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4851	 1A9	PUSH2	0080	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x80
4852	 1AC	MSTORE		 	  ;; # store to x4
- stack 0: 0x6E0
4853	 1AD	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
4854	 1AF	ADD		 	 
- stack 0: 0x6E4
4855	 1B0	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
4856	 1B1	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x1B60000016AFFFF0257000001C900000257000000D4006C01DC000101FB0002
4857	 1B2	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x1B60000016AFFFF0257000001C900000257000000D4006C01DC000101FB0002
- stack 0: 0xF0
4858	 1B4	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x1B6
4859	 1B5	JUMP		 	 
- stack 0: 0x6E4
4860	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x6E4
4861	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x6E4
- stack 0: 0xF0000000
4862	 1BC	PUSH2	0020	 	 
- stack 2: 0x6E4
- stack 1: 0xF0000000
- stack 0: 0x20
4863	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x6E4
4864	 1C0	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4865	 1C2	ADD		 	 
- stack 0: 0x6E8
4866	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
4867	 1C4	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x16AFFFF0257000001C900000257000000D4006C01DC000101FB00020215FFE0
4868	 1C5	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x16AFFFF0257000001C900000257000000D4006C01DC000101FB00020215FFE0
- stack 0: 0xF0
4869	 1C7	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x16A
4870	 1C8	JUMP		 	 
- stack 0: 0x6E8
4871	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x6E8
4872	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
4873	 16C	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x16AFFFF0257000001C900000257000000D4006C01DC000101FB00020215FFE0
4874	 16D	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x16AFFFF0257000001C900000257000000D4006C01DC000101FB00020215FFE0
- stack 0: 0xE0
4875	 16F	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x16AFFFF
4876	 170	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
4877	 173	AND		 	 
- stack 1: 0x6E8
- stack 0: 0xFFFF
4878	 174	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0xFFFF
- stack 0: 0x1
4879	 176	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4880	 177	PUSH2	0020	 	 
- stack 2: 0x6E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4881	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x6E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
4882	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x6E8
- stack 0: 0xEFFFFFFF
4883	 17C	PUSH2	0020	 	 
- stack 2: 0x6E8
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
4884	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x6E8
4885	 180	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4886	 182	ADD		 	 
- stack 0: 0x6EC
4887	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4888	 184	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x257000001C900000257000000D4006C01DC000101FB00020215FFE000860017
4889	 185	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x257000001C900000257000000D4006C01DC000101FB00020215FFE000860017
- stack 0: 0xF0
4890	 187	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x257
4891	 188	JUMP		 	 
- stack 0: 0x6EC
4892	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6EC
4893	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
4894	 259	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x257000001C900000257000000D4006C01DC000101FB00020215FFE000860017
4895	 25A	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x257000001C900000257000000D4006C01DC000101FB00020215FFE000860017
- stack 0: 0xE0
4896	 25C	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x2570000
4897	 25D	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x2570000
- stack 0: 0xFFFF
4898	 260	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x0
4899	 261	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x0
- stack 0: 0x1
4900	 263	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x0
4901	 264	POP		 	 
- stack 0: 0x6EC
4902	 265	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
4903	 267	ADD		 	 
- stack 0: 0x6F0
4904	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
4905	 269	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x1C900000257000000D4006C01DC000101FB00020215FFE000860017019C0000
4906	 26A	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x1C900000257000000D4006C01DC000101FB00020215FFE000860017019C0000
- stack 0: 0xF0
4907	 26C	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x1C9
4908	 26D	JUMP		 	 
- stack 0: 0x6F0
4909	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x6F0
4910	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x6F0
- stack 0: 0xF0000000
4911	 1CF	PUSH2	0040	 	 
- stack 2: 0x6F0
- stack 1: 0xF0000000
- stack 0: 0x40
4912	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x6F0
4913	 1D3	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
4914	 1D5	ADD		 	 
- stack 0: 0x6F4
4915	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
4916	 1D7	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x257000000D4006C01DC000101FB00020215FFE000860017019C000001B60000
4917	 1D8	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x257000000D4006C01DC000101FB00020215FFE000860017019C000001B60000
- stack 0: 0xF0
4918	 1DA	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x257
4919	 1DB	JUMP		 	 
- stack 0: 0x6F4
4920	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6F4
4921	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
4922	 259	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x257000000D4006C01DC000101FB00020215FFE000860017019C000001B60000
4923	 25A	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x257000000D4006C01DC000101FB00020215FFE000860017019C000001B60000
- stack 0: 0xE0
4924	 25C	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x2570000
4925	 25D	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x2570000
- stack 0: 0xFFFF
4926	 260	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x0
4927	 261	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x0
- stack 0: 0x1
4928	 263	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x0
4929	 264	POP		 	 
- stack 0: 0x6F4
4930	 265	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
4931	 267	ADD		 	 
- stack 0: 0x6F8
4932	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
4933	 269	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0xD4006C01DC000101FB00020215FFE000860017019C000001B60000016AFFFF
4934	 26A	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0xD4006C01DC000101FB00020215FFE000860017019C000001B60000016AFFFF
- stack 0: 0xF0
4935	 26C	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0xD4
4936	 26D	JUMP		 	 
- stack 0: 0x6F8
4937	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x6F8
4938	 D5	PUSH2	0040	 	 
- stack 1: 0x6F8
- stack 0: 0x40
4939	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x6F8
- stack 0: 0xF0000000
4940	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F8
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
4941	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F8
- stack 0: 0xF0000000
4942	 DF	PUSH2	0020	 	 
- stack 2: 0x6F8
- stack 1: 0xF0000000
- stack 0: 0x20
4943	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6F8
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
4944	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6F8
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
4945	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6F8
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
4946	 E9	LT		 	  ;; # bgeu
- stack 1: 0x6F8
- stack 0: 0x1
4947	 EA	ISZERO		 	 
- stack 1: 0x6F8
- stack 0: 0x0
4948	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x6F8
- stack 1: 0x0
- stack 0: 0xF3
4949	 EE	JUMPI		 	 
- stack 0: 0x6F8
4950	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x6F8
- stack 0: 0x10D
4951	 F2	JUMP		 	 
- stack 0: 0x6F8
4952	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x6F8
4953	 10E	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
4954	 110	ADD		 	 
- stack 0: 0x6FC
4955	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
4956	 112	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x1DC000101FB00020215FFE000860017019C000001B60000016AFFFF02570000
4957	 113	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x1DC000101FB00020215FFE000860017019C000001B60000016AFFFF02570000
- stack 0: 0xF0
4958	 115	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x1DC
4959	 116	JUMP		 	 
- stack 0: 0x6FC
4960	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6FC
4961	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6FC
- stack 0: 0x6FC
4962	 1DE	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x1DC000101FB00020215FFE000860017019C000001B60000016AFFFF02570000
4963	 1DF	PUSH1	E0	 	 
- stack 2: 0x6FC
- stack 1: 0x1DC000101FB00020215FFE000860017019C000001B60000016AFFFF02570000
- stack 0: 0xE0
4964	 1E1	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x1DC0001
4965	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
4966	 1E5	AND		 	 
- stack 1: 0x6FC
- stack 0: 0x1
4967	 1E6	PUSH1	01	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x1
4968	 1E8	SIGNEXTEND		 	 
- stack 1: 0x6FC
- stack 0: 0x1
4969	 1E9	PUSH2	0080	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x80
4970	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x0
4971	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x6FC
- stack 0: 0x1
4972	 1EE	PUSH2	0080	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x80
4973	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x6FC
4974	 1F2	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
4975	 1F4	ADD		 	 
- stack 0: 0x700
4976	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
4977	 1F6	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x1FB00020215FFE000860017019C000001B60000016AFFFF0257000002570000
4978	 1F7	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x1FB00020215FFE000860017019C000001B60000016AFFFF0257000002570000
- stack 0: 0xF0
4979	 1F9	SHR		 	 
- stack 1: 0x700
- stack 0: 0x1FB
4980	 1FA	JUMP		 	 
- stack 0: 0x700
4981	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x700
4982	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x700
- stack 0: 0x700
4983	 1FD	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x1FB00020215FFE000860017019C000001B60000016AFFFF0257000002570000
4984	 1FE	PUSH1	E0	 	 
- stack 2: 0x700
- stack 1: 0x1FB00020215FFE000860017019C000001B60000016AFFFF0257000002570000
- stack 0: 0xE0
4985	 200	SHR		 	 
- stack 1: 0x700
- stack 0: 0x1FB0002
4986	 201	PUSH2	FFFF	 	 
- stack 2: 0x700
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
4987	 204	AND		 	 
- stack 1: 0x700
- stack 0: 0x2
4988	 205	PUSH1	01	 	 
- stack 2: 0x700
- stack 1: 0x2
- stack 0: 0x1
4989	 207	SIGNEXTEND		 	 
- stack 1: 0x700
- stack 0: 0x2
4990	 208	PUSH2	00A0	 	 
- stack 2: 0x700
- stack 1: 0x2
- stack 0: 0xA0
4991	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x700
4992	 20C	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
4993	 20E	ADD		 	 
- stack 0: 0x704
4994	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
4995	 210	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x215FFE000860017019C000001B60000016AFFFF025700000257000001C90000
4996	 211	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x215FFE000860017019C000001B60000016AFFFF025700000257000001C90000
- stack 0: 0xF0
4997	 213	SHR		 	 
- stack 1: 0x704
- stack 0: 0x215
4998	 214	JUMP		 	 
- stack 0: 0x704
4999	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x704
5000	 216	PUSH2	0080	 	 
- stack 1: 0x704
- stack 0: 0x80
5001	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x704
- stack 0: 0x1
5002	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5003	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x704
- stack 0: 0x1
5004	 220	PUSH2	00A0	 	 
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0xA0
5005	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0x2
5006	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x704
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5007	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0x2
5008	 22A	SUB		 	 
- stack 1: 0x704
- stack 0: 0x1
5009	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0x233
5010	 22E	JUMPI		 	 
- stack 0: 0x704
5011	 233	JUMPDEST		 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x704
5012	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x704
- stack 0: 0x704
5013	 235	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x215FFE000860017019C000001B60000016AFFFF025700000257000001C90000
5014	 236	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0x215FFE000860017019C000001B60000016AFFFF025700000257000001C90000
- stack 0: 0xE0
5015	 238	SHR		 	 
- stack 1: 0x704
- stack 0: 0x215FFE0
5016	 239	PUSH2	FFFF	 	 
- stack 2: 0x704
- stack 1: 0x215FFE0
- stack 0: 0xFFFF
5017	 23C	AND		 	 
- stack 1: 0x704
- stack 0: 0xFFE0
5018	 23D	PUSH1	01	 	 
- stack 2: 0x704
- stack 1: 0xFFE0
- stack 0: 0x1
5019	 23F	SIGNEXTEND		 	 
- stack 1: 0x704
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
5020	 240	ADD		 	 
- stack 0: 0x6E4
5021	 241	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFF
5022	 246	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6E4
5023	 247	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
5024	 248	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x1B60000016AFFFF0257000001C900000257000000D4006C01DC000101FB0002
5025	 249	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x1B60000016AFFFF0257000001C900000257000000D4006C01DC000101FB0002
- stack 0: 0xF0
5026	 24B	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x1B6
5027	 24C	JUMP		 	 
- stack 0: 0x6E4
5028	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x6E4
5029	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x6E4
- stack 0: 0xF0000000
5030	 1BC	PUSH2	0020	 	 
- stack 2: 0x6E4
- stack 1: 0xF0000000
- stack 0: 0x20
5031	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x6E4
5032	 1C0	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
5033	 1C2	ADD		 	 
- stack 0: 0x6E8
5034	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
5035	 1C4	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x16AFFFF0257000001C900000257000000D4006C01DC000101FB00020215FFE0
5036	 1C5	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x16AFFFF0257000001C900000257000000D4006C01DC000101FB00020215FFE0
- stack 0: 0xF0
5037	 1C7	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x16A
5038	 1C8	JUMP		 	 
- stack 0: 0x6E8
5039	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x6E8
5040	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
5041	 16C	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x16AFFFF0257000001C900000257000000D4006C01DC000101FB00020215FFE0
5042	 16D	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x16AFFFF0257000001C900000257000000D4006C01DC000101FB00020215FFE0
- stack 0: 0xE0
5043	 16F	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x16AFFFF
5044	 170	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
5045	 173	AND		 	 
- stack 1: 0x6E8
- stack 0: 0xFFFF
5046	 174	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0xFFFF
- stack 0: 0x1
5047	 176	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5048	 177	PUSH2	0020	 	 
- stack 2: 0x6E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
5049	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x6E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
5050	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x6E8
- stack 0: 0xEFFFFFFF
5051	 17C	PUSH2	0020	 	 
- stack 2: 0x6E8
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
5052	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x6E8
5053	 180	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
5054	 182	ADD		 	 
- stack 0: 0x6EC
5055	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
5056	 184	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x257000001C900000257000000D4006C01DC000101FB00020215FFE000860017
5057	 185	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x257000001C900000257000000D4006C01DC000101FB00020215FFE000860017
- stack 0: 0xF0
5058	 187	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x257
5059	 188	JUMP		 	 
- stack 0: 0x6EC
5060	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6EC
5061	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
5062	 259	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x257000001C900000257000000D4006C01DC000101FB00020215FFE000860017
5063	 25A	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x257000001C900000257000000D4006C01DC000101FB00020215FFE000860017
- stack 0: 0xE0
5064	 25C	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x2570000
5065	 25D	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x2570000
- stack 0: 0xFFFF
5066	 260	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x0
5067	 261	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x0
- stack 0: 0x1
5068	 263	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x0
5069	 264	POP		 	 
- stack 0: 0x6EC
5070	 265	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
5071	 267	ADD		 	 
- stack 0: 0x6F0
5072	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
5073	 269	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x1C900000257000000D4006C01DC000101FB00020215FFE000860017019C0000
5074	 26A	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x1C900000257000000D4006C01DC000101FB00020215FFE000860017019C0000
- stack 0: 0xF0
5075	 26C	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x1C9
5076	 26D	JUMP		 	 
- stack 0: 0x6F0
5077	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x6F0
5078	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x6F0
- stack 0: 0xF0000000
5079	 1CF	PUSH2	0040	 	 
- stack 2: 0x6F0
- stack 1: 0xF0000000
- stack 0: 0x40
5080	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x6F0
5081	 1D3	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
5082	 1D5	ADD		 	 
- stack 0: 0x6F4
5083	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
5084	 1D7	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x257000000D4006C01DC000101FB00020215FFE000860017019C000001B60000
5085	 1D8	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x257000000D4006C01DC000101FB00020215FFE000860017019C000001B60000
- stack 0: 0xF0
5086	 1DA	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x257
5087	 1DB	JUMP		 	 
- stack 0: 0x6F4
5088	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6F4
5089	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
5090	 259	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x257000000D4006C01DC000101FB00020215FFE000860017019C000001B60000
5091	 25A	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x257000000D4006C01DC000101FB00020215FFE000860017019C000001B60000
- stack 0: 0xE0
5092	 25C	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x2570000
5093	 25D	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x2570000
- stack 0: 0xFFFF
5094	 260	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x0
5095	 261	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x0
- stack 0: 0x1
5096	 263	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x0
5097	 264	POP		 	 
- stack 0: 0x6F4
5098	 265	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
5099	 267	ADD		 	 
- stack 0: 0x6F8
5100	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
5101	 269	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0xD4006C01DC000101FB00020215FFE000860017019C000001B60000016AFFFF
5102	 26A	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0xD4006C01DC000101FB00020215FFE000860017019C000001B60000016AFFFF
- stack 0: 0xF0
5103	 26C	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0xD4
5104	 26D	JUMP		 	 
- stack 0: 0x6F8
5105	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x6F8
5106	 D5	PUSH2	0040	 	 
- stack 1: 0x6F8
- stack 0: 0x40
5107	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x6F8
- stack 0: 0xF0000000
5108	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F8
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
5109	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F8
- stack 0: 0xF0000000
5110	 DF	PUSH2	0020	 	 
- stack 2: 0x6F8
- stack 1: 0xF0000000
- stack 0: 0x20
5111	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6F8
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
5112	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6F8
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
5113	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6F8
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
5114	 E9	LT		 	  ;; # bgeu
- stack 1: 0x6F8
- stack 0: 0x1
5115	 EA	ISZERO		 	 
- stack 1: 0x6F8
- stack 0: 0x0
5116	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x6F8
- stack 1: 0x0
- stack 0: 0xF3
5117	 EE	JUMPI		 	 
- stack 0: 0x6F8
5118	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x6F8
- stack 0: 0x10D
5119	 F2	JUMP		 	 
- stack 0: 0x6F8
5120	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x6F8
5121	 10E	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
5122	 110	ADD		 	 
- stack 0: 0x6FC
5123	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
5124	 112	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x1DC000101FB00020215FFE000860017019C000001B60000016AFFFF02570000
5125	 113	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x1DC000101FB00020215FFE000860017019C000001B60000016AFFFF02570000
- stack 0: 0xF0
5126	 115	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x1DC
5127	 116	JUMP		 	 
- stack 0: 0x6FC
5128	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6FC
5129	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6FC
- stack 0: 0x6FC
5130	 1DE	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x1DC000101FB00020215FFE000860017019C000001B60000016AFFFF02570000
5131	 1DF	PUSH1	E0	 	 
- stack 2: 0x6FC
- stack 1: 0x1DC000101FB00020215FFE000860017019C000001B60000016AFFFF02570000
- stack 0: 0xE0
5132	 1E1	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x1DC0001
5133	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
5134	 1E5	AND		 	 
- stack 1: 0x6FC
- stack 0: 0x1
5135	 1E6	PUSH1	01	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x1
5136	 1E8	SIGNEXTEND		 	 
- stack 1: 0x6FC
- stack 0: 0x1
5137	 1E9	PUSH2	0080	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x80
5138	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x1
5139	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x6FC
- stack 0: 0x2
5140	 1EE	PUSH2	0080	 	 
- stack 2: 0x6FC
- stack 1: 0x2
- stack 0: 0x80
5141	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x6FC
5142	 1F2	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
5143	 1F4	ADD		 	 
- stack 0: 0x700
5144	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
5145	 1F6	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x1FB00020215FFE000860017019C000001B60000016AFFFF0257000002570000
5146	 1F7	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x1FB00020215FFE000860017019C000001B60000016AFFFF0257000002570000
- stack 0: 0xF0
5147	 1F9	SHR		 	 
- stack 1: 0x700
- stack 0: 0x1FB
5148	 1FA	JUMP		 	 
- stack 0: 0x700
5149	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x700
5150	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x700
- stack 0: 0x700
5151	 1FD	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x1FB00020215FFE000860017019C000001B60000016AFFFF0257000002570000
5152	 1FE	PUSH1	E0	 	 
- stack 2: 0x700
- stack 1: 0x1FB00020215FFE000860017019C000001B60000016AFFFF0257000002570000
- stack 0: 0xE0
5153	 200	SHR		 	 
- stack 1: 0x700
- stack 0: 0x1FB0002
5154	 201	PUSH2	FFFF	 	 
- stack 2: 0x700
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
5155	 204	AND		 	 
- stack 1: 0x700
- stack 0: 0x2
5156	 205	PUSH1	01	 	 
- stack 2: 0x700
- stack 1: 0x2
- stack 0: 0x1
5157	 207	SIGNEXTEND		 	 
- stack 1: 0x700
- stack 0: 0x2
5158	 208	PUSH2	00A0	 	 
- stack 2: 0x700
- stack 1: 0x2
- stack 0: 0xA0
5159	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x700
5160	 20C	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
5161	 20E	ADD		 	 
- stack 0: 0x704
5162	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
5163	 210	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x215FFE000860017019C000001B60000016AFFFF025700000257000001C90000
5164	 211	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x215FFE000860017019C000001B60000016AFFFF025700000257000001C90000
- stack 0: 0xF0
5165	 213	SHR		 	 
- stack 1: 0x704
- stack 0: 0x215
5166	 214	JUMP		 	 
- stack 0: 0x704
5167	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x704
5168	 216	PUSH2	0080	 	 
- stack 1: 0x704
- stack 0: 0x80
5169	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x704
- stack 0: 0x2
5170	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x704
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5171	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x704
- stack 0: 0x2
5172	 220	PUSH2	00A0	 	 
- stack 2: 0x704
- stack 1: 0x2
- stack 0: 0xA0
5173	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x704
- stack 1: 0x2
- stack 0: 0x2
5174	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x704
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5175	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x704
- stack 1: 0x2
- stack 0: 0x2
5176	 22A	SUB		 	 
- stack 1: 0x704
- stack 0: 0x0
5177	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x704
- stack 1: 0x0
- stack 0: 0x233
5178	 22E	JUMPI		 	 
- stack 0: 0x704
5179	 22F	PUSH2	024D	 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 1: 0x704
- stack 0: 0x24D
5180	 232	JUMP		 	 
- stack 0: 0x704
5181	 24D	JUMPDEST		 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x704
5182	 24E	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
5183	 250	ADD		 	 
- stack 0: 0x708
5184	 251	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
5185	 252	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x860017019C000001B60000016AFFFF025700000257000001C9000000D40040
5186	 253	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x860017019C000001B60000016AFFFF025700000257000001C9000000D40040
- stack 0: 0xF0
5187	 255	SHR		 	 
- stack 1: 0x708
- stack 0: 0x86
5188	 256	JUMP		 	 
- stack 0: 0x708
5189	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x708
5190	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x708
- stack 0: 0x708
5191	 88	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x860017019C000001B60000016AFFFF025700000257000001C9000000D40040
5192	 89	PUSH1	E0	 	 
- stack 2: 0x708
- stack 1: 0x860017019C000001B60000016AFFFF025700000257000001C9000000D40040
- stack 0: 0xE0
5193	 8B	SHR		 	 
- stack 1: 0x708
- stack 0: 0x860017
5194	 8C	PUSH2	FFFF	 	 
- stack 2: 0x708
- stack 1: 0x860017
- stack 0: 0xFFFF
5195	 8F	AND		 	 
- stack 1: 0x708
- stack 0: 0x17
5196	 90	PUSH1	01	 	 
- stack 2: 0x708
- stack 1: 0x17
- stack 0: 0x1
5197	 92	SIGNEXTEND		 	 
- stack 1: 0x708
- stack 0: 0x17
5198	 93	PUSH2	0380	 	 
- stack 2: 0x708
- stack 1: 0x17
- stack 0: 0x380
5199	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x708
5200	 97	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
5201	 99	ADD		 	 
- stack 0: 0x70C
5202	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
5203	 9B	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x19C000001B60000016AFFFF025700000257000001C9000000D4004001DC0001
5204	 9C	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0x19C000001B60000016AFFFF025700000257000001C9000000D4004001DC0001
- stack 0: 0xF0
5205	 9E	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x19C
5206	 9F	JUMP		 	 
- stack 0: 0x70C
5207	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x70C
5208	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
5209	 19E	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x19C000001B60000016AFFFF025700000257000001C9000000D4004001DC0001
5210	 19F	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0x19C000001B60000016AFFFF025700000257000001C9000000D4004001DC0001
- stack 0: 0xE0
5211	 1A1	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x19C0000
5212	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0x19C0000
- stack 0: 0xFFFF
5213	 1A5	AND		 	 
- stack 1: 0x70C
- stack 0: 0x0
5214	 1A6	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0x0
- stack 0: 0x1
5215	 1A8	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0x0
5216	 1A9	PUSH2	0080	 	 
- stack 2: 0x70C
- stack 1: 0x0
- stack 0: 0x80
5217	 1AC	MSTORE		 	  ;; # store to x4
- stack 0: 0x70C
5218	 1AD	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
5219	 1AF	ADD		 	 
- stack 0: 0x710
5220	 1B0	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
5221	 1B1	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x1B60000016AFFFF025700000257000001C9000000D4004001DC000101FB0002
5222	 1B2	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0x1B60000016AFFFF025700000257000001C9000000D4004001DC000101FB0002
- stack 0: 0xF0
5223	 1B4	SHR		 	 
- stack 1: 0x710
- stack 0: 0x1B6
5224	 1B5	JUMP		 	 
- stack 0: 0x710
5225	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x710
5226	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x710
- stack 0: 0xF0000000
5227	 1BC	PUSH2	0020	 	 
- stack 2: 0x710
- stack 1: 0xF0000000
- stack 0: 0x20
5228	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x710
5229	 1C0	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
5230	 1C2	ADD		 	 
- stack 0: 0x714
5231	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
5232	 1C4	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x16AFFFF025700000257000001C9000000D4004001DC000101FB00020215FFE0
5233	 1C5	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x16AFFFF025700000257000001C9000000D4004001DC000101FB00020215FFE0
- stack 0: 0xF0
5234	 1C7	SHR		 	 
- stack 1: 0x714
- stack 0: 0x16A
5235	 1C8	JUMP		 	 
- stack 0: 0x714
5236	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x714
5237	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
5238	 16C	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x16AFFFF025700000257000001C9000000D4004001DC000101FB00020215FFE0
5239	 16D	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x16AFFFF025700000257000001C9000000D4004001DC000101FB00020215FFE0
- stack 0: 0xE0
5240	 16F	SHR		 	 
- stack 1: 0x714
- stack 0: 0x16AFFFF
5241	 170	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
5242	 173	AND		 	 
- stack 1: 0x714
- stack 0: 0xFFFF
5243	 174	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0xFFFF
- stack 0: 0x1
5244	 176	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5245	 177	PUSH2	0020	 	 
- stack 2: 0x714
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
5246	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x714
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
5247	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x714
- stack 0: 0xEFFFFFFF
5248	 17C	PUSH2	0020	 	 
- stack 2: 0x714
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
5249	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x714
5250	 180	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
5251	 182	ADD		 	 
- stack 0: 0x718
5252	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
5253	 184	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x25700000257000001C9000000D4004001DC000101FB00020215FFE000A00001
5254	 185	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x25700000257000001C9000000D4004001DC000101FB00020215FFE000A00001
- stack 0: 0xF0
5255	 187	SHR		 	 
- stack 1: 0x718
- stack 0: 0x257
5256	 188	JUMP		 	 
- stack 0: 0x718
5257	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x718
5258	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
5259	 259	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x25700000257000001C9000000D4004001DC000101FB00020215FFE000A00001
5260	 25A	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x25700000257000001C9000000D4004001DC000101FB00020215FFE000A00001
- stack 0: 0xE0
5261	 25C	SHR		 	 
- stack 1: 0x718
- stack 0: 0x2570000
5262	 25D	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x2570000
- stack 0: 0xFFFF
5263	 260	AND		 	 
- stack 1: 0x718
- stack 0: 0x0
5264	 261	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x0
- stack 0: 0x1
5265	 263	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x0
5266	 264	POP		 	 
- stack 0: 0x718
5267	 265	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
5268	 267	ADD		 	 
- stack 0: 0x71C
5269	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
5270	 269	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x257000001C9000000D4004001DC000101FB00020215FFE000A00001026E0014
5271	 26A	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x257000001C9000000D4004001DC000101FB00020215FFE000A00001026E0014
- stack 0: 0xF0
5272	 26C	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x257
5273	 26D	JUMP		 	 
- stack 0: 0x71C
5274	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x71C
5275	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
5276	 259	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x257000001C9000000D4004001DC000101FB00020215FFE000A00001026E0014
5277	 25A	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x257000001C9000000D4004001DC000101FB00020215FFE000A00001026E0014
- stack 0: 0xE0
5278	 25C	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x2570000
5279	 25D	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x2570000
- stack 0: 0xFFFF
5280	 260	AND		 	 
- stack 1: 0x71C
- stack 0: 0x0
5281	 261	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0x0
- stack 0: 0x1
5282	 263	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0x0
5283	 264	POP		 	 
- stack 0: 0x71C
5284	 265	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
5285	 267	ADD		 	 
- stack 0: 0x720
5286	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
5287	 269	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x1C9000000D4004001DC000101FB00020215FFE000A00001026E0014016A0001
5288	 26A	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0x1C9000000D4004001DC000101FB00020215FFE000A00001026E0014016A0001
- stack 0: 0xF0
5289	 26C	SHR		 	 
- stack 1: 0x720
- stack 0: 0x1C9
5290	 26D	JUMP		 	 
- stack 0: 0x720
5291	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x720
5292	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x720
- stack 0: 0xF0000000
5293	 1CF	PUSH2	0040	 	 
- stack 2: 0x720
- stack 1: 0xF0000000
- stack 0: 0x40
5294	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x720
5295	 1D3	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
5296	 1D5	ADD		 	 
- stack 0: 0x724
5297	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
5298	 1D7	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0xD4004001DC000101FB00020215FFE000A00001026E0014016A0001016A0001
5299	 1D8	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0xD4004001DC000101FB00020215FFE000A00001026E0014016A0001016A0001
- stack 0: 0xF0
5300	 1DA	SHR		 	 
- stack 1: 0x724
- stack 0: 0xD4
5301	 1DB	JUMP		 	 
- stack 0: 0x724
5302	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x724
5303	 D5	PUSH2	0040	 	 
- stack 1: 0x724
- stack 0: 0x40
5304	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x724
- stack 0: 0xF0000000
5305	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x724
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
5306	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x724
- stack 0: 0xF0000000
5307	 DF	PUSH2	0020	 	 
- stack 2: 0x724
- stack 1: 0xF0000000
- stack 0: 0x20
5308	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x724
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
5309	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x724
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
5310	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x724
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
5311	 E9	LT		 	  ;; # bgeu
- stack 1: 0x724
- stack 0: 0x1
5312	 EA	ISZERO		 	 
- stack 1: 0x724
- stack 0: 0x0
5313	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x724
- stack 1: 0x0
- stack 0: 0xF3
5314	 EE	JUMPI		 	 
- stack 0: 0x724
5315	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x724
- stack 0: 0x10D
5316	 F2	JUMP		 	 
- stack 0: 0x724
5317	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x724
5318	 10E	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
5319	 110	ADD		 	 
- stack 0: 0x728
5320	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
5321	 112	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x1DC000101FB00020215FFE000A00001026E0014016A0001016A0001016A0001
5322	 113	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x1DC000101FB00020215FFE000A00001026E0014016A0001016A0001016A0001
- stack 0: 0xF0
5323	 115	SHR		 	 
- stack 1: 0x728
- stack 0: 0x1DC
5324	 116	JUMP		 	 
- stack 0: 0x728
5325	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x728
5326	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x728
- stack 0: 0x728
5327	 1DE	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x1DC000101FB00020215FFE000A00001026E0014016A0001016A0001016A0001
5328	 1DF	PUSH1	E0	 	 
- stack 2: 0x728
- stack 1: 0x1DC000101FB00020215FFE000A00001026E0014016A0001016A0001016A0001
- stack 0: 0xE0
5329	 1E1	SHR		 	 
- stack 1: 0x728
- stack 0: 0x1DC0001
5330	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x728
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
5331	 1E5	AND		 	 
- stack 1: 0x728
- stack 0: 0x1
5332	 1E6	PUSH1	01	 	 
- stack 2: 0x728
- stack 1: 0x1
- stack 0: 0x1
5333	 1E8	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0x1
5334	 1E9	PUSH2	0080	 	 
- stack 2: 0x728
- stack 1: 0x1
- stack 0: 0x80
5335	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x728
- stack 1: 0x1
- stack 0: 0x0
5336	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x728
- stack 0: 0x1
5337	 1EE	PUSH2	0080	 	 
- stack 2: 0x728
- stack 1: 0x1
- stack 0: 0x80
5338	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x728
5339	 1F2	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
5340	 1F4	ADD		 	 
- stack 0: 0x72C
5341	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
5342	 1F6	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x1FB00020215FFE000A00001026E0014016A0001016A0001016A0001016A0001
5343	 1F7	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x1FB00020215FFE000A00001026E0014016A0001016A0001016A0001016A0001
- stack 0: 0xF0
5344	 1F9	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x1FB
5345	 1FA	JUMP		 	 
- stack 0: 0x72C
5346	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x72C
5347	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
5348	 1FD	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x1FB00020215FFE000A00001026E0014016A0001016A0001016A0001016A0001
5349	 1FE	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0x1FB00020215FFE000A00001026E0014016A0001016A0001016A0001016A0001
- stack 0: 0xE0
5350	 200	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x1FB0002
5351	 201	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
5352	 204	AND		 	 
- stack 1: 0x72C
- stack 0: 0x2
5353	 205	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0x1
5354	 207	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x2
5355	 208	PUSH2	00A0	 	 
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0xA0
5356	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x72C
5357	 20C	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
5358	 20E	ADD		 	 
- stack 0: 0x730
5359	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
5360	 210	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x215FFE000A00001026E0014016A0001016A0001016A0001016A0001016A0001
5361	 211	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x215FFE000A00001026E0014016A0001016A0001016A0001016A0001016A0001
- stack 0: 0xF0
5362	 213	SHR		 	 
- stack 1: 0x730
- stack 0: 0x215
5363	 214	JUMP		 	 
- stack 0: 0x730
5364	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x730
5365	 216	PUSH2	0080	 	 
- stack 1: 0x730
- stack 0: 0x80
5366	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x730
- stack 0: 0x1
5367	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x730
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5368	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x730
- stack 0: 0x1
5369	 220	PUSH2	00A0	 	 
- stack 2: 0x730
- stack 1: 0x1
- stack 0: 0xA0
5370	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x730
- stack 1: 0x1
- stack 0: 0x2
5371	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x730
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5372	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x730
- stack 1: 0x1
- stack 0: 0x2
5373	 22A	SUB		 	 
- stack 1: 0x730
- stack 0: 0x1
5374	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x730
- stack 1: 0x1
- stack 0: 0x233
5375	 22E	JUMPI		 	 
- stack 0: 0x730
5376	 233	JUMPDEST		 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x730
5377	 234	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x730
- stack 0: 0x730
5378	 235	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x215FFE000A00001026E0014016A0001016A0001016A0001016A0001016A0001
5379	 236	PUSH1	E0	 	 
- stack 2: 0x730
- stack 1: 0x215FFE000A00001026E0014016A0001016A0001016A0001016A0001016A0001
- stack 0: 0xE0
5380	 238	SHR		 	 
- stack 1: 0x730
- stack 0: 0x215FFE0
5381	 239	PUSH2	FFFF	 	 
- stack 2: 0x730
- stack 1: 0x215FFE0
- stack 0: 0xFFFF
5382	 23C	AND		 	 
- stack 1: 0x730
- stack 0: 0xFFE0
5383	 23D	PUSH1	01	 	 
- stack 2: 0x730
- stack 1: 0xFFE0
- stack 0: 0x1
5384	 23F	SIGNEXTEND		 	 
- stack 1: 0x730
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
5385	 240	ADD		 	 
- stack 0: 0x710
5386	 241	PUSH4	FFFFFFFF	 	 
- stack 1: 0x710
- stack 0: 0xFFFFFFFF
5387	 246	AND		 	  ;; # mask to 32 bits
- stack 0: 0x710
5388	 247	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
5389	 248	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x1B60000016AFFFF025700000257000001C9000000D4004001DC000101FB0002
5390	 249	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0x1B60000016AFFFF025700000257000001C9000000D4004001DC000101FB0002
- stack 0: 0xF0
5391	 24B	SHR		 	 
- stack 1: 0x710
- stack 0: 0x1B6
5392	 24C	JUMP		 	 
- stack 0: 0x710
5393	 1B6	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x710
5394	 1B7	PUSH4	f0000000	 	 
- stack 1: 0x710
- stack 0: 0xF0000000
5395	 1BC	PUSH2	0020	 	 
- stack 2: 0x710
- stack 1: 0xF0000000
- stack 0: 0x20
5396	 1BF	MSTORE		 	  ;; # store to x1
- stack 0: 0x710
5397	 1C0	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
5398	 1C2	ADD		 	 
- stack 0: 0x714
5399	 1C3	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
5400	 1C4	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x16AFFFF025700000257000001C9000000D4004001DC000101FB00020215FFE0
5401	 1C5	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x16AFFFF025700000257000001C9000000D4004001DC000101FB00020215FFE0
- stack 0: 0xF0
5402	 1C7	SHR		 	 
- stack 1: 0x714
- stack 0: 0x16A
5403	 1C8	JUMP		 	 
- stack 0: 0x714
5404	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x714
5405	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
5406	 16C	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x16AFFFF025700000257000001C9000000D4004001DC000101FB00020215FFE0
5407	 16D	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x16AFFFF025700000257000001C9000000D4004001DC000101FB00020215FFE0
- stack 0: 0xE0
5408	 16F	SHR		 	 
- stack 1: 0x714
- stack 0: 0x16AFFFF
5409	 170	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x16AFFFF
- stack 0: 0xFFFF
5410	 173	AND		 	 
- stack 1: 0x714
- stack 0: 0xFFFF
5411	 174	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0xFFFF
- stack 0: 0x1
5412	 176	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5413	 177	PUSH2	0020	 	 
- stack 2: 0x714
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
5414	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x714
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
5415	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x714
- stack 0: 0xEFFFFFFF
5416	 17C	PUSH2	0020	 	 
- stack 2: 0x714
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
5417	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x714
5418	 180	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
5419	 182	ADD		 	 
- stack 0: 0x718
5420	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
5421	 184	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x25700000257000001C9000000D4004001DC000101FB00020215FFE000A00001
5422	 185	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x25700000257000001C9000000D4004001DC000101FB00020215FFE000A00001
- stack 0: 0xF0
5423	 187	SHR		 	 
- stack 1: 0x718
- stack 0: 0x257
5424	 188	JUMP		 	 
- stack 0: 0x718
5425	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x718
5426	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
5427	 259	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x25700000257000001C9000000D4004001DC000101FB00020215FFE000A00001
5428	 25A	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x25700000257000001C9000000D4004001DC000101FB00020215FFE000A00001
- stack 0: 0xE0
5429	 25C	SHR		 	 
- stack 1: 0x718
- stack 0: 0x2570000
5430	 25D	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x2570000
- stack 0: 0xFFFF
5431	 260	AND		 	 
- stack 1: 0x718
- stack 0: 0x0
5432	 261	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x0
- stack 0: 0x1
5433	 263	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x0
5434	 264	POP		 	 
- stack 0: 0x718
5435	 265	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
5436	 267	ADD		 	 
- stack 0: 0x71C
5437	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
5438	 269	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x257000001C9000000D4004001DC000101FB00020215FFE000A00001026E0014
5439	 26A	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x257000001C9000000D4004001DC000101FB00020215FFE000A00001026E0014
- stack 0: 0xF0
5440	 26C	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x257
5441	 26D	JUMP		 	 
- stack 0: 0x71C
5442	 257	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x71C
5443	 258	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
5444	 259	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x257000001C9000000D4004001DC000101FB00020215FFE000A00001026E0014
5445	 25A	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x257000001C9000000D4004001DC000101FB00020215FFE000A00001026E0014
- stack 0: 0xE0
5446	 25C	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x2570000
5447	 25D	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x2570000
- stack 0: 0xFFFF
5448	 260	AND		 	 
- stack 1: 0x71C
- stack 0: 0x0
5449	 261	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0x0
- stack 0: 0x1
5450	 263	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0x0
5451	 264	POP		 	 
- stack 0: 0x71C
5452	 265	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
5453	 267	ADD		 	 
- stack 0: 0x720
5454	 268	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
5455	 269	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x1C9000000D4004001DC000101FB00020215FFE000A00001026E0014016A0001
5456	 26A	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0x1C9000000D4004001DC000101FB00020215FFE000A00001026E0014016A0001
- stack 0: 0xF0
5457	 26C	SHR		 	 
- stack 1: 0x720
- stack 0: 0x1C9
5458	 26D	JUMP		 	 
- stack 0: 0x720
5459	 1C9	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x720
5460	 1CA	PUSH4	f0000000	 	 
- stack 1: 0x720
- stack 0: 0xF0000000
5461	 1CF	PUSH2	0040	 	 
- stack 2: 0x720
- stack 1: 0xF0000000
- stack 0: 0x40
5462	 1D2	MSTORE		 	  ;; # store to x2
- stack 0: 0x720
5463	 1D3	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
5464	 1D5	ADD		 	 
- stack 0: 0x724
5465	 1D6	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
5466	 1D7	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0xD4004001DC000101FB00020215FFE000A00001026E0014016A0001016A0001
5467	 1D8	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0xD4004001DC000101FB00020215FFE000A00001026E0014016A0001016A0001
- stack 0: 0xF0
5468	 1DA	SHR		 	 
- stack 1: 0x724
- stack 0: 0xD4
5469	 1DB	JUMP		 	 
- stack 0: 0x724
5470	 D4	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_2	  ;; # instr: bgeu ra,sp,c(ignore imm)
- stack 0: 0x724
5471	 D5	PUSH2	0040	 	 
- stack 1: 0x724
- stack 0: 0x40
5472	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x724
- stack 0: 0xF0000000
5473	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x724
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
5474	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x724
- stack 0: 0xF0000000
5475	 DF	PUSH2	0020	 	 
- stack 2: 0x724
- stack 1: 0xF0000000
- stack 0: 0x20
5476	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x724
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
5477	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x724
- stack 2: 0xF0000000
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
5478	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x724
- stack 1: 0xF0000000
- stack 0: 0xEFFFFFFF
5479	 E9	LT		 	  ;; # bgeu
- stack 1: 0x724
- stack 0: 0x1
5480	 EA	ISZERO		 	 
- stack 1: 0x724
- stack 0: 0x0
5481	 EB	PUSH2	00F3	 ;; _bgeu_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 2: 0x724
- stack 1: 0x0
- stack 0: 0xF3
5482	 EE	JUMPI		 	 
- stack 0: 0x724
5483	 EF	PUSH2	010D	 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 1: 0x724
- stack 0: 0x10D
5484	 F2	JUMP		 	 
- stack 0: 0x724
5485	 10D	JUMPDEST		 ;; _bgeu_after_ce5f06de6fc4f3ae6fa81fccdf5c4ba18a06a9891b96f3f070b6dced08ee0b8a	 
- stack 0: 0x724
5486	 10E	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
5487	 110	ADD		 	 
- stack 0: 0x728
5488	 111	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
5489	 112	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x1DC000101FB00020215FFE000A00001026E0014016A0001016A0001016A0001
5490	 113	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x1DC000101FB00020215FFE000A00001026E0014016A0001016A0001016A0001
- stack 0: 0xF0
5491	 115	SHR		 	 
- stack 1: 0x728
- stack 0: 0x1DC
5492	 116	JUMP		 	 
- stack 0: 0x728
5493	 1DC	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x728
5494	 1DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x728
- stack 0: 0x728
5495	 1DE	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x1DC000101FB00020215FFE000A00001026E0014016A0001016A0001016A0001
5496	 1DF	PUSH1	E0	 	 
- stack 2: 0x728
- stack 1: 0x1DC000101FB00020215FFE000A00001026E0014016A0001016A0001016A0001
- stack 0: 0xE0
5497	 1E1	SHR		 	 
- stack 1: 0x728
- stack 0: 0x1DC0001
5498	 1E2	PUSH2	FFFF	 	 
- stack 2: 0x728
- stack 1: 0x1DC0001
- stack 0: 0xFFFF
5499	 1E5	AND		 	 
- stack 1: 0x728
- stack 0: 0x1
5500	 1E6	PUSH1	01	 	 
- stack 2: 0x728
- stack 1: 0x1
- stack 0: 0x1
5501	 1E8	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0x1
5502	 1E9	PUSH2	0080	 	 
- stack 2: 0x728
- stack 1: 0x1
- stack 0: 0x80
5503	 1EC	MLOAD		 	  ;; # read from x4
- stack 2: 0x728
- stack 1: 0x1
- stack 0: 0x1
5504	 1ED	ADD		 	  ;; # ADDI 4
- stack 1: 0x728
- stack 0: 0x2
5505	 1EE	PUSH2	0080	 	 
- stack 2: 0x728
- stack 1: 0x2
- stack 0: 0x80
5506	 1F1	MSTORE		 	  ;; # store to x4
- stack 0: 0x728
5507	 1F2	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
5508	 1F4	ADD		 	 
- stack 0: 0x72C
5509	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
5510	 1F6	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x1FB00020215FFE000A00001026E0014016A0001016A0001016A0001016A0001
5511	 1F7	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x1FB00020215FFE000A00001026E0014016A0001016A0001016A0001016A0001
- stack 0: 0xF0
5512	 1F9	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x1FB
5513	 1FA	JUMP		 	 
- stack 0: 0x72C
5514	 1FB	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x72C
5515	 1FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
5516	 1FD	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x1FB00020215FFE000A00001026E0014016A0001016A0001016A0001016A0001
5517	 1FE	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0x1FB00020215FFE000A00001026E0014016A0001016A0001016A0001016A0001
- stack 0: 0xE0
5518	 200	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x1FB0002
5519	 201	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0x1FB0002
- stack 0: 0xFFFF
5520	 204	AND		 	 
- stack 1: 0x72C
- stack 0: 0x2
5521	 205	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0x1
5522	 207	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x2
5523	 208	PUSH2	00A0	 	 
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0xA0
5524	 20B	MSTORE		 	  ;; # store to x5
- stack 0: 0x72C
5525	 20C	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
5526	 20E	ADD		 	 
- stack 0: 0x730
5527	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
5528	 210	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x215FFE000A00001026E0014016A0001016A0001016A0001016A0001016A0001
5529	 211	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x215FFE000A00001026E0014016A0001016A0001016A0001016A0001016A0001
- stack 0: 0xF0
5530	 213	SHR		 	 
- stack 1: 0x730
- stack 0: 0x215
5531	 214	JUMP		 	 
- stack 0: 0x730
5532	 215	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x730
5533	 216	PUSH2	0080	 	 
- stack 1: 0x730
- stack 0: 0x80
5534	 219	MLOAD		 	  ;; # read from x4
- stack 1: 0x730
- stack 0: 0x2
5535	 21A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x730
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5536	 21F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x730
- stack 0: 0x2
5537	 220	PUSH2	00A0	 	 
- stack 2: 0x730
- stack 1: 0x2
- stack 0: 0xA0
5538	 223	MLOAD		 	  ;; # read from x5
- stack 2: 0x730
- stack 1: 0x2
- stack 0: 0x2
5539	 224	PUSH4	FFFFFFFF	 	 
- stack 3: 0x730
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5540	 229	AND		 	  ;; # mask to 32 bits
- stack 2: 0x730
- stack 1: 0x2
- stack 0: 0x2
5541	 22A	SUB		 	 
- stack 1: 0x730
- stack 0: 0x0
5542	 22B	PUSH2	0233	 ;; _neq_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 2: 0x730
- stack 1: 0x0
- stack 0: 0x233
5543	 22E	JUMPI		 	 
- stack 0: 0x730
5544	 22F	PUSH2	024D	 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 1: 0x730
- stack 0: 0x24D
5545	 232	JUMP		 	 
- stack 0: 0x730
5546	 24D	JUMPDEST		 ;; _neq_after_860c4b73af67f73594815a225a09cd5a5cc1a13730d06e567d1aeb7228ff6130	 
- stack 0: 0x730
5547	 24E	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
5548	 250	ADD		 	 
- stack 0: 0x734
5549	 251	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
5550	 252	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0xA00001026E0014016A0001016A0001016A0001016A0001016A0001016A0001
5551	 253	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0xA00001026E0014016A0001016A0001016A0001016A0001016A0001016A0001
- stack 0: 0xF0
5552	 255	SHR		 	 
- stack 1: 0x734
- stack 0: 0xA0
5553	 256	JUMP		 	 
- stack 0: 0x734
5554	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x734
5555	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x734
- stack 0: 0x734
5556	 A2	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0xA00001026E0014016A0001016A0001016A0001016A0001016A0001016A0001
5557	 A3	PUSH1	E0	 	 
- stack 2: 0x734
- stack 1: 0xA00001026E0014016A0001016A0001016A0001016A0001016A0001016A0001
- stack 0: 0xE0
5558	 A5	SHR		 	 
- stack 1: 0x734
- stack 0: 0xA00001
5559	 A6	PUSH2	FFFF	 	 
- stack 2: 0x734
- stack 1: 0xA00001
- stack 0: 0xFFFF
5560	 A9	AND		 	 
- stack 1: 0x734
- stack 0: 0x1
5561	 AA	PUSH1	01	 	 
- stack 2: 0x734
- stack 1: 0x1
- stack 0: 0x1
5562	 AC	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0x1
5563	 AD	PUSH2	0020	 	 
- stack 2: 0x734
- stack 1: 0x1
- stack 0: 0x20
5564	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x734
5565	 B1	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
5566	 B3	ADD		 	 
- stack 0: 0x738
5567	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
5568	 B5	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x26E0014016A0001016A0001016A0001016A0001016A0001016A000102AF0003
5569	 B6	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x26E0014016A0001016A0001016A0001016A0001016A0001016A000102AF0003
- stack 0: 0xF0
5570	 B8	SHR		 	 
- stack 1: 0x738
- stack 0: 0x26E
5571	 B9	JUMP		 	 
- stack 0: 0x738
5572	 26E	JUMPDEST		 ;; __riscvimpl_BGEU_0_1_0	  ;; # instr: bgeu ra,zero,14(ignore imm)
- stack 0: 0x738
5573	 26F	PUSH1	00	 	 
- stack 1: 0x738
- stack 0: 0x0
5574	 271	PUSH4	FFFFFFFF	 	 
- stack 2: 0x738
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
5575	 276	AND		 	  ;; # mask to 32 bits
- stack 1: 0x738
- stack 0: 0x0
5576	 277	PUSH2	0020	 	 
- stack 2: 0x738
- stack 1: 0x0
- stack 0: 0x20
5577	 27A	MLOAD		 	  ;; # read from x1
- stack 2: 0x738
- stack 1: 0x0
- stack 0: 0x1
5578	 27B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x738
- stack 2: 0x0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5579	 280	AND		 	  ;; # mask to 32 bits
- stack 2: 0x738
- stack 1: 0x0
- stack 0: 0x1
5580	 281	LT		 	  ;; # bgeu
- stack 1: 0x738
- stack 0: 0x0
5581	 282	ISZERO		 	 
- stack 1: 0x738
- stack 0: 0x1
5582	 283	PUSH2	028B	 ;; _bgeu_07467fdc399f8e4ed57258fafd92f2ad5ab8d5840f3467f423e25bfbdeba14f1	 
- stack 2: 0x738
- stack 1: 0x1
- stack 0: 0x28B
5583	 286	JUMPI		 	 
- stack 0: 0x738
5584	 28B	JUMPDEST		 ;; _bgeu_07467fdc399f8e4ed57258fafd92f2ad5ab8d5840f3467f423e25bfbdeba14f1	 
- stack 0: 0x738
5585	 28C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x738
- stack 0: 0x738
5586	 28D	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x26E0014016A0001016A0001016A0001016A0001016A0001016A000102AF0003
5587	 28E	PUSH1	E0	 	 
- stack 2: 0x738
- stack 1: 0x26E0014016A0001016A0001016A0001016A0001016A0001016A000102AF0003
- stack 0: 0xE0
5588	 290	SHR		 	 
- stack 1: 0x738
- stack 0: 0x26E0014
5589	 291	PUSH2	FFFF	 	 
- stack 2: 0x738
- stack 1: 0x26E0014
- stack 0: 0xFFFF
5590	 294	AND		 	 
- stack 1: 0x738
- stack 0: 0x14
5591	 295	PUSH1	01	 	 
- stack 2: 0x738
- stack 1: 0x14
- stack 0: 0x1
5592	 297	SIGNEXTEND		 	 
- stack 1: 0x738
- stack 0: 0x14
5593	 298	ADD		 	 
- stack 0: 0x74C
5594	 299	PUSH4	FFFFFFFF	 	 
- stack 1: 0x74C
- stack 0: 0xFFFFFFFF
5595	 29E	AND		 	  ;; # mask to 32 bits
- stack 0: 0x74C
5596	 29F	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
5597	 2A0	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x16A0001016A000102AF00030086001802C90008011700180021000000340798
5598	 2A1	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x16A0001016A000102AF00030086001802C90008011700180021000000340798
- stack 0: 0xF0
5599	 2A3	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x16A
5600	 2A4	JUMP		 	 
- stack 0: 0x74C
5601	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x74C
5602	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x74C
- stack 0: 0x74C
5603	 16C	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x16A0001016A000102AF00030086001802C90008011700180021000000340798
5604	 16D	PUSH1	E0	 	 
- stack 2: 0x74C
- stack 1: 0x16A0001016A000102AF00030086001802C90008011700180021000000340798
- stack 0: 0xE0
5605	 16F	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x16A0001
5606	 170	PUSH2	FFFF	 	 
- stack 2: 0x74C
- stack 1: 0x16A0001
- stack 0: 0xFFFF
5607	 173	AND		 	 
- stack 1: 0x74C
- stack 0: 0x1
5608	 174	PUSH1	01	 	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x1
5609	 176	SIGNEXTEND		 	 
- stack 1: 0x74C
- stack 0: 0x1
5610	 177	PUSH2	0020	 	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x20
5611	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x1
5612	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x74C
- stack 0: 0x2
5613	 17C	PUSH2	0020	 	 
- stack 2: 0x74C
- stack 1: 0x2
- stack 0: 0x20
5614	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x74C
5615	 180	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
5616	 182	ADD		 	 
- stack 0: 0x750
5617	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
5618	 184	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x16A000102AF00030086001802C9000801170018002100000034079800530042
5619	 185	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x16A000102AF00030086001802C9000801170018002100000034079800530042
- stack 0: 0xF0
5620	 187	SHR		 	 
- stack 1: 0x750
- stack 0: 0x16A
5621	 188	JUMP		 	 
- stack 0: 0x750
5622	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x750
5623	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x750
- stack 0: 0x750
5624	 16C	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x16A000102AF00030086001802C9000801170018002100000034079800530042
5625	 16D	PUSH1	E0	 	 
- stack 2: 0x750
- stack 1: 0x16A000102AF00030086001802C9000801170018002100000034079800530042
- stack 0: 0xE0
5626	 16F	SHR		 	 
- stack 1: 0x750
- stack 0: 0x16A0001
5627	 170	PUSH2	FFFF	 	 
- stack 2: 0x750
- stack 1: 0x16A0001
- stack 0: 0xFFFF
5628	 173	AND		 	 
- stack 1: 0x750
- stack 0: 0x1
5629	 174	PUSH1	01	 	 
- stack 2: 0x750
- stack 1: 0x1
- stack 0: 0x1
5630	 176	SIGNEXTEND		 	 
- stack 1: 0x750
- stack 0: 0x1
5631	 177	PUSH2	0020	 	 
- stack 2: 0x750
- stack 1: 0x1
- stack 0: 0x20
5632	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x750
- stack 1: 0x1
- stack 0: 0x2
5633	 17B	ADD		 	  ;; # ADDI 1
- stack 1: 0x750
- stack 0: 0x3
5634	 17C	PUSH2	0020	 	 
- stack 2: 0x750
- stack 1: 0x3
- stack 0: 0x20
5635	 17F	MSTORE		 	  ;; # store to x1
- stack 0: 0x750
5636	 180	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
5637	 182	ADD		 	 
- stack 0: 0x754
5638	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
5639	 184	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x2AF00030086001802C900080117001800210000003407980053004200660000
5640	 185	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x2AF00030086001802C900080117001800210000003407980053004200660000
- stack 0: 0xF0
5641	 187	SHR		 	 
- stack 1: 0x754
- stack 0: 0x2AF
5642	 188	JUMP		 	 
- stack 0: 0x754
5643	 2AF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,3(ignore imm)
- stack 0: 0x754
5644	 2B0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
5645	 2B1	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x2AF00030086001802C900080117001800210000003407980053004200660000
5646	 2B2	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0x2AF00030086001802C900080117001800210000003407980053004200660000
- stack 0: 0xE0
5647	 2B4	SHR		 	 
- stack 1: 0x754
- stack 0: 0x2AF0003
5648	 2B5	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0x2AF0003
- stack 0: 0xFFFF
5649	 2B8	AND		 	 
- stack 1: 0x754
- stack 0: 0x3
5650	 2B9	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0x3
- stack 0: 0x1
5651	 2BB	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0x3
5652	 2BC	PUSH2	03A0	 	 
- stack 2: 0x754
- stack 1: 0x3
- stack 0: 0x3A0
5653	 2BF	MSTORE		 	  ;; # store to x29
- stack 0: 0x754
5654	 2C0	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
5655	 2C2	ADD		 	 
- stack 0: 0x758
5656	 2C3	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
5657	 2C4	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x86001802C900080117001800210000003407980053004200660000030B0001
5658	 2C5	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0x86001802C900080117001800210000003407980053004200660000030B0001
- stack 0: 0xF0
5659	 2C7	SHR		 	 
- stack 1: 0x758
- stack 0: 0x86
5660	 2C8	JUMP		 	 
- stack 0: 0x758
5661	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x758
5662	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x758
- stack 0: 0x758
5663	 88	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x86001802C900080117001800210000003407980053004200660000030B0001
5664	 89	PUSH1	E0	 	 
- stack 2: 0x758
- stack 1: 0x86001802C900080117001800210000003407980053004200660000030B0001
- stack 0: 0xE0
5665	 8B	SHR		 	 
- stack 1: 0x758
- stack 0: 0x860018
5666	 8C	PUSH2	FFFF	 	 
- stack 2: 0x758
- stack 1: 0x860018
- stack 0: 0xFFFF
5667	 8F	AND		 	 
- stack 1: 0x758
- stack 0: 0x18
5668	 90	PUSH1	01	 	 
- stack 2: 0x758
- stack 1: 0x18
- stack 0: 0x1
5669	 92	SIGNEXTEND		 	 
- stack 1: 0x758
- stack 0: 0x18
5670	 93	PUSH2	0380	 	 
- stack 2: 0x758
- stack 1: 0x18
- stack 0: 0x380
5671	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x758
5672	 97	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
5673	 99	ADD		 	 
- stack 0: 0x75C
5674	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
5675	 9B	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x2C900080117001800210000003407980053004200660000030B000100210000
5676	 9C	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x2C900080117001800210000003407980053004200660000030B000100210000
- stack 0: 0xF0
5677	 9E	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x2C9
5678	 9F	JUMP		 	 
- stack 0: 0x75C
5679	 2C9	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,8(ignore imm)
- stack 0: 0x75C
5680	 2CA	PUSH2	0020	 	 
- stack 1: 0x75C
- stack 0: 0x20
5681	 2CD	MLOAD		 	  ;; # read from x1
- stack 1: 0x75C
- stack 0: 0x3
5682	 2CE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x75C
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
5683	 2D3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x75C
- stack 0: 0x3
5684	 2D4	PUSH2	03A0	 	 
- stack 2: 0x75C
- stack 1: 0x3
- stack 0: 0x3A0
5685	 2D7	MLOAD		 	  ;; # read from x29
- stack 2: 0x75C
- stack 1: 0x3
- stack 0: 0x3
5686	 2D8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x75C
- stack 2: 0x3
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
5687	 2DD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x75C
- stack 1: 0x3
- stack 0: 0x3
5688	 2DE	SUB		 	 
- stack 1: 0x75C
- stack 0: 0x0
5689	 2DF	PUSH2	02E7	 ;; _neq_d035fd3566dde445e5b39db19d4eb961aefb359d94298fd86b878ea307107524	 
- stack 2: 0x75C
- stack 1: 0x0
- stack 0: 0x2E7
5690	 2E2	JUMPI		 	 
- stack 0: 0x75C
5691	 2E3	PUSH2	0301	 ;; _neq_after_d035fd3566dde445e5b39db19d4eb961aefb359d94298fd86b878ea307107524	 
- stack 1: 0x75C
- stack 0: 0x301
5692	 2E6	JUMP		 	 
- stack 0: 0x75C
5693	 301	JUMPDEST		 ;; _neq_after_d035fd3566dde445e5b39db19d4eb961aefb359d94298fd86b878ea307107524	 
- stack 0: 0x75C
5694	 302	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
5695	 304	ADD		 	 
- stack 0: 0x760
5696	 305	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
5697	 306	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x117001800210000003407980053004200660000030B0001002100000034079C
5698	 307	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x117001800210000003407980053004200660000030B0001002100000034079C
- stack 0: 0xF0
5699	 309	SHR		 	 
- stack 1: 0x760
- stack 0: 0x117
5700	 30A	JUMP		 	 
- stack 0: 0x760
5701	 117	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,344(ignore imm)
- stack 0: 0x760
5702	 118	PUSH1	00	 	 
- stack 1: 0x760
- stack 0: 0x0
5703	 11A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x760
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
5704	 11F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x760
- stack 0: 0x0
5705	 120	PUSH2	0380	 	 
- stack 2: 0x760
- stack 1: 0x0
- stack 0: 0x380
5706	 123	MLOAD		 	  ;; # read from x28
- stack 2: 0x760
- stack 1: 0x0
- stack 0: 0x18
5707	 124	PUSH4	FFFFFFFF	 	 
- stack 3: 0x760
- stack 2: 0x0
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
5708	 129	AND		 	  ;; # mask to 32 bits
- stack 2: 0x760
- stack 1: 0x0
- stack 0: 0x18
5709	 12A	SUB		 	 
- stack 1: 0x760
- stack 0: 0x18
5710	 12B	PUSH2	0133	 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 2: 0x760
- stack 1: 0x18
- stack 0: 0x133
5711	 12E	JUMPI		 	 
- stack 0: 0x760
5712	 133	JUMPDEST		 ;; _neq_b01b6c5d79f959a3795975b2bcf6f7231837fccaa140aea22db39a283582d336	 
- stack 0: 0x760
5713	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
5714	 135	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x117001800210000003407980053004200660000030B0001002100000034079C
5715	 136	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0x117001800210000003407980053004200660000030B0001002100000034079C
- stack 0: 0xE0
5716	 138	SHR		 	 
- stack 1: 0x760
- stack 0: 0x1170018
5717	 139	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0x1170018
- stack 0: 0xFFFF
5718	 13C	AND		 	 
- stack 1: 0x760
- stack 0: 0x18
5719	 13D	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x18
- stack 0: 0x1
5720	 13F	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x18
5721	 140	ADD		 	 
- stack 0: 0x778
5722	 141	PUSH4	FFFFFFFF	 	 
- stack 1: 0x778
- stack 0: 0xFFFFFFFF
5723	 146	AND		 	  ;; # mask to 32 bits
- stack 0: 0x778
5724	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
5725	 148	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x2100000034079C005300420066000003160000006600006574796D00007473
5726	 149	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x2100000034079C005300420066000003160000006600006574796D00007473
- stack 0: 0xF0
5727	 14B	SHR		 	 
- stack 1: 0x778
- stack 0: 0x21
5728	 14C	JUMP		 	 
- stack 0: 0x778
5729	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x778
5730	 22	PUSH4	00000000	 	 
- stack 1: 0x778
- stack 0: 0x0
5731	 27	PUSH2	0160	 	 
- stack 2: 0x778
- stack 1: 0x0
- stack 0: 0x160
5732	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x778
5733	 2B	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
5734	 2D	ADD		 	 
- stack 0: 0x77C
5735	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
5736	 2F	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x34079C005300420066000003160000006600006574796D0000747300525245
5737	 30	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x34079C005300420066000003160000006600006574796D0000747300525245
- stack 0: 0xF0
5738	 32	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x34
5739	 33	JUMP		 	 
- stack 0: 0x77C
5740	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1936(ignore imm)
- stack 0: 0x77C
5741	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x77C
- stack 0: 0x77C
5742	 36	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x34079C005300420066000003160000006600006574796D0000747300525245
5743	 37	PUSH1	E0	 	 
- stack 2: 0x77C
- stack 1: 0x34079C005300420066000003160000006600006574796D0000747300525245
- stack 0: 0xE0
5744	 39	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x34079C
5745	 3A	PUSH2	FFFF	 	 
- stack 2: 0x77C
- stack 1: 0x34079C
- stack 0: 0xFFFF
5746	 3D	AND		 	 
- stack 1: 0x77C
- stack 0: 0x79C
5747	 3E	PUSH1	01	 	 
- stack 2: 0x77C
- stack 1: 0x79C
- stack 0: 0x1
5748	 40	SIGNEXTEND		 	 
- stack 1: 0x77C
- stack 0: 0x79C
5749	 41	PUSH2	0160	 	 
- stack 2: 0x77C
- stack 1: 0x79C
- stack 0: 0x160
5750	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x77C
- stack 1: 0x79C
- stack 0: 0x0
5751	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x77C
- stack 0: 0x79C
5752	 46	PUSH2	0160	 	 
- stack 2: 0x77C
- stack 1: 0x79C
- stack 0: 0x160
5753	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x77C
5754	 4A	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
5755	 4C	ADD		 	 
- stack 0: 0x780
5756	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
5757	 4E	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x5300420066000003160000006600006574796D000074730052524500004B4F
5758	 4F	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0x5300420066000003160000006600006574796D000074730052524500004B4F
- stack 0: 0xF0
5759	 51	SHR		 	 
- stack 1: 0x780
- stack 0: 0x53
5760	 52	JUMP		 	 
- stack 0: 0x780
5761	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x780
5762	 54	PUSH4	00042000	 	 
- stack 1: 0x780
- stack 0: 0x42000
5763	 59	PUSH2	0140	 	 
- stack 2: 0x780
- stack 1: 0x42000
- stack 0: 0x140
5764	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x780
5765	 5D	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
5766	 5F	ADD		 	 
- stack 0: 0x784
5767	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
5768	 61	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x66000003160000006600006574796D000074730052524500004B4F00000000
5769	 62	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0x66000003160000006600006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
5770	 64	SHR		 	 
- stack 1: 0x784
- stack 0: 0x66
5771	 65	JUMP		 	 
- stack 0: 0x784
5772	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x784
5773	 67	PUSH2	0140	 	 
- stack 1: 0x784
- stack 0: 0x140
5774	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x784
- stack 0: 0x42000
5775	 6B	PUSH2	0075	 ;; _ecall_828c8ba48fedb93fe8f2f9d96ba68a2e4d861c3b580c58554da2c7323d86962a	 
- stack 2: 0x784
- stack 1: 0x42000
- stack 0: 0x75
5776	 6E	JUMPI		 	 
- stack 0: 0x784
5777	 75	JUMPDEST		 ;; _ecall_828c8ba48fedb93fe8f2f9d96ba68a2e4d861c3b580c58554da2c7323d86962a	 
- stack 0: 0x784
5778	 76	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
5779	 78	PUSH2	0160	 	 
- stack 2: 0x784
- stack 1: 0x4
- stack 0: 0x160
5780	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x784
- stack 1: 0x4
- stack 0: 0x79C
5781	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x784
5782	 7D	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
5783	 7F	ADD		 	 
- stack 0: 0x788
5784	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
5785	 81	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x3160000006600006574796D000074730052524500004B4F0000000000000000
5786	 82	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x3160000006600006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
5787	 84	SHR		 	 
- stack 1: 0x788
- stack 0: 0x316
5788	 85	JUMP		 	 
- stack 0: 0x788
5789	 316	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x788
5790	 317	PUSH4	00000000	 	 
- stack 1: 0x788
- stack 0: 0x0
5791	 31C	PUSH2	0140	 	 
- stack 2: 0x788
- stack 1: 0x0
- stack 0: 0x140
5792	 31F	MSTORE		 	  ;; # store to x10
- stack 0: 0x788
5793	 320	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
5794	 322	ADD		 	 
- stack 0: 0x78C
5795	 323	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
5796	 324	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x6600006574796D000074730052524500004B4F000000000000000000000000
5797	 325	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x6600006574796D000074730052524500004B4F000000000000000000000000
- stack 0: 0xF0
5798	 327	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x66
5799	 328	JUMP		 	 
- stack 0: 0x78C
5800	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x78C
5801	 67	PUSH2	0140	 	 
- stack 1: 0x78C
- stack 0: 0x140
5802	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x78C
- stack 0: 0x0
5803	 6B	PUSH2	0075	 ;; _ecall_828c8ba48fedb93fe8f2f9d96ba68a2e4d861c3b580c58554da2c7323d86962a	 
- stack 2: 0x78C
- stack 1: 0x0
- stack 0: 0x75
5804	 6E	JUMPI		 	 
- stack 0: 0x78C
5805	 6F	PUSH1	20	 	 
- stack 1: 0x78C
- stack 0: 0x20
5806	 71	PUSH2	0160	 	 
- stack 2: 0x78C
- stack 1: 0x20
- stack 0: 0x160
5807	 74	RETURN		 	 
Final bytecode length; 1738
Returned: 000000000000000000000000000000000000000000000000000000000000079c
gasUsed : 20436
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c
** HOT: 430 - range: 430,434,438,43c
** HOT: 450 - range: 450,454,458,45c
** HOT: 470 - range: 470,474,478,47c
** HOT: 490 - range: 490,494,498,49c
** HOT: 4b0 - range: 4b0,4b4,4b8,4bc
** HOT: 4d0 - range: 4d0,4d4,4d8,4dc
** HOT: 4ec - range: 4ec,4f0,4f4,4f8
** HOT: 508 - range: 508,50c,510,514
** HOT: 524 - range: 524,528,52c,530,534
** HOT: 544 - range: 544,548,54c,550,554,558
** HOT: 54c - range: 54c,550,554,558
** HOT: 55c - range: 55c,560,564
** HOT: 568 - range: 568,56c,570,574,578,57c,580
** HOT: 570 - range: 570,574,578,57c,580
** HOT: 584 - range: 584,588,58c
** HOT: 590 - range: 590,594,598,59c,5a0,5a4,5a8,5ac
** HOT: 598 - range: 598,59c,5a0,5a4,5a8,5ac
** HOT: 5b0 - range: 5b0,5b4,5b8
** HOT: 5bc - range: 5bc,5c0,5c4,5c8,5cc,5d0,5d4
** HOT: 5c4 - range: 5c4,5c8,5cc,5d0,5d4
** HOT: 5d8 - range: 5d8,5dc,5e0
** HOT: 5e4 - range: 5e4,5e8,5ec,5f0,5f4,5f8,5fc,600
** HOT: 5ec - range: 5ec,5f0,5f4,5f8,5fc,600
** HOT: 604 - range: 604,608,60c
** HOT: 610 - range: 610,614,618,61c,620,624,628,62c
** HOT: 618 - range: 618,61c,620,624,628,62c
** HOT: 630 - range: 630,634,638
** HOT: 63c - range: 63c,640,644,648,64c,650
** HOT: 644 - range: 644,648,64c,650
** HOT: 654 - range: 654,658,65c
** HOT: 660 - range: 660,664,668,66c,670,674,678
** HOT: 668 - range: 668,66c,670,674,678
** HOT: 67c - range: 67c,680,684
** HOT: 688 - range: 688,68c,690,694,698,69c,6a0,6a4
** HOT: 690 - range: 690,694,698,69c,6a0,6a4
** HOT: 6a8 - range: 6a8,6ac,6b0
** HOT: 6b4 - range: 6b4,6b8,6bc,6c0,6c4,6c8,6cc
** HOT: 6bc - range: 6bc,6c0,6c4,6c8,6cc
** HOT: 6d0 - range: 6d0,6d4,6d8
** HOT: 6dc - range: 6dc,6e0,6e4,6e8,6ec,6f0,6f4,6f8
** HOT: 6e4 - range: 6e4,6e8,6ec,6f0,6f4,6f8
** HOT: 6fc - range: 6fc,700,704
** HOT: 708 - range: 708,70c,710,714,718,71c,720,724
** HOT: 710 - range: 710,714,718,71c,720,724
** HOT: 728 - range: 728,72c,730
** HOT: 74c - range: 74c,750,754,758,75c
