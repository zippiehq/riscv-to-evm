Running in EVM:
0	 0	PUSH4	0310	 	 
- stack 0: 0x310
1	 5	PUSH2	02CF	 ;; _rambegin	 
- stack 1: 0x310
- stack 0: 0x2CF
2	 8	PUSH1	01	 	 
- stack 2: 0x310
- stack 1: 0x2CF
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x310
- stack 0: 0x2D0
4	 B	PUSH2	0400	 	 
- stack 2: 0x310
- stack 1: 0x2D0
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100000034070000530042006600000086000200A0000000BA000100D4000C
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100000034070000530042006600000086000200A0000000BA000100D4000C
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34070000530042006600000086000200A0000000BA000100D4000C011002B0
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34070000530042006600000086000200A0000000BA000100D4000C011002B0
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1792(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34070000530042006600000086000200A0000000BA000100D4000C011002B0
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34070000530042006600000086000200A0000000BA000100D4000C011002B0
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340700
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340700
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x700
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x700
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x700
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000200A0000000BA000100D4000C011002B00110000C
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000200A0000000BA000100D4000C011002B00110000C
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000200A0000000BA000100D4000C011002B00110000C00D4FFFC
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000200A0000000BA000100D4000C011002B00110000C00D4FFFC
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_4e19834bd30cf7c2b6066989ca20012363874fcbbd46b2332754d28e02c75de1	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_4e19834bd30cf7c2b6066989ca20012363874fcbbd46b2332754d28e02c75de1	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x700
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA000100D4000C011002B00110000C00D4FFFC011002A4
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA000100D4000C011002B00110000C00D4FFFC011002A4
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA000100D4000C011002B00110000C00D4FFFC011002A4
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA000100D4000C011002B00110000C00D4FFFC011002A4
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860002
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860002
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x2
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x2
84	 93	PUSH2	0380	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x380
85	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000100D4000C011002B00110000C00D4FFFC011002A400860003
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000100D4000C011002B00110000C00D4FFFC011002A400860003
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000100D4000C011002B00110000C00D4FFFC011002A400860003
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000100D4000C011002B00110000C00D4FFFC011002A400860003
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x20
103	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
104	 B1	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
105	 B3	ADD		 	 
- stack 0: 0x418
106	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
107	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000100D4000C011002B00110000C00D4FFFC011002A40086000300A0FFFF
108	 B6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBA000100D4000C011002B00110000C00D4FFFC011002A40086000300A0FFFF
- stack 0: 0xF0
109	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA
110	 B9	JUMP		 	 
- stack 0: 0x418
111	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x418
112	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
113	 BC	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000100D4000C011002B00110000C00D4FFFC011002A40086000300A0FFFF
114	 BD	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xBA000100D4000C011002B00110000C00D4FFFC011002A40086000300A0FFFF
- stack 0: 0xE0
115	 BF	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA0001
116	 C0	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xBA0001
- stack 0: 0xFFFF
117	 C3	AND		 	 
- stack 1: 0x418
- stack 0: 0x1
118	 C4	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0x1
- stack 0: 0x1
119	 C6	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0x1
120	 C7	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0x1
- stack 0: 0x40
121	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x418
122	 CB	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
123	 CD	ADD		 	 
- stack 0: 0x41C
124	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
125	 CF	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C011002B00110000C00D4FFFC011002A40086000300A0FFFF00BA0001
126	 D0	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C011002B00110000C00D4FFFC011002A40086000300A0FFFF00BA0001
- stack 0: 0xF0
127	 D2	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD4
128	 D3	JUMP		 	 
- stack 0: 0x41C
129	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x41C
130	 D5	PUSH2	0040	 	 
- stack 1: 0x41C
- stack 0: 0x40
131	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x41C
- stack 0: 0x1
132	 D9	PUSH1	03	 	 
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0x3
133	 DB	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x1
134	 DC	PUSH2	0020	 	 
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0x20
135	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0x0
136	 E0	PUSH1	03	 	 
- stack 3: 0x41C
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0x3
137	 E2	SIGNEXTEND		 	 
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0x0
138	 E3	SLT		 	  ;; # BLT
- stack 1: 0x41C
- stack 0: 0x1
139	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0xEC
140	 E7	JUMPI		 	 
- stack 0: 0x41C
141	 EC	JUMPDEST		 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x41C
142	 ED	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
143	 EE	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C011002B00110000C00D4FFFC011002A40086000300A0FFFF00BA0001
144	 EF	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C011002B00110000C00D4FFFC011002A40086000300A0FFFF00BA0001
- stack 0: 0xE0
145	 F1	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C
146	 F2	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
147	 F5	AND		 	 
- stack 1: 0x41C
- stack 0: 0xC
148	 F6	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0xC
- stack 0: 0x1
149	 F8	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0xC
150	 F9	ADD		 	 
- stack 0: 0x428
151	 FA	PUSH4	FFFFFFFF	 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFF
152	 FF	AND		 	  ;; # mask to 32 bits
- stack 0: 0x428
153	 100	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
154	 101	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC011002A40086000300A0FFFF00BA000100D4000C011002900110000C
155	 102	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC011002A40086000300A0FFFF00BA000100D4000C011002900110000C
- stack 0: 0xF0
156	 104	SHR		 	 
- stack 1: 0x428
- stack 0: 0xD4
157	 105	JUMP		 	 
- stack 0: 0x428
158	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x428
159	 D5	PUSH2	0040	 	 
- stack 1: 0x428
- stack 0: 0x40
160	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x428
- stack 0: 0x1
161	 D9	PUSH1	03	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x3
162	 DB	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0x1
163	 DC	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x20
164	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x0
165	 E0	PUSH1	03	 	 
- stack 3: 0x428
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0x3
166	 E2	SIGNEXTEND		 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x0
167	 E3	SLT		 	  ;; # BLT
- stack 1: 0x428
- stack 0: 0x1
168	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0xEC
169	 E7	JUMPI		 	 
- stack 0: 0x428
170	 EC	JUMPDEST		 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x428
171	 ED	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
172	 EE	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC011002A40086000300A0FFFF00BA000100D4000C011002900110000C
173	 EF	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC011002A40086000300A0FFFF00BA000100D4000C011002900110000C
- stack 0: 0xE0
174	 F1	SHR		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC
175	 F2	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
176	 F5	AND		 	 
- stack 1: 0x428
- stack 0: 0xFFFC
177	 F6	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0xFFFC
- stack 0: 0x1
178	 F8	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
179	 F9	ADD		 	 
- stack 0: 0x424
180	 FA	PUSH4	FFFFFFFF	 	 
- stack 1: 0x424
- stack 0: 0xFFFFFFFF
181	 FF	AND		 	  ;; # mask to 32 bits
- stack 0: 0x424
182	 100	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
183	 101	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x110000C00D4FFFC011002A40086000300A0FFFF00BA000100D4000C01100290
184	 102	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x110000C00D4FFFC011002A40086000300A0FFFF00BA000100D4000C01100290
- stack 0: 0xF0
185	 104	SHR		 	 
- stack 1: 0x424
- stack 0: 0x110
186	 105	JUMP		 	 
- stack 0: 0x424
187	 110	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x424
188	 111	PUSH1	00	 	 
- stack 1: 0x424
- stack 0: 0x0
189	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
190	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x0
191	 119	PUSH2	0380	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x380
192	 11C	MLOAD		 	  ;; # read from x28
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x2
193	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0x0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
194	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x2
195	 123	SUB		 	 
- stack 1: 0x424
- stack 0: 0x2
196	 124	PUSH2	012C	 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 2: 0x424
- stack 1: 0x2
- stack 0: 0x12C
197	 127	JUMPI		 	 
- stack 0: 0x424
198	 12C	JUMPDEST		 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 0: 0x424
199	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
200	 12E	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x110000C00D4FFFC011002A40086000300A0FFFF00BA000100D4000C01100290
201	 12F	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x110000C00D4FFFC011002A40086000300A0FFFF00BA000100D4000C01100290
- stack 0: 0xE0
202	 131	SHR		 	 
- stack 1: 0x424
- stack 0: 0x110000C
203	 132	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x110000C
- stack 0: 0xFFFF
204	 135	AND		 	 
- stack 1: 0x424
- stack 0: 0xC
205	 136	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0xC
- stack 0: 0x1
206	 138	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0xC
207	 139	ADD		 	 
- stack 0: 0x430
208	 13A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x430
- stack 0: 0xFFFFFFFF
209	 13F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x430
210	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
211	 141	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x86000300A0FFFF00BA000100D4000C011002900110000C00D4FFFC01100284
212	 142	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x86000300A0FFFF00BA000100D4000C011002900110000C00D4FFFC01100284
- stack 0: 0xF0
213	 144	SHR		 	 
- stack 1: 0x430
- stack 0: 0x86
214	 145	JUMP		 	 
- stack 0: 0x430
215	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x430
216	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
217	 88	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x86000300A0FFFF00BA000100D4000C011002900110000C00D4FFFC01100284
218	 89	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0x86000300A0FFFF00BA000100D4000C011002900110000C00D4FFFC01100284
- stack 0: 0xE0
219	 8B	SHR		 	 
- stack 1: 0x430
- stack 0: 0x860003
220	 8C	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0x860003
- stack 0: 0xFFFF
221	 8F	AND		 	 
- stack 1: 0x430
- stack 0: 0x3
222	 90	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x1
223	 92	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x3
224	 93	PUSH2	0380	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x380
225	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x430
226	 97	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
227	 99	ADD		 	 
- stack 0: 0x434
228	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
229	 9B	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xA0FFFF00BA000100D4000C011002900110000C00D4FFFC0110028400860004
230	 9C	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xA0FFFF00BA000100D4000C011002900110000C00D4FFFC0110028400860004
- stack 0: 0xF0
231	 9E	SHR		 	 
- stack 1: 0x434
- stack 0: 0xA0
232	 9F	JUMP		 	 
- stack 0: 0x434
233	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x434
234	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
235	 A2	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xA0FFFF00BA000100D4000C011002900110000C00D4FFFC0110028400860004
236	 A3	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xA0FFFF00BA000100D4000C011002900110000C00D4FFFC0110028400860004
- stack 0: 0xE0
237	 A5	SHR		 	 
- stack 1: 0x434
- stack 0: 0xA0FFFF
238	 A6	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
239	 A9	AND		 	 
- stack 1: 0x434
- stack 0: 0xFFFF
240	 AA	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0xFFFF
- stack 0: 0x1
241	 AC	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
242	 AD	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
243	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x434
244	 B1	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
245	 B3	ADD		 	 
- stack 0: 0x438
246	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
247	 B5	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xBA000100D4000C011002900110000C00D4FFFC011002840086000400A0FFFE
248	 B6	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xBA000100D4000C011002900110000C00D4FFFC011002840086000400A0FFFE
- stack 0: 0xF0
249	 B8	SHR		 	 
- stack 1: 0x438
- stack 0: 0xBA
250	 B9	JUMP		 	 
- stack 0: 0x438
251	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x438
252	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
253	 BC	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xBA000100D4000C011002900110000C00D4FFFC011002840086000400A0FFFE
254	 BD	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xBA000100D4000C011002900110000C00D4FFFC011002840086000400A0FFFE
- stack 0: 0xE0
255	 BF	SHR		 	 
- stack 1: 0x438
- stack 0: 0xBA0001
256	 C0	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xBA0001
- stack 0: 0xFFFF
257	 C3	AND		 	 
- stack 1: 0x438
- stack 0: 0x1
258	 C4	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x1
- stack 0: 0x1
259	 C6	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x1
260	 C7	PUSH2	0040	 	 
- stack 2: 0x438
- stack 1: 0x1
- stack 0: 0x40
261	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x438
262	 CB	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
263	 CD	ADD		 	 
- stack 0: 0x43C
264	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
265	 CF	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C011002900110000C00D4FFFC011002840086000400A0FFFE00BAFFFF
266	 D0	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C011002900110000C00D4FFFC011002840086000400A0FFFE00BAFFFF
- stack 0: 0xF0
267	 D2	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xD4
268	 D3	JUMP		 	 
- stack 0: 0x43C
269	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x43C
270	 D5	PUSH2	0040	 	 
- stack 1: 0x43C
- stack 0: 0x40
271	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x43C
- stack 0: 0x1
272	 D9	PUSH1	03	 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x3
273	 DB	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0x1
274	 DC	PUSH2	0020	 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x20
275	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
276	 E0	PUSH1	03	 	 
- stack 3: 0x43C
- stack 2: 0x1
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
277	 E2	SIGNEXTEND		 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
278	 E3	SLT		 	  ;; # BLT
- stack 1: 0x43C
- stack 0: 0x1
279	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0xEC
280	 E7	JUMPI		 	 
- stack 0: 0x43C
281	 EC	JUMPDEST		 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x43C
282	 ED	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
283	 EE	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C011002900110000C00D4FFFC011002840086000400A0FFFE00BAFFFF
284	 EF	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C011002900110000C00D4FFFC011002840086000400A0FFFE00BAFFFF
- stack 0: 0xE0
285	 F1	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C
286	 F2	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
287	 F5	AND		 	 
- stack 1: 0x43C
- stack 0: 0xC
288	 F6	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0xC
- stack 0: 0x1
289	 F8	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0xC
290	 F9	ADD		 	 
- stack 0: 0x448
291	 FA	PUSH4	FFFFFFFF	 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFF
292	 FF	AND		 	  ;; # mask to 32 bits
- stack 0: 0x448
293	 100	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
294	 101	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC011002840086000400A0FFFE00BAFFFF00D4000C011002700110000C
295	 102	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC011002840086000400A0FFFE00BAFFFF00D4000C011002700110000C
- stack 0: 0xF0
296	 104	SHR		 	 
- stack 1: 0x448
- stack 0: 0xD4
297	 105	JUMP		 	 
- stack 0: 0x448
298	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x448
299	 D5	PUSH2	0040	 	 
- stack 1: 0x448
- stack 0: 0x40
300	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x448
- stack 0: 0x1
301	 D9	PUSH1	03	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x3
302	 DB	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0x1
303	 DC	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x20
304	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
305	 E0	PUSH1	03	 	 
- stack 3: 0x448
- stack 2: 0x1
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
306	 E2	SIGNEXTEND		 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
307	 E3	SLT		 	  ;; # BLT
- stack 1: 0x448
- stack 0: 0x1
308	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0xEC
309	 E7	JUMPI		 	 
- stack 0: 0x448
310	 EC	JUMPDEST		 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x448
311	 ED	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x448
- stack 0: 0x448
312	 EE	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC011002840086000400A0FFFE00BAFFFF00D4000C011002700110000C
313	 EF	PUSH1	E0	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC011002840086000400A0FFFE00BAFFFF00D4000C011002700110000C
- stack 0: 0xE0
314	 F1	SHR		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC
315	 F2	PUSH2	FFFF	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
316	 F5	AND		 	 
- stack 1: 0x448
- stack 0: 0xFFFC
317	 F6	PUSH1	01	 	 
- stack 2: 0x448
- stack 1: 0xFFFC
- stack 0: 0x1
318	 F8	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
319	 F9	ADD		 	 
- stack 0: 0x444
320	 FA	PUSH4	FFFFFFFF	 	 
- stack 1: 0x444
- stack 0: 0xFFFFFFFF
321	 FF	AND		 	  ;; # mask to 32 bits
- stack 0: 0x444
322	 100	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
323	 101	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x110000C00D4FFFC011002840086000400A0FFFE00BAFFFF00D4000C01100270
324	 102	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x110000C00D4FFFC011002840086000400A0FFFE00BAFFFF00D4000C01100270
- stack 0: 0xF0
325	 104	SHR		 	 
- stack 1: 0x444
- stack 0: 0x110
326	 105	JUMP		 	 
- stack 0: 0x444
327	 110	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x444
328	 111	PUSH1	00	 	 
- stack 1: 0x444
- stack 0: 0x0
329	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
330	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x444
- stack 0: 0x0
331	 119	PUSH2	0380	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x380
332	 11C	MLOAD		 	  ;; # read from x28
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x3
333	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x444
- stack 2: 0x0
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
334	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x3
335	 123	SUB		 	 
- stack 1: 0x444
- stack 0: 0x3
336	 124	PUSH2	012C	 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 2: 0x444
- stack 1: 0x3
- stack 0: 0x12C
337	 127	JUMPI		 	 
- stack 0: 0x444
338	 12C	JUMPDEST		 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 0: 0x444
339	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
340	 12E	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x110000C00D4FFFC011002840086000400A0FFFE00BAFFFF00D4000C01100270
341	 12F	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0x110000C00D4FFFC011002840086000400A0FFFE00BAFFFF00D4000C01100270
- stack 0: 0xE0
342	 131	SHR		 	 
- stack 1: 0x444
- stack 0: 0x110000C
343	 132	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0x110000C
- stack 0: 0xFFFF
344	 135	AND		 	 
- stack 1: 0x444
- stack 0: 0xC
345	 136	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0xC
- stack 0: 0x1
346	 138	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0xC
347	 139	ADD		 	 
- stack 0: 0x450
348	 13A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x450
- stack 0: 0xFFFFFFFF
349	 13F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x450
350	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
351	 141	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x86000400A0FFFE00BAFFFF00D4000C011002700110000C00D4FFFC01100264
352	 142	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x86000400A0FFFE00BAFFFF00D4000C011002700110000C00D4FFFC01100264
- stack 0: 0xF0
353	 144	SHR		 	 
- stack 1: 0x450
- stack 0: 0x86
354	 145	JUMP		 	 
- stack 0: 0x450
355	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
356	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
357	 88	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x86000400A0FFFE00BAFFFF00D4000C011002700110000C00D4FFFC01100264
358	 89	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x86000400A0FFFE00BAFFFF00D4000C011002700110000C00D4FFFC01100264
- stack 0: 0xE0
359	 8B	SHR		 	 
- stack 1: 0x450
- stack 0: 0x860004
360	 8C	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x860004
- stack 0: 0xFFFF
361	 8F	AND		 	 
- stack 1: 0x450
- stack 0: 0x4
362	 90	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x1
363	 92	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x4
364	 93	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x380
365	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
366	 97	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
367	 99	ADD		 	 
- stack 0: 0x454
368	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
369	 9B	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xA0FFFE00BAFFFF00D4000C011002700110000C00D4FFFC0110026400860005
370	 9C	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0xA0FFFE00BAFFFF00D4000C011002700110000C00D4FFFC0110026400860005
- stack 0: 0xF0
371	 9E	SHR		 	 
- stack 1: 0x454
- stack 0: 0xA0
372	 9F	JUMP		 	 
- stack 0: 0x454
373	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x454
374	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
375	 A2	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xA0FFFE00BAFFFF00D4000C011002700110000C00D4FFFC0110026400860005
376	 A3	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0xA0FFFE00BAFFFF00D4000C011002700110000C00D4FFFC0110026400860005
- stack 0: 0xE0
377	 A5	SHR		 	 
- stack 1: 0x454
- stack 0: 0xA0FFFE
378	 A6	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0xA0FFFE
- stack 0: 0xFFFF
379	 A9	AND		 	 
- stack 1: 0x454
- stack 0: 0xFFFE
380	 AA	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0xFFFE
- stack 0: 0x1
381	 AC	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
382	 AD	PUSH2	0020	 	 
- stack 2: 0x454
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x20
383	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x454
384	 B1	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
385	 B3	ADD		 	 
- stack 0: 0x458
386	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
387	 B5	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xBAFFFF00D4000C011002700110000C00D4FFFC011002640086000500A00001
388	 B6	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0xBAFFFF00D4000C011002700110000C00D4FFFC011002640086000500A00001
- stack 0: 0xF0
389	 B8	SHR		 	 
- stack 1: 0x458
- stack 0: 0xBA
390	 B9	JUMP		 	 
- stack 0: 0x458
391	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x458
392	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
393	 BC	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xBAFFFF00D4000C011002700110000C00D4FFFC011002640086000500A00001
394	 BD	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0xBAFFFF00D4000C011002700110000C00D4FFFC011002640086000500A00001
- stack 0: 0xE0
395	 BF	SHR		 	 
- stack 1: 0x458
- stack 0: 0xBAFFFF
396	 C0	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
397	 C3	AND		 	 
- stack 1: 0x458
- stack 0: 0xFFFF
398	 C4	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0xFFFF
- stack 0: 0x1
399	 C6	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
400	 C7	PUSH2	0040	 	 
- stack 2: 0x458
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
401	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x458
402	 CB	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
403	 CD	ADD		 	 
- stack 0: 0x45C
404	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
405	 CF	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C011002700110000C00D4FFFC011002640086000500A0000100BA0000
406	 D0	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C011002700110000C00D4FFFC011002640086000500A0000100BA0000
- stack 0: 0xF0
407	 D2	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xD4
408	 D3	JUMP		 	 
- stack 0: 0x45C
409	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x45C
410	 D5	PUSH2	0040	 	 
- stack 1: 0x45C
- stack 0: 0x40
411	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x45C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
412	 D9	PUSH1	03	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
413	 DB	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
414	 DC	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
415	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
416	 E0	PUSH1	03	 	 
- stack 3: 0x45C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3
417	 E2	SIGNEXTEND		 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
418	 E3	SLT		 	  ;; # BLT
- stack 1: 0x45C
- stack 0: 0x1
419	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x45C
- stack 1: 0x1
- stack 0: 0xEC
420	 E7	JUMPI		 	 
- stack 0: 0x45C
421	 EC	JUMPDEST		 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x45C
422	 ED	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
423	 EE	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C011002700110000C00D4FFFC011002640086000500A0000100BA0000
424	 EF	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C011002700110000C00D4FFFC011002640086000500A0000100BA0000
- stack 0: 0xE0
425	 F1	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C
426	 F2	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
427	 F5	AND		 	 
- stack 1: 0x45C
- stack 0: 0xC
428	 F6	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0xC
- stack 0: 0x1
429	 F8	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0xC
430	 F9	ADD		 	 
- stack 0: 0x468
431	 FA	PUSH4	FFFFFFFF	 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFF
432	 FF	AND		 	  ;; # mask to 32 bits
- stack 0: 0x468
433	 100	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
434	 101	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC011002640086000500A0000100BA000000D40008011000080110024C
435	 102	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC011002640086000500A0000100BA000000D40008011000080110024C
- stack 0: 0xF0
436	 104	SHR		 	 
- stack 1: 0x468
- stack 0: 0xD4
437	 105	JUMP		 	 
- stack 0: 0x468
438	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x468
439	 D5	PUSH2	0040	 	 
- stack 1: 0x468
- stack 0: 0x40
440	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
441	 D9	PUSH1	03	 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
442	 DB	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
443	 DC	PUSH2	0020	 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
444	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
445	 E0	PUSH1	03	 	 
- stack 3: 0x468
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3
446	 E2	SIGNEXTEND		 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
447	 E3	SLT		 	  ;; # BLT
- stack 1: 0x468
- stack 0: 0x1
448	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x468
- stack 1: 0x1
- stack 0: 0xEC
449	 E7	JUMPI		 	 
- stack 0: 0x468
450	 EC	JUMPDEST		 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x468
451	 ED	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
452	 EE	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC011002640086000500A0000100BA000000D40008011000080110024C
453	 EF	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC011002640086000500A0000100BA000000D40008011000080110024C
- stack 0: 0xE0
454	 F1	SHR		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC
455	 F2	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
456	 F5	AND		 	 
- stack 1: 0x468
- stack 0: 0xFFFC
457	 F6	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0xFFFC
- stack 0: 0x1
458	 F8	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
459	 F9	ADD		 	 
- stack 0: 0x464
460	 FA	PUSH4	FFFFFFFF	 	 
- stack 1: 0x464
- stack 0: 0xFFFFFFFF
461	 FF	AND		 	  ;; # mask to 32 bits
- stack 0: 0x464
462	 100	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
463	 101	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x110000C00D4FFFC011002640086000500A0000100BA000000D4000801100008
464	 102	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x110000C00D4FFFC011002640086000500A0000100BA000000D4000801100008
- stack 0: 0xF0
465	 104	SHR		 	 
- stack 1: 0x464
- stack 0: 0x110
466	 105	JUMP		 	 
- stack 0: 0x464
467	 110	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x464
468	 111	PUSH1	00	 	 
- stack 1: 0x464
- stack 0: 0x0
469	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
470	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x464
- stack 0: 0x0
471	 119	PUSH2	0380	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x380
472	 11C	MLOAD		 	  ;; # read from x28
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x4
473	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x464
- stack 2: 0x0
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
474	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x4
475	 123	SUB		 	 
- stack 1: 0x464
- stack 0: 0x4
476	 124	PUSH2	012C	 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 2: 0x464
- stack 1: 0x4
- stack 0: 0x12C
477	 127	JUMPI		 	 
- stack 0: 0x464
478	 12C	JUMPDEST		 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 0: 0x464
479	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
480	 12E	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x110000C00D4FFFC011002640086000500A0000100BA000000D4000801100008
481	 12F	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0x110000C00D4FFFC011002640086000500A0000100BA000000D4000801100008
- stack 0: 0xE0
482	 131	SHR		 	 
- stack 1: 0x464
- stack 0: 0x110000C
483	 132	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0x110000C
- stack 0: 0xFFFF
484	 135	AND		 	 
- stack 1: 0x464
- stack 0: 0xC
485	 136	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xC
- stack 0: 0x1
486	 138	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xC
487	 139	ADD		 	 
- stack 0: 0x470
488	 13A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x470
- stack 0: 0xFFFFFFFF
489	 13F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x470
490	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
491	 141	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x86000500A0000100BA000000D40008011000080110024C00D4FFFC00860006
492	 142	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x86000500A0000100BA000000D40008011000080110024C00D4FFFC00860006
- stack 0: 0xF0
493	 144	SHR		 	 
- stack 1: 0x470
- stack 0: 0x86
494	 145	JUMP		 	 
- stack 0: 0x470
495	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x470
496	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
497	 88	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x86000500A0000100BA000000D40008011000080110024C00D4FFFC00860006
498	 89	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x86000500A0000100BA000000D40008011000080110024C00D4FFFC00860006
- stack 0: 0xE0
499	 8B	SHR		 	 
- stack 1: 0x470
- stack 0: 0x860005
500	 8C	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x860005
- stack 0: 0xFFFF
501	 8F	AND		 	 
- stack 1: 0x470
- stack 0: 0x5
502	 90	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x1
503	 92	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0x5
504	 93	PUSH2	0380	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x380
505	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x470
506	 97	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
507	 99	ADD		 	 
- stack 0: 0x474
508	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
509	 9B	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000100BA000000D40008011000080110024C00D4FFFC0086000600A00001
510	 9C	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0xA0000100BA000000D40008011000080110024C00D4FFFC0086000600A00001
- stack 0: 0xF0
511	 9E	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA0
512	 9F	JUMP		 	 
- stack 0: 0x474
513	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x474
514	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
515	 A2	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000100BA000000D40008011000080110024C00D4FFFC0086000600A00001
516	 A3	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0xA0000100BA000000D40008011000080110024C00D4FFFC0086000600A00001
- stack 0: 0xE0
517	 A5	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA00001
518	 A6	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0xA00001
- stack 0: 0xFFFF
519	 A9	AND		 	 
- stack 1: 0x474
- stack 0: 0x1
520	 AA	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x1
- stack 0: 0x1
521	 AC	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x1
522	 AD	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0x1
- stack 0: 0x20
523	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x474
524	 B1	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
525	 B3	ADD		 	 
- stack 0: 0x478
526	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
527	 B5	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBA000000D40008011000080110024C00D4FFFC0086000600A0000100BAFFFF
528	 B6	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0xBA000000D40008011000080110024C00D4FFFC0086000600A0000100BAFFFF
- stack 0: 0xF0
529	 B8	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBA
530	 B9	JUMP		 	 
- stack 0: 0x478
531	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x478
532	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
533	 BC	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBA000000D40008011000080110024C00D4FFFC0086000600A0000100BAFFFF
534	 BD	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0xBA000000D40008011000080110024C00D4FFFC0086000600A0000100BAFFFF
- stack 0: 0xE0
535	 BF	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBA0000
536	 C0	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0xBA0000
- stack 0: 0xFFFF
537	 C3	AND		 	 
- stack 1: 0x478
- stack 0: 0x0
538	 C4	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x1
539	 C6	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0x0
540	 C7	PUSH2	0040	 	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x40
541	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x478
542	 CB	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
543	 CD	ADD		 	 
- stack 0: 0x47C
544	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
545	 CF	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xD40008011000080110024C00D4FFFC0086000600A0000100BAFFFF00D40008
546	 D0	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0xD40008011000080110024C00D4FFFC0086000600A0000100BAFFFF00D40008
- stack 0: 0xF0
547	 D2	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xD4
548	 D3	JUMP		 	 
- stack 0: 0x47C
549	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x47C
550	 D5	PUSH2	0040	 	 
- stack 1: 0x47C
- stack 0: 0x40
551	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x47C
- stack 0: 0x0
552	 D9	PUSH1	03	 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x3
553	 DB	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0x0
554	 DC	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x20
555	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x1
556	 E0	PUSH1	03	 	 
- stack 3: 0x47C
- stack 2: 0x0
- stack 1: 0x1
- stack 0: 0x3
557	 E2	SIGNEXTEND		 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x1
558	 E3	SLT		 	  ;; # BLT
- stack 1: 0x47C
- stack 0: 0x0
559	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0xEC
560	 E7	JUMPI		 	 
- stack 0: 0x47C
561	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x47C
- stack 0: 0x106
562	 EB	JUMP		 	 
- stack 0: 0x47C
563	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x47C
564	 107	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
565	 109	ADD		 	 
- stack 0: 0x480
566	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
567	 10B	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x11000080110024C00D4FFFC0086000600A0000100BAFFFF00D4000801100008
568	 10C	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x11000080110024C00D4FFFC0086000600A0000100BAFFFF00D4000801100008
- stack 0: 0xF0
569	 10E	SHR		 	 
- stack 1: 0x480
- stack 0: 0x110
570	 10F	JUMP		 	 
- stack 0: 0x480
571	 110	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x480
572	 111	PUSH1	00	 	 
- stack 1: 0x480
- stack 0: 0x0
573	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
574	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x480
- stack 0: 0x0
575	 119	PUSH2	0380	 	 
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0x380
576	 11C	MLOAD		 	  ;; # read from x28
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0x5
577	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x480
- stack 2: 0x0
- stack 1: 0x5
- stack 0: 0xFFFFFFFF
578	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0x5
579	 123	SUB		 	 
- stack 1: 0x480
- stack 0: 0x5
580	 124	PUSH2	012C	 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 2: 0x480
- stack 1: 0x5
- stack 0: 0x12C
581	 127	JUMPI		 	 
- stack 0: 0x480
582	 12C	JUMPDEST		 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 0: 0x480
583	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
584	 12E	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x11000080110024C00D4FFFC0086000600A0000100BAFFFF00D4000801100008
585	 12F	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x11000080110024C00D4FFFC0086000600A0000100BAFFFF00D4000801100008
- stack 0: 0xE0
586	 131	SHR		 	 
- stack 1: 0x480
- stack 0: 0x1100008
587	 132	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x1100008
- stack 0: 0xFFFF
588	 135	AND		 	 
- stack 1: 0x480
- stack 0: 0x8
589	 136	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0x8
- stack 0: 0x1
590	 138	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x8
591	 139	ADD		 	 
- stack 0: 0x488
592	 13A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x488
- stack 0: 0xFFFFFFFF
593	 13F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x488
594	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
595	 141	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xD4FFFC0086000600A0000100BAFFFF00D40008011000080110023000D4FFFC
596	 142	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0xD4FFFC0086000600A0000100BAFFFF00D40008011000080110023000D4FFFC
- stack 0: 0xF0
597	 144	SHR		 	 
- stack 1: 0x488
- stack 0: 0xD4
598	 145	JUMP		 	 
- stack 0: 0x488
599	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x488
600	 D5	PUSH2	0040	 	 
- stack 1: 0x488
- stack 0: 0x40
601	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x488
- stack 0: 0x0
602	 D9	PUSH1	03	 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x3
603	 DB	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0x0
604	 DC	PUSH2	0020	 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x20
605	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x1
606	 E0	PUSH1	03	 	 
- stack 3: 0x488
- stack 2: 0x0
- stack 1: 0x1
- stack 0: 0x3
607	 E2	SIGNEXTEND		 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x1
608	 E3	SLT		 	  ;; # BLT
- stack 1: 0x488
- stack 0: 0x0
609	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0xEC
610	 E7	JUMPI		 	 
- stack 0: 0x488
611	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x488
- stack 0: 0x106
612	 EB	JUMP		 	 
- stack 0: 0x488
613	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x488
614	 107	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
615	 109	ADD		 	 
- stack 0: 0x48C
616	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
617	 10B	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x86000600A0000100BAFFFF00D40008011000080110023000D4FFFC00860007
618	 10C	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x86000600A0000100BAFFFF00D40008011000080110023000D4FFFC00860007
- stack 0: 0xF0
619	 10E	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x86
620	 10F	JUMP		 	 
- stack 0: 0x48C
621	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x48C
622	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
623	 88	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x86000600A0000100BAFFFF00D40008011000080110023000D4FFFC00860007
624	 89	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0x86000600A0000100BAFFFF00D40008011000080110023000D4FFFC00860007
- stack 0: 0xE0
625	 8B	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x860006
626	 8C	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0x860006
- stack 0: 0xFFFF
627	 8F	AND		 	 
- stack 1: 0x48C
- stack 0: 0x6
628	 90	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0x6
- stack 0: 0x1
629	 92	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0x6
630	 93	PUSH2	0380	 	 
- stack 2: 0x48C
- stack 1: 0x6
- stack 0: 0x380
631	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x48C
632	 97	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
633	 99	ADD		 	 
- stack 0: 0x490
634	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
635	 9B	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xA0000100BAFFFF00D40008011000080110023000D4FFFC0086000700A0FFFF
636	 9C	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xA0000100BAFFFF00D40008011000080110023000D4FFFC0086000700A0FFFF
- stack 0: 0xF0
637	 9E	SHR		 	 
- stack 1: 0x490
- stack 0: 0xA0
638	 9F	JUMP		 	 
- stack 0: 0x490
639	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x490
640	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
641	 A2	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xA0000100BAFFFF00D40008011000080110023000D4FFFC0086000700A0FFFF
642	 A3	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0xA0000100BAFFFF00D40008011000080110023000D4FFFC0086000700A0FFFF
- stack 0: 0xE0
643	 A5	SHR		 	 
- stack 1: 0x490
- stack 0: 0xA00001
644	 A6	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0xA00001
- stack 0: 0xFFFF
645	 A9	AND		 	 
- stack 1: 0x490
- stack 0: 0x1
646	 AA	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0x1
- stack 0: 0x1
647	 AC	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0x1
648	 AD	PUSH2	0020	 	 
- stack 2: 0x490
- stack 1: 0x1
- stack 0: 0x20
649	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x490
650	 B1	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
651	 B3	ADD		 	 
- stack 0: 0x494
652	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
653	 B5	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xBAFFFF00D40008011000080110023000D4FFFC0086000700A0FFFF00BAFFFE
654	 B6	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xBAFFFF00D40008011000080110023000D4FFFC0086000700A0FFFF00BAFFFE
- stack 0: 0xF0
655	 B8	SHR		 	 
- stack 1: 0x494
- stack 0: 0xBA
656	 B9	JUMP		 	 
- stack 0: 0x494
657	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x494
658	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
659	 BC	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xBAFFFF00D40008011000080110023000D4FFFC0086000700A0FFFF00BAFFFE
660	 BD	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0xBAFFFF00D40008011000080110023000D4FFFC0086000700A0FFFF00BAFFFE
- stack 0: 0xE0
661	 BF	SHR		 	 
- stack 1: 0x494
- stack 0: 0xBAFFFF
662	 C0	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
663	 C3	AND		 	 
- stack 1: 0x494
- stack 0: 0xFFFF
664	 C4	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0xFFFF
- stack 0: 0x1
665	 C6	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
666	 C7	PUSH2	0040	 	 
- stack 2: 0x494
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
667	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x494
668	 CB	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
669	 CD	ADD		 	 
- stack 0: 0x498
670	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
671	 CF	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xD40008011000080110023000D4FFFC0086000700A0FFFF00BAFFFE00D40008
672	 D0	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xD40008011000080110023000D4FFFC0086000700A0FFFF00BAFFFE00D40008
- stack 0: 0xF0
673	 D2	SHR		 	 
- stack 1: 0x498
- stack 0: 0xD4
674	 D3	JUMP		 	 
- stack 0: 0x498
675	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x498
676	 D5	PUSH2	0040	 	 
- stack 1: 0x498
- stack 0: 0x40
677	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x498
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
678	 D9	PUSH1	03	 	 
- stack 2: 0x498
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
679	 DB	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
680	 DC	PUSH2	0020	 	 
- stack 2: 0x498
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
681	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x498
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1
682	 E0	PUSH1	03	 	 
- stack 3: 0x498
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x1
- stack 0: 0x3
683	 E2	SIGNEXTEND		 	 
- stack 2: 0x498
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1
684	 E3	SLT		 	  ;; # BLT
- stack 1: 0x498
- stack 0: 0x0
685	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0xEC
686	 E7	JUMPI		 	 
- stack 0: 0x498
687	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x498
- stack 0: 0x106
688	 EB	JUMP		 	 
- stack 0: 0x498
689	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x498
690	 107	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
691	 109	ADD		 	 
- stack 0: 0x49C
692	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
693	 10B	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x11000080110023000D4FFFC0086000700A0FFFF00BAFFFE00D4000801100008
694	 10C	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x11000080110023000D4FFFC0086000700A0FFFF00BAFFFE00D4000801100008
- stack 0: 0xF0
695	 10E	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x110
696	 10F	JUMP		 	 
- stack 0: 0x49C
697	 110	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x49C
698	 111	PUSH1	00	 	 
- stack 1: 0x49C
- stack 0: 0x0
699	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
700	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0x0
701	 119	PUSH2	0380	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x380
702	 11C	MLOAD		 	  ;; # read from x28
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x6
703	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x49C
- stack 2: 0x0
- stack 1: 0x6
- stack 0: 0xFFFFFFFF
704	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x6
705	 123	SUB		 	 
- stack 1: 0x49C
- stack 0: 0x6
706	 124	PUSH2	012C	 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 2: 0x49C
- stack 1: 0x6
- stack 0: 0x12C
707	 127	JUMPI		 	 
- stack 0: 0x49C
708	 12C	JUMPDEST		 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 0: 0x49C
709	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x49C
- stack 0: 0x49C
710	 12E	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x11000080110023000D4FFFC0086000700A0FFFF00BAFFFE00D4000801100008
711	 12F	PUSH1	E0	 	 
- stack 2: 0x49C
- stack 1: 0x11000080110023000D4FFFC0086000700A0FFFF00BAFFFE00D4000801100008
- stack 0: 0xE0
712	 131	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x1100008
713	 132	PUSH2	FFFF	 	 
- stack 2: 0x49C
- stack 1: 0x1100008
- stack 0: 0xFFFF
714	 135	AND		 	 
- stack 1: 0x49C
- stack 0: 0x8
715	 136	PUSH1	01	 	 
- stack 2: 0x49C
- stack 1: 0x8
- stack 0: 0x1
716	 138	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0x8
717	 139	ADD		 	 
- stack 0: 0x4A4
718	 13A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFF
719	 13F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4A4
720	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
721	 141	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xD4FFFC0086000700A0FFFF00BAFFFE00D40008011000080110021400D4FFFC
722	 142	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0xD4FFFC0086000700A0FFFF00BAFFFE00D40008011000080110021400D4FFFC
- stack 0: 0xF0
723	 144	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xD4
724	 145	JUMP		 	 
- stack 0: 0x4A4
725	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x4A4
726	 D5	PUSH2	0040	 	 
- stack 1: 0x4A4
- stack 0: 0x40
727	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
728	 D9	PUSH1	03	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
729	 DB	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
730	 DC	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
731	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1
732	 E0	PUSH1	03	 	 
- stack 3: 0x4A4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x1
- stack 0: 0x3
733	 E2	SIGNEXTEND		 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1
734	 E3	SLT		 	  ;; # BLT
- stack 1: 0x4A4
- stack 0: 0x0
735	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x4A4
- stack 1: 0x0
- stack 0: 0xEC
736	 E7	JUMPI		 	 
- stack 0: 0x4A4
737	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x4A4
- stack 0: 0x106
738	 EB	JUMP		 	 
- stack 0: 0x4A4
739	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x4A4
740	 107	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
741	 109	ADD		 	 
- stack 0: 0x4A8
742	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
743	 10B	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x86000700A0FFFF00BAFFFE00D40008011000080110021400D4FFFC00860008
744	 10C	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x86000700A0FFFF00BAFFFE00D40008011000080110021400D4FFFC00860008
- stack 0: 0xF0
745	 10E	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x86
746	 10F	JUMP		 	 
- stack 0: 0x4A8
747	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4A8
748	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
749	 88	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x86000700A0FFFF00BAFFFE00D40008011000080110021400D4FFFC00860008
750	 89	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0x86000700A0FFFF00BAFFFE00D40008011000080110021400D4FFFC00860008
- stack 0: 0xE0
751	 8B	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x860007
752	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x860007
- stack 0: 0xFFFF
753	 8F	AND		 	 
- stack 1: 0x4A8
- stack 0: 0x7
754	 90	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0x7
- stack 0: 0x1
755	 92	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0x7
756	 93	PUSH2	0380	 	 
- stack 2: 0x4A8
- stack 1: 0x7
- stack 0: 0x380
757	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4A8
758	 97	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
759	 99	ADD		 	 
- stack 0: 0x4AC
760	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
761	 9B	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xA0FFFF00BAFFFE00D40008011000080110021400D4FFFC0086000800A00001
762	 9C	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xA0FFFF00BAFFFE00D40008011000080110021400D4FFFC0086000800A00001
- stack 0: 0xF0
763	 9E	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xA0
764	 9F	JUMP		 	 
- stack 0: 0x4AC
765	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4AC
766	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
767	 A2	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xA0FFFF00BAFFFE00D40008011000080110021400D4FFFC0086000800A00001
768	 A3	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0xA0FFFF00BAFFFE00D40008011000080110021400D4FFFC0086000800A00001
- stack 0: 0xE0
769	 A5	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xA0FFFF
770	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
771	 A9	AND		 	 
- stack 1: 0x4AC
- stack 0: 0xFFFF
772	 AA	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFF
- stack 0: 0x1
773	 AC	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
774	 AD	PUSH2	0020	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
775	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4AC
776	 B1	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
777	 B3	ADD		 	 
- stack 0: 0x4B0
778	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
779	 B5	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xBAFFFE00D40008011000080110021400D4FFFC0086000800A0000100BAFFFE
780	 B6	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0xBAFFFE00D40008011000080110021400D4FFFC0086000800A0000100BAFFFE
- stack 0: 0xF0
781	 B8	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xBA
782	 B9	JUMP		 	 
- stack 0: 0x4B0
783	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x4B0
784	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
785	 BC	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xBAFFFE00D40008011000080110021400D4FFFC0086000800A0000100BAFFFE
786	 BD	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0xBAFFFE00D40008011000080110021400D4FFFC0086000800A0000100BAFFFE
- stack 0: 0xE0
787	 BF	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xBAFFFE
788	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0xBAFFFE
- stack 0: 0xFFFF
789	 C3	AND		 	 
- stack 1: 0x4B0
- stack 0: 0xFFFE
790	 C4	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0xFFFE
- stack 0: 0x1
791	 C6	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
792	 C7	PUSH2	0040	 	 
- stack 2: 0x4B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x40
793	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4B0
794	 CB	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
795	 CD	ADD		 	 
- stack 0: 0x4B4
796	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
797	 CF	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0xD40008011000080110021400D4FFFC0086000800A0000100BAFFFE00D40008
798	 D0	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0xD40008011000080110021400D4FFFC0086000800A0000100BAFFFE00D40008
- stack 0: 0xF0
799	 D2	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0xD4
800	 D3	JUMP		 	 
- stack 0: 0x4B4
801	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x4B4
802	 D5	PUSH2	0040	 	 
- stack 1: 0x4B4
- stack 0: 0x40
803	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
804	 D9	PUSH1	03	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3
805	 DB	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
806	 DC	PUSH2	0020	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x20
807	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
808	 E0	PUSH1	03	 	 
- stack 3: 0x4B4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
809	 E2	SIGNEXTEND		 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
810	 E3	SLT		 	  ;; # BLT
- stack 1: 0x4B4
- stack 0: 0x0
811	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x4B4
- stack 1: 0x0
- stack 0: 0xEC
812	 E7	JUMPI		 	 
- stack 0: 0x4B4
813	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x4B4
- stack 0: 0x106
814	 EB	JUMP		 	 
- stack 0: 0x4B4
815	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x4B4
816	 107	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
817	 109	ADD		 	 
- stack 0: 0x4B8
818	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
819	 10B	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x11000080110021400D4FFFC0086000800A0000100BAFFFE00D4000801100008
820	 10C	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x11000080110021400D4FFFC0086000800A0000100BAFFFE00D4000801100008
- stack 0: 0xF0
821	 10E	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x110
822	 10F	JUMP		 	 
- stack 0: 0x4B8
823	 110	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x4B8
824	 111	PUSH1	00	 	 
- stack 1: 0x4B8
- stack 0: 0x0
825	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
826	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B8
- stack 0: 0x0
827	 119	PUSH2	0380	 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x380
828	 11C	MLOAD		 	  ;; # read from x28
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x7
829	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B8
- stack 2: 0x0
- stack 1: 0x7
- stack 0: 0xFFFFFFFF
830	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x7
831	 123	SUB		 	 
- stack 1: 0x4B8
- stack 0: 0x7
832	 124	PUSH2	012C	 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 2: 0x4B8
- stack 1: 0x7
- stack 0: 0x12C
833	 127	JUMPI		 	 
- stack 0: 0x4B8
834	 12C	JUMPDEST		 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 0: 0x4B8
835	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
836	 12E	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x11000080110021400D4FFFC0086000800A0000100BAFFFE00D4000801100008
837	 12F	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0x11000080110021400D4FFFC0086000800A0000100BAFFFE00D4000801100008
- stack 0: 0xE0
838	 131	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x1100008
839	 132	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x1100008
- stack 0: 0xFFFF
840	 135	AND		 	 
- stack 1: 0x4B8
- stack 0: 0x8
841	 136	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0x8
- stack 0: 0x1
842	 138	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0x8
843	 139	ADD		 	 
- stack 0: 0x4C0
844	 13A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFF
845	 13F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4C0
846	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
847	 141	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xD4FFFC0086000800A0000100BAFFFE00D4000801100008011001F800D4FFFC
848	 142	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0xD4FFFC0086000800A0000100BAFFFE00D4000801100008011001F800D4FFFC
- stack 0: 0xF0
849	 144	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xD4
850	 145	JUMP		 	 
- stack 0: 0x4C0
851	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x4C0
852	 D5	PUSH2	0040	 	 
- stack 1: 0x4C0
- stack 0: 0x40
853	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
854	 D9	PUSH1	03	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3
855	 DB	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
856	 DC	PUSH2	0020	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x20
857	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
858	 E0	PUSH1	03	 	 
- stack 3: 0x4C0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
859	 E2	SIGNEXTEND		 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
860	 E3	SLT		 	  ;; # BLT
- stack 1: 0x4C0
- stack 0: 0x0
861	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x4C0
- stack 1: 0x0
- stack 0: 0xEC
862	 E7	JUMPI		 	 
- stack 0: 0x4C0
863	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x4C0
- stack 0: 0x106
864	 EB	JUMP		 	 
- stack 0: 0x4C0
865	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x4C0
866	 107	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
867	 109	ADD		 	 
- stack 0: 0x4C4
868	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
869	 10B	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x86000800A0000100BAFFFE00D4000801100008011001F800D4FFFC00860009
870	 10C	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x86000800A0000100BAFFFE00D4000801100008011001F800D4FFFC00860009
- stack 0: 0xF0
871	 10E	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x86
872	 10F	JUMP		 	 
- stack 0: 0x4C4
873	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C4
874	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
875	 88	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x86000800A0000100BAFFFE00D4000801100008011001F800D4FFFC00860009
876	 89	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0x86000800A0000100BAFFFE00D4000801100008011001F800D4FFFC00860009
- stack 0: 0xE0
877	 8B	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x860008
878	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x860008
- stack 0: 0xFFFF
879	 8F	AND		 	 
- stack 1: 0x4C4
- stack 0: 0x8
880	 90	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0x8
- stack 0: 0x1
881	 92	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0x8
882	 93	PUSH2	0380	 	 
- stack 2: 0x4C4
- stack 1: 0x8
- stack 0: 0x380
883	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C4
884	 97	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
885	 99	ADD		 	 
- stack 0: 0x4C8
886	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
887	 9B	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xA0000100BAFFFE00D4000801100008011001F800D4FFFC0086000901500000
888	 9C	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0xA0000100BAFFFE00D4000801100008011001F800D4FFFC0086000901500000
- stack 0: 0xF0
889	 9E	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xA0
890	 9F	JUMP		 	 
- stack 0: 0x4C8
891	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4C8
892	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
893	 A2	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xA0000100BAFFFE00D4000801100008011001F800D4FFFC0086000901500000
894	 A3	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0xA0000100BAFFFE00D4000801100008011001F800D4FFFC0086000901500000
- stack 0: 0xE0
895	 A5	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xA00001
896	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0xA00001
- stack 0: 0xFFFF
897	 A9	AND		 	 
- stack 1: 0x4C8
- stack 0: 0x1
898	 AA	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0x1
- stack 0: 0x1
899	 AC	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0x1
900	 AD	PUSH2	0020	 	 
- stack 2: 0x4C8
- stack 1: 0x1
- stack 0: 0x20
901	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C8
902	 B1	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
903	 B3	ADD		 	 
- stack 0: 0x4CC
904	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
905	 B5	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xBAFFFE00D4000801100008011001F800D4FFFC008600090150000000A00000
906	 B6	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0xBAFFFE00D4000801100008011001F800D4FFFC008600090150000000A00000
- stack 0: 0xF0
907	 B8	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xBA
908	 B9	JUMP		 	 
- stack 0: 0x4CC
909	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x4CC
910	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
911	 BC	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xBAFFFE00D4000801100008011001F800D4FFFC008600090150000000A00000
912	 BD	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0xBAFFFE00D4000801100008011001F800D4FFFC008600090150000000A00000
- stack 0: 0xE0
913	 BF	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xBAFFFE
914	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0xBAFFFE
- stack 0: 0xFFFF
915	 C3	AND		 	 
- stack 1: 0x4CC
- stack 0: 0xFFFE
916	 C4	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0xFFFE
- stack 0: 0x1
917	 C6	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
918	 C7	PUSH2	0040	 	 
- stack 2: 0x4CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x40
919	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4CC
920	 CB	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
921	 CD	ADD		 	 
- stack 0: 0x4D0
922	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
923	 CF	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0xD4000801100008011001F800D4FFFC008600090150000000A0000000BAFFFF
924	 D0	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0xD4000801100008011001F800D4FFFC008600090150000000A0000000BAFFFF
- stack 0: 0xF0
925	 D2	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0xD4
926	 D3	JUMP		 	 
- stack 0: 0x4D0
927	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x4D0
928	 D5	PUSH2	0040	 	 
- stack 1: 0x4D0
- stack 0: 0x40
929	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
930	 D9	PUSH1	03	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3
931	 DB	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
932	 DC	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x20
933	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x1
934	 E0	PUSH1	03	 	 
- stack 3: 0x4D0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 1: 0x1
- stack 0: 0x3
935	 E2	SIGNEXTEND		 	 
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x1
936	 E3	SLT		 	  ;; # BLT
- stack 1: 0x4D0
- stack 0: 0x0
937	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x4D0
- stack 1: 0x0
- stack 0: 0xEC
938	 E7	JUMPI		 	 
- stack 0: 0x4D0
939	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x4D0
- stack 0: 0x106
940	 EB	JUMP		 	 
- stack 0: 0x4D0
941	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x4D0
942	 107	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
943	 109	ADD		 	 
- stack 0: 0x4D4
944	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
945	 10B	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x1100008011001F800D4FFFC008600090150000000A0000000BAFFFF00D401E0
946	 10C	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x1100008011001F800D4FFFC008600090150000000A0000000BAFFFF00D401E0
- stack 0: 0xF0
947	 10E	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x110
948	 10F	JUMP		 	 
- stack 0: 0x4D4
949	 110	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x4D4
950	 111	PUSH1	00	 	 
- stack 1: 0x4D4
- stack 0: 0x0
951	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
952	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D4
- stack 0: 0x0
953	 119	PUSH2	0380	 	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x380
954	 11C	MLOAD		 	  ;; # read from x28
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x8
955	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D4
- stack 2: 0x0
- stack 1: 0x8
- stack 0: 0xFFFFFFFF
956	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x8
957	 123	SUB		 	 
- stack 1: 0x4D4
- stack 0: 0x8
958	 124	PUSH2	012C	 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 2: 0x4D4
- stack 1: 0x8
- stack 0: 0x12C
959	 127	JUMPI		 	 
- stack 0: 0x4D4
960	 12C	JUMPDEST		 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 0: 0x4D4
961	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
962	 12E	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x1100008011001F800D4FFFC008600090150000000A0000000BAFFFF00D401E0
963	 12F	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0x1100008011001F800D4FFFC008600090150000000A0000000BAFFFF00D401E0
- stack 0: 0xE0
964	 131	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x1100008
965	 132	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x1100008
- stack 0: 0xFFFF
966	 135	AND		 	 
- stack 1: 0x4D4
- stack 0: 0x8
967	 136	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0x8
- stack 0: 0x1
968	 138	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0x8
969	 139	ADD		 	 
- stack 0: 0x4DC
970	 13A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4DC
- stack 0: 0xFFFFFFFF
971	 13F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4DC
972	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
973	 141	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xD4FFFC008600090150000000A0000000BAFFFF00D401E0016A000101890002
974	 142	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0xD4FFFC008600090150000000A0000000BAFFFF00D401E0016A000101890002
- stack 0: 0xF0
975	 144	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xD4
976	 145	JUMP		 	 
- stack 0: 0x4DC
977	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x4DC
978	 D5	PUSH2	0040	 	 
- stack 1: 0x4DC
- stack 0: 0x40
979	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
980	 D9	PUSH1	03	 	 
- stack 2: 0x4DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3
981	 DB	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
982	 DC	PUSH2	0020	 	 
- stack 2: 0x4DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x20
983	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x4DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x1
984	 E0	PUSH1	03	 	 
- stack 3: 0x4DC
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 1: 0x1
- stack 0: 0x3
985	 E2	SIGNEXTEND		 	 
- stack 2: 0x4DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x1
986	 E3	SLT		 	  ;; # BLT
- stack 1: 0x4DC
- stack 0: 0x0
987	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0xEC
988	 E7	JUMPI		 	 
- stack 0: 0x4DC
989	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x4DC
- stack 0: 0x106
990	 EB	JUMP		 	 
- stack 0: 0x4DC
991	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x4DC
992	 107	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
993	 109	ADD		 	 
- stack 0: 0x4E0
994	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
995	 10B	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x8600090150000000A0000000BAFFFF00D401E0016A00010189000201A3FFEC
996	 10C	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x8600090150000000A0000000BAFFFF00D401E0016A00010189000201A3FFEC
- stack 0: 0xF0
997	 10E	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x86
998	 10F	JUMP		 	 
- stack 0: 0x4E0
999	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E0
1000	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1001	 88	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x8600090150000000A0000000BAFFFF00D401E0016A00010189000201A3FFEC
1002	 89	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0x8600090150000000A0000000BAFFFF00D401E0016A00010189000201A3FFEC
- stack 0: 0xE0
1003	 8B	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x860009
1004	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x860009
- stack 0: 0xFFFF
1005	 8F	AND		 	 
- stack 1: 0x4E0
- stack 0: 0x9
1006	 90	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0x9
- stack 0: 0x1
1007	 92	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0x9
1008	 93	PUSH2	0380	 	 
- stack 2: 0x4E0
- stack 1: 0x9
- stack 0: 0x380
1009	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E0
1010	 97	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1011	 99	ADD		 	 
- stack 0: 0x4E4
1012	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1013	 9B	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x150000000A0000000BAFFFF00D401E0016A00010189000201A3FFEC0086000A
1014	 9C	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x150000000A0000000BAFFFF00D401E0016A00010189000201A3FFEC0086000A
- stack 0: 0xF0
1015	 9E	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x150
1016	 9F	JUMP		 	 
- stack 0: 0x4E4
1017	 150	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x4E4
1018	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1019	 152	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x150000000A0000000BAFFFF00D401E0016A00010189000201A3FFEC0086000A
1020	 153	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0x150000000A0000000BAFFFF00D401E0016A00010189000201A3FFEC0086000A
- stack 0: 0xE0
1021	 155	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x1500000
1022	 156	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x1500000
- stack 0: 0xFFFF
1023	 159	AND		 	 
- stack 1: 0x4E4
- stack 0: 0x0
1024	 15A	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0x0
- stack 0: 0x1
1025	 15C	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0x0
1026	 15D	PUSH2	0080	 	 
- stack 2: 0x4E4
- stack 1: 0x0
- stack 0: 0x80
1027	 160	MSTORE		 	  ;; # store to x4
- stack 0: 0x4E4
1028	 161	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1029	 163	ADD		 	 
- stack 0: 0x4E8
1030	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1031	 165	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xA0000000BAFFFF00D401E0016A00010189000201A3FFEC0086000A01500000
1032	 166	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0xA0000000BAFFFF00D401E0016A00010189000201A3FFEC0086000A01500000
- stack 0: 0xF0
1033	 168	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xA0
1034	 169	JUMP		 	 
- stack 0: 0x4E8
1035	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4E8
1036	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1037	 A2	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xA0000000BAFFFF00D401E0016A00010189000201A3FFEC0086000A01500000
1038	 A3	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0xA0000000BAFFFF00D401E0016A00010189000201A3FFEC0086000A01500000
- stack 0: 0xE0
1039	 A5	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xA00000
1040	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0xA00000
- stack 0: 0xFFFF
1041	 A9	AND		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1042	 AA	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x1
1043	 AC	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1044	 AD	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x20
1045	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E8
1046	 B1	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1047	 B3	ADD		 	 
- stack 0: 0x4EC
1048	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1049	 B5	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xBAFFFF00D401E0016A00010189000201A3FFEC0086000A0150000000A00000
1050	 B6	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0xBAFFFF00D401E0016A00010189000201A3FFEC0086000A0150000000A00000
- stack 0: 0xF0
1051	 B8	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xBA
1052	 B9	JUMP		 	 
- stack 0: 0x4EC
1053	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x4EC
1054	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1055	 BC	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xBAFFFF00D401E0016A00010189000201A3FFEC0086000A0150000000A00000
1056	 BD	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0xBAFFFF00D401E0016A00010189000201A3FFEC0086000A0150000000A00000
- stack 0: 0xE0
1057	 BF	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xBAFFFF
1058	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
1059	 C3	AND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFF
1060	 C4	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFF
- stack 0: 0x1
1061	 C6	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1062	 C7	PUSH2	0040	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1063	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4EC
1064	 CB	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1065	 CD	ADD		 	 
- stack 0: 0x4F0
1066	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1067	 CF	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xD401E0016A00010189000201A3FFEC0086000A0150000000A0000000BAFFFF
1068	 D0	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xD401E0016A00010189000201A3FFEC0086000A0150000000A0000000BAFFFF
- stack 0: 0xF0
1069	 D2	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xD4
1070	 D3	JUMP		 	 
- stack 0: 0x4F0
1071	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x4F0
1072	 D5	PUSH2	0040	 	 
- stack 1: 0x4F0
- stack 0: 0x40
1073	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1074	 D9	PUSH1	03	 	 
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1075	 DB	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1076	 DC	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1077	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1078	 E0	PUSH1	03	 	 
- stack 3: 0x4F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
1079	 E2	SIGNEXTEND		 	 
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1080	 E3	SLT		 	  ;; # BLT
- stack 1: 0x4F0
- stack 0: 0x0
1081	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0xEC
1082	 E7	JUMPI		 	 
- stack 0: 0x4F0
1083	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x4F0
- stack 0: 0x106
1084	 EB	JUMP		 	 
- stack 0: 0x4F0
1085	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x4F0
1086	 107	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1087	 109	ADD		 	 
- stack 0: 0x4F4
1088	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1089	 10B	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x16A00010189000201A3FFEC0086000A0150000000A0000000BAFFFF01E50000
1090	 10C	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x16A00010189000201A3FFEC0086000A0150000000A0000000BAFFFF01E50000
- stack 0: 0xF0
1091	 10E	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x16A
1092	 10F	JUMP		 	 
- stack 0: 0x4F4
1093	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4F4
1094	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1095	 16C	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x16A00010189000201A3FFEC0086000A0150000000A0000000BAFFFF01E50000
1096	 16D	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x16A00010189000201A3FFEC0086000A0150000000A0000000BAFFFF01E50000
- stack 0: 0xE0
1097	 16F	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x16A0001
1098	 170	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x16A0001
- stack 0: 0xFFFF
1099	 173	AND		 	 
- stack 1: 0x4F4
- stack 0: 0x1
1100	 174	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x1
1101	 176	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0x1
1102	 177	PUSH2	0080	 	 
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x80
1103	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x0
1104	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x4F4
- stack 0: 0x1
1105	 17C	PUSH2	0080	 	 
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x80
1106	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x4F4
1107	 180	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1108	 182	ADD		 	 
- stack 0: 0x4F8
1109	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1110	 184	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x189000201A3FFEC0086000A0150000000A0000000BAFFFF01E5000000D401BC
1111	 185	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x189000201A3FFEC0086000A0150000000A0000000BAFFFF01E5000000D401BC
- stack 0: 0xF0
1112	 187	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x189
1113	 188	JUMP		 	 
- stack 0: 0x4F8
1114	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4F8
1115	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1116	 18B	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x189000201A3FFEC0086000A0150000000A0000000BAFFFF01E5000000D401BC
1117	 18C	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x189000201A3FFEC0086000A0150000000A0000000BAFFFF01E5000000D401BC
- stack 0: 0xE0
1118	 18E	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x1890002
1119	 18F	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x1890002
- stack 0: 0xFFFF
1120	 192	AND		 	 
- stack 1: 0x4F8
- stack 0: 0x2
1121	 193	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x2
- stack 0: 0x1
1122	 195	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x2
1123	 196	PUSH2	00A0	 	 
- stack 2: 0x4F8
- stack 1: 0x2
- stack 0: 0xA0
1124	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x4F8
1125	 19A	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1126	 19C	ADD		 	 
- stack 0: 0x4FC
1127	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1128	 19E	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1A3FFEC0086000A0150000000A0000000BAFFFF01E5000000D401BC016A0001
1129	 19F	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x1A3FFEC0086000A0150000000A0000000BAFFFF01E5000000D401BC016A0001
- stack 0: 0xF0
1130	 1A1	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1A3
1131	 1A2	JUMP		 	 
- stack 0: 0x4FC
1132	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x4FC
1133	 1A4	PUSH2	0080	 	 
- stack 1: 0x4FC
- stack 0: 0x80
1134	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x4FC
- stack 0: 0x1
1135	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1136	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0x1
1137	 1AE	PUSH2	00A0	 	 
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0xA0
1138	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x2
1139	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4FC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1140	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x2
1141	 1B8	SUB		 	 
- stack 1: 0x4FC
- stack 0: 0x1
1142	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x1C1
1143	 1BC	JUMPI		 	 
- stack 0: 0x4FC
1144	 1C1	JUMPDEST		 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x4FC
1145	 1C2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1146	 1C3	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1A3FFEC0086000A0150000000A0000000BAFFFF01E5000000D401BC016A0001
1147	 1C4	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x1A3FFEC0086000A0150000000A0000000BAFFFF01E5000000D401BC016A0001
- stack 0: 0xE0
1148	 1C6	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1A3FFEC
1149	 1C7	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x1A3FFEC
- stack 0: 0xFFFF
1150	 1CA	AND		 	 
- stack 1: 0x4FC
- stack 0: 0xFFEC
1151	 1CB	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0xFFEC
- stack 0: 0x1
1152	 1CD	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
1153	 1CE	ADD		 	 
- stack 0: 0x4E8
1154	 1CF	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4E8
- stack 0: 0xFFFFFFFF
1155	 1D4	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4E8
1156	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1157	 1D6	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xA0000000BAFFFF00D401E0016A00010189000201A3FFEC0086000A01500000
1158	 1D7	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0xA0000000BAFFFF00D401E0016A00010189000201A3FFEC0086000A01500000
- stack 0: 0xF0
1159	 1D9	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xA0
1160	 1DA	JUMP		 	 
- stack 0: 0x4E8
1161	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4E8
1162	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1163	 A2	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xA0000000BAFFFF00D401E0016A00010189000201A3FFEC0086000A01500000
1164	 A3	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0xA0000000BAFFFF00D401E0016A00010189000201A3FFEC0086000A01500000
- stack 0: 0xE0
1165	 A5	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xA00000
1166	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0xA00000
- stack 0: 0xFFFF
1167	 A9	AND		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1168	 AA	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x1
1169	 AC	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1170	 AD	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x20
1171	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E8
1172	 B1	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1173	 B3	ADD		 	 
- stack 0: 0x4EC
1174	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1175	 B5	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xBAFFFF00D401E0016A00010189000201A3FFEC0086000A0150000000A00000
1176	 B6	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0xBAFFFF00D401E0016A00010189000201A3FFEC0086000A0150000000A00000
- stack 0: 0xF0
1177	 B8	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xBA
1178	 B9	JUMP		 	 
- stack 0: 0x4EC
1179	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x4EC
1180	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1181	 BC	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xBAFFFF00D401E0016A00010189000201A3FFEC0086000A0150000000A00000
1182	 BD	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0xBAFFFF00D401E0016A00010189000201A3FFEC0086000A0150000000A00000
- stack 0: 0xE0
1183	 BF	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xBAFFFF
1184	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
1185	 C3	AND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFF
1186	 C4	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFF
- stack 0: 0x1
1187	 C6	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1188	 C7	PUSH2	0040	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1189	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4EC
1190	 CB	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1191	 CD	ADD		 	 
- stack 0: 0x4F0
1192	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1193	 CF	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xD401E0016A00010189000201A3FFEC0086000A0150000000A0000000BAFFFF
1194	 D0	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xD401E0016A00010189000201A3FFEC0086000A0150000000A0000000BAFFFF
- stack 0: 0xF0
1195	 D2	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xD4
1196	 D3	JUMP		 	 
- stack 0: 0x4F0
1197	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x4F0
1198	 D5	PUSH2	0040	 	 
- stack 1: 0x4F0
- stack 0: 0x40
1199	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1200	 D9	PUSH1	03	 	 
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1201	 DB	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1202	 DC	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1203	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1204	 E0	PUSH1	03	 	 
- stack 3: 0x4F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
1205	 E2	SIGNEXTEND		 	 
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1206	 E3	SLT		 	  ;; # BLT
- stack 1: 0x4F0
- stack 0: 0x0
1207	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0xEC
1208	 E7	JUMPI		 	 
- stack 0: 0x4F0
1209	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x4F0
- stack 0: 0x106
1210	 EB	JUMP		 	 
- stack 0: 0x4F0
1211	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x4F0
1212	 107	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1213	 109	ADD		 	 
- stack 0: 0x4F4
1214	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1215	 10B	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x16A00010189000201A3FFEC0086000A0150000000A0000000BAFFFF01E50000
1216	 10C	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x16A00010189000201A3FFEC0086000A0150000000A0000000BAFFFF01E50000
- stack 0: 0xF0
1217	 10E	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x16A
1218	 10F	JUMP		 	 
- stack 0: 0x4F4
1219	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4F4
1220	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1221	 16C	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x16A00010189000201A3FFEC0086000A0150000000A0000000BAFFFF01E50000
1222	 16D	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x16A00010189000201A3FFEC0086000A0150000000A0000000BAFFFF01E50000
- stack 0: 0xE0
1223	 16F	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x16A0001
1224	 170	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x16A0001
- stack 0: 0xFFFF
1225	 173	AND		 	 
- stack 1: 0x4F4
- stack 0: 0x1
1226	 174	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x1
1227	 176	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0x1
1228	 177	PUSH2	0080	 	 
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x80
1229	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x1
1230	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x4F4
- stack 0: 0x2
1231	 17C	PUSH2	0080	 	 
- stack 2: 0x4F4
- stack 1: 0x2
- stack 0: 0x80
1232	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x4F4
1233	 180	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1234	 182	ADD		 	 
- stack 0: 0x4F8
1235	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1236	 184	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x189000201A3FFEC0086000A0150000000A0000000BAFFFF01E5000000D401BC
1237	 185	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x189000201A3FFEC0086000A0150000000A0000000BAFFFF01E5000000D401BC
- stack 0: 0xF0
1238	 187	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x189
1239	 188	JUMP		 	 
- stack 0: 0x4F8
1240	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4F8
1241	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1242	 18B	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x189000201A3FFEC0086000A0150000000A0000000BAFFFF01E5000000D401BC
1243	 18C	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x189000201A3FFEC0086000A0150000000A0000000BAFFFF01E5000000D401BC
- stack 0: 0xE0
1244	 18E	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x1890002
1245	 18F	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x1890002
- stack 0: 0xFFFF
1246	 192	AND		 	 
- stack 1: 0x4F8
- stack 0: 0x2
1247	 193	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x2
- stack 0: 0x1
1248	 195	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x2
1249	 196	PUSH2	00A0	 	 
- stack 2: 0x4F8
- stack 1: 0x2
- stack 0: 0xA0
1250	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x4F8
1251	 19A	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1252	 19C	ADD		 	 
- stack 0: 0x4FC
1253	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1254	 19E	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1A3FFEC0086000A0150000000A0000000BAFFFF01E5000000D401BC016A0001
1255	 19F	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x1A3FFEC0086000A0150000000A0000000BAFFFF01E5000000D401BC016A0001
- stack 0: 0xF0
1256	 1A1	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1A3
1257	 1A2	JUMP		 	 
- stack 0: 0x4FC
1258	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x4FC
1259	 1A4	PUSH2	0080	 	 
- stack 1: 0x4FC
- stack 0: 0x80
1260	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x4FC
- stack 0: 0x2
1261	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1262	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0x2
1263	 1AE	PUSH2	00A0	 	 
- stack 2: 0x4FC
- stack 1: 0x2
- stack 0: 0xA0
1264	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x4FC
- stack 1: 0x2
- stack 0: 0x2
1265	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4FC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1266	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4FC
- stack 1: 0x2
- stack 0: 0x2
1267	 1B8	SUB		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1268	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x1C1
1269	 1BC	JUMPI		 	 
- stack 0: 0x4FC
1270	 1BD	PUSH2	01DB	 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 1: 0x4FC
- stack 0: 0x1DB
1271	 1C0	JUMP		 	 
- stack 0: 0x4FC
1272	 1DB	JUMPDEST		 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x4FC
1273	 1DC	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1274	 1DE	ADD		 	 
- stack 0: 0x500
1275	 1DF	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1276	 1E0	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x86000A0150000000A0000000BAFFFF01E5000000D401BC016A000101890002
1277	 1E1	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x86000A0150000000A0000000BAFFFF01E5000000D401BC016A000101890002
- stack 0: 0xF0
1278	 1E3	SHR		 	 
- stack 1: 0x500
- stack 0: 0x86
1279	 1E4	JUMP		 	 
- stack 0: 0x500
1280	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x500
1281	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1282	 88	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x86000A0150000000A0000000BAFFFF01E5000000D401BC016A000101890002
1283	 89	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x86000A0150000000A0000000BAFFFF01E5000000D401BC016A000101890002
- stack 0: 0xE0
1284	 8B	SHR		 	 
- stack 1: 0x500
- stack 0: 0x86000A
1285	 8C	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x86000A
- stack 0: 0xFFFF
1286	 8F	AND		 	 
- stack 1: 0x500
- stack 0: 0xA
1287	 90	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0xA
- stack 0: 0x1
1288	 92	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0xA
1289	 93	PUSH2	0380	 	 
- stack 2: 0x500
- stack 1: 0xA
- stack 0: 0x380
1290	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x500
1291	 97	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1292	 99	ADD		 	 
- stack 0: 0x504
1293	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1294	 9B	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x150000000A0000000BAFFFF01E5000000D401BC016A00010189000201A3FFE8
1295	 9C	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x150000000A0000000BAFFFF01E5000000D401BC016A00010189000201A3FFE8
- stack 0: 0xF0
1296	 9E	SHR		 	 
- stack 1: 0x504
- stack 0: 0x150
1297	 9F	JUMP		 	 
- stack 0: 0x504
1298	 150	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x504
1299	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1300	 152	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x150000000A0000000BAFFFF01E5000000D401BC016A00010189000201A3FFE8
1301	 153	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x150000000A0000000BAFFFF01E5000000D401BC016A00010189000201A3FFE8
- stack 0: 0xE0
1302	 155	SHR		 	 
- stack 1: 0x504
- stack 0: 0x1500000
1303	 156	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x1500000
- stack 0: 0xFFFF
1304	 159	AND		 	 
- stack 1: 0x504
- stack 0: 0x0
1305	 15A	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x1
1306	 15C	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0x0
1307	 15D	PUSH2	0080	 	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x80
1308	 160	MSTORE		 	  ;; # store to x4
- stack 0: 0x504
1309	 161	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1310	 163	ADD		 	 
- stack 0: 0x508
1311	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1312	 165	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xA0000000BAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B
1313	 166	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xA0000000BAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B
- stack 0: 0xF0
1314	 168	SHR		 	 
- stack 1: 0x508
- stack 0: 0xA0
1315	 169	JUMP		 	 
- stack 0: 0x508
1316	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x508
1317	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1318	 A2	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xA0000000BAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B
1319	 A3	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0xA0000000BAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B
- stack 0: 0xE0
1320	 A5	SHR		 	 
- stack 1: 0x508
- stack 0: 0xA00000
1321	 A6	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0xA00000
- stack 0: 0xFFFF
1322	 A9	AND		 	 
- stack 1: 0x508
- stack 0: 0x0
1323	 AA	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x1
1324	 AC	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0x0
1325	 AD	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x20
1326	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x508
1327	 B1	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1328	 B3	ADD		 	 
- stack 0: 0x50C
1329	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1330	 B5	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xBAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B01500000
1331	 B6	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xBAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B01500000
- stack 0: 0xF0
1332	 B8	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xBA
1333	 B9	JUMP		 	 
- stack 0: 0x50C
1334	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x50C
1335	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1336	 BC	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xBAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B01500000
1337	 BD	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0xBAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B01500000
- stack 0: 0xE0
1338	 BF	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xBAFFFF
1339	 C0	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
1340	 C3	AND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFF
1341	 C4	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xFFFF
- stack 0: 0x1
1342	 C6	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1343	 C7	PUSH2	0040	 	 
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1344	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x50C
1345	 CB	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1346	 CD	ADD		 	 
- stack 0: 0x510
1347	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1348	 CF	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1E5000000D401BC016A00010189000201A3FFE80086000B0150000000A00000
1349	 D0	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x1E5000000D401BC016A00010189000201A3FFE80086000B0150000000A00000
- stack 0: 0xF0
1350	 D2	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1E5
1351	 D3	JUMP		 	 
- stack 0: 0x510
1352	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x510
1353	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1354	 1E7	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1E5000000D401BC016A00010189000201A3FFE80086000B0150000000A00000
1355	 1E8	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0x1E5000000D401BC016A00010189000201A3FFE80086000B0150000000A00000
- stack 0: 0xE0
1356	 1EA	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1E50000
1357	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0x1E50000
- stack 0: 0xFFFF
1358	 1EE	AND		 	 
- stack 1: 0x510
- stack 0: 0x0
1359	 1EF	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x0
- stack 0: 0x1
1360	 1F1	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0x0
1361	 1F2	POP		 	 
- stack 0: 0x510
1362	 1F3	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1363	 1F5	ADD		 	 
- stack 0: 0x514
1364	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1365	 1F7	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xD401BC016A00010189000201A3FFE80086000B0150000000A0000000BAFFFF
1366	 1F8	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xD401BC016A00010189000201A3FFE80086000B0150000000A0000000BAFFFF
- stack 0: 0xF0
1367	 1FA	SHR		 	 
- stack 1: 0x514
- stack 0: 0xD4
1368	 1FB	JUMP		 	 
- stack 0: 0x514
1369	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x514
1370	 D5	PUSH2	0040	 	 
- stack 1: 0x514
- stack 0: 0x40
1371	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x514
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1372	 D9	PUSH1	03	 	 
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1373	 DB	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1374	 DC	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1375	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1376	 E0	PUSH1	03	 	 
- stack 3: 0x514
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
1377	 E2	SIGNEXTEND		 	 
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1378	 E3	SLT		 	  ;; # BLT
- stack 1: 0x514
- stack 0: 0x0
1379	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0xEC
1380	 E7	JUMPI		 	 
- stack 0: 0x514
1381	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x514
- stack 0: 0x106
1382	 EB	JUMP		 	 
- stack 0: 0x514
1383	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x514
1384	 107	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1385	 109	ADD		 	 
- stack 0: 0x518
1386	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1387	 10B	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x16A00010189000201A3FFE80086000B0150000000A0000000BAFFFF01E50000
1388	 10C	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x16A00010189000201A3FFE80086000B0150000000A0000000BAFFFF01E50000
- stack 0: 0xF0
1389	 10E	SHR		 	 
- stack 1: 0x518
- stack 0: 0x16A
1390	 10F	JUMP		 	 
- stack 0: 0x518
1391	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x518
1392	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1393	 16C	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x16A00010189000201A3FFE80086000B0150000000A0000000BAFFFF01E50000
1394	 16D	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x16A00010189000201A3FFE80086000B0150000000A0000000BAFFFF01E50000
- stack 0: 0xE0
1395	 16F	SHR		 	 
- stack 1: 0x518
- stack 0: 0x16A0001
1396	 170	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x16A0001
- stack 0: 0xFFFF
1397	 173	AND		 	 
- stack 1: 0x518
- stack 0: 0x1
1398	 174	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x1
1399	 176	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x1
1400	 177	PUSH2	0080	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x80
1401	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x0
1402	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x518
- stack 0: 0x1
1403	 17C	PUSH2	0080	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x80
1404	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x518
1405	 180	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1406	 182	ADD		 	 
- stack 0: 0x51C
1407	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1408	 184	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x189000201A3FFE80086000B0150000000A0000000BAFFFF01E5000001E50000
1409	 185	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x189000201A3FFE80086000B0150000000A0000000BAFFFF01E5000001E50000
- stack 0: 0xF0
1410	 187	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x189
1411	 188	JUMP		 	 
- stack 0: 0x51C
1412	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x51C
1413	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1414	 18B	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x189000201A3FFE80086000B0150000000A0000000BAFFFF01E5000001E50000
1415	 18C	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x189000201A3FFE80086000B0150000000A0000000BAFFFF01E5000001E50000
- stack 0: 0xE0
1416	 18E	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x1890002
1417	 18F	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x1890002
- stack 0: 0xFFFF
1418	 192	AND		 	 
- stack 1: 0x51C
- stack 0: 0x2
1419	 193	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0x1
1420	 195	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x2
1421	 196	PUSH2	00A0	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0xA0
1422	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x51C
1423	 19A	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1424	 19C	ADD		 	 
- stack 0: 0x520
1425	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1426	 19E	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x1A3FFE80086000B0150000000A0000000BAFFFF01E5000001E5000000D40194
1427	 19F	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x1A3FFE80086000B0150000000A0000000BAFFFF01E5000001E5000000D40194
- stack 0: 0xF0
1428	 1A1	SHR		 	 
- stack 1: 0x520
- stack 0: 0x1A3
1429	 1A2	JUMP		 	 
- stack 0: 0x520
1430	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x520
1431	 1A4	PUSH2	0080	 	 
- stack 1: 0x520
- stack 0: 0x80
1432	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x520
- stack 0: 0x1
1433	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1434	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x520
- stack 0: 0x1
1435	 1AE	PUSH2	00A0	 	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0xA0
1436	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x2
1437	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x520
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1438	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x2
1439	 1B8	SUB		 	 
- stack 1: 0x520
- stack 0: 0x1
1440	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x1C1
1441	 1BC	JUMPI		 	 
- stack 0: 0x520
1442	 1C1	JUMPDEST		 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x520
1443	 1C2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1444	 1C3	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x1A3FFE80086000B0150000000A0000000BAFFFF01E5000001E5000000D40194
1445	 1C4	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x1A3FFE80086000B0150000000A0000000BAFFFF01E5000001E5000000D40194
- stack 0: 0xE0
1446	 1C6	SHR		 	 
- stack 1: 0x520
- stack 0: 0x1A3FFE8
1447	 1C7	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x1A3FFE8
- stack 0: 0xFFFF
1448	 1CA	AND		 	 
- stack 1: 0x520
- stack 0: 0xFFE8
1449	 1CB	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0xFFE8
- stack 0: 0x1
1450	 1CD	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
1451	 1CE	ADD		 	 
- stack 0: 0x508
1452	 1CF	PUSH4	FFFFFFFF	 	 
- stack 1: 0x508
- stack 0: 0xFFFFFFFF
1453	 1D4	AND		 	  ;; # mask to 32 bits
- stack 0: 0x508
1454	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1455	 1D6	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xA0000000BAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B
1456	 1D7	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xA0000000BAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B
- stack 0: 0xF0
1457	 1D9	SHR		 	 
- stack 1: 0x508
- stack 0: 0xA0
1458	 1DA	JUMP		 	 
- stack 0: 0x508
1459	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x508
1460	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1461	 A2	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xA0000000BAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B
1462	 A3	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0xA0000000BAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B
- stack 0: 0xE0
1463	 A5	SHR		 	 
- stack 1: 0x508
- stack 0: 0xA00000
1464	 A6	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0xA00000
- stack 0: 0xFFFF
1465	 A9	AND		 	 
- stack 1: 0x508
- stack 0: 0x0
1466	 AA	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x1
1467	 AC	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0x0
1468	 AD	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x20
1469	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x508
1470	 B1	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1471	 B3	ADD		 	 
- stack 0: 0x50C
1472	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1473	 B5	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xBAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B01500000
1474	 B6	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xBAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B01500000
- stack 0: 0xF0
1475	 B8	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xBA
1476	 B9	JUMP		 	 
- stack 0: 0x50C
1477	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x50C
1478	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1479	 BC	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xBAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B01500000
1480	 BD	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0xBAFFFF01E5000000D401BC016A00010189000201A3FFE80086000B01500000
- stack 0: 0xE0
1481	 BF	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xBAFFFF
1482	 C0	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
1483	 C3	AND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFF
1484	 C4	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xFFFF
- stack 0: 0x1
1485	 C6	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1486	 C7	PUSH2	0040	 	 
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1487	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x50C
1488	 CB	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1489	 CD	ADD		 	 
- stack 0: 0x510
1490	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1491	 CF	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1E5000000D401BC016A00010189000201A3FFE80086000B0150000000A00000
1492	 D0	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x1E5000000D401BC016A00010189000201A3FFE80086000B0150000000A00000
- stack 0: 0xF0
1493	 D2	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1E5
1494	 D3	JUMP		 	 
- stack 0: 0x510
1495	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x510
1496	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1497	 1E7	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1E5000000D401BC016A00010189000201A3FFE80086000B0150000000A00000
1498	 1E8	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0x1E5000000D401BC016A00010189000201A3FFE80086000B0150000000A00000
- stack 0: 0xE0
1499	 1EA	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1E50000
1500	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0x1E50000
- stack 0: 0xFFFF
1501	 1EE	AND		 	 
- stack 1: 0x510
- stack 0: 0x0
1502	 1EF	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x0
- stack 0: 0x1
1503	 1F1	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0x0
1504	 1F2	POP		 	 
- stack 0: 0x510
1505	 1F3	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1506	 1F5	ADD		 	 
- stack 0: 0x514
1507	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1508	 1F7	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xD401BC016A00010189000201A3FFE80086000B0150000000A0000000BAFFFF
1509	 1F8	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xD401BC016A00010189000201A3FFE80086000B0150000000A0000000BAFFFF
- stack 0: 0xF0
1510	 1FA	SHR		 	 
- stack 1: 0x514
- stack 0: 0xD4
1511	 1FB	JUMP		 	 
- stack 0: 0x514
1512	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x514
1513	 D5	PUSH2	0040	 	 
- stack 1: 0x514
- stack 0: 0x40
1514	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x514
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1515	 D9	PUSH1	03	 	 
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1516	 DB	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1517	 DC	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1518	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1519	 E0	PUSH1	03	 	 
- stack 3: 0x514
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
1520	 E2	SIGNEXTEND		 	 
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1521	 E3	SLT		 	  ;; # BLT
- stack 1: 0x514
- stack 0: 0x0
1522	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0xEC
1523	 E7	JUMPI		 	 
- stack 0: 0x514
1524	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x514
- stack 0: 0x106
1525	 EB	JUMP		 	 
- stack 0: 0x514
1526	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x514
1527	 107	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1528	 109	ADD		 	 
- stack 0: 0x518
1529	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1530	 10B	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x16A00010189000201A3FFE80086000B0150000000A0000000BAFFFF01E50000
1531	 10C	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x16A00010189000201A3FFE80086000B0150000000A0000000BAFFFF01E50000
- stack 0: 0xF0
1532	 10E	SHR		 	 
- stack 1: 0x518
- stack 0: 0x16A
1533	 10F	JUMP		 	 
- stack 0: 0x518
1534	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x518
1535	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1536	 16C	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x16A00010189000201A3FFE80086000B0150000000A0000000BAFFFF01E50000
1537	 16D	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x16A00010189000201A3FFE80086000B0150000000A0000000BAFFFF01E50000
- stack 0: 0xE0
1538	 16F	SHR		 	 
- stack 1: 0x518
- stack 0: 0x16A0001
1539	 170	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x16A0001
- stack 0: 0xFFFF
1540	 173	AND		 	 
- stack 1: 0x518
- stack 0: 0x1
1541	 174	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x1
1542	 176	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x1
1543	 177	PUSH2	0080	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x80
1544	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x1
1545	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x518
- stack 0: 0x2
1546	 17C	PUSH2	0080	 	 
- stack 2: 0x518
- stack 1: 0x2
- stack 0: 0x80
1547	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x518
1548	 180	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1549	 182	ADD		 	 
- stack 0: 0x51C
1550	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1551	 184	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x189000201A3FFE80086000B0150000000A0000000BAFFFF01E5000001E50000
1552	 185	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x189000201A3FFE80086000B0150000000A0000000BAFFFF01E5000001E50000
- stack 0: 0xF0
1553	 187	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x189
1554	 188	JUMP		 	 
- stack 0: 0x51C
1555	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x51C
1556	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1557	 18B	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x189000201A3FFE80086000B0150000000A0000000BAFFFF01E5000001E50000
1558	 18C	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x189000201A3FFE80086000B0150000000A0000000BAFFFF01E5000001E50000
- stack 0: 0xE0
1559	 18E	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x1890002
1560	 18F	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x1890002
- stack 0: 0xFFFF
1561	 192	AND		 	 
- stack 1: 0x51C
- stack 0: 0x2
1562	 193	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0x1
1563	 195	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x2
1564	 196	PUSH2	00A0	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0xA0
1565	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x51C
1566	 19A	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1567	 19C	ADD		 	 
- stack 0: 0x520
1568	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1569	 19E	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x1A3FFE80086000B0150000000A0000000BAFFFF01E5000001E5000000D40194
1570	 19F	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x1A3FFE80086000B0150000000A0000000BAFFFF01E5000001E5000000D40194
- stack 0: 0xF0
1571	 1A1	SHR		 	 
- stack 1: 0x520
- stack 0: 0x1A3
1572	 1A2	JUMP		 	 
- stack 0: 0x520
1573	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x520
1574	 1A4	PUSH2	0080	 	 
- stack 1: 0x520
- stack 0: 0x80
1575	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x520
- stack 0: 0x2
1576	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1577	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x520
- stack 0: 0x2
1578	 1AE	PUSH2	00A0	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0xA0
1579	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0x2
1580	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x520
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1581	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0x2
1582	 1B8	SUB		 	 
- stack 1: 0x520
- stack 0: 0x0
1583	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x520
- stack 1: 0x0
- stack 0: 0x1C1
1584	 1BC	JUMPI		 	 
- stack 0: 0x520
1585	 1BD	PUSH2	01DB	 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 1: 0x520
- stack 0: 0x1DB
1586	 1C0	JUMP		 	 
- stack 0: 0x520
1587	 1DB	JUMPDEST		 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x520
1588	 1DC	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1589	 1DE	ADD		 	 
- stack 0: 0x524
1590	 1DF	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1591	 1E0	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x86000B0150000000A0000000BAFFFF01E5000001E5000000D40194016A0001
1592	 1E1	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x86000B0150000000A0000000BAFFFF01E5000001E5000000D40194016A0001
- stack 0: 0xF0
1593	 1E3	SHR		 	 
- stack 1: 0x524
- stack 0: 0x86
1594	 1E4	JUMP		 	 
- stack 0: 0x524
1595	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x524
1596	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1597	 88	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x86000B0150000000A0000000BAFFFF01E5000001E5000000D40194016A0001
1598	 89	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x86000B0150000000A0000000BAFFFF01E5000001E5000000D40194016A0001
- stack 0: 0xE0
1599	 8B	SHR		 	 
- stack 1: 0x524
- stack 0: 0x86000B
1600	 8C	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x86000B
- stack 0: 0xFFFF
1601	 8F	AND		 	 
- stack 1: 0x524
- stack 0: 0xB
1602	 90	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0xB
- stack 0: 0x1
1603	 92	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xB
1604	 93	PUSH2	0380	 	 
- stack 2: 0x524
- stack 1: 0xB
- stack 0: 0x380
1605	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x524
1606	 97	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1607	 99	ADD		 	 
- stack 0: 0x528
1608	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1609	 9B	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x150000000A0000000BAFFFF01E5000001E5000000D40194016A000101890002
1610	 9C	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x150000000A0000000BAFFFF01E5000001E5000000D40194016A000101890002
- stack 0: 0xF0
1611	 9E	SHR		 	 
- stack 1: 0x528
- stack 0: 0x150
1612	 9F	JUMP		 	 
- stack 0: 0x528
1613	 150	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x528
1614	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1615	 152	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x150000000A0000000BAFFFF01E5000001E5000000D40194016A000101890002
1616	 153	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x150000000A0000000BAFFFF01E5000001E5000000D40194016A000101890002
- stack 0: 0xE0
1617	 155	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1500000
1618	 156	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x1500000
- stack 0: 0xFFFF
1619	 159	AND		 	 
- stack 1: 0x528
- stack 0: 0x0
1620	 15A	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0x0
- stack 0: 0x1
1621	 15C	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0x0
1622	 15D	PUSH2	0080	 	 
- stack 2: 0x528
- stack 1: 0x0
- stack 0: 0x80
1623	 160	MSTORE		 	  ;; # store to x4
- stack 0: 0x528
1624	 161	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1625	 163	ADD		 	 
- stack 0: 0x52C
1626	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1627	 165	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xA0000000BAFFFF01E5000001E5000000D40194016A00010189000201A3FFE4
1628	 166	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0xA0000000BAFFFF01E5000001E5000000D40194016A00010189000201A3FFE4
- stack 0: 0xF0
1629	 168	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xA0
1630	 169	JUMP		 	 
- stack 0: 0x52C
1631	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x52C
1632	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1633	 A2	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xA0000000BAFFFF01E5000001E5000000D40194016A00010189000201A3FFE4
1634	 A3	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0xA0000000BAFFFF01E5000001E5000000D40194016A00010189000201A3FFE4
- stack 0: 0xE0
1635	 A5	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xA00000
1636	 A6	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0xA00000
- stack 0: 0xFFFF
1637	 A9	AND		 	 
- stack 1: 0x52C
- stack 0: 0x0
1638	 AA	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x1
1639	 AC	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x0
1640	 AD	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x20
1641	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x52C
1642	 B1	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1643	 B3	ADD		 	 
- stack 0: 0x530
1644	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1645	 B5	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xBAFFFF01E5000001E5000000D40194016A00010189000201A3FFE40086000C
1646	 B6	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0xBAFFFF01E5000001E5000000D40194016A00010189000201A3FFE40086000C
- stack 0: 0xF0
1647	 B8	SHR		 	 
- stack 1: 0x530
- stack 0: 0xBA
1648	 B9	JUMP		 	 
- stack 0: 0x530
1649	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x530
1650	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1651	 BC	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xBAFFFF01E5000001E5000000D40194016A00010189000201A3FFE40086000C
1652	 BD	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0xBAFFFF01E5000001E5000000D40194016A00010189000201A3FFE40086000C
- stack 0: 0xE0
1653	 BF	SHR		 	 
- stack 1: 0x530
- stack 0: 0xBAFFFF
1654	 C0	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
1655	 C3	AND		 	 
- stack 1: 0x530
- stack 0: 0xFFFF
1656	 C4	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0xFFFF
- stack 0: 0x1
1657	 C6	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1658	 C7	PUSH2	0040	 	 
- stack 2: 0x530
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1659	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x530
1660	 CB	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1661	 CD	ADD		 	 
- stack 0: 0x534
1662	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1663	 CF	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1E5000001E5000000D40194016A00010189000201A3FFE40086000C01500000
1664	 D0	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x1E5000001E5000000D40194016A00010189000201A3FFE40086000C01500000
- stack 0: 0xF0
1665	 D2	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1E5
1666	 D3	JUMP		 	 
- stack 0: 0x534
1667	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x534
1668	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1669	 1E7	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1E5000001E5000000D40194016A00010189000201A3FFE40086000C01500000
1670	 1E8	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x1E5000001E5000000D40194016A00010189000201A3FFE40086000C01500000
- stack 0: 0xE0
1671	 1EA	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1E50000
1672	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x1E50000
- stack 0: 0xFFFF
1673	 1EE	AND		 	 
- stack 1: 0x534
- stack 0: 0x0
1674	 1EF	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x1
1675	 1F1	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0x0
1676	 1F2	POP		 	 
- stack 0: 0x534
1677	 1F3	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1678	 1F5	ADD		 	 
- stack 0: 0x538
1679	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1680	 1F7	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1E5000000D40194016A00010189000201A3FFE40086000C0150000000A00000
1681	 1F8	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x1E5000000D40194016A00010189000201A3FFE40086000C0150000000A00000
- stack 0: 0xF0
1682	 1FA	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1E5
1683	 1FB	JUMP		 	 
- stack 0: 0x538
1684	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x538
1685	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1686	 1E7	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1E5000000D40194016A00010189000201A3FFE40086000C0150000000A00000
1687	 1E8	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x1E5000000D40194016A00010189000201A3FFE40086000C0150000000A00000
- stack 0: 0xE0
1688	 1EA	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1E50000
1689	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x1E50000
- stack 0: 0xFFFF
1690	 1EE	AND		 	 
- stack 1: 0x538
- stack 0: 0x0
1691	 1EF	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x1
1692	 1F1	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0x0
1693	 1F2	POP		 	 
- stack 0: 0x538
1694	 1F3	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1695	 1F5	ADD		 	 
- stack 0: 0x53C
1696	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1697	 1F7	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xD40194016A00010189000201A3FFE40086000C0150000000A0000001E50000
1698	 1F8	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0xD40194016A00010189000201A3FFE40086000C0150000000A0000001E50000
- stack 0: 0xF0
1699	 1FA	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xD4
1700	 1FB	JUMP		 	 
- stack 0: 0x53C
1701	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x53C
1702	 D5	PUSH2	0040	 	 
- stack 1: 0x53C
- stack 0: 0x40
1703	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x53C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1704	 D9	PUSH1	03	 	 
- stack 2: 0x53C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1705	 DB	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1706	 DC	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1707	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x53C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1708	 E0	PUSH1	03	 	 
- stack 3: 0x53C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
1709	 E2	SIGNEXTEND		 	 
- stack 2: 0x53C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1710	 E3	SLT		 	  ;; # BLT
- stack 1: 0x53C
- stack 0: 0x0
1711	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0xEC
1712	 E7	JUMPI		 	 
- stack 0: 0x53C
1713	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x53C
- stack 0: 0x106
1714	 EB	JUMP		 	 
- stack 0: 0x53C
1715	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x53C
1716	 107	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1717	 109	ADD		 	 
- stack 0: 0x540
1718	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1719	 10B	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x16A00010189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF
1720	 10C	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x16A00010189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF
- stack 0: 0xF0
1721	 10E	SHR		 	 
- stack 1: 0x540
- stack 0: 0x16A
1722	 10F	JUMP		 	 
- stack 0: 0x540
1723	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x540
1724	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1725	 16C	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x16A00010189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF
1726	 16D	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x16A00010189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF
- stack 0: 0xE0
1727	 16F	SHR		 	 
- stack 1: 0x540
- stack 0: 0x16A0001
1728	 170	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x16A0001
- stack 0: 0xFFFF
1729	 173	AND		 	 
- stack 1: 0x540
- stack 0: 0x1
1730	 174	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0x1
- stack 0: 0x1
1731	 176	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0x1
1732	 177	PUSH2	0080	 	 
- stack 2: 0x540
- stack 1: 0x1
- stack 0: 0x80
1733	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x540
- stack 1: 0x1
- stack 0: 0x0
1734	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x540
- stack 0: 0x1
1735	 17C	PUSH2	0080	 	 
- stack 2: 0x540
- stack 1: 0x1
- stack 0: 0x80
1736	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x540
1737	 180	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1738	 182	ADD		 	 
- stack 0: 0x544
1739	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1740	 184	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF00D40170
1741	 185	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF00D40170
- stack 0: 0xF0
1742	 187	SHR		 	 
- stack 1: 0x544
- stack 0: 0x189
1743	 188	JUMP		 	 
- stack 0: 0x544
1744	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x544
1745	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1746	 18B	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF00D40170
1747	 18C	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF00D40170
- stack 0: 0xE0
1748	 18E	SHR		 	 
- stack 1: 0x544
- stack 0: 0x1890002
1749	 18F	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x1890002
- stack 0: 0xFFFF
1750	 192	AND		 	 
- stack 1: 0x544
- stack 0: 0x2
1751	 193	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x2
- stack 0: 0x1
1752	 195	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x2
1753	 196	PUSH2	00A0	 	 
- stack 2: 0x544
- stack 1: 0x2
- stack 0: 0xA0
1754	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x544
1755	 19A	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1756	 19C	ADD		 	 
- stack 0: 0x548
1757	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1758	 19E	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x1A3FFE40086000C0150000000A0000001E5000000BAFFFF00D40170016A0001
1759	 19F	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x1A3FFE40086000C0150000000A0000001E5000000BAFFFF00D40170016A0001
- stack 0: 0xF0
1760	 1A1	SHR		 	 
- stack 1: 0x548
- stack 0: 0x1A3
1761	 1A2	JUMP		 	 
- stack 0: 0x548
1762	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x548
1763	 1A4	PUSH2	0080	 	 
- stack 1: 0x548
- stack 0: 0x80
1764	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x548
- stack 0: 0x1
1765	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1766	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x548
- stack 0: 0x1
1767	 1AE	PUSH2	00A0	 	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0xA0
1768	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x2
1769	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x548
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1770	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x2
1771	 1B8	SUB		 	 
- stack 1: 0x548
- stack 0: 0x1
1772	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x1C1
1773	 1BC	JUMPI		 	 
- stack 0: 0x548
1774	 1C1	JUMPDEST		 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x548
1775	 1C2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1776	 1C3	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x1A3FFE40086000C0150000000A0000001E5000000BAFFFF00D40170016A0001
1777	 1C4	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x1A3FFE40086000C0150000000A0000001E5000000BAFFFF00D40170016A0001
- stack 0: 0xE0
1778	 1C6	SHR		 	 
- stack 1: 0x548
- stack 0: 0x1A3FFE4
1779	 1C7	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x1A3FFE4
- stack 0: 0xFFFF
1780	 1CA	AND		 	 
- stack 1: 0x548
- stack 0: 0xFFE4
1781	 1CB	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0xFFE4
- stack 0: 0x1
1782	 1CD	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
1783	 1CE	ADD		 	 
- stack 0: 0x52C
1784	 1CF	PUSH4	FFFFFFFF	 	 
- stack 1: 0x52C
- stack 0: 0xFFFFFFFF
1785	 1D4	AND		 	  ;; # mask to 32 bits
- stack 0: 0x52C
1786	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1787	 1D6	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xA0000000BAFFFF01E5000001E5000000D40194016A00010189000201A3FFE4
1788	 1D7	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0xA0000000BAFFFF01E5000001E5000000D40194016A00010189000201A3FFE4
- stack 0: 0xF0
1789	 1D9	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xA0
1790	 1DA	JUMP		 	 
- stack 0: 0x52C
1791	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x52C
1792	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1793	 A2	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xA0000000BAFFFF01E5000001E5000000D40194016A00010189000201A3FFE4
1794	 A3	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0xA0000000BAFFFF01E5000001E5000000D40194016A00010189000201A3FFE4
- stack 0: 0xE0
1795	 A5	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xA00000
1796	 A6	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0xA00000
- stack 0: 0xFFFF
1797	 A9	AND		 	 
- stack 1: 0x52C
- stack 0: 0x0
1798	 AA	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x1
1799	 AC	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x0
1800	 AD	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x20
1801	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x52C
1802	 B1	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1803	 B3	ADD		 	 
- stack 0: 0x530
1804	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1805	 B5	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xBAFFFF01E5000001E5000000D40194016A00010189000201A3FFE40086000C
1806	 B6	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0xBAFFFF01E5000001E5000000D40194016A00010189000201A3FFE40086000C
- stack 0: 0xF0
1807	 B8	SHR		 	 
- stack 1: 0x530
- stack 0: 0xBA
1808	 B9	JUMP		 	 
- stack 0: 0x530
1809	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x530
1810	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1811	 BC	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xBAFFFF01E5000001E5000000D40194016A00010189000201A3FFE40086000C
1812	 BD	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0xBAFFFF01E5000001E5000000D40194016A00010189000201A3FFE40086000C
- stack 0: 0xE0
1813	 BF	SHR		 	 
- stack 1: 0x530
- stack 0: 0xBAFFFF
1814	 C0	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
1815	 C3	AND		 	 
- stack 1: 0x530
- stack 0: 0xFFFF
1816	 C4	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0xFFFF
- stack 0: 0x1
1817	 C6	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1818	 C7	PUSH2	0040	 	 
- stack 2: 0x530
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1819	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x530
1820	 CB	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1821	 CD	ADD		 	 
- stack 0: 0x534
1822	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1823	 CF	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1E5000001E5000000D40194016A00010189000201A3FFE40086000C01500000
1824	 D0	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x1E5000001E5000000D40194016A00010189000201A3FFE40086000C01500000
- stack 0: 0xF0
1825	 D2	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1E5
1826	 D3	JUMP		 	 
- stack 0: 0x534
1827	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x534
1828	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1829	 1E7	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1E5000001E5000000D40194016A00010189000201A3FFE40086000C01500000
1830	 1E8	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x1E5000001E5000000D40194016A00010189000201A3FFE40086000C01500000
- stack 0: 0xE0
1831	 1EA	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1E50000
1832	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x1E50000
- stack 0: 0xFFFF
1833	 1EE	AND		 	 
- stack 1: 0x534
- stack 0: 0x0
1834	 1EF	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x1
1835	 1F1	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0x0
1836	 1F2	POP		 	 
- stack 0: 0x534
1837	 1F3	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1838	 1F5	ADD		 	 
- stack 0: 0x538
1839	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1840	 1F7	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1E5000000D40194016A00010189000201A3FFE40086000C0150000000A00000
1841	 1F8	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x1E5000000D40194016A00010189000201A3FFE40086000C0150000000A00000
- stack 0: 0xF0
1842	 1FA	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1E5
1843	 1FB	JUMP		 	 
- stack 0: 0x538
1844	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x538
1845	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1846	 1E7	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1E5000000D40194016A00010189000201A3FFE40086000C0150000000A00000
1847	 1E8	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x1E5000000D40194016A00010189000201A3FFE40086000C0150000000A00000
- stack 0: 0xE0
1848	 1EA	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1E50000
1849	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x1E50000
- stack 0: 0xFFFF
1850	 1EE	AND		 	 
- stack 1: 0x538
- stack 0: 0x0
1851	 1EF	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x1
1852	 1F1	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0x0
1853	 1F2	POP		 	 
- stack 0: 0x538
1854	 1F3	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1855	 1F5	ADD		 	 
- stack 0: 0x53C
1856	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1857	 1F7	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xD40194016A00010189000201A3FFE40086000C0150000000A0000001E50000
1858	 1F8	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0xD40194016A00010189000201A3FFE40086000C0150000000A0000001E50000
- stack 0: 0xF0
1859	 1FA	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xD4
1860	 1FB	JUMP		 	 
- stack 0: 0x53C
1861	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x53C
1862	 D5	PUSH2	0040	 	 
- stack 1: 0x53C
- stack 0: 0x40
1863	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x53C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1864	 D9	PUSH1	03	 	 
- stack 2: 0x53C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1865	 DB	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1866	 DC	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1867	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x53C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1868	 E0	PUSH1	03	 	 
- stack 3: 0x53C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
1869	 E2	SIGNEXTEND		 	 
- stack 2: 0x53C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1870	 E3	SLT		 	  ;; # BLT
- stack 1: 0x53C
- stack 0: 0x0
1871	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0xEC
1872	 E7	JUMPI		 	 
- stack 0: 0x53C
1873	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x53C
- stack 0: 0x106
1874	 EB	JUMP		 	 
- stack 0: 0x53C
1875	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x53C
1876	 107	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1877	 109	ADD		 	 
- stack 0: 0x540
1878	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1879	 10B	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x16A00010189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF
1880	 10C	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x16A00010189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF
- stack 0: 0xF0
1881	 10E	SHR		 	 
- stack 1: 0x540
- stack 0: 0x16A
1882	 10F	JUMP		 	 
- stack 0: 0x540
1883	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x540
1884	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1885	 16C	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x16A00010189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF
1886	 16D	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x16A00010189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF
- stack 0: 0xE0
1887	 16F	SHR		 	 
- stack 1: 0x540
- stack 0: 0x16A0001
1888	 170	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x16A0001
- stack 0: 0xFFFF
1889	 173	AND		 	 
- stack 1: 0x540
- stack 0: 0x1
1890	 174	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0x1
- stack 0: 0x1
1891	 176	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0x1
1892	 177	PUSH2	0080	 	 
- stack 2: 0x540
- stack 1: 0x1
- stack 0: 0x80
1893	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x540
- stack 1: 0x1
- stack 0: 0x1
1894	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x540
- stack 0: 0x2
1895	 17C	PUSH2	0080	 	 
- stack 2: 0x540
- stack 1: 0x2
- stack 0: 0x80
1896	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x540
1897	 180	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1898	 182	ADD		 	 
- stack 0: 0x544
1899	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1900	 184	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF00D40170
1901	 185	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF00D40170
- stack 0: 0xF0
1902	 187	SHR		 	 
- stack 1: 0x544
- stack 0: 0x189
1903	 188	JUMP		 	 
- stack 0: 0x544
1904	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x544
1905	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1906	 18B	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF00D40170
1907	 18C	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x189000201A3FFE40086000C0150000000A0000001E5000000BAFFFF00D40170
- stack 0: 0xE0
1908	 18E	SHR		 	 
- stack 1: 0x544
- stack 0: 0x1890002
1909	 18F	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x1890002
- stack 0: 0xFFFF
1910	 192	AND		 	 
- stack 1: 0x544
- stack 0: 0x2
1911	 193	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x2
- stack 0: 0x1
1912	 195	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x2
1913	 196	PUSH2	00A0	 	 
- stack 2: 0x544
- stack 1: 0x2
- stack 0: 0xA0
1914	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x544
1915	 19A	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1916	 19C	ADD		 	 
- stack 0: 0x548
1917	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1918	 19E	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x1A3FFE40086000C0150000000A0000001E5000000BAFFFF00D40170016A0001
1919	 19F	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x1A3FFE40086000C0150000000A0000001E5000000BAFFFF00D40170016A0001
- stack 0: 0xF0
1920	 1A1	SHR		 	 
- stack 1: 0x548
- stack 0: 0x1A3
1921	 1A2	JUMP		 	 
- stack 0: 0x548
1922	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x548
1923	 1A4	PUSH2	0080	 	 
- stack 1: 0x548
- stack 0: 0x80
1924	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x548
- stack 0: 0x2
1925	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1926	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x548
- stack 0: 0x2
1927	 1AE	PUSH2	00A0	 	 
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0xA0
1928	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0x2
1929	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x548
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1930	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0x2
1931	 1B8	SUB		 	 
- stack 1: 0x548
- stack 0: 0x0
1932	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x548
- stack 1: 0x0
- stack 0: 0x1C1
1933	 1BC	JUMPI		 	 
- stack 0: 0x548
1934	 1BD	PUSH2	01DB	 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 1: 0x548
- stack 0: 0x1DB
1935	 1C0	JUMP		 	 
- stack 0: 0x548
1936	 1DB	JUMPDEST		 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x548
1937	 1DC	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1938	 1DE	ADD		 	 
- stack 0: 0x54C
1939	 1DF	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1940	 1E0	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x86000C0150000000A0000001E5000000BAFFFF00D40170016A000101890002
1941	 1E1	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x86000C0150000000A0000001E5000000BAFFFF00D40170016A000101890002
- stack 0: 0xF0
1942	 1E3	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x86
1943	 1E4	JUMP		 	 
- stack 0: 0x54C
1944	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x54C
1945	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1946	 88	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x86000C0150000000A0000001E5000000BAFFFF00D40170016A000101890002
1947	 89	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x86000C0150000000A0000001E5000000BAFFFF00D40170016A000101890002
- stack 0: 0xE0
1948	 8B	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x86000C
1949	 8C	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x86000C
- stack 0: 0xFFFF
1950	 8F	AND		 	 
- stack 1: 0x54C
- stack 0: 0xC
1951	 90	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0xC
- stack 0: 0x1
1952	 92	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0xC
1953	 93	PUSH2	0380	 	 
- stack 2: 0x54C
- stack 1: 0xC
- stack 0: 0x380
1954	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x54C
1955	 97	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1956	 99	ADD		 	 
- stack 0: 0x550
1957	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1958	 9B	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x150000000A0000001E5000000BAFFFF00D40170016A00010189000201A3FFE8
1959	 9C	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x150000000A0000001E5000000BAFFFF00D40170016A00010189000201A3FFE8
- stack 0: 0xF0
1960	 9E	SHR		 	 
- stack 1: 0x550
- stack 0: 0x150
1961	 9F	JUMP		 	 
- stack 0: 0x550
1962	 150	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x550
1963	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1964	 152	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x150000000A0000001E5000000BAFFFF00D40170016A00010189000201A3FFE8
1965	 153	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x150000000A0000001E5000000BAFFFF00D40170016A00010189000201A3FFE8
- stack 0: 0xE0
1966	 155	SHR		 	 
- stack 1: 0x550
- stack 0: 0x1500000
1967	 156	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x1500000
- stack 0: 0xFFFF
1968	 159	AND		 	 
- stack 1: 0x550
- stack 0: 0x0
1969	 15A	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x1
1970	 15C	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0x0
1971	 15D	PUSH2	0080	 	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x80
1972	 160	MSTORE		 	  ;; # store to x4
- stack 0: 0x550
1973	 161	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1974	 163	ADD		 	 
- stack 0: 0x554
1975	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1976	 165	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xA0000001E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D
1977	 166	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0xA0000001E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D
- stack 0: 0xF0
1978	 168	SHR		 	 
- stack 1: 0x554
- stack 0: 0xA0
1979	 169	JUMP		 	 
- stack 0: 0x554
1980	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x554
1981	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1982	 A2	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xA0000001E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D
1983	 A3	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0xA0000001E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D
- stack 0: 0xE0
1984	 A5	SHR		 	 
- stack 1: 0x554
- stack 0: 0xA00000
1985	 A6	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0xA00000
- stack 0: 0xFFFF
1986	 A9	AND		 	 
- stack 1: 0x554
- stack 0: 0x0
1987	 AA	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1
1988	 AC	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x0
1989	 AD	PUSH2	0020	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x20
1990	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x554
1991	 B1	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1992	 B3	ADD		 	 
- stack 0: 0x558
1993	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1994	 B5	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D01500000
1995	 B6	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x1E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D01500000
- stack 0: 0xF0
1996	 B8	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1E5
1997	 B9	JUMP		 	 
- stack 0: 0x558
1998	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x558
1999	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
2000	 1E7	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D01500000
2001	 1E8	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x1E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D01500000
- stack 0: 0xE0
2002	 1EA	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1E50000
2003	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x1E50000
- stack 0: 0xFFFF
2004	 1EE	AND		 	 
- stack 1: 0x558
- stack 0: 0x0
2005	 1EF	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x1
2006	 1F1	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x0
2007	 1F2	POP		 	 
- stack 0: 0x558
2008	 1F3	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
2009	 1F5	ADD		 	 
- stack 0: 0x55C
2010	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
2011	 1F7	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xBAFFFF00D40170016A00010189000201A3FFE80086000D0150000000A00000
2012	 1F8	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0xBAFFFF00D40170016A00010189000201A3FFE80086000D0150000000A00000
- stack 0: 0xF0
2013	 1FA	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xBA
2014	 1FB	JUMP		 	 
- stack 0: 0x55C
2015	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x55C
2016	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
2017	 BC	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xBAFFFF00D40170016A00010189000201A3FFE80086000D0150000000A00000
2018	 BD	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0xBAFFFF00D40170016A00010189000201A3FFE80086000D0150000000A00000
- stack 0: 0xE0
2019	 BF	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xBAFFFF
2020	 C0	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
2021	 C3	AND		 	 
- stack 1: 0x55C
- stack 0: 0xFFFF
2022	 C4	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0xFFFF
- stack 0: 0x1
2023	 C6	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2024	 C7	PUSH2	0040	 	 
- stack 2: 0x55C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2025	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x55C
2026	 CB	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
2027	 CD	ADD		 	 
- stack 0: 0x560
2028	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
2029	 CF	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0xD40170016A00010189000201A3FFE80086000D0150000000A0000001E50000
2030	 D0	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0xD40170016A00010189000201A3FFE80086000D0150000000A0000001E50000
- stack 0: 0xF0
2031	 D2	SHR		 	 
- stack 1: 0x560
- stack 0: 0xD4
2032	 D3	JUMP		 	 
- stack 0: 0x560
2033	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x560
2034	 D5	PUSH2	0040	 	 
- stack 1: 0x560
- stack 0: 0x40
2035	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x560
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2036	 D9	PUSH1	03	 	 
- stack 2: 0x560
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
2037	 DB	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2038	 DC	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2039	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x560
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
2040	 E0	PUSH1	03	 	 
- stack 3: 0x560
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
2041	 E2	SIGNEXTEND		 	 
- stack 2: 0x560
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
2042	 E3	SLT		 	  ;; # BLT
- stack 1: 0x560
- stack 0: 0x0
2043	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0xEC
2044	 E7	JUMPI		 	 
- stack 0: 0x560
2045	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x560
- stack 0: 0x106
2046	 EB	JUMP		 	 
- stack 0: 0x560
2047	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x560
2048	 107	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
2049	 109	ADD		 	 
- stack 0: 0x564
2050	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2051	 10B	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x16A00010189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF
2052	 10C	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x16A00010189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF
- stack 0: 0xF0
2053	 10E	SHR		 	 
- stack 1: 0x564
- stack 0: 0x16A
2054	 10F	JUMP		 	 
- stack 0: 0x564
2055	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x564
2056	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
2057	 16C	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x16A00010189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF
2058	 16D	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x16A00010189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF
- stack 0: 0xE0
2059	 16F	SHR		 	 
- stack 1: 0x564
- stack 0: 0x16A0001
2060	 170	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x16A0001
- stack 0: 0xFFFF
2061	 173	AND		 	 
- stack 1: 0x564
- stack 0: 0x1
2062	 174	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x1
2063	 176	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0x1
2064	 177	PUSH2	0080	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x80
2065	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x0
2066	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x564
- stack 0: 0x1
2067	 17C	PUSH2	0080	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x80
2068	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x564
2069	 180	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2070	 182	ADD		 	 
- stack 0: 0x568
2071	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2072	 184	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF01E50000
2073	 185	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF01E50000
- stack 0: 0xF0
2074	 187	SHR		 	 
- stack 1: 0x568
- stack 0: 0x189
2075	 188	JUMP		 	 
- stack 0: 0x568
2076	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x568
2077	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
2078	 18B	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF01E50000
2079	 18C	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF01E50000
- stack 0: 0xE0
2080	 18E	SHR		 	 
- stack 1: 0x568
- stack 0: 0x1890002
2081	 18F	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x1890002
- stack 0: 0xFFFF
2082	 192	AND		 	 
- stack 1: 0x568
- stack 0: 0x2
2083	 193	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x2
- stack 0: 0x1
2084	 195	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x2
2085	 196	PUSH2	00A0	 	 
- stack 2: 0x568
- stack 1: 0x2
- stack 0: 0xA0
2086	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x568
2087	 19A	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2088	 19C	ADD		 	 
- stack 0: 0x56C
2089	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2090	 19E	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x1A3FFE80086000D0150000000A0000001E5000000BAFFFF01E5000000D40148
2091	 19F	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x1A3FFE80086000D0150000000A0000001E5000000BAFFFF01E5000000D40148
- stack 0: 0xF0
2092	 1A1	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x1A3
2093	 1A2	JUMP		 	 
- stack 0: 0x56C
2094	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x56C
2095	 1A4	PUSH2	0080	 	 
- stack 1: 0x56C
- stack 0: 0x80
2096	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x56C
- stack 0: 0x1
2097	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2098	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x56C
- stack 0: 0x1
2099	 1AE	PUSH2	00A0	 	 
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0xA0
2100	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0x2
2101	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x56C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2102	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0x2
2103	 1B8	SUB		 	 
- stack 1: 0x56C
- stack 0: 0x1
2104	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0x1C1
2105	 1BC	JUMPI		 	 
- stack 0: 0x56C
2106	 1C1	JUMPDEST		 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x56C
2107	 1C2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
2108	 1C3	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x1A3FFE80086000D0150000000A0000001E5000000BAFFFF01E5000000D40148
2109	 1C4	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x1A3FFE80086000D0150000000A0000001E5000000BAFFFF01E5000000D40148
- stack 0: 0xE0
2110	 1C6	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x1A3FFE8
2111	 1C7	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x1A3FFE8
- stack 0: 0xFFFF
2112	 1CA	AND		 	 
- stack 1: 0x56C
- stack 0: 0xFFE8
2113	 1CB	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0xFFE8
- stack 0: 0x1
2114	 1CD	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2115	 1CE	ADD		 	 
- stack 0: 0x554
2116	 1CF	PUSH4	FFFFFFFF	 	 
- stack 1: 0x554
- stack 0: 0xFFFFFFFF
2117	 1D4	AND		 	  ;; # mask to 32 bits
- stack 0: 0x554
2118	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
2119	 1D6	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xA0000001E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D
2120	 1D7	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0xA0000001E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D
- stack 0: 0xF0
2121	 1D9	SHR		 	 
- stack 1: 0x554
- stack 0: 0xA0
2122	 1DA	JUMP		 	 
- stack 0: 0x554
2123	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x554
2124	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
2125	 A2	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xA0000001E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D
2126	 A3	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0xA0000001E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D
- stack 0: 0xE0
2127	 A5	SHR		 	 
- stack 1: 0x554
- stack 0: 0xA00000
2128	 A6	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0xA00000
- stack 0: 0xFFFF
2129	 A9	AND		 	 
- stack 1: 0x554
- stack 0: 0x0
2130	 AA	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1
2131	 AC	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x0
2132	 AD	PUSH2	0020	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x20
2133	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x554
2134	 B1	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
2135	 B3	ADD		 	 
- stack 0: 0x558
2136	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
2137	 B5	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D01500000
2138	 B6	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x1E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D01500000
- stack 0: 0xF0
2139	 B8	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1E5
2140	 B9	JUMP		 	 
- stack 0: 0x558
2141	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x558
2142	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
2143	 1E7	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D01500000
2144	 1E8	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x1E5000000BAFFFF00D40170016A00010189000201A3FFE80086000D01500000
- stack 0: 0xE0
2145	 1EA	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1E50000
2146	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x1E50000
- stack 0: 0xFFFF
2147	 1EE	AND		 	 
- stack 1: 0x558
- stack 0: 0x0
2148	 1EF	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x1
2149	 1F1	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x0
2150	 1F2	POP		 	 
- stack 0: 0x558
2151	 1F3	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
2152	 1F5	ADD		 	 
- stack 0: 0x55C
2153	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
2154	 1F7	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xBAFFFF00D40170016A00010189000201A3FFE80086000D0150000000A00000
2155	 1F8	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0xBAFFFF00D40170016A00010189000201A3FFE80086000D0150000000A00000
- stack 0: 0xF0
2156	 1FA	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xBA
2157	 1FB	JUMP		 	 
- stack 0: 0x55C
2158	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x55C
2159	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
2160	 BC	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xBAFFFF00D40170016A00010189000201A3FFE80086000D0150000000A00000
2161	 BD	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0xBAFFFF00D40170016A00010189000201A3FFE80086000D0150000000A00000
- stack 0: 0xE0
2162	 BF	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xBAFFFF
2163	 C0	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
2164	 C3	AND		 	 
- stack 1: 0x55C
- stack 0: 0xFFFF
2165	 C4	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0xFFFF
- stack 0: 0x1
2166	 C6	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2167	 C7	PUSH2	0040	 	 
- stack 2: 0x55C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2168	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x55C
2169	 CB	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
2170	 CD	ADD		 	 
- stack 0: 0x560
2171	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
2172	 CF	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0xD40170016A00010189000201A3FFE80086000D0150000000A0000001E50000
2173	 D0	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0xD40170016A00010189000201A3FFE80086000D0150000000A0000001E50000
- stack 0: 0xF0
2174	 D2	SHR		 	 
- stack 1: 0x560
- stack 0: 0xD4
2175	 D3	JUMP		 	 
- stack 0: 0x560
2176	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x560
2177	 D5	PUSH2	0040	 	 
- stack 1: 0x560
- stack 0: 0x40
2178	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x560
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2179	 D9	PUSH1	03	 	 
- stack 2: 0x560
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
2180	 DB	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2181	 DC	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2182	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x560
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
2183	 E0	PUSH1	03	 	 
- stack 3: 0x560
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
2184	 E2	SIGNEXTEND		 	 
- stack 2: 0x560
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
2185	 E3	SLT		 	  ;; # BLT
- stack 1: 0x560
- stack 0: 0x0
2186	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0xEC
2187	 E7	JUMPI		 	 
- stack 0: 0x560
2188	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x560
- stack 0: 0x106
2189	 EB	JUMP		 	 
- stack 0: 0x560
2190	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x560
2191	 107	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
2192	 109	ADD		 	 
- stack 0: 0x564
2193	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2194	 10B	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x16A00010189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF
2195	 10C	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x16A00010189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF
- stack 0: 0xF0
2196	 10E	SHR		 	 
- stack 1: 0x564
- stack 0: 0x16A
2197	 10F	JUMP		 	 
- stack 0: 0x564
2198	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x564
2199	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
2200	 16C	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x16A00010189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF
2201	 16D	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x16A00010189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF
- stack 0: 0xE0
2202	 16F	SHR		 	 
- stack 1: 0x564
- stack 0: 0x16A0001
2203	 170	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x16A0001
- stack 0: 0xFFFF
2204	 173	AND		 	 
- stack 1: 0x564
- stack 0: 0x1
2205	 174	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x1
2206	 176	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0x1
2207	 177	PUSH2	0080	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x80
2208	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x1
2209	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x564
- stack 0: 0x2
2210	 17C	PUSH2	0080	 	 
- stack 2: 0x564
- stack 1: 0x2
- stack 0: 0x80
2211	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x564
2212	 180	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2213	 182	ADD		 	 
- stack 0: 0x568
2214	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2215	 184	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF01E50000
2216	 185	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF01E50000
- stack 0: 0xF0
2217	 187	SHR		 	 
- stack 1: 0x568
- stack 0: 0x189
2218	 188	JUMP		 	 
- stack 0: 0x568
2219	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x568
2220	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
2221	 18B	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF01E50000
2222	 18C	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x189000201A3FFE80086000D0150000000A0000001E5000000BAFFFF01E50000
- stack 0: 0xE0
2223	 18E	SHR		 	 
- stack 1: 0x568
- stack 0: 0x1890002
2224	 18F	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x1890002
- stack 0: 0xFFFF
2225	 192	AND		 	 
- stack 1: 0x568
- stack 0: 0x2
2226	 193	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x2
- stack 0: 0x1
2227	 195	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x2
2228	 196	PUSH2	00A0	 	 
- stack 2: 0x568
- stack 1: 0x2
- stack 0: 0xA0
2229	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x568
2230	 19A	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2231	 19C	ADD		 	 
- stack 0: 0x56C
2232	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2233	 19E	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x1A3FFE80086000D0150000000A0000001E5000000BAFFFF01E5000000D40148
2234	 19F	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x1A3FFE80086000D0150000000A0000001E5000000BAFFFF01E5000000D40148
- stack 0: 0xF0
2235	 1A1	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x1A3
2236	 1A2	JUMP		 	 
- stack 0: 0x56C
2237	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x56C
2238	 1A4	PUSH2	0080	 	 
- stack 1: 0x56C
- stack 0: 0x80
2239	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x56C
- stack 0: 0x2
2240	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x56C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2241	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x56C
- stack 0: 0x2
2242	 1AE	PUSH2	00A0	 	 
- stack 2: 0x56C
- stack 1: 0x2
- stack 0: 0xA0
2243	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x56C
- stack 1: 0x2
- stack 0: 0x2
2244	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x56C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2245	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x56C
- stack 1: 0x2
- stack 0: 0x2
2246	 1B8	SUB		 	 
- stack 1: 0x56C
- stack 0: 0x0
2247	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x1C1
2248	 1BC	JUMPI		 	 
- stack 0: 0x56C
2249	 1BD	PUSH2	01DB	 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 1: 0x56C
- stack 0: 0x1DB
2250	 1C0	JUMP		 	 
- stack 0: 0x56C
2251	 1DB	JUMPDEST		 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x56C
2252	 1DC	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2253	 1DE	ADD		 	 
- stack 0: 0x570
2254	 1DF	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2255	 1E0	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x86000D0150000000A0000001E5000000BAFFFF01E5000000D40148016A0001
2256	 1E1	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x86000D0150000000A0000001E5000000BAFFFF01E5000000D40148016A0001
- stack 0: 0xF0
2257	 1E3	SHR		 	 
- stack 1: 0x570
- stack 0: 0x86
2258	 1E4	JUMP		 	 
- stack 0: 0x570
2259	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x570
2260	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
2261	 88	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x86000D0150000000A0000001E5000000BAFFFF01E5000000D40148016A0001
2262	 89	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x86000D0150000000A0000001E5000000BAFFFF01E5000000D40148016A0001
- stack 0: 0xE0
2263	 8B	SHR		 	 
- stack 1: 0x570
- stack 0: 0x86000D
2264	 8C	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x86000D
- stack 0: 0xFFFF
2265	 8F	AND		 	 
- stack 1: 0x570
- stack 0: 0xD
2266	 90	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0xD
- stack 0: 0x1
2267	 92	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0xD
2268	 93	PUSH2	0380	 	 
- stack 2: 0x570
- stack 1: 0xD
- stack 0: 0x380
2269	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x570
2270	 97	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2271	 99	ADD		 	 
- stack 0: 0x574
2272	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2273	 9B	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x150000000A0000001E5000000BAFFFF01E5000000D40148016A000101890002
2274	 9C	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x150000000A0000001E5000000BAFFFF01E5000000D40148016A000101890002
- stack 0: 0xF0
2275	 9E	SHR		 	 
- stack 1: 0x574
- stack 0: 0x150
2276	 9F	JUMP		 	 
- stack 0: 0x574
2277	 150	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x574
2278	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
2279	 152	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x150000000A0000001E5000000BAFFFF01E5000000D40148016A000101890002
2280	 153	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x150000000A0000001E5000000BAFFFF01E5000000D40148016A000101890002
- stack 0: 0xE0
2281	 155	SHR		 	 
- stack 1: 0x574
- stack 0: 0x1500000
2282	 156	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x1500000
- stack 0: 0xFFFF
2283	 159	AND		 	 
- stack 1: 0x574
- stack 0: 0x0
2284	 15A	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x1
2285	 15C	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x0
2286	 15D	PUSH2	0080	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x80
2287	 160	MSTORE		 	  ;; # store to x4
- stack 0: 0x574
2288	 161	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2289	 163	ADD		 	 
- stack 0: 0x578
2290	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2291	 165	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xA0000001E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE4
2292	 166	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0xA0000001E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE4
- stack 0: 0xF0
2293	 168	SHR		 	 
- stack 1: 0x578
- stack 0: 0xA0
2294	 169	JUMP		 	 
- stack 0: 0x578
2295	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x578
2296	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2297	 A2	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xA0000001E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE4
2298	 A3	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0xA0000001E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE4
- stack 0: 0xE0
2299	 A5	SHR		 	 
- stack 1: 0x578
- stack 0: 0xA00000
2300	 A6	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0xA00000
- stack 0: 0xFFFF
2301	 A9	AND		 	 
- stack 1: 0x578
- stack 0: 0x0
2302	 AA	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x1
2303	 AC	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x0
2304	 AD	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x20
2305	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x578
2306	 B1	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2307	 B3	ADD		 	 
- stack 0: 0x57C
2308	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2309	 B5	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE40086000E
2310	 B6	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x1E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE40086000E
- stack 0: 0xF0
2311	 B8	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1E5
2312	 B9	JUMP		 	 
- stack 0: 0x57C
2313	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x57C
2314	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2315	 1E7	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE40086000E
2316	 1E8	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x1E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE40086000E
- stack 0: 0xE0
2317	 1EA	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1E50000
2318	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x1E50000
- stack 0: 0xFFFF
2319	 1EE	AND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2320	 1EF	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x1
2321	 1F1	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2322	 1F2	POP		 	 
- stack 0: 0x57C
2323	 1F3	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2324	 1F5	ADD		 	 
- stack 0: 0x580
2325	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2326	 1F7	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xBAFFFF01E5000000D40148016A00010189000201A3FFE40086000E01500000
2327	 1F8	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xBAFFFF01E5000000D40148016A00010189000201A3FFE40086000E01500000
- stack 0: 0xF0
2328	 1FA	SHR		 	 
- stack 1: 0x580
- stack 0: 0xBA
2329	 1FB	JUMP		 	 
- stack 0: 0x580
2330	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x580
2331	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2332	 BC	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xBAFFFF01E5000000D40148016A00010189000201A3FFE40086000E01500000
2333	 BD	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0xBAFFFF01E5000000D40148016A00010189000201A3FFE40086000E01500000
- stack 0: 0xE0
2334	 BF	SHR		 	 
- stack 1: 0x580
- stack 0: 0xBAFFFF
2335	 C0	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
2336	 C3	AND		 	 
- stack 1: 0x580
- stack 0: 0xFFFF
2337	 C4	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0xFFFF
- stack 0: 0x1
2338	 C6	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2339	 C7	PUSH2	0040	 	 
- stack 2: 0x580
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2340	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x580
2341	 CB	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2342	 CD	ADD		 	 
- stack 0: 0x584
2343	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2344	 CF	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1E5000000D40148016A00010189000201A3FFE40086000E0150000000A00000
2345	 D0	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x1E5000000D40148016A00010189000201A3FFE40086000E0150000000A00000
- stack 0: 0xF0
2346	 D2	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1E5
2347	 D3	JUMP		 	 
- stack 0: 0x584
2348	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x584
2349	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2350	 1E7	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1E5000000D40148016A00010189000201A3FFE40086000E0150000000A00000
2351	 1E8	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x1E5000000D40148016A00010189000201A3FFE40086000E0150000000A00000
- stack 0: 0xE0
2352	 1EA	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1E50000
2353	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x1E50000
- stack 0: 0xFFFF
2354	 1EE	AND		 	 
- stack 1: 0x584
- stack 0: 0x0
2355	 1EF	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x1
2356	 1F1	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x0
2357	 1F2	POP		 	 
- stack 0: 0x584
2358	 1F3	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2359	 1F5	ADD		 	 
- stack 0: 0x588
2360	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2361	 1F7	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xD40148016A00010189000201A3FFE40086000E0150000000A0000001E50000
2362	 1F8	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xD40148016A00010189000201A3FFE40086000E0150000000A0000001E50000
- stack 0: 0xF0
2363	 1FA	SHR		 	 
- stack 1: 0x588
- stack 0: 0xD4
2364	 1FB	JUMP		 	 
- stack 0: 0x588
2365	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x588
2366	 D5	PUSH2	0040	 	 
- stack 1: 0x588
- stack 0: 0x40
2367	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x588
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2368	 D9	PUSH1	03	 	 
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
2369	 DB	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2370	 DC	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2371	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
2372	 E0	PUSH1	03	 	 
- stack 3: 0x588
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
2373	 E2	SIGNEXTEND		 	 
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
2374	 E3	SLT		 	  ;; # BLT
- stack 1: 0x588
- stack 0: 0x0
2375	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0xEC
2376	 E7	JUMPI		 	 
- stack 0: 0x588
2377	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x588
- stack 0: 0x106
2378	 EB	JUMP		 	 
- stack 0: 0x588
2379	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x588
2380	 107	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2381	 109	ADD		 	 
- stack 0: 0x58C
2382	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2383	 10B	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x16A00010189000201A3FFE40086000E0150000000A0000001E5000001E50000
2384	 10C	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x16A00010189000201A3FFE40086000E0150000000A0000001E5000001E50000
- stack 0: 0xF0
2385	 10E	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x16A
2386	 10F	JUMP		 	 
- stack 0: 0x58C
2387	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x58C
2388	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2389	 16C	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x16A00010189000201A3FFE40086000E0150000000A0000001E5000001E50000
2390	 16D	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x16A00010189000201A3FFE40086000E0150000000A0000001E5000001E50000
- stack 0: 0xE0
2391	 16F	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x16A0001
2392	 170	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x16A0001
- stack 0: 0xFFFF
2393	 173	AND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2394	 174	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
2395	 176	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2396	 177	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x80
2397	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x0
2398	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x58C
- stack 0: 0x1
2399	 17C	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x80
2400	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x58C
2401	 180	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2402	 182	ADD		 	 
- stack 0: 0x590
2403	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2404	 184	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x189000201A3FFE40086000E0150000000A0000001E5000001E5000000BAFFFF
2405	 185	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x189000201A3FFE40086000E0150000000A0000001E5000001E5000000BAFFFF
- stack 0: 0xF0
2406	 187	SHR		 	 
- stack 1: 0x590
- stack 0: 0x189
2407	 188	JUMP		 	 
- stack 0: 0x590
2408	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x590
2409	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2410	 18B	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x189000201A3FFE40086000E0150000000A0000001E5000001E5000000BAFFFF
2411	 18C	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x189000201A3FFE40086000E0150000000A0000001E5000001E5000000BAFFFF
- stack 0: 0xE0
2412	 18E	SHR		 	 
- stack 1: 0x590
- stack 0: 0x1890002
2413	 18F	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x1890002
- stack 0: 0xFFFF
2414	 192	AND		 	 
- stack 1: 0x590
- stack 0: 0x2
2415	 193	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0x1
2416	 195	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x2
2417	 196	PUSH2	00A0	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0xA0
2418	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x590
2419	 19A	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2420	 19C	ADD		 	 
- stack 0: 0x594
2421	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2422	 19E	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1A3FFE40086000E0150000000A0000001E5000001E5000000BAFFFF00D40120
2423	 19F	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x1A3FFE40086000E0150000000A0000001E5000001E5000000BAFFFF00D40120
- stack 0: 0xF0
2424	 1A1	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1A3
2425	 1A2	JUMP		 	 
- stack 0: 0x594
2426	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x594
2427	 1A4	PUSH2	0080	 	 
- stack 1: 0x594
- stack 0: 0x80
2428	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x594
- stack 0: 0x1
2429	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2430	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x594
- stack 0: 0x1
2431	 1AE	PUSH2	00A0	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0xA0
2432	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x2
2433	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x594
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2434	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x2
2435	 1B8	SUB		 	 
- stack 1: 0x594
- stack 0: 0x1
2436	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x1C1
2437	 1BC	JUMPI		 	 
- stack 0: 0x594
2438	 1C1	JUMPDEST		 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x594
2439	 1C2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2440	 1C3	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1A3FFE40086000E0150000000A0000001E5000001E5000000BAFFFF00D40120
2441	 1C4	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x1A3FFE40086000E0150000000A0000001E5000001E5000000BAFFFF00D40120
- stack 0: 0xE0
2442	 1C6	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1A3FFE4
2443	 1C7	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x1A3FFE4
- stack 0: 0xFFFF
2444	 1CA	AND		 	 
- stack 1: 0x594
- stack 0: 0xFFE4
2445	 1CB	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0xFFE4
- stack 0: 0x1
2446	 1CD	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2447	 1CE	ADD		 	 
- stack 0: 0x578
2448	 1CF	PUSH4	FFFFFFFF	 	 
- stack 1: 0x578
- stack 0: 0xFFFFFFFF
2449	 1D4	AND		 	  ;; # mask to 32 bits
- stack 0: 0x578
2450	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2451	 1D6	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xA0000001E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE4
2452	 1D7	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0xA0000001E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE4
- stack 0: 0xF0
2453	 1D9	SHR		 	 
- stack 1: 0x578
- stack 0: 0xA0
2454	 1DA	JUMP		 	 
- stack 0: 0x578
2455	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x578
2456	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2457	 A2	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xA0000001E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE4
2458	 A3	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0xA0000001E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE4
- stack 0: 0xE0
2459	 A5	SHR		 	 
- stack 1: 0x578
- stack 0: 0xA00000
2460	 A6	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0xA00000
- stack 0: 0xFFFF
2461	 A9	AND		 	 
- stack 1: 0x578
- stack 0: 0x0
2462	 AA	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x1
2463	 AC	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x0
2464	 AD	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x20
2465	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x578
2466	 B1	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2467	 B3	ADD		 	 
- stack 0: 0x57C
2468	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2469	 B5	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE40086000E
2470	 B6	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x1E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE40086000E
- stack 0: 0xF0
2471	 B8	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1E5
2472	 B9	JUMP		 	 
- stack 0: 0x57C
2473	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x57C
2474	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2475	 1E7	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE40086000E
2476	 1E8	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x1E5000000BAFFFF01E5000000D40148016A00010189000201A3FFE40086000E
- stack 0: 0xE0
2477	 1EA	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1E50000
2478	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x1E50000
- stack 0: 0xFFFF
2479	 1EE	AND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2480	 1EF	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x1
2481	 1F1	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2482	 1F2	POP		 	 
- stack 0: 0x57C
2483	 1F3	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2484	 1F5	ADD		 	 
- stack 0: 0x580
2485	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2486	 1F7	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xBAFFFF01E5000000D40148016A00010189000201A3FFE40086000E01500000
2487	 1F8	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xBAFFFF01E5000000D40148016A00010189000201A3FFE40086000E01500000
- stack 0: 0xF0
2488	 1FA	SHR		 	 
- stack 1: 0x580
- stack 0: 0xBA
2489	 1FB	JUMP		 	 
- stack 0: 0x580
2490	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x580
2491	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2492	 BC	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xBAFFFF01E5000000D40148016A00010189000201A3FFE40086000E01500000
2493	 BD	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0xBAFFFF01E5000000D40148016A00010189000201A3FFE40086000E01500000
- stack 0: 0xE0
2494	 BF	SHR		 	 
- stack 1: 0x580
- stack 0: 0xBAFFFF
2495	 C0	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
2496	 C3	AND		 	 
- stack 1: 0x580
- stack 0: 0xFFFF
2497	 C4	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0xFFFF
- stack 0: 0x1
2498	 C6	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2499	 C7	PUSH2	0040	 	 
- stack 2: 0x580
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2500	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x580
2501	 CB	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2502	 CD	ADD		 	 
- stack 0: 0x584
2503	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2504	 CF	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1E5000000D40148016A00010189000201A3FFE40086000E0150000000A00000
2505	 D0	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x1E5000000D40148016A00010189000201A3FFE40086000E0150000000A00000
- stack 0: 0xF0
2506	 D2	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1E5
2507	 D3	JUMP		 	 
- stack 0: 0x584
2508	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x584
2509	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2510	 1E7	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1E5000000D40148016A00010189000201A3FFE40086000E0150000000A00000
2511	 1E8	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x1E5000000D40148016A00010189000201A3FFE40086000E0150000000A00000
- stack 0: 0xE0
2512	 1EA	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1E50000
2513	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x1E50000
- stack 0: 0xFFFF
2514	 1EE	AND		 	 
- stack 1: 0x584
- stack 0: 0x0
2515	 1EF	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x1
2516	 1F1	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x0
2517	 1F2	POP		 	 
- stack 0: 0x584
2518	 1F3	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2519	 1F5	ADD		 	 
- stack 0: 0x588
2520	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2521	 1F7	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xD40148016A00010189000201A3FFE40086000E0150000000A0000001E50000
2522	 1F8	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xD40148016A00010189000201A3FFE40086000E0150000000A0000001E50000
- stack 0: 0xF0
2523	 1FA	SHR		 	 
- stack 1: 0x588
- stack 0: 0xD4
2524	 1FB	JUMP		 	 
- stack 0: 0x588
2525	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x588
2526	 D5	PUSH2	0040	 	 
- stack 1: 0x588
- stack 0: 0x40
2527	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x588
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2528	 D9	PUSH1	03	 	 
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
2529	 DB	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2530	 DC	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2531	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
2532	 E0	PUSH1	03	 	 
- stack 3: 0x588
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
2533	 E2	SIGNEXTEND		 	 
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
2534	 E3	SLT		 	  ;; # BLT
- stack 1: 0x588
- stack 0: 0x0
2535	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0xEC
2536	 E7	JUMPI		 	 
- stack 0: 0x588
2537	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x588
- stack 0: 0x106
2538	 EB	JUMP		 	 
- stack 0: 0x588
2539	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x588
2540	 107	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2541	 109	ADD		 	 
- stack 0: 0x58C
2542	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2543	 10B	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x16A00010189000201A3FFE40086000E0150000000A0000001E5000001E50000
2544	 10C	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x16A00010189000201A3FFE40086000E0150000000A0000001E5000001E50000
- stack 0: 0xF0
2545	 10E	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x16A
2546	 10F	JUMP		 	 
- stack 0: 0x58C
2547	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x58C
2548	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2549	 16C	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x16A00010189000201A3FFE40086000E0150000000A0000001E5000001E50000
2550	 16D	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x16A00010189000201A3FFE40086000E0150000000A0000001E5000001E50000
- stack 0: 0xE0
2551	 16F	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x16A0001
2552	 170	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x16A0001
- stack 0: 0xFFFF
2553	 173	AND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2554	 174	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
2555	 176	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2556	 177	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x80
2557	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
2558	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x58C
- stack 0: 0x2
2559	 17C	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0x80
2560	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x58C
2561	 180	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2562	 182	ADD		 	 
- stack 0: 0x590
2563	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2564	 184	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x189000201A3FFE40086000E0150000000A0000001E5000001E5000000BAFFFF
2565	 185	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x189000201A3FFE40086000E0150000000A0000001E5000001E5000000BAFFFF
- stack 0: 0xF0
2566	 187	SHR		 	 
- stack 1: 0x590
- stack 0: 0x189
2567	 188	JUMP		 	 
- stack 0: 0x590
2568	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x590
2569	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2570	 18B	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x189000201A3FFE40086000E0150000000A0000001E5000001E5000000BAFFFF
2571	 18C	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x189000201A3FFE40086000E0150000000A0000001E5000001E5000000BAFFFF
- stack 0: 0xE0
2572	 18E	SHR		 	 
- stack 1: 0x590
- stack 0: 0x1890002
2573	 18F	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x1890002
- stack 0: 0xFFFF
2574	 192	AND		 	 
- stack 1: 0x590
- stack 0: 0x2
2575	 193	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0x1
2576	 195	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x2
2577	 196	PUSH2	00A0	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0xA0
2578	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x590
2579	 19A	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2580	 19C	ADD		 	 
- stack 0: 0x594
2581	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2582	 19E	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1A3FFE40086000E0150000000A0000001E5000001E5000000BAFFFF00D40120
2583	 19F	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x1A3FFE40086000E0150000000A0000001E5000001E5000000BAFFFF00D40120
- stack 0: 0xF0
2584	 1A1	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1A3
2585	 1A2	JUMP		 	 
- stack 0: 0x594
2586	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x594
2587	 1A4	PUSH2	0080	 	 
- stack 1: 0x594
- stack 0: 0x80
2588	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x594
- stack 0: 0x2
2589	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2590	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x594
- stack 0: 0x2
2591	 1AE	PUSH2	00A0	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0xA0
2592	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0x2
2593	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x594
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2594	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0x2
2595	 1B8	SUB		 	 
- stack 1: 0x594
- stack 0: 0x0
2596	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1C1
2597	 1BC	JUMPI		 	 
- stack 0: 0x594
2598	 1BD	PUSH2	01DB	 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 1: 0x594
- stack 0: 0x1DB
2599	 1C0	JUMP		 	 
- stack 0: 0x594
2600	 1DB	JUMPDEST		 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x594
2601	 1DC	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2602	 1DE	ADD		 	 
- stack 0: 0x598
2603	 1DF	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2604	 1E0	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x86000E0150000000A0000001E5000001E5000000BAFFFF00D40120016A0001
2605	 1E1	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x86000E0150000000A0000001E5000001E5000000BAFFFF00D40120016A0001
- stack 0: 0xF0
2606	 1E3	SHR		 	 
- stack 1: 0x598
- stack 0: 0x86
2607	 1E4	JUMP		 	 
- stack 0: 0x598
2608	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x598
2609	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2610	 88	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x86000E0150000000A0000001E5000001E5000000BAFFFF00D40120016A0001
2611	 89	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x86000E0150000000A0000001E5000001E5000000BAFFFF00D40120016A0001
- stack 0: 0xE0
2612	 8B	SHR		 	 
- stack 1: 0x598
- stack 0: 0x86000E
2613	 8C	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x86000E
- stack 0: 0xFFFF
2614	 8F	AND		 	 
- stack 1: 0x598
- stack 0: 0xE
2615	 90	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0xE
- stack 0: 0x1
2616	 92	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0xE
2617	 93	PUSH2	0380	 	 
- stack 2: 0x598
- stack 1: 0xE
- stack 0: 0x380
2618	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x598
2619	 97	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2620	 99	ADD		 	 
- stack 0: 0x59C
2621	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2622	 9B	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x150000000A0000001E5000001E5000000BAFFFF00D40120016A000101890002
2623	 9C	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x150000000A0000001E5000001E5000000BAFFFF00D40120016A000101890002
- stack 0: 0xF0
2624	 9E	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x150
2625	 9F	JUMP		 	 
- stack 0: 0x59C
2626	 150	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x59C
2627	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2628	 152	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x150000000A0000001E5000001E5000000BAFFFF00D40120016A000101890002
2629	 153	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x150000000A0000001E5000001E5000000BAFFFF00D40120016A000101890002
- stack 0: 0xE0
2630	 155	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x1500000
2631	 156	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x1500000
- stack 0: 0xFFFF
2632	 159	AND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2633	 15A	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1
2634	 15C	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2635	 15D	PUSH2	0080	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x80
2636	 160	MSTORE		 	  ;; # store to x4
- stack 0: 0x59C
2637	 161	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2638	 163	ADD		 	 
- stack 0: 0x5A0
2639	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2640	 165	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xA0000001E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE4
2641	 166	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0xA0000001E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE4
- stack 0: 0xF0
2642	 168	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xA0
2643	 169	JUMP		 	 
- stack 0: 0x5A0
2644	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5A0
2645	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2646	 A2	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xA0000001E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE4
2647	 A3	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0xA0000001E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE4
- stack 0: 0xE0
2648	 A5	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xA00000
2649	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0xA00000
- stack 0: 0xFFFF
2650	 A9	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2651	 AA	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x1
2652	 AC	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2653	 AD	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x20
2654	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
2655	 B1	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2656	 B3	ADD		 	 
- stack 0: 0x5A4
2657	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2658	 B5	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F
2659	 B6	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x1E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F
- stack 0: 0xF0
2660	 B8	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1E5
2661	 B9	JUMP		 	 
- stack 0: 0x5A4
2662	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A4
2663	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2664	 1E7	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F
2665	 1E8	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x1E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F
- stack 0: 0xE0
2666	 1EA	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1E50000
2667	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x1E50000
- stack 0: 0xFFFF
2668	 1EE	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2669	 1EF	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2670	 1F1	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2671	 1F2	POP		 	 
- stack 0: 0x5A4
2672	 1F3	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2673	 1F5	ADD		 	 
- stack 0: 0x5A8
2674	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2675	 1F7	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F01500000
2676	 1F8	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x1E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F01500000
- stack 0: 0xF0
2677	 1FA	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1E5
2678	 1FB	JUMP		 	 
- stack 0: 0x5A8
2679	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A8
2680	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2681	 1E7	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F01500000
2682	 1E8	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x1E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F01500000
- stack 0: 0xE0
2683	 1EA	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1E50000
2684	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x1E50000
- stack 0: 0xFFFF
2685	 1EE	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2686	 1EF	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2687	 1F1	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2688	 1F2	POP		 	 
- stack 0: 0x5A8
2689	 1F3	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2690	 1F5	ADD		 	 
- stack 0: 0x5AC
2691	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2692	 1F7	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xBAFFFF00D40120016A00010189000201A3FFE40086000F0150000000A00000
2693	 1F8	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0xBAFFFF00D40120016A00010189000201A3FFE40086000F0150000000A00000
- stack 0: 0xF0
2694	 1FA	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xBA
2695	 1FB	JUMP		 	 
- stack 0: 0x5AC
2696	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x5AC
2697	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2698	 BC	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xBAFFFF00D40120016A00010189000201A3FFE40086000F0150000000A00000
2699	 BD	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0xBAFFFF00D40120016A00010189000201A3FFE40086000F0150000000A00000
- stack 0: 0xE0
2700	 BF	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xBAFFFF
2701	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
2702	 C3	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFF
2703	 C4	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFF
- stack 0: 0x1
2704	 C6	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2705	 C7	PUSH2	0040	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2706	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5AC
2707	 CB	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2708	 CD	ADD		 	 
- stack 0: 0x5B0
2709	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2710	 CF	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xD40120016A00010189000201A3FFE40086000F0150000000A0000000BAFFFF
2711	 D0	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0xD40120016A00010189000201A3FFE40086000F0150000000A0000000BAFFFF
- stack 0: 0xF0
2712	 D2	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xD4
2713	 D3	JUMP		 	 
- stack 0: 0x5B0
2714	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x5B0
2715	 D5	PUSH2	0040	 	 
- stack 1: 0x5B0
- stack 0: 0x40
2716	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2717	 D9	PUSH1	03	 	 
- stack 2: 0x5B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
2718	 DB	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2719	 DC	PUSH2	0020	 	 
- stack 2: 0x5B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2720	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x5B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
2721	 E0	PUSH1	03	 	 
- stack 3: 0x5B0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
2722	 E2	SIGNEXTEND		 	 
- stack 2: 0x5B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
2723	 E3	SLT		 	  ;; # BLT
- stack 1: 0x5B0
- stack 0: 0x0
2724	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0xEC
2725	 E7	JUMPI		 	 
- stack 0: 0x5B0
2726	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x5B0
- stack 0: 0x106
2727	 EB	JUMP		 	 
- stack 0: 0x5B0
2728	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x5B0
2729	 107	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2730	 109	ADD		 	 
- stack 0: 0x5B4
2731	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2732	 10B	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x16A00010189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100
2733	 10C	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x16A00010189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100
- stack 0: 0xF0
2734	 10E	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x16A
2735	 10F	JUMP		 	 
- stack 0: 0x5B4
2736	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B4
2737	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2738	 16C	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x16A00010189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100
2739	 16D	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x16A00010189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100
- stack 0: 0xE0
2740	 16F	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x16A0001
2741	 170	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x16A0001
- stack 0: 0xFFFF
2742	 173	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2743	 174	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
2744	 176	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2745	 177	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x80
2746	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x0
2747	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B4
- stack 0: 0x1
2748	 17C	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x80
2749	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B4
2750	 180	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2751	 182	ADD		 	 
- stack 0: 0x5B8
2752	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2753	 184	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100016A0001
2754	 185	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100016A0001
- stack 0: 0xF0
2755	 187	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x189
2756	 188	JUMP		 	 
- stack 0: 0x5B8
2757	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B8
2758	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2759	 18B	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100016A0001
2760	 18C	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100016A0001
- stack 0: 0xE0
2761	 18E	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1890002
2762	 18F	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x1890002
- stack 0: 0xFFFF
2763	 192	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2764	 193	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0x1
2765	 195	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2766	 196	PUSH2	00A0	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0xA0
2767	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B8
2768	 19A	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2769	 19C	ADD		 	 
- stack 0: 0x5BC
2770	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2771	 19E	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x1A3FFE40086000F0150000000A0000000BAFFFF00D40100016A000101890002
2772	 19F	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x1A3FFE40086000F0150000000A0000000BAFFFF00D40100016A000101890002
- stack 0: 0xF0
2773	 1A1	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x1A3
2774	 1A2	JUMP		 	 
- stack 0: 0x5BC
2775	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5BC
2776	 1A4	PUSH2	0080	 	 
- stack 1: 0x5BC
- stack 0: 0x80
2777	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x5BC
- stack 0: 0x1
2778	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2779	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x1
2780	 1AE	PUSH2	00A0	 	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0xA0
2781	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x2
2782	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2783	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x2
2784	 1B8	SUB		 	 
- stack 1: 0x5BC
- stack 0: 0x1
2785	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x1C1
2786	 1BC	JUMPI		 	 
- stack 0: 0x5BC
2787	 1C1	JUMPDEST		 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x5BC
2788	 1C2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2789	 1C3	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x1A3FFE40086000F0150000000A0000000BAFFFF00D40100016A000101890002
2790	 1C4	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x1A3FFE40086000F0150000000A0000000BAFFFF00D40100016A000101890002
- stack 0: 0xE0
2791	 1C6	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x1A3FFE4
2792	 1C7	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x1A3FFE4
- stack 0: 0xFFFF
2793	 1CA	AND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFE4
2794	 1CB	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0xFFE4
- stack 0: 0x1
2795	 1CD	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2796	 1CE	ADD		 	 
- stack 0: 0x5A0
2797	 1CF	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5A0
- stack 0: 0xFFFFFFFF
2798	 1D4	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5A0
2799	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2800	 1D6	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xA0000001E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE4
2801	 1D7	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0xA0000001E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE4
- stack 0: 0xF0
2802	 1D9	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xA0
2803	 1DA	JUMP		 	 
- stack 0: 0x5A0
2804	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5A0
2805	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2806	 A2	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xA0000001E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE4
2807	 A3	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0xA0000001E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE4
- stack 0: 0xE0
2808	 A5	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xA00000
2809	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0xA00000
- stack 0: 0xFFFF
2810	 A9	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2811	 AA	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x1
2812	 AC	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2813	 AD	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x20
2814	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
2815	 B1	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2816	 B3	ADD		 	 
- stack 0: 0x5A4
2817	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2818	 B5	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F
2819	 B6	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x1E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F
- stack 0: 0xF0
2820	 B8	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1E5
2821	 B9	JUMP		 	 
- stack 0: 0x5A4
2822	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A4
2823	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2824	 1E7	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F
2825	 1E8	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x1E5000001E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F
- stack 0: 0xE0
2826	 1EA	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1E50000
2827	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x1E50000
- stack 0: 0xFFFF
2828	 1EE	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2829	 1EF	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2830	 1F1	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2831	 1F2	POP		 	 
- stack 0: 0x5A4
2832	 1F3	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2833	 1F5	ADD		 	 
- stack 0: 0x5A8
2834	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2835	 1F7	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F01500000
2836	 1F8	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x1E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F01500000
- stack 0: 0xF0
2837	 1FA	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1E5
2838	 1FB	JUMP		 	 
- stack 0: 0x5A8
2839	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A8
2840	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2841	 1E7	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F01500000
2842	 1E8	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x1E5000000BAFFFF00D40120016A00010189000201A3FFE40086000F01500000
- stack 0: 0xE0
2843	 1EA	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1E50000
2844	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x1E50000
- stack 0: 0xFFFF
2845	 1EE	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2846	 1EF	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2847	 1F1	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2848	 1F2	POP		 	 
- stack 0: 0x5A8
2849	 1F3	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2850	 1F5	ADD		 	 
- stack 0: 0x5AC
2851	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2852	 1F7	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xBAFFFF00D40120016A00010189000201A3FFE40086000F0150000000A00000
2853	 1F8	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0xBAFFFF00D40120016A00010189000201A3FFE40086000F0150000000A00000
- stack 0: 0xF0
2854	 1FA	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xBA
2855	 1FB	JUMP		 	 
- stack 0: 0x5AC
2856	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x5AC
2857	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2858	 BC	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xBAFFFF00D40120016A00010189000201A3FFE40086000F0150000000A00000
2859	 BD	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0xBAFFFF00D40120016A00010189000201A3FFE40086000F0150000000A00000
- stack 0: 0xE0
2860	 BF	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xBAFFFF
2861	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
2862	 C3	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFF
2863	 C4	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFF
- stack 0: 0x1
2864	 C6	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2865	 C7	PUSH2	0040	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2866	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5AC
2867	 CB	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2868	 CD	ADD		 	 
- stack 0: 0x5B0
2869	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2870	 CF	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xD40120016A00010189000201A3FFE40086000F0150000000A0000000BAFFFF
2871	 D0	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0xD40120016A00010189000201A3FFE40086000F0150000000A0000000BAFFFF
- stack 0: 0xF0
2872	 D2	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xD4
2873	 D3	JUMP		 	 
- stack 0: 0x5B0
2874	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x5B0
2875	 D5	PUSH2	0040	 	 
- stack 1: 0x5B0
- stack 0: 0x40
2876	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2877	 D9	PUSH1	03	 	 
- stack 2: 0x5B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
2878	 DB	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2879	 DC	PUSH2	0020	 	 
- stack 2: 0x5B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2880	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x5B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
2881	 E0	PUSH1	03	 	 
- stack 3: 0x5B0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
2882	 E2	SIGNEXTEND		 	 
- stack 2: 0x5B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
2883	 E3	SLT		 	  ;; # BLT
- stack 1: 0x5B0
- stack 0: 0x0
2884	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0xEC
2885	 E7	JUMPI		 	 
- stack 0: 0x5B0
2886	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x5B0
- stack 0: 0x106
2887	 EB	JUMP		 	 
- stack 0: 0x5B0
2888	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x5B0
2889	 107	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2890	 109	ADD		 	 
- stack 0: 0x5B4
2891	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2892	 10B	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x16A00010189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100
2893	 10C	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x16A00010189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100
- stack 0: 0xF0
2894	 10E	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x16A
2895	 10F	JUMP		 	 
- stack 0: 0x5B4
2896	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B4
2897	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2898	 16C	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x16A00010189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100
2899	 16D	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x16A00010189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100
- stack 0: 0xE0
2900	 16F	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x16A0001
2901	 170	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x16A0001
- stack 0: 0xFFFF
2902	 173	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2903	 174	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
2904	 176	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2905	 177	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x80
2906	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
2907	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B4
- stack 0: 0x2
2908	 17C	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0x80
2909	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B4
2910	 180	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2911	 182	ADD		 	 
- stack 0: 0x5B8
2912	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2913	 184	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100016A0001
2914	 185	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100016A0001
- stack 0: 0xF0
2915	 187	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x189
2916	 188	JUMP		 	 
- stack 0: 0x5B8
2917	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B8
2918	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2919	 18B	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100016A0001
2920	 18C	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x189000201A3FFE40086000F0150000000A0000000BAFFFF00D40100016A0001
- stack 0: 0xE0
2921	 18E	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1890002
2922	 18F	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x1890002
- stack 0: 0xFFFF
2923	 192	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2924	 193	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0x1
2925	 195	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2926	 196	PUSH2	00A0	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0xA0
2927	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B8
2928	 19A	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2929	 19C	ADD		 	 
- stack 0: 0x5BC
2930	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2931	 19E	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x1A3FFE40086000F0150000000A0000000BAFFFF00D40100016A000101890002
2932	 19F	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x1A3FFE40086000F0150000000A0000000BAFFFF00D40100016A000101890002
- stack 0: 0xF0
2933	 1A1	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x1A3
2934	 1A2	JUMP		 	 
- stack 0: 0x5BC
2935	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5BC
2936	 1A4	PUSH2	0080	 	 
- stack 1: 0x5BC
- stack 0: 0x80
2937	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x5BC
- stack 0: 0x2
2938	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2939	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x2
2940	 1AE	PUSH2	00A0	 	 
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0xA0
2941	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0x2
2942	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2943	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0x2
2944	 1B8	SUB		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2945	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x1C1
2946	 1BC	JUMPI		 	 
- stack 0: 0x5BC
2947	 1BD	PUSH2	01DB	 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 1: 0x5BC
- stack 0: 0x1DB
2948	 1C0	JUMP		 	 
- stack 0: 0x5BC
2949	 1DB	JUMPDEST		 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x5BC
2950	 1DC	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2951	 1DE	ADD		 	 
- stack 0: 0x5C0
2952	 1DF	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2953	 1E0	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x86000F0150000000A0000000BAFFFF00D40100016A00010189000201A3FFEC
2954	 1E1	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x86000F0150000000A0000000BAFFFF00D40100016A00010189000201A3FFEC
- stack 0: 0xF0
2955	 1E3	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x86
2956	 1E4	JUMP		 	 
- stack 0: 0x5C0
2957	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5C0
2958	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2959	 88	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x86000F0150000000A0000000BAFFFF00D40100016A00010189000201A3FFEC
2960	 89	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x86000F0150000000A0000000BAFFFF00D40100016A00010189000201A3FFEC
- stack 0: 0xE0
2961	 8B	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x86000F
2962	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x86000F
- stack 0: 0xFFFF
2963	 8F	AND		 	 
- stack 1: 0x5C0
- stack 0: 0xF
2964	 90	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xF
- stack 0: 0x1
2965	 92	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xF
2966	 93	PUSH2	0380	 	 
- stack 2: 0x5C0
- stack 1: 0xF
- stack 0: 0x380
2967	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x5C0
2968	 97	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2969	 99	ADD		 	 
- stack 0: 0x5C4
2970	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2971	 9B	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x150000000A0000000BAFFFF00D40100016A00010189000201A3FFEC00860010
2972	 9C	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x150000000A0000000BAFFFF00D40100016A00010189000201A3FFEC00860010
- stack 0: 0xF0
2973	 9E	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x150
2974	 9F	JUMP		 	 
- stack 0: 0x5C4
2975	 150	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5C4
2976	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2977	 152	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x150000000A0000000BAFFFF00D40100016A00010189000201A3FFEC00860010
2978	 153	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x150000000A0000000BAFFFF00D40100016A00010189000201A3FFEC00860010
- stack 0: 0xE0
2979	 155	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x1500000
2980	 156	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x1500000
- stack 0: 0xFFFF
2981	 159	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2982	 15A	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x1
2983	 15C	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2984	 15D	PUSH2	0080	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x80
2985	 160	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C4
2986	 161	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2987	 163	ADD		 	 
- stack 0: 0x5C8
2988	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2989	 165	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xA0000000BAFFFF00D40100016A00010189000201A3FFEC0086001001500000
2990	 166	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0xA0000000BAFFFF00D40100016A00010189000201A3FFEC0086001001500000
- stack 0: 0xF0
2991	 168	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xA0
2992	 169	JUMP		 	 
- stack 0: 0x5C8
2993	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5C8
2994	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2995	 A2	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xA0000000BAFFFF00D40100016A00010189000201A3FFEC0086001001500000
2996	 A3	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0xA0000000BAFFFF00D40100016A00010189000201A3FFEC0086001001500000
- stack 0: 0xE0
2997	 A5	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xA00000
2998	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0xA00000
- stack 0: 0xFFFF
2999	 A9	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
3000	 AA	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x1
3001	 AC	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
3002	 AD	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x20
3003	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
3004	 B1	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
3005	 B3	ADD		 	 
- stack 0: 0x5CC
3006	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
3007	 B5	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xBAFFFF00D40100016A00010189000201A3FFEC008600100150000000A00000
3008	 B6	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xBAFFFF00D40100016A00010189000201A3FFEC008600100150000000A00000
- stack 0: 0xF0
3009	 B8	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xBA
3010	 B9	JUMP		 	 
- stack 0: 0x5CC
3011	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x5CC
3012	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
3013	 BC	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xBAFFFF00D40100016A00010189000201A3FFEC008600100150000000A00000
3014	 BD	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0xBAFFFF00D40100016A00010189000201A3FFEC008600100150000000A00000
- stack 0: 0xE0
3015	 BF	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xBAFFFF
3016	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
3017	 C3	AND		 	 
- stack 1: 0x5CC
- stack 0: 0xFFFF
3018	 C4	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0xFFFF
- stack 0: 0x1
3019	 C6	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3020	 C7	PUSH2	0040	 	 
- stack 2: 0x5CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3021	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5CC
3022	 CB	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
3023	 CD	ADD		 	 
- stack 0: 0x5D0
3024	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
3025	 CF	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xD40100016A00010189000201A3FFEC008600100150000000A0000000BAFFFF
3026	 D0	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xD40100016A00010189000201A3FFEC008600100150000000A0000000BAFFFF
- stack 0: 0xF0
3027	 D2	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xD4
3028	 D3	JUMP		 	 
- stack 0: 0x5D0
3029	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x5D0
3030	 D5	PUSH2	0040	 	 
- stack 1: 0x5D0
- stack 0: 0x40
3031	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3032	 D9	PUSH1	03	 	 
- stack 2: 0x5D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
3033	 DB	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3034	 DC	PUSH2	0020	 	 
- stack 2: 0x5D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3035	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x5D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
3036	 E0	PUSH1	03	 	 
- stack 3: 0x5D0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
3037	 E2	SIGNEXTEND		 	 
- stack 2: 0x5D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
3038	 E3	SLT		 	  ;; # BLT
- stack 1: 0x5D0
- stack 0: 0x0
3039	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0xEC
3040	 E7	JUMPI		 	 
- stack 0: 0x5D0
3041	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x5D0
- stack 0: 0x106
3042	 EB	JUMP		 	 
- stack 0: 0x5D0
3043	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x5D0
3044	 107	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
3045	 109	ADD		 	 
- stack 0: 0x5D4
3046	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3047	 10B	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x16A00010189000201A3FFEC008600100150000000A0000000BAFFFF01E50000
3048	 10C	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x16A00010189000201A3FFEC008600100150000000A0000000BAFFFF01E50000
- stack 0: 0xF0
3049	 10E	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x16A
3050	 10F	JUMP		 	 
- stack 0: 0x5D4
3051	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D4
3052	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
3053	 16C	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x16A00010189000201A3FFEC008600100150000000A0000000BAFFFF01E50000
3054	 16D	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x16A00010189000201A3FFEC008600100150000000A0000000BAFFFF01E50000
- stack 0: 0xE0
3055	 16F	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x16A0001
3056	 170	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x16A0001
- stack 0: 0xFFFF
3057	 173	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x1
3058	 174	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x1
3059	 176	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x1
3060	 177	PUSH2	0080	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x80
3061	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x0
3062	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D4
- stack 0: 0x1
3063	 17C	PUSH2	0080	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x80
3064	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D4
3065	 180	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3066	 182	ADD		 	 
- stack 0: 0x5D8
3067	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3068	 184	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x189000201A3FFEC008600100150000000A0000000BAFFFF01E5000000D400DC
3069	 185	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x189000201A3FFEC008600100150000000A0000000BAFFFF01E5000000D400DC
- stack 0: 0xF0
3070	 187	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x189
3071	 188	JUMP		 	 
- stack 0: 0x5D8
3072	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D8
3073	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
3074	 18B	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x189000201A3FFEC008600100150000000A0000000BAFFFF01E5000000D400DC
3075	 18C	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x189000201A3FFEC008600100150000000A0000000BAFFFF01E5000000D400DC
- stack 0: 0xE0
3076	 18E	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x1890002
3077	 18F	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x1890002
- stack 0: 0xFFFF
3078	 192	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x2
3079	 193	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0x1
3080	 195	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x2
3081	 196	PUSH2	00A0	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0xA0
3082	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D8
3083	 19A	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3084	 19C	ADD		 	 
- stack 0: 0x5DC
3085	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3086	 19E	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x1A3FFEC008600100150000000A0000000BAFFFF01E5000000D400DC016A0001
3087	 19F	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x1A3FFEC008600100150000000A0000000BAFFFF01E5000000D400DC016A0001
- stack 0: 0xF0
3088	 1A1	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x1A3
3089	 1A2	JUMP		 	 
- stack 0: 0x5DC
3090	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5DC
3091	 1A4	PUSH2	0080	 	 
- stack 1: 0x5DC
- stack 0: 0x80
3092	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x5DC
- stack 0: 0x1
3093	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3094	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5DC
- stack 0: 0x1
3095	 1AE	PUSH2	00A0	 	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0xA0
3096	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x2
3097	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5DC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3098	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x2
3099	 1B8	SUB		 	 
- stack 1: 0x5DC
- stack 0: 0x1
3100	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x1C1
3101	 1BC	JUMPI		 	 
- stack 0: 0x5DC
3102	 1C1	JUMPDEST		 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x5DC
3103	 1C2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
3104	 1C3	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x1A3FFEC008600100150000000A0000000BAFFFF01E5000000D400DC016A0001
3105	 1C4	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x1A3FFEC008600100150000000A0000000BAFFFF01E5000000D400DC016A0001
- stack 0: 0xE0
3106	 1C6	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x1A3FFEC
3107	 1C7	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x1A3FFEC
- stack 0: 0xFFFF
3108	 1CA	AND		 	 
- stack 1: 0x5DC
- stack 0: 0xFFEC
3109	 1CB	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0xFFEC
- stack 0: 0x1
3110	 1CD	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
3111	 1CE	ADD		 	 
- stack 0: 0x5C8
3112	 1CF	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFF
3113	 1D4	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5C8
3114	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
3115	 1D6	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xA0000000BAFFFF00D40100016A00010189000201A3FFEC0086001001500000
3116	 1D7	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0xA0000000BAFFFF00D40100016A00010189000201A3FFEC0086001001500000
- stack 0: 0xF0
3117	 1D9	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xA0
3118	 1DA	JUMP		 	 
- stack 0: 0x5C8
3119	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5C8
3120	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
3121	 A2	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xA0000000BAFFFF00D40100016A00010189000201A3FFEC0086001001500000
3122	 A3	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0xA0000000BAFFFF00D40100016A00010189000201A3FFEC0086001001500000
- stack 0: 0xE0
3123	 A5	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xA00000
3124	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0xA00000
- stack 0: 0xFFFF
3125	 A9	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
3126	 AA	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x1
3127	 AC	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
3128	 AD	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x20
3129	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
3130	 B1	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
3131	 B3	ADD		 	 
- stack 0: 0x5CC
3132	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
3133	 B5	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xBAFFFF00D40100016A00010189000201A3FFEC008600100150000000A00000
3134	 B6	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xBAFFFF00D40100016A00010189000201A3FFEC008600100150000000A00000
- stack 0: 0xF0
3135	 B8	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xBA
3136	 B9	JUMP		 	 
- stack 0: 0x5CC
3137	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x5CC
3138	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
3139	 BC	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xBAFFFF00D40100016A00010189000201A3FFEC008600100150000000A00000
3140	 BD	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0xBAFFFF00D40100016A00010189000201A3FFEC008600100150000000A00000
- stack 0: 0xE0
3141	 BF	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xBAFFFF
3142	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
3143	 C3	AND		 	 
- stack 1: 0x5CC
- stack 0: 0xFFFF
3144	 C4	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0xFFFF
- stack 0: 0x1
3145	 C6	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3146	 C7	PUSH2	0040	 	 
- stack 2: 0x5CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3147	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5CC
3148	 CB	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
3149	 CD	ADD		 	 
- stack 0: 0x5D0
3150	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
3151	 CF	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xD40100016A00010189000201A3FFEC008600100150000000A0000000BAFFFF
3152	 D0	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xD40100016A00010189000201A3FFEC008600100150000000A0000000BAFFFF
- stack 0: 0xF0
3153	 D2	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xD4
3154	 D3	JUMP		 	 
- stack 0: 0x5D0
3155	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x5D0
3156	 D5	PUSH2	0040	 	 
- stack 1: 0x5D0
- stack 0: 0x40
3157	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3158	 D9	PUSH1	03	 	 
- stack 2: 0x5D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
3159	 DB	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3160	 DC	PUSH2	0020	 	 
- stack 2: 0x5D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3161	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x5D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
3162	 E0	PUSH1	03	 	 
- stack 3: 0x5D0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
3163	 E2	SIGNEXTEND		 	 
- stack 2: 0x5D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
3164	 E3	SLT		 	  ;; # BLT
- stack 1: 0x5D0
- stack 0: 0x0
3165	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0xEC
3166	 E7	JUMPI		 	 
- stack 0: 0x5D0
3167	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x5D0
- stack 0: 0x106
3168	 EB	JUMP		 	 
- stack 0: 0x5D0
3169	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x5D0
3170	 107	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
3171	 109	ADD		 	 
- stack 0: 0x5D4
3172	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3173	 10B	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x16A00010189000201A3FFEC008600100150000000A0000000BAFFFF01E50000
3174	 10C	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x16A00010189000201A3FFEC008600100150000000A0000000BAFFFF01E50000
- stack 0: 0xF0
3175	 10E	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x16A
3176	 10F	JUMP		 	 
- stack 0: 0x5D4
3177	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D4
3178	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
3179	 16C	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x16A00010189000201A3FFEC008600100150000000A0000000BAFFFF01E50000
3180	 16D	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x16A00010189000201A3FFEC008600100150000000A0000000BAFFFF01E50000
- stack 0: 0xE0
3181	 16F	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x16A0001
3182	 170	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x16A0001
- stack 0: 0xFFFF
3183	 173	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x1
3184	 174	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x1
3185	 176	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x1
3186	 177	PUSH2	0080	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x80
3187	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x1
3188	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D4
- stack 0: 0x2
3189	 17C	PUSH2	0080	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x80
3190	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D4
3191	 180	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3192	 182	ADD		 	 
- stack 0: 0x5D8
3193	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3194	 184	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x189000201A3FFEC008600100150000000A0000000BAFFFF01E5000000D400DC
3195	 185	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x189000201A3FFEC008600100150000000A0000000BAFFFF01E5000000D400DC
- stack 0: 0xF0
3196	 187	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x189
3197	 188	JUMP		 	 
- stack 0: 0x5D8
3198	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D8
3199	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
3200	 18B	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x189000201A3FFEC008600100150000000A0000000BAFFFF01E5000000D400DC
3201	 18C	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x189000201A3FFEC008600100150000000A0000000BAFFFF01E5000000D400DC
- stack 0: 0xE0
3202	 18E	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x1890002
3203	 18F	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x1890002
- stack 0: 0xFFFF
3204	 192	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x2
3205	 193	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0x1
3206	 195	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x2
3207	 196	PUSH2	00A0	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0xA0
3208	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D8
3209	 19A	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3210	 19C	ADD		 	 
- stack 0: 0x5DC
3211	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3212	 19E	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x1A3FFEC008600100150000000A0000000BAFFFF01E5000000D400DC016A0001
3213	 19F	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x1A3FFEC008600100150000000A0000000BAFFFF01E5000000D400DC016A0001
- stack 0: 0xF0
3214	 1A1	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x1A3
3215	 1A2	JUMP		 	 
- stack 0: 0x5DC
3216	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5DC
3217	 1A4	PUSH2	0080	 	 
- stack 1: 0x5DC
- stack 0: 0x80
3218	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x5DC
- stack 0: 0x2
3219	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3220	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5DC
- stack 0: 0x2
3221	 1AE	PUSH2	00A0	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0xA0
3222	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0x2
3223	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5DC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3224	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0x2
3225	 1B8	SUB		 	 
- stack 1: 0x5DC
- stack 0: 0x0
3226	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x1C1
3227	 1BC	JUMPI		 	 
- stack 0: 0x5DC
3228	 1BD	PUSH2	01DB	 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 1: 0x5DC
- stack 0: 0x1DB
3229	 1C0	JUMP		 	 
- stack 0: 0x5DC
3230	 1DB	JUMPDEST		 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x5DC
3231	 1DC	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
3232	 1DE	ADD		 	 
- stack 0: 0x5E0
3233	 1DF	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
3234	 1E0	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x8600100150000000A0000000BAFFFF01E5000000D400DC016A000101890002
3235	 1E1	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x8600100150000000A0000000BAFFFF01E5000000D400DC016A000101890002
- stack 0: 0xF0
3236	 1E3	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x86
3237	 1E4	JUMP		 	 
- stack 0: 0x5E0
3238	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5E0
3239	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
3240	 88	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x8600100150000000A0000000BAFFFF01E5000000D400DC016A000101890002
3241	 89	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x8600100150000000A0000000BAFFFF01E5000000D400DC016A000101890002
- stack 0: 0xE0
3242	 8B	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x860010
3243	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x860010
- stack 0: 0xFFFF
3244	 8F	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x10
3245	 90	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x10
- stack 0: 0x1
3246	 92	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x10
3247	 93	PUSH2	0380	 	 
- stack 2: 0x5E0
- stack 1: 0x10
- stack 0: 0x380
3248	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x5E0
3249	 97	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
3250	 99	ADD		 	 
- stack 0: 0x5E4
3251	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3252	 9B	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x150000000A0000000BAFFFF01E5000000D400DC016A00010189000201A3FFE8
3253	 9C	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x150000000A0000000BAFFFF01E5000000D400DC016A00010189000201A3FFE8
- stack 0: 0xF0
3254	 9E	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x150
3255	 9F	JUMP		 	 
- stack 0: 0x5E4
3256	 150	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5E4
3257	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
3258	 152	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x150000000A0000000BAFFFF01E5000000D400DC016A00010189000201A3FFE8
3259	 153	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x150000000A0000000BAFFFF01E5000000D400DC016A00010189000201A3FFE8
- stack 0: 0xE0
3260	 155	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1500000
3261	 156	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x1500000
- stack 0: 0xFFFF
3262	 159	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x0
3263	 15A	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x1
3264	 15C	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x0
3265	 15D	PUSH2	0080	 	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x80
3266	 160	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E4
3267	 161	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3268	 163	ADD		 	 
- stack 0: 0x5E8
3269	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3270	 165	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xA0000000BAFFFF01E5000000D400DC016A00010189000201A3FFE800860011
3271	 166	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0xA0000000BAFFFF01E5000000D400DC016A00010189000201A3FFE800860011
- stack 0: 0xF0
3272	 168	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xA0
3273	 169	JUMP		 	 
- stack 0: 0x5E8
3274	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5E8
3275	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
3276	 A2	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xA0000000BAFFFF01E5000000D400DC016A00010189000201A3FFE800860011
3277	 A3	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0xA0000000BAFFFF01E5000000D400DC016A00010189000201A3FFE800860011
- stack 0: 0xE0
3278	 A5	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xA00000
3279	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0xA00000
- stack 0: 0xFFFF
3280	 A9	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3281	 AA	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x1
3282	 AC	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3283	 AD	PUSH2	0020	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x20
3284	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E8
3285	 B1	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3286	 B3	ADD		 	 
- stack 0: 0x5EC
3287	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3288	 B5	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xBAFFFF01E5000000D400DC016A00010189000201A3FFE80086001101500000
3289	 B6	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0xBAFFFF01E5000000D400DC016A00010189000201A3FFE80086001101500000
- stack 0: 0xF0
3290	 B8	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xBA
3291	 B9	JUMP		 	 
- stack 0: 0x5EC
3292	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x5EC
3293	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
3294	 BC	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xBAFFFF01E5000000D400DC016A00010189000201A3FFE80086001101500000
3295	 BD	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0xBAFFFF01E5000000D400DC016A00010189000201A3FFE80086001101500000
- stack 0: 0xE0
3296	 BF	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xBAFFFF
3297	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
3298	 C3	AND		 	 
- stack 1: 0x5EC
- stack 0: 0xFFFF
3299	 C4	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFF
- stack 0: 0x1
3300	 C6	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3301	 C7	PUSH2	0040	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3302	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5EC
3303	 CB	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3304	 CD	ADD		 	 
- stack 0: 0x5F0
3305	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3306	 CF	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x1E5000000D400DC016A00010189000201A3FFE8008600110150000000A00000
3307	 D0	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x1E5000000D400DC016A00010189000201A3FFE8008600110150000000A00000
- stack 0: 0xF0
3308	 D2	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x1E5
3309	 D3	JUMP		 	 
- stack 0: 0x5F0
3310	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5F0
3311	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3312	 1E7	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x1E5000000D400DC016A00010189000201A3FFE8008600110150000000A00000
3313	 1E8	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x1E5000000D400DC016A00010189000201A3FFE8008600110150000000A00000
- stack 0: 0xE0
3314	 1EA	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x1E50000
3315	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x1E50000
- stack 0: 0xFFFF
3316	 1EE	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3317	 1EF	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x1
3318	 1F1	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3319	 1F2	POP		 	 
- stack 0: 0x5F0
3320	 1F3	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3321	 1F5	ADD		 	 
- stack 0: 0x5F4
3322	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3323	 1F7	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0xD400DC016A00010189000201A3FFE8008600110150000000A0000000BAFFFF
3324	 1F8	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0xD400DC016A00010189000201A3FFE8008600110150000000A0000000BAFFFF
- stack 0: 0xF0
3325	 1FA	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0xD4
3326	 1FB	JUMP		 	 
- stack 0: 0x5F4
3327	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x5F4
3328	 D5	PUSH2	0040	 	 
- stack 1: 0x5F4
- stack 0: 0x40
3329	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3330	 D9	PUSH1	03	 	 
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
3331	 DB	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3332	 DC	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3333	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
3334	 E0	PUSH1	03	 	 
- stack 3: 0x5F4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
3335	 E2	SIGNEXTEND		 	 
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
3336	 E3	SLT		 	  ;; # BLT
- stack 1: 0x5F4
- stack 0: 0x0
3337	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0xEC
3338	 E7	JUMPI		 	 
- stack 0: 0x5F4
3339	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x5F4
- stack 0: 0x106
3340	 EB	JUMP		 	 
- stack 0: 0x5F4
3341	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x5F4
3342	 107	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3343	 109	ADD		 	 
- stack 0: 0x5F8
3344	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3345	 10B	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x16A00010189000201A3FFE8008600110150000000A0000000BAFFFF01E50000
3346	 10C	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x16A00010189000201A3FFE8008600110150000000A0000000BAFFFF01E50000
- stack 0: 0xF0
3347	 10E	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x16A
3348	 10F	JUMP		 	 
- stack 0: 0x5F8
3349	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5F8
3350	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3351	 16C	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x16A00010189000201A3FFE8008600110150000000A0000000BAFFFF01E50000
3352	 16D	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x16A00010189000201A3FFE8008600110150000000A0000000BAFFFF01E50000
- stack 0: 0xE0
3353	 16F	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x16A0001
3354	 170	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x16A0001
- stack 0: 0xFFFF
3355	 173	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
3356	 174	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x1
3357	 176	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
3358	 177	PUSH2	0080	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x80
3359	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x0
3360	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x5F8
- stack 0: 0x1
3361	 17C	PUSH2	0080	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x80
3362	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x5F8
3363	 180	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3364	 182	ADD		 	 
- stack 0: 0x5FC
3365	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3366	 184	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x189000201A3FFE8008600110150000000A0000000BAFFFF01E5000001E50000
3367	 185	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x189000201A3FFE8008600110150000000A0000000BAFFFF01E5000001E50000
- stack 0: 0xF0
3368	 187	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x189
3369	 188	JUMP		 	 
- stack 0: 0x5FC
3370	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5FC
3371	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3372	 18B	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x189000201A3FFE8008600110150000000A0000000BAFFFF01E5000001E50000
3373	 18C	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x189000201A3FFE8008600110150000000A0000000BAFFFF01E5000001E50000
- stack 0: 0xE0
3374	 18E	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x1890002
3375	 18F	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x1890002
- stack 0: 0xFFFF
3376	 192	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x2
3377	 193	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x2
- stack 0: 0x1
3378	 195	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x2
3379	 196	PUSH2	00A0	 	 
- stack 2: 0x5FC
- stack 1: 0x2
- stack 0: 0xA0
3380	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x5FC
3381	 19A	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3382	 19C	ADD		 	 
- stack 0: 0x600
3383	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3384	 19E	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x1A3FFE8008600110150000000A0000000BAFFFF01E5000001E5000000D400B4
3385	 19F	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x1A3FFE8008600110150000000A0000000BAFFFF01E5000001E5000000D400B4
- stack 0: 0xF0
3386	 1A1	SHR		 	 
- stack 1: 0x600
- stack 0: 0x1A3
3387	 1A2	JUMP		 	 
- stack 0: 0x600
3388	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x600
3389	 1A4	PUSH2	0080	 	 
- stack 1: 0x600
- stack 0: 0x80
3390	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x600
- stack 0: 0x1
3391	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3392	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x600
- stack 0: 0x1
3393	 1AE	PUSH2	00A0	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0xA0
3394	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x2
3395	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x600
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3396	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x2
3397	 1B8	SUB		 	 
- stack 1: 0x600
- stack 0: 0x1
3398	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1C1
3399	 1BC	JUMPI		 	 
- stack 0: 0x600
3400	 1C1	JUMPDEST		 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x600
3401	 1C2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3402	 1C3	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x1A3FFE8008600110150000000A0000000BAFFFF01E5000001E5000000D400B4
3403	 1C4	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x1A3FFE8008600110150000000A0000000BAFFFF01E5000001E5000000D400B4
- stack 0: 0xE0
3404	 1C6	SHR		 	 
- stack 1: 0x600
- stack 0: 0x1A3FFE8
3405	 1C7	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x1A3FFE8
- stack 0: 0xFFFF
3406	 1CA	AND		 	 
- stack 1: 0x600
- stack 0: 0xFFE8
3407	 1CB	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0xFFE8
- stack 0: 0x1
3408	 1CD	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
3409	 1CE	ADD		 	 
- stack 0: 0x5E8
3410	 1CF	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5E8
- stack 0: 0xFFFFFFFF
3411	 1D4	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5E8
3412	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3413	 1D6	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xA0000000BAFFFF01E5000000D400DC016A00010189000201A3FFE800860011
3414	 1D7	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0xA0000000BAFFFF01E5000000D400DC016A00010189000201A3FFE800860011
- stack 0: 0xF0
3415	 1D9	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xA0
3416	 1DA	JUMP		 	 
- stack 0: 0x5E8
3417	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5E8
3418	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
3419	 A2	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xA0000000BAFFFF01E5000000D400DC016A00010189000201A3FFE800860011
3420	 A3	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0xA0000000BAFFFF01E5000000D400DC016A00010189000201A3FFE800860011
- stack 0: 0xE0
3421	 A5	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xA00000
3422	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0xA00000
- stack 0: 0xFFFF
3423	 A9	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3424	 AA	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x1
3425	 AC	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3426	 AD	PUSH2	0020	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x20
3427	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E8
3428	 B1	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3429	 B3	ADD		 	 
- stack 0: 0x5EC
3430	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3431	 B5	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xBAFFFF01E5000000D400DC016A00010189000201A3FFE80086001101500000
3432	 B6	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0xBAFFFF01E5000000D400DC016A00010189000201A3FFE80086001101500000
- stack 0: 0xF0
3433	 B8	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xBA
3434	 B9	JUMP		 	 
- stack 0: 0x5EC
3435	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x5EC
3436	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
3437	 BC	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xBAFFFF01E5000000D400DC016A00010189000201A3FFE80086001101500000
3438	 BD	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0xBAFFFF01E5000000D400DC016A00010189000201A3FFE80086001101500000
- stack 0: 0xE0
3439	 BF	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xBAFFFF
3440	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
3441	 C3	AND		 	 
- stack 1: 0x5EC
- stack 0: 0xFFFF
3442	 C4	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFF
- stack 0: 0x1
3443	 C6	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3444	 C7	PUSH2	0040	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3445	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5EC
3446	 CB	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3447	 CD	ADD		 	 
- stack 0: 0x5F0
3448	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3449	 CF	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x1E5000000D400DC016A00010189000201A3FFE8008600110150000000A00000
3450	 D0	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x1E5000000D400DC016A00010189000201A3FFE8008600110150000000A00000
- stack 0: 0xF0
3451	 D2	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x1E5
3452	 D3	JUMP		 	 
- stack 0: 0x5F0
3453	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5F0
3454	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3455	 1E7	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x1E5000000D400DC016A00010189000201A3FFE8008600110150000000A00000
3456	 1E8	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x1E5000000D400DC016A00010189000201A3FFE8008600110150000000A00000
- stack 0: 0xE0
3457	 1EA	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x1E50000
3458	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x1E50000
- stack 0: 0xFFFF
3459	 1EE	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3460	 1EF	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x1
3461	 1F1	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3462	 1F2	POP		 	 
- stack 0: 0x5F0
3463	 1F3	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3464	 1F5	ADD		 	 
- stack 0: 0x5F4
3465	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3466	 1F7	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0xD400DC016A00010189000201A3FFE8008600110150000000A0000000BAFFFF
3467	 1F8	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0xD400DC016A00010189000201A3FFE8008600110150000000A0000000BAFFFF
- stack 0: 0xF0
3468	 1FA	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0xD4
3469	 1FB	JUMP		 	 
- stack 0: 0x5F4
3470	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x5F4
3471	 D5	PUSH2	0040	 	 
- stack 1: 0x5F4
- stack 0: 0x40
3472	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3473	 D9	PUSH1	03	 	 
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
3474	 DB	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3475	 DC	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3476	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
3477	 E0	PUSH1	03	 	 
- stack 3: 0x5F4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
3478	 E2	SIGNEXTEND		 	 
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
3479	 E3	SLT		 	  ;; # BLT
- stack 1: 0x5F4
- stack 0: 0x0
3480	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0xEC
3481	 E7	JUMPI		 	 
- stack 0: 0x5F4
3482	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x5F4
- stack 0: 0x106
3483	 EB	JUMP		 	 
- stack 0: 0x5F4
3484	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x5F4
3485	 107	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3486	 109	ADD		 	 
- stack 0: 0x5F8
3487	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3488	 10B	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x16A00010189000201A3FFE8008600110150000000A0000000BAFFFF01E50000
3489	 10C	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x16A00010189000201A3FFE8008600110150000000A0000000BAFFFF01E50000
- stack 0: 0xF0
3490	 10E	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x16A
3491	 10F	JUMP		 	 
- stack 0: 0x5F8
3492	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5F8
3493	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3494	 16C	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x16A00010189000201A3FFE8008600110150000000A0000000BAFFFF01E50000
3495	 16D	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x16A00010189000201A3FFE8008600110150000000A0000000BAFFFF01E50000
- stack 0: 0xE0
3496	 16F	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x16A0001
3497	 170	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x16A0001
- stack 0: 0xFFFF
3498	 173	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
3499	 174	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x1
3500	 176	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
3501	 177	PUSH2	0080	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x80
3502	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x1
3503	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x5F8
- stack 0: 0x2
3504	 17C	PUSH2	0080	 	 
- stack 2: 0x5F8
- stack 1: 0x2
- stack 0: 0x80
3505	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x5F8
3506	 180	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3507	 182	ADD		 	 
- stack 0: 0x5FC
3508	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3509	 184	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x189000201A3FFE8008600110150000000A0000000BAFFFF01E5000001E50000
3510	 185	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x189000201A3FFE8008600110150000000A0000000BAFFFF01E5000001E50000
- stack 0: 0xF0
3511	 187	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x189
3512	 188	JUMP		 	 
- stack 0: 0x5FC
3513	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5FC
3514	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3515	 18B	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x189000201A3FFE8008600110150000000A0000000BAFFFF01E5000001E50000
3516	 18C	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x189000201A3FFE8008600110150000000A0000000BAFFFF01E5000001E50000
- stack 0: 0xE0
3517	 18E	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x1890002
3518	 18F	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x1890002
- stack 0: 0xFFFF
3519	 192	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x2
3520	 193	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x2
- stack 0: 0x1
3521	 195	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x2
3522	 196	PUSH2	00A0	 	 
- stack 2: 0x5FC
- stack 1: 0x2
- stack 0: 0xA0
3523	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x5FC
3524	 19A	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3525	 19C	ADD		 	 
- stack 0: 0x600
3526	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3527	 19E	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x1A3FFE8008600110150000000A0000000BAFFFF01E5000001E5000000D400B4
3528	 19F	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x1A3FFE8008600110150000000A0000000BAFFFF01E5000001E5000000D400B4
- stack 0: 0xF0
3529	 1A1	SHR		 	 
- stack 1: 0x600
- stack 0: 0x1A3
3530	 1A2	JUMP		 	 
- stack 0: 0x600
3531	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x600
3532	 1A4	PUSH2	0080	 	 
- stack 1: 0x600
- stack 0: 0x80
3533	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x600
- stack 0: 0x2
3534	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3535	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x600
- stack 0: 0x2
3536	 1AE	PUSH2	00A0	 	 
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0xA0
3537	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0x2
3538	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x600
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3539	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0x2
3540	 1B8	SUB		 	 
- stack 1: 0x600
- stack 0: 0x0
3541	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x1C1
3542	 1BC	JUMPI		 	 
- stack 0: 0x600
3543	 1BD	PUSH2	01DB	 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 1: 0x600
- stack 0: 0x1DB
3544	 1C0	JUMP		 	 
- stack 0: 0x600
3545	 1DB	JUMPDEST		 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x600
3546	 1DC	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3547	 1DE	ADD		 	 
- stack 0: 0x604
3548	 1DF	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3549	 1E0	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x8600110150000000A0000000BAFFFF01E5000001E5000000D400B4016A0001
3550	 1E1	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x8600110150000000A0000000BAFFFF01E5000001E5000000D400B4016A0001
- stack 0: 0xF0
3551	 1E3	SHR		 	 
- stack 1: 0x604
- stack 0: 0x86
3552	 1E4	JUMP		 	 
- stack 0: 0x604
3553	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x604
3554	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3555	 88	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x8600110150000000A0000000BAFFFF01E5000001E5000000D400B4016A0001
3556	 89	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x8600110150000000A0000000BAFFFF01E5000001E5000000D400B4016A0001
- stack 0: 0xE0
3557	 8B	SHR		 	 
- stack 1: 0x604
- stack 0: 0x860011
3558	 8C	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x860011
- stack 0: 0xFFFF
3559	 8F	AND		 	 
- stack 1: 0x604
- stack 0: 0x11
3560	 90	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x11
- stack 0: 0x1
3561	 92	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x11
3562	 93	PUSH2	0380	 	 
- stack 2: 0x604
- stack 1: 0x11
- stack 0: 0x380
3563	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x604
3564	 97	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3565	 99	ADD		 	 
- stack 0: 0x608
3566	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3567	 9B	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x150000000A0000000BAFFFF01E5000001E5000000D400B4016A000101890002
3568	 9C	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x150000000A0000000BAFFFF01E5000001E5000000D400B4016A000101890002
- stack 0: 0xF0
3569	 9E	SHR		 	 
- stack 1: 0x608
- stack 0: 0x150
3570	 9F	JUMP		 	 
- stack 0: 0x608
3571	 150	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x608
3572	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3573	 152	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x150000000A0000000BAFFFF01E5000001E5000000D400B4016A000101890002
3574	 153	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x150000000A0000000BAFFFF01E5000001E5000000D400B4016A000101890002
- stack 0: 0xE0
3575	 155	SHR		 	 
- stack 1: 0x608
- stack 0: 0x1500000
3576	 156	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x1500000
- stack 0: 0xFFFF
3577	 159	AND		 	 
- stack 1: 0x608
- stack 0: 0x0
3578	 15A	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x1
3579	 15C	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x0
3580	 15D	PUSH2	0080	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x80
3581	 160	MSTORE		 	  ;; # store to x4
- stack 0: 0x608
3582	 161	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3583	 163	ADD		 	 
- stack 0: 0x60C
3584	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3585	 165	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xA0000000BAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE4
3586	 166	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0xA0000000BAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE4
- stack 0: 0xF0
3587	 168	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xA0
3588	 169	JUMP		 	 
- stack 0: 0x60C
3589	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x60C
3590	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
3591	 A2	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xA0000000BAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE4
3592	 A3	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0xA0000000BAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE4
- stack 0: 0xE0
3593	 A5	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xA00000
3594	 A6	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0xA00000
- stack 0: 0xFFFF
3595	 A9	AND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3596	 AA	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x1
3597	 AC	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3598	 AD	PUSH2	0020	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x20
3599	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x60C
3600	 B1	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3601	 B3	ADD		 	 
- stack 0: 0x610
3602	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3603	 B5	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xBAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE400860012
3604	 B6	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0xBAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE400860012
- stack 0: 0xF0
3605	 B8	SHR		 	 
- stack 1: 0x610
- stack 0: 0xBA
3606	 B9	JUMP		 	 
- stack 0: 0x610
3607	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x610
3608	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3609	 BC	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xBAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE400860012
3610	 BD	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0xBAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE400860012
- stack 0: 0xE0
3611	 BF	SHR		 	 
- stack 1: 0x610
- stack 0: 0xBAFFFF
3612	 C0	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
3613	 C3	AND		 	 
- stack 1: 0x610
- stack 0: 0xFFFF
3614	 C4	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0xFFFF
- stack 0: 0x1
3615	 C6	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3616	 C7	PUSH2	0040	 	 
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3617	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x610
3618	 CB	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3619	 CD	ADD		 	 
- stack 0: 0x614
3620	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3621	 CF	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1E5000001E5000000D400B4016A00010189000201A3FFE40086001201500000
3622	 D0	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x1E5000001E5000000D400B4016A00010189000201A3FFE40086001201500000
- stack 0: 0xF0
3623	 D2	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1E5
3624	 D3	JUMP		 	 
- stack 0: 0x614
3625	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x614
3626	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3627	 1E7	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1E5000001E5000000D400B4016A00010189000201A3FFE40086001201500000
3628	 1E8	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x1E5000001E5000000D400B4016A00010189000201A3FFE40086001201500000
- stack 0: 0xE0
3629	 1EA	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1E50000
3630	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x1E50000
- stack 0: 0xFFFF
3631	 1EE	AND		 	 
- stack 1: 0x614
- stack 0: 0x0
3632	 1EF	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x1
3633	 1F1	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x0
3634	 1F2	POP		 	 
- stack 0: 0x614
3635	 1F3	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3636	 1F5	ADD		 	 
- stack 0: 0x618
3637	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3638	 1F7	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1E5000000D400B4016A00010189000201A3FFE4008600120150000000A00000
3639	 1F8	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x1E5000000D400B4016A00010189000201A3FFE4008600120150000000A00000
- stack 0: 0xF0
3640	 1FA	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1E5
3641	 1FB	JUMP		 	 
- stack 0: 0x618
3642	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x618
3643	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3644	 1E7	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1E5000000D400B4016A00010189000201A3FFE4008600120150000000A00000
3645	 1E8	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x1E5000000D400B4016A00010189000201A3FFE4008600120150000000A00000
- stack 0: 0xE0
3646	 1EA	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1E50000
3647	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x1E50000
- stack 0: 0xFFFF
3648	 1EE	AND		 	 
- stack 1: 0x618
- stack 0: 0x0
3649	 1EF	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x1
3650	 1F1	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x0
3651	 1F2	POP		 	 
- stack 0: 0x618
3652	 1F3	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3653	 1F5	ADD		 	 
- stack 0: 0x61C
3654	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3655	 1F7	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0xD400B4016A00010189000201A3FFE4008600120150000000A0000001E50000
3656	 1F8	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0xD400B4016A00010189000201A3FFE4008600120150000000A0000001E50000
- stack 0: 0xF0
3657	 1FA	SHR		 	 
- stack 1: 0x61C
- stack 0: 0xD4
3658	 1FB	JUMP		 	 
- stack 0: 0x61C
3659	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x61C
3660	 D5	PUSH2	0040	 	 
- stack 1: 0x61C
- stack 0: 0x40
3661	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x61C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3662	 D9	PUSH1	03	 	 
- stack 2: 0x61C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
3663	 DB	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3664	 DC	PUSH2	0020	 	 
- stack 2: 0x61C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3665	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x61C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
3666	 E0	PUSH1	03	 	 
- stack 3: 0x61C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
3667	 E2	SIGNEXTEND		 	 
- stack 2: 0x61C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
3668	 E3	SLT		 	  ;; # BLT
- stack 1: 0x61C
- stack 0: 0x0
3669	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0xEC
3670	 E7	JUMPI		 	 
- stack 0: 0x61C
3671	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x61C
- stack 0: 0x106
3672	 EB	JUMP		 	 
- stack 0: 0x61C
3673	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x61C
3674	 107	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3675	 109	ADD		 	 
- stack 0: 0x620
3676	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3677	 10B	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x16A00010189000201A3FFE4008600120150000000A0000001E5000000BAFFFF
3678	 10C	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x16A00010189000201A3FFE4008600120150000000A0000001E5000000BAFFFF
- stack 0: 0xF0
3679	 10E	SHR		 	 
- stack 1: 0x620
- stack 0: 0x16A
3680	 10F	JUMP		 	 
- stack 0: 0x620
3681	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x620
3682	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3683	 16C	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x16A00010189000201A3FFE4008600120150000000A0000001E5000000BAFFFF
3684	 16D	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x16A00010189000201A3FFE4008600120150000000A0000001E5000000BAFFFF
- stack 0: 0xE0
3685	 16F	SHR		 	 
- stack 1: 0x620
- stack 0: 0x16A0001
3686	 170	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x16A0001
- stack 0: 0xFFFF
3687	 173	AND		 	 
- stack 1: 0x620
- stack 0: 0x1
3688	 174	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x1
3689	 176	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x1
3690	 177	PUSH2	0080	 	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x80
3691	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x0
3692	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x620
- stack 0: 0x1
3693	 17C	PUSH2	0080	 	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x80
3694	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x620
3695	 180	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3696	 182	ADD		 	 
- stack 0: 0x624
3697	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3698	 184	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x189000201A3FFE4008600120150000000A0000001E5000000BAFFFF00D40090
3699	 185	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x189000201A3FFE4008600120150000000A0000001E5000000BAFFFF00D40090
- stack 0: 0xF0
3700	 187	SHR		 	 
- stack 1: 0x624
- stack 0: 0x189
3701	 188	JUMP		 	 
- stack 0: 0x624
3702	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x624
3703	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3704	 18B	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x189000201A3FFE4008600120150000000A0000001E5000000BAFFFF00D40090
3705	 18C	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x189000201A3FFE4008600120150000000A0000001E5000000BAFFFF00D40090
- stack 0: 0xE0
3706	 18E	SHR		 	 
- stack 1: 0x624
- stack 0: 0x1890002
3707	 18F	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x1890002
- stack 0: 0xFFFF
3708	 192	AND		 	 
- stack 1: 0x624
- stack 0: 0x2
3709	 193	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0x1
3710	 195	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x2
3711	 196	PUSH2	00A0	 	 
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0xA0
3712	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x624
3713	 19A	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3714	 19C	ADD		 	 
- stack 0: 0x628
3715	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3716	 19E	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x1A3FFE4008600120150000000A0000001E5000000BAFFFF00D40090016A0001
3717	 19F	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x1A3FFE4008600120150000000A0000001E5000000BAFFFF00D40090016A0001
- stack 0: 0xF0
3718	 1A1	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1A3
3719	 1A2	JUMP		 	 
- stack 0: 0x628
3720	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x628
3721	 1A4	PUSH2	0080	 	 
- stack 1: 0x628
- stack 0: 0x80
3722	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x628
- stack 0: 0x1
3723	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3724	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x628
- stack 0: 0x1
3725	 1AE	PUSH2	00A0	 	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0xA0
3726	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x2
3727	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x628
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3728	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x2
3729	 1B8	SUB		 	 
- stack 1: 0x628
- stack 0: 0x1
3730	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x1C1
3731	 1BC	JUMPI		 	 
- stack 0: 0x628
3732	 1C1	JUMPDEST		 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x628
3733	 1C2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3734	 1C3	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x1A3FFE4008600120150000000A0000001E5000000BAFFFF00D40090016A0001
3735	 1C4	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x1A3FFE4008600120150000000A0000001E5000000BAFFFF00D40090016A0001
- stack 0: 0xE0
3736	 1C6	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1A3FFE4
3737	 1C7	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x1A3FFE4
- stack 0: 0xFFFF
3738	 1CA	AND		 	 
- stack 1: 0x628
- stack 0: 0xFFE4
3739	 1CB	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0xFFE4
- stack 0: 0x1
3740	 1CD	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
3741	 1CE	ADD		 	 
- stack 0: 0x60C
3742	 1CF	PUSH4	FFFFFFFF	 	 
- stack 1: 0x60C
- stack 0: 0xFFFFFFFF
3743	 1D4	AND		 	  ;; # mask to 32 bits
- stack 0: 0x60C
3744	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3745	 1D6	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xA0000000BAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE4
3746	 1D7	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0xA0000000BAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE4
- stack 0: 0xF0
3747	 1D9	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xA0
3748	 1DA	JUMP		 	 
- stack 0: 0x60C
3749	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x60C
3750	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
3751	 A2	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xA0000000BAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE4
3752	 A3	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0xA0000000BAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE4
- stack 0: 0xE0
3753	 A5	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xA00000
3754	 A6	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0xA00000
- stack 0: 0xFFFF
3755	 A9	AND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3756	 AA	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x1
3757	 AC	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3758	 AD	PUSH2	0020	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x20
3759	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x60C
3760	 B1	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3761	 B3	ADD		 	 
- stack 0: 0x610
3762	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3763	 B5	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xBAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE400860012
3764	 B6	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0xBAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE400860012
- stack 0: 0xF0
3765	 B8	SHR		 	 
- stack 1: 0x610
- stack 0: 0xBA
3766	 B9	JUMP		 	 
- stack 0: 0x610
3767	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x610
3768	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3769	 BC	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xBAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE400860012
3770	 BD	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0xBAFFFF01E5000001E5000000D400B4016A00010189000201A3FFE400860012
- stack 0: 0xE0
3771	 BF	SHR		 	 
- stack 1: 0x610
- stack 0: 0xBAFFFF
3772	 C0	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
3773	 C3	AND		 	 
- stack 1: 0x610
- stack 0: 0xFFFF
3774	 C4	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0xFFFF
- stack 0: 0x1
3775	 C6	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3776	 C7	PUSH2	0040	 	 
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3777	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x610
3778	 CB	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3779	 CD	ADD		 	 
- stack 0: 0x614
3780	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3781	 CF	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1E5000001E5000000D400B4016A00010189000201A3FFE40086001201500000
3782	 D0	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x1E5000001E5000000D400B4016A00010189000201A3FFE40086001201500000
- stack 0: 0xF0
3783	 D2	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1E5
3784	 D3	JUMP		 	 
- stack 0: 0x614
3785	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x614
3786	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3787	 1E7	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1E5000001E5000000D400B4016A00010189000201A3FFE40086001201500000
3788	 1E8	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x1E5000001E5000000D400B4016A00010189000201A3FFE40086001201500000
- stack 0: 0xE0
3789	 1EA	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1E50000
3790	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x1E50000
- stack 0: 0xFFFF
3791	 1EE	AND		 	 
- stack 1: 0x614
- stack 0: 0x0
3792	 1EF	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x1
3793	 1F1	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x0
3794	 1F2	POP		 	 
- stack 0: 0x614
3795	 1F3	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3796	 1F5	ADD		 	 
- stack 0: 0x618
3797	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3798	 1F7	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1E5000000D400B4016A00010189000201A3FFE4008600120150000000A00000
3799	 1F8	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x1E5000000D400B4016A00010189000201A3FFE4008600120150000000A00000
- stack 0: 0xF0
3800	 1FA	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1E5
3801	 1FB	JUMP		 	 
- stack 0: 0x618
3802	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x618
3803	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3804	 1E7	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1E5000000D400B4016A00010189000201A3FFE4008600120150000000A00000
3805	 1E8	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x1E5000000D400B4016A00010189000201A3FFE4008600120150000000A00000
- stack 0: 0xE0
3806	 1EA	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1E50000
3807	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x1E50000
- stack 0: 0xFFFF
3808	 1EE	AND		 	 
- stack 1: 0x618
- stack 0: 0x0
3809	 1EF	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x1
3810	 1F1	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x0
3811	 1F2	POP		 	 
- stack 0: 0x618
3812	 1F3	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3813	 1F5	ADD		 	 
- stack 0: 0x61C
3814	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3815	 1F7	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0xD400B4016A00010189000201A3FFE4008600120150000000A0000001E50000
3816	 1F8	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0xD400B4016A00010189000201A3FFE4008600120150000000A0000001E50000
- stack 0: 0xF0
3817	 1FA	SHR		 	 
- stack 1: 0x61C
- stack 0: 0xD4
3818	 1FB	JUMP		 	 
- stack 0: 0x61C
3819	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x61C
3820	 D5	PUSH2	0040	 	 
- stack 1: 0x61C
- stack 0: 0x40
3821	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x61C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3822	 D9	PUSH1	03	 	 
- stack 2: 0x61C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
3823	 DB	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3824	 DC	PUSH2	0020	 	 
- stack 2: 0x61C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3825	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x61C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
3826	 E0	PUSH1	03	 	 
- stack 3: 0x61C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
3827	 E2	SIGNEXTEND		 	 
- stack 2: 0x61C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
3828	 E3	SLT		 	  ;; # BLT
- stack 1: 0x61C
- stack 0: 0x0
3829	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0xEC
3830	 E7	JUMPI		 	 
- stack 0: 0x61C
3831	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x61C
- stack 0: 0x106
3832	 EB	JUMP		 	 
- stack 0: 0x61C
3833	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x61C
3834	 107	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3835	 109	ADD		 	 
- stack 0: 0x620
3836	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3837	 10B	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x16A00010189000201A3FFE4008600120150000000A0000001E5000000BAFFFF
3838	 10C	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x16A00010189000201A3FFE4008600120150000000A0000001E5000000BAFFFF
- stack 0: 0xF0
3839	 10E	SHR		 	 
- stack 1: 0x620
- stack 0: 0x16A
3840	 10F	JUMP		 	 
- stack 0: 0x620
3841	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x620
3842	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3843	 16C	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x16A00010189000201A3FFE4008600120150000000A0000001E5000000BAFFFF
3844	 16D	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x16A00010189000201A3FFE4008600120150000000A0000001E5000000BAFFFF
- stack 0: 0xE0
3845	 16F	SHR		 	 
- stack 1: 0x620
- stack 0: 0x16A0001
3846	 170	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x16A0001
- stack 0: 0xFFFF
3847	 173	AND		 	 
- stack 1: 0x620
- stack 0: 0x1
3848	 174	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x1
3849	 176	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x1
3850	 177	PUSH2	0080	 	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x80
3851	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x1
3852	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x620
- stack 0: 0x2
3853	 17C	PUSH2	0080	 	 
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0x80
3854	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x620
3855	 180	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3856	 182	ADD		 	 
- stack 0: 0x624
3857	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3858	 184	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x189000201A3FFE4008600120150000000A0000001E5000000BAFFFF00D40090
3859	 185	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x189000201A3FFE4008600120150000000A0000001E5000000BAFFFF00D40090
- stack 0: 0xF0
3860	 187	SHR		 	 
- stack 1: 0x624
- stack 0: 0x189
3861	 188	JUMP		 	 
- stack 0: 0x624
3862	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x624
3863	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3864	 18B	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x189000201A3FFE4008600120150000000A0000001E5000000BAFFFF00D40090
3865	 18C	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x189000201A3FFE4008600120150000000A0000001E5000000BAFFFF00D40090
- stack 0: 0xE0
3866	 18E	SHR		 	 
- stack 1: 0x624
- stack 0: 0x1890002
3867	 18F	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x1890002
- stack 0: 0xFFFF
3868	 192	AND		 	 
- stack 1: 0x624
- stack 0: 0x2
3869	 193	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0x1
3870	 195	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x2
3871	 196	PUSH2	00A0	 	 
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0xA0
3872	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x624
3873	 19A	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3874	 19C	ADD		 	 
- stack 0: 0x628
3875	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3876	 19E	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x1A3FFE4008600120150000000A0000001E5000000BAFFFF00D40090016A0001
3877	 19F	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x1A3FFE4008600120150000000A0000001E5000000BAFFFF00D40090016A0001
- stack 0: 0xF0
3878	 1A1	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1A3
3879	 1A2	JUMP		 	 
- stack 0: 0x628
3880	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x628
3881	 1A4	PUSH2	0080	 	 
- stack 1: 0x628
- stack 0: 0x80
3882	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x628
- stack 0: 0x2
3883	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3884	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x628
- stack 0: 0x2
3885	 1AE	PUSH2	00A0	 	 
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0xA0
3886	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0x2
3887	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x628
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3888	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0x2
3889	 1B8	SUB		 	 
- stack 1: 0x628
- stack 0: 0x0
3890	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x628
- stack 1: 0x0
- stack 0: 0x1C1
3891	 1BC	JUMPI		 	 
- stack 0: 0x628
3892	 1BD	PUSH2	01DB	 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 1: 0x628
- stack 0: 0x1DB
3893	 1C0	JUMP		 	 
- stack 0: 0x628
3894	 1DB	JUMPDEST		 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x628
3895	 1DC	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3896	 1DE	ADD		 	 
- stack 0: 0x62C
3897	 1DF	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3898	 1E0	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x8600120150000000A0000001E5000000BAFFFF00D40090016A000101890002
3899	 1E1	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x8600120150000000A0000001E5000000BAFFFF00D40090016A000101890002
- stack 0: 0xF0
3900	 1E3	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x86
3901	 1E4	JUMP		 	 
- stack 0: 0x62C
3902	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x62C
3903	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3904	 88	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x8600120150000000A0000001E5000000BAFFFF00D40090016A000101890002
3905	 89	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x8600120150000000A0000001E5000000BAFFFF00D40090016A000101890002
- stack 0: 0xE0
3906	 8B	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x860012
3907	 8C	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x860012
- stack 0: 0xFFFF
3908	 8F	AND		 	 
- stack 1: 0x62C
- stack 0: 0x12
3909	 90	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x12
- stack 0: 0x1
3910	 92	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x12
3911	 93	PUSH2	0380	 	 
- stack 2: 0x62C
- stack 1: 0x12
- stack 0: 0x380
3912	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x62C
3913	 97	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3914	 99	ADD		 	 
- stack 0: 0x630
3915	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3916	 9B	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x150000000A0000001E5000000BAFFFF00D40090016A00010189000201A3FFE8
3917	 9C	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x150000000A0000001E5000000BAFFFF00D40090016A00010189000201A3FFE8
- stack 0: 0xF0
3918	 9E	SHR		 	 
- stack 1: 0x630
- stack 0: 0x150
3919	 9F	JUMP		 	 
- stack 0: 0x630
3920	 150	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x630
3921	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3922	 152	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x150000000A0000001E5000000BAFFFF00D40090016A00010189000201A3FFE8
3923	 153	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x150000000A0000001E5000000BAFFFF00D40090016A00010189000201A3FFE8
- stack 0: 0xE0
3924	 155	SHR		 	 
- stack 1: 0x630
- stack 0: 0x1500000
3925	 156	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x1500000
- stack 0: 0xFFFF
3926	 159	AND		 	 
- stack 1: 0x630
- stack 0: 0x0
3927	 15A	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x1
3928	 15C	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x0
3929	 15D	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x80
3930	 160	MSTORE		 	  ;; # store to x4
- stack 0: 0x630
3931	 161	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3932	 163	ADD		 	 
- stack 0: 0x634
3933	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3934	 165	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xA0000001E5000000BAFFFF00D40090016A00010189000201A3FFE800860013
3935	 166	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0xA0000001E5000000BAFFFF00D40090016A00010189000201A3FFE800860013
- stack 0: 0xF0
3936	 168	SHR		 	 
- stack 1: 0x634
- stack 0: 0xA0
3937	 169	JUMP		 	 
- stack 0: 0x634
3938	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x634
3939	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3940	 A2	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xA0000001E5000000BAFFFF00D40090016A00010189000201A3FFE800860013
3941	 A3	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0xA0000001E5000000BAFFFF00D40090016A00010189000201A3FFE800860013
- stack 0: 0xE0
3942	 A5	SHR		 	 
- stack 1: 0x634
- stack 0: 0xA00000
3943	 A6	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0xA00000
- stack 0: 0xFFFF
3944	 A9	AND		 	 
- stack 1: 0x634
- stack 0: 0x0
3945	 AA	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x1
3946	 AC	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x0
3947	 AD	PUSH2	0020	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x20
3948	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x634
3949	 B1	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3950	 B3	ADD		 	 
- stack 0: 0x638
3951	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3952	 B5	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x1E5000000BAFFFF00D40090016A00010189000201A3FFE80086001301500000
3953	 B6	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x1E5000000BAFFFF00D40090016A00010189000201A3FFE80086001301500000
- stack 0: 0xF0
3954	 B8	SHR		 	 
- stack 1: 0x638
- stack 0: 0x1E5
3955	 B9	JUMP		 	 
- stack 0: 0x638
3956	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
3957	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3958	 1E7	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x1E5000000BAFFFF00D40090016A00010189000201A3FFE80086001301500000
3959	 1E8	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x1E5000000BAFFFF00D40090016A00010189000201A3FFE80086001301500000
- stack 0: 0xE0
3960	 1EA	SHR		 	 
- stack 1: 0x638
- stack 0: 0x1E50000
3961	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x1E50000
- stack 0: 0xFFFF
3962	 1EE	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
3963	 1EF	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
3964	 1F1	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
3965	 1F2	POP		 	 
- stack 0: 0x638
3966	 1F3	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3967	 1F5	ADD		 	 
- stack 0: 0x63C
3968	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3969	 1F7	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xBAFFFF00D40090016A00010189000201A3FFE8008600130150000000A00000
3970	 1F8	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xBAFFFF00D40090016A00010189000201A3FFE8008600130150000000A00000
- stack 0: 0xF0
3971	 1FA	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xBA
3972	 1FB	JUMP		 	 
- stack 0: 0x63C
3973	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x63C
3974	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3975	 BC	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xBAFFFF00D40090016A00010189000201A3FFE8008600130150000000A00000
3976	 BD	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0xBAFFFF00D40090016A00010189000201A3FFE8008600130150000000A00000
- stack 0: 0xE0
3977	 BF	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xBAFFFF
3978	 C0	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
3979	 C3	AND		 	 
- stack 1: 0x63C
- stack 0: 0xFFFF
3980	 C4	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0xFFFF
- stack 0: 0x1
3981	 C6	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3982	 C7	PUSH2	0040	 	 
- stack 2: 0x63C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3983	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x63C
3984	 CB	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3985	 CD	ADD		 	 
- stack 0: 0x640
3986	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3987	 CF	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xD40090016A00010189000201A3FFE8008600130150000000A0000001E50000
3988	 D0	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0xD40090016A00010189000201A3FFE8008600130150000000A0000001E50000
- stack 0: 0xF0
3989	 D2	SHR		 	 
- stack 1: 0x640
- stack 0: 0xD4
3990	 D3	JUMP		 	 
- stack 0: 0x640
3991	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x640
3992	 D5	PUSH2	0040	 	 
- stack 1: 0x640
- stack 0: 0x40
3993	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x640
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3994	 D9	PUSH1	03	 	 
- stack 2: 0x640
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
3995	 DB	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3996	 DC	PUSH2	0020	 	 
- stack 2: 0x640
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3997	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x640
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
3998	 E0	PUSH1	03	 	 
- stack 3: 0x640
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
3999	 E2	SIGNEXTEND		 	 
- stack 2: 0x640
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
4000	 E3	SLT		 	  ;; # BLT
- stack 1: 0x640
- stack 0: 0x0
4001	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0xEC
4002	 E7	JUMPI		 	 
- stack 0: 0x640
4003	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x640
- stack 0: 0x106
4004	 EB	JUMP		 	 
- stack 0: 0x640
4005	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x640
4006	 107	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
4007	 109	ADD		 	 
- stack 0: 0x644
4008	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
4009	 10B	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x16A00010189000201A3FFE8008600130150000000A0000001E5000000BAFFFF
4010	 10C	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x16A00010189000201A3FFE8008600130150000000A0000001E5000000BAFFFF
- stack 0: 0xF0
4011	 10E	SHR		 	 
- stack 1: 0x644
- stack 0: 0x16A
4012	 10F	JUMP		 	 
- stack 0: 0x644
4013	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x644
4014	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
4015	 16C	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x16A00010189000201A3FFE8008600130150000000A0000001E5000000BAFFFF
4016	 16D	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x16A00010189000201A3FFE8008600130150000000A0000001E5000000BAFFFF
- stack 0: 0xE0
4017	 16F	SHR		 	 
- stack 1: 0x644
- stack 0: 0x16A0001
4018	 170	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x16A0001
- stack 0: 0xFFFF
4019	 173	AND		 	 
- stack 1: 0x644
- stack 0: 0x1
4020	 174	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
4021	 176	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x1
4022	 177	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x80
4023	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x0
4024	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x644
- stack 0: 0x1
4025	 17C	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x80
4026	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x644
4027	 180	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
4028	 182	ADD		 	 
- stack 0: 0x648
4029	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
4030	 184	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x189000201A3FFE8008600130150000000A0000001E5000000BAFFFF01E50000
4031	 185	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x189000201A3FFE8008600130150000000A0000001E5000000BAFFFF01E50000
- stack 0: 0xF0
4032	 187	SHR		 	 
- stack 1: 0x648
- stack 0: 0x189
4033	 188	JUMP		 	 
- stack 0: 0x648
4034	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x648
4035	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
4036	 18B	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x189000201A3FFE8008600130150000000A0000001E5000000BAFFFF01E50000
4037	 18C	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x189000201A3FFE8008600130150000000A0000001E5000000BAFFFF01E50000
- stack 0: 0xE0
4038	 18E	SHR		 	 
- stack 1: 0x648
- stack 0: 0x1890002
4039	 18F	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x1890002
- stack 0: 0xFFFF
4040	 192	AND		 	 
- stack 1: 0x648
- stack 0: 0x2
4041	 193	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x1
4042	 195	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x2
4043	 196	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xA0
4044	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x648
4045	 19A	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
4046	 19C	ADD		 	 
- stack 0: 0x64C
4047	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
4048	 19E	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x1A3FFE8008600130150000000A0000001E5000000BAFFFF01E5000000D40068
4049	 19F	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x1A3FFE8008600130150000000A0000001E5000000BAFFFF01E5000000D40068
- stack 0: 0xF0
4050	 1A1	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x1A3
4051	 1A2	JUMP		 	 
- stack 0: 0x64C
4052	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x64C
4053	 1A4	PUSH2	0080	 	 
- stack 1: 0x64C
- stack 0: 0x80
4054	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x64C
- stack 0: 0x1
4055	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4056	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x64C
- stack 0: 0x1
4057	 1AE	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0xA0
4058	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x2
4059	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x64C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4060	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x2
4061	 1B8	SUB		 	 
- stack 1: 0x64C
- stack 0: 0x1
4062	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x1C1
4063	 1BC	JUMPI		 	 
- stack 0: 0x64C
4064	 1C1	JUMPDEST		 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x64C
4065	 1C2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
4066	 1C3	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x1A3FFE8008600130150000000A0000001E5000000BAFFFF01E5000000D40068
4067	 1C4	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x1A3FFE8008600130150000000A0000001E5000000BAFFFF01E5000000D40068
- stack 0: 0xE0
4068	 1C6	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x1A3FFE8
4069	 1C7	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x1A3FFE8
- stack 0: 0xFFFF
4070	 1CA	AND		 	 
- stack 1: 0x64C
- stack 0: 0xFFE8
4071	 1CB	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0xFFE8
- stack 0: 0x1
4072	 1CD	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
4073	 1CE	ADD		 	 
- stack 0: 0x634
4074	 1CF	PUSH4	FFFFFFFF	 	 
- stack 1: 0x634
- stack 0: 0xFFFFFFFF
4075	 1D4	AND		 	  ;; # mask to 32 bits
- stack 0: 0x634
4076	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
4077	 1D6	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xA0000001E5000000BAFFFF00D40090016A00010189000201A3FFE800860013
4078	 1D7	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0xA0000001E5000000BAFFFF00D40090016A00010189000201A3FFE800860013
- stack 0: 0xF0
4079	 1D9	SHR		 	 
- stack 1: 0x634
- stack 0: 0xA0
4080	 1DA	JUMP		 	 
- stack 0: 0x634
4081	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x634
4082	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
4083	 A2	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xA0000001E5000000BAFFFF00D40090016A00010189000201A3FFE800860013
4084	 A3	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0xA0000001E5000000BAFFFF00D40090016A00010189000201A3FFE800860013
- stack 0: 0xE0
4085	 A5	SHR		 	 
- stack 1: 0x634
- stack 0: 0xA00000
4086	 A6	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0xA00000
- stack 0: 0xFFFF
4087	 A9	AND		 	 
- stack 1: 0x634
- stack 0: 0x0
4088	 AA	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x1
4089	 AC	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x0
4090	 AD	PUSH2	0020	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x20
4091	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x634
4092	 B1	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
4093	 B3	ADD		 	 
- stack 0: 0x638
4094	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
4095	 B5	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x1E5000000BAFFFF00D40090016A00010189000201A3FFE80086001301500000
4096	 B6	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x1E5000000BAFFFF00D40090016A00010189000201A3FFE80086001301500000
- stack 0: 0xF0
4097	 B8	SHR		 	 
- stack 1: 0x638
- stack 0: 0x1E5
4098	 B9	JUMP		 	 
- stack 0: 0x638
4099	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
4100	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
4101	 1E7	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x1E5000000BAFFFF00D40090016A00010189000201A3FFE80086001301500000
4102	 1E8	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x1E5000000BAFFFF00D40090016A00010189000201A3FFE80086001301500000
- stack 0: 0xE0
4103	 1EA	SHR		 	 
- stack 1: 0x638
- stack 0: 0x1E50000
4104	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x1E50000
- stack 0: 0xFFFF
4105	 1EE	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
4106	 1EF	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
4107	 1F1	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
4108	 1F2	POP		 	 
- stack 0: 0x638
4109	 1F3	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
4110	 1F5	ADD		 	 
- stack 0: 0x63C
4111	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
4112	 1F7	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xBAFFFF00D40090016A00010189000201A3FFE8008600130150000000A00000
4113	 1F8	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xBAFFFF00D40090016A00010189000201A3FFE8008600130150000000A00000
- stack 0: 0xF0
4114	 1FA	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xBA
4115	 1FB	JUMP		 	 
- stack 0: 0x63C
4116	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x63C
4117	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
4118	 BC	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xBAFFFF00D40090016A00010189000201A3FFE8008600130150000000A00000
4119	 BD	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0xBAFFFF00D40090016A00010189000201A3FFE8008600130150000000A00000
- stack 0: 0xE0
4120	 BF	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xBAFFFF
4121	 C0	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
4122	 C3	AND		 	 
- stack 1: 0x63C
- stack 0: 0xFFFF
4123	 C4	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0xFFFF
- stack 0: 0x1
4124	 C6	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4125	 C7	PUSH2	0040	 	 
- stack 2: 0x63C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4126	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x63C
4127	 CB	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
4128	 CD	ADD		 	 
- stack 0: 0x640
4129	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
4130	 CF	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xD40090016A00010189000201A3FFE8008600130150000000A0000001E50000
4131	 D0	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0xD40090016A00010189000201A3FFE8008600130150000000A0000001E50000
- stack 0: 0xF0
4132	 D2	SHR		 	 
- stack 1: 0x640
- stack 0: 0xD4
4133	 D3	JUMP		 	 
- stack 0: 0x640
4134	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x640
4135	 D5	PUSH2	0040	 	 
- stack 1: 0x640
- stack 0: 0x40
4136	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x640
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4137	 D9	PUSH1	03	 	 
- stack 2: 0x640
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
4138	 DB	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4139	 DC	PUSH2	0020	 	 
- stack 2: 0x640
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4140	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x640
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
4141	 E0	PUSH1	03	 	 
- stack 3: 0x640
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
4142	 E2	SIGNEXTEND		 	 
- stack 2: 0x640
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
4143	 E3	SLT		 	  ;; # BLT
- stack 1: 0x640
- stack 0: 0x0
4144	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0xEC
4145	 E7	JUMPI		 	 
- stack 0: 0x640
4146	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x640
- stack 0: 0x106
4147	 EB	JUMP		 	 
- stack 0: 0x640
4148	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x640
4149	 107	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
4150	 109	ADD		 	 
- stack 0: 0x644
4151	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
4152	 10B	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x16A00010189000201A3FFE8008600130150000000A0000001E5000000BAFFFF
4153	 10C	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x16A00010189000201A3FFE8008600130150000000A0000001E5000000BAFFFF
- stack 0: 0xF0
4154	 10E	SHR		 	 
- stack 1: 0x644
- stack 0: 0x16A
4155	 10F	JUMP		 	 
- stack 0: 0x644
4156	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x644
4157	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
4158	 16C	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x16A00010189000201A3FFE8008600130150000000A0000001E5000000BAFFFF
4159	 16D	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x16A00010189000201A3FFE8008600130150000000A0000001E5000000BAFFFF
- stack 0: 0xE0
4160	 16F	SHR		 	 
- stack 1: 0x644
- stack 0: 0x16A0001
4161	 170	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x16A0001
- stack 0: 0xFFFF
4162	 173	AND		 	 
- stack 1: 0x644
- stack 0: 0x1
4163	 174	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
4164	 176	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x1
4165	 177	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x80
4166	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
4167	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x644
- stack 0: 0x2
4168	 17C	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0x80
4169	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x644
4170	 180	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
4171	 182	ADD		 	 
- stack 0: 0x648
4172	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
4173	 184	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x189000201A3FFE8008600130150000000A0000001E5000000BAFFFF01E50000
4174	 185	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x189000201A3FFE8008600130150000000A0000001E5000000BAFFFF01E50000
- stack 0: 0xF0
4175	 187	SHR		 	 
- stack 1: 0x648
- stack 0: 0x189
4176	 188	JUMP		 	 
- stack 0: 0x648
4177	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x648
4178	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
4179	 18B	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x189000201A3FFE8008600130150000000A0000001E5000000BAFFFF01E50000
4180	 18C	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x189000201A3FFE8008600130150000000A0000001E5000000BAFFFF01E50000
- stack 0: 0xE0
4181	 18E	SHR		 	 
- stack 1: 0x648
- stack 0: 0x1890002
4182	 18F	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x1890002
- stack 0: 0xFFFF
4183	 192	AND		 	 
- stack 1: 0x648
- stack 0: 0x2
4184	 193	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x1
4185	 195	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x2
4186	 196	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xA0
4187	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x648
4188	 19A	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
4189	 19C	ADD		 	 
- stack 0: 0x64C
4190	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
4191	 19E	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x1A3FFE8008600130150000000A0000001E5000000BAFFFF01E5000000D40068
4192	 19F	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x1A3FFE8008600130150000000A0000001E5000000BAFFFF01E5000000D40068
- stack 0: 0xF0
4193	 1A1	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x1A3
4194	 1A2	JUMP		 	 
- stack 0: 0x64C
4195	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x64C
4196	 1A4	PUSH2	0080	 	 
- stack 1: 0x64C
- stack 0: 0x80
4197	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x64C
- stack 0: 0x2
4198	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4199	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x64C
- stack 0: 0x2
4200	 1AE	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xA0
4201	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x2
4202	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x64C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4203	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x2
4204	 1B8	SUB		 	 
- stack 1: 0x64C
- stack 0: 0x0
4205	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x1C1
4206	 1BC	JUMPI		 	 
- stack 0: 0x64C
4207	 1BD	PUSH2	01DB	 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 1: 0x64C
- stack 0: 0x1DB
4208	 1C0	JUMP		 	 
- stack 0: 0x64C
4209	 1DB	JUMPDEST		 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x64C
4210	 1DC	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
4211	 1DE	ADD		 	 
- stack 0: 0x650
4212	 1DF	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
4213	 1E0	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x8600130150000000A0000001E5000000BAFFFF01E5000000D40068016A0001
4214	 1E1	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x8600130150000000A0000001E5000000BAFFFF01E5000000D40068016A0001
- stack 0: 0xF0
4215	 1E3	SHR		 	 
- stack 1: 0x650
- stack 0: 0x86
4216	 1E4	JUMP		 	 
- stack 0: 0x650
4217	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x650
4218	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
4219	 88	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x8600130150000000A0000001E5000000BAFFFF01E5000000D40068016A0001
4220	 89	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x8600130150000000A0000001E5000000BAFFFF01E5000000D40068016A0001
- stack 0: 0xE0
4221	 8B	SHR		 	 
- stack 1: 0x650
- stack 0: 0x860013
4222	 8C	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x860013
- stack 0: 0xFFFF
4223	 8F	AND		 	 
- stack 1: 0x650
- stack 0: 0x13
4224	 90	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x13
- stack 0: 0x1
4225	 92	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x13
4226	 93	PUSH2	0380	 	 
- stack 2: 0x650
- stack 1: 0x13
- stack 0: 0x380
4227	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x650
4228	 97	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
4229	 99	ADD		 	 
- stack 0: 0x654
4230	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
4231	 9B	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x150000000A0000001E5000000BAFFFF01E5000000D40068016A000101890002
4232	 9C	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x150000000A0000001E5000000BAFFFF01E5000000D40068016A000101890002
- stack 0: 0xF0
4233	 9E	SHR		 	 
- stack 1: 0x654
- stack 0: 0x150
4234	 9F	JUMP		 	 
- stack 0: 0x654
4235	 150	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x654
4236	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
4237	 152	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x150000000A0000001E5000000BAFFFF01E5000000D40068016A000101890002
4238	 153	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x150000000A0000001E5000000BAFFFF01E5000000D40068016A000101890002
- stack 0: 0xE0
4239	 155	SHR		 	 
- stack 1: 0x654
- stack 0: 0x1500000
4240	 156	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x1500000
- stack 0: 0xFFFF
4241	 159	AND		 	 
- stack 1: 0x654
- stack 0: 0x0
4242	 15A	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0x1
4243	 15C	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x0
4244	 15D	PUSH2	0080	 	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0x80
4245	 160	MSTORE		 	  ;; # store to x4
- stack 0: 0x654
4246	 161	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
4247	 163	ADD		 	 
- stack 0: 0x658
4248	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
4249	 165	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0xA0000001E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE4
4250	 166	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0xA0000001E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE4
- stack 0: 0xF0
4251	 168	SHR		 	 
- stack 1: 0x658
- stack 0: 0xA0
4252	 169	JUMP		 	 
- stack 0: 0x658
4253	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x658
4254	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
4255	 A2	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0xA0000001E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE4
4256	 A3	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0xA0000001E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE4
- stack 0: 0xE0
4257	 A5	SHR		 	 
- stack 1: 0x658
- stack 0: 0xA00000
4258	 A6	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0xA00000
- stack 0: 0xFFFF
4259	 A9	AND		 	 
- stack 1: 0x658
- stack 0: 0x0
4260	 AA	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x1
4261	 AC	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x0
4262	 AD	PUSH2	0020	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x20
4263	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x658
4264	 B1	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
4265	 B3	ADD		 	 
- stack 0: 0x65C
4266	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
4267	 B5	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x1E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE400860014
4268	 B6	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x1E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE400860014
- stack 0: 0xF0
4269	 B8	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x1E5
4270	 B9	JUMP		 	 
- stack 0: 0x65C
4271	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x65C
4272	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
4273	 1E7	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x1E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE400860014
4274	 1E8	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x1E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE400860014
- stack 0: 0xE0
4275	 1EA	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x1E50000
4276	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x1E50000
- stack 0: 0xFFFF
4277	 1EE	AND		 	 
- stack 1: 0x65C
- stack 0: 0x0
4278	 1EF	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x1
4279	 1F1	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x0
4280	 1F2	POP		 	 
- stack 0: 0x65C
4281	 1F3	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
4282	 1F5	ADD		 	 
- stack 0: 0x660
4283	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
4284	 1F7	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0xBAFFFF01E5000000D40068016A00010189000201A3FFE40086001401500000
4285	 1F8	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0xBAFFFF01E5000000D40068016A00010189000201A3FFE40086001401500000
- stack 0: 0xF0
4286	 1FA	SHR		 	 
- stack 1: 0x660
- stack 0: 0xBA
4287	 1FB	JUMP		 	 
- stack 0: 0x660
4288	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x660
4289	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
4290	 BC	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0xBAFFFF01E5000000D40068016A00010189000201A3FFE40086001401500000
4291	 BD	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0xBAFFFF01E5000000D40068016A00010189000201A3FFE40086001401500000
- stack 0: 0xE0
4292	 BF	SHR		 	 
- stack 1: 0x660
- stack 0: 0xBAFFFF
4293	 C0	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
4294	 C3	AND		 	 
- stack 1: 0x660
- stack 0: 0xFFFF
4295	 C4	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0xFFFF
- stack 0: 0x1
4296	 C6	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4297	 C7	PUSH2	0040	 	 
- stack 2: 0x660
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4298	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x660
4299	 CB	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
4300	 CD	ADD		 	 
- stack 0: 0x664
4301	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
4302	 CF	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x1E5000000D40068016A00010189000201A3FFE4008600140150000000A00000
4303	 D0	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x1E5000000D40068016A00010189000201A3FFE4008600140150000000A00000
- stack 0: 0xF0
4304	 D2	SHR		 	 
- stack 1: 0x664
- stack 0: 0x1E5
4305	 D3	JUMP		 	 
- stack 0: 0x664
4306	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x664
4307	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
4308	 1E7	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x1E5000000D40068016A00010189000201A3FFE4008600140150000000A00000
4309	 1E8	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x1E5000000D40068016A00010189000201A3FFE4008600140150000000A00000
- stack 0: 0xE0
4310	 1EA	SHR		 	 
- stack 1: 0x664
- stack 0: 0x1E50000
4311	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x1E50000
- stack 0: 0xFFFF
4312	 1EE	AND		 	 
- stack 1: 0x664
- stack 0: 0x0
4313	 1EF	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x1
4314	 1F1	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x0
4315	 1F2	POP		 	 
- stack 0: 0x664
4316	 1F3	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
4317	 1F5	ADD		 	 
- stack 0: 0x668
4318	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
4319	 1F7	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0xD40068016A00010189000201A3FFE4008600140150000000A0000001E50000
4320	 1F8	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0xD40068016A00010189000201A3FFE4008600140150000000A0000001E50000
- stack 0: 0xF0
4321	 1FA	SHR		 	 
- stack 1: 0x668
- stack 0: 0xD4
4322	 1FB	JUMP		 	 
- stack 0: 0x668
4323	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x668
4324	 D5	PUSH2	0040	 	 
- stack 1: 0x668
- stack 0: 0x40
4325	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x668
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4326	 D9	PUSH1	03	 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
4327	 DB	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4328	 DC	PUSH2	0020	 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4329	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
4330	 E0	PUSH1	03	 	 
- stack 3: 0x668
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
4331	 E2	SIGNEXTEND		 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
4332	 E3	SLT		 	  ;; # BLT
- stack 1: 0x668
- stack 0: 0x0
4333	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0xEC
4334	 E7	JUMPI		 	 
- stack 0: 0x668
4335	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x668
- stack 0: 0x106
4336	 EB	JUMP		 	 
- stack 0: 0x668
4337	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x668
4338	 107	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
4339	 109	ADD		 	 
- stack 0: 0x66C
4340	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4341	 10B	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x16A00010189000201A3FFE4008600140150000000A0000001E5000001E50000
4342	 10C	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x16A00010189000201A3FFE4008600140150000000A0000001E5000001E50000
- stack 0: 0xF0
4343	 10E	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x16A
4344	 10F	JUMP		 	 
- stack 0: 0x66C
4345	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x66C
4346	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
4347	 16C	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x16A00010189000201A3FFE4008600140150000000A0000001E5000001E50000
4348	 16D	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x16A00010189000201A3FFE4008600140150000000A0000001E5000001E50000
- stack 0: 0xE0
4349	 16F	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x16A0001
4350	 170	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x16A0001
- stack 0: 0xFFFF
4351	 173	AND		 	 
- stack 1: 0x66C
- stack 0: 0x1
4352	 174	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x1
4353	 176	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x1
4354	 177	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x80
4355	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x0
4356	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x66C
- stack 0: 0x1
4357	 17C	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x80
4358	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x66C
4359	 180	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4360	 182	ADD		 	 
- stack 0: 0x670
4361	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4362	 184	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x189000201A3FFE4008600140150000000A0000001E5000001E5000000BAFFFF
4363	 185	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x189000201A3FFE4008600140150000000A0000001E5000001E5000000BAFFFF
- stack 0: 0xF0
4364	 187	SHR		 	 
- stack 1: 0x670
- stack 0: 0x189
4365	 188	JUMP		 	 
- stack 0: 0x670
4366	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x670
4367	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4368	 18B	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x189000201A3FFE4008600140150000000A0000001E5000001E5000000BAFFFF
4369	 18C	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x189000201A3FFE4008600140150000000A0000001E5000001E5000000BAFFFF
- stack 0: 0xE0
4370	 18E	SHR		 	 
- stack 1: 0x670
- stack 0: 0x1890002
4371	 18F	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x1890002
- stack 0: 0xFFFF
4372	 192	AND		 	 
- stack 1: 0x670
- stack 0: 0x2
4373	 193	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0x1
4374	 195	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x2
4375	 196	PUSH2	00A0	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0xA0
4376	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x670
4377	 19A	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4378	 19C	ADD		 	 
- stack 0: 0x674
4379	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4380	 19E	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x1A3FFE4008600140150000000A0000001E5000001E5000000BAFFFF00D40040
4381	 19F	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x1A3FFE4008600140150000000A0000001E5000001E5000000BAFFFF00D40040
- stack 0: 0xF0
4382	 1A1	SHR		 	 
- stack 1: 0x674
- stack 0: 0x1A3
4383	 1A2	JUMP		 	 
- stack 0: 0x674
4384	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x674
4385	 1A4	PUSH2	0080	 	 
- stack 1: 0x674
- stack 0: 0x80
4386	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x674
- stack 0: 0x1
4387	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4388	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x1
4389	 1AE	PUSH2	00A0	 	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0xA0
4390	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x2
4391	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x674
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4392	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x2
4393	 1B8	SUB		 	 
- stack 1: 0x674
- stack 0: 0x1
4394	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x1C1
4395	 1BC	JUMPI		 	 
- stack 0: 0x674
4396	 1C1	JUMPDEST		 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x674
4397	 1C2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
4398	 1C3	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x1A3FFE4008600140150000000A0000001E5000001E5000000BAFFFF00D40040
4399	 1C4	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x1A3FFE4008600140150000000A0000001E5000001E5000000BAFFFF00D40040
- stack 0: 0xE0
4400	 1C6	SHR		 	 
- stack 1: 0x674
- stack 0: 0x1A3FFE4
4401	 1C7	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x1A3FFE4
- stack 0: 0xFFFF
4402	 1CA	AND		 	 
- stack 1: 0x674
- stack 0: 0xFFE4
4403	 1CB	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0xFFE4
- stack 0: 0x1
4404	 1CD	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4405	 1CE	ADD		 	 
- stack 0: 0x658
4406	 1CF	PUSH4	FFFFFFFF	 	 
- stack 1: 0x658
- stack 0: 0xFFFFFFFF
4407	 1D4	AND		 	  ;; # mask to 32 bits
- stack 0: 0x658
4408	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
4409	 1D6	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0xA0000001E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE4
4410	 1D7	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0xA0000001E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE4
- stack 0: 0xF0
4411	 1D9	SHR		 	 
- stack 1: 0x658
- stack 0: 0xA0
4412	 1DA	JUMP		 	 
- stack 0: 0x658
4413	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x658
4414	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
4415	 A2	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0xA0000001E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE4
4416	 A3	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0xA0000001E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE4
- stack 0: 0xE0
4417	 A5	SHR		 	 
- stack 1: 0x658
- stack 0: 0xA00000
4418	 A6	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0xA00000
- stack 0: 0xFFFF
4419	 A9	AND		 	 
- stack 1: 0x658
- stack 0: 0x0
4420	 AA	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x1
4421	 AC	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x0
4422	 AD	PUSH2	0020	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x20
4423	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x658
4424	 B1	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
4425	 B3	ADD		 	 
- stack 0: 0x65C
4426	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
4427	 B5	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x1E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE400860014
4428	 B6	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x1E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE400860014
- stack 0: 0xF0
4429	 B8	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x1E5
4430	 B9	JUMP		 	 
- stack 0: 0x65C
4431	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x65C
4432	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
4433	 1E7	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x1E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE400860014
4434	 1E8	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x1E5000000BAFFFF01E5000000D40068016A00010189000201A3FFE400860014
- stack 0: 0xE0
4435	 1EA	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x1E50000
4436	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x1E50000
- stack 0: 0xFFFF
4437	 1EE	AND		 	 
- stack 1: 0x65C
- stack 0: 0x0
4438	 1EF	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x1
4439	 1F1	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x0
4440	 1F2	POP		 	 
- stack 0: 0x65C
4441	 1F3	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
4442	 1F5	ADD		 	 
- stack 0: 0x660
4443	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
4444	 1F7	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0xBAFFFF01E5000000D40068016A00010189000201A3FFE40086001401500000
4445	 1F8	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0xBAFFFF01E5000000D40068016A00010189000201A3FFE40086001401500000
- stack 0: 0xF0
4446	 1FA	SHR		 	 
- stack 1: 0x660
- stack 0: 0xBA
4447	 1FB	JUMP		 	 
- stack 0: 0x660
4448	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x660
4449	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
4450	 BC	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0xBAFFFF01E5000000D40068016A00010189000201A3FFE40086001401500000
4451	 BD	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0xBAFFFF01E5000000D40068016A00010189000201A3FFE40086001401500000
- stack 0: 0xE0
4452	 BF	SHR		 	 
- stack 1: 0x660
- stack 0: 0xBAFFFF
4453	 C0	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
4454	 C3	AND		 	 
- stack 1: 0x660
- stack 0: 0xFFFF
4455	 C4	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0xFFFF
- stack 0: 0x1
4456	 C6	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4457	 C7	PUSH2	0040	 	 
- stack 2: 0x660
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4458	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x660
4459	 CB	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
4460	 CD	ADD		 	 
- stack 0: 0x664
4461	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
4462	 CF	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x1E5000000D40068016A00010189000201A3FFE4008600140150000000A00000
4463	 D0	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x1E5000000D40068016A00010189000201A3FFE4008600140150000000A00000
- stack 0: 0xF0
4464	 D2	SHR		 	 
- stack 1: 0x664
- stack 0: 0x1E5
4465	 D3	JUMP		 	 
- stack 0: 0x664
4466	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x664
4467	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
4468	 1E7	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x1E5000000D40068016A00010189000201A3FFE4008600140150000000A00000
4469	 1E8	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x1E5000000D40068016A00010189000201A3FFE4008600140150000000A00000
- stack 0: 0xE0
4470	 1EA	SHR		 	 
- stack 1: 0x664
- stack 0: 0x1E50000
4471	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x1E50000
- stack 0: 0xFFFF
4472	 1EE	AND		 	 
- stack 1: 0x664
- stack 0: 0x0
4473	 1EF	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x1
4474	 1F1	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x0
4475	 1F2	POP		 	 
- stack 0: 0x664
4476	 1F3	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
4477	 1F5	ADD		 	 
- stack 0: 0x668
4478	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
4479	 1F7	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0xD40068016A00010189000201A3FFE4008600140150000000A0000001E50000
4480	 1F8	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0xD40068016A00010189000201A3FFE4008600140150000000A0000001E50000
- stack 0: 0xF0
4481	 1FA	SHR		 	 
- stack 1: 0x668
- stack 0: 0xD4
4482	 1FB	JUMP		 	 
- stack 0: 0x668
4483	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x668
4484	 D5	PUSH2	0040	 	 
- stack 1: 0x668
- stack 0: 0x40
4485	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x668
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4486	 D9	PUSH1	03	 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
4487	 DB	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4488	 DC	PUSH2	0020	 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4489	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
4490	 E0	PUSH1	03	 	 
- stack 3: 0x668
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
4491	 E2	SIGNEXTEND		 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
4492	 E3	SLT		 	  ;; # BLT
- stack 1: 0x668
- stack 0: 0x0
4493	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0xEC
4494	 E7	JUMPI		 	 
- stack 0: 0x668
4495	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x668
- stack 0: 0x106
4496	 EB	JUMP		 	 
- stack 0: 0x668
4497	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x668
4498	 107	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
4499	 109	ADD		 	 
- stack 0: 0x66C
4500	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4501	 10B	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x16A00010189000201A3FFE4008600140150000000A0000001E5000001E50000
4502	 10C	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x16A00010189000201A3FFE4008600140150000000A0000001E5000001E50000
- stack 0: 0xF0
4503	 10E	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x16A
4504	 10F	JUMP		 	 
- stack 0: 0x66C
4505	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x66C
4506	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
4507	 16C	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x16A00010189000201A3FFE4008600140150000000A0000001E5000001E50000
4508	 16D	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x16A00010189000201A3FFE4008600140150000000A0000001E5000001E50000
- stack 0: 0xE0
4509	 16F	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x16A0001
4510	 170	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x16A0001
- stack 0: 0xFFFF
4511	 173	AND		 	 
- stack 1: 0x66C
- stack 0: 0x1
4512	 174	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x1
4513	 176	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x1
4514	 177	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x80
4515	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x1
4516	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x66C
- stack 0: 0x2
4517	 17C	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x2
- stack 0: 0x80
4518	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x66C
4519	 180	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4520	 182	ADD		 	 
- stack 0: 0x670
4521	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4522	 184	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x189000201A3FFE4008600140150000000A0000001E5000001E5000000BAFFFF
4523	 185	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x189000201A3FFE4008600140150000000A0000001E5000001E5000000BAFFFF
- stack 0: 0xF0
4524	 187	SHR		 	 
- stack 1: 0x670
- stack 0: 0x189
4525	 188	JUMP		 	 
- stack 0: 0x670
4526	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x670
4527	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4528	 18B	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x189000201A3FFE4008600140150000000A0000001E5000001E5000000BAFFFF
4529	 18C	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x189000201A3FFE4008600140150000000A0000001E5000001E5000000BAFFFF
- stack 0: 0xE0
4530	 18E	SHR		 	 
- stack 1: 0x670
- stack 0: 0x1890002
4531	 18F	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x1890002
- stack 0: 0xFFFF
4532	 192	AND		 	 
- stack 1: 0x670
- stack 0: 0x2
4533	 193	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0x1
4534	 195	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x2
4535	 196	PUSH2	00A0	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0xA0
4536	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x670
4537	 19A	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4538	 19C	ADD		 	 
- stack 0: 0x674
4539	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4540	 19E	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x1A3FFE4008600140150000000A0000001E5000001E5000000BAFFFF00D40040
4541	 19F	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x1A3FFE4008600140150000000A0000001E5000001E5000000BAFFFF00D40040
- stack 0: 0xF0
4542	 1A1	SHR		 	 
- stack 1: 0x674
- stack 0: 0x1A3
4543	 1A2	JUMP		 	 
- stack 0: 0x674
4544	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x674
4545	 1A4	PUSH2	0080	 	 
- stack 1: 0x674
- stack 0: 0x80
4546	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x674
- stack 0: 0x2
4547	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4548	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x2
4549	 1AE	PUSH2	00A0	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0xA0
4550	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x2
4551	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x674
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4552	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x2
4553	 1B8	SUB		 	 
- stack 1: 0x674
- stack 0: 0x0
4554	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x1C1
4555	 1BC	JUMPI		 	 
- stack 0: 0x674
4556	 1BD	PUSH2	01DB	 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 1: 0x674
- stack 0: 0x1DB
4557	 1C0	JUMP		 	 
- stack 0: 0x674
4558	 1DB	JUMPDEST		 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x674
4559	 1DC	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4560	 1DE	ADD		 	 
- stack 0: 0x678
4561	 1DF	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4562	 1E0	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x8600140150000000A0000001E5000001E5000000BAFFFF00D40040016A0001
4563	 1E1	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x8600140150000000A0000001E5000001E5000000BAFFFF00D40040016A0001
- stack 0: 0xF0
4564	 1E3	SHR		 	 
- stack 1: 0x678
- stack 0: 0x86
4565	 1E4	JUMP		 	 
- stack 0: 0x678
4566	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x678
4567	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
4568	 88	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x8600140150000000A0000001E5000001E5000000BAFFFF00D40040016A0001
4569	 89	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x8600140150000000A0000001E5000001E5000000BAFFFF00D40040016A0001
- stack 0: 0xE0
4570	 8B	SHR		 	 
- stack 1: 0x678
- stack 0: 0x860014
4571	 8C	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x860014
- stack 0: 0xFFFF
4572	 8F	AND		 	 
- stack 1: 0x678
- stack 0: 0x14
4573	 90	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x14
- stack 0: 0x1
4574	 92	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x14
4575	 93	PUSH2	0380	 	 
- stack 2: 0x678
- stack 1: 0x14
- stack 0: 0x380
4576	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x678
4577	 97	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
4578	 99	ADD		 	 
- stack 0: 0x67C
4579	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
4580	 9B	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x150000000A0000001E5000001E5000000BAFFFF00D40040016A000101890002
4581	 9C	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x150000000A0000001E5000001E5000000BAFFFF00D40040016A000101890002
- stack 0: 0xF0
4582	 9E	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x150
4583	 9F	JUMP		 	 
- stack 0: 0x67C
4584	 150	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x67C
4585	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
4586	 152	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x150000000A0000001E5000001E5000000BAFFFF00D40040016A000101890002
4587	 153	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x150000000A0000001E5000001E5000000BAFFFF00D40040016A000101890002
- stack 0: 0xE0
4588	 155	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x1500000
4589	 156	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x1500000
- stack 0: 0xFFFF
4590	 159	AND		 	 
- stack 1: 0x67C
- stack 0: 0x0
4591	 15A	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x1
4592	 15C	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x0
4593	 15D	PUSH2	0080	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x80
4594	 160	MSTORE		 	  ;; # store to x4
- stack 0: 0x67C
4595	 161	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4596	 163	ADD		 	 
- stack 0: 0x680
4597	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4598	 165	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xA0000001E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE4
4599	 166	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0xA0000001E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE4
- stack 0: 0xF0
4600	 168	SHR		 	 
- stack 1: 0x680
- stack 0: 0xA0
4601	 169	JUMP		 	 
- stack 0: 0x680
4602	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x680
4603	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
4604	 A2	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xA0000001E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE4
4605	 A3	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0xA0000001E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE4
- stack 0: 0xE0
4606	 A5	SHR		 	 
- stack 1: 0x680
- stack 0: 0xA00000
4607	 A6	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0xA00000
- stack 0: 0xFFFF
4608	 A9	AND		 	 
- stack 1: 0x680
- stack 0: 0x0
4609	 AA	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x1
4610	 AC	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x0
4611	 AD	PUSH2	0020	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x20
4612	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x680
4613	 B1	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4614	 B3	ADD		 	 
- stack 0: 0x684
4615	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4616	 B5	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x1E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE400A00001
4617	 B6	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x1E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE400A00001
- stack 0: 0xF0
4618	 B8	SHR		 	 
- stack 1: 0x684
- stack 0: 0x1E5
4619	 B9	JUMP		 	 
- stack 0: 0x684
4620	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x684
4621	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
4622	 1E7	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x1E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE400A00001
4623	 1E8	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x1E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE400A00001
- stack 0: 0xE0
4624	 1EA	SHR		 	 
- stack 1: 0x684
- stack 0: 0x1E50000
4625	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x1E50000
- stack 0: 0xFFFF
4626	 1EE	AND		 	 
- stack 1: 0x684
- stack 0: 0x0
4627	 1EF	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x1
4628	 1F1	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x0
4629	 1F2	POP		 	 
- stack 0: 0x684
4630	 1F3	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4631	 1F5	ADD		 	 
- stack 0: 0x688
4632	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4633	 1F7	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1E5000000BAFFFF00D40040016A00010189000201A3FFE400A0000101FC0014
4634	 1F8	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x1E5000000BAFFFF00D40040016A00010189000201A3FFE400A0000101FC0014
- stack 0: 0xF0
4635	 1FA	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1E5
4636	 1FB	JUMP		 	 
- stack 0: 0x688
4637	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x688
4638	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4639	 1E7	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1E5000000BAFFFF00D40040016A00010189000201A3FFE400A0000101FC0014
4640	 1E8	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x1E5000000BAFFFF00D40040016A00010189000201A3FFE400A0000101FC0014
- stack 0: 0xE0
4641	 1EA	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1E50000
4642	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x1E50000
- stack 0: 0xFFFF
4643	 1EE	AND		 	 
- stack 1: 0x688
- stack 0: 0x0
4644	 1EF	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x1
4645	 1F1	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x0
4646	 1F2	POP		 	 
- stack 0: 0x688
4647	 1F3	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4648	 1F5	ADD		 	 
- stack 0: 0x68C
4649	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4650	 1F7	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0xBAFFFF00D40040016A00010189000201A3FFE400A0000101FC001402360001
4651	 1F8	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0xBAFFFF00D40040016A00010189000201A3FFE400A0000101FC001402360001
- stack 0: 0xF0
4652	 1FA	SHR		 	 
- stack 1: 0x68C
- stack 0: 0xBA
4653	 1FB	JUMP		 	 
- stack 0: 0x68C
4654	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x68C
4655	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
4656	 BC	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0xBAFFFF00D40040016A00010189000201A3FFE400A0000101FC001402360001
4657	 BD	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0xBAFFFF00D40040016A00010189000201A3FFE400A0000101FC001402360001
- stack 0: 0xE0
4658	 BF	SHR		 	 
- stack 1: 0x68C
- stack 0: 0xBAFFFF
4659	 C0	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
4660	 C3	AND		 	 
- stack 1: 0x68C
- stack 0: 0xFFFF
4661	 C4	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0xFFFF
- stack 0: 0x1
4662	 C6	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4663	 C7	PUSH2	0040	 	 
- stack 2: 0x68C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4664	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x68C
4665	 CB	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4666	 CD	ADD		 	 
- stack 0: 0x690
4667	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4668	 CF	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0xD40040016A00010189000201A3FFE400A0000101FC00140236000102360001
4669	 D0	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0xD40040016A00010189000201A3FFE400A0000101FC00140236000102360001
- stack 0: 0xF0
4670	 D2	SHR		 	 
- stack 1: 0x690
- stack 0: 0xD4
4671	 D3	JUMP		 	 
- stack 0: 0x690
4672	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x690
4673	 D5	PUSH2	0040	 	 
- stack 1: 0x690
- stack 0: 0x40
4674	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x690
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4675	 D9	PUSH1	03	 	 
- stack 2: 0x690
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
4676	 DB	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4677	 DC	PUSH2	0020	 	 
- stack 2: 0x690
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4678	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x690
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
4679	 E0	PUSH1	03	 	 
- stack 3: 0x690
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
4680	 E2	SIGNEXTEND		 	 
- stack 2: 0x690
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
4681	 E3	SLT		 	  ;; # BLT
- stack 1: 0x690
- stack 0: 0x0
4682	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0xEC
4683	 E7	JUMPI		 	 
- stack 0: 0x690
4684	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x690
- stack 0: 0x106
4685	 EB	JUMP		 	 
- stack 0: 0x690
4686	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x690
4687	 107	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4688	 109	ADD		 	 
- stack 0: 0x694
4689	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4690	 10B	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x16A00010189000201A3FFE400A0000101FC0014023600010236000102360001
4691	 10C	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x16A00010189000201A3FFE400A0000101FC0014023600010236000102360001
- stack 0: 0xF0
4692	 10E	SHR		 	 
- stack 1: 0x694
- stack 0: 0x16A
4693	 10F	JUMP		 	 
- stack 0: 0x694
4694	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x694
4695	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4696	 16C	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x16A00010189000201A3FFE400A0000101FC0014023600010236000102360001
4697	 16D	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x16A00010189000201A3FFE400A0000101FC0014023600010236000102360001
- stack 0: 0xE0
4698	 16F	SHR		 	 
- stack 1: 0x694
- stack 0: 0x16A0001
4699	 170	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x16A0001
- stack 0: 0xFFFF
4700	 173	AND		 	 
- stack 1: 0x694
- stack 0: 0x1
4701	 174	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x1
4702	 176	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x1
4703	 177	PUSH2	0080	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x80
4704	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x0
4705	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x694
- stack 0: 0x1
4706	 17C	PUSH2	0080	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x80
4707	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x694
4708	 180	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4709	 182	ADD		 	 
- stack 0: 0x698
4710	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4711	 184	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x189000201A3FFE400A0000101FC001402360001023600010236000102360001
4712	 185	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x189000201A3FFE400A0000101FC001402360001023600010236000102360001
- stack 0: 0xF0
4713	 187	SHR		 	 
- stack 1: 0x698
- stack 0: 0x189
4714	 188	JUMP		 	 
- stack 0: 0x698
4715	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x698
4716	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
4717	 18B	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x189000201A3FFE400A0000101FC001402360001023600010236000102360001
4718	 18C	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x189000201A3FFE400A0000101FC001402360001023600010236000102360001
- stack 0: 0xE0
4719	 18E	SHR		 	 
- stack 1: 0x698
- stack 0: 0x1890002
4720	 18F	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x1890002
- stack 0: 0xFFFF
4721	 192	AND		 	 
- stack 1: 0x698
- stack 0: 0x2
4722	 193	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x2
- stack 0: 0x1
4723	 195	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x2
4724	 196	PUSH2	00A0	 	 
- stack 2: 0x698
- stack 1: 0x2
- stack 0: 0xA0
4725	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x698
4726	 19A	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4727	 19C	ADD		 	 
- stack 0: 0x69C
4728	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4729	 19E	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x1A3FFE400A0000101FC00140236000102360001023600010236000102360001
4730	 19F	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x1A3FFE400A0000101FC00140236000102360001023600010236000102360001
- stack 0: 0xF0
4731	 1A1	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x1A3
4732	 1A2	JUMP		 	 
- stack 0: 0x69C
4733	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x69C
4734	 1A4	PUSH2	0080	 	 
- stack 1: 0x69C
- stack 0: 0x80
4735	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x69C
- stack 0: 0x1
4736	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4737	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x69C
- stack 0: 0x1
4738	 1AE	PUSH2	00A0	 	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0xA0
4739	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x2
4740	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x69C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4741	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x2
4742	 1B8	SUB		 	 
- stack 1: 0x69C
- stack 0: 0x1
4743	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x1C1
4744	 1BC	JUMPI		 	 
- stack 0: 0x69C
4745	 1C1	JUMPDEST		 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x69C
4746	 1C2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4747	 1C3	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x1A3FFE400A0000101FC00140236000102360001023600010236000102360001
4748	 1C4	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x1A3FFE400A0000101FC00140236000102360001023600010236000102360001
- stack 0: 0xE0
4749	 1C6	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x1A3FFE4
4750	 1C7	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x1A3FFE4
- stack 0: 0xFFFF
4751	 1CA	AND		 	 
- stack 1: 0x69C
- stack 0: 0xFFE4
4752	 1CB	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0xFFE4
- stack 0: 0x1
4753	 1CD	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4754	 1CE	ADD		 	 
- stack 0: 0x680
4755	 1CF	PUSH4	FFFFFFFF	 	 
- stack 1: 0x680
- stack 0: 0xFFFFFFFF
4756	 1D4	AND		 	  ;; # mask to 32 bits
- stack 0: 0x680
4757	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4758	 1D6	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xA0000001E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE4
4759	 1D7	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0xA0000001E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE4
- stack 0: 0xF0
4760	 1D9	SHR		 	 
- stack 1: 0x680
- stack 0: 0xA0
4761	 1DA	JUMP		 	 
- stack 0: 0x680
4762	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x680
4763	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
4764	 A2	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xA0000001E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE4
4765	 A3	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0xA0000001E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE4
- stack 0: 0xE0
4766	 A5	SHR		 	 
- stack 1: 0x680
- stack 0: 0xA00000
4767	 A6	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0xA00000
- stack 0: 0xFFFF
4768	 A9	AND		 	 
- stack 1: 0x680
- stack 0: 0x0
4769	 AA	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x1
4770	 AC	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x0
4771	 AD	PUSH2	0020	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x20
4772	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x680
4773	 B1	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4774	 B3	ADD		 	 
- stack 0: 0x684
4775	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4776	 B5	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x1E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE400A00001
4777	 B6	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x1E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE400A00001
- stack 0: 0xF0
4778	 B8	SHR		 	 
- stack 1: 0x684
- stack 0: 0x1E5
4779	 B9	JUMP		 	 
- stack 0: 0x684
4780	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x684
4781	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
4782	 1E7	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x1E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE400A00001
4783	 1E8	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x1E5000001E5000000BAFFFF00D40040016A00010189000201A3FFE400A00001
- stack 0: 0xE0
4784	 1EA	SHR		 	 
- stack 1: 0x684
- stack 0: 0x1E50000
4785	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x1E50000
- stack 0: 0xFFFF
4786	 1EE	AND		 	 
- stack 1: 0x684
- stack 0: 0x0
4787	 1EF	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x1
4788	 1F1	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x0
4789	 1F2	POP		 	 
- stack 0: 0x684
4790	 1F3	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4791	 1F5	ADD		 	 
- stack 0: 0x688
4792	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4793	 1F7	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1E5000000BAFFFF00D40040016A00010189000201A3FFE400A0000101FC0014
4794	 1F8	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x1E5000000BAFFFF00D40040016A00010189000201A3FFE400A0000101FC0014
- stack 0: 0xF0
4795	 1FA	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1E5
4796	 1FB	JUMP		 	 
- stack 0: 0x688
4797	 1E5	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x688
4798	 1E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4799	 1E7	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1E5000000BAFFFF00D40040016A00010189000201A3FFE400A0000101FC0014
4800	 1E8	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x1E5000000BAFFFF00D40040016A00010189000201A3FFE400A0000101FC0014
- stack 0: 0xE0
4801	 1EA	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1E50000
4802	 1EB	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x1E50000
- stack 0: 0xFFFF
4803	 1EE	AND		 	 
- stack 1: 0x688
- stack 0: 0x0
4804	 1EF	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x1
4805	 1F1	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x0
4806	 1F2	POP		 	 
- stack 0: 0x688
4807	 1F3	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4808	 1F5	ADD		 	 
- stack 0: 0x68C
4809	 1F6	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4810	 1F7	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0xBAFFFF00D40040016A00010189000201A3FFE400A0000101FC001402360001
4811	 1F8	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0xBAFFFF00D40040016A00010189000201A3FFE400A0000101FC001402360001
- stack 0: 0xF0
4812	 1FA	SHR		 	 
- stack 1: 0x68C
- stack 0: 0xBA
4813	 1FB	JUMP		 	 
- stack 0: 0x68C
4814	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x68C
4815	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
4816	 BC	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0xBAFFFF00D40040016A00010189000201A3FFE400A0000101FC001402360001
4817	 BD	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0xBAFFFF00D40040016A00010189000201A3FFE400A0000101FC001402360001
- stack 0: 0xE0
4818	 BF	SHR		 	 
- stack 1: 0x68C
- stack 0: 0xBAFFFF
4819	 C0	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
4820	 C3	AND		 	 
- stack 1: 0x68C
- stack 0: 0xFFFF
4821	 C4	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0xFFFF
- stack 0: 0x1
4822	 C6	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4823	 C7	PUSH2	0040	 	 
- stack 2: 0x68C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4824	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x68C
4825	 CB	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4826	 CD	ADD		 	 
- stack 0: 0x690
4827	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4828	 CF	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0xD40040016A00010189000201A3FFE400A0000101FC00140236000102360001
4829	 D0	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0xD40040016A00010189000201A3FFE400A0000101FC00140236000102360001
- stack 0: 0xF0
4830	 D2	SHR		 	 
- stack 1: 0x690
- stack 0: 0xD4
4831	 D3	JUMP		 	 
- stack 0: 0x690
4832	 D4	JUMPDEST		 ;; __riscvimpl_BLT_0_1_2	  ;; # instr: blt ra,sp,c(ignore imm)
- stack 0: 0x690
4833	 D5	PUSH2	0040	 	 
- stack 1: 0x690
- stack 0: 0x40
4834	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x690
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4835	 D9	PUSH1	03	 	 
- stack 2: 0x690
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
4836	 DB	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4837	 DC	PUSH2	0020	 	 
- stack 2: 0x690
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
4838	 DF	MLOAD		 	  ;; # read from x1
- stack 2: 0x690
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
4839	 E0	PUSH1	03	 	 
- stack 3: 0x690
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
4840	 E2	SIGNEXTEND		 	 
- stack 2: 0x690
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
4841	 E3	SLT		 	  ;; # BLT
- stack 1: 0x690
- stack 0: 0x0
4842	 E4	PUSH2	00EC	 ;; _blt_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0xEC
4843	 E7	JUMPI		 	 
- stack 0: 0x690
4844	 E8	PUSH2	0106	 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 1: 0x690
- stack 0: 0x106
4845	 EB	JUMP		 	 
- stack 0: 0x690
4846	 106	JUMPDEST		 ;; _blt_after_9403d714618e2fe744ac0a2f7bd7d51d9e9eb2dfe7019d91d8768c9701582c08	 
- stack 0: 0x690
4847	 107	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4848	 109	ADD		 	 
- stack 0: 0x694
4849	 10A	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4850	 10B	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x16A00010189000201A3FFE400A0000101FC0014023600010236000102360001
4851	 10C	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x16A00010189000201A3FFE400A0000101FC0014023600010236000102360001
- stack 0: 0xF0
4852	 10E	SHR		 	 
- stack 1: 0x694
- stack 0: 0x16A
4853	 10F	JUMP		 	 
- stack 0: 0x694
4854	 16A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x694
4855	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4856	 16C	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x16A00010189000201A3FFE400A0000101FC0014023600010236000102360001
4857	 16D	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x16A00010189000201A3FFE400A0000101FC0014023600010236000102360001
- stack 0: 0xE0
4858	 16F	SHR		 	 
- stack 1: 0x694
- stack 0: 0x16A0001
4859	 170	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x16A0001
- stack 0: 0xFFFF
4860	 173	AND		 	 
- stack 1: 0x694
- stack 0: 0x1
4861	 174	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x1
4862	 176	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x1
4863	 177	PUSH2	0080	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x80
4864	 17A	MLOAD		 	  ;; # read from x4
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x1
4865	 17B	ADD		 	  ;; # ADDI 4
- stack 1: 0x694
- stack 0: 0x2
4866	 17C	PUSH2	0080	 	 
- stack 2: 0x694
- stack 1: 0x2
- stack 0: 0x80
4867	 17F	MSTORE		 	  ;; # store to x4
- stack 0: 0x694
4868	 180	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4869	 182	ADD		 	 
- stack 0: 0x698
4870	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4871	 184	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x189000201A3FFE400A0000101FC001402360001023600010236000102360001
4872	 185	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x189000201A3FFE400A0000101FC001402360001023600010236000102360001
- stack 0: 0xF0
4873	 187	SHR		 	 
- stack 1: 0x698
- stack 0: 0x189
4874	 188	JUMP		 	 
- stack 0: 0x698
4875	 189	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x698
4876	 18A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
4877	 18B	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x189000201A3FFE400A0000101FC001402360001023600010236000102360001
4878	 18C	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x189000201A3FFE400A0000101FC001402360001023600010236000102360001
- stack 0: 0xE0
4879	 18E	SHR		 	 
- stack 1: 0x698
- stack 0: 0x1890002
4880	 18F	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x1890002
- stack 0: 0xFFFF
4881	 192	AND		 	 
- stack 1: 0x698
- stack 0: 0x2
4882	 193	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x2
- stack 0: 0x1
4883	 195	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x2
4884	 196	PUSH2	00A0	 	 
- stack 2: 0x698
- stack 1: 0x2
- stack 0: 0xA0
4885	 199	MSTORE		 	  ;; # store to x5
- stack 0: 0x698
4886	 19A	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4887	 19C	ADD		 	 
- stack 0: 0x69C
4888	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4889	 19E	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x1A3FFE400A0000101FC00140236000102360001023600010236000102360001
4890	 19F	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x1A3FFE400A0000101FC00140236000102360001023600010236000102360001
- stack 0: 0xF0
4891	 1A1	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x1A3
4892	 1A2	JUMP		 	 
- stack 0: 0x69C
4893	 1A3	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x69C
4894	 1A4	PUSH2	0080	 	 
- stack 1: 0x69C
- stack 0: 0x80
4895	 1A7	MLOAD		 	  ;; # read from x4
- stack 1: 0x69C
- stack 0: 0x2
4896	 1A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4897	 1AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x69C
- stack 0: 0x2
4898	 1AE	PUSH2	00A0	 	 
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0xA0
4899	 1B1	MLOAD		 	  ;; # read from x5
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0x2
4900	 1B2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x69C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4901	 1B7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0x2
4902	 1B8	SUB		 	 
- stack 1: 0x69C
- stack 0: 0x0
4903	 1B9	PUSH2	01C1	 ;; _neq_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x1C1
4904	 1BC	JUMPI		 	 
- stack 0: 0x69C
4905	 1BD	PUSH2	01DB	 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 1: 0x69C
- stack 0: 0x1DB
4906	 1C0	JUMP		 	 
- stack 0: 0x69C
4907	 1DB	JUMPDEST		 ;; _neq_after_14fd86a75980960463569cdc5b571c34282a34733c4efaca62701373dc053fd6	 
- stack 0: 0x69C
4908	 1DC	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4909	 1DE	ADD		 	 
- stack 0: 0x6A0
4910	 1DF	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4911	 1E0	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0xA0000101FC0014023600010236000102360001023600010236000102360001
4912	 1E1	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0xA0000101FC0014023600010236000102360001023600010236000102360001
- stack 0: 0xF0
4913	 1E3	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0xA0
4914	 1E4	JUMP		 	 
- stack 0: 0x6A0
4915	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6A0
4916	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4917	 A2	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0xA0000101FC0014023600010236000102360001023600010236000102360001
4918	 A3	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0xA0000101FC0014023600010236000102360001023600010236000102360001
- stack 0: 0xE0
4919	 A5	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0xA00001
4920	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0xA00001
- stack 0: 0xFFFF
4921	 A9	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x1
4922	 AA	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1
4923	 AC	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x1
4924	 AD	PUSH2	0020	 	 
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x20
4925	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A0
4926	 B1	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4927	 B3	ADD		 	 
- stack 0: 0x6A4
4928	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4929	 B5	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x1FC001402360001023600010236000102360001023600010236000102550003
4930	 B6	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x1FC001402360001023600010236000102360001023600010236000102550003
- stack 0: 0xF0
4931	 B8	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x1FC
4932	 B9	JUMP		 	 
- stack 0: 0x6A4
4933	 1FC	JUMPDEST		 ;; __riscvimpl_BLT_0_0_1	  ;; # instr: blt zero,ra,14(ignore imm)
- stack 0: 0x6A4
4934	 1FD	PUSH2	0020	 	 
- stack 1: 0x6A4
- stack 0: 0x20
4935	 200	MLOAD		 	  ;; # read from x1
- stack 1: 0x6A4
- stack 0: 0x1
4936	 201	PUSH1	03	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x3
4937	 203	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
4938	 204	PUSH1	00	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x0
4939	 206	PUSH1	03	 	 
- stack 3: 0x6A4
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0x3
4940	 208	SIGNEXTEND		 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x0
4941	 209	SLT		 	  ;; # BLT
- stack 1: 0x6A4
- stack 0: 0x1
4942	 20A	PUSH2	0212	 ;; _blt_a4fe4e4f51a682ed65749c3cc82fbe3690fd5db0696f6cac87c90e2af8f06558	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x212
4943	 20D	JUMPI		 	 
- stack 0: 0x6A4
4944	 212	JUMPDEST		 ;; _blt_a4fe4e4f51a682ed65749c3cc82fbe3690fd5db0696f6cac87c90e2af8f06558	 
- stack 0: 0x6A4
4945	 213	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
4946	 214	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x1FC001402360001023600010236000102360001023600010236000102550003
4947	 215	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x1FC001402360001023600010236000102360001023600010236000102550003
- stack 0: 0xE0
4948	 217	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x1FC0014
4949	 218	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x1FC0014
- stack 0: 0xFFFF
4950	 21B	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x14
4951	 21C	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x14
- stack 0: 0x1
4952	 21E	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x14
4953	 21F	ADD		 	 
- stack 0: 0x6B8
4954	 220	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6B8
- stack 0: 0xFFFFFFFF
4955	 225	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6B8
4956	 226	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4957	 227	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x2360001023600010255000300860015026F0008011000180021000000340708
4958	 228	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x2360001023600010255000300860015026F0008011000180021000000340708
- stack 0: 0xF0
4959	 22A	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x236
4960	 22B	JUMP		 	 
- stack 0: 0x6B8
4961	 236	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x6B8
4962	 237	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
4963	 238	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x2360001023600010255000300860015026F0008011000180021000000340708
4964	 239	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x2360001023600010255000300860015026F0008011000180021000000340708
- stack 0: 0xE0
4965	 23B	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x2360001
4966	 23C	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x2360001
- stack 0: 0xFFFF
4967	 23F	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
4968	 240	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
4969	 242	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
4970	 243	PUSH2	0020	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x20
4971	 246	MLOAD		 	  ;; # read from x1
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
4972	 247	ADD		 	  ;; # ADDI 1
- stack 1: 0x6B8
- stack 0: 0x2
4973	 248	PUSH2	0020	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0x20
4974	 24B	MSTORE		 	  ;; # store to x1
- stack 0: 0x6B8
4975	 24C	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4976	 24E	ADD		 	 
- stack 0: 0x6BC
4977	 24F	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4978	 250	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x23600010255000300860015026F000801100018002100000034070800530042
4979	 251	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x23600010255000300860015026F000801100018002100000034070800530042
- stack 0: 0xF0
4980	 253	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x236
4981	 254	JUMP		 	 
- stack 0: 0x6BC
4982	 236	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x6BC
4983	 237	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
4984	 238	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x23600010255000300860015026F000801100018002100000034070800530042
4985	 239	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x23600010255000300860015026F000801100018002100000034070800530042
- stack 0: 0xE0
4986	 23B	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x2360001
4987	 23C	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x2360001
- stack 0: 0xFFFF
4988	 23F	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x1
4989	 240	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0x1
4990	 242	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x1
4991	 243	PUSH2	0020	 	 
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0x20
4992	 246	MLOAD		 	  ;; # read from x1
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0x2
4993	 247	ADD		 	  ;; # ADDI 1
- stack 1: 0x6BC
- stack 0: 0x3
4994	 248	PUSH2	0020	 	 
- stack 2: 0x6BC
- stack 1: 0x3
- stack 0: 0x20
4995	 24B	MSTORE		 	  ;; # store to x1
- stack 0: 0x6BC
4996	 24C	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4997	 24E	ADD		 	 
- stack 0: 0x6C0
4998	 24F	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4999	 250	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x255000300860015026F00080110001800210000003407080053004200660000
5000	 251	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x255000300860015026F00080110001800210000003407080053004200660000
- stack 0: 0xF0
5001	 253	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x255
5002	 254	JUMP		 	 
- stack 0: 0x6C0
5003	 255	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,3(ignore imm)
- stack 0: 0x6C0
5004	 256	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
5005	 257	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x255000300860015026F00080110001800210000003407080053004200660000
5006	 258	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x255000300860015026F00080110001800210000003407080053004200660000
- stack 0: 0xE0
5007	 25A	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x2550003
5008	 25B	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x2550003
- stack 0: 0xFFFF
5009	 25E	AND		 	 
- stack 1: 0x6C0
- stack 0: 0x3
5010	 25F	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0x3
- stack 0: 0x1
5011	 261	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0x3
5012	 262	PUSH2	03A0	 	 
- stack 2: 0x6C0
- stack 1: 0x3
- stack 0: 0x3A0
5013	 265	MSTORE		 	  ;; # store to x29
- stack 0: 0x6C0
5014	 266	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
5015	 268	ADD		 	 
- stack 0: 0x6C4
5016	 269	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
5017	 26A	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x860015026F0008011000180021000000340708005300420066000002B10001
5018	 26B	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x860015026F0008011000180021000000340708005300420066000002B10001
- stack 0: 0xF0
5019	 26D	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x86
5020	 26E	JUMP		 	 
- stack 0: 0x6C4
5021	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6C4
5022	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C4
- stack 0: 0x6C4
5023	 88	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x860015026F0008011000180021000000340708005300420066000002B10001
5024	 89	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0x860015026F0008011000180021000000340708005300420066000002B10001
- stack 0: 0xE0
5025	 8B	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x860015
5026	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x860015
- stack 0: 0xFFFF
5027	 8F	AND		 	 
- stack 1: 0x6C4
- stack 0: 0x15
5028	 90	PUSH1	01	 	 
- stack 2: 0x6C4
- stack 1: 0x15
- stack 0: 0x1
5029	 92	SIGNEXTEND		 	 
- stack 1: 0x6C4
- stack 0: 0x15
5030	 93	PUSH2	0380	 	 
- stack 2: 0x6C4
- stack 1: 0x15
- stack 0: 0x380
5031	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x6C4
5032	 97	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
5033	 99	ADD		 	 
- stack 0: 0x6C8
5034	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
5035	 9B	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x26F0008011000180021000000340708005300420066000002B1000100210000
5036	 9C	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x26F0008011000180021000000340708005300420066000002B1000100210000
- stack 0: 0xF0
5037	 9E	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x26F
5038	 9F	JUMP		 	 
- stack 0: 0x6C8
5039	 26F	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,8(ignore imm)
- stack 0: 0x6C8
5040	 270	PUSH2	0020	 	 
- stack 1: 0x6C8
- stack 0: 0x20
5041	 273	MLOAD		 	  ;; # read from x1
- stack 1: 0x6C8
- stack 0: 0x3
5042	 274	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
5043	 279	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C8
- stack 0: 0x3
5044	 27A	PUSH2	03A0	 	 
- stack 2: 0x6C8
- stack 1: 0x3
- stack 0: 0x3A0
5045	 27D	MLOAD		 	  ;; # read from x29
- stack 2: 0x6C8
- stack 1: 0x3
- stack 0: 0x3
5046	 27E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C8
- stack 2: 0x3
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
5047	 283	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C8
- stack 1: 0x3
- stack 0: 0x3
5048	 284	SUB		 	 
- stack 1: 0x6C8
- stack 0: 0x0
5049	 285	PUSH2	028D	 ;; _neq_c186ef9a624af7b8fa5ccaf9a17193fe065d3ba127a76a7827deffc20c755cd2	 
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0x28D
5050	 288	JUMPI		 	 
- stack 0: 0x6C8
5051	 289	PUSH2	02A7	 ;; _neq_after_c186ef9a624af7b8fa5ccaf9a17193fe065d3ba127a76a7827deffc20c755cd2	 
- stack 1: 0x6C8
- stack 0: 0x2A7
5052	 28C	JUMP		 	 
- stack 0: 0x6C8
5053	 2A7	JUMPDEST		 ;; _neq_after_c186ef9a624af7b8fa5ccaf9a17193fe065d3ba127a76a7827deffc20c755cd2	 
- stack 0: 0x6C8
5054	 2A8	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
5055	 2AA	ADD		 	 
- stack 0: 0x6CC
5056	 2AB	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
5057	 2AC	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x11000180021000000340708005300420066000002B10001002100000034070C
5058	 2AD	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x11000180021000000340708005300420066000002B10001002100000034070C
- stack 0: 0xF0
5059	 2AF	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x110
5060	 2B0	JUMP		 	 
- stack 0: 0x6CC
5061	 110	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b0(ignore imm)
- stack 0: 0x6CC
5062	 111	PUSH1	00	 	 
- stack 1: 0x6CC
- stack 0: 0x0
5063	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
5064	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6CC
- stack 0: 0x0
5065	 119	PUSH2	0380	 	 
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0x380
5066	 11C	MLOAD		 	  ;; # read from x28
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0x15
5067	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6CC
- stack 2: 0x0
- stack 1: 0x15
- stack 0: 0xFFFFFFFF
5068	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0x15
5069	 123	SUB		 	 
- stack 1: 0x6CC
- stack 0: 0x15
5070	 124	PUSH2	012C	 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 2: 0x6CC
- stack 1: 0x15
- stack 0: 0x12C
5071	 127	JUMPI		 	 
- stack 0: 0x6CC
5072	 12C	JUMPDEST		 ;; _neq_ba87876880c17d40da4d7c0679ce64d67bccc6ca90483f9451d2af89593997e8	 
- stack 0: 0x6CC
5073	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6CC
- stack 0: 0x6CC
5074	 12E	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x11000180021000000340708005300420066000002B10001002100000034070C
5075	 12F	PUSH1	E0	 	 
- stack 2: 0x6CC
- stack 1: 0x11000180021000000340708005300420066000002B10001002100000034070C
- stack 0: 0xE0
5076	 131	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x1100018
5077	 132	PUSH2	FFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x1100018
- stack 0: 0xFFFF
5078	 135	AND		 	 
- stack 1: 0x6CC
- stack 0: 0x18
5079	 136	PUSH1	01	 	 
- stack 2: 0x6CC
- stack 1: 0x18
- stack 0: 0x1
5080	 138	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0x18
5081	 139	ADD		 	 
- stack 0: 0x6E4
5082	 13A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFF
5083	 13F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6E4
5084	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
5085	 141	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x2100000034070C005300420066000002BC000000660000000000006574796D
5086	 142	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x2100000034070C005300420066000002BC000000660000000000006574796D
- stack 0: 0xF0
5087	 144	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x21
5088	 145	JUMP		 	 
- stack 0: 0x6E4
5089	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x6E4
5090	 22	PUSH4	00000000	 	 
- stack 1: 0x6E4
- stack 0: 0x0
5091	 27	PUSH2	0160	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x160
5092	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x6E4
5093	 2B	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
5094	 2D	ADD		 	 
- stack 0: 0x6E8
5095	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
5096	 2F	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x34070C005300420066000002BC000000660000000000006574796D00007473
5097	 30	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x34070C005300420066000002BC000000660000000000006574796D00007473
- stack 0: 0xF0
5098	 32	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x34
5099	 33	JUMP		 	 
- stack 0: 0x6E8
5100	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1792(ignore imm)
- stack 0: 0x6E8
5101	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
5102	 36	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x34070C005300420066000002BC000000660000000000006574796D00007473
5103	 37	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x34070C005300420066000002BC000000660000000000006574796D00007473
- stack 0: 0xE0
5104	 39	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x34070C
5105	 3A	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x34070C
- stack 0: 0xFFFF
5106	 3D	AND		 	 
- stack 1: 0x6E8
- stack 0: 0x70C
5107	 3E	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0x70C
- stack 0: 0x1
5108	 40	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0x70C
5109	 41	PUSH2	0160	 	 
- stack 2: 0x6E8
- stack 1: 0x70C
- stack 0: 0x160
5110	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x6E8
- stack 1: 0x70C
- stack 0: 0x0
5111	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x6E8
- stack 0: 0x70C
5112	 46	PUSH2	0160	 	 
- stack 2: 0x6E8
- stack 1: 0x70C
- stack 0: 0x160
5113	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x6E8
5114	 4A	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
5115	 4C	ADD		 	 
- stack 0: 0x6EC
5116	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
5117	 4E	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x5300420066000002BC000000660000000000006574796D0000747300525245
5118	 4F	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x5300420066000002BC000000660000000000006574796D0000747300525245
- stack 0: 0xF0
5119	 51	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x53
5120	 52	JUMP		 	 
- stack 0: 0x6EC
5121	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x6EC
5122	 54	PUSH4	00042000	 	 
- stack 1: 0x6EC
- stack 0: 0x42000
5123	 59	PUSH2	0140	 	 
- stack 2: 0x6EC
- stack 1: 0x42000
- stack 0: 0x140
5124	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x6EC
5125	 5D	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
5126	 5F	ADD		 	 
- stack 0: 0x6F0
5127	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
5128	 61	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x66000002BC000000660000000000006574796D000074730052524500004B4F
5129	 62	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x66000002BC000000660000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
5130	 64	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x66
5131	 65	JUMP		 	 
- stack 0: 0x6F0
5132	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6F0
5133	 67	PUSH2	0140	 	 
- stack 1: 0x6F0
- stack 0: 0x140
5134	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6F0
- stack 0: 0x42000
5135	 6B	PUSH2	0075	 ;; _ecall_4e19834bd30cf7c2b6066989ca20012363874fcbbd46b2332754d28e02c75de1	 
- stack 2: 0x6F0
- stack 1: 0x42000
- stack 0: 0x75
5136	 6E	JUMPI		 	 
- stack 0: 0x6F0
5137	 75	JUMPDEST		 ;; _ecall_4e19834bd30cf7c2b6066989ca20012363874fcbbd46b2332754d28e02c75de1	 
- stack 0: 0x6F0
5138	 76	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
5139	 78	PUSH2	0160	 	 
- stack 2: 0x6F0
- stack 1: 0x4
- stack 0: 0x160
5140	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x6F0
- stack 1: 0x4
- stack 0: 0x70C
5141	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x6F0
5142	 7D	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
5143	 7F	ADD		 	 
- stack 0: 0x6F4
5144	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
5145	 81	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x2BC000000660000000000006574796D000074730052524500004B4F00000000
5146	 82	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x2BC000000660000000000006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
5147	 84	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x2BC
5148	 85	JUMP		 	 
- stack 0: 0x6F4
5149	 2BC	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x6F4
5150	 2BD	PUSH4	00000000	 	 
- stack 1: 0x6F4
- stack 0: 0x0
5151	 2C2	PUSH2	0140	 	 
- stack 2: 0x6F4
- stack 1: 0x0
- stack 0: 0x140
5152	 2C5	MSTORE		 	  ;; # store to x10
- stack 0: 0x6F4
5153	 2C6	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
5154	 2C8	ADD		 	 
- stack 0: 0x6F8
5155	 2C9	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
5156	 2CA	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x660000000000006574796D000074730052524500004B4F0000000000000000
5157	 2CB	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x660000000000006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
5158	 2CD	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x66
5159	 2CE	JUMP		 	 
- stack 0: 0x6F8
5160	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6F8
5161	 67	PUSH2	0140	 	 
- stack 1: 0x6F8
- stack 0: 0x140
5162	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6F8
- stack 0: 0x0
5163	 6B	PUSH2	0075	 ;; _ecall_4e19834bd30cf7c2b6066989ca20012363874fcbbd46b2332754d28e02c75de1	 
- stack 2: 0x6F8
- stack 1: 0x0
- stack 0: 0x75
5164	 6E	JUMPI		 	 
- stack 0: 0x6F8
5165	 6F	PUSH1	20	 	 
- stack 1: 0x6F8
- stack 0: 0x20
5166	 71	PUSH2	0160	 	 
- stack 2: 0x6F8
- stack 1: 0x20
- stack 0: 0x160
5167	 74	RETURN		 	 
Final bytecode length; 1504
Returned: 000000000000000000000000000000000000000000000000000000000000070c
gasUsed : 18484
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c
** HOT: 430 - range: 430,434,438,43c
** HOT: 450 - range: 450,454,458,45c
** HOT: 470 - range: 470,474,478,47c
** HOT: 48c - range: 48c,490,494,498
** HOT: 4a8 - range: 4a8,4ac,4b0,4b4
** HOT: 4c4 - range: 4c4,4c8,4cc,4d0
** HOT: 4e0 - range: 4e0,4e4,4e8,4ec,4f0
** HOT: 4e8 - range: 4e8,4ec,4f0
** HOT: 4f4 - range: 4f4,4f8,4fc
** HOT: 500 - range: 500,504,508,50c,510,514
** HOT: 508 - range: 508,50c,510,514
** HOT: 518 - range: 518,51c,520
** HOT: 524 - range: 524,528,52c,530,534,538,53c
** HOT: 52c - range: 52c,530,534,538,53c
** HOT: 540 - range: 540,544,548
** HOT: 54c - range: 54c,550,554,558,55c,560
** HOT: 554 - range: 554,558,55c,560
** HOT: 564 - range: 564,568,56c
** HOT: 570 - range: 570,574,578,57c,580,584,588
** HOT: 578 - range: 578,57c,580,584,588
** HOT: 58c - range: 58c,590,594
** HOT: 598 - range: 598,59c,5a0,5a4,5a8,5ac,5b0
** HOT: 5a0 - range: 5a0,5a4,5a8,5ac,5b0
** HOT: 5b4 - range: 5b4,5b8,5bc
** HOT: 5c0 - range: 5c0,5c4,5c8,5cc,5d0
** HOT: 5c8 - range: 5c8,5cc,5d0
** HOT: 5d4 - range: 5d4,5d8,5dc
** HOT: 5e0 - range: 5e0,5e4,5e8,5ec,5f0,5f4
** HOT: 5e8 - range: 5e8,5ec,5f0,5f4
** HOT: 5f8 - range: 5f8,5fc,600
** HOT: 604 - range: 604,608,60c,610,614,618,61c
** HOT: 60c - range: 60c,610,614,618,61c
** HOT: 620 - range: 620,624,628
** HOT: 62c - range: 62c,630,634,638,63c,640
** HOT: 634 - range: 634,638,63c,640
** HOT: 644 - range: 644,648,64c
** HOT: 650 - range: 650,654,658,65c,660,664,668
** HOT: 658 - range: 658,65c,660,664,668
** HOT: 66c - range: 66c,670,674
** HOT: 678 - range: 678,67c,680,684,688,68c,690
** HOT: 680 - range: 680,684,688,68c,690
** HOT: 694 - range: 694,698,69c
** HOT: 6b8 - range: 6b8,6bc,6c0,6c4,6c8
