Running in EVM:
0	 0	PUSH4	0340	 	 
- stack 0: 0x340
1	 5	PUSH2	0346	 ;; _rambegin	 
- stack 1: 0x340
- stack 0: 0x346
2	 8	PUSH1	01	 	 
- stack 2: 0x340
- stack 1: 0x346
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x340
- stack 0: 0x347
4	 B	PUSH2	0400	 	 
- stack 2: 0x340
- stack 1: 0x347
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100000034073000530042006600000086000200A0000000BA000100D4000C
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100000034073000530042006600000086000200A0000000BA000100D4000C
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34073000530042006600000086000200A0000000BA000100D4000C011602E4
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34073000530042006600000086000200A0000000BA000100D4000C011602E4
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1840(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34073000530042006600000086000200A0000000BA000100D4000C011602E4
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34073000530042006600000086000200A0000000BA000100D4000C011602E4
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340730
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340730
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x730
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x730
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x730
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x730
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x730
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x730
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x730
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000200A0000000BA000100D4000C011602E40116000C
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000200A0000000BA000100D4000C011602E40116000C
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000200A0000000BA000100D4000C011602E40116000C00D4FFFC
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000200A0000000BA000100D4000C011602E40116000C00D4FFFC
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_6d35a454813011404af6a330c420f45458feea69d5e761eb3a584871feb8881f	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_6d35a454813011404af6a330c420f45458feea69d5e761eb3a584871feb8881f	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x730
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA000100D4000C011602E40116000C00D4FFFC011602D8
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA000100D4000C011602E40116000C00D4FFFC011602D8
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA000100D4000C011602E40116000C00D4FFFC011602D8
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA000100D4000C011602E40116000C00D4FFFC011602D8
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860002
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860002
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x2
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x2
84	 93	PUSH2	0380	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x380
85	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000100D4000C011602E40116000C00D4FFFC011602D800860003
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000100D4000C011602E40116000C00D4FFFC011602D800860003
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000100D4000C011602E40116000C00D4FFFC011602D800860003
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000100D4000C011602E40116000C00D4FFFC011602D800860003
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x20
103	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
104	 B1	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
105	 B3	ADD		 	 
- stack 0: 0x418
106	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
107	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000100D4000C011602E40116000C00D4FFFC011602D80086000300A0FFFE
108	 B6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBA000100D4000C011602E40116000C00D4FFFC011602D80086000300A0FFFE
- stack 0: 0xF0
109	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA
110	 B9	JUMP		 	 
- stack 0: 0x418
111	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x418
112	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
113	 BC	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000100D4000C011602E40116000C00D4FFFC011602D80086000300A0FFFE
114	 BD	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xBA000100D4000C011602E40116000C00D4FFFC011602D80086000300A0FFFE
- stack 0: 0xE0
115	 BF	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA0001
116	 C0	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xBA0001
- stack 0: 0xFFFF
117	 C3	AND		 	 
- stack 1: 0x418
- stack 0: 0x1
118	 C4	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0x1
- stack 0: 0x1
119	 C6	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0x1
120	 C7	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0x1
- stack 0: 0x40
121	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x418
122	 CB	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
123	 CD	ADD		 	 
- stack 0: 0x41C
124	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
125	 CF	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C011602E40116000C00D4FFFC011602D80086000300A0FFFE00BAFFFF
126	 D0	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C011602E40116000C00D4FFFC011602D80086000300A0FFFE00BAFFFF
- stack 0: 0xF0
127	 D2	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD4
128	 D3	JUMP		 	 
- stack 0: 0x41C
129	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x41C
130	 D5	PUSH2	0040	 	 
- stack 1: 0x41C
- stack 0: 0x40
131	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x41C
- stack 0: 0x1
132	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
133	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x41C
- stack 0: 0x1
134	 DF	PUSH2	0020	 	 
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0x20
135	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0x0
136	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x41C
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
137	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0x0
138	 E9	LT		 	  ;; # bltu
- stack 1: 0x41C
- stack 0: 0x1
139	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0xF2
140	 ED	JUMPI		 	 
- stack 0: 0x41C
141	 F2	JUMPDEST		 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x41C
142	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
143	 F4	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C011602E40116000C00D4FFFC011602D80086000300A0FFFE00BAFFFF
144	 F5	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C011602E40116000C00D4FFFC011602D80086000300A0FFFE00BAFFFF
- stack 0: 0xE0
145	 F7	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C
146	 F8	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
147	 FB	AND		 	 
- stack 1: 0x41C
- stack 0: 0xC
148	 FC	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0xC
- stack 0: 0x1
149	 FE	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0xC
150	 FF	ADD		 	 
- stack 0: 0x428
151	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFF
152	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x428
153	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
154	 107	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC011602D80086000300A0FFFE00BAFFFF00D4000C011602C40116000C
155	 108	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC011602D80086000300A0FFFE00BAFFFF00D4000C011602C40116000C
- stack 0: 0xF0
156	 10A	SHR		 	 
- stack 1: 0x428
- stack 0: 0xD4
157	 10B	JUMP		 	 
- stack 0: 0x428
158	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x428
159	 D5	PUSH2	0040	 	 
- stack 1: 0x428
- stack 0: 0x40
160	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x428
- stack 0: 0x1
161	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
162	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x428
- stack 0: 0x1
163	 DF	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x20
164	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x0
165	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x428
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
166	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x0
167	 E9	LT		 	  ;; # bltu
- stack 1: 0x428
- stack 0: 0x1
168	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0xF2
169	 ED	JUMPI		 	 
- stack 0: 0x428
170	 F2	JUMPDEST		 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x428
171	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
172	 F4	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC011602D80086000300A0FFFE00BAFFFF00D4000C011602C40116000C
173	 F5	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC011602D80086000300A0FFFE00BAFFFF00D4000C011602C40116000C
- stack 0: 0xE0
174	 F7	SHR		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC
175	 F8	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
176	 FB	AND		 	 
- stack 1: 0x428
- stack 0: 0xFFFC
177	 FC	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0xFFFC
- stack 0: 0x1
178	 FE	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
179	 FF	ADD		 	 
- stack 0: 0x424
180	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x424
- stack 0: 0xFFFFFFFF
181	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x424
182	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
183	 107	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x116000C00D4FFFC011602D80086000300A0FFFE00BAFFFF00D4000C011602C4
184	 108	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x116000C00D4FFFC011602D80086000300A0FFFE00BAFFFF00D4000C011602C4
- stack 0: 0xF0
185	 10A	SHR		 	 
- stack 1: 0x424
- stack 0: 0x116
186	 10B	JUMP		 	 
- stack 0: 0x424
187	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2e4(ignore imm)
- stack 0: 0x424
188	 117	PUSH1	00	 	 
- stack 1: 0x424
- stack 0: 0x0
189	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
190	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x0
191	 11F	PUSH2	0380	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x380
192	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x2
193	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0x0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
194	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x2
195	 129	SUB		 	 
- stack 1: 0x424
- stack 0: 0x2
196	 12A	PUSH2	0132	 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 2: 0x424
- stack 1: 0x2
- stack 0: 0x132
197	 12D	JUMPI		 	 
- stack 0: 0x424
198	 132	JUMPDEST		 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 0: 0x424
199	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
200	 134	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x116000C00D4FFFC011602D80086000300A0FFFE00BAFFFF00D4000C011602C4
201	 135	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x116000C00D4FFFC011602D80086000300A0FFFE00BAFFFF00D4000C011602C4
- stack 0: 0xE0
202	 137	SHR		 	 
- stack 1: 0x424
- stack 0: 0x116000C
203	 138	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x116000C
- stack 0: 0xFFFF
204	 13B	AND		 	 
- stack 1: 0x424
- stack 0: 0xC
205	 13C	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0xC
- stack 0: 0x1
206	 13E	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0xC
207	 13F	ADD		 	 
- stack 0: 0x430
208	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x430
- stack 0: 0xFFFFFFFF
209	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x430
210	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
211	 147	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x86000300A0FFFE00BAFFFF00D4000C011602C40116000C00D4FFFC011602B8
212	 148	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x86000300A0FFFE00BAFFFF00D4000C011602C40116000C00D4FFFC011602B8
- stack 0: 0xF0
213	 14A	SHR		 	 
- stack 1: 0x430
- stack 0: 0x86
214	 14B	JUMP		 	 
- stack 0: 0x430
215	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x430
216	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
217	 88	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x86000300A0FFFE00BAFFFF00D4000C011602C40116000C00D4FFFC011602B8
218	 89	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0x86000300A0FFFE00BAFFFF00D4000C011602C40116000C00D4FFFC011602B8
- stack 0: 0xE0
219	 8B	SHR		 	 
- stack 1: 0x430
- stack 0: 0x860003
220	 8C	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0x860003
- stack 0: 0xFFFF
221	 8F	AND		 	 
- stack 1: 0x430
- stack 0: 0x3
222	 90	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x1
223	 92	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x3
224	 93	PUSH2	0380	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x380
225	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x430
226	 97	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
227	 99	ADD		 	 
- stack 0: 0x434
228	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
229	 9B	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xA0FFFE00BAFFFF00D4000C011602C40116000C00D4FFFC011602B800860004
230	 9C	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xA0FFFE00BAFFFF00D4000C011602C40116000C00D4FFFC011602B800860004
- stack 0: 0xF0
231	 9E	SHR		 	 
- stack 1: 0x434
- stack 0: 0xA0
232	 9F	JUMP		 	 
- stack 0: 0x434
233	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x434
234	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
235	 A2	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xA0FFFE00BAFFFF00D4000C011602C40116000C00D4FFFC011602B800860004
236	 A3	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xA0FFFE00BAFFFF00D4000C011602C40116000C00D4FFFC011602B800860004
- stack 0: 0xE0
237	 A5	SHR		 	 
- stack 1: 0x434
- stack 0: 0xA0FFFE
238	 A6	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xA0FFFE
- stack 0: 0xFFFF
239	 A9	AND		 	 
- stack 1: 0x434
- stack 0: 0xFFFE
240	 AA	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0xFFFE
- stack 0: 0x1
241	 AC	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
242	 AD	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x20
243	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x434
244	 B1	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
245	 B3	ADD		 	 
- stack 0: 0x438
246	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
247	 B5	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xBAFFFF00D4000C011602C40116000C00D4FFFC011602B80086000400A00000
248	 B6	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xBAFFFF00D4000C011602C40116000C00D4FFFC011602B80086000400A00000
- stack 0: 0xF0
249	 B8	SHR		 	 
- stack 1: 0x438
- stack 0: 0xBA
250	 B9	JUMP		 	 
- stack 0: 0x438
251	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x438
252	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
253	 BC	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xBAFFFF00D4000C011602C40116000C00D4FFFC011602B80086000400A00000
254	 BD	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xBAFFFF00D4000C011602C40116000C00D4FFFC011602B80086000400A00000
- stack 0: 0xE0
255	 BF	SHR		 	 
- stack 1: 0x438
- stack 0: 0xBAFFFF
256	 C0	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
257	 C3	AND		 	 
- stack 1: 0x438
- stack 0: 0xFFFF
258	 C4	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0xFFFF
- stack 0: 0x1
259	 C6	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
260	 C7	PUSH2	0040	 	 
- stack 2: 0x438
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
261	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x438
262	 CB	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
263	 CD	ADD		 	 
- stack 0: 0x43C
264	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
265	 CF	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C011602C40116000C00D4FFFC011602B80086000400A0000000BAFFFF
266	 D0	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C011602C40116000C00D4FFFC011602B80086000400A0000000BAFFFF
- stack 0: 0xF0
267	 D2	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xD4
268	 D3	JUMP		 	 
- stack 0: 0x43C
269	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x43C
270	 D5	PUSH2	0040	 	 
- stack 1: 0x43C
- stack 0: 0x40
271	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x43C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
272	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
273	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0xFFFFFFFF
274	 DF	PUSH2	0020	 	 
- stack 2: 0x43C
- stack 1: 0xFFFFFFFF
- stack 0: 0x20
275	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x43C
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
276	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
277	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFE
278	 E9	LT		 	  ;; # bltu
- stack 1: 0x43C
- stack 0: 0x1
279	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0xF2
280	 ED	JUMPI		 	 
- stack 0: 0x43C
281	 F2	JUMPDEST		 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x43C
282	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
283	 F4	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C011602C40116000C00D4FFFC011602B80086000400A0000000BAFFFF
284	 F5	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C011602C40116000C00D4FFFC011602B80086000400A0000000BAFFFF
- stack 0: 0xE0
285	 F7	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C
286	 F8	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
287	 FB	AND		 	 
- stack 1: 0x43C
- stack 0: 0xC
288	 FC	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0xC
- stack 0: 0x1
289	 FE	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0xC
290	 FF	ADD		 	 
- stack 0: 0x448
291	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFF
292	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x448
293	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
294	 107	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC011602B80086000400A0000000BAFFFF00D4000C011602A40116000C
295	 108	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC011602B80086000400A0000000BAFFFF00D4000C011602A40116000C
- stack 0: 0xF0
296	 10A	SHR		 	 
- stack 1: 0x448
- stack 0: 0xD4
297	 10B	JUMP		 	 
- stack 0: 0x448
298	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x448
299	 D5	PUSH2	0040	 	 
- stack 1: 0x448
- stack 0: 0x40
300	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x448
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
301	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
302	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0xFFFFFFFF
303	 DF	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0xFFFFFFFF
- stack 0: 0x20
304	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x448
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
305	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x448
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
306	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x448
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFE
307	 E9	LT		 	  ;; # bltu
- stack 1: 0x448
- stack 0: 0x1
308	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0xF2
309	 ED	JUMPI		 	 
- stack 0: 0x448
310	 F2	JUMPDEST		 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x448
311	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x448
- stack 0: 0x448
312	 F4	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC011602B80086000400A0000000BAFFFF00D4000C011602A40116000C
313	 F5	PUSH1	E0	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC011602B80086000400A0000000BAFFFF00D4000C011602A40116000C
- stack 0: 0xE0
314	 F7	SHR		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC
315	 F8	PUSH2	FFFF	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
316	 FB	AND		 	 
- stack 1: 0x448
- stack 0: 0xFFFC
317	 FC	PUSH1	01	 	 
- stack 2: 0x448
- stack 1: 0xFFFC
- stack 0: 0x1
318	 FE	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
319	 FF	ADD		 	 
- stack 0: 0x444
320	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x444
- stack 0: 0xFFFFFFFF
321	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x444
322	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
323	 107	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x116000C00D4FFFC011602B80086000400A0000000BAFFFF00D4000C011602A4
324	 108	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x116000C00D4FFFC011602B80086000400A0000000BAFFFF00D4000C011602A4
- stack 0: 0xF0
325	 10A	SHR		 	 
- stack 1: 0x444
- stack 0: 0x116
326	 10B	JUMP		 	 
- stack 0: 0x444
327	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2e4(ignore imm)
- stack 0: 0x444
328	 117	PUSH1	00	 	 
- stack 1: 0x444
- stack 0: 0x0
329	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
330	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x444
- stack 0: 0x0
331	 11F	PUSH2	0380	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x380
332	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x3
333	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x444
- stack 2: 0x0
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
334	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x3
335	 129	SUB		 	 
- stack 1: 0x444
- stack 0: 0x3
336	 12A	PUSH2	0132	 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 2: 0x444
- stack 1: 0x3
- stack 0: 0x132
337	 12D	JUMPI		 	 
- stack 0: 0x444
338	 132	JUMPDEST		 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 0: 0x444
339	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
340	 134	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x116000C00D4FFFC011602B80086000400A0000000BAFFFF00D4000C011602A4
341	 135	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0x116000C00D4FFFC011602B80086000400A0000000BAFFFF00D4000C011602A4
- stack 0: 0xE0
342	 137	SHR		 	 
- stack 1: 0x444
- stack 0: 0x116000C
343	 138	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0x116000C
- stack 0: 0xFFFF
344	 13B	AND		 	 
- stack 1: 0x444
- stack 0: 0xC
345	 13C	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0xC
- stack 0: 0x1
346	 13E	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0xC
347	 13F	ADD		 	 
- stack 0: 0x450
348	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x450
- stack 0: 0xFFFFFFFF
349	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x450
350	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
351	 147	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x86000400A0000000BAFFFF00D4000C011602A40116000C00D4FFFC01160298
352	 148	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x86000400A0000000BAFFFF00D4000C011602A40116000C00D4FFFC01160298
- stack 0: 0xF0
353	 14A	SHR		 	 
- stack 1: 0x450
- stack 0: 0x86
354	 14B	JUMP		 	 
- stack 0: 0x450
355	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
356	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
357	 88	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x86000400A0000000BAFFFF00D4000C011602A40116000C00D4FFFC01160298
358	 89	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x86000400A0000000BAFFFF00D4000C011602A40116000C00D4FFFC01160298
- stack 0: 0xE0
359	 8B	SHR		 	 
- stack 1: 0x450
- stack 0: 0x860004
360	 8C	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x860004
- stack 0: 0xFFFF
361	 8F	AND		 	 
- stack 1: 0x450
- stack 0: 0x4
362	 90	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x1
363	 92	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x4
364	 93	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x380
365	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
366	 97	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
367	 99	ADD		 	 
- stack 0: 0x454
368	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
369	 9B	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xA0000000BAFFFF00D4000C011602A40116000C00D4FFFC0116029800860005
370	 9C	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0xA0000000BAFFFF00D4000C011602A40116000C00D4FFFC0116029800860005
- stack 0: 0xF0
371	 9E	SHR		 	 
- stack 1: 0x454
- stack 0: 0xA0
372	 9F	JUMP		 	 
- stack 0: 0x454
373	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x454
374	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
375	 A2	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xA0000000BAFFFF00D4000C011602A40116000C00D4FFFC0116029800860005
376	 A3	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0xA0000000BAFFFF00D4000C011602A40116000C00D4FFFC0116029800860005
- stack 0: 0xE0
377	 A5	SHR		 	 
- stack 1: 0x454
- stack 0: 0xA00000
378	 A6	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0xA00000
- stack 0: 0xFFFF
379	 A9	AND		 	 
- stack 1: 0x454
- stack 0: 0x0
380	 AA	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0x0
- stack 0: 0x1
381	 AC	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0x0
382	 AD	PUSH2	0020	 	 
- stack 2: 0x454
- stack 1: 0x0
- stack 0: 0x20
383	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x454
384	 B1	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
385	 B3	ADD		 	 
- stack 0: 0x458
386	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
387	 B5	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xBAFFFF00D4000C011602A40116000C00D4FFFC011602980086000500A00001
388	 B6	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0xBAFFFF00D4000C011602A40116000C00D4FFFC011602980086000500A00001
- stack 0: 0xF0
389	 B8	SHR		 	 
- stack 1: 0x458
- stack 0: 0xBA
390	 B9	JUMP		 	 
- stack 0: 0x458
391	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x458
392	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
393	 BC	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xBAFFFF00D4000C011602A40116000C00D4FFFC011602980086000500A00001
394	 BD	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0xBAFFFF00D4000C011602A40116000C00D4FFFC011602980086000500A00001
- stack 0: 0xE0
395	 BF	SHR		 	 
- stack 1: 0x458
- stack 0: 0xBAFFFF
396	 C0	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
397	 C3	AND		 	 
- stack 1: 0x458
- stack 0: 0xFFFF
398	 C4	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0xFFFF
- stack 0: 0x1
399	 C6	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
400	 C7	PUSH2	0040	 	 
- stack 2: 0x458
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
401	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x458
402	 CB	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
403	 CD	ADD		 	 
- stack 0: 0x45C
404	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
405	 CF	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C011602A40116000C00D4FFFC011602980086000500A0000100BA0000
406	 D0	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C011602A40116000C00D4FFFC011602980086000500A0000100BA0000
- stack 0: 0xF0
407	 D2	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xD4
408	 D3	JUMP		 	 
- stack 0: 0x45C
409	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x45C
410	 D5	PUSH2	0040	 	 
- stack 1: 0x45C
- stack 0: 0x40
411	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x45C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
412	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
413	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x45C
- stack 0: 0xFFFFFFFF
414	 DF	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFF
- stack 0: 0x20
415	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x45C
- stack 1: 0xFFFFFFFF
- stack 0: 0x0
416	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x45C
- stack 2: 0xFFFFFFFF
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
417	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x45C
- stack 1: 0xFFFFFFFF
- stack 0: 0x0
418	 E9	LT		 	  ;; # bltu
- stack 1: 0x45C
- stack 0: 0x1
419	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x45C
- stack 1: 0x1
- stack 0: 0xF2
420	 ED	JUMPI		 	 
- stack 0: 0x45C
421	 F2	JUMPDEST		 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x45C
422	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
423	 F4	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C011602A40116000C00D4FFFC011602980086000500A0000100BA0000
424	 F5	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C011602A40116000C00D4FFFC011602980086000500A0000100BA0000
- stack 0: 0xE0
425	 F7	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C
426	 F8	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
427	 FB	AND		 	 
- stack 1: 0x45C
- stack 0: 0xC
428	 FC	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0xC
- stack 0: 0x1
429	 FE	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0xC
430	 FF	ADD		 	 
- stack 0: 0x468
431	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFF
432	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x468
433	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
434	 107	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC011602980086000500A0000100BA000000D400080116000801160280
435	 108	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC011602980086000500A0000100BA000000D400080116000801160280
- stack 0: 0xF0
436	 10A	SHR		 	 
- stack 1: 0x468
- stack 0: 0xD4
437	 10B	JUMP		 	 
- stack 0: 0x468
438	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x468
439	 D5	PUSH2	0040	 	 
- stack 1: 0x468
- stack 0: 0x40
440	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
441	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
442	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x468
- stack 0: 0xFFFFFFFF
443	 DF	PUSH2	0020	 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFF
- stack 0: 0x20
444	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x468
- stack 1: 0xFFFFFFFF
- stack 0: 0x0
445	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x468
- stack 2: 0xFFFFFFFF
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
446	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x468
- stack 1: 0xFFFFFFFF
- stack 0: 0x0
447	 E9	LT		 	  ;; # bltu
- stack 1: 0x468
- stack 0: 0x1
448	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x468
- stack 1: 0x1
- stack 0: 0xF2
449	 ED	JUMPI		 	 
- stack 0: 0x468
450	 F2	JUMPDEST		 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x468
451	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
452	 F4	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC011602980086000500A0000100BA000000D400080116000801160280
453	 F5	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC011602980086000500A0000100BA000000D400080116000801160280
- stack 0: 0xE0
454	 F7	SHR		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC
455	 F8	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
456	 FB	AND		 	 
- stack 1: 0x468
- stack 0: 0xFFFC
457	 FC	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0xFFFC
- stack 0: 0x1
458	 FE	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
459	 FF	ADD		 	 
- stack 0: 0x464
460	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x464
- stack 0: 0xFFFFFFFF
461	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x464
462	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
463	 107	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x116000C00D4FFFC011602980086000500A0000100BA000000D4000801160008
464	 108	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x116000C00D4FFFC011602980086000500A0000100BA000000D4000801160008
- stack 0: 0xF0
465	 10A	SHR		 	 
- stack 1: 0x464
- stack 0: 0x116
466	 10B	JUMP		 	 
- stack 0: 0x464
467	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2e4(ignore imm)
- stack 0: 0x464
468	 117	PUSH1	00	 	 
- stack 1: 0x464
- stack 0: 0x0
469	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
470	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x464
- stack 0: 0x0
471	 11F	PUSH2	0380	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x380
472	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x4
473	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x464
- stack 2: 0x0
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
474	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x4
475	 129	SUB		 	 
- stack 1: 0x464
- stack 0: 0x4
476	 12A	PUSH2	0132	 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 2: 0x464
- stack 1: 0x4
- stack 0: 0x132
477	 12D	JUMPI		 	 
- stack 0: 0x464
478	 132	JUMPDEST		 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 0: 0x464
479	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
480	 134	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x116000C00D4FFFC011602980086000500A0000100BA000000D4000801160008
481	 135	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0x116000C00D4FFFC011602980086000500A0000100BA000000D4000801160008
- stack 0: 0xE0
482	 137	SHR		 	 
- stack 1: 0x464
- stack 0: 0x116000C
483	 138	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0x116000C
- stack 0: 0xFFFF
484	 13B	AND		 	 
- stack 1: 0x464
- stack 0: 0xC
485	 13C	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xC
- stack 0: 0x1
486	 13E	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xC
487	 13F	ADD		 	 
- stack 0: 0x470
488	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x470
- stack 0: 0xFFFFFFFF
489	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x470
490	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
491	 147	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x86000500A0000100BA000000D40008011600080116028000D4FFFC00860006
492	 148	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x86000500A0000100BA000000D40008011600080116028000D4FFFC00860006
- stack 0: 0xF0
493	 14A	SHR		 	 
- stack 1: 0x470
- stack 0: 0x86
494	 14B	JUMP		 	 
- stack 0: 0x470
495	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x470
496	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
497	 88	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x86000500A0000100BA000000D40008011600080116028000D4FFFC00860006
498	 89	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x86000500A0000100BA000000D40008011600080116028000D4FFFC00860006
- stack 0: 0xE0
499	 8B	SHR		 	 
- stack 1: 0x470
- stack 0: 0x860005
500	 8C	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x860005
- stack 0: 0xFFFF
501	 8F	AND		 	 
- stack 1: 0x470
- stack 0: 0x5
502	 90	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x1
503	 92	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0x5
504	 93	PUSH2	0380	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x380
505	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x470
506	 97	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
507	 99	ADD		 	 
- stack 0: 0x474
508	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
509	 9B	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000100BA000000D40008011600080116028000D4FFFC0086000600A0FFFF
510	 9C	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0xA0000100BA000000D40008011600080116028000D4FFFC0086000600A0FFFF
- stack 0: 0xF0
511	 9E	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA0
512	 9F	JUMP		 	 
- stack 0: 0x474
513	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x474
514	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
515	 A2	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000100BA000000D40008011600080116028000D4FFFC0086000600A0FFFF
516	 A3	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0xA0000100BA000000D40008011600080116028000D4FFFC0086000600A0FFFF
- stack 0: 0xE0
517	 A5	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA00001
518	 A6	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0xA00001
- stack 0: 0xFFFF
519	 A9	AND		 	 
- stack 1: 0x474
- stack 0: 0x1
520	 AA	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x1
- stack 0: 0x1
521	 AC	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x1
522	 AD	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0x1
- stack 0: 0x20
523	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x474
524	 B1	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
525	 B3	ADD		 	 
- stack 0: 0x478
526	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
527	 B5	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBA000000D40008011600080116028000D4FFFC0086000600A0FFFF00BAFFFE
528	 B6	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0xBA000000D40008011600080116028000D4FFFC0086000600A0FFFF00BAFFFE
- stack 0: 0xF0
529	 B8	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBA
530	 B9	JUMP		 	 
- stack 0: 0x478
531	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x478
532	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
533	 BC	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBA000000D40008011600080116028000D4FFFC0086000600A0FFFF00BAFFFE
534	 BD	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0xBA000000D40008011600080116028000D4FFFC0086000600A0FFFF00BAFFFE
- stack 0: 0xE0
535	 BF	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBA0000
536	 C0	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0xBA0000
- stack 0: 0xFFFF
537	 C3	AND		 	 
- stack 1: 0x478
- stack 0: 0x0
538	 C4	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x1
539	 C6	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0x0
540	 C7	PUSH2	0040	 	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x40
541	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x478
542	 CB	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
543	 CD	ADD		 	 
- stack 0: 0x47C
544	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
545	 CF	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xD40008011600080116028000D4FFFC0086000600A0FFFF00BAFFFE00D40008
546	 D0	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0xD40008011600080116028000D4FFFC0086000600A0FFFF00BAFFFE00D40008
- stack 0: 0xF0
547	 D2	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xD4
548	 D3	JUMP		 	 
- stack 0: 0x47C
549	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x47C
550	 D5	PUSH2	0040	 	 
- stack 1: 0x47C
- stack 0: 0x40
551	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x47C
- stack 0: 0x0
552	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
553	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x47C
- stack 0: 0x0
554	 DF	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x20
555	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x1
556	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x47C
- stack 2: 0x0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
557	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x1
558	 E9	LT		 	  ;; # bltu
- stack 1: 0x47C
- stack 0: 0x0
559	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0xF2
560	 ED	JUMPI		 	 
- stack 0: 0x47C
561	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x47C
- stack 0: 0x10C
562	 F1	JUMP		 	 
- stack 0: 0x47C
563	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x47C
564	 10D	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
565	 10F	ADD		 	 
- stack 0: 0x480
566	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
567	 111	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x11600080116028000D4FFFC0086000600A0FFFF00BAFFFE00D4000801160008
568	 112	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x11600080116028000D4FFFC0086000600A0FFFF00BAFFFE00D4000801160008
- stack 0: 0xF0
569	 114	SHR		 	 
- stack 1: 0x480
- stack 0: 0x116
570	 115	JUMP		 	 
- stack 0: 0x480
571	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2e4(ignore imm)
- stack 0: 0x480
572	 117	PUSH1	00	 	 
- stack 1: 0x480
- stack 0: 0x0
573	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
574	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x480
- stack 0: 0x0
575	 11F	PUSH2	0380	 	 
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0x380
576	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0x5
577	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x480
- stack 2: 0x0
- stack 1: 0x5
- stack 0: 0xFFFFFFFF
578	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0x5
579	 129	SUB		 	 
- stack 1: 0x480
- stack 0: 0x5
580	 12A	PUSH2	0132	 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 2: 0x480
- stack 1: 0x5
- stack 0: 0x132
581	 12D	JUMPI		 	 
- stack 0: 0x480
582	 132	JUMPDEST		 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 0: 0x480
583	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
584	 134	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x11600080116028000D4FFFC0086000600A0FFFF00BAFFFE00D4000801160008
585	 135	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x11600080116028000D4FFFC0086000600A0FFFF00BAFFFE00D4000801160008
- stack 0: 0xE0
586	 137	SHR		 	 
- stack 1: 0x480
- stack 0: 0x1160008
587	 138	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x1160008
- stack 0: 0xFFFF
588	 13B	AND		 	 
- stack 1: 0x480
- stack 0: 0x8
589	 13C	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0x8
- stack 0: 0x1
590	 13E	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x8
591	 13F	ADD		 	 
- stack 0: 0x488
592	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x488
- stack 0: 0xFFFFFFFF
593	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x488
594	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
595	 147	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xD4FFFC0086000600A0FFFF00BAFFFE00D40008011600080116026400D4FFFC
596	 148	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0xD4FFFC0086000600A0FFFF00BAFFFE00D40008011600080116026400D4FFFC
- stack 0: 0xF0
597	 14A	SHR		 	 
- stack 1: 0x488
- stack 0: 0xD4
598	 14B	JUMP		 	 
- stack 0: 0x488
599	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x488
600	 D5	PUSH2	0040	 	 
- stack 1: 0x488
- stack 0: 0x40
601	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x488
- stack 0: 0x0
602	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
603	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x488
- stack 0: 0x0
604	 DF	PUSH2	0020	 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x20
605	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x1
606	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x488
- stack 2: 0x0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
607	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x1
608	 E9	LT		 	  ;; # bltu
- stack 1: 0x488
- stack 0: 0x0
609	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0xF2
610	 ED	JUMPI		 	 
- stack 0: 0x488
611	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x488
- stack 0: 0x10C
612	 F1	JUMP		 	 
- stack 0: 0x488
613	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x488
614	 10D	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
615	 10F	ADD		 	 
- stack 0: 0x48C
616	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
617	 111	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x86000600A0FFFF00BAFFFE00D40008011600080116026400D4FFFC00860007
618	 112	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x86000600A0FFFF00BAFFFE00D40008011600080116026400D4FFFC00860007
- stack 0: 0xF0
619	 114	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x86
620	 115	JUMP		 	 
- stack 0: 0x48C
621	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x48C
622	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
623	 88	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x86000600A0FFFF00BAFFFE00D40008011600080116026400D4FFFC00860007
624	 89	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0x86000600A0FFFF00BAFFFE00D40008011600080116026400D4FFFC00860007
- stack 0: 0xE0
625	 8B	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x860006
626	 8C	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0x860006
- stack 0: 0xFFFF
627	 8F	AND		 	 
- stack 1: 0x48C
- stack 0: 0x6
628	 90	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0x6
- stack 0: 0x1
629	 92	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0x6
630	 93	PUSH2	0380	 	 
- stack 2: 0x48C
- stack 1: 0x6
- stack 0: 0x380
631	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x48C
632	 97	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
633	 99	ADD		 	 
- stack 0: 0x490
634	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
635	 9B	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xA0FFFF00BAFFFE00D40008011600080116026400D4FFFC0086000700A0FFFF
636	 9C	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xA0FFFF00BAFFFE00D40008011600080116026400D4FFFC0086000700A0FFFF
- stack 0: 0xF0
637	 9E	SHR		 	 
- stack 1: 0x490
- stack 0: 0xA0
638	 9F	JUMP		 	 
- stack 0: 0x490
639	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x490
640	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
641	 A2	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xA0FFFF00BAFFFE00D40008011600080116026400D4FFFC0086000700A0FFFF
642	 A3	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0xA0FFFF00BAFFFE00D40008011600080116026400D4FFFC0086000700A0FFFF
- stack 0: 0xE0
643	 A5	SHR		 	 
- stack 1: 0x490
- stack 0: 0xA0FFFF
644	 A6	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
645	 A9	AND		 	 
- stack 1: 0x490
- stack 0: 0xFFFF
646	 AA	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0xFFFF
- stack 0: 0x1
647	 AC	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
648	 AD	PUSH2	0020	 	 
- stack 2: 0x490
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
649	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x490
650	 B1	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
651	 B3	ADD		 	 
- stack 0: 0x494
652	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
653	 B5	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xBAFFFE00D40008011600080116026400D4FFFC0086000700A0FFFF00BA0000
654	 B6	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xBAFFFE00D40008011600080116026400D4FFFC0086000700A0FFFF00BA0000
- stack 0: 0xF0
655	 B8	SHR		 	 
- stack 1: 0x494
- stack 0: 0xBA
656	 B9	JUMP		 	 
- stack 0: 0x494
657	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x494
658	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
659	 BC	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xBAFFFE00D40008011600080116026400D4FFFC0086000700A0FFFF00BA0000
660	 BD	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0xBAFFFE00D40008011600080116026400D4FFFC0086000700A0FFFF00BA0000
- stack 0: 0xE0
661	 BF	SHR		 	 
- stack 1: 0x494
- stack 0: 0xBAFFFE
662	 C0	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0xBAFFFE
- stack 0: 0xFFFF
663	 C3	AND		 	 
- stack 1: 0x494
- stack 0: 0xFFFE
664	 C4	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0xFFFE
- stack 0: 0x1
665	 C6	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
666	 C7	PUSH2	0040	 	 
- stack 2: 0x494
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x40
667	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x494
668	 CB	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
669	 CD	ADD		 	 
- stack 0: 0x498
670	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
671	 CF	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xD40008011600080116026400D4FFFC0086000700A0FFFF00BA000000D40008
672	 D0	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xD40008011600080116026400D4FFFC0086000700A0FFFF00BA000000D40008
- stack 0: 0xF0
673	 D2	SHR		 	 
- stack 1: 0x498
- stack 0: 0xD4
674	 D3	JUMP		 	 
- stack 0: 0x498
675	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x498
676	 D5	PUSH2	0040	 	 
- stack 1: 0x498
- stack 0: 0x40
677	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x498
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
678	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x498
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
679	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x498
- stack 0: 0xFFFFFFFE
680	 DF	PUSH2	0020	 	 
- stack 2: 0x498
- stack 1: 0xFFFFFFFE
- stack 0: 0x20
681	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x498
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
682	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x498
- stack 2: 0xFFFFFFFE
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
683	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x498
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFF
684	 E9	LT		 	  ;; # bltu
- stack 1: 0x498
- stack 0: 0x0
685	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0xF2
686	 ED	JUMPI		 	 
- stack 0: 0x498
687	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x498
- stack 0: 0x10C
688	 F1	JUMP		 	 
- stack 0: 0x498
689	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x498
690	 10D	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
691	 10F	ADD		 	 
- stack 0: 0x49C
692	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
693	 111	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x11600080116026400D4FFFC0086000700A0FFFF00BA000000D4000801160008
694	 112	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x11600080116026400D4FFFC0086000700A0FFFF00BA000000D4000801160008
- stack 0: 0xF0
695	 114	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x116
696	 115	JUMP		 	 
- stack 0: 0x49C
697	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2e4(ignore imm)
- stack 0: 0x49C
698	 117	PUSH1	00	 	 
- stack 1: 0x49C
- stack 0: 0x0
699	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
700	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0x0
701	 11F	PUSH2	0380	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x380
702	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x6
703	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x49C
- stack 2: 0x0
- stack 1: 0x6
- stack 0: 0xFFFFFFFF
704	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x6
705	 129	SUB		 	 
- stack 1: 0x49C
- stack 0: 0x6
706	 12A	PUSH2	0132	 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 2: 0x49C
- stack 1: 0x6
- stack 0: 0x132
707	 12D	JUMPI		 	 
- stack 0: 0x49C
708	 132	JUMPDEST		 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 0: 0x49C
709	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x49C
- stack 0: 0x49C
710	 134	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x11600080116026400D4FFFC0086000700A0FFFF00BA000000D4000801160008
711	 135	PUSH1	E0	 	 
- stack 2: 0x49C
- stack 1: 0x11600080116026400D4FFFC0086000700A0FFFF00BA000000D4000801160008
- stack 0: 0xE0
712	 137	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x1160008
713	 138	PUSH2	FFFF	 	 
- stack 2: 0x49C
- stack 1: 0x1160008
- stack 0: 0xFFFF
714	 13B	AND		 	 
- stack 1: 0x49C
- stack 0: 0x8
715	 13C	PUSH1	01	 	 
- stack 2: 0x49C
- stack 1: 0x8
- stack 0: 0x1
716	 13E	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0x8
717	 13F	ADD		 	 
- stack 0: 0x4A4
718	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFF
719	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4A4
720	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
721	 147	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xD4FFFC0086000700A0FFFF00BA000000D40008011600080116024800D4FFFC
722	 148	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0xD4FFFC0086000700A0FFFF00BA000000D40008011600080116024800D4FFFC
- stack 0: 0xF0
723	 14A	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xD4
724	 14B	JUMP		 	 
- stack 0: 0x4A4
725	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x4A4
726	 D5	PUSH2	0040	 	 
- stack 1: 0x4A4
- stack 0: 0x40
727	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
728	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
729	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFE
730	 DF	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFE
- stack 0: 0x20
731	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
732	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4A4
- stack 2: 0xFFFFFFFE
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
733	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFF
734	 E9	LT		 	  ;; # bltu
- stack 1: 0x4A4
- stack 0: 0x0
735	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x4A4
- stack 1: 0x0
- stack 0: 0xF2
736	 ED	JUMPI		 	 
- stack 0: 0x4A4
737	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x4A4
- stack 0: 0x10C
738	 F1	JUMP		 	 
- stack 0: 0x4A4
739	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x4A4
740	 10D	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
741	 10F	ADD		 	 
- stack 0: 0x4A8
742	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
743	 111	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x86000700A0FFFF00BA000000D40008011600080116024800D4FFFC00860008
744	 112	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x86000700A0FFFF00BA000000D40008011600080116024800D4FFFC00860008
- stack 0: 0xF0
745	 114	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x86
746	 115	JUMP		 	 
- stack 0: 0x4A8
747	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4A8
748	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
749	 88	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x86000700A0FFFF00BA000000D40008011600080116024800D4FFFC00860008
750	 89	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0x86000700A0FFFF00BA000000D40008011600080116024800D4FFFC00860008
- stack 0: 0xE0
751	 8B	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x860007
752	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x860007
- stack 0: 0xFFFF
753	 8F	AND		 	 
- stack 1: 0x4A8
- stack 0: 0x7
754	 90	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0x7
- stack 0: 0x1
755	 92	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0x7
756	 93	PUSH2	0380	 	 
- stack 2: 0x4A8
- stack 1: 0x7
- stack 0: 0x380
757	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4A8
758	 97	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
759	 99	ADD		 	 
- stack 0: 0x4AC
760	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
761	 9B	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xA0FFFF00BA000000D40008011600080116024800D4FFFC0086000801560000
762	 9C	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xA0FFFF00BA000000D40008011600080116024800D4FFFC0086000801560000
- stack 0: 0xF0
763	 9E	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xA0
764	 9F	JUMP		 	 
- stack 0: 0x4AC
765	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4AC
766	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
767	 A2	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xA0FFFF00BA000000D40008011600080116024800D4FFFC0086000801560000
768	 A3	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0xA0FFFF00BA000000D40008011600080116024800D4FFFC0086000801560000
- stack 0: 0xE0
769	 A5	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xA0FFFF
770	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
771	 A9	AND		 	 
- stack 1: 0x4AC
- stack 0: 0xFFFF
772	 AA	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFF
- stack 0: 0x1
773	 AC	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
774	 AD	PUSH2	0020	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
775	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4AC
776	 B1	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
777	 B3	ADD		 	 
- stack 0: 0x4B0
778	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
779	 B5	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xBA000000D40008011600080116024800D4FFFC008600080156000001690000
780	 B6	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0xBA000000D40008011600080116024800D4FFFC008600080156000001690000
- stack 0: 0xF0
781	 B8	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xBA
782	 B9	JUMP		 	 
- stack 0: 0x4B0
783	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x4B0
784	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
785	 BC	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xBA000000D40008011600080116024800D4FFFC008600080156000001690000
786	 BD	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0xBA000000D40008011600080116024800D4FFFC008600080156000001690000
- stack 0: 0xE0
787	 BF	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xBA0000
788	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0xBA0000
- stack 0: 0xFFFF
789	 C3	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x0
790	 C4	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x0
- stack 0: 0x1
791	 C6	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x0
792	 C7	PUSH2	0040	 	 
- stack 2: 0x4B0
- stack 1: 0x0
- stack 0: 0x40
793	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4B0
794	 CB	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
795	 CD	ADD		 	 
- stack 0: 0x4B4
796	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
797	 CF	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0xD40008011600080116024800D4FFFC008600080156000001690000017CFFFF
798	 D0	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0xD40008011600080116024800D4FFFC008600080156000001690000017CFFFF
- stack 0: 0xF0
799	 D2	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0xD4
800	 D3	JUMP		 	 
- stack 0: 0x4B4
801	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x4B4
802	 D5	PUSH2	0040	 	 
- stack 1: 0x4B4
- stack 0: 0x40
803	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4B4
- stack 0: 0x0
804	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
805	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B4
- stack 0: 0x0
806	 DF	PUSH2	0020	 	 
- stack 2: 0x4B4
- stack 1: 0x0
- stack 0: 0x20
807	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4B4
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
808	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B4
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
809	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
810	 E9	LT		 	  ;; # bltu
- stack 1: 0x4B4
- stack 0: 0x0
811	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x4B4
- stack 1: 0x0
- stack 0: 0xF2
812	 ED	JUMPI		 	 
- stack 0: 0x4B4
813	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x4B4
- stack 0: 0x10C
814	 F1	JUMP		 	 
- stack 0: 0x4B4
815	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x4B4
816	 10D	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
817	 10F	ADD		 	 
- stack 0: 0x4B8
818	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
819	 111	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x11600080116024800D4FFFC008600080156000001690000017CFFFF00D40008
820	 112	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x11600080116024800D4FFFC008600080156000001690000017CFFFF00D40008
- stack 0: 0xF0
821	 114	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x116
822	 115	JUMP		 	 
- stack 0: 0x4B8
823	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2e4(ignore imm)
- stack 0: 0x4B8
824	 117	PUSH1	00	 	 
- stack 1: 0x4B8
- stack 0: 0x0
825	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
826	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B8
- stack 0: 0x0
827	 11F	PUSH2	0380	 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x380
828	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x7
829	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B8
- stack 2: 0x0
- stack 1: 0x7
- stack 0: 0xFFFFFFFF
830	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x7
831	 129	SUB		 	 
- stack 1: 0x4B8
- stack 0: 0x7
832	 12A	PUSH2	0132	 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 2: 0x4B8
- stack 1: 0x7
- stack 0: 0x132
833	 12D	JUMPI		 	 
- stack 0: 0x4B8
834	 132	JUMPDEST		 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 0: 0x4B8
835	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
836	 134	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x11600080116024800D4FFFC008600080156000001690000017CFFFF00D40008
837	 135	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0x11600080116024800D4FFFC008600080156000001690000017CFFFF00D40008
- stack 0: 0xE0
838	 137	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x1160008
839	 138	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x1160008
- stack 0: 0xFFFF
840	 13B	AND		 	 
- stack 1: 0x4B8
- stack 0: 0x8
841	 13C	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0x8
- stack 0: 0x1
842	 13E	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0x8
843	 13F	ADD		 	 
- stack 0: 0x4C0
844	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFF
845	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4C0
846	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
847	 147	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xD4FFFC008600080156000001690000017CFFFF00D400080116000801160228
848	 148	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0xD4FFFC008600080156000001690000017CFFFF00D400080116000801160228
- stack 0: 0xF0
849	 14A	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xD4
850	 14B	JUMP		 	 
- stack 0: 0x4C0
851	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x4C0
852	 D5	PUSH2	0040	 	 
- stack 1: 0x4C0
- stack 0: 0x40
853	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4C0
- stack 0: 0x0
854	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
855	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C0
- stack 0: 0x0
856	 DF	PUSH2	0020	 	 
- stack 2: 0x4C0
- stack 1: 0x0
- stack 0: 0x20
857	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C0
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
858	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C0
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
859	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
860	 E9	LT		 	  ;; # bltu
- stack 1: 0x4C0
- stack 0: 0x0
861	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x4C0
- stack 1: 0x0
- stack 0: 0xF2
862	 ED	JUMPI		 	 
- stack 0: 0x4C0
863	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x4C0
- stack 0: 0x10C
864	 F1	JUMP		 	 
- stack 0: 0x4C0
865	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x4C0
866	 10D	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
867	 10F	ADD		 	 
- stack 0: 0x4C4
868	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
869	 111	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x8600080156000001690000017CFFFF00D40008011600080116022800D4FFFC
870	 112	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x8600080156000001690000017CFFFF00D40008011600080116022800D4FFFC
- stack 0: 0xF0
871	 114	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x86
872	 115	JUMP		 	 
- stack 0: 0x4C4
873	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C4
874	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
875	 88	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x8600080156000001690000017CFFFF00D40008011600080116022800D4FFFC
876	 89	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0x8600080156000001690000017CFFFF00D40008011600080116022800D4FFFC
- stack 0: 0xE0
877	 8B	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x860008
878	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x860008
- stack 0: 0xFFFF
879	 8F	AND		 	 
- stack 1: 0x4C4
- stack 0: 0x8
880	 90	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0x8
- stack 0: 0x1
881	 92	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0x8
882	 93	PUSH2	0380	 	 
- stack 2: 0x4C4
- stack 1: 0x8
- stack 0: 0x380
883	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C4
884	 97	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
885	 99	ADD		 	 
- stack 0: 0x4C8
886	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
887	 9B	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x156000001690000017CFFFF00D40008011600080116022800D4FFFC00860009
888	 9C	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x156000001690000017CFFFF00D40008011600080116022800D4FFFC00860009
- stack 0: 0xF0
889	 9E	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x156
890	 9F	JUMP		 	 
- stack 0: 0x4C8
891	 156	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4C8
892	 157	PUSH4	80000000	 	 
- stack 1: 0x4C8
- stack 0: 0x80000000
893	 15C	PUSH2	0020	 	 
- stack 2: 0x4C8
- stack 1: 0x80000000
- stack 0: 0x20
894	 15F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C8
895	 160	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
896	 162	ADD		 	 
- stack 0: 0x4CC
897	 163	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
898	 164	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x1690000017CFFFF00D40008011600080116022800D4FFFC00860009019B0000
899	 165	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x1690000017CFFFF00D40008011600080116022800D4FFFC00860009019B0000
- stack 0: 0xF0
900	 167	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x169
901	 168	JUMP		 	 
- stack 0: 0x4CC
902	 169	JUMPDEST		 ;; __riscvimpl_LUI_80000137	  ;; # instr: lui sp,0x80000(ignore imm)
- stack 0: 0x4CC
903	 16A	PUSH4	80000000	 	 
- stack 1: 0x4CC
- stack 0: 0x80000000
904	 16F	PUSH2	0040	 	 
- stack 2: 0x4CC
- stack 1: 0x80000000
- stack 0: 0x40
905	 172	MSTORE		 	  ;; # store to x2
- stack 0: 0x4CC
906	 173	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
907	 175	ADD		 	 
- stack 0: 0x4D0
908	 176	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
909	 177	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x17CFFFF00D40008011600080116022800D4FFFC00860009019B000001B50000
910	 178	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x17CFFFF00D40008011600080116022800D4FFFC00860009019B000001B50000
- stack 0: 0xF0
911	 17A	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x17C
912	 17B	JUMP		 	 
- stack 0: 0x4D0
913	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x4D0
914	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
915	 17E	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x17CFFFF00D40008011600080116022800D4FFFC00860009019B000001B50000
916	 17F	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x17CFFFF00D40008011600080116022800D4FFFC00860009019B000001B50000
- stack 0: 0xE0
917	 181	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x17CFFFF
918	 182	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
919	 185	AND		 	 
- stack 1: 0x4D0
- stack 0: 0xFFFF
920	 186	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFF
- stack 0: 0x1
921	 188	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
922	 189	PUSH2	0040	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
923	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
924	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x4D0
- stack 0: 0x7FFFFFFF
925	 18E	PUSH2	0040	 	 
- stack 2: 0x4D0
- stack 1: 0x7FFFFFFF
- stack 0: 0x40
926	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x4D0
927	 192	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
928	 194	ADD		 	 
- stack 0: 0x4D4
929	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
930	 196	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xD40008011600080116022800D4FFFC00860009019B000001B5000001C80000
931	 197	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0xD40008011600080116022800D4FFFC00860009019B000001B5000001C80000
- stack 0: 0xF0
932	 199	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xD4
933	 19A	JUMP		 	 
- stack 0: 0x4D4
934	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x4D4
935	 D5	PUSH2	0040	 	 
- stack 1: 0x4D4
- stack 0: 0x40
936	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4D4
- stack 0: 0x7FFFFFFF
937	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
938	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D4
- stack 0: 0x7FFFFFFF
939	 DF	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
940	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D4
- stack 1: 0x7FFFFFFF
- stack 0: 0x80000000
941	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D4
- stack 2: 0x7FFFFFFF
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
942	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D4
- stack 1: 0x7FFFFFFF
- stack 0: 0x80000000
943	 E9	LT		 	  ;; # bltu
- stack 1: 0x4D4
- stack 0: 0x0
944	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0xF2
945	 ED	JUMPI		 	 
- stack 0: 0x4D4
946	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x4D4
- stack 0: 0x10C
947	 F1	JUMP		 	 
- stack 0: 0x4D4
948	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x4D4
949	 10D	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
950	 10F	ADD		 	 
- stack 0: 0x4D8
951	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
952	 111	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x11600080116022800D4FFFC00860009019B000001B5000001C80000017CFFFF
953	 112	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x11600080116022800D4FFFC00860009019B000001B5000001C80000017CFFFF
- stack 0: 0xF0
954	 114	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x116
955	 115	JUMP		 	 
- stack 0: 0x4D8
956	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2e4(ignore imm)
- stack 0: 0x4D8
957	 117	PUSH1	00	 	 
- stack 1: 0x4D8
- stack 0: 0x0
958	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
959	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D8
- stack 0: 0x0
960	 11F	PUSH2	0380	 	 
- stack 2: 0x4D8
- stack 1: 0x0
- stack 0: 0x380
961	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x4D8
- stack 1: 0x0
- stack 0: 0x8
962	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D8
- stack 2: 0x0
- stack 1: 0x8
- stack 0: 0xFFFFFFFF
963	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D8
- stack 1: 0x0
- stack 0: 0x8
964	 129	SUB		 	 
- stack 1: 0x4D8
- stack 0: 0x8
965	 12A	PUSH2	0132	 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 2: 0x4D8
- stack 1: 0x8
- stack 0: 0x132
966	 12D	JUMPI		 	 
- stack 0: 0x4D8
967	 132	JUMPDEST		 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 0: 0x4D8
968	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
969	 134	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x11600080116022800D4FFFC00860009019B000001B5000001C80000017CFFFF
970	 135	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0x11600080116022800D4FFFC00860009019B000001B5000001C80000017CFFFF
- stack 0: 0xE0
971	 137	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x1160008
972	 138	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x1160008
- stack 0: 0xFFFF
973	 13B	AND		 	 
- stack 1: 0x4D8
- stack 0: 0x8
974	 13C	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0x8
- stack 0: 0x1
975	 13E	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0x8
976	 13F	ADD		 	 
- stack 0: 0x4E0
977	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4E0
- stack 0: 0xFFFFFFFF
978	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4E0
979	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
980	 147	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xD4FFFC00860009019B000001B5000001C80000017CFFFF00D4020C01DB0001
981	 148	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0xD4FFFC00860009019B000001B5000001C80000017CFFFF00D4020C01DB0001
- stack 0: 0xF0
982	 14A	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xD4
983	 14B	JUMP		 	 
- stack 0: 0x4E0
984	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x4E0
985	 D5	PUSH2	0040	 	 
- stack 1: 0x4E0
- stack 0: 0x40
986	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4E0
- stack 0: 0x7FFFFFFF
987	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
988	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E0
- stack 0: 0x7FFFFFFF
989	 DF	PUSH2	0020	 	 
- stack 2: 0x4E0
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
990	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4E0
- stack 1: 0x7FFFFFFF
- stack 0: 0x80000000
991	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E0
- stack 2: 0x7FFFFFFF
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
992	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E0
- stack 1: 0x7FFFFFFF
- stack 0: 0x80000000
993	 E9	LT		 	  ;; # bltu
- stack 1: 0x4E0
- stack 0: 0x0
994	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0xF2
995	 ED	JUMPI		 	 
- stack 0: 0x4E0
996	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x4E0
- stack 0: 0x10C
997	 F1	JUMP		 	 
- stack 0: 0x4E0
998	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x4E0
999	 10D	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1000	 10F	ADD		 	 
- stack 0: 0x4E4
1001	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1002	 111	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x860009019B000001B5000001C80000017CFFFF00D4020C01DB000101FA0002
1003	 112	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x860009019B000001B5000001C80000017CFFFF00D4020C01DB000101FA0002
- stack 0: 0xF0
1004	 114	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x86
1005	 115	JUMP		 	 
- stack 0: 0x4E4
1006	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E4
1007	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1008	 88	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x860009019B000001B5000001C80000017CFFFF00D4020C01DB000101FA0002
1009	 89	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0x860009019B000001B5000001C80000017CFFFF00D4020C01DB000101FA0002
- stack 0: 0xE0
1010	 8B	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x860009
1011	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x860009
- stack 0: 0xFFFF
1012	 8F	AND		 	 
- stack 1: 0x4E4
- stack 0: 0x9
1013	 90	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0x9
- stack 0: 0x1
1014	 92	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0x9
1015	 93	PUSH2	0380	 	 
- stack 2: 0x4E4
- stack 1: 0x9
- stack 0: 0x380
1016	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E4
1017	 97	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1018	 99	ADD		 	 
- stack 0: 0x4E8
1019	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1020	 9B	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x19B000001B5000001C80000017CFFFF00D4020C01DB000101FA00020214FFE8
1021	 9C	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x19B000001B5000001C80000017CFFFF00D4020C01DB000101FA00020214FFE8
- stack 0: 0xF0
1022	 9E	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x19B
1023	 9F	JUMP		 	 
- stack 0: 0x4E8
1024	 19B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x4E8
1025	 19C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1026	 19D	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x19B000001B5000001C80000017CFFFF00D4020C01DB000101FA00020214FFE8
1027	 19E	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0x19B000001B5000001C80000017CFFFF00D4020C01DB000101FA00020214FFE8
- stack 0: 0xE0
1028	 1A0	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x19B0000
1029	 1A1	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x19B0000
- stack 0: 0xFFFF
1030	 1A4	AND		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1031	 1A5	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x1
1032	 1A7	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1033	 1A8	PUSH2	0080	 	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x80
1034	 1AB	MSTORE		 	  ;; # store to x4
- stack 0: 0x4E8
1035	 1AC	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1036	 1AE	ADD		 	 
- stack 0: 0x4EC
1037	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1038	 1B0	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x1B5000001C80000017CFFFF00D4020C01DB000101FA00020214FFE80086000A
1039	 1B1	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x1B5000001C80000017CFFFF00D4020C01DB000101FA00020214FFE80086000A
- stack 0: 0xF0
1040	 1B3	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x1B5
1041	 1B4	JUMP		 	 
- stack 0: 0x4EC
1042	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x4EC
1043	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x4EC
- stack 0: 0xF0000000
1044	 1BB	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0xF0000000
- stack 0: 0x20
1045	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4EC
1046	 1BF	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1047	 1C1	ADD		 	 
- stack 0: 0x4F0
1048	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1049	 1C3	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x1C80000017CFFFF00D4020C01DB000101FA00020214FFE80086000A019B0000
1050	 1C4	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x1C80000017CFFFF00D4020C01DB000101FA00020214FFE80086000A019B0000
- stack 0: 0xF0
1051	 1C6	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x1C8
1052	 1C7	JUMP		 	 
- stack 0: 0x4F0
1053	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x4F0
1054	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x4F0
- stack 0: 0xF0000000
1055	 1CE	PUSH2	0040	 	 
- stack 2: 0x4F0
- stack 1: 0xF0000000
- stack 0: 0x40
1056	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x4F0
1057	 1D2	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1058	 1D4	ADD		 	 
- stack 0: 0x4F4
1059	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1060	 1D6	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x17CFFFF00D4020C01DB000101FA00020214FFE80086000A019B000001B50000
1061	 1D7	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x17CFFFF00D4020C01DB000101FA00020214FFE80086000A019B000001B50000
- stack 0: 0xF0
1062	 1D9	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x17C
1063	 1DA	JUMP		 	 
- stack 0: 0x4F4
1064	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x4F4
1065	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1066	 17E	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x17CFFFF00D4020C01DB000101FA00020214FFE80086000A019B000001B50000
1067	 17F	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x17CFFFF00D4020C01DB000101FA00020214FFE80086000A019B000001B50000
- stack 0: 0xE0
1068	 181	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x17CFFFF
1069	 182	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
1070	 185	AND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFF
1071	 186	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFF
- stack 0: 0x1
1072	 188	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1073	 189	PUSH2	0040	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1074	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
1075	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x4F4
- stack 0: 0xEFFFFFFF
1076	 18E	PUSH2	0040	 	 
- stack 2: 0x4F4
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
1077	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x4F4
1078	 192	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1079	 194	ADD		 	 
- stack 0: 0x4F8
1080	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1081	 196	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xD4020C01DB000101FA00020214FFE80086000A019B000001B5000001C80000
1082	 197	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0xD4020C01DB000101FA00020214FFE80086000A019B000001B5000001C80000
- stack 0: 0xF0
1083	 199	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xD4
1084	 19A	JUMP		 	 
- stack 0: 0x4F8
1085	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x4F8
1086	 D5	PUSH2	0040	 	 
- stack 1: 0x4F8
- stack 0: 0x40
1087	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4F8
- stack 0: 0xEFFFFFFF
1088	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F8
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
1089	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F8
- stack 0: 0xEFFFFFFF
1090	 DF	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
1091	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F8
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
1092	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4F8
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
1093	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4F8
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
1094	 E9	LT		 	  ;; # bltu
- stack 1: 0x4F8
- stack 0: 0x0
1095	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x4F8
- stack 1: 0x0
- stack 0: 0xF2
1096	 ED	JUMPI		 	 
- stack 0: 0x4F8
1097	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x4F8
- stack 0: 0x10C
1098	 F1	JUMP		 	 
- stack 0: 0x4F8
1099	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x4F8
1100	 10D	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1101	 10F	ADD		 	 
- stack 0: 0x4FC
1102	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1103	 111	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1DB000101FA00020214FFE80086000A019B000001B5000001C80000017CFFFF
1104	 112	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x1DB000101FA00020214FFE80086000A019B000001B5000001C80000017CFFFF
- stack 0: 0xF0
1105	 114	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1DB
1106	 115	JUMP		 	 
- stack 0: 0x4FC
1107	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4FC
1108	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1109	 1DD	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1DB000101FA00020214FFE80086000A019B000001B5000001C80000017CFFFF
1110	 1DE	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x1DB000101FA00020214FFE80086000A019B000001B5000001C80000017CFFFF
- stack 0: 0xE0
1111	 1E0	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1DB0001
1112	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
1113	 1E4	AND		 	 
- stack 1: 0x4FC
- stack 0: 0x1
1114	 1E5	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x1
1115	 1E7	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0x1
1116	 1E8	PUSH2	0080	 	 
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x80
1117	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x0
1118	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x4FC
- stack 0: 0x1
1119	 1ED	PUSH2	0080	 	 
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x80
1120	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x4FC
1121	 1F1	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1122	 1F3	ADD		 	 
- stack 0: 0x500
1123	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1124	 1F5	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x1FA00020214FFE80086000A019B000001B5000001C80000017CFFFF02560000
1125	 1F6	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x1FA00020214FFE80086000A019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xF0
1126	 1F8	SHR		 	 
- stack 1: 0x500
- stack 0: 0x1FA
1127	 1F9	JUMP		 	 
- stack 0: 0x500
1128	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x500
1129	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1130	 1FC	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x1FA00020214FFE80086000A019B000001B5000001C80000017CFFFF02560000
1131	 1FD	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x1FA00020214FFE80086000A019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xE0
1132	 1FF	SHR		 	 
- stack 1: 0x500
- stack 0: 0x1FA0002
1133	 200	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
1134	 203	AND		 	 
- stack 1: 0x500
- stack 0: 0x2
1135	 204	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0x2
- stack 0: 0x1
1136	 206	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0x2
1137	 207	PUSH2	00A0	 	 
- stack 2: 0x500
- stack 1: 0x2
- stack 0: 0xA0
1138	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x500
1139	 20B	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1140	 20D	ADD		 	 
- stack 0: 0x504
1141	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1142	 20F	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x214FFE80086000A019B000001B5000001C80000017CFFFF0256000000D401E4
1143	 210	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x214FFE80086000A019B000001B5000001C80000017CFFFF0256000000D401E4
- stack 0: 0xF0
1144	 212	SHR		 	 
- stack 1: 0x504
- stack 0: 0x214
1145	 213	JUMP		 	 
- stack 0: 0x504
1146	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x504
1147	 215	PUSH2	0080	 	 
- stack 1: 0x504
- stack 0: 0x80
1148	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x504
- stack 0: 0x1
1149	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1150	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x504
- stack 0: 0x1
1151	 21F	PUSH2	00A0	 	 
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0xA0
1152	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0x2
1153	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x504
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1154	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0x2
1155	 229	SUB		 	 
- stack 1: 0x504
- stack 0: 0x1
1156	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x504
- stack 1: 0x1
- stack 0: 0x232
1157	 22D	JUMPI		 	 
- stack 0: 0x504
1158	 232	JUMPDEST		 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x504
1159	 233	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1160	 234	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x214FFE80086000A019B000001B5000001C80000017CFFFF0256000000D401E4
1161	 235	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x214FFE80086000A019B000001B5000001C80000017CFFFF0256000000D401E4
- stack 0: 0xE0
1162	 237	SHR		 	 
- stack 1: 0x504
- stack 0: 0x214FFE8
1163	 238	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x214FFE8
- stack 0: 0xFFFF
1164	 23B	AND		 	 
- stack 1: 0x504
- stack 0: 0xFFE8
1165	 23C	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0xFFE8
- stack 0: 0x1
1166	 23E	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
1167	 23F	ADD		 	 
- stack 0: 0x4EC
1168	 240	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFF
1169	 245	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4EC
1170	 246	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1171	 247	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x1B5000001C80000017CFFFF00D4020C01DB000101FA00020214FFE80086000A
1172	 248	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x1B5000001C80000017CFFFF00D4020C01DB000101FA00020214FFE80086000A
- stack 0: 0xF0
1173	 24A	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x1B5
1174	 24B	JUMP		 	 
- stack 0: 0x4EC
1175	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x4EC
1176	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x4EC
- stack 0: 0xF0000000
1177	 1BB	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0xF0000000
- stack 0: 0x20
1178	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4EC
1179	 1BF	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1180	 1C1	ADD		 	 
- stack 0: 0x4F0
1181	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1182	 1C3	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x1C80000017CFFFF00D4020C01DB000101FA00020214FFE80086000A019B0000
1183	 1C4	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x1C80000017CFFFF00D4020C01DB000101FA00020214FFE80086000A019B0000
- stack 0: 0xF0
1184	 1C6	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x1C8
1185	 1C7	JUMP		 	 
- stack 0: 0x4F0
1186	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x4F0
1187	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x4F0
- stack 0: 0xF0000000
1188	 1CE	PUSH2	0040	 	 
- stack 2: 0x4F0
- stack 1: 0xF0000000
- stack 0: 0x40
1189	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x4F0
1190	 1D2	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1191	 1D4	ADD		 	 
- stack 0: 0x4F4
1192	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1193	 1D6	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x17CFFFF00D4020C01DB000101FA00020214FFE80086000A019B000001B50000
1194	 1D7	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x17CFFFF00D4020C01DB000101FA00020214FFE80086000A019B000001B50000
- stack 0: 0xF0
1195	 1D9	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x17C
1196	 1DA	JUMP		 	 
- stack 0: 0x4F4
1197	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x4F4
1198	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1199	 17E	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x17CFFFF00D4020C01DB000101FA00020214FFE80086000A019B000001B50000
1200	 17F	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x17CFFFF00D4020C01DB000101FA00020214FFE80086000A019B000001B50000
- stack 0: 0xE0
1201	 181	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x17CFFFF
1202	 182	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
1203	 185	AND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFF
1204	 186	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFF
- stack 0: 0x1
1205	 188	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1206	 189	PUSH2	0040	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1207	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
1208	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x4F4
- stack 0: 0xEFFFFFFF
1209	 18E	PUSH2	0040	 	 
- stack 2: 0x4F4
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
1210	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x4F4
1211	 192	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1212	 194	ADD		 	 
- stack 0: 0x4F8
1213	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1214	 196	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xD4020C01DB000101FA00020214FFE80086000A019B000001B5000001C80000
1215	 197	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0xD4020C01DB000101FA00020214FFE80086000A019B000001B5000001C80000
- stack 0: 0xF0
1216	 199	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xD4
1217	 19A	JUMP		 	 
- stack 0: 0x4F8
1218	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x4F8
1219	 D5	PUSH2	0040	 	 
- stack 1: 0x4F8
- stack 0: 0x40
1220	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x4F8
- stack 0: 0xEFFFFFFF
1221	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F8
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
1222	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F8
- stack 0: 0xEFFFFFFF
1223	 DF	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
1224	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F8
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
1225	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4F8
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
1226	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4F8
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
1227	 E9	LT		 	  ;; # bltu
- stack 1: 0x4F8
- stack 0: 0x0
1228	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x4F8
- stack 1: 0x0
- stack 0: 0xF2
1229	 ED	JUMPI		 	 
- stack 0: 0x4F8
1230	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x4F8
- stack 0: 0x10C
1231	 F1	JUMP		 	 
- stack 0: 0x4F8
1232	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x4F8
1233	 10D	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1234	 10F	ADD		 	 
- stack 0: 0x4FC
1235	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1236	 111	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1DB000101FA00020214FFE80086000A019B000001B5000001C80000017CFFFF
1237	 112	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x1DB000101FA00020214FFE80086000A019B000001B5000001C80000017CFFFF
- stack 0: 0xF0
1238	 114	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1DB
1239	 115	JUMP		 	 
- stack 0: 0x4FC
1240	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4FC
1241	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1242	 1DD	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1DB000101FA00020214FFE80086000A019B000001B5000001C80000017CFFFF
1243	 1DE	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x1DB000101FA00020214FFE80086000A019B000001B5000001C80000017CFFFF
- stack 0: 0xE0
1244	 1E0	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1DB0001
1245	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
1246	 1E4	AND		 	 
- stack 1: 0x4FC
- stack 0: 0x1
1247	 1E5	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x1
1248	 1E7	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0x1
1249	 1E8	PUSH2	0080	 	 
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x80
1250	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x1
1251	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x4FC
- stack 0: 0x2
1252	 1ED	PUSH2	0080	 	 
- stack 2: 0x4FC
- stack 1: 0x2
- stack 0: 0x80
1253	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x4FC
1254	 1F1	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1255	 1F3	ADD		 	 
- stack 0: 0x500
1256	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1257	 1F5	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x1FA00020214FFE80086000A019B000001B5000001C80000017CFFFF02560000
1258	 1F6	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x1FA00020214FFE80086000A019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xF0
1259	 1F8	SHR		 	 
- stack 1: 0x500
- stack 0: 0x1FA
1260	 1F9	JUMP		 	 
- stack 0: 0x500
1261	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x500
1262	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1263	 1FC	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x1FA00020214FFE80086000A019B000001B5000001C80000017CFFFF02560000
1264	 1FD	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x1FA00020214FFE80086000A019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xE0
1265	 1FF	SHR		 	 
- stack 1: 0x500
- stack 0: 0x1FA0002
1266	 200	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
1267	 203	AND		 	 
- stack 1: 0x500
- stack 0: 0x2
1268	 204	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0x2
- stack 0: 0x1
1269	 206	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0x2
1270	 207	PUSH2	00A0	 	 
- stack 2: 0x500
- stack 1: 0x2
- stack 0: 0xA0
1271	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x500
1272	 20B	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1273	 20D	ADD		 	 
- stack 0: 0x504
1274	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1275	 20F	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x214FFE80086000A019B000001B5000001C80000017CFFFF0256000000D401E4
1276	 210	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x214FFE80086000A019B000001B5000001C80000017CFFFF0256000000D401E4
- stack 0: 0xF0
1277	 212	SHR		 	 
- stack 1: 0x504
- stack 0: 0x214
1278	 213	JUMP		 	 
- stack 0: 0x504
1279	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x504
1280	 215	PUSH2	0080	 	 
- stack 1: 0x504
- stack 0: 0x80
1281	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x504
- stack 0: 0x2
1282	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x504
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1283	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x504
- stack 0: 0x2
1284	 21F	PUSH2	00A0	 	 
- stack 2: 0x504
- stack 1: 0x2
- stack 0: 0xA0
1285	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x504
- stack 1: 0x2
- stack 0: 0x2
1286	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x504
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1287	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x504
- stack 1: 0x2
- stack 0: 0x2
1288	 229	SUB		 	 
- stack 1: 0x504
- stack 0: 0x0
1289	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x232
1290	 22D	JUMPI		 	 
- stack 0: 0x504
1291	 22E	PUSH2	024C	 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 1: 0x504
- stack 0: 0x24C
1292	 231	JUMP		 	 
- stack 0: 0x504
1293	 24C	JUMPDEST		 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x504
1294	 24D	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1295	 24F	ADD		 	 
- stack 0: 0x508
1296	 250	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1297	 251	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x86000A019B000001B5000001C80000017CFFFF0256000000D401E401DB0001
1298	 252	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x86000A019B000001B5000001C80000017CFFFF0256000000D401E401DB0001
- stack 0: 0xF0
1299	 254	SHR		 	 
- stack 1: 0x508
- stack 0: 0x86
1300	 255	JUMP		 	 
- stack 0: 0x508
1301	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x508
1302	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1303	 88	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x86000A019B000001B5000001C80000017CFFFF0256000000D401E401DB0001
1304	 89	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x86000A019B000001B5000001C80000017CFFFF0256000000D401E401DB0001
- stack 0: 0xE0
1305	 8B	SHR		 	 
- stack 1: 0x508
- stack 0: 0x86000A
1306	 8C	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x86000A
- stack 0: 0xFFFF
1307	 8F	AND		 	 
- stack 1: 0x508
- stack 0: 0xA
1308	 90	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xA
- stack 0: 0x1
1309	 92	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xA
1310	 93	PUSH2	0380	 	 
- stack 2: 0x508
- stack 1: 0xA
- stack 0: 0x380
1311	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x508
1312	 97	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1313	 99	ADD		 	 
- stack 0: 0x50C
1314	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1315	 9B	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x19B000001B5000001C80000017CFFFF0256000000D401E401DB000101FA0002
1316	 9C	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x19B000001B5000001C80000017CFFFF0256000000D401E401DB000101FA0002
- stack 0: 0xF0
1317	 9E	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x19B
1318	 9F	JUMP		 	 
- stack 0: 0x50C
1319	 19B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x50C
1320	 19C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1321	 19D	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x19B000001B5000001C80000017CFFFF0256000000D401E401DB000101FA0002
1322	 19E	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0x19B000001B5000001C80000017CFFFF0256000000D401E401DB000101FA0002
- stack 0: 0xE0
1323	 1A0	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x19B0000
1324	 1A1	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0x19B0000
- stack 0: 0xFFFF
1325	 1A4	AND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1326	 1A5	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x1
1327	 1A7	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1328	 1A8	PUSH2	0080	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x80
1329	 1AB	MSTORE		 	  ;; # store to x4
- stack 0: 0x50C
1330	 1AC	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1331	 1AE	ADD		 	 
- stack 0: 0x510
1332	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1333	 1B0	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1B5000001C80000017CFFFF0256000000D401E401DB000101FA00020214FFE4
1334	 1B1	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x1B5000001C80000017CFFFF0256000000D401E401DB000101FA00020214FFE4
- stack 0: 0xF0
1335	 1B3	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1B5
1336	 1B4	JUMP		 	 
- stack 0: 0x510
1337	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x510
1338	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x510
- stack 0: 0xF0000000
1339	 1BB	PUSH2	0020	 	 
- stack 2: 0x510
- stack 1: 0xF0000000
- stack 0: 0x20
1340	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x510
1341	 1BF	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1342	 1C1	ADD		 	 
- stack 0: 0x514
1343	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1344	 1C3	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x1C80000017CFFFF0256000000D401E401DB000101FA00020214FFE40086000B
1345	 1C4	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x1C80000017CFFFF0256000000D401E401DB000101FA00020214FFE40086000B
- stack 0: 0xF0
1346	 1C6	SHR		 	 
- stack 1: 0x514
- stack 0: 0x1C8
1347	 1C7	JUMP		 	 
- stack 0: 0x514
1348	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x514
1349	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x514
- stack 0: 0xF0000000
1350	 1CE	PUSH2	0040	 	 
- stack 2: 0x514
- stack 1: 0xF0000000
- stack 0: 0x40
1351	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x514
1352	 1D2	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1353	 1D4	ADD		 	 
- stack 0: 0x518
1354	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1355	 1D6	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x17CFFFF0256000000D401E401DB000101FA00020214FFE40086000B019B0000
1356	 1D7	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x17CFFFF0256000000D401E401DB000101FA00020214FFE40086000B019B0000
- stack 0: 0xF0
1357	 1D9	SHR		 	 
- stack 1: 0x518
- stack 0: 0x17C
1358	 1DA	JUMP		 	 
- stack 0: 0x518
1359	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x518
1360	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1361	 17E	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x17CFFFF0256000000D401E401DB000101FA00020214FFE40086000B019B0000
1362	 17F	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x17CFFFF0256000000D401E401DB000101FA00020214FFE40086000B019B0000
- stack 0: 0xE0
1363	 181	SHR		 	 
- stack 1: 0x518
- stack 0: 0x17CFFFF
1364	 182	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
1365	 185	AND		 	 
- stack 1: 0x518
- stack 0: 0xFFFF
1366	 186	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0xFFFF
- stack 0: 0x1
1367	 188	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1368	 189	PUSH2	0040	 	 
- stack 2: 0x518
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1369	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x518
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
1370	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x518
- stack 0: 0xEFFFFFFF
1371	 18E	PUSH2	0040	 	 
- stack 2: 0x518
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
1372	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x518
1373	 192	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1374	 194	ADD		 	 
- stack 0: 0x51C
1375	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1376	 196	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x256000000D401E401DB000101FA00020214FFE40086000B019B000001B50000
1377	 197	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x256000000D401E401DB000101FA00020214FFE40086000B019B000001B50000
- stack 0: 0xF0
1378	 199	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x256
1379	 19A	JUMP		 	 
- stack 0: 0x51C
1380	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x51C
1381	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1382	 258	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x256000000D401E401DB000101FA00020214FFE40086000B019B000001B50000
1383	 259	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x256000000D401E401DB000101FA00020214FFE40086000B019B000001B50000
- stack 0: 0xE0
1384	 25B	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x2560000
1385	 25C	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x2560000
- stack 0: 0xFFFF
1386	 25F	AND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1387	 260	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x1
1388	 262	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1389	 263	POP		 	 
- stack 0: 0x51C
1390	 264	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1391	 266	ADD		 	 
- stack 0: 0x520
1392	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1393	 268	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xD401E401DB000101FA00020214FFE40086000B019B000001B5000001C80000
1394	 269	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0xD401E401DB000101FA00020214FFE40086000B019B000001B5000001C80000
- stack 0: 0xF0
1395	 26B	SHR		 	 
- stack 1: 0x520
- stack 0: 0xD4
1396	 26C	JUMP		 	 
- stack 0: 0x520
1397	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x520
1398	 D5	PUSH2	0040	 	 
- stack 1: 0x520
- stack 0: 0x40
1399	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x520
- stack 0: 0xEFFFFFFF
1400	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x520
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
1401	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x520
- stack 0: 0xEFFFFFFF
1402	 DF	PUSH2	0020	 	 
- stack 2: 0x520
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
1403	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x520
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
1404	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x520
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
1405	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x520
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
1406	 E9	LT		 	  ;; # bltu
- stack 1: 0x520
- stack 0: 0x0
1407	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x520
- stack 1: 0x0
- stack 0: 0xF2
1408	 ED	JUMPI		 	 
- stack 0: 0x520
1409	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x520
- stack 0: 0x10C
1410	 F1	JUMP		 	 
- stack 0: 0x520
1411	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x520
1412	 10D	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1413	 10F	ADD		 	 
- stack 0: 0x524
1414	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1415	 111	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x1DB000101FA00020214FFE40086000B019B000001B5000001C80000017CFFFF
1416	 112	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x1DB000101FA00020214FFE40086000B019B000001B5000001C80000017CFFFF
- stack 0: 0xF0
1417	 114	SHR		 	 
- stack 1: 0x524
- stack 0: 0x1DB
1418	 115	JUMP		 	 
- stack 0: 0x524
1419	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x524
1420	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1421	 1DD	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x1DB000101FA00020214FFE40086000B019B000001B5000001C80000017CFFFF
1422	 1DE	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x1DB000101FA00020214FFE40086000B019B000001B5000001C80000017CFFFF
- stack 0: 0xE0
1423	 1E0	SHR		 	 
- stack 1: 0x524
- stack 0: 0x1DB0001
1424	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
1425	 1E4	AND		 	 
- stack 1: 0x524
- stack 0: 0x1
1426	 1E5	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x1
1427	 1E7	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0x1
1428	 1E8	PUSH2	0080	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x80
1429	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x0
1430	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x524
- stack 0: 0x1
1431	 1ED	PUSH2	0080	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x80
1432	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x524
1433	 1F1	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1434	 1F3	ADD		 	 
- stack 0: 0x528
1435	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1436	 1F5	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1FA00020214FFE40086000B019B000001B5000001C80000017CFFFF02560000
1437	 1F6	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x1FA00020214FFE40086000B019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xF0
1438	 1F8	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1FA
1439	 1F9	JUMP		 	 
- stack 0: 0x528
1440	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x528
1441	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1442	 1FC	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1FA00020214FFE40086000B019B000001B5000001C80000017CFFFF02560000
1443	 1FD	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x1FA00020214FFE40086000B019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xE0
1444	 1FF	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1FA0002
1445	 200	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
1446	 203	AND		 	 
- stack 1: 0x528
- stack 0: 0x2
1447	 204	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0x2
- stack 0: 0x1
1448	 206	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0x2
1449	 207	PUSH2	00A0	 	 
- stack 2: 0x528
- stack 1: 0x2
- stack 0: 0xA0
1450	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x528
1451	 20B	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1452	 20D	ADD		 	 
- stack 0: 0x52C
1453	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1454	 20F	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x214FFE40086000B019B000001B5000001C80000017CFFFF0256000002560000
1455	 210	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x214FFE40086000B019B000001B5000001C80000017CFFFF0256000002560000
- stack 0: 0xF0
1456	 212	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x214
1457	 213	JUMP		 	 
- stack 0: 0x52C
1458	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x52C
1459	 215	PUSH2	0080	 	 
- stack 1: 0x52C
- stack 0: 0x80
1460	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x52C
- stack 0: 0x1
1461	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x52C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1462	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x52C
- stack 0: 0x1
1463	 21F	PUSH2	00A0	 	 
- stack 2: 0x52C
- stack 1: 0x1
- stack 0: 0xA0
1464	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x52C
- stack 1: 0x1
- stack 0: 0x2
1465	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x52C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1466	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x52C
- stack 1: 0x1
- stack 0: 0x2
1467	 229	SUB		 	 
- stack 1: 0x52C
- stack 0: 0x1
1468	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x52C
- stack 1: 0x1
- stack 0: 0x232
1469	 22D	JUMPI		 	 
- stack 0: 0x52C
1470	 232	JUMPDEST		 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x52C
1471	 233	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1472	 234	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x214FFE40086000B019B000001B5000001C80000017CFFFF0256000002560000
1473	 235	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0x214FFE40086000B019B000001B5000001C80000017CFFFF0256000002560000
- stack 0: 0xE0
1474	 237	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x214FFE4
1475	 238	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0x214FFE4
- stack 0: 0xFFFF
1476	 23B	AND		 	 
- stack 1: 0x52C
- stack 0: 0xFFE4
1477	 23C	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0xFFE4
- stack 0: 0x1
1478	 23E	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
1479	 23F	ADD		 	 
- stack 0: 0x510
1480	 240	PUSH4	FFFFFFFF	 	 
- stack 1: 0x510
- stack 0: 0xFFFFFFFF
1481	 245	AND		 	  ;; # mask to 32 bits
- stack 0: 0x510
1482	 246	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1483	 247	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1B5000001C80000017CFFFF0256000000D401E401DB000101FA00020214FFE4
1484	 248	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x1B5000001C80000017CFFFF0256000000D401E401DB000101FA00020214FFE4
- stack 0: 0xF0
1485	 24A	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1B5
1486	 24B	JUMP		 	 
- stack 0: 0x510
1487	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x510
1488	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x510
- stack 0: 0xF0000000
1489	 1BB	PUSH2	0020	 	 
- stack 2: 0x510
- stack 1: 0xF0000000
- stack 0: 0x20
1490	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x510
1491	 1BF	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1492	 1C1	ADD		 	 
- stack 0: 0x514
1493	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1494	 1C3	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x1C80000017CFFFF0256000000D401E401DB000101FA00020214FFE40086000B
1495	 1C4	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x1C80000017CFFFF0256000000D401E401DB000101FA00020214FFE40086000B
- stack 0: 0xF0
1496	 1C6	SHR		 	 
- stack 1: 0x514
- stack 0: 0x1C8
1497	 1C7	JUMP		 	 
- stack 0: 0x514
1498	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x514
1499	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x514
- stack 0: 0xF0000000
1500	 1CE	PUSH2	0040	 	 
- stack 2: 0x514
- stack 1: 0xF0000000
- stack 0: 0x40
1501	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x514
1502	 1D2	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1503	 1D4	ADD		 	 
- stack 0: 0x518
1504	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1505	 1D6	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x17CFFFF0256000000D401E401DB000101FA00020214FFE40086000B019B0000
1506	 1D7	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x17CFFFF0256000000D401E401DB000101FA00020214FFE40086000B019B0000
- stack 0: 0xF0
1507	 1D9	SHR		 	 
- stack 1: 0x518
- stack 0: 0x17C
1508	 1DA	JUMP		 	 
- stack 0: 0x518
1509	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x518
1510	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1511	 17E	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x17CFFFF0256000000D401E401DB000101FA00020214FFE40086000B019B0000
1512	 17F	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x17CFFFF0256000000D401E401DB000101FA00020214FFE40086000B019B0000
- stack 0: 0xE0
1513	 181	SHR		 	 
- stack 1: 0x518
- stack 0: 0x17CFFFF
1514	 182	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
1515	 185	AND		 	 
- stack 1: 0x518
- stack 0: 0xFFFF
1516	 186	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0xFFFF
- stack 0: 0x1
1517	 188	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1518	 189	PUSH2	0040	 	 
- stack 2: 0x518
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1519	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x518
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
1520	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x518
- stack 0: 0xEFFFFFFF
1521	 18E	PUSH2	0040	 	 
- stack 2: 0x518
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
1522	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x518
1523	 192	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1524	 194	ADD		 	 
- stack 0: 0x51C
1525	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1526	 196	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x256000000D401E401DB000101FA00020214FFE40086000B019B000001B50000
1527	 197	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x256000000D401E401DB000101FA00020214FFE40086000B019B000001B50000
- stack 0: 0xF0
1528	 199	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x256
1529	 19A	JUMP		 	 
- stack 0: 0x51C
1530	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x51C
1531	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1532	 258	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x256000000D401E401DB000101FA00020214FFE40086000B019B000001B50000
1533	 259	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x256000000D401E401DB000101FA00020214FFE40086000B019B000001B50000
- stack 0: 0xE0
1534	 25B	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x2560000
1535	 25C	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x2560000
- stack 0: 0xFFFF
1536	 25F	AND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1537	 260	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x1
1538	 262	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1539	 263	POP		 	 
- stack 0: 0x51C
1540	 264	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1541	 266	ADD		 	 
- stack 0: 0x520
1542	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1543	 268	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xD401E401DB000101FA00020214FFE40086000B019B000001B5000001C80000
1544	 269	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0xD401E401DB000101FA00020214FFE40086000B019B000001B5000001C80000
- stack 0: 0xF0
1545	 26B	SHR		 	 
- stack 1: 0x520
- stack 0: 0xD4
1546	 26C	JUMP		 	 
- stack 0: 0x520
1547	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x520
1548	 D5	PUSH2	0040	 	 
- stack 1: 0x520
- stack 0: 0x40
1549	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x520
- stack 0: 0xEFFFFFFF
1550	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x520
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
1551	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x520
- stack 0: 0xEFFFFFFF
1552	 DF	PUSH2	0020	 	 
- stack 2: 0x520
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
1553	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x520
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
1554	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x520
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
1555	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x520
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
1556	 E9	LT		 	  ;; # bltu
- stack 1: 0x520
- stack 0: 0x0
1557	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x520
- stack 1: 0x0
- stack 0: 0xF2
1558	 ED	JUMPI		 	 
- stack 0: 0x520
1559	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x520
- stack 0: 0x10C
1560	 F1	JUMP		 	 
- stack 0: 0x520
1561	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x520
1562	 10D	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1563	 10F	ADD		 	 
- stack 0: 0x524
1564	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1565	 111	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x1DB000101FA00020214FFE40086000B019B000001B5000001C80000017CFFFF
1566	 112	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x1DB000101FA00020214FFE40086000B019B000001B5000001C80000017CFFFF
- stack 0: 0xF0
1567	 114	SHR		 	 
- stack 1: 0x524
- stack 0: 0x1DB
1568	 115	JUMP		 	 
- stack 0: 0x524
1569	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x524
1570	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1571	 1DD	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x1DB000101FA00020214FFE40086000B019B000001B5000001C80000017CFFFF
1572	 1DE	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x1DB000101FA00020214FFE40086000B019B000001B5000001C80000017CFFFF
- stack 0: 0xE0
1573	 1E0	SHR		 	 
- stack 1: 0x524
- stack 0: 0x1DB0001
1574	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
1575	 1E4	AND		 	 
- stack 1: 0x524
- stack 0: 0x1
1576	 1E5	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x1
1577	 1E7	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0x1
1578	 1E8	PUSH2	0080	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x80
1579	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x1
1580	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x524
- stack 0: 0x2
1581	 1ED	PUSH2	0080	 	 
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0x80
1582	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x524
1583	 1F1	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1584	 1F3	ADD		 	 
- stack 0: 0x528
1585	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1586	 1F5	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1FA00020214FFE40086000B019B000001B5000001C80000017CFFFF02560000
1587	 1F6	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x1FA00020214FFE40086000B019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xF0
1588	 1F8	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1FA
1589	 1F9	JUMP		 	 
- stack 0: 0x528
1590	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x528
1591	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1592	 1FC	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1FA00020214FFE40086000B019B000001B5000001C80000017CFFFF02560000
1593	 1FD	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x1FA00020214FFE40086000B019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xE0
1594	 1FF	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1FA0002
1595	 200	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
1596	 203	AND		 	 
- stack 1: 0x528
- stack 0: 0x2
1597	 204	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0x2
- stack 0: 0x1
1598	 206	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0x2
1599	 207	PUSH2	00A0	 	 
- stack 2: 0x528
- stack 1: 0x2
- stack 0: 0xA0
1600	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x528
1601	 20B	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1602	 20D	ADD		 	 
- stack 0: 0x52C
1603	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1604	 20F	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x214FFE40086000B019B000001B5000001C80000017CFFFF0256000002560000
1605	 210	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x214FFE40086000B019B000001B5000001C80000017CFFFF0256000002560000
- stack 0: 0xF0
1606	 212	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x214
1607	 213	JUMP		 	 
- stack 0: 0x52C
1608	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x52C
1609	 215	PUSH2	0080	 	 
- stack 1: 0x52C
- stack 0: 0x80
1610	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x52C
- stack 0: 0x2
1611	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x52C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1612	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x52C
- stack 0: 0x2
1613	 21F	PUSH2	00A0	 	 
- stack 2: 0x52C
- stack 1: 0x2
- stack 0: 0xA0
1614	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x52C
- stack 1: 0x2
- stack 0: 0x2
1615	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x52C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1616	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x52C
- stack 1: 0x2
- stack 0: 0x2
1617	 229	SUB		 	 
- stack 1: 0x52C
- stack 0: 0x0
1618	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x232
1619	 22D	JUMPI		 	 
- stack 0: 0x52C
1620	 22E	PUSH2	024C	 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 1: 0x52C
- stack 0: 0x24C
1621	 231	JUMP		 	 
- stack 0: 0x52C
1622	 24C	JUMPDEST		 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x52C
1623	 24D	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1624	 24F	ADD		 	 
- stack 0: 0x530
1625	 250	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1626	 251	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x86000B019B000001B5000001C80000017CFFFF025600000256000000D401B8
1627	 252	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x86000B019B000001B5000001C80000017CFFFF025600000256000000D401B8
- stack 0: 0xF0
1628	 254	SHR		 	 
- stack 1: 0x530
- stack 0: 0x86
1629	 255	JUMP		 	 
- stack 0: 0x530
1630	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x530
1631	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1632	 88	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x86000B019B000001B5000001C80000017CFFFF025600000256000000D401B8
1633	 89	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x86000B019B000001B5000001C80000017CFFFF025600000256000000D401B8
- stack 0: 0xE0
1634	 8B	SHR		 	 
- stack 1: 0x530
- stack 0: 0x86000B
1635	 8C	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x86000B
- stack 0: 0xFFFF
1636	 8F	AND		 	 
- stack 1: 0x530
- stack 0: 0xB
1637	 90	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0xB
- stack 0: 0x1
1638	 92	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0xB
1639	 93	PUSH2	0380	 	 
- stack 2: 0x530
- stack 1: 0xB
- stack 0: 0x380
1640	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x530
1641	 97	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1642	 99	ADD		 	 
- stack 0: 0x534
1643	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1644	 9B	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x19B000001B5000001C80000017CFFFF025600000256000000D401B801DB0001
1645	 9C	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x19B000001B5000001C80000017CFFFF025600000256000000D401B801DB0001
- stack 0: 0xF0
1646	 9E	SHR		 	 
- stack 1: 0x534
- stack 0: 0x19B
1647	 9F	JUMP		 	 
- stack 0: 0x534
1648	 19B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x534
1649	 19C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1650	 19D	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x19B000001B5000001C80000017CFFFF025600000256000000D401B801DB0001
1651	 19E	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x19B000001B5000001C80000017CFFFF025600000256000000D401B801DB0001
- stack 0: 0xE0
1652	 1A0	SHR		 	 
- stack 1: 0x534
- stack 0: 0x19B0000
1653	 1A1	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x19B0000
- stack 0: 0xFFFF
1654	 1A4	AND		 	 
- stack 1: 0x534
- stack 0: 0x0
1655	 1A5	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x1
1656	 1A7	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0x0
1657	 1A8	PUSH2	0080	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x80
1658	 1AB	MSTORE		 	  ;; # store to x4
- stack 0: 0x534
1659	 1AC	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1660	 1AE	ADD		 	 
- stack 0: 0x538
1661	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1662	 1B0	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1B5000001C80000017CFFFF025600000256000000D401B801DB000101FA0002
1663	 1B1	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x1B5000001C80000017CFFFF025600000256000000D401B801DB000101FA0002
- stack 0: 0xF0
1664	 1B3	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1B5
1665	 1B4	JUMP		 	 
- stack 0: 0x538
1666	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x538
1667	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x538
- stack 0: 0xF0000000
1668	 1BB	PUSH2	0020	 	 
- stack 2: 0x538
- stack 1: 0xF0000000
- stack 0: 0x20
1669	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x538
1670	 1BF	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1671	 1C1	ADD		 	 
- stack 0: 0x53C
1672	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1673	 1C3	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x1C80000017CFFFF025600000256000000D401B801DB000101FA00020214FFE0
1674	 1C4	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x1C80000017CFFFF025600000256000000D401B801DB000101FA00020214FFE0
- stack 0: 0xF0
1675	 1C6	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x1C8
1676	 1C7	JUMP		 	 
- stack 0: 0x53C
1677	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x53C
1678	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x53C
- stack 0: 0xF0000000
1679	 1CE	PUSH2	0040	 	 
- stack 2: 0x53C
- stack 1: 0xF0000000
- stack 0: 0x40
1680	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x53C
1681	 1D2	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1682	 1D4	ADD		 	 
- stack 0: 0x540
1683	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1684	 1D6	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x17CFFFF025600000256000000D401B801DB000101FA00020214FFE00086000C
1685	 1D7	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x17CFFFF025600000256000000D401B801DB000101FA00020214FFE00086000C
- stack 0: 0xF0
1686	 1D9	SHR		 	 
- stack 1: 0x540
- stack 0: 0x17C
1687	 1DA	JUMP		 	 
- stack 0: 0x540
1688	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x540
1689	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1690	 17E	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x17CFFFF025600000256000000D401B801DB000101FA00020214FFE00086000C
1691	 17F	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x17CFFFF025600000256000000D401B801DB000101FA00020214FFE00086000C
- stack 0: 0xE0
1692	 181	SHR		 	 
- stack 1: 0x540
- stack 0: 0x17CFFFF
1693	 182	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
1694	 185	AND		 	 
- stack 1: 0x540
- stack 0: 0xFFFF
1695	 186	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xFFFF
- stack 0: 0x1
1696	 188	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1697	 189	PUSH2	0040	 	 
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1698	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
1699	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x540
- stack 0: 0xEFFFFFFF
1700	 18E	PUSH2	0040	 	 
- stack 2: 0x540
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
1701	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x540
1702	 192	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1703	 194	ADD		 	 
- stack 0: 0x544
1704	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1705	 196	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x25600000256000000D401B801DB000101FA00020214FFE00086000C019B0000
1706	 197	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x25600000256000000D401B801DB000101FA00020214FFE00086000C019B0000
- stack 0: 0xF0
1707	 199	SHR		 	 
- stack 1: 0x544
- stack 0: 0x256
1708	 19A	JUMP		 	 
- stack 0: 0x544
1709	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x544
1710	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1711	 258	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x25600000256000000D401B801DB000101FA00020214FFE00086000C019B0000
1712	 259	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x25600000256000000D401B801DB000101FA00020214FFE00086000C019B0000
- stack 0: 0xE0
1713	 25B	SHR		 	 
- stack 1: 0x544
- stack 0: 0x2560000
1714	 25C	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x2560000
- stack 0: 0xFFFF
1715	 25F	AND		 	 
- stack 1: 0x544
- stack 0: 0x0
1716	 260	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x1
1717	 262	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x0
1718	 263	POP		 	 
- stack 0: 0x544
1719	 264	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1720	 266	ADD		 	 
- stack 0: 0x548
1721	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1722	 268	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x256000000D401B801DB000101FA00020214FFE00086000C019B000001B50000
1723	 269	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x256000000D401B801DB000101FA00020214FFE00086000C019B000001B50000
- stack 0: 0xF0
1724	 26B	SHR		 	 
- stack 1: 0x548
- stack 0: 0x256
1725	 26C	JUMP		 	 
- stack 0: 0x548
1726	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x548
1727	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1728	 258	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x256000000D401B801DB000101FA00020214FFE00086000C019B000001B50000
1729	 259	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x256000000D401B801DB000101FA00020214FFE00086000C019B000001B50000
- stack 0: 0xE0
1730	 25B	SHR		 	 
- stack 1: 0x548
- stack 0: 0x2560000
1731	 25C	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x2560000
- stack 0: 0xFFFF
1732	 25F	AND		 	 
- stack 1: 0x548
- stack 0: 0x0
1733	 260	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x0
- stack 0: 0x1
1734	 262	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x0
1735	 263	POP		 	 
- stack 0: 0x548
1736	 264	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1737	 266	ADD		 	 
- stack 0: 0x54C
1738	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1739	 268	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xD401B801DB000101FA00020214FFE00086000C019B000001B5000002560000
1740	 269	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xD401B801DB000101FA00020214FFE00086000C019B000001B5000002560000
- stack 0: 0xF0
1741	 26B	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xD4
1742	 26C	JUMP		 	 
- stack 0: 0x54C
1743	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x54C
1744	 D5	PUSH2	0040	 	 
- stack 1: 0x54C
- stack 0: 0x40
1745	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x54C
- stack 0: 0xEFFFFFFF
1746	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x54C
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
1747	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x54C
- stack 0: 0xEFFFFFFF
1748	 DF	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
1749	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x54C
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
1750	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x54C
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
1751	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x54C
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
1752	 E9	LT		 	  ;; # bltu
- stack 1: 0x54C
- stack 0: 0x0
1753	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0xF2
1754	 ED	JUMPI		 	 
- stack 0: 0x54C
1755	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x54C
- stack 0: 0x10C
1756	 F1	JUMP		 	 
- stack 0: 0x54C
1757	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x54C
1758	 10D	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1759	 10F	ADD		 	 
- stack 0: 0x550
1760	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1761	 111	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x1DB000101FA00020214FFE00086000C019B000001B500000256000001C80000
1762	 112	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x1DB000101FA00020214FFE00086000C019B000001B500000256000001C80000
- stack 0: 0xF0
1763	 114	SHR		 	 
- stack 1: 0x550
- stack 0: 0x1DB
1764	 115	JUMP		 	 
- stack 0: 0x550
1765	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x550
1766	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1767	 1DD	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x1DB000101FA00020214FFE00086000C019B000001B500000256000001C80000
1768	 1DE	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x1DB000101FA00020214FFE00086000C019B000001B500000256000001C80000
- stack 0: 0xE0
1769	 1E0	SHR		 	 
- stack 1: 0x550
- stack 0: 0x1DB0001
1770	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
1771	 1E4	AND		 	 
- stack 1: 0x550
- stack 0: 0x1
1772	 1E5	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x1
1773	 1E7	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0x1
1774	 1E8	PUSH2	0080	 	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x80
1775	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x0
1776	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x550
- stack 0: 0x1
1777	 1ED	PUSH2	0080	 	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x80
1778	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x550
1779	 1F1	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1780	 1F3	ADD		 	 
- stack 0: 0x554
1781	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1782	 1F5	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x1FA00020214FFE00086000C019B000001B500000256000001C80000017CFFFF
1783	 1F6	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x1FA00020214FFE00086000C019B000001B500000256000001C80000017CFFFF
- stack 0: 0xF0
1784	 1F8	SHR		 	 
- stack 1: 0x554
- stack 0: 0x1FA
1785	 1F9	JUMP		 	 
- stack 0: 0x554
1786	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x554
1787	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1788	 1FC	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x1FA00020214FFE00086000C019B000001B500000256000001C80000017CFFFF
1789	 1FD	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x1FA00020214FFE00086000C019B000001B500000256000001C80000017CFFFF
- stack 0: 0xE0
1790	 1FF	SHR		 	 
- stack 1: 0x554
- stack 0: 0x1FA0002
1791	 200	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
1792	 203	AND		 	 
- stack 1: 0x554
- stack 0: 0x2
1793	 204	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x2
- stack 0: 0x1
1794	 206	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x2
1795	 207	PUSH2	00A0	 	 
- stack 2: 0x554
- stack 1: 0x2
- stack 0: 0xA0
1796	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x554
1797	 20B	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1798	 20D	ADD		 	 
- stack 0: 0x558
1799	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1800	 20F	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x214FFE00086000C019B000001B500000256000001C80000017CFFFF00D40190
1801	 210	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x214FFE00086000C019B000001B500000256000001C80000017CFFFF00D40190
- stack 0: 0xF0
1802	 212	SHR		 	 
- stack 1: 0x558
- stack 0: 0x214
1803	 213	JUMP		 	 
- stack 0: 0x558
1804	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x558
1805	 215	PUSH2	0080	 	 
- stack 1: 0x558
- stack 0: 0x80
1806	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x558
- stack 0: 0x1
1807	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1808	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x558
- stack 0: 0x1
1809	 21F	PUSH2	00A0	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0xA0
1810	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x2
1811	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x558
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1812	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x2
1813	 229	SUB		 	 
- stack 1: 0x558
- stack 0: 0x1
1814	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x232
1815	 22D	JUMPI		 	 
- stack 0: 0x558
1816	 232	JUMPDEST		 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x558
1817	 233	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1818	 234	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x214FFE00086000C019B000001B500000256000001C80000017CFFFF00D40190
1819	 235	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x214FFE00086000C019B000001B500000256000001C80000017CFFFF00D40190
- stack 0: 0xE0
1820	 237	SHR		 	 
- stack 1: 0x558
- stack 0: 0x214FFE0
1821	 238	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x214FFE0
- stack 0: 0xFFFF
1822	 23B	AND		 	 
- stack 1: 0x558
- stack 0: 0xFFE0
1823	 23C	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0xFFE0
- stack 0: 0x1
1824	 23E	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1825	 23F	ADD		 	 
- stack 0: 0x538
1826	 240	PUSH4	FFFFFFFF	 	 
- stack 1: 0x538
- stack 0: 0xFFFFFFFF
1827	 245	AND		 	  ;; # mask to 32 bits
- stack 0: 0x538
1828	 246	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1829	 247	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1B5000001C80000017CFFFF025600000256000000D401B801DB000101FA0002
1830	 248	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x1B5000001C80000017CFFFF025600000256000000D401B801DB000101FA0002
- stack 0: 0xF0
1831	 24A	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1B5
1832	 24B	JUMP		 	 
- stack 0: 0x538
1833	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x538
1834	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x538
- stack 0: 0xF0000000
1835	 1BB	PUSH2	0020	 	 
- stack 2: 0x538
- stack 1: 0xF0000000
- stack 0: 0x20
1836	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x538
1837	 1BF	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1838	 1C1	ADD		 	 
- stack 0: 0x53C
1839	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1840	 1C3	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x1C80000017CFFFF025600000256000000D401B801DB000101FA00020214FFE0
1841	 1C4	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x1C80000017CFFFF025600000256000000D401B801DB000101FA00020214FFE0
- stack 0: 0xF0
1842	 1C6	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x1C8
1843	 1C7	JUMP		 	 
- stack 0: 0x53C
1844	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x53C
1845	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x53C
- stack 0: 0xF0000000
1846	 1CE	PUSH2	0040	 	 
- stack 2: 0x53C
- stack 1: 0xF0000000
- stack 0: 0x40
1847	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x53C
1848	 1D2	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1849	 1D4	ADD		 	 
- stack 0: 0x540
1850	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1851	 1D6	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x17CFFFF025600000256000000D401B801DB000101FA00020214FFE00086000C
1852	 1D7	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x17CFFFF025600000256000000D401B801DB000101FA00020214FFE00086000C
- stack 0: 0xF0
1853	 1D9	SHR		 	 
- stack 1: 0x540
- stack 0: 0x17C
1854	 1DA	JUMP		 	 
- stack 0: 0x540
1855	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x540
1856	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1857	 17E	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x17CFFFF025600000256000000D401B801DB000101FA00020214FFE00086000C
1858	 17F	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x17CFFFF025600000256000000D401B801DB000101FA00020214FFE00086000C
- stack 0: 0xE0
1859	 181	SHR		 	 
- stack 1: 0x540
- stack 0: 0x17CFFFF
1860	 182	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
1861	 185	AND		 	 
- stack 1: 0x540
- stack 0: 0xFFFF
1862	 186	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xFFFF
- stack 0: 0x1
1863	 188	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1864	 189	PUSH2	0040	 	 
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1865	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
1866	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x540
- stack 0: 0xEFFFFFFF
1867	 18E	PUSH2	0040	 	 
- stack 2: 0x540
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
1868	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x540
1869	 192	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1870	 194	ADD		 	 
- stack 0: 0x544
1871	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1872	 196	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x25600000256000000D401B801DB000101FA00020214FFE00086000C019B0000
1873	 197	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x25600000256000000D401B801DB000101FA00020214FFE00086000C019B0000
- stack 0: 0xF0
1874	 199	SHR		 	 
- stack 1: 0x544
- stack 0: 0x256
1875	 19A	JUMP		 	 
- stack 0: 0x544
1876	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x544
1877	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1878	 258	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x25600000256000000D401B801DB000101FA00020214FFE00086000C019B0000
1879	 259	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x25600000256000000D401B801DB000101FA00020214FFE00086000C019B0000
- stack 0: 0xE0
1880	 25B	SHR		 	 
- stack 1: 0x544
- stack 0: 0x2560000
1881	 25C	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x2560000
- stack 0: 0xFFFF
1882	 25F	AND		 	 
- stack 1: 0x544
- stack 0: 0x0
1883	 260	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x1
1884	 262	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x0
1885	 263	POP		 	 
- stack 0: 0x544
1886	 264	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1887	 266	ADD		 	 
- stack 0: 0x548
1888	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1889	 268	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x256000000D401B801DB000101FA00020214FFE00086000C019B000001B50000
1890	 269	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x256000000D401B801DB000101FA00020214FFE00086000C019B000001B50000
- stack 0: 0xF0
1891	 26B	SHR		 	 
- stack 1: 0x548
- stack 0: 0x256
1892	 26C	JUMP		 	 
- stack 0: 0x548
1893	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x548
1894	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1895	 258	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x256000000D401B801DB000101FA00020214FFE00086000C019B000001B50000
1896	 259	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x256000000D401B801DB000101FA00020214FFE00086000C019B000001B50000
- stack 0: 0xE0
1897	 25B	SHR		 	 
- stack 1: 0x548
- stack 0: 0x2560000
1898	 25C	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x2560000
- stack 0: 0xFFFF
1899	 25F	AND		 	 
- stack 1: 0x548
- stack 0: 0x0
1900	 260	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x0
- stack 0: 0x1
1901	 262	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x0
1902	 263	POP		 	 
- stack 0: 0x548
1903	 264	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1904	 266	ADD		 	 
- stack 0: 0x54C
1905	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1906	 268	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xD401B801DB000101FA00020214FFE00086000C019B000001B5000002560000
1907	 269	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xD401B801DB000101FA00020214FFE00086000C019B000001B5000002560000
- stack 0: 0xF0
1908	 26B	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xD4
1909	 26C	JUMP		 	 
- stack 0: 0x54C
1910	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x54C
1911	 D5	PUSH2	0040	 	 
- stack 1: 0x54C
- stack 0: 0x40
1912	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x54C
- stack 0: 0xEFFFFFFF
1913	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x54C
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
1914	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x54C
- stack 0: 0xEFFFFFFF
1915	 DF	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
1916	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x54C
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
1917	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x54C
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
1918	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x54C
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
1919	 E9	LT		 	  ;; # bltu
- stack 1: 0x54C
- stack 0: 0x0
1920	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0xF2
1921	 ED	JUMPI		 	 
- stack 0: 0x54C
1922	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x54C
- stack 0: 0x10C
1923	 F1	JUMP		 	 
- stack 0: 0x54C
1924	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x54C
1925	 10D	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1926	 10F	ADD		 	 
- stack 0: 0x550
1927	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1928	 111	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x1DB000101FA00020214FFE00086000C019B000001B500000256000001C80000
1929	 112	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x1DB000101FA00020214FFE00086000C019B000001B500000256000001C80000
- stack 0: 0xF0
1930	 114	SHR		 	 
- stack 1: 0x550
- stack 0: 0x1DB
1931	 115	JUMP		 	 
- stack 0: 0x550
1932	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x550
1933	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1934	 1DD	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x1DB000101FA00020214FFE00086000C019B000001B500000256000001C80000
1935	 1DE	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x1DB000101FA00020214FFE00086000C019B000001B500000256000001C80000
- stack 0: 0xE0
1936	 1E0	SHR		 	 
- stack 1: 0x550
- stack 0: 0x1DB0001
1937	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
1938	 1E4	AND		 	 
- stack 1: 0x550
- stack 0: 0x1
1939	 1E5	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x1
1940	 1E7	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0x1
1941	 1E8	PUSH2	0080	 	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x80
1942	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x1
1943	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x550
- stack 0: 0x2
1944	 1ED	PUSH2	0080	 	 
- stack 2: 0x550
- stack 1: 0x2
- stack 0: 0x80
1945	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x550
1946	 1F1	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1947	 1F3	ADD		 	 
- stack 0: 0x554
1948	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1949	 1F5	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x1FA00020214FFE00086000C019B000001B500000256000001C80000017CFFFF
1950	 1F6	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x1FA00020214FFE00086000C019B000001B500000256000001C80000017CFFFF
- stack 0: 0xF0
1951	 1F8	SHR		 	 
- stack 1: 0x554
- stack 0: 0x1FA
1952	 1F9	JUMP		 	 
- stack 0: 0x554
1953	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x554
1954	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1955	 1FC	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x1FA00020214FFE00086000C019B000001B500000256000001C80000017CFFFF
1956	 1FD	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x1FA00020214FFE00086000C019B000001B500000256000001C80000017CFFFF
- stack 0: 0xE0
1957	 1FF	SHR		 	 
- stack 1: 0x554
- stack 0: 0x1FA0002
1958	 200	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
1959	 203	AND		 	 
- stack 1: 0x554
- stack 0: 0x2
1960	 204	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x2
- stack 0: 0x1
1961	 206	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x2
1962	 207	PUSH2	00A0	 	 
- stack 2: 0x554
- stack 1: 0x2
- stack 0: 0xA0
1963	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x554
1964	 20B	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1965	 20D	ADD		 	 
- stack 0: 0x558
1966	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1967	 20F	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x214FFE00086000C019B000001B500000256000001C80000017CFFFF00D40190
1968	 210	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x214FFE00086000C019B000001B500000256000001C80000017CFFFF00D40190
- stack 0: 0xF0
1969	 212	SHR		 	 
- stack 1: 0x558
- stack 0: 0x214
1970	 213	JUMP		 	 
- stack 0: 0x558
1971	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x558
1972	 215	PUSH2	0080	 	 
- stack 1: 0x558
- stack 0: 0x80
1973	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x558
- stack 0: 0x2
1974	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1975	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x558
- stack 0: 0x2
1976	 21F	PUSH2	00A0	 	 
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0xA0
1977	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0x2
1978	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x558
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1979	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0x2
1980	 229	SUB		 	 
- stack 1: 0x558
- stack 0: 0x0
1981	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x232
1982	 22D	JUMPI		 	 
- stack 0: 0x558
1983	 22E	PUSH2	024C	 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 1: 0x558
- stack 0: 0x24C
1984	 231	JUMP		 	 
- stack 0: 0x558
1985	 24C	JUMPDEST		 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x558
1986	 24D	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1987	 24F	ADD		 	 
- stack 0: 0x55C
1988	 250	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1989	 251	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x86000C019B000001B500000256000001C80000017CFFFF00D4019001DB0001
1990	 252	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x86000C019B000001B500000256000001C80000017CFFFF00D4019001DB0001
- stack 0: 0xF0
1991	 254	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x86
1992	 255	JUMP		 	 
- stack 0: 0x55C
1993	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x55C
1994	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1995	 88	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x86000C019B000001B500000256000001C80000017CFFFF00D4019001DB0001
1996	 89	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x86000C019B000001B500000256000001C80000017CFFFF00D4019001DB0001
- stack 0: 0xE0
1997	 8B	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x86000C
1998	 8C	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x86000C
- stack 0: 0xFFFF
1999	 8F	AND		 	 
- stack 1: 0x55C
- stack 0: 0xC
2000	 90	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0xC
- stack 0: 0x1
2001	 92	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0xC
2002	 93	PUSH2	0380	 	 
- stack 2: 0x55C
- stack 1: 0xC
- stack 0: 0x380
2003	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x55C
2004	 97	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
2005	 99	ADD		 	 
- stack 0: 0x560
2006	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
2007	 9B	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x19B000001B500000256000001C80000017CFFFF00D4019001DB000101FA0002
2008	 9C	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x19B000001B500000256000001C80000017CFFFF00D4019001DB000101FA0002
- stack 0: 0xF0
2009	 9E	SHR		 	 
- stack 1: 0x560
- stack 0: 0x19B
2010	 9F	JUMP		 	 
- stack 0: 0x560
2011	 19B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x560
2012	 19C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
2013	 19D	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x19B000001B500000256000001C80000017CFFFF00D4019001DB000101FA0002
2014	 19E	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x19B000001B500000256000001C80000017CFFFF00D4019001DB000101FA0002
- stack 0: 0xE0
2015	 1A0	SHR		 	 
- stack 1: 0x560
- stack 0: 0x19B0000
2016	 1A1	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x19B0000
- stack 0: 0xFFFF
2017	 1A4	AND		 	 
- stack 1: 0x560
- stack 0: 0x0
2018	 1A5	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x1
2019	 1A7	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x0
2020	 1A8	PUSH2	0080	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x80
2021	 1AB	MSTORE		 	  ;; # store to x4
- stack 0: 0x560
2022	 1AC	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
2023	 1AE	ADD		 	 
- stack 0: 0x564
2024	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2025	 1B0	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x1B500000256000001C80000017CFFFF00D4019001DB000101FA00020214FFE4
2026	 1B1	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x1B500000256000001C80000017CFFFF00D4019001DB000101FA00020214FFE4
- stack 0: 0xF0
2027	 1B3	SHR		 	 
- stack 1: 0x564
- stack 0: 0x1B5
2028	 1B4	JUMP		 	 
- stack 0: 0x564
2029	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x564
2030	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x564
- stack 0: 0xF0000000
2031	 1BB	PUSH2	0020	 	 
- stack 2: 0x564
- stack 1: 0xF0000000
- stack 0: 0x20
2032	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x564
2033	 1BF	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2034	 1C1	ADD		 	 
- stack 0: 0x568
2035	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2036	 1C3	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x256000001C80000017CFFFF00D4019001DB000101FA00020214FFE40086000D
2037	 1C4	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x256000001C80000017CFFFF00D4019001DB000101FA00020214FFE40086000D
- stack 0: 0xF0
2038	 1C6	SHR		 	 
- stack 1: 0x568
- stack 0: 0x256
2039	 1C7	JUMP		 	 
- stack 0: 0x568
2040	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x568
2041	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
2042	 258	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x256000001C80000017CFFFF00D4019001DB000101FA00020214FFE40086000D
2043	 259	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x256000001C80000017CFFFF00D4019001DB000101FA00020214FFE40086000D
- stack 0: 0xE0
2044	 25B	SHR		 	 
- stack 1: 0x568
- stack 0: 0x2560000
2045	 25C	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x2560000
- stack 0: 0xFFFF
2046	 25F	AND		 	 
- stack 1: 0x568
- stack 0: 0x0
2047	 260	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x1
2048	 262	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x0
2049	 263	POP		 	 
- stack 0: 0x568
2050	 264	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2051	 266	ADD		 	 
- stack 0: 0x56C
2052	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2053	 268	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x1C80000017CFFFF00D4019001DB000101FA00020214FFE40086000D019B0000
2054	 269	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x1C80000017CFFFF00D4019001DB000101FA00020214FFE40086000D019B0000
- stack 0: 0xF0
2055	 26B	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x1C8
2056	 26C	JUMP		 	 
- stack 0: 0x56C
2057	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x56C
2058	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x56C
- stack 0: 0xF0000000
2059	 1CE	PUSH2	0040	 	 
- stack 2: 0x56C
- stack 1: 0xF0000000
- stack 0: 0x40
2060	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x56C
2061	 1D2	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2062	 1D4	ADD		 	 
- stack 0: 0x570
2063	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2064	 1D6	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x17CFFFF00D4019001DB000101FA00020214FFE40086000D019B000001B50000
2065	 1D7	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x17CFFFF00D4019001DB000101FA00020214FFE40086000D019B000001B50000
- stack 0: 0xF0
2066	 1D9	SHR		 	 
- stack 1: 0x570
- stack 0: 0x17C
2067	 1DA	JUMP		 	 
- stack 0: 0x570
2068	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x570
2069	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
2070	 17E	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x17CFFFF00D4019001DB000101FA00020214FFE40086000D019B000001B50000
2071	 17F	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x17CFFFF00D4019001DB000101FA00020214FFE40086000D019B000001B50000
- stack 0: 0xE0
2072	 181	SHR		 	 
- stack 1: 0x570
- stack 0: 0x17CFFFF
2073	 182	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
2074	 185	AND		 	 
- stack 1: 0x570
- stack 0: 0xFFFF
2075	 186	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0xFFFF
- stack 0: 0x1
2076	 188	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2077	 189	PUSH2	0040	 	 
- stack 2: 0x570
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2078	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x570
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
2079	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x570
- stack 0: 0xEFFFFFFF
2080	 18E	PUSH2	0040	 	 
- stack 2: 0x570
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
2081	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x570
2082	 192	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2083	 194	ADD		 	 
- stack 0: 0x574
2084	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2085	 196	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xD4019001DB000101FA00020214FFE40086000D019B000001B5000002560000
2086	 197	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0xD4019001DB000101FA00020214FFE40086000D019B000001B5000002560000
- stack 0: 0xF0
2087	 199	SHR		 	 
- stack 1: 0x574
- stack 0: 0xD4
2088	 19A	JUMP		 	 
- stack 0: 0x574
2089	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x574
2090	 D5	PUSH2	0040	 	 
- stack 1: 0x574
- stack 0: 0x40
2091	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x574
- stack 0: 0xEFFFFFFF
2092	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x574
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
2093	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x574
- stack 0: 0xEFFFFFFF
2094	 DF	PUSH2	0020	 	 
- stack 2: 0x574
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
2095	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x574
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
2096	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x574
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
2097	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x574
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
2098	 E9	LT		 	  ;; # bltu
- stack 1: 0x574
- stack 0: 0x0
2099	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0xF2
2100	 ED	JUMPI		 	 
- stack 0: 0x574
2101	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x574
- stack 0: 0x10C
2102	 F1	JUMP		 	 
- stack 0: 0x574
2103	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x574
2104	 10D	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2105	 10F	ADD		 	 
- stack 0: 0x578
2106	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2107	 111	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1DB000101FA00020214FFE40086000D019B000001B500000256000001C80000
2108	 112	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1DB000101FA00020214FFE40086000D019B000001B500000256000001C80000
- stack 0: 0xF0
2109	 114	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1DB
2110	 115	JUMP		 	 
- stack 0: 0x578
2111	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x578
2112	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2113	 1DD	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1DB000101FA00020214FFE40086000D019B000001B500000256000001C80000
2114	 1DE	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x1DB000101FA00020214FFE40086000D019B000001B500000256000001C80000
- stack 0: 0xE0
2115	 1E0	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1DB0001
2116	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
2117	 1E4	AND		 	 
- stack 1: 0x578
- stack 0: 0x1
2118	 1E5	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x1
2119	 1E7	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x1
2120	 1E8	PUSH2	0080	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x80
2121	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x0
2122	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x578
- stack 0: 0x1
2123	 1ED	PUSH2	0080	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x80
2124	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x578
2125	 1F1	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2126	 1F3	ADD		 	 
- stack 0: 0x57C
2127	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2128	 1F5	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1FA00020214FFE40086000D019B000001B500000256000001C80000017CFFFF
2129	 1F6	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x1FA00020214FFE40086000D019B000001B500000256000001C80000017CFFFF
- stack 0: 0xF0
2130	 1F8	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1FA
2131	 1F9	JUMP		 	 
- stack 0: 0x57C
2132	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x57C
2133	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2134	 1FC	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1FA00020214FFE40086000D019B000001B500000256000001C80000017CFFFF
2135	 1FD	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x1FA00020214FFE40086000D019B000001B500000256000001C80000017CFFFF
- stack 0: 0xE0
2136	 1FF	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1FA0002
2137	 200	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
2138	 203	AND		 	 
- stack 1: 0x57C
- stack 0: 0x2
2139	 204	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0x1
2140	 206	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x2
2141	 207	PUSH2	00A0	 	 
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0xA0
2142	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x57C
2143	 20B	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2144	 20D	ADD		 	 
- stack 0: 0x580
2145	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2146	 20F	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x214FFE40086000D019B000001B500000256000001C80000017CFFFF02560000
2147	 210	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x214FFE40086000D019B000001B500000256000001C80000017CFFFF02560000
- stack 0: 0xF0
2148	 212	SHR		 	 
- stack 1: 0x580
- stack 0: 0x214
2149	 213	JUMP		 	 
- stack 0: 0x580
2150	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x580
2151	 215	PUSH2	0080	 	 
- stack 1: 0x580
- stack 0: 0x80
2152	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x580
- stack 0: 0x1
2153	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2154	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x580
- stack 0: 0x1
2155	 21F	PUSH2	00A0	 	 
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0xA0
2156	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x2
2157	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x580
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2158	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x2
2159	 229	SUB		 	 
- stack 1: 0x580
- stack 0: 0x1
2160	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x232
2161	 22D	JUMPI		 	 
- stack 0: 0x580
2162	 232	JUMPDEST		 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x580
2163	 233	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2164	 234	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x214FFE40086000D019B000001B500000256000001C80000017CFFFF02560000
2165	 235	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x214FFE40086000D019B000001B500000256000001C80000017CFFFF02560000
- stack 0: 0xE0
2166	 237	SHR		 	 
- stack 1: 0x580
- stack 0: 0x214FFE4
2167	 238	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x214FFE4
- stack 0: 0xFFFF
2168	 23B	AND		 	 
- stack 1: 0x580
- stack 0: 0xFFE4
2169	 23C	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0xFFE4
- stack 0: 0x1
2170	 23E	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2171	 23F	ADD		 	 
- stack 0: 0x564
2172	 240	PUSH4	FFFFFFFF	 	 
- stack 1: 0x564
- stack 0: 0xFFFFFFFF
2173	 245	AND		 	  ;; # mask to 32 bits
- stack 0: 0x564
2174	 246	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2175	 247	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x1B500000256000001C80000017CFFFF00D4019001DB000101FA00020214FFE4
2176	 248	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x1B500000256000001C80000017CFFFF00D4019001DB000101FA00020214FFE4
- stack 0: 0xF0
2177	 24A	SHR		 	 
- stack 1: 0x564
- stack 0: 0x1B5
2178	 24B	JUMP		 	 
- stack 0: 0x564
2179	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x564
2180	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x564
- stack 0: 0xF0000000
2181	 1BB	PUSH2	0020	 	 
- stack 2: 0x564
- stack 1: 0xF0000000
- stack 0: 0x20
2182	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x564
2183	 1BF	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2184	 1C1	ADD		 	 
- stack 0: 0x568
2185	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2186	 1C3	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x256000001C80000017CFFFF00D4019001DB000101FA00020214FFE40086000D
2187	 1C4	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x256000001C80000017CFFFF00D4019001DB000101FA00020214FFE40086000D
- stack 0: 0xF0
2188	 1C6	SHR		 	 
- stack 1: 0x568
- stack 0: 0x256
2189	 1C7	JUMP		 	 
- stack 0: 0x568
2190	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x568
2191	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
2192	 258	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x256000001C80000017CFFFF00D4019001DB000101FA00020214FFE40086000D
2193	 259	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x256000001C80000017CFFFF00D4019001DB000101FA00020214FFE40086000D
- stack 0: 0xE0
2194	 25B	SHR		 	 
- stack 1: 0x568
- stack 0: 0x2560000
2195	 25C	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x2560000
- stack 0: 0xFFFF
2196	 25F	AND		 	 
- stack 1: 0x568
- stack 0: 0x0
2197	 260	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x1
2198	 262	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x0
2199	 263	POP		 	 
- stack 0: 0x568
2200	 264	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2201	 266	ADD		 	 
- stack 0: 0x56C
2202	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2203	 268	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x1C80000017CFFFF00D4019001DB000101FA00020214FFE40086000D019B0000
2204	 269	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x1C80000017CFFFF00D4019001DB000101FA00020214FFE40086000D019B0000
- stack 0: 0xF0
2205	 26B	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x1C8
2206	 26C	JUMP		 	 
- stack 0: 0x56C
2207	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x56C
2208	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x56C
- stack 0: 0xF0000000
2209	 1CE	PUSH2	0040	 	 
- stack 2: 0x56C
- stack 1: 0xF0000000
- stack 0: 0x40
2210	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x56C
2211	 1D2	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2212	 1D4	ADD		 	 
- stack 0: 0x570
2213	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2214	 1D6	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x17CFFFF00D4019001DB000101FA00020214FFE40086000D019B000001B50000
2215	 1D7	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x17CFFFF00D4019001DB000101FA00020214FFE40086000D019B000001B50000
- stack 0: 0xF0
2216	 1D9	SHR		 	 
- stack 1: 0x570
- stack 0: 0x17C
2217	 1DA	JUMP		 	 
- stack 0: 0x570
2218	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x570
2219	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
2220	 17E	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x17CFFFF00D4019001DB000101FA00020214FFE40086000D019B000001B50000
2221	 17F	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x17CFFFF00D4019001DB000101FA00020214FFE40086000D019B000001B50000
- stack 0: 0xE0
2222	 181	SHR		 	 
- stack 1: 0x570
- stack 0: 0x17CFFFF
2223	 182	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
2224	 185	AND		 	 
- stack 1: 0x570
- stack 0: 0xFFFF
2225	 186	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0xFFFF
- stack 0: 0x1
2226	 188	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2227	 189	PUSH2	0040	 	 
- stack 2: 0x570
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2228	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x570
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
2229	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x570
- stack 0: 0xEFFFFFFF
2230	 18E	PUSH2	0040	 	 
- stack 2: 0x570
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
2231	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x570
2232	 192	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2233	 194	ADD		 	 
- stack 0: 0x574
2234	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2235	 196	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xD4019001DB000101FA00020214FFE40086000D019B000001B5000002560000
2236	 197	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0xD4019001DB000101FA00020214FFE40086000D019B000001B5000002560000
- stack 0: 0xF0
2237	 199	SHR		 	 
- stack 1: 0x574
- stack 0: 0xD4
2238	 19A	JUMP		 	 
- stack 0: 0x574
2239	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x574
2240	 D5	PUSH2	0040	 	 
- stack 1: 0x574
- stack 0: 0x40
2241	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x574
- stack 0: 0xEFFFFFFF
2242	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x574
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
2243	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x574
- stack 0: 0xEFFFFFFF
2244	 DF	PUSH2	0020	 	 
- stack 2: 0x574
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
2245	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x574
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
2246	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x574
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
2247	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x574
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
2248	 E9	LT		 	  ;; # bltu
- stack 1: 0x574
- stack 0: 0x0
2249	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0xF2
2250	 ED	JUMPI		 	 
- stack 0: 0x574
2251	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x574
- stack 0: 0x10C
2252	 F1	JUMP		 	 
- stack 0: 0x574
2253	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x574
2254	 10D	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2255	 10F	ADD		 	 
- stack 0: 0x578
2256	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2257	 111	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1DB000101FA00020214FFE40086000D019B000001B500000256000001C80000
2258	 112	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1DB000101FA00020214FFE40086000D019B000001B500000256000001C80000
- stack 0: 0xF0
2259	 114	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1DB
2260	 115	JUMP		 	 
- stack 0: 0x578
2261	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x578
2262	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2263	 1DD	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1DB000101FA00020214FFE40086000D019B000001B500000256000001C80000
2264	 1DE	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x1DB000101FA00020214FFE40086000D019B000001B500000256000001C80000
- stack 0: 0xE0
2265	 1E0	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1DB0001
2266	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
2267	 1E4	AND		 	 
- stack 1: 0x578
- stack 0: 0x1
2268	 1E5	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x1
2269	 1E7	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x1
2270	 1E8	PUSH2	0080	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x80
2271	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x1
2272	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x578
- stack 0: 0x2
2273	 1ED	PUSH2	0080	 	 
- stack 2: 0x578
- stack 1: 0x2
- stack 0: 0x80
2274	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x578
2275	 1F1	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2276	 1F3	ADD		 	 
- stack 0: 0x57C
2277	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2278	 1F5	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1FA00020214FFE40086000D019B000001B500000256000001C80000017CFFFF
2279	 1F6	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x1FA00020214FFE40086000D019B000001B500000256000001C80000017CFFFF
- stack 0: 0xF0
2280	 1F8	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1FA
2281	 1F9	JUMP		 	 
- stack 0: 0x57C
2282	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x57C
2283	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2284	 1FC	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1FA00020214FFE40086000D019B000001B500000256000001C80000017CFFFF
2285	 1FD	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x1FA00020214FFE40086000D019B000001B500000256000001C80000017CFFFF
- stack 0: 0xE0
2286	 1FF	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1FA0002
2287	 200	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
2288	 203	AND		 	 
- stack 1: 0x57C
- stack 0: 0x2
2289	 204	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0x1
2290	 206	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x2
2291	 207	PUSH2	00A0	 	 
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0xA0
2292	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x57C
2293	 20B	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2294	 20D	ADD		 	 
- stack 0: 0x580
2295	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2296	 20F	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x214FFE40086000D019B000001B500000256000001C80000017CFFFF02560000
2297	 210	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x214FFE40086000D019B000001B500000256000001C80000017CFFFF02560000
- stack 0: 0xF0
2298	 212	SHR		 	 
- stack 1: 0x580
- stack 0: 0x214
2299	 213	JUMP		 	 
- stack 0: 0x580
2300	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x580
2301	 215	PUSH2	0080	 	 
- stack 1: 0x580
- stack 0: 0x80
2302	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x580
- stack 0: 0x2
2303	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2304	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x580
- stack 0: 0x2
2305	 21F	PUSH2	00A0	 	 
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0xA0
2306	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0x2
2307	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x580
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2308	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0x2
2309	 229	SUB		 	 
- stack 1: 0x580
- stack 0: 0x0
2310	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x232
2311	 22D	JUMPI		 	 
- stack 0: 0x580
2312	 22E	PUSH2	024C	 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 1: 0x580
- stack 0: 0x24C
2313	 231	JUMP		 	 
- stack 0: 0x580
2314	 24C	JUMPDEST		 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x580
2315	 24D	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2316	 24F	ADD		 	 
- stack 0: 0x584
2317	 250	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2318	 251	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x86000D019B000001B500000256000001C80000017CFFFF0256000000D40164
2319	 252	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x86000D019B000001B500000256000001C80000017CFFFF0256000000D40164
- stack 0: 0xF0
2320	 254	SHR		 	 
- stack 1: 0x584
- stack 0: 0x86
2321	 255	JUMP		 	 
- stack 0: 0x584
2322	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x584
2323	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2324	 88	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x86000D019B000001B500000256000001C80000017CFFFF0256000000D40164
2325	 89	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x86000D019B000001B500000256000001C80000017CFFFF0256000000D40164
- stack 0: 0xE0
2326	 8B	SHR		 	 
- stack 1: 0x584
- stack 0: 0x86000D
2327	 8C	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x86000D
- stack 0: 0xFFFF
2328	 8F	AND		 	 
- stack 1: 0x584
- stack 0: 0xD
2329	 90	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0xD
- stack 0: 0x1
2330	 92	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0xD
2331	 93	PUSH2	0380	 	 
- stack 2: 0x584
- stack 1: 0xD
- stack 0: 0x380
2332	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x584
2333	 97	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2334	 99	ADD		 	 
- stack 0: 0x588
2335	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2336	 9B	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x19B000001B500000256000001C80000017CFFFF0256000000D4016401DB0001
2337	 9C	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x19B000001B500000256000001C80000017CFFFF0256000000D4016401DB0001
- stack 0: 0xF0
2338	 9E	SHR		 	 
- stack 1: 0x588
- stack 0: 0x19B
2339	 9F	JUMP		 	 
- stack 0: 0x588
2340	 19B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x588
2341	 19C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2342	 19D	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x19B000001B500000256000001C80000017CFFFF0256000000D4016401DB0001
2343	 19E	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x19B000001B500000256000001C80000017CFFFF0256000000D4016401DB0001
- stack 0: 0xE0
2344	 1A0	SHR		 	 
- stack 1: 0x588
- stack 0: 0x19B0000
2345	 1A1	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x19B0000
- stack 0: 0xFFFF
2346	 1A4	AND		 	 
- stack 1: 0x588
- stack 0: 0x0
2347	 1A5	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x1
2348	 1A7	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x0
2349	 1A8	PUSH2	0080	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x80
2350	 1AB	MSTORE		 	  ;; # store to x4
- stack 0: 0x588
2351	 1AC	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2352	 1AE	ADD		 	 
- stack 0: 0x58C
2353	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2354	 1B0	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1B500000256000001C80000017CFFFF0256000000D4016401DB000101FA0002
2355	 1B1	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x1B500000256000001C80000017CFFFF0256000000D4016401DB000101FA0002
- stack 0: 0xF0
2356	 1B3	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x1B5
2357	 1B4	JUMP		 	 
- stack 0: 0x58C
2358	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x58C
2359	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x58C
- stack 0: 0xF0000000
2360	 1BB	PUSH2	0020	 	 
- stack 2: 0x58C
- stack 1: 0xF0000000
- stack 0: 0x20
2361	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x58C
2362	 1BF	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2363	 1C1	ADD		 	 
- stack 0: 0x590
2364	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2365	 1C3	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x256000001C80000017CFFFF0256000000D4016401DB000101FA00020214FFE0
2366	 1C4	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x256000001C80000017CFFFF0256000000D4016401DB000101FA00020214FFE0
- stack 0: 0xF0
2367	 1C6	SHR		 	 
- stack 1: 0x590
- stack 0: 0x256
2368	 1C7	JUMP		 	 
- stack 0: 0x590
2369	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x590
2370	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2371	 258	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x256000001C80000017CFFFF0256000000D4016401DB000101FA00020214FFE0
2372	 259	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x256000001C80000017CFFFF0256000000D4016401DB000101FA00020214FFE0
- stack 0: 0xE0
2373	 25B	SHR		 	 
- stack 1: 0x590
- stack 0: 0x2560000
2374	 25C	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x2560000
- stack 0: 0xFFFF
2375	 25F	AND		 	 
- stack 1: 0x590
- stack 0: 0x0
2376	 260	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x1
2377	 262	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x0
2378	 263	POP		 	 
- stack 0: 0x590
2379	 264	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2380	 266	ADD		 	 
- stack 0: 0x594
2381	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2382	 268	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1C80000017CFFFF0256000000D4016401DB000101FA00020214FFE00086000E
2383	 269	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x1C80000017CFFFF0256000000D4016401DB000101FA00020214FFE00086000E
- stack 0: 0xF0
2384	 26B	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1C8
2385	 26C	JUMP		 	 
- stack 0: 0x594
2386	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x594
2387	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x594
- stack 0: 0xF0000000
2388	 1CE	PUSH2	0040	 	 
- stack 2: 0x594
- stack 1: 0xF0000000
- stack 0: 0x40
2389	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x594
2390	 1D2	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2391	 1D4	ADD		 	 
- stack 0: 0x598
2392	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2393	 1D6	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x17CFFFF0256000000D4016401DB000101FA00020214FFE00086000E019B0000
2394	 1D7	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x17CFFFF0256000000D4016401DB000101FA00020214FFE00086000E019B0000
- stack 0: 0xF0
2395	 1D9	SHR		 	 
- stack 1: 0x598
- stack 0: 0x17C
2396	 1DA	JUMP		 	 
- stack 0: 0x598
2397	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x598
2398	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2399	 17E	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x17CFFFF0256000000D4016401DB000101FA00020214FFE00086000E019B0000
2400	 17F	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x17CFFFF0256000000D4016401DB000101FA00020214FFE00086000E019B0000
- stack 0: 0xE0
2401	 181	SHR		 	 
- stack 1: 0x598
- stack 0: 0x17CFFFF
2402	 182	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
2403	 185	AND		 	 
- stack 1: 0x598
- stack 0: 0xFFFF
2404	 186	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0xFFFF
- stack 0: 0x1
2405	 188	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2406	 189	PUSH2	0040	 	 
- stack 2: 0x598
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2407	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x598
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
2408	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x598
- stack 0: 0xEFFFFFFF
2409	 18E	PUSH2	0040	 	 
- stack 2: 0x598
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
2410	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x598
2411	 192	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2412	 194	ADD		 	 
- stack 0: 0x59C
2413	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2414	 196	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x256000000D4016401DB000101FA00020214FFE00086000E019B000001B50000
2415	 197	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x256000000D4016401DB000101FA00020214FFE00086000E019B000001B50000
- stack 0: 0xF0
2416	 199	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x256
2417	 19A	JUMP		 	 
- stack 0: 0x59C
2418	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x59C
2419	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2420	 258	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x256000000D4016401DB000101FA00020214FFE00086000E019B000001B50000
2421	 259	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x256000000D4016401DB000101FA00020214FFE00086000E019B000001B50000
- stack 0: 0xE0
2422	 25B	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x2560000
2423	 25C	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x2560000
- stack 0: 0xFFFF
2424	 25F	AND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2425	 260	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1
2426	 262	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2427	 263	POP		 	 
- stack 0: 0x59C
2428	 264	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2429	 266	ADD		 	 
- stack 0: 0x5A0
2430	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2431	 268	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xD4016401DB000101FA00020214FFE00086000E019B000001B5000002560000
2432	 269	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0xD4016401DB000101FA00020214FFE00086000E019B000001B5000002560000
- stack 0: 0xF0
2433	 26B	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xD4
2434	 26C	JUMP		 	 
- stack 0: 0x5A0
2435	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x5A0
2436	 D5	PUSH2	0040	 	 
- stack 1: 0x5A0
- stack 0: 0x40
2437	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5A0
- stack 0: 0xEFFFFFFF
2438	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A0
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
2439	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A0
- stack 0: 0xEFFFFFFF
2440	 DF	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
2441	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A0
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
2442	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A0
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
2443	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A0
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
2444	 E9	LT		 	  ;; # bltu
- stack 1: 0x5A0
- stack 0: 0x0
2445	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0xF2
2446	 ED	JUMPI		 	 
- stack 0: 0x5A0
2447	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x5A0
- stack 0: 0x10C
2448	 F1	JUMP		 	 
- stack 0: 0x5A0
2449	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x5A0
2450	 10D	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2451	 10F	ADD		 	 
- stack 0: 0x5A4
2452	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2453	 111	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1DB000101FA00020214FFE00086000E019B000001B500000256000002560000
2454	 112	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x1DB000101FA00020214FFE00086000E019B000001B500000256000002560000
- stack 0: 0xF0
2455	 114	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1DB
2456	 115	JUMP		 	 
- stack 0: 0x5A4
2457	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5A4
2458	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2459	 1DD	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1DB000101FA00020214FFE00086000E019B000001B500000256000002560000
2460	 1DE	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x1DB000101FA00020214FFE00086000E019B000001B500000256000002560000
- stack 0: 0xE0
2461	 1E0	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1DB0001
2462	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
2463	 1E4	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x1
2464	 1E5	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x1
2465	 1E7	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x1
2466	 1E8	PUSH2	0080	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x80
2467	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x0
2468	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x5A4
- stack 0: 0x1
2469	 1ED	PUSH2	0080	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x80
2470	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x5A4
2471	 1F1	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2472	 1F3	ADD		 	 
- stack 0: 0x5A8
2473	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2474	 1F5	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1FA00020214FFE00086000E019B000001B50000025600000256000001C80000
2475	 1F6	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x1FA00020214FFE00086000E019B000001B50000025600000256000001C80000
- stack 0: 0xF0
2476	 1F8	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1FA
2477	 1F9	JUMP		 	 
- stack 0: 0x5A8
2478	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5A8
2479	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2480	 1FC	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1FA00020214FFE00086000E019B000001B50000025600000256000001C80000
2481	 1FD	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x1FA00020214FFE00086000E019B000001B50000025600000256000001C80000
- stack 0: 0xE0
2482	 1FF	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1FA0002
2483	 200	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
2484	 203	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x2
2485	 204	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0x1
2486	 206	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x2
2487	 207	PUSH2	00A0	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0xA0
2488	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x5A8
2489	 20B	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2490	 20D	ADD		 	 
- stack 0: 0x5AC
2491	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2492	 20F	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x214FFE00086000E019B000001B50000025600000256000001C80000017CFFFF
2493	 210	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x214FFE00086000E019B000001B50000025600000256000001C80000017CFFFF
- stack 0: 0xF0
2494	 212	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x214
2495	 213	JUMP		 	 
- stack 0: 0x5AC
2496	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5AC
2497	 215	PUSH2	0080	 	 
- stack 1: 0x5AC
- stack 0: 0x80
2498	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x5AC
- stack 0: 0x1
2499	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2500	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5AC
- stack 0: 0x1
2501	 21F	PUSH2	00A0	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0xA0
2502	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x2
2503	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5AC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2504	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x2
2505	 229	SUB		 	 
- stack 1: 0x5AC
- stack 0: 0x1
2506	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x232
2507	 22D	JUMPI		 	 
- stack 0: 0x5AC
2508	 232	JUMPDEST		 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x5AC
2509	 233	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2510	 234	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x214FFE00086000E019B000001B50000025600000256000001C80000017CFFFF
2511	 235	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x214FFE00086000E019B000001B50000025600000256000001C80000017CFFFF
- stack 0: 0xE0
2512	 237	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x214FFE0
2513	 238	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x214FFE0
- stack 0: 0xFFFF
2514	 23B	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFE0
2515	 23C	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xFFE0
- stack 0: 0x1
2516	 23E	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
2517	 23F	ADD		 	 
- stack 0: 0x58C
2518	 240	PUSH4	FFFFFFFF	 	 
- stack 1: 0x58C
- stack 0: 0xFFFFFFFF
2519	 245	AND		 	  ;; # mask to 32 bits
- stack 0: 0x58C
2520	 246	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2521	 247	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1B500000256000001C80000017CFFFF0256000000D4016401DB000101FA0002
2522	 248	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x1B500000256000001C80000017CFFFF0256000000D4016401DB000101FA0002
- stack 0: 0xF0
2523	 24A	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x1B5
2524	 24B	JUMP		 	 
- stack 0: 0x58C
2525	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x58C
2526	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x58C
- stack 0: 0xF0000000
2527	 1BB	PUSH2	0020	 	 
- stack 2: 0x58C
- stack 1: 0xF0000000
- stack 0: 0x20
2528	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x58C
2529	 1BF	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2530	 1C1	ADD		 	 
- stack 0: 0x590
2531	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2532	 1C3	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x256000001C80000017CFFFF0256000000D4016401DB000101FA00020214FFE0
2533	 1C4	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x256000001C80000017CFFFF0256000000D4016401DB000101FA00020214FFE0
- stack 0: 0xF0
2534	 1C6	SHR		 	 
- stack 1: 0x590
- stack 0: 0x256
2535	 1C7	JUMP		 	 
- stack 0: 0x590
2536	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x590
2537	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2538	 258	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x256000001C80000017CFFFF0256000000D4016401DB000101FA00020214FFE0
2539	 259	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x256000001C80000017CFFFF0256000000D4016401DB000101FA00020214FFE0
- stack 0: 0xE0
2540	 25B	SHR		 	 
- stack 1: 0x590
- stack 0: 0x2560000
2541	 25C	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x2560000
- stack 0: 0xFFFF
2542	 25F	AND		 	 
- stack 1: 0x590
- stack 0: 0x0
2543	 260	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x1
2544	 262	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x0
2545	 263	POP		 	 
- stack 0: 0x590
2546	 264	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2547	 266	ADD		 	 
- stack 0: 0x594
2548	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2549	 268	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1C80000017CFFFF0256000000D4016401DB000101FA00020214FFE00086000E
2550	 269	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x1C80000017CFFFF0256000000D4016401DB000101FA00020214FFE00086000E
- stack 0: 0xF0
2551	 26B	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1C8
2552	 26C	JUMP		 	 
- stack 0: 0x594
2553	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x594
2554	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x594
- stack 0: 0xF0000000
2555	 1CE	PUSH2	0040	 	 
- stack 2: 0x594
- stack 1: 0xF0000000
- stack 0: 0x40
2556	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x594
2557	 1D2	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2558	 1D4	ADD		 	 
- stack 0: 0x598
2559	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2560	 1D6	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x17CFFFF0256000000D4016401DB000101FA00020214FFE00086000E019B0000
2561	 1D7	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x17CFFFF0256000000D4016401DB000101FA00020214FFE00086000E019B0000
- stack 0: 0xF0
2562	 1D9	SHR		 	 
- stack 1: 0x598
- stack 0: 0x17C
2563	 1DA	JUMP		 	 
- stack 0: 0x598
2564	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x598
2565	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2566	 17E	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x17CFFFF0256000000D4016401DB000101FA00020214FFE00086000E019B0000
2567	 17F	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x17CFFFF0256000000D4016401DB000101FA00020214FFE00086000E019B0000
- stack 0: 0xE0
2568	 181	SHR		 	 
- stack 1: 0x598
- stack 0: 0x17CFFFF
2569	 182	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
2570	 185	AND		 	 
- stack 1: 0x598
- stack 0: 0xFFFF
2571	 186	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0xFFFF
- stack 0: 0x1
2572	 188	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2573	 189	PUSH2	0040	 	 
- stack 2: 0x598
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2574	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x598
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
2575	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x598
- stack 0: 0xEFFFFFFF
2576	 18E	PUSH2	0040	 	 
- stack 2: 0x598
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
2577	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x598
2578	 192	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2579	 194	ADD		 	 
- stack 0: 0x59C
2580	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2581	 196	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x256000000D4016401DB000101FA00020214FFE00086000E019B000001B50000
2582	 197	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x256000000D4016401DB000101FA00020214FFE00086000E019B000001B50000
- stack 0: 0xF0
2583	 199	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x256
2584	 19A	JUMP		 	 
- stack 0: 0x59C
2585	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x59C
2586	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2587	 258	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x256000000D4016401DB000101FA00020214FFE00086000E019B000001B50000
2588	 259	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x256000000D4016401DB000101FA00020214FFE00086000E019B000001B50000
- stack 0: 0xE0
2589	 25B	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x2560000
2590	 25C	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x2560000
- stack 0: 0xFFFF
2591	 25F	AND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2592	 260	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1
2593	 262	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2594	 263	POP		 	 
- stack 0: 0x59C
2595	 264	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2596	 266	ADD		 	 
- stack 0: 0x5A0
2597	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2598	 268	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xD4016401DB000101FA00020214FFE00086000E019B000001B5000002560000
2599	 269	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0xD4016401DB000101FA00020214FFE00086000E019B000001B5000002560000
- stack 0: 0xF0
2600	 26B	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xD4
2601	 26C	JUMP		 	 
- stack 0: 0x5A0
2602	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x5A0
2603	 D5	PUSH2	0040	 	 
- stack 1: 0x5A0
- stack 0: 0x40
2604	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5A0
- stack 0: 0xEFFFFFFF
2605	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A0
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
2606	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A0
- stack 0: 0xEFFFFFFF
2607	 DF	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
2608	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A0
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
2609	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A0
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
2610	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A0
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
2611	 E9	LT		 	  ;; # bltu
- stack 1: 0x5A0
- stack 0: 0x0
2612	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0xF2
2613	 ED	JUMPI		 	 
- stack 0: 0x5A0
2614	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x5A0
- stack 0: 0x10C
2615	 F1	JUMP		 	 
- stack 0: 0x5A0
2616	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x5A0
2617	 10D	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2618	 10F	ADD		 	 
- stack 0: 0x5A4
2619	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2620	 111	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1DB000101FA00020214FFE00086000E019B000001B500000256000002560000
2621	 112	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x1DB000101FA00020214FFE00086000E019B000001B500000256000002560000
- stack 0: 0xF0
2622	 114	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1DB
2623	 115	JUMP		 	 
- stack 0: 0x5A4
2624	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5A4
2625	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2626	 1DD	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1DB000101FA00020214FFE00086000E019B000001B500000256000002560000
2627	 1DE	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x1DB000101FA00020214FFE00086000E019B000001B500000256000002560000
- stack 0: 0xE0
2628	 1E0	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1DB0001
2629	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
2630	 1E4	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x1
2631	 1E5	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x1
2632	 1E7	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x1
2633	 1E8	PUSH2	0080	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x80
2634	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x1
2635	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x5A4
- stack 0: 0x2
2636	 1ED	PUSH2	0080	 	 
- stack 2: 0x5A4
- stack 1: 0x2
- stack 0: 0x80
2637	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x5A4
2638	 1F1	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2639	 1F3	ADD		 	 
- stack 0: 0x5A8
2640	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2641	 1F5	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1FA00020214FFE00086000E019B000001B50000025600000256000001C80000
2642	 1F6	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x1FA00020214FFE00086000E019B000001B50000025600000256000001C80000
- stack 0: 0xF0
2643	 1F8	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1FA
2644	 1F9	JUMP		 	 
- stack 0: 0x5A8
2645	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5A8
2646	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2647	 1FC	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1FA00020214FFE00086000E019B000001B50000025600000256000001C80000
2648	 1FD	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x1FA00020214FFE00086000E019B000001B50000025600000256000001C80000
- stack 0: 0xE0
2649	 1FF	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1FA0002
2650	 200	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
2651	 203	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x2
2652	 204	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0x1
2653	 206	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x2
2654	 207	PUSH2	00A0	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0xA0
2655	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x5A8
2656	 20B	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2657	 20D	ADD		 	 
- stack 0: 0x5AC
2658	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2659	 20F	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x214FFE00086000E019B000001B50000025600000256000001C80000017CFFFF
2660	 210	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x214FFE00086000E019B000001B50000025600000256000001C80000017CFFFF
- stack 0: 0xF0
2661	 212	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x214
2662	 213	JUMP		 	 
- stack 0: 0x5AC
2663	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5AC
2664	 215	PUSH2	0080	 	 
- stack 1: 0x5AC
- stack 0: 0x80
2665	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x5AC
- stack 0: 0x2
2666	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2667	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5AC
- stack 0: 0x2
2668	 21F	PUSH2	00A0	 	 
- stack 2: 0x5AC
- stack 1: 0x2
- stack 0: 0xA0
2669	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x5AC
- stack 1: 0x2
- stack 0: 0x2
2670	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5AC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2671	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5AC
- stack 1: 0x2
- stack 0: 0x2
2672	 229	SUB		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2673	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x232
2674	 22D	JUMPI		 	 
- stack 0: 0x5AC
2675	 22E	PUSH2	024C	 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 1: 0x5AC
- stack 0: 0x24C
2676	 231	JUMP		 	 
- stack 0: 0x5AC
2677	 24C	JUMPDEST		 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x5AC
2678	 24D	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2679	 24F	ADD		 	 
- stack 0: 0x5B0
2680	 250	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2681	 251	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x86000E019B000001B50000025600000256000001C80000017CFFFF00D40138
2682	 252	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x86000E019B000001B50000025600000256000001C80000017CFFFF00D40138
- stack 0: 0xF0
2683	 254	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x86
2684	 255	JUMP		 	 
- stack 0: 0x5B0
2685	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5B0
2686	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2687	 88	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x86000E019B000001B50000025600000256000001C80000017CFFFF00D40138
2688	 89	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x86000E019B000001B50000025600000256000001C80000017CFFFF00D40138
- stack 0: 0xE0
2689	 8B	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x86000E
2690	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x86000E
- stack 0: 0xFFFF
2691	 8F	AND		 	 
- stack 1: 0x5B0
- stack 0: 0xE
2692	 90	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0xE
- stack 0: 0x1
2693	 92	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0xE
2694	 93	PUSH2	0380	 	 
- stack 2: 0x5B0
- stack 1: 0xE
- stack 0: 0x380
2695	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x5B0
2696	 97	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2697	 99	ADD		 	 
- stack 0: 0x5B4
2698	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2699	 9B	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x19B000001B50000025600000256000001C80000017CFFFF00D4013801DB0001
2700	 9C	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x19B000001B50000025600000256000001C80000017CFFFF00D4013801DB0001
- stack 0: 0xF0
2701	 9E	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x19B
2702	 9F	JUMP		 	 
- stack 0: 0x5B4
2703	 19B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5B4
2704	 19C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2705	 19D	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x19B000001B50000025600000256000001C80000017CFFFF00D4013801DB0001
2706	 19E	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x19B000001B50000025600000256000001C80000017CFFFF00D4013801DB0001
- stack 0: 0xE0
2707	 1A0	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x19B0000
2708	 1A1	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x19B0000
- stack 0: 0xFFFF
2709	 1A4	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2710	 1A5	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x1
2711	 1A7	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2712	 1A8	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x80
2713	 1AB	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B4
2714	 1AC	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2715	 1AE	ADD		 	 
- stack 0: 0x5B8
2716	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2717	 1B0	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1B50000025600000256000001C80000017CFFFF00D4013801DB000101FA0002
2718	 1B1	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x1B50000025600000256000001C80000017CFFFF00D4013801DB000101FA0002
- stack 0: 0xF0
2719	 1B3	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1B5
2720	 1B4	JUMP		 	 
- stack 0: 0x5B8
2721	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x5B8
2722	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x5B8
- stack 0: 0xF0000000
2723	 1BB	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0xF0000000
- stack 0: 0x20
2724	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B8
2725	 1BF	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2726	 1C1	ADD		 	 
- stack 0: 0x5BC
2727	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2728	 1C3	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x25600000256000001C80000017CFFFF00D4013801DB000101FA00020214FFE0
2729	 1C4	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x25600000256000001C80000017CFFFF00D4013801DB000101FA00020214FFE0
- stack 0: 0xF0
2730	 1C6	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x256
2731	 1C7	JUMP		 	 
- stack 0: 0x5BC
2732	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5BC
2733	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2734	 258	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x25600000256000001C80000017CFFFF00D4013801DB000101FA00020214FFE0
2735	 259	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x25600000256000001C80000017CFFFF00D4013801DB000101FA00020214FFE0
- stack 0: 0xE0
2736	 25B	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x2560000
2737	 25C	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x2560000
- stack 0: 0xFFFF
2738	 25F	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2739	 260	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x1
2740	 262	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2741	 263	POP		 	 
- stack 0: 0x5BC
2742	 264	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2743	 266	ADD		 	 
- stack 0: 0x5C0
2744	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2745	 268	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x256000001C80000017CFFFF00D4013801DB000101FA00020214FFE00086000F
2746	 269	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x256000001C80000017CFFFF00D4013801DB000101FA00020214FFE00086000F
- stack 0: 0xF0
2747	 26B	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x256
2748	 26C	JUMP		 	 
- stack 0: 0x5C0
2749	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5C0
2750	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2751	 258	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x256000001C80000017CFFFF00D4013801DB000101FA00020214FFE00086000F
2752	 259	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x256000001C80000017CFFFF00D4013801DB000101FA00020214FFE00086000F
- stack 0: 0xE0
2753	 25B	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x2560000
2754	 25C	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x2560000
- stack 0: 0xFFFF
2755	 25F	AND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2756	 260	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x1
2757	 262	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2758	 263	POP		 	 
- stack 0: 0x5C0
2759	 264	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2760	 266	ADD		 	 
- stack 0: 0x5C4
2761	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2762	 268	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x1C80000017CFFFF00D4013801DB000101FA00020214FFE00086000F019B0000
2763	 269	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x1C80000017CFFFF00D4013801DB000101FA00020214FFE00086000F019B0000
- stack 0: 0xF0
2764	 26B	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x1C8
2765	 26C	JUMP		 	 
- stack 0: 0x5C4
2766	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x5C4
2767	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x5C4
- stack 0: 0xF0000000
2768	 1CE	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0xF0000000
- stack 0: 0x40
2769	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C4
2770	 1D2	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2771	 1D4	ADD		 	 
- stack 0: 0x5C8
2772	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2773	 1D6	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x17CFFFF00D4013801DB000101FA00020214FFE00086000F019B000001B50000
2774	 1D7	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x17CFFFF00D4013801DB000101FA00020214FFE00086000F019B000001B50000
- stack 0: 0xF0
2775	 1D9	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x17C
2776	 1DA	JUMP		 	 
- stack 0: 0x5C8
2777	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x5C8
2778	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2779	 17E	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x17CFFFF00D4013801DB000101FA00020214FFE00086000F019B000001B50000
2780	 17F	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x17CFFFF00D4013801DB000101FA00020214FFE00086000F019B000001B50000
- stack 0: 0xE0
2781	 181	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x17CFFFF
2782	 182	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
2783	 185	AND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFFF
2784	 186	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFF
- stack 0: 0x1
2785	 188	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2786	 189	PUSH2	0040	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2787	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
2788	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x5C8
- stack 0: 0xEFFFFFFF
2789	 18E	PUSH2	0040	 	 
- stack 2: 0x5C8
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
2790	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C8
2791	 192	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2792	 194	ADD		 	 
- stack 0: 0x5CC
2793	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2794	 196	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xD4013801DB000101FA00020214FFE00086000F019B000001B5000001C80000
2795	 197	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xD4013801DB000101FA00020214FFE00086000F019B000001B5000001C80000
- stack 0: 0xF0
2796	 199	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xD4
2797	 19A	JUMP		 	 
- stack 0: 0x5CC
2798	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x5CC
2799	 D5	PUSH2	0040	 	 
- stack 1: 0x5CC
- stack 0: 0x40
2800	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5CC
- stack 0: 0xEFFFFFFF
2801	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5CC
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
2802	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5CC
- stack 0: 0xEFFFFFFF
2803	 DF	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
2804	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5CC
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
2805	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5CC
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
2806	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5CC
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
2807	 E9	LT		 	  ;; # bltu
- stack 1: 0x5CC
- stack 0: 0x0
2808	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0xF2
2809	 ED	JUMPI		 	 
- stack 0: 0x5CC
2810	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x5CC
- stack 0: 0x10C
2811	 F1	JUMP		 	 
- stack 0: 0x5CC
2812	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x5CC
2813	 10D	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2814	 10F	ADD		 	 
- stack 0: 0x5D0
2815	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2816	 111	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x1DB000101FA00020214FFE00086000F019B000001B5000001C80000017CFFFF
2817	 112	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x1DB000101FA00020214FFE00086000F019B000001B5000001C80000017CFFFF
- stack 0: 0xF0
2818	 114	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x1DB
2819	 115	JUMP		 	 
- stack 0: 0x5D0
2820	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D0
2821	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2822	 1DD	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x1DB000101FA00020214FFE00086000F019B000001B5000001C80000017CFFFF
2823	 1DE	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x1DB000101FA00020214FFE00086000F019B000001B5000001C80000017CFFFF
- stack 0: 0xE0
2824	 1E0	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x1DB0001
2825	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
2826	 1E4	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x1
2827	 1E5	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x1
2828	 1E7	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x1
2829	 1E8	PUSH2	0080	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x80
2830	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x0
2831	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D0
- stack 0: 0x1
2832	 1ED	PUSH2	0080	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x80
2833	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D0
2834	 1F1	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2835	 1F3	ADD		 	 
- stack 0: 0x5D4
2836	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2837	 1F5	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x1FA00020214FFE00086000F019B000001B5000001C80000017CFFFF00D40114
2838	 1F6	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x1FA00020214FFE00086000F019B000001B5000001C80000017CFFFF00D40114
- stack 0: 0xF0
2839	 1F8	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x1FA
2840	 1F9	JUMP		 	 
- stack 0: 0x5D4
2841	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D4
2842	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2843	 1FC	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x1FA00020214FFE00086000F019B000001B5000001C80000017CFFFF00D40114
2844	 1FD	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x1FA00020214FFE00086000F019B000001B5000001C80000017CFFFF00D40114
- stack 0: 0xE0
2845	 1FF	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x1FA0002
2846	 200	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
2847	 203	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x2
2848	 204	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x1
2849	 206	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x2
2850	 207	PUSH2	00A0	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0xA0
2851	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D4
2852	 20B	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2853	 20D	ADD		 	 
- stack 0: 0x5D8
2854	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2855	 20F	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x214FFE00086000F019B000001B5000001C80000017CFFFF00D4011401DB0001
2856	 210	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x214FFE00086000F019B000001B5000001C80000017CFFFF00D4011401DB0001
- stack 0: 0xF0
2857	 212	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x214
2858	 213	JUMP		 	 
- stack 0: 0x5D8
2859	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5D8
2860	 215	PUSH2	0080	 	 
- stack 1: 0x5D8
- stack 0: 0x80
2861	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D8
- stack 0: 0x1
2862	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2863	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D8
- stack 0: 0x1
2864	 21F	PUSH2	00A0	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0xA0
2865	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x2
2866	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2867	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x2
2868	 229	SUB		 	 
- stack 1: 0x5D8
- stack 0: 0x1
2869	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x232
2870	 22D	JUMPI		 	 
- stack 0: 0x5D8
2871	 232	JUMPDEST		 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x5D8
2872	 233	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2873	 234	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x214FFE00086000F019B000001B5000001C80000017CFFFF00D4011401DB0001
2874	 235	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x214FFE00086000F019B000001B5000001C80000017CFFFF00D4011401DB0001
- stack 0: 0xE0
2875	 237	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x214FFE0
2876	 238	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x214FFE0
- stack 0: 0xFFFF
2877	 23B	AND		 	 
- stack 1: 0x5D8
- stack 0: 0xFFE0
2878	 23C	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0xFFE0
- stack 0: 0x1
2879	 23E	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
2880	 23F	ADD		 	 
- stack 0: 0x5B8
2881	 240	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5B8
- stack 0: 0xFFFFFFFF
2882	 245	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5B8
2883	 246	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2884	 247	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1B50000025600000256000001C80000017CFFFF00D4013801DB000101FA0002
2885	 248	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x1B50000025600000256000001C80000017CFFFF00D4013801DB000101FA0002
- stack 0: 0xF0
2886	 24A	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1B5
2887	 24B	JUMP		 	 
- stack 0: 0x5B8
2888	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x5B8
2889	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x5B8
- stack 0: 0xF0000000
2890	 1BB	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0xF0000000
- stack 0: 0x20
2891	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B8
2892	 1BF	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2893	 1C1	ADD		 	 
- stack 0: 0x5BC
2894	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2895	 1C3	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x25600000256000001C80000017CFFFF00D4013801DB000101FA00020214FFE0
2896	 1C4	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x25600000256000001C80000017CFFFF00D4013801DB000101FA00020214FFE0
- stack 0: 0xF0
2897	 1C6	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x256
2898	 1C7	JUMP		 	 
- stack 0: 0x5BC
2899	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5BC
2900	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2901	 258	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x25600000256000001C80000017CFFFF00D4013801DB000101FA00020214FFE0
2902	 259	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x25600000256000001C80000017CFFFF00D4013801DB000101FA00020214FFE0
- stack 0: 0xE0
2903	 25B	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x2560000
2904	 25C	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x2560000
- stack 0: 0xFFFF
2905	 25F	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2906	 260	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x1
2907	 262	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2908	 263	POP		 	 
- stack 0: 0x5BC
2909	 264	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2910	 266	ADD		 	 
- stack 0: 0x5C0
2911	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2912	 268	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x256000001C80000017CFFFF00D4013801DB000101FA00020214FFE00086000F
2913	 269	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x256000001C80000017CFFFF00D4013801DB000101FA00020214FFE00086000F
- stack 0: 0xF0
2914	 26B	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x256
2915	 26C	JUMP		 	 
- stack 0: 0x5C0
2916	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5C0
2917	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2918	 258	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x256000001C80000017CFFFF00D4013801DB000101FA00020214FFE00086000F
2919	 259	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x256000001C80000017CFFFF00D4013801DB000101FA00020214FFE00086000F
- stack 0: 0xE0
2920	 25B	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x2560000
2921	 25C	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x2560000
- stack 0: 0xFFFF
2922	 25F	AND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2923	 260	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x1
2924	 262	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2925	 263	POP		 	 
- stack 0: 0x5C0
2926	 264	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2927	 266	ADD		 	 
- stack 0: 0x5C4
2928	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2929	 268	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x1C80000017CFFFF00D4013801DB000101FA00020214FFE00086000F019B0000
2930	 269	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x1C80000017CFFFF00D4013801DB000101FA00020214FFE00086000F019B0000
- stack 0: 0xF0
2931	 26B	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x1C8
2932	 26C	JUMP		 	 
- stack 0: 0x5C4
2933	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x5C4
2934	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x5C4
- stack 0: 0xF0000000
2935	 1CE	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0xF0000000
- stack 0: 0x40
2936	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C4
2937	 1D2	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2938	 1D4	ADD		 	 
- stack 0: 0x5C8
2939	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2940	 1D6	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x17CFFFF00D4013801DB000101FA00020214FFE00086000F019B000001B50000
2941	 1D7	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x17CFFFF00D4013801DB000101FA00020214FFE00086000F019B000001B50000
- stack 0: 0xF0
2942	 1D9	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x17C
2943	 1DA	JUMP		 	 
- stack 0: 0x5C8
2944	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x5C8
2945	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2946	 17E	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x17CFFFF00D4013801DB000101FA00020214FFE00086000F019B000001B50000
2947	 17F	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x17CFFFF00D4013801DB000101FA00020214FFE00086000F019B000001B50000
- stack 0: 0xE0
2948	 181	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x17CFFFF
2949	 182	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
2950	 185	AND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFFF
2951	 186	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFF
- stack 0: 0x1
2952	 188	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2953	 189	PUSH2	0040	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2954	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
2955	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x5C8
- stack 0: 0xEFFFFFFF
2956	 18E	PUSH2	0040	 	 
- stack 2: 0x5C8
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
2957	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C8
2958	 192	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2959	 194	ADD		 	 
- stack 0: 0x5CC
2960	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2961	 196	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xD4013801DB000101FA00020214FFE00086000F019B000001B5000001C80000
2962	 197	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xD4013801DB000101FA00020214FFE00086000F019B000001B5000001C80000
- stack 0: 0xF0
2963	 199	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xD4
2964	 19A	JUMP		 	 
- stack 0: 0x5CC
2965	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x5CC
2966	 D5	PUSH2	0040	 	 
- stack 1: 0x5CC
- stack 0: 0x40
2967	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5CC
- stack 0: 0xEFFFFFFF
2968	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5CC
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
2969	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5CC
- stack 0: 0xEFFFFFFF
2970	 DF	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
2971	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5CC
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
2972	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5CC
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
2973	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5CC
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
2974	 E9	LT		 	  ;; # bltu
- stack 1: 0x5CC
- stack 0: 0x0
2975	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0xF2
2976	 ED	JUMPI		 	 
- stack 0: 0x5CC
2977	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x5CC
- stack 0: 0x10C
2978	 F1	JUMP		 	 
- stack 0: 0x5CC
2979	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x5CC
2980	 10D	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2981	 10F	ADD		 	 
- stack 0: 0x5D0
2982	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2983	 111	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x1DB000101FA00020214FFE00086000F019B000001B5000001C80000017CFFFF
2984	 112	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x1DB000101FA00020214FFE00086000F019B000001B5000001C80000017CFFFF
- stack 0: 0xF0
2985	 114	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x1DB
2986	 115	JUMP		 	 
- stack 0: 0x5D0
2987	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D0
2988	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2989	 1DD	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x1DB000101FA00020214FFE00086000F019B000001B5000001C80000017CFFFF
2990	 1DE	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x1DB000101FA00020214FFE00086000F019B000001B5000001C80000017CFFFF
- stack 0: 0xE0
2991	 1E0	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x1DB0001
2992	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
2993	 1E4	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x1
2994	 1E5	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x1
2995	 1E7	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x1
2996	 1E8	PUSH2	0080	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x80
2997	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x1
2998	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D0
- stack 0: 0x2
2999	 1ED	PUSH2	0080	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0x80
3000	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D0
3001	 1F1	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
3002	 1F3	ADD		 	 
- stack 0: 0x5D4
3003	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3004	 1F5	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x1FA00020214FFE00086000F019B000001B5000001C80000017CFFFF00D40114
3005	 1F6	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x1FA00020214FFE00086000F019B000001B5000001C80000017CFFFF00D40114
- stack 0: 0xF0
3006	 1F8	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x1FA
3007	 1F9	JUMP		 	 
- stack 0: 0x5D4
3008	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D4
3009	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
3010	 1FC	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x1FA00020214FFE00086000F019B000001B5000001C80000017CFFFF00D40114
3011	 1FD	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x1FA00020214FFE00086000F019B000001B5000001C80000017CFFFF00D40114
- stack 0: 0xE0
3012	 1FF	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x1FA0002
3013	 200	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
3014	 203	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x2
3015	 204	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x1
3016	 206	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x2
3017	 207	PUSH2	00A0	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0xA0
3018	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D4
3019	 20B	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3020	 20D	ADD		 	 
- stack 0: 0x5D8
3021	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3022	 20F	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x214FFE00086000F019B000001B5000001C80000017CFFFF00D4011401DB0001
3023	 210	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x214FFE00086000F019B000001B5000001C80000017CFFFF00D4011401DB0001
- stack 0: 0xF0
3024	 212	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x214
3025	 213	JUMP		 	 
- stack 0: 0x5D8
3026	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5D8
3027	 215	PUSH2	0080	 	 
- stack 1: 0x5D8
- stack 0: 0x80
3028	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D8
- stack 0: 0x2
3029	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3030	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D8
- stack 0: 0x2
3031	 21F	PUSH2	00A0	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0xA0
3032	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0x2
3033	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3034	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0x2
3035	 229	SUB		 	 
- stack 1: 0x5D8
- stack 0: 0x0
3036	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x5D8
- stack 1: 0x0
- stack 0: 0x232
3037	 22D	JUMPI		 	 
- stack 0: 0x5D8
3038	 22E	PUSH2	024C	 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 1: 0x5D8
- stack 0: 0x24C
3039	 231	JUMP		 	 
- stack 0: 0x5D8
3040	 24C	JUMPDEST		 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x5D8
3041	 24D	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3042	 24F	ADD		 	 
- stack 0: 0x5DC
3043	 250	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3044	 251	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x86000F019B000001B5000001C80000017CFFFF00D4011401DB000101FA0002
3045	 252	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x86000F019B000001B5000001C80000017CFFFF00D4011401DB000101FA0002
- stack 0: 0xF0
3046	 254	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x86
3047	 255	JUMP		 	 
- stack 0: 0x5DC
3048	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5DC
3049	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
3050	 88	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x86000F019B000001B5000001C80000017CFFFF00D4011401DB000101FA0002
3051	 89	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x86000F019B000001B5000001C80000017CFFFF00D4011401DB000101FA0002
- stack 0: 0xE0
3052	 8B	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x86000F
3053	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x86000F
- stack 0: 0xFFFF
3054	 8F	AND		 	 
- stack 1: 0x5DC
- stack 0: 0xF
3055	 90	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0x1
3056	 92	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0xF
3057	 93	PUSH2	0380	 	 
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0x380
3058	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x5DC
3059	 97	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
3060	 99	ADD		 	 
- stack 0: 0x5E0
3061	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
3062	 9B	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x19B000001B5000001C80000017CFFFF00D4011401DB000101FA00020214FFE8
3063	 9C	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x19B000001B5000001C80000017CFFFF00D4011401DB000101FA00020214FFE8
- stack 0: 0xF0
3064	 9E	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x19B
3065	 9F	JUMP		 	 
- stack 0: 0x5E0
3066	 19B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5E0
3067	 19C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
3068	 19D	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x19B000001B5000001C80000017CFFFF00D4011401DB000101FA00020214FFE8
3069	 19E	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x19B000001B5000001C80000017CFFFF00D4011401DB000101FA00020214FFE8
- stack 0: 0xE0
3070	 1A0	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x19B0000
3071	 1A1	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x19B0000
- stack 0: 0xFFFF
3072	 1A4	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x0
3073	 1A5	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x0
- stack 0: 0x1
3074	 1A7	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x0
3075	 1A8	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x0
- stack 0: 0x80
3076	 1AB	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E0
3077	 1AC	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
3078	 1AE	ADD		 	 
- stack 0: 0x5E4
3079	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3080	 1B0	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1B5000001C80000017CFFFF00D4011401DB000101FA00020214FFE800860010
3081	 1B1	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x1B5000001C80000017CFFFF00D4011401DB000101FA00020214FFE800860010
- stack 0: 0xF0
3082	 1B3	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1B5
3083	 1B4	JUMP		 	 
- stack 0: 0x5E4
3084	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x5E4
3085	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x5E4
- stack 0: 0xF0000000
3086	 1BB	PUSH2	0020	 	 
- stack 2: 0x5E4
- stack 1: 0xF0000000
- stack 0: 0x20
3087	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E4
3088	 1BF	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3089	 1C1	ADD		 	 
- stack 0: 0x5E8
3090	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3091	 1C3	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x1C80000017CFFFF00D4011401DB000101FA00020214FFE800860010019B0000
3092	 1C4	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x1C80000017CFFFF00D4011401DB000101FA00020214FFE800860010019B0000
- stack 0: 0xF0
3093	 1C6	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x1C8
3094	 1C7	JUMP		 	 
- stack 0: 0x5E8
3095	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x5E8
3096	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x5E8
- stack 0: 0xF0000000
3097	 1CE	PUSH2	0040	 	 
- stack 2: 0x5E8
- stack 1: 0xF0000000
- stack 0: 0x40
3098	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x5E8
3099	 1D2	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3100	 1D4	ADD		 	 
- stack 0: 0x5EC
3101	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3102	 1D6	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x17CFFFF00D4011401DB000101FA00020214FFE800860010019B000001B50000
3103	 1D7	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x17CFFFF00D4011401DB000101FA00020214FFE800860010019B000001B50000
- stack 0: 0xF0
3104	 1D9	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x17C
3105	 1DA	JUMP		 	 
- stack 0: 0x5EC
3106	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x5EC
3107	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
3108	 17E	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x17CFFFF00D4011401DB000101FA00020214FFE800860010019B000001B50000
3109	 17F	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x17CFFFF00D4011401DB000101FA00020214FFE800860010019B000001B50000
- stack 0: 0xE0
3110	 181	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x17CFFFF
3111	 182	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
3112	 185	AND		 	 
- stack 1: 0x5EC
- stack 0: 0xFFFF
3113	 186	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFF
- stack 0: 0x1
3114	 188	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3115	 189	PUSH2	0040	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3116	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x5EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
3117	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x5EC
- stack 0: 0xEFFFFFFF
3118	 18E	PUSH2	0040	 	 
- stack 2: 0x5EC
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
3119	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x5EC
3120	 192	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3121	 194	ADD		 	 
- stack 0: 0x5F0
3122	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3123	 196	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xD4011401DB000101FA00020214FFE800860010019B000001B5000001C80000
3124	 197	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0xD4011401DB000101FA00020214FFE800860010019B000001B5000001C80000
- stack 0: 0xF0
3125	 199	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xD4
3126	 19A	JUMP		 	 
- stack 0: 0x5F0
3127	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x5F0
3128	 D5	PUSH2	0040	 	 
- stack 1: 0x5F0
- stack 0: 0x40
3129	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5F0
- stack 0: 0xEFFFFFFF
3130	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F0
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
3131	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F0
- stack 0: 0xEFFFFFFF
3132	 DF	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
3133	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F0
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
3134	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F0
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
3135	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F0
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
3136	 E9	LT		 	  ;; # bltu
- stack 1: 0x5F0
- stack 0: 0x0
3137	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0xF2
3138	 ED	JUMPI		 	 
- stack 0: 0x5F0
3139	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x5F0
- stack 0: 0x10C
3140	 F1	JUMP		 	 
- stack 0: 0x5F0
3141	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x5F0
3142	 10D	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3143	 10F	ADD		 	 
- stack 0: 0x5F4
3144	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3145	 111	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x1DB000101FA00020214FFE800860010019B000001B5000001C80000017CFFFF
3146	 112	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x1DB000101FA00020214FFE800860010019B000001B5000001C80000017CFFFF
- stack 0: 0xF0
3147	 114	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x1DB
3148	 115	JUMP		 	 
- stack 0: 0x5F4
3149	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5F4
3150	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
3151	 1DD	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x1DB000101FA00020214FFE800860010019B000001B5000001C80000017CFFFF
3152	 1DE	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x1DB000101FA00020214FFE800860010019B000001B5000001C80000017CFFFF
- stack 0: 0xE0
3153	 1E0	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x1DB0001
3154	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
3155	 1E4	AND		 	 
- stack 1: 0x5F4
- stack 0: 0x1
3156	 1E5	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x1
3157	 1E7	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0x1
3158	 1E8	PUSH2	0080	 	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x80
3159	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x0
3160	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x5F4
- stack 0: 0x1
3161	 1ED	PUSH2	0080	 	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x80
3162	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x5F4
3163	 1F1	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3164	 1F3	ADD		 	 
- stack 0: 0x5F8
3165	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3166	 1F5	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1FA00020214FFE800860010019B000001B5000001C80000017CFFFF02560000
3167	 1F6	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x1FA00020214FFE800860010019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xF0
3168	 1F8	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1FA
3169	 1F9	JUMP		 	 
- stack 0: 0x5F8
3170	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5F8
3171	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3172	 1FC	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1FA00020214FFE800860010019B000001B5000001C80000017CFFFF02560000
3173	 1FD	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x1FA00020214FFE800860010019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xE0
3174	 1FF	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1FA0002
3175	 200	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
3176	 203	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x2
3177	 204	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x2
- stack 0: 0x1
3178	 206	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x2
3179	 207	PUSH2	00A0	 	 
- stack 2: 0x5F8
- stack 1: 0x2
- stack 0: 0xA0
3180	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x5F8
3181	 20B	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3182	 20D	ADD		 	 
- stack 0: 0x5FC
3183	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3184	 20F	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x214FFE800860010019B000001B5000001C80000017CFFFF0256000000D400EC
3185	 210	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x214FFE800860010019B000001B5000001C80000017CFFFF0256000000D400EC
- stack 0: 0xF0
3186	 212	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x214
3187	 213	JUMP		 	 
- stack 0: 0x5FC
3188	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5FC
3189	 215	PUSH2	0080	 	 
- stack 1: 0x5FC
- stack 0: 0x80
3190	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x5FC
- stack 0: 0x1
3191	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3192	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5FC
- stack 0: 0x1
3193	 21F	PUSH2	00A0	 	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0xA0
3194	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x2
3195	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5FC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3196	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x2
3197	 229	SUB		 	 
- stack 1: 0x5FC
- stack 0: 0x1
3198	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x232
3199	 22D	JUMPI		 	 
- stack 0: 0x5FC
3200	 232	JUMPDEST		 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x5FC
3201	 233	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3202	 234	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x214FFE800860010019B000001B5000001C80000017CFFFF0256000000D400EC
3203	 235	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x214FFE800860010019B000001B5000001C80000017CFFFF0256000000D400EC
- stack 0: 0xE0
3204	 237	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x214FFE8
3205	 238	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x214FFE8
- stack 0: 0xFFFF
3206	 23B	AND		 	 
- stack 1: 0x5FC
- stack 0: 0xFFE8
3207	 23C	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0xFFE8
- stack 0: 0x1
3208	 23E	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
3209	 23F	ADD		 	 
- stack 0: 0x5E4
3210	 240	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5E4
- stack 0: 0xFFFFFFFF
3211	 245	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5E4
3212	 246	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3213	 247	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1B5000001C80000017CFFFF00D4011401DB000101FA00020214FFE800860010
3214	 248	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x1B5000001C80000017CFFFF00D4011401DB000101FA00020214FFE800860010
- stack 0: 0xF0
3215	 24A	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1B5
3216	 24B	JUMP		 	 
- stack 0: 0x5E4
3217	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x5E4
3218	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x5E4
- stack 0: 0xF0000000
3219	 1BB	PUSH2	0020	 	 
- stack 2: 0x5E4
- stack 1: 0xF0000000
- stack 0: 0x20
3220	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E4
3221	 1BF	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3222	 1C1	ADD		 	 
- stack 0: 0x5E8
3223	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3224	 1C3	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x1C80000017CFFFF00D4011401DB000101FA00020214FFE800860010019B0000
3225	 1C4	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x1C80000017CFFFF00D4011401DB000101FA00020214FFE800860010019B0000
- stack 0: 0xF0
3226	 1C6	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x1C8
3227	 1C7	JUMP		 	 
- stack 0: 0x5E8
3228	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x5E8
3229	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x5E8
- stack 0: 0xF0000000
3230	 1CE	PUSH2	0040	 	 
- stack 2: 0x5E8
- stack 1: 0xF0000000
- stack 0: 0x40
3231	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x5E8
3232	 1D2	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3233	 1D4	ADD		 	 
- stack 0: 0x5EC
3234	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3235	 1D6	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x17CFFFF00D4011401DB000101FA00020214FFE800860010019B000001B50000
3236	 1D7	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x17CFFFF00D4011401DB000101FA00020214FFE800860010019B000001B50000
- stack 0: 0xF0
3237	 1D9	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x17C
3238	 1DA	JUMP		 	 
- stack 0: 0x5EC
3239	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x5EC
3240	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
3241	 17E	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x17CFFFF00D4011401DB000101FA00020214FFE800860010019B000001B50000
3242	 17F	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x17CFFFF00D4011401DB000101FA00020214FFE800860010019B000001B50000
- stack 0: 0xE0
3243	 181	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x17CFFFF
3244	 182	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
3245	 185	AND		 	 
- stack 1: 0x5EC
- stack 0: 0xFFFF
3246	 186	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFF
- stack 0: 0x1
3247	 188	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3248	 189	PUSH2	0040	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3249	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x5EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
3250	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x5EC
- stack 0: 0xEFFFFFFF
3251	 18E	PUSH2	0040	 	 
- stack 2: 0x5EC
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
3252	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x5EC
3253	 192	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3254	 194	ADD		 	 
- stack 0: 0x5F0
3255	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3256	 196	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xD4011401DB000101FA00020214FFE800860010019B000001B5000001C80000
3257	 197	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0xD4011401DB000101FA00020214FFE800860010019B000001B5000001C80000
- stack 0: 0xF0
3258	 199	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xD4
3259	 19A	JUMP		 	 
- stack 0: 0x5F0
3260	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x5F0
3261	 D5	PUSH2	0040	 	 
- stack 1: 0x5F0
- stack 0: 0x40
3262	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x5F0
- stack 0: 0xEFFFFFFF
3263	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F0
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
3264	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F0
- stack 0: 0xEFFFFFFF
3265	 DF	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
3266	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F0
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
3267	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F0
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
3268	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F0
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
3269	 E9	LT		 	  ;; # bltu
- stack 1: 0x5F0
- stack 0: 0x0
3270	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0xF2
3271	 ED	JUMPI		 	 
- stack 0: 0x5F0
3272	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x5F0
- stack 0: 0x10C
3273	 F1	JUMP		 	 
- stack 0: 0x5F0
3274	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x5F0
3275	 10D	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3276	 10F	ADD		 	 
- stack 0: 0x5F4
3277	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3278	 111	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x1DB000101FA00020214FFE800860010019B000001B5000001C80000017CFFFF
3279	 112	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x1DB000101FA00020214FFE800860010019B000001B5000001C80000017CFFFF
- stack 0: 0xF0
3280	 114	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x1DB
3281	 115	JUMP		 	 
- stack 0: 0x5F4
3282	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5F4
3283	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
3284	 1DD	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x1DB000101FA00020214FFE800860010019B000001B5000001C80000017CFFFF
3285	 1DE	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x1DB000101FA00020214FFE800860010019B000001B5000001C80000017CFFFF
- stack 0: 0xE0
3286	 1E0	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x1DB0001
3287	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
3288	 1E4	AND		 	 
- stack 1: 0x5F4
- stack 0: 0x1
3289	 1E5	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x1
3290	 1E7	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0x1
3291	 1E8	PUSH2	0080	 	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x80
3292	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x1
3293	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x5F4
- stack 0: 0x2
3294	 1ED	PUSH2	0080	 	 
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0x80
3295	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x5F4
3296	 1F1	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3297	 1F3	ADD		 	 
- stack 0: 0x5F8
3298	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3299	 1F5	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1FA00020214FFE800860010019B000001B5000001C80000017CFFFF02560000
3300	 1F6	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x1FA00020214FFE800860010019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xF0
3301	 1F8	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1FA
3302	 1F9	JUMP		 	 
- stack 0: 0x5F8
3303	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5F8
3304	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3305	 1FC	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1FA00020214FFE800860010019B000001B5000001C80000017CFFFF02560000
3306	 1FD	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x1FA00020214FFE800860010019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xE0
3307	 1FF	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1FA0002
3308	 200	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
3309	 203	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x2
3310	 204	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x2
- stack 0: 0x1
3311	 206	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x2
3312	 207	PUSH2	00A0	 	 
- stack 2: 0x5F8
- stack 1: 0x2
- stack 0: 0xA0
3313	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x5F8
3314	 20B	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3315	 20D	ADD		 	 
- stack 0: 0x5FC
3316	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3317	 20F	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x214FFE800860010019B000001B5000001C80000017CFFFF0256000000D400EC
3318	 210	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x214FFE800860010019B000001B5000001C80000017CFFFF0256000000D400EC
- stack 0: 0xF0
3319	 212	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x214
3320	 213	JUMP		 	 
- stack 0: 0x5FC
3321	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5FC
3322	 215	PUSH2	0080	 	 
- stack 1: 0x5FC
- stack 0: 0x80
3323	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x5FC
- stack 0: 0x2
3324	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3325	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5FC
- stack 0: 0x2
3326	 21F	PUSH2	00A0	 	 
- stack 2: 0x5FC
- stack 1: 0x2
- stack 0: 0xA0
3327	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x5FC
- stack 1: 0x2
- stack 0: 0x2
3328	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5FC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3329	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5FC
- stack 1: 0x2
- stack 0: 0x2
3330	 229	SUB		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3331	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x232
3332	 22D	JUMPI		 	 
- stack 0: 0x5FC
3333	 22E	PUSH2	024C	 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 1: 0x5FC
- stack 0: 0x24C
3334	 231	JUMP		 	 
- stack 0: 0x5FC
3335	 24C	JUMPDEST		 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x5FC
3336	 24D	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3337	 24F	ADD		 	 
- stack 0: 0x600
3338	 250	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3339	 251	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x860010019B000001B5000001C80000017CFFFF0256000000D400EC01DB0001
3340	 252	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x860010019B000001B5000001C80000017CFFFF0256000000D400EC01DB0001
- stack 0: 0xF0
3341	 254	SHR		 	 
- stack 1: 0x600
- stack 0: 0x86
3342	 255	JUMP		 	 
- stack 0: 0x600
3343	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x600
3344	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3345	 88	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x860010019B000001B5000001C80000017CFFFF0256000000D400EC01DB0001
3346	 89	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x860010019B000001B5000001C80000017CFFFF0256000000D400EC01DB0001
- stack 0: 0xE0
3347	 8B	SHR		 	 
- stack 1: 0x600
- stack 0: 0x860010
3348	 8C	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x860010
- stack 0: 0xFFFF
3349	 8F	AND		 	 
- stack 1: 0x600
- stack 0: 0x10
3350	 90	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x10
- stack 0: 0x1
3351	 92	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x10
3352	 93	PUSH2	0380	 	 
- stack 2: 0x600
- stack 1: 0x10
- stack 0: 0x380
3353	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x600
3354	 97	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3355	 99	ADD		 	 
- stack 0: 0x604
3356	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3357	 9B	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x19B000001B5000001C80000017CFFFF0256000000D400EC01DB000101FA0002
3358	 9C	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x19B000001B5000001C80000017CFFFF0256000000D400EC01DB000101FA0002
- stack 0: 0xF0
3359	 9E	SHR		 	 
- stack 1: 0x604
- stack 0: 0x19B
3360	 9F	JUMP		 	 
- stack 0: 0x604
3361	 19B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x604
3362	 19C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3363	 19D	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x19B000001B5000001C80000017CFFFF0256000000D400EC01DB000101FA0002
3364	 19E	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x19B000001B5000001C80000017CFFFF0256000000D400EC01DB000101FA0002
- stack 0: 0xE0
3365	 1A0	SHR		 	 
- stack 1: 0x604
- stack 0: 0x19B0000
3366	 1A1	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x19B0000
- stack 0: 0xFFFF
3367	 1A4	AND		 	 
- stack 1: 0x604
- stack 0: 0x0
3368	 1A5	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x1
3369	 1A7	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x0
3370	 1A8	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x80
3371	 1AB	MSTORE		 	  ;; # store to x4
- stack 0: 0x604
3372	 1AC	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3373	 1AE	ADD		 	 
- stack 0: 0x608
3374	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3375	 1B0	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x1B5000001C80000017CFFFF0256000000D400EC01DB000101FA00020214FFE4
3376	 1B1	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x1B5000001C80000017CFFFF0256000000D400EC01DB000101FA00020214FFE4
- stack 0: 0xF0
3377	 1B3	SHR		 	 
- stack 1: 0x608
- stack 0: 0x1B5
3378	 1B4	JUMP		 	 
- stack 0: 0x608
3379	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x608
3380	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x608
- stack 0: 0xF0000000
3381	 1BB	PUSH2	0020	 	 
- stack 2: 0x608
- stack 1: 0xF0000000
- stack 0: 0x20
3382	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x608
3383	 1BF	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3384	 1C1	ADD		 	 
- stack 0: 0x60C
3385	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3386	 1C3	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x1C80000017CFFFF0256000000D400EC01DB000101FA00020214FFE400860011
3387	 1C4	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x1C80000017CFFFF0256000000D400EC01DB000101FA00020214FFE400860011
- stack 0: 0xF0
3388	 1C6	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x1C8
3389	 1C7	JUMP		 	 
- stack 0: 0x60C
3390	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x60C
3391	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x60C
- stack 0: 0xF0000000
3392	 1CE	PUSH2	0040	 	 
- stack 2: 0x60C
- stack 1: 0xF0000000
- stack 0: 0x40
3393	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x60C
3394	 1D2	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3395	 1D4	ADD		 	 
- stack 0: 0x610
3396	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3397	 1D6	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x17CFFFF0256000000D400EC01DB000101FA00020214FFE400860011019B0000
3398	 1D7	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x17CFFFF0256000000D400EC01DB000101FA00020214FFE400860011019B0000
- stack 0: 0xF0
3399	 1D9	SHR		 	 
- stack 1: 0x610
- stack 0: 0x17C
3400	 1DA	JUMP		 	 
- stack 0: 0x610
3401	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x610
3402	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3403	 17E	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x17CFFFF0256000000D400EC01DB000101FA00020214FFE400860011019B0000
3404	 17F	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x17CFFFF0256000000D400EC01DB000101FA00020214FFE400860011019B0000
- stack 0: 0xE0
3405	 181	SHR		 	 
- stack 1: 0x610
- stack 0: 0x17CFFFF
3406	 182	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
3407	 185	AND		 	 
- stack 1: 0x610
- stack 0: 0xFFFF
3408	 186	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0xFFFF
- stack 0: 0x1
3409	 188	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3410	 189	PUSH2	0040	 	 
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3411	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
3412	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x610
- stack 0: 0xEFFFFFFF
3413	 18E	PUSH2	0040	 	 
- stack 2: 0x610
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
3414	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x610
3415	 192	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3416	 194	ADD		 	 
- stack 0: 0x614
3417	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3418	 196	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x256000000D400EC01DB000101FA00020214FFE400860011019B000001B50000
3419	 197	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x256000000D400EC01DB000101FA00020214FFE400860011019B000001B50000
- stack 0: 0xF0
3420	 199	SHR		 	 
- stack 1: 0x614
- stack 0: 0x256
3421	 19A	JUMP		 	 
- stack 0: 0x614
3422	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x614
3423	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3424	 258	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x256000000D400EC01DB000101FA00020214FFE400860011019B000001B50000
3425	 259	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x256000000D400EC01DB000101FA00020214FFE400860011019B000001B50000
- stack 0: 0xE0
3426	 25B	SHR		 	 
- stack 1: 0x614
- stack 0: 0x2560000
3427	 25C	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x2560000
- stack 0: 0xFFFF
3428	 25F	AND		 	 
- stack 1: 0x614
- stack 0: 0x0
3429	 260	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x1
3430	 262	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x0
3431	 263	POP		 	 
- stack 0: 0x614
3432	 264	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3433	 266	ADD		 	 
- stack 0: 0x618
3434	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3435	 268	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0xD400EC01DB000101FA00020214FFE400860011019B000001B5000001C80000
3436	 269	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0xD400EC01DB000101FA00020214FFE400860011019B000001B5000001C80000
- stack 0: 0xF0
3437	 26B	SHR		 	 
- stack 1: 0x618
- stack 0: 0xD4
3438	 26C	JUMP		 	 
- stack 0: 0x618
3439	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x618
3440	 D5	PUSH2	0040	 	 
- stack 1: 0x618
- stack 0: 0x40
3441	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x618
- stack 0: 0xEFFFFFFF
3442	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x618
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
3443	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x618
- stack 0: 0xEFFFFFFF
3444	 DF	PUSH2	0020	 	 
- stack 2: 0x618
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
3445	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x618
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
3446	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x618
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
3447	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x618
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
3448	 E9	LT		 	  ;; # bltu
- stack 1: 0x618
- stack 0: 0x0
3449	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0xF2
3450	 ED	JUMPI		 	 
- stack 0: 0x618
3451	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x618
- stack 0: 0x10C
3452	 F1	JUMP		 	 
- stack 0: 0x618
3453	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x618
3454	 10D	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3455	 10F	ADD		 	 
- stack 0: 0x61C
3456	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3457	 111	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x1DB000101FA00020214FFE400860011019B000001B5000001C80000017CFFFF
3458	 112	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x1DB000101FA00020214FFE400860011019B000001B5000001C80000017CFFFF
- stack 0: 0xF0
3459	 114	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x1DB
3460	 115	JUMP		 	 
- stack 0: 0x61C
3461	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x61C
3462	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3463	 1DD	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x1DB000101FA00020214FFE400860011019B000001B5000001C80000017CFFFF
3464	 1DE	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x1DB000101FA00020214FFE400860011019B000001B5000001C80000017CFFFF
- stack 0: 0xE0
3465	 1E0	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x1DB0001
3466	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
3467	 1E4	AND		 	 
- stack 1: 0x61C
- stack 0: 0x1
3468	 1E5	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x1
3469	 1E7	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x1
3470	 1E8	PUSH2	0080	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x80
3471	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x0
3472	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x61C
- stack 0: 0x1
3473	 1ED	PUSH2	0080	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x80
3474	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x61C
3475	 1F1	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3476	 1F3	ADD		 	 
- stack 0: 0x620
3477	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3478	 1F5	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x1FA00020214FFE400860011019B000001B5000001C80000017CFFFF02560000
3479	 1F6	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x1FA00020214FFE400860011019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xF0
3480	 1F8	SHR		 	 
- stack 1: 0x620
- stack 0: 0x1FA
3481	 1F9	JUMP		 	 
- stack 0: 0x620
3482	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x620
3483	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3484	 1FC	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x1FA00020214FFE400860011019B000001B5000001C80000017CFFFF02560000
3485	 1FD	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x1FA00020214FFE400860011019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xE0
3486	 1FF	SHR		 	 
- stack 1: 0x620
- stack 0: 0x1FA0002
3487	 200	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
3488	 203	AND		 	 
- stack 1: 0x620
- stack 0: 0x2
3489	 204	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0x1
3490	 206	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x2
3491	 207	PUSH2	00A0	 	 
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0xA0
3492	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x620
3493	 20B	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3494	 20D	ADD		 	 
- stack 0: 0x624
3495	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3496	 20F	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x214FFE400860011019B000001B5000001C80000017CFFFF0256000002560000
3497	 210	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x214FFE400860011019B000001B5000001C80000017CFFFF0256000002560000
- stack 0: 0xF0
3498	 212	SHR		 	 
- stack 1: 0x624
- stack 0: 0x214
3499	 213	JUMP		 	 
- stack 0: 0x624
3500	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x624
3501	 215	PUSH2	0080	 	 
- stack 1: 0x624
- stack 0: 0x80
3502	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x624
- stack 0: 0x1
3503	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3504	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x1
3505	 21F	PUSH2	00A0	 	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0xA0
3506	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0x2
3507	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x624
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3508	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0x2
3509	 229	SUB		 	 
- stack 1: 0x624
- stack 0: 0x1
3510	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0x232
3511	 22D	JUMPI		 	 
- stack 0: 0x624
3512	 232	JUMPDEST		 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x624
3513	 233	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3514	 234	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x214FFE400860011019B000001B5000001C80000017CFFFF0256000002560000
3515	 235	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x214FFE400860011019B000001B5000001C80000017CFFFF0256000002560000
- stack 0: 0xE0
3516	 237	SHR		 	 
- stack 1: 0x624
- stack 0: 0x214FFE4
3517	 238	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x214FFE4
- stack 0: 0xFFFF
3518	 23B	AND		 	 
- stack 1: 0x624
- stack 0: 0xFFE4
3519	 23C	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0xFFE4
- stack 0: 0x1
3520	 23E	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
3521	 23F	ADD		 	 
- stack 0: 0x608
3522	 240	PUSH4	FFFFFFFF	 	 
- stack 1: 0x608
- stack 0: 0xFFFFFFFF
3523	 245	AND		 	  ;; # mask to 32 bits
- stack 0: 0x608
3524	 246	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3525	 247	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x1B5000001C80000017CFFFF0256000000D400EC01DB000101FA00020214FFE4
3526	 248	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x1B5000001C80000017CFFFF0256000000D400EC01DB000101FA00020214FFE4
- stack 0: 0xF0
3527	 24A	SHR		 	 
- stack 1: 0x608
- stack 0: 0x1B5
3528	 24B	JUMP		 	 
- stack 0: 0x608
3529	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x608
3530	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x608
- stack 0: 0xF0000000
3531	 1BB	PUSH2	0020	 	 
- stack 2: 0x608
- stack 1: 0xF0000000
- stack 0: 0x20
3532	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x608
3533	 1BF	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3534	 1C1	ADD		 	 
- stack 0: 0x60C
3535	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3536	 1C3	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x1C80000017CFFFF0256000000D400EC01DB000101FA00020214FFE400860011
3537	 1C4	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x1C80000017CFFFF0256000000D400EC01DB000101FA00020214FFE400860011
- stack 0: 0xF0
3538	 1C6	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x1C8
3539	 1C7	JUMP		 	 
- stack 0: 0x60C
3540	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x60C
3541	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x60C
- stack 0: 0xF0000000
3542	 1CE	PUSH2	0040	 	 
- stack 2: 0x60C
- stack 1: 0xF0000000
- stack 0: 0x40
3543	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x60C
3544	 1D2	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3545	 1D4	ADD		 	 
- stack 0: 0x610
3546	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3547	 1D6	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x17CFFFF0256000000D400EC01DB000101FA00020214FFE400860011019B0000
3548	 1D7	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x17CFFFF0256000000D400EC01DB000101FA00020214FFE400860011019B0000
- stack 0: 0xF0
3549	 1D9	SHR		 	 
- stack 1: 0x610
- stack 0: 0x17C
3550	 1DA	JUMP		 	 
- stack 0: 0x610
3551	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x610
3552	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3553	 17E	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x17CFFFF0256000000D400EC01DB000101FA00020214FFE400860011019B0000
3554	 17F	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x17CFFFF0256000000D400EC01DB000101FA00020214FFE400860011019B0000
- stack 0: 0xE0
3555	 181	SHR		 	 
- stack 1: 0x610
- stack 0: 0x17CFFFF
3556	 182	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
3557	 185	AND		 	 
- stack 1: 0x610
- stack 0: 0xFFFF
3558	 186	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0xFFFF
- stack 0: 0x1
3559	 188	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3560	 189	PUSH2	0040	 	 
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3561	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
3562	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x610
- stack 0: 0xEFFFFFFF
3563	 18E	PUSH2	0040	 	 
- stack 2: 0x610
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
3564	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x610
3565	 192	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3566	 194	ADD		 	 
- stack 0: 0x614
3567	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3568	 196	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x256000000D400EC01DB000101FA00020214FFE400860011019B000001B50000
3569	 197	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x256000000D400EC01DB000101FA00020214FFE400860011019B000001B50000
- stack 0: 0xF0
3570	 199	SHR		 	 
- stack 1: 0x614
- stack 0: 0x256
3571	 19A	JUMP		 	 
- stack 0: 0x614
3572	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x614
3573	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3574	 258	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x256000000D400EC01DB000101FA00020214FFE400860011019B000001B50000
3575	 259	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x256000000D400EC01DB000101FA00020214FFE400860011019B000001B50000
- stack 0: 0xE0
3576	 25B	SHR		 	 
- stack 1: 0x614
- stack 0: 0x2560000
3577	 25C	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x2560000
- stack 0: 0xFFFF
3578	 25F	AND		 	 
- stack 1: 0x614
- stack 0: 0x0
3579	 260	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x1
3580	 262	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x0
3581	 263	POP		 	 
- stack 0: 0x614
3582	 264	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3583	 266	ADD		 	 
- stack 0: 0x618
3584	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3585	 268	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0xD400EC01DB000101FA00020214FFE400860011019B000001B5000001C80000
3586	 269	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0xD400EC01DB000101FA00020214FFE400860011019B000001B5000001C80000
- stack 0: 0xF0
3587	 26B	SHR		 	 
- stack 1: 0x618
- stack 0: 0xD4
3588	 26C	JUMP		 	 
- stack 0: 0x618
3589	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x618
3590	 D5	PUSH2	0040	 	 
- stack 1: 0x618
- stack 0: 0x40
3591	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x618
- stack 0: 0xEFFFFFFF
3592	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x618
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
3593	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x618
- stack 0: 0xEFFFFFFF
3594	 DF	PUSH2	0020	 	 
- stack 2: 0x618
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
3595	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x618
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
3596	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x618
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
3597	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x618
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
3598	 E9	LT		 	  ;; # bltu
- stack 1: 0x618
- stack 0: 0x0
3599	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0xF2
3600	 ED	JUMPI		 	 
- stack 0: 0x618
3601	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x618
- stack 0: 0x10C
3602	 F1	JUMP		 	 
- stack 0: 0x618
3603	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x618
3604	 10D	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3605	 10F	ADD		 	 
- stack 0: 0x61C
3606	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3607	 111	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x1DB000101FA00020214FFE400860011019B000001B5000001C80000017CFFFF
3608	 112	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x1DB000101FA00020214FFE400860011019B000001B5000001C80000017CFFFF
- stack 0: 0xF0
3609	 114	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x1DB
3610	 115	JUMP		 	 
- stack 0: 0x61C
3611	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x61C
3612	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3613	 1DD	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x1DB000101FA00020214FFE400860011019B000001B5000001C80000017CFFFF
3614	 1DE	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x1DB000101FA00020214FFE400860011019B000001B5000001C80000017CFFFF
- stack 0: 0xE0
3615	 1E0	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x1DB0001
3616	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
3617	 1E4	AND		 	 
- stack 1: 0x61C
- stack 0: 0x1
3618	 1E5	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x1
3619	 1E7	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x1
3620	 1E8	PUSH2	0080	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x80
3621	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x1
3622	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x61C
- stack 0: 0x2
3623	 1ED	PUSH2	0080	 	 
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0x80
3624	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x61C
3625	 1F1	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3626	 1F3	ADD		 	 
- stack 0: 0x620
3627	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3628	 1F5	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x1FA00020214FFE400860011019B000001B5000001C80000017CFFFF02560000
3629	 1F6	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x1FA00020214FFE400860011019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xF0
3630	 1F8	SHR		 	 
- stack 1: 0x620
- stack 0: 0x1FA
3631	 1F9	JUMP		 	 
- stack 0: 0x620
3632	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x620
3633	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3634	 1FC	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x1FA00020214FFE400860011019B000001B5000001C80000017CFFFF02560000
3635	 1FD	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x1FA00020214FFE400860011019B000001B5000001C80000017CFFFF02560000
- stack 0: 0xE0
3636	 1FF	SHR		 	 
- stack 1: 0x620
- stack 0: 0x1FA0002
3637	 200	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
3638	 203	AND		 	 
- stack 1: 0x620
- stack 0: 0x2
3639	 204	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0x1
3640	 206	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x2
3641	 207	PUSH2	00A0	 	 
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0xA0
3642	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x620
3643	 20B	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3644	 20D	ADD		 	 
- stack 0: 0x624
3645	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3646	 20F	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x214FFE400860011019B000001B5000001C80000017CFFFF0256000002560000
3647	 210	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x214FFE400860011019B000001B5000001C80000017CFFFF0256000002560000
- stack 0: 0xF0
3648	 212	SHR		 	 
- stack 1: 0x624
- stack 0: 0x214
3649	 213	JUMP		 	 
- stack 0: 0x624
3650	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x624
3651	 215	PUSH2	0080	 	 
- stack 1: 0x624
- stack 0: 0x80
3652	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x624
- stack 0: 0x2
3653	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3654	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x2
3655	 21F	PUSH2	00A0	 	 
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0xA0
3656	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0x2
3657	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x624
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3658	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0x2
3659	 229	SUB		 	 
- stack 1: 0x624
- stack 0: 0x0
3660	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x232
3661	 22D	JUMPI		 	 
- stack 0: 0x624
3662	 22E	PUSH2	024C	 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 1: 0x624
- stack 0: 0x24C
3663	 231	JUMP		 	 
- stack 0: 0x624
3664	 24C	JUMPDEST		 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x624
3665	 24D	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3666	 24F	ADD		 	 
- stack 0: 0x628
3667	 250	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3668	 251	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x860011019B000001B5000001C80000017CFFFF025600000256000000D400C0
3669	 252	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x860011019B000001B5000001C80000017CFFFF025600000256000000D400C0
- stack 0: 0xF0
3670	 254	SHR		 	 
- stack 1: 0x628
- stack 0: 0x86
3671	 255	JUMP		 	 
- stack 0: 0x628
3672	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x628
3673	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3674	 88	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x860011019B000001B5000001C80000017CFFFF025600000256000000D400C0
3675	 89	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x860011019B000001B5000001C80000017CFFFF025600000256000000D400C0
- stack 0: 0xE0
3676	 8B	SHR		 	 
- stack 1: 0x628
- stack 0: 0x860011
3677	 8C	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x860011
- stack 0: 0xFFFF
3678	 8F	AND		 	 
- stack 1: 0x628
- stack 0: 0x11
3679	 90	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x11
- stack 0: 0x1
3680	 92	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x11
3681	 93	PUSH2	0380	 	 
- stack 2: 0x628
- stack 1: 0x11
- stack 0: 0x380
3682	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x628
3683	 97	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3684	 99	ADD		 	 
- stack 0: 0x62C
3685	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3686	 9B	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x19B000001B5000001C80000017CFFFF025600000256000000D400C001DB0001
3687	 9C	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x19B000001B5000001C80000017CFFFF025600000256000000D400C001DB0001
- stack 0: 0xF0
3688	 9E	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x19B
3689	 9F	JUMP		 	 
- stack 0: 0x62C
3690	 19B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x62C
3691	 19C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3692	 19D	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x19B000001B5000001C80000017CFFFF025600000256000000D400C001DB0001
3693	 19E	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x19B000001B5000001C80000017CFFFF025600000256000000D400C001DB0001
- stack 0: 0xE0
3694	 1A0	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x19B0000
3695	 1A1	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x19B0000
- stack 0: 0xFFFF
3696	 1A4	AND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3697	 1A5	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x1
3698	 1A7	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3699	 1A8	PUSH2	0080	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x80
3700	 1AB	MSTORE		 	  ;; # store to x4
- stack 0: 0x62C
3701	 1AC	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3702	 1AE	ADD		 	 
- stack 0: 0x630
3703	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3704	 1B0	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x1B5000001C80000017CFFFF025600000256000000D400C001DB000101FA0002
3705	 1B1	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x1B5000001C80000017CFFFF025600000256000000D400C001DB000101FA0002
- stack 0: 0xF0
3706	 1B3	SHR		 	 
- stack 1: 0x630
- stack 0: 0x1B5
3707	 1B4	JUMP		 	 
- stack 0: 0x630
3708	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x630
3709	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x630
- stack 0: 0xF0000000
3710	 1BB	PUSH2	0020	 	 
- stack 2: 0x630
- stack 1: 0xF0000000
- stack 0: 0x20
3711	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x630
3712	 1BF	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3713	 1C1	ADD		 	 
- stack 0: 0x634
3714	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3715	 1C3	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x1C80000017CFFFF025600000256000000D400C001DB000101FA00020214FFE0
3716	 1C4	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x1C80000017CFFFF025600000256000000D400C001DB000101FA00020214FFE0
- stack 0: 0xF0
3717	 1C6	SHR		 	 
- stack 1: 0x634
- stack 0: 0x1C8
3718	 1C7	JUMP		 	 
- stack 0: 0x634
3719	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x634
3720	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x634
- stack 0: 0xF0000000
3721	 1CE	PUSH2	0040	 	 
- stack 2: 0x634
- stack 1: 0xF0000000
- stack 0: 0x40
3722	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x634
3723	 1D2	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3724	 1D4	ADD		 	 
- stack 0: 0x638
3725	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3726	 1D6	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x17CFFFF025600000256000000D400C001DB000101FA00020214FFE000860012
3727	 1D7	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x17CFFFF025600000256000000D400C001DB000101FA00020214FFE000860012
- stack 0: 0xF0
3728	 1D9	SHR		 	 
- stack 1: 0x638
- stack 0: 0x17C
3729	 1DA	JUMP		 	 
- stack 0: 0x638
3730	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x638
3731	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3732	 17E	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x17CFFFF025600000256000000D400C001DB000101FA00020214FFE000860012
3733	 17F	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x17CFFFF025600000256000000D400C001DB000101FA00020214FFE000860012
- stack 0: 0xE0
3734	 181	SHR		 	 
- stack 1: 0x638
- stack 0: 0x17CFFFF
3735	 182	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
3736	 185	AND		 	 
- stack 1: 0x638
- stack 0: 0xFFFF
3737	 186	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0xFFFF
- stack 0: 0x1
3738	 188	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3739	 189	PUSH2	0040	 	 
- stack 2: 0x638
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3740	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x638
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
3741	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x638
- stack 0: 0xEFFFFFFF
3742	 18E	PUSH2	0040	 	 
- stack 2: 0x638
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
3743	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x638
3744	 192	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3745	 194	ADD		 	 
- stack 0: 0x63C
3746	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3747	 196	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x25600000256000000D400C001DB000101FA00020214FFE000860012019B0000
3748	 197	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x25600000256000000D400C001DB000101FA00020214FFE000860012019B0000
- stack 0: 0xF0
3749	 199	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x256
3750	 19A	JUMP		 	 
- stack 0: 0x63C
3751	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x63C
3752	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3753	 258	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x25600000256000000D400C001DB000101FA00020214FFE000860012019B0000
3754	 259	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x25600000256000000D400C001DB000101FA00020214FFE000860012019B0000
- stack 0: 0xE0
3755	 25B	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x2560000
3756	 25C	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x2560000
- stack 0: 0xFFFF
3757	 25F	AND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3758	 260	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x1
3759	 262	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3760	 263	POP		 	 
- stack 0: 0x63C
3761	 264	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3762	 266	ADD		 	 
- stack 0: 0x640
3763	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3764	 268	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x256000000D400C001DB000101FA00020214FFE000860012019B000001B50000
3765	 269	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x256000000D400C001DB000101FA00020214FFE000860012019B000001B50000
- stack 0: 0xF0
3766	 26B	SHR		 	 
- stack 1: 0x640
- stack 0: 0x256
3767	 26C	JUMP		 	 
- stack 0: 0x640
3768	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x640
3769	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3770	 258	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x256000000D400C001DB000101FA00020214FFE000860012019B000001B50000
3771	 259	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x256000000D400C001DB000101FA00020214FFE000860012019B000001B50000
- stack 0: 0xE0
3772	 25B	SHR		 	 
- stack 1: 0x640
- stack 0: 0x2560000
3773	 25C	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x2560000
- stack 0: 0xFFFF
3774	 25F	AND		 	 
- stack 1: 0x640
- stack 0: 0x0
3775	 260	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x1
3776	 262	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x0
3777	 263	POP		 	 
- stack 0: 0x640
3778	 264	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3779	 266	ADD		 	 
- stack 0: 0x644
3780	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3781	 268	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0xD400C001DB000101FA00020214FFE000860012019B000001B5000002560000
3782	 269	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0xD400C001DB000101FA00020214FFE000860012019B000001B5000002560000
- stack 0: 0xF0
3783	 26B	SHR		 	 
- stack 1: 0x644
- stack 0: 0xD4
3784	 26C	JUMP		 	 
- stack 0: 0x644
3785	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x644
3786	 D5	PUSH2	0040	 	 
- stack 1: 0x644
- stack 0: 0x40
3787	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x644
- stack 0: 0xEFFFFFFF
3788	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x644
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
3789	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x644
- stack 0: 0xEFFFFFFF
3790	 DF	PUSH2	0020	 	 
- stack 2: 0x644
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
3791	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x644
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
3792	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x644
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
3793	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x644
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
3794	 E9	LT		 	  ;; # bltu
- stack 1: 0x644
- stack 0: 0x0
3795	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0xF2
3796	 ED	JUMPI		 	 
- stack 0: 0x644
3797	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x644
- stack 0: 0x10C
3798	 F1	JUMP		 	 
- stack 0: 0x644
3799	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x644
3800	 10D	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3801	 10F	ADD		 	 
- stack 0: 0x648
3802	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3803	 111	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x1DB000101FA00020214FFE000860012019B000001B500000256000001C80000
3804	 112	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x1DB000101FA00020214FFE000860012019B000001B500000256000001C80000
- stack 0: 0xF0
3805	 114	SHR		 	 
- stack 1: 0x648
- stack 0: 0x1DB
3806	 115	JUMP		 	 
- stack 0: 0x648
3807	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x648
3808	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3809	 1DD	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x1DB000101FA00020214FFE000860012019B000001B500000256000001C80000
3810	 1DE	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x1DB000101FA00020214FFE000860012019B000001B500000256000001C80000
- stack 0: 0xE0
3811	 1E0	SHR		 	 
- stack 1: 0x648
- stack 0: 0x1DB0001
3812	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
3813	 1E4	AND		 	 
- stack 1: 0x648
- stack 0: 0x1
3814	 1E5	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x1
3815	 1E7	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x1
3816	 1E8	PUSH2	0080	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x80
3817	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x0
3818	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x648
- stack 0: 0x1
3819	 1ED	PUSH2	0080	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x80
3820	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x648
3821	 1F1	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3822	 1F3	ADD		 	 
- stack 0: 0x64C
3823	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3824	 1F5	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x1FA00020214FFE000860012019B000001B500000256000001C80000017CFFFF
3825	 1F6	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x1FA00020214FFE000860012019B000001B500000256000001C80000017CFFFF
- stack 0: 0xF0
3826	 1F8	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x1FA
3827	 1F9	JUMP		 	 
- stack 0: 0x64C
3828	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x64C
3829	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3830	 1FC	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x1FA00020214FFE000860012019B000001B500000256000001C80000017CFFFF
3831	 1FD	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x1FA00020214FFE000860012019B000001B500000256000001C80000017CFFFF
- stack 0: 0xE0
3832	 1FF	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x1FA0002
3833	 200	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
3834	 203	AND		 	 
- stack 1: 0x64C
- stack 0: 0x2
3835	 204	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x1
3836	 206	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x2
3837	 207	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xA0
3838	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x64C
3839	 20B	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3840	 20D	ADD		 	 
- stack 0: 0x650
3841	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3842	 20F	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x214FFE000860012019B000001B500000256000001C80000017CFFFF00D40098
3843	 210	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x214FFE000860012019B000001B500000256000001C80000017CFFFF00D40098
- stack 0: 0xF0
3844	 212	SHR		 	 
- stack 1: 0x650
- stack 0: 0x214
3845	 213	JUMP		 	 
- stack 0: 0x650
3846	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x650
3847	 215	PUSH2	0080	 	 
- stack 1: 0x650
- stack 0: 0x80
3848	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x650
- stack 0: 0x1
3849	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3850	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x650
- stack 0: 0x1
3851	 21F	PUSH2	00A0	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0xA0
3852	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x2
3853	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x650
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3854	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x2
3855	 229	SUB		 	 
- stack 1: 0x650
- stack 0: 0x1
3856	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x232
3857	 22D	JUMPI		 	 
- stack 0: 0x650
3858	 232	JUMPDEST		 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x650
3859	 233	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3860	 234	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x214FFE000860012019B000001B500000256000001C80000017CFFFF00D40098
3861	 235	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x214FFE000860012019B000001B500000256000001C80000017CFFFF00D40098
- stack 0: 0xE0
3862	 237	SHR		 	 
- stack 1: 0x650
- stack 0: 0x214FFE0
3863	 238	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x214FFE0
- stack 0: 0xFFFF
3864	 23B	AND		 	 
- stack 1: 0x650
- stack 0: 0xFFE0
3865	 23C	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0xFFE0
- stack 0: 0x1
3866	 23E	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3867	 23F	ADD		 	 
- stack 0: 0x630
3868	 240	PUSH4	FFFFFFFF	 	 
- stack 1: 0x630
- stack 0: 0xFFFFFFFF
3869	 245	AND		 	  ;; # mask to 32 bits
- stack 0: 0x630
3870	 246	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3871	 247	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x1B5000001C80000017CFFFF025600000256000000D400C001DB000101FA0002
3872	 248	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x1B5000001C80000017CFFFF025600000256000000D400C001DB000101FA0002
- stack 0: 0xF0
3873	 24A	SHR		 	 
- stack 1: 0x630
- stack 0: 0x1B5
3874	 24B	JUMP		 	 
- stack 0: 0x630
3875	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x630
3876	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x630
- stack 0: 0xF0000000
3877	 1BB	PUSH2	0020	 	 
- stack 2: 0x630
- stack 1: 0xF0000000
- stack 0: 0x20
3878	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x630
3879	 1BF	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3880	 1C1	ADD		 	 
- stack 0: 0x634
3881	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3882	 1C3	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x1C80000017CFFFF025600000256000000D400C001DB000101FA00020214FFE0
3883	 1C4	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x1C80000017CFFFF025600000256000000D400C001DB000101FA00020214FFE0
- stack 0: 0xF0
3884	 1C6	SHR		 	 
- stack 1: 0x634
- stack 0: 0x1C8
3885	 1C7	JUMP		 	 
- stack 0: 0x634
3886	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x634
3887	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x634
- stack 0: 0xF0000000
3888	 1CE	PUSH2	0040	 	 
- stack 2: 0x634
- stack 1: 0xF0000000
- stack 0: 0x40
3889	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x634
3890	 1D2	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3891	 1D4	ADD		 	 
- stack 0: 0x638
3892	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3893	 1D6	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x17CFFFF025600000256000000D400C001DB000101FA00020214FFE000860012
3894	 1D7	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x17CFFFF025600000256000000D400C001DB000101FA00020214FFE000860012
- stack 0: 0xF0
3895	 1D9	SHR		 	 
- stack 1: 0x638
- stack 0: 0x17C
3896	 1DA	JUMP		 	 
- stack 0: 0x638
3897	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x638
3898	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3899	 17E	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x17CFFFF025600000256000000D400C001DB000101FA00020214FFE000860012
3900	 17F	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x17CFFFF025600000256000000D400C001DB000101FA00020214FFE000860012
- stack 0: 0xE0
3901	 181	SHR		 	 
- stack 1: 0x638
- stack 0: 0x17CFFFF
3902	 182	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
3903	 185	AND		 	 
- stack 1: 0x638
- stack 0: 0xFFFF
3904	 186	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0xFFFF
- stack 0: 0x1
3905	 188	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3906	 189	PUSH2	0040	 	 
- stack 2: 0x638
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3907	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x638
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
3908	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x638
- stack 0: 0xEFFFFFFF
3909	 18E	PUSH2	0040	 	 
- stack 2: 0x638
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
3910	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x638
3911	 192	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3912	 194	ADD		 	 
- stack 0: 0x63C
3913	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3914	 196	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x25600000256000000D400C001DB000101FA00020214FFE000860012019B0000
3915	 197	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x25600000256000000D400C001DB000101FA00020214FFE000860012019B0000
- stack 0: 0xF0
3916	 199	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x256
3917	 19A	JUMP		 	 
- stack 0: 0x63C
3918	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x63C
3919	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3920	 258	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x25600000256000000D400C001DB000101FA00020214FFE000860012019B0000
3921	 259	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x25600000256000000D400C001DB000101FA00020214FFE000860012019B0000
- stack 0: 0xE0
3922	 25B	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x2560000
3923	 25C	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x2560000
- stack 0: 0xFFFF
3924	 25F	AND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3925	 260	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x1
3926	 262	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3927	 263	POP		 	 
- stack 0: 0x63C
3928	 264	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3929	 266	ADD		 	 
- stack 0: 0x640
3930	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3931	 268	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x256000000D400C001DB000101FA00020214FFE000860012019B000001B50000
3932	 269	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x256000000D400C001DB000101FA00020214FFE000860012019B000001B50000
- stack 0: 0xF0
3933	 26B	SHR		 	 
- stack 1: 0x640
- stack 0: 0x256
3934	 26C	JUMP		 	 
- stack 0: 0x640
3935	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x640
3936	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3937	 258	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x256000000D400C001DB000101FA00020214FFE000860012019B000001B50000
3938	 259	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x256000000D400C001DB000101FA00020214FFE000860012019B000001B50000
- stack 0: 0xE0
3939	 25B	SHR		 	 
- stack 1: 0x640
- stack 0: 0x2560000
3940	 25C	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x2560000
- stack 0: 0xFFFF
3941	 25F	AND		 	 
- stack 1: 0x640
- stack 0: 0x0
3942	 260	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x1
3943	 262	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x0
3944	 263	POP		 	 
- stack 0: 0x640
3945	 264	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3946	 266	ADD		 	 
- stack 0: 0x644
3947	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3948	 268	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0xD400C001DB000101FA00020214FFE000860012019B000001B5000002560000
3949	 269	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0xD400C001DB000101FA00020214FFE000860012019B000001B5000002560000
- stack 0: 0xF0
3950	 26B	SHR		 	 
- stack 1: 0x644
- stack 0: 0xD4
3951	 26C	JUMP		 	 
- stack 0: 0x644
3952	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x644
3953	 D5	PUSH2	0040	 	 
- stack 1: 0x644
- stack 0: 0x40
3954	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x644
- stack 0: 0xEFFFFFFF
3955	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x644
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
3956	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x644
- stack 0: 0xEFFFFFFF
3957	 DF	PUSH2	0020	 	 
- stack 2: 0x644
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
3958	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x644
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
3959	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x644
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
3960	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x644
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
3961	 E9	LT		 	  ;; # bltu
- stack 1: 0x644
- stack 0: 0x0
3962	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0xF2
3963	 ED	JUMPI		 	 
- stack 0: 0x644
3964	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x644
- stack 0: 0x10C
3965	 F1	JUMP		 	 
- stack 0: 0x644
3966	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x644
3967	 10D	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3968	 10F	ADD		 	 
- stack 0: 0x648
3969	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3970	 111	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x1DB000101FA00020214FFE000860012019B000001B500000256000001C80000
3971	 112	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x1DB000101FA00020214FFE000860012019B000001B500000256000001C80000
- stack 0: 0xF0
3972	 114	SHR		 	 
- stack 1: 0x648
- stack 0: 0x1DB
3973	 115	JUMP		 	 
- stack 0: 0x648
3974	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x648
3975	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3976	 1DD	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x1DB000101FA00020214FFE000860012019B000001B500000256000001C80000
3977	 1DE	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x1DB000101FA00020214FFE000860012019B000001B500000256000001C80000
- stack 0: 0xE0
3978	 1E0	SHR		 	 
- stack 1: 0x648
- stack 0: 0x1DB0001
3979	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
3980	 1E4	AND		 	 
- stack 1: 0x648
- stack 0: 0x1
3981	 1E5	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x1
3982	 1E7	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x1
3983	 1E8	PUSH2	0080	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x80
3984	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x1
3985	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x648
- stack 0: 0x2
3986	 1ED	PUSH2	0080	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x80
3987	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x648
3988	 1F1	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3989	 1F3	ADD		 	 
- stack 0: 0x64C
3990	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3991	 1F5	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x1FA00020214FFE000860012019B000001B500000256000001C80000017CFFFF
3992	 1F6	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x1FA00020214FFE000860012019B000001B500000256000001C80000017CFFFF
- stack 0: 0xF0
3993	 1F8	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x1FA
3994	 1F9	JUMP		 	 
- stack 0: 0x64C
3995	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x64C
3996	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3997	 1FC	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x1FA00020214FFE000860012019B000001B500000256000001C80000017CFFFF
3998	 1FD	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x1FA00020214FFE000860012019B000001B500000256000001C80000017CFFFF
- stack 0: 0xE0
3999	 1FF	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x1FA0002
4000	 200	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
4001	 203	AND		 	 
- stack 1: 0x64C
- stack 0: 0x2
4002	 204	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x1
4003	 206	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x2
4004	 207	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xA0
4005	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x64C
4006	 20B	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
4007	 20D	ADD		 	 
- stack 0: 0x650
4008	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
4009	 20F	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x214FFE000860012019B000001B500000256000001C80000017CFFFF00D40098
4010	 210	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x214FFE000860012019B000001B500000256000001C80000017CFFFF00D40098
- stack 0: 0xF0
4011	 212	SHR		 	 
- stack 1: 0x650
- stack 0: 0x214
4012	 213	JUMP		 	 
- stack 0: 0x650
4013	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x650
4014	 215	PUSH2	0080	 	 
- stack 1: 0x650
- stack 0: 0x80
4015	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x650
- stack 0: 0x2
4016	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4017	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x650
- stack 0: 0x2
4018	 21F	PUSH2	00A0	 	 
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0xA0
4019	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0x2
4020	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x650
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4021	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0x2
4022	 229	SUB		 	 
- stack 1: 0x650
- stack 0: 0x0
4023	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0x232
4024	 22D	JUMPI		 	 
- stack 0: 0x650
4025	 22E	PUSH2	024C	 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 1: 0x650
- stack 0: 0x24C
4026	 231	JUMP		 	 
- stack 0: 0x650
4027	 24C	JUMPDEST		 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x650
4028	 24D	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
4029	 24F	ADD		 	 
- stack 0: 0x654
4030	 250	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
4031	 251	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x860012019B000001B500000256000001C80000017CFFFF00D4009801DB0001
4032	 252	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x860012019B000001B500000256000001C80000017CFFFF00D4009801DB0001
- stack 0: 0xF0
4033	 254	SHR		 	 
- stack 1: 0x654
- stack 0: 0x86
4034	 255	JUMP		 	 
- stack 0: 0x654
4035	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x654
4036	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
4037	 88	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x860012019B000001B500000256000001C80000017CFFFF00D4009801DB0001
4038	 89	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x860012019B000001B500000256000001C80000017CFFFF00D4009801DB0001
- stack 0: 0xE0
4039	 8B	SHR		 	 
- stack 1: 0x654
- stack 0: 0x860012
4040	 8C	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x860012
- stack 0: 0xFFFF
4041	 8F	AND		 	 
- stack 1: 0x654
- stack 0: 0x12
4042	 90	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x12
- stack 0: 0x1
4043	 92	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x12
4044	 93	PUSH2	0380	 	 
- stack 2: 0x654
- stack 1: 0x12
- stack 0: 0x380
4045	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x654
4046	 97	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
4047	 99	ADD		 	 
- stack 0: 0x658
4048	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
4049	 9B	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x19B000001B500000256000001C80000017CFFFF00D4009801DB000101FA0002
4050	 9C	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x19B000001B500000256000001C80000017CFFFF00D4009801DB000101FA0002
- stack 0: 0xF0
4051	 9E	SHR		 	 
- stack 1: 0x658
- stack 0: 0x19B
4052	 9F	JUMP		 	 
- stack 0: 0x658
4053	 19B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x658
4054	 19C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
4055	 19D	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x19B000001B500000256000001C80000017CFFFF00D4009801DB000101FA0002
4056	 19E	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x19B000001B500000256000001C80000017CFFFF00D4009801DB000101FA0002
- stack 0: 0xE0
4057	 1A0	SHR		 	 
- stack 1: 0x658
- stack 0: 0x19B0000
4058	 1A1	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x19B0000
- stack 0: 0xFFFF
4059	 1A4	AND		 	 
- stack 1: 0x658
- stack 0: 0x0
4060	 1A5	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x1
4061	 1A7	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x0
4062	 1A8	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x80
4063	 1AB	MSTORE		 	  ;; # store to x4
- stack 0: 0x658
4064	 1AC	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
4065	 1AE	ADD		 	 
- stack 0: 0x65C
4066	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
4067	 1B0	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x1B500000256000001C80000017CFFFF00D4009801DB000101FA00020214FFE4
4068	 1B1	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x1B500000256000001C80000017CFFFF00D4009801DB000101FA00020214FFE4
- stack 0: 0xF0
4069	 1B3	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x1B5
4070	 1B4	JUMP		 	 
- stack 0: 0x65C
4071	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x65C
4072	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x65C
- stack 0: 0xF0000000
4073	 1BB	PUSH2	0020	 	 
- stack 2: 0x65C
- stack 1: 0xF0000000
- stack 0: 0x20
4074	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x65C
4075	 1BF	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
4076	 1C1	ADD		 	 
- stack 0: 0x660
4077	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
4078	 1C3	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x256000001C80000017CFFFF00D4009801DB000101FA00020214FFE400860013
4079	 1C4	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x256000001C80000017CFFFF00D4009801DB000101FA00020214FFE400860013
- stack 0: 0xF0
4080	 1C6	SHR		 	 
- stack 1: 0x660
- stack 0: 0x256
4081	 1C7	JUMP		 	 
- stack 0: 0x660
4082	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x660
4083	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
4084	 258	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x256000001C80000017CFFFF00D4009801DB000101FA00020214FFE400860013
4085	 259	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x256000001C80000017CFFFF00D4009801DB000101FA00020214FFE400860013
- stack 0: 0xE0
4086	 25B	SHR		 	 
- stack 1: 0x660
- stack 0: 0x2560000
4087	 25C	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x2560000
- stack 0: 0xFFFF
4088	 25F	AND		 	 
- stack 1: 0x660
- stack 0: 0x0
4089	 260	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x1
4090	 262	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0x0
4091	 263	POP		 	 
- stack 0: 0x660
4092	 264	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
4093	 266	ADD		 	 
- stack 0: 0x664
4094	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
4095	 268	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x1C80000017CFFFF00D4009801DB000101FA00020214FFE400860013019B0000
4096	 269	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x1C80000017CFFFF00D4009801DB000101FA00020214FFE400860013019B0000
- stack 0: 0xF0
4097	 26B	SHR		 	 
- stack 1: 0x664
- stack 0: 0x1C8
4098	 26C	JUMP		 	 
- stack 0: 0x664
4099	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x664
4100	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x664
- stack 0: 0xF0000000
4101	 1CE	PUSH2	0040	 	 
- stack 2: 0x664
- stack 1: 0xF0000000
- stack 0: 0x40
4102	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x664
4103	 1D2	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
4104	 1D4	ADD		 	 
- stack 0: 0x668
4105	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
4106	 1D6	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x17CFFFF00D4009801DB000101FA00020214FFE400860013019B000001B50000
4107	 1D7	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x17CFFFF00D4009801DB000101FA00020214FFE400860013019B000001B50000
- stack 0: 0xF0
4108	 1D9	SHR		 	 
- stack 1: 0x668
- stack 0: 0x17C
4109	 1DA	JUMP		 	 
- stack 0: 0x668
4110	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x668
4111	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
4112	 17E	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x17CFFFF00D4009801DB000101FA00020214FFE400860013019B000001B50000
4113	 17F	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x17CFFFF00D4009801DB000101FA00020214FFE400860013019B000001B50000
- stack 0: 0xE0
4114	 181	SHR		 	 
- stack 1: 0x668
- stack 0: 0x17CFFFF
4115	 182	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
4116	 185	AND		 	 
- stack 1: 0x668
- stack 0: 0xFFFF
4117	 186	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0xFFFF
- stack 0: 0x1
4118	 188	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4119	 189	PUSH2	0040	 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4120	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
4121	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x668
- stack 0: 0xEFFFFFFF
4122	 18E	PUSH2	0040	 	 
- stack 2: 0x668
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
4123	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x668
4124	 192	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
4125	 194	ADD		 	 
- stack 0: 0x66C
4126	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4127	 196	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xD4009801DB000101FA00020214FFE400860013019B000001B5000002560000
4128	 197	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xD4009801DB000101FA00020214FFE400860013019B000001B5000002560000
- stack 0: 0xF0
4129	 199	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xD4
4130	 19A	JUMP		 	 
- stack 0: 0x66C
4131	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x66C
4132	 D5	PUSH2	0040	 	 
- stack 1: 0x66C
- stack 0: 0x40
4133	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x66C
- stack 0: 0xEFFFFFFF
4134	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x66C
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
4135	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x66C
- stack 0: 0xEFFFFFFF
4136	 DF	PUSH2	0020	 	 
- stack 2: 0x66C
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
4137	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x66C
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
4138	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x66C
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
4139	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x66C
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
4140	 E9	LT		 	  ;; # bltu
- stack 1: 0x66C
- stack 0: 0x0
4141	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0xF2
4142	 ED	JUMPI		 	 
- stack 0: 0x66C
4143	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x66C
- stack 0: 0x10C
4144	 F1	JUMP		 	 
- stack 0: 0x66C
4145	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x66C
4146	 10D	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4147	 10F	ADD		 	 
- stack 0: 0x670
4148	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4149	 111	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x1DB000101FA00020214FFE400860013019B000001B500000256000001C80000
4150	 112	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x1DB000101FA00020214FFE400860013019B000001B500000256000001C80000
- stack 0: 0xF0
4151	 114	SHR		 	 
- stack 1: 0x670
- stack 0: 0x1DB
4152	 115	JUMP		 	 
- stack 0: 0x670
4153	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x670
4154	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4155	 1DD	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x1DB000101FA00020214FFE400860013019B000001B500000256000001C80000
4156	 1DE	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x1DB000101FA00020214FFE400860013019B000001B500000256000001C80000
- stack 0: 0xE0
4157	 1E0	SHR		 	 
- stack 1: 0x670
- stack 0: 0x1DB0001
4158	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
4159	 1E4	AND		 	 
- stack 1: 0x670
- stack 0: 0x1
4160	 1E5	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x1
- stack 0: 0x1
4161	 1E7	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x1
4162	 1E8	PUSH2	0080	 	 
- stack 2: 0x670
- stack 1: 0x1
- stack 0: 0x80
4163	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x670
- stack 1: 0x1
- stack 0: 0x0
4164	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x670
- stack 0: 0x1
4165	 1ED	PUSH2	0080	 	 
- stack 2: 0x670
- stack 1: 0x1
- stack 0: 0x80
4166	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x670
4167	 1F1	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4168	 1F3	ADD		 	 
- stack 0: 0x674
4169	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4170	 1F5	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x1FA00020214FFE400860013019B000001B500000256000001C80000017CFFFF
4171	 1F6	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x1FA00020214FFE400860013019B000001B500000256000001C80000017CFFFF
- stack 0: 0xF0
4172	 1F8	SHR		 	 
- stack 1: 0x674
- stack 0: 0x1FA
4173	 1F9	JUMP		 	 
- stack 0: 0x674
4174	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x674
4175	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
4176	 1FC	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x1FA00020214FFE400860013019B000001B500000256000001C80000017CFFFF
4177	 1FD	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x1FA00020214FFE400860013019B000001B500000256000001C80000017CFFFF
- stack 0: 0xE0
4178	 1FF	SHR		 	 
- stack 1: 0x674
- stack 0: 0x1FA0002
4179	 200	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
4180	 203	AND		 	 
- stack 1: 0x674
- stack 0: 0x2
4181	 204	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x1
4182	 206	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x2
4183	 207	PUSH2	00A0	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0xA0
4184	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x674
4185	 20B	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4186	 20D	ADD		 	 
- stack 0: 0x678
4187	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4188	 20F	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x214FFE400860013019B000001B500000256000001C80000017CFFFF02560000
4189	 210	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x214FFE400860013019B000001B500000256000001C80000017CFFFF02560000
- stack 0: 0xF0
4190	 212	SHR		 	 
- stack 1: 0x678
- stack 0: 0x214
4191	 213	JUMP		 	 
- stack 0: 0x678
4192	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x678
4193	 215	PUSH2	0080	 	 
- stack 1: 0x678
- stack 0: 0x80
4194	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x678
- stack 0: 0x1
4195	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4196	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x678
- stack 0: 0x1
4197	 21F	PUSH2	00A0	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0xA0
4198	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x2
4199	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x678
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4200	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x2
4201	 229	SUB		 	 
- stack 1: 0x678
- stack 0: 0x1
4202	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x232
4203	 22D	JUMPI		 	 
- stack 0: 0x678
4204	 232	JUMPDEST		 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x678
4205	 233	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
4206	 234	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x214FFE400860013019B000001B500000256000001C80000017CFFFF02560000
4207	 235	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x214FFE400860013019B000001B500000256000001C80000017CFFFF02560000
- stack 0: 0xE0
4208	 237	SHR		 	 
- stack 1: 0x678
- stack 0: 0x214FFE4
4209	 238	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x214FFE4
- stack 0: 0xFFFF
4210	 23B	AND		 	 
- stack 1: 0x678
- stack 0: 0xFFE4
4211	 23C	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0xFFE4
- stack 0: 0x1
4212	 23E	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4213	 23F	ADD		 	 
- stack 0: 0x65C
4214	 240	PUSH4	FFFFFFFF	 	 
- stack 1: 0x65C
- stack 0: 0xFFFFFFFF
4215	 245	AND		 	  ;; # mask to 32 bits
- stack 0: 0x65C
4216	 246	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
4217	 247	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x1B500000256000001C80000017CFFFF00D4009801DB000101FA00020214FFE4
4218	 248	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x1B500000256000001C80000017CFFFF00D4009801DB000101FA00020214FFE4
- stack 0: 0xF0
4219	 24A	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x1B5
4220	 24B	JUMP		 	 
- stack 0: 0x65C
4221	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x65C
4222	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x65C
- stack 0: 0xF0000000
4223	 1BB	PUSH2	0020	 	 
- stack 2: 0x65C
- stack 1: 0xF0000000
- stack 0: 0x20
4224	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x65C
4225	 1BF	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
4226	 1C1	ADD		 	 
- stack 0: 0x660
4227	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
4228	 1C3	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x256000001C80000017CFFFF00D4009801DB000101FA00020214FFE400860013
4229	 1C4	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x256000001C80000017CFFFF00D4009801DB000101FA00020214FFE400860013
- stack 0: 0xF0
4230	 1C6	SHR		 	 
- stack 1: 0x660
- stack 0: 0x256
4231	 1C7	JUMP		 	 
- stack 0: 0x660
4232	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x660
4233	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
4234	 258	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x256000001C80000017CFFFF00D4009801DB000101FA00020214FFE400860013
4235	 259	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x256000001C80000017CFFFF00D4009801DB000101FA00020214FFE400860013
- stack 0: 0xE0
4236	 25B	SHR		 	 
- stack 1: 0x660
- stack 0: 0x2560000
4237	 25C	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x2560000
- stack 0: 0xFFFF
4238	 25F	AND		 	 
- stack 1: 0x660
- stack 0: 0x0
4239	 260	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x1
4240	 262	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0x0
4241	 263	POP		 	 
- stack 0: 0x660
4242	 264	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
4243	 266	ADD		 	 
- stack 0: 0x664
4244	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
4245	 268	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x1C80000017CFFFF00D4009801DB000101FA00020214FFE400860013019B0000
4246	 269	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x1C80000017CFFFF00D4009801DB000101FA00020214FFE400860013019B0000
- stack 0: 0xF0
4247	 26B	SHR		 	 
- stack 1: 0x664
- stack 0: 0x1C8
4248	 26C	JUMP		 	 
- stack 0: 0x664
4249	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x664
4250	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x664
- stack 0: 0xF0000000
4251	 1CE	PUSH2	0040	 	 
- stack 2: 0x664
- stack 1: 0xF0000000
- stack 0: 0x40
4252	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x664
4253	 1D2	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
4254	 1D4	ADD		 	 
- stack 0: 0x668
4255	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
4256	 1D6	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x17CFFFF00D4009801DB000101FA00020214FFE400860013019B000001B50000
4257	 1D7	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x17CFFFF00D4009801DB000101FA00020214FFE400860013019B000001B50000
- stack 0: 0xF0
4258	 1D9	SHR		 	 
- stack 1: 0x668
- stack 0: 0x17C
4259	 1DA	JUMP		 	 
- stack 0: 0x668
4260	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x668
4261	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
4262	 17E	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x17CFFFF00D4009801DB000101FA00020214FFE400860013019B000001B50000
4263	 17F	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x17CFFFF00D4009801DB000101FA00020214FFE400860013019B000001B50000
- stack 0: 0xE0
4264	 181	SHR		 	 
- stack 1: 0x668
- stack 0: 0x17CFFFF
4265	 182	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
4266	 185	AND		 	 
- stack 1: 0x668
- stack 0: 0xFFFF
4267	 186	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0xFFFF
- stack 0: 0x1
4268	 188	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4269	 189	PUSH2	0040	 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4270	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
4271	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x668
- stack 0: 0xEFFFFFFF
4272	 18E	PUSH2	0040	 	 
- stack 2: 0x668
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
4273	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x668
4274	 192	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
4275	 194	ADD		 	 
- stack 0: 0x66C
4276	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4277	 196	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xD4009801DB000101FA00020214FFE400860013019B000001B5000002560000
4278	 197	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xD4009801DB000101FA00020214FFE400860013019B000001B5000002560000
- stack 0: 0xF0
4279	 199	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xD4
4280	 19A	JUMP		 	 
- stack 0: 0x66C
4281	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x66C
4282	 D5	PUSH2	0040	 	 
- stack 1: 0x66C
- stack 0: 0x40
4283	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x66C
- stack 0: 0xEFFFFFFF
4284	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x66C
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
4285	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x66C
- stack 0: 0xEFFFFFFF
4286	 DF	PUSH2	0020	 	 
- stack 2: 0x66C
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
4287	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x66C
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
4288	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x66C
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
4289	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x66C
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
4290	 E9	LT		 	  ;; # bltu
- stack 1: 0x66C
- stack 0: 0x0
4291	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0xF2
4292	 ED	JUMPI		 	 
- stack 0: 0x66C
4293	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x66C
- stack 0: 0x10C
4294	 F1	JUMP		 	 
- stack 0: 0x66C
4295	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x66C
4296	 10D	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4297	 10F	ADD		 	 
- stack 0: 0x670
4298	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4299	 111	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x1DB000101FA00020214FFE400860013019B000001B500000256000001C80000
4300	 112	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x1DB000101FA00020214FFE400860013019B000001B500000256000001C80000
- stack 0: 0xF0
4301	 114	SHR		 	 
- stack 1: 0x670
- stack 0: 0x1DB
4302	 115	JUMP		 	 
- stack 0: 0x670
4303	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x670
4304	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4305	 1DD	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x1DB000101FA00020214FFE400860013019B000001B500000256000001C80000
4306	 1DE	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x1DB000101FA00020214FFE400860013019B000001B500000256000001C80000
- stack 0: 0xE0
4307	 1E0	SHR		 	 
- stack 1: 0x670
- stack 0: 0x1DB0001
4308	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
4309	 1E4	AND		 	 
- stack 1: 0x670
- stack 0: 0x1
4310	 1E5	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x1
- stack 0: 0x1
4311	 1E7	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x1
4312	 1E8	PUSH2	0080	 	 
- stack 2: 0x670
- stack 1: 0x1
- stack 0: 0x80
4313	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x670
- stack 1: 0x1
- stack 0: 0x1
4314	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x670
- stack 0: 0x2
4315	 1ED	PUSH2	0080	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0x80
4316	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x670
4317	 1F1	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4318	 1F3	ADD		 	 
- stack 0: 0x674
4319	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4320	 1F5	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x1FA00020214FFE400860013019B000001B500000256000001C80000017CFFFF
4321	 1F6	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x1FA00020214FFE400860013019B000001B500000256000001C80000017CFFFF
- stack 0: 0xF0
4322	 1F8	SHR		 	 
- stack 1: 0x674
- stack 0: 0x1FA
4323	 1F9	JUMP		 	 
- stack 0: 0x674
4324	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x674
4325	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
4326	 1FC	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x1FA00020214FFE400860013019B000001B500000256000001C80000017CFFFF
4327	 1FD	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x1FA00020214FFE400860013019B000001B500000256000001C80000017CFFFF
- stack 0: 0xE0
4328	 1FF	SHR		 	 
- stack 1: 0x674
- stack 0: 0x1FA0002
4329	 200	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
4330	 203	AND		 	 
- stack 1: 0x674
- stack 0: 0x2
4331	 204	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x1
4332	 206	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x2
4333	 207	PUSH2	00A0	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0xA0
4334	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x674
4335	 20B	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4336	 20D	ADD		 	 
- stack 0: 0x678
4337	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4338	 20F	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x214FFE400860013019B000001B500000256000001C80000017CFFFF02560000
4339	 210	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x214FFE400860013019B000001B500000256000001C80000017CFFFF02560000
- stack 0: 0xF0
4340	 212	SHR		 	 
- stack 1: 0x678
- stack 0: 0x214
4341	 213	JUMP		 	 
- stack 0: 0x678
4342	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x678
4343	 215	PUSH2	0080	 	 
- stack 1: 0x678
- stack 0: 0x80
4344	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x678
- stack 0: 0x2
4345	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4346	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x678
- stack 0: 0x2
4347	 21F	PUSH2	00A0	 	 
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0xA0
4348	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0x2
4349	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x678
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4350	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0x2
4351	 229	SUB		 	 
- stack 1: 0x678
- stack 0: 0x0
4352	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0x232
4353	 22D	JUMPI		 	 
- stack 0: 0x678
4354	 22E	PUSH2	024C	 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 1: 0x678
- stack 0: 0x24C
4355	 231	JUMP		 	 
- stack 0: 0x678
4356	 24C	JUMPDEST		 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x678
4357	 24D	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
4358	 24F	ADD		 	 
- stack 0: 0x67C
4359	 250	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
4360	 251	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x860013019B000001B500000256000001C80000017CFFFF0256000000D4006C
4361	 252	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x860013019B000001B500000256000001C80000017CFFFF0256000000D4006C
- stack 0: 0xF0
4362	 254	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x86
4363	 255	JUMP		 	 
- stack 0: 0x67C
4364	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x67C
4365	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
4366	 88	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x860013019B000001B500000256000001C80000017CFFFF0256000000D4006C
4367	 89	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x860013019B000001B500000256000001C80000017CFFFF0256000000D4006C
- stack 0: 0xE0
4368	 8B	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x860013
4369	 8C	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x860013
- stack 0: 0xFFFF
4370	 8F	AND		 	 
- stack 1: 0x67C
- stack 0: 0x13
4371	 90	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x13
- stack 0: 0x1
4372	 92	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x13
4373	 93	PUSH2	0380	 	 
- stack 2: 0x67C
- stack 1: 0x13
- stack 0: 0x380
4374	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x67C
4375	 97	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4376	 99	ADD		 	 
- stack 0: 0x680
4377	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4378	 9B	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x19B000001B500000256000001C80000017CFFFF0256000000D4006C01DB0001
4379	 9C	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x19B000001B500000256000001C80000017CFFFF0256000000D4006C01DB0001
- stack 0: 0xF0
4380	 9E	SHR		 	 
- stack 1: 0x680
- stack 0: 0x19B
4381	 9F	JUMP		 	 
- stack 0: 0x680
4382	 19B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x680
4383	 19C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
4384	 19D	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x19B000001B500000256000001C80000017CFFFF0256000000D4006C01DB0001
4385	 19E	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x19B000001B500000256000001C80000017CFFFF0256000000D4006C01DB0001
- stack 0: 0xE0
4386	 1A0	SHR		 	 
- stack 1: 0x680
- stack 0: 0x19B0000
4387	 1A1	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x19B0000
- stack 0: 0xFFFF
4388	 1A4	AND		 	 
- stack 1: 0x680
- stack 0: 0x0
4389	 1A5	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x1
4390	 1A7	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x0
4391	 1A8	PUSH2	0080	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x80
4392	 1AB	MSTORE		 	  ;; # store to x4
- stack 0: 0x680
4393	 1AC	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4394	 1AE	ADD		 	 
- stack 0: 0x684
4395	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4396	 1B0	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x1B500000256000001C80000017CFFFF0256000000D4006C01DB000101FA0002
4397	 1B1	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x1B500000256000001C80000017CFFFF0256000000D4006C01DB000101FA0002
- stack 0: 0xF0
4398	 1B3	SHR		 	 
- stack 1: 0x684
- stack 0: 0x1B5
4399	 1B4	JUMP		 	 
- stack 0: 0x684
4400	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x684
4401	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x684
- stack 0: 0xF0000000
4402	 1BB	PUSH2	0020	 	 
- stack 2: 0x684
- stack 1: 0xF0000000
- stack 0: 0x20
4403	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x684
4404	 1BF	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4405	 1C1	ADD		 	 
- stack 0: 0x688
4406	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4407	 1C3	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x256000001C80000017CFFFF0256000000D4006C01DB000101FA00020214FFE0
4408	 1C4	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x256000001C80000017CFFFF0256000000D4006C01DB000101FA00020214FFE0
- stack 0: 0xF0
4409	 1C6	SHR		 	 
- stack 1: 0x688
- stack 0: 0x256
4410	 1C7	JUMP		 	 
- stack 0: 0x688
4411	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x688
4412	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4413	 258	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x256000001C80000017CFFFF0256000000D4006C01DB000101FA00020214FFE0
4414	 259	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x256000001C80000017CFFFF0256000000D4006C01DB000101FA00020214FFE0
- stack 0: 0xE0
4415	 25B	SHR		 	 
- stack 1: 0x688
- stack 0: 0x2560000
4416	 25C	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x2560000
- stack 0: 0xFFFF
4417	 25F	AND		 	 
- stack 1: 0x688
- stack 0: 0x0
4418	 260	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x1
4419	 262	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x0
4420	 263	POP		 	 
- stack 0: 0x688
4421	 264	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4422	 266	ADD		 	 
- stack 0: 0x68C
4423	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4424	 268	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x1C80000017CFFFF0256000000D4006C01DB000101FA00020214FFE000860014
4425	 269	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x1C80000017CFFFF0256000000D4006C01DB000101FA00020214FFE000860014
- stack 0: 0xF0
4426	 26B	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x1C8
4427	 26C	JUMP		 	 
- stack 0: 0x68C
4428	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x68C
4429	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x68C
- stack 0: 0xF0000000
4430	 1CE	PUSH2	0040	 	 
- stack 2: 0x68C
- stack 1: 0xF0000000
- stack 0: 0x40
4431	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x68C
4432	 1D2	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4433	 1D4	ADD		 	 
- stack 0: 0x690
4434	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4435	 1D6	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x17CFFFF0256000000D4006C01DB000101FA00020214FFE000860014019B0000
4436	 1D7	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x17CFFFF0256000000D4006C01DB000101FA00020214FFE000860014019B0000
- stack 0: 0xF0
4437	 1D9	SHR		 	 
- stack 1: 0x690
- stack 0: 0x17C
4438	 1DA	JUMP		 	 
- stack 0: 0x690
4439	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x690
4440	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
4441	 17E	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x17CFFFF0256000000D4006C01DB000101FA00020214FFE000860014019B0000
4442	 17F	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x17CFFFF0256000000D4006C01DB000101FA00020214FFE000860014019B0000
- stack 0: 0xE0
4443	 181	SHR		 	 
- stack 1: 0x690
- stack 0: 0x17CFFFF
4444	 182	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
4445	 185	AND		 	 
- stack 1: 0x690
- stack 0: 0xFFFF
4446	 186	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0xFFFF
- stack 0: 0x1
4447	 188	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4448	 189	PUSH2	0040	 	 
- stack 2: 0x690
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4449	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x690
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
4450	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x690
- stack 0: 0xEFFFFFFF
4451	 18E	PUSH2	0040	 	 
- stack 2: 0x690
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
4452	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x690
4453	 192	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4454	 194	ADD		 	 
- stack 0: 0x694
4455	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4456	 196	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x256000000D4006C01DB000101FA00020214FFE000860014019B000001B50000
4457	 197	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x256000000D4006C01DB000101FA00020214FFE000860014019B000001B50000
- stack 0: 0xF0
4458	 199	SHR		 	 
- stack 1: 0x694
- stack 0: 0x256
4459	 19A	JUMP		 	 
- stack 0: 0x694
4460	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x694
4461	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4462	 258	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x256000000D4006C01DB000101FA00020214FFE000860014019B000001B50000
4463	 259	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x256000000D4006C01DB000101FA00020214FFE000860014019B000001B50000
- stack 0: 0xE0
4464	 25B	SHR		 	 
- stack 1: 0x694
- stack 0: 0x2560000
4465	 25C	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x2560000
- stack 0: 0xFFFF
4466	 25F	AND		 	 
- stack 1: 0x694
- stack 0: 0x0
4467	 260	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x1
4468	 262	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x0
4469	 263	POP		 	 
- stack 0: 0x694
4470	 264	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4471	 266	ADD		 	 
- stack 0: 0x698
4472	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4473	 268	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0xD4006C01DB000101FA00020214FFE000860014019B000001B5000002560000
4474	 269	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0xD4006C01DB000101FA00020214FFE000860014019B000001B5000002560000
- stack 0: 0xF0
4475	 26B	SHR		 	 
- stack 1: 0x698
- stack 0: 0xD4
4476	 26C	JUMP		 	 
- stack 0: 0x698
4477	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x698
4478	 D5	PUSH2	0040	 	 
- stack 1: 0x698
- stack 0: 0x40
4479	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x698
- stack 0: 0xEFFFFFFF
4480	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x698
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
4481	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x698
- stack 0: 0xEFFFFFFF
4482	 DF	PUSH2	0020	 	 
- stack 2: 0x698
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
4483	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x698
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
4484	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x698
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
4485	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x698
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
4486	 E9	LT		 	  ;; # bltu
- stack 1: 0x698
- stack 0: 0x0
4487	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0xF2
4488	 ED	JUMPI		 	 
- stack 0: 0x698
4489	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x698
- stack 0: 0x10C
4490	 F1	JUMP		 	 
- stack 0: 0x698
4491	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x698
4492	 10D	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4493	 10F	ADD		 	 
- stack 0: 0x69C
4494	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4495	 111	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x1DB000101FA00020214FFE000860014019B000001B500000256000002560000
4496	 112	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x1DB000101FA00020214FFE000860014019B000001B500000256000002560000
- stack 0: 0xF0
4497	 114	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x1DB
4498	 115	JUMP		 	 
- stack 0: 0x69C
4499	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x69C
4500	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4501	 1DD	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x1DB000101FA00020214FFE000860014019B000001B500000256000002560000
4502	 1DE	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x1DB000101FA00020214FFE000860014019B000001B500000256000002560000
- stack 0: 0xE0
4503	 1E0	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x1DB0001
4504	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
4505	 1E4	AND		 	 
- stack 1: 0x69C
- stack 0: 0x1
4506	 1E5	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x1
4507	 1E7	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0x1
4508	 1E8	PUSH2	0080	 	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x80
4509	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x0
4510	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x69C
- stack 0: 0x1
4511	 1ED	PUSH2	0080	 	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x80
4512	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x69C
4513	 1F1	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4514	 1F3	ADD		 	 
- stack 0: 0x6A0
4515	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4516	 1F5	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x1FA00020214FFE000860014019B000001B50000025600000256000001C80000
4517	 1F6	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x1FA00020214FFE000860014019B000001B50000025600000256000001C80000
- stack 0: 0xF0
4518	 1F8	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x1FA
4519	 1F9	JUMP		 	 
- stack 0: 0x6A0
4520	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6A0
4521	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4522	 1FC	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x1FA00020214FFE000860014019B000001B50000025600000256000001C80000
4523	 1FD	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x1FA00020214FFE000860014019B000001B50000025600000256000001C80000
- stack 0: 0xE0
4524	 1FF	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x1FA0002
4525	 200	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
4526	 203	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x2
4527	 204	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x2
- stack 0: 0x1
4528	 206	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x2
4529	 207	PUSH2	00A0	 	 
- stack 2: 0x6A0
- stack 1: 0x2
- stack 0: 0xA0
4530	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x6A0
4531	 20B	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4532	 20D	ADD		 	 
- stack 0: 0x6A4
4533	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4534	 20F	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x214FFE000860014019B000001B50000025600000256000001C80000017CFFFF
4535	 210	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x214FFE000860014019B000001B50000025600000256000001C80000017CFFFF
- stack 0: 0xF0
4536	 212	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x214
4537	 213	JUMP		 	 
- stack 0: 0x6A4
4538	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6A4
4539	 215	PUSH2	0080	 	 
- stack 1: 0x6A4
- stack 0: 0x80
4540	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x6A4
- stack 0: 0x1
4541	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4542	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A4
- stack 0: 0x1
4543	 21F	PUSH2	00A0	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0xA0
4544	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x2
4545	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4546	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x2
4547	 229	SUB		 	 
- stack 1: 0x6A4
- stack 0: 0x1
4548	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x232
4549	 22D	JUMPI		 	 
- stack 0: 0x6A4
4550	 232	JUMPDEST		 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x6A4
4551	 233	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
4552	 234	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x214FFE000860014019B000001B50000025600000256000001C80000017CFFFF
4553	 235	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x214FFE000860014019B000001B50000025600000256000001C80000017CFFFF
- stack 0: 0xE0
4554	 237	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x214FFE0
4555	 238	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x214FFE0
- stack 0: 0xFFFF
4556	 23B	AND		 	 
- stack 1: 0x6A4
- stack 0: 0xFFE0
4557	 23C	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0xFFE0
- stack 0: 0x1
4558	 23E	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
4559	 23F	ADD		 	 
- stack 0: 0x684
4560	 240	PUSH4	FFFFFFFF	 	 
- stack 1: 0x684
- stack 0: 0xFFFFFFFF
4561	 245	AND		 	  ;; # mask to 32 bits
- stack 0: 0x684
4562	 246	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4563	 247	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x1B500000256000001C80000017CFFFF0256000000D4006C01DB000101FA0002
4564	 248	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x1B500000256000001C80000017CFFFF0256000000D4006C01DB000101FA0002
- stack 0: 0xF0
4565	 24A	SHR		 	 
- stack 1: 0x684
- stack 0: 0x1B5
4566	 24B	JUMP		 	 
- stack 0: 0x684
4567	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x684
4568	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x684
- stack 0: 0xF0000000
4569	 1BB	PUSH2	0020	 	 
- stack 2: 0x684
- stack 1: 0xF0000000
- stack 0: 0x20
4570	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x684
4571	 1BF	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4572	 1C1	ADD		 	 
- stack 0: 0x688
4573	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4574	 1C3	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x256000001C80000017CFFFF0256000000D4006C01DB000101FA00020214FFE0
4575	 1C4	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x256000001C80000017CFFFF0256000000D4006C01DB000101FA00020214FFE0
- stack 0: 0xF0
4576	 1C6	SHR		 	 
- stack 1: 0x688
- stack 0: 0x256
4577	 1C7	JUMP		 	 
- stack 0: 0x688
4578	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x688
4579	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4580	 258	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x256000001C80000017CFFFF0256000000D4006C01DB000101FA00020214FFE0
4581	 259	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x256000001C80000017CFFFF0256000000D4006C01DB000101FA00020214FFE0
- stack 0: 0xE0
4582	 25B	SHR		 	 
- stack 1: 0x688
- stack 0: 0x2560000
4583	 25C	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x2560000
- stack 0: 0xFFFF
4584	 25F	AND		 	 
- stack 1: 0x688
- stack 0: 0x0
4585	 260	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x1
4586	 262	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x0
4587	 263	POP		 	 
- stack 0: 0x688
4588	 264	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4589	 266	ADD		 	 
- stack 0: 0x68C
4590	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4591	 268	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x1C80000017CFFFF0256000000D4006C01DB000101FA00020214FFE000860014
4592	 269	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x1C80000017CFFFF0256000000D4006C01DB000101FA00020214FFE000860014
- stack 0: 0xF0
4593	 26B	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x1C8
4594	 26C	JUMP		 	 
- stack 0: 0x68C
4595	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x68C
4596	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x68C
- stack 0: 0xF0000000
4597	 1CE	PUSH2	0040	 	 
- stack 2: 0x68C
- stack 1: 0xF0000000
- stack 0: 0x40
4598	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x68C
4599	 1D2	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4600	 1D4	ADD		 	 
- stack 0: 0x690
4601	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4602	 1D6	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x17CFFFF0256000000D4006C01DB000101FA00020214FFE000860014019B0000
4603	 1D7	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x17CFFFF0256000000D4006C01DB000101FA00020214FFE000860014019B0000
- stack 0: 0xF0
4604	 1D9	SHR		 	 
- stack 1: 0x690
- stack 0: 0x17C
4605	 1DA	JUMP		 	 
- stack 0: 0x690
4606	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x690
4607	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
4608	 17E	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x17CFFFF0256000000D4006C01DB000101FA00020214FFE000860014019B0000
4609	 17F	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x17CFFFF0256000000D4006C01DB000101FA00020214FFE000860014019B0000
- stack 0: 0xE0
4610	 181	SHR		 	 
- stack 1: 0x690
- stack 0: 0x17CFFFF
4611	 182	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
4612	 185	AND		 	 
- stack 1: 0x690
- stack 0: 0xFFFF
4613	 186	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0xFFFF
- stack 0: 0x1
4614	 188	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4615	 189	PUSH2	0040	 	 
- stack 2: 0x690
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4616	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x690
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
4617	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x690
- stack 0: 0xEFFFFFFF
4618	 18E	PUSH2	0040	 	 
- stack 2: 0x690
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
4619	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x690
4620	 192	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4621	 194	ADD		 	 
- stack 0: 0x694
4622	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4623	 196	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x256000000D4006C01DB000101FA00020214FFE000860014019B000001B50000
4624	 197	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x256000000D4006C01DB000101FA00020214FFE000860014019B000001B50000
- stack 0: 0xF0
4625	 199	SHR		 	 
- stack 1: 0x694
- stack 0: 0x256
4626	 19A	JUMP		 	 
- stack 0: 0x694
4627	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x694
4628	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4629	 258	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x256000000D4006C01DB000101FA00020214FFE000860014019B000001B50000
4630	 259	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x256000000D4006C01DB000101FA00020214FFE000860014019B000001B50000
- stack 0: 0xE0
4631	 25B	SHR		 	 
- stack 1: 0x694
- stack 0: 0x2560000
4632	 25C	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x2560000
- stack 0: 0xFFFF
4633	 25F	AND		 	 
- stack 1: 0x694
- stack 0: 0x0
4634	 260	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x1
4635	 262	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x0
4636	 263	POP		 	 
- stack 0: 0x694
4637	 264	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4638	 266	ADD		 	 
- stack 0: 0x698
4639	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4640	 268	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0xD4006C01DB000101FA00020214FFE000860014019B000001B5000002560000
4641	 269	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0xD4006C01DB000101FA00020214FFE000860014019B000001B5000002560000
- stack 0: 0xF0
4642	 26B	SHR		 	 
- stack 1: 0x698
- stack 0: 0xD4
4643	 26C	JUMP		 	 
- stack 0: 0x698
4644	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x698
4645	 D5	PUSH2	0040	 	 
- stack 1: 0x698
- stack 0: 0x40
4646	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x698
- stack 0: 0xEFFFFFFF
4647	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x698
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
4648	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x698
- stack 0: 0xEFFFFFFF
4649	 DF	PUSH2	0020	 	 
- stack 2: 0x698
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
4650	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x698
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
4651	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x698
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
4652	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x698
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
4653	 E9	LT		 	  ;; # bltu
- stack 1: 0x698
- stack 0: 0x0
4654	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0xF2
4655	 ED	JUMPI		 	 
- stack 0: 0x698
4656	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x698
- stack 0: 0x10C
4657	 F1	JUMP		 	 
- stack 0: 0x698
4658	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x698
4659	 10D	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4660	 10F	ADD		 	 
- stack 0: 0x69C
4661	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4662	 111	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x1DB000101FA00020214FFE000860014019B000001B500000256000002560000
4663	 112	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x1DB000101FA00020214FFE000860014019B000001B500000256000002560000
- stack 0: 0xF0
4664	 114	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x1DB
4665	 115	JUMP		 	 
- stack 0: 0x69C
4666	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x69C
4667	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4668	 1DD	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x1DB000101FA00020214FFE000860014019B000001B500000256000002560000
4669	 1DE	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x1DB000101FA00020214FFE000860014019B000001B500000256000002560000
- stack 0: 0xE0
4670	 1E0	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x1DB0001
4671	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
4672	 1E4	AND		 	 
- stack 1: 0x69C
- stack 0: 0x1
4673	 1E5	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x1
4674	 1E7	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0x1
4675	 1E8	PUSH2	0080	 	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x80
4676	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x1
4677	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x69C
- stack 0: 0x2
4678	 1ED	PUSH2	0080	 	 
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0x80
4679	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x69C
4680	 1F1	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4681	 1F3	ADD		 	 
- stack 0: 0x6A0
4682	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4683	 1F5	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x1FA00020214FFE000860014019B000001B50000025600000256000001C80000
4684	 1F6	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x1FA00020214FFE000860014019B000001B50000025600000256000001C80000
- stack 0: 0xF0
4685	 1F8	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x1FA
4686	 1F9	JUMP		 	 
- stack 0: 0x6A0
4687	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6A0
4688	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4689	 1FC	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x1FA00020214FFE000860014019B000001B50000025600000256000001C80000
4690	 1FD	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x1FA00020214FFE000860014019B000001B50000025600000256000001C80000
- stack 0: 0xE0
4691	 1FF	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x1FA0002
4692	 200	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
4693	 203	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x2
4694	 204	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x2
- stack 0: 0x1
4695	 206	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x2
4696	 207	PUSH2	00A0	 	 
- stack 2: 0x6A0
- stack 1: 0x2
- stack 0: 0xA0
4697	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x6A0
4698	 20B	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4699	 20D	ADD		 	 
- stack 0: 0x6A4
4700	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4701	 20F	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x214FFE000860014019B000001B50000025600000256000001C80000017CFFFF
4702	 210	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x214FFE000860014019B000001B50000025600000256000001C80000017CFFFF
- stack 0: 0xF0
4703	 212	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x214
4704	 213	JUMP		 	 
- stack 0: 0x6A4
4705	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6A4
4706	 215	PUSH2	0080	 	 
- stack 1: 0x6A4
- stack 0: 0x80
4707	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x6A4
- stack 0: 0x2
4708	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4709	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A4
- stack 0: 0x2
4710	 21F	PUSH2	00A0	 	 
- stack 2: 0x6A4
- stack 1: 0x2
- stack 0: 0xA0
4711	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x6A4
- stack 1: 0x2
- stack 0: 0x2
4712	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4713	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A4
- stack 1: 0x2
- stack 0: 0x2
4714	 229	SUB		 	 
- stack 1: 0x6A4
- stack 0: 0x0
4715	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0x232
4716	 22D	JUMPI		 	 
- stack 0: 0x6A4
4717	 22E	PUSH2	024C	 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 1: 0x6A4
- stack 0: 0x24C
4718	 231	JUMP		 	 
- stack 0: 0x6A4
4719	 24C	JUMPDEST		 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x6A4
4720	 24D	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4721	 24F	ADD		 	 
- stack 0: 0x6A8
4722	 250	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4723	 251	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x860014019B000001B50000025600000256000001C80000017CFFFF00D40040
4724	 252	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x860014019B000001B50000025600000256000001C80000017CFFFF00D40040
- stack 0: 0xF0
4725	 254	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x86
4726	 255	JUMP		 	 
- stack 0: 0x6A8
4727	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6A8
4728	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
4729	 88	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x860014019B000001B50000025600000256000001C80000017CFFFF00D40040
4730	 89	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0x860014019B000001B50000025600000256000001C80000017CFFFF00D40040
- stack 0: 0xE0
4731	 8B	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x860014
4732	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x860014
- stack 0: 0xFFFF
4733	 8F	AND		 	 
- stack 1: 0x6A8
- stack 0: 0x14
4734	 90	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0x14
- stack 0: 0x1
4735	 92	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0x14
4736	 93	PUSH2	0380	 	 
- stack 2: 0x6A8
- stack 1: 0x14
- stack 0: 0x380
4737	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x6A8
4738	 97	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4739	 99	ADD		 	 
- stack 0: 0x6AC
4740	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4741	 9B	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x19B000001B50000025600000256000001C80000017CFFFF00D4004001DB0001
4742	 9C	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x19B000001B50000025600000256000001C80000017CFFFF00D4004001DB0001
- stack 0: 0xF0
4743	 9E	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x19B
4744	 9F	JUMP		 	 
- stack 0: 0x6AC
4745	 19B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6AC
4746	 19C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
4747	 19D	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x19B000001B50000025600000256000001C80000017CFFFF00D4004001DB0001
4748	 19E	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x19B000001B50000025600000256000001C80000017CFFFF00D4004001DB0001
- stack 0: 0xE0
4749	 1A0	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x19B0000
4750	 1A1	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x19B0000
- stack 0: 0xFFFF
4751	 1A4	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4752	 1A5	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x1
4753	 1A7	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4754	 1A8	PUSH2	0080	 	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x80
4755	 1AB	MSTORE		 	  ;; # store to x4
- stack 0: 0x6AC
4756	 1AC	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4757	 1AE	ADD		 	 
- stack 0: 0x6B0
4758	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4759	 1B0	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x1B50000025600000256000001C80000017CFFFF00D4004001DB000101FA0002
4760	 1B1	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x1B50000025600000256000001C80000017CFFFF00D4004001DB000101FA0002
- stack 0: 0xF0
4761	 1B3	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x1B5
4762	 1B4	JUMP		 	 
- stack 0: 0x6B0
4763	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x6B0
4764	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x6B0
- stack 0: 0xF0000000
4765	 1BB	PUSH2	0020	 	 
- stack 2: 0x6B0
- stack 1: 0xF0000000
- stack 0: 0x20
4766	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x6B0
4767	 1BF	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4768	 1C1	ADD		 	 
- stack 0: 0x6B4
4769	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4770	 1C3	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x25600000256000001C80000017CFFFF00D4004001DB000101FA00020214FFE0
4771	 1C4	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x25600000256000001C80000017CFFFF00D4004001DB000101FA00020214FFE0
- stack 0: 0xF0
4772	 1C6	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x256
4773	 1C7	JUMP		 	 
- stack 0: 0x6B4
4774	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6B4
4775	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
4776	 258	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x25600000256000001C80000017CFFFF00D4004001DB000101FA00020214FFE0
4777	 259	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x25600000256000001C80000017CFFFF00D4004001DB000101FA00020214FFE0
- stack 0: 0xE0
4778	 25B	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x2560000
4779	 25C	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x2560000
- stack 0: 0xFFFF
4780	 25F	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
4781	 260	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x1
4782	 262	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
4783	 263	POP		 	 
- stack 0: 0x6B4
4784	 264	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4785	 266	ADD		 	 
- stack 0: 0x6B8
4786	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4787	 268	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x256000001C80000017CFFFF00D4004001DB000101FA00020214FFE000A00001
4788	 269	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x256000001C80000017CFFFF00D4004001DB000101FA00020214FFE000A00001
- stack 0: 0xF0
4789	 26B	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x256
4790	 26C	JUMP		 	 
- stack 0: 0x6B8
4791	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6B8
4792	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
4793	 258	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x256000001C80000017CFFFF00D4004001DB000101FA00020214FFE000A00001
4794	 259	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x256000001C80000017CFFFF00D4004001DB000101FA00020214FFE000A00001
- stack 0: 0xE0
4795	 25B	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x2560000
4796	 25C	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x2560000
- stack 0: 0xFFFF
4797	 25F	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x0
4798	 260	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x0
- stack 0: 0x1
4799	 262	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x0
4800	 263	POP		 	 
- stack 0: 0x6B8
4801	 264	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4802	 266	ADD		 	 
- stack 0: 0x6BC
4803	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4804	 268	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x1C80000017CFFFF00D4004001DB000101FA00020214FFE000A00001026D0014
4805	 269	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x1C80000017CFFFF00D4004001DB000101FA00020214FFE000A00001026D0014
- stack 0: 0xF0
4806	 26B	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x1C8
4807	 26C	JUMP		 	 
- stack 0: 0x6BC
4808	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x6BC
4809	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x6BC
- stack 0: 0xF0000000
4810	 1CE	PUSH2	0040	 	 
- stack 2: 0x6BC
- stack 1: 0xF0000000
- stack 0: 0x40
4811	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x6BC
4812	 1D2	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4813	 1D4	ADD		 	 
- stack 0: 0x6C0
4814	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4815	 1D6	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x17CFFFF00D4004001DB000101FA00020214FFE000A00001026D001402AD0001
4816	 1D7	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x17CFFFF00D4004001DB000101FA00020214FFE000A00001026D001402AD0001
- stack 0: 0xF0
4817	 1D9	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x17C
4818	 1DA	JUMP		 	 
- stack 0: 0x6C0
4819	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x6C0
4820	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
4821	 17E	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x17CFFFF00D4004001DB000101FA00020214FFE000A00001026D001402AD0001
4822	 17F	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x17CFFFF00D4004001DB000101FA00020214FFE000A00001026D001402AD0001
- stack 0: 0xE0
4823	 181	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x17CFFFF
4824	 182	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
4825	 185	AND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFFF
4826	 186	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0xFFFF
- stack 0: 0x1
4827	 188	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4828	 189	PUSH2	0040	 	 
- stack 2: 0x6C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4829	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x6C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
4830	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x6C0
- stack 0: 0xEFFFFFFF
4831	 18E	PUSH2	0040	 	 
- stack 2: 0x6C0
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
4832	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x6C0
4833	 192	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4834	 194	ADD		 	 
- stack 0: 0x6C4
4835	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4836	 196	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0xD4004001DB000101FA00020214FFE000A00001026D001402AD000102AD0001
4837	 197	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0xD4004001DB000101FA00020214FFE000A00001026D001402AD000102AD0001
- stack 0: 0xF0
4838	 199	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0xD4
4839	 19A	JUMP		 	 
- stack 0: 0x6C4
4840	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x6C4
4841	 D5	PUSH2	0040	 	 
- stack 1: 0x6C4
- stack 0: 0x40
4842	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x6C4
- stack 0: 0xEFFFFFFF
4843	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C4
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
4844	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C4
- stack 0: 0xEFFFFFFF
4845	 DF	PUSH2	0020	 	 
- stack 2: 0x6C4
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
4846	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6C4
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
4847	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C4
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
4848	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C4
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
4849	 E9	LT		 	  ;; # bltu
- stack 1: 0x6C4
- stack 0: 0x0
4850	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x6C4
- stack 1: 0x0
- stack 0: 0xF2
4851	 ED	JUMPI		 	 
- stack 0: 0x6C4
4852	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x6C4
- stack 0: 0x10C
4853	 F1	JUMP		 	 
- stack 0: 0x6C4
4854	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x6C4
4855	 10D	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
4856	 10F	ADD		 	 
- stack 0: 0x6C8
4857	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
4858	 111	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x1DB000101FA00020214FFE000A00001026D001402AD000102AD000102AD0001
4859	 112	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x1DB000101FA00020214FFE000A00001026D001402AD000102AD000102AD0001
- stack 0: 0xF0
4860	 114	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x1DB
4861	 115	JUMP		 	 
- stack 0: 0x6C8
4862	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6C8
4863	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
4864	 1DD	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x1DB000101FA00020214FFE000A00001026D001402AD000102AD000102AD0001
4865	 1DE	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0x1DB000101FA00020214FFE000A00001026D001402AD000102AD000102AD0001
- stack 0: 0xE0
4866	 1E0	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x1DB0001
4867	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
4868	 1E4	AND		 	 
- stack 1: 0x6C8
- stack 0: 0x1
4869	 1E5	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0x1
- stack 0: 0x1
4870	 1E7	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x1
4871	 1E8	PUSH2	0080	 	 
- stack 2: 0x6C8
- stack 1: 0x1
- stack 0: 0x80
4872	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x6C8
- stack 1: 0x1
- stack 0: 0x0
4873	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x6C8
- stack 0: 0x1
4874	 1ED	PUSH2	0080	 	 
- stack 2: 0x6C8
- stack 1: 0x1
- stack 0: 0x80
4875	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x6C8
4876	 1F1	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
4877	 1F3	ADD		 	 
- stack 0: 0x6CC
4878	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
4879	 1F5	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x1FA00020214FFE000A00001026D001402AD000102AD000102AD000102AD0001
4880	 1F6	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x1FA00020214FFE000A00001026D001402AD000102AD000102AD000102AD0001
- stack 0: 0xF0
4881	 1F8	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x1FA
4882	 1F9	JUMP		 	 
- stack 0: 0x6CC
4883	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6CC
4884	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6CC
- stack 0: 0x6CC
4885	 1FC	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x1FA00020214FFE000A00001026D001402AD000102AD000102AD000102AD0001
4886	 1FD	PUSH1	E0	 	 
- stack 2: 0x6CC
- stack 1: 0x1FA00020214FFE000A00001026D001402AD000102AD000102AD000102AD0001
- stack 0: 0xE0
4887	 1FF	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x1FA0002
4888	 200	PUSH2	FFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
4889	 203	AND		 	 
- stack 1: 0x6CC
- stack 0: 0x2
4890	 204	PUSH1	01	 	 
- stack 2: 0x6CC
- stack 1: 0x2
- stack 0: 0x1
4891	 206	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0x2
4892	 207	PUSH2	00A0	 	 
- stack 2: 0x6CC
- stack 1: 0x2
- stack 0: 0xA0
4893	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x6CC
4894	 20B	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
4895	 20D	ADD		 	 
- stack 0: 0x6D0
4896	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
4897	 20F	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x214FFE000A00001026D001402AD000102AD000102AD000102AD000102AD0001
4898	 210	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x214FFE000A00001026D001402AD000102AD000102AD000102AD000102AD0001
- stack 0: 0xF0
4899	 212	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x214
4900	 213	JUMP		 	 
- stack 0: 0x6D0
4901	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6D0
4902	 215	PUSH2	0080	 	 
- stack 1: 0x6D0
- stack 0: 0x80
4903	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x6D0
- stack 0: 0x1
4904	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4905	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D0
- stack 0: 0x1
4906	 21F	PUSH2	00A0	 	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0xA0
4907	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x2
4908	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4909	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x2
4910	 229	SUB		 	 
- stack 1: 0x6D0
- stack 0: 0x1
4911	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x232
4912	 22D	JUMPI		 	 
- stack 0: 0x6D0
4913	 232	JUMPDEST		 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x6D0
4914	 233	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
4915	 234	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x214FFE000A00001026D001402AD000102AD000102AD000102AD000102AD0001
4916	 235	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x214FFE000A00001026D001402AD000102AD000102AD000102AD000102AD0001
- stack 0: 0xE0
4917	 237	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x214FFE0
4918	 238	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x214FFE0
- stack 0: 0xFFFF
4919	 23B	AND		 	 
- stack 1: 0x6D0
- stack 0: 0xFFE0
4920	 23C	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0xFFE0
- stack 0: 0x1
4921	 23E	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
4922	 23F	ADD		 	 
- stack 0: 0x6B0
4923	 240	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6B0
- stack 0: 0xFFFFFFFF
4924	 245	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6B0
4925	 246	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4926	 247	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x1B50000025600000256000001C80000017CFFFF00D4004001DB000101FA0002
4927	 248	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x1B50000025600000256000001C80000017CFFFF00D4004001DB000101FA0002
- stack 0: 0xF0
4928	 24A	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x1B5
4929	 24B	JUMP		 	 
- stack 0: 0x6B0
4930	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_f00000b7	  ;; # instr: lui ra,0xf0000(ignore imm)
- stack 0: 0x6B0
4931	 1B6	PUSH4	f0000000	 	 
- stack 1: 0x6B0
- stack 0: 0xF0000000
4932	 1BB	PUSH2	0020	 	 
- stack 2: 0x6B0
- stack 1: 0xF0000000
- stack 0: 0x20
4933	 1BE	MSTORE		 	  ;; # store to x1
- stack 0: 0x6B0
4934	 1BF	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4935	 1C1	ADD		 	 
- stack 0: 0x6B4
4936	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4937	 1C3	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x25600000256000001C80000017CFFFF00D4004001DB000101FA00020214FFE0
4938	 1C4	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x25600000256000001C80000017CFFFF00D4004001DB000101FA00020214FFE0
- stack 0: 0xF0
4939	 1C6	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x256
4940	 1C7	JUMP		 	 
- stack 0: 0x6B4
4941	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6B4
4942	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
4943	 258	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x25600000256000001C80000017CFFFF00D4004001DB000101FA00020214FFE0
4944	 259	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x25600000256000001C80000017CFFFF00D4004001DB000101FA00020214FFE0
- stack 0: 0xE0
4945	 25B	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x2560000
4946	 25C	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x2560000
- stack 0: 0xFFFF
4947	 25F	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
4948	 260	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x1
4949	 262	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
4950	 263	POP		 	 
- stack 0: 0x6B4
4951	 264	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4952	 266	ADD		 	 
- stack 0: 0x6B8
4953	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4954	 268	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x256000001C80000017CFFFF00D4004001DB000101FA00020214FFE000A00001
4955	 269	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x256000001C80000017CFFFF00D4004001DB000101FA00020214FFE000A00001
- stack 0: 0xF0
4956	 26B	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x256
4957	 26C	JUMP		 	 
- stack 0: 0x6B8
4958	 256	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6B8
4959	 257	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
4960	 258	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x256000001C80000017CFFFF00D4004001DB000101FA00020214FFE000A00001
4961	 259	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x256000001C80000017CFFFF00D4004001DB000101FA00020214FFE000A00001
- stack 0: 0xE0
4962	 25B	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x2560000
4963	 25C	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x2560000
- stack 0: 0xFFFF
4964	 25F	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x0
4965	 260	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x0
- stack 0: 0x1
4966	 262	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x0
4967	 263	POP		 	 
- stack 0: 0x6B8
4968	 264	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4969	 266	ADD		 	 
- stack 0: 0x6BC
4970	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4971	 268	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x1C80000017CFFFF00D4004001DB000101FA00020214FFE000A00001026D0014
4972	 269	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x1C80000017CFFFF00D4004001DB000101FA00020214FFE000A00001026D0014
- stack 0: 0xF0
4973	 26B	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x1C8
4974	 26C	JUMP		 	 
- stack 0: 0x6BC
4975	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_f0000137	  ;; # instr: lui sp,0xf0000(ignore imm)
- stack 0: 0x6BC
4976	 1C9	PUSH4	f0000000	 	 
- stack 1: 0x6BC
- stack 0: 0xF0000000
4977	 1CE	PUSH2	0040	 	 
- stack 2: 0x6BC
- stack 1: 0xF0000000
- stack 0: 0x40
4978	 1D1	MSTORE		 	  ;; # store to x2
- stack 0: 0x6BC
4979	 1D2	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4980	 1D4	ADD		 	 
- stack 0: 0x6C0
4981	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4982	 1D6	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x17CFFFF00D4004001DB000101FA00020214FFE000A00001026D001402AD0001
4983	 1D7	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x17CFFFF00D4004001DB000101FA00020214FFE000A00001026D001402AD0001
- stack 0: 0xF0
4984	 1D9	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x17C
4985	 1DA	JUMP		 	 
- stack 0: 0x6C0
4986	 17C	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x6C0
4987	 17D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
4988	 17E	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x17CFFFF00D4004001DB000101FA00020214FFE000A00001026D001402AD0001
4989	 17F	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x17CFFFF00D4004001DB000101FA00020214FFE000A00001026D001402AD0001
- stack 0: 0xE0
4990	 181	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x17CFFFF
4991	 182	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x17CFFFF
- stack 0: 0xFFFF
4992	 185	AND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFFF
4993	 186	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0xFFFF
- stack 0: 0x1
4994	 188	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4995	 189	PUSH2	0040	 	 
- stack 2: 0x6C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4996	 18C	MLOAD		 	  ;; # read from x2
- stack 2: 0x6C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF0000000
4997	 18D	ADD		 	  ;; # ADDI 2
- stack 1: 0x6C0
- stack 0: 0xEFFFFFFF
4998	 18E	PUSH2	0040	 	 
- stack 2: 0x6C0
- stack 1: 0xEFFFFFFF
- stack 0: 0x40
4999	 191	MSTORE		 	  ;; # store to x2
- stack 0: 0x6C0
5000	 192	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
5001	 194	ADD		 	 
- stack 0: 0x6C4
5002	 195	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
5003	 196	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0xD4004001DB000101FA00020214FFE000A00001026D001402AD000102AD0001
5004	 197	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0xD4004001DB000101FA00020214FFE000A00001026D001402AD000102AD0001
- stack 0: 0xF0
5005	 199	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0xD4
5006	 19A	JUMP		 	 
- stack 0: 0x6C4
5007	 D4	JUMPDEST		 ;; __riscvimpl_BLTU_0_1_2	  ;; # instr: bltu ra,sp,c(ignore imm)
- stack 0: 0x6C4
5008	 D5	PUSH2	0040	 	 
- stack 1: 0x6C4
- stack 0: 0x40
5009	 D8	MLOAD		 	  ;; # read from x2
- stack 1: 0x6C4
- stack 0: 0xEFFFFFFF
5010	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C4
- stack 1: 0xEFFFFFFF
- stack 0: 0xFFFFFFFF
5011	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C4
- stack 0: 0xEFFFFFFF
5012	 DF	PUSH2	0020	 	 
- stack 2: 0x6C4
- stack 1: 0xEFFFFFFF
- stack 0: 0x20
5013	 E2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6C4
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
5014	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C4
- stack 2: 0xEFFFFFFF
- stack 1: 0xF0000000
- stack 0: 0xFFFFFFFF
5015	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C4
- stack 1: 0xEFFFFFFF
- stack 0: 0xF0000000
5016	 E9	LT		 	  ;; # bltu
- stack 1: 0x6C4
- stack 0: 0x0
5017	 EA	PUSH2	00F2	 ;; _bltu_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 2: 0x6C4
- stack 1: 0x0
- stack 0: 0xF2
5018	 ED	JUMPI		 	 
- stack 0: 0x6C4
5019	 EE	PUSH2	010C	 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 1: 0x6C4
- stack 0: 0x10C
5020	 F1	JUMP		 	 
- stack 0: 0x6C4
5021	 10C	JUMPDEST		 ;; _bltu_after_190429371c42c2317d9d5a551e852d08da8e874daa5ff480302a559629802cad	 
- stack 0: 0x6C4
5022	 10D	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
5023	 10F	ADD		 	 
- stack 0: 0x6C8
5024	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
5025	 111	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x1DB000101FA00020214FFE000A00001026D001402AD000102AD000102AD0001
5026	 112	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x1DB000101FA00020214FFE000A00001026D001402AD000102AD000102AD0001
- stack 0: 0xF0
5027	 114	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x1DB
5028	 115	JUMP		 	 
- stack 0: 0x6C8
5029	 1DB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6C8
5030	 1DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
5031	 1DD	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x1DB000101FA00020214FFE000A00001026D001402AD000102AD000102AD0001
5032	 1DE	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0x1DB000101FA00020214FFE000A00001026D001402AD000102AD000102AD0001
- stack 0: 0xE0
5033	 1E0	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x1DB0001
5034	 1E1	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x1DB0001
- stack 0: 0xFFFF
5035	 1E4	AND		 	 
- stack 1: 0x6C8
- stack 0: 0x1
5036	 1E5	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0x1
- stack 0: 0x1
5037	 1E7	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x1
5038	 1E8	PUSH2	0080	 	 
- stack 2: 0x6C8
- stack 1: 0x1
- stack 0: 0x80
5039	 1EB	MLOAD		 	  ;; # read from x4
- stack 2: 0x6C8
- stack 1: 0x1
- stack 0: 0x1
5040	 1EC	ADD		 	  ;; # ADDI 4
- stack 1: 0x6C8
- stack 0: 0x2
5041	 1ED	PUSH2	0080	 	 
- stack 2: 0x6C8
- stack 1: 0x2
- stack 0: 0x80
5042	 1F0	MSTORE		 	  ;; # store to x4
- stack 0: 0x6C8
5043	 1F1	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
5044	 1F3	ADD		 	 
- stack 0: 0x6CC
5045	 1F4	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
5046	 1F5	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x1FA00020214FFE000A00001026D001402AD000102AD000102AD000102AD0001
5047	 1F6	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x1FA00020214FFE000A00001026D001402AD000102AD000102AD000102AD0001
- stack 0: 0xF0
5048	 1F8	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x1FA
5049	 1F9	JUMP		 	 
- stack 0: 0x6CC
5050	 1FA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6CC
5051	 1FB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6CC
- stack 0: 0x6CC
5052	 1FC	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x1FA00020214FFE000A00001026D001402AD000102AD000102AD000102AD0001
5053	 1FD	PUSH1	E0	 	 
- stack 2: 0x6CC
- stack 1: 0x1FA00020214FFE000A00001026D001402AD000102AD000102AD000102AD0001
- stack 0: 0xE0
5054	 1FF	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x1FA0002
5055	 200	PUSH2	FFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x1FA0002
- stack 0: 0xFFFF
5056	 203	AND		 	 
- stack 1: 0x6CC
- stack 0: 0x2
5057	 204	PUSH1	01	 	 
- stack 2: 0x6CC
- stack 1: 0x2
- stack 0: 0x1
5058	 206	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0x2
5059	 207	PUSH2	00A0	 	 
- stack 2: 0x6CC
- stack 1: 0x2
- stack 0: 0xA0
5060	 20A	MSTORE		 	  ;; # store to x5
- stack 0: 0x6CC
5061	 20B	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
5062	 20D	ADD		 	 
- stack 0: 0x6D0
5063	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
5064	 20F	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x214FFE000A00001026D001402AD000102AD000102AD000102AD000102AD0001
5065	 210	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x214FFE000A00001026D001402AD000102AD000102AD000102AD000102AD0001
- stack 0: 0xF0
5066	 212	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x214
5067	 213	JUMP		 	 
- stack 0: 0x6D0
5068	 214	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6D0
5069	 215	PUSH2	0080	 	 
- stack 1: 0x6D0
- stack 0: 0x80
5070	 218	MLOAD		 	  ;; # read from x4
- stack 1: 0x6D0
- stack 0: 0x2
5071	 219	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5072	 21E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D0
- stack 0: 0x2
5073	 21F	PUSH2	00A0	 	 
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0xA0
5074	 222	MLOAD		 	  ;; # read from x5
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0x2
5075	 223	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5076	 228	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0x2
5077	 229	SUB		 	 
- stack 1: 0x6D0
- stack 0: 0x0
5078	 22A	PUSH2	0232	 ;; _neq_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x232
5079	 22D	JUMPI		 	 
- stack 0: 0x6D0
5080	 22E	PUSH2	024C	 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 1: 0x6D0
- stack 0: 0x24C
5081	 231	JUMP		 	 
- stack 0: 0x6D0
5082	 24C	JUMPDEST		 ;; _neq_after_eca844463338cd06f179c85a8ac5ebff0ce364fe19793820fa465fdb051d73df	 
- stack 0: 0x6D0
5083	 24D	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
5084	 24F	ADD		 	 
- stack 0: 0x6D4
5085	 250	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
5086	 251	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0xA00001026D001402AD000102AD000102AD000102AD000102AD000102AD0001
5087	 252	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0xA00001026D001402AD000102AD000102AD000102AD000102AD000102AD0001
- stack 0: 0xF0
5088	 254	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0xA0
5089	 255	JUMP		 	 
- stack 0: 0x6D4
5090	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6D4
5091	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
5092	 A2	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0xA00001026D001402AD000102AD000102AD000102AD000102AD000102AD0001
5093	 A3	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0xA00001026D001402AD000102AD000102AD000102AD000102AD000102AD0001
- stack 0: 0xE0
5094	 A5	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0xA00001
5095	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0xA00001
- stack 0: 0xFFFF
5096	 A9	AND		 	 
- stack 1: 0x6D4
- stack 0: 0x1
5097	 AA	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x1
5098	 AC	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0x1
5099	 AD	PUSH2	0020	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x20
5100	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D4
5101	 B1	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
5102	 B3	ADD		 	 
- stack 0: 0x6D8
5103	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
5104	 B5	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x26D001402AD000102AD000102AD000102AD000102AD000102AD000102CC0003
5105	 B6	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x26D001402AD000102AD000102AD000102AD000102AD000102AD000102CC0003
- stack 0: 0xF0
5106	 B8	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x26D
5107	 B9	JUMP		 	 
- stack 0: 0x6D8
5108	 26D	JUMPDEST		 ;; __riscvimpl_BLTU_0_0_1	  ;; # instr: bltu zero,ra,14(ignore imm)
- stack 0: 0x6D8
5109	 26E	PUSH2	0020	 	 
- stack 1: 0x6D8
- stack 0: 0x20
5110	 271	MLOAD		 	  ;; # read from x1
- stack 1: 0x6D8
- stack 0: 0x1
5111	 272	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5112	 277	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D8
- stack 0: 0x1
5113	 278	PUSH1	00	 	 
- stack 2: 0x6D8
- stack 1: 0x1
- stack 0: 0x0
5114	 27A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D8
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
5115	 27F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D8
- stack 1: 0x1
- stack 0: 0x0
5116	 280	LT		 	  ;; # bltu
- stack 1: 0x6D8
- stack 0: 0x1
5117	 281	PUSH2	0289	 ;; _bltu_fea38c684e0574e84355915cdea499ed9671937b1a952514c91f0daa39dc4f9e	 
- stack 2: 0x6D8
- stack 1: 0x1
- stack 0: 0x289
5118	 284	JUMPI		 	 
- stack 0: 0x6D8
5119	 289	JUMPDEST		 ;; _bltu_fea38c684e0574e84355915cdea499ed9671937b1a952514c91f0daa39dc4f9e	 
- stack 0: 0x6D8
5120	 28A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
5121	 28B	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x26D001402AD000102AD000102AD000102AD000102AD000102AD000102CC0003
5122	 28C	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x26D001402AD000102AD000102AD000102AD000102AD000102AD000102CC0003
- stack 0: 0xE0
5123	 28E	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x26D0014
5124	 28F	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x26D0014
- stack 0: 0xFFFF
5125	 292	AND		 	 
- stack 1: 0x6D8
- stack 0: 0x14
5126	 293	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0x14
- stack 0: 0x1
5127	 295	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0x14
5128	 296	ADD		 	 
- stack 0: 0x6EC
5129	 297	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFF
5130	 29C	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6EC
5131	 29D	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
5132	 29E	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x2AD000102AD000102CC00030086001502E60008011600180021000000340738
5133	 29F	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x2AD000102AD000102CC00030086001502E60008011600180021000000340738
- stack 0: 0xF0
5134	 2A1	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x2AD
5135	 2A2	JUMP		 	 
- stack 0: 0x6EC
5136	 2AD	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x6EC
5137	 2AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
5138	 2AF	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x2AD000102AD000102CC00030086001502E60008011600180021000000340738
5139	 2B0	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x2AD000102AD000102CC00030086001502E60008011600180021000000340738
- stack 0: 0xE0
5140	 2B2	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x2AD0001
5141	 2B3	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x2AD0001
- stack 0: 0xFFFF
5142	 2B6	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x1
5143	 2B7	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x1
- stack 0: 0x1
5144	 2B9	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x1
5145	 2BA	PUSH2	0020	 	 
- stack 2: 0x6EC
- stack 1: 0x1
- stack 0: 0x20
5146	 2BD	MLOAD		 	  ;; # read from x1
- stack 2: 0x6EC
- stack 1: 0x1
- stack 0: 0x1
5147	 2BE	ADD		 	  ;; # ADDI 1
- stack 1: 0x6EC
- stack 0: 0x2
5148	 2BF	PUSH2	0020	 	 
- stack 2: 0x6EC
- stack 1: 0x2
- stack 0: 0x20
5149	 2C2	MSTORE		 	  ;; # store to x1
- stack 0: 0x6EC
5150	 2C3	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
5151	 2C5	ADD		 	 
- stack 0: 0x6F0
5152	 2C6	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
5153	 2C7	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x2AD000102CC00030086001502E6000801160018002100000034073800530042
5154	 2C8	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x2AD000102CC00030086001502E6000801160018002100000034073800530042
- stack 0: 0xF0
5155	 2CA	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x2AD
5156	 2CB	JUMP		 	 
- stack 0: 0x6F0
5157	 2AD	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x6F0
5158	 2AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
5159	 2AF	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x2AD000102CC00030086001502E6000801160018002100000034073800530042
5160	 2B0	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x2AD000102CC00030086001502E6000801160018002100000034073800530042
- stack 0: 0xE0
5161	 2B2	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x2AD0001
5162	 2B3	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x2AD0001
- stack 0: 0xFFFF
5163	 2B6	AND		 	 
- stack 1: 0x6F0
- stack 0: 0x1
5164	 2B7	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x1
5165	 2B9	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0x1
5166	 2BA	PUSH2	0020	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x20
5167	 2BD	MLOAD		 	  ;; # read from x1
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x2
5168	 2BE	ADD		 	  ;; # ADDI 1
- stack 1: 0x6F0
- stack 0: 0x3
5169	 2BF	PUSH2	0020	 	 
- stack 2: 0x6F0
- stack 1: 0x3
- stack 0: 0x20
5170	 2C2	MSTORE		 	  ;; # store to x1
- stack 0: 0x6F0
5171	 2C3	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
5172	 2C5	ADD		 	 
- stack 0: 0x6F4
5173	 2C6	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
5174	 2C7	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x2CC00030086001502E600080116001800210000003407380053004200660000
5175	 2C8	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x2CC00030086001502E600080116001800210000003407380053004200660000
- stack 0: 0xF0
5176	 2CA	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x2CC
5177	 2CB	JUMP		 	 
- stack 0: 0x6F4
5178	 2CC	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,3(ignore imm)
- stack 0: 0x6F4
5179	 2CD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
5180	 2CE	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x2CC00030086001502E600080116001800210000003407380053004200660000
5181	 2CF	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x2CC00030086001502E600080116001800210000003407380053004200660000
- stack 0: 0xE0
5182	 2D1	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x2CC0003
5183	 2D2	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x2CC0003
- stack 0: 0xFFFF
5184	 2D5	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x3
5185	 2D6	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x3
- stack 0: 0x1
5186	 2D8	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x3
5187	 2D9	PUSH2	03A0	 	 
- stack 2: 0x6F4
- stack 1: 0x3
- stack 0: 0x3A0
5188	 2DC	MSTORE		 	  ;; # store to x29
- stack 0: 0x6F4
5189	 2DD	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
5190	 2DF	ADD		 	 
- stack 0: 0x6F8
5191	 2E0	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
5192	 2E1	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x86001502E60008011600180021000000340738005300420066000003280001
5193	 2E2	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x86001502E60008011600180021000000340738005300420066000003280001
- stack 0: 0xF0
5194	 2E4	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x86
5195	 2E5	JUMP		 	 
- stack 0: 0x6F8
5196	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6F8
5197	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F8
- stack 0: 0x6F8
5198	 88	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x86001502E60008011600180021000000340738005300420066000003280001
5199	 89	PUSH1	E0	 	 
- stack 2: 0x6F8
- stack 1: 0x86001502E60008011600180021000000340738005300420066000003280001
- stack 0: 0xE0
5200	 8B	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x860015
5201	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6F8
- stack 1: 0x860015
- stack 0: 0xFFFF
5202	 8F	AND		 	 
- stack 1: 0x6F8
- stack 0: 0x15
5203	 90	PUSH1	01	 	 
- stack 2: 0x6F8
- stack 1: 0x15
- stack 0: 0x1
5204	 92	SIGNEXTEND		 	 
- stack 1: 0x6F8
- stack 0: 0x15
5205	 93	PUSH2	0380	 	 
- stack 2: 0x6F8
- stack 1: 0x15
- stack 0: 0x380
5206	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x6F8
5207	 97	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
5208	 99	ADD		 	 
- stack 0: 0x6FC
5209	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
5210	 9B	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x2E6000801160018002100000034073800530042006600000328000100210000
5211	 9C	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x2E6000801160018002100000034073800530042006600000328000100210000
- stack 0: 0xF0
5212	 9E	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x2E6
5213	 9F	JUMP		 	 
- stack 0: 0x6FC
5214	 2E6	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,8(ignore imm)
- stack 0: 0x6FC
5215	 2E7	PUSH2	0020	 	 
- stack 1: 0x6FC
- stack 0: 0x20
5216	 2EA	MLOAD		 	  ;; # read from x1
- stack 1: 0x6FC
- stack 0: 0x3
5217	 2EB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
5218	 2F0	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6FC
- stack 0: 0x3
5219	 2F1	PUSH2	03A0	 	 
- stack 2: 0x6FC
- stack 1: 0x3
- stack 0: 0x3A0
5220	 2F4	MLOAD		 	  ;; # read from x29
- stack 2: 0x6FC
- stack 1: 0x3
- stack 0: 0x3
5221	 2F5	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6FC
- stack 2: 0x3
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
5222	 2FA	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6FC
- stack 1: 0x3
- stack 0: 0x3
5223	 2FB	SUB		 	 
- stack 1: 0x6FC
- stack 0: 0x0
5224	 2FC	PUSH2	0304	 ;; _neq_e6d75d13ea9d5f26008d7c4963444352ca3d781619b9c5c0c04da5d0511e5cc7	 
- stack 2: 0x6FC
- stack 1: 0x0
- stack 0: 0x304
5225	 2FF	JUMPI		 	 
- stack 0: 0x6FC
5226	 300	PUSH2	031E	 ;; _neq_after_e6d75d13ea9d5f26008d7c4963444352ca3d781619b9c5c0c04da5d0511e5cc7	 
- stack 1: 0x6FC
- stack 0: 0x31E
5227	 303	JUMP		 	 
- stack 0: 0x6FC
5228	 31E	JUMPDEST		 ;; _neq_after_e6d75d13ea9d5f26008d7c4963444352ca3d781619b9c5c0c04da5d0511e5cc7	 
- stack 0: 0x6FC
5229	 31F	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
5230	 321	ADD		 	 
- stack 0: 0x700
5231	 322	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
5232	 323	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x11600180021000000340738005300420066000003280001002100000034073C
5233	 324	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x11600180021000000340738005300420066000003280001002100000034073C
- stack 0: 0xF0
5234	 326	SHR		 	 
- stack 1: 0x700
- stack 0: 0x116
5235	 327	JUMP		 	 
- stack 0: 0x700
5236	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2e4(ignore imm)
- stack 0: 0x700
5237	 117	PUSH1	00	 	 
- stack 1: 0x700
- stack 0: 0x0
5238	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x700
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
5239	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x700
- stack 0: 0x0
5240	 11F	PUSH2	0380	 	 
- stack 2: 0x700
- stack 1: 0x0
- stack 0: 0x380
5241	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x700
- stack 1: 0x0
- stack 0: 0x15
5242	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x700
- stack 2: 0x0
- stack 1: 0x15
- stack 0: 0xFFFFFFFF
5243	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x700
- stack 1: 0x0
- stack 0: 0x15
5244	 129	SUB		 	 
- stack 1: 0x700
- stack 0: 0x15
5245	 12A	PUSH2	0132	 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 2: 0x700
- stack 1: 0x15
- stack 0: 0x132
5246	 12D	JUMPI		 	 
- stack 0: 0x700
5247	 132	JUMPDEST		 ;; _neq_1ac87eeda783ebca5f65413712af5659fafb4683eaa579f43032988d375683cd	 
- stack 0: 0x700
5248	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x700
- stack 0: 0x700
5249	 134	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x11600180021000000340738005300420066000003280001002100000034073C
5250	 135	PUSH1	E0	 	 
- stack 2: 0x700
- stack 1: 0x11600180021000000340738005300420066000003280001002100000034073C
- stack 0: 0xE0
5251	 137	SHR		 	 
- stack 1: 0x700
- stack 0: 0x1160018
5252	 138	PUSH2	FFFF	 	 
- stack 2: 0x700
- stack 1: 0x1160018
- stack 0: 0xFFFF
5253	 13B	AND		 	 
- stack 1: 0x700
- stack 0: 0x18
5254	 13C	PUSH1	01	 	 
- stack 2: 0x700
- stack 1: 0x18
- stack 0: 0x1
5255	 13E	SIGNEXTEND		 	 
- stack 1: 0x700
- stack 0: 0x18
5256	 13F	ADD		 	 
- stack 0: 0x718
5257	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x718
- stack 0: 0xFFFFFFFF
5258	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x718
5259	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
5260	 147	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x2100000034073C005300420066000003330000006600006574796D00007473
5261	 148	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x2100000034073C005300420066000003330000006600006574796D00007473
- stack 0: 0xF0
5262	 14A	SHR		 	 
- stack 1: 0x718
- stack 0: 0x21
5263	 14B	JUMP		 	 
- stack 0: 0x718
5264	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x718
5265	 22	PUSH4	00000000	 	 
- stack 1: 0x718
- stack 0: 0x0
5266	 27	PUSH2	0160	 	 
- stack 2: 0x718
- stack 1: 0x0
- stack 0: 0x160
5267	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x718
5268	 2B	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
5269	 2D	ADD		 	 
- stack 0: 0x71C
5270	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
5271	 2F	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x34073C005300420066000003330000006600006574796D0000747300525245
5272	 30	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x34073C005300420066000003330000006600006574796D0000747300525245
- stack 0: 0xF0
5273	 32	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x34
5274	 33	JUMP		 	 
- stack 0: 0x71C
5275	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1840(ignore imm)
- stack 0: 0x71C
5276	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
5277	 36	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x34073C005300420066000003330000006600006574796D0000747300525245
5278	 37	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x34073C005300420066000003330000006600006574796D0000747300525245
- stack 0: 0xE0
5279	 39	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x34073C
5280	 3A	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x34073C
- stack 0: 0xFFFF
5281	 3D	AND		 	 
- stack 1: 0x71C
- stack 0: 0x73C
5282	 3E	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0x73C
- stack 0: 0x1
5283	 40	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0x73C
5284	 41	PUSH2	0160	 	 
- stack 2: 0x71C
- stack 1: 0x73C
- stack 0: 0x160
5285	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x71C
- stack 1: 0x73C
- stack 0: 0x0
5286	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x71C
- stack 0: 0x73C
5287	 46	PUSH2	0160	 	 
- stack 2: 0x71C
- stack 1: 0x73C
- stack 0: 0x160
5288	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x71C
5289	 4A	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
5290	 4C	ADD		 	 
- stack 0: 0x720
5291	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
5292	 4E	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x5300420066000003330000006600006574796D000074730052524500004B4F
5293	 4F	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0x5300420066000003330000006600006574796D000074730052524500004B4F
- stack 0: 0xF0
5294	 51	SHR		 	 
- stack 1: 0x720
- stack 0: 0x53
5295	 52	JUMP		 	 
- stack 0: 0x720
5296	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x720
5297	 54	PUSH4	00042000	 	 
- stack 1: 0x720
- stack 0: 0x42000
5298	 59	PUSH2	0140	 	 
- stack 2: 0x720
- stack 1: 0x42000
- stack 0: 0x140
5299	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x720
5300	 5D	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
5301	 5F	ADD		 	 
- stack 0: 0x724
5302	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
5303	 61	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x66000003330000006600006574796D000074730052524500004B4F00000000
5304	 62	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x66000003330000006600006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
5305	 64	SHR		 	 
- stack 1: 0x724
- stack 0: 0x66
5306	 65	JUMP		 	 
- stack 0: 0x724
5307	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x724
5308	 67	PUSH2	0140	 	 
- stack 1: 0x724
- stack 0: 0x140
5309	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x724
- stack 0: 0x42000
5310	 6B	PUSH2	0075	 ;; _ecall_6d35a454813011404af6a330c420f45458feea69d5e761eb3a584871feb8881f	 
- stack 2: 0x724
- stack 1: 0x42000
- stack 0: 0x75
5311	 6E	JUMPI		 	 
- stack 0: 0x724
5312	 75	JUMPDEST		 ;; _ecall_6d35a454813011404af6a330c420f45458feea69d5e761eb3a584871feb8881f	 
- stack 0: 0x724
5313	 76	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
5314	 78	PUSH2	0160	 	 
- stack 2: 0x724
- stack 1: 0x4
- stack 0: 0x160
5315	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x724
- stack 1: 0x4
- stack 0: 0x73C
5316	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x724
5317	 7D	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
5318	 7F	ADD		 	 
- stack 0: 0x728
5319	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
5320	 81	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x3330000006600006574796D000074730052524500004B4F0000000000000000
5321	 82	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x3330000006600006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
5322	 84	SHR		 	 
- stack 1: 0x728
- stack 0: 0x333
5323	 85	JUMP		 	 
- stack 0: 0x728
5324	 333	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x728
5325	 334	PUSH4	00000000	 	 
- stack 1: 0x728
- stack 0: 0x0
5326	 339	PUSH2	0140	 	 
- stack 2: 0x728
- stack 1: 0x0
- stack 0: 0x140
5327	 33C	MSTORE		 	  ;; # store to x10
- stack 0: 0x728
5328	 33D	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
5329	 33F	ADD		 	 
- stack 0: 0x72C
5330	 340	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
5331	 341	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x6600006574796D000074730052524500004B4F000000000000000000000000
5332	 342	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x6600006574796D000074730052524500004B4F000000000000000000000000
- stack 0: 0xF0
5333	 344	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x66
5334	 345	JUMP		 	 
- stack 0: 0x72C
5335	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x72C
5336	 67	PUSH2	0140	 	 
- stack 1: 0x72C
- stack 0: 0x140
5337	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x72C
- stack 0: 0x0
5338	 6B	PUSH2	0075	 ;; _ecall_6d35a454813011404af6a330c420f45458feea69d5e761eb3a584871feb8881f	 
- stack 2: 0x72C
- stack 1: 0x0
- stack 0: 0x75
5339	 6E	JUMPI		 	 
- stack 0: 0x72C
5340	 6F	PUSH1	20	 	 
- stack 1: 0x72C
- stack 0: 0x20
5341	 71	PUSH2	0160	 	 
- stack 2: 0x72C
- stack 1: 0x20
- stack 0: 0x160
5342	 74	RETURN		 	 
Final bytecode length; 1671
Returned: 000000000000000000000000000000000000000000000000000000000000073c
gasUsed : 18887
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c
** HOT: 430 - range: 430,434,438,43c
** HOT: 450 - range: 450,454,458,45c
** HOT: 470 - range: 470,474,478,47c
** HOT: 48c - range: 48c,490,494,498
** HOT: 4a8 - range: 4a8,4ac,4b0,4b4
** HOT: 4c4 - range: 4c4,4c8,4cc,4d0,4d4
** HOT: 4e4 - range: 4e4,4e8,4ec,4f0,4f4,4f8
** HOT: 4ec - range: 4ec,4f0,4f4,4f8
** HOT: 4fc - range: 4fc,500,504
** HOT: 508 - range: 508,50c,510,514,518,51c,520
** HOT: 510 - range: 510,514,518,51c,520
** HOT: 524 - range: 524,528,52c
** HOT: 530 - range: 530,534,538,53c,540,544,548,54c
** HOT: 538 - range: 538,53c,540,544,548,54c
** HOT: 550 - range: 550,554,558
** HOT: 55c - range: 55c,560,564,568,56c,570,574
** HOT: 564 - range: 564,568,56c,570,574
** HOT: 578 - range: 578,57c,580
** HOT: 584 - range: 584,588,58c,590,594,598,59c,5a0
** HOT: 58c - range: 58c,590,594,598,59c,5a0
** HOT: 5a4 - range: 5a4,5a8,5ac
** HOT: 5b0 - range: 5b0,5b4,5b8,5bc,5c0,5c4,5c8,5cc
** HOT: 5b8 - range: 5b8,5bc,5c0,5c4,5c8,5cc
** HOT: 5d0 - range: 5d0,5d4,5d8
** HOT: 5dc - range: 5dc,5e0,5e4,5e8,5ec,5f0
** HOT: 5e4 - range: 5e4,5e8,5ec,5f0
** HOT: 5f4 - range: 5f4,5f8,5fc
** HOT: 600 - range: 600,604,608,60c,610,614,618
** HOT: 608 - range: 608,60c,610,614,618
** HOT: 61c - range: 61c,620,624
** HOT: 628 - range: 628,62c,630,634,638,63c,640,644
** HOT: 630 - range: 630,634,638,63c,640,644
** HOT: 648 - range: 648,64c,650
** HOT: 654 - range: 654,658,65c,660,664,668,66c
** HOT: 65c - range: 65c,660,664,668,66c
** HOT: 670 - range: 670,674,678
** HOT: 67c - range: 67c,680,684,688,68c,690,694,698
** HOT: 684 - range: 684,688,68c,690,694,698
** HOT: 69c - range: 69c,6a0,6a4
** HOT: 6a8 - range: 6a8,6ac,6b0,6b4,6b8,6bc,6c0,6c4
** HOT: 6b0 - range: 6b0,6b4,6b8,6bc,6c0,6c4
** HOT: 6c8 - range: 6c8,6cc,6d0
** HOT: 6d4 - range: 6d4,6d8
** HOT: 6ec - range: 6ec,6f0,6f4,6f8,6fc
