Running in EVM:
0	 0	PUSH4	0310	 	 
- stack 0: 0x310
1	 5	PUSH2	02DB	 ;; _rambegin	 
- stack 1: 0x310
- stack 0: 0x2DB
2	 8	PUSH1	01	 	 
- stack 2: 0x310
- stack 1: 0x2DB
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x310
- stack 0: 0x2DC
4	 B	PUSH2	0400	 	 
- stack 2: 0x310
- stack 1: 0x2DC
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100000034070000530042006600000086000200A0000000BA000100D4000C
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100000034070000530042006600000086000200A0000000BA000100D4000C
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34070000530042006600000086000200A0000000BA000100D4000C011602B4
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34070000530042006600000086000200A0000000BA000100D4000C011602B4
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1792(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34070000530042006600000086000200A0000000BA000100D4000C011602B4
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34070000530042006600000086000200A0000000BA000100D4000C011602B4
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340700
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340700
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x700
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x700
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x700
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000200A0000000BA000100D4000C011602B40116000C
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000200A0000000BA000100D4000C011602B40116000C
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000200A0000000BA000100D4000C011602B40116000C00D4FFFC
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000200A0000000BA000100D4000C011602B40116000C00D4FFFC
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_80743f148a2b007e17de332bb754194e6a9724bfc5f264743d28287740638d3d	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_80743f148a2b007e17de332bb754194e6a9724bfc5f264743d28287740638d3d	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x700
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA000100D4000C011602B40116000C00D4FFFC011602A8
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA000100D4000C011602B40116000C00D4FFFC011602A8
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA000100D4000C011602B40116000C00D4FFFC011602A8
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA000100D4000C011602B40116000C00D4FFFC011602A8
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860002
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860002
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x2
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x2
84	 93	PUSH2	0380	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x380
85	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000100D4000C011602B40116000C00D4FFFC011602A800860003
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000100D4000C011602B40116000C00D4FFFC011602A800860003
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000100D4000C011602B40116000C00D4FFFC011602A800860003
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000100D4000C011602B40116000C00D4FFFC011602A800860003
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x20
103	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
104	 B1	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
105	 B3	ADD		 	 
- stack 0: 0x418
106	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
107	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000100D4000C011602B40116000C00D4FFFC011602A80086000300A00001
108	 B6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBA000100D4000C011602B40116000C00D4FFFC011602A80086000300A00001
- stack 0: 0xF0
109	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA
110	 B9	JUMP		 	 
- stack 0: 0x418
111	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x418
112	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
113	 BC	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000100D4000C011602B40116000C00D4FFFC011602A80086000300A00001
114	 BD	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xBA000100D4000C011602B40116000C00D4FFFC011602A80086000300A00001
- stack 0: 0xE0
115	 BF	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA0001
116	 C0	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xBA0001
- stack 0: 0xFFFF
117	 C3	AND		 	 
- stack 1: 0x418
- stack 0: 0x1
118	 C4	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0x1
- stack 0: 0x1
119	 C6	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0x1
120	 C7	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0x1
- stack 0: 0x40
121	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x418
122	 CB	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
123	 CD	ADD		 	 
- stack 0: 0x41C
124	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
125	 CF	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C011602B40116000C00D4FFFC011602A80086000300A0000100BA0000
126	 D0	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C011602B40116000C00D4FFFC011602A80086000300A0000100BA0000
- stack 0: 0xF0
127	 D2	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD4
128	 D3	JUMP		 	 
- stack 0: 0x41C
129	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x41C
130	 D5	PUSH2	0020	 	 
- stack 1: 0x41C
- stack 0: 0x20
131	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x41C
- stack 0: 0x0
132	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
133	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x41C
- stack 0: 0x0
134	 DF	PUSH2	0040	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x40
135	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x1
136	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x41C
- stack 2: 0x0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
137	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x1
138	 E9	SUB		 	 
- stack 1: 0x41C
- stack 0: 0x1
139	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0xF2
140	 ED	JUMPI		 	 
- stack 0: 0x41C
141	 F2	JUMPDEST		 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x41C
142	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
143	 F4	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C011602B40116000C00D4FFFC011602A80086000300A0000100BA0000
144	 F5	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C011602B40116000C00D4FFFC011602A80086000300A0000100BA0000
- stack 0: 0xE0
145	 F7	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD4000C
146	 F8	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
147	 FB	AND		 	 
- stack 1: 0x41C
- stack 0: 0xC
148	 FC	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0xC
- stack 0: 0x1
149	 FE	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0xC
150	 FF	ADD		 	 
- stack 0: 0x428
151	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFF
152	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x428
153	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
154	 107	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC011602A80086000300A0000100BA000000D4000C011602940116000C
155	 108	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC011602A80086000300A0000100BA000000D4000C011602940116000C
- stack 0: 0xF0
156	 10A	SHR		 	 
- stack 1: 0x428
- stack 0: 0xD4
157	 10B	JUMP		 	 
- stack 0: 0x428
158	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x428
159	 D5	PUSH2	0020	 	 
- stack 1: 0x428
- stack 0: 0x20
160	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x428
- stack 0: 0x0
161	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
162	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x428
- stack 0: 0x0
163	 DF	PUSH2	0040	 	 
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x40
164	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x1
165	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x428
- stack 2: 0x0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
166	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x1
167	 E9	SUB		 	 
- stack 1: 0x428
- stack 0: 0x1
168	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0xF2
169	 ED	JUMPI		 	 
- stack 0: 0x428
170	 F2	JUMPDEST		 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x428
171	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
172	 F4	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC011602A80086000300A0000100BA000000D4000C011602940116000C
173	 F5	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC011602A80086000300A0000100BA000000D4000C011602940116000C
- stack 0: 0xE0
174	 F7	SHR		 	 
- stack 1: 0x428
- stack 0: 0xD4FFFC
175	 F8	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
176	 FB	AND		 	 
- stack 1: 0x428
- stack 0: 0xFFFC
177	 FC	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0xFFFC
- stack 0: 0x1
178	 FE	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
179	 FF	ADD		 	 
- stack 0: 0x424
180	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x424
- stack 0: 0xFFFFFFFF
181	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x424
182	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
183	 107	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x116000C00D4FFFC011602A80086000300A0000100BA000000D4000C01160294
184	 108	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x116000C00D4FFFC011602A80086000300A0000100BA000000D4000C01160294
- stack 0: 0xF0
185	 10A	SHR		 	 
- stack 1: 0x424
- stack 0: 0x116
186	 10B	JUMP		 	 
- stack 0: 0x424
187	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b4(ignore imm)
- stack 0: 0x424
188	 117	PUSH1	00	 	 
- stack 1: 0x424
- stack 0: 0x0
189	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
190	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x0
191	 11F	PUSH2	0380	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x380
192	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x2
193	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0x0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
194	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x2
195	 129	SUB		 	 
- stack 1: 0x424
- stack 0: 0x2
196	 12A	PUSH2	0132	 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 2: 0x424
- stack 1: 0x2
- stack 0: 0x132
197	 12D	JUMPI		 	 
- stack 0: 0x424
198	 132	JUMPDEST		 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 0: 0x424
199	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
200	 134	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x116000C00D4FFFC011602A80086000300A0000100BA000000D4000C01160294
201	 135	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x116000C00D4FFFC011602A80086000300A0000100BA000000D4000C01160294
- stack 0: 0xE0
202	 137	SHR		 	 
- stack 1: 0x424
- stack 0: 0x116000C
203	 138	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x116000C
- stack 0: 0xFFFF
204	 13B	AND		 	 
- stack 1: 0x424
- stack 0: 0xC
205	 13C	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0xC
- stack 0: 0x1
206	 13E	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0xC
207	 13F	ADD		 	 
- stack 0: 0x430
208	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x430
- stack 0: 0xFFFFFFFF
209	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x430
210	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
211	 147	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x86000300A0000100BA000000D4000C011602940116000C00D4FFFC01160288
212	 148	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x86000300A0000100BA000000D4000C011602940116000C00D4FFFC01160288
- stack 0: 0xF0
213	 14A	SHR		 	 
- stack 1: 0x430
- stack 0: 0x86
214	 14B	JUMP		 	 
- stack 0: 0x430
215	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x430
216	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
217	 88	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x86000300A0000100BA000000D4000C011602940116000C00D4FFFC01160288
218	 89	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0x86000300A0000100BA000000D4000C011602940116000C00D4FFFC01160288
- stack 0: 0xE0
219	 8B	SHR		 	 
- stack 1: 0x430
- stack 0: 0x860003
220	 8C	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0x860003
- stack 0: 0xFFFF
221	 8F	AND		 	 
- stack 1: 0x430
- stack 0: 0x3
222	 90	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x1
223	 92	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x3
224	 93	PUSH2	0380	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x380
225	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x430
226	 97	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
227	 99	ADD		 	 
- stack 0: 0x434
228	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
229	 9B	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xA0000100BA000000D4000C011602940116000C00D4FFFC0116028800860004
230	 9C	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xA0000100BA000000D4000C011602940116000C00D4FFFC0116028800860004
- stack 0: 0xF0
231	 9E	SHR		 	 
- stack 1: 0x434
- stack 0: 0xA0
232	 9F	JUMP		 	 
- stack 0: 0x434
233	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x434
234	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
235	 A2	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xA0000100BA000000D4000C011602940116000C00D4FFFC0116028800860004
236	 A3	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xA0000100BA000000D4000C011602940116000C00D4FFFC0116028800860004
- stack 0: 0xE0
237	 A5	SHR		 	 
- stack 1: 0x434
- stack 0: 0xA00001
238	 A6	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xA00001
- stack 0: 0xFFFF
239	 A9	AND		 	 
- stack 1: 0x434
- stack 0: 0x1
240	 AA	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0x1
- stack 0: 0x1
241	 AC	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0x1
242	 AD	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0x1
- stack 0: 0x20
243	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x434
244	 B1	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
245	 B3	ADD		 	 
- stack 0: 0x438
246	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
247	 B5	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xBA000000D4000C011602940116000C00D4FFFC011602880086000400A0FFFF
248	 B6	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xBA000000D4000C011602940116000C00D4FFFC011602880086000400A0FFFF
- stack 0: 0xF0
249	 B8	SHR		 	 
- stack 1: 0x438
- stack 0: 0xBA
250	 B9	JUMP		 	 
- stack 0: 0x438
251	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x438
252	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
253	 BC	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xBA000000D4000C011602940116000C00D4FFFC011602880086000400A0FFFF
254	 BD	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xBA000000D4000C011602940116000C00D4FFFC011602880086000400A0FFFF
- stack 0: 0xE0
255	 BF	SHR		 	 
- stack 1: 0x438
- stack 0: 0xBA0000
256	 C0	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xBA0000
- stack 0: 0xFFFF
257	 C3	AND		 	 
- stack 1: 0x438
- stack 0: 0x0
258	 C4	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x0
- stack 0: 0x1
259	 C6	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x0
260	 C7	PUSH2	0040	 	 
- stack 2: 0x438
- stack 1: 0x0
- stack 0: 0x40
261	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x438
262	 CB	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
263	 CD	ADD		 	 
- stack 0: 0x43C
264	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
265	 CF	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C011602940116000C00D4FFFC011602880086000400A0FFFF00BA0001
266	 D0	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C011602940116000C00D4FFFC011602880086000400A0FFFF00BA0001
- stack 0: 0xF0
267	 D2	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xD4
268	 D3	JUMP		 	 
- stack 0: 0x43C
269	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x43C
270	 D5	PUSH2	0020	 	 
- stack 1: 0x43C
- stack 0: 0x20
271	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x43C
- stack 0: 0x1
272	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
273	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0x1
274	 DF	PUSH2	0040	 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x40
275	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x0
276	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
277	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x0
278	 E9	SUB		 	 
- stack 1: 0x43C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
279	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF2
280	 ED	JUMPI		 	 
- stack 0: 0x43C
281	 F2	JUMPDEST		 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x43C
282	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
283	 F4	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C011602940116000C00D4FFFC011602880086000400A0FFFF00BA0001
284	 F5	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C011602940116000C00D4FFFC011602880086000400A0FFFF00BA0001
- stack 0: 0xE0
285	 F7	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xD4000C
286	 F8	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
287	 FB	AND		 	 
- stack 1: 0x43C
- stack 0: 0xC
288	 FC	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0xC
- stack 0: 0x1
289	 FE	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0xC
290	 FF	ADD		 	 
- stack 0: 0x448
291	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFF
292	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x448
293	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
294	 107	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC011602880086000400A0FFFF00BA000100D4000C011602740116000C
295	 108	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC011602880086000400A0FFFF00BA000100D4000C011602740116000C
- stack 0: 0xF0
296	 10A	SHR		 	 
- stack 1: 0x448
- stack 0: 0xD4
297	 10B	JUMP		 	 
- stack 0: 0x448
298	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x448
299	 D5	PUSH2	0020	 	 
- stack 1: 0x448
- stack 0: 0x20
300	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x448
- stack 0: 0x1
301	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
302	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0x1
303	 DF	PUSH2	0040	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x40
304	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x0
305	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x448
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
306	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x0
307	 E9	SUB		 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
308	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x448
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xF2
309	 ED	JUMPI		 	 
- stack 0: 0x448
310	 F2	JUMPDEST		 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x448
311	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x448
- stack 0: 0x448
312	 F4	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC011602880086000400A0FFFF00BA000100D4000C011602740116000C
313	 F5	PUSH1	E0	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC011602880086000400A0FFFF00BA000100D4000C011602740116000C
- stack 0: 0xE0
314	 F7	SHR		 	 
- stack 1: 0x448
- stack 0: 0xD4FFFC
315	 F8	PUSH2	FFFF	 	 
- stack 2: 0x448
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
316	 FB	AND		 	 
- stack 1: 0x448
- stack 0: 0xFFFC
317	 FC	PUSH1	01	 	 
- stack 2: 0x448
- stack 1: 0xFFFC
- stack 0: 0x1
318	 FE	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
319	 FF	ADD		 	 
- stack 0: 0x444
320	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x444
- stack 0: 0xFFFFFFFF
321	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x444
322	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
323	 107	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x116000C00D4FFFC011602880086000400A0FFFF00BA000100D4000C01160274
324	 108	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x116000C00D4FFFC011602880086000400A0FFFF00BA000100D4000C01160274
- stack 0: 0xF0
325	 10A	SHR		 	 
- stack 1: 0x444
- stack 0: 0x116
326	 10B	JUMP		 	 
- stack 0: 0x444
327	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b4(ignore imm)
- stack 0: 0x444
328	 117	PUSH1	00	 	 
- stack 1: 0x444
- stack 0: 0x0
329	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
330	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x444
- stack 0: 0x0
331	 11F	PUSH2	0380	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x380
332	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x3
333	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x444
- stack 2: 0x0
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
334	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x3
335	 129	SUB		 	 
- stack 1: 0x444
- stack 0: 0x3
336	 12A	PUSH2	0132	 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 2: 0x444
- stack 1: 0x3
- stack 0: 0x132
337	 12D	JUMPI		 	 
- stack 0: 0x444
338	 132	JUMPDEST		 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 0: 0x444
339	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
340	 134	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x116000C00D4FFFC011602880086000400A0FFFF00BA000100D4000C01160274
341	 135	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0x116000C00D4FFFC011602880086000400A0FFFF00BA000100D4000C01160274
- stack 0: 0xE0
342	 137	SHR		 	 
- stack 1: 0x444
- stack 0: 0x116000C
343	 138	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0x116000C
- stack 0: 0xFFFF
344	 13B	AND		 	 
- stack 1: 0x444
- stack 0: 0xC
345	 13C	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0xC
- stack 0: 0x1
346	 13E	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0xC
347	 13F	ADD		 	 
- stack 0: 0x450
348	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x450
- stack 0: 0xFFFFFFFF
349	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x450
350	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
351	 147	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x86000400A0FFFF00BA000100D4000C011602740116000C00D4FFFC01160268
352	 148	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x86000400A0FFFF00BA000100D4000C011602740116000C00D4FFFC01160268
- stack 0: 0xF0
353	 14A	SHR		 	 
- stack 1: 0x450
- stack 0: 0x86
354	 14B	JUMP		 	 
- stack 0: 0x450
355	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
356	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
357	 88	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x86000400A0FFFF00BA000100D4000C011602740116000C00D4FFFC01160268
358	 89	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x86000400A0FFFF00BA000100D4000C011602740116000C00D4FFFC01160268
- stack 0: 0xE0
359	 8B	SHR		 	 
- stack 1: 0x450
- stack 0: 0x860004
360	 8C	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x860004
- stack 0: 0xFFFF
361	 8F	AND		 	 
- stack 1: 0x450
- stack 0: 0x4
362	 90	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x1
363	 92	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x4
364	 93	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x380
365	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
366	 97	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
367	 99	ADD		 	 
- stack 0: 0x454
368	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
369	 9B	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xA0FFFF00BA000100D4000C011602740116000C00D4FFFC0116026800860005
370	 9C	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0xA0FFFF00BA000100D4000C011602740116000C00D4FFFC0116026800860005
- stack 0: 0xF0
371	 9E	SHR		 	 
- stack 1: 0x454
- stack 0: 0xA0
372	 9F	JUMP		 	 
- stack 0: 0x454
373	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x454
374	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
375	 A2	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xA0FFFF00BA000100D4000C011602740116000C00D4FFFC0116026800860005
376	 A3	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0xA0FFFF00BA000100D4000C011602740116000C00D4FFFC0116026800860005
- stack 0: 0xE0
377	 A5	SHR		 	 
- stack 1: 0x454
- stack 0: 0xA0FFFF
378	 A6	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
379	 A9	AND		 	 
- stack 1: 0x454
- stack 0: 0xFFFF
380	 AA	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0xFFFF
- stack 0: 0x1
381	 AC	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
382	 AD	PUSH2	0020	 	 
- stack 2: 0x454
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
383	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x454
384	 B1	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
385	 B3	ADD		 	 
- stack 0: 0x458
386	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
387	 B5	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xBA000100D4000C011602740116000C00D4FFFC011602680086000500A00001
388	 B6	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0xBA000100D4000C011602740116000C00D4FFFC011602680086000500A00001
- stack 0: 0xF0
389	 B8	SHR		 	 
- stack 1: 0x458
- stack 0: 0xBA
390	 B9	JUMP		 	 
- stack 0: 0x458
391	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x458
392	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
393	 BC	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xBA000100D4000C011602740116000C00D4FFFC011602680086000500A00001
394	 BD	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0xBA000100D4000C011602740116000C00D4FFFC011602680086000500A00001
- stack 0: 0xE0
395	 BF	SHR		 	 
- stack 1: 0x458
- stack 0: 0xBA0001
396	 C0	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0xBA0001
- stack 0: 0xFFFF
397	 C3	AND		 	 
- stack 1: 0x458
- stack 0: 0x1
398	 C4	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0x1
- stack 0: 0x1
399	 C6	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0x1
400	 C7	PUSH2	0040	 	 
- stack 2: 0x458
- stack 1: 0x1
- stack 0: 0x40
401	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x458
402	 CB	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
403	 CD	ADD		 	 
- stack 0: 0x45C
404	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
405	 CF	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C011602740116000C00D4FFFC011602680086000500A0000100BAFFFF
406	 D0	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C011602740116000C00D4FFFC011602680086000500A0000100BAFFFF
- stack 0: 0xF0
407	 D2	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xD4
408	 D3	JUMP		 	 
- stack 0: 0x45C
409	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x45C
410	 D5	PUSH2	0020	 	 
- stack 1: 0x45C
- stack 0: 0x20
411	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x45C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
412	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
413	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x45C
- stack 0: 0xFFFFFFFF
414	 DF	PUSH2	0040	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
415	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x45C
- stack 1: 0xFFFFFFFF
- stack 0: 0x1
416	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x45C
- stack 2: 0xFFFFFFFF
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
417	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x45C
- stack 1: 0xFFFFFFFF
- stack 0: 0x1
418	 E9	SUB		 	 
- stack 1: 0x45C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000002
419	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000002
- stack 0: 0xF2
420	 ED	JUMPI		 	 
- stack 0: 0x45C
421	 F2	JUMPDEST		 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x45C
422	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
423	 F4	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C011602740116000C00D4FFFC011602680086000500A0000100BAFFFF
424	 F5	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C011602740116000C00D4FFFC011602680086000500A0000100BAFFFF
- stack 0: 0xE0
425	 F7	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xD4000C
426	 F8	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
427	 FB	AND		 	 
- stack 1: 0x45C
- stack 0: 0xC
428	 FC	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0xC
- stack 0: 0x1
429	 FE	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0xC
430	 FF	ADD		 	 
- stack 0: 0x468
431	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFF
432	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x468
433	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
434	 107	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC011602680086000500A0000100BAFFFF00D4000C011602540116000C
435	 108	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC011602680086000500A0000100BAFFFF00D4000C011602540116000C
- stack 0: 0xF0
436	 10A	SHR		 	 
- stack 1: 0x468
- stack 0: 0xD4
437	 10B	JUMP		 	 
- stack 0: 0x468
438	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x468
439	 D5	PUSH2	0020	 	 
- stack 1: 0x468
- stack 0: 0x20
440	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
441	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
442	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x468
- stack 0: 0xFFFFFFFF
443	 DF	PUSH2	0040	 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
444	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x468
- stack 1: 0xFFFFFFFF
- stack 0: 0x1
445	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x468
- stack 2: 0xFFFFFFFF
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
446	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x468
- stack 1: 0xFFFFFFFF
- stack 0: 0x1
447	 E9	SUB		 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000002
448	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000002
- stack 0: 0xF2
449	 ED	JUMPI		 	 
- stack 0: 0x468
450	 F2	JUMPDEST		 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x468
451	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
452	 F4	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC011602680086000500A0000100BAFFFF00D4000C011602540116000C
453	 F5	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC011602680086000500A0000100BAFFFF00D4000C011602540116000C
- stack 0: 0xE0
454	 F7	SHR		 	 
- stack 1: 0x468
- stack 0: 0xD4FFFC
455	 F8	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
456	 FB	AND		 	 
- stack 1: 0x468
- stack 0: 0xFFFC
457	 FC	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0xFFFC
- stack 0: 0x1
458	 FE	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
459	 FF	ADD		 	 
- stack 0: 0x464
460	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x464
- stack 0: 0xFFFFFFFF
461	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x464
462	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
463	 107	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x116000C00D4FFFC011602680086000500A0000100BAFFFF00D4000C01160254
464	 108	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x116000C00D4FFFC011602680086000500A0000100BAFFFF00D4000C01160254
- stack 0: 0xF0
465	 10A	SHR		 	 
- stack 1: 0x464
- stack 0: 0x116
466	 10B	JUMP		 	 
- stack 0: 0x464
467	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b4(ignore imm)
- stack 0: 0x464
468	 117	PUSH1	00	 	 
- stack 1: 0x464
- stack 0: 0x0
469	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
470	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x464
- stack 0: 0x0
471	 11F	PUSH2	0380	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x380
472	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x4
473	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x464
- stack 2: 0x0
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
474	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x4
475	 129	SUB		 	 
- stack 1: 0x464
- stack 0: 0x4
476	 12A	PUSH2	0132	 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 2: 0x464
- stack 1: 0x4
- stack 0: 0x132
477	 12D	JUMPI		 	 
- stack 0: 0x464
478	 132	JUMPDEST		 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 0: 0x464
479	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
480	 134	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x116000C00D4FFFC011602680086000500A0000100BAFFFF00D4000C01160254
481	 135	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0x116000C00D4FFFC011602680086000500A0000100BAFFFF00D4000C01160254
- stack 0: 0xE0
482	 137	SHR		 	 
- stack 1: 0x464
- stack 0: 0x116000C
483	 138	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0x116000C
- stack 0: 0xFFFF
484	 13B	AND		 	 
- stack 1: 0x464
- stack 0: 0xC
485	 13C	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xC
- stack 0: 0x1
486	 13E	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xC
487	 13F	ADD		 	 
- stack 0: 0x470
488	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x470
- stack 0: 0xFFFFFFFF
489	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x470
490	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
491	 147	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x86000500A0000100BAFFFF00D4000C011602540116000C00D4FFFC01160248
492	 148	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x86000500A0000100BAFFFF00D4000C011602540116000C00D4FFFC01160248
- stack 0: 0xF0
493	 14A	SHR		 	 
- stack 1: 0x470
- stack 0: 0x86
494	 14B	JUMP		 	 
- stack 0: 0x470
495	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x470
496	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
497	 88	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x86000500A0000100BAFFFF00D4000C011602540116000C00D4FFFC01160248
498	 89	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x86000500A0000100BAFFFF00D4000C011602540116000C00D4FFFC01160248
- stack 0: 0xE0
499	 8B	SHR		 	 
- stack 1: 0x470
- stack 0: 0x860005
500	 8C	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x860005
- stack 0: 0xFFFF
501	 8F	AND		 	 
- stack 1: 0x470
- stack 0: 0x5
502	 90	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x1
503	 92	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0x5
504	 93	PUSH2	0380	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x380
505	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x470
506	 97	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
507	 99	ADD		 	 
- stack 0: 0x474
508	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
509	 9B	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000100BAFFFF00D4000C011602540116000C00D4FFFC0116024800860006
510	 9C	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0xA0000100BAFFFF00D4000C011602540116000C00D4FFFC0116024800860006
- stack 0: 0xF0
511	 9E	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA0
512	 9F	JUMP		 	 
- stack 0: 0x474
513	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x474
514	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
515	 A2	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000100BAFFFF00D4000C011602540116000C00D4FFFC0116024800860006
516	 A3	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0xA0000100BAFFFF00D4000C011602540116000C00D4FFFC0116024800860006
- stack 0: 0xE0
517	 A5	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA00001
518	 A6	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0xA00001
- stack 0: 0xFFFF
519	 A9	AND		 	 
- stack 1: 0x474
- stack 0: 0x1
520	 AA	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x1
- stack 0: 0x1
521	 AC	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x1
522	 AD	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0x1
- stack 0: 0x20
523	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x474
524	 B1	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
525	 B3	ADD		 	 
- stack 0: 0x478
526	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
527	 B5	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBAFFFF00D4000C011602540116000C00D4FFFC011602480086000600A00000
528	 B6	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0xBAFFFF00D4000C011602540116000C00D4FFFC011602480086000600A00000
- stack 0: 0xF0
529	 B8	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBA
530	 B9	JUMP		 	 
- stack 0: 0x478
531	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x478
532	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
533	 BC	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBAFFFF00D4000C011602540116000C00D4FFFC011602480086000600A00000
534	 BD	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0xBAFFFF00D4000C011602540116000C00D4FFFC011602480086000600A00000
- stack 0: 0xE0
535	 BF	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBAFFFF
536	 C0	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
537	 C3	AND		 	 
- stack 1: 0x478
- stack 0: 0xFFFF
538	 C4	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0xFFFF
- stack 0: 0x1
539	 C6	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
540	 C7	PUSH2	0040	 	 
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
541	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x478
542	 CB	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
543	 CD	ADD		 	 
- stack 0: 0x47C
544	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
545	 CF	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xD4000C011602540116000C00D4FFFC011602480086000600A0000000BA0000
546	 D0	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0xD4000C011602540116000C00D4FFFC011602480086000600A0000000BA0000
- stack 0: 0xF0
547	 D2	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xD4
548	 D3	JUMP		 	 
- stack 0: 0x47C
549	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x47C
550	 D5	PUSH2	0020	 	 
- stack 1: 0x47C
- stack 0: 0x20
551	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x47C
- stack 0: 0x1
552	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x47C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
553	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x47C
- stack 0: 0x1
554	 DF	PUSH2	0040	 	 
- stack 2: 0x47C
- stack 1: 0x1
- stack 0: 0x40
555	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x47C
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
556	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x47C
- stack 2: 0x1
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
557	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x47C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
558	 E9	SUB		 	 
- stack 1: 0x47C
- stack 0: 0xFFFFFFFE
559	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x47C
- stack 1: 0xFFFFFFFE
- stack 0: 0xF2
560	 ED	JUMPI		 	 
- stack 0: 0x47C
561	 F2	JUMPDEST		 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x47C
562	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
563	 F4	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xD4000C011602540116000C00D4FFFC011602480086000600A0000000BA0000
564	 F5	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0xD4000C011602540116000C00D4FFFC011602480086000600A0000000BA0000
- stack 0: 0xE0
565	 F7	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xD4000C
566	 F8	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0xD4000C
- stack 0: 0xFFFF
567	 FB	AND		 	 
- stack 1: 0x47C
- stack 0: 0xC
568	 FC	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0xC
- stack 0: 0x1
569	 FE	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0xC
570	 FF	ADD		 	 
- stack 0: 0x488
571	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x488
- stack 0: 0xFFFFFFFF
572	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x488
573	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
574	 107	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xD4FFFC011602480086000600A0000000BA000000D400080116000801160230
575	 108	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0xD4FFFC011602480086000600A0000000BA000000D400080116000801160230
- stack 0: 0xF0
576	 10A	SHR		 	 
- stack 1: 0x488
- stack 0: 0xD4
577	 10B	JUMP		 	 
- stack 0: 0x488
578	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x488
579	 D5	PUSH2	0020	 	 
- stack 1: 0x488
- stack 0: 0x20
580	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x488
- stack 0: 0x1
581	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x488
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
582	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x488
- stack 0: 0x1
583	 DF	PUSH2	0040	 	 
- stack 2: 0x488
- stack 1: 0x1
- stack 0: 0x40
584	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x488
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
585	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x488
- stack 2: 0x1
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
586	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x488
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
587	 E9	SUB		 	 
- stack 1: 0x488
- stack 0: 0xFFFFFFFE
588	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x488
- stack 1: 0xFFFFFFFE
- stack 0: 0xF2
589	 ED	JUMPI		 	 
- stack 0: 0x488
590	 F2	JUMPDEST		 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x488
591	 F3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x488
- stack 0: 0x488
592	 F4	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xD4FFFC011602480086000600A0000000BA000000D400080116000801160230
593	 F5	PUSH1	E0	 	 
- stack 2: 0x488
- stack 1: 0xD4FFFC011602480086000600A0000000BA000000D400080116000801160230
- stack 0: 0xE0
594	 F7	SHR		 	 
- stack 1: 0x488
- stack 0: 0xD4FFFC
595	 F8	PUSH2	FFFF	 	 
- stack 2: 0x488
- stack 1: 0xD4FFFC
- stack 0: 0xFFFF
596	 FB	AND		 	 
- stack 1: 0x488
- stack 0: 0xFFFC
597	 FC	PUSH1	01	 	 
- stack 2: 0x488
- stack 1: 0xFFFC
- stack 0: 0x1
598	 FE	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
599	 FF	ADD		 	 
- stack 0: 0x484
600	 100	PUSH4	FFFFFFFF	 	 
- stack 1: 0x484
- stack 0: 0xFFFFFFFF
601	 105	AND		 	  ;; # mask to 32 bits
- stack 0: 0x484
602	 106	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
603	 107	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x116000C00D4FFFC011602480086000600A0000000BA000000D4000801160008
604	 108	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x116000C00D4FFFC011602480086000600A0000000BA000000D4000801160008
- stack 0: 0xF0
605	 10A	SHR		 	 
- stack 1: 0x484
- stack 0: 0x116
606	 10B	JUMP		 	 
- stack 0: 0x484
607	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b4(ignore imm)
- stack 0: 0x484
608	 117	PUSH1	00	 	 
- stack 1: 0x484
- stack 0: 0x0
609	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
610	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x484
- stack 0: 0x0
611	 11F	PUSH2	0380	 	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x380
612	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x5
613	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x484
- stack 2: 0x0
- stack 1: 0x5
- stack 0: 0xFFFFFFFF
614	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x5
615	 129	SUB		 	 
- stack 1: 0x484
- stack 0: 0x5
616	 12A	PUSH2	0132	 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 2: 0x484
- stack 1: 0x5
- stack 0: 0x132
617	 12D	JUMPI		 	 
- stack 0: 0x484
618	 132	JUMPDEST		 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 0: 0x484
619	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x484
- stack 0: 0x484
620	 134	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x116000C00D4FFFC011602480086000600A0000000BA000000D4000801160008
621	 135	PUSH1	E0	 	 
- stack 2: 0x484
- stack 1: 0x116000C00D4FFFC011602480086000600A0000000BA000000D4000801160008
- stack 0: 0xE0
622	 137	SHR		 	 
- stack 1: 0x484
- stack 0: 0x116000C
623	 138	PUSH2	FFFF	 	 
- stack 2: 0x484
- stack 1: 0x116000C
- stack 0: 0xFFFF
624	 13B	AND		 	 
- stack 1: 0x484
- stack 0: 0xC
625	 13C	PUSH1	01	 	 
- stack 2: 0x484
- stack 1: 0xC
- stack 0: 0x1
626	 13E	SIGNEXTEND		 	 
- stack 1: 0x484
- stack 0: 0xC
627	 13F	ADD		 	 
- stack 0: 0x490
628	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x490
- stack 0: 0xFFFFFFFF
629	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x490
630	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
631	 147	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x86000600A0000000BA000000D40008011600080116023000D4FFFC00860007
632	 148	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x86000600A0000000BA000000D40008011600080116023000D4FFFC00860007
- stack 0: 0xF0
633	 14A	SHR		 	 
- stack 1: 0x490
- stack 0: 0x86
634	 14B	JUMP		 	 
- stack 0: 0x490
635	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x490
636	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
637	 88	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x86000600A0000000BA000000D40008011600080116023000D4FFFC00860007
638	 89	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0x86000600A0000000BA000000D40008011600080116023000D4FFFC00860007
- stack 0: 0xE0
639	 8B	SHR		 	 
- stack 1: 0x490
- stack 0: 0x860006
640	 8C	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0x860006
- stack 0: 0xFFFF
641	 8F	AND		 	 
- stack 1: 0x490
- stack 0: 0x6
642	 90	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0x6
- stack 0: 0x1
643	 92	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0x6
644	 93	PUSH2	0380	 	 
- stack 2: 0x490
- stack 1: 0x6
- stack 0: 0x380
645	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x490
646	 97	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
647	 99	ADD		 	 
- stack 0: 0x494
648	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
649	 9B	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xA0000000BA000000D40008011600080116023000D4FFFC0086000700A00001
650	 9C	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xA0000000BA000000D40008011600080116023000D4FFFC0086000700A00001
- stack 0: 0xF0
651	 9E	SHR		 	 
- stack 1: 0x494
- stack 0: 0xA0
652	 9F	JUMP		 	 
- stack 0: 0x494
653	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x494
654	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
655	 A2	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xA0000000BA000000D40008011600080116023000D4FFFC0086000700A00001
656	 A3	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0xA0000000BA000000D40008011600080116023000D4FFFC0086000700A00001
- stack 0: 0xE0
657	 A5	SHR		 	 
- stack 1: 0x494
- stack 0: 0xA00000
658	 A6	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0xA00000
- stack 0: 0xFFFF
659	 A9	AND		 	 
- stack 1: 0x494
- stack 0: 0x0
660	 AA	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x1
661	 AC	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x0
662	 AD	PUSH2	0020	 	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x20
663	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x494
664	 B1	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
665	 B3	ADD		 	 
- stack 0: 0x498
666	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
667	 B5	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xBA000000D40008011600080116023000D4FFFC0086000700A0000100BA0001
668	 B6	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xBA000000D40008011600080116023000D4FFFC0086000700A0000100BA0001
- stack 0: 0xF0
669	 B8	SHR		 	 
- stack 1: 0x498
- stack 0: 0xBA
670	 B9	JUMP		 	 
- stack 0: 0x498
671	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x498
672	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
673	 BC	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xBA000000D40008011600080116023000D4FFFC0086000700A0000100BA0001
674	 BD	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0xBA000000D40008011600080116023000D4FFFC0086000700A0000100BA0001
- stack 0: 0xE0
675	 BF	SHR		 	 
- stack 1: 0x498
- stack 0: 0xBA0000
676	 C0	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0xBA0000
- stack 0: 0xFFFF
677	 C3	AND		 	 
- stack 1: 0x498
- stack 0: 0x0
678	 C4	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0x1
679	 C6	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x0
680	 C7	PUSH2	0040	 	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0x40
681	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x498
682	 CB	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
683	 CD	ADD		 	 
- stack 0: 0x49C
684	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
685	 CF	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0xD40008011600080116023000D4FFFC0086000700A0000100BA000100D40008
686	 D0	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0xD40008011600080116023000D4FFFC0086000700A0000100BA000100D40008
- stack 0: 0xF0
687	 D2	SHR		 	 
- stack 1: 0x49C
- stack 0: 0xD4
688	 D3	JUMP		 	 
- stack 0: 0x49C
689	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x49C
690	 D5	PUSH2	0020	 	 
- stack 1: 0x49C
- stack 0: 0x20
691	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x49C
- stack 0: 0x0
692	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
693	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0x0
694	 DF	PUSH2	0040	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x40
695	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x0
696	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x49C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
697	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x0
698	 E9	SUB		 	 
- stack 1: 0x49C
- stack 0: 0x0
699	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0xF2
700	 ED	JUMPI		 	 
- stack 0: 0x49C
701	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x49C
- stack 0: 0x10C
702	 F1	JUMP		 	 
- stack 0: 0x49C
703	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x49C
704	 10D	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
705	 10F	ADD		 	 
- stack 0: 0x4A0
706	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
707	 111	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x11600080116023000D4FFFC0086000700A0000100BA000100D4000801160008
708	 112	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x11600080116023000D4FFFC0086000700A0000100BA000100D4000801160008
- stack 0: 0xF0
709	 114	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x116
710	 115	JUMP		 	 
- stack 0: 0x4A0
711	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b4(ignore imm)
- stack 0: 0x4A0
712	 117	PUSH1	00	 	 
- stack 1: 0x4A0
- stack 0: 0x0
713	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
714	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A0
- stack 0: 0x0
715	 11F	PUSH2	0380	 	 
- stack 2: 0x4A0
- stack 1: 0x0
- stack 0: 0x380
716	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x4A0
- stack 1: 0x0
- stack 0: 0x6
717	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4A0
- stack 2: 0x0
- stack 1: 0x6
- stack 0: 0xFFFFFFFF
718	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4A0
- stack 1: 0x0
- stack 0: 0x6
719	 129	SUB		 	 
- stack 1: 0x4A0
- stack 0: 0x6
720	 12A	PUSH2	0132	 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 2: 0x4A0
- stack 1: 0x6
- stack 0: 0x132
721	 12D	JUMPI		 	 
- stack 0: 0x4A0
722	 132	JUMPDEST		 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 0: 0x4A0
723	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
724	 134	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x11600080116023000D4FFFC0086000700A0000100BA000100D4000801160008
725	 135	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0x11600080116023000D4FFFC0086000700A0000100BA000100D4000801160008
- stack 0: 0xE0
726	 137	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x1160008
727	 138	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x1160008
- stack 0: 0xFFFF
728	 13B	AND		 	 
- stack 1: 0x4A0
- stack 0: 0x8
729	 13C	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0x8
- stack 0: 0x1
730	 13E	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0x8
731	 13F	ADD		 	 
- stack 0: 0x4A8
732	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFF
733	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4A8
734	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
735	 147	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xD4FFFC0086000700A0000100BA000100D40008011600080116021400D4FFFC
736	 148	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xD4FFFC0086000700A0000100BA000100D40008011600080116021400D4FFFC
- stack 0: 0xF0
737	 14A	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xD4
738	 14B	JUMP		 	 
- stack 0: 0x4A8
739	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x4A8
740	 D5	PUSH2	0020	 	 
- stack 1: 0x4A8
- stack 0: 0x20
741	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4A8
- stack 0: 0x0
742	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
743	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A8
- stack 0: 0x0
744	 DF	PUSH2	0040	 	 
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0x40
745	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0x0
746	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4A8
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
747	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0x0
748	 E9	SUB		 	 
- stack 1: 0x4A8
- stack 0: 0x0
749	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0xF2
750	 ED	JUMPI		 	 
- stack 0: 0x4A8
751	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x4A8
- stack 0: 0x10C
752	 F1	JUMP		 	 
- stack 0: 0x4A8
753	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x4A8
754	 10D	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
755	 10F	ADD		 	 
- stack 0: 0x4AC
756	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
757	 111	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x86000700A0000100BA000100D40008011600080116021400D4FFFC00860008
758	 112	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x86000700A0000100BA000100D40008011600080116021400D4FFFC00860008
- stack 0: 0xF0
759	 114	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x86
760	 115	JUMP		 	 
- stack 0: 0x4AC
761	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4AC
762	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
763	 88	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x86000700A0000100BA000100D40008011600080116021400D4FFFC00860008
764	 89	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0x86000700A0000100BA000100D40008011600080116021400D4FFFC00860008
- stack 0: 0xE0
765	 8B	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x860007
766	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0x860007
- stack 0: 0xFFFF
767	 8F	AND		 	 
- stack 1: 0x4AC
- stack 0: 0x7
768	 90	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0x7
- stack 0: 0x1
769	 92	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0x7
770	 93	PUSH2	0380	 	 
- stack 2: 0x4AC
- stack 1: 0x7
- stack 0: 0x380
771	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4AC
772	 97	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
773	 99	ADD		 	 
- stack 0: 0x4B0
774	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
775	 9B	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xA0000100BA000100D40008011600080116021400D4FFFC0086000800A0FFFF
776	 9C	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0xA0000100BA000100D40008011600080116021400D4FFFC0086000800A0FFFF
- stack 0: 0xF0
777	 9E	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xA0
778	 9F	JUMP		 	 
- stack 0: 0x4B0
779	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4B0
780	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
781	 A2	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xA0000100BA000100D40008011600080116021400D4FFFC0086000800A0FFFF
782	 A3	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0xA0000100BA000100D40008011600080116021400D4FFFC0086000800A0FFFF
- stack 0: 0xE0
783	 A5	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xA00001
784	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0xA00001
- stack 0: 0xFFFF
785	 A9	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x1
786	 AA	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x1
- stack 0: 0x1
787	 AC	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x1
788	 AD	PUSH2	0020	 	 
- stack 2: 0x4B0
- stack 1: 0x1
- stack 0: 0x20
789	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B0
790	 B1	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
791	 B3	ADD		 	 
- stack 0: 0x4B4
792	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
793	 B5	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0xBA000100D40008011600080116021400D4FFFC0086000800A0FFFF00BAFFFF
794	 B6	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0xBA000100D40008011600080116021400D4FFFC0086000800A0FFFF00BAFFFF
- stack 0: 0xF0
795	 B8	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0xBA
796	 B9	JUMP		 	 
- stack 0: 0x4B4
797	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x4B4
798	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
799	 BC	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0xBA000100D40008011600080116021400D4FFFC0086000800A0FFFF00BAFFFF
800	 BD	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0xBA000100D40008011600080116021400D4FFFC0086000800A0FFFF00BAFFFF
- stack 0: 0xE0
801	 BF	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0xBA0001
802	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0xBA0001
- stack 0: 0xFFFF
803	 C3	AND		 	 
- stack 1: 0x4B4
- stack 0: 0x1
804	 C4	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0x1
805	 C6	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0x1
806	 C7	PUSH2	0040	 	 
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0x40
807	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4B4
808	 CB	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
809	 CD	ADD		 	 
- stack 0: 0x4B8
810	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
811	 CF	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xD40008011600080116021400D4FFFC0086000800A0FFFF00BAFFFF00D40008
812	 D0	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0xD40008011600080116021400D4FFFC0086000800A0FFFF00BAFFFF00D40008
- stack 0: 0xF0
813	 D2	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xD4
814	 D3	JUMP		 	 
- stack 0: 0x4B8
815	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x4B8
816	 D5	PUSH2	0020	 	 
- stack 1: 0x4B8
- stack 0: 0x20
817	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4B8
- stack 0: 0x1
818	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
819	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B8
- stack 0: 0x1
820	 DF	PUSH2	0040	 	 
- stack 2: 0x4B8
- stack 1: 0x1
- stack 0: 0x40
821	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4B8
- stack 1: 0x1
- stack 0: 0x1
822	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B8
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
823	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B8
- stack 1: 0x1
- stack 0: 0x1
824	 E9	SUB		 	 
- stack 1: 0x4B8
- stack 0: 0x0
825	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0xF2
826	 ED	JUMPI		 	 
- stack 0: 0x4B8
827	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x4B8
- stack 0: 0x10C
828	 F1	JUMP		 	 
- stack 0: 0x4B8
829	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x4B8
830	 10D	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
831	 10F	ADD		 	 
- stack 0: 0x4BC
832	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
833	 111	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x11600080116021400D4FFFC0086000800A0FFFF00BAFFFF00D4000801160008
834	 112	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x11600080116021400D4FFFC0086000800A0FFFF00BAFFFF00D4000801160008
- stack 0: 0xF0
835	 114	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x116
836	 115	JUMP		 	 
- stack 0: 0x4BC
837	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b4(ignore imm)
- stack 0: 0x4BC
838	 117	PUSH1	00	 	 
- stack 1: 0x4BC
- stack 0: 0x0
839	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
840	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4BC
- stack 0: 0x0
841	 11F	PUSH2	0380	 	 
- stack 2: 0x4BC
- stack 1: 0x0
- stack 0: 0x380
842	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x4BC
- stack 1: 0x0
- stack 0: 0x7
843	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4BC
- stack 2: 0x0
- stack 1: 0x7
- stack 0: 0xFFFFFFFF
844	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4BC
- stack 1: 0x0
- stack 0: 0x7
845	 129	SUB		 	 
- stack 1: 0x4BC
- stack 0: 0x7
846	 12A	PUSH2	0132	 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 2: 0x4BC
- stack 1: 0x7
- stack 0: 0x132
847	 12D	JUMPI		 	 
- stack 0: 0x4BC
848	 132	JUMPDEST		 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 0: 0x4BC
849	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
850	 134	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x11600080116021400D4FFFC0086000800A0FFFF00BAFFFF00D4000801160008
851	 135	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0x11600080116021400D4FFFC0086000800A0FFFF00BAFFFF00D4000801160008
- stack 0: 0xE0
852	 137	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x1160008
853	 138	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x1160008
- stack 0: 0xFFFF
854	 13B	AND		 	 
- stack 1: 0x4BC
- stack 0: 0x8
855	 13C	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0x8
- stack 0: 0x1
856	 13E	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0x8
857	 13F	ADD		 	 
- stack 0: 0x4C4
858	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4C4
- stack 0: 0xFFFFFFFF
859	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4C4
860	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
861	 147	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xD4FFFC0086000800A0FFFF00BAFFFF00D4000801160008011601F800D4FFFC
862	 148	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0xD4FFFC0086000800A0FFFF00BAFFFF00D4000801160008011601F800D4FFFC
- stack 0: 0xF0
863	 14A	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xD4
864	 14B	JUMP		 	 
- stack 0: 0x4C4
865	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x4C4
866	 D5	PUSH2	0020	 	 
- stack 1: 0x4C4
- stack 0: 0x20
867	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4C4
- stack 0: 0x1
868	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
869	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C4
- stack 0: 0x1
870	 DF	PUSH2	0040	 	 
- stack 2: 0x4C4
- stack 1: 0x1
- stack 0: 0x40
871	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4C4
- stack 1: 0x1
- stack 0: 0x1
872	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C4
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
873	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C4
- stack 1: 0x1
- stack 0: 0x1
874	 E9	SUB		 	 
- stack 1: 0x4C4
- stack 0: 0x0
875	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0xF2
876	 ED	JUMPI		 	 
- stack 0: 0x4C4
877	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x4C4
- stack 0: 0x10C
878	 F1	JUMP		 	 
- stack 0: 0x4C4
879	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x4C4
880	 10D	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
881	 10F	ADD		 	 
- stack 0: 0x4C8
882	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
883	 111	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x86000800A0FFFF00BAFFFF00D4000801160008011601F800D4FFFC00860009
884	 112	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x86000800A0FFFF00BAFFFF00D4000801160008011601F800D4FFFC00860009
- stack 0: 0xF0
885	 114	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x86
886	 115	JUMP		 	 
- stack 0: 0x4C8
887	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C8
888	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
889	 88	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x86000800A0FFFF00BAFFFF00D4000801160008011601F800D4FFFC00860009
890	 89	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0x86000800A0FFFF00BAFFFF00D4000801160008011601F800D4FFFC00860009
- stack 0: 0xE0
891	 8B	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x860008
892	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0x860008
- stack 0: 0xFFFF
893	 8F	AND		 	 
- stack 1: 0x4C8
- stack 0: 0x8
894	 90	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0x8
- stack 0: 0x1
895	 92	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0x8
896	 93	PUSH2	0380	 	 
- stack 2: 0x4C8
- stack 1: 0x8
- stack 0: 0x380
897	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C8
898	 97	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
899	 99	ADD		 	 
- stack 0: 0x4CC
900	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
901	 9B	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xA0FFFF00BAFFFF00D4000801160008011601F800D4FFFC0086000901560000
902	 9C	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0xA0FFFF00BAFFFF00D4000801160008011601F800D4FFFC0086000901560000
- stack 0: 0xF0
903	 9E	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xA0
904	 9F	JUMP		 	 
- stack 0: 0x4CC
905	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4CC
906	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
907	 A2	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xA0FFFF00BAFFFF00D4000801160008011601F800D4FFFC0086000901560000
908	 A3	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0xA0FFFF00BAFFFF00D4000801160008011601F800D4FFFC0086000901560000
- stack 0: 0xE0
909	 A5	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xA0FFFF
910	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
911	 A9	AND		 	 
- stack 1: 0x4CC
- stack 0: 0xFFFF
912	 AA	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0xFFFF
- stack 0: 0x1
913	 AC	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
914	 AD	PUSH2	0020	 	 
- stack 2: 0x4CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
915	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4CC
916	 B1	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
917	 B3	ADD		 	 
- stack 0: 0x4D0
918	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
919	 B5	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0xBAFFFF00D4000801160008011601F800D4FFFC008600090156000000A00000
920	 B6	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0xBAFFFF00D4000801160008011601F800D4FFFC008600090156000000A00000
- stack 0: 0xF0
921	 B8	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0xBA
922	 B9	JUMP		 	 
- stack 0: 0x4D0
923	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x4D0
924	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
925	 BC	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0xBAFFFF00D4000801160008011601F800D4FFFC008600090156000000A00000
926	 BD	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0xBAFFFF00D4000801160008011601F800D4FFFC008600090156000000A00000
- stack 0: 0xE0
927	 BF	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0xBAFFFF
928	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0xBAFFFF
- stack 0: 0xFFFF
929	 C3	AND		 	 
- stack 1: 0x4D0
- stack 0: 0xFFFF
930	 C4	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFF
- stack 0: 0x1
931	 C6	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
932	 C7	PUSH2	0040	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
933	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4D0
934	 CB	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
935	 CD	ADD		 	 
- stack 0: 0x4D4
936	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
937	 CF	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xD4000801160008011601F800D4FFFC008600090156000000A0000000BA0000
938	 D0	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0xD4000801160008011601F800D4FFFC008600090156000000A0000000BA0000
- stack 0: 0xF0
939	 D2	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xD4
940	 D3	JUMP		 	 
- stack 0: 0x4D4
941	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x4D4
942	 D5	PUSH2	0020	 	 
- stack 1: 0x4D4
- stack 0: 0x20
943	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
944	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
945	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D4
- stack 0: 0xFFFFFFFF
946	 DF	PUSH2	0040	 	 
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
947	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
948	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D4
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
949	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
950	 E9	SUB		 	 
- stack 1: 0x4D4
- stack 0: 0x0
951	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0xF2
952	 ED	JUMPI		 	 
- stack 0: 0x4D4
953	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x4D4
- stack 0: 0x10C
954	 F1	JUMP		 	 
- stack 0: 0x4D4
955	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x4D4
956	 10D	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
957	 10F	ADD		 	 
- stack 0: 0x4D8
958	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
959	 111	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x1160008011601F800D4FFFC008600090156000000A0000000BA000000D401E0
960	 112	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x1160008011601F800D4FFFC008600090156000000A0000000BA000000D401E0
- stack 0: 0xF0
961	 114	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x116
962	 115	JUMP		 	 
- stack 0: 0x4D8
963	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b4(ignore imm)
- stack 0: 0x4D8
964	 117	PUSH1	00	 	 
- stack 1: 0x4D8
- stack 0: 0x0
965	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
966	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D8
- stack 0: 0x0
967	 11F	PUSH2	0380	 	 
- stack 2: 0x4D8
- stack 1: 0x0
- stack 0: 0x380
968	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x4D8
- stack 1: 0x0
- stack 0: 0x8
969	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D8
- stack 2: 0x0
- stack 1: 0x8
- stack 0: 0xFFFFFFFF
970	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D8
- stack 1: 0x0
- stack 0: 0x8
971	 129	SUB		 	 
- stack 1: 0x4D8
- stack 0: 0x8
972	 12A	PUSH2	0132	 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 2: 0x4D8
- stack 1: 0x8
- stack 0: 0x132
973	 12D	JUMPI		 	 
- stack 0: 0x4D8
974	 132	JUMPDEST		 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 0: 0x4D8
975	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
976	 134	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x1160008011601F800D4FFFC008600090156000000A0000000BA000000D401E0
977	 135	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0x1160008011601F800D4FFFC008600090156000000A0000000BA000000D401E0
- stack 0: 0xE0
978	 137	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x1160008
979	 138	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x1160008
- stack 0: 0xFFFF
980	 13B	AND		 	 
- stack 1: 0x4D8
- stack 0: 0x8
981	 13C	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0x8
- stack 0: 0x1
982	 13E	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0x8
983	 13F	ADD		 	 
- stack 0: 0x4E0
984	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4E0
- stack 0: 0xFFFFFFFF
985	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4E0
986	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
987	 147	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xD4FFFC008600090156000000A0000000BA000000D401E001700001018F0002
988	 148	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0xD4FFFC008600090156000000A0000000BA000000D401E001700001018F0002
- stack 0: 0xF0
989	 14A	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xD4
990	 14B	JUMP		 	 
- stack 0: 0x4E0
991	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x4E0
992	 D5	PUSH2	0020	 	 
- stack 1: 0x4E0
- stack 0: 0x20
993	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
994	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
995	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E0
- stack 0: 0xFFFFFFFF
996	 DF	PUSH2	0040	 	 
- stack 2: 0x4E0
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
997	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4E0
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
998	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E0
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
999	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E0
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
1000	 E9	SUB		 	 
- stack 1: 0x4E0
- stack 0: 0x0
1001	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0xF2
1002	 ED	JUMPI		 	 
- stack 0: 0x4E0
1003	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x4E0
- stack 0: 0x10C
1004	 F1	JUMP		 	 
- stack 0: 0x4E0
1005	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x4E0
1006	 10D	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1007	 10F	ADD		 	 
- stack 0: 0x4E4
1008	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1009	 111	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x8600090156000000A0000000BA000000D401E001700001018F000201A9FFEC
1010	 112	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x8600090156000000A0000000BA000000D401E001700001018F000201A9FFEC
- stack 0: 0xF0
1011	 114	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x86
1012	 115	JUMP		 	 
- stack 0: 0x4E4
1013	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E4
1014	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1015	 88	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x8600090156000000A0000000BA000000D401E001700001018F000201A9FFEC
1016	 89	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0x8600090156000000A0000000BA000000D401E001700001018F000201A9FFEC
- stack 0: 0xE0
1017	 8B	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x860009
1018	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x860009
- stack 0: 0xFFFF
1019	 8F	AND		 	 
- stack 1: 0x4E4
- stack 0: 0x9
1020	 90	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0x9
- stack 0: 0x1
1021	 92	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0x9
1022	 93	PUSH2	0380	 	 
- stack 2: 0x4E4
- stack 1: 0x9
- stack 0: 0x380
1023	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E4
1024	 97	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1025	 99	ADD		 	 
- stack 0: 0x4E8
1026	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1027	 9B	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x156000000A0000000BA000000D401E001700001018F000201A9FFEC0086000A
1028	 9C	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x156000000A0000000BA000000D401E001700001018F000201A9FFEC0086000A
- stack 0: 0xF0
1029	 9E	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x156
1030	 9F	JUMP		 	 
- stack 0: 0x4E8
1031	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x4E8
1032	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1033	 158	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x156000000A0000000BA000000D401E001700001018F000201A9FFEC0086000A
1034	 159	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0x156000000A0000000BA000000D401E001700001018F000201A9FFEC0086000A
- stack 0: 0xE0
1035	 15B	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x1560000
1036	 15C	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x1560000
- stack 0: 0xFFFF
1037	 15F	AND		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1038	 160	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x1
1039	 162	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1040	 163	PUSH2	0080	 	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x80
1041	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x4E8
1042	 167	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1043	 169	ADD		 	 
- stack 0: 0x4EC
1044	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1045	 16B	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xA0000000BA000000D401E001700001018F000201A9FFEC0086000A01560000
1046	 16C	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0xA0000000BA000000D401E001700001018F000201A9FFEC0086000A01560000
- stack 0: 0xF0
1047	 16E	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xA0
1048	 16F	JUMP		 	 
- stack 0: 0x4EC
1049	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4EC
1050	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1051	 A2	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xA0000000BA000000D401E001700001018F000201A9FFEC0086000A01560000
1052	 A3	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0xA0000000BA000000D401E001700001018F000201A9FFEC0086000A01560000
- stack 0: 0xE0
1053	 A5	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xA00000
1054	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0xA00000
- stack 0: 0xFFFF
1055	 A9	AND		 	 
- stack 1: 0x4EC
- stack 0: 0x0
1056	 AA	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0x0
- stack 0: 0x1
1057	 AC	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0x0
1058	 AD	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0x0
- stack 0: 0x20
1059	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4EC
1060	 B1	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1061	 B3	ADD		 	 
- stack 0: 0x4F0
1062	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1063	 B5	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xBA000000D401E001700001018F000201A9FFEC0086000A0156000000A00000
1064	 B6	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xBA000000D401E001700001018F000201A9FFEC0086000A0156000000A00000
- stack 0: 0xF0
1065	 B8	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xBA
1066	 B9	JUMP		 	 
- stack 0: 0x4F0
1067	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x4F0
1068	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F0
- stack 0: 0x4F0
1069	 BC	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xBA000000D401E001700001018F000201A9FFEC0086000A0156000000A00000
1070	 BD	PUSH1	E0	 	 
- stack 2: 0x4F0
- stack 1: 0xBA000000D401E001700001018F000201A9FFEC0086000A0156000000A00000
- stack 0: 0xE0
1071	 BF	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xBA0000
1072	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4F0
- stack 1: 0xBA0000
- stack 0: 0xFFFF
1073	 C3	AND		 	 
- stack 1: 0x4F0
- stack 0: 0x0
1074	 C4	PUSH1	01	 	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0x1
1075	 C6	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0x0
1076	 C7	PUSH2	0040	 	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0x40
1077	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4F0
1078	 CB	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1079	 CD	ADD		 	 
- stack 0: 0x4F4
1080	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1081	 CF	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xD401E001700001018F000201A9FFEC0086000A0156000000A0000000BA0000
1082	 D0	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0xD401E001700001018F000201A9FFEC0086000A0156000000A0000000BA0000
- stack 0: 0xF0
1083	 D2	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xD4
1084	 D3	JUMP		 	 
- stack 0: 0x4F4
1085	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x4F4
1086	 D5	PUSH2	0020	 	 
- stack 1: 0x4F4
- stack 0: 0x20
1087	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4F4
- stack 0: 0x0
1088	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1089	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F4
- stack 0: 0x0
1090	 DF	PUSH2	0040	 	 
- stack 2: 0x4F4
- stack 1: 0x0
- stack 0: 0x40
1091	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4F4
- stack 1: 0x0
- stack 0: 0x0
1092	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4F4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1093	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4F4
- stack 1: 0x0
- stack 0: 0x0
1094	 E9	SUB		 	 
- stack 1: 0x4F4
- stack 0: 0x0
1095	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x4F4
- stack 1: 0x0
- stack 0: 0xF2
1096	 ED	JUMPI		 	 
- stack 0: 0x4F4
1097	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x4F4
- stack 0: 0x10C
1098	 F1	JUMP		 	 
- stack 0: 0x4F4
1099	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x4F4
1100	 10D	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1101	 10F	ADD		 	 
- stack 0: 0x4F8
1102	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1103	 111	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BA000001EB0000
1104	 112	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BA000001EB0000
- stack 0: 0xF0
1105	 114	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x170
1106	 115	JUMP		 	 
- stack 0: 0x4F8
1107	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4F8
1108	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1109	 172	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BA000001EB0000
1110	 173	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BA000001EB0000
- stack 0: 0xE0
1111	 175	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x1700001
1112	 176	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x1700001
- stack 0: 0xFFFF
1113	 179	AND		 	 
- stack 1: 0x4F8
- stack 0: 0x1
1114	 17A	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x1
- stack 0: 0x1
1115	 17C	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x1
1116	 17D	PUSH2	0080	 	 
- stack 2: 0x4F8
- stack 1: 0x1
- stack 0: 0x80
1117	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x4F8
- stack 1: 0x1
- stack 0: 0x0
1118	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x4F8
- stack 0: 0x1
1119	 182	PUSH2	0080	 	 
- stack 2: 0x4F8
- stack 1: 0x1
- stack 0: 0x80
1120	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x4F8
1121	 186	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1122	 188	ADD		 	 
- stack 0: 0x4FC
1123	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1124	 18A	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x18F000201A9FFEC0086000A0156000000A0000000BA000001EB000000D401BC
1125	 18B	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x18F000201A9FFEC0086000A0156000000A0000000BA000001EB000000D401BC
- stack 0: 0xF0
1126	 18D	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x18F
1127	 18E	JUMP		 	 
- stack 0: 0x4FC
1128	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4FC
1129	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1130	 191	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x18F000201A9FFEC0086000A0156000000A0000000BA000001EB000000D401BC
1131	 192	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x18F000201A9FFEC0086000A0156000000A0000000BA000001EB000000D401BC
- stack 0: 0xE0
1132	 194	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x18F0002
1133	 195	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x18F0002
- stack 0: 0xFFFF
1134	 198	AND		 	 
- stack 1: 0x4FC
- stack 0: 0x2
1135	 199	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0x2
- stack 0: 0x1
1136	 19B	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0x2
1137	 19C	PUSH2	00A0	 	 
- stack 2: 0x4FC
- stack 1: 0x2
- stack 0: 0xA0
1138	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x4FC
1139	 1A0	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1140	 1A2	ADD		 	 
- stack 0: 0x500
1141	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1142	 1A4	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x1A9FFEC0086000A0156000000A0000000BA000001EB000000D401BC01700001
1143	 1A5	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x1A9FFEC0086000A0156000000A0000000BA000001EB000000D401BC01700001
- stack 0: 0xF0
1144	 1A7	SHR		 	 
- stack 1: 0x500
- stack 0: 0x1A9
1145	 1A8	JUMP		 	 
- stack 0: 0x500
1146	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x500
1147	 1AA	PUSH2	0080	 	 
- stack 1: 0x500
- stack 0: 0x80
1148	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x500
- stack 0: 0x1
1149	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x500
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1150	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x500
- stack 0: 0x1
1151	 1B4	PUSH2	00A0	 	 
- stack 2: 0x500
- stack 1: 0x1
- stack 0: 0xA0
1152	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x500
- stack 1: 0x1
- stack 0: 0x2
1153	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x500
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1154	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x500
- stack 1: 0x1
- stack 0: 0x2
1155	 1BE	SUB		 	 
- stack 1: 0x500
- stack 0: 0x1
1156	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x500
- stack 1: 0x1
- stack 0: 0x1C7
1157	 1C2	JUMPI		 	 
- stack 0: 0x500
1158	 1C7	JUMPDEST		 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x500
1159	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1160	 1C9	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x1A9FFEC0086000A0156000000A0000000BA000001EB000000D401BC01700001
1161	 1CA	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x1A9FFEC0086000A0156000000A0000000BA000001EB000000D401BC01700001
- stack 0: 0xE0
1162	 1CC	SHR		 	 
- stack 1: 0x500
- stack 0: 0x1A9FFEC
1163	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x1A9FFEC
- stack 0: 0xFFFF
1164	 1D0	AND		 	 
- stack 1: 0x500
- stack 0: 0xFFEC
1165	 1D1	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0xFFEC
- stack 0: 0x1
1166	 1D3	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
1167	 1D4	ADD		 	 
- stack 0: 0x4EC
1168	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFF
1169	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4EC
1170	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1171	 1DC	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xA0000000BA000000D401E001700001018F000201A9FFEC0086000A01560000
1172	 1DD	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0xA0000000BA000000D401E001700001018F000201A9FFEC0086000A01560000
- stack 0: 0xF0
1173	 1DF	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xA0
1174	 1E0	JUMP		 	 
- stack 0: 0x4EC
1175	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4EC
1176	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1177	 A2	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xA0000000BA000000D401E001700001018F000201A9FFEC0086000A01560000
1178	 A3	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0xA0000000BA000000D401E001700001018F000201A9FFEC0086000A01560000
- stack 0: 0xE0
1179	 A5	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xA00000
1180	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0xA00000
- stack 0: 0xFFFF
1181	 A9	AND		 	 
- stack 1: 0x4EC
- stack 0: 0x0
1182	 AA	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0x0
- stack 0: 0x1
1183	 AC	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0x0
1184	 AD	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0x0
- stack 0: 0x20
1185	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4EC
1186	 B1	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1187	 B3	ADD		 	 
- stack 0: 0x4F0
1188	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1189	 B5	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xBA000000D401E001700001018F000201A9FFEC0086000A0156000000A00000
1190	 B6	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xBA000000D401E001700001018F000201A9FFEC0086000A0156000000A00000
- stack 0: 0xF0
1191	 B8	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xBA
1192	 B9	JUMP		 	 
- stack 0: 0x4F0
1193	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x4F0
1194	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F0
- stack 0: 0x4F0
1195	 BC	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xBA000000D401E001700001018F000201A9FFEC0086000A0156000000A00000
1196	 BD	PUSH1	E0	 	 
- stack 2: 0x4F0
- stack 1: 0xBA000000D401E001700001018F000201A9FFEC0086000A0156000000A00000
- stack 0: 0xE0
1197	 BF	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xBA0000
1198	 C0	PUSH2	FFFF	 	 
- stack 2: 0x4F0
- stack 1: 0xBA0000
- stack 0: 0xFFFF
1199	 C3	AND		 	 
- stack 1: 0x4F0
- stack 0: 0x0
1200	 C4	PUSH1	01	 	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0x1
1201	 C6	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0x0
1202	 C7	PUSH2	0040	 	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0x40
1203	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x4F0
1204	 CB	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1205	 CD	ADD		 	 
- stack 0: 0x4F4
1206	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1207	 CF	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xD401E001700001018F000201A9FFEC0086000A0156000000A0000000BA0000
1208	 D0	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0xD401E001700001018F000201A9FFEC0086000A0156000000A0000000BA0000
- stack 0: 0xF0
1209	 D2	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xD4
1210	 D3	JUMP		 	 
- stack 0: 0x4F4
1211	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x4F4
1212	 D5	PUSH2	0020	 	 
- stack 1: 0x4F4
- stack 0: 0x20
1213	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4F4
- stack 0: 0x0
1214	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1215	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F4
- stack 0: 0x0
1216	 DF	PUSH2	0040	 	 
- stack 2: 0x4F4
- stack 1: 0x0
- stack 0: 0x40
1217	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x4F4
- stack 1: 0x0
- stack 0: 0x0
1218	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4F4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1219	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4F4
- stack 1: 0x0
- stack 0: 0x0
1220	 E9	SUB		 	 
- stack 1: 0x4F4
- stack 0: 0x0
1221	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x4F4
- stack 1: 0x0
- stack 0: 0xF2
1222	 ED	JUMPI		 	 
- stack 0: 0x4F4
1223	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x4F4
- stack 0: 0x10C
1224	 F1	JUMP		 	 
- stack 0: 0x4F4
1225	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x4F4
1226	 10D	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1227	 10F	ADD		 	 
- stack 0: 0x4F8
1228	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1229	 111	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BA000001EB0000
1230	 112	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BA000001EB0000
- stack 0: 0xF0
1231	 114	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x170
1232	 115	JUMP		 	 
- stack 0: 0x4F8
1233	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4F8
1234	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1235	 172	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BA000001EB0000
1236	 173	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x1700001018F000201A9FFEC0086000A0156000000A0000000BA000001EB0000
- stack 0: 0xE0
1237	 175	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x1700001
1238	 176	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x1700001
- stack 0: 0xFFFF
1239	 179	AND		 	 
- stack 1: 0x4F8
- stack 0: 0x1
1240	 17A	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x1
- stack 0: 0x1
1241	 17C	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x1
1242	 17D	PUSH2	0080	 	 
- stack 2: 0x4F8
- stack 1: 0x1
- stack 0: 0x80
1243	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x4F8
- stack 1: 0x1
- stack 0: 0x1
1244	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x4F8
- stack 0: 0x2
1245	 182	PUSH2	0080	 	 
- stack 2: 0x4F8
- stack 1: 0x2
- stack 0: 0x80
1246	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x4F8
1247	 186	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1248	 188	ADD		 	 
- stack 0: 0x4FC
1249	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1250	 18A	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x18F000201A9FFEC0086000A0156000000A0000000BA000001EB000000D401BC
1251	 18B	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x18F000201A9FFEC0086000A0156000000A0000000BA000001EB000000D401BC
- stack 0: 0xF0
1252	 18D	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x18F
1253	 18E	JUMP		 	 
- stack 0: 0x4FC
1254	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4FC
1255	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1256	 191	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x18F000201A9FFEC0086000A0156000000A0000000BA000001EB000000D401BC
1257	 192	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x18F000201A9FFEC0086000A0156000000A0000000BA000001EB000000D401BC
- stack 0: 0xE0
1258	 194	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x18F0002
1259	 195	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x18F0002
- stack 0: 0xFFFF
1260	 198	AND		 	 
- stack 1: 0x4FC
- stack 0: 0x2
1261	 199	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0x2
- stack 0: 0x1
1262	 19B	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0x2
1263	 19C	PUSH2	00A0	 	 
- stack 2: 0x4FC
- stack 1: 0x2
- stack 0: 0xA0
1264	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x4FC
1265	 1A0	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1266	 1A2	ADD		 	 
- stack 0: 0x500
1267	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1268	 1A4	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x1A9FFEC0086000A0156000000A0000000BA000001EB000000D401BC01700001
1269	 1A5	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x1A9FFEC0086000A0156000000A0000000BA000001EB000000D401BC01700001
- stack 0: 0xF0
1270	 1A7	SHR		 	 
- stack 1: 0x500
- stack 0: 0x1A9
1271	 1A8	JUMP		 	 
- stack 0: 0x500
1272	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x500
1273	 1AA	PUSH2	0080	 	 
- stack 1: 0x500
- stack 0: 0x80
1274	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x500
- stack 0: 0x2
1275	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x500
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1276	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x500
- stack 0: 0x2
1277	 1B4	PUSH2	00A0	 	 
- stack 2: 0x500
- stack 1: 0x2
- stack 0: 0xA0
1278	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x500
- stack 1: 0x2
- stack 0: 0x2
1279	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x500
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1280	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x500
- stack 1: 0x2
- stack 0: 0x2
1281	 1BE	SUB		 	 
- stack 1: 0x500
- stack 0: 0x0
1282	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x1C7
1283	 1C2	JUMPI		 	 
- stack 0: 0x500
1284	 1C3	PUSH2	01E1	 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 1: 0x500
- stack 0: 0x1E1
1285	 1C6	JUMP		 	 
- stack 0: 0x500
1286	 1E1	JUMPDEST		 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x500
1287	 1E2	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1288	 1E4	ADD		 	 
- stack 0: 0x504
1289	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1290	 1E6	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x86000A0156000000A0000000BA000001EB000000D401BC01700001018F0002
1291	 1E7	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x86000A0156000000A0000000BA000001EB000000D401BC01700001018F0002
- stack 0: 0xF0
1292	 1E9	SHR		 	 
- stack 1: 0x504
- stack 0: 0x86
1293	 1EA	JUMP		 	 
- stack 0: 0x504
1294	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x504
1295	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1296	 88	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x86000A0156000000A0000000BA000001EB000000D401BC01700001018F0002
1297	 89	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x86000A0156000000A0000000BA000001EB000000D401BC01700001018F0002
- stack 0: 0xE0
1298	 8B	SHR		 	 
- stack 1: 0x504
- stack 0: 0x86000A
1299	 8C	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x86000A
- stack 0: 0xFFFF
1300	 8F	AND		 	 
- stack 1: 0x504
- stack 0: 0xA
1301	 90	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0xA
- stack 0: 0x1
1302	 92	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0xA
1303	 93	PUSH2	0380	 	 
- stack 2: 0x504
- stack 1: 0xA
- stack 0: 0x380
1304	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x504
1305	 97	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1306	 99	ADD		 	 
- stack 0: 0x508
1307	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1308	 9B	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x156000000A0000000BA000001EB000000D401BC01700001018F000201A9FFE8
1309	 9C	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x156000000A0000000BA000001EB000000D401BC01700001018F000201A9FFE8
- stack 0: 0xF0
1310	 9E	SHR		 	 
- stack 1: 0x508
- stack 0: 0x156
1311	 9F	JUMP		 	 
- stack 0: 0x508
1312	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x508
1313	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1314	 158	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x156000000A0000000BA000001EB000000D401BC01700001018F000201A9FFE8
1315	 159	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x156000000A0000000BA000001EB000000D401BC01700001018F000201A9FFE8
- stack 0: 0xE0
1316	 15B	SHR		 	 
- stack 1: 0x508
- stack 0: 0x1560000
1317	 15C	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x1560000
- stack 0: 0xFFFF
1318	 15F	AND		 	 
- stack 1: 0x508
- stack 0: 0x0
1319	 160	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x1
1320	 162	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0x0
1321	 163	PUSH2	0080	 	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x80
1322	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x508
1323	 167	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1324	 169	ADD		 	 
- stack 0: 0x50C
1325	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1326	 16B	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xA0000000BA000001EB000000D401BC01700001018F000201A9FFE80086000B
1327	 16C	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xA0000000BA000001EB000000D401BC01700001018F000201A9FFE80086000B
- stack 0: 0xF0
1328	 16E	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xA0
1329	 16F	JUMP		 	 
- stack 0: 0x50C
1330	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x50C
1331	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1332	 A2	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xA0000000BA000001EB000000D401BC01700001018F000201A9FFE80086000B
1333	 A3	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0xA0000000BA000001EB000000D401BC01700001018F000201A9FFE80086000B
- stack 0: 0xE0
1334	 A5	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xA00000
1335	 A6	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0xA00000
- stack 0: 0xFFFF
1336	 A9	AND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1337	 AA	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x1
1338	 AC	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1339	 AD	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x20
1340	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x50C
1341	 B1	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1342	 B3	ADD		 	 
- stack 0: 0x510
1343	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1344	 B5	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xBA000001EB000000D401BC01700001018F000201A9FFE80086000B01560000
1345	 B6	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xBA000001EB000000D401BC01700001018F000201A9FFE80086000B01560000
- stack 0: 0xF0
1346	 B8	SHR		 	 
- stack 1: 0x510
- stack 0: 0xBA
1347	 B9	JUMP		 	 
- stack 0: 0x510
1348	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x510
1349	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1350	 BC	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xBA000001EB000000D401BC01700001018F000201A9FFE80086000B01560000
1351	 BD	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0xBA000001EB000000D401BC01700001018F000201A9FFE80086000B01560000
- stack 0: 0xE0
1352	 BF	SHR		 	 
- stack 1: 0x510
- stack 0: 0xBA0000
1353	 C0	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0xBA0000
- stack 0: 0xFFFF
1354	 C3	AND		 	 
- stack 1: 0x510
- stack 0: 0x0
1355	 C4	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x0
- stack 0: 0x1
1356	 C6	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0x0
1357	 C7	PUSH2	0040	 	 
- stack 2: 0x510
- stack 1: 0x0
- stack 0: 0x40
1358	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x510
1359	 CB	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1360	 CD	ADD		 	 
- stack 0: 0x514
1361	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1362	 CF	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
1363	 D0	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
- stack 0: 0xF0
1364	 D2	SHR		 	 
- stack 1: 0x514
- stack 0: 0x1EB
1365	 D3	JUMP		 	 
- stack 0: 0x514
1366	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x514
1367	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1368	 1ED	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
1369	 1EE	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
- stack 0: 0xE0
1370	 1F0	SHR		 	 
- stack 1: 0x514
- stack 0: 0x1EB0000
1371	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
1372	 1F4	AND		 	 
- stack 1: 0x514
- stack 0: 0x0
1373	 1F5	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0x1
1374	 1F7	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x0
1375	 1F8	POP		 	 
- stack 0: 0x514
1376	 1F9	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1377	 1FB	ADD		 	 
- stack 0: 0x518
1378	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1379	 1FD	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xD401BC01700001018F000201A9FFE80086000B0156000000A0000000BA0000
1380	 1FE	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0xD401BC01700001018F000201A9FFE80086000B0156000000A0000000BA0000
- stack 0: 0xF0
1381	 200	SHR		 	 
- stack 1: 0x518
- stack 0: 0xD4
1382	 201	JUMP		 	 
- stack 0: 0x518
1383	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x518
1384	 D5	PUSH2	0020	 	 
- stack 1: 0x518
- stack 0: 0x20
1385	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x518
- stack 0: 0x0
1386	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1387	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x0
1388	 DF	PUSH2	0040	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x40
1389	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x0
1390	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x518
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1391	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x0
1392	 E9	SUB		 	 
- stack 1: 0x518
- stack 0: 0x0
1393	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xF2
1394	 ED	JUMPI		 	 
- stack 0: 0x518
1395	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x518
- stack 0: 0x10C
1396	 F1	JUMP		 	 
- stack 0: 0x518
1397	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x518
1398	 10D	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1399	 10F	ADD		 	 
- stack 0: 0x51C
1400	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1401	 111	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x1700001018F000201A9FFE80086000B0156000000A0000000BA000001EB0000
1402	 112	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x1700001018F000201A9FFE80086000B0156000000A0000000BA000001EB0000
- stack 0: 0xF0
1403	 114	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x170
1404	 115	JUMP		 	 
- stack 0: 0x51C
1405	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x51C
1406	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1407	 172	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x1700001018F000201A9FFE80086000B0156000000A0000000BA000001EB0000
1408	 173	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x1700001018F000201A9FFE80086000B0156000000A0000000BA000001EB0000
- stack 0: 0xE0
1409	 175	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x1700001
1410	 176	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x1700001
- stack 0: 0xFFFF
1411	 179	AND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1412	 17A	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x1
1413	 17C	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1414	 17D	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x80
1415	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x0
1416	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x51C
- stack 0: 0x1
1417	 182	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x80
1418	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x51C
1419	 186	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1420	 188	ADD		 	 
- stack 0: 0x520
1421	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1422	 18A	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x18F000201A9FFE80086000B0156000000A0000000BA000001EB000001EB0000
1423	 18B	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x18F000201A9FFE80086000B0156000000A0000000BA000001EB000001EB0000
- stack 0: 0xF0
1424	 18D	SHR		 	 
- stack 1: 0x520
- stack 0: 0x18F
1425	 18E	JUMP		 	 
- stack 0: 0x520
1426	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x520
1427	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1428	 191	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x18F000201A9FFE80086000B0156000000A0000000BA000001EB000001EB0000
1429	 192	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x18F000201A9FFE80086000B0156000000A0000000BA000001EB000001EB0000
- stack 0: 0xE0
1430	 194	SHR		 	 
- stack 1: 0x520
- stack 0: 0x18F0002
1431	 195	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x18F0002
- stack 0: 0xFFFF
1432	 198	AND		 	 
- stack 1: 0x520
- stack 0: 0x2
1433	 199	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0x1
1434	 19B	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x2
1435	 19C	PUSH2	00A0	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0xA0
1436	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x520
1437	 1A0	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1438	 1A2	ADD		 	 
- stack 0: 0x524
1439	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1440	 1A4	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x1A9FFE80086000B0156000000A0000000BA000001EB000001EB000000D40194
1441	 1A5	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x1A9FFE80086000B0156000000A0000000BA000001EB000001EB000000D40194
- stack 0: 0xF0
1442	 1A7	SHR		 	 
- stack 1: 0x524
- stack 0: 0x1A9
1443	 1A8	JUMP		 	 
- stack 0: 0x524
1444	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x524
1445	 1AA	PUSH2	0080	 	 
- stack 1: 0x524
- stack 0: 0x80
1446	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x524
- stack 0: 0x1
1447	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1448	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x524
- stack 0: 0x1
1449	 1B4	PUSH2	00A0	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0xA0
1450	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x2
1451	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x524
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1452	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x2
1453	 1BE	SUB		 	 
- stack 1: 0x524
- stack 0: 0x1
1454	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x1C7
1455	 1C2	JUMPI		 	 
- stack 0: 0x524
1456	 1C7	JUMPDEST		 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x524
1457	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1458	 1C9	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x1A9FFE80086000B0156000000A0000000BA000001EB000001EB000000D40194
1459	 1CA	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x1A9FFE80086000B0156000000A0000000BA000001EB000001EB000000D40194
- stack 0: 0xE0
1460	 1CC	SHR		 	 
- stack 1: 0x524
- stack 0: 0x1A9FFE8
1461	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x1A9FFE8
- stack 0: 0xFFFF
1462	 1D0	AND		 	 
- stack 1: 0x524
- stack 0: 0xFFE8
1463	 1D1	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0xFFE8
- stack 0: 0x1
1464	 1D3	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
1465	 1D4	ADD		 	 
- stack 0: 0x50C
1466	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x50C
- stack 0: 0xFFFFFFFF
1467	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x50C
1468	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1469	 1DC	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xA0000000BA000001EB000000D401BC01700001018F000201A9FFE80086000B
1470	 1DD	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xA0000000BA000001EB000000D401BC01700001018F000201A9FFE80086000B
- stack 0: 0xF0
1471	 1DF	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xA0
1472	 1E0	JUMP		 	 
- stack 0: 0x50C
1473	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x50C
1474	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1475	 A2	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xA0000000BA000001EB000000D401BC01700001018F000201A9FFE80086000B
1476	 A3	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0xA0000000BA000001EB000000D401BC01700001018F000201A9FFE80086000B
- stack 0: 0xE0
1477	 A5	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xA00000
1478	 A6	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0xA00000
- stack 0: 0xFFFF
1479	 A9	AND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1480	 AA	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x1
1481	 AC	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1482	 AD	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x20
1483	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x50C
1484	 B1	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1485	 B3	ADD		 	 
- stack 0: 0x510
1486	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1487	 B5	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xBA000001EB000000D401BC01700001018F000201A9FFE80086000B01560000
1488	 B6	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xBA000001EB000000D401BC01700001018F000201A9FFE80086000B01560000
- stack 0: 0xF0
1489	 B8	SHR		 	 
- stack 1: 0x510
- stack 0: 0xBA
1490	 B9	JUMP		 	 
- stack 0: 0x510
1491	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x510
1492	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1493	 BC	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xBA000001EB000000D401BC01700001018F000201A9FFE80086000B01560000
1494	 BD	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0xBA000001EB000000D401BC01700001018F000201A9FFE80086000B01560000
- stack 0: 0xE0
1495	 BF	SHR		 	 
- stack 1: 0x510
- stack 0: 0xBA0000
1496	 C0	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0xBA0000
- stack 0: 0xFFFF
1497	 C3	AND		 	 
- stack 1: 0x510
- stack 0: 0x0
1498	 C4	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x0
- stack 0: 0x1
1499	 C6	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0x0
1500	 C7	PUSH2	0040	 	 
- stack 2: 0x510
- stack 1: 0x0
- stack 0: 0x40
1501	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x510
1502	 CB	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1503	 CD	ADD		 	 
- stack 0: 0x514
1504	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1505	 CF	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
1506	 D0	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
- stack 0: 0xF0
1507	 D2	SHR		 	 
- stack 1: 0x514
- stack 0: 0x1EB
1508	 D3	JUMP		 	 
- stack 0: 0x514
1509	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x514
1510	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1511	 1ED	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
1512	 1EE	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x1EB000000D401BC01700001018F000201A9FFE80086000B0156000000A00000
- stack 0: 0xE0
1513	 1F0	SHR		 	 
- stack 1: 0x514
- stack 0: 0x1EB0000
1514	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
1515	 1F4	AND		 	 
- stack 1: 0x514
- stack 0: 0x0
1516	 1F5	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0x1
1517	 1F7	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x0
1518	 1F8	POP		 	 
- stack 0: 0x514
1519	 1F9	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1520	 1FB	ADD		 	 
- stack 0: 0x518
1521	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1522	 1FD	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xD401BC01700001018F000201A9FFE80086000B0156000000A0000000BA0000
1523	 1FE	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0xD401BC01700001018F000201A9FFE80086000B0156000000A0000000BA0000
- stack 0: 0xF0
1524	 200	SHR		 	 
- stack 1: 0x518
- stack 0: 0xD4
1525	 201	JUMP		 	 
- stack 0: 0x518
1526	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x518
1527	 D5	PUSH2	0020	 	 
- stack 1: 0x518
- stack 0: 0x20
1528	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x518
- stack 0: 0x0
1529	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1530	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x0
1531	 DF	PUSH2	0040	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x40
1532	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x0
1533	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x518
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1534	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x0
1535	 E9	SUB		 	 
- stack 1: 0x518
- stack 0: 0x0
1536	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xF2
1537	 ED	JUMPI		 	 
- stack 0: 0x518
1538	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x518
- stack 0: 0x10C
1539	 F1	JUMP		 	 
- stack 0: 0x518
1540	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x518
1541	 10D	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1542	 10F	ADD		 	 
- stack 0: 0x51C
1543	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1544	 111	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x1700001018F000201A9FFE80086000B0156000000A0000000BA000001EB0000
1545	 112	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x1700001018F000201A9FFE80086000B0156000000A0000000BA000001EB0000
- stack 0: 0xF0
1546	 114	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x170
1547	 115	JUMP		 	 
- stack 0: 0x51C
1548	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x51C
1549	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1550	 172	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x1700001018F000201A9FFE80086000B0156000000A0000000BA000001EB0000
1551	 173	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x1700001018F000201A9FFE80086000B0156000000A0000000BA000001EB0000
- stack 0: 0xE0
1552	 175	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x1700001
1553	 176	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x1700001
- stack 0: 0xFFFF
1554	 179	AND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1555	 17A	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x1
1556	 17C	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1557	 17D	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x80
1558	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x1
1559	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x51C
- stack 0: 0x2
1560	 182	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0x80
1561	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x51C
1562	 186	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1563	 188	ADD		 	 
- stack 0: 0x520
1564	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1565	 18A	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x18F000201A9FFE80086000B0156000000A0000000BA000001EB000001EB0000
1566	 18B	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x18F000201A9FFE80086000B0156000000A0000000BA000001EB000001EB0000
- stack 0: 0xF0
1567	 18D	SHR		 	 
- stack 1: 0x520
- stack 0: 0x18F
1568	 18E	JUMP		 	 
- stack 0: 0x520
1569	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x520
1570	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1571	 191	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x18F000201A9FFE80086000B0156000000A0000000BA000001EB000001EB0000
1572	 192	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x18F000201A9FFE80086000B0156000000A0000000BA000001EB000001EB0000
- stack 0: 0xE0
1573	 194	SHR		 	 
- stack 1: 0x520
- stack 0: 0x18F0002
1574	 195	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x18F0002
- stack 0: 0xFFFF
1575	 198	AND		 	 
- stack 1: 0x520
- stack 0: 0x2
1576	 199	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0x1
1577	 19B	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x2
1578	 19C	PUSH2	00A0	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0xA0
1579	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x520
1580	 1A0	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1581	 1A2	ADD		 	 
- stack 0: 0x524
1582	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1583	 1A4	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x1A9FFE80086000B0156000000A0000000BA000001EB000001EB000000D40194
1584	 1A5	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x1A9FFE80086000B0156000000A0000000BA000001EB000001EB000000D40194
- stack 0: 0xF0
1585	 1A7	SHR		 	 
- stack 1: 0x524
- stack 0: 0x1A9
1586	 1A8	JUMP		 	 
- stack 0: 0x524
1587	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x524
1588	 1AA	PUSH2	0080	 	 
- stack 1: 0x524
- stack 0: 0x80
1589	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x524
- stack 0: 0x2
1590	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1591	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x524
- stack 0: 0x2
1592	 1B4	PUSH2	00A0	 	 
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0xA0
1593	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0x2
1594	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x524
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1595	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0x2
1596	 1BE	SUB		 	 
- stack 1: 0x524
- stack 0: 0x0
1597	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x1C7
1598	 1C2	JUMPI		 	 
- stack 0: 0x524
1599	 1C3	PUSH2	01E1	 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 1: 0x524
- stack 0: 0x1E1
1600	 1C6	JUMP		 	 
- stack 0: 0x524
1601	 1E1	JUMPDEST		 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x524
1602	 1E2	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1603	 1E4	ADD		 	 
- stack 0: 0x528
1604	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1605	 1E6	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x86000B0156000000A0000000BA000001EB000001EB000000D4019401700001
1606	 1E7	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x86000B0156000000A0000000BA000001EB000001EB000000D4019401700001
- stack 0: 0xF0
1607	 1E9	SHR		 	 
- stack 1: 0x528
- stack 0: 0x86
1608	 1EA	JUMP		 	 
- stack 0: 0x528
1609	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x528
1610	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1611	 88	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x86000B0156000000A0000000BA000001EB000001EB000000D4019401700001
1612	 89	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x86000B0156000000A0000000BA000001EB000001EB000000D4019401700001
- stack 0: 0xE0
1613	 8B	SHR		 	 
- stack 1: 0x528
- stack 0: 0x86000B
1614	 8C	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x86000B
- stack 0: 0xFFFF
1615	 8F	AND		 	 
- stack 1: 0x528
- stack 0: 0xB
1616	 90	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0xB
- stack 0: 0x1
1617	 92	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0xB
1618	 93	PUSH2	0380	 	 
- stack 2: 0x528
- stack 1: 0xB
- stack 0: 0x380
1619	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x528
1620	 97	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1621	 99	ADD		 	 
- stack 0: 0x52C
1622	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1623	 9B	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x156000000A0000000BA000001EB000001EB000000D4019401700001018F0002
1624	 9C	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x156000000A0000000BA000001EB000001EB000000D4019401700001018F0002
- stack 0: 0xF0
1625	 9E	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x156
1626	 9F	JUMP		 	 
- stack 0: 0x52C
1627	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x52C
1628	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1629	 158	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x156000000A0000000BA000001EB000001EB000000D4019401700001018F0002
1630	 159	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0x156000000A0000000BA000001EB000001EB000000D4019401700001018F0002
- stack 0: 0xE0
1631	 15B	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1560000
1632	 15C	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0x1560000
- stack 0: 0xFFFF
1633	 15F	AND		 	 
- stack 1: 0x52C
- stack 0: 0x0
1634	 160	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x1
1635	 162	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x0
1636	 163	PUSH2	0080	 	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x80
1637	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x52C
1638	 167	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1639	 169	ADD		 	 
- stack 0: 0x530
1640	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1641	 16B	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xA0000000BA000001EB000001EB000000D4019401700001018F000201A9FFE4
1642	 16C	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0xA0000000BA000001EB000001EB000000D4019401700001018F000201A9FFE4
- stack 0: 0xF0
1643	 16E	SHR		 	 
- stack 1: 0x530
- stack 0: 0xA0
1644	 16F	JUMP		 	 
- stack 0: 0x530
1645	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x530
1646	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1647	 A2	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xA0000000BA000001EB000001EB000000D4019401700001018F000201A9FFE4
1648	 A3	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0xA0000000BA000001EB000001EB000000D4019401700001018F000201A9FFE4
- stack 0: 0xE0
1649	 A5	SHR		 	 
- stack 1: 0x530
- stack 0: 0xA00000
1650	 A6	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0xA00000
- stack 0: 0xFFFF
1651	 A9	AND		 	 
- stack 1: 0x530
- stack 0: 0x0
1652	 AA	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0x1
1653	 AC	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0x0
1654	 AD	PUSH2	0020	 	 
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0x20
1655	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x530
1656	 B1	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1657	 B3	ADD		 	 
- stack 0: 0x534
1658	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1659	 B5	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xBA000001EB000001EB000000D4019401700001018F000201A9FFE40086000C
1660	 B6	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0xBA000001EB000001EB000000D4019401700001018F000201A9FFE40086000C
- stack 0: 0xF0
1661	 B8	SHR		 	 
- stack 1: 0x534
- stack 0: 0xBA
1662	 B9	JUMP		 	 
- stack 0: 0x534
1663	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x534
1664	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1665	 BC	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xBA000001EB000001EB000000D4019401700001018F000201A9FFE40086000C
1666	 BD	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0xBA000001EB000001EB000000D4019401700001018F000201A9FFE40086000C
- stack 0: 0xE0
1667	 BF	SHR		 	 
- stack 1: 0x534
- stack 0: 0xBA0000
1668	 C0	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0xBA0000
- stack 0: 0xFFFF
1669	 C3	AND		 	 
- stack 1: 0x534
- stack 0: 0x0
1670	 C4	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x1
1671	 C6	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0x0
1672	 C7	PUSH2	0040	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x40
1673	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x534
1674	 CB	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1675	 CD	ADD		 	 
- stack 0: 0x538
1676	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1677	 CF	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
1678	 D0	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
- stack 0: 0xF0
1679	 D2	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1EB
1680	 D3	JUMP		 	 
- stack 0: 0x538
1681	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x538
1682	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1683	 1ED	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
1684	 1EE	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
- stack 0: 0xE0
1685	 1F0	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1EB0000
1686	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
1687	 1F4	AND		 	 
- stack 1: 0x538
- stack 0: 0x0
1688	 1F5	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x1
1689	 1F7	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0x0
1690	 1F8	POP		 	 
- stack 0: 0x538
1691	 1F9	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1692	 1FB	ADD		 	 
- stack 0: 0x53C
1693	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1694	 1FD	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
1695	 1FE	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
- stack 0: 0xF0
1696	 200	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x1EB
1697	 201	JUMP		 	 
- stack 0: 0x53C
1698	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x53C
1699	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1700	 1ED	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
1701	 1EE	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
- stack 0: 0xE0
1702	 1F0	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x1EB0000
1703	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
1704	 1F4	AND		 	 
- stack 1: 0x53C
- stack 0: 0x0
1705	 1F5	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0x1
1706	 1F7	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0x0
1707	 1F8	POP		 	 
- stack 0: 0x53C
1708	 1F9	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1709	 1FB	ADD		 	 
- stack 0: 0x540
1710	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1711	 1FD	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xD4019401700001018F000201A9FFE40086000C0156000000A0000001EB0000
1712	 1FE	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0xD4019401700001018F000201A9FFE40086000C0156000000A0000001EB0000
- stack 0: 0xF0
1713	 200	SHR		 	 
- stack 1: 0x540
- stack 0: 0xD4
1714	 201	JUMP		 	 
- stack 0: 0x540
1715	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x540
1716	 D5	PUSH2	0020	 	 
- stack 1: 0x540
- stack 0: 0x20
1717	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x540
- stack 0: 0x0
1718	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x540
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1719	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x540
- stack 0: 0x0
1720	 DF	PUSH2	0040	 	 
- stack 2: 0x540
- stack 1: 0x0
- stack 0: 0x40
1721	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x540
- stack 1: 0x0
- stack 0: 0x0
1722	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x540
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1723	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x540
- stack 1: 0x0
- stack 0: 0x0
1724	 E9	SUB		 	 
- stack 1: 0x540
- stack 0: 0x0
1725	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x540
- stack 1: 0x0
- stack 0: 0xF2
1726	 ED	JUMPI		 	 
- stack 0: 0x540
1727	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x540
- stack 0: 0x10C
1728	 F1	JUMP		 	 
- stack 0: 0x540
1729	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x540
1730	 10D	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1731	 10F	ADD		 	 
- stack 0: 0x544
1732	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1733	 111	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BA0000
1734	 112	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BA0000
- stack 0: 0xF0
1735	 114	SHR		 	 
- stack 1: 0x544
- stack 0: 0x170
1736	 115	JUMP		 	 
- stack 0: 0x544
1737	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x544
1738	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1739	 172	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BA0000
1740	 173	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BA0000
- stack 0: 0xE0
1741	 175	SHR		 	 
- stack 1: 0x544
- stack 0: 0x1700001
1742	 176	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x1700001
- stack 0: 0xFFFF
1743	 179	AND		 	 
- stack 1: 0x544
- stack 0: 0x1
1744	 17A	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x1
1745	 17C	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x1
1746	 17D	PUSH2	0080	 	 
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x80
1747	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x0
1748	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x544
- stack 0: 0x1
1749	 182	PUSH2	0080	 	 
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x80
1750	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x544
1751	 186	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1752	 188	ADD		 	 
- stack 0: 0x548
1753	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1754	 18A	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BA000000D40170
1755	 18B	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BA000000D40170
- stack 0: 0xF0
1756	 18D	SHR		 	 
- stack 1: 0x548
- stack 0: 0x18F
1757	 18E	JUMP		 	 
- stack 0: 0x548
1758	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x548
1759	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1760	 191	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BA000000D40170
1761	 192	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BA000000D40170
- stack 0: 0xE0
1762	 194	SHR		 	 
- stack 1: 0x548
- stack 0: 0x18F0002
1763	 195	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x18F0002
- stack 0: 0xFFFF
1764	 198	AND		 	 
- stack 1: 0x548
- stack 0: 0x2
1765	 199	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0x1
1766	 19B	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x2
1767	 19C	PUSH2	00A0	 	 
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0xA0
1768	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x548
1769	 1A0	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1770	 1A2	ADD		 	 
- stack 0: 0x54C
1771	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1772	 1A4	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x1A9FFE40086000C0156000000A0000001EB000000BA000000D4017001700001
1773	 1A5	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x1A9FFE40086000C0156000000A0000001EB000000BA000000D4017001700001
- stack 0: 0xF0
1774	 1A7	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1A9
1775	 1A8	JUMP		 	 
- stack 0: 0x54C
1776	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x54C
1777	 1AA	PUSH2	0080	 	 
- stack 1: 0x54C
- stack 0: 0x80
1778	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x54C
- stack 0: 0x1
1779	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x54C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1780	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x54C
- stack 0: 0x1
1781	 1B4	PUSH2	00A0	 	 
- stack 2: 0x54C
- stack 1: 0x1
- stack 0: 0xA0
1782	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x54C
- stack 1: 0x1
- stack 0: 0x2
1783	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x54C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1784	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x54C
- stack 1: 0x1
- stack 0: 0x2
1785	 1BE	SUB		 	 
- stack 1: 0x54C
- stack 0: 0x1
1786	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x54C
- stack 1: 0x1
- stack 0: 0x1C7
1787	 1C2	JUMPI		 	 
- stack 0: 0x54C
1788	 1C7	JUMPDEST		 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x54C
1789	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1790	 1C9	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x1A9FFE40086000C0156000000A0000001EB000000BA000000D4017001700001
1791	 1CA	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x1A9FFE40086000C0156000000A0000001EB000000BA000000D4017001700001
- stack 0: 0xE0
1792	 1CC	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1A9FFE4
1793	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x1A9FFE4
- stack 0: 0xFFFF
1794	 1D0	AND		 	 
- stack 1: 0x54C
- stack 0: 0xFFE4
1795	 1D1	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0xFFE4
- stack 0: 0x1
1796	 1D3	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
1797	 1D4	ADD		 	 
- stack 0: 0x530
1798	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x530
- stack 0: 0xFFFFFFFF
1799	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x530
1800	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1801	 1DC	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xA0000000BA000001EB000001EB000000D4019401700001018F000201A9FFE4
1802	 1DD	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0xA0000000BA000001EB000001EB000000D4019401700001018F000201A9FFE4
- stack 0: 0xF0
1803	 1DF	SHR		 	 
- stack 1: 0x530
- stack 0: 0xA0
1804	 1E0	JUMP		 	 
- stack 0: 0x530
1805	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x530
1806	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1807	 A2	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xA0000000BA000001EB000001EB000000D4019401700001018F000201A9FFE4
1808	 A3	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0xA0000000BA000001EB000001EB000000D4019401700001018F000201A9FFE4
- stack 0: 0xE0
1809	 A5	SHR		 	 
- stack 1: 0x530
- stack 0: 0xA00000
1810	 A6	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0xA00000
- stack 0: 0xFFFF
1811	 A9	AND		 	 
- stack 1: 0x530
- stack 0: 0x0
1812	 AA	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0x1
1813	 AC	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0x0
1814	 AD	PUSH2	0020	 	 
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0x20
1815	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x530
1816	 B1	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1817	 B3	ADD		 	 
- stack 0: 0x534
1818	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1819	 B5	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xBA000001EB000001EB000000D4019401700001018F000201A9FFE40086000C
1820	 B6	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0xBA000001EB000001EB000000D4019401700001018F000201A9FFE40086000C
- stack 0: 0xF0
1821	 B8	SHR		 	 
- stack 1: 0x534
- stack 0: 0xBA
1822	 B9	JUMP		 	 
- stack 0: 0x534
1823	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x534
1824	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1825	 BC	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xBA000001EB000001EB000000D4019401700001018F000201A9FFE40086000C
1826	 BD	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0xBA000001EB000001EB000000D4019401700001018F000201A9FFE40086000C
- stack 0: 0xE0
1827	 BF	SHR		 	 
- stack 1: 0x534
- stack 0: 0xBA0000
1828	 C0	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0xBA0000
- stack 0: 0xFFFF
1829	 C3	AND		 	 
- stack 1: 0x534
- stack 0: 0x0
1830	 C4	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x1
1831	 C6	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0x0
1832	 C7	PUSH2	0040	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x40
1833	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x534
1834	 CB	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1835	 CD	ADD		 	 
- stack 0: 0x538
1836	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1837	 CF	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
1838	 D0	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
- stack 0: 0xF0
1839	 D2	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1EB
1840	 D3	JUMP		 	 
- stack 0: 0x538
1841	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x538
1842	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1843	 1ED	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
1844	 1EE	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x1EB000001EB000000D4019401700001018F000201A9FFE40086000C01560000
- stack 0: 0xE0
1845	 1F0	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1EB0000
1846	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
1847	 1F4	AND		 	 
- stack 1: 0x538
- stack 0: 0x0
1848	 1F5	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x1
1849	 1F7	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0x0
1850	 1F8	POP		 	 
- stack 0: 0x538
1851	 1F9	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1852	 1FB	ADD		 	 
- stack 0: 0x53C
1853	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1854	 1FD	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
1855	 1FE	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
- stack 0: 0xF0
1856	 200	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x1EB
1857	 201	JUMP		 	 
- stack 0: 0x53C
1858	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x53C
1859	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1860	 1ED	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
1861	 1EE	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0x1EB000000D4019401700001018F000201A9FFE40086000C0156000000A00000
- stack 0: 0xE0
1862	 1F0	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x1EB0000
1863	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
1864	 1F4	AND		 	 
- stack 1: 0x53C
- stack 0: 0x0
1865	 1F5	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0x1
1866	 1F7	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0x0
1867	 1F8	POP		 	 
- stack 0: 0x53C
1868	 1F9	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1869	 1FB	ADD		 	 
- stack 0: 0x540
1870	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1871	 1FD	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xD4019401700001018F000201A9FFE40086000C0156000000A0000001EB0000
1872	 1FE	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0xD4019401700001018F000201A9FFE40086000C0156000000A0000001EB0000
- stack 0: 0xF0
1873	 200	SHR		 	 
- stack 1: 0x540
- stack 0: 0xD4
1874	 201	JUMP		 	 
- stack 0: 0x540
1875	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x540
1876	 D5	PUSH2	0020	 	 
- stack 1: 0x540
- stack 0: 0x20
1877	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x540
- stack 0: 0x0
1878	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x540
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1879	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x540
- stack 0: 0x0
1880	 DF	PUSH2	0040	 	 
- stack 2: 0x540
- stack 1: 0x0
- stack 0: 0x40
1881	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x540
- stack 1: 0x0
- stack 0: 0x0
1882	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x540
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1883	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x540
- stack 1: 0x0
- stack 0: 0x0
1884	 E9	SUB		 	 
- stack 1: 0x540
- stack 0: 0x0
1885	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x540
- stack 1: 0x0
- stack 0: 0xF2
1886	 ED	JUMPI		 	 
- stack 0: 0x540
1887	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x540
- stack 0: 0x10C
1888	 F1	JUMP		 	 
- stack 0: 0x540
1889	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x540
1890	 10D	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1891	 10F	ADD		 	 
- stack 0: 0x544
1892	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1893	 111	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BA0000
1894	 112	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BA0000
- stack 0: 0xF0
1895	 114	SHR		 	 
- stack 1: 0x544
- stack 0: 0x170
1896	 115	JUMP		 	 
- stack 0: 0x544
1897	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x544
1898	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1899	 172	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BA0000
1900	 173	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x1700001018F000201A9FFE40086000C0156000000A0000001EB000000BA0000
- stack 0: 0xE0
1901	 175	SHR		 	 
- stack 1: 0x544
- stack 0: 0x1700001
1902	 176	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x1700001
- stack 0: 0xFFFF
1903	 179	AND		 	 
- stack 1: 0x544
- stack 0: 0x1
1904	 17A	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x1
1905	 17C	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x1
1906	 17D	PUSH2	0080	 	 
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x80
1907	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x1
1908	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x544
- stack 0: 0x2
1909	 182	PUSH2	0080	 	 
- stack 2: 0x544
- stack 1: 0x2
- stack 0: 0x80
1910	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x544
1911	 186	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1912	 188	ADD		 	 
- stack 0: 0x548
1913	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1914	 18A	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BA000000D40170
1915	 18B	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BA000000D40170
- stack 0: 0xF0
1916	 18D	SHR		 	 
- stack 1: 0x548
- stack 0: 0x18F
1917	 18E	JUMP		 	 
- stack 0: 0x548
1918	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x548
1919	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1920	 191	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BA000000D40170
1921	 192	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x18F000201A9FFE40086000C0156000000A0000001EB000000BA000000D40170
- stack 0: 0xE0
1922	 194	SHR		 	 
- stack 1: 0x548
- stack 0: 0x18F0002
1923	 195	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x18F0002
- stack 0: 0xFFFF
1924	 198	AND		 	 
- stack 1: 0x548
- stack 0: 0x2
1925	 199	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0x1
1926	 19B	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x2
1927	 19C	PUSH2	00A0	 	 
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0xA0
1928	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x548
1929	 1A0	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1930	 1A2	ADD		 	 
- stack 0: 0x54C
1931	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1932	 1A4	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x1A9FFE40086000C0156000000A0000001EB000000BA000000D4017001700001
1933	 1A5	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x1A9FFE40086000C0156000000A0000001EB000000BA000000D4017001700001
- stack 0: 0xF0
1934	 1A7	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1A9
1935	 1A8	JUMP		 	 
- stack 0: 0x54C
1936	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x54C
1937	 1AA	PUSH2	0080	 	 
- stack 1: 0x54C
- stack 0: 0x80
1938	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x54C
- stack 0: 0x2
1939	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1940	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x54C
- stack 0: 0x2
1941	 1B4	PUSH2	00A0	 	 
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0xA0
1942	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0x2
1943	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x54C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1944	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0x2
1945	 1BE	SUB		 	 
- stack 1: 0x54C
- stack 0: 0x0
1946	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x1C7
1947	 1C2	JUMPI		 	 
- stack 0: 0x54C
1948	 1C3	PUSH2	01E1	 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 1: 0x54C
- stack 0: 0x1E1
1949	 1C6	JUMP		 	 
- stack 0: 0x54C
1950	 1E1	JUMPDEST		 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x54C
1951	 1E2	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1952	 1E4	ADD		 	 
- stack 0: 0x550
1953	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1954	 1E6	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x86000C0156000000A0000001EB000000BA000000D4017001700001018F0002
1955	 1E7	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x86000C0156000000A0000001EB000000BA000000D4017001700001018F0002
- stack 0: 0xF0
1956	 1E9	SHR		 	 
- stack 1: 0x550
- stack 0: 0x86
1957	 1EA	JUMP		 	 
- stack 0: 0x550
1958	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x550
1959	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1960	 88	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x86000C0156000000A0000001EB000000BA000000D4017001700001018F0002
1961	 89	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x86000C0156000000A0000001EB000000BA000000D4017001700001018F0002
- stack 0: 0xE0
1962	 8B	SHR		 	 
- stack 1: 0x550
- stack 0: 0x86000C
1963	 8C	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x86000C
- stack 0: 0xFFFF
1964	 8F	AND		 	 
- stack 1: 0x550
- stack 0: 0xC
1965	 90	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0xC
- stack 0: 0x1
1966	 92	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xC
1967	 93	PUSH2	0380	 	 
- stack 2: 0x550
- stack 1: 0xC
- stack 0: 0x380
1968	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x550
1969	 97	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1970	 99	ADD		 	 
- stack 0: 0x554
1971	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1972	 9B	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x156000000A0000001EB000000BA000000D4017001700001018F000201A9FFE8
1973	 9C	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x156000000A0000001EB000000BA000000D4017001700001018F000201A9FFE8
- stack 0: 0xF0
1974	 9E	SHR		 	 
- stack 1: 0x554
- stack 0: 0x156
1975	 9F	JUMP		 	 
- stack 0: 0x554
1976	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x554
1977	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1978	 158	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x156000000A0000001EB000000BA000000D4017001700001018F000201A9FFE8
1979	 159	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x156000000A0000001EB000000BA000000D4017001700001018F000201A9FFE8
- stack 0: 0xE0
1980	 15B	SHR		 	 
- stack 1: 0x554
- stack 0: 0x1560000
1981	 15C	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x1560000
- stack 0: 0xFFFF
1982	 15F	AND		 	 
- stack 1: 0x554
- stack 0: 0x0
1983	 160	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1
1984	 162	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x0
1985	 163	PUSH2	0080	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x80
1986	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x554
1987	 167	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1988	 169	ADD		 	 
- stack 0: 0x558
1989	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1990	 16B	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xA0000001EB000000BA000000D4017001700001018F000201A9FFE80086000D
1991	 16C	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xA0000001EB000000BA000000D4017001700001018F000201A9FFE80086000D
- stack 0: 0xF0
1992	 16E	SHR		 	 
- stack 1: 0x558
- stack 0: 0xA0
1993	 16F	JUMP		 	 
- stack 0: 0x558
1994	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x558
1995	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1996	 A2	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xA0000001EB000000BA000000D4017001700001018F000201A9FFE80086000D
1997	 A3	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0xA0000001EB000000BA000000D4017001700001018F000201A9FFE80086000D
- stack 0: 0xE0
1998	 A5	SHR		 	 
- stack 1: 0x558
- stack 0: 0xA00000
1999	 A6	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0xA00000
- stack 0: 0xFFFF
2000	 A9	AND		 	 
- stack 1: 0x558
- stack 0: 0x0
2001	 AA	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x1
2002	 AC	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x0
2003	 AD	PUSH2	0020	 	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x20
2004	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x558
2005	 B1	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
2006	 B3	ADD		 	 
- stack 0: 0x55C
2007	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
2008	 B5	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1EB000000BA000000D4017001700001018F000201A9FFE80086000D01560000
2009	 B6	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x1EB000000BA000000D4017001700001018F000201A9FFE80086000D01560000
- stack 0: 0xF0
2010	 B8	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1EB
2011	 B9	JUMP		 	 
- stack 0: 0x55C
2012	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x55C
2013	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
2014	 1ED	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1EB000000BA000000D4017001700001018F000201A9FFE80086000D01560000
2015	 1EE	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x1EB000000BA000000D4017001700001018F000201A9FFE80086000D01560000
- stack 0: 0xE0
2016	 1F0	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1EB0000
2017	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2018	 1F4	AND		 	 
- stack 1: 0x55C
- stack 0: 0x0
2019	 1F5	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0x1
2020	 1F7	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x0
2021	 1F8	POP		 	 
- stack 0: 0x55C
2022	 1F9	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
2023	 1FB	ADD		 	 
- stack 0: 0x560
2024	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
2025	 1FD	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0xBA000000D4017001700001018F000201A9FFE80086000D0156000000A00000
2026	 1FE	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0xBA000000D4017001700001018F000201A9FFE80086000D0156000000A00000
- stack 0: 0xF0
2027	 200	SHR		 	 
- stack 1: 0x560
- stack 0: 0xBA
2028	 201	JUMP		 	 
- stack 0: 0x560
2029	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x560
2030	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
2031	 BC	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0xBA000000D4017001700001018F000201A9FFE80086000D0156000000A00000
2032	 BD	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0xBA000000D4017001700001018F000201A9FFE80086000D0156000000A00000
- stack 0: 0xE0
2033	 BF	SHR		 	 
- stack 1: 0x560
- stack 0: 0xBA0000
2034	 C0	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0xBA0000
- stack 0: 0xFFFF
2035	 C3	AND		 	 
- stack 1: 0x560
- stack 0: 0x0
2036	 C4	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x1
2037	 C6	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x0
2038	 C7	PUSH2	0040	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x40
2039	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x560
2040	 CB	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
2041	 CD	ADD		 	 
- stack 0: 0x564
2042	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2043	 CF	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xD4017001700001018F000201A9FFE80086000D0156000000A0000001EB0000
2044	 D0	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0xD4017001700001018F000201A9FFE80086000D0156000000A0000001EB0000
- stack 0: 0xF0
2045	 D2	SHR		 	 
- stack 1: 0x564
- stack 0: 0xD4
2046	 D3	JUMP		 	 
- stack 0: 0x564
2047	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x564
2048	 D5	PUSH2	0020	 	 
- stack 1: 0x564
- stack 0: 0x20
2049	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x564
- stack 0: 0x0
2050	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2051	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x564
- stack 0: 0x0
2052	 DF	PUSH2	0040	 	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x40
2053	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x0
2054	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x564
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2055	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x0
2056	 E9	SUB		 	 
- stack 1: 0x564
- stack 0: 0x0
2057	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0xF2
2058	 ED	JUMPI		 	 
- stack 0: 0x564
2059	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x564
- stack 0: 0x10C
2060	 F1	JUMP		 	 
- stack 0: 0x564
2061	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x564
2062	 10D	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2063	 10F	ADD		 	 
- stack 0: 0x568
2064	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2065	 111	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BA0000
2066	 112	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BA0000
- stack 0: 0xF0
2067	 114	SHR		 	 
- stack 1: 0x568
- stack 0: 0x170
2068	 115	JUMP		 	 
- stack 0: 0x568
2069	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x568
2070	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
2071	 172	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BA0000
2072	 173	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BA0000
- stack 0: 0xE0
2073	 175	SHR		 	 
- stack 1: 0x568
- stack 0: 0x1700001
2074	 176	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x1700001
- stack 0: 0xFFFF
2075	 179	AND		 	 
- stack 1: 0x568
- stack 0: 0x1
2076	 17A	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x1
- stack 0: 0x1
2077	 17C	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x1
2078	 17D	PUSH2	0080	 	 
- stack 2: 0x568
- stack 1: 0x1
- stack 0: 0x80
2079	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x568
- stack 1: 0x1
- stack 0: 0x0
2080	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x568
- stack 0: 0x1
2081	 182	PUSH2	0080	 	 
- stack 2: 0x568
- stack 1: 0x1
- stack 0: 0x80
2082	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x568
2083	 186	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2084	 188	ADD		 	 
- stack 0: 0x56C
2085	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2086	 18A	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BA000001EB0000
2087	 18B	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BA000001EB0000
- stack 0: 0xF0
2088	 18D	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x18F
2089	 18E	JUMP		 	 
- stack 0: 0x56C
2090	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x56C
2091	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
2092	 191	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BA000001EB0000
2093	 192	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BA000001EB0000
- stack 0: 0xE0
2094	 194	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x18F0002
2095	 195	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x18F0002
- stack 0: 0xFFFF
2096	 198	AND		 	 
- stack 1: 0x56C
- stack 0: 0x2
2097	 199	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x2
- stack 0: 0x1
2098	 19B	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x2
2099	 19C	PUSH2	00A0	 	 
- stack 2: 0x56C
- stack 1: 0x2
- stack 0: 0xA0
2100	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x56C
2101	 1A0	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2102	 1A2	ADD		 	 
- stack 0: 0x570
2103	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2104	 1A4	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x1A9FFE80086000D0156000000A0000001EB000000BA000001EB000000D40148
2105	 1A5	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x1A9FFE80086000D0156000000A0000001EB000000BA000001EB000000D40148
- stack 0: 0xF0
2106	 1A7	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1A9
2107	 1A8	JUMP		 	 
- stack 0: 0x570
2108	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x570
2109	 1AA	PUSH2	0080	 	 
- stack 1: 0x570
- stack 0: 0x80
2110	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x570
- stack 0: 0x1
2111	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x570
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2112	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x570
- stack 0: 0x1
2113	 1B4	PUSH2	00A0	 	 
- stack 2: 0x570
- stack 1: 0x1
- stack 0: 0xA0
2114	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x570
- stack 1: 0x1
- stack 0: 0x2
2115	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x570
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2116	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x570
- stack 1: 0x1
- stack 0: 0x2
2117	 1BE	SUB		 	 
- stack 1: 0x570
- stack 0: 0x1
2118	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x570
- stack 1: 0x1
- stack 0: 0x1C7
2119	 1C2	JUMPI		 	 
- stack 0: 0x570
2120	 1C7	JUMPDEST		 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x570
2121	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
2122	 1C9	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x1A9FFE80086000D0156000000A0000001EB000000BA000001EB000000D40148
2123	 1CA	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x1A9FFE80086000D0156000000A0000001EB000000BA000001EB000000D40148
- stack 0: 0xE0
2124	 1CC	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1A9FFE8
2125	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x1A9FFE8
- stack 0: 0xFFFF
2126	 1D0	AND		 	 
- stack 1: 0x570
- stack 0: 0xFFE8
2127	 1D1	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0xFFE8
- stack 0: 0x1
2128	 1D3	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2129	 1D4	ADD		 	 
- stack 0: 0x558
2130	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x558
- stack 0: 0xFFFFFFFF
2131	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x558
2132	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
2133	 1DC	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xA0000001EB000000BA000000D4017001700001018F000201A9FFE80086000D
2134	 1DD	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xA0000001EB000000BA000000D4017001700001018F000201A9FFE80086000D
- stack 0: 0xF0
2135	 1DF	SHR		 	 
- stack 1: 0x558
- stack 0: 0xA0
2136	 1E0	JUMP		 	 
- stack 0: 0x558
2137	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x558
2138	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
2139	 A2	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xA0000001EB000000BA000000D4017001700001018F000201A9FFE80086000D
2140	 A3	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0xA0000001EB000000BA000000D4017001700001018F000201A9FFE80086000D
- stack 0: 0xE0
2141	 A5	SHR		 	 
- stack 1: 0x558
- stack 0: 0xA00000
2142	 A6	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0xA00000
- stack 0: 0xFFFF
2143	 A9	AND		 	 
- stack 1: 0x558
- stack 0: 0x0
2144	 AA	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x1
2145	 AC	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x0
2146	 AD	PUSH2	0020	 	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x20
2147	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x558
2148	 B1	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
2149	 B3	ADD		 	 
- stack 0: 0x55C
2150	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
2151	 B5	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1EB000000BA000000D4017001700001018F000201A9FFE80086000D01560000
2152	 B6	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x1EB000000BA000000D4017001700001018F000201A9FFE80086000D01560000
- stack 0: 0xF0
2153	 B8	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1EB
2154	 B9	JUMP		 	 
- stack 0: 0x55C
2155	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x55C
2156	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
2157	 1ED	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1EB000000BA000000D4017001700001018F000201A9FFE80086000D01560000
2158	 1EE	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x1EB000000BA000000D4017001700001018F000201A9FFE80086000D01560000
- stack 0: 0xE0
2159	 1F0	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1EB0000
2160	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2161	 1F4	AND		 	 
- stack 1: 0x55C
- stack 0: 0x0
2162	 1F5	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0x1
2163	 1F7	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x0
2164	 1F8	POP		 	 
- stack 0: 0x55C
2165	 1F9	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
2166	 1FB	ADD		 	 
- stack 0: 0x560
2167	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
2168	 1FD	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0xBA000000D4017001700001018F000201A9FFE80086000D0156000000A00000
2169	 1FE	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0xBA000000D4017001700001018F000201A9FFE80086000D0156000000A00000
- stack 0: 0xF0
2170	 200	SHR		 	 
- stack 1: 0x560
- stack 0: 0xBA
2171	 201	JUMP		 	 
- stack 0: 0x560
2172	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x560
2173	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
2174	 BC	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0xBA000000D4017001700001018F000201A9FFE80086000D0156000000A00000
2175	 BD	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0xBA000000D4017001700001018F000201A9FFE80086000D0156000000A00000
- stack 0: 0xE0
2176	 BF	SHR		 	 
- stack 1: 0x560
- stack 0: 0xBA0000
2177	 C0	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0xBA0000
- stack 0: 0xFFFF
2178	 C3	AND		 	 
- stack 1: 0x560
- stack 0: 0x0
2179	 C4	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x1
2180	 C6	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x0
2181	 C7	PUSH2	0040	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x40
2182	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x560
2183	 CB	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
2184	 CD	ADD		 	 
- stack 0: 0x564
2185	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2186	 CF	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xD4017001700001018F000201A9FFE80086000D0156000000A0000001EB0000
2187	 D0	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0xD4017001700001018F000201A9FFE80086000D0156000000A0000001EB0000
- stack 0: 0xF0
2188	 D2	SHR		 	 
- stack 1: 0x564
- stack 0: 0xD4
2189	 D3	JUMP		 	 
- stack 0: 0x564
2190	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x564
2191	 D5	PUSH2	0020	 	 
- stack 1: 0x564
- stack 0: 0x20
2192	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x564
- stack 0: 0x0
2193	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2194	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x564
- stack 0: 0x0
2195	 DF	PUSH2	0040	 	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x40
2196	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x0
2197	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x564
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2198	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x0
2199	 E9	SUB		 	 
- stack 1: 0x564
- stack 0: 0x0
2200	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0xF2
2201	 ED	JUMPI		 	 
- stack 0: 0x564
2202	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x564
- stack 0: 0x10C
2203	 F1	JUMP		 	 
- stack 0: 0x564
2204	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x564
2205	 10D	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2206	 10F	ADD		 	 
- stack 0: 0x568
2207	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2208	 111	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BA0000
2209	 112	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BA0000
- stack 0: 0xF0
2210	 114	SHR		 	 
- stack 1: 0x568
- stack 0: 0x170
2211	 115	JUMP		 	 
- stack 0: 0x568
2212	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x568
2213	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
2214	 172	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BA0000
2215	 173	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x1700001018F000201A9FFE80086000D0156000000A0000001EB000000BA0000
- stack 0: 0xE0
2216	 175	SHR		 	 
- stack 1: 0x568
- stack 0: 0x1700001
2217	 176	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x1700001
- stack 0: 0xFFFF
2218	 179	AND		 	 
- stack 1: 0x568
- stack 0: 0x1
2219	 17A	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x1
- stack 0: 0x1
2220	 17C	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x1
2221	 17D	PUSH2	0080	 	 
- stack 2: 0x568
- stack 1: 0x1
- stack 0: 0x80
2222	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x568
- stack 1: 0x1
- stack 0: 0x1
2223	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x568
- stack 0: 0x2
2224	 182	PUSH2	0080	 	 
- stack 2: 0x568
- stack 1: 0x2
- stack 0: 0x80
2225	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x568
2226	 186	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2227	 188	ADD		 	 
- stack 0: 0x56C
2228	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2229	 18A	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BA000001EB0000
2230	 18B	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BA000001EB0000
- stack 0: 0xF0
2231	 18D	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x18F
2232	 18E	JUMP		 	 
- stack 0: 0x56C
2233	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x56C
2234	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
2235	 191	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BA000001EB0000
2236	 192	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x18F000201A9FFE80086000D0156000000A0000001EB000000BA000001EB0000
- stack 0: 0xE0
2237	 194	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x18F0002
2238	 195	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x18F0002
- stack 0: 0xFFFF
2239	 198	AND		 	 
- stack 1: 0x56C
- stack 0: 0x2
2240	 199	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x2
- stack 0: 0x1
2241	 19B	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x2
2242	 19C	PUSH2	00A0	 	 
- stack 2: 0x56C
- stack 1: 0x2
- stack 0: 0xA0
2243	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x56C
2244	 1A0	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2245	 1A2	ADD		 	 
- stack 0: 0x570
2246	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2247	 1A4	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x1A9FFE80086000D0156000000A0000001EB000000BA000001EB000000D40148
2248	 1A5	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x1A9FFE80086000D0156000000A0000001EB000000BA000001EB000000D40148
- stack 0: 0xF0
2249	 1A7	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1A9
2250	 1A8	JUMP		 	 
- stack 0: 0x570
2251	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x570
2252	 1AA	PUSH2	0080	 	 
- stack 1: 0x570
- stack 0: 0x80
2253	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x570
- stack 0: 0x2
2254	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x570
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2255	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x570
- stack 0: 0x2
2256	 1B4	PUSH2	00A0	 	 
- stack 2: 0x570
- stack 1: 0x2
- stack 0: 0xA0
2257	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x570
- stack 1: 0x2
- stack 0: 0x2
2258	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x570
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2259	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x570
- stack 1: 0x2
- stack 0: 0x2
2260	 1BE	SUB		 	 
- stack 1: 0x570
- stack 0: 0x0
2261	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x1C7
2262	 1C2	JUMPI		 	 
- stack 0: 0x570
2263	 1C3	PUSH2	01E1	 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 1: 0x570
- stack 0: 0x1E1
2264	 1C6	JUMP		 	 
- stack 0: 0x570
2265	 1E1	JUMPDEST		 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x570
2266	 1E2	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2267	 1E4	ADD		 	 
- stack 0: 0x574
2268	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2269	 1E6	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x86000D0156000000A0000001EB000000BA000001EB000000D4014801700001
2270	 1E7	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x86000D0156000000A0000001EB000000BA000001EB000000D4014801700001
- stack 0: 0xF0
2271	 1E9	SHR		 	 
- stack 1: 0x574
- stack 0: 0x86
2272	 1EA	JUMP		 	 
- stack 0: 0x574
2273	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x574
2274	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
2275	 88	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x86000D0156000000A0000001EB000000BA000001EB000000D4014801700001
2276	 89	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x86000D0156000000A0000001EB000000BA000001EB000000D4014801700001
- stack 0: 0xE0
2277	 8B	SHR		 	 
- stack 1: 0x574
- stack 0: 0x86000D
2278	 8C	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x86000D
- stack 0: 0xFFFF
2279	 8F	AND		 	 
- stack 1: 0x574
- stack 0: 0xD
2280	 90	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0xD
- stack 0: 0x1
2281	 92	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0xD
2282	 93	PUSH2	0380	 	 
- stack 2: 0x574
- stack 1: 0xD
- stack 0: 0x380
2283	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x574
2284	 97	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2285	 99	ADD		 	 
- stack 0: 0x578
2286	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2287	 9B	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x156000000A0000001EB000000BA000001EB000000D4014801700001018F0002
2288	 9C	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x156000000A0000001EB000000BA000001EB000000D4014801700001018F0002
- stack 0: 0xF0
2289	 9E	SHR		 	 
- stack 1: 0x578
- stack 0: 0x156
2290	 9F	JUMP		 	 
- stack 0: 0x578
2291	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x578
2292	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2293	 158	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x156000000A0000001EB000000BA000001EB000000D4014801700001018F0002
2294	 159	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x156000000A0000001EB000000BA000001EB000000D4014801700001018F0002
- stack 0: 0xE0
2295	 15B	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1560000
2296	 15C	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x1560000
- stack 0: 0xFFFF
2297	 15F	AND		 	 
- stack 1: 0x578
- stack 0: 0x0
2298	 160	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x1
2299	 162	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x0
2300	 163	PUSH2	0080	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x80
2301	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x578
2302	 167	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2303	 169	ADD		 	 
- stack 0: 0x57C
2304	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2305	 16B	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xA0000001EB000000BA000001EB000000D4014801700001018F000201A9FFE4
2306	 16C	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0xA0000001EB000000BA000001EB000000D4014801700001018F000201A9FFE4
- stack 0: 0xF0
2307	 16E	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xA0
2308	 16F	JUMP		 	 
- stack 0: 0x57C
2309	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x57C
2310	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2311	 A2	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xA0000001EB000000BA000001EB000000D4014801700001018F000201A9FFE4
2312	 A3	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0xA0000001EB000000BA000001EB000000D4014801700001018F000201A9FFE4
- stack 0: 0xE0
2313	 A5	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xA00000
2314	 A6	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0xA00000
- stack 0: 0xFFFF
2315	 A9	AND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2316	 AA	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x1
2317	 AC	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2318	 AD	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x20
2319	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x57C
2320	 B1	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2321	 B3	ADD		 	 
- stack 0: 0x580
2322	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2323	 B5	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x1EB000000BA000001EB000000D4014801700001018F000201A9FFE40086000E
2324	 B6	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x1EB000000BA000001EB000000D4014801700001018F000201A9FFE40086000E
- stack 0: 0xF0
2325	 B8	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1EB
2326	 B9	JUMP		 	 
- stack 0: 0x580
2327	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x580
2328	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2329	 1ED	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x1EB000000BA000001EB000000D4014801700001018F000201A9FFE40086000E
2330	 1EE	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x1EB000000BA000001EB000000D4014801700001018F000201A9FFE40086000E
- stack 0: 0xE0
2331	 1F0	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1EB0000
2332	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2333	 1F4	AND		 	 
- stack 1: 0x580
- stack 0: 0x0
2334	 1F5	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x1
2335	 1F7	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x0
2336	 1F8	POP		 	 
- stack 0: 0x580
2337	 1F9	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2338	 1FB	ADD		 	 
- stack 0: 0x584
2339	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2340	 1FD	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xBA000001EB000000D4014801700001018F000201A9FFE40086000E01560000
2341	 1FE	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xBA000001EB000000D4014801700001018F000201A9FFE40086000E01560000
- stack 0: 0xF0
2342	 200	SHR		 	 
- stack 1: 0x584
- stack 0: 0xBA
2343	 201	JUMP		 	 
- stack 0: 0x584
2344	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x584
2345	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2346	 BC	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xBA000001EB000000D4014801700001018F000201A9FFE40086000E01560000
2347	 BD	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0xBA000001EB000000D4014801700001018F000201A9FFE40086000E01560000
- stack 0: 0xE0
2348	 BF	SHR		 	 
- stack 1: 0x584
- stack 0: 0xBA0000
2349	 C0	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0xBA0000
- stack 0: 0xFFFF
2350	 C3	AND		 	 
- stack 1: 0x584
- stack 0: 0x0
2351	 C4	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x1
2352	 C6	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x0
2353	 C7	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x40
2354	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x584
2355	 CB	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2356	 CD	ADD		 	 
- stack 0: 0x588
2357	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2358	 CF	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
2359	 D0	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
- stack 0: 0xF0
2360	 D2	SHR		 	 
- stack 1: 0x588
- stack 0: 0x1EB
2361	 D3	JUMP		 	 
- stack 0: 0x588
2362	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x588
2363	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2364	 1ED	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
2365	 1EE	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
- stack 0: 0xE0
2366	 1F0	SHR		 	 
- stack 1: 0x588
- stack 0: 0x1EB0000
2367	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2368	 1F4	AND		 	 
- stack 1: 0x588
- stack 0: 0x0
2369	 1F5	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x1
2370	 1F7	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x0
2371	 1F8	POP		 	 
- stack 0: 0x588
2372	 1F9	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2373	 1FB	ADD		 	 
- stack 0: 0x58C
2374	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2375	 1FD	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xD4014801700001018F000201A9FFE40086000E0156000000A0000001EB0000
2376	 1FE	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0xD4014801700001018F000201A9FFE40086000E0156000000A0000001EB0000
- stack 0: 0xF0
2377	 200	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xD4
2378	 201	JUMP		 	 
- stack 0: 0x58C
2379	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x58C
2380	 D5	PUSH2	0020	 	 
- stack 1: 0x58C
- stack 0: 0x20
2381	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x58C
- stack 0: 0x0
2382	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2383	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x58C
- stack 0: 0x0
2384	 DF	PUSH2	0040	 	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x40
2385	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x0
2386	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x58C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2387	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x0
2388	 E9	SUB		 	 
- stack 1: 0x58C
- stack 0: 0x0
2389	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0xF2
2390	 ED	JUMPI		 	 
- stack 0: 0x58C
2391	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x58C
- stack 0: 0x10C
2392	 F1	JUMP		 	 
- stack 0: 0x58C
2393	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x58C
2394	 10D	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2395	 10F	ADD		 	 
- stack 0: 0x590
2396	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2397	 111	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
2398	 112	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
- stack 0: 0xF0
2399	 114	SHR		 	 
- stack 1: 0x590
- stack 0: 0x170
2400	 115	JUMP		 	 
- stack 0: 0x590
2401	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x590
2402	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2403	 172	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
2404	 173	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
- stack 0: 0xE0
2405	 175	SHR		 	 
- stack 1: 0x590
- stack 0: 0x1700001
2406	 176	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x1700001
- stack 0: 0xFFFF
2407	 179	AND		 	 
- stack 1: 0x590
- stack 0: 0x1
2408	 17A	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x1
- stack 0: 0x1
2409	 17C	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x1
2410	 17D	PUSH2	0080	 	 
- stack 2: 0x590
- stack 1: 0x1
- stack 0: 0x80
2411	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x590
- stack 1: 0x1
- stack 0: 0x0
2412	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x590
- stack 0: 0x1
2413	 182	PUSH2	0080	 	 
- stack 2: 0x590
- stack 1: 0x1
- stack 0: 0x80
2414	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x590
2415	 186	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2416	 188	ADD		 	 
- stack 0: 0x594
2417	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2418	 18A	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BA0000
2419	 18B	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BA0000
- stack 0: 0xF0
2420	 18D	SHR		 	 
- stack 1: 0x594
- stack 0: 0x18F
2421	 18E	JUMP		 	 
- stack 0: 0x594
2422	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x594
2423	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2424	 191	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BA0000
2425	 192	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BA0000
- stack 0: 0xE0
2426	 194	SHR		 	 
- stack 1: 0x594
- stack 0: 0x18F0002
2427	 195	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x18F0002
- stack 0: 0xFFFF
2428	 198	AND		 	 
- stack 1: 0x594
- stack 0: 0x2
2429	 199	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0x1
2430	 19B	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x2
2431	 19C	PUSH2	00A0	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0xA0
2432	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x594
2433	 1A0	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2434	 1A2	ADD		 	 
- stack 0: 0x598
2435	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2436	 1A4	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1A9FFE40086000E0156000000A0000001EB000001EB000000BA000000D40120
2437	 1A5	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x1A9FFE40086000E0156000000A0000001EB000001EB000000BA000000D40120
- stack 0: 0xF0
2438	 1A7	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1A9
2439	 1A8	JUMP		 	 
- stack 0: 0x598
2440	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x598
2441	 1AA	PUSH2	0080	 	 
- stack 1: 0x598
- stack 0: 0x80
2442	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x598
- stack 0: 0x1
2443	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2444	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x598
- stack 0: 0x1
2445	 1B4	PUSH2	00A0	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0xA0
2446	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x2
2447	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x598
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2448	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x2
2449	 1BE	SUB		 	 
- stack 1: 0x598
- stack 0: 0x1
2450	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x1C7
2451	 1C2	JUMPI		 	 
- stack 0: 0x598
2452	 1C7	JUMPDEST		 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x598
2453	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2454	 1C9	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1A9FFE40086000E0156000000A0000001EB000001EB000000BA000000D40120
2455	 1CA	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x1A9FFE40086000E0156000000A0000001EB000001EB000000BA000000D40120
- stack 0: 0xE0
2456	 1CC	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1A9FFE4
2457	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x1A9FFE4
- stack 0: 0xFFFF
2458	 1D0	AND		 	 
- stack 1: 0x598
- stack 0: 0xFFE4
2459	 1D1	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0xFFE4
- stack 0: 0x1
2460	 1D3	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2461	 1D4	ADD		 	 
- stack 0: 0x57C
2462	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x57C
- stack 0: 0xFFFFFFFF
2463	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x57C
2464	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2465	 1DC	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xA0000001EB000000BA000001EB000000D4014801700001018F000201A9FFE4
2466	 1DD	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0xA0000001EB000000BA000001EB000000D4014801700001018F000201A9FFE4
- stack 0: 0xF0
2467	 1DF	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xA0
2468	 1E0	JUMP		 	 
- stack 0: 0x57C
2469	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x57C
2470	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2471	 A2	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xA0000001EB000000BA000001EB000000D4014801700001018F000201A9FFE4
2472	 A3	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0xA0000001EB000000BA000001EB000000D4014801700001018F000201A9FFE4
- stack 0: 0xE0
2473	 A5	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xA00000
2474	 A6	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0xA00000
- stack 0: 0xFFFF
2475	 A9	AND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2476	 AA	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x1
2477	 AC	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2478	 AD	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x20
2479	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x57C
2480	 B1	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2481	 B3	ADD		 	 
- stack 0: 0x580
2482	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2483	 B5	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x1EB000000BA000001EB000000D4014801700001018F000201A9FFE40086000E
2484	 B6	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x1EB000000BA000001EB000000D4014801700001018F000201A9FFE40086000E
- stack 0: 0xF0
2485	 B8	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1EB
2486	 B9	JUMP		 	 
- stack 0: 0x580
2487	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x580
2488	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2489	 1ED	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x1EB000000BA000001EB000000D4014801700001018F000201A9FFE40086000E
2490	 1EE	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x1EB000000BA000001EB000000D4014801700001018F000201A9FFE40086000E
- stack 0: 0xE0
2491	 1F0	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1EB0000
2492	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2493	 1F4	AND		 	 
- stack 1: 0x580
- stack 0: 0x0
2494	 1F5	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x1
2495	 1F7	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x0
2496	 1F8	POP		 	 
- stack 0: 0x580
2497	 1F9	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2498	 1FB	ADD		 	 
- stack 0: 0x584
2499	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2500	 1FD	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xBA000001EB000000D4014801700001018F000201A9FFE40086000E01560000
2501	 1FE	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xBA000001EB000000D4014801700001018F000201A9FFE40086000E01560000
- stack 0: 0xF0
2502	 200	SHR		 	 
- stack 1: 0x584
- stack 0: 0xBA
2503	 201	JUMP		 	 
- stack 0: 0x584
2504	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x584
2505	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2506	 BC	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xBA000001EB000000D4014801700001018F000201A9FFE40086000E01560000
2507	 BD	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0xBA000001EB000000D4014801700001018F000201A9FFE40086000E01560000
- stack 0: 0xE0
2508	 BF	SHR		 	 
- stack 1: 0x584
- stack 0: 0xBA0000
2509	 C0	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0xBA0000
- stack 0: 0xFFFF
2510	 C3	AND		 	 
- stack 1: 0x584
- stack 0: 0x0
2511	 C4	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x1
2512	 C6	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x0
2513	 C7	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x40
2514	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x584
2515	 CB	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2516	 CD	ADD		 	 
- stack 0: 0x588
2517	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2518	 CF	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
2519	 D0	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
- stack 0: 0xF0
2520	 D2	SHR		 	 
- stack 1: 0x588
- stack 0: 0x1EB
2521	 D3	JUMP		 	 
- stack 0: 0x588
2522	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x588
2523	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2524	 1ED	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
2525	 1EE	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x1EB000000D4014801700001018F000201A9FFE40086000E0156000000A00000
- stack 0: 0xE0
2526	 1F0	SHR		 	 
- stack 1: 0x588
- stack 0: 0x1EB0000
2527	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2528	 1F4	AND		 	 
- stack 1: 0x588
- stack 0: 0x0
2529	 1F5	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x1
2530	 1F7	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x0
2531	 1F8	POP		 	 
- stack 0: 0x588
2532	 1F9	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2533	 1FB	ADD		 	 
- stack 0: 0x58C
2534	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2535	 1FD	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xD4014801700001018F000201A9FFE40086000E0156000000A0000001EB0000
2536	 1FE	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0xD4014801700001018F000201A9FFE40086000E0156000000A0000001EB0000
- stack 0: 0xF0
2537	 200	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xD4
2538	 201	JUMP		 	 
- stack 0: 0x58C
2539	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x58C
2540	 D5	PUSH2	0020	 	 
- stack 1: 0x58C
- stack 0: 0x20
2541	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x58C
- stack 0: 0x0
2542	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2543	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x58C
- stack 0: 0x0
2544	 DF	PUSH2	0040	 	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x40
2545	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x0
2546	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x58C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2547	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x0
2548	 E9	SUB		 	 
- stack 1: 0x58C
- stack 0: 0x0
2549	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0xF2
2550	 ED	JUMPI		 	 
- stack 0: 0x58C
2551	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x58C
- stack 0: 0x10C
2552	 F1	JUMP		 	 
- stack 0: 0x58C
2553	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x58C
2554	 10D	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2555	 10F	ADD		 	 
- stack 0: 0x590
2556	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2557	 111	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
2558	 112	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
- stack 0: 0xF0
2559	 114	SHR		 	 
- stack 1: 0x590
- stack 0: 0x170
2560	 115	JUMP		 	 
- stack 0: 0x590
2561	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x590
2562	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2563	 172	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
2564	 173	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x1700001018F000201A9FFE40086000E0156000000A0000001EB000001EB0000
- stack 0: 0xE0
2565	 175	SHR		 	 
- stack 1: 0x590
- stack 0: 0x1700001
2566	 176	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x1700001
- stack 0: 0xFFFF
2567	 179	AND		 	 
- stack 1: 0x590
- stack 0: 0x1
2568	 17A	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x1
- stack 0: 0x1
2569	 17C	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x1
2570	 17D	PUSH2	0080	 	 
- stack 2: 0x590
- stack 1: 0x1
- stack 0: 0x80
2571	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x590
- stack 1: 0x1
- stack 0: 0x1
2572	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x590
- stack 0: 0x2
2573	 182	PUSH2	0080	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0x80
2574	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x590
2575	 186	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2576	 188	ADD		 	 
- stack 0: 0x594
2577	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2578	 18A	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BA0000
2579	 18B	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BA0000
- stack 0: 0xF0
2580	 18D	SHR		 	 
- stack 1: 0x594
- stack 0: 0x18F
2581	 18E	JUMP		 	 
- stack 0: 0x594
2582	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x594
2583	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2584	 191	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BA0000
2585	 192	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x18F000201A9FFE40086000E0156000000A0000001EB000001EB000000BA0000
- stack 0: 0xE0
2586	 194	SHR		 	 
- stack 1: 0x594
- stack 0: 0x18F0002
2587	 195	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x18F0002
- stack 0: 0xFFFF
2588	 198	AND		 	 
- stack 1: 0x594
- stack 0: 0x2
2589	 199	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0x1
2590	 19B	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x2
2591	 19C	PUSH2	00A0	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0xA0
2592	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x594
2593	 1A0	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2594	 1A2	ADD		 	 
- stack 0: 0x598
2595	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2596	 1A4	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1A9FFE40086000E0156000000A0000001EB000001EB000000BA000000D40120
2597	 1A5	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x1A9FFE40086000E0156000000A0000001EB000001EB000000BA000000D40120
- stack 0: 0xF0
2598	 1A7	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1A9
2599	 1A8	JUMP		 	 
- stack 0: 0x598
2600	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x598
2601	 1AA	PUSH2	0080	 	 
- stack 1: 0x598
- stack 0: 0x80
2602	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x598
- stack 0: 0x2
2603	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x598
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2604	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x598
- stack 0: 0x2
2605	 1B4	PUSH2	00A0	 	 
- stack 2: 0x598
- stack 1: 0x2
- stack 0: 0xA0
2606	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x598
- stack 1: 0x2
- stack 0: 0x2
2607	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x598
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2608	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x598
- stack 1: 0x2
- stack 0: 0x2
2609	 1BE	SUB		 	 
- stack 1: 0x598
- stack 0: 0x0
2610	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x1C7
2611	 1C2	JUMPI		 	 
- stack 0: 0x598
2612	 1C3	PUSH2	01E1	 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 1: 0x598
- stack 0: 0x1E1
2613	 1C6	JUMP		 	 
- stack 0: 0x598
2614	 1E1	JUMPDEST		 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x598
2615	 1E2	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2616	 1E4	ADD		 	 
- stack 0: 0x59C
2617	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2618	 1E6	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x86000E0156000000A0000001EB000001EB000000BA000000D4012001700001
2619	 1E7	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x86000E0156000000A0000001EB000001EB000000BA000000D4012001700001
- stack 0: 0xF0
2620	 1E9	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x86
2621	 1EA	JUMP		 	 
- stack 0: 0x59C
2622	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x59C
2623	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2624	 88	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x86000E0156000000A0000001EB000001EB000000BA000000D4012001700001
2625	 89	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x86000E0156000000A0000001EB000001EB000000BA000000D4012001700001
- stack 0: 0xE0
2626	 8B	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x86000E
2627	 8C	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x86000E
- stack 0: 0xFFFF
2628	 8F	AND		 	 
- stack 1: 0x59C
- stack 0: 0xE
2629	 90	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0xE
- stack 0: 0x1
2630	 92	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0xE
2631	 93	PUSH2	0380	 	 
- stack 2: 0x59C
- stack 1: 0xE
- stack 0: 0x380
2632	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x59C
2633	 97	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2634	 99	ADD		 	 
- stack 0: 0x5A0
2635	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2636	 9B	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x156000000A0000001EB000001EB000000BA000000D4012001700001018F0002
2637	 9C	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x156000000A0000001EB000001EB000000BA000000D4012001700001018F0002
- stack 0: 0xF0
2638	 9E	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x156
2639	 9F	JUMP		 	 
- stack 0: 0x5A0
2640	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5A0
2641	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2642	 158	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x156000000A0000001EB000001EB000000BA000000D4012001700001018F0002
2643	 159	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x156000000A0000001EB000001EB000000BA000000D4012001700001018F0002
- stack 0: 0xE0
2644	 15B	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x1560000
2645	 15C	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x1560000
- stack 0: 0xFFFF
2646	 15F	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2647	 160	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x1
2648	 162	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2649	 163	PUSH2	0080	 	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x80
2650	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x5A0
2651	 167	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2652	 169	ADD		 	 
- stack 0: 0x5A4
2653	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2654	 16B	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xA0000001EB000001EB000000BA000000D4012001700001018F000201A9FFE4
2655	 16C	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0xA0000001EB000001EB000000BA000000D4012001700001018F000201A9FFE4
- stack 0: 0xF0
2656	 16E	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xA0
2657	 16F	JUMP		 	 
- stack 0: 0x5A4
2658	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5A4
2659	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2660	 A2	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xA0000001EB000001EB000000BA000000D4012001700001018F000201A9FFE4
2661	 A3	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0xA0000001EB000001EB000000BA000000D4012001700001018F000201A9FFE4
- stack 0: 0xE0
2662	 A5	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xA00000
2663	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0xA00000
- stack 0: 0xFFFF
2664	 A9	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2665	 AA	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2666	 AC	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2667	 AD	PUSH2	0020	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x20
2668	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A4
2669	 B1	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2670	 B3	ADD		 	 
- stack 0: 0x5A8
2671	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2672	 B5	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB000001EB000000BA000000D4012001700001018F000201A9FFE40086000F
2673	 B6	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x1EB000001EB000000BA000000D4012001700001018F000201A9FFE40086000F
- stack 0: 0xF0
2674	 B8	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB
2675	 B9	JUMP		 	 
- stack 0: 0x5A8
2676	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A8
2677	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2678	 1ED	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB000001EB000000BA000000D4012001700001018F000201A9FFE40086000F
2679	 1EE	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x1EB000001EB000000BA000000D4012001700001018F000201A9FFE40086000F
- stack 0: 0xE0
2680	 1F0	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB0000
2681	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2682	 1F4	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2683	 1F5	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2684	 1F7	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2685	 1F8	POP		 	 
- stack 0: 0x5A8
2686	 1F9	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2687	 1FB	ADD		 	 
- stack 0: 0x5AC
2688	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2689	 1FD	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x1EB000000BA000000D4012001700001018F000201A9FFE40086000F01560000
2690	 1FE	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x1EB000000BA000000D4012001700001018F000201A9FFE40086000F01560000
- stack 0: 0xF0
2691	 200	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x1EB
2692	 201	JUMP		 	 
- stack 0: 0x5AC
2693	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5AC
2694	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2695	 1ED	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x1EB000000BA000000D4012001700001018F000201A9FFE40086000F01560000
2696	 1EE	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x1EB000000BA000000D4012001700001018F000201A9FFE40086000F01560000
- stack 0: 0xE0
2697	 1F0	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x1EB0000
2698	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2699	 1F4	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2700	 1F5	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x1
2701	 1F7	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2702	 1F8	POP		 	 
- stack 0: 0x5AC
2703	 1F9	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2704	 1FB	ADD		 	 
- stack 0: 0x5B0
2705	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2706	 1FD	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xBA000000D4012001700001018F000201A9FFE40086000F0156000000A00000
2707	 1FE	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0xBA000000D4012001700001018F000201A9FFE40086000F0156000000A00000
- stack 0: 0xF0
2708	 200	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xBA
2709	 201	JUMP		 	 
- stack 0: 0x5B0
2710	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x5B0
2711	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2712	 BC	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xBA000000D4012001700001018F000201A9FFE40086000F0156000000A00000
2713	 BD	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0xBA000000D4012001700001018F000201A9FFE40086000F0156000000A00000
- stack 0: 0xE0
2714	 BF	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xBA0000
2715	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0xBA0000
- stack 0: 0xFFFF
2716	 C3	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2717	 C4	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x1
2718	 C6	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2719	 C7	PUSH2	0040	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x40
2720	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5B0
2721	 CB	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2722	 CD	ADD		 	 
- stack 0: 0x5B4
2723	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2724	 CF	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0xD4012001700001018F000201A9FFE40086000F0156000000A0000000BA0000
2725	 D0	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0xD4012001700001018F000201A9FFE40086000F0156000000A0000000BA0000
- stack 0: 0xF0
2726	 D2	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0xD4
2727	 D3	JUMP		 	 
- stack 0: 0x5B4
2728	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x5B4
2729	 D5	PUSH2	0020	 	 
- stack 1: 0x5B4
- stack 0: 0x20
2730	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5B4
- stack 0: 0x0
2731	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2732	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B4
- stack 0: 0x0
2733	 DF	PUSH2	0040	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x40
2734	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x0
2735	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2736	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x0
2737	 E9	SUB		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2738	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0xF2
2739	 ED	JUMPI		 	 
- stack 0: 0x5B4
2740	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x5B4
- stack 0: 0x10C
2741	 F1	JUMP		 	 
- stack 0: 0x5B4
2742	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x5B4
2743	 10D	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2744	 10F	ADD		 	 
- stack 0: 0x5B8
2745	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2746	 111	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1700001018F000201A9FFE40086000F0156000000A0000000BA000000D40100
2747	 112	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x1700001018F000201A9FFE40086000F0156000000A0000000BA000000D40100
- stack 0: 0xF0
2748	 114	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x170
2749	 115	JUMP		 	 
- stack 0: 0x5B8
2750	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B8
2751	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2752	 172	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1700001018F000201A9FFE40086000F0156000000A0000000BA000000D40100
2753	 173	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x1700001018F000201A9FFE40086000F0156000000A0000000BA000000D40100
- stack 0: 0xE0
2754	 175	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1700001
2755	 176	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x1700001
- stack 0: 0xFFFF
2756	 179	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x1
2757	 17A	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0x1
2758	 17C	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x1
2759	 17D	PUSH2	0080	 	 
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0x80
2760	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0x0
2761	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B8
- stack 0: 0x1
2762	 182	PUSH2	0080	 	 
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0x80
2763	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B8
2764	 186	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2765	 188	ADD		 	 
- stack 0: 0x5BC
2766	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2767	 18A	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x18F000201A9FFE40086000F0156000000A0000000BA000000D4010001700001
2768	 18B	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x18F000201A9FFE40086000F0156000000A0000000BA000000D4010001700001
- stack 0: 0xF0
2769	 18D	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x18F
2770	 18E	JUMP		 	 
- stack 0: 0x5BC
2771	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5BC
2772	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2773	 191	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x18F000201A9FFE40086000F0156000000A0000000BA000000D4010001700001
2774	 192	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x18F000201A9FFE40086000F0156000000A0000000BA000000D4010001700001
- stack 0: 0xE0
2775	 194	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x18F0002
2776	 195	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x18F0002
- stack 0: 0xFFFF
2777	 198	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x2
2778	 199	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0x1
2779	 19B	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x2
2780	 19C	PUSH2	00A0	 	 
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0xA0
2781	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x5BC
2782	 1A0	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2783	 1A2	ADD		 	 
- stack 0: 0x5C0
2784	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2785	 1A4	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x1A9FFE40086000F0156000000A0000000BA000000D4010001700001018F0002
2786	 1A5	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x1A9FFE40086000F0156000000A0000000BA000000D4010001700001018F0002
- stack 0: 0xF0
2787	 1A7	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x1A9
2788	 1A8	JUMP		 	 
- stack 0: 0x5C0
2789	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5C0
2790	 1AA	PUSH2	0080	 	 
- stack 1: 0x5C0
- stack 0: 0x80
2791	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x5C0
- stack 0: 0x1
2792	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2793	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C0
- stack 0: 0x1
2794	 1B4	PUSH2	00A0	 	 
- stack 2: 0x5C0
- stack 1: 0x1
- stack 0: 0xA0
2795	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x5C0
- stack 1: 0x1
- stack 0: 0x2
2796	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5C0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2797	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5C0
- stack 1: 0x1
- stack 0: 0x2
2798	 1BE	SUB		 	 
- stack 1: 0x5C0
- stack 0: 0x1
2799	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x5C0
- stack 1: 0x1
- stack 0: 0x1C7
2800	 1C2	JUMPI		 	 
- stack 0: 0x5C0
2801	 1C7	JUMPDEST		 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x5C0
2802	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2803	 1C9	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x1A9FFE40086000F0156000000A0000000BA000000D4010001700001018F0002
2804	 1CA	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x1A9FFE40086000F0156000000A0000000BA000000D4010001700001018F0002
- stack 0: 0xE0
2805	 1CC	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x1A9FFE4
2806	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x1A9FFE4
- stack 0: 0xFFFF
2807	 1D0	AND		 	 
- stack 1: 0x5C0
- stack 0: 0xFFE4
2808	 1D1	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xFFE4
- stack 0: 0x1
2809	 1D3	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2810	 1D4	ADD		 	 
- stack 0: 0x5A4
2811	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5A4
- stack 0: 0xFFFFFFFF
2812	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5A4
2813	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2814	 1DC	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xA0000001EB000001EB000000BA000000D4012001700001018F000201A9FFE4
2815	 1DD	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0xA0000001EB000001EB000000BA000000D4012001700001018F000201A9FFE4
- stack 0: 0xF0
2816	 1DF	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xA0
2817	 1E0	JUMP		 	 
- stack 0: 0x5A4
2818	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5A4
2819	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2820	 A2	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xA0000001EB000001EB000000BA000000D4012001700001018F000201A9FFE4
2821	 A3	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0xA0000001EB000001EB000000BA000000D4012001700001018F000201A9FFE4
- stack 0: 0xE0
2822	 A5	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xA00000
2823	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0xA00000
- stack 0: 0xFFFF
2824	 A9	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2825	 AA	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2826	 AC	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2827	 AD	PUSH2	0020	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x20
2828	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A4
2829	 B1	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2830	 B3	ADD		 	 
- stack 0: 0x5A8
2831	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2832	 B5	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB000001EB000000BA000000D4012001700001018F000201A9FFE40086000F
2833	 B6	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x1EB000001EB000000BA000000D4012001700001018F000201A9FFE40086000F
- stack 0: 0xF0
2834	 B8	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB
2835	 B9	JUMP		 	 
- stack 0: 0x5A8
2836	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A8
2837	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2838	 1ED	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB000001EB000000BA000000D4012001700001018F000201A9FFE40086000F
2839	 1EE	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x1EB000001EB000000BA000000D4012001700001018F000201A9FFE40086000F
- stack 0: 0xE0
2840	 1F0	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1EB0000
2841	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2842	 1F4	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2843	 1F5	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2844	 1F7	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2845	 1F8	POP		 	 
- stack 0: 0x5A8
2846	 1F9	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2847	 1FB	ADD		 	 
- stack 0: 0x5AC
2848	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2849	 1FD	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x1EB000000BA000000D4012001700001018F000201A9FFE40086000F01560000
2850	 1FE	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x1EB000000BA000000D4012001700001018F000201A9FFE40086000F01560000
- stack 0: 0xF0
2851	 200	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x1EB
2852	 201	JUMP		 	 
- stack 0: 0x5AC
2853	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5AC
2854	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2855	 1ED	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x1EB000000BA000000D4012001700001018F000201A9FFE40086000F01560000
2856	 1EE	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x1EB000000BA000000D4012001700001018F000201A9FFE40086000F01560000
- stack 0: 0xE0
2857	 1F0	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x1EB0000
2858	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
2859	 1F4	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2860	 1F5	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x1
2861	 1F7	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2862	 1F8	POP		 	 
- stack 0: 0x5AC
2863	 1F9	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2864	 1FB	ADD		 	 
- stack 0: 0x5B0
2865	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2866	 1FD	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xBA000000D4012001700001018F000201A9FFE40086000F0156000000A00000
2867	 1FE	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0xBA000000D4012001700001018F000201A9FFE40086000F0156000000A00000
- stack 0: 0xF0
2868	 200	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xBA
2869	 201	JUMP		 	 
- stack 0: 0x5B0
2870	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x5B0
2871	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2872	 BC	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xBA000000D4012001700001018F000201A9FFE40086000F0156000000A00000
2873	 BD	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0xBA000000D4012001700001018F000201A9FFE40086000F0156000000A00000
- stack 0: 0xE0
2874	 BF	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xBA0000
2875	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0xBA0000
- stack 0: 0xFFFF
2876	 C3	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2877	 C4	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x1
2878	 C6	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2879	 C7	PUSH2	0040	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x40
2880	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5B0
2881	 CB	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2882	 CD	ADD		 	 
- stack 0: 0x5B4
2883	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2884	 CF	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0xD4012001700001018F000201A9FFE40086000F0156000000A0000000BA0000
2885	 D0	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0xD4012001700001018F000201A9FFE40086000F0156000000A0000000BA0000
- stack 0: 0xF0
2886	 D2	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0xD4
2887	 D3	JUMP		 	 
- stack 0: 0x5B4
2888	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x5B4
2889	 D5	PUSH2	0020	 	 
- stack 1: 0x5B4
- stack 0: 0x20
2890	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5B4
- stack 0: 0x0
2891	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2892	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B4
- stack 0: 0x0
2893	 DF	PUSH2	0040	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x40
2894	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x0
2895	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2896	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x0
2897	 E9	SUB		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2898	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0xF2
2899	 ED	JUMPI		 	 
- stack 0: 0x5B4
2900	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x5B4
- stack 0: 0x10C
2901	 F1	JUMP		 	 
- stack 0: 0x5B4
2902	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x5B4
2903	 10D	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2904	 10F	ADD		 	 
- stack 0: 0x5B8
2905	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2906	 111	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1700001018F000201A9FFE40086000F0156000000A0000000BA000000D40100
2907	 112	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x1700001018F000201A9FFE40086000F0156000000A0000000BA000000D40100
- stack 0: 0xF0
2908	 114	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x170
2909	 115	JUMP		 	 
- stack 0: 0x5B8
2910	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B8
2911	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2912	 172	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1700001018F000201A9FFE40086000F0156000000A0000000BA000000D40100
2913	 173	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x1700001018F000201A9FFE40086000F0156000000A0000000BA000000D40100
- stack 0: 0xE0
2914	 175	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1700001
2915	 176	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x1700001
- stack 0: 0xFFFF
2916	 179	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x1
2917	 17A	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0x1
2918	 17C	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x1
2919	 17D	PUSH2	0080	 	 
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0x80
2920	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B8
- stack 1: 0x1
- stack 0: 0x1
2921	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B8
- stack 0: 0x2
2922	 182	PUSH2	0080	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0x80
2923	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B8
2924	 186	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2925	 188	ADD		 	 
- stack 0: 0x5BC
2926	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2927	 18A	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x18F000201A9FFE40086000F0156000000A0000000BA000000D4010001700001
2928	 18B	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x18F000201A9FFE40086000F0156000000A0000000BA000000D4010001700001
- stack 0: 0xF0
2929	 18D	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x18F
2930	 18E	JUMP		 	 
- stack 0: 0x5BC
2931	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5BC
2932	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2933	 191	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x18F000201A9FFE40086000F0156000000A0000000BA000000D4010001700001
2934	 192	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x18F000201A9FFE40086000F0156000000A0000000BA000000D4010001700001
- stack 0: 0xE0
2935	 194	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x18F0002
2936	 195	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x18F0002
- stack 0: 0xFFFF
2937	 198	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x2
2938	 199	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0x1
2939	 19B	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x2
2940	 19C	PUSH2	00A0	 	 
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0xA0
2941	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x5BC
2942	 1A0	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2943	 1A2	ADD		 	 
- stack 0: 0x5C0
2944	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2945	 1A4	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x1A9FFE40086000F0156000000A0000000BA000000D4010001700001018F0002
2946	 1A5	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x1A9FFE40086000F0156000000A0000000BA000000D4010001700001018F0002
- stack 0: 0xF0
2947	 1A7	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x1A9
2948	 1A8	JUMP		 	 
- stack 0: 0x5C0
2949	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5C0
2950	 1AA	PUSH2	0080	 	 
- stack 1: 0x5C0
- stack 0: 0x80
2951	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x5C0
- stack 0: 0x2
2952	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2953	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C0
- stack 0: 0x2
2954	 1B4	PUSH2	00A0	 	 
- stack 2: 0x5C0
- stack 1: 0x2
- stack 0: 0xA0
2955	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x5C0
- stack 1: 0x2
- stack 0: 0x2
2956	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5C0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2957	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5C0
- stack 1: 0x2
- stack 0: 0x2
2958	 1BE	SUB		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2959	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x1C7
2960	 1C2	JUMPI		 	 
- stack 0: 0x5C0
2961	 1C3	PUSH2	01E1	 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 1: 0x5C0
- stack 0: 0x1E1
2962	 1C6	JUMP		 	 
- stack 0: 0x5C0
2963	 1E1	JUMPDEST		 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x5C0
2964	 1E2	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2965	 1E4	ADD		 	 
- stack 0: 0x5C4
2966	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2967	 1E6	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x86000F0156000000A0000000BA000000D4010001700001018F000201A9FFEC
2968	 1E7	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x86000F0156000000A0000000BA000000D4010001700001018F000201A9FFEC
- stack 0: 0xF0
2969	 1E9	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x86
2970	 1EA	JUMP		 	 
- stack 0: 0x5C4
2971	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5C4
2972	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2973	 88	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x86000F0156000000A0000000BA000000D4010001700001018F000201A9FFEC
2974	 89	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x86000F0156000000A0000000BA000000D4010001700001018F000201A9FFEC
- stack 0: 0xE0
2975	 8B	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x86000F
2976	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x86000F
- stack 0: 0xFFFF
2977	 8F	AND		 	 
- stack 1: 0x5C4
- stack 0: 0xF
2978	 90	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0xF
- stack 0: 0x1
2979	 92	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0xF
2980	 93	PUSH2	0380	 	 
- stack 2: 0x5C4
- stack 1: 0xF
- stack 0: 0x380
2981	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x5C4
2982	 97	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2983	 99	ADD		 	 
- stack 0: 0x5C8
2984	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2985	 9B	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x156000000A0000000BA000000D4010001700001018F000201A9FFEC00860010
2986	 9C	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x156000000A0000000BA000000D4010001700001018F000201A9FFEC00860010
- stack 0: 0xF0
2987	 9E	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x156
2988	 9F	JUMP		 	 
- stack 0: 0x5C8
2989	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5C8
2990	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2991	 158	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x156000000A0000000BA000000D4010001700001018F000201A9FFEC00860010
2992	 159	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x156000000A0000000BA000000D4010001700001018F000201A9FFEC00860010
- stack 0: 0xE0
2993	 15B	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x1560000
2994	 15C	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x1560000
- stack 0: 0xFFFF
2995	 15F	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
2996	 160	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x1
2997	 162	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
2998	 163	PUSH2	0080	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x80
2999	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C8
3000	 167	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
3001	 169	ADD		 	 
- stack 0: 0x5CC
3002	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
3003	 16B	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xA0000000BA000000D4010001700001018F000201A9FFEC0086001001560000
3004	 16C	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xA0000000BA000000D4010001700001018F000201A9FFEC0086001001560000
- stack 0: 0xF0
3005	 16E	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xA0
3006	 16F	JUMP		 	 
- stack 0: 0x5CC
3007	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5CC
3008	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
3009	 A2	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xA0000000BA000000D4010001700001018F000201A9FFEC0086001001560000
3010	 A3	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0xA0000000BA000000D4010001700001018F000201A9FFEC0086001001560000
- stack 0: 0xE0
3011	 A5	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xA00000
3012	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0xA00000
- stack 0: 0xFFFF
3013	 A9	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x0
3014	 AA	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0x1
3015	 AC	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x0
3016	 AD	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0x20
3017	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5CC
3018	 B1	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
3019	 B3	ADD		 	 
- stack 0: 0x5D0
3020	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
3021	 B5	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xBA000000D4010001700001018F000201A9FFEC008600100156000000A00000
3022	 B6	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xBA000000D4010001700001018F000201A9FFEC008600100156000000A00000
- stack 0: 0xF0
3023	 B8	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xBA
3024	 B9	JUMP		 	 
- stack 0: 0x5D0
3025	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x5D0
3026	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
3027	 BC	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xBA000000D4010001700001018F000201A9FFEC008600100156000000A00000
3028	 BD	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0xBA000000D4010001700001018F000201A9FFEC008600100156000000A00000
- stack 0: 0xE0
3029	 BF	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xBA0000
3030	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0xBA0000
- stack 0: 0xFFFF
3031	 C3	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
3032	 C4	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x1
3033	 C6	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
3034	 C7	PUSH2	0040	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x40
3035	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5D0
3036	 CB	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
3037	 CD	ADD		 	 
- stack 0: 0x5D4
3038	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3039	 CF	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xD4010001700001018F000201A9FFEC008600100156000000A0000000BA0000
3040	 D0	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0xD4010001700001018F000201A9FFEC008600100156000000A0000000BA0000
- stack 0: 0xF0
3041	 D2	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xD4
3042	 D3	JUMP		 	 
- stack 0: 0x5D4
3043	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x5D4
3044	 D5	PUSH2	0020	 	 
- stack 1: 0x5D4
- stack 0: 0x20
3045	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5D4
- stack 0: 0x0
3046	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3047	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x0
3048	 DF	PUSH2	0040	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x40
3049	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x0
3050	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3051	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x0
3052	 E9	SUB		 	 
- stack 1: 0x5D4
- stack 0: 0x0
3053	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0xF2
3054	 ED	JUMPI		 	 
- stack 0: 0x5D4
3055	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x5D4
- stack 0: 0x10C
3056	 F1	JUMP		 	 
- stack 0: 0x5D4
3057	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x5D4
3058	 10D	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3059	 10F	ADD		 	 
- stack 0: 0x5D8
3060	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3061	 111	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x1700001018F000201A9FFEC008600100156000000A0000000BA000001EB0000
3062	 112	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x1700001018F000201A9FFEC008600100156000000A0000000BA000001EB0000
- stack 0: 0xF0
3063	 114	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x170
3064	 115	JUMP		 	 
- stack 0: 0x5D8
3065	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D8
3066	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
3067	 172	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x1700001018F000201A9FFEC008600100156000000A0000000BA000001EB0000
3068	 173	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x1700001018F000201A9FFEC008600100156000000A0000000BA000001EB0000
- stack 0: 0xE0
3069	 175	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x1700001
3070	 176	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x1700001
- stack 0: 0xFFFF
3071	 179	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x1
3072	 17A	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x1
3073	 17C	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x1
3074	 17D	PUSH2	0080	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x80
3075	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x0
3076	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D8
- stack 0: 0x1
3077	 182	PUSH2	0080	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x80
3078	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D8
3079	 186	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3080	 188	ADD		 	 
- stack 0: 0x5DC
3081	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3082	 18A	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x18F000201A9FFEC008600100156000000A0000000BA000001EB000000D400DC
3083	 18B	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x18F000201A9FFEC008600100156000000A0000000BA000001EB000000D400DC
- stack 0: 0xF0
3084	 18D	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x18F
3085	 18E	JUMP		 	 
- stack 0: 0x5DC
3086	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5DC
3087	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
3088	 191	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x18F000201A9FFEC008600100156000000A0000000BA000001EB000000D400DC
3089	 192	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x18F000201A9FFEC008600100156000000A0000000BA000001EB000000D400DC
- stack 0: 0xE0
3090	 194	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x18F0002
3091	 195	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x18F0002
- stack 0: 0xFFFF
3092	 198	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x2
3093	 199	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0x1
3094	 19B	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x2
3095	 19C	PUSH2	00A0	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0xA0
3096	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x5DC
3097	 1A0	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
3098	 1A2	ADD		 	 
- stack 0: 0x5E0
3099	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
3100	 1A4	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x1A9FFEC008600100156000000A0000000BA000001EB000000D400DC01700001
3101	 1A5	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x1A9FFEC008600100156000000A0000000BA000001EB000000D400DC01700001
- stack 0: 0xF0
3102	 1A7	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x1A9
3103	 1A8	JUMP		 	 
- stack 0: 0x5E0
3104	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5E0
3105	 1AA	PUSH2	0080	 	 
- stack 1: 0x5E0
- stack 0: 0x80
3106	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E0
- stack 0: 0x1
3107	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3108	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E0
- stack 0: 0x1
3109	 1B4	PUSH2	00A0	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0xA0
3110	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x2
3111	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3112	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x2
3113	 1BE	SUB		 	 
- stack 1: 0x5E0
- stack 0: 0x1
3114	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1C7
3115	 1C2	JUMPI		 	 
- stack 0: 0x5E0
3116	 1C7	JUMPDEST		 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x5E0
3117	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
3118	 1C9	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x1A9FFEC008600100156000000A0000000BA000001EB000000D400DC01700001
3119	 1CA	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x1A9FFEC008600100156000000A0000000BA000001EB000000D400DC01700001
- stack 0: 0xE0
3120	 1CC	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x1A9FFEC
3121	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x1A9FFEC
- stack 0: 0xFFFF
3122	 1D0	AND		 	 
- stack 1: 0x5E0
- stack 0: 0xFFEC
3123	 1D1	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0xFFEC
- stack 0: 0x1
3124	 1D3	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
3125	 1D4	ADD		 	 
- stack 0: 0x5CC
3126	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5CC
- stack 0: 0xFFFFFFFF
3127	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5CC
3128	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
3129	 1DC	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xA0000000BA000000D4010001700001018F000201A9FFEC0086001001560000
3130	 1DD	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xA0000000BA000000D4010001700001018F000201A9FFEC0086001001560000
- stack 0: 0xF0
3131	 1DF	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xA0
3132	 1E0	JUMP		 	 
- stack 0: 0x5CC
3133	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5CC
3134	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
3135	 A2	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xA0000000BA000000D4010001700001018F000201A9FFEC0086001001560000
3136	 A3	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0xA0000000BA000000D4010001700001018F000201A9FFEC0086001001560000
- stack 0: 0xE0
3137	 A5	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xA00000
3138	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0xA00000
- stack 0: 0xFFFF
3139	 A9	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x0
3140	 AA	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0x1
3141	 AC	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x0
3142	 AD	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0x20
3143	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5CC
3144	 B1	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
3145	 B3	ADD		 	 
- stack 0: 0x5D0
3146	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
3147	 B5	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xBA000000D4010001700001018F000201A9FFEC008600100156000000A00000
3148	 B6	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xBA000000D4010001700001018F000201A9FFEC008600100156000000A00000
- stack 0: 0xF0
3149	 B8	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xBA
3150	 B9	JUMP		 	 
- stack 0: 0x5D0
3151	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x5D0
3152	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
3153	 BC	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xBA000000D4010001700001018F000201A9FFEC008600100156000000A00000
3154	 BD	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0xBA000000D4010001700001018F000201A9FFEC008600100156000000A00000
- stack 0: 0xE0
3155	 BF	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xBA0000
3156	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0xBA0000
- stack 0: 0xFFFF
3157	 C3	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
3158	 C4	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x1
3159	 C6	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
3160	 C7	PUSH2	0040	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x40
3161	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5D0
3162	 CB	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
3163	 CD	ADD		 	 
- stack 0: 0x5D4
3164	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3165	 CF	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xD4010001700001018F000201A9FFEC008600100156000000A0000000BA0000
3166	 D0	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0xD4010001700001018F000201A9FFEC008600100156000000A0000000BA0000
- stack 0: 0xF0
3167	 D2	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xD4
3168	 D3	JUMP		 	 
- stack 0: 0x5D4
3169	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x5D4
3170	 D5	PUSH2	0020	 	 
- stack 1: 0x5D4
- stack 0: 0x20
3171	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5D4
- stack 0: 0x0
3172	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3173	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x0
3174	 DF	PUSH2	0040	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x40
3175	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x0
3176	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3177	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x0
3178	 E9	SUB		 	 
- stack 1: 0x5D4
- stack 0: 0x0
3179	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0xF2
3180	 ED	JUMPI		 	 
- stack 0: 0x5D4
3181	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x5D4
- stack 0: 0x10C
3182	 F1	JUMP		 	 
- stack 0: 0x5D4
3183	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x5D4
3184	 10D	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3185	 10F	ADD		 	 
- stack 0: 0x5D8
3186	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3187	 111	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x1700001018F000201A9FFEC008600100156000000A0000000BA000001EB0000
3188	 112	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x1700001018F000201A9FFEC008600100156000000A0000000BA000001EB0000
- stack 0: 0xF0
3189	 114	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x170
3190	 115	JUMP		 	 
- stack 0: 0x5D8
3191	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D8
3192	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
3193	 172	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x1700001018F000201A9FFEC008600100156000000A0000000BA000001EB0000
3194	 173	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x1700001018F000201A9FFEC008600100156000000A0000000BA000001EB0000
- stack 0: 0xE0
3195	 175	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x1700001
3196	 176	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x1700001
- stack 0: 0xFFFF
3197	 179	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x1
3198	 17A	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x1
3199	 17C	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x1
3200	 17D	PUSH2	0080	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x80
3201	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x1
3202	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D8
- stack 0: 0x2
3203	 182	PUSH2	0080	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0x80
3204	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D8
3205	 186	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3206	 188	ADD		 	 
- stack 0: 0x5DC
3207	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3208	 18A	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x18F000201A9FFEC008600100156000000A0000000BA000001EB000000D400DC
3209	 18B	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x18F000201A9FFEC008600100156000000A0000000BA000001EB000000D400DC
- stack 0: 0xF0
3210	 18D	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x18F
3211	 18E	JUMP		 	 
- stack 0: 0x5DC
3212	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5DC
3213	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
3214	 191	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x18F000201A9FFEC008600100156000000A0000000BA000001EB000000D400DC
3215	 192	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x18F000201A9FFEC008600100156000000A0000000BA000001EB000000D400DC
- stack 0: 0xE0
3216	 194	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x18F0002
3217	 195	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x18F0002
- stack 0: 0xFFFF
3218	 198	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x2
3219	 199	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0x1
3220	 19B	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x2
3221	 19C	PUSH2	00A0	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0xA0
3222	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x5DC
3223	 1A0	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
3224	 1A2	ADD		 	 
- stack 0: 0x5E0
3225	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
3226	 1A4	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x1A9FFEC008600100156000000A0000000BA000001EB000000D400DC01700001
3227	 1A5	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x1A9FFEC008600100156000000A0000000BA000001EB000000D400DC01700001
- stack 0: 0xF0
3228	 1A7	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x1A9
3229	 1A8	JUMP		 	 
- stack 0: 0x5E0
3230	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5E0
3231	 1AA	PUSH2	0080	 	 
- stack 1: 0x5E0
- stack 0: 0x80
3232	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E0
- stack 0: 0x2
3233	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3234	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E0
- stack 0: 0x2
3235	 1B4	PUSH2	00A0	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0xA0
3236	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0x2
3237	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3238	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0x2
3239	 1BE	SUB		 	 
- stack 1: 0x5E0
- stack 0: 0x0
3240	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x5E0
- stack 1: 0x0
- stack 0: 0x1C7
3241	 1C2	JUMPI		 	 
- stack 0: 0x5E0
3242	 1C3	PUSH2	01E1	 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 1: 0x5E0
- stack 0: 0x1E1
3243	 1C6	JUMP		 	 
- stack 0: 0x5E0
3244	 1E1	JUMPDEST		 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x5E0
3245	 1E2	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
3246	 1E4	ADD		 	 
- stack 0: 0x5E4
3247	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3248	 1E6	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x8600100156000000A0000000BA000001EB000000D400DC01700001018F0002
3249	 1E7	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x8600100156000000A0000000BA000001EB000000D400DC01700001018F0002
- stack 0: 0xF0
3250	 1E9	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x86
3251	 1EA	JUMP		 	 
- stack 0: 0x5E4
3252	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5E4
3253	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
3254	 88	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x8600100156000000A0000000BA000001EB000000D400DC01700001018F0002
3255	 89	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x8600100156000000A0000000BA000001EB000000D400DC01700001018F0002
- stack 0: 0xE0
3256	 8B	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x860010
3257	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x860010
- stack 0: 0xFFFF
3258	 8F	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x10
3259	 90	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x10
- stack 0: 0x1
3260	 92	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x10
3261	 93	PUSH2	0380	 	 
- stack 2: 0x5E4
- stack 1: 0x10
- stack 0: 0x380
3262	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x5E4
3263	 97	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3264	 99	ADD		 	 
- stack 0: 0x5E8
3265	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3266	 9B	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x156000000A0000000BA000001EB000000D400DC01700001018F000201A9FFE8
3267	 9C	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x156000000A0000000BA000001EB000000D400DC01700001018F000201A9FFE8
- stack 0: 0xF0
3268	 9E	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x156
3269	 9F	JUMP		 	 
- stack 0: 0x5E8
3270	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5E8
3271	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
3272	 158	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x156000000A0000000BA000001EB000000D400DC01700001018F000201A9FFE8
3273	 159	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x156000000A0000000BA000001EB000000D400DC01700001018F000201A9FFE8
- stack 0: 0xE0
3274	 15B	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x1560000
3275	 15C	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x1560000
- stack 0: 0xFFFF
3276	 15F	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3277	 160	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x1
3278	 162	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3279	 163	PUSH2	0080	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x80
3280	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E8
3281	 167	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3282	 169	ADD		 	 
- stack 0: 0x5EC
3283	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3284	 16B	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xA0000000BA000001EB000000D400DC01700001018F000201A9FFE800860011
3285	 16C	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0xA0000000BA000001EB000000D400DC01700001018F000201A9FFE800860011
- stack 0: 0xF0
3286	 16E	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xA0
3287	 16F	JUMP		 	 
- stack 0: 0x5EC
3288	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5EC
3289	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
3290	 A2	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xA0000000BA000001EB000000D400DC01700001018F000201A9FFE800860011
3291	 A3	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0xA0000000BA000001EB000000D400DC01700001018F000201A9FFE800860011
- stack 0: 0xE0
3292	 A5	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xA00000
3293	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0xA00000
- stack 0: 0xFFFF
3294	 A9	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
3295	 AA	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x1
3296	 AC	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
3297	 AD	PUSH2	0020	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x20
3298	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5EC
3299	 B1	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3300	 B3	ADD		 	 
- stack 0: 0x5F0
3301	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3302	 B5	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xBA000001EB000000D400DC01700001018F000201A9FFE80086001101560000
3303	 B6	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0xBA000001EB000000D400DC01700001018F000201A9FFE80086001101560000
- stack 0: 0xF0
3304	 B8	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xBA
3305	 B9	JUMP		 	 
- stack 0: 0x5F0
3306	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x5F0
3307	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3308	 BC	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xBA000001EB000000D400DC01700001018F000201A9FFE80086001101560000
3309	 BD	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0xBA000001EB000000D400DC01700001018F000201A9FFE80086001101560000
- stack 0: 0xE0
3310	 BF	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xBA0000
3311	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0xBA0000
- stack 0: 0xFFFF
3312	 C3	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3313	 C4	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x1
3314	 C6	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3315	 C7	PUSH2	0040	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x40
3316	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F0
3317	 CB	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3318	 CD	ADD		 	 
- stack 0: 0x5F4
3319	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3320	 CF	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
3321	 D0	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
- stack 0: 0xF0
3322	 D2	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x1EB
3323	 D3	JUMP		 	 
- stack 0: 0x5F4
3324	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5F4
3325	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
3326	 1ED	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
3327	 1EE	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
- stack 0: 0xE0
3328	 1F0	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x1EB0000
3329	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
3330	 1F4	AND		 	 
- stack 1: 0x5F4
- stack 0: 0x0
3331	 1F5	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x1
3332	 1F7	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0x0
3333	 1F8	POP		 	 
- stack 0: 0x5F4
3334	 1F9	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3335	 1FB	ADD		 	 
- stack 0: 0x5F8
3336	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3337	 1FD	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xD400DC01700001018F000201A9FFE8008600110156000000A0000000BA0000
3338	 1FE	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0xD400DC01700001018F000201A9FFE8008600110156000000A0000000BA0000
- stack 0: 0xF0
3339	 200	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xD4
3340	 201	JUMP		 	 
- stack 0: 0x5F8
3341	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x5F8
3342	 D5	PUSH2	0020	 	 
- stack 1: 0x5F8
- stack 0: 0x20
3343	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5F8
- stack 0: 0x0
3344	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3345	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F8
- stack 0: 0x0
3346	 DF	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0x40
3347	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0x0
3348	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F8
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3349	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0x0
3350	 E9	SUB		 	 
- stack 1: 0x5F8
- stack 0: 0x0
3351	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0xF2
3352	 ED	JUMPI		 	 
- stack 0: 0x5F8
3353	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x5F8
- stack 0: 0x10C
3354	 F1	JUMP		 	 
- stack 0: 0x5F8
3355	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x5F8
3356	 10D	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3357	 10F	ADD		 	 
- stack 0: 0x5FC
3358	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3359	 111	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x1700001018F000201A9FFE8008600110156000000A0000000BA000001EB0000
3360	 112	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x1700001018F000201A9FFE8008600110156000000A0000000BA000001EB0000
- stack 0: 0xF0
3361	 114	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x170
3362	 115	JUMP		 	 
- stack 0: 0x5FC
3363	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5FC
3364	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3365	 172	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x1700001018F000201A9FFE8008600110156000000A0000000BA000001EB0000
3366	 173	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x1700001018F000201A9FFE8008600110156000000A0000000BA000001EB0000
- stack 0: 0xE0
3367	 175	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x1700001
3368	 176	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x1700001
- stack 0: 0xFFFF
3369	 179	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x1
3370	 17A	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x1
3371	 17C	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x1
3372	 17D	PUSH2	0080	 	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x80
3373	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x0
3374	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x5FC
- stack 0: 0x1
3375	 182	PUSH2	0080	 	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x80
3376	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x5FC
3377	 186	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3378	 188	ADD		 	 
- stack 0: 0x600
3379	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3380	 18A	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x18F000201A9FFE8008600110156000000A0000000BA000001EB000001EB0000
3381	 18B	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x18F000201A9FFE8008600110156000000A0000000BA000001EB000001EB0000
- stack 0: 0xF0
3382	 18D	SHR		 	 
- stack 1: 0x600
- stack 0: 0x18F
3383	 18E	JUMP		 	 
- stack 0: 0x600
3384	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x600
3385	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3386	 191	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x18F000201A9FFE8008600110156000000A0000000BA000001EB000001EB0000
3387	 192	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x18F000201A9FFE8008600110156000000A0000000BA000001EB000001EB0000
- stack 0: 0xE0
3388	 194	SHR		 	 
- stack 1: 0x600
- stack 0: 0x18F0002
3389	 195	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x18F0002
- stack 0: 0xFFFF
3390	 198	AND		 	 
- stack 1: 0x600
- stack 0: 0x2
3391	 199	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0x1
3392	 19B	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x2
3393	 19C	PUSH2	00A0	 	 
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0xA0
3394	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x600
3395	 1A0	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3396	 1A2	ADD		 	 
- stack 0: 0x604
3397	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3398	 1A4	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x1A9FFE8008600110156000000A0000000BA000001EB000001EB000000D400B4
3399	 1A5	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x1A9FFE8008600110156000000A0000000BA000001EB000001EB000000D400B4
- stack 0: 0xF0
3400	 1A7	SHR		 	 
- stack 1: 0x604
- stack 0: 0x1A9
3401	 1A8	JUMP		 	 
- stack 0: 0x604
3402	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x604
3403	 1AA	PUSH2	0080	 	 
- stack 1: 0x604
- stack 0: 0x80
3404	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x604
- stack 0: 0x1
3405	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3406	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0x1
3407	 1B4	PUSH2	00A0	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0xA0
3408	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x2
3409	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x604
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3410	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x2
3411	 1BE	SUB		 	 
- stack 1: 0x604
- stack 0: 0x1
3412	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x1C7
3413	 1C2	JUMPI		 	 
- stack 0: 0x604
3414	 1C7	JUMPDEST		 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x604
3415	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3416	 1C9	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x1A9FFE8008600110156000000A0000000BA000001EB000001EB000000D400B4
3417	 1CA	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x1A9FFE8008600110156000000A0000000BA000001EB000001EB000000D400B4
- stack 0: 0xE0
3418	 1CC	SHR		 	 
- stack 1: 0x604
- stack 0: 0x1A9FFE8
3419	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x1A9FFE8
- stack 0: 0xFFFF
3420	 1D0	AND		 	 
- stack 1: 0x604
- stack 0: 0xFFE8
3421	 1D1	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0xFFE8
- stack 0: 0x1
3422	 1D3	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
3423	 1D4	ADD		 	 
- stack 0: 0x5EC
3424	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5EC
- stack 0: 0xFFFFFFFF
3425	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5EC
3426	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3427	 1DC	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xA0000000BA000001EB000000D400DC01700001018F000201A9FFE800860011
3428	 1DD	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0xA0000000BA000001EB000000D400DC01700001018F000201A9FFE800860011
- stack 0: 0xF0
3429	 1DF	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xA0
3430	 1E0	JUMP		 	 
- stack 0: 0x5EC
3431	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5EC
3432	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
3433	 A2	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xA0000000BA000001EB000000D400DC01700001018F000201A9FFE800860011
3434	 A3	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0xA0000000BA000001EB000000D400DC01700001018F000201A9FFE800860011
- stack 0: 0xE0
3435	 A5	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xA00000
3436	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0xA00000
- stack 0: 0xFFFF
3437	 A9	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
3438	 AA	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x1
3439	 AC	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
3440	 AD	PUSH2	0020	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x20
3441	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x5EC
3442	 B1	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3443	 B3	ADD		 	 
- stack 0: 0x5F0
3444	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3445	 B5	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xBA000001EB000000D400DC01700001018F000201A9FFE80086001101560000
3446	 B6	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0xBA000001EB000000D400DC01700001018F000201A9FFE80086001101560000
- stack 0: 0xF0
3447	 B8	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xBA
3448	 B9	JUMP		 	 
- stack 0: 0x5F0
3449	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x5F0
3450	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3451	 BC	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xBA000001EB000000D400DC01700001018F000201A9FFE80086001101560000
3452	 BD	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0xBA000001EB000000D400DC01700001018F000201A9FFE80086001101560000
- stack 0: 0xE0
3453	 BF	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xBA0000
3454	 C0	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0xBA0000
- stack 0: 0xFFFF
3455	 C3	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3456	 C4	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x1
3457	 C6	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3458	 C7	PUSH2	0040	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x40
3459	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F0
3460	 CB	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3461	 CD	ADD		 	 
- stack 0: 0x5F4
3462	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3463	 CF	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
3464	 D0	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
- stack 0: 0xF0
3465	 D2	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x1EB
3466	 D3	JUMP		 	 
- stack 0: 0x5F4
3467	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5F4
3468	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
3469	 1ED	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
3470	 1EE	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x1EB000000D400DC01700001018F000201A9FFE8008600110156000000A00000
- stack 0: 0xE0
3471	 1F0	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x1EB0000
3472	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
3473	 1F4	AND		 	 
- stack 1: 0x5F4
- stack 0: 0x0
3474	 1F5	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x1
3475	 1F7	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0x0
3476	 1F8	POP		 	 
- stack 0: 0x5F4
3477	 1F9	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3478	 1FB	ADD		 	 
- stack 0: 0x5F8
3479	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3480	 1FD	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xD400DC01700001018F000201A9FFE8008600110156000000A0000000BA0000
3481	 1FE	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0xD400DC01700001018F000201A9FFE8008600110156000000A0000000BA0000
- stack 0: 0xF0
3482	 200	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xD4
3483	 201	JUMP		 	 
- stack 0: 0x5F8
3484	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x5F8
3485	 D5	PUSH2	0020	 	 
- stack 1: 0x5F8
- stack 0: 0x20
3486	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5F8
- stack 0: 0x0
3487	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3488	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F8
- stack 0: 0x0
3489	 DF	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0x40
3490	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0x0
3491	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F8
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3492	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0x0
3493	 E9	SUB		 	 
- stack 1: 0x5F8
- stack 0: 0x0
3494	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0xF2
3495	 ED	JUMPI		 	 
- stack 0: 0x5F8
3496	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x5F8
- stack 0: 0x10C
3497	 F1	JUMP		 	 
- stack 0: 0x5F8
3498	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x5F8
3499	 10D	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3500	 10F	ADD		 	 
- stack 0: 0x5FC
3501	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3502	 111	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x1700001018F000201A9FFE8008600110156000000A0000000BA000001EB0000
3503	 112	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x1700001018F000201A9FFE8008600110156000000A0000000BA000001EB0000
- stack 0: 0xF0
3504	 114	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x170
3505	 115	JUMP		 	 
- stack 0: 0x5FC
3506	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5FC
3507	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3508	 172	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x1700001018F000201A9FFE8008600110156000000A0000000BA000001EB0000
3509	 173	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x1700001018F000201A9FFE8008600110156000000A0000000BA000001EB0000
- stack 0: 0xE0
3510	 175	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x1700001
3511	 176	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x1700001
- stack 0: 0xFFFF
3512	 179	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x1
3513	 17A	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x1
3514	 17C	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x1
3515	 17D	PUSH2	0080	 	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x80
3516	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x1
3517	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x5FC
- stack 0: 0x2
3518	 182	PUSH2	0080	 	 
- stack 2: 0x5FC
- stack 1: 0x2
- stack 0: 0x80
3519	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x5FC
3520	 186	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3521	 188	ADD		 	 
- stack 0: 0x600
3522	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3523	 18A	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x18F000201A9FFE8008600110156000000A0000000BA000001EB000001EB0000
3524	 18B	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x18F000201A9FFE8008600110156000000A0000000BA000001EB000001EB0000
- stack 0: 0xF0
3525	 18D	SHR		 	 
- stack 1: 0x600
- stack 0: 0x18F
3526	 18E	JUMP		 	 
- stack 0: 0x600
3527	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x600
3528	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3529	 191	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x18F000201A9FFE8008600110156000000A0000000BA000001EB000001EB0000
3530	 192	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x18F000201A9FFE8008600110156000000A0000000BA000001EB000001EB0000
- stack 0: 0xE0
3531	 194	SHR		 	 
- stack 1: 0x600
- stack 0: 0x18F0002
3532	 195	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x18F0002
- stack 0: 0xFFFF
3533	 198	AND		 	 
- stack 1: 0x600
- stack 0: 0x2
3534	 199	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0x1
3535	 19B	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x2
3536	 19C	PUSH2	00A0	 	 
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0xA0
3537	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x600
3538	 1A0	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3539	 1A2	ADD		 	 
- stack 0: 0x604
3540	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3541	 1A4	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x1A9FFE8008600110156000000A0000000BA000001EB000001EB000000D400B4
3542	 1A5	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x1A9FFE8008600110156000000A0000000BA000001EB000001EB000000D400B4
- stack 0: 0xF0
3543	 1A7	SHR		 	 
- stack 1: 0x604
- stack 0: 0x1A9
3544	 1A8	JUMP		 	 
- stack 0: 0x604
3545	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x604
3546	 1AA	PUSH2	0080	 	 
- stack 1: 0x604
- stack 0: 0x80
3547	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x604
- stack 0: 0x2
3548	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3549	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0x2
3550	 1B4	PUSH2	00A0	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0xA0
3551	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x2
3552	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x604
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3553	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x2
3554	 1BE	SUB		 	 
- stack 1: 0x604
- stack 0: 0x0
3555	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x1C7
3556	 1C2	JUMPI		 	 
- stack 0: 0x604
3557	 1C3	PUSH2	01E1	 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 1: 0x604
- stack 0: 0x1E1
3558	 1C6	JUMP		 	 
- stack 0: 0x604
3559	 1E1	JUMPDEST		 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x604
3560	 1E2	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3561	 1E4	ADD		 	 
- stack 0: 0x608
3562	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3563	 1E6	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x8600110156000000A0000000BA000001EB000001EB000000D400B401700001
3564	 1E7	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x8600110156000000A0000000BA000001EB000001EB000000D400B401700001
- stack 0: 0xF0
3565	 1E9	SHR		 	 
- stack 1: 0x608
- stack 0: 0x86
3566	 1EA	JUMP		 	 
- stack 0: 0x608
3567	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x608
3568	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3569	 88	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x8600110156000000A0000000BA000001EB000001EB000000D400B401700001
3570	 89	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x8600110156000000A0000000BA000001EB000001EB000000D400B401700001
- stack 0: 0xE0
3571	 8B	SHR		 	 
- stack 1: 0x608
- stack 0: 0x860011
3572	 8C	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x860011
- stack 0: 0xFFFF
3573	 8F	AND		 	 
- stack 1: 0x608
- stack 0: 0x11
3574	 90	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x11
- stack 0: 0x1
3575	 92	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x11
3576	 93	PUSH2	0380	 	 
- stack 2: 0x608
- stack 1: 0x11
- stack 0: 0x380
3577	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x608
3578	 97	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3579	 99	ADD		 	 
- stack 0: 0x60C
3580	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3581	 9B	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x156000000A0000000BA000001EB000001EB000000D400B401700001018F0002
3582	 9C	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x156000000A0000000BA000001EB000001EB000000D400B401700001018F0002
- stack 0: 0xF0
3583	 9E	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x156
3584	 9F	JUMP		 	 
- stack 0: 0x60C
3585	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x60C
3586	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
3587	 158	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x156000000A0000000BA000001EB000001EB000000D400B401700001018F0002
3588	 159	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x156000000A0000000BA000001EB000001EB000000D400B401700001018F0002
- stack 0: 0xE0
3589	 15B	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x1560000
3590	 15C	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x1560000
- stack 0: 0xFFFF
3591	 15F	AND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3592	 160	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x1
3593	 162	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3594	 163	PUSH2	0080	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x80
3595	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x60C
3596	 167	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3597	 169	ADD		 	 
- stack 0: 0x610
3598	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3599	 16B	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xA0000000BA000001EB000001EB000000D400B401700001018F000201A9FFE4
3600	 16C	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0xA0000000BA000001EB000001EB000000D400B401700001018F000201A9FFE4
- stack 0: 0xF0
3601	 16E	SHR		 	 
- stack 1: 0x610
- stack 0: 0xA0
3602	 16F	JUMP		 	 
- stack 0: 0x610
3603	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x610
3604	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3605	 A2	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xA0000000BA000001EB000001EB000000D400B401700001018F000201A9FFE4
3606	 A3	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0xA0000000BA000001EB000001EB000000D400B401700001018F000201A9FFE4
- stack 0: 0xE0
3607	 A5	SHR		 	 
- stack 1: 0x610
- stack 0: 0xA00000
3608	 A6	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0xA00000
- stack 0: 0xFFFF
3609	 A9	AND		 	 
- stack 1: 0x610
- stack 0: 0x0
3610	 AA	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x1
3611	 AC	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x0
3612	 AD	PUSH2	0020	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x20
3613	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x610
3614	 B1	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3615	 B3	ADD		 	 
- stack 0: 0x614
3616	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3617	 B5	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0xBA000001EB000001EB000000D400B401700001018F000201A9FFE400860012
3618	 B6	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0xBA000001EB000001EB000000D400B401700001018F000201A9FFE400860012
- stack 0: 0xF0
3619	 B8	SHR		 	 
- stack 1: 0x614
- stack 0: 0xBA
3620	 B9	JUMP		 	 
- stack 0: 0x614
3621	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x614
3622	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3623	 BC	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0xBA000001EB000001EB000000D400B401700001018F000201A9FFE400860012
3624	 BD	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0xBA000001EB000001EB000000D400B401700001018F000201A9FFE400860012
- stack 0: 0xE0
3625	 BF	SHR		 	 
- stack 1: 0x614
- stack 0: 0xBA0000
3626	 C0	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0xBA0000
- stack 0: 0xFFFF
3627	 C3	AND		 	 
- stack 1: 0x614
- stack 0: 0x0
3628	 C4	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x1
3629	 C6	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x0
3630	 C7	PUSH2	0040	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x40
3631	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x614
3632	 CB	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3633	 CD	ADD		 	 
- stack 0: 0x618
3634	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3635	 CF	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
3636	 D0	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
- stack 0: 0xF0
3637	 D2	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1EB
3638	 D3	JUMP		 	 
- stack 0: 0x618
3639	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x618
3640	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3641	 1ED	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
3642	 1EE	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
- stack 0: 0xE0
3643	 1F0	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1EB0000
3644	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
3645	 1F4	AND		 	 
- stack 1: 0x618
- stack 0: 0x0
3646	 1F5	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x1
3647	 1F7	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x0
3648	 1F8	POP		 	 
- stack 0: 0x618
3649	 1F9	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3650	 1FB	ADD		 	 
- stack 0: 0x61C
3651	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3652	 1FD	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
3653	 1FE	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
- stack 0: 0xF0
3654	 200	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x1EB
3655	 201	JUMP		 	 
- stack 0: 0x61C
3656	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x61C
3657	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3658	 1ED	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
3659	 1EE	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
- stack 0: 0xE0
3660	 1F0	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x1EB0000
3661	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
3662	 1F4	AND		 	 
- stack 1: 0x61C
- stack 0: 0x0
3663	 1F5	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0x1
3664	 1F7	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x0
3665	 1F8	POP		 	 
- stack 0: 0x61C
3666	 1F9	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3667	 1FB	ADD		 	 
- stack 0: 0x620
3668	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3669	 1FD	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0xD400B401700001018F000201A9FFE4008600120156000000A0000001EB0000
3670	 1FE	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0xD400B401700001018F000201A9FFE4008600120156000000A0000001EB0000
- stack 0: 0xF0
3671	 200	SHR		 	 
- stack 1: 0x620
- stack 0: 0xD4
3672	 201	JUMP		 	 
- stack 0: 0x620
3673	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x620
3674	 D5	PUSH2	0020	 	 
- stack 1: 0x620
- stack 0: 0x20
3675	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x620
- stack 0: 0x0
3676	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3677	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x620
- stack 0: 0x0
3678	 DF	PUSH2	0040	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x40
3679	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x0
3680	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x620
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3681	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x0
3682	 E9	SUB		 	 
- stack 1: 0x620
- stack 0: 0x0
3683	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0xF2
3684	 ED	JUMPI		 	 
- stack 0: 0x620
3685	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x620
- stack 0: 0x10C
3686	 F1	JUMP		 	 
- stack 0: 0x620
3687	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x620
3688	 10D	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3689	 10F	ADD		 	 
- stack 0: 0x624
3690	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3691	 111	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BA0000
3692	 112	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BA0000
- stack 0: 0xF0
3693	 114	SHR		 	 
- stack 1: 0x624
- stack 0: 0x170
3694	 115	JUMP		 	 
- stack 0: 0x624
3695	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x624
3696	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3697	 172	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BA0000
3698	 173	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BA0000
- stack 0: 0xE0
3699	 175	SHR		 	 
- stack 1: 0x624
- stack 0: 0x1700001
3700	 176	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x1700001
- stack 0: 0xFFFF
3701	 179	AND		 	 
- stack 1: 0x624
- stack 0: 0x1
3702	 17A	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0x1
3703	 17C	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x1
3704	 17D	PUSH2	0080	 	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0x80
3705	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0x0
3706	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x624
- stack 0: 0x1
3707	 182	PUSH2	0080	 	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0x80
3708	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x624
3709	 186	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3710	 188	ADD		 	 
- stack 0: 0x628
3711	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3712	 18A	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x18F000201A9FFE4008600120156000000A0000001EB000000BA000000D40090
3713	 18B	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x18F000201A9FFE4008600120156000000A0000001EB000000BA000000D40090
- stack 0: 0xF0
3714	 18D	SHR		 	 
- stack 1: 0x628
- stack 0: 0x18F
3715	 18E	JUMP		 	 
- stack 0: 0x628
3716	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x628
3717	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3718	 191	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x18F000201A9FFE4008600120156000000A0000001EB000000BA000000D40090
3719	 192	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x18F000201A9FFE4008600120156000000A0000001EB000000BA000000D40090
- stack 0: 0xE0
3720	 194	SHR		 	 
- stack 1: 0x628
- stack 0: 0x18F0002
3721	 195	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x18F0002
- stack 0: 0xFFFF
3722	 198	AND		 	 
- stack 1: 0x628
- stack 0: 0x2
3723	 199	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0x1
3724	 19B	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x2
3725	 19C	PUSH2	00A0	 	 
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0xA0
3726	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x628
3727	 1A0	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3728	 1A2	ADD		 	 
- stack 0: 0x62C
3729	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3730	 1A4	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x1A9FFE4008600120156000000A0000001EB000000BA000000D4009001700001
3731	 1A5	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x1A9FFE4008600120156000000A0000001EB000000BA000000D4009001700001
- stack 0: 0xF0
3732	 1A7	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x1A9
3733	 1A8	JUMP		 	 
- stack 0: 0x62C
3734	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x62C
3735	 1AA	PUSH2	0080	 	 
- stack 1: 0x62C
- stack 0: 0x80
3736	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x62C
- stack 0: 0x1
3737	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x62C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3738	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x62C
- stack 0: 0x1
3739	 1B4	PUSH2	00A0	 	 
- stack 2: 0x62C
- stack 1: 0x1
- stack 0: 0xA0
3740	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x62C
- stack 1: 0x1
- stack 0: 0x2
3741	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x62C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3742	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x62C
- stack 1: 0x1
- stack 0: 0x2
3743	 1BE	SUB		 	 
- stack 1: 0x62C
- stack 0: 0x1
3744	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x62C
- stack 1: 0x1
- stack 0: 0x1C7
3745	 1C2	JUMPI		 	 
- stack 0: 0x62C
3746	 1C7	JUMPDEST		 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x62C
3747	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3748	 1C9	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x1A9FFE4008600120156000000A0000001EB000000BA000000D4009001700001
3749	 1CA	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x1A9FFE4008600120156000000A0000001EB000000BA000000D4009001700001
- stack 0: 0xE0
3750	 1CC	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x1A9FFE4
3751	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x1A9FFE4
- stack 0: 0xFFFF
3752	 1D0	AND		 	 
- stack 1: 0x62C
- stack 0: 0xFFE4
3753	 1D1	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0xFFE4
- stack 0: 0x1
3754	 1D3	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
3755	 1D4	ADD		 	 
- stack 0: 0x610
3756	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x610
- stack 0: 0xFFFFFFFF
3757	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x610
3758	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3759	 1DC	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xA0000000BA000001EB000001EB000000D400B401700001018F000201A9FFE4
3760	 1DD	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0xA0000000BA000001EB000001EB000000D400B401700001018F000201A9FFE4
- stack 0: 0xF0
3761	 1DF	SHR		 	 
- stack 1: 0x610
- stack 0: 0xA0
3762	 1E0	JUMP		 	 
- stack 0: 0x610
3763	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x610
3764	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3765	 A2	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xA0000000BA000001EB000001EB000000D400B401700001018F000201A9FFE4
3766	 A3	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0xA0000000BA000001EB000001EB000000D400B401700001018F000201A9FFE4
- stack 0: 0xE0
3767	 A5	SHR		 	 
- stack 1: 0x610
- stack 0: 0xA00000
3768	 A6	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0xA00000
- stack 0: 0xFFFF
3769	 A9	AND		 	 
- stack 1: 0x610
- stack 0: 0x0
3770	 AA	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x1
3771	 AC	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x0
3772	 AD	PUSH2	0020	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x20
3773	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x610
3774	 B1	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3775	 B3	ADD		 	 
- stack 0: 0x614
3776	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3777	 B5	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0xBA000001EB000001EB000000D400B401700001018F000201A9FFE400860012
3778	 B6	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0xBA000001EB000001EB000000D400B401700001018F000201A9FFE400860012
- stack 0: 0xF0
3779	 B8	SHR		 	 
- stack 1: 0x614
- stack 0: 0xBA
3780	 B9	JUMP		 	 
- stack 0: 0x614
3781	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x614
3782	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3783	 BC	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0xBA000001EB000001EB000000D400B401700001018F000201A9FFE400860012
3784	 BD	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0xBA000001EB000001EB000000D400B401700001018F000201A9FFE400860012
- stack 0: 0xE0
3785	 BF	SHR		 	 
- stack 1: 0x614
- stack 0: 0xBA0000
3786	 C0	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0xBA0000
- stack 0: 0xFFFF
3787	 C3	AND		 	 
- stack 1: 0x614
- stack 0: 0x0
3788	 C4	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x1
3789	 C6	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x0
3790	 C7	PUSH2	0040	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x40
3791	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x614
3792	 CB	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3793	 CD	ADD		 	 
- stack 0: 0x618
3794	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3795	 CF	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
3796	 D0	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
- stack 0: 0xF0
3797	 D2	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1EB
3798	 D3	JUMP		 	 
- stack 0: 0x618
3799	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x618
3800	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3801	 1ED	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
3802	 1EE	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x1EB000001EB000000D400B401700001018F000201A9FFE40086001201560000
- stack 0: 0xE0
3803	 1F0	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1EB0000
3804	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
3805	 1F4	AND		 	 
- stack 1: 0x618
- stack 0: 0x0
3806	 1F5	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x1
3807	 1F7	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x0
3808	 1F8	POP		 	 
- stack 0: 0x618
3809	 1F9	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3810	 1FB	ADD		 	 
- stack 0: 0x61C
3811	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3812	 1FD	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
3813	 1FE	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
- stack 0: 0xF0
3814	 200	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x1EB
3815	 201	JUMP		 	 
- stack 0: 0x61C
3816	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x61C
3817	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3818	 1ED	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
3819	 1EE	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x1EB000000D400B401700001018F000201A9FFE4008600120156000000A00000
- stack 0: 0xE0
3820	 1F0	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x1EB0000
3821	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
3822	 1F4	AND		 	 
- stack 1: 0x61C
- stack 0: 0x0
3823	 1F5	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0x1
3824	 1F7	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x0
3825	 1F8	POP		 	 
- stack 0: 0x61C
3826	 1F9	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3827	 1FB	ADD		 	 
- stack 0: 0x620
3828	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3829	 1FD	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0xD400B401700001018F000201A9FFE4008600120156000000A0000001EB0000
3830	 1FE	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0xD400B401700001018F000201A9FFE4008600120156000000A0000001EB0000
- stack 0: 0xF0
3831	 200	SHR		 	 
- stack 1: 0x620
- stack 0: 0xD4
3832	 201	JUMP		 	 
- stack 0: 0x620
3833	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x620
3834	 D5	PUSH2	0020	 	 
- stack 1: 0x620
- stack 0: 0x20
3835	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x620
- stack 0: 0x0
3836	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3837	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x620
- stack 0: 0x0
3838	 DF	PUSH2	0040	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x40
3839	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x0
3840	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x620
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3841	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x0
3842	 E9	SUB		 	 
- stack 1: 0x620
- stack 0: 0x0
3843	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0xF2
3844	 ED	JUMPI		 	 
- stack 0: 0x620
3845	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x620
- stack 0: 0x10C
3846	 F1	JUMP		 	 
- stack 0: 0x620
3847	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x620
3848	 10D	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3849	 10F	ADD		 	 
- stack 0: 0x624
3850	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3851	 111	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BA0000
3852	 112	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BA0000
- stack 0: 0xF0
3853	 114	SHR		 	 
- stack 1: 0x624
- stack 0: 0x170
3854	 115	JUMP		 	 
- stack 0: 0x624
3855	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x624
3856	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3857	 172	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BA0000
3858	 173	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x1700001018F000201A9FFE4008600120156000000A0000001EB000000BA0000
- stack 0: 0xE0
3859	 175	SHR		 	 
- stack 1: 0x624
- stack 0: 0x1700001
3860	 176	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x1700001
- stack 0: 0xFFFF
3861	 179	AND		 	 
- stack 1: 0x624
- stack 0: 0x1
3862	 17A	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0x1
3863	 17C	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x1
3864	 17D	PUSH2	0080	 	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0x80
3865	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0x1
3866	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x624
- stack 0: 0x2
3867	 182	PUSH2	0080	 	 
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0x80
3868	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x624
3869	 186	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3870	 188	ADD		 	 
- stack 0: 0x628
3871	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3872	 18A	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x18F000201A9FFE4008600120156000000A0000001EB000000BA000000D40090
3873	 18B	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x18F000201A9FFE4008600120156000000A0000001EB000000BA000000D40090
- stack 0: 0xF0
3874	 18D	SHR		 	 
- stack 1: 0x628
- stack 0: 0x18F
3875	 18E	JUMP		 	 
- stack 0: 0x628
3876	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x628
3877	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3878	 191	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x18F000201A9FFE4008600120156000000A0000001EB000000BA000000D40090
3879	 192	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x18F000201A9FFE4008600120156000000A0000001EB000000BA000000D40090
- stack 0: 0xE0
3880	 194	SHR		 	 
- stack 1: 0x628
- stack 0: 0x18F0002
3881	 195	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x18F0002
- stack 0: 0xFFFF
3882	 198	AND		 	 
- stack 1: 0x628
- stack 0: 0x2
3883	 199	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0x1
3884	 19B	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x2
3885	 19C	PUSH2	00A0	 	 
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0xA0
3886	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x628
3887	 1A0	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3888	 1A2	ADD		 	 
- stack 0: 0x62C
3889	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3890	 1A4	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x1A9FFE4008600120156000000A0000001EB000000BA000000D4009001700001
3891	 1A5	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x1A9FFE4008600120156000000A0000001EB000000BA000000D4009001700001
- stack 0: 0xF0
3892	 1A7	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x1A9
3893	 1A8	JUMP		 	 
- stack 0: 0x62C
3894	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x62C
3895	 1AA	PUSH2	0080	 	 
- stack 1: 0x62C
- stack 0: 0x80
3896	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x62C
- stack 0: 0x2
3897	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3898	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x62C
- stack 0: 0x2
3899	 1B4	PUSH2	00A0	 	 
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0xA0
3900	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0x2
3901	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x62C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3902	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0x2
3903	 1BE	SUB		 	 
- stack 1: 0x62C
- stack 0: 0x0
3904	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x1C7
3905	 1C2	JUMPI		 	 
- stack 0: 0x62C
3906	 1C3	PUSH2	01E1	 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 1: 0x62C
- stack 0: 0x1E1
3907	 1C6	JUMP		 	 
- stack 0: 0x62C
3908	 1E1	JUMPDEST		 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x62C
3909	 1E2	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3910	 1E4	ADD		 	 
- stack 0: 0x630
3911	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3912	 1E6	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x8600120156000000A0000001EB000000BA000000D4009001700001018F0002
3913	 1E7	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x8600120156000000A0000001EB000000BA000000D4009001700001018F0002
- stack 0: 0xF0
3914	 1E9	SHR		 	 
- stack 1: 0x630
- stack 0: 0x86
3915	 1EA	JUMP		 	 
- stack 0: 0x630
3916	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x630
3917	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3918	 88	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x8600120156000000A0000001EB000000BA000000D4009001700001018F0002
3919	 89	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x8600120156000000A0000001EB000000BA000000D4009001700001018F0002
- stack 0: 0xE0
3920	 8B	SHR		 	 
- stack 1: 0x630
- stack 0: 0x860012
3921	 8C	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x860012
- stack 0: 0xFFFF
3922	 8F	AND		 	 
- stack 1: 0x630
- stack 0: 0x12
3923	 90	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x12
- stack 0: 0x1
3924	 92	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x12
3925	 93	PUSH2	0380	 	 
- stack 2: 0x630
- stack 1: 0x12
- stack 0: 0x380
3926	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x630
3927	 97	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3928	 99	ADD		 	 
- stack 0: 0x634
3929	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3930	 9B	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x156000000A0000001EB000000BA000000D4009001700001018F000201A9FFE8
3931	 9C	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x156000000A0000001EB000000BA000000D4009001700001018F000201A9FFE8
- stack 0: 0xF0
3932	 9E	SHR		 	 
- stack 1: 0x634
- stack 0: 0x156
3933	 9F	JUMP		 	 
- stack 0: 0x634
3934	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x634
3935	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3936	 158	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x156000000A0000001EB000000BA000000D4009001700001018F000201A9FFE8
3937	 159	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x156000000A0000001EB000000BA000000D4009001700001018F000201A9FFE8
- stack 0: 0xE0
3938	 15B	SHR		 	 
- stack 1: 0x634
- stack 0: 0x1560000
3939	 15C	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x1560000
- stack 0: 0xFFFF
3940	 15F	AND		 	 
- stack 1: 0x634
- stack 0: 0x0
3941	 160	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x1
3942	 162	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x0
3943	 163	PUSH2	0080	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x80
3944	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x634
3945	 167	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3946	 169	ADD		 	 
- stack 0: 0x638
3947	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3948	 16B	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xA0000001EB000000BA000000D4009001700001018F000201A9FFE800860013
3949	 16C	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0xA0000001EB000000BA000000D4009001700001018F000201A9FFE800860013
- stack 0: 0xF0
3950	 16E	SHR		 	 
- stack 1: 0x638
- stack 0: 0xA0
3951	 16F	JUMP		 	 
- stack 0: 0x638
3952	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x638
3953	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3954	 A2	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xA0000001EB000000BA000000D4009001700001018F000201A9FFE800860013
3955	 A3	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0xA0000001EB000000BA000000D4009001700001018F000201A9FFE800860013
- stack 0: 0xE0
3956	 A5	SHR		 	 
- stack 1: 0x638
- stack 0: 0xA00000
3957	 A6	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0xA00000
- stack 0: 0xFFFF
3958	 A9	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
3959	 AA	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
3960	 AC	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
3961	 AD	PUSH2	0020	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x20
3962	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x638
3963	 B1	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3964	 B3	ADD		 	 
- stack 0: 0x63C
3965	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3966	 B5	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x1EB000000BA000000D4009001700001018F000201A9FFE80086001301560000
3967	 B6	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x1EB000000BA000000D4009001700001018F000201A9FFE80086001301560000
- stack 0: 0xF0
3968	 B8	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x1EB
3969	 B9	JUMP		 	 
- stack 0: 0x63C
3970	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x63C
3971	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3972	 1ED	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x1EB000000BA000000D4009001700001018F000201A9FFE80086001301560000
3973	 1EE	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x1EB000000BA000000D4009001700001018F000201A9FFE80086001301560000
- stack 0: 0xE0
3974	 1F0	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x1EB0000
3975	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
3976	 1F4	AND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3977	 1F5	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x1
3978	 1F7	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3979	 1F8	POP		 	 
- stack 0: 0x63C
3980	 1F9	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3981	 1FB	ADD		 	 
- stack 0: 0x640
3982	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3983	 1FD	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xBA000000D4009001700001018F000201A9FFE8008600130156000000A00000
3984	 1FE	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0xBA000000D4009001700001018F000201A9FFE8008600130156000000A00000
- stack 0: 0xF0
3985	 200	SHR		 	 
- stack 1: 0x640
- stack 0: 0xBA
3986	 201	JUMP		 	 
- stack 0: 0x640
3987	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x640
3988	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3989	 BC	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xBA000000D4009001700001018F000201A9FFE8008600130156000000A00000
3990	 BD	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0xBA000000D4009001700001018F000201A9FFE8008600130156000000A00000
- stack 0: 0xE0
3991	 BF	SHR		 	 
- stack 1: 0x640
- stack 0: 0xBA0000
3992	 C0	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0xBA0000
- stack 0: 0xFFFF
3993	 C3	AND		 	 
- stack 1: 0x640
- stack 0: 0x0
3994	 C4	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x1
3995	 C6	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x0
3996	 C7	PUSH2	0040	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x40
3997	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x640
3998	 CB	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3999	 CD	ADD		 	 
- stack 0: 0x644
4000	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
4001	 CF	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0xD4009001700001018F000201A9FFE8008600130156000000A0000001EB0000
4002	 D0	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0xD4009001700001018F000201A9FFE8008600130156000000A0000001EB0000
- stack 0: 0xF0
4003	 D2	SHR		 	 
- stack 1: 0x644
- stack 0: 0xD4
4004	 D3	JUMP		 	 
- stack 0: 0x644
4005	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x644
4006	 D5	PUSH2	0020	 	 
- stack 1: 0x644
- stack 0: 0x20
4007	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x644
- stack 0: 0x0
4008	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4009	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x644
- stack 0: 0x0
4010	 DF	PUSH2	0040	 	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x40
4011	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x0
4012	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x644
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4013	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x0
4014	 E9	SUB		 	 
- stack 1: 0x644
- stack 0: 0x0
4015	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0xF2
4016	 ED	JUMPI		 	 
- stack 0: 0x644
4017	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x644
- stack 0: 0x10C
4018	 F1	JUMP		 	 
- stack 0: 0x644
4019	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x644
4020	 10D	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
4021	 10F	ADD		 	 
- stack 0: 0x648
4022	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
4023	 111	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BA0000
4024	 112	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BA0000
- stack 0: 0xF0
4025	 114	SHR		 	 
- stack 1: 0x648
- stack 0: 0x170
4026	 115	JUMP		 	 
- stack 0: 0x648
4027	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x648
4028	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
4029	 172	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BA0000
4030	 173	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BA0000
- stack 0: 0xE0
4031	 175	SHR		 	 
- stack 1: 0x648
- stack 0: 0x1700001
4032	 176	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x1700001
- stack 0: 0xFFFF
4033	 179	AND		 	 
- stack 1: 0x648
- stack 0: 0x1
4034	 17A	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x1
4035	 17C	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x1
4036	 17D	PUSH2	0080	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x80
4037	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x0
4038	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x648
- stack 0: 0x1
4039	 182	PUSH2	0080	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x80
4040	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x648
4041	 186	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
4042	 188	ADD		 	 
- stack 0: 0x64C
4043	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
4044	 18A	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x18F000201A9FFE8008600130156000000A0000001EB000000BA000001EB0000
4045	 18B	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x18F000201A9FFE8008600130156000000A0000001EB000000BA000001EB0000
- stack 0: 0xF0
4046	 18D	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x18F
4047	 18E	JUMP		 	 
- stack 0: 0x64C
4048	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x64C
4049	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
4050	 191	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x18F000201A9FFE8008600130156000000A0000001EB000000BA000001EB0000
4051	 192	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x18F000201A9FFE8008600130156000000A0000001EB000000BA000001EB0000
- stack 0: 0xE0
4052	 194	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x18F0002
4053	 195	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x18F0002
- stack 0: 0xFFFF
4054	 198	AND		 	 
- stack 1: 0x64C
- stack 0: 0x2
4055	 199	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x1
4056	 19B	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x2
4057	 19C	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xA0
4058	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x64C
4059	 1A0	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
4060	 1A2	ADD		 	 
- stack 0: 0x650
4061	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
4062	 1A4	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x1A9FFE8008600130156000000A0000001EB000000BA000001EB000000D40068
4063	 1A5	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x1A9FFE8008600130156000000A0000001EB000000BA000001EB000000D40068
- stack 0: 0xF0
4064	 1A7	SHR		 	 
- stack 1: 0x650
- stack 0: 0x1A9
4065	 1A8	JUMP		 	 
- stack 0: 0x650
4066	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x650
4067	 1AA	PUSH2	0080	 	 
- stack 1: 0x650
- stack 0: 0x80
4068	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x650
- stack 0: 0x1
4069	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4070	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x650
- stack 0: 0x1
4071	 1B4	PUSH2	00A0	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0xA0
4072	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x2
4073	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x650
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4074	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x2
4075	 1BE	SUB		 	 
- stack 1: 0x650
- stack 0: 0x1
4076	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x1C7
4077	 1C2	JUMPI		 	 
- stack 0: 0x650
4078	 1C7	JUMPDEST		 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x650
4079	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
4080	 1C9	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x1A9FFE8008600130156000000A0000001EB000000BA000001EB000000D40068
4081	 1CA	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x1A9FFE8008600130156000000A0000001EB000000BA000001EB000000D40068
- stack 0: 0xE0
4082	 1CC	SHR		 	 
- stack 1: 0x650
- stack 0: 0x1A9FFE8
4083	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x1A9FFE8
- stack 0: 0xFFFF
4084	 1D0	AND		 	 
- stack 1: 0x650
- stack 0: 0xFFE8
4085	 1D1	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0xFFE8
- stack 0: 0x1
4086	 1D3	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
4087	 1D4	ADD		 	 
- stack 0: 0x638
4088	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x638
- stack 0: 0xFFFFFFFF
4089	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x638
4090	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
4091	 1DC	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xA0000001EB000000BA000000D4009001700001018F000201A9FFE800860013
4092	 1DD	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0xA0000001EB000000BA000000D4009001700001018F000201A9FFE800860013
- stack 0: 0xF0
4093	 1DF	SHR		 	 
- stack 1: 0x638
- stack 0: 0xA0
4094	 1E0	JUMP		 	 
- stack 0: 0x638
4095	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x638
4096	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
4097	 A2	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xA0000001EB000000BA000000D4009001700001018F000201A9FFE800860013
4098	 A3	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0xA0000001EB000000BA000000D4009001700001018F000201A9FFE800860013
- stack 0: 0xE0
4099	 A5	SHR		 	 
- stack 1: 0x638
- stack 0: 0xA00000
4100	 A6	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0xA00000
- stack 0: 0xFFFF
4101	 A9	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
4102	 AA	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
4103	 AC	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
4104	 AD	PUSH2	0020	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x20
4105	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x638
4106	 B1	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
4107	 B3	ADD		 	 
- stack 0: 0x63C
4108	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
4109	 B5	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x1EB000000BA000000D4009001700001018F000201A9FFE80086001301560000
4110	 B6	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x1EB000000BA000000D4009001700001018F000201A9FFE80086001301560000
- stack 0: 0xF0
4111	 B8	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x1EB
4112	 B9	JUMP		 	 
- stack 0: 0x63C
4113	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x63C
4114	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
4115	 1ED	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x1EB000000BA000000D4009001700001018F000201A9FFE80086001301560000
4116	 1EE	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x1EB000000BA000000D4009001700001018F000201A9FFE80086001301560000
- stack 0: 0xE0
4117	 1F0	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x1EB0000
4118	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4119	 1F4	AND		 	 
- stack 1: 0x63C
- stack 0: 0x0
4120	 1F5	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x1
4121	 1F7	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x0
4122	 1F8	POP		 	 
- stack 0: 0x63C
4123	 1F9	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
4124	 1FB	ADD		 	 
- stack 0: 0x640
4125	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
4126	 1FD	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xBA000000D4009001700001018F000201A9FFE8008600130156000000A00000
4127	 1FE	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0xBA000000D4009001700001018F000201A9FFE8008600130156000000A00000
- stack 0: 0xF0
4128	 200	SHR		 	 
- stack 1: 0x640
- stack 0: 0xBA
4129	 201	JUMP		 	 
- stack 0: 0x640
4130	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x640
4131	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
4132	 BC	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xBA000000D4009001700001018F000201A9FFE8008600130156000000A00000
4133	 BD	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0xBA000000D4009001700001018F000201A9FFE8008600130156000000A00000
- stack 0: 0xE0
4134	 BF	SHR		 	 
- stack 1: 0x640
- stack 0: 0xBA0000
4135	 C0	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0xBA0000
- stack 0: 0xFFFF
4136	 C3	AND		 	 
- stack 1: 0x640
- stack 0: 0x0
4137	 C4	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x1
4138	 C6	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x0
4139	 C7	PUSH2	0040	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x40
4140	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x640
4141	 CB	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
4142	 CD	ADD		 	 
- stack 0: 0x644
4143	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
4144	 CF	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0xD4009001700001018F000201A9FFE8008600130156000000A0000001EB0000
4145	 D0	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0xD4009001700001018F000201A9FFE8008600130156000000A0000001EB0000
- stack 0: 0xF0
4146	 D2	SHR		 	 
- stack 1: 0x644
- stack 0: 0xD4
4147	 D3	JUMP		 	 
- stack 0: 0x644
4148	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x644
4149	 D5	PUSH2	0020	 	 
- stack 1: 0x644
- stack 0: 0x20
4150	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x644
- stack 0: 0x0
4151	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4152	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x644
- stack 0: 0x0
4153	 DF	PUSH2	0040	 	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x40
4154	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x0
4155	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x644
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4156	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x0
4157	 E9	SUB		 	 
- stack 1: 0x644
- stack 0: 0x0
4158	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0xF2
4159	 ED	JUMPI		 	 
- stack 0: 0x644
4160	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x644
- stack 0: 0x10C
4161	 F1	JUMP		 	 
- stack 0: 0x644
4162	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x644
4163	 10D	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
4164	 10F	ADD		 	 
- stack 0: 0x648
4165	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
4166	 111	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BA0000
4167	 112	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BA0000
- stack 0: 0xF0
4168	 114	SHR		 	 
- stack 1: 0x648
- stack 0: 0x170
4169	 115	JUMP		 	 
- stack 0: 0x648
4170	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x648
4171	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
4172	 172	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BA0000
4173	 173	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x1700001018F000201A9FFE8008600130156000000A0000001EB000000BA0000
- stack 0: 0xE0
4174	 175	SHR		 	 
- stack 1: 0x648
- stack 0: 0x1700001
4175	 176	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x1700001
- stack 0: 0xFFFF
4176	 179	AND		 	 
- stack 1: 0x648
- stack 0: 0x1
4177	 17A	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x1
4178	 17C	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x1
4179	 17D	PUSH2	0080	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x80
4180	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x1
4181	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x648
- stack 0: 0x2
4182	 182	PUSH2	0080	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x80
4183	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x648
4184	 186	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
4185	 188	ADD		 	 
- stack 0: 0x64C
4186	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
4187	 18A	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x18F000201A9FFE8008600130156000000A0000001EB000000BA000001EB0000
4188	 18B	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x18F000201A9FFE8008600130156000000A0000001EB000000BA000001EB0000
- stack 0: 0xF0
4189	 18D	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x18F
4190	 18E	JUMP		 	 
- stack 0: 0x64C
4191	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x64C
4192	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
4193	 191	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x18F000201A9FFE8008600130156000000A0000001EB000000BA000001EB0000
4194	 192	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x18F000201A9FFE8008600130156000000A0000001EB000000BA000001EB0000
- stack 0: 0xE0
4195	 194	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x18F0002
4196	 195	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x18F0002
- stack 0: 0xFFFF
4197	 198	AND		 	 
- stack 1: 0x64C
- stack 0: 0x2
4198	 199	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x1
4199	 19B	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x2
4200	 19C	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xA0
4201	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x64C
4202	 1A0	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
4203	 1A2	ADD		 	 
- stack 0: 0x650
4204	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
4205	 1A4	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x1A9FFE8008600130156000000A0000001EB000000BA000001EB000000D40068
4206	 1A5	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x1A9FFE8008600130156000000A0000001EB000000BA000001EB000000D40068
- stack 0: 0xF0
4207	 1A7	SHR		 	 
- stack 1: 0x650
- stack 0: 0x1A9
4208	 1A8	JUMP		 	 
- stack 0: 0x650
4209	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x650
4210	 1AA	PUSH2	0080	 	 
- stack 1: 0x650
- stack 0: 0x80
4211	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x650
- stack 0: 0x2
4212	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4213	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x650
- stack 0: 0x2
4214	 1B4	PUSH2	00A0	 	 
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0xA0
4215	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0x2
4216	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x650
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4217	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0x2
4218	 1BE	SUB		 	 
- stack 1: 0x650
- stack 0: 0x0
4219	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0x1C7
4220	 1C2	JUMPI		 	 
- stack 0: 0x650
4221	 1C3	PUSH2	01E1	 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 1: 0x650
- stack 0: 0x1E1
4222	 1C6	JUMP		 	 
- stack 0: 0x650
4223	 1E1	JUMPDEST		 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x650
4224	 1E2	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
4225	 1E4	ADD		 	 
- stack 0: 0x654
4226	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
4227	 1E6	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x8600130156000000A0000001EB000000BA000001EB000000D4006801700001
4228	 1E7	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x8600130156000000A0000001EB000000BA000001EB000000D4006801700001
- stack 0: 0xF0
4229	 1E9	SHR		 	 
- stack 1: 0x654
- stack 0: 0x86
4230	 1EA	JUMP		 	 
- stack 0: 0x654
4231	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x654
4232	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
4233	 88	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x8600130156000000A0000001EB000000BA000001EB000000D4006801700001
4234	 89	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x8600130156000000A0000001EB000000BA000001EB000000D4006801700001
- stack 0: 0xE0
4235	 8B	SHR		 	 
- stack 1: 0x654
- stack 0: 0x860013
4236	 8C	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x860013
- stack 0: 0xFFFF
4237	 8F	AND		 	 
- stack 1: 0x654
- stack 0: 0x13
4238	 90	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x13
- stack 0: 0x1
4239	 92	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x13
4240	 93	PUSH2	0380	 	 
- stack 2: 0x654
- stack 1: 0x13
- stack 0: 0x380
4241	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x654
4242	 97	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
4243	 99	ADD		 	 
- stack 0: 0x658
4244	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
4245	 9B	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x156000000A0000001EB000000BA000001EB000000D4006801700001018F0002
4246	 9C	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x156000000A0000001EB000000BA000001EB000000D4006801700001018F0002
- stack 0: 0xF0
4247	 9E	SHR		 	 
- stack 1: 0x658
- stack 0: 0x156
4248	 9F	JUMP		 	 
- stack 0: 0x658
4249	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x658
4250	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
4251	 158	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x156000000A0000001EB000000BA000001EB000000D4006801700001018F0002
4252	 159	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x156000000A0000001EB000000BA000001EB000000D4006801700001018F0002
- stack 0: 0xE0
4253	 15B	SHR		 	 
- stack 1: 0x658
- stack 0: 0x1560000
4254	 15C	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x1560000
- stack 0: 0xFFFF
4255	 15F	AND		 	 
- stack 1: 0x658
- stack 0: 0x0
4256	 160	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x1
4257	 162	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x0
4258	 163	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x80
4259	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x658
4260	 167	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
4261	 169	ADD		 	 
- stack 0: 0x65C
4262	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
4263	 16B	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0xA0000001EB000000BA000001EB000000D4006801700001018F000201A9FFE4
4264	 16C	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0xA0000001EB000000BA000001EB000000D4006801700001018F000201A9FFE4
- stack 0: 0xF0
4265	 16E	SHR		 	 
- stack 1: 0x65C
- stack 0: 0xA0
4266	 16F	JUMP		 	 
- stack 0: 0x65C
4267	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x65C
4268	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
4269	 A2	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0xA0000001EB000000BA000001EB000000D4006801700001018F000201A9FFE4
4270	 A3	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0xA0000001EB000000BA000001EB000000D4006801700001018F000201A9FFE4
- stack 0: 0xE0
4271	 A5	SHR		 	 
- stack 1: 0x65C
- stack 0: 0xA00000
4272	 A6	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0xA00000
- stack 0: 0xFFFF
4273	 A9	AND		 	 
- stack 1: 0x65C
- stack 0: 0x0
4274	 AA	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x1
4275	 AC	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x0
4276	 AD	PUSH2	0020	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x20
4277	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x65C
4278	 B1	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
4279	 B3	ADD		 	 
- stack 0: 0x660
4280	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
4281	 B5	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x1EB000000BA000001EB000000D4006801700001018F000201A9FFE400860014
4282	 B6	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x1EB000000BA000001EB000000D4006801700001018F000201A9FFE400860014
- stack 0: 0xF0
4283	 B8	SHR		 	 
- stack 1: 0x660
- stack 0: 0x1EB
4284	 B9	JUMP		 	 
- stack 0: 0x660
4285	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x660
4286	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
4287	 1ED	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x1EB000000BA000001EB000000D4006801700001018F000201A9FFE400860014
4288	 1EE	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x1EB000000BA000001EB000000D4006801700001018F000201A9FFE400860014
- stack 0: 0xE0
4289	 1F0	SHR		 	 
- stack 1: 0x660
- stack 0: 0x1EB0000
4290	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4291	 1F4	AND		 	 
- stack 1: 0x660
- stack 0: 0x0
4292	 1F5	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x1
4293	 1F7	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0x0
4294	 1F8	POP		 	 
- stack 0: 0x660
4295	 1F9	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
4296	 1FB	ADD		 	 
- stack 0: 0x664
4297	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
4298	 1FD	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xBA000001EB000000D4006801700001018F000201A9FFE40086001401560000
4299	 1FE	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0xBA000001EB000000D4006801700001018F000201A9FFE40086001401560000
- stack 0: 0xF0
4300	 200	SHR		 	 
- stack 1: 0x664
- stack 0: 0xBA
4301	 201	JUMP		 	 
- stack 0: 0x664
4302	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x664
4303	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
4304	 BC	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xBA000001EB000000D4006801700001018F000201A9FFE40086001401560000
4305	 BD	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0xBA000001EB000000D4006801700001018F000201A9FFE40086001401560000
- stack 0: 0xE0
4306	 BF	SHR		 	 
- stack 1: 0x664
- stack 0: 0xBA0000
4307	 C0	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0xBA0000
- stack 0: 0xFFFF
4308	 C3	AND		 	 
- stack 1: 0x664
- stack 0: 0x0
4309	 C4	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x1
4310	 C6	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x0
4311	 C7	PUSH2	0040	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x40
4312	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x664
4313	 CB	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
4314	 CD	ADD		 	 
- stack 0: 0x668
4315	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
4316	 CF	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
4317	 D0	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
- stack 0: 0xF0
4318	 D2	SHR		 	 
- stack 1: 0x668
- stack 0: 0x1EB
4319	 D3	JUMP		 	 
- stack 0: 0x668
4320	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x668
4321	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
4322	 1ED	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
4323	 1EE	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
- stack 0: 0xE0
4324	 1F0	SHR		 	 
- stack 1: 0x668
- stack 0: 0x1EB0000
4325	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4326	 1F4	AND		 	 
- stack 1: 0x668
- stack 0: 0x0
4327	 1F5	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x1
4328	 1F7	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0x0
4329	 1F8	POP		 	 
- stack 0: 0x668
4330	 1F9	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
4331	 1FB	ADD		 	 
- stack 0: 0x66C
4332	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4333	 1FD	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xD4006801700001018F000201A9FFE4008600140156000000A0000001EB0000
4334	 1FE	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xD4006801700001018F000201A9FFE4008600140156000000A0000001EB0000
- stack 0: 0xF0
4335	 200	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xD4
4336	 201	JUMP		 	 
- stack 0: 0x66C
4337	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x66C
4338	 D5	PUSH2	0020	 	 
- stack 1: 0x66C
- stack 0: 0x20
4339	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x66C
- stack 0: 0x0
4340	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4341	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x66C
- stack 0: 0x0
4342	 DF	PUSH2	0040	 	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x40
4343	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x0
4344	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x66C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4345	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x0
4346	 E9	SUB		 	 
- stack 1: 0x66C
- stack 0: 0x0
4347	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0xF2
4348	 ED	JUMPI		 	 
- stack 0: 0x66C
4349	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x66C
- stack 0: 0x10C
4350	 F1	JUMP		 	 
- stack 0: 0x66C
4351	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x66C
4352	 10D	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4353	 10F	ADD		 	 
- stack 0: 0x670
4354	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4355	 111	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
4356	 112	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
- stack 0: 0xF0
4357	 114	SHR		 	 
- stack 1: 0x670
- stack 0: 0x170
4358	 115	JUMP		 	 
- stack 0: 0x670
4359	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x670
4360	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4361	 172	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
4362	 173	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
- stack 0: 0xE0
4363	 175	SHR		 	 
- stack 1: 0x670
- stack 0: 0x1700001
4364	 176	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x1700001
- stack 0: 0xFFFF
4365	 179	AND		 	 
- stack 1: 0x670
- stack 0: 0x1
4366	 17A	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x1
- stack 0: 0x1
4367	 17C	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x1
4368	 17D	PUSH2	0080	 	 
- stack 2: 0x670
- stack 1: 0x1
- stack 0: 0x80
4369	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x670
- stack 1: 0x1
- stack 0: 0x0
4370	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x670
- stack 0: 0x1
4371	 182	PUSH2	0080	 	 
- stack 2: 0x670
- stack 1: 0x1
- stack 0: 0x80
4372	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x670
4373	 186	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4374	 188	ADD		 	 
- stack 0: 0x674
4375	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4376	 18A	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BA0000
4377	 18B	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BA0000
- stack 0: 0xF0
4378	 18D	SHR		 	 
- stack 1: 0x674
- stack 0: 0x18F
4379	 18E	JUMP		 	 
- stack 0: 0x674
4380	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x674
4381	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
4382	 191	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BA0000
4383	 192	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BA0000
- stack 0: 0xE0
4384	 194	SHR		 	 
- stack 1: 0x674
- stack 0: 0x18F0002
4385	 195	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x18F0002
- stack 0: 0xFFFF
4386	 198	AND		 	 
- stack 1: 0x674
- stack 0: 0x2
4387	 199	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x1
4388	 19B	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x2
4389	 19C	PUSH2	00A0	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0xA0
4390	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x674
4391	 1A0	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4392	 1A2	ADD		 	 
- stack 0: 0x678
4393	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4394	 1A4	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x1A9FFE4008600140156000000A0000001EB000001EB000000BA000000D40040
4395	 1A5	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x1A9FFE4008600140156000000A0000001EB000001EB000000BA000000D40040
- stack 0: 0xF0
4396	 1A7	SHR		 	 
- stack 1: 0x678
- stack 0: 0x1A9
4397	 1A8	JUMP		 	 
- stack 0: 0x678
4398	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x678
4399	 1AA	PUSH2	0080	 	 
- stack 1: 0x678
- stack 0: 0x80
4400	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x678
- stack 0: 0x1
4401	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4402	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x678
- stack 0: 0x1
4403	 1B4	PUSH2	00A0	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0xA0
4404	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x2
4405	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x678
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4406	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x2
4407	 1BE	SUB		 	 
- stack 1: 0x678
- stack 0: 0x1
4408	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x1C7
4409	 1C2	JUMPI		 	 
- stack 0: 0x678
4410	 1C7	JUMPDEST		 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x678
4411	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
4412	 1C9	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x1A9FFE4008600140156000000A0000001EB000001EB000000BA000000D40040
4413	 1CA	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x1A9FFE4008600140156000000A0000001EB000001EB000000BA000000D40040
- stack 0: 0xE0
4414	 1CC	SHR		 	 
- stack 1: 0x678
- stack 0: 0x1A9FFE4
4415	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x1A9FFE4
- stack 0: 0xFFFF
4416	 1D0	AND		 	 
- stack 1: 0x678
- stack 0: 0xFFE4
4417	 1D1	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0xFFE4
- stack 0: 0x1
4418	 1D3	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4419	 1D4	ADD		 	 
- stack 0: 0x65C
4420	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x65C
- stack 0: 0xFFFFFFFF
4421	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x65C
4422	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
4423	 1DC	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0xA0000001EB000000BA000001EB000000D4006801700001018F000201A9FFE4
4424	 1DD	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0xA0000001EB000000BA000001EB000000D4006801700001018F000201A9FFE4
- stack 0: 0xF0
4425	 1DF	SHR		 	 
- stack 1: 0x65C
- stack 0: 0xA0
4426	 1E0	JUMP		 	 
- stack 0: 0x65C
4427	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x65C
4428	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
4429	 A2	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0xA0000001EB000000BA000001EB000000D4006801700001018F000201A9FFE4
4430	 A3	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0xA0000001EB000000BA000001EB000000D4006801700001018F000201A9FFE4
- stack 0: 0xE0
4431	 A5	SHR		 	 
- stack 1: 0x65C
- stack 0: 0xA00000
4432	 A6	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0xA00000
- stack 0: 0xFFFF
4433	 A9	AND		 	 
- stack 1: 0x65C
- stack 0: 0x0
4434	 AA	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x1
4435	 AC	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x0
4436	 AD	PUSH2	0020	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x20
4437	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x65C
4438	 B1	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
4439	 B3	ADD		 	 
- stack 0: 0x660
4440	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
4441	 B5	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x1EB000000BA000001EB000000D4006801700001018F000201A9FFE400860014
4442	 B6	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x1EB000000BA000001EB000000D4006801700001018F000201A9FFE400860014
- stack 0: 0xF0
4443	 B8	SHR		 	 
- stack 1: 0x660
- stack 0: 0x1EB
4444	 B9	JUMP		 	 
- stack 0: 0x660
4445	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x660
4446	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
4447	 1ED	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x1EB000000BA000001EB000000D4006801700001018F000201A9FFE400860014
4448	 1EE	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x1EB000000BA000001EB000000D4006801700001018F000201A9FFE400860014
- stack 0: 0xE0
4449	 1F0	SHR		 	 
- stack 1: 0x660
- stack 0: 0x1EB0000
4450	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4451	 1F4	AND		 	 
- stack 1: 0x660
- stack 0: 0x0
4452	 1F5	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x1
4453	 1F7	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0x0
4454	 1F8	POP		 	 
- stack 0: 0x660
4455	 1F9	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
4456	 1FB	ADD		 	 
- stack 0: 0x664
4457	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
4458	 1FD	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xBA000001EB000000D4006801700001018F000201A9FFE40086001401560000
4459	 1FE	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0xBA000001EB000000D4006801700001018F000201A9FFE40086001401560000
- stack 0: 0xF0
4460	 200	SHR		 	 
- stack 1: 0x664
- stack 0: 0xBA
4461	 201	JUMP		 	 
- stack 0: 0x664
4462	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x664
4463	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
4464	 BC	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xBA000001EB000000D4006801700001018F000201A9FFE40086001401560000
4465	 BD	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0xBA000001EB000000D4006801700001018F000201A9FFE40086001401560000
- stack 0: 0xE0
4466	 BF	SHR		 	 
- stack 1: 0x664
- stack 0: 0xBA0000
4467	 C0	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0xBA0000
- stack 0: 0xFFFF
4468	 C3	AND		 	 
- stack 1: 0x664
- stack 0: 0x0
4469	 C4	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x1
4470	 C6	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x0
4471	 C7	PUSH2	0040	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x40
4472	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x664
4473	 CB	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
4474	 CD	ADD		 	 
- stack 0: 0x668
4475	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
4476	 CF	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
4477	 D0	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
- stack 0: 0xF0
4478	 D2	SHR		 	 
- stack 1: 0x668
- stack 0: 0x1EB
4479	 D3	JUMP		 	 
- stack 0: 0x668
4480	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x668
4481	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
4482	 1ED	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
4483	 1EE	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x1EB000000D4006801700001018F000201A9FFE4008600140156000000A00000
- stack 0: 0xE0
4484	 1F0	SHR		 	 
- stack 1: 0x668
- stack 0: 0x1EB0000
4485	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4486	 1F4	AND		 	 
- stack 1: 0x668
- stack 0: 0x0
4487	 1F5	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x1
4488	 1F7	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0x0
4489	 1F8	POP		 	 
- stack 0: 0x668
4490	 1F9	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
4491	 1FB	ADD		 	 
- stack 0: 0x66C
4492	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4493	 1FD	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xD4006801700001018F000201A9FFE4008600140156000000A0000001EB0000
4494	 1FE	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xD4006801700001018F000201A9FFE4008600140156000000A0000001EB0000
- stack 0: 0xF0
4495	 200	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xD4
4496	 201	JUMP		 	 
- stack 0: 0x66C
4497	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x66C
4498	 D5	PUSH2	0020	 	 
- stack 1: 0x66C
- stack 0: 0x20
4499	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x66C
- stack 0: 0x0
4500	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4501	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x66C
- stack 0: 0x0
4502	 DF	PUSH2	0040	 	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x40
4503	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x0
4504	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x66C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4505	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x0
4506	 E9	SUB		 	 
- stack 1: 0x66C
- stack 0: 0x0
4507	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0xF2
4508	 ED	JUMPI		 	 
- stack 0: 0x66C
4509	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x66C
- stack 0: 0x10C
4510	 F1	JUMP		 	 
- stack 0: 0x66C
4511	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x66C
4512	 10D	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4513	 10F	ADD		 	 
- stack 0: 0x670
4514	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4515	 111	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
4516	 112	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
- stack 0: 0xF0
4517	 114	SHR		 	 
- stack 1: 0x670
- stack 0: 0x170
4518	 115	JUMP		 	 
- stack 0: 0x670
4519	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x670
4520	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4521	 172	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
4522	 173	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x1700001018F000201A9FFE4008600140156000000A0000001EB000001EB0000
- stack 0: 0xE0
4523	 175	SHR		 	 
- stack 1: 0x670
- stack 0: 0x1700001
4524	 176	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x1700001
- stack 0: 0xFFFF
4525	 179	AND		 	 
- stack 1: 0x670
- stack 0: 0x1
4526	 17A	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x1
- stack 0: 0x1
4527	 17C	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x1
4528	 17D	PUSH2	0080	 	 
- stack 2: 0x670
- stack 1: 0x1
- stack 0: 0x80
4529	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x670
- stack 1: 0x1
- stack 0: 0x1
4530	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x670
- stack 0: 0x2
4531	 182	PUSH2	0080	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0x80
4532	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x670
4533	 186	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4534	 188	ADD		 	 
- stack 0: 0x674
4535	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4536	 18A	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BA0000
4537	 18B	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BA0000
- stack 0: 0xF0
4538	 18D	SHR		 	 
- stack 1: 0x674
- stack 0: 0x18F
4539	 18E	JUMP		 	 
- stack 0: 0x674
4540	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x674
4541	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
4542	 191	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BA0000
4543	 192	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x18F000201A9FFE4008600140156000000A0000001EB000001EB000000BA0000
- stack 0: 0xE0
4544	 194	SHR		 	 
- stack 1: 0x674
- stack 0: 0x18F0002
4545	 195	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x18F0002
- stack 0: 0xFFFF
4546	 198	AND		 	 
- stack 1: 0x674
- stack 0: 0x2
4547	 199	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x1
4548	 19B	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x2
4549	 19C	PUSH2	00A0	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0xA0
4550	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x674
4551	 1A0	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4552	 1A2	ADD		 	 
- stack 0: 0x678
4553	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4554	 1A4	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x1A9FFE4008600140156000000A0000001EB000001EB000000BA000000D40040
4555	 1A5	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x1A9FFE4008600140156000000A0000001EB000001EB000000BA000000D40040
- stack 0: 0xF0
4556	 1A7	SHR		 	 
- stack 1: 0x678
- stack 0: 0x1A9
4557	 1A8	JUMP		 	 
- stack 0: 0x678
4558	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x678
4559	 1AA	PUSH2	0080	 	 
- stack 1: 0x678
- stack 0: 0x80
4560	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x678
- stack 0: 0x2
4561	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4562	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x678
- stack 0: 0x2
4563	 1B4	PUSH2	00A0	 	 
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0xA0
4564	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0x2
4565	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x678
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4566	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0x2
4567	 1BE	SUB		 	 
- stack 1: 0x678
- stack 0: 0x0
4568	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0x1C7
4569	 1C2	JUMPI		 	 
- stack 0: 0x678
4570	 1C3	PUSH2	01E1	 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 1: 0x678
- stack 0: 0x1E1
4571	 1C6	JUMP		 	 
- stack 0: 0x678
4572	 1E1	JUMPDEST		 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x678
4573	 1E2	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
4574	 1E4	ADD		 	 
- stack 0: 0x67C
4575	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
4576	 1E6	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x8600140156000000A0000001EB000001EB000000BA000000D4004001700001
4577	 1E7	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x8600140156000000A0000001EB000001EB000000BA000000D4004001700001
- stack 0: 0xF0
4578	 1E9	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x86
4579	 1EA	JUMP		 	 
- stack 0: 0x67C
4580	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x67C
4581	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
4582	 88	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x8600140156000000A0000001EB000001EB000000BA000000D4004001700001
4583	 89	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x8600140156000000A0000001EB000001EB000000BA000000D4004001700001
- stack 0: 0xE0
4584	 8B	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x860014
4585	 8C	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x860014
- stack 0: 0xFFFF
4586	 8F	AND		 	 
- stack 1: 0x67C
- stack 0: 0x14
4587	 90	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x14
- stack 0: 0x1
4588	 92	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x14
4589	 93	PUSH2	0380	 	 
- stack 2: 0x67C
- stack 1: 0x14
- stack 0: 0x380
4590	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x67C
4591	 97	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4592	 99	ADD		 	 
- stack 0: 0x680
4593	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4594	 9B	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x156000000A0000001EB000001EB000000BA000000D4004001700001018F0002
4595	 9C	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x156000000A0000001EB000001EB000000BA000000D4004001700001018F0002
- stack 0: 0xF0
4596	 9E	SHR		 	 
- stack 1: 0x680
- stack 0: 0x156
4597	 9F	JUMP		 	 
- stack 0: 0x680
4598	 156	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x680
4599	 157	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
4600	 158	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x156000000A0000001EB000001EB000000BA000000D4004001700001018F0002
4601	 159	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x156000000A0000001EB000001EB000000BA000000D4004001700001018F0002
- stack 0: 0xE0
4602	 15B	SHR		 	 
- stack 1: 0x680
- stack 0: 0x1560000
4603	 15C	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x1560000
- stack 0: 0xFFFF
4604	 15F	AND		 	 
- stack 1: 0x680
- stack 0: 0x0
4605	 160	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x1
4606	 162	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x0
4607	 163	PUSH2	0080	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x80
4608	 166	MSTORE		 	  ;; # store to x4
- stack 0: 0x680
4609	 167	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4610	 169	ADD		 	 
- stack 0: 0x684
4611	 16A	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4612	 16B	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xA0000001EB000001EB000000BA000000D4004001700001018F000201A9FFE4
4613	 16C	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0xA0000001EB000001EB000000BA000000D4004001700001018F000201A9FFE4
- stack 0: 0xF0
4614	 16E	SHR		 	 
- stack 1: 0x684
- stack 0: 0xA0
4615	 16F	JUMP		 	 
- stack 0: 0x684
4616	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x684
4617	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
4618	 A2	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xA0000001EB000001EB000000BA000000D4004001700001018F000201A9FFE4
4619	 A3	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0xA0000001EB000001EB000000BA000000D4004001700001018F000201A9FFE4
- stack 0: 0xE0
4620	 A5	SHR		 	 
- stack 1: 0x684
- stack 0: 0xA00000
4621	 A6	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0xA00000
- stack 0: 0xFFFF
4622	 A9	AND		 	 
- stack 1: 0x684
- stack 0: 0x0
4623	 AA	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x1
4624	 AC	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x0
4625	 AD	PUSH2	0020	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x20
4626	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x684
4627	 B1	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4628	 B3	ADD		 	 
- stack 0: 0x688
4629	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4630	 B5	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1EB000001EB000000BA000000D4004001700001018F000201A9FFE400A00001
4631	 B6	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x1EB000001EB000000BA000000D4004001700001018F000201A9FFE400A00001
- stack 0: 0xF0
4632	 B8	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1EB
4633	 B9	JUMP		 	 
- stack 0: 0x688
4634	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x688
4635	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4636	 1ED	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1EB000001EB000000BA000000D4004001700001018F000201A9FFE400A00001
4637	 1EE	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x1EB000001EB000000BA000000D4004001700001018F000201A9FFE400A00001
- stack 0: 0xE0
4638	 1F0	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1EB0000
4639	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4640	 1F4	AND		 	 
- stack 1: 0x688
- stack 0: 0x0
4641	 1F5	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x1
4642	 1F7	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x0
4643	 1F8	POP		 	 
- stack 0: 0x688
4644	 1F9	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4645	 1FB	ADD		 	 
- stack 0: 0x68C
4646	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4647	 1FD	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x1EB000000BA000000D4004001700001018F000201A9FFE400A0000102020014
4648	 1FE	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x1EB000000BA000000D4004001700001018F000201A9FFE400A0000102020014
- stack 0: 0xF0
4649	 200	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x1EB
4650	 201	JUMP		 	 
- stack 0: 0x68C
4651	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x68C
4652	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
4653	 1ED	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x1EB000000BA000000D4004001700001018F000201A9FFE400A0000102020014
4654	 1EE	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x1EB000000BA000000D4004001700001018F000201A9FFE400A0000102020014
- stack 0: 0xE0
4655	 1F0	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x1EB0000
4656	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4657	 1F4	AND		 	 
- stack 1: 0x68C
- stack 0: 0x0
4658	 1F5	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x1
4659	 1F7	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0x0
4660	 1F8	POP		 	 
- stack 0: 0x68C
4661	 1F9	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4662	 1FB	ADD		 	 
- stack 0: 0x690
4663	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4664	 1FD	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0xBA000000D4004001700001018F000201A9FFE400A000010202001402420001
4665	 1FE	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0xBA000000D4004001700001018F000201A9FFE400A000010202001402420001
- stack 0: 0xF0
4666	 200	SHR		 	 
- stack 1: 0x690
- stack 0: 0xBA
4667	 201	JUMP		 	 
- stack 0: 0x690
4668	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x690
4669	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
4670	 BC	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0xBA000000D4004001700001018F000201A9FFE400A000010202001402420001
4671	 BD	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0xBA000000D4004001700001018F000201A9FFE400A000010202001402420001
- stack 0: 0xE0
4672	 BF	SHR		 	 
- stack 1: 0x690
- stack 0: 0xBA0000
4673	 C0	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0xBA0000
- stack 0: 0xFFFF
4674	 C3	AND		 	 
- stack 1: 0x690
- stack 0: 0x0
4675	 C4	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x1
4676	 C6	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0x0
4677	 C7	PUSH2	0040	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x40
4678	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x690
4679	 CB	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4680	 CD	ADD		 	 
- stack 0: 0x694
4681	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4682	 CF	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xD4004001700001018F000201A9FFE400A00001020200140242000102420001
4683	 D0	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0xD4004001700001018F000201A9FFE400A00001020200140242000102420001
- stack 0: 0xF0
4684	 D2	SHR		 	 
- stack 1: 0x694
- stack 0: 0xD4
4685	 D3	JUMP		 	 
- stack 0: 0x694
4686	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x694
4687	 D5	PUSH2	0020	 	 
- stack 1: 0x694
- stack 0: 0x20
4688	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x694
- stack 0: 0x0
4689	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4690	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x694
- stack 0: 0x0
4691	 DF	PUSH2	0040	 	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x40
4692	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x0
4693	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x694
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4694	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x0
4695	 E9	SUB		 	 
- stack 1: 0x694
- stack 0: 0x0
4696	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0xF2
4697	 ED	JUMPI		 	 
- stack 0: 0x694
4698	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x694
- stack 0: 0x10C
4699	 F1	JUMP		 	 
- stack 0: 0x694
4700	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x694
4701	 10D	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4702	 10F	ADD		 	 
- stack 0: 0x698
4703	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4704	 111	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x1700001018F000201A9FFE400A0000102020014024200010242000102420001
4705	 112	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x1700001018F000201A9FFE400A0000102020014024200010242000102420001
- stack 0: 0xF0
4706	 114	SHR		 	 
- stack 1: 0x698
- stack 0: 0x170
4707	 115	JUMP		 	 
- stack 0: 0x698
4708	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x698
4709	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
4710	 172	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x1700001018F000201A9FFE400A0000102020014024200010242000102420001
4711	 173	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x1700001018F000201A9FFE400A0000102020014024200010242000102420001
- stack 0: 0xE0
4712	 175	SHR		 	 
- stack 1: 0x698
- stack 0: 0x1700001
4713	 176	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x1700001
- stack 0: 0xFFFF
4714	 179	AND		 	 
- stack 1: 0x698
- stack 0: 0x1
4715	 17A	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x1
- stack 0: 0x1
4716	 17C	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x1
4717	 17D	PUSH2	0080	 	 
- stack 2: 0x698
- stack 1: 0x1
- stack 0: 0x80
4718	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x698
- stack 1: 0x1
- stack 0: 0x0
4719	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x698
- stack 0: 0x1
4720	 182	PUSH2	0080	 	 
- stack 2: 0x698
- stack 1: 0x1
- stack 0: 0x80
4721	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x698
4722	 186	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4723	 188	ADD		 	 
- stack 0: 0x69C
4724	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4725	 18A	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x18F000201A9FFE400A000010202001402420001024200010242000102420001
4726	 18B	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x18F000201A9FFE400A000010202001402420001024200010242000102420001
- stack 0: 0xF0
4727	 18D	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x18F
4728	 18E	JUMP		 	 
- stack 0: 0x69C
4729	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x69C
4730	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4731	 191	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x18F000201A9FFE400A000010202001402420001024200010242000102420001
4732	 192	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x18F000201A9FFE400A000010202001402420001024200010242000102420001
- stack 0: 0xE0
4733	 194	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x18F0002
4734	 195	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x18F0002
- stack 0: 0xFFFF
4735	 198	AND		 	 
- stack 1: 0x69C
- stack 0: 0x2
4736	 199	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0x1
4737	 19B	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0x2
4738	 19C	PUSH2	00A0	 	 
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0xA0
4739	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x69C
4740	 1A0	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4741	 1A2	ADD		 	 
- stack 0: 0x6A0
4742	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4743	 1A4	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x1A9FFE400A00001020200140242000102420001024200010242000102420001
4744	 1A5	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x1A9FFE400A00001020200140242000102420001024200010242000102420001
- stack 0: 0xF0
4745	 1A7	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x1A9
4746	 1A8	JUMP		 	 
- stack 0: 0x6A0
4747	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x6A0
4748	 1AA	PUSH2	0080	 	 
- stack 1: 0x6A0
- stack 0: 0x80
4749	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x6A0
- stack 0: 0x1
4750	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4751	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A0
- stack 0: 0x1
4752	 1B4	PUSH2	00A0	 	 
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0xA0
4753	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x2
4754	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4755	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x2
4756	 1BE	SUB		 	 
- stack 1: 0x6A0
- stack 0: 0x1
4757	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1C7
4758	 1C2	JUMPI		 	 
- stack 0: 0x6A0
4759	 1C7	JUMPDEST		 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x6A0
4760	 1C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4761	 1C9	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x1A9FFE400A00001020200140242000102420001024200010242000102420001
4762	 1CA	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x1A9FFE400A00001020200140242000102420001024200010242000102420001
- stack 0: 0xE0
4763	 1CC	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x1A9FFE4
4764	 1CD	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x1A9FFE4
- stack 0: 0xFFFF
4765	 1D0	AND		 	 
- stack 1: 0x6A0
- stack 0: 0xFFE4
4766	 1D1	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0xFFE4
- stack 0: 0x1
4767	 1D3	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4768	 1D4	ADD		 	 
- stack 0: 0x684
4769	 1D5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x684
- stack 0: 0xFFFFFFFF
4770	 1DA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x684
4771	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4772	 1DC	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xA0000001EB000001EB000000BA000000D4004001700001018F000201A9FFE4
4773	 1DD	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0xA0000001EB000001EB000000BA000000D4004001700001018F000201A9FFE4
- stack 0: 0xF0
4774	 1DF	SHR		 	 
- stack 1: 0x684
- stack 0: 0xA0
4775	 1E0	JUMP		 	 
- stack 0: 0x684
4776	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x684
4777	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
4778	 A2	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xA0000001EB000001EB000000BA000000D4004001700001018F000201A9FFE4
4779	 A3	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0xA0000001EB000001EB000000BA000000D4004001700001018F000201A9FFE4
- stack 0: 0xE0
4780	 A5	SHR		 	 
- stack 1: 0x684
- stack 0: 0xA00000
4781	 A6	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0xA00000
- stack 0: 0xFFFF
4782	 A9	AND		 	 
- stack 1: 0x684
- stack 0: 0x0
4783	 AA	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x1
4784	 AC	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x0
4785	 AD	PUSH2	0020	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x20
4786	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x684
4787	 B1	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4788	 B3	ADD		 	 
- stack 0: 0x688
4789	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4790	 B5	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1EB000001EB000000BA000000D4004001700001018F000201A9FFE400A00001
4791	 B6	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x1EB000001EB000000BA000000D4004001700001018F000201A9FFE400A00001
- stack 0: 0xF0
4792	 B8	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1EB
4793	 B9	JUMP		 	 
- stack 0: 0x688
4794	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x688
4795	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4796	 1ED	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1EB000001EB000000BA000000D4004001700001018F000201A9FFE400A00001
4797	 1EE	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x1EB000001EB000000BA000000D4004001700001018F000201A9FFE400A00001
- stack 0: 0xE0
4798	 1F0	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1EB0000
4799	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4800	 1F4	AND		 	 
- stack 1: 0x688
- stack 0: 0x0
4801	 1F5	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x1
4802	 1F7	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x0
4803	 1F8	POP		 	 
- stack 0: 0x688
4804	 1F9	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4805	 1FB	ADD		 	 
- stack 0: 0x68C
4806	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4807	 1FD	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x1EB000000BA000000D4004001700001018F000201A9FFE400A0000102020014
4808	 1FE	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x1EB000000BA000000D4004001700001018F000201A9FFE400A0000102020014
- stack 0: 0xF0
4809	 200	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x1EB
4810	 201	JUMP		 	 
- stack 0: 0x68C
4811	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x68C
4812	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
4813	 1ED	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x1EB000000BA000000D4004001700001018F000201A9FFE400A0000102020014
4814	 1EE	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x1EB000000BA000000D4004001700001018F000201A9FFE400A0000102020014
- stack 0: 0xE0
4815	 1F0	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x1EB0000
4816	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x1EB0000
- stack 0: 0xFFFF
4817	 1F4	AND		 	 
- stack 1: 0x68C
- stack 0: 0x0
4818	 1F5	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x1
4819	 1F7	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0x0
4820	 1F8	POP		 	 
- stack 0: 0x68C
4821	 1F9	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4822	 1FB	ADD		 	 
- stack 0: 0x690
4823	 1FC	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4824	 1FD	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0xBA000000D4004001700001018F000201A9FFE400A000010202001402420001
4825	 1FE	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0xBA000000D4004001700001018F000201A9FFE400A000010202001402420001
- stack 0: 0xF0
4826	 200	SHR		 	 
- stack 1: 0x690
- stack 0: 0xBA
4827	 201	JUMP		 	 
- stack 0: 0x690
4828	 BA	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x690
4829	 BB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
4830	 BC	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0xBA000000D4004001700001018F000201A9FFE400A000010202001402420001
4831	 BD	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0xBA000000D4004001700001018F000201A9FFE400A000010202001402420001
- stack 0: 0xE0
4832	 BF	SHR		 	 
- stack 1: 0x690
- stack 0: 0xBA0000
4833	 C0	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0xBA0000
- stack 0: 0xFFFF
4834	 C3	AND		 	 
- stack 1: 0x690
- stack 0: 0x0
4835	 C4	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x1
4836	 C6	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0x0
4837	 C7	PUSH2	0040	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x40
4838	 CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x690
4839	 CB	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4840	 CD	ADD		 	 
- stack 0: 0x694
4841	 CE	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4842	 CF	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xD4004001700001018F000201A9FFE400A00001020200140242000102420001
4843	 D0	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0xD4004001700001018F000201A9FFE400A00001020200140242000102420001
- stack 0: 0xF0
4844	 D2	SHR		 	 
- stack 1: 0x694
- stack 0: 0xD4
4845	 D3	JUMP		 	 
- stack 0: 0x694
4846	 D4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_2	  ;; # instr: bne ra,sp,c(ignore imm)
- stack 0: 0x694
4847	 D5	PUSH2	0020	 	 
- stack 1: 0x694
- stack 0: 0x20
4848	 D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x694
- stack 0: 0x0
4849	 D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4850	 DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x694
- stack 0: 0x0
4851	 DF	PUSH2	0040	 	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x40
4852	 E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x0
4853	 E3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x694
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4854	 E8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x0
4855	 E9	SUB		 	 
- stack 1: 0x694
- stack 0: 0x0
4856	 EA	PUSH2	00F2	 ;; _neq_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0xF2
4857	 ED	JUMPI		 	 
- stack 0: 0x694
4858	 EE	PUSH2	010C	 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 1: 0x694
- stack 0: 0x10C
4859	 F1	JUMP		 	 
- stack 0: 0x694
4860	 10C	JUMPDEST		 ;; _neq_after_b67c00cfb80cc3fe23e63f681e4fec7024467135836b0cf281a077092c4b98a5	 
- stack 0: 0x694
4861	 10D	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4862	 10F	ADD		 	 
- stack 0: 0x698
4863	 110	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4864	 111	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x1700001018F000201A9FFE400A0000102020014024200010242000102420001
4865	 112	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x1700001018F000201A9FFE400A0000102020014024200010242000102420001
- stack 0: 0xF0
4866	 114	SHR		 	 
- stack 1: 0x698
- stack 0: 0x170
4867	 115	JUMP		 	 
- stack 0: 0x698
4868	 170	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x698
4869	 171	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
4870	 172	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x1700001018F000201A9FFE400A0000102020014024200010242000102420001
4871	 173	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x1700001018F000201A9FFE400A0000102020014024200010242000102420001
- stack 0: 0xE0
4872	 175	SHR		 	 
- stack 1: 0x698
- stack 0: 0x1700001
4873	 176	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x1700001
- stack 0: 0xFFFF
4874	 179	AND		 	 
- stack 1: 0x698
- stack 0: 0x1
4875	 17A	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x1
- stack 0: 0x1
4876	 17C	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x1
4877	 17D	PUSH2	0080	 	 
- stack 2: 0x698
- stack 1: 0x1
- stack 0: 0x80
4878	 180	MLOAD		 	  ;; # read from x4
- stack 2: 0x698
- stack 1: 0x1
- stack 0: 0x1
4879	 181	ADD		 	  ;; # ADDI 4
- stack 1: 0x698
- stack 0: 0x2
4880	 182	PUSH2	0080	 	 
- stack 2: 0x698
- stack 1: 0x2
- stack 0: 0x80
4881	 185	MSTORE		 	  ;; # store to x4
- stack 0: 0x698
4882	 186	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4883	 188	ADD		 	 
- stack 0: 0x69C
4884	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4885	 18A	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x18F000201A9FFE400A000010202001402420001024200010242000102420001
4886	 18B	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x18F000201A9FFE400A000010202001402420001024200010242000102420001
- stack 0: 0xF0
4887	 18D	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x18F
4888	 18E	JUMP		 	 
- stack 0: 0x69C
4889	 18F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x69C
4890	 190	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4891	 191	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x18F000201A9FFE400A000010202001402420001024200010242000102420001
4892	 192	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x18F000201A9FFE400A000010202001402420001024200010242000102420001
- stack 0: 0xE0
4893	 194	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x18F0002
4894	 195	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x18F0002
- stack 0: 0xFFFF
4895	 198	AND		 	 
- stack 1: 0x69C
- stack 0: 0x2
4896	 199	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0x1
4897	 19B	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0x2
4898	 19C	PUSH2	00A0	 	 
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0xA0
4899	 19F	MSTORE		 	  ;; # store to x5
- stack 0: 0x69C
4900	 1A0	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4901	 1A2	ADD		 	 
- stack 0: 0x6A0
4902	 1A3	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4903	 1A4	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x1A9FFE400A00001020200140242000102420001024200010242000102420001
4904	 1A5	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x1A9FFE400A00001020200140242000102420001024200010242000102420001
- stack 0: 0xF0
4905	 1A7	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x1A9
4906	 1A8	JUMP		 	 
- stack 0: 0x6A0
4907	 1A9	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x6A0
4908	 1AA	PUSH2	0080	 	 
- stack 1: 0x6A0
- stack 0: 0x80
4909	 1AD	MLOAD		 	  ;; # read from x4
- stack 1: 0x6A0
- stack 0: 0x2
4910	 1AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4911	 1B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A0
- stack 0: 0x2
4912	 1B4	PUSH2	00A0	 	 
- stack 2: 0x6A0
- stack 1: 0x2
- stack 0: 0xA0
4913	 1B7	MLOAD		 	  ;; # read from x5
- stack 2: 0x6A0
- stack 1: 0x2
- stack 0: 0x2
4914	 1B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4915	 1BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A0
- stack 1: 0x2
- stack 0: 0x2
4916	 1BE	SUB		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4917	 1BF	PUSH2	01C7	 ;; _neq_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1C7
4918	 1C2	JUMPI		 	 
- stack 0: 0x6A0
4919	 1C3	PUSH2	01E1	 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 1: 0x6A0
- stack 0: 0x1E1
4920	 1C6	JUMP		 	 
- stack 0: 0x6A0
4921	 1E1	JUMPDEST		 ;; _neq_after_5ddbb7e57cc1ca8d511563ce674968f795077ca1f803935c4cfb74fc15ba750f	 
- stack 0: 0x6A0
4922	 1E2	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4923	 1E4	ADD		 	 
- stack 0: 0x6A4
4924	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4925	 1E6	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0xA0000102020014024200010242000102420001024200010242000102420001
4926	 1E7	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0xA0000102020014024200010242000102420001024200010242000102420001
- stack 0: 0xF0
4927	 1E9	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0xA0
4928	 1EA	JUMP		 	 
- stack 0: 0x6A4
4929	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6A4
4930	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
4931	 A2	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0xA0000102020014024200010242000102420001024200010242000102420001
4932	 A3	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0xA0000102020014024200010242000102420001024200010242000102420001
- stack 0: 0xE0
4933	 A5	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0xA00001
4934	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0xA00001
- stack 0: 0xFFFF
4935	 A9	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
4936	 AA	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x1
4937	 AC	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
4938	 AD	PUSH2	0020	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x20
4939	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A4
4940	 B1	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4941	 B3	ADD		 	 
- stack 0: 0x6A8
4942	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4943	 B5	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x202001402420001024200010242000102420001024200010242000102610003
4944	 B6	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x202001402420001024200010242000102420001024200010242000102610003
- stack 0: 0xF0
4945	 B8	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x202
4946	 B9	JUMP		 	 
- stack 0: 0x6A8
4947	 202	JUMPDEST		 ;; __riscvimpl_BNE_0_1_0	  ;; # instr: bne ra,zero,14(ignore imm)
- stack 0: 0x6A8
4948	 203	PUSH2	0020	 	 
- stack 1: 0x6A8
- stack 0: 0x20
4949	 206	MLOAD		 	  ;; # read from x1
- stack 1: 0x6A8
- stack 0: 0x1
4950	 207	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4951	 20C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A8
- stack 0: 0x1
4952	 20D	PUSH1	00	 	 
- stack 2: 0x6A8
- stack 1: 0x1
- stack 0: 0x0
4953	 20F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A8
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4954	 214	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A8
- stack 1: 0x1
- stack 0: 0x0
4955	 215	SUB		 	 
- stack 1: 0x6A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4956	 216	PUSH2	021E	 ;; _neq_0c304bd6acffbdf6ca60e8889da4b58da80857bd1286f1cd1f8ba3192168ce7c	 
- stack 2: 0x6A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x21E
4957	 219	JUMPI		 	 
- stack 0: 0x6A8
4958	 21E	JUMPDEST		 ;; _neq_0c304bd6acffbdf6ca60e8889da4b58da80857bd1286f1cd1f8ba3192168ce7c	 
- stack 0: 0x6A8
4959	 21F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
4960	 220	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x202001402420001024200010242000102420001024200010242000102610003
4961	 221	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0x202001402420001024200010242000102420001024200010242000102610003
- stack 0: 0xE0
4962	 223	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x2020014
4963	 224	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x2020014
- stack 0: 0xFFFF
4964	 227	AND		 	 
- stack 1: 0x6A8
- stack 0: 0x14
4965	 228	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0x14
- stack 0: 0x1
4966	 22A	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0x14
4967	 22B	ADD		 	 
- stack 0: 0x6BC
4968	 22C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6BC
- stack 0: 0xFFFFFFFF
4969	 231	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6BC
4970	 232	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4971	 233	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x2420001024200010261000300860015027B0008011600180021000000340708
4972	 234	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x2420001024200010261000300860015027B0008011600180021000000340708
- stack 0: 0xF0
4973	 236	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x242
4974	 237	JUMP		 	 
- stack 0: 0x6BC
4975	 242	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x6BC
4976	 243	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
4977	 244	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x2420001024200010261000300860015027B0008011600180021000000340708
4978	 245	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x2420001024200010261000300860015027B0008011600180021000000340708
- stack 0: 0xE0
4979	 247	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x2420001
4980	 248	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x2420001
- stack 0: 0xFFFF
4981	 24B	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x1
4982	 24C	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0x1
4983	 24E	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x1
4984	 24F	PUSH2	0020	 	 
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0x20
4985	 252	MLOAD		 	  ;; # read from x1
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0x1
4986	 253	ADD		 	  ;; # ADDI 1
- stack 1: 0x6BC
- stack 0: 0x2
4987	 254	PUSH2	0020	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0x20
4988	 257	MSTORE		 	  ;; # store to x1
- stack 0: 0x6BC
4989	 258	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4990	 25A	ADD		 	 
- stack 0: 0x6C0
4991	 25B	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4992	 25C	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x24200010261000300860015027B000801160018002100000034070800530042
4993	 25D	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x24200010261000300860015027B000801160018002100000034070800530042
- stack 0: 0xF0
4994	 25F	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x242
4995	 260	JUMP		 	 
- stack 0: 0x6C0
4996	 242	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x6C0
4997	 243	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
4998	 244	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x24200010261000300860015027B000801160018002100000034070800530042
4999	 245	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x24200010261000300860015027B000801160018002100000034070800530042
- stack 0: 0xE0
5000	 247	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x2420001
5001	 248	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x2420001
- stack 0: 0xFFFF
5002	 24B	AND		 	 
- stack 1: 0x6C0
- stack 0: 0x1
5003	 24C	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0x1
5004	 24E	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0x1
5005	 24F	PUSH2	0020	 	 
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0x20
5006	 252	MLOAD		 	  ;; # read from x1
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0x2
5007	 253	ADD		 	  ;; # ADDI 1
- stack 1: 0x6C0
- stack 0: 0x3
5008	 254	PUSH2	0020	 	 
- stack 2: 0x6C0
- stack 1: 0x3
- stack 0: 0x20
5009	 257	MSTORE		 	  ;; # store to x1
- stack 0: 0x6C0
5010	 258	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
5011	 25A	ADD		 	 
- stack 0: 0x6C4
5012	 25B	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
5013	 25C	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x261000300860015027B00080116001800210000003407080053004200660000
5014	 25D	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x261000300860015027B00080116001800210000003407080053004200660000
- stack 0: 0xF0
5015	 25F	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x261
5016	 260	JUMP		 	 
- stack 0: 0x6C4
5017	 261	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,3(ignore imm)
- stack 0: 0x6C4
5018	 262	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C4
- stack 0: 0x6C4
5019	 263	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x261000300860015027B00080116001800210000003407080053004200660000
5020	 264	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0x261000300860015027B00080116001800210000003407080053004200660000
- stack 0: 0xE0
5021	 266	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x2610003
5022	 267	PUSH2	FFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x2610003
- stack 0: 0xFFFF
5023	 26A	AND		 	 
- stack 1: 0x6C4
- stack 0: 0x3
5024	 26B	PUSH1	01	 	 
- stack 2: 0x6C4
- stack 1: 0x3
- stack 0: 0x1
5025	 26D	SIGNEXTEND		 	 
- stack 1: 0x6C4
- stack 0: 0x3
5026	 26E	PUSH2	03A0	 	 
- stack 2: 0x6C4
- stack 1: 0x3
- stack 0: 0x3A0
5027	 271	MSTORE		 	  ;; # store to x29
- stack 0: 0x6C4
5028	 272	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
5029	 274	ADD		 	 
- stack 0: 0x6C8
5030	 275	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
5031	 276	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x860015027B0008011600180021000000340708005300420066000002BD0001
5032	 277	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x860015027B0008011600180021000000340708005300420066000002BD0001
- stack 0: 0xF0
5033	 279	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x86
5034	 27A	JUMP		 	 
- stack 0: 0x6C8
5035	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6C8
5036	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
5037	 88	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x860015027B0008011600180021000000340708005300420066000002BD0001
5038	 89	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0x860015027B0008011600180021000000340708005300420066000002BD0001
- stack 0: 0xE0
5039	 8B	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x860015
5040	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x860015
- stack 0: 0xFFFF
5041	 8F	AND		 	 
- stack 1: 0x6C8
- stack 0: 0x15
5042	 90	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0x15
- stack 0: 0x1
5043	 92	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x15
5044	 93	PUSH2	0380	 	 
- stack 2: 0x6C8
- stack 1: 0x15
- stack 0: 0x380
5045	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x6C8
5046	 97	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
5047	 99	ADD		 	 
- stack 0: 0x6CC
5048	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
5049	 9B	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x27B0008011600180021000000340708005300420066000002BD000100210000
5050	 9C	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x27B0008011600180021000000340708005300420066000002BD000100210000
- stack 0: 0xF0
5051	 9E	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x27B
5052	 9F	JUMP		 	 
- stack 0: 0x6CC
5053	 27B	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,8(ignore imm)
- stack 0: 0x6CC
5054	 27C	PUSH2	0020	 	 
- stack 1: 0x6CC
- stack 0: 0x20
5055	 27F	MLOAD		 	  ;; # read from x1
- stack 1: 0x6CC
- stack 0: 0x3
5056	 280	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
5057	 285	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6CC
- stack 0: 0x3
5058	 286	PUSH2	03A0	 	 
- stack 2: 0x6CC
- stack 1: 0x3
- stack 0: 0x3A0
5059	 289	MLOAD		 	  ;; # read from x29
- stack 2: 0x6CC
- stack 1: 0x3
- stack 0: 0x3
5060	 28A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6CC
- stack 2: 0x3
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
5061	 28F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6CC
- stack 1: 0x3
- stack 0: 0x3
5062	 290	SUB		 	 
- stack 1: 0x6CC
- stack 0: 0x0
5063	 291	PUSH2	0299	 ;; _neq_67e344ed8e9d8c0837765531b99770ba51c3ccc10d2da0cf2904df2ba47cbc95	 
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0x299
5064	 294	JUMPI		 	 
- stack 0: 0x6CC
5065	 295	PUSH2	02B3	 ;; _neq_after_67e344ed8e9d8c0837765531b99770ba51c3ccc10d2da0cf2904df2ba47cbc95	 
- stack 1: 0x6CC
- stack 0: 0x2B3
5066	 298	JUMP		 	 
- stack 0: 0x6CC
5067	 2B3	JUMPDEST		 ;; _neq_after_67e344ed8e9d8c0837765531b99770ba51c3ccc10d2da0cf2904df2ba47cbc95	 
- stack 0: 0x6CC
5068	 2B4	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
5069	 2B6	ADD		 	 
- stack 0: 0x6D0
5070	 2B7	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
5071	 2B8	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x11600180021000000340708005300420066000002BD0001002100000034070C
5072	 2B9	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x11600180021000000340708005300420066000002BD0001002100000034070C
- stack 0: 0xF0
5073	 2BB	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x116
5074	 2BC	JUMP		 	 
- stack 0: 0x6D0
5075	 116	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,2b4(ignore imm)
- stack 0: 0x6D0
5076	 117	PUSH1	00	 	 
- stack 1: 0x6D0
- stack 0: 0x0
5077	 119	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
5078	 11E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D0
- stack 0: 0x0
5079	 11F	PUSH2	0380	 	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x380
5080	 122	MLOAD		 	  ;; # read from x28
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x15
5081	 123	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D0
- stack 2: 0x0
- stack 1: 0x15
- stack 0: 0xFFFFFFFF
5082	 128	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x15
5083	 129	SUB		 	 
- stack 1: 0x6D0
- stack 0: 0x15
5084	 12A	PUSH2	0132	 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 2: 0x6D0
- stack 1: 0x15
- stack 0: 0x132
5085	 12D	JUMPI		 	 
- stack 0: 0x6D0
5086	 132	JUMPDEST		 ;; _neq_2f80502d1b5446fca36f43805960ca6df092ee8da8d7aa6f4ad75649999220bc	 
- stack 0: 0x6D0
5087	 133	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
5088	 134	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x11600180021000000340708005300420066000002BD0001002100000034070C
5089	 135	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x11600180021000000340708005300420066000002BD0001002100000034070C
- stack 0: 0xE0
5090	 137	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x1160018
5091	 138	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x1160018
- stack 0: 0xFFFF
5092	 13B	AND		 	 
- stack 1: 0x6D0
- stack 0: 0x18
5093	 13C	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0x18
- stack 0: 0x1
5094	 13E	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0x18
5095	 13F	ADD		 	 
- stack 0: 0x6E8
5096	 140	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFF
5097	 145	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6E8
5098	 146	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
5099	 147	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x2100000034070C005300420066000002C80000006600006574796D00007473
5100	 148	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x2100000034070C005300420066000002C80000006600006574796D00007473
- stack 0: 0xF0
5101	 14A	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x21
5102	 14B	JUMP		 	 
- stack 0: 0x6E8
5103	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x6E8
5104	 22	PUSH4	00000000	 	 
- stack 1: 0x6E8
- stack 0: 0x0
5105	 27	PUSH2	0160	 	 
- stack 2: 0x6E8
- stack 1: 0x0
- stack 0: 0x160
5106	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x6E8
5107	 2B	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
5108	 2D	ADD		 	 
- stack 0: 0x6EC
5109	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
5110	 2F	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x34070C005300420066000002C80000006600006574796D0000747300525245
5111	 30	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x34070C005300420066000002C80000006600006574796D0000747300525245
- stack 0: 0xF0
5112	 32	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x34
5113	 33	JUMP		 	 
- stack 0: 0x6EC
5114	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1792(ignore imm)
- stack 0: 0x6EC
5115	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
5116	 36	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x34070C005300420066000002C80000006600006574796D0000747300525245
5117	 37	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x34070C005300420066000002C80000006600006574796D0000747300525245
- stack 0: 0xE0
5118	 39	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x34070C
5119	 3A	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x34070C
- stack 0: 0xFFFF
5120	 3D	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x70C
5121	 3E	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x70C
- stack 0: 0x1
5122	 40	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x70C
5123	 41	PUSH2	0160	 	 
- stack 2: 0x6EC
- stack 1: 0x70C
- stack 0: 0x160
5124	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x6EC
- stack 1: 0x70C
- stack 0: 0x0
5125	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x6EC
- stack 0: 0x70C
5126	 46	PUSH2	0160	 	 
- stack 2: 0x6EC
- stack 1: 0x70C
- stack 0: 0x160
5127	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x6EC
5128	 4A	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
5129	 4C	ADD		 	 
- stack 0: 0x6F0
5130	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
5131	 4E	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x5300420066000002C80000006600006574796D000074730052524500004B4F
5132	 4F	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x5300420066000002C80000006600006574796D000074730052524500004B4F
- stack 0: 0xF0
5133	 51	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x53
5134	 52	JUMP		 	 
- stack 0: 0x6F0
5135	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x6F0
5136	 54	PUSH4	00042000	 	 
- stack 1: 0x6F0
- stack 0: 0x42000
5137	 59	PUSH2	0140	 	 
- stack 2: 0x6F0
- stack 1: 0x42000
- stack 0: 0x140
5138	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x6F0
5139	 5D	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
5140	 5F	ADD		 	 
- stack 0: 0x6F4
5141	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
5142	 61	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x66000002C80000006600006574796D000074730052524500004B4F00000000
5143	 62	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x66000002C80000006600006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
5144	 64	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x66
5145	 65	JUMP		 	 
- stack 0: 0x6F4
5146	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6F4
5147	 67	PUSH2	0140	 	 
- stack 1: 0x6F4
- stack 0: 0x140
5148	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6F4
- stack 0: 0x42000
5149	 6B	PUSH2	0075	 ;; _ecall_80743f148a2b007e17de332bb754194e6a9724bfc5f264743d28287740638d3d	 
- stack 2: 0x6F4
- stack 1: 0x42000
- stack 0: 0x75
5150	 6E	JUMPI		 	 
- stack 0: 0x6F4
5151	 75	JUMPDEST		 ;; _ecall_80743f148a2b007e17de332bb754194e6a9724bfc5f264743d28287740638d3d	 
- stack 0: 0x6F4
5152	 76	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
5153	 78	PUSH2	0160	 	 
- stack 2: 0x6F4
- stack 1: 0x4
- stack 0: 0x160
5154	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x6F4
- stack 1: 0x4
- stack 0: 0x70C
5155	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x6F4
5156	 7D	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
5157	 7F	ADD		 	 
- stack 0: 0x6F8
5158	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
5159	 81	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x2C80000006600006574796D000074730052524500004B4F0000000000000000
5160	 82	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x2C80000006600006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
5161	 84	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x2C8
5162	 85	JUMP		 	 
- stack 0: 0x6F8
5163	 2C8	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x6F8
5164	 2C9	PUSH4	00000000	 	 
- stack 1: 0x6F8
- stack 0: 0x0
5165	 2CE	PUSH2	0140	 	 
- stack 2: 0x6F8
- stack 1: 0x0
- stack 0: 0x140
5166	 2D1	MSTORE		 	  ;; # store to x10
- stack 0: 0x6F8
5167	 2D2	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
5168	 2D4	ADD		 	 
- stack 0: 0x6FC
5169	 2D5	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
5170	 2D6	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x6600006574796D000074730052524500004B4F000000000000000000000000
5171	 2D7	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x6600006574796D000074730052524500004B4F000000000000000000000000
- stack 0: 0xF0
5172	 2D9	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x66
5173	 2DA	JUMP		 	 
- stack 0: 0x6FC
5174	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6FC
5175	 67	PUSH2	0140	 	 
- stack 1: 0x6FC
- stack 0: 0x140
5176	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6FC
- stack 0: 0x0
5177	 6B	PUSH2	0075	 ;; _ecall_80743f148a2b007e17de332bb754194e6a9724bfc5f264743d28287740638d3d	 
- stack 2: 0x6FC
- stack 1: 0x0
- stack 0: 0x75
5178	 6E	JUMPI		 	 
- stack 0: 0x6FC
5179	 6F	PUSH1	20	 	 
- stack 1: 0x6FC
- stack 0: 0x20
5180	 71	PUSH2	0160	 	 
- stack 2: 0x6FC
- stack 1: 0x20
- stack 0: 0x160
5181	 74	RETURN		 	 
Final bytecode length; 1516
Returned: 000000000000000000000000000000000000000000000000000000000000070c
gasUsed : 18364
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c
** HOT: 430 - range: 430,434,438,43c
** HOT: 450 - range: 450,454,458,45c
** HOT: 470 - range: 470,474,478,47c
** HOT: 490 - range: 490,494,498,49c
** HOT: 4ac - range: 4ac,4b0,4b4,4b8
** HOT: 4c8 - range: 4c8,4cc,4d0,4d4
** HOT: 4e4 - range: 4e4,4e8,4ec,4f0,4f4
** HOT: 4ec - range: 4ec,4f0,4f4
** HOT: 4f8 - range: 4f8,4fc,500
** HOT: 504 - range: 504,508,50c,510,514,518
** HOT: 50c - range: 50c,510,514,518
** HOT: 51c - range: 51c,520,524
** HOT: 528 - range: 528,52c,530,534,538,53c,540
** HOT: 530 - range: 530,534,538,53c,540
** HOT: 544 - range: 544,548,54c
** HOT: 550 - range: 550,554,558,55c,560,564
** HOT: 558 - range: 558,55c,560,564
** HOT: 568 - range: 568,56c,570
** HOT: 574 - range: 574,578,57c,580,584,588,58c
** HOT: 57c - range: 57c,580,584,588,58c
** HOT: 590 - range: 590,594,598
** HOT: 59c - range: 59c,5a0,5a4,5a8,5ac,5b0,5b4
** HOT: 5a4 - range: 5a4,5a8,5ac,5b0,5b4
** HOT: 5b8 - range: 5b8,5bc,5c0
** HOT: 5c4 - range: 5c4,5c8,5cc,5d0,5d4
** HOT: 5cc - range: 5cc,5d0,5d4
** HOT: 5d8 - range: 5d8,5dc,5e0
** HOT: 5e4 - range: 5e4,5e8,5ec,5f0,5f4,5f8
** HOT: 5ec - range: 5ec,5f0,5f4,5f8
** HOT: 5fc - range: 5fc,600,604
** HOT: 608 - range: 608,60c,610,614,618,61c,620
** HOT: 610 - range: 610,614,618,61c,620
** HOT: 624 - range: 624,628,62c
** HOT: 630 - range: 630,634,638,63c,640,644
** HOT: 638 - range: 638,63c,640,644
** HOT: 648 - range: 648,64c,650
** HOT: 654 - range: 654,658,65c,660,664,668,66c
** HOT: 65c - range: 65c,660,664,668,66c
** HOT: 670 - range: 670,674,678
** HOT: 67c - range: 67c,680,684,688,68c,690,694
** HOT: 684 - range: 684,688,68c,690,694
** HOT: 698 - range: 698,69c,6a0
** HOT: 6a4 - range: 6a4,6a8
** HOT: 6bc - range: 6bc,6c0,6c4,6c8,6cc
