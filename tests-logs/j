Running in EVM:
0	 0	PUSH4	0090	 	 
- stack 0: 0x90
1	 5	PUSH2	01BC	 ;; _rambegin	 
- stack 1: 0x90
- stack 0: 0x1BC
2	 8	PUSH1	01	 	 
- stack 2: 0x90
- stack 1: 0x1BC
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x90
- stack 0: 0x1BD
4	 B	PUSH2	0400	 	 
- stack 2: 0x90
- stack 1: 0x1BD
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100000034048000530042006600000086000200A0000800A0003400C90001
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100000034048000530042006600000086000200A0000800A0003400C90001
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34048000530042006600000086000200A0000800A0003400C9000100A00014
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34048000530042006600000086000200A0000800A0003400C9000100A00014
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1152(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34048000530042006600000086000200A0000800A0003400C9000100A00014
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34048000530042006600000086000200A0000800A0003400C9000100A00014
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340480
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340480
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x480
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x480
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x480
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x480
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x480
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x480
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x480
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000200A0000800A0003400C9000100A0001400E30001
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000200A0000800A0003400C9000100A0001400E30001
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000200A0000800A0003400C9000100A0001400E3000100E30001
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000200A0000800A0003400C9000100A0001400E3000100E30001
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_914cd8ef66faf1e62b52500913ed11896572624ee252767752fdb6225778956d	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_914cd8ef66faf1e62b52500913ed11896572624ee252767752fdb6225778956d	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x480
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000800A0003400C9000100A0001400E3000100E3000100E30001
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000800A0003400C9000100A0001400E3000100E3000100E30001
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000800A0003400C9000100A0001400E3000100E3000100E30001
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000800A0003400C9000100A0001400E3000100E3000100E30001
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860002
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860002
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x2
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x2
84	 93	PUSH2	0380	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x380
85	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000800A0003400C9000100A0001400E3000100E3000100E3000100E30001
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000800A0003400C9000100A0001400E3000100E3000100E3000100E30001
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_JAL_0_0_0	  ;; # instr: jal zero,8(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	 
- stack 1: 0x414
- stack 0: 0x414
95	 A2	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x414
- stack 1: 0x414
- stack 0: 0x414
96	 A3	MLOAD		 	 
- stack 2: 0x414
- stack 1: 0x414
- stack 0: 0xA0000800A0003400C9000100A0001400E3000100E3000100E3000100E30001
97	 A4	PUSH1	E0	 	 
- stack 3: 0x414
- stack 2: 0x414
- stack 1: 0xA0000800A0003400C9000100A0001400E3000100E3000100E3000100E30001
- stack 0: 0xE0
98	 A6	SHR		 	 
- stack 2: 0x414
- stack 1: 0x414
- stack 0: 0xA00008
99	 A7	PUSH2	FFFF	 	 
- stack 3: 0x414
- stack 2: 0x414
- stack 1: 0xA00008
- stack 0: 0xFFFF
100	 AA	AND		 	 
- stack 2: 0x414
- stack 1: 0x414
- stack 0: 0x8
101	 AB	PUSH1	01	 	 
- stack 3: 0x414
- stack 2: 0x414
- stack 1: 0x8
- stack 0: 0x1
102	 AD	SIGNEXTEND		 	 
- stack 2: 0x414
- stack 1: 0x414
- stack 0: 0x8
103	 AE	ADD		 	 
- stack 1: 0x414
- stack 0: 0x41C
104	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x414
- stack 1: 0x41C
- stack 0: 0xFFFFFFFF
105	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x414
- stack 0: 0x41C
106	 B5	SWAP1		 	 
- stack 1: 0x41C
- stack 0: 0x414
107	 B6	PUSH1	04	 	 
- stack 2: 0x41C
- stack 1: 0x414
- stack 0: 0x4
108	 B8	ADD		 	 
- stack 1: 0x41C
- stack 0: 0x418
109	 B9	POP		 	 
- stack 0: 0x41C
110	 BA	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
111	 BB	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xC9000100A0001400E3000100E3000100E3000100E3000100E3000100E30001
112	 BC	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xC9000100A0001400E3000100E3000100E3000100E3000100E3000100E30001
- stack 0: 0xF0
113	 BE	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xC9
114	 BF	JUMP		 	 
- stack 0: 0x41C
115	 C9	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x41C
116	 CA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
117	 CB	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xC9000100A0001400E3000100E3000100E3000100E3000100E3000100E30001
118	 CC	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xC9000100A0001400E3000100E3000100E3000100E3000100E3000100E30001
- stack 0: 0xE0
119	 CE	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xC90001
120	 CF	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xC90001
- stack 0: 0xFFFF
121	 D2	AND		 	 
- stack 1: 0x41C
- stack 0: 0x1
122	 D3	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0x1
123	 D5	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x1
124	 D6	PUSH2	0020	 	 
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0x20
125	 D9	MSTORE		 	  ;; # store to x1
- stack 0: 0x41C
126	 DA	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
127	 DC	ADD		 	 
- stack 0: 0x420
128	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
129	 DE	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xA0001400E3000100E3000100E3000100E3000100E3000100E3000101020003
130	 DF	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xA0001400E3000100E3000100E3000100E3000100E3000100E3000101020003
- stack 0: 0xF0
131	 E1	SHR		 	 
- stack 1: 0x420
- stack 0: 0xA0
132	 E2	JUMP		 	 
- stack 0: 0x420
133	 A0	JUMPDEST		 ;; __riscvimpl_JAL_0_0_0	  ;; # instr: jal zero,8(ignore imm)
- stack 0: 0x420
134	 A1	DUP1		 	 
- stack 1: 0x420
- stack 0: 0x420
135	 A2	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x420
- stack 1: 0x420
- stack 0: 0x420
136	 A3	MLOAD		 	 
- stack 2: 0x420
- stack 1: 0x420
- stack 0: 0xA0001400E3000100E3000100E3000100E3000100E3000100E3000101020003
137	 A4	PUSH1	E0	 	 
- stack 3: 0x420
- stack 2: 0x420
- stack 1: 0xA0001400E3000100E3000100E3000100E3000100E3000100E3000101020003
- stack 0: 0xE0
138	 A6	SHR		 	 
- stack 2: 0x420
- stack 1: 0x420
- stack 0: 0xA00014
139	 A7	PUSH2	FFFF	 	 
- stack 3: 0x420
- stack 2: 0x420
- stack 1: 0xA00014
- stack 0: 0xFFFF
140	 AA	AND		 	 
- stack 2: 0x420
- stack 1: 0x420
- stack 0: 0x14
141	 AB	PUSH1	01	 	 
- stack 3: 0x420
- stack 2: 0x420
- stack 1: 0x14
- stack 0: 0x1
142	 AD	SIGNEXTEND		 	 
- stack 2: 0x420
- stack 1: 0x420
- stack 0: 0x14
143	 AE	ADD		 	 
- stack 1: 0x420
- stack 0: 0x434
144	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x420
- stack 1: 0x434
- stack 0: 0xFFFFFFFF
145	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x420
- stack 0: 0x434
146	 B5	SWAP1		 	 
- stack 1: 0x434
- stack 0: 0x420
147	 B6	PUSH1	04	 	 
- stack 2: 0x434
- stack 1: 0x420
- stack 0: 0x4
148	 B8	ADD		 	 
- stack 1: 0x434
- stack 0: 0x424
149	 B9	POP		 	 
- stack 0: 0x434
150	 BA	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
151	 BB	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xE3000100E300010102000300860003011C0008015E00180021000000340488
152	 BC	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xE3000100E300010102000300860003011C0008015E00180021000000340488
- stack 0: 0xF0
153	 BE	SHR		 	 
- stack 1: 0x434
- stack 0: 0xE3
154	 BF	JUMP		 	 
- stack 0: 0x434
155	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x434
156	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
157	 E5	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xE3000100E300010102000300860003011C0008015E00180021000000340488
158	 E6	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xE3000100E300010102000300860003011C0008015E00180021000000340488
- stack 0: 0xE0
159	 E8	SHR		 	 
- stack 1: 0x434
- stack 0: 0xE30001
160	 E9	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xE30001
- stack 0: 0xFFFF
161	 EC	AND		 	 
- stack 1: 0x434
- stack 0: 0x1
162	 ED	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0x1
- stack 0: 0x1
163	 EF	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0x1
164	 F0	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0x1
- stack 0: 0x20
165	 F3	MLOAD		 	  ;; # read from x1
- stack 2: 0x434
- stack 1: 0x1
- stack 0: 0x1
166	 F4	ADD		 	  ;; # ADDI 1
- stack 1: 0x434
- stack 0: 0x2
167	 F5	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0x2
- stack 0: 0x20
168	 F8	MSTORE		 	  ;; # store to x1
- stack 0: 0x434
169	 F9	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
170	 FB	ADD		 	 
- stack 0: 0x438
171	 FC	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
172	 FD	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xE300010102000300860003011C0008015E0018002100000034048800530042
173	 FE	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xE300010102000300860003011C0008015E0018002100000034048800530042
- stack 0: 0xF0
174	 100	SHR		 	 
- stack 1: 0x438
- stack 0: 0xE3
175	 101	JUMP		 	 
- stack 0: 0x438
176	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x438
177	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
178	 E5	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xE300010102000300860003011C0008015E0018002100000034048800530042
179	 E6	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xE300010102000300860003011C0008015E0018002100000034048800530042
- stack 0: 0xE0
180	 E8	SHR		 	 
- stack 1: 0x438
- stack 0: 0xE30001
181	 E9	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xE30001
- stack 0: 0xFFFF
182	 EC	AND		 	 
- stack 1: 0x438
- stack 0: 0x1
183	 ED	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x1
- stack 0: 0x1
184	 EF	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x1
185	 F0	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0x1
- stack 0: 0x20
186	 F3	MLOAD		 	  ;; # read from x1
- stack 2: 0x438
- stack 1: 0x1
- stack 0: 0x2
187	 F4	ADD		 	  ;; # ADDI 1
- stack 1: 0x438
- stack 0: 0x3
188	 F5	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x20
189	 F8	MSTORE		 	  ;; # store to x1
- stack 0: 0x438
190	 F9	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
191	 FB	ADD		 	 
- stack 0: 0x43C
192	 FC	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
193	 FD	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x102000300860003011C0008015E001800210000003404880053004200660000
194	 FE	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x102000300860003011C0008015E001800210000003404880053004200660000
- stack 0: 0xF0
195	 100	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x102
196	 101	JUMP		 	 
- stack 0: 0x43C
197	 102	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,3(ignore imm)
- stack 0: 0x43C
198	 103	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
199	 104	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x102000300860003011C0008015E001800210000003404880053004200660000
200	 105	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0x102000300860003011C0008015E001800210000003404880053004200660000
- stack 0: 0xE0
201	 107	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x1020003
202	 108	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0x1020003
- stack 0: 0xFFFF
203	 10B	AND		 	 
- stack 1: 0x43C
- stack 0: 0x3
204	 10C	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0x3
- stack 0: 0x1
205	 10E	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0x3
206	 10F	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0x3
- stack 0: 0x3A0
207	 112	MSTORE		 	  ;; # store to x29
- stack 0: 0x43C
208	 113	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
209	 115	ADD		 	 
- stack 0: 0x440
210	 116	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
211	 117	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x860003011C0008015E001800210000003404880053004200660000019E0001
212	 118	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x860003011C0008015E001800210000003404880053004200660000019E0001
- stack 0: 0xF0
213	 11A	SHR		 	 
- stack 1: 0x440
- stack 0: 0x86
214	 11B	JUMP		 	 
- stack 0: 0x440
215	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x440
216	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
217	 88	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x860003011C0008015E001800210000003404880053004200660000019E0001
218	 89	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0x860003011C0008015E001800210000003404880053004200660000019E0001
- stack 0: 0xE0
219	 8B	SHR		 	 
- stack 1: 0x440
- stack 0: 0x860003
220	 8C	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0x860003
- stack 0: 0xFFFF
221	 8F	AND		 	 
- stack 1: 0x440
- stack 0: 0x3
222	 90	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x1
223	 92	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0x3
224	 93	PUSH2	0380	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x380
225	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x440
226	 97	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
227	 99	ADD		 	 
- stack 0: 0x444
228	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
229	 9B	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x11C0008015E001800210000003404880053004200660000019E000100210000
230	 9C	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x11C0008015E001800210000003404880053004200660000019E000100210000
- stack 0: 0xF0
231	 9E	SHR		 	 
- stack 1: 0x444
- stack 0: 0x11C
232	 9F	JUMP		 	 
- stack 0: 0x444
233	 11C	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,8(ignore imm)
- stack 0: 0x444
234	 11D	PUSH2	0020	 	 
- stack 1: 0x444
- stack 0: 0x20
235	 120	MLOAD		 	  ;; # read from x1
- stack 1: 0x444
- stack 0: 0x3
236	 121	PUSH4	FFFFFFFF	 	 
- stack 2: 0x444
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
237	 126	AND		 	  ;; # mask to 32 bits
- stack 1: 0x444
- stack 0: 0x3
238	 127	PUSH2	03A0	 	 
- stack 2: 0x444
- stack 1: 0x3
- stack 0: 0x3A0
239	 12A	MLOAD		 	  ;; # read from x29
- stack 2: 0x444
- stack 1: 0x3
- stack 0: 0x3
240	 12B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x444
- stack 2: 0x3
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
241	 130	AND		 	  ;; # mask to 32 bits
- stack 2: 0x444
- stack 1: 0x3
- stack 0: 0x3
242	 131	SUB		 	 
- stack 1: 0x444
- stack 0: 0x0
243	 132	PUSH2	013A	 ;; _neq_2492e10dfcb7475178b82dbb1479df7e0177e80ad01e3afdf0a5d723ec854b5f	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x13A
244	 135	JUMPI		 	 
- stack 0: 0x444
245	 136	PUSH2	0154	 ;; _neq_after_2492e10dfcb7475178b82dbb1479df7e0177e80ad01e3afdf0a5d723ec854b5f	 
- stack 1: 0x444
- stack 0: 0x154
246	 139	JUMP		 	 
- stack 0: 0x444
247	 154	JUMPDEST		 ;; _neq_after_2492e10dfcb7475178b82dbb1479df7e0177e80ad01e3afdf0a5d723ec854b5f	 
- stack 0: 0x444
248	 155	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
249	 157	ADD		 	 
- stack 0: 0x448
250	 158	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
251	 159	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x15E001800210000003404880053004200660000019E0001002100000034048C
252	 15A	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0x15E001800210000003404880053004200660000019E0001002100000034048C
- stack 0: 0xF0
253	 15C	SHR		 	 
- stack 1: 0x448
- stack 0: 0x15E
254	 15D	JUMP		 	 
- stack 0: 0x448
255	 15E	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x448
256	 15F	PUSH1	00	 	 
- stack 1: 0x448
- stack 0: 0x0
257	 161	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
258	 166	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0x0
259	 167	PUSH2	0380	 	 
- stack 2: 0x448
- stack 1: 0x0
- stack 0: 0x380
260	 16A	MLOAD		 	  ;; # read from x28
- stack 2: 0x448
- stack 1: 0x0
- stack 0: 0x3
261	 16B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x448
- stack 2: 0x0
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
262	 170	AND		 	  ;; # mask to 32 bits
- stack 2: 0x448
- stack 1: 0x0
- stack 0: 0x3
263	 171	SUB		 	 
- stack 1: 0x448
- stack 0: 0x3
264	 172	PUSH2	017A	 ;; _neq_3e965bdbf4ea95a5d833007dc0b9701f5d8f9a5425b09232e29b4c6ce1236ea2	 
- stack 2: 0x448
- stack 1: 0x3
- stack 0: 0x17A
265	 175	JUMPI		 	 
- stack 0: 0x448
266	 17A	JUMPDEST		 ;; _neq_3e965bdbf4ea95a5d833007dc0b9701f5d8f9a5425b09232e29b4c6ce1236ea2	 
- stack 0: 0x448
267	 17B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x448
- stack 0: 0x448
268	 17C	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x15E001800210000003404880053004200660000019E0001002100000034048C
269	 17D	PUSH1	E0	 	 
- stack 2: 0x448
- stack 1: 0x15E001800210000003404880053004200660000019E0001002100000034048C
- stack 0: 0xE0
270	 17F	SHR		 	 
- stack 1: 0x448
- stack 0: 0x15E0018
271	 180	PUSH2	FFFF	 	 
- stack 2: 0x448
- stack 1: 0x15E0018
- stack 0: 0xFFFF
272	 183	AND		 	 
- stack 1: 0x448
- stack 0: 0x18
273	 184	PUSH1	01	 	 
- stack 2: 0x448
- stack 1: 0x18
- stack 0: 0x1
274	 186	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0x18
275	 187	ADD		 	 
- stack 0: 0x460
276	 188	PUSH4	FFFFFFFF	 	 
- stack 1: 0x460
- stack 0: 0xFFFFFFFF
277	 18D	AND		 	  ;; # mask to 32 bits
- stack 0: 0x460
278	 18E	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
279	 18F	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x2100000034048C005300420066000001A90000006600000000000000000000
280	 190	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x2100000034048C005300420066000001A90000006600000000000000000000
- stack 0: 0xF0
281	 192	SHR		 	 
- stack 1: 0x460
- stack 0: 0x21
282	 193	JUMP		 	 
- stack 0: 0x460
283	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x460
284	 22	PUSH4	00000000	 	 
- stack 1: 0x460
- stack 0: 0x0
285	 27	PUSH2	0160	 	 
- stack 2: 0x460
- stack 1: 0x0
- stack 0: 0x160
286	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x460
287	 2B	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
288	 2D	ADD		 	 
- stack 0: 0x464
289	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
290	 2F	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x34048C005300420066000001A900000066000000000000000000006574796D
291	 30	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x34048C005300420066000001A900000066000000000000000000006574796D
- stack 0: 0xF0
292	 32	SHR		 	 
- stack 1: 0x464
- stack 0: 0x34
293	 33	JUMP		 	 
- stack 0: 0x464
294	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1152(ignore imm)
- stack 0: 0x464
295	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
296	 36	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x34048C005300420066000001A900000066000000000000000000006574796D
297	 37	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0x34048C005300420066000001A900000066000000000000000000006574796D
- stack 0: 0xE0
298	 39	SHR		 	 
- stack 1: 0x464
- stack 0: 0x34048C
299	 3A	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0x34048C
- stack 0: 0xFFFF
300	 3D	AND		 	 
- stack 1: 0x464
- stack 0: 0x48C
301	 3E	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0x48C
- stack 0: 0x1
302	 40	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0x48C
303	 41	PUSH2	0160	 	 
- stack 2: 0x464
- stack 1: 0x48C
- stack 0: 0x160
304	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x464
- stack 1: 0x48C
- stack 0: 0x0
305	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x464
- stack 0: 0x48C
306	 46	PUSH2	0160	 	 
- stack 2: 0x464
- stack 1: 0x48C
- stack 0: 0x160
307	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x464
308	 4A	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
309	 4C	ADD		 	 
- stack 0: 0x468
310	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
311	 4E	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x5300420066000001A900000066000000000000000000006574796D00007473
312	 4F	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x5300420066000001A900000066000000000000000000006574796D00007473
- stack 0: 0xF0
313	 51	SHR		 	 
- stack 1: 0x468
- stack 0: 0x53
314	 52	JUMP		 	 
- stack 0: 0x468
315	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x468
316	 54	PUSH4	00042000	 	 
- stack 1: 0x468
- stack 0: 0x42000
317	 59	PUSH2	0140	 	 
- stack 2: 0x468
- stack 1: 0x42000
- stack 0: 0x140
318	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x468
319	 5D	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
320	 5F	ADD		 	 
- stack 0: 0x46C
321	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
322	 61	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x66000001A900000066000000000000000000006574796D0000747300525245
323	 62	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x66000001A900000066000000000000000000006574796D0000747300525245
- stack 0: 0xF0
324	 64	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x66
325	 65	JUMP		 	 
- stack 0: 0x46C
326	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x46C
327	 67	PUSH2	0140	 	 
- stack 1: 0x46C
- stack 0: 0x140
328	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x46C
- stack 0: 0x42000
329	 6B	PUSH2	0075	 ;; _ecall_914cd8ef66faf1e62b52500913ed11896572624ee252767752fdb6225778956d	 
- stack 2: 0x46C
- stack 1: 0x42000
- stack 0: 0x75
330	 6E	JUMPI		 	 
- stack 0: 0x46C
331	 75	JUMPDEST		 ;; _ecall_914cd8ef66faf1e62b52500913ed11896572624ee252767752fdb6225778956d	 
- stack 0: 0x46C
332	 76	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
333	 78	PUSH2	0160	 	 
- stack 2: 0x46C
- stack 1: 0x4
- stack 0: 0x160
334	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x46C
- stack 1: 0x4
- stack 0: 0x48C
335	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x46C
336	 7D	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
337	 7F	ADD		 	 
- stack 0: 0x470
338	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
339	 81	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x1A900000066000000000000000000006574796D000074730052524500004B4F
340	 82	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x1A900000066000000000000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
341	 84	SHR		 	 
- stack 1: 0x470
- stack 0: 0x1A9
342	 85	JUMP		 	 
- stack 0: 0x470
343	 1A9	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x470
344	 1AA	PUSH4	00000000	 	 
- stack 1: 0x470
- stack 0: 0x0
345	 1AF	PUSH2	0140	 	 
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x140
346	 1B2	MSTORE		 	  ;; # store to x10
- stack 0: 0x470
347	 1B3	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
348	 1B5	ADD		 	 
- stack 0: 0x474
349	 1B6	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
350	 1B7	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x66000000000000000000006574796D000074730052524500004B4F00000000
351	 1B8	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x66000000000000000000006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
352	 1BA	SHR		 	 
- stack 1: 0x474
- stack 0: 0x66
353	 1BB	JUMP		 	 
- stack 0: 0x474
354	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x474
355	 67	PUSH2	0140	 	 
- stack 1: 0x474
- stack 0: 0x140
356	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x474
- stack 0: 0x0
357	 6B	PUSH2	0075	 ;; _ecall_914cd8ef66faf1e62b52500913ed11896572624ee252767752fdb6225778956d	 
- stack 2: 0x474
- stack 1: 0x0
- stack 0: 0x75
358	 6E	JUMPI		 	 
- stack 0: 0x474
359	 6F	PUSH1	20	 	 
- stack 1: 0x474
- stack 0: 0x20
360	 71	PUSH2	0160	 	 
- stack 2: 0x474
- stack 1: 0x20
- stack 0: 0x160
361	 74	RETURN		 	 
Final bytecode length; 589
Returned: 000000000000000000000000000000000000000000000000000000000000048c
gasUsed : 2134
** HOT: 400 - range: 400,404,408,40c,410,414
** HOT: 41c - range: 41c,420
** HOT: 434 - range: 434,438,43c,440,444
