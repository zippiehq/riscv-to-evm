Running in EVM:
0	 0	PUSH4	00B0	 	 
- stack 0: 0xB0
1	 5	PUSH2	026A	 ;; _rambegin	 
- stack 1: 0xB0
- stack 0: 0x26A
2	 8	PUSH1	01	 	 
- stack 2: 0xB0
- stack 1: 0x26A
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0xB0
- stack 0: 0x26B
4	 B	PUSH2	0400	 	 
- stack 2: 0xB0
- stack 1: 0x26B
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x210000003404A000530042006600000086000200A0000000BA001000E60000
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x210000003404A000530042006600000086000200A0000000BA001000E60000
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3404A000530042006600000086000200A0000000BA001000E6000000E60000
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x3404A000530042006600000086000200A0000000BA001000E6000000E60000
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1184(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3404A000530042006600000086000200A0000000BA001000E6000000E60000
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x3404A000530042006600000086000200A0000000BA001000E6000000E60000
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x3404A0
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x3404A0
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x4A0
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x4A0
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x4A0
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x4A0
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x4A0
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x4A0
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x4A0
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000200A0000000BA001000E6000000E6000000FD0044
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000200A0000000BA001000E6000000E6000000FD0044
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000200A0000000BA001000E6000000E6000000FD004401260000
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000200A0000000BA001000E6000000E6000000FD004401260000
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_0500dceadc81fd41d174aeea8ba52bff5c8798ec6dd26c130f7caaeeb905c8e3	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_0500dceadc81fd41d174aeea8ba52bff5c8798ec6dd26c130f7caaeeb905c8e3	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x4A0
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA001000E6000000E6000000FD0044012600000135FFF0
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA001000E6000000E6000000FD0044012600000135FFF0
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA001000E6000000E6000000FD0044012600000135FFF0
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA001000E6000000E6000000FD0044012600000135FFF0
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860002
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860002
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x2
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x2
84	 93	PUSH2	0380	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x380
85	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA001000E6000000E6000000FD0044012600000135FFF001350004
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA001000E6000000E6000000FD0044012600000135FFF001350004
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA001000E6000000E6000000FD0044012600000135FFF001350004
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA001000E6000000E6000000FD0044012600000135FFF001350004
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x20
103	 B0	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
104	 B1	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
105	 B3	ADD		 	 
- stack 0: 0x418
106	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
107	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA001000E6000000E6000000FD0044012600000135FFF00135000401540034
108	 B6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBA001000E6000000E6000000FD0044012600000135FFF00135000401540034
- stack 0: 0xF0
109	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA
110	 B9	JUMP		 	 
- stack 0: 0x418
111	 BA	JUMPDEST		 ;; __riscvimpl_JAL_1_0_0	  ;; # instr: jal ra,10(ignore imm)
- stack 0: 0x418
112	 BB	DUP1		 	 
- stack 1: 0x418
- stack 0: 0x418
113	 BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x418
- stack 1: 0x418
- stack 0: 0x418
114	 BD	MLOAD		 	 
- stack 2: 0x418
- stack 1: 0x418
- stack 0: 0xBA001000E6000000E6000000FD0044012600000135FFF00135000401540034
115	 BE	PUSH1	E0	 	 
- stack 3: 0x418
- stack 2: 0x418
- stack 1: 0xBA001000E6000000E6000000FD0044012600000135FFF00135000401540034
- stack 0: 0xE0
116	 C0	SHR		 	 
- stack 2: 0x418
- stack 1: 0x418
- stack 0: 0xBA0010
117	 C1	PUSH2	FFFF	 	 
- stack 3: 0x418
- stack 2: 0x418
- stack 1: 0xBA0010
- stack 0: 0xFFFF
118	 C4	AND		 	 
- stack 2: 0x418
- stack 1: 0x418
- stack 0: 0x10
119	 C5	PUSH1	01	 	 
- stack 3: 0x418
- stack 2: 0x418
- stack 1: 0x10
- stack 0: 0x1
120	 C7	SIGNEXTEND		 	 
- stack 2: 0x418
- stack 1: 0x418
- stack 0: 0x10
121	 C8	ADD		 	 
- stack 1: 0x418
- stack 0: 0x428
122	 C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x418
- stack 1: 0x428
- stack 0: 0xFFFFFFFF
123	 CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x418
- stack 0: 0x428
124	 CF	SWAP1		 	 
- stack 1: 0x428
- stack 0: 0x418
125	 D0	PUSH1	04	 	 
- stack 2: 0x428
- stack 1: 0x418
- stack 0: 0x4
126	 D2	ADD		 	 
- stack 1: 0x428
- stack 0: 0x41C
127	 D3	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x41C
- stack 0: 0x20
128	 D6	MSTORE		 	  ;; # store to x1
- stack 0: 0x428
129	 D7	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
130	 D8	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x12600000135FFF001350004015400340196000100BA00140135000101350001
131	 D9	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x12600000135FFF001350004015400340196000100BA00140135000101350001
- stack 0: 0xF0
132	 DB	SHR		 	 
- stack 1: 0x428
- stack 0: 0x126
133	 DC	JUMP		 	 
- stack 0: 0x428
134	 126	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x428
135	 127	DUP1		 	 
- stack 1: 0x428
- stack 0: 0x428
136	 128	PUSH2	0040	 	 
- stack 2: 0x428
- stack 1: 0x428
- stack 0: 0x40
137	 12B	MSTORE		 	  ;; # store to x2
- stack 0: 0x428
138	 12C	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
139	 12E	ADD		 	 
- stack 0: 0x42C
140	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
141	 130	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x135FFF001350004015400340196000100BA0014013500010135000101350001
142	 131	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x135FFF001350004015400340196000100BA0014013500010135000101350001
- stack 0: 0xF0
143	 133	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x135
144	 134	JUMP		 	 
- stack 0: 0x42C
145	 135	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-16(ignore imm)
- stack 0: 0x42C
146	 136	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
147	 137	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x135FFF001350004015400340196000100BA0014013500010135000101350001
148	 138	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0x135FFF001350004015400340196000100BA0014013500010135000101350001
- stack 0: 0xE0
149	 13A	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x135FFF0
150	 13B	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0x135FFF0
- stack 0: 0xFFFF
151	 13E	AND		 	 
- stack 1: 0x42C
- stack 0: 0xFFF0
152	 13F	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0xFFF0
- stack 0: 0x1
153	 141	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
154	 142	PUSH2	0040	 	 
- stack 2: 0x42C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x40
155	 145	MLOAD		 	  ;; # read from x2
- stack 2: 0x42C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x428
156	 146	ADD		 	  ;; # ADDI 2
- stack 1: 0x42C
- stack 0: 0x418
157	 147	PUSH2	0040	 	 
- stack 2: 0x42C
- stack 1: 0x418
- stack 0: 0x40
158	 14A	MSTORE		 	  ;; # store to x2
- stack 0: 0x42C
159	 14B	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
160	 14D	ADD		 	 
- stack 0: 0x430
161	 14E	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
162	 14F	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x1350004015400340196000100BA001401350001013500010135000101350001
163	 150	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x1350004015400340196000100BA001401350001013500010135000101350001
- stack 0: 0xF0
164	 152	SHR		 	 
- stack 1: 0x430
- stack 0: 0x135
165	 153	JUMP		 	 
- stack 0: 0x430
166	 135	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-16(ignore imm)
- stack 0: 0x430
167	 136	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
168	 137	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x1350004015400340196000100BA001401350001013500010135000101350001
169	 138	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0x1350004015400340196000100BA001401350001013500010135000101350001
- stack 0: 0xE0
170	 13A	SHR		 	 
- stack 1: 0x430
- stack 0: 0x1350004
171	 13B	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0x1350004
- stack 0: 0xFFFF
172	 13E	AND		 	 
- stack 1: 0x430
- stack 0: 0x4
173	 13F	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0x4
- stack 0: 0x1
174	 141	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x4
175	 142	PUSH2	0040	 	 
- stack 2: 0x430
- stack 1: 0x4
- stack 0: 0x40
176	 145	MLOAD		 	  ;; # read from x2
- stack 2: 0x430
- stack 1: 0x4
- stack 0: 0x418
177	 146	ADD		 	  ;; # ADDI 2
- stack 1: 0x430
- stack 0: 0x41C
178	 147	PUSH2	0040	 	 
- stack 2: 0x430
- stack 1: 0x41C
- stack 0: 0x40
179	 14A	MSTORE		 	  ;; # store to x2
- stack 0: 0x430
180	 14B	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
181	 14D	ADD		 	 
- stack 0: 0x434
182	 14E	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
183	 14F	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x15400340196000100BA00140135000101350001013500010135000101350001
184	 150	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0x15400340196000100BA00140135000101350001013500010135000101350001
- stack 0: 0xF0
185	 152	SHR		 	 
- stack 1: 0x434
- stack 0: 0x154
186	 153	JUMP		 	 
- stack 0: 0x434
187	 154	JUMPDEST		 ;; __riscvimpl_BNE_0_2_1	  ;; # instr: bne sp,ra,34(ignore imm)
- stack 0: 0x434
188	 155	PUSH2	0040	 	 
- stack 1: 0x434
- stack 0: 0x40
189	 158	MLOAD		 	  ;; # read from x2
- stack 1: 0x434
- stack 0: 0x41C
190	 159	PUSH4	FFFFFFFF	 	 
- stack 2: 0x434
- stack 1: 0x41C
- stack 0: 0xFFFFFFFF
191	 15E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x434
- stack 0: 0x41C
192	 15F	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0x41C
- stack 0: 0x20
193	 162	MLOAD		 	  ;; # read from x1
- stack 2: 0x434
- stack 1: 0x41C
- stack 0: 0x41C
194	 163	PUSH4	FFFFFFFF	 	 
- stack 3: 0x434
- stack 2: 0x41C
- stack 1: 0x41C
- stack 0: 0xFFFFFFFF
195	 168	AND		 	  ;; # mask to 32 bits
- stack 2: 0x434
- stack 1: 0x41C
- stack 0: 0x41C
196	 169	SUB		 	 
- stack 1: 0x434
- stack 0: 0x0
197	 16A	PUSH2	0172	 ;; _neq_a50342cb1b3bd07c2ef3b42560c8f448a186125722a3e45391f4b13528185da3	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x172
198	 16D	JUMPI		 	 
- stack 0: 0x434
199	 16E	PUSH2	018C	 ;; _neq_after_a50342cb1b3bd07c2ef3b42560c8f448a186125722a3e45391f4b13528185da3	 
- stack 1: 0x434
- stack 0: 0x18C
200	 171	JUMP		 	 
- stack 0: 0x434
201	 18C	JUMPDEST		 ;; _neq_after_a50342cb1b3bd07c2ef3b42560c8f448a186125722a3e45391f4b13528185da3	 
- stack 0: 0x434
202	 18D	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
203	 18F	ADD		 	 
- stack 0: 0x438
204	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
205	 191	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x196000100BA0014013500010135000101350001013500010135000101350001
206	 192	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x196000100BA0014013500010135000101350001013500010135000101350001
- stack 0: 0xF0
207	 194	SHR		 	 
- stack 1: 0x438
- stack 0: 0x196
208	 195	JUMP		 	 
- stack 0: 0x438
209	 196	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,1(ignore imm)
- stack 0: 0x438
210	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
211	 198	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x196000100BA0014013500010135000101350001013500010135000101350001
212	 199	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0x196000100BA0014013500010135000101350001013500010135000101350001
- stack 0: 0xE0
213	 19B	SHR		 	 
- stack 1: 0x438
- stack 0: 0x1960001
214	 19C	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0x1960001
- stack 0: 0xFFFF
215	 19F	AND		 	 
- stack 1: 0x438
- stack 0: 0x1
216	 1A0	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x1
- stack 0: 0x1
217	 1A2	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x1
218	 1A3	PUSH2	0040	 	 
- stack 2: 0x438
- stack 1: 0x1
- stack 0: 0x40
219	 1A6	MSTORE		 	  ;; # store to x2
- stack 0: 0x438
220	 1A7	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
221	 1A9	ADD		 	 
- stack 0: 0x43C
222	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
223	 1AB	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xBA001401350001013500010135000101350001013500010135000101B00003
224	 1AC	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xBA001401350001013500010135000101350001013500010135000101B00003
- stack 0: 0xF0
225	 1AE	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xBA
226	 1AF	JUMP		 	 
- stack 0: 0x43C
227	 BA	JUMPDEST		 ;; __riscvimpl_JAL_1_0_0	  ;; # instr: jal ra,10(ignore imm)
- stack 0: 0x43C
228	 BB	DUP1		 	 
- stack 1: 0x43C
- stack 0: 0x43C
229	 BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x43C
- stack 1: 0x43C
- stack 0: 0x43C
230	 BD	MLOAD		 	 
- stack 2: 0x43C
- stack 1: 0x43C
- stack 0: 0xBA001401350001013500010135000101350001013500010135000101B00003
231	 BE	PUSH1	E0	 	 
- stack 3: 0x43C
- stack 2: 0x43C
- stack 1: 0xBA001401350001013500010135000101350001013500010135000101B00003
- stack 0: 0xE0
232	 C0	SHR		 	 
- stack 2: 0x43C
- stack 1: 0x43C
- stack 0: 0xBA0014
233	 C1	PUSH2	FFFF	 	 
- stack 3: 0x43C
- stack 2: 0x43C
- stack 1: 0xBA0014
- stack 0: 0xFFFF
234	 C4	AND		 	 
- stack 2: 0x43C
- stack 1: 0x43C
- stack 0: 0x14
235	 C5	PUSH1	01	 	 
- stack 3: 0x43C
- stack 2: 0x43C
- stack 1: 0x14
- stack 0: 0x1
236	 C7	SIGNEXTEND		 	 
- stack 2: 0x43C
- stack 1: 0x43C
- stack 0: 0x14
237	 C8	ADD		 	 
- stack 1: 0x43C
- stack 0: 0x450
238	 C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0x450
- stack 0: 0xFFFFFFFF
239	 CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0x450
240	 CF	SWAP1		 	 
- stack 1: 0x450
- stack 0: 0x43C
241	 D0	PUSH1	04	 	 
- stack 2: 0x450
- stack 1: 0x43C
- stack 0: 0x4
242	 D2	ADD		 	 
- stack 1: 0x450
- stack 0: 0x440
243	 D3	PUSH2	0020	 	 
- stack 2: 0x450
- stack 1: 0x440
- stack 0: 0x20
244	 D6	MSTORE		 	  ;; # store to x1
- stack 0: 0x450
245	 D7	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
246	 D8	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x13500010135000101B000030086000301CA0008020C001800210000003404A8
247	 D9	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x13500010135000101B000030086000301CA0008020C001800210000003404A8
- stack 0: 0xF0
248	 DB	SHR		 	 
- stack 1: 0x450
- stack 0: 0x135
249	 DC	JUMP		 	 
- stack 0: 0x450
250	 135	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-16(ignore imm)
- stack 0: 0x450
251	 136	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
252	 137	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x13500010135000101B000030086000301CA0008020C001800210000003404A8
253	 138	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x13500010135000101B000030086000301CA0008020C001800210000003404A8
- stack 0: 0xE0
254	 13A	SHR		 	 
- stack 1: 0x450
- stack 0: 0x1350001
255	 13B	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x1350001
- stack 0: 0xFFFF
256	 13E	AND		 	 
- stack 1: 0x450
- stack 0: 0x1
257	 13F	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x1
- stack 0: 0x1
258	 141	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x1
259	 142	PUSH2	0040	 	 
- stack 2: 0x450
- stack 1: 0x1
- stack 0: 0x40
260	 145	MLOAD		 	  ;; # read from x2
- stack 2: 0x450
- stack 1: 0x1
- stack 0: 0x1
261	 146	ADD		 	  ;; # ADDI 2
- stack 1: 0x450
- stack 0: 0x2
262	 147	PUSH2	0040	 	 
- stack 2: 0x450
- stack 1: 0x2
- stack 0: 0x40
263	 14A	MSTORE		 	  ;; # store to x2
- stack 0: 0x450
264	 14B	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
265	 14D	ADD		 	 
- stack 0: 0x454
266	 14E	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
267	 14F	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x135000101B000030086000301CA0008020C001800210000003404A800530042
268	 150	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x135000101B000030086000301CA0008020C001800210000003404A800530042
- stack 0: 0xF0
269	 152	SHR		 	 
- stack 1: 0x454
- stack 0: 0x135
270	 153	JUMP		 	 
- stack 0: 0x454
271	 135	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-16(ignore imm)
- stack 0: 0x454
272	 136	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
273	 137	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x135000101B000030086000301CA0008020C001800210000003404A800530042
274	 138	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0x135000101B000030086000301CA0008020C001800210000003404A800530042
- stack 0: 0xE0
275	 13A	SHR		 	 
- stack 1: 0x454
- stack 0: 0x1350001
276	 13B	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0x1350001
- stack 0: 0xFFFF
277	 13E	AND		 	 
- stack 1: 0x454
- stack 0: 0x1
278	 13F	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0x1
- stack 0: 0x1
279	 141	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0x1
280	 142	PUSH2	0040	 	 
- stack 2: 0x454
- stack 1: 0x1
- stack 0: 0x40
281	 145	MLOAD		 	  ;; # read from x2
- stack 2: 0x454
- stack 1: 0x1
- stack 0: 0x2
282	 146	ADD		 	  ;; # ADDI 2
- stack 1: 0x454
- stack 0: 0x3
283	 147	PUSH2	0040	 	 
- stack 2: 0x454
- stack 1: 0x3
- stack 0: 0x40
284	 14A	MSTORE		 	  ;; # store to x2
- stack 0: 0x454
285	 14B	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
286	 14D	ADD		 	 
- stack 0: 0x458
287	 14E	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
288	 14F	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x1B000030086000301CA0008020C001800210000003404A80053004200660000
289	 150	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x1B000030086000301CA0008020C001800210000003404A80053004200660000
- stack 0: 0xF0
290	 152	SHR		 	 
- stack 1: 0x458
- stack 0: 0x1B0
291	 153	JUMP		 	 
- stack 0: 0x458
292	 1B0	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,3(ignore imm)
- stack 0: 0x458
293	 1B1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
294	 1B2	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x1B000030086000301CA0008020C001800210000003404A80053004200660000
295	 1B3	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0x1B000030086000301CA0008020C001800210000003404A80053004200660000
- stack 0: 0xE0
296	 1B5	SHR		 	 
- stack 1: 0x458
- stack 0: 0x1B00003
297	 1B6	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0x1B00003
- stack 0: 0xFFFF
298	 1B9	AND		 	 
- stack 1: 0x458
- stack 0: 0x3
299	 1BA	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0x3
- stack 0: 0x1
300	 1BC	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0x3
301	 1BD	PUSH2	03A0	 	 
- stack 2: 0x458
- stack 1: 0x3
- stack 0: 0x3A0
302	 1C0	MSTORE		 	  ;; # store to x29
- stack 0: 0x458
303	 1C1	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
304	 1C3	ADD		 	 
- stack 0: 0x45C
305	 1C4	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
306	 1C5	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x86000301CA0008020C001800210000003404A80053004200660000024C0001
307	 1C6	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x86000301CA0008020C001800210000003404A80053004200660000024C0001
- stack 0: 0xF0
308	 1C8	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x86
309	 1C9	JUMP		 	 
- stack 0: 0x45C
310	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x45C
311	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
312	 88	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x86000301CA0008020C001800210000003404A80053004200660000024C0001
313	 89	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0x86000301CA0008020C001800210000003404A80053004200660000024C0001
- stack 0: 0xE0
314	 8B	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x860003
315	 8C	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0x860003
- stack 0: 0xFFFF
316	 8F	AND		 	 
- stack 1: 0x45C
- stack 0: 0x3
317	 90	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0x3
- stack 0: 0x1
318	 92	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0x3
319	 93	PUSH2	0380	 	 
- stack 2: 0x45C
- stack 1: 0x3
- stack 0: 0x380
320	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x45C
321	 97	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
322	 99	ADD		 	 
- stack 0: 0x460
323	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
324	 9B	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x1CA0008020C001800210000003404A80053004200660000024C000100210000
325	 9C	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x1CA0008020C001800210000003404A80053004200660000024C000100210000
- stack 0: 0xF0
326	 9E	SHR		 	 
- stack 1: 0x460
- stack 0: 0x1CA
327	 9F	JUMP		 	 
- stack 0: 0x460
328	 1CA	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,8(ignore imm)
- stack 0: 0x460
329	 1CB	PUSH2	0040	 	 
- stack 1: 0x460
- stack 0: 0x40
330	 1CE	MLOAD		 	  ;; # read from x2
- stack 1: 0x460
- stack 0: 0x3
331	 1CF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x460
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
332	 1D4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x460
- stack 0: 0x3
333	 1D5	PUSH2	03A0	 	 
- stack 2: 0x460
- stack 1: 0x3
- stack 0: 0x3A0
334	 1D8	MLOAD		 	  ;; # read from x29
- stack 2: 0x460
- stack 1: 0x3
- stack 0: 0x3
335	 1D9	PUSH4	FFFFFFFF	 	 
- stack 3: 0x460
- stack 2: 0x3
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
336	 1DE	AND		 	  ;; # mask to 32 bits
- stack 2: 0x460
- stack 1: 0x3
- stack 0: 0x3
337	 1DF	SUB		 	 
- stack 1: 0x460
- stack 0: 0x0
338	 1E0	PUSH2	01E8	 ;; _neq_cb7545954b880b3ff80b2044a6366507de1851e149ccbf4353ea029b293dc04e	 
- stack 2: 0x460
- stack 1: 0x0
- stack 0: 0x1E8
339	 1E3	JUMPI		 	 
- stack 0: 0x460
340	 1E4	PUSH2	0202	 ;; _neq_after_cb7545954b880b3ff80b2044a6366507de1851e149ccbf4353ea029b293dc04e	 
- stack 1: 0x460
- stack 0: 0x202
341	 1E7	JUMP		 	 
- stack 0: 0x460
342	 202	JUMPDEST		 ;; _neq_after_cb7545954b880b3ff80b2044a6366507de1851e149ccbf4353ea029b293dc04e	 
- stack 0: 0x460
343	 203	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
344	 205	ADD		 	 
- stack 0: 0x464
345	 206	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
346	 207	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x20C001800210000003404A80053004200660000024C000100210000003404AC
347	 208	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x20C001800210000003404A80053004200660000024C000100210000003404AC
- stack 0: 0xF0
348	 20A	SHR		 	 
- stack 1: 0x464
- stack 0: 0x20C
349	 20B	JUMP		 	 
- stack 0: 0x464
350	 20C	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x464
351	 20D	PUSH1	00	 	 
- stack 1: 0x464
- stack 0: 0x0
352	 20F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
353	 214	AND		 	  ;; # mask to 32 bits
- stack 1: 0x464
- stack 0: 0x0
354	 215	PUSH2	0380	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x380
355	 218	MLOAD		 	  ;; # read from x28
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x3
356	 219	PUSH4	FFFFFFFF	 	 
- stack 3: 0x464
- stack 2: 0x0
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
357	 21E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x3
358	 21F	SUB		 	 
- stack 1: 0x464
- stack 0: 0x3
359	 220	PUSH2	0228	 ;; _neq_8ed41eb32dd7f74704827cc6e77bffd51e2ee212338d1e596ce266e02f49413c	 
- stack 2: 0x464
- stack 1: 0x3
- stack 0: 0x228
360	 223	JUMPI		 	 
- stack 0: 0x464
361	 228	JUMPDEST		 ;; _neq_8ed41eb32dd7f74704827cc6e77bffd51e2ee212338d1e596ce266e02f49413c	 
- stack 0: 0x464
362	 229	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
363	 22A	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x20C001800210000003404A80053004200660000024C000100210000003404AC
364	 22B	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0x20C001800210000003404A80053004200660000024C000100210000003404AC
- stack 0: 0xE0
365	 22D	SHR		 	 
- stack 1: 0x464
- stack 0: 0x20C0018
366	 22E	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0x20C0018
- stack 0: 0xFFFF
367	 231	AND		 	 
- stack 1: 0x464
- stack 0: 0x18
368	 232	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0x18
- stack 0: 0x1
369	 234	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0x18
370	 235	ADD		 	 
- stack 0: 0x47C
371	 236	PUSH4	FFFFFFFF	 	 
- stack 1: 0x47C
- stack 0: 0xFFFFFFFF
372	 23B	AND		 	  ;; # mask to 32 bits
- stack 0: 0x47C
373	 23C	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
374	 23D	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x210000003404AC005300420066000002570000006600000000000000000000
375	 23E	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x210000003404AC005300420066000002570000006600000000000000000000
- stack 0: 0xF0
376	 240	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x21
377	 241	JUMP		 	 
- stack 0: 0x47C
378	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x47C
379	 22	PUSH4	00000000	 	 
- stack 1: 0x47C
- stack 0: 0x0
380	 27	PUSH2	0160	 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x160
381	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x47C
382	 2B	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
383	 2D	ADD		 	 
- stack 0: 0x480
384	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
385	 2F	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x3404AC00530042006600000257000000660000000000000000000000000000
386	 30	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x3404AC00530042006600000257000000660000000000000000000000000000
- stack 0: 0xF0
387	 32	SHR		 	 
- stack 1: 0x480
- stack 0: 0x34
388	 33	JUMP		 	 
- stack 0: 0x480
389	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1184(ignore imm)
- stack 0: 0x480
390	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
391	 36	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x3404AC00530042006600000257000000660000000000000000000000000000
392	 37	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x3404AC00530042006600000257000000660000000000000000000000000000
- stack 0: 0xE0
393	 39	SHR		 	 
- stack 1: 0x480
- stack 0: 0x3404AC
394	 3A	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x3404AC
- stack 0: 0xFFFF
395	 3D	AND		 	 
- stack 1: 0x480
- stack 0: 0x4AC
396	 3E	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0x4AC
- stack 0: 0x1
397	 40	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x4AC
398	 41	PUSH2	0160	 	 
- stack 2: 0x480
- stack 1: 0x4AC
- stack 0: 0x160
399	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x480
- stack 1: 0x4AC
- stack 0: 0x0
400	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x480
- stack 0: 0x4AC
401	 46	PUSH2	0160	 	 
- stack 2: 0x480
- stack 1: 0x4AC
- stack 0: 0x160
402	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x480
403	 4A	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
404	 4C	ADD		 	 
- stack 0: 0x484
405	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
406	 4E	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x5300420066000002570000006600000000000000000000000000006574796D
407	 4F	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x5300420066000002570000006600000000000000000000000000006574796D
- stack 0: 0xF0
408	 51	SHR		 	 
- stack 1: 0x484
- stack 0: 0x53
409	 52	JUMP		 	 
- stack 0: 0x484
410	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x484
411	 54	PUSH4	00042000	 	 
- stack 1: 0x484
- stack 0: 0x42000
412	 59	PUSH2	0140	 	 
- stack 2: 0x484
- stack 1: 0x42000
- stack 0: 0x140
413	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x484
414	 5D	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
415	 5F	ADD		 	 
- stack 0: 0x488
416	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
417	 61	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x66000002570000006600000000000000000000000000006574796D00007473
418	 62	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x66000002570000006600000000000000000000000000006574796D00007473
- stack 0: 0xF0
419	 64	SHR		 	 
- stack 1: 0x488
- stack 0: 0x66
420	 65	JUMP		 	 
- stack 0: 0x488
421	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x488
422	 67	PUSH2	0140	 	 
- stack 1: 0x488
- stack 0: 0x140
423	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x488
- stack 0: 0x42000
424	 6B	PUSH2	0075	 ;; _ecall_0500dceadc81fd41d174aeea8ba52bff5c8798ec6dd26c130f7caaeeb905c8e3	 
- stack 2: 0x488
- stack 1: 0x42000
- stack 0: 0x75
425	 6E	JUMPI		 	 
- stack 0: 0x488
426	 75	JUMPDEST		 ;; _ecall_0500dceadc81fd41d174aeea8ba52bff5c8798ec6dd26c130f7caaeeb905c8e3	 
- stack 0: 0x488
427	 76	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
428	 78	PUSH2	0160	 	 
- stack 2: 0x488
- stack 1: 0x4
- stack 0: 0x160
429	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x488
- stack 1: 0x4
- stack 0: 0x4AC
430	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x488
431	 7D	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
432	 7F	ADD		 	 
- stack 0: 0x48C
433	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
434	 81	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x2570000006600000000000000000000000000006574796D0000747300525245
435	 82	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x2570000006600000000000000000000000000006574796D0000747300525245
- stack 0: 0xF0
436	 84	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x257
437	 85	JUMP		 	 
- stack 0: 0x48C
438	 257	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x48C
439	 258	PUSH4	00000000	 	 
- stack 1: 0x48C
- stack 0: 0x0
440	 25D	PUSH2	0140	 	 
- stack 2: 0x48C
- stack 1: 0x0
- stack 0: 0x140
441	 260	MSTORE		 	  ;; # store to x10
- stack 0: 0x48C
442	 261	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
443	 263	ADD		 	 
- stack 0: 0x490
444	 264	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
445	 265	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x6600000000000000000000000000006574796D000074730052524500004B4F
446	 266	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x6600000000000000000000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
447	 268	SHR		 	 
- stack 1: 0x490
- stack 0: 0x66
448	 269	JUMP		 	 
- stack 0: 0x490
449	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x490
450	 67	PUSH2	0140	 	 
- stack 1: 0x490
- stack 0: 0x140
451	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x490
- stack 0: 0x0
452	 6B	PUSH2	0075	 ;; _ecall_0500dceadc81fd41d174aeea8ba52bff5c8798ec6dd26c130f7caaeeb905c8e3	 
- stack 2: 0x490
- stack 1: 0x0
- stack 0: 0x75
453	 6E	JUMPI		 	 
- stack 0: 0x490
454	 6F	PUSH1	20	 	 
- stack 1: 0x490
- stack 0: 0x20
455	 71	PUSH2	0160	 	 
- stack 2: 0x490
- stack 1: 0x20
- stack 0: 0x160
456	 74	RETURN		 	 
Final bytecode length; 795
Returned: 00000000000000000000000000000000000000000000000000000000000004ac
gasUsed : 2458
** HOT: 400 - range: 400,404,408,40c,410,414,418
** HOT: 428 - range: 428,42c,430,434
** HOT: 438 - range: 438,43c
** HOT: 450 - range: 450,454,458,45c,460
