Running in EVM:
0	 0	PUSH4	0150	 	 
- stack 0: 0x150
1	 5	PUSH2	0424	 ;; _rambegin	 
- stack 1: 0x150
- stack 0: 0x424
2	 8	PUSH1	01	 	 
- stack 2: 0x150
- stack 1: 0x424
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x150
- stack 0: 0x425
4	 B	PUSH2	0400	 	 
- stack 2: 0x150
- stack 1: 0x425
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100000034054000530042006600000086000200A0000000BA000000C90018
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100000034054000530042006600000086000200A0000000BA000000C90018
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34054000530042006600000086000200A0000000BA000000C9001800E80000
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34054000530042006600000086000200A0000000BA000000C9001800E80000
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1344(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34054000530042006600000086000200A0000000BA000000C9001800E80000
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34054000530042006600000086000200A0000000BA000000C9001800E80000
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340540
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340540
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x540
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x540
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x540
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x540
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x540
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x540
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x540
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000200A0000000BA000000C9001800E8000001170000
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000200A0000000BA000000C9001800E8000001170000
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000200A0000000BA000000C9001800E800000117000001170000
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000200A0000000BA000000C9001800E800000117000001170000
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_ea454a67cb9e8e02011c1701f8e8c808e6814597174b84b9799666b78d1f7ce9	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_ea454a67cb9e8e02011c1701f8e8c808e6814597174b84b9799666b78d1f7ce9	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x540
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA000000C9001800E800000117000001170000012E00E4
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA000000C9001800E800000117000001170000012E00E4
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000200A0000000BA000000C9001800E800000117000001170000012E00E4
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000200A0000000BA000000C9001800E800000117000001170000012E00E4
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860002
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860002
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x2
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x2
84	 93	PUSH2	0380	 	 
- stack 2: 0x410
- stack 1: 0x2
- stack 0: 0x380
85	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000C9001800E800000117000001170000012E00E401570000
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000C9001800E800000117000001170000012E00E401570000
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_31_0_0	  ;; # instr: addi t6,zero,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000C9001800E800000117000001170000012E00E401570000
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000C9001800E800000117000001170000012E00E401570000
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	03E0	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x3E0
103	 B0	MSTORE		 	  ;; # store to x31
- stack 0: 0x414
104	 B1	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
105	 B3	ADD		 	 
- stack 0: 0x418
106	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
107	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000000C9001800E800000117000001170000012E00E4015700000166FFF0
108	 B6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBA000000C9001800E800000117000001170000012E00E4015700000166FFF0
- stack 0: 0xF0
109	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA
110	 B9	JUMP		 	 
- stack 0: 0x418
111	 BA	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x418
112	 BB	DUP1		 	 
- stack 1: 0x418
- stack 0: 0x418
113	 BC	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0x418
- stack 0: 0x40
114	 BF	MSTORE		 	  ;; # store to x2
- stack 0: 0x418
115	 C0	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
116	 C2	ADD		 	 
- stack 0: 0x41C
117	 C3	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
118	 C4	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xC9001800E800000117000001170000012E00E4015700000166FFF001660004
119	 C5	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xC9001800E800000117000001170000012E00E4015700000166FFF001660004
- stack 0: 0xF0
120	 C7	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xC9
121	 C8	JUMP		 	 
- stack 0: 0x41C
122	 C9	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,24(ignore imm)
- stack 0: 0x41C
123	 CA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
124	 CB	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xC9001800E800000117000001170000012E00E4015700000166FFF001660004
125	 CC	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xC9001800E800000117000001170000012E00E4015700000166FFF001660004
- stack 0: 0xE0
126	 CE	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xC90018
127	 CF	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xC90018
- stack 0: 0xFFFF
128	 D2	AND		 	 
- stack 1: 0x41C
- stack 0: 0x18
129	 D3	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0x18
- stack 0: 0x1
130	 D5	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x18
131	 D6	PUSH2	0040	 	 
- stack 2: 0x41C
- stack 1: 0x18
- stack 0: 0x40
132	 D9	MLOAD		 	  ;; # read from x2
- stack 2: 0x41C
- stack 1: 0x18
- stack 0: 0x418
133	 DA	ADD		 	  ;; # ADDI 2
- stack 1: 0x41C
- stack 0: 0x430
134	 DB	PUSH2	0040	 	 
- stack 2: 0x41C
- stack 1: 0x430
- stack 0: 0x40
135	 DE	MSTORE		 	  ;; # store to x2
- stack 0: 0x41C
136	 DF	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
137	 E1	ADD		 	 
- stack 0: 0x420
138	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
139	 E3	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xE800000117000001170000012E00E4015700000166FFF001660004018500D4
140	 E4	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xE800000117000001170000012E00E4015700000166FFF001660004018500D4
- stack 0: 0xF0
141	 E6	SHR		 	 
- stack 1: 0x420
- stack 0: 0xE8
142	 E7	JUMP		 	 
- stack 0: 0x420
143	 E8	JUMPDEST		 ;; __riscvimpl_JALR_19_2_0	  ;; # instr: jalr s3,0(sp)(ignore imm)
- stack 0: 0x420
144	 E9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
145	 EA	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xE800000117000001170000012E00E4015700000166FFF001660004018500D4
146	 EB	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0xE800000117000001170000012E00E4015700000166FFF001660004018500D4
- stack 0: 0xE0
147	 ED	SHR		 	 
- stack 1: 0x420
- stack 0: 0xE80000
148	 EE	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0xE80000
- stack 0: 0xFFFF
149	 F1	AND		 	 
- stack 1: 0x420
- stack 0: 0x0
150	 F2	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x1
151	 F4	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0x0
152	 F5	PUSH2	0040	 	 
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x40
153	 F8	MLOAD		 	  ;; # read from x2
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x430
154	 F9	ADD		 	 
- stack 1: 0x420
- stack 0: 0x430
155	 FA	PUSH4	0xFFFFFFFE	 	 
- stack 2: 0x420
- stack 1: 0x430
- stack 0: 0xFFFFFFFE
156	 FF	AND		 	  ;; # mask ~1
- stack 1: 0x420
- stack 0: 0x430
157	 100	SWAP1		 	 
- stack 1: 0x430
- stack 0: 0x420
158	 101	PUSH1	04	 	 
- stack 2: 0x430
- stack 1: 0x420
- stack 0: 0x4
159	 103	ADD		 	 
- stack 1: 0x430
- stack 0: 0x424
160	 104	PUSH2	0260	 	 
- stack 2: 0x430
- stack 1: 0x424
- stack 0: 0x260
161	 107	MSTORE		 	  ;; # store to x19
- stack 0: 0x430
162	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
163	 109	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x15700000166FFF001660004018500D40086000300A0000001C7000001D60014
164	 10A	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x15700000166FFF001660004018500D40086000300A0000001C7000001D60014
- stack 0: 0xF0
165	 10C	SHR		 	 
- stack 1: 0x430
- stack 0: 0x157
166	 10D	JUMP		 	 
- stack 0: 0x430
167	 157	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x430
168	 158	DUP1		 	 
- stack 1: 0x430
- stack 0: 0x430
169	 159	PUSH2	0020	 	 
- stack 2: 0x430
- stack 1: 0x430
- stack 0: 0x20
170	 15C	MSTORE		 	  ;; # store to x1
- stack 0: 0x430
171	 15D	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
172	 15F	ADD		 	 
- stack 0: 0x434
173	 160	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
174	 161	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x166FFF001660004018500D40086000300A0000001C7000001D6001401F50000
175	 162	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0x166FFF001660004018500D40086000300A0000001C7000001D6001401F50000
- stack 0: 0xF0
176	 164	SHR		 	 
- stack 1: 0x434
- stack 0: 0x166
177	 165	JUMP		 	 
- stack 0: 0x434
178	 166	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-16(ignore imm)
- stack 0: 0x434
179	 167	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
180	 168	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x166FFF001660004018500D40086000300A0000001C7000001D6001401F50000
181	 169	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0x166FFF001660004018500D40086000300A0000001C7000001D6001401F50000
- stack 0: 0xE0
182	 16B	SHR		 	 
- stack 1: 0x434
- stack 0: 0x166FFF0
183	 16C	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0x166FFF0
- stack 0: 0xFFFF
184	 16F	AND		 	 
- stack 1: 0x434
- stack 0: 0xFFF0
185	 170	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0xFFF0
- stack 0: 0x1
186	 172	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
187	 173	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
188	 176	MLOAD		 	  ;; # read from x1
- stack 2: 0x434
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x430
189	 177	ADD		 	  ;; # ADDI 1
- stack 1: 0x434
- stack 0: 0x420
190	 178	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0x420
- stack 0: 0x20
191	 17B	MSTORE		 	  ;; # store to x1
- stack 0: 0x434
192	 17C	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
193	 17E	ADD		 	 
- stack 0: 0x438
194	 17F	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
195	 180	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x1660004018500D40086000300A0000001C7000001D6001401F5000001170000
196	 181	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x1660004018500D40086000300A0000001C7000001D6001401F5000001170000
- stack 0: 0xF0
197	 183	SHR		 	 
- stack 1: 0x438
- stack 0: 0x166
198	 184	JUMP		 	 
- stack 0: 0x438
199	 166	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-16(ignore imm)
- stack 0: 0x438
200	 167	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
201	 168	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x1660004018500D40086000300A0000001C7000001D6001401F5000001170000
202	 169	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0x1660004018500D40086000300A0000001C7000001D6001401F5000001170000
- stack 0: 0xE0
203	 16B	SHR		 	 
- stack 1: 0x438
- stack 0: 0x1660004
204	 16C	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0x1660004
- stack 0: 0xFFFF
205	 16F	AND		 	 
- stack 1: 0x438
- stack 0: 0x4
206	 170	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x4
- stack 0: 0x1
207	 172	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x4
208	 173	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0x4
- stack 0: 0x20
209	 176	MLOAD		 	  ;; # read from x1
- stack 2: 0x438
- stack 1: 0x4
- stack 0: 0x420
210	 177	ADD		 	  ;; # ADDI 1
- stack 1: 0x438
- stack 0: 0x424
211	 178	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0x424
- stack 0: 0x20
212	 17B	MSTORE		 	  ;; # store to x1
- stack 0: 0x438
213	 17C	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
214	 17E	ADD		 	 
- stack 0: 0x43C
215	 17F	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
216	 180	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x18500D40086000300A0000001C7000001D6001401F5000001170000012E00B8
217	 181	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x18500D40086000300A0000001C7000001D6001401F5000001170000012E00B8
- stack 0: 0xF0
218	 183	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x185
219	 184	JUMP		 	 
- stack 0: 0x43C
220	 185	JUMPDEST		 ;; __riscvimpl_BNE_0_1_19	  ;; # instr: bne ra,s3,d4(ignore imm)
- stack 0: 0x43C
221	 186	PUSH2	0020	 	 
- stack 1: 0x43C
- stack 0: 0x20
222	 189	MLOAD		 	  ;; # read from x1
- stack 1: 0x43C
- stack 0: 0x424
223	 18A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0x424
- stack 0: 0xFFFFFFFF
224	 18F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0x424
225	 190	PUSH2	0260	 	 
- stack 2: 0x43C
- stack 1: 0x424
- stack 0: 0x260
226	 193	MLOAD		 	  ;; # read from x19
- stack 2: 0x43C
- stack 1: 0x424
- stack 0: 0x424
227	 194	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0x424
- stack 1: 0x424
- stack 0: 0xFFFFFFFF
228	 199	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0x424
- stack 0: 0x424
229	 19A	SUB		 	 
- stack 1: 0x43C
- stack 0: 0x0
230	 19B	PUSH2	01A3	 ;; _neq_e620cc9fcb59e7adc87f01af093ef16636ea1170af6bdc2c66c9fdc2dc16a906	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x1A3
231	 19E	JUMPI		 	 
- stack 0: 0x43C
232	 19F	PUSH2	01BD	 ;; _neq_after_e620cc9fcb59e7adc87f01af093ef16636ea1170af6bdc2c66c9fdc2dc16a906	 
- stack 1: 0x43C
- stack 0: 0x1BD
233	 1A2	JUMP		 	 
- stack 0: 0x43C
234	 1BD	JUMPDEST		 ;; _neq_after_e620cc9fcb59e7adc87f01af093ef16636ea1170af6bdc2c66c9fdc2dc16a906	 
- stack 0: 0x43C
235	 1BE	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
236	 1C0	ADD		 	 
- stack 0: 0x440
237	 1C1	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
238	 1C2	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x86000300A0000001C7000001D6001401F5000001170000012E00B8021E00B4
239	 1C3	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x86000300A0000001C7000001D6001401F5000001170000012E00B8021E00B4
- stack 0: 0xF0
240	 1C5	SHR		 	 
- stack 1: 0x440
- stack 0: 0x86
241	 1C6	JUMP		 	 
- stack 0: 0x440
242	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x440
243	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
244	 88	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x86000300A0000001C7000001D6001401F5000001170000012E00B8021E00B4
245	 89	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0x86000300A0000001C7000001D6001401F5000001170000012E00B8021E00B4
- stack 0: 0xE0
246	 8B	SHR		 	 
- stack 1: 0x440
- stack 0: 0x860003
247	 8C	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0x860003
- stack 0: 0xFFFF
248	 8F	AND		 	 
- stack 1: 0x440
- stack 0: 0x3
249	 90	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x1
250	 92	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0x3
251	 93	PUSH2	0380	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x380
252	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x440
253	 97	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
254	 99	ADD		 	 
- stack 0: 0x444
255	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
256	 9B	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xA0000001C7000001D6001401F5000001170000012E00B8021E00B400860004
257	 9C	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xA0000001C7000001D6001401F5000001170000012E00B8021E00B400860004
- stack 0: 0xF0
258	 9E	SHR		 	 
- stack 1: 0x444
- stack 0: 0xA0
259	 9F	JUMP		 	 
- stack 0: 0x444
260	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_31_0_0	  ;; # instr: addi t6,zero,0(ignore imm)
- stack 0: 0x444
261	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
262	 A2	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xA0000001C7000001D6001401F5000001170000012E00B8021E00B400860004
263	 A3	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0xA0000001C7000001D6001401F5000001170000012E00B8021E00B400860004
- stack 0: 0xE0
264	 A5	SHR		 	 
- stack 1: 0x444
- stack 0: 0xA00000
265	 A6	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0xA00000
- stack 0: 0xFFFF
266	 A9	AND		 	 
- stack 1: 0x444
- stack 0: 0x0
267	 AA	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x1
268	 AC	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x0
269	 AD	PUSH2	03E0	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x3E0
270	 B0	MSTORE		 	  ;; # store to x31
- stack 0: 0x444
271	 B1	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
272	 B3	ADD		 	 
- stack 0: 0x448
273	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
274	 B5	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x1C7000001D6001401F5000001170000012E00B8021E00B400860004025E0000
275	 B6	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0x1C7000001D6001401F5000001170000012E00B8021E00B400860004025E0000
- stack 0: 0xF0
276	 B8	SHR		 	 
- stack 1: 0x448
- stack 0: 0x1C7
277	 B9	JUMP		 	 
- stack 0: 0x448
278	 1C7	JUMPDEST		 ;; __riscvimpl_AUIPC_97010000	  ;; # instr: auipc gp,0x0(ignore imm)
- stack 0: 0x448
279	 1C8	DUP1		 	 
- stack 1: 0x448
- stack 0: 0x448
280	 1C9	PUSH2	0060	 	 
- stack 2: 0x448
- stack 1: 0x448
- stack 0: 0x60
281	 1CC	MSTORE		 	  ;; # store to x3
- stack 0: 0x448
282	 1CD	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
283	 1CF	ADD		 	 
- stack 0: 0x44C
284	 1D0	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
285	 1D1	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x1D6001401F5000001170000012E00B8021E00B400860004025E000002780000
286	 1D2	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x1D6001401F5000001170000012E00B8021E00B400860004025E000002780000
- stack 0: 0xF0
287	 1D4	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x1D6
288	 1D5	JUMP		 	 
- stack 0: 0x44C
289	 1D6	JUMPDEST		 ;; __riscvimpl_ADDI_3_3_0	  ;; # instr: addi gp,gp,20(ignore imm)
- stack 0: 0x44C
290	 1D7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
291	 1D8	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x1D6001401F5000001170000012E00B8021E00B400860004025E000002780000
292	 1D9	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0x1D6001401F5000001170000012E00B8021E00B400860004025E000002780000
- stack 0: 0xE0
293	 1DB	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x1D60014
294	 1DC	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0x1D60014
- stack 0: 0xFFFF
295	 1DF	AND		 	 
- stack 1: 0x44C
- stack 0: 0x14
296	 1E0	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0x14
- stack 0: 0x1
297	 1E2	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0x14
298	 1E3	PUSH2	0060	 	 
- stack 2: 0x44C
- stack 1: 0x14
- stack 0: 0x60
299	 1E6	MLOAD		 	  ;; # read from x3
- stack 2: 0x44C
- stack 1: 0x14
- stack 0: 0x448
300	 1E7	ADD		 	  ;; # ADDI 3
- stack 1: 0x44C
- stack 0: 0x45C
301	 1E8	PUSH2	0060	 	 
- stack 2: 0x44C
- stack 1: 0x45C
- stack 0: 0x60
302	 1EB	MSTORE		 	  ;; # store to x3
- stack 0: 0x44C
303	 1EC	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
304	 1EE	ADD		 	 
- stack 0: 0x450
305	 1EF	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
306	 1F0	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x1F5000001170000012E00B8021E00B400860004025E00000278000002870010
307	 1F1	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x1F5000001170000012E00B8021E00B400860004025E00000278000002870010
- stack 0: 0xF0
308	 1F3	SHR		 	 
- stack 1: 0x450
- stack 0: 0x1F5
309	 1F4	JUMP		 	 
- stack 0: 0x450
310	 1F5	JUMPDEST		 ;; __riscvimpl_JALR_0_3_0	  ;; # instr: jalr zero,0(gp)(ignore imm)
- stack 0: 0x450
311	 1F6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
312	 1F7	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x1F5000001170000012E00B8021E00B400860004025E00000278000002870010
313	 1F8	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x1F5000001170000012E00B8021E00B400860004025E00000278000002870010
- stack 0: 0xE0
314	 1FA	SHR		 	 
- stack 1: 0x450
- stack 0: 0x1F50000
315	 1FB	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x1F50000
- stack 0: 0xFFFF
316	 1FE	AND		 	 
- stack 1: 0x450
- stack 0: 0x0
317	 1FF	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x0
- stack 0: 0x1
318	 201	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x0
319	 202	SWAP1		 	 
- stack 1: 0x0
- stack 0: 0x450
320	 203	POP		 	 
- stack 0: 0x0
321	 204	PUSH2	0060	 	 
- stack 1: 0x0
- stack 0: 0x60
322	 207	MLOAD		 	  ;; # read from x3
- stack 1: 0x0
- stack 0: 0x45C
323	 208	ADD		 	 
- stack 0: 0x45C
324	 209	PUSH4	0xFFFFFFFE	 	 
- stack 1: 0x45C
- stack 0: 0xFFFFFFFE
325	 20E	AND		 	  ;; # mask ~1
- stack 0: 0x45C
326	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
327	 210	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x21E00B400860004025E0000027800000287001002A6000002D5009C03150001
328	 211	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x21E00B400860004025E0000027800000287001002A6000002D5009C03150001
- stack 0: 0xF0
329	 213	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x21E
330	 214	JUMP		 	 
- stack 0: 0x45C
331	 21E	JUMPDEST		 ;; __riscvimpl_BNE_0_31_0	  ;; # instr: bne t6,zero,b4(ignore imm)
- stack 0: 0x45C
332	 21F	PUSH2	03E0	 	 
- stack 1: 0x45C
- stack 0: 0x3E0
333	 222	MLOAD		 	  ;; # read from x31
- stack 1: 0x45C
- stack 0: 0x0
334	 223	PUSH4	FFFFFFFF	 	 
- stack 2: 0x45C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
335	 228	AND		 	  ;; # mask to 32 bits
- stack 1: 0x45C
- stack 0: 0x0
336	 229	PUSH1	00	 	 
- stack 2: 0x45C
- stack 1: 0x0
- stack 0: 0x0
337	 22B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x45C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
338	 230	AND		 	  ;; # mask to 32 bits
- stack 2: 0x45C
- stack 1: 0x0
- stack 0: 0x0
339	 231	SUB		 	 
- stack 1: 0x45C
- stack 0: 0x0
340	 232	PUSH2	023A	 ;; _neq_b31d18c739a6a314b668a4c49aef89e3e5e7b83b7e4e0a9640247ba2b87b35d6	 
- stack 2: 0x45C
- stack 1: 0x0
- stack 0: 0x23A
341	 235	JUMPI		 	 
- stack 0: 0x45C
342	 236	PUSH2	0254	 ;; _neq_after_b31d18c739a6a314b668a4c49aef89e3e5e7b83b7e4e0a9640247ba2b87b35d6	 
- stack 1: 0x45C
- stack 0: 0x254
343	 239	JUMP		 	 
- stack 0: 0x45C
344	 254	JUMPDEST		 ;; _neq_after_b31d18c739a6a314b668a4c49aef89e3e5e7b83b7e4e0a9640247ba2b87b35d6	 
- stack 0: 0x45C
345	 255	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
346	 257	ADD		 	 
- stack 0: 0x460
347	 258	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
348	 259	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x860004025E0000027800000287001002A6000002D5009C0315000103340002
349	 25A	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x860004025E0000027800000287001002A6000002D5009C0315000103340002
- stack 0: 0xF0
350	 25C	SHR		 	 
- stack 1: 0x460
- stack 0: 0x86
351	 25D	JUMP		 	 
- stack 0: 0x460
352	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x460
353	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x460
- stack 0: 0x460
354	 88	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x860004025E0000027800000287001002A6000002D5009C0315000103340002
355	 89	PUSH1	E0	 	 
- stack 2: 0x460
- stack 1: 0x860004025E0000027800000287001002A6000002D5009C0315000103340002
- stack 0: 0xE0
356	 8B	SHR		 	 
- stack 1: 0x460
- stack 0: 0x860004
357	 8C	PUSH2	FFFF	 	 
- stack 2: 0x460
- stack 1: 0x860004
- stack 0: 0xFFFF
358	 8F	AND		 	 
- stack 1: 0x460
- stack 0: 0x4
359	 90	PUSH1	01	 	 
- stack 2: 0x460
- stack 1: 0x4
- stack 0: 0x1
360	 92	SIGNEXTEND		 	 
- stack 1: 0x460
- stack 0: 0x4
361	 93	PUSH2	0380	 	 
- stack 2: 0x460
- stack 1: 0x4
- stack 0: 0x380
362	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x460
363	 97	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
364	 99	ADD		 	 
- stack 0: 0x464
365	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
366	 9B	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x25E0000027800000287001002A6000002D5009C0315000103340002034EFFE8
367	 9C	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x25E0000027800000287001002A6000002D5009C0315000103340002034EFFE8
- stack 0: 0xF0
368	 9E	SHR		 	 
- stack 1: 0x464
- stack 0: 0x25E
369	 9F	JUMP		 	 
- stack 0: 0x464
370	 25E	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x464
371	 25F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
372	 260	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x25E0000027800000287001002A6000002D5009C0315000103340002034EFFE8
373	 261	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0x25E0000027800000287001002A6000002D5009C0315000103340002034EFFE8
- stack 0: 0xE0
374	 263	SHR		 	 
- stack 1: 0x464
- stack 0: 0x25E0000
375	 264	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0x25E0000
- stack 0: 0xFFFF
376	 267	AND		 	 
- stack 1: 0x464
- stack 0: 0x0
377	 268	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x1
378	 26A	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0x0
379	 26B	PUSH2	0080	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x80
380	 26E	MSTORE		 	  ;; # store to x4
- stack 0: 0x464
381	 26F	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
382	 271	ADD		 	 
- stack 0: 0x468
383	 272	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
384	 273	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x27800000287001002A6000002D5009C0315000103340002034EFFE800860005
385	 274	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x27800000287001002A6000002D5009C0315000103340002034EFFE800860005
- stack 0: 0xF0
386	 276	SHR		 	 
- stack 1: 0x468
- stack 0: 0x278
387	 277	JUMP		 	 
- stack 0: 0x468
388	 278	JUMPDEST		 ;; __riscvimpl_AUIPC_17030000	  ;; # instr: auipc t1,0x0(ignore imm)
- stack 0: 0x468
389	 279	DUP1		 	 
- stack 1: 0x468
- stack 0: 0x468
390	 27A	PUSH2	00C0	 	 
- stack 2: 0x468
- stack 1: 0x468
- stack 0: 0xC0
391	 27D	MSTORE		 	  ;; # store to x6
- stack 0: 0x468
392	 27E	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
393	 280	ADD		 	 
- stack 0: 0x46C
394	 281	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
395	 282	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x287001002A6000002D5009C0315000103340002034EFFE800860005025E0000
396	 283	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x287001002A6000002D5009C0315000103340002034EFFE800860005025E0000
- stack 0: 0xF0
397	 285	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x287
398	 286	JUMP		 	 
- stack 0: 0x46C
399	 287	JUMPDEST		 ;; __riscvimpl_ADDI_6_6_0	  ;; # instr: addi t1,t1,16(ignore imm)
- stack 0: 0x46C
400	 288	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x46C
- stack 0: 0x46C
401	 289	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x287001002A6000002D5009C0315000103340002034EFFE800860005025E0000
402	 28A	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0x287001002A6000002D5009C0315000103340002034EFFE800860005025E0000
- stack 0: 0xE0
403	 28C	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x2870010
404	 28D	PUSH2	FFFF	 	 
- stack 2: 0x46C
- stack 1: 0x2870010
- stack 0: 0xFFFF
405	 290	AND		 	 
- stack 1: 0x46C
- stack 0: 0x10
406	 291	PUSH1	01	 	 
- stack 2: 0x46C
- stack 1: 0x10
- stack 0: 0x1
407	 293	SIGNEXTEND		 	 
- stack 1: 0x46C
- stack 0: 0x10
408	 294	PUSH2	00C0	 	 
- stack 2: 0x46C
- stack 1: 0x10
- stack 0: 0xC0
409	 297	MLOAD		 	  ;; # read from x6
- stack 2: 0x46C
- stack 1: 0x10
- stack 0: 0x468
410	 298	ADD		 	  ;; # ADDI 6
- stack 1: 0x46C
- stack 0: 0x478
411	 299	PUSH2	00C0	 	 
- stack 2: 0x46C
- stack 1: 0x478
- stack 0: 0xC0
412	 29C	MSTORE		 	  ;; # store to x6
- stack 0: 0x46C
413	 29D	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
414	 29F	ADD		 	 
- stack 0: 0x470
415	 2A0	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
416	 2A1	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x2A6000002D5009C0315000103340002034EFFE800860005025E000002780000
417	 2A2	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x2A6000002D5009C0315000103340002034EFFE800860005025E000002780000
- stack 0: 0xF0
418	 2A4	SHR		 	 
- stack 1: 0x470
- stack 0: 0x2A6
419	 2A5	JUMP		 	 
- stack 0: 0x470
420	 2A6	JUMPDEST		 ;; __riscvimpl_JALR_19_6_0	  ;; # instr: jalr s3,0(t1)(ignore imm)
- stack 0: 0x470
421	 2A7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
422	 2A8	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x2A6000002D5009C0315000103340002034EFFE800860005025E000002780000
423	 2A9	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x2A6000002D5009C0315000103340002034EFFE800860005025E000002780000
- stack 0: 0xE0
424	 2AB	SHR		 	 
- stack 1: 0x470
- stack 0: 0x2A60000
425	 2AC	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x2A60000
- stack 0: 0xFFFF
426	 2AF	AND		 	 
- stack 1: 0x470
- stack 0: 0x0
427	 2B0	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x1
428	 2B2	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0x0
429	 2B3	PUSH2	00C0	 	 
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0xC0
430	 2B6	MLOAD		 	  ;; # read from x6
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x478
431	 2B7	ADD		 	 
- stack 1: 0x470
- stack 0: 0x478
432	 2B8	PUSH4	0xFFFFFFFE	 	 
- stack 2: 0x470
- stack 1: 0x478
- stack 0: 0xFFFFFFFE
433	 2BD	AND		 	  ;; # mask ~1
- stack 1: 0x470
- stack 0: 0x478
434	 2BE	SWAP1		 	 
- stack 1: 0x478
- stack 0: 0x470
435	 2BF	PUSH1	04	 	 
- stack 2: 0x478
- stack 1: 0x470
- stack 0: 0x4
436	 2C1	ADD		 	 
- stack 1: 0x478
- stack 0: 0x474
437	 2C2	PUSH2	0260	 	 
- stack 2: 0x478
- stack 1: 0x474
- stack 0: 0x260
438	 2C5	MSTORE		 	  ;; # store to x19
- stack 0: 0x478
439	 2C6	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
440	 2C7	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x315000103340002034EFFE800860005025E0000027800000287001401170000
441	 2C8	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x315000103340002034EFFE800860005025E0000027800000287001401170000
- stack 0: 0xF0
442	 2CA	SHR		 	 
- stack 1: 0x478
- stack 0: 0x315
443	 2CB	JUMP		 	 
- stack 0: 0x478
444	 315	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x478
445	 316	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
446	 317	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x315000103340002034EFFE800860005025E0000027800000287001401170000
447	 318	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0x315000103340002034EFFE800860005025E0000027800000287001401170000
- stack 0: 0xE0
448	 31A	SHR		 	 
- stack 1: 0x478
- stack 0: 0x3150001
449	 31B	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0x3150001
- stack 0: 0xFFFF
450	 31E	AND		 	 
- stack 1: 0x478
- stack 0: 0x1
451	 31F	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0x1
- stack 0: 0x1
452	 321	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0x1
453	 322	PUSH2	0080	 	 
- stack 2: 0x478
- stack 1: 0x1
- stack 0: 0x80
454	 325	MLOAD		 	  ;; # read from x4
- stack 2: 0x478
- stack 1: 0x1
- stack 0: 0x0
455	 326	ADD		 	  ;; # ADDI 4
- stack 1: 0x478
- stack 0: 0x1
456	 327	PUSH2	0080	 	 
- stack 2: 0x478
- stack 1: 0x1
- stack 0: 0x80
457	 32A	MSTORE		 	  ;; # store to x4
- stack 0: 0x478
458	 32B	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
459	 32D	ADD		 	 
- stack 0: 0x47C
460	 32E	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
461	 32F	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x3340002034EFFE800860005025E000002780000028700140117000002A60000
462	 330	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x3340002034EFFE800860005025E000002780000028700140117000002A60000
- stack 0: 0xF0
463	 332	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x334
464	 333	JUMP		 	 
- stack 0: 0x47C
465	 334	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x47C
466	 335	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
467	 336	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x3340002034EFFE800860005025E000002780000028700140117000002A60000
468	 337	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0x3340002034EFFE800860005025E000002780000028700140117000002A60000
- stack 0: 0xE0
469	 339	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x3340002
470	 33A	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0x3340002
- stack 0: 0xFFFF
471	 33D	AND		 	 
- stack 1: 0x47C
- stack 0: 0x2
472	 33E	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0x2
- stack 0: 0x1
473	 340	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0x2
474	 341	PUSH2	00A0	 	 
- stack 2: 0x47C
- stack 1: 0x2
- stack 0: 0xA0
475	 344	MSTORE		 	  ;; # store to x5
- stack 0: 0x47C
476	 345	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
477	 347	ADD		 	 
- stack 0: 0x480
478	 348	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
479	 349	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x34EFFE800860005025E000002780000028700140117000002A6000002D50074
480	 34A	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x34EFFE800860005025E000002780000028700140117000002A6000002D50074
- stack 0: 0xF0
481	 34C	SHR		 	 
- stack 1: 0x480
- stack 0: 0x34E
482	 34D	JUMP		 	 
- stack 0: 0x480
483	 34E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x480
484	 34F	PUSH2	0080	 	 
- stack 1: 0x480
- stack 0: 0x80
485	 352	MLOAD		 	  ;; # read from x4
- stack 1: 0x480
- stack 0: 0x1
486	 353	PUSH4	FFFFFFFF	 	 
- stack 2: 0x480
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
487	 358	AND		 	  ;; # mask to 32 bits
- stack 1: 0x480
- stack 0: 0x1
488	 359	PUSH2	00A0	 	 
- stack 2: 0x480
- stack 1: 0x1
- stack 0: 0xA0
489	 35C	MLOAD		 	  ;; # read from x5
- stack 2: 0x480
- stack 1: 0x1
- stack 0: 0x2
490	 35D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x480
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
491	 362	AND		 	  ;; # mask to 32 bits
- stack 2: 0x480
- stack 1: 0x1
- stack 0: 0x2
492	 363	SUB		 	 
- stack 1: 0x480
- stack 0: 0x1
493	 364	PUSH2	036C	 ;; _neq_5e92265b62384de885c19a5747e4cc5876794a9b41955ada6efa867dc61cb18d	 
- stack 2: 0x480
- stack 1: 0x1
- stack 0: 0x36C
494	 367	JUMPI		 	 
- stack 0: 0x480
495	 36C	JUMPDEST		 ;; _neq_5e92265b62384de885c19a5747e4cc5876794a9b41955ada6efa867dc61cb18d	 
- stack 0: 0x480
496	 36D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
497	 36E	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x34EFFE800860005025E000002780000028700140117000002A6000002D50074
498	 36F	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x34EFFE800860005025E000002780000028700140117000002A6000002D50074
- stack 0: 0xE0
499	 371	SHR		 	 
- stack 1: 0x480
- stack 0: 0x34EFFE8
500	 372	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x34EFFE8
- stack 0: 0xFFFF
501	 375	AND		 	 
- stack 1: 0x480
- stack 0: 0xFFE8
502	 376	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0xFFE8
- stack 0: 0x1
503	 378	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
504	 379	ADD		 	 
- stack 0: 0x468
505	 37A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFF
506	 37F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x468
507	 380	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
508	 381	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x27800000287001002A6000002D5009C0315000103340002034EFFE800860005
509	 382	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x27800000287001002A6000002D5009C0315000103340002034EFFE800860005
- stack 0: 0xF0
510	 384	SHR		 	 
- stack 1: 0x468
- stack 0: 0x278
511	 385	JUMP		 	 
- stack 0: 0x468
512	 278	JUMPDEST		 ;; __riscvimpl_AUIPC_17030000	  ;; # instr: auipc t1,0x0(ignore imm)
- stack 0: 0x468
513	 279	DUP1		 	 
- stack 1: 0x468
- stack 0: 0x468
514	 27A	PUSH2	00C0	 	 
- stack 2: 0x468
- stack 1: 0x468
- stack 0: 0xC0
515	 27D	MSTORE		 	  ;; # store to x6
- stack 0: 0x468
516	 27E	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
517	 280	ADD		 	 
- stack 0: 0x46C
518	 281	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
519	 282	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x287001002A6000002D5009C0315000103340002034EFFE800860005025E0000
520	 283	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x287001002A6000002D5009C0315000103340002034EFFE800860005025E0000
- stack 0: 0xF0
521	 285	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x287
522	 286	JUMP		 	 
- stack 0: 0x46C
523	 287	JUMPDEST		 ;; __riscvimpl_ADDI_6_6_0	  ;; # instr: addi t1,t1,16(ignore imm)
- stack 0: 0x46C
524	 288	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x46C
- stack 0: 0x46C
525	 289	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x287001002A6000002D5009C0315000103340002034EFFE800860005025E0000
526	 28A	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0x287001002A6000002D5009C0315000103340002034EFFE800860005025E0000
- stack 0: 0xE0
527	 28C	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x2870010
528	 28D	PUSH2	FFFF	 	 
- stack 2: 0x46C
- stack 1: 0x2870010
- stack 0: 0xFFFF
529	 290	AND		 	 
- stack 1: 0x46C
- stack 0: 0x10
530	 291	PUSH1	01	 	 
- stack 2: 0x46C
- stack 1: 0x10
- stack 0: 0x1
531	 293	SIGNEXTEND		 	 
- stack 1: 0x46C
- stack 0: 0x10
532	 294	PUSH2	00C0	 	 
- stack 2: 0x46C
- stack 1: 0x10
- stack 0: 0xC0
533	 297	MLOAD		 	  ;; # read from x6
- stack 2: 0x46C
- stack 1: 0x10
- stack 0: 0x468
534	 298	ADD		 	  ;; # ADDI 6
- stack 1: 0x46C
- stack 0: 0x478
535	 299	PUSH2	00C0	 	 
- stack 2: 0x46C
- stack 1: 0x478
- stack 0: 0xC0
536	 29C	MSTORE		 	  ;; # store to x6
- stack 0: 0x46C
537	 29D	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
538	 29F	ADD		 	 
- stack 0: 0x470
539	 2A0	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
540	 2A1	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x2A6000002D5009C0315000103340002034EFFE800860005025E000002780000
541	 2A2	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x2A6000002D5009C0315000103340002034EFFE800860005025E000002780000
- stack 0: 0xF0
542	 2A4	SHR		 	 
- stack 1: 0x470
- stack 0: 0x2A6
543	 2A5	JUMP		 	 
- stack 0: 0x470
544	 2A6	JUMPDEST		 ;; __riscvimpl_JALR_19_6_0	  ;; # instr: jalr s3,0(t1)(ignore imm)
- stack 0: 0x470
545	 2A7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
546	 2A8	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x2A6000002D5009C0315000103340002034EFFE800860005025E000002780000
547	 2A9	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x2A6000002D5009C0315000103340002034EFFE800860005025E000002780000
- stack 0: 0xE0
548	 2AB	SHR		 	 
- stack 1: 0x470
- stack 0: 0x2A60000
549	 2AC	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x2A60000
- stack 0: 0xFFFF
550	 2AF	AND		 	 
- stack 1: 0x470
- stack 0: 0x0
551	 2B0	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x1
552	 2B2	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0x0
553	 2B3	PUSH2	00C0	 	 
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0xC0
554	 2B6	MLOAD		 	  ;; # read from x6
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x478
555	 2B7	ADD		 	 
- stack 1: 0x470
- stack 0: 0x478
556	 2B8	PUSH4	0xFFFFFFFE	 	 
- stack 2: 0x470
- stack 1: 0x478
- stack 0: 0xFFFFFFFE
557	 2BD	AND		 	  ;; # mask ~1
- stack 1: 0x470
- stack 0: 0x478
558	 2BE	SWAP1		 	 
- stack 1: 0x478
- stack 0: 0x470
559	 2BF	PUSH1	04	 	 
- stack 2: 0x478
- stack 1: 0x470
- stack 0: 0x4
560	 2C1	ADD		 	 
- stack 1: 0x478
- stack 0: 0x474
561	 2C2	PUSH2	0260	 	 
- stack 2: 0x478
- stack 1: 0x474
- stack 0: 0x260
562	 2C5	MSTORE		 	  ;; # store to x19
- stack 0: 0x478
563	 2C6	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
564	 2C7	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x315000103340002034EFFE800860005025E0000027800000287001401170000
565	 2C8	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x315000103340002034EFFE800860005025E0000027800000287001401170000
- stack 0: 0xF0
566	 2CA	SHR		 	 
- stack 1: 0x478
- stack 0: 0x315
567	 2CB	JUMP		 	 
- stack 0: 0x478
568	 315	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x478
569	 316	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
570	 317	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x315000103340002034EFFE800860005025E0000027800000287001401170000
571	 318	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0x315000103340002034EFFE800860005025E0000027800000287001401170000
- stack 0: 0xE0
572	 31A	SHR		 	 
- stack 1: 0x478
- stack 0: 0x3150001
573	 31B	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0x3150001
- stack 0: 0xFFFF
574	 31E	AND		 	 
- stack 1: 0x478
- stack 0: 0x1
575	 31F	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0x1
- stack 0: 0x1
576	 321	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0x1
577	 322	PUSH2	0080	 	 
- stack 2: 0x478
- stack 1: 0x1
- stack 0: 0x80
578	 325	MLOAD		 	  ;; # read from x4
- stack 2: 0x478
- stack 1: 0x1
- stack 0: 0x1
579	 326	ADD		 	  ;; # ADDI 4
- stack 1: 0x478
- stack 0: 0x2
580	 327	PUSH2	0080	 	 
- stack 2: 0x478
- stack 1: 0x2
- stack 0: 0x80
581	 32A	MSTORE		 	  ;; # store to x4
- stack 0: 0x478
582	 32B	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
583	 32D	ADD		 	 
- stack 0: 0x47C
584	 32E	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
585	 32F	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x3340002034EFFE800860005025E000002780000028700140117000002A60000
586	 330	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x3340002034EFFE800860005025E000002780000028700140117000002A60000
- stack 0: 0xF0
587	 332	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x334
588	 333	JUMP		 	 
- stack 0: 0x47C
589	 334	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x47C
590	 335	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
591	 336	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x3340002034EFFE800860005025E000002780000028700140117000002A60000
592	 337	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0x3340002034EFFE800860005025E000002780000028700140117000002A60000
- stack 0: 0xE0
593	 339	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x3340002
594	 33A	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0x3340002
- stack 0: 0xFFFF
595	 33D	AND		 	 
- stack 1: 0x47C
- stack 0: 0x2
596	 33E	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0x2
- stack 0: 0x1
597	 340	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0x2
598	 341	PUSH2	00A0	 	 
- stack 2: 0x47C
- stack 1: 0x2
- stack 0: 0xA0
599	 344	MSTORE		 	  ;; # store to x5
- stack 0: 0x47C
600	 345	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
601	 347	ADD		 	 
- stack 0: 0x480
602	 348	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
603	 349	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x34EFFE800860005025E000002780000028700140117000002A6000002D50074
604	 34A	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x34EFFE800860005025E000002780000028700140117000002A6000002D50074
- stack 0: 0xF0
605	 34C	SHR		 	 
- stack 1: 0x480
- stack 0: 0x34E
606	 34D	JUMP		 	 
- stack 0: 0x480
607	 34E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x480
608	 34F	PUSH2	0080	 	 
- stack 1: 0x480
- stack 0: 0x80
609	 352	MLOAD		 	  ;; # read from x4
- stack 1: 0x480
- stack 0: 0x2
610	 353	PUSH4	FFFFFFFF	 	 
- stack 2: 0x480
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
611	 358	AND		 	  ;; # mask to 32 bits
- stack 1: 0x480
- stack 0: 0x2
612	 359	PUSH2	00A0	 	 
- stack 2: 0x480
- stack 1: 0x2
- stack 0: 0xA0
613	 35C	MLOAD		 	  ;; # read from x5
- stack 2: 0x480
- stack 1: 0x2
- stack 0: 0x2
614	 35D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x480
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
615	 362	AND		 	  ;; # mask to 32 bits
- stack 2: 0x480
- stack 1: 0x2
- stack 0: 0x2
616	 363	SUB		 	 
- stack 1: 0x480
- stack 0: 0x0
617	 364	PUSH2	036C	 ;; _neq_5e92265b62384de885c19a5747e4cc5876794a9b41955ada6efa867dc61cb18d	 
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0x36C
618	 367	JUMPI		 	 
- stack 0: 0x480
619	 368	PUSH2	0386	 ;; _neq_after_5e92265b62384de885c19a5747e4cc5876794a9b41955ada6efa867dc61cb18d	 
- stack 1: 0x480
- stack 0: 0x386
620	 36B	JUMP		 	 
- stack 0: 0x480
621	 386	JUMPDEST		 ;; _neq_after_5e92265b62384de885c19a5747e4cc5876794a9b41955ada6efa867dc61cb18d	 
- stack 0: 0x480
622	 387	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
623	 389	ADD		 	 
- stack 0: 0x484
624	 38A	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
625	 38B	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x860005025E000002780000028700140117000002A6000002D5007403150001
626	 38C	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x860005025E000002780000028700140117000002A6000002D5007403150001
- stack 0: 0xF0
627	 38E	SHR		 	 
- stack 1: 0x484
- stack 0: 0x86
628	 38F	JUMP		 	 
- stack 0: 0x484
629	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x484
630	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x484
- stack 0: 0x484
631	 88	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x860005025E000002780000028700140117000002A6000002D5007403150001
632	 89	PUSH1	E0	 	 
- stack 2: 0x484
- stack 1: 0x860005025E000002780000028700140117000002A6000002D5007403150001
- stack 0: 0xE0
633	 8B	SHR		 	 
- stack 1: 0x484
- stack 0: 0x860005
634	 8C	PUSH2	FFFF	 	 
- stack 2: 0x484
- stack 1: 0x860005
- stack 0: 0xFFFF
635	 8F	AND		 	 
- stack 1: 0x484
- stack 0: 0x5
636	 90	PUSH1	01	 	 
- stack 2: 0x484
- stack 1: 0x5
- stack 0: 0x1
637	 92	SIGNEXTEND		 	 
- stack 1: 0x484
- stack 0: 0x5
638	 93	PUSH2	0380	 	 
- stack 2: 0x484
- stack 1: 0x5
- stack 0: 0x380
639	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x484
640	 97	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
641	 99	ADD		 	 
- stack 0: 0x488
642	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
643	 9B	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x25E000002780000028700140117000002A6000002D500740315000103340002
644	 9C	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x25E000002780000028700140117000002A6000002D500740315000103340002
- stack 0: 0xF0
645	 9E	SHR		 	 
- stack 1: 0x488
- stack 0: 0x25E
646	 9F	JUMP		 	 
- stack 0: 0x488
647	 25E	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x488
648	 25F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x488
- stack 0: 0x488
649	 260	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x25E000002780000028700140117000002A6000002D500740315000103340002
650	 261	PUSH1	E0	 	 
- stack 2: 0x488
- stack 1: 0x25E000002780000028700140117000002A6000002D500740315000103340002
- stack 0: 0xE0
651	 263	SHR		 	 
- stack 1: 0x488
- stack 0: 0x25E0000
652	 264	PUSH2	FFFF	 	 
- stack 2: 0x488
- stack 1: 0x25E0000
- stack 0: 0xFFFF
653	 267	AND		 	 
- stack 1: 0x488
- stack 0: 0x0
654	 268	PUSH1	01	 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x1
655	 26A	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0x0
656	 26B	PUSH2	0080	 	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x80
657	 26E	MSTORE		 	  ;; # store to x4
- stack 0: 0x488
658	 26F	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
659	 271	ADD		 	 
- stack 0: 0x48C
660	 272	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
661	 273	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x2780000028700140117000002A6000002D500740315000103340002034EFFE4
662	 274	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x2780000028700140117000002A6000002D500740315000103340002034EFFE4
- stack 0: 0xF0
663	 276	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x278
664	 277	JUMP		 	 
- stack 0: 0x48C
665	 278	JUMPDEST		 ;; __riscvimpl_AUIPC_17030000	  ;; # instr: auipc t1,0x0(ignore imm)
- stack 0: 0x48C
666	 279	DUP1		 	 
- stack 1: 0x48C
- stack 0: 0x48C
667	 27A	PUSH2	00C0	 	 
- stack 2: 0x48C
- stack 1: 0x48C
- stack 0: 0xC0
668	 27D	MSTORE		 	  ;; # store to x6
- stack 0: 0x48C
669	 27E	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
670	 280	ADD		 	 
- stack 0: 0x490
671	 281	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
672	 282	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x28700140117000002A6000002D500740315000103340002034EFFE400860006
673	 283	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x28700140117000002A6000002D500740315000103340002034EFFE400860006
- stack 0: 0xF0
674	 285	SHR		 	 
- stack 1: 0x490
- stack 0: 0x287
675	 286	JUMP		 	 
- stack 0: 0x490
676	 287	JUMPDEST		 ;; __riscvimpl_ADDI_6_6_0	  ;; # instr: addi t1,t1,16(ignore imm)
- stack 0: 0x490
677	 288	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
678	 289	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x28700140117000002A6000002D500740315000103340002034EFFE400860006
679	 28A	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0x28700140117000002A6000002D500740315000103340002034EFFE400860006
- stack 0: 0xE0
680	 28C	SHR		 	 
- stack 1: 0x490
- stack 0: 0x2870014
681	 28D	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0x2870014
- stack 0: 0xFFFF
682	 290	AND		 	 
- stack 1: 0x490
- stack 0: 0x14
683	 291	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0x14
- stack 0: 0x1
684	 293	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0x14
685	 294	PUSH2	00C0	 	 
- stack 2: 0x490
- stack 1: 0x14
- stack 0: 0xC0
686	 297	MLOAD		 	  ;; # read from x6
- stack 2: 0x490
- stack 1: 0x14
- stack 0: 0x48C
687	 298	ADD		 	  ;; # ADDI 6
- stack 1: 0x490
- stack 0: 0x4A0
688	 299	PUSH2	00C0	 	 
- stack 2: 0x490
- stack 1: 0x4A0
- stack 0: 0xC0
689	 29C	MSTORE		 	  ;; # store to x6
- stack 0: 0x490
690	 29D	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
691	 29F	ADD		 	 
- stack 0: 0x494
692	 2A0	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
693	 2A1	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x117000002A6000002D500740315000103340002034EFFE400860006025E0000
694	 2A2	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x117000002A6000002D500740315000103340002034EFFE400860006025E0000
- stack 0: 0xF0
695	 2A4	SHR		 	 
- stack 1: 0x494
- stack 0: 0x117
696	 2A5	JUMP		 	 
- stack 0: 0x494
697	 117	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x494
698	 118	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
699	 119	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x117000002A6000002D500740315000103340002034EFFE400860006025E0000
700	 11A	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0x117000002A6000002D500740315000103340002034EFFE400860006025E0000
- stack 0: 0xE0
701	 11C	SHR		 	 
- stack 1: 0x494
- stack 0: 0x1170000
702	 11D	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0x1170000
- stack 0: 0xFFFF
703	 120	AND		 	 
- stack 1: 0x494
- stack 0: 0x0
704	 121	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x1
705	 123	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x0
706	 124	POP		 	 
- stack 0: 0x494
707	 125	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
708	 127	ADD		 	 
- stack 0: 0x498
709	 128	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
710	 129	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x2A6000002D500740315000103340002034EFFE400860006025E000002780000
711	 12A	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x2A6000002D500740315000103340002034EFFE400860006025E000002780000
- stack 0: 0xF0
712	 12C	SHR		 	 
- stack 1: 0x498
- stack 0: 0x2A6
713	 12D	JUMP		 	 
- stack 0: 0x498
714	 2A6	JUMPDEST		 ;; __riscvimpl_JALR_19_6_0	  ;; # instr: jalr s3,0(t1)(ignore imm)
- stack 0: 0x498
715	 2A7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
716	 2A8	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x2A6000002D500740315000103340002034EFFE400860006025E000002780000
717	 2A9	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0x2A6000002D500740315000103340002034EFFE400860006025E000002780000
- stack 0: 0xE0
718	 2AB	SHR		 	 
- stack 1: 0x498
- stack 0: 0x2A60000
719	 2AC	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0x2A60000
- stack 0: 0xFFFF
720	 2AF	AND		 	 
- stack 1: 0x498
- stack 0: 0x0
721	 2B0	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0x1
722	 2B2	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x0
723	 2B3	PUSH2	00C0	 	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0xC0
724	 2B6	MLOAD		 	  ;; # read from x6
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0x4A0
725	 2B7	ADD		 	 
- stack 1: 0x498
- stack 0: 0x4A0
726	 2B8	PUSH4	0xFFFFFFFE	 	 
- stack 2: 0x498
- stack 1: 0x4A0
- stack 0: 0xFFFFFFFE
727	 2BD	AND		 	  ;; # mask ~1
- stack 1: 0x498
- stack 0: 0x4A0
728	 2BE	SWAP1		 	 
- stack 1: 0x4A0
- stack 0: 0x498
729	 2BF	PUSH1	04	 	 
- stack 2: 0x4A0
- stack 1: 0x498
- stack 0: 0x4
730	 2C1	ADD		 	 
- stack 1: 0x4A0
- stack 0: 0x49C
731	 2C2	PUSH2	0260	 	 
- stack 2: 0x4A0
- stack 1: 0x49C
- stack 0: 0x260
732	 2C5	MSTORE		 	  ;; # store to x19
- stack 0: 0x4A0
733	 2C6	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
734	 2C7	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x315000103340002034EFFE400860006025E0000027800000287001801170000
735	 2C8	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x315000103340002034EFFE400860006025E0000027800000287001801170000
- stack 0: 0xF0
736	 2CA	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x315
737	 2CB	JUMP		 	 
- stack 0: 0x4A0
738	 315	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4A0
739	 316	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
740	 317	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x315000103340002034EFFE400860006025E0000027800000287001801170000
741	 318	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0x315000103340002034EFFE400860006025E0000027800000287001801170000
- stack 0: 0xE0
742	 31A	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x3150001
743	 31B	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x3150001
- stack 0: 0xFFFF
744	 31E	AND		 	 
- stack 1: 0x4A0
- stack 0: 0x1
745	 31F	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0x1
- stack 0: 0x1
746	 321	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0x1
747	 322	PUSH2	0080	 	 
- stack 2: 0x4A0
- stack 1: 0x1
- stack 0: 0x80
748	 325	MLOAD		 	  ;; # read from x4
- stack 2: 0x4A0
- stack 1: 0x1
- stack 0: 0x0
749	 326	ADD		 	  ;; # ADDI 4
- stack 1: 0x4A0
- stack 0: 0x1
750	 327	PUSH2	0080	 	 
- stack 2: 0x4A0
- stack 1: 0x1
- stack 0: 0x80
751	 32A	MSTORE		 	  ;; # store to x4
- stack 0: 0x4A0
752	 32B	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
753	 32D	ADD		 	 
- stack 0: 0x4A4
754	 32E	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
755	 32F	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x3340002034EFFE400860006025E000002780000028700180117000001170000
756	 330	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x3340002034EFFE400860006025E000002780000028700180117000001170000
- stack 0: 0xF0
757	 332	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x334
758	 333	JUMP		 	 
- stack 0: 0x4A4
759	 334	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4A4
760	 335	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
761	 336	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x3340002034EFFE400860006025E000002780000028700180117000001170000
762	 337	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x3340002034EFFE400860006025E000002780000028700180117000001170000
- stack 0: 0xE0
763	 339	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x3340002
764	 33A	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x3340002
- stack 0: 0xFFFF
765	 33D	AND		 	 
- stack 1: 0x4A4
- stack 0: 0x2
766	 33E	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0x2
- stack 0: 0x1
767	 340	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0x2
768	 341	PUSH2	00A0	 	 
- stack 2: 0x4A4
- stack 1: 0x2
- stack 0: 0xA0
769	 344	MSTORE		 	  ;; # store to x5
- stack 0: 0x4A4
770	 345	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
771	 347	ADD		 	 
- stack 0: 0x4A8
772	 348	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
773	 349	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x34EFFE400860006025E00000278000002870018011700000117000002A60000
774	 34A	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x34EFFE400860006025E00000278000002870018011700000117000002A60000
- stack 0: 0xF0
775	 34C	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x34E
776	 34D	JUMP		 	 
- stack 0: 0x4A8
777	 34E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4A8
778	 34F	PUSH2	0080	 	 
- stack 1: 0x4A8
- stack 0: 0x80
779	 352	MLOAD		 	  ;; # read from x4
- stack 1: 0x4A8
- stack 0: 0x1
780	 353	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
781	 358	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A8
- stack 0: 0x1
782	 359	PUSH2	00A0	 	 
- stack 2: 0x4A8
- stack 1: 0x1
- stack 0: 0xA0
783	 35C	MLOAD		 	  ;; # read from x5
- stack 2: 0x4A8
- stack 1: 0x1
- stack 0: 0x2
784	 35D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4A8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
785	 362	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4A8
- stack 1: 0x1
- stack 0: 0x2
786	 363	SUB		 	 
- stack 1: 0x4A8
- stack 0: 0x1
787	 364	PUSH2	036C	 ;; _neq_5e92265b62384de885c19a5747e4cc5876794a9b41955ada6efa867dc61cb18d	 
- stack 2: 0x4A8
- stack 1: 0x1
- stack 0: 0x36C
788	 367	JUMPI		 	 
- stack 0: 0x4A8
789	 36C	JUMPDEST		 ;; _neq_5e92265b62384de885c19a5747e4cc5876794a9b41955ada6efa867dc61cb18d	 
- stack 0: 0x4A8
790	 36D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
791	 36E	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x34EFFE400860006025E00000278000002870018011700000117000002A60000
792	 36F	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0x34EFFE400860006025E00000278000002870018011700000117000002A60000
- stack 0: 0xE0
793	 371	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x34EFFE4
794	 372	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x34EFFE4
- stack 0: 0xFFFF
795	 375	AND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFE4
796	 376	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0xFFE4
- stack 0: 0x1
797	 378	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
798	 379	ADD		 	 
- stack 0: 0x48C
799	 37A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x48C
- stack 0: 0xFFFFFFFF
800	 37F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x48C
801	 380	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
802	 381	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x2780000028700140117000002A6000002D500740315000103340002034EFFE4
803	 382	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x2780000028700140117000002A6000002D500740315000103340002034EFFE4
- stack 0: 0xF0
804	 384	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x278
805	 385	JUMP		 	 
- stack 0: 0x48C
806	 278	JUMPDEST		 ;; __riscvimpl_AUIPC_17030000	  ;; # instr: auipc t1,0x0(ignore imm)
- stack 0: 0x48C
807	 279	DUP1		 	 
- stack 1: 0x48C
- stack 0: 0x48C
808	 27A	PUSH2	00C0	 	 
- stack 2: 0x48C
- stack 1: 0x48C
- stack 0: 0xC0
809	 27D	MSTORE		 	  ;; # store to x6
- stack 0: 0x48C
810	 27E	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
811	 280	ADD		 	 
- stack 0: 0x490
812	 281	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
813	 282	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x28700140117000002A6000002D500740315000103340002034EFFE400860006
814	 283	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x28700140117000002A6000002D500740315000103340002034EFFE400860006
- stack 0: 0xF0
815	 285	SHR		 	 
- stack 1: 0x490
- stack 0: 0x287
816	 286	JUMP		 	 
- stack 0: 0x490
817	 287	JUMPDEST		 ;; __riscvimpl_ADDI_6_6_0	  ;; # instr: addi t1,t1,16(ignore imm)
- stack 0: 0x490
818	 288	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
819	 289	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x28700140117000002A6000002D500740315000103340002034EFFE400860006
820	 28A	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0x28700140117000002A6000002D500740315000103340002034EFFE400860006
- stack 0: 0xE0
821	 28C	SHR		 	 
- stack 1: 0x490
- stack 0: 0x2870014
822	 28D	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0x2870014
- stack 0: 0xFFFF
823	 290	AND		 	 
- stack 1: 0x490
- stack 0: 0x14
824	 291	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0x14
- stack 0: 0x1
825	 293	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0x14
826	 294	PUSH2	00C0	 	 
- stack 2: 0x490
- stack 1: 0x14
- stack 0: 0xC0
827	 297	MLOAD		 	  ;; # read from x6
- stack 2: 0x490
- stack 1: 0x14
- stack 0: 0x48C
828	 298	ADD		 	  ;; # ADDI 6
- stack 1: 0x490
- stack 0: 0x4A0
829	 299	PUSH2	00C0	 	 
- stack 2: 0x490
- stack 1: 0x4A0
- stack 0: 0xC0
830	 29C	MSTORE		 	  ;; # store to x6
- stack 0: 0x490
831	 29D	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
832	 29F	ADD		 	 
- stack 0: 0x494
833	 2A0	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
834	 2A1	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x117000002A6000002D500740315000103340002034EFFE400860006025E0000
835	 2A2	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x117000002A6000002D500740315000103340002034EFFE400860006025E0000
- stack 0: 0xF0
836	 2A4	SHR		 	 
- stack 1: 0x494
- stack 0: 0x117
837	 2A5	JUMP		 	 
- stack 0: 0x494
838	 117	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x494
839	 118	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
840	 119	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x117000002A6000002D500740315000103340002034EFFE400860006025E0000
841	 11A	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0x117000002A6000002D500740315000103340002034EFFE400860006025E0000
- stack 0: 0xE0
842	 11C	SHR		 	 
- stack 1: 0x494
- stack 0: 0x1170000
843	 11D	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0x1170000
- stack 0: 0xFFFF
844	 120	AND		 	 
- stack 1: 0x494
- stack 0: 0x0
845	 121	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x1
846	 123	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x0
847	 124	POP		 	 
- stack 0: 0x494
848	 125	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
849	 127	ADD		 	 
- stack 0: 0x498
850	 128	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
851	 129	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x2A6000002D500740315000103340002034EFFE400860006025E000002780000
852	 12A	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x2A6000002D500740315000103340002034EFFE400860006025E000002780000
- stack 0: 0xF0
853	 12C	SHR		 	 
- stack 1: 0x498
- stack 0: 0x2A6
854	 12D	JUMP		 	 
- stack 0: 0x498
855	 2A6	JUMPDEST		 ;; __riscvimpl_JALR_19_6_0	  ;; # instr: jalr s3,0(t1)(ignore imm)
- stack 0: 0x498
856	 2A7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
857	 2A8	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x2A6000002D500740315000103340002034EFFE400860006025E000002780000
858	 2A9	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0x2A6000002D500740315000103340002034EFFE400860006025E000002780000
- stack 0: 0xE0
859	 2AB	SHR		 	 
- stack 1: 0x498
- stack 0: 0x2A60000
860	 2AC	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0x2A60000
- stack 0: 0xFFFF
861	 2AF	AND		 	 
- stack 1: 0x498
- stack 0: 0x0
862	 2B0	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0x1
863	 2B2	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x0
864	 2B3	PUSH2	00C0	 	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0xC0
865	 2B6	MLOAD		 	  ;; # read from x6
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0x4A0
866	 2B7	ADD		 	 
- stack 1: 0x498
- stack 0: 0x4A0
867	 2B8	PUSH4	0xFFFFFFFE	 	 
- stack 2: 0x498
- stack 1: 0x4A0
- stack 0: 0xFFFFFFFE
868	 2BD	AND		 	  ;; # mask ~1
- stack 1: 0x498
- stack 0: 0x4A0
869	 2BE	SWAP1		 	 
- stack 1: 0x4A0
- stack 0: 0x498
870	 2BF	PUSH1	04	 	 
- stack 2: 0x4A0
- stack 1: 0x498
- stack 0: 0x4
871	 2C1	ADD		 	 
- stack 1: 0x4A0
- stack 0: 0x49C
872	 2C2	PUSH2	0260	 	 
- stack 2: 0x4A0
- stack 1: 0x49C
- stack 0: 0x260
873	 2C5	MSTORE		 	  ;; # store to x19
- stack 0: 0x4A0
874	 2C6	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
875	 2C7	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x315000103340002034EFFE400860006025E0000027800000287001801170000
876	 2C8	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x315000103340002034EFFE400860006025E0000027800000287001801170000
- stack 0: 0xF0
877	 2CA	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x315
878	 2CB	JUMP		 	 
- stack 0: 0x4A0
879	 315	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4A0
880	 316	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
881	 317	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x315000103340002034EFFE400860006025E0000027800000287001801170000
882	 318	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0x315000103340002034EFFE400860006025E0000027800000287001801170000
- stack 0: 0xE0
883	 31A	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x3150001
884	 31B	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x3150001
- stack 0: 0xFFFF
885	 31E	AND		 	 
- stack 1: 0x4A0
- stack 0: 0x1
886	 31F	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0x1
- stack 0: 0x1
887	 321	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0x1
888	 322	PUSH2	0080	 	 
- stack 2: 0x4A0
- stack 1: 0x1
- stack 0: 0x80
889	 325	MLOAD		 	  ;; # read from x4
- stack 2: 0x4A0
- stack 1: 0x1
- stack 0: 0x1
890	 326	ADD		 	  ;; # ADDI 4
- stack 1: 0x4A0
- stack 0: 0x2
891	 327	PUSH2	0080	 	 
- stack 2: 0x4A0
- stack 1: 0x2
- stack 0: 0x80
892	 32A	MSTORE		 	  ;; # store to x4
- stack 0: 0x4A0
893	 32B	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
894	 32D	ADD		 	 
- stack 0: 0x4A4
895	 32E	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
896	 32F	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x3340002034EFFE400860006025E000002780000028700180117000001170000
897	 330	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x3340002034EFFE400860006025E000002780000028700180117000001170000
- stack 0: 0xF0
898	 332	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x334
899	 333	JUMP		 	 
- stack 0: 0x4A4
900	 334	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4A4
901	 335	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
902	 336	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x3340002034EFFE400860006025E000002780000028700180117000001170000
903	 337	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x3340002034EFFE400860006025E000002780000028700180117000001170000
- stack 0: 0xE0
904	 339	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x3340002
905	 33A	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x3340002
- stack 0: 0xFFFF
906	 33D	AND		 	 
- stack 1: 0x4A4
- stack 0: 0x2
907	 33E	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0x2
- stack 0: 0x1
908	 340	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0x2
909	 341	PUSH2	00A0	 	 
- stack 2: 0x4A4
- stack 1: 0x2
- stack 0: 0xA0
910	 344	MSTORE		 	  ;; # store to x5
- stack 0: 0x4A4
911	 345	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
912	 347	ADD		 	 
- stack 0: 0x4A8
913	 348	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
914	 349	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x34EFFE400860006025E00000278000002870018011700000117000002A60000
915	 34A	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x34EFFE400860006025E00000278000002870018011700000117000002A60000
- stack 0: 0xF0
916	 34C	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x34E
917	 34D	JUMP		 	 
- stack 0: 0x4A8
918	 34E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4A8
919	 34F	PUSH2	0080	 	 
- stack 1: 0x4A8
- stack 0: 0x80
920	 352	MLOAD		 	  ;; # read from x4
- stack 1: 0x4A8
- stack 0: 0x2
921	 353	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
922	 358	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A8
- stack 0: 0x2
923	 359	PUSH2	00A0	 	 
- stack 2: 0x4A8
- stack 1: 0x2
- stack 0: 0xA0
924	 35C	MLOAD		 	  ;; # read from x5
- stack 2: 0x4A8
- stack 1: 0x2
- stack 0: 0x2
925	 35D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4A8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
926	 362	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4A8
- stack 1: 0x2
- stack 0: 0x2
927	 363	SUB		 	 
- stack 1: 0x4A8
- stack 0: 0x0
928	 364	PUSH2	036C	 ;; _neq_5e92265b62384de885c19a5747e4cc5876794a9b41955ada6efa867dc61cb18d	 
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0x36C
929	 367	JUMPI		 	 
- stack 0: 0x4A8
930	 368	PUSH2	0386	 ;; _neq_after_5e92265b62384de885c19a5747e4cc5876794a9b41955ada6efa867dc61cb18d	 
- stack 1: 0x4A8
- stack 0: 0x386
931	 36B	JUMP		 	 
- stack 0: 0x4A8
932	 386	JUMPDEST		 ;; _neq_after_5e92265b62384de885c19a5747e4cc5876794a9b41955ada6efa867dc61cb18d	 
- stack 0: 0x4A8
933	 387	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
934	 389	ADD		 	 
- stack 0: 0x4AC
935	 38A	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
936	 38B	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x860006025E00000278000002870018011700000117000002A6000002D50048
937	 38C	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x860006025E00000278000002870018011700000117000002A6000002D50048
- stack 0: 0xF0
938	 38E	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x86
939	 38F	JUMP		 	 
- stack 0: 0x4AC
940	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4AC
941	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
942	 88	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x860006025E00000278000002870018011700000117000002A6000002D50048
943	 89	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0x860006025E00000278000002870018011700000117000002A6000002D50048
- stack 0: 0xE0
944	 8B	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x860006
945	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0x860006
- stack 0: 0xFFFF
946	 8F	AND		 	 
- stack 1: 0x4AC
- stack 0: 0x6
947	 90	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0x6
- stack 0: 0x1
948	 92	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0x6
949	 93	PUSH2	0380	 	 
- stack 2: 0x4AC
- stack 1: 0x6
- stack 0: 0x380
950	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x4AC
951	 97	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
952	 99	ADD		 	 
- stack 0: 0x4B0
953	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
954	 9B	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x25E00000278000002870018011700000117000002A6000002D5004803150001
955	 9C	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x25E00000278000002870018011700000117000002A6000002D5004803150001
- stack 0: 0xF0
956	 9E	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x25E
957	 9F	JUMP		 	 
- stack 0: 0x4B0
958	 25E	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x4B0
959	 25F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
960	 260	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x25E00000278000002870018011700000117000002A6000002D5004803150001
961	 261	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x25E00000278000002870018011700000117000002A6000002D5004803150001
- stack 0: 0xE0
962	 263	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x25E0000
963	 264	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x25E0000
- stack 0: 0xFFFF
964	 267	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x0
965	 268	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x0
- stack 0: 0x1
966	 26A	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x0
967	 26B	PUSH2	0080	 	 
- stack 2: 0x4B0
- stack 1: 0x0
- stack 0: 0x80
968	 26E	MSTORE		 	  ;; # store to x4
- stack 0: 0x4B0
969	 26F	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
970	 271	ADD		 	 
- stack 0: 0x4B4
971	 272	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
972	 273	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x278000002870018011700000117000002A6000002D500480315000103340002
973	 274	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x278000002870018011700000117000002A6000002D500480315000103340002
- stack 0: 0xF0
974	 276	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x278
975	 277	JUMP		 	 
- stack 0: 0x4B4
976	 278	JUMPDEST		 ;; __riscvimpl_AUIPC_17030000	  ;; # instr: auipc t1,0x0(ignore imm)
- stack 0: 0x4B4
977	 279	DUP1		 	 
- stack 1: 0x4B4
- stack 0: 0x4B4
978	 27A	PUSH2	00C0	 	 
- stack 2: 0x4B4
- stack 1: 0x4B4
- stack 0: 0xC0
979	 27D	MSTORE		 	  ;; # store to x6
- stack 0: 0x4B4
980	 27E	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
981	 280	ADD		 	 
- stack 0: 0x4B8
982	 281	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
983	 282	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x2870018011700000117000002A6000002D500480315000103340002034EFFE0
984	 283	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x2870018011700000117000002A6000002D500480315000103340002034EFFE0
- stack 0: 0xF0
985	 285	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x287
986	 286	JUMP		 	 
- stack 0: 0x4B8
987	 287	JUMPDEST		 ;; __riscvimpl_ADDI_6_6_0	  ;; # instr: addi t1,t1,16(ignore imm)
- stack 0: 0x4B8
988	 288	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
989	 289	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x2870018011700000117000002A6000002D500480315000103340002034EFFE0
990	 28A	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0x2870018011700000117000002A6000002D500480315000103340002034EFFE0
- stack 0: 0xE0
991	 28C	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x2870018
992	 28D	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x2870018
- stack 0: 0xFFFF
993	 290	AND		 	 
- stack 1: 0x4B8
- stack 0: 0x18
994	 291	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0x18
- stack 0: 0x1
995	 293	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0x18
996	 294	PUSH2	00C0	 	 
- stack 2: 0x4B8
- stack 1: 0x18
- stack 0: 0xC0
997	 297	MLOAD		 	  ;; # read from x6
- stack 2: 0x4B8
- stack 1: 0x18
- stack 0: 0x4B4
998	 298	ADD		 	  ;; # ADDI 6
- stack 1: 0x4B8
- stack 0: 0x4CC
999	 299	PUSH2	00C0	 	 
- stack 2: 0x4B8
- stack 1: 0x4CC
- stack 0: 0xC0
1000	 29C	MSTORE		 	  ;; # store to x6
- stack 0: 0x4B8
1001	 29D	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
1002	 29F	ADD		 	 
- stack 0: 0x4BC
1003	 2A0	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
1004	 2A1	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x11700000117000002A6000002D500480315000103340002034EFFE003900001
1005	 2A2	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x11700000117000002A6000002D500480315000103340002034EFFE003900001
- stack 0: 0xF0
1006	 2A4	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x117
1007	 2A5	JUMP		 	 
- stack 0: 0x4BC
1008	 117	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x4BC
1009	 118	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
1010	 119	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x11700000117000002A6000002D500480315000103340002034EFFE003900001
1011	 11A	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0x11700000117000002A6000002D500480315000103340002034EFFE003900001
- stack 0: 0xE0
1012	 11C	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x1170000
1013	 11D	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x1170000
- stack 0: 0xFFFF
1014	 120	AND		 	 
- stack 1: 0x4BC
- stack 0: 0x0
1015	 121	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0x0
- stack 0: 0x1
1016	 123	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0x0
1017	 124	POP		 	 
- stack 0: 0x4BC
1018	 125	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
1019	 127	ADD		 	 
- stack 0: 0x4C0
1020	 128	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
1021	 129	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x117000002A6000002D500480315000103340002034EFFE00390000100BA0000
1022	 12A	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x117000002A6000002D500480315000103340002034EFFE00390000100BA0000
- stack 0: 0xF0
1023	 12C	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x117
1024	 12D	JUMP		 	 
- stack 0: 0x4C0
1025	 117	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x4C0
1026	 118	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
1027	 119	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x117000002A6000002D500480315000103340002034EFFE00390000100BA0000
1028	 11A	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0x117000002A6000002D500480315000103340002034EFFE00390000100BA0000
- stack 0: 0xE0
1029	 11C	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x1170000
1030	 11D	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x1170000
- stack 0: 0xFFFF
1031	 120	AND		 	 
- stack 1: 0x4C0
- stack 0: 0x0
1032	 121	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0x0
- stack 0: 0x1
1033	 123	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0x0
1034	 124	POP		 	 
- stack 0: 0x4C0
1035	 125	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
1036	 127	ADD		 	 
- stack 0: 0x4C4
1037	 128	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
1038	 129	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x2A6000002D500480315000103340002034EFFE00390000100BA000000C9001C
1039	 12A	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x2A6000002D500480315000103340002034EFFE00390000100BA000000C9001C
- stack 0: 0xF0
1040	 12C	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x2A6
1041	 12D	JUMP		 	 
- stack 0: 0x4C4
1042	 2A6	JUMPDEST		 ;; __riscvimpl_JALR_19_6_0	  ;; # instr: jalr s3,0(t1)(ignore imm)
- stack 0: 0x4C4
1043	 2A7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
1044	 2A8	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x2A6000002D500480315000103340002034EFFE00390000100BA000000C9001C
1045	 2A9	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0x2A6000002D500480315000103340002034EFFE00390000100BA000000C9001C
- stack 0: 0xE0
1046	 2AB	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x2A60000
1047	 2AC	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x2A60000
- stack 0: 0xFFFF
1048	 2AF	AND		 	 
- stack 1: 0x4C4
- stack 0: 0x0
1049	 2B0	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x1
1050	 2B2	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0x0
1051	 2B3	PUSH2	00C0	 	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0xC0
1052	 2B6	MLOAD		 	  ;; # read from x6
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x4CC
1053	 2B7	ADD		 	 
- stack 1: 0x4C4
- stack 0: 0x4CC
1054	 2B8	PUSH4	0xFFFFFFFE	 	 
- stack 2: 0x4C4
- stack 1: 0x4CC
- stack 0: 0xFFFFFFFE
1055	 2BD	AND		 	  ;; # mask ~1
- stack 1: 0x4C4
- stack 0: 0x4CC
1056	 2BE	SWAP1		 	 
- stack 1: 0x4CC
- stack 0: 0x4C4
1057	 2BF	PUSH1	04	 	 
- stack 2: 0x4CC
- stack 1: 0x4C4
- stack 0: 0x4
1058	 2C1	ADD		 	 
- stack 1: 0x4CC
- stack 0: 0x4C8
1059	 2C2	PUSH2	0260	 	 
- stack 2: 0x4CC
- stack 1: 0x4C8
- stack 0: 0x260
1060	 2C5	MSTORE		 	  ;; # store to x19
- stack 0: 0x4CC
1061	 2C6	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
1062	 2C7	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x315000103340002034EFFE00390000100BA000000C9001C00E8FFFC01660001
1063	 2C8	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x315000103340002034EFFE00390000100BA000000C9001C00E8FFFC01660001
- stack 0: 0xF0
1064	 2CA	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x315
1065	 2CB	JUMP		 	 
- stack 0: 0x4CC
1066	 315	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4CC
1067	 316	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
1068	 317	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x315000103340002034EFFE00390000100BA000000C9001C00E8FFFC01660001
1069	 318	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0x315000103340002034EFFE00390000100BA000000C9001C00E8FFFC01660001
- stack 0: 0xE0
1070	 31A	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x3150001
1071	 31B	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0x3150001
- stack 0: 0xFFFF
1072	 31E	AND		 	 
- stack 1: 0x4CC
- stack 0: 0x1
1073	 31F	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0x1
- stack 0: 0x1
1074	 321	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0x1
1075	 322	PUSH2	0080	 	 
- stack 2: 0x4CC
- stack 1: 0x1
- stack 0: 0x80
1076	 325	MLOAD		 	  ;; # read from x4
- stack 2: 0x4CC
- stack 1: 0x1
- stack 0: 0x0
1077	 326	ADD		 	  ;; # ADDI 4
- stack 1: 0x4CC
- stack 0: 0x1
1078	 327	PUSH2	0080	 	 
- stack 2: 0x4CC
- stack 1: 0x1
- stack 0: 0x80
1079	 32A	MSTORE		 	  ;; # store to x4
- stack 0: 0x4CC
1080	 32B	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
1081	 32D	ADD		 	 
- stack 0: 0x4D0
1082	 32E	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
1083	 32F	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x3340002034EFFE00390000100BA000000C9001C00E8FFFC0166000101660001
1084	 330	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x3340002034EFFE00390000100BA000000C9001C00E8FFFC0166000101660001
- stack 0: 0xF0
1085	 332	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x334
1086	 333	JUMP		 	 
- stack 0: 0x4D0
1087	 334	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4D0
1088	 335	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
1089	 336	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x3340002034EFFE00390000100BA000000C9001C00E8FFFC0166000101660001
1090	 337	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x3340002034EFFE00390000100BA000000C9001C00E8FFFC0166000101660001
- stack 0: 0xE0
1091	 339	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x3340002
1092	 33A	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x3340002
- stack 0: 0xFFFF
1093	 33D	AND		 	 
- stack 1: 0x4D0
- stack 0: 0x2
1094	 33E	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0x2
- stack 0: 0x1
1095	 340	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0x2
1096	 341	PUSH2	00A0	 	 
- stack 2: 0x4D0
- stack 1: 0x2
- stack 0: 0xA0
1097	 344	MSTORE		 	  ;; # store to x5
- stack 0: 0x4D0
1098	 345	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1099	 347	ADD		 	 
- stack 0: 0x4D4
1100	 348	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1101	 349	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x34EFFE00390000100BA000000C9001C00E8FFFC016600010166000101660001
1102	 34A	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x34EFFE00390000100BA000000C9001C00E8FFFC016600010166000101660001
- stack 0: 0xF0
1103	 34C	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x34E
1104	 34D	JUMP		 	 
- stack 0: 0x4D4
1105	 34E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4D4
1106	 34F	PUSH2	0080	 	 
- stack 1: 0x4D4
- stack 0: 0x80
1107	 352	MLOAD		 	  ;; # read from x4
- stack 1: 0x4D4
- stack 0: 0x1
1108	 353	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1109	 358	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D4
- stack 0: 0x1
1110	 359	PUSH2	00A0	 	 
- stack 2: 0x4D4
- stack 1: 0x1
- stack 0: 0xA0
1111	 35C	MLOAD		 	  ;; # read from x5
- stack 2: 0x4D4
- stack 1: 0x1
- stack 0: 0x2
1112	 35D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1113	 362	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D4
- stack 1: 0x1
- stack 0: 0x2
1114	 363	SUB		 	 
- stack 1: 0x4D4
- stack 0: 0x1
1115	 364	PUSH2	036C	 ;; _neq_5e92265b62384de885c19a5747e4cc5876794a9b41955ada6efa867dc61cb18d	 
- stack 2: 0x4D4
- stack 1: 0x1
- stack 0: 0x36C
1116	 367	JUMPI		 	 
- stack 0: 0x4D4
1117	 36C	JUMPDEST		 ;; _neq_5e92265b62384de885c19a5747e4cc5876794a9b41955ada6efa867dc61cb18d	 
- stack 0: 0x4D4
1118	 36D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
1119	 36E	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x34EFFE00390000100BA000000C9001C00E8FFFC016600010166000101660001
1120	 36F	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0x34EFFE00390000100BA000000C9001C00E8FFFC016600010166000101660001
- stack 0: 0xE0
1121	 371	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x34EFFE0
1122	 372	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x34EFFE0
- stack 0: 0xFFFF
1123	 375	AND		 	 
- stack 1: 0x4D4
- stack 0: 0xFFE0
1124	 376	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0xFFE0
- stack 0: 0x1
1125	 378	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1126	 379	ADD		 	 
- stack 0: 0x4B4
1127	 37A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFF
1128	 37F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4B4
1129	 380	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
1130	 381	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x278000002870018011700000117000002A6000002D500480315000103340002
1131	 382	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x278000002870018011700000117000002A6000002D500480315000103340002
- stack 0: 0xF0
1132	 384	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x278
1133	 385	JUMP		 	 
- stack 0: 0x4B4
1134	 278	JUMPDEST		 ;; __riscvimpl_AUIPC_17030000	  ;; # instr: auipc t1,0x0(ignore imm)
- stack 0: 0x4B4
1135	 279	DUP1		 	 
- stack 1: 0x4B4
- stack 0: 0x4B4
1136	 27A	PUSH2	00C0	 	 
- stack 2: 0x4B4
- stack 1: 0x4B4
- stack 0: 0xC0
1137	 27D	MSTORE		 	  ;; # store to x6
- stack 0: 0x4B4
1138	 27E	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
1139	 280	ADD		 	 
- stack 0: 0x4B8
1140	 281	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
1141	 282	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x2870018011700000117000002A6000002D500480315000103340002034EFFE0
1142	 283	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x2870018011700000117000002A6000002D500480315000103340002034EFFE0
- stack 0: 0xF0
1143	 285	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x287
1144	 286	JUMP		 	 
- stack 0: 0x4B8
1145	 287	JUMPDEST		 ;; __riscvimpl_ADDI_6_6_0	  ;; # instr: addi t1,t1,16(ignore imm)
- stack 0: 0x4B8
1146	 288	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
1147	 289	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x2870018011700000117000002A6000002D500480315000103340002034EFFE0
1148	 28A	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0x2870018011700000117000002A6000002D500480315000103340002034EFFE0
- stack 0: 0xE0
1149	 28C	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x2870018
1150	 28D	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x2870018
- stack 0: 0xFFFF
1151	 290	AND		 	 
- stack 1: 0x4B8
- stack 0: 0x18
1152	 291	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0x18
- stack 0: 0x1
1153	 293	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0x18
1154	 294	PUSH2	00C0	 	 
- stack 2: 0x4B8
- stack 1: 0x18
- stack 0: 0xC0
1155	 297	MLOAD		 	  ;; # read from x6
- stack 2: 0x4B8
- stack 1: 0x18
- stack 0: 0x4B4
1156	 298	ADD		 	  ;; # ADDI 6
- stack 1: 0x4B8
- stack 0: 0x4CC
1157	 299	PUSH2	00C0	 	 
- stack 2: 0x4B8
- stack 1: 0x4CC
- stack 0: 0xC0
1158	 29C	MSTORE		 	  ;; # store to x6
- stack 0: 0x4B8
1159	 29D	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
1160	 29F	ADD		 	 
- stack 0: 0x4BC
1161	 2A0	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
1162	 2A1	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x11700000117000002A6000002D500480315000103340002034EFFE003900001
1163	 2A2	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x11700000117000002A6000002D500480315000103340002034EFFE003900001
- stack 0: 0xF0
1164	 2A4	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x117
1165	 2A5	JUMP		 	 
- stack 0: 0x4BC
1166	 117	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x4BC
1167	 118	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
1168	 119	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x11700000117000002A6000002D500480315000103340002034EFFE003900001
1169	 11A	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0x11700000117000002A6000002D500480315000103340002034EFFE003900001
- stack 0: 0xE0
1170	 11C	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x1170000
1171	 11D	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x1170000
- stack 0: 0xFFFF
1172	 120	AND		 	 
- stack 1: 0x4BC
- stack 0: 0x0
1173	 121	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0x0
- stack 0: 0x1
1174	 123	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0x0
1175	 124	POP		 	 
- stack 0: 0x4BC
1176	 125	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
1177	 127	ADD		 	 
- stack 0: 0x4C0
1178	 128	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
1179	 129	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x117000002A6000002D500480315000103340002034EFFE00390000100BA0000
1180	 12A	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x117000002A6000002D500480315000103340002034EFFE00390000100BA0000
- stack 0: 0xF0
1181	 12C	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x117
1182	 12D	JUMP		 	 
- stack 0: 0x4C0
1183	 117	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x4C0
1184	 118	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
1185	 119	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x117000002A6000002D500480315000103340002034EFFE00390000100BA0000
1186	 11A	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0x117000002A6000002D500480315000103340002034EFFE00390000100BA0000
- stack 0: 0xE0
1187	 11C	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x1170000
1188	 11D	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x1170000
- stack 0: 0xFFFF
1189	 120	AND		 	 
- stack 1: 0x4C0
- stack 0: 0x0
1190	 121	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0x0
- stack 0: 0x1
1191	 123	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0x0
1192	 124	POP		 	 
- stack 0: 0x4C0
1193	 125	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
1194	 127	ADD		 	 
- stack 0: 0x4C4
1195	 128	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
1196	 129	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x2A6000002D500480315000103340002034EFFE00390000100BA000000C9001C
1197	 12A	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x2A6000002D500480315000103340002034EFFE00390000100BA000000C9001C
- stack 0: 0xF0
1198	 12C	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x2A6
1199	 12D	JUMP		 	 
- stack 0: 0x4C4
1200	 2A6	JUMPDEST		 ;; __riscvimpl_JALR_19_6_0	  ;; # instr: jalr s3,0(t1)(ignore imm)
- stack 0: 0x4C4
1201	 2A7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
1202	 2A8	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x2A6000002D500480315000103340002034EFFE00390000100BA000000C9001C
1203	 2A9	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0x2A6000002D500480315000103340002034EFFE00390000100BA000000C9001C
- stack 0: 0xE0
1204	 2AB	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x2A60000
1205	 2AC	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x2A60000
- stack 0: 0xFFFF
1206	 2AF	AND		 	 
- stack 1: 0x4C4
- stack 0: 0x0
1207	 2B0	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x1
1208	 2B2	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0x0
1209	 2B3	PUSH2	00C0	 	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0xC0
1210	 2B6	MLOAD		 	  ;; # read from x6
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x4CC
1211	 2B7	ADD		 	 
- stack 1: 0x4C4
- stack 0: 0x4CC
1212	 2B8	PUSH4	0xFFFFFFFE	 	 
- stack 2: 0x4C4
- stack 1: 0x4CC
- stack 0: 0xFFFFFFFE
1213	 2BD	AND		 	  ;; # mask ~1
- stack 1: 0x4C4
- stack 0: 0x4CC
1214	 2BE	SWAP1		 	 
- stack 1: 0x4CC
- stack 0: 0x4C4
1215	 2BF	PUSH1	04	 	 
- stack 2: 0x4CC
- stack 1: 0x4C4
- stack 0: 0x4
1216	 2C1	ADD		 	 
- stack 1: 0x4CC
- stack 0: 0x4C8
1217	 2C2	PUSH2	0260	 	 
- stack 2: 0x4CC
- stack 1: 0x4C8
- stack 0: 0x260
1218	 2C5	MSTORE		 	  ;; # store to x19
- stack 0: 0x4CC
1219	 2C6	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
1220	 2C7	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x315000103340002034EFFE00390000100BA000000C9001C00E8FFFC01660001
1221	 2C8	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x315000103340002034EFFE00390000100BA000000C9001C00E8FFFC01660001
- stack 0: 0xF0
1222	 2CA	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x315
1223	 2CB	JUMP		 	 
- stack 0: 0x4CC
1224	 315	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4CC
1225	 316	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
1226	 317	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x315000103340002034EFFE00390000100BA000000C9001C00E8FFFC01660001
1227	 318	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0x315000103340002034EFFE00390000100BA000000C9001C00E8FFFC01660001
- stack 0: 0xE0
1228	 31A	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x3150001
1229	 31B	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0x3150001
- stack 0: 0xFFFF
1230	 31E	AND		 	 
- stack 1: 0x4CC
- stack 0: 0x1
1231	 31F	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0x1
- stack 0: 0x1
1232	 321	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0x1
1233	 322	PUSH2	0080	 	 
- stack 2: 0x4CC
- stack 1: 0x1
- stack 0: 0x80
1234	 325	MLOAD		 	  ;; # read from x4
- stack 2: 0x4CC
- stack 1: 0x1
- stack 0: 0x1
1235	 326	ADD		 	  ;; # ADDI 4
- stack 1: 0x4CC
- stack 0: 0x2
1236	 327	PUSH2	0080	 	 
- stack 2: 0x4CC
- stack 1: 0x2
- stack 0: 0x80
1237	 32A	MSTORE		 	  ;; # store to x4
- stack 0: 0x4CC
1238	 32B	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
1239	 32D	ADD		 	 
- stack 0: 0x4D0
1240	 32E	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
1241	 32F	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x3340002034EFFE00390000100BA000000C9001C00E8FFFC0166000101660001
1242	 330	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x3340002034EFFE00390000100BA000000C9001C00E8FFFC0166000101660001
- stack 0: 0xF0
1243	 332	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x334
1244	 333	JUMP		 	 
- stack 0: 0x4D0
1245	 334	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4D0
1246	 335	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
1247	 336	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x3340002034EFFE00390000100BA000000C9001C00E8FFFC0166000101660001
1248	 337	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x3340002034EFFE00390000100BA000000C9001C00E8FFFC0166000101660001
- stack 0: 0xE0
1249	 339	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x3340002
1250	 33A	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x3340002
- stack 0: 0xFFFF
1251	 33D	AND		 	 
- stack 1: 0x4D0
- stack 0: 0x2
1252	 33E	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0x2
- stack 0: 0x1
1253	 340	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0x2
1254	 341	PUSH2	00A0	 	 
- stack 2: 0x4D0
- stack 1: 0x2
- stack 0: 0xA0
1255	 344	MSTORE		 	  ;; # store to x5
- stack 0: 0x4D0
1256	 345	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1257	 347	ADD		 	 
- stack 0: 0x4D4
1258	 348	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1259	 349	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x34EFFE00390000100BA000000C9001C00E8FFFC016600010166000101660001
1260	 34A	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x34EFFE00390000100BA000000C9001C00E8FFFC016600010166000101660001
- stack 0: 0xF0
1261	 34C	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x34E
1262	 34D	JUMP		 	 
- stack 0: 0x4D4
1263	 34E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4D4
1264	 34F	PUSH2	0080	 	 
- stack 1: 0x4D4
- stack 0: 0x80
1265	 352	MLOAD		 	  ;; # read from x4
- stack 1: 0x4D4
- stack 0: 0x2
1266	 353	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1267	 358	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D4
- stack 0: 0x2
1268	 359	PUSH2	00A0	 	 
- stack 2: 0x4D4
- stack 1: 0x2
- stack 0: 0xA0
1269	 35C	MLOAD		 	  ;; # read from x5
- stack 2: 0x4D4
- stack 1: 0x2
- stack 0: 0x2
1270	 35D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1271	 362	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D4
- stack 1: 0x2
- stack 0: 0x2
1272	 363	SUB		 	 
- stack 1: 0x4D4
- stack 0: 0x0
1273	 364	PUSH2	036C	 ;; _neq_5e92265b62384de885c19a5747e4cc5876794a9b41955ada6efa867dc61cb18d	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x36C
1274	 367	JUMPI		 	 
- stack 0: 0x4D4
1275	 368	PUSH2	0386	 ;; _neq_after_5e92265b62384de885c19a5747e4cc5876794a9b41955ada6efa867dc61cb18d	 
- stack 1: 0x4D4
- stack 0: 0x386
1276	 36B	JUMP		 	 
- stack 0: 0x4D4
1277	 386	JUMPDEST		 ;; _neq_after_5e92265b62384de885c19a5747e4cc5876794a9b41955ada6efa867dc61cb18d	 
- stack 0: 0x4D4
1278	 387	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1279	 389	ADD		 	 
- stack 0: 0x4D8
1280	 38A	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1281	 38B	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x390000100BA000000C9001C00E8FFFC01660001016600010166000101660001
1282	 38C	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x390000100BA000000C9001C00E8FFFC01660001016600010166000101660001
- stack 0: 0xF0
1283	 38E	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x390
1284	 38F	JUMP		 	 
- stack 0: 0x4D8
1285	 390	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x4D8
1286	 391	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
1287	 392	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x390000100BA000000C9001C00E8FFFC01660001016600010166000101660001
1288	 393	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0x390000100BA000000C9001C00E8FFFC01660001016600010166000101660001
- stack 0: 0xE0
1289	 395	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x3900001
1290	 396	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x3900001
- stack 0: 0xFFFF
1291	 399	AND		 	 
- stack 1: 0x4D8
- stack 0: 0x1
1292	 39A	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0x1
- stack 0: 0x1
1293	 39C	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0x1
1294	 39D	PUSH2	0020	 	 
- stack 2: 0x4D8
- stack 1: 0x1
- stack 0: 0x20
1295	 3A0	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D8
1296	 3A1	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1297	 3A3	ADD		 	 
- stack 0: 0x4DC
1298	 3A4	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1299	 3A5	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xBA000000C9001C00E8FFFC0166000101660001016600010166000101660001
1300	 3A6	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0xBA000000C9001C00E8FFFC0166000101660001016600010166000101660001
- stack 0: 0xF0
1301	 3A8	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xBA
1302	 3A9	JUMP		 	 
- stack 0: 0x4DC
1303	 BA	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x4DC
1304	 BB	DUP1		 	 
- stack 1: 0x4DC
- stack 0: 0x4DC
1305	 BC	PUSH2	0040	 	 
- stack 2: 0x4DC
- stack 1: 0x4DC
- stack 0: 0x40
1306	 BF	MSTORE		 	  ;; # store to x2
- stack 0: 0x4DC
1307	 C0	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1308	 C2	ADD		 	 
- stack 0: 0x4E0
1309	 C3	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1310	 C4	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xC9001C00E8FFFC016600010166000101660001016600010166000101660001
1311	 C5	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0xC9001C00E8FFFC016600010166000101660001016600010166000101660001
- stack 0: 0xF0
1312	 C7	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xC9
1313	 C8	JUMP		 	 
- stack 0: 0x4E0
1314	 C9	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,24(ignore imm)
- stack 0: 0x4E0
1315	 CA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1316	 CB	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xC9001C00E8FFFC016600010166000101660001016600010166000101660001
1317	 CC	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0xC9001C00E8FFFC016600010166000101660001016600010166000101660001
- stack 0: 0xE0
1318	 CE	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xC9001C
1319	 CF	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0xC9001C
- stack 0: 0xFFFF
1320	 D2	AND		 	 
- stack 1: 0x4E0
- stack 0: 0x1C
1321	 D3	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0x1C
- stack 0: 0x1
1322	 D5	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0x1C
1323	 D6	PUSH2	0040	 	 
- stack 2: 0x4E0
- stack 1: 0x1C
- stack 0: 0x40
1324	 D9	MLOAD		 	  ;; # read from x2
- stack 2: 0x4E0
- stack 1: 0x1C
- stack 0: 0x4DC
1325	 DA	ADD		 	  ;; # ADDI 2
- stack 1: 0x4E0
- stack 0: 0x4F8
1326	 DB	PUSH2	0040	 	 
- stack 2: 0x4E0
- stack 1: 0x4F8
- stack 0: 0x40
1327	 DE	MSTORE		 	  ;; # store to x2
- stack 0: 0x4E0
1328	 DF	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1329	 E1	ADD		 	 
- stack 0: 0x4E4
1330	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1331	 E3	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0xE8FFFC01660001016600010166000101660001016600010166000103AA0004
1332	 E4	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0xE8FFFC01660001016600010166000101660001016600010166000103AA0004
- stack 0: 0xF0
1333	 E6	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0xE8
1334	 E7	JUMP		 	 
- stack 0: 0x4E4
1335	 E8	JUMPDEST		 ;; __riscvimpl_JALR_19_2_0	  ;; # instr: jalr s3,0(sp)(ignore imm)
- stack 0: 0x4E4
1336	 E9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1337	 EA	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0xE8FFFC01660001016600010166000101660001016600010166000103AA0004
1338	 EB	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0xE8FFFC01660001016600010166000101660001016600010166000103AA0004
- stack 0: 0xE0
1339	 ED	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0xE8FFFC
1340	 EE	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0xE8FFFC
- stack 0: 0xFFFF
1341	 F1	AND		 	 
- stack 1: 0x4E4
- stack 0: 0xFFFC
1342	 F2	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0xFFFC
- stack 0: 0x1
1343	 F4	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
1344	 F5	PUSH2	0040	 	 
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
- stack 0: 0x40
1345	 F8	MLOAD		 	  ;; # read from x2
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
- stack 0: 0x4F8
1346	 F9	ADD		 	 
- stack 1: 0x4E4
- stack 0: 0x4F4
1347	 FA	PUSH4	0xFFFFFFFE	 	 
- stack 2: 0x4E4
- stack 1: 0x4F4
- stack 0: 0xFFFFFFFE
1348	 FF	AND		 	  ;; # mask ~1
- stack 1: 0x4E4
- stack 0: 0x4F4
1349	 100	SWAP1		 	 
- stack 1: 0x4F4
- stack 0: 0x4E4
1350	 101	PUSH1	04	 	 
- stack 2: 0x4F4
- stack 1: 0x4E4
- stack 0: 0x4
1351	 103	ADD		 	 
- stack 1: 0x4F4
- stack 0: 0x4E8
1352	 104	PUSH2	0260	 	 
- stack 2: 0x4F4
- stack 1: 0x4E8
- stack 0: 0x260
1353	 107	MSTORE		 	  ;; # store to x19
- stack 0: 0x4F4
1354	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1355	 109	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x1660001016600010166000103AA00040086000703C4000802D5001800210000
1356	 10A	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x1660001016600010166000103AA00040086000703C4000802D5001800210000
- stack 0: 0xF0
1357	 10C	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x166
1358	 10D	JUMP		 	 
- stack 0: 0x4F4
1359	 166	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-16(ignore imm)
- stack 0: 0x4F4
1360	 167	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1361	 168	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x1660001016600010166000103AA00040086000703C4000802D5001800210000
1362	 169	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x1660001016600010166000103AA00040086000703C4000802D5001800210000
- stack 0: 0xE0
1363	 16B	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x1660001
1364	 16C	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x1660001
- stack 0: 0xFFFF
1365	 16F	AND		 	 
- stack 1: 0x4F4
- stack 0: 0x1
1366	 170	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x1
1367	 172	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0x1
1368	 173	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x20
1369	 176	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F4
- stack 1: 0x1
- stack 0: 0x1
1370	 177	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F4
- stack 0: 0x2
1371	 178	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0x2
- stack 0: 0x20
1372	 17B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F4
1373	 17C	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1374	 17E	ADD		 	 
- stack 0: 0x4F8
1375	 17F	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1376	 180	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x16600010166000103AA00040086000703C4000802D500180021000000340548
1377	 181	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x16600010166000103AA00040086000703C4000802D500180021000000340548
- stack 0: 0xF0
1378	 183	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x166
1379	 184	JUMP		 	 
- stack 0: 0x4F8
1380	 166	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-16(ignore imm)
- stack 0: 0x4F8
1381	 167	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1382	 168	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x16600010166000103AA00040086000703C4000802D500180021000000340548
1383	 169	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x16600010166000103AA00040086000703C4000802D500180021000000340548
- stack 0: 0xE0
1384	 16B	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x1660001
1385	 16C	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x1660001
- stack 0: 0xFFFF
1386	 16F	AND		 	 
- stack 1: 0x4F8
- stack 0: 0x1
1387	 170	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x1
- stack 0: 0x1
1388	 172	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x1
1389	 173	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0x1
- stack 0: 0x20
1390	 176	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F8
- stack 1: 0x1
- stack 0: 0x2
1391	 177	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F8
- stack 0: 0x3
1392	 178	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0x3
- stack 0: 0x20
1393	 17B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F8
1394	 17C	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1395	 17E	ADD		 	 
- stack 0: 0x4FC
1396	 17F	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1397	 180	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x166000103AA00040086000703C4000802D50018002100000034054800530042
1398	 181	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x166000103AA00040086000703C4000802D50018002100000034054800530042
- stack 0: 0xF0
1399	 183	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x166
1400	 184	JUMP		 	 
- stack 0: 0x4FC
1401	 166	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-16(ignore imm)
- stack 0: 0x4FC
1402	 167	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1403	 168	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x166000103AA00040086000703C4000802D50018002100000034054800530042
1404	 169	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x166000103AA00040086000703C4000802D50018002100000034054800530042
- stack 0: 0xE0
1405	 16B	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1660001
1406	 16C	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x1660001
- stack 0: 0xFFFF
1407	 16F	AND		 	 
- stack 1: 0x4FC
- stack 0: 0x1
1408	 170	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x1
1409	 172	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0x1
1410	 173	PUSH2	0020	 	 
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x20
1411	 176	MLOAD		 	  ;; # read from x1
- stack 2: 0x4FC
- stack 1: 0x1
- stack 0: 0x3
1412	 177	ADD		 	  ;; # ADDI 1
- stack 1: 0x4FC
- stack 0: 0x4
1413	 178	PUSH2	0020	 	 
- stack 2: 0x4FC
- stack 1: 0x4
- stack 0: 0x20
1414	 17B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4FC
1415	 17C	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1416	 17E	ADD		 	 
- stack 0: 0x500
1417	 17F	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1418	 180	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x3AA00040086000703C4000802D5001800210000003405480053004200660000
1419	 181	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x3AA00040086000703C4000802D5001800210000003405480053004200660000
- stack 0: 0xF0
1420	 183	SHR		 	 
- stack 1: 0x500
- stack 0: 0x3AA
1421	 184	JUMP		 	 
- stack 0: 0x500
1422	 3AA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,4(ignore imm)
- stack 0: 0x500
1423	 3AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1424	 3AC	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x3AA00040086000703C4000802D5001800210000003405480053004200660000
1425	 3AD	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x3AA00040086000703C4000802D5001800210000003405480053004200660000
- stack 0: 0xE0
1426	 3AF	SHR		 	 
- stack 1: 0x500
- stack 0: 0x3AA0004
1427	 3B0	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x3AA0004
- stack 0: 0xFFFF
1428	 3B3	AND		 	 
- stack 1: 0x500
- stack 0: 0x4
1429	 3B4	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0x4
- stack 0: 0x1
1430	 3B6	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0x4
1431	 3B7	PUSH2	03A0	 	 
- stack 2: 0x500
- stack 1: 0x4
- stack 0: 0x3A0
1432	 3BA	MSTORE		 	  ;; # store to x29
- stack 0: 0x500
1433	 3BB	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1434	 3BD	ADD		 	 
- stack 0: 0x504
1435	 3BE	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1436	 3BF	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x86000703C4000802D500180021000000340548005300420066000004060001
1437	 3C0	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x86000703C4000802D500180021000000340548005300420066000004060001
- stack 0: 0xF0
1438	 3C2	SHR		 	 
- stack 1: 0x504
- stack 0: 0x86
1439	 3C3	JUMP		 	 
- stack 0: 0x504
1440	 86	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x504
1441	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1442	 88	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x86000703C4000802D500180021000000340548005300420066000004060001
1443	 89	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x86000703C4000802D500180021000000340548005300420066000004060001
- stack 0: 0xE0
1444	 8B	SHR		 	 
- stack 1: 0x504
- stack 0: 0x860007
1445	 8C	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x860007
- stack 0: 0xFFFF
1446	 8F	AND		 	 
- stack 1: 0x504
- stack 0: 0x7
1447	 90	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0x7
- stack 0: 0x1
1448	 92	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0x7
1449	 93	PUSH2	0380	 	 
- stack 2: 0x504
- stack 1: 0x7
- stack 0: 0x380
1450	 96	MSTORE		 	  ;; # store to x28
- stack 0: 0x504
1451	 97	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1452	 99	ADD		 	 
- stack 0: 0x508
1453	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1454	 9B	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x3C4000802D50018002100000034054800530042006600000406000100210000
1455	 9C	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x3C4000802D50018002100000034054800530042006600000406000100210000
- stack 0: 0xF0
1456	 9E	SHR		 	 
- stack 1: 0x508
- stack 0: 0x3C4
1457	 9F	JUMP		 	 
- stack 0: 0x508
1458	 3C4	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,8(ignore imm)
- stack 0: 0x508
1459	 3C5	PUSH2	0020	 	 
- stack 1: 0x508
- stack 0: 0x20
1460	 3C8	MLOAD		 	  ;; # read from x1
- stack 1: 0x508
- stack 0: 0x4
1461	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x508
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
1462	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x508
- stack 0: 0x4
1463	 3CF	PUSH2	03A0	 	 
- stack 2: 0x508
- stack 1: 0x4
- stack 0: 0x3A0
1464	 3D2	MLOAD		 	  ;; # read from x29
- stack 2: 0x508
- stack 1: 0x4
- stack 0: 0x4
1465	 3D3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x508
- stack 2: 0x4
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
1466	 3D8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x508
- stack 1: 0x4
- stack 0: 0x4
1467	 3D9	SUB		 	 
- stack 1: 0x508
- stack 0: 0x0
1468	 3DA	PUSH2	03E2	 ;; _neq_1bde2161e55da8e6ea79a3eb1258af6baf7ada0099b7f7dadb12ee55a4467b03	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x3E2
1469	 3DD	JUMPI		 	 
- stack 0: 0x508
1470	 3DE	PUSH2	03FC	 ;; _neq_after_1bde2161e55da8e6ea79a3eb1258af6baf7ada0099b7f7dadb12ee55a4467b03	 
- stack 1: 0x508
- stack 0: 0x3FC
1471	 3E1	JUMP		 	 
- stack 0: 0x508
1472	 3FC	JUMPDEST		 ;; _neq_after_1bde2161e55da8e6ea79a3eb1258af6baf7ada0099b7f7dadb12ee55a4467b03	 
- stack 0: 0x508
1473	 3FD	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1474	 3FF	ADD		 	 
- stack 0: 0x50C
1475	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1476	 401	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x2D500180021000000340548005300420066000004060001002100000034054C
1477	 402	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x2D500180021000000340548005300420066000004060001002100000034054C
- stack 0: 0xF0
1478	 404	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x2D5
1479	 405	JUMP		 	 
- stack 0: 0x50C
1480	 2D5	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,9c(ignore imm)
- stack 0: 0x50C
1481	 2D6	PUSH1	00	 	 
- stack 1: 0x50C
- stack 0: 0x0
1482	 2D8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1483	 2DD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x50C
- stack 0: 0x0
1484	 2DE	PUSH2	0380	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x380
1485	 2E1	MLOAD		 	  ;; # read from x28
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x7
1486	 2E2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x50C
- stack 2: 0x0
- stack 1: 0x7
- stack 0: 0xFFFFFFFF
1487	 2E7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x7
1488	 2E8	SUB		 	 
- stack 1: 0x50C
- stack 0: 0x7
1489	 2E9	PUSH2	02F1	 ;; _neq_fe7a88daf9b3b15d9c5d499f306aa1edd48c9c9375bcadd7943e1159c4942a75	 
- stack 2: 0x50C
- stack 1: 0x7
- stack 0: 0x2F1
1490	 2EC	JUMPI		 	 
- stack 0: 0x50C
1491	 2F1	JUMPDEST		 ;; _neq_fe7a88daf9b3b15d9c5d499f306aa1edd48c9c9375bcadd7943e1159c4942a75	 
- stack 0: 0x50C
1492	 2F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1493	 2F3	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x2D500180021000000340548005300420066000004060001002100000034054C
1494	 2F4	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0x2D500180021000000340548005300420066000004060001002100000034054C
- stack 0: 0xE0
1495	 2F6	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x2D50018
1496	 2F7	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0x2D50018
- stack 0: 0xFFFF
1497	 2FA	AND		 	 
- stack 1: 0x50C
- stack 0: 0x18
1498	 2FB	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0x18
- stack 0: 0x1
1499	 2FD	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0x18
1500	 2FE	ADD		 	 
- stack 0: 0x524
1501	 2FF	PUSH4	FFFFFFFF	 	 
- stack 1: 0x524
- stack 0: 0xFFFFFFFF
1502	 304	AND		 	  ;; # mask to 32 bits
- stack 0: 0x524
1503	 305	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1504	 306	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x2100000034054C00530042006600000411000000660000000000006574796D
1505	 307	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x2100000034054C00530042006600000411000000660000000000006574796D
- stack 0: 0xF0
1506	 309	SHR		 	 
- stack 1: 0x524
- stack 0: 0x21
1507	 30A	JUMP		 	 
- stack 0: 0x524
1508	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x524
1509	 22	PUSH4	00000000	 	 
- stack 1: 0x524
- stack 0: 0x0
1510	 27	PUSH2	0160	 	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x160
1511	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x524
1512	 2B	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1513	 2D	ADD		 	 
- stack 0: 0x528
1514	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1515	 2F	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x34054C00530042006600000411000000660000000000006574796D00007473
1516	 30	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x34054C00530042006600000411000000660000000000006574796D00007473
- stack 0: 0xF0
1517	 32	SHR		 	 
- stack 1: 0x528
- stack 0: 0x34
1518	 33	JUMP		 	 
- stack 0: 0x528
1519	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1344(ignore imm)
- stack 0: 0x528
1520	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1521	 36	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x34054C00530042006600000411000000660000000000006574796D00007473
1522	 37	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x34054C00530042006600000411000000660000000000006574796D00007473
- stack 0: 0xE0
1523	 39	SHR		 	 
- stack 1: 0x528
- stack 0: 0x34054C
1524	 3A	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x34054C
- stack 0: 0xFFFF
1525	 3D	AND		 	 
- stack 1: 0x528
- stack 0: 0x54C
1526	 3E	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0x54C
- stack 0: 0x1
1527	 40	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0x54C
1528	 41	PUSH2	0160	 	 
- stack 2: 0x528
- stack 1: 0x54C
- stack 0: 0x160
1529	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x528
- stack 1: 0x54C
- stack 0: 0x0
1530	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x528
- stack 0: 0x54C
1531	 46	PUSH2	0160	 	 
- stack 2: 0x528
- stack 1: 0x54C
- stack 0: 0x160
1532	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x528
1533	 4A	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1534	 4C	ADD		 	 
- stack 0: 0x52C
1535	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1536	 4E	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x530042006600000411000000660000000000006574796D0000747300525245
1537	 4F	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x530042006600000411000000660000000000006574796D0000747300525245
- stack 0: 0xF0
1538	 51	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x53
1539	 52	JUMP		 	 
- stack 0: 0x52C
1540	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x52C
1541	 54	PUSH4	00042000	 	 
- stack 1: 0x52C
- stack 0: 0x42000
1542	 59	PUSH2	0140	 	 
- stack 2: 0x52C
- stack 1: 0x42000
- stack 0: 0x140
1543	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x52C
1544	 5D	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1545	 5F	ADD		 	 
- stack 0: 0x530
1546	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1547	 61	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x6600000411000000660000000000006574796D000074730052524500004B4F
1548	 62	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x6600000411000000660000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
1549	 64	SHR		 	 
- stack 1: 0x530
- stack 0: 0x66
1550	 65	JUMP		 	 
- stack 0: 0x530
1551	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x530
1552	 67	PUSH2	0140	 	 
- stack 1: 0x530
- stack 0: 0x140
1553	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x530
- stack 0: 0x42000
1554	 6B	PUSH2	0075	 ;; _ecall_ea454a67cb9e8e02011c1701f8e8c808e6814597174b84b9799666b78d1f7ce9	 
- stack 2: 0x530
- stack 1: 0x42000
- stack 0: 0x75
1555	 6E	JUMPI		 	 
- stack 0: 0x530
1556	 75	JUMPDEST		 ;; _ecall_ea454a67cb9e8e02011c1701f8e8c808e6814597174b84b9799666b78d1f7ce9	 
- stack 0: 0x530
1557	 76	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1558	 78	PUSH2	0160	 	 
- stack 2: 0x530
- stack 1: 0x4
- stack 0: 0x160
1559	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x530
- stack 1: 0x4
- stack 0: 0x54C
1560	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x530
1561	 7D	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1562	 7F	ADD		 	 
- stack 0: 0x534
1563	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1564	 81	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x411000000660000000000006574796D000074730052524500004B4F00000000
1565	 82	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x411000000660000000000006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
1566	 84	SHR		 	 
- stack 1: 0x534
- stack 0: 0x411
1567	 85	JUMP		 	 
- stack 0: 0x534
1568	 411	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x534
1569	 412	PUSH4	00000000	 	 
- stack 1: 0x534
- stack 0: 0x0
1570	 417	PUSH2	0140	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x140
1571	 41A	MSTORE		 	  ;; # store to x10
- stack 0: 0x534
1572	 41B	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1573	 41D	ADD		 	 
- stack 0: 0x538
1574	 41E	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1575	 41F	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x660000000000006574796D000074730052524500004B4F0000000000000000
1576	 420	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x660000000000006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
1577	 422	SHR		 	 
- stack 1: 0x538
- stack 0: 0x66
1578	 423	JUMP		 	 
- stack 0: 0x538
1579	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x538
1580	 67	PUSH2	0140	 	 
- stack 1: 0x538
- stack 0: 0x140
1581	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x538
- stack 0: 0x0
1582	 6B	PUSH2	0075	 ;; _ecall_ea454a67cb9e8e02011c1701f8e8c808e6814597174b84b9799666b78d1f7ce9	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x75
1583	 6E	JUMPI		 	 
- stack 0: 0x538
1584	 6F	PUSH1	20	 	 
- stack 1: 0x538
- stack 0: 0x20
1585	 71	PUSH2	0160	 	 
- stack 2: 0x538
- stack 1: 0x20
- stack 0: 0x160
1586	 74	RETURN		 	 
Final bytecode length; 1397
Returned: 000000000000000000000000000000000000000000000000000000000000054c
gasUsed : 6196
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420
** HOT: 430 - range: 430,434,438,43c
** HOT: 440 - range: 440,444,448,44c,450
** HOT: 460 - range: 460,464,468,46c,470
** HOT: 468 - range: 468,46c,470
** HOT: 478 - range: 478,47c,480
** HOT: 484 - range: 484,488,48c,490,494,498
** HOT: 48c - range: 48c,490,494,498
** HOT: 4a0 - range: 4a0,4a4,4a8
** HOT: 4ac - range: 4ac,4b0,4b4,4b8,4bc,4c0,4c4
** HOT: 4b4 - range: 4b4,4b8,4bc,4c0,4c4
** HOT: 4cc - range: 4cc,4d0,4d4
** HOT: 4d8 - range: 4d8,4dc,4e0,4e4
** HOT: 4f4 - range: 4f4,4f8,4fc,500,504,508
