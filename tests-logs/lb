Running in EVM:
0	 0	PUSH4	02A4	 	 
- stack 0: 0x2A4
1	 5	PUSH2	0389	 ;; _rambegin	 
- stack 1: 0x2A4
- stack 0: 0x389
2	 8	PUSH1	01	 	 
- stack 2: 0x2A4
- stack 1: 0x389
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x2A4
- stack 0: 0x38A
4	 B	PUSH2	0400	 	 
- stack 2: 0x2A4
- stack 1: 0x38A
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x210000003406900053004200660000008600000095029000B4000000E9FFFF
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x210000003406900053004200660000008600000095029000B4000000E9FFFF
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406900053004200660000008600000095029000B4000000E9FFFF01030002
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x3406900053004200660000008600000095029000B4000000E9FFFF01030002
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1680(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406900053004200660000008600000095029000B4000000E9FFFF01030002
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x3406900053004200660000008600000095029000B4000000E9FFFF01030002
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340690
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340690
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x690
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x690
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x690
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x690
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x690
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x690
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x690
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x53004200660000008600000095029000B4000000E9FFFF01030002011D0238
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x53004200660000008600000095029000B4000000E9FFFF01030002011D0238
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x660000008600000095029000B4000000E9FFFF01030002011D023800860000
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x660000008600000095029000B4000000E9FFFF01030002011D023800860000
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_e695732c6c5fae2716cecd4b3870ab7f0e6a67ed79bdcf3a3370911228ff64a5	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_e695732c6c5fae2716cecd4b3870ab7f0e6a67ed79bdcf3a3370911228ff64a5	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x690
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x8600000095029000B4000000E9FFFF01030002011D02380086000000950278
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x8600000095029000B4000000E9FFFF01030002011D02380086000000950278
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	 
- stack 1: 0x410
- stack 0: 0x410
77	 88	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x410
- stack 0: 0x20
78	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 8C	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 8E	ADD		 	 
- stack 0: 0x414
81	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 90	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x95029000B4000000E9FFFF01030002011D0238008600000095027800B40001
83	 91	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x95029000B4000000E9FFFF01030002011D0238008600000095027800B40001
- stack 0: 0xF0
84	 93	SHR		 	 
- stack 1: 0x414
- stack 0: 0x95
85	 94	JUMP		 	 
- stack 0: 0x414
86	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x414
87	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 97	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x95029000B4000000E9FFFF01030002011D0238008600000095027800B40001
89	 98	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x95029000B4000000E9FFFF01030002011D0238008600000095027800B40001
- stack 0: 0xE0
90	 9A	SHR		 	 
- stack 1: 0x414
- stack 0: 0x950290
91	 9B	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x950290
- stack 0: 0xFFFF
92	 9E	AND		 	 
- stack 1: 0x414
- stack 0: 0x290
93	 9F	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x290
- stack 0: 0x1
94	 A1	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x290
95	 A2	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x290
- stack 0: 0x20
96	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0x290
- stack 0: 0x410
97	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x414
- stack 0: 0x6A0
98	 A7	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x6A0
- stack 0: 0x20
99	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
100	 AB	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
101	 AD	ADD		 	 
- stack 0: 0x418
102	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
103	 AF	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB4000000E9FFFF01030002011D0238008600000095027800B4000100E90000
104	 B0	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB4000000E9FFFF01030002011D0238008600000095027800B4000100E90000
- stack 0: 0xF0
105	 B2	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB4
106	 B3	JUMP		 	 
- stack 0: 0x418
107	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x418
108	 B5	PUSH2	0020	 	 
- stack 1: 0x418
- stack 0: 0x20
109	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x418
- stack 0: 0x6A0
110	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
111	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x418
- stack 0: 0x6A0
112	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0x418
113	 C0	MLOAD		 	 
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0xB4000000E9FFFF01030002011D0238008600000095027800B4000100E90000
114	 C1	PUSH1	E0	 	 
- stack 3: 0x418
- stack 2: 0x6A0
- stack 1: 0xB4000000E9FFFF01030002011D0238008600000095027800B4000100E90000
- stack 0: 0xE0
115	 C3	SHR		 	 
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0xB40000
116	 C4	PUSH2	FFFF	 	 
- stack 3: 0x418
- stack 2: 0x6A0
- stack 1: 0xB40000
- stack 0: 0xFFFF
117	 C7	AND		 	 
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0x0
118	 C8	PUSH1	01	 	 
- stack 3: 0x418
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
119	 CA	SIGNEXTEND		 	 
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0x0
120	 CB	ADD		 	 
- stack 1: 0x418
- stack 0: 0x6A0
121	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
122	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x418
- stack 0: 0x6A0
123	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0x3
124	 D4	XOR		 	 
- stack 1: 0x418
- stack 0: 0x6A3
125	 D5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xFF00000000000000000000000000000000000000000000000000000000000000
126	 D6	PUSH1	F8	 	 
- stack 2: 0x418
- stack 1: 0xFF00000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
127	 D8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xFF
128	 D9	PUSH1	00	 	 
- stack 2: 0x418
- stack 1: 0xFF
- stack 0: 0x0
129	 DB	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
130	 DC	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
131	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
132	 E0	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
133	 E2	ADD		 	 
- stack 0: 0x41C
134	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
135	 E4	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xE9FFFF01030002011D0238008600000095027800B4000100E9000001030003
136	 E5	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xE9FFFF01030002011D0238008600000095027800B4000100E9000001030003
- stack 0: 0xF0
137	 E7	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xE9
138	 E8	JUMP		 	 
- stack 0: 0x41C
139	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x41C
140	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
141	 EB	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xE9FFFF01030002011D0238008600000095027800B4000100E9000001030003
142	 EC	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xE9FFFF01030002011D0238008600000095027800B4000100E9000001030003
- stack 0: 0xE0
143	 EE	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xE9FFFF
144	 EF	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xE9FFFF
- stack 0: 0xFFFF
145	 F2	AND		 	 
- stack 1: 0x41C
- stack 0: 0xFFFF
146	 F3	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0xFFFF
- stack 0: 0x1
147	 F5	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
148	 F6	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
149	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
150	 FA	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
151	 FC	ADD		 	 
- stack 0: 0x420
152	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
153	 FE	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0x1030002011D0238008600000095027800B4000100E9000001030003011D0220
154	 FF	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0x1030002011D0238008600000095027800B4000100E9000001030003011D0220
- stack 0: 0xF0
155	 101	SHR		 	 
- stack 1: 0x420
- stack 0: 0x103
156	 102	JUMP		 	 
- stack 0: 0x420
157	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x420
158	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
159	 105	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0x1030002011D0238008600000095027800B4000100E9000001030003011D0220
160	 106	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0x1030002011D0238008600000095027800B4000100E9000001030003011D0220
- stack 0: 0xE0
161	 108	SHR		 	 
- stack 1: 0x420
- stack 0: 0x1030002
162	 109	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0x1030002
- stack 0: 0xFFFF
163	 10C	AND		 	 
- stack 1: 0x420
- stack 0: 0x2
164	 10D	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x1
165	 10F	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0x2
166	 110	PUSH2	0380	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x380
167	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x420
168	 114	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
169	 116	ADD		 	 
- stack 0: 0x424
170	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
171	 118	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x11D0238008600000095027800B4000100E9000001030003011D022000860000
172	 119	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x11D0238008600000095027800B4000100E9000001030003011D022000860000
- stack 0: 0xF0
173	 11B	SHR		 	 
- stack 1: 0x424
- stack 0: 0x11D
174	 11C	JUMP		 	 
- stack 0: 0x424
175	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x424
176	 11E	PUSH2	0060	 	 
- stack 1: 0x424
- stack 0: 0x60
177	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x424
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
178	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
179	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0xFFFFFFFF
180	 128	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
181	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x424
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
182	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
183	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
184	 132	SUB		 	 
- stack 1: 0x424
- stack 0: 0x0
185	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x13B
186	 136	JUMPI		 	 
- stack 0: 0x424
187	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x424
- stack 0: 0x155
188	 13A	JUMP		 	 
- stack 0: 0x424
189	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x424
190	 156	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
191	 158	ADD		 	 
- stack 0: 0x428
192	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
193	 15A	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x8600000095027800B4000100E9000001030003011D02200086000000950260
194	 15B	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x8600000095027800B4000100E9000001030003011D02200086000000950260
- stack 0: 0xF0
195	 15D	SHR		 	 
- stack 1: 0x428
- stack 0: 0x86
196	 15E	JUMP		 	 
- stack 0: 0x428
197	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x428
198	 87	DUP1		 	 
- stack 1: 0x428
- stack 0: 0x428
199	 88	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x428
- stack 0: 0x20
200	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x428
201	 8C	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
202	 8E	ADD		 	 
- stack 0: 0x42C
203	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
204	 90	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x95027800B4000100E9000001030003011D0220008600000095026000B40002
205	 91	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x95027800B4000100E9000001030003011D0220008600000095026000B40002
- stack 0: 0xF0
206	 93	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x95
207	 94	JUMP		 	 
- stack 0: 0x42C
208	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x42C
209	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
210	 97	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x95027800B4000100E9000001030003011D0220008600000095026000B40002
211	 98	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0x95027800B4000100E9000001030003011D0220008600000095026000B40002
- stack 0: 0xE0
212	 9A	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x950278
213	 9B	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0x950278
- stack 0: 0xFFFF
214	 9E	AND		 	 
- stack 1: 0x42C
- stack 0: 0x278
215	 9F	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x278
- stack 0: 0x1
216	 A1	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x278
217	 A2	PUSH2	0020	 	 
- stack 2: 0x42C
- stack 1: 0x278
- stack 0: 0x20
218	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x42C
- stack 1: 0x278
- stack 0: 0x428
219	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x42C
- stack 0: 0x6A0
220	 A7	PUSH2	0020	 	 
- stack 2: 0x42C
- stack 1: 0x6A0
- stack 0: 0x20
221	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x42C
222	 AB	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
223	 AD	ADD		 	 
- stack 0: 0x430
224	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
225	 AF	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xB4000100E9000001030003011D0220008600000095026000B4000200E9FFF0
226	 B0	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xB4000100E9000001030003011D0220008600000095026000B4000200E9FFF0
- stack 0: 0xF0
227	 B2	SHR		 	 
- stack 1: 0x430
- stack 0: 0xB4
228	 B3	JUMP		 	 
- stack 0: 0x430
229	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x430
230	 B5	PUSH2	0020	 	 
- stack 1: 0x430
- stack 0: 0x20
231	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x430
- stack 0: 0x6A0
232	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x430
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
233	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x430
- stack 0: 0x6A0
234	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x430
- stack 1: 0x6A0
- stack 0: 0x430
235	 C0	MLOAD		 	 
- stack 2: 0x430
- stack 1: 0x6A0
- stack 0: 0xB4000100E9000001030003011D0220008600000095026000B4000200E9FFF0
236	 C1	PUSH1	E0	 	 
- stack 3: 0x430
- stack 2: 0x6A0
- stack 1: 0xB4000100E9000001030003011D0220008600000095026000B4000200E9FFF0
- stack 0: 0xE0
237	 C3	SHR		 	 
- stack 2: 0x430
- stack 1: 0x6A0
- stack 0: 0xB40001
238	 C4	PUSH2	FFFF	 	 
- stack 3: 0x430
- stack 2: 0x6A0
- stack 1: 0xB40001
- stack 0: 0xFFFF
239	 C7	AND		 	 
- stack 2: 0x430
- stack 1: 0x6A0
- stack 0: 0x1
240	 C8	PUSH1	01	 	 
- stack 3: 0x430
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1
241	 CA	SIGNEXTEND		 	 
- stack 2: 0x430
- stack 1: 0x6A0
- stack 0: 0x1
242	 CB	ADD		 	 
- stack 1: 0x430
- stack 0: 0x6A1
243	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x430
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
244	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x430
- stack 0: 0x6A1
245	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x430
- stack 1: 0x6A1
- stack 0: 0x3
246	 D4	XOR		 	 
- stack 1: 0x430
- stack 0: 0x6A2
247	 D5	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xFF000000000000000000000000000000000000000000000000000000000000
248	 D6	PUSH1	F8	 	 
- stack 2: 0x430
- stack 1: 0xFF000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
249	 D8	SHR		 	 
- stack 1: 0x430
- stack 0: 0x0
250	 D9	PUSH1	00	 	 
- stack 2: 0x430
- stack 1: 0x0
- stack 0: 0x0
251	 DB	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x0
252	 DC	PUSH2	0060	 	 
- stack 2: 0x430
- stack 1: 0x0
- stack 0: 0x60
253	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x430
254	 E0	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
255	 E2	ADD		 	 
- stack 0: 0x434
256	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
257	 E4	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xE9000001030003011D0220008600000095026000B4000200E9FFF001030004
258	 E5	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xE9000001030003011D0220008600000095026000B4000200E9FFF001030004
- stack 0: 0xF0
259	 E7	SHR		 	 
- stack 1: 0x434
- stack 0: 0xE9
260	 E8	JUMP		 	 
- stack 0: 0x434
261	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x434
262	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
263	 EB	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xE9000001030003011D0220008600000095026000B4000200E9FFF001030004
264	 EC	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xE9000001030003011D0220008600000095026000B4000200E9FFF001030004
- stack 0: 0xE0
265	 EE	SHR		 	 
- stack 1: 0x434
- stack 0: 0xE90000
266	 EF	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xE90000
- stack 0: 0xFFFF
267	 F2	AND		 	 
- stack 1: 0x434
- stack 0: 0x0
268	 F3	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x1
269	 F5	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0x0
270	 F6	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x3A0
271	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x434
272	 FA	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
273	 FC	ADD		 	 
- stack 0: 0x438
274	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
275	 FE	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x1030003011D0220008600000095026000B4000200E9FFF001030004011D0208
276	 FF	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x1030003011D0220008600000095026000B4000200E9FFF001030004011D0208
- stack 0: 0xF0
277	 101	SHR		 	 
- stack 1: 0x438
- stack 0: 0x103
278	 102	JUMP		 	 
- stack 0: 0x438
279	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x438
280	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
281	 105	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x1030003011D0220008600000095026000B4000200E9FFF001030004011D0208
282	 106	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0x1030003011D0220008600000095026000B4000200E9FFF001030004011D0208
- stack 0: 0xE0
283	 108	SHR		 	 
- stack 1: 0x438
- stack 0: 0x1030003
284	 109	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0x1030003
- stack 0: 0xFFFF
285	 10C	AND		 	 
- stack 1: 0x438
- stack 0: 0x3
286	 10D	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x1
287	 10F	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x3
288	 110	PUSH2	0380	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x380
289	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x438
290	 114	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
291	 116	ADD		 	 
- stack 0: 0x43C
292	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
293	 118	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x11D0220008600000095026000B4000200E9FFF001030004011D020800860000
294	 119	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x11D0220008600000095026000B4000200E9FFF001030004011D020800860000
- stack 0: 0xF0
295	 11B	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x11D
296	 11C	JUMP		 	 
- stack 0: 0x43C
297	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x43C
298	 11E	PUSH2	0060	 	 
- stack 1: 0x43C
- stack 0: 0x60
299	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x43C
- stack 0: 0x0
300	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
301	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0x0
302	 128	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x3A0
303	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x0
304	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
305	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x0
306	 132	SUB		 	 
- stack 1: 0x43C
- stack 0: 0x0
307	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x13B
308	 136	JUMPI		 	 
- stack 0: 0x43C
309	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x43C
- stack 0: 0x155
310	 13A	JUMP		 	 
- stack 0: 0x43C
311	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x43C
312	 156	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
313	 158	ADD		 	 
- stack 0: 0x440
314	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
315	 15A	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x8600000095026000B4000200E9FFF001030004011D02080086000000950248
316	 15B	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x8600000095026000B4000200E9FFF001030004011D02080086000000950248
- stack 0: 0xF0
317	 15D	SHR		 	 
- stack 1: 0x440
- stack 0: 0x86
318	 15E	JUMP		 	 
- stack 0: 0x440
319	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x440
320	 87	DUP1		 	 
- stack 1: 0x440
- stack 0: 0x440
321	 88	PUSH2	0020	 	 
- stack 2: 0x440
- stack 1: 0x440
- stack 0: 0x20
322	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x440
323	 8C	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
324	 8E	ADD		 	 
- stack 0: 0x444
325	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
326	 90	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x95026000B4000200E9FFF001030004011D0208008600000095024800B40003
327	 91	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x95026000B4000200E9FFF001030004011D0208008600000095024800B40003
- stack 0: 0xF0
328	 93	SHR		 	 
- stack 1: 0x444
- stack 0: 0x95
329	 94	JUMP		 	 
- stack 0: 0x444
330	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x444
331	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
332	 97	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x95026000B4000200E9FFF001030004011D0208008600000095024800B40003
333	 98	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0x95026000B4000200E9FFF001030004011D0208008600000095024800B40003
- stack 0: 0xE0
334	 9A	SHR		 	 
- stack 1: 0x444
- stack 0: 0x950260
335	 9B	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0x950260
- stack 0: 0xFFFF
336	 9E	AND		 	 
- stack 1: 0x444
- stack 0: 0x260
337	 9F	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x260
- stack 0: 0x1
338	 A1	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x260
339	 A2	PUSH2	0020	 	 
- stack 2: 0x444
- stack 1: 0x260
- stack 0: 0x20
340	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x444
- stack 1: 0x260
- stack 0: 0x440
341	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x444
- stack 0: 0x6A0
342	 A7	PUSH2	0020	 	 
- stack 2: 0x444
- stack 1: 0x6A0
- stack 0: 0x20
343	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x444
344	 AB	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
345	 AD	ADD		 	 
- stack 0: 0x448
346	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
347	 AF	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xB4000200E9FFF001030004011D0208008600000095024800B4000300E9000F
348	 B0	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xB4000200E9FFF001030004011D0208008600000095024800B4000300E9000F
- stack 0: 0xF0
349	 B2	SHR		 	 
- stack 1: 0x448
- stack 0: 0xB4
350	 B3	JUMP		 	 
- stack 0: 0x448
351	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x448
352	 B5	PUSH2	0020	 	 
- stack 1: 0x448
- stack 0: 0x20
353	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x448
- stack 0: 0x6A0
354	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
355	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0x6A0
356	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x448
- stack 1: 0x6A0
- stack 0: 0x448
357	 C0	MLOAD		 	 
- stack 2: 0x448
- stack 1: 0x6A0
- stack 0: 0xB4000200E9FFF001030004011D0208008600000095024800B4000300E9000F
358	 C1	PUSH1	E0	 	 
- stack 3: 0x448
- stack 2: 0x6A0
- stack 1: 0xB4000200E9FFF001030004011D0208008600000095024800B4000300E9000F
- stack 0: 0xE0
359	 C3	SHR		 	 
- stack 2: 0x448
- stack 1: 0x6A0
- stack 0: 0xB40002
360	 C4	PUSH2	FFFF	 	 
- stack 3: 0x448
- stack 2: 0x6A0
- stack 1: 0xB40002
- stack 0: 0xFFFF
361	 C7	AND		 	 
- stack 2: 0x448
- stack 1: 0x6A0
- stack 0: 0x2
362	 C8	PUSH1	01	 	 
- stack 3: 0x448
- stack 2: 0x6A0
- stack 1: 0x2
- stack 0: 0x1
363	 CA	SIGNEXTEND		 	 
- stack 2: 0x448
- stack 1: 0x6A0
- stack 0: 0x2
364	 CB	ADD		 	 
- stack 1: 0x448
- stack 0: 0x6A2
365	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
366	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0x6A2
367	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x448
- stack 1: 0x6A2
- stack 0: 0x3
368	 D4	XOR		 	 
- stack 1: 0x448
- stack 0: 0x6A1
369	 D5	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xF000FF0000000000000000000000000000000000000000000000000000000000
370	 D6	PUSH1	F8	 	 
- stack 2: 0x448
- stack 1: 0xF000FF0000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
371	 D8	SHR		 	 
- stack 1: 0x448
- stack 0: 0xF0
372	 D9	PUSH1	00	 	 
- stack 2: 0x448
- stack 1: 0xF0
- stack 0: 0x0
373	 DB	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
374	 DC	PUSH2	0060	 	 
- stack 2: 0x448
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x60
375	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x448
376	 E0	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
377	 E2	ADD		 	 
- stack 0: 0x44C
378	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
379	 E4	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xE9FFF001030004011D0208008600000095024800B4000300E9000F01030005
380	 E5	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0xE9FFF001030004011D0208008600000095024800B4000300E9000F01030005
- stack 0: 0xF0
381	 E7	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xE9
382	 E8	JUMP		 	 
- stack 0: 0x44C
383	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x44C
384	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
385	 EB	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xE9FFF001030004011D0208008600000095024800B4000300E9000F01030005
386	 EC	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0xE9FFF001030004011D0208008600000095024800B4000300E9000F01030005
- stack 0: 0xE0
387	 EE	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xE9FFF0
388	 EF	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0xE9FFF0
- stack 0: 0xFFFF
389	 F2	AND		 	 
- stack 1: 0x44C
- stack 0: 0xFFF0
390	 F3	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0xFFF0
- stack 0: 0x1
391	 F5	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
392	 F6	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
393	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x44C
394	 FA	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
395	 FC	ADD		 	 
- stack 0: 0x450
396	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
397	 FE	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x1030004011D0208008600000095024800B4000300E9000F01030005011D01F0
398	 FF	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x1030004011D0208008600000095024800B4000300E9000F01030005011D01F0
- stack 0: 0xF0
399	 101	SHR		 	 
- stack 1: 0x450
- stack 0: 0x103
400	 102	JUMP		 	 
- stack 0: 0x450
401	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
402	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
403	 105	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x1030004011D0208008600000095024800B4000300E9000F01030005011D01F0
404	 106	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x1030004011D0208008600000095024800B4000300E9000F01030005011D01F0
- stack 0: 0xE0
405	 108	SHR		 	 
- stack 1: 0x450
- stack 0: 0x1030004
406	 109	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x1030004
- stack 0: 0xFFFF
407	 10C	AND		 	 
- stack 1: 0x450
- stack 0: 0x4
408	 10D	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x1
409	 10F	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x4
410	 110	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x380
411	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
412	 114	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
413	 116	ADD		 	 
- stack 0: 0x454
414	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
415	 118	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x11D0208008600000095024800B4000300E9000F01030005011D01F000860000
416	 119	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x11D0208008600000095024800B4000300E9000F01030005011D01F000860000
- stack 0: 0xF0
417	 11B	SHR		 	 
- stack 1: 0x454
- stack 0: 0x11D
418	 11C	JUMP		 	 
- stack 0: 0x454
419	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x454
420	 11E	PUSH2	0060	 	 
- stack 1: 0x454
- stack 0: 0x60
421	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x454
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
422	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x454
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFFFFFFF
423	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x454
- stack 0: 0xFFFFFFF0
424	 128	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xFFFFFFF0
- stack 0: 0x3A0
425	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x454
- stack 1: 0xFFFFFFF0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
426	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x454
- stack 2: 0xFFFFFFF0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFFFFFFF
427	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x454
- stack 1: 0xFFFFFFF0
- stack 0: 0xFFFFFFF0
428	 132	SUB		 	 
- stack 1: 0x454
- stack 0: 0x0
429	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x454
- stack 1: 0x0
- stack 0: 0x13B
430	 136	JUMPI		 	 
- stack 0: 0x454
431	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x454
- stack 0: 0x155
432	 13A	JUMP		 	 
- stack 0: 0x454
433	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x454
434	 156	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
435	 158	ADD		 	 
- stack 0: 0x458
436	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
437	 15A	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x8600000095024800B4000300E9000F01030005011D01F00086000000950233
438	 15B	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x8600000095024800B4000300E9000F01030005011D01F00086000000950233
- stack 0: 0xF0
439	 15D	SHR		 	 
- stack 1: 0x458
- stack 0: 0x86
440	 15E	JUMP		 	 
- stack 0: 0x458
441	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x458
442	 87	DUP1		 	 
- stack 1: 0x458
- stack 0: 0x458
443	 88	PUSH2	0020	 	 
- stack 2: 0x458
- stack 1: 0x458
- stack 0: 0x20
444	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x458
445	 8C	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
446	 8E	ADD		 	 
- stack 0: 0x45C
447	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
448	 90	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x95024800B4000300E9000F01030005011D01F0008600000095023300B4FFFD
449	 91	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x95024800B4000300E9000F01030005011D01F0008600000095023300B4FFFD
- stack 0: 0xF0
450	 93	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x95
451	 94	JUMP		 	 
- stack 0: 0x45C
452	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x45C
453	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
454	 97	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x95024800B4000300E9000F01030005011D01F0008600000095023300B4FFFD
455	 98	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0x95024800B4000300E9000F01030005011D01F0008600000095023300B4FFFD
- stack 0: 0xE0
456	 9A	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x950248
457	 9B	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0x950248
- stack 0: 0xFFFF
458	 9E	AND		 	 
- stack 1: 0x45C
- stack 0: 0x248
459	 9F	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0x248
- stack 0: 0x1
460	 A1	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0x248
461	 A2	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0x248
- stack 0: 0x20
462	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x45C
- stack 1: 0x248
- stack 0: 0x458
463	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x45C
- stack 0: 0x6A0
464	 A7	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0x6A0
- stack 0: 0x20
465	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x45C
466	 AB	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
467	 AD	ADD		 	 
- stack 0: 0x460
468	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
469	 AF	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0xB4000300E9000F01030005011D01F0008600000095023300B4FFFD00E9FFFF
470	 B0	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0xB4000300E9000F01030005011D01F0008600000095023300B4FFFD00E9FFFF
- stack 0: 0xF0
471	 B2	SHR		 	 
- stack 1: 0x460
- stack 0: 0xB4
472	 B3	JUMP		 	 
- stack 0: 0x460
473	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x460
474	 B5	PUSH2	0020	 	 
- stack 1: 0x460
- stack 0: 0x20
475	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x460
- stack 0: 0x6A0
476	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x460
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
477	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x460
- stack 0: 0x6A0
478	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x460
- stack 1: 0x6A0
- stack 0: 0x460
479	 C0	MLOAD		 	 
- stack 2: 0x460
- stack 1: 0x6A0
- stack 0: 0xB4000300E9000F01030005011D01F0008600000095023300B4FFFD00E9FFFF
480	 C1	PUSH1	E0	 	 
- stack 3: 0x460
- stack 2: 0x6A0
- stack 1: 0xB4000300E9000F01030005011D01F0008600000095023300B4FFFD00E9FFFF
- stack 0: 0xE0
481	 C3	SHR		 	 
- stack 2: 0x460
- stack 1: 0x6A0
- stack 0: 0xB40003
482	 C4	PUSH2	FFFF	 	 
- stack 3: 0x460
- stack 2: 0x6A0
- stack 1: 0xB40003
- stack 0: 0xFFFF
483	 C7	AND		 	 
- stack 2: 0x460
- stack 1: 0x6A0
- stack 0: 0x3
484	 C8	PUSH1	01	 	 
- stack 3: 0x460
- stack 2: 0x6A0
- stack 1: 0x3
- stack 0: 0x1
485	 CA	SIGNEXTEND		 	 
- stack 2: 0x460
- stack 1: 0x6A0
- stack 0: 0x3
486	 CB	ADD		 	 
- stack 1: 0x460
- stack 0: 0x6A3
487	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x460
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
488	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x460
- stack 0: 0x6A3
489	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x460
- stack 1: 0x6A3
- stack 0: 0x3
490	 D4	XOR		 	 
- stack 1: 0x460
- stack 0: 0x6A0
491	 D5	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0xFF000FF00000000000000000000000000000000000000000000000000000000
492	 D6	PUSH1	F8	 	 
- stack 2: 0x460
- stack 1: 0xFF000FF00000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
493	 D8	SHR		 	 
- stack 1: 0x460
- stack 0: 0xF
494	 D9	PUSH1	00	 	 
- stack 2: 0x460
- stack 1: 0xF
- stack 0: 0x0
495	 DB	SIGNEXTEND		 	 
- stack 1: 0x460
- stack 0: 0xF
496	 DC	PUSH2	0060	 	 
- stack 2: 0x460
- stack 1: 0xF
- stack 0: 0x60
497	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x460
498	 E0	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
499	 E2	ADD		 	 
- stack 0: 0x464
500	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
501	 E4	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xE9000F01030005011D01F0008600000095023300B4FFFD00E9FFFF01030006
502	 E5	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xE9000F01030005011D01F0008600000095023300B4FFFD00E9FFFF01030006
- stack 0: 0xF0
503	 E7	SHR		 	 
- stack 1: 0x464
- stack 0: 0xE9
504	 E8	JUMP		 	 
- stack 0: 0x464
505	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x464
506	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
507	 EB	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xE9000F01030005011D01F0008600000095023300B4FFFD00E9FFFF01030006
508	 EC	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0xE9000F01030005011D01F0008600000095023300B4FFFD00E9FFFF01030006
- stack 0: 0xE0
509	 EE	SHR		 	 
- stack 1: 0x464
- stack 0: 0xE9000F
510	 EF	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0xE9000F
- stack 0: 0xFFFF
511	 F2	AND		 	 
- stack 1: 0x464
- stack 0: 0xF
512	 F3	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xF
- stack 0: 0x1
513	 F5	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xF
514	 F6	PUSH2	03A0	 	 
- stack 2: 0x464
- stack 1: 0xF
- stack 0: 0x3A0
515	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x464
516	 FA	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
517	 FC	ADD		 	 
- stack 0: 0x468
518	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
519	 FE	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x1030005011D01F0008600000095023300B4FFFD00E9FFFF01030006011D01D8
520	 FF	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x1030005011D01F0008600000095023300B4FFFD00E9FFFF01030006011D01D8
- stack 0: 0xF0
521	 101	SHR		 	 
- stack 1: 0x468
- stack 0: 0x103
522	 102	JUMP		 	 
- stack 0: 0x468
523	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x468
524	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
525	 105	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x1030005011D01F0008600000095023300B4FFFD00E9FFFF01030006011D01D8
526	 106	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0x1030005011D01F0008600000095023300B4FFFD00E9FFFF01030006011D01D8
- stack 0: 0xE0
527	 108	SHR		 	 
- stack 1: 0x468
- stack 0: 0x1030005
528	 109	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0x1030005
- stack 0: 0xFFFF
529	 10C	AND		 	 
- stack 1: 0x468
- stack 0: 0x5
530	 10D	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0x5
- stack 0: 0x1
531	 10F	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0x5
532	 110	PUSH2	0380	 	 
- stack 2: 0x468
- stack 1: 0x5
- stack 0: 0x380
533	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x468
534	 114	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
535	 116	ADD		 	 
- stack 0: 0x46C
536	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
537	 118	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x11D01F0008600000095023300B4FFFD00E9FFFF01030006011D01D800860000
538	 119	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x11D01F0008600000095023300B4FFFD00E9FFFF01030006011D01D800860000
- stack 0: 0xF0
539	 11B	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x11D
540	 11C	JUMP		 	 
- stack 0: 0x46C
541	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x46C
542	 11E	PUSH2	0060	 	 
- stack 1: 0x46C
- stack 0: 0x60
543	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x46C
- stack 0: 0xF
544	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x46C
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
545	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x46C
- stack 0: 0xF
546	 128	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0xF
- stack 0: 0x3A0
547	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x46C
- stack 1: 0xF
- stack 0: 0xF
548	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x46C
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
549	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x46C
- stack 1: 0xF
- stack 0: 0xF
550	 132	SUB		 	 
- stack 1: 0x46C
- stack 0: 0x0
551	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x46C
- stack 1: 0x0
- stack 0: 0x13B
552	 136	JUMPI		 	 
- stack 0: 0x46C
553	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x46C
- stack 0: 0x155
554	 13A	JUMP		 	 
- stack 0: 0x46C
555	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x46C
556	 156	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
557	 158	ADD		 	 
- stack 0: 0x470
558	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
559	 15A	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x8600000095023300B4FFFD00E9FFFF01030006011D01D8008600000095021B
560	 15B	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x8600000095023300B4FFFD00E9FFFF01030006011D01D8008600000095021B
- stack 0: 0xF0
561	 15D	SHR		 	 
- stack 1: 0x470
- stack 0: 0x86
562	 15E	JUMP		 	 
- stack 0: 0x470
563	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x470
564	 87	DUP1		 	 
- stack 1: 0x470
- stack 0: 0x470
565	 88	PUSH2	0020	 	 
- stack 2: 0x470
- stack 1: 0x470
- stack 0: 0x20
566	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x470
567	 8C	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
568	 8E	ADD		 	 
- stack 0: 0x474
569	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
570	 90	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x95023300B4FFFD00E9FFFF01030006011D01D8008600000095021B00B4FFFE
571	 91	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x95023300B4FFFD00E9FFFF01030006011D01D8008600000095021B00B4FFFE
- stack 0: 0xF0
572	 93	SHR		 	 
- stack 1: 0x474
- stack 0: 0x95
573	 94	JUMP		 	 
- stack 0: 0x474
574	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x474
575	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
576	 97	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x95023300B4FFFD00E9FFFF01030006011D01D8008600000095021B00B4FFFE
577	 98	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0x95023300B4FFFD00E9FFFF01030006011D01D8008600000095021B00B4FFFE
- stack 0: 0xE0
578	 9A	SHR		 	 
- stack 1: 0x474
- stack 0: 0x950233
579	 9B	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0x950233
- stack 0: 0xFFFF
580	 9E	AND		 	 
- stack 1: 0x474
- stack 0: 0x233
581	 9F	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x233
- stack 0: 0x1
582	 A1	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x233
583	 A2	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0x233
- stack 0: 0x20
584	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x474
- stack 1: 0x233
- stack 0: 0x470
585	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x474
- stack 0: 0x6A3
586	 A7	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0x6A3
- stack 0: 0x20
587	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x474
588	 AB	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
589	 AD	ADD		 	 
- stack 0: 0x478
590	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
591	 AF	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xB4FFFD00E9FFFF01030006011D01D8008600000095021B00B4FFFE00E90000
592	 B0	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0xB4FFFD00E9FFFF01030006011D01D8008600000095021B00B4FFFE00E90000
- stack 0: 0xF0
593	 B2	SHR		 	 
- stack 1: 0x478
- stack 0: 0xB4
594	 B3	JUMP		 	 
- stack 0: 0x478
595	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x478
596	 B5	PUSH2	0020	 	 
- stack 1: 0x478
- stack 0: 0x20
597	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x478
- stack 0: 0x6A3
598	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x478
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
599	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x478
- stack 0: 0x6A3
600	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x478
- stack 1: 0x6A3
- stack 0: 0x478
601	 C0	MLOAD		 	 
- stack 2: 0x478
- stack 1: 0x6A3
- stack 0: 0xB4FFFD00E9FFFF01030006011D01D8008600000095021B00B4FFFE00E90000
602	 C1	PUSH1	E0	 	 
- stack 3: 0x478
- stack 2: 0x6A3
- stack 1: 0xB4FFFD00E9FFFF01030006011D01D8008600000095021B00B4FFFE00E90000
- stack 0: 0xE0
603	 C3	SHR		 	 
- stack 2: 0x478
- stack 1: 0x6A3
- stack 0: 0xB4FFFD
604	 C4	PUSH2	FFFF	 	 
- stack 3: 0x478
- stack 2: 0x6A3
- stack 1: 0xB4FFFD
- stack 0: 0xFFFF
605	 C7	AND		 	 
- stack 2: 0x478
- stack 1: 0x6A3
- stack 0: 0xFFFD
606	 C8	PUSH1	01	 	 
- stack 3: 0x478
- stack 2: 0x6A3
- stack 1: 0xFFFD
- stack 0: 0x1
607	 CA	SIGNEXTEND		 	 
- stack 2: 0x478
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD
608	 CB	ADD		 	 
- stack 1: 0x478
- stack 0: 0x6A0
609	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x478
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
610	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x478
- stack 0: 0x6A0
611	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x478
- stack 1: 0x6A0
- stack 0: 0x3
612	 D4	XOR		 	 
- stack 1: 0x478
- stack 0: 0x6A3
613	 D5	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xFF00000000000000000000000000000000000000000000000000000000000000
614	 D6	PUSH1	F8	 	 
- stack 2: 0x478
- stack 1: 0xFF00000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
615	 D8	SHR		 	 
- stack 1: 0x478
- stack 0: 0xFF
616	 D9	PUSH1	00	 	 
- stack 2: 0x478
- stack 1: 0xFF
- stack 0: 0x0
617	 DB	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
618	 DC	PUSH2	0060	 	 
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
619	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x478
620	 E0	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
621	 E2	ADD		 	 
- stack 0: 0x47C
622	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
623	 E4	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xE9FFFF01030006011D01D8008600000095021B00B4FFFE00E9000001030007
624	 E5	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0xE9FFFF01030006011D01D8008600000095021B00B4FFFE00E9000001030007
- stack 0: 0xF0
625	 E7	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xE9
626	 E8	JUMP		 	 
- stack 0: 0x47C
627	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x47C
628	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
629	 EB	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xE9FFFF01030006011D01D8008600000095021B00B4FFFE00E9000001030007
630	 EC	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0xE9FFFF01030006011D01D8008600000095021B00B4FFFE00E9000001030007
- stack 0: 0xE0
631	 EE	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xE9FFFF
632	 EF	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0xE9FFFF
- stack 0: 0xFFFF
633	 F2	AND		 	 
- stack 1: 0x47C
- stack 0: 0xFFFF
634	 F3	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0xFFFF
- stack 0: 0x1
635	 F5	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
636	 F6	PUSH2	03A0	 	 
- stack 2: 0x47C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
637	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x47C
638	 FA	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
639	 FC	ADD		 	 
- stack 0: 0x480
640	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
641	 FE	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x1030006011D01D8008600000095021B00B4FFFE00E9000001030007011D01C0
642	 FF	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x1030006011D01D8008600000095021B00B4FFFE00E9000001030007011D01C0
- stack 0: 0xF0
643	 101	SHR		 	 
- stack 1: 0x480
- stack 0: 0x103
644	 102	JUMP		 	 
- stack 0: 0x480
645	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x480
646	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
647	 105	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x1030006011D01D8008600000095021B00B4FFFE00E9000001030007011D01C0
648	 106	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x1030006011D01D8008600000095021B00B4FFFE00E9000001030007011D01C0
- stack 0: 0xE0
649	 108	SHR		 	 
- stack 1: 0x480
- stack 0: 0x1030006
650	 109	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x1030006
- stack 0: 0xFFFF
651	 10C	AND		 	 
- stack 1: 0x480
- stack 0: 0x6
652	 10D	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0x6
- stack 0: 0x1
653	 10F	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x6
654	 110	PUSH2	0380	 	 
- stack 2: 0x480
- stack 1: 0x6
- stack 0: 0x380
655	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x480
656	 114	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
657	 116	ADD		 	 
- stack 0: 0x484
658	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
659	 118	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x11D01D8008600000095021B00B4FFFE00E9000001030007011D01C000860000
660	 119	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x11D01D8008600000095021B00B4FFFE00E9000001030007011D01C000860000
- stack 0: 0xF0
661	 11B	SHR		 	 
- stack 1: 0x484
- stack 0: 0x11D
662	 11C	JUMP		 	 
- stack 0: 0x484
663	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x484
664	 11E	PUSH2	0060	 	 
- stack 1: 0x484
- stack 0: 0x60
665	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x484
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
666	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x484
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
667	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x484
- stack 0: 0xFFFFFFFF
668	 128	PUSH2	03A0	 	 
- stack 2: 0x484
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
669	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x484
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
670	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x484
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
671	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x484
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
672	 132	SUB		 	 
- stack 1: 0x484
- stack 0: 0x0
673	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x13B
674	 136	JUMPI		 	 
- stack 0: 0x484
675	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x484
- stack 0: 0x155
676	 13A	JUMP		 	 
- stack 0: 0x484
677	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x484
678	 156	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
679	 158	ADD		 	 
- stack 0: 0x488
680	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
681	 15A	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x8600000095021B00B4FFFE00E9000001030007011D01C00086000000950203
682	 15B	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x8600000095021B00B4FFFE00E9000001030007011D01C00086000000950203
- stack 0: 0xF0
683	 15D	SHR		 	 
- stack 1: 0x488
- stack 0: 0x86
684	 15E	JUMP		 	 
- stack 0: 0x488
685	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x488
686	 87	DUP1		 	 
- stack 1: 0x488
- stack 0: 0x488
687	 88	PUSH2	0020	 	 
- stack 2: 0x488
- stack 1: 0x488
- stack 0: 0x20
688	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x488
689	 8C	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
690	 8E	ADD		 	 
- stack 0: 0x48C
691	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
692	 90	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x95021B00B4FFFE00E9000001030007011D01C0008600000095020300B4FFFF
693	 91	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x95021B00B4FFFE00E9000001030007011D01C0008600000095020300B4FFFF
- stack 0: 0xF0
694	 93	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x95
695	 94	JUMP		 	 
- stack 0: 0x48C
696	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x48C
697	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
698	 97	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x95021B00B4FFFE00E9000001030007011D01C0008600000095020300B4FFFF
699	 98	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0x95021B00B4FFFE00E9000001030007011D01C0008600000095020300B4FFFF
- stack 0: 0xE0
700	 9A	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x95021B
701	 9B	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0x95021B
- stack 0: 0xFFFF
702	 9E	AND		 	 
- stack 1: 0x48C
- stack 0: 0x21B
703	 9F	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0x21B
- stack 0: 0x1
704	 A1	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0x21B
705	 A2	PUSH2	0020	 	 
- stack 2: 0x48C
- stack 1: 0x21B
- stack 0: 0x20
706	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x48C
- stack 1: 0x21B
- stack 0: 0x488
707	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x48C
- stack 0: 0x6A3
708	 A7	PUSH2	0020	 	 
- stack 2: 0x48C
- stack 1: 0x6A3
- stack 0: 0x20
709	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x48C
710	 AB	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
711	 AD	ADD		 	 
- stack 0: 0x490
712	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
713	 AF	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xB4FFFE00E9000001030007011D01C0008600000095020300B4FFFF00E9FFF0
714	 B0	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xB4FFFE00E9000001030007011D01C0008600000095020300B4FFFF00E9FFF0
- stack 0: 0xF0
715	 B2	SHR		 	 
- stack 1: 0x490
- stack 0: 0xB4
716	 B3	JUMP		 	 
- stack 0: 0x490
717	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x490
718	 B5	PUSH2	0020	 	 
- stack 1: 0x490
- stack 0: 0x20
719	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x490
- stack 0: 0x6A3
720	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x490
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
721	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x490
- stack 0: 0x6A3
722	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x490
- stack 1: 0x6A3
- stack 0: 0x490
723	 C0	MLOAD		 	 
- stack 2: 0x490
- stack 1: 0x6A3
- stack 0: 0xB4FFFE00E9000001030007011D01C0008600000095020300B4FFFF00E9FFF0
724	 C1	PUSH1	E0	 	 
- stack 3: 0x490
- stack 2: 0x6A3
- stack 1: 0xB4FFFE00E9000001030007011D01C0008600000095020300B4FFFF00E9FFF0
- stack 0: 0xE0
725	 C3	SHR		 	 
- stack 2: 0x490
- stack 1: 0x6A3
- stack 0: 0xB4FFFE
726	 C4	PUSH2	FFFF	 	 
- stack 3: 0x490
- stack 2: 0x6A3
- stack 1: 0xB4FFFE
- stack 0: 0xFFFF
727	 C7	AND		 	 
- stack 2: 0x490
- stack 1: 0x6A3
- stack 0: 0xFFFE
728	 C8	PUSH1	01	 	 
- stack 3: 0x490
- stack 2: 0x6A3
- stack 1: 0xFFFE
- stack 0: 0x1
729	 CA	SIGNEXTEND		 	 
- stack 2: 0x490
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
730	 CB	ADD		 	 
- stack 1: 0x490
- stack 0: 0x6A1
731	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x490
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
732	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x490
- stack 0: 0x6A1
733	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x490
- stack 1: 0x6A1
- stack 0: 0x3
734	 D4	XOR		 	 
- stack 1: 0x490
- stack 0: 0x6A2
735	 D5	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xFF000000000000000000000000000000000000000000000000000000000000
736	 D6	PUSH1	F8	 	 
- stack 2: 0x490
- stack 1: 0xFF000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
737	 D8	SHR		 	 
- stack 1: 0x490
- stack 0: 0x0
738	 D9	PUSH1	00	 	 
- stack 2: 0x490
- stack 1: 0x0
- stack 0: 0x0
739	 DB	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0x0
740	 DC	PUSH2	0060	 	 
- stack 2: 0x490
- stack 1: 0x0
- stack 0: 0x60
741	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x490
742	 E0	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
743	 E2	ADD		 	 
- stack 0: 0x494
744	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
745	 E4	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xE9000001030007011D01C0008600000095020300B4FFFF00E9FFF001030008
746	 E5	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xE9000001030007011D01C0008600000095020300B4FFFF00E9FFF001030008
- stack 0: 0xF0
747	 E7	SHR		 	 
- stack 1: 0x494
- stack 0: 0xE9
748	 E8	JUMP		 	 
- stack 0: 0x494
749	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x494
750	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
751	 EB	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xE9000001030007011D01C0008600000095020300B4FFFF00E9FFF001030008
752	 EC	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0xE9000001030007011D01C0008600000095020300B4FFFF00E9FFF001030008
- stack 0: 0xE0
753	 EE	SHR		 	 
- stack 1: 0x494
- stack 0: 0xE90000
754	 EF	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0xE90000
- stack 0: 0xFFFF
755	 F2	AND		 	 
- stack 1: 0x494
- stack 0: 0x0
756	 F3	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x1
757	 F5	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x0
758	 F6	PUSH2	03A0	 	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x3A0
759	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x494
760	 FA	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
761	 FC	ADD		 	 
- stack 0: 0x498
762	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
763	 FE	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x1030007011D01C0008600000095020300B4FFFF00E9FFF001030008011D01A8
764	 FF	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x1030007011D01C0008600000095020300B4FFFF00E9FFF001030008011D01A8
- stack 0: 0xF0
765	 101	SHR		 	 
- stack 1: 0x498
- stack 0: 0x103
766	 102	JUMP		 	 
- stack 0: 0x498
767	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x498
768	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
769	 105	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x1030007011D01C0008600000095020300B4FFFF00E9FFF001030008011D01A8
770	 106	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0x1030007011D01C0008600000095020300B4FFFF00E9FFF001030008011D01A8
- stack 0: 0xE0
771	 108	SHR		 	 
- stack 1: 0x498
- stack 0: 0x1030007
772	 109	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0x1030007
- stack 0: 0xFFFF
773	 10C	AND		 	 
- stack 1: 0x498
- stack 0: 0x7
774	 10D	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x7
- stack 0: 0x1
775	 10F	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x7
776	 110	PUSH2	0380	 	 
- stack 2: 0x498
- stack 1: 0x7
- stack 0: 0x380
777	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x498
778	 114	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
779	 116	ADD		 	 
- stack 0: 0x49C
780	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
781	 118	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x11D01C0008600000095020300B4FFFF00E9FFF001030008011D01A800860000
782	 119	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x11D01C0008600000095020300B4FFFF00E9FFF001030008011D01A800860000
- stack 0: 0xF0
783	 11B	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x11D
784	 11C	JUMP		 	 
- stack 0: 0x49C
785	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x49C
786	 11E	PUSH2	0060	 	 
- stack 1: 0x49C
- stack 0: 0x60
787	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x49C
- stack 0: 0x0
788	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
789	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0x0
790	 128	PUSH2	03A0	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x3A0
791	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x0
792	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x49C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
793	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x0
794	 132	SUB		 	 
- stack 1: 0x49C
- stack 0: 0x0
795	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x13B
796	 136	JUMPI		 	 
- stack 0: 0x49C
797	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x49C
- stack 0: 0x155
798	 13A	JUMP		 	 
- stack 0: 0x49C
799	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x49C
800	 156	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
801	 158	ADD		 	 
- stack 0: 0x4A0
802	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
803	 15A	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x8600000095020300B4FFFF00E9FFF001030008011D01A800860000009501EB
804	 15B	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x8600000095020300B4FFFF00E9FFF001030008011D01A800860000009501EB
- stack 0: 0xF0
805	 15D	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x86
806	 15E	JUMP		 	 
- stack 0: 0x4A0
807	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4A0
808	 87	DUP1		 	 
- stack 1: 0x4A0
- stack 0: 0x4A0
809	 88	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0x4A0
- stack 0: 0x20
810	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A0
811	 8C	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
812	 8E	ADD		 	 
- stack 0: 0x4A4
813	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
814	 90	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x95020300B4FFFF00E9FFF001030008011D01A800860000009501EB00B40000
815	 91	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x95020300B4FFFF00E9FFF001030008011D01A800860000009501EB00B40000
- stack 0: 0xF0
816	 93	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x95
817	 94	JUMP		 	 
- stack 0: 0x4A4
818	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x4A4
819	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
820	 97	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x95020300B4FFFF00E9FFF001030008011D01A800860000009501EB00B40000
821	 98	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x95020300B4FFFF00E9FFF001030008011D01A800860000009501EB00B40000
- stack 0: 0xE0
822	 9A	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x950203
823	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x950203
- stack 0: 0xFFFF
824	 9E	AND		 	 
- stack 1: 0x4A4
- stack 0: 0x203
825	 9F	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0x203
- stack 0: 0x1
826	 A1	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0x203
827	 A2	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0x203
- stack 0: 0x20
828	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A4
- stack 1: 0x203
- stack 0: 0x4A0
829	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4A4
- stack 0: 0x6A3
830	 A7	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0x6A3
- stack 0: 0x20
831	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A4
832	 AB	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
833	 AD	ADD		 	 
- stack 0: 0x4A8
834	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
835	 AF	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xB4FFFF00E9FFF001030008011D01A800860000009501EB00B4000000E9000F
836	 B0	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xB4FFFF00E9FFF001030008011D01A800860000009501EB00B4000000E9000F
- stack 0: 0xF0
837	 B2	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xB4
838	 B3	JUMP		 	 
- stack 0: 0x4A8
839	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x4A8
840	 B5	PUSH2	0020	 	 
- stack 1: 0x4A8
- stack 0: 0x20
841	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4A8
- stack 0: 0x6A3
842	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
843	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A8
- stack 0: 0x6A3
844	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4A8
- stack 1: 0x6A3
- stack 0: 0x4A8
845	 C0	MLOAD		 	 
- stack 2: 0x4A8
- stack 1: 0x6A3
- stack 0: 0xB4FFFF00E9FFF001030008011D01A800860000009501EB00B4000000E9000F
846	 C1	PUSH1	E0	 	 
- stack 3: 0x4A8
- stack 2: 0x6A3
- stack 1: 0xB4FFFF00E9FFF001030008011D01A800860000009501EB00B4000000E9000F
- stack 0: 0xE0
847	 C3	SHR		 	 
- stack 2: 0x4A8
- stack 1: 0x6A3
- stack 0: 0xB4FFFF
848	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4A8
- stack 2: 0x6A3
- stack 1: 0xB4FFFF
- stack 0: 0xFFFF
849	 C7	AND		 	 
- stack 2: 0x4A8
- stack 1: 0x6A3
- stack 0: 0xFFFF
850	 C8	PUSH1	01	 	 
- stack 3: 0x4A8
- stack 2: 0x6A3
- stack 1: 0xFFFF
- stack 0: 0x1
851	 CA	SIGNEXTEND		 	 
- stack 2: 0x4A8
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
852	 CB	ADD		 	 
- stack 1: 0x4A8
- stack 0: 0x6A2
853	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
854	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A8
- stack 0: 0x6A2
855	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x4A8
- stack 1: 0x6A2
- stack 0: 0x3
856	 D4	XOR		 	 
- stack 1: 0x4A8
- stack 0: 0x6A1
857	 D5	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xF000FF0000000000000000000000000000000000000000000000000000000000
858	 D6	PUSH1	F8	 	 
- stack 2: 0x4A8
- stack 1: 0xF000FF0000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
859	 D8	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xF0
860	 D9	PUSH1	00	 	 
- stack 2: 0x4A8
- stack 1: 0xF0
- stack 0: 0x0
861	 DB	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
862	 DC	PUSH2	0060	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x60
863	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x4A8
864	 E0	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
865	 E2	ADD		 	 
- stack 0: 0x4AC
866	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
867	 E4	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xE9FFF001030008011D01A800860000009501EB00B4000000E9000F01030009
868	 E5	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xE9FFF001030008011D01A800860000009501EB00B4000000E9000F01030009
- stack 0: 0xF0
869	 E7	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xE9
870	 E8	JUMP		 	 
- stack 0: 0x4AC
871	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x4AC
872	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
873	 EB	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xE9FFF001030008011D01A800860000009501EB00B4000000E9000F01030009
874	 EC	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0xE9FFF001030008011D01A800860000009501EB00B4000000E9000F01030009
- stack 0: 0xE0
875	 EE	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xE9FFF0
876	 EF	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0xE9FFF0
- stack 0: 0xFFFF
877	 F2	AND		 	 
- stack 1: 0x4AC
- stack 0: 0xFFF0
878	 F3	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0xFFF0
- stack 0: 0x1
879	 F5	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
880	 F6	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
881	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x4AC
882	 FA	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
883	 FC	ADD		 	 
- stack 0: 0x4B0
884	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
885	 FE	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x1030008011D01A800860000009501EB00B4000000E9000F01030009011D0190
886	 FF	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x1030008011D01A800860000009501EB00B4000000E9000F01030009011D0190
- stack 0: 0xF0
887	 101	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x103
888	 102	JUMP		 	 
- stack 0: 0x4B0
889	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4B0
890	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
891	 105	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x1030008011D01A800860000009501EB00B4000000E9000F01030009011D0190
892	 106	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x1030008011D01A800860000009501EB00B4000000E9000F01030009011D0190
- stack 0: 0xE0
893	 108	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x1030008
894	 109	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x1030008
- stack 0: 0xFFFF
895	 10C	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x8
896	 10D	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x8
- stack 0: 0x1
897	 10F	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x8
898	 110	PUSH2	0380	 	 
- stack 2: 0x4B0
- stack 1: 0x8
- stack 0: 0x380
899	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x4B0
900	 114	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
901	 116	ADD		 	 
- stack 0: 0x4B4
902	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
903	 118	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x11D01A800860000009501EB00B4000000E9000F01030009011D019000860000
904	 119	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x11D01A800860000009501EB00B4000000E9000F01030009011D019000860000
- stack 0: 0xF0
905	 11B	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x11D
906	 11C	JUMP		 	 
- stack 0: 0x4B4
907	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x4B4
908	 11E	PUSH2	0060	 	 
- stack 1: 0x4B4
- stack 0: 0x60
909	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
910	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFFFFFFF
911	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B4
- stack 0: 0xFFFFFFF0
912	 128	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFF0
- stack 0: 0x3A0
913	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x4B4
- stack 1: 0xFFFFFFF0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
914	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B4
- stack 2: 0xFFFFFFF0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFFFFFFF
915	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B4
- stack 1: 0xFFFFFFF0
- stack 0: 0xFFFFFFF0
916	 132	SUB		 	 
- stack 1: 0x4B4
- stack 0: 0x0
917	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x4B4
- stack 1: 0x0
- stack 0: 0x13B
918	 136	JUMPI		 	 
- stack 0: 0x4B4
919	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x4B4
- stack 0: 0x155
920	 13A	JUMP		 	 
- stack 0: 0x4B4
921	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x4B4
922	 156	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
923	 158	ADD		 	 
- stack 0: 0x4B8
924	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
925	 15A	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x860000009501EB00B4000000E9000F01030009011D019000860000009501D0
926	 15B	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x860000009501EB00B4000000E9000F01030009011D019000860000009501D0
- stack 0: 0xF0
927	 15D	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x86
928	 15E	JUMP		 	 
- stack 0: 0x4B8
929	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4B8
930	 87	DUP1		 	 
- stack 1: 0x4B8
- stack 0: 0x4B8
931	 88	PUSH2	0020	 	 
- stack 2: 0x4B8
- stack 1: 0x4B8
- stack 0: 0x20
932	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B8
933	 8C	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
934	 8E	ADD		 	 
- stack 0: 0x4BC
935	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
936	 90	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x9501EB00B4000000E9000F01030009011D019000860000009501D00095FFE0
937	 91	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x9501EB00B4000000E9000F01030009011D019000860000009501D00095FFE0
- stack 0: 0xF0
938	 93	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x95
939	 94	JUMP		 	 
- stack 0: 0x4BC
940	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x4BC
941	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
942	 97	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x9501EB00B4000000E9000F01030009011D019000860000009501D00095FFE0
943	 98	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0x9501EB00B4000000E9000F01030009011D019000860000009501D00095FFE0
- stack 0: 0xE0
944	 9A	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x9501EB
945	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x9501EB
- stack 0: 0xFFFF
946	 9E	AND		 	 
- stack 1: 0x4BC
- stack 0: 0x1EB
947	 9F	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0x1EB
- stack 0: 0x1
948	 A1	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0x1EB
949	 A2	PUSH2	0020	 	 
- stack 2: 0x4BC
- stack 1: 0x1EB
- stack 0: 0x20
950	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4BC
- stack 1: 0x1EB
- stack 0: 0x4B8
951	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4BC
- stack 0: 0x6A3
952	 A7	PUSH2	0020	 	 
- stack 2: 0x4BC
- stack 1: 0x6A3
- stack 0: 0x20
953	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4BC
954	 AB	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
955	 AD	ADD		 	 
- stack 0: 0x4C0
956	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
957	 AF	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xB4000000E9000F01030009011D019000860000009501D00095FFE000B40020
958	 B0	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0xB4000000E9000F01030009011D019000860000009501D00095FFE000B40020
- stack 0: 0xF0
959	 B2	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xB4
960	 B3	JUMP		 	 
- stack 0: 0x4C0
961	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x4C0
962	 B5	PUSH2	0020	 	 
- stack 1: 0x4C0
- stack 0: 0x20
963	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4C0
- stack 0: 0x6A3
964	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
965	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C0
- stack 0: 0x6A3
966	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0x4C0
967	 C0	MLOAD		 	 
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0xB4000000E9000F01030009011D019000860000009501D00095FFE000B40020
968	 C1	PUSH1	E0	 	 
- stack 3: 0x4C0
- stack 2: 0x6A3
- stack 1: 0xB4000000E9000F01030009011D019000860000009501D00095FFE000B40020
- stack 0: 0xE0
969	 C3	SHR		 	 
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0xB40000
970	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4C0
- stack 2: 0x6A3
- stack 1: 0xB40000
- stack 0: 0xFFFF
971	 C7	AND		 	 
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0x0
972	 C8	PUSH1	01	 	 
- stack 3: 0x4C0
- stack 2: 0x6A3
- stack 1: 0x0
- stack 0: 0x1
973	 CA	SIGNEXTEND		 	 
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0x0
974	 CB	ADD		 	 
- stack 1: 0x4C0
- stack 0: 0x6A3
975	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
976	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C0
- stack 0: 0x6A3
977	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0x3
978	 D4	XOR		 	 
- stack 1: 0x4C0
- stack 0: 0x6A0
979	 D5	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xFF000FF00000000000000000000000000000000000000000000000000000000
980	 D6	PUSH1	F8	 	 
- stack 2: 0x4C0
- stack 1: 0xFF000FF00000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
981	 D8	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xF
982	 D9	PUSH1	00	 	 
- stack 2: 0x4C0
- stack 1: 0xF
- stack 0: 0x0
983	 DB	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0xF
984	 DC	PUSH2	0060	 	 
- stack 2: 0x4C0
- stack 1: 0xF
- stack 0: 0x60
985	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x4C0
986	 E0	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
987	 E2	ADD		 	 
- stack 0: 0x4C4
988	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
989	 E4	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xE9000F01030009011D019000860000009501D00095FFE000B4002000E9FFFF
990	 E5	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0xE9000F01030009011D019000860000009501D00095FFE000B4002000E9FFFF
- stack 0: 0xF0
991	 E7	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xE9
992	 E8	JUMP		 	 
- stack 0: 0x4C4
993	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x4C4
994	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
995	 EB	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xE9000F01030009011D019000860000009501D00095FFE000B4002000E9FFFF
996	 EC	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0xE9000F01030009011D019000860000009501D00095FFE000B4002000E9FFFF
- stack 0: 0xE0
997	 EE	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xE9000F
998	 EF	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0xE9000F
- stack 0: 0xFFFF
999	 F2	AND		 	 
- stack 1: 0x4C4
- stack 0: 0xF
1000	 F3	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0xF
- stack 0: 0x1
1001	 F5	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0xF
1002	 F6	PUSH2	03A0	 	 
- stack 2: 0x4C4
- stack 1: 0xF
- stack 0: 0x3A0
1003	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x4C4
1004	 FA	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
1005	 FC	ADD		 	 
- stack 0: 0x4C8
1006	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
1007	 FE	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x1030009011D019000860000009501D00095FFE000B4002000E9FFFF0103000A
1008	 FF	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x1030009011D019000860000009501D00095FFE000B4002000E9FFFF0103000A
- stack 0: 0xF0
1009	 101	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x103
1010	 102	JUMP		 	 
- stack 0: 0x4C8
1011	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C8
1012	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
1013	 105	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x1030009011D019000860000009501D00095FFE000B4002000E9FFFF0103000A
1014	 106	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0x1030009011D019000860000009501D00095FFE000B4002000E9FFFF0103000A
- stack 0: 0xE0
1015	 108	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x1030009
1016	 109	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0x1030009
- stack 0: 0xFFFF
1017	 10C	AND		 	 
- stack 1: 0x4C8
- stack 0: 0x9
1018	 10D	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0x9
- stack 0: 0x1
1019	 10F	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0x9
1020	 110	PUSH2	0380	 	 
- stack 2: 0x4C8
- stack 1: 0x9
- stack 0: 0x380
1021	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C8
1022	 114	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
1023	 116	ADD		 	 
- stack 0: 0x4CC
1024	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
1025	 118	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x11D019000860000009501D00095FFE000B4002000E9FFFF0103000A011D0174
1026	 119	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x11D019000860000009501D00095FFE000B4002000E9FFFF0103000A011D0174
- stack 0: 0xF0
1027	 11B	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x11D
1028	 11C	JUMP		 	 
- stack 0: 0x4CC
1029	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x4CC
1030	 11E	PUSH2	0060	 	 
- stack 1: 0x4CC
- stack 0: 0x60
1031	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x4CC
- stack 0: 0xF
1032	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4CC
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
1033	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4CC
- stack 0: 0xF
1034	 128	PUSH2	03A0	 	 
- stack 2: 0x4CC
- stack 1: 0xF
- stack 0: 0x3A0
1035	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x4CC
- stack 1: 0xF
- stack 0: 0xF
1036	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4CC
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
1037	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4CC
- stack 1: 0xF
- stack 0: 0xF
1038	 132	SUB		 	 
- stack 1: 0x4CC
- stack 0: 0x0
1039	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x4CC
- stack 1: 0x0
- stack 0: 0x13B
1040	 136	JUMPI		 	 
- stack 0: 0x4CC
1041	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x4CC
- stack 0: 0x155
1042	 13A	JUMP		 	 
- stack 0: 0x4CC
1043	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x4CC
1044	 156	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
1045	 158	ADD		 	 
- stack 0: 0x4D0
1046	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
1047	 15A	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x860000009501D00095FFE000B4002000E9FFFF0103000A011D017400860000
1048	 15B	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x860000009501D00095FFE000B4002000E9FFFF0103000A011D017400860000
- stack 0: 0xF0
1049	 15D	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x86
1050	 15E	JUMP		 	 
- stack 0: 0x4D0
1051	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4D0
1052	 87	DUP1		 	 
- stack 1: 0x4D0
- stack 0: 0x4D0
1053	 88	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0x4D0
- stack 0: 0x20
1054	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D0
1055	 8C	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1056	 8E	ADD		 	 
- stack 0: 0x4D4
1057	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1058	 90	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x9501D00095FFE000B4002000E9FFFF0103000A011D017400860000009501B4
1059	 91	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x9501D00095FFE000B4002000E9FFFF0103000A011D017400860000009501B4
- stack 0: 0xF0
1060	 93	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x95
1061	 94	JUMP		 	 
- stack 0: 0x4D4
1062	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x4D4
1063	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
1064	 97	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x9501D00095FFE000B4002000E9FFFF0103000A011D017400860000009501B4
1065	 98	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0x9501D00095FFE000B4002000E9FFFF0103000A011D017400860000009501B4
- stack 0: 0xE0
1066	 9A	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x9501D0
1067	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x9501D0
- stack 0: 0xFFFF
1068	 9E	AND		 	 
- stack 1: 0x4D4
- stack 0: 0x1D0
1069	 9F	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0x1D0
- stack 0: 0x1
1070	 A1	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0x1D0
1071	 A2	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0x1D0
- stack 0: 0x20
1072	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D4
- stack 1: 0x1D0
- stack 0: 0x4D0
1073	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4D4
- stack 0: 0x6A0
1074	 A7	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0x6A0
- stack 0: 0x20
1075	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D4
1076	 AB	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1077	 AD	ADD		 	 
- stack 0: 0x4D8
1078	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1079	 AF	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x95FFE000B4002000E9FFFF0103000A011D017400860000009501B40095FFFA
1080	 B0	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x95FFE000B4002000E9FFFF0103000A011D017400860000009501B40095FFFA
- stack 0: 0xF0
1081	 B2	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x95
1082	 B3	JUMP		 	 
- stack 0: 0x4D8
1083	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x4D8
1084	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
1085	 97	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x95FFE000B4002000E9FFFF0103000A011D017400860000009501B40095FFFA
1086	 98	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0x95FFE000B4002000E9FFFF0103000A011D017400860000009501B40095FFFA
- stack 0: 0xE0
1087	 9A	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x95FFE0
1088	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x95FFE0
- stack 0: 0xFFFF
1089	 9E	AND		 	 
- stack 1: 0x4D8
- stack 0: 0xFFE0
1090	 9F	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0xFFE0
- stack 0: 0x1
1091	 A1	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1092	 A2	PUSH2	0020	 	 
- stack 2: 0x4D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x20
1093	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x6A0
1094	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4D8
- stack 0: 0x680
1095	 A7	PUSH2	0020	 	 
- stack 2: 0x4D8
- stack 1: 0x680
- stack 0: 0x20
1096	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D8
1097	 AB	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1098	 AD	ADD		 	 
- stack 0: 0x4DC
1099	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1100	 AF	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xB4002000E9FFFF0103000A011D017400860000009501B40095FFFA00B40007
1101	 B0	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0xB4002000E9FFFF0103000A011D017400860000009501B40095FFFA00B40007
- stack 0: 0xF0
1102	 B2	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xB4
1103	 B3	JUMP		 	 
- stack 0: 0x4DC
1104	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x4DC
1105	 B5	PUSH2	0020	 	 
- stack 1: 0x4DC
- stack 0: 0x20
1106	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4DC
- stack 0: 0x680
1107	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x680
- stack 0: 0xFFFFFFFF
1108	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4DC
- stack 0: 0x680
1109	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4DC
- stack 1: 0x680
- stack 0: 0x4DC
1110	 C0	MLOAD		 	 
- stack 2: 0x4DC
- stack 1: 0x680
- stack 0: 0xB4002000E9FFFF0103000A011D017400860000009501B40095FFFA00B40007
1111	 C1	PUSH1	E0	 	 
- stack 3: 0x4DC
- stack 2: 0x680
- stack 1: 0xB4002000E9FFFF0103000A011D017400860000009501B40095FFFA00B40007
- stack 0: 0xE0
1112	 C3	SHR		 	 
- stack 2: 0x4DC
- stack 1: 0x680
- stack 0: 0xB40020
1113	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4DC
- stack 2: 0x680
- stack 1: 0xB40020
- stack 0: 0xFFFF
1114	 C7	AND		 	 
- stack 2: 0x4DC
- stack 1: 0x680
- stack 0: 0x20
1115	 C8	PUSH1	01	 	 
- stack 3: 0x4DC
- stack 2: 0x680
- stack 1: 0x20
- stack 0: 0x1
1116	 CA	SIGNEXTEND		 	 
- stack 2: 0x4DC
- stack 1: 0x680
- stack 0: 0x20
1117	 CB	ADD		 	 
- stack 1: 0x4DC
- stack 0: 0x6A0
1118	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
1119	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4DC
- stack 0: 0x6A0
1120	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x4DC
- stack 1: 0x6A0
- stack 0: 0x3
1121	 D4	XOR		 	 
- stack 1: 0x4DC
- stack 0: 0x6A3
1122	 D5	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xFF00000000000000000000000000000000000000000000000000000000000000
1123	 D6	PUSH1	F8	 	 
- stack 2: 0x4DC
- stack 1: 0xFF00000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
1124	 D8	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xFF
1125	 D9	PUSH1	00	 	 
- stack 2: 0x4DC
- stack 1: 0xFF
- stack 0: 0x0
1126	 DB	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1127	 DC	PUSH2	0060	 	 
- stack 2: 0x4DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
1128	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x4DC
1129	 E0	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1130	 E2	ADD		 	 
- stack 0: 0x4E0
1131	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1132	 E4	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xE9FFFF0103000A011D017400860000009501B40095FFFA00B4000700E90000
1133	 E5	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0xE9FFFF0103000A011D017400860000009501B40095FFFA00B4000700E90000
- stack 0: 0xF0
1134	 E7	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xE9
1135	 E8	JUMP		 	 
- stack 0: 0x4E0
1136	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x4E0
1137	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1138	 EB	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xE9FFFF0103000A011D017400860000009501B40095FFFA00B4000700E90000
1139	 EC	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0xE9FFFF0103000A011D017400860000009501B40095FFFA00B4000700E90000
- stack 0: 0xE0
1140	 EE	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xE9FFFF
1141	 EF	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0xE9FFFF
- stack 0: 0xFFFF
1142	 F2	AND		 	 
- stack 1: 0x4E0
- stack 0: 0xFFFF
1143	 F3	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0xFFFF
- stack 0: 0x1
1144	 F5	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1145	 F6	PUSH2	03A0	 	 
- stack 2: 0x4E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
1146	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x4E0
1147	 FA	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1148	 FC	ADD		 	 
- stack 0: 0x4E4
1149	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1150	 FE	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x103000A011D017400860000009501B40095FFFA00B4000700E900000103000B
1151	 FF	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x103000A011D017400860000009501B40095FFFA00B4000700E900000103000B
- stack 0: 0xF0
1152	 101	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x103
1153	 102	JUMP		 	 
- stack 0: 0x4E4
1154	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E4
1155	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1156	 105	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x103000A011D017400860000009501B40095FFFA00B4000700E900000103000B
1157	 106	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0x103000A011D017400860000009501B40095FFFA00B4000700E900000103000B
- stack 0: 0xE0
1158	 108	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x103000A
1159	 109	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x103000A
- stack 0: 0xFFFF
1160	 10C	AND		 	 
- stack 1: 0x4E4
- stack 0: 0xA
1161	 10D	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0xA
- stack 0: 0x1
1162	 10F	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0xA
1163	 110	PUSH2	0380	 	 
- stack 2: 0x4E4
- stack 1: 0xA
- stack 0: 0x380
1164	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E4
1165	 114	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1166	 116	ADD		 	 
- stack 0: 0x4E8
1167	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1168	 118	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x11D017400860000009501B40095FFFA00B4000700E900000103000B011D0158
1169	 119	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x11D017400860000009501B40095FFFA00B4000700E900000103000B011D0158
- stack 0: 0xF0
1170	 11B	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x11D
1171	 11C	JUMP		 	 
- stack 0: 0x4E8
1172	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x4E8
1173	 11E	PUSH2	0060	 	 
- stack 1: 0x4E8
- stack 0: 0x60
1174	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x4E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1175	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1176	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E8
- stack 0: 0xFFFFFFFF
1177	 128	PUSH2	03A0	 	 
- stack 2: 0x4E8
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
1178	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E8
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1179	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E8
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1180	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E8
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
1181	 132	SUB		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1182	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x13B
1183	 136	JUMPI		 	 
- stack 0: 0x4E8
1184	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x4E8
- stack 0: 0x155
1185	 13A	JUMP		 	 
- stack 0: 0x4E8
1186	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x4E8
1187	 156	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1188	 158	ADD		 	 
- stack 0: 0x4EC
1189	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1190	 15A	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x860000009501B40095FFFA00B4000700E900000103000B011D01580103000C
1191	 15B	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x860000009501B40095FFFA00B4000700E900000103000B011D01580103000C
- stack 0: 0xF0
1192	 15D	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x86
1193	 15E	JUMP		 	 
- stack 0: 0x4EC
1194	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4EC
1195	 87	DUP1		 	 
- stack 1: 0x4EC
- stack 0: 0x4EC
1196	 88	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0x4EC
- stack 0: 0x20
1197	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4EC
1198	 8C	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1199	 8E	ADD		 	 
- stack 0: 0x4F0
1200	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1201	 90	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x9501B40095FFFA00B4000700E900000103000B011D01580103000C015F0000
1202	 91	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x9501B40095FFFA00B4000700E900000103000B011D01580103000C015F0000
- stack 0: 0xF0
1203	 93	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x95
1204	 94	JUMP		 	 
- stack 0: 0x4F0
1205	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x4F0
1206	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F0
- stack 0: 0x4F0
1207	 97	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x9501B40095FFFA00B4000700E900000103000B011D01580103000C015F0000
1208	 98	PUSH1	E0	 	 
- stack 2: 0x4F0
- stack 1: 0x9501B40095FFFA00B4000700E900000103000B011D01580103000C015F0000
- stack 0: 0xE0
1209	 9A	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x9501B4
1210	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4F0
- stack 1: 0x9501B4
- stack 0: 0xFFFF
1211	 9E	AND		 	 
- stack 1: 0x4F0
- stack 0: 0x1B4
1212	 9F	PUSH1	01	 	 
- stack 2: 0x4F0
- stack 1: 0x1B4
- stack 0: 0x1
1213	 A1	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0x1B4
1214	 A2	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0x1B4
- stack 0: 0x20
1215	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F0
- stack 1: 0x1B4
- stack 0: 0x4EC
1216	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F0
- stack 0: 0x6A0
1217	 A7	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0x6A0
- stack 0: 0x20
1218	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F0
1219	 AB	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1220	 AD	ADD		 	 
- stack 0: 0x4F4
1221	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1222	 AF	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x95FFFA00B4000700E900000103000B011D01580103000C015F000000860000
1223	 B0	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x95FFFA00B4000700E900000103000B011D01580103000C015F000000860000
- stack 0: 0xF0
1224	 B2	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x95
1225	 B3	JUMP		 	 
- stack 0: 0x4F4
1226	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x4F4
1227	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1228	 97	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x95FFFA00B4000700E900000103000B011D01580103000C015F000000860000
1229	 98	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x95FFFA00B4000700E900000103000B011D01580103000C015F000000860000
- stack 0: 0xE0
1230	 9A	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x95FFFA
1231	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x95FFFA
- stack 0: 0xFFFF
1232	 9E	AND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFA
1233	 9F	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFA
- stack 0: 0x1
1234	 A1	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA
1235	 A2	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA
- stack 0: 0x20
1236	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA
- stack 0: 0x6A0
1237	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F4
- stack 0: 0x69A
1238	 A7	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0x69A
- stack 0: 0x20
1239	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F4
1240	 AB	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1241	 AD	ADD		 	 
- stack 0: 0x4F8
1242	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1243	 AF	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xB4000700E900000103000B011D01580103000C015F00000086000000950191
1244	 B0	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0xB4000700E900000103000B011D01580103000C015F00000086000000950191
- stack 0: 0xF0
1245	 B2	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xB4
1246	 B3	JUMP		 	 
- stack 0: 0x4F8
1247	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x4F8
1248	 B5	PUSH2	0020	 	 
- stack 1: 0x4F8
- stack 0: 0x20
1249	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4F8
- stack 0: 0x69A
1250	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x69A
- stack 0: 0xFFFFFFFF
1251	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F8
- stack 0: 0x69A
1252	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4F8
- stack 1: 0x69A
- stack 0: 0x4F8
1253	 C0	MLOAD		 	 
- stack 2: 0x4F8
- stack 1: 0x69A
- stack 0: 0xB4000700E900000103000B011D01580103000C015F00000086000000950191
1254	 C1	PUSH1	E0	 	 
- stack 3: 0x4F8
- stack 2: 0x69A
- stack 1: 0xB4000700E900000103000B011D01580103000C015F00000086000000950191
- stack 0: 0xE0
1255	 C3	SHR		 	 
- stack 2: 0x4F8
- stack 1: 0x69A
- stack 0: 0xB40007
1256	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4F8
- stack 2: 0x69A
- stack 1: 0xB40007
- stack 0: 0xFFFF
1257	 C7	AND		 	 
- stack 2: 0x4F8
- stack 1: 0x69A
- stack 0: 0x7
1258	 C8	PUSH1	01	 	 
- stack 3: 0x4F8
- stack 2: 0x69A
- stack 1: 0x7
- stack 0: 0x1
1259	 CA	SIGNEXTEND		 	 
- stack 2: 0x4F8
- stack 1: 0x69A
- stack 0: 0x7
1260	 CB	ADD		 	 
- stack 1: 0x4F8
- stack 0: 0x6A1
1261	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
1262	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F8
- stack 0: 0x6A1
1263	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x4F8
- stack 1: 0x6A1
- stack 0: 0x3
1264	 D4	XOR		 	 
- stack 1: 0x4F8
- stack 0: 0x6A2
1265	 D5	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xFF000000000000000000000000000000000000000000000000000000000000
1266	 D6	PUSH1	F8	 	 
- stack 2: 0x4F8
- stack 1: 0xFF000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
1267	 D8	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x0
1268	 D9	PUSH1	00	 	 
- stack 2: 0x4F8
- stack 1: 0x0
- stack 0: 0x0
1269	 DB	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x0
1270	 DC	PUSH2	0060	 	 
- stack 2: 0x4F8
- stack 1: 0x0
- stack 0: 0x60
1271	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x4F8
1272	 E0	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1273	 E2	ADD		 	 
- stack 0: 0x4FC
1274	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1275	 E4	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0xE900000103000B011D01580103000C015F0000008600000095019100B40001
1276	 E5	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0xE900000103000B011D01580103000C015F0000008600000095019100B40001
- stack 0: 0xF0
1277	 E7	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0xE9
1278	 E8	JUMP		 	 
- stack 0: 0x4FC
1279	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x4FC
1280	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1281	 EB	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0xE900000103000B011D01580103000C015F0000008600000095019100B40001
1282	 EC	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0xE900000103000B011D01580103000C015F0000008600000095019100B40001
- stack 0: 0xE0
1283	 EE	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0xE90000
1284	 EF	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0xE90000
- stack 0: 0xFFFF
1285	 F2	AND		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1286	 F3	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x1
1287	 F5	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1288	 F6	PUSH2	03A0	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x3A0
1289	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x4FC
1290	 FA	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1291	 FC	ADD		 	 
- stack 0: 0x500
1292	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1293	 FE	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x103000B011D01580103000C015F0000008600000095019100B4000101790000
1294	 FF	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x103000B011D01580103000C015F0000008600000095019100B4000101790000
- stack 0: 0xF0
1295	 101	SHR		 	 
- stack 1: 0x500
- stack 0: 0x103
1296	 102	JUMP		 	 
- stack 0: 0x500
1297	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x500
1298	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1299	 105	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x103000B011D01580103000C015F0000008600000095019100B4000101790000
1300	 106	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x103000B011D01580103000C015F0000008600000095019100B4000101790000
- stack 0: 0xE0
1301	 108	SHR		 	 
- stack 1: 0x500
- stack 0: 0x103000B
1302	 109	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x103000B
- stack 0: 0xFFFF
1303	 10C	AND		 	 
- stack 1: 0x500
- stack 0: 0xB
1304	 10D	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0xB
- stack 0: 0x1
1305	 10F	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0xB
1306	 110	PUSH2	0380	 	 
- stack 2: 0x500
- stack 1: 0xB
- stack 0: 0x380
1307	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x500
1308	 114	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1309	 116	ADD		 	 
- stack 0: 0x504
1310	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1311	 118	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x11D01580103000C015F0000008600000095019100B400010179000000E9FFF0
1312	 119	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x11D01580103000C015F0000008600000095019100B400010179000000E9FFF0
- stack 0: 0xF0
1313	 11B	SHR		 	 
- stack 1: 0x504
- stack 0: 0x11D
1314	 11C	JUMP		 	 
- stack 0: 0x504
1315	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x504
1316	 11E	PUSH2	0060	 	 
- stack 1: 0x504
- stack 0: 0x60
1317	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x504
- stack 0: 0x0
1318	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1319	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x504
- stack 0: 0x0
1320	 128	PUSH2	03A0	 	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x3A0
1321	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x0
1322	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x504
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1323	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x0
1324	 132	SUB		 	 
- stack 1: 0x504
- stack 0: 0x0
1325	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x13B
1326	 136	JUMPI		 	 
- stack 0: 0x504
1327	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x504
- stack 0: 0x155
1328	 13A	JUMP		 	 
- stack 0: 0x504
1329	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x504
1330	 156	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1331	 158	ADD		 	 
- stack 0: 0x508
1332	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1333	 15A	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x103000C015F0000008600000095019100B400010179000000E9FFF001980138
1334	 15B	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x103000C015F0000008600000095019100B400010179000000E9FFF001980138
- stack 0: 0xF0
1335	 15D	SHR		 	 
- stack 1: 0x508
- stack 0: 0x103
1336	 15E	JUMP		 	 
- stack 0: 0x508
1337	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x508
1338	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1339	 105	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x103000C015F0000008600000095019100B400010179000000E9FFF001980138
1340	 106	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x103000C015F0000008600000095019100B400010179000000E9FFF001980138
- stack 0: 0xE0
1341	 108	SHR		 	 
- stack 1: 0x508
- stack 0: 0x103000C
1342	 109	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x103000C
- stack 0: 0xFFFF
1343	 10C	AND		 	 
- stack 1: 0x508
- stack 0: 0xC
1344	 10D	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xC
- stack 0: 0x1
1345	 10F	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xC
1346	 110	PUSH2	0380	 	 
- stack 2: 0x508
- stack 1: 0xC
- stack 0: 0x380
1347	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x508
1348	 114	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1349	 116	ADD		 	 
- stack 0: 0x50C
1350	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1351	 118	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x15F0000008600000095019100B400010179000000E9FFF00198013801DA0001
1352	 119	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x15F0000008600000095019100B400010179000000E9FFF00198013801DA0001
- stack 0: 0xF0
1353	 11B	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x15F
1354	 11C	JUMP		 	 
- stack 0: 0x50C
1355	 15F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x50C
1356	 160	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1357	 161	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x15F0000008600000095019100B400010179000000E9FFF00198013801DA0001
1358	 162	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0x15F0000008600000095019100B400010179000000E9FFF00198013801DA0001
- stack 0: 0xE0
1359	 164	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x15F0000
1360	 165	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0x15F0000
- stack 0: 0xFFFF
1361	 168	AND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1362	 169	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x1
1363	 16B	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1364	 16C	PUSH2	0080	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x80
1365	 16F	MSTORE		 	  ;; # store to x4
- stack 0: 0x50C
1366	 170	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1367	 172	ADD		 	 
- stack 0: 0x510
1368	 173	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1369	 174	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x8600000095019100B400010179000000E9FFF00198013801DA000101F90002
1370	 175	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x8600000095019100B400010179000000E9FFF00198013801DA000101F90002
- stack 0: 0xF0
1371	 177	SHR		 	 
- stack 1: 0x510
- stack 0: 0x86
1372	 178	JUMP		 	 
- stack 0: 0x510
1373	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x510
1374	 87	DUP1		 	 
- stack 1: 0x510
- stack 0: 0x510
1375	 88	PUSH2	0020	 	 
- stack 2: 0x510
- stack 1: 0x510
- stack 0: 0x20
1376	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x510
1377	 8C	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1378	 8E	ADD		 	 
- stack 0: 0x514
1379	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1380	 90	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x95019100B400010179000000E9FFF00198013801DA000101F900020213FFE0
1381	 91	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x95019100B400010179000000E9FFF00198013801DA000101F900020213FFE0
- stack 0: 0xF0
1382	 93	SHR		 	 
- stack 1: 0x514
- stack 0: 0x95
1383	 94	JUMP		 	 
- stack 0: 0x514
1384	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x514
1385	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1386	 97	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x95019100B400010179000000E9FFF00198013801DA000101F900020213FFE0
1387	 98	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x95019100B400010179000000E9FFF00198013801DA000101F900020213FFE0
- stack 0: 0xE0
1388	 9A	SHR		 	 
- stack 1: 0x514
- stack 0: 0x950191
1389	 9B	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x950191
- stack 0: 0xFFFF
1390	 9E	AND		 	 
- stack 1: 0x514
- stack 0: 0x191
1391	 9F	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x191
- stack 0: 0x1
1392	 A1	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x191
1393	 A2	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0x191
- stack 0: 0x20
1394	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x514
- stack 1: 0x191
- stack 0: 0x510
1395	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x514
- stack 0: 0x6A1
1396	 A7	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0x6A1
- stack 0: 0x20
1397	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x514
1398	 AB	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1399	 AD	ADD		 	 
- stack 0: 0x518
1400	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1401	 AF	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xB400010179000000E9FFF00198013801DA000101F900020213FFE00103000D
1402	 B0	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0xB400010179000000E9FFF00198013801DA000101F900020213FFE00103000D
- stack 0: 0xF0
1403	 B2	SHR		 	 
- stack 1: 0x518
- stack 0: 0xB4
1404	 B3	JUMP		 	 
- stack 0: 0x518
1405	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x518
1406	 B5	PUSH2	0020	 	 
- stack 1: 0x518
- stack 0: 0x20
1407	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x518
- stack 0: 0x6A1
1408	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
1409	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x6A1
1410	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0x518
1411	 C0	MLOAD		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0xB400010179000000E9FFF00198013801DA000101F900020213FFE00103000D
1412	 C1	PUSH1	E0	 	 
- stack 3: 0x518
- stack 2: 0x6A1
- stack 1: 0xB400010179000000E9FFF00198013801DA000101F900020213FFE00103000D
- stack 0: 0xE0
1413	 C3	SHR		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0xB40001
1414	 C4	PUSH2	FFFF	 	 
- stack 3: 0x518
- stack 2: 0x6A1
- stack 1: 0xB40001
- stack 0: 0xFFFF
1415	 C7	AND		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0x1
1416	 C8	PUSH1	01	 	 
- stack 3: 0x518
- stack 2: 0x6A1
- stack 1: 0x1
- stack 0: 0x1
1417	 CA	SIGNEXTEND		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0x1
1418	 CB	ADD		 	 
- stack 1: 0x518
- stack 0: 0x6A2
1419	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
1420	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x6A2
1421	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x518
- stack 1: 0x6A2
- stack 0: 0x3
1422	 D4	XOR		 	 
- stack 1: 0x518
- stack 0: 0x6A1
1423	 D5	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xF000FF0000000000000000000000000000000000000000000000000000000000
1424	 D6	PUSH1	F8	 	 
- stack 2: 0x518
- stack 1: 0xF000FF0000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
1425	 D8	SHR		 	 
- stack 1: 0x518
- stack 0: 0xF0
1426	 D9	PUSH1	00	 	 
- stack 2: 0x518
- stack 1: 0xF0
- stack 0: 0x0
1427	 DB	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1428	 DC	PUSH2	0060	 	 
- stack 2: 0x518
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x60
1429	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x518
1430	 E0	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1431	 E2	ADD		 	 
- stack 0: 0x51C
1432	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1433	 E4	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x179000000E9FFF00198013801DA000101F900020213FFE00103000D015F0000
1434	 E5	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x179000000E9FFF00198013801DA000101F900020213FFE00103000D015F0000
- stack 0: 0xF0
1435	 E7	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x179
1436	 E8	JUMP		 	 
- stack 0: 0x51C
1437	 179	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x51C
1438	 17A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1439	 17B	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x179000000E9FFF00198013801DA000101F900020213FFE00103000D015F0000
1440	 17C	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x179000000E9FFF00198013801DA000101F900020213FFE00103000D015F0000
- stack 0: 0xE0
1441	 17E	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x1790000
1442	 17F	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x1790000
- stack 0: 0xFFFF
1443	 182	AND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1444	 183	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x1
1445	 185	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1446	 186	PUSH2	0060	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x60
1447	 189	MLOAD		 	  ;; # read from x3
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1448	 18A	ADD		 	  ;; # ADDI 3
- stack 1: 0x51C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1449	 18B	PUSH2	00C0	 	 
- stack 2: 0x51C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xC0
1450	 18E	MSTORE		 	  ;; # store to x6
- stack 0: 0x51C
1451	 18F	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1452	 191	ADD		 	 
- stack 0: 0x520
1453	 192	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1454	 193	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xE9FFF00198013801DA000101F900020213FFE00103000D015F000000860000
1455	 194	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0xE9FFF00198013801DA000101F900020213FFE00103000D015F000000860000
- stack 0: 0xF0
1456	 196	SHR		 	 
- stack 1: 0x520
- stack 0: 0xE9
1457	 197	JUMP		 	 
- stack 0: 0x520
1458	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x520
1459	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1460	 EB	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xE9FFF00198013801DA000101F900020213FFE00103000D015F000000860000
1461	 EC	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0xE9FFF00198013801DA000101F900020213FFE00103000D015F000000860000
- stack 0: 0xE0
1462	 EE	SHR		 	 
- stack 1: 0x520
- stack 0: 0xE9FFF0
1463	 EF	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0xE9FFF0
- stack 0: 0xFFFF
1464	 F2	AND		 	 
- stack 1: 0x520
- stack 0: 0xFFF0
1465	 F3	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0xFFF0
- stack 0: 0x1
1466	 F5	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1467	 F6	PUSH2	03A0	 	 
- stack 2: 0x520
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
1468	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x520
1469	 FA	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1470	 FC	ADD		 	 
- stack 0: 0x524
1471	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1472	 FE	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x198013801DA000101F900020213FFE00103000D015F00000086000000950166
1473	 FF	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x198013801DA000101F900020213FFE00103000D015F00000086000000950166
- stack 0: 0xF0
1474	 101	SHR		 	 
- stack 1: 0x524
- stack 0: 0x198
1475	 102	JUMP		 	 
- stack 0: 0x524
1476	 198	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,138(ignore imm)
- stack 0: 0x524
1477	 199	PUSH2	00C0	 	 
- stack 1: 0x524
- stack 0: 0xC0
1478	 19C	MLOAD		 	  ;; # read from x6
- stack 1: 0x524
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1479	 19D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x524
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFFFFFFF
1480	 1A2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x524
- stack 0: 0xFFFFFFF0
1481	 1A3	PUSH2	03A0	 	 
- stack 2: 0x524
- stack 1: 0xFFFFFFF0
- stack 0: 0x3A0
1482	 1A6	MLOAD		 	  ;; # read from x29
- stack 2: 0x524
- stack 1: 0xFFFFFFF0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1483	 1A7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x524
- stack 2: 0xFFFFFFF0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFFFFFFF
1484	 1AC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x524
- stack 1: 0xFFFFFFF0
- stack 0: 0xFFFFFFF0
1485	 1AD	SUB		 	 
- stack 1: 0x524
- stack 0: 0x0
1486	 1AE	PUSH2	01B6	 ;; _neq_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x1B6
1487	 1B1	JUMPI		 	 
- stack 0: 0x524
1488	 1B2	PUSH2	01D0	 ;; _neq_after_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 1: 0x524
- stack 0: 0x1D0
1489	 1B5	JUMP		 	 
- stack 0: 0x524
1490	 1D0	JUMPDEST		 ;; _neq_after_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 0: 0x524
1491	 1D1	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1492	 1D3	ADD		 	 
- stack 0: 0x528
1493	 1D4	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1494	 1D5	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1DA000101F900020213FFE00103000D015F0000008600000095016600B40001
1495	 1D6	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x1DA000101F900020213FFE00103000D015F0000008600000095016600B40001
- stack 0: 0xF0
1496	 1D8	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1DA
1497	 1D9	JUMP		 	 
- stack 0: 0x528
1498	 1DA	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x528
1499	 1DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1500	 1DC	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1DA000101F900020213FFE00103000D015F0000008600000095016600B40001
1501	 1DD	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x1DA000101F900020213FFE00103000D015F0000008600000095016600B40001
- stack 0: 0xE0
1502	 1DF	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1DA0001
1503	 1E0	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x1DA0001
- stack 0: 0xFFFF
1504	 1E3	AND		 	 
- stack 1: 0x528
- stack 0: 0x1
1505	 1E4	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x1
1506	 1E6	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0x1
1507	 1E7	PUSH2	0080	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x80
1508	 1EA	MLOAD		 	  ;; # read from x4
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x0
1509	 1EB	ADD		 	  ;; # ADDI 4
- stack 1: 0x528
- stack 0: 0x1
1510	 1EC	PUSH2	0080	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x80
1511	 1EF	MSTORE		 	  ;; # store to x4
- stack 0: 0x528
1512	 1F0	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1513	 1F2	ADD		 	 
- stack 0: 0x52C
1514	 1F3	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1515	 1F4	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x1F900020213FFE00103000D015F0000008600000095016600B4000102550000
1516	 1F5	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x1F900020213FFE00103000D015F0000008600000095016600B4000102550000
- stack 0: 0xF0
1517	 1F7	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1F9
1518	 1F8	JUMP		 	 
- stack 0: 0x52C
1519	 1F9	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x52C
1520	 1FA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1521	 1FB	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x1F900020213FFE00103000D015F0000008600000095016600B4000102550000
1522	 1FC	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0x1F900020213FFE00103000D015F0000008600000095016600B4000102550000
- stack 0: 0xE0
1523	 1FE	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1F90002
1524	 1FF	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0x1F90002
- stack 0: 0xFFFF
1525	 202	AND		 	 
- stack 1: 0x52C
- stack 0: 0x2
1526	 203	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x2
- stack 0: 0x1
1527	 205	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x2
1528	 206	PUSH2	00A0	 	 
- stack 2: 0x52C
- stack 1: 0x2
- stack 0: 0xA0
1529	 209	MSTORE		 	  ;; # store to x5
- stack 0: 0x52C
1530	 20A	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1531	 20C	ADD		 	 
- stack 0: 0x530
1532	 20D	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1533	 20E	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x213FFE00103000D015F0000008600000095016600B400010255000001790000
1534	 20F	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x213FFE00103000D015F0000008600000095016600B400010255000001790000
- stack 0: 0xF0
1535	 211	SHR		 	 
- stack 1: 0x530
- stack 0: 0x213
1536	 212	JUMP		 	 
- stack 0: 0x530
1537	 213	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x530
1538	 214	PUSH2	0080	 	 
- stack 1: 0x530
- stack 0: 0x80
1539	 217	MLOAD		 	  ;; # read from x4
- stack 1: 0x530
- stack 0: 0x1
1540	 218	PUSH4	FFFFFFFF	 	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1541	 21D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x530
- stack 0: 0x1
1542	 21E	PUSH2	00A0	 	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0xA0
1543	 221	MLOAD		 	  ;; # read from x5
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x2
1544	 222	PUSH4	FFFFFFFF	 	 
- stack 3: 0x530
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1545	 227	AND		 	  ;; # mask to 32 bits
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x2
1546	 228	SUB		 	 
- stack 1: 0x530
- stack 0: 0x1
1547	 229	PUSH2	0231	 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x231
1548	 22C	JUMPI		 	 
- stack 0: 0x530
1549	 231	JUMPDEST		 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 0: 0x530
1550	 232	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1551	 233	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x213FFE00103000D015F0000008600000095016600B400010255000001790000
1552	 234	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x213FFE00103000D015F0000008600000095016600B400010255000001790000
- stack 0: 0xE0
1553	 236	SHR		 	 
- stack 1: 0x530
- stack 0: 0x213FFE0
1554	 237	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x213FFE0
- stack 0: 0xFFFF
1555	 23A	AND		 	 
- stack 1: 0x530
- stack 0: 0xFFE0
1556	 23B	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0xFFE0
- stack 0: 0x1
1557	 23D	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1558	 23E	ADD		 	 
- stack 0: 0x510
1559	 23F	PUSH4	FFFFFFFF	 	 
- stack 1: 0x510
- stack 0: 0xFFFFFFFF
1560	 244	AND		 	  ;; # mask to 32 bits
- stack 0: 0x510
1561	 245	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1562	 246	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x8600000095019100B400010179000000E9FFF00198013801DA000101F90002
1563	 247	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x8600000095019100B400010179000000E9FFF00198013801DA000101F90002
- stack 0: 0xF0
1564	 249	SHR		 	 
- stack 1: 0x510
- stack 0: 0x86
1565	 24A	JUMP		 	 
- stack 0: 0x510
1566	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x510
1567	 87	DUP1		 	 
- stack 1: 0x510
- stack 0: 0x510
1568	 88	PUSH2	0020	 	 
- stack 2: 0x510
- stack 1: 0x510
- stack 0: 0x20
1569	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x510
1570	 8C	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1571	 8E	ADD		 	 
- stack 0: 0x514
1572	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1573	 90	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x95019100B400010179000000E9FFF00198013801DA000101F900020213FFE0
1574	 91	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x95019100B400010179000000E9FFF00198013801DA000101F900020213FFE0
- stack 0: 0xF0
1575	 93	SHR		 	 
- stack 1: 0x514
- stack 0: 0x95
1576	 94	JUMP		 	 
- stack 0: 0x514
1577	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x514
1578	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1579	 97	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x95019100B400010179000000E9FFF00198013801DA000101F900020213FFE0
1580	 98	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x95019100B400010179000000E9FFF00198013801DA000101F900020213FFE0
- stack 0: 0xE0
1581	 9A	SHR		 	 
- stack 1: 0x514
- stack 0: 0x950191
1582	 9B	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x950191
- stack 0: 0xFFFF
1583	 9E	AND		 	 
- stack 1: 0x514
- stack 0: 0x191
1584	 9F	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x191
- stack 0: 0x1
1585	 A1	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x191
1586	 A2	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0x191
- stack 0: 0x20
1587	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x514
- stack 1: 0x191
- stack 0: 0x510
1588	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x514
- stack 0: 0x6A1
1589	 A7	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0x6A1
- stack 0: 0x20
1590	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x514
1591	 AB	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1592	 AD	ADD		 	 
- stack 0: 0x518
1593	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1594	 AF	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xB400010179000000E9FFF00198013801DA000101F900020213FFE00103000D
1595	 B0	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0xB400010179000000E9FFF00198013801DA000101F900020213FFE00103000D
- stack 0: 0xF0
1596	 B2	SHR		 	 
- stack 1: 0x518
- stack 0: 0xB4
1597	 B3	JUMP		 	 
- stack 0: 0x518
1598	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x518
1599	 B5	PUSH2	0020	 	 
- stack 1: 0x518
- stack 0: 0x20
1600	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x518
- stack 0: 0x6A1
1601	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
1602	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x6A1
1603	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0x518
1604	 C0	MLOAD		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0xB400010179000000E9FFF00198013801DA000101F900020213FFE00103000D
1605	 C1	PUSH1	E0	 	 
- stack 3: 0x518
- stack 2: 0x6A1
- stack 1: 0xB400010179000000E9FFF00198013801DA000101F900020213FFE00103000D
- stack 0: 0xE0
1606	 C3	SHR		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0xB40001
1607	 C4	PUSH2	FFFF	 	 
- stack 3: 0x518
- stack 2: 0x6A1
- stack 1: 0xB40001
- stack 0: 0xFFFF
1608	 C7	AND		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0x1
1609	 C8	PUSH1	01	 	 
- stack 3: 0x518
- stack 2: 0x6A1
- stack 1: 0x1
- stack 0: 0x1
1610	 CA	SIGNEXTEND		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0x1
1611	 CB	ADD		 	 
- stack 1: 0x518
- stack 0: 0x6A2
1612	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
1613	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x6A2
1614	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x518
- stack 1: 0x6A2
- stack 0: 0x3
1615	 D4	XOR		 	 
- stack 1: 0x518
- stack 0: 0x6A1
1616	 D5	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xF000FF0000000000000000000000000000000000000000000000000000000000
1617	 D6	PUSH1	F8	 	 
- stack 2: 0x518
- stack 1: 0xF000FF0000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
1618	 D8	SHR		 	 
- stack 1: 0x518
- stack 0: 0xF0
1619	 D9	PUSH1	00	 	 
- stack 2: 0x518
- stack 1: 0xF0
- stack 0: 0x0
1620	 DB	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1621	 DC	PUSH2	0060	 	 
- stack 2: 0x518
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x60
1622	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x518
1623	 E0	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1624	 E2	ADD		 	 
- stack 0: 0x51C
1625	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1626	 E4	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x179000000E9FFF00198013801DA000101F900020213FFE00103000D015F0000
1627	 E5	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x179000000E9FFF00198013801DA000101F900020213FFE00103000D015F0000
- stack 0: 0xF0
1628	 E7	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x179
1629	 E8	JUMP		 	 
- stack 0: 0x51C
1630	 179	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x51C
1631	 17A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1632	 17B	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x179000000E9FFF00198013801DA000101F900020213FFE00103000D015F0000
1633	 17C	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x179000000E9FFF00198013801DA000101F900020213FFE00103000D015F0000
- stack 0: 0xE0
1634	 17E	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x1790000
1635	 17F	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x1790000
- stack 0: 0xFFFF
1636	 182	AND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1637	 183	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x1
1638	 185	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1639	 186	PUSH2	0060	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x60
1640	 189	MLOAD		 	  ;; # read from x3
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1641	 18A	ADD		 	  ;; # ADDI 3
- stack 1: 0x51C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1642	 18B	PUSH2	00C0	 	 
- stack 2: 0x51C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xC0
1643	 18E	MSTORE		 	  ;; # store to x6
- stack 0: 0x51C
1644	 18F	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1645	 191	ADD		 	 
- stack 0: 0x520
1646	 192	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1647	 193	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xE9FFF00198013801DA000101F900020213FFE00103000D015F000000860000
1648	 194	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0xE9FFF00198013801DA000101F900020213FFE00103000D015F000000860000
- stack 0: 0xF0
1649	 196	SHR		 	 
- stack 1: 0x520
- stack 0: 0xE9
1650	 197	JUMP		 	 
- stack 0: 0x520
1651	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x520
1652	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1653	 EB	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xE9FFF00198013801DA000101F900020213FFE00103000D015F000000860000
1654	 EC	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0xE9FFF00198013801DA000101F900020213FFE00103000D015F000000860000
- stack 0: 0xE0
1655	 EE	SHR		 	 
- stack 1: 0x520
- stack 0: 0xE9FFF0
1656	 EF	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0xE9FFF0
- stack 0: 0xFFFF
1657	 F2	AND		 	 
- stack 1: 0x520
- stack 0: 0xFFF0
1658	 F3	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0xFFF0
- stack 0: 0x1
1659	 F5	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1660	 F6	PUSH2	03A0	 	 
- stack 2: 0x520
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
1661	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x520
1662	 FA	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1663	 FC	ADD		 	 
- stack 0: 0x524
1664	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1665	 FE	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x198013801DA000101F900020213FFE00103000D015F00000086000000950166
1666	 FF	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x198013801DA000101F900020213FFE00103000D015F00000086000000950166
- stack 0: 0xF0
1667	 101	SHR		 	 
- stack 1: 0x524
- stack 0: 0x198
1668	 102	JUMP		 	 
- stack 0: 0x524
1669	 198	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,138(ignore imm)
- stack 0: 0x524
1670	 199	PUSH2	00C0	 	 
- stack 1: 0x524
- stack 0: 0xC0
1671	 19C	MLOAD		 	  ;; # read from x6
- stack 1: 0x524
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1672	 19D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x524
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFFFFFFF
1673	 1A2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x524
- stack 0: 0xFFFFFFF0
1674	 1A3	PUSH2	03A0	 	 
- stack 2: 0x524
- stack 1: 0xFFFFFFF0
- stack 0: 0x3A0
1675	 1A6	MLOAD		 	  ;; # read from x29
- stack 2: 0x524
- stack 1: 0xFFFFFFF0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1676	 1A7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x524
- stack 2: 0xFFFFFFF0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFFFFFFF
1677	 1AC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x524
- stack 1: 0xFFFFFFF0
- stack 0: 0xFFFFFFF0
1678	 1AD	SUB		 	 
- stack 1: 0x524
- stack 0: 0x0
1679	 1AE	PUSH2	01B6	 ;; _neq_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x1B6
1680	 1B1	JUMPI		 	 
- stack 0: 0x524
1681	 1B2	PUSH2	01D0	 ;; _neq_after_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 1: 0x524
- stack 0: 0x1D0
1682	 1B5	JUMP		 	 
- stack 0: 0x524
1683	 1D0	JUMPDEST		 ;; _neq_after_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 0: 0x524
1684	 1D1	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1685	 1D3	ADD		 	 
- stack 0: 0x528
1686	 1D4	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1687	 1D5	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1DA000101F900020213FFE00103000D015F0000008600000095016600B40001
1688	 1D6	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x1DA000101F900020213FFE00103000D015F0000008600000095016600B40001
- stack 0: 0xF0
1689	 1D8	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1DA
1690	 1D9	JUMP		 	 
- stack 0: 0x528
1691	 1DA	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x528
1692	 1DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1693	 1DC	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1DA000101F900020213FFE00103000D015F0000008600000095016600B40001
1694	 1DD	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x1DA000101F900020213FFE00103000D015F0000008600000095016600B40001
- stack 0: 0xE0
1695	 1DF	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1DA0001
1696	 1E0	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x1DA0001
- stack 0: 0xFFFF
1697	 1E3	AND		 	 
- stack 1: 0x528
- stack 0: 0x1
1698	 1E4	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x1
1699	 1E6	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0x1
1700	 1E7	PUSH2	0080	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x80
1701	 1EA	MLOAD		 	  ;; # read from x4
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x1
1702	 1EB	ADD		 	  ;; # ADDI 4
- stack 1: 0x528
- stack 0: 0x2
1703	 1EC	PUSH2	0080	 	 
- stack 2: 0x528
- stack 1: 0x2
- stack 0: 0x80
1704	 1EF	MSTORE		 	  ;; # store to x4
- stack 0: 0x528
1705	 1F0	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1706	 1F2	ADD		 	 
- stack 0: 0x52C
1707	 1F3	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1708	 1F4	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x1F900020213FFE00103000D015F0000008600000095016600B4000102550000
1709	 1F5	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x1F900020213FFE00103000D015F0000008600000095016600B4000102550000
- stack 0: 0xF0
1710	 1F7	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1F9
1711	 1F8	JUMP		 	 
- stack 0: 0x52C
1712	 1F9	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x52C
1713	 1FA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1714	 1FB	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x1F900020213FFE00103000D015F0000008600000095016600B4000102550000
1715	 1FC	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0x1F900020213FFE00103000D015F0000008600000095016600B4000102550000
- stack 0: 0xE0
1716	 1FE	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1F90002
1717	 1FF	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0x1F90002
- stack 0: 0xFFFF
1718	 202	AND		 	 
- stack 1: 0x52C
- stack 0: 0x2
1719	 203	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x2
- stack 0: 0x1
1720	 205	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x2
1721	 206	PUSH2	00A0	 	 
- stack 2: 0x52C
- stack 1: 0x2
- stack 0: 0xA0
1722	 209	MSTORE		 	  ;; # store to x5
- stack 0: 0x52C
1723	 20A	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1724	 20C	ADD		 	 
- stack 0: 0x530
1725	 20D	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1726	 20E	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x213FFE00103000D015F0000008600000095016600B400010255000001790000
1727	 20F	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x213FFE00103000D015F0000008600000095016600B400010255000001790000
- stack 0: 0xF0
1728	 211	SHR		 	 
- stack 1: 0x530
- stack 0: 0x213
1729	 212	JUMP		 	 
- stack 0: 0x530
1730	 213	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x530
1731	 214	PUSH2	0080	 	 
- stack 1: 0x530
- stack 0: 0x80
1732	 217	MLOAD		 	  ;; # read from x4
- stack 1: 0x530
- stack 0: 0x2
1733	 218	PUSH4	FFFFFFFF	 	 
- stack 2: 0x530
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1734	 21D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x530
- stack 0: 0x2
1735	 21E	PUSH2	00A0	 	 
- stack 2: 0x530
- stack 1: 0x2
- stack 0: 0xA0
1736	 221	MLOAD		 	  ;; # read from x5
- stack 2: 0x530
- stack 1: 0x2
- stack 0: 0x2
1737	 222	PUSH4	FFFFFFFF	 	 
- stack 3: 0x530
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1738	 227	AND		 	  ;; # mask to 32 bits
- stack 2: 0x530
- stack 1: 0x2
- stack 0: 0x2
1739	 228	SUB		 	 
- stack 1: 0x530
- stack 0: 0x0
1740	 229	PUSH2	0231	 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0x231
1741	 22C	JUMPI		 	 
- stack 0: 0x530
1742	 22D	PUSH2	024B	 ;; _neq_after_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 1: 0x530
- stack 0: 0x24B
1743	 230	JUMP		 	 
- stack 0: 0x530
1744	 24B	JUMPDEST		 ;; _neq_after_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 0: 0x530
1745	 24C	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1746	 24E	ADD		 	 
- stack 0: 0x534
1747	 24F	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1748	 250	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x103000D015F0000008600000095016600B40001025500000179000000E9000F
1749	 251	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x103000D015F0000008600000095016600B40001025500000179000000E9000F
- stack 0: 0xF0
1750	 253	SHR		 	 
- stack 1: 0x534
- stack 0: 0x103
1751	 254	JUMP		 	 
- stack 0: 0x534
1752	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x534
1753	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1754	 105	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x103000D015F0000008600000095016600B40001025500000179000000E9000F
1755	 106	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x103000D015F0000008600000095016600B40001025500000179000000E9000F
- stack 0: 0xE0
1756	 108	SHR		 	 
- stack 1: 0x534
- stack 0: 0x103000D
1757	 109	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x103000D
- stack 0: 0xFFFF
1758	 10C	AND		 	 
- stack 1: 0x534
- stack 0: 0xD
1759	 10D	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0xD
- stack 0: 0x1
1760	 10F	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0xD
1761	 110	PUSH2	0380	 	 
- stack 2: 0x534
- stack 1: 0xD
- stack 0: 0x380
1762	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x534
1763	 114	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1764	 116	ADD		 	 
- stack 0: 0x538
1765	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1766	 118	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x15F0000008600000095016600B40001025500000179000000E9000F01980108
1767	 119	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x15F0000008600000095016600B40001025500000179000000E9000F01980108
- stack 0: 0xF0
1768	 11B	SHR		 	 
- stack 1: 0x538
- stack 0: 0x15F
1769	 11C	JUMP		 	 
- stack 0: 0x538
1770	 15F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x538
1771	 160	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1772	 161	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x15F0000008600000095016600B40001025500000179000000E9000F01980108
1773	 162	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x15F0000008600000095016600B40001025500000179000000E9000F01980108
- stack 0: 0xE0
1774	 164	SHR		 	 
- stack 1: 0x538
- stack 0: 0x15F0000
1775	 165	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x15F0000
- stack 0: 0xFFFF
1776	 168	AND		 	 
- stack 1: 0x538
- stack 0: 0x0
1777	 169	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x1
1778	 16B	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0x0
1779	 16C	PUSH2	0080	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x80
1780	 16F	MSTORE		 	  ;; # store to x4
- stack 0: 0x538
1781	 170	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1782	 172	ADD		 	 
- stack 0: 0x53C
1783	 173	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1784	 174	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x8600000095016600B40001025500000179000000E9000F0198010801DA0001
1785	 175	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x8600000095016600B40001025500000179000000E9000F0198010801DA0001
- stack 0: 0xF0
1786	 177	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x86
1787	 178	JUMP		 	 
- stack 0: 0x53C
1788	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x53C
1789	 87	DUP1		 	 
- stack 1: 0x53C
- stack 0: 0x53C
1790	 88	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0x53C
- stack 0: 0x20
1791	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
1792	 8C	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1793	 8E	ADD		 	 
- stack 0: 0x540
1794	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1795	 90	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x95016600B40001025500000179000000E9000F0198010801DA000101F90002
1796	 91	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x95016600B40001025500000179000000E9000F0198010801DA000101F90002
- stack 0: 0xF0
1797	 93	SHR		 	 
- stack 1: 0x540
- stack 0: 0x95
1798	 94	JUMP		 	 
- stack 0: 0x540
1799	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x540
1800	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1801	 97	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x95016600B40001025500000179000000E9000F0198010801DA000101F90002
1802	 98	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x95016600B40001025500000179000000E9000F0198010801DA000101F90002
- stack 0: 0xE0
1803	 9A	SHR		 	 
- stack 1: 0x540
- stack 0: 0x950166
1804	 9B	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x950166
- stack 0: 0xFFFF
1805	 9E	AND		 	 
- stack 1: 0x540
- stack 0: 0x166
1806	 9F	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0x166
- stack 0: 0x1
1807	 A1	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0x166
1808	 A2	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0x166
- stack 0: 0x20
1809	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x540
- stack 1: 0x166
- stack 0: 0x53C
1810	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x540
- stack 0: 0x6A2
1811	 A7	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0x6A2
- stack 0: 0x20
1812	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
1813	 AB	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1814	 AD	ADD		 	 
- stack 0: 0x544
1815	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1816	 AF	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xB40001025500000179000000E9000F0198010801DA000101F900020213FFDC
1817	 B0	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0xB40001025500000179000000E9000F0198010801DA000101F900020213FFDC
- stack 0: 0xF0
1818	 B2	SHR		 	 
- stack 1: 0x544
- stack 0: 0xB4
1819	 B3	JUMP		 	 
- stack 0: 0x544
1820	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x544
1821	 B5	PUSH2	0020	 	 
- stack 1: 0x544
- stack 0: 0x20
1822	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x544
- stack 0: 0x6A2
1823	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
1824	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0x6A2
1825	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0x544
1826	 C0	MLOAD		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0xB40001025500000179000000E9000F0198010801DA000101F900020213FFDC
1827	 C1	PUSH1	E0	 	 
- stack 3: 0x544
- stack 2: 0x6A2
- stack 1: 0xB40001025500000179000000E9000F0198010801DA000101F900020213FFDC
- stack 0: 0xE0
1828	 C3	SHR		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0xB40001
1829	 C4	PUSH2	FFFF	 	 
- stack 3: 0x544
- stack 2: 0x6A2
- stack 1: 0xB40001
- stack 0: 0xFFFF
1830	 C7	AND		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0x1
1831	 C8	PUSH1	01	 	 
- stack 3: 0x544
- stack 2: 0x6A2
- stack 1: 0x1
- stack 0: 0x1
1832	 CA	SIGNEXTEND		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0x1
1833	 CB	ADD		 	 
- stack 1: 0x544
- stack 0: 0x6A3
1834	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
1835	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0x6A3
1836	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x544
- stack 1: 0x6A3
- stack 0: 0x3
1837	 D4	XOR		 	 
- stack 1: 0x544
- stack 0: 0x6A0
1838	 D5	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xFF000FF00000000000000000000000000000000000000000000000000000000
1839	 D6	PUSH1	F8	 	 
- stack 2: 0x544
- stack 1: 0xFF000FF00000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
1840	 D8	SHR		 	 
- stack 1: 0x544
- stack 0: 0xF
1841	 D9	PUSH1	00	 	 
- stack 2: 0x544
- stack 1: 0xF
- stack 0: 0x0
1842	 DB	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0xF
1843	 DC	PUSH2	0060	 	 
- stack 2: 0x544
- stack 1: 0xF
- stack 0: 0x60
1844	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x544
1845	 E0	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1846	 E2	ADD		 	 
- stack 0: 0x548
1847	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1848	 E4	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x25500000179000000E9000F0198010801DA000101F900020213FFDC0103000E
1849	 E5	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x25500000179000000E9000F0198010801DA000101F900020213FFDC0103000E
- stack 0: 0xF0
1850	 E7	SHR		 	 
- stack 1: 0x548
- stack 0: 0x255
1851	 E8	JUMP		 	 
- stack 0: 0x548
1852	 255	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x548
1853	 256	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1854	 257	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x25500000179000000E9000F0198010801DA000101F900020213FFDC0103000E
1855	 258	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x25500000179000000E9000F0198010801DA000101F900020213FFDC0103000E
- stack 0: 0xE0
1856	 25A	SHR		 	 
- stack 1: 0x548
- stack 0: 0x2550000
1857	 25B	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x2550000
- stack 0: 0xFFFF
1858	 25E	AND		 	 
- stack 1: 0x548
- stack 0: 0x0
1859	 25F	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x0
- stack 0: 0x1
1860	 261	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x0
1861	 262	POP		 	 
- stack 0: 0x548
1862	 263	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1863	 265	ADD		 	 
- stack 0: 0x54C
1864	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1865	 267	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x179000000E9000F0198010801DA000101F900020213FFDC0103000E015F0000
1866	 268	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x179000000E9000F0198010801DA000101F900020213FFDC0103000E015F0000
- stack 0: 0xF0
1867	 26A	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x179
1868	 26B	JUMP		 	 
- stack 0: 0x54C
1869	 179	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x54C
1870	 17A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1871	 17B	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x179000000E9000F0198010801DA000101F900020213FFDC0103000E015F0000
1872	 17C	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x179000000E9000F0198010801DA000101F900020213FFDC0103000E015F0000
- stack 0: 0xE0
1873	 17E	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1790000
1874	 17F	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x1790000
- stack 0: 0xFFFF
1875	 182	AND		 	 
- stack 1: 0x54C
- stack 0: 0x0
1876	 183	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x1
1877	 185	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x0
1878	 186	PUSH2	0060	 	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x60
1879	 189	MLOAD		 	  ;; # read from x3
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0xF
1880	 18A	ADD		 	  ;; # ADDI 3
- stack 1: 0x54C
- stack 0: 0xF
1881	 18B	PUSH2	00C0	 	 
- stack 2: 0x54C
- stack 1: 0xF
- stack 0: 0xC0
1882	 18E	MSTORE		 	  ;; # store to x6
- stack 0: 0x54C
1883	 18F	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1884	 191	ADD		 	 
- stack 0: 0x550
1885	 192	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1886	 193	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xE9000F0198010801DA000101F900020213FFDC0103000E015F000000860000
1887	 194	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0xE9000F0198010801DA000101F900020213FFDC0103000E015F000000860000
- stack 0: 0xF0
1888	 196	SHR		 	 
- stack 1: 0x550
- stack 0: 0xE9
1889	 197	JUMP		 	 
- stack 0: 0x550
1890	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x550
1891	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1892	 EB	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xE9000F0198010801DA000101F900020213FFDC0103000E015F000000860000
1893	 EC	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0xE9000F0198010801DA000101F900020213FFDC0103000E015F000000860000
- stack 0: 0xE0
1894	 EE	SHR		 	 
- stack 1: 0x550
- stack 0: 0xE9000F
1895	 EF	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0xE9000F
- stack 0: 0xFFFF
1896	 F2	AND		 	 
- stack 1: 0x550
- stack 0: 0xF
1897	 F3	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0xF
- stack 0: 0x1
1898	 F5	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xF
1899	 F6	PUSH2	03A0	 	 
- stack 2: 0x550
- stack 1: 0xF
- stack 0: 0x3A0
1900	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x550
1901	 FA	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1902	 FC	ADD		 	 
- stack 0: 0x554
1903	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1904	 FE	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x198010801DA000101F900020213FFDC0103000E015F00000086000000950134
1905	 FF	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x198010801DA000101F900020213FFDC0103000E015F00000086000000950134
- stack 0: 0xF0
1906	 101	SHR		 	 
- stack 1: 0x554
- stack 0: 0x198
1907	 102	JUMP		 	 
- stack 0: 0x554
1908	 198	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,138(ignore imm)
- stack 0: 0x554
1909	 199	PUSH2	00C0	 	 
- stack 1: 0x554
- stack 0: 0xC0
1910	 19C	MLOAD		 	  ;; # read from x6
- stack 1: 0x554
- stack 0: 0xF
1911	 19D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
1912	 1A2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x554
- stack 0: 0xF
1913	 1A3	PUSH2	03A0	 	 
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0x3A0
1914	 1A6	MLOAD		 	  ;; # read from x29
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0xF
1915	 1A7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x554
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
1916	 1AC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0xF
1917	 1AD	SUB		 	 
- stack 1: 0x554
- stack 0: 0x0
1918	 1AE	PUSH2	01B6	 ;; _neq_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1B6
1919	 1B1	JUMPI		 	 
- stack 0: 0x554
1920	 1B2	PUSH2	01D0	 ;; _neq_after_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 1: 0x554
- stack 0: 0x1D0
1921	 1B5	JUMP		 	 
- stack 0: 0x554
1922	 1D0	JUMPDEST		 ;; _neq_after_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 0: 0x554
1923	 1D1	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1924	 1D3	ADD		 	 
- stack 0: 0x558
1925	 1D4	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1926	 1D5	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1DA000101F900020213FFDC0103000E015F0000008600000095013400B40001
1927	 1D6	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x1DA000101F900020213FFDC0103000E015F0000008600000095013400B40001
- stack 0: 0xF0
1928	 1D8	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1DA
1929	 1D9	JUMP		 	 
- stack 0: 0x558
1930	 1DA	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x558
1931	 1DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1932	 1DC	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1DA000101F900020213FFDC0103000E015F0000008600000095013400B40001
1933	 1DD	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x1DA000101F900020213FFDC0103000E015F0000008600000095013400B40001
- stack 0: 0xE0
1934	 1DF	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1DA0001
1935	 1E0	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x1DA0001
- stack 0: 0xFFFF
1936	 1E3	AND		 	 
- stack 1: 0x558
- stack 0: 0x1
1937	 1E4	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x1
1938	 1E6	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x1
1939	 1E7	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x80
1940	 1EA	MLOAD		 	  ;; # read from x4
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x0
1941	 1EB	ADD		 	  ;; # ADDI 4
- stack 1: 0x558
- stack 0: 0x1
1942	 1EC	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x80
1943	 1EF	MSTORE		 	  ;; # store to x4
- stack 0: 0x558
1944	 1F0	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1945	 1F2	ADD		 	 
- stack 0: 0x55C
1946	 1F3	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1947	 1F4	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1F900020213FFDC0103000E015F0000008600000095013400B4000102550000
1948	 1F5	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x1F900020213FFDC0103000E015F0000008600000095013400B4000102550000
- stack 0: 0xF0
1949	 1F7	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1F9
1950	 1F8	JUMP		 	 
- stack 0: 0x55C
1951	 1F9	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x55C
1952	 1FA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1953	 1FB	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1F900020213FFDC0103000E015F0000008600000095013400B4000102550000
1954	 1FC	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x1F900020213FFDC0103000E015F0000008600000095013400B4000102550000
- stack 0: 0xE0
1955	 1FE	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1F90002
1956	 1FF	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x1F90002
- stack 0: 0xFFFF
1957	 202	AND		 	 
- stack 1: 0x55C
- stack 0: 0x2
1958	 203	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0x1
1959	 205	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x2
1960	 206	PUSH2	00A0	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0xA0
1961	 209	MSTORE		 	  ;; # store to x5
- stack 0: 0x55C
1962	 20A	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1963	 20C	ADD		 	 
- stack 0: 0x560
1964	 20D	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1965	 20E	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x213FFDC0103000E015F0000008600000095013400B400010255000002550000
1966	 20F	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x213FFDC0103000E015F0000008600000095013400B400010255000002550000
- stack 0: 0xF0
1967	 211	SHR		 	 
- stack 1: 0x560
- stack 0: 0x213
1968	 212	JUMP		 	 
- stack 0: 0x560
1969	 213	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x560
1970	 214	PUSH2	0080	 	 
- stack 1: 0x560
- stack 0: 0x80
1971	 217	MLOAD		 	  ;; # read from x4
- stack 1: 0x560
- stack 0: 0x1
1972	 218	PUSH4	FFFFFFFF	 	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1973	 21D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x560
- stack 0: 0x1
1974	 21E	PUSH2	00A0	 	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0xA0
1975	 221	MLOAD		 	  ;; # read from x5
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x2
1976	 222	PUSH4	FFFFFFFF	 	 
- stack 3: 0x560
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1977	 227	AND		 	  ;; # mask to 32 bits
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x2
1978	 228	SUB		 	 
- stack 1: 0x560
- stack 0: 0x1
1979	 229	PUSH2	0231	 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x231
1980	 22C	JUMPI		 	 
- stack 0: 0x560
1981	 231	JUMPDEST		 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 0: 0x560
1982	 232	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1983	 233	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x213FFDC0103000E015F0000008600000095013400B400010255000002550000
1984	 234	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x213FFDC0103000E015F0000008600000095013400B400010255000002550000
- stack 0: 0xE0
1985	 236	SHR		 	 
- stack 1: 0x560
- stack 0: 0x213FFDC
1986	 237	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x213FFDC
- stack 0: 0xFFFF
1987	 23A	AND		 	 
- stack 1: 0x560
- stack 0: 0xFFDC
1988	 23B	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0xFFDC
- stack 0: 0x1
1989	 23D	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
1990	 23E	ADD		 	 
- stack 0: 0x53C
1991	 23F	PUSH4	FFFFFFFF	 	 
- stack 1: 0x53C
- stack 0: 0xFFFFFFFF
1992	 244	AND		 	  ;; # mask to 32 bits
- stack 0: 0x53C
1993	 245	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1994	 246	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x8600000095016600B40001025500000179000000E9000F0198010801DA0001
1995	 247	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x8600000095016600B40001025500000179000000E9000F0198010801DA0001
- stack 0: 0xF0
1996	 249	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x86
1997	 24A	JUMP		 	 
- stack 0: 0x53C
1998	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x53C
1999	 87	DUP1		 	 
- stack 1: 0x53C
- stack 0: 0x53C
2000	 88	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0x53C
- stack 0: 0x20
2001	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
2002	 8C	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
2003	 8E	ADD		 	 
- stack 0: 0x540
2004	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
2005	 90	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x95016600B40001025500000179000000E9000F0198010801DA000101F90002
2006	 91	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x95016600B40001025500000179000000E9000F0198010801DA000101F90002
- stack 0: 0xF0
2007	 93	SHR		 	 
- stack 1: 0x540
- stack 0: 0x95
2008	 94	JUMP		 	 
- stack 0: 0x540
2009	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x540
2010	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
2011	 97	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x95016600B40001025500000179000000E9000F0198010801DA000101F90002
2012	 98	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x95016600B40001025500000179000000E9000F0198010801DA000101F90002
- stack 0: 0xE0
2013	 9A	SHR		 	 
- stack 1: 0x540
- stack 0: 0x950166
2014	 9B	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x950166
- stack 0: 0xFFFF
2015	 9E	AND		 	 
- stack 1: 0x540
- stack 0: 0x166
2016	 9F	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0x166
- stack 0: 0x1
2017	 A1	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0x166
2018	 A2	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0x166
- stack 0: 0x20
2019	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x540
- stack 1: 0x166
- stack 0: 0x53C
2020	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x540
- stack 0: 0x6A2
2021	 A7	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0x6A2
- stack 0: 0x20
2022	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
2023	 AB	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
2024	 AD	ADD		 	 
- stack 0: 0x544
2025	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
2026	 AF	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xB40001025500000179000000E9000F0198010801DA000101F900020213FFDC
2027	 B0	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0xB40001025500000179000000E9000F0198010801DA000101F900020213FFDC
- stack 0: 0xF0
2028	 B2	SHR		 	 
- stack 1: 0x544
- stack 0: 0xB4
2029	 B3	JUMP		 	 
- stack 0: 0x544
2030	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x544
2031	 B5	PUSH2	0020	 	 
- stack 1: 0x544
- stack 0: 0x20
2032	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x544
- stack 0: 0x6A2
2033	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
2034	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0x6A2
2035	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0x544
2036	 C0	MLOAD		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0xB40001025500000179000000E9000F0198010801DA000101F900020213FFDC
2037	 C1	PUSH1	E0	 	 
- stack 3: 0x544
- stack 2: 0x6A2
- stack 1: 0xB40001025500000179000000E9000F0198010801DA000101F900020213FFDC
- stack 0: 0xE0
2038	 C3	SHR		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0xB40001
2039	 C4	PUSH2	FFFF	 	 
- stack 3: 0x544
- stack 2: 0x6A2
- stack 1: 0xB40001
- stack 0: 0xFFFF
2040	 C7	AND		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0x1
2041	 C8	PUSH1	01	 	 
- stack 3: 0x544
- stack 2: 0x6A2
- stack 1: 0x1
- stack 0: 0x1
2042	 CA	SIGNEXTEND		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0x1
2043	 CB	ADD		 	 
- stack 1: 0x544
- stack 0: 0x6A3
2044	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
2045	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0x6A3
2046	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x544
- stack 1: 0x6A3
- stack 0: 0x3
2047	 D4	XOR		 	 
- stack 1: 0x544
- stack 0: 0x6A0
2048	 D5	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xFF000FF00000000000000000000000000000000000000000000000000000000
2049	 D6	PUSH1	F8	 	 
- stack 2: 0x544
- stack 1: 0xFF000FF00000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
2050	 D8	SHR		 	 
- stack 1: 0x544
- stack 0: 0xF
2051	 D9	PUSH1	00	 	 
- stack 2: 0x544
- stack 1: 0xF
- stack 0: 0x0
2052	 DB	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0xF
2053	 DC	PUSH2	0060	 	 
- stack 2: 0x544
- stack 1: 0xF
- stack 0: 0x60
2054	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x544
2055	 E0	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
2056	 E2	ADD		 	 
- stack 0: 0x548
2057	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
2058	 E4	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x25500000179000000E9000F0198010801DA000101F900020213FFDC0103000E
2059	 E5	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x25500000179000000E9000F0198010801DA000101F900020213FFDC0103000E
- stack 0: 0xF0
2060	 E7	SHR		 	 
- stack 1: 0x548
- stack 0: 0x255
2061	 E8	JUMP		 	 
- stack 0: 0x548
2062	 255	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x548
2063	 256	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
2064	 257	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x25500000179000000E9000F0198010801DA000101F900020213FFDC0103000E
2065	 258	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x25500000179000000E9000F0198010801DA000101F900020213FFDC0103000E
- stack 0: 0xE0
2066	 25A	SHR		 	 
- stack 1: 0x548
- stack 0: 0x2550000
2067	 25B	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x2550000
- stack 0: 0xFFFF
2068	 25E	AND		 	 
- stack 1: 0x548
- stack 0: 0x0
2069	 25F	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x0
- stack 0: 0x1
2070	 261	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x0
2071	 262	POP		 	 
- stack 0: 0x548
2072	 263	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
2073	 265	ADD		 	 
- stack 0: 0x54C
2074	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
2075	 267	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x179000000E9000F0198010801DA000101F900020213FFDC0103000E015F0000
2076	 268	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x179000000E9000F0198010801DA000101F900020213FFDC0103000E015F0000
- stack 0: 0xF0
2077	 26A	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x179
2078	 26B	JUMP		 	 
- stack 0: 0x54C
2079	 179	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x54C
2080	 17A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
2081	 17B	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x179000000E9000F0198010801DA000101F900020213FFDC0103000E015F0000
2082	 17C	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x179000000E9000F0198010801DA000101F900020213FFDC0103000E015F0000
- stack 0: 0xE0
2083	 17E	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1790000
2084	 17F	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x1790000
- stack 0: 0xFFFF
2085	 182	AND		 	 
- stack 1: 0x54C
- stack 0: 0x0
2086	 183	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x1
2087	 185	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x0
2088	 186	PUSH2	0060	 	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x60
2089	 189	MLOAD		 	  ;; # read from x3
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0xF
2090	 18A	ADD		 	  ;; # ADDI 3
- stack 1: 0x54C
- stack 0: 0xF
2091	 18B	PUSH2	00C0	 	 
- stack 2: 0x54C
- stack 1: 0xF
- stack 0: 0xC0
2092	 18E	MSTORE		 	  ;; # store to x6
- stack 0: 0x54C
2093	 18F	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
2094	 191	ADD		 	 
- stack 0: 0x550
2095	 192	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
2096	 193	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xE9000F0198010801DA000101F900020213FFDC0103000E015F000000860000
2097	 194	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0xE9000F0198010801DA000101F900020213FFDC0103000E015F000000860000
- stack 0: 0xF0
2098	 196	SHR		 	 
- stack 1: 0x550
- stack 0: 0xE9
2099	 197	JUMP		 	 
- stack 0: 0x550
2100	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x550
2101	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
2102	 EB	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xE9000F0198010801DA000101F900020213FFDC0103000E015F000000860000
2103	 EC	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0xE9000F0198010801DA000101F900020213FFDC0103000E015F000000860000
- stack 0: 0xE0
2104	 EE	SHR		 	 
- stack 1: 0x550
- stack 0: 0xE9000F
2105	 EF	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0xE9000F
- stack 0: 0xFFFF
2106	 F2	AND		 	 
- stack 1: 0x550
- stack 0: 0xF
2107	 F3	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0xF
- stack 0: 0x1
2108	 F5	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xF
2109	 F6	PUSH2	03A0	 	 
- stack 2: 0x550
- stack 1: 0xF
- stack 0: 0x3A0
2110	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x550
2111	 FA	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
2112	 FC	ADD		 	 
- stack 0: 0x554
2113	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
2114	 FE	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x198010801DA000101F900020213FFDC0103000E015F00000086000000950134
2115	 FF	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x198010801DA000101F900020213FFDC0103000E015F00000086000000950134
- stack 0: 0xF0
2116	 101	SHR		 	 
- stack 1: 0x554
- stack 0: 0x198
2117	 102	JUMP		 	 
- stack 0: 0x554
2118	 198	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,138(ignore imm)
- stack 0: 0x554
2119	 199	PUSH2	00C0	 	 
- stack 1: 0x554
- stack 0: 0xC0
2120	 19C	MLOAD		 	  ;; # read from x6
- stack 1: 0x554
- stack 0: 0xF
2121	 19D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
2122	 1A2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x554
- stack 0: 0xF
2123	 1A3	PUSH2	03A0	 	 
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0x3A0
2124	 1A6	MLOAD		 	  ;; # read from x29
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0xF
2125	 1A7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x554
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
2126	 1AC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0xF
2127	 1AD	SUB		 	 
- stack 1: 0x554
- stack 0: 0x0
2128	 1AE	PUSH2	01B6	 ;; _neq_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1B6
2129	 1B1	JUMPI		 	 
- stack 0: 0x554
2130	 1B2	PUSH2	01D0	 ;; _neq_after_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 1: 0x554
- stack 0: 0x1D0
2131	 1B5	JUMP		 	 
- stack 0: 0x554
2132	 1D0	JUMPDEST		 ;; _neq_after_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 0: 0x554
2133	 1D1	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
2134	 1D3	ADD		 	 
- stack 0: 0x558
2135	 1D4	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
2136	 1D5	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1DA000101F900020213FFDC0103000E015F0000008600000095013400B40001
2137	 1D6	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x1DA000101F900020213FFDC0103000E015F0000008600000095013400B40001
- stack 0: 0xF0
2138	 1D8	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1DA
2139	 1D9	JUMP		 	 
- stack 0: 0x558
2140	 1DA	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x558
2141	 1DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
2142	 1DC	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1DA000101F900020213FFDC0103000E015F0000008600000095013400B40001
2143	 1DD	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x1DA000101F900020213FFDC0103000E015F0000008600000095013400B40001
- stack 0: 0xE0
2144	 1DF	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1DA0001
2145	 1E0	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x1DA0001
- stack 0: 0xFFFF
2146	 1E3	AND		 	 
- stack 1: 0x558
- stack 0: 0x1
2147	 1E4	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x1
2148	 1E6	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x1
2149	 1E7	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x80
2150	 1EA	MLOAD		 	  ;; # read from x4
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x1
2151	 1EB	ADD		 	  ;; # ADDI 4
- stack 1: 0x558
- stack 0: 0x2
2152	 1EC	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0x80
2153	 1EF	MSTORE		 	  ;; # store to x4
- stack 0: 0x558
2154	 1F0	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
2155	 1F2	ADD		 	 
- stack 0: 0x55C
2156	 1F3	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
2157	 1F4	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1F900020213FFDC0103000E015F0000008600000095013400B4000102550000
2158	 1F5	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x1F900020213FFDC0103000E015F0000008600000095013400B4000102550000
- stack 0: 0xF0
2159	 1F7	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1F9
2160	 1F8	JUMP		 	 
- stack 0: 0x55C
2161	 1F9	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x55C
2162	 1FA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
2163	 1FB	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1F900020213FFDC0103000E015F0000008600000095013400B4000102550000
2164	 1FC	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x1F900020213FFDC0103000E015F0000008600000095013400B4000102550000
- stack 0: 0xE0
2165	 1FE	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1F90002
2166	 1FF	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x1F90002
- stack 0: 0xFFFF
2167	 202	AND		 	 
- stack 1: 0x55C
- stack 0: 0x2
2168	 203	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0x1
2169	 205	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x2
2170	 206	PUSH2	00A0	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0xA0
2171	 209	MSTORE		 	  ;; # store to x5
- stack 0: 0x55C
2172	 20A	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
2173	 20C	ADD		 	 
- stack 0: 0x560
2174	 20D	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
2175	 20E	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x213FFDC0103000E015F0000008600000095013400B400010255000002550000
2176	 20F	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x213FFDC0103000E015F0000008600000095013400B400010255000002550000
- stack 0: 0xF0
2177	 211	SHR		 	 
- stack 1: 0x560
- stack 0: 0x213
2178	 212	JUMP		 	 
- stack 0: 0x560
2179	 213	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x560
2180	 214	PUSH2	0080	 	 
- stack 1: 0x560
- stack 0: 0x80
2181	 217	MLOAD		 	  ;; # read from x4
- stack 1: 0x560
- stack 0: 0x2
2182	 218	PUSH4	FFFFFFFF	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2183	 21D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x560
- stack 0: 0x2
2184	 21E	PUSH2	00A0	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0xA0
2185	 221	MLOAD		 	  ;; # read from x5
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0x2
2186	 222	PUSH4	FFFFFFFF	 	 
- stack 3: 0x560
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2187	 227	AND		 	  ;; # mask to 32 bits
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0x2
2188	 228	SUB		 	 
- stack 1: 0x560
- stack 0: 0x0
2189	 229	PUSH2	0231	 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x231
2190	 22C	JUMPI		 	 
- stack 0: 0x560
2191	 22D	PUSH2	024B	 ;; _neq_after_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 1: 0x560
- stack 0: 0x24B
2192	 230	JUMP		 	 
- stack 0: 0x560
2193	 24B	JUMPDEST		 ;; _neq_after_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 0: 0x560
2194	 24C	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
2195	 24E	ADD		 	 
- stack 0: 0x564
2196	 24F	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2197	 250	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x103000E015F0000008600000095013400B40001025500000255000001790000
2198	 251	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x103000E015F0000008600000095013400B40001025500000255000001790000
- stack 0: 0xF0
2199	 253	SHR		 	 
- stack 1: 0x564
- stack 0: 0x103
2200	 254	JUMP		 	 
- stack 0: 0x564
2201	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x564
2202	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
2203	 105	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x103000E015F0000008600000095013400B40001025500000255000001790000
2204	 106	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x103000E015F0000008600000095013400B40001025500000255000001790000
- stack 0: 0xE0
2205	 108	SHR		 	 
- stack 1: 0x564
- stack 0: 0x103000E
2206	 109	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x103000E
- stack 0: 0xFFFF
2207	 10C	AND		 	 
- stack 1: 0x564
- stack 0: 0xE
2208	 10D	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0xE
- stack 0: 0x1
2209	 10F	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0xE
2210	 110	PUSH2	0380	 	 
- stack 2: 0x564
- stack 1: 0xE
- stack 0: 0x380
2211	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x564
2212	 114	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2213	 116	ADD		 	 
- stack 0: 0x568
2214	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2215	 118	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x15F0000008600000095013400B4000102550000025500000179000000E90000
2216	 119	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x15F0000008600000095013400B4000102550000025500000179000000E90000
- stack 0: 0xF0
2217	 11B	SHR		 	 
- stack 1: 0x568
- stack 0: 0x15F
2218	 11C	JUMP		 	 
- stack 0: 0x568
2219	 15F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x568
2220	 160	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
2221	 161	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x15F0000008600000095013400B4000102550000025500000179000000E90000
2222	 162	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x15F0000008600000095013400B4000102550000025500000179000000E90000
- stack 0: 0xE0
2223	 164	SHR		 	 
- stack 1: 0x568
- stack 0: 0x15F0000
2224	 165	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x15F0000
- stack 0: 0xFFFF
2225	 168	AND		 	 
- stack 1: 0x568
- stack 0: 0x0
2226	 169	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x1
2227	 16B	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x0
2228	 16C	PUSH2	0080	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x80
2229	 16F	MSTORE		 	  ;; # store to x4
- stack 0: 0x568
2230	 170	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2231	 172	ADD		 	 
- stack 0: 0x56C
2232	 173	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2233	 174	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x8600000095013400B4000102550000025500000179000000E90000019800D4
2234	 175	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x8600000095013400B4000102550000025500000179000000E90000019800D4
- stack 0: 0xF0
2235	 177	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x86
2236	 178	JUMP		 	 
- stack 0: 0x56C
2237	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x56C
2238	 87	DUP1		 	 
- stack 1: 0x56C
- stack 0: 0x56C
2239	 88	PUSH2	0020	 	 
- stack 2: 0x56C
- stack 1: 0x56C
- stack 0: 0x20
2240	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x56C
2241	 8C	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2242	 8E	ADD		 	 
- stack 0: 0x570
2243	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2244	 90	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x95013400B4000102550000025500000179000000E90000019800D401DA0001
2245	 91	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x95013400B4000102550000025500000179000000E90000019800D401DA0001
- stack 0: 0xF0
2246	 93	SHR		 	 
- stack 1: 0x570
- stack 0: 0x95
2247	 94	JUMP		 	 
- stack 0: 0x570
2248	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x570
2249	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
2250	 97	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x95013400B4000102550000025500000179000000E90000019800D401DA0001
2251	 98	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x95013400B4000102550000025500000179000000E90000019800D401DA0001
- stack 0: 0xE0
2252	 9A	SHR		 	 
- stack 1: 0x570
- stack 0: 0x950134
2253	 9B	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x950134
- stack 0: 0xFFFF
2254	 9E	AND		 	 
- stack 1: 0x570
- stack 0: 0x134
2255	 9F	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x134
- stack 0: 0x1
2256	 A1	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x134
2257	 A2	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0x134
- stack 0: 0x20
2258	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x570
- stack 1: 0x134
- stack 0: 0x56C
2259	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x570
- stack 0: 0x6A0
2260	 A7	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0x6A0
- stack 0: 0x20
2261	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x570
2262	 AB	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2263	 AD	ADD		 	 
- stack 0: 0x574
2264	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2265	 AF	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xB4000102550000025500000179000000E90000019800D401DA000101F90002
2266	 B0	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0xB4000102550000025500000179000000E90000019800D401DA000101F90002
- stack 0: 0xF0
2267	 B2	SHR		 	 
- stack 1: 0x574
- stack 0: 0xB4
2268	 B3	JUMP		 	 
- stack 0: 0x574
2269	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x574
2270	 B5	PUSH2	0020	 	 
- stack 1: 0x574
- stack 0: 0x20
2271	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x574
- stack 0: 0x6A0
2272	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
2273	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x574
- stack 0: 0x6A0
2274	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0x574
2275	 C0	MLOAD		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0xB4000102550000025500000179000000E90000019800D401DA000101F90002
2276	 C1	PUSH1	E0	 	 
- stack 3: 0x574
- stack 2: 0x6A0
- stack 1: 0xB4000102550000025500000179000000E90000019800D401DA000101F90002
- stack 0: 0xE0
2277	 C3	SHR		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0xB40001
2278	 C4	PUSH2	FFFF	 	 
- stack 3: 0x574
- stack 2: 0x6A0
- stack 1: 0xB40001
- stack 0: 0xFFFF
2279	 C7	AND		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0x1
2280	 C8	PUSH1	01	 	 
- stack 3: 0x574
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1
2281	 CA	SIGNEXTEND		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0x1
2282	 CB	ADD		 	 
- stack 1: 0x574
- stack 0: 0x6A1
2283	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x574
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
2284	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x574
- stack 0: 0x6A1
2285	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x574
- stack 1: 0x6A1
- stack 0: 0x3
2286	 D4	XOR		 	 
- stack 1: 0x574
- stack 0: 0x6A2
2287	 D5	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xFF000000000000000000000000000000000000000000000000000000000000
2288	 D6	PUSH1	F8	 	 
- stack 2: 0x574
- stack 1: 0xFF000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
2289	 D8	SHR		 	 
- stack 1: 0x574
- stack 0: 0x0
2290	 D9	PUSH1	00	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x0
2291	 DB	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x0
2292	 DC	PUSH2	0060	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x60
2293	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x574
2294	 E0	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2295	 E2	ADD		 	 
- stack 0: 0x578
2296	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2297	 E4	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x2550000025500000179000000E90000019800D401DA000101F900020213FFD8
2298	 E5	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x2550000025500000179000000E90000019800D401DA000101F900020213FFD8
- stack 0: 0xF0
2299	 E7	SHR		 	 
- stack 1: 0x578
- stack 0: 0x255
2300	 E8	JUMP		 	 
- stack 0: 0x578
2301	 255	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x578
2302	 256	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2303	 257	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x2550000025500000179000000E90000019800D401DA000101F900020213FFD8
2304	 258	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x2550000025500000179000000E90000019800D401DA000101F900020213FFD8
- stack 0: 0xE0
2305	 25A	SHR		 	 
- stack 1: 0x578
- stack 0: 0x2550000
2306	 25B	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x2550000
- stack 0: 0xFFFF
2307	 25E	AND		 	 
- stack 1: 0x578
- stack 0: 0x0
2308	 25F	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x1
2309	 261	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x0
2310	 262	POP		 	 
- stack 0: 0x578
2311	 263	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2312	 265	ADD		 	 
- stack 0: 0x57C
2313	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2314	 267	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x25500000179000000E90000019800D401DA000101F900020213FFD80103000F
2315	 268	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x25500000179000000E90000019800D401DA000101F900020213FFD80103000F
- stack 0: 0xF0
2316	 26A	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x255
2317	 26B	JUMP		 	 
- stack 0: 0x57C
2318	 255	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x57C
2319	 256	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2320	 257	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x25500000179000000E90000019800D401DA000101F900020213FFD80103000F
2321	 258	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x25500000179000000E90000019800D401DA000101F900020213FFD80103000F
- stack 0: 0xE0
2322	 25A	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x2550000
2323	 25B	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x2550000
- stack 0: 0xFFFF
2324	 25E	AND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2325	 25F	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x1
2326	 261	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2327	 262	POP		 	 
- stack 0: 0x57C
2328	 263	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2329	 265	ADD		 	 
- stack 0: 0x580
2330	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2331	 267	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x179000000E90000019800D401DA000101F900020213FFD80103000F015F0000
2332	 268	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x179000000E90000019800D401DA000101F900020213FFD80103000F015F0000
- stack 0: 0xF0
2333	 26A	SHR		 	 
- stack 1: 0x580
- stack 0: 0x179
2334	 26B	JUMP		 	 
- stack 0: 0x580
2335	 179	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x580
2336	 17A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2337	 17B	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x179000000E90000019800D401DA000101F900020213FFD80103000F015F0000
2338	 17C	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x179000000E90000019800D401DA000101F900020213FFD80103000F015F0000
- stack 0: 0xE0
2339	 17E	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1790000
2340	 17F	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x1790000
- stack 0: 0xFFFF
2341	 182	AND		 	 
- stack 1: 0x580
- stack 0: 0x0
2342	 183	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x1
2343	 185	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x0
2344	 186	PUSH2	0060	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x60
2345	 189	MLOAD		 	  ;; # read from x3
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x0
2346	 18A	ADD		 	  ;; # ADDI 3
- stack 1: 0x580
- stack 0: 0x0
2347	 18B	PUSH2	00C0	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0xC0
2348	 18E	MSTORE		 	  ;; # store to x6
- stack 0: 0x580
2349	 18F	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2350	 191	ADD		 	 
- stack 0: 0x584
2351	 192	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2352	 193	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xE90000019800D401DA000101F900020213FFD80103000F015F000000860000
2353	 194	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xE90000019800D401DA000101F900020213FFD80103000F015F000000860000
- stack 0: 0xF0
2354	 196	SHR		 	 
- stack 1: 0x584
- stack 0: 0xE9
2355	 197	JUMP		 	 
- stack 0: 0x584
2356	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x584
2357	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2358	 EB	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xE90000019800D401DA000101F900020213FFD80103000F015F000000860000
2359	 EC	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0xE90000019800D401DA000101F900020213FFD80103000F015F000000860000
- stack 0: 0xE0
2360	 EE	SHR		 	 
- stack 1: 0x584
- stack 0: 0xE90000
2361	 EF	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0xE90000
- stack 0: 0xFFFF
2362	 F2	AND		 	 
- stack 1: 0x584
- stack 0: 0x0
2363	 F3	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x1
2364	 F5	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x0
2365	 F6	PUSH2	03A0	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x3A0
2366	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x584
2367	 FA	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2368	 FC	ADD		 	 
- stack 0: 0x588
2369	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2370	 FE	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x19800D401DA000101F900020213FFD80103000F015F00000086000000950101
2371	 FF	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x19800D401DA000101F900020213FFD80103000F015F00000086000000950101
- stack 0: 0xF0
2372	 101	SHR		 	 
- stack 1: 0x588
- stack 0: 0x198
2373	 102	JUMP		 	 
- stack 0: 0x588
2374	 198	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,138(ignore imm)
- stack 0: 0x588
2375	 199	PUSH2	00C0	 	 
- stack 1: 0x588
- stack 0: 0xC0
2376	 19C	MLOAD		 	  ;; # read from x6
- stack 1: 0x588
- stack 0: 0x0
2377	 19D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2378	 1A2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0x0
2379	 1A3	PUSH2	03A0	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x3A0
2380	 1A6	MLOAD		 	  ;; # read from x29
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x0
2381	 1A7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x588
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2382	 1AC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x0
2383	 1AD	SUB		 	 
- stack 1: 0x588
- stack 0: 0x0
2384	 1AE	PUSH2	01B6	 ;; _neq_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x1B6
2385	 1B1	JUMPI		 	 
- stack 0: 0x588
2386	 1B2	PUSH2	01D0	 ;; _neq_after_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 1: 0x588
- stack 0: 0x1D0
2387	 1B5	JUMP		 	 
- stack 0: 0x588
2388	 1D0	JUMPDEST		 ;; _neq_after_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 0: 0x588
2389	 1D1	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2390	 1D3	ADD		 	 
- stack 0: 0x58C
2391	 1D4	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2392	 1D5	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1DA000101F900020213FFD80103000F015F0000008600000095010100B40001
2393	 1D6	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x1DA000101F900020213FFD80103000F015F0000008600000095010100B40001
- stack 0: 0xF0
2394	 1D8	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x1DA
2395	 1D9	JUMP		 	 
- stack 0: 0x58C
2396	 1DA	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x58C
2397	 1DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2398	 1DC	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1DA000101F900020213FFD80103000F015F0000008600000095010100B40001
2399	 1DD	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x1DA000101F900020213FFD80103000F015F0000008600000095010100B40001
- stack 0: 0xE0
2400	 1DF	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x1DA0001
2401	 1E0	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x1DA0001
- stack 0: 0xFFFF
2402	 1E3	AND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2403	 1E4	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
2404	 1E6	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2405	 1E7	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x80
2406	 1EA	MLOAD		 	  ;; # read from x4
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x0
2407	 1EB	ADD		 	  ;; # ADDI 4
- stack 1: 0x58C
- stack 0: 0x1
2408	 1EC	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x80
2409	 1EF	MSTORE		 	  ;; # store to x4
- stack 0: 0x58C
2410	 1F0	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2411	 1F2	ADD		 	 
- stack 0: 0x590
2412	 1F3	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2413	 1F4	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x1F900020213FFD80103000F015F0000008600000095010100B4000100E9FFF0
2414	 1F5	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x1F900020213FFD80103000F015F0000008600000095010100B4000100E9FFF0
- stack 0: 0xF0
2415	 1F7	SHR		 	 
- stack 1: 0x590
- stack 0: 0x1F9
2416	 1F8	JUMP		 	 
- stack 0: 0x590
2417	 1F9	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x590
2418	 1FA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2419	 1FB	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x1F900020213FFD80103000F015F0000008600000095010100B4000100E9FFF0
2420	 1FC	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x1F900020213FFD80103000F015F0000008600000095010100B4000100E9FFF0
- stack 0: 0xE0
2421	 1FE	SHR		 	 
- stack 1: 0x590
- stack 0: 0x1F90002
2422	 1FF	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x1F90002
- stack 0: 0xFFFF
2423	 202	AND		 	 
- stack 1: 0x590
- stack 0: 0x2
2424	 203	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0x1
2425	 205	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x2
2426	 206	PUSH2	00A0	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0xA0
2427	 209	MSTORE		 	  ;; # store to x5
- stack 0: 0x590
2428	 20A	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2429	 20C	ADD		 	 
- stack 0: 0x594
2430	 20D	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2431	 20E	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x213FFD80103000F015F0000008600000095010100B4000100E9FFF0011D00AC
2432	 20F	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x213FFD80103000F015F0000008600000095010100B4000100E9FFF0011D00AC
- stack 0: 0xF0
2433	 211	SHR		 	 
- stack 1: 0x594
- stack 0: 0x213
2434	 212	JUMP		 	 
- stack 0: 0x594
2435	 213	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x594
2436	 214	PUSH2	0080	 	 
- stack 1: 0x594
- stack 0: 0x80
2437	 217	MLOAD		 	  ;; # read from x4
- stack 1: 0x594
- stack 0: 0x1
2438	 218	PUSH4	FFFFFFFF	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2439	 21D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x594
- stack 0: 0x1
2440	 21E	PUSH2	00A0	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0xA0
2441	 221	MLOAD		 	  ;; # read from x5
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x2
2442	 222	PUSH4	FFFFFFFF	 	 
- stack 3: 0x594
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2443	 227	AND		 	  ;; # mask to 32 bits
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x2
2444	 228	SUB		 	 
- stack 1: 0x594
- stack 0: 0x1
2445	 229	PUSH2	0231	 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x231
2446	 22C	JUMPI		 	 
- stack 0: 0x594
2447	 231	JUMPDEST		 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 0: 0x594
2448	 232	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2449	 233	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x213FFD80103000F015F0000008600000095010100B4000100E9FFF0011D00AC
2450	 234	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x213FFD80103000F015F0000008600000095010100B4000100E9FFF0011D00AC
- stack 0: 0xE0
2451	 236	SHR		 	 
- stack 1: 0x594
- stack 0: 0x213FFD8
2452	 237	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x213FFD8
- stack 0: 0xFFFF
2453	 23A	AND		 	 
- stack 1: 0x594
- stack 0: 0xFFD8
2454	 23B	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0xFFD8
- stack 0: 0x1
2455	 23D	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
2456	 23E	ADD		 	 
- stack 0: 0x56C
2457	 23F	PUSH4	FFFFFFFF	 	 
- stack 1: 0x56C
- stack 0: 0xFFFFFFFF
2458	 244	AND		 	  ;; # mask to 32 bits
- stack 0: 0x56C
2459	 245	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2460	 246	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x8600000095013400B4000102550000025500000179000000E90000019800D4
2461	 247	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x8600000095013400B4000102550000025500000179000000E90000019800D4
- stack 0: 0xF0
2462	 249	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x86
2463	 24A	JUMP		 	 
- stack 0: 0x56C
2464	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x56C
2465	 87	DUP1		 	 
- stack 1: 0x56C
- stack 0: 0x56C
2466	 88	PUSH2	0020	 	 
- stack 2: 0x56C
- stack 1: 0x56C
- stack 0: 0x20
2467	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x56C
2468	 8C	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2469	 8E	ADD		 	 
- stack 0: 0x570
2470	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2471	 90	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x95013400B4000102550000025500000179000000E90000019800D401DA0001
2472	 91	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x95013400B4000102550000025500000179000000E90000019800D401DA0001
- stack 0: 0xF0
2473	 93	SHR		 	 
- stack 1: 0x570
- stack 0: 0x95
2474	 94	JUMP		 	 
- stack 0: 0x570
2475	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x570
2476	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
2477	 97	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x95013400B4000102550000025500000179000000E90000019800D401DA0001
2478	 98	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x95013400B4000102550000025500000179000000E90000019800D401DA0001
- stack 0: 0xE0
2479	 9A	SHR		 	 
- stack 1: 0x570
- stack 0: 0x950134
2480	 9B	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x950134
- stack 0: 0xFFFF
2481	 9E	AND		 	 
- stack 1: 0x570
- stack 0: 0x134
2482	 9F	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x134
- stack 0: 0x1
2483	 A1	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x134
2484	 A2	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0x134
- stack 0: 0x20
2485	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x570
- stack 1: 0x134
- stack 0: 0x56C
2486	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x570
- stack 0: 0x6A0
2487	 A7	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0x6A0
- stack 0: 0x20
2488	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x570
2489	 AB	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2490	 AD	ADD		 	 
- stack 0: 0x574
2491	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2492	 AF	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xB4000102550000025500000179000000E90000019800D401DA000101F90002
2493	 B0	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0xB4000102550000025500000179000000E90000019800D401DA000101F90002
- stack 0: 0xF0
2494	 B2	SHR		 	 
- stack 1: 0x574
- stack 0: 0xB4
2495	 B3	JUMP		 	 
- stack 0: 0x574
2496	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x574
2497	 B5	PUSH2	0020	 	 
- stack 1: 0x574
- stack 0: 0x20
2498	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x574
- stack 0: 0x6A0
2499	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
2500	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x574
- stack 0: 0x6A0
2501	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0x574
2502	 C0	MLOAD		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0xB4000102550000025500000179000000E90000019800D401DA000101F90002
2503	 C1	PUSH1	E0	 	 
- stack 3: 0x574
- stack 2: 0x6A0
- stack 1: 0xB4000102550000025500000179000000E90000019800D401DA000101F90002
- stack 0: 0xE0
2504	 C3	SHR		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0xB40001
2505	 C4	PUSH2	FFFF	 	 
- stack 3: 0x574
- stack 2: 0x6A0
- stack 1: 0xB40001
- stack 0: 0xFFFF
2506	 C7	AND		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0x1
2507	 C8	PUSH1	01	 	 
- stack 3: 0x574
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1
2508	 CA	SIGNEXTEND		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0x1
2509	 CB	ADD		 	 
- stack 1: 0x574
- stack 0: 0x6A1
2510	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x574
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
2511	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x574
- stack 0: 0x6A1
2512	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x574
- stack 1: 0x6A1
- stack 0: 0x3
2513	 D4	XOR		 	 
- stack 1: 0x574
- stack 0: 0x6A2
2514	 D5	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xFF000000000000000000000000000000000000000000000000000000000000
2515	 D6	PUSH1	F8	 	 
- stack 2: 0x574
- stack 1: 0xFF000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
2516	 D8	SHR		 	 
- stack 1: 0x574
- stack 0: 0x0
2517	 D9	PUSH1	00	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x0
2518	 DB	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x0
2519	 DC	PUSH2	0060	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x60
2520	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x574
2521	 E0	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2522	 E2	ADD		 	 
- stack 0: 0x578
2523	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2524	 E4	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x2550000025500000179000000E90000019800D401DA000101F900020213FFD8
2525	 E5	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x2550000025500000179000000E90000019800D401DA000101F900020213FFD8
- stack 0: 0xF0
2526	 E7	SHR		 	 
- stack 1: 0x578
- stack 0: 0x255
2527	 E8	JUMP		 	 
- stack 0: 0x578
2528	 255	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x578
2529	 256	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2530	 257	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x2550000025500000179000000E90000019800D401DA000101F900020213FFD8
2531	 258	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x2550000025500000179000000E90000019800D401DA000101F900020213FFD8
- stack 0: 0xE0
2532	 25A	SHR		 	 
- stack 1: 0x578
- stack 0: 0x2550000
2533	 25B	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x2550000
- stack 0: 0xFFFF
2534	 25E	AND		 	 
- stack 1: 0x578
- stack 0: 0x0
2535	 25F	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x1
2536	 261	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x0
2537	 262	POP		 	 
- stack 0: 0x578
2538	 263	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2539	 265	ADD		 	 
- stack 0: 0x57C
2540	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2541	 267	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x25500000179000000E90000019800D401DA000101F900020213FFD80103000F
2542	 268	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x25500000179000000E90000019800D401DA000101F900020213FFD80103000F
- stack 0: 0xF0
2543	 26A	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x255
2544	 26B	JUMP		 	 
- stack 0: 0x57C
2545	 255	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x57C
2546	 256	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2547	 257	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x25500000179000000E90000019800D401DA000101F900020213FFD80103000F
2548	 258	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x25500000179000000E90000019800D401DA000101F900020213FFD80103000F
- stack 0: 0xE0
2549	 25A	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x2550000
2550	 25B	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x2550000
- stack 0: 0xFFFF
2551	 25E	AND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2552	 25F	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x1
2553	 261	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2554	 262	POP		 	 
- stack 0: 0x57C
2555	 263	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2556	 265	ADD		 	 
- stack 0: 0x580
2557	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2558	 267	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x179000000E90000019800D401DA000101F900020213FFD80103000F015F0000
2559	 268	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x179000000E90000019800D401DA000101F900020213FFD80103000F015F0000
- stack 0: 0xF0
2560	 26A	SHR		 	 
- stack 1: 0x580
- stack 0: 0x179
2561	 26B	JUMP		 	 
- stack 0: 0x580
2562	 179	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x580
2563	 17A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2564	 17B	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x179000000E90000019800D401DA000101F900020213FFD80103000F015F0000
2565	 17C	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x179000000E90000019800D401DA000101F900020213FFD80103000F015F0000
- stack 0: 0xE0
2566	 17E	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1790000
2567	 17F	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x1790000
- stack 0: 0xFFFF
2568	 182	AND		 	 
- stack 1: 0x580
- stack 0: 0x0
2569	 183	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x1
2570	 185	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x0
2571	 186	PUSH2	0060	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x60
2572	 189	MLOAD		 	  ;; # read from x3
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x0
2573	 18A	ADD		 	  ;; # ADDI 3
- stack 1: 0x580
- stack 0: 0x0
2574	 18B	PUSH2	00C0	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0xC0
2575	 18E	MSTORE		 	  ;; # store to x6
- stack 0: 0x580
2576	 18F	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2577	 191	ADD		 	 
- stack 0: 0x584
2578	 192	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2579	 193	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xE90000019800D401DA000101F900020213FFD80103000F015F000000860000
2580	 194	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xE90000019800D401DA000101F900020213FFD80103000F015F000000860000
- stack 0: 0xF0
2581	 196	SHR		 	 
- stack 1: 0x584
- stack 0: 0xE9
2582	 197	JUMP		 	 
- stack 0: 0x584
2583	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x584
2584	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2585	 EB	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xE90000019800D401DA000101F900020213FFD80103000F015F000000860000
2586	 EC	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0xE90000019800D401DA000101F900020213FFD80103000F015F000000860000
- stack 0: 0xE0
2587	 EE	SHR		 	 
- stack 1: 0x584
- stack 0: 0xE90000
2588	 EF	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0xE90000
- stack 0: 0xFFFF
2589	 F2	AND		 	 
- stack 1: 0x584
- stack 0: 0x0
2590	 F3	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x1
2591	 F5	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x0
2592	 F6	PUSH2	03A0	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x3A0
2593	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x584
2594	 FA	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2595	 FC	ADD		 	 
- stack 0: 0x588
2596	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2597	 FE	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x19800D401DA000101F900020213FFD80103000F015F00000086000000950101
2598	 FF	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x19800D401DA000101F900020213FFD80103000F015F00000086000000950101
- stack 0: 0xF0
2599	 101	SHR		 	 
- stack 1: 0x588
- stack 0: 0x198
2600	 102	JUMP		 	 
- stack 0: 0x588
2601	 198	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,138(ignore imm)
- stack 0: 0x588
2602	 199	PUSH2	00C0	 	 
- stack 1: 0x588
- stack 0: 0xC0
2603	 19C	MLOAD		 	  ;; # read from x6
- stack 1: 0x588
- stack 0: 0x0
2604	 19D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2605	 1A2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0x0
2606	 1A3	PUSH2	03A0	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x3A0
2607	 1A6	MLOAD		 	  ;; # read from x29
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x0
2608	 1A7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x588
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2609	 1AC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x0
2610	 1AD	SUB		 	 
- stack 1: 0x588
- stack 0: 0x0
2611	 1AE	PUSH2	01B6	 ;; _neq_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x1B6
2612	 1B1	JUMPI		 	 
- stack 0: 0x588
2613	 1B2	PUSH2	01D0	 ;; _neq_after_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 1: 0x588
- stack 0: 0x1D0
2614	 1B5	JUMP		 	 
- stack 0: 0x588
2615	 1D0	JUMPDEST		 ;; _neq_after_bb3e9f06506fa8cf6247b355446440a4b1ff69c9a9a59d15b43e1fb1c35e473e	 
- stack 0: 0x588
2616	 1D1	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2617	 1D3	ADD		 	 
- stack 0: 0x58C
2618	 1D4	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2619	 1D5	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1DA000101F900020213FFD80103000F015F0000008600000095010100B40001
2620	 1D6	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x1DA000101F900020213FFD80103000F015F0000008600000095010100B40001
- stack 0: 0xF0
2621	 1D8	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x1DA
2622	 1D9	JUMP		 	 
- stack 0: 0x58C
2623	 1DA	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x58C
2624	 1DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2625	 1DC	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1DA000101F900020213FFD80103000F015F0000008600000095010100B40001
2626	 1DD	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x1DA000101F900020213FFD80103000F015F0000008600000095010100B40001
- stack 0: 0xE0
2627	 1DF	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x1DA0001
2628	 1E0	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x1DA0001
- stack 0: 0xFFFF
2629	 1E3	AND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2630	 1E4	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
2631	 1E6	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2632	 1E7	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x80
2633	 1EA	MLOAD		 	  ;; # read from x4
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
2634	 1EB	ADD		 	  ;; # ADDI 4
- stack 1: 0x58C
- stack 0: 0x2
2635	 1EC	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0x80
2636	 1EF	MSTORE		 	  ;; # store to x4
- stack 0: 0x58C
2637	 1F0	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2638	 1F2	ADD		 	 
- stack 0: 0x590
2639	 1F3	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2640	 1F4	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x1F900020213FFD80103000F015F0000008600000095010100B4000100E9FFF0
2641	 1F5	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x1F900020213FFD80103000F015F0000008600000095010100B4000100E9FFF0
- stack 0: 0xF0
2642	 1F7	SHR		 	 
- stack 1: 0x590
- stack 0: 0x1F9
2643	 1F8	JUMP		 	 
- stack 0: 0x590
2644	 1F9	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x590
2645	 1FA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2646	 1FB	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x1F900020213FFD80103000F015F0000008600000095010100B4000100E9FFF0
2647	 1FC	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x1F900020213FFD80103000F015F0000008600000095010100B4000100E9FFF0
- stack 0: 0xE0
2648	 1FE	SHR		 	 
- stack 1: 0x590
- stack 0: 0x1F90002
2649	 1FF	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x1F90002
- stack 0: 0xFFFF
2650	 202	AND		 	 
- stack 1: 0x590
- stack 0: 0x2
2651	 203	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0x1
2652	 205	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x2
2653	 206	PUSH2	00A0	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0xA0
2654	 209	MSTORE		 	  ;; # store to x5
- stack 0: 0x590
2655	 20A	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2656	 20C	ADD		 	 
- stack 0: 0x594
2657	 20D	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2658	 20E	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x213FFD80103000F015F0000008600000095010100B4000100E9FFF0011D00AC
2659	 20F	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x213FFD80103000F015F0000008600000095010100B4000100E9FFF0011D00AC
- stack 0: 0xF0
2660	 211	SHR		 	 
- stack 1: 0x594
- stack 0: 0x213
2661	 212	JUMP		 	 
- stack 0: 0x594
2662	 213	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x594
2663	 214	PUSH2	0080	 	 
- stack 1: 0x594
- stack 0: 0x80
2664	 217	MLOAD		 	  ;; # read from x4
- stack 1: 0x594
- stack 0: 0x2
2665	 218	PUSH4	FFFFFFFF	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2666	 21D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x594
- stack 0: 0x2
2667	 21E	PUSH2	00A0	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0xA0
2668	 221	MLOAD		 	  ;; # read from x5
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0x2
2669	 222	PUSH4	FFFFFFFF	 	 
- stack 3: 0x594
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2670	 227	AND		 	  ;; # mask to 32 bits
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0x2
2671	 228	SUB		 	 
- stack 1: 0x594
- stack 0: 0x0
2672	 229	PUSH2	0231	 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x231
2673	 22C	JUMPI		 	 
- stack 0: 0x594
2674	 22D	PUSH2	024B	 ;; _neq_after_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 1: 0x594
- stack 0: 0x24B
2675	 230	JUMP		 	 
- stack 0: 0x594
2676	 24B	JUMPDEST		 ;; _neq_after_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 0: 0x594
2677	 24C	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2678	 24E	ADD		 	 
- stack 0: 0x598
2679	 24F	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2680	 250	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x103000F015F0000008600000095010100B4000100E9FFF0011D00AC01DA0001
2681	 251	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x103000F015F0000008600000095010100B4000100E9FFF0011D00AC01DA0001
- stack 0: 0xF0
2682	 253	SHR		 	 
- stack 1: 0x598
- stack 0: 0x103
2683	 254	JUMP		 	 
- stack 0: 0x598
2684	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x598
2685	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2686	 105	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x103000F015F0000008600000095010100B4000100E9FFF0011D00AC01DA0001
2687	 106	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x103000F015F0000008600000095010100B4000100E9FFF0011D00AC01DA0001
- stack 0: 0xE0
2688	 108	SHR		 	 
- stack 1: 0x598
- stack 0: 0x103000F
2689	 109	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x103000F
- stack 0: 0xFFFF
2690	 10C	AND		 	 
- stack 1: 0x598
- stack 0: 0xF
2691	 10D	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0xF
- stack 0: 0x1
2692	 10F	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0xF
2693	 110	PUSH2	0380	 	 
- stack 2: 0x598
- stack 1: 0xF
- stack 0: 0x380
2694	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x598
2695	 114	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2696	 116	ADD		 	 
- stack 0: 0x59C
2697	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2698	 118	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x15F0000008600000095010100B4000100E9FFF0011D00AC01DA000101F90002
2699	 119	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x15F0000008600000095010100B4000100E9FFF0011D00AC01DA000101F90002
- stack 0: 0xF0
2700	 11B	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x15F
2701	 11C	JUMP		 	 
- stack 0: 0x59C
2702	 15F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x59C
2703	 160	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2704	 161	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x15F0000008600000095010100B4000100E9FFF0011D00AC01DA000101F90002
2705	 162	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x15F0000008600000095010100B4000100E9FFF0011D00AC01DA000101F90002
- stack 0: 0xE0
2706	 164	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x15F0000
2707	 165	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x15F0000
- stack 0: 0xFFFF
2708	 168	AND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2709	 169	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1
2710	 16B	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2711	 16C	PUSH2	0080	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x80
2712	 16F	MSTORE		 	  ;; # store to x4
- stack 0: 0x59C
2713	 170	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2714	 172	ADD		 	 
- stack 0: 0x5A0
2715	 173	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2716	 174	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x8600000095010100B4000100E9FFF0011D00AC01DA000101F900020213FFE4
2717	 175	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x8600000095010100B4000100E9FFF0011D00AC01DA000101F900020213FFE4
- stack 0: 0xF0
2718	 177	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x86
2719	 178	JUMP		 	 
- stack 0: 0x5A0
2720	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5A0
2721	 87	DUP1		 	 
- stack 1: 0x5A0
- stack 0: 0x5A0
2722	 88	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x5A0
- stack 0: 0x20
2723	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
2724	 8C	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2725	 8E	ADD		 	 
- stack 0: 0x5A4
2726	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2727	 90	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x95010100B4000100E9FFF0011D00AC01DA000101F900020213FFE401030010
2728	 91	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x95010100B4000100E9FFF0011D00AC01DA000101F900020213FFE401030010
- stack 0: 0xF0
2729	 93	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x95
2730	 94	JUMP		 	 
- stack 0: 0x5A4
2731	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x5A4
2732	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2733	 97	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x95010100B4000100E9FFF0011D00AC01DA000101F900020213FFE401030010
2734	 98	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x95010100B4000100E9FFF0011D00AC01DA000101F900020213FFE401030010
- stack 0: 0xE0
2735	 9A	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x950101
2736	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x950101
- stack 0: 0xFFFF
2737	 9E	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x101
2738	 9F	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x101
- stack 0: 0x1
2739	 A1	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x101
2740	 A2	PUSH2	0020	 	 
- stack 2: 0x5A4
- stack 1: 0x101
- stack 0: 0x20
2741	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A4
- stack 1: 0x101
- stack 0: 0x5A0
2742	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5A4
- stack 0: 0x6A1
2743	 A7	PUSH2	0020	 	 
- stack 2: 0x5A4
- stack 1: 0x6A1
- stack 0: 0x20
2744	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A4
2745	 AB	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2746	 AD	ADD		 	 
- stack 0: 0x5A8
2747	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2748	 AF	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0xB4000100E9FFF0011D00AC01DA000101F900020213FFE401030010015F0000
2749	 B0	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0xB4000100E9FFF0011D00AC01DA000101F900020213FFE401030010015F0000
- stack 0: 0xF0
2750	 B2	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0xB4
2751	 B3	JUMP		 	 
- stack 0: 0x5A8
2752	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x5A8
2753	 B5	PUSH2	0020	 	 
- stack 1: 0x5A8
- stack 0: 0x20
2754	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5A8
- stack 0: 0x6A1
2755	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
2756	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A8
- stack 0: 0x6A1
2757	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0x5A8
2758	 C0	MLOAD		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0xB4000100E9FFF0011D00AC01DA000101F900020213FFE401030010015F0000
2759	 C1	PUSH1	E0	 	 
- stack 3: 0x5A8
- stack 2: 0x6A1
- stack 1: 0xB4000100E9FFF0011D00AC01DA000101F900020213FFE401030010015F0000
- stack 0: 0xE0
2760	 C3	SHR		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0xB40001
2761	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5A8
- stack 2: 0x6A1
- stack 1: 0xB40001
- stack 0: 0xFFFF
2762	 C7	AND		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0x1
2763	 C8	PUSH1	01	 	 
- stack 3: 0x5A8
- stack 2: 0x6A1
- stack 1: 0x1
- stack 0: 0x1
2764	 CA	SIGNEXTEND		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0x1
2765	 CB	ADD		 	 
- stack 1: 0x5A8
- stack 0: 0x6A2
2766	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
2767	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A8
- stack 0: 0x6A2
2768	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x5A8
- stack 1: 0x6A2
- stack 0: 0x3
2769	 D4	XOR		 	 
- stack 1: 0x5A8
- stack 0: 0x6A1
2770	 D5	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0xF000FF0000000000000000000000000000000000000000000000000000000000
2771	 D6	PUSH1	F8	 	 
- stack 2: 0x5A8
- stack 1: 0xF000FF0000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
2772	 D8	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0xF0
2773	 D9	PUSH1	00	 	 
- stack 2: 0x5A8
- stack 1: 0xF0
- stack 0: 0x0
2774	 DB	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2775	 DC	PUSH2	0060	 	 
- stack 2: 0x5A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x60
2776	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A8
2777	 E0	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2778	 E2	ADD		 	 
- stack 0: 0x5AC
2779	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2780	 E4	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xE9FFF0011D00AC01DA000101F900020213FFE401030010015F000000860000
2781	 E5	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0xE9FFF0011D00AC01DA000101F900020213FFE401030010015F000000860000
- stack 0: 0xF0
2782	 E7	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xE9
2783	 E8	JUMP		 	 
- stack 0: 0x5AC
2784	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x5AC
2785	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2786	 EB	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xE9FFF0011D00AC01DA000101F900020213FFE401030010015F000000860000
2787	 EC	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0xE9FFF0011D00AC01DA000101F900020213FFE401030010015F000000860000
- stack 0: 0xE0
2788	 EE	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xE9FFF0
2789	 EF	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0xE9FFF0
- stack 0: 0xFFFF
2790	 F2	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFF0
2791	 F3	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xFFF0
- stack 0: 0x1
2792	 F5	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2793	 F6	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
2794	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x5AC
2795	 FA	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2796	 FC	ADD		 	 
- stack 0: 0x5B0
2797	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2798	 FE	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x11D00AC01DA000101F900020213FFE401030010015F000000860000009500DA
2799	 FF	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x11D00AC01DA000101F900020213FFE401030010015F000000860000009500DA
- stack 0: 0xF0
2800	 101	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x11D
2801	 102	JUMP		 	 
- stack 0: 0x5B0
2802	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x5B0
2803	 11E	PUSH2	0060	 	 
- stack 1: 0x5B0
- stack 0: 0x60
2804	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x5B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2805	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFFFFFFF
2806	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B0
- stack 0: 0xFFFFFFF0
2807	 128	PUSH2	03A0	 	 
- stack 2: 0x5B0
- stack 1: 0xFFFFFFF0
- stack 0: 0x3A0
2808	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B0
- stack 1: 0xFFFFFFF0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2809	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B0
- stack 2: 0xFFFFFFF0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFFFFFFF
2810	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B0
- stack 1: 0xFFFFFFF0
- stack 0: 0xFFFFFFF0
2811	 132	SUB		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2812	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x13B
2813	 136	JUMPI		 	 
- stack 0: 0x5B0
2814	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x5B0
- stack 0: 0x155
2815	 13A	JUMP		 	 
- stack 0: 0x5B0
2816	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x5B0
2817	 156	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2818	 158	ADD		 	 
- stack 0: 0x5B4
2819	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2820	 15A	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1DA000101F900020213FFE401030010015F000000860000009500DA02550000
2821	 15B	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x1DA000101F900020213FFE401030010015F000000860000009500DA02550000
- stack 0: 0xF0
2822	 15D	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1DA
2823	 15E	JUMP		 	 
- stack 0: 0x5B4
2824	 1DA	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B4
2825	 1DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2826	 1DC	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1DA000101F900020213FFE401030010015F000000860000009500DA02550000
2827	 1DD	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x1DA000101F900020213FFE401030010015F000000860000009500DA02550000
- stack 0: 0xE0
2828	 1DF	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1DA0001
2829	 1E0	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x1DA0001
- stack 0: 0xFFFF
2830	 1E3	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2831	 1E4	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
2832	 1E6	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2833	 1E7	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x80
2834	 1EA	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x0
2835	 1EB	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B4
- stack 0: 0x1
2836	 1EC	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x80
2837	 1EF	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B4
2838	 1F0	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2839	 1F2	ADD		 	 
- stack 0: 0x5B8
2840	 1F3	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2841	 1F4	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1F900020213FFE401030010015F000000860000009500DA0255000000B40001
2842	 1F5	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x1F900020213FFE401030010015F000000860000009500DA0255000000B40001
- stack 0: 0xF0
2843	 1F7	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1F9
2844	 1F8	JUMP		 	 
- stack 0: 0x5B8
2845	 1F9	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B8
2846	 1FA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2847	 1FB	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1F900020213FFE401030010015F000000860000009500DA0255000000B40001
2848	 1FC	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x1F900020213FFE401030010015F000000860000009500DA0255000000B40001
- stack 0: 0xE0
2849	 1FE	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1F90002
2850	 1FF	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x1F90002
- stack 0: 0xFFFF
2851	 202	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2852	 203	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0x1
2853	 205	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2854	 206	PUSH2	00A0	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0xA0
2855	 209	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B8
2856	 20A	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2857	 20C	ADD		 	 
- stack 0: 0x5BC
2858	 20D	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2859	 20E	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x213FFE401030010015F000000860000009500DA0255000000B4000100E9000F
2860	 20F	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x213FFE401030010015F000000860000009500DA0255000000B4000100E9000F
- stack 0: 0xF0
2861	 211	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x213
2862	 212	JUMP		 	 
- stack 0: 0x5BC
2863	 213	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5BC
2864	 214	PUSH2	0080	 	 
- stack 1: 0x5BC
- stack 0: 0x80
2865	 217	MLOAD		 	  ;; # read from x4
- stack 1: 0x5BC
- stack 0: 0x1
2866	 218	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2867	 21D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x1
2868	 21E	PUSH2	00A0	 	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0xA0
2869	 221	MLOAD		 	  ;; # read from x5
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x2
2870	 222	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2871	 227	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x2
2872	 228	SUB		 	 
- stack 1: 0x5BC
- stack 0: 0x1
2873	 229	PUSH2	0231	 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x231
2874	 22C	JUMPI		 	 
- stack 0: 0x5BC
2875	 231	JUMPDEST		 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 0: 0x5BC
2876	 232	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2877	 233	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x213FFE401030010015F000000860000009500DA0255000000B4000100E9000F
2878	 234	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x213FFE401030010015F000000860000009500DA0255000000B4000100E9000F
- stack 0: 0xE0
2879	 236	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x213FFE4
2880	 237	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x213FFE4
- stack 0: 0xFFFF
2881	 23A	AND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFE4
2882	 23B	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0xFFE4
- stack 0: 0x1
2883	 23D	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2884	 23E	ADD		 	 
- stack 0: 0x5A0
2885	 23F	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5A0
- stack 0: 0xFFFFFFFF
2886	 244	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5A0
2887	 245	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2888	 246	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x8600000095010100B4000100E9FFF0011D00AC01DA000101F900020213FFE4
2889	 247	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x8600000095010100B4000100E9FFF0011D00AC01DA000101F900020213FFE4
- stack 0: 0xF0
2890	 249	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x86
2891	 24A	JUMP		 	 
- stack 0: 0x5A0
2892	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5A0
2893	 87	DUP1		 	 
- stack 1: 0x5A0
- stack 0: 0x5A0
2894	 88	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x5A0
- stack 0: 0x20
2895	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
2896	 8C	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2897	 8E	ADD		 	 
- stack 0: 0x5A4
2898	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2899	 90	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x95010100B4000100E9FFF0011D00AC01DA000101F900020213FFE401030010
2900	 91	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x95010100B4000100E9FFF0011D00AC01DA000101F900020213FFE401030010
- stack 0: 0xF0
2901	 93	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x95
2902	 94	JUMP		 	 
- stack 0: 0x5A4
2903	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x5A4
2904	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2905	 97	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x95010100B4000100E9FFF0011D00AC01DA000101F900020213FFE401030010
2906	 98	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x95010100B4000100E9FFF0011D00AC01DA000101F900020213FFE401030010
- stack 0: 0xE0
2907	 9A	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x950101
2908	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x950101
- stack 0: 0xFFFF
2909	 9E	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x101
2910	 9F	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x101
- stack 0: 0x1
2911	 A1	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x101
2912	 A2	PUSH2	0020	 	 
- stack 2: 0x5A4
- stack 1: 0x101
- stack 0: 0x20
2913	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A4
- stack 1: 0x101
- stack 0: 0x5A0
2914	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5A4
- stack 0: 0x6A1
2915	 A7	PUSH2	0020	 	 
- stack 2: 0x5A4
- stack 1: 0x6A1
- stack 0: 0x20
2916	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A4
2917	 AB	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2918	 AD	ADD		 	 
- stack 0: 0x5A8
2919	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2920	 AF	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0xB4000100E9FFF0011D00AC01DA000101F900020213FFE401030010015F0000
2921	 B0	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0xB4000100E9FFF0011D00AC01DA000101F900020213FFE401030010015F0000
- stack 0: 0xF0
2922	 B2	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0xB4
2923	 B3	JUMP		 	 
- stack 0: 0x5A8
2924	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x5A8
2925	 B5	PUSH2	0020	 	 
- stack 1: 0x5A8
- stack 0: 0x20
2926	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5A8
- stack 0: 0x6A1
2927	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
2928	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A8
- stack 0: 0x6A1
2929	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0x5A8
2930	 C0	MLOAD		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0xB4000100E9FFF0011D00AC01DA000101F900020213FFE401030010015F0000
2931	 C1	PUSH1	E0	 	 
- stack 3: 0x5A8
- stack 2: 0x6A1
- stack 1: 0xB4000100E9FFF0011D00AC01DA000101F900020213FFE401030010015F0000
- stack 0: 0xE0
2932	 C3	SHR		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0xB40001
2933	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5A8
- stack 2: 0x6A1
- stack 1: 0xB40001
- stack 0: 0xFFFF
2934	 C7	AND		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0x1
2935	 C8	PUSH1	01	 	 
- stack 3: 0x5A8
- stack 2: 0x6A1
- stack 1: 0x1
- stack 0: 0x1
2936	 CA	SIGNEXTEND		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0x1
2937	 CB	ADD		 	 
- stack 1: 0x5A8
- stack 0: 0x6A2
2938	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
2939	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A8
- stack 0: 0x6A2
2940	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x5A8
- stack 1: 0x6A2
- stack 0: 0x3
2941	 D4	XOR		 	 
- stack 1: 0x5A8
- stack 0: 0x6A1
2942	 D5	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0xF000FF0000000000000000000000000000000000000000000000000000000000
2943	 D6	PUSH1	F8	 	 
- stack 2: 0x5A8
- stack 1: 0xF000FF0000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
2944	 D8	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0xF0
2945	 D9	PUSH1	00	 	 
- stack 2: 0x5A8
- stack 1: 0xF0
- stack 0: 0x0
2946	 DB	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2947	 DC	PUSH2	0060	 	 
- stack 2: 0x5A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x60
2948	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A8
2949	 E0	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2950	 E2	ADD		 	 
- stack 0: 0x5AC
2951	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2952	 E4	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xE9FFF0011D00AC01DA000101F900020213FFE401030010015F000000860000
2953	 E5	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0xE9FFF0011D00AC01DA000101F900020213FFE401030010015F000000860000
- stack 0: 0xF0
2954	 E7	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xE9
2955	 E8	JUMP		 	 
- stack 0: 0x5AC
2956	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x5AC
2957	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2958	 EB	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xE9FFF0011D00AC01DA000101F900020213FFE401030010015F000000860000
2959	 EC	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0xE9FFF0011D00AC01DA000101F900020213FFE401030010015F000000860000
- stack 0: 0xE0
2960	 EE	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xE9FFF0
2961	 EF	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0xE9FFF0
- stack 0: 0xFFFF
2962	 F2	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFF0
2963	 F3	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xFFF0
- stack 0: 0x1
2964	 F5	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2965	 F6	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
2966	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x5AC
2967	 FA	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2968	 FC	ADD		 	 
- stack 0: 0x5B0
2969	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2970	 FE	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x11D00AC01DA000101F900020213FFE401030010015F000000860000009500DA
2971	 FF	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x11D00AC01DA000101F900020213FFE401030010015F000000860000009500DA
- stack 0: 0xF0
2972	 101	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x11D
2973	 102	JUMP		 	 
- stack 0: 0x5B0
2974	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x5B0
2975	 11E	PUSH2	0060	 	 
- stack 1: 0x5B0
- stack 0: 0x60
2976	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x5B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2977	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFFFFFFF
2978	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B0
- stack 0: 0xFFFFFFF0
2979	 128	PUSH2	03A0	 	 
- stack 2: 0x5B0
- stack 1: 0xFFFFFFF0
- stack 0: 0x3A0
2980	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B0
- stack 1: 0xFFFFFFF0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2981	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B0
- stack 2: 0xFFFFFFF0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFFFFFFF
2982	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B0
- stack 1: 0xFFFFFFF0
- stack 0: 0xFFFFFFF0
2983	 132	SUB		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2984	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x13B
2985	 136	JUMPI		 	 
- stack 0: 0x5B0
2986	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x5B0
- stack 0: 0x155
2987	 13A	JUMP		 	 
- stack 0: 0x5B0
2988	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x5B0
2989	 156	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2990	 158	ADD		 	 
- stack 0: 0x5B4
2991	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2992	 15A	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1DA000101F900020213FFE401030010015F000000860000009500DA02550000
2993	 15B	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x1DA000101F900020213FFE401030010015F000000860000009500DA02550000
- stack 0: 0xF0
2994	 15D	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1DA
2995	 15E	JUMP		 	 
- stack 0: 0x5B4
2996	 1DA	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B4
2997	 1DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2998	 1DC	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1DA000101F900020213FFE401030010015F000000860000009500DA02550000
2999	 1DD	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x1DA000101F900020213FFE401030010015F000000860000009500DA02550000
- stack 0: 0xE0
3000	 1DF	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1DA0001
3001	 1E0	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x1DA0001
- stack 0: 0xFFFF
3002	 1E3	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
3003	 1E4	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
3004	 1E6	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
3005	 1E7	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x80
3006	 1EA	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
3007	 1EB	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B4
- stack 0: 0x2
3008	 1EC	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0x80
3009	 1EF	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B4
3010	 1F0	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
3011	 1F2	ADD		 	 
- stack 0: 0x5B8
3012	 1F3	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
3013	 1F4	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1F900020213FFE401030010015F000000860000009500DA0255000000B40001
3014	 1F5	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x1F900020213FFE401030010015F000000860000009500DA0255000000B40001
- stack 0: 0xF0
3015	 1F7	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1F9
3016	 1F8	JUMP		 	 
- stack 0: 0x5B8
3017	 1F9	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B8
3018	 1FA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
3019	 1FB	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1F900020213FFE401030010015F000000860000009500DA0255000000B40001
3020	 1FC	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x1F900020213FFE401030010015F000000860000009500DA0255000000B40001
- stack 0: 0xE0
3021	 1FE	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1F90002
3022	 1FF	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x1F90002
- stack 0: 0xFFFF
3023	 202	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
3024	 203	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0x1
3025	 205	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
3026	 206	PUSH2	00A0	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0xA0
3027	 209	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B8
3028	 20A	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
3029	 20C	ADD		 	 
- stack 0: 0x5BC
3030	 20D	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
3031	 20E	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x213FFE401030010015F000000860000009500DA0255000000B4000100E9000F
3032	 20F	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x213FFE401030010015F000000860000009500DA0255000000B4000100E9000F
- stack 0: 0xF0
3033	 211	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x213
3034	 212	JUMP		 	 
- stack 0: 0x5BC
3035	 213	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5BC
3036	 214	PUSH2	0080	 	 
- stack 1: 0x5BC
- stack 0: 0x80
3037	 217	MLOAD		 	  ;; # read from x4
- stack 1: 0x5BC
- stack 0: 0x2
3038	 218	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3039	 21D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x2
3040	 21E	PUSH2	00A0	 	 
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0xA0
3041	 221	MLOAD		 	  ;; # read from x5
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0x2
3042	 222	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3043	 227	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0x2
3044	 228	SUB		 	 
- stack 1: 0x5BC
- stack 0: 0x0
3045	 229	PUSH2	0231	 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x231
3046	 22C	JUMPI		 	 
- stack 0: 0x5BC
3047	 22D	PUSH2	024B	 ;; _neq_after_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 1: 0x5BC
- stack 0: 0x24B
3048	 230	JUMP		 	 
- stack 0: 0x5BC
3049	 24B	JUMPDEST		 ;; _neq_after_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 0: 0x5BC
3050	 24C	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
3051	 24E	ADD		 	 
- stack 0: 0x5C0
3052	 24F	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
3053	 250	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x1030010015F000000860000009500DA0255000000B4000100E9000F011D0080
3054	 251	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x1030010015F000000860000009500DA0255000000B4000100E9000F011D0080
- stack 0: 0xF0
3055	 253	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x103
3056	 254	JUMP		 	 
- stack 0: 0x5C0
3057	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5C0
3058	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
3059	 105	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x1030010015F000000860000009500DA0255000000B4000100E9000F011D0080
3060	 106	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x1030010015F000000860000009500DA0255000000B4000100E9000F011D0080
- stack 0: 0xE0
3061	 108	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x1030010
3062	 109	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x1030010
- stack 0: 0xFFFF
3063	 10C	AND		 	 
- stack 1: 0x5C0
- stack 0: 0x10
3064	 10D	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0x10
- stack 0: 0x1
3065	 10F	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0x10
3066	 110	PUSH2	0380	 	 
- stack 2: 0x5C0
- stack 1: 0x10
- stack 0: 0x380
3067	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x5C0
3068	 114	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
3069	 116	ADD		 	 
- stack 0: 0x5C4
3070	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
3071	 118	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x15F000000860000009500DA0255000000B4000100E9000F011D008001DA0001
3072	 119	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x15F000000860000009500DA0255000000B4000100E9000F011D008001DA0001
- stack 0: 0xF0
3073	 11B	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x15F
3074	 11C	JUMP		 	 
- stack 0: 0x5C4
3075	 15F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5C4
3076	 160	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
3077	 161	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x15F000000860000009500DA0255000000B4000100E9000F011D008001DA0001
3078	 162	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x15F000000860000009500DA0255000000B4000100E9000F011D008001DA0001
- stack 0: 0xE0
3079	 164	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x15F0000
3080	 165	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x15F0000
- stack 0: 0xFFFF
3081	 168	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
3082	 169	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x1
3083	 16B	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
3084	 16C	PUSH2	0080	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x80
3085	 16F	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C4
3086	 170	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
3087	 172	ADD		 	 
- stack 0: 0x5C8
3088	 173	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
3089	 174	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x860000009500DA0255000000B4000100E9000F011D008001DA000101F90002
3090	 175	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x860000009500DA0255000000B4000100E9000F011D008001DA000101F90002
- stack 0: 0xF0
3091	 177	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x86
3092	 178	JUMP		 	 
- stack 0: 0x5C8
3093	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5C8
3094	 87	DUP1		 	 
- stack 1: 0x5C8
- stack 0: 0x5C8
3095	 88	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x5C8
- stack 0: 0x20
3096	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
3097	 8C	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
3098	 8E	ADD		 	 
- stack 0: 0x5CC
3099	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
3100	 90	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x9500DA0255000000B4000100E9000F011D008001DA000101F900020213FFE0
3101	 91	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x9500DA0255000000B4000100E9000F011D008001DA000101F900020213FFE0
- stack 0: 0xF0
3102	 93	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x95
3103	 94	JUMP		 	 
- stack 0: 0x5CC
3104	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x5CC
3105	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
3106	 97	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x9500DA0255000000B4000100E9000F011D008001DA000101F900020213FFE0
3107	 98	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x9500DA0255000000B4000100E9000F011D008001DA000101F900020213FFE0
- stack 0: 0xE0
3108	 9A	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x9500DA
3109	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x9500DA
- stack 0: 0xFFFF
3110	 9E	AND		 	 
- stack 1: 0x5CC
- stack 0: 0xDA
3111	 9F	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0xDA
- stack 0: 0x1
3112	 A1	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xDA
3113	 A2	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0xDA
- stack 0: 0x20
3114	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5CC
- stack 1: 0xDA
- stack 0: 0x5C8
3115	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5CC
- stack 0: 0x6A2
3116	 A7	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0x6A2
- stack 0: 0x20
3117	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5CC
3118	 AB	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
3119	 AD	ADD		 	 
- stack 0: 0x5D0
3120	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
3121	 AF	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x255000000B4000100E9000F011D008001DA000101F900020213FFE001030011
3122	 B0	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x255000000B4000100E9000F011D008001DA000101F900020213FFE001030011
- stack 0: 0xF0
3123	 B2	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x255
3124	 B3	JUMP		 	 
- stack 0: 0x5D0
3125	 255	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5D0
3126	 256	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
3127	 257	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x255000000B4000100E9000F011D008001DA000101F900020213FFE001030011
3128	 258	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x255000000B4000100E9000F011D008001DA000101F900020213FFE001030011
- stack 0: 0xE0
3129	 25A	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x2550000
3130	 25B	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x2550000
- stack 0: 0xFFFF
3131	 25E	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
3132	 25F	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x1
3133	 261	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
3134	 262	POP		 	 
- stack 0: 0x5D0
3135	 263	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
3136	 265	ADD		 	 
- stack 0: 0x5D4
3137	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3138	 267	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xB4000100E9000F011D008001DA000101F900020213FFE001030011015F0000
3139	 268	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0xB4000100E9000F011D008001DA000101F900020213FFE001030011015F0000
- stack 0: 0xF0
3140	 26A	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xB4
3141	 26B	JUMP		 	 
- stack 0: 0x5D4
3142	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x5D4
3143	 B5	PUSH2	0020	 	 
- stack 1: 0x5D4
- stack 0: 0x20
3144	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5D4
- stack 0: 0x6A2
3145	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
3146	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x6A2
3147	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0x5D4
3148	 C0	MLOAD		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0xB4000100E9000F011D008001DA000101F900020213FFE001030011015F0000
3149	 C1	PUSH1	E0	 	 
- stack 3: 0x5D4
- stack 2: 0x6A2
- stack 1: 0xB4000100E9000F011D008001DA000101F900020213FFE001030011015F0000
- stack 0: 0xE0
3150	 C3	SHR		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0xB40001
3151	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x6A2
- stack 1: 0xB40001
- stack 0: 0xFFFF
3152	 C7	AND		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0x1
3153	 C8	PUSH1	01	 	 
- stack 3: 0x5D4
- stack 2: 0x6A2
- stack 1: 0x1
- stack 0: 0x1
3154	 CA	SIGNEXTEND		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0x1
3155	 CB	ADD		 	 
- stack 1: 0x5D4
- stack 0: 0x6A3
3156	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
3157	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x6A3
3158	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x5D4
- stack 1: 0x6A3
- stack 0: 0x3
3159	 D4	XOR		 	 
- stack 1: 0x5D4
- stack 0: 0x6A0
3160	 D5	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xFF000FF00000000000000000000000000000000000000000000000000000000
3161	 D6	PUSH1	F8	 	 
- stack 2: 0x5D4
- stack 1: 0xFF000FF00000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
3162	 D8	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xF
3163	 D9	PUSH1	00	 	 
- stack 2: 0x5D4
- stack 1: 0xF
- stack 0: 0x0
3164	 DB	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0xF
3165	 DC	PUSH2	0060	 	 
- stack 2: 0x5D4
- stack 1: 0xF
- stack 0: 0x60
3166	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x5D4
3167	 E0	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3168	 E2	ADD		 	 
- stack 0: 0x5D8
3169	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3170	 E4	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xE9000F011D008001DA000101F900020213FFE001030011015F000000860000
3171	 E5	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0xE9000F011D008001DA000101F900020213FFE001030011015F000000860000
- stack 0: 0xF0
3172	 E7	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xE9
3173	 E8	JUMP		 	 
- stack 0: 0x5D8
3174	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x5D8
3175	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
3176	 EB	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xE9000F011D008001DA000101F900020213FFE001030011015F000000860000
3177	 EC	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0xE9000F011D008001DA000101F900020213FFE001030011015F000000860000
- stack 0: 0xE0
3178	 EE	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xE9000F
3179	 EF	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0xE9000F
- stack 0: 0xFFFF
3180	 F2	AND		 	 
- stack 1: 0x5D8
- stack 0: 0xF
3181	 F3	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0xF
- stack 0: 0x1
3182	 F5	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0xF
3183	 F6	PUSH2	03A0	 	 
- stack 2: 0x5D8
- stack 1: 0xF
- stack 0: 0x3A0
3184	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D8
3185	 FA	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3186	 FC	ADD		 	 
- stack 0: 0x5DC
3187	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3188	 FE	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x11D008001DA000101F900020213FFE001030011015F000000860000009500AC
3189	 FF	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x11D008001DA000101F900020213FFE001030011015F000000860000009500AC
- stack 0: 0xF0
3190	 101	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x11D
3191	 102	JUMP		 	 
- stack 0: 0x5DC
3192	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x5DC
3193	 11E	PUSH2	0060	 	 
- stack 1: 0x5DC
- stack 0: 0x60
3194	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x5DC
- stack 0: 0xF
3195	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
3196	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5DC
- stack 0: 0xF
3197	 128	PUSH2	03A0	 	 
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0x3A0
3198	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0xF
3199	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5DC
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
3200	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0xF
3201	 132	SUB		 	 
- stack 1: 0x5DC
- stack 0: 0x0
3202	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x13B
3203	 136	JUMPI		 	 
- stack 0: 0x5DC
3204	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x5DC
- stack 0: 0x155
3205	 13A	JUMP		 	 
- stack 0: 0x5DC
3206	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x5DC
3207	 156	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
3208	 158	ADD		 	 
- stack 0: 0x5E0
3209	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
3210	 15A	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x1DA000101F900020213FFE001030011015F000000860000009500AC02550000
3211	 15B	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x1DA000101F900020213FFE001030011015F000000860000009500AC02550000
- stack 0: 0xF0
3212	 15D	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x1DA
3213	 15E	JUMP		 	 
- stack 0: 0x5E0
3214	 1DA	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5E0
3215	 1DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
3216	 1DC	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x1DA000101F900020213FFE001030011015F000000860000009500AC02550000
3217	 1DD	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x1DA000101F900020213FFE001030011015F000000860000009500AC02550000
- stack 0: 0xE0
3218	 1DF	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x1DA0001
3219	 1E0	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x1DA0001
- stack 0: 0xFFFF
3220	 1E3	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
3221	 1E4	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1
3222	 1E6	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
3223	 1E7	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x80
3224	 1EA	MLOAD		 	  ;; # read from x4
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x0
3225	 1EB	ADD		 	  ;; # ADDI 4
- stack 1: 0x5E0
- stack 0: 0x1
3226	 1EC	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x80
3227	 1EF	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E0
3228	 1F0	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
3229	 1F2	ADD		 	 
- stack 0: 0x5E4
3230	 1F3	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3231	 1F4	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1F900020213FFE001030011015F000000860000009500AC0255000002550000
3232	 1F5	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x1F900020213FFE001030011015F000000860000009500AC0255000002550000
- stack 0: 0xF0
3233	 1F7	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1F9
3234	 1F8	JUMP		 	 
- stack 0: 0x5E4
3235	 1F9	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5E4
3236	 1FA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
3237	 1FB	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1F900020213FFE001030011015F000000860000009500AC0255000002550000
3238	 1FC	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x1F900020213FFE001030011015F000000860000009500AC0255000002550000
- stack 0: 0xE0
3239	 1FE	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1F90002
3240	 1FF	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x1F90002
- stack 0: 0xFFFF
3241	 202	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
3242	 203	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0x1
3243	 205	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
3244	 206	PUSH2	00A0	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0xA0
3245	 209	MSTORE		 	  ;; # store to x5
- stack 0: 0x5E4
3246	 20A	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3247	 20C	ADD		 	 
- stack 0: 0x5E8
3248	 20D	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3249	 20E	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x213FFE001030011015F000000860000009500AC025500000255000000B40001
3250	 20F	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x213FFE001030011015F000000860000009500AC025500000255000000B40001
- stack 0: 0xF0
3251	 211	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x213
3252	 212	JUMP		 	 
- stack 0: 0x5E8
3253	 213	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5E8
3254	 214	PUSH2	0080	 	 
- stack 1: 0x5E8
- stack 0: 0x80
3255	 217	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E8
- stack 0: 0x1
3256	 218	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3257	 21D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E8
- stack 0: 0x1
3258	 21E	PUSH2	00A0	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0xA0
3259	 221	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x2
3260	 222	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3261	 227	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x2
3262	 228	SUB		 	 
- stack 1: 0x5E8
- stack 0: 0x1
3263	 229	PUSH2	0231	 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x231
3264	 22C	JUMPI		 	 
- stack 0: 0x5E8
3265	 231	JUMPDEST		 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 0: 0x5E8
3266	 232	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
3267	 233	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x213FFE001030011015F000000860000009500AC025500000255000000B40001
3268	 234	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x213FFE001030011015F000000860000009500AC025500000255000000B40001
- stack 0: 0xE0
3269	 236	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x213FFE0
3270	 237	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x213FFE0
- stack 0: 0xFFFF
3271	 23A	AND		 	 
- stack 1: 0x5E8
- stack 0: 0xFFE0
3272	 23B	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0xFFE0
- stack 0: 0x1
3273	 23D	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3274	 23E	ADD		 	 
- stack 0: 0x5C8
3275	 23F	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFF
3276	 244	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5C8
3277	 245	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
3278	 246	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x860000009500DA0255000000B4000100E9000F011D008001DA000101F90002
3279	 247	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x860000009500DA0255000000B4000100E9000F011D008001DA000101F90002
- stack 0: 0xF0
3280	 249	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x86
3281	 24A	JUMP		 	 
- stack 0: 0x5C8
3282	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5C8
3283	 87	DUP1		 	 
- stack 1: 0x5C8
- stack 0: 0x5C8
3284	 88	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x5C8
- stack 0: 0x20
3285	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
3286	 8C	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
3287	 8E	ADD		 	 
- stack 0: 0x5CC
3288	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
3289	 90	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x9500DA0255000000B4000100E9000F011D008001DA000101F900020213FFE0
3290	 91	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x9500DA0255000000B4000100E9000F011D008001DA000101F900020213FFE0
- stack 0: 0xF0
3291	 93	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x95
3292	 94	JUMP		 	 
- stack 0: 0x5CC
3293	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x5CC
3294	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
3295	 97	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x9500DA0255000000B4000100E9000F011D008001DA000101F900020213FFE0
3296	 98	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x9500DA0255000000B4000100E9000F011D008001DA000101F900020213FFE0
- stack 0: 0xE0
3297	 9A	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x9500DA
3298	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x9500DA
- stack 0: 0xFFFF
3299	 9E	AND		 	 
- stack 1: 0x5CC
- stack 0: 0xDA
3300	 9F	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0xDA
- stack 0: 0x1
3301	 A1	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xDA
3302	 A2	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0xDA
- stack 0: 0x20
3303	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5CC
- stack 1: 0xDA
- stack 0: 0x5C8
3304	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5CC
- stack 0: 0x6A2
3305	 A7	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0x6A2
- stack 0: 0x20
3306	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5CC
3307	 AB	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
3308	 AD	ADD		 	 
- stack 0: 0x5D0
3309	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
3310	 AF	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x255000000B4000100E9000F011D008001DA000101F900020213FFE001030011
3311	 B0	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x255000000B4000100E9000F011D008001DA000101F900020213FFE001030011
- stack 0: 0xF0
3312	 B2	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x255
3313	 B3	JUMP		 	 
- stack 0: 0x5D0
3314	 255	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5D0
3315	 256	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
3316	 257	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x255000000B4000100E9000F011D008001DA000101F900020213FFE001030011
3317	 258	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x255000000B4000100E9000F011D008001DA000101F900020213FFE001030011
- stack 0: 0xE0
3318	 25A	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x2550000
3319	 25B	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x2550000
- stack 0: 0xFFFF
3320	 25E	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
3321	 25F	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x1
3322	 261	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
3323	 262	POP		 	 
- stack 0: 0x5D0
3324	 263	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
3325	 265	ADD		 	 
- stack 0: 0x5D4
3326	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3327	 267	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xB4000100E9000F011D008001DA000101F900020213FFE001030011015F0000
3328	 268	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0xB4000100E9000F011D008001DA000101F900020213FFE001030011015F0000
- stack 0: 0xF0
3329	 26A	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xB4
3330	 26B	JUMP		 	 
- stack 0: 0x5D4
3331	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x5D4
3332	 B5	PUSH2	0020	 	 
- stack 1: 0x5D4
- stack 0: 0x20
3333	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5D4
- stack 0: 0x6A2
3334	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
3335	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x6A2
3336	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0x5D4
3337	 C0	MLOAD		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0xB4000100E9000F011D008001DA000101F900020213FFE001030011015F0000
3338	 C1	PUSH1	E0	 	 
- stack 3: 0x5D4
- stack 2: 0x6A2
- stack 1: 0xB4000100E9000F011D008001DA000101F900020213FFE001030011015F0000
- stack 0: 0xE0
3339	 C3	SHR		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0xB40001
3340	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x6A2
- stack 1: 0xB40001
- stack 0: 0xFFFF
3341	 C7	AND		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0x1
3342	 C8	PUSH1	01	 	 
- stack 3: 0x5D4
- stack 2: 0x6A2
- stack 1: 0x1
- stack 0: 0x1
3343	 CA	SIGNEXTEND		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0x1
3344	 CB	ADD		 	 
- stack 1: 0x5D4
- stack 0: 0x6A3
3345	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
3346	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x6A3
3347	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x5D4
- stack 1: 0x6A3
- stack 0: 0x3
3348	 D4	XOR		 	 
- stack 1: 0x5D4
- stack 0: 0x6A0
3349	 D5	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xFF000FF00000000000000000000000000000000000000000000000000000000
3350	 D6	PUSH1	F8	 	 
- stack 2: 0x5D4
- stack 1: 0xFF000FF00000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
3351	 D8	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xF
3352	 D9	PUSH1	00	 	 
- stack 2: 0x5D4
- stack 1: 0xF
- stack 0: 0x0
3353	 DB	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0xF
3354	 DC	PUSH2	0060	 	 
- stack 2: 0x5D4
- stack 1: 0xF
- stack 0: 0x60
3355	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x5D4
3356	 E0	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3357	 E2	ADD		 	 
- stack 0: 0x5D8
3358	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3359	 E4	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xE9000F011D008001DA000101F900020213FFE001030011015F000000860000
3360	 E5	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0xE9000F011D008001DA000101F900020213FFE001030011015F000000860000
- stack 0: 0xF0
3361	 E7	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xE9
3362	 E8	JUMP		 	 
- stack 0: 0x5D8
3363	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x5D8
3364	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
3365	 EB	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xE9000F011D008001DA000101F900020213FFE001030011015F000000860000
3366	 EC	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0xE9000F011D008001DA000101F900020213FFE001030011015F000000860000
- stack 0: 0xE0
3367	 EE	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xE9000F
3368	 EF	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0xE9000F
- stack 0: 0xFFFF
3369	 F2	AND		 	 
- stack 1: 0x5D8
- stack 0: 0xF
3370	 F3	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0xF
- stack 0: 0x1
3371	 F5	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0xF
3372	 F6	PUSH2	03A0	 	 
- stack 2: 0x5D8
- stack 1: 0xF
- stack 0: 0x3A0
3373	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D8
3374	 FA	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3375	 FC	ADD		 	 
- stack 0: 0x5DC
3376	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3377	 FE	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x11D008001DA000101F900020213FFE001030011015F000000860000009500AC
3378	 FF	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x11D008001DA000101F900020213FFE001030011015F000000860000009500AC
- stack 0: 0xF0
3379	 101	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x11D
3380	 102	JUMP		 	 
- stack 0: 0x5DC
3381	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x5DC
3382	 11E	PUSH2	0060	 	 
- stack 1: 0x5DC
- stack 0: 0x60
3383	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x5DC
- stack 0: 0xF
3384	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
3385	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5DC
- stack 0: 0xF
3386	 128	PUSH2	03A0	 	 
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0x3A0
3387	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0xF
3388	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5DC
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
3389	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0xF
3390	 132	SUB		 	 
- stack 1: 0x5DC
- stack 0: 0x0
3391	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x13B
3392	 136	JUMPI		 	 
- stack 0: 0x5DC
3393	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x5DC
- stack 0: 0x155
3394	 13A	JUMP		 	 
- stack 0: 0x5DC
3395	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x5DC
3396	 156	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
3397	 158	ADD		 	 
- stack 0: 0x5E0
3398	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
3399	 15A	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x1DA000101F900020213FFE001030011015F000000860000009500AC02550000
3400	 15B	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x1DA000101F900020213FFE001030011015F000000860000009500AC02550000
- stack 0: 0xF0
3401	 15D	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x1DA
3402	 15E	JUMP		 	 
- stack 0: 0x5E0
3403	 1DA	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5E0
3404	 1DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
3405	 1DC	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x1DA000101F900020213FFE001030011015F000000860000009500AC02550000
3406	 1DD	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x1DA000101F900020213FFE001030011015F000000860000009500AC02550000
- stack 0: 0xE0
3407	 1DF	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x1DA0001
3408	 1E0	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x1DA0001
- stack 0: 0xFFFF
3409	 1E3	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
3410	 1E4	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1
3411	 1E6	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
3412	 1E7	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x80
3413	 1EA	MLOAD		 	  ;; # read from x4
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1
3414	 1EB	ADD		 	  ;; # ADDI 4
- stack 1: 0x5E0
- stack 0: 0x2
3415	 1EC	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0x80
3416	 1EF	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E0
3417	 1F0	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
3418	 1F2	ADD		 	 
- stack 0: 0x5E4
3419	 1F3	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3420	 1F4	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1F900020213FFE001030011015F000000860000009500AC0255000002550000
3421	 1F5	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x1F900020213FFE001030011015F000000860000009500AC0255000002550000
- stack 0: 0xF0
3422	 1F7	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1F9
3423	 1F8	JUMP		 	 
- stack 0: 0x5E4
3424	 1F9	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5E4
3425	 1FA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
3426	 1FB	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1F900020213FFE001030011015F000000860000009500AC0255000002550000
3427	 1FC	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x1F900020213FFE001030011015F000000860000009500AC0255000002550000
- stack 0: 0xE0
3428	 1FE	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1F90002
3429	 1FF	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x1F90002
- stack 0: 0xFFFF
3430	 202	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
3431	 203	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0x1
3432	 205	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
3433	 206	PUSH2	00A0	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0xA0
3434	 209	MSTORE		 	  ;; # store to x5
- stack 0: 0x5E4
3435	 20A	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3436	 20C	ADD		 	 
- stack 0: 0x5E8
3437	 20D	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3438	 20E	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x213FFE001030011015F000000860000009500AC025500000255000000B40001
3439	 20F	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x213FFE001030011015F000000860000009500AC025500000255000000B40001
- stack 0: 0xF0
3440	 211	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x213
3441	 212	JUMP		 	 
- stack 0: 0x5E8
3442	 213	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5E8
3443	 214	PUSH2	0080	 	 
- stack 1: 0x5E8
- stack 0: 0x80
3444	 217	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E8
- stack 0: 0x2
3445	 218	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3446	 21D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E8
- stack 0: 0x2
3447	 21E	PUSH2	00A0	 	 
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0xA0
3448	 221	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0x2
3449	 222	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3450	 227	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0x2
3451	 228	SUB		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3452	 229	PUSH2	0231	 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x231
3453	 22C	JUMPI		 	 
- stack 0: 0x5E8
3454	 22D	PUSH2	024B	 ;; _neq_after_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 1: 0x5E8
- stack 0: 0x24B
3455	 230	JUMP		 	 
- stack 0: 0x5E8
3456	 24B	JUMPDEST		 ;; _neq_after_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 0: 0x5E8
3457	 24C	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3458	 24E	ADD		 	 
- stack 0: 0x5EC
3459	 24F	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3460	 250	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x1030011015F000000860000009500AC025500000255000000B4000100E90000
3461	 251	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x1030011015F000000860000009500AC025500000255000000B4000100E90000
- stack 0: 0xF0
3462	 253	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x103
3463	 254	JUMP		 	 
- stack 0: 0x5EC
3464	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5EC
3465	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
3466	 105	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x1030011015F000000860000009500AC025500000255000000B4000100E90000
3467	 106	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x1030011015F000000860000009500AC025500000255000000B4000100E90000
- stack 0: 0xE0
3468	 108	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x1030011
3469	 109	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x1030011
- stack 0: 0xFFFF
3470	 10C	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x11
3471	 10D	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x11
- stack 0: 0x1
3472	 10F	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x11
3473	 110	PUSH2	0380	 	 
- stack 2: 0x5EC
- stack 1: 0x11
- stack 0: 0x380
3474	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x5EC
3475	 114	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3476	 116	ADD		 	 
- stack 0: 0x5F0
3477	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3478	 118	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x15F000000860000009500AC025500000255000000B4000100E90000011D0050
3479	 119	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x15F000000860000009500AC025500000255000000B4000100E90000011D0050
- stack 0: 0xF0
3480	 11B	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x15F
3481	 11C	JUMP		 	 
- stack 0: 0x5F0
3482	 15F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5F0
3483	 160	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3484	 161	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x15F000000860000009500AC025500000255000000B4000100E90000011D0050
3485	 162	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x15F000000860000009500AC025500000255000000B4000100E90000011D0050
- stack 0: 0xE0
3486	 164	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x15F0000
3487	 165	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x15F0000
- stack 0: 0xFFFF
3488	 168	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3489	 169	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x1
3490	 16B	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3491	 16C	PUSH2	0080	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x80
3492	 16F	MSTORE		 	  ;; # store to x4
- stack 0: 0x5F0
3493	 170	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3494	 172	ADD		 	 
- stack 0: 0x5F4
3495	 173	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3496	 174	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x860000009500AC025500000255000000B4000100E90000011D005001DA0001
3497	 175	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x860000009500AC025500000255000000B4000100E90000011D005001DA0001
- stack 0: 0xF0
3498	 177	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x86
3499	 178	JUMP		 	 
- stack 0: 0x5F4
3500	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5F4
3501	 87	DUP1		 	 
- stack 1: 0x5F4
- stack 0: 0x5F4
3502	 88	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0x5F4
- stack 0: 0x20
3503	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F4
3504	 8C	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3505	 8E	ADD		 	 
- stack 0: 0x5F8
3506	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3507	 90	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x9500AC025500000255000000B4000100E90000011D005001DA000101F90002
3508	 91	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x9500AC025500000255000000B4000100E90000011D005001DA000101F90002
- stack 0: 0xF0
3509	 93	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x95
3510	 94	JUMP		 	 
- stack 0: 0x5F8
3511	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x5F8
3512	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3513	 97	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x9500AC025500000255000000B4000100E90000011D005001DA000101F90002
3514	 98	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x9500AC025500000255000000B4000100E90000011D005001DA000101F90002
- stack 0: 0xE0
3515	 9A	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x9500AC
3516	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x9500AC
- stack 0: 0xFFFF
3517	 9E	AND		 	 
- stack 1: 0x5F8
- stack 0: 0xAC
3518	 9F	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xAC
- stack 0: 0x1
3519	 A1	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xAC
3520	 A2	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0xAC
- stack 0: 0x20
3521	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F8
- stack 1: 0xAC
- stack 0: 0x5F4
3522	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F8
- stack 0: 0x6A0
3523	 A7	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0x6A0
- stack 0: 0x20
3524	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F8
3525	 AB	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3526	 AD	ADD		 	 
- stack 0: 0x5FC
3527	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3528	 AF	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x25500000255000000B4000100E90000011D005001DA000101F900020213FFDC
3529	 B0	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x25500000255000000B4000100E90000011D005001DA000101F900020213FFDC
- stack 0: 0xF0
3530	 B2	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x255
3531	 B3	JUMP		 	 
- stack 0: 0x5FC
3532	 255	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5FC
3533	 256	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3534	 257	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x25500000255000000B4000100E90000011D005001DA000101F900020213FFDC
3535	 258	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x25500000255000000B4000100E90000011D005001DA000101F900020213FFDC
- stack 0: 0xE0
3536	 25A	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x2550000
3537	 25B	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x2550000
- stack 0: 0xFFFF
3538	 25E	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3539	 25F	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
3540	 261	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3541	 262	POP		 	 
- stack 0: 0x5FC
3542	 263	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3543	 265	ADD		 	 
- stack 0: 0x600
3544	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3545	 267	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x255000000B4000100E90000011D005001DA000101F900020213FFDC026C0000
3546	 268	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x255000000B4000100E90000011D005001DA000101F900020213FFDC026C0000
- stack 0: 0xF0
3547	 26A	SHR		 	 
- stack 1: 0x600
- stack 0: 0x255
3548	 26B	JUMP		 	 
- stack 0: 0x600
3549	 255	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x600
3550	 256	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3551	 257	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x255000000B4000100E90000011D005001DA000101F900020213FFDC026C0000
3552	 258	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x255000000B4000100E90000011D005001DA000101F900020213FFDC026C0000
- stack 0: 0xE0
3553	 25A	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2550000
3554	 25B	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x2550000
- stack 0: 0xFFFF
3555	 25E	AND		 	 
- stack 1: 0x600
- stack 0: 0x0
3556	 25F	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x1
3557	 261	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x0
3558	 262	POP		 	 
- stack 0: 0x600
3559	 263	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3560	 265	ADD		 	 
- stack 0: 0x604
3561	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3562	 267	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0xB4000100E90000011D005001DA000101F900020213FFDC026C0000027B0084
3563	 268	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0xB4000100E90000011D005001DA000101F900020213FFDC026C0000027B0084
- stack 0: 0xF0
3564	 26A	SHR		 	 
- stack 1: 0x604
- stack 0: 0xB4
3565	 26B	JUMP		 	 
- stack 0: 0x604
3566	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x604
3567	 B5	PUSH2	0020	 	 
- stack 1: 0x604
- stack 0: 0x20
3568	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x604
- stack 0: 0x6A0
3569	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
3570	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0x6A0
3571	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0x604
3572	 C0	MLOAD		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0xB4000100E90000011D005001DA000101F900020213FFDC026C0000027B0084
3573	 C1	PUSH1	E0	 	 
- stack 3: 0x604
- stack 2: 0x6A0
- stack 1: 0xB4000100E90000011D005001DA000101F900020213FFDC026C0000027B0084
- stack 0: 0xE0
3574	 C3	SHR		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0xB40001
3575	 C4	PUSH2	FFFF	 	 
- stack 3: 0x604
- stack 2: 0x6A0
- stack 1: 0xB40001
- stack 0: 0xFFFF
3576	 C7	AND		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0x1
3577	 C8	PUSH1	01	 	 
- stack 3: 0x604
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1
3578	 CA	SIGNEXTEND		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0x1
3579	 CB	ADD		 	 
- stack 1: 0x604
- stack 0: 0x6A1
3580	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
3581	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0x6A1
3582	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x604
- stack 1: 0x6A1
- stack 0: 0x3
3583	 D4	XOR		 	 
- stack 1: 0x604
- stack 0: 0x6A2
3584	 D5	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0xFF000000000000000000000000000000000000000000000000000000000000
3585	 D6	PUSH1	F8	 	 
- stack 2: 0x604
- stack 1: 0xFF000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
3586	 D8	SHR		 	 
- stack 1: 0x604
- stack 0: 0x0
3587	 D9	PUSH1	00	 	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x0
3588	 DB	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x0
3589	 DC	PUSH2	0060	 	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x60
3590	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x604
3591	 E0	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3592	 E2	ADD		 	 
- stack 0: 0x608
3593	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3594	 E4	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0xE90000011D005001DA000101F900020213FFDC026C0000027B0084029A0000
3595	 E5	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0xE90000011D005001DA000101F900020213FFDC026C0000027B0084029A0000
- stack 0: 0xF0
3596	 E7	SHR		 	 
- stack 1: 0x608
- stack 0: 0xE9
3597	 E8	JUMP		 	 
- stack 0: 0x608
3598	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x608
3599	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3600	 EB	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0xE90000011D005001DA000101F900020213FFDC026C0000027B0084029A0000
3601	 EC	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0xE90000011D005001DA000101F900020213FFDC026C0000027B0084029A0000
- stack 0: 0xE0
3602	 EE	SHR		 	 
- stack 1: 0x608
- stack 0: 0xE90000
3603	 EF	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0xE90000
- stack 0: 0xFFFF
3604	 F2	AND		 	 
- stack 1: 0x608
- stack 0: 0x0
3605	 F3	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x1
3606	 F5	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x0
3607	 F6	PUSH2	03A0	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x3A0
3608	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x608
3609	 FA	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3610	 FC	ADD		 	 
- stack 0: 0x60C
3611	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3612	 FE	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x11D005001DA000101F900020213FFDC026C0000027B0084029A000002CF0002
3613	 FF	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x11D005001DA000101F900020213FFDC026C0000027B0084029A000002CF0002
- stack 0: 0xF0
3614	 101	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x11D
3615	 102	JUMP		 	 
- stack 0: 0x60C
3616	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x60C
3617	 11E	PUSH2	0060	 	 
- stack 1: 0x60C
- stack 0: 0x60
3618	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x60C
- stack 0: 0x0
3619	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3620	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x0
3621	 128	PUSH2	03A0	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x3A0
3622	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x0
3623	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x60C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3624	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x0
3625	 132	SUB		 	 
- stack 1: 0x60C
- stack 0: 0x0
3626	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x13B
3627	 136	JUMPI		 	 
- stack 0: 0x60C
3628	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x60C
- stack 0: 0x155
3629	 13A	JUMP		 	 
- stack 0: 0x60C
3630	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x60C
3631	 156	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3632	 158	ADD		 	 
- stack 0: 0x610
3633	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3634	 15A	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x1DA000101F900020213FFDC026C0000027B0084029A000002CF000200E90002
3635	 15B	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x1DA000101F900020213FFDC026C0000027B0084029A000002CF000200E90002
- stack 0: 0xF0
3636	 15D	SHR		 	 
- stack 1: 0x610
- stack 0: 0x1DA
3637	 15E	JUMP		 	 
- stack 0: 0x610
3638	 1DA	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x610
3639	 1DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3640	 1DC	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x1DA000101F900020213FFDC026C0000027B0084029A000002CF000200E90002
3641	 1DD	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x1DA000101F900020213FFDC026C0000027B0084029A000002CF000200E90002
- stack 0: 0xE0
3642	 1DF	SHR		 	 
- stack 1: 0x610
- stack 0: 0x1DA0001
3643	 1E0	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x1DA0001
- stack 0: 0xFFFF
3644	 1E3	AND		 	 
- stack 1: 0x610
- stack 0: 0x1
3645	 1E4	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x1
3646	 1E6	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x1
3647	 1E7	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x80
3648	 1EA	MLOAD		 	  ;; # read from x4
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x0
3649	 1EB	ADD		 	  ;; # ADDI 4
- stack 1: 0x610
- stack 0: 0x1
3650	 1EC	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x80
3651	 1EF	MSTORE		 	  ;; # store to x4
- stack 0: 0x610
3652	 1F0	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3653	 1F2	ADD		 	 
- stack 0: 0x614
3654	 1F3	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3655	 1F4	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1F900020213FFDC026C0000027B0084029A000002CF000200E9000201030012
3656	 1F5	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x1F900020213FFDC026C0000027B0084029A000002CF000200E9000201030012
- stack 0: 0xF0
3657	 1F7	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1F9
3658	 1F8	JUMP		 	 
- stack 0: 0x614
3659	 1F9	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x614
3660	 1FA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3661	 1FB	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1F900020213FFDC026C0000027B0084029A000002CF000200E9000201030012
3662	 1FC	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x1F900020213FFDC026C0000027B0084029A000002CF000200E9000201030012
- stack 0: 0xE0
3663	 1FE	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1F90002
3664	 1FF	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x1F90002
- stack 0: 0xFFFF
3665	 202	AND		 	 
- stack 1: 0x614
- stack 0: 0x2
3666	 203	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0x1
3667	 205	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x2
3668	 206	PUSH2	00A0	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0xA0
3669	 209	MSTORE		 	  ;; # store to x5
- stack 0: 0x614
3670	 20A	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3671	 20C	ADD		 	 
- stack 0: 0x618
3672	 20D	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3673	 20E	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x213FFDC026C0000027B0084029A000002CF000200E900020103001202E90028
3674	 20F	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x213FFDC026C0000027B0084029A000002CF000200E900020103001202E90028
- stack 0: 0xF0
3675	 211	SHR		 	 
- stack 1: 0x618
- stack 0: 0x213
3676	 212	JUMP		 	 
- stack 0: 0x618
3677	 213	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x618
3678	 214	PUSH2	0080	 	 
- stack 1: 0x618
- stack 0: 0x80
3679	 217	MLOAD		 	  ;; # read from x4
- stack 1: 0x618
- stack 0: 0x1
3680	 218	PUSH4	FFFFFFFF	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3681	 21D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x618
- stack 0: 0x1
3682	 21E	PUSH2	00A0	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0xA0
3683	 221	MLOAD		 	  ;; # read from x5
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x2
3684	 222	PUSH4	FFFFFFFF	 	 
- stack 3: 0x618
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3685	 227	AND		 	  ;; # mask to 32 bits
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x2
3686	 228	SUB		 	 
- stack 1: 0x618
- stack 0: 0x1
3687	 229	PUSH2	0231	 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x231
3688	 22C	JUMPI		 	 
- stack 0: 0x618
3689	 231	JUMPDEST		 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 0: 0x618
3690	 232	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3691	 233	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x213FFDC026C0000027B0084029A000002CF000200E900020103001202E90028
3692	 234	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x213FFDC026C0000027B0084029A000002CF000200E900020103001202E90028
- stack 0: 0xE0
3693	 236	SHR		 	 
- stack 1: 0x618
- stack 0: 0x213FFDC
3694	 237	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x213FFDC
- stack 0: 0xFFFF
3695	 23A	AND		 	 
- stack 1: 0x618
- stack 0: 0xFFDC
3696	 23B	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0xFFDC
- stack 0: 0x1
3697	 23D	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
3698	 23E	ADD		 	 
- stack 0: 0x5F4
3699	 23F	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFF
3700	 244	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5F4
3701	 245	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3702	 246	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x860000009500AC025500000255000000B4000100E90000011D005001DA0001
3703	 247	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x860000009500AC025500000255000000B4000100E90000011D005001DA0001
- stack 0: 0xF0
3704	 249	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x86
3705	 24A	JUMP		 	 
- stack 0: 0x5F4
3706	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5F4
3707	 87	DUP1		 	 
- stack 1: 0x5F4
- stack 0: 0x5F4
3708	 88	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0x5F4
- stack 0: 0x20
3709	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F4
3710	 8C	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3711	 8E	ADD		 	 
- stack 0: 0x5F8
3712	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3713	 90	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x9500AC025500000255000000B4000100E90000011D005001DA000101F90002
3714	 91	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x9500AC025500000255000000B4000100E90000011D005001DA000101F90002
- stack 0: 0xF0
3715	 93	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x95
3716	 94	JUMP		 	 
- stack 0: 0x5F8
3717	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x5F8
3718	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3719	 97	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x9500AC025500000255000000B4000100E90000011D005001DA000101F90002
3720	 98	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x9500AC025500000255000000B4000100E90000011D005001DA000101F90002
- stack 0: 0xE0
3721	 9A	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x9500AC
3722	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x9500AC
- stack 0: 0xFFFF
3723	 9E	AND		 	 
- stack 1: 0x5F8
- stack 0: 0xAC
3724	 9F	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xAC
- stack 0: 0x1
3725	 A1	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xAC
3726	 A2	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0xAC
- stack 0: 0x20
3727	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F8
- stack 1: 0xAC
- stack 0: 0x5F4
3728	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F8
- stack 0: 0x6A0
3729	 A7	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0x6A0
- stack 0: 0x20
3730	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F8
3731	 AB	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3732	 AD	ADD		 	 
- stack 0: 0x5FC
3733	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3734	 AF	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x25500000255000000B4000100E90000011D005001DA000101F900020213FFDC
3735	 B0	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x25500000255000000B4000100E90000011D005001DA000101F900020213FFDC
- stack 0: 0xF0
3736	 B2	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x255
3737	 B3	JUMP		 	 
- stack 0: 0x5FC
3738	 255	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5FC
3739	 256	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3740	 257	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x25500000255000000B4000100E90000011D005001DA000101F900020213FFDC
3741	 258	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x25500000255000000B4000100E90000011D005001DA000101F900020213FFDC
- stack 0: 0xE0
3742	 25A	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x2550000
3743	 25B	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x2550000
- stack 0: 0xFFFF
3744	 25E	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3745	 25F	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
3746	 261	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3747	 262	POP		 	 
- stack 0: 0x5FC
3748	 263	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3749	 265	ADD		 	 
- stack 0: 0x600
3750	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3751	 267	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x255000000B4000100E90000011D005001DA000101F900020213FFDC026C0000
3752	 268	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x255000000B4000100E90000011D005001DA000101F900020213FFDC026C0000
- stack 0: 0xF0
3753	 26A	SHR		 	 
- stack 1: 0x600
- stack 0: 0x255
3754	 26B	JUMP		 	 
- stack 0: 0x600
3755	 255	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x600
3756	 256	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3757	 257	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x255000000B4000100E90000011D005001DA000101F900020213FFDC026C0000
3758	 258	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x255000000B4000100E90000011D005001DA000101F900020213FFDC026C0000
- stack 0: 0xE0
3759	 25A	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2550000
3760	 25B	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x2550000
- stack 0: 0xFFFF
3761	 25E	AND		 	 
- stack 1: 0x600
- stack 0: 0x0
3762	 25F	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x1
3763	 261	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x0
3764	 262	POP		 	 
- stack 0: 0x600
3765	 263	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3766	 265	ADD		 	 
- stack 0: 0x604
3767	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3768	 267	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0xB4000100E90000011D005001DA000101F900020213FFDC026C0000027B0084
3769	 268	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0xB4000100E90000011D005001DA000101F900020213FFDC026C0000027B0084
- stack 0: 0xF0
3770	 26A	SHR		 	 
- stack 1: 0x604
- stack 0: 0xB4
3771	 26B	JUMP		 	 
- stack 0: 0x604
3772	 B4	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x604
3773	 B5	PUSH2	0020	 	 
- stack 1: 0x604
- stack 0: 0x20
3774	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x604
- stack 0: 0x6A0
3775	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
3776	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0x6A0
3777	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0x604
3778	 C0	MLOAD		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0xB4000100E90000011D005001DA000101F900020213FFDC026C0000027B0084
3779	 C1	PUSH1	E0	 	 
- stack 3: 0x604
- stack 2: 0x6A0
- stack 1: 0xB4000100E90000011D005001DA000101F900020213FFDC026C0000027B0084
- stack 0: 0xE0
3780	 C3	SHR		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0xB40001
3781	 C4	PUSH2	FFFF	 	 
- stack 3: 0x604
- stack 2: 0x6A0
- stack 1: 0xB40001
- stack 0: 0xFFFF
3782	 C7	AND		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0x1
3783	 C8	PUSH1	01	 	 
- stack 3: 0x604
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1
3784	 CA	SIGNEXTEND		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0x1
3785	 CB	ADD		 	 
- stack 1: 0x604
- stack 0: 0x6A1
3786	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
3787	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0x6A1
3788	 D2	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x604
- stack 1: 0x6A1
- stack 0: 0x3
3789	 D4	XOR		 	 
- stack 1: 0x604
- stack 0: 0x6A2
3790	 D5	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0xFF000000000000000000000000000000000000000000000000000000000000
3791	 D6	PUSH1	F8	 	 
- stack 2: 0x604
- stack 1: 0xFF000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
3792	 D8	SHR		 	 
- stack 1: 0x604
- stack 0: 0x0
3793	 D9	PUSH1	00	 	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x0
3794	 DB	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x0
3795	 DC	PUSH2	0060	 	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x60
3796	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x604
3797	 E0	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3798	 E2	ADD		 	 
- stack 0: 0x608
3799	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3800	 E4	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0xE90000011D005001DA000101F900020213FFDC026C0000027B0084029A0000
3801	 E5	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0xE90000011D005001DA000101F900020213FFDC026C0000027B0084029A0000
- stack 0: 0xF0
3802	 E7	SHR		 	 
- stack 1: 0x608
- stack 0: 0xE9
3803	 E8	JUMP		 	 
- stack 0: 0x608
3804	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x608
3805	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3806	 EB	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0xE90000011D005001DA000101F900020213FFDC026C0000027B0084029A0000
3807	 EC	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0xE90000011D005001DA000101F900020213FFDC026C0000027B0084029A0000
- stack 0: 0xE0
3808	 EE	SHR		 	 
- stack 1: 0x608
- stack 0: 0xE90000
3809	 EF	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0xE90000
- stack 0: 0xFFFF
3810	 F2	AND		 	 
- stack 1: 0x608
- stack 0: 0x0
3811	 F3	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x1
3812	 F5	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x0
3813	 F6	PUSH2	03A0	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x3A0
3814	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x608
3815	 FA	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3816	 FC	ADD		 	 
- stack 0: 0x60C
3817	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3818	 FE	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x11D005001DA000101F900020213FFDC026C0000027B0084029A000002CF0002
3819	 FF	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x11D005001DA000101F900020213FFDC026C0000027B0084029A000002CF0002
- stack 0: 0xF0
3820	 101	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x11D
3821	 102	JUMP		 	 
- stack 0: 0x60C
3822	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x60C
3823	 11E	PUSH2	0060	 	 
- stack 1: 0x60C
- stack 0: 0x60
3824	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x60C
- stack 0: 0x0
3825	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3826	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x0
3827	 128	PUSH2	03A0	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x3A0
3828	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x0
3829	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x60C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3830	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x0
3831	 132	SUB		 	 
- stack 1: 0x60C
- stack 0: 0x0
3832	 133	PUSH2	013B	 ;; _neq_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x13B
3833	 136	JUMPI		 	 
- stack 0: 0x60C
3834	 137	PUSH2	0155	 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 1: 0x60C
- stack 0: 0x155
3835	 13A	JUMP		 	 
- stack 0: 0x60C
3836	 155	JUMPDEST		 ;; _neq_after_67e6c8bdf06ba9b92ea61e33ed95950554784af1700f5002141a65ffcf449746	 
- stack 0: 0x60C
3837	 156	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3838	 158	ADD		 	 
- stack 0: 0x610
3839	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3840	 15A	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x1DA000101F900020213FFDC026C0000027B0084029A000002CF000200E90002
3841	 15B	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x1DA000101F900020213FFDC026C0000027B0084029A000002CF000200E90002
- stack 0: 0xF0
3842	 15D	SHR		 	 
- stack 1: 0x610
- stack 0: 0x1DA
3843	 15E	JUMP		 	 
- stack 0: 0x610
3844	 1DA	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x610
3845	 1DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3846	 1DC	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x1DA000101F900020213FFDC026C0000027B0084029A000002CF000200E90002
3847	 1DD	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x1DA000101F900020213FFDC026C0000027B0084029A000002CF000200E90002
- stack 0: 0xE0
3848	 1DF	SHR		 	 
- stack 1: 0x610
- stack 0: 0x1DA0001
3849	 1E0	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x1DA0001
- stack 0: 0xFFFF
3850	 1E3	AND		 	 
- stack 1: 0x610
- stack 0: 0x1
3851	 1E4	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x1
3852	 1E6	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x1
3853	 1E7	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x80
3854	 1EA	MLOAD		 	  ;; # read from x4
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x1
3855	 1EB	ADD		 	  ;; # ADDI 4
- stack 1: 0x610
- stack 0: 0x2
3856	 1EC	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0x80
3857	 1EF	MSTORE		 	  ;; # store to x4
- stack 0: 0x610
3858	 1F0	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3859	 1F2	ADD		 	 
- stack 0: 0x614
3860	 1F3	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3861	 1F4	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1F900020213FFDC026C0000027B0084029A000002CF000200E9000201030012
3862	 1F5	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x1F900020213FFDC026C0000027B0084029A000002CF000200E9000201030012
- stack 0: 0xF0
3863	 1F7	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1F9
3864	 1F8	JUMP		 	 
- stack 0: 0x614
3865	 1F9	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x614
3866	 1FA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3867	 1FB	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1F900020213FFDC026C0000027B0084029A000002CF000200E9000201030012
3868	 1FC	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x1F900020213FFDC026C0000027B0084029A000002CF000200E9000201030012
- stack 0: 0xE0
3869	 1FE	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1F90002
3870	 1FF	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x1F90002
- stack 0: 0xFFFF
3871	 202	AND		 	 
- stack 1: 0x614
- stack 0: 0x2
3872	 203	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0x1
3873	 205	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x2
3874	 206	PUSH2	00A0	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0xA0
3875	 209	MSTORE		 	  ;; # store to x5
- stack 0: 0x614
3876	 20A	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3877	 20C	ADD		 	 
- stack 0: 0x618
3878	 20D	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3879	 20E	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x213FFDC026C0000027B0084029A000002CF000200E900020103001202E90028
3880	 20F	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x213FFDC026C0000027B0084029A000002CF000200E900020103001202E90028
- stack 0: 0xF0
3881	 211	SHR		 	 
- stack 1: 0x618
- stack 0: 0x213
3882	 212	JUMP		 	 
- stack 0: 0x618
3883	 213	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x618
3884	 214	PUSH2	0080	 	 
- stack 1: 0x618
- stack 0: 0x80
3885	 217	MLOAD		 	  ;; # read from x4
- stack 1: 0x618
- stack 0: 0x2
3886	 218	PUSH4	FFFFFFFF	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3887	 21D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x618
- stack 0: 0x2
3888	 21E	PUSH2	00A0	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0xA0
3889	 221	MLOAD		 	  ;; # read from x5
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0x2
3890	 222	PUSH4	FFFFFFFF	 	 
- stack 3: 0x618
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3891	 227	AND		 	  ;; # mask to 32 bits
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0x2
3892	 228	SUB		 	 
- stack 1: 0x618
- stack 0: 0x0
3893	 229	PUSH2	0231	 ;; _neq_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x231
3894	 22C	JUMPI		 	 
- stack 0: 0x618
3895	 22D	PUSH2	024B	 ;; _neq_after_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 1: 0x618
- stack 0: 0x24B
3896	 230	JUMP		 	 
- stack 0: 0x618
3897	 24B	JUMPDEST		 ;; _neq_after_f42df52c1ee72ba7d804f79593bb9240a9a419e78113a9c9c4b88e11a7910683	 
- stack 0: 0x618
3898	 24C	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3899	 24E	ADD		 	 
- stack 0: 0x61C
3900	 24F	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3901	 250	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x26C0000027B0084029A000002CF000200E900020103001202E90028026C0000
3902	 251	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x26C0000027B0084029A000002CF000200E900020103001202E90028026C0000
- stack 0: 0xF0
3903	 253	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x26C
3904	 254	JUMP		 	 
- stack 0: 0x61C
3905	 26C	JUMPDEST		 ;; __riscvimpl_AUIPC_97010000	  ;; # instr: auipc gp,0x0(ignore imm)
- stack 0: 0x61C
3906	 26D	DUP1		 	 
- stack 1: 0x61C
- stack 0: 0x61C
3907	 26E	PUSH2	0060	 	 
- stack 2: 0x61C
- stack 1: 0x61C
- stack 0: 0x60
3908	 271	MSTORE		 	  ;; # store to x3
- stack 0: 0x61C
3909	 272	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3910	 274	ADD		 	 
- stack 0: 0x620
3911	 275	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3912	 276	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x27B0084029A000002CF000200E900020103001202E90028026C0000027B0068
3913	 277	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x27B0084029A000002CF000200E900020103001202E90028026C0000027B0068
- stack 0: 0xF0
3914	 279	SHR		 	 
- stack 1: 0x620
- stack 0: 0x27B
3915	 27A	JUMP		 	 
- stack 0: 0x620
3916	 27B	JUMPDEST		 ;; __riscvimpl_ADDI_3_3_0	  ;; # instr: addi gp,gp,132(ignore imm)
- stack 0: 0x620
3917	 27C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3918	 27D	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x27B0084029A000002CF000200E900020103001202E90028026C0000027B0068
3919	 27E	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x27B0084029A000002CF000200E900020103001202E90028026C0000027B0068
- stack 0: 0xE0
3920	 280	SHR		 	 
- stack 1: 0x620
- stack 0: 0x27B0084
3921	 281	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x27B0084
- stack 0: 0xFFFF
3922	 284	AND		 	 
- stack 1: 0x620
- stack 0: 0x84
3923	 285	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x84
- stack 0: 0x1
3924	 287	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x84
3925	 288	PUSH2	0060	 	 
- stack 2: 0x620
- stack 1: 0x84
- stack 0: 0x60
3926	 28B	MLOAD		 	  ;; # read from x3
- stack 2: 0x620
- stack 1: 0x84
- stack 0: 0x61C
3927	 28C	ADD		 	  ;; # ADDI 3
- stack 1: 0x620
- stack 0: 0x6A0
3928	 28D	PUSH2	0060	 	 
- stack 2: 0x620
- stack 1: 0x6A0
- stack 0: 0x60
3929	 290	MSTORE		 	  ;; # store to x3
- stack 0: 0x620
3930	 291	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3931	 293	ADD		 	 
- stack 0: 0x624
3932	 294	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3933	 295	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x29A000002CF000200E900020103001202E90028026C0000027B0068029A0000
3934	 296	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x29A000002CF000200E900020103001202E90028026C0000027B0068029A0000
- stack 0: 0xF0
3935	 298	SHR		 	 
- stack 1: 0x624
- stack 0: 0x29A
3936	 299	JUMP		 	 
- stack 0: 0x624
3937	 29A	JUMPDEST		 ;; __riscvimpl_LB_2_3_0	  ;; # instr: lb sp,0(gp)(ignore imm)
- stack 0: 0x624
3938	 29B	PUSH2	0060	 	 
- stack 1: 0x624
- stack 0: 0x60
3939	 29E	MLOAD		 	  ;; # read from x3
- stack 1: 0x624
- stack 0: 0x6A0
3940	 29F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
3941	 2A4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x6A0
3942	 2A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0x624
3943	 2A6	MLOAD		 	 
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0x29A000002CF000200E900020103001202E90028026C0000027B0068029A0000
3944	 2A7	PUSH1	E0	 	 
- stack 3: 0x624
- stack 2: 0x6A0
- stack 1: 0x29A000002CF000200E900020103001202E90028026C0000027B0068029A0000
- stack 0: 0xE0
3945	 2A9	SHR		 	 
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0x29A0000
3946	 2AA	PUSH2	FFFF	 	 
- stack 3: 0x624
- stack 2: 0x6A0
- stack 1: 0x29A0000
- stack 0: 0xFFFF
3947	 2AD	AND		 	 
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0x0
3948	 2AE	PUSH1	01	 	 
- stack 3: 0x624
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
3949	 2B0	SIGNEXTEND		 	 
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0x0
3950	 2B1	ADD		 	 
- stack 1: 0x624
- stack 0: 0x6A0
3951	 2B2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
3952	 2B7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x6A0
3953	 2B8	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0x3
3954	 2BA	XOR		 	 
- stack 1: 0x624
- stack 0: 0x6A3
3955	 2BB	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xFF00000000000000000000000000000000000000000000000000000000000000
3956	 2BC	PUSH1	F8	 	 
- stack 2: 0x624
- stack 1: 0xFF00000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
3957	 2BE	SHR		 	 
- stack 1: 0x624
- stack 0: 0xFF
3958	 2BF	PUSH1	00	 	 
- stack 2: 0x624
- stack 1: 0xFF
- stack 0: 0x0
3959	 2C1	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3960	 2C2	PUSH2	0040	 	 
- stack 2: 0x624
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
3961	 2C5	MSTORE		 	  ;; # store to x2
- stack 0: 0x624
3962	 2C6	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3963	 2C8	ADD		 	 
- stack 0: 0x628
3964	 2C9	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3965	 2CA	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x2CF000200E900020103001202E90028026C0000027B0068029A000002550000
3966	 2CB	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x2CF000200E900020103001202E90028026C0000027B0068029A000002550000
- stack 0: 0xF0
3967	 2CD	SHR		 	 
- stack 1: 0x628
- stack 0: 0x2CF
3968	 2CE	JUMP		 	 
- stack 0: 0x628
3969	 2CF	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,2(ignore imm)
- stack 0: 0x628
3970	 2D0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3971	 2D1	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x2CF000200E900020103001202E90028026C0000027B0068029A000002550000
3972	 2D2	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x2CF000200E900020103001202E90028026C0000027B0068029A000002550000
- stack 0: 0xE0
3973	 2D4	SHR		 	 
- stack 1: 0x628
- stack 0: 0x2CF0002
3974	 2D5	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x2CF0002
- stack 0: 0xFFFF
3975	 2D8	AND		 	 
- stack 1: 0x628
- stack 0: 0x2
3976	 2D9	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0x1
3977	 2DB	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x2
3978	 2DC	PUSH2	0040	 	 
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0x40
3979	 2DF	MSTORE		 	  ;; # store to x2
- stack 0: 0x628
3980	 2E0	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3981	 2E2	ADD		 	 
- stack 0: 0x62C
3982	 2E3	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3983	 2E4	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xE900020103001202E90028026C0000027B0068029A00000255000002CF0002
3984	 2E5	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0xE900020103001202E90028026C0000027B0068029A00000255000002CF0002
- stack 0: 0xF0
3985	 2E7	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xE9
3986	 2E8	JUMP		 	 
- stack 0: 0x62C
3987	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x62C
3988	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3989	 EB	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xE900020103001202E90028026C0000027B0068029A00000255000002CF0002
3990	 EC	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0xE900020103001202E90028026C0000027B0068029A00000255000002CF0002
- stack 0: 0xE0
3991	 EE	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xE90002
3992	 EF	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0xE90002
- stack 0: 0xFFFF
3993	 F2	AND		 	 
- stack 1: 0x62C
- stack 0: 0x2
3994	 F3	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0x1
3995	 F5	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x2
3996	 F6	PUSH2	03A0	 	 
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0x3A0
3997	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x62C
3998	 FA	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3999	 FC	ADD		 	 
- stack 0: 0x630
4000	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
4001	 FE	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x103001202E90028026C0000027B0068029A00000255000002CF000200E90002
4002	 FF	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x103001202E90028026C0000027B0068029A00000255000002CF000200E90002
- stack 0: 0xF0
4003	 101	SHR		 	 
- stack 1: 0x630
- stack 0: 0x103
4004	 102	JUMP		 	 
- stack 0: 0x630
4005	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x630
4006	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
4007	 105	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x103001202E90028026C0000027B0068029A00000255000002CF000200E90002
4008	 106	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x103001202E90028026C0000027B0068029A00000255000002CF000200E90002
- stack 0: 0xE0
4009	 108	SHR		 	 
- stack 1: 0x630
- stack 0: 0x1030012
4010	 109	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x1030012
- stack 0: 0xFFFF
4011	 10C	AND		 	 
- stack 1: 0x630
- stack 0: 0x12
4012	 10D	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x12
- stack 0: 0x1
4013	 10F	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x12
4014	 110	PUSH2	0380	 	 
- stack 2: 0x630
- stack 1: 0x12
- stack 0: 0x380
4015	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x630
4016	 114	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
4017	 116	ADD		 	 
- stack 0: 0x634
4018	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
4019	 118	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x2E90028026C0000027B0068029A00000255000002CF000200E9000201030013
4020	 119	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x2E90028026C0000027B0068029A00000255000002CF000200E9000201030013
- stack 0: 0xF0
4021	 11B	SHR		 	 
- stack 1: 0x634
- stack 0: 0x2E9
4022	 11C	JUMP		 	 
- stack 0: 0x634
4023	 2E9	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,28(ignore imm)
- stack 0: 0x634
4024	 2EA	PUSH2	0040	 	 
- stack 1: 0x634
- stack 0: 0x40
4025	 2ED	MLOAD		 	  ;; # read from x2
- stack 1: 0x634
- stack 0: 0x2
4026	 2EE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4027	 2F3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x634
- stack 0: 0x2
4028	 2F4	PUSH2	03A0	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x3A0
4029	 2F7	MLOAD		 	  ;; # read from x29
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x2
4030	 2F8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x634
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4031	 2FD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x2
4032	 2FE	SUB		 	 
- stack 1: 0x634
- stack 0: 0x0
4033	 2FF	PUSH2	0307	 ;; _neq_7c91551659f9c6b409191e88d6a9f76d94a292fdd4bde8ff1ce5cb9756d5f878	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x307
4034	 302	JUMPI		 	 
- stack 0: 0x634
4035	 303	PUSH2	0321	 ;; _neq_after_7c91551659f9c6b409191e88d6a9f76d94a292fdd4bde8ff1ce5cb9756d5f878	 
- stack 1: 0x634
- stack 0: 0x321
4036	 306	JUMP		 	 
- stack 0: 0x634
4037	 321	JUMPDEST		 ;; _neq_after_7c91551659f9c6b409191e88d6a9f76d94a292fdd4bde8ff1ce5cb9756d5f878	 
- stack 0: 0x634
4038	 322	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
4039	 324	ADD		 	 
- stack 0: 0x638
4040	 325	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
4041	 326	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x26C0000027B0068029A00000255000002CF000200E900020103001302E90008
4042	 327	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x26C0000027B0068029A00000255000002CF000200E900020103001302E90008
- stack 0: 0xF0
4043	 329	SHR		 	 
- stack 1: 0x638
- stack 0: 0x26C
4044	 32A	JUMP		 	 
- stack 0: 0x638
4045	 26C	JUMPDEST		 ;; __riscvimpl_AUIPC_97010000	  ;; # instr: auipc gp,0x0(ignore imm)
- stack 0: 0x638
4046	 26D	DUP1		 	 
- stack 1: 0x638
- stack 0: 0x638
4047	 26E	PUSH2	0060	 	 
- stack 2: 0x638
- stack 1: 0x638
- stack 0: 0x60
4048	 271	MSTORE		 	  ;; # store to x3
- stack 0: 0x638
4049	 272	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
4050	 274	ADD		 	 
- stack 0: 0x63C
4051	 275	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
4052	 276	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x27B0068029A00000255000002CF000200E900020103001302E90008032B0018
4053	 277	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x27B0068029A00000255000002CF000200E900020103001302E90008032B0018
- stack 0: 0xF0
4054	 279	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x27B
4055	 27A	JUMP		 	 
- stack 0: 0x63C
4056	 27B	JUMPDEST		 ;; __riscvimpl_ADDI_3_3_0	  ;; # instr: addi gp,gp,132(ignore imm)
- stack 0: 0x63C
4057	 27C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
4058	 27D	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x27B0068029A00000255000002CF000200E900020103001302E90008032B0018
4059	 27E	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x27B0068029A00000255000002CF000200E900020103001302E90008032B0018
- stack 0: 0xE0
4060	 280	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x27B0068
4061	 281	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x27B0068
- stack 0: 0xFFFF
4062	 284	AND		 	 
- stack 1: 0x63C
- stack 0: 0x68
4063	 285	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x68
- stack 0: 0x1
4064	 287	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x68
4065	 288	PUSH2	0060	 	 
- stack 2: 0x63C
- stack 1: 0x68
- stack 0: 0x60
4066	 28B	MLOAD		 	  ;; # read from x3
- stack 2: 0x63C
- stack 1: 0x68
- stack 0: 0x638
4067	 28C	ADD		 	  ;; # ADDI 3
- stack 1: 0x63C
- stack 0: 0x6A0
4068	 28D	PUSH2	0060	 	 
- stack 2: 0x63C
- stack 1: 0x6A0
- stack 0: 0x60
4069	 290	MSTORE		 	  ;; # store to x3
- stack 0: 0x63C
4070	 291	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
4071	 293	ADD		 	 
- stack 0: 0x640
4072	 294	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
4073	 295	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x29A00000255000002CF000200E900020103001302E90008032B001800210000
4074	 296	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x29A00000255000002CF000200E900020103001302E90008032B001800210000
- stack 0: 0xF0
4075	 298	SHR		 	 
- stack 1: 0x640
- stack 0: 0x29A
4076	 299	JUMP		 	 
- stack 0: 0x640
4077	 29A	JUMPDEST		 ;; __riscvimpl_LB_2_3_0	  ;; # instr: lb sp,0(gp)(ignore imm)
- stack 0: 0x640
4078	 29B	PUSH2	0060	 	 
- stack 1: 0x640
- stack 0: 0x60
4079	 29E	MLOAD		 	  ;; # read from x3
- stack 1: 0x640
- stack 0: 0x6A0
4080	 29F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
4081	 2A4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x640
- stack 0: 0x6A0
4082	 2A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0x640
4083	 2A6	MLOAD		 	 
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0x29A00000255000002CF000200E900020103001302E90008032B001800210000
4084	 2A7	PUSH1	E0	 	 
- stack 3: 0x640
- stack 2: 0x6A0
- stack 1: 0x29A00000255000002CF000200E900020103001302E90008032B001800210000
- stack 0: 0xE0
4085	 2A9	SHR		 	 
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0x29A0000
4086	 2AA	PUSH2	FFFF	 	 
- stack 3: 0x640
- stack 2: 0x6A0
- stack 1: 0x29A0000
- stack 0: 0xFFFF
4087	 2AD	AND		 	 
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0x0
4088	 2AE	PUSH1	01	 	 
- stack 3: 0x640
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
4089	 2B0	SIGNEXTEND		 	 
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0x0
4090	 2B1	ADD		 	 
- stack 1: 0x640
- stack 0: 0x6A0
4091	 2B2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
4092	 2B7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x640
- stack 0: 0x6A0
4093	 2B8	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0x3
4094	 2BA	XOR		 	 
- stack 1: 0x640
- stack 0: 0x6A3
4095	 2BB	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xFF00000000000000000000000000000000000000000000000000000000000000
4096	 2BC	PUSH1	F8	 	 
- stack 2: 0x640
- stack 1: 0xFF00000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
4097	 2BE	SHR		 	 
- stack 1: 0x640
- stack 0: 0xFF
4098	 2BF	PUSH1	00	 	 
- stack 2: 0x640
- stack 1: 0xFF
- stack 0: 0x0
4099	 2C1	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4100	 2C2	PUSH2	0040	 	 
- stack 2: 0x640
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
4101	 2C5	MSTORE		 	  ;; # store to x2
- stack 0: 0x640
4102	 2C6	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
4103	 2C8	ADD		 	 
- stack 0: 0x644
4104	 2C9	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
4105	 2CA	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x255000002CF000200E900020103001302E90008032B00180021000000340698
4106	 2CB	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x255000002CF000200E900020103001302E90008032B00180021000000340698
- stack 0: 0xF0
4107	 2CD	SHR		 	 
- stack 1: 0x644
- stack 0: 0x255
4108	 2CE	JUMP		 	 
- stack 0: 0x644
4109	 255	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x644
4110	 256	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
4111	 257	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x255000002CF000200E900020103001302E90008032B00180021000000340698
4112	 258	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x255000002CF000200E900020103001302E90008032B00180021000000340698
- stack 0: 0xE0
4113	 25A	SHR		 	 
- stack 1: 0x644
- stack 0: 0x2550000
4114	 25B	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x2550000
- stack 0: 0xFFFF
4115	 25E	AND		 	 
- stack 1: 0x644
- stack 0: 0x0
4116	 25F	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x1
4117	 261	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x0
4118	 262	POP		 	 
- stack 0: 0x644
4119	 263	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
4120	 265	ADD		 	 
- stack 0: 0x648
4121	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
4122	 267	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x2CF000200E900020103001302E90008032B0018002100000034069800530042
4123	 268	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x2CF000200E900020103001302E90008032B0018002100000034069800530042
- stack 0: 0xF0
4124	 26A	SHR		 	 
- stack 1: 0x648
- stack 0: 0x2CF
4125	 26B	JUMP		 	 
- stack 0: 0x648
4126	 2CF	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,2(ignore imm)
- stack 0: 0x648
4127	 2D0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
4128	 2D1	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x2CF000200E900020103001302E90008032B0018002100000034069800530042
4129	 2D2	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x2CF000200E900020103001302E90008032B0018002100000034069800530042
- stack 0: 0xE0
4130	 2D4	SHR		 	 
- stack 1: 0x648
- stack 0: 0x2CF0002
4131	 2D5	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x2CF0002
- stack 0: 0xFFFF
4132	 2D8	AND		 	 
- stack 1: 0x648
- stack 0: 0x2
4133	 2D9	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x1
4134	 2DB	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x2
4135	 2DC	PUSH2	0040	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x40
4136	 2DF	MSTORE		 	  ;; # store to x2
- stack 0: 0x648
4137	 2E0	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
4138	 2E2	ADD		 	 
- stack 0: 0x64C
4139	 2E3	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
4140	 2E4	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xE900020103001302E90008032B001800210000003406980053004200660000
4141	 2E5	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0xE900020103001302E90008032B001800210000003406980053004200660000
- stack 0: 0xF0
4142	 2E7	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xE9
4143	 2E8	JUMP		 	 
- stack 0: 0x64C
4144	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x64C
4145	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
4146	 EB	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xE900020103001302E90008032B001800210000003406980053004200660000
4147	 EC	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0xE900020103001302E90008032B001800210000003406980053004200660000
- stack 0: 0xE0
4148	 EE	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xE90002
4149	 EF	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0xE90002
- stack 0: 0xFFFF
4150	 F2	AND		 	 
- stack 1: 0x64C
- stack 0: 0x2
4151	 F3	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x1
4152	 F5	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x2
4153	 F6	PUSH2	03A0	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x3A0
4154	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x64C
4155	 FA	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
4156	 FC	ADD		 	 
- stack 0: 0x650
4157	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
4158	 FE	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x103001302E90008032B001800210000003406980053004200660000036B0001
4159	 FF	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x103001302E90008032B001800210000003406980053004200660000036B0001
- stack 0: 0xF0
4160	 101	SHR		 	 
- stack 1: 0x650
- stack 0: 0x103
4161	 102	JUMP		 	 
- stack 0: 0x650
4162	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x650
4163	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
4164	 105	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x103001302E90008032B001800210000003406980053004200660000036B0001
4165	 106	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x103001302E90008032B001800210000003406980053004200660000036B0001
- stack 0: 0xE0
4166	 108	SHR		 	 
- stack 1: 0x650
- stack 0: 0x1030013
4167	 109	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x1030013
- stack 0: 0xFFFF
4168	 10C	AND		 	 
- stack 1: 0x650
- stack 0: 0x13
4169	 10D	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x13
- stack 0: 0x1
4170	 10F	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x13
4171	 110	PUSH2	0380	 	 
- stack 2: 0x650
- stack 1: 0x13
- stack 0: 0x380
4172	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x650
4173	 114	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
4174	 116	ADD		 	 
- stack 0: 0x654
4175	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
4176	 118	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x2E90008032B001800210000003406980053004200660000036B000100210000
4177	 119	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x2E90008032B001800210000003406980053004200660000036B000100210000
- stack 0: 0xF0
4178	 11B	SHR		 	 
- stack 1: 0x654
- stack 0: 0x2E9
4179	 11C	JUMP		 	 
- stack 0: 0x654
4180	 2E9	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,28(ignore imm)
- stack 0: 0x654
4181	 2EA	PUSH2	0040	 	 
- stack 1: 0x654
- stack 0: 0x40
4182	 2ED	MLOAD		 	  ;; # read from x2
- stack 1: 0x654
- stack 0: 0x2
4183	 2EE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4184	 2F3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x654
- stack 0: 0x2
4185	 2F4	PUSH2	03A0	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x3A0
4186	 2F7	MLOAD		 	  ;; # read from x29
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x2
4187	 2F8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x654
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4188	 2FD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x2
4189	 2FE	SUB		 	 
- stack 1: 0x654
- stack 0: 0x0
4190	 2FF	PUSH2	0307	 ;; _neq_7c91551659f9c6b409191e88d6a9f76d94a292fdd4bde8ff1ce5cb9756d5f878	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0x307
4191	 302	JUMPI		 	 
- stack 0: 0x654
4192	 303	PUSH2	0321	 ;; _neq_after_7c91551659f9c6b409191e88d6a9f76d94a292fdd4bde8ff1ce5cb9756d5f878	 
- stack 1: 0x654
- stack 0: 0x321
4193	 306	JUMP		 	 
- stack 0: 0x654
4194	 321	JUMPDEST		 ;; _neq_after_7c91551659f9c6b409191e88d6a9f76d94a292fdd4bde8ff1ce5cb9756d5f878	 
- stack 0: 0x654
4195	 322	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
4196	 324	ADD		 	 
- stack 0: 0x658
4197	 325	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
4198	 326	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x32B001800210000003406980053004200660000036B0001002100000034069C
4199	 327	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x32B001800210000003406980053004200660000036B0001002100000034069C
- stack 0: 0xF0
4200	 329	SHR		 	 
- stack 1: 0x658
- stack 0: 0x32B
4201	 32A	JUMP		 	 
- stack 0: 0x658
4202	 32B	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x658
4203	 32C	PUSH1	00	 	 
- stack 1: 0x658
- stack 0: 0x0
4204	 32E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4205	 333	AND		 	  ;; # mask to 32 bits
- stack 1: 0x658
- stack 0: 0x0
4206	 334	PUSH2	0380	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x380
4207	 337	MLOAD		 	  ;; # read from x28
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x13
4208	 338	PUSH4	FFFFFFFF	 	 
- stack 3: 0x658
- stack 2: 0x0
- stack 1: 0x13
- stack 0: 0xFFFFFFFF
4209	 33D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x13
4210	 33E	SUB		 	 
- stack 1: 0x658
- stack 0: 0x13
4211	 33F	PUSH2	0347	 ;; _neq_520f1d991daa98d9169d7d411cc5d2a04c1c2314212d7988f0fe18a5c517ef23	 
- stack 2: 0x658
- stack 1: 0x13
- stack 0: 0x347
4212	 342	JUMPI		 	 
- stack 0: 0x658
4213	 347	JUMPDEST		 ;; _neq_520f1d991daa98d9169d7d411cc5d2a04c1c2314212d7988f0fe18a5c517ef23	 
- stack 0: 0x658
4214	 348	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
4215	 349	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x32B001800210000003406980053004200660000036B0001002100000034069C
4216	 34A	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x32B001800210000003406980053004200660000036B0001002100000034069C
- stack 0: 0xE0
4217	 34C	SHR		 	 
- stack 1: 0x658
- stack 0: 0x32B0018
4218	 34D	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x32B0018
- stack 0: 0xFFFF
4219	 350	AND		 	 
- stack 1: 0x658
- stack 0: 0x18
4220	 351	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x18
- stack 0: 0x1
4221	 353	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x18
4222	 354	ADD		 	 
- stack 0: 0x670
4223	 355	PUSH4	FFFFFFFF	 	 
- stack 1: 0x670
- stack 0: 0xFFFFFFFF
4224	 35A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x670
4225	 35B	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4226	 35C	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x2100000034069C005300420066000003760000006600000000000000000000
4227	 35D	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x2100000034069C005300420066000003760000006600000000000000000000
- stack 0: 0xF0
4228	 35F	SHR		 	 
- stack 1: 0x670
- stack 0: 0x21
4229	 360	JUMP		 	 
- stack 0: 0x670
4230	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x670
4231	 22	PUSH4	00000000	 	 
- stack 1: 0x670
- stack 0: 0x0
4232	 27	PUSH2	0160	 	 
- stack 2: 0x670
- stack 1: 0x0
- stack 0: 0x160
4233	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x670
4234	 2B	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4235	 2D	ADD		 	 
- stack 0: 0x674
4236	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4237	 2F	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x34069C0053004200660000037600000066000000000000000000006574796D
4238	 30	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x34069C0053004200660000037600000066000000000000000000006574796D
- stack 0: 0xF0
4239	 32	SHR		 	 
- stack 1: 0x674
- stack 0: 0x34
4240	 33	JUMP		 	 
- stack 0: 0x674
4241	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1680(ignore imm)
- stack 0: 0x674
4242	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
4243	 36	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x34069C0053004200660000037600000066000000000000000000006574796D
4244	 37	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x34069C0053004200660000037600000066000000000000000000006574796D
- stack 0: 0xE0
4245	 39	SHR		 	 
- stack 1: 0x674
- stack 0: 0x34069C
4246	 3A	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x34069C
- stack 0: 0xFFFF
4247	 3D	AND		 	 
- stack 1: 0x674
- stack 0: 0x69C
4248	 3E	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x69C
- stack 0: 0x1
4249	 40	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x69C
4250	 41	PUSH2	0160	 	 
- stack 2: 0x674
- stack 1: 0x69C
- stack 0: 0x160
4251	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x674
- stack 1: 0x69C
- stack 0: 0x0
4252	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x674
- stack 0: 0x69C
4253	 46	PUSH2	0160	 	 
- stack 2: 0x674
- stack 1: 0x69C
- stack 0: 0x160
4254	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x674
4255	 4A	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4256	 4C	ADD		 	 
- stack 0: 0x678
4257	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4258	 4E	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x53004200660000037600000066000000000000000000006574796D00007473
4259	 4F	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x53004200660000037600000066000000000000000000006574796D00007473
- stack 0: 0xF0
4260	 51	SHR		 	 
- stack 1: 0x678
- stack 0: 0x53
4261	 52	JUMP		 	 
- stack 0: 0x678
4262	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x678
4263	 54	PUSH4	00042000	 	 
- stack 1: 0x678
- stack 0: 0x42000
4264	 59	PUSH2	0140	 	 
- stack 2: 0x678
- stack 1: 0x42000
- stack 0: 0x140
4265	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x678
4266	 5D	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
4267	 5F	ADD		 	 
- stack 0: 0x67C
4268	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
4269	 61	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x660000037600000066000000000000000000006574796D0000747300525245
4270	 62	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x660000037600000066000000000000000000006574796D0000747300525245
- stack 0: 0xF0
4271	 64	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x66
4272	 65	JUMP		 	 
- stack 0: 0x67C
4273	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x67C
4274	 67	PUSH2	0140	 	 
- stack 1: 0x67C
- stack 0: 0x140
4275	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x67C
- stack 0: 0x42000
4276	 6B	PUSH2	0075	 ;; _ecall_e695732c6c5fae2716cecd4b3870ab7f0e6a67ed79bdcf3a3370911228ff64a5	 
- stack 2: 0x67C
- stack 1: 0x42000
- stack 0: 0x75
4277	 6E	JUMPI		 	 
- stack 0: 0x67C
4278	 75	JUMPDEST		 ;; _ecall_e695732c6c5fae2716cecd4b3870ab7f0e6a67ed79bdcf3a3370911228ff64a5	 
- stack 0: 0x67C
4279	 76	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4280	 78	PUSH2	0160	 	 
- stack 2: 0x67C
- stack 1: 0x4
- stack 0: 0x160
4281	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x67C
- stack 1: 0x4
- stack 0: 0x69C
4282	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x67C
4283	 7D	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4284	 7F	ADD		 	 
- stack 0: 0x680
4285	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4286	 81	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x37600000066000000000000000000006574796D000074730052524500004B4F
4287	 82	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x37600000066000000000000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
4288	 84	SHR		 	 
- stack 1: 0x680
- stack 0: 0x376
4289	 85	JUMP		 	 
- stack 0: 0x680
4290	 376	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x680
4291	 377	PUSH4	00000000	 	 
- stack 1: 0x680
- stack 0: 0x0
4292	 37C	PUSH2	0140	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x140
4293	 37F	MSTORE		 	  ;; # store to x10
- stack 0: 0x680
4294	 380	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4295	 382	ADD		 	 
- stack 0: 0x684
4296	 383	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4297	 384	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x66000000000000000000006574796D000074730052524500004B4F0FF000FF
4298	 385	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x66000000000000000000006574796D000074730052524500004B4F0FF000FF
- stack 0: 0xF0
4299	 387	SHR		 	 
- stack 1: 0x684
- stack 0: 0x66
4300	 388	JUMP		 	 
- stack 0: 0x684
4301	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x684
4302	 67	PUSH2	0140	 	 
- stack 1: 0x684
- stack 0: 0x140
4303	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x684
- stack 0: 0x0
4304	 6B	PUSH2	0075	 ;; _ecall_e695732c6c5fae2716cecd4b3870ab7f0e6a67ed79bdcf3a3370911228ff64a5	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x75
4305	 6E	JUMPI		 	 
- stack 0: 0x684
4306	 6F	PUSH1	20	 	 
- stack 1: 0x684
- stack 0: 0x20
4307	 71	PUSH2	0160	 	 
- stack 2: 0x684
- stack 1: 0x20
- stack 0: 0x160
4308	 74	RETURN		 	 
Final bytecode length; 1582
Returned: 000000000000000000000000000000000000000000000000000000000000069c
gasUsed : 15304
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424
** HOT: 428 - range: 428,42c,430,434,438,43c
** HOT: 440 - range: 440,444,448,44c,450,454
** HOT: 458 - range: 458,45c,460,464,468,46c
** HOT: 470 - range: 470,474,478,47c,480,484
** HOT: 488 - range: 488,48c,490,494,498,49c
** HOT: 4a0 - range: 4a0,4a4,4a8,4ac,4b0,4b4
** HOT: 4b8 - range: 4b8,4bc,4c0,4c4,4c8,4cc
** HOT: 4d0 - range: 4d0,4d4,4d8,4dc,4e0,4e4,4e8
** HOT: 4ec - range: 4ec,4f0,4f4,4f8,4fc,500,504
** HOT: 508 - range: 508,50c,510,514,518,51c,520,524
** HOT: 510 - range: 510,514,518,51c,520,524
** HOT: 528 - range: 528,52c,530
** HOT: 534 - range: 534,538,53c,540,544,548,54c,550,554
** HOT: 53c - range: 53c,540,544,548,54c,550,554
** HOT: 558 - range: 558,55c,560
** HOT: 564 - range: 564,568,56c,570,574,578,57c,580,584,588
** HOT: 56c - range: 56c,570,574,578,57c,580,584,588
** HOT: 58c - range: 58c,590,594
** HOT: 598 - range: 598,59c,5a0,5a4,5a8,5ac,5b0
** HOT: 5a0 - range: 5a0,5a4,5a8,5ac,5b0
** HOT: 5b4 - range: 5b4,5b8,5bc
** HOT: 5c0 - range: 5c0,5c4,5c8,5cc,5d0,5d4,5d8,5dc
** HOT: 5c8 - range: 5c8,5cc,5d0,5d4,5d8,5dc
** HOT: 5e0 - range: 5e0,5e4,5e8
** HOT: 5ec - range: 5ec,5f0,5f4,5f8,5fc,600,604,608,60c
** HOT: 5f4 - range: 5f4,5f8,5fc,600,604,608,60c
** HOT: 610 - range: 610,614,618
** HOT: 61c - range: 61c,620,624,628,62c,630,634
** HOT: 638 - range: 638,63c,640,644,648,64c,650,654
