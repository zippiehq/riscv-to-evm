Running in EVM:
0	 0	PUSH4	02A4	 	 
- stack 0: 0x2A4
1	 5	PUSH2	0383	 ;; _rambegin	 
- stack 1: 0x2A4
- stack 0: 0x383
2	 8	PUSH1	01	 	 
- stack 2: 0x2A4
- stack 1: 0x383
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x2A4
- stack 0: 0x384
4	 B	PUSH2	0400	 	 
- stack 2: 0x2A4
- stack 1: 0x384
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x210000003406900053004200660000008600000095029000B4000000E600FF
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x210000003406900053004200660000008600000095029000B4000000E600FF
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406900053004200660000008600000095029000B4000000E600FF01000002
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x3406900053004200660000008600000095029000B4000000E600FF01000002
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1680(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406900053004200660000008600000095029000B4000000E600FF01000002
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x3406900053004200660000008600000095029000B4000000E600FF01000002
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340690
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340690
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x690
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x690
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x690
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x690
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x690
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x690
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x690
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x53004200660000008600000095029000B4000000E600FF01000002011A0238
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x53004200660000008600000095029000B4000000E600FF01000002011A0238
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x660000008600000095029000B4000000E600FF01000002011A023800860000
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x660000008600000095029000B4000000E600FF01000002011A023800860000
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_271a17076626caebad8c68c040f0c50eefc34f94ec42d4bb722efaf91739e714	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_271a17076626caebad8c68c040f0c50eefc34f94ec42d4bb722efaf91739e714	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x690
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x8600000095029000B4000000E600FF01000002011A02380086000000950278
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x8600000095029000B4000000E600FF01000002011A02380086000000950278
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	 
- stack 1: 0x410
- stack 0: 0x410
77	 88	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x410
- stack 0: 0x20
78	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 8C	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 8E	ADD		 	 
- stack 0: 0x414
81	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 90	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x95029000B4000000E600FF01000002011A0238008600000095027800B40001
83	 91	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x95029000B4000000E600FF01000002011A0238008600000095027800B40001
- stack 0: 0xF0
84	 93	SHR		 	 
- stack 1: 0x414
- stack 0: 0x95
85	 94	JUMP		 	 
- stack 0: 0x414
86	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x414
87	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 97	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x95029000B4000000E600FF01000002011A0238008600000095027800B40001
89	 98	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x95029000B4000000E600FF01000002011A0238008600000095027800B40001
- stack 0: 0xE0
90	 9A	SHR		 	 
- stack 1: 0x414
- stack 0: 0x950290
91	 9B	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x950290
- stack 0: 0xFFFF
92	 9E	AND		 	 
- stack 1: 0x414
- stack 0: 0x290
93	 9F	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x290
- stack 0: 0x1
94	 A1	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x290
95	 A2	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x290
- stack 0: 0x20
96	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0x290
- stack 0: 0x410
97	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x414
- stack 0: 0x6A0
98	 A7	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x6A0
- stack 0: 0x20
99	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
100	 AB	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
101	 AD	ADD		 	 
- stack 0: 0x418
102	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
103	 AF	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB4000000E600FF01000002011A0238008600000095027800B4000100E60000
104	 B0	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB4000000E600FF01000002011A0238008600000095027800B4000100E60000
- stack 0: 0xF0
105	 B2	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB4
106	 B3	JUMP		 	 
- stack 0: 0x418
107	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x418
108	 B5	PUSH2	0020	 	 
- stack 1: 0x418
- stack 0: 0x20
109	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x418
- stack 0: 0x6A0
110	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
111	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x418
- stack 0: 0x6A0
112	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0x418
113	 C0	MLOAD		 	 
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0xB4000000E600FF01000002011A0238008600000095027800B4000100E60000
114	 C1	PUSH1	E0	 	 
- stack 3: 0x418
- stack 2: 0x6A0
- stack 1: 0xB4000000E600FF01000002011A0238008600000095027800B4000100E60000
- stack 0: 0xE0
115	 C3	SHR		 	 
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0xB40000
116	 C4	PUSH2	FFFF	 	 
- stack 3: 0x418
- stack 2: 0x6A0
- stack 1: 0xB40000
- stack 0: 0xFFFF
117	 C7	AND		 	 
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0x0
118	 C8	PUSH1	01	 	 
- stack 3: 0x418
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
119	 CA	SIGNEXTEND		 	 
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0x0
120	 CB	ADD		 	 
- stack 1: 0x418
- stack 0: 0x6A0
121	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
122	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x418
- stack 0: 0x6A0
123	 D2	PUSH1	03	 	 
- stack 2: 0x418
- stack 1: 0x6A0
- stack 0: 0x3
124	 D4	XOR		 	 
- stack 1: 0x418
- stack 0: 0x6A3
125	 D5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xFF00000000000000000000000000000000000000000000000000000000000000
126	 D6	PUSH1	F8	 	 
- stack 2: 0x418
- stack 1: 0xFF00000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
127	 D8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xFF
128	 D9	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0xFF
- stack 0: 0x60
129	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
130	 DD	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
131	 DF	ADD		 	 
- stack 0: 0x41C
132	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
133	 E1	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xE600FF01000002011A0238008600000095027800B4000100E6000001000003
134	 E2	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xE600FF01000002011A0238008600000095027800B4000100E6000001000003
- stack 0: 0xF0
135	 E4	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xE6
136	 E5	JUMP		 	 
- stack 0: 0x41C
137	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x41C
138	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
139	 E8	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xE600FF01000002011A0238008600000095027800B4000100E6000001000003
140	 E9	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xE600FF01000002011A0238008600000095027800B4000100E6000001000003
- stack 0: 0xE0
141	 EB	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xE600FF
142	 EC	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xE600FF
- stack 0: 0xFFFF
143	 EF	AND		 	 
- stack 1: 0x41C
- stack 0: 0xFF
144	 F0	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0xFF
- stack 0: 0x1
145	 F2	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0xFF
146	 F3	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0xFF
- stack 0: 0x3A0
147	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
148	 F7	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
149	 F9	ADD		 	 
- stack 0: 0x420
150	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
151	 FB	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0x1000002011A0238008600000095027800B4000100E6000001000003011A0220
152	 FC	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0x1000002011A0238008600000095027800B4000100E6000001000003011A0220
- stack 0: 0xF0
153	 FE	SHR		 	 
- stack 1: 0x420
- stack 0: 0x100
154	 FF	JUMP		 	 
- stack 0: 0x420
155	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x420
156	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
157	 102	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0x1000002011A0238008600000095027800B4000100E6000001000003011A0220
158	 103	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0x1000002011A0238008600000095027800B4000100E6000001000003011A0220
- stack 0: 0xE0
159	 105	SHR		 	 
- stack 1: 0x420
- stack 0: 0x1000002
160	 106	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0x1000002
- stack 0: 0xFFFF
161	 109	AND		 	 
- stack 1: 0x420
- stack 0: 0x2
162	 10A	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x1
163	 10C	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0x2
164	 10D	PUSH2	0380	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x380
165	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x420
166	 111	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
167	 113	ADD		 	 
- stack 0: 0x424
168	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
169	 115	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x11A0238008600000095027800B4000100E6000001000003011A022000860000
170	 116	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x11A0238008600000095027800B4000100E6000001000003011A022000860000
- stack 0: 0xF0
171	 118	SHR		 	 
- stack 1: 0x424
- stack 0: 0x11A
172	 119	JUMP		 	 
- stack 0: 0x424
173	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x424
174	 11B	PUSH2	0060	 	 
- stack 1: 0x424
- stack 0: 0x60
175	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x424
- stack 0: 0xFF
176	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
177	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0xFF
178	 125	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0xFF
- stack 0: 0x3A0
179	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x424
- stack 1: 0xFF
- stack 0: 0xFF
180	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0xFF
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
181	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0xFF
- stack 0: 0xFF
182	 12F	SUB		 	 
- stack 1: 0x424
- stack 0: 0x0
183	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x138
184	 133	JUMPI		 	 
- stack 0: 0x424
185	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x424
- stack 0: 0x152
186	 137	JUMP		 	 
- stack 0: 0x424
187	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x424
188	 153	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
189	 155	ADD		 	 
- stack 0: 0x428
190	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
191	 157	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x8600000095027800B4000100E6000001000003011A02200086000000950260
192	 158	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x8600000095027800B4000100E6000001000003011A02200086000000950260
- stack 0: 0xF0
193	 15A	SHR		 	 
- stack 1: 0x428
- stack 0: 0x86
194	 15B	JUMP		 	 
- stack 0: 0x428
195	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x428
196	 87	DUP1		 	 
- stack 1: 0x428
- stack 0: 0x428
197	 88	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x428
- stack 0: 0x20
198	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x428
199	 8C	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
200	 8E	ADD		 	 
- stack 0: 0x42C
201	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
202	 90	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x95027800B4000100E6000001000003011A0220008600000095026000B40002
203	 91	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x95027800B4000100E6000001000003011A0220008600000095026000B40002
- stack 0: 0xF0
204	 93	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x95
205	 94	JUMP		 	 
- stack 0: 0x42C
206	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x42C
207	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
208	 97	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x95027800B4000100E6000001000003011A0220008600000095026000B40002
209	 98	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0x95027800B4000100E6000001000003011A0220008600000095026000B40002
- stack 0: 0xE0
210	 9A	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x950278
211	 9B	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0x950278
- stack 0: 0xFFFF
212	 9E	AND		 	 
- stack 1: 0x42C
- stack 0: 0x278
213	 9F	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x278
- stack 0: 0x1
214	 A1	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x278
215	 A2	PUSH2	0020	 	 
- stack 2: 0x42C
- stack 1: 0x278
- stack 0: 0x20
216	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x42C
- stack 1: 0x278
- stack 0: 0x428
217	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x42C
- stack 0: 0x6A0
218	 A7	PUSH2	0020	 	 
- stack 2: 0x42C
- stack 1: 0x6A0
- stack 0: 0x20
219	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x42C
220	 AB	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
221	 AD	ADD		 	 
- stack 0: 0x430
222	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
223	 AF	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xB4000100E6000001000003011A0220008600000095026000B4000200E600F0
224	 B0	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xB4000100E6000001000003011A0220008600000095026000B4000200E600F0
- stack 0: 0xF0
225	 B2	SHR		 	 
- stack 1: 0x430
- stack 0: 0xB4
226	 B3	JUMP		 	 
- stack 0: 0x430
227	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x430
228	 B5	PUSH2	0020	 	 
- stack 1: 0x430
- stack 0: 0x20
229	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x430
- stack 0: 0x6A0
230	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x430
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
231	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x430
- stack 0: 0x6A0
232	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x430
- stack 1: 0x6A0
- stack 0: 0x430
233	 C0	MLOAD		 	 
- stack 2: 0x430
- stack 1: 0x6A0
- stack 0: 0xB4000100E6000001000003011A0220008600000095026000B4000200E600F0
234	 C1	PUSH1	E0	 	 
- stack 3: 0x430
- stack 2: 0x6A0
- stack 1: 0xB4000100E6000001000003011A0220008600000095026000B4000200E600F0
- stack 0: 0xE0
235	 C3	SHR		 	 
- stack 2: 0x430
- stack 1: 0x6A0
- stack 0: 0xB40001
236	 C4	PUSH2	FFFF	 	 
- stack 3: 0x430
- stack 2: 0x6A0
- stack 1: 0xB40001
- stack 0: 0xFFFF
237	 C7	AND		 	 
- stack 2: 0x430
- stack 1: 0x6A0
- stack 0: 0x1
238	 C8	PUSH1	01	 	 
- stack 3: 0x430
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1
239	 CA	SIGNEXTEND		 	 
- stack 2: 0x430
- stack 1: 0x6A0
- stack 0: 0x1
240	 CB	ADD		 	 
- stack 1: 0x430
- stack 0: 0x6A1
241	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x430
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
242	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x430
- stack 0: 0x6A1
243	 D2	PUSH1	03	 	 
- stack 2: 0x430
- stack 1: 0x6A1
- stack 0: 0x3
244	 D4	XOR		 	 
- stack 1: 0x430
- stack 0: 0x6A2
245	 D5	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xFF000000000000000000000000000000000000000000000000000000000000
246	 D6	PUSH1	F8	 	 
- stack 2: 0x430
- stack 1: 0xFF000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
247	 D8	SHR		 	 
- stack 1: 0x430
- stack 0: 0x0
248	 D9	PUSH2	0060	 	 
- stack 2: 0x430
- stack 1: 0x0
- stack 0: 0x60
249	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x430
250	 DD	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
251	 DF	ADD		 	 
- stack 0: 0x434
252	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
253	 E1	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xE6000001000003011A0220008600000095026000B4000200E600F001000004
254	 E2	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xE6000001000003011A0220008600000095026000B4000200E600F001000004
- stack 0: 0xF0
255	 E4	SHR		 	 
- stack 1: 0x434
- stack 0: 0xE6
256	 E5	JUMP		 	 
- stack 0: 0x434
257	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x434
258	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
259	 E8	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xE6000001000003011A0220008600000095026000B4000200E600F001000004
260	 E9	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xE6000001000003011A0220008600000095026000B4000200E600F001000004
- stack 0: 0xE0
261	 EB	SHR		 	 
- stack 1: 0x434
- stack 0: 0xE60000
262	 EC	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xE60000
- stack 0: 0xFFFF
263	 EF	AND		 	 
- stack 1: 0x434
- stack 0: 0x0
264	 F0	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x1
265	 F2	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0x0
266	 F3	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x3A0
267	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x434
268	 F7	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
269	 F9	ADD		 	 
- stack 0: 0x438
270	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
271	 FB	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x1000003011A0220008600000095026000B4000200E600F001000004011A0208
272	 FC	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x1000003011A0220008600000095026000B4000200E600F001000004011A0208
- stack 0: 0xF0
273	 FE	SHR		 	 
- stack 1: 0x438
- stack 0: 0x100
274	 FF	JUMP		 	 
- stack 0: 0x438
275	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x438
276	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
277	 102	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x1000003011A0220008600000095026000B4000200E600F001000004011A0208
278	 103	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0x1000003011A0220008600000095026000B4000200E600F001000004011A0208
- stack 0: 0xE0
279	 105	SHR		 	 
- stack 1: 0x438
- stack 0: 0x1000003
280	 106	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0x1000003
- stack 0: 0xFFFF
281	 109	AND		 	 
- stack 1: 0x438
- stack 0: 0x3
282	 10A	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x1
283	 10C	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x3
284	 10D	PUSH2	0380	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x380
285	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x438
286	 111	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
287	 113	ADD		 	 
- stack 0: 0x43C
288	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
289	 115	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x11A0220008600000095026000B4000200E600F001000004011A020800860000
290	 116	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x11A0220008600000095026000B4000200E600F001000004011A020800860000
- stack 0: 0xF0
291	 118	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x11A
292	 119	JUMP		 	 
- stack 0: 0x43C
293	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x43C
294	 11B	PUSH2	0060	 	 
- stack 1: 0x43C
- stack 0: 0x60
295	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x43C
- stack 0: 0x0
296	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
297	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0x0
298	 125	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x3A0
299	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x0
300	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
301	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x0
302	 12F	SUB		 	 
- stack 1: 0x43C
- stack 0: 0x0
303	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x138
304	 133	JUMPI		 	 
- stack 0: 0x43C
305	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x43C
- stack 0: 0x152
306	 137	JUMP		 	 
- stack 0: 0x43C
307	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x43C
308	 153	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
309	 155	ADD		 	 
- stack 0: 0x440
310	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
311	 157	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x8600000095026000B4000200E600F001000004011A02080086000000950248
312	 158	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x8600000095026000B4000200E600F001000004011A02080086000000950248
- stack 0: 0xF0
313	 15A	SHR		 	 
- stack 1: 0x440
- stack 0: 0x86
314	 15B	JUMP		 	 
- stack 0: 0x440
315	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x440
316	 87	DUP1		 	 
- stack 1: 0x440
- stack 0: 0x440
317	 88	PUSH2	0020	 	 
- stack 2: 0x440
- stack 1: 0x440
- stack 0: 0x20
318	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x440
319	 8C	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
320	 8E	ADD		 	 
- stack 0: 0x444
321	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
322	 90	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x95026000B4000200E600F001000004011A0208008600000095024800B40003
323	 91	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x95026000B4000200E600F001000004011A0208008600000095024800B40003
- stack 0: 0xF0
324	 93	SHR		 	 
- stack 1: 0x444
- stack 0: 0x95
325	 94	JUMP		 	 
- stack 0: 0x444
326	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x444
327	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
328	 97	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x95026000B4000200E600F001000004011A0208008600000095024800B40003
329	 98	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0x95026000B4000200E600F001000004011A0208008600000095024800B40003
- stack 0: 0xE0
330	 9A	SHR		 	 
- stack 1: 0x444
- stack 0: 0x950260
331	 9B	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0x950260
- stack 0: 0xFFFF
332	 9E	AND		 	 
- stack 1: 0x444
- stack 0: 0x260
333	 9F	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x260
- stack 0: 0x1
334	 A1	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x260
335	 A2	PUSH2	0020	 	 
- stack 2: 0x444
- stack 1: 0x260
- stack 0: 0x20
336	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x444
- stack 1: 0x260
- stack 0: 0x440
337	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x444
- stack 0: 0x6A0
338	 A7	PUSH2	0020	 	 
- stack 2: 0x444
- stack 1: 0x6A0
- stack 0: 0x20
339	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x444
340	 AB	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
341	 AD	ADD		 	 
- stack 0: 0x448
342	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
343	 AF	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xB4000200E600F001000004011A0208008600000095024800B4000300E6000F
344	 B0	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xB4000200E600F001000004011A0208008600000095024800B4000300E6000F
- stack 0: 0xF0
345	 B2	SHR		 	 
- stack 1: 0x448
- stack 0: 0xB4
346	 B3	JUMP		 	 
- stack 0: 0x448
347	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x448
348	 B5	PUSH2	0020	 	 
- stack 1: 0x448
- stack 0: 0x20
349	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x448
- stack 0: 0x6A0
350	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
351	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0x6A0
352	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x448
- stack 1: 0x6A0
- stack 0: 0x448
353	 C0	MLOAD		 	 
- stack 2: 0x448
- stack 1: 0x6A0
- stack 0: 0xB4000200E600F001000004011A0208008600000095024800B4000300E6000F
354	 C1	PUSH1	E0	 	 
- stack 3: 0x448
- stack 2: 0x6A0
- stack 1: 0xB4000200E600F001000004011A0208008600000095024800B4000300E6000F
- stack 0: 0xE0
355	 C3	SHR		 	 
- stack 2: 0x448
- stack 1: 0x6A0
- stack 0: 0xB40002
356	 C4	PUSH2	FFFF	 	 
- stack 3: 0x448
- stack 2: 0x6A0
- stack 1: 0xB40002
- stack 0: 0xFFFF
357	 C7	AND		 	 
- stack 2: 0x448
- stack 1: 0x6A0
- stack 0: 0x2
358	 C8	PUSH1	01	 	 
- stack 3: 0x448
- stack 2: 0x6A0
- stack 1: 0x2
- stack 0: 0x1
359	 CA	SIGNEXTEND		 	 
- stack 2: 0x448
- stack 1: 0x6A0
- stack 0: 0x2
360	 CB	ADD		 	 
- stack 1: 0x448
- stack 0: 0x6A2
361	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
362	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0x6A2
363	 D2	PUSH1	03	 	 
- stack 2: 0x448
- stack 1: 0x6A2
- stack 0: 0x3
364	 D4	XOR		 	 
- stack 1: 0x448
- stack 0: 0x6A1
365	 D5	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xF000FF0000000000000000000000000000000000000000000000000000000000
366	 D6	PUSH1	F8	 	 
- stack 2: 0x448
- stack 1: 0xF000FF0000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
367	 D8	SHR		 	 
- stack 1: 0x448
- stack 0: 0xF0
368	 D9	PUSH2	0060	 	 
- stack 2: 0x448
- stack 1: 0xF0
- stack 0: 0x60
369	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x448
370	 DD	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
371	 DF	ADD		 	 
- stack 0: 0x44C
372	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
373	 E1	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xE600F001000004011A0208008600000095024800B4000300E6000F01000005
374	 E2	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0xE600F001000004011A0208008600000095024800B4000300E6000F01000005
- stack 0: 0xF0
375	 E4	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xE6
376	 E5	JUMP		 	 
- stack 0: 0x44C
377	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x44C
378	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
379	 E8	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xE600F001000004011A0208008600000095024800B4000300E6000F01000005
380	 E9	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0xE600F001000004011A0208008600000095024800B4000300E6000F01000005
- stack 0: 0xE0
381	 EB	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xE600F0
382	 EC	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0xE600F0
- stack 0: 0xFFFF
383	 EF	AND		 	 
- stack 1: 0x44C
- stack 0: 0xF0
384	 F0	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0xF0
- stack 0: 0x1
385	 F2	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0xF0
386	 F3	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0xF0
- stack 0: 0x3A0
387	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x44C
388	 F7	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
389	 F9	ADD		 	 
- stack 0: 0x450
390	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
391	 FB	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x1000004011A0208008600000095024800B4000300E6000F01000005011A01F0
392	 FC	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x1000004011A0208008600000095024800B4000300E6000F01000005011A01F0
- stack 0: 0xF0
393	 FE	SHR		 	 
- stack 1: 0x450
- stack 0: 0x100
394	 FF	JUMP		 	 
- stack 0: 0x450
395	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
396	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
397	 102	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x1000004011A0208008600000095024800B4000300E6000F01000005011A01F0
398	 103	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x1000004011A0208008600000095024800B4000300E6000F01000005011A01F0
- stack 0: 0xE0
399	 105	SHR		 	 
- stack 1: 0x450
- stack 0: 0x1000004
400	 106	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x1000004
- stack 0: 0xFFFF
401	 109	AND		 	 
- stack 1: 0x450
- stack 0: 0x4
402	 10A	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x1
403	 10C	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x4
404	 10D	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x380
405	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
406	 111	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
407	 113	ADD		 	 
- stack 0: 0x454
408	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
409	 115	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x11A0208008600000095024800B4000300E6000F01000005011A01F000860000
410	 116	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x11A0208008600000095024800B4000300E6000F01000005011A01F000860000
- stack 0: 0xF0
411	 118	SHR		 	 
- stack 1: 0x454
- stack 0: 0x11A
412	 119	JUMP		 	 
- stack 0: 0x454
413	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x454
414	 11B	PUSH2	0060	 	 
- stack 1: 0x454
- stack 0: 0x60
415	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x454
- stack 0: 0xF0
416	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x454
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
417	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x454
- stack 0: 0xF0
418	 125	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xF0
- stack 0: 0x3A0
419	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x454
- stack 1: 0xF0
- stack 0: 0xF0
420	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x454
- stack 2: 0xF0
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
421	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x454
- stack 1: 0xF0
- stack 0: 0xF0
422	 12F	SUB		 	 
- stack 1: 0x454
- stack 0: 0x0
423	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x454
- stack 1: 0x0
- stack 0: 0x138
424	 133	JUMPI		 	 
- stack 0: 0x454
425	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x454
- stack 0: 0x152
426	 137	JUMP		 	 
- stack 0: 0x454
427	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x454
428	 153	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
429	 155	ADD		 	 
- stack 0: 0x458
430	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
431	 157	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x8600000095024800B4000300E6000F01000005011A01F00086000000950233
432	 158	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x8600000095024800B4000300E6000F01000005011A01F00086000000950233
- stack 0: 0xF0
433	 15A	SHR		 	 
- stack 1: 0x458
- stack 0: 0x86
434	 15B	JUMP		 	 
- stack 0: 0x458
435	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x458
436	 87	DUP1		 	 
- stack 1: 0x458
- stack 0: 0x458
437	 88	PUSH2	0020	 	 
- stack 2: 0x458
- stack 1: 0x458
- stack 0: 0x20
438	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x458
439	 8C	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
440	 8E	ADD		 	 
- stack 0: 0x45C
441	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
442	 90	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x95024800B4000300E6000F01000005011A01F0008600000095023300B4FFFD
443	 91	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x95024800B4000300E6000F01000005011A01F0008600000095023300B4FFFD
- stack 0: 0xF0
444	 93	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x95
445	 94	JUMP		 	 
- stack 0: 0x45C
446	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x45C
447	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
448	 97	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x95024800B4000300E6000F01000005011A01F0008600000095023300B4FFFD
449	 98	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0x95024800B4000300E6000F01000005011A01F0008600000095023300B4FFFD
- stack 0: 0xE0
450	 9A	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x950248
451	 9B	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0x950248
- stack 0: 0xFFFF
452	 9E	AND		 	 
- stack 1: 0x45C
- stack 0: 0x248
453	 9F	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0x248
- stack 0: 0x1
454	 A1	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0x248
455	 A2	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0x248
- stack 0: 0x20
456	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x45C
- stack 1: 0x248
- stack 0: 0x458
457	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x45C
- stack 0: 0x6A0
458	 A7	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0x6A0
- stack 0: 0x20
459	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x45C
460	 AB	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
461	 AD	ADD		 	 
- stack 0: 0x460
462	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
463	 AF	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0xB4000300E6000F01000005011A01F0008600000095023300B4FFFD00E600FF
464	 B0	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0xB4000300E6000F01000005011A01F0008600000095023300B4FFFD00E600FF
- stack 0: 0xF0
465	 B2	SHR		 	 
- stack 1: 0x460
- stack 0: 0xB4
466	 B3	JUMP		 	 
- stack 0: 0x460
467	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x460
468	 B5	PUSH2	0020	 	 
- stack 1: 0x460
- stack 0: 0x20
469	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x460
- stack 0: 0x6A0
470	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x460
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
471	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x460
- stack 0: 0x6A0
472	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x460
- stack 1: 0x6A0
- stack 0: 0x460
473	 C0	MLOAD		 	 
- stack 2: 0x460
- stack 1: 0x6A0
- stack 0: 0xB4000300E6000F01000005011A01F0008600000095023300B4FFFD00E600FF
474	 C1	PUSH1	E0	 	 
- stack 3: 0x460
- stack 2: 0x6A0
- stack 1: 0xB4000300E6000F01000005011A01F0008600000095023300B4FFFD00E600FF
- stack 0: 0xE0
475	 C3	SHR		 	 
- stack 2: 0x460
- stack 1: 0x6A0
- stack 0: 0xB40003
476	 C4	PUSH2	FFFF	 	 
- stack 3: 0x460
- stack 2: 0x6A0
- stack 1: 0xB40003
- stack 0: 0xFFFF
477	 C7	AND		 	 
- stack 2: 0x460
- stack 1: 0x6A0
- stack 0: 0x3
478	 C8	PUSH1	01	 	 
- stack 3: 0x460
- stack 2: 0x6A0
- stack 1: 0x3
- stack 0: 0x1
479	 CA	SIGNEXTEND		 	 
- stack 2: 0x460
- stack 1: 0x6A0
- stack 0: 0x3
480	 CB	ADD		 	 
- stack 1: 0x460
- stack 0: 0x6A3
481	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x460
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
482	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x460
- stack 0: 0x6A3
483	 D2	PUSH1	03	 	 
- stack 2: 0x460
- stack 1: 0x6A3
- stack 0: 0x3
484	 D4	XOR		 	 
- stack 1: 0x460
- stack 0: 0x6A0
485	 D5	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0xFF000FF00000000000000000000000000000000000000000000000000000000
486	 D6	PUSH1	F8	 	 
- stack 2: 0x460
- stack 1: 0xFF000FF00000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
487	 D8	SHR		 	 
- stack 1: 0x460
- stack 0: 0xF
488	 D9	PUSH2	0060	 	 
- stack 2: 0x460
- stack 1: 0xF
- stack 0: 0x60
489	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x460
490	 DD	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
491	 DF	ADD		 	 
- stack 0: 0x464
492	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
493	 E1	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xE6000F01000005011A01F0008600000095023300B4FFFD00E600FF01000006
494	 E2	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xE6000F01000005011A01F0008600000095023300B4FFFD00E600FF01000006
- stack 0: 0xF0
495	 E4	SHR		 	 
- stack 1: 0x464
- stack 0: 0xE6
496	 E5	JUMP		 	 
- stack 0: 0x464
497	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x464
498	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
499	 E8	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xE6000F01000005011A01F0008600000095023300B4FFFD00E600FF01000006
500	 E9	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0xE6000F01000005011A01F0008600000095023300B4FFFD00E600FF01000006
- stack 0: 0xE0
501	 EB	SHR		 	 
- stack 1: 0x464
- stack 0: 0xE6000F
502	 EC	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0xE6000F
- stack 0: 0xFFFF
503	 EF	AND		 	 
- stack 1: 0x464
- stack 0: 0xF
504	 F0	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xF
- stack 0: 0x1
505	 F2	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xF
506	 F3	PUSH2	03A0	 	 
- stack 2: 0x464
- stack 1: 0xF
- stack 0: 0x3A0
507	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x464
508	 F7	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
509	 F9	ADD		 	 
- stack 0: 0x468
510	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
511	 FB	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x1000005011A01F0008600000095023300B4FFFD00E600FF01000006011A01D8
512	 FC	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x1000005011A01F0008600000095023300B4FFFD00E600FF01000006011A01D8
- stack 0: 0xF0
513	 FE	SHR		 	 
- stack 1: 0x468
- stack 0: 0x100
514	 FF	JUMP		 	 
- stack 0: 0x468
515	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x468
516	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
517	 102	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x1000005011A01F0008600000095023300B4FFFD00E600FF01000006011A01D8
518	 103	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0x1000005011A01F0008600000095023300B4FFFD00E600FF01000006011A01D8
- stack 0: 0xE0
519	 105	SHR		 	 
- stack 1: 0x468
- stack 0: 0x1000005
520	 106	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0x1000005
- stack 0: 0xFFFF
521	 109	AND		 	 
- stack 1: 0x468
- stack 0: 0x5
522	 10A	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0x5
- stack 0: 0x1
523	 10C	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0x5
524	 10D	PUSH2	0380	 	 
- stack 2: 0x468
- stack 1: 0x5
- stack 0: 0x380
525	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x468
526	 111	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
527	 113	ADD		 	 
- stack 0: 0x46C
528	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
529	 115	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x11A01F0008600000095023300B4FFFD00E600FF01000006011A01D800860000
530	 116	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x11A01F0008600000095023300B4FFFD00E600FF01000006011A01D800860000
- stack 0: 0xF0
531	 118	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x11A
532	 119	JUMP		 	 
- stack 0: 0x46C
533	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x46C
534	 11B	PUSH2	0060	 	 
- stack 1: 0x46C
- stack 0: 0x60
535	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x46C
- stack 0: 0xF
536	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x46C
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
537	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x46C
- stack 0: 0xF
538	 125	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0xF
- stack 0: 0x3A0
539	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x46C
- stack 1: 0xF
- stack 0: 0xF
540	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x46C
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
541	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x46C
- stack 1: 0xF
- stack 0: 0xF
542	 12F	SUB		 	 
- stack 1: 0x46C
- stack 0: 0x0
543	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x46C
- stack 1: 0x0
- stack 0: 0x138
544	 133	JUMPI		 	 
- stack 0: 0x46C
545	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x46C
- stack 0: 0x152
546	 137	JUMP		 	 
- stack 0: 0x46C
547	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x46C
548	 153	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
549	 155	ADD		 	 
- stack 0: 0x470
550	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
551	 157	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x8600000095023300B4FFFD00E600FF01000006011A01D8008600000095021B
552	 158	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x8600000095023300B4FFFD00E600FF01000006011A01D8008600000095021B
- stack 0: 0xF0
553	 15A	SHR		 	 
- stack 1: 0x470
- stack 0: 0x86
554	 15B	JUMP		 	 
- stack 0: 0x470
555	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x470
556	 87	DUP1		 	 
- stack 1: 0x470
- stack 0: 0x470
557	 88	PUSH2	0020	 	 
- stack 2: 0x470
- stack 1: 0x470
- stack 0: 0x20
558	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x470
559	 8C	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
560	 8E	ADD		 	 
- stack 0: 0x474
561	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
562	 90	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x95023300B4FFFD00E600FF01000006011A01D8008600000095021B00B4FFFE
563	 91	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x95023300B4FFFD00E600FF01000006011A01D8008600000095021B00B4FFFE
- stack 0: 0xF0
564	 93	SHR		 	 
- stack 1: 0x474
- stack 0: 0x95
565	 94	JUMP		 	 
- stack 0: 0x474
566	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x474
567	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
568	 97	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x95023300B4FFFD00E600FF01000006011A01D8008600000095021B00B4FFFE
569	 98	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0x95023300B4FFFD00E600FF01000006011A01D8008600000095021B00B4FFFE
- stack 0: 0xE0
570	 9A	SHR		 	 
- stack 1: 0x474
- stack 0: 0x950233
571	 9B	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0x950233
- stack 0: 0xFFFF
572	 9E	AND		 	 
- stack 1: 0x474
- stack 0: 0x233
573	 9F	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x233
- stack 0: 0x1
574	 A1	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x233
575	 A2	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0x233
- stack 0: 0x20
576	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x474
- stack 1: 0x233
- stack 0: 0x470
577	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x474
- stack 0: 0x6A3
578	 A7	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0x6A3
- stack 0: 0x20
579	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x474
580	 AB	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
581	 AD	ADD		 	 
- stack 0: 0x478
582	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
583	 AF	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xB4FFFD00E600FF01000006011A01D8008600000095021B00B4FFFE00E60000
584	 B0	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0xB4FFFD00E600FF01000006011A01D8008600000095021B00B4FFFE00E60000
- stack 0: 0xF0
585	 B2	SHR		 	 
- stack 1: 0x478
- stack 0: 0xB4
586	 B3	JUMP		 	 
- stack 0: 0x478
587	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x478
588	 B5	PUSH2	0020	 	 
- stack 1: 0x478
- stack 0: 0x20
589	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x478
- stack 0: 0x6A3
590	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x478
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
591	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x478
- stack 0: 0x6A3
592	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x478
- stack 1: 0x6A3
- stack 0: 0x478
593	 C0	MLOAD		 	 
- stack 2: 0x478
- stack 1: 0x6A3
- stack 0: 0xB4FFFD00E600FF01000006011A01D8008600000095021B00B4FFFE00E60000
594	 C1	PUSH1	E0	 	 
- stack 3: 0x478
- stack 2: 0x6A3
- stack 1: 0xB4FFFD00E600FF01000006011A01D8008600000095021B00B4FFFE00E60000
- stack 0: 0xE0
595	 C3	SHR		 	 
- stack 2: 0x478
- stack 1: 0x6A3
- stack 0: 0xB4FFFD
596	 C4	PUSH2	FFFF	 	 
- stack 3: 0x478
- stack 2: 0x6A3
- stack 1: 0xB4FFFD
- stack 0: 0xFFFF
597	 C7	AND		 	 
- stack 2: 0x478
- stack 1: 0x6A3
- stack 0: 0xFFFD
598	 C8	PUSH1	01	 	 
- stack 3: 0x478
- stack 2: 0x6A3
- stack 1: 0xFFFD
- stack 0: 0x1
599	 CA	SIGNEXTEND		 	 
- stack 2: 0x478
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD
600	 CB	ADD		 	 
- stack 1: 0x478
- stack 0: 0x6A0
601	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x478
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
602	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x478
- stack 0: 0x6A0
603	 D2	PUSH1	03	 	 
- stack 2: 0x478
- stack 1: 0x6A0
- stack 0: 0x3
604	 D4	XOR		 	 
- stack 1: 0x478
- stack 0: 0x6A3
605	 D5	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xFF00000000000000000000000000000000000000000000000000000000000000
606	 D6	PUSH1	F8	 	 
- stack 2: 0x478
- stack 1: 0xFF00000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
607	 D8	SHR		 	 
- stack 1: 0x478
- stack 0: 0xFF
608	 D9	PUSH2	0060	 	 
- stack 2: 0x478
- stack 1: 0xFF
- stack 0: 0x60
609	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x478
610	 DD	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
611	 DF	ADD		 	 
- stack 0: 0x47C
612	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
613	 E1	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xE600FF01000006011A01D8008600000095021B00B4FFFE00E6000001000007
614	 E2	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0xE600FF01000006011A01D8008600000095021B00B4FFFE00E6000001000007
- stack 0: 0xF0
615	 E4	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xE6
616	 E5	JUMP		 	 
- stack 0: 0x47C
617	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x47C
618	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
619	 E8	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xE600FF01000006011A01D8008600000095021B00B4FFFE00E6000001000007
620	 E9	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0xE600FF01000006011A01D8008600000095021B00B4FFFE00E6000001000007
- stack 0: 0xE0
621	 EB	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xE600FF
622	 EC	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0xE600FF
- stack 0: 0xFFFF
623	 EF	AND		 	 
- stack 1: 0x47C
- stack 0: 0xFF
624	 F0	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0xFF
- stack 0: 0x1
625	 F2	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0xFF
626	 F3	PUSH2	03A0	 	 
- stack 2: 0x47C
- stack 1: 0xFF
- stack 0: 0x3A0
627	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x47C
628	 F7	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
629	 F9	ADD		 	 
- stack 0: 0x480
630	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
631	 FB	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x1000006011A01D8008600000095021B00B4FFFE00E6000001000007011A01C0
632	 FC	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x1000006011A01D8008600000095021B00B4FFFE00E6000001000007011A01C0
- stack 0: 0xF0
633	 FE	SHR		 	 
- stack 1: 0x480
- stack 0: 0x100
634	 FF	JUMP		 	 
- stack 0: 0x480
635	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x480
636	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
637	 102	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x1000006011A01D8008600000095021B00B4FFFE00E6000001000007011A01C0
638	 103	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x1000006011A01D8008600000095021B00B4FFFE00E6000001000007011A01C0
- stack 0: 0xE0
639	 105	SHR		 	 
- stack 1: 0x480
- stack 0: 0x1000006
640	 106	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x1000006
- stack 0: 0xFFFF
641	 109	AND		 	 
- stack 1: 0x480
- stack 0: 0x6
642	 10A	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0x6
- stack 0: 0x1
643	 10C	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x6
644	 10D	PUSH2	0380	 	 
- stack 2: 0x480
- stack 1: 0x6
- stack 0: 0x380
645	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x480
646	 111	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
647	 113	ADD		 	 
- stack 0: 0x484
648	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
649	 115	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x11A01D8008600000095021B00B4FFFE00E6000001000007011A01C000860000
650	 116	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x11A01D8008600000095021B00B4FFFE00E6000001000007011A01C000860000
- stack 0: 0xF0
651	 118	SHR		 	 
- stack 1: 0x484
- stack 0: 0x11A
652	 119	JUMP		 	 
- stack 0: 0x484
653	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x484
654	 11B	PUSH2	0060	 	 
- stack 1: 0x484
- stack 0: 0x60
655	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x484
- stack 0: 0xFF
656	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x484
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
657	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x484
- stack 0: 0xFF
658	 125	PUSH2	03A0	 	 
- stack 2: 0x484
- stack 1: 0xFF
- stack 0: 0x3A0
659	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x484
- stack 1: 0xFF
- stack 0: 0xFF
660	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x484
- stack 2: 0xFF
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
661	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x484
- stack 1: 0xFF
- stack 0: 0xFF
662	 12F	SUB		 	 
- stack 1: 0x484
- stack 0: 0x0
663	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x138
664	 133	JUMPI		 	 
- stack 0: 0x484
665	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x484
- stack 0: 0x152
666	 137	JUMP		 	 
- stack 0: 0x484
667	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x484
668	 153	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
669	 155	ADD		 	 
- stack 0: 0x488
670	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
671	 157	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x8600000095021B00B4FFFE00E6000001000007011A01C00086000000950203
672	 158	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x8600000095021B00B4FFFE00E6000001000007011A01C00086000000950203
- stack 0: 0xF0
673	 15A	SHR		 	 
- stack 1: 0x488
- stack 0: 0x86
674	 15B	JUMP		 	 
- stack 0: 0x488
675	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x488
676	 87	DUP1		 	 
- stack 1: 0x488
- stack 0: 0x488
677	 88	PUSH2	0020	 	 
- stack 2: 0x488
- stack 1: 0x488
- stack 0: 0x20
678	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x488
679	 8C	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
680	 8E	ADD		 	 
- stack 0: 0x48C
681	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
682	 90	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x95021B00B4FFFE00E6000001000007011A01C0008600000095020300B4FFFF
683	 91	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x95021B00B4FFFE00E6000001000007011A01C0008600000095020300B4FFFF
- stack 0: 0xF0
684	 93	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x95
685	 94	JUMP		 	 
- stack 0: 0x48C
686	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x48C
687	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
688	 97	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x95021B00B4FFFE00E6000001000007011A01C0008600000095020300B4FFFF
689	 98	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0x95021B00B4FFFE00E6000001000007011A01C0008600000095020300B4FFFF
- stack 0: 0xE0
690	 9A	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x95021B
691	 9B	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0x95021B
- stack 0: 0xFFFF
692	 9E	AND		 	 
- stack 1: 0x48C
- stack 0: 0x21B
693	 9F	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0x21B
- stack 0: 0x1
694	 A1	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0x21B
695	 A2	PUSH2	0020	 	 
- stack 2: 0x48C
- stack 1: 0x21B
- stack 0: 0x20
696	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x48C
- stack 1: 0x21B
- stack 0: 0x488
697	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x48C
- stack 0: 0x6A3
698	 A7	PUSH2	0020	 	 
- stack 2: 0x48C
- stack 1: 0x6A3
- stack 0: 0x20
699	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x48C
700	 AB	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
701	 AD	ADD		 	 
- stack 0: 0x490
702	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
703	 AF	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xB4FFFE00E6000001000007011A01C0008600000095020300B4FFFF00E600F0
704	 B0	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xB4FFFE00E6000001000007011A01C0008600000095020300B4FFFF00E600F0
- stack 0: 0xF0
705	 B2	SHR		 	 
- stack 1: 0x490
- stack 0: 0xB4
706	 B3	JUMP		 	 
- stack 0: 0x490
707	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x490
708	 B5	PUSH2	0020	 	 
- stack 1: 0x490
- stack 0: 0x20
709	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x490
- stack 0: 0x6A3
710	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x490
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
711	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x490
- stack 0: 0x6A3
712	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x490
- stack 1: 0x6A3
- stack 0: 0x490
713	 C0	MLOAD		 	 
- stack 2: 0x490
- stack 1: 0x6A3
- stack 0: 0xB4FFFE00E6000001000007011A01C0008600000095020300B4FFFF00E600F0
714	 C1	PUSH1	E0	 	 
- stack 3: 0x490
- stack 2: 0x6A3
- stack 1: 0xB4FFFE00E6000001000007011A01C0008600000095020300B4FFFF00E600F0
- stack 0: 0xE0
715	 C3	SHR		 	 
- stack 2: 0x490
- stack 1: 0x6A3
- stack 0: 0xB4FFFE
716	 C4	PUSH2	FFFF	 	 
- stack 3: 0x490
- stack 2: 0x6A3
- stack 1: 0xB4FFFE
- stack 0: 0xFFFF
717	 C7	AND		 	 
- stack 2: 0x490
- stack 1: 0x6A3
- stack 0: 0xFFFE
718	 C8	PUSH1	01	 	 
- stack 3: 0x490
- stack 2: 0x6A3
- stack 1: 0xFFFE
- stack 0: 0x1
719	 CA	SIGNEXTEND		 	 
- stack 2: 0x490
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
720	 CB	ADD		 	 
- stack 1: 0x490
- stack 0: 0x6A1
721	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x490
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
722	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x490
- stack 0: 0x6A1
723	 D2	PUSH1	03	 	 
- stack 2: 0x490
- stack 1: 0x6A1
- stack 0: 0x3
724	 D4	XOR		 	 
- stack 1: 0x490
- stack 0: 0x6A2
725	 D5	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xFF000000000000000000000000000000000000000000000000000000000000
726	 D6	PUSH1	F8	 	 
- stack 2: 0x490
- stack 1: 0xFF000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
727	 D8	SHR		 	 
- stack 1: 0x490
- stack 0: 0x0
728	 D9	PUSH2	0060	 	 
- stack 2: 0x490
- stack 1: 0x0
- stack 0: 0x60
729	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x490
730	 DD	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
731	 DF	ADD		 	 
- stack 0: 0x494
732	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
733	 E1	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xE6000001000007011A01C0008600000095020300B4FFFF00E600F001000008
734	 E2	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xE6000001000007011A01C0008600000095020300B4FFFF00E600F001000008
- stack 0: 0xF0
735	 E4	SHR		 	 
- stack 1: 0x494
- stack 0: 0xE6
736	 E5	JUMP		 	 
- stack 0: 0x494
737	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x494
738	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
739	 E8	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xE6000001000007011A01C0008600000095020300B4FFFF00E600F001000008
740	 E9	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0xE6000001000007011A01C0008600000095020300B4FFFF00E600F001000008
- stack 0: 0xE0
741	 EB	SHR		 	 
- stack 1: 0x494
- stack 0: 0xE60000
742	 EC	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0xE60000
- stack 0: 0xFFFF
743	 EF	AND		 	 
- stack 1: 0x494
- stack 0: 0x0
744	 F0	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x1
745	 F2	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x0
746	 F3	PUSH2	03A0	 	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x3A0
747	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x494
748	 F7	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
749	 F9	ADD		 	 
- stack 0: 0x498
750	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
751	 FB	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x1000007011A01C0008600000095020300B4FFFF00E600F001000008011A01A8
752	 FC	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x1000007011A01C0008600000095020300B4FFFF00E600F001000008011A01A8
- stack 0: 0xF0
753	 FE	SHR		 	 
- stack 1: 0x498
- stack 0: 0x100
754	 FF	JUMP		 	 
- stack 0: 0x498
755	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x498
756	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
757	 102	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x1000007011A01C0008600000095020300B4FFFF00E600F001000008011A01A8
758	 103	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0x1000007011A01C0008600000095020300B4FFFF00E600F001000008011A01A8
- stack 0: 0xE0
759	 105	SHR		 	 
- stack 1: 0x498
- stack 0: 0x1000007
760	 106	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0x1000007
- stack 0: 0xFFFF
761	 109	AND		 	 
- stack 1: 0x498
- stack 0: 0x7
762	 10A	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x7
- stack 0: 0x1
763	 10C	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x7
764	 10D	PUSH2	0380	 	 
- stack 2: 0x498
- stack 1: 0x7
- stack 0: 0x380
765	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x498
766	 111	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
767	 113	ADD		 	 
- stack 0: 0x49C
768	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
769	 115	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x11A01C0008600000095020300B4FFFF00E600F001000008011A01A800860000
770	 116	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x11A01C0008600000095020300B4FFFF00E600F001000008011A01A800860000
- stack 0: 0xF0
771	 118	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x11A
772	 119	JUMP		 	 
- stack 0: 0x49C
773	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x49C
774	 11B	PUSH2	0060	 	 
- stack 1: 0x49C
- stack 0: 0x60
775	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x49C
- stack 0: 0x0
776	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
777	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0x0
778	 125	PUSH2	03A0	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x3A0
779	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x0
780	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x49C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
781	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x0
782	 12F	SUB		 	 
- stack 1: 0x49C
- stack 0: 0x0
783	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x138
784	 133	JUMPI		 	 
- stack 0: 0x49C
785	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x49C
- stack 0: 0x152
786	 137	JUMP		 	 
- stack 0: 0x49C
787	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x49C
788	 153	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
789	 155	ADD		 	 
- stack 0: 0x4A0
790	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
791	 157	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x8600000095020300B4FFFF00E600F001000008011A01A800860000009501EB
792	 158	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x8600000095020300B4FFFF00E600F001000008011A01A800860000009501EB
- stack 0: 0xF0
793	 15A	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x86
794	 15B	JUMP		 	 
- stack 0: 0x4A0
795	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4A0
796	 87	DUP1		 	 
- stack 1: 0x4A0
- stack 0: 0x4A0
797	 88	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0x4A0
- stack 0: 0x20
798	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A0
799	 8C	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
800	 8E	ADD		 	 
- stack 0: 0x4A4
801	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
802	 90	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x95020300B4FFFF00E600F001000008011A01A800860000009501EB00B40000
803	 91	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x95020300B4FFFF00E600F001000008011A01A800860000009501EB00B40000
- stack 0: 0xF0
804	 93	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x95
805	 94	JUMP		 	 
- stack 0: 0x4A4
806	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x4A4
807	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
808	 97	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x95020300B4FFFF00E600F001000008011A01A800860000009501EB00B40000
809	 98	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x95020300B4FFFF00E600F001000008011A01A800860000009501EB00B40000
- stack 0: 0xE0
810	 9A	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x950203
811	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x950203
- stack 0: 0xFFFF
812	 9E	AND		 	 
- stack 1: 0x4A4
- stack 0: 0x203
813	 9F	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0x203
- stack 0: 0x1
814	 A1	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0x203
815	 A2	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0x203
- stack 0: 0x20
816	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A4
- stack 1: 0x203
- stack 0: 0x4A0
817	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4A4
- stack 0: 0x6A3
818	 A7	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0x6A3
- stack 0: 0x20
819	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A4
820	 AB	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
821	 AD	ADD		 	 
- stack 0: 0x4A8
822	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
823	 AF	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xB4FFFF00E600F001000008011A01A800860000009501EB00B4000000E6000F
824	 B0	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xB4FFFF00E600F001000008011A01A800860000009501EB00B4000000E6000F
- stack 0: 0xF0
825	 B2	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xB4
826	 B3	JUMP		 	 
- stack 0: 0x4A8
827	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x4A8
828	 B5	PUSH2	0020	 	 
- stack 1: 0x4A8
- stack 0: 0x20
829	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4A8
- stack 0: 0x6A3
830	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
831	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A8
- stack 0: 0x6A3
832	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4A8
- stack 1: 0x6A3
- stack 0: 0x4A8
833	 C0	MLOAD		 	 
- stack 2: 0x4A8
- stack 1: 0x6A3
- stack 0: 0xB4FFFF00E600F001000008011A01A800860000009501EB00B4000000E6000F
834	 C1	PUSH1	E0	 	 
- stack 3: 0x4A8
- stack 2: 0x6A3
- stack 1: 0xB4FFFF00E600F001000008011A01A800860000009501EB00B4000000E6000F
- stack 0: 0xE0
835	 C3	SHR		 	 
- stack 2: 0x4A8
- stack 1: 0x6A3
- stack 0: 0xB4FFFF
836	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4A8
- stack 2: 0x6A3
- stack 1: 0xB4FFFF
- stack 0: 0xFFFF
837	 C7	AND		 	 
- stack 2: 0x4A8
- stack 1: 0x6A3
- stack 0: 0xFFFF
838	 C8	PUSH1	01	 	 
- stack 3: 0x4A8
- stack 2: 0x6A3
- stack 1: 0xFFFF
- stack 0: 0x1
839	 CA	SIGNEXTEND		 	 
- stack 2: 0x4A8
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
840	 CB	ADD		 	 
- stack 1: 0x4A8
- stack 0: 0x6A2
841	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
842	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A8
- stack 0: 0x6A2
843	 D2	PUSH1	03	 	 
- stack 2: 0x4A8
- stack 1: 0x6A2
- stack 0: 0x3
844	 D4	XOR		 	 
- stack 1: 0x4A8
- stack 0: 0x6A1
845	 D5	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xF000FF0000000000000000000000000000000000000000000000000000000000
846	 D6	PUSH1	F8	 	 
- stack 2: 0x4A8
- stack 1: 0xF000FF0000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
847	 D8	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xF0
848	 D9	PUSH2	0060	 	 
- stack 2: 0x4A8
- stack 1: 0xF0
- stack 0: 0x60
849	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x4A8
850	 DD	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
851	 DF	ADD		 	 
- stack 0: 0x4AC
852	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
853	 E1	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xE600F001000008011A01A800860000009501EB00B4000000E6000F01000009
854	 E2	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xE600F001000008011A01A800860000009501EB00B4000000E6000F01000009
- stack 0: 0xF0
855	 E4	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xE6
856	 E5	JUMP		 	 
- stack 0: 0x4AC
857	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x4AC
858	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
859	 E8	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xE600F001000008011A01A800860000009501EB00B4000000E6000F01000009
860	 E9	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0xE600F001000008011A01A800860000009501EB00B4000000E6000F01000009
- stack 0: 0xE0
861	 EB	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xE600F0
862	 EC	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0xE600F0
- stack 0: 0xFFFF
863	 EF	AND		 	 
- stack 1: 0x4AC
- stack 0: 0xF0
864	 F0	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0xF0
- stack 0: 0x1
865	 F2	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0xF0
866	 F3	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0xF0
- stack 0: 0x3A0
867	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x4AC
868	 F7	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
869	 F9	ADD		 	 
- stack 0: 0x4B0
870	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
871	 FB	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x1000008011A01A800860000009501EB00B4000000E6000F01000009011A0190
872	 FC	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x1000008011A01A800860000009501EB00B4000000E6000F01000009011A0190
- stack 0: 0xF0
873	 FE	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x100
874	 FF	JUMP		 	 
- stack 0: 0x4B0
875	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4B0
876	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
877	 102	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x1000008011A01A800860000009501EB00B4000000E6000F01000009011A0190
878	 103	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x1000008011A01A800860000009501EB00B4000000E6000F01000009011A0190
- stack 0: 0xE0
879	 105	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x1000008
880	 106	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x1000008
- stack 0: 0xFFFF
881	 109	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x8
882	 10A	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x8
- stack 0: 0x1
883	 10C	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x8
884	 10D	PUSH2	0380	 	 
- stack 2: 0x4B0
- stack 1: 0x8
- stack 0: 0x380
885	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x4B0
886	 111	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
887	 113	ADD		 	 
- stack 0: 0x4B4
888	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
889	 115	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x11A01A800860000009501EB00B4000000E6000F01000009011A019000860000
890	 116	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x11A01A800860000009501EB00B4000000E6000F01000009011A019000860000
- stack 0: 0xF0
891	 118	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x11A
892	 119	JUMP		 	 
- stack 0: 0x4B4
893	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x4B4
894	 11B	PUSH2	0060	 	 
- stack 1: 0x4B4
- stack 0: 0x60
895	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x4B4
- stack 0: 0xF0
896	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B4
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
897	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B4
- stack 0: 0xF0
898	 125	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0xF0
- stack 0: 0x3A0
899	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x4B4
- stack 1: 0xF0
- stack 0: 0xF0
900	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B4
- stack 2: 0xF0
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
901	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B4
- stack 1: 0xF0
- stack 0: 0xF0
902	 12F	SUB		 	 
- stack 1: 0x4B4
- stack 0: 0x0
903	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x4B4
- stack 1: 0x0
- stack 0: 0x138
904	 133	JUMPI		 	 
- stack 0: 0x4B4
905	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x4B4
- stack 0: 0x152
906	 137	JUMP		 	 
- stack 0: 0x4B4
907	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x4B4
908	 153	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
909	 155	ADD		 	 
- stack 0: 0x4B8
910	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
911	 157	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x860000009501EB00B4000000E6000F01000009011A019000860000009501D0
912	 158	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x860000009501EB00B4000000E6000F01000009011A019000860000009501D0
- stack 0: 0xF0
913	 15A	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x86
914	 15B	JUMP		 	 
- stack 0: 0x4B8
915	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4B8
916	 87	DUP1		 	 
- stack 1: 0x4B8
- stack 0: 0x4B8
917	 88	PUSH2	0020	 	 
- stack 2: 0x4B8
- stack 1: 0x4B8
- stack 0: 0x20
918	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B8
919	 8C	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
920	 8E	ADD		 	 
- stack 0: 0x4BC
921	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
922	 90	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x9501EB00B4000000E6000F01000009011A019000860000009501D00095FFE0
923	 91	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x9501EB00B4000000E6000F01000009011A019000860000009501D00095FFE0
- stack 0: 0xF0
924	 93	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x95
925	 94	JUMP		 	 
- stack 0: 0x4BC
926	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x4BC
927	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
928	 97	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x9501EB00B4000000E6000F01000009011A019000860000009501D00095FFE0
929	 98	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0x9501EB00B4000000E6000F01000009011A019000860000009501D00095FFE0
- stack 0: 0xE0
930	 9A	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x9501EB
931	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x9501EB
- stack 0: 0xFFFF
932	 9E	AND		 	 
- stack 1: 0x4BC
- stack 0: 0x1EB
933	 9F	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0x1EB
- stack 0: 0x1
934	 A1	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0x1EB
935	 A2	PUSH2	0020	 	 
- stack 2: 0x4BC
- stack 1: 0x1EB
- stack 0: 0x20
936	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4BC
- stack 1: 0x1EB
- stack 0: 0x4B8
937	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4BC
- stack 0: 0x6A3
938	 A7	PUSH2	0020	 	 
- stack 2: 0x4BC
- stack 1: 0x6A3
- stack 0: 0x20
939	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4BC
940	 AB	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
941	 AD	ADD		 	 
- stack 0: 0x4C0
942	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
943	 AF	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xB4000000E6000F01000009011A019000860000009501D00095FFE000B40020
944	 B0	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0xB4000000E6000F01000009011A019000860000009501D00095FFE000B40020
- stack 0: 0xF0
945	 B2	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xB4
946	 B3	JUMP		 	 
- stack 0: 0x4C0
947	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x4C0
948	 B5	PUSH2	0020	 	 
- stack 1: 0x4C0
- stack 0: 0x20
949	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4C0
- stack 0: 0x6A3
950	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
951	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C0
- stack 0: 0x6A3
952	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0x4C0
953	 C0	MLOAD		 	 
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0xB4000000E6000F01000009011A019000860000009501D00095FFE000B40020
954	 C1	PUSH1	E0	 	 
- stack 3: 0x4C0
- stack 2: 0x6A3
- stack 1: 0xB4000000E6000F01000009011A019000860000009501D00095FFE000B40020
- stack 0: 0xE0
955	 C3	SHR		 	 
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0xB40000
956	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4C0
- stack 2: 0x6A3
- stack 1: 0xB40000
- stack 0: 0xFFFF
957	 C7	AND		 	 
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0x0
958	 C8	PUSH1	01	 	 
- stack 3: 0x4C0
- stack 2: 0x6A3
- stack 1: 0x0
- stack 0: 0x1
959	 CA	SIGNEXTEND		 	 
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0x0
960	 CB	ADD		 	 
- stack 1: 0x4C0
- stack 0: 0x6A3
961	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
962	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C0
- stack 0: 0x6A3
963	 D2	PUSH1	03	 	 
- stack 2: 0x4C0
- stack 1: 0x6A3
- stack 0: 0x3
964	 D4	XOR		 	 
- stack 1: 0x4C0
- stack 0: 0x6A0
965	 D5	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xFF000FF00000000000000000000000000000000000000000000000000000000
966	 D6	PUSH1	F8	 	 
- stack 2: 0x4C0
- stack 1: 0xFF000FF00000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
967	 D8	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xF
968	 D9	PUSH2	0060	 	 
- stack 2: 0x4C0
- stack 1: 0xF
- stack 0: 0x60
969	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x4C0
970	 DD	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
971	 DF	ADD		 	 
- stack 0: 0x4C4
972	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
973	 E1	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xE6000F01000009011A019000860000009501D00095FFE000B4002000E600FF
974	 E2	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0xE6000F01000009011A019000860000009501D00095FFE000B4002000E600FF
- stack 0: 0xF0
975	 E4	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xE6
976	 E5	JUMP		 	 
- stack 0: 0x4C4
977	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x4C4
978	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
979	 E8	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xE6000F01000009011A019000860000009501D00095FFE000B4002000E600FF
980	 E9	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0xE6000F01000009011A019000860000009501D00095FFE000B4002000E600FF
- stack 0: 0xE0
981	 EB	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xE6000F
982	 EC	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0xE6000F
- stack 0: 0xFFFF
983	 EF	AND		 	 
- stack 1: 0x4C4
- stack 0: 0xF
984	 F0	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0xF
- stack 0: 0x1
985	 F2	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0xF
986	 F3	PUSH2	03A0	 	 
- stack 2: 0x4C4
- stack 1: 0xF
- stack 0: 0x3A0
987	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x4C4
988	 F7	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
989	 F9	ADD		 	 
- stack 0: 0x4C8
990	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
991	 FB	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x1000009011A019000860000009501D00095FFE000B4002000E600FF0100000A
992	 FC	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x1000009011A019000860000009501D00095FFE000B4002000E600FF0100000A
- stack 0: 0xF0
993	 FE	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x100
994	 FF	JUMP		 	 
- stack 0: 0x4C8
995	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C8
996	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
997	 102	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x1000009011A019000860000009501D00095FFE000B4002000E600FF0100000A
998	 103	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0x1000009011A019000860000009501D00095FFE000B4002000E600FF0100000A
- stack 0: 0xE0
999	 105	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x1000009
1000	 106	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0x1000009
- stack 0: 0xFFFF
1001	 109	AND		 	 
- stack 1: 0x4C8
- stack 0: 0x9
1002	 10A	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0x9
- stack 0: 0x1
1003	 10C	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0x9
1004	 10D	PUSH2	0380	 	 
- stack 2: 0x4C8
- stack 1: 0x9
- stack 0: 0x380
1005	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C8
1006	 111	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
1007	 113	ADD		 	 
- stack 0: 0x4CC
1008	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
1009	 115	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x11A019000860000009501D00095FFE000B4002000E600FF0100000A011A0174
1010	 116	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x11A019000860000009501D00095FFE000B4002000E600FF0100000A011A0174
- stack 0: 0xF0
1011	 118	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x11A
1012	 119	JUMP		 	 
- stack 0: 0x4CC
1013	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x4CC
1014	 11B	PUSH2	0060	 	 
- stack 1: 0x4CC
- stack 0: 0x60
1015	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x4CC
- stack 0: 0xF
1016	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4CC
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
1017	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4CC
- stack 0: 0xF
1018	 125	PUSH2	03A0	 	 
- stack 2: 0x4CC
- stack 1: 0xF
- stack 0: 0x3A0
1019	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x4CC
- stack 1: 0xF
- stack 0: 0xF
1020	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4CC
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
1021	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4CC
- stack 1: 0xF
- stack 0: 0xF
1022	 12F	SUB		 	 
- stack 1: 0x4CC
- stack 0: 0x0
1023	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x4CC
- stack 1: 0x0
- stack 0: 0x138
1024	 133	JUMPI		 	 
- stack 0: 0x4CC
1025	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x4CC
- stack 0: 0x152
1026	 137	JUMP		 	 
- stack 0: 0x4CC
1027	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x4CC
1028	 153	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
1029	 155	ADD		 	 
- stack 0: 0x4D0
1030	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
1031	 157	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x860000009501D00095FFE000B4002000E600FF0100000A011A017400860000
1032	 158	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x860000009501D00095FFE000B4002000E600FF0100000A011A017400860000
- stack 0: 0xF0
1033	 15A	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x86
1034	 15B	JUMP		 	 
- stack 0: 0x4D0
1035	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4D0
1036	 87	DUP1		 	 
- stack 1: 0x4D0
- stack 0: 0x4D0
1037	 88	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0x4D0
- stack 0: 0x20
1038	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D0
1039	 8C	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1040	 8E	ADD		 	 
- stack 0: 0x4D4
1041	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1042	 90	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x9501D00095FFE000B4002000E600FF0100000A011A017400860000009501B4
1043	 91	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x9501D00095FFE000B4002000E600FF0100000A011A017400860000009501B4
- stack 0: 0xF0
1044	 93	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x95
1045	 94	JUMP		 	 
- stack 0: 0x4D4
1046	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x4D4
1047	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
1048	 97	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x9501D00095FFE000B4002000E600FF0100000A011A017400860000009501B4
1049	 98	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0x9501D00095FFE000B4002000E600FF0100000A011A017400860000009501B4
- stack 0: 0xE0
1050	 9A	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x9501D0
1051	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x9501D0
- stack 0: 0xFFFF
1052	 9E	AND		 	 
- stack 1: 0x4D4
- stack 0: 0x1D0
1053	 9F	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0x1D0
- stack 0: 0x1
1054	 A1	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0x1D0
1055	 A2	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0x1D0
- stack 0: 0x20
1056	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D4
- stack 1: 0x1D0
- stack 0: 0x4D0
1057	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4D4
- stack 0: 0x6A0
1058	 A7	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0x6A0
- stack 0: 0x20
1059	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D4
1060	 AB	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1061	 AD	ADD		 	 
- stack 0: 0x4D8
1062	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1063	 AF	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x95FFE000B4002000E600FF0100000A011A017400860000009501B40095FFFA
1064	 B0	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x95FFE000B4002000E600FF0100000A011A017400860000009501B40095FFFA
- stack 0: 0xF0
1065	 B2	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x95
1066	 B3	JUMP		 	 
- stack 0: 0x4D8
1067	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x4D8
1068	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
1069	 97	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x95FFE000B4002000E600FF0100000A011A017400860000009501B40095FFFA
1070	 98	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0x95FFE000B4002000E600FF0100000A011A017400860000009501B40095FFFA
- stack 0: 0xE0
1071	 9A	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x95FFE0
1072	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x95FFE0
- stack 0: 0xFFFF
1073	 9E	AND		 	 
- stack 1: 0x4D8
- stack 0: 0xFFE0
1074	 9F	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0xFFE0
- stack 0: 0x1
1075	 A1	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1076	 A2	PUSH2	0020	 	 
- stack 2: 0x4D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x20
1077	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x6A0
1078	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4D8
- stack 0: 0x680
1079	 A7	PUSH2	0020	 	 
- stack 2: 0x4D8
- stack 1: 0x680
- stack 0: 0x20
1080	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D8
1081	 AB	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1082	 AD	ADD		 	 
- stack 0: 0x4DC
1083	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1084	 AF	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xB4002000E600FF0100000A011A017400860000009501B40095FFFA00B40007
1085	 B0	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0xB4002000E600FF0100000A011A017400860000009501B40095FFFA00B40007
- stack 0: 0xF0
1086	 B2	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xB4
1087	 B3	JUMP		 	 
- stack 0: 0x4DC
1088	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x4DC
1089	 B5	PUSH2	0020	 	 
- stack 1: 0x4DC
- stack 0: 0x20
1090	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4DC
- stack 0: 0x680
1091	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x680
- stack 0: 0xFFFFFFFF
1092	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4DC
- stack 0: 0x680
1093	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4DC
- stack 1: 0x680
- stack 0: 0x4DC
1094	 C0	MLOAD		 	 
- stack 2: 0x4DC
- stack 1: 0x680
- stack 0: 0xB4002000E600FF0100000A011A017400860000009501B40095FFFA00B40007
1095	 C1	PUSH1	E0	 	 
- stack 3: 0x4DC
- stack 2: 0x680
- stack 1: 0xB4002000E600FF0100000A011A017400860000009501B40095FFFA00B40007
- stack 0: 0xE0
1096	 C3	SHR		 	 
- stack 2: 0x4DC
- stack 1: 0x680
- stack 0: 0xB40020
1097	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4DC
- stack 2: 0x680
- stack 1: 0xB40020
- stack 0: 0xFFFF
1098	 C7	AND		 	 
- stack 2: 0x4DC
- stack 1: 0x680
- stack 0: 0x20
1099	 C8	PUSH1	01	 	 
- stack 3: 0x4DC
- stack 2: 0x680
- stack 1: 0x20
- stack 0: 0x1
1100	 CA	SIGNEXTEND		 	 
- stack 2: 0x4DC
- stack 1: 0x680
- stack 0: 0x20
1101	 CB	ADD		 	 
- stack 1: 0x4DC
- stack 0: 0x6A0
1102	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
1103	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4DC
- stack 0: 0x6A0
1104	 D2	PUSH1	03	 	 
- stack 2: 0x4DC
- stack 1: 0x6A0
- stack 0: 0x3
1105	 D4	XOR		 	 
- stack 1: 0x4DC
- stack 0: 0x6A3
1106	 D5	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xFF00000000000000000000000000000000000000000000000000000000000000
1107	 D6	PUSH1	F8	 	 
- stack 2: 0x4DC
- stack 1: 0xFF00000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
1108	 D8	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xFF
1109	 D9	PUSH2	0060	 	 
- stack 2: 0x4DC
- stack 1: 0xFF
- stack 0: 0x60
1110	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x4DC
1111	 DD	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1112	 DF	ADD		 	 
- stack 0: 0x4E0
1113	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1114	 E1	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xE600FF0100000A011A017400860000009501B40095FFFA00B4000700E60000
1115	 E2	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0xE600FF0100000A011A017400860000009501B40095FFFA00B4000700E60000
- stack 0: 0xF0
1116	 E4	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xE6
1117	 E5	JUMP		 	 
- stack 0: 0x4E0
1118	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x4E0
1119	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1120	 E8	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xE600FF0100000A011A017400860000009501B40095FFFA00B4000700E60000
1121	 E9	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0xE600FF0100000A011A017400860000009501B40095FFFA00B4000700E60000
- stack 0: 0xE0
1122	 EB	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xE600FF
1123	 EC	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0xE600FF
- stack 0: 0xFFFF
1124	 EF	AND		 	 
- stack 1: 0x4E0
- stack 0: 0xFF
1125	 F0	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0xFF
- stack 0: 0x1
1126	 F2	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0xFF
1127	 F3	PUSH2	03A0	 	 
- stack 2: 0x4E0
- stack 1: 0xFF
- stack 0: 0x3A0
1128	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x4E0
1129	 F7	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1130	 F9	ADD		 	 
- stack 0: 0x4E4
1131	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1132	 FB	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x100000A011A017400860000009501B40095FFFA00B4000700E600000100000B
1133	 FC	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x100000A011A017400860000009501B40095FFFA00B4000700E600000100000B
- stack 0: 0xF0
1134	 FE	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x100
1135	 FF	JUMP		 	 
- stack 0: 0x4E4
1136	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E4
1137	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1138	 102	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x100000A011A017400860000009501B40095FFFA00B4000700E600000100000B
1139	 103	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0x100000A011A017400860000009501B40095FFFA00B4000700E600000100000B
- stack 0: 0xE0
1140	 105	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x100000A
1141	 106	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x100000A
- stack 0: 0xFFFF
1142	 109	AND		 	 
- stack 1: 0x4E4
- stack 0: 0xA
1143	 10A	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0xA
- stack 0: 0x1
1144	 10C	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0xA
1145	 10D	PUSH2	0380	 	 
- stack 2: 0x4E4
- stack 1: 0xA
- stack 0: 0x380
1146	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E4
1147	 111	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1148	 113	ADD		 	 
- stack 0: 0x4E8
1149	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1150	 115	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x11A017400860000009501B40095FFFA00B4000700E600000100000B011A0158
1151	 116	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x11A017400860000009501B40095FFFA00B4000700E600000100000B011A0158
- stack 0: 0xF0
1152	 118	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x11A
1153	 119	JUMP		 	 
- stack 0: 0x4E8
1154	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x4E8
1155	 11B	PUSH2	0060	 	 
- stack 1: 0x4E8
- stack 0: 0x60
1156	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x4E8
- stack 0: 0xFF
1157	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E8
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
1158	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E8
- stack 0: 0xFF
1159	 125	PUSH2	03A0	 	 
- stack 2: 0x4E8
- stack 1: 0xFF
- stack 0: 0x3A0
1160	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E8
- stack 1: 0xFF
- stack 0: 0xFF
1161	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E8
- stack 2: 0xFF
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
1162	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E8
- stack 1: 0xFF
- stack 0: 0xFF
1163	 12F	SUB		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1164	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x138
1165	 133	JUMPI		 	 
- stack 0: 0x4E8
1166	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x4E8
- stack 0: 0x152
1167	 137	JUMP		 	 
- stack 0: 0x4E8
1168	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x4E8
1169	 153	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1170	 155	ADD		 	 
- stack 0: 0x4EC
1171	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1172	 157	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x860000009501B40095FFFA00B4000700E600000100000B011A01580100000C
1173	 158	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x860000009501B40095FFFA00B4000700E600000100000B011A01580100000C
- stack 0: 0xF0
1174	 15A	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x86
1175	 15B	JUMP		 	 
- stack 0: 0x4EC
1176	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4EC
1177	 87	DUP1		 	 
- stack 1: 0x4EC
- stack 0: 0x4EC
1178	 88	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0x4EC
- stack 0: 0x20
1179	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4EC
1180	 8C	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1181	 8E	ADD		 	 
- stack 0: 0x4F0
1182	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1183	 90	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x9501B40095FFFA00B4000700E600000100000B011A01580100000C015C0000
1184	 91	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x9501B40095FFFA00B4000700E600000100000B011A01580100000C015C0000
- stack 0: 0xF0
1185	 93	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x95
1186	 94	JUMP		 	 
- stack 0: 0x4F0
1187	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x4F0
1188	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F0
- stack 0: 0x4F0
1189	 97	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x9501B40095FFFA00B4000700E600000100000B011A01580100000C015C0000
1190	 98	PUSH1	E0	 	 
- stack 2: 0x4F0
- stack 1: 0x9501B40095FFFA00B4000700E600000100000B011A01580100000C015C0000
- stack 0: 0xE0
1191	 9A	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x9501B4
1192	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4F0
- stack 1: 0x9501B4
- stack 0: 0xFFFF
1193	 9E	AND		 	 
- stack 1: 0x4F0
- stack 0: 0x1B4
1194	 9F	PUSH1	01	 	 
- stack 2: 0x4F0
- stack 1: 0x1B4
- stack 0: 0x1
1195	 A1	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0x1B4
1196	 A2	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0x1B4
- stack 0: 0x20
1197	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F0
- stack 1: 0x1B4
- stack 0: 0x4EC
1198	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F0
- stack 0: 0x6A0
1199	 A7	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0x6A0
- stack 0: 0x20
1200	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F0
1201	 AB	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1202	 AD	ADD		 	 
- stack 0: 0x4F4
1203	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1204	 AF	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x95FFFA00B4000700E600000100000B011A01580100000C015C000000860000
1205	 B0	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x95FFFA00B4000700E600000100000B011A01580100000C015C000000860000
- stack 0: 0xF0
1206	 B2	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x95
1207	 B3	JUMP		 	 
- stack 0: 0x4F4
1208	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x4F4
1209	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1210	 97	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x95FFFA00B4000700E600000100000B011A01580100000C015C000000860000
1211	 98	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x95FFFA00B4000700E600000100000B011A01580100000C015C000000860000
- stack 0: 0xE0
1212	 9A	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x95FFFA
1213	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x95FFFA
- stack 0: 0xFFFF
1214	 9E	AND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFA
1215	 9F	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFA
- stack 0: 0x1
1216	 A1	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA
1217	 A2	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA
- stack 0: 0x20
1218	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA
- stack 0: 0x6A0
1219	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F4
- stack 0: 0x69A
1220	 A7	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0x69A
- stack 0: 0x20
1221	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F4
1222	 AB	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1223	 AD	ADD		 	 
- stack 0: 0x4F8
1224	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1225	 AF	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xB4000700E600000100000B011A01580100000C015C00000086000000950191
1226	 B0	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0xB4000700E600000100000B011A01580100000C015C00000086000000950191
- stack 0: 0xF0
1227	 B2	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xB4
1228	 B3	JUMP		 	 
- stack 0: 0x4F8
1229	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x4F8
1230	 B5	PUSH2	0020	 	 
- stack 1: 0x4F8
- stack 0: 0x20
1231	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4F8
- stack 0: 0x69A
1232	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x69A
- stack 0: 0xFFFFFFFF
1233	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F8
- stack 0: 0x69A
1234	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4F8
- stack 1: 0x69A
- stack 0: 0x4F8
1235	 C0	MLOAD		 	 
- stack 2: 0x4F8
- stack 1: 0x69A
- stack 0: 0xB4000700E600000100000B011A01580100000C015C00000086000000950191
1236	 C1	PUSH1	E0	 	 
- stack 3: 0x4F8
- stack 2: 0x69A
- stack 1: 0xB4000700E600000100000B011A01580100000C015C00000086000000950191
- stack 0: 0xE0
1237	 C3	SHR		 	 
- stack 2: 0x4F8
- stack 1: 0x69A
- stack 0: 0xB40007
1238	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4F8
- stack 2: 0x69A
- stack 1: 0xB40007
- stack 0: 0xFFFF
1239	 C7	AND		 	 
- stack 2: 0x4F8
- stack 1: 0x69A
- stack 0: 0x7
1240	 C8	PUSH1	01	 	 
- stack 3: 0x4F8
- stack 2: 0x69A
- stack 1: 0x7
- stack 0: 0x1
1241	 CA	SIGNEXTEND		 	 
- stack 2: 0x4F8
- stack 1: 0x69A
- stack 0: 0x7
1242	 CB	ADD		 	 
- stack 1: 0x4F8
- stack 0: 0x6A1
1243	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
1244	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F8
- stack 0: 0x6A1
1245	 D2	PUSH1	03	 	 
- stack 2: 0x4F8
- stack 1: 0x6A1
- stack 0: 0x3
1246	 D4	XOR		 	 
- stack 1: 0x4F8
- stack 0: 0x6A2
1247	 D5	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xFF000000000000000000000000000000000000000000000000000000000000
1248	 D6	PUSH1	F8	 	 
- stack 2: 0x4F8
- stack 1: 0xFF000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
1249	 D8	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x0
1250	 D9	PUSH2	0060	 	 
- stack 2: 0x4F8
- stack 1: 0x0
- stack 0: 0x60
1251	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x4F8
1252	 DD	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1253	 DF	ADD		 	 
- stack 0: 0x4FC
1254	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1255	 E1	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0xE600000100000B011A01580100000C015C0000008600000095019100B40001
1256	 E2	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0xE600000100000B011A01580100000C015C0000008600000095019100B40001
- stack 0: 0xF0
1257	 E4	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0xE6
1258	 E5	JUMP		 	 
- stack 0: 0x4FC
1259	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x4FC
1260	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1261	 E8	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0xE600000100000B011A01580100000C015C0000008600000095019100B40001
1262	 E9	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0xE600000100000B011A01580100000C015C0000008600000095019100B40001
- stack 0: 0xE0
1263	 EB	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0xE60000
1264	 EC	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0xE60000
- stack 0: 0xFFFF
1265	 EF	AND		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1266	 F0	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x1
1267	 F2	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1268	 F3	PUSH2	03A0	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x3A0
1269	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x4FC
1270	 F7	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1271	 F9	ADD		 	 
- stack 0: 0x500
1272	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1273	 FB	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x100000B011A01580100000C015C0000008600000095019100B4000101760000
1274	 FC	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x100000B011A01580100000C015C0000008600000095019100B4000101760000
- stack 0: 0xF0
1275	 FE	SHR		 	 
- stack 1: 0x500
- stack 0: 0x100
1276	 FF	JUMP		 	 
- stack 0: 0x500
1277	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x500
1278	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1279	 102	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x100000B011A01580100000C015C0000008600000095019100B4000101760000
1280	 103	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x100000B011A01580100000C015C0000008600000095019100B4000101760000
- stack 0: 0xE0
1281	 105	SHR		 	 
- stack 1: 0x500
- stack 0: 0x100000B
1282	 106	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x100000B
- stack 0: 0xFFFF
1283	 109	AND		 	 
- stack 1: 0x500
- stack 0: 0xB
1284	 10A	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0xB
- stack 0: 0x1
1285	 10C	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0xB
1286	 10D	PUSH2	0380	 	 
- stack 2: 0x500
- stack 1: 0xB
- stack 0: 0x380
1287	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x500
1288	 111	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1289	 113	ADD		 	 
- stack 0: 0x504
1290	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1291	 115	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x11A01580100000C015C0000008600000095019100B400010176000000E600F0
1292	 116	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x11A01580100000C015C0000008600000095019100B400010176000000E600F0
- stack 0: 0xF0
1293	 118	SHR		 	 
- stack 1: 0x504
- stack 0: 0x11A
1294	 119	JUMP		 	 
- stack 0: 0x504
1295	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x504
1296	 11B	PUSH2	0060	 	 
- stack 1: 0x504
- stack 0: 0x60
1297	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x504
- stack 0: 0x0
1298	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1299	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x504
- stack 0: 0x0
1300	 125	PUSH2	03A0	 	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x3A0
1301	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x0
1302	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x504
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1303	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x0
1304	 12F	SUB		 	 
- stack 1: 0x504
- stack 0: 0x0
1305	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x138
1306	 133	JUMPI		 	 
- stack 0: 0x504
1307	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x504
- stack 0: 0x152
1308	 137	JUMP		 	 
- stack 0: 0x504
1309	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x504
1310	 153	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1311	 155	ADD		 	 
- stack 0: 0x508
1312	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1313	 157	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x100000C015C0000008600000095019100B400010176000000E600F001950138
1314	 158	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x100000C015C0000008600000095019100B400010176000000E600F001950138
- stack 0: 0xF0
1315	 15A	SHR		 	 
- stack 1: 0x508
- stack 0: 0x100
1316	 15B	JUMP		 	 
- stack 0: 0x508
1317	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x508
1318	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1319	 102	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x100000C015C0000008600000095019100B400010176000000E600F001950138
1320	 103	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x100000C015C0000008600000095019100B400010176000000E600F001950138
- stack 0: 0xE0
1321	 105	SHR		 	 
- stack 1: 0x508
- stack 0: 0x100000C
1322	 106	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x100000C
- stack 0: 0xFFFF
1323	 109	AND		 	 
- stack 1: 0x508
- stack 0: 0xC
1324	 10A	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xC
- stack 0: 0x1
1325	 10C	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xC
1326	 10D	PUSH2	0380	 	 
- stack 2: 0x508
- stack 1: 0xC
- stack 0: 0x380
1327	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x508
1328	 111	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1329	 113	ADD		 	 
- stack 0: 0x50C
1330	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1331	 115	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x15C0000008600000095019100B400010176000000E600F00195013801D70001
1332	 116	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x15C0000008600000095019100B400010176000000E600F00195013801D70001
- stack 0: 0xF0
1333	 118	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x15C
1334	 119	JUMP		 	 
- stack 0: 0x50C
1335	 15C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x50C
1336	 15D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1337	 15E	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x15C0000008600000095019100B400010176000000E600F00195013801D70001
1338	 15F	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0x15C0000008600000095019100B400010176000000E600F00195013801D70001
- stack 0: 0xE0
1339	 161	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x15C0000
1340	 162	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0x15C0000
- stack 0: 0xFFFF
1341	 165	AND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1342	 166	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x1
1343	 168	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1344	 169	PUSH2	0080	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x80
1345	 16C	MSTORE		 	  ;; # store to x4
- stack 0: 0x50C
1346	 16D	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1347	 16F	ADD		 	 
- stack 0: 0x510
1348	 170	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1349	 171	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x8600000095019100B400010176000000E600F00195013801D7000101F60002
1350	 172	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x8600000095019100B400010176000000E600F00195013801D7000101F60002
- stack 0: 0xF0
1351	 174	SHR		 	 
- stack 1: 0x510
- stack 0: 0x86
1352	 175	JUMP		 	 
- stack 0: 0x510
1353	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x510
1354	 87	DUP1		 	 
- stack 1: 0x510
- stack 0: 0x510
1355	 88	PUSH2	0020	 	 
- stack 2: 0x510
- stack 1: 0x510
- stack 0: 0x20
1356	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x510
1357	 8C	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1358	 8E	ADD		 	 
- stack 0: 0x514
1359	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1360	 90	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x95019100B400010176000000E600F00195013801D7000101F600020210FFE0
1361	 91	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x95019100B400010176000000E600F00195013801D7000101F600020210FFE0
- stack 0: 0xF0
1362	 93	SHR		 	 
- stack 1: 0x514
- stack 0: 0x95
1363	 94	JUMP		 	 
- stack 0: 0x514
1364	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x514
1365	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1366	 97	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x95019100B400010176000000E600F00195013801D7000101F600020210FFE0
1367	 98	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x95019100B400010176000000E600F00195013801D7000101F600020210FFE0
- stack 0: 0xE0
1368	 9A	SHR		 	 
- stack 1: 0x514
- stack 0: 0x950191
1369	 9B	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x950191
- stack 0: 0xFFFF
1370	 9E	AND		 	 
- stack 1: 0x514
- stack 0: 0x191
1371	 9F	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x191
- stack 0: 0x1
1372	 A1	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x191
1373	 A2	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0x191
- stack 0: 0x20
1374	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x514
- stack 1: 0x191
- stack 0: 0x510
1375	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x514
- stack 0: 0x6A1
1376	 A7	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0x6A1
- stack 0: 0x20
1377	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x514
1378	 AB	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1379	 AD	ADD		 	 
- stack 0: 0x518
1380	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1381	 AF	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xB400010176000000E600F00195013801D7000101F600020210FFE00100000D
1382	 B0	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0xB400010176000000E600F00195013801D7000101F600020210FFE00100000D
- stack 0: 0xF0
1383	 B2	SHR		 	 
- stack 1: 0x518
- stack 0: 0xB4
1384	 B3	JUMP		 	 
- stack 0: 0x518
1385	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x518
1386	 B5	PUSH2	0020	 	 
- stack 1: 0x518
- stack 0: 0x20
1387	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x518
- stack 0: 0x6A1
1388	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
1389	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x6A1
1390	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0x518
1391	 C0	MLOAD		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0xB400010176000000E600F00195013801D7000101F600020210FFE00100000D
1392	 C1	PUSH1	E0	 	 
- stack 3: 0x518
- stack 2: 0x6A1
- stack 1: 0xB400010176000000E600F00195013801D7000101F600020210FFE00100000D
- stack 0: 0xE0
1393	 C3	SHR		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0xB40001
1394	 C4	PUSH2	FFFF	 	 
- stack 3: 0x518
- stack 2: 0x6A1
- stack 1: 0xB40001
- stack 0: 0xFFFF
1395	 C7	AND		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0x1
1396	 C8	PUSH1	01	 	 
- stack 3: 0x518
- stack 2: 0x6A1
- stack 1: 0x1
- stack 0: 0x1
1397	 CA	SIGNEXTEND		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0x1
1398	 CB	ADD		 	 
- stack 1: 0x518
- stack 0: 0x6A2
1399	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
1400	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x6A2
1401	 D2	PUSH1	03	 	 
- stack 2: 0x518
- stack 1: 0x6A2
- stack 0: 0x3
1402	 D4	XOR		 	 
- stack 1: 0x518
- stack 0: 0x6A1
1403	 D5	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xF000FF0000000000000000000000000000000000000000000000000000000000
1404	 D6	PUSH1	F8	 	 
- stack 2: 0x518
- stack 1: 0xF000FF0000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
1405	 D8	SHR		 	 
- stack 1: 0x518
- stack 0: 0xF0
1406	 D9	PUSH2	0060	 	 
- stack 2: 0x518
- stack 1: 0xF0
- stack 0: 0x60
1407	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x518
1408	 DD	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1409	 DF	ADD		 	 
- stack 0: 0x51C
1410	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1411	 E1	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x176000000E600F00195013801D7000101F600020210FFE00100000D015C0000
1412	 E2	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x176000000E600F00195013801D7000101F600020210FFE00100000D015C0000
- stack 0: 0xF0
1413	 E4	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x176
1414	 E5	JUMP		 	 
- stack 0: 0x51C
1415	 176	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x51C
1416	 177	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1417	 178	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x176000000E600F00195013801D7000101F600020210FFE00100000D015C0000
1418	 179	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x176000000E600F00195013801D7000101F600020210FFE00100000D015C0000
- stack 0: 0xE0
1419	 17B	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x1760000
1420	 17C	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x1760000
- stack 0: 0xFFFF
1421	 17F	AND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1422	 180	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x1
1423	 182	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1424	 183	PUSH2	0060	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x60
1425	 186	MLOAD		 	  ;; # read from x3
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0xF0
1426	 187	ADD		 	  ;; # ADDI 3
- stack 1: 0x51C
- stack 0: 0xF0
1427	 188	PUSH2	00C0	 	 
- stack 2: 0x51C
- stack 1: 0xF0
- stack 0: 0xC0
1428	 18B	MSTORE		 	  ;; # store to x6
- stack 0: 0x51C
1429	 18C	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1430	 18E	ADD		 	 
- stack 0: 0x520
1431	 18F	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1432	 190	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xE600F00195013801D7000101F600020210FFE00100000D015C000000860000
1433	 191	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0xE600F00195013801D7000101F600020210FFE00100000D015C000000860000
- stack 0: 0xF0
1434	 193	SHR		 	 
- stack 1: 0x520
- stack 0: 0xE6
1435	 194	JUMP		 	 
- stack 0: 0x520
1436	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x520
1437	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1438	 E8	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xE600F00195013801D7000101F600020210FFE00100000D015C000000860000
1439	 E9	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0xE600F00195013801D7000101F600020210FFE00100000D015C000000860000
- stack 0: 0xE0
1440	 EB	SHR		 	 
- stack 1: 0x520
- stack 0: 0xE600F0
1441	 EC	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0xE600F0
- stack 0: 0xFFFF
1442	 EF	AND		 	 
- stack 1: 0x520
- stack 0: 0xF0
1443	 F0	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0xF0
- stack 0: 0x1
1444	 F2	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0xF0
1445	 F3	PUSH2	03A0	 	 
- stack 2: 0x520
- stack 1: 0xF0
- stack 0: 0x3A0
1446	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x520
1447	 F7	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1448	 F9	ADD		 	 
- stack 0: 0x524
1449	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1450	 FB	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x195013801D7000101F600020210FFE00100000D015C00000086000000950166
1451	 FC	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x195013801D7000101F600020210FFE00100000D015C00000086000000950166
- stack 0: 0xF0
1452	 FE	SHR		 	 
- stack 1: 0x524
- stack 0: 0x195
1453	 FF	JUMP		 	 
- stack 0: 0x524
1454	 195	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,138(ignore imm)
- stack 0: 0x524
1455	 196	PUSH2	00C0	 	 
- stack 1: 0x524
- stack 0: 0xC0
1456	 199	MLOAD		 	  ;; # read from x6
- stack 1: 0x524
- stack 0: 0xF0
1457	 19A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x524
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
1458	 19F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x524
- stack 0: 0xF0
1459	 1A0	PUSH2	03A0	 	 
- stack 2: 0x524
- stack 1: 0xF0
- stack 0: 0x3A0
1460	 1A3	MLOAD		 	  ;; # read from x29
- stack 2: 0x524
- stack 1: 0xF0
- stack 0: 0xF0
1461	 1A4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x524
- stack 2: 0xF0
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
1462	 1A9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x524
- stack 1: 0xF0
- stack 0: 0xF0
1463	 1AA	SUB		 	 
- stack 1: 0x524
- stack 0: 0x0
1464	 1AB	PUSH2	01B3	 ;; _neq_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x1B3
1465	 1AE	JUMPI		 	 
- stack 0: 0x524
1466	 1AF	PUSH2	01CD	 ;; _neq_after_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 1: 0x524
- stack 0: 0x1CD
1467	 1B2	JUMP		 	 
- stack 0: 0x524
1468	 1CD	JUMPDEST		 ;; _neq_after_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 0: 0x524
1469	 1CE	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1470	 1D0	ADD		 	 
- stack 0: 0x528
1471	 1D1	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1472	 1D2	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1D7000101F600020210FFE00100000D015C0000008600000095016600B40001
1473	 1D3	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x1D7000101F600020210FFE00100000D015C0000008600000095016600B40001
- stack 0: 0xF0
1474	 1D5	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1D7
1475	 1D6	JUMP		 	 
- stack 0: 0x528
1476	 1D7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x528
1477	 1D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1478	 1D9	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1D7000101F600020210FFE00100000D015C0000008600000095016600B40001
1479	 1DA	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x1D7000101F600020210FFE00100000D015C0000008600000095016600B40001
- stack 0: 0xE0
1480	 1DC	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1D70001
1481	 1DD	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x1D70001
- stack 0: 0xFFFF
1482	 1E0	AND		 	 
- stack 1: 0x528
- stack 0: 0x1
1483	 1E1	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x1
1484	 1E3	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0x1
1485	 1E4	PUSH2	0080	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x80
1486	 1E7	MLOAD		 	  ;; # read from x4
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x0
1487	 1E8	ADD		 	  ;; # ADDI 4
- stack 1: 0x528
- stack 0: 0x1
1488	 1E9	PUSH2	0080	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x80
1489	 1EC	MSTORE		 	  ;; # store to x4
- stack 0: 0x528
1490	 1ED	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1491	 1EF	ADD		 	 
- stack 0: 0x52C
1492	 1F0	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1493	 1F1	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x1F600020210FFE00100000D015C0000008600000095016600B4000102520000
1494	 1F2	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x1F600020210FFE00100000D015C0000008600000095016600B4000102520000
- stack 0: 0xF0
1495	 1F4	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1F6
1496	 1F5	JUMP		 	 
- stack 0: 0x52C
1497	 1F6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x52C
1498	 1F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1499	 1F8	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x1F600020210FFE00100000D015C0000008600000095016600B4000102520000
1500	 1F9	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0x1F600020210FFE00100000D015C0000008600000095016600B4000102520000
- stack 0: 0xE0
1501	 1FB	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1F60002
1502	 1FC	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0x1F60002
- stack 0: 0xFFFF
1503	 1FF	AND		 	 
- stack 1: 0x52C
- stack 0: 0x2
1504	 200	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x2
- stack 0: 0x1
1505	 202	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x2
1506	 203	PUSH2	00A0	 	 
- stack 2: 0x52C
- stack 1: 0x2
- stack 0: 0xA0
1507	 206	MSTORE		 	  ;; # store to x5
- stack 0: 0x52C
1508	 207	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1509	 209	ADD		 	 
- stack 0: 0x530
1510	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1511	 20B	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x210FFE00100000D015C0000008600000095016600B400010252000001760000
1512	 20C	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x210FFE00100000D015C0000008600000095016600B400010252000001760000
- stack 0: 0xF0
1513	 20E	SHR		 	 
- stack 1: 0x530
- stack 0: 0x210
1514	 20F	JUMP		 	 
- stack 0: 0x530
1515	 210	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x530
1516	 211	PUSH2	0080	 	 
- stack 1: 0x530
- stack 0: 0x80
1517	 214	MLOAD		 	  ;; # read from x4
- stack 1: 0x530
- stack 0: 0x1
1518	 215	PUSH4	FFFFFFFF	 	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1519	 21A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x530
- stack 0: 0x1
1520	 21B	PUSH2	00A0	 	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0xA0
1521	 21E	MLOAD		 	  ;; # read from x5
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x2
1522	 21F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x530
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1523	 224	AND		 	  ;; # mask to 32 bits
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x2
1524	 225	SUB		 	 
- stack 1: 0x530
- stack 0: 0x1
1525	 226	PUSH2	022E	 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x22E
1526	 229	JUMPI		 	 
- stack 0: 0x530
1527	 22E	JUMPDEST		 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 0: 0x530
1528	 22F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1529	 230	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x210FFE00100000D015C0000008600000095016600B400010252000001760000
1530	 231	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x210FFE00100000D015C0000008600000095016600B400010252000001760000
- stack 0: 0xE0
1531	 233	SHR		 	 
- stack 1: 0x530
- stack 0: 0x210FFE0
1532	 234	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x210FFE0
- stack 0: 0xFFFF
1533	 237	AND		 	 
- stack 1: 0x530
- stack 0: 0xFFE0
1534	 238	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0xFFE0
- stack 0: 0x1
1535	 23A	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1536	 23B	ADD		 	 
- stack 0: 0x510
1537	 23C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x510
- stack 0: 0xFFFFFFFF
1538	 241	AND		 	  ;; # mask to 32 bits
- stack 0: 0x510
1539	 242	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1540	 243	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x8600000095019100B400010176000000E600F00195013801D7000101F60002
1541	 244	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x8600000095019100B400010176000000E600F00195013801D7000101F60002
- stack 0: 0xF0
1542	 246	SHR		 	 
- stack 1: 0x510
- stack 0: 0x86
1543	 247	JUMP		 	 
- stack 0: 0x510
1544	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x510
1545	 87	DUP1		 	 
- stack 1: 0x510
- stack 0: 0x510
1546	 88	PUSH2	0020	 	 
- stack 2: 0x510
- stack 1: 0x510
- stack 0: 0x20
1547	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x510
1548	 8C	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1549	 8E	ADD		 	 
- stack 0: 0x514
1550	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1551	 90	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x95019100B400010176000000E600F00195013801D7000101F600020210FFE0
1552	 91	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x95019100B400010176000000E600F00195013801D7000101F600020210FFE0
- stack 0: 0xF0
1553	 93	SHR		 	 
- stack 1: 0x514
- stack 0: 0x95
1554	 94	JUMP		 	 
- stack 0: 0x514
1555	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x514
1556	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1557	 97	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x95019100B400010176000000E600F00195013801D7000101F600020210FFE0
1558	 98	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x95019100B400010176000000E600F00195013801D7000101F600020210FFE0
- stack 0: 0xE0
1559	 9A	SHR		 	 
- stack 1: 0x514
- stack 0: 0x950191
1560	 9B	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x950191
- stack 0: 0xFFFF
1561	 9E	AND		 	 
- stack 1: 0x514
- stack 0: 0x191
1562	 9F	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x191
- stack 0: 0x1
1563	 A1	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x191
1564	 A2	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0x191
- stack 0: 0x20
1565	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x514
- stack 1: 0x191
- stack 0: 0x510
1566	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x514
- stack 0: 0x6A1
1567	 A7	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0x6A1
- stack 0: 0x20
1568	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x514
1569	 AB	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1570	 AD	ADD		 	 
- stack 0: 0x518
1571	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1572	 AF	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xB400010176000000E600F00195013801D7000101F600020210FFE00100000D
1573	 B0	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0xB400010176000000E600F00195013801D7000101F600020210FFE00100000D
- stack 0: 0xF0
1574	 B2	SHR		 	 
- stack 1: 0x518
- stack 0: 0xB4
1575	 B3	JUMP		 	 
- stack 0: 0x518
1576	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x518
1577	 B5	PUSH2	0020	 	 
- stack 1: 0x518
- stack 0: 0x20
1578	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x518
- stack 0: 0x6A1
1579	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
1580	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x6A1
1581	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0x518
1582	 C0	MLOAD		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0xB400010176000000E600F00195013801D7000101F600020210FFE00100000D
1583	 C1	PUSH1	E0	 	 
- stack 3: 0x518
- stack 2: 0x6A1
- stack 1: 0xB400010176000000E600F00195013801D7000101F600020210FFE00100000D
- stack 0: 0xE0
1584	 C3	SHR		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0xB40001
1585	 C4	PUSH2	FFFF	 	 
- stack 3: 0x518
- stack 2: 0x6A1
- stack 1: 0xB40001
- stack 0: 0xFFFF
1586	 C7	AND		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0x1
1587	 C8	PUSH1	01	 	 
- stack 3: 0x518
- stack 2: 0x6A1
- stack 1: 0x1
- stack 0: 0x1
1588	 CA	SIGNEXTEND		 	 
- stack 2: 0x518
- stack 1: 0x6A1
- stack 0: 0x1
1589	 CB	ADD		 	 
- stack 1: 0x518
- stack 0: 0x6A2
1590	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
1591	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x6A2
1592	 D2	PUSH1	03	 	 
- stack 2: 0x518
- stack 1: 0x6A2
- stack 0: 0x3
1593	 D4	XOR		 	 
- stack 1: 0x518
- stack 0: 0x6A1
1594	 D5	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xF000FF0000000000000000000000000000000000000000000000000000000000
1595	 D6	PUSH1	F8	 	 
- stack 2: 0x518
- stack 1: 0xF000FF0000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
1596	 D8	SHR		 	 
- stack 1: 0x518
- stack 0: 0xF0
1597	 D9	PUSH2	0060	 	 
- stack 2: 0x518
- stack 1: 0xF0
- stack 0: 0x60
1598	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x518
1599	 DD	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1600	 DF	ADD		 	 
- stack 0: 0x51C
1601	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1602	 E1	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x176000000E600F00195013801D7000101F600020210FFE00100000D015C0000
1603	 E2	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x176000000E600F00195013801D7000101F600020210FFE00100000D015C0000
- stack 0: 0xF0
1604	 E4	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x176
1605	 E5	JUMP		 	 
- stack 0: 0x51C
1606	 176	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x51C
1607	 177	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1608	 178	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x176000000E600F00195013801D7000101F600020210FFE00100000D015C0000
1609	 179	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x176000000E600F00195013801D7000101F600020210FFE00100000D015C0000
- stack 0: 0xE0
1610	 17B	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x1760000
1611	 17C	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x1760000
- stack 0: 0xFFFF
1612	 17F	AND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1613	 180	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x1
1614	 182	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1615	 183	PUSH2	0060	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x60
1616	 186	MLOAD		 	  ;; # read from x3
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0xF0
1617	 187	ADD		 	  ;; # ADDI 3
- stack 1: 0x51C
- stack 0: 0xF0
1618	 188	PUSH2	00C0	 	 
- stack 2: 0x51C
- stack 1: 0xF0
- stack 0: 0xC0
1619	 18B	MSTORE		 	  ;; # store to x6
- stack 0: 0x51C
1620	 18C	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1621	 18E	ADD		 	 
- stack 0: 0x520
1622	 18F	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1623	 190	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xE600F00195013801D7000101F600020210FFE00100000D015C000000860000
1624	 191	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0xE600F00195013801D7000101F600020210FFE00100000D015C000000860000
- stack 0: 0xF0
1625	 193	SHR		 	 
- stack 1: 0x520
- stack 0: 0xE6
1626	 194	JUMP		 	 
- stack 0: 0x520
1627	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x520
1628	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1629	 E8	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xE600F00195013801D7000101F600020210FFE00100000D015C000000860000
1630	 E9	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0xE600F00195013801D7000101F600020210FFE00100000D015C000000860000
- stack 0: 0xE0
1631	 EB	SHR		 	 
- stack 1: 0x520
- stack 0: 0xE600F0
1632	 EC	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0xE600F0
- stack 0: 0xFFFF
1633	 EF	AND		 	 
- stack 1: 0x520
- stack 0: 0xF0
1634	 F0	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0xF0
- stack 0: 0x1
1635	 F2	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0xF0
1636	 F3	PUSH2	03A0	 	 
- stack 2: 0x520
- stack 1: 0xF0
- stack 0: 0x3A0
1637	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x520
1638	 F7	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1639	 F9	ADD		 	 
- stack 0: 0x524
1640	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1641	 FB	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x195013801D7000101F600020210FFE00100000D015C00000086000000950166
1642	 FC	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x195013801D7000101F600020210FFE00100000D015C00000086000000950166
- stack 0: 0xF0
1643	 FE	SHR		 	 
- stack 1: 0x524
- stack 0: 0x195
1644	 FF	JUMP		 	 
- stack 0: 0x524
1645	 195	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,138(ignore imm)
- stack 0: 0x524
1646	 196	PUSH2	00C0	 	 
- stack 1: 0x524
- stack 0: 0xC0
1647	 199	MLOAD		 	  ;; # read from x6
- stack 1: 0x524
- stack 0: 0xF0
1648	 19A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x524
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
1649	 19F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x524
- stack 0: 0xF0
1650	 1A0	PUSH2	03A0	 	 
- stack 2: 0x524
- stack 1: 0xF0
- stack 0: 0x3A0
1651	 1A3	MLOAD		 	  ;; # read from x29
- stack 2: 0x524
- stack 1: 0xF0
- stack 0: 0xF0
1652	 1A4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x524
- stack 2: 0xF0
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
1653	 1A9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x524
- stack 1: 0xF0
- stack 0: 0xF0
1654	 1AA	SUB		 	 
- stack 1: 0x524
- stack 0: 0x0
1655	 1AB	PUSH2	01B3	 ;; _neq_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x1B3
1656	 1AE	JUMPI		 	 
- stack 0: 0x524
1657	 1AF	PUSH2	01CD	 ;; _neq_after_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 1: 0x524
- stack 0: 0x1CD
1658	 1B2	JUMP		 	 
- stack 0: 0x524
1659	 1CD	JUMPDEST		 ;; _neq_after_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 0: 0x524
1660	 1CE	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1661	 1D0	ADD		 	 
- stack 0: 0x528
1662	 1D1	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1663	 1D2	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1D7000101F600020210FFE00100000D015C0000008600000095016600B40001
1664	 1D3	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x1D7000101F600020210FFE00100000D015C0000008600000095016600B40001
- stack 0: 0xF0
1665	 1D5	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1D7
1666	 1D6	JUMP		 	 
- stack 0: 0x528
1667	 1D7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x528
1668	 1D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1669	 1D9	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1D7000101F600020210FFE00100000D015C0000008600000095016600B40001
1670	 1DA	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x1D7000101F600020210FFE00100000D015C0000008600000095016600B40001
- stack 0: 0xE0
1671	 1DC	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1D70001
1672	 1DD	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x1D70001
- stack 0: 0xFFFF
1673	 1E0	AND		 	 
- stack 1: 0x528
- stack 0: 0x1
1674	 1E1	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x1
1675	 1E3	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0x1
1676	 1E4	PUSH2	0080	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x80
1677	 1E7	MLOAD		 	  ;; # read from x4
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x1
1678	 1E8	ADD		 	  ;; # ADDI 4
- stack 1: 0x528
- stack 0: 0x2
1679	 1E9	PUSH2	0080	 	 
- stack 2: 0x528
- stack 1: 0x2
- stack 0: 0x80
1680	 1EC	MSTORE		 	  ;; # store to x4
- stack 0: 0x528
1681	 1ED	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1682	 1EF	ADD		 	 
- stack 0: 0x52C
1683	 1F0	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1684	 1F1	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x1F600020210FFE00100000D015C0000008600000095016600B4000102520000
1685	 1F2	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x1F600020210FFE00100000D015C0000008600000095016600B4000102520000
- stack 0: 0xF0
1686	 1F4	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1F6
1687	 1F5	JUMP		 	 
- stack 0: 0x52C
1688	 1F6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x52C
1689	 1F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1690	 1F8	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x1F600020210FFE00100000D015C0000008600000095016600B4000102520000
1691	 1F9	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0x1F600020210FFE00100000D015C0000008600000095016600B4000102520000
- stack 0: 0xE0
1692	 1FB	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1F60002
1693	 1FC	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0x1F60002
- stack 0: 0xFFFF
1694	 1FF	AND		 	 
- stack 1: 0x52C
- stack 0: 0x2
1695	 200	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x2
- stack 0: 0x1
1696	 202	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x2
1697	 203	PUSH2	00A0	 	 
- stack 2: 0x52C
- stack 1: 0x2
- stack 0: 0xA0
1698	 206	MSTORE		 	  ;; # store to x5
- stack 0: 0x52C
1699	 207	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1700	 209	ADD		 	 
- stack 0: 0x530
1701	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1702	 20B	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x210FFE00100000D015C0000008600000095016600B400010252000001760000
1703	 20C	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x210FFE00100000D015C0000008600000095016600B400010252000001760000
- stack 0: 0xF0
1704	 20E	SHR		 	 
- stack 1: 0x530
- stack 0: 0x210
1705	 20F	JUMP		 	 
- stack 0: 0x530
1706	 210	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x530
1707	 211	PUSH2	0080	 	 
- stack 1: 0x530
- stack 0: 0x80
1708	 214	MLOAD		 	  ;; # read from x4
- stack 1: 0x530
- stack 0: 0x2
1709	 215	PUSH4	FFFFFFFF	 	 
- stack 2: 0x530
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1710	 21A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x530
- stack 0: 0x2
1711	 21B	PUSH2	00A0	 	 
- stack 2: 0x530
- stack 1: 0x2
- stack 0: 0xA0
1712	 21E	MLOAD		 	  ;; # read from x5
- stack 2: 0x530
- stack 1: 0x2
- stack 0: 0x2
1713	 21F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x530
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1714	 224	AND		 	  ;; # mask to 32 bits
- stack 2: 0x530
- stack 1: 0x2
- stack 0: 0x2
1715	 225	SUB		 	 
- stack 1: 0x530
- stack 0: 0x0
1716	 226	PUSH2	022E	 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0x22E
1717	 229	JUMPI		 	 
- stack 0: 0x530
1718	 22A	PUSH2	0248	 ;; _neq_after_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 1: 0x530
- stack 0: 0x248
1719	 22D	JUMP		 	 
- stack 0: 0x530
1720	 248	JUMPDEST		 ;; _neq_after_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 0: 0x530
1721	 249	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1722	 24B	ADD		 	 
- stack 0: 0x534
1723	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1724	 24D	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x100000D015C0000008600000095016600B40001025200000176000000E6000F
1725	 24E	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x100000D015C0000008600000095016600B40001025200000176000000E6000F
- stack 0: 0xF0
1726	 250	SHR		 	 
- stack 1: 0x534
- stack 0: 0x100
1727	 251	JUMP		 	 
- stack 0: 0x534
1728	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x534
1729	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1730	 102	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x100000D015C0000008600000095016600B40001025200000176000000E6000F
1731	 103	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x100000D015C0000008600000095016600B40001025200000176000000E6000F
- stack 0: 0xE0
1732	 105	SHR		 	 
- stack 1: 0x534
- stack 0: 0x100000D
1733	 106	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x100000D
- stack 0: 0xFFFF
1734	 109	AND		 	 
- stack 1: 0x534
- stack 0: 0xD
1735	 10A	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0xD
- stack 0: 0x1
1736	 10C	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0xD
1737	 10D	PUSH2	0380	 	 
- stack 2: 0x534
- stack 1: 0xD
- stack 0: 0x380
1738	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x534
1739	 111	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1740	 113	ADD		 	 
- stack 0: 0x538
1741	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1742	 115	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x15C0000008600000095016600B40001025200000176000000E6000F01950108
1743	 116	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x15C0000008600000095016600B40001025200000176000000E6000F01950108
- stack 0: 0xF0
1744	 118	SHR		 	 
- stack 1: 0x538
- stack 0: 0x15C
1745	 119	JUMP		 	 
- stack 0: 0x538
1746	 15C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x538
1747	 15D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1748	 15E	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x15C0000008600000095016600B40001025200000176000000E6000F01950108
1749	 15F	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x15C0000008600000095016600B40001025200000176000000E6000F01950108
- stack 0: 0xE0
1750	 161	SHR		 	 
- stack 1: 0x538
- stack 0: 0x15C0000
1751	 162	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x15C0000
- stack 0: 0xFFFF
1752	 165	AND		 	 
- stack 1: 0x538
- stack 0: 0x0
1753	 166	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x1
1754	 168	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0x0
1755	 169	PUSH2	0080	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x80
1756	 16C	MSTORE		 	  ;; # store to x4
- stack 0: 0x538
1757	 16D	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1758	 16F	ADD		 	 
- stack 0: 0x53C
1759	 170	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1760	 171	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x8600000095016600B40001025200000176000000E6000F0195010801D70001
1761	 172	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x8600000095016600B40001025200000176000000E6000F0195010801D70001
- stack 0: 0xF0
1762	 174	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x86
1763	 175	JUMP		 	 
- stack 0: 0x53C
1764	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x53C
1765	 87	DUP1		 	 
- stack 1: 0x53C
- stack 0: 0x53C
1766	 88	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0x53C
- stack 0: 0x20
1767	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
1768	 8C	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1769	 8E	ADD		 	 
- stack 0: 0x540
1770	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1771	 90	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x95016600B40001025200000176000000E6000F0195010801D7000101F60002
1772	 91	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x95016600B40001025200000176000000E6000F0195010801D7000101F60002
- stack 0: 0xF0
1773	 93	SHR		 	 
- stack 1: 0x540
- stack 0: 0x95
1774	 94	JUMP		 	 
- stack 0: 0x540
1775	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x540
1776	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1777	 97	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x95016600B40001025200000176000000E6000F0195010801D7000101F60002
1778	 98	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x95016600B40001025200000176000000E6000F0195010801D7000101F60002
- stack 0: 0xE0
1779	 9A	SHR		 	 
- stack 1: 0x540
- stack 0: 0x950166
1780	 9B	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x950166
- stack 0: 0xFFFF
1781	 9E	AND		 	 
- stack 1: 0x540
- stack 0: 0x166
1782	 9F	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0x166
- stack 0: 0x1
1783	 A1	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0x166
1784	 A2	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0x166
- stack 0: 0x20
1785	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x540
- stack 1: 0x166
- stack 0: 0x53C
1786	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x540
- stack 0: 0x6A2
1787	 A7	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0x6A2
- stack 0: 0x20
1788	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
1789	 AB	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1790	 AD	ADD		 	 
- stack 0: 0x544
1791	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1792	 AF	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xB40001025200000176000000E6000F0195010801D7000101F600020210FFDC
1793	 B0	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0xB40001025200000176000000E6000F0195010801D7000101F600020210FFDC
- stack 0: 0xF0
1794	 B2	SHR		 	 
- stack 1: 0x544
- stack 0: 0xB4
1795	 B3	JUMP		 	 
- stack 0: 0x544
1796	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x544
1797	 B5	PUSH2	0020	 	 
- stack 1: 0x544
- stack 0: 0x20
1798	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x544
- stack 0: 0x6A2
1799	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
1800	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0x6A2
1801	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0x544
1802	 C0	MLOAD		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0xB40001025200000176000000E6000F0195010801D7000101F600020210FFDC
1803	 C1	PUSH1	E0	 	 
- stack 3: 0x544
- stack 2: 0x6A2
- stack 1: 0xB40001025200000176000000E6000F0195010801D7000101F600020210FFDC
- stack 0: 0xE0
1804	 C3	SHR		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0xB40001
1805	 C4	PUSH2	FFFF	 	 
- stack 3: 0x544
- stack 2: 0x6A2
- stack 1: 0xB40001
- stack 0: 0xFFFF
1806	 C7	AND		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0x1
1807	 C8	PUSH1	01	 	 
- stack 3: 0x544
- stack 2: 0x6A2
- stack 1: 0x1
- stack 0: 0x1
1808	 CA	SIGNEXTEND		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0x1
1809	 CB	ADD		 	 
- stack 1: 0x544
- stack 0: 0x6A3
1810	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
1811	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0x6A3
1812	 D2	PUSH1	03	 	 
- stack 2: 0x544
- stack 1: 0x6A3
- stack 0: 0x3
1813	 D4	XOR		 	 
- stack 1: 0x544
- stack 0: 0x6A0
1814	 D5	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xFF000FF00000000000000000000000000000000000000000000000000000000
1815	 D6	PUSH1	F8	 	 
- stack 2: 0x544
- stack 1: 0xFF000FF00000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
1816	 D8	SHR		 	 
- stack 1: 0x544
- stack 0: 0xF
1817	 D9	PUSH2	0060	 	 
- stack 2: 0x544
- stack 1: 0xF
- stack 0: 0x60
1818	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x544
1819	 DD	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1820	 DF	ADD		 	 
- stack 0: 0x548
1821	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1822	 E1	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x25200000176000000E6000F0195010801D7000101F600020210FFDC0100000E
1823	 E2	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x25200000176000000E6000F0195010801D7000101F600020210FFDC0100000E
- stack 0: 0xF0
1824	 E4	SHR		 	 
- stack 1: 0x548
- stack 0: 0x252
1825	 E5	JUMP		 	 
- stack 0: 0x548
1826	 252	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x548
1827	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1828	 254	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x25200000176000000E6000F0195010801D7000101F600020210FFDC0100000E
1829	 255	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x25200000176000000E6000F0195010801D7000101F600020210FFDC0100000E
- stack 0: 0xE0
1830	 257	SHR		 	 
- stack 1: 0x548
- stack 0: 0x2520000
1831	 258	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x2520000
- stack 0: 0xFFFF
1832	 25B	AND		 	 
- stack 1: 0x548
- stack 0: 0x0
1833	 25C	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x0
- stack 0: 0x1
1834	 25E	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x0
1835	 25F	POP		 	 
- stack 0: 0x548
1836	 260	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1837	 262	ADD		 	 
- stack 0: 0x54C
1838	 263	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1839	 264	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x176000000E6000F0195010801D7000101F600020210FFDC0100000E015C0000
1840	 265	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x176000000E6000F0195010801D7000101F600020210FFDC0100000E015C0000
- stack 0: 0xF0
1841	 267	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x176
1842	 268	JUMP		 	 
- stack 0: 0x54C
1843	 176	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x54C
1844	 177	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1845	 178	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x176000000E6000F0195010801D7000101F600020210FFDC0100000E015C0000
1846	 179	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x176000000E6000F0195010801D7000101F600020210FFDC0100000E015C0000
- stack 0: 0xE0
1847	 17B	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1760000
1848	 17C	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x1760000
- stack 0: 0xFFFF
1849	 17F	AND		 	 
- stack 1: 0x54C
- stack 0: 0x0
1850	 180	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x1
1851	 182	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x0
1852	 183	PUSH2	0060	 	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x60
1853	 186	MLOAD		 	  ;; # read from x3
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0xF
1854	 187	ADD		 	  ;; # ADDI 3
- stack 1: 0x54C
- stack 0: 0xF
1855	 188	PUSH2	00C0	 	 
- stack 2: 0x54C
- stack 1: 0xF
- stack 0: 0xC0
1856	 18B	MSTORE		 	  ;; # store to x6
- stack 0: 0x54C
1857	 18C	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1858	 18E	ADD		 	 
- stack 0: 0x550
1859	 18F	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1860	 190	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xE6000F0195010801D7000101F600020210FFDC0100000E015C000000860000
1861	 191	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0xE6000F0195010801D7000101F600020210FFDC0100000E015C000000860000
- stack 0: 0xF0
1862	 193	SHR		 	 
- stack 1: 0x550
- stack 0: 0xE6
1863	 194	JUMP		 	 
- stack 0: 0x550
1864	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x550
1865	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1866	 E8	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xE6000F0195010801D7000101F600020210FFDC0100000E015C000000860000
1867	 E9	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0xE6000F0195010801D7000101F600020210FFDC0100000E015C000000860000
- stack 0: 0xE0
1868	 EB	SHR		 	 
- stack 1: 0x550
- stack 0: 0xE6000F
1869	 EC	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0xE6000F
- stack 0: 0xFFFF
1870	 EF	AND		 	 
- stack 1: 0x550
- stack 0: 0xF
1871	 F0	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0xF
- stack 0: 0x1
1872	 F2	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xF
1873	 F3	PUSH2	03A0	 	 
- stack 2: 0x550
- stack 1: 0xF
- stack 0: 0x3A0
1874	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x550
1875	 F7	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1876	 F9	ADD		 	 
- stack 0: 0x554
1877	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1878	 FB	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x195010801D7000101F600020210FFDC0100000E015C00000086000000950134
1879	 FC	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x195010801D7000101F600020210FFDC0100000E015C00000086000000950134
- stack 0: 0xF0
1880	 FE	SHR		 	 
- stack 1: 0x554
- stack 0: 0x195
1881	 FF	JUMP		 	 
- stack 0: 0x554
1882	 195	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,138(ignore imm)
- stack 0: 0x554
1883	 196	PUSH2	00C0	 	 
- stack 1: 0x554
- stack 0: 0xC0
1884	 199	MLOAD		 	  ;; # read from x6
- stack 1: 0x554
- stack 0: 0xF
1885	 19A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
1886	 19F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x554
- stack 0: 0xF
1887	 1A0	PUSH2	03A0	 	 
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0x3A0
1888	 1A3	MLOAD		 	  ;; # read from x29
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0xF
1889	 1A4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x554
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
1890	 1A9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0xF
1891	 1AA	SUB		 	 
- stack 1: 0x554
- stack 0: 0x0
1892	 1AB	PUSH2	01B3	 ;; _neq_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1B3
1893	 1AE	JUMPI		 	 
- stack 0: 0x554
1894	 1AF	PUSH2	01CD	 ;; _neq_after_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 1: 0x554
- stack 0: 0x1CD
1895	 1B2	JUMP		 	 
- stack 0: 0x554
1896	 1CD	JUMPDEST		 ;; _neq_after_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 0: 0x554
1897	 1CE	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1898	 1D0	ADD		 	 
- stack 0: 0x558
1899	 1D1	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1900	 1D2	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1D7000101F600020210FFDC0100000E015C0000008600000095013400B40001
1901	 1D3	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x1D7000101F600020210FFDC0100000E015C0000008600000095013400B40001
- stack 0: 0xF0
1902	 1D5	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1D7
1903	 1D6	JUMP		 	 
- stack 0: 0x558
1904	 1D7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x558
1905	 1D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1906	 1D9	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1D7000101F600020210FFDC0100000E015C0000008600000095013400B40001
1907	 1DA	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x1D7000101F600020210FFDC0100000E015C0000008600000095013400B40001
- stack 0: 0xE0
1908	 1DC	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1D70001
1909	 1DD	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x1D70001
- stack 0: 0xFFFF
1910	 1E0	AND		 	 
- stack 1: 0x558
- stack 0: 0x1
1911	 1E1	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x1
1912	 1E3	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x1
1913	 1E4	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x80
1914	 1E7	MLOAD		 	  ;; # read from x4
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x0
1915	 1E8	ADD		 	  ;; # ADDI 4
- stack 1: 0x558
- stack 0: 0x1
1916	 1E9	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x80
1917	 1EC	MSTORE		 	  ;; # store to x4
- stack 0: 0x558
1918	 1ED	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1919	 1EF	ADD		 	 
- stack 0: 0x55C
1920	 1F0	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1921	 1F1	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1F600020210FFDC0100000E015C0000008600000095013400B4000102520000
1922	 1F2	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x1F600020210FFDC0100000E015C0000008600000095013400B4000102520000
- stack 0: 0xF0
1923	 1F4	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1F6
1924	 1F5	JUMP		 	 
- stack 0: 0x55C
1925	 1F6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x55C
1926	 1F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1927	 1F8	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1F600020210FFDC0100000E015C0000008600000095013400B4000102520000
1928	 1F9	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x1F600020210FFDC0100000E015C0000008600000095013400B4000102520000
- stack 0: 0xE0
1929	 1FB	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1F60002
1930	 1FC	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x1F60002
- stack 0: 0xFFFF
1931	 1FF	AND		 	 
- stack 1: 0x55C
- stack 0: 0x2
1932	 200	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0x1
1933	 202	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x2
1934	 203	PUSH2	00A0	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0xA0
1935	 206	MSTORE		 	  ;; # store to x5
- stack 0: 0x55C
1936	 207	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1937	 209	ADD		 	 
- stack 0: 0x560
1938	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1939	 20B	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x210FFDC0100000E015C0000008600000095013400B400010252000002520000
1940	 20C	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x210FFDC0100000E015C0000008600000095013400B400010252000002520000
- stack 0: 0xF0
1941	 20E	SHR		 	 
- stack 1: 0x560
- stack 0: 0x210
1942	 20F	JUMP		 	 
- stack 0: 0x560
1943	 210	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x560
1944	 211	PUSH2	0080	 	 
- stack 1: 0x560
- stack 0: 0x80
1945	 214	MLOAD		 	  ;; # read from x4
- stack 1: 0x560
- stack 0: 0x1
1946	 215	PUSH4	FFFFFFFF	 	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1947	 21A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x560
- stack 0: 0x1
1948	 21B	PUSH2	00A0	 	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0xA0
1949	 21E	MLOAD		 	  ;; # read from x5
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x2
1950	 21F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x560
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1951	 224	AND		 	  ;; # mask to 32 bits
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x2
1952	 225	SUB		 	 
- stack 1: 0x560
- stack 0: 0x1
1953	 226	PUSH2	022E	 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x22E
1954	 229	JUMPI		 	 
- stack 0: 0x560
1955	 22E	JUMPDEST		 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 0: 0x560
1956	 22F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1957	 230	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x210FFDC0100000E015C0000008600000095013400B400010252000002520000
1958	 231	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x210FFDC0100000E015C0000008600000095013400B400010252000002520000
- stack 0: 0xE0
1959	 233	SHR		 	 
- stack 1: 0x560
- stack 0: 0x210FFDC
1960	 234	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x210FFDC
- stack 0: 0xFFFF
1961	 237	AND		 	 
- stack 1: 0x560
- stack 0: 0xFFDC
1962	 238	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0xFFDC
- stack 0: 0x1
1963	 23A	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
1964	 23B	ADD		 	 
- stack 0: 0x53C
1965	 23C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x53C
- stack 0: 0xFFFFFFFF
1966	 241	AND		 	  ;; # mask to 32 bits
- stack 0: 0x53C
1967	 242	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1968	 243	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x8600000095016600B40001025200000176000000E6000F0195010801D70001
1969	 244	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x8600000095016600B40001025200000176000000E6000F0195010801D70001
- stack 0: 0xF0
1970	 246	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x86
1971	 247	JUMP		 	 
- stack 0: 0x53C
1972	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x53C
1973	 87	DUP1		 	 
- stack 1: 0x53C
- stack 0: 0x53C
1974	 88	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0x53C
- stack 0: 0x20
1975	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
1976	 8C	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1977	 8E	ADD		 	 
- stack 0: 0x540
1978	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1979	 90	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x95016600B40001025200000176000000E6000F0195010801D7000101F60002
1980	 91	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x95016600B40001025200000176000000E6000F0195010801D7000101F60002
- stack 0: 0xF0
1981	 93	SHR		 	 
- stack 1: 0x540
- stack 0: 0x95
1982	 94	JUMP		 	 
- stack 0: 0x540
1983	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x540
1984	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1985	 97	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x95016600B40001025200000176000000E6000F0195010801D7000101F60002
1986	 98	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x95016600B40001025200000176000000E6000F0195010801D7000101F60002
- stack 0: 0xE0
1987	 9A	SHR		 	 
- stack 1: 0x540
- stack 0: 0x950166
1988	 9B	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x950166
- stack 0: 0xFFFF
1989	 9E	AND		 	 
- stack 1: 0x540
- stack 0: 0x166
1990	 9F	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0x166
- stack 0: 0x1
1991	 A1	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0x166
1992	 A2	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0x166
- stack 0: 0x20
1993	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x540
- stack 1: 0x166
- stack 0: 0x53C
1994	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x540
- stack 0: 0x6A2
1995	 A7	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0x6A2
- stack 0: 0x20
1996	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
1997	 AB	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1998	 AD	ADD		 	 
- stack 0: 0x544
1999	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
2000	 AF	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xB40001025200000176000000E6000F0195010801D7000101F600020210FFDC
2001	 B0	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0xB40001025200000176000000E6000F0195010801D7000101F600020210FFDC
- stack 0: 0xF0
2002	 B2	SHR		 	 
- stack 1: 0x544
- stack 0: 0xB4
2003	 B3	JUMP		 	 
- stack 0: 0x544
2004	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x544
2005	 B5	PUSH2	0020	 	 
- stack 1: 0x544
- stack 0: 0x20
2006	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x544
- stack 0: 0x6A2
2007	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
2008	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0x6A2
2009	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0x544
2010	 C0	MLOAD		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0xB40001025200000176000000E6000F0195010801D7000101F600020210FFDC
2011	 C1	PUSH1	E0	 	 
- stack 3: 0x544
- stack 2: 0x6A2
- stack 1: 0xB40001025200000176000000E6000F0195010801D7000101F600020210FFDC
- stack 0: 0xE0
2012	 C3	SHR		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0xB40001
2013	 C4	PUSH2	FFFF	 	 
- stack 3: 0x544
- stack 2: 0x6A2
- stack 1: 0xB40001
- stack 0: 0xFFFF
2014	 C7	AND		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0x1
2015	 C8	PUSH1	01	 	 
- stack 3: 0x544
- stack 2: 0x6A2
- stack 1: 0x1
- stack 0: 0x1
2016	 CA	SIGNEXTEND		 	 
- stack 2: 0x544
- stack 1: 0x6A2
- stack 0: 0x1
2017	 CB	ADD		 	 
- stack 1: 0x544
- stack 0: 0x6A3
2018	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
2019	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0x6A3
2020	 D2	PUSH1	03	 	 
- stack 2: 0x544
- stack 1: 0x6A3
- stack 0: 0x3
2021	 D4	XOR		 	 
- stack 1: 0x544
- stack 0: 0x6A0
2022	 D5	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xFF000FF00000000000000000000000000000000000000000000000000000000
2023	 D6	PUSH1	F8	 	 
- stack 2: 0x544
- stack 1: 0xFF000FF00000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
2024	 D8	SHR		 	 
- stack 1: 0x544
- stack 0: 0xF
2025	 D9	PUSH2	0060	 	 
- stack 2: 0x544
- stack 1: 0xF
- stack 0: 0x60
2026	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x544
2027	 DD	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
2028	 DF	ADD		 	 
- stack 0: 0x548
2029	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
2030	 E1	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x25200000176000000E6000F0195010801D7000101F600020210FFDC0100000E
2031	 E2	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x25200000176000000E6000F0195010801D7000101F600020210FFDC0100000E
- stack 0: 0xF0
2032	 E4	SHR		 	 
- stack 1: 0x548
- stack 0: 0x252
2033	 E5	JUMP		 	 
- stack 0: 0x548
2034	 252	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x548
2035	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
2036	 254	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x25200000176000000E6000F0195010801D7000101F600020210FFDC0100000E
2037	 255	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x25200000176000000E6000F0195010801D7000101F600020210FFDC0100000E
- stack 0: 0xE0
2038	 257	SHR		 	 
- stack 1: 0x548
- stack 0: 0x2520000
2039	 258	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x2520000
- stack 0: 0xFFFF
2040	 25B	AND		 	 
- stack 1: 0x548
- stack 0: 0x0
2041	 25C	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x0
- stack 0: 0x1
2042	 25E	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x0
2043	 25F	POP		 	 
- stack 0: 0x548
2044	 260	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
2045	 262	ADD		 	 
- stack 0: 0x54C
2046	 263	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
2047	 264	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x176000000E6000F0195010801D7000101F600020210FFDC0100000E015C0000
2048	 265	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x176000000E6000F0195010801D7000101F600020210FFDC0100000E015C0000
- stack 0: 0xF0
2049	 267	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x176
2050	 268	JUMP		 	 
- stack 0: 0x54C
2051	 176	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x54C
2052	 177	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
2053	 178	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x176000000E6000F0195010801D7000101F600020210FFDC0100000E015C0000
2054	 179	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x176000000E6000F0195010801D7000101F600020210FFDC0100000E015C0000
- stack 0: 0xE0
2055	 17B	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1760000
2056	 17C	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x1760000
- stack 0: 0xFFFF
2057	 17F	AND		 	 
- stack 1: 0x54C
- stack 0: 0x0
2058	 180	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x1
2059	 182	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x0
2060	 183	PUSH2	0060	 	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x60
2061	 186	MLOAD		 	  ;; # read from x3
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0xF
2062	 187	ADD		 	  ;; # ADDI 3
- stack 1: 0x54C
- stack 0: 0xF
2063	 188	PUSH2	00C0	 	 
- stack 2: 0x54C
- stack 1: 0xF
- stack 0: 0xC0
2064	 18B	MSTORE		 	  ;; # store to x6
- stack 0: 0x54C
2065	 18C	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
2066	 18E	ADD		 	 
- stack 0: 0x550
2067	 18F	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
2068	 190	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xE6000F0195010801D7000101F600020210FFDC0100000E015C000000860000
2069	 191	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0xE6000F0195010801D7000101F600020210FFDC0100000E015C000000860000
- stack 0: 0xF0
2070	 193	SHR		 	 
- stack 1: 0x550
- stack 0: 0xE6
2071	 194	JUMP		 	 
- stack 0: 0x550
2072	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x550
2073	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
2074	 E8	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xE6000F0195010801D7000101F600020210FFDC0100000E015C000000860000
2075	 E9	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0xE6000F0195010801D7000101F600020210FFDC0100000E015C000000860000
- stack 0: 0xE0
2076	 EB	SHR		 	 
- stack 1: 0x550
- stack 0: 0xE6000F
2077	 EC	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0xE6000F
- stack 0: 0xFFFF
2078	 EF	AND		 	 
- stack 1: 0x550
- stack 0: 0xF
2079	 F0	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0xF
- stack 0: 0x1
2080	 F2	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xF
2081	 F3	PUSH2	03A0	 	 
- stack 2: 0x550
- stack 1: 0xF
- stack 0: 0x3A0
2082	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x550
2083	 F7	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
2084	 F9	ADD		 	 
- stack 0: 0x554
2085	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
2086	 FB	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x195010801D7000101F600020210FFDC0100000E015C00000086000000950134
2087	 FC	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x195010801D7000101F600020210FFDC0100000E015C00000086000000950134
- stack 0: 0xF0
2088	 FE	SHR		 	 
- stack 1: 0x554
- stack 0: 0x195
2089	 FF	JUMP		 	 
- stack 0: 0x554
2090	 195	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,138(ignore imm)
- stack 0: 0x554
2091	 196	PUSH2	00C0	 	 
- stack 1: 0x554
- stack 0: 0xC0
2092	 199	MLOAD		 	  ;; # read from x6
- stack 1: 0x554
- stack 0: 0xF
2093	 19A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
2094	 19F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x554
- stack 0: 0xF
2095	 1A0	PUSH2	03A0	 	 
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0x3A0
2096	 1A3	MLOAD		 	  ;; # read from x29
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0xF
2097	 1A4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x554
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
2098	 1A9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x554
- stack 1: 0xF
- stack 0: 0xF
2099	 1AA	SUB		 	 
- stack 1: 0x554
- stack 0: 0x0
2100	 1AB	PUSH2	01B3	 ;; _neq_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1B3
2101	 1AE	JUMPI		 	 
- stack 0: 0x554
2102	 1AF	PUSH2	01CD	 ;; _neq_after_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 1: 0x554
- stack 0: 0x1CD
2103	 1B2	JUMP		 	 
- stack 0: 0x554
2104	 1CD	JUMPDEST		 ;; _neq_after_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 0: 0x554
2105	 1CE	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
2106	 1D0	ADD		 	 
- stack 0: 0x558
2107	 1D1	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
2108	 1D2	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1D7000101F600020210FFDC0100000E015C0000008600000095013400B40001
2109	 1D3	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x1D7000101F600020210FFDC0100000E015C0000008600000095013400B40001
- stack 0: 0xF0
2110	 1D5	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1D7
2111	 1D6	JUMP		 	 
- stack 0: 0x558
2112	 1D7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x558
2113	 1D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
2114	 1D9	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1D7000101F600020210FFDC0100000E015C0000008600000095013400B40001
2115	 1DA	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x1D7000101F600020210FFDC0100000E015C0000008600000095013400B40001
- stack 0: 0xE0
2116	 1DC	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1D70001
2117	 1DD	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x1D70001
- stack 0: 0xFFFF
2118	 1E0	AND		 	 
- stack 1: 0x558
- stack 0: 0x1
2119	 1E1	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x1
2120	 1E3	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x1
2121	 1E4	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x80
2122	 1E7	MLOAD		 	  ;; # read from x4
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x1
2123	 1E8	ADD		 	  ;; # ADDI 4
- stack 1: 0x558
- stack 0: 0x2
2124	 1E9	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0x80
2125	 1EC	MSTORE		 	  ;; # store to x4
- stack 0: 0x558
2126	 1ED	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
2127	 1EF	ADD		 	 
- stack 0: 0x55C
2128	 1F0	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
2129	 1F1	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1F600020210FFDC0100000E015C0000008600000095013400B4000102520000
2130	 1F2	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x1F600020210FFDC0100000E015C0000008600000095013400B4000102520000
- stack 0: 0xF0
2131	 1F4	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1F6
2132	 1F5	JUMP		 	 
- stack 0: 0x55C
2133	 1F6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x55C
2134	 1F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
2135	 1F8	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1F600020210FFDC0100000E015C0000008600000095013400B4000102520000
2136	 1F9	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x1F600020210FFDC0100000E015C0000008600000095013400B4000102520000
- stack 0: 0xE0
2137	 1FB	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1F60002
2138	 1FC	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x1F60002
- stack 0: 0xFFFF
2139	 1FF	AND		 	 
- stack 1: 0x55C
- stack 0: 0x2
2140	 200	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0x1
2141	 202	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x2
2142	 203	PUSH2	00A0	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0xA0
2143	 206	MSTORE		 	  ;; # store to x5
- stack 0: 0x55C
2144	 207	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
2145	 209	ADD		 	 
- stack 0: 0x560
2146	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
2147	 20B	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x210FFDC0100000E015C0000008600000095013400B400010252000002520000
2148	 20C	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x210FFDC0100000E015C0000008600000095013400B400010252000002520000
- stack 0: 0xF0
2149	 20E	SHR		 	 
- stack 1: 0x560
- stack 0: 0x210
2150	 20F	JUMP		 	 
- stack 0: 0x560
2151	 210	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x560
2152	 211	PUSH2	0080	 	 
- stack 1: 0x560
- stack 0: 0x80
2153	 214	MLOAD		 	  ;; # read from x4
- stack 1: 0x560
- stack 0: 0x2
2154	 215	PUSH4	FFFFFFFF	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2155	 21A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x560
- stack 0: 0x2
2156	 21B	PUSH2	00A0	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0xA0
2157	 21E	MLOAD		 	  ;; # read from x5
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0x2
2158	 21F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x560
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2159	 224	AND		 	  ;; # mask to 32 bits
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0x2
2160	 225	SUB		 	 
- stack 1: 0x560
- stack 0: 0x0
2161	 226	PUSH2	022E	 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x22E
2162	 229	JUMPI		 	 
- stack 0: 0x560
2163	 22A	PUSH2	0248	 ;; _neq_after_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 1: 0x560
- stack 0: 0x248
2164	 22D	JUMP		 	 
- stack 0: 0x560
2165	 248	JUMPDEST		 ;; _neq_after_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 0: 0x560
2166	 249	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
2167	 24B	ADD		 	 
- stack 0: 0x564
2168	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2169	 24D	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x100000E015C0000008600000095013400B40001025200000252000001760000
2170	 24E	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x100000E015C0000008600000095013400B40001025200000252000001760000
- stack 0: 0xF0
2171	 250	SHR		 	 
- stack 1: 0x564
- stack 0: 0x100
2172	 251	JUMP		 	 
- stack 0: 0x564
2173	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x564
2174	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
2175	 102	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x100000E015C0000008600000095013400B40001025200000252000001760000
2176	 103	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x100000E015C0000008600000095013400B40001025200000252000001760000
- stack 0: 0xE0
2177	 105	SHR		 	 
- stack 1: 0x564
- stack 0: 0x100000E
2178	 106	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x100000E
- stack 0: 0xFFFF
2179	 109	AND		 	 
- stack 1: 0x564
- stack 0: 0xE
2180	 10A	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0xE
- stack 0: 0x1
2181	 10C	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0xE
2182	 10D	PUSH2	0380	 	 
- stack 2: 0x564
- stack 1: 0xE
- stack 0: 0x380
2183	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x564
2184	 111	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2185	 113	ADD		 	 
- stack 0: 0x568
2186	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2187	 115	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x15C0000008600000095013400B4000102520000025200000176000000E60000
2188	 116	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x15C0000008600000095013400B4000102520000025200000176000000E60000
- stack 0: 0xF0
2189	 118	SHR		 	 
- stack 1: 0x568
- stack 0: 0x15C
2190	 119	JUMP		 	 
- stack 0: 0x568
2191	 15C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x568
2192	 15D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
2193	 15E	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x15C0000008600000095013400B4000102520000025200000176000000E60000
2194	 15F	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x15C0000008600000095013400B4000102520000025200000176000000E60000
- stack 0: 0xE0
2195	 161	SHR		 	 
- stack 1: 0x568
- stack 0: 0x15C0000
2196	 162	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x15C0000
- stack 0: 0xFFFF
2197	 165	AND		 	 
- stack 1: 0x568
- stack 0: 0x0
2198	 166	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x1
2199	 168	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x0
2200	 169	PUSH2	0080	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x80
2201	 16C	MSTORE		 	  ;; # store to x4
- stack 0: 0x568
2202	 16D	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2203	 16F	ADD		 	 
- stack 0: 0x56C
2204	 170	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2205	 171	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x8600000095013400B4000102520000025200000176000000E60000019500D4
2206	 172	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x8600000095013400B4000102520000025200000176000000E60000019500D4
- stack 0: 0xF0
2207	 174	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x86
2208	 175	JUMP		 	 
- stack 0: 0x56C
2209	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x56C
2210	 87	DUP1		 	 
- stack 1: 0x56C
- stack 0: 0x56C
2211	 88	PUSH2	0020	 	 
- stack 2: 0x56C
- stack 1: 0x56C
- stack 0: 0x20
2212	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x56C
2213	 8C	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2214	 8E	ADD		 	 
- stack 0: 0x570
2215	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2216	 90	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x95013400B4000102520000025200000176000000E60000019500D401D70001
2217	 91	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x95013400B4000102520000025200000176000000E60000019500D401D70001
- stack 0: 0xF0
2218	 93	SHR		 	 
- stack 1: 0x570
- stack 0: 0x95
2219	 94	JUMP		 	 
- stack 0: 0x570
2220	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x570
2221	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
2222	 97	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x95013400B4000102520000025200000176000000E60000019500D401D70001
2223	 98	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x95013400B4000102520000025200000176000000E60000019500D401D70001
- stack 0: 0xE0
2224	 9A	SHR		 	 
- stack 1: 0x570
- stack 0: 0x950134
2225	 9B	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x950134
- stack 0: 0xFFFF
2226	 9E	AND		 	 
- stack 1: 0x570
- stack 0: 0x134
2227	 9F	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x134
- stack 0: 0x1
2228	 A1	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x134
2229	 A2	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0x134
- stack 0: 0x20
2230	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x570
- stack 1: 0x134
- stack 0: 0x56C
2231	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x570
- stack 0: 0x6A0
2232	 A7	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0x6A0
- stack 0: 0x20
2233	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x570
2234	 AB	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2235	 AD	ADD		 	 
- stack 0: 0x574
2236	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2237	 AF	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xB4000102520000025200000176000000E60000019500D401D7000101F60002
2238	 B0	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0xB4000102520000025200000176000000E60000019500D401D7000101F60002
- stack 0: 0xF0
2239	 B2	SHR		 	 
- stack 1: 0x574
- stack 0: 0xB4
2240	 B3	JUMP		 	 
- stack 0: 0x574
2241	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x574
2242	 B5	PUSH2	0020	 	 
- stack 1: 0x574
- stack 0: 0x20
2243	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x574
- stack 0: 0x6A0
2244	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
2245	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x574
- stack 0: 0x6A0
2246	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0x574
2247	 C0	MLOAD		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0xB4000102520000025200000176000000E60000019500D401D7000101F60002
2248	 C1	PUSH1	E0	 	 
- stack 3: 0x574
- stack 2: 0x6A0
- stack 1: 0xB4000102520000025200000176000000E60000019500D401D7000101F60002
- stack 0: 0xE0
2249	 C3	SHR		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0xB40001
2250	 C4	PUSH2	FFFF	 	 
- stack 3: 0x574
- stack 2: 0x6A0
- stack 1: 0xB40001
- stack 0: 0xFFFF
2251	 C7	AND		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0x1
2252	 C8	PUSH1	01	 	 
- stack 3: 0x574
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1
2253	 CA	SIGNEXTEND		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0x1
2254	 CB	ADD		 	 
- stack 1: 0x574
- stack 0: 0x6A1
2255	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x574
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
2256	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x574
- stack 0: 0x6A1
2257	 D2	PUSH1	03	 	 
- stack 2: 0x574
- stack 1: 0x6A1
- stack 0: 0x3
2258	 D4	XOR		 	 
- stack 1: 0x574
- stack 0: 0x6A2
2259	 D5	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xFF000000000000000000000000000000000000000000000000000000000000
2260	 D6	PUSH1	F8	 	 
- stack 2: 0x574
- stack 1: 0xFF000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
2261	 D8	SHR		 	 
- stack 1: 0x574
- stack 0: 0x0
2262	 D9	PUSH2	0060	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x60
2263	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x574
2264	 DD	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2265	 DF	ADD		 	 
- stack 0: 0x578
2266	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2267	 E1	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x2520000025200000176000000E60000019500D401D7000101F600020210FFD8
2268	 E2	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x2520000025200000176000000E60000019500D401D7000101F600020210FFD8
- stack 0: 0xF0
2269	 E4	SHR		 	 
- stack 1: 0x578
- stack 0: 0x252
2270	 E5	JUMP		 	 
- stack 0: 0x578
2271	 252	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x578
2272	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2273	 254	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x2520000025200000176000000E60000019500D401D7000101F600020210FFD8
2274	 255	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x2520000025200000176000000E60000019500D401D7000101F600020210FFD8
- stack 0: 0xE0
2275	 257	SHR		 	 
- stack 1: 0x578
- stack 0: 0x2520000
2276	 258	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x2520000
- stack 0: 0xFFFF
2277	 25B	AND		 	 
- stack 1: 0x578
- stack 0: 0x0
2278	 25C	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x1
2279	 25E	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x0
2280	 25F	POP		 	 
- stack 0: 0x578
2281	 260	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2282	 262	ADD		 	 
- stack 0: 0x57C
2283	 263	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2284	 264	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x25200000176000000E60000019500D401D7000101F600020210FFD80100000F
2285	 265	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x25200000176000000E60000019500D401D7000101F600020210FFD80100000F
- stack 0: 0xF0
2286	 267	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x252
2287	 268	JUMP		 	 
- stack 0: 0x57C
2288	 252	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x57C
2289	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2290	 254	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x25200000176000000E60000019500D401D7000101F600020210FFD80100000F
2291	 255	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x25200000176000000E60000019500D401D7000101F600020210FFD80100000F
- stack 0: 0xE0
2292	 257	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x2520000
2293	 258	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x2520000
- stack 0: 0xFFFF
2294	 25B	AND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2295	 25C	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x1
2296	 25E	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2297	 25F	POP		 	 
- stack 0: 0x57C
2298	 260	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2299	 262	ADD		 	 
- stack 0: 0x580
2300	 263	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2301	 264	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x176000000E60000019500D401D7000101F600020210FFD80100000F015C0000
2302	 265	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x176000000E60000019500D401D7000101F600020210FFD80100000F015C0000
- stack 0: 0xF0
2303	 267	SHR		 	 
- stack 1: 0x580
- stack 0: 0x176
2304	 268	JUMP		 	 
- stack 0: 0x580
2305	 176	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x580
2306	 177	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2307	 178	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x176000000E60000019500D401D7000101F600020210FFD80100000F015C0000
2308	 179	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x176000000E60000019500D401D7000101F600020210FFD80100000F015C0000
- stack 0: 0xE0
2309	 17B	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1760000
2310	 17C	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x1760000
- stack 0: 0xFFFF
2311	 17F	AND		 	 
- stack 1: 0x580
- stack 0: 0x0
2312	 180	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x1
2313	 182	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x0
2314	 183	PUSH2	0060	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x60
2315	 186	MLOAD		 	  ;; # read from x3
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x0
2316	 187	ADD		 	  ;; # ADDI 3
- stack 1: 0x580
- stack 0: 0x0
2317	 188	PUSH2	00C0	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0xC0
2318	 18B	MSTORE		 	  ;; # store to x6
- stack 0: 0x580
2319	 18C	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2320	 18E	ADD		 	 
- stack 0: 0x584
2321	 18F	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2322	 190	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xE60000019500D401D7000101F600020210FFD80100000F015C000000860000
2323	 191	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xE60000019500D401D7000101F600020210FFD80100000F015C000000860000
- stack 0: 0xF0
2324	 193	SHR		 	 
- stack 1: 0x584
- stack 0: 0xE6
2325	 194	JUMP		 	 
- stack 0: 0x584
2326	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x584
2327	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2328	 E8	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xE60000019500D401D7000101F600020210FFD80100000F015C000000860000
2329	 E9	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0xE60000019500D401D7000101F600020210FFD80100000F015C000000860000
- stack 0: 0xE0
2330	 EB	SHR		 	 
- stack 1: 0x584
- stack 0: 0xE60000
2331	 EC	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0xE60000
- stack 0: 0xFFFF
2332	 EF	AND		 	 
- stack 1: 0x584
- stack 0: 0x0
2333	 F0	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x1
2334	 F2	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x0
2335	 F3	PUSH2	03A0	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x3A0
2336	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x584
2337	 F7	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2338	 F9	ADD		 	 
- stack 0: 0x588
2339	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2340	 FB	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x19500D401D7000101F600020210FFD80100000F015C00000086000000950101
2341	 FC	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x19500D401D7000101F600020210FFD80100000F015C00000086000000950101
- stack 0: 0xF0
2342	 FE	SHR		 	 
- stack 1: 0x588
- stack 0: 0x195
2343	 FF	JUMP		 	 
- stack 0: 0x588
2344	 195	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,138(ignore imm)
- stack 0: 0x588
2345	 196	PUSH2	00C0	 	 
- stack 1: 0x588
- stack 0: 0xC0
2346	 199	MLOAD		 	  ;; # read from x6
- stack 1: 0x588
- stack 0: 0x0
2347	 19A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2348	 19F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0x0
2349	 1A0	PUSH2	03A0	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x3A0
2350	 1A3	MLOAD		 	  ;; # read from x29
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x0
2351	 1A4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x588
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2352	 1A9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x0
2353	 1AA	SUB		 	 
- stack 1: 0x588
- stack 0: 0x0
2354	 1AB	PUSH2	01B3	 ;; _neq_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x1B3
2355	 1AE	JUMPI		 	 
- stack 0: 0x588
2356	 1AF	PUSH2	01CD	 ;; _neq_after_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 1: 0x588
- stack 0: 0x1CD
2357	 1B2	JUMP		 	 
- stack 0: 0x588
2358	 1CD	JUMPDEST		 ;; _neq_after_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 0: 0x588
2359	 1CE	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2360	 1D0	ADD		 	 
- stack 0: 0x58C
2361	 1D1	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2362	 1D2	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1D7000101F600020210FFD80100000F015C0000008600000095010100B40001
2363	 1D3	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x1D7000101F600020210FFD80100000F015C0000008600000095010100B40001
- stack 0: 0xF0
2364	 1D5	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x1D7
2365	 1D6	JUMP		 	 
- stack 0: 0x58C
2366	 1D7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x58C
2367	 1D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2368	 1D9	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1D7000101F600020210FFD80100000F015C0000008600000095010100B40001
2369	 1DA	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x1D7000101F600020210FFD80100000F015C0000008600000095010100B40001
- stack 0: 0xE0
2370	 1DC	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x1D70001
2371	 1DD	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x1D70001
- stack 0: 0xFFFF
2372	 1E0	AND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2373	 1E1	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
2374	 1E3	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2375	 1E4	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x80
2376	 1E7	MLOAD		 	  ;; # read from x4
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x0
2377	 1E8	ADD		 	  ;; # ADDI 4
- stack 1: 0x58C
- stack 0: 0x1
2378	 1E9	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x80
2379	 1EC	MSTORE		 	  ;; # store to x4
- stack 0: 0x58C
2380	 1ED	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2381	 1EF	ADD		 	 
- stack 0: 0x590
2382	 1F0	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2383	 1F1	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x1F600020210FFD80100000F015C0000008600000095010100B4000100E600F0
2384	 1F2	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x1F600020210FFD80100000F015C0000008600000095010100B4000100E600F0
- stack 0: 0xF0
2385	 1F4	SHR		 	 
- stack 1: 0x590
- stack 0: 0x1F6
2386	 1F5	JUMP		 	 
- stack 0: 0x590
2387	 1F6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x590
2388	 1F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2389	 1F8	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x1F600020210FFD80100000F015C0000008600000095010100B4000100E600F0
2390	 1F9	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x1F600020210FFD80100000F015C0000008600000095010100B4000100E600F0
- stack 0: 0xE0
2391	 1FB	SHR		 	 
- stack 1: 0x590
- stack 0: 0x1F60002
2392	 1FC	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x1F60002
- stack 0: 0xFFFF
2393	 1FF	AND		 	 
- stack 1: 0x590
- stack 0: 0x2
2394	 200	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0x1
2395	 202	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x2
2396	 203	PUSH2	00A0	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0xA0
2397	 206	MSTORE		 	  ;; # store to x5
- stack 0: 0x590
2398	 207	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2399	 209	ADD		 	 
- stack 0: 0x594
2400	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2401	 20B	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x210FFD80100000F015C0000008600000095010100B4000100E600F0011A00AC
2402	 20C	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x210FFD80100000F015C0000008600000095010100B4000100E600F0011A00AC
- stack 0: 0xF0
2403	 20E	SHR		 	 
- stack 1: 0x594
- stack 0: 0x210
2404	 20F	JUMP		 	 
- stack 0: 0x594
2405	 210	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x594
2406	 211	PUSH2	0080	 	 
- stack 1: 0x594
- stack 0: 0x80
2407	 214	MLOAD		 	  ;; # read from x4
- stack 1: 0x594
- stack 0: 0x1
2408	 215	PUSH4	FFFFFFFF	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2409	 21A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x594
- stack 0: 0x1
2410	 21B	PUSH2	00A0	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0xA0
2411	 21E	MLOAD		 	  ;; # read from x5
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x2
2412	 21F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x594
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2413	 224	AND		 	  ;; # mask to 32 bits
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x2
2414	 225	SUB		 	 
- stack 1: 0x594
- stack 0: 0x1
2415	 226	PUSH2	022E	 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x22E
2416	 229	JUMPI		 	 
- stack 0: 0x594
2417	 22E	JUMPDEST		 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 0: 0x594
2418	 22F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2419	 230	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x210FFD80100000F015C0000008600000095010100B4000100E600F0011A00AC
2420	 231	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x210FFD80100000F015C0000008600000095010100B4000100E600F0011A00AC
- stack 0: 0xE0
2421	 233	SHR		 	 
- stack 1: 0x594
- stack 0: 0x210FFD8
2422	 234	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x210FFD8
- stack 0: 0xFFFF
2423	 237	AND		 	 
- stack 1: 0x594
- stack 0: 0xFFD8
2424	 238	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0xFFD8
- stack 0: 0x1
2425	 23A	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
2426	 23B	ADD		 	 
- stack 0: 0x56C
2427	 23C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x56C
- stack 0: 0xFFFFFFFF
2428	 241	AND		 	  ;; # mask to 32 bits
- stack 0: 0x56C
2429	 242	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2430	 243	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x8600000095013400B4000102520000025200000176000000E60000019500D4
2431	 244	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x8600000095013400B4000102520000025200000176000000E60000019500D4
- stack 0: 0xF0
2432	 246	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x86
2433	 247	JUMP		 	 
- stack 0: 0x56C
2434	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x56C
2435	 87	DUP1		 	 
- stack 1: 0x56C
- stack 0: 0x56C
2436	 88	PUSH2	0020	 	 
- stack 2: 0x56C
- stack 1: 0x56C
- stack 0: 0x20
2437	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x56C
2438	 8C	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2439	 8E	ADD		 	 
- stack 0: 0x570
2440	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2441	 90	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x95013400B4000102520000025200000176000000E60000019500D401D70001
2442	 91	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x95013400B4000102520000025200000176000000E60000019500D401D70001
- stack 0: 0xF0
2443	 93	SHR		 	 
- stack 1: 0x570
- stack 0: 0x95
2444	 94	JUMP		 	 
- stack 0: 0x570
2445	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x570
2446	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
2447	 97	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x95013400B4000102520000025200000176000000E60000019500D401D70001
2448	 98	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x95013400B4000102520000025200000176000000E60000019500D401D70001
- stack 0: 0xE0
2449	 9A	SHR		 	 
- stack 1: 0x570
- stack 0: 0x950134
2450	 9B	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x950134
- stack 0: 0xFFFF
2451	 9E	AND		 	 
- stack 1: 0x570
- stack 0: 0x134
2452	 9F	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x134
- stack 0: 0x1
2453	 A1	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x134
2454	 A2	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0x134
- stack 0: 0x20
2455	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x570
- stack 1: 0x134
- stack 0: 0x56C
2456	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x570
- stack 0: 0x6A0
2457	 A7	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0x6A0
- stack 0: 0x20
2458	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x570
2459	 AB	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2460	 AD	ADD		 	 
- stack 0: 0x574
2461	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2462	 AF	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xB4000102520000025200000176000000E60000019500D401D7000101F60002
2463	 B0	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0xB4000102520000025200000176000000E60000019500D401D7000101F60002
- stack 0: 0xF0
2464	 B2	SHR		 	 
- stack 1: 0x574
- stack 0: 0xB4
2465	 B3	JUMP		 	 
- stack 0: 0x574
2466	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x574
2467	 B5	PUSH2	0020	 	 
- stack 1: 0x574
- stack 0: 0x20
2468	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x574
- stack 0: 0x6A0
2469	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
2470	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x574
- stack 0: 0x6A0
2471	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0x574
2472	 C0	MLOAD		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0xB4000102520000025200000176000000E60000019500D401D7000101F60002
2473	 C1	PUSH1	E0	 	 
- stack 3: 0x574
- stack 2: 0x6A0
- stack 1: 0xB4000102520000025200000176000000E60000019500D401D7000101F60002
- stack 0: 0xE0
2474	 C3	SHR		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0xB40001
2475	 C4	PUSH2	FFFF	 	 
- stack 3: 0x574
- stack 2: 0x6A0
- stack 1: 0xB40001
- stack 0: 0xFFFF
2476	 C7	AND		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0x1
2477	 C8	PUSH1	01	 	 
- stack 3: 0x574
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1
2478	 CA	SIGNEXTEND		 	 
- stack 2: 0x574
- stack 1: 0x6A0
- stack 0: 0x1
2479	 CB	ADD		 	 
- stack 1: 0x574
- stack 0: 0x6A1
2480	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x574
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
2481	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x574
- stack 0: 0x6A1
2482	 D2	PUSH1	03	 	 
- stack 2: 0x574
- stack 1: 0x6A1
- stack 0: 0x3
2483	 D4	XOR		 	 
- stack 1: 0x574
- stack 0: 0x6A2
2484	 D5	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xFF000000000000000000000000000000000000000000000000000000000000
2485	 D6	PUSH1	F8	 	 
- stack 2: 0x574
- stack 1: 0xFF000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
2486	 D8	SHR		 	 
- stack 1: 0x574
- stack 0: 0x0
2487	 D9	PUSH2	0060	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x60
2488	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x574
2489	 DD	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2490	 DF	ADD		 	 
- stack 0: 0x578
2491	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2492	 E1	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x2520000025200000176000000E60000019500D401D7000101F600020210FFD8
2493	 E2	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x2520000025200000176000000E60000019500D401D7000101F600020210FFD8
- stack 0: 0xF0
2494	 E4	SHR		 	 
- stack 1: 0x578
- stack 0: 0x252
2495	 E5	JUMP		 	 
- stack 0: 0x578
2496	 252	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x578
2497	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2498	 254	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x2520000025200000176000000E60000019500D401D7000101F600020210FFD8
2499	 255	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x2520000025200000176000000E60000019500D401D7000101F600020210FFD8
- stack 0: 0xE0
2500	 257	SHR		 	 
- stack 1: 0x578
- stack 0: 0x2520000
2501	 258	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x2520000
- stack 0: 0xFFFF
2502	 25B	AND		 	 
- stack 1: 0x578
- stack 0: 0x0
2503	 25C	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x1
2504	 25E	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x0
2505	 25F	POP		 	 
- stack 0: 0x578
2506	 260	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2507	 262	ADD		 	 
- stack 0: 0x57C
2508	 263	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2509	 264	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x25200000176000000E60000019500D401D7000101F600020210FFD80100000F
2510	 265	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x25200000176000000E60000019500D401D7000101F600020210FFD80100000F
- stack 0: 0xF0
2511	 267	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x252
2512	 268	JUMP		 	 
- stack 0: 0x57C
2513	 252	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x57C
2514	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2515	 254	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x25200000176000000E60000019500D401D7000101F600020210FFD80100000F
2516	 255	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x25200000176000000E60000019500D401D7000101F600020210FFD80100000F
- stack 0: 0xE0
2517	 257	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x2520000
2518	 258	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x2520000
- stack 0: 0xFFFF
2519	 25B	AND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2520	 25C	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x1
2521	 25E	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x0
2522	 25F	POP		 	 
- stack 0: 0x57C
2523	 260	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2524	 262	ADD		 	 
- stack 0: 0x580
2525	 263	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2526	 264	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x176000000E60000019500D401D7000101F600020210FFD80100000F015C0000
2527	 265	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x176000000E60000019500D401D7000101F600020210FFD80100000F015C0000
- stack 0: 0xF0
2528	 267	SHR		 	 
- stack 1: 0x580
- stack 0: 0x176
2529	 268	JUMP		 	 
- stack 0: 0x580
2530	 176	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x580
2531	 177	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2532	 178	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x176000000E60000019500D401D7000101F600020210FFD80100000F015C0000
2533	 179	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x176000000E60000019500D401D7000101F600020210FFD80100000F015C0000
- stack 0: 0xE0
2534	 17B	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1760000
2535	 17C	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x1760000
- stack 0: 0xFFFF
2536	 17F	AND		 	 
- stack 1: 0x580
- stack 0: 0x0
2537	 180	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x1
2538	 182	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x0
2539	 183	PUSH2	0060	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x60
2540	 186	MLOAD		 	  ;; # read from x3
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x0
2541	 187	ADD		 	  ;; # ADDI 3
- stack 1: 0x580
- stack 0: 0x0
2542	 188	PUSH2	00C0	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0xC0
2543	 18B	MSTORE		 	  ;; # store to x6
- stack 0: 0x580
2544	 18C	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2545	 18E	ADD		 	 
- stack 0: 0x584
2546	 18F	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2547	 190	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xE60000019500D401D7000101F600020210FFD80100000F015C000000860000
2548	 191	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xE60000019500D401D7000101F600020210FFD80100000F015C000000860000
- stack 0: 0xF0
2549	 193	SHR		 	 
- stack 1: 0x584
- stack 0: 0xE6
2550	 194	JUMP		 	 
- stack 0: 0x584
2551	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x584
2552	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2553	 E8	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xE60000019500D401D7000101F600020210FFD80100000F015C000000860000
2554	 E9	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0xE60000019500D401D7000101F600020210FFD80100000F015C000000860000
- stack 0: 0xE0
2555	 EB	SHR		 	 
- stack 1: 0x584
- stack 0: 0xE60000
2556	 EC	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0xE60000
- stack 0: 0xFFFF
2557	 EF	AND		 	 
- stack 1: 0x584
- stack 0: 0x0
2558	 F0	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x1
2559	 F2	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x0
2560	 F3	PUSH2	03A0	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x3A0
2561	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x584
2562	 F7	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2563	 F9	ADD		 	 
- stack 0: 0x588
2564	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2565	 FB	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x19500D401D7000101F600020210FFD80100000F015C00000086000000950101
2566	 FC	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x19500D401D7000101F600020210FFD80100000F015C00000086000000950101
- stack 0: 0xF0
2567	 FE	SHR		 	 
- stack 1: 0x588
- stack 0: 0x195
2568	 FF	JUMP		 	 
- stack 0: 0x588
2569	 195	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,138(ignore imm)
- stack 0: 0x588
2570	 196	PUSH2	00C0	 	 
- stack 1: 0x588
- stack 0: 0xC0
2571	 199	MLOAD		 	  ;; # read from x6
- stack 1: 0x588
- stack 0: 0x0
2572	 19A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2573	 19F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0x0
2574	 1A0	PUSH2	03A0	 	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x3A0
2575	 1A3	MLOAD		 	  ;; # read from x29
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x0
2576	 1A4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x588
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2577	 1A9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x0
2578	 1AA	SUB		 	 
- stack 1: 0x588
- stack 0: 0x0
2579	 1AB	PUSH2	01B3	 ;; _neq_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x1B3
2580	 1AE	JUMPI		 	 
- stack 0: 0x588
2581	 1AF	PUSH2	01CD	 ;; _neq_after_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 1: 0x588
- stack 0: 0x1CD
2582	 1B2	JUMP		 	 
- stack 0: 0x588
2583	 1CD	JUMPDEST		 ;; _neq_after_75476582a829ed7afbd077016411e057f2964623bd0d1bc6720169a3848d5ed7	 
- stack 0: 0x588
2584	 1CE	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2585	 1D0	ADD		 	 
- stack 0: 0x58C
2586	 1D1	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2587	 1D2	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1D7000101F600020210FFD80100000F015C0000008600000095010100B40001
2588	 1D3	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x1D7000101F600020210FFD80100000F015C0000008600000095010100B40001
- stack 0: 0xF0
2589	 1D5	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x1D7
2590	 1D6	JUMP		 	 
- stack 0: 0x58C
2591	 1D7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x58C
2592	 1D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2593	 1D9	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1D7000101F600020210FFD80100000F015C0000008600000095010100B40001
2594	 1DA	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x1D7000101F600020210FFD80100000F015C0000008600000095010100B40001
- stack 0: 0xE0
2595	 1DC	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x1D70001
2596	 1DD	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x1D70001
- stack 0: 0xFFFF
2597	 1E0	AND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2598	 1E1	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
2599	 1E3	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x1
2600	 1E4	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x80
2601	 1E7	MLOAD		 	  ;; # read from x4
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x1
2602	 1E8	ADD		 	  ;; # ADDI 4
- stack 1: 0x58C
- stack 0: 0x2
2603	 1E9	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0x80
2604	 1EC	MSTORE		 	  ;; # store to x4
- stack 0: 0x58C
2605	 1ED	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2606	 1EF	ADD		 	 
- stack 0: 0x590
2607	 1F0	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2608	 1F1	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x1F600020210FFD80100000F015C0000008600000095010100B4000100E600F0
2609	 1F2	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x1F600020210FFD80100000F015C0000008600000095010100B4000100E600F0
- stack 0: 0xF0
2610	 1F4	SHR		 	 
- stack 1: 0x590
- stack 0: 0x1F6
2611	 1F5	JUMP		 	 
- stack 0: 0x590
2612	 1F6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x590
2613	 1F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2614	 1F8	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x1F600020210FFD80100000F015C0000008600000095010100B4000100E600F0
2615	 1F9	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x1F600020210FFD80100000F015C0000008600000095010100B4000100E600F0
- stack 0: 0xE0
2616	 1FB	SHR		 	 
- stack 1: 0x590
- stack 0: 0x1F60002
2617	 1FC	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x1F60002
- stack 0: 0xFFFF
2618	 1FF	AND		 	 
- stack 1: 0x590
- stack 0: 0x2
2619	 200	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0x1
2620	 202	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x2
2621	 203	PUSH2	00A0	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0xA0
2622	 206	MSTORE		 	  ;; # store to x5
- stack 0: 0x590
2623	 207	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2624	 209	ADD		 	 
- stack 0: 0x594
2625	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2626	 20B	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x210FFD80100000F015C0000008600000095010100B4000100E600F0011A00AC
2627	 20C	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x210FFD80100000F015C0000008600000095010100B4000100E600F0011A00AC
- stack 0: 0xF0
2628	 20E	SHR		 	 
- stack 1: 0x594
- stack 0: 0x210
2629	 20F	JUMP		 	 
- stack 0: 0x594
2630	 210	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x594
2631	 211	PUSH2	0080	 	 
- stack 1: 0x594
- stack 0: 0x80
2632	 214	MLOAD		 	  ;; # read from x4
- stack 1: 0x594
- stack 0: 0x2
2633	 215	PUSH4	FFFFFFFF	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2634	 21A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x594
- stack 0: 0x2
2635	 21B	PUSH2	00A0	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0xA0
2636	 21E	MLOAD		 	  ;; # read from x5
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0x2
2637	 21F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x594
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2638	 224	AND		 	  ;; # mask to 32 bits
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0x2
2639	 225	SUB		 	 
- stack 1: 0x594
- stack 0: 0x0
2640	 226	PUSH2	022E	 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x22E
2641	 229	JUMPI		 	 
- stack 0: 0x594
2642	 22A	PUSH2	0248	 ;; _neq_after_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 1: 0x594
- stack 0: 0x248
2643	 22D	JUMP		 	 
- stack 0: 0x594
2644	 248	JUMPDEST		 ;; _neq_after_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 0: 0x594
2645	 249	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2646	 24B	ADD		 	 
- stack 0: 0x598
2647	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2648	 24D	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x100000F015C0000008600000095010100B4000100E600F0011A00AC01D70001
2649	 24E	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x100000F015C0000008600000095010100B4000100E600F0011A00AC01D70001
- stack 0: 0xF0
2650	 250	SHR		 	 
- stack 1: 0x598
- stack 0: 0x100
2651	 251	JUMP		 	 
- stack 0: 0x598
2652	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x598
2653	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2654	 102	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x100000F015C0000008600000095010100B4000100E600F0011A00AC01D70001
2655	 103	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x100000F015C0000008600000095010100B4000100E600F0011A00AC01D70001
- stack 0: 0xE0
2656	 105	SHR		 	 
- stack 1: 0x598
- stack 0: 0x100000F
2657	 106	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x100000F
- stack 0: 0xFFFF
2658	 109	AND		 	 
- stack 1: 0x598
- stack 0: 0xF
2659	 10A	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0xF
- stack 0: 0x1
2660	 10C	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0xF
2661	 10D	PUSH2	0380	 	 
- stack 2: 0x598
- stack 1: 0xF
- stack 0: 0x380
2662	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x598
2663	 111	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2664	 113	ADD		 	 
- stack 0: 0x59C
2665	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2666	 115	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x15C0000008600000095010100B4000100E600F0011A00AC01D7000101F60002
2667	 116	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x15C0000008600000095010100B4000100E600F0011A00AC01D7000101F60002
- stack 0: 0xF0
2668	 118	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x15C
2669	 119	JUMP		 	 
- stack 0: 0x59C
2670	 15C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x59C
2671	 15D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2672	 15E	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x15C0000008600000095010100B4000100E600F0011A00AC01D7000101F60002
2673	 15F	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x15C0000008600000095010100B4000100E600F0011A00AC01D7000101F60002
- stack 0: 0xE0
2674	 161	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x15C0000
2675	 162	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x15C0000
- stack 0: 0xFFFF
2676	 165	AND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2677	 166	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1
2678	 168	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2679	 169	PUSH2	0080	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x80
2680	 16C	MSTORE		 	  ;; # store to x4
- stack 0: 0x59C
2681	 16D	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2682	 16F	ADD		 	 
- stack 0: 0x5A0
2683	 170	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2684	 171	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x8600000095010100B4000100E600F0011A00AC01D7000101F600020210FFE4
2685	 172	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x8600000095010100B4000100E600F0011A00AC01D7000101F600020210FFE4
- stack 0: 0xF0
2686	 174	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x86
2687	 175	JUMP		 	 
- stack 0: 0x5A0
2688	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5A0
2689	 87	DUP1		 	 
- stack 1: 0x5A0
- stack 0: 0x5A0
2690	 88	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x5A0
- stack 0: 0x20
2691	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
2692	 8C	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2693	 8E	ADD		 	 
- stack 0: 0x5A4
2694	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2695	 90	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x95010100B4000100E600F0011A00AC01D7000101F600020210FFE401000010
2696	 91	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x95010100B4000100E600F0011A00AC01D7000101F600020210FFE401000010
- stack 0: 0xF0
2697	 93	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x95
2698	 94	JUMP		 	 
- stack 0: 0x5A4
2699	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x5A4
2700	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2701	 97	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x95010100B4000100E600F0011A00AC01D7000101F600020210FFE401000010
2702	 98	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x95010100B4000100E600F0011A00AC01D7000101F600020210FFE401000010
- stack 0: 0xE0
2703	 9A	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x950101
2704	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x950101
- stack 0: 0xFFFF
2705	 9E	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x101
2706	 9F	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x101
- stack 0: 0x1
2707	 A1	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x101
2708	 A2	PUSH2	0020	 	 
- stack 2: 0x5A4
- stack 1: 0x101
- stack 0: 0x20
2709	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A4
- stack 1: 0x101
- stack 0: 0x5A0
2710	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5A4
- stack 0: 0x6A1
2711	 A7	PUSH2	0020	 	 
- stack 2: 0x5A4
- stack 1: 0x6A1
- stack 0: 0x20
2712	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A4
2713	 AB	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2714	 AD	ADD		 	 
- stack 0: 0x5A8
2715	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2716	 AF	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0xB4000100E600F0011A00AC01D7000101F600020210FFE401000010015C0000
2717	 B0	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0xB4000100E600F0011A00AC01D7000101F600020210FFE401000010015C0000
- stack 0: 0xF0
2718	 B2	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0xB4
2719	 B3	JUMP		 	 
- stack 0: 0x5A8
2720	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x5A8
2721	 B5	PUSH2	0020	 	 
- stack 1: 0x5A8
- stack 0: 0x20
2722	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5A8
- stack 0: 0x6A1
2723	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
2724	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A8
- stack 0: 0x6A1
2725	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0x5A8
2726	 C0	MLOAD		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0xB4000100E600F0011A00AC01D7000101F600020210FFE401000010015C0000
2727	 C1	PUSH1	E0	 	 
- stack 3: 0x5A8
- stack 2: 0x6A1
- stack 1: 0xB4000100E600F0011A00AC01D7000101F600020210FFE401000010015C0000
- stack 0: 0xE0
2728	 C3	SHR		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0xB40001
2729	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5A8
- stack 2: 0x6A1
- stack 1: 0xB40001
- stack 0: 0xFFFF
2730	 C7	AND		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0x1
2731	 C8	PUSH1	01	 	 
- stack 3: 0x5A8
- stack 2: 0x6A1
- stack 1: 0x1
- stack 0: 0x1
2732	 CA	SIGNEXTEND		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0x1
2733	 CB	ADD		 	 
- stack 1: 0x5A8
- stack 0: 0x6A2
2734	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
2735	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A8
- stack 0: 0x6A2
2736	 D2	PUSH1	03	 	 
- stack 2: 0x5A8
- stack 1: 0x6A2
- stack 0: 0x3
2737	 D4	XOR		 	 
- stack 1: 0x5A8
- stack 0: 0x6A1
2738	 D5	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0xF000FF0000000000000000000000000000000000000000000000000000000000
2739	 D6	PUSH1	F8	 	 
- stack 2: 0x5A8
- stack 1: 0xF000FF0000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
2740	 D8	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0xF0
2741	 D9	PUSH2	0060	 	 
- stack 2: 0x5A8
- stack 1: 0xF0
- stack 0: 0x60
2742	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A8
2743	 DD	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2744	 DF	ADD		 	 
- stack 0: 0x5AC
2745	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2746	 E1	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xE600F0011A00AC01D7000101F600020210FFE401000010015C000000860000
2747	 E2	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0xE600F0011A00AC01D7000101F600020210FFE401000010015C000000860000
- stack 0: 0xF0
2748	 E4	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xE6
2749	 E5	JUMP		 	 
- stack 0: 0x5AC
2750	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x5AC
2751	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2752	 E8	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xE600F0011A00AC01D7000101F600020210FFE401000010015C000000860000
2753	 E9	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0xE600F0011A00AC01D7000101F600020210FFE401000010015C000000860000
- stack 0: 0xE0
2754	 EB	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xE600F0
2755	 EC	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0xE600F0
- stack 0: 0xFFFF
2756	 EF	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xF0
2757	 F0	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xF0
- stack 0: 0x1
2758	 F2	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xF0
2759	 F3	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0xF0
- stack 0: 0x3A0
2760	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x5AC
2761	 F7	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2762	 F9	ADD		 	 
- stack 0: 0x5B0
2763	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2764	 FB	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x11A00AC01D7000101F600020210FFE401000010015C000000860000009500DA
2765	 FC	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x11A00AC01D7000101F600020210FFE401000010015C000000860000009500DA
- stack 0: 0xF0
2766	 FE	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x11A
2767	 FF	JUMP		 	 
- stack 0: 0x5B0
2768	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x5B0
2769	 11B	PUSH2	0060	 	 
- stack 1: 0x5B0
- stack 0: 0x60
2770	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x5B0
- stack 0: 0xF0
2771	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B0
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
2772	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B0
- stack 0: 0xF0
2773	 125	PUSH2	03A0	 	 
- stack 2: 0x5B0
- stack 1: 0xF0
- stack 0: 0x3A0
2774	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B0
- stack 1: 0xF0
- stack 0: 0xF0
2775	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B0
- stack 2: 0xF0
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
2776	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B0
- stack 1: 0xF0
- stack 0: 0xF0
2777	 12F	SUB		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2778	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x138
2779	 133	JUMPI		 	 
- stack 0: 0x5B0
2780	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x5B0
- stack 0: 0x152
2781	 137	JUMP		 	 
- stack 0: 0x5B0
2782	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x5B0
2783	 153	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2784	 155	ADD		 	 
- stack 0: 0x5B4
2785	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2786	 157	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1D7000101F600020210FFE401000010015C000000860000009500DA02520000
2787	 158	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x1D7000101F600020210FFE401000010015C000000860000009500DA02520000
- stack 0: 0xF0
2788	 15A	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1D7
2789	 15B	JUMP		 	 
- stack 0: 0x5B4
2790	 1D7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B4
2791	 1D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2792	 1D9	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1D7000101F600020210FFE401000010015C000000860000009500DA02520000
2793	 1DA	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x1D7000101F600020210FFE401000010015C000000860000009500DA02520000
- stack 0: 0xE0
2794	 1DC	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1D70001
2795	 1DD	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x1D70001
- stack 0: 0xFFFF
2796	 1E0	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2797	 1E1	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
2798	 1E3	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2799	 1E4	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x80
2800	 1E7	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x0
2801	 1E8	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B4
- stack 0: 0x1
2802	 1E9	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x80
2803	 1EC	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B4
2804	 1ED	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2805	 1EF	ADD		 	 
- stack 0: 0x5B8
2806	 1F0	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2807	 1F1	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1F600020210FFE401000010015C000000860000009500DA0252000000B40001
2808	 1F2	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x1F600020210FFE401000010015C000000860000009500DA0252000000B40001
- stack 0: 0xF0
2809	 1F4	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1F6
2810	 1F5	JUMP		 	 
- stack 0: 0x5B8
2811	 1F6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B8
2812	 1F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2813	 1F8	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1F600020210FFE401000010015C000000860000009500DA0252000000B40001
2814	 1F9	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x1F600020210FFE401000010015C000000860000009500DA0252000000B40001
- stack 0: 0xE0
2815	 1FB	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1F60002
2816	 1FC	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x1F60002
- stack 0: 0xFFFF
2817	 1FF	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2818	 200	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0x1
2819	 202	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2820	 203	PUSH2	00A0	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0xA0
2821	 206	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B8
2822	 207	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2823	 209	ADD		 	 
- stack 0: 0x5BC
2824	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2825	 20B	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x210FFE401000010015C000000860000009500DA0252000000B4000100E6000F
2826	 20C	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x210FFE401000010015C000000860000009500DA0252000000B4000100E6000F
- stack 0: 0xF0
2827	 20E	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x210
2828	 20F	JUMP		 	 
- stack 0: 0x5BC
2829	 210	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5BC
2830	 211	PUSH2	0080	 	 
- stack 1: 0x5BC
- stack 0: 0x80
2831	 214	MLOAD		 	  ;; # read from x4
- stack 1: 0x5BC
- stack 0: 0x1
2832	 215	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2833	 21A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x1
2834	 21B	PUSH2	00A0	 	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0xA0
2835	 21E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x2
2836	 21F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2837	 224	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x2
2838	 225	SUB		 	 
- stack 1: 0x5BC
- stack 0: 0x1
2839	 226	PUSH2	022E	 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x22E
2840	 229	JUMPI		 	 
- stack 0: 0x5BC
2841	 22E	JUMPDEST		 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 0: 0x5BC
2842	 22F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2843	 230	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x210FFE401000010015C000000860000009500DA0252000000B4000100E6000F
2844	 231	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x210FFE401000010015C000000860000009500DA0252000000B4000100E6000F
- stack 0: 0xE0
2845	 233	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x210FFE4
2846	 234	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x210FFE4
- stack 0: 0xFFFF
2847	 237	AND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFE4
2848	 238	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0xFFE4
- stack 0: 0x1
2849	 23A	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2850	 23B	ADD		 	 
- stack 0: 0x5A0
2851	 23C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5A0
- stack 0: 0xFFFFFFFF
2852	 241	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5A0
2853	 242	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2854	 243	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x8600000095010100B4000100E600F0011A00AC01D7000101F600020210FFE4
2855	 244	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x8600000095010100B4000100E600F0011A00AC01D7000101F600020210FFE4
- stack 0: 0xF0
2856	 246	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x86
2857	 247	JUMP		 	 
- stack 0: 0x5A0
2858	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5A0
2859	 87	DUP1		 	 
- stack 1: 0x5A0
- stack 0: 0x5A0
2860	 88	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x5A0
- stack 0: 0x20
2861	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
2862	 8C	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2863	 8E	ADD		 	 
- stack 0: 0x5A4
2864	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2865	 90	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x95010100B4000100E600F0011A00AC01D7000101F600020210FFE401000010
2866	 91	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x95010100B4000100E600F0011A00AC01D7000101F600020210FFE401000010
- stack 0: 0xF0
2867	 93	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x95
2868	 94	JUMP		 	 
- stack 0: 0x5A4
2869	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x5A4
2870	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2871	 97	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x95010100B4000100E600F0011A00AC01D7000101F600020210FFE401000010
2872	 98	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x95010100B4000100E600F0011A00AC01D7000101F600020210FFE401000010
- stack 0: 0xE0
2873	 9A	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x950101
2874	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x950101
- stack 0: 0xFFFF
2875	 9E	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x101
2876	 9F	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x101
- stack 0: 0x1
2877	 A1	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x101
2878	 A2	PUSH2	0020	 	 
- stack 2: 0x5A4
- stack 1: 0x101
- stack 0: 0x20
2879	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A4
- stack 1: 0x101
- stack 0: 0x5A0
2880	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5A4
- stack 0: 0x6A1
2881	 A7	PUSH2	0020	 	 
- stack 2: 0x5A4
- stack 1: 0x6A1
- stack 0: 0x20
2882	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A4
2883	 AB	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2884	 AD	ADD		 	 
- stack 0: 0x5A8
2885	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2886	 AF	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0xB4000100E600F0011A00AC01D7000101F600020210FFE401000010015C0000
2887	 B0	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0xB4000100E600F0011A00AC01D7000101F600020210FFE401000010015C0000
- stack 0: 0xF0
2888	 B2	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0xB4
2889	 B3	JUMP		 	 
- stack 0: 0x5A8
2890	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x5A8
2891	 B5	PUSH2	0020	 	 
- stack 1: 0x5A8
- stack 0: 0x20
2892	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5A8
- stack 0: 0x6A1
2893	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
2894	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A8
- stack 0: 0x6A1
2895	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0x5A8
2896	 C0	MLOAD		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0xB4000100E600F0011A00AC01D7000101F600020210FFE401000010015C0000
2897	 C1	PUSH1	E0	 	 
- stack 3: 0x5A8
- stack 2: 0x6A1
- stack 1: 0xB4000100E600F0011A00AC01D7000101F600020210FFE401000010015C0000
- stack 0: 0xE0
2898	 C3	SHR		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0xB40001
2899	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5A8
- stack 2: 0x6A1
- stack 1: 0xB40001
- stack 0: 0xFFFF
2900	 C7	AND		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0x1
2901	 C8	PUSH1	01	 	 
- stack 3: 0x5A8
- stack 2: 0x6A1
- stack 1: 0x1
- stack 0: 0x1
2902	 CA	SIGNEXTEND		 	 
- stack 2: 0x5A8
- stack 1: 0x6A1
- stack 0: 0x1
2903	 CB	ADD		 	 
- stack 1: 0x5A8
- stack 0: 0x6A2
2904	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
2905	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A8
- stack 0: 0x6A2
2906	 D2	PUSH1	03	 	 
- stack 2: 0x5A8
- stack 1: 0x6A2
- stack 0: 0x3
2907	 D4	XOR		 	 
- stack 1: 0x5A8
- stack 0: 0x6A1
2908	 D5	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0xF000FF0000000000000000000000000000000000000000000000000000000000
2909	 D6	PUSH1	F8	 	 
- stack 2: 0x5A8
- stack 1: 0xF000FF0000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
2910	 D8	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0xF0
2911	 D9	PUSH2	0060	 	 
- stack 2: 0x5A8
- stack 1: 0xF0
- stack 0: 0x60
2912	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A8
2913	 DD	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2914	 DF	ADD		 	 
- stack 0: 0x5AC
2915	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2916	 E1	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xE600F0011A00AC01D7000101F600020210FFE401000010015C000000860000
2917	 E2	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0xE600F0011A00AC01D7000101F600020210FFE401000010015C000000860000
- stack 0: 0xF0
2918	 E4	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xE6
2919	 E5	JUMP		 	 
- stack 0: 0x5AC
2920	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x5AC
2921	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2922	 E8	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xE600F0011A00AC01D7000101F600020210FFE401000010015C000000860000
2923	 E9	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0xE600F0011A00AC01D7000101F600020210FFE401000010015C000000860000
- stack 0: 0xE0
2924	 EB	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xE600F0
2925	 EC	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0xE600F0
- stack 0: 0xFFFF
2926	 EF	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xF0
2927	 F0	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xF0
- stack 0: 0x1
2928	 F2	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xF0
2929	 F3	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0xF0
- stack 0: 0x3A0
2930	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x5AC
2931	 F7	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2932	 F9	ADD		 	 
- stack 0: 0x5B0
2933	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2934	 FB	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x11A00AC01D7000101F600020210FFE401000010015C000000860000009500DA
2935	 FC	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x11A00AC01D7000101F600020210FFE401000010015C000000860000009500DA
- stack 0: 0xF0
2936	 FE	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x11A
2937	 FF	JUMP		 	 
- stack 0: 0x5B0
2938	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x5B0
2939	 11B	PUSH2	0060	 	 
- stack 1: 0x5B0
- stack 0: 0x60
2940	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x5B0
- stack 0: 0xF0
2941	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B0
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
2942	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B0
- stack 0: 0xF0
2943	 125	PUSH2	03A0	 	 
- stack 2: 0x5B0
- stack 1: 0xF0
- stack 0: 0x3A0
2944	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B0
- stack 1: 0xF0
- stack 0: 0xF0
2945	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B0
- stack 2: 0xF0
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
2946	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B0
- stack 1: 0xF0
- stack 0: 0xF0
2947	 12F	SUB		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2948	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x138
2949	 133	JUMPI		 	 
- stack 0: 0x5B0
2950	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x5B0
- stack 0: 0x152
2951	 137	JUMP		 	 
- stack 0: 0x5B0
2952	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x5B0
2953	 153	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2954	 155	ADD		 	 
- stack 0: 0x5B4
2955	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2956	 157	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1D7000101F600020210FFE401000010015C000000860000009500DA02520000
2957	 158	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x1D7000101F600020210FFE401000010015C000000860000009500DA02520000
- stack 0: 0xF0
2958	 15A	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1D7
2959	 15B	JUMP		 	 
- stack 0: 0x5B4
2960	 1D7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B4
2961	 1D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2962	 1D9	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1D7000101F600020210FFE401000010015C000000860000009500DA02520000
2963	 1DA	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x1D7000101F600020210FFE401000010015C000000860000009500DA02520000
- stack 0: 0xE0
2964	 1DC	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1D70001
2965	 1DD	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x1D70001
- stack 0: 0xFFFF
2966	 1E0	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2967	 1E1	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
2968	 1E3	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2969	 1E4	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x80
2970	 1E7	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
2971	 1E8	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B4
- stack 0: 0x2
2972	 1E9	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0x80
2973	 1EC	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B4
2974	 1ED	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2975	 1EF	ADD		 	 
- stack 0: 0x5B8
2976	 1F0	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2977	 1F1	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1F600020210FFE401000010015C000000860000009500DA0252000000B40001
2978	 1F2	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x1F600020210FFE401000010015C000000860000009500DA0252000000B40001
- stack 0: 0xF0
2979	 1F4	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1F6
2980	 1F5	JUMP		 	 
- stack 0: 0x5B8
2981	 1F6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B8
2982	 1F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2983	 1F8	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1F600020210FFE401000010015C000000860000009500DA0252000000B40001
2984	 1F9	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x1F600020210FFE401000010015C000000860000009500DA0252000000B40001
- stack 0: 0xE0
2985	 1FB	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1F60002
2986	 1FC	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x1F60002
- stack 0: 0xFFFF
2987	 1FF	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2988	 200	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0x1
2989	 202	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2990	 203	PUSH2	00A0	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0xA0
2991	 206	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B8
2992	 207	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2993	 209	ADD		 	 
- stack 0: 0x5BC
2994	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2995	 20B	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x210FFE401000010015C000000860000009500DA0252000000B4000100E6000F
2996	 20C	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x210FFE401000010015C000000860000009500DA0252000000B4000100E6000F
- stack 0: 0xF0
2997	 20E	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x210
2998	 20F	JUMP		 	 
- stack 0: 0x5BC
2999	 210	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5BC
3000	 211	PUSH2	0080	 	 
- stack 1: 0x5BC
- stack 0: 0x80
3001	 214	MLOAD		 	  ;; # read from x4
- stack 1: 0x5BC
- stack 0: 0x2
3002	 215	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3003	 21A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x2
3004	 21B	PUSH2	00A0	 	 
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0xA0
3005	 21E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0x2
3006	 21F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3007	 224	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0x2
3008	 225	SUB		 	 
- stack 1: 0x5BC
- stack 0: 0x0
3009	 226	PUSH2	022E	 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x22E
3010	 229	JUMPI		 	 
- stack 0: 0x5BC
3011	 22A	PUSH2	0248	 ;; _neq_after_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 1: 0x5BC
- stack 0: 0x248
3012	 22D	JUMP		 	 
- stack 0: 0x5BC
3013	 248	JUMPDEST		 ;; _neq_after_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 0: 0x5BC
3014	 249	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
3015	 24B	ADD		 	 
- stack 0: 0x5C0
3016	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
3017	 24D	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x1000010015C000000860000009500DA0252000000B4000100E6000F011A0080
3018	 24E	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x1000010015C000000860000009500DA0252000000B4000100E6000F011A0080
- stack 0: 0xF0
3019	 250	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x100
3020	 251	JUMP		 	 
- stack 0: 0x5C0
3021	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5C0
3022	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
3023	 102	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x1000010015C000000860000009500DA0252000000B4000100E6000F011A0080
3024	 103	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x1000010015C000000860000009500DA0252000000B4000100E6000F011A0080
- stack 0: 0xE0
3025	 105	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x1000010
3026	 106	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x1000010
- stack 0: 0xFFFF
3027	 109	AND		 	 
- stack 1: 0x5C0
- stack 0: 0x10
3028	 10A	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0x10
- stack 0: 0x1
3029	 10C	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0x10
3030	 10D	PUSH2	0380	 	 
- stack 2: 0x5C0
- stack 1: 0x10
- stack 0: 0x380
3031	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x5C0
3032	 111	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
3033	 113	ADD		 	 
- stack 0: 0x5C4
3034	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
3035	 115	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x15C000000860000009500DA0252000000B4000100E6000F011A008001D70001
3036	 116	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x15C000000860000009500DA0252000000B4000100E6000F011A008001D70001
- stack 0: 0xF0
3037	 118	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x15C
3038	 119	JUMP		 	 
- stack 0: 0x5C4
3039	 15C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5C4
3040	 15D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
3041	 15E	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x15C000000860000009500DA0252000000B4000100E6000F011A008001D70001
3042	 15F	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x15C000000860000009500DA0252000000B4000100E6000F011A008001D70001
- stack 0: 0xE0
3043	 161	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x15C0000
3044	 162	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x15C0000
- stack 0: 0xFFFF
3045	 165	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
3046	 166	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x1
3047	 168	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
3048	 169	PUSH2	0080	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x80
3049	 16C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C4
3050	 16D	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
3051	 16F	ADD		 	 
- stack 0: 0x5C8
3052	 170	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
3053	 171	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x860000009500DA0252000000B4000100E6000F011A008001D7000101F60002
3054	 172	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x860000009500DA0252000000B4000100E6000F011A008001D7000101F60002
- stack 0: 0xF0
3055	 174	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x86
3056	 175	JUMP		 	 
- stack 0: 0x5C8
3057	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5C8
3058	 87	DUP1		 	 
- stack 1: 0x5C8
- stack 0: 0x5C8
3059	 88	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x5C8
- stack 0: 0x20
3060	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
3061	 8C	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
3062	 8E	ADD		 	 
- stack 0: 0x5CC
3063	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
3064	 90	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x9500DA0252000000B4000100E6000F011A008001D7000101F600020210FFE0
3065	 91	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x9500DA0252000000B4000100E6000F011A008001D7000101F600020210FFE0
- stack 0: 0xF0
3066	 93	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x95
3067	 94	JUMP		 	 
- stack 0: 0x5CC
3068	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x5CC
3069	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
3070	 97	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x9500DA0252000000B4000100E6000F011A008001D7000101F600020210FFE0
3071	 98	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x9500DA0252000000B4000100E6000F011A008001D7000101F600020210FFE0
- stack 0: 0xE0
3072	 9A	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x9500DA
3073	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x9500DA
- stack 0: 0xFFFF
3074	 9E	AND		 	 
- stack 1: 0x5CC
- stack 0: 0xDA
3075	 9F	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0xDA
- stack 0: 0x1
3076	 A1	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xDA
3077	 A2	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0xDA
- stack 0: 0x20
3078	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5CC
- stack 1: 0xDA
- stack 0: 0x5C8
3079	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5CC
- stack 0: 0x6A2
3080	 A7	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0x6A2
- stack 0: 0x20
3081	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5CC
3082	 AB	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
3083	 AD	ADD		 	 
- stack 0: 0x5D0
3084	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
3085	 AF	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x252000000B4000100E6000F011A008001D7000101F600020210FFE001000011
3086	 B0	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x252000000B4000100E6000F011A008001D7000101F600020210FFE001000011
- stack 0: 0xF0
3087	 B2	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x252
3088	 B3	JUMP		 	 
- stack 0: 0x5D0
3089	 252	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5D0
3090	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
3091	 254	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x252000000B4000100E6000F011A008001D7000101F600020210FFE001000011
3092	 255	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x252000000B4000100E6000F011A008001D7000101F600020210FFE001000011
- stack 0: 0xE0
3093	 257	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x2520000
3094	 258	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x2520000
- stack 0: 0xFFFF
3095	 25B	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
3096	 25C	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x1
3097	 25E	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
3098	 25F	POP		 	 
- stack 0: 0x5D0
3099	 260	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
3100	 262	ADD		 	 
- stack 0: 0x5D4
3101	 263	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3102	 264	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xB4000100E6000F011A008001D7000101F600020210FFE001000011015C0000
3103	 265	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0xB4000100E6000F011A008001D7000101F600020210FFE001000011015C0000
- stack 0: 0xF0
3104	 267	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xB4
3105	 268	JUMP		 	 
- stack 0: 0x5D4
3106	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x5D4
3107	 B5	PUSH2	0020	 	 
- stack 1: 0x5D4
- stack 0: 0x20
3108	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5D4
- stack 0: 0x6A2
3109	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
3110	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x6A2
3111	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0x5D4
3112	 C0	MLOAD		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0xB4000100E6000F011A008001D7000101F600020210FFE001000011015C0000
3113	 C1	PUSH1	E0	 	 
- stack 3: 0x5D4
- stack 2: 0x6A2
- stack 1: 0xB4000100E6000F011A008001D7000101F600020210FFE001000011015C0000
- stack 0: 0xE0
3114	 C3	SHR		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0xB40001
3115	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x6A2
- stack 1: 0xB40001
- stack 0: 0xFFFF
3116	 C7	AND		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0x1
3117	 C8	PUSH1	01	 	 
- stack 3: 0x5D4
- stack 2: 0x6A2
- stack 1: 0x1
- stack 0: 0x1
3118	 CA	SIGNEXTEND		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0x1
3119	 CB	ADD		 	 
- stack 1: 0x5D4
- stack 0: 0x6A3
3120	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
3121	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x6A3
3122	 D2	PUSH1	03	 	 
- stack 2: 0x5D4
- stack 1: 0x6A3
- stack 0: 0x3
3123	 D4	XOR		 	 
- stack 1: 0x5D4
- stack 0: 0x6A0
3124	 D5	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xFF000FF00000000000000000000000000000000000000000000000000000000
3125	 D6	PUSH1	F8	 	 
- stack 2: 0x5D4
- stack 1: 0xFF000FF00000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
3126	 D8	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xF
3127	 D9	PUSH2	0060	 	 
- stack 2: 0x5D4
- stack 1: 0xF
- stack 0: 0x60
3128	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x5D4
3129	 DD	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3130	 DF	ADD		 	 
- stack 0: 0x5D8
3131	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3132	 E1	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xE6000F011A008001D7000101F600020210FFE001000011015C000000860000
3133	 E2	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0xE6000F011A008001D7000101F600020210FFE001000011015C000000860000
- stack 0: 0xF0
3134	 E4	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xE6
3135	 E5	JUMP		 	 
- stack 0: 0x5D8
3136	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x5D8
3137	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
3138	 E8	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xE6000F011A008001D7000101F600020210FFE001000011015C000000860000
3139	 E9	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0xE6000F011A008001D7000101F600020210FFE001000011015C000000860000
- stack 0: 0xE0
3140	 EB	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xE6000F
3141	 EC	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0xE6000F
- stack 0: 0xFFFF
3142	 EF	AND		 	 
- stack 1: 0x5D8
- stack 0: 0xF
3143	 F0	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0xF
- stack 0: 0x1
3144	 F2	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0xF
3145	 F3	PUSH2	03A0	 	 
- stack 2: 0x5D8
- stack 1: 0xF
- stack 0: 0x3A0
3146	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D8
3147	 F7	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3148	 F9	ADD		 	 
- stack 0: 0x5DC
3149	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3150	 FB	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x11A008001D7000101F600020210FFE001000011015C000000860000009500AC
3151	 FC	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x11A008001D7000101F600020210FFE001000011015C000000860000009500AC
- stack 0: 0xF0
3152	 FE	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x11A
3153	 FF	JUMP		 	 
- stack 0: 0x5DC
3154	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x5DC
3155	 11B	PUSH2	0060	 	 
- stack 1: 0x5DC
- stack 0: 0x60
3156	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x5DC
- stack 0: 0xF
3157	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
3158	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5DC
- stack 0: 0xF
3159	 125	PUSH2	03A0	 	 
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0x3A0
3160	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0xF
3161	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5DC
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
3162	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0xF
3163	 12F	SUB		 	 
- stack 1: 0x5DC
- stack 0: 0x0
3164	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x138
3165	 133	JUMPI		 	 
- stack 0: 0x5DC
3166	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x5DC
- stack 0: 0x152
3167	 137	JUMP		 	 
- stack 0: 0x5DC
3168	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x5DC
3169	 153	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
3170	 155	ADD		 	 
- stack 0: 0x5E0
3171	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
3172	 157	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x1D7000101F600020210FFE001000011015C000000860000009500AC02520000
3173	 158	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x1D7000101F600020210FFE001000011015C000000860000009500AC02520000
- stack 0: 0xF0
3174	 15A	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x1D7
3175	 15B	JUMP		 	 
- stack 0: 0x5E0
3176	 1D7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5E0
3177	 1D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
3178	 1D9	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x1D7000101F600020210FFE001000011015C000000860000009500AC02520000
3179	 1DA	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x1D7000101F600020210FFE001000011015C000000860000009500AC02520000
- stack 0: 0xE0
3180	 1DC	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x1D70001
3181	 1DD	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x1D70001
- stack 0: 0xFFFF
3182	 1E0	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
3183	 1E1	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1
3184	 1E3	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
3185	 1E4	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x80
3186	 1E7	MLOAD		 	  ;; # read from x4
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x0
3187	 1E8	ADD		 	  ;; # ADDI 4
- stack 1: 0x5E0
- stack 0: 0x1
3188	 1E9	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x80
3189	 1EC	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E0
3190	 1ED	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
3191	 1EF	ADD		 	 
- stack 0: 0x5E4
3192	 1F0	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3193	 1F1	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1F600020210FFE001000011015C000000860000009500AC0252000002520000
3194	 1F2	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x1F600020210FFE001000011015C000000860000009500AC0252000002520000
- stack 0: 0xF0
3195	 1F4	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1F6
3196	 1F5	JUMP		 	 
- stack 0: 0x5E4
3197	 1F6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5E4
3198	 1F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
3199	 1F8	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1F600020210FFE001000011015C000000860000009500AC0252000002520000
3200	 1F9	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x1F600020210FFE001000011015C000000860000009500AC0252000002520000
- stack 0: 0xE0
3201	 1FB	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1F60002
3202	 1FC	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x1F60002
- stack 0: 0xFFFF
3203	 1FF	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
3204	 200	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0x1
3205	 202	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
3206	 203	PUSH2	00A0	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0xA0
3207	 206	MSTORE		 	  ;; # store to x5
- stack 0: 0x5E4
3208	 207	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3209	 209	ADD		 	 
- stack 0: 0x5E8
3210	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3211	 20B	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x210FFE001000011015C000000860000009500AC025200000252000000B40001
3212	 20C	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x210FFE001000011015C000000860000009500AC025200000252000000B40001
- stack 0: 0xF0
3213	 20E	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x210
3214	 20F	JUMP		 	 
- stack 0: 0x5E8
3215	 210	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5E8
3216	 211	PUSH2	0080	 	 
- stack 1: 0x5E8
- stack 0: 0x80
3217	 214	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E8
- stack 0: 0x1
3218	 215	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3219	 21A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E8
- stack 0: 0x1
3220	 21B	PUSH2	00A0	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0xA0
3221	 21E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x2
3222	 21F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3223	 224	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x2
3224	 225	SUB		 	 
- stack 1: 0x5E8
- stack 0: 0x1
3225	 226	PUSH2	022E	 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x22E
3226	 229	JUMPI		 	 
- stack 0: 0x5E8
3227	 22E	JUMPDEST		 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 0: 0x5E8
3228	 22F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
3229	 230	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x210FFE001000011015C000000860000009500AC025200000252000000B40001
3230	 231	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x210FFE001000011015C000000860000009500AC025200000252000000B40001
- stack 0: 0xE0
3231	 233	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x210FFE0
3232	 234	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x210FFE0
- stack 0: 0xFFFF
3233	 237	AND		 	 
- stack 1: 0x5E8
- stack 0: 0xFFE0
3234	 238	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0xFFE0
- stack 0: 0x1
3235	 23A	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3236	 23B	ADD		 	 
- stack 0: 0x5C8
3237	 23C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFF
3238	 241	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5C8
3239	 242	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
3240	 243	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x860000009500DA0252000000B4000100E6000F011A008001D7000101F60002
3241	 244	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x860000009500DA0252000000B4000100E6000F011A008001D7000101F60002
- stack 0: 0xF0
3242	 246	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x86
3243	 247	JUMP		 	 
- stack 0: 0x5C8
3244	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5C8
3245	 87	DUP1		 	 
- stack 1: 0x5C8
- stack 0: 0x5C8
3246	 88	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x5C8
- stack 0: 0x20
3247	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
3248	 8C	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
3249	 8E	ADD		 	 
- stack 0: 0x5CC
3250	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
3251	 90	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x9500DA0252000000B4000100E6000F011A008001D7000101F600020210FFE0
3252	 91	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x9500DA0252000000B4000100E6000F011A008001D7000101F600020210FFE0
- stack 0: 0xF0
3253	 93	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x95
3254	 94	JUMP		 	 
- stack 0: 0x5CC
3255	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x5CC
3256	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
3257	 97	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x9500DA0252000000B4000100E6000F011A008001D7000101F600020210FFE0
3258	 98	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x9500DA0252000000B4000100E6000F011A008001D7000101F600020210FFE0
- stack 0: 0xE0
3259	 9A	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x9500DA
3260	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x9500DA
- stack 0: 0xFFFF
3261	 9E	AND		 	 
- stack 1: 0x5CC
- stack 0: 0xDA
3262	 9F	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0xDA
- stack 0: 0x1
3263	 A1	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xDA
3264	 A2	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0xDA
- stack 0: 0x20
3265	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5CC
- stack 1: 0xDA
- stack 0: 0x5C8
3266	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5CC
- stack 0: 0x6A2
3267	 A7	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0x6A2
- stack 0: 0x20
3268	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5CC
3269	 AB	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
3270	 AD	ADD		 	 
- stack 0: 0x5D0
3271	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
3272	 AF	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x252000000B4000100E6000F011A008001D7000101F600020210FFE001000011
3273	 B0	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x252000000B4000100E6000F011A008001D7000101F600020210FFE001000011
- stack 0: 0xF0
3274	 B2	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x252
3275	 B3	JUMP		 	 
- stack 0: 0x5D0
3276	 252	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5D0
3277	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
3278	 254	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x252000000B4000100E6000F011A008001D7000101F600020210FFE001000011
3279	 255	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x252000000B4000100E6000F011A008001D7000101F600020210FFE001000011
- stack 0: 0xE0
3280	 257	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x2520000
3281	 258	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x2520000
- stack 0: 0xFFFF
3282	 25B	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
3283	 25C	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x1
3284	 25E	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
3285	 25F	POP		 	 
- stack 0: 0x5D0
3286	 260	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
3287	 262	ADD		 	 
- stack 0: 0x5D4
3288	 263	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3289	 264	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xB4000100E6000F011A008001D7000101F600020210FFE001000011015C0000
3290	 265	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0xB4000100E6000F011A008001D7000101F600020210FFE001000011015C0000
- stack 0: 0xF0
3291	 267	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xB4
3292	 268	JUMP		 	 
- stack 0: 0x5D4
3293	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x5D4
3294	 B5	PUSH2	0020	 	 
- stack 1: 0x5D4
- stack 0: 0x20
3295	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5D4
- stack 0: 0x6A2
3296	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0xFFFFFFFF
3297	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x6A2
3298	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0x5D4
3299	 C0	MLOAD		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0xB4000100E6000F011A008001D7000101F600020210FFE001000011015C0000
3300	 C1	PUSH1	E0	 	 
- stack 3: 0x5D4
- stack 2: 0x6A2
- stack 1: 0xB4000100E6000F011A008001D7000101F600020210FFE001000011015C0000
- stack 0: 0xE0
3301	 C3	SHR		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0xB40001
3302	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x6A2
- stack 1: 0xB40001
- stack 0: 0xFFFF
3303	 C7	AND		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0x1
3304	 C8	PUSH1	01	 	 
- stack 3: 0x5D4
- stack 2: 0x6A2
- stack 1: 0x1
- stack 0: 0x1
3305	 CA	SIGNEXTEND		 	 
- stack 2: 0x5D4
- stack 1: 0x6A2
- stack 0: 0x1
3306	 CB	ADD		 	 
- stack 1: 0x5D4
- stack 0: 0x6A3
3307	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x6A3
- stack 0: 0xFFFFFFFF
3308	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x6A3
3309	 D2	PUSH1	03	 	 
- stack 2: 0x5D4
- stack 1: 0x6A3
- stack 0: 0x3
3310	 D4	XOR		 	 
- stack 1: 0x5D4
- stack 0: 0x6A0
3311	 D5	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xFF000FF00000000000000000000000000000000000000000000000000000000
3312	 D6	PUSH1	F8	 	 
- stack 2: 0x5D4
- stack 1: 0xFF000FF00000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
3313	 D8	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xF
3314	 D9	PUSH2	0060	 	 
- stack 2: 0x5D4
- stack 1: 0xF
- stack 0: 0x60
3315	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x5D4
3316	 DD	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3317	 DF	ADD		 	 
- stack 0: 0x5D8
3318	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3319	 E1	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xE6000F011A008001D7000101F600020210FFE001000011015C000000860000
3320	 E2	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0xE6000F011A008001D7000101F600020210FFE001000011015C000000860000
- stack 0: 0xF0
3321	 E4	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xE6
3322	 E5	JUMP		 	 
- stack 0: 0x5D8
3323	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x5D8
3324	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
3325	 E8	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xE6000F011A008001D7000101F600020210FFE001000011015C000000860000
3326	 E9	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0xE6000F011A008001D7000101F600020210FFE001000011015C000000860000
- stack 0: 0xE0
3327	 EB	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xE6000F
3328	 EC	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0xE6000F
- stack 0: 0xFFFF
3329	 EF	AND		 	 
- stack 1: 0x5D8
- stack 0: 0xF
3330	 F0	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0xF
- stack 0: 0x1
3331	 F2	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0xF
3332	 F3	PUSH2	03A0	 	 
- stack 2: 0x5D8
- stack 1: 0xF
- stack 0: 0x3A0
3333	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D8
3334	 F7	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3335	 F9	ADD		 	 
- stack 0: 0x5DC
3336	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3337	 FB	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x11A008001D7000101F600020210FFE001000011015C000000860000009500AC
3338	 FC	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x11A008001D7000101F600020210FFE001000011015C000000860000009500AC
- stack 0: 0xF0
3339	 FE	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x11A
3340	 FF	JUMP		 	 
- stack 0: 0x5DC
3341	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x5DC
3342	 11B	PUSH2	0060	 	 
- stack 1: 0x5DC
- stack 0: 0x60
3343	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x5DC
- stack 0: 0xF
3344	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
3345	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5DC
- stack 0: 0xF
3346	 125	PUSH2	03A0	 	 
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0x3A0
3347	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0xF
3348	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5DC
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
3349	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0xF
3350	 12F	SUB		 	 
- stack 1: 0x5DC
- stack 0: 0x0
3351	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x138
3352	 133	JUMPI		 	 
- stack 0: 0x5DC
3353	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x5DC
- stack 0: 0x152
3354	 137	JUMP		 	 
- stack 0: 0x5DC
3355	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x5DC
3356	 153	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
3357	 155	ADD		 	 
- stack 0: 0x5E0
3358	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
3359	 157	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x1D7000101F600020210FFE001000011015C000000860000009500AC02520000
3360	 158	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x1D7000101F600020210FFE001000011015C000000860000009500AC02520000
- stack 0: 0xF0
3361	 15A	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x1D7
3362	 15B	JUMP		 	 
- stack 0: 0x5E0
3363	 1D7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5E0
3364	 1D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
3365	 1D9	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x1D7000101F600020210FFE001000011015C000000860000009500AC02520000
3366	 1DA	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x1D7000101F600020210FFE001000011015C000000860000009500AC02520000
- stack 0: 0xE0
3367	 1DC	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x1D70001
3368	 1DD	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x1D70001
- stack 0: 0xFFFF
3369	 1E0	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
3370	 1E1	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1
3371	 1E3	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
3372	 1E4	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x80
3373	 1E7	MLOAD		 	  ;; # read from x4
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1
3374	 1E8	ADD		 	  ;; # ADDI 4
- stack 1: 0x5E0
- stack 0: 0x2
3375	 1E9	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0x80
3376	 1EC	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E0
3377	 1ED	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
3378	 1EF	ADD		 	 
- stack 0: 0x5E4
3379	 1F0	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3380	 1F1	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1F600020210FFE001000011015C000000860000009500AC0252000002520000
3381	 1F2	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x1F600020210FFE001000011015C000000860000009500AC0252000002520000
- stack 0: 0xF0
3382	 1F4	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1F6
3383	 1F5	JUMP		 	 
- stack 0: 0x5E4
3384	 1F6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5E4
3385	 1F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
3386	 1F8	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1F600020210FFE001000011015C000000860000009500AC0252000002520000
3387	 1F9	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x1F600020210FFE001000011015C000000860000009500AC0252000002520000
- stack 0: 0xE0
3388	 1FB	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1F60002
3389	 1FC	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x1F60002
- stack 0: 0xFFFF
3390	 1FF	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
3391	 200	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0x1
3392	 202	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
3393	 203	PUSH2	00A0	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0xA0
3394	 206	MSTORE		 	  ;; # store to x5
- stack 0: 0x5E4
3395	 207	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3396	 209	ADD		 	 
- stack 0: 0x5E8
3397	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3398	 20B	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x210FFE001000011015C000000860000009500AC025200000252000000B40001
3399	 20C	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x210FFE001000011015C000000860000009500AC025200000252000000B40001
- stack 0: 0xF0
3400	 20E	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x210
3401	 20F	JUMP		 	 
- stack 0: 0x5E8
3402	 210	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5E8
3403	 211	PUSH2	0080	 	 
- stack 1: 0x5E8
- stack 0: 0x80
3404	 214	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E8
- stack 0: 0x2
3405	 215	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3406	 21A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E8
- stack 0: 0x2
3407	 21B	PUSH2	00A0	 	 
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0xA0
3408	 21E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0x2
3409	 21F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3410	 224	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0x2
3411	 225	SUB		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3412	 226	PUSH2	022E	 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x22E
3413	 229	JUMPI		 	 
- stack 0: 0x5E8
3414	 22A	PUSH2	0248	 ;; _neq_after_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 1: 0x5E8
- stack 0: 0x248
3415	 22D	JUMP		 	 
- stack 0: 0x5E8
3416	 248	JUMPDEST		 ;; _neq_after_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 0: 0x5E8
3417	 249	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3418	 24B	ADD		 	 
- stack 0: 0x5EC
3419	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3420	 24D	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x1000011015C000000860000009500AC025200000252000000B4000100E60000
3421	 24E	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x1000011015C000000860000009500AC025200000252000000B4000100E60000
- stack 0: 0xF0
3422	 250	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x100
3423	 251	JUMP		 	 
- stack 0: 0x5EC
3424	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5EC
3425	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
3426	 102	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x1000011015C000000860000009500AC025200000252000000B4000100E60000
3427	 103	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x1000011015C000000860000009500AC025200000252000000B4000100E60000
- stack 0: 0xE0
3428	 105	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x1000011
3429	 106	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x1000011
- stack 0: 0xFFFF
3430	 109	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x11
3431	 10A	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x11
- stack 0: 0x1
3432	 10C	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x11
3433	 10D	PUSH2	0380	 	 
- stack 2: 0x5EC
- stack 1: 0x11
- stack 0: 0x380
3434	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x5EC
3435	 111	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3436	 113	ADD		 	 
- stack 0: 0x5F0
3437	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3438	 115	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x15C000000860000009500AC025200000252000000B4000100E60000011A0050
3439	 116	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x15C000000860000009500AC025200000252000000B4000100E60000011A0050
- stack 0: 0xF0
3440	 118	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x15C
3441	 119	JUMP		 	 
- stack 0: 0x5F0
3442	 15C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5F0
3443	 15D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3444	 15E	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x15C000000860000009500AC025200000252000000B4000100E60000011A0050
3445	 15F	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x15C000000860000009500AC025200000252000000B4000100E60000011A0050
- stack 0: 0xE0
3446	 161	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x15C0000
3447	 162	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x15C0000
- stack 0: 0xFFFF
3448	 165	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3449	 166	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x1
3450	 168	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3451	 169	PUSH2	0080	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x80
3452	 16C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5F0
3453	 16D	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3454	 16F	ADD		 	 
- stack 0: 0x5F4
3455	 170	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3456	 171	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x860000009500AC025200000252000000B4000100E60000011A005001D70001
3457	 172	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x860000009500AC025200000252000000B4000100E60000011A005001D70001
- stack 0: 0xF0
3458	 174	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x86
3459	 175	JUMP		 	 
- stack 0: 0x5F4
3460	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5F4
3461	 87	DUP1		 	 
- stack 1: 0x5F4
- stack 0: 0x5F4
3462	 88	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0x5F4
- stack 0: 0x20
3463	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F4
3464	 8C	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3465	 8E	ADD		 	 
- stack 0: 0x5F8
3466	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3467	 90	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x9500AC025200000252000000B4000100E60000011A005001D7000101F60002
3468	 91	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x9500AC025200000252000000B4000100E60000011A005001D7000101F60002
- stack 0: 0xF0
3469	 93	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x95
3470	 94	JUMP		 	 
- stack 0: 0x5F8
3471	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x5F8
3472	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3473	 97	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x9500AC025200000252000000B4000100E60000011A005001D7000101F60002
3474	 98	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x9500AC025200000252000000B4000100E60000011A005001D7000101F60002
- stack 0: 0xE0
3475	 9A	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x9500AC
3476	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x9500AC
- stack 0: 0xFFFF
3477	 9E	AND		 	 
- stack 1: 0x5F8
- stack 0: 0xAC
3478	 9F	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xAC
- stack 0: 0x1
3479	 A1	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xAC
3480	 A2	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0xAC
- stack 0: 0x20
3481	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F8
- stack 1: 0xAC
- stack 0: 0x5F4
3482	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F8
- stack 0: 0x6A0
3483	 A7	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0x6A0
- stack 0: 0x20
3484	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F8
3485	 AB	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3486	 AD	ADD		 	 
- stack 0: 0x5FC
3487	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3488	 AF	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x25200000252000000B4000100E60000011A005001D7000101F600020210FFDC
3489	 B0	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x25200000252000000B4000100E60000011A005001D7000101F600020210FFDC
- stack 0: 0xF0
3490	 B2	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x252
3491	 B3	JUMP		 	 
- stack 0: 0x5FC
3492	 252	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5FC
3493	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3494	 254	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x25200000252000000B4000100E60000011A005001D7000101F600020210FFDC
3495	 255	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x25200000252000000B4000100E60000011A005001D7000101F600020210FFDC
- stack 0: 0xE0
3496	 257	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x2520000
3497	 258	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x2520000
- stack 0: 0xFFFF
3498	 25B	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3499	 25C	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
3500	 25E	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3501	 25F	POP		 	 
- stack 0: 0x5FC
3502	 260	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3503	 262	ADD		 	 
- stack 0: 0x600
3504	 263	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3505	 264	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x252000000B4000100E60000011A005001D7000101F600020210FFDC02690000
3506	 265	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x252000000B4000100E60000011A005001D7000101F600020210FFDC02690000
- stack 0: 0xF0
3507	 267	SHR		 	 
- stack 1: 0x600
- stack 0: 0x252
3508	 268	JUMP		 	 
- stack 0: 0x600
3509	 252	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x600
3510	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3511	 254	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x252000000B4000100E60000011A005001D7000101F600020210FFDC02690000
3512	 255	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x252000000B4000100E60000011A005001D7000101F600020210FFDC02690000
- stack 0: 0xE0
3513	 257	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2520000
3514	 258	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x2520000
- stack 0: 0xFFFF
3515	 25B	AND		 	 
- stack 1: 0x600
- stack 0: 0x0
3516	 25C	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x1
3517	 25E	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x0
3518	 25F	POP		 	 
- stack 0: 0x600
3519	 260	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3520	 262	ADD		 	 
- stack 0: 0x604
3521	 263	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3522	 264	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0xB4000100E60000011A005001D7000101F600020210FFDC0269000002780084
3523	 265	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0xB4000100E60000011A005001D7000101F600020210FFDC0269000002780084
- stack 0: 0xF0
3524	 267	SHR		 	 
- stack 1: 0x604
- stack 0: 0xB4
3525	 268	JUMP		 	 
- stack 0: 0x604
3526	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x604
3527	 B5	PUSH2	0020	 	 
- stack 1: 0x604
- stack 0: 0x20
3528	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x604
- stack 0: 0x6A0
3529	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
3530	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0x6A0
3531	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0x604
3532	 C0	MLOAD		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0xB4000100E60000011A005001D7000101F600020210FFDC0269000002780084
3533	 C1	PUSH1	E0	 	 
- stack 3: 0x604
- stack 2: 0x6A0
- stack 1: 0xB4000100E60000011A005001D7000101F600020210FFDC0269000002780084
- stack 0: 0xE0
3534	 C3	SHR		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0xB40001
3535	 C4	PUSH2	FFFF	 	 
- stack 3: 0x604
- stack 2: 0x6A0
- stack 1: 0xB40001
- stack 0: 0xFFFF
3536	 C7	AND		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0x1
3537	 C8	PUSH1	01	 	 
- stack 3: 0x604
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1
3538	 CA	SIGNEXTEND		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0x1
3539	 CB	ADD		 	 
- stack 1: 0x604
- stack 0: 0x6A1
3540	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
3541	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0x6A1
3542	 D2	PUSH1	03	 	 
- stack 2: 0x604
- stack 1: 0x6A1
- stack 0: 0x3
3543	 D4	XOR		 	 
- stack 1: 0x604
- stack 0: 0x6A2
3544	 D5	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0xFF000000000000000000000000000000000000000000000000000000000000
3545	 D6	PUSH1	F8	 	 
- stack 2: 0x604
- stack 1: 0xFF000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
3546	 D8	SHR		 	 
- stack 1: 0x604
- stack 0: 0x0
3547	 D9	PUSH2	0060	 	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x60
3548	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x604
3549	 DD	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3550	 DF	ADD		 	 
- stack 0: 0x608
3551	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3552	 E1	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0xE60000011A005001D7000101F600020210FFDC026900000278008402970000
3553	 E2	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0xE60000011A005001D7000101F600020210FFDC026900000278008402970000
- stack 0: 0xF0
3554	 E4	SHR		 	 
- stack 1: 0x608
- stack 0: 0xE6
3555	 E5	JUMP		 	 
- stack 0: 0x608
3556	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x608
3557	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3558	 E8	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0xE60000011A005001D7000101F600020210FFDC026900000278008402970000
3559	 E9	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0xE60000011A005001D7000101F600020210FFDC026900000278008402970000
- stack 0: 0xE0
3560	 EB	SHR		 	 
- stack 1: 0x608
- stack 0: 0xE60000
3561	 EC	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0xE60000
- stack 0: 0xFFFF
3562	 EF	AND		 	 
- stack 1: 0x608
- stack 0: 0x0
3563	 F0	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x1
3564	 F2	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x0
3565	 F3	PUSH2	03A0	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x3A0
3566	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x608
3567	 F7	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3568	 F9	ADD		 	 
- stack 0: 0x60C
3569	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3570	 FB	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x11A005001D7000101F600020210FFDC02690000027800840297000002C90002
3571	 FC	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x11A005001D7000101F600020210FFDC02690000027800840297000002C90002
- stack 0: 0xF0
3572	 FE	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x11A
3573	 FF	JUMP		 	 
- stack 0: 0x60C
3574	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x60C
3575	 11B	PUSH2	0060	 	 
- stack 1: 0x60C
- stack 0: 0x60
3576	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x60C
- stack 0: 0x0
3577	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3578	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x0
3579	 125	PUSH2	03A0	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x3A0
3580	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x0
3581	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x60C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3582	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x0
3583	 12F	SUB		 	 
- stack 1: 0x60C
- stack 0: 0x0
3584	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x138
3585	 133	JUMPI		 	 
- stack 0: 0x60C
3586	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x60C
- stack 0: 0x152
3587	 137	JUMP		 	 
- stack 0: 0x60C
3588	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x60C
3589	 153	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3590	 155	ADD		 	 
- stack 0: 0x610
3591	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3592	 157	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x1D7000101F600020210FFDC02690000027800840297000002C9000200E60002
3593	 158	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x1D7000101F600020210FFDC02690000027800840297000002C9000200E60002
- stack 0: 0xF0
3594	 15A	SHR		 	 
- stack 1: 0x610
- stack 0: 0x1D7
3595	 15B	JUMP		 	 
- stack 0: 0x610
3596	 1D7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x610
3597	 1D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3598	 1D9	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x1D7000101F600020210FFDC02690000027800840297000002C9000200E60002
3599	 1DA	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x1D7000101F600020210FFDC02690000027800840297000002C9000200E60002
- stack 0: 0xE0
3600	 1DC	SHR		 	 
- stack 1: 0x610
- stack 0: 0x1D70001
3601	 1DD	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x1D70001
- stack 0: 0xFFFF
3602	 1E0	AND		 	 
- stack 1: 0x610
- stack 0: 0x1
3603	 1E1	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x1
3604	 1E3	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x1
3605	 1E4	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x80
3606	 1E7	MLOAD		 	  ;; # read from x4
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x0
3607	 1E8	ADD		 	  ;; # ADDI 4
- stack 1: 0x610
- stack 0: 0x1
3608	 1E9	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x80
3609	 1EC	MSTORE		 	  ;; # store to x4
- stack 0: 0x610
3610	 1ED	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3611	 1EF	ADD		 	 
- stack 0: 0x614
3612	 1F0	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3613	 1F1	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1F600020210FFDC02690000027800840297000002C9000200E6000201000012
3614	 1F2	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x1F600020210FFDC02690000027800840297000002C9000200E6000201000012
- stack 0: 0xF0
3615	 1F4	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1F6
3616	 1F5	JUMP		 	 
- stack 0: 0x614
3617	 1F6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x614
3618	 1F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3619	 1F8	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1F600020210FFDC02690000027800840297000002C9000200E6000201000012
3620	 1F9	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x1F600020210FFDC02690000027800840297000002C9000200E6000201000012
- stack 0: 0xE0
3621	 1FB	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1F60002
3622	 1FC	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x1F60002
- stack 0: 0xFFFF
3623	 1FF	AND		 	 
- stack 1: 0x614
- stack 0: 0x2
3624	 200	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0x1
3625	 202	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x2
3626	 203	PUSH2	00A0	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0xA0
3627	 206	MSTORE		 	  ;; # store to x5
- stack 0: 0x614
3628	 207	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3629	 209	ADD		 	 
- stack 0: 0x618
3630	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3631	 20B	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x210FFDC02690000027800840297000002C9000200E600020100001202E30028
3632	 20C	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x210FFDC02690000027800840297000002C9000200E600020100001202E30028
- stack 0: 0xF0
3633	 20E	SHR		 	 
- stack 1: 0x618
- stack 0: 0x210
3634	 20F	JUMP		 	 
- stack 0: 0x618
3635	 210	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x618
3636	 211	PUSH2	0080	 	 
- stack 1: 0x618
- stack 0: 0x80
3637	 214	MLOAD		 	  ;; # read from x4
- stack 1: 0x618
- stack 0: 0x1
3638	 215	PUSH4	FFFFFFFF	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3639	 21A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x618
- stack 0: 0x1
3640	 21B	PUSH2	00A0	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0xA0
3641	 21E	MLOAD		 	  ;; # read from x5
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x2
3642	 21F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x618
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3643	 224	AND		 	  ;; # mask to 32 bits
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x2
3644	 225	SUB		 	 
- stack 1: 0x618
- stack 0: 0x1
3645	 226	PUSH2	022E	 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x22E
3646	 229	JUMPI		 	 
- stack 0: 0x618
3647	 22E	JUMPDEST		 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 0: 0x618
3648	 22F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3649	 230	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x210FFDC02690000027800840297000002C9000200E600020100001202E30028
3650	 231	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x210FFDC02690000027800840297000002C9000200E600020100001202E30028
- stack 0: 0xE0
3651	 233	SHR		 	 
- stack 1: 0x618
- stack 0: 0x210FFDC
3652	 234	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x210FFDC
- stack 0: 0xFFFF
3653	 237	AND		 	 
- stack 1: 0x618
- stack 0: 0xFFDC
3654	 238	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0xFFDC
- stack 0: 0x1
3655	 23A	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
3656	 23B	ADD		 	 
- stack 0: 0x5F4
3657	 23C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFF
3658	 241	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5F4
3659	 242	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3660	 243	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x860000009500AC025200000252000000B4000100E60000011A005001D70001
3661	 244	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x860000009500AC025200000252000000B4000100E60000011A005001D70001
- stack 0: 0xF0
3662	 246	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x86
3663	 247	JUMP		 	 
- stack 0: 0x5F4
3664	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5F4
3665	 87	DUP1		 	 
- stack 1: 0x5F4
- stack 0: 0x5F4
3666	 88	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0x5F4
- stack 0: 0x20
3667	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F4
3668	 8C	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3669	 8E	ADD		 	 
- stack 0: 0x5F8
3670	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3671	 90	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x9500AC025200000252000000B4000100E60000011A005001D7000101F60002
3672	 91	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x9500AC025200000252000000B4000100E60000011A005001D7000101F60002
- stack 0: 0xF0
3673	 93	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x95
3674	 94	JUMP		 	 
- stack 0: 0x5F8
3675	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,656(ignore imm)
- stack 0: 0x5F8
3676	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3677	 97	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x9500AC025200000252000000B4000100E60000011A005001D7000101F60002
3678	 98	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x9500AC025200000252000000B4000100E60000011A005001D7000101F60002
- stack 0: 0xE0
3679	 9A	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x9500AC
3680	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x9500AC
- stack 0: 0xFFFF
3681	 9E	AND		 	 
- stack 1: 0x5F8
- stack 0: 0xAC
3682	 9F	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xAC
- stack 0: 0x1
3683	 A1	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xAC
3684	 A2	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0xAC
- stack 0: 0x20
3685	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F8
- stack 1: 0xAC
- stack 0: 0x5F4
3686	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F8
- stack 0: 0x6A0
3687	 A7	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0x6A0
- stack 0: 0x20
3688	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F8
3689	 AB	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3690	 AD	ADD		 	 
- stack 0: 0x5FC
3691	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3692	 AF	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x25200000252000000B4000100E60000011A005001D7000101F600020210FFDC
3693	 B0	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x25200000252000000B4000100E60000011A005001D7000101F600020210FFDC
- stack 0: 0xF0
3694	 B2	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x252
3695	 B3	JUMP		 	 
- stack 0: 0x5FC
3696	 252	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5FC
3697	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3698	 254	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x25200000252000000B4000100E60000011A005001D7000101F600020210FFDC
3699	 255	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x25200000252000000B4000100E60000011A005001D7000101F600020210FFDC
- stack 0: 0xE0
3700	 257	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x2520000
3701	 258	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x2520000
- stack 0: 0xFFFF
3702	 25B	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3703	 25C	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
3704	 25E	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3705	 25F	POP		 	 
- stack 0: 0x5FC
3706	 260	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3707	 262	ADD		 	 
- stack 0: 0x600
3708	 263	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3709	 264	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x252000000B4000100E60000011A005001D7000101F600020210FFDC02690000
3710	 265	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x252000000B4000100E60000011A005001D7000101F600020210FFDC02690000
- stack 0: 0xF0
3711	 267	SHR		 	 
- stack 1: 0x600
- stack 0: 0x252
3712	 268	JUMP		 	 
- stack 0: 0x600
3713	 252	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x600
3714	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3715	 254	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x252000000B4000100E60000011A005001D7000101F600020210FFDC02690000
3716	 255	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x252000000B4000100E60000011A005001D7000101F600020210FFDC02690000
- stack 0: 0xE0
3717	 257	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2520000
3718	 258	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x2520000
- stack 0: 0xFFFF
3719	 25B	AND		 	 
- stack 1: 0x600
- stack 0: 0x0
3720	 25C	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x1
3721	 25E	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x0
3722	 25F	POP		 	 
- stack 0: 0x600
3723	 260	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3724	 262	ADD		 	 
- stack 0: 0x604
3725	 263	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3726	 264	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0xB4000100E60000011A005001D7000101F600020210FFDC0269000002780084
3727	 265	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0xB4000100E60000011A005001D7000101F600020210FFDC0269000002780084
- stack 0: 0xF0
3728	 267	SHR		 	 
- stack 1: 0x604
- stack 0: 0xB4
3729	 268	JUMP		 	 
- stack 0: 0x604
3730	 B4	JUMPDEST		 ;; __riscvimpl_LBU_3_1_0	  ;; # instr: lbu gp,0(ra)(ignore imm)
- stack 0: 0x604
3731	 B5	PUSH2	0020	 	 
- stack 1: 0x604
- stack 0: 0x20
3732	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x604
- stack 0: 0x6A0
3733	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
3734	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0x6A0
3735	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0x604
3736	 C0	MLOAD		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0xB4000100E60000011A005001D7000101F600020210FFDC0269000002780084
3737	 C1	PUSH1	E0	 	 
- stack 3: 0x604
- stack 2: 0x6A0
- stack 1: 0xB4000100E60000011A005001D7000101F600020210FFDC0269000002780084
- stack 0: 0xE0
3738	 C3	SHR		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0xB40001
3739	 C4	PUSH2	FFFF	 	 
- stack 3: 0x604
- stack 2: 0x6A0
- stack 1: 0xB40001
- stack 0: 0xFFFF
3740	 C7	AND		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0x1
3741	 C8	PUSH1	01	 	 
- stack 3: 0x604
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1
3742	 CA	SIGNEXTEND		 	 
- stack 2: 0x604
- stack 1: 0x6A0
- stack 0: 0x1
3743	 CB	ADD		 	 
- stack 1: 0x604
- stack 0: 0x6A1
3744	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0x6A1
- stack 0: 0xFFFFFFFF
3745	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0x6A1
3746	 D2	PUSH1	03	 	 
- stack 2: 0x604
- stack 1: 0x6A1
- stack 0: 0x3
3747	 D4	XOR		 	 
- stack 1: 0x604
- stack 0: 0x6A2
3748	 D5	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0xFF000000000000000000000000000000000000000000000000000000000000
3749	 D6	PUSH1	F8	 	 
- stack 2: 0x604
- stack 1: 0xFF000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
3750	 D8	SHR		 	 
- stack 1: 0x604
- stack 0: 0x0
3751	 D9	PUSH2	0060	 	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x60
3752	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x604
3753	 DD	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3754	 DF	ADD		 	 
- stack 0: 0x608
3755	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3756	 E1	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0xE60000011A005001D7000101F600020210FFDC026900000278008402970000
3757	 E2	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0xE60000011A005001D7000101F600020210FFDC026900000278008402970000
- stack 0: 0xF0
3758	 E4	SHR		 	 
- stack 1: 0x608
- stack 0: 0xE6
3759	 E5	JUMP		 	 
- stack 0: 0x608
3760	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x608
3761	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3762	 E8	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0xE60000011A005001D7000101F600020210FFDC026900000278008402970000
3763	 E9	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0xE60000011A005001D7000101F600020210FFDC026900000278008402970000
- stack 0: 0xE0
3764	 EB	SHR		 	 
- stack 1: 0x608
- stack 0: 0xE60000
3765	 EC	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0xE60000
- stack 0: 0xFFFF
3766	 EF	AND		 	 
- stack 1: 0x608
- stack 0: 0x0
3767	 F0	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x1
3768	 F2	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x0
3769	 F3	PUSH2	03A0	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x3A0
3770	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x608
3771	 F7	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3772	 F9	ADD		 	 
- stack 0: 0x60C
3773	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3774	 FB	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x11A005001D7000101F600020210FFDC02690000027800840297000002C90002
3775	 FC	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x11A005001D7000101F600020210FFDC02690000027800840297000002C90002
- stack 0: 0xF0
3776	 FE	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x11A
3777	 FF	JUMP		 	 
- stack 0: 0x60C
3778	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,238(ignore imm)
- stack 0: 0x60C
3779	 11B	PUSH2	0060	 	 
- stack 1: 0x60C
- stack 0: 0x60
3780	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x60C
- stack 0: 0x0
3781	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3782	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x0
3783	 125	PUSH2	03A0	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x3A0
3784	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x0
3785	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x60C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3786	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x0
3787	 12F	SUB		 	 
- stack 1: 0x60C
- stack 0: 0x0
3788	 130	PUSH2	0138	 ;; _neq_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x138
3789	 133	JUMPI		 	 
- stack 0: 0x60C
3790	 134	PUSH2	0152	 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 1: 0x60C
- stack 0: 0x152
3791	 137	JUMP		 	 
- stack 0: 0x60C
3792	 152	JUMPDEST		 ;; _neq_after_75de773464ff137613e45d6040071307149c81afc176557bc26db6f7d1d6efc4	 
- stack 0: 0x60C
3793	 153	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3794	 155	ADD		 	 
- stack 0: 0x610
3795	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3796	 157	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x1D7000101F600020210FFDC02690000027800840297000002C9000200E60002
3797	 158	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x1D7000101F600020210FFDC02690000027800840297000002C9000200E60002
- stack 0: 0xF0
3798	 15A	SHR		 	 
- stack 1: 0x610
- stack 0: 0x1D7
3799	 15B	JUMP		 	 
- stack 0: 0x610
3800	 1D7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x610
3801	 1D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3802	 1D9	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x1D7000101F600020210FFDC02690000027800840297000002C9000200E60002
3803	 1DA	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x1D7000101F600020210FFDC02690000027800840297000002C9000200E60002
- stack 0: 0xE0
3804	 1DC	SHR		 	 
- stack 1: 0x610
- stack 0: 0x1D70001
3805	 1DD	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x1D70001
- stack 0: 0xFFFF
3806	 1E0	AND		 	 
- stack 1: 0x610
- stack 0: 0x1
3807	 1E1	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x1
3808	 1E3	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x1
3809	 1E4	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x80
3810	 1E7	MLOAD		 	  ;; # read from x4
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x1
3811	 1E8	ADD		 	  ;; # ADDI 4
- stack 1: 0x610
- stack 0: 0x2
3812	 1E9	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0x80
3813	 1EC	MSTORE		 	  ;; # store to x4
- stack 0: 0x610
3814	 1ED	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3815	 1EF	ADD		 	 
- stack 0: 0x614
3816	 1F0	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3817	 1F1	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1F600020210FFDC02690000027800840297000002C9000200E6000201000012
3818	 1F2	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x1F600020210FFDC02690000027800840297000002C9000200E6000201000012
- stack 0: 0xF0
3819	 1F4	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1F6
3820	 1F5	JUMP		 	 
- stack 0: 0x614
3821	 1F6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x614
3822	 1F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3823	 1F8	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1F600020210FFDC02690000027800840297000002C9000200E6000201000012
3824	 1F9	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x1F600020210FFDC02690000027800840297000002C9000200E6000201000012
- stack 0: 0xE0
3825	 1FB	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1F60002
3826	 1FC	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x1F60002
- stack 0: 0xFFFF
3827	 1FF	AND		 	 
- stack 1: 0x614
- stack 0: 0x2
3828	 200	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0x1
3829	 202	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x2
3830	 203	PUSH2	00A0	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0xA0
3831	 206	MSTORE		 	  ;; # store to x5
- stack 0: 0x614
3832	 207	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3833	 209	ADD		 	 
- stack 0: 0x618
3834	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3835	 20B	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x210FFDC02690000027800840297000002C9000200E600020100001202E30028
3836	 20C	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x210FFDC02690000027800840297000002C9000200E600020100001202E30028
- stack 0: 0xF0
3837	 20E	SHR		 	 
- stack 1: 0x618
- stack 0: 0x210
3838	 20F	JUMP		 	 
- stack 0: 0x618
3839	 210	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x618
3840	 211	PUSH2	0080	 	 
- stack 1: 0x618
- stack 0: 0x80
3841	 214	MLOAD		 	  ;; # read from x4
- stack 1: 0x618
- stack 0: 0x2
3842	 215	PUSH4	FFFFFFFF	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3843	 21A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x618
- stack 0: 0x2
3844	 21B	PUSH2	00A0	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0xA0
3845	 21E	MLOAD		 	  ;; # read from x5
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0x2
3846	 21F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x618
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3847	 224	AND		 	  ;; # mask to 32 bits
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0x2
3848	 225	SUB		 	 
- stack 1: 0x618
- stack 0: 0x0
3849	 226	PUSH2	022E	 ;; _neq_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x22E
3850	 229	JUMPI		 	 
- stack 0: 0x618
3851	 22A	PUSH2	0248	 ;; _neq_after_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 1: 0x618
- stack 0: 0x248
3852	 22D	JUMP		 	 
- stack 0: 0x618
3853	 248	JUMPDEST		 ;; _neq_after_92dc9f463c3fc203c8cd439cb03f64a76e49c52682c5f181c0220347bf48d33b	 
- stack 0: 0x618
3854	 249	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3855	 24B	ADD		 	 
- stack 0: 0x61C
3856	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3857	 24D	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x2690000027800840297000002C9000200E600020100001202E3002802690000
3858	 24E	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x2690000027800840297000002C9000200E600020100001202E3002802690000
- stack 0: 0xF0
3859	 250	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x269
3860	 251	JUMP		 	 
- stack 0: 0x61C
3861	 269	JUMPDEST		 ;; __riscvimpl_AUIPC_97010000	  ;; # instr: auipc gp,0x0(ignore imm)
- stack 0: 0x61C
3862	 26A	DUP1		 	 
- stack 1: 0x61C
- stack 0: 0x61C
3863	 26B	PUSH2	0060	 	 
- stack 2: 0x61C
- stack 1: 0x61C
- stack 0: 0x60
3864	 26E	MSTORE		 	  ;; # store to x3
- stack 0: 0x61C
3865	 26F	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3866	 271	ADD		 	 
- stack 0: 0x620
3867	 272	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3868	 273	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x27800840297000002C9000200E600020100001202E300280269000002780068
3869	 274	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x27800840297000002C9000200E600020100001202E300280269000002780068
- stack 0: 0xF0
3870	 276	SHR		 	 
- stack 1: 0x620
- stack 0: 0x278
3871	 277	JUMP		 	 
- stack 0: 0x620
3872	 278	JUMPDEST		 ;; __riscvimpl_ADDI_3_3_0	  ;; # instr: addi gp,gp,132(ignore imm)
- stack 0: 0x620
3873	 279	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3874	 27A	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x27800840297000002C9000200E600020100001202E300280269000002780068
3875	 27B	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x27800840297000002C9000200E600020100001202E300280269000002780068
- stack 0: 0xE0
3876	 27D	SHR		 	 
- stack 1: 0x620
- stack 0: 0x2780084
3877	 27E	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x2780084
- stack 0: 0xFFFF
3878	 281	AND		 	 
- stack 1: 0x620
- stack 0: 0x84
3879	 282	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x84
- stack 0: 0x1
3880	 284	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x84
3881	 285	PUSH2	0060	 	 
- stack 2: 0x620
- stack 1: 0x84
- stack 0: 0x60
3882	 288	MLOAD		 	  ;; # read from x3
- stack 2: 0x620
- stack 1: 0x84
- stack 0: 0x61C
3883	 289	ADD		 	  ;; # ADDI 3
- stack 1: 0x620
- stack 0: 0x6A0
3884	 28A	PUSH2	0060	 	 
- stack 2: 0x620
- stack 1: 0x6A0
- stack 0: 0x60
3885	 28D	MSTORE		 	  ;; # store to x3
- stack 0: 0x620
3886	 28E	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3887	 290	ADD		 	 
- stack 0: 0x624
3888	 291	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3889	 292	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x297000002C9000200E600020100001202E30028026900000278006802970000
3890	 293	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x297000002C9000200E600020100001202E30028026900000278006802970000
- stack 0: 0xF0
3891	 295	SHR		 	 
- stack 1: 0x624
- stack 0: 0x297
3892	 296	JUMP		 	 
- stack 0: 0x624
3893	 297	JUMPDEST		 ;; __riscvimpl_LBU_2_3_0	  ;; # instr: lbu sp,0(gp)(ignore imm)
- stack 0: 0x624
3894	 298	PUSH2	0060	 	 
- stack 1: 0x624
- stack 0: 0x60
3895	 29B	MLOAD		 	  ;; # read from x3
- stack 1: 0x624
- stack 0: 0x6A0
3896	 29C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
3897	 2A1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x6A0
3898	 2A2	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0x624
3899	 2A3	MLOAD		 	 
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0x297000002C9000200E600020100001202E30028026900000278006802970000
3900	 2A4	PUSH1	E0	 	 
- stack 3: 0x624
- stack 2: 0x6A0
- stack 1: 0x297000002C9000200E600020100001202E30028026900000278006802970000
- stack 0: 0xE0
3901	 2A6	SHR		 	 
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0x2970000
3902	 2A7	PUSH2	FFFF	 	 
- stack 3: 0x624
- stack 2: 0x6A0
- stack 1: 0x2970000
- stack 0: 0xFFFF
3903	 2AA	AND		 	 
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0x0
3904	 2AB	PUSH1	01	 	 
- stack 3: 0x624
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
3905	 2AD	SIGNEXTEND		 	 
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0x0
3906	 2AE	ADD		 	 
- stack 1: 0x624
- stack 0: 0x6A0
3907	 2AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
3908	 2B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x6A0
3909	 2B5	PUSH1	03	 	 
- stack 2: 0x624
- stack 1: 0x6A0
- stack 0: 0x3
3910	 2B7	XOR		 	 
- stack 1: 0x624
- stack 0: 0x6A3
3911	 2B8	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xFF00000000000000000000000000000000000000000000000000000000000000
3912	 2B9	PUSH1	F8	 	 
- stack 2: 0x624
- stack 1: 0xFF00000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
3913	 2BB	SHR		 	 
- stack 1: 0x624
- stack 0: 0xFF
3914	 2BC	PUSH2	0040	 	 
- stack 2: 0x624
- stack 1: 0xFF
- stack 0: 0x40
3915	 2BF	MSTORE		 	  ;; # store to x2
- stack 0: 0x624
3916	 2C0	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3917	 2C2	ADD		 	 
- stack 0: 0x628
3918	 2C3	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3919	 2C4	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x2C9000200E600020100001202E3002802690000027800680297000002520000
3920	 2C5	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x2C9000200E600020100001202E3002802690000027800680297000002520000
- stack 0: 0xF0
3921	 2C7	SHR		 	 
- stack 1: 0x628
- stack 0: 0x2C9
3922	 2C8	JUMP		 	 
- stack 0: 0x628
3923	 2C9	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,2(ignore imm)
- stack 0: 0x628
3924	 2CA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3925	 2CB	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x2C9000200E600020100001202E3002802690000027800680297000002520000
3926	 2CC	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x2C9000200E600020100001202E3002802690000027800680297000002520000
- stack 0: 0xE0
3927	 2CE	SHR		 	 
- stack 1: 0x628
- stack 0: 0x2C90002
3928	 2CF	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x2C90002
- stack 0: 0xFFFF
3929	 2D2	AND		 	 
- stack 1: 0x628
- stack 0: 0x2
3930	 2D3	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0x1
3931	 2D5	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x2
3932	 2D6	PUSH2	0040	 	 
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0x40
3933	 2D9	MSTORE		 	  ;; # store to x2
- stack 0: 0x628
3934	 2DA	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3935	 2DC	ADD		 	 
- stack 0: 0x62C
3936	 2DD	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3937	 2DE	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xE600020100001202E300280269000002780068029700000252000002C90002
3938	 2DF	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0xE600020100001202E300280269000002780068029700000252000002C90002
- stack 0: 0xF0
3939	 2E1	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xE6
3940	 2E2	JUMP		 	 
- stack 0: 0x62C
3941	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x62C
3942	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3943	 E8	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xE600020100001202E300280269000002780068029700000252000002C90002
3944	 E9	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0xE600020100001202E300280269000002780068029700000252000002C90002
- stack 0: 0xE0
3945	 EB	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xE60002
3946	 EC	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0xE60002
- stack 0: 0xFFFF
3947	 EF	AND		 	 
- stack 1: 0x62C
- stack 0: 0x2
3948	 F0	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0x1
3949	 F2	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x2
3950	 F3	PUSH2	03A0	 	 
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0x3A0
3951	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x62C
3952	 F7	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3953	 F9	ADD		 	 
- stack 0: 0x630
3954	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3955	 FB	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x100001202E300280269000002780068029700000252000002C9000200E60002
3956	 FC	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x100001202E300280269000002780068029700000252000002C9000200E60002
- stack 0: 0xF0
3957	 FE	SHR		 	 
- stack 1: 0x630
- stack 0: 0x100
3958	 FF	JUMP		 	 
- stack 0: 0x630
3959	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x630
3960	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3961	 102	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x100001202E300280269000002780068029700000252000002C9000200E60002
3962	 103	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x100001202E300280269000002780068029700000252000002C9000200E60002
- stack 0: 0xE0
3963	 105	SHR		 	 
- stack 1: 0x630
- stack 0: 0x1000012
3964	 106	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x1000012
- stack 0: 0xFFFF
3965	 109	AND		 	 
- stack 1: 0x630
- stack 0: 0x12
3966	 10A	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x12
- stack 0: 0x1
3967	 10C	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x12
3968	 10D	PUSH2	0380	 	 
- stack 2: 0x630
- stack 1: 0x12
- stack 0: 0x380
3969	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x630
3970	 111	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3971	 113	ADD		 	 
- stack 0: 0x634
3972	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3973	 115	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x2E300280269000002780068029700000252000002C9000200E6000201000013
3974	 116	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x2E300280269000002780068029700000252000002C9000200E6000201000013
- stack 0: 0xF0
3975	 118	SHR		 	 
- stack 1: 0x634
- stack 0: 0x2E3
3976	 119	JUMP		 	 
- stack 0: 0x634
3977	 2E3	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,28(ignore imm)
- stack 0: 0x634
3978	 2E4	PUSH2	0040	 	 
- stack 1: 0x634
- stack 0: 0x40
3979	 2E7	MLOAD		 	  ;; # read from x2
- stack 1: 0x634
- stack 0: 0x2
3980	 2E8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3981	 2ED	AND		 	  ;; # mask to 32 bits
- stack 1: 0x634
- stack 0: 0x2
3982	 2EE	PUSH2	03A0	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x3A0
3983	 2F1	MLOAD		 	  ;; # read from x29
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x2
3984	 2F2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x634
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3985	 2F7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x2
3986	 2F8	SUB		 	 
- stack 1: 0x634
- stack 0: 0x0
3987	 2F9	PUSH2	0301	 ;; _neq_30c3ec658fd0de21a9755c38cfb7ce8c44015706a3ce4cb85061e901f069ef51	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x301
3988	 2FC	JUMPI		 	 
- stack 0: 0x634
3989	 2FD	PUSH2	031B	 ;; _neq_after_30c3ec658fd0de21a9755c38cfb7ce8c44015706a3ce4cb85061e901f069ef51	 
- stack 1: 0x634
- stack 0: 0x31B
3990	 300	JUMP		 	 
- stack 0: 0x634
3991	 31B	JUMPDEST		 ;; _neq_after_30c3ec658fd0de21a9755c38cfb7ce8c44015706a3ce4cb85061e901f069ef51	 
- stack 0: 0x634
3992	 31C	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3993	 31E	ADD		 	 
- stack 0: 0x638
3994	 31F	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3995	 320	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x269000002780068029700000252000002C9000200E600020100001302E30008
3996	 321	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x269000002780068029700000252000002C9000200E600020100001302E30008
- stack 0: 0xF0
3997	 323	SHR		 	 
- stack 1: 0x638
- stack 0: 0x269
3998	 324	JUMP		 	 
- stack 0: 0x638
3999	 269	JUMPDEST		 ;; __riscvimpl_AUIPC_97010000	  ;; # instr: auipc gp,0x0(ignore imm)
- stack 0: 0x638
4000	 26A	DUP1		 	 
- stack 1: 0x638
- stack 0: 0x638
4001	 26B	PUSH2	0060	 	 
- stack 2: 0x638
- stack 1: 0x638
- stack 0: 0x60
4002	 26E	MSTORE		 	  ;; # store to x3
- stack 0: 0x638
4003	 26F	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
4004	 271	ADD		 	 
- stack 0: 0x63C
4005	 272	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
4006	 273	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x2780068029700000252000002C9000200E600020100001302E3000803250018
4007	 274	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x2780068029700000252000002C9000200E600020100001302E3000803250018
- stack 0: 0xF0
4008	 276	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x278
4009	 277	JUMP		 	 
- stack 0: 0x63C
4010	 278	JUMPDEST		 ;; __riscvimpl_ADDI_3_3_0	  ;; # instr: addi gp,gp,132(ignore imm)
- stack 0: 0x63C
4011	 279	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
4012	 27A	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x2780068029700000252000002C9000200E600020100001302E3000803250018
4013	 27B	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x2780068029700000252000002C9000200E600020100001302E3000803250018
- stack 0: 0xE0
4014	 27D	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x2780068
4015	 27E	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x2780068
- stack 0: 0xFFFF
4016	 281	AND		 	 
- stack 1: 0x63C
- stack 0: 0x68
4017	 282	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x68
- stack 0: 0x1
4018	 284	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x68
4019	 285	PUSH2	0060	 	 
- stack 2: 0x63C
- stack 1: 0x68
- stack 0: 0x60
4020	 288	MLOAD		 	  ;; # read from x3
- stack 2: 0x63C
- stack 1: 0x68
- stack 0: 0x638
4021	 289	ADD		 	  ;; # ADDI 3
- stack 1: 0x63C
- stack 0: 0x6A0
4022	 28A	PUSH2	0060	 	 
- stack 2: 0x63C
- stack 1: 0x6A0
- stack 0: 0x60
4023	 28D	MSTORE		 	  ;; # store to x3
- stack 0: 0x63C
4024	 28E	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
4025	 290	ADD		 	 
- stack 0: 0x640
4026	 291	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
4027	 292	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x29700000252000002C9000200E600020100001302E300080325001800210000
4028	 293	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x29700000252000002C9000200E600020100001302E300080325001800210000
- stack 0: 0xF0
4029	 295	SHR		 	 
- stack 1: 0x640
- stack 0: 0x297
4030	 296	JUMP		 	 
- stack 0: 0x640
4031	 297	JUMPDEST		 ;; __riscvimpl_LBU_2_3_0	  ;; # instr: lbu sp,0(gp)(ignore imm)
- stack 0: 0x640
4032	 298	PUSH2	0060	 	 
- stack 1: 0x640
- stack 0: 0x60
4033	 29B	MLOAD		 	  ;; # read from x3
- stack 1: 0x640
- stack 0: 0x6A0
4034	 29C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
4035	 2A1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x640
- stack 0: 0x6A0
4036	 2A2	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0x640
4037	 2A3	MLOAD		 	 
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0x29700000252000002C9000200E600020100001302E300080325001800210000
4038	 2A4	PUSH1	E0	 	 
- stack 3: 0x640
- stack 2: 0x6A0
- stack 1: 0x29700000252000002C9000200E600020100001302E300080325001800210000
- stack 0: 0xE0
4039	 2A6	SHR		 	 
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0x2970000
4040	 2A7	PUSH2	FFFF	 	 
- stack 3: 0x640
- stack 2: 0x6A0
- stack 1: 0x2970000
- stack 0: 0xFFFF
4041	 2AA	AND		 	 
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0x0
4042	 2AB	PUSH1	01	 	 
- stack 3: 0x640
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
4043	 2AD	SIGNEXTEND		 	 
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0x0
4044	 2AE	ADD		 	 
- stack 1: 0x640
- stack 0: 0x6A0
4045	 2AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
4046	 2B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x640
- stack 0: 0x6A0
4047	 2B5	PUSH1	03	 	 
- stack 2: 0x640
- stack 1: 0x6A0
- stack 0: 0x3
4048	 2B7	XOR		 	 
- stack 1: 0x640
- stack 0: 0x6A3
4049	 2B8	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xFF00000000000000000000000000000000000000000000000000000000000000
4050	 2B9	PUSH1	F8	 	 
- stack 2: 0x640
- stack 1: 0xFF00000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
4051	 2BB	SHR		 	 
- stack 1: 0x640
- stack 0: 0xFF
4052	 2BC	PUSH2	0040	 	 
- stack 2: 0x640
- stack 1: 0xFF
- stack 0: 0x40
4053	 2BF	MSTORE		 	  ;; # store to x2
- stack 0: 0x640
4054	 2C0	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
4055	 2C2	ADD		 	 
- stack 0: 0x644
4056	 2C3	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
4057	 2C4	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x252000002C9000200E600020100001302E30008032500180021000000340698
4058	 2C5	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x252000002C9000200E600020100001302E30008032500180021000000340698
- stack 0: 0xF0
4059	 2C7	SHR		 	 
- stack 1: 0x644
- stack 0: 0x252
4060	 2C8	JUMP		 	 
- stack 0: 0x644
4061	 252	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x644
4062	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
4063	 254	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x252000002C9000200E600020100001302E30008032500180021000000340698
4064	 255	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x252000002C9000200E600020100001302E30008032500180021000000340698
- stack 0: 0xE0
4065	 257	SHR		 	 
- stack 1: 0x644
- stack 0: 0x2520000
4066	 258	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x2520000
- stack 0: 0xFFFF
4067	 25B	AND		 	 
- stack 1: 0x644
- stack 0: 0x0
4068	 25C	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x1
4069	 25E	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x0
4070	 25F	POP		 	 
- stack 0: 0x644
4071	 260	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
4072	 262	ADD		 	 
- stack 0: 0x648
4073	 263	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
4074	 264	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x2C9000200E600020100001302E3000803250018002100000034069800530042
4075	 265	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x2C9000200E600020100001302E3000803250018002100000034069800530042
- stack 0: 0xF0
4076	 267	SHR		 	 
- stack 1: 0x648
- stack 0: 0x2C9
4077	 268	JUMP		 	 
- stack 0: 0x648
4078	 2C9	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,2(ignore imm)
- stack 0: 0x648
4079	 2CA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
4080	 2CB	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x2C9000200E600020100001302E3000803250018002100000034069800530042
4081	 2CC	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x2C9000200E600020100001302E3000803250018002100000034069800530042
- stack 0: 0xE0
4082	 2CE	SHR		 	 
- stack 1: 0x648
- stack 0: 0x2C90002
4083	 2CF	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x2C90002
- stack 0: 0xFFFF
4084	 2D2	AND		 	 
- stack 1: 0x648
- stack 0: 0x2
4085	 2D3	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x1
4086	 2D5	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x2
4087	 2D6	PUSH2	0040	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x40
4088	 2D9	MSTORE		 	  ;; # store to x2
- stack 0: 0x648
4089	 2DA	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
4090	 2DC	ADD		 	 
- stack 0: 0x64C
4091	 2DD	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
4092	 2DE	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xE600020100001302E300080325001800210000003406980053004200660000
4093	 2DF	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0xE600020100001302E300080325001800210000003406980053004200660000
- stack 0: 0xF0
4094	 2E1	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xE6
4095	 2E2	JUMP		 	 
- stack 0: 0x64C
4096	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x64C
4097	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
4098	 E8	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xE600020100001302E300080325001800210000003406980053004200660000
4099	 E9	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0xE600020100001302E300080325001800210000003406980053004200660000
- stack 0: 0xE0
4100	 EB	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xE60002
4101	 EC	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0xE60002
- stack 0: 0xFFFF
4102	 EF	AND		 	 
- stack 1: 0x64C
- stack 0: 0x2
4103	 F0	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x1
4104	 F2	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x2
4105	 F3	PUSH2	03A0	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x3A0
4106	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x64C
4107	 F7	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
4108	 F9	ADD		 	 
- stack 0: 0x650
4109	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
4110	 FB	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x100001302E30008032500180021000000340698005300420066000003650001
4111	 FC	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x100001302E30008032500180021000000340698005300420066000003650001
- stack 0: 0xF0
4112	 FE	SHR		 	 
- stack 1: 0x650
- stack 0: 0x100
4113	 FF	JUMP		 	 
- stack 0: 0x650
4114	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x650
4115	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
4116	 102	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x100001302E30008032500180021000000340698005300420066000003650001
4117	 103	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x100001302E30008032500180021000000340698005300420066000003650001
- stack 0: 0xE0
4118	 105	SHR		 	 
- stack 1: 0x650
- stack 0: 0x1000013
4119	 106	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x1000013
- stack 0: 0xFFFF
4120	 109	AND		 	 
- stack 1: 0x650
- stack 0: 0x13
4121	 10A	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x13
- stack 0: 0x1
4122	 10C	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x13
4123	 10D	PUSH2	0380	 	 
- stack 2: 0x650
- stack 1: 0x13
- stack 0: 0x380
4124	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x650
4125	 111	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
4126	 113	ADD		 	 
- stack 0: 0x654
4127	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
4128	 115	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x2E3000803250018002100000034069800530042006600000365000100210000
4129	 116	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x2E3000803250018002100000034069800530042006600000365000100210000
- stack 0: 0xF0
4130	 118	SHR		 	 
- stack 1: 0x654
- stack 0: 0x2E3
4131	 119	JUMP		 	 
- stack 0: 0x654
4132	 2E3	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,28(ignore imm)
- stack 0: 0x654
4133	 2E4	PUSH2	0040	 	 
- stack 1: 0x654
- stack 0: 0x40
4134	 2E7	MLOAD		 	  ;; # read from x2
- stack 1: 0x654
- stack 0: 0x2
4135	 2E8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4136	 2ED	AND		 	  ;; # mask to 32 bits
- stack 1: 0x654
- stack 0: 0x2
4137	 2EE	PUSH2	03A0	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x3A0
4138	 2F1	MLOAD		 	  ;; # read from x29
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x2
4139	 2F2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x654
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4140	 2F7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x2
4141	 2F8	SUB		 	 
- stack 1: 0x654
- stack 0: 0x0
4142	 2F9	PUSH2	0301	 ;; _neq_30c3ec658fd0de21a9755c38cfb7ce8c44015706a3ce4cb85061e901f069ef51	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0x301
4143	 2FC	JUMPI		 	 
- stack 0: 0x654
4144	 2FD	PUSH2	031B	 ;; _neq_after_30c3ec658fd0de21a9755c38cfb7ce8c44015706a3ce4cb85061e901f069ef51	 
- stack 1: 0x654
- stack 0: 0x31B
4145	 300	JUMP		 	 
- stack 0: 0x654
4146	 31B	JUMPDEST		 ;; _neq_after_30c3ec658fd0de21a9755c38cfb7ce8c44015706a3ce4cb85061e901f069ef51	 
- stack 0: 0x654
4147	 31C	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
4148	 31E	ADD		 	 
- stack 0: 0x658
4149	 31F	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
4150	 320	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x32500180021000000340698005300420066000003650001002100000034069C
4151	 321	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x32500180021000000340698005300420066000003650001002100000034069C
- stack 0: 0xF0
4152	 323	SHR		 	 
- stack 1: 0x658
- stack 0: 0x325
4153	 324	JUMP		 	 
- stack 0: 0x658
4154	 325	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x658
4155	 326	PUSH1	00	 	 
- stack 1: 0x658
- stack 0: 0x0
4156	 328	PUSH4	FFFFFFFF	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4157	 32D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x658
- stack 0: 0x0
4158	 32E	PUSH2	0380	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x380
4159	 331	MLOAD		 	  ;; # read from x28
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x13
4160	 332	PUSH4	FFFFFFFF	 	 
- stack 3: 0x658
- stack 2: 0x0
- stack 1: 0x13
- stack 0: 0xFFFFFFFF
4161	 337	AND		 	  ;; # mask to 32 bits
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x13
4162	 338	SUB		 	 
- stack 1: 0x658
- stack 0: 0x13
4163	 339	PUSH2	0341	 ;; _neq_51fd096f5c05af11a1c47e72be396c3b7e3e590dd4084965ebb8c4654f9b1783	 
- stack 2: 0x658
- stack 1: 0x13
- stack 0: 0x341
4164	 33C	JUMPI		 	 
- stack 0: 0x658
4165	 341	JUMPDEST		 ;; _neq_51fd096f5c05af11a1c47e72be396c3b7e3e590dd4084965ebb8c4654f9b1783	 
- stack 0: 0x658
4166	 342	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
4167	 343	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x32500180021000000340698005300420066000003650001002100000034069C
4168	 344	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x32500180021000000340698005300420066000003650001002100000034069C
- stack 0: 0xE0
4169	 346	SHR		 	 
- stack 1: 0x658
- stack 0: 0x3250018
4170	 347	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x3250018
- stack 0: 0xFFFF
4171	 34A	AND		 	 
- stack 1: 0x658
- stack 0: 0x18
4172	 34B	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x18
- stack 0: 0x1
4173	 34D	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x18
4174	 34E	ADD		 	 
- stack 0: 0x670
4175	 34F	PUSH4	FFFFFFFF	 	 
- stack 1: 0x670
- stack 0: 0xFFFFFFFF
4176	 354	AND		 	  ;; # mask to 32 bits
- stack 0: 0x670
4177	 355	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4178	 356	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x2100000034069C005300420066000003700000006600000000000000000000
4179	 357	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x2100000034069C005300420066000003700000006600000000000000000000
- stack 0: 0xF0
4180	 359	SHR		 	 
- stack 1: 0x670
- stack 0: 0x21
4181	 35A	JUMP		 	 
- stack 0: 0x670
4182	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x670
4183	 22	PUSH4	00000000	 	 
- stack 1: 0x670
- stack 0: 0x0
4184	 27	PUSH2	0160	 	 
- stack 2: 0x670
- stack 1: 0x0
- stack 0: 0x160
4185	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x670
4186	 2B	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4187	 2D	ADD		 	 
- stack 0: 0x674
4188	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4189	 2F	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x34069C0053004200660000037000000066000000000000000000006574796D
4190	 30	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x34069C0053004200660000037000000066000000000000000000006574796D
- stack 0: 0xF0
4191	 32	SHR		 	 
- stack 1: 0x674
- stack 0: 0x34
4192	 33	JUMP		 	 
- stack 0: 0x674
4193	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1680(ignore imm)
- stack 0: 0x674
4194	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
4195	 36	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x34069C0053004200660000037000000066000000000000000000006574796D
4196	 37	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x34069C0053004200660000037000000066000000000000000000006574796D
- stack 0: 0xE0
4197	 39	SHR		 	 
- stack 1: 0x674
- stack 0: 0x34069C
4198	 3A	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x34069C
- stack 0: 0xFFFF
4199	 3D	AND		 	 
- stack 1: 0x674
- stack 0: 0x69C
4200	 3E	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x69C
- stack 0: 0x1
4201	 40	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x69C
4202	 41	PUSH2	0160	 	 
- stack 2: 0x674
- stack 1: 0x69C
- stack 0: 0x160
4203	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x674
- stack 1: 0x69C
- stack 0: 0x0
4204	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x674
- stack 0: 0x69C
4205	 46	PUSH2	0160	 	 
- stack 2: 0x674
- stack 1: 0x69C
- stack 0: 0x160
4206	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x674
4207	 4A	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4208	 4C	ADD		 	 
- stack 0: 0x678
4209	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4210	 4E	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x53004200660000037000000066000000000000000000006574796D00007473
4211	 4F	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x53004200660000037000000066000000000000000000006574796D00007473
- stack 0: 0xF0
4212	 51	SHR		 	 
- stack 1: 0x678
- stack 0: 0x53
4213	 52	JUMP		 	 
- stack 0: 0x678
4214	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x678
4215	 54	PUSH4	00042000	 	 
- stack 1: 0x678
- stack 0: 0x42000
4216	 59	PUSH2	0140	 	 
- stack 2: 0x678
- stack 1: 0x42000
- stack 0: 0x140
4217	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x678
4218	 5D	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
4219	 5F	ADD		 	 
- stack 0: 0x67C
4220	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
4221	 61	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x660000037000000066000000000000000000006574796D0000747300525245
4222	 62	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x660000037000000066000000000000000000006574796D0000747300525245
- stack 0: 0xF0
4223	 64	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x66
4224	 65	JUMP		 	 
- stack 0: 0x67C
4225	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x67C
4226	 67	PUSH2	0140	 	 
- stack 1: 0x67C
- stack 0: 0x140
4227	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x67C
- stack 0: 0x42000
4228	 6B	PUSH2	0075	 ;; _ecall_271a17076626caebad8c68c040f0c50eefc34f94ec42d4bb722efaf91739e714	 
- stack 2: 0x67C
- stack 1: 0x42000
- stack 0: 0x75
4229	 6E	JUMPI		 	 
- stack 0: 0x67C
4230	 75	JUMPDEST		 ;; _ecall_271a17076626caebad8c68c040f0c50eefc34f94ec42d4bb722efaf91739e714	 
- stack 0: 0x67C
4231	 76	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4232	 78	PUSH2	0160	 	 
- stack 2: 0x67C
- stack 1: 0x4
- stack 0: 0x160
4233	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x67C
- stack 1: 0x4
- stack 0: 0x69C
4234	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x67C
4235	 7D	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4236	 7F	ADD		 	 
- stack 0: 0x680
4237	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4238	 81	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x37000000066000000000000000000006574796D000074730052524500004B4F
4239	 82	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x37000000066000000000000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
4240	 84	SHR		 	 
- stack 1: 0x680
- stack 0: 0x370
4241	 85	JUMP		 	 
- stack 0: 0x680
4242	 370	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x680
4243	 371	PUSH4	00000000	 	 
- stack 1: 0x680
- stack 0: 0x0
4244	 376	PUSH2	0140	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x140
4245	 379	MSTORE		 	  ;; # store to x10
- stack 0: 0x680
4246	 37A	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4247	 37C	ADD		 	 
- stack 0: 0x684
4248	 37D	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4249	 37E	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x66000000000000000000006574796D000074730052524500004B4F0FF000FF
4250	 37F	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x66000000000000000000006574796D000074730052524500004B4F0FF000FF
- stack 0: 0xF0
4251	 381	SHR		 	 
- stack 1: 0x684
- stack 0: 0x66
4252	 382	JUMP		 	 
- stack 0: 0x684
4253	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x684
4254	 67	PUSH2	0140	 	 
- stack 1: 0x684
- stack 0: 0x140
4255	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x684
- stack 0: 0x0
4256	 6B	PUSH2	0075	 ;; _ecall_271a17076626caebad8c68c040f0c50eefc34f94ec42d4bb722efaf91739e714	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x75
4257	 6E	JUMPI		 	 
- stack 0: 0x684
4258	 6F	PUSH1	20	 	 
- stack 1: 0x684
- stack 0: 0x20
4259	 71	PUSH2	0160	 	 
- stack 2: 0x684
- stack 1: 0x20
- stack 0: 0x160
4260	 74	RETURN		 	 
Final bytecode length; 1576
Returned: 000000000000000000000000000000000000000000000000000000000000069c
gasUsed : 15112
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424
** HOT: 428 - range: 428,42c,430,434,438,43c
** HOT: 440 - range: 440,444,448,44c,450,454
** HOT: 458 - range: 458,45c,460,464,468,46c
** HOT: 470 - range: 470,474,478,47c,480,484
** HOT: 488 - range: 488,48c,490,494,498,49c
** HOT: 4a0 - range: 4a0,4a4,4a8,4ac,4b0,4b4
** HOT: 4b8 - range: 4b8,4bc,4c0,4c4,4c8,4cc
** HOT: 4d0 - range: 4d0,4d4,4d8,4dc,4e0,4e4,4e8
** HOT: 4ec - range: 4ec,4f0,4f4,4f8,4fc,500,504
** HOT: 508 - range: 508,50c,510,514,518,51c,520,524
** HOT: 510 - range: 510,514,518,51c,520,524
** HOT: 528 - range: 528,52c,530
** HOT: 534 - range: 534,538,53c,540,544,548,54c,550,554
** HOT: 53c - range: 53c,540,544,548,54c,550,554
** HOT: 558 - range: 558,55c,560
** HOT: 564 - range: 564,568,56c,570,574,578,57c,580,584,588
** HOT: 56c - range: 56c,570,574,578,57c,580,584,588
** HOT: 58c - range: 58c,590,594
** HOT: 598 - range: 598,59c,5a0,5a4,5a8,5ac,5b0
** HOT: 5a0 - range: 5a0,5a4,5a8,5ac,5b0
** HOT: 5b4 - range: 5b4,5b8,5bc
** HOT: 5c0 - range: 5c0,5c4,5c8,5cc,5d0,5d4,5d8,5dc
** HOT: 5c8 - range: 5c8,5cc,5d0,5d4,5d8,5dc
** HOT: 5e0 - range: 5e0,5e4,5e8
** HOT: 5ec - range: 5ec,5f0,5f4,5f8,5fc,600,604,608,60c
** HOT: 5f4 - range: 5f4,5f8,5fc,600,604,608,60c
** HOT: 610 - range: 610,614,618
** HOT: 61c - range: 61c,620,624,628,62c,630,634
** HOT: 638 - range: 638,63c,640,644,648,64c,650,654
