Running in EVM:
0	 0	PUSH4	02C8	 	 
- stack 0: 0x2C8
1	 5	PUSH2	03CE	 ;; _rambegin	 
- stack 1: 0x2C8
- stack 0: 0x3CE
2	 8	PUSH1	01	 	 
- stack 2: 0x2C8
- stack 1: 0x3CE
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x2C8
- stack 0: 0x3CF
4	 B	PUSH2	0400	 	 
- stack 2: 0x2C8
- stack 1: 0x3CF
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x210000003406B0005300420066000000860000009502B000B4000000E900FF
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x210000003406B0005300420066000000860000009502B000B4000000E900FF
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406B0005300420066000000860000009502B000B4000000E900FF01030002
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x3406B0005300420066000000860000009502B000B4000000E900FF01030002
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1712(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406B0005300420066000000860000009502B000B4000000E900FF01030002
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x3406B0005300420066000000860000009502B000B4000000E900FF01030002
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x3406B0
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x3406B0
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x6B0
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x6B0
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x6B0
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x6B0
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x6B0
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x6B0
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x6B0
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x5300420066000000860000009502B000B4000000E900FF01030002011D0258
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x5300420066000000860000009502B000B4000000E900FF01030002011D0258
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x66000000860000009502B000B4000000E900FF01030002011D025800860000
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x66000000860000009502B000B4000000E900FF01030002011D025800860000
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_c15a32e90658a184e3afa33e8b3ef6b075f6591547b1a1621b5ff13b68c2c2b4	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_c15a32e90658a184e3afa33e8b3ef6b075f6591547b1a1621b5ff13b68c2c2b4	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x6B0
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x860000009502B000B4000000E900FF01030002011D02580086000000950298
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x860000009502B000B4000000E900FF01030002011D02580086000000950298
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	 
- stack 1: 0x410
- stack 0: 0x410
77	 88	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x410
- stack 0: 0x20
78	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 8C	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 8E	ADD		 	 
- stack 0: 0x414
81	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 90	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x9502B000B4000000E900FF01030002011D0258008600000095029800B40002
83	 91	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x9502B000B4000000E900FF01030002011D0258008600000095029800B40002
- stack 0: 0xF0
84	 93	SHR		 	 
- stack 1: 0x414
- stack 0: 0x95
85	 94	JUMP		 	 
- stack 0: 0x414
86	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x414
87	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 97	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x9502B000B4000000E900FF01030002011D0258008600000095029800B40002
89	 98	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x9502B000B4000000E900FF01030002011D0258008600000095029800B40002
- stack 0: 0xE0
90	 9A	SHR		 	 
- stack 1: 0x414
- stack 0: 0x9502B0
91	 9B	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x9502B0
- stack 0: 0xFFFF
92	 9E	AND		 	 
- stack 1: 0x414
- stack 0: 0x2B0
93	 9F	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x2B0
- stack 0: 0x1
94	 A1	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x2B0
95	 A2	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x2B0
- stack 0: 0x20
96	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0x2B0
- stack 0: 0x410
97	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x414
- stack 0: 0x6C0
98	 A7	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x6C0
- stack 0: 0x20
99	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
100	 AB	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
101	 AD	ADD		 	 
- stack 0: 0x418
102	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
103	 AF	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB4000000E900FF01030002011D0258008600000095029800B4000200E9FF00
104	 B0	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB4000000E900FF01030002011D0258008600000095029800B4000200E9FF00
- stack 0: 0xF0
105	 B2	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB4
106	 B3	JUMP		 	 
- stack 0: 0x418
107	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x418
108	 B5	PUSH2	0020	 	 
- stack 1: 0x418
- stack 0: 0x20
109	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x418
- stack 0: 0x6C0
110	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x418
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
111	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x418
- stack 0: 0x6C0
112	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x418
- stack 1: 0x6C0
- stack 0: 0x418
113	 C0	MLOAD		 	 
- stack 2: 0x418
- stack 1: 0x6C0
- stack 0: 0xB4000000E900FF01030002011D0258008600000095029800B4000200E9FF00
114	 C1	PUSH1	E0	 	 
- stack 3: 0x418
- stack 2: 0x6C0
- stack 1: 0xB4000000E900FF01030002011D0258008600000095029800B4000200E9FF00
- stack 0: 0xE0
115	 C3	SHR		 	 
- stack 2: 0x418
- stack 1: 0x6C0
- stack 0: 0xB40000
116	 C4	PUSH2	FFFF	 	 
- stack 3: 0x418
- stack 2: 0x6C0
- stack 1: 0xB40000
- stack 0: 0xFFFF
117	 C7	AND		 	 
- stack 2: 0x418
- stack 1: 0x6C0
- stack 0: 0x0
118	 C8	PUSH1	01	 	 
- stack 3: 0x418
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x1
119	 CA	SIGNEXTEND		 	 
- stack 2: 0x418
- stack 1: 0x6C0
- stack 0: 0x0
120	 CB	ADD		 	 
- stack 1: 0x418
- stack 0: 0x6C0
121	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x418
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
122	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x418
- stack 0: 0x6C0
123	 D2	PUSH1	02	 	 
- stack 2: 0x418
- stack 1: 0x6C0
- stack 0: 0x2
124	 D4	XOR		 	 
- stack 1: 0x418
- stack 0: 0x6C2
125	 D5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
126	 D6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
127	 D8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xFF
128	 D9	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0xFF
- stack 0: 0x1
129	 DB	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0xFF
130	 DC	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0xFF
- stack 0: 0x60
131	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
132	 E0	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
133	 E2	ADD		 	 
- stack 0: 0x41C
134	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
135	 E4	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xE900FF01030002011D0258008600000095029800B4000200E9FF0001030003
136	 E5	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xE900FF01030002011D0258008600000095029800B4000200E9FF0001030003
- stack 0: 0xF0
137	 E7	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xE9
138	 E8	JUMP		 	 
- stack 0: 0x41C
139	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x41C
140	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
141	 EB	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xE900FF01030002011D0258008600000095029800B4000200E9FF0001030003
142	 EC	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xE900FF01030002011D0258008600000095029800B4000200E9FF0001030003
- stack 0: 0xE0
143	 EE	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xE900FF
144	 EF	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xE900FF
- stack 0: 0xFFFF
145	 F2	AND		 	 
- stack 1: 0x41C
- stack 0: 0xFF
146	 F3	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0xFF
- stack 0: 0x1
147	 F5	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0xFF
148	 F6	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0xFF
- stack 0: 0x3A0
149	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
150	 FA	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
151	 FC	ADD		 	 
- stack 0: 0x420
152	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
153	 FE	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0x1030002011D0258008600000095029800B4000200E9FF0001030003011D0240
154	 FF	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0x1030002011D0258008600000095029800B4000200E9FF0001030003011D0240
- stack 0: 0xF0
155	 101	SHR		 	 
- stack 1: 0x420
- stack 0: 0x103
156	 102	JUMP		 	 
- stack 0: 0x420
157	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x420
158	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
159	 105	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0x1030002011D0258008600000095029800B4000200E9FF0001030003011D0240
160	 106	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0x1030002011D0258008600000095029800B4000200E9FF0001030003011D0240
- stack 0: 0xE0
161	 108	SHR		 	 
- stack 1: 0x420
- stack 0: 0x1030002
162	 109	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0x1030002
- stack 0: 0xFFFF
163	 10C	AND		 	 
- stack 1: 0x420
- stack 0: 0x2
164	 10D	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x1
165	 10F	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0x2
166	 110	PUSH2	0380	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x380
167	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x420
168	 114	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
169	 116	ADD		 	 
- stack 0: 0x424
170	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
171	 118	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x11D0258008600000095029800B4000200E9FF0001030003011D024000860000
172	 119	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x11D0258008600000095029800B4000200E9FF0001030003011D024000860000
- stack 0: 0xF0
173	 11B	SHR		 	 
- stack 1: 0x424
- stack 0: 0x11D
174	 11C	JUMP		 	 
- stack 0: 0x424
175	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x424
176	 11E	PUSH2	0060	 	 
- stack 1: 0x424
- stack 0: 0x60
177	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x424
- stack 0: 0xFF
178	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
179	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0xFF
180	 128	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0xFF
- stack 0: 0x3A0
181	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x424
- stack 1: 0xFF
- stack 0: 0xFF
182	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0xFF
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
183	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0xFF
- stack 0: 0xFF
184	 132	SUB		 	 
- stack 1: 0x424
- stack 0: 0x0
185	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x13B
186	 136	JUMPI		 	 
- stack 0: 0x424
187	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x424
- stack 0: 0x155
188	 13A	JUMP		 	 
- stack 0: 0x424
189	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x424
190	 156	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
191	 158	ADD		 	 
- stack 0: 0x428
192	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
193	 15A	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x8600000095029800B4000200E9FF0001030003011D02400086000000950280
194	 15B	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x8600000095029800B4000200E9FF0001030003011D02400086000000950280
- stack 0: 0xF0
195	 15D	SHR		 	 
- stack 1: 0x428
- stack 0: 0x86
196	 15E	JUMP		 	 
- stack 0: 0x428
197	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x428
198	 87	DUP1		 	 
- stack 1: 0x428
- stack 0: 0x428
199	 88	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x428
- stack 0: 0x20
200	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x428
201	 8C	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
202	 8E	ADD		 	 
- stack 0: 0x42C
203	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
204	 90	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x95029800B4000200E9FF0001030003011D0240008600000095028000B40004
205	 91	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x95029800B4000200E9FF0001030003011D0240008600000095028000B40004
- stack 0: 0xF0
206	 93	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x95
207	 94	JUMP		 	 
- stack 0: 0x42C
208	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x42C
209	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
210	 97	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x95029800B4000200E9FF0001030003011D0240008600000095028000B40004
211	 98	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0x95029800B4000200E9FF0001030003011D0240008600000095028000B40004
- stack 0: 0xE0
212	 9A	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x950298
213	 9B	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0x950298
- stack 0: 0xFFFF
214	 9E	AND		 	 
- stack 1: 0x42C
- stack 0: 0x298
215	 9F	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x298
- stack 0: 0x1
216	 A1	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x298
217	 A2	PUSH2	0020	 	 
- stack 2: 0x42C
- stack 1: 0x298
- stack 0: 0x20
218	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x42C
- stack 1: 0x298
- stack 0: 0x428
219	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x42C
- stack 0: 0x6C0
220	 A7	PUSH2	0020	 	 
- stack 2: 0x42C
- stack 1: 0x6C0
- stack 0: 0x20
221	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x42C
222	 AB	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
223	 AD	ADD		 	 
- stack 0: 0x430
224	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
225	 AF	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xB4000200E9FF0001030003011D0240008600000095028000B40004015F0001
226	 B0	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xB4000200E9FF0001030003011D0240008600000095028000B40004015F0001
- stack 0: 0xF0
227	 B2	SHR		 	 
- stack 1: 0x430
- stack 0: 0xB4
228	 B3	JUMP		 	 
- stack 0: 0x430
229	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x430
230	 B5	PUSH2	0020	 	 
- stack 1: 0x430
- stack 0: 0x20
231	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x430
- stack 0: 0x6C0
232	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x430
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
233	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x430
- stack 0: 0x6C0
234	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x430
- stack 1: 0x6C0
- stack 0: 0x430
235	 C0	MLOAD		 	 
- stack 2: 0x430
- stack 1: 0x6C0
- stack 0: 0xB4000200E9FF0001030003011D0240008600000095028000B40004015F0001
236	 C1	PUSH1	E0	 	 
- stack 3: 0x430
- stack 2: 0x6C0
- stack 1: 0xB4000200E9FF0001030003011D0240008600000095028000B40004015F0001
- stack 0: 0xE0
237	 C3	SHR		 	 
- stack 2: 0x430
- stack 1: 0x6C0
- stack 0: 0xB40002
238	 C4	PUSH2	FFFF	 	 
- stack 3: 0x430
- stack 2: 0x6C0
- stack 1: 0xB40002
- stack 0: 0xFFFF
239	 C7	AND		 	 
- stack 2: 0x430
- stack 1: 0x6C0
- stack 0: 0x2
240	 C8	PUSH1	01	 	 
- stack 3: 0x430
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0x1
241	 CA	SIGNEXTEND		 	 
- stack 2: 0x430
- stack 1: 0x6C0
- stack 0: 0x2
242	 CB	ADD		 	 
- stack 1: 0x430
- stack 0: 0x6C2
243	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x430
- stack 1: 0x6C2
- stack 0: 0xFFFFFFFF
244	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x430
- stack 0: 0x6C2
245	 D2	PUSH1	02	 	 
- stack 2: 0x430
- stack 1: 0x6C2
- stack 0: 0x2
246	 D4	XOR		 	 
- stack 1: 0x430
- stack 0: 0x6C0
247	 D5	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
248	 D6	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
- stack 0: 0xF0
249	 D8	SHR		 	 
- stack 1: 0x430
- stack 0: 0xFF00
250	 D9	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0xFF00
- stack 0: 0x1
251	 DB	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
252	 DC	PUSH2	0060	 	 
- stack 2: 0x430
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x60
253	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x430
254	 E0	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
255	 E2	ADD		 	 
- stack 0: 0x434
256	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
257	 E4	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xE9FF0001030003011D0240008600000095028000B40004015F00010172FFF0
258	 E5	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xE9FF0001030003011D0240008600000095028000B40004015F00010172FFF0
- stack 0: 0xF0
259	 E7	SHR		 	 
- stack 1: 0x434
- stack 0: 0xE9
260	 E8	JUMP		 	 
- stack 0: 0x434
261	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x434
262	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
263	 EB	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xE9FF0001030003011D0240008600000095028000B40004015F00010172FFF0
264	 EC	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xE9FF0001030003011D0240008600000095028000B40004015F00010172FFF0
- stack 0: 0xE0
265	 EE	SHR		 	 
- stack 1: 0x434
- stack 0: 0xE9FF00
266	 EF	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xE9FF00
- stack 0: 0xFFFF
267	 F2	AND		 	 
- stack 1: 0x434
- stack 0: 0xFF00
268	 F3	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0xFF00
- stack 0: 0x1
269	 F5	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
270	 F6	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
271	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x434
272	 FA	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
273	 FC	ADD		 	 
- stack 0: 0x438
274	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
275	 FE	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x1030003011D0240008600000095028000B40004015F00010172FFF001030004
276	 FF	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x1030003011D0240008600000095028000B40004015F00010172FFF001030004
- stack 0: 0xF0
277	 101	SHR		 	 
- stack 1: 0x438
- stack 0: 0x103
278	 102	JUMP		 	 
- stack 0: 0x438
279	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x438
280	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
281	 105	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x1030003011D0240008600000095028000B40004015F00010172FFF001030004
282	 106	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0x1030003011D0240008600000095028000B40004015F00010172FFF001030004
- stack 0: 0xE0
283	 108	SHR		 	 
- stack 1: 0x438
- stack 0: 0x1030003
284	 109	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0x1030003
- stack 0: 0xFFFF
285	 10C	AND		 	 
- stack 1: 0x438
- stack 0: 0x3
286	 10D	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x1
287	 10F	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x3
288	 110	PUSH2	0380	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x380
289	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x438
290	 114	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
291	 116	ADD		 	 
- stack 0: 0x43C
292	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
293	 118	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x11D0240008600000095028000B40004015F00010172FFF001030004011D0224
294	 119	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x11D0240008600000095028000B40004015F00010172FFF001030004011D0224
- stack 0: 0xF0
295	 11B	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x11D
296	 11C	JUMP		 	 
- stack 0: 0x43C
297	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x43C
298	 11E	PUSH2	0060	 	 
- stack 1: 0x43C
- stack 0: 0x60
299	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x43C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
300	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFFFFFFFF
301	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0xFFFFFF00
302	 128	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0xFFFFFF00
- stack 0: 0x3A0
303	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x43C
- stack 1: 0xFFFFFF00
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
304	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0xFFFFFF00
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFFFFFFFF
305	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0xFFFFFF00
- stack 0: 0xFFFFFF00
306	 132	SUB		 	 
- stack 1: 0x43C
- stack 0: 0x0
307	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x13B
308	 136	JUMPI		 	 
- stack 0: 0x43C
309	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x43C
- stack 0: 0x155
310	 13A	JUMP		 	 
- stack 0: 0x43C
311	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x43C
312	 156	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
313	 158	ADD		 	 
- stack 0: 0x440
314	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
315	 15A	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x8600000095028000B40004015F00010172FFF001030004011D022400860000
316	 15B	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x8600000095028000B40004015F00010172FFF001030004011D022400860000
- stack 0: 0xF0
317	 15D	SHR		 	 
- stack 1: 0x440
- stack 0: 0x86
318	 15E	JUMP		 	 
- stack 0: 0x440
319	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x440
320	 87	DUP1		 	 
- stack 1: 0x440
- stack 0: 0x440
321	 88	PUSH2	0020	 	 
- stack 2: 0x440
- stack 1: 0x440
- stack 0: 0x20
322	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x440
323	 8C	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
324	 8E	ADD		 	 
- stack 0: 0x444
325	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
326	 90	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x95028000B40004015F00010172FFF001030004011D02240086000000950264
327	 91	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x95028000B40004015F00010172FFF001030004011D02240086000000950264
- stack 0: 0xF0
328	 93	SHR		 	 
- stack 1: 0x444
- stack 0: 0x95
329	 94	JUMP		 	 
- stack 0: 0x444
330	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x444
331	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
332	 97	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x95028000B40004015F00010172FFF001030004011D02240086000000950264
333	 98	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0x95028000B40004015F00010172FFF001030004011D02240086000000950264
- stack 0: 0xE0
334	 9A	SHR		 	 
- stack 1: 0x444
- stack 0: 0x950280
335	 9B	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0x950280
- stack 0: 0xFFFF
336	 9E	AND		 	 
- stack 1: 0x444
- stack 0: 0x280
337	 9F	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x280
- stack 0: 0x1
338	 A1	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x280
339	 A2	PUSH2	0020	 	 
- stack 2: 0x444
- stack 1: 0x280
- stack 0: 0x20
340	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x444
- stack 1: 0x280
- stack 0: 0x440
341	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x444
- stack 0: 0x6C0
342	 A7	PUSH2	0020	 	 
- stack 2: 0x444
- stack 1: 0x6C0
- stack 0: 0x20
343	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x444
344	 AB	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
345	 AD	ADD		 	 
- stack 0: 0x448
346	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
347	 AF	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xB40004015F00010172FFF001030004011D0224008600000095026400B40006
348	 B0	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xB40004015F00010172FFF001030004011D0224008600000095026400B40006
- stack 0: 0xF0
349	 B2	SHR		 	 
- stack 1: 0x448
- stack 0: 0xB4
350	 B3	JUMP		 	 
- stack 0: 0x448
351	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x448
352	 B5	PUSH2	0020	 	 
- stack 1: 0x448
- stack 0: 0x20
353	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x448
- stack 0: 0x6C0
354	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
355	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0x6C0
356	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x448
- stack 1: 0x6C0
- stack 0: 0x448
357	 C0	MLOAD		 	 
- stack 2: 0x448
- stack 1: 0x6C0
- stack 0: 0xB40004015F00010172FFF001030004011D0224008600000095026400B40006
358	 C1	PUSH1	E0	 	 
- stack 3: 0x448
- stack 2: 0x6C0
- stack 1: 0xB40004015F00010172FFF001030004011D0224008600000095026400B40006
- stack 0: 0xE0
359	 C3	SHR		 	 
- stack 2: 0x448
- stack 1: 0x6C0
- stack 0: 0xB40004
360	 C4	PUSH2	FFFF	 	 
- stack 3: 0x448
- stack 2: 0x6C0
- stack 1: 0xB40004
- stack 0: 0xFFFF
361	 C7	AND		 	 
- stack 2: 0x448
- stack 1: 0x6C0
- stack 0: 0x4
362	 C8	PUSH1	01	 	 
- stack 3: 0x448
- stack 2: 0x6C0
- stack 1: 0x4
- stack 0: 0x1
363	 CA	SIGNEXTEND		 	 
- stack 2: 0x448
- stack 1: 0x6C0
- stack 0: 0x4
364	 CB	ADD		 	 
- stack 1: 0x448
- stack 0: 0x6C4
365	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0x6C4
- stack 0: 0xFFFFFFFF
366	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0x6C4
367	 D2	PUSH1	02	 	 
- stack 2: 0x448
- stack 1: 0x6C4
- stack 0: 0x2
368	 D4	XOR		 	 
- stack 1: 0x448
- stack 0: 0x6C6
369	 D5	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xFF0000000000000000000000000000000000000000000000000000000000000
370	 D6	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xFF0000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
371	 D8	SHR		 	 
- stack 1: 0x448
- stack 0: 0xFF0
372	 D9	PUSH1	01	 	 
- stack 2: 0x448
- stack 1: 0xFF0
- stack 0: 0x1
373	 DB	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0xFF0
374	 DC	PUSH2	0060	 	 
- stack 2: 0x448
- stack 1: 0xFF0
- stack 0: 0x60
375	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x448
376	 E0	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
377	 E2	ADD		 	 
- stack 0: 0x44C
378	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
379	 E4	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x15F00010172FFF001030004011D0224008600000095026400B400060191FFFF
380	 E5	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x15F00010172FFF001030004011D0224008600000095026400B400060191FFFF
- stack 0: 0xF0
381	 E7	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x15F
382	 E8	JUMP		 	 
- stack 0: 0x44C
383	 15F	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x44C
384	 160	PUSH4	00001000	 	 
- stack 1: 0x44C
- stack 0: 0x1000
385	 165	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0x1000
- stack 0: 0x3A0
386	 168	MSTORE		 	  ;; # store to x29
- stack 0: 0x44C
387	 169	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
388	 16B	ADD		 	 
- stack 0: 0x450
389	 16C	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
390	 16D	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x172FFF001030004011D0224008600000095026400B400060191FFFF0172000F
391	 16E	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x172FFF001030004011D0224008600000095026400B400060191FFFF0172000F
- stack 0: 0xF0
392	 170	SHR		 	 
- stack 1: 0x450
- stack 0: 0x172
393	 171	JUMP		 	 
- stack 0: 0x450
394	 172	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x450
395	 173	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
396	 174	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x172FFF001030004011D0224008600000095026400B400060191FFFF0172000F
397	 175	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x172FFF001030004011D0224008600000095026400B400060191FFFF0172000F
- stack 0: 0xE0
398	 177	SHR		 	 
- stack 1: 0x450
- stack 0: 0x172FFF0
399	 178	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x172FFF0
- stack 0: 0xFFFF
400	 17B	AND		 	 
- stack 1: 0x450
- stack 0: 0xFFF0
401	 17C	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0xFFF0
- stack 0: 0x1
402	 17E	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
403	 17F	PUSH2	03A0	 	 
- stack 2: 0x450
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
404	 182	MLOAD		 	  ;; # read from x29
- stack 2: 0x450
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x1000
405	 183	ADD		 	  ;; # ADDI 29
- stack 1: 0x450
- stack 0: 0xFF0
406	 184	PUSH2	03A0	 	 
- stack 2: 0x450
- stack 1: 0xFF0
- stack 0: 0x3A0
407	 187	MSTORE		 	  ;; # store to x29
- stack 0: 0x450
408	 188	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
409	 18A	ADD		 	 
- stack 0: 0x454
410	 18B	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
411	 18C	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x1030004011D0224008600000095026400B400060191FFFF0172000F01030005
412	 18D	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x1030004011D0224008600000095026400B400060191FFFF0172000F01030005
- stack 0: 0xF0
413	 18F	SHR		 	 
- stack 1: 0x454
- stack 0: 0x103
414	 190	JUMP		 	 
- stack 0: 0x454
415	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x454
416	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
417	 105	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x1030004011D0224008600000095026400B400060191FFFF0172000F01030005
418	 106	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0x1030004011D0224008600000095026400B400060191FFFF0172000F01030005
- stack 0: 0xE0
419	 108	SHR		 	 
- stack 1: 0x454
- stack 0: 0x1030004
420	 109	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0x1030004
- stack 0: 0xFFFF
421	 10C	AND		 	 
- stack 1: 0x454
- stack 0: 0x4
422	 10D	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0x4
- stack 0: 0x1
423	 10F	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0x4
424	 110	PUSH2	0380	 	 
- stack 2: 0x454
- stack 1: 0x4
- stack 0: 0x380
425	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x454
426	 114	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
427	 116	ADD		 	 
- stack 0: 0x458
428	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
429	 118	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x11D0224008600000095026400B400060191FFFF0172000F01030005011D0208
430	 119	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x11D0224008600000095026400B400060191FFFF0172000F01030005011D0208
- stack 0: 0xF0
431	 11B	SHR		 	 
- stack 1: 0x458
- stack 0: 0x11D
432	 11C	JUMP		 	 
- stack 0: 0x458
433	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x458
434	 11E	PUSH2	0060	 	 
- stack 1: 0x458
- stack 0: 0x60
435	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x458
- stack 0: 0xFF0
436	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x458
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
437	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x458
- stack 0: 0xFF0
438	 128	PUSH2	03A0	 	 
- stack 2: 0x458
- stack 1: 0xFF0
- stack 0: 0x3A0
439	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x458
- stack 1: 0xFF0
- stack 0: 0xFF0
440	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x458
- stack 2: 0xFF0
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
441	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x458
- stack 1: 0xFF0
- stack 0: 0xFF0
442	 132	SUB		 	 
- stack 1: 0x458
- stack 0: 0x0
443	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x458
- stack 1: 0x0
- stack 0: 0x13B
444	 136	JUMPI		 	 
- stack 0: 0x458
445	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x458
- stack 0: 0x155
446	 13A	JUMP		 	 
- stack 0: 0x458
447	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x458
448	 156	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
449	 158	ADD		 	 
- stack 0: 0x45C
450	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
451	 15A	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x8600000095026400B400060191FFFF0172000F01030005011D020800860000
452	 15B	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x8600000095026400B400060191FFFF0172000F01030005011D020800860000
- stack 0: 0xF0
453	 15D	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x86
454	 15E	JUMP		 	 
- stack 0: 0x45C
455	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x45C
456	 87	DUP1		 	 
- stack 1: 0x45C
- stack 0: 0x45C
457	 88	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0x45C
- stack 0: 0x20
458	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x45C
459	 8C	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
460	 8E	ADD		 	 
- stack 0: 0x460
461	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
462	 90	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x95026400B400060191FFFF0172000F01030005011D0208008600000095024E
463	 91	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x95026400B400060191FFFF0172000F01030005011D0208008600000095024E
- stack 0: 0xF0
464	 93	SHR		 	 
- stack 1: 0x460
- stack 0: 0x95
465	 94	JUMP		 	 
- stack 0: 0x460
466	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x460
467	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x460
- stack 0: 0x460
468	 97	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x95026400B400060191FFFF0172000F01030005011D0208008600000095024E
469	 98	PUSH1	E0	 	 
- stack 2: 0x460
- stack 1: 0x95026400B400060191FFFF0172000F01030005011D0208008600000095024E
- stack 0: 0xE0
470	 9A	SHR		 	 
- stack 1: 0x460
- stack 0: 0x950264
471	 9B	PUSH2	FFFF	 	 
- stack 2: 0x460
- stack 1: 0x950264
- stack 0: 0xFFFF
472	 9E	AND		 	 
- stack 1: 0x460
- stack 0: 0x264
473	 9F	PUSH1	01	 	 
- stack 2: 0x460
- stack 1: 0x264
- stack 0: 0x1
474	 A1	SIGNEXTEND		 	 
- stack 1: 0x460
- stack 0: 0x264
475	 A2	PUSH2	0020	 	 
- stack 2: 0x460
- stack 1: 0x264
- stack 0: 0x20
476	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x460
- stack 1: 0x264
- stack 0: 0x45C
477	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x460
- stack 0: 0x6C0
478	 A7	PUSH2	0020	 	 
- stack 2: 0x460
- stack 1: 0x6C0
- stack 0: 0x20
479	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x460
480	 AB	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
481	 AD	ADD		 	 
- stack 0: 0x464
482	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
483	 AF	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xB400060191FFFF0172000F01030005011D0208008600000095024E00B4FFFA
484	 B0	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xB400060191FFFF0172000F01030005011D0208008600000095024E00B4FFFA
- stack 0: 0xF0
485	 B2	SHR		 	 
- stack 1: 0x464
- stack 0: 0xB4
486	 B3	JUMP		 	 
- stack 0: 0x464
487	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x464
488	 B5	PUSH2	0020	 	 
- stack 1: 0x464
- stack 0: 0x20
489	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x464
- stack 0: 0x6C0
490	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x464
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
491	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x464
- stack 0: 0x6C0
492	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x464
- stack 1: 0x6C0
- stack 0: 0x464
493	 C0	MLOAD		 	 
- stack 2: 0x464
- stack 1: 0x6C0
- stack 0: 0xB400060191FFFF0172000F01030005011D0208008600000095024E00B4FFFA
494	 C1	PUSH1	E0	 	 
- stack 3: 0x464
- stack 2: 0x6C0
- stack 1: 0xB400060191FFFF0172000F01030005011D0208008600000095024E00B4FFFA
- stack 0: 0xE0
495	 C3	SHR		 	 
- stack 2: 0x464
- stack 1: 0x6C0
- stack 0: 0xB40006
496	 C4	PUSH2	FFFF	 	 
- stack 3: 0x464
- stack 2: 0x6C0
- stack 1: 0xB40006
- stack 0: 0xFFFF
497	 C7	AND		 	 
- stack 2: 0x464
- stack 1: 0x6C0
- stack 0: 0x6
498	 C8	PUSH1	01	 	 
- stack 3: 0x464
- stack 2: 0x6C0
- stack 1: 0x6
- stack 0: 0x1
499	 CA	SIGNEXTEND		 	 
- stack 2: 0x464
- stack 1: 0x6C0
- stack 0: 0x6
500	 CB	ADD		 	 
- stack 1: 0x464
- stack 0: 0x6C6
501	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x464
- stack 1: 0x6C6
- stack 0: 0xFFFFFFFF
502	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x464
- stack 0: 0x6C6
503	 D2	PUSH1	02	 	 
- stack 2: 0x464
- stack 1: 0x6C6
- stack 0: 0x2
504	 D4	XOR		 	 
- stack 1: 0x464
- stack 0: 0x6C4
505	 D5	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
506	 D6	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
507	 D8	SHR		 	 
- stack 1: 0x464
- stack 0: 0xF00F
508	 D9	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xF00F
- stack 0: 0x1
509	 DB	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
510	 DC	PUSH2	0060	 	 
- stack 2: 0x464
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
- stack 0: 0x60
511	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x464
512	 E0	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
513	 E2	ADD		 	 
- stack 0: 0x468
514	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
515	 E4	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x191FFFF0172000F01030005011D0208008600000095024E00B4FFFA00E900FF
516	 E5	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x191FFFF0172000F01030005011D0208008600000095024E00B4FFFA00E900FF
- stack 0: 0xF0
517	 E7	SHR		 	 
- stack 1: 0x468
- stack 0: 0x191
518	 E8	JUMP		 	 
- stack 0: 0x468
519	 191	JUMPDEST		 ;; __riscvimpl_LUI_fffffeb7	  ;; # instr: lui t4,0xfffff(ignore imm)
- stack 0: 0x468
520	 192	PUSH4	fffff000	 	 
- stack 1: 0x468
- stack 0: 0xFFFFF000
521	 197	PUSH2	03A0	 	 
- stack 2: 0x468
- stack 1: 0xFFFFF000
- stack 0: 0x3A0
522	 19A	MSTORE		 	  ;; # store to x29
- stack 0: 0x468
523	 19B	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
524	 19D	ADD		 	 
- stack 0: 0x46C
525	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
526	 19F	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x172000F01030005011D0208008600000095024E00B4FFFA00E900FF01030006
527	 1A0	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x172000F01030005011D0208008600000095024E00B4FFFA00E900FF01030006
- stack 0: 0xF0
528	 1A2	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x172
529	 1A3	JUMP		 	 
- stack 0: 0x46C
530	 172	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x46C
531	 173	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x46C
- stack 0: 0x46C
532	 174	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x172000F01030005011D0208008600000095024E00B4FFFA00E900FF01030006
533	 175	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0x172000F01030005011D0208008600000095024E00B4FFFA00E900FF01030006
- stack 0: 0xE0
534	 177	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x172000F
535	 178	PUSH2	FFFF	 	 
- stack 2: 0x46C
- stack 1: 0x172000F
- stack 0: 0xFFFF
536	 17B	AND		 	 
- stack 1: 0x46C
- stack 0: 0xF
537	 17C	PUSH1	01	 	 
- stack 2: 0x46C
- stack 1: 0xF
- stack 0: 0x1
538	 17E	SIGNEXTEND		 	 
- stack 1: 0x46C
- stack 0: 0xF
539	 17F	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0xF
- stack 0: 0x3A0
540	 182	MLOAD		 	  ;; # read from x29
- stack 2: 0x46C
- stack 1: 0xF
- stack 0: 0xFFFFF000
541	 183	ADD		 	  ;; # ADDI 29
- stack 1: 0x46C
- stack 0: 0xFFFFF00F
542	 184	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0xFFFFF00F
- stack 0: 0x3A0
543	 187	MSTORE		 	  ;; # store to x29
- stack 0: 0x46C
544	 188	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
545	 18A	ADD		 	 
- stack 0: 0x470
546	 18B	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
547	 18C	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x1030005011D0208008600000095024E00B4FFFA00E900FF01030006011D01F0
548	 18D	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x1030005011D0208008600000095024E00B4FFFA00E900FF01030006011D01F0
- stack 0: 0xF0
549	 18F	SHR		 	 
- stack 1: 0x470
- stack 0: 0x103
550	 190	JUMP		 	 
- stack 0: 0x470
551	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x470
552	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
553	 105	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x1030005011D0208008600000095024E00B4FFFA00E900FF01030006011D01F0
554	 106	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x1030005011D0208008600000095024E00B4FFFA00E900FF01030006011D01F0
- stack 0: 0xE0
555	 108	SHR		 	 
- stack 1: 0x470
- stack 0: 0x1030005
556	 109	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x1030005
- stack 0: 0xFFFF
557	 10C	AND		 	 
- stack 1: 0x470
- stack 0: 0x5
558	 10D	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x1
559	 10F	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0x5
560	 110	PUSH2	0380	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x380
561	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x470
562	 114	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
563	 116	ADD		 	 
- stack 0: 0x474
564	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
565	 118	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x11D0208008600000095024E00B4FFFA00E900FF01030006011D01F000860000
566	 119	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x11D0208008600000095024E00B4FFFA00E900FF01030006011D01F000860000
- stack 0: 0xF0
567	 11B	SHR		 	 
- stack 1: 0x474
- stack 0: 0x11D
568	 11C	JUMP		 	 
- stack 0: 0x474
569	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x474
570	 11E	PUSH2	0060	 	 
- stack 1: 0x474
- stack 0: 0x60
571	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x474
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
572	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x474
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
- stack 0: 0xFFFFFFFF
573	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x474
- stack 0: 0xFFFFF00F
574	 128	PUSH2	03A0	 	 
- stack 2: 0x474
- stack 1: 0xFFFFF00F
- stack 0: 0x3A0
575	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x474
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFF00F
576	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x474
- stack 2: 0xFFFFF00F
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFFFFF
577	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x474
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFF00F
578	 132	SUB		 	 
- stack 1: 0x474
- stack 0: 0x0
579	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x474
- stack 1: 0x0
- stack 0: 0x13B
580	 136	JUMPI		 	 
- stack 0: 0x474
581	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x474
- stack 0: 0x155
582	 13A	JUMP		 	 
- stack 0: 0x474
583	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x474
584	 156	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
585	 158	ADD		 	 
- stack 0: 0x478
586	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
587	 15A	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x8600000095024E00B4FFFA00E900FF01030006011D01F00086000000950236
588	 15B	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x8600000095024E00B4FFFA00E900FF01030006011D01F00086000000950236
- stack 0: 0xF0
589	 15D	SHR		 	 
- stack 1: 0x478
- stack 0: 0x86
590	 15E	JUMP		 	 
- stack 0: 0x478
591	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x478
592	 87	DUP1		 	 
- stack 1: 0x478
- stack 0: 0x478
593	 88	PUSH2	0020	 	 
- stack 2: 0x478
- stack 1: 0x478
- stack 0: 0x20
594	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x478
595	 8C	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
596	 8E	ADD		 	 
- stack 0: 0x47C
597	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
598	 90	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x95024E00B4FFFA00E900FF01030006011D01F0008600000095023600B4FFFC
599	 91	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x95024E00B4FFFA00E900FF01030006011D01F0008600000095023600B4FFFC
- stack 0: 0xF0
600	 93	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x95
601	 94	JUMP		 	 
- stack 0: 0x47C
602	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x47C
603	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
604	 97	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x95024E00B4FFFA00E900FF01030006011D01F0008600000095023600B4FFFC
605	 98	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0x95024E00B4FFFA00E900FF01030006011D01F0008600000095023600B4FFFC
- stack 0: 0xE0
606	 9A	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x95024E
607	 9B	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0x95024E
- stack 0: 0xFFFF
608	 9E	AND		 	 
- stack 1: 0x47C
- stack 0: 0x24E
609	 9F	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0x24E
- stack 0: 0x1
610	 A1	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0x24E
611	 A2	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0x24E
- stack 0: 0x20
612	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x47C
- stack 1: 0x24E
- stack 0: 0x478
613	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x47C
- stack 0: 0x6C6
614	 A7	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0x6C6
- stack 0: 0x20
615	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x47C
616	 AB	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
617	 AD	ADD		 	 
- stack 0: 0x480
618	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
619	 AF	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xB4FFFA00E900FF01030006011D01F0008600000095023600B4FFFC00E9FF00
620	 B0	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0xB4FFFA00E900FF01030006011D01F0008600000095023600B4FFFC00E9FF00
- stack 0: 0xF0
621	 B2	SHR		 	 
- stack 1: 0x480
- stack 0: 0xB4
622	 B3	JUMP		 	 
- stack 0: 0x480
623	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x480
624	 B5	PUSH2	0020	 	 
- stack 1: 0x480
- stack 0: 0x20
625	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x480
- stack 0: 0x6C6
626	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x480
- stack 1: 0x6C6
- stack 0: 0xFFFFFFFF
627	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x480
- stack 0: 0x6C6
628	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x480
- stack 1: 0x6C6
- stack 0: 0x480
629	 C0	MLOAD		 	 
- stack 2: 0x480
- stack 1: 0x6C6
- stack 0: 0xB4FFFA00E900FF01030006011D01F0008600000095023600B4FFFC00E9FF00
630	 C1	PUSH1	E0	 	 
- stack 3: 0x480
- stack 2: 0x6C6
- stack 1: 0xB4FFFA00E900FF01030006011D01F0008600000095023600B4FFFC00E9FF00
- stack 0: 0xE0
631	 C3	SHR		 	 
- stack 2: 0x480
- stack 1: 0x6C6
- stack 0: 0xB4FFFA
632	 C4	PUSH2	FFFF	 	 
- stack 3: 0x480
- stack 2: 0x6C6
- stack 1: 0xB4FFFA
- stack 0: 0xFFFF
633	 C7	AND		 	 
- stack 2: 0x480
- stack 1: 0x6C6
- stack 0: 0xFFFA
634	 C8	PUSH1	01	 	 
- stack 3: 0x480
- stack 2: 0x6C6
- stack 1: 0xFFFA
- stack 0: 0x1
635	 CA	SIGNEXTEND		 	 
- stack 2: 0x480
- stack 1: 0x6C6
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA
636	 CB	ADD		 	 
- stack 1: 0x480
- stack 0: 0x6C0
637	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x480
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
638	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x480
- stack 0: 0x6C0
639	 D2	PUSH1	02	 	 
- stack 2: 0x480
- stack 1: 0x6C0
- stack 0: 0x2
640	 D4	XOR		 	 
- stack 1: 0x480
- stack 0: 0x6C2
641	 D5	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
642	 D6	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
643	 D8	SHR		 	 
- stack 1: 0x480
- stack 0: 0xFF
644	 D9	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0xFF
- stack 0: 0x1
645	 DB	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0xFF
646	 DC	PUSH2	0060	 	 
- stack 2: 0x480
- stack 1: 0xFF
- stack 0: 0x60
647	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x480
648	 E0	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
649	 E2	ADD		 	 
- stack 0: 0x484
650	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
651	 E4	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0xE900FF01030006011D01F0008600000095023600B4FFFC00E9FF0001030007
652	 E5	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0xE900FF01030006011D01F0008600000095023600B4FFFC00E9FF0001030007
- stack 0: 0xF0
653	 E7	SHR		 	 
- stack 1: 0x484
- stack 0: 0xE9
654	 E8	JUMP		 	 
- stack 0: 0x484
655	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x484
656	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x484
- stack 0: 0x484
657	 EB	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0xE900FF01030006011D01F0008600000095023600B4FFFC00E9FF0001030007
658	 EC	PUSH1	E0	 	 
- stack 2: 0x484
- stack 1: 0xE900FF01030006011D01F0008600000095023600B4FFFC00E9FF0001030007
- stack 0: 0xE0
659	 EE	SHR		 	 
- stack 1: 0x484
- stack 0: 0xE900FF
660	 EF	PUSH2	FFFF	 	 
- stack 2: 0x484
- stack 1: 0xE900FF
- stack 0: 0xFFFF
661	 F2	AND		 	 
- stack 1: 0x484
- stack 0: 0xFF
662	 F3	PUSH1	01	 	 
- stack 2: 0x484
- stack 1: 0xFF
- stack 0: 0x1
663	 F5	SIGNEXTEND		 	 
- stack 1: 0x484
- stack 0: 0xFF
664	 F6	PUSH2	03A0	 	 
- stack 2: 0x484
- stack 1: 0xFF
- stack 0: 0x3A0
665	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x484
666	 FA	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
667	 FC	ADD		 	 
- stack 0: 0x488
668	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
669	 FE	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x1030006011D01F0008600000095023600B4FFFC00E9FF0001030007011D01D8
670	 FF	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x1030006011D01F0008600000095023600B4FFFC00E9FF0001030007011D01D8
- stack 0: 0xF0
671	 101	SHR		 	 
- stack 1: 0x488
- stack 0: 0x103
672	 102	JUMP		 	 
- stack 0: 0x488
673	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x488
674	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x488
- stack 0: 0x488
675	 105	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x1030006011D01F0008600000095023600B4FFFC00E9FF0001030007011D01D8
676	 106	PUSH1	E0	 	 
- stack 2: 0x488
- stack 1: 0x1030006011D01F0008600000095023600B4FFFC00E9FF0001030007011D01D8
- stack 0: 0xE0
677	 108	SHR		 	 
- stack 1: 0x488
- stack 0: 0x1030006
678	 109	PUSH2	FFFF	 	 
- stack 2: 0x488
- stack 1: 0x1030006
- stack 0: 0xFFFF
679	 10C	AND		 	 
- stack 1: 0x488
- stack 0: 0x6
680	 10D	PUSH1	01	 	 
- stack 2: 0x488
- stack 1: 0x6
- stack 0: 0x1
681	 10F	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0x6
682	 110	PUSH2	0380	 	 
- stack 2: 0x488
- stack 1: 0x6
- stack 0: 0x380
683	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x488
684	 114	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
685	 116	ADD		 	 
- stack 0: 0x48C
686	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
687	 118	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x11D01F0008600000095023600B4FFFC00E9FF0001030007011D01D800860000
688	 119	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x11D01F0008600000095023600B4FFFC00E9FF0001030007011D01D800860000
- stack 0: 0xF0
689	 11B	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x11D
690	 11C	JUMP		 	 
- stack 0: 0x48C
691	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x48C
692	 11E	PUSH2	0060	 	 
- stack 1: 0x48C
- stack 0: 0x60
693	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x48C
- stack 0: 0xFF
694	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x48C
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
695	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x48C
- stack 0: 0xFF
696	 128	PUSH2	03A0	 	 
- stack 2: 0x48C
- stack 1: 0xFF
- stack 0: 0x3A0
697	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x48C
- stack 1: 0xFF
- stack 0: 0xFF
698	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x48C
- stack 2: 0xFF
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
699	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x48C
- stack 1: 0xFF
- stack 0: 0xFF
700	 132	SUB		 	 
- stack 1: 0x48C
- stack 0: 0x0
701	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x48C
- stack 1: 0x0
- stack 0: 0x13B
702	 136	JUMPI		 	 
- stack 0: 0x48C
703	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x48C
- stack 0: 0x155
704	 13A	JUMP		 	 
- stack 0: 0x48C
705	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x48C
706	 156	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
707	 158	ADD		 	 
- stack 0: 0x490
708	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
709	 15A	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x8600000095023600B4FFFC00E9FF0001030007011D01D8008600000095021E
710	 15B	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x8600000095023600B4FFFC00E9FF0001030007011D01D8008600000095021E
- stack 0: 0xF0
711	 15D	SHR		 	 
- stack 1: 0x490
- stack 0: 0x86
712	 15E	JUMP		 	 
- stack 0: 0x490
713	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x490
714	 87	DUP1		 	 
- stack 1: 0x490
- stack 0: 0x490
715	 88	PUSH2	0020	 	 
- stack 2: 0x490
- stack 1: 0x490
- stack 0: 0x20
716	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x490
717	 8C	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
718	 8E	ADD		 	 
- stack 0: 0x494
719	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
720	 90	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x95023600B4FFFC00E9FF0001030007011D01D8008600000095021E00B4FFFE
721	 91	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x95023600B4FFFC00E9FF0001030007011D01D8008600000095021E00B4FFFE
- stack 0: 0xF0
722	 93	SHR		 	 
- stack 1: 0x494
- stack 0: 0x95
723	 94	JUMP		 	 
- stack 0: 0x494
724	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x494
725	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
726	 97	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x95023600B4FFFC00E9FF0001030007011D01D8008600000095021E00B4FFFE
727	 98	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0x95023600B4FFFC00E9FF0001030007011D01D8008600000095021E00B4FFFE
- stack 0: 0xE0
728	 9A	SHR		 	 
- stack 1: 0x494
- stack 0: 0x950236
729	 9B	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0x950236
- stack 0: 0xFFFF
730	 9E	AND		 	 
- stack 1: 0x494
- stack 0: 0x236
731	 9F	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x236
- stack 0: 0x1
732	 A1	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x236
733	 A2	PUSH2	0020	 	 
- stack 2: 0x494
- stack 1: 0x236
- stack 0: 0x20
734	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x494
- stack 1: 0x236
- stack 0: 0x490
735	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x494
- stack 0: 0x6C6
736	 A7	PUSH2	0020	 	 
- stack 2: 0x494
- stack 1: 0x6C6
- stack 0: 0x20
737	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x494
738	 AB	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
739	 AD	ADD		 	 
- stack 0: 0x498
740	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
741	 AF	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xB4FFFC00E9FF0001030007011D01D8008600000095021E00B4FFFE015F0001
742	 B0	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xB4FFFC00E9FF0001030007011D01D8008600000095021E00B4FFFE015F0001
- stack 0: 0xF0
743	 B2	SHR		 	 
- stack 1: 0x498
- stack 0: 0xB4
744	 B3	JUMP		 	 
- stack 0: 0x498
745	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x498
746	 B5	PUSH2	0020	 	 
- stack 1: 0x498
- stack 0: 0x20
747	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x498
- stack 0: 0x6C6
748	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x498
- stack 1: 0x6C6
- stack 0: 0xFFFFFFFF
749	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x498
- stack 0: 0x6C6
750	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x498
- stack 1: 0x6C6
- stack 0: 0x498
751	 C0	MLOAD		 	 
- stack 2: 0x498
- stack 1: 0x6C6
- stack 0: 0xB4FFFC00E9FF0001030007011D01D8008600000095021E00B4FFFE015F0001
752	 C1	PUSH1	E0	 	 
- stack 3: 0x498
- stack 2: 0x6C6
- stack 1: 0xB4FFFC00E9FF0001030007011D01D8008600000095021E00B4FFFE015F0001
- stack 0: 0xE0
753	 C3	SHR		 	 
- stack 2: 0x498
- stack 1: 0x6C6
- stack 0: 0xB4FFFC
754	 C4	PUSH2	FFFF	 	 
- stack 3: 0x498
- stack 2: 0x6C6
- stack 1: 0xB4FFFC
- stack 0: 0xFFFF
755	 C7	AND		 	 
- stack 2: 0x498
- stack 1: 0x6C6
- stack 0: 0xFFFC
756	 C8	PUSH1	01	 	 
- stack 3: 0x498
- stack 2: 0x6C6
- stack 1: 0xFFFC
- stack 0: 0x1
757	 CA	SIGNEXTEND		 	 
- stack 2: 0x498
- stack 1: 0x6C6
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
758	 CB	ADD		 	 
- stack 1: 0x498
- stack 0: 0x6C2
759	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x498
- stack 1: 0x6C2
- stack 0: 0xFFFFFFFF
760	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x498
- stack 0: 0x6C2
761	 D2	PUSH1	02	 	 
- stack 2: 0x498
- stack 1: 0x6C2
- stack 0: 0x2
762	 D4	XOR		 	 
- stack 1: 0x498
- stack 0: 0x6C0
763	 D5	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
764	 D6	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
- stack 0: 0xF0
765	 D8	SHR		 	 
- stack 1: 0x498
- stack 0: 0xFF00
766	 D9	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0xFF00
- stack 0: 0x1
767	 DB	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
768	 DC	PUSH2	0060	 	 
- stack 2: 0x498
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x60
769	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x498
770	 E0	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
771	 E2	ADD		 	 
- stack 0: 0x49C
772	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
773	 E4	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0xE9FF0001030007011D01D8008600000095021E00B4FFFE015F00010172FFF0
774	 E5	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0xE9FF0001030007011D01D8008600000095021E00B4FFFE015F00010172FFF0
- stack 0: 0xF0
775	 E7	SHR		 	 
- stack 1: 0x49C
- stack 0: 0xE9
776	 E8	JUMP		 	 
- stack 0: 0x49C
777	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x49C
778	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x49C
- stack 0: 0x49C
779	 EB	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0xE9FF0001030007011D01D8008600000095021E00B4FFFE015F00010172FFF0
780	 EC	PUSH1	E0	 	 
- stack 2: 0x49C
- stack 1: 0xE9FF0001030007011D01D8008600000095021E00B4FFFE015F00010172FFF0
- stack 0: 0xE0
781	 EE	SHR		 	 
- stack 1: 0x49C
- stack 0: 0xE9FF00
782	 EF	PUSH2	FFFF	 	 
- stack 2: 0x49C
- stack 1: 0xE9FF00
- stack 0: 0xFFFF
783	 F2	AND		 	 
- stack 1: 0x49C
- stack 0: 0xFF00
784	 F3	PUSH1	01	 	 
- stack 2: 0x49C
- stack 1: 0xFF00
- stack 0: 0x1
785	 F5	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
786	 F6	PUSH2	03A0	 	 
- stack 2: 0x49C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
787	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x49C
788	 FA	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
789	 FC	ADD		 	 
- stack 0: 0x4A0
790	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
791	 FE	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x1030007011D01D8008600000095021E00B4FFFE015F00010172FFF001030008
792	 FF	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x1030007011D01D8008600000095021E00B4FFFE015F00010172FFF001030008
- stack 0: 0xF0
793	 101	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x103
794	 102	JUMP		 	 
- stack 0: 0x4A0
795	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4A0
796	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
797	 105	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x1030007011D01D8008600000095021E00B4FFFE015F00010172FFF001030008
798	 106	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0x1030007011D01D8008600000095021E00B4FFFE015F00010172FFF001030008
- stack 0: 0xE0
799	 108	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x1030007
800	 109	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x1030007
- stack 0: 0xFFFF
801	 10C	AND		 	 
- stack 1: 0x4A0
- stack 0: 0x7
802	 10D	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0x7
- stack 0: 0x1
803	 10F	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0x7
804	 110	PUSH2	0380	 	 
- stack 2: 0x4A0
- stack 1: 0x7
- stack 0: 0x380
805	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x4A0
806	 114	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
807	 116	ADD		 	 
- stack 0: 0x4A4
808	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
809	 118	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x11D01D8008600000095021E00B4FFFE015F00010172FFF001030008011D01BC
810	 119	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x11D01D8008600000095021E00B4FFFE015F00010172FFF001030008011D01BC
- stack 0: 0xF0
811	 11B	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x11D
812	 11C	JUMP		 	 
- stack 0: 0x4A4
813	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x4A4
814	 11E	PUSH2	0060	 	 
- stack 1: 0x4A4
- stack 0: 0x60
815	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
816	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFFFFFFFF
817	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A4
- stack 0: 0xFFFFFF00
818	 128	PUSH2	03A0	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFF00
- stack 0: 0x3A0
819	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x4A4
- stack 1: 0xFFFFFF00
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
820	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4A4
- stack 2: 0xFFFFFF00
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFFFFFFFF
821	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4A4
- stack 1: 0xFFFFFF00
- stack 0: 0xFFFFFF00
822	 132	SUB		 	 
- stack 1: 0x4A4
- stack 0: 0x0
823	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x4A4
- stack 1: 0x0
- stack 0: 0x13B
824	 136	JUMPI		 	 
- stack 0: 0x4A4
825	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x4A4
- stack 0: 0x155
826	 13A	JUMP		 	 
- stack 0: 0x4A4
827	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x4A4
828	 156	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
829	 158	ADD		 	 
- stack 0: 0x4A8
830	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
831	 15A	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x8600000095021E00B4FFFE015F00010172FFF001030008011D01BC00860000
832	 15B	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x8600000095021E00B4FFFE015F00010172FFF001030008011D01BC00860000
- stack 0: 0xF0
833	 15D	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x86
834	 15E	JUMP		 	 
- stack 0: 0x4A8
835	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4A8
836	 87	DUP1		 	 
- stack 1: 0x4A8
- stack 0: 0x4A8
837	 88	PUSH2	0020	 	 
- stack 2: 0x4A8
- stack 1: 0x4A8
- stack 0: 0x20
838	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A8
839	 8C	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
840	 8E	ADD		 	 
- stack 0: 0x4AC
841	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
842	 90	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x95021E00B4FFFE015F00010172FFF001030008011D01BC0086000000950202
843	 91	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x95021E00B4FFFE015F00010172FFF001030008011D01BC0086000000950202
- stack 0: 0xF0
844	 93	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x95
845	 94	JUMP		 	 
- stack 0: 0x4AC
846	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x4AC
847	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
848	 97	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x95021E00B4FFFE015F00010172FFF001030008011D01BC0086000000950202
849	 98	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0x95021E00B4FFFE015F00010172FFF001030008011D01BC0086000000950202
- stack 0: 0xE0
850	 9A	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x95021E
851	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0x95021E
- stack 0: 0xFFFF
852	 9E	AND		 	 
- stack 1: 0x4AC
- stack 0: 0x21E
853	 9F	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0x21E
- stack 0: 0x1
854	 A1	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0x21E
855	 A2	PUSH2	0020	 	 
- stack 2: 0x4AC
- stack 1: 0x21E
- stack 0: 0x20
856	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4AC
- stack 1: 0x21E
- stack 0: 0x4A8
857	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4AC
- stack 0: 0x6C6
858	 A7	PUSH2	0020	 	 
- stack 2: 0x4AC
- stack 1: 0x6C6
- stack 0: 0x20
859	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4AC
860	 AB	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
861	 AD	ADD		 	 
- stack 0: 0x4B0
862	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
863	 AF	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xB4FFFE015F00010172FFF001030008011D01BC008600000095020200B40000
864	 B0	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0xB4FFFE015F00010172FFF001030008011D01BC008600000095020200B40000
- stack 0: 0xF0
865	 B2	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xB4
866	 B3	JUMP		 	 
- stack 0: 0x4B0
867	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x4B0
868	 B5	PUSH2	0020	 	 
- stack 1: 0x4B0
- stack 0: 0x20
869	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4B0
- stack 0: 0x6C6
870	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x6C6
- stack 0: 0xFFFFFFFF
871	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B0
- stack 0: 0x6C6
872	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4B0
- stack 1: 0x6C6
- stack 0: 0x4B0
873	 C0	MLOAD		 	 
- stack 2: 0x4B0
- stack 1: 0x6C6
- stack 0: 0xB4FFFE015F00010172FFF001030008011D01BC008600000095020200B40000
874	 C1	PUSH1	E0	 	 
- stack 3: 0x4B0
- stack 2: 0x6C6
- stack 1: 0xB4FFFE015F00010172FFF001030008011D01BC008600000095020200B40000
- stack 0: 0xE0
875	 C3	SHR		 	 
- stack 2: 0x4B0
- stack 1: 0x6C6
- stack 0: 0xB4FFFE
876	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4B0
- stack 2: 0x6C6
- stack 1: 0xB4FFFE
- stack 0: 0xFFFF
877	 C7	AND		 	 
- stack 2: 0x4B0
- stack 1: 0x6C6
- stack 0: 0xFFFE
878	 C8	PUSH1	01	 	 
- stack 3: 0x4B0
- stack 2: 0x6C6
- stack 1: 0xFFFE
- stack 0: 0x1
879	 CA	SIGNEXTEND		 	 
- stack 2: 0x4B0
- stack 1: 0x6C6
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
880	 CB	ADD		 	 
- stack 1: 0x4B0
- stack 0: 0x6C4
881	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x6C4
- stack 0: 0xFFFFFFFF
882	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B0
- stack 0: 0x6C4
883	 D2	PUSH1	02	 	 
- stack 2: 0x4B0
- stack 1: 0x6C4
- stack 0: 0x2
884	 D4	XOR		 	 
- stack 1: 0x4B0
- stack 0: 0x6C6
885	 D5	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xFF0000000000000000000000000000000000000000000000000000000000000
886	 D6	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0xFF0000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
887	 D8	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xFF0
888	 D9	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0xFF0
- stack 0: 0x1
889	 DB	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0xFF0
890	 DC	PUSH2	0060	 	 
- stack 2: 0x4B0
- stack 1: 0xFF0
- stack 0: 0x60
891	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x4B0
892	 E0	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
893	 E2	ADD		 	 
- stack 0: 0x4B4
894	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
895	 E4	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x15F00010172FFF001030008011D01BC008600000095020200B400000191FFFF
896	 E5	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x15F00010172FFF001030008011D01BC008600000095020200B400000191FFFF
- stack 0: 0xF0
897	 E7	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x15F
898	 E8	JUMP		 	 
- stack 0: 0x4B4
899	 15F	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x4B4
900	 160	PUSH4	00001000	 	 
- stack 1: 0x4B4
- stack 0: 0x1000
901	 165	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0x1000
- stack 0: 0x3A0
902	 168	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B4
903	 169	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
904	 16B	ADD		 	 
- stack 0: 0x4B8
905	 16C	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
906	 16D	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x172FFF001030008011D01BC008600000095020200B400000191FFFF0172000F
907	 16E	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x172FFF001030008011D01BC008600000095020200B400000191FFFF0172000F
- stack 0: 0xF0
908	 170	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x172
909	 171	JUMP		 	 
- stack 0: 0x4B8
910	 172	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x4B8
911	 173	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
912	 174	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x172FFF001030008011D01BC008600000095020200B400000191FFFF0172000F
913	 175	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0x172FFF001030008011D01BC008600000095020200B400000191FFFF0172000F
- stack 0: 0xE0
914	 177	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x172FFF0
915	 178	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x172FFF0
- stack 0: 0xFFFF
916	 17B	AND		 	 
- stack 1: 0x4B8
- stack 0: 0xFFF0
917	 17C	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0xFFF0
- stack 0: 0x1
918	 17E	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
919	 17F	PUSH2	03A0	 	 
- stack 2: 0x4B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
920	 182	MLOAD		 	  ;; # read from x29
- stack 2: 0x4B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x1000
921	 183	ADD		 	  ;; # ADDI 29
- stack 1: 0x4B8
- stack 0: 0xFF0
922	 184	PUSH2	03A0	 	 
- stack 2: 0x4B8
- stack 1: 0xFF0
- stack 0: 0x3A0
923	 187	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B8
924	 188	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
925	 18A	ADD		 	 
- stack 0: 0x4BC
926	 18B	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
927	 18C	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x1030008011D01BC008600000095020200B400000191FFFF0172000F01030009
928	 18D	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x1030008011D01BC008600000095020200B400000191FFFF0172000F01030009
- stack 0: 0xF0
929	 18F	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x103
930	 190	JUMP		 	 
- stack 0: 0x4BC
931	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4BC
932	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
933	 105	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x1030008011D01BC008600000095020200B400000191FFFF0172000F01030009
934	 106	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0x1030008011D01BC008600000095020200B400000191FFFF0172000F01030009
- stack 0: 0xE0
935	 108	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x1030008
936	 109	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x1030008
- stack 0: 0xFFFF
937	 10C	AND		 	 
- stack 1: 0x4BC
- stack 0: 0x8
938	 10D	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0x8
- stack 0: 0x1
939	 10F	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0x8
940	 110	PUSH2	0380	 	 
- stack 2: 0x4BC
- stack 1: 0x8
- stack 0: 0x380
941	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x4BC
942	 114	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
943	 116	ADD		 	 
- stack 0: 0x4C0
944	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
945	 118	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x11D01BC008600000095020200B400000191FFFF0172000F01030009011D01A0
946	 119	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x11D01BC008600000095020200B400000191FFFF0172000F01030009011D01A0
- stack 0: 0xF0
947	 11B	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x11D
948	 11C	JUMP		 	 
- stack 0: 0x4C0
949	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x4C0
950	 11E	PUSH2	0060	 	 
- stack 1: 0x4C0
- stack 0: 0x60
951	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x4C0
- stack 0: 0xFF0
952	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C0
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
953	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C0
- stack 0: 0xFF0
954	 128	PUSH2	03A0	 	 
- stack 2: 0x4C0
- stack 1: 0xFF0
- stack 0: 0x3A0
955	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C0
- stack 1: 0xFF0
- stack 0: 0xFF0
956	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C0
- stack 2: 0xFF0
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
957	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C0
- stack 1: 0xFF0
- stack 0: 0xFF0
958	 132	SUB		 	 
- stack 1: 0x4C0
- stack 0: 0x0
959	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x4C0
- stack 1: 0x0
- stack 0: 0x13B
960	 136	JUMPI		 	 
- stack 0: 0x4C0
961	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x4C0
- stack 0: 0x155
962	 13A	JUMP		 	 
- stack 0: 0x4C0
963	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x4C0
964	 156	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
965	 158	ADD		 	 
- stack 0: 0x4C4
966	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
967	 15A	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x8600000095020200B400000191FFFF0172000F01030009011D01A000860000
968	 15B	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x8600000095020200B400000191FFFF0172000F01030009011D01A000860000
- stack 0: 0xF0
969	 15D	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x86
970	 15E	JUMP		 	 
- stack 0: 0x4C4
971	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4C4
972	 87	DUP1		 	 
- stack 1: 0x4C4
- stack 0: 0x4C4
973	 88	PUSH2	0020	 	 
- stack 2: 0x4C4
- stack 1: 0x4C4
- stack 0: 0x20
974	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C4
975	 8C	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
976	 8E	ADD		 	 
- stack 0: 0x4C8
977	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
978	 90	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x95020200B400000191FFFF0172000F01030009011D01A000860000009501E0
979	 91	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x95020200B400000191FFFF0172000F01030009011D01A000860000009501E0
- stack 0: 0xF0
980	 93	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x95
981	 94	JUMP		 	 
- stack 0: 0x4C8
982	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x4C8
983	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
984	 97	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x95020200B400000191FFFF0172000F01030009011D01A000860000009501E0
985	 98	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0x95020200B400000191FFFF0172000F01030009011D01A000860000009501E0
- stack 0: 0xE0
986	 9A	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x950202
987	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0x950202
- stack 0: 0xFFFF
988	 9E	AND		 	 
- stack 1: 0x4C8
- stack 0: 0x202
989	 9F	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0x202
- stack 0: 0x1
990	 A1	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0x202
991	 A2	PUSH2	0020	 	 
- stack 2: 0x4C8
- stack 1: 0x202
- stack 0: 0x20
992	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C8
- stack 1: 0x202
- stack 0: 0x4C4
993	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4C8
- stack 0: 0x6C6
994	 A7	PUSH2	0020	 	 
- stack 2: 0x4C8
- stack 1: 0x6C6
- stack 0: 0x20
995	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C8
996	 AB	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
997	 AD	ADD		 	 
- stack 0: 0x4CC
998	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
999	 AF	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xB400000191FFFF0172000F01030009011D01A000860000009501E00095FFE0
1000	 B0	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0xB400000191FFFF0172000F01030009011D01A000860000009501E00095FFE0
- stack 0: 0xF0
1001	 B2	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xB4
1002	 B3	JUMP		 	 
- stack 0: 0x4CC
1003	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x4CC
1004	 B5	PUSH2	0020	 	 
- stack 1: 0x4CC
- stack 0: 0x20
1005	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4CC
- stack 0: 0x6C6
1006	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4CC
- stack 1: 0x6C6
- stack 0: 0xFFFFFFFF
1007	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4CC
- stack 0: 0x6C6
1008	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4CC
- stack 1: 0x6C6
- stack 0: 0x4CC
1009	 C0	MLOAD		 	 
- stack 2: 0x4CC
- stack 1: 0x6C6
- stack 0: 0xB400000191FFFF0172000F01030009011D01A000860000009501E00095FFE0
1010	 C1	PUSH1	E0	 	 
- stack 3: 0x4CC
- stack 2: 0x6C6
- stack 1: 0xB400000191FFFF0172000F01030009011D01A000860000009501E00095FFE0
- stack 0: 0xE0
1011	 C3	SHR		 	 
- stack 2: 0x4CC
- stack 1: 0x6C6
- stack 0: 0xB40000
1012	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4CC
- stack 2: 0x6C6
- stack 1: 0xB40000
- stack 0: 0xFFFF
1013	 C7	AND		 	 
- stack 2: 0x4CC
- stack 1: 0x6C6
- stack 0: 0x0
1014	 C8	PUSH1	01	 	 
- stack 3: 0x4CC
- stack 2: 0x6C6
- stack 1: 0x0
- stack 0: 0x1
1015	 CA	SIGNEXTEND		 	 
- stack 2: 0x4CC
- stack 1: 0x6C6
- stack 0: 0x0
1016	 CB	ADD		 	 
- stack 1: 0x4CC
- stack 0: 0x6C6
1017	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4CC
- stack 1: 0x6C6
- stack 0: 0xFFFFFFFF
1018	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4CC
- stack 0: 0x6C6
1019	 D2	PUSH1	02	 	 
- stack 2: 0x4CC
- stack 1: 0x6C6
- stack 0: 0x2
1020	 D4	XOR		 	 
- stack 1: 0x4CC
- stack 0: 0x6C4
1021	 D5	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
1022	 D6	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
1023	 D8	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xF00F
1024	 D9	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0xF00F
- stack 0: 0x1
1025	 DB	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
1026	 DC	PUSH2	0060	 	 
- stack 2: 0x4CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
- stack 0: 0x60
1027	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x4CC
1028	 E0	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
1029	 E2	ADD		 	 
- stack 0: 0x4D0
1030	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
1031	 E4	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x191FFFF0172000F01030009011D01A000860000009501E00095FFE000B40020
1032	 E5	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x191FFFF0172000F01030009011D01A000860000009501E00095FFE000B40020
- stack 0: 0xF0
1033	 E7	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x191
1034	 E8	JUMP		 	 
- stack 0: 0x4D0
1035	 191	JUMPDEST		 ;; __riscvimpl_LUI_fffffeb7	  ;; # instr: lui t4,0xfffff(ignore imm)
- stack 0: 0x4D0
1036	 192	PUSH4	fffff000	 	 
- stack 1: 0x4D0
- stack 0: 0xFFFFF000
1037	 197	PUSH2	03A0	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFFF000
- stack 0: 0x3A0
1038	 19A	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D0
1039	 19B	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1040	 19D	ADD		 	 
- stack 0: 0x4D4
1041	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1042	 19F	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x172000F01030009011D01A000860000009501E00095FFE000B4002000E900FF
1043	 1A0	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x172000F01030009011D01A000860000009501E00095FFE000B4002000E900FF
- stack 0: 0xF0
1044	 1A2	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x172
1045	 1A3	JUMP		 	 
- stack 0: 0x4D4
1046	 172	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x4D4
1047	 173	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
1048	 174	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x172000F01030009011D01A000860000009501E00095FFE000B4002000E900FF
1049	 175	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0x172000F01030009011D01A000860000009501E00095FFE000B4002000E900FF
- stack 0: 0xE0
1050	 177	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x172000F
1051	 178	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x172000F
- stack 0: 0xFFFF
1052	 17B	AND		 	 
- stack 1: 0x4D4
- stack 0: 0xF
1053	 17C	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0xF
- stack 0: 0x1
1054	 17E	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0xF
1055	 17F	PUSH2	03A0	 	 
- stack 2: 0x4D4
- stack 1: 0xF
- stack 0: 0x3A0
1056	 182	MLOAD		 	  ;; # read from x29
- stack 2: 0x4D4
- stack 1: 0xF
- stack 0: 0xFFFFF000
1057	 183	ADD		 	  ;; # ADDI 29
- stack 1: 0x4D4
- stack 0: 0xFFFFF00F
1058	 184	PUSH2	03A0	 	 
- stack 2: 0x4D4
- stack 1: 0xFFFFF00F
- stack 0: 0x3A0
1059	 187	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D4
1060	 188	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1061	 18A	ADD		 	 
- stack 0: 0x4D8
1062	 18B	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1063	 18C	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x1030009011D01A000860000009501E00095FFE000B4002000E900FF0103000A
1064	 18D	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x1030009011D01A000860000009501E00095FFE000B4002000E900FF0103000A
- stack 0: 0xF0
1065	 18F	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x103
1066	 190	JUMP		 	 
- stack 0: 0x4D8
1067	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4D8
1068	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
1069	 105	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x1030009011D01A000860000009501E00095FFE000B4002000E900FF0103000A
1070	 106	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0x1030009011D01A000860000009501E00095FFE000B4002000E900FF0103000A
- stack 0: 0xE0
1071	 108	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x1030009
1072	 109	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x1030009
- stack 0: 0xFFFF
1073	 10C	AND		 	 
- stack 1: 0x4D8
- stack 0: 0x9
1074	 10D	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0x9
- stack 0: 0x1
1075	 10F	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0x9
1076	 110	PUSH2	0380	 	 
- stack 2: 0x4D8
- stack 1: 0x9
- stack 0: 0x380
1077	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x4D8
1078	 114	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1079	 116	ADD		 	 
- stack 0: 0x4DC
1080	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1081	 118	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x11D01A000860000009501E00095FFE000B4002000E900FF0103000A011D0184
1082	 119	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x11D01A000860000009501E00095FFE000B4002000E900FF0103000A011D0184
- stack 0: 0xF0
1083	 11B	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x11D
1084	 11C	JUMP		 	 
- stack 0: 0x4DC
1085	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x4DC
1086	 11E	PUSH2	0060	 	 
- stack 1: 0x4DC
- stack 0: 0x60
1087	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x4DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
1088	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
- stack 0: 0xFFFFFFFF
1089	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4DC
- stack 0: 0xFFFFF00F
1090	 128	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0xFFFFF00F
- stack 0: 0x3A0
1091	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x4DC
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFF00F
1092	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4DC
- stack 2: 0xFFFFF00F
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFFFFF
1093	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4DC
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFF00F
1094	 132	SUB		 	 
- stack 1: 0x4DC
- stack 0: 0x0
1095	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x13B
1096	 136	JUMPI		 	 
- stack 0: 0x4DC
1097	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x4DC
- stack 0: 0x155
1098	 13A	JUMP		 	 
- stack 0: 0x4DC
1099	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x4DC
1100	 156	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1101	 158	ADD		 	 
- stack 0: 0x4E0
1102	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1103	 15A	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x860000009501E00095FFE000B4002000E900FF0103000A011D018400860000
1104	 15B	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x860000009501E00095FFE000B4002000E900FF0103000A011D018400860000
- stack 0: 0xF0
1105	 15D	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x86
1106	 15E	JUMP		 	 
- stack 0: 0x4E0
1107	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4E0
1108	 87	DUP1		 	 
- stack 1: 0x4E0
- stack 0: 0x4E0
1109	 88	PUSH2	0020	 	 
- stack 2: 0x4E0
- stack 1: 0x4E0
- stack 0: 0x20
1110	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E0
1111	 8C	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1112	 8E	ADD		 	 
- stack 0: 0x4E4
1113	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1114	 90	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x9501E00095FFE000B4002000E900FF0103000A011D018400860000009501C4
1115	 91	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x9501E00095FFE000B4002000E900FF0103000A011D018400860000009501C4
- stack 0: 0xF0
1116	 93	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x95
1117	 94	JUMP		 	 
- stack 0: 0x4E4
1118	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x4E4
1119	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1120	 97	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x9501E00095FFE000B4002000E900FF0103000A011D018400860000009501C4
1121	 98	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0x9501E00095FFE000B4002000E900FF0103000A011D018400860000009501C4
- stack 0: 0xE0
1122	 9A	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x9501E0
1123	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x9501E0
- stack 0: 0xFFFF
1124	 9E	AND		 	 
- stack 1: 0x4E4
- stack 0: 0x1E0
1125	 9F	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0x1E0
- stack 0: 0x1
1126	 A1	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0x1E0
1127	 A2	PUSH2	0020	 	 
- stack 2: 0x4E4
- stack 1: 0x1E0
- stack 0: 0x20
1128	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4E4
- stack 1: 0x1E0
- stack 0: 0x4E0
1129	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4E4
- stack 0: 0x6C0
1130	 A7	PUSH2	0020	 	 
- stack 2: 0x4E4
- stack 1: 0x6C0
- stack 0: 0x20
1131	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E4
1132	 AB	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1133	 AD	ADD		 	 
- stack 0: 0x4E8
1134	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1135	 AF	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x95FFE000B4002000E900FF0103000A011D018400860000009501C40095FFFB
1136	 B0	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x95FFE000B4002000E900FF0103000A011D018400860000009501C40095FFFB
- stack 0: 0xF0
1137	 B2	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x95
1138	 B3	JUMP		 	 
- stack 0: 0x4E8
1139	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x4E8
1140	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1141	 97	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x95FFE000B4002000E900FF0103000A011D018400860000009501C40095FFFB
1142	 98	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0x95FFE000B4002000E900FF0103000A011D018400860000009501C40095FFFB
- stack 0: 0xE0
1143	 9A	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x95FFE0
1144	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x95FFE0
- stack 0: 0xFFFF
1145	 9E	AND		 	 
- stack 1: 0x4E8
- stack 0: 0xFFE0
1146	 9F	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0xFFE0
- stack 0: 0x1
1147	 A1	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1148	 A2	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x20
1149	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x6C0
1150	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4E8
- stack 0: 0x6A0
1151	 A7	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0x6A0
- stack 0: 0x20
1152	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E8
1153	 AB	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1154	 AD	ADD		 	 
- stack 0: 0x4EC
1155	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1156	 AF	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xB4002000E900FF0103000A011D018400860000009501C40095FFFB00B40007
1157	 B0	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0xB4002000E900FF0103000A011D018400860000009501C40095FFFB00B40007
- stack 0: 0xF0
1158	 B2	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xB4
1159	 B3	JUMP		 	 
- stack 0: 0x4EC
1160	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x4EC
1161	 B5	PUSH2	0020	 	 
- stack 1: 0x4EC
- stack 0: 0x20
1162	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4EC
- stack 0: 0x6A0
1163	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
1164	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4EC
- stack 0: 0x6A0
1165	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4EC
- stack 1: 0x6A0
- stack 0: 0x4EC
1166	 C0	MLOAD		 	 
- stack 2: 0x4EC
- stack 1: 0x6A0
- stack 0: 0xB4002000E900FF0103000A011D018400860000009501C40095FFFB00B40007
1167	 C1	PUSH1	E0	 	 
- stack 3: 0x4EC
- stack 2: 0x6A0
- stack 1: 0xB4002000E900FF0103000A011D018400860000009501C40095FFFB00B40007
- stack 0: 0xE0
1168	 C3	SHR		 	 
- stack 2: 0x4EC
- stack 1: 0x6A0
- stack 0: 0xB40020
1169	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4EC
- stack 2: 0x6A0
- stack 1: 0xB40020
- stack 0: 0xFFFF
1170	 C7	AND		 	 
- stack 2: 0x4EC
- stack 1: 0x6A0
- stack 0: 0x20
1171	 C8	PUSH1	01	 	 
- stack 3: 0x4EC
- stack 2: 0x6A0
- stack 1: 0x20
- stack 0: 0x1
1172	 CA	SIGNEXTEND		 	 
- stack 2: 0x4EC
- stack 1: 0x6A0
- stack 0: 0x20
1173	 CB	ADD		 	 
- stack 1: 0x4EC
- stack 0: 0x6C0
1174	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
1175	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4EC
- stack 0: 0x6C0
1176	 D2	PUSH1	02	 	 
- stack 2: 0x4EC
- stack 1: 0x6C0
- stack 0: 0x2
1177	 D4	XOR		 	 
- stack 1: 0x4EC
- stack 0: 0x6C2
1178	 D5	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
1179	 D6	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
1180	 D8	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xFF
1181	 D9	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xFF
- stack 0: 0x1
1182	 DB	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xFF
1183	 DC	PUSH2	0060	 	 
- stack 2: 0x4EC
- stack 1: 0xFF
- stack 0: 0x60
1184	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x4EC
1185	 E0	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1186	 E2	ADD		 	 
- stack 0: 0x4F0
1187	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1188	 E4	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xE900FF0103000A011D018400860000009501C40095FFFB00B4000700E9FF00
1189	 E5	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xE900FF0103000A011D018400860000009501C40095FFFB00B4000700E9FF00
- stack 0: 0xF0
1190	 E7	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xE9
1191	 E8	JUMP		 	 
- stack 0: 0x4F0
1192	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x4F0
1193	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F0
- stack 0: 0x4F0
1194	 EB	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xE900FF0103000A011D018400860000009501C40095FFFB00B4000700E9FF00
1195	 EC	PUSH1	E0	 	 
- stack 2: 0x4F0
- stack 1: 0xE900FF0103000A011D018400860000009501C40095FFFB00B4000700E9FF00
- stack 0: 0xE0
1196	 EE	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xE900FF
1197	 EF	PUSH2	FFFF	 	 
- stack 2: 0x4F0
- stack 1: 0xE900FF
- stack 0: 0xFFFF
1198	 F2	AND		 	 
- stack 1: 0x4F0
- stack 0: 0xFF
1199	 F3	PUSH1	01	 	 
- stack 2: 0x4F0
- stack 1: 0xFF
- stack 0: 0x1
1200	 F5	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0xFF
1201	 F6	PUSH2	03A0	 	 
- stack 2: 0x4F0
- stack 1: 0xFF
- stack 0: 0x3A0
1202	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F0
1203	 FA	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1204	 FC	ADD		 	 
- stack 0: 0x4F4
1205	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1206	 FE	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x103000A011D018400860000009501C40095FFFB00B4000700E9FF000103000B
1207	 FF	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x103000A011D018400860000009501C40095FFFB00B4000700E9FF000103000B
- stack 0: 0xF0
1208	 101	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x103
1209	 102	JUMP		 	 
- stack 0: 0x4F4
1210	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4F4
1211	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1212	 105	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x103000A011D018400860000009501C40095FFFB00B4000700E9FF000103000B
1213	 106	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x103000A011D018400860000009501C40095FFFB00B4000700E9FF000103000B
- stack 0: 0xE0
1214	 108	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x103000A
1215	 109	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x103000A
- stack 0: 0xFFFF
1216	 10C	AND		 	 
- stack 1: 0x4F4
- stack 0: 0xA
1217	 10D	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0xA
- stack 0: 0x1
1218	 10F	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0xA
1219	 110	PUSH2	0380	 	 
- stack 2: 0x4F4
- stack 1: 0xA
- stack 0: 0x380
1220	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x4F4
1221	 114	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1222	 116	ADD		 	 
- stack 0: 0x4F8
1223	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1224	 118	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x11D018400860000009501C40095FFFB00B4000700E9FF000103000B011D0168
1225	 119	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x11D018400860000009501C40095FFFB00B4000700E9FF000103000B011D0168
- stack 0: 0xF0
1226	 11B	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x11D
1227	 11C	JUMP		 	 
- stack 0: 0x4F8
1228	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x4F8
1229	 11E	PUSH2	0060	 	 
- stack 1: 0x4F8
- stack 0: 0x60
1230	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x4F8
- stack 0: 0xFF
1231	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F8
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
1232	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F8
- stack 0: 0xFF
1233	 128	PUSH2	03A0	 	 
- stack 2: 0x4F8
- stack 1: 0xFF
- stack 0: 0x3A0
1234	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x4F8
- stack 1: 0xFF
- stack 0: 0xFF
1235	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4F8
- stack 2: 0xFF
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
1236	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4F8
- stack 1: 0xFF
- stack 0: 0xFF
1237	 132	SUB		 	 
- stack 1: 0x4F8
- stack 0: 0x0
1238	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x4F8
- stack 1: 0x0
- stack 0: 0x13B
1239	 136	JUMPI		 	 
- stack 0: 0x4F8
1240	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x4F8
- stack 0: 0x155
1241	 13A	JUMP		 	 
- stack 0: 0x4F8
1242	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x4F8
1243	 156	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1244	 158	ADD		 	 
- stack 0: 0x4FC
1245	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1246	 15A	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x860000009501C40095FFFB00B4000700E9FF000103000B011D01680103000C
1247	 15B	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x860000009501C40095FFFB00B4000700E9FF000103000B011D01680103000C
- stack 0: 0xF0
1248	 15D	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x86
1249	 15E	JUMP		 	 
- stack 0: 0x4FC
1250	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4FC
1251	 87	DUP1		 	 
- stack 1: 0x4FC
- stack 0: 0x4FC
1252	 88	PUSH2	0020	 	 
- stack 2: 0x4FC
- stack 1: 0x4FC
- stack 0: 0x20
1253	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4FC
1254	 8C	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1255	 8E	ADD		 	 
- stack 0: 0x500
1256	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1257	 90	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x9501C40095FFFB00B4000700E9FF000103000B011D01680103000C01A40000
1258	 91	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x9501C40095FFFB00B4000700E9FF000103000B011D01680103000C01A40000
- stack 0: 0xF0
1259	 93	SHR		 	 
- stack 1: 0x500
- stack 0: 0x95
1260	 94	JUMP		 	 
- stack 0: 0x500
1261	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x500
1262	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1263	 97	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x9501C40095FFFB00B4000700E9FF000103000B011D01680103000C01A40000
1264	 98	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x9501C40095FFFB00B4000700E9FF000103000B011D01680103000C01A40000
- stack 0: 0xE0
1265	 9A	SHR		 	 
- stack 1: 0x500
- stack 0: 0x9501C4
1266	 9B	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x9501C4
- stack 0: 0xFFFF
1267	 9E	AND		 	 
- stack 1: 0x500
- stack 0: 0x1C4
1268	 9F	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0x1C4
- stack 0: 0x1
1269	 A1	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0x1C4
1270	 A2	PUSH2	0020	 	 
- stack 2: 0x500
- stack 1: 0x1C4
- stack 0: 0x20
1271	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x500
- stack 1: 0x1C4
- stack 0: 0x4FC
1272	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x500
- stack 0: 0x6C0
1273	 A7	PUSH2	0020	 	 
- stack 2: 0x500
- stack 1: 0x6C0
- stack 0: 0x20
1274	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x500
1275	 AB	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1276	 AD	ADD		 	 
- stack 0: 0x504
1277	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1278	 AF	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x95FFFB00B4000700E9FF000103000B011D01680103000C01A4000000860000
1279	 B0	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x95FFFB00B4000700E9FF000103000B011D01680103000C01A4000000860000
- stack 0: 0xF0
1280	 B2	SHR		 	 
- stack 1: 0x504
- stack 0: 0x95
1281	 B3	JUMP		 	 
- stack 0: 0x504
1282	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x504
1283	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1284	 97	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x95FFFB00B4000700E9FF000103000B011D01680103000C01A4000000860000
1285	 98	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x95FFFB00B4000700E9FF000103000B011D01680103000C01A4000000860000
- stack 0: 0xE0
1286	 9A	SHR		 	 
- stack 1: 0x504
- stack 0: 0x95FFFB
1287	 9B	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x95FFFB
- stack 0: 0xFFFF
1288	 9E	AND		 	 
- stack 1: 0x504
- stack 0: 0xFFFB
1289	 9F	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0xFFFB
- stack 0: 0x1
1290	 A1	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB
1291	 A2	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB
- stack 0: 0x20
1292	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x504
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB
- stack 0: 0x6C0
1293	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x504
- stack 0: 0x6BB
1294	 A7	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0x6BB
- stack 0: 0x20
1295	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x504
1296	 AB	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1297	 AD	ADD		 	 
- stack 0: 0x508
1298	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1299	 AF	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xB4000700E9FF000103000B011D01680103000C01A4000000860000009501A2
1300	 B0	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xB4000700E9FF000103000B011D01680103000C01A4000000860000009501A2
- stack 0: 0xF0
1301	 B2	SHR		 	 
- stack 1: 0x508
- stack 0: 0xB4
1302	 B3	JUMP		 	 
- stack 0: 0x508
1303	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x508
1304	 B5	PUSH2	0020	 	 
- stack 1: 0x508
- stack 0: 0x20
1305	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x508
- stack 0: 0x6BB
1306	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x508
- stack 1: 0x6BB
- stack 0: 0xFFFFFFFF
1307	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x508
- stack 0: 0x6BB
1308	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x508
- stack 1: 0x6BB
- stack 0: 0x508
1309	 C0	MLOAD		 	 
- stack 2: 0x508
- stack 1: 0x6BB
- stack 0: 0xB4000700E9FF000103000B011D01680103000C01A4000000860000009501A2
1310	 C1	PUSH1	E0	 	 
- stack 3: 0x508
- stack 2: 0x6BB
- stack 1: 0xB4000700E9FF000103000B011D01680103000C01A4000000860000009501A2
- stack 0: 0xE0
1311	 C3	SHR		 	 
- stack 2: 0x508
- stack 1: 0x6BB
- stack 0: 0xB40007
1312	 C4	PUSH2	FFFF	 	 
- stack 3: 0x508
- stack 2: 0x6BB
- stack 1: 0xB40007
- stack 0: 0xFFFF
1313	 C7	AND		 	 
- stack 2: 0x508
- stack 1: 0x6BB
- stack 0: 0x7
1314	 C8	PUSH1	01	 	 
- stack 3: 0x508
- stack 2: 0x6BB
- stack 1: 0x7
- stack 0: 0x1
1315	 CA	SIGNEXTEND		 	 
- stack 2: 0x508
- stack 1: 0x6BB
- stack 0: 0x7
1316	 CB	ADD		 	 
- stack 1: 0x508
- stack 0: 0x6C2
1317	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x508
- stack 1: 0x6C2
- stack 0: 0xFFFFFFFF
1318	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x508
- stack 0: 0x6C2
1319	 D2	PUSH1	02	 	 
- stack 2: 0x508
- stack 1: 0x6C2
- stack 0: 0x2
1320	 D4	XOR		 	 
- stack 1: 0x508
- stack 0: 0x6C0
1321	 D5	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
1322	 D6	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
- stack 0: 0xF0
1323	 D8	SHR		 	 
- stack 1: 0x508
- stack 0: 0xFF00
1324	 D9	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xFF00
- stack 0: 0x1
1325	 DB	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1326	 DC	PUSH2	0060	 	 
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x60
1327	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x508
1328	 E0	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1329	 E2	ADD		 	 
- stack 0: 0x50C
1330	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1331	 E4	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xE9FF000103000B011D01680103000C01A4000000860000009501A200B40002
1332	 E5	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xE9FF000103000B011D01680103000C01A4000000860000009501A200B40002
- stack 0: 0xF0
1333	 E7	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xE9
1334	 E8	JUMP		 	 
- stack 0: 0x50C
1335	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x50C
1336	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1337	 EB	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xE9FF000103000B011D01680103000C01A4000000860000009501A200B40002
1338	 EC	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0xE9FF000103000B011D01680103000C01A4000000860000009501A200B40002
- stack 0: 0xE0
1339	 EE	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xE9FF00
1340	 EF	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0xE9FF00
- stack 0: 0xFFFF
1341	 F2	AND		 	 
- stack 1: 0x50C
- stack 0: 0xFF00
1342	 F3	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xFF00
- stack 0: 0x1
1343	 F5	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1344	 F6	PUSH2	03A0	 	 
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
1345	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x50C
1346	 FA	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1347	 FC	ADD		 	 
- stack 0: 0x510
1348	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1349	 FE	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x103000B011D01680103000C01A4000000860000009501A200B4000201BE0000
1350	 FF	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x103000B011D01680103000C01A4000000860000009501A200B4000201BE0000
- stack 0: 0xF0
1351	 101	SHR		 	 
- stack 1: 0x510
- stack 0: 0x103
1352	 102	JUMP		 	 
- stack 0: 0x510
1353	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x510
1354	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1355	 105	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x103000B011D01680103000C01A4000000860000009501A200B4000201BE0000
1356	 106	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0x103000B011D01680103000C01A4000000860000009501A200B4000201BE0000
- stack 0: 0xE0
1357	 108	SHR		 	 
- stack 1: 0x510
- stack 0: 0x103000B
1358	 109	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0x103000B
- stack 0: 0xFFFF
1359	 10C	AND		 	 
- stack 1: 0x510
- stack 0: 0xB
1360	 10D	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0xB
- stack 0: 0x1
1361	 10F	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0xB
1362	 110	PUSH2	0380	 	 
- stack 2: 0x510
- stack 1: 0xB
- stack 0: 0x380
1363	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x510
1364	 114	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1365	 116	ADD		 	 
- stack 0: 0x514
1366	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1367	 118	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x11D01680103000C01A4000000860000009501A200B4000201BE0000015F0001
1368	 119	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x11D01680103000C01A4000000860000009501A200B4000201BE0000015F0001
- stack 0: 0xF0
1369	 11B	SHR		 	 
- stack 1: 0x514
- stack 0: 0x11D
1370	 11C	JUMP		 	 
- stack 0: 0x514
1371	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x514
1372	 11E	PUSH2	0060	 	 
- stack 1: 0x514
- stack 0: 0x60
1373	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x514
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1374	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFFFFFFFF
1375	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x514
- stack 0: 0xFFFFFF00
1376	 128	PUSH2	03A0	 	 
- stack 2: 0x514
- stack 1: 0xFFFFFF00
- stack 0: 0x3A0
1377	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x514
- stack 1: 0xFFFFFF00
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1378	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x514
- stack 2: 0xFFFFFF00
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFFFFFFFF
1379	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x514
- stack 1: 0xFFFFFF00
- stack 0: 0xFFFFFF00
1380	 132	SUB		 	 
- stack 1: 0x514
- stack 0: 0x0
1381	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0x13B
1382	 136	JUMPI		 	 
- stack 0: 0x514
1383	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x514
- stack 0: 0x155
1384	 13A	JUMP		 	 
- stack 0: 0x514
1385	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x514
1386	 156	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1387	 158	ADD		 	 
- stack 0: 0x518
1388	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1389	 15A	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x103000C01A4000000860000009501A200B4000201BE0000015F00010172FFF0
1390	 15B	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x103000C01A4000000860000009501A200B4000201BE0000015F00010172FFF0
- stack 0: 0xF0
1391	 15D	SHR		 	 
- stack 1: 0x518
- stack 0: 0x103
1392	 15E	JUMP		 	 
- stack 0: 0x518
1393	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x518
1394	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1395	 105	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x103000C01A4000000860000009501A200B4000201BE0000015F00010172FFF0
1396	 106	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x103000C01A4000000860000009501A200B4000201BE0000015F00010172FFF0
- stack 0: 0xE0
1397	 108	SHR		 	 
- stack 1: 0x518
- stack 0: 0x103000C
1398	 109	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x103000C
- stack 0: 0xFFFF
1399	 10C	AND		 	 
- stack 1: 0x518
- stack 0: 0xC
1400	 10D	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0xC
- stack 0: 0x1
1401	 10F	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0xC
1402	 110	PUSH2	0380	 	 
- stack 2: 0x518
- stack 1: 0xC
- stack 0: 0x380
1403	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x518
1404	 114	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1405	 116	ADD		 	 
- stack 0: 0x51C
1406	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1407	 118	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x1A4000000860000009501A200B4000201BE0000015F00010172FFF001DD0144
1408	 119	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x1A4000000860000009501A200B4000201BE0000015F00010172FFF001DD0144
- stack 0: 0xF0
1409	 11B	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x1A4
1410	 11C	JUMP		 	 
- stack 0: 0x51C
1411	 1A4	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x51C
1412	 1A5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1413	 1A6	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x1A4000000860000009501A200B4000201BE0000015F00010172FFF001DD0144
1414	 1A7	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x1A4000000860000009501A200B4000201BE0000015F00010172FFF001DD0144
- stack 0: 0xE0
1415	 1A9	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x1A40000
1416	 1AA	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x1A40000
- stack 0: 0xFFFF
1417	 1AD	AND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1418	 1AE	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x1
1419	 1B0	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1420	 1B1	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x80
1421	 1B4	MSTORE		 	  ;; # store to x4
- stack 0: 0x51C
1422	 1B5	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1423	 1B7	ADD		 	 
- stack 0: 0x520
1424	 1B8	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1425	 1B9	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x860000009501A200B4000201BE0000015F00010172FFF001DD0144021F0001
1426	 1BA	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x860000009501A200B4000201BE0000015F00010172FFF001DD0144021F0001
- stack 0: 0xF0
1427	 1BC	SHR		 	 
- stack 1: 0x520
- stack 0: 0x86
1428	 1BD	JUMP		 	 
- stack 0: 0x520
1429	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x520
1430	 87	DUP1		 	 
- stack 1: 0x520
- stack 0: 0x520
1431	 88	PUSH2	0020	 	 
- stack 2: 0x520
- stack 1: 0x520
- stack 0: 0x20
1432	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x520
1433	 8C	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1434	 8E	ADD		 	 
- stack 0: 0x524
1435	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1436	 90	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x9501A200B4000201BE0000015F00010172FFF001DD0144021F0001023E0002
1437	 91	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x9501A200B4000201BE0000015F00010172FFF001DD0144021F0001023E0002
- stack 0: 0xF0
1438	 93	SHR		 	 
- stack 1: 0x524
- stack 0: 0x95
1439	 94	JUMP		 	 
- stack 0: 0x524
1440	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x524
1441	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1442	 97	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x9501A200B4000201BE0000015F00010172FFF001DD0144021F0001023E0002
1443	 98	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x9501A200B4000201BE0000015F00010172FFF001DD0144021F0001023E0002
- stack 0: 0xE0
1444	 9A	SHR		 	 
- stack 1: 0x524
- stack 0: 0x9501A2
1445	 9B	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x9501A2
- stack 0: 0xFFFF
1446	 9E	AND		 	 
- stack 1: 0x524
- stack 0: 0x1A2
1447	 9F	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0x1A2
- stack 0: 0x1
1448	 A1	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0x1A2
1449	 A2	PUSH2	0020	 	 
- stack 2: 0x524
- stack 1: 0x1A2
- stack 0: 0x20
1450	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x524
- stack 1: 0x1A2
- stack 0: 0x520
1451	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x524
- stack 0: 0x6C2
1452	 A7	PUSH2	0020	 	 
- stack 2: 0x524
- stack 1: 0x6C2
- stack 0: 0x20
1453	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x524
1454	 AB	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1455	 AD	ADD		 	 
- stack 0: 0x528
1456	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1457	 AF	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xB4000201BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC
1458	 B0	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0xB4000201BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC
- stack 0: 0xF0
1459	 B2	SHR		 	 
- stack 1: 0x528
- stack 0: 0xB4
1460	 B3	JUMP		 	 
- stack 0: 0x528
1461	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x528
1462	 B5	PUSH2	0020	 	 
- stack 1: 0x528
- stack 0: 0x20
1463	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x528
- stack 0: 0x6C2
1464	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x528
- stack 1: 0x6C2
- stack 0: 0xFFFFFFFF
1465	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x528
- stack 0: 0x6C2
1466	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x528
- stack 1: 0x6C2
- stack 0: 0x528
1467	 C0	MLOAD		 	 
- stack 2: 0x528
- stack 1: 0x6C2
- stack 0: 0xB4000201BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC
1468	 C1	PUSH1	E0	 	 
- stack 3: 0x528
- stack 2: 0x6C2
- stack 1: 0xB4000201BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC
- stack 0: 0xE0
1469	 C3	SHR		 	 
- stack 2: 0x528
- stack 1: 0x6C2
- stack 0: 0xB40002
1470	 C4	PUSH2	FFFF	 	 
- stack 3: 0x528
- stack 2: 0x6C2
- stack 1: 0xB40002
- stack 0: 0xFFFF
1471	 C7	AND		 	 
- stack 2: 0x528
- stack 1: 0x6C2
- stack 0: 0x2
1472	 C8	PUSH1	01	 	 
- stack 3: 0x528
- stack 2: 0x6C2
- stack 1: 0x2
- stack 0: 0x1
1473	 CA	SIGNEXTEND		 	 
- stack 2: 0x528
- stack 1: 0x6C2
- stack 0: 0x2
1474	 CB	ADD		 	 
- stack 1: 0x528
- stack 0: 0x6C4
1475	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x528
- stack 1: 0x6C4
- stack 0: 0xFFFFFFFF
1476	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x528
- stack 0: 0x6C4
1477	 D2	PUSH1	02	 	 
- stack 2: 0x528
- stack 1: 0x6C4
- stack 0: 0x2
1478	 D4	XOR		 	 
- stack 1: 0x528
- stack 0: 0x6C6
1479	 D5	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xFF0000000000000000000000000000000000000000000000000000000000000
1480	 D6	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0xFF0000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
1481	 D8	SHR		 	 
- stack 1: 0x528
- stack 0: 0xFF0
1482	 D9	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0xFF0
- stack 0: 0x1
1483	 DB	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0xFF0
1484	 DC	PUSH2	0060	 	 
- stack 2: 0x528
- stack 1: 0xFF0
- stack 0: 0x60
1485	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x528
1486	 E0	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1487	 E2	ADD		 	 
- stack 0: 0x52C
1488	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1489	 E4	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x1BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC0103000D
1490	 E5	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x1BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC0103000D
- stack 0: 0xF0
1491	 E7	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1BE
1492	 E8	JUMP		 	 
- stack 0: 0x52C
1493	 1BE	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x52C
1494	 1BF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1495	 1C0	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x1BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC0103000D
1496	 1C1	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0x1BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC0103000D
- stack 0: 0xE0
1497	 1C3	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1BE0000
1498	 1C4	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0x1BE0000
- stack 0: 0xFFFF
1499	 1C7	AND		 	 
- stack 1: 0x52C
- stack 0: 0x0
1500	 1C8	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x1
1501	 1CA	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x0
1502	 1CB	PUSH2	0060	 	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x60
1503	 1CE	MLOAD		 	  ;; # read from x3
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0xFF0
1504	 1CF	ADD		 	  ;; # ADDI 3
- stack 1: 0x52C
- stack 0: 0xFF0
1505	 1D0	PUSH2	00C0	 	 
- stack 2: 0x52C
- stack 1: 0xFF0
- stack 0: 0xC0
1506	 1D3	MSTORE		 	  ;; # store to x6
- stack 0: 0x52C
1507	 1D4	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1508	 1D6	ADD		 	 
- stack 0: 0x530
1509	 1D7	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1510	 1D8	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x15F00010172FFF001DD0144021F0001023E00020258FFDC0103000D01A40000
1511	 1D9	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x15F00010172FFF001DD0144021F0001023E00020258FFDC0103000D01A40000
- stack 0: 0xF0
1512	 1DB	SHR		 	 
- stack 1: 0x530
- stack 0: 0x15F
1513	 1DC	JUMP		 	 
- stack 0: 0x530
1514	 15F	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x530
1515	 160	PUSH4	00001000	 	 
- stack 1: 0x530
- stack 0: 0x1000
1516	 165	PUSH2	03A0	 	 
- stack 2: 0x530
- stack 1: 0x1000
- stack 0: 0x3A0
1517	 168	MSTORE		 	  ;; # store to x29
- stack 0: 0x530
1518	 169	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1519	 16B	ADD		 	 
- stack 0: 0x534
1520	 16C	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1521	 16D	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x172FFF001DD0144021F0001023E00020258FFDC0103000D01A4000000860000
1522	 16E	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x172FFF001DD0144021F0001023E00020258FFDC0103000D01A4000000860000
- stack 0: 0xF0
1523	 170	SHR		 	 
- stack 1: 0x534
- stack 0: 0x172
1524	 171	JUMP		 	 
- stack 0: 0x534
1525	 172	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x534
1526	 173	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1527	 174	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x172FFF001DD0144021F0001023E00020258FFDC0103000D01A4000000860000
1528	 175	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x172FFF001DD0144021F0001023E00020258FFDC0103000D01A4000000860000
- stack 0: 0xE0
1529	 177	SHR		 	 
- stack 1: 0x534
- stack 0: 0x172FFF0
1530	 178	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x172FFF0
- stack 0: 0xFFFF
1531	 17B	AND		 	 
- stack 1: 0x534
- stack 0: 0xFFF0
1532	 17C	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0xFFF0
- stack 0: 0x1
1533	 17E	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1534	 17F	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
1535	 182	MLOAD		 	  ;; # read from x29
- stack 2: 0x534
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x1000
1536	 183	ADD		 	  ;; # ADDI 29
- stack 1: 0x534
- stack 0: 0xFF0
1537	 184	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0xFF0
- stack 0: 0x3A0
1538	 187	MSTORE		 	  ;; # store to x29
- stack 0: 0x534
1539	 188	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1540	 18A	ADD		 	 
- stack 0: 0x538
1541	 18B	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1542	 18C	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1DD0144021F0001023E00020258FFDC0103000D01A400000086000000950174
1543	 18D	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x1DD0144021F0001023E00020258FFDC0103000D01A400000086000000950174
- stack 0: 0xF0
1544	 18F	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1DD
1545	 190	JUMP		 	 
- stack 0: 0x538
1546	 1DD	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,144(ignore imm)
- stack 0: 0x538
1547	 1DE	PUSH2	00C0	 	 
- stack 1: 0x538
- stack 0: 0xC0
1548	 1E1	MLOAD		 	  ;; # read from x6
- stack 1: 0x538
- stack 0: 0xFF0
1549	 1E2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x538
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
1550	 1E7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x538
- stack 0: 0xFF0
1551	 1E8	PUSH2	03A0	 	 
- stack 2: 0x538
- stack 1: 0xFF0
- stack 0: 0x3A0
1552	 1EB	MLOAD		 	  ;; # read from x29
- stack 2: 0x538
- stack 1: 0xFF0
- stack 0: 0xFF0
1553	 1EC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x538
- stack 2: 0xFF0
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
1554	 1F1	AND		 	  ;; # mask to 32 bits
- stack 2: 0x538
- stack 1: 0xFF0
- stack 0: 0xFF0
1555	 1F2	SUB		 	 
- stack 1: 0x538
- stack 0: 0x0
1556	 1F3	PUSH2	01FB	 ;; _neq_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x1FB
1557	 1F6	JUMPI		 	 
- stack 0: 0x538
1558	 1F7	PUSH2	0215	 ;; _neq_after_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 1: 0x538
- stack 0: 0x215
1559	 1FA	JUMP		 	 
- stack 0: 0x538
1560	 215	JUMPDEST		 ;; _neq_after_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 0: 0x538
1561	 216	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1562	 218	ADD		 	 
- stack 0: 0x53C
1563	 219	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1564	 21A	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x21F0001023E00020258FFDC0103000D01A40000008600000095017400B40002
1565	 21B	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x21F0001023E00020258FFDC0103000D01A40000008600000095017400B40002
- stack 0: 0xF0
1566	 21D	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x21F
1567	 21E	JUMP		 	 
- stack 0: 0x53C
1568	 21F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x53C
1569	 220	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1570	 221	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x21F0001023E00020258FFDC0103000D01A40000008600000095017400B40002
1571	 222	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0x21F0001023E00020258FFDC0103000D01A40000008600000095017400B40002
- stack 0: 0xE0
1572	 224	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x21F0001
1573	 225	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0x21F0001
- stack 0: 0xFFFF
1574	 228	AND		 	 
- stack 1: 0x53C
- stack 0: 0x1
1575	 229	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0x1
- stack 0: 0x1
1576	 22B	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0x1
1577	 22C	PUSH2	0080	 	 
- stack 2: 0x53C
- stack 1: 0x1
- stack 0: 0x80
1578	 22F	MLOAD		 	  ;; # read from x4
- stack 2: 0x53C
- stack 1: 0x1
- stack 0: 0x0
1579	 230	ADD		 	  ;; # ADDI 4
- stack 1: 0x53C
- stack 0: 0x1
1580	 231	PUSH2	0080	 	 
- stack 2: 0x53C
- stack 1: 0x1
- stack 0: 0x80
1581	 234	MSTORE		 	  ;; # store to x4
- stack 0: 0x53C
1582	 235	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1583	 237	ADD		 	 
- stack 0: 0x540
1584	 238	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1585	 239	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x23E00020258FFDC0103000D01A40000008600000095017400B40002029A0000
1586	 23A	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x23E00020258FFDC0103000D01A40000008600000095017400B40002029A0000
- stack 0: 0xF0
1587	 23C	SHR		 	 
- stack 1: 0x540
- stack 0: 0x23E
1588	 23D	JUMP		 	 
- stack 0: 0x540
1589	 23E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x540
1590	 23F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1591	 240	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x23E00020258FFDC0103000D01A40000008600000095017400B40002029A0000
1592	 241	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x23E00020258FFDC0103000D01A40000008600000095017400B40002029A0000
- stack 0: 0xE0
1593	 243	SHR		 	 
- stack 1: 0x540
- stack 0: 0x23E0002
1594	 244	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x23E0002
- stack 0: 0xFFFF
1595	 247	AND		 	 
- stack 1: 0x540
- stack 0: 0x2
1596	 248	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0x2
- stack 0: 0x1
1597	 24A	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0x2
1598	 24B	PUSH2	00A0	 	 
- stack 2: 0x540
- stack 1: 0x2
- stack 0: 0xA0
1599	 24E	MSTORE		 	  ;; # store to x5
- stack 0: 0x540
1600	 24F	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1601	 251	ADD		 	 
- stack 0: 0x544
1602	 252	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1603	 253	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x258FFDC0103000D01A40000008600000095017400B40002029A000001BE0000
1604	 254	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x258FFDC0103000D01A40000008600000095017400B40002029A000001BE0000
- stack 0: 0xF0
1605	 256	SHR		 	 
- stack 1: 0x544
- stack 0: 0x258
1606	 257	JUMP		 	 
- stack 0: 0x544
1607	 258	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x544
1608	 259	PUSH2	0080	 	 
- stack 1: 0x544
- stack 0: 0x80
1609	 25C	MLOAD		 	  ;; # read from x4
- stack 1: 0x544
- stack 0: 0x1
1610	 25D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1611	 262	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0x1
1612	 263	PUSH2	00A0	 	 
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0xA0
1613	 266	MLOAD		 	  ;; # read from x5
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x2
1614	 267	PUSH4	FFFFFFFF	 	 
- stack 3: 0x544
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1615	 26C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x2
1616	 26D	SUB		 	 
- stack 1: 0x544
- stack 0: 0x1
1617	 26E	PUSH2	0276	 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x276
1618	 271	JUMPI		 	 
- stack 0: 0x544
1619	 276	JUMPDEST		 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 0: 0x544
1620	 277	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1621	 278	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x258FFDC0103000D01A40000008600000095017400B40002029A000001BE0000
1622	 279	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x258FFDC0103000D01A40000008600000095017400B40002029A000001BE0000
- stack 0: 0xE0
1623	 27B	SHR		 	 
- stack 1: 0x544
- stack 0: 0x258FFDC
1624	 27C	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x258FFDC
- stack 0: 0xFFFF
1625	 27F	AND		 	 
- stack 1: 0x544
- stack 0: 0xFFDC
1626	 280	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0xFFDC
- stack 0: 0x1
1627	 282	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
1628	 283	ADD		 	 
- stack 0: 0x520
1629	 284	PUSH4	FFFFFFFF	 	 
- stack 1: 0x520
- stack 0: 0xFFFFFFFF
1630	 289	AND		 	  ;; # mask to 32 bits
- stack 0: 0x520
1631	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1632	 28B	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x860000009501A200B4000201BE0000015F00010172FFF001DD0144021F0001
1633	 28C	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x860000009501A200B4000201BE0000015F00010172FFF001DD0144021F0001
- stack 0: 0xF0
1634	 28E	SHR		 	 
- stack 1: 0x520
- stack 0: 0x86
1635	 28F	JUMP		 	 
- stack 0: 0x520
1636	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x520
1637	 87	DUP1		 	 
- stack 1: 0x520
- stack 0: 0x520
1638	 88	PUSH2	0020	 	 
- stack 2: 0x520
- stack 1: 0x520
- stack 0: 0x20
1639	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x520
1640	 8C	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1641	 8E	ADD		 	 
- stack 0: 0x524
1642	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1643	 90	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x9501A200B4000201BE0000015F00010172FFF001DD0144021F0001023E0002
1644	 91	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x9501A200B4000201BE0000015F00010172FFF001DD0144021F0001023E0002
- stack 0: 0xF0
1645	 93	SHR		 	 
- stack 1: 0x524
- stack 0: 0x95
1646	 94	JUMP		 	 
- stack 0: 0x524
1647	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x524
1648	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1649	 97	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x9501A200B4000201BE0000015F00010172FFF001DD0144021F0001023E0002
1650	 98	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x9501A200B4000201BE0000015F00010172FFF001DD0144021F0001023E0002
- stack 0: 0xE0
1651	 9A	SHR		 	 
- stack 1: 0x524
- stack 0: 0x9501A2
1652	 9B	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x9501A2
- stack 0: 0xFFFF
1653	 9E	AND		 	 
- stack 1: 0x524
- stack 0: 0x1A2
1654	 9F	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0x1A2
- stack 0: 0x1
1655	 A1	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0x1A2
1656	 A2	PUSH2	0020	 	 
- stack 2: 0x524
- stack 1: 0x1A2
- stack 0: 0x20
1657	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x524
- stack 1: 0x1A2
- stack 0: 0x520
1658	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x524
- stack 0: 0x6C2
1659	 A7	PUSH2	0020	 	 
- stack 2: 0x524
- stack 1: 0x6C2
- stack 0: 0x20
1660	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x524
1661	 AB	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1662	 AD	ADD		 	 
- stack 0: 0x528
1663	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1664	 AF	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xB4000201BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC
1665	 B0	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0xB4000201BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC
- stack 0: 0xF0
1666	 B2	SHR		 	 
- stack 1: 0x528
- stack 0: 0xB4
1667	 B3	JUMP		 	 
- stack 0: 0x528
1668	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x528
1669	 B5	PUSH2	0020	 	 
- stack 1: 0x528
- stack 0: 0x20
1670	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x528
- stack 0: 0x6C2
1671	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x528
- stack 1: 0x6C2
- stack 0: 0xFFFFFFFF
1672	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x528
- stack 0: 0x6C2
1673	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x528
- stack 1: 0x6C2
- stack 0: 0x528
1674	 C0	MLOAD		 	 
- stack 2: 0x528
- stack 1: 0x6C2
- stack 0: 0xB4000201BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC
1675	 C1	PUSH1	E0	 	 
- stack 3: 0x528
- stack 2: 0x6C2
- stack 1: 0xB4000201BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC
- stack 0: 0xE0
1676	 C3	SHR		 	 
- stack 2: 0x528
- stack 1: 0x6C2
- stack 0: 0xB40002
1677	 C4	PUSH2	FFFF	 	 
- stack 3: 0x528
- stack 2: 0x6C2
- stack 1: 0xB40002
- stack 0: 0xFFFF
1678	 C7	AND		 	 
- stack 2: 0x528
- stack 1: 0x6C2
- stack 0: 0x2
1679	 C8	PUSH1	01	 	 
- stack 3: 0x528
- stack 2: 0x6C2
- stack 1: 0x2
- stack 0: 0x1
1680	 CA	SIGNEXTEND		 	 
- stack 2: 0x528
- stack 1: 0x6C2
- stack 0: 0x2
1681	 CB	ADD		 	 
- stack 1: 0x528
- stack 0: 0x6C4
1682	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x528
- stack 1: 0x6C4
- stack 0: 0xFFFFFFFF
1683	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x528
- stack 0: 0x6C4
1684	 D2	PUSH1	02	 	 
- stack 2: 0x528
- stack 1: 0x6C4
- stack 0: 0x2
1685	 D4	XOR		 	 
- stack 1: 0x528
- stack 0: 0x6C6
1686	 D5	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xFF0000000000000000000000000000000000000000000000000000000000000
1687	 D6	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0xFF0000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
1688	 D8	SHR		 	 
- stack 1: 0x528
- stack 0: 0xFF0
1689	 D9	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0xFF0
- stack 0: 0x1
1690	 DB	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0xFF0
1691	 DC	PUSH2	0060	 	 
- stack 2: 0x528
- stack 1: 0xFF0
- stack 0: 0x60
1692	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x528
1693	 E0	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1694	 E2	ADD		 	 
- stack 0: 0x52C
1695	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1696	 E4	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x1BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC0103000D
1697	 E5	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x1BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC0103000D
- stack 0: 0xF0
1698	 E7	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1BE
1699	 E8	JUMP		 	 
- stack 0: 0x52C
1700	 1BE	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x52C
1701	 1BF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1702	 1C0	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x1BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC0103000D
1703	 1C1	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0x1BE0000015F00010172FFF001DD0144021F0001023E00020258FFDC0103000D
- stack 0: 0xE0
1704	 1C3	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1BE0000
1705	 1C4	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0x1BE0000
- stack 0: 0xFFFF
1706	 1C7	AND		 	 
- stack 1: 0x52C
- stack 0: 0x0
1707	 1C8	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x1
1708	 1CA	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x0
1709	 1CB	PUSH2	0060	 	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x60
1710	 1CE	MLOAD		 	  ;; # read from x3
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0xFF0
1711	 1CF	ADD		 	  ;; # ADDI 3
- stack 1: 0x52C
- stack 0: 0xFF0
1712	 1D0	PUSH2	00C0	 	 
- stack 2: 0x52C
- stack 1: 0xFF0
- stack 0: 0xC0
1713	 1D3	MSTORE		 	  ;; # store to x6
- stack 0: 0x52C
1714	 1D4	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1715	 1D6	ADD		 	 
- stack 0: 0x530
1716	 1D7	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1717	 1D8	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x15F00010172FFF001DD0144021F0001023E00020258FFDC0103000D01A40000
1718	 1D9	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x15F00010172FFF001DD0144021F0001023E00020258FFDC0103000D01A40000
- stack 0: 0xF0
1719	 1DB	SHR		 	 
- stack 1: 0x530
- stack 0: 0x15F
1720	 1DC	JUMP		 	 
- stack 0: 0x530
1721	 15F	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x530
1722	 160	PUSH4	00001000	 	 
- stack 1: 0x530
- stack 0: 0x1000
1723	 165	PUSH2	03A0	 	 
- stack 2: 0x530
- stack 1: 0x1000
- stack 0: 0x3A0
1724	 168	MSTORE		 	  ;; # store to x29
- stack 0: 0x530
1725	 169	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1726	 16B	ADD		 	 
- stack 0: 0x534
1727	 16C	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1728	 16D	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x172FFF001DD0144021F0001023E00020258FFDC0103000D01A4000000860000
1729	 16E	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x172FFF001DD0144021F0001023E00020258FFDC0103000D01A4000000860000
- stack 0: 0xF0
1730	 170	SHR		 	 
- stack 1: 0x534
- stack 0: 0x172
1731	 171	JUMP		 	 
- stack 0: 0x534
1732	 172	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x534
1733	 173	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1734	 174	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x172FFF001DD0144021F0001023E00020258FFDC0103000D01A4000000860000
1735	 175	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x172FFF001DD0144021F0001023E00020258FFDC0103000D01A4000000860000
- stack 0: 0xE0
1736	 177	SHR		 	 
- stack 1: 0x534
- stack 0: 0x172FFF0
1737	 178	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x172FFF0
- stack 0: 0xFFFF
1738	 17B	AND		 	 
- stack 1: 0x534
- stack 0: 0xFFF0
1739	 17C	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0xFFF0
- stack 0: 0x1
1740	 17E	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1741	 17F	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
1742	 182	MLOAD		 	  ;; # read from x29
- stack 2: 0x534
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x1000
1743	 183	ADD		 	  ;; # ADDI 29
- stack 1: 0x534
- stack 0: 0xFF0
1744	 184	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0xFF0
- stack 0: 0x3A0
1745	 187	MSTORE		 	  ;; # store to x29
- stack 0: 0x534
1746	 188	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1747	 18A	ADD		 	 
- stack 0: 0x538
1748	 18B	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1749	 18C	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1DD0144021F0001023E00020258FFDC0103000D01A400000086000000950174
1750	 18D	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x1DD0144021F0001023E00020258FFDC0103000D01A400000086000000950174
- stack 0: 0xF0
1751	 18F	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1DD
1752	 190	JUMP		 	 
- stack 0: 0x538
1753	 1DD	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,144(ignore imm)
- stack 0: 0x538
1754	 1DE	PUSH2	00C0	 	 
- stack 1: 0x538
- stack 0: 0xC0
1755	 1E1	MLOAD		 	  ;; # read from x6
- stack 1: 0x538
- stack 0: 0xFF0
1756	 1E2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x538
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
1757	 1E7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x538
- stack 0: 0xFF0
1758	 1E8	PUSH2	03A0	 	 
- stack 2: 0x538
- stack 1: 0xFF0
- stack 0: 0x3A0
1759	 1EB	MLOAD		 	  ;; # read from x29
- stack 2: 0x538
- stack 1: 0xFF0
- stack 0: 0xFF0
1760	 1EC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x538
- stack 2: 0xFF0
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
1761	 1F1	AND		 	  ;; # mask to 32 bits
- stack 2: 0x538
- stack 1: 0xFF0
- stack 0: 0xFF0
1762	 1F2	SUB		 	 
- stack 1: 0x538
- stack 0: 0x0
1763	 1F3	PUSH2	01FB	 ;; _neq_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x1FB
1764	 1F6	JUMPI		 	 
- stack 0: 0x538
1765	 1F7	PUSH2	0215	 ;; _neq_after_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 1: 0x538
- stack 0: 0x215
1766	 1FA	JUMP		 	 
- stack 0: 0x538
1767	 215	JUMPDEST		 ;; _neq_after_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 0: 0x538
1768	 216	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1769	 218	ADD		 	 
- stack 0: 0x53C
1770	 219	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1771	 21A	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x21F0001023E00020258FFDC0103000D01A40000008600000095017400B40002
1772	 21B	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x21F0001023E00020258FFDC0103000D01A40000008600000095017400B40002
- stack 0: 0xF0
1773	 21D	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x21F
1774	 21E	JUMP		 	 
- stack 0: 0x53C
1775	 21F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x53C
1776	 220	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1777	 221	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x21F0001023E00020258FFDC0103000D01A40000008600000095017400B40002
1778	 222	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0x21F0001023E00020258FFDC0103000D01A40000008600000095017400B40002
- stack 0: 0xE0
1779	 224	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x21F0001
1780	 225	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0x21F0001
- stack 0: 0xFFFF
1781	 228	AND		 	 
- stack 1: 0x53C
- stack 0: 0x1
1782	 229	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0x1
- stack 0: 0x1
1783	 22B	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0x1
1784	 22C	PUSH2	0080	 	 
- stack 2: 0x53C
- stack 1: 0x1
- stack 0: 0x80
1785	 22F	MLOAD		 	  ;; # read from x4
- stack 2: 0x53C
- stack 1: 0x1
- stack 0: 0x1
1786	 230	ADD		 	  ;; # ADDI 4
- stack 1: 0x53C
- stack 0: 0x2
1787	 231	PUSH2	0080	 	 
- stack 2: 0x53C
- stack 1: 0x2
- stack 0: 0x80
1788	 234	MSTORE		 	  ;; # store to x4
- stack 0: 0x53C
1789	 235	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1790	 237	ADD		 	 
- stack 0: 0x540
1791	 238	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1792	 239	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x23E00020258FFDC0103000D01A40000008600000095017400B40002029A0000
1793	 23A	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x23E00020258FFDC0103000D01A40000008600000095017400B40002029A0000
- stack 0: 0xF0
1794	 23C	SHR		 	 
- stack 1: 0x540
- stack 0: 0x23E
1795	 23D	JUMP		 	 
- stack 0: 0x540
1796	 23E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x540
1797	 23F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1798	 240	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x23E00020258FFDC0103000D01A40000008600000095017400B40002029A0000
1799	 241	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x23E00020258FFDC0103000D01A40000008600000095017400B40002029A0000
- stack 0: 0xE0
1800	 243	SHR		 	 
- stack 1: 0x540
- stack 0: 0x23E0002
1801	 244	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x23E0002
- stack 0: 0xFFFF
1802	 247	AND		 	 
- stack 1: 0x540
- stack 0: 0x2
1803	 248	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0x2
- stack 0: 0x1
1804	 24A	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0x2
1805	 24B	PUSH2	00A0	 	 
- stack 2: 0x540
- stack 1: 0x2
- stack 0: 0xA0
1806	 24E	MSTORE		 	  ;; # store to x5
- stack 0: 0x540
1807	 24F	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1808	 251	ADD		 	 
- stack 0: 0x544
1809	 252	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1810	 253	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x258FFDC0103000D01A40000008600000095017400B40002029A000001BE0000
1811	 254	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x258FFDC0103000D01A40000008600000095017400B40002029A000001BE0000
- stack 0: 0xF0
1812	 256	SHR		 	 
- stack 1: 0x544
- stack 0: 0x258
1813	 257	JUMP		 	 
- stack 0: 0x544
1814	 258	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x544
1815	 259	PUSH2	0080	 	 
- stack 1: 0x544
- stack 0: 0x80
1816	 25C	MLOAD		 	  ;; # read from x4
- stack 1: 0x544
- stack 0: 0x2
1817	 25D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1818	 262	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0x2
1819	 263	PUSH2	00A0	 	 
- stack 2: 0x544
- stack 1: 0x2
- stack 0: 0xA0
1820	 266	MLOAD		 	  ;; # read from x5
- stack 2: 0x544
- stack 1: 0x2
- stack 0: 0x2
1821	 267	PUSH4	FFFFFFFF	 	 
- stack 3: 0x544
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1822	 26C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x544
- stack 1: 0x2
- stack 0: 0x2
1823	 26D	SUB		 	 
- stack 1: 0x544
- stack 0: 0x0
1824	 26E	PUSH2	0276	 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x276
1825	 271	JUMPI		 	 
- stack 0: 0x544
1826	 272	PUSH2	0290	 ;; _neq_after_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 1: 0x544
- stack 0: 0x290
1827	 275	JUMP		 	 
- stack 0: 0x544
1828	 290	JUMPDEST		 ;; _neq_after_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 0: 0x544
1829	 291	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1830	 293	ADD		 	 
- stack 0: 0x548
1831	 294	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1832	 295	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x103000D01A40000008600000095017400B40002029A000001BE00000191FFFF
1833	 296	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x103000D01A40000008600000095017400B40002029A000001BE00000191FFFF
- stack 0: 0xF0
1834	 298	SHR		 	 
- stack 1: 0x548
- stack 0: 0x103
1835	 299	JUMP		 	 
- stack 0: 0x548
1836	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x548
1837	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1838	 105	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x103000D01A40000008600000095017400B40002029A000001BE00000191FFFF
1839	 106	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x103000D01A40000008600000095017400B40002029A000001BE00000191FFFF
- stack 0: 0xE0
1840	 108	SHR		 	 
- stack 1: 0x548
- stack 0: 0x103000D
1841	 109	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x103000D
- stack 0: 0xFFFF
1842	 10C	AND		 	 
- stack 1: 0x548
- stack 0: 0xD
1843	 10D	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0xD
- stack 0: 0x1
1844	 10F	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0xD
1845	 110	PUSH2	0380	 	 
- stack 2: 0x548
- stack 1: 0xD
- stack 0: 0x380
1846	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x548
1847	 114	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1848	 116	ADD		 	 
- stack 0: 0x54C
1849	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1850	 118	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x1A40000008600000095017400B40002029A000001BE00000191FFFF0172000F
1851	 119	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x1A40000008600000095017400B40002029A000001BE00000191FFFF0172000F
- stack 0: 0xF0
1852	 11B	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1A4
1853	 11C	JUMP		 	 
- stack 0: 0x54C
1854	 1A4	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x54C
1855	 1A5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1856	 1A6	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x1A40000008600000095017400B40002029A000001BE00000191FFFF0172000F
1857	 1A7	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x1A40000008600000095017400B40002029A000001BE00000191FFFF0172000F
- stack 0: 0xE0
1858	 1A9	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1A40000
1859	 1AA	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x1A40000
- stack 0: 0xFFFF
1860	 1AD	AND		 	 
- stack 1: 0x54C
- stack 0: 0x0
1861	 1AE	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x1
1862	 1B0	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x0
1863	 1B1	PUSH2	0080	 	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x80
1864	 1B4	MSTORE		 	  ;; # store to x4
- stack 0: 0x54C
1865	 1B5	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1866	 1B7	ADD		 	 
- stack 0: 0x550
1867	 1B8	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1868	 1B9	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x8600000095017400B40002029A000001BE00000191FFFF0172000F01DD0110
1869	 1BA	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x8600000095017400B40002029A000001BE00000191FFFF0172000F01DD0110
- stack 0: 0xF0
1870	 1BC	SHR		 	 
- stack 1: 0x550
- stack 0: 0x86
1871	 1BD	JUMP		 	 
- stack 0: 0x550
1872	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x550
1873	 87	DUP1		 	 
- stack 1: 0x550
- stack 0: 0x550
1874	 88	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0x550
- stack 0: 0x20
1875	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x550
1876	 8C	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1877	 8E	ADD		 	 
- stack 0: 0x554
1878	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1879	 90	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x95017400B40002029A000001BE00000191FFFF0172000F01DD0110021F0001
1880	 91	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x95017400B40002029A000001BE00000191FFFF0172000F01DD0110021F0001
- stack 0: 0xF0
1881	 93	SHR		 	 
- stack 1: 0x554
- stack 0: 0x95
1882	 94	JUMP		 	 
- stack 0: 0x554
1883	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x554
1884	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1885	 97	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x95017400B40002029A000001BE00000191FFFF0172000F01DD0110021F0001
1886	 98	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x95017400B40002029A000001BE00000191FFFF0172000F01DD0110021F0001
- stack 0: 0xE0
1887	 9A	SHR		 	 
- stack 1: 0x554
- stack 0: 0x950174
1888	 9B	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x950174
- stack 0: 0xFFFF
1889	 9E	AND		 	 
- stack 1: 0x554
- stack 0: 0x174
1890	 9F	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x174
- stack 0: 0x1
1891	 A1	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x174
1892	 A2	PUSH2	0020	 	 
- stack 2: 0x554
- stack 1: 0x174
- stack 0: 0x20
1893	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x554
- stack 1: 0x174
- stack 0: 0x550
1894	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x554
- stack 0: 0x6C4
1895	 A7	PUSH2	0020	 	 
- stack 2: 0x554
- stack 1: 0x6C4
- stack 0: 0x20
1896	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x554
1897	 AB	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1898	 AD	ADD		 	 
- stack 0: 0x558
1899	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1900	 AF	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xB40002029A000001BE00000191FFFF0172000F01DD0110021F0001023E0002
1901	 B0	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xB40002029A000001BE00000191FFFF0172000F01DD0110021F0001023E0002
- stack 0: 0xF0
1902	 B2	SHR		 	 
- stack 1: 0x558
- stack 0: 0xB4
1903	 B3	JUMP		 	 
- stack 0: 0x558
1904	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x558
1905	 B5	PUSH2	0020	 	 
- stack 1: 0x558
- stack 0: 0x20
1906	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x558
- stack 0: 0x6C4
1907	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x558
- stack 1: 0x6C4
- stack 0: 0xFFFFFFFF
1908	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x558
- stack 0: 0x6C4
1909	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x558
- stack 1: 0x6C4
- stack 0: 0x558
1910	 C0	MLOAD		 	 
- stack 2: 0x558
- stack 1: 0x6C4
- stack 0: 0xB40002029A000001BE00000191FFFF0172000F01DD0110021F0001023E0002
1911	 C1	PUSH1	E0	 	 
- stack 3: 0x558
- stack 2: 0x6C4
- stack 1: 0xB40002029A000001BE00000191FFFF0172000F01DD0110021F0001023E0002
- stack 0: 0xE0
1912	 C3	SHR		 	 
- stack 2: 0x558
- stack 1: 0x6C4
- stack 0: 0xB40002
1913	 C4	PUSH2	FFFF	 	 
- stack 3: 0x558
- stack 2: 0x6C4
- stack 1: 0xB40002
- stack 0: 0xFFFF
1914	 C7	AND		 	 
- stack 2: 0x558
- stack 1: 0x6C4
- stack 0: 0x2
1915	 C8	PUSH1	01	 	 
- stack 3: 0x558
- stack 2: 0x6C4
- stack 1: 0x2
- stack 0: 0x1
1916	 CA	SIGNEXTEND		 	 
- stack 2: 0x558
- stack 1: 0x6C4
- stack 0: 0x2
1917	 CB	ADD		 	 
- stack 1: 0x558
- stack 0: 0x6C6
1918	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x558
- stack 1: 0x6C6
- stack 0: 0xFFFFFFFF
1919	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x558
- stack 0: 0x6C6
1920	 D2	PUSH1	02	 	 
- stack 2: 0x558
- stack 1: 0x6C6
- stack 0: 0x2
1921	 D4	XOR		 	 
- stack 1: 0x558
- stack 0: 0x6C4
1922	 D5	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
1923	 D6	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
1924	 D8	SHR		 	 
- stack 1: 0x558
- stack 0: 0xF00F
1925	 D9	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0xF00F
- stack 0: 0x1
1926	 DB	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
1927	 DC	PUSH2	0060	 	 
- stack 2: 0x558
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
- stack 0: 0x60
1928	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x558
1929	 E0	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1930	 E2	ADD		 	 
- stack 0: 0x55C
1931	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1932	 E4	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x29A000001BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD8
1933	 E5	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x29A000001BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD8
- stack 0: 0xF0
1934	 E7	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x29A
1935	 E8	JUMP		 	 
- stack 0: 0x55C
1936	 29A	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x55C
1937	 29B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1938	 29C	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x29A000001BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD8
1939	 29D	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x29A000001BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD8
- stack 0: 0xE0
1940	 29F	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x29A0000
1941	 2A0	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x29A0000
- stack 0: 0xFFFF
1942	 2A3	AND		 	 
- stack 1: 0x55C
- stack 0: 0x0
1943	 2A4	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0x1
1944	 2A6	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x0
1945	 2A7	POP		 	 
- stack 0: 0x55C
1946	 2A8	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1947	 2AA	ADD		 	 
- stack 0: 0x560
1948	 2AB	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1949	 2AC	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x1BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD80103000E
1950	 2AD	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x1BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD80103000E
- stack 0: 0xF0
1951	 2AF	SHR		 	 
- stack 1: 0x560
- stack 0: 0x1BE
1952	 2B0	JUMP		 	 
- stack 0: 0x560
1953	 1BE	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x560
1954	 1BF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1955	 1C0	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x1BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD80103000E
1956	 1C1	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x1BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD80103000E
- stack 0: 0xE0
1957	 1C3	SHR		 	 
- stack 1: 0x560
- stack 0: 0x1BE0000
1958	 1C4	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x1BE0000
- stack 0: 0xFFFF
1959	 1C7	AND		 	 
- stack 1: 0x560
- stack 0: 0x0
1960	 1C8	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x1
1961	 1CA	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x0
1962	 1CB	PUSH2	0060	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x60
1963	 1CE	MLOAD		 	  ;; # read from x3
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
1964	 1CF	ADD		 	  ;; # ADDI 3
- stack 1: 0x560
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
1965	 1D0	PUSH2	00C0	 	 
- stack 2: 0x560
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
- stack 0: 0xC0
1966	 1D3	MSTORE		 	  ;; # store to x6
- stack 0: 0x560
1967	 1D4	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1968	 1D6	ADD		 	 
- stack 0: 0x564
1969	 1D7	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1970	 1D8	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x191FFFF0172000F01DD0110021F0001023E00020258FFD80103000E01A40000
1971	 1D9	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x191FFFF0172000F01DD0110021F0001023E00020258FFD80103000E01A40000
- stack 0: 0xF0
1972	 1DB	SHR		 	 
- stack 1: 0x564
- stack 0: 0x191
1973	 1DC	JUMP		 	 
- stack 0: 0x564
1974	 191	JUMPDEST		 ;; __riscvimpl_LUI_fffffeb7	  ;; # instr: lui t4,0xfffff(ignore imm)
- stack 0: 0x564
1975	 192	PUSH4	fffff000	 	 
- stack 1: 0x564
- stack 0: 0xFFFFF000
1976	 197	PUSH2	03A0	 	 
- stack 2: 0x564
- stack 1: 0xFFFFF000
- stack 0: 0x3A0
1977	 19A	MSTORE		 	  ;; # store to x29
- stack 0: 0x564
1978	 19B	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1979	 19D	ADD		 	 
- stack 0: 0x568
1980	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1981	 19F	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x172000F01DD0110021F0001023E00020258FFD80103000E01A4000000860000
1982	 1A0	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x172000F01DD0110021F0001023E00020258FFD80103000E01A4000000860000
- stack 0: 0xF0
1983	 1A2	SHR		 	 
- stack 1: 0x568
- stack 0: 0x172
1984	 1A3	JUMP		 	 
- stack 0: 0x568
1985	 172	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x568
1986	 173	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1987	 174	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x172000F01DD0110021F0001023E00020258FFD80103000E01A4000000860000
1988	 175	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x172000F01DD0110021F0001023E00020258FFD80103000E01A4000000860000
- stack 0: 0xE0
1989	 177	SHR		 	 
- stack 1: 0x568
- stack 0: 0x172000F
1990	 178	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x172000F
- stack 0: 0xFFFF
1991	 17B	AND		 	 
- stack 1: 0x568
- stack 0: 0xF
1992	 17C	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0xF
- stack 0: 0x1
1993	 17E	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0xF
1994	 17F	PUSH2	03A0	 	 
- stack 2: 0x568
- stack 1: 0xF
- stack 0: 0x3A0
1995	 182	MLOAD		 	  ;; # read from x29
- stack 2: 0x568
- stack 1: 0xF
- stack 0: 0xFFFFF000
1996	 183	ADD		 	  ;; # ADDI 29
- stack 1: 0x568
- stack 0: 0xFFFFF00F
1997	 184	PUSH2	03A0	 	 
- stack 2: 0x568
- stack 1: 0xFFFFF00F
- stack 0: 0x3A0
1998	 187	MSTORE		 	  ;; # store to x29
- stack 0: 0x568
1999	 188	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2000	 18A	ADD		 	 
- stack 0: 0x56C
2001	 18B	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2002	 18C	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x1DD0110021F0001023E00020258FFD80103000E01A40000008600000095013C
2003	 18D	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x1DD0110021F0001023E00020258FFD80103000E01A40000008600000095013C
- stack 0: 0xF0
2004	 18F	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x1DD
2005	 190	JUMP		 	 
- stack 0: 0x56C
2006	 1DD	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,144(ignore imm)
- stack 0: 0x56C
2007	 1DE	PUSH2	00C0	 	 
- stack 1: 0x56C
- stack 0: 0xC0
2008	 1E1	MLOAD		 	  ;; # read from x6
- stack 1: 0x56C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
2009	 1E2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x56C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
- stack 0: 0xFFFFFFFF
2010	 1E7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x56C
- stack 0: 0xFFFFF00F
2011	 1E8	PUSH2	03A0	 	 
- stack 2: 0x56C
- stack 1: 0xFFFFF00F
- stack 0: 0x3A0
2012	 1EB	MLOAD		 	  ;; # read from x29
- stack 2: 0x56C
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFF00F
2013	 1EC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x56C
- stack 2: 0xFFFFF00F
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFFFFF
2014	 1F1	AND		 	  ;; # mask to 32 bits
- stack 2: 0x56C
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFF00F
2015	 1F2	SUB		 	 
- stack 1: 0x56C
- stack 0: 0x0
2016	 1F3	PUSH2	01FB	 ;; _neq_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x1FB
2017	 1F6	JUMPI		 	 
- stack 0: 0x56C
2018	 1F7	PUSH2	0215	 ;; _neq_after_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 1: 0x56C
- stack 0: 0x215
2019	 1FA	JUMP		 	 
- stack 0: 0x56C
2020	 215	JUMPDEST		 ;; _neq_after_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 0: 0x56C
2021	 216	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2022	 218	ADD		 	 
- stack 0: 0x570
2023	 219	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2024	 21A	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x21F0001023E00020258FFD80103000E01A40000008600000095013C00B40002
2025	 21B	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x21F0001023E00020258FFD80103000E01A40000008600000095013C00B40002
- stack 0: 0xF0
2026	 21D	SHR		 	 
- stack 1: 0x570
- stack 0: 0x21F
2027	 21E	JUMP		 	 
- stack 0: 0x570
2028	 21F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x570
2029	 220	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
2030	 221	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x21F0001023E00020258FFD80103000E01A40000008600000095013C00B40002
2031	 222	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x21F0001023E00020258FFD80103000E01A40000008600000095013C00B40002
- stack 0: 0xE0
2032	 224	SHR		 	 
- stack 1: 0x570
- stack 0: 0x21F0001
2033	 225	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x21F0001
- stack 0: 0xFFFF
2034	 228	AND		 	 
- stack 1: 0x570
- stack 0: 0x1
2035	 229	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x1
- stack 0: 0x1
2036	 22B	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x1
2037	 22C	PUSH2	0080	 	 
- stack 2: 0x570
- stack 1: 0x1
- stack 0: 0x80
2038	 22F	MLOAD		 	  ;; # read from x4
- stack 2: 0x570
- stack 1: 0x1
- stack 0: 0x0
2039	 230	ADD		 	  ;; # ADDI 4
- stack 1: 0x570
- stack 0: 0x1
2040	 231	PUSH2	0080	 	 
- stack 2: 0x570
- stack 1: 0x1
- stack 0: 0x80
2041	 234	MSTORE		 	  ;; # store to x4
- stack 0: 0x570
2042	 235	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2043	 237	ADD		 	 
- stack 0: 0x574
2044	 238	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2045	 239	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x23E00020258FFD80103000E01A40000008600000095013C00B40002029A0000
2046	 23A	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x23E00020258FFD80103000E01A40000008600000095013C00B40002029A0000
- stack 0: 0xF0
2047	 23C	SHR		 	 
- stack 1: 0x574
- stack 0: 0x23E
2048	 23D	JUMP		 	 
- stack 0: 0x574
2049	 23E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x574
2050	 23F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
2051	 240	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x23E00020258FFD80103000E01A40000008600000095013C00B40002029A0000
2052	 241	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x23E00020258FFD80103000E01A40000008600000095013C00B40002029A0000
- stack 0: 0xE0
2053	 243	SHR		 	 
- stack 1: 0x574
- stack 0: 0x23E0002
2054	 244	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x23E0002
- stack 0: 0xFFFF
2055	 247	AND		 	 
- stack 1: 0x574
- stack 0: 0x2
2056	 248	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x2
- stack 0: 0x1
2057	 24A	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x2
2058	 24B	PUSH2	00A0	 	 
- stack 2: 0x574
- stack 1: 0x2
- stack 0: 0xA0
2059	 24E	MSTORE		 	  ;; # store to x5
- stack 0: 0x574
2060	 24F	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2061	 251	ADD		 	 
- stack 0: 0x578
2062	 252	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2063	 253	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x258FFD80103000E01A40000008600000095013C00B40002029A0000029A0000
2064	 254	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x258FFD80103000E01A40000008600000095013C00B40002029A0000029A0000
- stack 0: 0xF0
2065	 256	SHR		 	 
- stack 1: 0x578
- stack 0: 0x258
2066	 257	JUMP		 	 
- stack 0: 0x578
2067	 258	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x578
2068	 259	PUSH2	0080	 	 
- stack 1: 0x578
- stack 0: 0x80
2069	 25C	MLOAD		 	  ;; # read from x4
- stack 1: 0x578
- stack 0: 0x1
2070	 25D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2071	 262	AND		 	  ;; # mask to 32 bits
- stack 1: 0x578
- stack 0: 0x1
2072	 263	PUSH2	00A0	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0xA0
2073	 266	MLOAD		 	  ;; # read from x5
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x2
2074	 267	PUSH4	FFFFFFFF	 	 
- stack 3: 0x578
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2075	 26C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x2
2076	 26D	SUB		 	 
- stack 1: 0x578
- stack 0: 0x1
2077	 26E	PUSH2	0276	 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x276
2078	 271	JUMPI		 	 
- stack 0: 0x578
2079	 276	JUMPDEST		 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 0: 0x578
2080	 277	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2081	 278	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x258FFD80103000E01A40000008600000095013C00B40002029A0000029A0000
2082	 279	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x258FFD80103000E01A40000008600000095013C00B40002029A0000029A0000
- stack 0: 0xE0
2083	 27B	SHR		 	 
- stack 1: 0x578
- stack 0: 0x258FFD8
2084	 27C	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x258FFD8
- stack 0: 0xFFFF
2085	 27F	AND		 	 
- stack 1: 0x578
- stack 0: 0xFFD8
2086	 280	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0xFFD8
- stack 0: 0x1
2087	 282	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
2088	 283	ADD		 	 
- stack 0: 0x550
2089	 284	PUSH4	FFFFFFFF	 	 
- stack 1: 0x550
- stack 0: 0xFFFFFFFF
2090	 289	AND		 	  ;; # mask to 32 bits
- stack 0: 0x550
2091	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
2092	 28B	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x8600000095017400B40002029A000001BE00000191FFFF0172000F01DD0110
2093	 28C	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x8600000095017400B40002029A000001BE00000191FFFF0172000F01DD0110
- stack 0: 0xF0
2094	 28E	SHR		 	 
- stack 1: 0x550
- stack 0: 0x86
2095	 28F	JUMP		 	 
- stack 0: 0x550
2096	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x550
2097	 87	DUP1		 	 
- stack 1: 0x550
- stack 0: 0x550
2098	 88	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0x550
- stack 0: 0x20
2099	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x550
2100	 8C	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
2101	 8E	ADD		 	 
- stack 0: 0x554
2102	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
2103	 90	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x95017400B40002029A000001BE00000191FFFF0172000F01DD0110021F0001
2104	 91	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x95017400B40002029A000001BE00000191FFFF0172000F01DD0110021F0001
- stack 0: 0xF0
2105	 93	SHR		 	 
- stack 1: 0x554
- stack 0: 0x95
2106	 94	JUMP		 	 
- stack 0: 0x554
2107	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x554
2108	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
2109	 97	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x95017400B40002029A000001BE00000191FFFF0172000F01DD0110021F0001
2110	 98	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x95017400B40002029A000001BE00000191FFFF0172000F01DD0110021F0001
- stack 0: 0xE0
2111	 9A	SHR		 	 
- stack 1: 0x554
- stack 0: 0x950174
2112	 9B	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x950174
- stack 0: 0xFFFF
2113	 9E	AND		 	 
- stack 1: 0x554
- stack 0: 0x174
2114	 9F	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x174
- stack 0: 0x1
2115	 A1	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x174
2116	 A2	PUSH2	0020	 	 
- stack 2: 0x554
- stack 1: 0x174
- stack 0: 0x20
2117	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x554
- stack 1: 0x174
- stack 0: 0x550
2118	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x554
- stack 0: 0x6C4
2119	 A7	PUSH2	0020	 	 
- stack 2: 0x554
- stack 1: 0x6C4
- stack 0: 0x20
2120	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x554
2121	 AB	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
2122	 AD	ADD		 	 
- stack 0: 0x558
2123	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
2124	 AF	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xB40002029A000001BE00000191FFFF0172000F01DD0110021F0001023E0002
2125	 B0	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xB40002029A000001BE00000191FFFF0172000F01DD0110021F0001023E0002
- stack 0: 0xF0
2126	 B2	SHR		 	 
- stack 1: 0x558
- stack 0: 0xB4
2127	 B3	JUMP		 	 
- stack 0: 0x558
2128	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x558
2129	 B5	PUSH2	0020	 	 
- stack 1: 0x558
- stack 0: 0x20
2130	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x558
- stack 0: 0x6C4
2131	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x558
- stack 1: 0x6C4
- stack 0: 0xFFFFFFFF
2132	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x558
- stack 0: 0x6C4
2133	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x558
- stack 1: 0x6C4
- stack 0: 0x558
2134	 C0	MLOAD		 	 
- stack 2: 0x558
- stack 1: 0x6C4
- stack 0: 0xB40002029A000001BE00000191FFFF0172000F01DD0110021F0001023E0002
2135	 C1	PUSH1	E0	 	 
- stack 3: 0x558
- stack 2: 0x6C4
- stack 1: 0xB40002029A000001BE00000191FFFF0172000F01DD0110021F0001023E0002
- stack 0: 0xE0
2136	 C3	SHR		 	 
- stack 2: 0x558
- stack 1: 0x6C4
- stack 0: 0xB40002
2137	 C4	PUSH2	FFFF	 	 
- stack 3: 0x558
- stack 2: 0x6C4
- stack 1: 0xB40002
- stack 0: 0xFFFF
2138	 C7	AND		 	 
- stack 2: 0x558
- stack 1: 0x6C4
- stack 0: 0x2
2139	 C8	PUSH1	01	 	 
- stack 3: 0x558
- stack 2: 0x6C4
- stack 1: 0x2
- stack 0: 0x1
2140	 CA	SIGNEXTEND		 	 
- stack 2: 0x558
- stack 1: 0x6C4
- stack 0: 0x2
2141	 CB	ADD		 	 
- stack 1: 0x558
- stack 0: 0x6C6
2142	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x558
- stack 1: 0x6C6
- stack 0: 0xFFFFFFFF
2143	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x558
- stack 0: 0x6C6
2144	 D2	PUSH1	02	 	 
- stack 2: 0x558
- stack 1: 0x6C6
- stack 0: 0x2
2145	 D4	XOR		 	 
- stack 1: 0x558
- stack 0: 0x6C4
2146	 D5	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
2147	 D6	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
2148	 D8	SHR		 	 
- stack 1: 0x558
- stack 0: 0xF00F
2149	 D9	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0xF00F
- stack 0: 0x1
2150	 DB	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
2151	 DC	PUSH2	0060	 	 
- stack 2: 0x558
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
- stack 0: 0x60
2152	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x558
2153	 E0	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
2154	 E2	ADD		 	 
- stack 0: 0x55C
2155	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
2156	 E4	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x29A000001BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD8
2157	 E5	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x29A000001BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD8
- stack 0: 0xF0
2158	 E7	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x29A
2159	 E8	JUMP		 	 
- stack 0: 0x55C
2160	 29A	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x55C
2161	 29B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
2162	 29C	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x29A000001BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD8
2163	 29D	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x29A000001BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD8
- stack 0: 0xE0
2164	 29F	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x29A0000
2165	 2A0	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x29A0000
- stack 0: 0xFFFF
2166	 2A3	AND		 	 
- stack 1: 0x55C
- stack 0: 0x0
2167	 2A4	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0x1
2168	 2A6	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x0
2169	 2A7	POP		 	 
- stack 0: 0x55C
2170	 2A8	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
2171	 2AA	ADD		 	 
- stack 0: 0x560
2172	 2AB	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
2173	 2AC	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x1BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD80103000E
2174	 2AD	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x1BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD80103000E
- stack 0: 0xF0
2175	 2AF	SHR		 	 
- stack 1: 0x560
- stack 0: 0x1BE
2176	 2B0	JUMP		 	 
- stack 0: 0x560
2177	 1BE	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x560
2178	 1BF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
2179	 1C0	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x1BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD80103000E
2180	 1C1	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x1BE00000191FFFF0172000F01DD0110021F0001023E00020258FFD80103000E
- stack 0: 0xE0
2181	 1C3	SHR		 	 
- stack 1: 0x560
- stack 0: 0x1BE0000
2182	 1C4	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x1BE0000
- stack 0: 0xFFFF
2183	 1C7	AND		 	 
- stack 1: 0x560
- stack 0: 0x0
2184	 1C8	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x1
2185	 1CA	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x0
2186	 1CB	PUSH2	0060	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x60
2187	 1CE	MLOAD		 	  ;; # read from x3
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
2188	 1CF	ADD		 	  ;; # ADDI 3
- stack 1: 0x560
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
2189	 1D0	PUSH2	00C0	 	 
- stack 2: 0x560
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
- stack 0: 0xC0
2190	 1D3	MSTORE		 	  ;; # store to x6
- stack 0: 0x560
2191	 1D4	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
2192	 1D6	ADD		 	 
- stack 0: 0x564
2193	 1D7	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2194	 1D8	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x191FFFF0172000F01DD0110021F0001023E00020258FFD80103000E01A40000
2195	 1D9	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x191FFFF0172000F01DD0110021F0001023E00020258FFD80103000E01A40000
- stack 0: 0xF0
2196	 1DB	SHR		 	 
- stack 1: 0x564
- stack 0: 0x191
2197	 1DC	JUMP		 	 
- stack 0: 0x564
2198	 191	JUMPDEST		 ;; __riscvimpl_LUI_fffffeb7	  ;; # instr: lui t4,0xfffff(ignore imm)
- stack 0: 0x564
2199	 192	PUSH4	fffff000	 	 
- stack 1: 0x564
- stack 0: 0xFFFFF000
2200	 197	PUSH2	03A0	 	 
- stack 2: 0x564
- stack 1: 0xFFFFF000
- stack 0: 0x3A0
2201	 19A	MSTORE		 	  ;; # store to x29
- stack 0: 0x564
2202	 19B	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2203	 19D	ADD		 	 
- stack 0: 0x568
2204	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2205	 19F	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x172000F01DD0110021F0001023E00020258FFD80103000E01A4000000860000
2206	 1A0	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x172000F01DD0110021F0001023E00020258FFD80103000E01A4000000860000
- stack 0: 0xF0
2207	 1A2	SHR		 	 
- stack 1: 0x568
- stack 0: 0x172
2208	 1A3	JUMP		 	 
- stack 0: 0x568
2209	 172	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x568
2210	 173	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
2211	 174	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x172000F01DD0110021F0001023E00020258FFD80103000E01A4000000860000
2212	 175	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x172000F01DD0110021F0001023E00020258FFD80103000E01A4000000860000
- stack 0: 0xE0
2213	 177	SHR		 	 
- stack 1: 0x568
- stack 0: 0x172000F
2214	 178	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x172000F
- stack 0: 0xFFFF
2215	 17B	AND		 	 
- stack 1: 0x568
- stack 0: 0xF
2216	 17C	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0xF
- stack 0: 0x1
2217	 17E	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0xF
2218	 17F	PUSH2	03A0	 	 
- stack 2: 0x568
- stack 1: 0xF
- stack 0: 0x3A0
2219	 182	MLOAD		 	  ;; # read from x29
- stack 2: 0x568
- stack 1: 0xF
- stack 0: 0xFFFFF000
2220	 183	ADD		 	  ;; # ADDI 29
- stack 1: 0x568
- stack 0: 0xFFFFF00F
2221	 184	PUSH2	03A0	 	 
- stack 2: 0x568
- stack 1: 0xFFFFF00F
- stack 0: 0x3A0
2222	 187	MSTORE		 	  ;; # store to x29
- stack 0: 0x568
2223	 188	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2224	 18A	ADD		 	 
- stack 0: 0x56C
2225	 18B	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2226	 18C	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x1DD0110021F0001023E00020258FFD80103000E01A40000008600000095013C
2227	 18D	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x1DD0110021F0001023E00020258FFD80103000E01A40000008600000095013C
- stack 0: 0xF0
2228	 18F	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x1DD
2229	 190	JUMP		 	 
- stack 0: 0x56C
2230	 1DD	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,144(ignore imm)
- stack 0: 0x56C
2231	 1DE	PUSH2	00C0	 	 
- stack 1: 0x56C
- stack 0: 0xC0
2232	 1E1	MLOAD		 	  ;; # read from x6
- stack 1: 0x56C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
2233	 1E2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x56C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
- stack 0: 0xFFFFFFFF
2234	 1E7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x56C
- stack 0: 0xFFFFF00F
2235	 1E8	PUSH2	03A0	 	 
- stack 2: 0x56C
- stack 1: 0xFFFFF00F
- stack 0: 0x3A0
2236	 1EB	MLOAD		 	  ;; # read from x29
- stack 2: 0x56C
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFF00F
2237	 1EC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x56C
- stack 2: 0xFFFFF00F
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFFFFF
2238	 1F1	AND		 	  ;; # mask to 32 bits
- stack 2: 0x56C
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFF00F
2239	 1F2	SUB		 	 
- stack 1: 0x56C
- stack 0: 0x0
2240	 1F3	PUSH2	01FB	 ;; _neq_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x1FB
2241	 1F6	JUMPI		 	 
- stack 0: 0x56C
2242	 1F7	PUSH2	0215	 ;; _neq_after_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 1: 0x56C
- stack 0: 0x215
2243	 1FA	JUMP		 	 
- stack 0: 0x56C
2244	 215	JUMPDEST		 ;; _neq_after_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 0: 0x56C
2245	 216	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2246	 218	ADD		 	 
- stack 0: 0x570
2247	 219	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2248	 21A	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x21F0001023E00020258FFD80103000E01A40000008600000095013C00B40002
2249	 21B	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x21F0001023E00020258FFD80103000E01A40000008600000095013C00B40002
- stack 0: 0xF0
2250	 21D	SHR		 	 
- stack 1: 0x570
- stack 0: 0x21F
2251	 21E	JUMP		 	 
- stack 0: 0x570
2252	 21F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x570
2253	 220	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
2254	 221	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x21F0001023E00020258FFD80103000E01A40000008600000095013C00B40002
2255	 222	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x21F0001023E00020258FFD80103000E01A40000008600000095013C00B40002
- stack 0: 0xE0
2256	 224	SHR		 	 
- stack 1: 0x570
- stack 0: 0x21F0001
2257	 225	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x21F0001
- stack 0: 0xFFFF
2258	 228	AND		 	 
- stack 1: 0x570
- stack 0: 0x1
2259	 229	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x1
- stack 0: 0x1
2260	 22B	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x1
2261	 22C	PUSH2	0080	 	 
- stack 2: 0x570
- stack 1: 0x1
- stack 0: 0x80
2262	 22F	MLOAD		 	  ;; # read from x4
- stack 2: 0x570
- stack 1: 0x1
- stack 0: 0x1
2263	 230	ADD		 	  ;; # ADDI 4
- stack 1: 0x570
- stack 0: 0x2
2264	 231	PUSH2	0080	 	 
- stack 2: 0x570
- stack 1: 0x2
- stack 0: 0x80
2265	 234	MSTORE		 	  ;; # store to x4
- stack 0: 0x570
2266	 235	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2267	 237	ADD		 	 
- stack 0: 0x574
2268	 238	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2269	 239	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x23E00020258FFD80103000E01A40000008600000095013C00B40002029A0000
2270	 23A	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x23E00020258FFD80103000E01A40000008600000095013C00B40002029A0000
- stack 0: 0xF0
2271	 23C	SHR		 	 
- stack 1: 0x574
- stack 0: 0x23E
2272	 23D	JUMP		 	 
- stack 0: 0x574
2273	 23E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x574
2274	 23F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
2275	 240	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x23E00020258FFD80103000E01A40000008600000095013C00B40002029A0000
2276	 241	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x23E00020258FFD80103000E01A40000008600000095013C00B40002029A0000
- stack 0: 0xE0
2277	 243	SHR		 	 
- stack 1: 0x574
- stack 0: 0x23E0002
2278	 244	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x23E0002
- stack 0: 0xFFFF
2279	 247	AND		 	 
- stack 1: 0x574
- stack 0: 0x2
2280	 248	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x2
- stack 0: 0x1
2281	 24A	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x2
2282	 24B	PUSH2	00A0	 	 
- stack 2: 0x574
- stack 1: 0x2
- stack 0: 0xA0
2283	 24E	MSTORE		 	  ;; # store to x5
- stack 0: 0x574
2284	 24F	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2285	 251	ADD		 	 
- stack 0: 0x578
2286	 252	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2287	 253	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x258FFD80103000E01A40000008600000095013C00B40002029A0000029A0000
2288	 254	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x258FFD80103000E01A40000008600000095013C00B40002029A0000029A0000
- stack 0: 0xF0
2289	 256	SHR		 	 
- stack 1: 0x578
- stack 0: 0x258
2290	 257	JUMP		 	 
- stack 0: 0x578
2291	 258	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x578
2292	 259	PUSH2	0080	 	 
- stack 1: 0x578
- stack 0: 0x80
2293	 25C	MLOAD		 	  ;; # read from x4
- stack 1: 0x578
- stack 0: 0x2
2294	 25D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x578
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2295	 262	AND		 	  ;; # mask to 32 bits
- stack 1: 0x578
- stack 0: 0x2
2296	 263	PUSH2	00A0	 	 
- stack 2: 0x578
- stack 1: 0x2
- stack 0: 0xA0
2297	 266	MLOAD		 	  ;; # read from x5
- stack 2: 0x578
- stack 1: 0x2
- stack 0: 0x2
2298	 267	PUSH4	FFFFFFFF	 	 
- stack 3: 0x578
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2299	 26C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x578
- stack 1: 0x2
- stack 0: 0x2
2300	 26D	SUB		 	 
- stack 1: 0x578
- stack 0: 0x0
2301	 26E	PUSH2	0276	 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x276
2302	 271	JUMPI		 	 
- stack 0: 0x578
2303	 272	PUSH2	0290	 ;; _neq_after_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 1: 0x578
- stack 0: 0x290
2304	 275	JUMP		 	 
- stack 0: 0x578
2305	 290	JUMPDEST		 ;; _neq_after_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 0: 0x578
2306	 291	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2307	 293	ADD		 	 
- stack 0: 0x57C
2308	 294	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2309	 295	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x103000E01A40000008600000095013C00B40002029A0000029A000001BE0000
2310	 296	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x103000E01A40000008600000095013C00B40002029A0000029A000001BE0000
- stack 0: 0xF0
2311	 298	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x103
2312	 299	JUMP		 	 
- stack 0: 0x57C
2313	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x57C
2314	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2315	 105	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x103000E01A40000008600000095013C00B40002029A0000029A000001BE0000
2316	 106	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x103000E01A40000008600000095013C00B40002029A0000029A000001BE0000
- stack 0: 0xE0
2317	 108	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x103000E
2318	 109	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x103000E
- stack 0: 0xFFFF
2319	 10C	AND		 	 
- stack 1: 0x57C
- stack 0: 0xE
2320	 10D	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0xE
- stack 0: 0x1
2321	 10F	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0xE
2322	 110	PUSH2	0380	 	 
- stack 2: 0x57C
- stack 1: 0xE
- stack 0: 0x380
2323	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x57C
2324	 114	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2325	 116	ADD		 	 
- stack 0: 0x580
2326	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2327	 118	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x1A40000008600000095013C00B40002029A0000029A000001BE000000E9FF00
2328	 119	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x1A40000008600000095013C00B40002029A0000029A000001BE000000E9FF00
- stack 0: 0xF0
2329	 11B	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1A4
2330	 11C	JUMP		 	 
- stack 0: 0x580
2331	 1A4	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x580
2332	 1A5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2333	 1A6	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x1A40000008600000095013C00B40002029A0000029A000001BE000000E9FF00
2334	 1A7	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x1A40000008600000095013C00B40002029A0000029A000001BE000000E9FF00
- stack 0: 0xE0
2335	 1A9	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1A40000
2336	 1AA	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x1A40000
- stack 0: 0xFFFF
2337	 1AD	AND		 	 
- stack 1: 0x580
- stack 0: 0x0
2338	 1AE	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x1
2339	 1B0	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x0
2340	 1B1	PUSH2	0080	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x80
2341	 1B4	MSTORE		 	  ;; # store to x4
- stack 0: 0x580
2342	 1B5	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2343	 1B7	ADD		 	 
- stack 0: 0x584
2344	 1B8	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2345	 1B9	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x8600000095013C00B40002029A0000029A000001BE000000E9FF0001DD00DC
2346	 1BA	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x8600000095013C00B40002029A0000029A000001BE000000E9FF0001DD00DC
- stack 0: 0xF0
2347	 1BC	SHR		 	 
- stack 1: 0x584
- stack 0: 0x86
2348	 1BD	JUMP		 	 
- stack 0: 0x584
2349	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x584
2350	 87	DUP1		 	 
- stack 1: 0x584
- stack 0: 0x584
2351	 88	PUSH2	0020	 	 
- stack 2: 0x584
- stack 1: 0x584
- stack 0: 0x20
2352	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x584
2353	 8C	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2354	 8E	ADD		 	 
- stack 0: 0x588
2355	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2356	 90	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x95013C00B40002029A0000029A000001BE000000E9FF0001DD00DC021F0001
2357	 91	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x95013C00B40002029A0000029A000001BE000000E9FF0001DD00DC021F0001
- stack 0: 0xF0
2358	 93	SHR		 	 
- stack 1: 0x588
- stack 0: 0x95
2359	 94	JUMP		 	 
- stack 0: 0x588
2360	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x588
2361	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2362	 97	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x95013C00B40002029A0000029A000001BE000000E9FF0001DD00DC021F0001
2363	 98	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x95013C00B40002029A0000029A000001BE000000E9FF0001DD00DC021F0001
- stack 0: 0xE0
2364	 9A	SHR		 	 
- stack 1: 0x588
- stack 0: 0x95013C
2365	 9B	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x95013C
- stack 0: 0xFFFF
2366	 9E	AND		 	 
- stack 1: 0x588
- stack 0: 0x13C
2367	 9F	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x13C
- stack 0: 0x1
2368	 A1	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x13C
2369	 A2	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0x13C
- stack 0: 0x20
2370	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x588
- stack 1: 0x13C
- stack 0: 0x584
2371	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x588
- stack 0: 0x6C0
2372	 A7	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0x6C0
- stack 0: 0x20
2373	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x588
2374	 AB	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2375	 AD	ADD		 	 
- stack 0: 0x58C
2376	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2377	 AF	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xB40002029A0000029A000001BE000000E9FF0001DD00DC021F0001023E0002
2378	 B0	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0xB40002029A0000029A000001BE000000E9FF0001DD00DC021F0001023E0002
- stack 0: 0xF0
2379	 B2	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xB4
2380	 B3	JUMP		 	 
- stack 0: 0x58C
2381	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x58C
2382	 B5	PUSH2	0020	 	 
- stack 1: 0x58C
- stack 0: 0x20
2383	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x58C
- stack 0: 0x6C0
2384	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x58C
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
2385	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x58C
- stack 0: 0x6C0
2386	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x58C
- stack 1: 0x6C0
- stack 0: 0x58C
2387	 C0	MLOAD		 	 
- stack 2: 0x58C
- stack 1: 0x6C0
- stack 0: 0xB40002029A0000029A000001BE000000E9FF0001DD00DC021F0001023E0002
2388	 C1	PUSH1	E0	 	 
- stack 3: 0x58C
- stack 2: 0x6C0
- stack 1: 0xB40002029A0000029A000001BE000000E9FF0001DD00DC021F0001023E0002
- stack 0: 0xE0
2389	 C3	SHR		 	 
- stack 2: 0x58C
- stack 1: 0x6C0
- stack 0: 0xB40002
2390	 C4	PUSH2	FFFF	 	 
- stack 3: 0x58C
- stack 2: 0x6C0
- stack 1: 0xB40002
- stack 0: 0xFFFF
2391	 C7	AND		 	 
- stack 2: 0x58C
- stack 1: 0x6C0
- stack 0: 0x2
2392	 C8	PUSH1	01	 	 
- stack 3: 0x58C
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0x1
2393	 CA	SIGNEXTEND		 	 
- stack 2: 0x58C
- stack 1: 0x6C0
- stack 0: 0x2
2394	 CB	ADD		 	 
- stack 1: 0x58C
- stack 0: 0x6C2
2395	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x58C
- stack 1: 0x6C2
- stack 0: 0xFFFFFFFF
2396	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x58C
- stack 0: 0x6C2
2397	 D2	PUSH1	02	 	 
- stack 2: 0x58C
- stack 1: 0x6C2
- stack 0: 0x2
2398	 D4	XOR		 	 
- stack 1: 0x58C
- stack 0: 0x6C0
2399	 D5	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
2400	 D6	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
- stack 0: 0xF0
2401	 D8	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xFF00
2402	 D9	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0xFF00
- stack 0: 0x1
2403	 DB	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2404	 DC	PUSH2	0060	 	 
- stack 2: 0x58C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x60
2405	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x58C
2406	 E0	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2407	 E2	ADD		 	 
- stack 0: 0x590
2408	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2409	 E4	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x29A0000029A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD8
2410	 E5	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x29A0000029A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD8
- stack 0: 0xF0
2411	 E7	SHR		 	 
- stack 1: 0x590
- stack 0: 0x29A
2412	 E8	JUMP		 	 
- stack 0: 0x590
2413	 29A	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x590
2414	 29B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2415	 29C	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x29A0000029A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD8
2416	 29D	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x29A0000029A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD8
- stack 0: 0xE0
2417	 29F	SHR		 	 
- stack 1: 0x590
- stack 0: 0x29A0000
2418	 2A0	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x29A0000
- stack 0: 0xFFFF
2419	 2A3	AND		 	 
- stack 1: 0x590
- stack 0: 0x0
2420	 2A4	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x1
2421	 2A6	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x0
2422	 2A7	POP		 	 
- stack 0: 0x590
2423	 2A8	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2424	 2AA	ADD		 	 
- stack 0: 0x594
2425	 2AB	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2426	 2AC	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x29A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F
2427	 2AD	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x29A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F
- stack 0: 0xF0
2428	 2AF	SHR		 	 
- stack 1: 0x594
- stack 0: 0x29A
2429	 2B0	JUMP		 	 
- stack 0: 0x594
2430	 29A	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x594
2431	 29B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2432	 29C	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x29A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F
2433	 29D	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x29A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F
- stack 0: 0xE0
2434	 29F	SHR		 	 
- stack 1: 0x594
- stack 0: 0x29A0000
2435	 2A0	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x29A0000
- stack 0: 0xFFFF
2436	 2A3	AND		 	 
- stack 1: 0x594
- stack 0: 0x0
2437	 2A4	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2438	 2A6	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x0
2439	 2A7	POP		 	 
- stack 0: 0x594
2440	 2A8	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2441	 2AA	ADD		 	 
- stack 0: 0x598
2442	 2AB	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2443	 2AC	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F01A40000
2444	 2AD	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x1BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F01A40000
- stack 0: 0xF0
2445	 2AF	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1BE
2446	 2B0	JUMP		 	 
- stack 0: 0x598
2447	 1BE	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x598
2448	 1BF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2449	 1C0	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F01A40000
2450	 1C1	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x1BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F01A40000
- stack 0: 0xE0
2451	 1C3	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1BE0000
2452	 1C4	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x1BE0000
- stack 0: 0xFFFF
2453	 1C7	AND		 	 
- stack 1: 0x598
- stack 0: 0x0
2454	 1C8	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x1
2455	 1CA	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x0
2456	 1CB	PUSH2	0060	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x60
2457	 1CE	MLOAD		 	  ;; # read from x3
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2458	 1CF	ADD		 	  ;; # ADDI 3
- stack 1: 0x598
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2459	 1D0	PUSH2	00C0	 	 
- stack 2: 0x598
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xC0
2460	 1D3	MSTORE		 	  ;; # store to x6
- stack 0: 0x598
2461	 1D4	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2462	 1D6	ADD		 	 
- stack 0: 0x59C
2463	 1D7	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2464	 1D8	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0xE9FF0001DD00DC021F0001023E00020258FFD80103000F01A4000000860000
2465	 1D9	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0xE9FF0001DD00DC021F0001023E00020258FFD80103000F01A4000000860000
- stack 0: 0xF0
2466	 1DB	SHR		 	 
- stack 1: 0x59C
- stack 0: 0xE9
2467	 1DC	JUMP		 	 
- stack 0: 0x59C
2468	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x59C
2469	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2470	 EB	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0xE9FF0001DD00DC021F0001023E00020258FFD80103000F01A4000000860000
2471	 EC	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0xE9FF0001DD00DC021F0001023E00020258FFD80103000F01A4000000860000
- stack 0: 0xE0
2472	 EE	SHR		 	 
- stack 1: 0x59C
- stack 0: 0xE9FF00
2473	 EF	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0xE9FF00
- stack 0: 0xFFFF
2474	 F2	AND		 	 
- stack 1: 0x59C
- stack 0: 0xFF00
2475	 F3	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0xFF00
- stack 0: 0x1
2476	 F5	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2477	 F6	PUSH2	03A0	 	 
- stack 2: 0x59C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
2478	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x59C
2479	 FA	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2480	 FC	ADD		 	 
- stack 0: 0x5A0
2481	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2482	 FE	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x1DD00DC021F0001023E00020258FFD80103000F01A40000008600000095010A
2483	 FF	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x1DD00DC021F0001023E00020258FFD80103000F01A40000008600000095010A
- stack 0: 0xF0
2484	 101	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x1DD
2485	 102	JUMP		 	 
- stack 0: 0x5A0
2486	 1DD	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,144(ignore imm)
- stack 0: 0x5A0
2487	 1DE	PUSH2	00C0	 	 
- stack 1: 0x5A0
- stack 0: 0xC0
2488	 1E1	MLOAD		 	  ;; # read from x6
- stack 1: 0x5A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2489	 1E2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFFFFFFFF
2490	 1E7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A0
- stack 0: 0xFFFFFF00
2491	 1E8	PUSH2	03A0	 	 
- stack 2: 0x5A0
- stack 1: 0xFFFFFF00
- stack 0: 0x3A0
2492	 1EB	MLOAD		 	  ;; # read from x29
- stack 2: 0x5A0
- stack 1: 0xFFFFFF00
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2493	 1EC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A0
- stack 2: 0xFFFFFF00
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFFFFFFFF
2494	 1F1	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A0
- stack 1: 0xFFFFFF00
- stack 0: 0xFFFFFF00
2495	 1F2	SUB		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2496	 1F3	PUSH2	01FB	 ;; _neq_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x1FB
2497	 1F6	JUMPI		 	 
- stack 0: 0x5A0
2498	 1F7	PUSH2	0215	 ;; _neq_after_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 1: 0x5A0
- stack 0: 0x215
2499	 1FA	JUMP		 	 
- stack 0: 0x5A0
2500	 215	JUMPDEST		 ;; _neq_after_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 0: 0x5A0
2501	 216	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2502	 218	ADD		 	 
- stack 0: 0x5A4
2503	 219	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2504	 21A	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x21F0001023E00020258FFD80103000F01A40000008600000095010A00B40002
2505	 21B	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x21F0001023E00020258FFD80103000F01A40000008600000095010A00B40002
- stack 0: 0xF0
2506	 21D	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x21F
2507	 21E	JUMP		 	 
- stack 0: 0x5A4
2508	 21F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5A4
2509	 220	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2510	 221	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x21F0001023E00020258FFD80103000F01A40000008600000095010A00B40002
2511	 222	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x21F0001023E00020258FFD80103000F01A40000008600000095010A00B40002
- stack 0: 0xE0
2512	 224	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x21F0001
2513	 225	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x21F0001
- stack 0: 0xFFFF
2514	 228	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x1
2515	 229	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x1
2516	 22B	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x1
2517	 22C	PUSH2	0080	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x80
2518	 22F	MLOAD		 	  ;; # read from x4
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x0
2519	 230	ADD		 	  ;; # ADDI 4
- stack 1: 0x5A4
- stack 0: 0x1
2520	 231	PUSH2	0080	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x80
2521	 234	MSTORE		 	  ;; # store to x4
- stack 0: 0x5A4
2522	 235	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2523	 237	ADD		 	 
- stack 0: 0x5A8
2524	 238	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2525	 239	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x23E00020258FFD80103000F01A40000008600000095010A00B40002015F0001
2526	 23A	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x23E00020258FFD80103000F01A40000008600000095010A00B40002015F0001
- stack 0: 0xF0
2527	 23C	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x23E
2528	 23D	JUMP		 	 
- stack 0: 0x5A8
2529	 23E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5A8
2530	 23F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2531	 240	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x23E00020258FFD80103000F01A40000008600000095010A00B40002015F0001
2532	 241	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x23E00020258FFD80103000F01A40000008600000095010A00B40002015F0001
- stack 0: 0xE0
2533	 243	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x23E0002
2534	 244	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x23E0002
- stack 0: 0xFFFF
2535	 247	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x2
2536	 248	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0x1
2537	 24A	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x2
2538	 24B	PUSH2	00A0	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0xA0
2539	 24E	MSTORE		 	  ;; # store to x5
- stack 0: 0x5A8
2540	 24F	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2541	 251	ADD		 	 
- stack 0: 0x5AC
2542	 252	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2543	 253	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x258FFD80103000F01A40000008600000095010A00B40002015F00010172FFF0
2544	 254	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x258FFD80103000F01A40000008600000095010A00B40002015F00010172FFF0
- stack 0: 0xF0
2545	 256	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x258
2546	 257	JUMP		 	 
- stack 0: 0x5AC
2547	 258	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x5AC
2548	 259	PUSH2	0080	 	 
- stack 1: 0x5AC
- stack 0: 0x80
2549	 25C	MLOAD		 	  ;; # read from x4
- stack 1: 0x5AC
- stack 0: 0x1
2550	 25D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2551	 262	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5AC
- stack 0: 0x1
2552	 263	PUSH2	00A0	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0xA0
2553	 266	MLOAD		 	  ;; # read from x5
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x2
2554	 267	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5AC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2555	 26C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x2
2556	 26D	SUB		 	 
- stack 1: 0x5AC
- stack 0: 0x1
2557	 26E	PUSH2	0276	 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x276
2558	 271	JUMPI		 	 
- stack 0: 0x5AC
2559	 276	JUMPDEST		 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 0: 0x5AC
2560	 277	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2561	 278	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x258FFD80103000F01A40000008600000095010A00B40002015F00010172FFF0
2562	 279	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x258FFD80103000F01A40000008600000095010A00B40002015F00010172FFF0
- stack 0: 0xE0
2563	 27B	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x258FFD8
2564	 27C	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x258FFD8
- stack 0: 0xFFFF
2565	 27F	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFD8
2566	 280	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xFFD8
- stack 0: 0x1
2567	 282	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
2568	 283	ADD		 	 
- stack 0: 0x584
2569	 284	PUSH4	FFFFFFFF	 	 
- stack 1: 0x584
- stack 0: 0xFFFFFFFF
2570	 289	AND		 	  ;; # mask to 32 bits
- stack 0: 0x584
2571	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2572	 28B	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x8600000095013C00B40002029A0000029A000001BE000000E9FF0001DD00DC
2573	 28C	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x8600000095013C00B40002029A0000029A000001BE000000E9FF0001DD00DC
- stack 0: 0xF0
2574	 28E	SHR		 	 
- stack 1: 0x584
- stack 0: 0x86
2575	 28F	JUMP		 	 
- stack 0: 0x584
2576	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x584
2577	 87	DUP1		 	 
- stack 1: 0x584
- stack 0: 0x584
2578	 88	PUSH2	0020	 	 
- stack 2: 0x584
- stack 1: 0x584
- stack 0: 0x20
2579	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x584
2580	 8C	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2581	 8E	ADD		 	 
- stack 0: 0x588
2582	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2583	 90	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x95013C00B40002029A0000029A000001BE000000E9FF0001DD00DC021F0001
2584	 91	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x95013C00B40002029A0000029A000001BE000000E9FF0001DD00DC021F0001
- stack 0: 0xF0
2585	 93	SHR		 	 
- stack 1: 0x588
- stack 0: 0x95
2586	 94	JUMP		 	 
- stack 0: 0x588
2587	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x588
2588	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2589	 97	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x95013C00B40002029A0000029A000001BE000000E9FF0001DD00DC021F0001
2590	 98	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x95013C00B40002029A0000029A000001BE000000E9FF0001DD00DC021F0001
- stack 0: 0xE0
2591	 9A	SHR		 	 
- stack 1: 0x588
- stack 0: 0x95013C
2592	 9B	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x95013C
- stack 0: 0xFFFF
2593	 9E	AND		 	 
- stack 1: 0x588
- stack 0: 0x13C
2594	 9F	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x13C
- stack 0: 0x1
2595	 A1	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x13C
2596	 A2	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0x13C
- stack 0: 0x20
2597	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x588
- stack 1: 0x13C
- stack 0: 0x584
2598	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x588
- stack 0: 0x6C0
2599	 A7	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0x6C0
- stack 0: 0x20
2600	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x588
2601	 AB	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2602	 AD	ADD		 	 
- stack 0: 0x58C
2603	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2604	 AF	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xB40002029A0000029A000001BE000000E9FF0001DD00DC021F0001023E0002
2605	 B0	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0xB40002029A0000029A000001BE000000E9FF0001DD00DC021F0001023E0002
- stack 0: 0xF0
2606	 B2	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xB4
2607	 B3	JUMP		 	 
- stack 0: 0x58C
2608	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x58C
2609	 B5	PUSH2	0020	 	 
- stack 1: 0x58C
- stack 0: 0x20
2610	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x58C
- stack 0: 0x6C0
2611	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x58C
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
2612	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x58C
- stack 0: 0x6C0
2613	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x58C
- stack 1: 0x6C0
- stack 0: 0x58C
2614	 C0	MLOAD		 	 
- stack 2: 0x58C
- stack 1: 0x6C0
- stack 0: 0xB40002029A0000029A000001BE000000E9FF0001DD00DC021F0001023E0002
2615	 C1	PUSH1	E0	 	 
- stack 3: 0x58C
- stack 2: 0x6C0
- stack 1: 0xB40002029A0000029A000001BE000000E9FF0001DD00DC021F0001023E0002
- stack 0: 0xE0
2616	 C3	SHR		 	 
- stack 2: 0x58C
- stack 1: 0x6C0
- stack 0: 0xB40002
2617	 C4	PUSH2	FFFF	 	 
- stack 3: 0x58C
- stack 2: 0x6C0
- stack 1: 0xB40002
- stack 0: 0xFFFF
2618	 C7	AND		 	 
- stack 2: 0x58C
- stack 1: 0x6C0
- stack 0: 0x2
2619	 C8	PUSH1	01	 	 
- stack 3: 0x58C
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0x1
2620	 CA	SIGNEXTEND		 	 
- stack 2: 0x58C
- stack 1: 0x6C0
- stack 0: 0x2
2621	 CB	ADD		 	 
- stack 1: 0x58C
- stack 0: 0x6C2
2622	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x58C
- stack 1: 0x6C2
- stack 0: 0xFFFFFFFF
2623	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x58C
- stack 0: 0x6C2
2624	 D2	PUSH1	02	 	 
- stack 2: 0x58C
- stack 1: 0x6C2
- stack 0: 0x2
2625	 D4	XOR		 	 
- stack 1: 0x58C
- stack 0: 0x6C0
2626	 D5	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
2627	 D6	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
- stack 0: 0xF0
2628	 D8	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xFF00
2629	 D9	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0xFF00
- stack 0: 0x1
2630	 DB	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2631	 DC	PUSH2	0060	 	 
- stack 2: 0x58C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x60
2632	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x58C
2633	 E0	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2634	 E2	ADD		 	 
- stack 0: 0x590
2635	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2636	 E4	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x29A0000029A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD8
2637	 E5	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x29A0000029A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD8
- stack 0: 0xF0
2638	 E7	SHR		 	 
- stack 1: 0x590
- stack 0: 0x29A
2639	 E8	JUMP		 	 
- stack 0: 0x590
2640	 29A	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x590
2641	 29B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2642	 29C	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x29A0000029A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD8
2643	 29D	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x29A0000029A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD8
- stack 0: 0xE0
2644	 29F	SHR		 	 
- stack 1: 0x590
- stack 0: 0x29A0000
2645	 2A0	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x29A0000
- stack 0: 0xFFFF
2646	 2A3	AND		 	 
- stack 1: 0x590
- stack 0: 0x0
2647	 2A4	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x1
2648	 2A6	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x0
2649	 2A7	POP		 	 
- stack 0: 0x590
2650	 2A8	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2651	 2AA	ADD		 	 
- stack 0: 0x594
2652	 2AB	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2653	 2AC	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x29A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F
2654	 2AD	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x29A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F
- stack 0: 0xF0
2655	 2AF	SHR		 	 
- stack 1: 0x594
- stack 0: 0x29A
2656	 2B0	JUMP		 	 
- stack 0: 0x594
2657	 29A	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x594
2658	 29B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2659	 29C	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x29A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F
2660	 29D	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x29A000001BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F
- stack 0: 0xE0
2661	 29F	SHR		 	 
- stack 1: 0x594
- stack 0: 0x29A0000
2662	 2A0	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x29A0000
- stack 0: 0xFFFF
2663	 2A3	AND		 	 
- stack 1: 0x594
- stack 0: 0x0
2664	 2A4	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2665	 2A6	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x0
2666	 2A7	POP		 	 
- stack 0: 0x594
2667	 2A8	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2668	 2AA	ADD		 	 
- stack 0: 0x598
2669	 2AB	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2670	 2AC	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F01A40000
2671	 2AD	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x1BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F01A40000
- stack 0: 0xF0
2672	 2AF	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1BE
2673	 2B0	JUMP		 	 
- stack 0: 0x598
2674	 1BE	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x598
2675	 1BF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2676	 1C0	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F01A40000
2677	 1C1	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x1BE000000E9FF0001DD00DC021F0001023E00020258FFD80103000F01A40000
- stack 0: 0xE0
2678	 1C3	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1BE0000
2679	 1C4	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x1BE0000
- stack 0: 0xFFFF
2680	 1C7	AND		 	 
- stack 1: 0x598
- stack 0: 0x0
2681	 1C8	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x1
2682	 1CA	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x0
2683	 1CB	PUSH2	0060	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x60
2684	 1CE	MLOAD		 	  ;; # read from x3
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2685	 1CF	ADD		 	  ;; # ADDI 3
- stack 1: 0x598
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2686	 1D0	PUSH2	00C0	 	 
- stack 2: 0x598
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xC0
2687	 1D3	MSTORE		 	  ;; # store to x6
- stack 0: 0x598
2688	 1D4	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2689	 1D6	ADD		 	 
- stack 0: 0x59C
2690	 1D7	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2691	 1D8	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0xE9FF0001DD00DC021F0001023E00020258FFD80103000F01A4000000860000
2692	 1D9	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0xE9FF0001DD00DC021F0001023E00020258FFD80103000F01A4000000860000
- stack 0: 0xF0
2693	 1DB	SHR		 	 
- stack 1: 0x59C
- stack 0: 0xE9
2694	 1DC	JUMP		 	 
- stack 0: 0x59C
2695	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x59C
2696	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2697	 EB	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0xE9FF0001DD00DC021F0001023E00020258FFD80103000F01A4000000860000
2698	 EC	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0xE9FF0001DD00DC021F0001023E00020258FFD80103000F01A4000000860000
- stack 0: 0xE0
2699	 EE	SHR		 	 
- stack 1: 0x59C
- stack 0: 0xE9FF00
2700	 EF	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0xE9FF00
- stack 0: 0xFFFF
2701	 F2	AND		 	 
- stack 1: 0x59C
- stack 0: 0xFF00
2702	 F3	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0xFF00
- stack 0: 0x1
2703	 F5	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2704	 F6	PUSH2	03A0	 	 
- stack 2: 0x59C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
2705	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x59C
2706	 FA	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2707	 FC	ADD		 	 
- stack 0: 0x5A0
2708	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2709	 FE	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x1DD00DC021F0001023E00020258FFD80103000F01A40000008600000095010A
2710	 FF	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x1DD00DC021F0001023E00020258FFD80103000F01A40000008600000095010A
- stack 0: 0xF0
2711	 101	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x1DD
2712	 102	JUMP		 	 
- stack 0: 0x5A0
2713	 1DD	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,144(ignore imm)
- stack 0: 0x5A0
2714	 1DE	PUSH2	00C0	 	 
- stack 1: 0x5A0
- stack 0: 0xC0
2715	 1E1	MLOAD		 	  ;; # read from x6
- stack 1: 0x5A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2716	 1E2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFFFFFFFF
2717	 1E7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A0
- stack 0: 0xFFFFFF00
2718	 1E8	PUSH2	03A0	 	 
- stack 2: 0x5A0
- stack 1: 0xFFFFFF00
- stack 0: 0x3A0
2719	 1EB	MLOAD		 	  ;; # read from x29
- stack 2: 0x5A0
- stack 1: 0xFFFFFF00
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2720	 1EC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A0
- stack 2: 0xFFFFFF00
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFFFFFFFF
2721	 1F1	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A0
- stack 1: 0xFFFFFF00
- stack 0: 0xFFFFFF00
2722	 1F2	SUB		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2723	 1F3	PUSH2	01FB	 ;; _neq_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x1FB
2724	 1F6	JUMPI		 	 
- stack 0: 0x5A0
2725	 1F7	PUSH2	0215	 ;; _neq_after_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 1: 0x5A0
- stack 0: 0x215
2726	 1FA	JUMP		 	 
- stack 0: 0x5A0
2727	 215	JUMPDEST		 ;; _neq_after_a52aaa7370d744fa3eed1a03cc3961c5a99c2ac5c59051bb3353ac2936193a26	 
- stack 0: 0x5A0
2728	 216	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2729	 218	ADD		 	 
- stack 0: 0x5A4
2730	 219	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2731	 21A	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x21F0001023E00020258FFD80103000F01A40000008600000095010A00B40002
2732	 21B	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x21F0001023E00020258FFD80103000F01A40000008600000095010A00B40002
- stack 0: 0xF0
2733	 21D	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x21F
2734	 21E	JUMP		 	 
- stack 0: 0x5A4
2735	 21F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5A4
2736	 220	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2737	 221	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x21F0001023E00020258FFD80103000F01A40000008600000095010A00B40002
2738	 222	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x21F0001023E00020258FFD80103000F01A40000008600000095010A00B40002
- stack 0: 0xE0
2739	 224	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x21F0001
2740	 225	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x21F0001
- stack 0: 0xFFFF
2741	 228	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x1
2742	 229	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x1
2743	 22B	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x1
2744	 22C	PUSH2	0080	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x80
2745	 22F	MLOAD		 	  ;; # read from x4
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x1
2746	 230	ADD		 	  ;; # ADDI 4
- stack 1: 0x5A4
- stack 0: 0x2
2747	 231	PUSH2	0080	 	 
- stack 2: 0x5A4
- stack 1: 0x2
- stack 0: 0x80
2748	 234	MSTORE		 	  ;; # store to x4
- stack 0: 0x5A4
2749	 235	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2750	 237	ADD		 	 
- stack 0: 0x5A8
2751	 238	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2752	 239	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x23E00020258FFD80103000F01A40000008600000095010A00B40002015F0001
2753	 23A	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x23E00020258FFD80103000F01A40000008600000095010A00B40002015F0001
- stack 0: 0xF0
2754	 23C	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x23E
2755	 23D	JUMP		 	 
- stack 0: 0x5A8
2756	 23E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5A8
2757	 23F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2758	 240	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x23E00020258FFD80103000F01A40000008600000095010A00B40002015F0001
2759	 241	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x23E00020258FFD80103000F01A40000008600000095010A00B40002015F0001
- stack 0: 0xE0
2760	 243	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x23E0002
2761	 244	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x23E0002
- stack 0: 0xFFFF
2762	 247	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x2
2763	 248	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0x1
2764	 24A	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x2
2765	 24B	PUSH2	00A0	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0xA0
2766	 24E	MSTORE		 	  ;; # store to x5
- stack 0: 0x5A8
2767	 24F	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2768	 251	ADD		 	 
- stack 0: 0x5AC
2769	 252	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2770	 253	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x258FFD80103000F01A40000008600000095010A00B40002015F00010172FFF0
2771	 254	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x258FFD80103000F01A40000008600000095010A00B40002015F00010172FFF0
- stack 0: 0xF0
2772	 256	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x258
2773	 257	JUMP		 	 
- stack 0: 0x5AC
2774	 258	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x5AC
2775	 259	PUSH2	0080	 	 
- stack 1: 0x5AC
- stack 0: 0x80
2776	 25C	MLOAD		 	  ;; # read from x4
- stack 1: 0x5AC
- stack 0: 0x2
2777	 25D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2778	 262	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5AC
- stack 0: 0x2
2779	 263	PUSH2	00A0	 	 
- stack 2: 0x5AC
- stack 1: 0x2
- stack 0: 0xA0
2780	 266	MLOAD		 	  ;; # read from x5
- stack 2: 0x5AC
- stack 1: 0x2
- stack 0: 0x2
2781	 267	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5AC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2782	 26C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5AC
- stack 1: 0x2
- stack 0: 0x2
2783	 26D	SUB		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2784	 26E	PUSH2	0276	 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x276
2785	 271	JUMPI		 	 
- stack 0: 0x5AC
2786	 272	PUSH2	0290	 ;; _neq_after_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 1: 0x5AC
- stack 0: 0x290
2787	 275	JUMP		 	 
- stack 0: 0x5AC
2788	 290	JUMPDEST		 ;; _neq_after_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 0: 0x5AC
2789	 291	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2790	 293	ADD		 	 
- stack 0: 0x5B0
2791	 294	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2792	 295	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x103000F01A40000008600000095010A00B40002015F00010172FFF0011D00B0
2793	 296	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x103000F01A40000008600000095010A00B40002015F00010172FFF0011D00B0
- stack 0: 0xF0
2794	 298	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x103
2795	 299	JUMP		 	 
- stack 0: 0x5B0
2796	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5B0
2797	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2798	 105	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x103000F01A40000008600000095010A00B40002015F00010172FFF0011D00B0
2799	 106	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x103000F01A40000008600000095010A00B40002015F00010172FFF0011D00B0
- stack 0: 0xE0
2800	 108	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x103000F
2801	 109	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x103000F
- stack 0: 0xFFFF
2802	 10C	AND		 	 
- stack 1: 0x5B0
- stack 0: 0xF
2803	 10D	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0xF
- stack 0: 0x1
2804	 10F	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0xF
2805	 110	PUSH2	0380	 	 
- stack 2: 0x5B0
- stack 1: 0xF
- stack 0: 0x380
2806	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x5B0
2807	 114	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2808	 116	ADD		 	 
- stack 0: 0x5B4
2809	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2810	 118	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1A40000008600000095010A00B40002015F00010172FFF0011D00B0021F0001
2811	 119	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x1A40000008600000095010A00B40002015F00010172FFF0011D00B0021F0001
- stack 0: 0xF0
2812	 11B	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1A4
2813	 11C	JUMP		 	 
- stack 0: 0x5B4
2814	 1A4	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5B4
2815	 1A5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2816	 1A6	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1A40000008600000095010A00B40002015F00010172FFF0011D00B0021F0001
2817	 1A7	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x1A40000008600000095010A00B40002015F00010172FFF0011D00B0021F0001
- stack 0: 0xE0
2818	 1A9	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1A40000
2819	 1AA	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x1A40000
- stack 0: 0xFFFF
2820	 1AD	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2821	 1AE	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x1
2822	 1B0	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2823	 1B1	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x80
2824	 1B4	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B4
2825	 1B5	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2826	 1B7	ADD		 	 
- stack 0: 0x5B8
2827	 1B8	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2828	 1B9	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x8600000095010A00B40002015F00010172FFF0011D00B0021F0001023E0002
2829	 1BA	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x8600000095010A00B40002015F00010172FFF0011D00B0021F0001023E0002
- stack 0: 0xF0
2830	 1BC	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x86
2831	 1BD	JUMP		 	 
- stack 0: 0x5B8
2832	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5B8
2833	 87	DUP1		 	 
- stack 1: 0x5B8
- stack 0: 0x5B8
2834	 88	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0x5B8
- stack 0: 0x20
2835	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B8
2836	 8C	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2837	 8E	ADD		 	 
- stack 0: 0x5BC
2838	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2839	 90	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x95010A00B40002015F00010172FFF0011D00B0021F0001023E00020258FFE0
2840	 91	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x95010A00B40002015F00010172FFF0011D00B0021F0001023E00020258FFE0
- stack 0: 0xF0
2841	 93	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x95
2842	 94	JUMP		 	 
- stack 0: 0x5BC
2843	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x5BC
2844	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2845	 97	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x95010A00B40002015F00010172FFF0011D00B0021F0001023E00020258FFE0
2846	 98	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x95010A00B40002015F00010172FFF0011D00B0021F0001023E00020258FFE0
- stack 0: 0xE0
2847	 9A	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x95010A
2848	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x95010A
- stack 0: 0xFFFF
2849	 9E	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x10A
2850	 9F	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x10A
- stack 0: 0x1
2851	 A1	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x10A
2852	 A2	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0x10A
- stack 0: 0x20
2853	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5BC
- stack 1: 0x10A
- stack 0: 0x5B8
2854	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5BC
- stack 0: 0x6C2
2855	 A7	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0x6C2
- stack 0: 0x20
2856	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5BC
2857	 AB	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2858	 AD	ADD		 	 
- stack 0: 0x5C0
2859	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2860	 AF	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xB40002015F00010172FFF0011D00B0021F0001023E00020258FFE001030010
2861	 B0	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0xB40002015F00010172FFF0011D00B0021F0001023E00020258FFE001030010
- stack 0: 0xF0
2862	 B2	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xB4
2863	 B3	JUMP		 	 
- stack 0: 0x5C0
2864	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x5C0
2865	 B5	PUSH2	0020	 	 
- stack 1: 0x5C0
- stack 0: 0x20
2866	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5C0
- stack 0: 0x6C2
2867	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x6C2
- stack 0: 0xFFFFFFFF
2868	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C0
- stack 0: 0x6C2
2869	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5C0
- stack 1: 0x6C2
- stack 0: 0x5C0
2870	 C0	MLOAD		 	 
- stack 2: 0x5C0
- stack 1: 0x6C2
- stack 0: 0xB40002015F00010172FFF0011D00B0021F0001023E00020258FFE001030010
2871	 C1	PUSH1	E0	 	 
- stack 3: 0x5C0
- stack 2: 0x6C2
- stack 1: 0xB40002015F00010172FFF0011D00B0021F0001023E00020258FFE001030010
- stack 0: 0xE0
2872	 C3	SHR		 	 
- stack 2: 0x5C0
- stack 1: 0x6C2
- stack 0: 0xB40002
2873	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5C0
- stack 2: 0x6C2
- stack 1: 0xB40002
- stack 0: 0xFFFF
2874	 C7	AND		 	 
- stack 2: 0x5C0
- stack 1: 0x6C2
- stack 0: 0x2
2875	 C8	PUSH1	01	 	 
- stack 3: 0x5C0
- stack 2: 0x6C2
- stack 1: 0x2
- stack 0: 0x1
2876	 CA	SIGNEXTEND		 	 
- stack 2: 0x5C0
- stack 1: 0x6C2
- stack 0: 0x2
2877	 CB	ADD		 	 
- stack 1: 0x5C0
- stack 0: 0x6C4
2878	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x6C4
- stack 0: 0xFFFFFFFF
2879	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C0
- stack 0: 0x6C4
2880	 D2	PUSH1	02	 	 
- stack 2: 0x5C0
- stack 1: 0x6C4
- stack 0: 0x2
2881	 D4	XOR		 	 
- stack 1: 0x5C0
- stack 0: 0x6C6
2882	 D5	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xFF0000000000000000000000000000000000000000000000000000000000000
2883	 D6	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0xFF0000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
2884	 D8	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xFF0
2885	 D9	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xFF0
- stack 0: 0x1
2886	 DB	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xFF0
2887	 DC	PUSH2	0060	 	 
- stack 2: 0x5C0
- stack 1: 0xFF0
- stack 0: 0x60
2888	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x5C0
2889	 E0	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2890	 E2	ADD		 	 
- stack 0: 0x5C4
2891	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2892	 E4	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x15F00010172FFF0011D00B0021F0001023E00020258FFE00103001001A40000
2893	 E5	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x15F00010172FFF0011D00B0021F0001023E00020258FFE00103001001A40000
- stack 0: 0xF0
2894	 E7	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x15F
2895	 E8	JUMP		 	 
- stack 0: 0x5C4
2896	 15F	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x5C4
2897	 160	PUSH4	00001000	 	 
- stack 1: 0x5C4
- stack 0: 0x1000
2898	 165	PUSH2	03A0	 	 
- stack 2: 0x5C4
- stack 1: 0x1000
- stack 0: 0x3A0
2899	 168	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C4
2900	 169	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2901	 16B	ADD		 	 
- stack 0: 0x5C8
2902	 16C	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2903	 16D	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x172FFF0011D00B0021F0001023E00020258FFE00103001001A4000000860000
2904	 16E	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x172FFF0011D00B0021F0001023E00020258FFE00103001001A4000000860000
- stack 0: 0xF0
2905	 170	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x172
2906	 171	JUMP		 	 
- stack 0: 0x5C8
2907	 172	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x5C8
2908	 173	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2909	 174	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x172FFF0011D00B0021F0001023E00020258FFE00103001001A4000000860000
2910	 175	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x172FFF0011D00B0021F0001023E00020258FFE00103001001A4000000860000
- stack 0: 0xE0
2911	 177	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x172FFF0
2912	 178	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x172FFF0
- stack 0: 0xFFFF
2913	 17B	AND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFF0
2914	 17C	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0xFFF0
- stack 0: 0x1
2915	 17E	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2916	 17F	PUSH2	03A0	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
2917	 182	MLOAD		 	  ;; # read from x29
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x1000
2918	 183	ADD		 	  ;; # ADDI 29
- stack 1: 0x5C8
- stack 0: 0xFF0
2919	 184	PUSH2	03A0	 	 
- stack 2: 0x5C8
- stack 1: 0xFF0
- stack 0: 0x3A0
2920	 187	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C8
2921	 188	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2922	 18A	ADD		 	 
- stack 0: 0x5CC
2923	 18B	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2924	 18C	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x11D00B0021F0001023E00020258FFE00103001001A4000000860000009500E0
2925	 18D	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x11D00B0021F0001023E00020258FFE00103001001A4000000860000009500E0
- stack 0: 0xF0
2926	 18F	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x11D
2927	 190	JUMP		 	 
- stack 0: 0x5CC
2928	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x5CC
2929	 11E	PUSH2	0060	 	 
- stack 1: 0x5CC
- stack 0: 0x60
2930	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x5CC
- stack 0: 0xFF0
2931	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5CC
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
2932	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5CC
- stack 0: 0xFF0
2933	 128	PUSH2	03A0	 	 
- stack 2: 0x5CC
- stack 1: 0xFF0
- stack 0: 0x3A0
2934	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x5CC
- stack 1: 0xFF0
- stack 0: 0xFF0
2935	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5CC
- stack 2: 0xFF0
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
2936	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5CC
- stack 1: 0xFF0
- stack 0: 0xFF0
2937	 132	SUB		 	 
- stack 1: 0x5CC
- stack 0: 0x0
2938	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0x13B
2939	 136	JUMPI		 	 
- stack 0: 0x5CC
2940	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x5CC
- stack 0: 0x155
2941	 13A	JUMP		 	 
- stack 0: 0x5CC
2942	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x5CC
2943	 156	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2944	 158	ADD		 	 
- stack 0: 0x5D0
2945	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2946	 15A	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x21F0001023E00020258FFE00103001001A4000000860000009500E0029A0000
2947	 15B	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x21F0001023E00020258FFE00103001001A4000000860000009500E0029A0000
- stack 0: 0xF0
2948	 15D	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x21F
2949	 15E	JUMP		 	 
- stack 0: 0x5D0
2950	 21F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D0
2951	 220	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2952	 221	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x21F0001023E00020258FFE00103001001A4000000860000009500E0029A0000
2953	 222	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x21F0001023E00020258FFE00103001001A4000000860000009500E0029A0000
- stack 0: 0xE0
2954	 224	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x21F0001
2955	 225	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x21F0001
- stack 0: 0xFFFF
2956	 228	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x1
2957	 229	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x1
2958	 22B	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x1
2959	 22C	PUSH2	0080	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x80
2960	 22F	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x0
2961	 230	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D0
- stack 0: 0x1
2962	 231	PUSH2	0080	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x80
2963	 234	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D0
2964	 235	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2965	 237	ADD		 	 
- stack 0: 0x5D4
2966	 238	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2967	 239	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x23E00020258FFE00103001001A4000000860000009500E0029A000000B40002
2968	 23A	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x23E00020258FFE00103001001A4000000860000009500E0029A000000B40002
- stack 0: 0xF0
2969	 23C	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x23E
2970	 23D	JUMP		 	 
- stack 0: 0x5D4
2971	 23E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D4
2972	 23F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2973	 240	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x23E00020258FFE00103001001A4000000860000009500E0029A000000B40002
2974	 241	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x23E00020258FFE00103001001A4000000860000009500E0029A000000B40002
- stack 0: 0xE0
2975	 243	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x23E0002
2976	 244	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x23E0002
- stack 0: 0xFFFF
2977	 247	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x2
2978	 248	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x1
2979	 24A	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x2
2980	 24B	PUSH2	00A0	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0xA0
2981	 24E	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D4
2982	 24F	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2983	 251	ADD		 	 
- stack 0: 0x5D8
2984	 252	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2985	 253	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x258FFE00103001001A4000000860000009500E0029A000000B400020191FFFF
2986	 254	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x258FFE00103001001A4000000860000009500E0029A000000B400020191FFFF
- stack 0: 0xF0
2987	 256	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x258
2988	 257	JUMP		 	 
- stack 0: 0x5D8
2989	 258	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x5D8
2990	 259	PUSH2	0080	 	 
- stack 1: 0x5D8
- stack 0: 0x80
2991	 25C	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D8
- stack 0: 0x1
2992	 25D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2993	 262	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D8
- stack 0: 0x1
2994	 263	PUSH2	00A0	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0xA0
2995	 266	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x2
2996	 267	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2997	 26C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x2
2998	 26D	SUB		 	 
- stack 1: 0x5D8
- stack 0: 0x1
2999	 26E	PUSH2	0276	 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x276
3000	 271	JUMPI		 	 
- stack 0: 0x5D8
3001	 276	JUMPDEST		 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 0: 0x5D8
3002	 277	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
3003	 278	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x258FFE00103001001A4000000860000009500E0029A000000B400020191FFFF
3004	 279	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x258FFE00103001001A4000000860000009500E0029A000000B400020191FFFF
- stack 0: 0xE0
3005	 27B	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x258FFE0
3006	 27C	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x258FFE0
- stack 0: 0xFFFF
3007	 27F	AND		 	 
- stack 1: 0x5D8
- stack 0: 0xFFE0
3008	 280	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0xFFE0
- stack 0: 0x1
3009	 282	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3010	 283	ADD		 	 
- stack 0: 0x5B8
3011	 284	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5B8
- stack 0: 0xFFFFFFFF
3012	 289	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5B8
3013	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
3014	 28B	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x8600000095010A00B40002015F00010172FFF0011D00B0021F0001023E0002
3015	 28C	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x8600000095010A00B40002015F00010172FFF0011D00B0021F0001023E0002
- stack 0: 0xF0
3016	 28E	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x86
3017	 28F	JUMP		 	 
- stack 0: 0x5B8
3018	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5B8
3019	 87	DUP1		 	 
- stack 1: 0x5B8
- stack 0: 0x5B8
3020	 88	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0x5B8
- stack 0: 0x20
3021	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B8
3022	 8C	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
3023	 8E	ADD		 	 
- stack 0: 0x5BC
3024	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
3025	 90	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x95010A00B40002015F00010172FFF0011D00B0021F0001023E00020258FFE0
3026	 91	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x95010A00B40002015F00010172FFF0011D00B0021F0001023E00020258FFE0
- stack 0: 0xF0
3027	 93	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x95
3028	 94	JUMP		 	 
- stack 0: 0x5BC
3029	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x5BC
3030	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
3031	 97	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x95010A00B40002015F00010172FFF0011D00B0021F0001023E00020258FFE0
3032	 98	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x95010A00B40002015F00010172FFF0011D00B0021F0001023E00020258FFE0
- stack 0: 0xE0
3033	 9A	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x95010A
3034	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x95010A
- stack 0: 0xFFFF
3035	 9E	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x10A
3036	 9F	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x10A
- stack 0: 0x1
3037	 A1	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x10A
3038	 A2	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0x10A
- stack 0: 0x20
3039	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5BC
- stack 1: 0x10A
- stack 0: 0x5B8
3040	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5BC
- stack 0: 0x6C2
3041	 A7	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0x6C2
- stack 0: 0x20
3042	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5BC
3043	 AB	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
3044	 AD	ADD		 	 
- stack 0: 0x5C0
3045	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
3046	 AF	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xB40002015F00010172FFF0011D00B0021F0001023E00020258FFE001030010
3047	 B0	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0xB40002015F00010172FFF0011D00B0021F0001023E00020258FFE001030010
- stack 0: 0xF0
3048	 B2	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xB4
3049	 B3	JUMP		 	 
- stack 0: 0x5C0
3050	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x5C0
3051	 B5	PUSH2	0020	 	 
- stack 1: 0x5C0
- stack 0: 0x20
3052	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5C0
- stack 0: 0x6C2
3053	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x6C2
- stack 0: 0xFFFFFFFF
3054	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C0
- stack 0: 0x6C2
3055	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5C0
- stack 1: 0x6C2
- stack 0: 0x5C0
3056	 C0	MLOAD		 	 
- stack 2: 0x5C0
- stack 1: 0x6C2
- stack 0: 0xB40002015F00010172FFF0011D00B0021F0001023E00020258FFE001030010
3057	 C1	PUSH1	E0	 	 
- stack 3: 0x5C0
- stack 2: 0x6C2
- stack 1: 0xB40002015F00010172FFF0011D00B0021F0001023E00020258FFE001030010
- stack 0: 0xE0
3058	 C3	SHR		 	 
- stack 2: 0x5C0
- stack 1: 0x6C2
- stack 0: 0xB40002
3059	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5C0
- stack 2: 0x6C2
- stack 1: 0xB40002
- stack 0: 0xFFFF
3060	 C7	AND		 	 
- stack 2: 0x5C0
- stack 1: 0x6C2
- stack 0: 0x2
3061	 C8	PUSH1	01	 	 
- stack 3: 0x5C0
- stack 2: 0x6C2
- stack 1: 0x2
- stack 0: 0x1
3062	 CA	SIGNEXTEND		 	 
- stack 2: 0x5C0
- stack 1: 0x6C2
- stack 0: 0x2
3063	 CB	ADD		 	 
- stack 1: 0x5C0
- stack 0: 0x6C4
3064	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x6C4
- stack 0: 0xFFFFFFFF
3065	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C0
- stack 0: 0x6C4
3066	 D2	PUSH1	02	 	 
- stack 2: 0x5C0
- stack 1: 0x6C4
- stack 0: 0x2
3067	 D4	XOR		 	 
- stack 1: 0x5C0
- stack 0: 0x6C6
3068	 D5	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xFF0000000000000000000000000000000000000000000000000000000000000
3069	 D6	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0xFF0000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
3070	 D8	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xFF0
3071	 D9	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xFF0
- stack 0: 0x1
3072	 DB	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xFF0
3073	 DC	PUSH2	0060	 	 
- stack 2: 0x5C0
- stack 1: 0xFF0
- stack 0: 0x60
3074	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x5C0
3075	 E0	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
3076	 E2	ADD		 	 
- stack 0: 0x5C4
3077	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
3078	 E4	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x15F00010172FFF0011D00B0021F0001023E00020258FFE00103001001A40000
3079	 E5	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x15F00010172FFF0011D00B0021F0001023E00020258FFE00103001001A40000
- stack 0: 0xF0
3080	 E7	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x15F
3081	 E8	JUMP		 	 
- stack 0: 0x5C4
3082	 15F	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x5C4
3083	 160	PUSH4	00001000	 	 
- stack 1: 0x5C4
- stack 0: 0x1000
3084	 165	PUSH2	03A0	 	 
- stack 2: 0x5C4
- stack 1: 0x1000
- stack 0: 0x3A0
3085	 168	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C4
3086	 169	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
3087	 16B	ADD		 	 
- stack 0: 0x5C8
3088	 16C	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
3089	 16D	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x172FFF0011D00B0021F0001023E00020258FFE00103001001A4000000860000
3090	 16E	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x172FFF0011D00B0021F0001023E00020258FFE00103001001A4000000860000
- stack 0: 0xF0
3091	 170	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x172
3092	 171	JUMP		 	 
- stack 0: 0x5C8
3093	 172	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x5C8
3094	 173	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
3095	 174	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x172FFF0011D00B0021F0001023E00020258FFE00103001001A4000000860000
3096	 175	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x172FFF0011D00B0021F0001023E00020258FFE00103001001A4000000860000
- stack 0: 0xE0
3097	 177	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x172FFF0
3098	 178	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x172FFF0
- stack 0: 0xFFFF
3099	 17B	AND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFF0
3100	 17C	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0xFFF0
- stack 0: 0x1
3101	 17E	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3102	 17F	PUSH2	03A0	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
3103	 182	MLOAD		 	  ;; # read from x29
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x1000
3104	 183	ADD		 	  ;; # ADDI 29
- stack 1: 0x5C8
- stack 0: 0xFF0
3105	 184	PUSH2	03A0	 	 
- stack 2: 0x5C8
- stack 1: 0xFF0
- stack 0: 0x3A0
3106	 187	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C8
3107	 188	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
3108	 18A	ADD		 	 
- stack 0: 0x5CC
3109	 18B	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
3110	 18C	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x11D00B0021F0001023E00020258FFE00103001001A4000000860000009500E0
3111	 18D	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x11D00B0021F0001023E00020258FFE00103001001A4000000860000009500E0
- stack 0: 0xF0
3112	 18F	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x11D
3113	 190	JUMP		 	 
- stack 0: 0x5CC
3114	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x5CC
3115	 11E	PUSH2	0060	 	 
- stack 1: 0x5CC
- stack 0: 0x60
3116	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x5CC
- stack 0: 0xFF0
3117	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5CC
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
3118	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5CC
- stack 0: 0xFF0
3119	 128	PUSH2	03A0	 	 
- stack 2: 0x5CC
- stack 1: 0xFF0
- stack 0: 0x3A0
3120	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x5CC
- stack 1: 0xFF0
- stack 0: 0xFF0
3121	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5CC
- stack 2: 0xFF0
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
3122	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5CC
- stack 1: 0xFF0
- stack 0: 0xFF0
3123	 132	SUB		 	 
- stack 1: 0x5CC
- stack 0: 0x0
3124	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0x13B
3125	 136	JUMPI		 	 
- stack 0: 0x5CC
3126	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x5CC
- stack 0: 0x155
3127	 13A	JUMP		 	 
- stack 0: 0x5CC
3128	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x5CC
3129	 156	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
3130	 158	ADD		 	 
- stack 0: 0x5D0
3131	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
3132	 15A	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x21F0001023E00020258FFE00103001001A4000000860000009500E0029A0000
3133	 15B	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x21F0001023E00020258FFE00103001001A4000000860000009500E0029A0000
- stack 0: 0xF0
3134	 15D	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x21F
3135	 15E	JUMP		 	 
- stack 0: 0x5D0
3136	 21F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D0
3137	 220	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
3138	 221	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x21F0001023E00020258FFE00103001001A4000000860000009500E0029A0000
3139	 222	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x21F0001023E00020258FFE00103001001A4000000860000009500E0029A0000
- stack 0: 0xE0
3140	 224	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x21F0001
3141	 225	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x21F0001
- stack 0: 0xFFFF
3142	 228	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x1
3143	 229	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x1
3144	 22B	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x1
3145	 22C	PUSH2	0080	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x80
3146	 22F	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x1
3147	 230	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D0
- stack 0: 0x2
3148	 231	PUSH2	0080	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0x80
3149	 234	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D0
3150	 235	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
3151	 237	ADD		 	 
- stack 0: 0x5D4
3152	 238	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3153	 239	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x23E00020258FFE00103001001A4000000860000009500E0029A000000B40002
3154	 23A	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x23E00020258FFE00103001001A4000000860000009500E0029A000000B40002
- stack 0: 0xF0
3155	 23C	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x23E
3156	 23D	JUMP		 	 
- stack 0: 0x5D4
3157	 23E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D4
3158	 23F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
3159	 240	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x23E00020258FFE00103001001A4000000860000009500E0029A000000B40002
3160	 241	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x23E00020258FFE00103001001A4000000860000009500E0029A000000B40002
- stack 0: 0xE0
3161	 243	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x23E0002
3162	 244	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x23E0002
- stack 0: 0xFFFF
3163	 247	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x2
3164	 248	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x1
3165	 24A	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x2
3166	 24B	PUSH2	00A0	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0xA0
3167	 24E	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D4
3168	 24F	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3169	 251	ADD		 	 
- stack 0: 0x5D8
3170	 252	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3171	 253	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x258FFE00103001001A4000000860000009500E0029A000000B400020191FFFF
3172	 254	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x258FFE00103001001A4000000860000009500E0029A000000B400020191FFFF
- stack 0: 0xF0
3173	 256	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x258
3174	 257	JUMP		 	 
- stack 0: 0x5D8
3175	 258	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x5D8
3176	 259	PUSH2	0080	 	 
- stack 1: 0x5D8
- stack 0: 0x80
3177	 25C	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D8
- stack 0: 0x2
3178	 25D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3179	 262	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D8
- stack 0: 0x2
3180	 263	PUSH2	00A0	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0xA0
3181	 266	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0x2
3182	 267	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3183	 26C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0x2
3184	 26D	SUB		 	 
- stack 1: 0x5D8
- stack 0: 0x0
3185	 26E	PUSH2	0276	 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 2: 0x5D8
- stack 1: 0x0
- stack 0: 0x276
3186	 271	JUMPI		 	 
- stack 0: 0x5D8
3187	 272	PUSH2	0290	 ;; _neq_after_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 1: 0x5D8
- stack 0: 0x290
3188	 275	JUMP		 	 
- stack 0: 0x5D8
3189	 290	JUMPDEST		 ;; _neq_after_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 0: 0x5D8
3190	 291	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3191	 293	ADD		 	 
- stack 0: 0x5DC
3192	 294	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3193	 295	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x103001001A4000000860000009500E0029A000000B400020191FFFF0172000F
3194	 296	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x103001001A4000000860000009500E0029A000000B400020191FFFF0172000F
- stack 0: 0xF0
3195	 298	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x103
3196	 299	JUMP		 	 
- stack 0: 0x5DC
3197	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5DC
3198	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
3199	 105	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x103001001A4000000860000009500E0029A000000B400020191FFFF0172000F
3200	 106	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x103001001A4000000860000009500E0029A000000B400020191FFFF0172000F
- stack 0: 0xE0
3201	 108	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x1030010
3202	 109	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x1030010
- stack 0: 0xFFFF
3203	 10C	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x10
3204	 10D	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x10
- stack 0: 0x1
3205	 10F	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x10
3206	 110	PUSH2	0380	 	 
- stack 2: 0x5DC
- stack 1: 0x10
- stack 0: 0x380
3207	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x5DC
3208	 114	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
3209	 116	ADD		 	 
- stack 0: 0x5E0
3210	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
3211	 118	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x1A4000000860000009500E0029A000000B400020191FFFF0172000F011D0080
3212	 119	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x1A4000000860000009500E0029A000000B400020191FFFF0172000F011D0080
- stack 0: 0xF0
3213	 11B	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x1A4
3214	 11C	JUMP		 	 
- stack 0: 0x5E0
3215	 1A4	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5E0
3216	 1A5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
3217	 1A6	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x1A4000000860000009500E0029A000000B400020191FFFF0172000F011D0080
3218	 1A7	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x1A4000000860000009500E0029A000000B400020191FFFF0172000F011D0080
- stack 0: 0xE0
3219	 1A9	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x1A40000
3220	 1AA	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x1A40000
- stack 0: 0xFFFF
3221	 1AD	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x0
3222	 1AE	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x0
- stack 0: 0x1
3223	 1B0	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x0
3224	 1B1	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x0
- stack 0: 0x80
3225	 1B4	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E0
3226	 1B5	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
3227	 1B7	ADD		 	 
- stack 0: 0x5E4
3228	 1B8	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3229	 1B9	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x860000009500E0029A000000B400020191FFFF0172000F011D0080021F0001
3230	 1BA	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x860000009500E0029A000000B400020191FFFF0172000F011D0080021F0001
- stack 0: 0xF0
3231	 1BC	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x86
3232	 1BD	JUMP		 	 
- stack 0: 0x5E4
3233	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5E4
3234	 87	DUP1		 	 
- stack 1: 0x5E4
- stack 0: 0x5E4
3235	 88	PUSH2	0020	 	 
- stack 2: 0x5E4
- stack 1: 0x5E4
- stack 0: 0x20
3236	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E4
3237	 8C	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3238	 8E	ADD		 	 
- stack 0: 0x5E8
3239	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3240	 90	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x9500E0029A000000B400020191FFFF0172000F011D0080021F0001023E0002
3241	 91	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x9500E0029A000000B400020191FFFF0172000F011D0080021F0001023E0002
- stack 0: 0xF0
3242	 93	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x95
3243	 94	JUMP		 	 
- stack 0: 0x5E8
3244	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x5E8
3245	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
3246	 97	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x9500E0029A000000B400020191FFFF0172000F011D0080021F0001023E0002
3247	 98	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x9500E0029A000000B400020191FFFF0172000F011D0080021F0001023E0002
- stack 0: 0xE0
3248	 9A	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x9500E0
3249	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x9500E0
- stack 0: 0xFFFF
3250	 9E	AND		 	 
- stack 1: 0x5E8
- stack 0: 0xE0
3251	 9F	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0xE0
- stack 0: 0x1
3252	 A1	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0xE0
3253	 A2	PUSH2	0020	 	 
- stack 2: 0x5E8
- stack 1: 0xE0
- stack 0: 0x20
3254	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5E8
- stack 1: 0xE0
- stack 0: 0x5E4
3255	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5E8
- stack 0: 0x6C4
3256	 A7	PUSH2	0020	 	 
- stack 2: 0x5E8
- stack 1: 0x6C4
- stack 0: 0x20
3257	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E8
3258	 AB	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3259	 AD	ADD		 	 
- stack 0: 0x5EC
3260	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3261	 AF	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x29A000000B400020191FFFF0172000F011D0080021F0001023E00020258FFDC
3262	 B0	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x29A000000B400020191FFFF0172000F011D0080021F0001023E00020258FFDC
- stack 0: 0xF0
3263	 B2	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x29A
3264	 B3	JUMP		 	 
- stack 0: 0x5EC
3265	 29A	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5EC
3266	 29B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
3267	 29C	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x29A000000B400020191FFFF0172000F011D0080021F0001023E00020258FFDC
3268	 29D	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x29A000000B400020191FFFF0172000F011D0080021F0001023E00020258FFDC
- stack 0: 0xE0
3269	 29F	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x29A0000
3270	 2A0	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x29A0000
- stack 0: 0xFFFF
3271	 2A3	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
3272	 2A4	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x1
3273	 2A6	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
3274	 2A7	POP		 	 
- stack 0: 0x5EC
3275	 2A8	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3276	 2AA	ADD		 	 
- stack 0: 0x5F0
3277	 2AB	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3278	 2AC	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xB400020191FFFF0172000F011D0080021F0001023E00020258FFDC01030011
3279	 2AD	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0xB400020191FFFF0172000F011D0080021F0001023E00020258FFDC01030011
- stack 0: 0xF0
3280	 2AF	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xB4
3281	 2B0	JUMP		 	 
- stack 0: 0x5F0
3282	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x5F0
3283	 B5	PUSH2	0020	 	 
- stack 1: 0x5F0
- stack 0: 0x20
3284	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5F0
- stack 0: 0x6C4
3285	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x6C4
- stack 0: 0xFFFFFFFF
3286	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F0
- stack 0: 0x6C4
3287	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5F0
- stack 1: 0x6C4
- stack 0: 0x5F0
3288	 C0	MLOAD		 	 
- stack 2: 0x5F0
- stack 1: 0x6C4
- stack 0: 0xB400020191FFFF0172000F011D0080021F0001023E00020258FFDC01030011
3289	 C1	PUSH1	E0	 	 
- stack 3: 0x5F0
- stack 2: 0x6C4
- stack 1: 0xB400020191FFFF0172000F011D0080021F0001023E00020258FFDC01030011
- stack 0: 0xE0
3290	 C3	SHR		 	 
- stack 2: 0x5F0
- stack 1: 0x6C4
- stack 0: 0xB40002
3291	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5F0
- stack 2: 0x6C4
- stack 1: 0xB40002
- stack 0: 0xFFFF
3292	 C7	AND		 	 
- stack 2: 0x5F0
- stack 1: 0x6C4
- stack 0: 0x2
3293	 C8	PUSH1	01	 	 
- stack 3: 0x5F0
- stack 2: 0x6C4
- stack 1: 0x2
- stack 0: 0x1
3294	 CA	SIGNEXTEND		 	 
- stack 2: 0x5F0
- stack 1: 0x6C4
- stack 0: 0x2
3295	 CB	ADD		 	 
- stack 1: 0x5F0
- stack 0: 0x6C6
3296	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x6C6
- stack 0: 0xFFFFFFFF
3297	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F0
- stack 0: 0x6C6
3298	 D2	PUSH1	02	 	 
- stack 2: 0x5F0
- stack 1: 0x6C6
- stack 0: 0x2
3299	 D4	XOR		 	 
- stack 1: 0x5F0
- stack 0: 0x6C4
3300	 D5	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
3301	 D6	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
3302	 D8	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xF00F
3303	 D9	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0xF00F
- stack 0: 0x1
3304	 DB	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
3305	 DC	PUSH2	0060	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
- stack 0: 0x60
3306	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x5F0
3307	 E0	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3308	 E2	ADD		 	 
- stack 0: 0x5F4
3309	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3310	 E4	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x191FFFF0172000F011D0080021F0001023E00020258FFDC0103001101A40000
3311	 E5	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x191FFFF0172000F011D0080021F0001023E00020258FFDC0103001101A40000
- stack 0: 0xF0
3312	 E7	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x191
3313	 E8	JUMP		 	 
- stack 0: 0x5F4
3314	 191	JUMPDEST		 ;; __riscvimpl_LUI_fffffeb7	  ;; # instr: lui t4,0xfffff(ignore imm)
- stack 0: 0x5F4
3315	 192	PUSH4	fffff000	 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFF000
3316	 197	PUSH2	03A0	 	 
- stack 2: 0x5F4
- stack 1: 0xFFFFF000
- stack 0: 0x3A0
3317	 19A	MSTORE		 	  ;; # store to x29
- stack 0: 0x5F4
3318	 19B	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3319	 19D	ADD		 	 
- stack 0: 0x5F8
3320	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3321	 19F	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x172000F011D0080021F0001023E00020258FFDC0103001101A4000000860000
3322	 1A0	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x172000F011D0080021F0001023E00020258FFDC0103001101A4000000860000
- stack 0: 0xF0
3323	 1A2	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x172
3324	 1A3	JUMP		 	 
- stack 0: 0x5F8
3325	 172	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x5F8
3326	 173	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3327	 174	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x172000F011D0080021F0001023E00020258FFDC0103001101A4000000860000
3328	 175	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x172000F011D0080021F0001023E00020258FFDC0103001101A4000000860000
- stack 0: 0xE0
3329	 177	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x172000F
3330	 178	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x172000F
- stack 0: 0xFFFF
3331	 17B	AND		 	 
- stack 1: 0x5F8
- stack 0: 0xF
3332	 17C	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xF
- stack 0: 0x1
3333	 17E	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xF
3334	 17F	PUSH2	03A0	 	 
- stack 2: 0x5F8
- stack 1: 0xF
- stack 0: 0x3A0
3335	 182	MLOAD		 	  ;; # read from x29
- stack 2: 0x5F8
- stack 1: 0xF
- stack 0: 0xFFFFF000
3336	 183	ADD		 	  ;; # ADDI 29
- stack 1: 0x5F8
- stack 0: 0xFFFFF00F
3337	 184	PUSH2	03A0	 	 
- stack 2: 0x5F8
- stack 1: 0xFFFFF00F
- stack 0: 0x3A0
3338	 187	MSTORE		 	  ;; # store to x29
- stack 0: 0x5F8
3339	 188	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3340	 18A	ADD		 	 
- stack 0: 0x5FC
3341	 18B	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3342	 18C	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x11D0080021F0001023E00020258FFDC0103001101A4000000860000009500AC
3343	 18D	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x11D0080021F0001023E00020258FFDC0103001101A4000000860000009500AC
- stack 0: 0xF0
3344	 18F	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x11D
3345	 190	JUMP		 	 
- stack 0: 0x5FC
3346	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x5FC
3347	 11E	PUSH2	0060	 	 
- stack 1: 0x5FC
- stack 0: 0x60
3348	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x5FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
3349	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
- stack 0: 0xFFFFFFFF
3350	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5FC
- stack 0: 0xFFFFF00F
3351	 128	PUSH2	03A0	 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFF00F
- stack 0: 0x3A0
3352	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x5FC
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFF00F
3353	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5FC
- stack 2: 0xFFFFF00F
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFFFFF
3354	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5FC
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFF00F
3355	 132	SUB		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3356	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x13B
3357	 136	JUMPI		 	 
- stack 0: 0x5FC
3358	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x5FC
- stack 0: 0x155
3359	 13A	JUMP		 	 
- stack 0: 0x5FC
3360	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x5FC
3361	 156	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3362	 158	ADD		 	 
- stack 0: 0x600
3363	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3364	 15A	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x21F0001023E00020258FFDC0103001101A4000000860000009500AC029A0000
3365	 15B	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x21F0001023E00020258FFDC0103001101A4000000860000009500AC029A0000
- stack 0: 0xF0
3366	 15D	SHR		 	 
- stack 1: 0x600
- stack 0: 0x21F
3367	 15E	JUMP		 	 
- stack 0: 0x600
3368	 21F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x600
3369	 220	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3370	 221	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x21F0001023E00020258FFDC0103001101A4000000860000009500AC029A0000
3371	 222	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x21F0001023E00020258FFDC0103001101A4000000860000009500AC029A0000
- stack 0: 0xE0
3372	 224	SHR		 	 
- stack 1: 0x600
- stack 0: 0x21F0001
3373	 225	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x21F0001
- stack 0: 0xFFFF
3374	 228	AND		 	 
- stack 1: 0x600
- stack 0: 0x1
3375	 229	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
3376	 22B	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x1
3377	 22C	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x80
3378	 22F	MLOAD		 	  ;; # read from x4
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x0
3379	 230	ADD		 	  ;; # ADDI 4
- stack 1: 0x600
- stack 0: 0x1
3380	 231	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x80
3381	 234	MSTORE		 	  ;; # store to x4
- stack 0: 0x600
3382	 235	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3383	 237	ADD		 	 
- stack 0: 0x604
3384	 238	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3385	 239	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x23E00020258FFDC0103001101A4000000860000009500AC029A0000029A0000
3386	 23A	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x23E00020258FFDC0103001101A4000000860000009500AC029A0000029A0000
- stack 0: 0xF0
3387	 23C	SHR		 	 
- stack 1: 0x604
- stack 0: 0x23E
3388	 23D	JUMP		 	 
- stack 0: 0x604
3389	 23E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x604
3390	 23F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3391	 240	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x23E00020258FFDC0103001101A4000000860000009500AC029A0000029A0000
3392	 241	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x23E00020258FFDC0103001101A4000000860000009500AC029A0000029A0000
- stack 0: 0xE0
3393	 243	SHR		 	 
- stack 1: 0x604
- stack 0: 0x23E0002
3394	 244	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x23E0002
- stack 0: 0xFFFF
3395	 247	AND		 	 
- stack 1: 0x604
- stack 0: 0x2
3396	 248	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x1
3397	 24A	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x2
3398	 24B	PUSH2	00A0	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0xA0
3399	 24E	MSTORE		 	  ;; # store to x5
- stack 0: 0x604
3400	 24F	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3401	 251	ADD		 	 
- stack 0: 0x608
3402	 252	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3403	 253	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x258FFDC0103001101A4000000860000009500AC029A0000029A000000B40002
3404	 254	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x258FFDC0103001101A4000000860000009500AC029A0000029A000000B40002
- stack 0: 0xF0
3405	 256	SHR		 	 
- stack 1: 0x608
- stack 0: 0x258
3406	 257	JUMP		 	 
- stack 0: 0x608
3407	 258	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x608
3408	 259	PUSH2	0080	 	 
- stack 1: 0x608
- stack 0: 0x80
3409	 25C	MLOAD		 	  ;; # read from x4
- stack 1: 0x608
- stack 0: 0x1
3410	 25D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3411	 262	AND		 	  ;; # mask to 32 bits
- stack 1: 0x608
- stack 0: 0x1
3412	 263	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0xA0
3413	 266	MLOAD		 	  ;; # read from x5
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x2
3414	 267	PUSH4	FFFFFFFF	 	 
- stack 3: 0x608
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3415	 26C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x2
3416	 26D	SUB		 	 
- stack 1: 0x608
- stack 0: 0x1
3417	 26E	PUSH2	0276	 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x276
3418	 271	JUMPI		 	 
- stack 0: 0x608
3419	 276	JUMPDEST		 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 0: 0x608
3420	 277	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3421	 278	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x258FFDC0103001101A4000000860000009500AC029A0000029A000000B40002
3422	 279	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x258FFDC0103001101A4000000860000009500AC029A0000029A000000B40002
- stack 0: 0xE0
3423	 27B	SHR		 	 
- stack 1: 0x608
- stack 0: 0x258FFDC
3424	 27C	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x258FFDC
- stack 0: 0xFFFF
3425	 27F	AND		 	 
- stack 1: 0x608
- stack 0: 0xFFDC
3426	 280	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0xFFDC
- stack 0: 0x1
3427	 282	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
3428	 283	ADD		 	 
- stack 0: 0x5E4
3429	 284	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5E4
- stack 0: 0xFFFFFFFF
3430	 289	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5E4
3431	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3432	 28B	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x860000009500E0029A000000B400020191FFFF0172000F011D0080021F0001
3433	 28C	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x860000009500E0029A000000B400020191FFFF0172000F011D0080021F0001
- stack 0: 0xF0
3434	 28E	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x86
3435	 28F	JUMP		 	 
- stack 0: 0x5E4
3436	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5E4
3437	 87	DUP1		 	 
- stack 1: 0x5E4
- stack 0: 0x5E4
3438	 88	PUSH2	0020	 	 
- stack 2: 0x5E4
- stack 1: 0x5E4
- stack 0: 0x20
3439	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E4
3440	 8C	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3441	 8E	ADD		 	 
- stack 0: 0x5E8
3442	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3443	 90	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x9500E0029A000000B400020191FFFF0172000F011D0080021F0001023E0002
3444	 91	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x9500E0029A000000B400020191FFFF0172000F011D0080021F0001023E0002
- stack 0: 0xF0
3445	 93	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x95
3446	 94	JUMP		 	 
- stack 0: 0x5E8
3447	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x5E8
3448	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
3449	 97	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x9500E0029A000000B400020191FFFF0172000F011D0080021F0001023E0002
3450	 98	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x9500E0029A000000B400020191FFFF0172000F011D0080021F0001023E0002
- stack 0: 0xE0
3451	 9A	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x9500E0
3452	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x9500E0
- stack 0: 0xFFFF
3453	 9E	AND		 	 
- stack 1: 0x5E8
- stack 0: 0xE0
3454	 9F	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0xE0
- stack 0: 0x1
3455	 A1	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0xE0
3456	 A2	PUSH2	0020	 	 
- stack 2: 0x5E8
- stack 1: 0xE0
- stack 0: 0x20
3457	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5E8
- stack 1: 0xE0
- stack 0: 0x5E4
3458	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5E8
- stack 0: 0x6C4
3459	 A7	PUSH2	0020	 	 
- stack 2: 0x5E8
- stack 1: 0x6C4
- stack 0: 0x20
3460	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E8
3461	 AB	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3462	 AD	ADD		 	 
- stack 0: 0x5EC
3463	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3464	 AF	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x29A000000B400020191FFFF0172000F011D0080021F0001023E00020258FFDC
3465	 B0	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x29A000000B400020191FFFF0172000F011D0080021F0001023E00020258FFDC
- stack 0: 0xF0
3466	 B2	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x29A
3467	 B3	JUMP		 	 
- stack 0: 0x5EC
3468	 29A	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5EC
3469	 29B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
3470	 29C	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x29A000000B400020191FFFF0172000F011D0080021F0001023E00020258FFDC
3471	 29D	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x29A000000B400020191FFFF0172000F011D0080021F0001023E00020258FFDC
- stack 0: 0xE0
3472	 29F	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x29A0000
3473	 2A0	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x29A0000
- stack 0: 0xFFFF
3474	 2A3	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
3475	 2A4	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x1
3476	 2A6	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
3477	 2A7	POP		 	 
- stack 0: 0x5EC
3478	 2A8	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3479	 2AA	ADD		 	 
- stack 0: 0x5F0
3480	 2AB	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3481	 2AC	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xB400020191FFFF0172000F011D0080021F0001023E00020258FFDC01030011
3482	 2AD	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0xB400020191FFFF0172000F011D0080021F0001023E00020258FFDC01030011
- stack 0: 0xF0
3483	 2AF	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xB4
3484	 2B0	JUMP		 	 
- stack 0: 0x5F0
3485	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x5F0
3486	 B5	PUSH2	0020	 	 
- stack 1: 0x5F0
- stack 0: 0x20
3487	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5F0
- stack 0: 0x6C4
3488	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x6C4
- stack 0: 0xFFFFFFFF
3489	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F0
- stack 0: 0x6C4
3490	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5F0
- stack 1: 0x6C4
- stack 0: 0x5F0
3491	 C0	MLOAD		 	 
- stack 2: 0x5F0
- stack 1: 0x6C4
- stack 0: 0xB400020191FFFF0172000F011D0080021F0001023E00020258FFDC01030011
3492	 C1	PUSH1	E0	 	 
- stack 3: 0x5F0
- stack 2: 0x6C4
- stack 1: 0xB400020191FFFF0172000F011D0080021F0001023E00020258FFDC01030011
- stack 0: 0xE0
3493	 C3	SHR		 	 
- stack 2: 0x5F0
- stack 1: 0x6C4
- stack 0: 0xB40002
3494	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5F0
- stack 2: 0x6C4
- stack 1: 0xB40002
- stack 0: 0xFFFF
3495	 C7	AND		 	 
- stack 2: 0x5F0
- stack 1: 0x6C4
- stack 0: 0x2
3496	 C8	PUSH1	01	 	 
- stack 3: 0x5F0
- stack 2: 0x6C4
- stack 1: 0x2
- stack 0: 0x1
3497	 CA	SIGNEXTEND		 	 
- stack 2: 0x5F0
- stack 1: 0x6C4
- stack 0: 0x2
3498	 CB	ADD		 	 
- stack 1: 0x5F0
- stack 0: 0x6C6
3499	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x6C6
- stack 0: 0xFFFFFFFF
3500	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F0
- stack 0: 0x6C6
3501	 D2	PUSH1	02	 	 
- stack 2: 0x5F0
- stack 1: 0x6C6
- stack 0: 0x2
3502	 D4	XOR		 	 
- stack 1: 0x5F0
- stack 0: 0x6C4
3503	 D5	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
3504	 D6	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
3505	 D8	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xF00F
3506	 D9	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0xF00F
- stack 0: 0x1
3507	 DB	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
3508	 DC	PUSH2	0060	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
- stack 0: 0x60
3509	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x5F0
3510	 E0	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3511	 E2	ADD		 	 
- stack 0: 0x5F4
3512	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3513	 E4	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x191FFFF0172000F011D0080021F0001023E00020258FFDC0103001101A40000
3514	 E5	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x191FFFF0172000F011D0080021F0001023E00020258FFDC0103001101A40000
- stack 0: 0xF0
3515	 E7	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x191
3516	 E8	JUMP		 	 
- stack 0: 0x5F4
3517	 191	JUMPDEST		 ;; __riscvimpl_LUI_fffffeb7	  ;; # instr: lui t4,0xfffff(ignore imm)
- stack 0: 0x5F4
3518	 192	PUSH4	fffff000	 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFF000
3519	 197	PUSH2	03A0	 	 
- stack 2: 0x5F4
- stack 1: 0xFFFFF000
- stack 0: 0x3A0
3520	 19A	MSTORE		 	  ;; # store to x29
- stack 0: 0x5F4
3521	 19B	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3522	 19D	ADD		 	 
- stack 0: 0x5F8
3523	 19E	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3524	 19F	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x172000F011D0080021F0001023E00020258FFDC0103001101A4000000860000
3525	 1A0	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x172000F011D0080021F0001023E00020258FFDC0103001101A4000000860000
- stack 0: 0xF0
3526	 1A2	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x172
3527	 1A3	JUMP		 	 
- stack 0: 0x5F8
3528	 172	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x5F8
3529	 173	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3530	 174	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x172000F011D0080021F0001023E00020258FFDC0103001101A4000000860000
3531	 175	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x172000F011D0080021F0001023E00020258FFDC0103001101A4000000860000
- stack 0: 0xE0
3532	 177	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x172000F
3533	 178	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x172000F
- stack 0: 0xFFFF
3534	 17B	AND		 	 
- stack 1: 0x5F8
- stack 0: 0xF
3535	 17C	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xF
- stack 0: 0x1
3536	 17E	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xF
3537	 17F	PUSH2	03A0	 	 
- stack 2: 0x5F8
- stack 1: 0xF
- stack 0: 0x3A0
3538	 182	MLOAD		 	  ;; # read from x29
- stack 2: 0x5F8
- stack 1: 0xF
- stack 0: 0xFFFFF000
3539	 183	ADD		 	  ;; # ADDI 29
- stack 1: 0x5F8
- stack 0: 0xFFFFF00F
3540	 184	PUSH2	03A0	 	 
- stack 2: 0x5F8
- stack 1: 0xFFFFF00F
- stack 0: 0x3A0
3541	 187	MSTORE		 	  ;; # store to x29
- stack 0: 0x5F8
3542	 188	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3543	 18A	ADD		 	 
- stack 0: 0x5FC
3544	 18B	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3545	 18C	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x11D0080021F0001023E00020258FFDC0103001101A4000000860000009500AC
3546	 18D	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x11D0080021F0001023E00020258FFDC0103001101A4000000860000009500AC
- stack 0: 0xF0
3547	 18F	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x11D
3548	 190	JUMP		 	 
- stack 0: 0x5FC
3549	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x5FC
3550	 11E	PUSH2	0060	 	 
- stack 1: 0x5FC
- stack 0: 0x60
3551	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x5FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
3552	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F
- stack 0: 0xFFFFFFFF
3553	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5FC
- stack 0: 0xFFFFF00F
3554	 128	PUSH2	03A0	 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFF00F
- stack 0: 0x3A0
3555	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x5FC
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFF00F
3556	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5FC
- stack 2: 0xFFFFF00F
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFFFFF
3557	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5FC
- stack 1: 0xFFFFF00F
- stack 0: 0xFFFFF00F
3558	 132	SUB		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3559	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x13B
3560	 136	JUMPI		 	 
- stack 0: 0x5FC
3561	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x5FC
- stack 0: 0x155
3562	 13A	JUMP		 	 
- stack 0: 0x5FC
3563	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x5FC
3564	 156	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3565	 158	ADD		 	 
- stack 0: 0x600
3566	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3567	 15A	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x21F0001023E00020258FFDC0103001101A4000000860000009500AC029A0000
3568	 15B	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x21F0001023E00020258FFDC0103001101A4000000860000009500AC029A0000
- stack 0: 0xF0
3569	 15D	SHR		 	 
- stack 1: 0x600
- stack 0: 0x21F
3570	 15E	JUMP		 	 
- stack 0: 0x600
3571	 21F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x600
3572	 220	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3573	 221	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x21F0001023E00020258FFDC0103001101A4000000860000009500AC029A0000
3574	 222	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x21F0001023E00020258FFDC0103001101A4000000860000009500AC029A0000
- stack 0: 0xE0
3575	 224	SHR		 	 
- stack 1: 0x600
- stack 0: 0x21F0001
3576	 225	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x21F0001
- stack 0: 0xFFFF
3577	 228	AND		 	 
- stack 1: 0x600
- stack 0: 0x1
3578	 229	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
3579	 22B	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x1
3580	 22C	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x80
3581	 22F	MLOAD		 	  ;; # read from x4
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
3582	 230	ADD		 	  ;; # ADDI 4
- stack 1: 0x600
- stack 0: 0x2
3583	 231	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0x80
3584	 234	MSTORE		 	  ;; # store to x4
- stack 0: 0x600
3585	 235	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3586	 237	ADD		 	 
- stack 0: 0x604
3587	 238	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3588	 239	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x23E00020258FFDC0103001101A4000000860000009500AC029A0000029A0000
3589	 23A	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x23E00020258FFDC0103001101A4000000860000009500AC029A0000029A0000
- stack 0: 0xF0
3590	 23C	SHR		 	 
- stack 1: 0x604
- stack 0: 0x23E
3591	 23D	JUMP		 	 
- stack 0: 0x604
3592	 23E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x604
3593	 23F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3594	 240	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x23E00020258FFDC0103001101A4000000860000009500AC029A0000029A0000
3595	 241	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x23E00020258FFDC0103001101A4000000860000009500AC029A0000029A0000
- stack 0: 0xE0
3596	 243	SHR		 	 
- stack 1: 0x604
- stack 0: 0x23E0002
3597	 244	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x23E0002
- stack 0: 0xFFFF
3598	 247	AND		 	 
- stack 1: 0x604
- stack 0: 0x2
3599	 248	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x1
3600	 24A	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x2
3601	 24B	PUSH2	00A0	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0xA0
3602	 24E	MSTORE		 	  ;; # store to x5
- stack 0: 0x604
3603	 24F	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3604	 251	ADD		 	 
- stack 0: 0x608
3605	 252	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3606	 253	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x258FFDC0103001101A4000000860000009500AC029A0000029A000000B40002
3607	 254	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x258FFDC0103001101A4000000860000009500AC029A0000029A000000B40002
- stack 0: 0xF0
3608	 256	SHR		 	 
- stack 1: 0x608
- stack 0: 0x258
3609	 257	JUMP		 	 
- stack 0: 0x608
3610	 258	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x608
3611	 259	PUSH2	0080	 	 
- stack 1: 0x608
- stack 0: 0x80
3612	 25C	MLOAD		 	  ;; # read from x4
- stack 1: 0x608
- stack 0: 0x2
3613	 25D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3614	 262	AND		 	  ;; # mask to 32 bits
- stack 1: 0x608
- stack 0: 0x2
3615	 263	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xA0
3616	 266	MLOAD		 	  ;; # read from x5
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x2
3617	 267	PUSH4	FFFFFFFF	 	 
- stack 3: 0x608
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3618	 26C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x2
3619	 26D	SUB		 	 
- stack 1: 0x608
- stack 0: 0x0
3620	 26E	PUSH2	0276	 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x276
3621	 271	JUMPI		 	 
- stack 0: 0x608
3622	 272	PUSH2	0290	 ;; _neq_after_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 1: 0x608
- stack 0: 0x290
3623	 275	JUMP		 	 
- stack 0: 0x608
3624	 290	JUMPDEST		 ;; _neq_after_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 0: 0x608
3625	 291	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3626	 293	ADD		 	 
- stack 0: 0x60C
3627	 294	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3628	 295	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x103001101A4000000860000009500AC029A0000029A000000B4000200E9FF00
3629	 296	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x103001101A4000000860000009500AC029A0000029A000000B4000200E9FF00
- stack 0: 0xF0
3630	 298	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x103
3631	 299	JUMP		 	 
- stack 0: 0x60C
3632	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x60C
3633	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
3634	 105	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x103001101A4000000860000009500AC029A0000029A000000B4000200E9FF00
3635	 106	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x103001101A4000000860000009500AC029A0000029A000000B4000200E9FF00
- stack 0: 0xE0
3636	 108	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x1030011
3637	 109	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x1030011
- stack 0: 0xFFFF
3638	 10C	AND		 	 
- stack 1: 0x60C
- stack 0: 0x11
3639	 10D	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x11
- stack 0: 0x1
3640	 10F	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x11
3641	 110	PUSH2	0380	 	 
- stack 2: 0x60C
- stack 1: 0x11
- stack 0: 0x380
3642	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x60C
3643	 114	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3644	 116	ADD		 	 
- stack 0: 0x610
3645	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3646	 118	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x1A4000000860000009500AC029A0000029A000000B4000200E9FF00011D0050
3647	 119	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x1A4000000860000009500AC029A0000029A000000B4000200E9FF00011D0050
- stack 0: 0xF0
3648	 11B	SHR		 	 
- stack 1: 0x610
- stack 0: 0x1A4
3649	 11C	JUMP		 	 
- stack 0: 0x610
3650	 1A4	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x610
3651	 1A5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3652	 1A6	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x1A4000000860000009500AC029A0000029A000000B4000200E9FF00011D0050
3653	 1A7	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x1A4000000860000009500AC029A0000029A000000B4000200E9FF00011D0050
- stack 0: 0xE0
3654	 1A9	SHR		 	 
- stack 1: 0x610
- stack 0: 0x1A40000
3655	 1AA	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x1A40000
- stack 0: 0xFFFF
3656	 1AD	AND		 	 
- stack 1: 0x610
- stack 0: 0x0
3657	 1AE	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x1
3658	 1B0	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x0
3659	 1B1	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x80
3660	 1B4	MSTORE		 	  ;; # store to x4
- stack 0: 0x610
3661	 1B5	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3662	 1B7	ADD		 	 
- stack 0: 0x614
3663	 1B8	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3664	 1B9	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x860000009500AC029A0000029A000000B4000200E9FF00011D0050021F0001
3665	 1BA	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x860000009500AC029A0000029A000000B4000200E9FF00011D0050021F0001
- stack 0: 0xF0
3666	 1BC	SHR		 	 
- stack 1: 0x614
- stack 0: 0x86
3667	 1BD	JUMP		 	 
- stack 0: 0x614
3668	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x614
3669	 87	DUP1		 	 
- stack 1: 0x614
- stack 0: 0x614
3670	 88	PUSH2	0020	 	 
- stack 2: 0x614
- stack 1: 0x614
- stack 0: 0x20
3671	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x614
3672	 8C	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3673	 8E	ADD		 	 
- stack 0: 0x618
3674	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3675	 90	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x9500AC029A0000029A000000B4000200E9FF00011D0050021F0001023E0002
3676	 91	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x9500AC029A0000029A000000B4000200E9FF00011D0050021F0001023E0002
- stack 0: 0xF0
3677	 93	SHR		 	 
- stack 1: 0x618
- stack 0: 0x95
3678	 94	JUMP		 	 
- stack 0: 0x618
3679	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x618
3680	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3681	 97	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x9500AC029A0000029A000000B4000200E9FF00011D0050021F0001023E0002
3682	 98	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x9500AC029A0000029A000000B4000200E9FF00011D0050021F0001023E0002
- stack 0: 0xE0
3683	 9A	SHR		 	 
- stack 1: 0x618
- stack 0: 0x9500AC
3684	 9B	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x9500AC
- stack 0: 0xFFFF
3685	 9E	AND		 	 
- stack 1: 0x618
- stack 0: 0xAC
3686	 9F	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0xAC
- stack 0: 0x1
3687	 A1	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0xAC
3688	 A2	PUSH2	0020	 	 
- stack 2: 0x618
- stack 1: 0xAC
- stack 0: 0x20
3689	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x618
- stack 1: 0xAC
- stack 0: 0x614
3690	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x618
- stack 0: 0x6C0
3691	 A7	PUSH2	0020	 	 
- stack 2: 0x618
- stack 1: 0x6C0
- stack 0: 0x20
3692	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x618
3693	 AB	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3694	 AD	ADD		 	 
- stack 0: 0x61C
3695	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3696	 AF	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x29A0000029A000000B4000200E9FF00011D0050021F0001023E00020258FFDC
3697	 B0	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x29A0000029A000000B4000200E9FF00011D0050021F0001023E00020258FFDC
- stack 0: 0xF0
3698	 B2	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x29A
3699	 B3	JUMP		 	 
- stack 0: 0x61C
3700	 29A	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x61C
3701	 29B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3702	 29C	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x29A0000029A000000B4000200E9FF00011D0050021F0001023E00020258FFDC
3703	 29D	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x29A0000029A000000B4000200E9FF00011D0050021F0001023E00020258FFDC
- stack 0: 0xE0
3704	 29F	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x29A0000
3705	 2A0	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x29A0000
- stack 0: 0xFFFF
3706	 2A3	AND		 	 
- stack 1: 0x61C
- stack 0: 0x0
3707	 2A4	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0x1
3708	 2A6	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x0
3709	 2A7	POP		 	 
- stack 0: 0x61C
3710	 2A8	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3711	 2AA	ADD		 	 
- stack 0: 0x620
3712	 2AB	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3713	 2AC	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x29A000000B4000200E9FF00011D0050021F0001023E00020258FFDC02B10000
3714	 2AD	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x29A000000B4000200E9FF00011D0050021F0001023E00020258FFDC02B10000
- stack 0: 0xF0
3715	 2AF	SHR		 	 
- stack 1: 0x620
- stack 0: 0x29A
3716	 2B0	JUMP		 	 
- stack 0: 0x620
3717	 29A	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x620
3718	 29B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3719	 29C	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x29A000000B4000200E9FF00011D0050021F0001023E00020258FFDC02B10000
3720	 29D	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x29A000000B4000200E9FF00011D0050021F0001023E00020258FFDC02B10000
- stack 0: 0xE0
3721	 29F	SHR		 	 
- stack 1: 0x620
- stack 0: 0x29A0000
3722	 2A0	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x29A0000
- stack 0: 0xFFFF
3723	 2A3	AND		 	 
- stack 1: 0x620
- stack 0: 0x0
3724	 2A4	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x1
3725	 2A6	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x0
3726	 2A7	POP		 	 
- stack 0: 0x620
3727	 2A8	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3728	 2AA	ADD		 	 
- stack 0: 0x624
3729	 2AB	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3730	 2AC	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xB4000200E9FF00011D0050021F0001023E00020258FFDC02B1000002C00084
3731	 2AD	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0xB4000200E9FF00011D0050021F0001023E00020258FFDC02B1000002C00084
- stack 0: 0xF0
3732	 2AF	SHR		 	 
- stack 1: 0x624
- stack 0: 0xB4
3733	 2B0	JUMP		 	 
- stack 0: 0x624
3734	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x624
3735	 B5	PUSH2	0020	 	 
- stack 1: 0x624
- stack 0: 0x20
3736	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x624
- stack 0: 0x6C0
3737	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
3738	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x6C0
3739	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x624
- stack 1: 0x6C0
- stack 0: 0x624
3740	 C0	MLOAD		 	 
- stack 2: 0x624
- stack 1: 0x6C0
- stack 0: 0xB4000200E9FF00011D0050021F0001023E00020258FFDC02B1000002C00084
3741	 C1	PUSH1	E0	 	 
- stack 3: 0x624
- stack 2: 0x6C0
- stack 1: 0xB4000200E9FF00011D0050021F0001023E00020258FFDC02B1000002C00084
- stack 0: 0xE0
3742	 C3	SHR		 	 
- stack 2: 0x624
- stack 1: 0x6C0
- stack 0: 0xB40002
3743	 C4	PUSH2	FFFF	 	 
- stack 3: 0x624
- stack 2: 0x6C0
- stack 1: 0xB40002
- stack 0: 0xFFFF
3744	 C7	AND		 	 
- stack 2: 0x624
- stack 1: 0x6C0
- stack 0: 0x2
3745	 C8	PUSH1	01	 	 
- stack 3: 0x624
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0x1
3746	 CA	SIGNEXTEND		 	 
- stack 2: 0x624
- stack 1: 0x6C0
- stack 0: 0x2
3747	 CB	ADD		 	 
- stack 1: 0x624
- stack 0: 0x6C2
3748	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x6C2
- stack 0: 0xFFFFFFFF
3749	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x6C2
3750	 D2	PUSH1	02	 	 
- stack 2: 0x624
- stack 1: 0x6C2
- stack 0: 0x2
3751	 D4	XOR		 	 
- stack 1: 0x624
- stack 0: 0x6C0
3752	 D5	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
3753	 D6	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
- stack 0: 0xF0
3754	 D8	SHR		 	 
- stack 1: 0x624
- stack 0: 0xFF00
3755	 D9	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0xFF00
- stack 0: 0x1
3756	 DB	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3757	 DC	PUSH2	0060	 	 
- stack 2: 0x624
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x60
3758	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x624
3759	 E0	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3760	 E2	ADD		 	 
- stack 0: 0x628
3761	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3762	 E4	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xE9FF00011D0050021F0001023E00020258FFDC02B1000002C0008402DF0000
3763	 E5	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0xE9FF00011D0050021F0001023E00020258FFDC02B1000002C0008402DF0000
- stack 0: 0xF0
3764	 E7	SHR		 	 
- stack 1: 0x628
- stack 0: 0xE9
3765	 E8	JUMP		 	 
- stack 0: 0x628
3766	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x628
3767	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3768	 EB	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xE9FF00011D0050021F0001023E00020258FFDC02B1000002C0008402DF0000
3769	 EC	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0xE9FF00011D0050021F0001023E00020258FFDC02B1000002C0008402DF0000
- stack 0: 0xE0
3770	 EE	SHR		 	 
- stack 1: 0x628
- stack 0: 0xE9FF00
3771	 EF	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0xE9FF00
- stack 0: 0xFFFF
3772	 F2	AND		 	 
- stack 1: 0x628
- stack 0: 0xFF00
3773	 F3	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0xFF00
- stack 0: 0x1
3774	 F5	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3775	 F6	PUSH2	03A0	 	 
- stack 2: 0x628
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
3776	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x628
3777	 FA	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3778	 FC	ADD		 	 
- stack 0: 0x62C
3779	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3780	 FE	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x11D0050021F0001023E00020258FFDC02B1000002C0008402DF000003140002
3781	 FF	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x11D0050021F0001023E00020258FFDC02B1000002C0008402DF000003140002
- stack 0: 0xF0
3782	 101	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x11D
3783	 102	JUMP		 	 
- stack 0: 0x62C
3784	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x62C
3785	 11E	PUSH2	0060	 	 
- stack 1: 0x62C
- stack 0: 0x60
3786	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x62C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3787	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x62C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFFFFFFFF
3788	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x62C
- stack 0: 0xFFFFFF00
3789	 128	PUSH2	03A0	 	 
- stack 2: 0x62C
- stack 1: 0xFFFFFF00
- stack 0: 0x3A0
3790	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x62C
- stack 1: 0xFFFFFF00
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3791	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x62C
- stack 2: 0xFFFFFF00
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFFFFFFFF
3792	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x62C
- stack 1: 0xFFFFFF00
- stack 0: 0xFFFFFF00
3793	 132	SUB		 	 
- stack 1: 0x62C
- stack 0: 0x0
3794	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x13B
3795	 136	JUMPI		 	 
- stack 0: 0x62C
3796	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x62C
- stack 0: 0x155
3797	 13A	JUMP		 	 
- stack 0: 0x62C
3798	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x62C
3799	 156	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3800	 158	ADD		 	 
- stack 0: 0x630
3801	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3802	 15A	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x21F0001023E00020258FFDC02B1000002C0008402DF00000314000200E90002
3803	 15B	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x21F0001023E00020258FFDC02B1000002C0008402DF00000314000200E90002
- stack 0: 0xF0
3804	 15D	SHR		 	 
- stack 1: 0x630
- stack 0: 0x21F
3805	 15E	JUMP		 	 
- stack 0: 0x630
3806	 21F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x630
3807	 220	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3808	 221	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x21F0001023E00020258FFDC02B1000002C0008402DF00000314000200E90002
3809	 222	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x21F0001023E00020258FFDC02B1000002C0008402DF00000314000200E90002
- stack 0: 0xE0
3810	 224	SHR		 	 
- stack 1: 0x630
- stack 0: 0x21F0001
3811	 225	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x21F0001
- stack 0: 0xFFFF
3812	 228	AND		 	 
- stack 1: 0x630
- stack 0: 0x1
3813	 229	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x1
3814	 22B	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x1
3815	 22C	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x80
3816	 22F	MLOAD		 	  ;; # read from x4
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x0
3817	 230	ADD		 	  ;; # ADDI 4
- stack 1: 0x630
- stack 0: 0x1
3818	 231	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x80
3819	 234	MSTORE		 	  ;; # store to x4
- stack 0: 0x630
3820	 235	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3821	 237	ADD		 	 
- stack 0: 0x634
3822	 238	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3823	 239	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x23E00020258FFDC02B1000002C0008402DF00000314000200E9000201030012
3824	 23A	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x23E00020258FFDC02B1000002C0008402DF00000314000200E9000201030012
- stack 0: 0xF0
3825	 23C	SHR		 	 
- stack 1: 0x634
- stack 0: 0x23E
3826	 23D	JUMP		 	 
- stack 0: 0x634
3827	 23E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x634
3828	 23F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3829	 240	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x23E00020258FFDC02B1000002C0008402DF00000314000200E9000201030012
3830	 241	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x23E00020258FFDC02B1000002C0008402DF00000314000200E9000201030012
- stack 0: 0xE0
3831	 243	SHR		 	 
- stack 1: 0x634
- stack 0: 0x23E0002
3832	 244	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x23E0002
- stack 0: 0xFFFF
3833	 247	AND		 	 
- stack 1: 0x634
- stack 0: 0x2
3834	 248	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x1
3835	 24A	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x2
3836	 24B	PUSH2	00A0	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0xA0
3837	 24E	MSTORE		 	  ;; # store to x5
- stack 0: 0x634
3838	 24F	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3839	 251	ADD		 	 
- stack 0: 0x638
3840	 252	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3841	 253	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x258FFDC02B1000002C0008402DF00000314000200E9000201030012032E0028
3842	 254	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x258FFDC02B1000002C0008402DF00000314000200E9000201030012032E0028
- stack 0: 0xF0
3843	 256	SHR		 	 
- stack 1: 0x638
- stack 0: 0x258
3844	 257	JUMP		 	 
- stack 0: 0x638
3845	 258	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x638
3846	 259	PUSH2	0080	 	 
- stack 1: 0x638
- stack 0: 0x80
3847	 25C	MLOAD		 	  ;; # read from x4
- stack 1: 0x638
- stack 0: 0x1
3848	 25D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3849	 262	AND		 	  ;; # mask to 32 bits
- stack 1: 0x638
- stack 0: 0x1
3850	 263	PUSH2	00A0	 	 
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0xA0
3851	 266	MLOAD		 	  ;; # read from x5
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0x2
3852	 267	PUSH4	FFFFFFFF	 	 
- stack 3: 0x638
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3853	 26C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0x2
3854	 26D	SUB		 	 
- stack 1: 0x638
- stack 0: 0x1
3855	 26E	PUSH2	0276	 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0x276
3856	 271	JUMPI		 	 
- stack 0: 0x638
3857	 276	JUMPDEST		 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 0: 0x638
3858	 277	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3859	 278	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x258FFDC02B1000002C0008402DF00000314000200E9000201030012032E0028
3860	 279	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x258FFDC02B1000002C0008402DF00000314000200E9000201030012032E0028
- stack 0: 0xE0
3861	 27B	SHR		 	 
- stack 1: 0x638
- stack 0: 0x258FFDC
3862	 27C	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x258FFDC
- stack 0: 0xFFFF
3863	 27F	AND		 	 
- stack 1: 0x638
- stack 0: 0xFFDC
3864	 280	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0xFFDC
- stack 0: 0x1
3865	 282	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
3866	 283	ADD		 	 
- stack 0: 0x614
3867	 284	PUSH4	FFFFFFFF	 	 
- stack 1: 0x614
- stack 0: 0xFFFFFFFF
3868	 289	AND		 	  ;; # mask to 32 bits
- stack 0: 0x614
3869	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3870	 28B	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x860000009500AC029A0000029A000000B4000200E9FF00011D0050021F0001
3871	 28C	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x860000009500AC029A0000029A000000B4000200E9FF00011D0050021F0001
- stack 0: 0xF0
3872	 28E	SHR		 	 
- stack 1: 0x614
- stack 0: 0x86
3873	 28F	JUMP		 	 
- stack 0: 0x614
3874	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x614
3875	 87	DUP1		 	 
- stack 1: 0x614
- stack 0: 0x614
3876	 88	PUSH2	0020	 	 
- stack 2: 0x614
- stack 1: 0x614
- stack 0: 0x20
3877	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x614
3878	 8C	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3879	 8E	ADD		 	 
- stack 0: 0x618
3880	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3881	 90	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x9500AC029A0000029A000000B4000200E9FF00011D0050021F0001023E0002
3882	 91	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x9500AC029A0000029A000000B4000200E9FF00011D0050021F0001023E0002
- stack 0: 0xF0
3883	 93	SHR		 	 
- stack 1: 0x618
- stack 0: 0x95
3884	 94	JUMP		 	 
- stack 0: 0x618
3885	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,688(ignore imm)
- stack 0: 0x618
3886	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3887	 97	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x9500AC029A0000029A000000B4000200E9FF00011D0050021F0001023E0002
3888	 98	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x9500AC029A0000029A000000B4000200E9FF00011D0050021F0001023E0002
- stack 0: 0xE0
3889	 9A	SHR		 	 
- stack 1: 0x618
- stack 0: 0x9500AC
3890	 9B	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x9500AC
- stack 0: 0xFFFF
3891	 9E	AND		 	 
- stack 1: 0x618
- stack 0: 0xAC
3892	 9F	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0xAC
- stack 0: 0x1
3893	 A1	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0xAC
3894	 A2	PUSH2	0020	 	 
- stack 2: 0x618
- stack 1: 0xAC
- stack 0: 0x20
3895	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x618
- stack 1: 0xAC
- stack 0: 0x614
3896	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x618
- stack 0: 0x6C0
3897	 A7	PUSH2	0020	 	 
- stack 2: 0x618
- stack 1: 0x6C0
- stack 0: 0x20
3898	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x618
3899	 AB	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3900	 AD	ADD		 	 
- stack 0: 0x61C
3901	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3902	 AF	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x29A0000029A000000B4000200E9FF00011D0050021F0001023E00020258FFDC
3903	 B0	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x29A0000029A000000B4000200E9FF00011D0050021F0001023E00020258FFDC
- stack 0: 0xF0
3904	 B2	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x29A
3905	 B3	JUMP		 	 
- stack 0: 0x61C
3906	 29A	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x61C
3907	 29B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3908	 29C	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x29A0000029A000000B4000200E9FF00011D0050021F0001023E00020258FFDC
3909	 29D	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x29A0000029A000000B4000200E9FF00011D0050021F0001023E00020258FFDC
- stack 0: 0xE0
3910	 29F	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x29A0000
3911	 2A0	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x29A0000
- stack 0: 0xFFFF
3912	 2A3	AND		 	 
- stack 1: 0x61C
- stack 0: 0x0
3913	 2A4	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0x1
3914	 2A6	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x0
3915	 2A7	POP		 	 
- stack 0: 0x61C
3916	 2A8	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3917	 2AA	ADD		 	 
- stack 0: 0x620
3918	 2AB	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3919	 2AC	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x29A000000B4000200E9FF00011D0050021F0001023E00020258FFDC02B10000
3920	 2AD	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x29A000000B4000200E9FF00011D0050021F0001023E00020258FFDC02B10000
- stack 0: 0xF0
3921	 2AF	SHR		 	 
- stack 1: 0x620
- stack 0: 0x29A
3922	 2B0	JUMP		 	 
- stack 0: 0x620
3923	 29A	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x620
3924	 29B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3925	 29C	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x29A000000B4000200E9FF00011D0050021F0001023E00020258FFDC02B10000
3926	 29D	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x29A000000B4000200E9FF00011D0050021F0001023E00020258FFDC02B10000
- stack 0: 0xE0
3927	 29F	SHR		 	 
- stack 1: 0x620
- stack 0: 0x29A0000
3928	 2A0	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x29A0000
- stack 0: 0xFFFF
3929	 2A3	AND		 	 
- stack 1: 0x620
- stack 0: 0x0
3930	 2A4	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x1
3931	 2A6	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x0
3932	 2A7	POP		 	 
- stack 0: 0x620
3933	 2A8	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3934	 2AA	ADD		 	 
- stack 0: 0x624
3935	 2AB	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3936	 2AC	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xB4000200E9FF00011D0050021F0001023E00020258FFDC02B1000002C00084
3937	 2AD	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0xB4000200E9FF00011D0050021F0001023E00020258FFDC02B1000002C00084
- stack 0: 0xF0
3938	 2AF	SHR		 	 
- stack 1: 0x624
- stack 0: 0xB4
3939	 2B0	JUMP		 	 
- stack 0: 0x624
3940	 B4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x624
3941	 B5	PUSH2	0020	 	 
- stack 1: 0x624
- stack 0: 0x20
3942	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x624
- stack 0: 0x6C0
3943	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
3944	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x6C0
3945	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x624
- stack 1: 0x6C0
- stack 0: 0x624
3946	 C0	MLOAD		 	 
- stack 2: 0x624
- stack 1: 0x6C0
- stack 0: 0xB4000200E9FF00011D0050021F0001023E00020258FFDC02B1000002C00084
3947	 C1	PUSH1	E0	 	 
- stack 3: 0x624
- stack 2: 0x6C0
- stack 1: 0xB4000200E9FF00011D0050021F0001023E00020258FFDC02B1000002C00084
- stack 0: 0xE0
3948	 C3	SHR		 	 
- stack 2: 0x624
- stack 1: 0x6C0
- stack 0: 0xB40002
3949	 C4	PUSH2	FFFF	 	 
- stack 3: 0x624
- stack 2: 0x6C0
- stack 1: 0xB40002
- stack 0: 0xFFFF
3950	 C7	AND		 	 
- stack 2: 0x624
- stack 1: 0x6C0
- stack 0: 0x2
3951	 C8	PUSH1	01	 	 
- stack 3: 0x624
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0x1
3952	 CA	SIGNEXTEND		 	 
- stack 2: 0x624
- stack 1: 0x6C0
- stack 0: 0x2
3953	 CB	ADD		 	 
- stack 1: 0x624
- stack 0: 0x6C2
3954	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x6C2
- stack 0: 0xFFFFFFFF
3955	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x6C2
3956	 D2	PUSH1	02	 	 
- stack 2: 0x624
- stack 1: 0x6C2
- stack 0: 0x2
3957	 D4	XOR		 	 
- stack 1: 0x624
- stack 0: 0x6C0
3958	 D5	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
3959	 D6	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
- stack 0: 0xF0
3960	 D8	SHR		 	 
- stack 1: 0x624
- stack 0: 0xFF00
3961	 D9	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0xFF00
- stack 0: 0x1
3962	 DB	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3963	 DC	PUSH2	0060	 	 
- stack 2: 0x624
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x60
3964	 DF	MSTORE		 	  ;; # store to x3
- stack 0: 0x624
3965	 E0	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3966	 E2	ADD		 	 
- stack 0: 0x628
3967	 E3	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3968	 E4	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xE9FF00011D0050021F0001023E00020258FFDC02B1000002C0008402DF0000
3969	 E5	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0xE9FF00011D0050021F0001023E00020258FFDC02B1000002C0008402DF0000
- stack 0: 0xF0
3970	 E7	SHR		 	 
- stack 1: 0x628
- stack 0: 0xE9
3971	 E8	JUMP		 	 
- stack 0: 0x628
3972	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x628
3973	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3974	 EB	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xE9FF00011D0050021F0001023E00020258FFDC02B1000002C0008402DF0000
3975	 EC	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0xE9FF00011D0050021F0001023E00020258FFDC02B1000002C0008402DF0000
- stack 0: 0xE0
3976	 EE	SHR		 	 
- stack 1: 0x628
- stack 0: 0xE9FF00
3977	 EF	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0xE9FF00
- stack 0: 0xFFFF
3978	 F2	AND		 	 
- stack 1: 0x628
- stack 0: 0xFF00
3979	 F3	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0xFF00
- stack 0: 0x1
3980	 F5	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3981	 F6	PUSH2	03A0	 	 
- stack 2: 0x628
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
3982	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x628
3983	 FA	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3984	 FC	ADD		 	 
- stack 0: 0x62C
3985	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3986	 FE	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x11D0050021F0001023E00020258FFDC02B1000002C0008402DF000003140002
3987	 FF	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x11D0050021F0001023E00020258FFDC02B1000002C0008402DF000003140002
- stack 0: 0xF0
3988	 101	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x11D
3989	 102	JUMP		 	 
- stack 0: 0x62C
3990	 11D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,258(ignore imm)
- stack 0: 0x62C
3991	 11E	PUSH2	0060	 	 
- stack 1: 0x62C
- stack 0: 0x60
3992	 121	MLOAD		 	  ;; # read from x3
- stack 1: 0x62C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3993	 122	PUSH4	FFFFFFFF	 	 
- stack 2: 0x62C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFFFFFFFF
3994	 127	AND		 	  ;; # mask to 32 bits
- stack 1: 0x62C
- stack 0: 0xFFFFFF00
3995	 128	PUSH2	03A0	 	 
- stack 2: 0x62C
- stack 1: 0xFFFFFF00
- stack 0: 0x3A0
3996	 12B	MLOAD		 	  ;; # read from x29
- stack 2: 0x62C
- stack 1: 0xFFFFFF00
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3997	 12C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x62C
- stack 2: 0xFFFFFF00
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFFFFFFFF
3998	 131	AND		 	  ;; # mask to 32 bits
- stack 2: 0x62C
- stack 1: 0xFFFFFF00
- stack 0: 0xFFFFFF00
3999	 132	SUB		 	 
- stack 1: 0x62C
- stack 0: 0x0
4000	 133	PUSH2	013B	 ;; _neq_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x13B
4001	 136	JUMPI		 	 
- stack 0: 0x62C
4002	 137	PUSH2	0155	 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 1: 0x62C
- stack 0: 0x155
4003	 13A	JUMP		 	 
- stack 0: 0x62C
4004	 155	JUMPDEST		 ;; _neq_after_c9585f5d6efcfceb3615dcf4714369f03c9949995ad2404bf527af48a1f216cf	 
- stack 0: 0x62C
4005	 156	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
4006	 158	ADD		 	 
- stack 0: 0x630
4007	 159	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
4008	 15A	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x21F0001023E00020258FFDC02B1000002C0008402DF00000314000200E90002
4009	 15B	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x21F0001023E00020258FFDC02B1000002C0008402DF00000314000200E90002
- stack 0: 0xF0
4010	 15D	SHR		 	 
- stack 1: 0x630
- stack 0: 0x21F
4011	 15E	JUMP		 	 
- stack 0: 0x630
4012	 21F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x630
4013	 220	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
4014	 221	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x21F0001023E00020258FFDC02B1000002C0008402DF00000314000200E90002
4015	 222	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x21F0001023E00020258FFDC02B1000002C0008402DF00000314000200E90002
- stack 0: 0xE0
4016	 224	SHR		 	 
- stack 1: 0x630
- stack 0: 0x21F0001
4017	 225	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x21F0001
- stack 0: 0xFFFF
4018	 228	AND		 	 
- stack 1: 0x630
- stack 0: 0x1
4019	 229	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x1
4020	 22B	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x1
4021	 22C	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x80
4022	 22F	MLOAD		 	  ;; # read from x4
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x1
4023	 230	ADD		 	  ;; # ADDI 4
- stack 1: 0x630
- stack 0: 0x2
4024	 231	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0x80
4025	 234	MSTORE		 	  ;; # store to x4
- stack 0: 0x630
4026	 235	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
4027	 237	ADD		 	 
- stack 0: 0x634
4028	 238	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
4029	 239	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x23E00020258FFDC02B1000002C0008402DF00000314000200E9000201030012
4030	 23A	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x23E00020258FFDC02B1000002C0008402DF00000314000200E9000201030012
- stack 0: 0xF0
4031	 23C	SHR		 	 
- stack 1: 0x634
- stack 0: 0x23E
4032	 23D	JUMP		 	 
- stack 0: 0x634
4033	 23E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x634
4034	 23F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
4035	 240	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x23E00020258FFDC02B1000002C0008402DF00000314000200E9000201030012
4036	 241	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x23E00020258FFDC02B1000002C0008402DF00000314000200E9000201030012
- stack 0: 0xE0
4037	 243	SHR		 	 
- stack 1: 0x634
- stack 0: 0x23E0002
4038	 244	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x23E0002
- stack 0: 0xFFFF
4039	 247	AND		 	 
- stack 1: 0x634
- stack 0: 0x2
4040	 248	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x1
4041	 24A	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x2
4042	 24B	PUSH2	00A0	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0xA0
4043	 24E	MSTORE		 	  ;; # store to x5
- stack 0: 0x634
4044	 24F	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
4045	 251	ADD		 	 
- stack 0: 0x638
4046	 252	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
4047	 253	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x258FFDC02B1000002C0008402DF00000314000200E9000201030012032E0028
4048	 254	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x258FFDC02B1000002C0008402DF00000314000200E9000201030012032E0028
- stack 0: 0xF0
4049	 256	SHR		 	 
- stack 1: 0x638
- stack 0: 0x258
4050	 257	JUMP		 	 
- stack 0: 0x638
4051	 258	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x638
4052	 259	PUSH2	0080	 	 
- stack 1: 0x638
- stack 0: 0x80
4053	 25C	MLOAD		 	  ;; # read from x4
- stack 1: 0x638
- stack 0: 0x2
4054	 25D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4055	 262	AND		 	  ;; # mask to 32 bits
- stack 1: 0x638
- stack 0: 0x2
4056	 263	PUSH2	00A0	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0xA0
4057	 266	MLOAD		 	  ;; # read from x5
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0x2
4058	 267	PUSH4	FFFFFFFF	 	 
- stack 3: 0x638
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4059	 26C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0x2
4060	 26D	SUB		 	 
- stack 1: 0x638
- stack 0: 0x0
4061	 26E	PUSH2	0276	 ;; _neq_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x276
4062	 271	JUMPI		 	 
- stack 0: 0x638
4063	 272	PUSH2	0290	 ;; _neq_after_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 1: 0x638
- stack 0: 0x290
4064	 275	JUMP		 	 
- stack 0: 0x638
4065	 290	JUMPDEST		 ;; _neq_after_72f82adfa101b66f0981ca7beedb23c9ed6dc37b4fe6202716c8dacc6285d93c	 
- stack 0: 0x638
4066	 291	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
4067	 293	ADD		 	 
- stack 0: 0x63C
4068	 294	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
4069	 295	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x2B1000002C0008402DF00000314000200E9000201030012032E002802B10000
4070	 296	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x2B1000002C0008402DF00000314000200E9000201030012032E002802B10000
- stack 0: 0xF0
4071	 298	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x2B1
4072	 299	JUMP		 	 
- stack 0: 0x63C
4073	 2B1	JUMPDEST		 ;; __riscvimpl_AUIPC_97010000	  ;; # instr: auipc gp,0x0(ignore imm)
- stack 0: 0x63C
4074	 2B2	DUP1		 	 
- stack 1: 0x63C
- stack 0: 0x63C
4075	 2B3	PUSH2	0060	 	 
- stack 2: 0x63C
- stack 1: 0x63C
- stack 0: 0x60
4076	 2B6	MSTORE		 	  ;; # store to x3
- stack 0: 0x63C
4077	 2B7	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
4078	 2B9	ADD		 	 
- stack 0: 0x640
4079	 2BA	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
4080	 2BB	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x2C0008402DF00000314000200E9000201030012032E002802B1000002C00068
4081	 2BC	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x2C0008402DF00000314000200E9000201030012032E002802B1000002C00068
- stack 0: 0xF0
4082	 2BE	SHR		 	 
- stack 1: 0x640
- stack 0: 0x2C0
4083	 2BF	JUMP		 	 
- stack 0: 0x640
4084	 2C0	JUMPDEST		 ;; __riscvimpl_ADDI_3_3_0	  ;; # instr: addi gp,gp,132(ignore imm)
- stack 0: 0x640
4085	 2C1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
4086	 2C2	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x2C0008402DF00000314000200E9000201030012032E002802B1000002C00068
4087	 2C3	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x2C0008402DF00000314000200E9000201030012032E002802B1000002C00068
- stack 0: 0xE0
4088	 2C5	SHR		 	 
- stack 1: 0x640
- stack 0: 0x2C00084
4089	 2C6	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x2C00084
- stack 0: 0xFFFF
4090	 2C9	AND		 	 
- stack 1: 0x640
- stack 0: 0x84
4091	 2CA	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x84
- stack 0: 0x1
4092	 2CC	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x84
4093	 2CD	PUSH2	0060	 	 
- stack 2: 0x640
- stack 1: 0x84
- stack 0: 0x60
4094	 2D0	MLOAD		 	  ;; # read from x3
- stack 2: 0x640
- stack 1: 0x84
- stack 0: 0x63C
4095	 2D1	ADD		 	  ;; # ADDI 3
- stack 1: 0x640
- stack 0: 0x6C0
4096	 2D2	PUSH2	0060	 	 
- stack 2: 0x640
- stack 1: 0x6C0
- stack 0: 0x60
4097	 2D5	MSTORE		 	  ;; # store to x3
- stack 0: 0x640
4098	 2D6	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
4099	 2D8	ADD		 	 
- stack 0: 0x644
4100	 2D9	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
4101	 2DA	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x2DF00000314000200E9000201030012032E002802B1000002C0006802DF0000
4102	 2DB	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x2DF00000314000200E9000201030012032E002802B1000002C0006802DF0000
- stack 0: 0xF0
4103	 2DD	SHR		 	 
- stack 1: 0x644
- stack 0: 0x2DF
4104	 2DE	JUMP		 	 
- stack 0: 0x644
4105	 2DF	JUMPDEST		 ;; __riscvimpl_LH_2_3_0	  ;; # instr: lh sp,0(gp)(ignore imm)
- stack 0: 0x644
4106	 2E0	PUSH2	0060	 	 
- stack 1: 0x644
- stack 0: 0x60
4107	 2E3	MLOAD		 	  ;; # read from x3
- stack 1: 0x644
- stack 0: 0x6C0
4108	 2E4	PUSH4	FFFFFFFF	 	 
- stack 2: 0x644
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
4109	 2E9	AND		 	  ;; # mask to 32 bits
- stack 1: 0x644
- stack 0: 0x6C0
4110	 2EA	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x644
- stack 1: 0x6C0
- stack 0: 0x644
4111	 2EB	MLOAD		 	 
- stack 2: 0x644
- stack 1: 0x6C0
- stack 0: 0x2DF00000314000200E9000201030012032E002802B1000002C0006802DF0000
4112	 2EC	PUSH1	E0	 	 
- stack 3: 0x644
- stack 2: 0x6C0
- stack 1: 0x2DF00000314000200E9000201030012032E002802B1000002C0006802DF0000
- stack 0: 0xE0
4113	 2EE	SHR		 	 
- stack 2: 0x644
- stack 1: 0x6C0
- stack 0: 0x2DF0000
4114	 2EF	PUSH2	FFFF	 	 
- stack 3: 0x644
- stack 2: 0x6C0
- stack 1: 0x2DF0000
- stack 0: 0xFFFF
4115	 2F2	AND		 	 
- stack 2: 0x644
- stack 1: 0x6C0
- stack 0: 0x0
4116	 2F3	PUSH1	01	 	 
- stack 3: 0x644
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x1
4117	 2F5	SIGNEXTEND		 	 
- stack 2: 0x644
- stack 1: 0x6C0
- stack 0: 0x0
4118	 2F6	ADD		 	 
- stack 1: 0x644
- stack 0: 0x6C0
4119	 2F7	PUSH4	FFFFFFFF	 	 
- stack 2: 0x644
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
4120	 2FC	AND		 	  ;; # mask to 32 bits
- stack 1: 0x644
- stack 0: 0x6C0
4121	 2FD	PUSH1	02	 	 
- stack 2: 0x644
- stack 1: 0x6C0
- stack 0: 0x2
4122	 2FF	XOR		 	 
- stack 1: 0x644
- stack 0: 0x6C2
4123	 300	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
4124	 301	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
4125	 303	SHR		 	 
- stack 1: 0x644
- stack 0: 0xFF
4126	 304	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0xFF
- stack 0: 0x1
4127	 306	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0xFF
4128	 307	PUSH2	0040	 	 
- stack 2: 0x644
- stack 1: 0xFF
- stack 0: 0x40
4129	 30A	MSTORE		 	  ;; # store to x2
- stack 0: 0x644
4130	 30B	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
4131	 30D	ADD		 	 
- stack 0: 0x648
4132	 30E	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
4133	 30F	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x314000200E9000201030012032E002802B1000002C0006802DF0000029A0000
4134	 310	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x314000200E9000201030012032E002802B1000002C0006802DF0000029A0000
- stack 0: 0xF0
4135	 312	SHR		 	 
- stack 1: 0x648
- stack 0: 0x314
4136	 313	JUMP		 	 
- stack 0: 0x648
4137	 314	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,2(ignore imm)
- stack 0: 0x648
4138	 315	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
4139	 316	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x314000200E9000201030012032E002802B1000002C0006802DF0000029A0000
4140	 317	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x314000200E9000201030012032E002802B1000002C0006802DF0000029A0000
- stack 0: 0xE0
4141	 319	SHR		 	 
- stack 1: 0x648
- stack 0: 0x3140002
4142	 31A	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x3140002
- stack 0: 0xFFFF
4143	 31D	AND		 	 
- stack 1: 0x648
- stack 0: 0x2
4144	 31E	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x1
4145	 320	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x2
4146	 321	PUSH2	0040	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x40
4147	 324	MSTORE		 	  ;; # store to x2
- stack 0: 0x648
4148	 325	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
4149	 327	ADD		 	 
- stack 0: 0x64C
4150	 328	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
4151	 329	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xE9000201030012032E002802B1000002C0006802DF0000029A000003140002
4152	 32A	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0xE9000201030012032E002802B1000002C0006802DF0000029A000003140002
- stack 0: 0xF0
4153	 32C	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xE9
4154	 32D	JUMP		 	 
- stack 0: 0x64C
4155	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x64C
4156	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
4157	 EB	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xE9000201030012032E002802B1000002C0006802DF0000029A000003140002
4158	 EC	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0xE9000201030012032E002802B1000002C0006802DF0000029A000003140002
- stack 0: 0xE0
4159	 EE	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xE90002
4160	 EF	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0xE90002
- stack 0: 0xFFFF
4161	 F2	AND		 	 
- stack 1: 0x64C
- stack 0: 0x2
4162	 F3	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x1
4163	 F5	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x2
4164	 F6	PUSH2	03A0	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x3A0
4165	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x64C
4166	 FA	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
4167	 FC	ADD		 	 
- stack 0: 0x650
4168	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
4169	 FE	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x1030012032E002802B1000002C0006802DF0000029A00000314000200E90002
4170	 FF	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x1030012032E002802B1000002C0006802DF0000029A00000314000200E90002
- stack 0: 0xF0
4171	 101	SHR		 	 
- stack 1: 0x650
- stack 0: 0x103
4172	 102	JUMP		 	 
- stack 0: 0x650
4173	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x650
4174	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
4175	 105	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x1030012032E002802B1000002C0006802DF0000029A00000314000200E90002
4176	 106	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x1030012032E002802B1000002C0006802DF0000029A00000314000200E90002
- stack 0: 0xE0
4177	 108	SHR		 	 
- stack 1: 0x650
- stack 0: 0x1030012
4178	 109	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x1030012
- stack 0: 0xFFFF
4179	 10C	AND		 	 
- stack 1: 0x650
- stack 0: 0x12
4180	 10D	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x12
- stack 0: 0x1
4181	 10F	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x12
4182	 110	PUSH2	0380	 	 
- stack 2: 0x650
- stack 1: 0x12
- stack 0: 0x380
4183	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x650
4184	 114	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
4185	 116	ADD		 	 
- stack 0: 0x654
4186	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
4187	 118	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x32E002802B1000002C0006802DF0000029A00000314000200E9000201030013
4188	 119	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x32E002802B1000002C0006802DF0000029A00000314000200E9000201030013
- stack 0: 0xF0
4189	 11B	SHR		 	 
- stack 1: 0x654
- stack 0: 0x32E
4190	 11C	JUMP		 	 
- stack 0: 0x654
4191	 32E	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,28(ignore imm)
- stack 0: 0x654
4192	 32F	PUSH2	0040	 	 
- stack 1: 0x654
- stack 0: 0x40
4193	 332	MLOAD		 	  ;; # read from x2
- stack 1: 0x654
- stack 0: 0x2
4194	 333	PUSH4	FFFFFFFF	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4195	 338	AND		 	  ;; # mask to 32 bits
- stack 1: 0x654
- stack 0: 0x2
4196	 339	PUSH2	03A0	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x3A0
4197	 33C	MLOAD		 	  ;; # read from x29
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x2
4198	 33D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x654
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4199	 342	AND		 	  ;; # mask to 32 bits
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x2
4200	 343	SUB		 	 
- stack 1: 0x654
- stack 0: 0x0
4201	 344	PUSH2	034C	 ;; _neq_c40c5d492dbc9cbffd4fb4e028aa6706bb239ec8bdd7c41a1b3b95f8c23b5d22	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0x34C
4202	 347	JUMPI		 	 
- stack 0: 0x654
4203	 348	PUSH2	0366	 ;; _neq_after_c40c5d492dbc9cbffd4fb4e028aa6706bb239ec8bdd7c41a1b3b95f8c23b5d22	 
- stack 1: 0x654
- stack 0: 0x366
4204	 34B	JUMP		 	 
- stack 0: 0x654
4205	 366	JUMPDEST		 ;; _neq_after_c40c5d492dbc9cbffd4fb4e028aa6706bb239ec8bdd7c41a1b3b95f8c23b5d22	 
- stack 0: 0x654
4206	 367	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
4207	 369	ADD		 	 
- stack 0: 0x658
4208	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
4209	 36B	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2B1000002C0006802DF0000029A00000314000200E9000201030013032E0008
4210	 36C	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x2B1000002C0006802DF0000029A00000314000200E9000201030013032E0008
- stack 0: 0xF0
4211	 36E	SHR		 	 
- stack 1: 0x658
- stack 0: 0x2B1
4212	 36F	JUMP		 	 
- stack 0: 0x658
4213	 2B1	JUMPDEST		 ;; __riscvimpl_AUIPC_97010000	  ;; # instr: auipc gp,0x0(ignore imm)
- stack 0: 0x658
4214	 2B2	DUP1		 	 
- stack 1: 0x658
- stack 0: 0x658
4215	 2B3	PUSH2	0060	 	 
- stack 2: 0x658
- stack 1: 0x658
- stack 0: 0x60
4216	 2B6	MSTORE		 	  ;; # store to x3
- stack 0: 0x658
4217	 2B7	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
4218	 2B9	ADD		 	 
- stack 0: 0x65C
4219	 2BA	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
4220	 2BB	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x2C0006802DF0000029A00000314000200E9000201030013032E000803700018
4221	 2BC	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x2C0006802DF0000029A00000314000200E9000201030013032E000803700018
- stack 0: 0xF0
4222	 2BE	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x2C0
4223	 2BF	JUMP		 	 
- stack 0: 0x65C
4224	 2C0	JUMPDEST		 ;; __riscvimpl_ADDI_3_3_0	  ;; # instr: addi gp,gp,132(ignore imm)
- stack 0: 0x65C
4225	 2C1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
4226	 2C2	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x2C0006802DF0000029A00000314000200E9000201030013032E000803700018
4227	 2C3	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x2C0006802DF0000029A00000314000200E9000201030013032E000803700018
- stack 0: 0xE0
4228	 2C5	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x2C00068
4229	 2C6	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x2C00068
- stack 0: 0xFFFF
4230	 2C9	AND		 	 
- stack 1: 0x65C
- stack 0: 0x68
4231	 2CA	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x68
- stack 0: 0x1
4232	 2CC	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x68
4233	 2CD	PUSH2	0060	 	 
- stack 2: 0x65C
- stack 1: 0x68
- stack 0: 0x60
4234	 2D0	MLOAD		 	  ;; # read from x3
- stack 2: 0x65C
- stack 1: 0x68
- stack 0: 0x658
4235	 2D1	ADD		 	  ;; # ADDI 3
- stack 1: 0x65C
- stack 0: 0x6C0
4236	 2D2	PUSH2	0060	 	 
- stack 2: 0x65C
- stack 1: 0x6C0
- stack 0: 0x60
4237	 2D5	MSTORE		 	  ;; # store to x3
- stack 0: 0x65C
4238	 2D6	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
4239	 2D8	ADD		 	 
- stack 0: 0x660
4240	 2D9	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
4241	 2DA	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x2DF0000029A00000314000200E9000201030013032E00080370001800210000
4242	 2DB	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x2DF0000029A00000314000200E9000201030013032E00080370001800210000
- stack 0: 0xF0
4243	 2DD	SHR		 	 
- stack 1: 0x660
- stack 0: 0x2DF
4244	 2DE	JUMP		 	 
- stack 0: 0x660
4245	 2DF	JUMPDEST		 ;; __riscvimpl_LH_2_3_0	  ;; # instr: lh sp,0(gp)(ignore imm)
- stack 0: 0x660
4246	 2E0	PUSH2	0060	 	 
- stack 1: 0x660
- stack 0: 0x60
4247	 2E3	MLOAD		 	  ;; # read from x3
- stack 1: 0x660
- stack 0: 0x6C0
4248	 2E4	PUSH4	FFFFFFFF	 	 
- stack 2: 0x660
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
4249	 2E9	AND		 	  ;; # mask to 32 bits
- stack 1: 0x660
- stack 0: 0x6C0
4250	 2EA	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x660
- stack 1: 0x6C0
- stack 0: 0x660
4251	 2EB	MLOAD		 	 
- stack 2: 0x660
- stack 1: 0x6C0
- stack 0: 0x2DF0000029A00000314000200E9000201030013032E00080370001800210000
4252	 2EC	PUSH1	E0	 	 
- stack 3: 0x660
- stack 2: 0x6C0
- stack 1: 0x2DF0000029A00000314000200E9000201030013032E00080370001800210000
- stack 0: 0xE0
4253	 2EE	SHR		 	 
- stack 2: 0x660
- stack 1: 0x6C0
- stack 0: 0x2DF0000
4254	 2EF	PUSH2	FFFF	 	 
- stack 3: 0x660
- stack 2: 0x6C0
- stack 1: 0x2DF0000
- stack 0: 0xFFFF
4255	 2F2	AND		 	 
- stack 2: 0x660
- stack 1: 0x6C0
- stack 0: 0x0
4256	 2F3	PUSH1	01	 	 
- stack 3: 0x660
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x1
4257	 2F5	SIGNEXTEND		 	 
- stack 2: 0x660
- stack 1: 0x6C0
- stack 0: 0x0
4258	 2F6	ADD		 	 
- stack 1: 0x660
- stack 0: 0x6C0
4259	 2F7	PUSH4	FFFFFFFF	 	 
- stack 2: 0x660
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
4260	 2FC	AND		 	  ;; # mask to 32 bits
- stack 1: 0x660
- stack 0: 0x6C0
4261	 2FD	PUSH1	02	 	 
- stack 2: 0x660
- stack 1: 0x6C0
- stack 0: 0x2
4262	 2FF	XOR		 	 
- stack 1: 0x660
- stack 0: 0x6C2
4263	 300	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
4264	 301	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
4265	 303	SHR		 	 
- stack 1: 0x660
- stack 0: 0xFF
4266	 304	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0xFF
- stack 0: 0x1
4267	 306	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xFF
4268	 307	PUSH2	0040	 	 
- stack 2: 0x660
- stack 1: 0xFF
- stack 0: 0x40
4269	 30A	MSTORE		 	  ;; # store to x2
- stack 0: 0x660
4270	 30B	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
4271	 30D	ADD		 	 
- stack 0: 0x664
4272	 30E	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
4273	 30F	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x29A00000314000200E9000201030013032E00080370001800210000003406B8
4274	 310	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x29A00000314000200E9000201030013032E00080370001800210000003406B8
- stack 0: 0xF0
4275	 312	SHR		 	 
- stack 1: 0x664
- stack 0: 0x29A
4276	 313	JUMP		 	 
- stack 0: 0x664
4277	 29A	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x664
4278	 29B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
4279	 29C	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x29A00000314000200E9000201030013032E00080370001800210000003406B8
4280	 29D	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x29A00000314000200E9000201030013032E00080370001800210000003406B8
- stack 0: 0xE0
4281	 29F	SHR		 	 
- stack 1: 0x664
- stack 0: 0x29A0000
4282	 2A0	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x29A0000
- stack 0: 0xFFFF
4283	 2A3	AND		 	 
- stack 1: 0x664
- stack 0: 0x0
4284	 2A4	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x1
4285	 2A6	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x0
4286	 2A7	POP		 	 
- stack 0: 0x664
4287	 2A8	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
4288	 2AA	ADD		 	 
- stack 0: 0x668
4289	 2AB	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
4290	 2AC	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x314000200E9000201030013032E00080370001800210000003406B800530042
4291	 2AD	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x314000200E9000201030013032E00080370001800210000003406B800530042
- stack 0: 0xF0
4292	 2AF	SHR		 	 
- stack 1: 0x668
- stack 0: 0x314
4293	 2B0	JUMP		 	 
- stack 0: 0x668
4294	 314	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,2(ignore imm)
- stack 0: 0x668
4295	 315	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
4296	 316	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x314000200E9000201030013032E00080370001800210000003406B800530042
4297	 317	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x314000200E9000201030013032E00080370001800210000003406B800530042
- stack 0: 0xE0
4298	 319	SHR		 	 
- stack 1: 0x668
- stack 0: 0x3140002
4299	 31A	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x3140002
- stack 0: 0xFFFF
4300	 31D	AND		 	 
- stack 1: 0x668
- stack 0: 0x2
4301	 31E	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0x2
- stack 0: 0x1
4302	 320	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0x2
4303	 321	PUSH2	0040	 	 
- stack 2: 0x668
- stack 1: 0x2
- stack 0: 0x40
4304	 324	MSTORE		 	  ;; # store to x2
- stack 0: 0x668
4305	 325	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
4306	 327	ADD		 	 
- stack 0: 0x66C
4307	 328	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4308	 329	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xE9000201030013032E00080370001800210000003406B80053004200660000
4309	 32A	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xE9000201030013032E00080370001800210000003406B80053004200660000
- stack 0: 0xF0
4310	 32C	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xE9
4311	 32D	JUMP		 	 
- stack 0: 0x66C
4312	 E9	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x66C
4313	 EA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
4314	 EB	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xE9000201030013032E00080370001800210000003406B80053004200660000
4315	 EC	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0xE9000201030013032E00080370001800210000003406B80053004200660000
- stack 0: 0xE0
4316	 EE	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xE90002
4317	 EF	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0xE90002
- stack 0: 0xFFFF
4318	 F2	AND		 	 
- stack 1: 0x66C
- stack 0: 0x2
4319	 F3	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x2
- stack 0: 0x1
4320	 F5	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x2
4321	 F6	PUSH2	03A0	 	 
- stack 2: 0x66C
- stack 1: 0x2
- stack 0: 0x3A0
4322	 F9	MSTORE		 	  ;; # store to x29
- stack 0: 0x66C
4323	 FA	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4324	 FC	ADD		 	 
- stack 0: 0x670
4325	 FD	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4326	 FE	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x1030013032E00080370001800210000003406B8005300420066000003B00001
4327	 FF	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x1030013032E00080370001800210000003406B8005300420066000003B00001
- stack 0: 0xF0
4328	 101	SHR		 	 
- stack 1: 0x670
- stack 0: 0x103
4329	 102	JUMP		 	 
- stack 0: 0x670
4330	 103	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x670
4331	 104	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4332	 105	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x1030013032E00080370001800210000003406B8005300420066000003B00001
4333	 106	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x1030013032E00080370001800210000003406B8005300420066000003B00001
- stack 0: 0xE0
4334	 108	SHR		 	 
- stack 1: 0x670
- stack 0: 0x1030013
4335	 109	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x1030013
- stack 0: 0xFFFF
4336	 10C	AND		 	 
- stack 1: 0x670
- stack 0: 0x13
4337	 10D	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x13
- stack 0: 0x1
4338	 10F	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x13
4339	 110	PUSH2	0380	 	 
- stack 2: 0x670
- stack 1: 0x13
- stack 0: 0x380
4340	 113	MSTORE		 	  ;; # store to x28
- stack 0: 0x670
4341	 114	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4342	 116	ADD		 	 
- stack 0: 0x674
4343	 117	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4344	 118	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x32E00080370001800210000003406B8005300420066000003B0000100210000
4345	 119	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x32E00080370001800210000003406B8005300420066000003B0000100210000
- stack 0: 0xF0
4346	 11B	SHR		 	 
- stack 1: 0x674
- stack 0: 0x32E
4347	 11C	JUMP		 	 
- stack 0: 0x674
4348	 32E	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,28(ignore imm)
- stack 0: 0x674
4349	 32F	PUSH2	0040	 	 
- stack 1: 0x674
- stack 0: 0x40
4350	 332	MLOAD		 	  ;; # read from x2
- stack 1: 0x674
- stack 0: 0x2
4351	 333	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4352	 338	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x2
4353	 339	PUSH2	03A0	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x3A0
4354	 33C	MLOAD		 	  ;; # read from x29
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x2
4355	 33D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x674
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4356	 342	AND		 	  ;; # mask to 32 bits
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x2
4357	 343	SUB		 	 
- stack 1: 0x674
- stack 0: 0x0
4358	 344	PUSH2	034C	 ;; _neq_c40c5d492dbc9cbffd4fb4e028aa6706bb239ec8bdd7c41a1b3b95f8c23b5d22	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x34C
4359	 347	JUMPI		 	 
- stack 0: 0x674
4360	 348	PUSH2	0366	 ;; _neq_after_c40c5d492dbc9cbffd4fb4e028aa6706bb239ec8bdd7c41a1b3b95f8c23b5d22	 
- stack 1: 0x674
- stack 0: 0x366
4361	 34B	JUMP		 	 
- stack 0: 0x674
4362	 366	JUMPDEST		 ;; _neq_after_c40c5d492dbc9cbffd4fb4e028aa6706bb239ec8bdd7c41a1b3b95f8c23b5d22	 
- stack 0: 0x674
4363	 367	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4364	 369	ADD		 	 
- stack 0: 0x678
4365	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4366	 36B	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x370001800210000003406B8005300420066000003B0000100210000003406BC
4367	 36C	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x370001800210000003406B8005300420066000003B0000100210000003406BC
- stack 0: 0xF0
4368	 36E	SHR		 	 
- stack 1: 0x678
- stack 0: 0x370
4369	 36F	JUMP		 	 
- stack 0: 0x678
4370	 370	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x678
4371	 371	PUSH1	00	 	 
- stack 1: 0x678
- stack 0: 0x0
4372	 373	PUSH4	FFFFFFFF	 	 
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4373	 378	AND		 	  ;; # mask to 32 bits
- stack 1: 0x678
- stack 0: 0x0
4374	 379	PUSH2	0380	 	 
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0x380
4375	 37C	MLOAD		 	  ;; # read from x28
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0x13
4376	 37D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x678
- stack 2: 0x0
- stack 1: 0x13
- stack 0: 0xFFFFFFFF
4377	 382	AND		 	  ;; # mask to 32 bits
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0x13
4378	 383	SUB		 	 
- stack 1: 0x678
- stack 0: 0x13
4379	 384	PUSH2	038C	 ;; _neq_636fa60e09508d55b13c58f7fbbd132d79fc05c94882b18973ef45609a56130a	 
- stack 2: 0x678
- stack 1: 0x13
- stack 0: 0x38C
4380	 387	JUMPI		 	 
- stack 0: 0x678
4381	 38C	JUMPDEST		 ;; _neq_636fa60e09508d55b13c58f7fbbd132d79fc05c94882b18973ef45609a56130a	 
- stack 0: 0x678
4382	 38D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
4383	 38E	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x370001800210000003406B8005300420066000003B0000100210000003406BC
4384	 38F	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x370001800210000003406B8005300420066000003B0000100210000003406BC
- stack 0: 0xE0
4385	 391	SHR		 	 
- stack 1: 0x678
- stack 0: 0x3700018
4386	 392	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x3700018
- stack 0: 0xFFFF
4387	 395	AND		 	 
- stack 1: 0x678
- stack 0: 0x18
4388	 396	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x18
- stack 0: 0x1
4389	 398	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x18
4390	 399	ADD		 	 
- stack 0: 0x690
4391	 39A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x690
- stack 0: 0xFFFFFFFF
4392	 39F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x690
4393	 3A0	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4394	 3A1	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x210000003406BC005300420066000003BB0000006600000000000000000000
4395	 3A2	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x210000003406BC005300420066000003BB0000006600000000000000000000
- stack 0: 0xF0
4396	 3A4	SHR		 	 
- stack 1: 0x690
- stack 0: 0x21
4397	 3A5	JUMP		 	 
- stack 0: 0x690
4398	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x690
4399	 22	PUSH4	00000000	 	 
- stack 1: 0x690
- stack 0: 0x0
4400	 27	PUSH2	0160	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x160
4401	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x690
4402	 2B	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4403	 2D	ADD		 	 
- stack 0: 0x694
4404	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4405	 2F	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x3406BC005300420066000003BB00000066000000000000000000006574796D
4406	 30	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x3406BC005300420066000003BB00000066000000000000000000006574796D
- stack 0: 0xF0
4407	 32	SHR		 	 
- stack 1: 0x694
- stack 0: 0x34
4408	 33	JUMP		 	 
- stack 0: 0x694
4409	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1712(ignore imm)
- stack 0: 0x694
4410	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4411	 36	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x3406BC005300420066000003BB00000066000000000000000000006574796D
4412	 37	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x3406BC005300420066000003BB00000066000000000000000000006574796D
- stack 0: 0xE0
4413	 39	SHR		 	 
- stack 1: 0x694
- stack 0: 0x3406BC
4414	 3A	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x3406BC
- stack 0: 0xFFFF
4415	 3D	AND		 	 
- stack 1: 0x694
- stack 0: 0x6BC
4416	 3E	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x6BC
- stack 0: 0x1
4417	 40	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x6BC
4418	 41	PUSH2	0160	 	 
- stack 2: 0x694
- stack 1: 0x6BC
- stack 0: 0x160
4419	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x694
- stack 1: 0x6BC
- stack 0: 0x0
4420	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x694
- stack 0: 0x6BC
4421	 46	PUSH2	0160	 	 
- stack 2: 0x694
- stack 1: 0x6BC
- stack 0: 0x160
4422	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x694
4423	 4A	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4424	 4C	ADD		 	 
- stack 0: 0x698
4425	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4426	 4E	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x5300420066000003BB00000066000000000000000000006574796D00007473
4427	 4F	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x5300420066000003BB00000066000000000000000000006574796D00007473
- stack 0: 0xF0
4428	 51	SHR		 	 
- stack 1: 0x698
- stack 0: 0x53
4429	 52	JUMP		 	 
- stack 0: 0x698
4430	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x698
4431	 54	PUSH4	00042000	 	 
- stack 1: 0x698
- stack 0: 0x42000
4432	 59	PUSH2	0140	 	 
- stack 2: 0x698
- stack 1: 0x42000
- stack 0: 0x140
4433	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x698
4434	 5D	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4435	 5F	ADD		 	 
- stack 0: 0x69C
4436	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4437	 61	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x66000003BB00000066000000000000000000006574796D0000747300525245
4438	 62	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x66000003BB00000066000000000000000000006574796D0000747300525245
- stack 0: 0xF0
4439	 64	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x66
4440	 65	JUMP		 	 
- stack 0: 0x69C
4441	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x69C
4442	 67	PUSH2	0140	 	 
- stack 1: 0x69C
- stack 0: 0x140
4443	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x69C
- stack 0: 0x42000
4444	 6B	PUSH2	0075	 ;; _ecall_c15a32e90658a184e3afa33e8b3ef6b075f6591547b1a1621b5ff13b68c2c2b4	 
- stack 2: 0x69C
- stack 1: 0x42000
- stack 0: 0x75
4445	 6E	JUMPI		 	 
- stack 0: 0x69C
4446	 75	JUMPDEST		 ;; _ecall_c15a32e90658a184e3afa33e8b3ef6b075f6591547b1a1621b5ff13b68c2c2b4	 
- stack 0: 0x69C
4447	 76	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4448	 78	PUSH2	0160	 	 
- stack 2: 0x69C
- stack 1: 0x4
- stack 0: 0x160
4449	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x69C
- stack 1: 0x4
- stack 0: 0x6BC
4450	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x69C
4451	 7D	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4452	 7F	ADD		 	 
- stack 0: 0x6A0
4453	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4454	 81	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x3BB00000066000000000000000000006574796D000074730052524500004B4F
4455	 82	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x3BB00000066000000000000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
4456	 84	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x3BB
4457	 85	JUMP		 	 
- stack 0: 0x6A0
4458	 3BB	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x6A0
4459	 3BC	PUSH4	00000000	 	 
- stack 1: 0x6A0
- stack 0: 0x0
4460	 3C1	PUSH2	0140	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x140
4461	 3C4	MSTORE		 	  ;; # store to x10
- stack 0: 0x6A0
4462	 3C5	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4463	 3C7	ADD		 	 
- stack 0: 0x6A4
4464	 3C8	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4465	 3C9	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x66000000000000000000006574796D000074730052524500004B4FFF0000FF
4466	 3CA	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x66000000000000000000006574796D000074730052524500004B4FFF0000FF
- stack 0: 0xF0
4467	 3CC	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x66
4468	 3CD	JUMP		 	 
- stack 0: 0x6A4
4469	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6A4
4470	 67	PUSH2	0140	 	 
- stack 1: 0x6A4
- stack 0: 0x140
4471	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6A4
- stack 0: 0x0
4472	 6B	PUSH2	0075	 ;; _ecall_c15a32e90658a184e3afa33e8b3ef6b075f6591547b1a1621b5ff13b68c2c2b4	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0x75
4473	 6E	JUMPI		 	 
- stack 0: 0x6A4
4474	 6F	PUSH1	20	 	 
- stack 1: 0x6A4
- stack 0: 0x20
4475	 71	PUSH2	0160	 	 
- stack 2: 0x6A4
- stack 1: 0x20
- stack 0: 0x160
4476	 74	RETURN		 	 
Final bytecode length; 1687
Returned: 00000000000000000000000000000000000000000000000000000000000006bc
gasUsed : 15851
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424
** HOT: 428 - range: 428,42c,430,434,438,43c
** HOT: 440 - range: 440,444,448,44c,450,454,458
** HOT: 45c - range: 45c,460,464,468,46c,470,474
** HOT: 478 - range: 478,47c,480,484,488,48c
** HOT: 490 - range: 490,494,498,49c,4a0,4a4
** HOT: 4a8 - range: 4a8,4ac,4b0,4b4,4b8,4bc,4c0
** HOT: 4c4 - range: 4c4,4c8,4cc,4d0,4d4,4d8,4dc
** HOT: 4e0 - range: 4e0,4e4,4e8,4ec,4f0,4f4,4f8
** HOT: 4fc - range: 4fc,500,504,508,50c,510,514
** HOT: 518 - range: 518,51c,520,524,528,52c,530,534,538
** HOT: 520 - range: 520,524,528,52c,530,534,538
** HOT: 53c - range: 53c,540,544
** HOT: 548 - range: 548,54c,550,554,558,55c,560,564,568,56c
** HOT: 550 - range: 550,554,558,55c,560,564,568,56c
** HOT: 570 - range: 570,574,578
** HOT: 57c - range: 57c,580,584,588,58c,590,594,598,59c,5a0
** HOT: 584 - range: 584,588,58c,590,594,598,59c,5a0
** HOT: 5a4 - range: 5a4,5a8,5ac
** HOT: 5b0 - range: 5b0,5b4,5b8,5bc,5c0,5c4,5c8,5cc
** HOT: 5b8 - range: 5b8,5bc,5c0,5c4,5c8,5cc
** HOT: 5d0 - range: 5d0,5d4,5d8
** HOT: 5dc - range: 5dc,5e0,5e4,5e8,5ec,5f0,5f4,5f8,5fc
** HOT: 5e4 - range: 5e4,5e8,5ec,5f0,5f4,5f8,5fc
** HOT: 600 - range: 600,604,608
** HOT: 60c - range: 60c,610,614,618,61c,620,624,628,62c
** HOT: 614 - range: 614,618,61c,620,624,628,62c
** HOT: 630 - range: 630,634,638
** HOT: 63c - range: 63c,640,644,648,64c,650,654
** HOT: 658 - range: 658,65c,660,664,668,66c,670,674
