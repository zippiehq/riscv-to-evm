Running in EVM:
0	 0	PUSH4	02D8	 	 
- stack 0: 0x2D8
1	 5	PUSH2	03DB	 ;; _rambegin	 
- stack 1: 0x2D8
- stack 0: 0x3DB
2	 8	PUSH1	01	 	 
- stack 2: 0x2D8
- stack 1: 0x3DB
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x2D8
- stack 0: 0x3DC
4	 B	PUSH2	0400	 	 
- stack 2: 0x2D8
- stack 1: 0x3DC
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x210000003406C0005300420066000000860000009502C000B4000000E600FF
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x210000003406C0005300420066000000860000009502C000B4000000E600FF
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406C0005300420066000000860000009502C000B4000000E600FF01000002
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x3406C0005300420066000000860000009502C000B4000000E600FF01000002
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1728(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406C0005300420066000000860000009502C000B4000000E600FF01000002
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x3406C0005300420066000000860000009502C000B4000000E600FF01000002
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x3406C0
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x3406C0
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x6C0
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x6C0
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x6C0
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x6C0
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x6C0
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x6C0
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x6C0
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x5300420066000000860000009502C000B4000000E600FF01000002011A026C
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x5300420066000000860000009502C000B4000000E600FF01000002011A026C
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x66000000860000009502C000B4000000E600FF01000002011A026C00860000
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x66000000860000009502C000B4000000E600FF01000002011A026C00860000
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_30ac1b51abc0b91952b34ea9e21fc9a31c30698dc9baff426477262b7c24a2d1	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_30ac1b51abc0b91952b34ea9e21fc9a31c30698dc9baff426477262b7c24a2d1	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x6C0
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x860000009502C000B4000000E600FF01000002011A026C00860000009502A8
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x860000009502C000B4000000E600FF01000002011A026C00860000009502A8
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	 
- stack 1: 0x410
- stack 0: 0x410
77	 88	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x410
- stack 0: 0x20
78	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 8C	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 8E	ADD		 	 
- stack 0: 0x414
81	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 90	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x9502C000B4000000E600FF01000002011A026C00860000009502A800B40002
83	 91	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x9502C000B4000000E600FF01000002011A026C00860000009502A800B40002
- stack 0: 0xF0
84	 93	SHR		 	 
- stack 1: 0x414
- stack 0: 0x95
85	 94	JUMP		 	 
- stack 0: 0x414
86	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x414
87	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 97	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x9502C000B4000000E600FF01000002011A026C00860000009502A800B40002
89	 98	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x9502C000B4000000E600FF01000002011A026C00860000009502A800B40002
- stack 0: 0xE0
90	 9A	SHR		 	 
- stack 1: 0x414
- stack 0: 0x9502C0
91	 9B	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x9502C0
- stack 0: 0xFFFF
92	 9E	AND		 	 
- stack 1: 0x414
- stack 0: 0x2C0
93	 9F	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x2C0
- stack 0: 0x1
94	 A1	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x2C0
95	 A2	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x2C0
- stack 0: 0x20
96	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0x2C0
- stack 0: 0x410
97	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x414
- stack 0: 0x6D0
98	 A7	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x6D0
- stack 0: 0x20
99	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
100	 AB	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
101	 AD	ADD		 	 
- stack 0: 0x418
102	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
103	 AF	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB4000000E600FF01000002011A026C00860000009502A800B40002015C0010
104	 B0	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB4000000E600FF01000002011A026C00860000009502A800B40002015C0010
- stack 0: 0xF0
105	 B2	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB4
106	 B3	JUMP		 	 
- stack 0: 0x418
107	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x418
108	 B5	PUSH2	0020	 	 
- stack 1: 0x418
- stack 0: 0x20
109	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x418
- stack 0: 0x6D0
110	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x418
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFF
111	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x418
- stack 0: 0x6D0
112	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x418
- stack 1: 0x6D0
- stack 0: 0x418
113	 C0	MLOAD		 	 
- stack 2: 0x418
- stack 1: 0x6D0
- stack 0: 0xB4000000E600FF01000002011A026C00860000009502A800B40002015C0010
114	 C1	PUSH1	E0	 	 
- stack 3: 0x418
- stack 2: 0x6D0
- stack 1: 0xB4000000E600FF01000002011A026C00860000009502A800B40002015C0010
- stack 0: 0xE0
115	 C3	SHR		 	 
- stack 2: 0x418
- stack 1: 0x6D0
- stack 0: 0xB40000
116	 C4	PUSH2	FFFF	 	 
- stack 3: 0x418
- stack 2: 0x6D0
- stack 1: 0xB40000
- stack 0: 0xFFFF
117	 C7	AND		 	 
- stack 2: 0x418
- stack 1: 0x6D0
- stack 0: 0x0
118	 C8	PUSH1	01	 	 
- stack 3: 0x418
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x1
119	 CA	SIGNEXTEND		 	 
- stack 2: 0x418
- stack 1: 0x6D0
- stack 0: 0x0
120	 CB	ADD		 	 
- stack 1: 0x418
- stack 0: 0x6D0
121	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x418
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFF
122	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x418
- stack 0: 0x6D0
123	 D2	PUSH1	02	 	 
- stack 2: 0x418
- stack 1: 0x6D0
- stack 0: 0x2
124	 D4	XOR		 	 
- stack 1: 0x418
- stack 0: 0x6D2
125	 D5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
126	 D6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
127	 D8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xFF
128	 D9	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0xFF
- stack 0: 0x60
129	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
130	 DD	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
131	 DF	ADD		 	 
- stack 0: 0x41C
132	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
133	 E1	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xE600FF01000002011A026C00860000009502A800B40002015C0010016FFF00
134	 E2	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xE600FF01000002011A026C00860000009502A800B40002015C0010016FFF00
- stack 0: 0xF0
135	 E4	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xE6
136	 E5	JUMP		 	 
- stack 0: 0x41C
137	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x41C
138	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
139	 E8	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xE600FF01000002011A026C00860000009502A800B40002015C0010016FFF00
140	 E9	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xE600FF01000002011A026C00860000009502A800B40002015C0010016FFF00
- stack 0: 0xE0
141	 EB	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xE600FF
142	 EC	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xE600FF
- stack 0: 0xFFFF
143	 EF	AND		 	 
- stack 1: 0x41C
- stack 0: 0xFF
144	 F0	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0xFF
- stack 0: 0x1
145	 F2	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0xFF
146	 F3	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0xFF
- stack 0: 0x3A0
147	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
148	 F7	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
149	 F9	ADD		 	 
- stack 0: 0x420
150	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
151	 FB	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0x1000002011A026C00860000009502A800B40002015C0010016FFF0001000003
152	 FC	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0x1000002011A026C00860000009502A800B40002015C0010016FFF0001000003
- stack 0: 0xF0
153	 FE	SHR		 	 
- stack 1: 0x420
- stack 0: 0x100
154	 FF	JUMP		 	 
- stack 0: 0x420
155	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x420
156	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
157	 102	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0x1000002011A026C00860000009502A800B40002015C0010016FFF0001000003
158	 103	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0x1000002011A026C00860000009502A800B40002015C0010016FFF0001000003
- stack 0: 0xE0
159	 105	SHR		 	 
- stack 1: 0x420
- stack 0: 0x1000002
160	 106	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0x1000002
- stack 0: 0xFFFF
161	 109	AND		 	 
- stack 1: 0x420
- stack 0: 0x2
162	 10A	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x1
163	 10C	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0x2
164	 10D	PUSH2	0380	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x380
165	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x420
166	 111	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
167	 113	ADD		 	 
- stack 0: 0x424
168	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
169	 115	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x11A026C00860000009502A800B40002015C0010016FFF0001000003011A0250
170	 116	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x11A026C00860000009502A800B40002015C0010016FFF0001000003011A0250
- stack 0: 0xF0
171	 118	SHR		 	 
- stack 1: 0x424
- stack 0: 0x11A
172	 119	JUMP		 	 
- stack 0: 0x424
173	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x424
174	 11B	PUSH2	0060	 	 
- stack 1: 0x424
- stack 0: 0x60
175	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x424
- stack 0: 0xFF
176	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
177	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0xFF
178	 125	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0xFF
- stack 0: 0x3A0
179	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x424
- stack 1: 0xFF
- stack 0: 0xFF
180	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0xFF
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
181	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0xFF
- stack 0: 0xFF
182	 12F	SUB		 	 
- stack 1: 0x424
- stack 0: 0x0
183	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x138
184	 133	JUMPI		 	 
- stack 0: 0x424
185	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x424
- stack 0: 0x152
186	 137	JUMP		 	 
- stack 0: 0x424
187	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x424
188	 153	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
189	 155	ADD		 	 
- stack 0: 0x428
190	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
191	 157	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x860000009502A800B40002015C0010016FFF0001000003011A025000860000
192	 158	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x860000009502A800B40002015C0010016FFF0001000003011A025000860000
- stack 0: 0xF0
193	 15A	SHR		 	 
- stack 1: 0x428
- stack 0: 0x86
194	 15B	JUMP		 	 
- stack 0: 0x428
195	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x428
196	 87	DUP1		 	 
- stack 1: 0x428
- stack 0: 0x428
197	 88	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x428
- stack 0: 0x20
198	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x428
199	 8C	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
200	 8E	ADD		 	 
- stack 0: 0x42C
201	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
202	 90	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x9502A800B40002015C0010016FFF0001000003011A0250008600000095028C
203	 91	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x9502A800B40002015C0010016FFF0001000003011A0250008600000095028C
- stack 0: 0xF0
204	 93	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x95
205	 94	JUMP		 	 
- stack 0: 0x42C
206	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x42C
207	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
208	 97	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x9502A800B40002015C0010016FFF0001000003011A0250008600000095028C
209	 98	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0x9502A800B40002015C0010016FFF0001000003011A0250008600000095028C
- stack 0: 0xE0
210	 9A	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x9502A8
211	 9B	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0x9502A8
- stack 0: 0xFFFF
212	 9E	AND		 	 
- stack 1: 0x42C
- stack 0: 0x2A8
213	 9F	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x2A8
- stack 0: 0x1
214	 A1	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x2A8
215	 A2	PUSH2	0020	 	 
- stack 2: 0x42C
- stack 1: 0x2A8
- stack 0: 0x20
216	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x42C
- stack 1: 0x2A8
- stack 0: 0x428
217	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x42C
- stack 0: 0x6D0
218	 A7	PUSH2	0020	 	 
- stack 2: 0x42C
- stack 1: 0x6D0
- stack 0: 0x20
219	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x42C
220	 AB	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
221	 AD	ADD		 	 
- stack 0: 0x430
222	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
223	 AF	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xB40002015C0010016FFF0001000003011A0250008600000095028C00B40004
224	 B0	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xB40002015C0010016FFF0001000003011A0250008600000095028C00B40004
- stack 0: 0xF0
225	 B2	SHR		 	 
- stack 1: 0x430
- stack 0: 0xB4
226	 B3	JUMP		 	 
- stack 0: 0x430
227	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x430
228	 B5	PUSH2	0020	 	 
- stack 1: 0x430
- stack 0: 0x20
229	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x430
- stack 0: 0x6D0
230	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x430
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFF
231	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x430
- stack 0: 0x6D0
232	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x430
- stack 1: 0x6D0
- stack 0: 0x430
233	 C0	MLOAD		 	 
- stack 2: 0x430
- stack 1: 0x6D0
- stack 0: 0xB40002015C0010016FFF0001000003011A0250008600000095028C00B40004
234	 C1	PUSH1	E0	 	 
- stack 3: 0x430
- stack 2: 0x6D0
- stack 1: 0xB40002015C0010016FFF0001000003011A0250008600000095028C00B40004
- stack 0: 0xE0
235	 C3	SHR		 	 
- stack 2: 0x430
- stack 1: 0x6D0
- stack 0: 0xB40002
236	 C4	PUSH2	FFFF	 	 
- stack 3: 0x430
- stack 2: 0x6D0
- stack 1: 0xB40002
- stack 0: 0xFFFF
237	 C7	AND		 	 
- stack 2: 0x430
- stack 1: 0x6D0
- stack 0: 0x2
238	 C8	PUSH1	01	 	 
- stack 3: 0x430
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0x1
239	 CA	SIGNEXTEND		 	 
- stack 2: 0x430
- stack 1: 0x6D0
- stack 0: 0x2
240	 CB	ADD		 	 
- stack 1: 0x430
- stack 0: 0x6D2
241	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x430
- stack 1: 0x6D2
- stack 0: 0xFFFFFFFF
242	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x430
- stack 0: 0x6D2
243	 D2	PUSH1	02	 	 
- stack 2: 0x430
- stack 1: 0x6D2
- stack 0: 0x2
244	 D4	XOR		 	 
- stack 1: 0x430
- stack 0: 0x6D0
245	 D5	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
246	 D6	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
- stack 0: 0xF0
247	 D8	SHR		 	 
- stack 1: 0x430
- stack 0: 0xFF00
248	 D9	PUSH2	0060	 	 
- stack 2: 0x430
- stack 1: 0xFF00
- stack 0: 0x60
249	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x430
250	 DD	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
251	 DF	ADD		 	 
- stack 0: 0x434
252	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
253	 E1	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x15C0010016FFF0001000003011A0250008600000095028C00B40004018E0001
254	 E2	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0x15C0010016FFF0001000003011A0250008600000095028C00B40004018E0001
- stack 0: 0xF0
255	 E4	SHR		 	 
- stack 1: 0x434
- stack 0: 0x15C
256	 E5	JUMP		 	 
- stack 0: 0x434
257	 15C	JUMPDEST		 ;; __riscvimpl_LUI_10eb7	  ;; # instr: lui t4,0x10(ignore imm)
- stack 0: 0x434
258	 15D	PUSH4	00010000	 	 
- stack 1: 0x434
- stack 0: 0x10000
259	 162	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0x10000
- stack 0: 0x3A0
260	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x434
261	 166	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
262	 168	ADD		 	 
- stack 0: 0x438
263	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
264	 16A	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x16FFF0001000003011A0250008600000095028C00B40004018E0001016FFFF0
265	 16B	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x16FFF0001000003011A0250008600000095028C00B40004018E0001016FFFF0
- stack 0: 0xF0
266	 16D	SHR		 	 
- stack 1: 0x438
- stack 0: 0x16F
267	 16E	JUMP		 	 
- stack 0: 0x438
268	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x438
269	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
270	 171	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x16FFF0001000003011A0250008600000095028C00B40004018E0001016FFFF0
271	 172	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0x16FFF0001000003011A0250008600000095028C00B40004018E0001016FFFF0
- stack 0: 0xE0
272	 174	SHR		 	 
- stack 1: 0x438
- stack 0: 0x16FFF00
273	 175	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0x16FFF00
- stack 0: 0xFFFF
274	 178	AND		 	 
- stack 1: 0x438
- stack 0: 0xFF00
275	 179	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0xFF00
- stack 0: 0x1
276	 17B	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
277	 17C	PUSH2	03A0	 	 
- stack 2: 0x438
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
278	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x438
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x10000
279	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x438
- stack 0: 0xFF00
280	 181	PUSH2	03A0	 	 
- stack 2: 0x438
- stack 1: 0xFF00
- stack 0: 0x3A0
281	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x438
282	 185	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
283	 187	ADD		 	 
- stack 0: 0x43C
284	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
285	 189	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x1000003011A0250008600000095028C00B40004018E0001016FFFF001000004
286	 18A	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x1000003011A0250008600000095028C00B40004018E0001016FFFF001000004
- stack 0: 0xF0
287	 18C	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x100
288	 18D	JUMP		 	 
- stack 0: 0x43C
289	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x43C
290	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
291	 102	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x1000003011A0250008600000095028C00B40004018E0001016FFFF001000004
292	 103	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0x1000003011A0250008600000095028C00B40004018E0001016FFFF001000004
- stack 0: 0xE0
293	 105	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x1000003
294	 106	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0x1000003
- stack 0: 0xFFFF
295	 109	AND		 	 
- stack 1: 0x43C
- stack 0: 0x3
296	 10A	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0x3
- stack 0: 0x1
297	 10C	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0x3
298	 10D	PUSH2	0380	 	 
- stack 2: 0x43C
- stack 1: 0x3
- stack 0: 0x380
299	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x43C
300	 111	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
301	 113	ADD		 	 
- stack 0: 0x440
302	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
303	 115	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x11A0250008600000095028C00B40004018E0001016FFFF001000004011A0234
304	 116	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x11A0250008600000095028C00B40004018E0001016FFFF001000004011A0234
- stack 0: 0xF0
305	 118	SHR		 	 
- stack 1: 0x440
- stack 0: 0x11A
306	 119	JUMP		 	 
- stack 0: 0x440
307	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x440
308	 11B	PUSH2	0060	 	 
- stack 1: 0x440
- stack 0: 0x60
309	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x440
- stack 0: 0xFF00
310	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x440
- stack 1: 0xFF00
- stack 0: 0xFFFFFFFF
311	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x440
- stack 0: 0xFF00
312	 125	PUSH2	03A0	 	 
- stack 2: 0x440
- stack 1: 0xFF00
- stack 0: 0x3A0
313	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x440
- stack 1: 0xFF00
- stack 0: 0xFF00
314	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x440
- stack 2: 0xFF00
- stack 1: 0xFF00
- stack 0: 0xFFFFFFFF
315	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x440
- stack 1: 0xFF00
- stack 0: 0xFF00
316	 12F	SUB		 	 
- stack 1: 0x440
- stack 0: 0x0
317	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x440
- stack 1: 0x0
- stack 0: 0x138
318	 133	JUMPI		 	 
- stack 0: 0x440
319	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x440
- stack 0: 0x152
320	 137	JUMP		 	 
- stack 0: 0x440
321	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x440
322	 153	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
323	 155	ADD		 	 
- stack 0: 0x444
324	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
325	 157	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x8600000095028C00B40004018E0001016FFFF001000004011A023400860000
326	 158	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x8600000095028C00B40004018E0001016FFFF001000004011A023400860000
- stack 0: 0xF0
327	 15A	SHR		 	 
- stack 1: 0x444
- stack 0: 0x86
328	 15B	JUMP		 	 
- stack 0: 0x444
329	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x444
330	 87	DUP1		 	 
- stack 1: 0x444
- stack 0: 0x444
331	 88	PUSH2	0020	 	 
- stack 2: 0x444
- stack 1: 0x444
- stack 0: 0x20
332	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x444
333	 8C	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
334	 8E	ADD		 	 
- stack 0: 0x448
335	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
336	 90	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x95028C00B40004018E0001016FFFF001000004011A02340086000000950270
337	 91	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0x95028C00B40004018E0001016FFFF001000004011A02340086000000950270
- stack 0: 0xF0
338	 93	SHR		 	 
- stack 1: 0x448
- stack 0: 0x95
339	 94	JUMP		 	 
- stack 0: 0x448
340	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x448
341	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x448
- stack 0: 0x448
342	 97	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x95028C00B40004018E0001016FFFF001000004011A02340086000000950270
343	 98	PUSH1	E0	 	 
- stack 2: 0x448
- stack 1: 0x95028C00B40004018E0001016FFFF001000004011A02340086000000950270
- stack 0: 0xE0
344	 9A	SHR		 	 
- stack 1: 0x448
- stack 0: 0x95028C
345	 9B	PUSH2	FFFF	 	 
- stack 2: 0x448
- stack 1: 0x95028C
- stack 0: 0xFFFF
346	 9E	AND		 	 
- stack 1: 0x448
- stack 0: 0x28C
347	 9F	PUSH1	01	 	 
- stack 2: 0x448
- stack 1: 0x28C
- stack 0: 0x1
348	 A1	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0x28C
349	 A2	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0x28C
- stack 0: 0x20
350	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x448
- stack 1: 0x28C
- stack 0: 0x444
351	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x448
- stack 0: 0x6D0
352	 A7	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0x6D0
- stack 0: 0x20
353	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x448
354	 AB	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
355	 AD	ADD		 	 
- stack 0: 0x44C
356	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
357	 AF	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xB40004018E0001016FFFF001000004011A0234008600000095027000B40006
358	 B0	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0xB40004018E0001016FFFF001000004011A0234008600000095027000B40006
- stack 0: 0xF0
359	 B2	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xB4
360	 B3	JUMP		 	 
- stack 0: 0x44C
361	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x44C
362	 B5	PUSH2	0020	 	 
- stack 1: 0x44C
- stack 0: 0x20
363	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x44C
- stack 0: 0x6D0
364	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x44C
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFF
365	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x44C
- stack 0: 0x6D0
366	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x44C
- stack 1: 0x6D0
- stack 0: 0x44C
367	 C0	MLOAD		 	 
- stack 2: 0x44C
- stack 1: 0x6D0
- stack 0: 0xB40004018E0001016FFFF001000004011A0234008600000095027000B40006
368	 C1	PUSH1	E0	 	 
- stack 3: 0x44C
- stack 2: 0x6D0
- stack 1: 0xB40004018E0001016FFFF001000004011A0234008600000095027000B40006
- stack 0: 0xE0
369	 C3	SHR		 	 
- stack 2: 0x44C
- stack 1: 0x6D0
- stack 0: 0xB40004
370	 C4	PUSH2	FFFF	 	 
- stack 3: 0x44C
- stack 2: 0x6D0
- stack 1: 0xB40004
- stack 0: 0xFFFF
371	 C7	AND		 	 
- stack 2: 0x44C
- stack 1: 0x6D0
- stack 0: 0x4
372	 C8	PUSH1	01	 	 
- stack 3: 0x44C
- stack 2: 0x6D0
- stack 1: 0x4
- stack 0: 0x1
373	 CA	SIGNEXTEND		 	 
- stack 2: 0x44C
- stack 1: 0x6D0
- stack 0: 0x4
374	 CB	ADD		 	 
- stack 1: 0x44C
- stack 0: 0x6D4
375	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x44C
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFF
376	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x44C
- stack 0: 0x6D4
377	 D2	PUSH1	02	 	 
- stack 2: 0x44C
- stack 1: 0x6D4
- stack 0: 0x2
378	 D4	XOR		 	 
- stack 1: 0x44C
- stack 0: 0x6D6
379	 D5	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xFF0000000000000000000000000000000000000000000000000000000000000
380	 D6	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0xFF0000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
381	 D8	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xFF0
382	 D9	PUSH2	0060	 	 
- stack 2: 0x44C
- stack 1: 0xFF0
- stack 0: 0x60
383	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x44C
384	 DD	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
385	 DF	ADD		 	 
- stack 0: 0x450
386	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
387	 E1	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x18E0001016FFFF001000004011A0234008600000095027000B4000601A1000F
388	 E2	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x18E0001016FFFF001000004011A0234008600000095027000B4000601A1000F
- stack 0: 0xF0
389	 E4	SHR		 	 
- stack 1: 0x450
- stack 0: 0x18E
390	 E5	JUMP		 	 
- stack 0: 0x450
391	 18E	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x450
392	 18F	PUSH4	00001000	 	 
- stack 1: 0x450
- stack 0: 0x1000
393	 194	PUSH2	03A0	 	 
- stack 2: 0x450
- stack 1: 0x1000
- stack 0: 0x3A0
394	 197	MSTORE		 	  ;; # store to x29
- stack 0: 0x450
395	 198	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
396	 19A	ADD		 	 
- stack 0: 0x454
397	 19B	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
398	 19C	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x16FFFF001000004011A0234008600000095027000B4000601A1000F016F000F
399	 19D	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x16FFFF001000004011A0234008600000095027000B4000601A1000F016F000F
- stack 0: 0xF0
400	 19F	SHR		 	 
- stack 1: 0x454
- stack 0: 0x16F
401	 1A0	JUMP		 	 
- stack 0: 0x454
402	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x454
403	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
404	 171	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x16FFFF001000004011A0234008600000095027000B4000601A1000F016F000F
405	 172	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0x16FFFF001000004011A0234008600000095027000B4000601A1000F016F000F
- stack 0: 0xE0
406	 174	SHR		 	 
- stack 1: 0x454
- stack 0: 0x16FFFF0
407	 175	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0x16FFFF0
- stack 0: 0xFFFF
408	 178	AND		 	 
- stack 1: 0x454
- stack 0: 0xFFF0
409	 179	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0xFFF0
- stack 0: 0x1
410	 17B	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
411	 17C	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
412	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x454
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x1000
413	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x454
- stack 0: 0xFF0
414	 181	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xFF0
- stack 0: 0x3A0
415	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x454
416	 185	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
417	 187	ADD		 	 
- stack 0: 0x458
418	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
419	 189	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x1000004011A0234008600000095027000B4000601A1000F016F000F01000005
420	 18A	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x1000004011A0234008600000095027000B4000601A1000F016F000F01000005
- stack 0: 0xF0
421	 18C	SHR		 	 
- stack 1: 0x458
- stack 0: 0x100
422	 18D	JUMP		 	 
- stack 0: 0x458
423	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x458
424	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
425	 102	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x1000004011A0234008600000095027000B4000601A1000F016F000F01000005
426	 103	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0x1000004011A0234008600000095027000B4000601A1000F016F000F01000005
- stack 0: 0xE0
427	 105	SHR		 	 
- stack 1: 0x458
- stack 0: 0x1000004
428	 106	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0x1000004
- stack 0: 0xFFFF
429	 109	AND		 	 
- stack 1: 0x458
- stack 0: 0x4
430	 10A	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0x4
- stack 0: 0x1
431	 10C	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0x4
432	 10D	PUSH2	0380	 	 
- stack 2: 0x458
- stack 1: 0x4
- stack 0: 0x380
433	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x458
434	 111	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
435	 113	ADD		 	 
- stack 0: 0x45C
436	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
437	 115	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x11A0234008600000095027000B4000601A1000F016F000F01000005011A0218
438	 116	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x11A0234008600000095027000B4000601A1000F016F000F01000005011A0218
- stack 0: 0xF0
439	 118	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x11A
440	 119	JUMP		 	 
- stack 0: 0x45C
441	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x45C
442	 11B	PUSH2	0060	 	 
- stack 1: 0x45C
- stack 0: 0x60
443	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x45C
- stack 0: 0xFF0
444	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x45C
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
445	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x45C
- stack 0: 0xFF0
446	 125	PUSH2	03A0	 	 
- stack 2: 0x45C
- stack 1: 0xFF0
- stack 0: 0x3A0
447	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x45C
- stack 1: 0xFF0
- stack 0: 0xFF0
448	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x45C
- stack 2: 0xFF0
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
449	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x45C
- stack 1: 0xFF0
- stack 0: 0xFF0
450	 12F	SUB		 	 
- stack 1: 0x45C
- stack 0: 0x0
451	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x45C
- stack 1: 0x0
- stack 0: 0x138
452	 133	JUMPI		 	 
- stack 0: 0x45C
453	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x45C
- stack 0: 0x152
454	 137	JUMP		 	 
- stack 0: 0x45C
455	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x45C
456	 153	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
457	 155	ADD		 	 
- stack 0: 0x460
458	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
459	 157	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x8600000095027000B4000601A1000F016F000F01000005011A021800860000
460	 158	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x8600000095027000B4000601A1000F016F000F01000005011A021800860000
- stack 0: 0xF0
461	 15A	SHR		 	 
- stack 1: 0x460
- stack 0: 0x86
462	 15B	JUMP		 	 
- stack 0: 0x460
463	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x460
464	 87	DUP1		 	 
- stack 1: 0x460
- stack 0: 0x460
465	 88	PUSH2	0020	 	 
- stack 2: 0x460
- stack 1: 0x460
- stack 0: 0x20
466	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x460
467	 8C	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
468	 8E	ADD		 	 
- stack 0: 0x464
469	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
470	 90	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x95027000B4000601A1000F016F000F01000005011A0218008600000095025A
471	 91	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x95027000B4000601A1000F016F000F01000005011A0218008600000095025A
- stack 0: 0xF0
472	 93	SHR		 	 
- stack 1: 0x464
- stack 0: 0x95
473	 94	JUMP		 	 
- stack 0: 0x464
474	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x464
475	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
476	 97	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x95027000B4000601A1000F016F000F01000005011A0218008600000095025A
477	 98	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0x95027000B4000601A1000F016F000F01000005011A0218008600000095025A
- stack 0: 0xE0
478	 9A	SHR		 	 
- stack 1: 0x464
- stack 0: 0x950270
479	 9B	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0x950270
- stack 0: 0xFFFF
480	 9E	AND		 	 
- stack 1: 0x464
- stack 0: 0x270
481	 9F	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0x270
- stack 0: 0x1
482	 A1	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0x270
483	 A2	PUSH2	0020	 	 
- stack 2: 0x464
- stack 1: 0x270
- stack 0: 0x20
484	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x464
- stack 1: 0x270
- stack 0: 0x460
485	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x464
- stack 0: 0x6D0
486	 A7	PUSH2	0020	 	 
- stack 2: 0x464
- stack 1: 0x6D0
- stack 0: 0x20
487	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x464
488	 AB	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
489	 AD	ADD		 	 
- stack 0: 0x468
490	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
491	 AF	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xB4000601A1000F016F000F01000005011A0218008600000095025A00B4FFFA
492	 B0	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xB4000601A1000F016F000F01000005011A0218008600000095025A00B4FFFA
- stack 0: 0xF0
493	 B2	SHR		 	 
- stack 1: 0x468
- stack 0: 0xB4
494	 B3	JUMP		 	 
- stack 0: 0x468
495	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x468
496	 B5	PUSH2	0020	 	 
- stack 1: 0x468
- stack 0: 0x20
497	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x468
- stack 0: 0x6D0
498	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x468
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFF
499	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x468
- stack 0: 0x6D0
500	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x468
- stack 1: 0x6D0
- stack 0: 0x468
501	 C0	MLOAD		 	 
- stack 2: 0x468
- stack 1: 0x6D0
- stack 0: 0xB4000601A1000F016F000F01000005011A0218008600000095025A00B4FFFA
502	 C1	PUSH1	E0	 	 
- stack 3: 0x468
- stack 2: 0x6D0
- stack 1: 0xB4000601A1000F016F000F01000005011A0218008600000095025A00B4FFFA
- stack 0: 0xE0
503	 C3	SHR		 	 
- stack 2: 0x468
- stack 1: 0x6D0
- stack 0: 0xB40006
504	 C4	PUSH2	FFFF	 	 
- stack 3: 0x468
- stack 2: 0x6D0
- stack 1: 0xB40006
- stack 0: 0xFFFF
505	 C7	AND		 	 
- stack 2: 0x468
- stack 1: 0x6D0
- stack 0: 0x6
506	 C8	PUSH1	01	 	 
- stack 3: 0x468
- stack 2: 0x6D0
- stack 1: 0x6
- stack 0: 0x1
507	 CA	SIGNEXTEND		 	 
- stack 2: 0x468
- stack 1: 0x6D0
- stack 0: 0x6
508	 CB	ADD		 	 
- stack 1: 0x468
- stack 0: 0x6D6
509	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x468
- stack 1: 0x6D6
- stack 0: 0xFFFFFFFF
510	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x468
- stack 0: 0x6D6
511	 D2	PUSH1	02	 	 
- stack 2: 0x468
- stack 1: 0x6D6
- stack 0: 0x2
512	 D4	XOR		 	 
- stack 1: 0x468
- stack 0: 0x6D4
513	 D5	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
514	 D6	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
515	 D8	SHR		 	 
- stack 1: 0x468
- stack 0: 0xF00F
516	 D9	PUSH2	0060	 	 
- stack 2: 0x468
- stack 1: 0xF00F
- stack 0: 0x60
517	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x468
518	 DD	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
519	 DF	ADD		 	 
- stack 0: 0x46C
520	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
521	 E1	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x1A1000F016F000F01000005011A0218008600000095025A00B4FFFA00E600FF
522	 E2	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x1A1000F016F000F01000005011A0218008600000095025A00B4FFFA00E600FF
- stack 0: 0xF0
523	 E4	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x1A1
524	 E5	JUMP		 	 
- stack 0: 0x46C
525	 1A1	JUMPDEST		 ;; __riscvimpl_LUI_feb7	  ;; # instr: lui t4,0xf(ignore imm)
- stack 0: 0x46C
526	 1A2	PUSH4	0000f000	 	 
- stack 1: 0x46C
- stack 0: 0xF000
527	 1A7	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0xF000
- stack 0: 0x3A0
528	 1AA	MSTORE		 	  ;; # store to x29
- stack 0: 0x46C
529	 1AB	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
530	 1AD	ADD		 	 
- stack 0: 0x470
531	 1AE	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
532	 1AF	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x16F000F01000005011A0218008600000095025A00B4FFFA00E600FF01000006
533	 1B0	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x16F000F01000005011A0218008600000095025A00B4FFFA00E600FF01000006
- stack 0: 0xF0
534	 1B2	SHR		 	 
- stack 1: 0x470
- stack 0: 0x16F
535	 1B3	JUMP		 	 
- stack 0: 0x470
536	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x470
537	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
538	 171	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x16F000F01000005011A0218008600000095025A00B4FFFA00E600FF01000006
539	 172	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x16F000F01000005011A0218008600000095025A00B4FFFA00E600FF01000006
- stack 0: 0xE0
540	 174	SHR		 	 
- stack 1: 0x470
- stack 0: 0x16F000F
541	 175	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x16F000F
- stack 0: 0xFFFF
542	 178	AND		 	 
- stack 1: 0x470
- stack 0: 0xF
543	 179	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0xF
- stack 0: 0x1
544	 17B	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0xF
545	 17C	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0xF
- stack 0: 0x3A0
546	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x470
- stack 1: 0xF
- stack 0: 0xF000
547	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x470
- stack 0: 0xF00F
548	 181	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0xF00F
- stack 0: 0x3A0
549	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x470
550	 185	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
551	 187	ADD		 	 
- stack 0: 0x474
552	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
553	 189	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x1000005011A0218008600000095025A00B4FFFA00E600FF01000006011A0200
554	 18A	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x1000005011A0218008600000095025A00B4FFFA00E600FF01000006011A0200
- stack 0: 0xF0
555	 18C	SHR		 	 
- stack 1: 0x474
- stack 0: 0x100
556	 18D	JUMP		 	 
- stack 0: 0x474
557	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x474
558	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
559	 102	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x1000005011A0218008600000095025A00B4FFFA00E600FF01000006011A0200
560	 103	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0x1000005011A0218008600000095025A00B4FFFA00E600FF01000006011A0200
- stack 0: 0xE0
561	 105	SHR		 	 
- stack 1: 0x474
- stack 0: 0x1000005
562	 106	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0x1000005
- stack 0: 0xFFFF
563	 109	AND		 	 
- stack 1: 0x474
- stack 0: 0x5
564	 10A	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x5
- stack 0: 0x1
565	 10C	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x5
566	 10D	PUSH2	0380	 	 
- stack 2: 0x474
- stack 1: 0x5
- stack 0: 0x380
567	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x474
568	 111	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
569	 113	ADD		 	 
- stack 0: 0x478
570	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
571	 115	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x11A0218008600000095025A00B4FFFA00E600FF01000006011A020000860000
572	 116	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x11A0218008600000095025A00B4FFFA00E600FF01000006011A020000860000
- stack 0: 0xF0
573	 118	SHR		 	 
- stack 1: 0x478
- stack 0: 0x11A
574	 119	JUMP		 	 
- stack 0: 0x478
575	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x478
576	 11B	PUSH2	0060	 	 
- stack 1: 0x478
- stack 0: 0x60
577	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x478
- stack 0: 0xF00F
578	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x478
- stack 1: 0xF00F
- stack 0: 0xFFFFFFFF
579	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x478
- stack 0: 0xF00F
580	 125	PUSH2	03A0	 	 
- stack 2: 0x478
- stack 1: 0xF00F
- stack 0: 0x3A0
581	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x478
- stack 1: 0xF00F
- stack 0: 0xF00F
582	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x478
- stack 2: 0xF00F
- stack 1: 0xF00F
- stack 0: 0xFFFFFFFF
583	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x478
- stack 1: 0xF00F
- stack 0: 0xF00F
584	 12F	SUB		 	 
- stack 1: 0x478
- stack 0: 0x0
585	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x138
586	 133	JUMPI		 	 
- stack 0: 0x478
587	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x478
- stack 0: 0x152
588	 137	JUMP		 	 
- stack 0: 0x478
589	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x478
590	 153	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
591	 155	ADD		 	 
- stack 0: 0x47C
592	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
593	 157	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x8600000095025A00B4FFFA00E600FF01000006011A02000086000000950242
594	 158	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x8600000095025A00B4FFFA00E600FF01000006011A02000086000000950242
- stack 0: 0xF0
595	 15A	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x86
596	 15B	JUMP		 	 
- stack 0: 0x47C
597	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x47C
598	 87	DUP1		 	 
- stack 1: 0x47C
- stack 0: 0x47C
599	 88	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0x47C
- stack 0: 0x20
600	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x47C
601	 8C	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
602	 8E	ADD		 	 
- stack 0: 0x480
603	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
604	 90	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x95025A00B4FFFA00E600FF01000006011A0200008600000095024200B4FFFC
605	 91	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x95025A00B4FFFA00E600FF01000006011A0200008600000095024200B4FFFC
- stack 0: 0xF0
606	 93	SHR		 	 
- stack 1: 0x480
- stack 0: 0x95
607	 94	JUMP		 	 
- stack 0: 0x480
608	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x480
609	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
610	 97	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x95025A00B4FFFA00E600FF01000006011A0200008600000095024200B4FFFC
611	 98	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x95025A00B4FFFA00E600FF01000006011A0200008600000095024200B4FFFC
- stack 0: 0xE0
612	 9A	SHR		 	 
- stack 1: 0x480
- stack 0: 0x95025A
613	 9B	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x95025A
- stack 0: 0xFFFF
614	 9E	AND		 	 
- stack 1: 0x480
- stack 0: 0x25A
615	 9F	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0x25A
- stack 0: 0x1
616	 A1	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x25A
617	 A2	PUSH2	0020	 	 
- stack 2: 0x480
- stack 1: 0x25A
- stack 0: 0x20
618	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x480
- stack 1: 0x25A
- stack 0: 0x47C
619	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x480
- stack 0: 0x6D6
620	 A7	PUSH2	0020	 	 
- stack 2: 0x480
- stack 1: 0x6D6
- stack 0: 0x20
621	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x480
622	 AB	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
623	 AD	ADD		 	 
- stack 0: 0x484
624	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
625	 AF	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0xB4FFFA00E600FF01000006011A0200008600000095024200B4FFFC015C0010
626	 B0	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0xB4FFFA00E600FF01000006011A0200008600000095024200B4FFFC015C0010
- stack 0: 0xF0
627	 B2	SHR		 	 
- stack 1: 0x484
- stack 0: 0xB4
628	 B3	JUMP		 	 
- stack 0: 0x484
629	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x484
630	 B5	PUSH2	0020	 	 
- stack 1: 0x484
- stack 0: 0x20
631	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x484
- stack 0: 0x6D6
632	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x484
- stack 1: 0x6D6
- stack 0: 0xFFFFFFFF
633	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x484
- stack 0: 0x6D6
634	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x484
- stack 1: 0x6D6
- stack 0: 0x484
635	 C0	MLOAD		 	 
- stack 2: 0x484
- stack 1: 0x6D6
- stack 0: 0xB4FFFA00E600FF01000006011A0200008600000095024200B4FFFC015C0010
636	 C1	PUSH1	E0	 	 
- stack 3: 0x484
- stack 2: 0x6D6
- stack 1: 0xB4FFFA00E600FF01000006011A0200008600000095024200B4FFFC015C0010
- stack 0: 0xE0
637	 C3	SHR		 	 
- stack 2: 0x484
- stack 1: 0x6D6
- stack 0: 0xB4FFFA
638	 C4	PUSH2	FFFF	 	 
- stack 3: 0x484
- stack 2: 0x6D6
- stack 1: 0xB4FFFA
- stack 0: 0xFFFF
639	 C7	AND		 	 
- stack 2: 0x484
- stack 1: 0x6D6
- stack 0: 0xFFFA
640	 C8	PUSH1	01	 	 
- stack 3: 0x484
- stack 2: 0x6D6
- stack 1: 0xFFFA
- stack 0: 0x1
641	 CA	SIGNEXTEND		 	 
- stack 2: 0x484
- stack 1: 0x6D6
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA
642	 CB	ADD		 	 
- stack 1: 0x484
- stack 0: 0x6D0
643	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x484
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFF
644	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x484
- stack 0: 0x6D0
645	 D2	PUSH1	02	 	 
- stack 2: 0x484
- stack 1: 0x6D0
- stack 0: 0x2
646	 D4	XOR		 	 
- stack 1: 0x484
- stack 0: 0x6D2
647	 D5	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
648	 D6	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
649	 D8	SHR		 	 
- stack 1: 0x484
- stack 0: 0xFF
650	 D9	PUSH2	0060	 	 
- stack 2: 0x484
- stack 1: 0xFF
- stack 0: 0x60
651	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x484
652	 DD	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
653	 DF	ADD		 	 
- stack 0: 0x488
654	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
655	 E1	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xE600FF01000006011A0200008600000095024200B4FFFC015C0010016FFF00
656	 E2	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0xE600FF01000006011A0200008600000095024200B4FFFC015C0010016FFF00
- stack 0: 0xF0
657	 E4	SHR		 	 
- stack 1: 0x488
- stack 0: 0xE6
658	 E5	JUMP		 	 
- stack 0: 0x488
659	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x488
660	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x488
- stack 0: 0x488
661	 E8	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xE600FF01000006011A0200008600000095024200B4FFFC015C0010016FFF00
662	 E9	PUSH1	E0	 	 
- stack 2: 0x488
- stack 1: 0xE600FF01000006011A0200008600000095024200B4FFFC015C0010016FFF00
- stack 0: 0xE0
663	 EB	SHR		 	 
- stack 1: 0x488
- stack 0: 0xE600FF
664	 EC	PUSH2	FFFF	 	 
- stack 2: 0x488
- stack 1: 0xE600FF
- stack 0: 0xFFFF
665	 EF	AND		 	 
- stack 1: 0x488
- stack 0: 0xFF
666	 F0	PUSH1	01	 	 
- stack 2: 0x488
- stack 1: 0xFF
- stack 0: 0x1
667	 F2	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0xFF
668	 F3	PUSH2	03A0	 	 
- stack 2: 0x488
- stack 1: 0xFF
- stack 0: 0x3A0
669	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x488
670	 F7	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
671	 F9	ADD		 	 
- stack 0: 0x48C
672	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
673	 FB	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x1000006011A0200008600000095024200B4FFFC015C0010016FFF0001000007
674	 FC	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x1000006011A0200008600000095024200B4FFFC015C0010016FFF0001000007
- stack 0: 0xF0
675	 FE	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x100
676	 FF	JUMP		 	 
- stack 0: 0x48C
677	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x48C
678	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
679	 102	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x1000006011A0200008600000095024200B4FFFC015C0010016FFF0001000007
680	 103	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0x1000006011A0200008600000095024200B4FFFC015C0010016FFF0001000007
- stack 0: 0xE0
681	 105	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x1000006
682	 106	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0x1000006
- stack 0: 0xFFFF
683	 109	AND		 	 
- stack 1: 0x48C
- stack 0: 0x6
684	 10A	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0x6
- stack 0: 0x1
685	 10C	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0x6
686	 10D	PUSH2	0380	 	 
- stack 2: 0x48C
- stack 1: 0x6
- stack 0: 0x380
687	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x48C
688	 111	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
689	 113	ADD		 	 
- stack 0: 0x490
690	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
691	 115	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x11A0200008600000095024200B4FFFC015C0010016FFF0001000007011A01E4
692	 116	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x11A0200008600000095024200B4FFFC015C0010016FFF0001000007011A01E4
- stack 0: 0xF0
693	 118	SHR		 	 
- stack 1: 0x490
- stack 0: 0x11A
694	 119	JUMP		 	 
- stack 0: 0x490
695	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x490
696	 11B	PUSH2	0060	 	 
- stack 1: 0x490
- stack 0: 0x60
697	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x490
- stack 0: 0xFF
698	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x490
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
699	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x490
- stack 0: 0xFF
700	 125	PUSH2	03A0	 	 
- stack 2: 0x490
- stack 1: 0xFF
- stack 0: 0x3A0
701	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x490
- stack 1: 0xFF
- stack 0: 0xFF
702	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x490
- stack 2: 0xFF
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
703	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x490
- stack 1: 0xFF
- stack 0: 0xFF
704	 12F	SUB		 	 
- stack 1: 0x490
- stack 0: 0x0
705	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x490
- stack 1: 0x0
- stack 0: 0x138
706	 133	JUMPI		 	 
- stack 0: 0x490
707	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x490
- stack 0: 0x152
708	 137	JUMP		 	 
- stack 0: 0x490
709	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x490
710	 153	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
711	 155	ADD		 	 
- stack 0: 0x494
712	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
713	 157	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x8600000095024200B4FFFC015C0010016FFF0001000007011A01E400860000
714	 158	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x8600000095024200B4FFFC015C0010016FFF0001000007011A01E400860000
- stack 0: 0xF0
715	 15A	SHR		 	 
- stack 1: 0x494
- stack 0: 0x86
716	 15B	JUMP		 	 
- stack 0: 0x494
717	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x494
718	 87	DUP1		 	 
- stack 1: 0x494
- stack 0: 0x494
719	 88	PUSH2	0020	 	 
- stack 2: 0x494
- stack 1: 0x494
- stack 0: 0x20
720	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x494
721	 8C	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
722	 8E	ADD		 	 
- stack 0: 0x498
723	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
724	 90	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x95024200B4FFFC015C0010016FFF0001000007011A01E40086000000950226
725	 91	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x95024200B4FFFC015C0010016FFF0001000007011A01E40086000000950226
- stack 0: 0xF0
726	 93	SHR		 	 
- stack 1: 0x498
- stack 0: 0x95
727	 94	JUMP		 	 
- stack 0: 0x498
728	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x498
729	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
730	 97	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x95024200B4FFFC015C0010016FFF0001000007011A01E40086000000950226
731	 98	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0x95024200B4FFFC015C0010016FFF0001000007011A01E40086000000950226
- stack 0: 0xE0
732	 9A	SHR		 	 
- stack 1: 0x498
- stack 0: 0x950242
733	 9B	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0x950242
- stack 0: 0xFFFF
734	 9E	AND		 	 
- stack 1: 0x498
- stack 0: 0x242
735	 9F	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x242
- stack 0: 0x1
736	 A1	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x242
737	 A2	PUSH2	0020	 	 
- stack 2: 0x498
- stack 1: 0x242
- stack 0: 0x20
738	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x498
- stack 1: 0x242
- stack 0: 0x494
739	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x498
- stack 0: 0x6D6
740	 A7	PUSH2	0020	 	 
- stack 2: 0x498
- stack 1: 0x6D6
- stack 0: 0x20
741	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x498
742	 AB	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
743	 AD	ADD		 	 
- stack 0: 0x49C
744	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
745	 AF	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0xB4FFFC015C0010016FFF0001000007011A01E4008600000095022600B4FFFE
746	 B0	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0xB4FFFC015C0010016FFF0001000007011A01E4008600000095022600B4FFFE
- stack 0: 0xF0
747	 B2	SHR		 	 
- stack 1: 0x49C
- stack 0: 0xB4
748	 B3	JUMP		 	 
- stack 0: 0x49C
749	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x49C
750	 B5	PUSH2	0020	 	 
- stack 1: 0x49C
- stack 0: 0x20
751	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x49C
- stack 0: 0x6D6
752	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0x6D6
- stack 0: 0xFFFFFFFF
753	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0x6D6
754	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x49C
- stack 1: 0x6D6
- stack 0: 0x49C
755	 C0	MLOAD		 	 
- stack 2: 0x49C
- stack 1: 0x6D6
- stack 0: 0xB4FFFC015C0010016FFF0001000007011A01E4008600000095022600B4FFFE
756	 C1	PUSH1	E0	 	 
- stack 3: 0x49C
- stack 2: 0x6D6
- stack 1: 0xB4FFFC015C0010016FFF0001000007011A01E4008600000095022600B4FFFE
- stack 0: 0xE0
757	 C3	SHR		 	 
- stack 2: 0x49C
- stack 1: 0x6D6
- stack 0: 0xB4FFFC
758	 C4	PUSH2	FFFF	 	 
- stack 3: 0x49C
- stack 2: 0x6D6
- stack 1: 0xB4FFFC
- stack 0: 0xFFFF
759	 C7	AND		 	 
- stack 2: 0x49C
- stack 1: 0x6D6
- stack 0: 0xFFFC
760	 C8	PUSH1	01	 	 
- stack 3: 0x49C
- stack 2: 0x6D6
- stack 1: 0xFFFC
- stack 0: 0x1
761	 CA	SIGNEXTEND		 	 
- stack 2: 0x49C
- stack 1: 0x6D6
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
762	 CB	ADD		 	 
- stack 1: 0x49C
- stack 0: 0x6D2
763	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0x6D2
- stack 0: 0xFFFFFFFF
764	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0x6D2
765	 D2	PUSH1	02	 	 
- stack 2: 0x49C
- stack 1: 0x6D2
- stack 0: 0x2
766	 D4	XOR		 	 
- stack 1: 0x49C
- stack 0: 0x6D0
767	 D5	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
768	 D6	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
- stack 0: 0xF0
769	 D8	SHR		 	 
- stack 1: 0x49C
- stack 0: 0xFF00
770	 D9	PUSH2	0060	 	 
- stack 2: 0x49C
- stack 1: 0xFF00
- stack 0: 0x60
771	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x49C
772	 DD	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
773	 DF	ADD		 	 
- stack 0: 0x4A0
774	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
775	 E1	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x15C0010016FFF0001000007011A01E4008600000095022600B4FFFE018E0001
776	 E2	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x15C0010016FFF0001000007011A01E4008600000095022600B4FFFE018E0001
- stack 0: 0xF0
777	 E4	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x15C
778	 E5	JUMP		 	 
- stack 0: 0x4A0
779	 15C	JUMPDEST		 ;; __riscvimpl_LUI_10eb7	  ;; # instr: lui t4,0x10(ignore imm)
- stack 0: 0x4A0
780	 15D	PUSH4	00010000	 	 
- stack 1: 0x4A0
- stack 0: 0x10000
781	 162	PUSH2	03A0	 	 
- stack 2: 0x4A0
- stack 1: 0x10000
- stack 0: 0x3A0
782	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x4A0
783	 166	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
784	 168	ADD		 	 
- stack 0: 0x4A4
785	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
786	 16A	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x16FFF0001000007011A01E4008600000095022600B4FFFE018E0001016FFFF0
787	 16B	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x16FFF0001000007011A01E4008600000095022600B4FFFE018E0001016FFFF0
- stack 0: 0xF0
788	 16D	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x16F
789	 16E	JUMP		 	 
- stack 0: 0x4A4
790	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x4A4
791	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
792	 171	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x16FFF0001000007011A01E4008600000095022600B4FFFE018E0001016FFFF0
793	 172	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x16FFF0001000007011A01E4008600000095022600B4FFFE018E0001016FFFF0
- stack 0: 0xE0
794	 174	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x16FFF00
795	 175	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x16FFF00
- stack 0: 0xFFFF
796	 178	AND		 	 
- stack 1: 0x4A4
- stack 0: 0xFF00
797	 179	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0xFF00
- stack 0: 0x1
798	 17B	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
799	 17C	PUSH2	03A0	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
800	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x10000
801	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x4A4
- stack 0: 0xFF00
802	 181	PUSH2	03A0	 	 
- stack 2: 0x4A4
- stack 1: 0xFF00
- stack 0: 0x3A0
803	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x4A4
804	 185	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
805	 187	ADD		 	 
- stack 0: 0x4A8
806	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
807	 189	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x1000007011A01E4008600000095022600B4FFFE018E0001016FFFF001000008
808	 18A	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x1000007011A01E4008600000095022600B4FFFE018E0001016FFFF001000008
- stack 0: 0xF0
809	 18C	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x100
810	 18D	JUMP		 	 
- stack 0: 0x4A8
811	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4A8
812	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
813	 102	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x1000007011A01E4008600000095022600B4FFFE018E0001016FFFF001000008
814	 103	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0x1000007011A01E4008600000095022600B4FFFE018E0001016FFFF001000008
- stack 0: 0xE0
815	 105	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x1000007
816	 106	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x1000007
- stack 0: 0xFFFF
817	 109	AND		 	 
- stack 1: 0x4A8
- stack 0: 0x7
818	 10A	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0x7
- stack 0: 0x1
819	 10C	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0x7
820	 10D	PUSH2	0380	 	 
- stack 2: 0x4A8
- stack 1: 0x7
- stack 0: 0x380
821	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x4A8
822	 111	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
823	 113	ADD		 	 
- stack 0: 0x4AC
824	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
825	 115	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x11A01E4008600000095022600B4FFFE018E0001016FFFF001000008011A01C8
826	 116	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x11A01E4008600000095022600B4FFFE018E0001016FFFF001000008011A01C8
- stack 0: 0xF0
827	 118	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x11A
828	 119	JUMP		 	 
- stack 0: 0x4AC
829	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x4AC
830	 11B	PUSH2	0060	 	 
- stack 1: 0x4AC
- stack 0: 0x60
831	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x4AC
- stack 0: 0xFF00
832	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4AC
- stack 1: 0xFF00
- stack 0: 0xFFFFFFFF
833	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4AC
- stack 0: 0xFF00
834	 125	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0xFF00
- stack 0: 0x3A0
835	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x4AC
- stack 1: 0xFF00
- stack 0: 0xFF00
836	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4AC
- stack 2: 0xFF00
- stack 1: 0xFF00
- stack 0: 0xFFFFFFFF
837	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4AC
- stack 1: 0xFF00
- stack 0: 0xFF00
838	 12F	SUB		 	 
- stack 1: 0x4AC
- stack 0: 0x0
839	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x4AC
- stack 1: 0x0
- stack 0: 0x138
840	 133	JUMPI		 	 
- stack 0: 0x4AC
841	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x4AC
- stack 0: 0x152
842	 137	JUMP		 	 
- stack 0: 0x4AC
843	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x4AC
844	 153	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
845	 155	ADD		 	 
- stack 0: 0x4B0
846	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
847	 157	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x8600000095022600B4FFFE018E0001016FFFF001000008011A01C800860000
848	 158	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x8600000095022600B4FFFE018E0001016FFFF001000008011A01C800860000
- stack 0: 0xF0
849	 15A	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x86
850	 15B	JUMP		 	 
- stack 0: 0x4B0
851	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4B0
852	 87	DUP1		 	 
- stack 1: 0x4B0
- stack 0: 0x4B0
853	 88	PUSH2	0020	 	 
- stack 2: 0x4B0
- stack 1: 0x4B0
- stack 0: 0x20
854	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B0
855	 8C	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
856	 8E	ADD		 	 
- stack 0: 0x4B4
857	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
858	 90	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x95022600B4FFFE018E0001016FFFF001000008011A01C8008600000095020A
859	 91	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x95022600B4FFFE018E0001016FFFF001000008011A01C8008600000095020A
- stack 0: 0xF0
860	 93	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x95
861	 94	JUMP		 	 
- stack 0: 0x4B4
862	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x4B4
863	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
864	 97	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x95022600B4FFFE018E0001016FFFF001000008011A01C8008600000095020A
865	 98	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0x95022600B4FFFE018E0001016FFFF001000008011A01C8008600000095020A
- stack 0: 0xE0
866	 9A	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x950226
867	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x950226
- stack 0: 0xFFFF
868	 9E	AND		 	 
- stack 1: 0x4B4
- stack 0: 0x226
869	 9F	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0x226
- stack 0: 0x1
870	 A1	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0x226
871	 A2	PUSH2	0020	 	 
- stack 2: 0x4B4
- stack 1: 0x226
- stack 0: 0x20
872	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4B4
- stack 1: 0x226
- stack 0: 0x4B0
873	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4B4
- stack 0: 0x6D6
874	 A7	PUSH2	0020	 	 
- stack 2: 0x4B4
- stack 1: 0x6D6
- stack 0: 0x20
875	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B4
876	 AB	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
877	 AD	ADD		 	 
- stack 0: 0x4B8
878	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
879	 AF	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xB4FFFE018E0001016FFFF001000008011A01C8008600000095020A00B40000
880	 B0	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0xB4FFFE018E0001016FFFF001000008011A01C8008600000095020A00B40000
- stack 0: 0xF0
881	 B2	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xB4
882	 B3	JUMP		 	 
- stack 0: 0x4B8
883	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x4B8
884	 B5	PUSH2	0020	 	 
- stack 1: 0x4B8
- stack 0: 0x20
885	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4B8
- stack 0: 0x6D6
886	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x6D6
- stack 0: 0xFFFFFFFF
887	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B8
- stack 0: 0x6D6
888	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4B8
- stack 1: 0x6D6
- stack 0: 0x4B8
889	 C0	MLOAD		 	 
- stack 2: 0x4B8
- stack 1: 0x6D6
- stack 0: 0xB4FFFE018E0001016FFFF001000008011A01C8008600000095020A00B40000
890	 C1	PUSH1	E0	 	 
- stack 3: 0x4B8
- stack 2: 0x6D6
- stack 1: 0xB4FFFE018E0001016FFFF001000008011A01C8008600000095020A00B40000
- stack 0: 0xE0
891	 C3	SHR		 	 
- stack 2: 0x4B8
- stack 1: 0x6D6
- stack 0: 0xB4FFFE
892	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4B8
- stack 2: 0x6D6
- stack 1: 0xB4FFFE
- stack 0: 0xFFFF
893	 C7	AND		 	 
- stack 2: 0x4B8
- stack 1: 0x6D6
- stack 0: 0xFFFE
894	 C8	PUSH1	01	 	 
- stack 3: 0x4B8
- stack 2: 0x6D6
- stack 1: 0xFFFE
- stack 0: 0x1
895	 CA	SIGNEXTEND		 	 
- stack 2: 0x4B8
- stack 1: 0x6D6
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
896	 CB	ADD		 	 
- stack 1: 0x4B8
- stack 0: 0x6D4
897	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFF
898	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B8
- stack 0: 0x6D4
899	 D2	PUSH1	02	 	 
- stack 2: 0x4B8
- stack 1: 0x6D4
- stack 0: 0x2
900	 D4	XOR		 	 
- stack 1: 0x4B8
- stack 0: 0x6D6
901	 D5	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xFF0000000000000000000000000000000000000000000000000000000000000
902	 D6	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0xFF0000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
903	 D8	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xFF0
904	 D9	PUSH2	0060	 	 
- stack 2: 0x4B8
- stack 1: 0xFF0
- stack 0: 0x60
905	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x4B8
906	 DD	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
907	 DF	ADD		 	 
- stack 0: 0x4BC
908	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
909	 E1	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x18E0001016FFFF001000008011A01C8008600000095020A00B4000001A1000F
910	 E2	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x18E0001016FFFF001000008011A01C8008600000095020A00B4000001A1000F
- stack 0: 0xF0
911	 E4	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x18E
912	 E5	JUMP		 	 
- stack 0: 0x4BC
913	 18E	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x4BC
914	 18F	PUSH4	00001000	 	 
- stack 1: 0x4BC
- stack 0: 0x1000
915	 194	PUSH2	03A0	 	 
- stack 2: 0x4BC
- stack 1: 0x1000
- stack 0: 0x3A0
916	 197	MSTORE		 	  ;; # store to x29
- stack 0: 0x4BC
917	 198	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
918	 19A	ADD		 	 
- stack 0: 0x4C0
919	 19B	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
920	 19C	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x16FFFF001000008011A01C8008600000095020A00B4000001A1000F016F000F
921	 19D	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x16FFFF001000008011A01C8008600000095020A00B4000001A1000F016F000F
- stack 0: 0xF0
922	 19F	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x16F
923	 1A0	JUMP		 	 
- stack 0: 0x4C0
924	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x4C0
925	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
926	 171	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x16FFFF001000008011A01C8008600000095020A00B4000001A1000F016F000F
927	 172	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0x16FFFF001000008011A01C8008600000095020A00B4000001A1000F016F000F
- stack 0: 0xE0
928	 174	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x16FFFF0
929	 175	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x16FFFF0
- stack 0: 0xFFFF
930	 178	AND		 	 
- stack 1: 0x4C0
- stack 0: 0xFFF0
931	 179	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0xFFF0
- stack 0: 0x1
932	 17B	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
933	 17C	PUSH2	03A0	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
934	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x1000
935	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x4C0
- stack 0: 0xFF0
936	 181	PUSH2	03A0	 	 
- stack 2: 0x4C0
- stack 1: 0xFF0
- stack 0: 0x3A0
937	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x4C0
938	 185	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
939	 187	ADD		 	 
- stack 0: 0x4C4
940	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
941	 189	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x1000008011A01C8008600000095020A00B4000001A1000F016F000F01000009
942	 18A	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x1000008011A01C8008600000095020A00B4000001A1000F016F000F01000009
- stack 0: 0xF0
943	 18C	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x100
944	 18D	JUMP		 	 
- stack 0: 0x4C4
945	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C4
946	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
947	 102	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x1000008011A01C8008600000095020A00B4000001A1000F016F000F01000009
948	 103	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0x1000008011A01C8008600000095020A00B4000001A1000F016F000F01000009
- stack 0: 0xE0
949	 105	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x1000008
950	 106	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x1000008
- stack 0: 0xFFFF
951	 109	AND		 	 
- stack 1: 0x4C4
- stack 0: 0x8
952	 10A	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0x8
- stack 0: 0x1
953	 10C	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0x8
954	 10D	PUSH2	0380	 	 
- stack 2: 0x4C4
- stack 1: 0x8
- stack 0: 0x380
955	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C4
956	 111	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
957	 113	ADD		 	 
- stack 0: 0x4C8
958	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
959	 115	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x11A01C8008600000095020A00B4000001A1000F016F000F01000009011A01AC
960	 116	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x11A01C8008600000095020A00B4000001A1000F016F000F01000009011A01AC
- stack 0: 0xF0
961	 118	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x11A
962	 119	JUMP		 	 
- stack 0: 0x4C8
963	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x4C8
964	 11B	PUSH2	0060	 	 
- stack 1: 0x4C8
- stack 0: 0x60
965	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x4C8
- stack 0: 0xFF0
966	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C8
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
967	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C8
- stack 0: 0xFF0
968	 125	PUSH2	03A0	 	 
- stack 2: 0x4C8
- stack 1: 0xFF0
- stack 0: 0x3A0
969	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C8
- stack 1: 0xFF0
- stack 0: 0xFF0
970	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C8
- stack 2: 0xFF0
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
971	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C8
- stack 1: 0xFF0
- stack 0: 0xFF0
972	 12F	SUB		 	 
- stack 1: 0x4C8
- stack 0: 0x0
973	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x138
974	 133	JUMPI		 	 
- stack 0: 0x4C8
975	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x4C8
- stack 0: 0x152
976	 137	JUMP		 	 
- stack 0: 0x4C8
977	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x4C8
978	 153	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
979	 155	ADD		 	 
- stack 0: 0x4CC
980	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
981	 157	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x8600000095020A00B4000001A1000F016F000F01000009011A01AC00860000
982	 158	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x8600000095020A00B4000001A1000F016F000F01000009011A01AC00860000
- stack 0: 0xF0
983	 15A	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x86
984	 15B	JUMP		 	 
- stack 0: 0x4CC
985	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4CC
986	 87	DUP1		 	 
- stack 1: 0x4CC
- stack 0: 0x4CC
987	 88	PUSH2	0020	 	 
- stack 2: 0x4CC
- stack 1: 0x4CC
- stack 0: 0x20
988	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4CC
989	 8C	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
990	 8E	ADD		 	 
- stack 0: 0x4D0
991	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
992	 90	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x95020A00B4000001A1000F016F000F01000009011A01AC00860000009501E8
993	 91	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x95020A00B4000001A1000F016F000F01000009011A01AC00860000009501E8
- stack 0: 0xF0
994	 93	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x95
995	 94	JUMP		 	 
- stack 0: 0x4D0
996	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x4D0
997	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
998	 97	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x95020A00B4000001A1000F016F000F01000009011A01AC00860000009501E8
999	 98	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x95020A00B4000001A1000F016F000F01000009011A01AC00860000009501E8
- stack 0: 0xE0
1000	 9A	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x95020A
1001	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x95020A
- stack 0: 0xFFFF
1002	 9E	AND		 	 
- stack 1: 0x4D0
- stack 0: 0x20A
1003	 9F	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0x20A
- stack 0: 0x1
1004	 A1	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0x20A
1005	 A2	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0x20A
- stack 0: 0x20
1006	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D0
- stack 1: 0x20A
- stack 0: 0x4CC
1007	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4D0
- stack 0: 0x6D6
1008	 A7	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0x6D6
- stack 0: 0x20
1009	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D0
1010	 AB	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1011	 AD	ADD		 	 
- stack 0: 0x4D4
1012	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1013	 AF	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xB4000001A1000F016F000F01000009011A01AC00860000009501E80095FFE0
1014	 B0	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0xB4000001A1000F016F000F01000009011A01AC00860000009501E80095FFE0
- stack 0: 0xF0
1015	 B2	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xB4
1016	 B3	JUMP		 	 
- stack 0: 0x4D4
1017	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x4D4
1018	 B5	PUSH2	0020	 	 
- stack 1: 0x4D4
- stack 0: 0x20
1019	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4D4
- stack 0: 0x6D6
1020	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x6D6
- stack 0: 0xFFFFFFFF
1021	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D4
- stack 0: 0x6D6
1022	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4D4
- stack 1: 0x6D6
- stack 0: 0x4D4
1023	 C0	MLOAD		 	 
- stack 2: 0x4D4
- stack 1: 0x6D6
- stack 0: 0xB4000001A1000F016F000F01000009011A01AC00860000009501E80095FFE0
1024	 C1	PUSH1	E0	 	 
- stack 3: 0x4D4
- stack 2: 0x6D6
- stack 1: 0xB4000001A1000F016F000F01000009011A01AC00860000009501E80095FFE0
- stack 0: 0xE0
1025	 C3	SHR		 	 
- stack 2: 0x4D4
- stack 1: 0x6D6
- stack 0: 0xB40000
1026	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4D4
- stack 2: 0x6D6
- stack 1: 0xB40000
- stack 0: 0xFFFF
1027	 C7	AND		 	 
- stack 2: 0x4D4
- stack 1: 0x6D6
- stack 0: 0x0
1028	 C8	PUSH1	01	 	 
- stack 3: 0x4D4
- stack 2: 0x6D6
- stack 1: 0x0
- stack 0: 0x1
1029	 CA	SIGNEXTEND		 	 
- stack 2: 0x4D4
- stack 1: 0x6D6
- stack 0: 0x0
1030	 CB	ADD		 	 
- stack 1: 0x4D4
- stack 0: 0x6D6
1031	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x6D6
- stack 0: 0xFFFFFFFF
1032	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D4
- stack 0: 0x6D6
1033	 D2	PUSH1	02	 	 
- stack 2: 0x4D4
- stack 1: 0x6D6
- stack 0: 0x2
1034	 D4	XOR		 	 
- stack 1: 0x4D4
- stack 0: 0x6D4
1035	 D5	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
1036	 D6	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
1037	 D8	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xF00F
1038	 D9	PUSH2	0060	 	 
- stack 2: 0x4D4
- stack 1: 0xF00F
- stack 0: 0x60
1039	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x4D4
1040	 DD	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1041	 DF	ADD		 	 
- stack 0: 0x4D8
1042	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1043	 E1	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x1A1000F016F000F01000009011A01AC00860000009501E80095FFE000B40020
1044	 E2	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x1A1000F016F000F01000009011A01AC00860000009501E80095FFE000B40020
- stack 0: 0xF0
1045	 E4	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x1A1
1046	 E5	JUMP		 	 
- stack 0: 0x4D8
1047	 1A1	JUMPDEST		 ;; __riscvimpl_LUI_feb7	  ;; # instr: lui t4,0xf(ignore imm)
- stack 0: 0x4D8
1048	 1A2	PUSH4	0000f000	 	 
- stack 1: 0x4D8
- stack 0: 0xF000
1049	 1A7	PUSH2	03A0	 	 
- stack 2: 0x4D8
- stack 1: 0xF000
- stack 0: 0x3A0
1050	 1AA	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D8
1051	 1AB	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1052	 1AD	ADD		 	 
- stack 0: 0x4DC
1053	 1AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1054	 1AF	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x16F000F01000009011A01AC00860000009501E80095FFE000B4002000E600FF
1055	 1B0	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x16F000F01000009011A01AC00860000009501E80095FFE000B4002000E600FF
- stack 0: 0xF0
1056	 1B2	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x16F
1057	 1B3	JUMP		 	 
- stack 0: 0x4DC
1058	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x4DC
1059	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
1060	 171	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x16F000F01000009011A01AC00860000009501E80095FFE000B4002000E600FF
1061	 172	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0x16F000F01000009011A01AC00860000009501E80095FFE000B4002000E600FF
- stack 0: 0xE0
1062	 174	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x16F000F
1063	 175	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x16F000F
- stack 0: 0xFFFF
1064	 178	AND		 	 
- stack 1: 0x4DC
- stack 0: 0xF
1065	 179	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0xF
- stack 0: 0x1
1066	 17B	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0xF
1067	 17C	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0xF
- stack 0: 0x3A0
1068	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x4DC
- stack 1: 0xF
- stack 0: 0xF000
1069	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x4DC
- stack 0: 0xF00F
1070	 181	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0xF00F
- stack 0: 0x3A0
1071	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x4DC
1072	 185	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1073	 187	ADD		 	 
- stack 0: 0x4E0
1074	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1075	 189	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x1000009011A01AC00860000009501E80095FFE000B4002000E600FF0100000A
1076	 18A	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x1000009011A01AC00860000009501E80095FFE000B4002000E600FF0100000A
- stack 0: 0xF0
1077	 18C	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x100
1078	 18D	JUMP		 	 
- stack 0: 0x4E0
1079	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E0
1080	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1081	 102	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x1000009011A01AC00860000009501E80095FFE000B4002000E600FF0100000A
1082	 103	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0x1000009011A01AC00860000009501E80095FFE000B4002000E600FF0100000A
- stack 0: 0xE0
1083	 105	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x1000009
1084	 106	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x1000009
- stack 0: 0xFFFF
1085	 109	AND		 	 
- stack 1: 0x4E0
- stack 0: 0x9
1086	 10A	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0x9
- stack 0: 0x1
1087	 10C	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0x9
1088	 10D	PUSH2	0380	 	 
- stack 2: 0x4E0
- stack 1: 0x9
- stack 0: 0x380
1089	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E0
1090	 111	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1091	 113	ADD		 	 
- stack 0: 0x4E4
1092	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1093	 115	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x11A01AC00860000009501E80095FFE000B4002000E600FF0100000A011A0190
1094	 116	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x11A01AC00860000009501E80095FFE000B4002000E600FF0100000A011A0190
- stack 0: 0xF0
1095	 118	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x11A
1096	 119	JUMP		 	 
- stack 0: 0x4E4
1097	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x4E4
1098	 11B	PUSH2	0060	 	 
- stack 1: 0x4E4
- stack 0: 0x60
1099	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x4E4
- stack 0: 0xF00F
1100	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E4
- stack 1: 0xF00F
- stack 0: 0xFFFFFFFF
1101	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E4
- stack 0: 0xF00F
1102	 125	PUSH2	03A0	 	 
- stack 2: 0x4E4
- stack 1: 0xF00F
- stack 0: 0x3A0
1103	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E4
- stack 1: 0xF00F
- stack 0: 0xF00F
1104	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E4
- stack 2: 0xF00F
- stack 1: 0xF00F
- stack 0: 0xFFFFFFFF
1105	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E4
- stack 1: 0xF00F
- stack 0: 0xF00F
1106	 12F	SUB		 	 
- stack 1: 0x4E4
- stack 0: 0x0
1107	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x4E4
- stack 1: 0x0
- stack 0: 0x138
1108	 133	JUMPI		 	 
- stack 0: 0x4E4
1109	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x4E4
- stack 0: 0x152
1110	 137	JUMP		 	 
- stack 0: 0x4E4
1111	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x4E4
1112	 153	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1113	 155	ADD		 	 
- stack 0: 0x4E8
1114	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1115	 157	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x860000009501E80095FFE000B4002000E600FF0100000A011A019000860000
1116	 158	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x860000009501E80095FFE000B4002000E600FF0100000A011A019000860000
- stack 0: 0xF0
1117	 15A	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x86
1118	 15B	JUMP		 	 
- stack 0: 0x4E8
1119	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4E8
1120	 87	DUP1		 	 
- stack 1: 0x4E8
- stack 0: 0x4E8
1121	 88	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0x4E8
- stack 0: 0x20
1122	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E8
1123	 8C	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1124	 8E	ADD		 	 
- stack 0: 0x4EC
1125	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1126	 90	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x9501E80095FFE000B4002000E600FF0100000A011A019000860000009501CC
1127	 91	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x9501E80095FFE000B4002000E600FF0100000A011A019000860000009501CC
- stack 0: 0xF0
1128	 93	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x95
1129	 94	JUMP		 	 
- stack 0: 0x4EC
1130	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x4EC
1131	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1132	 97	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x9501E80095FFE000B4002000E600FF0100000A011A019000860000009501CC
1133	 98	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0x9501E80095FFE000B4002000E600FF0100000A011A019000860000009501CC
- stack 0: 0xE0
1134	 9A	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x9501E8
1135	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x9501E8
- stack 0: 0xFFFF
1136	 9E	AND		 	 
- stack 1: 0x4EC
- stack 0: 0x1E8
1137	 9F	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0x1E8
- stack 0: 0x1
1138	 A1	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0x1E8
1139	 A2	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0x1E8
- stack 0: 0x20
1140	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4EC
- stack 1: 0x1E8
- stack 0: 0x4E8
1141	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4EC
- stack 0: 0x6D0
1142	 A7	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0x6D0
- stack 0: 0x20
1143	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4EC
1144	 AB	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1145	 AD	ADD		 	 
- stack 0: 0x4F0
1146	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1147	 AF	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x95FFE000B4002000E600FF0100000A011A019000860000009501CC0095FFFB
1148	 B0	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x95FFE000B4002000E600FF0100000A011A019000860000009501CC0095FFFB
- stack 0: 0xF0
1149	 B2	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x95
1150	 B3	JUMP		 	 
- stack 0: 0x4F0
1151	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x4F0
1152	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F0
- stack 0: 0x4F0
1153	 97	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x95FFE000B4002000E600FF0100000A011A019000860000009501CC0095FFFB
1154	 98	PUSH1	E0	 	 
- stack 2: 0x4F0
- stack 1: 0x95FFE000B4002000E600FF0100000A011A019000860000009501CC0095FFFB
- stack 0: 0xE0
1155	 9A	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x95FFE0
1156	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4F0
- stack 1: 0x95FFE0
- stack 0: 0xFFFF
1157	 9E	AND		 	 
- stack 1: 0x4F0
- stack 0: 0xFFE0
1158	 9F	PUSH1	01	 	 
- stack 2: 0x4F0
- stack 1: 0xFFE0
- stack 0: 0x1
1159	 A1	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1160	 A2	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x20
1161	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x6D0
1162	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F0
- stack 0: 0x6B0
1163	 A7	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0x6B0
- stack 0: 0x20
1164	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F0
1165	 AB	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1166	 AD	ADD		 	 
- stack 0: 0x4F4
1167	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1168	 AF	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xB4002000E600FF0100000A011A019000860000009501CC0095FFFB00B40007
1169	 B0	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0xB4002000E600FF0100000A011A019000860000009501CC0095FFFB00B40007
- stack 0: 0xF0
1170	 B2	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xB4
1171	 B3	JUMP		 	 
- stack 0: 0x4F4
1172	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x4F4
1173	 B5	PUSH2	0020	 	 
- stack 1: 0x4F4
- stack 0: 0x20
1174	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4F4
- stack 0: 0x6B0
1175	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x6B0
- stack 0: 0xFFFFFFFF
1176	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F4
- stack 0: 0x6B0
1177	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4F4
- stack 1: 0x6B0
- stack 0: 0x4F4
1178	 C0	MLOAD		 	 
- stack 2: 0x4F4
- stack 1: 0x6B0
- stack 0: 0xB4002000E600FF0100000A011A019000860000009501CC0095FFFB00B40007
1179	 C1	PUSH1	E0	 	 
- stack 3: 0x4F4
- stack 2: 0x6B0
- stack 1: 0xB4002000E600FF0100000A011A019000860000009501CC0095FFFB00B40007
- stack 0: 0xE0
1180	 C3	SHR		 	 
- stack 2: 0x4F4
- stack 1: 0x6B0
- stack 0: 0xB40020
1181	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4F4
- stack 2: 0x6B0
- stack 1: 0xB40020
- stack 0: 0xFFFF
1182	 C7	AND		 	 
- stack 2: 0x4F4
- stack 1: 0x6B0
- stack 0: 0x20
1183	 C8	PUSH1	01	 	 
- stack 3: 0x4F4
- stack 2: 0x6B0
- stack 1: 0x20
- stack 0: 0x1
1184	 CA	SIGNEXTEND		 	 
- stack 2: 0x4F4
- stack 1: 0x6B0
- stack 0: 0x20
1185	 CB	ADD		 	 
- stack 1: 0x4F4
- stack 0: 0x6D0
1186	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFF
1187	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F4
- stack 0: 0x6D0
1188	 D2	PUSH1	02	 	 
- stack 2: 0x4F4
- stack 1: 0x6D0
- stack 0: 0x2
1189	 D4	XOR		 	 
- stack 1: 0x4F4
- stack 0: 0x6D2
1190	 D5	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
1191	 D6	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
1192	 D8	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xFF
1193	 D9	PUSH2	0060	 	 
- stack 2: 0x4F4
- stack 1: 0xFF
- stack 0: 0x60
1194	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x4F4
1195	 DD	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1196	 DF	ADD		 	 
- stack 0: 0x4F8
1197	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1198	 E1	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xE600FF0100000A011A019000860000009501CC0095FFFB00B40007015C0010
1199	 E2	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0xE600FF0100000A011A019000860000009501CC0095FFFB00B40007015C0010
- stack 0: 0xF0
1200	 E4	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xE6
1201	 E5	JUMP		 	 
- stack 0: 0x4F8
1202	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x4F8
1203	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1204	 E8	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xE600FF0100000A011A019000860000009501CC0095FFFB00B40007015C0010
1205	 E9	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0xE600FF0100000A011A019000860000009501CC0095FFFB00B40007015C0010
- stack 0: 0xE0
1206	 EB	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xE600FF
1207	 EC	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0xE600FF
- stack 0: 0xFFFF
1208	 EF	AND		 	 
- stack 1: 0x4F8
- stack 0: 0xFF
1209	 F0	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0xFF
- stack 0: 0x1
1210	 F2	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0xFF
1211	 F3	PUSH2	03A0	 	 
- stack 2: 0x4F8
- stack 1: 0xFF
- stack 0: 0x3A0
1212	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F8
1213	 F7	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1214	 F9	ADD		 	 
- stack 0: 0x4FC
1215	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1216	 FB	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x100000A011A019000860000009501CC0095FFFB00B40007015C0010016FFF00
1217	 FC	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x100000A011A019000860000009501CC0095FFFB00B40007015C0010016FFF00
- stack 0: 0xF0
1218	 FE	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x100
1219	 FF	JUMP		 	 
- stack 0: 0x4FC
1220	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4FC
1221	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1222	 102	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x100000A011A019000860000009501CC0095FFFB00B40007015C0010016FFF00
1223	 103	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x100000A011A019000860000009501CC0095FFFB00B40007015C0010016FFF00
- stack 0: 0xE0
1224	 105	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x100000A
1225	 106	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x100000A
- stack 0: 0xFFFF
1226	 109	AND		 	 
- stack 1: 0x4FC
- stack 0: 0xA
1227	 10A	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0xA
- stack 0: 0x1
1228	 10C	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0xA
1229	 10D	PUSH2	0380	 	 
- stack 2: 0x4FC
- stack 1: 0xA
- stack 0: 0x380
1230	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x4FC
1231	 111	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1232	 113	ADD		 	 
- stack 0: 0x500
1233	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1234	 115	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x11A019000860000009501CC0095FFFB00B40007015C0010016FFF000100000B
1235	 116	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x11A019000860000009501CC0095FFFB00B40007015C0010016FFF000100000B
- stack 0: 0xF0
1236	 118	SHR		 	 
- stack 1: 0x500
- stack 0: 0x11A
1237	 119	JUMP		 	 
- stack 0: 0x500
1238	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x500
1239	 11B	PUSH2	0060	 	 
- stack 1: 0x500
- stack 0: 0x60
1240	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x500
- stack 0: 0xFF
1241	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x500
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
1242	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x500
- stack 0: 0xFF
1243	 125	PUSH2	03A0	 	 
- stack 2: 0x500
- stack 1: 0xFF
- stack 0: 0x3A0
1244	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x500
- stack 1: 0xFF
- stack 0: 0xFF
1245	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x500
- stack 2: 0xFF
- stack 1: 0xFF
- stack 0: 0xFFFFFFFF
1246	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x500
- stack 1: 0xFF
- stack 0: 0xFF
1247	 12F	SUB		 	 
- stack 1: 0x500
- stack 0: 0x0
1248	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x138
1249	 133	JUMPI		 	 
- stack 0: 0x500
1250	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x500
- stack 0: 0x152
1251	 137	JUMP		 	 
- stack 0: 0x500
1252	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x500
1253	 153	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1254	 155	ADD		 	 
- stack 0: 0x504
1255	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1256	 157	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x860000009501CC0095FFFB00B40007015C0010016FFF000100000B011A0170
1257	 158	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x860000009501CC0095FFFB00B40007015C0010016FFF000100000B011A0170
- stack 0: 0xF0
1258	 15A	SHR		 	 
- stack 1: 0x504
- stack 0: 0x86
1259	 15B	JUMP		 	 
- stack 0: 0x504
1260	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x504
1261	 87	DUP1		 	 
- stack 1: 0x504
- stack 0: 0x504
1262	 88	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0x504
- stack 0: 0x20
1263	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x504
1264	 8C	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1265	 8E	ADD		 	 
- stack 0: 0x508
1266	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1267	 90	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x9501CC0095FFFB00B40007015C0010016FFF000100000B011A01700100000C
1268	 91	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x9501CC0095FFFB00B40007015C0010016FFF000100000B011A01700100000C
- stack 0: 0xF0
1269	 93	SHR		 	 
- stack 1: 0x508
- stack 0: 0x95
1270	 94	JUMP		 	 
- stack 0: 0x508
1271	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x508
1272	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1273	 97	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x9501CC0095FFFB00B40007015C0010016FFF000100000B011A01700100000C
1274	 98	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x9501CC0095FFFB00B40007015C0010016FFF000100000B011A01700100000C
- stack 0: 0xE0
1275	 9A	SHR		 	 
- stack 1: 0x508
- stack 0: 0x9501CC
1276	 9B	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x9501CC
- stack 0: 0xFFFF
1277	 9E	AND		 	 
- stack 1: 0x508
- stack 0: 0x1CC
1278	 9F	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0x1CC
- stack 0: 0x1
1279	 A1	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0x1CC
1280	 A2	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0x1CC
- stack 0: 0x20
1281	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x508
- stack 1: 0x1CC
- stack 0: 0x504
1282	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x508
- stack 0: 0x6D0
1283	 A7	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0x6D0
- stack 0: 0x20
1284	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x508
1285	 AB	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1286	 AD	ADD		 	 
- stack 0: 0x50C
1287	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1288	 AF	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x95FFFB00B40007015C0010016FFF000100000B011A01700100000C01B40000
1289	 B0	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x95FFFB00B40007015C0010016FFF000100000B011A01700100000C01B40000
- stack 0: 0xF0
1290	 B2	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x95
1291	 B3	JUMP		 	 
- stack 0: 0x50C
1292	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x50C
1293	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1294	 97	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x95FFFB00B40007015C0010016FFF000100000B011A01700100000C01B40000
1295	 98	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0x95FFFB00B40007015C0010016FFF000100000B011A01700100000C01B40000
- stack 0: 0xE0
1296	 9A	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x95FFFB
1297	 9B	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0x95FFFB
- stack 0: 0xFFFF
1298	 9E	AND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFB
1299	 9F	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xFFFB
- stack 0: 0x1
1300	 A1	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB
1301	 A2	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB
- stack 0: 0x20
1302	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB
- stack 0: 0x6D0
1303	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x50C
- stack 0: 0x6CB
1304	 A7	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0x6CB
- stack 0: 0x20
1305	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x50C
1306	 AB	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1307	 AD	ADD		 	 
- stack 0: 0x510
1308	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1309	 AF	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xB40007015C0010016FFF000100000B011A01700100000C01B4000000860000
1310	 B0	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xB40007015C0010016FFF000100000B011A01700100000C01B4000000860000
- stack 0: 0xF0
1311	 B2	SHR		 	 
- stack 1: 0x510
- stack 0: 0xB4
1312	 B3	JUMP		 	 
- stack 0: 0x510
1313	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x510
1314	 B5	PUSH2	0020	 	 
- stack 1: 0x510
- stack 0: 0x20
1315	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x510
- stack 0: 0x6CB
1316	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x510
- stack 1: 0x6CB
- stack 0: 0xFFFFFFFF
1317	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x510
- stack 0: 0x6CB
1318	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x510
- stack 1: 0x6CB
- stack 0: 0x510
1319	 C0	MLOAD		 	 
- stack 2: 0x510
- stack 1: 0x6CB
- stack 0: 0xB40007015C0010016FFF000100000B011A01700100000C01B4000000860000
1320	 C1	PUSH1	E0	 	 
- stack 3: 0x510
- stack 2: 0x6CB
- stack 1: 0xB40007015C0010016FFF000100000B011A01700100000C01B4000000860000
- stack 0: 0xE0
1321	 C3	SHR		 	 
- stack 2: 0x510
- stack 1: 0x6CB
- stack 0: 0xB40007
1322	 C4	PUSH2	FFFF	 	 
- stack 3: 0x510
- stack 2: 0x6CB
- stack 1: 0xB40007
- stack 0: 0xFFFF
1323	 C7	AND		 	 
- stack 2: 0x510
- stack 1: 0x6CB
- stack 0: 0x7
1324	 C8	PUSH1	01	 	 
- stack 3: 0x510
- stack 2: 0x6CB
- stack 1: 0x7
- stack 0: 0x1
1325	 CA	SIGNEXTEND		 	 
- stack 2: 0x510
- stack 1: 0x6CB
- stack 0: 0x7
1326	 CB	ADD		 	 
- stack 1: 0x510
- stack 0: 0x6D2
1327	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x510
- stack 1: 0x6D2
- stack 0: 0xFFFFFFFF
1328	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x510
- stack 0: 0x6D2
1329	 D2	PUSH1	02	 	 
- stack 2: 0x510
- stack 1: 0x6D2
- stack 0: 0x2
1330	 D4	XOR		 	 
- stack 1: 0x510
- stack 0: 0x6D0
1331	 D5	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
1332	 D6	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
- stack 0: 0xF0
1333	 D8	SHR		 	 
- stack 1: 0x510
- stack 0: 0xFF00
1334	 D9	PUSH2	0060	 	 
- stack 2: 0x510
- stack 1: 0xFF00
- stack 0: 0x60
1335	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x510
1336	 DD	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1337	 DF	ADD		 	 
- stack 0: 0x514
1338	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1339	 E1	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x15C0010016FFF000100000B011A01700100000C01B4000000860000009501A6
1340	 E2	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x15C0010016FFF000100000B011A01700100000C01B4000000860000009501A6
- stack 0: 0xF0
1341	 E4	SHR		 	 
- stack 1: 0x514
- stack 0: 0x15C
1342	 E5	JUMP		 	 
- stack 0: 0x514
1343	 15C	JUMPDEST		 ;; __riscvimpl_LUI_10eb7	  ;; # instr: lui t4,0x10(ignore imm)
- stack 0: 0x514
1344	 15D	PUSH4	00010000	 	 
- stack 1: 0x514
- stack 0: 0x10000
1345	 162	PUSH2	03A0	 	 
- stack 2: 0x514
- stack 1: 0x10000
- stack 0: 0x3A0
1346	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x514
1347	 166	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1348	 168	ADD		 	 
- stack 0: 0x518
1349	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1350	 16A	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x16FFF000100000B011A01700100000C01B4000000860000009501A600B40002
1351	 16B	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x16FFF000100000B011A01700100000C01B4000000860000009501A600B40002
- stack 0: 0xF0
1352	 16D	SHR		 	 
- stack 1: 0x518
- stack 0: 0x16F
1353	 16E	JUMP		 	 
- stack 0: 0x518
1354	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x518
1355	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1356	 171	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x16FFF000100000B011A01700100000C01B4000000860000009501A600B40002
1357	 172	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x16FFF000100000B011A01700100000C01B4000000860000009501A600B40002
- stack 0: 0xE0
1358	 174	SHR		 	 
- stack 1: 0x518
- stack 0: 0x16FFF00
1359	 175	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x16FFF00
- stack 0: 0xFFFF
1360	 178	AND		 	 
- stack 1: 0x518
- stack 0: 0xFF00
1361	 179	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0xFF00
- stack 0: 0x1
1362	 17B	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1363	 17C	PUSH2	03A0	 	 
- stack 2: 0x518
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
1364	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x518
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x10000
1365	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x518
- stack 0: 0xFF00
1366	 181	PUSH2	03A0	 	 
- stack 2: 0x518
- stack 1: 0xFF00
- stack 0: 0x3A0
1367	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x518
1368	 185	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1369	 187	ADD		 	 
- stack 0: 0x51C
1370	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1371	 189	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x100000B011A01700100000C01B4000000860000009501A600B4000201CE0000
1372	 18A	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x100000B011A01700100000C01B4000000860000009501A600B4000201CE0000
- stack 0: 0xF0
1373	 18C	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x100
1374	 18D	JUMP		 	 
- stack 0: 0x51C
1375	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x51C
1376	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1377	 102	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x100000B011A01700100000C01B4000000860000009501A600B4000201CE0000
1378	 103	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x100000B011A01700100000C01B4000000860000009501A600B4000201CE0000
- stack 0: 0xE0
1379	 105	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x100000B
1380	 106	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x100000B
- stack 0: 0xFFFF
1381	 109	AND		 	 
- stack 1: 0x51C
- stack 0: 0xB
1382	 10A	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0xB
- stack 0: 0x1
1383	 10C	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0xB
1384	 10D	PUSH2	0380	 	 
- stack 2: 0x51C
- stack 1: 0xB
- stack 0: 0x380
1385	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x51C
1386	 111	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1387	 113	ADD		 	 
- stack 0: 0x520
1388	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1389	 115	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x11A01700100000C01B4000000860000009501A600B4000201CE0000018E0001
1390	 116	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x11A01700100000C01B4000000860000009501A600B4000201CE0000018E0001
- stack 0: 0xF0
1391	 118	SHR		 	 
- stack 1: 0x520
- stack 0: 0x11A
1392	 119	JUMP		 	 
- stack 0: 0x520
1393	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x520
1394	 11B	PUSH2	0060	 	 
- stack 1: 0x520
- stack 0: 0x60
1395	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x520
- stack 0: 0xFF00
1396	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x520
- stack 1: 0xFF00
- stack 0: 0xFFFFFFFF
1397	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x520
- stack 0: 0xFF00
1398	 125	PUSH2	03A0	 	 
- stack 2: 0x520
- stack 1: 0xFF00
- stack 0: 0x3A0
1399	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x520
- stack 1: 0xFF00
- stack 0: 0xFF00
1400	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x520
- stack 2: 0xFF00
- stack 1: 0xFF00
- stack 0: 0xFFFFFFFF
1401	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x520
- stack 1: 0xFF00
- stack 0: 0xFF00
1402	 12F	SUB		 	 
- stack 1: 0x520
- stack 0: 0x0
1403	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x520
- stack 1: 0x0
- stack 0: 0x138
1404	 133	JUMPI		 	 
- stack 0: 0x520
1405	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x520
- stack 0: 0x152
1406	 137	JUMP		 	 
- stack 0: 0x520
1407	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x520
1408	 153	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1409	 155	ADD		 	 
- stack 0: 0x524
1410	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1411	 157	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x100000C01B4000000860000009501A600B4000201CE0000018E0001016FFFF0
1412	 158	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x100000C01B4000000860000009501A600B4000201CE0000018E0001016FFFF0
- stack 0: 0xF0
1413	 15A	SHR		 	 
- stack 1: 0x524
- stack 0: 0x100
1414	 15B	JUMP		 	 
- stack 0: 0x524
1415	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x524
1416	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1417	 102	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x100000C01B4000000860000009501A600B4000201CE0000018E0001016FFFF0
1418	 103	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x100000C01B4000000860000009501A600B4000201CE0000018E0001016FFFF0
- stack 0: 0xE0
1419	 105	SHR		 	 
- stack 1: 0x524
- stack 0: 0x100000C
1420	 106	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x100000C
- stack 0: 0xFFFF
1421	 109	AND		 	 
- stack 1: 0x524
- stack 0: 0xC
1422	 10A	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0xC
- stack 0: 0x1
1423	 10C	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xC
1424	 10D	PUSH2	0380	 	 
- stack 2: 0x524
- stack 1: 0xC
- stack 0: 0x380
1425	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x524
1426	 111	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1427	 113	ADD		 	 
- stack 0: 0x528
1428	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1429	 115	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1B4000000860000009501A600B4000201CE0000018E0001016FFFF001ED014C
1430	 116	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x1B4000000860000009501A600B4000201CE0000018E0001016FFFF001ED014C
- stack 0: 0xF0
1431	 118	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1B4
1432	 119	JUMP		 	 
- stack 0: 0x528
1433	 1B4	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x528
1434	 1B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1435	 1B6	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1B4000000860000009501A600B4000201CE0000018E0001016FFFF001ED014C
1436	 1B7	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x1B4000000860000009501A600B4000201CE0000018E0001016FFFF001ED014C
- stack 0: 0xE0
1437	 1B9	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1B40000
1438	 1BA	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x1B40000
- stack 0: 0xFFFF
1439	 1BD	AND		 	 
- stack 1: 0x528
- stack 0: 0x0
1440	 1BE	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0x0
- stack 0: 0x1
1441	 1C0	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0x0
1442	 1C1	PUSH2	0080	 	 
- stack 2: 0x528
- stack 1: 0x0
- stack 0: 0x80
1443	 1C4	MSTORE		 	  ;; # store to x4
- stack 0: 0x528
1444	 1C5	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1445	 1C7	ADD		 	 
- stack 0: 0x52C
1446	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1447	 1C9	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x860000009501A600B4000201CE0000018E0001016FFFF001ED014C022F0001
1448	 1CA	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x860000009501A600B4000201CE0000018E0001016FFFF001ED014C022F0001
- stack 0: 0xF0
1449	 1CC	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x86
1450	 1CD	JUMP		 	 
- stack 0: 0x52C
1451	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x52C
1452	 87	DUP1		 	 
- stack 1: 0x52C
- stack 0: 0x52C
1453	 88	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x52C
- stack 0: 0x20
1454	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x52C
1455	 8C	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1456	 8E	ADD		 	 
- stack 0: 0x530
1457	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1458	 90	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x9501A600B4000201CE0000018E0001016FFFF001ED014C022F0001024E0002
1459	 91	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x9501A600B4000201CE0000018E0001016FFFF001ED014C022F0001024E0002
- stack 0: 0xF0
1460	 93	SHR		 	 
- stack 1: 0x530
- stack 0: 0x95
1461	 94	JUMP		 	 
- stack 0: 0x530
1462	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x530
1463	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1464	 97	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x9501A600B4000201CE0000018E0001016FFFF001ED014C022F0001024E0002
1465	 98	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x9501A600B4000201CE0000018E0001016FFFF001ED014C022F0001024E0002
- stack 0: 0xE0
1466	 9A	SHR		 	 
- stack 1: 0x530
- stack 0: 0x9501A6
1467	 9B	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x9501A6
- stack 0: 0xFFFF
1468	 9E	AND		 	 
- stack 1: 0x530
- stack 0: 0x1A6
1469	 9F	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0x1A6
- stack 0: 0x1
1470	 A1	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0x1A6
1471	 A2	PUSH2	0020	 	 
- stack 2: 0x530
- stack 1: 0x1A6
- stack 0: 0x20
1472	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x530
- stack 1: 0x1A6
- stack 0: 0x52C
1473	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x530
- stack 0: 0x6D2
1474	 A7	PUSH2	0020	 	 
- stack 2: 0x530
- stack 1: 0x6D2
- stack 0: 0x20
1475	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x530
1476	 AB	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1477	 AD	ADD		 	 
- stack 0: 0x534
1478	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1479	 AF	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xB4000201CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC
1480	 B0	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0xB4000201CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC
- stack 0: 0xF0
1481	 B2	SHR		 	 
- stack 1: 0x534
- stack 0: 0xB4
1482	 B3	JUMP		 	 
- stack 0: 0x534
1483	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x534
1484	 B5	PUSH2	0020	 	 
- stack 1: 0x534
- stack 0: 0x20
1485	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x534
- stack 0: 0x6D2
1486	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x534
- stack 1: 0x6D2
- stack 0: 0xFFFFFFFF
1487	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x534
- stack 0: 0x6D2
1488	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x534
- stack 1: 0x6D2
- stack 0: 0x534
1489	 C0	MLOAD		 	 
- stack 2: 0x534
- stack 1: 0x6D2
- stack 0: 0xB4000201CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC
1490	 C1	PUSH1	E0	 	 
- stack 3: 0x534
- stack 2: 0x6D2
- stack 1: 0xB4000201CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC
- stack 0: 0xE0
1491	 C3	SHR		 	 
- stack 2: 0x534
- stack 1: 0x6D2
- stack 0: 0xB40002
1492	 C4	PUSH2	FFFF	 	 
- stack 3: 0x534
- stack 2: 0x6D2
- stack 1: 0xB40002
- stack 0: 0xFFFF
1493	 C7	AND		 	 
- stack 2: 0x534
- stack 1: 0x6D2
- stack 0: 0x2
1494	 C8	PUSH1	01	 	 
- stack 3: 0x534
- stack 2: 0x6D2
- stack 1: 0x2
- stack 0: 0x1
1495	 CA	SIGNEXTEND		 	 
- stack 2: 0x534
- stack 1: 0x6D2
- stack 0: 0x2
1496	 CB	ADD		 	 
- stack 1: 0x534
- stack 0: 0x6D4
1497	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x534
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFF
1498	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x534
- stack 0: 0x6D4
1499	 D2	PUSH1	02	 	 
- stack 2: 0x534
- stack 1: 0x6D4
- stack 0: 0x2
1500	 D4	XOR		 	 
- stack 1: 0x534
- stack 0: 0x6D6
1501	 D5	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xFF0000000000000000000000000000000000000000000000000000000000000
1502	 D6	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0xFF0000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
1503	 D8	SHR		 	 
- stack 1: 0x534
- stack 0: 0xFF0
1504	 D9	PUSH2	0060	 	 
- stack 2: 0x534
- stack 1: 0xFF0
- stack 0: 0x60
1505	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x534
1506	 DD	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1507	 DF	ADD		 	 
- stack 0: 0x538
1508	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1509	 E1	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC0100000D
1510	 E2	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x1CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC0100000D
- stack 0: 0xF0
1511	 E4	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1CE
1512	 E5	JUMP		 	 
- stack 0: 0x538
1513	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x538
1514	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1515	 1D0	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC0100000D
1516	 1D1	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x1CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC0100000D
- stack 0: 0xE0
1517	 1D3	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1CE0000
1518	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x1CE0000
- stack 0: 0xFFFF
1519	 1D7	AND		 	 
- stack 1: 0x538
- stack 0: 0x0
1520	 1D8	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x1
1521	 1DA	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0x0
1522	 1DB	PUSH2	0060	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x60
1523	 1DE	MLOAD		 	  ;; # read from x3
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0xFF0
1524	 1DF	ADD		 	  ;; # ADDI 3
- stack 1: 0x538
- stack 0: 0xFF0
1525	 1E0	PUSH2	00C0	 	 
- stack 2: 0x538
- stack 1: 0xFF0
- stack 0: 0xC0
1526	 1E3	MSTORE		 	  ;; # store to x6
- stack 0: 0x538
1527	 1E4	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1528	 1E6	ADD		 	 
- stack 0: 0x53C
1529	 1E7	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1530	 1E8	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x18E0001016FFFF001ED014C022F0001024E00020268FFDC0100000D01B40000
1531	 1E9	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x18E0001016FFFF001ED014C022F0001024E00020268FFDC0100000D01B40000
- stack 0: 0xF0
1532	 1EB	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x18E
1533	 1EC	JUMP		 	 
- stack 0: 0x53C
1534	 18E	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x53C
1535	 18F	PUSH4	00001000	 	 
- stack 1: 0x53C
- stack 0: 0x1000
1536	 194	PUSH2	03A0	 	 
- stack 2: 0x53C
- stack 1: 0x1000
- stack 0: 0x3A0
1537	 197	MSTORE		 	  ;; # store to x29
- stack 0: 0x53C
1538	 198	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1539	 19A	ADD		 	 
- stack 0: 0x540
1540	 19B	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1541	 19C	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x16FFFF001ED014C022F0001024E00020268FFDC0100000D01B4000000860000
1542	 19D	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x16FFFF001ED014C022F0001024E00020268FFDC0100000D01B4000000860000
- stack 0: 0xF0
1543	 19F	SHR		 	 
- stack 1: 0x540
- stack 0: 0x16F
1544	 1A0	JUMP		 	 
- stack 0: 0x540
1545	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x540
1546	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1547	 171	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x16FFFF001ED014C022F0001024E00020268FFDC0100000D01B4000000860000
1548	 172	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x16FFFF001ED014C022F0001024E00020268FFDC0100000D01B4000000860000
- stack 0: 0xE0
1549	 174	SHR		 	 
- stack 1: 0x540
- stack 0: 0x16FFFF0
1550	 175	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x16FFFF0
- stack 0: 0xFFFF
1551	 178	AND		 	 
- stack 1: 0x540
- stack 0: 0xFFF0
1552	 179	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xFFF0
- stack 0: 0x1
1553	 17B	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1554	 17C	PUSH2	03A0	 	 
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
1555	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x1000
1556	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x540
- stack 0: 0xFF0
1557	 181	PUSH2	03A0	 	 
- stack 2: 0x540
- stack 1: 0xFF0
- stack 0: 0x3A0
1558	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x540
1559	 185	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1560	 187	ADD		 	 
- stack 0: 0x544
1561	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1562	 189	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x1ED014C022F0001024E00020268FFDC0100000D01B400000086000000950178
1563	 18A	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x1ED014C022F0001024E00020268FFDC0100000D01B400000086000000950178
- stack 0: 0xF0
1564	 18C	SHR		 	 
- stack 1: 0x544
- stack 0: 0x1ED
1565	 18D	JUMP		 	 
- stack 0: 0x544
1566	 1ED	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,14c(ignore imm)
- stack 0: 0x544
1567	 1EE	PUSH2	00C0	 	 
- stack 1: 0x544
- stack 0: 0xC0
1568	 1F1	MLOAD		 	  ;; # read from x6
- stack 1: 0x544
- stack 0: 0xFF0
1569	 1F2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
1570	 1F7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0xFF0
1571	 1F8	PUSH2	03A0	 	 
- stack 2: 0x544
- stack 1: 0xFF0
- stack 0: 0x3A0
1572	 1FB	MLOAD		 	  ;; # read from x29
- stack 2: 0x544
- stack 1: 0xFF0
- stack 0: 0xFF0
1573	 1FC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x544
- stack 2: 0xFF0
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
1574	 201	AND		 	  ;; # mask to 32 bits
- stack 2: 0x544
- stack 1: 0xFF0
- stack 0: 0xFF0
1575	 202	SUB		 	 
- stack 1: 0x544
- stack 0: 0x0
1576	 203	PUSH2	020B	 ;; _neq_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x20B
1577	 206	JUMPI		 	 
- stack 0: 0x544
1578	 207	PUSH2	0225	 ;; _neq_after_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 1: 0x544
- stack 0: 0x225
1579	 20A	JUMP		 	 
- stack 0: 0x544
1580	 225	JUMPDEST		 ;; _neq_after_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 0: 0x544
1581	 226	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1582	 228	ADD		 	 
- stack 0: 0x548
1583	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1584	 22A	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x22F0001024E00020268FFDC0100000D01B40000008600000095017800B40002
1585	 22B	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x22F0001024E00020268FFDC0100000D01B40000008600000095017800B40002
- stack 0: 0xF0
1586	 22D	SHR		 	 
- stack 1: 0x548
- stack 0: 0x22F
1587	 22E	JUMP		 	 
- stack 0: 0x548
1588	 22F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x548
1589	 230	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1590	 231	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x22F0001024E00020268FFDC0100000D01B40000008600000095017800B40002
1591	 232	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x22F0001024E00020268FFDC0100000D01B40000008600000095017800B40002
- stack 0: 0xE0
1592	 234	SHR		 	 
- stack 1: 0x548
- stack 0: 0x22F0001
1593	 235	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x22F0001
- stack 0: 0xFFFF
1594	 238	AND		 	 
- stack 1: 0x548
- stack 0: 0x1
1595	 239	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x1
1596	 23B	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x1
1597	 23C	PUSH2	0080	 	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x80
1598	 23F	MLOAD		 	  ;; # read from x4
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x0
1599	 240	ADD		 	  ;; # ADDI 4
- stack 1: 0x548
- stack 0: 0x1
1600	 241	PUSH2	0080	 	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x80
1601	 244	MSTORE		 	  ;; # store to x4
- stack 0: 0x548
1602	 245	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1603	 247	ADD		 	 
- stack 0: 0x54C
1604	 248	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1605	 249	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x24E00020268FFDC0100000D01B40000008600000095017800B4000202AA0000
1606	 24A	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x24E00020268FFDC0100000D01B40000008600000095017800B4000202AA0000
- stack 0: 0xF0
1607	 24C	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x24E
1608	 24D	JUMP		 	 
- stack 0: 0x54C
1609	 24E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x54C
1610	 24F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1611	 250	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x24E00020268FFDC0100000D01B40000008600000095017800B4000202AA0000
1612	 251	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x24E00020268FFDC0100000D01B40000008600000095017800B4000202AA0000
- stack 0: 0xE0
1613	 253	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x24E0002
1614	 254	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x24E0002
- stack 0: 0xFFFF
1615	 257	AND		 	 
- stack 1: 0x54C
- stack 0: 0x2
1616	 258	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0x1
1617	 25A	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x2
1618	 25B	PUSH2	00A0	 	 
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0xA0
1619	 25E	MSTORE		 	  ;; # store to x5
- stack 0: 0x54C
1620	 25F	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1621	 261	ADD		 	 
- stack 0: 0x550
1622	 262	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1623	 263	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x268FFDC0100000D01B40000008600000095017800B4000202AA000001CE0000
1624	 264	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x268FFDC0100000D01B40000008600000095017800B4000202AA000001CE0000
- stack 0: 0xF0
1625	 266	SHR		 	 
- stack 1: 0x550
- stack 0: 0x268
1626	 267	JUMP		 	 
- stack 0: 0x550
1627	 268	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x550
1628	 269	PUSH2	0080	 	 
- stack 1: 0x550
- stack 0: 0x80
1629	 26C	MLOAD		 	  ;; # read from x4
- stack 1: 0x550
- stack 0: 0x1
1630	 26D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1631	 272	AND		 	  ;; # mask to 32 bits
- stack 1: 0x550
- stack 0: 0x1
1632	 273	PUSH2	00A0	 	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0xA0
1633	 276	MLOAD		 	  ;; # read from x5
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x2
1634	 277	PUSH4	FFFFFFFF	 	 
- stack 3: 0x550
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1635	 27C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x2
1636	 27D	SUB		 	 
- stack 1: 0x550
- stack 0: 0x1
1637	 27E	PUSH2	0286	 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x286
1638	 281	JUMPI		 	 
- stack 0: 0x550
1639	 286	JUMPDEST		 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 0: 0x550
1640	 287	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1641	 288	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x268FFDC0100000D01B40000008600000095017800B4000202AA000001CE0000
1642	 289	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x268FFDC0100000D01B40000008600000095017800B4000202AA000001CE0000
- stack 0: 0xE0
1643	 28B	SHR		 	 
- stack 1: 0x550
- stack 0: 0x268FFDC
1644	 28C	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x268FFDC
- stack 0: 0xFFFF
1645	 28F	AND		 	 
- stack 1: 0x550
- stack 0: 0xFFDC
1646	 290	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0xFFDC
- stack 0: 0x1
1647	 292	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
1648	 293	ADD		 	 
- stack 0: 0x52C
1649	 294	PUSH4	FFFFFFFF	 	 
- stack 1: 0x52C
- stack 0: 0xFFFFFFFF
1650	 299	AND		 	  ;; # mask to 32 bits
- stack 0: 0x52C
1651	 29A	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1652	 29B	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x860000009501A600B4000201CE0000018E0001016FFFF001ED014C022F0001
1653	 29C	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x860000009501A600B4000201CE0000018E0001016FFFF001ED014C022F0001
- stack 0: 0xF0
1654	 29E	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x86
1655	 29F	JUMP		 	 
- stack 0: 0x52C
1656	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x52C
1657	 87	DUP1		 	 
- stack 1: 0x52C
- stack 0: 0x52C
1658	 88	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x52C
- stack 0: 0x20
1659	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x52C
1660	 8C	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1661	 8E	ADD		 	 
- stack 0: 0x530
1662	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1663	 90	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x9501A600B4000201CE0000018E0001016FFFF001ED014C022F0001024E0002
1664	 91	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x9501A600B4000201CE0000018E0001016FFFF001ED014C022F0001024E0002
- stack 0: 0xF0
1665	 93	SHR		 	 
- stack 1: 0x530
- stack 0: 0x95
1666	 94	JUMP		 	 
- stack 0: 0x530
1667	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x530
1668	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1669	 97	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x9501A600B4000201CE0000018E0001016FFFF001ED014C022F0001024E0002
1670	 98	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x9501A600B4000201CE0000018E0001016FFFF001ED014C022F0001024E0002
- stack 0: 0xE0
1671	 9A	SHR		 	 
- stack 1: 0x530
- stack 0: 0x9501A6
1672	 9B	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x9501A6
- stack 0: 0xFFFF
1673	 9E	AND		 	 
- stack 1: 0x530
- stack 0: 0x1A6
1674	 9F	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0x1A6
- stack 0: 0x1
1675	 A1	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0x1A6
1676	 A2	PUSH2	0020	 	 
- stack 2: 0x530
- stack 1: 0x1A6
- stack 0: 0x20
1677	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x530
- stack 1: 0x1A6
- stack 0: 0x52C
1678	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x530
- stack 0: 0x6D2
1679	 A7	PUSH2	0020	 	 
- stack 2: 0x530
- stack 1: 0x6D2
- stack 0: 0x20
1680	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x530
1681	 AB	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1682	 AD	ADD		 	 
- stack 0: 0x534
1683	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1684	 AF	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xB4000201CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC
1685	 B0	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0xB4000201CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC
- stack 0: 0xF0
1686	 B2	SHR		 	 
- stack 1: 0x534
- stack 0: 0xB4
1687	 B3	JUMP		 	 
- stack 0: 0x534
1688	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x534
1689	 B5	PUSH2	0020	 	 
- stack 1: 0x534
- stack 0: 0x20
1690	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x534
- stack 0: 0x6D2
1691	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x534
- stack 1: 0x6D2
- stack 0: 0xFFFFFFFF
1692	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x534
- stack 0: 0x6D2
1693	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x534
- stack 1: 0x6D2
- stack 0: 0x534
1694	 C0	MLOAD		 	 
- stack 2: 0x534
- stack 1: 0x6D2
- stack 0: 0xB4000201CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC
1695	 C1	PUSH1	E0	 	 
- stack 3: 0x534
- stack 2: 0x6D2
- stack 1: 0xB4000201CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC
- stack 0: 0xE0
1696	 C3	SHR		 	 
- stack 2: 0x534
- stack 1: 0x6D2
- stack 0: 0xB40002
1697	 C4	PUSH2	FFFF	 	 
- stack 3: 0x534
- stack 2: 0x6D2
- stack 1: 0xB40002
- stack 0: 0xFFFF
1698	 C7	AND		 	 
- stack 2: 0x534
- stack 1: 0x6D2
- stack 0: 0x2
1699	 C8	PUSH1	01	 	 
- stack 3: 0x534
- stack 2: 0x6D2
- stack 1: 0x2
- stack 0: 0x1
1700	 CA	SIGNEXTEND		 	 
- stack 2: 0x534
- stack 1: 0x6D2
- stack 0: 0x2
1701	 CB	ADD		 	 
- stack 1: 0x534
- stack 0: 0x6D4
1702	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x534
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFF
1703	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x534
- stack 0: 0x6D4
1704	 D2	PUSH1	02	 	 
- stack 2: 0x534
- stack 1: 0x6D4
- stack 0: 0x2
1705	 D4	XOR		 	 
- stack 1: 0x534
- stack 0: 0x6D6
1706	 D5	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xFF0000000000000000000000000000000000000000000000000000000000000
1707	 D6	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0xFF0000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
1708	 D8	SHR		 	 
- stack 1: 0x534
- stack 0: 0xFF0
1709	 D9	PUSH2	0060	 	 
- stack 2: 0x534
- stack 1: 0xFF0
- stack 0: 0x60
1710	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x534
1711	 DD	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1712	 DF	ADD		 	 
- stack 0: 0x538
1713	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1714	 E1	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC0100000D
1715	 E2	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x1CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC0100000D
- stack 0: 0xF0
1716	 E4	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1CE
1717	 E5	JUMP		 	 
- stack 0: 0x538
1718	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x538
1719	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1720	 1D0	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC0100000D
1721	 1D1	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x1CE0000018E0001016FFFF001ED014C022F0001024E00020268FFDC0100000D
- stack 0: 0xE0
1722	 1D3	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1CE0000
1723	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x1CE0000
- stack 0: 0xFFFF
1724	 1D7	AND		 	 
- stack 1: 0x538
- stack 0: 0x0
1725	 1D8	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x1
1726	 1DA	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0x0
1727	 1DB	PUSH2	0060	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x60
1728	 1DE	MLOAD		 	  ;; # read from x3
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0xFF0
1729	 1DF	ADD		 	  ;; # ADDI 3
- stack 1: 0x538
- stack 0: 0xFF0
1730	 1E0	PUSH2	00C0	 	 
- stack 2: 0x538
- stack 1: 0xFF0
- stack 0: 0xC0
1731	 1E3	MSTORE		 	  ;; # store to x6
- stack 0: 0x538
1732	 1E4	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1733	 1E6	ADD		 	 
- stack 0: 0x53C
1734	 1E7	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1735	 1E8	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x18E0001016FFFF001ED014C022F0001024E00020268FFDC0100000D01B40000
1736	 1E9	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x18E0001016FFFF001ED014C022F0001024E00020268FFDC0100000D01B40000
- stack 0: 0xF0
1737	 1EB	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x18E
1738	 1EC	JUMP		 	 
- stack 0: 0x53C
1739	 18E	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x53C
1740	 18F	PUSH4	00001000	 	 
- stack 1: 0x53C
- stack 0: 0x1000
1741	 194	PUSH2	03A0	 	 
- stack 2: 0x53C
- stack 1: 0x1000
- stack 0: 0x3A0
1742	 197	MSTORE		 	  ;; # store to x29
- stack 0: 0x53C
1743	 198	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1744	 19A	ADD		 	 
- stack 0: 0x540
1745	 19B	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1746	 19C	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x16FFFF001ED014C022F0001024E00020268FFDC0100000D01B4000000860000
1747	 19D	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x16FFFF001ED014C022F0001024E00020268FFDC0100000D01B4000000860000
- stack 0: 0xF0
1748	 19F	SHR		 	 
- stack 1: 0x540
- stack 0: 0x16F
1749	 1A0	JUMP		 	 
- stack 0: 0x540
1750	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x540
1751	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1752	 171	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x16FFFF001ED014C022F0001024E00020268FFDC0100000D01B4000000860000
1753	 172	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x16FFFF001ED014C022F0001024E00020268FFDC0100000D01B4000000860000
- stack 0: 0xE0
1754	 174	SHR		 	 
- stack 1: 0x540
- stack 0: 0x16FFFF0
1755	 175	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x16FFFF0
- stack 0: 0xFFFF
1756	 178	AND		 	 
- stack 1: 0x540
- stack 0: 0xFFF0
1757	 179	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xFFF0
- stack 0: 0x1
1758	 17B	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1759	 17C	PUSH2	03A0	 	 
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
1760	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x1000
1761	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x540
- stack 0: 0xFF0
1762	 181	PUSH2	03A0	 	 
- stack 2: 0x540
- stack 1: 0xFF0
- stack 0: 0x3A0
1763	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x540
1764	 185	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1765	 187	ADD		 	 
- stack 0: 0x544
1766	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1767	 189	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x1ED014C022F0001024E00020268FFDC0100000D01B400000086000000950178
1768	 18A	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x1ED014C022F0001024E00020268FFDC0100000D01B400000086000000950178
- stack 0: 0xF0
1769	 18C	SHR		 	 
- stack 1: 0x544
- stack 0: 0x1ED
1770	 18D	JUMP		 	 
- stack 0: 0x544
1771	 1ED	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,14c(ignore imm)
- stack 0: 0x544
1772	 1EE	PUSH2	00C0	 	 
- stack 1: 0x544
- stack 0: 0xC0
1773	 1F1	MLOAD		 	  ;; # read from x6
- stack 1: 0x544
- stack 0: 0xFF0
1774	 1F2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
1775	 1F7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0xFF0
1776	 1F8	PUSH2	03A0	 	 
- stack 2: 0x544
- stack 1: 0xFF0
- stack 0: 0x3A0
1777	 1FB	MLOAD		 	  ;; # read from x29
- stack 2: 0x544
- stack 1: 0xFF0
- stack 0: 0xFF0
1778	 1FC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x544
- stack 2: 0xFF0
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
1779	 201	AND		 	  ;; # mask to 32 bits
- stack 2: 0x544
- stack 1: 0xFF0
- stack 0: 0xFF0
1780	 202	SUB		 	 
- stack 1: 0x544
- stack 0: 0x0
1781	 203	PUSH2	020B	 ;; _neq_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x20B
1782	 206	JUMPI		 	 
- stack 0: 0x544
1783	 207	PUSH2	0225	 ;; _neq_after_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 1: 0x544
- stack 0: 0x225
1784	 20A	JUMP		 	 
- stack 0: 0x544
1785	 225	JUMPDEST		 ;; _neq_after_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 0: 0x544
1786	 226	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1787	 228	ADD		 	 
- stack 0: 0x548
1788	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1789	 22A	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x22F0001024E00020268FFDC0100000D01B40000008600000095017800B40002
1790	 22B	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x22F0001024E00020268FFDC0100000D01B40000008600000095017800B40002
- stack 0: 0xF0
1791	 22D	SHR		 	 
- stack 1: 0x548
- stack 0: 0x22F
1792	 22E	JUMP		 	 
- stack 0: 0x548
1793	 22F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x548
1794	 230	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1795	 231	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x22F0001024E00020268FFDC0100000D01B40000008600000095017800B40002
1796	 232	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x22F0001024E00020268FFDC0100000D01B40000008600000095017800B40002
- stack 0: 0xE0
1797	 234	SHR		 	 
- stack 1: 0x548
- stack 0: 0x22F0001
1798	 235	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x22F0001
- stack 0: 0xFFFF
1799	 238	AND		 	 
- stack 1: 0x548
- stack 0: 0x1
1800	 239	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x1
1801	 23B	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x1
1802	 23C	PUSH2	0080	 	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x80
1803	 23F	MLOAD		 	  ;; # read from x4
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x1
1804	 240	ADD		 	  ;; # ADDI 4
- stack 1: 0x548
- stack 0: 0x2
1805	 241	PUSH2	0080	 	 
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0x80
1806	 244	MSTORE		 	  ;; # store to x4
- stack 0: 0x548
1807	 245	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1808	 247	ADD		 	 
- stack 0: 0x54C
1809	 248	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1810	 249	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x24E00020268FFDC0100000D01B40000008600000095017800B4000202AA0000
1811	 24A	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x24E00020268FFDC0100000D01B40000008600000095017800B4000202AA0000
- stack 0: 0xF0
1812	 24C	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x24E
1813	 24D	JUMP		 	 
- stack 0: 0x54C
1814	 24E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x54C
1815	 24F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1816	 250	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x24E00020268FFDC0100000D01B40000008600000095017800B4000202AA0000
1817	 251	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x24E00020268FFDC0100000D01B40000008600000095017800B4000202AA0000
- stack 0: 0xE0
1818	 253	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x24E0002
1819	 254	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x24E0002
- stack 0: 0xFFFF
1820	 257	AND		 	 
- stack 1: 0x54C
- stack 0: 0x2
1821	 258	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0x1
1822	 25A	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x2
1823	 25B	PUSH2	00A0	 	 
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0xA0
1824	 25E	MSTORE		 	  ;; # store to x5
- stack 0: 0x54C
1825	 25F	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1826	 261	ADD		 	 
- stack 0: 0x550
1827	 262	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1828	 263	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x268FFDC0100000D01B40000008600000095017800B4000202AA000001CE0000
1829	 264	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x268FFDC0100000D01B40000008600000095017800B4000202AA000001CE0000
- stack 0: 0xF0
1830	 266	SHR		 	 
- stack 1: 0x550
- stack 0: 0x268
1831	 267	JUMP		 	 
- stack 0: 0x550
1832	 268	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x550
1833	 269	PUSH2	0080	 	 
- stack 1: 0x550
- stack 0: 0x80
1834	 26C	MLOAD		 	  ;; # read from x4
- stack 1: 0x550
- stack 0: 0x2
1835	 26D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x550
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1836	 272	AND		 	  ;; # mask to 32 bits
- stack 1: 0x550
- stack 0: 0x2
1837	 273	PUSH2	00A0	 	 
- stack 2: 0x550
- stack 1: 0x2
- stack 0: 0xA0
1838	 276	MLOAD		 	  ;; # read from x5
- stack 2: 0x550
- stack 1: 0x2
- stack 0: 0x2
1839	 277	PUSH4	FFFFFFFF	 	 
- stack 3: 0x550
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1840	 27C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x550
- stack 1: 0x2
- stack 0: 0x2
1841	 27D	SUB		 	 
- stack 1: 0x550
- stack 0: 0x0
1842	 27E	PUSH2	0286	 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x286
1843	 281	JUMPI		 	 
- stack 0: 0x550
1844	 282	PUSH2	02A0	 ;; _neq_after_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 1: 0x550
- stack 0: 0x2A0
1845	 285	JUMP		 	 
- stack 0: 0x550
1846	 2A0	JUMPDEST		 ;; _neq_after_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 0: 0x550
1847	 2A1	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1848	 2A3	ADD		 	 
- stack 0: 0x554
1849	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1850	 2A5	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x100000D01B40000008600000095017800B4000202AA000001CE000001A1000F
1851	 2A6	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x100000D01B40000008600000095017800B4000202AA000001CE000001A1000F
- stack 0: 0xF0
1852	 2A8	SHR		 	 
- stack 1: 0x554
- stack 0: 0x100
1853	 2A9	JUMP		 	 
- stack 0: 0x554
1854	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x554
1855	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1856	 102	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x100000D01B40000008600000095017800B4000202AA000001CE000001A1000F
1857	 103	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x100000D01B40000008600000095017800B4000202AA000001CE000001A1000F
- stack 0: 0xE0
1858	 105	SHR		 	 
- stack 1: 0x554
- stack 0: 0x100000D
1859	 106	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x100000D
- stack 0: 0xFFFF
1860	 109	AND		 	 
- stack 1: 0x554
- stack 0: 0xD
1861	 10A	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0xD
- stack 0: 0x1
1862	 10C	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0xD
1863	 10D	PUSH2	0380	 	 
- stack 2: 0x554
- stack 1: 0xD
- stack 0: 0x380
1864	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x554
1865	 111	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1866	 113	ADD		 	 
- stack 0: 0x558
1867	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1868	 115	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1B40000008600000095017800B4000202AA000001CE000001A1000F016F000F
1869	 116	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x1B40000008600000095017800B4000202AA000001CE000001A1000F016F000F
- stack 0: 0xF0
1870	 118	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1B4
1871	 119	JUMP		 	 
- stack 0: 0x558
1872	 1B4	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x558
1873	 1B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1874	 1B6	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x1B40000008600000095017800B4000202AA000001CE000001A1000F016F000F
1875	 1B7	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x1B40000008600000095017800B4000202AA000001CE000001A1000F016F000F
- stack 0: 0xE0
1876	 1B9	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1B40000
1877	 1BA	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x1B40000
- stack 0: 0xFFFF
1878	 1BD	AND		 	 
- stack 1: 0x558
- stack 0: 0x0
1879	 1BE	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x1
1880	 1C0	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x0
1881	 1C1	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x80
1882	 1C4	MSTORE		 	  ;; # store to x4
- stack 0: 0x558
1883	 1C5	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1884	 1C7	ADD		 	 
- stack 0: 0x55C
1885	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1886	 1C9	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x8600000095017800B4000202AA000001CE000001A1000F016F000F01ED0118
1887	 1CA	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x8600000095017800B4000202AA000001CE000001A1000F016F000F01ED0118
- stack 0: 0xF0
1888	 1CC	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x86
1889	 1CD	JUMP		 	 
- stack 0: 0x55C
1890	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x55C
1891	 87	DUP1		 	 
- stack 1: 0x55C
- stack 0: 0x55C
1892	 88	PUSH2	0020	 	 
- stack 2: 0x55C
- stack 1: 0x55C
- stack 0: 0x20
1893	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x55C
1894	 8C	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1895	 8E	ADD		 	 
- stack 0: 0x560
1896	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1897	 90	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x95017800B4000202AA000001CE000001A1000F016F000F01ED0118022F0001
1898	 91	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x95017800B4000202AA000001CE000001A1000F016F000F01ED0118022F0001
- stack 0: 0xF0
1899	 93	SHR		 	 
- stack 1: 0x560
- stack 0: 0x95
1900	 94	JUMP		 	 
- stack 0: 0x560
1901	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x560
1902	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1903	 97	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x95017800B4000202AA000001CE000001A1000F016F000F01ED0118022F0001
1904	 98	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x95017800B4000202AA000001CE000001A1000F016F000F01ED0118022F0001
- stack 0: 0xE0
1905	 9A	SHR		 	 
- stack 1: 0x560
- stack 0: 0x950178
1906	 9B	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x950178
- stack 0: 0xFFFF
1907	 9E	AND		 	 
- stack 1: 0x560
- stack 0: 0x178
1908	 9F	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x178
- stack 0: 0x1
1909	 A1	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x178
1910	 A2	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0x178
- stack 0: 0x20
1911	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x560
- stack 1: 0x178
- stack 0: 0x55C
1912	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x560
- stack 0: 0x6D4
1913	 A7	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0x6D4
- stack 0: 0x20
1914	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x560
1915	 AB	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1916	 AD	ADD		 	 
- stack 0: 0x564
1917	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1918	 AF	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xB4000202AA000001CE000001A1000F016F000F01ED0118022F0001024E0002
1919	 B0	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0xB4000202AA000001CE000001A1000F016F000F01ED0118022F0001024E0002
- stack 0: 0xF0
1920	 B2	SHR		 	 
- stack 1: 0x564
- stack 0: 0xB4
1921	 B3	JUMP		 	 
- stack 0: 0x564
1922	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x564
1923	 B5	PUSH2	0020	 	 
- stack 1: 0x564
- stack 0: 0x20
1924	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x564
- stack 0: 0x6D4
1925	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x564
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFF
1926	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x564
- stack 0: 0x6D4
1927	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x564
- stack 1: 0x6D4
- stack 0: 0x564
1928	 C0	MLOAD		 	 
- stack 2: 0x564
- stack 1: 0x6D4
- stack 0: 0xB4000202AA000001CE000001A1000F016F000F01ED0118022F0001024E0002
1929	 C1	PUSH1	E0	 	 
- stack 3: 0x564
- stack 2: 0x6D4
- stack 1: 0xB4000202AA000001CE000001A1000F016F000F01ED0118022F0001024E0002
- stack 0: 0xE0
1930	 C3	SHR		 	 
- stack 2: 0x564
- stack 1: 0x6D4
- stack 0: 0xB40002
1931	 C4	PUSH2	FFFF	 	 
- stack 3: 0x564
- stack 2: 0x6D4
- stack 1: 0xB40002
- stack 0: 0xFFFF
1932	 C7	AND		 	 
- stack 2: 0x564
- stack 1: 0x6D4
- stack 0: 0x2
1933	 C8	PUSH1	01	 	 
- stack 3: 0x564
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0x1
1934	 CA	SIGNEXTEND		 	 
- stack 2: 0x564
- stack 1: 0x6D4
- stack 0: 0x2
1935	 CB	ADD		 	 
- stack 1: 0x564
- stack 0: 0x6D6
1936	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x564
- stack 1: 0x6D6
- stack 0: 0xFFFFFFFF
1937	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x564
- stack 0: 0x6D6
1938	 D2	PUSH1	02	 	 
- stack 2: 0x564
- stack 1: 0x6D6
- stack 0: 0x2
1939	 D4	XOR		 	 
- stack 1: 0x564
- stack 0: 0x6D4
1940	 D5	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
1941	 D6	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
1942	 D8	SHR		 	 
- stack 1: 0x564
- stack 0: 0xF00F
1943	 D9	PUSH2	0060	 	 
- stack 2: 0x564
- stack 1: 0xF00F
- stack 0: 0x60
1944	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x564
1945	 DD	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1946	 DF	ADD		 	 
- stack 0: 0x568
1947	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1948	 E1	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x2AA000001CE000001A1000F016F000F01ED0118022F0001024E00020268FFD8
1949	 E2	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x2AA000001CE000001A1000F016F000F01ED0118022F0001024E00020268FFD8
- stack 0: 0xF0
1950	 E4	SHR		 	 
- stack 1: 0x568
- stack 0: 0x2AA
1951	 E5	JUMP		 	 
- stack 0: 0x568
1952	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x568
1953	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1954	 2AC	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x2AA000001CE000001A1000F016F000F01ED0118022F0001024E00020268FFD8
1955	 2AD	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x2AA000001CE000001A1000F016F000F01ED0118022F0001024E00020268FFD8
- stack 0: 0xE0
1956	 2AF	SHR		 	 
- stack 1: 0x568
- stack 0: 0x2AA0000
1957	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x2AA0000
- stack 0: 0xFFFF
1958	 2B3	AND		 	 
- stack 1: 0x568
- stack 0: 0x0
1959	 2B4	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x1
1960	 2B6	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x0
1961	 2B7	POP		 	 
- stack 0: 0x568
1962	 2B8	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1963	 2BA	ADD		 	 
- stack 0: 0x56C
1964	 2BB	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1965	 2BC	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x1CE000001A1000F016F000F01ED0118022F0001024E00020268FFD80100000E
1966	 2BD	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x1CE000001A1000F016F000F01ED0118022F0001024E00020268FFD80100000E
- stack 0: 0xF0
1967	 2BF	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x1CE
1968	 2C0	JUMP		 	 
- stack 0: 0x56C
1969	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x56C
1970	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
1971	 1D0	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x1CE000001A1000F016F000F01ED0118022F0001024E00020268FFD80100000E
1972	 1D1	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x1CE000001A1000F016F000F01ED0118022F0001024E00020268FFD80100000E
- stack 0: 0xE0
1973	 1D3	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x1CE0000
1974	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x1CE0000
- stack 0: 0xFFFF
1975	 1D7	AND		 	 
- stack 1: 0x56C
- stack 0: 0x0
1976	 1D8	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x1
1977	 1DA	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x0
1978	 1DB	PUSH2	0060	 	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x60
1979	 1DE	MLOAD		 	  ;; # read from x3
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0xF00F
1980	 1DF	ADD		 	  ;; # ADDI 3
- stack 1: 0x56C
- stack 0: 0xF00F
1981	 1E0	PUSH2	00C0	 	 
- stack 2: 0x56C
- stack 1: 0xF00F
- stack 0: 0xC0
1982	 1E3	MSTORE		 	  ;; # store to x6
- stack 0: 0x56C
1983	 1E4	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1984	 1E6	ADD		 	 
- stack 0: 0x570
1985	 1E7	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1986	 1E8	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x1A1000F016F000F01ED0118022F0001024E00020268FFD80100000E01B40000
1987	 1E9	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x1A1000F016F000F01ED0118022F0001024E00020268FFD80100000E01B40000
- stack 0: 0xF0
1988	 1EB	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1A1
1989	 1EC	JUMP		 	 
- stack 0: 0x570
1990	 1A1	JUMPDEST		 ;; __riscvimpl_LUI_feb7	  ;; # instr: lui t4,0xf(ignore imm)
- stack 0: 0x570
1991	 1A2	PUSH4	0000f000	 	 
- stack 1: 0x570
- stack 0: 0xF000
1992	 1A7	PUSH2	03A0	 	 
- stack 2: 0x570
- stack 1: 0xF000
- stack 0: 0x3A0
1993	 1AA	MSTORE		 	  ;; # store to x29
- stack 0: 0x570
1994	 1AB	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1995	 1AD	ADD		 	 
- stack 0: 0x574
1996	 1AE	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1997	 1AF	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x16F000F01ED0118022F0001024E00020268FFD80100000E01B4000000860000
1998	 1B0	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x16F000F01ED0118022F0001024E00020268FFD80100000E01B4000000860000
- stack 0: 0xF0
1999	 1B2	SHR		 	 
- stack 1: 0x574
- stack 0: 0x16F
2000	 1B3	JUMP		 	 
- stack 0: 0x574
2001	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x574
2002	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
2003	 171	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x16F000F01ED0118022F0001024E00020268FFD80100000E01B4000000860000
2004	 172	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x16F000F01ED0118022F0001024E00020268FFD80100000E01B4000000860000
- stack 0: 0xE0
2005	 174	SHR		 	 
- stack 1: 0x574
- stack 0: 0x16F000F
2006	 175	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x16F000F
- stack 0: 0xFFFF
2007	 178	AND		 	 
- stack 1: 0x574
- stack 0: 0xF
2008	 179	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0xF
- stack 0: 0x1
2009	 17B	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0xF
2010	 17C	PUSH2	03A0	 	 
- stack 2: 0x574
- stack 1: 0xF
- stack 0: 0x3A0
2011	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x574
- stack 1: 0xF
- stack 0: 0xF000
2012	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x574
- stack 0: 0xF00F
2013	 181	PUSH2	03A0	 	 
- stack 2: 0x574
- stack 1: 0xF00F
- stack 0: 0x3A0
2014	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x574
2015	 185	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2016	 187	ADD		 	 
- stack 0: 0x578
2017	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2018	 189	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1ED0118022F0001024E00020268FFD80100000E01B400000086000000950140
2019	 18A	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1ED0118022F0001024E00020268FFD80100000E01B400000086000000950140
- stack 0: 0xF0
2020	 18C	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1ED
2021	 18D	JUMP		 	 
- stack 0: 0x578
2022	 1ED	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,14c(ignore imm)
- stack 0: 0x578
2023	 1EE	PUSH2	00C0	 	 
- stack 1: 0x578
- stack 0: 0xC0
2024	 1F1	MLOAD		 	  ;; # read from x6
- stack 1: 0x578
- stack 0: 0xF00F
2025	 1F2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x578
- stack 1: 0xF00F
- stack 0: 0xFFFFFFFF
2026	 1F7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x578
- stack 0: 0xF00F
2027	 1F8	PUSH2	03A0	 	 
- stack 2: 0x578
- stack 1: 0xF00F
- stack 0: 0x3A0
2028	 1FB	MLOAD		 	  ;; # read from x29
- stack 2: 0x578
- stack 1: 0xF00F
- stack 0: 0xF00F
2029	 1FC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x578
- stack 2: 0xF00F
- stack 1: 0xF00F
- stack 0: 0xFFFFFFFF
2030	 201	AND		 	  ;; # mask to 32 bits
- stack 2: 0x578
- stack 1: 0xF00F
- stack 0: 0xF00F
2031	 202	SUB		 	 
- stack 1: 0x578
- stack 0: 0x0
2032	 203	PUSH2	020B	 ;; _neq_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x20B
2033	 206	JUMPI		 	 
- stack 0: 0x578
2034	 207	PUSH2	0225	 ;; _neq_after_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 1: 0x578
- stack 0: 0x225
2035	 20A	JUMP		 	 
- stack 0: 0x578
2036	 225	JUMPDEST		 ;; _neq_after_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 0: 0x578
2037	 226	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2038	 228	ADD		 	 
- stack 0: 0x57C
2039	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2040	 22A	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x22F0001024E00020268FFD80100000E01B40000008600000095014000B40002
2041	 22B	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x22F0001024E00020268FFD80100000E01B40000008600000095014000B40002
- stack 0: 0xF0
2042	 22D	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x22F
2043	 22E	JUMP		 	 
- stack 0: 0x57C
2044	 22F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x57C
2045	 230	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2046	 231	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x22F0001024E00020268FFD80100000E01B40000008600000095014000B40002
2047	 232	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x22F0001024E00020268FFD80100000E01B40000008600000095014000B40002
- stack 0: 0xE0
2048	 234	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x22F0001
2049	 235	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x22F0001
- stack 0: 0xFFFF
2050	 238	AND		 	 
- stack 1: 0x57C
- stack 0: 0x1
2051	 239	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x1
- stack 0: 0x1
2052	 23B	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x1
2053	 23C	PUSH2	0080	 	 
- stack 2: 0x57C
- stack 1: 0x1
- stack 0: 0x80
2054	 23F	MLOAD		 	  ;; # read from x4
- stack 2: 0x57C
- stack 1: 0x1
- stack 0: 0x0
2055	 240	ADD		 	  ;; # ADDI 4
- stack 1: 0x57C
- stack 0: 0x1
2056	 241	PUSH2	0080	 	 
- stack 2: 0x57C
- stack 1: 0x1
- stack 0: 0x80
2057	 244	MSTORE		 	  ;; # store to x4
- stack 0: 0x57C
2058	 245	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2059	 247	ADD		 	 
- stack 0: 0x580
2060	 248	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2061	 249	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x24E00020268FFD80100000E01B40000008600000095014000B4000202AA0000
2062	 24A	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x24E00020268FFD80100000E01B40000008600000095014000B4000202AA0000
- stack 0: 0xF0
2063	 24C	SHR		 	 
- stack 1: 0x580
- stack 0: 0x24E
2064	 24D	JUMP		 	 
- stack 0: 0x580
2065	 24E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x580
2066	 24F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2067	 250	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x24E00020268FFD80100000E01B40000008600000095014000B4000202AA0000
2068	 251	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x24E00020268FFD80100000E01B40000008600000095014000B4000202AA0000
- stack 0: 0xE0
2069	 253	SHR		 	 
- stack 1: 0x580
- stack 0: 0x24E0002
2070	 254	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x24E0002
- stack 0: 0xFFFF
2071	 257	AND		 	 
- stack 1: 0x580
- stack 0: 0x2
2072	 258	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0x1
2073	 25A	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x2
2074	 25B	PUSH2	00A0	 	 
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0xA0
2075	 25E	MSTORE		 	  ;; # store to x5
- stack 0: 0x580
2076	 25F	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2077	 261	ADD		 	 
- stack 0: 0x584
2078	 262	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2079	 263	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x268FFD80100000E01B40000008600000095014000B4000202AA000002AA0000
2080	 264	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x268FFD80100000E01B40000008600000095014000B4000202AA000002AA0000
- stack 0: 0xF0
2081	 266	SHR		 	 
- stack 1: 0x584
- stack 0: 0x268
2082	 267	JUMP		 	 
- stack 0: 0x584
2083	 268	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x584
2084	 269	PUSH2	0080	 	 
- stack 1: 0x584
- stack 0: 0x80
2085	 26C	MLOAD		 	  ;; # read from x4
- stack 1: 0x584
- stack 0: 0x1
2086	 26D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2087	 272	AND		 	  ;; # mask to 32 bits
- stack 1: 0x584
- stack 0: 0x1
2088	 273	PUSH2	00A0	 	 
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0xA0
2089	 276	MLOAD		 	  ;; # read from x5
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x2
2090	 277	PUSH4	FFFFFFFF	 	 
- stack 3: 0x584
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2091	 27C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x2
2092	 27D	SUB		 	 
- stack 1: 0x584
- stack 0: 0x1
2093	 27E	PUSH2	0286	 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 2: 0x584
- stack 1: 0x1
- stack 0: 0x286
2094	 281	JUMPI		 	 
- stack 0: 0x584
2095	 286	JUMPDEST		 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 0: 0x584
2096	 287	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2097	 288	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x268FFD80100000E01B40000008600000095014000B4000202AA000002AA0000
2098	 289	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x268FFD80100000E01B40000008600000095014000B4000202AA000002AA0000
- stack 0: 0xE0
2099	 28B	SHR		 	 
- stack 1: 0x584
- stack 0: 0x268FFD8
2100	 28C	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x268FFD8
- stack 0: 0xFFFF
2101	 28F	AND		 	 
- stack 1: 0x584
- stack 0: 0xFFD8
2102	 290	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0xFFD8
- stack 0: 0x1
2103	 292	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
2104	 293	ADD		 	 
- stack 0: 0x55C
2105	 294	PUSH4	FFFFFFFF	 	 
- stack 1: 0x55C
- stack 0: 0xFFFFFFFF
2106	 299	AND		 	  ;; # mask to 32 bits
- stack 0: 0x55C
2107	 29A	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
2108	 29B	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x8600000095017800B4000202AA000001CE000001A1000F016F000F01ED0118
2109	 29C	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x8600000095017800B4000202AA000001CE000001A1000F016F000F01ED0118
- stack 0: 0xF0
2110	 29E	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x86
2111	 29F	JUMP		 	 
- stack 0: 0x55C
2112	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x55C
2113	 87	DUP1		 	 
- stack 1: 0x55C
- stack 0: 0x55C
2114	 88	PUSH2	0020	 	 
- stack 2: 0x55C
- stack 1: 0x55C
- stack 0: 0x20
2115	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x55C
2116	 8C	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
2117	 8E	ADD		 	 
- stack 0: 0x560
2118	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
2119	 90	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x95017800B4000202AA000001CE000001A1000F016F000F01ED0118022F0001
2120	 91	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x95017800B4000202AA000001CE000001A1000F016F000F01ED0118022F0001
- stack 0: 0xF0
2121	 93	SHR		 	 
- stack 1: 0x560
- stack 0: 0x95
2122	 94	JUMP		 	 
- stack 0: 0x560
2123	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x560
2124	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
2125	 97	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x95017800B4000202AA000001CE000001A1000F016F000F01ED0118022F0001
2126	 98	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x95017800B4000202AA000001CE000001A1000F016F000F01ED0118022F0001
- stack 0: 0xE0
2127	 9A	SHR		 	 
- stack 1: 0x560
- stack 0: 0x950178
2128	 9B	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x950178
- stack 0: 0xFFFF
2129	 9E	AND		 	 
- stack 1: 0x560
- stack 0: 0x178
2130	 9F	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x178
- stack 0: 0x1
2131	 A1	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x178
2132	 A2	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0x178
- stack 0: 0x20
2133	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x560
- stack 1: 0x178
- stack 0: 0x55C
2134	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x560
- stack 0: 0x6D4
2135	 A7	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0x6D4
- stack 0: 0x20
2136	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x560
2137	 AB	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
2138	 AD	ADD		 	 
- stack 0: 0x564
2139	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2140	 AF	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xB4000202AA000001CE000001A1000F016F000F01ED0118022F0001024E0002
2141	 B0	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0xB4000202AA000001CE000001A1000F016F000F01ED0118022F0001024E0002
- stack 0: 0xF0
2142	 B2	SHR		 	 
- stack 1: 0x564
- stack 0: 0xB4
2143	 B3	JUMP		 	 
- stack 0: 0x564
2144	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x564
2145	 B5	PUSH2	0020	 	 
- stack 1: 0x564
- stack 0: 0x20
2146	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x564
- stack 0: 0x6D4
2147	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x564
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFF
2148	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x564
- stack 0: 0x6D4
2149	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x564
- stack 1: 0x6D4
- stack 0: 0x564
2150	 C0	MLOAD		 	 
- stack 2: 0x564
- stack 1: 0x6D4
- stack 0: 0xB4000202AA000001CE000001A1000F016F000F01ED0118022F0001024E0002
2151	 C1	PUSH1	E0	 	 
- stack 3: 0x564
- stack 2: 0x6D4
- stack 1: 0xB4000202AA000001CE000001A1000F016F000F01ED0118022F0001024E0002
- stack 0: 0xE0
2152	 C3	SHR		 	 
- stack 2: 0x564
- stack 1: 0x6D4
- stack 0: 0xB40002
2153	 C4	PUSH2	FFFF	 	 
- stack 3: 0x564
- stack 2: 0x6D4
- stack 1: 0xB40002
- stack 0: 0xFFFF
2154	 C7	AND		 	 
- stack 2: 0x564
- stack 1: 0x6D4
- stack 0: 0x2
2155	 C8	PUSH1	01	 	 
- stack 3: 0x564
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0x1
2156	 CA	SIGNEXTEND		 	 
- stack 2: 0x564
- stack 1: 0x6D4
- stack 0: 0x2
2157	 CB	ADD		 	 
- stack 1: 0x564
- stack 0: 0x6D6
2158	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x564
- stack 1: 0x6D6
- stack 0: 0xFFFFFFFF
2159	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x564
- stack 0: 0x6D6
2160	 D2	PUSH1	02	 	 
- stack 2: 0x564
- stack 1: 0x6D6
- stack 0: 0x2
2161	 D4	XOR		 	 
- stack 1: 0x564
- stack 0: 0x6D4
2162	 D5	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
2163	 D6	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
2164	 D8	SHR		 	 
- stack 1: 0x564
- stack 0: 0xF00F
2165	 D9	PUSH2	0060	 	 
- stack 2: 0x564
- stack 1: 0xF00F
- stack 0: 0x60
2166	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x564
2167	 DD	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2168	 DF	ADD		 	 
- stack 0: 0x568
2169	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2170	 E1	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x2AA000001CE000001A1000F016F000F01ED0118022F0001024E00020268FFD8
2171	 E2	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x2AA000001CE000001A1000F016F000F01ED0118022F0001024E00020268FFD8
- stack 0: 0xF0
2172	 E4	SHR		 	 
- stack 1: 0x568
- stack 0: 0x2AA
2173	 E5	JUMP		 	 
- stack 0: 0x568
2174	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x568
2175	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
2176	 2AC	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x2AA000001CE000001A1000F016F000F01ED0118022F0001024E00020268FFD8
2177	 2AD	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x2AA000001CE000001A1000F016F000F01ED0118022F0001024E00020268FFD8
- stack 0: 0xE0
2178	 2AF	SHR		 	 
- stack 1: 0x568
- stack 0: 0x2AA0000
2179	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x2AA0000
- stack 0: 0xFFFF
2180	 2B3	AND		 	 
- stack 1: 0x568
- stack 0: 0x0
2181	 2B4	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x1
2182	 2B6	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x0
2183	 2B7	POP		 	 
- stack 0: 0x568
2184	 2B8	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2185	 2BA	ADD		 	 
- stack 0: 0x56C
2186	 2BB	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2187	 2BC	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x1CE000001A1000F016F000F01ED0118022F0001024E00020268FFD80100000E
2188	 2BD	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x1CE000001A1000F016F000F01ED0118022F0001024E00020268FFD80100000E
- stack 0: 0xF0
2189	 2BF	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x1CE
2190	 2C0	JUMP		 	 
- stack 0: 0x56C
2191	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x56C
2192	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
2193	 1D0	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x1CE000001A1000F016F000F01ED0118022F0001024E00020268FFD80100000E
2194	 1D1	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x1CE000001A1000F016F000F01ED0118022F0001024E00020268FFD80100000E
- stack 0: 0xE0
2195	 1D3	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x1CE0000
2196	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x1CE0000
- stack 0: 0xFFFF
2197	 1D7	AND		 	 
- stack 1: 0x56C
- stack 0: 0x0
2198	 1D8	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x1
2199	 1DA	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x0
2200	 1DB	PUSH2	0060	 	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x60
2201	 1DE	MLOAD		 	  ;; # read from x3
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0xF00F
2202	 1DF	ADD		 	  ;; # ADDI 3
- stack 1: 0x56C
- stack 0: 0xF00F
2203	 1E0	PUSH2	00C0	 	 
- stack 2: 0x56C
- stack 1: 0xF00F
- stack 0: 0xC0
2204	 1E3	MSTORE		 	  ;; # store to x6
- stack 0: 0x56C
2205	 1E4	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2206	 1E6	ADD		 	 
- stack 0: 0x570
2207	 1E7	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2208	 1E8	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x1A1000F016F000F01ED0118022F0001024E00020268FFD80100000E01B40000
2209	 1E9	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x1A1000F016F000F01ED0118022F0001024E00020268FFD80100000E01B40000
- stack 0: 0xF0
2210	 1EB	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1A1
2211	 1EC	JUMP		 	 
- stack 0: 0x570
2212	 1A1	JUMPDEST		 ;; __riscvimpl_LUI_feb7	  ;; # instr: lui t4,0xf(ignore imm)
- stack 0: 0x570
2213	 1A2	PUSH4	0000f000	 	 
- stack 1: 0x570
- stack 0: 0xF000
2214	 1A7	PUSH2	03A0	 	 
- stack 2: 0x570
- stack 1: 0xF000
- stack 0: 0x3A0
2215	 1AA	MSTORE		 	  ;; # store to x29
- stack 0: 0x570
2216	 1AB	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2217	 1AD	ADD		 	 
- stack 0: 0x574
2218	 1AE	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2219	 1AF	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x16F000F01ED0118022F0001024E00020268FFD80100000E01B4000000860000
2220	 1B0	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x16F000F01ED0118022F0001024E00020268FFD80100000E01B4000000860000
- stack 0: 0xF0
2221	 1B2	SHR		 	 
- stack 1: 0x574
- stack 0: 0x16F
2222	 1B3	JUMP		 	 
- stack 0: 0x574
2223	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x574
2224	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
2225	 171	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x16F000F01ED0118022F0001024E00020268FFD80100000E01B4000000860000
2226	 172	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x16F000F01ED0118022F0001024E00020268FFD80100000E01B4000000860000
- stack 0: 0xE0
2227	 174	SHR		 	 
- stack 1: 0x574
- stack 0: 0x16F000F
2228	 175	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x16F000F
- stack 0: 0xFFFF
2229	 178	AND		 	 
- stack 1: 0x574
- stack 0: 0xF
2230	 179	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0xF
- stack 0: 0x1
2231	 17B	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0xF
2232	 17C	PUSH2	03A0	 	 
- stack 2: 0x574
- stack 1: 0xF
- stack 0: 0x3A0
2233	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x574
- stack 1: 0xF
- stack 0: 0xF000
2234	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x574
- stack 0: 0xF00F
2235	 181	PUSH2	03A0	 	 
- stack 2: 0x574
- stack 1: 0xF00F
- stack 0: 0x3A0
2236	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x574
2237	 185	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2238	 187	ADD		 	 
- stack 0: 0x578
2239	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2240	 189	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1ED0118022F0001024E00020268FFD80100000E01B400000086000000950140
2241	 18A	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1ED0118022F0001024E00020268FFD80100000E01B400000086000000950140
- stack 0: 0xF0
2242	 18C	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1ED
2243	 18D	JUMP		 	 
- stack 0: 0x578
2244	 1ED	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,14c(ignore imm)
- stack 0: 0x578
2245	 1EE	PUSH2	00C0	 	 
- stack 1: 0x578
- stack 0: 0xC0
2246	 1F1	MLOAD		 	  ;; # read from x6
- stack 1: 0x578
- stack 0: 0xF00F
2247	 1F2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x578
- stack 1: 0xF00F
- stack 0: 0xFFFFFFFF
2248	 1F7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x578
- stack 0: 0xF00F
2249	 1F8	PUSH2	03A0	 	 
- stack 2: 0x578
- stack 1: 0xF00F
- stack 0: 0x3A0
2250	 1FB	MLOAD		 	  ;; # read from x29
- stack 2: 0x578
- stack 1: 0xF00F
- stack 0: 0xF00F
2251	 1FC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x578
- stack 2: 0xF00F
- stack 1: 0xF00F
- stack 0: 0xFFFFFFFF
2252	 201	AND		 	  ;; # mask to 32 bits
- stack 2: 0x578
- stack 1: 0xF00F
- stack 0: 0xF00F
2253	 202	SUB		 	 
- stack 1: 0x578
- stack 0: 0x0
2254	 203	PUSH2	020B	 ;; _neq_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x20B
2255	 206	JUMPI		 	 
- stack 0: 0x578
2256	 207	PUSH2	0225	 ;; _neq_after_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 1: 0x578
- stack 0: 0x225
2257	 20A	JUMP		 	 
- stack 0: 0x578
2258	 225	JUMPDEST		 ;; _neq_after_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 0: 0x578
2259	 226	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2260	 228	ADD		 	 
- stack 0: 0x57C
2261	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2262	 22A	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x22F0001024E00020268FFD80100000E01B40000008600000095014000B40002
2263	 22B	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x22F0001024E00020268FFD80100000E01B40000008600000095014000B40002
- stack 0: 0xF0
2264	 22D	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x22F
2265	 22E	JUMP		 	 
- stack 0: 0x57C
2266	 22F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x57C
2267	 230	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2268	 231	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x22F0001024E00020268FFD80100000E01B40000008600000095014000B40002
2269	 232	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x22F0001024E00020268FFD80100000E01B40000008600000095014000B40002
- stack 0: 0xE0
2270	 234	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x22F0001
2271	 235	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x22F0001
- stack 0: 0xFFFF
2272	 238	AND		 	 
- stack 1: 0x57C
- stack 0: 0x1
2273	 239	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x1
- stack 0: 0x1
2274	 23B	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x1
2275	 23C	PUSH2	0080	 	 
- stack 2: 0x57C
- stack 1: 0x1
- stack 0: 0x80
2276	 23F	MLOAD		 	  ;; # read from x4
- stack 2: 0x57C
- stack 1: 0x1
- stack 0: 0x1
2277	 240	ADD		 	  ;; # ADDI 4
- stack 1: 0x57C
- stack 0: 0x2
2278	 241	PUSH2	0080	 	 
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0x80
2279	 244	MSTORE		 	  ;; # store to x4
- stack 0: 0x57C
2280	 245	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2281	 247	ADD		 	 
- stack 0: 0x580
2282	 248	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2283	 249	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x24E00020268FFD80100000E01B40000008600000095014000B4000202AA0000
2284	 24A	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x24E00020268FFD80100000E01B40000008600000095014000B4000202AA0000
- stack 0: 0xF0
2285	 24C	SHR		 	 
- stack 1: 0x580
- stack 0: 0x24E
2286	 24D	JUMP		 	 
- stack 0: 0x580
2287	 24E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x580
2288	 24F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2289	 250	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x24E00020268FFD80100000E01B40000008600000095014000B4000202AA0000
2290	 251	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x24E00020268FFD80100000E01B40000008600000095014000B4000202AA0000
- stack 0: 0xE0
2291	 253	SHR		 	 
- stack 1: 0x580
- stack 0: 0x24E0002
2292	 254	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x24E0002
- stack 0: 0xFFFF
2293	 257	AND		 	 
- stack 1: 0x580
- stack 0: 0x2
2294	 258	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0x1
2295	 25A	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x2
2296	 25B	PUSH2	00A0	 	 
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0xA0
2297	 25E	MSTORE		 	  ;; # store to x5
- stack 0: 0x580
2298	 25F	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2299	 261	ADD		 	 
- stack 0: 0x584
2300	 262	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2301	 263	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x268FFD80100000E01B40000008600000095014000B4000202AA000002AA0000
2302	 264	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x268FFD80100000E01B40000008600000095014000B4000202AA000002AA0000
- stack 0: 0xF0
2303	 266	SHR		 	 
- stack 1: 0x584
- stack 0: 0x268
2304	 267	JUMP		 	 
- stack 0: 0x584
2305	 268	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x584
2306	 269	PUSH2	0080	 	 
- stack 1: 0x584
- stack 0: 0x80
2307	 26C	MLOAD		 	  ;; # read from x4
- stack 1: 0x584
- stack 0: 0x2
2308	 26D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x584
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2309	 272	AND		 	  ;; # mask to 32 bits
- stack 1: 0x584
- stack 0: 0x2
2310	 273	PUSH2	00A0	 	 
- stack 2: 0x584
- stack 1: 0x2
- stack 0: 0xA0
2311	 276	MLOAD		 	  ;; # read from x5
- stack 2: 0x584
- stack 1: 0x2
- stack 0: 0x2
2312	 277	PUSH4	FFFFFFFF	 	 
- stack 3: 0x584
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2313	 27C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x584
- stack 1: 0x2
- stack 0: 0x2
2314	 27D	SUB		 	 
- stack 1: 0x584
- stack 0: 0x0
2315	 27E	PUSH2	0286	 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x286
2316	 281	JUMPI		 	 
- stack 0: 0x584
2317	 282	PUSH2	02A0	 ;; _neq_after_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 1: 0x584
- stack 0: 0x2A0
2318	 285	JUMP		 	 
- stack 0: 0x584
2319	 2A0	JUMPDEST		 ;; _neq_after_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 0: 0x584
2320	 2A1	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2321	 2A3	ADD		 	 
- stack 0: 0x588
2322	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2323	 2A5	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x100000E01B40000008600000095014000B4000202AA000002AA000001CE0000
2324	 2A6	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x100000E01B40000008600000095014000B4000202AA000002AA000001CE0000
- stack 0: 0xF0
2325	 2A8	SHR		 	 
- stack 1: 0x588
- stack 0: 0x100
2326	 2A9	JUMP		 	 
- stack 0: 0x588
2327	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x588
2328	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2329	 102	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x100000E01B40000008600000095014000B4000202AA000002AA000001CE0000
2330	 103	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x100000E01B40000008600000095014000B4000202AA000002AA000001CE0000
- stack 0: 0xE0
2331	 105	SHR		 	 
- stack 1: 0x588
- stack 0: 0x100000E
2332	 106	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x100000E
- stack 0: 0xFFFF
2333	 109	AND		 	 
- stack 1: 0x588
- stack 0: 0xE
2334	 10A	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0xE
- stack 0: 0x1
2335	 10C	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0xE
2336	 10D	PUSH2	0380	 	 
- stack 2: 0x588
- stack 1: 0xE
- stack 0: 0x380
2337	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x588
2338	 111	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2339	 113	ADD		 	 
- stack 0: 0x58C
2340	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2341	 115	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1B40000008600000095014000B4000202AA000002AA000001CE0000015C0010
2342	 116	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x1B40000008600000095014000B4000202AA000002AA000001CE0000015C0010
- stack 0: 0xF0
2343	 118	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x1B4
2344	 119	JUMP		 	 
- stack 0: 0x58C
2345	 1B4	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x58C
2346	 1B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2347	 1B6	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x1B40000008600000095014000B4000202AA000002AA000001CE0000015C0010
2348	 1B7	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x1B40000008600000095014000B4000202AA000002AA000001CE0000015C0010
- stack 0: 0xE0
2349	 1B9	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x1B40000
2350	 1BA	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x1B40000
- stack 0: 0xFFFF
2351	 1BD	AND		 	 
- stack 1: 0x58C
- stack 0: 0x0
2352	 1BE	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x1
2353	 1C0	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x0
2354	 1C1	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x80
2355	 1C4	MSTORE		 	  ;; # store to x4
- stack 0: 0x58C
2356	 1C5	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2357	 1C7	ADD		 	 
- stack 0: 0x590
2358	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2359	 1C9	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x8600000095014000B4000202AA000002AA000001CE0000015C0010016FFF00
2360	 1CA	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x8600000095014000B4000202AA000002AA000001CE0000015C0010016FFF00
- stack 0: 0xF0
2361	 1CC	SHR		 	 
- stack 1: 0x590
- stack 0: 0x86
2362	 1CD	JUMP		 	 
- stack 0: 0x590
2363	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x590
2364	 87	DUP1		 	 
- stack 1: 0x590
- stack 0: 0x590
2365	 88	PUSH2	0020	 	 
- stack 2: 0x590
- stack 1: 0x590
- stack 0: 0x20
2366	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x590
2367	 8C	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2368	 8E	ADD		 	 
- stack 0: 0x594
2369	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2370	 90	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x95014000B4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0
2371	 91	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x95014000B4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0
- stack 0: 0xF0
2372	 93	SHR		 	 
- stack 1: 0x594
- stack 0: 0x95
2373	 94	JUMP		 	 
- stack 0: 0x594
2374	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x594
2375	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2376	 97	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x95014000B4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0
2377	 98	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x95014000B4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0
- stack 0: 0xE0
2378	 9A	SHR		 	 
- stack 1: 0x594
- stack 0: 0x950140
2379	 9B	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x950140
- stack 0: 0xFFFF
2380	 9E	AND		 	 
- stack 1: 0x594
- stack 0: 0x140
2381	 9F	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x140
- stack 0: 0x1
2382	 A1	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x140
2383	 A2	PUSH2	0020	 	 
- stack 2: 0x594
- stack 1: 0x140
- stack 0: 0x20
2384	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x594
- stack 1: 0x140
- stack 0: 0x590
2385	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x594
- stack 0: 0x6D0
2386	 A7	PUSH2	0020	 	 
- stack 2: 0x594
- stack 1: 0x6D0
- stack 0: 0x20
2387	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x594
2388	 AB	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2389	 AD	ADD		 	 
- stack 0: 0x598
2390	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2391	 AF	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0xB4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001
2392	 B0	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0xB4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001
- stack 0: 0xF0
2393	 B2	SHR		 	 
- stack 1: 0x598
- stack 0: 0xB4
2394	 B3	JUMP		 	 
- stack 0: 0x598
2395	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x598
2396	 B5	PUSH2	0020	 	 
- stack 1: 0x598
- stack 0: 0x20
2397	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x598
- stack 0: 0x6D0
2398	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x598
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFF
2399	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x598
- stack 0: 0x6D0
2400	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x598
- stack 1: 0x6D0
- stack 0: 0x598
2401	 C0	MLOAD		 	 
- stack 2: 0x598
- stack 1: 0x6D0
- stack 0: 0xB4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001
2402	 C1	PUSH1	E0	 	 
- stack 3: 0x598
- stack 2: 0x6D0
- stack 1: 0xB4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001
- stack 0: 0xE0
2403	 C3	SHR		 	 
- stack 2: 0x598
- stack 1: 0x6D0
- stack 0: 0xB40002
2404	 C4	PUSH2	FFFF	 	 
- stack 3: 0x598
- stack 2: 0x6D0
- stack 1: 0xB40002
- stack 0: 0xFFFF
2405	 C7	AND		 	 
- stack 2: 0x598
- stack 1: 0x6D0
- stack 0: 0x2
2406	 C8	PUSH1	01	 	 
- stack 3: 0x598
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0x1
2407	 CA	SIGNEXTEND		 	 
- stack 2: 0x598
- stack 1: 0x6D0
- stack 0: 0x2
2408	 CB	ADD		 	 
- stack 1: 0x598
- stack 0: 0x6D2
2409	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x598
- stack 1: 0x6D2
- stack 0: 0xFFFFFFFF
2410	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x598
- stack 0: 0x6D2
2411	 D2	PUSH1	02	 	 
- stack 2: 0x598
- stack 1: 0x6D2
- stack 0: 0x2
2412	 D4	XOR		 	 
- stack 1: 0x598
- stack 0: 0x6D0
2413	 D5	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
2414	 D6	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
- stack 0: 0xF0
2415	 D8	SHR		 	 
- stack 1: 0x598
- stack 0: 0xFF00
2416	 D9	PUSH2	0060	 	 
- stack 2: 0x598
- stack 1: 0xFF00
- stack 0: 0x60
2417	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x598
2418	 DD	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2419	 DF	ADD		 	 
- stack 0: 0x59C
2420	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2421	 E1	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x2AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001024E0002
2422	 E2	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x2AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001024E0002
- stack 0: 0xF0
2423	 E4	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x2AA
2424	 E5	JUMP		 	 
- stack 0: 0x59C
2425	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x59C
2426	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2427	 2AC	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x2AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001024E0002
2428	 2AD	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x2AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001024E0002
- stack 0: 0xE0
2429	 2AF	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x2AA0000
2430	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x2AA0000
- stack 0: 0xFFFF
2431	 2B3	AND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2432	 2B4	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1
2433	 2B6	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2434	 2B7	POP		 	 
- stack 0: 0x59C
2435	 2B8	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2436	 2BA	ADD		 	 
- stack 0: 0x5A0
2437	 2BB	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2438	 2BC	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x2AA000001CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD4
2439	 2BD	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x2AA000001CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD4
- stack 0: 0xF0
2440	 2BF	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x2AA
2441	 2C0	JUMP		 	 
- stack 0: 0x5A0
2442	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A0
2443	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2444	 2AC	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x2AA000001CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD4
2445	 2AD	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x2AA000001CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD4
- stack 0: 0xE0
2446	 2AF	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x2AA0000
2447	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x2AA0000
- stack 0: 0xFFFF
2448	 2B3	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2449	 2B4	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x1
2450	 2B6	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2451	 2B7	POP		 	 
- stack 0: 0x5A0
2452	 2B8	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2453	 2BA	ADD		 	 
- stack 0: 0x5A4
2454	 2BB	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2455	 2BC	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD40100000F
2456	 2BD	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x1CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD40100000F
- stack 0: 0xF0
2457	 2BF	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1CE
2458	 2C0	JUMP		 	 
- stack 0: 0x5A4
2459	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5A4
2460	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2461	 1D0	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD40100000F
2462	 1D1	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x1CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD40100000F
- stack 0: 0xE0
2463	 1D3	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1CE0000
2464	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x1CE0000
- stack 0: 0xFFFF
2465	 1D7	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2466	 1D8	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2467	 1DA	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2468	 1DB	PUSH2	0060	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x60
2469	 1DE	MLOAD		 	  ;; # read from x3
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0xFF00
2470	 1DF	ADD		 	  ;; # ADDI 3
- stack 1: 0x5A4
- stack 0: 0xFF00
2471	 1E0	PUSH2	00C0	 	 
- stack 2: 0x5A4
- stack 1: 0xFF00
- stack 0: 0xC0
2472	 1E3	MSTORE		 	  ;; # store to x6
- stack 0: 0x5A4
2473	 1E4	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2474	 1E6	ADD		 	 
- stack 0: 0x5A8
2475	 1E7	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2476	 1E8	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x15C0010016FFF0001ED00E0022F0001024E00020268FFD40100000F01B40000
2477	 1E9	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x15C0010016FFF0001ED00E0022F0001024E00020268FFD40100000F01B40000
- stack 0: 0xF0
2478	 1EB	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x15C
2479	 1EC	JUMP		 	 
- stack 0: 0x5A8
2480	 15C	JUMPDEST		 ;; __riscvimpl_LUI_10eb7	  ;; # instr: lui t4,0x10(ignore imm)
- stack 0: 0x5A8
2481	 15D	PUSH4	00010000	 	 
- stack 1: 0x5A8
- stack 0: 0x10000
2482	 162	PUSH2	03A0	 	 
- stack 2: 0x5A8
- stack 1: 0x10000
- stack 0: 0x3A0
2483	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x5A8
2484	 166	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2485	 168	ADD		 	 
- stack 0: 0x5AC
2486	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2487	 16A	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x16FFF0001ED00E0022F0001024E00020268FFD40100000F01B4000000860000
2488	 16B	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x16FFF0001ED00E0022F0001024E00020268FFD40100000F01B4000000860000
- stack 0: 0xF0
2489	 16D	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x16F
2490	 16E	JUMP		 	 
- stack 0: 0x5AC
2491	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x5AC
2492	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2493	 171	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x16FFF0001ED00E0022F0001024E00020268FFD40100000F01B4000000860000
2494	 172	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x16FFF0001ED00E0022F0001024E00020268FFD40100000F01B4000000860000
- stack 0: 0xE0
2495	 174	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x16FFF00
2496	 175	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x16FFF00
- stack 0: 0xFFFF
2497	 178	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xFF00
2498	 179	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xFF00
- stack 0: 0x1
2499	 17B	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2500	 17C	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
2501	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x10000
2502	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x5AC
- stack 0: 0xFF00
2503	 181	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0xFF00
- stack 0: 0x3A0
2504	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x5AC
2505	 185	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2506	 187	ADD		 	 
- stack 0: 0x5B0
2507	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2508	 189	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1ED00E0022F0001024E00020268FFD40100000F01B40000008600000095010A
2509	 18A	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x1ED00E0022F0001024E00020268FFD40100000F01B40000008600000095010A
- stack 0: 0xF0
2510	 18C	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1ED
2511	 18D	JUMP		 	 
- stack 0: 0x5B0
2512	 1ED	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,14c(ignore imm)
- stack 0: 0x5B0
2513	 1EE	PUSH2	00C0	 	 
- stack 1: 0x5B0
- stack 0: 0xC0
2514	 1F1	MLOAD		 	  ;; # read from x6
- stack 1: 0x5B0
- stack 0: 0xFF00
2515	 1F2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B0
- stack 1: 0xFF00
- stack 0: 0xFFFFFFFF
2516	 1F7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B0
- stack 0: 0xFF00
2517	 1F8	PUSH2	03A0	 	 
- stack 2: 0x5B0
- stack 1: 0xFF00
- stack 0: 0x3A0
2518	 1FB	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B0
- stack 1: 0xFF00
- stack 0: 0xFF00
2519	 1FC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B0
- stack 2: 0xFF00
- stack 1: 0xFF00
- stack 0: 0xFFFFFFFF
2520	 201	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B0
- stack 1: 0xFF00
- stack 0: 0xFF00
2521	 202	SUB		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2522	 203	PUSH2	020B	 ;; _neq_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x20B
2523	 206	JUMPI		 	 
- stack 0: 0x5B0
2524	 207	PUSH2	0225	 ;; _neq_after_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 1: 0x5B0
- stack 0: 0x225
2525	 20A	JUMP		 	 
- stack 0: 0x5B0
2526	 225	JUMPDEST		 ;; _neq_after_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 0: 0x5B0
2527	 226	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2528	 228	ADD		 	 
- stack 0: 0x5B4
2529	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2530	 22A	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x22F0001024E00020268FFD40100000F01B40000008600000095010A00B40002
2531	 22B	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x22F0001024E00020268FFD40100000F01B40000008600000095010A00B40002
- stack 0: 0xF0
2532	 22D	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x22F
2533	 22E	JUMP		 	 
- stack 0: 0x5B4
2534	 22F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B4
2535	 230	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2536	 231	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x22F0001024E00020268FFD40100000F01B40000008600000095010A00B40002
2537	 232	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x22F0001024E00020268FFD40100000F01B40000008600000095010A00B40002
- stack 0: 0xE0
2538	 234	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x22F0001
2539	 235	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x22F0001
- stack 0: 0xFFFF
2540	 238	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2541	 239	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
2542	 23B	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2543	 23C	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x80
2544	 23F	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x0
2545	 240	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B4
- stack 0: 0x1
2546	 241	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x80
2547	 244	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B4
2548	 245	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2549	 247	ADD		 	 
- stack 0: 0x5B8
2550	 248	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2551	 249	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x24E00020268FFD40100000F01B40000008600000095010A00B40002018E0001
2552	 24A	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x24E00020268FFD40100000F01B40000008600000095010A00B40002018E0001
- stack 0: 0xF0
2553	 24C	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x24E
2554	 24D	JUMP		 	 
- stack 0: 0x5B8
2555	 24E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B8
2556	 24F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2557	 250	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x24E00020268FFD40100000F01B40000008600000095010A00B40002018E0001
2558	 251	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x24E00020268FFD40100000F01B40000008600000095010A00B40002018E0001
- stack 0: 0xE0
2559	 253	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x24E0002
2560	 254	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x24E0002
- stack 0: 0xFFFF
2561	 257	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2562	 258	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0x1
2563	 25A	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2564	 25B	PUSH2	00A0	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0xA0
2565	 25E	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B8
2566	 25F	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2567	 261	ADD		 	 
- stack 0: 0x5BC
2568	 262	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2569	 263	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x268FFD40100000F01B40000008600000095010A00B40002018E0001016FFFF0
2570	 264	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x268FFD40100000F01B40000008600000095010A00B40002018E0001016FFFF0
- stack 0: 0xF0
2571	 266	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x268
2572	 267	JUMP		 	 
- stack 0: 0x5BC
2573	 268	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x5BC
2574	 269	PUSH2	0080	 	 
- stack 1: 0x5BC
- stack 0: 0x80
2575	 26C	MLOAD		 	  ;; # read from x4
- stack 1: 0x5BC
- stack 0: 0x1
2576	 26D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2577	 272	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x1
2578	 273	PUSH2	00A0	 	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0xA0
2579	 276	MLOAD		 	  ;; # read from x5
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x2
2580	 277	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2581	 27C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x2
2582	 27D	SUB		 	 
- stack 1: 0x5BC
- stack 0: 0x1
2583	 27E	PUSH2	0286	 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x286
2584	 281	JUMPI		 	 
- stack 0: 0x5BC
2585	 286	JUMPDEST		 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 0: 0x5BC
2586	 287	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2587	 288	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x268FFD40100000F01B40000008600000095010A00B40002018E0001016FFFF0
2588	 289	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x268FFD40100000F01B40000008600000095010A00B40002018E0001016FFFF0
- stack 0: 0xE0
2589	 28B	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x268FFD4
2590	 28C	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x268FFD4
- stack 0: 0xFFFF
2591	 28F	AND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFD4
2592	 290	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0xFFD4
- stack 0: 0x1
2593	 292	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4
2594	 293	ADD		 	 
- stack 0: 0x590
2595	 294	PUSH4	FFFFFFFF	 	 
- stack 1: 0x590
- stack 0: 0xFFFFFFFF
2596	 299	AND		 	  ;; # mask to 32 bits
- stack 0: 0x590
2597	 29A	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2598	 29B	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x8600000095014000B4000202AA000002AA000001CE0000015C0010016FFF00
2599	 29C	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x8600000095014000B4000202AA000002AA000001CE0000015C0010016FFF00
- stack 0: 0xF0
2600	 29E	SHR		 	 
- stack 1: 0x590
- stack 0: 0x86
2601	 29F	JUMP		 	 
- stack 0: 0x590
2602	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x590
2603	 87	DUP1		 	 
- stack 1: 0x590
- stack 0: 0x590
2604	 88	PUSH2	0020	 	 
- stack 2: 0x590
- stack 1: 0x590
- stack 0: 0x20
2605	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x590
2606	 8C	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2607	 8E	ADD		 	 
- stack 0: 0x594
2608	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2609	 90	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x95014000B4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0
2610	 91	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x95014000B4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0
- stack 0: 0xF0
2611	 93	SHR		 	 
- stack 1: 0x594
- stack 0: 0x95
2612	 94	JUMP		 	 
- stack 0: 0x594
2613	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x594
2614	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2615	 97	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x95014000B4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0
2616	 98	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x95014000B4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0
- stack 0: 0xE0
2617	 9A	SHR		 	 
- stack 1: 0x594
- stack 0: 0x950140
2618	 9B	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x950140
- stack 0: 0xFFFF
2619	 9E	AND		 	 
- stack 1: 0x594
- stack 0: 0x140
2620	 9F	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x140
- stack 0: 0x1
2621	 A1	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x140
2622	 A2	PUSH2	0020	 	 
- stack 2: 0x594
- stack 1: 0x140
- stack 0: 0x20
2623	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x594
- stack 1: 0x140
- stack 0: 0x590
2624	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x594
- stack 0: 0x6D0
2625	 A7	PUSH2	0020	 	 
- stack 2: 0x594
- stack 1: 0x6D0
- stack 0: 0x20
2626	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x594
2627	 AB	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2628	 AD	ADD		 	 
- stack 0: 0x598
2629	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2630	 AF	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0xB4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001
2631	 B0	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0xB4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001
- stack 0: 0xF0
2632	 B2	SHR		 	 
- stack 1: 0x598
- stack 0: 0xB4
2633	 B3	JUMP		 	 
- stack 0: 0x598
2634	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x598
2635	 B5	PUSH2	0020	 	 
- stack 1: 0x598
- stack 0: 0x20
2636	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x598
- stack 0: 0x6D0
2637	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x598
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFF
2638	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x598
- stack 0: 0x6D0
2639	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x598
- stack 1: 0x6D0
- stack 0: 0x598
2640	 C0	MLOAD		 	 
- stack 2: 0x598
- stack 1: 0x6D0
- stack 0: 0xB4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001
2641	 C1	PUSH1	E0	 	 
- stack 3: 0x598
- stack 2: 0x6D0
- stack 1: 0xB4000202AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001
- stack 0: 0xE0
2642	 C3	SHR		 	 
- stack 2: 0x598
- stack 1: 0x6D0
- stack 0: 0xB40002
2643	 C4	PUSH2	FFFF	 	 
- stack 3: 0x598
- stack 2: 0x6D0
- stack 1: 0xB40002
- stack 0: 0xFFFF
2644	 C7	AND		 	 
- stack 2: 0x598
- stack 1: 0x6D0
- stack 0: 0x2
2645	 C8	PUSH1	01	 	 
- stack 3: 0x598
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0x1
2646	 CA	SIGNEXTEND		 	 
- stack 2: 0x598
- stack 1: 0x6D0
- stack 0: 0x2
2647	 CB	ADD		 	 
- stack 1: 0x598
- stack 0: 0x6D2
2648	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x598
- stack 1: 0x6D2
- stack 0: 0xFFFFFFFF
2649	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x598
- stack 0: 0x6D2
2650	 D2	PUSH1	02	 	 
- stack 2: 0x598
- stack 1: 0x6D2
- stack 0: 0x2
2651	 D4	XOR		 	 
- stack 1: 0x598
- stack 0: 0x6D0
2652	 D5	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
2653	 D6	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
- stack 0: 0xF0
2654	 D8	SHR		 	 
- stack 1: 0x598
- stack 0: 0xFF00
2655	 D9	PUSH2	0060	 	 
- stack 2: 0x598
- stack 1: 0xFF00
- stack 0: 0x60
2656	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x598
2657	 DD	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2658	 DF	ADD		 	 
- stack 0: 0x59C
2659	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2660	 E1	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x2AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001024E0002
2661	 E2	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x2AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001024E0002
- stack 0: 0xF0
2662	 E4	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x2AA
2663	 E5	JUMP		 	 
- stack 0: 0x59C
2664	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x59C
2665	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2666	 2AC	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x2AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001024E0002
2667	 2AD	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x2AA000002AA000001CE0000015C0010016FFF0001ED00E0022F0001024E0002
- stack 0: 0xE0
2668	 2AF	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x2AA0000
2669	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x2AA0000
- stack 0: 0xFFFF
2670	 2B3	AND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2671	 2B4	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1
2672	 2B6	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2673	 2B7	POP		 	 
- stack 0: 0x59C
2674	 2B8	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2675	 2BA	ADD		 	 
- stack 0: 0x5A0
2676	 2BB	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2677	 2BC	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x2AA000001CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD4
2678	 2BD	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x2AA000001CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD4
- stack 0: 0xF0
2679	 2BF	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x2AA
2680	 2C0	JUMP		 	 
- stack 0: 0x5A0
2681	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A0
2682	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2683	 2AC	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x2AA000001CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD4
2684	 2AD	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x2AA000001CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD4
- stack 0: 0xE0
2685	 2AF	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x2AA0000
2686	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x2AA0000
- stack 0: 0xFFFF
2687	 2B3	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2688	 2B4	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x1
2689	 2B6	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2690	 2B7	POP		 	 
- stack 0: 0x5A0
2691	 2B8	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2692	 2BA	ADD		 	 
- stack 0: 0x5A4
2693	 2BB	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2694	 2BC	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD40100000F
2695	 2BD	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x1CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD40100000F
- stack 0: 0xF0
2696	 2BF	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1CE
2697	 2C0	JUMP		 	 
- stack 0: 0x5A4
2698	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5A4
2699	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2700	 1D0	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD40100000F
2701	 1D1	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x1CE0000015C0010016FFF0001ED00E0022F0001024E00020268FFD40100000F
- stack 0: 0xE0
2702	 1D3	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1CE0000
2703	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x1CE0000
- stack 0: 0xFFFF
2704	 1D7	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2705	 1D8	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2706	 1DA	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2707	 1DB	PUSH2	0060	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x60
2708	 1DE	MLOAD		 	  ;; # read from x3
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0xFF00
2709	 1DF	ADD		 	  ;; # ADDI 3
- stack 1: 0x5A4
- stack 0: 0xFF00
2710	 1E0	PUSH2	00C0	 	 
- stack 2: 0x5A4
- stack 1: 0xFF00
- stack 0: 0xC0
2711	 1E3	MSTORE		 	  ;; # store to x6
- stack 0: 0x5A4
2712	 1E4	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2713	 1E6	ADD		 	 
- stack 0: 0x5A8
2714	 1E7	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2715	 1E8	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x15C0010016FFF0001ED00E0022F0001024E00020268FFD40100000F01B40000
2716	 1E9	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x15C0010016FFF0001ED00E0022F0001024E00020268FFD40100000F01B40000
- stack 0: 0xF0
2717	 1EB	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x15C
2718	 1EC	JUMP		 	 
- stack 0: 0x5A8
2719	 15C	JUMPDEST		 ;; __riscvimpl_LUI_10eb7	  ;; # instr: lui t4,0x10(ignore imm)
- stack 0: 0x5A8
2720	 15D	PUSH4	00010000	 	 
- stack 1: 0x5A8
- stack 0: 0x10000
2721	 162	PUSH2	03A0	 	 
- stack 2: 0x5A8
- stack 1: 0x10000
- stack 0: 0x3A0
2722	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x5A8
2723	 166	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2724	 168	ADD		 	 
- stack 0: 0x5AC
2725	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2726	 16A	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x16FFF0001ED00E0022F0001024E00020268FFD40100000F01B4000000860000
2727	 16B	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x16FFF0001ED00E0022F0001024E00020268FFD40100000F01B4000000860000
- stack 0: 0xF0
2728	 16D	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x16F
2729	 16E	JUMP		 	 
- stack 0: 0x5AC
2730	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x5AC
2731	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2732	 171	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x16FFF0001ED00E0022F0001024E00020268FFD40100000F01B4000000860000
2733	 172	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x16FFF0001ED00E0022F0001024E00020268FFD40100000F01B4000000860000
- stack 0: 0xE0
2734	 174	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x16FFF00
2735	 175	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x16FFF00
- stack 0: 0xFFFF
2736	 178	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xFF00
2737	 179	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xFF00
- stack 0: 0x1
2738	 17B	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2739	 17C	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
2740	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x10000
2741	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x5AC
- stack 0: 0xFF00
2742	 181	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0xFF00
- stack 0: 0x3A0
2743	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x5AC
2744	 185	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2745	 187	ADD		 	 
- stack 0: 0x5B0
2746	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2747	 189	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1ED00E0022F0001024E00020268FFD40100000F01B40000008600000095010A
2748	 18A	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x1ED00E0022F0001024E00020268FFD40100000F01B40000008600000095010A
- stack 0: 0xF0
2749	 18C	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1ED
2750	 18D	JUMP		 	 
- stack 0: 0x5B0
2751	 1ED	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,14c(ignore imm)
- stack 0: 0x5B0
2752	 1EE	PUSH2	00C0	 	 
- stack 1: 0x5B0
- stack 0: 0xC0
2753	 1F1	MLOAD		 	  ;; # read from x6
- stack 1: 0x5B0
- stack 0: 0xFF00
2754	 1F2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B0
- stack 1: 0xFF00
- stack 0: 0xFFFFFFFF
2755	 1F7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B0
- stack 0: 0xFF00
2756	 1F8	PUSH2	03A0	 	 
- stack 2: 0x5B0
- stack 1: 0xFF00
- stack 0: 0x3A0
2757	 1FB	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B0
- stack 1: 0xFF00
- stack 0: 0xFF00
2758	 1FC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B0
- stack 2: 0xFF00
- stack 1: 0xFF00
- stack 0: 0xFFFFFFFF
2759	 201	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B0
- stack 1: 0xFF00
- stack 0: 0xFF00
2760	 202	SUB		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2761	 203	PUSH2	020B	 ;; _neq_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x20B
2762	 206	JUMPI		 	 
- stack 0: 0x5B0
2763	 207	PUSH2	0225	 ;; _neq_after_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 1: 0x5B0
- stack 0: 0x225
2764	 20A	JUMP		 	 
- stack 0: 0x5B0
2765	 225	JUMPDEST		 ;; _neq_after_fa453ece4dbe4159fc58962ef93f3ac223cb88d973387b92a065dd4e94a71105	 
- stack 0: 0x5B0
2766	 226	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2767	 228	ADD		 	 
- stack 0: 0x5B4
2768	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2769	 22A	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x22F0001024E00020268FFD40100000F01B40000008600000095010A00B40002
2770	 22B	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x22F0001024E00020268FFD40100000F01B40000008600000095010A00B40002
- stack 0: 0xF0
2771	 22D	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x22F
2772	 22E	JUMP		 	 
- stack 0: 0x5B4
2773	 22F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5B4
2774	 230	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2775	 231	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x22F0001024E00020268FFD40100000F01B40000008600000095010A00B40002
2776	 232	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x22F0001024E00020268FFD40100000F01B40000008600000095010A00B40002
- stack 0: 0xE0
2777	 234	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x22F0001
2778	 235	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x22F0001
- stack 0: 0xFFFF
2779	 238	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2780	 239	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
2781	 23B	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2782	 23C	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x80
2783	 23F	MLOAD		 	  ;; # read from x4
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
2784	 240	ADD		 	  ;; # ADDI 4
- stack 1: 0x5B4
- stack 0: 0x2
2785	 241	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0x80
2786	 244	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B4
2787	 245	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2788	 247	ADD		 	 
- stack 0: 0x5B8
2789	 248	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2790	 249	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x24E00020268FFD40100000F01B40000008600000095010A00B40002018E0001
2791	 24A	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x24E00020268FFD40100000F01B40000008600000095010A00B40002018E0001
- stack 0: 0xF0
2792	 24C	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x24E
2793	 24D	JUMP		 	 
- stack 0: 0x5B8
2794	 24E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B8
2795	 24F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2796	 250	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x24E00020268FFD40100000F01B40000008600000095010A00B40002018E0001
2797	 251	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x24E00020268FFD40100000F01B40000008600000095010A00B40002018E0001
- stack 0: 0xE0
2798	 253	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x24E0002
2799	 254	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x24E0002
- stack 0: 0xFFFF
2800	 257	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2801	 258	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0x1
2802	 25A	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x2
2803	 25B	PUSH2	00A0	 	 
- stack 2: 0x5B8
- stack 1: 0x2
- stack 0: 0xA0
2804	 25E	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B8
2805	 25F	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2806	 261	ADD		 	 
- stack 0: 0x5BC
2807	 262	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2808	 263	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x268FFD40100000F01B40000008600000095010A00B40002018E0001016FFFF0
2809	 264	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x268FFD40100000F01B40000008600000095010A00B40002018E0001016FFFF0
- stack 0: 0xF0
2810	 266	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x268
2811	 267	JUMP		 	 
- stack 0: 0x5BC
2812	 268	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x5BC
2813	 269	PUSH2	0080	 	 
- stack 1: 0x5BC
- stack 0: 0x80
2814	 26C	MLOAD		 	  ;; # read from x4
- stack 1: 0x5BC
- stack 0: 0x2
2815	 26D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2816	 272	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x2
2817	 273	PUSH2	00A0	 	 
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0xA0
2818	 276	MLOAD		 	  ;; # read from x5
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0x2
2819	 277	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2820	 27C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5BC
- stack 1: 0x2
- stack 0: 0x2
2821	 27D	SUB		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2822	 27E	PUSH2	0286	 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x286
2823	 281	JUMPI		 	 
- stack 0: 0x5BC
2824	 282	PUSH2	02A0	 ;; _neq_after_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 1: 0x5BC
- stack 0: 0x2A0
2825	 285	JUMP		 	 
- stack 0: 0x5BC
2826	 2A0	JUMPDEST		 ;; _neq_after_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 0: 0x5BC
2827	 2A1	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2828	 2A3	ADD		 	 
- stack 0: 0x5C0
2829	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2830	 2A5	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x100000F01B40000008600000095010A00B40002018E0001016FFFF0011A00B4
2831	 2A6	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x100000F01B40000008600000095010A00B40002018E0001016FFFF0011A00B4
- stack 0: 0xF0
2832	 2A8	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x100
2833	 2A9	JUMP		 	 
- stack 0: 0x5C0
2834	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5C0
2835	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2836	 102	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x100000F01B40000008600000095010A00B40002018E0001016FFFF0011A00B4
2837	 103	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x100000F01B40000008600000095010A00B40002018E0001016FFFF0011A00B4
- stack 0: 0xE0
2838	 105	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x100000F
2839	 106	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x100000F
- stack 0: 0xFFFF
2840	 109	AND		 	 
- stack 1: 0x5C0
- stack 0: 0xF
2841	 10A	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xF
- stack 0: 0x1
2842	 10C	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xF
2843	 10D	PUSH2	0380	 	 
- stack 2: 0x5C0
- stack 1: 0xF
- stack 0: 0x380
2844	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x5C0
2845	 111	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2846	 113	ADD		 	 
- stack 0: 0x5C4
2847	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2848	 115	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x1B40000008600000095010A00B40002018E0001016FFFF0011A00B4022F0001
2849	 116	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x1B40000008600000095010A00B40002018E0001016FFFF0011A00B4022F0001
- stack 0: 0xF0
2850	 118	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x1B4
2851	 119	JUMP		 	 
- stack 0: 0x5C4
2852	 1B4	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5C4
2853	 1B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2854	 1B6	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x1B40000008600000095010A00B40002018E0001016FFFF0011A00B4022F0001
2855	 1B7	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x1B40000008600000095010A00B40002018E0001016FFFF0011A00B4022F0001
- stack 0: 0xE0
2856	 1B9	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x1B40000
2857	 1BA	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x1B40000
- stack 0: 0xFFFF
2858	 1BD	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2859	 1BE	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x1
2860	 1C0	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2861	 1C1	PUSH2	0080	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x80
2862	 1C4	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C4
2863	 1C5	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2864	 1C7	ADD		 	 
- stack 0: 0x5C8
2865	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2866	 1C9	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x8600000095010A00B40002018E0001016FFFF0011A00B4022F0001024E0002
2867	 1CA	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x8600000095010A00B40002018E0001016FFFF0011A00B4022F0001024E0002
- stack 0: 0xF0
2868	 1CC	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x86
2869	 1CD	JUMP		 	 
- stack 0: 0x5C8
2870	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5C8
2871	 87	DUP1		 	 
- stack 1: 0x5C8
- stack 0: 0x5C8
2872	 88	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x5C8
- stack 0: 0x20
2873	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
2874	 8C	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2875	 8E	ADD		 	 
- stack 0: 0x5CC
2876	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2877	 90	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x95010A00B40002018E0001016FFFF0011A00B4022F0001024E00020268FFE0
2878	 91	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x95010A00B40002018E0001016FFFF0011A00B4022F0001024E00020268FFE0
- stack 0: 0xF0
2879	 93	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x95
2880	 94	JUMP		 	 
- stack 0: 0x5CC
2881	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x5CC
2882	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2883	 97	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x95010A00B40002018E0001016FFFF0011A00B4022F0001024E00020268FFE0
2884	 98	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x95010A00B40002018E0001016FFFF0011A00B4022F0001024E00020268FFE0
- stack 0: 0xE0
2885	 9A	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x95010A
2886	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x95010A
- stack 0: 0xFFFF
2887	 9E	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x10A
2888	 9F	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x10A
- stack 0: 0x1
2889	 A1	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x10A
2890	 A2	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0x10A
- stack 0: 0x20
2891	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5CC
- stack 1: 0x10A
- stack 0: 0x5C8
2892	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5CC
- stack 0: 0x6D2
2893	 A7	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0x6D2
- stack 0: 0x20
2894	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5CC
2895	 AB	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2896	 AD	ADD		 	 
- stack 0: 0x5D0
2897	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2898	 AF	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xB40002018E0001016FFFF0011A00B4022F0001024E00020268FFE001000010
2899	 B0	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xB40002018E0001016FFFF0011A00B4022F0001024E00020268FFE001000010
- stack 0: 0xF0
2900	 B2	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xB4
2901	 B3	JUMP		 	 
- stack 0: 0x5D0
2902	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x5D0
2903	 B5	PUSH2	0020	 	 
- stack 1: 0x5D0
- stack 0: 0x20
2904	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5D0
- stack 0: 0x6D2
2905	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x6D2
- stack 0: 0xFFFFFFFF
2906	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D0
- stack 0: 0x6D2
2907	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5D0
- stack 1: 0x6D2
- stack 0: 0x5D0
2908	 C0	MLOAD		 	 
- stack 2: 0x5D0
- stack 1: 0x6D2
- stack 0: 0xB40002018E0001016FFFF0011A00B4022F0001024E00020268FFE001000010
2909	 C1	PUSH1	E0	 	 
- stack 3: 0x5D0
- stack 2: 0x6D2
- stack 1: 0xB40002018E0001016FFFF0011A00B4022F0001024E00020268FFE001000010
- stack 0: 0xE0
2910	 C3	SHR		 	 
- stack 2: 0x5D0
- stack 1: 0x6D2
- stack 0: 0xB40002
2911	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5D0
- stack 2: 0x6D2
- stack 1: 0xB40002
- stack 0: 0xFFFF
2912	 C7	AND		 	 
- stack 2: 0x5D0
- stack 1: 0x6D2
- stack 0: 0x2
2913	 C8	PUSH1	01	 	 
- stack 3: 0x5D0
- stack 2: 0x6D2
- stack 1: 0x2
- stack 0: 0x1
2914	 CA	SIGNEXTEND		 	 
- stack 2: 0x5D0
- stack 1: 0x6D2
- stack 0: 0x2
2915	 CB	ADD		 	 
- stack 1: 0x5D0
- stack 0: 0x6D4
2916	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFF
2917	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D0
- stack 0: 0x6D4
2918	 D2	PUSH1	02	 	 
- stack 2: 0x5D0
- stack 1: 0x6D4
- stack 0: 0x2
2919	 D4	XOR		 	 
- stack 1: 0x5D0
- stack 0: 0x6D6
2920	 D5	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xFF0000000000000000000000000000000000000000000000000000000000000
2921	 D6	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xFF0000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
2922	 D8	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xFF0
2923	 D9	PUSH2	0060	 	 
- stack 2: 0x5D0
- stack 1: 0xFF0
- stack 0: 0x60
2924	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x5D0
2925	 DD	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2926	 DF	ADD		 	 
- stack 0: 0x5D4
2927	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2928	 E1	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x18E0001016FFFF0011A00B4022F0001024E00020268FFE00100001001B40000
2929	 E2	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x18E0001016FFFF0011A00B4022F0001024E00020268FFE00100001001B40000
- stack 0: 0xF0
2930	 E4	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x18E
2931	 E5	JUMP		 	 
- stack 0: 0x5D4
2932	 18E	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x5D4
2933	 18F	PUSH4	00001000	 	 
- stack 1: 0x5D4
- stack 0: 0x1000
2934	 194	PUSH2	03A0	 	 
- stack 2: 0x5D4
- stack 1: 0x1000
- stack 0: 0x3A0
2935	 197	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D4
2936	 198	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2937	 19A	ADD		 	 
- stack 0: 0x5D8
2938	 19B	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2939	 19C	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x16FFFF0011A00B4022F0001024E00020268FFE00100001001B4000000860000
2940	 19D	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x16FFFF0011A00B4022F0001024E00020268FFE00100001001B4000000860000
- stack 0: 0xF0
2941	 19F	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x16F
2942	 1A0	JUMP		 	 
- stack 0: 0x5D8
2943	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x5D8
2944	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2945	 171	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x16FFFF0011A00B4022F0001024E00020268FFE00100001001B4000000860000
2946	 172	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x16FFFF0011A00B4022F0001024E00020268FFE00100001001B4000000860000
- stack 0: 0xE0
2947	 174	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x16FFFF0
2948	 175	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x16FFFF0
- stack 0: 0xFFFF
2949	 178	AND		 	 
- stack 1: 0x5D8
- stack 0: 0xFFF0
2950	 179	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0xFFF0
- stack 0: 0x1
2951	 17B	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2952	 17C	PUSH2	03A0	 	 
- stack 2: 0x5D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
2953	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x5D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x1000
2954	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x5D8
- stack 0: 0xFF0
2955	 181	PUSH2	03A0	 	 
- stack 2: 0x5D8
- stack 1: 0xFF0
- stack 0: 0x3A0
2956	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D8
2957	 185	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2958	 187	ADD		 	 
- stack 0: 0x5DC
2959	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2960	 189	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x11A00B4022F0001024E00020268FFE00100001001B4000000860000009500E0
2961	 18A	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x11A00B4022F0001024E00020268FFE00100001001B4000000860000009500E0
- stack 0: 0xF0
2962	 18C	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x11A
2963	 18D	JUMP		 	 
- stack 0: 0x5DC
2964	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x5DC
2965	 11B	PUSH2	0060	 	 
- stack 1: 0x5DC
- stack 0: 0x60
2966	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x5DC
- stack 0: 0xFF0
2967	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5DC
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
2968	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5DC
- stack 0: 0xFF0
2969	 125	PUSH2	03A0	 	 
- stack 2: 0x5DC
- stack 1: 0xFF0
- stack 0: 0x3A0
2970	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x5DC
- stack 1: 0xFF0
- stack 0: 0xFF0
2971	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5DC
- stack 2: 0xFF0
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
2972	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5DC
- stack 1: 0xFF0
- stack 0: 0xFF0
2973	 12F	SUB		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2974	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x138
2975	 133	JUMPI		 	 
- stack 0: 0x5DC
2976	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x5DC
- stack 0: 0x152
2977	 137	JUMP		 	 
- stack 0: 0x5DC
2978	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x5DC
2979	 153	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2980	 155	ADD		 	 
- stack 0: 0x5E0
2981	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2982	 157	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x22F0001024E00020268FFE00100001001B4000000860000009500E002AA0000
2983	 158	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x22F0001024E00020268FFE00100001001B4000000860000009500E002AA0000
- stack 0: 0xF0
2984	 15A	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x22F
2985	 15B	JUMP		 	 
- stack 0: 0x5E0
2986	 22F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5E0
2987	 230	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2988	 231	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x22F0001024E00020268FFE00100001001B4000000860000009500E002AA0000
2989	 232	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x22F0001024E00020268FFE00100001001B4000000860000009500E002AA0000
- stack 0: 0xE0
2990	 234	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x22F0001
2991	 235	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x22F0001
- stack 0: 0xFFFF
2992	 238	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
2993	 239	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1
2994	 23B	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
2995	 23C	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x80
2996	 23F	MLOAD		 	  ;; # read from x4
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x0
2997	 240	ADD		 	  ;; # ADDI 4
- stack 1: 0x5E0
- stack 0: 0x1
2998	 241	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x80
2999	 244	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E0
3000	 245	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
3001	 247	ADD		 	 
- stack 0: 0x5E4
3002	 248	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3003	 249	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x24E00020268FFE00100001001B4000000860000009500E002AA000000B40002
3004	 24A	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x24E00020268FFE00100001001B4000000860000009500E002AA000000B40002
- stack 0: 0xF0
3005	 24C	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x24E
3006	 24D	JUMP		 	 
- stack 0: 0x5E4
3007	 24E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5E4
3008	 24F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
3009	 250	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x24E00020268FFE00100001001B4000000860000009500E002AA000000B40002
3010	 251	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x24E00020268FFE00100001001B4000000860000009500E002AA000000B40002
- stack 0: 0xE0
3011	 253	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x24E0002
3012	 254	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x24E0002
- stack 0: 0xFFFF
3013	 257	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
3014	 258	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0x1
3015	 25A	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
3016	 25B	PUSH2	00A0	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0xA0
3017	 25E	MSTORE		 	  ;; # store to x5
- stack 0: 0x5E4
3018	 25F	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3019	 261	ADD		 	 
- stack 0: 0x5E8
3020	 262	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3021	 263	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x268FFE00100001001B4000000860000009500E002AA000000B4000201A1000F
3022	 264	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x268FFE00100001001B4000000860000009500E002AA000000B4000201A1000F
- stack 0: 0xF0
3023	 266	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x268
3024	 267	JUMP		 	 
- stack 0: 0x5E8
3025	 268	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x5E8
3026	 269	PUSH2	0080	 	 
- stack 1: 0x5E8
- stack 0: 0x80
3027	 26C	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E8
- stack 0: 0x1
3028	 26D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3029	 272	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E8
- stack 0: 0x1
3030	 273	PUSH2	00A0	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0xA0
3031	 276	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x2
3032	 277	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3033	 27C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x2
3034	 27D	SUB		 	 
- stack 1: 0x5E8
- stack 0: 0x1
3035	 27E	PUSH2	0286	 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x286
3036	 281	JUMPI		 	 
- stack 0: 0x5E8
3037	 286	JUMPDEST		 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 0: 0x5E8
3038	 287	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
3039	 288	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x268FFE00100001001B4000000860000009500E002AA000000B4000201A1000F
3040	 289	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x268FFE00100001001B4000000860000009500E002AA000000B4000201A1000F
- stack 0: 0xE0
3041	 28B	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x268FFE0
3042	 28C	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x268FFE0
- stack 0: 0xFFFF
3043	 28F	AND		 	 
- stack 1: 0x5E8
- stack 0: 0xFFE0
3044	 290	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0xFFE0
- stack 0: 0x1
3045	 292	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3046	 293	ADD		 	 
- stack 0: 0x5C8
3047	 294	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFF
3048	 299	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5C8
3049	 29A	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
3050	 29B	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x8600000095010A00B40002018E0001016FFFF0011A00B4022F0001024E0002
3051	 29C	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x8600000095010A00B40002018E0001016FFFF0011A00B4022F0001024E0002
- stack 0: 0xF0
3052	 29E	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x86
3053	 29F	JUMP		 	 
- stack 0: 0x5C8
3054	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5C8
3055	 87	DUP1		 	 
- stack 1: 0x5C8
- stack 0: 0x5C8
3056	 88	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x5C8
- stack 0: 0x20
3057	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
3058	 8C	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
3059	 8E	ADD		 	 
- stack 0: 0x5CC
3060	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
3061	 90	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x95010A00B40002018E0001016FFFF0011A00B4022F0001024E00020268FFE0
3062	 91	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x95010A00B40002018E0001016FFFF0011A00B4022F0001024E00020268FFE0
- stack 0: 0xF0
3063	 93	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x95
3064	 94	JUMP		 	 
- stack 0: 0x5CC
3065	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x5CC
3066	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
3067	 97	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x95010A00B40002018E0001016FFFF0011A00B4022F0001024E00020268FFE0
3068	 98	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x95010A00B40002018E0001016FFFF0011A00B4022F0001024E00020268FFE0
- stack 0: 0xE0
3069	 9A	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x95010A
3070	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x95010A
- stack 0: 0xFFFF
3071	 9E	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x10A
3072	 9F	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x10A
- stack 0: 0x1
3073	 A1	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x10A
3074	 A2	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0x10A
- stack 0: 0x20
3075	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5CC
- stack 1: 0x10A
- stack 0: 0x5C8
3076	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5CC
- stack 0: 0x6D2
3077	 A7	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0x6D2
- stack 0: 0x20
3078	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5CC
3079	 AB	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
3080	 AD	ADD		 	 
- stack 0: 0x5D0
3081	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
3082	 AF	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xB40002018E0001016FFFF0011A00B4022F0001024E00020268FFE001000010
3083	 B0	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xB40002018E0001016FFFF0011A00B4022F0001024E00020268FFE001000010
- stack 0: 0xF0
3084	 B2	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xB4
3085	 B3	JUMP		 	 
- stack 0: 0x5D0
3086	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x5D0
3087	 B5	PUSH2	0020	 	 
- stack 1: 0x5D0
- stack 0: 0x20
3088	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5D0
- stack 0: 0x6D2
3089	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x6D2
- stack 0: 0xFFFFFFFF
3090	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D0
- stack 0: 0x6D2
3091	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5D0
- stack 1: 0x6D2
- stack 0: 0x5D0
3092	 C0	MLOAD		 	 
- stack 2: 0x5D0
- stack 1: 0x6D2
- stack 0: 0xB40002018E0001016FFFF0011A00B4022F0001024E00020268FFE001000010
3093	 C1	PUSH1	E0	 	 
- stack 3: 0x5D0
- stack 2: 0x6D2
- stack 1: 0xB40002018E0001016FFFF0011A00B4022F0001024E00020268FFE001000010
- stack 0: 0xE0
3094	 C3	SHR		 	 
- stack 2: 0x5D0
- stack 1: 0x6D2
- stack 0: 0xB40002
3095	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5D0
- stack 2: 0x6D2
- stack 1: 0xB40002
- stack 0: 0xFFFF
3096	 C7	AND		 	 
- stack 2: 0x5D0
- stack 1: 0x6D2
- stack 0: 0x2
3097	 C8	PUSH1	01	 	 
- stack 3: 0x5D0
- stack 2: 0x6D2
- stack 1: 0x2
- stack 0: 0x1
3098	 CA	SIGNEXTEND		 	 
- stack 2: 0x5D0
- stack 1: 0x6D2
- stack 0: 0x2
3099	 CB	ADD		 	 
- stack 1: 0x5D0
- stack 0: 0x6D4
3100	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFF
3101	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D0
- stack 0: 0x6D4
3102	 D2	PUSH1	02	 	 
- stack 2: 0x5D0
- stack 1: 0x6D4
- stack 0: 0x2
3103	 D4	XOR		 	 
- stack 1: 0x5D0
- stack 0: 0x6D6
3104	 D5	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xFF0000000000000000000000000000000000000000000000000000000000000
3105	 D6	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xFF0000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
3106	 D8	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xFF0
3107	 D9	PUSH2	0060	 	 
- stack 2: 0x5D0
- stack 1: 0xFF0
- stack 0: 0x60
3108	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x5D0
3109	 DD	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
3110	 DF	ADD		 	 
- stack 0: 0x5D4
3111	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3112	 E1	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x18E0001016FFFF0011A00B4022F0001024E00020268FFE00100001001B40000
3113	 E2	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x18E0001016FFFF0011A00B4022F0001024E00020268FFE00100001001B40000
- stack 0: 0xF0
3114	 E4	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x18E
3115	 E5	JUMP		 	 
- stack 0: 0x5D4
3116	 18E	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x5D4
3117	 18F	PUSH4	00001000	 	 
- stack 1: 0x5D4
- stack 0: 0x1000
3118	 194	PUSH2	03A0	 	 
- stack 2: 0x5D4
- stack 1: 0x1000
- stack 0: 0x3A0
3119	 197	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D4
3120	 198	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3121	 19A	ADD		 	 
- stack 0: 0x5D8
3122	 19B	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3123	 19C	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x16FFFF0011A00B4022F0001024E00020268FFE00100001001B4000000860000
3124	 19D	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x16FFFF0011A00B4022F0001024E00020268FFE00100001001B4000000860000
- stack 0: 0xF0
3125	 19F	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x16F
3126	 1A0	JUMP		 	 
- stack 0: 0x5D8
3127	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x5D8
3128	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
3129	 171	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x16FFFF0011A00B4022F0001024E00020268FFE00100001001B4000000860000
3130	 172	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x16FFFF0011A00B4022F0001024E00020268FFE00100001001B4000000860000
- stack 0: 0xE0
3131	 174	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x16FFFF0
3132	 175	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x16FFFF0
- stack 0: 0xFFFF
3133	 178	AND		 	 
- stack 1: 0x5D8
- stack 0: 0xFFF0
3134	 179	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0xFFF0
- stack 0: 0x1
3135	 17B	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3136	 17C	PUSH2	03A0	 	 
- stack 2: 0x5D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
3137	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x5D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x1000
3138	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x5D8
- stack 0: 0xFF0
3139	 181	PUSH2	03A0	 	 
- stack 2: 0x5D8
- stack 1: 0xFF0
- stack 0: 0x3A0
3140	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D8
3141	 185	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3142	 187	ADD		 	 
- stack 0: 0x5DC
3143	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3144	 189	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x11A00B4022F0001024E00020268FFE00100001001B4000000860000009500E0
3145	 18A	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x11A00B4022F0001024E00020268FFE00100001001B4000000860000009500E0
- stack 0: 0xF0
3146	 18C	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x11A
3147	 18D	JUMP		 	 
- stack 0: 0x5DC
3148	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x5DC
3149	 11B	PUSH2	0060	 	 
- stack 1: 0x5DC
- stack 0: 0x60
3150	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x5DC
- stack 0: 0xFF0
3151	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5DC
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
3152	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5DC
- stack 0: 0xFF0
3153	 125	PUSH2	03A0	 	 
- stack 2: 0x5DC
- stack 1: 0xFF0
- stack 0: 0x3A0
3154	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x5DC
- stack 1: 0xFF0
- stack 0: 0xFF0
3155	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5DC
- stack 2: 0xFF0
- stack 1: 0xFF0
- stack 0: 0xFFFFFFFF
3156	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5DC
- stack 1: 0xFF0
- stack 0: 0xFF0
3157	 12F	SUB		 	 
- stack 1: 0x5DC
- stack 0: 0x0
3158	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x138
3159	 133	JUMPI		 	 
- stack 0: 0x5DC
3160	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x5DC
- stack 0: 0x152
3161	 137	JUMP		 	 
- stack 0: 0x5DC
3162	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x5DC
3163	 153	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
3164	 155	ADD		 	 
- stack 0: 0x5E0
3165	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
3166	 157	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x22F0001024E00020268FFE00100001001B4000000860000009500E002AA0000
3167	 158	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x22F0001024E00020268FFE00100001001B4000000860000009500E002AA0000
- stack 0: 0xF0
3168	 15A	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x22F
3169	 15B	JUMP		 	 
- stack 0: 0x5E0
3170	 22F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5E0
3171	 230	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
3172	 231	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x22F0001024E00020268FFE00100001001B4000000860000009500E002AA0000
3173	 232	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x22F0001024E00020268FFE00100001001B4000000860000009500E002AA0000
- stack 0: 0xE0
3174	 234	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x22F0001
3175	 235	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x22F0001
- stack 0: 0xFFFF
3176	 238	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
3177	 239	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1
3178	 23B	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
3179	 23C	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x80
3180	 23F	MLOAD		 	  ;; # read from x4
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1
3181	 240	ADD		 	  ;; # ADDI 4
- stack 1: 0x5E0
- stack 0: 0x2
3182	 241	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0x80
3183	 244	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E0
3184	 245	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
3185	 247	ADD		 	 
- stack 0: 0x5E4
3186	 248	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3187	 249	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x24E00020268FFE00100001001B4000000860000009500E002AA000000B40002
3188	 24A	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x24E00020268FFE00100001001B4000000860000009500E002AA000000B40002
- stack 0: 0xF0
3189	 24C	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x24E
3190	 24D	JUMP		 	 
- stack 0: 0x5E4
3191	 24E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5E4
3192	 24F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
3193	 250	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x24E00020268FFE00100001001B4000000860000009500E002AA000000B40002
3194	 251	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x24E00020268FFE00100001001B4000000860000009500E002AA000000B40002
- stack 0: 0xE0
3195	 253	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x24E0002
3196	 254	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x24E0002
- stack 0: 0xFFFF
3197	 257	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
3198	 258	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0x1
3199	 25A	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
3200	 25B	PUSH2	00A0	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0xA0
3201	 25E	MSTORE		 	  ;; # store to x5
- stack 0: 0x5E4
3202	 25F	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3203	 261	ADD		 	 
- stack 0: 0x5E8
3204	 262	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3205	 263	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x268FFE00100001001B4000000860000009500E002AA000000B4000201A1000F
3206	 264	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x268FFE00100001001B4000000860000009500E002AA000000B4000201A1000F
- stack 0: 0xF0
3207	 266	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x268
3208	 267	JUMP		 	 
- stack 0: 0x5E8
3209	 268	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x5E8
3210	 269	PUSH2	0080	 	 
- stack 1: 0x5E8
- stack 0: 0x80
3211	 26C	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E8
- stack 0: 0x2
3212	 26D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3213	 272	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E8
- stack 0: 0x2
3214	 273	PUSH2	00A0	 	 
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0xA0
3215	 276	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0x2
3216	 277	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3217	 27C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0x2
3218	 27D	SUB		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3219	 27E	PUSH2	0286	 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x286
3220	 281	JUMPI		 	 
- stack 0: 0x5E8
3221	 282	PUSH2	02A0	 ;; _neq_after_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 1: 0x5E8
- stack 0: 0x2A0
3222	 285	JUMP		 	 
- stack 0: 0x5E8
3223	 2A0	JUMPDEST		 ;; _neq_after_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 0: 0x5E8
3224	 2A1	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3225	 2A3	ADD		 	 
- stack 0: 0x5EC
3226	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3227	 2A5	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x100001001B4000000860000009500E002AA000000B4000201A1000F016F000F
3228	 2A6	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x100001001B4000000860000009500E002AA000000B4000201A1000F016F000F
- stack 0: 0xF0
3229	 2A8	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x100
3230	 2A9	JUMP		 	 
- stack 0: 0x5EC
3231	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5EC
3232	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
3233	 102	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x100001001B4000000860000009500E002AA000000B4000201A1000F016F000F
3234	 103	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x100001001B4000000860000009500E002AA000000B4000201A1000F016F000F
- stack 0: 0xE0
3235	 105	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x1000010
3236	 106	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x1000010
- stack 0: 0xFFFF
3237	 109	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x10
3238	 10A	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x10
- stack 0: 0x1
3239	 10C	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x10
3240	 10D	PUSH2	0380	 	 
- stack 2: 0x5EC
- stack 1: 0x10
- stack 0: 0x380
3241	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x5EC
3242	 111	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3243	 113	ADD		 	 
- stack 0: 0x5F0
3244	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3245	 115	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x1B4000000860000009500E002AA000000B4000201A1000F016F000F011A0084
3246	 116	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x1B4000000860000009500E002AA000000B4000201A1000F016F000F011A0084
- stack 0: 0xF0
3247	 118	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x1B4
3248	 119	JUMP		 	 
- stack 0: 0x5F0
3249	 1B4	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5F0
3250	 1B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3251	 1B6	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x1B4000000860000009500E002AA000000B4000201A1000F016F000F011A0084
3252	 1B7	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x1B4000000860000009500E002AA000000B4000201A1000F016F000F011A0084
- stack 0: 0xE0
3253	 1B9	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x1B40000
3254	 1BA	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x1B40000
- stack 0: 0xFFFF
3255	 1BD	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3256	 1BE	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x1
3257	 1C0	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3258	 1C1	PUSH2	0080	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x80
3259	 1C4	MSTORE		 	  ;; # store to x4
- stack 0: 0x5F0
3260	 1C5	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3261	 1C7	ADD		 	 
- stack 0: 0x5F4
3262	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3263	 1C9	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x860000009500E002AA000000B4000201A1000F016F000F011A0084022F0001
3264	 1CA	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x860000009500E002AA000000B4000201A1000F016F000F011A0084022F0001
- stack 0: 0xF0
3265	 1CC	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x86
3266	 1CD	JUMP		 	 
- stack 0: 0x5F4
3267	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5F4
3268	 87	DUP1		 	 
- stack 1: 0x5F4
- stack 0: 0x5F4
3269	 88	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0x5F4
- stack 0: 0x20
3270	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F4
3271	 8C	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3272	 8E	ADD		 	 
- stack 0: 0x5F8
3273	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3274	 90	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x9500E002AA000000B4000201A1000F016F000F011A0084022F0001024E0002
3275	 91	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x9500E002AA000000B4000201A1000F016F000F011A0084022F0001024E0002
- stack 0: 0xF0
3276	 93	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x95
3277	 94	JUMP		 	 
- stack 0: 0x5F8
3278	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x5F8
3279	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3280	 97	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x9500E002AA000000B4000201A1000F016F000F011A0084022F0001024E0002
3281	 98	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x9500E002AA000000B4000201A1000F016F000F011A0084022F0001024E0002
- stack 0: 0xE0
3282	 9A	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x9500E0
3283	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x9500E0
- stack 0: 0xFFFF
3284	 9E	AND		 	 
- stack 1: 0x5F8
- stack 0: 0xE0
3285	 9F	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xE0
- stack 0: 0x1
3286	 A1	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xE0
3287	 A2	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0xE0
- stack 0: 0x20
3288	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F8
- stack 1: 0xE0
- stack 0: 0x5F4
3289	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F8
- stack 0: 0x6D4
3290	 A7	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0x6D4
- stack 0: 0x20
3291	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F8
3292	 AB	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3293	 AD	ADD		 	 
- stack 0: 0x5FC
3294	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3295	 AF	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x2AA000000B4000201A1000F016F000F011A0084022F0001024E00020268FFDC
3296	 B0	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x2AA000000B4000201A1000F016F000F011A0084022F0001024E00020268FFDC
- stack 0: 0xF0
3297	 B2	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x2AA
3298	 B3	JUMP		 	 
- stack 0: 0x5FC
3299	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5FC
3300	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3301	 2AC	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x2AA000000B4000201A1000F016F000F011A0084022F0001024E00020268FFDC
3302	 2AD	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x2AA000000B4000201A1000F016F000F011A0084022F0001024E00020268FFDC
- stack 0: 0xE0
3303	 2AF	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x2AA0000
3304	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x2AA0000
- stack 0: 0xFFFF
3305	 2B3	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3306	 2B4	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
3307	 2B6	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3308	 2B7	POP		 	 
- stack 0: 0x5FC
3309	 2B8	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3310	 2BA	ADD		 	 
- stack 0: 0x600
3311	 2BB	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3312	 2BC	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xB4000201A1000F016F000F011A0084022F0001024E00020268FFDC01000011
3313	 2BD	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xB4000201A1000F016F000F011A0084022F0001024E00020268FFDC01000011
- stack 0: 0xF0
3314	 2BF	SHR		 	 
- stack 1: 0x600
- stack 0: 0xB4
3315	 2C0	JUMP		 	 
- stack 0: 0x600
3316	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x600
3317	 B5	PUSH2	0020	 	 
- stack 1: 0x600
- stack 0: 0x20
3318	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x600
- stack 0: 0x6D4
3319	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x600
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFF
3320	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x600
- stack 0: 0x6D4
3321	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x600
- stack 1: 0x6D4
- stack 0: 0x600
3322	 C0	MLOAD		 	 
- stack 2: 0x600
- stack 1: 0x6D4
- stack 0: 0xB4000201A1000F016F000F011A0084022F0001024E00020268FFDC01000011
3323	 C1	PUSH1	E0	 	 
- stack 3: 0x600
- stack 2: 0x6D4
- stack 1: 0xB4000201A1000F016F000F011A0084022F0001024E00020268FFDC01000011
- stack 0: 0xE0
3324	 C3	SHR		 	 
- stack 2: 0x600
- stack 1: 0x6D4
- stack 0: 0xB40002
3325	 C4	PUSH2	FFFF	 	 
- stack 3: 0x600
- stack 2: 0x6D4
- stack 1: 0xB40002
- stack 0: 0xFFFF
3326	 C7	AND		 	 
- stack 2: 0x600
- stack 1: 0x6D4
- stack 0: 0x2
3327	 C8	PUSH1	01	 	 
- stack 3: 0x600
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0x1
3328	 CA	SIGNEXTEND		 	 
- stack 2: 0x600
- stack 1: 0x6D4
- stack 0: 0x2
3329	 CB	ADD		 	 
- stack 1: 0x600
- stack 0: 0x6D6
3330	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x600
- stack 1: 0x6D6
- stack 0: 0xFFFFFFFF
3331	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x600
- stack 0: 0x6D6
3332	 D2	PUSH1	02	 	 
- stack 2: 0x600
- stack 1: 0x6D6
- stack 0: 0x2
3333	 D4	XOR		 	 
- stack 1: 0x600
- stack 0: 0x6D4
3334	 D5	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
3335	 D6	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
3336	 D8	SHR		 	 
- stack 1: 0x600
- stack 0: 0xF00F
3337	 D9	PUSH2	0060	 	 
- stack 2: 0x600
- stack 1: 0xF00F
- stack 0: 0x60
3338	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x600
3339	 DD	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3340	 DF	ADD		 	 
- stack 0: 0x604
3341	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3342	 E1	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x1A1000F016F000F011A0084022F0001024E00020268FFDC0100001101B40000
3343	 E2	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x1A1000F016F000F011A0084022F0001024E00020268FFDC0100001101B40000
- stack 0: 0xF0
3344	 E4	SHR		 	 
- stack 1: 0x604
- stack 0: 0x1A1
3345	 E5	JUMP		 	 
- stack 0: 0x604
3346	 1A1	JUMPDEST		 ;; __riscvimpl_LUI_feb7	  ;; # instr: lui t4,0xf(ignore imm)
- stack 0: 0x604
3347	 1A2	PUSH4	0000f000	 	 
- stack 1: 0x604
- stack 0: 0xF000
3348	 1A7	PUSH2	03A0	 	 
- stack 2: 0x604
- stack 1: 0xF000
- stack 0: 0x3A0
3349	 1AA	MSTORE		 	  ;; # store to x29
- stack 0: 0x604
3350	 1AB	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3351	 1AD	ADD		 	 
- stack 0: 0x608
3352	 1AE	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3353	 1AF	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x16F000F011A0084022F0001024E00020268FFDC0100001101B4000000860000
3354	 1B0	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x16F000F011A0084022F0001024E00020268FFDC0100001101B4000000860000
- stack 0: 0xF0
3355	 1B2	SHR		 	 
- stack 1: 0x608
- stack 0: 0x16F
3356	 1B3	JUMP		 	 
- stack 0: 0x608
3357	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x608
3358	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3359	 171	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x16F000F011A0084022F0001024E00020268FFDC0100001101B4000000860000
3360	 172	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x16F000F011A0084022F0001024E00020268FFDC0100001101B4000000860000
- stack 0: 0xE0
3361	 174	SHR		 	 
- stack 1: 0x608
- stack 0: 0x16F000F
3362	 175	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x16F000F
- stack 0: 0xFFFF
3363	 178	AND		 	 
- stack 1: 0x608
- stack 0: 0xF
3364	 179	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0xF
- stack 0: 0x1
3365	 17B	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0xF
3366	 17C	PUSH2	03A0	 	 
- stack 2: 0x608
- stack 1: 0xF
- stack 0: 0x3A0
3367	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x608
- stack 1: 0xF
- stack 0: 0xF000
3368	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x608
- stack 0: 0xF00F
3369	 181	PUSH2	03A0	 	 
- stack 2: 0x608
- stack 1: 0xF00F
- stack 0: 0x3A0
3370	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x608
3371	 185	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3372	 187	ADD		 	 
- stack 0: 0x60C
3373	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3374	 189	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x11A0084022F0001024E00020268FFDC0100001101B4000000860000009500AC
3375	 18A	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x11A0084022F0001024E00020268FFDC0100001101B4000000860000009500AC
- stack 0: 0xF0
3376	 18C	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x11A
3377	 18D	JUMP		 	 
- stack 0: 0x60C
3378	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x60C
3379	 11B	PUSH2	0060	 	 
- stack 1: 0x60C
- stack 0: 0x60
3380	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x60C
- stack 0: 0xF00F
3381	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0xF00F
- stack 0: 0xFFFFFFFF
3382	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0xF00F
3383	 125	PUSH2	03A0	 	 
- stack 2: 0x60C
- stack 1: 0xF00F
- stack 0: 0x3A0
3384	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x60C
- stack 1: 0xF00F
- stack 0: 0xF00F
3385	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x60C
- stack 2: 0xF00F
- stack 1: 0xF00F
- stack 0: 0xFFFFFFFF
3386	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x60C
- stack 1: 0xF00F
- stack 0: 0xF00F
3387	 12F	SUB		 	 
- stack 1: 0x60C
- stack 0: 0x0
3388	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x138
3389	 133	JUMPI		 	 
- stack 0: 0x60C
3390	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x60C
- stack 0: 0x152
3391	 137	JUMP		 	 
- stack 0: 0x60C
3392	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x60C
3393	 153	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3394	 155	ADD		 	 
- stack 0: 0x610
3395	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3396	 157	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x22F0001024E00020268FFDC0100001101B4000000860000009500AC02AA0000
3397	 158	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x22F0001024E00020268FFDC0100001101B4000000860000009500AC02AA0000
- stack 0: 0xF0
3398	 15A	SHR		 	 
- stack 1: 0x610
- stack 0: 0x22F
3399	 15B	JUMP		 	 
- stack 0: 0x610
3400	 22F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x610
3401	 230	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3402	 231	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x22F0001024E00020268FFDC0100001101B4000000860000009500AC02AA0000
3403	 232	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x22F0001024E00020268FFDC0100001101B4000000860000009500AC02AA0000
- stack 0: 0xE0
3404	 234	SHR		 	 
- stack 1: 0x610
- stack 0: 0x22F0001
3405	 235	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x22F0001
- stack 0: 0xFFFF
3406	 238	AND		 	 
- stack 1: 0x610
- stack 0: 0x1
3407	 239	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x1
3408	 23B	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x1
3409	 23C	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x80
3410	 23F	MLOAD		 	  ;; # read from x4
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x0
3411	 240	ADD		 	  ;; # ADDI 4
- stack 1: 0x610
- stack 0: 0x1
3412	 241	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x80
3413	 244	MSTORE		 	  ;; # store to x4
- stack 0: 0x610
3414	 245	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3415	 247	ADD		 	 
- stack 0: 0x614
3416	 248	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3417	 249	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x24E00020268FFDC0100001101B4000000860000009500AC02AA000002AA0000
3418	 24A	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x24E00020268FFDC0100001101B4000000860000009500AC02AA000002AA0000
- stack 0: 0xF0
3419	 24C	SHR		 	 
- stack 1: 0x614
- stack 0: 0x24E
3420	 24D	JUMP		 	 
- stack 0: 0x614
3421	 24E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x614
3422	 24F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3423	 250	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x24E00020268FFDC0100001101B4000000860000009500AC02AA000002AA0000
3424	 251	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x24E00020268FFDC0100001101B4000000860000009500AC02AA000002AA0000
- stack 0: 0xE0
3425	 253	SHR		 	 
- stack 1: 0x614
- stack 0: 0x24E0002
3426	 254	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x24E0002
- stack 0: 0xFFFF
3427	 257	AND		 	 
- stack 1: 0x614
- stack 0: 0x2
3428	 258	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0x1
3429	 25A	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x2
3430	 25B	PUSH2	00A0	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0xA0
3431	 25E	MSTORE		 	  ;; # store to x5
- stack 0: 0x614
3432	 25F	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3433	 261	ADD		 	 
- stack 0: 0x618
3434	 262	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3435	 263	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x268FFDC0100001101B4000000860000009500AC02AA000002AA000000B40002
3436	 264	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x268FFDC0100001101B4000000860000009500AC02AA000002AA000000B40002
- stack 0: 0xF0
3437	 266	SHR		 	 
- stack 1: 0x618
- stack 0: 0x268
3438	 267	JUMP		 	 
- stack 0: 0x618
3439	 268	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x618
3440	 269	PUSH2	0080	 	 
- stack 1: 0x618
- stack 0: 0x80
3441	 26C	MLOAD		 	  ;; # read from x4
- stack 1: 0x618
- stack 0: 0x1
3442	 26D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3443	 272	AND		 	  ;; # mask to 32 bits
- stack 1: 0x618
- stack 0: 0x1
3444	 273	PUSH2	00A0	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0xA0
3445	 276	MLOAD		 	  ;; # read from x5
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x2
3446	 277	PUSH4	FFFFFFFF	 	 
- stack 3: 0x618
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3447	 27C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x2
3448	 27D	SUB		 	 
- stack 1: 0x618
- stack 0: 0x1
3449	 27E	PUSH2	0286	 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x286
3450	 281	JUMPI		 	 
- stack 0: 0x618
3451	 286	JUMPDEST		 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 0: 0x618
3452	 287	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3453	 288	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x268FFDC0100001101B4000000860000009500AC02AA000002AA000000B40002
3454	 289	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x268FFDC0100001101B4000000860000009500AC02AA000002AA000000B40002
- stack 0: 0xE0
3455	 28B	SHR		 	 
- stack 1: 0x618
- stack 0: 0x268FFDC
3456	 28C	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x268FFDC
- stack 0: 0xFFFF
3457	 28F	AND		 	 
- stack 1: 0x618
- stack 0: 0xFFDC
3458	 290	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0xFFDC
- stack 0: 0x1
3459	 292	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
3460	 293	ADD		 	 
- stack 0: 0x5F4
3461	 294	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFF
3462	 299	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5F4
3463	 29A	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3464	 29B	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x860000009500E002AA000000B4000201A1000F016F000F011A0084022F0001
3465	 29C	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x860000009500E002AA000000B4000201A1000F016F000F011A0084022F0001
- stack 0: 0xF0
3466	 29E	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x86
3467	 29F	JUMP		 	 
- stack 0: 0x5F4
3468	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5F4
3469	 87	DUP1		 	 
- stack 1: 0x5F4
- stack 0: 0x5F4
3470	 88	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0x5F4
- stack 0: 0x20
3471	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F4
3472	 8C	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3473	 8E	ADD		 	 
- stack 0: 0x5F8
3474	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3475	 90	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x9500E002AA000000B4000201A1000F016F000F011A0084022F0001024E0002
3476	 91	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x9500E002AA000000B4000201A1000F016F000F011A0084022F0001024E0002
- stack 0: 0xF0
3477	 93	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x95
3478	 94	JUMP		 	 
- stack 0: 0x5F8
3479	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x5F8
3480	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3481	 97	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x9500E002AA000000B4000201A1000F016F000F011A0084022F0001024E0002
3482	 98	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x9500E002AA000000B4000201A1000F016F000F011A0084022F0001024E0002
- stack 0: 0xE0
3483	 9A	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x9500E0
3484	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x9500E0
- stack 0: 0xFFFF
3485	 9E	AND		 	 
- stack 1: 0x5F8
- stack 0: 0xE0
3486	 9F	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xE0
- stack 0: 0x1
3487	 A1	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xE0
3488	 A2	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0xE0
- stack 0: 0x20
3489	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F8
- stack 1: 0xE0
- stack 0: 0x5F4
3490	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F8
- stack 0: 0x6D4
3491	 A7	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0x6D4
- stack 0: 0x20
3492	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F8
3493	 AB	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3494	 AD	ADD		 	 
- stack 0: 0x5FC
3495	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3496	 AF	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x2AA000000B4000201A1000F016F000F011A0084022F0001024E00020268FFDC
3497	 B0	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x2AA000000B4000201A1000F016F000F011A0084022F0001024E00020268FFDC
- stack 0: 0xF0
3498	 B2	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x2AA
3499	 B3	JUMP		 	 
- stack 0: 0x5FC
3500	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5FC
3501	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3502	 2AC	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x2AA000000B4000201A1000F016F000F011A0084022F0001024E00020268FFDC
3503	 2AD	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x2AA000000B4000201A1000F016F000F011A0084022F0001024E00020268FFDC
- stack 0: 0xE0
3504	 2AF	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x2AA0000
3505	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x2AA0000
- stack 0: 0xFFFF
3506	 2B3	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3507	 2B4	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
3508	 2B6	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3509	 2B7	POP		 	 
- stack 0: 0x5FC
3510	 2B8	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3511	 2BA	ADD		 	 
- stack 0: 0x600
3512	 2BB	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3513	 2BC	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xB4000201A1000F016F000F011A0084022F0001024E00020268FFDC01000011
3514	 2BD	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xB4000201A1000F016F000F011A0084022F0001024E00020268FFDC01000011
- stack 0: 0xF0
3515	 2BF	SHR		 	 
- stack 1: 0x600
- stack 0: 0xB4
3516	 2C0	JUMP		 	 
- stack 0: 0x600
3517	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x600
3518	 B5	PUSH2	0020	 	 
- stack 1: 0x600
- stack 0: 0x20
3519	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x600
- stack 0: 0x6D4
3520	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x600
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFF
3521	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x600
- stack 0: 0x6D4
3522	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x600
- stack 1: 0x6D4
- stack 0: 0x600
3523	 C0	MLOAD		 	 
- stack 2: 0x600
- stack 1: 0x6D4
- stack 0: 0xB4000201A1000F016F000F011A0084022F0001024E00020268FFDC01000011
3524	 C1	PUSH1	E0	 	 
- stack 3: 0x600
- stack 2: 0x6D4
- stack 1: 0xB4000201A1000F016F000F011A0084022F0001024E00020268FFDC01000011
- stack 0: 0xE0
3525	 C3	SHR		 	 
- stack 2: 0x600
- stack 1: 0x6D4
- stack 0: 0xB40002
3526	 C4	PUSH2	FFFF	 	 
- stack 3: 0x600
- stack 2: 0x6D4
- stack 1: 0xB40002
- stack 0: 0xFFFF
3527	 C7	AND		 	 
- stack 2: 0x600
- stack 1: 0x6D4
- stack 0: 0x2
3528	 C8	PUSH1	01	 	 
- stack 3: 0x600
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0x1
3529	 CA	SIGNEXTEND		 	 
- stack 2: 0x600
- stack 1: 0x6D4
- stack 0: 0x2
3530	 CB	ADD		 	 
- stack 1: 0x600
- stack 0: 0x6D6
3531	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x600
- stack 1: 0x6D6
- stack 0: 0xFFFFFFFF
3532	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x600
- stack 0: 0x6D6
3533	 D2	PUSH1	02	 	 
- stack 2: 0x600
- stack 1: 0x6D6
- stack 0: 0x2
3534	 D4	XOR		 	 
- stack 1: 0x600
- stack 0: 0x6D4
3535	 D5	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
3536	 D6	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xF00F0FF000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
3537	 D8	SHR		 	 
- stack 1: 0x600
- stack 0: 0xF00F
3538	 D9	PUSH2	0060	 	 
- stack 2: 0x600
- stack 1: 0xF00F
- stack 0: 0x60
3539	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x600
3540	 DD	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3541	 DF	ADD		 	 
- stack 0: 0x604
3542	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3543	 E1	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x1A1000F016F000F011A0084022F0001024E00020268FFDC0100001101B40000
3544	 E2	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x1A1000F016F000F011A0084022F0001024E00020268FFDC0100001101B40000
- stack 0: 0xF0
3545	 E4	SHR		 	 
- stack 1: 0x604
- stack 0: 0x1A1
3546	 E5	JUMP		 	 
- stack 0: 0x604
3547	 1A1	JUMPDEST		 ;; __riscvimpl_LUI_feb7	  ;; # instr: lui t4,0xf(ignore imm)
- stack 0: 0x604
3548	 1A2	PUSH4	0000f000	 	 
- stack 1: 0x604
- stack 0: 0xF000
3549	 1A7	PUSH2	03A0	 	 
- stack 2: 0x604
- stack 1: 0xF000
- stack 0: 0x3A0
3550	 1AA	MSTORE		 	  ;; # store to x29
- stack 0: 0x604
3551	 1AB	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3552	 1AD	ADD		 	 
- stack 0: 0x608
3553	 1AE	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3554	 1AF	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x16F000F011A0084022F0001024E00020268FFDC0100001101B4000000860000
3555	 1B0	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x16F000F011A0084022F0001024E00020268FFDC0100001101B4000000860000
- stack 0: 0xF0
3556	 1B2	SHR		 	 
- stack 1: 0x608
- stack 0: 0x16F
3557	 1B3	JUMP		 	 
- stack 0: 0x608
3558	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x608
3559	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3560	 171	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x16F000F011A0084022F0001024E00020268FFDC0100001101B4000000860000
3561	 172	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x16F000F011A0084022F0001024E00020268FFDC0100001101B4000000860000
- stack 0: 0xE0
3562	 174	SHR		 	 
- stack 1: 0x608
- stack 0: 0x16F000F
3563	 175	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x16F000F
- stack 0: 0xFFFF
3564	 178	AND		 	 
- stack 1: 0x608
- stack 0: 0xF
3565	 179	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0xF
- stack 0: 0x1
3566	 17B	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0xF
3567	 17C	PUSH2	03A0	 	 
- stack 2: 0x608
- stack 1: 0xF
- stack 0: 0x3A0
3568	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x608
- stack 1: 0xF
- stack 0: 0xF000
3569	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x608
- stack 0: 0xF00F
3570	 181	PUSH2	03A0	 	 
- stack 2: 0x608
- stack 1: 0xF00F
- stack 0: 0x3A0
3571	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x608
3572	 185	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3573	 187	ADD		 	 
- stack 0: 0x60C
3574	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3575	 189	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x11A0084022F0001024E00020268FFDC0100001101B4000000860000009500AC
3576	 18A	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x11A0084022F0001024E00020268FFDC0100001101B4000000860000009500AC
- stack 0: 0xF0
3577	 18C	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x11A
3578	 18D	JUMP		 	 
- stack 0: 0x60C
3579	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x60C
3580	 11B	PUSH2	0060	 	 
- stack 1: 0x60C
- stack 0: 0x60
3581	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x60C
- stack 0: 0xF00F
3582	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0xF00F
- stack 0: 0xFFFFFFFF
3583	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0xF00F
3584	 125	PUSH2	03A0	 	 
- stack 2: 0x60C
- stack 1: 0xF00F
- stack 0: 0x3A0
3585	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x60C
- stack 1: 0xF00F
- stack 0: 0xF00F
3586	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x60C
- stack 2: 0xF00F
- stack 1: 0xF00F
- stack 0: 0xFFFFFFFF
3587	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x60C
- stack 1: 0xF00F
- stack 0: 0xF00F
3588	 12F	SUB		 	 
- stack 1: 0x60C
- stack 0: 0x0
3589	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x138
3590	 133	JUMPI		 	 
- stack 0: 0x60C
3591	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x60C
- stack 0: 0x152
3592	 137	JUMP		 	 
- stack 0: 0x60C
3593	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x60C
3594	 153	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3595	 155	ADD		 	 
- stack 0: 0x610
3596	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3597	 157	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x22F0001024E00020268FFDC0100001101B4000000860000009500AC02AA0000
3598	 158	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x22F0001024E00020268FFDC0100001101B4000000860000009500AC02AA0000
- stack 0: 0xF0
3599	 15A	SHR		 	 
- stack 1: 0x610
- stack 0: 0x22F
3600	 15B	JUMP		 	 
- stack 0: 0x610
3601	 22F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x610
3602	 230	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3603	 231	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x22F0001024E00020268FFDC0100001101B4000000860000009500AC02AA0000
3604	 232	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x22F0001024E00020268FFDC0100001101B4000000860000009500AC02AA0000
- stack 0: 0xE0
3605	 234	SHR		 	 
- stack 1: 0x610
- stack 0: 0x22F0001
3606	 235	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x22F0001
- stack 0: 0xFFFF
3607	 238	AND		 	 
- stack 1: 0x610
- stack 0: 0x1
3608	 239	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x1
3609	 23B	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x1
3610	 23C	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x80
3611	 23F	MLOAD		 	  ;; # read from x4
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x1
3612	 240	ADD		 	  ;; # ADDI 4
- stack 1: 0x610
- stack 0: 0x2
3613	 241	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0x80
3614	 244	MSTORE		 	  ;; # store to x4
- stack 0: 0x610
3615	 245	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3616	 247	ADD		 	 
- stack 0: 0x614
3617	 248	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3618	 249	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x24E00020268FFDC0100001101B4000000860000009500AC02AA000002AA0000
3619	 24A	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x24E00020268FFDC0100001101B4000000860000009500AC02AA000002AA0000
- stack 0: 0xF0
3620	 24C	SHR		 	 
- stack 1: 0x614
- stack 0: 0x24E
3621	 24D	JUMP		 	 
- stack 0: 0x614
3622	 24E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x614
3623	 24F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3624	 250	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x24E00020268FFDC0100001101B4000000860000009500AC02AA000002AA0000
3625	 251	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x24E00020268FFDC0100001101B4000000860000009500AC02AA000002AA0000
- stack 0: 0xE0
3626	 253	SHR		 	 
- stack 1: 0x614
- stack 0: 0x24E0002
3627	 254	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x24E0002
- stack 0: 0xFFFF
3628	 257	AND		 	 
- stack 1: 0x614
- stack 0: 0x2
3629	 258	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0x1
3630	 25A	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x2
3631	 25B	PUSH2	00A0	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0xA0
3632	 25E	MSTORE		 	  ;; # store to x5
- stack 0: 0x614
3633	 25F	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3634	 261	ADD		 	 
- stack 0: 0x618
3635	 262	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3636	 263	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x268FFDC0100001101B4000000860000009500AC02AA000002AA000000B40002
3637	 264	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x268FFDC0100001101B4000000860000009500AC02AA000002AA000000B40002
- stack 0: 0xF0
3638	 266	SHR		 	 
- stack 1: 0x618
- stack 0: 0x268
3639	 267	JUMP		 	 
- stack 0: 0x618
3640	 268	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x618
3641	 269	PUSH2	0080	 	 
- stack 1: 0x618
- stack 0: 0x80
3642	 26C	MLOAD		 	  ;; # read from x4
- stack 1: 0x618
- stack 0: 0x2
3643	 26D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3644	 272	AND		 	  ;; # mask to 32 bits
- stack 1: 0x618
- stack 0: 0x2
3645	 273	PUSH2	00A0	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0xA0
3646	 276	MLOAD		 	  ;; # read from x5
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0x2
3647	 277	PUSH4	FFFFFFFF	 	 
- stack 3: 0x618
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3648	 27C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0x2
3649	 27D	SUB		 	 
- stack 1: 0x618
- stack 0: 0x0
3650	 27E	PUSH2	0286	 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x286
3651	 281	JUMPI		 	 
- stack 0: 0x618
3652	 282	PUSH2	02A0	 ;; _neq_after_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 1: 0x618
- stack 0: 0x2A0
3653	 285	JUMP		 	 
- stack 0: 0x618
3654	 2A0	JUMPDEST		 ;; _neq_after_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 0: 0x618
3655	 2A1	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3656	 2A3	ADD		 	 
- stack 0: 0x61C
3657	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3658	 2A5	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x100001101B4000000860000009500AC02AA000002AA000000B40002015C0010
3659	 2A6	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x100001101B4000000860000009500AC02AA000002AA000000B40002015C0010
- stack 0: 0xF0
3660	 2A8	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x100
3661	 2A9	JUMP		 	 
- stack 0: 0x61C
3662	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x61C
3663	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3664	 102	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x100001101B4000000860000009500AC02AA000002AA000000B40002015C0010
3665	 103	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x100001101B4000000860000009500AC02AA000002AA000000B40002015C0010
- stack 0: 0xE0
3666	 105	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x1000011
3667	 106	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x1000011
- stack 0: 0xFFFF
3668	 109	AND		 	 
- stack 1: 0x61C
- stack 0: 0x11
3669	 10A	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x11
- stack 0: 0x1
3670	 10C	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x11
3671	 10D	PUSH2	0380	 	 
- stack 2: 0x61C
- stack 1: 0x11
- stack 0: 0x380
3672	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x61C
3673	 111	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3674	 113	ADD		 	 
- stack 0: 0x620
3675	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3676	 115	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x1B4000000860000009500AC02AA000002AA000000B40002015C0010016FFF00
3677	 116	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x1B4000000860000009500AC02AA000002AA000000B40002015C0010016FFF00
- stack 0: 0xF0
3678	 118	SHR		 	 
- stack 1: 0x620
- stack 0: 0x1B4
3679	 119	JUMP		 	 
- stack 0: 0x620
3680	 1B4	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x620
3681	 1B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3682	 1B6	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x1B4000000860000009500AC02AA000002AA000000B40002015C0010016FFF00
3683	 1B7	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x1B4000000860000009500AC02AA000002AA000000B40002015C0010016FFF00
- stack 0: 0xE0
3684	 1B9	SHR		 	 
- stack 1: 0x620
- stack 0: 0x1B40000
3685	 1BA	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x1B40000
- stack 0: 0xFFFF
3686	 1BD	AND		 	 
- stack 1: 0x620
- stack 0: 0x0
3687	 1BE	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x1
3688	 1C0	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x0
3689	 1C1	PUSH2	0080	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x80
3690	 1C4	MSTORE		 	  ;; # store to x4
- stack 0: 0x620
3691	 1C5	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3692	 1C7	ADD		 	 
- stack 0: 0x624
3693	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3694	 1C9	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x860000009500AC02AA000002AA000000B40002015C0010016FFF00011A0050
3695	 1CA	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x860000009500AC02AA000002AA000000B40002015C0010016FFF00011A0050
- stack 0: 0xF0
3696	 1CC	SHR		 	 
- stack 1: 0x624
- stack 0: 0x86
3697	 1CD	JUMP		 	 
- stack 0: 0x624
3698	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x624
3699	 87	DUP1		 	 
- stack 1: 0x624
- stack 0: 0x624
3700	 88	PUSH2	0020	 	 
- stack 2: 0x624
- stack 1: 0x624
- stack 0: 0x20
3701	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x624
3702	 8C	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3703	 8E	ADD		 	 
- stack 0: 0x628
3704	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3705	 90	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x9500AC02AA000002AA000000B40002015C0010016FFF00011A0050022F0001
3706	 91	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x9500AC02AA000002AA000000B40002015C0010016FFF00011A0050022F0001
- stack 0: 0xF0
3707	 93	SHR		 	 
- stack 1: 0x628
- stack 0: 0x95
3708	 94	JUMP		 	 
- stack 0: 0x628
3709	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x628
3710	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3711	 97	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x9500AC02AA000002AA000000B40002015C0010016FFF00011A0050022F0001
3712	 98	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x9500AC02AA000002AA000000B40002015C0010016FFF00011A0050022F0001
- stack 0: 0xE0
3713	 9A	SHR		 	 
- stack 1: 0x628
- stack 0: 0x9500AC
3714	 9B	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x9500AC
- stack 0: 0xFFFF
3715	 9E	AND		 	 
- stack 1: 0x628
- stack 0: 0xAC
3716	 9F	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0xAC
- stack 0: 0x1
3717	 A1	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xAC
3718	 A2	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xAC
- stack 0: 0x20
3719	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x628
- stack 1: 0xAC
- stack 0: 0x624
3720	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x628
- stack 0: 0x6D0
3721	 A7	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0x6D0
- stack 0: 0x20
3722	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x628
3723	 AB	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3724	 AD	ADD		 	 
- stack 0: 0x62C
3725	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3726	 AF	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x2AA000002AA000000B40002015C0010016FFF00011A0050022F0001024E0002
3727	 B0	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x2AA000002AA000000B40002015C0010016FFF00011A0050022F0001024E0002
- stack 0: 0xF0
3728	 B2	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x2AA
3729	 B3	JUMP		 	 
- stack 0: 0x62C
3730	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x62C
3731	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3732	 2AC	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x2AA000002AA000000B40002015C0010016FFF00011A0050022F0001024E0002
3733	 2AD	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x2AA000002AA000000B40002015C0010016FFF00011A0050022F0001024E0002
- stack 0: 0xE0
3734	 2AF	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x2AA0000
3735	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x2AA0000
- stack 0: 0xFFFF
3736	 2B3	AND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3737	 2B4	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x1
3738	 2B6	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3739	 2B7	POP		 	 
- stack 0: 0x62C
3740	 2B8	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3741	 2BA	ADD		 	 
- stack 0: 0x630
3742	 2BB	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3743	 2BC	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x2AA000000B40002015C0010016FFF00011A0050022F0001024E00020268FFD8
3744	 2BD	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x2AA000000B40002015C0010016FFF00011A0050022F0001024E00020268FFD8
- stack 0: 0xF0
3745	 2BF	SHR		 	 
- stack 1: 0x630
- stack 0: 0x2AA
3746	 2C0	JUMP		 	 
- stack 0: 0x630
3747	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x630
3748	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3749	 2AC	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x2AA000000B40002015C0010016FFF00011A0050022F0001024E00020268FFD8
3750	 2AD	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x2AA000000B40002015C0010016FFF00011A0050022F0001024E00020268FFD8
- stack 0: 0xE0
3751	 2AF	SHR		 	 
- stack 1: 0x630
- stack 0: 0x2AA0000
3752	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x2AA0000
- stack 0: 0xFFFF
3753	 2B3	AND		 	 
- stack 1: 0x630
- stack 0: 0x0
3754	 2B4	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x1
3755	 2B6	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x0
3756	 2B7	POP		 	 
- stack 0: 0x630
3757	 2B8	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3758	 2BA	ADD		 	 
- stack 0: 0x634
3759	 2BB	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3760	 2BC	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xB40002015C0010016FFF00011A0050022F0001024E00020268FFD802C10000
3761	 2BD	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0xB40002015C0010016FFF00011A0050022F0001024E00020268FFD802C10000
- stack 0: 0xF0
3762	 2BF	SHR		 	 
- stack 1: 0x634
- stack 0: 0xB4
3763	 2C0	JUMP		 	 
- stack 0: 0x634
3764	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x634
3765	 B5	PUSH2	0020	 	 
- stack 1: 0x634
- stack 0: 0x20
3766	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x634
- stack 0: 0x6D0
3767	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x634
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFF
3768	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x634
- stack 0: 0x6D0
3769	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x634
- stack 1: 0x6D0
- stack 0: 0x634
3770	 C0	MLOAD		 	 
- stack 2: 0x634
- stack 1: 0x6D0
- stack 0: 0xB40002015C0010016FFF00011A0050022F0001024E00020268FFD802C10000
3771	 C1	PUSH1	E0	 	 
- stack 3: 0x634
- stack 2: 0x6D0
- stack 1: 0xB40002015C0010016FFF00011A0050022F0001024E00020268FFD802C10000
- stack 0: 0xE0
3772	 C3	SHR		 	 
- stack 2: 0x634
- stack 1: 0x6D0
- stack 0: 0xB40002
3773	 C4	PUSH2	FFFF	 	 
- stack 3: 0x634
- stack 2: 0x6D0
- stack 1: 0xB40002
- stack 0: 0xFFFF
3774	 C7	AND		 	 
- stack 2: 0x634
- stack 1: 0x6D0
- stack 0: 0x2
3775	 C8	PUSH1	01	 	 
- stack 3: 0x634
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0x1
3776	 CA	SIGNEXTEND		 	 
- stack 2: 0x634
- stack 1: 0x6D0
- stack 0: 0x2
3777	 CB	ADD		 	 
- stack 1: 0x634
- stack 0: 0x6D2
3778	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x634
- stack 1: 0x6D2
- stack 0: 0xFFFFFFFF
3779	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x634
- stack 0: 0x6D2
3780	 D2	PUSH1	02	 	 
- stack 2: 0x634
- stack 1: 0x6D2
- stack 0: 0x2
3781	 D4	XOR		 	 
- stack 1: 0x634
- stack 0: 0x6D0
3782	 D5	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
3783	 D6	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
- stack 0: 0xF0
3784	 D8	SHR		 	 
- stack 1: 0x634
- stack 0: 0xFF00
3785	 D9	PUSH2	0060	 	 
- stack 2: 0x634
- stack 1: 0xFF00
- stack 0: 0x60
3786	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x634
3787	 DD	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3788	 DF	ADD		 	 
- stack 0: 0x638
3789	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3790	 E1	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x15C0010016FFF00011A0050022F0001024E00020268FFD802C1000002D00080
3791	 E2	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x15C0010016FFF00011A0050022F0001024E00020268FFD802C1000002D00080
- stack 0: 0xF0
3792	 E4	SHR		 	 
- stack 1: 0x638
- stack 0: 0x15C
3793	 E5	JUMP		 	 
- stack 0: 0x638
3794	 15C	JUMPDEST		 ;; __riscvimpl_LUI_10eb7	  ;; # instr: lui t4,0x10(ignore imm)
- stack 0: 0x638
3795	 15D	PUSH4	00010000	 	 
- stack 1: 0x638
- stack 0: 0x10000
3796	 162	PUSH2	03A0	 	 
- stack 2: 0x638
- stack 1: 0x10000
- stack 0: 0x3A0
3797	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x638
3798	 166	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3799	 168	ADD		 	 
- stack 0: 0x63C
3800	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3801	 16A	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x16FFF00011A0050022F0001024E00020268FFD802C1000002D0008002EF0000
3802	 16B	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x16FFF00011A0050022F0001024E00020268FFD802C1000002D0008002EF0000
- stack 0: 0xF0
3803	 16D	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x16F
3804	 16E	JUMP		 	 
- stack 0: 0x63C
3805	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x63C
3806	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3807	 171	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x16FFF00011A0050022F0001024E00020268FFD802C1000002D0008002EF0000
3808	 172	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x16FFF00011A0050022F0001024E00020268FFD802C1000002D0008002EF0000
- stack 0: 0xE0
3809	 174	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x16FFF00
3810	 175	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x16FFF00
- stack 0: 0xFFFF
3811	 178	AND		 	 
- stack 1: 0x63C
- stack 0: 0xFF00
3812	 179	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0xFF00
- stack 0: 0x1
3813	 17B	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3814	 17C	PUSH2	03A0	 	 
- stack 2: 0x63C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
3815	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x63C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x10000
3816	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x63C
- stack 0: 0xFF00
3817	 181	PUSH2	03A0	 	 
- stack 2: 0x63C
- stack 1: 0xFF00
- stack 0: 0x3A0
3818	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x63C
3819	 185	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3820	 187	ADD		 	 
- stack 0: 0x640
3821	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3822	 189	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x11A0050022F0001024E00020268FFD802C1000002D0008002EF000003210002
3823	 18A	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x11A0050022F0001024E00020268FFD802C1000002D0008002EF000003210002
- stack 0: 0xF0
3824	 18C	SHR		 	 
- stack 1: 0x640
- stack 0: 0x11A
3825	 18D	JUMP		 	 
- stack 0: 0x640
3826	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x640
3827	 11B	PUSH2	0060	 	 
- stack 1: 0x640
- stack 0: 0x60
3828	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x640
- stack 0: 0xFF00
3829	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x640
- stack 1: 0xFF00
- stack 0: 0xFFFFFFFF
3830	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x640
- stack 0: 0xFF00
3831	 125	PUSH2	03A0	 	 
- stack 2: 0x640
- stack 1: 0xFF00
- stack 0: 0x3A0
3832	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x640
- stack 1: 0xFF00
- stack 0: 0xFF00
3833	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x640
- stack 2: 0xFF00
- stack 1: 0xFF00
- stack 0: 0xFFFFFFFF
3834	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x640
- stack 1: 0xFF00
- stack 0: 0xFF00
3835	 12F	SUB		 	 
- stack 1: 0x640
- stack 0: 0x0
3836	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x138
3837	 133	JUMPI		 	 
- stack 0: 0x640
3838	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x640
- stack 0: 0x152
3839	 137	JUMP		 	 
- stack 0: 0x640
3840	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x640
3841	 153	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3842	 155	ADD		 	 
- stack 0: 0x644
3843	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3844	 157	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x22F0001024E00020268FFD802C1000002D0008002EF00000321000200E60002
3845	 158	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x22F0001024E00020268FFD802C1000002D0008002EF00000321000200E60002
- stack 0: 0xF0
3846	 15A	SHR		 	 
- stack 1: 0x644
- stack 0: 0x22F
3847	 15B	JUMP		 	 
- stack 0: 0x644
3848	 22F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x644
3849	 230	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3850	 231	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x22F0001024E00020268FFD802C1000002D0008002EF00000321000200E60002
3851	 232	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x22F0001024E00020268FFD802C1000002D0008002EF00000321000200E60002
- stack 0: 0xE0
3852	 234	SHR		 	 
- stack 1: 0x644
- stack 0: 0x22F0001
3853	 235	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x22F0001
- stack 0: 0xFFFF
3854	 238	AND		 	 
- stack 1: 0x644
- stack 0: 0x1
3855	 239	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
3856	 23B	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x1
3857	 23C	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x80
3858	 23F	MLOAD		 	  ;; # read from x4
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x0
3859	 240	ADD		 	  ;; # ADDI 4
- stack 1: 0x644
- stack 0: 0x1
3860	 241	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x80
3861	 244	MSTORE		 	  ;; # store to x4
- stack 0: 0x644
3862	 245	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3863	 247	ADD		 	 
- stack 0: 0x648
3864	 248	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3865	 249	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x24E00020268FFD802C1000002D0008002EF00000321000200E6000201000012
3866	 24A	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x24E00020268FFD802C1000002D0008002EF00000321000200E6000201000012
- stack 0: 0xF0
3867	 24C	SHR		 	 
- stack 1: 0x648
- stack 0: 0x24E
3868	 24D	JUMP		 	 
- stack 0: 0x648
3869	 24E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x648
3870	 24F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3871	 250	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x24E00020268FFD802C1000002D0008002EF00000321000200E6000201000012
3872	 251	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x24E00020268FFD802C1000002D0008002EF00000321000200E6000201000012
- stack 0: 0xE0
3873	 253	SHR		 	 
- stack 1: 0x648
- stack 0: 0x24E0002
3874	 254	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x24E0002
- stack 0: 0xFFFF
3875	 257	AND		 	 
- stack 1: 0x648
- stack 0: 0x2
3876	 258	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x1
3877	 25A	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x2
3878	 25B	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xA0
3879	 25E	MSTORE		 	  ;; # store to x5
- stack 0: 0x648
3880	 25F	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3881	 261	ADD		 	 
- stack 0: 0x64C
3882	 262	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3883	 263	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x268FFD802C1000002D0008002EF00000321000200E6000201000012033B0028
3884	 264	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x268FFD802C1000002D0008002EF00000321000200E6000201000012033B0028
- stack 0: 0xF0
3885	 266	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x268
3886	 267	JUMP		 	 
- stack 0: 0x64C
3887	 268	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x64C
3888	 269	PUSH2	0080	 	 
- stack 1: 0x64C
- stack 0: 0x80
3889	 26C	MLOAD		 	  ;; # read from x4
- stack 1: 0x64C
- stack 0: 0x1
3890	 26D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3891	 272	AND		 	  ;; # mask to 32 bits
- stack 1: 0x64C
- stack 0: 0x1
3892	 273	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0xA0
3893	 276	MLOAD		 	  ;; # read from x5
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x2
3894	 277	PUSH4	FFFFFFFF	 	 
- stack 3: 0x64C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3895	 27C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x2
3896	 27D	SUB		 	 
- stack 1: 0x64C
- stack 0: 0x1
3897	 27E	PUSH2	0286	 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x286
3898	 281	JUMPI		 	 
- stack 0: 0x64C
3899	 286	JUMPDEST		 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 0: 0x64C
3900	 287	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3901	 288	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x268FFD802C1000002D0008002EF00000321000200E6000201000012033B0028
3902	 289	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x268FFD802C1000002D0008002EF00000321000200E6000201000012033B0028
- stack 0: 0xE0
3903	 28B	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x268FFD8
3904	 28C	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x268FFD8
- stack 0: 0xFFFF
3905	 28F	AND		 	 
- stack 1: 0x64C
- stack 0: 0xFFD8
3906	 290	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0xFFD8
- stack 0: 0x1
3907	 292	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
3908	 293	ADD		 	 
- stack 0: 0x624
3909	 294	PUSH4	FFFFFFFF	 	 
- stack 1: 0x624
- stack 0: 0xFFFFFFFF
3910	 299	AND		 	  ;; # mask to 32 bits
- stack 0: 0x624
3911	 29A	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3912	 29B	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x860000009500AC02AA000002AA000000B40002015C0010016FFF00011A0050
3913	 29C	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x860000009500AC02AA000002AA000000B40002015C0010016FFF00011A0050
- stack 0: 0xF0
3914	 29E	SHR		 	 
- stack 1: 0x624
- stack 0: 0x86
3915	 29F	JUMP		 	 
- stack 0: 0x624
3916	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x624
3917	 87	DUP1		 	 
- stack 1: 0x624
- stack 0: 0x624
3918	 88	PUSH2	0020	 	 
- stack 2: 0x624
- stack 1: 0x624
- stack 0: 0x20
3919	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x624
3920	 8C	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3921	 8E	ADD		 	 
- stack 0: 0x628
3922	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3923	 90	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x9500AC02AA000002AA000000B40002015C0010016FFF00011A0050022F0001
3924	 91	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x9500AC02AA000002AA000000B40002015C0010016FFF00011A0050022F0001
- stack 0: 0xF0
3925	 93	SHR		 	 
- stack 1: 0x628
- stack 0: 0x95
3926	 94	JUMP		 	 
- stack 0: 0x628
3927	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,704(ignore imm)
- stack 0: 0x628
3928	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3929	 97	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x9500AC02AA000002AA000000B40002015C0010016FFF00011A0050022F0001
3930	 98	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x9500AC02AA000002AA000000B40002015C0010016FFF00011A0050022F0001
- stack 0: 0xE0
3931	 9A	SHR		 	 
- stack 1: 0x628
- stack 0: 0x9500AC
3932	 9B	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x9500AC
- stack 0: 0xFFFF
3933	 9E	AND		 	 
- stack 1: 0x628
- stack 0: 0xAC
3934	 9F	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0xAC
- stack 0: 0x1
3935	 A1	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xAC
3936	 A2	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xAC
- stack 0: 0x20
3937	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x628
- stack 1: 0xAC
- stack 0: 0x624
3938	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x628
- stack 0: 0x6D0
3939	 A7	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0x6D0
- stack 0: 0x20
3940	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x628
3941	 AB	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3942	 AD	ADD		 	 
- stack 0: 0x62C
3943	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3944	 AF	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x2AA000002AA000000B40002015C0010016FFF00011A0050022F0001024E0002
3945	 B0	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x2AA000002AA000000B40002015C0010016FFF00011A0050022F0001024E0002
- stack 0: 0xF0
3946	 B2	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x2AA
3947	 B3	JUMP		 	 
- stack 0: 0x62C
3948	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x62C
3949	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3950	 2AC	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x2AA000002AA000000B40002015C0010016FFF00011A0050022F0001024E0002
3951	 2AD	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x2AA000002AA000000B40002015C0010016FFF00011A0050022F0001024E0002
- stack 0: 0xE0
3952	 2AF	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x2AA0000
3953	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x2AA0000
- stack 0: 0xFFFF
3954	 2B3	AND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3955	 2B4	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x1
3956	 2B6	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3957	 2B7	POP		 	 
- stack 0: 0x62C
3958	 2B8	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3959	 2BA	ADD		 	 
- stack 0: 0x630
3960	 2BB	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3961	 2BC	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x2AA000000B40002015C0010016FFF00011A0050022F0001024E00020268FFD8
3962	 2BD	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x2AA000000B40002015C0010016FFF00011A0050022F0001024E00020268FFD8
- stack 0: 0xF0
3963	 2BF	SHR		 	 
- stack 1: 0x630
- stack 0: 0x2AA
3964	 2C0	JUMP		 	 
- stack 0: 0x630
3965	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x630
3966	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3967	 2AC	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x2AA000000B40002015C0010016FFF00011A0050022F0001024E00020268FFD8
3968	 2AD	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x2AA000000B40002015C0010016FFF00011A0050022F0001024E00020268FFD8
- stack 0: 0xE0
3969	 2AF	SHR		 	 
- stack 1: 0x630
- stack 0: 0x2AA0000
3970	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x2AA0000
- stack 0: 0xFFFF
3971	 2B3	AND		 	 
- stack 1: 0x630
- stack 0: 0x0
3972	 2B4	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x1
3973	 2B6	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x0
3974	 2B7	POP		 	 
- stack 0: 0x630
3975	 2B8	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3976	 2BA	ADD		 	 
- stack 0: 0x634
3977	 2BB	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3978	 2BC	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xB40002015C0010016FFF00011A0050022F0001024E00020268FFD802C10000
3979	 2BD	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0xB40002015C0010016FFF00011A0050022F0001024E00020268FFD802C10000
- stack 0: 0xF0
3980	 2BF	SHR		 	 
- stack 1: 0x634
- stack 0: 0xB4
3981	 2C0	JUMP		 	 
- stack 0: 0x634
3982	 B4	JUMPDEST		 ;; __riscvimpl_LHU_3_1_0	  ;; # instr: lhu gp,0(ra)(ignore imm)
- stack 0: 0x634
3983	 B5	PUSH2	0020	 	 
- stack 1: 0x634
- stack 0: 0x20
3984	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x634
- stack 0: 0x6D0
3985	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x634
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFF
3986	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x634
- stack 0: 0x6D0
3987	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x634
- stack 1: 0x6D0
- stack 0: 0x634
3988	 C0	MLOAD		 	 
- stack 2: 0x634
- stack 1: 0x6D0
- stack 0: 0xB40002015C0010016FFF00011A0050022F0001024E00020268FFD802C10000
3989	 C1	PUSH1	E0	 	 
- stack 3: 0x634
- stack 2: 0x6D0
- stack 1: 0xB40002015C0010016FFF00011A0050022F0001024E00020268FFD802C10000
- stack 0: 0xE0
3990	 C3	SHR		 	 
- stack 2: 0x634
- stack 1: 0x6D0
- stack 0: 0xB40002
3991	 C4	PUSH2	FFFF	 	 
- stack 3: 0x634
- stack 2: 0x6D0
- stack 1: 0xB40002
- stack 0: 0xFFFF
3992	 C7	AND		 	 
- stack 2: 0x634
- stack 1: 0x6D0
- stack 0: 0x2
3993	 C8	PUSH1	01	 	 
- stack 3: 0x634
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0x1
3994	 CA	SIGNEXTEND		 	 
- stack 2: 0x634
- stack 1: 0x6D0
- stack 0: 0x2
3995	 CB	ADD		 	 
- stack 1: 0x634
- stack 0: 0x6D2
3996	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x634
- stack 1: 0x6D2
- stack 0: 0xFFFFFFFF
3997	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x634
- stack 0: 0x6D2
3998	 D2	PUSH1	02	 	 
- stack 2: 0x634
- stack 1: 0x6D2
- stack 0: 0x2
3999	 D4	XOR		 	 
- stack 1: 0x634
- stack 0: 0x6D0
4000	 D5	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
4001	 D6	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0xFF0000FFF00F0FF0000000000000000000000000000000000000000000000000
- stack 0: 0xF0
4002	 D8	SHR		 	 
- stack 1: 0x634
- stack 0: 0xFF00
4003	 D9	PUSH2	0060	 	 
- stack 2: 0x634
- stack 1: 0xFF00
- stack 0: 0x60
4004	 DC	MSTORE		 	  ;; # store to x3
- stack 0: 0x634
4005	 DD	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
4006	 DF	ADD		 	 
- stack 0: 0x638
4007	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
4008	 E1	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x15C0010016FFF00011A0050022F0001024E00020268FFD802C1000002D00080
4009	 E2	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x15C0010016FFF00011A0050022F0001024E00020268FFD802C1000002D00080
- stack 0: 0xF0
4010	 E4	SHR		 	 
- stack 1: 0x638
- stack 0: 0x15C
4011	 E5	JUMP		 	 
- stack 0: 0x638
4012	 15C	JUMPDEST		 ;; __riscvimpl_LUI_10eb7	  ;; # instr: lui t4,0x10(ignore imm)
- stack 0: 0x638
4013	 15D	PUSH4	00010000	 	 
- stack 1: 0x638
- stack 0: 0x10000
4014	 162	PUSH2	03A0	 	 
- stack 2: 0x638
- stack 1: 0x10000
- stack 0: 0x3A0
4015	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x638
4016	 166	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
4017	 168	ADD		 	 
- stack 0: 0x63C
4018	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
4019	 16A	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x16FFF00011A0050022F0001024E00020268FFD802C1000002D0008002EF0000
4020	 16B	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x16FFF00011A0050022F0001024E00020268FFD802C1000002D0008002EF0000
- stack 0: 0xF0
4021	 16D	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x16F
4022	 16E	JUMP		 	 
- stack 0: 0x63C
4023	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x63C
4024	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
4025	 171	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x16FFF00011A0050022F0001024E00020268FFD802C1000002D0008002EF0000
4026	 172	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x16FFF00011A0050022F0001024E00020268FFD802C1000002D0008002EF0000
- stack 0: 0xE0
4027	 174	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x16FFF00
4028	 175	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x16FFF00
- stack 0: 0xFFFF
4029	 178	AND		 	 
- stack 1: 0x63C
- stack 0: 0xFF00
4030	 179	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0xFF00
- stack 0: 0x1
4031	 17B	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
4032	 17C	PUSH2	03A0	 	 
- stack 2: 0x63C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
4033	 17F	MLOAD		 	  ;; # read from x29
- stack 2: 0x63C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x10000
4034	 180	ADD		 	  ;; # ADDI 29
- stack 1: 0x63C
- stack 0: 0xFF00
4035	 181	PUSH2	03A0	 	 
- stack 2: 0x63C
- stack 1: 0xFF00
- stack 0: 0x3A0
4036	 184	MSTORE		 	  ;; # store to x29
- stack 0: 0x63C
4037	 185	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
4038	 187	ADD		 	 
- stack 0: 0x640
4039	 188	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
4040	 189	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x11A0050022F0001024E00020268FFD802C1000002D0008002EF000003210002
4041	 18A	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x11A0050022F0001024E00020268FFD802C1000002D0008002EF000003210002
- stack 0: 0xF0
4042	 18C	SHR		 	 
- stack 1: 0x640
- stack 0: 0x11A
4043	 18D	JUMP		 	 
- stack 0: 0x640
4044	 11A	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,26c(ignore imm)
- stack 0: 0x640
4045	 11B	PUSH2	0060	 	 
- stack 1: 0x640
- stack 0: 0x60
4046	 11E	MLOAD		 	  ;; # read from x3
- stack 1: 0x640
- stack 0: 0xFF00
4047	 11F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x640
- stack 1: 0xFF00
- stack 0: 0xFFFFFFFF
4048	 124	AND		 	  ;; # mask to 32 bits
- stack 1: 0x640
- stack 0: 0xFF00
4049	 125	PUSH2	03A0	 	 
- stack 2: 0x640
- stack 1: 0xFF00
- stack 0: 0x3A0
4050	 128	MLOAD		 	  ;; # read from x29
- stack 2: 0x640
- stack 1: 0xFF00
- stack 0: 0xFF00
4051	 129	PUSH4	FFFFFFFF	 	 
- stack 3: 0x640
- stack 2: 0xFF00
- stack 1: 0xFF00
- stack 0: 0xFFFFFFFF
4052	 12E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x640
- stack 1: 0xFF00
- stack 0: 0xFF00
4053	 12F	SUB		 	 
- stack 1: 0x640
- stack 0: 0x0
4054	 130	PUSH2	0138	 ;; _neq_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x138
4055	 133	JUMPI		 	 
- stack 0: 0x640
4056	 134	PUSH2	0152	 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 1: 0x640
- stack 0: 0x152
4057	 137	JUMP		 	 
- stack 0: 0x640
4058	 152	JUMPDEST		 ;; _neq_after_7c90d12e6c41b4c0c0ac74c4e53f99d17d9607aa071d5e18bacae25d7ee22162	 
- stack 0: 0x640
4059	 153	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
4060	 155	ADD		 	 
- stack 0: 0x644
4061	 156	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
4062	 157	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x22F0001024E00020268FFD802C1000002D0008002EF00000321000200E60002
4063	 158	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x22F0001024E00020268FFD802C1000002D0008002EF00000321000200E60002
- stack 0: 0xF0
4064	 15A	SHR		 	 
- stack 1: 0x644
- stack 0: 0x22F
4065	 15B	JUMP		 	 
- stack 0: 0x644
4066	 22F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x644
4067	 230	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
4068	 231	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x22F0001024E00020268FFD802C1000002D0008002EF00000321000200E60002
4069	 232	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x22F0001024E00020268FFD802C1000002D0008002EF00000321000200E60002
- stack 0: 0xE0
4070	 234	SHR		 	 
- stack 1: 0x644
- stack 0: 0x22F0001
4071	 235	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x22F0001
- stack 0: 0xFFFF
4072	 238	AND		 	 
- stack 1: 0x644
- stack 0: 0x1
4073	 239	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
4074	 23B	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x1
4075	 23C	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x80
4076	 23F	MLOAD		 	  ;; # read from x4
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
4077	 240	ADD		 	  ;; # ADDI 4
- stack 1: 0x644
- stack 0: 0x2
4078	 241	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0x80
4079	 244	MSTORE		 	  ;; # store to x4
- stack 0: 0x644
4080	 245	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
4081	 247	ADD		 	 
- stack 0: 0x648
4082	 248	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
4083	 249	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x24E00020268FFD802C1000002D0008002EF00000321000200E6000201000012
4084	 24A	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x24E00020268FFD802C1000002D0008002EF00000321000200E6000201000012
- stack 0: 0xF0
4085	 24C	SHR		 	 
- stack 1: 0x648
- stack 0: 0x24E
4086	 24D	JUMP		 	 
- stack 0: 0x648
4087	 24E	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x648
4088	 24F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
4089	 250	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x24E00020268FFD802C1000002D0008002EF00000321000200E6000201000012
4090	 251	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x24E00020268FFD802C1000002D0008002EF00000321000200E6000201000012
- stack 0: 0xE0
4091	 253	SHR		 	 
- stack 1: 0x648
- stack 0: 0x24E0002
4092	 254	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x24E0002
- stack 0: 0xFFFF
4093	 257	AND		 	 
- stack 1: 0x648
- stack 0: 0x2
4094	 258	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x1
4095	 25A	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x2
4096	 25B	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xA0
4097	 25E	MSTORE		 	  ;; # store to x5
- stack 0: 0x648
4098	 25F	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
4099	 261	ADD		 	 
- stack 0: 0x64C
4100	 262	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
4101	 263	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x268FFD802C1000002D0008002EF00000321000200E6000201000012033B0028
4102	 264	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x268FFD802C1000002D0008002EF00000321000200E6000201000012033B0028
- stack 0: 0xF0
4103	 266	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x268
4104	 267	JUMP		 	 
- stack 0: 0x64C
4105	 268	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x64C
4106	 269	PUSH2	0080	 	 
- stack 1: 0x64C
- stack 0: 0x80
4107	 26C	MLOAD		 	  ;; # read from x4
- stack 1: 0x64C
- stack 0: 0x2
4108	 26D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4109	 272	AND		 	  ;; # mask to 32 bits
- stack 1: 0x64C
- stack 0: 0x2
4110	 273	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xA0
4111	 276	MLOAD		 	  ;; # read from x5
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x2
4112	 277	PUSH4	FFFFFFFF	 	 
- stack 3: 0x64C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4113	 27C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x2
4114	 27D	SUB		 	 
- stack 1: 0x64C
- stack 0: 0x0
4115	 27E	PUSH2	0286	 ;; _neq_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x286
4116	 281	JUMPI		 	 
- stack 0: 0x64C
4117	 282	PUSH2	02A0	 ;; _neq_after_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 1: 0x64C
- stack 0: 0x2A0
4118	 285	JUMP		 	 
- stack 0: 0x64C
4119	 2A0	JUMPDEST		 ;; _neq_after_cb4a37942a858bdec83a65bbbed05085151506b2f1af75bd91f7ba6344b080b7	 
- stack 0: 0x64C
4120	 2A1	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
4121	 2A3	ADD		 	 
- stack 0: 0x650
4122	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
4123	 2A5	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x2C1000002D0008002EF00000321000200E6000201000012033B002802C10000
4124	 2A6	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x2C1000002D0008002EF00000321000200E6000201000012033B002802C10000
- stack 0: 0xF0
4125	 2A8	SHR		 	 
- stack 1: 0x650
- stack 0: 0x2C1
4126	 2A9	JUMP		 	 
- stack 0: 0x650
4127	 2C1	JUMPDEST		 ;; __riscvimpl_AUIPC_97010000	  ;; # instr: auipc gp,0x0(ignore imm)
- stack 0: 0x650
4128	 2C2	DUP1		 	 
- stack 1: 0x650
- stack 0: 0x650
4129	 2C3	PUSH2	0060	 	 
- stack 2: 0x650
- stack 1: 0x650
- stack 0: 0x60
4130	 2C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x650
4131	 2C7	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
4132	 2C9	ADD		 	 
- stack 0: 0x654
4133	 2CA	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
4134	 2CB	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x2D0008002EF00000321000200E6000201000012033B002802C1000002D00064
4135	 2CC	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x2D0008002EF00000321000200E6000201000012033B002802C1000002D00064
- stack 0: 0xF0
4136	 2CE	SHR		 	 
- stack 1: 0x654
- stack 0: 0x2D0
4137	 2CF	JUMP		 	 
- stack 0: 0x654
4138	 2D0	JUMPDEST		 ;; __riscvimpl_ADDI_3_3_0	  ;; # instr: addi gp,gp,128(ignore imm)
- stack 0: 0x654
4139	 2D1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
4140	 2D2	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x2D0008002EF00000321000200E6000201000012033B002802C1000002D00064
4141	 2D3	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x2D0008002EF00000321000200E6000201000012033B002802C1000002D00064
- stack 0: 0xE0
4142	 2D5	SHR		 	 
- stack 1: 0x654
- stack 0: 0x2D00080
4143	 2D6	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x2D00080
- stack 0: 0xFFFF
4144	 2D9	AND		 	 
- stack 1: 0x654
- stack 0: 0x80
4145	 2DA	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x80
- stack 0: 0x1
4146	 2DC	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x80
4147	 2DD	PUSH2	0060	 	 
- stack 2: 0x654
- stack 1: 0x80
- stack 0: 0x60
4148	 2E0	MLOAD		 	  ;; # read from x3
- stack 2: 0x654
- stack 1: 0x80
- stack 0: 0x650
4149	 2E1	ADD		 	  ;; # ADDI 3
- stack 1: 0x654
- stack 0: 0x6D0
4150	 2E2	PUSH2	0060	 	 
- stack 2: 0x654
- stack 1: 0x6D0
- stack 0: 0x60
4151	 2E5	MSTORE		 	  ;; # store to x3
- stack 0: 0x654
4152	 2E6	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
4153	 2E8	ADD		 	 
- stack 0: 0x658
4154	 2E9	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
4155	 2EA	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2EF00000321000200E6000201000012033B002802C1000002D0006402EF0000
4156	 2EB	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x2EF00000321000200E6000201000012033B002802C1000002D0006402EF0000
- stack 0: 0xF0
4157	 2ED	SHR		 	 
- stack 1: 0x658
- stack 0: 0x2EF
4158	 2EE	JUMP		 	 
- stack 0: 0x658
4159	 2EF	JUMPDEST		 ;; __riscvimpl_LHU_2_3_0	  ;; # instr: lhu sp,0(gp)(ignore imm)
- stack 0: 0x658
4160	 2F0	PUSH2	0060	 	 
- stack 1: 0x658
- stack 0: 0x60
4161	 2F3	MLOAD		 	  ;; # read from x3
- stack 1: 0x658
- stack 0: 0x6D0
4162	 2F4	PUSH4	FFFFFFFF	 	 
- stack 2: 0x658
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFF
4163	 2F9	AND		 	  ;; # mask to 32 bits
- stack 1: 0x658
- stack 0: 0x6D0
4164	 2FA	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x658
- stack 1: 0x6D0
- stack 0: 0x658
4165	 2FB	MLOAD		 	 
- stack 2: 0x658
- stack 1: 0x6D0
- stack 0: 0x2EF00000321000200E6000201000012033B002802C1000002D0006402EF0000
4166	 2FC	PUSH1	E0	 	 
- stack 3: 0x658
- stack 2: 0x6D0
- stack 1: 0x2EF00000321000200E6000201000012033B002802C1000002D0006402EF0000
- stack 0: 0xE0
4167	 2FE	SHR		 	 
- stack 2: 0x658
- stack 1: 0x6D0
- stack 0: 0x2EF0000
4168	 2FF	PUSH2	FFFF	 	 
- stack 3: 0x658
- stack 2: 0x6D0
- stack 1: 0x2EF0000
- stack 0: 0xFFFF
4169	 302	AND		 	 
- stack 2: 0x658
- stack 1: 0x6D0
- stack 0: 0x0
4170	 303	PUSH1	01	 	 
- stack 3: 0x658
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x1
4171	 305	SIGNEXTEND		 	 
- stack 2: 0x658
- stack 1: 0x6D0
- stack 0: 0x0
4172	 306	ADD		 	 
- stack 1: 0x658
- stack 0: 0x6D0
4173	 307	PUSH4	FFFFFFFF	 	 
- stack 2: 0x658
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFF
4174	 30C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x658
- stack 0: 0x6D0
4175	 30D	PUSH1	02	 	 
- stack 2: 0x658
- stack 1: 0x6D0
- stack 0: 0x2
4176	 30F	XOR		 	 
- stack 1: 0x658
- stack 0: 0x6D2
4177	 310	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
4178	 311	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
4179	 313	SHR		 	 
- stack 1: 0x658
- stack 0: 0xFF
4180	 314	PUSH2	0040	 	 
- stack 2: 0x658
- stack 1: 0xFF
- stack 0: 0x40
4181	 317	MSTORE		 	  ;; # store to x2
- stack 0: 0x658
4182	 318	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
4183	 31A	ADD		 	 
- stack 0: 0x65C
4184	 31B	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
4185	 31C	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x321000200E6000201000012033B002802C1000002D0006402EF000002AA0000
4186	 31D	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x321000200E6000201000012033B002802C1000002D0006402EF000002AA0000
- stack 0: 0xF0
4187	 31F	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x321
4188	 320	JUMP		 	 
- stack 0: 0x65C
4189	 321	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,2(ignore imm)
- stack 0: 0x65C
4190	 322	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
4191	 323	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x321000200E6000201000012033B002802C1000002D0006402EF000002AA0000
4192	 324	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x321000200E6000201000012033B002802C1000002D0006402EF000002AA0000
- stack 0: 0xE0
4193	 326	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x3210002
4194	 327	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x3210002
- stack 0: 0xFFFF
4195	 32A	AND		 	 
- stack 1: 0x65C
- stack 0: 0x2
4196	 32B	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0x1
4197	 32D	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x2
4198	 32E	PUSH2	0040	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0x40
4199	 331	MSTORE		 	  ;; # store to x2
- stack 0: 0x65C
4200	 332	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
4201	 334	ADD		 	 
- stack 0: 0x660
4202	 335	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
4203	 336	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0xE6000201000012033B002802C1000002D0006402EF000002AA000003210002
4204	 337	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0xE6000201000012033B002802C1000002D0006402EF000002AA000003210002
- stack 0: 0xF0
4205	 339	SHR		 	 
- stack 1: 0x660
- stack 0: 0xE6
4206	 33A	JUMP		 	 
- stack 0: 0x660
4207	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x660
4208	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
4209	 E8	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0xE6000201000012033B002802C1000002D0006402EF000002AA000003210002
4210	 E9	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0xE6000201000012033B002802C1000002D0006402EF000002AA000003210002
- stack 0: 0xE0
4211	 EB	SHR		 	 
- stack 1: 0x660
- stack 0: 0xE60002
4212	 EC	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0xE60002
- stack 0: 0xFFFF
4213	 EF	AND		 	 
- stack 1: 0x660
- stack 0: 0x2
4214	 F0	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0x1
4215	 F2	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0x2
4216	 F3	PUSH2	03A0	 	 
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0x3A0
4217	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x660
4218	 F7	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
4219	 F9	ADD		 	 
- stack 0: 0x664
4220	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
4221	 FB	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x1000012033B002802C1000002D0006402EF000002AA00000321000200E60002
4222	 FC	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x1000012033B002802C1000002D0006402EF000002AA00000321000200E60002
- stack 0: 0xF0
4223	 FE	SHR		 	 
- stack 1: 0x664
- stack 0: 0x100
4224	 FF	JUMP		 	 
- stack 0: 0x664
4225	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x664
4226	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
4227	 102	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x1000012033B002802C1000002D0006402EF000002AA00000321000200E60002
4228	 103	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x1000012033B002802C1000002D0006402EF000002AA00000321000200E60002
- stack 0: 0xE0
4229	 105	SHR		 	 
- stack 1: 0x664
- stack 0: 0x1000012
4230	 106	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x1000012
- stack 0: 0xFFFF
4231	 109	AND		 	 
- stack 1: 0x664
- stack 0: 0x12
4232	 10A	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x12
- stack 0: 0x1
4233	 10C	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x12
4234	 10D	PUSH2	0380	 	 
- stack 2: 0x664
- stack 1: 0x12
- stack 0: 0x380
4235	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x664
4236	 111	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
4237	 113	ADD		 	 
- stack 0: 0x668
4238	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
4239	 115	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x33B002802C1000002D0006402EF000002AA00000321000200E6000201000013
4240	 116	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x33B002802C1000002D0006402EF000002AA00000321000200E6000201000013
- stack 0: 0xF0
4241	 118	SHR		 	 
- stack 1: 0x668
- stack 0: 0x33B
4242	 119	JUMP		 	 
- stack 0: 0x668
4243	 33B	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,28(ignore imm)
- stack 0: 0x668
4244	 33C	PUSH2	0040	 	 
- stack 1: 0x668
- stack 0: 0x40
4245	 33F	MLOAD		 	  ;; # read from x2
- stack 1: 0x668
- stack 0: 0x2
4246	 340	PUSH4	FFFFFFFF	 	 
- stack 2: 0x668
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4247	 345	AND		 	  ;; # mask to 32 bits
- stack 1: 0x668
- stack 0: 0x2
4248	 346	PUSH2	03A0	 	 
- stack 2: 0x668
- stack 1: 0x2
- stack 0: 0x3A0
4249	 349	MLOAD		 	  ;; # read from x29
- stack 2: 0x668
- stack 1: 0x2
- stack 0: 0x2
4250	 34A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x668
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4251	 34F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x668
- stack 1: 0x2
- stack 0: 0x2
4252	 350	SUB		 	 
- stack 1: 0x668
- stack 0: 0x0
4253	 351	PUSH2	0359	 ;; _neq_8e398e222ec68fb3878efad210597160bdab2152634bed6e937322854b49fc2f	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x359
4254	 354	JUMPI		 	 
- stack 0: 0x668
4255	 355	PUSH2	0373	 ;; _neq_after_8e398e222ec68fb3878efad210597160bdab2152634bed6e937322854b49fc2f	 
- stack 1: 0x668
- stack 0: 0x373
4256	 358	JUMP		 	 
- stack 0: 0x668
4257	 373	JUMPDEST		 ;; _neq_after_8e398e222ec68fb3878efad210597160bdab2152634bed6e937322854b49fc2f	 
- stack 0: 0x668
4258	 374	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
4259	 376	ADD		 	 
- stack 0: 0x66C
4260	 377	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4261	 378	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x2C1000002D0006402EF000002AA00000321000200E6000201000013033B0008
4262	 379	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x2C1000002D0006402EF000002AA00000321000200E6000201000013033B0008
- stack 0: 0xF0
4263	 37B	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x2C1
4264	 37C	JUMP		 	 
- stack 0: 0x66C
4265	 2C1	JUMPDEST		 ;; __riscvimpl_AUIPC_97010000	  ;; # instr: auipc gp,0x0(ignore imm)
- stack 0: 0x66C
4266	 2C2	DUP1		 	 
- stack 1: 0x66C
- stack 0: 0x66C
4267	 2C3	PUSH2	0060	 	 
- stack 2: 0x66C
- stack 1: 0x66C
- stack 0: 0x60
4268	 2C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x66C
4269	 2C7	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4270	 2C9	ADD		 	 
- stack 0: 0x670
4271	 2CA	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4272	 2CB	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x2D0006402EF000002AA00000321000200E6000201000013033B0008037D0018
4273	 2CC	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x2D0006402EF000002AA00000321000200E6000201000013033B0008037D0018
- stack 0: 0xF0
4274	 2CE	SHR		 	 
- stack 1: 0x670
- stack 0: 0x2D0
4275	 2CF	JUMP		 	 
- stack 0: 0x670
4276	 2D0	JUMPDEST		 ;; __riscvimpl_ADDI_3_3_0	  ;; # instr: addi gp,gp,128(ignore imm)
- stack 0: 0x670
4277	 2D1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4278	 2D2	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x2D0006402EF000002AA00000321000200E6000201000013033B0008037D0018
4279	 2D3	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x2D0006402EF000002AA00000321000200E6000201000013033B0008037D0018
- stack 0: 0xE0
4280	 2D5	SHR		 	 
- stack 1: 0x670
- stack 0: 0x2D00064
4281	 2D6	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x2D00064
- stack 0: 0xFFFF
4282	 2D9	AND		 	 
- stack 1: 0x670
- stack 0: 0x64
4283	 2DA	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x64
- stack 0: 0x1
4284	 2DC	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x64
4285	 2DD	PUSH2	0060	 	 
- stack 2: 0x670
- stack 1: 0x64
- stack 0: 0x60
4286	 2E0	MLOAD		 	  ;; # read from x3
- stack 2: 0x670
- stack 1: 0x64
- stack 0: 0x66C
4287	 2E1	ADD		 	  ;; # ADDI 3
- stack 1: 0x670
- stack 0: 0x6D0
4288	 2E2	PUSH2	0060	 	 
- stack 2: 0x670
- stack 1: 0x6D0
- stack 0: 0x60
4289	 2E5	MSTORE		 	  ;; # store to x3
- stack 0: 0x670
4290	 2E6	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4291	 2E8	ADD		 	 
- stack 0: 0x674
4292	 2E9	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4293	 2EA	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x2EF000002AA00000321000200E6000201000013033B0008037D001800210000
4294	 2EB	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x2EF000002AA00000321000200E6000201000013033B0008037D001800210000
- stack 0: 0xF0
4295	 2ED	SHR		 	 
- stack 1: 0x674
- stack 0: 0x2EF
4296	 2EE	JUMP		 	 
- stack 0: 0x674
4297	 2EF	JUMPDEST		 ;; __riscvimpl_LHU_2_3_0	  ;; # instr: lhu sp,0(gp)(ignore imm)
- stack 0: 0x674
4298	 2F0	PUSH2	0060	 	 
- stack 1: 0x674
- stack 0: 0x60
4299	 2F3	MLOAD		 	  ;; # read from x3
- stack 1: 0x674
- stack 0: 0x6D0
4300	 2F4	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFF
4301	 2F9	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x6D0
4302	 2FA	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x674
- stack 1: 0x6D0
- stack 0: 0x674
4303	 2FB	MLOAD		 	 
- stack 2: 0x674
- stack 1: 0x6D0
- stack 0: 0x2EF000002AA00000321000200E6000201000013033B0008037D001800210000
4304	 2FC	PUSH1	E0	 	 
- stack 3: 0x674
- stack 2: 0x6D0
- stack 1: 0x2EF000002AA00000321000200E6000201000013033B0008037D001800210000
- stack 0: 0xE0
4305	 2FE	SHR		 	 
- stack 2: 0x674
- stack 1: 0x6D0
- stack 0: 0x2EF0000
4306	 2FF	PUSH2	FFFF	 	 
- stack 3: 0x674
- stack 2: 0x6D0
- stack 1: 0x2EF0000
- stack 0: 0xFFFF
4307	 302	AND		 	 
- stack 2: 0x674
- stack 1: 0x6D0
- stack 0: 0x0
4308	 303	PUSH1	01	 	 
- stack 3: 0x674
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x1
4309	 305	SIGNEXTEND		 	 
- stack 2: 0x674
- stack 1: 0x6D0
- stack 0: 0x0
4310	 306	ADD		 	 
- stack 1: 0x674
- stack 0: 0x6D0
4311	 307	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFF
4312	 30C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x6D0
4313	 30D	PUSH1	02	 	 
- stack 2: 0x674
- stack 1: 0x6D0
- stack 0: 0x2
4314	 30F	XOR		 	 
- stack 1: 0x674
- stack 0: 0x6D2
4315	 310	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
4316	 311	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0xFFF00F0FF00000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
4317	 313	SHR		 	 
- stack 1: 0x674
- stack 0: 0xFF
4318	 314	PUSH2	0040	 	 
- stack 2: 0x674
- stack 1: 0xFF
- stack 0: 0x40
4319	 317	MSTORE		 	  ;; # store to x2
- stack 0: 0x674
4320	 318	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4321	 31A	ADD		 	 
- stack 0: 0x678
4322	 31B	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4323	 31C	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x2AA00000321000200E6000201000013033B0008037D001800210000003406C8
4324	 31D	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x2AA00000321000200E6000201000013033B0008037D001800210000003406C8
- stack 0: 0xF0
4325	 31F	SHR		 	 
- stack 1: 0x678
- stack 0: 0x2AA
4326	 320	JUMP		 	 
- stack 0: 0x678
4327	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x678
4328	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
4329	 2AC	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x2AA00000321000200E6000201000013033B0008037D001800210000003406C8
4330	 2AD	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x2AA00000321000200E6000201000013033B0008037D001800210000003406C8
- stack 0: 0xE0
4331	 2AF	SHR		 	 
- stack 1: 0x678
- stack 0: 0x2AA0000
4332	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x2AA0000
- stack 0: 0xFFFF
4333	 2B3	AND		 	 
- stack 1: 0x678
- stack 0: 0x0
4334	 2B4	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0x1
4335	 2B6	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x0
4336	 2B7	POP		 	 
- stack 0: 0x678
4337	 2B8	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
4338	 2BA	ADD		 	 
- stack 0: 0x67C
4339	 2BB	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
4340	 2BC	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x321000200E6000201000013033B0008037D001800210000003406C800530042
4341	 2BD	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x321000200E6000201000013033B0008037D001800210000003406C800530042
- stack 0: 0xF0
4342	 2BF	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x321
4343	 2C0	JUMP		 	 
- stack 0: 0x67C
4344	 321	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,2(ignore imm)
- stack 0: 0x67C
4345	 322	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
4346	 323	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x321000200E6000201000013033B0008037D001800210000003406C800530042
4347	 324	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x321000200E6000201000013033B0008037D001800210000003406C800530042
- stack 0: 0xE0
4348	 326	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x3210002
4349	 327	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x3210002
- stack 0: 0xFFFF
4350	 32A	AND		 	 
- stack 1: 0x67C
- stack 0: 0x2
4351	 32B	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0x1
4352	 32D	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x2
4353	 32E	PUSH2	0040	 	 
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0x40
4354	 331	MSTORE		 	  ;; # store to x2
- stack 0: 0x67C
4355	 332	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4356	 334	ADD		 	 
- stack 0: 0x680
4357	 335	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4358	 336	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xE6000201000013033B0008037D001800210000003406C80053004200660000
4359	 337	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0xE6000201000013033B0008037D001800210000003406C80053004200660000
- stack 0: 0xF0
4360	 339	SHR		 	 
- stack 1: 0x680
- stack 0: 0xE6
4361	 33A	JUMP		 	 
- stack 0: 0x680
4362	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,255(ignore imm)
- stack 0: 0x680
4363	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
4364	 E8	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xE6000201000013033B0008037D001800210000003406C80053004200660000
4365	 E9	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0xE6000201000013033B0008037D001800210000003406C80053004200660000
- stack 0: 0xE0
4366	 EB	SHR		 	 
- stack 1: 0x680
- stack 0: 0xE60002
4367	 EC	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0xE60002
- stack 0: 0xFFFF
4368	 EF	AND		 	 
- stack 1: 0x680
- stack 0: 0x2
4369	 F0	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0x1
4370	 F2	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x2
4371	 F3	PUSH2	03A0	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0x3A0
4372	 F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x680
4373	 F7	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4374	 F9	ADD		 	 
- stack 0: 0x684
4375	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4376	 FB	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x1000013033B0008037D001800210000003406C8005300420066000003BD0001
4377	 FC	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x1000013033B0008037D001800210000003406C8005300420066000003BD0001
- stack 0: 0xF0
4378	 FE	SHR		 	 
- stack 1: 0x684
- stack 0: 0x100
4379	 FF	JUMP		 	 
- stack 0: 0x684
4380	 100	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x684
4381	 101	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
4382	 102	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x1000013033B0008037D001800210000003406C8005300420066000003BD0001
4383	 103	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x1000013033B0008037D001800210000003406C8005300420066000003BD0001
- stack 0: 0xE0
4384	 105	SHR		 	 
- stack 1: 0x684
- stack 0: 0x1000013
4385	 106	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x1000013
- stack 0: 0xFFFF
4386	 109	AND		 	 
- stack 1: 0x684
- stack 0: 0x13
4387	 10A	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x13
- stack 0: 0x1
4388	 10C	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x13
4389	 10D	PUSH2	0380	 	 
- stack 2: 0x684
- stack 1: 0x13
- stack 0: 0x380
4390	 110	MSTORE		 	  ;; # store to x28
- stack 0: 0x684
4391	 111	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4392	 113	ADD		 	 
- stack 0: 0x688
4393	 114	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4394	 115	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x33B0008037D001800210000003406C8005300420066000003BD000100210000
4395	 116	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x33B0008037D001800210000003406C8005300420066000003BD000100210000
- stack 0: 0xF0
4396	 118	SHR		 	 
- stack 1: 0x688
- stack 0: 0x33B
4397	 119	JUMP		 	 
- stack 0: 0x688
4398	 33B	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,28(ignore imm)
- stack 0: 0x688
4399	 33C	PUSH2	0040	 	 
- stack 1: 0x688
- stack 0: 0x40
4400	 33F	MLOAD		 	  ;; # read from x2
- stack 1: 0x688
- stack 0: 0x2
4401	 340	PUSH4	FFFFFFFF	 	 
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4402	 345	AND		 	  ;; # mask to 32 bits
- stack 1: 0x688
- stack 0: 0x2
4403	 346	PUSH2	03A0	 	 
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0x3A0
4404	 349	MLOAD		 	  ;; # read from x29
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0x2
4405	 34A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x688
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4406	 34F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0x2
4407	 350	SUB		 	 
- stack 1: 0x688
- stack 0: 0x0
4408	 351	PUSH2	0359	 ;; _neq_8e398e222ec68fb3878efad210597160bdab2152634bed6e937322854b49fc2f	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x359
4409	 354	JUMPI		 	 
- stack 0: 0x688
4410	 355	PUSH2	0373	 ;; _neq_after_8e398e222ec68fb3878efad210597160bdab2152634bed6e937322854b49fc2f	 
- stack 1: 0x688
- stack 0: 0x373
4411	 358	JUMP		 	 
- stack 0: 0x688
4412	 373	JUMPDEST		 ;; _neq_after_8e398e222ec68fb3878efad210597160bdab2152634bed6e937322854b49fc2f	 
- stack 0: 0x688
4413	 374	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4414	 376	ADD		 	 
- stack 0: 0x68C
4415	 377	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4416	 378	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x37D001800210000003406C8005300420066000003BD000100210000003406CC
4417	 379	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x37D001800210000003406C8005300420066000003BD000100210000003406CC
- stack 0: 0xF0
4418	 37B	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x37D
4419	 37C	JUMP		 	 
- stack 0: 0x68C
4420	 37D	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x68C
4421	 37E	PUSH1	00	 	 
- stack 1: 0x68C
- stack 0: 0x0
4422	 380	PUSH4	FFFFFFFF	 	 
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4423	 385	AND		 	  ;; # mask to 32 bits
- stack 1: 0x68C
- stack 0: 0x0
4424	 386	PUSH2	0380	 	 
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x380
4425	 389	MLOAD		 	  ;; # read from x28
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x13
4426	 38A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x68C
- stack 2: 0x0
- stack 1: 0x13
- stack 0: 0xFFFFFFFF
4427	 38F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x13
4428	 390	SUB		 	 
- stack 1: 0x68C
- stack 0: 0x13
4429	 391	PUSH2	0399	 ;; _neq_903e99a729f841bffaa19993d69c4aeff15012f510286857411717f86734a67e	 
- stack 2: 0x68C
- stack 1: 0x13
- stack 0: 0x399
4430	 394	JUMPI		 	 
- stack 0: 0x68C
4431	 399	JUMPDEST		 ;; _neq_903e99a729f841bffaa19993d69c4aeff15012f510286857411717f86734a67e	 
- stack 0: 0x68C
4432	 39A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
4433	 39B	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x37D001800210000003406C8005300420066000003BD000100210000003406CC
4434	 39C	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x37D001800210000003406C8005300420066000003BD000100210000003406CC
- stack 0: 0xE0
4435	 39E	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x37D0018
4436	 39F	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x37D0018
- stack 0: 0xFFFF
4437	 3A2	AND		 	 
- stack 1: 0x68C
- stack 0: 0x18
4438	 3A3	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0x18
- stack 0: 0x1
4439	 3A5	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0x18
4440	 3A6	ADD		 	 
- stack 0: 0x6A4
4441	 3A7	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6A4
- stack 0: 0xFFFFFFFF
4442	 3AC	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6A4
4443	 3AD	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4444	 3AE	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x210000003406CC005300420066000003C8000000660000000000006574796D
4445	 3AF	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x210000003406CC005300420066000003C8000000660000000000006574796D
- stack 0: 0xF0
4446	 3B1	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x21
4447	 3B2	JUMP		 	 
- stack 0: 0x6A4
4448	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x6A4
4449	 22	PUSH4	00000000	 	 
- stack 1: 0x6A4
- stack 0: 0x0
4450	 27	PUSH2	0160	 	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0x160
4451	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x6A4
4452	 2B	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4453	 2D	ADD		 	 
- stack 0: 0x6A8
4454	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4455	 2F	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x3406CC005300420066000003C8000000660000000000006574796D00007473
4456	 30	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x3406CC005300420066000003C8000000660000000000006574796D00007473
- stack 0: 0xF0
4457	 32	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x34
4458	 33	JUMP		 	 
- stack 0: 0x6A8
4459	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1728(ignore imm)
- stack 0: 0x6A8
4460	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
4461	 36	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x3406CC005300420066000003C8000000660000000000006574796D00007473
4462	 37	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0x3406CC005300420066000003C8000000660000000000006574796D00007473
- stack 0: 0xE0
4463	 39	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x3406CC
4464	 3A	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x3406CC
- stack 0: 0xFFFF
4465	 3D	AND		 	 
- stack 1: 0x6A8
- stack 0: 0x6CC
4466	 3E	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0x6CC
- stack 0: 0x1
4467	 40	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0x6CC
4468	 41	PUSH2	0160	 	 
- stack 2: 0x6A8
- stack 1: 0x6CC
- stack 0: 0x160
4469	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x6A8
- stack 1: 0x6CC
- stack 0: 0x0
4470	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x6A8
- stack 0: 0x6CC
4471	 46	PUSH2	0160	 	 
- stack 2: 0x6A8
- stack 1: 0x6CC
- stack 0: 0x160
4472	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x6A8
4473	 4A	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4474	 4C	ADD		 	 
- stack 0: 0x6AC
4475	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4476	 4E	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x5300420066000003C8000000660000000000006574796D0000747300525245
4477	 4F	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x5300420066000003C8000000660000000000006574796D0000747300525245
- stack 0: 0xF0
4478	 51	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x53
4479	 52	JUMP		 	 
- stack 0: 0x6AC
4480	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x6AC
4481	 54	PUSH4	00042000	 	 
- stack 1: 0x6AC
- stack 0: 0x42000
4482	 59	PUSH2	0140	 	 
- stack 2: 0x6AC
- stack 1: 0x42000
- stack 0: 0x140
4483	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x6AC
4484	 5D	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4485	 5F	ADD		 	 
- stack 0: 0x6B0
4486	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4487	 61	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x66000003C8000000660000000000006574796D000074730052524500004B4F
4488	 62	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x66000003C8000000660000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
4489	 64	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x66
4490	 65	JUMP		 	 
- stack 0: 0x6B0
4491	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6B0
4492	 67	PUSH2	0140	 	 
- stack 1: 0x6B0
- stack 0: 0x140
4493	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6B0
- stack 0: 0x42000
4494	 6B	PUSH2	0075	 ;; _ecall_30ac1b51abc0b91952b34ea9e21fc9a31c30698dc9baff426477262b7c24a2d1	 
- stack 2: 0x6B0
- stack 1: 0x42000
- stack 0: 0x75
4495	 6E	JUMPI		 	 
- stack 0: 0x6B0
4496	 75	JUMPDEST		 ;; _ecall_30ac1b51abc0b91952b34ea9e21fc9a31c30698dc9baff426477262b7c24a2d1	 
- stack 0: 0x6B0
4497	 76	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4498	 78	PUSH2	0160	 	 
- stack 2: 0x6B0
- stack 1: 0x4
- stack 0: 0x160
4499	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x6B0
- stack 1: 0x4
- stack 0: 0x6CC
4500	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x6B0
4501	 7D	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4502	 7F	ADD		 	 
- stack 0: 0x6B4
4503	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4504	 81	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3C8000000660000000000006574796D000074730052524500004B4FFF0000FF
4505	 82	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x3C8000000660000000000006574796D000074730052524500004B4FFF0000FF
- stack 0: 0xF0
4506	 84	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3C8
4507	 85	JUMP		 	 
- stack 0: 0x6B4
4508	 3C8	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x6B4
4509	 3C9	PUSH4	00000000	 	 
- stack 1: 0x6B4
- stack 0: 0x0
4510	 3CE	PUSH2	0140	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x140
4511	 3D1	MSTORE		 	  ;; # store to x10
- stack 0: 0x6B4
4512	 3D2	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4513	 3D4	ADD		 	 
- stack 0: 0x6B8
4514	 3D5	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4515	 3D6	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x660000000000006574796D000074730052524500004B4FFF0000FFF00F0FF0
4516	 3D7	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x660000000000006574796D000074730052524500004B4FFF0000FFF00F0FF0
- stack 0: 0xF0
4517	 3D9	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x66
4518	 3DA	JUMP		 	 
- stack 0: 0x6B8
4519	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6B8
4520	 67	PUSH2	0140	 	 
- stack 1: 0x6B8
- stack 0: 0x140
4521	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6B8
- stack 0: 0x0
4522	 6B	PUSH2	0075	 ;; _ecall_30ac1b51abc0b91952b34ea9e21fc9a31c30698dc9baff426477262b7c24a2d1	 
- stack 2: 0x6B8
- stack 1: 0x0
- stack 0: 0x75
4523	 6E	JUMPI		 	 
- stack 0: 0x6B8
4524	 6F	PUSH1	20	 	 
- stack 1: 0x6B8
- stack 0: 0x20
4525	 71	PUSH2	0160	 	 
- stack 2: 0x6B8
- stack 1: 0x20
- stack 0: 0x160
4526	 74	RETURN		 	 
Final bytecode length; 1716
Returned: 00000000000000000000000000000000000000000000000000000000000006cc
gasUsed : 15974
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424
** HOT: 428 - range: 428,42c,430,434,438,43c,440
** HOT: 444 - range: 444,448,44c,450,454,458,45c
** HOT: 460 - range: 460,464,468,46c,470,474,478
** HOT: 47c - range: 47c,480,484,488,48c,490
** HOT: 494 - range: 494,498,49c,4a0,4a4,4a8,4ac
** HOT: 4b0 - range: 4b0,4b4,4b8,4bc,4c0,4c4,4c8
** HOT: 4cc - range: 4cc,4d0,4d4,4d8,4dc,4e0,4e4
** HOT: 4e8 - range: 4e8,4ec,4f0,4f4,4f8,4fc,500
** HOT: 504 - range: 504,508,50c,510,514,518,51c,520
** HOT: 524 - range: 524,528,52c,530,534,538,53c,540,544
** HOT: 52c - range: 52c,530,534,538,53c,540,544
** HOT: 548 - range: 548,54c,550
** HOT: 554 - range: 554,558,55c,560,564,568,56c,570,574,578
** HOT: 55c - range: 55c,560,564,568,56c,570,574,578
** HOT: 57c - range: 57c,580,584
** HOT: 588 - range: 588,58c,590,594,598,59c,5a0,5a4,5a8,5ac,5b0
** HOT: 590 - range: 590,594,598,59c,5a0,5a4,5a8,5ac,5b0
** HOT: 5b4 - range: 5b4,5b8,5bc
** HOT: 5c0 - range: 5c0,5c4,5c8,5cc,5d0,5d4,5d8,5dc
** HOT: 5c8 - range: 5c8,5cc,5d0,5d4,5d8,5dc
** HOT: 5e0 - range: 5e0,5e4,5e8
** HOT: 5ec - range: 5ec,5f0,5f4,5f8,5fc,600,604,608,60c
** HOT: 5f4 - range: 5f4,5f8,5fc,600,604,608,60c
** HOT: 610 - range: 610,614,618
** HOT: 61c - range: 61c,620,624,628,62c,630,634,638,63c,640
** HOT: 624 - range: 624,628,62c,630,634,638,63c,640
** HOT: 644 - range: 644,648,64c
** HOT: 650 - range: 650,654,658,65c,660,664,668
** HOT: 66c - range: 66c,670,674,678,67c,680,684,688
