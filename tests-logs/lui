Running in EVM:
0	 0	PUSH4	00B0	 	 
- stack 0: 0xB0
1	 5	PUSH2	0215	 ;; _rambegin	 
- stack 1: 0xB0
- stack 0: 0x215
2	 8	PUSH1	01	 	 
- stack 2: 0xB0
- stack 1: 0x215
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0xB0
- stack 0: 0x216
4	 B	PUSH2	0400	 	 
- stack 2: 0xB0
- stack 1: 0x216
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x210000003404A00053004200660000008600000099000000B3000200CD0054
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x210000003404A00053004200660000008600000099000000B3000200CD0054
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3404A00053004200660000008600000099000000B3000200CD0054010FFFFF
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x3404A00053004200660000008600000099000000B3000200CD0054010FFFFF
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1184(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3404A00053004200660000008600000099000000B3000200CD0054010FFFFF
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x3404A00053004200660000008600000099000000B3000200CD0054010FFFFF
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x3404A0
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x3404A0
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x4A0
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x4A0
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x4A0
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x4A0
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x4A0
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x4A0
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x4A0
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x53004200660000008600000099000000B3000200CD0054010FFFFF01220001
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x53004200660000008600000099000000B3000200CD0054010FFFFF01220001
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x660000008600000099000000B3000200CD0054010FFFFF012200010099F800
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x660000008600000099000000B3000200CD0054010FFFFF012200010099F800
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_fb681131e9acfae364321eba52847411ddf198dd76e96cb65d171ec167d3d676	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_fb681131e9acfae364321eba52847411ddf198dd76e96cb65d171ec167d3d676	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x4A0
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x8600000099000000B3000200CD0054010FFFFF012200010099F80000B30003
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x8600000099000000B3000200CD0054010FFFFF012200010099F80000B30003
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_LUI_b7	  ;; # instr: lui ra,0x0(ignore imm)
- stack 0: 0x410
76	 87	PUSH4	00000000	 	 
- stack 1: 0x410
- stack 0: 0x0
77	 8C	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x20
78	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 90	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 92	ADD		 	 
- stack 0: 0x414
81	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 94	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99000000B3000200CD0054010FFFFF012200010099F80000B3000300CD0040
83	 95	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x99000000B3000200CD0054010FFFFF012200010099F80000B3000300CD0040
- stack 0: 0xF0
84	 97	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99
85	 98	JUMP		 	 
- stack 0: 0x414
86	 99	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x414
87	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99000000B3000200CD0054010FFFFF012200010099F80000B3000300CD0040
89	 9C	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x99000000B3000200CD0054010FFFFF012200010099F80000B3000300CD0040
- stack 0: 0xE0
90	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0x990000
91	 9F	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x990000
- stack 0: 0xFFFF
92	 A2	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
93	 A3	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
94	 A5	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
95	 A6	PUSH2	03A0	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x3A0
96	 A9	MSTORE		 	  ;; # store to x29
- stack 0: 0x414
97	 AA	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
98	 AC	ADD		 	 
- stack 0: 0x418
99	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
100	 AE	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB3000200CD0054010FFFFF012200010099F80000B3000300CD00400141FFFF
101	 AF	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB3000200CD0054010FFFFF012200010099F80000B3000300CD00400141FFFF
- stack 0: 0xF0
102	 B1	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB3
103	 B2	JUMP		 	 
- stack 0: 0x418
104	 B3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x418
105	 B4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
106	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB3000200CD0054010FFFFF012200010099F80000B3000300CD00400141FFFF
107	 B6	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xB3000200CD0054010FFFFF012200010099F80000B3000300CD00400141FFFF
- stack 0: 0xE0
108	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB30002
109	 B9	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xB30002
- stack 0: 0xFFFF
110	 BC	AND		 	 
- stack 1: 0x418
- stack 0: 0x2
111	 BD	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0x2
- stack 0: 0x1
112	 BF	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0x2
113	 C0	PUSH2	0380	 	 
- stack 2: 0x418
- stack 1: 0x2
- stack 0: 0x380
114	 C3	MSTORE		 	  ;; # store to x28
- stack 0: 0x418
115	 C4	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
116	 C6	ADD		 	 
- stack 0: 0x41C
117	 C7	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
118	 C8	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xCD0054010FFFFF012200010099F80000B3000300CD00400141FFFF01220014
119	 C9	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xCD0054010FFFFF012200010099F80000B3000300CD00400141FFFF01220014
- stack 0: 0xF0
120	 CB	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xCD
121	 CC	JUMP		 	 
- stack 0: 0x41C
122	 CD	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,54(ignore imm)
- stack 0: 0x41C
123	 CE	PUSH2	0020	 	 
- stack 1: 0x41C
- stack 0: 0x20
124	 D1	MLOAD		 	  ;; # read from x1
- stack 1: 0x41C
- stack 0: 0x0
125	 D2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
126	 D7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x41C
- stack 0: 0x0
127	 D8	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x3A0
128	 DB	MLOAD		 	  ;; # read from x29
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x0
129	 DC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x41C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
130	 E1	AND		 	  ;; # mask to 32 bits
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x0
131	 E2	SUB		 	 
- stack 1: 0x41C
- stack 0: 0x0
132	 E3	PUSH2	00EB	 ;; _neq_c1a5be5855fda5c3c2bc0178a498b0e80142f105c187ce7100b93ecf9d5691ba	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0xEB
133	 E6	JUMPI		 	 
- stack 0: 0x41C
134	 E7	PUSH2	0105	 ;; _neq_after_c1a5be5855fda5c3c2bc0178a498b0e80142f105c187ce7100b93ecf9d5691ba	 
- stack 1: 0x41C
- stack 0: 0x105
135	 EA	JUMP		 	 
- stack 0: 0x41C
136	 105	JUMPDEST		 ;; _neq_after_c1a5be5855fda5c3c2bc0178a498b0e80142f105c187ce7100b93ecf9d5691ba	 
- stack 0: 0x41C
137	 106	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
138	 108	ADD		 	 
- stack 0: 0x420
139	 109	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
140	 10A	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0x10FFFFF012200010099F80000B3000300CD00400141FFFF01220014009907FF
141	 10B	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0x10FFFFF012200010099F80000B3000300CD00400141FFFF01220014009907FF
- stack 0: 0xF0
142	 10D	SHR		 	 
- stack 1: 0x420
- stack 0: 0x10F
143	 10E	JUMP		 	 
- stack 0: 0x420
144	 10F	JUMPDEST		 ;; __riscvimpl_LUI_fffff0b7	  ;; # instr: lui ra,0xfffff(ignore imm)
- stack 0: 0x420
145	 110	PUSH4	fffff000	 	 
- stack 1: 0x420
- stack 0: 0xFFFFF000
146	 115	PUSH2	0020	 	 
- stack 2: 0x420
- stack 1: 0xFFFFF000
- stack 0: 0x20
147	 118	MSTORE		 	  ;; # store to x1
- stack 0: 0x420
148	 119	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
149	 11B	ADD		 	 
- stack 0: 0x424
150	 11C	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
151	 11D	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x12200010099F80000B3000300CD00400141FFFF01220014009907FF00B30004
152	 11E	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x12200010099F80000B3000300CD00400141FFFF01220014009907FF00B30004
- stack 0: 0xF0
153	 120	SHR		 	 
- stack 1: 0x424
- stack 0: 0x122
154	 121	JUMP		 	 
- stack 0: 0x424
155	 122	JUMPDEST		 ;; __riscvimpl_SRAI_1_1_0	  ;; # instr: srai ra,ra,1025(ignore imm)
- stack 0: 0x424
156	 123	PUSH2	0020	 	 
- stack 1: 0x424
- stack 0: 0x20
157	 126	MLOAD		 	  ;; # read from x1
- stack 1: 0x424
- stack 0: 0xFFFFF000
158	 127	PUSH1	03	 	 
- stack 2: 0x424
- stack 1: 0xFFFFF000
- stack 0: 0x3
159	 129	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000
160	 12A	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x424
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000
- stack 0: 0x424
161	 12B	MLOAD		 	 
- stack 2: 0x424
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000
- stack 0: 0x12200010099F80000B3000300CD00400141FFFF01220014009907FF00B30004
162	 12C	PUSH1	E0	 	 
- stack 3: 0x424
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000
- stack 1: 0x12200010099F80000B3000300CD00400141FFFF01220014009907FF00B30004
- stack 0: 0xE0
163	 12E	SHR		 	 
- stack 2: 0x424
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000
- stack 0: 0x1220001
164	 12F	PUSH2	FFFF	 	 
- stack 3: 0x424
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000
- stack 1: 0x1220001
- stack 0: 0xFFFF
165	 132	AND		 	 
- stack 2: 0x424
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000
- stack 0: 0x1
166	 133	SAR		 	 
- stack 1: 0x424
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
167	 134	PUSH2	0020	 	 
- stack 2: 0x424
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x20
168	 137	MSTORE		 	  ;; # store to x1
- stack 0: 0x424
169	 138	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
170	 13A	ADD		 	 
- stack 0: 0x428
171	 13B	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
172	 13C	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x99F80000B3000300CD00400141FFFF01220014009907FF00B3000400CD002C
173	 13D	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x99F80000B3000300CD00400141FFFF01220014009907FF00B3000400CD002C
- stack 0: 0xF0
174	 13F	SHR		 	 
- stack 1: 0x428
- stack 0: 0x99
175	 140	JUMP		 	 
- stack 0: 0x428
176	 99	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x428
177	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
178	 9B	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x99F80000B3000300CD00400141FFFF01220014009907FF00B3000400CD002C
179	 9C	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0x99F80000B3000300CD00400141FFFF01220014009907FF00B3000400CD002C
- stack 0: 0xE0
180	 9E	SHR		 	 
- stack 1: 0x428
- stack 0: 0x99F800
181	 9F	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0x99F800
- stack 0: 0xFFFF
182	 A2	AND		 	 
- stack 1: 0x428
- stack 0: 0xF800
183	 A3	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0xF800
- stack 0: 0x1
184	 A5	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
185	 A6	PUSH2	03A0	 	 
- stack 2: 0x428
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x3A0
186	 A9	MSTORE		 	  ;; # store to x29
- stack 0: 0x428
187	 AA	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
188	 AC	ADD		 	 
- stack 0: 0x42C
189	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
190	 AE	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xB3000300CD00400141FFFF01220014009907FF00B3000400CD002C01540000
191	 AF	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0xB3000300CD00400141FFFF01220014009907FF00B3000400CD002C01540000
- stack 0: 0xF0
192	 B1	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xB3
193	 B2	JUMP		 	 
- stack 0: 0x42C
194	 B3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x42C
195	 B4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
196	 B5	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xB3000300CD00400141FFFF01220014009907FF00B3000400CD002C01540000
197	 B6	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0xB3000300CD00400141FFFF01220014009907FF00B3000400CD002C01540000
- stack 0: 0xE0
198	 B8	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xB30003
199	 B9	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0xB30003
- stack 0: 0xFFFF
200	 BC	AND		 	 
- stack 1: 0x42C
- stack 0: 0x3
201	 BD	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x3
- stack 0: 0x1
202	 BF	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x3
203	 C0	PUSH2	0380	 	 
- stack 2: 0x42C
- stack 1: 0x3
- stack 0: 0x380
204	 C3	MSTORE		 	  ;; # store to x28
- stack 0: 0x42C
205	 C4	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
206	 C6	ADD		 	 
- stack 0: 0x430
207	 C7	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
208	 C8	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xCD00400141FFFF01220014009907FF00B3000400CD002C0154000001220014
209	 C9	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xCD00400141FFFF01220014009907FF00B3000400CD002C0154000001220014
- stack 0: 0xF0
210	 CB	SHR		 	 
- stack 1: 0x430
- stack 0: 0xCD
211	 CC	JUMP		 	 
- stack 0: 0x430
212	 CD	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,54(ignore imm)
- stack 0: 0x430
213	 CE	PUSH2	0020	 	 
- stack 1: 0x430
- stack 0: 0x20
214	 D1	MLOAD		 	  ;; # read from x1
- stack 1: 0x430
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
215	 D2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x430
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0xFFFFFFFF
216	 D7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x430
- stack 0: 0xFFFFF800
217	 D8	PUSH2	03A0	 	 
- stack 2: 0x430
- stack 1: 0xFFFFF800
- stack 0: 0x3A0
218	 DB	MLOAD		 	  ;; # read from x29
- stack 2: 0x430
- stack 1: 0xFFFFF800
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
219	 DC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x430
- stack 2: 0xFFFFF800
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0xFFFFFFFF
220	 E1	AND		 	  ;; # mask to 32 bits
- stack 2: 0x430
- stack 1: 0xFFFFF800
- stack 0: 0xFFFFF800
221	 E2	SUB		 	 
- stack 1: 0x430
- stack 0: 0x0
222	 E3	PUSH2	00EB	 ;; _neq_c1a5be5855fda5c3c2bc0178a498b0e80142f105c187ce7100b93ecf9d5691ba	 
- stack 2: 0x430
- stack 1: 0x0
- stack 0: 0xEB
223	 E6	JUMPI		 	 
- stack 0: 0x430
224	 E7	PUSH2	0105	 ;; _neq_after_c1a5be5855fda5c3c2bc0178a498b0e80142f105c187ce7100b93ecf9d5691ba	 
- stack 1: 0x430
- stack 0: 0x105
225	 EA	JUMP		 	 
- stack 0: 0x430
226	 105	JUMPDEST		 ;; _neq_after_c1a5be5855fda5c3c2bc0178a498b0e80142f105c187ce7100b93ecf9d5691ba	 
- stack 0: 0x430
227	 106	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
228	 108	ADD		 	 
- stack 0: 0x434
229	 109	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
230	 10A	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x141FFFF01220014009907FF00B3000400CD002C01540000012200140099F800
231	 10B	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0x141FFFF01220014009907FF00B3000400CD002C01540000012200140099F800
- stack 0: 0xF0
232	 10D	SHR		 	 
- stack 1: 0x434
- stack 0: 0x141
233	 10E	JUMP		 	 
- stack 0: 0x434
234	 141	JUMPDEST		 ;; __riscvimpl_LUI_7ffff0b7	  ;; # instr: lui ra,0x7ffff(ignore imm)
- stack 0: 0x434
235	 142	PUSH4	7ffff000	 	 
- stack 1: 0x434
- stack 0: 0x7FFFF000
236	 147	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0x7FFFF000
- stack 0: 0x20
237	 14A	MSTORE		 	  ;; # store to x1
- stack 0: 0x434
238	 14B	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
239	 14D	ADD		 	 
- stack 0: 0x438
240	 14E	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
241	 14F	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x1220014009907FF00B3000400CD002C01540000012200140099F80000B30005
242	 150	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x1220014009907FF00B3000400CD002C01540000012200140099F80000B30005
- stack 0: 0xF0
243	 152	SHR		 	 
- stack 1: 0x438
- stack 0: 0x122
244	 153	JUMP		 	 
- stack 0: 0x438
245	 122	JUMPDEST		 ;; __riscvimpl_SRAI_1_1_0	  ;; # instr: srai ra,ra,1025(ignore imm)
- stack 0: 0x438
246	 123	PUSH2	0020	 	 
- stack 1: 0x438
- stack 0: 0x20
247	 126	MLOAD		 	  ;; # read from x1
- stack 1: 0x438
- stack 0: 0x7FFFF000
248	 127	PUSH1	03	 	 
- stack 2: 0x438
- stack 1: 0x7FFFF000
- stack 0: 0x3
249	 129	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x7FFFF000
250	 12A	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x438
- stack 1: 0x7FFFF000
- stack 0: 0x438
251	 12B	MLOAD		 	 
- stack 2: 0x438
- stack 1: 0x7FFFF000
- stack 0: 0x1220014009907FF00B3000400CD002C01540000012200140099F80000B30005
252	 12C	PUSH1	E0	 	 
- stack 3: 0x438
- stack 2: 0x7FFFF000
- stack 1: 0x1220014009907FF00B3000400CD002C01540000012200140099F80000B30005
- stack 0: 0xE0
253	 12E	SHR		 	 
- stack 2: 0x438
- stack 1: 0x7FFFF000
- stack 0: 0x1220014
254	 12F	PUSH2	FFFF	 	 
- stack 3: 0x438
- stack 2: 0x7FFFF000
- stack 1: 0x1220014
- stack 0: 0xFFFF
255	 132	AND		 	 
- stack 2: 0x438
- stack 1: 0x7FFFF000
- stack 0: 0x14
256	 133	SAR		 	 
- stack 1: 0x438
- stack 0: 0x7FF
257	 134	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0x7FF
- stack 0: 0x20
258	 137	MSTORE		 	  ;; # store to x1
- stack 0: 0x438
259	 138	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
260	 13A	ADD		 	 
- stack 0: 0x43C
261	 13B	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
262	 13C	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x9907FF00B3000400CD002C01540000012200140099F80000B3000500CD0018
263	 13D	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x9907FF00B3000400CD002C01540000012200140099F80000B3000500CD0018
- stack 0: 0xF0
264	 13F	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x99
265	 140	JUMP		 	 
- stack 0: 0x43C
266	 99	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x43C
267	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
268	 9B	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x9907FF00B3000400CD002C01540000012200140099F80000B3000500CD0018
269	 9C	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0x9907FF00B3000400CD002C01540000012200140099F80000B3000500CD0018
- stack 0: 0xE0
270	 9E	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x9907FF
271	 9F	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0x9907FF
- stack 0: 0xFFFF
272	 A2	AND		 	 
- stack 1: 0x43C
- stack 0: 0x7FF
273	 A3	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0x7FF
- stack 0: 0x1
274	 A5	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0x7FF
275	 A6	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0x7FF
- stack 0: 0x3A0
276	 A9	MSTORE		 	  ;; # store to x29
- stack 0: 0x43C
277	 AA	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
278	 AC	ADD		 	 
- stack 0: 0x440
279	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
280	 AE	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xB3000400CD002C01540000012200140099F80000B3000500CD001801670000
281	 AF	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0xB3000400CD002C01540000012200140099F80000B3000500CD001801670000
- stack 0: 0xF0
282	 B1	SHR		 	 
- stack 1: 0x440
- stack 0: 0xB3
283	 B2	JUMP		 	 
- stack 0: 0x440
284	 B3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x440
285	 B4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
286	 B5	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xB3000400CD002C01540000012200140099F80000B3000500CD001801670000
287	 B6	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0xB3000400CD002C01540000012200140099F80000B3000500CD001801670000
- stack 0: 0xE0
288	 B8	SHR		 	 
- stack 1: 0x440
- stack 0: 0xB30004
289	 B9	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0xB30004
- stack 0: 0xFFFF
290	 BC	AND		 	 
- stack 1: 0x440
- stack 0: 0x4
291	 BD	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0x4
- stack 0: 0x1
292	 BF	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0x4
293	 C0	PUSH2	0380	 	 
- stack 2: 0x440
- stack 1: 0x4
- stack 0: 0x380
294	 C3	MSTORE		 	  ;; # store to x28
- stack 0: 0x440
295	 C4	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
296	 C6	ADD		 	 
- stack 0: 0x444
297	 C7	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
298	 C8	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xCD002C01540000012200140099F80000B3000500CD00180167000000990000
299	 C9	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xCD002C01540000012200140099F80000B3000500CD00180167000000990000
- stack 0: 0xF0
300	 CB	SHR		 	 
- stack 1: 0x444
- stack 0: 0xCD
301	 CC	JUMP		 	 
- stack 0: 0x444
302	 CD	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,54(ignore imm)
- stack 0: 0x444
303	 CE	PUSH2	0020	 	 
- stack 1: 0x444
- stack 0: 0x20
304	 D1	MLOAD		 	  ;; # read from x1
- stack 1: 0x444
- stack 0: 0x7FF
305	 D2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x444
- stack 1: 0x7FF
- stack 0: 0xFFFFFFFF
306	 D7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x444
- stack 0: 0x7FF
307	 D8	PUSH2	03A0	 	 
- stack 2: 0x444
- stack 1: 0x7FF
- stack 0: 0x3A0
308	 DB	MLOAD		 	  ;; # read from x29
- stack 2: 0x444
- stack 1: 0x7FF
- stack 0: 0x7FF
309	 DC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x444
- stack 2: 0x7FF
- stack 1: 0x7FF
- stack 0: 0xFFFFFFFF
310	 E1	AND		 	  ;; # mask to 32 bits
- stack 2: 0x444
- stack 1: 0x7FF
- stack 0: 0x7FF
311	 E2	SUB		 	 
- stack 1: 0x444
- stack 0: 0x0
312	 E3	PUSH2	00EB	 ;; _neq_c1a5be5855fda5c3c2bc0178a498b0e80142f105c187ce7100b93ecf9d5691ba	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0xEB
313	 E6	JUMPI		 	 
- stack 0: 0x444
314	 E7	PUSH2	0105	 ;; _neq_after_c1a5be5855fda5c3c2bc0178a498b0e80142f105c187ce7100b93ecf9d5691ba	 
- stack 1: 0x444
- stack 0: 0x105
315	 EA	JUMP		 	 
- stack 0: 0x444
316	 105	JUMPDEST		 ;; _neq_after_c1a5be5855fda5c3c2bc0178a498b0e80142f105c187ce7100b93ecf9d5691ba	 
- stack 0: 0x444
317	 106	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
318	 108	ADD		 	 
- stack 0: 0x448
319	 109	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
320	 10A	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x1540000012200140099F80000B3000500CD0018016700000099000000B30006
321	 10B	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0x1540000012200140099F80000B3000500CD0018016700000099000000B30006
- stack 0: 0xF0
322	 10D	SHR		 	 
- stack 1: 0x448
- stack 0: 0x154
323	 10E	JUMP		 	 
- stack 0: 0x448
324	 154	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x448
325	 155	PUSH4	80000000	 	 
- stack 1: 0x448
- stack 0: 0x80000000
326	 15A	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0x80000000
- stack 0: 0x20
327	 15D	MSTORE		 	  ;; # store to x1
- stack 0: 0x448
328	 15E	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
329	 160	ADD		 	 
- stack 0: 0x44C
330	 161	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
331	 162	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x12200140099F80000B3000500CD0018016700000099000000B3000601770008
332	 163	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x12200140099F80000B3000500CD0018016700000099000000B3000601770008
- stack 0: 0xF0
333	 165	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x122
334	 166	JUMP		 	 
- stack 0: 0x44C
335	 122	JUMPDEST		 ;; __riscvimpl_SRAI_1_1_0	  ;; # instr: srai ra,ra,1025(ignore imm)
- stack 0: 0x44C
336	 123	PUSH2	0020	 	 
- stack 1: 0x44C
- stack 0: 0x20
337	 126	MLOAD		 	  ;; # read from x1
- stack 1: 0x44C
- stack 0: 0x80000000
338	 127	PUSH1	03	 	 
- stack 2: 0x44C
- stack 1: 0x80000000
- stack 0: 0x3
339	 129	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
340	 12A	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x44C
341	 12B	MLOAD		 	 
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x12200140099F80000B3000500CD0018016700000099000000B3000601770008
342	 12C	PUSH1	E0	 	 
- stack 3: 0x44C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x12200140099F80000B3000500CD0018016700000099000000B3000601770008
- stack 0: 0xE0
343	 12E	SHR		 	 
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1220014
344	 12F	PUSH2	FFFF	 	 
- stack 3: 0x44C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x1220014
- stack 0: 0xFFFF
345	 132	AND		 	 
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x14
346	 133	SAR		 	 
- stack 1: 0x44C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
347	 134	PUSH2	0020	 	 
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x20
348	 137	MSTORE		 	  ;; # store to x1
- stack 0: 0x44C
349	 138	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
350	 13A	ADD		 	 
- stack 0: 0x450
351	 13B	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
352	 13C	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x99F80000B3000500CD0018016700000099000000B300060177000801B70018
353	 13D	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x99F80000B3000500CD0018016700000099000000B300060177000801B70018
- stack 0: 0xF0
354	 13F	SHR		 	 
- stack 1: 0x450
- stack 0: 0x99
355	 140	JUMP		 	 
- stack 0: 0x450
356	 99	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x450
357	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
358	 9B	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x99F80000B3000500CD0018016700000099000000B300060177000801B70018
359	 9C	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x99F80000B3000500CD0018016700000099000000B300060177000801B70018
- stack 0: 0xE0
360	 9E	SHR		 	 
- stack 1: 0x450
- stack 0: 0x99F800
361	 9F	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x99F800
- stack 0: 0xFFFF
362	 A2	AND		 	 
- stack 1: 0x450
- stack 0: 0xF800
363	 A3	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0xF800
- stack 0: 0x1
364	 A5	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
365	 A6	PUSH2	03A0	 	 
- stack 2: 0x450
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x3A0
366	 A9	MSTORE		 	  ;; # store to x29
- stack 0: 0x450
367	 AA	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
368	 AC	ADD		 	 
- stack 0: 0x454
369	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
370	 AE	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xB3000500CD0018016700000099000000B300060177000801B7001800210000
371	 AF	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0xB3000500CD0018016700000099000000B300060177000801B7001800210000
- stack 0: 0xF0
372	 B1	SHR		 	 
- stack 1: 0x454
- stack 0: 0xB3
373	 B2	JUMP		 	 
- stack 0: 0x454
374	 B3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x454
375	 B4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
376	 B5	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xB3000500CD0018016700000099000000B300060177000801B7001800210000
377	 B6	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0xB3000500CD0018016700000099000000B300060177000801B7001800210000
- stack 0: 0xE0
378	 B8	SHR		 	 
- stack 1: 0x454
- stack 0: 0xB30005
379	 B9	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0xB30005
- stack 0: 0xFFFF
380	 BC	AND		 	 
- stack 1: 0x454
- stack 0: 0x5
381	 BD	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0x5
- stack 0: 0x1
382	 BF	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0x5
383	 C0	PUSH2	0380	 	 
- stack 2: 0x454
- stack 1: 0x5
- stack 0: 0x380
384	 C3	MSTORE		 	  ;; # store to x28
- stack 0: 0x454
385	 C4	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
386	 C6	ADD		 	 
- stack 0: 0x458
387	 C7	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
388	 C8	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xCD0018016700000099000000B300060177000801B7001800210000003404A8
389	 C9	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0xCD0018016700000099000000B300060177000801B7001800210000003404A8
- stack 0: 0xF0
390	 CB	SHR		 	 
- stack 1: 0x458
- stack 0: 0xCD
391	 CC	JUMP		 	 
- stack 0: 0x458
392	 CD	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,54(ignore imm)
- stack 0: 0x458
393	 CE	PUSH2	0020	 	 
- stack 1: 0x458
- stack 0: 0x20
394	 D1	MLOAD		 	  ;; # read from x1
- stack 1: 0x458
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
395	 D2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x458
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0xFFFFFFFF
396	 D7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x458
- stack 0: 0xFFFFF800
397	 D8	PUSH2	03A0	 	 
- stack 2: 0x458
- stack 1: 0xFFFFF800
- stack 0: 0x3A0
398	 DB	MLOAD		 	  ;; # read from x29
- stack 2: 0x458
- stack 1: 0xFFFFF800
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
399	 DC	PUSH4	FFFFFFFF	 	 
- stack 3: 0x458
- stack 2: 0xFFFFF800
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0xFFFFFFFF
400	 E1	AND		 	  ;; # mask to 32 bits
- stack 2: 0x458
- stack 1: 0xFFFFF800
- stack 0: 0xFFFFF800
401	 E2	SUB		 	 
- stack 1: 0x458
- stack 0: 0x0
402	 E3	PUSH2	00EB	 ;; _neq_c1a5be5855fda5c3c2bc0178a498b0e80142f105c187ce7100b93ecf9d5691ba	 
- stack 2: 0x458
- stack 1: 0x0
- stack 0: 0xEB
403	 E6	JUMPI		 	 
- stack 0: 0x458
404	 E7	PUSH2	0105	 ;; _neq_after_c1a5be5855fda5c3c2bc0178a498b0e80142f105c187ce7100b93ecf9d5691ba	 
- stack 1: 0x458
- stack 0: 0x105
405	 EA	JUMP		 	 
- stack 0: 0x458
406	 105	JUMPDEST		 ;; _neq_after_c1a5be5855fda5c3c2bc0178a498b0e80142f105c187ce7100b93ecf9d5691ba	 
- stack 0: 0x458
407	 106	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
408	 108	ADD		 	 
- stack 0: 0x45C
409	 109	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
410	 10A	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x16700000099000000B300060177000801B7001800210000003404A800530042
411	 10B	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x16700000099000000B300060177000801B7001800210000003404A800530042
- stack 0: 0xF0
412	 10D	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x167
413	 10E	JUMP		 	 
- stack 0: 0x45C
414	 167	JUMPDEST		 ;; __riscvimpl_LUI_80000037	  ;; # instr: lui zero,0x80000(ignore imm)
- stack 0: 0x45C
415	 168	PUSH4	80000000	 	 
- stack 1: 0x45C
- stack 0: 0x80000000
416	 16D	POP		 	 
- stack 0: 0x45C
417	 16E	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
418	 170	ADD		 	 
- stack 0: 0x460
419	 171	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
420	 172	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x99000000B300060177000801B7001800210000003404A80053004200660000
421	 173	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x99000000B300060177000801B7001800210000003404A80053004200660000
- stack 0: 0xF0
422	 175	SHR		 	 
- stack 1: 0x460
- stack 0: 0x99
423	 176	JUMP		 	 
- stack 0: 0x460
424	 99	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x460
425	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x460
- stack 0: 0x460
426	 9B	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x99000000B300060177000801B7001800210000003404A80053004200660000
427	 9C	PUSH1	E0	 	 
- stack 2: 0x460
- stack 1: 0x99000000B300060177000801B7001800210000003404A80053004200660000
- stack 0: 0xE0
428	 9E	SHR		 	 
- stack 1: 0x460
- stack 0: 0x990000
429	 9F	PUSH2	FFFF	 	 
- stack 2: 0x460
- stack 1: 0x990000
- stack 0: 0xFFFF
430	 A2	AND		 	 
- stack 1: 0x460
- stack 0: 0x0
431	 A3	PUSH1	01	 	 
- stack 2: 0x460
- stack 1: 0x0
- stack 0: 0x1
432	 A5	SIGNEXTEND		 	 
- stack 1: 0x460
- stack 0: 0x0
433	 A6	PUSH2	03A0	 	 
- stack 2: 0x460
- stack 1: 0x0
- stack 0: 0x3A0
434	 A9	MSTORE		 	  ;; # store to x29
- stack 0: 0x460
435	 AA	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
436	 AC	ADD		 	 
- stack 0: 0x464
437	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
438	 AE	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xB300060177000801B7001800210000003404A8005300420066000001F70001
439	 AF	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xB300060177000801B7001800210000003404A8005300420066000001F70001
- stack 0: 0xF0
440	 B1	SHR		 	 
- stack 1: 0x464
- stack 0: 0xB3
441	 B2	JUMP		 	 
- stack 0: 0x464
442	 B3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x464
443	 B4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
444	 B5	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xB300060177000801B7001800210000003404A8005300420066000001F70001
445	 B6	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0xB300060177000801B7001800210000003404A8005300420066000001F70001
- stack 0: 0xE0
446	 B8	SHR		 	 
- stack 1: 0x464
- stack 0: 0xB30006
447	 B9	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0xB30006
- stack 0: 0xFFFF
448	 BC	AND		 	 
- stack 1: 0x464
- stack 0: 0x6
449	 BD	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0x6
- stack 0: 0x1
450	 BF	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0x6
451	 C0	PUSH2	0380	 	 
- stack 2: 0x464
- stack 1: 0x6
- stack 0: 0x380
452	 C3	MSTORE		 	  ;; # store to x28
- stack 0: 0x464
453	 C4	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
454	 C6	ADD		 	 
- stack 0: 0x468
455	 C7	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
456	 C8	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x177000801B7001800210000003404A8005300420066000001F7000100210000
457	 C9	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x177000801B7001800210000003404A8005300420066000001F7000100210000
- stack 0: 0xF0
458	 CB	SHR		 	 
- stack 1: 0x468
- stack 0: 0x177
459	 CC	JUMP		 	 
- stack 0: 0x468
460	 177	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x468
461	 178	PUSH1	00	 	 
- stack 1: 0x468
- stack 0: 0x0
462	 17A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x468
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
463	 17F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x468
- stack 0: 0x0
464	 180	PUSH2	03A0	 	 
- stack 2: 0x468
- stack 1: 0x0
- stack 0: 0x3A0
465	 183	MLOAD		 	  ;; # read from x29
- stack 2: 0x468
- stack 1: 0x0
- stack 0: 0x0
466	 184	PUSH4	FFFFFFFF	 	 
- stack 3: 0x468
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
467	 189	AND		 	  ;; # mask to 32 bits
- stack 2: 0x468
- stack 1: 0x0
- stack 0: 0x0
468	 18A	SUB		 	 
- stack 1: 0x468
- stack 0: 0x0
469	 18B	PUSH2	0193	 ;; _neq_b892e43e247a5b49e1a3cbe3830e779b4b5f12dc556ec95c68e7c55ebaca5b7a	 
- stack 2: 0x468
- stack 1: 0x0
- stack 0: 0x193
470	 18E	JUMPI		 	 
- stack 0: 0x468
471	 18F	PUSH2	01AD	 ;; _neq_after_b892e43e247a5b49e1a3cbe3830e779b4b5f12dc556ec95c68e7c55ebaca5b7a	 
- stack 1: 0x468
- stack 0: 0x1AD
472	 192	JUMP		 	 
- stack 0: 0x468
473	 1AD	JUMPDEST		 ;; _neq_after_b892e43e247a5b49e1a3cbe3830e779b4b5f12dc556ec95c68e7c55ebaca5b7a	 
- stack 0: 0x468
474	 1AE	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
475	 1B0	ADD		 	 
- stack 0: 0x46C
476	 1B1	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
477	 1B2	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x1B7001800210000003404A8005300420066000001F7000100210000003404AC
478	 1B3	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x1B7001800210000003404A8005300420066000001F7000100210000003404AC
- stack 0: 0xF0
479	 1B5	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x1B7
480	 1B6	JUMP		 	 
- stack 0: 0x46C
481	 1B7	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x46C
482	 1B8	PUSH1	00	 	 
- stack 1: 0x46C
- stack 0: 0x0
483	 1BA	PUSH4	FFFFFFFF	 	 
- stack 2: 0x46C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
484	 1BF	AND		 	  ;; # mask to 32 bits
- stack 1: 0x46C
- stack 0: 0x0
485	 1C0	PUSH2	0380	 	 
- stack 2: 0x46C
- stack 1: 0x0
- stack 0: 0x380
486	 1C3	MLOAD		 	  ;; # read from x28
- stack 2: 0x46C
- stack 1: 0x0
- stack 0: 0x6
487	 1C4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x46C
- stack 2: 0x0
- stack 1: 0x6
- stack 0: 0xFFFFFFFF
488	 1C9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x46C
- stack 1: 0x0
- stack 0: 0x6
489	 1CA	SUB		 	 
- stack 1: 0x46C
- stack 0: 0x6
490	 1CB	PUSH2	01D3	 ;; _neq_dea0817f58d0793a2a5f81aca1d249db3f3809b516dc137a33d97d9136453eb1	 
- stack 2: 0x46C
- stack 1: 0x6
- stack 0: 0x1D3
491	 1CE	JUMPI		 	 
- stack 0: 0x46C
492	 1D3	JUMPDEST		 ;; _neq_dea0817f58d0793a2a5f81aca1d249db3f3809b516dc137a33d97d9136453eb1	 
- stack 0: 0x46C
493	 1D4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x46C
- stack 0: 0x46C
494	 1D5	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x1B7001800210000003404A8005300420066000001F7000100210000003404AC
495	 1D6	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0x1B7001800210000003404A8005300420066000001F7000100210000003404AC
- stack 0: 0xE0
496	 1D8	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x1B70018
497	 1D9	PUSH2	FFFF	 	 
- stack 2: 0x46C
- stack 1: 0x1B70018
- stack 0: 0xFFFF
498	 1DC	AND		 	 
- stack 1: 0x46C
- stack 0: 0x18
499	 1DD	PUSH1	01	 	 
- stack 2: 0x46C
- stack 1: 0x18
- stack 0: 0x1
500	 1DF	SIGNEXTEND		 	 
- stack 1: 0x46C
- stack 0: 0x18
501	 1E0	ADD		 	 
- stack 0: 0x484
502	 1E1	PUSH4	FFFFFFFF	 	 
- stack 1: 0x484
- stack 0: 0xFFFFFFFF
503	 1E6	AND		 	  ;; # mask to 32 bits
- stack 0: 0x484
504	 1E7	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
505	 1E8	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x210000003404AC00530042006600000202000000660000000000006574796D
506	 1E9	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x210000003404AC00530042006600000202000000660000000000006574796D
- stack 0: 0xF0
507	 1EB	SHR		 	 
- stack 1: 0x484
- stack 0: 0x21
508	 1EC	JUMP		 	 
- stack 0: 0x484
509	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x484
510	 22	PUSH4	00000000	 	 
- stack 1: 0x484
- stack 0: 0x0
511	 27	PUSH2	0160	 	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x160
512	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x484
513	 2B	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
514	 2D	ADD		 	 
- stack 0: 0x488
515	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
516	 2F	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x3404AC00530042006600000202000000660000000000006574796D00007473
517	 30	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x3404AC00530042006600000202000000660000000000006574796D00007473
- stack 0: 0xF0
518	 32	SHR		 	 
- stack 1: 0x488
- stack 0: 0x34
519	 33	JUMP		 	 
- stack 0: 0x488
520	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1184(ignore imm)
- stack 0: 0x488
521	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x488
- stack 0: 0x488
522	 36	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x3404AC00530042006600000202000000660000000000006574796D00007473
523	 37	PUSH1	E0	 	 
- stack 2: 0x488
- stack 1: 0x3404AC00530042006600000202000000660000000000006574796D00007473
- stack 0: 0xE0
524	 39	SHR		 	 
- stack 1: 0x488
- stack 0: 0x3404AC
525	 3A	PUSH2	FFFF	 	 
- stack 2: 0x488
- stack 1: 0x3404AC
- stack 0: 0xFFFF
526	 3D	AND		 	 
- stack 1: 0x488
- stack 0: 0x4AC
527	 3E	PUSH1	01	 	 
- stack 2: 0x488
- stack 1: 0x4AC
- stack 0: 0x1
528	 40	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0x4AC
529	 41	PUSH2	0160	 	 
- stack 2: 0x488
- stack 1: 0x4AC
- stack 0: 0x160
530	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x488
- stack 1: 0x4AC
- stack 0: 0x0
531	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x488
- stack 0: 0x4AC
532	 46	PUSH2	0160	 	 
- stack 2: 0x488
- stack 1: 0x4AC
- stack 0: 0x160
533	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x488
534	 4A	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
535	 4C	ADD		 	 
- stack 0: 0x48C
536	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
537	 4E	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x530042006600000202000000660000000000006574796D0000747300525245
538	 4F	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x530042006600000202000000660000000000006574796D0000747300525245
- stack 0: 0xF0
539	 51	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x53
540	 52	JUMP		 	 
- stack 0: 0x48C
541	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x48C
542	 54	PUSH4	00042000	 	 
- stack 1: 0x48C
- stack 0: 0x42000
543	 59	PUSH2	0140	 	 
- stack 2: 0x48C
- stack 1: 0x42000
- stack 0: 0x140
544	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x48C
545	 5D	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
546	 5F	ADD		 	 
- stack 0: 0x490
547	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
548	 61	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x6600000202000000660000000000006574796D000074730052524500004B4F
549	 62	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x6600000202000000660000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
550	 64	SHR		 	 
- stack 1: 0x490
- stack 0: 0x66
551	 65	JUMP		 	 
- stack 0: 0x490
552	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x490
553	 67	PUSH2	0140	 	 
- stack 1: 0x490
- stack 0: 0x140
554	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x490
- stack 0: 0x42000
555	 6B	PUSH2	0075	 ;; _ecall_fb681131e9acfae364321eba52847411ddf198dd76e96cb65d171ec167d3d676	 
- stack 2: 0x490
- stack 1: 0x42000
- stack 0: 0x75
556	 6E	JUMPI		 	 
- stack 0: 0x490
557	 75	JUMPDEST		 ;; _ecall_fb681131e9acfae364321eba52847411ddf198dd76e96cb65d171ec167d3d676	 
- stack 0: 0x490
558	 76	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
559	 78	PUSH2	0160	 	 
- stack 2: 0x490
- stack 1: 0x4
- stack 0: 0x160
560	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x490
- stack 1: 0x4
- stack 0: 0x4AC
561	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x490
562	 7D	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
563	 7F	ADD		 	 
- stack 0: 0x494
564	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
565	 81	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x202000000660000000000006574796D000074730052524500004B4F00000000
566	 82	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x202000000660000000000006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
567	 84	SHR		 	 
- stack 1: 0x494
- stack 0: 0x202
568	 85	JUMP		 	 
- stack 0: 0x494
569	 202	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x494
570	 203	PUSH4	00000000	 	 
- stack 1: 0x494
- stack 0: 0x0
571	 208	PUSH2	0140	 	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x140
572	 20B	MSTORE		 	  ;; # store to x10
- stack 0: 0x494
573	 20C	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
574	 20E	ADD		 	 
- stack 0: 0x498
575	 20F	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
576	 210	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x660000000000006574796D000074730052524500004B4F0000000000000000
577	 211	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x660000000000006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
578	 213	SHR		 	 
- stack 1: 0x498
- stack 0: 0x66
579	 214	JUMP		 	 
- stack 0: 0x498
580	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x498
581	 67	PUSH2	0140	 	 
- stack 1: 0x498
- stack 0: 0x140
582	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x498
- stack 0: 0x0
583	 6B	PUSH2	0075	 ;; _ecall_fb681131e9acfae364321eba52847411ddf198dd76e96cb65d171ec167d3d676	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0x75
584	 6E	JUMPI		 	 
- stack 0: 0x498
585	 6F	PUSH1	20	 	 
- stack 1: 0x498
- stack 0: 0x20
586	 71	PUSH2	0160	 	 
- stack 2: 0x498
- stack 1: 0x20
- stack 0: 0x160
587	 74	RETURN		 	 
Final bytecode length; 710
Returned: 00000000000000000000000000000000000000000000000000000000000004ac
gasUsed : 2911
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c
** HOT: 420 - range: 420,424,428,42c,430
** HOT: 434 - range: 434,438,43c,440,444
** HOT: 448 - range: 448,44c,450,454,458
** HOT: 45c - range: 45c,460,464,468
