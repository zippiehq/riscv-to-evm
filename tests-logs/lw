Running in EVM:
0	 0	PUSH4	02F0	 	 
- stack 0: 0x2F0
1	 5	PUSH2	03E8	 ;; _rambegin	 
- stack 1: 0x2F0
- stack 0: 0x3E8
2	 8	PUSH1	01	 	 
- stack 2: 0x2F0
- stack 1: 0x3E8
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x2F0
- stack 0: 0x3E9
4	 B	PUSH2	0400	 	 
- stack 2: 0x2F0
- stack 1: 0x3E9
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x210000003406D0005300420066000000860000009502D000B4000000E30FF0
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x210000003406D0005300420066000000860000009502D000B4000000E30FF0
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406D0005300420066000000860000009502D000B4000000E30FF000F600FF
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x3406D0005300420066000000860000009502D000B4000000E30FF000F600FF
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1744(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406D0005300420066000000860000009502D000B4000000E30FF000F600FF
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x3406D0005300420066000000860000009502D000B4000000E30FF000F600FF
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x3406D0
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x3406D0
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x6D0
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x6D0
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x6D0
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x6D0
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x6D0
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x6D0
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x6D0
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x5300420066000000860000009502D000B4000000E30FF000F600FF01150002
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x5300420066000000860000009502D000B4000000E30FF000F600FF01150002
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x66000000860000009502D000B4000000E30FF000F600FF01150002012F0274
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x66000000860000009502D000B4000000E30FF000F600FF01150002012F0274
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_9821b10520ca1e4b107f16b8808705641ad3884098485cb6258dc2d628ae4d7b	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_9821b10520ca1e4b107f16b8808705641ad3884098485cb6258dc2d628ae4d7b	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x6D0
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x860000009502D000B4000000E30FF000F600FF01150002012F027400860000
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x860000009502D000B4000000E30FF000F600FF01150002012F027400860000
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	 
- stack 1: 0x410
- stack 0: 0x410
77	 88	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x410
- stack 0: 0x20
78	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 8C	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 8E	ADD		 	 
- stack 0: 0x414
81	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 90	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x9502D000B4000000E30FF000F600FF01150002012F027400860000009502B4
83	 91	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x9502D000B4000000E30FF000F600FF01150002012F027400860000009502B4
- stack 0: 0xF0
84	 93	SHR		 	 
- stack 1: 0x414
- stack 0: 0x95
85	 94	JUMP		 	 
- stack 0: 0x414
86	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x414
87	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 97	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x9502D000B4000000E30FF000F600FF01150002012F027400860000009502B4
89	 98	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x9502D000B4000000E30FF000F600FF01150002012F027400860000009502B4
- stack 0: 0xE0
90	 9A	SHR		 	 
- stack 1: 0x414
- stack 0: 0x9502D0
91	 9B	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x9502D0
- stack 0: 0xFFFF
92	 9E	AND		 	 
- stack 1: 0x414
- stack 0: 0x2D0
93	 9F	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x2D0
- stack 0: 0x1
94	 A1	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x2D0
95	 A2	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x2D0
- stack 0: 0x20
96	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0x2D0
- stack 0: 0x410
97	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x414
- stack 0: 0x6E0
98	 A7	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x6E0
- stack 0: 0x20
99	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
100	 AB	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
101	 AD	ADD		 	 
- stack 0: 0x418
102	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
103	 AF	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB4000000E30FF000F600FF01150002012F027400860000009502B400B40004
104	 B0	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB4000000E30FF000F600FF01150002012F027400860000009502B400B40004
- stack 0: 0xF0
105	 B2	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB4
106	 B3	JUMP		 	 
- stack 0: 0x418
107	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x418
108	 B5	PUSH2	0020	 	 
- stack 1: 0x418
- stack 0: 0x20
109	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x418
- stack 0: 0x6E0
110	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x418
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
111	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x418
- stack 0: 0x6E0
112	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x418
- stack 1: 0x6E0
- stack 0: 0x418
113	 C0	MLOAD		 	 
- stack 2: 0x418
- stack 1: 0x6E0
- stack 0: 0xB4000000E30FF000F600FF01150002012F027400860000009502B400B40004
114	 C1	PUSH1	E0	 	 
- stack 3: 0x418
- stack 2: 0x6E0
- stack 1: 0xB4000000E30FF000F600FF01150002012F027400860000009502B400B40004
- stack 0: 0xE0
115	 C3	SHR		 	 
- stack 2: 0x418
- stack 1: 0x6E0
- stack 0: 0xB40000
116	 C4	PUSH2	FFFF	 	 
- stack 3: 0x418
- stack 2: 0x6E0
- stack 1: 0xB40000
- stack 0: 0xFFFF
117	 C7	AND		 	 
- stack 2: 0x418
- stack 1: 0x6E0
- stack 0: 0x0
118	 C8	PUSH1	01	 	 
- stack 3: 0x418
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
119	 CA	SIGNEXTEND		 	 
- stack 2: 0x418
- stack 1: 0x6E0
- stack 0: 0x0
120	 CB	ADD		 	 
- stack 1: 0x418
- stack 0: 0x6E0
121	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x418
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
122	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x418
- stack 0: 0x6E0
123	 D2	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xFF00FFFF00FF000FF00FF0F00FF00F00000000000000000000000000000000
124	 D3	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xFF00FFFF00FF000FF00FF0F00FF00F00000000000000000000000000000000
- stack 0: 0xE0
125	 D5	SHR		 	 
- stack 1: 0x418
- stack 0: 0xFF00FF
126	 D6	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0xFF00FF
- stack 0: 0x60
127	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
128	 DA	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
129	 DC	ADD		 	 
- stack 0: 0x41C
130	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
131	 DE	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xE30FF000F600FF01150002012F027400860000009502B400B400040171F010
132	 DF	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xE30FF000F600FF01150002012F027400860000009502B400B400040171F010
- stack 0: 0xF0
133	 E1	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xE3
134	 E2	JUMP		 	 
- stack 0: 0x41C
135	 E3	JUMPDEST		 ;; __riscvimpl_LUI_ff0eb7	  ;; # instr: lui t4,0xff0(ignore imm)
- stack 0: 0x41C
136	 E4	PUSH4	00ff0000	 	 
- stack 1: 0x41C
- stack 0: 0xFF0000
137	 E9	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0xFF0000
- stack 0: 0x3A0
138	 EC	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
139	 ED	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
140	 EF	ADD		 	 
- stack 0: 0x420
141	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
142	 F1	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF600FF01150002012F027400860000009502B400B400040171F01000F6FF00
143	 F2	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xF600FF01150002012F027400860000009502B400B400040171F01000F6FF00
- stack 0: 0xF0
144	 F4	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF6
145	 F5	JUMP		 	 
- stack 0: 0x420
146	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x420
147	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
148	 F8	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF600FF01150002012F027400860000009502B400B400040171F01000F6FF00
149	 F9	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0xF600FF01150002012F027400860000009502B400B400040171F01000F6FF00
- stack 0: 0xE0
150	 FB	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF600FF
151	 FC	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0xF600FF
- stack 0: 0xFFFF
152	 FF	AND		 	 
- stack 1: 0x420
- stack 0: 0xFF
153	 100	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0xFF
- stack 0: 0x1
154	 102	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0xFF
155	 103	PUSH2	03A0	 	 
- stack 2: 0x420
- stack 1: 0xFF
- stack 0: 0x3A0
156	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x420
- stack 1: 0xFF
- stack 0: 0xFF0000
157	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x420
- stack 0: 0xFF00FF
158	 108	PUSH2	03A0	 	 
- stack 2: 0x420
- stack 1: 0xFF00FF
- stack 0: 0x3A0
159	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x420
160	 10C	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
161	 10E	ADD		 	 
- stack 0: 0x424
162	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
163	 110	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x1150002012F027400860000009502B400B400040171F01000F6FF0001150003
164	 111	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x1150002012F027400860000009502B400B400040171F01000F6FF0001150003
- stack 0: 0xF0
165	 113	SHR		 	 
- stack 1: 0x424
- stack 0: 0x115
166	 114	JUMP		 	 
- stack 0: 0x424
167	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x424
168	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
169	 117	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x1150002012F027400860000009502B400B400040171F01000F6FF0001150003
170	 118	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x1150002012F027400860000009502B400B400040171F01000F6FF0001150003
- stack 0: 0xE0
171	 11A	SHR		 	 
- stack 1: 0x424
- stack 0: 0x1150002
172	 11B	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x1150002
- stack 0: 0xFFFF
173	 11E	AND		 	 
- stack 1: 0x424
- stack 0: 0x2
174	 11F	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0x2
- stack 0: 0x1
175	 121	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0x2
176	 122	PUSH2	0380	 	 
- stack 2: 0x424
- stack 1: 0x2
- stack 0: 0x380
177	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x424
178	 126	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
179	 128	ADD		 	 
- stack 0: 0x428
180	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
181	 12A	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x12F027400860000009502B400B400040171F01000F6FF0001150003012F0258
182	 12B	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x12F027400860000009502B400B400040171F01000F6FF0001150003012F0258
- stack 0: 0xF0
183	 12D	SHR		 	 
- stack 1: 0x428
- stack 0: 0x12F
184	 12E	JUMP		 	 
- stack 0: 0x428
185	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x428
186	 130	PUSH2	0060	 	 
- stack 1: 0x428
- stack 0: 0x60
187	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x428
- stack 0: 0xFF00FF
188	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x428
- stack 1: 0xFF00FF
- stack 0: 0xFFFFFFFF
189	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x428
- stack 0: 0xFF00FF
190	 13A	PUSH2	03A0	 	 
- stack 2: 0x428
- stack 1: 0xFF00FF
- stack 0: 0x3A0
191	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x428
- stack 1: 0xFF00FF
- stack 0: 0xFF00FF
192	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x428
- stack 2: 0xFF00FF
- stack 1: 0xFF00FF
- stack 0: 0xFFFFFFFF
193	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x428
- stack 1: 0xFF00FF
- stack 0: 0xFF00FF
194	 144	SUB		 	 
- stack 1: 0x428
- stack 0: 0x0
195	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x14D
196	 148	JUMPI		 	 
- stack 0: 0x428
197	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x428
- stack 0: 0x167
198	 14C	JUMP		 	 
- stack 0: 0x428
199	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x428
200	 168	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
201	 16A	ADD		 	 
- stack 0: 0x42C
202	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
203	 16C	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x860000009502B400B400040171F01000F6FF0001150003012F025800860000
204	 16D	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x860000009502B400B400040171F01000F6FF0001150003012F025800860000
- stack 0: 0xF0
205	 16F	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x86
206	 170	JUMP		 	 
- stack 0: 0x42C
207	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x42C
208	 87	DUP1		 	 
- stack 1: 0x42C
- stack 0: 0x42C
209	 88	PUSH2	0020	 	 
- stack 2: 0x42C
- stack 1: 0x42C
- stack 0: 0x20
210	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x42C
211	 8C	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
212	 8E	ADD		 	 
- stack 0: 0x430
213	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
214	 90	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x9502B400B400040171F01000F6FF0001150003012F02580086000000950298
215	 91	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x9502B400B400040171F01000F6FF0001150003012F02580086000000950298
- stack 0: 0xF0
216	 93	SHR		 	 
- stack 1: 0x430
- stack 0: 0x95
217	 94	JUMP		 	 
- stack 0: 0x430
218	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x430
219	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
220	 97	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x9502B400B400040171F01000F6FF0001150003012F02580086000000950298
221	 98	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0x9502B400B400040171F01000F6FF0001150003012F02580086000000950298
- stack 0: 0xE0
222	 9A	SHR		 	 
- stack 1: 0x430
- stack 0: 0x9502B4
223	 9B	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0x9502B4
- stack 0: 0xFFFF
224	 9E	AND		 	 
- stack 1: 0x430
- stack 0: 0x2B4
225	 9F	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0x2B4
- stack 0: 0x1
226	 A1	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x2B4
227	 A2	PUSH2	0020	 	 
- stack 2: 0x430
- stack 1: 0x2B4
- stack 0: 0x20
228	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x430
- stack 1: 0x2B4
- stack 0: 0x42C
229	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x430
- stack 0: 0x6E0
230	 A7	PUSH2	0020	 	 
- stack 2: 0x430
- stack 1: 0x6E0
- stack 0: 0x20
231	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x430
232	 AB	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
233	 AD	ADD		 	 
- stack 0: 0x434
234	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
235	 AF	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xB400040171F01000F6FF0001150003012F0258008600000095029800B40008
236	 B0	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xB400040171F01000F6FF0001150003012F0258008600000095029800B40008
- stack 0: 0xF0
237	 B2	SHR		 	 
- stack 1: 0x434
- stack 0: 0xB4
238	 B3	JUMP		 	 
- stack 0: 0x434
239	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x434
240	 B5	PUSH2	0020	 	 
- stack 1: 0x434
- stack 0: 0x20
241	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x434
- stack 0: 0x6E0
242	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x434
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
243	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x434
- stack 0: 0x6E0
244	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x434
- stack 1: 0x6E0
- stack 0: 0x434
245	 C0	MLOAD		 	 
- stack 2: 0x434
- stack 1: 0x6E0
- stack 0: 0xB400040171F01000F6FF0001150003012F0258008600000095029800B40008
246	 C1	PUSH1	E0	 	 
- stack 3: 0x434
- stack 2: 0x6E0
- stack 1: 0xB400040171F01000F6FF0001150003012F0258008600000095029800B40008
- stack 0: 0xE0
247	 C3	SHR		 	 
- stack 2: 0x434
- stack 1: 0x6E0
- stack 0: 0xB40004
248	 C4	PUSH2	FFFF	 	 
- stack 3: 0x434
- stack 2: 0x6E0
- stack 1: 0xB40004
- stack 0: 0xFFFF
249	 C7	AND		 	 
- stack 2: 0x434
- stack 1: 0x6E0
- stack 0: 0x4
250	 C8	PUSH1	01	 	 
- stack 3: 0x434
- stack 2: 0x6E0
- stack 1: 0x4
- stack 0: 0x1
251	 CA	SIGNEXTEND		 	 
- stack 2: 0x434
- stack 1: 0x6E0
- stack 0: 0x4
252	 CB	ADD		 	 
- stack 1: 0x434
- stack 0: 0x6E4
253	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x434
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFF
254	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x434
- stack 0: 0x6E4
255	 D2	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xFF00FF000FF00FF0F00FF00F0000000000000000000000000000000000000000
256	 D3	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xFF00FF000FF00FF0F00FF00F0000000000000000000000000000000000000000
- stack 0: 0xE0
257	 D5	SHR		 	 
- stack 1: 0x434
- stack 0: 0xFF00FF00
258	 D6	PUSH2	0060	 	 
- stack 2: 0x434
- stack 1: 0xFF00FF00
- stack 0: 0x60
259	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x434
260	 DA	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
261	 DC	ADD		 	 
- stack 0: 0x438
262	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
263	 DE	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x171F01000F6FF0001150003012F0258008600000095029800B400080184FF01
264	 DF	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x171F01000F6FF0001150003012F0258008600000095029800B400080184FF01
- stack 0: 0xF0
265	 E1	SHR		 	 
- stack 1: 0x438
- stack 0: 0x171
266	 E2	JUMP		 	 
- stack 0: 0x438
267	 171	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x438
268	 172	PUSH4	ff010000	 	 
- stack 1: 0x438
- stack 0: 0xFF010000
269	 177	PUSH2	03A0	 	 
- stack 2: 0x438
- stack 1: 0xFF010000
- stack 0: 0x3A0
270	 17A	MSTORE		 	  ;; # store to x29
- stack 0: 0x438
271	 17B	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
272	 17D	ADD		 	 
- stack 0: 0x43C
273	 17E	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
274	 17F	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xF6FF0001150003012F0258008600000095029800B400080184FF0100F6FFF0
275	 180	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xF6FF0001150003012F0258008600000095029800B400080184FF0100F6FFF0
- stack 0: 0xF0
276	 182	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xF6
277	 183	JUMP		 	 
- stack 0: 0x43C
278	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x43C
279	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
280	 F8	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xF6FF0001150003012F0258008600000095029800B400080184FF0100F6FFF0
281	 F9	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0xF6FF0001150003012F0258008600000095029800B400080184FF0100F6FFF0
- stack 0: 0xE0
282	 FB	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xF6FF00
283	 FC	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0xF6FF00
- stack 0: 0xFFFF
284	 FF	AND		 	 
- stack 1: 0x43C
- stack 0: 0xFF00
285	 100	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0xFF00
- stack 0: 0x1
286	 102	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
287	 103	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
288	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
289	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x43C
- stack 0: 0xFF00FF00
290	 108	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
291	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x43C
292	 10C	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
293	 10E	ADD		 	 
- stack 0: 0x440
294	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
295	 110	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x1150003012F0258008600000095029800B400080184FF0100F6FFF001150004
296	 111	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x1150003012F0258008600000095029800B400080184FF0100F6FFF001150004
- stack 0: 0xF0
297	 113	SHR		 	 
- stack 1: 0x440
- stack 0: 0x115
298	 114	JUMP		 	 
- stack 0: 0x440
299	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x440
300	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
301	 117	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x1150003012F0258008600000095029800B400080184FF0100F6FFF001150004
302	 118	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0x1150003012F0258008600000095029800B400080184FF0100F6FFF001150004
- stack 0: 0xE0
303	 11A	SHR		 	 
- stack 1: 0x440
- stack 0: 0x1150003
304	 11B	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0x1150003
- stack 0: 0xFFFF
305	 11E	AND		 	 
- stack 1: 0x440
- stack 0: 0x3
306	 11F	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x1
307	 121	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0x3
308	 122	PUSH2	0380	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x380
309	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x440
310	 126	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
311	 128	ADD		 	 
- stack 0: 0x444
312	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
313	 12A	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x12F0258008600000095029800B400080184FF0100F6FFF001150004012F023C
314	 12B	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x12F0258008600000095029800B400080184FF0100F6FFF001150004012F023C
- stack 0: 0xF0
315	 12D	SHR		 	 
- stack 1: 0x444
- stack 0: 0x12F
316	 12E	JUMP		 	 
- stack 0: 0x444
317	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x444
318	 130	PUSH2	0060	 	 
- stack 1: 0x444
- stack 0: 0x60
319	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x444
- stack 0: 0xFF00FF00
320	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x444
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
321	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x444
- stack 0: 0xFF00FF00
322	 13A	PUSH2	03A0	 	 
- stack 2: 0x444
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
323	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x444
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
324	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x444
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
325	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x444
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
326	 144	SUB		 	 
- stack 1: 0x444
- stack 0: 0x0
327	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x14D
328	 148	JUMPI		 	 
- stack 0: 0x444
329	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x444
- stack 0: 0x167
330	 14C	JUMP		 	 
- stack 0: 0x444
331	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x444
332	 168	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
333	 16A	ADD		 	 
- stack 0: 0x448
334	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
335	 16C	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x8600000095029800B400080184FF0100F6FFF001150004012F023C00860000
336	 16D	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0x8600000095029800B400080184FF0100F6FFF001150004012F023C00860000
- stack 0: 0xF0
337	 16F	SHR		 	 
- stack 1: 0x448
- stack 0: 0x86
338	 170	JUMP		 	 
- stack 0: 0x448
339	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x448
340	 87	DUP1		 	 
- stack 1: 0x448
- stack 0: 0x448
341	 88	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0x448
- stack 0: 0x20
342	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x448
343	 8C	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
344	 8E	ADD		 	 
- stack 0: 0x44C
345	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
346	 90	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x95029800B400080184FF0100F6FFF001150004012F023C008600000095027C
347	 91	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x95029800B400080184FF0100F6FFF001150004012F023C008600000095027C
- stack 0: 0xF0
348	 93	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x95
349	 94	JUMP		 	 
- stack 0: 0x44C
350	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x44C
351	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
352	 97	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x95029800B400080184FF0100F6FFF001150004012F023C008600000095027C
353	 98	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0x95029800B400080184FF0100F6FFF001150004012F023C008600000095027C
- stack 0: 0xE0
354	 9A	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x950298
355	 9B	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0x950298
- stack 0: 0xFFFF
356	 9E	AND		 	 
- stack 1: 0x44C
- stack 0: 0x298
357	 9F	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0x298
- stack 0: 0x1
358	 A1	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0x298
359	 A2	PUSH2	0020	 	 
- stack 2: 0x44C
- stack 1: 0x298
- stack 0: 0x20
360	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x44C
- stack 1: 0x298
- stack 0: 0x448
361	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x44C
- stack 0: 0x6E0
362	 A7	PUSH2	0020	 	 
- stack 2: 0x44C
- stack 1: 0x6E0
- stack 0: 0x20
363	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x44C
364	 AB	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
365	 AD	ADD		 	 
- stack 0: 0x450
366	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
367	 AF	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xB400080184FF0100F6FFF001150004012F023C008600000095027C00B4000C
368	 B0	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0xB400080184FF0100F6FFF001150004012F023C008600000095027C00B4000C
- stack 0: 0xF0
369	 B2	SHR		 	 
- stack 1: 0x450
- stack 0: 0xB4
370	 B3	JUMP		 	 
- stack 0: 0x450
371	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x450
372	 B5	PUSH2	0020	 	 
- stack 1: 0x450
- stack 0: 0x20
373	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x450
- stack 0: 0x6E0
374	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x450
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
375	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x450
- stack 0: 0x6E0
376	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x450
- stack 1: 0x6E0
- stack 0: 0x450
377	 C0	MLOAD		 	 
- stack 2: 0x450
- stack 1: 0x6E0
- stack 0: 0xB400080184FF0100F6FFF001150004012F023C008600000095027C00B4000C
378	 C1	PUSH1	E0	 	 
- stack 3: 0x450
- stack 2: 0x6E0
- stack 1: 0xB400080184FF0100F6FFF001150004012F023C008600000095027C00B4000C
- stack 0: 0xE0
379	 C3	SHR		 	 
- stack 2: 0x450
- stack 1: 0x6E0
- stack 0: 0xB40008
380	 C4	PUSH2	FFFF	 	 
- stack 3: 0x450
- stack 2: 0x6E0
- stack 1: 0xB40008
- stack 0: 0xFFFF
381	 C7	AND		 	 
- stack 2: 0x450
- stack 1: 0x6E0
- stack 0: 0x8
382	 C8	PUSH1	01	 	 
- stack 3: 0x450
- stack 2: 0x6E0
- stack 1: 0x8
- stack 0: 0x1
383	 CA	SIGNEXTEND		 	 
- stack 2: 0x450
- stack 1: 0x6E0
- stack 0: 0x8
384	 CB	ADD		 	 
- stack 1: 0x450
- stack 0: 0x6E8
385	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x450
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFF
386	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x450
- stack 0: 0x6E8
387	 D2	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xFF00FF0F00FF00F000000000000000000000000000000000000000000000000
388	 D3	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0xFF00FF0F00FF00F000000000000000000000000000000000000000000000000
- stack 0: 0xE0
389	 D5	SHR		 	 
- stack 1: 0x450
- stack 0: 0xFF00FF0
390	 D6	PUSH2	0060	 	 
- stack 2: 0x450
- stack 1: 0xFF00FF0
- stack 0: 0x60
391	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x450
392	 DA	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
393	 DC	ADD		 	 
- stack 0: 0x454
394	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
395	 DE	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x184FF0100F6FFF001150004012F023C008600000095027C00B4000C019700FF
396	 DF	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x184FF0100F6FFF001150004012F023C008600000095027C00B4000C019700FF
- stack 0: 0xF0
397	 E1	SHR		 	 
- stack 1: 0x454
- stack 0: 0x184
398	 E2	JUMP		 	 
- stack 0: 0x454
399	 184	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x454
400	 185	PUSH4	0ff01000	 	 
- stack 1: 0x454
- stack 0: 0xFF01000
401	 18A	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xFF01000
- stack 0: 0x3A0
402	 18D	MSTORE		 	  ;; # store to x29
- stack 0: 0x454
403	 18E	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
404	 190	ADD		 	 
- stack 0: 0x458
405	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
406	 192	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xF6FFF001150004012F023C008600000095027C00B4000C019700FF00F6000F
407	 193	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0xF6FFF001150004012F023C008600000095027C00B4000C019700FF00F6000F
- stack 0: 0xF0
408	 195	SHR		 	 
- stack 1: 0x458
- stack 0: 0xF6
409	 196	JUMP		 	 
- stack 0: 0x458
410	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x458
411	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
412	 F8	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xF6FFF001150004012F023C008600000095027C00B4000C019700FF00F6000F
413	 F9	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0xF6FFF001150004012F023C008600000095027C00B4000C019700FF00F6000F
- stack 0: 0xE0
414	 FB	SHR		 	 
- stack 1: 0x458
- stack 0: 0xF6FFF0
415	 FC	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0xF6FFF0
- stack 0: 0xFFFF
416	 FF	AND		 	 
- stack 1: 0x458
- stack 0: 0xFFF0
417	 100	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0xFFF0
- stack 0: 0x1
418	 102	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
419	 103	PUSH2	03A0	 	 
- stack 2: 0x458
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
420	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x458
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
421	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x458
- stack 0: 0xFF00FF0
422	 108	PUSH2	03A0	 	 
- stack 2: 0x458
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
423	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x458
424	 10C	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
425	 10E	ADD		 	 
- stack 0: 0x45C
426	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
427	 110	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x1150004012F023C008600000095027C00B4000C019700FF00F6000F01150005
428	 111	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x1150004012F023C008600000095027C00B4000C019700FF00F6000F01150005
- stack 0: 0xF0
429	 113	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x115
430	 114	JUMP		 	 
- stack 0: 0x45C
431	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x45C
432	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
433	 117	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x1150004012F023C008600000095027C00B4000C019700FF00F6000F01150005
434	 118	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0x1150004012F023C008600000095027C00B4000C019700FF00F6000F01150005
- stack 0: 0xE0
435	 11A	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x1150004
436	 11B	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0x1150004
- stack 0: 0xFFFF
437	 11E	AND		 	 
- stack 1: 0x45C
- stack 0: 0x4
438	 11F	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0x4
- stack 0: 0x1
439	 121	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0x4
440	 122	PUSH2	0380	 	 
- stack 2: 0x45C
- stack 1: 0x4
- stack 0: 0x380
441	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x45C
442	 126	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
443	 128	ADD		 	 
- stack 0: 0x460
444	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
445	 12A	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x12F023C008600000095027C00B4000C019700FF00F6000F01150005012F0220
446	 12B	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x12F023C008600000095027C00B4000C019700FF00F6000F01150005012F0220
- stack 0: 0xF0
447	 12D	SHR		 	 
- stack 1: 0x460
- stack 0: 0x12F
448	 12E	JUMP		 	 
- stack 0: 0x460
449	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x460
450	 130	PUSH2	0060	 	 
- stack 1: 0x460
- stack 0: 0x60
451	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x460
- stack 0: 0xFF00FF0
452	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x460
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
453	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x460
- stack 0: 0xFF00FF0
454	 13A	PUSH2	03A0	 	 
- stack 2: 0x460
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
455	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x460
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
456	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x460
- stack 2: 0xFF00FF0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
457	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x460
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
458	 144	SUB		 	 
- stack 1: 0x460
- stack 0: 0x0
459	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x460
- stack 1: 0x0
- stack 0: 0x14D
460	 148	JUMPI		 	 
- stack 0: 0x460
461	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x460
- stack 0: 0x167
462	 14C	JUMP		 	 
- stack 0: 0x460
463	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x460
464	 168	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
465	 16A	ADD		 	 
- stack 0: 0x464
466	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
467	 16C	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x8600000095027C00B4000C019700FF00F6000F01150005012F022000860000
468	 16D	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x8600000095027C00B4000C019700FF00F6000F01150005012F022000860000
- stack 0: 0xF0
469	 16F	SHR		 	 
- stack 1: 0x464
- stack 0: 0x86
470	 170	JUMP		 	 
- stack 0: 0x464
471	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x464
472	 87	DUP1		 	 
- stack 1: 0x464
- stack 0: 0x464
473	 88	PUSH2	0020	 	 
- stack 2: 0x464
- stack 1: 0x464
- stack 0: 0x20
474	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x464
475	 8C	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
476	 8E	ADD		 	 
- stack 0: 0x468
477	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
478	 90	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x95027C00B4000C019700FF00F6000F01150005012F0220008600000095026C
479	 91	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x95027C00B4000C019700FF00F6000F01150005012F0220008600000095026C
- stack 0: 0xF0
480	 93	SHR		 	 
- stack 1: 0x468
- stack 0: 0x95
481	 94	JUMP		 	 
- stack 0: 0x468
482	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x468
483	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
484	 97	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x95027C00B4000C019700FF00F6000F01150005012F0220008600000095026C
485	 98	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0x95027C00B4000C019700FF00F6000F01150005012F0220008600000095026C
- stack 0: 0xE0
486	 9A	SHR		 	 
- stack 1: 0x468
- stack 0: 0x95027C
487	 9B	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0x95027C
- stack 0: 0xFFFF
488	 9E	AND		 	 
- stack 1: 0x468
- stack 0: 0x27C
489	 9F	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0x27C
- stack 0: 0x1
490	 A1	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0x27C
491	 A2	PUSH2	0020	 	 
- stack 2: 0x468
- stack 1: 0x27C
- stack 0: 0x20
492	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x468
- stack 1: 0x27C
- stack 0: 0x464
493	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x468
- stack 0: 0x6E0
494	 A7	PUSH2	0020	 	 
- stack 2: 0x468
- stack 1: 0x6E0
- stack 0: 0x20
495	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x468
496	 AB	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
497	 AD	ADD		 	 
- stack 0: 0x46C
498	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
499	 AF	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xB4000C019700FF00F6000F01150005012F0220008600000095026C00B4FFF4
500	 B0	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0xB4000C019700FF00F6000F01150005012F0220008600000095026C00B4FFF4
- stack 0: 0xF0
501	 B2	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xB4
502	 B3	JUMP		 	 
- stack 0: 0x46C
503	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x46C
504	 B5	PUSH2	0020	 	 
- stack 1: 0x46C
- stack 0: 0x20
505	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x46C
- stack 0: 0x6E0
506	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x46C
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
507	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x46C
- stack 0: 0x6E0
508	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x46C
- stack 1: 0x6E0
- stack 0: 0x46C
509	 C0	MLOAD		 	 
- stack 2: 0x46C
- stack 1: 0x6E0
- stack 0: 0xB4000C019700FF00F6000F01150005012F0220008600000095026C00B4FFF4
510	 C1	PUSH1	E0	 	 
- stack 3: 0x46C
- stack 2: 0x6E0
- stack 1: 0xB4000C019700FF00F6000F01150005012F0220008600000095026C00B4FFF4
- stack 0: 0xE0
511	 C3	SHR		 	 
- stack 2: 0x46C
- stack 1: 0x6E0
- stack 0: 0xB4000C
512	 C4	PUSH2	FFFF	 	 
- stack 3: 0x46C
- stack 2: 0x6E0
- stack 1: 0xB4000C
- stack 0: 0xFFFF
513	 C7	AND		 	 
- stack 2: 0x46C
- stack 1: 0x6E0
- stack 0: 0xC
514	 C8	PUSH1	01	 	 
- stack 3: 0x46C
- stack 2: 0x6E0
- stack 1: 0xC
- stack 0: 0x1
515	 CA	SIGNEXTEND		 	 
- stack 2: 0x46C
- stack 1: 0x6E0
- stack 0: 0xC
516	 CB	ADD		 	 
- stack 1: 0x46C
- stack 0: 0x6EC
517	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x46C
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFF
518	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x46C
- stack 0: 0x6EC
519	 D2	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xF00FF00F00000000000000000000000000000000000000000000000000000000
520	 D3	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0xF00FF00F00000000000000000000000000000000000000000000000000000000
- stack 0: 0xE0
521	 D5	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xF00FF00F
522	 D6	PUSH2	0060	 	 
- stack 2: 0x46C
- stack 1: 0xF00FF00F
- stack 0: 0x60
523	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x46C
524	 DA	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
525	 DC	ADD		 	 
- stack 0: 0x470
526	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
527	 DE	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x19700FF00F6000F01150005012F0220008600000095026C00B4FFF400E30FF0
528	 DF	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x19700FF00F6000F01150005012F0220008600000095026C00B4FFF400E30FF0
- stack 0: 0xF0
529	 E1	SHR		 	 
- stack 1: 0x470
- stack 0: 0x197
530	 E2	JUMP		 	 
- stack 0: 0x470
531	 197	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x470
532	 198	PUSH4	f00ff000	 	 
- stack 1: 0x470
- stack 0: 0xF00FF000
533	 19D	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0xF00FF000
- stack 0: 0x3A0
534	 1A0	MSTORE		 	  ;; # store to x29
- stack 0: 0x470
535	 1A1	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
536	 1A3	ADD		 	 
- stack 0: 0x474
537	 1A4	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
538	 1A5	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xF6000F01150005012F0220008600000095026C00B4FFF400E30FF000F600FF
539	 1A6	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0xF6000F01150005012F0220008600000095026C00B4FFF400E30FF000F600FF
- stack 0: 0xF0
540	 1A8	SHR		 	 
- stack 1: 0x474
- stack 0: 0xF6
541	 1A9	JUMP		 	 
- stack 0: 0x474
542	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x474
543	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
544	 F8	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xF6000F01150005012F0220008600000095026C00B4FFF400E30FF000F600FF
545	 F9	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0xF6000F01150005012F0220008600000095026C00B4FFF400E30FF000F600FF
- stack 0: 0xE0
546	 FB	SHR		 	 
- stack 1: 0x474
- stack 0: 0xF6000F
547	 FC	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0xF6000F
- stack 0: 0xFFFF
548	 FF	AND		 	 
- stack 1: 0x474
- stack 0: 0xF
549	 100	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0xF
- stack 0: 0x1
550	 102	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0xF
551	 103	PUSH2	03A0	 	 
- stack 2: 0x474
- stack 1: 0xF
- stack 0: 0x3A0
552	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x474
- stack 1: 0xF
- stack 0: 0xF00FF000
553	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x474
- stack 0: 0xF00FF00F
554	 108	PUSH2	03A0	 	 
- stack 2: 0x474
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
555	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x474
556	 10C	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
557	 10E	ADD		 	 
- stack 0: 0x478
558	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
559	 110	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x1150005012F0220008600000095026C00B4FFF400E30FF000F600FF01150006
560	 111	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x1150005012F0220008600000095026C00B4FFF400E30FF000F600FF01150006
- stack 0: 0xF0
561	 113	SHR		 	 
- stack 1: 0x478
- stack 0: 0x115
562	 114	JUMP		 	 
- stack 0: 0x478
563	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x478
564	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
565	 117	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x1150005012F0220008600000095026C00B4FFF400E30FF000F600FF01150006
566	 118	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0x1150005012F0220008600000095026C00B4FFF400E30FF000F600FF01150006
- stack 0: 0xE0
567	 11A	SHR		 	 
- stack 1: 0x478
- stack 0: 0x1150005
568	 11B	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0x1150005
- stack 0: 0xFFFF
569	 11E	AND		 	 
- stack 1: 0x478
- stack 0: 0x5
570	 11F	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0x5
- stack 0: 0x1
571	 121	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0x5
572	 122	PUSH2	0380	 	 
- stack 2: 0x478
- stack 1: 0x5
- stack 0: 0x380
573	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x478
574	 126	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
575	 128	ADD		 	 
- stack 0: 0x47C
576	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
577	 12A	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x12F0220008600000095026C00B4FFF400E30FF000F600FF01150006012F0204
578	 12B	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x12F0220008600000095026C00B4FFF400E30FF000F600FF01150006012F0204
- stack 0: 0xF0
579	 12D	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x12F
580	 12E	JUMP		 	 
- stack 0: 0x47C
581	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x47C
582	 130	PUSH2	0060	 	 
- stack 1: 0x47C
- stack 0: 0x60
583	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x47C
- stack 0: 0xF00FF00F
584	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x47C
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
585	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x47C
- stack 0: 0xF00FF00F
586	 13A	PUSH2	03A0	 	 
- stack 2: 0x47C
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
587	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x47C
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
588	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x47C
- stack 2: 0xF00FF00F
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
589	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x47C
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
590	 144	SUB		 	 
- stack 1: 0x47C
- stack 0: 0x0
591	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x14D
592	 148	JUMPI		 	 
- stack 0: 0x47C
593	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x47C
- stack 0: 0x167
594	 14C	JUMP		 	 
- stack 0: 0x47C
595	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x47C
596	 168	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
597	 16A	ADD		 	 
- stack 0: 0x480
598	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
599	 16C	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x8600000095026C00B4FFF400E30FF000F600FF01150006012F020400860000
600	 16D	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x8600000095026C00B4FFF400E30FF000F600FF01150006012F020400860000
- stack 0: 0xF0
601	 16F	SHR		 	 
- stack 1: 0x480
- stack 0: 0x86
602	 170	JUMP		 	 
- stack 0: 0x480
603	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x480
604	 87	DUP1		 	 
- stack 1: 0x480
- stack 0: 0x480
605	 88	PUSH2	0020	 	 
- stack 2: 0x480
- stack 1: 0x480
- stack 0: 0x20
606	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x480
607	 8C	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
608	 8E	ADD		 	 
- stack 0: 0x484
609	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
610	 90	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x95026C00B4FFF400E30FF000F600FF01150006012F02040086000000950250
611	 91	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x95026C00B4FFF400E30FF000F600FF01150006012F02040086000000950250
- stack 0: 0xF0
612	 93	SHR		 	 
- stack 1: 0x484
- stack 0: 0x95
613	 94	JUMP		 	 
- stack 0: 0x484
614	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x484
615	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x484
- stack 0: 0x484
616	 97	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x95026C00B4FFF400E30FF000F600FF01150006012F02040086000000950250
617	 98	PUSH1	E0	 	 
- stack 2: 0x484
- stack 1: 0x95026C00B4FFF400E30FF000F600FF01150006012F02040086000000950250
- stack 0: 0xE0
618	 9A	SHR		 	 
- stack 1: 0x484
- stack 0: 0x95026C
619	 9B	PUSH2	FFFF	 	 
- stack 2: 0x484
- stack 1: 0x95026C
- stack 0: 0xFFFF
620	 9E	AND		 	 
- stack 1: 0x484
- stack 0: 0x26C
621	 9F	PUSH1	01	 	 
- stack 2: 0x484
- stack 1: 0x26C
- stack 0: 0x1
622	 A1	SIGNEXTEND		 	 
- stack 1: 0x484
- stack 0: 0x26C
623	 A2	PUSH2	0020	 	 
- stack 2: 0x484
- stack 1: 0x26C
- stack 0: 0x20
624	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x484
- stack 1: 0x26C
- stack 0: 0x480
625	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x484
- stack 0: 0x6EC
626	 A7	PUSH2	0020	 	 
- stack 2: 0x484
- stack 1: 0x6EC
- stack 0: 0x20
627	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x484
628	 AB	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
629	 AD	ADD		 	 
- stack 0: 0x488
630	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
631	 AF	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xB4FFF400E30FF000F600FF01150006012F0204008600000095025000B4FFF8
632	 B0	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0xB4FFF400E30FF000F600FF01150006012F0204008600000095025000B4FFF8
- stack 0: 0xF0
633	 B2	SHR		 	 
- stack 1: 0x488
- stack 0: 0xB4
634	 B3	JUMP		 	 
- stack 0: 0x488
635	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x488
636	 B5	PUSH2	0020	 	 
- stack 1: 0x488
- stack 0: 0x20
637	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x488
- stack 0: 0x6EC
638	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x488
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFF
639	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x488
- stack 0: 0x6EC
640	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x488
- stack 1: 0x6EC
- stack 0: 0x488
641	 C0	MLOAD		 	 
- stack 2: 0x488
- stack 1: 0x6EC
- stack 0: 0xB4FFF400E30FF000F600FF01150006012F0204008600000095025000B4FFF8
642	 C1	PUSH1	E0	 	 
- stack 3: 0x488
- stack 2: 0x6EC
- stack 1: 0xB4FFF400E30FF000F600FF01150006012F0204008600000095025000B4FFF8
- stack 0: 0xE0
643	 C3	SHR		 	 
- stack 2: 0x488
- stack 1: 0x6EC
- stack 0: 0xB4FFF4
644	 C4	PUSH2	FFFF	 	 
- stack 3: 0x488
- stack 2: 0x6EC
- stack 1: 0xB4FFF4
- stack 0: 0xFFFF
645	 C7	AND		 	 
- stack 2: 0x488
- stack 1: 0x6EC
- stack 0: 0xFFF4
646	 C8	PUSH1	01	 	 
- stack 3: 0x488
- stack 2: 0x6EC
- stack 1: 0xFFF4
- stack 0: 0x1
647	 CA	SIGNEXTEND		 	 
- stack 2: 0x488
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4
648	 CB	ADD		 	 
- stack 1: 0x488
- stack 0: 0x6E0
649	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x488
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
650	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x488
- stack 0: 0x6E0
651	 D2	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xFF00FFFF00FF000FF00FF0F00FF00F00000000000000000000000000000000
652	 D3	PUSH1	E0	 	 
- stack 2: 0x488
- stack 1: 0xFF00FFFF00FF000FF00FF0F00FF00F00000000000000000000000000000000
- stack 0: 0xE0
653	 D5	SHR		 	 
- stack 1: 0x488
- stack 0: 0xFF00FF
654	 D6	PUSH2	0060	 	 
- stack 2: 0x488
- stack 1: 0xFF00FF
- stack 0: 0x60
655	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x488
656	 DA	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
657	 DC	ADD		 	 
- stack 0: 0x48C
658	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
659	 DE	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0xE30FF000F600FF01150006012F0204008600000095025000B4FFF80171F010
660	 DF	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0xE30FF000F600FF01150006012F0204008600000095025000B4FFF80171F010
- stack 0: 0xF0
661	 E1	SHR		 	 
- stack 1: 0x48C
- stack 0: 0xE3
662	 E2	JUMP		 	 
- stack 0: 0x48C
663	 E3	JUMPDEST		 ;; __riscvimpl_LUI_ff0eb7	  ;; # instr: lui t4,0xff0(ignore imm)
- stack 0: 0x48C
664	 E4	PUSH4	00ff0000	 	 
- stack 1: 0x48C
- stack 0: 0xFF0000
665	 E9	PUSH2	03A0	 	 
- stack 2: 0x48C
- stack 1: 0xFF0000
- stack 0: 0x3A0
666	 EC	MSTORE		 	  ;; # store to x29
- stack 0: 0x48C
667	 ED	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
668	 EF	ADD		 	 
- stack 0: 0x490
669	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
670	 F1	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xF600FF01150006012F0204008600000095025000B4FFF80171F01000F6FF00
671	 F2	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xF600FF01150006012F0204008600000095025000B4FFF80171F01000F6FF00
- stack 0: 0xF0
672	 F4	SHR		 	 
- stack 1: 0x490
- stack 0: 0xF6
673	 F5	JUMP		 	 
- stack 0: 0x490
674	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x490
675	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
676	 F8	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xF600FF01150006012F0204008600000095025000B4FFF80171F01000F6FF00
677	 F9	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0xF600FF01150006012F0204008600000095025000B4FFF80171F01000F6FF00
- stack 0: 0xE0
678	 FB	SHR		 	 
- stack 1: 0x490
- stack 0: 0xF600FF
679	 FC	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0xF600FF
- stack 0: 0xFFFF
680	 FF	AND		 	 
- stack 1: 0x490
- stack 0: 0xFF
681	 100	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0xFF
- stack 0: 0x1
682	 102	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0xFF
683	 103	PUSH2	03A0	 	 
- stack 2: 0x490
- stack 1: 0xFF
- stack 0: 0x3A0
684	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x490
- stack 1: 0xFF
- stack 0: 0xFF0000
685	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x490
- stack 0: 0xFF00FF
686	 108	PUSH2	03A0	 	 
- stack 2: 0x490
- stack 1: 0xFF00FF
- stack 0: 0x3A0
687	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x490
688	 10C	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
689	 10E	ADD		 	 
- stack 0: 0x494
690	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
691	 110	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x1150006012F0204008600000095025000B4FFF80171F01000F6FF0001150007
692	 111	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x1150006012F0204008600000095025000B4FFF80171F01000F6FF0001150007
- stack 0: 0xF0
693	 113	SHR		 	 
- stack 1: 0x494
- stack 0: 0x115
694	 114	JUMP		 	 
- stack 0: 0x494
695	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x494
696	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
697	 117	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x1150006012F0204008600000095025000B4FFF80171F01000F6FF0001150007
698	 118	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0x1150006012F0204008600000095025000B4FFF80171F01000F6FF0001150007
- stack 0: 0xE0
699	 11A	SHR		 	 
- stack 1: 0x494
- stack 0: 0x1150006
700	 11B	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0x1150006
- stack 0: 0xFFFF
701	 11E	AND		 	 
- stack 1: 0x494
- stack 0: 0x6
702	 11F	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x6
- stack 0: 0x1
703	 121	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x6
704	 122	PUSH2	0380	 	 
- stack 2: 0x494
- stack 1: 0x6
- stack 0: 0x380
705	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x494
706	 126	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
707	 128	ADD		 	 
- stack 0: 0x498
708	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
709	 12A	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x12F0204008600000095025000B4FFF80171F01000F6FF0001150007012F01E8
710	 12B	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x12F0204008600000095025000B4FFF80171F01000F6FF0001150007012F01E8
- stack 0: 0xF0
711	 12D	SHR		 	 
- stack 1: 0x498
- stack 0: 0x12F
712	 12E	JUMP		 	 
- stack 0: 0x498
713	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x498
714	 130	PUSH2	0060	 	 
- stack 1: 0x498
- stack 0: 0x60
715	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x498
- stack 0: 0xFF00FF
716	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x498
- stack 1: 0xFF00FF
- stack 0: 0xFFFFFFFF
717	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x498
- stack 0: 0xFF00FF
718	 13A	PUSH2	03A0	 	 
- stack 2: 0x498
- stack 1: 0xFF00FF
- stack 0: 0x3A0
719	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x498
- stack 1: 0xFF00FF
- stack 0: 0xFF00FF
720	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x498
- stack 2: 0xFF00FF
- stack 1: 0xFF00FF
- stack 0: 0xFFFFFFFF
721	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x498
- stack 1: 0xFF00FF
- stack 0: 0xFF00FF
722	 144	SUB		 	 
- stack 1: 0x498
- stack 0: 0x0
723	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0x14D
724	 148	JUMPI		 	 
- stack 0: 0x498
725	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x498
- stack 0: 0x167
726	 14C	JUMP		 	 
- stack 0: 0x498
727	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x498
728	 168	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
729	 16A	ADD		 	 
- stack 0: 0x49C
730	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
731	 16C	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x8600000095025000B4FFF80171F01000F6FF0001150007012F01E800860000
732	 16D	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x8600000095025000B4FFF80171F01000F6FF0001150007012F01E800860000
- stack 0: 0xF0
733	 16F	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x86
734	 170	JUMP		 	 
- stack 0: 0x49C
735	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x49C
736	 87	DUP1		 	 
- stack 1: 0x49C
- stack 0: 0x49C
737	 88	PUSH2	0020	 	 
- stack 2: 0x49C
- stack 1: 0x49C
- stack 0: 0x20
738	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x49C
739	 8C	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
740	 8E	ADD		 	 
- stack 0: 0x4A0
741	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
742	 90	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x95025000B4FFF80171F01000F6FF0001150007012F01E80086000000950234
743	 91	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x95025000B4FFF80171F01000F6FF0001150007012F01E80086000000950234
- stack 0: 0xF0
744	 93	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x95
745	 94	JUMP		 	 
- stack 0: 0x4A0
746	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x4A0
747	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
748	 97	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x95025000B4FFF80171F01000F6FF0001150007012F01E80086000000950234
749	 98	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0x95025000B4FFF80171F01000F6FF0001150007012F01E80086000000950234
- stack 0: 0xE0
750	 9A	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x950250
751	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x950250
- stack 0: 0xFFFF
752	 9E	AND		 	 
- stack 1: 0x4A0
- stack 0: 0x250
753	 9F	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0x250
- stack 0: 0x1
754	 A1	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0x250
755	 A2	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0x250
- stack 0: 0x20
756	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A0
- stack 1: 0x250
- stack 0: 0x49C
757	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4A0
- stack 0: 0x6EC
758	 A7	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0x6EC
- stack 0: 0x20
759	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A0
760	 AB	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
761	 AD	ADD		 	 
- stack 0: 0x4A4
762	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
763	 AF	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xB4FFF80171F01000F6FF0001150007012F01E8008600000095023400B4FFFC
764	 B0	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0xB4FFF80171F01000F6FF0001150007012F01E8008600000095023400B4FFFC
- stack 0: 0xF0
765	 B2	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xB4
766	 B3	JUMP		 	 
- stack 0: 0x4A4
767	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x4A4
768	 B5	PUSH2	0020	 	 
- stack 1: 0x4A4
- stack 0: 0x20
769	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4A4
- stack 0: 0x6EC
770	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFF
771	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A4
- stack 0: 0x6EC
772	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4A4
- stack 1: 0x6EC
- stack 0: 0x4A4
773	 C0	MLOAD		 	 
- stack 2: 0x4A4
- stack 1: 0x6EC
- stack 0: 0xB4FFF80171F01000F6FF0001150007012F01E8008600000095023400B4FFFC
774	 C1	PUSH1	E0	 	 
- stack 3: 0x4A4
- stack 2: 0x6EC
- stack 1: 0xB4FFF80171F01000F6FF0001150007012F01E8008600000095023400B4FFFC
- stack 0: 0xE0
775	 C3	SHR		 	 
- stack 2: 0x4A4
- stack 1: 0x6EC
- stack 0: 0xB4FFF8
776	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4A4
- stack 2: 0x6EC
- stack 1: 0xB4FFF8
- stack 0: 0xFFFF
777	 C7	AND		 	 
- stack 2: 0x4A4
- stack 1: 0x6EC
- stack 0: 0xFFF8
778	 C8	PUSH1	01	 	 
- stack 3: 0x4A4
- stack 2: 0x6EC
- stack 1: 0xFFF8
- stack 0: 0x1
779	 CA	SIGNEXTEND		 	 
- stack 2: 0x4A4
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8
780	 CB	ADD		 	 
- stack 1: 0x4A4
- stack 0: 0x6E4
781	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFF
782	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A4
- stack 0: 0x6E4
783	 D2	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xFF00FF000FF00FF0F00FF00F0000000000000000000000000000000000000000
784	 D3	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0xFF00FF000FF00FF0F00FF00F0000000000000000000000000000000000000000
- stack 0: 0xE0
785	 D5	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xFF00FF00
786	 D6	PUSH2	0060	 	 
- stack 2: 0x4A4
- stack 1: 0xFF00FF00
- stack 0: 0x60
787	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x4A4
788	 DA	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
789	 DC	ADD		 	 
- stack 0: 0x4A8
790	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
791	 DE	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x171F01000F6FF0001150007012F01E8008600000095023400B4FFFC0184FF01
792	 DF	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x171F01000F6FF0001150007012F01E8008600000095023400B4FFFC0184FF01
- stack 0: 0xF0
793	 E1	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x171
794	 E2	JUMP		 	 
- stack 0: 0x4A8
795	 171	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x4A8
796	 172	PUSH4	ff010000	 	 
- stack 1: 0x4A8
- stack 0: 0xFF010000
797	 177	PUSH2	03A0	 	 
- stack 2: 0x4A8
- stack 1: 0xFF010000
- stack 0: 0x3A0
798	 17A	MSTORE		 	  ;; # store to x29
- stack 0: 0x4A8
799	 17B	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
800	 17D	ADD		 	 
- stack 0: 0x4AC
801	 17E	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
802	 17F	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xF6FF0001150007012F01E8008600000095023400B4FFFC0184FF0100F6FFF0
803	 180	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xF6FF0001150007012F01E8008600000095023400B4FFFC0184FF0100F6FFF0
- stack 0: 0xF0
804	 182	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xF6
805	 183	JUMP		 	 
- stack 0: 0x4AC
806	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x4AC
807	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
808	 F8	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xF6FF0001150007012F01E8008600000095023400B4FFFC0184FF0100F6FFF0
809	 F9	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0xF6FF0001150007012F01E8008600000095023400B4FFFC0184FF0100F6FFF0
- stack 0: 0xE0
810	 FB	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xF6FF00
811	 FC	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0xF6FF00
- stack 0: 0xFFFF
812	 FF	AND		 	 
- stack 1: 0x4AC
- stack 0: 0xFF00
813	 100	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0xFF00
- stack 0: 0x1
814	 102	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
815	 103	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
816	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
817	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x4AC
- stack 0: 0xFF00FF00
818	 108	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
819	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x4AC
820	 10C	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
821	 10E	ADD		 	 
- stack 0: 0x4B0
822	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
823	 110	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x1150007012F01E8008600000095023400B4FFFC0184FF0100F6FFF001150008
824	 111	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x1150007012F01E8008600000095023400B4FFFC0184FF0100F6FFF001150008
- stack 0: 0xF0
825	 113	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x115
826	 114	JUMP		 	 
- stack 0: 0x4B0
827	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4B0
828	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
829	 117	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x1150007012F01E8008600000095023400B4FFFC0184FF0100F6FFF001150008
830	 118	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x1150007012F01E8008600000095023400B4FFFC0184FF0100F6FFF001150008
- stack 0: 0xE0
831	 11A	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x1150007
832	 11B	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x1150007
- stack 0: 0xFFFF
833	 11E	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x7
834	 11F	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x7
- stack 0: 0x1
835	 121	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x7
836	 122	PUSH2	0380	 	 
- stack 2: 0x4B0
- stack 1: 0x7
- stack 0: 0x380
837	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x4B0
838	 126	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
839	 128	ADD		 	 
- stack 0: 0x4B4
840	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
841	 12A	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x12F01E8008600000095023400B4FFFC0184FF0100F6FFF001150008012F01CC
842	 12B	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x12F01E8008600000095023400B4FFFC0184FF0100F6FFF001150008012F01CC
- stack 0: 0xF0
843	 12D	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x12F
844	 12E	JUMP		 	 
- stack 0: 0x4B4
845	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x4B4
846	 130	PUSH2	0060	 	 
- stack 1: 0x4B4
- stack 0: 0x60
847	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x4B4
- stack 0: 0xFF00FF00
848	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B4
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
849	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B4
- stack 0: 0xFF00FF00
850	 13A	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
851	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x4B4
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
852	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B4
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
853	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B4
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
854	 144	SUB		 	 
- stack 1: 0x4B4
- stack 0: 0x0
855	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x4B4
- stack 1: 0x0
- stack 0: 0x14D
856	 148	JUMPI		 	 
- stack 0: 0x4B4
857	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x4B4
- stack 0: 0x167
858	 14C	JUMP		 	 
- stack 0: 0x4B4
859	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x4B4
860	 168	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
861	 16A	ADD		 	 
- stack 0: 0x4B8
862	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
863	 16C	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x8600000095023400B4FFFC0184FF0100F6FFF001150008012F01CC00860000
864	 16D	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x8600000095023400B4FFFC0184FF0100F6FFF001150008012F01CC00860000
- stack 0: 0xF0
865	 16F	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x86
866	 170	JUMP		 	 
- stack 0: 0x4B8
867	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4B8
868	 87	DUP1		 	 
- stack 1: 0x4B8
- stack 0: 0x4B8
869	 88	PUSH2	0020	 	 
- stack 2: 0x4B8
- stack 1: 0x4B8
- stack 0: 0x20
870	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B8
871	 8C	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
872	 8E	ADD		 	 
- stack 0: 0x4BC
873	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
874	 90	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x95023400B4FFFC0184FF0100F6FFF001150008012F01CC0086000000950218
875	 91	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x95023400B4FFFC0184FF0100F6FFF001150008012F01CC0086000000950218
- stack 0: 0xF0
876	 93	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x95
877	 94	JUMP		 	 
- stack 0: 0x4BC
878	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x4BC
879	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
880	 97	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x95023400B4FFFC0184FF0100F6FFF001150008012F01CC0086000000950218
881	 98	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0x95023400B4FFFC0184FF0100F6FFF001150008012F01CC0086000000950218
- stack 0: 0xE0
882	 9A	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x950234
883	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x950234
- stack 0: 0xFFFF
884	 9E	AND		 	 
- stack 1: 0x4BC
- stack 0: 0x234
885	 9F	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0x234
- stack 0: 0x1
886	 A1	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0x234
887	 A2	PUSH2	0020	 	 
- stack 2: 0x4BC
- stack 1: 0x234
- stack 0: 0x20
888	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4BC
- stack 1: 0x234
- stack 0: 0x4B8
889	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4BC
- stack 0: 0x6EC
890	 A7	PUSH2	0020	 	 
- stack 2: 0x4BC
- stack 1: 0x6EC
- stack 0: 0x20
891	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4BC
892	 AB	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
893	 AD	ADD		 	 
- stack 0: 0x4C0
894	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
895	 AF	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xB4FFFC0184FF0100F6FFF001150008012F01CC008600000095021800B40000
896	 B0	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0xB4FFFC0184FF0100F6FFF001150008012F01CC008600000095021800B40000
- stack 0: 0xF0
897	 B2	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xB4
898	 B3	JUMP		 	 
- stack 0: 0x4C0
899	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x4C0
900	 B5	PUSH2	0020	 	 
- stack 1: 0x4C0
- stack 0: 0x20
901	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4C0
- stack 0: 0x6EC
902	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFF
903	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C0
- stack 0: 0x6EC
904	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4C0
- stack 1: 0x6EC
- stack 0: 0x4C0
905	 C0	MLOAD		 	 
- stack 2: 0x4C0
- stack 1: 0x6EC
- stack 0: 0xB4FFFC0184FF0100F6FFF001150008012F01CC008600000095021800B40000
906	 C1	PUSH1	E0	 	 
- stack 3: 0x4C0
- stack 2: 0x6EC
- stack 1: 0xB4FFFC0184FF0100F6FFF001150008012F01CC008600000095021800B40000
- stack 0: 0xE0
907	 C3	SHR		 	 
- stack 2: 0x4C0
- stack 1: 0x6EC
- stack 0: 0xB4FFFC
908	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4C0
- stack 2: 0x6EC
- stack 1: 0xB4FFFC
- stack 0: 0xFFFF
909	 C7	AND		 	 
- stack 2: 0x4C0
- stack 1: 0x6EC
- stack 0: 0xFFFC
910	 C8	PUSH1	01	 	 
- stack 3: 0x4C0
- stack 2: 0x6EC
- stack 1: 0xFFFC
- stack 0: 0x1
911	 CA	SIGNEXTEND		 	 
- stack 2: 0x4C0
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
912	 CB	ADD		 	 
- stack 1: 0x4C0
- stack 0: 0x6E8
913	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFF
914	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C0
- stack 0: 0x6E8
915	 D2	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xFF00FF0F00FF00F000000000000000000000000000000000000000000000000
916	 D3	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0xFF00FF0F00FF00F000000000000000000000000000000000000000000000000
- stack 0: 0xE0
917	 D5	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xFF00FF0
918	 D6	PUSH2	0060	 	 
- stack 2: 0x4C0
- stack 1: 0xFF00FF0
- stack 0: 0x60
919	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x4C0
920	 DA	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
921	 DC	ADD		 	 
- stack 0: 0x4C4
922	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
923	 DE	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x184FF0100F6FFF001150008012F01CC008600000095021800B40000019700FF
924	 DF	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x184FF0100F6FFF001150008012F01CC008600000095021800B40000019700FF
- stack 0: 0xF0
925	 E1	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x184
926	 E2	JUMP		 	 
- stack 0: 0x4C4
927	 184	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x4C4
928	 185	PUSH4	0ff01000	 	 
- stack 1: 0x4C4
- stack 0: 0xFF01000
929	 18A	PUSH2	03A0	 	 
- stack 2: 0x4C4
- stack 1: 0xFF01000
- stack 0: 0x3A0
930	 18D	MSTORE		 	  ;; # store to x29
- stack 0: 0x4C4
931	 18E	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
932	 190	ADD		 	 
- stack 0: 0x4C8
933	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
934	 192	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xF6FFF001150008012F01CC008600000095021800B40000019700FF00F6000F
935	 193	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0xF6FFF001150008012F01CC008600000095021800B40000019700FF00F6000F
- stack 0: 0xF0
936	 195	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xF6
937	 196	JUMP		 	 
- stack 0: 0x4C8
938	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x4C8
939	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
940	 F8	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xF6FFF001150008012F01CC008600000095021800B40000019700FF00F6000F
941	 F9	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0xF6FFF001150008012F01CC008600000095021800B40000019700FF00F6000F
- stack 0: 0xE0
942	 FB	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xF6FFF0
943	 FC	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0xF6FFF0
- stack 0: 0xFFFF
944	 FF	AND		 	 
- stack 1: 0x4C8
- stack 0: 0xFFF0
945	 100	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0xFFF0
- stack 0: 0x1
946	 102	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
947	 103	PUSH2	03A0	 	 
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
948	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
949	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x4C8
- stack 0: 0xFF00FF0
950	 108	PUSH2	03A0	 	 
- stack 2: 0x4C8
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
951	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x4C8
952	 10C	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
953	 10E	ADD		 	 
- stack 0: 0x4CC
954	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
955	 110	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x1150008012F01CC008600000095021800B40000019700FF00F6000F01150009
956	 111	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x1150008012F01CC008600000095021800B40000019700FF00F6000F01150009
- stack 0: 0xF0
957	 113	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x115
958	 114	JUMP		 	 
- stack 0: 0x4CC
959	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4CC
960	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
961	 117	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x1150008012F01CC008600000095021800B40000019700FF00F6000F01150009
962	 118	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0x1150008012F01CC008600000095021800B40000019700FF00F6000F01150009
- stack 0: 0xE0
963	 11A	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x1150008
964	 11B	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0x1150008
- stack 0: 0xFFFF
965	 11E	AND		 	 
- stack 1: 0x4CC
- stack 0: 0x8
966	 11F	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0x8
- stack 0: 0x1
967	 121	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0x8
968	 122	PUSH2	0380	 	 
- stack 2: 0x4CC
- stack 1: 0x8
- stack 0: 0x380
969	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x4CC
970	 126	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
971	 128	ADD		 	 
- stack 0: 0x4D0
972	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
973	 12A	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x12F01CC008600000095021800B40000019700FF00F6000F01150009012F01B0
974	 12B	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x12F01CC008600000095021800B40000019700FF00F6000F01150009012F01B0
- stack 0: 0xF0
975	 12D	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x12F
976	 12E	JUMP		 	 
- stack 0: 0x4D0
977	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x4D0
978	 130	PUSH2	0060	 	 
- stack 1: 0x4D0
- stack 0: 0x60
979	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x4D0
- stack 0: 0xFF00FF0
980	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
981	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D0
- stack 0: 0xFF00FF0
982	 13A	PUSH2	03A0	 	 
- stack 2: 0x4D0
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
983	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x4D0
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
984	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D0
- stack 2: 0xFF00FF0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
985	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D0
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
986	 144	SUB		 	 
- stack 1: 0x4D0
- stack 0: 0x0
987	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x4D0
- stack 1: 0x0
- stack 0: 0x14D
988	 148	JUMPI		 	 
- stack 0: 0x4D0
989	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x4D0
- stack 0: 0x167
990	 14C	JUMP		 	 
- stack 0: 0x4D0
991	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x4D0
992	 168	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
993	 16A	ADD		 	 
- stack 0: 0x4D4
994	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
995	 16C	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x8600000095021800B40000019700FF00F6000F01150009012F01B000860000
996	 16D	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x8600000095021800B40000019700FF00F6000F01150009012F01B000860000
- stack 0: 0xF0
997	 16F	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x86
998	 170	JUMP		 	 
- stack 0: 0x4D4
999	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4D4
1000	 87	DUP1		 	 
- stack 1: 0x4D4
- stack 0: 0x4D4
1001	 88	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0x4D4
- stack 0: 0x20
1002	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D4
1003	 8C	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1004	 8E	ADD		 	 
- stack 0: 0x4D8
1005	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1006	 90	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x95021800B40000019700FF00F6000F01150009012F01B000860000009501F0
1007	 91	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x95021800B40000019700FF00F6000F01150009012F01B000860000009501F0
- stack 0: 0xF0
1008	 93	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x95
1009	 94	JUMP		 	 
- stack 0: 0x4D8
1010	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x4D8
1011	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
1012	 97	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x95021800B40000019700FF00F6000F01150009012F01B000860000009501F0
1013	 98	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0x95021800B40000019700FF00F6000F01150009012F01B000860000009501F0
- stack 0: 0xE0
1014	 9A	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x950218
1015	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x950218
- stack 0: 0xFFFF
1016	 9E	AND		 	 
- stack 1: 0x4D8
- stack 0: 0x218
1017	 9F	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0x218
- stack 0: 0x1
1018	 A1	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0x218
1019	 A2	PUSH2	0020	 	 
- stack 2: 0x4D8
- stack 1: 0x218
- stack 0: 0x20
1020	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D8
- stack 1: 0x218
- stack 0: 0x4D4
1021	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4D8
- stack 0: 0x6EC
1022	 A7	PUSH2	0020	 	 
- stack 2: 0x4D8
- stack 1: 0x6EC
- stack 0: 0x20
1023	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D8
1024	 AB	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1025	 AD	ADD		 	 
- stack 0: 0x4DC
1026	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1027	 AF	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xB40000019700FF00F6000F01150009012F01B000860000009501F00095FFE0
1028	 B0	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0xB40000019700FF00F6000F01150009012F01B000860000009501F00095FFE0
- stack 0: 0xF0
1029	 B2	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xB4
1030	 B3	JUMP		 	 
- stack 0: 0x4DC
1031	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x4DC
1032	 B5	PUSH2	0020	 	 
- stack 1: 0x4DC
- stack 0: 0x20
1033	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4DC
- stack 0: 0x6EC
1034	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFF
1035	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4DC
- stack 0: 0x6EC
1036	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4DC
- stack 1: 0x6EC
- stack 0: 0x4DC
1037	 C0	MLOAD		 	 
- stack 2: 0x4DC
- stack 1: 0x6EC
- stack 0: 0xB40000019700FF00F6000F01150009012F01B000860000009501F00095FFE0
1038	 C1	PUSH1	E0	 	 
- stack 3: 0x4DC
- stack 2: 0x6EC
- stack 1: 0xB40000019700FF00F6000F01150009012F01B000860000009501F00095FFE0
- stack 0: 0xE0
1039	 C3	SHR		 	 
- stack 2: 0x4DC
- stack 1: 0x6EC
- stack 0: 0xB40000
1040	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4DC
- stack 2: 0x6EC
- stack 1: 0xB40000
- stack 0: 0xFFFF
1041	 C7	AND		 	 
- stack 2: 0x4DC
- stack 1: 0x6EC
- stack 0: 0x0
1042	 C8	PUSH1	01	 	 
- stack 3: 0x4DC
- stack 2: 0x6EC
- stack 1: 0x0
- stack 0: 0x1
1043	 CA	SIGNEXTEND		 	 
- stack 2: 0x4DC
- stack 1: 0x6EC
- stack 0: 0x0
1044	 CB	ADD		 	 
- stack 1: 0x4DC
- stack 0: 0x6EC
1045	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFF
1046	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4DC
- stack 0: 0x6EC
1047	 D2	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xF00FF00F00000000000000000000000000000000000000000000000000000000
1048	 D3	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0xF00FF00F00000000000000000000000000000000000000000000000000000000
- stack 0: 0xE0
1049	 D5	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xF00FF00F
1050	 D6	PUSH2	0060	 	 
- stack 2: 0x4DC
- stack 1: 0xF00FF00F
- stack 0: 0x60
1051	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x4DC
1052	 DA	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1053	 DC	ADD		 	 
- stack 0: 0x4E0
1054	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1055	 DE	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x19700FF00F6000F01150009012F01B000860000009501F00095FFE000B40020
1056	 DF	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x19700FF00F6000F01150009012F01B000860000009501F00095FFE000B40020
- stack 0: 0xF0
1057	 E1	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x197
1058	 E2	JUMP		 	 
- stack 0: 0x4E0
1059	 197	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x4E0
1060	 198	PUSH4	f00ff000	 	 
- stack 1: 0x4E0
- stack 0: 0xF00FF000
1061	 19D	PUSH2	03A0	 	 
- stack 2: 0x4E0
- stack 1: 0xF00FF000
- stack 0: 0x3A0
1062	 1A0	MSTORE		 	  ;; # store to x29
- stack 0: 0x4E0
1063	 1A1	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1064	 1A3	ADD		 	 
- stack 0: 0x4E4
1065	 1A4	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1066	 1A5	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0xF6000F01150009012F01B000860000009501F00095FFE000B4002000E30FF0
1067	 1A6	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0xF6000F01150009012F01B000860000009501F00095FFE000B4002000E30FF0
- stack 0: 0xF0
1068	 1A8	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0xF6
1069	 1A9	JUMP		 	 
- stack 0: 0x4E4
1070	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x4E4
1071	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1072	 F8	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0xF6000F01150009012F01B000860000009501F00095FFE000B4002000E30FF0
1073	 F9	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0xF6000F01150009012F01B000860000009501F00095FFE000B4002000E30FF0
- stack 0: 0xE0
1074	 FB	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0xF6000F
1075	 FC	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0xF6000F
- stack 0: 0xFFFF
1076	 FF	AND		 	 
- stack 1: 0x4E4
- stack 0: 0xF
1077	 100	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0xF
- stack 0: 0x1
1078	 102	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0xF
1079	 103	PUSH2	03A0	 	 
- stack 2: 0x4E4
- stack 1: 0xF
- stack 0: 0x3A0
1080	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E4
- stack 1: 0xF
- stack 0: 0xF00FF000
1081	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x4E4
- stack 0: 0xF00FF00F
1082	 108	PUSH2	03A0	 	 
- stack 2: 0x4E4
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
1083	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x4E4
1084	 10C	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1085	 10E	ADD		 	 
- stack 0: 0x4E8
1086	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1087	 110	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x1150009012F01B000860000009501F00095FFE000B4002000E30FF000F600FF
1088	 111	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x1150009012F01B000860000009501F00095FFE000B4002000E30FF000F600FF
- stack 0: 0xF0
1089	 113	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x115
1090	 114	JUMP		 	 
- stack 0: 0x4E8
1091	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E8
1092	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1093	 117	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x1150009012F01B000860000009501F00095FFE000B4002000E30FF000F600FF
1094	 118	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0x1150009012F01B000860000009501F00095FFE000B4002000E30FF000F600FF
- stack 0: 0xE0
1095	 11A	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x1150009
1096	 11B	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x1150009
- stack 0: 0xFFFF
1097	 11E	AND		 	 
- stack 1: 0x4E8
- stack 0: 0x9
1098	 11F	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0x9
- stack 0: 0x1
1099	 121	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0x9
1100	 122	PUSH2	0380	 	 
- stack 2: 0x4E8
- stack 1: 0x9
- stack 0: 0x380
1101	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E8
1102	 126	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1103	 128	ADD		 	 
- stack 0: 0x4EC
1104	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1105	 12A	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x12F01B000860000009501F00095FFE000B4002000E30FF000F600FF0115000A
1106	 12B	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x12F01B000860000009501F00095FFE000B4002000E30FF000F600FF0115000A
- stack 0: 0xF0
1107	 12D	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x12F
1108	 12E	JUMP		 	 
- stack 0: 0x4EC
1109	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x4EC
1110	 130	PUSH2	0060	 	 
- stack 1: 0x4EC
- stack 0: 0x60
1111	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x4EC
- stack 0: 0xF00FF00F
1112	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4EC
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
1113	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4EC
- stack 0: 0xF00FF00F
1114	 13A	PUSH2	03A0	 	 
- stack 2: 0x4EC
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
1115	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x4EC
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
1116	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4EC
- stack 2: 0xF00FF00F
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
1117	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4EC
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
1118	 144	SUB		 	 
- stack 1: 0x4EC
- stack 0: 0x0
1119	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x4EC
- stack 1: 0x0
- stack 0: 0x14D
1120	 148	JUMPI		 	 
- stack 0: 0x4EC
1121	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x4EC
- stack 0: 0x167
1122	 14C	JUMP		 	 
- stack 0: 0x4EC
1123	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x4EC
1124	 168	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1125	 16A	ADD		 	 
- stack 0: 0x4F0
1126	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1127	 16C	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x860000009501F00095FFE000B4002000E30FF000F600FF0115000A012F0190
1128	 16D	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x860000009501F00095FFE000B4002000E30FF000F600FF0115000A012F0190
- stack 0: 0xF0
1129	 16F	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x86
1130	 170	JUMP		 	 
- stack 0: 0x4F0
1131	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4F0
1132	 87	DUP1		 	 
- stack 1: 0x4F0
- stack 0: 0x4F0
1133	 88	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0x4F0
- stack 0: 0x20
1134	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F0
1135	 8C	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1136	 8E	ADD		 	 
- stack 0: 0x4F4
1137	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1138	 90	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x9501F00095FFE000B4002000E30FF000F600FF0115000A012F019000860000
1139	 91	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x9501F00095FFE000B4002000E30FF000F600FF0115000A012F019000860000
- stack 0: 0xF0
1140	 93	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x95
1141	 94	JUMP		 	 
- stack 0: 0x4F4
1142	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x4F4
1143	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1144	 97	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x9501F00095FFE000B4002000E30FF000F600FF0115000A012F019000860000
1145	 98	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x9501F00095FFE000B4002000E30FF000F600FF0115000A012F019000860000
- stack 0: 0xE0
1146	 9A	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x9501F0
1147	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x9501F0
- stack 0: 0xFFFF
1148	 9E	AND		 	 
- stack 1: 0x4F4
- stack 0: 0x1F0
1149	 9F	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0x1F0
- stack 0: 0x1
1150	 A1	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0x1F0
1151	 A2	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0x1F0
- stack 0: 0x20
1152	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F4
- stack 1: 0x1F0
- stack 0: 0x4F0
1153	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F4
- stack 0: 0x6E0
1154	 A7	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0x6E0
- stack 0: 0x20
1155	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F4
1156	 AB	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1157	 AD	ADD		 	 
- stack 0: 0x4F8
1158	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1159	 AF	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x95FFE000B4002000E30FF000F600FF0115000A012F019000860000009501D0
1160	 B0	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x95FFE000B4002000E30FF000F600FF0115000A012F019000860000009501D0
- stack 0: 0xF0
1161	 B2	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x95
1162	 B3	JUMP		 	 
- stack 0: 0x4F8
1163	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x4F8
1164	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1165	 97	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x95FFE000B4002000E30FF000F600FF0115000A012F019000860000009501D0
1166	 98	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x95FFE000B4002000E30FF000F600FF0115000A012F019000860000009501D0
- stack 0: 0xE0
1167	 9A	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x95FFE0
1168	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x95FFE0
- stack 0: 0xFFFF
1169	 9E	AND		 	 
- stack 1: 0x4F8
- stack 0: 0xFFE0
1170	 9F	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0xFFE0
- stack 0: 0x1
1171	 A1	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1172	 A2	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x20
1173	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x6E0
1174	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F8
- stack 0: 0x6C0
1175	 A7	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0x6C0
- stack 0: 0x20
1176	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F8
1177	 AB	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1178	 AD	ADD		 	 
- stack 0: 0x4FC
1179	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1180	 AF	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0xB4002000E30FF000F600FF0115000A012F019000860000009501D00095FFFD
1181	 B0	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0xB4002000E30FF000F600FF0115000A012F019000860000009501D00095FFFD
- stack 0: 0xF0
1182	 B2	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0xB4
1183	 B3	JUMP		 	 
- stack 0: 0x4FC
1184	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x4FC
1185	 B5	PUSH2	0020	 	 
- stack 1: 0x4FC
- stack 0: 0x20
1186	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x4FC
- stack 0: 0x6C0
1187	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFF
1188	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0x6C0
1189	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4FC
- stack 1: 0x6C0
- stack 0: 0x4FC
1190	 C0	MLOAD		 	 
- stack 2: 0x4FC
- stack 1: 0x6C0
- stack 0: 0xB4002000E30FF000F600FF0115000A012F019000860000009501D00095FFFD
1191	 C1	PUSH1	E0	 	 
- stack 3: 0x4FC
- stack 2: 0x6C0
- stack 1: 0xB4002000E30FF000F600FF0115000A012F019000860000009501D00095FFFD
- stack 0: 0xE0
1192	 C3	SHR		 	 
- stack 2: 0x4FC
- stack 1: 0x6C0
- stack 0: 0xB40020
1193	 C4	PUSH2	FFFF	 	 
- stack 3: 0x4FC
- stack 2: 0x6C0
- stack 1: 0xB40020
- stack 0: 0xFFFF
1194	 C7	AND		 	 
- stack 2: 0x4FC
- stack 1: 0x6C0
- stack 0: 0x20
1195	 C8	PUSH1	01	 	 
- stack 3: 0x4FC
- stack 2: 0x6C0
- stack 1: 0x20
- stack 0: 0x1
1196	 CA	SIGNEXTEND		 	 
- stack 2: 0x4FC
- stack 1: 0x6C0
- stack 0: 0x20
1197	 CB	ADD		 	 
- stack 1: 0x4FC
- stack 0: 0x6E0
1198	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
1199	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0x6E0
1200	 D2	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0xFF00FFFF00FF000FF00FF0F00FF00F00000000000000000000000000000000
1201	 D3	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0xFF00FFFF00FF000FF00FF0F00FF00F00000000000000000000000000000000
- stack 0: 0xE0
1202	 D5	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0xFF00FF
1203	 D6	PUSH2	0060	 	 
- stack 2: 0x4FC
- stack 1: 0xFF00FF
- stack 0: 0x60
1204	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x4FC
1205	 DA	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1206	 DC	ADD		 	 
- stack 0: 0x500
1207	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1208	 DE	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0xE30FF000F600FF0115000A012F019000860000009501D00095FFFD00B40007
1209	 DF	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0xE30FF000F600FF0115000A012F019000860000009501D00095FFFD00B40007
- stack 0: 0xF0
1210	 E1	SHR		 	 
- stack 1: 0x500
- stack 0: 0xE3
1211	 E2	JUMP		 	 
- stack 0: 0x500
1212	 E3	JUMPDEST		 ;; __riscvimpl_LUI_ff0eb7	  ;; # instr: lui t4,0xff0(ignore imm)
- stack 0: 0x500
1213	 E4	PUSH4	00ff0000	 	 
- stack 1: 0x500
- stack 0: 0xFF0000
1214	 E9	PUSH2	03A0	 	 
- stack 2: 0x500
- stack 1: 0xFF0000
- stack 0: 0x3A0
1215	 EC	MSTORE		 	  ;; # store to x29
- stack 0: 0x500
1216	 ED	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1217	 EF	ADD		 	 
- stack 0: 0x504
1218	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1219	 F1	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0xF600FF0115000A012F019000860000009501D00095FFFD00B400070171F010
1220	 F2	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0xF600FF0115000A012F019000860000009501D00095FFFD00B400070171F010
- stack 0: 0xF0
1221	 F4	SHR		 	 
- stack 1: 0x504
- stack 0: 0xF6
1222	 F5	JUMP		 	 
- stack 0: 0x504
1223	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x504
1224	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1225	 F8	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0xF600FF0115000A012F019000860000009501D00095FFFD00B400070171F010
1226	 F9	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0xF600FF0115000A012F019000860000009501D00095FFFD00B400070171F010
- stack 0: 0xE0
1227	 FB	SHR		 	 
- stack 1: 0x504
- stack 0: 0xF600FF
1228	 FC	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0xF600FF
- stack 0: 0xFFFF
1229	 FF	AND		 	 
- stack 1: 0x504
- stack 0: 0xFF
1230	 100	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0xFF
- stack 0: 0x1
1231	 102	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0xFF
1232	 103	PUSH2	03A0	 	 
- stack 2: 0x504
- stack 1: 0xFF
- stack 0: 0x3A0
1233	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x504
- stack 1: 0xFF
- stack 0: 0xFF0000
1234	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x504
- stack 0: 0xFF00FF
1235	 108	PUSH2	03A0	 	 
- stack 2: 0x504
- stack 1: 0xFF00FF
- stack 0: 0x3A0
1236	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x504
1237	 10C	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1238	 10E	ADD		 	 
- stack 0: 0x508
1239	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1240	 110	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x115000A012F019000860000009501D00095FFFD00B400070171F01000F6FF00
1241	 111	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x115000A012F019000860000009501D00095FFFD00B400070171F01000F6FF00
- stack 0: 0xF0
1242	 113	SHR		 	 
- stack 1: 0x508
- stack 0: 0x115
1243	 114	JUMP		 	 
- stack 0: 0x508
1244	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x508
1245	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1246	 117	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x115000A012F019000860000009501D00095FFFD00B400070171F01000F6FF00
1247	 118	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x115000A012F019000860000009501D00095FFFD00B400070171F01000F6FF00
- stack 0: 0xE0
1248	 11A	SHR		 	 
- stack 1: 0x508
- stack 0: 0x115000A
1249	 11B	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x115000A
- stack 0: 0xFFFF
1250	 11E	AND		 	 
- stack 1: 0x508
- stack 0: 0xA
1251	 11F	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xA
- stack 0: 0x1
1252	 121	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xA
1253	 122	PUSH2	0380	 	 
- stack 2: 0x508
- stack 1: 0xA
- stack 0: 0x380
1254	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x508
1255	 126	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1256	 128	ADD		 	 
- stack 0: 0x50C
1257	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1258	 12A	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x12F019000860000009501D00095FFFD00B400070171F01000F6FF000115000B
1259	 12B	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x12F019000860000009501D00095FFFD00B400070171F01000F6FF000115000B
- stack 0: 0xF0
1260	 12D	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x12F
1261	 12E	JUMP		 	 
- stack 0: 0x50C
1262	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x50C
1263	 130	PUSH2	0060	 	 
- stack 1: 0x50C
- stack 0: 0x60
1264	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x50C
- stack 0: 0xFF00FF
1265	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x50C
- stack 1: 0xFF00FF
- stack 0: 0xFFFFFFFF
1266	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x50C
- stack 0: 0xFF00FF
1267	 13A	PUSH2	03A0	 	 
- stack 2: 0x50C
- stack 1: 0xFF00FF
- stack 0: 0x3A0
1268	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x50C
- stack 1: 0xFF00FF
- stack 0: 0xFF00FF
1269	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x50C
- stack 2: 0xFF00FF
- stack 1: 0xFF00FF
- stack 0: 0xFFFFFFFF
1270	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x50C
- stack 1: 0xFF00FF
- stack 0: 0xFF00FF
1271	 144	SUB		 	 
- stack 1: 0x50C
- stack 0: 0x0
1272	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x14D
1273	 148	JUMPI		 	 
- stack 0: 0x50C
1274	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x50C
- stack 0: 0x167
1275	 14C	JUMP		 	 
- stack 0: 0x50C
1276	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x50C
1277	 168	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1278	 16A	ADD		 	 
- stack 0: 0x510
1279	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1280	 16C	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x860000009501D00095FFFD00B400070171F01000F6FF000115000B012F0170
1281	 16D	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x860000009501D00095FFFD00B400070171F01000F6FF000115000B012F0170
- stack 0: 0xF0
1282	 16F	SHR		 	 
- stack 1: 0x510
- stack 0: 0x86
1283	 170	JUMP		 	 
- stack 0: 0x510
1284	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x510
1285	 87	DUP1		 	 
- stack 1: 0x510
- stack 0: 0x510
1286	 88	PUSH2	0020	 	 
- stack 2: 0x510
- stack 1: 0x510
- stack 0: 0x20
1287	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x510
1288	 8C	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1289	 8E	ADD		 	 
- stack 0: 0x514
1290	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1291	 90	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x9501D00095FFFD00B400070171F01000F6FF000115000B012F01700115000C
1292	 91	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x9501D00095FFFD00B400070171F01000F6FF000115000B012F01700115000C
- stack 0: 0xF0
1293	 93	SHR		 	 
- stack 1: 0x514
- stack 0: 0x95
1294	 94	JUMP		 	 
- stack 0: 0x514
1295	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x514
1296	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1297	 97	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x9501D00095FFFD00B400070171F01000F6FF000115000B012F01700115000C
1298	 98	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x9501D00095FFFD00B400070171F01000F6FF000115000B012F01700115000C
- stack 0: 0xE0
1299	 9A	SHR		 	 
- stack 1: 0x514
- stack 0: 0x9501D0
1300	 9B	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x9501D0
- stack 0: 0xFFFF
1301	 9E	AND		 	 
- stack 1: 0x514
- stack 0: 0x1D0
1302	 9F	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x1D0
- stack 0: 0x1
1303	 A1	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x1D0
1304	 A2	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0x1D0
- stack 0: 0x20
1305	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x514
- stack 1: 0x1D0
- stack 0: 0x510
1306	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x514
- stack 0: 0x6E0
1307	 A7	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0x6E0
- stack 0: 0x20
1308	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x514
1309	 AB	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1310	 AD	ADD		 	 
- stack 0: 0x518
1311	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1312	 AF	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x95FFFD00B400070171F01000F6FF000115000B012F01700115000C01AA0000
1313	 B0	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x95FFFD00B400070171F01000F6FF000115000B012F01700115000C01AA0000
- stack 0: 0xF0
1314	 B2	SHR		 	 
- stack 1: 0x518
- stack 0: 0x95
1315	 B3	JUMP		 	 
- stack 0: 0x518
1316	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x518
1317	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1318	 97	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x95FFFD00B400070171F01000F6FF000115000B012F01700115000C01AA0000
1319	 98	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x95FFFD00B400070171F01000F6FF000115000B012F01700115000C01AA0000
- stack 0: 0xE0
1320	 9A	SHR		 	 
- stack 1: 0x518
- stack 0: 0x95FFFD
1321	 9B	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x95FFFD
- stack 0: 0xFFFF
1322	 9E	AND		 	 
- stack 1: 0x518
- stack 0: 0xFFFD
1323	 9F	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0xFFFD
- stack 0: 0x1
1324	 A1	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD
1325	 A2	PUSH2	0020	 	 
- stack 2: 0x518
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD
- stack 0: 0x20
1326	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x518
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD
- stack 0: 0x6E0
1327	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x518
- stack 0: 0x6DD
1328	 A7	PUSH2	0020	 	 
- stack 2: 0x518
- stack 1: 0x6DD
- stack 0: 0x20
1329	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x518
1330	 AB	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1331	 AD	ADD		 	 
- stack 0: 0x51C
1332	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1333	 AF	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0xB400070171F01000F6FF000115000B012F01700115000C01AA000000860000
1334	 B0	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0xB400070171F01000F6FF000115000B012F01700115000C01AA000000860000
- stack 0: 0xF0
1335	 B2	SHR		 	 
- stack 1: 0x51C
- stack 0: 0xB4
1336	 B3	JUMP		 	 
- stack 0: 0x51C
1337	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x51C
1338	 B5	PUSH2	0020	 	 
- stack 1: 0x51C
- stack 0: 0x20
1339	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x51C
- stack 0: 0x6DD
1340	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x51C
- stack 1: 0x6DD
- stack 0: 0xFFFFFFFF
1341	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x51C
- stack 0: 0x6DD
1342	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x51C
- stack 1: 0x6DD
- stack 0: 0x51C
1343	 C0	MLOAD		 	 
- stack 2: 0x51C
- stack 1: 0x6DD
- stack 0: 0xB400070171F01000F6FF000115000B012F01700115000C01AA000000860000
1344	 C1	PUSH1	E0	 	 
- stack 3: 0x51C
- stack 2: 0x6DD
- stack 1: 0xB400070171F01000F6FF000115000B012F01700115000C01AA000000860000
- stack 0: 0xE0
1345	 C3	SHR		 	 
- stack 2: 0x51C
- stack 1: 0x6DD
- stack 0: 0xB40007
1346	 C4	PUSH2	FFFF	 	 
- stack 3: 0x51C
- stack 2: 0x6DD
- stack 1: 0xB40007
- stack 0: 0xFFFF
1347	 C7	AND		 	 
- stack 2: 0x51C
- stack 1: 0x6DD
- stack 0: 0x7
1348	 C8	PUSH1	01	 	 
- stack 3: 0x51C
- stack 2: 0x6DD
- stack 1: 0x7
- stack 0: 0x1
1349	 CA	SIGNEXTEND		 	 
- stack 2: 0x51C
- stack 1: 0x6DD
- stack 0: 0x7
1350	 CB	ADD		 	 
- stack 1: 0x51C
- stack 0: 0x6E4
1351	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x51C
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFF
1352	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x51C
- stack 0: 0x6E4
1353	 D2	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0xFF00FF000FF00FF0F00FF00F0000000000000000000000000000000000000000
1354	 D3	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0xFF00FF000FF00FF0F00FF00F0000000000000000000000000000000000000000
- stack 0: 0xE0
1355	 D5	SHR		 	 
- stack 1: 0x51C
- stack 0: 0xFF00FF00
1356	 D6	PUSH2	0060	 	 
- stack 2: 0x51C
- stack 1: 0xFF00FF00
- stack 0: 0x60
1357	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x51C
1358	 DA	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1359	 DC	ADD		 	 
- stack 0: 0x520
1360	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1361	 DE	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x171F01000F6FF000115000B012F01700115000C01AA000000860000009501AC
1362	 DF	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x171F01000F6FF000115000B012F01700115000C01AA000000860000009501AC
- stack 0: 0xF0
1363	 E1	SHR		 	 
- stack 1: 0x520
- stack 0: 0x171
1364	 E2	JUMP		 	 
- stack 0: 0x520
1365	 171	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x520
1366	 172	PUSH4	ff010000	 	 
- stack 1: 0x520
- stack 0: 0xFF010000
1367	 177	PUSH2	03A0	 	 
- stack 2: 0x520
- stack 1: 0xFF010000
- stack 0: 0x3A0
1368	 17A	MSTORE		 	  ;; # store to x29
- stack 0: 0x520
1369	 17B	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1370	 17D	ADD		 	 
- stack 0: 0x524
1371	 17E	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1372	 17F	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0xF6FF000115000B012F01700115000C01AA000000860000009501AC00B40004
1373	 180	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0xF6FF000115000B012F01700115000C01AA000000860000009501AC00B40004
- stack 0: 0xF0
1374	 182	SHR		 	 
- stack 1: 0x524
- stack 0: 0xF6
1375	 183	JUMP		 	 
- stack 0: 0x524
1376	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x524
1377	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1378	 F8	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0xF6FF000115000B012F01700115000C01AA000000860000009501AC00B40004
1379	 F9	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0xF6FF000115000B012F01700115000C01AA000000860000009501AC00B40004
- stack 0: 0xE0
1380	 FB	SHR		 	 
- stack 1: 0x524
- stack 0: 0xF6FF00
1381	 FC	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0xF6FF00
- stack 0: 0xFFFF
1382	 FF	AND		 	 
- stack 1: 0x524
- stack 0: 0xFF00
1383	 100	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0xFF00
- stack 0: 0x1
1384	 102	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1385	 103	PUSH2	03A0	 	 
- stack 2: 0x524
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
1386	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x524
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
1387	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x524
- stack 0: 0xFF00FF00
1388	 108	PUSH2	03A0	 	 
- stack 2: 0x524
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
1389	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x524
1390	 10C	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1391	 10E	ADD		 	 
- stack 0: 0x528
1392	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1393	 110	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x115000B012F01700115000C01AA000000860000009501AC00B4000401C40000
1394	 111	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x115000B012F01700115000C01AA000000860000009501AC00B4000401C40000
- stack 0: 0xF0
1395	 113	SHR		 	 
- stack 1: 0x528
- stack 0: 0x115
1396	 114	JUMP		 	 
- stack 0: 0x528
1397	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x528
1398	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1399	 117	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x115000B012F01700115000C01AA000000860000009501AC00B4000401C40000
1400	 118	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x115000B012F01700115000C01AA000000860000009501AC00B4000401C40000
- stack 0: 0xE0
1401	 11A	SHR		 	 
- stack 1: 0x528
- stack 0: 0x115000B
1402	 11B	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x115000B
- stack 0: 0xFFFF
1403	 11E	AND		 	 
- stack 1: 0x528
- stack 0: 0xB
1404	 11F	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0xB
- stack 0: 0x1
1405	 121	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0xB
1406	 122	PUSH2	0380	 	 
- stack 2: 0x528
- stack 1: 0xB
- stack 0: 0x380
1407	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x528
1408	 126	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1409	 128	ADD		 	 
- stack 0: 0x52C
1410	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1411	 12A	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x12F01700115000C01AA000000860000009501AC00B4000401C400000184FF01
1412	 12B	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x12F01700115000C01AA000000860000009501AC00B4000401C400000184FF01
- stack 0: 0xF0
1413	 12D	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x12F
1414	 12E	JUMP		 	 
- stack 0: 0x52C
1415	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x52C
1416	 130	PUSH2	0060	 	 
- stack 1: 0x52C
- stack 0: 0x60
1417	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x52C
- stack 0: 0xFF00FF00
1418	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x52C
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
1419	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x52C
- stack 0: 0xFF00FF00
1420	 13A	PUSH2	03A0	 	 
- stack 2: 0x52C
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
1421	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x52C
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
1422	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x52C
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
1423	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x52C
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
1424	 144	SUB		 	 
- stack 1: 0x52C
- stack 0: 0x0
1425	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x52C
- stack 1: 0x0
- stack 0: 0x14D
1426	 148	JUMPI		 	 
- stack 0: 0x52C
1427	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x52C
- stack 0: 0x167
1428	 14C	JUMP		 	 
- stack 0: 0x52C
1429	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x52C
1430	 168	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1431	 16A	ADD		 	 
- stack 0: 0x530
1432	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1433	 16C	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x115000C01AA000000860000009501AC00B4000401C400000184FF0100F6FFF0
1434	 16D	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x115000C01AA000000860000009501AC00B4000401C400000184FF0100F6FFF0
- stack 0: 0xF0
1435	 16F	SHR		 	 
- stack 1: 0x530
- stack 0: 0x115
1436	 170	JUMP		 	 
- stack 0: 0x530
1437	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x530
1438	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1439	 117	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x115000C01AA000000860000009501AC00B4000401C400000184FF0100F6FFF0
1440	 118	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x115000C01AA000000860000009501AC00B4000401C400000184FF0100F6FFF0
- stack 0: 0xE0
1441	 11A	SHR		 	 
- stack 1: 0x530
- stack 0: 0x115000C
1442	 11B	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x115000C
- stack 0: 0xFFFF
1443	 11E	AND		 	 
- stack 1: 0x530
- stack 0: 0xC
1444	 11F	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0xC
- stack 0: 0x1
1445	 121	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0xC
1446	 122	PUSH2	0380	 	 
- stack 2: 0x530
- stack 1: 0xC
- stack 0: 0x380
1447	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x530
1448	 126	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1449	 128	ADD		 	 
- stack 0: 0x534
1450	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1451	 12A	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1AA000000860000009501AC00B4000401C400000184FF0100F6FFF001E3014C
1452	 12B	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x1AA000000860000009501AC00B4000401C400000184FF0100F6FFF001E3014C
- stack 0: 0xF0
1453	 12D	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1AA
1454	 12E	JUMP		 	 
- stack 0: 0x534
1455	 1AA	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x534
1456	 1AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1457	 1AC	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1AA000000860000009501AC00B4000401C400000184FF0100F6FFF001E3014C
1458	 1AD	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x1AA000000860000009501AC00B4000401C400000184FF0100F6FFF001E3014C
- stack 0: 0xE0
1459	 1AF	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1AA0000
1460	 1B0	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x1AA0000
- stack 0: 0xFFFF
1461	 1B3	AND		 	 
- stack 1: 0x534
- stack 0: 0x0
1462	 1B4	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x1
1463	 1B6	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0x0
1464	 1B7	PUSH2	0080	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x80
1465	 1BA	MSTORE		 	  ;; # store to x4
- stack 0: 0x534
1466	 1BB	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1467	 1BD	ADD		 	 
- stack 0: 0x538
1468	 1BE	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1469	 1BF	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x860000009501AC00B4000401C400000184FF0100F6FFF001E3014C02250001
1470	 1C0	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x860000009501AC00B4000401C400000184FF0100F6FFF001E3014C02250001
- stack 0: 0xF0
1471	 1C2	SHR		 	 
- stack 1: 0x538
- stack 0: 0x86
1472	 1C3	JUMP		 	 
- stack 0: 0x538
1473	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x538
1474	 87	DUP1		 	 
- stack 1: 0x538
- stack 0: 0x538
1475	 88	PUSH2	0020	 	 
- stack 2: 0x538
- stack 1: 0x538
- stack 0: 0x20
1476	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x538
1477	 8C	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1478	 8E	ADD		 	 
- stack 0: 0x53C
1479	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1480	 90	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x9501AC00B4000401C400000184FF0100F6FFF001E3014C0225000102440002
1481	 91	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x9501AC00B4000401C400000184FF0100F6FFF001E3014C0225000102440002
- stack 0: 0xF0
1482	 93	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x95
1483	 94	JUMP		 	 
- stack 0: 0x53C
1484	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x53C
1485	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1486	 97	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x9501AC00B4000401C400000184FF0100F6FFF001E3014C0225000102440002
1487	 98	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0x9501AC00B4000401C400000184FF0100F6FFF001E3014C0225000102440002
- stack 0: 0xE0
1488	 9A	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x9501AC
1489	 9B	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0x9501AC
- stack 0: 0xFFFF
1490	 9E	AND		 	 
- stack 1: 0x53C
- stack 0: 0x1AC
1491	 9F	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0x1AC
- stack 0: 0x1
1492	 A1	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0x1AC
1493	 A2	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0x1AC
- stack 0: 0x20
1494	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x53C
- stack 1: 0x1AC
- stack 0: 0x538
1495	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x53C
- stack 0: 0x6E4
1496	 A7	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0x6E4
- stack 0: 0x20
1497	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
1498	 AB	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1499	 AD	ADD		 	 
- stack 0: 0x540
1500	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1501	 AF	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xB4000401C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC
1502	 B0	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0xB4000401C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC
- stack 0: 0xF0
1503	 B2	SHR		 	 
- stack 1: 0x540
- stack 0: 0xB4
1504	 B3	JUMP		 	 
- stack 0: 0x540
1505	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x540
1506	 B5	PUSH2	0020	 	 
- stack 1: 0x540
- stack 0: 0x20
1507	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x540
- stack 0: 0x6E4
1508	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x540
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFF
1509	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x540
- stack 0: 0x6E4
1510	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x540
- stack 1: 0x6E4
- stack 0: 0x540
1511	 C0	MLOAD		 	 
- stack 2: 0x540
- stack 1: 0x6E4
- stack 0: 0xB4000401C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC
1512	 C1	PUSH1	E0	 	 
- stack 3: 0x540
- stack 2: 0x6E4
- stack 1: 0xB4000401C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC
- stack 0: 0xE0
1513	 C3	SHR		 	 
- stack 2: 0x540
- stack 1: 0x6E4
- stack 0: 0xB40004
1514	 C4	PUSH2	FFFF	 	 
- stack 3: 0x540
- stack 2: 0x6E4
- stack 1: 0xB40004
- stack 0: 0xFFFF
1515	 C7	AND		 	 
- stack 2: 0x540
- stack 1: 0x6E4
- stack 0: 0x4
1516	 C8	PUSH1	01	 	 
- stack 3: 0x540
- stack 2: 0x6E4
- stack 1: 0x4
- stack 0: 0x1
1517	 CA	SIGNEXTEND		 	 
- stack 2: 0x540
- stack 1: 0x6E4
- stack 0: 0x4
1518	 CB	ADD		 	 
- stack 1: 0x540
- stack 0: 0x6E8
1519	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x540
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFF
1520	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x540
- stack 0: 0x6E8
1521	 D2	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xFF00FF0F00FF00F000000000000000000000000000000000000000000000000
1522	 D3	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0xFF00FF0F00FF00F000000000000000000000000000000000000000000000000
- stack 0: 0xE0
1523	 D5	SHR		 	 
- stack 1: 0x540
- stack 0: 0xFF00FF0
1524	 D6	PUSH2	0060	 	 
- stack 2: 0x540
- stack 1: 0xFF00FF0
- stack 0: 0x60
1525	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x540
1526	 DA	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1527	 DC	ADD		 	 
- stack 0: 0x544
1528	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1529	 DE	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x1C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC0115000D
1530	 DF	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x1C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC0115000D
- stack 0: 0xF0
1531	 E1	SHR		 	 
- stack 1: 0x544
- stack 0: 0x1C4
1532	 E2	JUMP		 	 
- stack 0: 0x544
1533	 1C4	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x544
1534	 1C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1535	 1C6	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x1C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC0115000D
1536	 1C7	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x1C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC0115000D
- stack 0: 0xE0
1537	 1C9	SHR		 	 
- stack 1: 0x544
- stack 0: 0x1C40000
1538	 1CA	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x1C40000
- stack 0: 0xFFFF
1539	 1CD	AND		 	 
- stack 1: 0x544
- stack 0: 0x0
1540	 1CE	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x1
1541	 1D0	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x0
1542	 1D1	PUSH2	0060	 	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x60
1543	 1D4	MLOAD		 	  ;; # read from x3
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0xFF00FF0
1544	 1D5	ADD		 	  ;; # ADDI 3
- stack 1: 0x544
- stack 0: 0xFF00FF0
1545	 1D6	PUSH2	00C0	 	 
- stack 2: 0x544
- stack 1: 0xFF00FF0
- stack 0: 0xC0
1546	 1D9	MSTORE		 	  ;; # store to x6
- stack 0: 0x544
1547	 1DA	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1548	 1DC	ADD		 	 
- stack 0: 0x548
1549	 1DD	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1550	 1DE	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x184FF0100F6FFF001E3014C0225000102440002025EFFDC0115000D01AA0000
1551	 1DF	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x184FF0100F6FFF001E3014C0225000102440002025EFFDC0115000D01AA0000
- stack 0: 0xF0
1552	 1E1	SHR		 	 
- stack 1: 0x548
- stack 0: 0x184
1553	 1E2	JUMP		 	 
- stack 0: 0x548
1554	 184	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x548
1555	 185	PUSH4	0ff01000	 	 
- stack 1: 0x548
- stack 0: 0xFF01000
1556	 18A	PUSH2	03A0	 	 
- stack 2: 0x548
- stack 1: 0xFF01000
- stack 0: 0x3A0
1557	 18D	MSTORE		 	  ;; # store to x29
- stack 0: 0x548
1558	 18E	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1559	 190	ADD		 	 
- stack 0: 0x54C
1560	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1561	 192	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xF6FFF001E3014C0225000102440002025EFFDC0115000D01AA000000860000
1562	 193	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xF6FFF001E3014C0225000102440002025EFFDC0115000D01AA000000860000
- stack 0: 0xF0
1563	 195	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xF6
1564	 196	JUMP		 	 
- stack 0: 0x54C
1565	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x54C
1566	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1567	 F8	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xF6FFF001E3014C0225000102440002025EFFDC0115000D01AA000000860000
1568	 F9	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0xF6FFF001E3014C0225000102440002025EFFDC0115000D01AA000000860000
- stack 0: 0xE0
1569	 FB	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xF6FFF0
1570	 FC	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0xF6FFF0
- stack 0: 0xFFFF
1571	 FF	AND		 	 
- stack 1: 0x54C
- stack 0: 0xFFF0
1572	 100	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0xFFF0
- stack 0: 0x1
1573	 102	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1574	 103	PUSH2	03A0	 	 
- stack 2: 0x54C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
1575	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x54C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
1576	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x54C
- stack 0: 0xFF00FF0
1577	 108	PUSH2	03A0	 	 
- stack 2: 0x54C
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
1578	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x54C
1579	 10C	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1580	 10E	ADD		 	 
- stack 0: 0x550
1581	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1582	 110	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x1E3014C0225000102440002025EFFDC0115000D01AA00000086000000950180
1583	 111	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x1E3014C0225000102440002025EFFDC0115000D01AA00000086000000950180
- stack 0: 0xF0
1584	 113	SHR		 	 
- stack 1: 0x550
- stack 0: 0x1E3
1585	 114	JUMP		 	 
- stack 0: 0x550
1586	 1E3	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,14c(ignore imm)
- stack 0: 0x550
1587	 1E4	PUSH2	00C0	 	 
- stack 1: 0x550
- stack 0: 0xC0
1588	 1E7	MLOAD		 	  ;; # read from x6
- stack 1: 0x550
- stack 0: 0xFF00FF0
1589	 1E8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x550
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
1590	 1ED	AND		 	  ;; # mask to 32 bits
- stack 1: 0x550
- stack 0: 0xFF00FF0
1591	 1EE	PUSH2	03A0	 	 
- stack 2: 0x550
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
1592	 1F1	MLOAD		 	  ;; # read from x29
- stack 2: 0x550
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
1593	 1F2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x550
- stack 2: 0xFF00FF0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
1594	 1F7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x550
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
1595	 1F8	SUB		 	 
- stack 1: 0x550
- stack 0: 0x0
1596	 1F9	PUSH2	0201	 ;; _neq_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x201
1597	 1FC	JUMPI		 	 
- stack 0: 0x550
1598	 1FD	PUSH2	021B	 ;; _neq_after_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 1: 0x550
- stack 0: 0x21B
1599	 200	JUMP		 	 
- stack 0: 0x550
1600	 21B	JUMPDEST		 ;; _neq_after_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 0: 0x550
1601	 21C	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1602	 21E	ADD		 	 
- stack 0: 0x554
1603	 21F	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1604	 220	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x225000102440002025EFFDC0115000D01AA0000008600000095018000B40004
1605	 221	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x225000102440002025EFFDC0115000D01AA0000008600000095018000B40004
- stack 0: 0xF0
1606	 223	SHR		 	 
- stack 1: 0x554
- stack 0: 0x225
1607	 224	JUMP		 	 
- stack 0: 0x554
1608	 225	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x554
1609	 226	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1610	 227	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x225000102440002025EFFDC0115000D01AA0000008600000095018000B40004
1611	 228	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x225000102440002025EFFDC0115000D01AA0000008600000095018000B40004
- stack 0: 0xE0
1612	 22A	SHR		 	 
- stack 1: 0x554
- stack 0: 0x2250001
1613	 22B	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x2250001
- stack 0: 0xFFFF
1614	 22E	AND		 	 
- stack 1: 0x554
- stack 0: 0x1
1615	 22F	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x1
1616	 231	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x1
1617	 232	PUSH2	0080	 	 
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x80
1618	 235	MLOAD		 	  ;; # read from x4
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x0
1619	 236	ADD		 	  ;; # ADDI 4
- stack 1: 0x554
- stack 0: 0x1
1620	 237	PUSH2	0080	 	 
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x80
1621	 23A	MSTORE		 	  ;; # store to x4
- stack 0: 0x554
1622	 23B	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1623	 23D	ADD		 	 
- stack 0: 0x558
1624	 23E	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1625	 23F	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x2440002025EFFDC0115000D01AA0000008600000095018000B4000402A00000
1626	 240	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x2440002025EFFDC0115000D01AA0000008600000095018000B4000402A00000
- stack 0: 0xF0
1627	 242	SHR		 	 
- stack 1: 0x558
- stack 0: 0x244
1628	 243	JUMP		 	 
- stack 0: 0x558
1629	 244	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x558
1630	 245	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1631	 246	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x2440002025EFFDC0115000D01AA0000008600000095018000B4000402A00000
1632	 247	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x2440002025EFFDC0115000D01AA0000008600000095018000B4000402A00000
- stack 0: 0xE0
1633	 249	SHR		 	 
- stack 1: 0x558
- stack 0: 0x2440002
1634	 24A	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x2440002
- stack 0: 0xFFFF
1635	 24D	AND		 	 
- stack 1: 0x558
- stack 0: 0x2
1636	 24E	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0x1
1637	 250	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x2
1638	 251	PUSH2	00A0	 	 
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0xA0
1639	 254	MSTORE		 	  ;; # store to x5
- stack 0: 0x558
1640	 255	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1641	 257	ADD		 	 
- stack 0: 0x55C
1642	 258	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1643	 259	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x25EFFDC0115000D01AA0000008600000095018000B4000402A0000001C40000
1644	 25A	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x25EFFDC0115000D01AA0000008600000095018000B4000402A0000001C40000
- stack 0: 0xF0
1645	 25C	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x25E
1646	 25D	JUMP		 	 
- stack 0: 0x55C
1647	 25E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x55C
1648	 25F	PUSH2	0080	 	 
- stack 1: 0x55C
- stack 0: 0x80
1649	 262	MLOAD		 	  ;; # read from x4
- stack 1: 0x55C
- stack 0: 0x1
1650	 263	PUSH4	FFFFFFFF	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1651	 268	AND		 	  ;; # mask to 32 bits
- stack 1: 0x55C
- stack 0: 0x1
1652	 269	PUSH2	00A0	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0xA0
1653	 26C	MLOAD		 	  ;; # read from x5
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x2
1654	 26D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x55C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1655	 272	AND		 	  ;; # mask to 32 bits
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x2
1656	 273	SUB		 	 
- stack 1: 0x55C
- stack 0: 0x1
1657	 274	PUSH2	027C	 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x27C
1658	 277	JUMPI		 	 
- stack 0: 0x55C
1659	 27C	JUMPDEST		 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 0: 0x55C
1660	 27D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1661	 27E	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x25EFFDC0115000D01AA0000008600000095018000B4000402A0000001C40000
1662	 27F	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x25EFFDC0115000D01AA0000008600000095018000B4000402A0000001C40000
- stack 0: 0xE0
1663	 281	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x25EFFDC
1664	 282	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x25EFFDC
- stack 0: 0xFFFF
1665	 285	AND		 	 
- stack 1: 0x55C
- stack 0: 0xFFDC
1666	 286	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0xFFDC
- stack 0: 0x1
1667	 288	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
1668	 289	ADD		 	 
- stack 0: 0x538
1669	 28A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x538
- stack 0: 0xFFFFFFFF
1670	 28F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x538
1671	 290	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1672	 291	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x860000009501AC00B4000401C400000184FF0100F6FFF001E3014C02250001
1673	 292	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x860000009501AC00B4000401C400000184FF0100F6FFF001E3014C02250001
- stack 0: 0xF0
1674	 294	SHR		 	 
- stack 1: 0x538
- stack 0: 0x86
1675	 295	JUMP		 	 
- stack 0: 0x538
1676	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x538
1677	 87	DUP1		 	 
- stack 1: 0x538
- stack 0: 0x538
1678	 88	PUSH2	0020	 	 
- stack 2: 0x538
- stack 1: 0x538
- stack 0: 0x20
1679	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x538
1680	 8C	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1681	 8E	ADD		 	 
- stack 0: 0x53C
1682	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1683	 90	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x9501AC00B4000401C400000184FF0100F6FFF001E3014C0225000102440002
1684	 91	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x9501AC00B4000401C400000184FF0100F6FFF001E3014C0225000102440002
- stack 0: 0xF0
1685	 93	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x95
1686	 94	JUMP		 	 
- stack 0: 0x53C
1687	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x53C
1688	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1689	 97	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x9501AC00B4000401C400000184FF0100F6FFF001E3014C0225000102440002
1690	 98	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0x9501AC00B4000401C400000184FF0100F6FFF001E3014C0225000102440002
- stack 0: 0xE0
1691	 9A	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x9501AC
1692	 9B	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0x9501AC
- stack 0: 0xFFFF
1693	 9E	AND		 	 
- stack 1: 0x53C
- stack 0: 0x1AC
1694	 9F	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0x1AC
- stack 0: 0x1
1695	 A1	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0x1AC
1696	 A2	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0x1AC
- stack 0: 0x20
1697	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x53C
- stack 1: 0x1AC
- stack 0: 0x538
1698	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x53C
- stack 0: 0x6E4
1699	 A7	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0x6E4
- stack 0: 0x20
1700	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
1701	 AB	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1702	 AD	ADD		 	 
- stack 0: 0x540
1703	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1704	 AF	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xB4000401C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC
1705	 B0	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0xB4000401C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC
- stack 0: 0xF0
1706	 B2	SHR		 	 
- stack 1: 0x540
- stack 0: 0xB4
1707	 B3	JUMP		 	 
- stack 0: 0x540
1708	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x540
1709	 B5	PUSH2	0020	 	 
- stack 1: 0x540
- stack 0: 0x20
1710	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x540
- stack 0: 0x6E4
1711	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x540
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFF
1712	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x540
- stack 0: 0x6E4
1713	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x540
- stack 1: 0x6E4
- stack 0: 0x540
1714	 C0	MLOAD		 	 
- stack 2: 0x540
- stack 1: 0x6E4
- stack 0: 0xB4000401C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC
1715	 C1	PUSH1	E0	 	 
- stack 3: 0x540
- stack 2: 0x6E4
- stack 1: 0xB4000401C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC
- stack 0: 0xE0
1716	 C3	SHR		 	 
- stack 2: 0x540
- stack 1: 0x6E4
- stack 0: 0xB40004
1717	 C4	PUSH2	FFFF	 	 
- stack 3: 0x540
- stack 2: 0x6E4
- stack 1: 0xB40004
- stack 0: 0xFFFF
1718	 C7	AND		 	 
- stack 2: 0x540
- stack 1: 0x6E4
- stack 0: 0x4
1719	 C8	PUSH1	01	 	 
- stack 3: 0x540
- stack 2: 0x6E4
- stack 1: 0x4
- stack 0: 0x1
1720	 CA	SIGNEXTEND		 	 
- stack 2: 0x540
- stack 1: 0x6E4
- stack 0: 0x4
1721	 CB	ADD		 	 
- stack 1: 0x540
- stack 0: 0x6E8
1722	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x540
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFF
1723	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x540
- stack 0: 0x6E8
1724	 D2	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xFF00FF0F00FF00F000000000000000000000000000000000000000000000000
1725	 D3	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0xFF00FF0F00FF00F000000000000000000000000000000000000000000000000
- stack 0: 0xE0
1726	 D5	SHR		 	 
- stack 1: 0x540
- stack 0: 0xFF00FF0
1727	 D6	PUSH2	0060	 	 
- stack 2: 0x540
- stack 1: 0xFF00FF0
- stack 0: 0x60
1728	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x540
1729	 DA	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1730	 DC	ADD		 	 
- stack 0: 0x544
1731	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1732	 DE	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x1C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC0115000D
1733	 DF	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x1C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC0115000D
- stack 0: 0xF0
1734	 E1	SHR		 	 
- stack 1: 0x544
- stack 0: 0x1C4
1735	 E2	JUMP		 	 
- stack 0: 0x544
1736	 1C4	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x544
1737	 1C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1738	 1C6	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x1C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC0115000D
1739	 1C7	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x1C400000184FF0100F6FFF001E3014C0225000102440002025EFFDC0115000D
- stack 0: 0xE0
1740	 1C9	SHR		 	 
- stack 1: 0x544
- stack 0: 0x1C40000
1741	 1CA	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x1C40000
- stack 0: 0xFFFF
1742	 1CD	AND		 	 
- stack 1: 0x544
- stack 0: 0x0
1743	 1CE	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x1
1744	 1D0	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x0
1745	 1D1	PUSH2	0060	 	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x60
1746	 1D4	MLOAD		 	  ;; # read from x3
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0xFF00FF0
1747	 1D5	ADD		 	  ;; # ADDI 3
- stack 1: 0x544
- stack 0: 0xFF00FF0
1748	 1D6	PUSH2	00C0	 	 
- stack 2: 0x544
- stack 1: 0xFF00FF0
- stack 0: 0xC0
1749	 1D9	MSTORE		 	  ;; # store to x6
- stack 0: 0x544
1750	 1DA	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1751	 1DC	ADD		 	 
- stack 0: 0x548
1752	 1DD	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1753	 1DE	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x184FF0100F6FFF001E3014C0225000102440002025EFFDC0115000D01AA0000
1754	 1DF	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x184FF0100F6FFF001E3014C0225000102440002025EFFDC0115000D01AA0000
- stack 0: 0xF0
1755	 1E1	SHR		 	 
- stack 1: 0x548
- stack 0: 0x184
1756	 1E2	JUMP		 	 
- stack 0: 0x548
1757	 184	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x548
1758	 185	PUSH4	0ff01000	 	 
- stack 1: 0x548
- stack 0: 0xFF01000
1759	 18A	PUSH2	03A0	 	 
- stack 2: 0x548
- stack 1: 0xFF01000
- stack 0: 0x3A0
1760	 18D	MSTORE		 	  ;; # store to x29
- stack 0: 0x548
1761	 18E	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1762	 190	ADD		 	 
- stack 0: 0x54C
1763	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1764	 192	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xF6FFF001E3014C0225000102440002025EFFDC0115000D01AA000000860000
1765	 193	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xF6FFF001E3014C0225000102440002025EFFDC0115000D01AA000000860000
- stack 0: 0xF0
1766	 195	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xF6
1767	 196	JUMP		 	 
- stack 0: 0x54C
1768	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x54C
1769	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1770	 F8	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xF6FFF001E3014C0225000102440002025EFFDC0115000D01AA000000860000
1771	 F9	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0xF6FFF001E3014C0225000102440002025EFFDC0115000D01AA000000860000
- stack 0: 0xE0
1772	 FB	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xF6FFF0
1773	 FC	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0xF6FFF0
- stack 0: 0xFFFF
1774	 FF	AND		 	 
- stack 1: 0x54C
- stack 0: 0xFFF0
1775	 100	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0xFFF0
- stack 0: 0x1
1776	 102	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1777	 103	PUSH2	03A0	 	 
- stack 2: 0x54C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
1778	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x54C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
1779	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x54C
- stack 0: 0xFF00FF0
1780	 108	PUSH2	03A0	 	 
- stack 2: 0x54C
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
1781	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x54C
1782	 10C	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1783	 10E	ADD		 	 
- stack 0: 0x550
1784	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1785	 110	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x1E3014C0225000102440002025EFFDC0115000D01AA00000086000000950180
1786	 111	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x1E3014C0225000102440002025EFFDC0115000D01AA00000086000000950180
- stack 0: 0xF0
1787	 113	SHR		 	 
- stack 1: 0x550
- stack 0: 0x1E3
1788	 114	JUMP		 	 
- stack 0: 0x550
1789	 1E3	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,14c(ignore imm)
- stack 0: 0x550
1790	 1E4	PUSH2	00C0	 	 
- stack 1: 0x550
- stack 0: 0xC0
1791	 1E7	MLOAD		 	  ;; # read from x6
- stack 1: 0x550
- stack 0: 0xFF00FF0
1792	 1E8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x550
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
1793	 1ED	AND		 	  ;; # mask to 32 bits
- stack 1: 0x550
- stack 0: 0xFF00FF0
1794	 1EE	PUSH2	03A0	 	 
- stack 2: 0x550
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
1795	 1F1	MLOAD		 	  ;; # read from x29
- stack 2: 0x550
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
1796	 1F2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x550
- stack 2: 0xFF00FF0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
1797	 1F7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x550
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
1798	 1F8	SUB		 	 
- stack 1: 0x550
- stack 0: 0x0
1799	 1F9	PUSH2	0201	 ;; _neq_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x201
1800	 1FC	JUMPI		 	 
- stack 0: 0x550
1801	 1FD	PUSH2	021B	 ;; _neq_after_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 1: 0x550
- stack 0: 0x21B
1802	 200	JUMP		 	 
- stack 0: 0x550
1803	 21B	JUMPDEST		 ;; _neq_after_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 0: 0x550
1804	 21C	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1805	 21E	ADD		 	 
- stack 0: 0x554
1806	 21F	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1807	 220	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x225000102440002025EFFDC0115000D01AA0000008600000095018000B40004
1808	 221	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x225000102440002025EFFDC0115000D01AA0000008600000095018000B40004
- stack 0: 0xF0
1809	 223	SHR		 	 
- stack 1: 0x554
- stack 0: 0x225
1810	 224	JUMP		 	 
- stack 0: 0x554
1811	 225	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x554
1812	 226	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1813	 227	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x225000102440002025EFFDC0115000D01AA0000008600000095018000B40004
1814	 228	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x225000102440002025EFFDC0115000D01AA0000008600000095018000B40004
- stack 0: 0xE0
1815	 22A	SHR		 	 
- stack 1: 0x554
- stack 0: 0x2250001
1816	 22B	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x2250001
- stack 0: 0xFFFF
1817	 22E	AND		 	 
- stack 1: 0x554
- stack 0: 0x1
1818	 22F	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x1
1819	 231	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x1
1820	 232	PUSH2	0080	 	 
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x80
1821	 235	MLOAD		 	  ;; # read from x4
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x1
1822	 236	ADD		 	  ;; # ADDI 4
- stack 1: 0x554
- stack 0: 0x2
1823	 237	PUSH2	0080	 	 
- stack 2: 0x554
- stack 1: 0x2
- stack 0: 0x80
1824	 23A	MSTORE		 	  ;; # store to x4
- stack 0: 0x554
1825	 23B	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1826	 23D	ADD		 	 
- stack 0: 0x558
1827	 23E	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1828	 23F	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x2440002025EFFDC0115000D01AA0000008600000095018000B4000402A00000
1829	 240	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x2440002025EFFDC0115000D01AA0000008600000095018000B4000402A00000
- stack 0: 0xF0
1830	 242	SHR		 	 
- stack 1: 0x558
- stack 0: 0x244
1831	 243	JUMP		 	 
- stack 0: 0x558
1832	 244	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x558
1833	 245	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1834	 246	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x2440002025EFFDC0115000D01AA0000008600000095018000B4000402A00000
1835	 247	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x2440002025EFFDC0115000D01AA0000008600000095018000B4000402A00000
- stack 0: 0xE0
1836	 249	SHR		 	 
- stack 1: 0x558
- stack 0: 0x2440002
1837	 24A	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x2440002
- stack 0: 0xFFFF
1838	 24D	AND		 	 
- stack 1: 0x558
- stack 0: 0x2
1839	 24E	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0x1
1840	 250	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x2
1841	 251	PUSH2	00A0	 	 
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0xA0
1842	 254	MSTORE		 	  ;; # store to x5
- stack 0: 0x558
1843	 255	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1844	 257	ADD		 	 
- stack 0: 0x55C
1845	 258	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1846	 259	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x25EFFDC0115000D01AA0000008600000095018000B4000402A0000001C40000
1847	 25A	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x25EFFDC0115000D01AA0000008600000095018000B4000402A0000001C40000
- stack 0: 0xF0
1848	 25C	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x25E
1849	 25D	JUMP		 	 
- stack 0: 0x55C
1850	 25E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x55C
1851	 25F	PUSH2	0080	 	 
- stack 1: 0x55C
- stack 0: 0x80
1852	 262	MLOAD		 	  ;; # read from x4
- stack 1: 0x55C
- stack 0: 0x2
1853	 263	PUSH4	FFFFFFFF	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1854	 268	AND		 	  ;; # mask to 32 bits
- stack 1: 0x55C
- stack 0: 0x2
1855	 269	PUSH2	00A0	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0xA0
1856	 26C	MLOAD		 	  ;; # read from x5
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0x2
1857	 26D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x55C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1858	 272	AND		 	  ;; # mask to 32 bits
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0x2
1859	 273	SUB		 	 
- stack 1: 0x55C
- stack 0: 0x0
1860	 274	PUSH2	027C	 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0x27C
1861	 277	JUMPI		 	 
- stack 0: 0x55C
1862	 278	PUSH2	0296	 ;; _neq_after_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 1: 0x55C
- stack 0: 0x296
1863	 27B	JUMP		 	 
- stack 0: 0x55C
1864	 296	JUMPDEST		 ;; _neq_after_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 0: 0x55C
1865	 297	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1866	 299	ADD		 	 
- stack 0: 0x560
1867	 29A	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1868	 29B	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x115000D01AA0000008600000095018000B4000402A0000001C40000019700FF
1869	 29C	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x115000D01AA0000008600000095018000B4000402A0000001C40000019700FF
- stack 0: 0xF0
1870	 29E	SHR		 	 
- stack 1: 0x560
- stack 0: 0x115
1871	 29F	JUMP		 	 
- stack 0: 0x560
1872	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x560
1873	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1874	 117	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x115000D01AA0000008600000095018000B4000402A0000001C40000019700FF
1875	 118	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x115000D01AA0000008600000095018000B4000402A0000001C40000019700FF
- stack 0: 0xE0
1876	 11A	SHR		 	 
- stack 1: 0x560
- stack 0: 0x115000D
1877	 11B	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x115000D
- stack 0: 0xFFFF
1878	 11E	AND		 	 
- stack 1: 0x560
- stack 0: 0xD
1879	 11F	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0xD
- stack 0: 0x1
1880	 121	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0xD
1881	 122	PUSH2	0380	 	 
- stack 2: 0x560
- stack 1: 0xD
- stack 0: 0x380
1882	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x560
1883	 126	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1884	 128	ADD		 	 
- stack 0: 0x564
1885	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1886	 12A	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x1AA0000008600000095018000B4000402A0000001C40000019700FF00F6000F
1887	 12B	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x1AA0000008600000095018000B4000402A0000001C40000019700FF00F6000F
- stack 0: 0xF0
1888	 12D	SHR		 	 
- stack 1: 0x564
- stack 0: 0x1AA
1889	 12E	JUMP		 	 
- stack 0: 0x564
1890	 1AA	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x564
1891	 1AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
1892	 1AC	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x1AA0000008600000095018000B4000402A0000001C40000019700FF00F6000F
1893	 1AD	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x1AA0000008600000095018000B4000402A0000001C40000019700FF00F6000F
- stack 0: 0xE0
1894	 1AF	SHR		 	 
- stack 1: 0x564
- stack 0: 0x1AA0000
1895	 1B0	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x1AA0000
- stack 0: 0xFFFF
1896	 1B3	AND		 	 
- stack 1: 0x564
- stack 0: 0x0
1897	 1B4	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x1
1898	 1B6	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0x0
1899	 1B7	PUSH2	0080	 	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x80
1900	 1BA	MSTORE		 	  ;; # store to x4
- stack 0: 0x564
1901	 1BB	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1902	 1BD	ADD		 	 
- stack 0: 0x568
1903	 1BE	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1904	 1BF	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x8600000095018000B4000402A0000001C40000019700FF00F6000F01E30118
1905	 1C0	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x8600000095018000B4000402A0000001C40000019700FF00F6000F01E30118
- stack 0: 0xF0
1906	 1C2	SHR		 	 
- stack 1: 0x568
- stack 0: 0x86
1907	 1C3	JUMP		 	 
- stack 0: 0x568
1908	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x568
1909	 87	DUP1		 	 
- stack 1: 0x568
- stack 0: 0x568
1910	 88	PUSH2	0020	 	 
- stack 2: 0x568
- stack 1: 0x568
- stack 0: 0x20
1911	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x568
1912	 8C	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1913	 8E	ADD		 	 
- stack 0: 0x56C
1914	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1915	 90	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x95018000B4000402A0000001C40000019700FF00F6000F01E3011802250001
1916	 91	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x95018000B4000402A0000001C40000019700FF00F6000F01E3011802250001
- stack 0: 0xF0
1917	 93	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x95
1918	 94	JUMP		 	 
- stack 0: 0x56C
1919	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x56C
1920	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
1921	 97	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x95018000B4000402A0000001C40000019700FF00F6000F01E3011802250001
1922	 98	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x95018000B4000402A0000001C40000019700FF00F6000F01E3011802250001
- stack 0: 0xE0
1923	 9A	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x950180
1924	 9B	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x950180
- stack 0: 0xFFFF
1925	 9E	AND		 	 
- stack 1: 0x56C
- stack 0: 0x180
1926	 9F	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x180
- stack 0: 0x1
1927	 A1	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x180
1928	 A2	PUSH2	0020	 	 
- stack 2: 0x56C
- stack 1: 0x180
- stack 0: 0x20
1929	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x56C
- stack 1: 0x180
- stack 0: 0x568
1930	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x56C
- stack 0: 0x6E8
1931	 A7	PUSH2	0020	 	 
- stack 2: 0x56C
- stack 1: 0x6E8
- stack 0: 0x20
1932	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x56C
1933	 AB	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1934	 AD	ADD		 	 
- stack 0: 0x570
1935	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1936	 AF	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0xB4000402A0000001C40000019700FF00F6000F01E301180225000102440002
1937	 B0	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0xB4000402A0000001C40000019700FF00F6000F01E301180225000102440002
- stack 0: 0xF0
1938	 B2	SHR		 	 
- stack 1: 0x570
- stack 0: 0xB4
1939	 B3	JUMP		 	 
- stack 0: 0x570
1940	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x570
1941	 B5	PUSH2	0020	 	 
- stack 1: 0x570
- stack 0: 0x20
1942	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x570
- stack 0: 0x6E8
1943	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x570
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFF
1944	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x570
- stack 0: 0x6E8
1945	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x570
- stack 1: 0x6E8
- stack 0: 0x570
1946	 C0	MLOAD		 	 
- stack 2: 0x570
- stack 1: 0x6E8
- stack 0: 0xB4000402A0000001C40000019700FF00F6000F01E301180225000102440002
1947	 C1	PUSH1	E0	 	 
- stack 3: 0x570
- stack 2: 0x6E8
- stack 1: 0xB4000402A0000001C40000019700FF00F6000F01E301180225000102440002
- stack 0: 0xE0
1948	 C3	SHR		 	 
- stack 2: 0x570
- stack 1: 0x6E8
- stack 0: 0xB40004
1949	 C4	PUSH2	FFFF	 	 
- stack 3: 0x570
- stack 2: 0x6E8
- stack 1: 0xB40004
- stack 0: 0xFFFF
1950	 C7	AND		 	 
- stack 2: 0x570
- stack 1: 0x6E8
- stack 0: 0x4
1951	 C8	PUSH1	01	 	 
- stack 3: 0x570
- stack 2: 0x6E8
- stack 1: 0x4
- stack 0: 0x1
1952	 CA	SIGNEXTEND		 	 
- stack 2: 0x570
- stack 1: 0x6E8
- stack 0: 0x4
1953	 CB	ADD		 	 
- stack 1: 0x570
- stack 0: 0x6EC
1954	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x570
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFF
1955	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x570
- stack 0: 0x6EC
1956	 D2	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0xF00FF00F00000000000000000000000000000000000000000000000000000000
1957	 D3	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0xF00FF00F00000000000000000000000000000000000000000000000000000000
- stack 0: 0xE0
1958	 D5	SHR		 	 
- stack 1: 0x570
- stack 0: 0xF00FF00F
1959	 D6	PUSH2	0060	 	 
- stack 2: 0x570
- stack 1: 0xF00FF00F
- stack 0: 0x60
1960	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x570
1961	 DA	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1962	 DC	ADD		 	 
- stack 0: 0x574
1963	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1964	 DE	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x2A0000001C40000019700FF00F6000F01E301180225000102440002025EFFD8
1965	 DF	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x2A0000001C40000019700FF00F6000F01E301180225000102440002025EFFD8
- stack 0: 0xF0
1966	 E1	SHR		 	 
- stack 1: 0x574
- stack 0: 0x2A0
1967	 E2	JUMP		 	 
- stack 0: 0x574
1968	 2A0	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x574
1969	 2A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1970	 2A2	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x2A0000001C40000019700FF00F6000F01E301180225000102440002025EFFD8
1971	 2A3	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x2A0000001C40000019700FF00F6000F01E301180225000102440002025EFFD8
- stack 0: 0xE0
1972	 2A5	SHR		 	 
- stack 1: 0x574
- stack 0: 0x2A00000
1973	 2A6	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x2A00000
- stack 0: 0xFFFF
1974	 2A9	AND		 	 
- stack 1: 0x574
- stack 0: 0x0
1975	 2AA	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x1
1976	 2AC	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x0
1977	 2AD	POP		 	 
- stack 0: 0x574
1978	 2AE	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1979	 2B0	ADD		 	 
- stack 0: 0x578
1980	 2B1	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1981	 2B2	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1C40000019700FF00F6000F01E301180225000102440002025EFFD80115000E
1982	 2B3	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1C40000019700FF00F6000F01E301180225000102440002025EFFD80115000E
- stack 0: 0xF0
1983	 2B5	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1C4
1984	 2B6	JUMP		 	 
- stack 0: 0x578
1985	 1C4	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x578
1986	 1C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
1987	 1C6	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1C40000019700FF00F6000F01E301180225000102440002025EFFD80115000E
1988	 1C7	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x1C40000019700FF00F6000F01E301180225000102440002025EFFD80115000E
- stack 0: 0xE0
1989	 1C9	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1C40000
1990	 1CA	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x1C40000
- stack 0: 0xFFFF
1991	 1CD	AND		 	 
- stack 1: 0x578
- stack 0: 0x0
1992	 1CE	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x1
1993	 1D0	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x0
1994	 1D1	PUSH2	0060	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x60
1995	 1D4	MLOAD		 	  ;; # read from x3
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0xF00FF00F
1996	 1D5	ADD		 	  ;; # ADDI 3
- stack 1: 0x578
- stack 0: 0xF00FF00F
1997	 1D6	PUSH2	00C0	 	 
- stack 2: 0x578
- stack 1: 0xF00FF00F
- stack 0: 0xC0
1998	 1D9	MSTORE		 	  ;; # store to x6
- stack 0: 0x578
1999	 1DA	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2000	 1DC	ADD		 	 
- stack 0: 0x57C
2001	 1DD	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2002	 1DE	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x19700FF00F6000F01E301180225000102440002025EFFD80115000E01AA0000
2003	 1DF	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x19700FF00F6000F01E301180225000102440002025EFFD80115000E01AA0000
- stack 0: 0xF0
2004	 1E1	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x197
2005	 1E2	JUMP		 	 
- stack 0: 0x57C
2006	 197	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x57C
2007	 198	PUSH4	f00ff000	 	 
- stack 1: 0x57C
- stack 0: 0xF00FF000
2008	 19D	PUSH2	03A0	 	 
- stack 2: 0x57C
- stack 1: 0xF00FF000
- stack 0: 0x3A0
2009	 1A0	MSTORE		 	  ;; # store to x29
- stack 0: 0x57C
2010	 1A1	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2011	 1A3	ADD		 	 
- stack 0: 0x580
2012	 1A4	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2013	 1A5	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xF6000F01E301180225000102440002025EFFD80115000E01AA000000860000
2014	 1A6	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xF6000F01E301180225000102440002025EFFD80115000E01AA000000860000
- stack 0: 0xF0
2015	 1A8	SHR		 	 
- stack 1: 0x580
- stack 0: 0xF6
2016	 1A9	JUMP		 	 
- stack 0: 0x580
2017	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x580
2018	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2019	 F8	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xF6000F01E301180225000102440002025EFFD80115000E01AA000000860000
2020	 F9	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0xF6000F01E301180225000102440002025EFFD80115000E01AA000000860000
- stack 0: 0xE0
2021	 FB	SHR		 	 
- stack 1: 0x580
- stack 0: 0xF6000F
2022	 FC	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0xF6000F
- stack 0: 0xFFFF
2023	 FF	AND		 	 
- stack 1: 0x580
- stack 0: 0xF
2024	 100	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0xF
- stack 0: 0x1
2025	 102	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xF
2026	 103	PUSH2	03A0	 	 
- stack 2: 0x580
- stack 1: 0xF
- stack 0: 0x3A0
2027	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x580
- stack 1: 0xF
- stack 0: 0xF00FF000
2028	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x580
- stack 0: 0xF00FF00F
2029	 108	PUSH2	03A0	 	 
- stack 2: 0x580
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
2030	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x580
2031	 10C	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2032	 10E	ADD		 	 
- stack 0: 0x584
2033	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2034	 110	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1E301180225000102440002025EFFD80115000E01AA00000086000000950144
2035	 111	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x1E301180225000102440002025EFFD80115000E01AA00000086000000950144
- stack 0: 0xF0
2036	 113	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1E3
2037	 114	JUMP		 	 
- stack 0: 0x584
2038	 1E3	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,14c(ignore imm)
- stack 0: 0x584
2039	 1E4	PUSH2	00C0	 	 
- stack 1: 0x584
- stack 0: 0xC0
2040	 1E7	MLOAD		 	  ;; # read from x6
- stack 1: 0x584
- stack 0: 0xF00FF00F
2041	 1E8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x584
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
2042	 1ED	AND		 	  ;; # mask to 32 bits
- stack 1: 0x584
- stack 0: 0xF00FF00F
2043	 1EE	PUSH2	03A0	 	 
- stack 2: 0x584
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
2044	 1F1	MLOAD		 	  ;; # read from x29
- stack 2: 0x584
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
2045	 1F2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x584
- stack 2: 0xF00FF00F
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
2046	 1F7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x584
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
2047	 1F8	SUB		 	 
- stack 1: 0x584
- stack 0: 0x0
2048	 1F9	PUSH2	0201	 ;; _neq_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x201
2049	 1FC	JUMPI		 	 
- stack 0: 0x584
2050	 1FD	PUSH2	021B	 ;; _neq_after_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 1: 0x584
- stack 0: 0x21B
2051	 200	JUMP		 	 
- stack 0: 0x584
2052	 21B	JUMPDEST		 ;; _neq_after_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 0: 0x584
2053	 21C	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2054	 21E	ADD		 	 
- stack 0: 0x588
2055	 21F	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2056	 220	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x225000102440002025EFFD80115000E01AA0000008600000095014400B40004
2057	 221	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x225000102440002025EFFD80115000E01AA0000008600000095014400B40004
- stack 0: 0xF0
2058	 223	SHR		 	 
- stack 1: 0x588
- stack 0: 0x225
2059	 224	JUMP		 	 
- stack 0: 0x588
2060	 225	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x588
2061	 226	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2062	 227	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x225000102440002025EFFD80115000E01AA0000008600000095014400B40004
2063	 228	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x225000102440002025EFFD80115000E01AA0000008600000095014400B40004
- stack 0: 0xE0
2064	 22A	SHR		 	 
- stack 1: 0x588
- stack 0: 0x2250001
2065	 22B	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x2250001
- stack 0: 0xFFFF
2066	 22E	AND		 	 
- stack 1: 0x588
- stack 0: 0x1
2067	 22F	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x1
- stack 0: 0x1
2068	 231	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x1
2069	 232	PUSH2	0080	 	 
- stack 2: 0x588
- stack 1: 0x1
- stack 0: 0x80
2070	 235	MLOAD		 	  ;; # read from x4
- stack 2: 0x588
- stack 1: 0x1
- stack 0: 0x0
2071	 236	ADD		 	  ;; # ADDI 4
- stack 1: 0x588
- stack 0: 0x1
2072	 237	PUSH2	0080	 	 
- stack 2: 0x588
- stack 1: 0x1
- stack 0: 0x80
2073	 23A	MSTORE		 	  ;; # store to x4
- stack 0: 0x588
2074	 23B	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2075	 23D	ADD		 	 
- stack 0: 0x58C
2076	 23E	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2077	 23F	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x2440002025EFFD80115000E01AA0000008600000095014400B4000402A00000
2078	 240	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x2440002025EFFD80115000E01AA0000008600000095014400B4000402A00000
- stack 0: 0xF0
2079	 242	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x244
2080	 243	JUMP		 	 
- stack 0: 0x58C
2081	 244	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x58C
2082	 245	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2083	 246	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x2440002025EFFD80115000E01AA0000008600000095014400B4000402A00000
2084	 247	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x2440002025EFFD80115000E01AA0000008600000095014400B4000402A00000
- stack 0: 0xE0
2085	 249	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x2440002
2086	 24A	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x2440002
- stack 0: 0xFFFF
2087	 24D	AND		 	 
- stack 1: 0x58C
- stack 0: 0x2
2088	 24E	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0x1
2089	 250	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x2
2090	 251	PUSH2	00A0	 	 
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0xA0
2091	 254	MSTORE		 	  ;; # store to x5
- stack 0: 0x58C
2092	 255	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2093	 257	ADD		 	 
- stack 0: 0x590
2094	 258	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2095	 259	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x25EFFD80115000E01AA0000008600000095014400B4000402A0000002A00000
2096	 25A	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x25EFFD80115000E01AA0000008600000095014400B4000402A0000002A00000
- stack 0: 0xF0
2097	 25C	SHR		 	 
- stack 1: 0x590
- stack 0: 0x25E
2098	 25D	JUMP		 	 
- stack 0: 0x590
2099	 25E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x590
2100	 25F	PUSH2	0080	 	 
- stack 1: 0x590
- stack 0: 0x80
2101	 262	MLOAD		 	  ;; # read from x4
- stack 1: 0x590
- stack 0: 0x1
2102	 263	PUSH4	FFFFFFFF	 	 
- stack 2: 0x590
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2103	 268	AND		 	  ;; # mask to 32 bits
- stack 1: 0x590
- stack 0: 0x1
2104	 269	PUSH2	00A0	 	 
- stack 2: 0x590
- stack 1: 0x1
- stack 0: 0xA0
2105	 26C	MLOAD		 	  ;; # read from x5
- stack 2: 0x590
- stack 1: 0x1
- stack 0: 0x2
2106	 26D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x590
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2107	 272	AND		 	  ;; # mask to 32 bits
- stack 2: 0x590
- stack 1: 0x1
- stack 0: 0x2
2108	 273	SUB		 	 
- stack 1: 0x590
- stack 0: 0x1
2109	 274	PUSH2	027C	 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 2: 0x590
- stack 1: 0x1
- stack 0: 0x27C
2110	 277	JUMPI		 	 
- stack 0: 0x590
2111	 27C	JUMPDEST		 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 0: 0x590
2112	 27D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2113	 27E	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x25EFFD80115000E01AA0000008600000095014400B4000402A0000002A00000
2114	 27F	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x25EFFD80115000E01AA0000008600000095014400B4000402A0000002A00000
- stack 0: 0xE0
2115	 281	SHR		 	 
- stack 1: 0x590
- stack 0: 0x25EFFD8
2116	 282	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x25EFFD8
- stack 0: 0xFFFF
2117	 285	AND		 	 
- stack 1: 0x590
- stack 0: 0xFFD8
2118	 286	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0xFFD8
- stack 0: 0x1
2119	 288	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
2120	 289	ADD		 	 
- stack 0: 0x568
2121	 28A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x568
- stack 0: 0xFFFFFFFF
2122	 28F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x568
2123	 290	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2124	 291	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x8600000095018000B4000402A0000001C40000019700FF00F6000F01E30118
2125	 292	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x8600000095018000B4000402A0000001C40000019700FF00F6000F01E30118
- stack 0: 0xF0
2126	 294	SHR		 	 
- stack 1: 0x568
- stack 0: 0x86
2127	 295	JUMP		 	 
- stack 0: 0x568
2128	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x568
2129	 87	DUP1		 	 
- stack 1: 0x568
- stack 0: 0x568
2130	 88	PUSH2	0020	 	 
- stack 2: 0x568
- stack 1: 0x568
- stack 0: 0x20
2131	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x568
2132	 8C	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2133	 8E	ADD		 	 
- stack 0: 0x56C
2134	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2135	 90	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x95018000B4000402A0000001C40000019700FF00F6000F01E3011802250001
2136	 91	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x95018000B4000402A0000001C40000019700FF00F6000F01E3011802250001
- stack 0: 0xF0
2137	 93	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x95
2138	 94	JUMP		 	 
- stack 0: 0x56C
2139	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x56C
2140	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
2141	 97	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x95018000B4000402A0000001C40000019700FF00F6000F01E3011802250001
2142	 98	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x95018000B4000402A0000001C40000019700FF00F6000F01E3011802250001
- stack 0: 0xE0
2143	 9A	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x950180
2144	 9B	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x950180
- stack 0: 0xFFFF
2145	 9E	AND		 	 
- stack 1: 0x56C
- stack 0: 0x180
2146	 9F	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x180
- stack 0: 0x1
2147	 A1	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x180
2148	 A2	PUSH2	0020	 	 
- stack 2: 0x56C
- stack 1: 0x180
- stack 0: 0x20
2149	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x56C
- stack 1: 0x180
- stack 0: 0x568
2150	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x56C
- stack 0: 0x6E8
2151	 A7	PUSH2	0020	 	 
- stack 2: 0x56C
- stack 1: 0x6E8
- stack 0: 0x20
2152	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x56C
2153	 AB	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2154	 AD	ADD		 	 
- stack 0: 0x570
2155	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2156	 AF	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0xB4000402A0000001C40000019700FF00F6000F01E301180225000102440002
2157	 B0	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0xB4000402A0000001C40000019700FF00F6000F01E301180225000102440002
- stack 0: 0xF0
2158	 B2	SHR		 	 
- stack 1: 0x570
- stack 0: 0xB4
2159	 B3	JUMP		 	 
- stack 0: 0x570
2160	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x570
2161	 B5	PUSH2	0020	 	 
- stack 1: 0x570
- stack 0: 0x20
2162	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x570
- stack 0: 0x6E8
2163	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x570
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFF
2164	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x570
- stack 0: 0x6E8
2165	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x570
- stack 1: 0x6E8
- stack 0: 0x570
2166	 C0	MLOAD		 	 
- stack 2: 0x570
- stack 1: 0x6E8
- stack 0: 0xB4000402A0000001C40000019700FF00F6000F01E301180225000102440002
2167	 C1	PUSH1	E0	 	 
- stack 3: 0x570
- stack 2: 0x6E8
- stack 1: 0xB4000402A0000001C40000019700FF00F6000F01E301180225000102440002
- stack 0: 0xE0
2168	 C3	SHR		 	 
- stack 2: 0x570
- stack 1: 0x6E8
- stack 0: 0xB40004
2169	 C4	PUSH2	FFFF	 	 
- stack 3: 0x570
- stack 2: 0x6E8
- stack 1: 0xB40004
- stack 0: 0xFFFF
2170	 C7	AND		 	 
- stack 2: 0x570
- stack 1: 0x6E8
- stack 0: 0x4
2171	 C8	PUSH1	01	 	 
- stack 3: 0x570
- stack 2: 0x6E8
- stack 1: 0x4
- stack 0: 0x1
2172	 CA	SIGNEXTEND		 	 
- stack 2: 0x570
- stack 1: 0x6E8
- stack 0: 0x4
2173	 CB	ADD		 	 
- stack 1: 0x570
- stack 0: 0x6EC
2174	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x570
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFF
2175	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x570
- stack 0: 0x6EC
2176	 D2	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0xF00FF00F00000000000000000000000000000000000000000000000000000000
2177	 D3	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0xF00FF00F00000000000000000000000000000000000000000000000000000000
- stack 0: 0xE0
2178	 D5	SHR		 	 
- stack 1: 0x570
- stack 0: 0xF00FF00F
2179	 D6	PUSH2	0060	 	 
- stack 2: 0x570
- stack 1: 0xF00FF00F
- stack 0: 0x60
2180	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x570
2181	 DA	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2182	 DC	ADD		 	 
- stack 0: 0x574
2183	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2184	 DE	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x2A0000001C40000019700FF00F6000F01E301180225000102440002025EFFD8
2185	 DF	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x2A0000001C40000019700FF00F6000F01E301180225000102440002025EFFD8
- stack 0: 0xF0
2186	 E1	SHR		 	 
- stack 1: 0x574
- stack 0: 0x2A0
2187	 E2	JUMP		 	 
- stack 0: 0x574
2188	 2A0	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x574
2189	 2A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
2190	 2A2	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x2A0000001C40000019700FF00F6000F01E301180225000102440002025EFFD8
2191	 2A3	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x2A0000001C40000019700FF00F6000F01E301180225000102440002025EFFD8
- stack 0: 0xE0
2192	 2A5	SHR		 	 
- stack 1: 0x574
- stack 0: 0x2A00000
2193	 2A6	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x2A00000
- stack 0: 0xFFFF
2194	 2A9	AND		 	 
- stack 1: 0x574
- stack 0: 0x0
2195	 2AA	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x1
2196	 2AC	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x0
2197	 2AD	POP		 	 
- stack 0: 0x574
2198	 2AE	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2199	 2B0	ADD		 	 
- stack 0: 0x578
2200	 2B1	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2201	 2B2	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1C40000019700FF00F6000F01E301180225000102440002025EFFD80115000E
2202	 2B3	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1C40000019700FF00F6000F01E301180225000102440002025EFFD80115000E
- stack 0: 0xF0
2203	 2B5	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1C4
2204	 2B6	JUMP		 	 
- stack 0: 0x578
2205	 1C4	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x578
2206	 1C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2207	 1C6	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1C40000019700FF00F6000F01E301180225000102440002025EFFD80115000E
2208	 1C7	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x1C40000019700FF00F6000F01E301180225000102440002025EFFD80115000E
- stack 0: 0xE0
2209	 1C9	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1C40000
2210	 1CA	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x1C40000
- stack 0: 0xFFFF
2211	 1CD	AND		 	 
- stack 1: 0x578
- stack 0: 0x0
2212	 1CE	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x1
2213	 1D0	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x0
2214	 1D1	PUSH2	0060	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x60
2215	 1D4	MLOAD		 	  ;; # read from x3
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0xF00FF00F
2216	 1D5	ADD		 	  ;; # ADDI 3
- stack 1: 0x578
- stack 0: 0xF00FF00F
2217	 1D6	PUSH2	00C0	 	 
- stack 2: 0x578
- stack 1: 0xF00FF00F
- stack 0: 0xC0
2218	 1D9	MSTORE		 	  ;; # store to x6
- stack 0: 0x578
2219	 1DA	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2220	 1DC	ADD		 	 
- stack 0: 0x57C
2221	 1DD	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2222	 1DE	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x19700FF00F6000F01E301180225000102440002025EFFD80115000E01AA0000
2223	 1DF	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x19700FF00F6000F01E301180225000102440002025EFFD80115000E01AA0000
- stack 0: 0xF0
2224	 1E1	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x197
2225	 1E2	JUMP		 	 
- stack 0: 0x57C
2226	 197	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x57C
2227	 198	PUSH4	f00ff000	 	 
- stack 1: 0x57C
- stack 0: 0xF00FF000
2228	 19D	PUSH2	03A0	 	 
- stack 2: 0x57C
- stack 1: 0xF00FF000
- stack 0: 0x3A0
2229	 1A0	MSTORE		 	  ;; # store to x29
- stack 0: 0x57C
2230	 1A1	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2231	 1A3	ADD		 	 
- stack 0: 0x580
2232	 1A4	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2233	 1A5	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xF6000F01E301180225000102440002025EFFD80115000E01AA000000860000
2234	 1A6	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xF6000F01E301180225000102440002025EFFD80115000E01AA000000860000
- stack 0: 0xF0
2235	 1A8	SHR		 	 
- stack 1: 0x580
- stack 0: 0xF6
2236	 1A9	JUMP		 	 
- stack 0: 0x580
2237	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x580
2238	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2239	 F8	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xF6000F01E301180225000102440002025EFFD80115000E01AA000000860000
2240	 F9	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0xF6000F01E301180225000102440002025EFFD80115000E01AA000000860000
- stack 0: 0xE0
2241	 FB	SHR		 	 
- stack 1: 0x580
- stack 0: 0xF6000F
2242	 FC	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0xF6000F
- stack 0: 0xFFFF
2243	 FF	AND		 	 
- stack 1: 0x580
- stack 0: 0xF
2244	 100	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0xF
- stack 0: 0x1
2245	 102	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xF
2246	 103	PUSH2	03A0	 	 
- stack 2: 0x580
- stack 1: 0xF
- stack 0: 0x3A0
2247	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x580
- stack 1: 0xF
- stack 0: 0xF00FF000
2248	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x580
- stack 0: 0xF00FF00F
2249	 108	PUSH2	03A0	 	 
- stack 2: 0x580
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
2250	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x580
2251	 10C	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2252	 10E	ADD		 	 
- stack 0: 0x584
2253	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2254	 110	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1E301180225000102440002025EFFD80115000E01AA00000086000000950144
2255	 111	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x1E301180225000102440002025EFFD80115000E01AA00000086000000950144
- stack 0: 0xF0
2256	 113	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1E3
2257	 114	JUMP		 	 
- stack 0: 0x584
2258	 1E3	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,14c(ignore imm)
- stack 0: 0x584
2259	 1E4	PUSH2	00C0	 	 
- stack 1: 0x584
- stack 0: 0xC0
2260	 1E7	MLOAD		 	  ;; # read from x6
- stack 1: 0x584
- stack 0: 0xF00FF00F
2261	 1E8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x584
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
2262	 1ED	AND		 	  ;; # mask to 32 bits
- stack 1: 0x584
- stack 0: 0xF00FF00F
2263	 1EE	PUSH2	03A0	 	 
- stack 2: 0x584
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
2264	 1F1	MLOAD		 	  ;; # read from x29
- stack 2: 0x584
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
2265	 1F2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x584
- stack 2: 0xF00FF00F
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
2266	 1F7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x584
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
2267	 1F8	SUB		 	 
- stack 1: 0x584
- stack 0: 0x0
2268	 1F9	PUSH2	0201	 ;; _neq_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x201
2269	 1FC	JUMPI		 	 
- stack 0: 0x584
2270	 1FD	PUSH2	021B	 ;; _neq_after_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 1: 0x584
- stack 0: 0x21B
2271	 200	JUMP		 	 
- stack 0: 0x584
2272	 21B	JUMPDEST		 ;; _neq_after_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 0: 0x584
2273	 21C	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2274	 21E	ADD		 	 
- stack 0: 0x588
2275	 21F	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2276	 220	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x225000102440002025EFFD80115000E01AA0000008600000095014400B40004
2277	 221	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x225000102440002025EFFD80115000E01AA0000008600000095014400B40004
- stack 0: 0xF0
2278	 223	SHR		 	 
- stack 1: 0x588
- stack 0: 0x225
2279	 224	JUMP		 	 
- stack 0: 0x588
2280	 225	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x588
2281	 226	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2282	 227	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x225000102440002025EFFD80115000E01AA0000008600000095014400B40004
2283	 228	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x225000102440002025EFFD80115000E01AA0000008600000095014400B40004
- stack 0: 0xE0
2284	 22A	SHR		 	 
- stack 1: 0x588
- stack 0: 0x2250001
2285	 22B	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x2250001
- stack 0: 0xFFFF
2286	 22E	AND		 	 
- stack 1: 0x588
- stack 0: 0x1
2287	 22F	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x1
- stack 0: 0x1
2288	 231	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x1
2289	 232	PUSH2	0080	 	 
- stack 2: 0x588
- stack 1: 0x1
- stack 0: 0x80
2290	 235	MLOAD		 	  ;; # read from x4
- stack 2: 0x588
- stack 1: 0x1
- stack 0: 0x1
2291	 236	ADD		 	  ;; # ADDI 4
- stack 1: 0x588
- stack 0: 0x2
2292	 237	PUSH2	0080	 	 
- stack 2: 0x588
- stack 1: 0x2
- stack 0: 0x80
2293	 23A	MSTORE		 	  ;; # store to x4
- stack 0: 0x588
2294	 23B	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2295	 23D	ADD		 	 
- stack 0: 0x58C
2296	 23E	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2297	 23F	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x2440002025EFFD80115000E01AA0000008600000095014400B4000402A00000
2298	 240	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x2440002025EFFD80115000E01AA0000008600000095014400B4000402A00000
- stack 0: 0xF0
2299	 242	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x244
2300	 243	JUMP		 	 
- stack 0: 0x58C
2301	 244	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x58C
2302	 245	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2303	 246	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x2440002025EFFD80115000E01AA0000008600000095014400B4000402A00000
2304	 247	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x2440002025EFFD80115000E01AA0000008600000095014400B4000402A00000
- stack 0: 0xE0
2305	 249	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x2440002
2306	 24A	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x2440002
- stack 0: 0xFFFF
2307	 24D	AND		 	 
- stack 1: 0x58C
- stack 0: 0x2
2308	 24E	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0x1
2309	 250	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x2
2310	 251	PUSH2	00A0	 	 
- stack 2: 0x58C
- stack 1: 0x2
- stack 0: 0xA0
2311	 254	MSTORE		 	  ;; # store to x5
- stack 0: 0x58C
2312	 255	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2313	 257	ADD		 	 
- stack 0: 0x590
2314	 258	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2315	 259	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x25EFFD80115000E01AA0000008600000095014400B4000402A0000002A00000
2316	 25A	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x25EFFD80115000E01AA0000008600000095014400B4000402A0000002A00000
- stack 0: 0xF0
2317	 25C	SHR		 	 
- stack 1: 0x590
- stack 0: 0x25E
2318	 25D	JUMP		 	 
- stack 0: 0x590
2319	 25E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x590
2320	 25F	PUSH2	0080	 	 
- stack 1: 0x590
- stack 0: 0x80
2321	 262	MLOAD		 	  ;; # read from x4
- stack 1: 0x590
- stack 0: 0x2
2322	 263	PUSH4	FFFFFFFF	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2323	 268	AND		 	  ;; # mask to 32 bits
- stack 1: 0x590
- stack 0: 0x2
2324	 269	PUSH2	00A0	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0xA0
2325	 26C	MLOAD		 	  ;; # read from x5
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0x2
2326	 26D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x590
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2327	 272	AND		 	  ;; # mask to 32 bits
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0x2
2328	 273	SUB		 	 
- stack 1: 0x590
- stack 0: 0x0
2329	 274	PUSH2	027C	 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x27C
2330	 277	JUMPI		 	 
- stack 0: 0x590
2331	 278	PUSH2	0296	 ;; _neq_after_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 1: 0x590
- stack 0: 0x296
2332	 27B	JUMP		 	 
- stack 0: 0x590
2333	 296	JUMPDEST		 ;; _neq_after_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 0: 0x590
2334	 297	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2335	 299	ADD		 	 
- stack 0: 0x594
2336	 29A	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2337	 29B	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x115000E01AA0000008600000095014400B4000402A0000002A0000001C40000
2338	 29C	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x115000E01AA0000008600000095014400B4000402A0000002A0000001C40000
- stack 0: 0xF0
2339	 29E	SHR		 	 
- stack 1: 0x594
- stack 0: 0x115
2340	 29F	JUMP		 	 
- stack 0: 0x594
2341	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x594
2342	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2343	 117	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x115000E01AA0000008600000095014400B4000402A0000002A0000001C40000
2344	 118	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x115000E01AA0000008600000095014400B4000402A0000002A0000001C40000
- stack 0: 0xE0
2345	 11A	SHR		 	 
- stack 1: 0x594
- stack 0: 0x115000E
2346	 11B	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x115000E
- stack 0: 0xFFFF
2347	 11E	AND		 	 
- stack 1: 0x594
- stack 0: 0xE
2348	 11F	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0xE
- stack 0: 0x1
2349	 121	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0xE
2350	 122	PUSH2	0380	 	 
- stack 2: 0x594
- stack 1: 0xE
- stack 0: 0x380
2351	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x594
2352	 126	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2353	 128	ADD		 	 
- stack 0: 0x598
2354	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2355	 12A	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1AA0000008600000095014400B4000402A0000002A0000001C400000171F010
2356	 12B	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x1AA0000008600000095014400B4000402A0000002A0000001C400000171F010
- stack 0: 0xF0
2357	 12D	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1AA
2358	 12E	JUMP		 	 
- stack 0: 0x598
2359	 1AA	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x598
2360	 1AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2361	 1AC	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1AA0000008600000095014400B4000402A0000002A0000001C400000171F010
2362	 1AD	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x1AA0000008600000095014400B4000402A0000002A0000001C400000171F010
- stack 0: 0xE0
2363	 1AF	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1AA0000
2364	 1B0	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x1AA0000
- stack 0: 0xFFFF
2365	 1B3	AND		 	 
- stack 1: 0x598
- stack 0: 0x0
2366	 1B4	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x1
2367	 1B6	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x0
2368	 1B7	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x80
2369	 1BA	MSTORE		 	  ;; # store to x4
- stack 0: 0x598
2370	 1BB	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2371	 1BD	ADD		 	 
- stack 0: 0x59C
2372	 1BE	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2373	 1BF	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x8600000095014400B4000402A0000002A0000001C400000171F01000F6FF00
2374	 1C0	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x8600000095014400B4000402A0000002A0000001C400000171F01000F6FF00
- stack 0: 0xF0
2375	 1C2	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x86
2376	 1C3	JUMP		 	 
- stack 0: 0x59C
2377	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x59C
2378	 87	DUP1		 	 
- stack 1: 0x59C
- stack 0: 0x59C
2379	 88	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0x59C
- stack 0: 0x20
2380	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x59C
2381	 8C	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2382	 8E	ADD		 	 
- stack 0: 0x5A0
2383	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2384	 90	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x95014400B4000402A0000002A0000001C400000171F01000F6FF0001E300E0
2385	 91	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x95014400B4000402A0000002A0000001C400000171F01000F6FF0001E300E0
- stack 0: 0xF0
2386	 93	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x95
2387	 94	JUMP		 	 
- stack 0: 0x5A0
2388	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x5A0
2389	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2390	 97	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x95014400B4000402A0000002A0000001C400000171F01000F6FF0001E300E0
2391	 98	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x95014400B4000402A0000002A0000001C400000171F01000F6FF0001E300E0
- stack 0: 0xE0
2392	 9A	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x950144
2393	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x950144
- stack 0: 0xFFFF
2394	 9E	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x144
2395	 9F	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x144
- stack 0: 0x1
2396	 A1	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x144
2397	 A2	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x144
- stack 0: 0x20
2398	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A0
- stack 1: 0x144
- stack 0: 0x59C
2399	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5A0
- stack 0: 0x6E0
2400	 A7	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x6E0
- stack 0: 0x20
2401	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
2402	 AB	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2403	 AD	ADD		 	 
- stack 0: 0x5A4
2404	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2405	 AF	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xB4000402A0000002A0000001C400000171F01000F6FF0001E300E002250001
2406	 B0	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0xB4000402A0000002A0000001C400000171F01000F6FF0001E300E002250001
- stack 0: 0xF0
2407	 B2	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xB4
2408	 B3	JUMP		 	 
- stack 0: 0x5A4
2409	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x5A4
2410	 B5	PUSH2	0020	 	 
- stack 1: 0x5A4
- stack 0: 0x20
2411	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5A4
- stack 0: 0x6E0
2412	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
2413	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A4
- stack 0: 0x6E0
2414	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5A4
- stack 1: 0x6E0
- stack 0: 0x5A4
2415	 C0	MLOAD		 	 
- stack 2: 0x5A4
- stack 1: 0x6E0
- stack 0: 0xB4000402A0000002A0000001C400000171F01000F6FF0001E300E002250001
2416	 C1	PUSH1	E0	 	 
- stack 3: 0x5A4
- stack 2: 0x6E0
- stack 1: 0xB4000402A0000002A0000001C400000171F01000F6FF0001E300E002250001
- stack 0: 0xE0
2417	 C3	SHR		 	 
- stack 2: 0x5A4
- stack 1: 0x6E0
- stack 0: 0xB40004
2418	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5A4
- stack 2: 0x6E0
- stack 1: 0xB40004
- stack 0: 0xFFFF
2419	 C7	AND		 	 
- stack 2: 0x5A4
- stack 1: 0x6E0
- stack 0: 0x4
2420	 C8	PUSH1	01	 	 
- stack 3: 0x5A4
- stack 2: 0x6E0
- stack 1: 0x4
- stack 0: 0x1
2421	 CA	SIGNEXTEND		 	 
- stack 2: 0x5A4
- stack 1: 0x6E0
- stack 0: 0x4
2422	 CB	ADD		 	 
- stack 1: 0x5A4
- stack 0: 0x6E4
2423	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFF
2424	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A4
- stack 0: 0x6E4
2425	 D2	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xFF00FF000FF00FF0F00FF00F0000000000000000000000000000000000000000
2426	 D3	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0xFF00FF000FF00FF0F00FF00F0000000000000000000000000000000000000000
- stack 0: 0xE0
2427	 D5	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xFF00FF00
2428	 D6	PUSH2	0060	 	 
- stack 2: 0x5A4
- stack 1: 0xFF00FF00
- stack 0: 0x60
2429	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A4
2430	 DA	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2431	 DC	ADD		 	 
- stack 0: 0x5A8
2432	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2433	 DE	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2A0000002A0000001C400000171F01000F6FF0001E300E00225000102440002
2434	 DF	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x2A0000002A0000001C400000171F01000F6FF0001E300E00225000102440002
- stack 0: 0xF0
2435	 E1	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2A0
2436	 E2	JUMP		 	 
- stack 0: 0x5A8
2437	 2A0	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A8
2438	 2A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2439	 2A2	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2A0000002A0000001C400000171F01000F6FF0001E300E00225000102440002
2440	 2A3	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x2A0000002A0000001C400000171F01000F6FF0001E300E00225000102440002
- stack 0: 0xE0
2441	 2A5	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2A00000
2442	 2A6	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x2A00000
- stack 0: 0xFFFF
2443	 2A9	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2444	 2AA	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2445	 2AC	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2446	 2AD	POP		 	 
- stack 0: 0x5A8
2447	 2AE	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2448	 2B0	ADD		 	 
- stack 0: 0x5AC
2449	 2B1	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2450	 2B2	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x2A0000001C400000171F01000F6FF0001E300E00225000102440002025EFFD4
2451	 2B3	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x2A0000001C400000171F01000F6FF0001E300E00225000102440002025EFFD4
- stack 0: 0xF0
2452	 2B5	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2A0
2453	 2B6	JUMP		 	 
- stack 0: 0x5AC
2454	 2A0	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5AC
2455	 2A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2456	 2A2	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x2A0000001C400000171F01000F6FF0001E300E00225000102440002025EFFD4
2457	 2A3	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x2A0000001C400000171F01000F6FF0001E300E00225000102440002025EFFD4
- stack 0: 0xE0
2458	 2A5	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2A00000
2459	 2A6	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x2A00000
- stack 0: 0xFFFF
2460	 2A9	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2461	 2AA	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x1
2462	 2AC	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2463	 2AD	POP		 	 
- stack 0: 0x5AC
2464	 2AE	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2465	 2B0	ADD		 	 
- stack 0: 0x5B0
2466	 2B1	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2467	 2B2	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1C400000171F01000F6FF0001E300E00225000102440002025EFFD40115000F
2468	 2B3	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x1C400000171F01000F6FF0001E300E00225000102440002025EFFD40115000F
- stack 0: 0xF0
2469	 2B5	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1C4
2470	 2B6	JUMP		 	 
- stack 0: 0x5B0
2471	 1C4	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5B0
2472	 1C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2473	 1C6	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1C400000171F01000F6FF0001E300E00225000102440002025EFFD40115000F
2474	 1C7	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x1C400000171F01000F6FF0001E300E00225000102440002025EFFD40115000F
- stack 0: 0xE0
2475	 1C9	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1C40000
2476	 1CA	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x1C40000
- stack 0: 0xFFFF
2477	 1CD	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2478	 1CE	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x1
2479	 1D0	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2480	 1D1	PUSH2	0060	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x60
2481	 1D4	MLOAD		 	  ;; # read from x3
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0xFF00FF00
2482	 1D5	ADD		 	  ;; # ADDI 3
- stack 1: 0x5B0
- stack 0: 0xFF00FF00
2483	 1D6	PUSH2	00C0	 	 
- stack 2: 0x5B0
- stack 1: 0xFF00FF00
- stack 0: 0xC0
2484	 1D9	MSTORE		 	  ;; # store to x6
- stack 0: 0x5B0
2485	 1DA	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2486	 1DC	ADD		 	 
- stack 0: 0x5B4
2487	 1DD	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2488	 1DE	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x171F01000F6FF0001E300E00225000102440002025EFFD40115000F01AA0000
2489	 1DF	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x171F01000F6FF0001E300E00225000102440002025EFFD40115000F01AA0000
- stack 0: 0xF0
2490	 1E1	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x171
2491	 1E2	JUMP		 	 
- stack 0: 0x5B4
2492	 171	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x5B4
2493	 172	PUSH4	ff010000	 	 
- stack 1: 0x5B4
- stack 0: 0xFF010000
2494	 177	PUSH2	03A0	 	 
- stack 2: 0x5B4
- stack 1: 0xFF010000
- stack 0: 0x3A0
2495	 17A	MSTORE		 	  ;; # store to x29
- stack 0: 0x5B4
2496	 17B	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2497	 17D	ADD		 	 
- stack 0: 0x5B8
2498	 17E	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2499	 17F	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0xF6FF0001E300E00225000102440002025EFFD40115000F01AA000000860000
2500	 180	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0xF6FF0001E300E00225000102440002025EFFD40115000F01AA000000860000
- stack 0: 0xF0
2501	 182	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0xF6
2502	 183	JUMP		 	 
- stack 0: 0x5B8
2503	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x5B8
2504	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2505	 F8	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0xF6FF0001E300E00225000102440002025EFFD40115000F01AA000000860000
2506	 F9	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0xF6FF0001E300E00225000102440002025EFFD40115000F01AA000000860000
- stack 0: 0xE0
2507	 FB	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0xF6FF00
2508	 FC	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0xF6FF00
- stack 0: 0xFFFF
2509	 FF	AND		 	 
- stack 1: 0x5B8
- stack 0: 0xFF00
2510	 100	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0xFF00
- stack 0: 0x1
2511	 102	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2512	 103	PUSH2	03A0	 	 
- stack 2: 0x5B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
2513	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
2514	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x5B8
- stack 0: 0xFF00FF00
2515	 108	PUSH2	03A0	 	 
- stack 2: 0x5B8
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
2516	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x5B8
2517	 10C	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2518	 10E	ADD		 	 
- stack 0: 0x5BC
2519	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2520	 110	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x1E300E00225000102440002025EFFD40115000F01AA00000086000000950110
2521	 111	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x1E300E00225000102440002025EFFD40115000F01AA00000086000000950110
- stack 0: 0xF0
2522	 113	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x1E3
2523	 114	JUMP		 	 
- stack 0: 0x5BC
2524	 1E3	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,14c(ignore imm)
- stack 0: 0x5BC
2525	 1E4	PUSH2	00C0	 	 
- stack 1: 0x5BC
- stack 0: 0xC0
2526	 1E7	MLOAD		 	  ;; # read from x6
- stack 1: 0x5BC
- stack 0: 0xFF00FF00
2527	 1E8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
2528	 1ED	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0xFF00FF00
2529	 1EE	PUSH2	03A0	 	 
- stack 2: 0x5BC
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
2530	 1F1	MLOAD		 	  ;; # read from x29
- stack 2: 0x5BC
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
2531	 1F2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5BC
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
2532	 1F7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5BC
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
2533	 1F8	SUB		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2534	 1F9	PUSH2	0201	 ;; _neq_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x201
2535	 1FC	JUMPI		 	 
- stack 0: 0x5BC
2536	 1FD	PUSH2	021B	 ;; _neq_after_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 1: 0x5BC
- stack 0: 0x21B
2537	 200	JUMP		 	 
- stack 0: 0x5BC
2538	 21B	JUMPDEST		 ;; _neq_after_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 0: 0x5BC
2539	 21C	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2540	 21E	ADD		 	 
- stack 0: 0x5C0
2541	 21F	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2542	 220	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x225000102440002025EFFD40115000F01AA0000008600000095011000B40004
2543	 221	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x225000102440002025EFFD40115000F01AA0000008600000095011000B40004
- stack 0: 0xF0
2544	 223	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x225
2545	 224	JUMP		 	 
- stack 0: 0x5C0
2546	 225	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5C0
2547	 226	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2548	 227	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x225000102440002025EFFD40115000F01AA0000008600000095011000B40004
2549	 228	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x225000102440002025EFFD40115000F01AA0000008600000095011000B40004
- stack 0: 0xE0
2550	 22A	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x2250001
2551	 22B	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x2250001
- stack 0: 0xFFFF
2552	 22E	AND		 	 
- stack 1: 0x5C0
- stack 0: 0x1
2553	 22F	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0x1
- stack 0: 0x1
2554	 231	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0x1
2555	 232	PUSH2	0080	 	 
- stack 2: 0x5C0
- stack 1: 0x1
- stack 0: 0x80
2556	 235	MLOAD		 	  ;; # read from x4
- stack 2: 0x5C0
- stack 1: 0x1
- stack 0: 0x0
2557	 236	ADD		 	  ;; # ADDI 4
- stack 1: 0x5C0
- stack 0: 0x1
2558	 237	PUSH2	0080	 	 
- stack 2: 0x5C0
- stack 1: 0x1
- stack 0: 0x80
2559	 23A	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C0
2560	 23B	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2561	 23D	ADD		 	 
- stack 0: 0x5C4
2562	 23E	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2563	 23F	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x2440002025EFFD40115000F01AA0000008600000095011000B400040184FF01
2564	 240	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x2440002025EFFD40115000F01AA0000008600000095011000B400040184FF01
- stack 0: 0xF0
2565	 242	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x244
2566	 243	JUMP		 	 
- stack 0: 0x5C4
2567	 244	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5C4
2568	 245	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2569	 246	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x2440002025EFFD40115000F01AA0000008600000095011000B400040184FF01
2570	 247	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x2440002025EFFD40115000F01AA0000008600000095011000B400040184FF01
- stack 0: 0xE0
2571	 249	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x2440002
2572	 24A	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x2440002
- stack 0: 0xFFFF
2573	 24D	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x2
2574	 24E	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x2
- stack 0: 0x1
2575	 250	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x2
2576	 251	PUSH2	00A0	 	 
- stack 2: 0x5C4
- stack 1: 0x2
- stack 0: 0xA0
2577	 254	MSTORE		 	  ;; # store to x5
- stack 0: 0x5C4
2578	 255	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2579	 257	ADD		 	 
- stack 0: 0x5C8
2580	 258	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2581	 259	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x25EFFD40115000F01AA0000008600000095011000B400040184FF0100F6FFF0
2582	 25A	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x25EFFD40115000F01AA0000008600000095011000B400040184FF0100F6FFF0
- stack 0: 0xF0
2583	 25C	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x25E
2584	 25D	JUMP		 	 
- stack 0: 0x5C8
2585	 25E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x5C8
2586	 25F	PUSH2	0080	 	 
- stack 1: 0x5C8
- stack 0: 0x80
2587	 262	MLOAD		 	  ;; # read from x4
- stack 1: 0x5C8
- stack 0: 0x1
2588	 263	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2589	 268	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C8
- stack 0: 0x1
2590	 269	PUSH2	00A0	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0xA0
2591	 26C	MLOAD		 	  ;; # read from x5
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x2
2592	 26D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5C8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2593	 272	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x2
2594	 273	SUB		 	 
- stack 1: 0x5C8
- stack 0: 0x1
2595	 274	PUSH2	027C	 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x27C
2596	 277	JUMPI		 	 
- stack 0: 0x5C8
2597	 27C	JUMPDEST		 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 0: 0x5C8
2598	 27D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2599	 27E	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x25EFFD40115000F01AA0000008600000095011000B400040184FF0100F6FFF0
2600	 27F	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x25EFFD40115000F01AA0000008600000095011000B400040184FF0100F6FFF0
- stack 0: 0xE0
2601	 281	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x25EFFD4
2602	 282	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x25EFFD4
- stack 0: 0xFFFF
2603	 285	AND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFD4
2604	 286	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0xFFD4
- stack 0: 0x1
2605	 288	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4
2606	 289	ADD		 	 
- stack 0: 0x59C
2607	 28A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x59C
- stack 0: 0xFFFFFFFF
2608	 28F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x59C
2609	 290	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2610	 291	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x8600000095014400B4000402A0000002A0000001C400000171F01000F6FF00
2611	 292	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x8600000095014400B4000402A0000002A0000001C400000171F01000F6FF00
- stack 0: 0xF0
2612	 294	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x86
2613	 295	JUMP		 	 
- stack 0: 0x59C
2614	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x59C
2615	 87	DUP1		 	 
- stack 1: 0x59C
- stack 0: 0x59C
2616	 88	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0x59C
- stack 0: 0x20
2617	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x59C
2618	 8C	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2619	 8E	ADD		 	 
- stack 0: 0x5A0
2620	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2621	 90	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x95014400B4000402A0000002A0000001C400000171F01000F6FF0001E300E0
2622	 91	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x95014400B4000402A0000002A0000001C400000171F01000F6FF0001E300E0
- stack 0: 0xF0
2623	 93	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x95
2624	 94	JUMP		 	 
- stack 0: 0x5A0
2625	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x5A0
2626	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2627	 97	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x95014400B4000402A0000002A0000001C400000171F01000F6FF0001E300E0
2628	 98	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x95014400B4000402A0000002A0000001C400000171F01000F6FF0001E300E0
- stack 0: 0xE0
2629	 9A	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x950144
2630	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x950144
- stack 0: 0xFFFF
2631	 9E	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x144
2632	 9F	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x144
- stack 0: 0x1
2633	 A1	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x144
2634	 A2	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x144
- stack 0: 0x20
2635	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A0
- stack 1: 0x144
- stack 0: 0x59C
2636	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5A0
- stack 0: 0x6E0
2637	 A7	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x6E0
- stack 0: 0x20
2638	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
2639	 AB	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2640	 AD	ADD		 	 
- stack 0: 0x5A4
2641	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2642	 AF	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xB4000402A0000002A0000001C400000171F01000F6FF0001E300E002250001
2643	 B0	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0xB4000402A0000002A0000001C400000171F01000F6FF0001E300E002250001
- stack 0: 0xF0
2644	 B2	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xB4
2645	 B3	JUMP		 	 
- stack 0: 0x5A4
2646	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x5A4
2647	 B5	PUSH2	0020	 	 
- stack 1: 0x5A4
- stack 0: 0x20
2648	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5A4
- stack 0: 0x6E0
2649	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
2650	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A4
- stack 0: 0x6E0
2651	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5A4
- stack 1: 0x6E0
- stack 0: 0x5A4
2652	 C0	MLOAD		 	 
- stack 2: 0x5A4
- stack 1: 0x6E0
- stack 0: 0xB4000402A0000002A0000001C400000171F01000F6FF0001E300E002250001
2653	 C1	PUSH1	E0	 	 
- stack 3: 0x5A4
- stack 2: 0x6E0
- stack 1: 0xB4000402A0000002A0000001C400000171F01000F6FF0001E300E002250001
- stack 0: 0xE0
2654	 C3	SHR		 	 
- stack 2: 0x5A4
- stack 1: 0x6E0
- stack 0: 0xB40004
2655	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5A4
- stack 2: 0x6E0
- stack 1: 0xB40004
- stack 0: 0xFFFF
2656	 C7	AND		 	 
- stack 2: 0x5A4
- stack 1: 0x6E0
- stack 0: 0x4
2657	 C8	PUSH1	01	 	 
- stack 3: 0x5A4
- stack 2: 0x6E0
- stack 1: 0x4
- stack 0: 0x1
2658	 CA	SIGNEXTEND		 	 
- stack 2: 0x5A4
- stack 1: 0x6E0
- stack 0: 0x4
2659	 CB	ADD		 	 
- stack 1: 0x5A4
- stack 0: 0x6E4
2660	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFF
2661	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A4
- stack 0: 0x6E4
2662	 D2	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xFF00FF000FF00FF0F00FF00F0000000000000000000000000000000000000000
2663	 D3	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0xFF00FF000FF00FF0F00FF00F0000000000000000000000000000000000000000
- stack 0: 0xE0
2664	 D5	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xFF00FF00
2665	 D6	PUSH2	0060	 	 
- stack 2: 0x5A4
- stack 1: 0xFF00FF00
- stack 0: 0x60
2666	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A4
2667	 DA	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2668	 DC	ADD		 	 
- stack 0: 0x5A8
2669	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2670	 DE	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2A0000002A0000001C400000171F01000F6FF0001E300E00225000102440002
2671	 DF	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x2A0000002A0000001C400000171F01000F6FF0001E300E00225000102440002
- stack 0: 0xF0
2672	 E1	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2A0
2673	 E2	JUMP		 	 
- stack 0: 0x5A8
2674	 2A0	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A8
2675	 2A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2676	 2A2	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2A0000002A0000001C400000171F01000F6FF0001E300E00225000102440002
2677	 2A3	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x2A0000002A0000001C400000171F01000F6FF0001E300E00225000102440002
- stack 0: 0xE0
2678	 2A5	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2A00000
2679	 2A6	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x2A00000
- stack 0: 0xFFFF
2680	 2A9	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2681	 2AA	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2682	 2AC	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2683	 2AD	POP		 	 
- stack 0: 0x5A8
2684	 2AE	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2685	 2B0	ADD		 	 
- stack 0: 0x5AC
2686	 2B1	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2687	 2B2	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x2A0000001C400000171F01000F6FF0001E300E00225000102440002025EFFD4
2688	 2B3	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x2A0000001C400000171F01000F6FF0001E300E00225000102440002025EFFD4
- stack 0: 0xF0
2689	 2B5	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2A0
2690	 2B6	JUMP		 	 
- stack 0: 0x5AC
2691	 2A0	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5AC
2692	 2A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2693	 2A2	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x2A0000001C400000171F01000F6FF0001E300E00225000102440002025EFFD4
2694	 2A3	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x2A0000001C400000171F01000F6FF0001E300E00225000102440002025EFFD4
- stack 0: 0xE0
2695	 2A5	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2A00000
2696	 2A6	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x2A00000
- stack 0: 0xFFFF
2697	 2A9	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2698	 2AA	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x1
2699	 2AC	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2700	 2AD	POP		 	 
- stack 0: 0x5AC
2701	 2AE	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2702	 2B0	ADD		 	 
- stack 0: 0x5B0
2703	 2B1	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2704	 2B2	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1C400000171F01000F6FF0001E300E00225000102440002025EFFD40115000F
2705	 2B3	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x1C400000171F01000F6FF0001E300E00225000102440002025EFFD40115000F
- stack 0: 0xF0
2706	 2B5	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1C4
2707	 2B6	JUMP		 	 
- stack 0: 0x5B0
2708	 1C4	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5B0
2709	 1C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2710	 1C6	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1C400000171F01000F6FF0001E300E00225000102440002025EFFD40115000F
2711	 1C7	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x1C400000171F01000F6FF0001E300E00225000102440002025EFFD40115000F
- stack 0: 0xE0
2712	 1C9	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1C40000
2713	 1CA	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x1C40000
- stack 0: 0xFFFF
2714	 1CD	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2715	 1CE	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x1
2716	 1D0	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2717	 1D1	PUSH2	0060	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x60
2718	 1D4	MLOAD		 	  ;; # read from x3
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0xFF00FF00
2719	 1D5	ADD		 	  ;; # ADDI 3
- stack 1: 0x5B0
- stack 0: 0xFF00FF00
2720	 1D6	PUSH2	00C0	 	 
- stack 2: 0x5B0
- stack 1: 0xFF00FF00
- stack 0: 0xC0
2721	 1D9	MSTORE		 	  ;; # store to x6
- stack 0: 0x5B0
2722	 1DA	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2723	 1DC	ADD		 	 
- stack 0: 0x5B4
2724	 1DD	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2725	 1DE	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x171F01000F6FF0001E300E00225000102440002025EFFD40115000F01AA0000
2726	 1DF	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x171F01000F6FF0001E300E00225000102440002025EFFD40115000F01AA0000
- stack 0: 0xF0
2727	 1E1	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x171
2728	 1E2	JUMP		 	 
- stack 0: 0x5B4
2729	 171	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x5B4
2730	 172	PUSH4	ff010000	 	 
- stack 1: 0x5B4
- stack 0: 0xFF010000
2731	 177	PUSH2	03A0	 	 
- stack 2: 0x5B4
- stack 1: 0xFF010000
- stack 0: 0x3A0
2732	 17A	MSTORE		 	  ;; # store to x29
- stack 0: 0x5B4
2733	 17B	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2734	 17D	ADD		 	 
- stack 0: 0x5B8
2735	 17E	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2736	 17F	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0xF6FF0001E300E00225000102440002025EFFD40115000F01AA000000860000
2737	 180	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0xF6FF0001E300E00225000102440002025EFFD40115000F01AA000000860000
- stack 0: 0xF0
2738	 182	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0xF6
2739	 183	JUMP		 	 
- stack 0: 0x5B8
2740	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x5B8
2741	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2742	 F8	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0xF6FF0001E300E00225000102440002025EFFD40115000F01AA000000860000
2743	 F9	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0xF6FF0001E300E00225000102440002025EFFD40115000F01AA000000860000
- stack 0: 0xE0
2744	 FB	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0xF6FF00
2745	 FC	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0xF6FF00
- stack 0: 0xFFFF
2746	 FF	AND		 	 
- stack 1: 0x5B8
- stack 0: 0xFF00
2747	 100	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0xFF00
- stack 0: 0x1
2748	 102	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2749	 103	PUSH2	03A0	 	 
- stack 2: 0x5B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
2750	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
2751	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x5B8
- stack 0: 0xFF00FF00
2752	 108	PUSH2	03A0	 	 
- stack 2: 0x5B8
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
2753	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x5B8
2754	 10C	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2755	 10E	ADD		 	 
- stack 0: 0x5BC
2756	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2757	 110	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x1E300E00225000102440002025EFFD40115000F01AA00000086000000950110
2758	 111	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x1E300E00225000102440002025EFFD40115000F01AA00000086000000950110
- stack 0: 0xF0
2759	 113	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x1E3
2760	 114	JUMP		 	 
- stack 0: 0x5BC
2761	 1E3	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,14c(ignore imm)
- stack 0: 0x5BC
2762	 1E4	PUSH2	00C0	 	 
- stack 1: 0x5BC
- stack 0: 0xC0
2763	 1E7	MLOAD		 	  ;; # read from x6
- stack 1: 0x5BC
- stack 0: 0xFF00FF00
2764	 1E8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
2765	 1ED	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0xFF00FF00
2766	 1EE	PUSH2	03A0	 	 
- stack 2: 0x5BC
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
2767	 1F1	MLOAD		 	  ;; # read from x29
- stack 2: 0x5BC
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
2768	 1F2	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5BC
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
2769	 1F7	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5BC
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
2770	 1F8	SUB		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2771	 1F9	PUSH2	0201	 ;; _neq_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x201
2772	 1FC	JUMPI		 	 
- stack 0: 0x5BC
2773	 1FD	PUSH2	021B	 ;; _neq_after_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 1: 0x5BC
- stack 0: 0x21B
2774	 200	JUMP		 	 
- stack 0: 0x5BC
2775	 21B	JUMPDEST		 ;; _neq_after_3f35d0a3e910096283d0776a34261c1a9983af5682649de96e07a37452f575a9	 
- stack 0: 0x5BC
2776	 21C	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2777	 21E	ADD		 	 
- stack 0: 0x5C0
2778	 21F	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2779	 220	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x225000102440002025EFFD40115000F01AA0000008600000095011000B40004
2780	 221	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x225000102440002025EFFD40115000F01AA0000008600000095011000B40004
- stack 0: 0xF0
2781	 223	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x225
2782	 224	JUMP		 	 
- stack 0: 0x5C0
2783	 225	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5C0
2784	 226	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2785	 227	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x225000102440002025EFFD40115000F01AA0000008600000095011000B40004
2786	 228	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x225000102440002025EFFD40115000F01AA0000008600000095011000B40004
- stack 0: 0xE0
2787	 22A	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x2250001
2788	 22B	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x2250001
- stack 0: 0xFFFF
2789	 22E	AND		 	 
- stack 1: 0x5C0
- stack 0: 0x1
2790	 22F	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0x1
- stack 0: 0x1
2791	 231	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0x1
2792	 232	PUSH2	0080	 	 
- stack 2: 0x5C0
- stack 1: 0x1
- stack 0: 0x80
2793	 235	MLOAD		 	  ;; # read from x4
- stack 2: 0x5C0
- stack 1: 0x1
- stack 0: 0x1
2794	 236	ADD		 	  ;; # ADDI 4
- stack 1: 0x5C0
- stack 0: 0x2
2795	 237	PUSH2	0080	 	 
- stack 2: 0x5C0
- stack 1: 0x2
- stack 0: 0x80
2796	 23A	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C0
2797	 23B	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2798	 23D	ADD		 	 
- stack 0: 0x5C4
2799	 23E	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2800	 23F	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x2440002025EFFD40115000F01AA0000008600000095011000B400040184FF01
2801	 240	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x2440002025EFFD40115000F01AA0000008600000095011000B400040184FF01
- stack 0: 0xF0
2802	 242	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x244
2803	 243	JUMP		 	 
- stack 0: 0x5C4
2804	 244	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5C4
2805	 245	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2806	 246	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x2440002025EFFD40115000F01AA0000008600000095011000B400040184FF01
2807	 247	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x2440002025EFFD40115000F01AA0000008600000095011000B400040184FF01
- stack 0: 0xE0
2808	 249	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x2440002
2809	 24A	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x2440002
- stack 0: 0xFFFF
2810	 24D	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x2
2811	 24E	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x2
- stack 0: 0x1
2812	 250	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x2
2813	 251	PUSH2	00A0	 	 
- stack 2: 0x5C4
- stack 1: 0x2
- stack 0: 0xA0
2814	 254	MSTORE		 	  ;; # store to x5
- stack 0: 0x5C4
2815	 255	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2816	 257	ADD		 	 
- stack 0: 0x5C8
2817	 258	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2818	 259	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x25EFFD40115000F01AA0000008600000095011000B400040184FF0100F6FFF0
2819	 25A	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x25EFFD40115000F01AA0000008600000095011000B400040184FF0100F6FFF0
- stack 0: 0xF0
2820	 25C	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x25E
2821	 25D	JUMP		 	 
- stack 0: 0x5C8
2822	 25E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x5C8
2823	 25F	PUSH2	0080	 	 
- stack 1: 0x5C8
- stack 0: 0x80
2824	 262	MLOAD		 	  ;; # read from x4
- stack 1: 0x5C8
- stack 0: 0x2
2825	 263	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2826	 268	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C8
- stack 0: 0x2
2827	 269	PUSH2	00A0	 	 
- stack 2: 0x5C8
- stack 1: 0x2
- stack 0: 0xA0
2828	 26C	MLOAD		 	  ;; # read from x5
- stack 2: 0x5C8
- stack 1: 0x2
- stack 0: 0x2
2829	 26D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5C8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2830	 272	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5C8
- stack 1: 0x2
- stack 0: 0x2
2831	 273	SUB		 	 
- stack 1: 0x5C8
- stack 0: 0x0
2832	 274	PUSH2	027C	 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x27C
2833	 277	JUMPI		 	 
- stack 0: 0x5C8
2834	 278	PUSH2	0296	 ;; _neq_after_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 1: 0x5C8
- stack 0: 0x296
2835	 27B	JUMP		 	 
- stack 0: 0x5C8
2836	 296	JUMPDEST		 ;; _neq_after_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 0: 0x5C8
2837	 297	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2838	 299	ADD		 	 
- stack 0: 0x5CC
2839	 29A	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2840	 29B	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x115000F01AA0000008600000095011000B400040184FF0100F6FFF0012F00B4
2841	 29C	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x115000F01AA0000008600000095011000B400040184FF0100F6FFF0012F00B4
- stack 0: 0xF0
2842	 29E	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x115
2843	 29F	JUMP		 	 
- stack 0: 0x5CC
2844	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5CC
2845	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2846	 117	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x115000F01AA0000008600000095011000B400040184FF0100F6FFF0012F00B4
2847	 118	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x115000F01AA0000008600000095011000B400040184FF0100F6FFF0012F00B4
- stack 0: 0xE0
2848	 11A	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x115000F
2849	 11B	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x115000F
- stack 0: 0xFFFF
2850	 11E	AND		 	 
- stack 1: 0x5CC
- stack 0: 0xF
2851	 11F	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0xF
- stack 0: 0x1
2852	 121	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xF
2853	 122	PUSH2	0380	 	 
- stack 2: 0x5CC
- stack 1: 0xF
- stack 0: 0x380
2854	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x5CC
2855	 126	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2856	 128	ADD		 	 
- stack 0: 0x5D0
2857	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2858	 12A	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x1AA0000008600000095011000B400040184FF0100F6FFF0012F00B402250001
2859	 12B	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x1AA0000008600000095011000B400040184FF0100F6FFF0012F00B402250001
- stack 0: 0xF0
2860	 12D	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x1AA
2861	 12E	JUMP		 	 
- stack 0: 0x5D0
2862	 1AA	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5D0
2863	 1AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2864	 1AC	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x1AA0000008600000095011000B400040184FF0100F6FFF0012F00B402250001
2865	 1AD	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x1AA0000008600000095011000B400040184FF0100F6FFF0012F00B402250001
- stack 0: 0xE0
2866	 1AF	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x1AA0000
2867	 1B0	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x1AA0000
- stack 0: 0xFFFF
2868	 1B3	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
2869	 1B4	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x1
2870	 1B6	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
2871	 1B7	PUSH2	0080	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x80
2872	 1BA	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D0
2873	 1BB	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2874	 1BD	ADD		 	 
- stack 0: 0x5D4
2875	 1BE	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2876	 1BF	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x8600000095011000B400040184FF0100F6FFF0012F00B40225000102440002
2877	 1C0	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x8600000095011000B400040184FF0100F6FFF0012F00B40225000102440002
- stack 0: 0xF0
2878	 1C2	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x86
2879	 1C3	JUMP		 	 
- stack 0: 0x5D4
2880	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5D4
2881	 87	DUP1		 	 
- stack 1: 0x5D4
- stack 0: 0x5D4
2882	 88	PUSH2	0020	 	 
- stack 2: 0x5D4
- stack 1: 0x5D4
- stack 0: 0x20
2883	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D4
2884	 8C	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2885	 8E	ADD		 	 
- stack 0: 0x5D8
2886	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2887	 90	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x95011000B400040184FF0100F6FFF0012F00B40225000102440002025EFFE0
2888	 91	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x95011000B400040184FF0100F6FFF0012F00B40225000102440002025EFFE0
- stack 0: 0xF0
2889	 93	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x95
2890	 94	JUMP		 	 
- stack 0: 0x5D8
2891	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x5D8
2892	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2893	 97	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x95011000B400040184FF0100F6FFF0012F00B40225000102440002025EFFE0
2894	 98	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x95011000B400040184FF0100F6FFF0012F00B40225000102440002025EFFE0
- stack 0: 0xE0
2895	 9A	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x950110
2896	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x950110
- stack 0: 0xFFFF
2897	 9E	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x110
2898	 9F	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x110
- stack 0: 0x1
2899	 A1	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x110
2900	 A2	PUSH2	0020	 	 
- stack 2: 0x5D8
- stack 1: 0x110
- stack 0: 0x20
2901	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5D8
- stack 1: 0x110
- stack 0: 0x5D4
2902	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5D8
- stack 0: 0x6E4
2903	 A7	PUSH2	0020	 	 
- stack 2: 0x5D8
- stack 1: 0x6E4
- stack 0: 0x20
2904	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D8
2905	 AB	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2906	 AD	ADD		 	 
- stack 0: 0x5DC
2907	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2908	 AF	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0xB400040184FF0100F6FFF0012F00B40225000102440002025EFFE001150010
2909	 B0	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0xB400040184FF0100F6FFF0012F00B40225000102440002025EFFE001150010
- stack 0: 0xF0
2910	 B2	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0xB4
2911	 B3	JUMP		 	 
- stack 0: 0x5DC
2912	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x5DC
2913	 B5	PUSH2	0020	 	 
- stack 1: 0x5DC
- stack 0: 0x20
2914	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5DC
- stack 0: 0x6E4
2915	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFF
2916	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5DC
- stack 0: 0x6E4
2917	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5DC
- stack 1: 0x6E4
- stack 0: 0x5DC
2918	 C0	MLOAD		 	 
- stack 2: 0x5DC
- stack 1: 0x6E4
- stack 0: 0xB400040184FF0100F6FFF0012F00B40225000102440002025EFFE001150010
2919	 C1	PUSH1	E0	 	 
- stack 3: 0x5DC
- stack 2: 0x6E4
- stack 1: 0xB400040184FF0100F6FFF0012F00B40225000102440002025EFFE001150010
- stack 0: 0xE0
2920	 C3	SHR		 	 
- stack 2: 0x5DC
- stack 1: 0x6E4
- stack 0: 0xB40004
2921	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5DC
- stack 2: 0x6E4
- stack 1: 0xB40004
- stack 0: 0xFFFF
2922	 C7	AND		 	 
- stack 2: 0x5DC
- stack 1: 0x6E4
- stack 0: 0x4
2923	 C8	PUSH1	01	 	 
- stack 3: 0x5DC
- stack 2: 0x6E4
- stack 1: 0x4
- stack 0: 0x1
2924	 CA	SIGNEXTEND		 	 
- stack 2: 0x5DC
- stack 1: 0x6E4
- stack 0: 0x4
2925	 CB	ADD		 	 
- stack 1: 0x5DC
- stack 0: 0x6E8
2926	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFF
2927	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5DC
- stack 0: 0x6E8
2928	 D2	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0xFF00FF0F00FF00F000000000000000000000000000000000000000000000000
2929	 D3	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0xFF00FF0F00FF00F000000000000000000000000000000000000000000000000
- stack 0: 0xE0
2930	 D5	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0xFF00FF0
2931	 D6	PUSH2	0060	 	 
- stack 2: 0x5DC
- stack 1: 0xFF00FF0
- stack 0: 0x60
2932	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x5DC
2933	 DA	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2934	 DC	ADD		 	 
- stack 0: 0x5E0
2935	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2936	 DE	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x184FF0100F6FFF0012F00B40225000102440002025EFFE00115001001AA0000
2937	 DF	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x184FF0100F6FFF0012F00B40225000102440002025EFFE00115001001AA0000
- stack 0: 0xF0
2938	 E1	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x184
2939	 E2	JUMP		 	 
- stack 0: 0x5E0
2940	 184	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x5E0
2941	 185	PUSH4	0ff01000	 	 
- stack 1: 0x5E0
- stack 0: 0xFF01000
2942	 18A	PUSH2	03A0	 	 
- stack 2: 0x5E0
- stack 1: 0xFF01000
- stack 0: 0x3A0
2943	 18D	MSTORE		 	  ;; # store to x29
- stack 0: 0x5E0
2944	 18E	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2945	 190	ADD		 	 
- stack 0: 0x5E4
2946	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2947	 192	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0xF6FFF0012F00B40225000102440002025EFFE00115001001AA000000860000
2948	 193	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0xF6FFF0012F00B40225000102440002025EFFE00115001001AA000000860000
- stack 0: 0xF0
2949	 195	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0xF6
2950	 196	JUMP		 	 
- stack 0: 0x5E4
2951	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x5E4
2952	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2953	 F8	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0xF6FFF0012F00B40225000102440002025EFFE00115001001AA000000860000
2954	 F9	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0xF6FFF0012F00B40225000102440002025EFFE00115001001AA000000860000
- stack 0: 0xE0
2955	 FB	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0xF6FFF0
2956	 FC	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0xF6FFF0
- stack 0: 0xFFFF
2957	 FF	AND		 	 
- stack 1: 0x5E4
- stack 0: 0xFFF0
2958	 100	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0xFFF0
- stack 0: 0x1
2959	 102	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2960	 103	PUSH2	03A0	 	 
- stack 2: 0x5E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
2961	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x5E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
2962	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x5E4
- stack 0: 0xFF00FF0
2963	 108	PUSH2	03A0	 	 
- stack 2: 0x5E4
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
2964	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x5E4
2965	 10C	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2966	 10E	ADD		 	 
- stack 0: 0x5E8
2967	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2968	 110	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x12F00B40225000102440002025EFFE00115001001AA000000860000009500E8
2969	 111	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x12F00B40225000102440002025EFFE00115001001AA000000860000009500E8
- stack 0: 0xF0
2970	 113	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x12F
2971	 114	JUMP		 	 
- stack 0: 0x5E8
2972	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x5E8
2973	 130	PUSH2	0060	 	 
- stack 1: 0x5E8
- stack 0: 0x60
2974	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x5E8
- stack 0: 0xFF00FF0
2975	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E8
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
2976	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E8
- stack 0: 0xFF00FF0
2977	 13A	PUSH2	03A0	 	 
- stack 2: 0x5E8
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
2978	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x5E8
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
2979	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E8
- stack 2: 0xFF00FF0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
2980	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E8
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
2981	 144	SUB		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2982	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x14D
2983	 148	JUMPI		 	 
- stack 0: 0x5E8
2984	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x5E8
- stack 0: 0x167
2985	 14C	JUMP		 	 
- stack 0: 0x5E8
2986	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x5E8
2987	 168	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2988	 16A	ADD		 	 
- stack 0: 0x5EC
2989	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2990	 16C	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x225000102440002025EFFE00115001001AA000000860000009500E802A00000
2991	 16D	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x225000102440002025EFFE00115001001AA000000860000009500E802A00000
- stack 0: 0xF0
2992	 16F	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x225
2993	 170	JUMP		 	 
- stack 0: 0x5EC
2994	 225	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5EC
2995	 226	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2996	 227	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x225000102440002025EFFE00115001001AA000000860000009500E802A00000
2997	 228	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x225000102440002025EFFE00115001001AA000000860000009500E802A00000
- stack 0: 0xE0
2998	 22A	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x2250001
2999	 22B	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x2250001
- stack 0: 0xFFFF
3000	 22E	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x1
3001	 22F	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x1
3002	 231	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x1
3003	 232	PUSH2	0080	 	 
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x80
3004	 235	MLOAD		 	  ;; # read from x4
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x0
3005	 236	ADD		 	  ;; # ADDI 4
- stack 1: 0x5EC
- stack 0: 0x1
3006	 237	PUSH2	0080	 	 
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x80
3007	 23A	MSTORE		 	  ;; # store to x4
- stack 0: 0x5EC
3008	 23B	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3009	 23D	ADD		 	 
- stack 0: 0x5F0
3010	 23E	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3011	 23F	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x2440002025EFFE00115001001AA000000860000009500E802A0000000B40004
3012	 240	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x2440002025EFFE00115001001AA000000860000009500E802A0000000B40004
- stack 0: 0xF0
3013	 242	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x244
3014	 243	JUMP		 	 
- stack 0: 0x5F0
3015	 244	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5F0
3016	 245	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3017	 246	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x2440002025EFFE00115001001AA000000860000009500E802A0000000B40004
3018	 247	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x2440002025EFFE00115001001AA000000860000009500E802A0000000B40004
- stack 0: 0xE0
3019	 249	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x2440002
3020	 24A	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x2440002
- stack 0: 0xFFFF
3021	 24D	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x2
3022	 24E	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0x1
3023	 250	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x2
3024	 251	PUSH2	00A0	 	 
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0xA0
3025	 254	MSTORE		 	  ;; # store to x5
- stack 0: 0x5F0
3026	 255	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3027	 257	ADD		 	 
- stack 0: 0x5F4
3028	 258	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3029	 259	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x25EFFE00115001001AA000000860000009500E802A0000000B40004019700FF
3030	 25A	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x25EFFE00115001001AA000000860000009500E802A0000000B40004019700FF
- stack 0: 0xF0
3031	 25C	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x25E
3032	 25D	JUMP		 	 
- stack 0: 0x5F4
3033	 25E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x5F4
3034	 25F	PUSH2	0080	 	 
- stack 1: 0x5F4
- stack 0: 0x80
3035	 262	MLOAD		 	  ;; # read from x4
- stack 1: 0x5F4
- stack 0: 0x1
3036	 263	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3037	 268	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x1
3038	 269	PUSH2	00A0	 	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0xA0
3039	 26C	MLOAD		 	  ;; # read from x5
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x2
3040	 26D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3041	 272	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x2
3042	 273	SUB		 	 
- stack 1: 0x5F4
- stack 0: 0x1
3043	 274	PUSH2	027C	 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x27C
3044	 277	JUMPI		 	 
- stack 0: 0x5F4
3045	 27C	JUMPDEST		 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 0: 0x5F4
3046	 27D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
3047	 27E	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x25EFFE00115001001AA000000860000009500E802A0000000B40004019700FF
3048	 27F	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x25EFFE00115001001AA000000860000009500E802A0000000B40004019700FF
- stack 0: 0xE0
3049	 281	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x25EFFE0
3050	 282	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x25EFFE0
- stack 0: 0xFFFF
3051	 285	AND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFE0
3052	 286	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0xFFE0
- stack 0: 0x1
3053	 288	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3054	 289	ADD		 	 
- stack 0: 0x5D4
3055	 28A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5D4
- stack 0: 0xFFFFFFFF
3056	 28F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5D4
3057	 290	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3058	 291	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x8600000095011000B400040184FF0100F6FFF0012F00B40225000102440002
3059	 292	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x8600000095011000B400040184FF0100F6FFF0012F00B40225000102440002
- stack 0: 0xF0
3060	 294	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x86
3061	 295	JUMP		 	 
- stack 0: 0x5D4
3062	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x5D4
3063	 87	DUP1		 	 
- stack 1: 0x5D4
- stack 0: 0x5D4
3064	 88	PUSH2	0020	 	 
- stack 2: 0x5D4
- stack 1: 0x5D4
- stack 0: 0x20
3065	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D4
3066	 8C	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3067	 8E	ADD		 	 
- stack 0: 0x5D8
3068	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3069	 90	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x95011000B400040184FF0100F6FFF0012F00B40225000102440002025EFFE0
3070	 91	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x95011000B400040184FF0100F6FFF0012F00B40225000102440002025EFFE0
- stack 0: 0xF0
3071	 93	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x95
3072	 94	JUMP		 	 
- stack 0: 0x5D8
3073	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x5D8
3074	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
3075	 97	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x95011000B400040184FF0100F6FFF0012F00B40225000102440002025EFFE0
3076	 98	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x95011000B400040184FF0100F6FFF0012F00B40225000102440002025EFFE0
- stack 0: 0xE0
3077	 9A	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x950110
3078	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x950110
- stack 0: 0xFFFF
3079	 9E	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x110
3080	 9F	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x110
- stack 0: 0x1
3081	 A1	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x110
3082	 A2	PUSH2	0020	 	 
- stack 2: 0x5D8
- stack 1: 0x110
- stack 0: 0x20
3083	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5D8
- stack 1: 0x110
- stack 0: 0x5D4
3084	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5D8
- stack 0: 0x6E4
3085	 A7	PUSH2	0020	 	 
- stack 2: 0x5D8
- stack 1: 0x6E4
- stack 0: 0x20
3086	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D8
3087	 AB	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3088	 AD	ADD		 	 
- stack 0: 0x5DC
3089	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3090	 AF	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0xB400040184FF0100F6FFF0012F00B40225000102440002025EFFE001150010
3091	 B0	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0xB400040184FF0100F6FFF0012F00B40225000102440002025EFFE001150010
- stack 0: 0xF0
3092	 B2	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0xB4
3093	 B3	JUMP		 	 
- stack 0: 0x5DC
3094	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x5DC
3095	 B5	PUSH2	0020	 	 
- stack 1: 0x5DC
- stack 0: 0x20
3096	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x5DC
- stack 0: 0x6E4
3097	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFF
3098	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5DC
- stack 0: 0x6E4
3099	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5DC
- stack 1: 0x6E4
- stack 0: 0x5DC
3100	 C0	MLOAD		 	 
- stack 2: 0x5DC
- stack 1: 0x6E4
- stack 0: 0xB400040184FF0100F6FFF0012F00B40225000102440002025EFFE001150010
3101	 C1	PUSH1	E0	 	 
- stack 3: 0x5DC
- stack 2: 0x6E4
- stack 1: 0xB400040184FF0100F6FFF0012F00B40225000102440002025EFFE001150010
- stack 0: 0xE0
3102	 C3	SHR		 	 
- stack 2: 0x5DC
- stack 1: 0x6E4
- stack 0: 0xB40004
3103	 C4	PUSH2	FFFF	 	 
- stack 3: 0x5DC
- stack 2: 0x6E4
- stack 1: 0xB40004
- stack 0: 0xFFFF
3104	 C7	AND		 	 
- stack 2: 0x5DC
- stack 1: 0x6E4
- stack 0: 0x4
3105	 C8	PUSH1	01	 	 
- stack 3: 0x5DC
- stack 2: 0x6E4
- stack 1: 0x4
- stack 0: 0x1
3106	 CA	SIGNEXTEND		 	 
- stack 2: 0x5DC
- stack 1: 0x6E4
- stack 0: 0x4
3107	 CB	ADD		 	 
- stack 1: 0x5DC
- stack 0: 0x6E8
3108	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFF
3109	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5DC
- stack 0: 0x6E8
3110	 D2	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0xFF00FF0F00FF00F000000000000000000000000000000000000000000000000
3111	 D3	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0xFF00FF0F00FF00F000000000000000000000000000000000000000000000000
- stack 0: 0xE0
3112	 D5	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0xFF00FF0
3113	 D6	PUSH2	0060	 	 
- stack 2: 0x5DC
- stack 1: 0xFF00FF0
- stack 0: 0x60
3114	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x5DC
3115	 DA	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
3116	 DC	ADD		 	 
- stack 0: 0x5E0
3117	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
3118	 DE	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x184FF0100F6FFF0012F00B40225000102440002025EFFE00115001001AA0000
3119	 DF	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x184FF0100F6FFF0012F00B40225000102440002025EFFE00115001001AA0000
- stack 0: 0xF0
3120	 E1	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x184
3121	 E2	JUMP		 	 
- stack 0: 0x5E0
3122	 184	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x5E0
3123	 185	PUSH4	0ff01000	 	 
- stack 1: 0x5E0
- stack 0: 0xFF01000
3124	 18A	PUSH2	03A0	 	 
- stack 2: 0x5E0
- stack 1: 0xFF01000
- stack 0: 0x3A0
3125	 18D	MSTORE		 	  ;; # store to x29
- stack 0: 0x5E0
3126	 18E	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
3127	 190	ADD		 	 
- stack 0: 0x5E4
3128	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3129	 192	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0xF6FFF0012F00B40225000102440002025EFFE00115001001AA000000860000
3130	 193	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0xF6FFF0012F00B40225000102440002025EFFE00115001001AA000000860000
- stack 0: 0xF0
3131	 195	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0xF6
3132	 196	JUMP		 	 
- stack 0: 0x5E4
3133	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x5E4
3134	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
3135	 F8	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0xF6FFF0012F00B40225000102440002025EFFE00115001001AA000000860000
3136	 F9	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0xF6FFF0012F00B40225000102440002025EFFE00115001001AA000000860000
- stack 0: 0xE0
3137	 FB	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0xF6FFF0
3138	 FC	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0xF6FFF0
- stack 0: 0xFFFF
3139	 FF	AND		 	 
- stack 1: 0x5E4
- stack 0: 0xFFF0
3140	 100	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0xFFF0
- stack 0: 0x1
3141	 102	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3142	 103	PUSH2	03A0	 	 
- stack 2: 0x5E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
3143	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x5E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
3144	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x5E4
- stack 0: 0xFF00FF0
3145	 108	PUSH2	03A0	 	 
- stack 2: 0x5E4
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
3146	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x5E4
3147	 10C	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3148	 10E	ADD		 	 
- stack 0: 0x5E8
3149	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3150	 110	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x12F00B40225000102440002025EFFE00115001001AA000000860000009500E8
3151	 111	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x12F00B40225000102440002025EFFE00115001001AA000000860000009500E8
- stack 0: 0xF0
3152	 113	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x12F
3153	 114	JUMP		 	 
- stack 0: 0x5E8
3154	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x5E8
3155	 130	PUSH2	0060	 	 
- stack 1: 0x5E8
- stack 0: 0x60
3156	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x5E8
- stack 0: 0xFF00FF0
3157	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E8
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
3158	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E8
- stack 0: 0xFF00FF0
3159	 13A	PUSH2	03A0	 	 
- stack 2: 0x5E8
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
3160	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x5E8
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
3161	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E8
- stack 2: 0xFF00FF0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
3162	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E8
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
3163	 144	SUB		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3164	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x14D
3165	 148	JUMPI		 	 
- stack 0: 0x5E8
3166	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x5E8
- stack 0: 0x167
3167	 14C	JUMP		 	 
- stack 0: 0x5E8
3168	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x5E8
3169	 168	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3170	 16A	ADD		 	 
- stack 0: 0x5EC
3171	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3172	 16C	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x225000102440002025EFFE00115001001AA000000860000009500E802A00000
3173	 16D	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x225000102440002025EFFE00115001001AA000000860000009500E802A00000
- stack 0: 0xF0
3174	 16F	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x225
3175	 170	JUMP		 	 
- stack 0: 0x5EC
3176	 225	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5EC
3177	 226	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
3178	 227	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x225000102440002025EFFE00115001001AA000000860000009500E802A00000
3179	 228	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x225000102440002025EFFE00115001001AA000000860000009500E802A00000
- stack 0: 0xE0
3180	 22A	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x2250001
3181	 22B	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x2250001
- stack 0: 0xFFFF
3182	 22E	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x1
3183	 22F	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x1
3184	 231	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x1
3185	 232	PUSH2	0080	 	 
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x80
3186	 235	MLOAD		 	  ;; # read from x4
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x1
3187	 236	ADD		 	  ;; # ADDI 4
- stack 1: 0x5EC
- stack 0: 0x2
3188	 237	PUSH2	0080	 	 
- stack 2: 0x5EC
- stack 1: 0x2
- stack 0: 0x80
3189	 23A	MSTORE		 	  ;; # store to x4
- stack 0: 0x5EC
3190	 23B	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3191	 23D	ADD		 	 
- stack 0: 0x5F0
3192	 23E	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3193	 23F	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x2440002025EFFE00115001001AA000000860000009500E802A0000000B40004
3194	 240	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x2440002025EFFE00115001001AA000000860000009500E802A0000000B40004
- stack 0: 0xF0
3195	 242	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x244
3196	 243	JUMP		 	 
- stack 0: 0x5F0
3197	 244	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5F0
3198	 245	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3199	 246	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x2440002025EFFE00115001001AA000000860000009500E802A0000000B40004
3200	 247	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x2440002025EFFE00115001001AA000000860000009500E802A0000000B40004
- stack 0: 0xE0
3201	 249	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x2440002
3202	 24A	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x2440002
- stack 0: 0xFFFF
3203	 24D	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x2
3204	 24E	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0x1
3205	 250	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x2
3206	 251	PUSH2	00A0	 	 
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0xA0
3207	 254	MSTORE		 	  ;; # store to x5
- stack 0: 0x5F0
3208	 255	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3209	 257	ADD		 	 
- stack 0: 0x5F4
3210	 258	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3211	 259	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x25EFFE00115001001AA000000860000009500E802A0000000B40004019700FF
3212	 25A	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x25EFFE00115001001AA000000860000009500E802A0000000B40004019700FF
- stack 0: 0xF0
3213	 25C	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x25E
3214	 25D	JUMP		 	 
- stack 0: 0x5F4
3215	 25E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x5F4
3216	 25F	PUSH2	0080	 	 
- stack 1: 0x5F4
- stack 0: 0x80
3217	 262	MLOAD		 	  ;; # read from x4
- stack 1: 0x5F4
- stack 0: 0x2
3218	 263	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3219	 268	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x2
3220	 269	PUSH2	00A0	 	 
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0xA0
3221	 26C	MLOAD		 	  ;; # read from x5
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0x2
3222	 26D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3223	 272	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0x2
3224	 273	SUB		 	 
- stack 1: 0x5F4
- stack 0: 0x0
3225	 274	PUSH2	027C	 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x27C
3226	 277	JUMPI		 	 
- stack 0: 0x5F4
3227	 278	PUSH2	0296	 ;; _neq_after_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 1: 0x5F4
- stack 0: 0x296
3228	 27B	JUMP		 	 
- stack 0: 0x5F4
3229	 296	JUMPDEST		 ;; _neq_after_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 0: 0x5F4
3230	 297	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3231	 299	ADD		 	 
- stack 0: 0x5F8
3232	 29A	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3233	 29B	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x115001001AA000000860000009500E802A0000000B40004019700FF00F6000F
3234	 29C	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x115001001AA000000860000009500E802A0000000B40004019700FF00F6000F
- stack 0: 0xF0
3235	 29E	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x115
3236	 29F	JUMP		 	 
- stack 0: 0x5F8
3237	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5F8
3238	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3239	 117	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x115001001AA000000860000009500E802A0000000B40004019700FF00F6000F
3240	 118	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x115001001AA000000860000009500E802A0000000B40004019700FF00F6000F
- stack 0: 0xE0
3241	 11A	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1150010
3242	 11B	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x1150010
- stack 0: 0xFFFF
3243	 11E	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x10
3244	 11F	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x10
- stack 0: 0x1
3245	 121	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x10
3246	 122	PUSH2	0380	 	 
- stack 2: 0x5F8
- stack 1: 0x10
- stack 0: 0x380
3247	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x5F8
3248	 126	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3249	 128	ADD		 	 
- stack 0: 0x5FC
3250	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3251	 12A	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x1AA000000860000009500E802A0000000B40004019700FF00F6000F012F0084
3252	 12B	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x1AA000000860000009500E802A0000000B40004019700FF00F6000F012F0084
- stack 0: 0xF0
3253	 12D	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x1AA
3254	 12E	JUMP		 	 
- stack 0: 0x5FC
3255	 1AA	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5FC
3256	 1AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3257	 1AC	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x1AA000000860000009500E802A0000000B40004019700FF00F6000F012F0084
3258	 1AD	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x1AA000000860000009500E802A0000000B40004019700FF00F6000F012F0084
- stack 0: 0xE0
3259	 1AF	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x1AA0000
3260	 1B0	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x1AA0000
- stack 0: 0xFFFF
3261	 1B3	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3262	 1B4	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
3263	 1B6	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3264	 1B7	PUSH2	0080	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x80
3265	 1BA	MSTORE		 	  ;; # store to x4
- stack 0: 0x5FC
3266	 1BB	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3267	 1BD	ADD		 	 
- stack 0: 0x600
3268	 1BE	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3269	 1BF	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x860000009500E802A0000000B40004019700FF00F6000F012F008402250001
3270	 1C0	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x860000009500E802A0000000B40004019700FF00F6000F012F008402250001
- stack 0: 0xF0
3271	 1C2	SHR		 	 
- stack 1: 0x600
- stack 0: 0x86
3272	 1C3	JUMP		 	 
- stack 0: 0x600
3273	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x600
3274	 87	DUP1		 	 
- stack 1: 0x600
- stack 0: 0x600
3275	 88	PUSH2	0020	 	 
- stack 2: 0x600
- stack 1: 0x600
- stack 0: 0x20
3276	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x600
3277	 8C	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3278	 8E	ADD		 	 
- stack 0: 0x604
3279	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3280	 90	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x9500E802A0000000B40004019700FF00F6000F012F00840225000102440002
3281	 91	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x9500E802A0000000B40004019700FF00F6000F012F00840225000102440002
- stack 0: 0xF0
3282	 93	SHR		 	 
- stack 1: 0x604
- stack 0: 0x95
3283	 94	JUMP		 	 
- stack 0: 0x604
3284	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x604
3285	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3286	 97	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x9500E802A0000000B40004019700FF00F6000F012F00840225000102440002
3287	 98	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x9500E802A0000000B40004019700FF00F6000F012F00840225000102440002
- stack 0: 0xE0
3288	 9A	SHR		 	 
- stack 1: 0x604
- stack 0: 0x9500E8
3289	 9B	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x9500E8
- stack 0: 0xFFFF
3290	 9E	AND		 	 
- stack 1: 0x604
- stack 0: 0xE8
3291	 9F	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0xE8
- stack 0: 0x1
3292	 A1	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0xE8
3293	 A2	PUSH2	0020	 	 
- stack 2: 0x604
- stack 1: 0xE8
- stack 0: 0x20
3294	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x604
- stack 1: 0xE8
- stack 0: 0x600
3295	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x604
- stack 0: 0x6E8
3296	 A7	PUSH2	0020	 	 
- stack 2: 0x604
- stack 1: 0x6E8
- stack 0: 0x20
3297	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x604
3298	 AB	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3299	 AD	ADD		 	 
- stack 0: 0x608
3300	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3301	 AF	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x2A0000000B40004019700FF00F6000F012F00840225000102440002025EFFDC
3302	 B0	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x2A0000000B40004019700FF00F6000F012F00840225000102440002025EFFDC
- stack 0: 0xF0
3303	 B2	SHR		 	 
- stack 1: 0x608
- stack 0: 0x2A0
3304	 B3	JUMP		 	 
- stack 0: 0x608
3305	 2A0	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x608
3306	 2A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3307	 2A2	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x2A0000000B40004019700FF00F6000F012F00840225000102440002025EFFDC
3308	 2A3	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x2A0000000B40004019700FF00F6000F012F00840225000102440002025EFFDC
- stack 0: 0xE0
3309	 2A5	SHR		 	 
- stack 1: 0x608
- stack 0: 0x2A00000
3310	 2A6	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x2A00000
- stack 0: 0xFFFF
3311	 2A9	AND		 	 
- stack 1: 0x608
- stack 0: 0x0
3312	 2AA	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x1
3313	 2AC	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x0
3314	 2AD	POP		 	 
- stack 0: 0x608
3315	 2AE	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3316	 2B0	ADD		 	 
- stack 0: 0x60C
3317	 2B1	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3318	 2B2	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xB40004019700FF00F6000F012F00840225000102440002025EFFDC01150011
3319	 2B3	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0xB40004019700FF00F6000F012F00840225000102440002025EFFDC01150011
- stack 0: 0xF0
3320	 2B5	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xB4
3321	 2B6	JUMP		 	 
- stack 0: 0x60C
3322	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x60C
3323	 B5	PUSH2	0020	 	 
- stack 1: 0x60C
- stack 0: 0x20
3324	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x60C
- stack 0: 0x6E8
3325	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFF
3326	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x6E8
3327	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x60C
- stack 1: 0x6E8
- stack 0: 0x60C
3328	 C0	MLOAD		 	 
- stack 2: 0x60C
- stack 1: 0x6E8
- stack 0: 0xB40004019700FF00F6000F012F00840225000102440002025EFFDC01150011
3329	 C1	PUSH1	E0	 	 
- stack 3: 0x60C
- stack 2: 0x6E8
- stack 1: 0xB40004019700FF00F6000F012F00840225000102440002025EFFDC01150011
- stack 0: 0xE0
3330	 C3	SHR		 	 
- stack 2: 0x60C
- stack 1: 0x6E8
- stack 0: 0xB40004
3331	 C4	PUSH2	FFFF	 	 
- stack 3: 0x60C
- stack 2: 0x6E8
- stack 1: 0xB40004
- stack 0: 0xFFFF
3332	 C7	AND		 	 
- stack 2: 0x60C
- stack 1: 0x6E8
- stack 0: 0x4
3333	 C8	PUSH1	01	 	 
- stack 3: 0x60C
- stack 2: 0x6E8
- stack 1: 0x4
- stack 0: 0x1
3334	 CA	SIGNEXTEND		 	 
- stack 2: 0x60C
- stack 1: 0x6E8
- stack 0: 0x4
3335	 CB	ADD		 	 
- stack 1: 0x60C
- stack 0: 0x6EC
3336	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFF
3337	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x6EC
3338	 D2	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xF00FF00F00000000000000000000000000000000000000000000000000000000
3339	 D3	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0xF00FF00F00000000000000000000000000000000000000000000000000000000
- stack 0: 0xE0
3340	 D5	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xF00FF00F
3341	 D6	PUSH2	0060	 	 
- stack 2: 0x60C
- stack 1: 0xF00FF00F
- stack 0: 0x60
3342	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x60C
3343	 DA	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3344	 DC	ADD		 	 
- stack 0: 0x610
3345	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3346	 DE	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x19700FF00F6000F012F00840225000102440002025EFFDC0115001101AA0000
3347	 DF	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x19700FF00F6000F012F00840225000102440002025EFFDC0115001101AA0000
- stack 0: 0xF0
3348	 E1	SHR		 	 
- stack 1: 0x610
- stack 0: 0x197
3349	 E2	JUMP		 	 
- stack 0: 0x610
3350	 197	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x610
3351	 198	PUSH4	f00ff000	 	 
- stack 1: 0x610
- stack 0: 0xF00FF000
3352	 19D	PUSH2	03A0	 	 
- stack 2: 0x610
- stack 1: 0xF00FF000
- stack 0: 0x3A0
3353	 1A0	MSTORE		 	  ;; # store to x29
- stack 0: 0x610
3354	 1A1	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3355	 1A3	ADD		 	 
- stack 0: 0x614
3356	 1A4	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3357	 1A5	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0xF6000F012F00840225000102440002025EFFDC0115001101AA000000860000
3358	 1A6	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0xF6000F012F00840225000102440002025EFFDC0115001101AA000000860000
- stack 0: 0xF0
3359	 1A8	SHR		 	 
- stack 1: 0x614
- stack 0: 0xF6
3360	 1A9	JUMP		 	 
- stack 0: 0x614
3361	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x614
3362	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3363	 F8	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0xF6000F012F00840225000102440002025EFFDC0115001101AA000000860000
3364	 F9	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0xF6000F012F00840225000102440002025EFFDC0115001101AA000000860000
- stack 0: 0xE0
3365	 FB	SHR		 	 
- stack 1: 0x614
- stack 0: 0xF6000F
3366	 FC	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0xF6000F
- stack 0: 0xFFFF
3367	 FF	AND		 	 
- stack 1: 0x614
- stack 0: 0xF
3368	 100	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0xF
- stack 0: 0x1
3369	 102	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0xF
3370	 103	PUSH2	03A0	 	 
- stack 2: 0x614
- stack 1: 0xF
- stack 0: 0x3A0
3371	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x614
- stack 1: 0xF
- stack 0: 0xF00FF000
3372	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x614
- stack 0: 0xF00FF00F
3373	 108	PUSH2	03A0	 	 
- stack 2: 0x614
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
3374	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x614
3375	 10C	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3376	 10E	ADD		 	 
- stack 0: 0x618
3377	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3378	 110	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x12F00840225000102440002025EFFDC0115001101AA000000860000009500B0
3379	 111	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x12F00840225000102440002025EFFDC0115001101AA000000860000009500B0
- stack 0: 0xF0
3380	 113	SHR		 	 
- stack 1: 0x618
- stack 0: 0x12F
3381	 114	JUMP		 	 
- stack 0: 0x618
3382	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x618
3383	 130	PUSH2	0060	 	 
- stack 1: 0x618
- stack 0: 0x60
3384	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x618
- stack 0: 0xF00FF00F
3385	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x618
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
3386	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x618
- stack 0: 0xF00FF00F
3387	 13A	PUSH2	03A0	 	 
- stack 2: 0x618
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
3388	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x618
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
3389	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x618
- stack 2: 0xF00FF00F
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
3390	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x618
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
3391	 144	SUB		 	 
- stack 1: 0x618
- stack 0: 0x0
3392	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x14D
3393	 148	JUMPI		 	 
- stack 0: 0x618
3394	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x618
- stack 0: 0x167
3395	 14C	JUMP		 	 
- stack 0: 0x618
3396	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x618
3397	 168	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3398	 16A	ADD		 	 
- stack 0: 0x61C
3399	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3400	 16C	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x225000102440002025EFFDC0115001101AA000000860000009500B002A00000
3401	 16D	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x225000102440002025EFFDC0115001101AA000000860000009500B002A00000
- stack 0: 0xF0
3402	 16F	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x225
3403	 170	JUMP		 	 
- stack 0: 0x61C
3404	 225	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x61C
3405	 226	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3406	 227	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x225000102440002025EFFDC0115001101AA000000860000009500B002A00000
3407	 228	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x225000102440002025EFFDC0115001101AA000000860000009500B002A00000
- stack 0: 0xE0
3408	 22A	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x2250001
3409	 22B	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x2250001
- stack 0: 0xFFFF
3410	 22E	AND		 	 
- stack 1: 0x61C
- stack 0: 0x1
3411	 22F	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x1
3412	 231	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x1
3413	 232	PUSH2	0080	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x80
3414	 235	MLOAD		 	  ;; # read from x4
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x0
3415	 236	ADD		 	  ;; # ADDI 4
- stack 1: 0x61C
- stack 0: 0x1
3416	 237	PUSH2	0080	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x80
3417	 23A	MSTORE		 	  ;; # store to x4
- stack 0: 0x61C
3418	 23B	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3419	 23D	ADD		 	 
- stack 0: 0x620
3420	 23E	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3421	 23F	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x2440002025EFFDC0115001101AA000000860000009500B002A0000002A00000
3422	 240	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x2440002025EFFDC0115001101AA000000860000009500B002A0000002A00000
- stack 0: 0xF0
3423	 242	SHR		 	 
- stack 1: 0x620
- stack 0: 0x244
3424	 243	JUMP		 	 
- stack 0: 0x620
3425	 244	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x620
3426	 245	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3427	 246	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x2440002025EFFDC0115001101AA000000860000009500B002A0000002A00000
3428	 247	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x2440002025EFFDC0115001101AA000000860000009500B002A0000002A00000
- stack 0: 0xE0
3429	 249	SHR		 	 
- stack 1: 0x620
- stack 0: 0x2440002
3430	 24A	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x2440002
- stack 0: 0xFFFF
3431	 24D	AND		 	 
- stack 1: 0x620
- stack 0: 0x2
3432	 24E	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0x1
3433	 250	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x2
3434	 251	PUSH2	00A0	 	 
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0xA0
3435	 254	MSTORE		 	  ;; # store to x5
- stack 0: 0x620
3436	 255	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3437	 257	ADD		 	 
- stack 0: 0x624
3438	 258	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3439	 259	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x25EFFDC0115001101AA000000860000009500B002A0000002A0000000B40004
3440	 25A	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x25EFFDC0115001101AA000000860000009500B002A0000002A0000000B40004
- stack 0: 0xF0
3441	 25C	SHR		 	 
- stack 1: 0x624
- stack 0: 0x25E
3442	 25D	JUMP		 	 
- stack 0: 0x624
3443	 25E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x624
3444	 25F	PUSH2	0080	 	 
- stack 1: 0x624
- stack 0: 0x80
3445	 262	MLOAD		 	  ;; # read from x4
- stack 1: 0x624
- stack 0: 0x1
3446	 263	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3447	 268	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x1
3448	 269	PUSH2	00A0	 	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0xA0
3449	 26C	MLOAD		 	  ;; # read from x5
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0x2
3450	 26D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x624
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3451	 272	AND		 	  ;; # mask to 32 bits
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0x2
3452	 273	SUB		 	 
- stack 1: 0x624
- stack 0: 0x1
3453	 274	PUSH2	027C	 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0x27C
3454	 277	JUMPI		 	 
- stack 0: 0x624
3455	 27C	JUMPDEST		 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 0: 0x624
3456	 27D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3457	 27E	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x25EFFDC0115001101AA000000860000009500B002A0000002A0000000B40004
3458	 27F	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x25EFFDC0115001101AA000000860000009500B002A0000002A0000000B40004
- stack 0: 0xE0
3459	 281	SHR		 	 
- stack 1: 0x624
- stack 0: 0x25EFFDC
3460	 282	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x25EFFDC
- stack 0: 0xFFFF
3461	 285	AND		 	 
- stack 1: 0x624
- stack 0: 0xFFDC
3462	 286	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0xFFDC
- stack 0: 0x1
3463	 288	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
3464	 289	ADD		 	 
- stack 0: 0x600
3465	 28A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x600
- stack 0: 0xFFFFFFFF
3466	 28F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x600
3467	 290	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3468	 291	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x860000009500E802A0000000B40004019700FF00F6000F012F008402250001
3469	 292	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x860000009500E802A0000000B40004019700FF00F6000F012F008402250001
- stack 0: 0xF0
3470	 294	SHR		 	 
- stack 1: 0x600
- stack 0: 0x86
3471	 295	JUMP		 	 
- stack 0: 0x600
3472	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x600
3473	 87	DUP1		 	 
- stack 1: 0x600
- stack 0: 0x600
3474	 88	PUSH2	0020	 	 
- stack 2: 0x600
- stack 1: 0x600
- stack 0: 0x20
3475	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x600
3476	 8C	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3477	 8E	ADD		 	 
- stack 0: 0x604
3478	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3479	 90	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x9500E802A0000000B40004019700FF00F6000F012F00840225000102440002
3480	 91	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x9500E802A0000000B40004019700FF00F6000F012F00840225000102440002
- stack 0: 0xF0
3481	 93	SHR		 	 
- stack 1: 0x604
- stack 0: 0x95
3482	 94	JUMP		 	 
- stack 0: 0x604
3483	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x604
3484	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3485	 97	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x9500E802A0000000B40004019700FF00F6000F012F00840225000102440002
3486	 98	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x9500E802A0000000B40004019700FF00F6000F012F00840225000102440002
- stack 0: 0xE0
3487	 9A	SHR		 	 
- stack 1: 0x604
- stack 0: 0x9500E8
3488	 9B	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x9500E8
- stack 0: 0xFFFF
3489	 9E	AND		 	 
- stack 1: 0x604
- stack 0: 0xE8
3490	 9F	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0xE8
- stack 0: 0x1
3491	 A1	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0xE8
3492	 A2	PUSH2	0020	 	 
- stack 2: 0x604
- stack 1: 0xE8
- stack 0: 0x20
3493	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x604
- stack 1: 0xE8
- stack 0: 0x600
3494	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x604
- stack 0: 0x6E8
3495	 A7	PUSH2	0020	 	 
- stack 2: 0x604
- stack 1: 0x6E8
- stack 0: 0x20
3496	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x604
3497	 AB	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3498	 AD	ADD		 	 
- stack 0: 0x608
3499	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3500	 AF	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x2A0000000B40004019700FF00F6000F012F00840225000102440002025EFFDC
3501	 B0	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x2A0000000B40004019700FF00F6000F012F00840225000102440002025EFFDC
- stack 0: 0xF0
3502	 B2	SHR		 	 
- stack 1: 0x608
- stack 0: 0x2A0
3503	 B3	JUMP		 	 
- stack 0: 0x608
3504	 2A0	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x608
3505	 2A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3506	 2A2	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x2A0000000B40004019700FF00F6000F012F00840225000102440002025EFFDC
3507	 2A3	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x2A0000000B40004019700FF00F6000F012F00840225000102440002025EFFDC
- stack 0: 0xE0
3508	 2A5	SHR		 	 
- stack 1: 0x608
- stack 0: 0x2A00000
3509	 2A6	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x2A00000
- stack 0: 0xFFFF
3510	 2A9	AND		 	 
- stack 1: 0x608
- stack 0: 0x0
3511	 2AA	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x1
3512	 2AC	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x0
3513	 2AD	POP		 	 
- stack 0: 0x608
3514	 2AE	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3515	 2B0	ADD		 	 
- stack 0: 0x60C
3516	 2B1	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3517	 2B2	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xB40004019700FF00F6000F012F00840225000102440002025EFFDC01150011
3518	 2B3	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0xB40004019700FF00F6000F012F00840225000102440002025EFFDC01150011
- stack 0: 0xF0
3519	 2B5	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xB4
3520	 2B6	JUMP		 	 
- stack 0: 0x60C
3521	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x60C
3522	 B5	PUSH2	0020	 	 
- stack 1: 0x60C
- stack 0: 0x20
3523	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x60C
- stack 0: 0x6E8
3524	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFF
3525	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x6E8
3526	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x60C
- stack 1: 0x6E8
- stack 0: 0x60C
3527	 C0	MLOAD		 	 
- stack 2: 0x60C
- stack 1: 0x6E8
- stack 0: 0xB40004019700FF00F6000F012F00840225000102440002025EFFDC01150011
3528	 C1	PUSH1	E0	 	 
- stack 3: 0x60C
- stack 2: 0x6E8
- stack 1: 0xB40004019700FF00F6000F012F00840225000102440002025EFFDC01150011
- stack 0: 0xE0
3529	 C3	SHR		 	 
- stack 2: 0x60C
- stack 1: 0x6E8
- stack 0: 0xB40004
3530	 C4	PUSH2	FFFF	 	 
- stack 3: 0x60C
- stack 2: 0x6E8
- stack 1: 0xB40004
- stack 0: 0xFFFF
3531	 C7	AND		 	 
- stack 2: 0x60C
- stack 1: 0x6E8
- stack 0: 0x4
3532	 C8	PUSH1	01	 	 
- stack 3: 0x60C
- stack 2: 0x6E8
- stack 1: 0x4
- stack 0: 0x1
3533	 CA	SIGNEXTEND		 	 
- stack 2: 0x60C
- stack 1: 0x6E8
- stack 0: 0x4
3534	 CB	ADD		 	 
- stack 1: 0x60C
- stack 0: 0x6EC
3535	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFF
3536	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x6EC
3537	 D2	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xF00FF00F00000000000000000000000000000000000000000000000000000000
3538	 D3	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0xF00FF00F00000000000000000000000000000000000000000000000000000000
- stack 0: 0xE0
3539	 D5	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xF00FF00F
3540	 D6	PUSH2	0060	 	 
- stack 2: 0x60C
- stack 1: 0xF00FF00F
- stack 0: 0x60
3541	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x60C
3542	 DA	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3543	 DC	ADD		 	 
- stack 0: 0x610
3544	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3545	 DE	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x19700FF00F6000F012F00840225000102440002025EFFDC0115001101AA0000
3546	 DF	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x19700FF00F6000F012F00840225000102440002025EFFDC0115001101AA0000
- stack 0: 0xF0
3547	 E1	SHR		 	 
- stack 1: 0x610
- stack 0: 0x197
3548	 E2	JUMP		 	 
- stack 0: 0x610
3549	 197	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x610
3550	 198	PUSH4	f00ff000	 	 
- stack 1: 0x610
- stack 0: 0xF00FF000
3551	 19D	PUSH2	03A0	 	 
- stack 2: 0x610
- stack 1: 0xF00FF000
- stack 0: 0x3A0
3552	 1A0	MSTORE		 	  ;; # store to x29
- stack 0: 0x610
3553	 1A1	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3554	 1A3	ADD		 	 
- stack 0: 0x614
3555	 1A4	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3556	 1A5	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0xF6000F012F00840225000102440002025EFFDC0115001101AA000000860000
3557	 1A6	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0xF6000F012F00840225000102440002025EFFDC0115001101AA000000860000
- stack 0: 0xF0
3558	 1A8	SHR		 	 
- stack 1: 0x614
- stack 0: 0xF6
3559	 1A9	JUMP		 	 
- stack 0: 0x614
3560	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x614
3561	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3562	 F8	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0xF6000F012F00840225000102440002025EFFDC0115001101AA000000860000
3563	 F9	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0xF6000F012F00840225000102440002025EFFDC0115001101AA000000860000
- stack 0: 0xE0
3564	 FB	SHR		 	 
- stack 1: 0x614
- stack 0: 0xF6000F
3565	 FC	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0xF6000F
- stack 0: 0xFFFF
3566	 FF	AND		 	 
- stack 1: 0x614
- stack 0: 0xF
3567	 100	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0xF
- stack 0: 0x1
3568	 102	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0xF
3569	 103	PUSH2	03A0	 	 
- stack 2: 0x614
- stack 1: 0xF
- stack 0: 0x3A0
3570	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x614
- stack 1: 0xF
- stack 0: 0xF00FF000
3571	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x614
- stack 0: 0xF00FF00F
3572	 108	PUSH2	03A0	 	 
- stack 2: 0x614
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
3573	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x614
3574	 10C	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3575	 10E	ADD		 	 
- stack 0: 0x618
3576	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3577	 110	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x12F00840225000102440002025EFFDC0115001101AA000000860000009500B0
3578	 111	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x12F00840225000102440002025EFFDC0115001101AA000000860000009500B0
- stack 0: 0xF0
3579	 113	SHR		 	 
- stack 1: 0x618
- stack 0: 0x12F
3580	 114	JUMP		 	 
- stack 0: 0x618
3581	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x618
3582	 130	PUSH2	0060	 	 
- stack 1: 0x618
- stack 0: 0x60
3583	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x618
- stack 0: 0xF00FF00F
3584	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x618
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
3585	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x618
- stack 0: 0xF00FF00F
3586	 13A	PUSH2	03A0	 	 
- stack 2: 0x618
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
3587	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x618
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
3588	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x618
- stack 2: 0xF00FF00F
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
3589	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x618
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
3590	 144	SUB		 	 
- stack 1: 0x618
- stack 0: 0x0
3591	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x14D
3592	 148	JUMPI		 	 
- stack 0: 0x618
3593	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x618
- stack 0: 0x167
3594	 14C	JUMP		 	 
- stack 0: 0x618
3595	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x618
3596	 168	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3597	 16A	ADD		 	 
- stack 0: 0x61C
3598	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3599	 16C	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x225000102440002025EFFDC0115001101AA000000860000009500B002A00000
3600	 16D	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x225000102440002025EFFDC0115001101AA000000860000009500B002A00000
- stack 0: 0xF0
3601	 16F	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x225
3602	 170	JUMP		 	 
- stack 0: 0x61C
3603	 225	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x61C
3604	 226	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3605	 227	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x225000102440002025EFFDC0115001101AA000000860000009500B002A00000
3606	 228	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x225000102440002025EFFDC0115001101AA000000860000009500B002A00000
- stack 0: 0xE0
3607	 22A	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x2250001
3608	 22B	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x2250001
- stack 0: 0xFFFF
3609	 22E	AND		 	 
- stack 1: 0x61C
- stack 0: 0x1
3610	 22F	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x1
3611	 231	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x1
3612	 232	PUSH2	0080	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x80
3613	 235	MLOAD		 	  ;; # read from x4
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x1
3614	 236	ADD		 	  ;; # ADDI 4
- stack 1: 0x61C
- stack 0: 0x2
3615	 237	PUSH2	0080	 	 
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0x80
3616	 23A	MSTORE		 	  ;; # store to x4
- stack 0: 0x61C
3617	 23B	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3618	 23D	ADD		 	 
- stack 0: 0x620
3619	 23E	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3620	 23F	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x2440002025EFFDC0115001101AA000000860000009500B002A0000002A00000
3621	 240	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x2440002025EFFDC0115001101AA000000860000009500B002A0000002A00000
- stack 0: 0xF0
3622	 242	SHR		 	 
- stack 1: 0x620
- stack 0: 0x244
3623	 243	JUMP		 	 
- stack 0: 0x620
3624	 244	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x620
3625	 245	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3626	 246	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x2440002025EFFDC0115001101AA000000860000009500B002A0000002A00000
3627	 247	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x2440002025EFFDC0115001101AA000000860000009500B002A0000002A00000
- stack 0: 0xE0
3628	 249	SHR		 	 
- stack 1: 0x620
- stack 0: 0x2440002
3629	 24A	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x2440002
- stack 0: 0xFFFF
3630	 24D	AND		 	 
- stack 1: 0x620
- stack 0: 0x2
3631	 24E	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0x1
3632	 250	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x2
3633	 251	PUSH2	00A0	 	 
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0xA0
3634	 254	MSTORE		 	  ;; # store to x5
- stack 0: 0x620
3635	 255	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3636	 257	ADD		 	 
- stack 0: 0x624
3637	 258	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3638	 259	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x25EFFDC0115001101AA000000860000009500B002A0000002A0000000B40004
3639	 25A	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x25EFFDC0115001101AA000000860000009500B002A0000002A0000000B40004
- stack 0: 0xF0
3640	 25C	SHR		 	 
- stack 1: 0x624
- stack 0: 0x25E
3641	 25D	JUMP		 	 
- stack 0: 0x624
3642	 25E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x624
3643	 25F	PUSH2	0080	 	 
- stack 1: 0x624
- stack 0: 0x80
3644	 262	MLOAD		 	  ;; # read from x4
- stack 1: 0x624
- stack 0: 0x2
3645	 263	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3646	 268	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x2
3647	 269	PUSH2	00A0	 	 
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0xA0
3648	 26C	MLOAD		 	  ;; # read from x5
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0x2
3649	 26D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x624
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3650	 272	AND		 	  ;; # mask to 32 bits
- stack 2: 0x624
- stack 1: 0x2
- stack 0: 0x2
3651	 273	SUB		 	 
- stack 1: 0x624
- stack 0: 0x0
3652	 274	PUSH2	027C	 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x27C
3653	 277	JUMPI		 	 
- stack 0: 0x624
3654	 278	PUSH2	0296	 ;; _neq_after_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 1: 0x624
- stack 0: 0x296
3655	 27B	JUMP		 	 
- stack 0: 0x624
3656	 296	JUMPDEST		 ;; _neq_after_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 0: 0x624
3657	 297	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3658	 299	ADD		 	 
- stack 0: 0x628
3659	 29A	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3660	 29B	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x115001101AA000000860000009500B002A0000002A0000000B400040171F010
3661	 29C	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x115001101AA000000860000009500B002A0000002A0000000B400040171F010
- stack 0: 0xF0
3662	 29E	SHR		 	 
- stack 1: 0x628
- stack 0: 0x115
3663	 29F	JUMP		 	 
- stack 0: 0x628
3664	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x628
3665	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3666	 117	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x115001101AA000000860000009500B002A0000002A0000000B400040171F010
3667	 118	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x115001101AA000000860000009500B002A0000002A0000000B400040171F010
- stack 0: 0xE0
3668	 11A	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1150011
3669	 11B	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x1150011
- stack 0: 0xFFFF
3670	 11E	AND		 	 
- stack 1: 0x628
- stack 0: 0x11
3671	 11F	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x11
- stack 0: 0x1
3672	 121	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x11
3673	 122	PUSH2	0380	 	 
- stack 2: 0x628
- stack 1: 0x11
- stack 0: 0x380
3674	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x628
3675	 126	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3676	 128	ADD		 	 
- stack 0: 0x62C
3677	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3678	 12A	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x1AA000000860000009500B002A0000002A0000000B400040171F01000F6FF00
3679	 12B	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x1AA000000860000009500B002A0000002A0000000B400040171F01000F6FF00
- stack 0: 0xF0
3680	 12D	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x1AA
3681	 12E	JUMP		 	 
- stack 0: 0x62C
3682	 1AA	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x62C
3683	 1AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3684	 1AC	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x1AA000000860000009500B002A0000002A0000000B400040171F01000F6FF00
3685	 1AD	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x1AA000000860000009500B002A0000002A0000000B400040171F01000F6FF00
- stack 0: 0xE0
3686	 1AF	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x1AA0000
3687	 1B0	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x1AA0000
- stack 0: 0xFFFF
3688	 1B3	AND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3689	 1B4	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x1
3690	 1B6	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3691	 1B7	PUSH2	0080	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x80
3692	 1BA	MSTORE		 	  ;; # store to x4
- stack 0: 0x62C
3693	 1BB	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3694	 1BD	ADD		 	 
- stack 0: 0x630
3695	 1BE	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3696	 1BF	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x860000009500B002A0000002A0000000B400040171F01000F6FF00012F0050
3697	 1C0	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x860000009500B002A0000002A0000000B400040171F01000F6FF00012F0050
- stack 0: 0xF0
3698	 1C2	SHR		 	 
- stack 1: 0x630
- stack 0: 0x86
3699	 1C3	JUMP		 	 
- stack 0: 0x630
3700	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x630
3701	 87	DUP1		 	 
- stack 1: 0x630
- stack 0: 0x630
3702	 88	PUSH2	0020	 	 
- stack 2: 0x630
- stack 1: 0x630
- stack 0: 0x20
3703	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x630
3704	 8C	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3705	 8E	ADD		 	 
- stack 0: 0x634
3706	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3707	 90	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x9500B002A0000002A0000000B400040171F01000F6FF00012F005002250001
3708	 91	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x9500B002A0000002A0000000B400040171F01000F6FF00012F005002250001
- stack 0: 0xF0
3709	 93	SHR		 	 
- stack 1: 0x634
- stack 0: 0x95
3710	 94	JUMP		 	 
- stack 0: 0x634
3711	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x634
3712	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3713	 97	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x9500B002A0000002A0000000B400040171F01000F6FF00012F005002250001
3714	 98	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x9500B002A0000002A0000000B400040171F01000F6FF00012F005002250001
- stack 0: 0xE0
3715	 9A	SHR		 	 
- stack 1: 0x634
- stack 0: 0x9500B0
3716	 9B	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x9500B0
- stack 0: 0xFFFF
3717	 9E	AND		 	 
- stack 1: 0x634
- stack 0: 0xB0
3718	 9F	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0xB0
- stack 0: 0x1
3719	 A1	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0xB0
3720	 A2	PUSH2	0020	 	 
- stack 2: 0x634
- stack 1: 0xB0
- stack 0: 0x20
3721	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x634
- stack 1: 0xB0
- stack 0: 0x630
3722	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x634
- stack 0: 0x6E0
3723	 A7	PUSH2	0020	 	 
- stack 2: 0x634
- stack 1: 0x6E0
- stack 0: 0x20
3724	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x634
3725	 AB	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3726	 AD	ADD		 	 
- stack 0: 0x638
3727	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3728	 AF	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x2A0000002A0000000B400040171F01000F6FF00012F00500225000102440002
3729	 B0	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x2A0000002A0000000B400040171F01000F6FF00012F00500225000102440002
- stack 0: 0xF0
3730	 B2	SHR		 	 
- stack 1: 0x638
- stack 0: 0x2A0
3731	 B3	JUMP		 	 
- stack 0: 0x638
3732	 2A0	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
3733	 2A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3734	 2A2	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x2A0000002A0000000B400040171F01000F6FF00012F00500225000102440002
3735	 2A3	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x2A0000002A0000000B400040171F01000F6FF00012F00500225000102440002
- stack 0: 0xE0
3736	 2A5	SHR		 	 
- stack 1: 0x638
- stack 0: 0x2A00000
3737	 2A6	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x2A00000
- stack 0: 0xFFFF
3738	 2A9	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
3739	 2AA	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
3740	 2AC	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
3741	 2AD	POP		 	 
- stack 0: 0x638
3742	 2AE	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3743	 2B0	ADD		 	 
- stack 0: 0x63C
3744	 2B1	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3745	 2B2	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x2A0000000B400040171F01000F6FF00012F00500225000102440002025EFFD8
3746	 2B3	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x2A0000000B400040171F01000F6FF00012F00500225000102440002025EFFD8
- stack 0: 0xF0
3747	 2B5	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x2A0
3748	 2B6	JUMP		 	 
- stack 0: 0x63C
3749	 2A0	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x63C
3750	 2A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3751	 2A2	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x2A0000000B400040171F01000F6FF00012F00500225000102440002025EFFD8
3752	 2A3	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x2A0000000B400040171F01000F6FF00012F00500225000102440002025EFFD8
- stack 0: 0xE0
3753	 2A5	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x2A00000
3754	 2A6	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x2A00000
- stack 0: 0xFFFF
3755	 2A9	AND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3756	 2AA	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x1
3757	 2AC	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3758	 2AD	POP		 	 
- stack 0: 0x63C
3759	 2AE	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3760	 2B0	ADD		 	 
- stack 0: 0x640
3761	 2B1	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3762	 2B2	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xB400040171F01000F6FF00012F00500225000102440002025EFFD802B70000
3763	 2B3	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0xB400040171F01000F6FF00012F00500225000102440002025EFFD802B70000
- stack 0: 0xF0
3764	 2B5	SHR		 	 
- stack 1: 0x640
- stack 0: 0xB4
3765	 2B6	JUMP		 	 
- stack 0: 0x640
3766	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x640
3767	 B5	PUSH2	0020	 	 
- stack 1: 0x640
- stack 0: 0x20
3768	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x640
- stack 0: 0x6E0
3769	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x640
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
3770	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x640
- stack 0: 0x6E0
3771	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x640
- stack 1: 0x6E0
- stack 0: 0x640
3772	 C0	MLOAD		 	 
- stack 2: 0x640
- stack 1: 0x6E0
- stack 0: 0xB400040171F01000F6FF00012F00500225000102440002025EFFD802B70000
3773	 C1	PUSH1	E0	 	 
- stack 3: 0x640
- stack 2: 0x6E0
- stack 1: 0xB400040171F01000F6FF00012F00500225000102440002025EFFD802B70000
- stack 0: 0xE0
3774	 C3	SHR		 	 
- stack 2: 0x640
- stack 1: 0x6E0
- stack 0: 0xB40004
3775	 C4	PUSH2	FFFF	 	 
- stack 3: 0x640
- stack 2: 0x6E0
- stack 1: 0xB40004
- stack 0: 0xFFFF
3776	 C7	AND		 	 
- stack 2: 0x640
- stack 1: 0x6E0
- stack 0: 0x4
3777	 C8	PUSH1	01	 	 
- stack 3: 0x640
- stack 2: 0x6E0
- stack 1: 0x4
- stack 0: 0x1
3778	 CA	SIGNEXTEND		 	 
- stack 2: 0x640
- stack 1: 0x6E0
- stack 0: 0x4
3779	 CB	ADD		 	 
- stack 1: 0x640
- stack 0: 0x6E4
3780	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x640
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFF
3781	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x640
- stack 0: 0x6E4
3782	 D2	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xFF00FF000FF00FF0F00FF00F0000000000000000000000000000000000000000
3783	 D3	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0xFF00FF000FF00FF0F00FF00F0000000000000000000000000000000000000000
- stack 0: 0xE0
3784	 D5	SHR		 	 
- stack 1: 0x640
- stack 0: 0xFF00FF00
3785	 D6	PUSH2	0060	 	 
- stack 2: 0x640
- stack 1: 0xFF00FF00
- stack 0: 0x60
3786	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x640
3787	 DA	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3788	 DC	ADD		 	 
- stack 0: 0x644
3789	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3790	 DE	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x171F01000F6FF00012F00500225000102440002025EFFD802B7000002C60084
3791	 DF	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x171F01000F6FF00012F00500225000102440002025EFFD802B7000002C60084
- stack 0: 0xF0
3792	 E1	SHR		 	 
- stack 1: 0x644
- stack 0: 0x171
3793	 E2	JUMP		 	 
- stack 0: 0x644
3794	 171	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x644
3795	 172	PUSH4	ff010000	 	 
- stack 1: 0x644
- stack 0: 0xFF010000
3796	 177	PUSH2	03A0	 	 
- stack 2: 0x644
- stack 1: 0xFF010000
- stack 0: 0x3A0
3797	 17A	MSTORE		 	  ;; # store to x29
- stack 0: 0x644
3798	 17B	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3799	 17D	ADD		 	 
- stack 0: 0x648
3800	 17E	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3801	 17F	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0xF6FF00012F00500225000102440002025EFFD802B7000002C6008402E50000
3802	 180	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0xF6FF00012F00500225000102440002025EFFD802B7000002C6008402E50000
- stack 0: 0xF0
3803	 182	SHR		 	 
- stack 1: 0x648
- stack 0: 0xF6
3804	 183	JUMP		 	 
- stack 0: 0x648
3805	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x648
3806	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3807	 F8	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0xF6FF00012F00500225000102440002025EFFD802B7000002C6008402E50000
3808	 F9	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0xF6FF00012F00500225000102440002025EFFD802B7000002C6008402E50000
- stack 0: 0xE0
3809	 FB	SHR		 	 
- stack 1: 0x648
- stack 0: 0xF6FF00
3810	 FC	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0xF6FF00
- stack 0: 0xFFFF
3811	 FF	AND		 	 
- stack 1: 0x648
- stack 0: 0xFF00
3812	 100	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0xFF00
- stack 0: 0x1
3813	 102	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3814	 103	PUSH2	03A0	 	 
- stack 2: 0x648
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
3815	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x648
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
3816	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x648
- stack 0: 0xFF00FF00
3817	 108	PUSH2	03A0	 	 
- stack 2: 0x648
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
3818	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x648
3819	 10C	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3820	 10E	ADD		 	 
- stack 0: 0x64C
3821	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3822	 110	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x12F00500225000102440002025EFFD802B7000002C6008402E5000003140002
3823	 111	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x12F00500225000102440002025EFFD802B7000002C6008402E5000003140002
- stack 0: 0xF0
3824	 113	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x12F
3825	 114	JUMP		 	 
- stack 0: 0x64C
3826	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x64C
3827	 130	PUSH2	0060	 	 
- stack 1: 0x64C
- stack 0: 0x60
3828	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x64C
- stack 0: 0xFF00FF00
3829	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x64C
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
3830	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x64C
- stack 0: 0xFF00FF00
3831	 13A	PUSH2	03A0	 	 
- stack 2: 0x64C
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
3832	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x64C
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
3833	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x64C
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
3834	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x64C
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
3835	 144	SUB		 	 
- stack 1: 0x64C
- stack 0: 0x0
3836	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x14D
3837	 148	JUMPI		 	 
- stack 0: 0x64C
3838	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x64C
- stack 0: 0x167
3839	 14C	JUMP		 	 
- stack 0: 0x64C
3840	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x64C
3841	 168	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3842	 16A	ADD		 	 
- stack 0: 0x650
3843	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3844	 16C	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x225000102440002025EFFD802B7000002C6008402E5000003140002032E0002
3845	 16D	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x225000102440002025EFFD802B7000002C6008402E5000003140002032E0002
- stack 0: 0xF0
3846	 16F	SHR		 	 
- stack 1: 0x650
- stack 0: 0x225
3847	 170	JUMP		 	 
- stack 0: 0x650
3848	 225	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x650
3849	 226	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3850	 227	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x225000102440002025EFFD802B7000002C6008402E5000003140002032E0002
3851	 228	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x225000102440002025EFFD802B7000002C6008402E5000003140002032E0002
- stack 0: 0xE0
3852	 22A	SHR		 	 
- stack 1: 0x650
- stack 0: 0x2250001
3853	 22B	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x2250001
- stack 0: 0xFFFF
3854	 22E	AND		 	 
- stack 1: 0x650
- stack 0: 0x1
3855	 22F	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x1
3856	 231	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x1
3857	 232	PUSH2	0080	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x80
3858	 235	MLOAD		 	  ;; # read from x4
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x0
3859	 236	ADD		 	  ;; # ADDI 4
- stack 1: 0x650
- stack 0: 0x1
3860	 237	PUSH2	0080	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x80
3861	 23A	MSTORE		 	  ;; # store to x4
- stack 0: 0x650
3862	 23B	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3863	 23D	ADD		 	 
- stack 0: 0x654
3864	 23E	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3865	 23F	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x2440002025EFFD802B7000002C6008402E5000003140002032E000201150012
3866	 240	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x2440002025EFFD802B7000002C6008402E5000003140002032E000201150012
- stack 0: 0xF0
3867	 242	SHR		 	 
- stack 1: 0x654
- stack 0: 0x244
3868	 243	JUMP		 	 
- stack 0: 0x654
3869	 244	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x654
3870	 245	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3871	 246	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x2440002025EFFD802B7000002C6008402E5000003140002032E000201150012
3872	 247	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x2440002025EFFD802B7000002C6008402E5000003140002032E000201150012
- stack 0: 0xE0
3873	 249	SHR		 	 
- stack 1: 0x654
- stack 0: 0x2440002
3874	 24A	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x2440002
- stack 0: 0xFFFF
3875	 24D	AND		 	 
- stack 1: 0x654
- stack 0: 0x2
3876	 24E	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x1
3877	 250	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x2
3878	 251	PUSH2	00A0	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0xA0
3879	 254	MSTORE		 	  ;; # store to x5
- stack 0: 0x654
3880	 255	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3881	 257	ADD		 	 
- stack 0: 0x658
3882	 258	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3883	 259	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x25EFFD802B7000002C6008402E5000003140002032E00020115001203480028
3884	 25A	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x25EFFD802B7000002C6008402E5000003140002032E00020115001203480028
- stack 0: 0xF0
3885	 25C	SHR		 	 
- stack 1: 0x658
- stack 0: 0x25E
3886	 25D	JUMP		 	 
- stack 0: 0x658
3887	 25E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x658
3888	 25F	PUSH2	0080	 	 
- stack 1: 0x658
- stack 0: 0x80
3889	 262	MLOAD		 	  ;; # read from x4
- stack 1: 0x658
- stack 0: 0x1
3890	 263	PUSH4	FFFFFFFF	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3891	 268	AND		 	  ;; # mask to 32 bits
- stack 1: 0x658
- stack 0: 0x1
3892	 269	PUSH2	00A0	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0xA0
3893	 26C	MLOAD		 	  ;; # read from x5
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x2
3894	 26D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x658
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3895	 272	AND		 	  ;; # mask to 32 bits
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x2
3896	 273	SUB		 	 
- stack 1: 0x658
- stack 0: 0x1
3897	 274	PUSH2	027C	 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x27C
3898	 277	JUMPI		 	 
- stack 0: 0x658
3899	 27C	JUMPDEST		 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 0: 0x658
3900	 27D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3901	 27E	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x25EFFD802B7000002C6008402E5000003140002032E00020115001203480028
3902	 27F	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x25EFFD802B7000002C6008402E5000003140002032E00020115001203480028
- stack 0: 0xE0
3903	 281	SHR		 	 
- stack 1: 0x658
- stack 0: 0x25EFFD8
3904	 282	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x25EFFD8
- stack 0: 0xFFFF
3905	 285	AND		 	 
- stack 1: 0x658
- stack 0: 0xFFD8
3906	 286	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0xFFD8
- stack 0: 0x1
3907	 288	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
3908	 289	ADD		 	 
- stack 0: 0x630
3909	 28A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x630
- stack 0: 0xFFFFFFFF
3910	 28F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x630
3911	 290	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3912	 291	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x860000009500B002A0000002A0000000B400040171F01000F6FF00012F0050
3913	 292	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x860000009500B002A0000002A0000000B400040171F01000F6FF00012F0050
- stack 0: 0xF0
3914	 294	SHR		 	 
- stack 1: 0x630
- stack 0: 0x86
3915	 295	JUMP		 	 
- stack 0: 0x630
3916	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x630
3917	 87	DUP1		 	 
- stack 1: 0x630
- stack 0: 0x630
3918	 88	PUSH2	0020	 	 
- stack 2: 0x630
- stack 1: 0x630
- stack 0: 0x20
3919	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x630
3920	 8C	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3921	 8E	ADD		 	 
- stack 0: 0x634
3922	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3923	 90	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x9500B002A0000002A0000000B400040171F01000F6FF00012F005002250001
3924	 91	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x9500B002A0000002A0000000B400040171F01000F6FF00012F005002250001
- stack 0: 0xF0
3925	 93	SHR		 	 
- stack 1: 0x634
- stack 0: 0x95
3926	 94	JUMP		 	 
- stack 0: 0x634
3927	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,720(ignore imm)
- stack 0: 0x634
3928	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3929	 97	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x9500B002A0000002A0000000B400040171F01000F6FF00012F005002250001
3930	 98	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x9500B002A0000002A0000000B400040171F01000F6FF00012F005002250001
- stack 0: 0xE0
3931	 9A	SHR		 	 
- stack 1: 0x634
- stack 0: 0x9500B0
3932	 9B	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x9500B0
- stack 0: 0xFFFF
3933	 9E	AND		 	 
- stack 1: 0x634
- stack 0: 0xB0
3934	 9F	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0xB0
- stack 0: 0x1
3935	 A1	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0xB0
3936	 A2	PUSH2	0020	 	 
- stack 2: 0x634
- stack 1: 0xB0
- stack 0: 0x20
3937	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x634
- stack 1: 0xB0
- stack 0: 0x630
3938	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x634
- stack 0: 0x6E0
3939	 A7	PUSH2	0020	 	 
- stack 2: 0x634
- stack 1: 0x6E0
- stack 0: 0x20
3940	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x634
3941	 AB	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3942	 AD	ADD		 	 
- stack 0: 0x638
3943	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3944	 AF	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x2A0000002A0000000B400040171F01000F6FF00012F00500225000102440002
3945	 B0	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x2A0000002A0000000B400040171F01000F6FF00012F00500225000102440002
- stack 0: 0xF0
3946	 B2	SHR		 	 
- stack 1: 0x638
- stack 0: 0x2A0
3947	 B3	JUMP		 	 
- stack 0: 0x638
3948	 2A0	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
3949	 2A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3950	 2A2	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x2A0000002A0000000B400040171F01000F6FF00012F00500225000102440002
3951	 2A3	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x2A0000002A0000000B400040171F01000F6FF00012F00500225000102440002
- stack 0: 0xE0
3952	 2A5	SHR		 	 
- stack 1: 0x638
- stack 0: 0x2A00000
3953	 2A6	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x2A00000
- stack 0: 0xFFFF
3954	 2A9	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
3955	 2AA	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
3956	 2AC	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
3957	 2AD	POP		 	 
- stack 0: 0x638
3958	 2AE	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3959	 2B0	ADD		 	 
- stack 0: 0x63C
3960	 2B1	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3961	 2B2	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x2A0000000B400040171F01000F6FF00012F00500225000102440002025EFFD8
3962	 2B3	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x2A0000000B400040171F01000F6FF00012F00500225000102440002025EFFD8
- stack 0: 0xF0
3963	 2B5	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x2A0
3964	 2B6	JUMP		 	 
- stack 0: 0x63C
3965	 2A0	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x63C
3966	 2A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3967	 2A2	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x2A0000000B400040171F01000F6FF00012F00500225000102440002025EFFD8
3968	 2A3	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x2A0000000B400040171F01000F6FF00012F00500225000102440002025EFFD8
- stack 0: 0xE0
3969	 2A5	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x2A00000
3970	 2A6	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x2A00000
- stack 0: 0xFFFF
3971	 2A9	AND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3972	 2AA	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x1
3973	 2AC	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3974	 2AD	POP		 	 
- stack 0: 0x63C
3975	 2AE	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3976	 2B0	ADD		 	 
- stack 0: 0x640
3977	 2B1	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3978	 2B2	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xB400040171F01000F6FF00012F00500225000102440002025EFFD802B70000
3979	 2B3	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0xB400040171F01000F6FF00012F00500225000102440002025EFFD802B70000
- stack 0: 0xF0
3980	 2B5	SHR		 	 
- stack 1: 0x640
- stack 0: 0xB4
3981	 2B6	JUMP		 	 
- stack 0: 0x640
3982	 B4	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x640
3983	 B5	PUSH2	0020	 	 
- stack 1: 0x640
- stack 0: 0x20
3984	 B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x640
- stack 0: 0x6E0
3985	 B9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x640
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
3986	 BE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x640
- stack 0: 0x6E0
3987	 BF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x640
- stack 1: 0x6E0
- stack 0: 0x640
3988	 C0	MLOAD		 	 
- stack 2: 0x640
- stack 1: 0x6E0
- stack 0: 0xB400040171F01000F6FF00012F00500225000102440002025EFFD802B70000
3989	 C1	PUSH1	E0	 	 
- stack 3: 0x640
- stack 2: 0x6E0
- stack 1: 0xB400040171F01000F6FF00012F00500225000102440002025EFFD802B70000
- stack 0: 0xE0
3990	 C3	SHR		 	 
- stack 2: 0x640
- stack 1: 0x6E0
- stack 0: 0xB40004
3991	 C4	PUSH2	FFFF	 	 
- stack 3: 0x640
- stack 2: 0x6E0
- stack 1: 0xB40004
- stack 0: 0xFFFF
3992	 C7	AND		 	 
- stack 2: 0x640
- stack 1: 0x6E0
- stack 0: 0x4
3993	 C8	PUSH1	01	 	 
- stack 3: 0x640
- stack 2: 0x6E0
- stack 1: 0x4
- stack 0: 0x1
3994	 CA	SIGNEXTEND		 	 
- stack 2: 0x640
- stack 1: 0x6E0
- stack 0: 0x4
3995	 CB	ADD		 	 
- stack 1: 0x640
- stack 0: 0x6E4
3996	 CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x640
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFF
3997	 D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x640
- stack 0: 0x6E4
3998	 D2	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xFF00FF000FF00FF0F00FF00F0000000000000000000000000000000000000000
3999	 D3	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0xFF00FF000FF00FF0F00FF00F0000000000000000000000000000000000000000
- stack 0: 0xE0
4000	 D5	SHR		 	 
- stack 1: 0x640
- stack 0: 0xFF00FF00
4001	 D6	PUSH2	0060	 	 
- stack 2: 0x640
- stack 1: 0xFF00FF00
- stack 0: 0x60
4002	 D9	MSTORE		 	  ;; # store to x3
- stack 0: 0x640
4003	 DA	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
4004	 DC	ADD		 	 
- stack 0: 0x644
4005	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
4006	 DE	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x171F01000F6FF00012F00500225000102440002025EFFD802B7000002C60084
4007	 DF	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x171F01000F6FF00012F00500225000102440002025EFFD802B7000002C60084
- stack 0: 0xF0
4008	 E1	SHR		 	 
- stack 1: 0x644
- stack 0: 0x171
4009	 E2	JUMP		 	 
- stack 0: 0x644
4010	 171	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x644
4011	 172	PUSH4	ff010000	 	 
- stack 1: 0x644
- stack 0: 0xFF010000
4012	 177	PUSH2	03A0	 	 
- stack 2: 0x644
- stack 1: 0xFF010000
- stack 0: 0x3A0
4013	 17A	MSTORE		 	  ;; # store to x29
- stack 0: 0x644
4014	 17B	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
4015	 17D	ADD		 	 
- stack 0: 0x648
4016	 17E	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
4017	 17F	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0xF6FF00012F00500225000102440002025EFFD802B7000002C6008402E50000
4018	 180	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0xF6FF00012F00500225000102440002025EFFD802B7000002C6008402E50000
- stack 0: 0xF0
4019	 182	SHR		 	 
- stack 1: 0x648
- stack 0: 0xF6
4020	 183	JUMP		 	 
- stack 0: 0x648
4021	 F6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,255(ignore imm)
- stack 0: 0x648
4022	 F7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
4023	 F8	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0xF6FF00012F00500225000102440002025EFFD802B7000002C6008402E50000
4024	 F9	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0xF6FF00012F00500225000102440002025EFFD802B7000002C6008402E50000
- stack 0: 0xE0
4025	 FB	SHR		 	 
- stack 1: 0x648
- stack 0: 0xF6FF00
4026	 FC	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0xF6FF00
- stack 0: 0xFFFF
4027	 FF	AND		 	 
- stack 1: 0x648
- stack 0: 0xFF00
4028	 100	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0xFF00
- stack 0: 0x1
4029	 102	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
4030	 103	PUSH2	03A0	 	 
- stack 2: 0x648
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
4031	 106	MLOAD		 	  ;; # read from x29
- stack 2: 0x648
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
4032	 107	ADD		 	  ;; # ADDI 29
- stack 1: 0x648
- stack 0: 0xFF00FF00
4033	 108	PUSH2	03A0	 	 
- stack 2: 0x648
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
4034	 10B	MSTORE		 	  ;; # store to x29
- stack 0: 0x648
4035	 10C	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
4036	 10E	ADD		 	 
- stack 0: 0x64C
4037	 10F	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
4038	 110	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x12F00500225000102440002025EFFD802B7000002C6008402E5000003140002
4039	 111	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x12F00500225000102440002025EFFD802B7000002C6008402E5000003140002
- stack 0: 0xF0
4040	 113	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x12F
4041	 114	JUMP		 	 
- stack 0: 0x64C
4042	 12F	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x64C
4043	 130	PUSH2	0060	 	 
- stack 1: 0x64C
- stack 0: 0x60
4044	 133	MLOAD		 	  ;; # read from x3
- stack 1: 0x64C
- stack 0: 0xFF00FF00
4045	 134	PUSH4	FFFFFFFF	 	 
- stack 2: 0x64C
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
4046	 139	AND		 	  ;; # mask to 32 bits
- stack 1: 0x64C
- stack 0: 0xFF00FF00
4047	 13A	PUSH2	03A0	 	 
- stack 2: 0x64C
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
4048	 13D	MLOAD		 	  ;; # read from x29
- stack 2: 0x64C
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
4049	 13E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x64C
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
4050	 143	AND		 	  ;; # mask to 32 bits
- stack 2: 0x64C
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
4051	 144	SUB		 	 
- stack 1: 0x64C
- stack 0: 0x0
4052	 145	PUSH2	014D	 ;; _neq_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x14D
4053	 148	JUMPI		 	 
- stack 0: 0x64C
4054	 149	PUSH2	0167	 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 1: 0x64C
- stack 0: 0x167
4055	 14C	JUMP		 	 
- stack 0: 0x64C
4056	 167	JUMPDEST		 ;; _neq_after_5e878fb9cd68d162e1f4db44e64cb8fbcf1e085bccdf3960c318cc43212933da	 
- stack 0: 0x64C
4057	 168	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
4058	 16A	ADD		 	 
- stack 0: 0x650
4059	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
4060	 16C	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x225000102440002025EFFD802B7000002C6008402E5000003140002032E0002
4061	 16D	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x225000102440002025EFFD802B7000002C6008402E5000003140002032E0002
- stack 0: 0xF0
4062	 16F	SHR		 	 
- stack 1: 0x650
- stack 0: 0x225
4063	 170	JUMP		 	 
- stack 0: 0x650
4064	 225	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x650
4065	 226	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
4066	 227	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x225000102440002025EFFD802B7000002C6008402E5000003140002032E0002
4067	 228	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x225000102440002025EFFD802B7000002C6008402E5000003140002032E0002
- stack 0: 0xE0
4068	 22A	SHR		 	 
- stack 1: 0x650
- stack 0: 0x2250001
4069	 22B	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x2250001
- stack 0: 0xFFFF
4070	 22E	AND		 	 
- stack 1: 0x650
- stack 0: 0x1
4071	 22F	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x1
4072	 231	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x1
4073	 232	PUSH2	0080	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x80
4074	 235	MLOAD		 	  ;; # read from x4
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x1
4075	 236	ADD		 	  ;; # ADDI 4
- stack 1: 0x650
- stack 0: 0x2
4076	 237	PUSH2	0080	 	 
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0x80
4077	 23A	MSTORE		 	  ;; # store to x4
- stack 0: 0x650
4078	 23B	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
4079	 23D	ADD		 	 
- stack 0: 0x654
4080	 23E	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
4081	 23F	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x2440002025EFFD802B7000002C6008402E5000003140002032E000201150012
4082	 240	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x2440002025EFFD802B7000002C6008402E5000003140002032E000201150012
- stack 0: 0xF0
4083	 242	SHR		 	 
- stack 1: 0x654
- stack 0: 0x244
4084	 243	JUMP		 	 
- stack 0: 0x654
4085	 244	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x654
4086	 245	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
4087	 246	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x2440002025EFFD802B7000002C6008402E5000003140002032E000201150012
4088	 247	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x2440002025EFFD802B7000002C6008402E5000003140002032E000201150012
- stack 0: 0xE0
4089	 249	SHR		 	 
- stack 1: 0x654
- stack 0: 0x2440002
4090	 24A	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x2440002
- stack 0: 0xFFFF
4091	 24D	AND		 	 
- stack 1: 0x654
- stack 0: 0x2
4092	 24E	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x1
4093	 250	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x2
4094	 251	PUSH2	00A0	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0xA0
4095	 254	MSTORE		 	  ;; # store to x5
- stack 0: 0x654
4096	 255	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
4097	 257	ADD		 	 
- stack 0: 0x658
4098	 258	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
4099	 259	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x25EFFD802B7000002C6008402E5000003140002032E00020115001203480028
4100	 25A	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x25EFFD802B7000002C6008402E5000003140002032E00020115001203480028
- stack 0: 0xF0
4101	 25C	SHR		 	 
- stack 1: 0x658
- stack 0: 0x25E
4102	 25D	JUMP		 	 
- stack 0: 0x658
4103	 25E	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x658
4104	 25F	PUSH2	0080	 	 
- stack 1: 0x658
- stack 0: 0x80
4105	 262	MLOAD		 	  ;; # read from x4
- stack 1: 0x658
- stack 0: 0x2
4106	 263	PUSH4	FFFFFFFF	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4107	 268	AND		 	  ;; # mask to 32 bits
- stack 1: 0x658
- stack 0: 0x2
4108	 269	PUSH2	00A0	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0xA0
4109	 26C	MLOAD		 	  ;; # read from x5
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0x2
4110	 26D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x658
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4111	 272	AND		 	  ;; # mask to 32 bits
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0x2
4112	 273	SUB		 	 
- stack 1: 0x658
- stack 0: 0x0
4113	 274	PUSH2	027C	 ;; _neq_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x27C
4114	 277	JUMPI		 	 
- stack 0: 0x658
4115	 278	PUSH2	0296	 ;; _neq_after_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 1: 0x658
- stack 0: 0x296
4116	 27B	JUMP		 	 
- stack 0: 0x658
4117	 296	JUMPDEST		 ;; _neq_after_94f9af57698132aab6b99e0a5e7f923f335a2a4cfae6075eda49ba46c19246c0	 
- stack 0: 0x658
4118	 297	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
4119	 299	ADD		 	 
- stack 0: 0x65C
4120	 29A	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
4121	 29B	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x2B7000002C6008402E5000003140002032E0002011500120348002802B70000
4122	 29C	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x2B7000002C6008402E5000003140002032E0002011500120348002802B70000
- stack 0: 0xF0
4123	 29E	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x2B7
4124	 29F	JUMP		 	 
- stack 0: 0x65C
4125	 2B7	JUMPDEST		 ;; __riscvimpl_AUIPC_97010000	  ;; # instr: auipc gp,0x0(ignore imm)
- stack 0: 0x65C
4126	 2B8	DUP1		 	 
- stack 1: 0x65C
- stack 0: 0x65C
4127	 2B9	PUSH2	0060	 	 
- stack 2: 0x65C
- stack 1: 0x65C
- stack 0: 0x60
4128	 2BC	MSTORE		 	  ;; # store to x3
- stack 0: 0x65C
4129	 2BD	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
4130	 2BF	ADD		 	 
- stack 0: 0x660
4131	 2C0	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
4132	 2C1	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x2C6008402E5000003140002032E0002011500120348002802B7000002C60068
4133	 2C2	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x2C6008402E5000003140002032E0002011500120348002802B7000002C60068
- stack 0: 0xF0
4134	 2C4	SHR		 	 
- stack 1: 0x660
- stack 0: 0x2C6
4135	 2C5	JUMP		 	 
- stack 0: 0x660
4136	 2C6	JUMPDEST		 ;; __riscvimpl_ADDI_3_3_0	  ;; # instr: addi gp,gp,132(ignore imm)
- stack 0: 0x660
4137	 2C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
4138	 2C8	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x2C6008402E5000003140002032E0002011500120348002802B7000002C60068
4139	 2C9	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x2C6008402E5000003140002032E0002011500120348002802B7000002C60068
- stack 0: 0xE0
4140	 2CB	SHR		 	 
- stack 1: 0x660
- stack 0: 0x2C60084
4141	 2CC	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x2C60084
- stack 0: 0xFFFF
4142	 2CF	AND		 	 
- stack 1: 0x660
- stack 0: 0x84
4143	 2D0	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0x84
- stack 0: 0x1
4144	 2D2	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0x84
4145	 2D3	PUSH2	0060	 	 
- stack 2: 0x660
- stack 1: 0x84
- stack 0: 0x60
4146	 2D6	MLOAD		 	  ;; # read from x3
- stack 2: 0x660
- stack 1: 0x84
- stack 0: 0x65C
4147	 2D7	ADD		 	  ;; # ADDI 3
- stack 1: 0x660
- stack 0: 0x6E0
4148	 2D8	PUSH2	0060	 	 
- stack 2: 0x660
- stack 1: 0x6E0
- stack 0: 0x60
4149	 2DB	MSTORE		 	  ;; # store to x3
- stack 0: 0x660
4150	 2DC	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
4151	 2DE	ADD		 	 
- stack 0: 0x664
4152	 2DF	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
4153	 2E0	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x2E5000003140002032E0002011500120348002802B7000002C6006802E50000
4154	 2E1	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x2E5000003140002032E0002011500120348002802B7000002C6006802E50000
- stack 0: 0xF0
4155	 2E3	SHR		 	 
- stack 1: 0x664
- stack 0: 0x2E5
4156	 2E4	JUMP		 	 
- stack 0: 0x664
4157	 2E5	JUMPDEST		 ;; __riscvimpl_LW_2_3_0	  ;; # instr: lw sp,0(gp)(ignore imm)
- stack 0: 0x664
4158	 2E6	PUSH2	0060	 	 
- stack 1: 0x664
- stack 0: 0x60
4159	 2E9	MLOAD		 	  ;; # read from x3
- stack 1: 0x664
- stack 0: 0x6E0
4160	 2EA	PUSH4	FFFFFFFF	 	 
- stack 2: 0x664
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
4161	 2EF	AND		 	  ;; # mask to 32 bits
- stack 1: 0x664
- stack 0: 0x6E0
4162	 2F0	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x664
- stack 1: 0x6E0
- stack 0: 0x664
4163	 2F1	MLOAD		 	 
- stack 2: 0x664
- stack 1: 0x6E0
- stack 0: 0x2E5000003140002032E0002011500120348002802B7000002C6006802E50000
4164	 2F2	PUSH1	E0	 	 
- stack 3: 0x664
- stack 2: 0x6E0
- stack 1: 0x2E5000003140002032E0002011500120348002802B7000002C6006802E50000
- stack 0: 0xE0
4165	 2F4	SHR		 	 
- stack 2: 0x664
- stack 1: 0x6E0
- stack 0: 0x2E50000
4166	 2F5	PUSH2	FFFF	 	 
- stack 3: 0x664
- stack 2: 0x6E0
- stack 1: 0x2E50000
- stack 0: 0xFFFF
4167	 2F8	AND		 	 
- stack 2: 0x664
- stack 1: 0x6E0
- stack 0: 0x0
4168	 2F9	PUSH1	01	 	 
- stack 3: 0x664
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
4169	 2FB	SIGNEXTEND		 	 
- stack 2: 0x664
- stack 1: 0x6E0
- stack 0: 0x0
4170	 2FC	ADD		 	 
- stack 1: 0x664
- stack 0: 0x6E0
4171	 2FD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x664
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
4172	 302	AND		 	  ;; # mask to 32 bits
- stack 1: 0x664
- stack 0: 0x6E0
4173	 303	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xFF00FFFF00FF000FF00FF0F00FF00F00000000000000000000000000000000
4174	 304	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0xFF00FFFF00FF000FF00FF0F00FF00F00000000000000000000000000000000
- stack 0: 0xE0
4175	 306	SHR		 	 
- stack 1: 0x664
- stack 0: 0xFF00FF
4176	 307	PUSH2	0040	 	 
- stack 2: 0x664
- stack 1: 0xFF00FF
- stack 0: 0x40
4177	 30A	MSTORE		 	  ;; # store to x2
- stack 0: 0x664
4178	 30B	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
4179	 30D	ADD		 	 
- stack 0: 0x668
4180	 30E	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
4181	 30F	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x3140002032E0002011500120348002802B7000002C6006802E5000002A00000
4182	 310	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x3140002032E0002011500120348002802B7000002C6006802E5000002A00000
- stack 0: 0xF0
4183	 312	SHR		 	 
- stack 1: 0x668
- stack 0: 0x314
4184	 313	JUMP		 	 
- stack 0: 0x668
4185	 314	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,2(ignore imm)
- stack 0: 0x668
4186	 315	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
4187	 316	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x3140002032E0002011500120348002802B7000002C6006802E5000002A00000
4188	 317	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x3140002032E0002011500120348002802B7000002C6006802E5000002A00000
- stack 0: 0xE0
4189	 319	SHR		 	 
- stack 1: 0x668
- stack 0: 0x3140002
4190	 31A	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x3140002
- stack 0: 0xFFFF
4191	 31D	AND		 	 
- stack 1: 0x668
- stack 0: 0x2
4192	 31E	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0x2
- stack 0: 0x1
4193	 320	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0x2
4194	 321	PUSH2	0040	 	 
- stack 2: 0x668
- stack 1: 0x2
- stack 0: 0x40
4195	 324	MSTORE		 	  ;; # store to x2
- stack 0: 0x668
4196	 325	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
4197	 327	ADD		 	 
- stack 0: 0x66C
4198	 328	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4199	 329	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x32E0002011500120348002802B7000002C6006802E5000002A0000003140002
4200	 32A	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x32E0002011500120348002802B7000002C6006802E5000002A0000003140002
- stack 0: 0xF0
4201	 32C	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x32E
4202	 32D	JUMP		 	 
- stack 0: 0x66C
4203	 32E	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,2(ignore imm)
- stack 0: 0x66C
4204	 32F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
4205	 330	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x32E0002011500120348002802B7000002C6006802E5000002A0000003140002
4206	 331	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x32E0002011500120348002802B7000002C6006802E5000002A0000003140002
- stack 0: 0xE0
4207	 333	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x32E0002
4208	 334	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x32E0002
- stack 0: 0xFFFF
4209	 337	AND		 	 
- stack 1: 0x66C
- stack 0: 0x2
4210	 338	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x2
- stack 0: 0x1
4211	 33A	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x2
4212	 33B	PUSH2	03A0	 	 
- stack 2: 0x66C
- stack 1: 0x2
- stack 0: 0x3A0
4213	 33E	MSTORE		 	  ;; # store to x29
- stack 0: 0x66C
4214	 33F	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4215	 341	ADD		 	 
- stack 0: 0x670
4216	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4217	 343	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x11500120348002802B7000002C6006802E5000002A0000003140002032E0002
4218	 344	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x11500120348002802B7000002C6006802E5000002A0000003140002032E0002
- stack 0: 0xF0
4219	 346	SHR		 	 
- stack 1: 0x670
- stack 0: 0x115
4220	 347	JUMP		 	 
- stack 0: 0x670
4221	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x670
4222	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4223	 117	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x11500120348002802B7000002C6006802E5000002A0000003140002032E0002
4224	 118	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x11500120348002802B7000002C6006802E5000002A0000003140002032E0002
- stack 0: 0xE0
4225	 11A	SHR		 	 
- stack 1: 0x670
- stack 0: 0x1150012
4226	 11B	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x1150012
- stack 0: 0xFFFF
4227	 11E	AND		 	 
- stack 1: 0x670
- stack 0: 0x12
4228	 11F	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x12
- stack 0: 0x1
4229	 121	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x12
4230	 122	PUSH2	0380	 	 
- stack 2: 0x670
- stack 1: 0x12
- stack 0: 0x380
4231	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x670
4232	 126	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4233	 128	ADD		 	 
- stack 0: 0x674
4234	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4235	 12A	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x348002802B7000002C6006802E5000002A0000003140002032E000201150013
4236	 12B	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x348002802B7000002C6006802E5000002A0000003140002032E000201150013
- stack 0: 0xF0
4237	 12D	SHR		 	 
- stack 1: 0x674
- stack 0: 0x348
4238	 12E	JUMP		 	 
- stack 0: 0x674
4239	 348	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,28(ignore imm)
- stack 0: 0x674
4240	 349	PUSH2	0040	 	 
- stack 1: 0x674
- stack 0: 0x40
4241	 34C	MLOAD		 	  ;; # read from x2
- stack 1: 0x674
- stack 0: 0x2
4242	 34D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4243	 352	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x2
4244	 353	PUSH2	03A0	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x3A0
4245	 356	MLOAD		 	  ;; # read from x29
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x2
4246	 357	PUSH4	FFFFFFFF	 	 
- stack 3: 0x674
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4247	 35C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x2
4248	 35D	SUB		 	 
- stack 1: 0x674
- stack 0: 0x0
4249	 35E	PUSH2	0366	 ;; _neq_edcccad48d1072f7dde4b1f52400d9afd5dc5286201ae038905a1cfa52cf0bae	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x366
4250	 361	JUMPI		 	 
- stack 0: 0x674
4251	 362	PUSH2	0380	 ;; _neq_after_edcccad48d1072f7dde4b1f52400d9afd5dc5286201ae038905a1cfa52cf0bae	 
- stack 1: 0x674
- stack 0: 0x380
4252	 365	JUMP		 	 
- stack 0: 0x674
4253	 380	JUMPDEST		 ;; _neq_after_edcccad48d1072f7dde4b1f52400d9afd5dc5286201ae038905a1cfa52cf0bae	 
- stack 0: 0x674
4254	 381	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4255	 383	ADD		 	 
- stack 0: 0x678
4256	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4257	 385	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x2B7000002C6006802E5000002A0000003140002032E00020115001303480008
4258	 386	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x2B7000002C6006802E5000002A0000003140002032E00020115001303480008
- stack 0: 0xF0
4259	 388	SHR		 	 
- stack 1: 0x678
- stack 0: 0x2B7
4260	 389	JUMP		 	 
- stack 0: 0x678
4261	 2B7	JUMPDEST		 ;; __riscvimpl_AUIPC_97010000	  ;; # instr: auipc gp,0x0(ignore imm)
- stack 0: 0x678
4262	 2B8	DUP1		 	 
- stack 1: 0x678
- stack 0: 0x678
4263	 2B9	PUSH2	0060	 	 
- stack 2: 0x678
- stack 1: 0x678
- stack 0: 0x60
4264	 2BC	MSTORE		 	  ;; # store to x3
- stack 0: 0x678
4265	 2BD	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
4266	 2BF	ADD		 	 
- stack 0: 0x67C
4267	 2C0	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
4268	 2C1	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x2C6006802E5000002A0000003140002032E00020115001303480008038A0018
4269	 2C2	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x2C6006802E5000002A0000003140002032E00020115001303480008038A0018
- stack 0: 0xF0
4270	 2C4	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x2C6
4271	 2C5	JUMP		 	 
- stack 0: 0x67C
4272	 2C6	JUMPDEST		 ;; __riscvimpl_ADDI_3_3_0	  ;; # instr: addi gp,gp,132(ignore imm)
- stack 0: 0x67C
4273	 2C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
4274	 2C8	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x2C6006802E5000002A0000003140002032E00020115001303480008038A0018
4275	 2C9	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x2C6006802E5000002A0000003140002032E00020115001303480008038A0018
- stack 0: 0xE0
4276	 2CB	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x2C60068
4277	 2CC	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x2C60068
- stack 0: 0xFFFF
4278	 2CF	AND		 	 
- stack 1: 0x67C
- stack 0: 0x68
4279	 2D0	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x68
- stack 0: 0x1
4280	 2D2	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x68
4281	 2D3	PUSH2	0060	 	 
- stack 2: 0x67C
- stack 1: 0x68
- stack 0: 0x60
4282	 2D6	MLOAD		 	  ;; # read from x3
- stack 2: 0x67C
- stack 1: 0x68
- stack 0: 0x678
4283	 2D7	ADD		 	  ;; # ADDI 3
- stack 1: 0x67C
- stack 0: 0x6E0
4284	 2D8	PUSH2	0060	 	 
- stack 2: 0x67C
- stack 1: 0x6E0
- stack 0: 0x60
4285	 2DB	MSTORE		 	  ;; # store to x3
- stack 0: 0x67C
4286	 2DC	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4287	 2DE	ADD		 	 
- stack 0: 0x680
4288	 2DF	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4289	 2E0	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x2E5000002A0000003140002032E00020115001303480008038A001800210000
4290	 2E1	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x2E5000002A0000003140002032E00020115001303480008038A001800210000
- stack 0: 0xF0
4291	 2E3	SHR		 	 
- stack 1: 0x680
- stack 0: 0x2E5
4292	 2E4	JUMP		 	 
- stack 0: 0x680
4293	 2E5	JUMPDEST		 ;; __riscvimpl_LW_2_3_0	  ;; # instr: lw sp,0(gp)(ignore imm)
- stack 0: 0x680
4294	 2E6	PUSH2	0060	 	 
- stack 1: 0x680
- stack 0: 0x60
4295	 2E9	MLOAD		 	  ;; # read from x3
- stack 1: 0x680
- stack 0: 0x6E0
4296	 2EA	PUSH4	FFFFFFFF	 	 
- stack 2: 0x680
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
4297	 2EF	AND		 	  ;; # mask to 32 bits
- stack 1: 0x680
- stack 0: 0x6E0
4298	 2F0	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x680
- stack 1: 0x6E0
- stack 0: 0x680
4299	 2F1	MLOAD		 	 
- stack 2: 0x680
- stack 1: 0x6E0
- stack 0: 0x2E5000002A0000003140002032E00020115001303480008038A001800210000
4300	 2F2	PUSH1	E0	 	 
- stack 3: 0x680
- stack 2: 0x6E0
- stack 1: 0x2E5000002A0000003140002032E00020115001303480008038A001800210000
- stack 0: 0xE0
4301	 2F4	SHR		 	 
- stack 2: 0x680
- stack 1: 0x6E0
- stack 0: 0x2E50000
4302	 2F5	PUSH2	FFFF	 	 
- stack 3: 0x680
- stack 2: 0x6E0
- stack 1: 0x2E50000
- stack 0: 0xFFFF
4303	 2F8	AND		 	 
- stack 2: 0x680
- stack 1: 0x6E0
- stack 0: 0x0
4304	 2F9	PUSH1	01	 	 
- stack 3: 0x680
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
4305	 2FB	SIGNEXTEND		 	 
- stack 2: 0x680
- stack 1: 0x6E0
- stack 0: 0x0
4306	 2FC	ADD		 	 
- stack 1: 0x680
- stack 0: 0x6E0
4307	 2FD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x680
- stack 1: 0x6E0
- stack 0: 0xFFFFFFFF
4308	 302	AND		 	  ;; # mask to 32 bits
- stack 1: 0x680
- stack 0: 0x6E0
4309	 303	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xFF00FFFF00FF000FF00FF0F00FF00F00000000000000000000000000000000
4310	 304	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0xFF00FFFF00FF000FF00FF0F00FF00F00000000000000000000000000000000
- stack 0: 0xE0
4311	 306	SHR		 	 
- stack 1: 0x680
- stack 0: 0xFF00FF
4312	 307	PUSH2	0040	 	 
- stack 2: 0x680
- stack 1: 0xFF00FF
- stack 0: 0x40
4313	 30A	MSTORE		 	  ;; # store to x2
- stack 0: 0x680
4314	 30B	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4315	 30D	ADD		 	 
- stack 0: 0x684
4316	 30E	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4317	 30F	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x2A0000003140002032E00020115001303480008038A001800210000003406D8
4318	 310	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x2A0000003140002032E00020115001303480008038A001800210000003406D8
- stack 0: 0xF0
4319	 312	SHR		 	 
- stack 1: 0x684
- stack 0: 0x2A0
4320	 313	JUMP		 	 
- stack 0: 0x684
4321	 2A0	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x684
4322	 2A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
4323	 2A2	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x2A0000003140002032E00020115001303480008038A001800210000003406D8
4324	 2A3	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x2A0000003140002032E00020115001303480008038A001800210000003406D8
- stack 0: 0xE0
4325	 2A5	SHR		 	 
- stack 1: 0x684
- stack 0: 0x2A00000
4326	 2A6	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x2A00000
- stack 0: 0xFFFF
4327	 2A9	AND		 	 
- stack 1: 0x684
- stack 0: 0x0
4328	 2AA	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x1
4329	 2AC	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x0
4330	 2AD	POP		 	 
- stack 0: 0x684
4331	 2AE	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4332	 2B0	ADD		 	 
- stack 0: 0x688
4333	 2B1	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4334	 2B2	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x3140002032E00020115001303480008038A001800210000003406D800530042
4335	 2B3	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x3140002032E00020115001303480008038A001800210000003406D800530042
- stack 0: 0xF0
4336	 2B5	SHR		 	 
- stack 1: 0x688
- stack 0: 0x314
4337	 2B6	JUMP		 	 
- stack 0: 0x688
4338	 314	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,2(ignore imm)
- stack 0: 0x688
4339	 315	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4340	 316	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x3140002032E00020115001303480008038A001800210000003406D800530042
4341	 317	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x3140002032E00020115001303480008038A001800210000003406D800530042
- stack 0: 0xE0
4342	 319	SHR		 	 
- stack 1: 0x688
- stack 0: 0x3140002
4343	 31A	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x3140002
- stack 0: 0xFFFF
4344	 31D	AND		 	 
- stack 1: 0x688
- stack 0: 0x2
4345	 31E	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0x1
4346	 320	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x2
4347	 321	PUSH2	0040	 	 
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0x40
4348	 324	MSTORE		 	  ;; # store to x2
- stack 0: 0x688
4349	 325	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4350	 327	ADD		 	 
- stack 0: 0x68C
4351	 328	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4352	 329	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x32E00020115001303480008038A001800210000003406D80053004200660000
4353	 32A	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x32E00020115001303480008038A001800210000003406D80053004200660000
- stack 0: 0xF0
4354	 32C	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x32E
4355	 32D	JUMP		 	 
- stack 0: 0x68C
4356	 32E	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,2(ignore imm)
- stack 0: 0x68C
4357	 32F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
4358	 330	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x32E00020115001303480008038A001800210000003406D80053004200660000
4359	 331	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x32E00020115001303480008038A001800210000003406D80053004200660000
- stack 0: 0xE0
4360	 333	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x32E0002
4361	 334	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x32E0002
- stack 0: 0xFFFF
4362	 337	AND		 	 
- stack 1: 0x68C
- stack 0: 0x2
4363	 338	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0x2
- stack 0: 0x1
4364	 33A	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0x2
4365	 33B	PUSH2	03A0	 	 
- stack 2: 0x68C
- stack 1: 0x2
- stack 0: 0x3A0
4366	 33E	MSTORE		 	  ;; # store to x29
- stack 0: 0x68C
4367	 33F	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4368	 341	ADD		 	 
- stack 0: 0x690
4369	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4370	 343	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x115001303480008038A001800210000003406D8005300420066000003CA0001
4371	 344	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x115001303480008038A001800210000003406D8005300420066000003CA0001
- stack 0: 0xF0
4372	 346	SHR		 	 
- stack 1: 0x690
- stack 0: 0x115
4373	 347	JUMP		 	 
- stack 0: 0x690
4374	 115	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x690
4375	 116	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
4376	 117	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x115001303480008038A001800210000003406D8005300420066000003CA0001
4377	 118	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x115001303480008038A001800210000003406D8005300420066000003CA0001
- stack 0: 0xE0
4378	 11A	SHR		 	 
- stack 1: 0x690
- stack 0: 0x1150013
4379	 11B	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x1150013
- stack 0: 0xFFFF
4380	 11E	AND		 	 
- stack 1: 0x690
- stack 0: 0x13
4381	 11F	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0x13
- stack 0: 0x1
4382	 121	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0x13
4383	 122	PUSH2	0380	 	 
- stack 2: 0x690
- stack 1: 0x13
- stack 0: 0x380
4384	 125	MSTORE		 	  ;; # store to x28
- stack 0: 0x690
4385	 126	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4386	 128	ADD		 	 
- stack 0: 0x694
4387	 129	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4388	 12A	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x3480008038A001800210000003406D8005300420066000003CA000100210000
4389	 12B	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x3480008038A001800210000003406D8005300420066000003CA000100210000
- stack 0: 0xF0
4390	 12D	SHR		 	 
- stack 1: 0x694
- stack 0: 0x348
4391	 12E	JUMP		 	 
- stack 0: 0x694
4392	 348	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,28(ignore imm)
- stack 0: 0x694
4393	 349	PUSH2	0040	 	 
- stack 1: 0x694
- stack 0: 0x40
4394	 34C	MLOAD		 	  ;; # read from x2
- stack 1: 0x694
- stack 0: 0x2
4395	 34D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x694
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4396	 352	AND		 	  ;; # mask to 32 bits
- stack 1: 0x694
- stack 0: 0x2
4397	 353	PUSH2	03A0	 	 
- stack 2: 0x694
- stack 1: 0x2
- stack 0: 0x3A0
4398	 356	MLOAD		 	  ;; # read from x29
- stack 2: 0x694
- stack 1: 0x2
- stack 0: 0x2
4399	 357	PUSH4	FFFFFFFF	 	 
- stack 3: 0x694
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4400	 35C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x694
- stack 1: 0x2
- stack 0: 0x2
4401	 35D	SUB		 	 
- stack 1: 0x694
- stack 0: 0x0
4402	 35E	PUSH2	0366	 ;; _neq_edcccad48d1072f7dde4b1f52400d9afd5dc5286201ae038905a1cfa52cf0bae	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x366
4403	 361	JUMPI		 	 
- stack 0: 0x694
4404	 362	PUSH2	0380	 ;; _neq_after_edcccad48d1072f7dde4b1f52400d9afd5dc5286201ae038905a1cfa52cf0bae	 
- stack 1: 0x694
- stack 0: 0x380
4405	 365	JUMP		 	 
- stack 0: 0x694
4406	 380	JUMPDEST		 ;; _neq_after_edcccad48d1072f7dde4b1f52400d9afd5dc5286201ae038905a1cfa52cf0bae	 
- stack 0: 0x694
4407	 381	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4408	 383	ADD		 	 
- stack 0: 0x698
4409	 384	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4410	 385	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x38A001800210000003406D8005300420066000003CA000100210000003406DC
4411	 386	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x38A001800210000003406D8005300420066000003CA000100210000003406DC
- stack 0: 0xF0
4412	 388	SHR		 	 
- stack 1: 0x698
- stack 0: 0x38A
4413	 389	JUMP		 	 
- stack 0: 0x698
4414	 38A	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x698
4415	 38B	PUSH1	00	 	 
- stack 1: 0x698
- stack 0: 0x0
4416	 38D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4417	 392	AND		 	  ;; # mask to 32 bits
- stack 1: 0x698
- stack 0: 0x0
4418	 393	PUSH2	0380	 	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x380
4419	 396	MLOAD		 	  ;; # read from x28
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x13
4420	 397	PUSH4	FFFFFFFF	 	 
- stack 3: 0x698
- stack 2: 0x0
- stack 1: 0x13
- stack 0: 0xFFFFFFFF
4421	 39C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x13
4422	 39D	SUB		 	 
- stack 1: 0x698
- stack 0: 0x13
4423	 39E	PUSH2	03A6	 ;; _neq_2930dba64506c83e75a8c57d4fd5bd07138faf8817ba4e1c4a5ca89826a77b29	 
- stack 2: 0x698
- stack 1: 0x13
- stack 0: 0x3A6
4424	 3A1	JUMPI		 	 
- stack 0: 0x698
4425	 3A6	JUMPDEST		 ;; _neq_2930dba64506c83e75a8c57d4fd5bd07138faf8817ba4e1c4a5ca89826a77b29	 
- stack 0: 0x698
4426	 3A7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
4427	 3A8	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x38A001800210000003406D8005300420066000003CA000100210000003406DC
4428	 3A9	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x38A001800210000003406D8005300420066000003CA000100210000003406DC
- stack 0: 0xE0
4429	 3AB	SHR		 	 
- stack 1: 0x698
- stack 0: 0x38A0018
4430	 3AC	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x38A0018
- stack 0: 0xFFFF
4431	 3AF	AND		 	 
- stack 1: 0x698
- stack 0: 0x18
4432	 3B0	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x18
- stack 0: 0x1
4433	 3B2	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x18
4434	 3B3	ADD		 	 
- stack 0: 0x6B0
4435	 3B4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6B0
- stack 0: 0xFFFFFFFF
4436	 3B9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6B0
4437	 3BA	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4438	 3BB	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x210000003406DC005300420066000003D50000006600000000000000000000
4439	 3BC	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x210000003406DC005300420066000003D50000006600000000000000000000
- stack 0: 0xF0
4440	 3BE	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x21
4441	 3BF	JUMP		 	 
- stack 0: 0x6B0
4442	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x6B0
4443	 22	PUSH4	00000000	 	 
- stack 1: 0x6B0
- stack 0: 0x0
4444	 27	PUSH2	0160	 	 
- stack 2: 0x6B0
- stack 1: 0x0
- stack 0: 0x160
4445	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x6B0
4446	 2B	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4447	 2D	ADD		 	 
- stack 0: 0x6B4
4448	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4449	 2F	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3406DC005300420066000003D500000066000000000000000000006574796D
4450	 30	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x3406DC005300420066000003D500000066000000000000000000006574796D
- stack 0: 0xF0
4451	 32	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x34
4452	 33	JUMP		 	 
- stack 0: 0x6B4
4453	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1744(ignore imm)
- stack 0: 0x6B4
4454	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
4455	 36	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3406DC005300420066000003D500000066000000000000000000006574796D
4456	 37	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x3406DC005300420066000003D500000066000000000000000000006574796D
- stack 0: 0xE0
4457	 39	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3406DC
4458	 3A	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x3406DC
- stack 0: 0xFFFF
4459	 3D	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x6DC
4460	 3E	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x6DC
- stack 0: 0x1
4461	 40	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x6DC
4462	 41	PUSH2	0160	 	 
- stack 2: 0x6B4
- stack 1: 0x6DC
- stack 0: 0x160
4463	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x6B4
- stack 1: 0x6DC
- stack 0: 0x0
4464	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x6B4
- stack 0: 0x6DC
4465	 46	PUSH2	0160	 	 
- stack 2: 0x6B4
- stack 1: 0x6DC
- stack 0: 0x160
4466	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x6B4
4467	 4A	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4468	 4C	ADD		 	 
- stack 0: 0x6B8
4469	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4470	 4E	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x5300420066000003D500000066000000000000000000006574796D00007473
4471	 4F	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x5300420066000003D500000066000000000000000000006574796D00007473
- stack 0: 0xF0
4472	 51	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x53
4473	 52	JUMP		 	 
- stack 0: 0x6B8
4474	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x6B8
4475	 54	PUSH4	00042000	 	 
- stack 1: 0x6B8
- stack 0: 0x42000
4476	 59	PUSH2	0140	 	 
- stack 2: 0x6B8
- stack 1: 0x42000
- stack 0: 0x140
4477	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x6B8
4478	 5D	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4479	 5F	ADD		 	 
- stack 0: 0x6BC
4480	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4481	 61	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x66000003D500000066000000000000000000006574796D0000747300525245
4482	 62	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x66000003D500000066000000000000000000006574796D0000747300525245
- stack 0: 0xF0
4483	 64	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x66
4484	 65	JUMP		 	 
- stack 0: 0x6BC
4485	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6BC
4486	 67	PUSH2	0140	 	 
- stack 1: 0x6BC
- stack 0: 0x140
4487	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6BC
- stack 0: 0x42000
4488	 6B	PUSH2	0075	 ;; _ecall_9821b10520ca1e4b107f16b8808705641ad3884098485cb6258dc2d628ae4d7b	 
- stack 2: 0x6BC
- stack 1: 0x42000
- stack 0: 0x75
4489	 6E	JUMPI		 	 
- stack 0: 0x6BC
4490	 75	JUMPDEST		 ;; _ecall_9821b10520ca1e4b107f16b8808705641ad3884098485cb6258dc2d628ae4d7b	 
- stack 0: 0x6BC
4491	 76	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4492	 78	PUSH2	0160	 	 
- stack 2: 0x6BC
- stack 1: 0x4
- stack 0: 0x160
4493	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x6BC
- stack 1: 0x4
- stack 0: 0x6DC
4494	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x6BC
4495	 7D	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4496	 7F	ADD		 	 
- stack 0: 0x6C0
4497	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4498	 81	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x3D500000066000000000000000000006574796D000074730052524500004B4F
4499	 82	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x3D500000066000000000000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
4500	 84	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x3D5
4501	 85	JUMP		 	 
- stack 0: 0x6C0
4502	 3D5	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x6C0
4503	 3D6	PUSH4	00000000	 	 
- stack 1: 0x6C0
- stack 0: 0x0
4504	 3DB	PUSH2	0140	 	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x140
4505	 3DE	MSTORE		 	  ;; # store to x10
- stack 0: 0x6C0
4506	 3DF	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4507	 3E1	ADD		 	 
- stack 0: 0x6C4
4508	 3E2	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4509	 3E3	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x66000000000000000000006574796D000074730052524500004B4F00FF00FF
4510	 3E4	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x66000000000000000000006574796D000074730052524500004B4F00FF00FF
- stack 0: 0xF0
4511	 3E6	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x66
4512	 3E7	JUMP		 	 
- stack 0: 0x6C4
4513	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6C4
4514	 67	PUSH2	0140	 	 
- stack 1: 0x6C4
- stack 0: 0x140
4515	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6C4
- stack 0: 0x0
4516	 6B	PUSH2	0075	 ;; _ecall_9821b10520ca1e4b107f16b8808705641ad3884098485cb6258dc2d628ae4d7b	 
- stack 2: 0x6C4
- stack 1: 0x0
- stack 0: 0x75
4517	 6E	JUMPI		 	 
- stack 0: 0x6C4
4518	 6F	PUSH1	20	 	 
- stack 1: 0x6C4
- stack 0: 0x20
4519	 71	PUSH2	0160	 	 
- stack 2: 0x6C4
- stack 1: 0x20
- stack 0: 0x160
4520	 74	RETURN		 	 
Final bytecode length; 1753
Returned: 00000000000000000000000000000000000000000000000000000000000006dc
gasUsed : 15971
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424,428
** HOT: 42c - range: 42c,430,434,438,43c,440,444
** HOT: 448 - range: 448,44c,450,454,458,45c,460
** HOT: 464 - range: 464,468,46c,470,474,478,47c
** HOT: 480 - range: 480,484,488,48c,490,494,498
** HOT: 49c - range: 49c,4a0,4a4,4a8,4ac,4b0,4b4
** HOT: 4b8 - range: 4b8,4bc,4c0,4c4,4c8,4cc,4d0
** HOT: 4d4 - range: 4d4,4d8,4dc,4e0,4e4,4e8,4ec
** HOT: 4f0 - range: 4f0,4f4,4f8,4fc,500,504,508,50c
** HOT: 510 - range: 510,514,518,51c,520,524,528,52c
** HOT: 530 - range: 530,534,538,53c,540,544,548,54c,550
** HOT: 538 - range: 538,53c,540,544,548,54c,550
** HOT: 554 - range: 554,558,55c
** HOT: 560 - range: 560,564,568,56c,570,574,578,57c,580,584
** HOT: 568 - range: 568,56c,570,574,578,57c,580,584
** HOT: 588 - range: 588,58c,590
** HOT: 594 - range: 594,598,59c,5a0,5a4,5a8,5ac,5b0,5b4,5b8,5bc
** HOT: 59c - range: 59c,5a0,5a4,5a8,5ac,5b0,5b4,5b8,5bc
** HOT: 5c0 - range: 5c0,5c4,5c8
** HOT: 5cc - range: 5cc,5d0,5d4,5d8,5dc,5e0,5e4,5e8
** HOT: 5d4 - range: 5d4,5d8,5dc,5e0,5e4,5e8
** HOT: 5ec - range: 5ec,5f0,5f4
** HOT: 5f8 - range: 5f8,5fc,600,604,608,60c,610,614,618
** HOT: 600 - range: 600,604,608,60c,610,614,618
** HOT: 61c - range: 61c,620,624
** HOT: 628 - range: 628,62c,630,634,638,63c,640,644,648,64c
** HOT: 630 - range: 630,634,638,63c,640,644,648,64c
** HOT: 650 - range: 650,654,658
** HOT: 65c - range: 65c,660,664,668,66c,670,674
** HOT: 678 - range: 678,67c,680,684,688,68c,690,694
