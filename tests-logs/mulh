Running in EVM:
0	 0	PUSH4	0520	 	 
- stack 0: 0x520
1	 5	PUSH2	062D	 ;; _rambegin	 
- stack 1: 0x520
- stack 0: 0x62D
2	 8	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x62D
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x520
- stack 0: 0x62E
4	 B	PUSH2	0400	 	 
- stack 2: 0x520
- stack 1: 0x62E
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100010034F91000530042006600000086000000A0000000BA000000DA0000
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100010034F91000530042006600000086000000A0000000BA000000DA0000
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00001000	 	 
- stack 1: 0x400
- stack 0: 0x1000
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x1000
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F91000530042006600000086000000A0000000BA000000DA000000F40002
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34F91000530042006600000086000000A0000000BA000000DA000000F40002
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1776(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F91000530042006600000086000000A0000000BA000000DA000000F40002
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34F91000530042006600000086000000A0000000BA000000DA000000F40002
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34F910
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x34F910
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0xF910
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0xF910
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF910
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF910
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF910
- stack 0: 0x1000
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x910
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x910
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000000A0000000BA000000DA000000F40002010E04B4
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000000A0000000BA000000DA000000F40002010E04B4
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000000A0000000BA000000DA000000F40002010E04B400860001
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000000A0000000BA000000DA000000F40002010E04B400860001
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_e64a74ad308161bde2dc8aec127776ec6ac46aa8fcc083d93023f1b60b1cc0cc	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_e64a74ad308161bde2dc8aec127776ec6ac46aa8fcc083d93023f1b60b1cc0cc	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x910
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000BA000000DA000000F40002010E04B40086000100A00001
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000BA000000DA000000F40002010E04B40086000100A00001
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000BA000000DA000000F40002010E04B40086000100A00001
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000BA000000DA000000F40002010E04B40086000100A00001
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860000
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860000
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x0
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x0
84	 93	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x20
85	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000DA000000F40002010E04B40086000100A0000100BA0000
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000DA000000F40002010E04B40086000100A0000100BA0000
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000DA000000F40002010E04B40086000100A0000100BA0000
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000DA000000F40002010E04B40086000100A0000100BA0000
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	0040	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x40
103	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x414
104	 B1	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
105	 B3	ADD		 	 
- stack 0: 0x418
106	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
107	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000000DA000000F40002010E04B40086000100A0000100BA000000DA0000
108	 B6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBA000000DA000000F40002010E04B40086000100A0000100BA000000DA0000
- stack 0: 0xF0
109	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA
110	 B9	JUMP		 	 
- stack 0: 0x418
111	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x418
112	 BB	PUSH2	0020	 	 
- stack 1: 0x418
- stack 0: 0x20
113	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x418
- stack 0: 0x0
114	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
115	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x418
- stack 0: 0x0
116	 C5	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x40
117	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x0
118	 C9	PUSH1	1F	 	 
- stack 3: 0x418
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0x1F
119	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x0
120	 CC	SHL		 	 
- stack 1: 0x418
- stack 0: 0x0
121	 CD	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x60
122	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
123	 D1	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
124	 D3	ADD		 	 
- stack 0: 0x41C
125	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
126	 D5	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xDA000000F40002010E04B40086000100A0000100BA000000DA000000F40003
127	 D6	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xDA000000F40002010E04B40086000100A0000100BA000000DA000000F40003
- stack 0: 0xF0
128	 D8	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xDA
129	 D9	JUMP		 	 
- stack 0: 0x41C
130	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x41C
131	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
132	 DC	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xDA000000F40002010E04B40086000100A0000100BA000000DA000000F40003
133	 DD	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xDA000000F40002010E04B40086000100A0000100BA000000DA000000F40003
- stack 0: 0xE0
134	 DF	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xDA0000
135	 E0	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xDA0000
- stack 0: 0xFFFF
136	 E3	AND		 	 
- stack 1: 0x41C
- stack 0: 0x0
137	 E4	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x1
138	 E6	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x0
139	 E7	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x3A0
140	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
141	 EB	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
142	 ED	ADD		 	 
- stack 0: 0x420
143	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
144	 EF	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF40002010E04B40086000100A0000100BA000000DA000000F40003010E049C
145	 F0	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xF40002010E04B40086000100A0000100BA000000DA000000F40003010E049C
- stack 0: 0xF0
146	 F2	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF4
147	 F3	JUMP		 	 
- stack 0: 0x420
148	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x420
149	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
150	 F6	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF40002010E04B40086000100A0000100BA000000DA000000F40003010E049C
151	 F7	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0xF40002010E04B40086000100A0000100BA000000DA000000F40003010E049C
- stack 0: 0xE0
152	 F9	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF40002
153	 FA	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0xF40002
- stack 0: 0xFFFF
154	 FD	AND		 	 
- stack 1: 0x420
- stack 0: 0x2
155	 FE	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x1
156	 100	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0x2
157	 101	PUSH2	0380	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x380
158	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x420
159	 105	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
160	 107	ADD		 	 
- stack 0: 0x424
161	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
162	 109	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x10E04B40086000100A0000100BA000000DA000000F40003010E049C00860003
163	 10A	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x10E04B40086000100A0000100BA000000DA000000F40003010E049C00860003
- stack 0: 0xF0
164	 10C	SHR		 	 
- stack 1: 0x424
- stack 0: 0x10E
165	 10D	JUMP		 	 
- stack 0: 0x424
166	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x424
167	 10F	PUSH2	0060	 	 
- stack 1: 0x424
- stack 0: 0x60
168	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x424
- stack 0: 0x0
169	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
170	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x0
171	 119	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x3A0
172	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x0
173	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
174	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x0
175	 123	SUB		 	 
- stack 1: 0x424
- stack 0: 0x0
176	 124	PUSH2	012C	 ;; _neq_5c1057b4c557e55826caee7b32f5821ed027e01851f8d519f14694756bf46b01	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x12C
177	 127	JUMPI		 	 
- stack 0: 0x424
178	 128	PUSH2	0146	 ;; _neq_after_5c1057b4c557e55826caee7b32f5821ed027e01851f8d519f14694756bf46b01	 
- stack 1: 0x424
- stack 0: 0x146
179	 12B	JUMP		 	 
- stack 0: 0x424
180	 146	JUMPDEST		 ;; _neq_after_5c1057b4c557e55826caee7b32f5821ed027e01851f8d519f14694756bf46b01	 
- stack 0: 0x424
181	 147	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
182	 149	ADD		 	 
- stack 0: 0x428
183	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
184	 14B	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x86000100A0000100BA000000DA000000F40003010E049C0086000300A00007
185	 14C	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x86000100A0000100BA000000DA000000F40003010E049C0086000300A00007
- stack 0: 0xF0
186	 14E	SHR		 	 
- stack 1: 0x428
- stack 0: 0x86
187	 14F	JUMP		 	 
- stack 0: 0x428
188	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x428
189	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
190	 88	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x86000100A0000100BA000000DA000000F40003010E049C0086000300A00007
191	 89	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0x86000100A0000100BA000000DA000000F40003010E049C0086000300A00007
- stack 0: 0xE0
192	 8B	SHR		 	 
- stack 1: 0x428
- stack 0: 0x860001
193	 8C	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0x860001
- stack 0: 0xFFFF
194	 8F	AND		 	 
- stack 1: 0x428
- stack 0: 0x1
195	 90	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x1
196	 92	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0x1
197	 93	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x20
198	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x428
199	 97	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
200	 99	ADD		 	 
- stack 0: 0x42C
201	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
202	 9B	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xA0000100BA000000DA000000F40003010E049C0086000300A0000700BA0000
203	 9C	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0xA0000100BA000000DA000000F40003010E049C0086000300A0000700BA0000
- stack 0: 0xF0
204	 9E	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xA0
205	 9F	JUMP		 	 
- stack 0: 0x42C
206	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x42C
207	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
208	 A2	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xA0000100BA000000DA000000F40003010E049C0086000300A0000700BA0000
209	 A3	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0xA0000100BA000000DA000000F40003010E049C0086000300A0000700BA0000
- stack 0: 0xE0
210	 A5	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xA00001
211	 A6	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0xA00001
- stack 0: 0xFFFF
212	 A9	AND		 	 
- stack 1: 0x42C
- stack 0: 0x1
213	 AA	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x1
214	 AC	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x1
215	 AD	PUSH2	0040	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x40
216	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x42C
217	 B1	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
218	 B3	ADD		 	 
- stack 0: 0x430
219	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
220	 B5	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xBA000000DA000000F40003010E049C0086000300A0000700BA000000DA0000
221	 B6	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xBA000000DA000000F40003010E049C0086000300A0000700BA000000DA0000
- stack 0: 0xF0
222	 B8	SHR		 	 
- stack 1: 0x430
- stack 0: 0xBA
223	 B9	JUMP		 	 
- stack 0: 0x430
224	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x430
225	 BB	PUSH2	0020	 	 
- stack 1: 0x430
- stack 0: 0x20
226	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x430
- stack 0: 0x1
227	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
228	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x430
- stack 0: 0x1
229	 C5	PUSH2	0040	 	 
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x40
230	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x1
231	 C9	PUSH1	1F	 	 
- stack 3: 0x430
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0x1F
232	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x1
233	 CC	SHL		 	 
- stack 1: 0x430
- stack 0: 0x2
234	 CD	PUSH2	0060	 	 
- stack 2: 0x430
- stack 1: 0x2
- stack 0: 0x60
235	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x430
236	 D1	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
237	 D3	ADD		 	 
- stack 0: 0x434
238	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
239	 D5	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xDA000000F40003010E049C0086000300A0000700BA000000DA000000F40004
240	 D6	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xDA000000F40003010E049C0086000300A0000700BA000000DA000000F40004
- stack 0: 0xF0
241	 D8	SHR		 	 
- stack 1: 0x434
- stack 0: 0xDA
242	 D9	JUMP		 	 
- stack 0: 0x434
243	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x434
244	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
245	 DC	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xDA000000F40003010E049C0086000300A0000700BA000000DA000000F40004
246	 DD	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xDA000000F40003010E049C0086000300A0000700BA000000DA000000F40004
- stack 0: 0xE0
247	 DF	SHR		 	 
- stack 1: 0x434
- stack 0: 0xDA0000
248	 E0	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xDA0000
- stack 0: 0xFFFF
249	 E3	AND		 	 
- stack 1: 0x434
- stack 0: 0x0
250	 E4	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x1
251	 E6	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0x0
252	 E7	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x3A0
253	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x434
254	 EB	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
255	 ED	ADD		 	 
- stack 0: 0x438
256	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
257	 EF	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xF40003010E049C0086000300A0000700BA000000DA000000F40004010E0484
258	 F0	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xF40003010E049C0086000300A0000700BA000000DA000000F40004010E0484
- stack 0: 0xF0
259	 F2	SHR		 	 
- stack 1: 0x438
- stack 0: 0xF4
260	 F3	JUMP		 	 
- stack 0: 0x438
261	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x438
262	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
263	 F6	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xF40003010E049C0086000300A0000700BA000000DA000000F40004010E0484
264	 F7	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xF40003010E049C0086000300A0000700BA000000DA000000F40004010E0484
- stack 0: 0xE0
265	 F9	SHR		 	 
- stack 1: 0x438
- stack 0: 0xF40003
266	 FA	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xF40003
- stack 0: 0xFFFF
267	 FD	AND		 	 
- stack 1: 0x438
- stack 0: 0x3
268	 FE	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x1
269	 100	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x3
270	 101	PUSH2	0380	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x380
271	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x438
272	 105	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
273	 107	ADD		 	 
- stack 0: 0x43C
274	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
275	 109	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x10E049C0086000300A0000700BA000000DA000000F40004010E048400860000
276	 10A	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x10E049C0086000300A0000700BA000000DA000000F40004010E048400860000
- stack 0: 0xF0
277	 10C	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x10E
278	 10D	JUMP		 	 
- stack 0: 0x43C
279	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x43C
280	 10F	PUSH2	0060	 	 
- stack 1: 0x43C
- stack 0: 0x60
281	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x43C
- stack 0: 0x2
282	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
283	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0x2
284	 119	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0x2
- stack 0: 0x3A0
285	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x43C
- stack 1: 0x2
- stack 0: 0x0
286	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0x2
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
287	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0x2
- stack 0: 0x0
288	 123	SUB		 	 
- stack 1: 0x43C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
289	 124	PUSH2	012C	 ;; _neq_5c1057b4c557e55826caee7b32f5821ed027e01851f8d519f14694756bf46b01	 
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x12C
290	 127	JUMPI		 	 
- stack 0: 0x43C
291	 12C	JUMPDEST		 ;; _neq_5c1057b4c557e55826caee7b32f5821ed027e01851f8d519f14694756bf46b01	 
- stack 0: 0x43C
292	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
293	 12E	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x10E049C0086000300A0000700BA000000DA000000F40004010E048400860000
294	 12F	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0x10E049C0086000300A0000700BA000000DA000000F40004010E048400860000
- stack 0: 0xE0
295	 131	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x10E049C
296	 132	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0x10E049C
- stack 0: 0xFFFF
297	 135	AND		 	 
- stack 1: 0x43C
- stack 0: 0x49C
298	 136	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0x49C
- stack 0: 0x1
299	 138	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0x49C
300	 139	ADD		 	 
- stack 0: 0x8D8
301	 13A	PUSH4	FFFFFFFF	 	 
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
302	 13F	AND		 	  ;; # mask to 32 bits
- stack 0: 0x8D8
303	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x8D8
- stack 0: 0x8D8
304	 141	MLOAD		 	 
- stack 1: 0x8D8
- stack 0: 0x2100010034F9180053004200660000060F0001002100010034F91C00530042
305	 142	PUSH1	F0	 	 
- stack 2: 0x8D8
- stack 1: 0x2100010034F9180053004200660000060F0001002100010034F91C00530042
- stack 0: 0xF0
306	 144	SHR		 	 
- stack 1: 0x8D8
- stack 0: 0x21
307	 145	JUMP		 	 
- stack 0: 0x8D8
308	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x8D8
309	 22	PUSH4	00001000	 	 
- stack 1: 0x8D8
- stack 0: 0x1000
310	 27	PUSH2	0160	 	 
- stack 2: 0x8D8
- stack 1: 0x1000
- stack 0: 0x160
311	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x8D8
312	 2B	PUSH1	04	 	 
- stack 1: 0x8D8
- stack 0: 0x4
313	 2D	ADD		 	 
- stack 0: 0x8DC
314	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x8DC
- stack 0: 0x8DC
315	 2F	MLOAD		 	 
- stack 1: 0x8DC
- stack 0: 0x34F9180053004200660000060F0001002100010034F91C0053004200660000
316	 30	PUSH1	F0	 	 
- stack 2: 0x8DC
- stack 1: 0x34F9180053004200660000060F0001002100010034F91C0053004200660000
- stack 0: 0xF0
317	 32	SHR		 	 
- stack 1: 0x8DC
- stack 0: 0x34
318	 33	JUMP		 	 
- stack 0: 0x8DC
319	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1776(ignore imm)
- stack 0: 0x8DC
320	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8DC
- stack 0: 0x8DC
321	 36	MLOAD		 	 
- stack 1: 0x8DC
- stack 0: 0x34F9180053004200660000060F0001002100010034F91C0053004200660000
322	 37	PUSH1	E0	 	 
- stack 2: 0x8DC
- stack 1: 0x34F9180053004200660000060F0001002100010034F91C0053004200660000
- stack 0: 0xE0
323	 39	SHR		 	 
- stack 1: 0x8DC
- stack 0: 0x34F918
324	 3A	PUSH2	FFFF	 	 
- stack 2: 0x8DC
- stack 1: 0x34F918
- stack 0: 0xFFFF
325	 3D	AND		 	 
- stack 1: 0x8DC
- stack 0: 0xF918
326	 3E	PUSH1	01	 	 
- stack 2: 0x8DC
- stack 1: 0xF918
- stack 0: 0x1
327	 40	SIGNEXTEND		 	 
- stack 1: 0x8DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF918
328	 41	PUSH2	0160	 	 
- stack 2: 0x8DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF918
- stack 0: 0x160
329	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x8DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF918
- stack 0: 0x1000
330	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x8DC
- stack 0: 0x918
331	 46	PUSH2	0160	 	 
- stack 2: 0x8DC
- stack 1: 0x918
- stack 0: 0x160
332	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x8DC
333	 4A	PUSH1	04	 	 
- stack 1: 0x8DC
- stack 0: 0x4
334	 4C	ADD		 	 
- stack 0: 0x8E0
335	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x8E0
- stack 0: 0x8E0
336	 4E	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0x53004200660000060F0001002100010034F91C0053004200660000061A0000
337	 4F	PUSH1	F0	 	 
- stack 2: 0x8E0
- stack 1: 0x53004200660000060F0001002100010034F91C0053004200660000061A0000
- stack 0: 0xF0
338	 51	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0x53
339	 52	JUMP		 	 
- stack 0: 0x8E0
340	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x8E0
341	 54	PUSH4	00042000	 	 
- stack 1: 0x8E0
- stack 0: 0x42000
342	 59	PUSH2	0140	 	 
- stack 2: 0x8E0
- stack 1: 0x42000
- stack 0: 0x140
343	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x8E0
344	 5D	PUSH1	04	 	 
- stack 1: 0x8E0
- stack 0: 0x4
345	 5F	ADD		 	 
- stack 0: 0x8E4
346	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x8E4
- stack 0: 0x8E4
347	 61	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0x660000060F0001002100010034F91C0053004200660000061A000000660000
348	 62	PUSH1	F0	 	 
- stack 2: 0x8E4
- stack 1: 0x660000060F0001002100010034F91C0053004200660000061A000000660000
- stack 0: 0xF0
349	 64	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0x66
350	 65	JUMP		 	 
- stack 0: 0x8E4
351	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x8E4
352	 67	PUSH2	0140	 	 
- stack 1: 0x8E4
- stack 0: 0x140
353	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x8E4
- stack 0: 0x42000
354	 6B	PUSH2	0075	 ;; _ecall_e64a74ad308161bde2dc8aec127776ec6ac46aa8fcc083d93023f1b60b1cc0cc	 
- stack 2: 0x8E4
- stack 1: 0x42000
- stack 0: 0x75
355	 6E	JUMPI		 	 
- stack 0: 0x8E4
356	 75	JUMPDEST		 ;; _ecall_e64a74ad308161bde2dc8aec127776ec6ac46aa8fcc083d93023f1b60b1cc0cc	 
- stack 0: 0x8E4
357	 76	PUSH1	04	 	 
- stack 1: 0x8E4
- stack 0: 0x4
358	 78	PUSH2	0160	 	 
- stack 2: 0x8E4
- stack 1: 0x4
- stack 0: 0x160
359	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x8E4
- stack 1: 0x4
- stack 0: 0x918
360	 7C	LOG0		 	 
*** PRINT: ERR
- stack 0: 0x8E4
361	 7D	PUSH1	04	 	 
- stack 1: 0x8E4
- stack 0: 0x4
362	 7F	ADD		 	 
- stack 0: 0x8E8
363	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x8E8
- stack 0: 0x8E8
364	 81	MLOAD		 	 
- stack 1: 0x8E8
- stack 0: 0x60F0001002100010034F91C0053004200660000061A00000066000000000000
365	 82	PUSH1	F0	 	 
- stack 2: 0x8E8
- stack 1: 0x60F0001002100010034F91C0053004200660000061A00000066000000000000
- stack 0: 0xF0
366	 84	SHR		 	 
- stack 1: 0x8E8
- stack 0: 0x60F
367	 85	JUMP		 	 
- stack 0: 0x8E8
368	 60F	JUMPDEST		 ;; __riscvimpl_EBREAK_0_0_0	  ;; # instr: ebreak(ignore imm)
- stack 0: 0x8E8
369	 610	INVALID		 	  ;; # EBREAK
Error: {"error":"invalid opcode","errorType":"VmError"}
    at invokeRiscv (/root/risc-to-evm/v2.ts:1375:11)
