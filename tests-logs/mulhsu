Running in EVM:
0	 0	PUSH4	0520	 	 
- stack 0: 0x520
1	 5	PUSH2	063B	 ;; _rambegin	 
- stack 1: 0x520
- stack 0: 0x63B
2	 8	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x63B
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x520
- stack 0: 0x63C
4	 B	PUSH2	0400	 	 
- stack 2: 0x520
- stack 1: 0x63C
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100010034F91000530042006600000086000000A0000000BA000000D70000
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100010034F91000530042006600000086000000A0000000BA000000D70000
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00001000	 	 
- stack 1: 0x400
- stack 0: 0x1000
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x1000
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F91000530042006600000086000000A0000000BA000000D7000000F10002
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34F91000530042006600000086000000A0000000BA000000D7000000F10002
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1776(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F91000530042006600000086000000A0000000BA000000D7000000F10002
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34F91000530042006600000086000000A0000000BA000000D7000000F10002
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34F910
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x34F910
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0xF910
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0xF910
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF910
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF910
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF910
- stack 0: 0x1000
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x910
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x910
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000000A0000000BA000000D7000000F10002010B04B4
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000000A0000000BA000000D7000000F10002010B04B4
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000000A0000000BA000000D7000000F10002010B04B400860001
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000000A0000000BA000000D7000000F10002010B04B400860001
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_76eb0c2c4509b9d12d569afe940ea29fba491cb779c4cf48ea078e019402a1c4	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_76eb0c2c4509b9d12d569afe940ea29fba491cb779c4cf48ea078e019402a1c4	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x910
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000BA000000D7000000F10002010B04B40086000100A00001
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000BA000000D7000000F10002010B04B40086000100A00001
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000BA000000D7000000F10002010B04B40086000100A00001
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000BA000000D7000000F10002010B04B40086000100A00001
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860000
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860000
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x0
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x0
84	 93	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x20
85	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000D7000000F10002010B04B40086000100A0000100BA0000
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000D7000000F10002010B04B40086000100A0000100BA0000
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000D7000000F10002010B04B40086000100A0000100BA0000
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000D7000000F10002010B04B40086000100A0000100BA0000
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	0040	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x40
103	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x414
104	 B1	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
105	 B3	ADD		 	 
- stack 0: 0x418
106	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
107	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000000D7000000F10002010B04B40086000100A0000100BA000000D70000
108	 B6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBA000000D7000000F10002010B04B40086000100A0000100BA000000D70000
- stack 0: 0xF0
109	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA
110	 B9	JUMP		 	 
- stack 0: 0x418
111	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x418
112	 BB	PUSH2	0040	 	 
- stack 1: 0x418
- stack 0: 0x40
113	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x418
- stack 0: 0x0
114	 BF	PUSH1	03	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x3
115	 C1	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0x0
116	 C2	PUSH2	0020	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x20
117	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x0
118	 C6	PUSH1	03	 	 
- stack 3: 0x418
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0x3
119	 C8	SIGNEXTEND		 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x0
120	 C9	SLT		 	 
- stack 1: 0x418
- stack 0: 0x0
121	 CA	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x60
122	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
123	 CE	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
124	 D0	ADD		 	 
- stack 0: 0x41C
125	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
126	 D2	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD7000000F10002010B04B40086000100A0000100BA000000D7000000F10003
127	 D3	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD7000000F10002010B04B40086000100A0000100BA000000D7000000F10003
- stack 0: 0xF0
128	 D5	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD7
129	 D6	JUMP		 	 
- stack 0: 0x41C
130	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x41C
131	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
132	 D9	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD7000000F10002010B04B40086000100A0000100BA000000D7000000F10003
133	 DA	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xD7000000F10002010B04B40086000100A0000100BA000000D7000000F10003
- stack 0: 0xE0
134	 DC	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD70000
135	 DD	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xD70000
- stack 0: 0xFFFF
136	 E0	AND		 	 
- stack 1: 0x41C
- stack 0: 0x0
137	 E1	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x1
138	 E3	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x0
139	 E4	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x3A0
140	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
141	 E8	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
142	 EA	ADD		 	 
- stack 0: 0x420
143	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
144	 EC	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF10002010B04B40086000100A0000100BA000000D7000000F10003010B049C
145	 ED	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xF10002010B04B40086000100A0000100BA000000D7000000F10003010B049C
- stack 0: 0xF0
146	 EF	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF1
147	 F0	JUMP		 	 
- stack 0: 0x420
148	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x420
149	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
150	 F3	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF10002010B04B40086000100A0000100BA000000D7000000F10003010B049C
151	 F4	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0xF10002010B04B40086000100A0000100BA000000D7000000F10003010B049C
- stack 0: 0xE0
152	 F6	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF10002
153	 F7	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0xF10002
- stack 0: 0xFFFF
154	 FA	AND		 	 
- stack 1: 0x420
- stack 0: 0x2
155	 FB	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x1
156	 FD	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0x2
157	 FE	PUSH2	0380	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x380
158	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x420
159	 102	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
160	 104	ADD		 	 
- stack 0: 0x424
161	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
162	 106	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x10B04B40086000100A0000100BA000000D7000000F10003010B049C00860003
163	 107	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x10B04B40086000100A0000100BA000000D7000000F10003010B049C00860003
- stack 0: 0xF0
164	 109	SHR		 	 
- stack 1: 0x424
- stack 0: 0x10B
165	 10A	JUMP		 	 
- stack 0: 0x424
166	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x424
167	 10C	PUSH2	0060	 	 
- stack 1: 0x424
- stack 0: 0x60
168	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x424
- stack 0: 0x0
169	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
170	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x0
171	 116	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x3A0
172	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x0
173	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
174	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x0
175	 120	SUB		 	 
- stack 1: 0x424
- stack 0: 0x0
176	 121	PUSH2	0129	 ;; _neq_9220c4542395cf0b5c3a0f12a005de3cad4a74db034ae65c9de6e057aa8b6b82	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x129
177	 124	JUMPI		 	 
- stack 0: 0x424
178	 125	PUSH2	0143	 ;; _neq_after_9220c4542395cf0b5c3a0f12a005de3cad4a74db034ae65c9de6e057aa8b6b82	 
- stack 1: 0x424
- stack 0: 0x143
179	 128	JUMP		 	 
- stack 0: 0x424
180	 143	JUMPDEST		 ;; _neq_after_9220c4542395cf0b5c3a0f12a005de3cad4a74db034ae65c9de6e057aa8b6b82	 
- stack 0: 0x424
181	 144	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
182	 146	ADD		 	 
- stack 0: 0x428
183	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
184	 148	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x86000100A0000100BA000000D7000000F10003010B049C0086000300A00007
185	 149	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x86000100A0000100BA000000D7000000F10003010B049C0086000300A00007
- stack 0: 0xF0
186	 14B	SHR		 	 
- stack 1: 0x428
- stack 0: 0x86
187	 14C	JUMP		 	 
- stack 0: 0x428
188	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x428
189	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
190	 88	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x86000100A0000100BA000000D7000000F10003010B049C0086000300A00007
191	 89	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0x86000100A0000100BA000000D7000000F10003010B049C0086000300A00007
- stack 0: 0xE0
192	 8B	SHR		 	 
- stack 1: 0x428
- stack 0: 0x860001
193	 8C	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0x860001
- stack 0: 0xFFFF
194	 8F	AND		 	 
- stack 1: 0x428
- stack 0: 0x1
195	 90	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x1
196	 92	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0x1
197	 93	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x20
198	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x428
199	 97	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
200	 99	ADD		 	 
- stack 0: 0x42C
201	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
202	 9B	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xA0000100BA000000D7000000F10003010B049C0086000300A0000700BA0000
203	 9C	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0xA0000100BA000000D7000000F10003010B049C0086000300A0000700BA0000
- stack 0: 0xF0
204	 9E	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xA0
205	 9F	JUMP		 	 
- stack 0: 0x42C
206	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x42C
207	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
208	 A2	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xA0000100BA000000D7000000F10003010B049C0086000300A0000700BA0000
209	 A3	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0xA0000100BA000000D7000000F10003010B049C0086000300A0000700BA0000
- stack 0: 0xE0
210	 A5	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xA00001
211	 A6	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0xA00001
- stack 0: 0xFFFF
212	 A9	AND		 	 
- stack 1: 0x42C
- stack 0: 0x1
213	 AA	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x1
214	 AC	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x1
215	 AD	PUSH2	0040	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x40
216	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x42C
217	 B1	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
218	 B3	ADD		 	 
- stack 0: 0x430
219	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
220	 B5	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xBA000000D7000000F10003010B049C0086000300A0000700BA000000D70000
221	 B6	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xBA000000D7000000F10003010B049C0086000300A0000700BA000000D70000
- stack 0: 0xF0
222	 B8	SHR		 	 
- stack 1: 0x430
- stack 0: 0xBA
223	 B9	JUMP		 	 
- stack 0: 0x430
224	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x430
225	 BB	PUSH2	0040	 	 
- stack 1: 0x430
- stack 0: 0x40
226	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x430
- stack 0: 0x1
227	 BF	PUSH1	03	 	 
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x3
228	 C1	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x1
229	 C2	PUSH2	0020	 	 
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x20
230	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x1
231	 C6	PUSH1	03	 	 
- stack 3: 0x430
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0x3
232	 C8	SIGNEXTEND		 	 
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x1
233	 C9	SLT		 	 
- stack 1: 0x430
- stack 0: 0x0
234	 CA	PUSH2	0060	 	 
- stack 2: 0x430
- stack 1: 0x0
- stack 0: 0x60
235	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x430
236	 CE	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
237	 D0	ADD		 	 
- stack 0: 0x434
238	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
239	 D2	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xD7000000F10003010B049C0086000300A0000700BA000000D7000000F10004
240	 D3	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xD7000000F10003010B049C0086000300A0000700BA000000D7000000F10004
- stack 0: 0xF0
241	 D5	SHR		 	 
- stack 1: 0x434
- stack 0: 0xD7
242	 D6	JUMP		 	 
- stack 0: 0x434
243	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x434
244	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
245	 D9	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xD7000000F10003010B049C0086000300A0000700BA000000D7000000F10004
246	 DA	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xD7000000F10003010B049C0086000300A0000700BA000000D7000000F10004
- stack 0: 0xE0
247	 DC	SHR		 	 
- stack 1: 0x434
- stack 0: 0xD70000
248	 DD	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xD70000
- stack 0: 0xFFFF
249	 E0	AND		 	 
- stack 1: 0x434
- stack 0: 0x0
250	 E1	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x1
251	 E3	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0x0
252	 E4	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x3A0
253	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x434
254	 E8	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
255	 EA	ADD		 	 
- stack 0: 0x438
256	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
257	 EC	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xF10003010B049C0086000300A0000700BA000000D7000000F10004010B0484
258	 ED	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xF10003010B049C0086000300A0000700BA000000D7000000F10004010B0484
- stack 0: 0xF0
259	 EF	SHR		 	 
- stack 1: 0x438
- stack 0: 0xF1
260	 F0	JUMP		 	 
- stack 0: 0x438
261	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x438
262	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
263	 F3	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xF10003010B049C0086000300A0000700BA000000D7000000F10004010B0484
264	 F4	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xF10003010B049C0086000300A0000700BA000000D7000000F10004010B0484
- stack 0: 0xE0
265	 F6	SHR		 	 
- stack 1: 0x438
- stack 0: 0xF10003
266	 F7	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xF10003
- stack 0: 0xFFFF
267	 FA	AND		 	 
- stack 1: 0x438
- stack 0: 0x3
268	 FB	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x1
269	 FD	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x3
270	 FE	PUSH2	0380	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x380
271	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x438
272	 102	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
273	 104	ADD		 	 
- stack 0: 0x43C
274	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
275	 106	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x10B049C0086000300A0000700BA000000D7000000F10004010B048400860000
276	 107	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x10B049C0086000300A0000700BA000000D7000000F10004010B048400860000
- stack 0: 0xF0
277	 109	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x10B
278	 10A	JUMP		 	 
- stack 0: 0x43C
279	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x43C
280	 10C	PUSH2	0060	 	 
- stack 1: 0x43C
- stack 0: 0x60
281	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x43C
- stack 0: 0x0
282	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
283	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0x0
284	 116	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x3A0
285	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x0
286	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
287	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x0
288	 120	SUB		 	 
- stack 1: 0x43C
- stack 0: 0x0
289	 121	PUSH2	0129	 ;; _neq_9220c4542395cf0b5c3a0f12a005de3cad4a74db034ae65c9de6e057aa8b6b82	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x129
290	 124	JUMPI		 	 
- stack 0: 0x43C
291	 125	PUSH2	0143	 ;; _neq_after_9220c4542395cf0b5c3a0f12a005de3cad4a74db034ae65c9de6e057aa8b6b82	 
- stack 1: 0x43C
- stack 0: 0x143
292	 128	JUMP		 	 
- stack 0: 0x43C
293	 143	JUMPDEST		 ;; _neq_after_9220c4542395cf0b5c3a0f12a005de3cad4a74db034ae65c9de6e057aa8b6b82	 
- stack 0: 0x43C
294	 144	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
295	 146	ADD		 	 
- stack 0: 0x440
296	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
297	 148	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x86000300A0000700BA000000D7000000F10004010B048400860000014DFFF8
298	 149	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x86000300A0000700BA000000D7000000F10004010B048400860000014DFFF8
- stack 0: 0xF0
299	 14B	SHR		 	 
- stack 1: 0x440
- stack 0: 0x86
300	 14C	JUMP		 	 
- stack 0: 0x440
301	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x440
302	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
303	 88	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x86000300A0000700BA000000D7000000F10004010B048400860000014DFFF8
304	 89	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0x86000300A0000700BA000000D7000000F10004010B048400860000014DFFF8
- stack 0: 0xE0
305	 8B	SHR		 	 
- stack 1: 0x440
- stack 0: 0x860003
306	 8C	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0x860003
- stack 0: 0xFFFF
307	 8F	AND		 	 
- stack 1: 0x440
- stack 0: 0x3
308	 90	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x1
309	 92	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0x3
310	 93	PUSH2	0020	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x20
311	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x440
312	 97	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
313	 99	ADD		 	 
- stack 0: 0x444
314	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
315	 9B	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xA0000700BA000000D7000000F10004010B048400860000014DFFF800BA0000
316	 9C	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xA0000700BA000000D7000000F10004010B048400860000014DFFF800BA0000
- stack 0: 0xF0
317	 9E	SHR		 	 
- stack 1: 0x444
- stack 0: 0xA0
318	 9F	JUMP		 	 
- stack 0: 0x444
319	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x444
320	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
321	 A2	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xA0000700BA000000D7000000F10004010B048400860000014DFFF800BA0000
322	 A3	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0xA0000700BA000000D7000000F10004010B048400860000014DFFF800BA0000
- stack 0: 0xE0
323	 A5	SHR		 	 
- stack 1: 0x444
- stack 0: 0xA00007
324	 A6	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0xA00007
- stack 0: 0xFFFF
325	 A9	AND		 	 
- stack 1: 0x444
- stack 0: 0x7
326	 AA	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x7
- stack 0: 0x1
327	 AC	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x7
328	 AD	PUSH2	0040	 	 
- stack 2: 0x444
- stack 1: 0x7
- stack 0: 0x40
329	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x444
330	 B1	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
331	 B3	ADD		 	 
- stack 0: 0x448
332	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
333	 B5	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xBA000000D7000000F10004010B048400860000014DFFF800BA000000D70000
334	 B6	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xBA000000D7000000F10004010B048400860000014DFFF800BA000000D70000
- stack 0: 0xF0
335	 B8	SHR		 	 
- stack 1: 0x448
- stack 0: 0xBA
336	 B9	JUMP		 	 
- stack 0: 0x448
337	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x448
338	 BB	PUSH2	0040	 	 
- stack 1: 0x448
- stack 0: 0x40
339	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x448
- stack 0: 0x7
340	 BF	PUSH1	03	 	 
- stack 2: 0x448
- stack 1: 0x7
- stack 0: 0x3
341	 C1	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0x7
342	 C2	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0x7
- stack 0: 0x20
343	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x448
- stack 1: 0x7
- stack 0: 0x3
344	 C6	PUSH1	03	 	 
- stack 3: 0x448
- stack 2: 0x7
- stack 1: 0x3
- stack 0: 0x3
345	 C8	SIGNEXTEND		 	 
- stack 2: 0x448
- stack 1: 0x7
- stack 0: 0x3
346	 C9	SLT		 	 
- stack 1: 0x448
- stack 0: 0x1
347	 CA	PUSH2	0060	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x60
348	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x448
349	 CE	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
350	 D0	ADD		 	 
- stack 0: 0x44C
351	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
352	 D2	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xD7000000F10004010B048400860000014DFFF800BA000000D7000000F10005
353	 D3	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0xD7000000F10004010B048400860000014DFFF800BA000000D7000000F10005
- stack 0: 0xF0
354	 D5	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xD7
355	 D6	JUMP		 	 
- stack 0: 0x44C
356	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x44C
357	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
358	 D9	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xD7000000F10004010B048400860000014DFFF800BA000000D7000000F10005
359	 DA	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0xD7000000F10004010B048400860000014DFFF800BA000000D7000000F10005
- stack 0: 0xE0
360	 DC	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xD70000
361	 DD	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0xD70000
- stack 0: 0xFFFF
362	 E0	AND		 	 
- stack 1: 0x44C
- stack 0: 0x0
363	 E1	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0x0
- stack 0: 0x1
364	 E3	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0x0
365	 E4	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0x0
- stack 0: 0x3A0
366	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x44C
367	 E8	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
368	 EA	ADD		 	 
- stack 0: 0x450
369	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
370	 EC	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xF10004010B048400860000014DFFF800BA000000D7000000F10005010B046C
371	 ED	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0xF10004010B048400860000014DFFF800BA000000D7000000F10005010B046C
- stack 0: 0xF0
372	 EF	SHR		 	 
- stack 1: 0x450
- stack 0: 0xF1
373	 F0	JUMP		 	 
- stack 0: 0x450
374	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
375	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
376	 F3	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xF10004010B048400860000014DFFF800BA000000D7000000F10005010B046C
377	 F4	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0xF10004010B048400860000014DFFF800BA000000D7000000F10005010B046C
- stack 0: 0xE0
378	 F6	SHR		 	 
- stack 1: 0x450
- stack 0: 0xF10004
379	 F7	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0xF10004
- stack 0: 0xFFFF
380	 FA	AND		 	 
- stack 1: 0x450
- stack 0: 0x4
381	 FB	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x1
382	 FD	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x4
383	 FE	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x380
384	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
385	 102	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
386	 104	ADD		 	 
- stack 0: 0x454
387	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
388	 106	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x10B048400860000014DFFF800BA000000D7000000F10005010B046C01600000
389	 107	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x10B048400860000014DFFF800BA000000D7000000F10005010B046C01600000
- stack 0: 0xF0
390	 109	SHR		 	 
- stack 1: 0x454
- stack 0: 0x10B
391	 10A	JUMP		 	 
- stack 0: 0x454
392	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x454
393	 10C	PUSH2	0060	 	 
- stack 1: 0x454
- stack 0: 0x60
394	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x454
- stack 0: 0x1
395	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x454
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
396	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x454
- stack 0: 0x1
397	 116	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0x1
- stack 0: 0x3A0
398	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x454
- stack 1: 0x1
- stack 0: 0x0
399	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x454
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
400	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x454
- stack 1: 0x1
- stack 0: 0x0
401	 120	SUB		 	 
- stack 1: 0x454
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
402	 121	PUSH2	0129	 ;; _neq_9220c4542395cf0b5c3a0f12a005de3cad4a74db034ae65c9de6e057aa8b6b82	 
- stack 2: 0x454
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x129
403	 124	JUMPI		 	 
- stack 0: 0x454
404	 129	JUMPDEST		 ;; _neq_9220c4542395cf0b5c3a0f12a005de3cad4a74db034ae65c9de6e057aa8b6b82	 
- stack 0: 0x454
405	 12A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
406	 12B	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x10B048400860000014DFFF800BA000000D7000000F10005010B046C01600000
407	 12C	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0x10B048400860000014DFFF800BA000000D7000000F10005010B046C01600000
- stack 0: 0xE0
408	 12E	SHR		 	 
- stack 1: 0x454
- stack 0: 0x10B0484
409	 12F	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0x10B0484
- stack 0: 0xFFFF
410	 132	AND		 	 
- stack 1: 0x454
- stack 0: 0x484
411	 133	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0x484
- stack 0: 0x1
412	 135	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0x484
413	 136	ADD		 	 
- stack 0: 0x8D8
414	 137	PUSH4	FFFFFFFF	 	 
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
415	 13C	AND		 	  ;; # mask to 32 bits
- stack 0: 0x8D8
416	 13D	DUP1		 	  ;; # executing pc
- stack 1: 0x8D8
- stack 0: 0x8D8
417	 13E	MLOAD		 	 
- stack 1: 0x8D8
- stack 0: 0x2100010034F9180053004200660000061D0001002100010034F91C00530042
418	 13F	PUSH1	F0	 	 
- stack 2: 0x8D8
- stack 1: 0x2100010034F9180053004200660000061D0001002100010034F91C00530042
- stack 0: 0xF0
419	 141	SHR		 	 
- stack 1: 0x8D8
- stack 0: 0x21
420	 142	JUMP		 	 
- stack 0: 0x8D8
421	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x8D8
422	 22	PUSH4	00001000	 	 
- stack 1: 0x8D8
- stack 0: 0x1000
423	 27	PUSH2	0160	 	 
- stack 2: 0x8D8
- stack 1: 0x1000
- stack 0: 0x160
424	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x8D8
425	 2B	PUSH1	04	 	 
- stack 1: 0x8D8
- stack 0: 0x4
426	 2D	ADD		 	 
- stack 0: 0x8DC
427	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x8DC
- stack 0: 0x8DC
428	 2F	MLOAD		 	 
- stack 1: 0x8DC
- stack 0: 0x34F9180053004200660000061D0001002100010034F91C0053004200660000
429	 30	PUSH1	F0	 	 
- stack 2: 0x8DC
- stack 1: 0x34F9180053004200660000061D0001002100010034F91C0053004200660000
- stack 0: 0xF0
430	 32	SHR		 	 
- stack 1: 0x8DC
- stack 0: 0x34
431	 33	JUMP		 	 
- stack 0: 0x8DC
432	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1776(ignore imm)
- stack 0: 0x8DC
433	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8DC
- stack 0: 0x8DC
434	 36	MLOAD		 	 
- stack 1: 0x8DC
- stack 0: 0x34F9180053004200660000061D0001002100010034F91C0053004200660000
435	 37	PUSH1	E0	 	 
- stack 2: 0x8DC
- stack 1: 0x34F9180053004200660000061D0001002100010034F91C0053004200660000
- stack 0: 0xE0
436	 39	SHR		 	 
- stack 1: 0x8DC
- stack 0: 0x34F918
437	 3A	PUSH2	FFFF	 	 
- stack 2: 0x8DC
- stack 1: 0x34F918
- stack 0: 0xFFFF
438	 3D	AND		 	 
- stack 1: 0x8DC
- stack 0: 0xF918
439	 3E	PUSH1	01	 	 
- stack 2: 0x8DC
- stack 1: 0xF918
- stack 0: 0x1
440	 40	SIGNEXTEND		 	 
- stack 1: 0x8DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF918
441	 41	PUSH2	0160	 	 
- stack 2: 0x8DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF918
- stack 0: 0x160
442	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x8DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF918
- stack 0: 0x1000
443	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x8DC
- stack 0: 0x918
444	 46	PUSH2	0160	 	 
- stack 2: 0x8DC
- stack 1: 0x918
- stack 0: 0x160
445	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x8DC
446	 4A	PUSH1	04	 	 
- stack 1: 0x8DC
- stack 0: 0x4
447	 4C	ADD		 	 
- stack 0: 0x8E0
448	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x8E0
- stack 0: 0x8E0
449	 4E	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0x53004200660000061D0001002100010034F91C005300420066000006280000
450	 4F	PUSH1	F0	 	 
- stack 2: 0x8E0
- stack 1: 0x53004200660000061D0001002100010034F91C005300420066000006280000
- stack 0: 0xF0
451	 51	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0x53
452	 52	JUMP		 	 
- stack 0: 0x8E0
453	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x8E0
454	 54	PUSH4	00042000	 	 
- stack 1: 0x8E0
- stack 0: 0x42000
455	 59	PUSH2	0140	 	 
- stack 2: 0x8E0
- stack 1: 0x42000
- stack 0: 0x140
456	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x8E0
457	 5D	PUSH1	04	 	 
- stack 1: 0x8E0
- stack 0: 0x4
458	 5F	ADD		 	 
- stack 0: 0x8E4
459	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x8E4
- stack 0: 0x8E4
460	 61	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0x660000061D0001002100010034F91C00530042006600000628000000660000
461	 62	PUSH1	F0	 	 
- stack 2: 0x8E4
- stack 1: 0x660000061D0001002100010034F91C00530042006600000628000000660000
- stack 0: 0xF0
462	 64	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0x66
463	 65	JUMP		 	 
- stack 0: 0x8E4
464	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x8E4
465	 67	PUSH2	0140	 	 
- stack 1: 0x8E4
- stack 0: 0x140
466	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x8E4
- stack 0: 0x42000
467	 6B	PUSH2	0075	 ;; _ecall_76eb0c2c4509b9d12d569afe940ea29fba491cb779c4cf48ea078e019402a1c4	 
- stack 2: 0x8E4
- stack 1: 0x42000
- stack 0: 0x75
468	 6E	JUMPI		 	 
- stack 0: 0x8E4
469	 75	JUMPDEST		 ;; _ecall_76eb0c2c4509b9d12d569afe940ea29fba491cb779c4cf48ea078e019402a1c4	 
- stack 0: 0x8E4
470	 76	PUSH1	04	 	 
- stack 1: 0x8E4
- stack 0: 0x4
471	 78	PUSH2	0160	 	 
- stack 2: 0x8E4
- stack 1: 0x4
- stack 0: 0x160
472	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x8E4
- stack 1: 0x4
- stack 0: 0x918
473	 7C	LOG0		 	 
*** PRINT: ERR
- stack 0: 0x8E4
474	 7D	PUSH1	04	 	 
- stack 1: 0x8E4
- stack 0: 0x4
475	 7F	ADD		 	 
- stack 0: 0x8E8
476	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x8E8
- stack 0: 0x8E8
477	 81	MLOAD		 	 
- stack 1: 0x8E8
- stack 0: 0x61D0001002100010034F91C0053004200660000062800000066000000000000
478	 82	PUSH1	F0	 	 
- stack 2: 0x8E8
- stack 1: 0x61D0001002100010034F91C0053004200660000062800000066000000000000
- stack 0: 0xF0
479	 84	SHR		 	 
- stack 1: 0x8E8
- stack 0: 0x61D
480	 85	JUMP		 	 
- stack 0: 0x8E8
481	 61D	JUMPDEST		 ;; __riscvimpl_EBREAK_0_0_0	  ;; # instr: ebreak(ignore imm)
- stack 0: 0x8E8
482	 61E	INVALID		 	  ;; # EBREAK
Error: {"error":"invalid opcode","errorType":"VmError"}
    at invokeRiscv (/root/risc-to-evm/v2.ts:1375:11)
