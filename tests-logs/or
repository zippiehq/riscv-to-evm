Running in EVM:
0	 0	PUSH4	0510	 	 
- stack 0: 0x510
1	 5	PUSH2	053F	 ;; _rambegin	 
- stack 1: 0x510
- stack 0: 0x53F
2	 8	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x53F
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x510
- stack 0: 0x540
4	 B	PUSH2	0400	 	 
- stack 2: 0x510
- stack 1: 0x540
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100010034F90000530042006600000086F0100099FF0000B8F0F100CBFF0F
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100010034F90000530042006600000086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00001000	 	 
- stack 1: 0x400
- stack 0: 0x1000
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x1000
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F90000530042006600000086F0100099FF0000B8F0F100CBFF0F00EA0000
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34F90000530042006600000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1792(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F90000530042006600000086F0100099FF0000B8F0F100CBFF0F00EA0000
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34F90000530042006600000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34F900
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x34F900
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0xF900
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0xF900
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF900
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF900
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF900
- stack 0: 0x1000
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x900
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x900
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086F0100099FF0000B8F0F100CBFF0F00EA00000101F100
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086F0100099FF0000B8F0F100CBFF0F00EA00000101F100
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086F0100099FF0000B8F0F100CBFF0F00EA00000101F1000114FF0F
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086F0100099FF0000B8F0F100CBFF0F00EA00000101F1000114FF0F
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_c64dc7a8010125d3380ed7223f24ee9bc47c57b13bb5fd27c2f50d4e8d295152	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_c64dc7a8010125d3380ed7223f24ee9bc47c57b13bb5fd27c2f50d4e8d295152	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x900
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F00EA00000101F1000114FF0F01330002
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F00EA00000101F1000114FF0F01330002
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x410
76	 87	PUSH4	ff010000	 	 
- stack 1: 0x410
- stack 0: 0xFF010000
77	 8C	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0xFF010000
- stack 0: 0x20
78	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 90	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 92	ADD		 	 
- stack 0: 0x414
81	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 94	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA00000101F1000114FF0F01330002014D04A4
83	 95	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA00000101F1000114FF0F01330002014D04A4
- stack 0: 0xF0
84	 97	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99
85	 98	JUMP		 	 
- stack 0: 0x414
86	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x414
87	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA00000101F1000114FF0F01330002014D04A4
89	 9C	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA00000101F1000114FF0F01330002014D04A4
- stack 0: 0xE0
90	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99FF00
91	 9F	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x99FF00
- stack 0: 0xFFFF
92	 A2	AND		 	 
- stack 1: 0x414
- stack 0: 0xFF00
93	 A3	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0xFF00
- stack 0: 0x1
94	 A5	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
95	 A6	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
96	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
97	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x414
- stack 0: 0xFF00FF00
98	 AB	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0xFF00FF00
- stack 0: 0x20
99	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
100	 AF	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
101	 B1	ADD		 	 
- stack 0: 0x418
102	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
103	 B3	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB8F0F100CBFF0F00EA00000101F1000114FF0F01330002014D04A4018FFF01
104	 B4	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB8F0F100CBFF0F00EA00000101F1000114FF0F01330002014D04A4018FFF01
- stack 0: 0xF0
105	 B6	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB8
106	 B7	JUMP		 	 
- stack 0: 0x418
107	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x418
108	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x418
- stack 0: 0xF0F1000
109	 BE	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0xF0F1000
- stack 0: 0x40
110	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x418
111	 C2	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
112	 C4	ADD		 	 
- stack 0: 0x41C
113	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
114	 C6	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xCBFF0F00EA00000101F1000114FF0F01330002014D04A4018FFF010099FFF0
115	 C7	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xCBFF0F00EA00000101F1000114FF0F01330002014D04A4018FFF010099FFF0
- stack 0: 0xF0
116	 C9	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xCB
117	 CA	JUMP		 	 
- stack 0: 0x41C
118	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x41C
119	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
120	 CD	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xCBFF0F00EA00000101F1000114FF0F01330002014D04A4018FFF010099FFF0
121	 CE	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xCBFF0F00EA00000101F1000114FF0F01330002014D04A4018FFF010099FFF0
- stack 0: 0xE0
122	 D0	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xCBFF0F
123	 D1	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
124	 D4	AND		 	 
- stack 1: 0x41C
- stack 0: 0xFF0F
125	 D5	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0xFF0F
- stack 0: 0x1
126	 D7	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
127	 D8	PUSH2	0040	 	 
- stack 2: 0x41C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
128	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x41C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
129	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x41C
- stack 0: 0xF0F0F0F
130	 DD	PUSH2	0040	 	 
- stack 2: 0x41C
- stack 1: 0xF0F0F0F
- stack 0: 0x40
131	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x41C
132	 E1	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
133	 E3	ADD		 	 
- stack 0: 0x420
134	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
135	 E5	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xEA00000101F1000114FF0F01330002014D04A4018FFF010099FFF001A20F0F
136	 E6	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xEA00000101F1000114FF0F01330002014D04A4018FFF010099FFF001A20F0F
- stack 0: 0xF0
137	 E8	SHR		 	 
- stack 1: 0x420
- stack 0: 0xEA
138	 E9	JUMP		 	 
- stack 0: 0x420
139	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x420
140	 EB	PUSH2	0040	 	 
- stack 1: 0x420
- stack 0: 0x40
141	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x420
- stack 0: 0xF0F0F0F
142	 EF	PUSH2	0020	 	 
- stack 2: 0x420
- stack 1: 0xF0F0F0F
- stack 0: 0x20
143	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x420
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
144	 F3	OR		 	  ;; # OR
- stack 1: 0x420
- stack 0: 0xFF0FFF0F
145	 F4	PUSH2	0060	 	 
- stack 2: 0x420
- stack 1: 0xFF0FFF0F
- stack 0: 0x60
146	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x420
147	 F8	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
148	 FA	ADD		 	 
- stack 0: 0x424
149	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
150	 FC	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x101F1000114FF0F01330002014D04A4018FFF010099FFF001A20F0F00CB00F0
151	 FD	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x101F1000114FF0F01330002014D04A4018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xF0
152	 FF	SHR		 	 
- stack 1: 0x424
- stack 0: 0x101
153	 100	JUMP		 	 
- stack 0: 0x424
154	 101	JUMPDEST		 ;; __riscvimpl_LUI_ff100eb7	  ;; # instr: lui t4,0xff100(ignore imm)
- stack 0: 0x424
155	 102	PUSH4	ff100000	 	 
- stack 1: 0x424
- stack 0: 0xFF100000
156	 107	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0xFF100000
- stack 0: 0x3A0
157	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x424
158	 10B	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
159	 10D	ADD		 	 
- stack 0: 0x428
160	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
161	 10F	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x114FF0F01330002014D04A4018FFF010099FFF001A20F0F00CB00F000EA0000
162	 110	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x114FF0F01330002014D04A4018FFF010099FFF001A20F0F00CB00F000EA0000
- stack 0: 0xF0
163	 112	SHR		 	 
- stack 1: 0x428
- stack 0: 0x114
164	 113	JUMP		 	 
- stack 0: 0x428
165	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x428
166	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
167	 116	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x114FF0F01330002014D04A4018FFF010099FFF001A20F0F00CB00F000EA0000
168	 117	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0x114FF0F01330002014D04A4018FFF010099FFF001A20F0F00CB00F000EA0000
- stack 0: 0xE0
169	 119	SHR		 	 
- stack 1: 0x428
- stack 0: 0x114FF0F
170	 11A	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0x114FF0F
- stack 0: 0xFFFF
171	 11D	AND		 	 
- stack 1: 0x428
- stack 0: 0xFF0F
172	 11E	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0xFF0F
- stack 0: 0x1
173	 120	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
174	 121	PUSH2	03A0	 	 
- stack 2: 0x428
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x3A0
175	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x428
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xFF100000
176	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x428
- stack 0: 0xFF0FFF0F
177	 126	PUSH2	03A0	 	 
- stack 2: 0x428
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
178	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x428
179	 12A	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
180	 12C	ADD		 	 
- stack 0: 0x42C
181	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
182	 12E	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x1330002014D04A4018FFF010099FFF001A20F0F00CB00F000EA000001B5FF10
183	 12F	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x1330002014D04A4018FFF010099FFF001A20F0F00CB00F000EA000001B5FF10
- stack 0: 0xF0
184	 131	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x133
185	 132	JUMP		 	 
- stack 0: 0x42C
186	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x42C
187	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
188	 135	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x1330002014D04A4018FFF010099FFF001A20F0F00CB00F000EA000001B5FF10
189	 136	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0x1330002014D04A4018FFF010099FFF001A20F0F00CB00F000EA000001B5FF10
- stack 0: 0xE0
190	 138	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x1330002
191	 139	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0x1330002
- stack 0: 0xFFFF
192	 13C	AND		 	 
- stack 1: 0x42C
- stack 0: 0x2
193	 13D	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x2
- stack 0: 0x1
194	 13F	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x2
195	 140	PUSH2	0380	 	 
- stack 2: 0x42C
- stack 1: 0x2
- stack 0: 0x380
196	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x42C
197	 144	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
198	 146	ADD		 	 
- stack 0: 0x430
199	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
200	 148	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x14D04A4018FFF010099FFF001A20F0F00CB00F000EA000001B5FF100114FFF0
201	 149	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x14D04A4018FFF010099FFF001A20F0F00CB00F000EA000001B5FF100114FFF0
- stack 0: 0xF0
202	 14B	SHR		 	 
- stack 1: 0x430
- stack 0: 0x14D
203	 14C	JUMP		 	 
- stack 0: 0x430
204	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x430
205	 14E	PUSH2	0060	 	 
- stack 1: 0x430
- stack 0: 0x60
206	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x430
- stack 0: 0xFF0FFF0F
207	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x430
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
208	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x430
- stack 0: 0xFF0FFF0F
209	 158	PUSH2	03A0	 	 
- stack 2: 0x430
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
210	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x430
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
211	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x430
- stack 2: 0xFF0FFF0F
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
212	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x430
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
213	 162	SUB		 	 
- stack 1: 0x430
- stack 0: 0x0
214	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x430
- stack 1: 0x0
- stack 0: 0x16B
215	 166	JUMPI		 	 
- stack 0: 0x430
216	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x430
- stack 0: 0x185
217	 16A	JUMP		 	 
- stack 0: 0x430
218	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x430
219	 186	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
220	 188	ADD		 	 
- stack 0: 0x434
221	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
222	 18A	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F000EA000001B5FF100114FFF001330003
223	 18B	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F000EA000001B5FF100114FFF001330003
- stack 0: 0xF0
224	 18D	SHR		 	 
- stack 1: 0x434
- stack 0: 0x18F
225	 18E	JUMP		 	 
- stack 0: 0x434
226	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x434
227	 190	PUSH4	0ff01000	 	 
- stack 1: 0x434
- stack 0: 0xFF01000
228	 195	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0xFF01000
- stack 0: 0x20
229	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x434
230	 199	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
231	 19B	ADD		 	 
- stack 0: 0x438
232	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
233	 19D	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x99FFF001A20F0F00CB00F000EA000001B5FF100114FFF001330003014D0480
234	 19E	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x99FFF001A20F0F00CB00F000EA000001B5FF100114FFF001330003014D0480
- stack 0: 0xF0
235	 1A0	SHR		 	 
- stack 1: 0x438
- stack 0: 0x99
236	 1A1	JUMP		 	 
- stack 0: 0x438
237	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x438
238	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
239	 9B	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x99FFF001A20F0F00CB00F000EA000001B5FF100114FFF001330003014D0480
240	 9C	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0x99FFF001A20F0F00CB00F000EA000001B5FF100114FFF001330003014D0480
- stack 0: 0xE0
241	 9E	SHR		 	 
- stack 1: 0x438
- stack 0: 0x99FFF0
242	 9F	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
243	 A2	AND		 	 
- stack 1: 0x438
- stack 0: 0xFFF0
244	 A3	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0xFFF0
- stack 0: 0x1
245	 A5	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
246	 A6	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
247	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x438
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
248	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x438
- stack 0: 0xFF00FF0
249	 AB	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0xFF00FF0
- stack 0: 0x20
250	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x438
251	 AF	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
252	 B1	ADD		 	 
- stack 0: 0x43C
253	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
254	 B3	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x1A20F0F00CB00F000EA000001B5FF100114FFF001330003014D048001C80FF0
255	 B4	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x1A20F0F00CB00F000EA000001B5FF100114FFF001330003014D048001C80FF0
- stack 0: 0xF0
256	 B6	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x1A2
257	 B7	JUMP		 	 
- stack 0: 0x43C
258	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x43C
259	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x43C
- stack 0: 0xF0F0F000
260	 1A8	PUSH2	0040	 	 
- stack 2: 0x43C
- stack 1: 0xF0F0F000
- stack 0: 0x40
261	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x43C
262	 1AC	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
263	 1AE	ADD		 	 
- stack 0: 0x440
264	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
265	 1B0	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xCB00F000EA000001B5FF100114FFF001330003014D048001C80FF0009900FF
266	 1B1	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0xCB00F000EA000001B5FF100114FFF001330003014D048001C80FF0009900FF
- stack 0: 0xF0
267	 1B3	SHR		 	 
- stack 1: 0x440
- stack 0: 0xCB
268	 1B4	JUMP		 	 
- stack 0: 0x440
269	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x440
270	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
271	 CD	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xCB00F000EA000001B5FF100114FFF001330003014D048001C80FF0009900FF
272	 CE	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0xCB00F000EA000001B5FF100114FFF001330003014D048001C80FF0009900FF
- stack 0: 0xE0
273	 D0	SHR		 	 
- stack 1: 0x440
- stack 0: 0xCB00F0
274	 D1	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
275	 D4	AND		 	 
- stack 1: 0x440
- stack 0: 0xF0
276	 D5	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0xF0
- stack 0: 0x1
277	 D7	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0xF0
278	 D8	PUSH2	0040	 	 
- stack 2: 0x440
- stack 1: 0xF0
- stack 0: 0x40
279	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x440
- stack 1: 0xF0
- stack 0: 0xF0F0F000
280	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x440
- stack 0: 0xF0F0F0F0
281	 DD	PUSH2	0040	 	 
- stack 2: 0x440
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
282	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x440
283	 E1	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
284	 E3	ADD		 	 
- stack 0: 0x444
285	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
286	 E5	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xEA000001B5FF100114FFF001330003014D048001C80FF0009900FF00B8F0F1
287	 E6	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xEA000001B5FF100114FFF001330003014D048001C80FF0009900FF00B8F0F1
- stack 0: 0xF0
288	 E8	SHR		 	 
- stack 1: 0x444
- stack 0: 0xEA
289	 E9	JUMP		 	 
- stack 0: 0x444
290	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x444
291	 EB	PUSH2	0040	 	 
- stack 1: 0x444
- stack 0: 0x40
292	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x444
- stack 0: 0xF0F0F0F0
293	 EF	PUSH2	0020	 	 
- stack 2: 0x444
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
294	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x444
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
295	 F3	OR		 	  ;; # OR
- stack 1: 0x444
- stack 0: 0xFFF0FFF0
296	 F4	PUSH2	0060	 	 
- stack 2: 0x444
- stack 1: 0xFFF0FFF0
- stack 0: 0x60
297	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x444
298	 F8	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
299	 FA	ADD		 	 
- stack 0: 0x448
300	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
301	 FC	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x1B5FF100114FFF001330003014D048001C80FF0009900FF00B8F0F100CBFF0F
302	 FD	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0x1B5FF100114FFF001330003014D048001C80FF0009900FF00B8F0F100CBFF0F
- stack 0: 0xF0
303	 FF	SHR		 	 
- stack 1: 0x448
- stack 0: 0x1B5
304	 100	JUMP		 	 
- stack 0: 0x448
305	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_fff10eb7	  ;; # instr: lui t4,0xfff10(ignore imm)
- stack 0: 0x448
306	 1B6	PUSH4	fff10000	 	 
- stack 1: 0x448
- stack 0: 0xFFF10000
307	 1BB	PUSH2	03A0	 	 
- stack 2: 0x448
- stack 1: 0xFFF10000
- stack 0: 0x3A0
308	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x448
309	 1BF	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
310	 1C1	ADD		 	 
- stack 0: 0x44C
311	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
312	 1C3	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x114FFF001330003014D048001C80FF0009900FF00B8F0F100CBFF0F00EA0000
313	 1C4	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x114FFF001330003014D048001C80FF0009900FF00B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
314	 1C6	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x114
315	 1C7	JUMP		 	 
- stack 0: 0x44C
316	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x44C
317	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
318	 116	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x114FFF001330003014D048001C80FF0009900FF00B8F0F100CBFF0F00EA0000
319	 117	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0x114FFF001330003014D048001C80FF0009900FF00B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
320	 119	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x114FFF0
321	 11A	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0x114FFF0
- stack 0: 0xFFFF
322	 11D	AND		 	 
- stack 1: 0x44C
- stack 0: 0xFFF0
323	 11E	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0xFFF0
- stack 0: 0x1
324	 120	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
325	 121	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
326	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFF10000
327	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x44C
- stack 0: 0xFFF0FFF0
328	 126	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0xFFF0FFF0
- stack 0: 0x3A0
329	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x44C
330	 12A	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
331	 12C	ADD		 	 
- stack 0: 0x450
332	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
333	 12E	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x1330003014D048001C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFFF1
334	 12F	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x1330003014D048001C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFFF1
- stack 0: 0xF0
335	 131	SHR		 	 
- stack 1: 0x450
- stack 0: 0x133
336	 132	JUMP		 	 
- stack 0: 0x450
337	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
338	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
339	 135	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x1330003014D048001C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFFF1
340	 136	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x1330003014D048001C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFFF1
- stack 0: 0xE0
341	 138	SHR		 	 
- stack 1: 0x450
- stack 0: 0x1330003
342	 139	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x1330003
- stack 0: 0xFFFF
343	 13C	AND		 	 
- stack 1: 0x450
- stack 0: 0x3
344	 13D	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x3
- stack 0: 0x1
345	 13F	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x3
346	 140	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x3
- stack 0: 0x380
347	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
348	 144	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
349	 146	ADD		 	 
- stack 0: 0x454
350	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
351	 148	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x14D048001C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFFF10114FFFF
352	 149	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x14D048001C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFFF10114FFFF
- stack 0: 0xF0
353	 14B	SHR		 	 
- stack 1: 0x454
- stack 0: 0x14D
354	 14C	JUMP		 	 
- stack 0: 0x454
355	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x454
356	 14E	PUSH2	0060	 	 
- stack 1: 0x454
- stack 0: 0x60
357	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x454
- stack 0: 0xFFF0FFF0
358	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x454
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFFFFFFF
359	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x454
- stack 0: 0xFFF0FFF0
360	 158	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xFFF0FFF0
- stack 0: 0x3A0
361	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x454
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFF0FFF0
362	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x454
- stack 2: 0xFFF0FFF0
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFFFFFFF
363	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x454
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFF0FFF0
364	 162	SUB		 	 
- stack 1: 0x454
- stack 0: 0x0
365	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x454
- stack 1: 0x0
- stack 0: 0x16B
366	 166	JUMPI		 	 
- stack 0: 0x454
367	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x454
- stack 0: 0x185
368	 16A	JUMP		 	 
- stack 0: 0x454
369	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x454
370	 186	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
371	 188	ADD		 	 
- stack 0: 0x458
372	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
373	 18A	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFFF10114FFFF01330004
374	 18B	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFFF10114FFFF01330004
- stack 0: 0xF0
375	 18D	SHR		 	 
- stack 1: 0x458
- stack 0: 0x1C8
376	 18E	JUMP		 	 
- stack 0: 0x458
377	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x458
378	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x458
- stack 0: 0xFF0000
379	 1CE	PUSH2	0020	 	 
- stack 2: 0x458
- stack 1: 0xFF0000
- stack 0: 0x20
380	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x458
381	 1D2	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
382	 1D4	ADD		 	 
- stack 0: 0x45C
383	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
384	 1D6	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000001DBFFF10114FFFF01330004014D045C
385	 1D7	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000001DBFFF10114FFFF01330004014D045C
- stack 0: 0xF0
386	 1D9	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x99
387	 1DA	JUMP		 	 
- stack 0: 0x45C
388	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x45C
389	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
390	 9B	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000001DBFFF10114FFFF01330004014D045C
391	 9C	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000001DBFFF10114FFFF01330004014D045C
- stack 0: 0xE0
392	 9E	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x9900FF
393	 9F	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0x9900FF
- stack 0: 0xFFFF
394	 A2	AND		 	 
- stack 1: 0x45C
- stack 0: 0xFF
395	 A3	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0xFF
- stack 0: 0x1
396	 A5	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0xFF
397	 A6	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0xFF
- stack 0: 0x20
398	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x45C
- stack 1: 0xFF
- stack 0: 0xFF0000
399	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x45C
- stack 0: 0xFF00FF
400	 AB	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0xFF00FF
- stack 0: 0x20
401	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x45C
402	 AF	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
403	 B1	ADD		 	 
- stack 0: 0x460
404	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
405	 B3	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0xB8F0F100CBFF0F00EA000001DBFFF10114FFFF01330004014D045C01EE00FF
406	 B4	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0xB8F0F100CBFF0F00EA000001DBFFF10114FFFF01330004014D045C01EE00FF
- stack 0: 0xF0
407	 B6	SHR		 	 
- stack 1: 0x460
- stack 0: 0xB8
408	 B7	JUMP		 	 
- stack 0: 0x460
409	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x460
410	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x460
- stack 0: 0xF0F1000
411	 BE	PUSH2	0040	 	 
- stack 2: 0x460
- stack 1: 0xF0F1000
- stack 0: 0x40
412	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x460
413	 C2	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
414	 C4	ADD		 	 
- stack 0: 0x464
415	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
416	 C6	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xCBFF0F00EA000001DBFFF10114FFFF01330004014D045C01EE00FF0099000F
417	 C7	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xCBFF0F00EA000001DBFFF10114FFFF01330004014D045C01EE00FF0099000F
- stack 0: 0xF0
418	 C9	SHR		 	 
- stack 1: 0x464
- stack 0: 0xCB
419	 CA	JUMP		 	 
- stack 0: 0x464
420	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x464
421	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
422	 CD	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xCBFF0F00EA000001DBFFF10114FFFF01330004014D045C01EE00FF0099000F
423	 CE	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0xCBFF0F00EA000001DBFFF10114FFFF01330004014D045C01EE00FF0099000F
- stack 0: 0xE0
424	 D0	SHR		 	 
- stack 1: 0x464
- stack 0: 0xCBFF0F
425	 D1	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
426	 D4	AND		 	 
- stack 1: 0x464
- stack 0: 0xFF0F
427	 D5	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xFF0F
- stack 0: 0x1
428	 D7	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
429	 D8	PUSH2	0040	 	 
- stack 2: 0x464
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
430	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x464
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
431	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x464
- stack 0: 0xF0F0F0F
432	 DD	PUSH2	0040	 	 
- stack 2: 0x464
- stack 1: 0xF0F0F0F
- stack 0: 0x40
433	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x464
434	 E1	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
435	 E3	ADD		 	 
- stack 0: 0x468
436	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
437	 E5	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xEA000001DBFFF10114FFFF01330004014D045C01EE00FF0099000F01A20F0F
438	 E6	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xEA000001DBFFF10114FFFF01330004014D045C01EE00FF0099000F01A20F0F
- stack 0: 0xF0
439	 E8	SHR		 	 
- stack 1: 0x468
- stack 0: 0xEA
440	 E9	JUMP		 	 
- stack 0: 0x468
441	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x468
442	 EB	PUSH2	0040	 	 
- stack 1: 0x468
- stack 0: 0x40
443	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x468
- stack 0: 0xF0F0F0F
444	 EF	PUSH2	0020	 	 
- stack 2: 0x468
- stack 1: 0xF0F0F0F
- stack 0: 0x20
445	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x468
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
446	 F3	OR		 	  ;; # OR
- stack 1: 0x468
- stack 0: 0xFFF0FFF
447	 F4	PUSH2	0060	 	 
- stack 2: 0x468
- stack 1: 0xFFF0FFF
- stack 0: 0x60
448	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x468
449	 F8	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
450	 FA	ADD		 	 
- stack 0: 0x46C
451	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
452	 FC	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x1DBFFF10114FFFF01330004014D045C01EE00FF0099000F01A20F0F00CB00F0
453	 FD	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x1DBFFF10114FFFF01330004014D045C01EE00FF0099000F01A20F0F00CB00F0
- stack 0: 0xF0
454	 FF	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x1DB
455	 100	JUMP		 	 
- stack 0: 0x46C
456	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_fff1eb7	  ;; # instr: lui t4,0xfff1(ignore imm)
- stack 0: 0x46C
457	 1DC	PUSH4	0fff1000	 	 
- stack 1: 0x46C
- stack 0: 0xFFF1000
458	 1E1	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0xFFF1000
- stack 0: 0x3A0
459	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x46C
460	 1E5	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
461	 1E7	ADD		 	 
- stack 0: 0x470
462	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
463	 1E9	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x114FFFF01330004014D045C01EE00FF0099000F01A20F0F00CB00F000EA0000
464	 1EA	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x114FFFF01330004014D045C01EE00FF0099000F01A20F0F00CB00F000EA0000
- stack 0: 0xF0
465	 1EC	SHR		 	 
- stack 1: 0x470
- stack 0: 0x114
466	 1ED	JUMP		 	 
- stack 0: 0x470
467	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x470
468	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
469	 116	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x114FFFF01330004014D045C01EE00FF0099000F01A20F0F00CB00F000EA0000
470	 117	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x114FFFF01330004014D045C01EE00FF0099000F01A20F0F00CB00F000EA0000
- stack 0: 0xE0
471	 119	SHR		 	 
- stack 1: 0x470
- stack 0: 0x114FFFF
472	 11A	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x114FFFF
- stack 0: 0xFFFF
473	 11D	AND		 	 
- stack 1: 0x470
- stack 0: 0xFFFF
474	 11E	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0xFFFF
- stack 0: 0x1
475	 120	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
476	 121	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
477	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x470
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFF1000
478	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x470
- stack 0: 0xFFF0FFF
479	 126	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0xFFF0FFF
- stack 0: 0x3A0
480	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x470
481	 12A	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
482	 12C	ADD		 	 
- stack 0: 0x474
483	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
484	 12E	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x1330004014D045C01EE00FF0099000F01A20F0F00CB00F000EA000002010FFF
485	 12F	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x1330004014D045C01EE00FF0099000F01A20F0F00CB00F000EA000002010FFF
- stack 0: 0xF0
486	 131	SHR		 	 
- stack 1: 0x474
- stack 0: 0x133
487	 132	JUMP		 	 
- stack 0: 0x474
488	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x474
489	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
490	 135	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x1330004014D045C01EE00FF0099000F01A20F0F00CB00F000EA000002010FFF
491	 136	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0x1330004014D045C01EE00FF0099000F01A20F0F00CB00F000EA000002010FFF
- stack 0: 0xE0
492	 138	SHR		 	 
- stack 1: 0x474
- stack 0: 0x1330004
493	 139	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0x1330004
- stack 0: 0xFFFF
494	 13C	AND		 	 
- stack 1: 0x474
- stack 0: 0x4
495	 13D	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x4
- stack 0: 0x1
496	 13F	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x4
497	 140	PUSH2	0380	 	 
- stack 2: 0x474
- stack 1: 0x4
- stack 0: 0x380
498	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x474
499	 144	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
500	 146	ADD		 	 
- stack 0: 0x478
501	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
502	 148	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x14D045C01EE00FF0099000F01A20F0F00CB00F000EA000002010FFF011400FF
503	 149	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x14D045C01EE00FF0099000F01A20F0F00CB00F000EA000002010FFF011400FF
- stack 0: 0xF0
504	 14B	SHR		 	 
- stack 1: 0x478
- stack 0: 0x14D
505	 14C	JUMP		 	 
- stack 0: 0x478
506	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x478
507	 14E	PUSH2	0060	 	 
- stack 1: 0x478
- stack 0: 0x60
508	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x478
- stack 0: 0xFFF0FFF
509	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x478
- stack 1: 0xFFF0FFF
- stack 0: 0xFFFFFFFF
510	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x478
- stack 0: 0xFFF0FFF
511	 158	PUSH2	03A0	 	 
- stack 2: 0x478
- stack 1: 0xFFF0FFF
- stack 0: 0x3A0
512	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x478
- stack 1: 0xFFF0FFF
- stack 0: 0xFFF0FFF
513	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x478
- stack 2: 0xFFF0FFF
- stack 1: 0xFFF0FFF
- stack 0: 0xFFFFFFFF
514	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x478
- stack 1: 0xFFF0FFF
- stack 0: 0xFFF0FFF
515	 162	SUB		 	 
- stack 1: 0x478
- stack 0: 0x0
516	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x16B
517	 166	JUMPI		 	 
- stack 0: 0x478
518	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x478
- stack 0: 0x185
519	 16A	JUMP		 	 
- stack 0: 0x478
520	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x478
521	 186	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
522	 188	ADD		 	 
- stack 0: 0x47C
523	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
524	 18A	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x1EE00FF0099000F01A20F0F00CB00F000EA000002010FFF011400FF01330005
525	 18B	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x1EE00FF0099000F01A20F0F00CB00F000EA000002010FFF011400FF01330005
- stack 0: 0xF0
526	 18D	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x1EE
527	 18E	JUMP		 	 
- stack 0: 0x47C
528	 1EE	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x47C
529	 1EF	PUSH4	f00ff000	 	 
- stack 1: 0x47C
- stack 0: 0xF00FF000
530	 1F4	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0xF00FF000
- stack 0: 0x20
531	 1F7	MSTORE		 	  ;; # store to x1
- stack 0: 0x47C
532	 1F8	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
533	 1FA	ADD		 	 
- stack 0: 0x480
534	 1FB	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
535	 1FC	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x99000F01A20F0F00CB00F000EA000002010FFF011400FF01330005014D0438
536	 1FD	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x99000F01A20F0F00CB00F000EA000002010FFF011400FF01330005014D0438
- stack 0: 0xF0
537	 1FF	SHR		 	 
- stack 1: 0x480
- stack 0: 0x99
538	 200	JUMP		 	 
- stack 0: 0x480
539	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x480
540	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
541	 9B	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x99000F01A20F0F00CB00F000EA000002010FFF011400FF01330005014D0438
542	 9C	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x99000F01A20F0F00CB00F000EA000002010FFF011400FF01330005014D0438
- stack 0: 0xE0
543	 9E	SHR		 	 
- stack 1: 0x480
- stack 0: 0x99000F
544	 9F	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x99000F
- stack 0: 0xFFFF
545	 A2	AND		 	 
- stack 1: 0x480
- stack 0: 0xF
546	 A3	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0xF
- stack 0: 0x1
547	 A5	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0xF
548	 A6	PUSH2	0020	 	 
- stack 2: 0x480
- stack 1: 0xF
- stack 0: 0x20
549	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x480
- stack 1: 0xF
- stack 0: 0xF00FF000
550	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x480
- stack 0: 0xF00FF00F
551	 AB	PUSH2	0020	 	 
- stack 2: 0x480
- stack 1: 0xF00FF00F
- stack 0: 0x20
552	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x480
553	 AF	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
554	 B1	ADD		 	 
- stack 0: 0x484
555	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
556	 B3	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x1A20F0F00CB00F000EA000002010FFF011400FF01330005014D04380086F010
557	 B4	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x1A20F0F00CB00F000EA000002010FFF011400FF01330005014D04380086F010
- stack 0: 0xF0
558	 B6	SHR		 	 
- stack 1: 0x484
- stack 0: 0x1A2
559	 B7	JUMP		 	 
- stack 0: 0x484
560	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x484
561	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x484
- stack 0: 0xF0F0F000
562	 1A8	PUSH2	0040	 	 
- stack 2: 0x484
- stack 1: 0xF0F0F000
- stack 0: 0x40
563	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x484
564	 1AC	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
565	 1AE	ADD		 	 
- stack 0: 0x488
566	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
567	 1B0	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xCB00F000EA000002010FFF011400FF01330005014D04380086F0100099FF00
568	 1B1	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0xCB00F000EA000002010FFF011400FF01330005014D04380086F0100099FF00
- stack 0: 0xF0
569	 1B3	SHR		 	 
- stack 1: 0x488
- stack 0: 0xCB
570	 1B4	JUMP		 	 
- stack 0: 0x488
571	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x488
572	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x488
- stack 0: 0x488
573	 CD	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xCB00F000EA000002010FFF011400FF01330005014D04380086F0100099FF00
574	 CE	PUSH1	E0	 	 
- stack 2: 0x488
- stack 1: 0xCB00F000EA000002010FFF011400FF01330005014D04380086F0100099FF00
- stack 0: 0xE0
575	 D0	SHR		 	 
- stack 1: 0x488
- stack 0: 0xCB00F0
576	 D1	PUSH2	FFFF	 	 
- stack 2: 0x488
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
577	 D4	AND		 	 
- stack 1: 0x488
- stack 0: 0xF0
578	 D5	PUSH1	01	 	 
- stack 2: 0x488
- stack 1: 0xF0
- stack 0: 0x1
579	 D7	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0xF0
580	 D8	PUSH2	0040	 	 
- stack 2: 0x488
- stack 1: 0xF0
- stack 0: 0x40
581	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x488
- stack 1: 0xF0
- stack 0: 0xF0F0F000
582	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x488
- stack 0: 0xF0F0F0F0
583	 DD	PUSH2	0040	 	 
- stack 2: 0x488
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
584	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x488
585	 E1	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
586	 E3	ADD		 	 
- stack 0: 0x48C
587	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
588	 E5	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0xEA000002010FFF011400FF01330005014D04380086F0100099FF0000B8F0F1
589	 E6	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0xEA000002010FFF011400FF01330005014D04380086F0100099FF0000B8F0F1
- stack 0: 0xF0
590	 E8	SHR		 	 
- stack 1: 0x48C
- stack 0: 0xEA
591	 E9	JUMP		 	 
- stack 0: 0x48C
592	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x48C
593	 EB	PUSH2	0040	 	 
- stack 1: 0x48C
- stack 0: 0x40
594	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x48C
- stack 0: 0xF0F0F0F0
595	 EF	PUSH2	0020	 	 
- stack 2: 0x48C
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
596	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x48C
- stack 1: 0xF0F0F0F0
- stack 0: 0xF00FF00F
597	 F3	OR		 	  ;; # OR
- stack 1: 0x48C
- stack 0: 0xF0FFF0FF
598	 F4	PUSH2	0060	 	 
- stack 2: 0x48C
- stack 1: 0xF0FFF0FF
- stack 0: 0x60
599	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x48C
600	 F8	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
601	 FA	ADD		 	 
- stack 0: 0x490
602	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
603	 FC	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x2010FFF011400FF01330005014D04380086F0100099FF0000B8F0F100CBFF0F
604	 FD	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x2010FFF011400FF01330005014D04380086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xF0
605	 FF	SHR		 	 
- stack 1: 0x490
- stack 0: 0x201
606	 100	JUMP		 	 
- stack 0: 0x490
607	 201	JUMPDEST		 ;; __riscvimpl_LUI_f0fffeb7	  ;; # instr: lui t4,0xf0fff(ignore imm)
- stack 0: 0x490
608	 202	PUSH4	f0fff000	 	 
- stack 1: 0x490
- stack 0: 0xF0FFF000
609	 207	PUSH2	03A0	 	 
- stack 2: 0x490
- stack 1: 0xF0FFF000
- stack 0: 0x3A0
610	 20A	MSTORE		 	  ;; # store to x29
- stack 0: 0x490
611	 20B	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
612	 20D	ADD		 	 
- stack 0: 0x494
613	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
614	 20F	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x11400FF01330005014D04380086F0100099FF0000B8F0F100CBFF0F02140000
615	 210	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x11400FF01330005014D04380086F0100099FF0000B8F0F100CBFF0F02140000
- stack 0: 0xF0
616	 212	SHR		 	 
- stack 1: 0x494
- stack 0: 0x114
617	 213	JUMP		 	 
- stack 0: 0x494
618	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x494
619	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
620	 116	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x11400FF01330005014D04380086F0100099FF0000B8F0F100CBFF0F02140000
621	 117	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0x11400FF01330005014D04380086F0100099FF0000B8F0F100CBFF0F02140000
- stack 0: 0xE0
622	 119	SHR		 	 
- stack 1: 0x494
- stack 0: 0x11400FF
623	 11A	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0x11400FF
- stack 0: 0xFFFF
624	 11D	AND		 	 
- stack 1: 0x494
- stack 0: 0xFF
625	 11E	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0xFF
- stack 0: 0x1
626	 120	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0xFF
627	 121	PUSH2	03A0	 	 
- stack 2: 0x494
- stack 1: 0xFF
- stack 0: 0x3A0
628	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x494
- stack 1: 0xFF
- stack 0: 0xF0FFF000
629	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x494
- stack 0: 0xF0FFF0FF
630	 126	PUSH2	03A0	 	 
- stack 2: 0x494
- stack 1: 0xF0FFF0FF
- stack 0: 0x3A0
631	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x494
632	 12A	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
633	 12C	ADD		 	 
- stack 0: 0x498
634	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
635	 12E	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x1330005014D04380086F0100099FF0000B8F0F100CBFF0F021400000101F100
636	 12F	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x1330005014D04380086F0100099FF0000B8F0F100CBFF0F021400000101F100
- stack 0: 0xF0
637	 131	SHR		 	 
- stack 1: 0x498
- stack 0: 0x133
638	 132	JUMP		 	 
- stack 0: 0x498
639	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x498
640	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
641	 135	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x1330005014D04380086F0100099FF0000B8F0F100CBFF0F021400000101F100
642	 136	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0x1330005014D04380086F0100099FF0000B8F0F100CBFF0F021400000101F100
- stack 0: 0xE0
643	 138	SHR		 	 
- stack 1: 0x498
- stack 0: 0x1330005
644	 139	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0x1330005
- stack 0: 0xFFFF
645	 13C	AND		 	 
- stack 1: 0x498
- stack 0: 0x5
646	 13D	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x5
- stack 0: 0x1
647	 13F	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x5
648	 140	PUSH2	0380	 	 
- stack 2: 0x498
- stack 1: 0x5
- stack 0: 0x380
649	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x498
650	 144	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
651	 146	ADD		 	 
- stack 0: 0x49C
652	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
653	 148	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x14D04380086F0100099FF0000B8F0F100CBFF0F021400000101F1000114FF0F
654	 149	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x14D04380086F0100099FF0000B8F0F100CBFF0F021400000101F1000114FF0F
- stack 0: 0xF0
655	 14B	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x14D
656	 14C	JUMP		 	 
- stack 0: 0x49C
657	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x49C
658	 14E	PUSH2	0060	 	 
- stack 1: 0x49C
- stack 0: 0x60
659	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x49C
- stack 0: 0xF0FFF0FF
660	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0xF0FFF0FF
- stack 0: 0xFFFFFFFF
661	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0xF0FFF0FF
662	 158	PUSH2	03A0	 	 
- stack 2: 0x49C
- stack 1: 0xF0FFF0FF
- stack 0: 0x3A0
663	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x49C
- stack 1: 0xF0FFF0FF
- stack 0: 0xF0FFF0FF
664	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x49C
- stack 2: 0xF0FFF0FF
- stack 1: 0xF0FFF0FF
- stack 0: 0xFFFFFFFF
665	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x49C
- stack 1: 0xF0FFF0FF
- stack 0: 0xF0FFF0FF
666	 162	SUB		 	 
- stack 1: 0x49C
- stack 0: 0x0
667	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x16B
668	 166	JUMPI		 	 
- stack 0: 0x49C
669	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x49C
- stack 0: 0x185
670	 16A	JUMP		 	 
- stack 0: 0x49C
671	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x49C
672	 186	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
673	 188	ADD		 	 
- stack 0: 0x4A0
674	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
675	 18A	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F021400000101F1000114FF0F01330006
676	 18B	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F021400000101F1000114FF0F01330006
- stack 0: 0xF0
677	 18D	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x86
678	 18E	JUMP		 	 
- stack 0: 0x4A0
679	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x4A0
680	 87	PUSH4	ff010000	 	 
- stack 1: 0x4A0
- stack 0: 0xFF010000
681	 8C	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0xFF010000
- stack 0: 0x20
682	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A0
683	 90	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
684	 92	ADD		 	 
- stack 0: 0x4A4
685	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
686	 94	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x99FF0000B8F0F100CBFF0F021400000101F1000114FF0F01330006022B0414
687	 95	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x99FF0000B8F0F100CBFF0F021400000101F1000114FF0F01330006022B0414
- stack 0: 0xF0
688	 97	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x99
689	 98	JUMP		 	 
- stack 0: 0x4A4
690	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4A4
691	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
692	 9B	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x99FF0000B8F0F100CBFF0F021400000101F1000114FF0F01330006022B0414
693	 9C	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x99FF0000B8F0F100CBFF0F021400000101F1000114FF0F01330006022B0414
- stack 0: 0xE0
694	 9E	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x99FF00
695	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x99FF00
- stack 0: 0xFFFF
696	 A2	AND		 	 
- stack 1: 0x4A4
- stack 0: 0xFF00
697	 A3	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0xFF00
- stack 0: 0x1
698	 A5	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
699	 A6	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
700	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
701	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4A4
- stack 0: 0xFF00FF00
702	 AB	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0xFF00FF00
- stack 0: 0x20
703	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A4
704	 AF	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
705	 B1	ADD		 	 
- stack 0: 0x4A8
706	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
707	 B3	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xB8F0F100CBFF0F021400000101F1000114FF0F01330006022B04140086F010
708	 B4	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xB8F0F100CBFF0F021400000101F1000114FF0F01330006022B04140086F010
- stack 0: 0xF0
709	 B6	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xB8
710	 B7	JUMP		 	 
- stack 0: 0x4A8
711	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x4A8
712	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x4A8
- stack 0: 0xF0F1000
713	 BE	PUSH2	0040	 	 
- stack 2: 0x4A8
- stack 1: 0xF0F1000
- stack 0: 0x40
714	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x4A8
715	 C2	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
716	 C4	ADD		 	 
- stack 0: 0x4AC
717	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
718	 C6	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xCBFF0F021400000101F1000114FF0F01330006022B04140086F0100099FF00
719	 C7	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xCBFF0F021400000101F1000114FF0F01330006022B04140086F0100099FF00
- stack 0: 0xF0
720	 C9	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xCB
721	 CA	JUMP		 	 
- stack 0: 0x4AC
722	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x4AC
723	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
724	 CD	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xCBFF0F021400000101F1000114FF0F01330006022B04140086F0100099FF00
725	 CE	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0xCBFF0F021400000101F1000114FF0F01330006022B04140086F0100099FF00
- stack 0: 0xE0
726	 D0	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xCBFF0F
727	 D1	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
728	 D4	AND		 	 
- stack 1: 0x4AC
- stack 0: 0xFF0F
729	 D5	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0xFF0F
- stack 0: 0x1
730	 D7	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
731	 D8	PUSH2	0040	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
732	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
733	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x4AC
- stack 0: 0xF0F0F0F
734	 DD	PUSH2	0040	 	 
- stack 2: 0x4AC
- stack 1: 0xF0F0F0F
- stack 0: 0x40
735	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x4AC
736	 E1	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
737	 E3	ADD		 	 
- stack 0: 0x4B0
738	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
739	 E5	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x21400000101F1000114FF0F01330006022B04140086F0100099FF0000B8F0F1
740	 E6	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x21400000101F1000114FF0F01330006022B04140086F0100099FF0000B8F0F1
- stack 0: 0xF0
741	 E8	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x214
742	 E9	JUMP		 	 
- stack 0: 0x4B0
743	 214	JUMPDEST		 ;; __riscvimpl_OR_1_1_2	  ;; # instr: or ra,ra,sp(ignore imm)
- stack 0: 0x4B0
744	 215	PUSH2	0040	 	 
- stack 1: 0x4B0
- stack 0: 0x40
745	 218	MLOAD		 	  ;; # read from x2
- stack 1: 0x4B0
- stack 0: 0xF0F0F0F
746	 219	PUSH2	0020	 	 
- stack 2: 0x4B0
- stack 1: 0xF0F0F0F
- stack 0: 0x20
747	 21C	MLOAD		 	  ;; # read from x1
- stack 2: 0x4B0
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
748	 21D	OR		 	  ;; # OR
- stack 1: 0x4B0
- stack 0: 0xFF0FFF0F
749	 21E	PUSH2	0020	 	 
- stack 2: 0x4B0
- stack 1: 0xFF0FFF0F
- stack 0: 0x20
750	 221	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B0
751	 222	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
752	 224	ADD		 	 
- stack 0: 0x4B4
753	 225	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
754	 226	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x101F1000114FF0F01330006022B04140086F0100099FF0000B8F0F100CBFF0F
755	 227	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x101F1000114FF0F01330006022B04140086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xF0
756	 229	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x101
757	 22A	JUMP		 	 
- stack 0: 0x4B4
758	 101	JUMPDEST		 ;; __riscvimpl_LUI_ff100eb7	  ;; # instr: lui t4,0xff100(ignore imm)
- stack 0: 0x4B4
759	 102	PUSH4	ff100000	 	 
- stack 1: 0x4B4
- stack 0: 0xFF100000
760	 107	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0xFF100000
- stack 0: 0x3A0
761	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B4
762	 10B	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
763	 10D	ADD		 	 
- stack 0: 0x4B8
764	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
765	 10F	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x114FF0F01330006022B04140086F0100099FF0000B8F0F100CBFF0F026D0000
766	 110	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x114FF0F01330006022B04140086F0100099FF0000B8F0F100CBFF0F026D0000
- stack 0: 0xF0
767	 112	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x114
768	 113	JUMP		 	 
- stack 0: 0x4B8
769	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x4B8
770	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
771	 116	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x114FF0F01330006022B04140086F0100099FF0000B8F0F100CBFF0F026D0000
772	 117	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0x114FF0F01330006022B04140086F0100099FF0000B8F0F100CBFF0F026D0000
- stack 0: 0xE0
773	 119	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x114FF0F
774	 11A	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x114FF0F
- stack 0: 0xFFFF
775	 11D	AND		 	 
- stack 1: 0x4B8
- stack 0: 0xFF0F
776	 11E	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0xFF0F
- stack 0: 0x1
777	 120	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
778	 121	PUSH2	03A0	 	 
- stack 2: 0x4B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x3A0
779	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x4B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xFF100000
780	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x4B8
- stack 0: 0xFF0FFF0F
781	 126	PUSH2	03A0	 	 
- stack 2: 0x4B8
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
782	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B8
783	 12A	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
784	 12C	ADD		 	 
- stack 0: 0x4BC
785	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
786	 12E	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x1330006022B04140086F0100099FF0000B8F0F100CBFF0F026D00000101F100
787	 12F	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x1330006022B04140086F0100099FF0000B8F0F100CBFF0F026D00000101F100
- stack 0: 0xF0
788	 131	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x133
789	 132	JUMP		 	 
- stack 0: 0x4BC
790	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4BC
791	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
792	 135	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x1330006022B04140086F0100099FF0000B8F0F100CBFF0F026D00000101F100
793	 136	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0x1330006022B04140086F0100099FF0000B8F0F100CBFF0F026D00000101F100
- stack 0: 0xE0
794	 138	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x1330006
795	 139	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x1330006
- stack 0: 0xFFFF
796	 13C	AND		 	 
- stack 1: 0x4BC
- stack 0: 0x6
797	 13D	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0x6
- stack 0: 0x1
798	 13F	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0x6
799	 140	PUSH2	0380	 	 
- stack 2: 0x4BC
- stack 1: 0x6
- stack 0: 0x380
800	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x4BC
801	 144	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
802	 146	ADD		 	 
- stack 0: 0x4C0
803	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
804	 148	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x22B04140086F0100099FF0000B8F0F100CBFF0F026D00000101F1000114FF0F
805	 149	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x22B04140086F0100099FF0000B8F0F100CBFF0F026D00000101F1000114FF0F
- stack 0: 0xF0
806	 14B	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x22B
807	 14C	JUMP		 	 
- stack 0: 0x4C0
808	 22B	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,414(ignore imm)
- stack 0: 0x4C0
809	 22C	PUSH2	0020	 	 
- stack 1: 0x4C0
- stack 0: 0x20
810	 22F	MLOAD		 	  ;; # read from x1
- stack 1: 0x4C0
- stack 0: 0xFF0FFF0F
811	 230	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C0
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
812	 235	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C0
- stack 0: 0xFF0FFF0F
813	 236	PUSH2	03A0	 	 
- stack 2: 0x4C0
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
814	 239	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C0
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
815	 23A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C0
- stack 2: 0xFF0FFF0F
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
816	 23F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C0
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
817	 240	SUB		 	 
- stack 1: 0x4C0
- stack 0: 0x0
818	 241	PUSH2	0249	 ;; _neq_107d6c10076d93d581b34cfc1b309ed2e16ff318fee66d51dd7ef509b8b844f5	 
- stack 2: 0x4C0
- stack 1: 0x0
- stack 0: 0x249
819	 244	JUMPI		 	 
- stack 0: 0x4C0
820	 245	PUSH2	0263	 ;; _neq_after_107d6c10076d93d581b34cfc1b309ed2e16ff318fee66d51dd7ef509b8b844f5	 
- stack 1: 0x4C0
- stack 0: 0x263
821	 248	JUMP		 	 
- stack 0: 0x4C0
822	 263	JUMPDEST		 ;; _neq_after_107d6c10076d93d581b34cfc1b309ed2e16ff318fee66d51dd7ef509b8b844f5	 
- stack 0: 0x4C0
823	 264	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
824	 266	ADD		 	 
- stack 0: 0x4C4
825	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
826	 268	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F026D00000101F1000114FF0F01330007
827	 269	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F026D00000101F1000114FF0F01330007
- stack 0: 0xF0
828	 26B	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x86
829	 26C	JUMP		 	 
- stack 0: 0x4C4
830	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x4C4
831	 87	PUSH4	ff010000	 	 
- stack 1: 0x4C4
- stack 0: 0xFF010000
832	 8C	PUSH2	0020	 	 
- stack 2: 0x4C4
- stack 1: 0xFF010000
- stack 0: 0x20
833	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C4
834	 90	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
835	 92	ADD		 	 
- stack 0: 0x4C8
836	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
837	 94	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x99FF0000B8F0F100CBFF0F026D00000101F1000114FF0F01330007028403F0
838	 95	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x99FF0000B8F0F100CBFF0F026D00000101F1000114FF0F01330007028403F0
- stack 0: 0xF0
839	 97	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x99
840	 98	JUMP		 	 
- stack 0: 0x4C8
841	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4C8
842	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
843	 9B	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x99FF0000B8F0F100CBFF0F026D00000101F1000114FF0F01330007028403F0
844	 9C	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0x99FF0000B8F0F100CBFF0F026D00000101F1000114FF0F01330007028403F0
- stack 0: 0xE0
845	 9E	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x99FF00
846	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0x99FF00
- stack 0: 0xFFFF
847	 A2	AND		 	 
- stack 1: 0x4C8
- stack 0: 0xFF00
848	 A3	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0xFF00
- stack 0: 0x1
849	 A5	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
850	 A6	PUSH2	0020	 	 
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
851	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
852	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4C8
- stack 0: 0xFF00FF00
853	 AB	PUSH2	0020	 	 
- stack 2: 0x4C8
- stack 1: 0xFF00FF00
- stack 0: 0x20
854	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C8
855	 AF	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
856	 B1	ADD		 	 
- stack 0: 0x4CC
857	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
858	 B3	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xB8F0F100CBFF0F026D00000101F1000114FF0F01330007028403F00086F010
859	 B4	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0xB8F0F100CBFF0F026D00000101F1000114FF0F01330007028403F00086F010
- stack 0: 0xF0
860	 B6	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xB8
861	 B7	JUMP		 	 
- stack 0: 0x4CC
862	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x4CC
863	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x4CC
- stack 0: 0xF0F1000
864	 BE	PUSH2	0040	 	 
- stack 2: 0x4CC
- stack 1: 0xF0F1000
- stack 0: 0x40
865	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x4CC
866	 C2	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
867	 C4	ADD		 	 
- stack 0: 0x4D0
868	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
869	 C6	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0xCBFF0F026D00000101F1000114FF0F01330007028403F00086F0100099FF00
870	 C7	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0xCBFF0F026D00000101F1000114FF0F01330007028403F00086F0100099FF00
- stack 0: 0xF0
871	 C9	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0xCB
872	 CA	JUMP		 	 
- stack 0: 0x4D0
873	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x4D0
874	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
875	 CD	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0xCBFF0F026D00000101F1000114FF0F01330007028403F00086F0100099FF00
876	 CE	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0xCBFF0F026D00000101F1000114FF0F01330007028403F00086F0100099FF00
- stack 0: 0xE0
877	 D0	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0xCBFF0F
878	 D1	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
879	 D4	AND		 	 
- stack 1: 0x4D0
- stack 0: 0xFF0F
880	 D5	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0xFF0F
- stack 0: 0x1
881	 D7	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
882	 D8	PUSH2	0040	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
883	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
884	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x4D0
- stack 0: 0xF0F0F0F
885	 DD	PUSH2	0040	 	 
- stack 2: 0x4D0
- stack 1: 0xF0F0F0F
- stack 0: 0x40
886	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x4D0
887	 E1	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
888	 E3	ADD		 	 
- stack 0: 0x4D4
889	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
890	 E5	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x26D00000101F1000114FF0F01330007028403F00086F0100099FF0002C60000
891	 E6	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x26D00000101F1000114FF0F01330007028403F00086F0100099FF0002C60000
- stack 0: 0xF0
892	 E8	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x26D
893	 E9	JUMP		 	 
- stack 0: 0x4D4
894	 26D	JUMPDEST		 ;; __riscvimpl_OR_2_1_2	  ;; # instr: or sp,ra,sp(ignore imm)
- stack 0: 0x4D4
895	 26E	PUSH2	0040	 	 
- stack 1: 0x4D4
- stack 0: 0x40
896	 271	MLOAD		 	  ;; # read from x2
- stack 1: 0x4D4
- stack 0: 0xF0F0F0F
897	 272	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0xF0F0F0F
- stack 0: 0x20
898	 275	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D4
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
899	 276	OR		 	  ;; # OR
- stack 1: 0x4D4
- stack 0: 0xFF0FFF0F
900	 277	PUSH2	0040	 	 
- stack 2: 0x4D4
- stack 1: 0xFF0FFF0F
- stack 0: 0x40
901	 27A	MSTORE		 	  ;; # store to x2
- stack 0: 0x4D4
902	 27B	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
903	 27D	ADD		 	 
- stack 0: 0x4D8
904	 27E	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
905	 27F	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x101F1000114FF0F01330007028403F00086F0100099FF0002C6000002DDF010
906	 280	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x101F1000114FF0F01330007028403F00086F0100099FF0002C6000002DDF010
- stack 0: 0xF0
907	 282	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x101
908	 283	JUMP		 	 
- stack 0: 0x4D8
909	 101	JUMPDEST		 ;; __riscvimpl_LUI_ff100eb7	  ;; # instr: lui t4,0xff100(ignore imm)
- stack 0: 0x4D8
910	 102	PUSH4	ff100000	 	 
- stack 1: 0x4D8
- stack 0: 0xFF100000
911	 107	PUSH2	03A0	 	 
- stack 2: 0x4D8
- stack 1: 0xFF100000
- stack 0: 0x3A0
912	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D8
913	 10B	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
914	 10D	ADD		 	 
- stack 0: 0x4DC
915	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
916	 10F	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x114FF0F01330007028403F00086F0100099FF0002C6000002DDF0100114FF00
917	 110	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x114FF0F01330007028403F00086F0100099FF0002C6000002DDF0100114FF00
- stack 0: 0xF0
918	 112	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x114
919	 113	JUMP		 	 
- stack 0: 0x4DC
920	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x4DC
921	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
922	 116	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x114FF0F01330007028403F00086F0100099FF0002C6000002DDF0100114FF00
923	 117	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0x114FF0F01330007028403F00086F0100099FF0002C6000002DDF0100114FF00
- stack 0: 0xE0
924	 119	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x114FF0F
925	 11A	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x114FF0F
- stack 0: 0xFFFF
926	 11D	AND		 	 
- stack 1: 0x4DC
- stack 0: 0xFF0F
927	 11E	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0xFF0F
- stack 0: 0x1
928	 120	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
929	 121	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x3A0
930	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x4DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xFF100000
931	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x4DC
- stack 0: 0xFF0FFF0F
932	 126	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
933	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x4DC
934	 12A	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
935	 12C	ADD		 	 
- stack 0: 0x4E0
936	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
937	 12E	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x1330007028403F00086F0100099FF0002C6000002DDF0100114FF0001330008
938	 12F	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x1330007028403F00086F0100099FF0002C6000002DDF0100114FF0001330008
- stack 0: 0xF0
939	 131	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x133
940	 132	JUMP		 	 
- stack 0: 0x4E0
941	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E0
942	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
943	 135	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x1330007028403F00086F0100099FF0002C6000002DDF0100114FF0001330008
944	 136	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0x1330007028403F00086F0100099FF0002C6000002DDF0100114FF0001330008
- stack 0: 0xE0
945	 138	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x1330007
946	 139	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x1330007
- stack 0: 0xFFFF
947	 13C	AND		 	 
- stack 1: 0x4E0
- stack 0: 0x7
948	 13D	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0x7
- stack 0: 0x1
949	 13F	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0x7
950	 140	PUSH2	0380	 	 
- stack 2: 0x4E0
- stack 1: 0x7
- stack 0: 0x380
951	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E0
952	 144	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
953	 146	ADD		 	 
- stack 0: 0x4E4
954	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
955	 148	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x28403F00086F0100099FF0002C6000002DDF0100114FF0001330008022B03D4
956	 149	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x28403F00086F0100099FF0002C6000002DDF0100114FF0001330008022B03D4
- stack 0: 0xF0
957	 14B	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x284
958	 14C	JUMP		 	 
- stack 0: 0x4E4
959	 284	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,3f0(ignore imm)
- stack 0: 0x4E4
960	 285	PUSH2	0040	 	 
- stack 1: 0x4E4
- stack 0: 0x40
961	 288	MLOAD		 	  ;; # read from x2
- stack 1: 0x4E4
- stack 0: 0xFF0FFF0F
962	 289	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E4
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
963	 28E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E4
- stack 0: 0xFF0FFF0F
964	 28F	PUSH2	03A0	 	 
- stack 2: 0x4E4
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
965	 292	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E4
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
966	 293	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E4
- stack 2: 0xFF0FFF0F
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
967	 298	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E4
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
968	 299	SUB		 	 
- stack 1: 0x4E4
- stack 0: 0x0
969	 29A	PUSH2	02A2	 ;; _neq_49464a3df4ba3beb4e2c23ba455731f8d662be70f0a269a8d04de21672ac6913	 
- stack 2: 0x4E4
- stack 1: 0x0
- stack 0: 0x2A2
970	 29D	JUMPI		 	 
- stack 0: 0x4E4
971	 29E	PUSH2	02BC	 ;; _neq_after_49464a3df4ba3beb4e2c23ba455731f8d662be70f0a269a8d04de21672ac6913	 
- stack 1: 0x4E4
- stack 0: 0x2BC
972	 2A1	JUMP		 	 
- stack 0: 0x4E4
973	 2BC	JUMPDEST		 ;; _neq_after_49464a3df4ba3beb4e2c23ba455731f8d662be70f0a269a8d04de21672ac6913	 
- stack 0: 0x4E4
974	 2BD	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
975	 2BF	ADD		 	 
- stack 0: 0x4E8
976	 2C0	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
977	 2C1	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x86F0100099FF0002C6000002DDF0100114FF0001330008022B03D402F00000
978	 2C2	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x86F0100099FF0002C6000002DDF0100114FF0001330008022B03D402F00000
- stack 0: 0xF0
979	 2C4	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x86
980	 2C5	JUMP		 	 
- stack 0: 0x4E8
981	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x4E8
982	 87	PUSH4	ff010000	 	 
- stack 1: 0x4E8
- stack 0: 0xFF010000
983	 8C	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0xFF010000
- stack 0: 0x20
984	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E8
985	 90	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
986	 92	ADD		 	 
- stack 0: 0x4EC
987	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
988	 94	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x99FF0002C6000002DDF0100114FF0001330008022B03D402F000000086F010
989	 95	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x99FF0002C6000002DDF0100114FF0001330008022B03D402F000000086F010
- stack 0: 0xF0
990	 97	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x99
991	 98	JUMP		 	 
- stack 0: 0x4EC
992	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4EC
993	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
994	 9B	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x99FF0002C6000002DDF0100114FF0001330008022B03D402F000000086F010
995	 9C	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0x99FF0002C6000002DDF0100114FF0001330008022B03D402F000000086F010
- stack 0: 0xE0
996	 9E	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x99FF00
997	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x99FF00
- stack 0: 0xFFFF
998	 A2	AND		 	 
- stack 1: 0x4EC
- stack 0: 0xFF00
999	 A3	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xFF00
- stack 0: 0x1
1000	 A5	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1001	 A6	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
1002	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
1003	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4EC
- stack 0: 0xFF00FF00
1004	 AB	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0xFF00FF00
- stack 0: 0x20
1005	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4EC
1006	 AF	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1007	 B1	ADD		 	 
- stack 0: 0x4F0
1008	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1009	 B3	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x2C6000002DDF0100114FF0001330008022B03D402F000000086F0100099FF00
1010	 B4	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x2C6000002DDF0100114FF0001330008022B03D402F000000086F0100099FF00
- stack 0: 0xF0
1011	 B6	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x2C6
1012	 B7	JUMP		 	 
- stack 0: 0x4F0
1013	 2C6	JUMPDEST		 ;; __riscvimpl_OR_1_1_1	  ;; # instr: or ra,ra,ra(ignore imm)
- stack 0: 0x4F0
1014	 2C7	PUSH2	0020	 	 
- stack 1: 0x4F0
- stack 0: 0x20
1015	 2CA	MLOAD		 	  ;; # read from x1
- stack 1: 0x4F0
- stack 0: 0xFF00FF00
1016	 2CB	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0xFF00FF00
- stack 0: 0x20
1017	 2CE	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F0
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
1018	 2CF	OR		 	  ;; # OR
- stack 1: 0x4F0
- stack 0: 0xFF00FF00
1019	 2D0	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0xFF00FF00
- stack 0: 0x20
1020	 2D3	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F0
1021	 2D4	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1022	 2D6	ADD		 	 
- stack 0: 0x4F4
1023	 2D7	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1024	 2D8	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x2DDF0100114FF0001330008022B03D402F000000086F0100099FF0000B8F0F1
1025	 2D9	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x2DDF0100114FF0001330008022B03D402F000000086F0100099FF0000B8F0F1
- stack 0: 0xF0
1026	 2DB	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x2DD
1027	 2DC	JUMP		 	 
- stack 0: 0x4F4
1028	 2DD	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x4F4
1029	 2DE	PUSH4	ff010000	 	 
- stack 1: 0x4F4
- stack 0: 0xFF010000
1030	 2E3	PUSH2	03A0	 	 
- stack 2: 0x4F4
- stack 1: 0xFF010000
- stack 0: 0x3A0
1031	 2E6	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F4
1032	 2E7	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1033	 2E9	ADD		 	 
- stack 0: 0x4F8
1034	 2EA	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1035	 2EB	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x114FF0001330008022B03D402F000000086F0100099FF0000B8F0F100CBFF0F
1036	 2EC	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x114FF0001330008022B03D402F000000086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xF0
1037	 2EE	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x114
1038	 2EF	JUMP		 	 
- stack 0: 0x4F8
1039	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x4F8
1040	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1041	 116	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x114FF0001330008022B03D402F000000086F0100099FF0000B8F0F100CBFF0F
1042	 117	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x114FF0001330008022B03D402F000000086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xE0
1043	 119	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x114FF00
1044	 11A	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x114FF00
- stack 0: 0xFFFF
1045	 11D	AND		 	 
- stack 1: 0x4F8
- stack 0: 0xFF00
1046	 11E	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0xFF00
- stack 0: 0x1
1047	 120	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1048	 121	PUSH2	03A0	 	 
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
1049	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
1050	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x4F8
- stack 0: 0xFF00FF00
1051	 126	PUSH2	03A0	 	 
- stack 2: 0x4F8
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
1052	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F8
1053	 12A	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1054	 12C	ADD		 	 
- stack 0: 0x4FC
1055	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1056	 12E	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1330008022B03D402F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
1057	 12F	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x1330008022B03D402F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
1058	 131	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x133
1059	 132	JUMP		 	 
- stack 0: 0x4FC
1060	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4FC
1061	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1062	 135	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1330008022B03D402F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
1063	 136	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x1330008022B03D402F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
1064	 138	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1330008
1065	 139	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x1330008
- stack 0: 0xFFFF
1066	 13C	AND		 	 
- stack 1: 0x4FC
- stack 0: 0x8
1067	 13D	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0x8
- stack 0: 0x1
1068	 13F	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0x8
1069	 140	PUSH2	0380	 	 
- stack 2: 0x4FC
- stack 1: 0x8
- stack 0: 0x380
1070	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x4FC
1071	 144	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1072	 146	ADD		 	 
- stack 0: 0x500
1073	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1074	 148	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x22B03D402F000000086F0100099FF0000B8F0F100CBFF0F00EA0000030A0000
1075	 149	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x22B03D402F000000086F0100099FF0000B8F0F100CBFF0F00EA0000030A0000
- stack 0: 0xF0
1076	 14B	SHR		 	 
- stack 1: 0x500
- stack 0: 0x22B
1077	 14C	JUMP		 	 
- stack 0: 0x500
1078	 22B	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,414(ignore imm)
- stack 0: 0x500
1079	 22C	PUSH2	0020	 	 
- stack 1: 0x500
- stack 0: 0x20
1080	 22F	MLOAD		 	  ;; # read from x1
- stack 1: 0x500
- stack 0: 0xFF00FF00
1081	 230	PUSH4	FFFFFFFF	 	 
- stack 2: 0x500
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
1082	 235	AND		 	  ;; # mask to 32 bits
- stack 1: 0x500
- stack 0: 0xFF00FF00
1083	 236	PUSH2	03A0	 	 
- stack 2: 0x500
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
1084	 239	MLOAD		 	  ;; # read from x29
- stack 2: 0x500
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
1085	 23A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x500
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
1086	 23F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x500
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
1087	 240	SUB		 	 
- stack 1: 0x500
- stack 0: 0x0
1088	 241	PUSH2	0249	 ;; _neq_107d6c10076d93d581b34cfc1b309ed2e16ff318fee66d51dd7ef509b8b844f5	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x249
1089	 244	JUMPI		 	 
- stack 0: 0x500
1090	 245	PUSH2	0263	 ;; _neq_after_107d6c10076d93d581b34cfc1b309ed2e16ff318fee66d51dd7ef509b8b844f5	 
- stack 1: 0x500
- stack 0: 0x263
1091	 248	JUMP		 	 
- stack 0: 0x500
1092	 263	JUMPDEST		 ;; _neq_after_107d6c10076d93d581b34cfc1b309ed2e16ff318fee66d51dd7ef509b8b844f5	 
- stack 0: 0x500
1093	 264	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1094	 266	ADD		 	 
- stack 0: 0x504
1095	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1096	 268	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA0000030A000003290001
1097	 269	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA0000030A000003290001
- stack 0: 0xF0
1098	 26B	SHR		 	 
- stack 1: 0x504
- stack 0: 0x2F0
1099	 26C	JUMP		 	 
- stack 0: 0x504
1100	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x504
1101	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1102	 2F2	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA0000030A000003290001
1103	 2F3	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA0000030A000003290001
- stack 0: 0xE0
1104	 2F5	SHR		 	 
- stack 1: 0x504
- stack 0: 0x2F00000
1105	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x2F00000
- stack 0: 0xFFFF
1106	 2F9	AND		 	 
- stack 1: 0x504
- stack 0: 0x0
1107	 2FA	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x1
1108	 2FC	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0x0
1109	 2FD	PUSH2	0080	 	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x80
1110	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x504
1111	 301	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1112	 303	ADD		 	 
- stack 0: 0x508
1113	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1114	 305	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F00EA0000030A00000329000103480002
1115	 306	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F00EA0000030A00000329000103480002
- stack 0: 0xF0
1116	 308	SHR		 	 
- stack 1: 0x508
- stack 0: 0x86
1117	 309	JUMP		 	 
- stack 0: 0x508
1118	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x508
1119	 87	PUSH4	ff010000	 	 
- stack 1: 0x508
- stack 0: 0xFF010000
1120	 8C	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xFF010000
- stack 0: 0x20
1121	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x508
1122	 90	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1123	 92	ADD		 	 
- stack 0: 0x50C
1124	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1125	 94	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
1126	 95	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
- stack 0: 0xF0
1127	 97	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x99
1128	 98	JUMP		 	 
- stack 0: 0x50C
1129	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x50C
1130	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1131	 9B	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
1132	 9C	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
- stack 0: 0xE0
1133	 9E	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x99FF00
1134	 9F	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0x99FF00
- stack 0: 0xFFFF
1135	 A2	AND		 	 
- stack 1: 0x50C
- stack 0: 0xFF00
1136	 A3	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xFF00
- stack 0: 0x1
1137	 A5	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1138	 A6	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
1139	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
1140	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x50C
- stack 0: 0xFF00FF00
1141	 AB	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0xFF00FF00
- stack 0: 0x20
1142	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x50C
1143	 AF	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1144	 B1	ADD		 	 
- stack 0: 0x510
1145	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1146	 B3	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xB8F0F100CBFF0F00EA0000030A000003290001034800020362FFE00101F100
1147	 B4	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xB8F0F100CBFF0F00EA0000030A000003290001034800020362FFE00101F100
- stack 0: 0xF0
1148	 B6	SHR		 	 
- stack 1: 0x510
- stack 0: 0xB8
1149	 B7	JUMP		 	 
- stack 0: 0x510
1150	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x510
1151	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x510
- stack 0: 0xF0F1000
1152	 BE	PUSH2	0040	 	 
- stack 2: 0x510
- stack 1: 0xF0F1000
- stack 0: 0x40
1153	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x510
1154	 C2	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1155	 C4	ADD		 	 
- stack 0: 0x514
1156	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1157	 C6	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F1000114FF0F
1158	 C7	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F1000114FF0F
- stack 0: 0xF0
1159	 C9	SHR		 	 
- stack 1: 0x514
- stack 0: 0xCB
1160	 CA	JUMP		 	 
- stack 0: 0x514
1161	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x514
1162	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1163	 CD	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F1000114FF0F
1164	 CE	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F1000114FF0F
- stack 0: 0xE0
1165	 D0	SHR		 	 
- stack 1: 0x514
- stack 0: 0xCBFF0F
1166	 D1	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
1167	 D4	AND		 	 
- stack 1: 0x514
- stack 0: 0xFF0F
1168	 D5	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0xFF0F
- stack 0: 0x1
1169	 D7	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
1170	 D8	PUSH2	0040	 	 
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
1171	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
1172	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x514
- stack 0: 0xF0F0F0F
1173	 DD	PUSH2	0040	 	 
- stack 2: 0x514
- stack 1: 0xF0F0F0F
- stack 0: 0x40
1174	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x514
1175	 E1	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1176	 E3	ADD		 	 
- stack 0: 0x518
1177	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1178	 E5	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xEA0000030A000003290001034800020362FFE00101F1000114FF0F01330009
1179	 E6	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0xEA0000030A000003290001034800020362FFE00101F1000114FF0F01330009
- stack 0: 0xF0
1180	 E8	SHR		 	 
- stack 1: 0x518
- stack 0: 0xEA
1181	 E9	JUMP		 	 
- stack 0: 0x518
1182	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x518
1183	 EB	PUSH2	0040	 	 
- stack 1: 0x518
- stack 0: 0x40
1184	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x518
- stack 0: 0xF0F0F0F
1185	 EF	PUSH2	0020	 	 
- stack 2: 0x518
- stack 1: 0xF0F0F0F
- stack 0: 0x20
1186	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x518
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
1187	 F3	OR		 	  ;; # OR
- stack 1: 0x518
- stack 0: 0xFF0FFF0F
1188	 F4	PUSH2	0060	 	 
- stack 2: 0x518
- stack 1: 0xFF0FFF0F
- stack 0: 0x60
1189	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x518
1190	 F8	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1191	 FA	ADD		 	 
- stack 0: 0x51C
1192	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1193	 FC	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x30A000003290001034800020362FFE00101F1000114FF0F0133000903A4039C
1194	 FD	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x30A000003290001034800020362FFE00101F1000114FF0F0133000903A4039C
- stack 0: 0xF0
1195	 FF	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x30A
1196	 100	JUMP		 	 
- stack 0: 0x51C
1197	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x51C
1198	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1199	 30C	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x30A000003290001034800020362FFE00101F1000114FF0F0133000903A4039C
1200	 30D	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x30A000003290001034800020362FFE00101F1000114FF0F0133000903A4039C
- stack 0: 0xE0
1201	 30F	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x30A0000
1202	 310	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x30A0000
- stack 0: 0xFFFF
1203	 313	AND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1204	 314	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x1
1205	 316	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1206	 317	PUSH2	0060	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x60
1207	 31A	MLOAD		 	  ;; # read from x3
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0xFF0FFF0F
1208	 31B	ADD		 	  ;; # ADDI 3
- stack 1: 0x51C
- stack 0: 0xFF0FFF0F
1209	 31C	PUSH2	00C0	 	 
- stack 2: 0x51C
- stack 1: 0xFF0FFF0F
- stack 0: 0xC0
1210	 31F	MSTORE		 	  ;; # store to x6
- stack 0: 0x51C
1211	 320	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1212	 322	ADD		 	 
- stack 0: 0x520
1213	 323	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1214	 324	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x3290001034800020362FFE00101F1000114FF0F0133000903A4039C02F00000
1215	 325	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x3290001034800020362FFE00101F1000114FF0F0133000903A4039C02F00000
- stack 0: 0xF0
1216	 327	SHR		 	 
- stack 1: 0x520
- stack 0: 0x329
1217	 328	JUMP		 	 
- stack 0: 0x520
1218	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x520
1219	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1220	 32B	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x3290001034800020362FFE00101F1000114FF0F0133000903A4039C02F00000
1221	 32C	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x3290001034800020362FFE00101F1000114FF0F0133000903A4039C02F00000
- stack 0: 0xE0
1222	 32E	SHR		 	 
- stack 1: 0x520
- stack 0: 0x3290001
1223	 32F	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x3290001
- stack 0: 0xFFFF
1224	 332	AND		 	 
- stack 1: 0x520
- stack 0: 0x1
1225	 333	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x1
1226	 335	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x1
1227	 336	PUSH2	0080	 	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x80
1228	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x0
1229	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x520
- stack 0: 0x1
1230	 33B	PUSH2	0080	 	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x80
1231	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x520
1232	 33F	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1233	 341	ADD		 	 
- stack 0: 0x524
1234	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1235	 343	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x34800020362FFE00101F1000114FF0F0133000903A4039C02F00000018FFF01
1236	 344	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x34800020362FFE00101F1000114FF0F0133000903A4039C02F00000018FFF01
- stack 0: 0xF0
1237	 346	SHR		 	 
- stack 1: 0x524
- stack 0: 0x348
1238	 347	JUMP		 	 
- stack 0: 0x524
1239	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x524
1240	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1241	 34A	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x34800020362FFE00101F1000114FF0F0133000903A4039C02F00000018FFF01
1242	 34B	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x34800020362FFE00101F1000114FF0F0133000903A4039C02F00000018FFF01
- stack 0: 0xE0
1243	 34D	SHR		 	 
- stack 1: 0x524
- stack 0: 0x3480002
1244	 34E	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x3480002
- stack 0: 0xFFFF
1245	 351	AND		 	 
- stack 1: 0x524
- stack 0: 0x2
1246	 352	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0x1
1247	 354	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0x2
1248	 355	PUSH2	00A0	 	 
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0xA0
1249	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x524
1250	 359	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1251	 35B	ADD		 	 
- stack 0: 0x528
1252	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1253	 35D	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x362FFE00101F1000114FF0F0133000903A4039C02F00000018FFF010099FFF0
1254	 35E	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x362FFE00101F1000114FF0F0133000903A4039C02F00000018FFF010099FFF0
- stack 0: 0xF0
1255	 360	SHR		 	 
- stack 1: 0x528
- stack 0: 0x362
1256	 361	JUMP		 	 
- stack 0: 0x528
1257	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x528
1258	 363	PUSH2	0080	 	 
- stack 1: 0x528
- stack 0: 0x80
1259	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x528
- stack 0: 0x1
1260	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1261	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x528
- stack 0: 0x1
1262	 36D	PUSH2	00A0	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0xA0
1263	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x2
1264	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x528
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1265	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x2
1266	 377	SUB		 	 
- stack 1: 0x528
- stack 0: 0x1
1267	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x380
1268	 37B	JUMPI		 	 
- stack 0: 0x528
1269	 380	JUMPDEST		 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x528
1270	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1271	 382	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x362FFE00101F1000114FF0F0133000903A4039C02F00000018FFF010099FFF0
1272	 383	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x362FFE00101F1000114FF0F0133000903A4039C02F00000018FFF010099FFF0
- stack 0: 0xE0
1273	 385	SHR		 	 
- stack 1: 0x528
- stack 0: 0x362FFE0
1274	 386	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x362FFE0
- stack 0: 0xFFFF
1275	 389	AND		 	 
- stack 1: 0x528
- stack 0: 0xFFE0
1276	 38A	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0xFFE0
- stack 0: 0x1
1277	 38C	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1278	 38D	ADD		 	 
- stack 0: 0x508
1279	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x508
- stack 0: 0xFFFFFFFF
1280	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x508
1281	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1282	 395	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F00EA0000030A00000329000103480002
1283	 396	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F00EA0000030A00000329000103480002
- stack 0: 0xF0
1284	 398	SHR		 	 
- stack 1: 0x508
- stack 0: 0x86
1285	 399	JUMP		 	 
- stack 0: 0x508
1286	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x508
1287	 87	PUSH4	ff010000	 	 
- stack 1: 0x508
- stack 0: 0xFF010000
1288	 8C	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xFF010000
- stack 0: 0x20
1289	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x508
1290	 90	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1291	 92	ADD		 	 
- stack 0: 0x50C
1292	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1293	 94	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
1294	 95	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
- stack 0: 0xF0
1295	 97	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x99
1296	 98	JUMP		 	 
- stack 0: 0x50C
1297	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x50C
1298	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1299	 9B	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
1300	 9C	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA0000030A000003290001034800020362FFE0
- stack 0: 0xE0
1301	 9E	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x99FF00
1302	 9F	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0x99FF00
- stack 0: 0xFFFF
1303	 A2	AND		 	 
- stack 1: 0x50C
- stack 0: 0xFF00
1304	 A3	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xFF00
- stack 0: 0x1
1305	 A5	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1306	 A6	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
1307	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
1308	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x50C
- stack 0: 0xFF00FF00
1309	 AB	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0xFF00FF00
- stack 0: 0x20
1310	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x50C
1311	 AF	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1312	 B1	ADD		 	 
- stack 0: 0x510
1313	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1314	 B3	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xB8F0F100CBFF0F00EA0000030A000003290001034800020362FFE00101F100
1315	 B4	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xB8F0F100CBFF0F00EA0000030A000003290001034800020362FFE00101F100
- stack 0: 0xF0
1316	 B6	SHR		 	 
- stack 1: 0x510
- stack 0: 0xB8
1317	 B7	JUMP		 	 
- stack 0: 0x510
1318	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x510
1319	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x510
- stack 0: 0xF0F1000
1320	 BE	PUSH2	0040	 	 
- stack 2: 0x510
- stack 1: 0xF0F1000
- stack 0: 0x40
1321	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x510
1322	 C2	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1323	 C4	ADD		 	 
- stack 0: 0x514
1324	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1325	 C6	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F1000114FF0F
1326	 C7	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F1000114FF0F
- stack 0: 0xF0
1327	 C9	SHR		 	 
- stack 1: 0x514
- stack 0: 0xCB
1328	 CA	JUMP		 	 
- stack 0: 0x514
1329	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x514
1330	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1331	 CD	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F1000114FF0F
1332	 CE	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0xCBFF0F00EA0000030A000003290001034800020362FFE00101F1000114FF0F
- stack 0: 0xE0
1333	 D0	SHR		 	 
- stack 1: 0x514
- stack 0: 0xCBFF0F
1334	 D1	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
1335	 D4	AND		 	 
- stack 1: 0x514
- stack 0: 0xFF0F
1336	 D5	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0xFF0F
- stack 0: 0x1
1337	 D7	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
1338	 D8	PUSH2	0040	 	 
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
1339	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x514
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
1340	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x514
- stack 0: 0xF0F0F0F
1341	 DD	PUSH2	0040	 	 
- stack 2: 0x514
- stack 1: 0xF0F0F0F
- stack 0: 0x40
1342	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x514
1343	 E1	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1344	 E3	ADD		 	 
- stack 0: 0x518
1345	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1346	 E5	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xEA0000030A000003290001034800020362FFE00101F1000114FF0F01330009
1347	 E6	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0xEA0000030A000003290001034800020362FFE00101F1000114FF0F01330009
- stack 0: 0xF0
1348	 E8	SHR		 	 
- stack 1: 0x518
- stack 0: 0xEA
1349	 E9	JUMP		 	 
- stack 0: 0x518
1350	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x518
1351	 EB	PUSH2	0040	 	 
- stack 1: 0x518
- stack 0: 0x40
1352	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x518
- stack 0: 0xF0F0F0F
1353	 EF	PUSH2	0020	 	 
- stack 2: 0x518
- stack 1: 0xF0F0F0F
- stack 0: 0x20
1354	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x518
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
1355	 F3	OR		 	  ;; # OR
- stack 1: 0x518
- stack 0: 0xFF0FFF0F
1356	 F4	PUSH2	0060	 	 
- stack 2: 0x518
- stack 1: 0xFF0FFF0F
- stack 0: 0x60
1357	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x518
1358	 F8	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1359	 FA	ADD		 	 
- stack 0: 0x51C
1360	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1361	 FC	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x30A000003290001034800020362FFE00101F1000114FF0F0133000903A4039C
1362	 FD	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x30A000003290001034800020362FFE00101F1000114FF0F0133000903A4039C
- stack 0: 0xF0
1363	 FF	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x30A
1364	 100	JUMP		 	 
- stack 0: 0x51C
1365	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x51C
1366	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1367	 30C	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x30A000003290001034800020362FFE00101F1000114FF0F0133000903A4039C
1368	 30D	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x30A000003290001034800020362FFE00101F1000114FF0F0133000903A4039C
- stack 0: 0xE0
1369	 30F	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x30A0000
1370	 310	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x30A0000
- stack 0: 0xFFFF
1371	 313	AND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1372	 314	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x1
1373	 316	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1374	 317	PUSH2	0060	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x60
1375	 31A	MLOAD		 	  ;; # read from x3
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0xFF0FFF0F
1376	 31B	ADD		 	  ;; # ADDI 3
- stack 1: 0x51C
- stack 0: 0xFF0FFF0F
1377	 31C	PUSH2	00C0	 	 
- stack 2: 0x51C
- stack 1: 0xFF0FFF0F
- stack 0: 0xC0
1378	 31F	MSTORE		 	  ;; # store to x6
- stack 0: 0x51C
1379	 320	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1380	 322	ADD		 	 
- stack 0: 0x520
1381	 323	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1382	 324	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x3290001034800020362FFE00101F1000114FF0F0133000903A4039C02F00000
1383	 325	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x3290001034800020362FFE00101F1000114FF0F0133000903A4039C02F00000
- stack 0: 0xF0
1384	 327	SHR		 	 
- stack 1: 0x520
- stack 0: 0x329
1385	 328	JUMP		 	 
- stack 0: 0x520
1386	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x520
1387	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1388	 32B	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x3290001034800020362FFE00101F1000114FF0F0133000903A4039C02F00000
1389	 32C	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x3290001034800020362FFE00101F1000114FF0F0133000903A4039C02F00000
- stack 0: 0xE0
1390	 32E	SHR		 	 
- stack 1: 0x520
- stack 0: 0x3290001
1391	 32F	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x3290001
- stack 0: 0xFFFF
1392	 332	AND		 	 
- stack 1: 0x520
- stack 0: 0x1
1393	 333	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x1
1394	 335	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x1
1395	 336	PUSH2	0080	 	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x80
1396	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x1
1397	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x520
- stack 0: 0x2
1398	 33B	PUSH2	0080	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0x80
1399	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x520
1400	 33F	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1401	 341	ADD		 	 
- stack 0: 0x524
1402	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1403	 343	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x34800020362FFE00101F1000114FF0F0133000903A4039C02F00000018FFF01
1404	 344	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x34800020362FFE00101F1000114FF0F0133000903A4039C02F00000018FFF01
- stack 0: 0xF0
1405	 346	SHR		 	 
- stack 1: 0x524
- stack 0: 0x348
1406	 347	JUMP		 	 
- stack 0: 0x524
1407	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x524
1408	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1409	 34A	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x34800020362FFE00101F1000114FF0F0133000903A4039C02F00000018FFF01
1410	 34B	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x34800020362FFE00101F1000114FF0F0133000903A4039C02F00000018FFF01
- stack 0: 0xE0
1411	 34D	SHR		 	 
- stack 1: 0x524
- stack 0: 0x3480002
1412	 34E	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x3480002
- stack 0: 0xFFFF
1413	 351	AND		 	 
- stack 1: 0x524
- stack 0: 0x2
1414	 352	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0x1
1415	 354	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0x2
1416	 355	PUSH2	00A0	 	 
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0xA0
1417	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x524
1418	 359	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1419	 35B	ADD		 	 
- stack 0: 0x528
1420	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1421	 35D	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x362FFE00101F1000114FF0F0133000903A4039C02F00000018FFF010099FFF0
1422	 35E	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x362FFE00101F1000114FF0F0133000903A4039C02F00000018FFF010099FFF0
- stack 0: 0xF0
1423	 360	SHR		 	 
- stack 1: 0x528
- stack 0: 0x362
1424	 361	JUMP		 	 
- stack 0: 0x528
1425	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x528
1426	 363	PUSH2	0080	 	 
- stack 1: 0x528
- stack 0: 0x80
1427	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x528
- stack 0: 0x2
1428	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x528
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1429	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x528
- stack 0: 0x2
1430	 36D	PUSH2	00A0	 	 
- stack 2: 0x528
- stack 1: 0x2
- stack 0: 0xA0
1431	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x528
- stack 1: 0x2
- stack 0: 0x2
1432	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x528
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1433	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x528
- stack 1: 0x2
- stack 0: 0x2
1434	 377	SUB		 	 
- stack 1: 0x528
- stack 0: 0x0
1435	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x528
- stack 1: 0x0
- stack 0: 0x380
1436	 37B	JUMPI		 	 
- stack 0: 0x528
1437	 37C	PUSH2	039A	 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 1: 0x528
- stack 0: 0x39A
1438	 37F	JUMP		 	 
- stack 0: 0x528
1439	 39A	JUMPDEST		 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x528
1440	 39B	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1441	 39D	ADD		 	 
- stack 0: 0x52C
1442	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1443	 39F	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x101F1000114FF0F0133000903A4039C02F00000018FFF010099FFF001A20F0F
1444	 3A0	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x101F1000114FF0F0133000903A4039C02F00000018FFF010099FFF001A20F0F
- stack 0: 0xF0
1445	 3A2	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x101
1446	 3A3	JUMP		 	 
- stack 0: 0x52C
1447	 101	JUMPDEST		 ;; __riscvimpl_LUI_ff100eb7	  ;; # instr: lui t4,0xff100(ignore imm)
- stack 0: 0x52C
1448	 102	PUSH4	ff100000	 	 
- stack 1: 0x52C
- stack 0: 0xFF100000
1449	 107	PUSH2	03A0	 	 
- stack 2: 0x52C
- stack 1: 0xFF100000
- stack 0: 0x3A0
1450	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x52C
1451	 10B	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1452	 10D	ADD		 	 
- stack 0: 0x530
1453	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1454	 10F	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x114FF0F0133000903A4039C02F00000018FFF010099FFF001A20F0F00CB00F0
1455	 110	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x114FF0F0133000903A4039C02F00000018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xF0
1456	 112	SHR		 	 
- stack 1: 0x530
- stack 0: 0x114
1457	 113	JUMP		 	 
- stack 0: 0x530
1458	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x530
1459	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1460	 116	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x114FF0F0133000903A4039C02F00000018FFF010099FFF001A20F0F00CB00F0
1461	 117	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x114FF0F0133000903A4039C02F00000018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xE0
1462	 119	SHR		 	 
- stack 1: 0x530
- stack 0: 0x114FF0F
1463	 11A	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x114FF0F
- stack 0: 0xFFFF
1464	 11D	AND		 	 
- stack 1: 0x530
- stack 0: 0xFF0F
1465	 11E	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0xFF0F
- stack 0: 0x1
1466	 120	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
1467	 121	PUSH2	03A0	 	 
- stack 2: 0x530
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x3A0
1468	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x530
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xFF100000
1469	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x530
- stack 0: 0xFF0FFF0F
1470	 126	PUSH2	03A0	 	 
- stack 2: 0x530
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
1471	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x530
1472	 12A	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1473	 12C	ADD		 	 
- stack 0: 0x534
1474	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1475	 12E	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x133000903A4039C02F00000018FFF010099FFF001A20F0F00CB00F000EA0000
1476	 12F	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x133000903A4039C02F00000018FFF010099FFF001A20F0F00CB00F000EA0000
- stack 0: 0xF0
1477	 131	SHR		 	 
- stack 1: 0x534
- stack 0: 0x133
1478	 132	JUMP		 	 
- stack 0: 0x534
1479	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x534
1480	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1481	 135	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x133000903A4039C02F00000018FFF010099FFF001A20F0F00CB00F000EA0000
1482	 136	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x133000903A4039C02F00000018FFF010099FFF001A20F0F00CB00F000EA0000
- stack 0: 0xE0
1483	 138	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1330009
1484	 139	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x1330009
- stack 0: 0xFFFF
1485	 13C	AND		 	 
- stack 1: 0x534
- stack 0: 0x9
1486	 13D	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0x9
- stack 0: 0x1
1487	 13F	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0x9
1488	 140	PUSH2	0380	 	 
- stack 2: 0x534
- stack 1: 0x9
- stack 0: 0x380
1489	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x534
1490	 144	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1491	 146	ADD		 	 
- stack 0: 0x538
1492	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1493	 148	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x3A4039C02F00000018FFF010099FFF001A20F0F00CB00F000EA000003E60000
1494	 149	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x3A4039C02F00000018FFF010099FFF001A20F0F00CB00F000EA000003E60000
- stack 0: 0xF0
1495	 14B	SHR		 	 
- stack 1: 0x538
- stack 0: 0x3A4
1496	 14C	JUMP		 	 
- stack 0: 0x538
1497	 3A4	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,39c(ignore imm)
- stack 0: 0x538
1498	 3A5	PUSH2	00C0	 	 
- stack 1: 0x538
- stack 0: 0xC0
1499	 3A8	MLOAD		 	  ;; # read from x6
- stack 1: 0x538
- stack 0: 0xFF0FFF0F
1500	 3A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x538
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
1501	 3AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x538
- stack 0: 0xFF0FFF0F
1502	 3AF	PUSH2	03A0	 	 
- stack 2: 0x538
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
1503	 3B2	MLOAD		 	  ;; # read from x29
- stack 2: 0x538
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
1504	 3B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x538
- stack 2: 0xFF0FFF0F
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
1505	 3B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x538
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
1506	 3B9	SUB		 	 
- stack 1: 0x538
- stack 0: 0x0
1507	 3BA	PUSH2	03C2	 ;; _neq_e7bcbab782399fd020fb6d6d57ad7b0bff2931251059c6afbfcf08ac5b394ef7	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x3C2
1508	 3BD	JUMPI		 	 
- stack 0: 0x538
1509	 3BE	PUSH2	03DC	 ;; _neq_after_e7bcbab782399fd020fb6d6d57ad7b0bff2931251059c6afbfcf08ac5b394ef7	 
- stack 1: 0x538
- stack 0: 0x3DC
1510	 3C1	JUMP		 	 
- stack 0: 0x538
1511	 3DC	JUMPDEST		 ;; _neq_after_e7bcbab782399fd020fb6d6d57ad7b0bff2931251059c6afbfcf08ac5b394ef7	 
- stack 0: 0x538
1512	 3DD	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1513	 3DF	ADD		 	 
- stack 0: 0x53C
1514	 3E0	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1515	 3E1	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x2F00000018FFF010099FFF001A20F0F00CB00F000EA000003E60000030A0000
1516	 3E2	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x2F00000018FFF010099FFF001A20F0F00CB00F000EA000003E60000030A0000
- stack 0: 0xF0
1517	 3E4	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x2F0
1518	 3E5	JUMP		 	 
- stack 0: 0x53C
1519	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x53C
1520	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1521	 2F2	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x2F00000018FFF010099FFF001A20F0F00CB00F000EA000003E60000030A0000
1522	 2F3	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0x2F00000018FFF010099FFF001A20F0F00CB00F000EA000003E60000030A0000
- stack 0: 0xE0
1523	 2F5	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x2F00000
1524	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0x2F00000
- stack 0: 0xFFFF
1525	 2F9	AND		 	 
- stack 1: 0x53C
- stack 0: 0x0
1526	 2FA	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0x1
1527	 2FC	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0x0
1528	 2FD	PUSH2	0080	 	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0x80
1529	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x53C
1530	 301	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1531	 303	ADD		 	 
- stack 0: 0x540
1532	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1533	 305	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F000EA000003E60000030A000003290001
1534	 306	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F000EA000003E60000030A000003290001
- stack 0: 0xF0
1535	 308	SHR		 	 
- stack 1: 0x540
- stack 0: 0x18F
1536	 309	JUMP		 	 
- stack 0: 0x540
1537	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x540
1538	 190	PUSH4	0ff01000	 	 
- stack 1: 0x540
- stack 0: 0xFF01000
1539	 195	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xFF01000
- stack 0: 0x20
1540	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
1541	 199	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1542	 19B	ADD		 	 
- stack 0: 0x544
1543	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1544	 19D	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
1545	 19E	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
- stack 0: 0xF0
1546	 1A0	SHR		 	 
- stack 1: 0x544
- stack 0: 0x99
1547	 1A1	JUMP		 	 
- stack 0: 0x544
1548	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x544
1549	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1550	 9B	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
1551	 9C	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
- stack 0: 0xE0
1552	 9E	SHR		 	 
- stack 1: 0x544
- stack 0: 0x99FFF0
1553	 9F	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
1554	 A2	AND		 	 
- stack 1: 0x544
- stack 0: 0xFFF0
1555	 A3	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0xFFF0
- stack 0: 0x1
1556	 A5	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1557	 A6	PUSH2	0020	 	 
- stack 2: 0x544
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
1558	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x544
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
1559	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x544
- stack 0: 0xFF00FF0
1560	 AB	PUSH2	0020	 	 
- stack 2: 0x544
- stack 1: 0xFF00FF0
- stack 0: 0x20
1561	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x544
1562	 AF	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1563	 B1	ADD		 	 
- stack 0: 0x548
1564	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1565	 B3	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x1A20F0F00CB00F000EA000003E60000030A000003290001034800020362FFDC
1566	 B4	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x1A20F0F00CB00F000EA000003E60000030A000003290001034800020362FFDC
- stack 0: 0xF0
1567	 B6	SHR		 	 
- stack 1: 0x548
- stack 0: 0x1A2
1568	 B7	JUMP		 	 
- stack 0: 0x548
1569	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x548
1570	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x548
- stack 0: 0xF0F0F000
1571	 1A8	PUSH2	0040	 	 
- stack 2: 0x548
- stack 1: 0xF0F0F000
- stack 0: 0x40
1572	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x548
1573	 1AC	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1574	 1AE	ADD		 	 
- stack 0: 0x54C
1575	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1576	 1B0	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B5FF10
1577	 1B1	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B5FF10
- stack 0: 0xF0
1578	 1B3	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xCB
1579	 1B4	JUMP		 	 
- stack 0: 0x54C
1580	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x54C
1581	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1582	 CD	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B5FF10
1583	 CE	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B5FF10
- stack 0: 0xE0
1584	 D0	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xCB00F0
1585	 D1	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
1586	 D4	AND		 	 
- stack 1: 0x54C
- stack 0: 0xF0
1587	 D5	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0xF0
- stack 0: 0x1
1588	 D7	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0xF0
1589	 D8	PUSH2	0040	 	 
- stack 2: 0x54C
- stack 1: 0xF0
- stack 0: 0x40
1590	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x54C
- stack 1: 0xF0
- stack 0: 0xF0F0F000
1591	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x54C
- stack 0: 0xF0F0F0F0
1592	 DD	PUSH2	0040	 	 
- stack 2: 0x54C
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
1593	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x54C
1594	 E1	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1595	 E3	ADD		 	 
- stack 0: 0x550
1596	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1597	 E5	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xEA000003E60000030A000003290001034800020362FFDC01B5FF100114FFF0
1598	 E6	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0xEA000003E60000030A000003290001034800020362FFDC01B5FF100114FFF0
- stack 0: 0xF0
1599	 E8	SHR		 	 
- stack 1: 0x550
- stack 0: 0xEA
1600	 E9	JUMP		 	 
- stack 0: 0x550
1601	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x550
1602	 EB	PUSH2	0040	 	 
- stack 1: 0x550
- stack 0: 0x40
1603	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x550
- stack 0: 0xF0F0F0F0
1604	 EF	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
1605	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x550
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
1606	 F3	OR		 	  ;; # OR
- stack 1: 0x550
- stack 0: 0xFFF0FFF0
1607	 F4	PUSH2	0060	 	 
- stack 2: 0x550
- stack 1: 0xFFF0FFF0
- stack 0: 0x60
1608	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x550
1609	 F8	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1610	 FA	ADD		 	 
- stack 0: 0x554
1611	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1612	 FC	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x3E60000030A000003290001034800020362FFDC01B5FF100114FFF00133000A
1613	 FD	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x3E60000030A000003290001034800020362FFDC01B5FF100114FFF00133000A
- stack 0: 0xF0
1614	 FF	SHR		 	 
- stack 1: 0x554
- stack 0: 0x3E6
1615	 100	JUMP		 	 
- stack 0: 0x554
1616	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x554
1617	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1618	 3E8	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x3E60000030A000003290001034800020362FFDC01B5FF100114FFF00133000A
1619	 3E9	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x3E60000030A000003290001034800020362FFDC01B5FF100114FFF00133000A
- stack 0: 0xE0
1620	 3EB	SHR		 	 
- stack 1: 0x554
- stack 0: 0x3E60000
1621	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x3E60000
- stack 0: 0xFFFF
1622	 3EF	AND		 	 
- stack 1: 0x554
- stack 0: 0x0
1623	 3F0	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1
1624	 3F2	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x0
1625	 3F3	POP		 	 
- stack 0: 0x554
1626	 3F4	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1627	 3F6	ADD		 	 
- stack 0: 0x558
1628	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1629	 3F8	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x30A000003290001034800020362FFDC01B5FF100114FFF00133000A03A40360
1630	 3F9	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x30A000003290001034800020362FFDC01B5FF100114FFF00133000A03A40360
- stack 0: 0xF0
1631	 3FB	SHR		 	 
- stack 1: 0x558
- stack 0: 0x30A
1632	 3FC	JUMP		 	 
- stack 0: 0x558
1633	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x558
1634	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1635	 30C	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x30A000003290001034800020362FFDC01B5FF100114FFF00133000A03A40360
1636	 30D	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x30A000003290001034800020362FFDC01B5FF100114FFF00133000A03A40360
- stack 0: 0xE0
1637	 30F	SHR		 	 
- stack 1: 0x558
- stack 0: 0x30A0000
1638	 310	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x30A0000
- stack 0: 0xFFFF
1639	 313	AND		 	 
- stack 1: 0x558
- stack 0: 0x0
1640	 314	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x1
1641	 316	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x0
1642	 317	PUSH2	0060	 	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x60
1643	 31A	MLOAD		 	  ;; # read from x3
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0xFFF0FFF0
1644	 31B	ADD		 	  ;; # ADDI 3
- stack 1: 0x558
- stack 0: 0xFFF0FFF0
1645	 31C	PUSH2	00C0	 	 
- stack 2: 0x558
- stack 1: 0xFFF0FFF0
- stack 0: 0xC0
1646	 31F	MSTORE		 	  ;; # store to x6
- stack 0: 0x558
1647	 320	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1648	 322	ADD		 	 
- stack 0: 0x55C
1649	 323	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1650	 324	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x3290001034800020362FFDC01B5FF100114FFF00133000A03A4036002F00000
1651	 325	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x3290001034800020362FFDC01B5FF100114FFF00133000A03A4036002F00000
- stack 0: 0xF0
1652	 327	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x329
1653	 328	JUMP		 	 
- stack 0: 0x55C
1654	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x55C
1655	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1656	 32B	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x3290001034800020362FFDC01B5FF100114FFF00133000A03A4036002F00000
1657	 32C	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x3290001034800020362FFDC01B5FF100114FFF00133000A03A4036002F00000
- stack 0: 0xE0
1658	 32E	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x3290001
1659	 32F	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x3290001
- stack 0: 0xFFFF
1660	 332	AND		 	 
- stack 1: 0x55C
- stack 0: 0x1
1661	 333	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x1
1662	 335	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x1
1663	 336	PUSH2	0080	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x80
1664	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x0
1665	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x55C
- stack 0: 0x1
1666	 33B	PUSH2	0080	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x80
1667	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x55C
1668	 33F	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1669	 341	ADD		 	 
- stack 0: 0x560
1670	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1671	 343	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x34800020362FFDC01B5FF100114FFF00133000A03A4036002F0000001C80FF0
1672	 344	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x34800020362FFDC01B5FF100114FFF00133000A03A4036002F0000001C80FF0
- stack 0: 0xF0
1673	 346	SHR		 	 
- stack 1: 0x560
- stack 0: 0x348
1674	 347	JUMP		 	 
- stack 0: 0x560
1675	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x560
1676	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1677	 34A	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x34800020362FFDC01B5FF100114FFF00133000A03A4036002F0000001C80FF0
1678	 34B	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x34800020362FFDC01B5FF100114FFF00133000A03A4036002F0000001C80FF0
- stack 0: 0xE0
1679	 34D	SHR		 	 
- stack 1: 0x560
- stack 0: 0x3480002
1680	 34E	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x3480002
- stack 0: 0xFFFF
1681	 351	AND		 	 
- stack 1: 0x560
- stack 0: 0x2
1682	 352	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0x1
1683	 354	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x2
1684	 355	PUSH2	00A0	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0xA0
1685	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x560
1686	 359	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1687	 35B	ADD		 	 
- stack 0: 0x564
1688	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1689	 35D	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x362FFDC01B5FF100114FFF00133000A03A4036002F0000001C80FF0009900FF
1690	 35E	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x362FFDC01B5FF100114FFF00133000A03A4036002F0000001C80FF0009900FF
- stack 0: 0xF0
1691	 360	SHR		 	 
- stack 1: 0x564
- stack 0: 0x362
1692	 361	JUMP		 	 
- stack 0: 0x564
1693	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x564
1694	 363	PUSH2	0080	 	 
- stack 1: 0x564
- stack 0: 0x80
1695	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x564
- stack 0: 0x1
1696	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1697	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x564
- stack 0: 0x1
1698	 36D	PUSH2	00A0	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0xA0
1699	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x2
1700	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x564
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1701	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x2
1702	 377	SUB		 	 
- stack 1: 0x564
- stack 0: 0x1
1703	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x380
1704	 37B	JUMPI		 	 
- stack 0: 0x564
1705	 380	JUMPDEST		 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x564
1706	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
1707	 382	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x362FFDC01B5FF100114FFF00133000A03A4036002F0000001C80FF0009900FF
1708	 383	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x362FFDC01B5FF100114FFF00133000A03A4036002F0000001C80FF0009900FF
- stack 0: 0xE0
1709	 385	SHR		 	 
- stack 1: 0x564
- stack 0: 0x362FFDC
1710	 386	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x362FFDC
- stack 0: 0xFFFF
1711	 389	AND		 	 
- stack 1: 0x564
- stack 0: 0xFFDC
1712	 38A	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0xFFDC
- stack 0: 0x1
1713	 38C	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
1714	 38D	ADD		 	 
- stack 0: 0x540
1715	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x540
- stack 0: 0xFFFFFFFF
1716	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x540
1717	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1718	 395	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F000EA000003E60000030A000003290001
1719	 396	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F000EA000003E60000030A000003290001
- stack 0: 0xF0
1720	 398	SHR		 	 
- stack 1: 0x540
- stack 0: 0x18F
1721	 399	JUMP		 	 
- stack 0: 0x540
1722	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x540
1723	 190	PUSH4	0ff01000	 	 
- stack 1: 0x540
- stack 0: 0xFF01000
1724	 195	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xFF01000
- stack 0: 0x20
1725	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
1726	 199	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1727	 19B	ADD		 	 
- stack 0: 0x544
1728	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1729	 19D	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
1730	 19E	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
- stack 0: 0xF0
1731	 1A0	SHR		 	 
- stack 1: 0x544
- stack 0: 0x99
1732	 1A1	JUMP		 	 
- stack 0: 0x544
1733	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x544
1734	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1735	 9B	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
1736	 9C	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x99FFF001A20F0F00CB00F000EA000003E60000030A00000329000103480002
- stack 0: 0xE0
1737	 9E	SHR		 	 
- stack 1: 0x544
- stack 0: 0x99FFF0
1738	 9F	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
1739	 A2	AND		 	 
- stack 1: 0x544
- stack 0: 0xFFF0
1740	 A3	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0xFFF0
- stack 0: 0x1
1741	 A5	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1742	 A6	PUSH2	0020	 	 
- stack 2: 0x544
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
1743	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x544
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
1744	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x544
- stack 0: 0xFF00FF0
1745	 AB	PUSH2	0020	 	 
- stack 2: 0x544
- stack 1: 0xFF00FF0
- stack 0: 0x20
1746	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x544
1747	 AF	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1748	 B1	ADD		 	 
- stack 0: 0x548
1749	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1750	 B3	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x1A20F0F00CB00F000EA000003E60000030A000003290001034800020362FFDC
1751	 B4	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x1A20F0F00CB00F000EA000003E60000030A000003290001034800020362FFDC
- stack 0: 0xF0
1752	 B6	SHR		 	 
- stack 1: 0x548
- stack 0: 0x1A2
1753	 B7	JUMP		 	 
- stack 0: 0x548
1754	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x548
1755	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x548
- stack 0: 0xF0F0F000
1756	 1A8	PUSH2	0040	 	 
- stack 2: 0x548
- stack 1: 0xF0F0F000
- stack 0: 0x40
1757	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x548
1758	 1AC	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1759	 1AE	ADD		 	 
- stack 0: 0x54C
1760	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1761	 1B0	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B5FF10
1762	 1B1	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B5FF10
- stack 0: 0xF0
1763	 1B3	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xCB
1764	 1B4	JUMP		 	 
- stack 0: 0x54C
1765	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x54C
1766	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1767	 CD	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B5FF10
1768	 CE	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0xCB00F000EA000003E60000030A000003290001034800020362FFDC01B5FF10
- stack 0: 0xE0
1769	 D0	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xCB00F0
1770	 D1	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
1771	 D4	AND		 	 
- stack 1: 0x54C
- stack 0: 0xF0
1772	 D5	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0xF0
- stack 0: 0x1
1773	 D7	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0xF0
1774	 D8	PUSH2	0040	 	 
- stack 2: 0x54C
- stack 1: 0xF0
- stack 0: 0x40
1775	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x54C
- stack 1: 0xF0
- stack 0: 0xF0F0F000
1776	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x54C
- stack 0: 0xF0F0F0F0
1777	 DD	PUSH2	0040	 	 
- stack 2: 0x54C
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
1778	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x54C
1779	 E1	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1780	 E3	ADD		 	 
- stack 0: 0x550
1781	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1782	 E5	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xEA000003E60000030A000003290001034800020362FFDC01B5FF100114FFF0
1783	 E6	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0xEA000003E60000030A000003290001034800020362FFDC01B5FF100114FFF0
- stack 0: 0xF0
1784	 E8	SHR		 	 
- stack 1: 0x550
- stack 0: 0xEA
1785	 E9	JUMP		 	 
- stack 0: 0x550
1786	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x550
1787	 EB	PUSH2	0040	 	 
- stack 1: 0x550
- stack 0: 0x40
1788	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x550
- stack 0: 0xF0F0F0F0
1789	 EF	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
1790	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x550
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
1791	 F3	OR		 	  ;; # OR
- stack 1: 0x550
- stack 0: 0xFFF0FFF0
1792	 F4	PUSH2	0060	 	 
- stack 2: 0x550
- stack 1: 0xFFF0FFF0
- stack 0: 0x60
1793	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x550
1794	 F8	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1795	 FA	ADD		 	 
- stack 0: 0x554
1796	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1797	 FC	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x3E60000030A000003290001034800020362FFDC01B5FF100114FFF00133000A
1798	 FD	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x3E60000030A000003290001034800020362FFDC01B5FF100114FFF00133000A
- stack 0: 0xF0
1799	 FF	SHR		 	 
- stack 1: 0x554
- stack 0: 0x3E6
1800	 100	JUMP		 	 
- stack 0: 0x554
1801	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x554
1802	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1803	 3E8	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x3E60000030A000003290001034800020362FFDC01B5FF100114FFF00133000A
1804	 3E9	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x3E60000030A000003290001034800020362FFDC01B5FF100114FFF00133000A
- stack 0: 0xE0
1805	 3EB	SHR		 	 
- stack 1: 0x554
- stack 0: 0x3E60000
1806	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x3E60000
- stack 0: 0xFFFF
1807	 3EF	AND		 	 
- stack 1: 0x554
- stack 0: 0x0
1808	 3F0	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1
1809	 3F2	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x0
1810	 3F3	POP		 	 
- stack 0: 0x554
1811	 3F4	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1812	 3F6	ADD		 	 
- stack 0: 0x558
1813	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1814	 3F8	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x30A000003290001034800020362FFDC01B5FF100114FFF00133000A03A40360
1815	 3F9	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x30A000003290001034800020362FFDC01B5FF100114FFF00133000A03A40360
- stack 0: 0xF0
1816	 3FB	SHR		 	 
- stack 1: 0x558
- stack 0: 0x30A
1817	 3FC	JUMP		 	 
- stack 0: 0x558
1818	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x558
1819	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1820	 30C	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x30A000003290001034800020362FFDC01B5FF100114FFF00133000A03A40360
1821	 30D	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x30A000003290001034800020362FFDC01B5FF100114FFF00133000A03A40360
- stack 0: 0xE0
1822	 30F	SHR		 	 
- stack 1: 0x558
- stack 0: 0x30A0000
1823	 310	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x30A0000
- stack 0: 0xFFFF
1824	 313	AND		 	 
- stack 1: 0x558
- stack 0: 0x0
1825	 314	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x1
1826	 316	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x0
1827	 317	PUSH2	0060	 	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x60
1828	 31A	MLOAD		 	  ;; # read from x3
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0xFFF0FFF0
1829	 31B	ADD		 	  ;; # ADDI 3
- stack 1: 0x558
- stack 0: 0xFFF0FFF0
1830	 31C	PUSH2	00C0	 	 
- stack 2: 0x558
- stack 1: 0xFFF0FFF0
- stack 0: 0xC0
1831	 31F	MSTORE		 	  ;; # store to x6
- stack 0: 0x558
1832	 320	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1833	 322	ADD		 	 
- stack 0: 0x55C
1834	 323	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1835	 324	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x3290001034800020362FFDC01B5FF100114FFF00133000A03A4036002F00000
1836	 325	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x3290001034800020362FFDC01B5FF100114FFF00133000A03A4036002F00000
- stack 0: 0xF0
1837	 327	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x329
1838	 328	JUMP		 	 
- stack 0: 0x55C
1839	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x55C
1840	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1841	 32B	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x3290001034800020362FFDC01B5FF100114FFF00133000A03A4036002F00000
1842	 32C	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x3290001034800020362FFDC01B5FF100114FFF00133000A03A4036002F00000
- stack 0: 0xE0
1843	 32E	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x3290001
1844	 32F	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x3290001
- stack 0: 0xFFFF
1845	 332	AND		 	 
- stack 1: 0x55C
- stack 0: 0x1
1846	 333	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x1
1847	 335	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x1
1848	 336	PUSH2	0080	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x80
1849	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x1
1850	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x55C
- stack 0: 0x2
1851	 33B	PUSH2	0080	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0x80
1852	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x55C
1853	 33F	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1854	 341	ADD		 	 
- stack 0: 0x560
1855	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1856	 343	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x34800020362FFDC01B5FF100114FFF00133000A03A4036002F0000001C80FF0
1857	 344	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x34800020362FFDC01B5FF100114FFF00133000A03A4036002F0000001C80FF0
- stack 0: 0xF0
1858	 346	SHR		 	 
- stack 1: 0x560
- stack 0: 0x348
1859	 347	JUMP		 	 
- stack 0: 0x560
1860	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x560
1861	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1862	 34A	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x34800020362FFDC01B5FF100114FFF00133000A03A4036002F0000001C80FF0
1863	 34B	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x34800020362FFDC01B5FF100114FFF00133000A03A4036002F0000001C80FF0
- stack 0: 0xE0
1864	 34D	SHR		 	 
- stack 1: 0x560
- stack 0: 0x3480002
1865	 34E	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x3480002
- stack 0: 0xFFFF
1866	 351	AND		 	 
- stack 1: 0x560
- stack 0: 0x2
1867	 352	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0x1
1868	 354	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x2
1869	 355	PUSH2	00A0	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0xA0
1870	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x560
1871	 359	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1872	 35B	ADD		 	 
- stack 0: 0x564
1873	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1874	 35D	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x362FFDC01B5FF100114FFF00133000A03A4036002F0000001C80FF0009900FF
1875	 35E	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x362FFDC01B5FF100114FFF00133000A03A4036002F0000001C80FF0009900FF
- stack 0: 0xF0
1876	 360	SHR		 	 
- stack 1: 0x564
- stack 0: 0x362
1877	 361	JUMP		 	 
- stack 0: 0x564
1878	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x564
1879	 363	PUSH2	0080	 	 
- stack 1: 0x564
- stack 0: 0x80
1880	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x564
- stack 0: 0x2
1881	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x564
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1882	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x564
- stack 0: 0x2
1883	 36D	PUSH2	00A0	 	 
- stack 2: 0x564
- stack 1: 0x2
- stack 0: 0xA0
1884	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x564
- stack 1: 0x2
- stack 0: 0x2
1885	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x564
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1886	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x564
- stack 1: 0x2
- stack 0: 0x2
1887	 377	SUB		 	 
- stack 1: 0x564
- stack 0: 0x0
1888	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x380
1889	 37B	JUMPI		 	 
- stack 0: 0x564
1890	 37C	PUSH2	039A	 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 1: 0x564
- stack 0: 0x39A
1891	 37F	JUMP		 	 
- stack 0: 0x564
1892	 39A	JUMPDEST		 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x564
1893	 39B	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1894	 39D	ADD		 	 
- stack 0: 0x568
1895	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1896	 39F	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x1B5FF100114FFF00133000A03A4036002F0000001C80FF0009900FF00B8F0F1
1897	 3A0	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x1B5FF100114FFF00133000A03A4036002F0000001C80FF0009900FF00B8F0F1
- stack 0: 0xF0
1898	 3A2	SHR		 	 
- stack 1: 0x568
- stack 0: 0x1B5
1899	 3A3	JUMP		 	 
- stack 0: 0x568
1900	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_fff10eb7	  ;; # instr: lui t4,0xfff10(ignore imm)
- stack 0: 0x568
1901	 1B6	PUSH4	fff10000	 	 
- stack 1: 0x568
- stack 0: 0xFFF10000
1902	 1BB	PUSH2	03A0	 	 
- stack 2: 0x568
- stack 1: 0xFFF10000
- stack 0: 0x3A0
1903	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x568
1904	 1BF	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1905	 1C1	ADD		 	 
- stack 0: 0x56C
1906	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1907	 1C3	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x114FFF00133000A03A4036002F0000001C80FF0009900FF00B8F0F100CBFF0F
1908	 1C4	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x114FFF00133000A03A4036002F0000001C80FF0009900FF00B8F0F100CBFF0F
- stack 0: 0xF0
1909	 1C6	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x114
1910	 1C7	JUMP		 	 
- stack 0: 0x56C
1911	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x56C
1912	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
1913	 116	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x114FFF00133000A03A4036002F0000001C80FF0009900FF00B8F0F100CBFF0F
1914	 117	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x114FFF00133000A03A4036002F0000001C80FF0009900FF00B8F0F100CBFF0F
- stack 0: 0xE0
1915	 119	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x114FFF0
1916	 11A	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x114FFF0
- stack 0: 0xFFFF
1917	 11D	AND		 	 
- stack 1: 0x56C
- stack 0: 0xFFF0
1918	 11E	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0xFFF0
- stack 0: 0x1
1919	 120	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1920	 121	PUSH2	03A0	 	 
- stack 2: 0x56C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
1921	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x56C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFF10000
1922	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x56C
- stack 0: 0xFFF0FFF0
1923	 126	PUSH2	03A0	 	 
- stack 2: 0x56C
- stack 1: 0xFFF0FFF0
- stack 0: 0x3A0
1924	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x56C
1925	 12A	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1926	 12C	ADD		 	 
- stack 0: 0x570
1927	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1928	 12E	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x133000A03A4036002F0000001C80FF0009900FF00B8F0F100CBFF0F00EA0000
1929	 12F	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x133000A03A4036002F0000001C80FF0009900FF00B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
1930	 131	SHR		 	 
- stack 1: 0x570
- stack 0: 0x133
1931	 132	JUMP		 	 
- stack 0: 0x570
1932	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x570
1933	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
1934	 135	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x133000A03A4036002F0000001C80FF0009900FF00B8F0F100CBFF0F00EA0000
1935	 136	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x133000A03A4036002F0000001C80FF0009900FF00B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
1936	 138	SHR		 	 
- stack 1: 0x570
- stack 0: 0x133000A
1937	 139	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x133000A
- stack 0: 0xFFFF
1938	 13C	AND		 	 
- stack 1: 0x570
- stack 0: 0xA
1939	 13D	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0xA
- stack 0: 0x1
1940	 13F	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0xA
1941	 140	PUSH2	0380	 	 
- stack 2: 0x570
- stack 1: 0xA
- stack 0: 0x380
1942	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x570
1943	 144	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1944	 146	ADD		 	 
- stack 0: 0x574
1945	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1946	 148	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x3A4036002F0000001C80FF0009900FF00B8F0F100CBFF0F00EA000003E60000
1947	 149	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x3A4036002F0000001C80FF0009900FF00B8F0F100CBFF0F00EA000003E60000
- stack 0: 0xF0
1948	 14B	SHR		 	 
- stack 1: 0x574
- stack 0: 0x3A4
1949	 14C	JUMP		 	 
- stack 0: 0x574
1950	 3A4	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,39c(ignore imm)
- stack 0: 0x574
1951	 3A5	PUSH2	00C0	 	 
- stack 1: 0x574
- stack 0: 0xC0
1952	 3A8	MLOAD		 	  ;; # read from x6
- stack 1: 0x574
- stack 0: 0xFFF0FFF0
1953	 3A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x574
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFFFFFFF
1954	 3AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x574
- stack 0: 0xFFF0FFF0
1955	 3AF	PUSH2	03A0	 	 
- stack 2: 0x574
- stack 1: 0xFFF0FFF0
- stack 0: 0x3A0
1956	 3B2	MLOAD		 	  ;; # read from x29
- stack 2: 0x574
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFF0FFF0
1957	 3B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x574
- stack 2: 0xFFF0FFF0
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFFFFFFF
1958	 3B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x574
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFF0FFF0
1959	 3B9	SUB		 	 
- stack 1: 0x574
- stack 0: 0x0
1960	 3BA	PUSH2	03C2	 ;; _neq_e7bcbab782399fd020fb6d6d57ad7b0bff2931251059c6afbfcf08ac5b394ef7	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x3C2
1961	 3BD	JUMPI		 	 
- stack 0: 0x574
1962	 3BE	PUSH2	03DC	 ;; _neq_after_e7bcbab782399fd020fb6d6d57ad7b0bff2931251059c6afbfcf08ac5b394ef7	 
- stack 1: 0x574
- stack 0: 0x3DC
1963	 3C1	JUMP		 	 
- stack 0: 0x574
1964	 3DC	JUMPDEST		 ;; _neq_after_e7bcbab782399fd020fb6d6d57ad7b0bff2931251059c6afbfcf08ac5b394ef7	 
- stack 0: 0x574
1965	 3DD	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1966	 3DF	ADD		 	 
- stack 0: 0x578
1967	 3E0	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1968	 3E1	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000
1969	 3E2	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000
- stack 0: 0xF0
1970	 3E4	SHR		 	 
- stack 1: 0x578
- stack 0: 0x2F0
1971	 3E5	JUMP		 	 
- stack 0: 0x578
1972	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x578
1973	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
1974	 2F2	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000
1975	 2F3	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000
- stack 0: 0xE0
1976	 2F5	SHR		 	 
- stack 1: 0x578
- stack 0: 0x2F00000
1977	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x2F00000
- stack 0: 0xFFFF
1978	 2F9	AND		 	 
- stack 1: 0x578
- stack 0: 0x0
1979	 2FA	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x1
1980	 2FC	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x0
1981	 2FD	PUSH2	0080	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x80
1982	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x578
1983	 301	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1984	 303	ADD		 	 
- stack 0: 0x57C
1985	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1986	 305	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A0000
1987	 306	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A0000
- stack 0: 0xF0
1988	 308	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1C8
1989	 309	JUMP		 	 
- stack 0: 0x57C
1990	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x57C
1991	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x57C
- stack 0: 0xFF0000
1992	 1CE	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xFF0000
- stack 0: 0x20
1993	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x57C
1994	 1D2	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1995	 1D4	ADD		 	 
- stack 0: 0x580
1996	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1997	 1D6	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
1998	 1D7	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
- stack 0: 0xF0
1999	 1D9	SHR		 	 
- stack 1: 0x580
- stack 0: 0x99
2000	 1DA	JUMP		 	 
- stack 0: 0x580
2001	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x580
2002	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2003	 9B	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
2004	 9C	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
- stack 0: 0xE0
2005	 9E	SHR		 	 
- stack 1: 0x580
- stack 0: 0x9900FF
2006	 9F	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x9900FF
- stack 0: 0xFFFF
2007	 A2	AND		 	 
- stack 1: 0x580
- stack 0: 0xFF
2008	 A3	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0xFF
- stack 0: 0x1
2009	 A5	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xFF
2010	 A6	PUSH2	0020	 	 
- stack 2: 0x580
- stack 1: 0xFF
- stack 0: 0x20
2011	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x580
- stack 1: 0xFF
- stack 0: 0xFF0000
2012	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x580
- stack 0: 0xFF00FF
2013	 AB	PUSH2	0020	 	 
- stack 2: 0x580
- stack 1: 0xFF00FF
- stack 0: 0x20
2014	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x580
2015	 AF	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2016	 B1	ADD		 	 
- stack 0: 0x584
2017	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2018	 B3	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xB8F0F100CBFF0F00EA000003E6000003E60000030A00000329000103480002
2019	 B4	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xB8F0F100CBFF0F00EA000003E6000003E60000030A00000329000103480002
- stack 0: 0xF0
2020	 B6	SHR		 	 
- stack 1: 0x584
- stack 0: 0xB8
2021	 B7	JUMP		 	 
- stack 0: 0x584
2022	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x584
2023	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x584
- stack 0: 0xF0F1000
2024	 BE	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0xF0F1000
- stack 0: 0x40
2025	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x584
2026	 C2	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2027	 C4	ADD		 	 
- stack 0: 0x588
2028	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2029	 C6	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
2030	 C7	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
- stack 0: 0xF0
2031	 C9	SHR		 	 
- stack 1: 0x588
- stack 0: 0xCB
2032	 CA	JUMP		 	 
- stack 0: 0x588
2033	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x588
2034	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2035	 CD	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
2036	 CE	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
- stack 0: 0xE0
2037	 D0	SHR		 	 
- stack 1: 0x588
- stack 0: 0xCBFF0F
2038	 D1	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
2039	 D4	AND		 	 
- stack 1: 0x588
- stack 0: 0xFF0F
2040	 D5	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0xFF0F
- stack 0: 0x1
2041	 D7	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
2042	 D8	PUSH2	0040	 	 
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
2043	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
2044	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x588
- stack 0: 0xF0F0F0F
2045	 DD	PUSH2	0040	 	 
- stack 2: 0x588
- stack 1: 0xF0F0F0F
- stack 0: 0x40
2046	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x588
2047	 E1	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2048	 E3	ADD		 	 
- stack 0: 0x58C
2049	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2050	 E5	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xEA000003E6000003E60000030A000003290001034800020362FFD801DBFFF1
2051	 E6	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0xEA000003E6000003E60000030A000003290001034800020362FFD801DBFFF1
- stack 0: 0xF0
2052	 E8	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xEA
2053	 E9	JUMP		 	 
- stack 0: 0x58C
2054	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x58C
2055	 EB	PUSH2	0040	 	 
- stack 1: 0x58C
- stack 0: 0x40
2056	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x58C
- stack 0: 0xF0F0F0F
2057	 EF	PUSH2	0020	 	 
- stack 2: 0x58C
- stack 1: 0xF0F0F0F
- stack 0: 0x20
2058	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x58C
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
2059	 F3	OR		 	  ;; # OR
- stack 1: 0x58C
- stack 0: 0xFFF0FFF
2060	 F4	PUSH2	0060	 	 
- stack 2: 0x58C
- stack 1: 0xFFF0FFF
- stack 0: 0x60
2061	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x58C
2062	 F8	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2063	 FA	ADD		 	 
- stack 0: 0x590
2064	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2065	 FC	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x3E6000003E60000030A000003290001034800020362FFD801DBFFF10114FFFF
2066	 FD	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x3E6000003E60000030A000003290001034800020362FFD801DBFFF10114FFFF
- stack 0: 0xF0
2067	 FF	SHR		 	 
- stack 1: 0x590
- stack 0: 0x3E6
2068	 100	JUMP		 	 
- stack 0: 0x590
2069	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x590
2070	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2071	 3E8	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x3E6000003E60000030A000003290001034800020362FFD801DBFFF10114FFFF
2072	 3E9	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x3E6000003E60000030A000003290001034800020362FFD801DBFFF10114FFFF
- stack 0: 0xE0
2073	 3EB	SHR		 	 
- stack 1: 0x590
- stack 0: 0x3E60000
2074	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x3E60000
- stack 0: 0xFFFF
2075	 3EF	AND		 	 
- stack 1: 0x590
- stack 0: 0x0
2076	 3F0	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x1
2077	 3F2	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x0
2078	 3F3	POP		 	 
- stack 0: 0x590
2079	 3F4	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2080	 3F6	ADD		 	 
- stack 0: 0x594
2081	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2082	 3F8	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x3E60000030A000003290001034800020362FFD801DBFFF10114FFFF0133000B
2083	 3F9	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x3E60000030A000003290001034800020362FFD801DBFFF10114FFFF0133000B
- stack 0: 0xF0
2084	 3FB	SHR		 	 
- stack 1: 0x594
- stack 0: 0x3E6
2085	 3FC	JUMP		 	 
- stack 0: 0x594
2086	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x594
2087	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2088	 3E8	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x3E60000030A000003290001034800020362FFD801DBFFF10114FFFF0133000B
2089	 3E9	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x3E60000030A000003290001034800020362FFD801DBFFF10114FFFF0133000B
- stack 0: 0xE0
2090	 3EB	SHR		 	 
- stack 1: 0x594
- stack 0: 0x3E60000
2091	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x3E60000
- stack 0: 0xFFFF
2092	 3EF	AND		 	 
- stack 1: 0x594
- stack 0: 0x0
2093	 3F0	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2094	 3F2	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x0
2095	 3F3	POP		 	 
- stack 0: 0x594
2096	 3F4	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2097	 3F6	ADD		 	 
- stack 0: 0x598
2098	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2099	 3F8	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x30A000003290001034800020362FFD801DBFFF10114FFFF0133000B03A40320
2100	 3F9	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x30A000003290001034800020362FFD801DBFFF10114FFFF0133000B03A40320
- stack 0: 0xF0
2101	 3FB	SHR		 	 
- stack 1: 0x598
- stack 0: 0x30A
2102	 3FC	JUMP		 	 
- stack 0: 0x598
2103	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x598
2104	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2105	 30C	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x30A000003290001034800020362FFD801DBFFF10114FFFF0133000B03A40320
2106	 30D	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x30A000003290001034800020362FFD801DBFFF10114FFFF0133000B03A40320
- stack 0: 0xE0
2107	 30F	SHR		 	 
- stack 1: 0x598
- stack 0: 0x30A0000
2108	 310	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x30A0000
- stack 0: 0xFFFF
2109	 313	AND		 	 
- stack 1: 0x598
- stack 0: 0x0
2110	 314	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x1
2111	 316	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x0
2112	 317	PUSH2	0060	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x60
2113	 31A	MLOAD		 	  ;; # read from x3
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0xFFF0FFF
2114	 31B	ADD		 	  ;; # ADDI 3
- stack 1: 0x598
- stack 0: 0xFFF0FFF
2115	 31C	PUSH2	00C0	 	 
- stack 2: 0x598
- stack 1: 0xFFF0FFF
- stack 0: 0xC0
2116	 31F	MSTORE		 	  ;; # store to x6
- stack 0: 0x598
2117	 320	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2118	 322	ADD		 	 
- stack 0: 0x59C
2119	 323	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2120	 324	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x3290001034800020362FFD801DBFFF10114FFFF0133000B03A4032002F00000
2121	 325	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x3290001034800020362FFD801DBFFF10114FFFF0133000B03A4032002F00000
- stack 0: 0xF0
2122	 327	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x329
2123	 328	JUMP		 	 
- stack 0: 0x59C
2124	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x59C
2125	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2126	 32B	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x3290001034800020362FFD801DBFFF10114FFFF0133000B03A4032002F00000
2127	 32C	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x3290001034800020362FFD801DBFFF10114FFFF0133000B03A4032002F00000
- stack 0: 0xE0
2128	 32E	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x3290001
2129	 32F	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x3290001
- stack 0: 0xFFFF
2130	 332	AND		 	 
- stack 1: 0x59C
- stack 0: 0x1
2131	 333	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0x1
2132	 335	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x1
2133	 336	PUSH2	0080	 	 
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0x80
2134	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0x0
2135	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x59C
- stack 0: 0x1
2136	 33B	PUSH2	0080	 	 
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0x80
2137	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x59C
2138	 33F	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2139	 341	ADD		 	 
- stack 0: 0x5A0
2140	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2141	 343	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x34800020362FFD801DBFFF10114FFFF0133000B03A4032002F000000086F010
2142	 344	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x34800020362FFD801DBFFF10114FFFF0133000B03A4032002F000000086F010
- stack 0: 0xF0
2143	 346	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x348
2144	 347	JUMP		 	 
- stack 0: 0x5A0
2145	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5A0
2146	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2147	 34A	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x34800020362FFD801DBFFF10114FFFF0133000B03A4032002F000000086F010
2148	 34B	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x34800020362FFD801DBFFF10114FFFF0133000B03A4032002F000000086F010
- stack 0: 0xE0
2149	 34D	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x3480002
2150	 34E	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x3480002
- stack 0: 0xFFFF
2151	 351	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x2
2152	 352	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0x1
2153	 354	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x2
2154	 355	PUSH2	00A0	 	 
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0xA0
2155	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x5A0
2156	 359	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2157	 35B	ADD		 	 
- stack 0: 0x5A4
2158	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2159	 35D	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x362FFD801DBFFF10114FFFF0133000B03A4032002F000000086F0100099FF00
2160	 35E	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x362FFD801DBFFF10114FFFF0133000B03A4032002F000000086F0100099FF00
- stack 0: 0xF0
2161	 360	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x362
2162	 361	JUMP		 	 
- stack 0: 0x5A4
2163	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5A4
2164	 363	PUSH2	0080	 	 
- stack 1: 0x5A4
- stack 0: 0x80
2165	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x5A4
- stack 0: 0x1
2166	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2167	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A4
- stack 0: 0x1
2168	 36D	PUSH2	00A0	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0xA0
2169	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x2
2170	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2171	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x2
2172	 377	SUB		 	 
- stack 1: 0x5A4
- stack 0: 0x1
2173	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x380
2174	 37B	JUMPI		 	 
- stack 0: 0x5A4
2175	 380	JUMPDEST		 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x5A4
2176	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2177	 382	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x362FFD801DBFFF10114FFFF0133000B03A4032002F000000086F0100099FF00
2178	 383	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x362FFD801DBFFF10114FFFF0133000B03A4032002F000000086F0100099FF00
- stack 0: 0xE0
2179	 385	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x362FFD8
2180	 386	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x362FFD8
- stack 0: 0xFFFF
2181	 389	AND		 	 
- stack 1: 0x5A4
- stack 0: 0xFFD8
2182	 38A	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0xFFD8
- stack 0: 0x1
2183	 38C	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
2184	 38D	ADD		 	 
- stack 0: 0x57C
2185	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x57C
- stack 0: 0xFFFFFFFF
2186	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x57C
2187	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2188	 395	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A0000
2189	 396	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A0000
- stack 0: 0xF0
2190	 398	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1C8
2191	 399	JUMP		 	 
- stack 0: 0x57C
2192	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x57C
2193	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x57C
- stack 0: 0xFF0000
2194	 1CE	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xFF0000
- stack 0: 0x20
2195	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x57C
2196	 1D2	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2197	 1D4	ADD		 	 
- stack 0: 0x580
2198	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2199	 1D6	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
2200	 1D7	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
- stack 0: 0xF0
2201	 1D9	SHR		 	 
- stack 1: 0x580
- stack 0: 0x99
2202	 1DA	JUMP		 	 
- stack 0: 0x580
2203	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x580
2204	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2205	 9B	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
2206	 9C	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000003E6000003E60000030A000003290001
- stack 0: 0xE0
2207	 9E	SHR		 	 
- stack 1: 0x580
- stack 0: 0x9900FF
2208	 9F	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x9900FF
- stack 0: 0xFFFF
2209	 A2	AND		 	 
- stack 1: 0x580
- stack 0: 0xFF
2210	 A3	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0xFF
- stack 0: 0x1
2211	 A5	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xFF
2212	 A6	PUSH2	0020	 	 
- stack 2: 0x580
- stack 1: 0xFF
- stack 0: 0x20
2213	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x580
- stack 1: 0xFF
- stack 0: 0xFF0000
2214	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x580
- stack 0: 0xFF00FF
2215	 AB	PUSH2	0020	 	 
- stack 2: 0x580
- stack 1: 0xFF00FF
- stack 0: 0x20
2216	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x580
2217	 AF	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2218	 B1	ADD		 	 
- stack 0: 0x584
2219	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2220	 B3	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xB8F0F100CBFF0F00EA000003E6000003E60000030A00000329000103480002
2221	 B4	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xB8F0F100CBFF0F00EA000003E6000003E60000030A00000329000103480002
- stack 0: 0xF0
2222	 B6	SHR		 	 
- stack 1: 0x584
- stack 0: 0xB8
2223	 B7	JUMP		 	 
- stack 0: 0x584
2224	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x584
2225	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x584
- stack 0: 0xF0F1000
2226	 BE	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0xF0F1000
- stack 0: 0x40
2227	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x584
2228	 C2	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2229	 C4	ADD		 	 
- stack 0: 0x588
2230	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2231	 C6	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
2232	 C7	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
- stack 0: 0xF0
2233	 C9	SHR		 	 
- stack 1: 0x588
- stack 0: 0xCB
2234	 CA	JUMP		 	 
- stack 0: 0x588
2235	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x588
2236	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2237	 CD	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
2238	 CE	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0xCBFF0F00EA000003E6000003E60000030A000003290001034800020362FFD8
- stack 0: 0xE0
2239	 D0	SHR		 	 
- stack 1: 0x588
- stack 0: 0xCBFF0F
2240	 D1	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
2241	 D4	AND		 	 
- stack 1: 0x588
- stack 0: 0xFF0F
2242	 D5	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0xFF0F
- stack 0: 0x1
2243	 D7	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
2244	 D8	PUSH2	0040	 	 
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
2245	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
2246	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x588
- stack 0: 0xF0F0F0F
2247	 DD	PUSH2	0040	 	 
- stack 2: 0x588
- stack 1: 0xF0F0F0F
- stack 0: 0x40
2248	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x588
2249	 E1	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2250	 E3	ADD		 	 
- stack 0: 0x58C
2251	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2252	 E5	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xEA000003E6000003E60000030A000003290001034800020362FFD801DBFFF1
2253	 E6	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0xEA000003E6000003E60000030A000003290001034800020362FFD801DBFFF1
- stack 0: 0xF0
2254	 E8	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xEA
2255	 E9	JUMP		 	 
- stack 0: 0x58C
2256	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x58C
2257	 EB	PUSH2	0040	 	 
- stack 1: 0x58C
- stack 0: 0x40
2258	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x58C
- stack 0: 0xF0F0F0F
2259	 EF	PUSH2	0020	 	 
- stack 2: 0x58C
- stack 1: 0xF0F0F0F
- stack 0: 0x20
2260	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x58C
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
2261	 F3	OR		 	  ;; # OR
- stack 1: 0x58C
- stack 0: 0xFFF0FFF
2262	 F4	PUSH2	0060	 	 
- stack 2: 0x58C
- stack 1: 0xFFF0FFF
- stack 0: 0x60
2263	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x58C
2264	 F8	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2265	 FA	ADD		 	 
- stack 0: 0x590
2266	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2267	 FC	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x3E6000003E60000030A000003290001034800020362FFD801DBFFF10114FFFF
2268	 FD	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x3E6000003E60000030A000003290001034800020362FFD801DBFFF10114FFFF
- stack 0: 0xF0
2269	 FF	SHR		 	 
- stack 1: 0x590
- stack 0: 0x3E6
2270	 100	JUMP		 	 
- stack 0: 0x590
2271	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x590
2272	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2273	 3E8	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x3E6000003E60000030A000003290001034800020362FFD801DBFFF10114FFFF
2274	 3E9	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x3E6000003E60000030A000003290001034800020362FFD801DBFFF10114FFFF
- stack 0: 0xE0
2275	 3EB	SHR		 	 
- stack 1: 0x590
- stack 0: 0x3E60000
2276	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x3E60000
- stack 0: 0xFFFF
2277	 3EF	AND		 	 
- stack 1: 0x590
- stack 0: 0x0
2278	 3F0	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x1
2279	 3F2	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x0
2280	 3F3	POP		 	 
- stack 0: 0x590
2281	 3F4	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2282	 3F6	ADD		 	 
- stack 0: 0x594
2283	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2284	 3F8	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x3E60000030A000003290001034800020362FFD801DBFFF10114FFFF0133000B
2285	 3F9	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x3E60000030A000003290001034800020362FFD801DBFFF10114FFFF0133000B
- stack 0: 0xF0
2286	 3FB	SHR		 	 
- stack 1: 0x594
- stack 0: 0x3E6
2287	 3FC	JUMP		 	 
- stack 0: 0x594
2288	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x594
2289	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2290	 3E8	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x3E60000030A000003290001034800020362FFD801DBFFF10114FFFF0133000B
2291	 3E9	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x3E60000030A000003290001034800020362FFD801DBFFF10114FFFF0133000B
- stack 0: 0xE0
2292	 3EB	SHR		 	 
- stack 1: 0x594
- stack 0: 0x3E60000
2293	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x3E60000
- stack 0: 0xFFFF
2294	 3EF	AND		 	 
- stack 1: 0x594
- stack 0: 0x0
2295	 3F0	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2296	 3F2	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x0
2297	 3F3	POP		 	 
- stack 0: 0x594
2298	 3F4	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2299	 3F6	ADD		 	 
- stack 0: 0x598
2300	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2301	 3F8	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x30A000003290001034800020362FFD801DBFFF10114FFFF0133000B03A40320
2302	 3F9	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x30A000003290001034800020362FFD801DBFFF10114FFFF0133000B03A40320
- stack 0: 0xF0
2303	 3FB	SHR		 	 
- stack 1: 0x598
- stack 0: 0x30A
2304	 3FC	JUMP		 	 
- stack 0: 0x598
2305	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x598
2306	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2307	 30C	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x30A000003290001034800020362FFD801DBFFF10114FFFF0133000B03A40320
2308	 30D	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x30A000003290001034800020362FFD801DBFFF10114FFFF0133000B03A40320
- stack 0: 0xE0
2309	 30F	SHR		 	 
- stack 1: 0x598
- stack 0: 0x30A0000
2310	 310	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x30A0000
- stack 0: 0xFFFF
2311	 313	AND		 	 
- stack 1: 0x598
- stack 0: 0x0
2312	 314	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x1
2313	 316	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x0
2314	 317	PUSH2	0060	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x60
2315	 31A	MLOAD		 	  ;; # read from x3
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0xFFF0FFF
2316	 31B	ADD		 	  ;; # ADDI 3
- stack 1: 0x598
- stack 0: 0xFFF0FFF
2317	 31C	PUSH2	00C0	 	 
- stack 2: 0x598
- stack 1: 0xFFF0FFF
- stack 0: 0xC0
2318	 31F	MSTORE		 	  ;; # store to x6
- stack 0: 0x598
2319	 320	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2320	 322	ADD		 	 
- stack 0: 0x59C
2321	 323	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2322	 324	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x3290001034800020362FFD801DBFFF10114FFFF0133000B03A4032002F00000
2323	 325	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x3290001034800020362FFD801DBFFF10114FFFF0133000B03A4032002F00000
- stack 0: 0xF0
2324	 327	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x329
2325	 328	JUMP		 	 
- stack 0: 0x59C
2326	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x59C
2327	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2328	 32B	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x3290001034800020362FFD801DBFFF10114FFFF0133000B03A4032002F00000
2329	 32C	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x3290001034800020362FFD801DBFFF10114FFFF0133000B03A4032002F00000
- stack 0: 0xE0
2330	 32E	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x3290001
2331	 32F	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x3290001
- stack 0: 0xFFFF
2332	 332	AND		 	 
- stack 1: 0x59C
- stack 0: 0x1
2333	 333	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0x1
2334	 335	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x1
2335	 336	PUSH2	0080	 	 
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0x80
2336	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0x1
2337	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x59C
- stack 0: 0x2
2338	 33B	PUSH2	0080	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0x80
2339	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x59C
2340	 33F	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2341	 341	ADD		 	 
- stack 0: 0x5A0
2342	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2343	 343	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x34800020362FFD801DBFFF10114FFFF0133000B03A4032002F000000086F010
2344	 344	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x34800020362FFD801DBFFF10114FFFF0133000B03A4032002F000000086F010
- stack 0: 0xF0
2345	 346	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x348
2346	 347	JUMP		 	 
- stack 0: 0x5A0
2347	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5A0
2348	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2349	 34A	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x34800020362FFD801DBFFF10114FFFF0133000B03A4032002F000000086F010
2350	 34B	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x34800020362FFD801DBFFF10114FFFF0133000B03A4032002F000000086F010
- stack 0: 0xE0
2351	 34D	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x3480002
2352	 34E	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x3480002
- stack 0: 0xFFFF
2353	 351	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x2
2354	 352	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0x1
2355	 354	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x2
2356	 355	PUSH2	00A0	 	 
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0xA0
2357	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x5A0
2358	 359	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2359	 35B	ADD		 	 
- stack 0: 0x5A4
2360	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2361	 35D	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x362FFD801DBFFF10114FFFF0133000B03A4032002F000000086F0100099FF00
2362	 35E	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x362FFD801DBFFF10114FFFF0133000B03A4032002F000000086F0100099FF00
- stack 0: 0xF0
2363	 360	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x362
2364	 361	JUMP		 	 
- stack 0: 0x5A4
2365	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5A4
2366	 363	PUSH2	0080	 	 
- stack 1: 0x5A4
- stack 0: 0x80
2367	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x5A4
- stack 0: 0x2
2368	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2369	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A4
- stack 0: 0x2
2370	 36D	PUSH2	00A0	 	 
- stack 2: 0x5A4
- stack 1: 0x2
- stack 0: 0xA0
2371	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x5A4
- stack 1: 0x2
- stack 0: 0x2
2372	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2373	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A4
- stack 1: 0x2
- stack 0: 0x2
2374	 377	SUB		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2375	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x380
2376	 37B	JUMPI		 	 
- stack 0: 0x5A4
2377	 37C	PUSH2	039A	 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 1: 0x5A4
- stack 0: 0x39A
2378	 37F	JUMP		 	 
- stack 0: 0x5A4
2379	 39A	JUMPDEST		 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x5A4
2380	 39B	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2381	 39D	ADD		 	 
- stack 0: 0x5A8
2382	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2383	 39F	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1DBFFF10114FFFF0133000B03A4032002F000000086F0100099FF0000B8F0F1
2384	 3A0	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x1DBFFF10114FFFF0133000B03A4032002F000000086F0100099FF0000B8F0F1
- stack 0: 0xF0
2385	 3A2	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1DB
2386	 3A3	JUMP		 	 
- stack 0: 0x5A8
2387	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_fff1eb7	  ;; # instr: lui t4,0xfff1(ignore imm)
- stack 0: 0x5A8
2388	 1DC	PUSH4	0fff1000	 	 
- stack 1: 0x5A8
- stack 0: 0xFFF1000
2389	 1E1	PUSH2	03A0	 	 
- stack 2: 0x5A8
- stack 1: 0xFFF1000
- stack 0: 0x3A0
2390	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x5A8
2391	 1E5	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2392	 1E7	ADD		 	 
- stack 0: 0x5AC
2393	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2394	 1E9	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x114FFFF0133000B03A4032002F000000086F0100099FF0000B8F0F100CBFF0F
2395	 1EA	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x114FFFF0133000B03A4032002F000000086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xF0
2396	 1EC	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x114
2397	 1ED	JUMP		 	 
- stack 0: 0x5AC
2398	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x5AC
2399	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2400	 116	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x114FFFF0133000B03A4032002F000000086F0100099FF0000B8F0F100CBFF0F
2401	 117	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x114FFFF0133000B03A4032002F000000086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xE0
2402	 119	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x114FFFF
2403	 11A	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x114FFFF
- stack 0: 0xFFFF
2404	 11D	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFF
2405	 11E	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFF
- stack 0: 0x1
2406	 120	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2407	 121	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
2408	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFF1000
2409	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x5AC
- stack 0: 0xFFF0FFF
2410	 126	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0xFFF0FFF
- stack 0: 0x3A0
2411	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x5AC
2412	 12A	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2413	 12C	ADD		 	 
- stack 0: 0x5B0
2414	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2415	 12E	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x133000B03A4032002F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
2416	 12F	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x133000B03A4032002F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
2417	 131	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x133
2418	 132	JUMP		 	 
- stack 0: 0x5B0
2419	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5B0
2420	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2421	 135	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x133000B03A4032002F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
2422	 136	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x133000B03A4032002F000000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
2423	 138	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x133000B
2424	 139	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x133000B
- stack 0: 0xFFFF
2425	 13C	AND		 	 
- stack 1: 0x5B0
- stack 0: 0xB
2426	 13D	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0xB
- stack 0: 0x1
2427	 13F	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0xB
2428	 140	PUSH2	0380	 	 
- stack 2: 0x5B0
- stack 1: 0xB
- stack 0: 0x380
2429	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x5B0
2430	 144	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2431	 146	ADD		 	 
- stack 0: 0x5B4
2432	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2433	 148	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x3A4032002F000000086F0100099FF0000B8F0F100CBFF0F00EA000003290001
2434	 149	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x3A4032002F000000086F0100099FF0000B8F0F100CBFF0F00EA000003290001
- stack 0: 0xF0
2435	 14B	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x3A4
2436	 14C	JUMP		 	 
- stack 0: 0x5B4
2437	 3A4	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,39c(ignore imm)
- stack 0: 0x5B4
2438	 3A5	PUSH2	00C0	 	 
- stack 1: 0x5B4
- stack 0: 0xC0
2439	 3A8	MLOAD		 	  ;; # read from x6
- stack 1: 0x5B4
- stack 0: 0xFFF0FFF
2440	 3A9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B4
- stack 1: 0xFFF0FFF
- stack 0: 0xFFFFFFFF
2441	 3AE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B4
- stack 0: 0xFFF0FFF
2442	 3AF	PUSH2	03A0	 	 
- stack 2: 0x5B4
- stack 1: 0xFFF0FFF
- stack 0: 0x3A0
2443	 3B2	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B4
- stack 1: 0xFFF0FFF
- stack 0: 0xFFF0FFF
2444	 3B3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B4
- stack 2: 0xFFF0FFF
- stack 1: 0xFFF0FFF
- stack 0: 0xFFFFFFFF
2445	 3B8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B4
- stack 1: 0xFFF0FFF
- stack 0: 0xFFF0FFF
2446	 3B9	SUB		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2447	 3BA	PUSH2	03C2	 ;; _neq_e7bcbab782399fd020fb6d6d57ad7b0bff2931251059c6afbfcf08ac5b394ef7	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x3C2
2448	 3BD	JUMPI		 	 
- stack 0: 0x5B4
2449	 3BE	PUSH2	03DC	 ;; _neq_after_e7bcbab782399fd020fb6d6d57ad7b0bff2931251059c6afbfcf08ac5b394ef7	 
- stack 1: 0x5B4
- stack 0: 0x3DC
2450	 3C1	JUMP		 	 
- stack 0: 0x5B4
2451	 3DC	JUMPDEST		 ;; _neq_after_e7bcbab782399fd020fb6d6d57ad7b0bff2931251059c6afbfcf08ac5b394ef7	 
- stack 0: 0x5B4
2452	 3DD	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2453	 3DF	ADD		 	 
- stack 0: 0x5B8
2454	 3E0	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2455	 3E1	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA00000329000103480002
2456	 3E2	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xF0
2457	 3E4	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x2F0
2458	 3E5	JUMP		 	 
- stack 0: 0x5B8
2459	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5B8
2460	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2461	 2F2	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA00000329000103480002
2462	 2F3	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x2F000000086F0100099FF0000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xE0
2463	 2F5	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x2F00000
2464	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x2F00000
- stack 0: 0xFFFF
2465	 2F9	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x0
2466	 2FA	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x0
- stack 0: 0x1
2467	 2FC	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x0
2468	 2FD	PUSH2	0080	 	 
- stack 2: 0x5B8
- stack 1: 0x0
- stack 0: 0x80
2469	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B8
2470	 301	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2471	 303	ADD		 	 
- stack 0: 0x5BC
2472	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2473	 305	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE4
2474	 306	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE4
- stack 0: 0xF0
2475	 308	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x86
2476	 309	JUMP		 	 
- stack 0: 0x5BC
2477	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x5BC
2478	 87	PUSH4	ff010000	 	 
- stack 1: 0x5BC
- stack 0: 0xFF010000
2479	 8C	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xFF010000
- stack 0: 0x20
2480	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x5BC
2481	 90	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2482	 92	ADD		 	 
- stack 0: 0x5C0
2483	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2484	 94	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F100
2485	 95	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F100
- stack 0: 0xF0
2486	 97	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x99
2487	 98	JUMP		 	 
- stack 0: 0x5C0
2488	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x5C0
2489	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2490	 9B	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F100
2491	 9C	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F100
- stack 0: 0xE0
2492	 9E	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x99FF00
2493	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x99FF00
- stack 0: 0xFFFF
2494	 A2	AND		 	 
- stack 1: 0x5C0
- stack 0: 0xFF00
2495	 A3	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xFF00
- stack 0: 0x1
2496	 A5	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2497	 A6	PUSH2	0020	 	 
- stack 2: 0x5C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
2498	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x5C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
2499	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x5C0
- stack 0: 0xFF00FF00
2500	 AB	PUSH2	0020	 	 
- stack 2: 0x5C0
- stack 1: 0xFF00FF00
- stack 0: 0x20
2501	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C0
2502	 AF	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2503	 B1	ADD		 	 
- stack 0: 0x5C4
2504	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2505	 B3	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE40101F1000114FF0F
2506	 B4	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE40101F1000114FF0F
- stack 0: 0xF0
2507	 B6	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xB8
2508	 B7	JUMP		 	 
- stack 0: 0x5C4
2509	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x5C4
2510	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x5C4
- stack 0: 0xF0F1000
2511	 BE	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0xF0F1000
- stack 0: 0x40
2512	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C4
2513	 C2	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2514	 C4	ADD		 	 
- stack 0: 0x5C8
2515	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2516	 C6	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE40101F1000114FF0F0133000C
2517	 C7	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE40101F1000114FF0F0133000C
- stack 0: 0xF0
2518	 C9	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xCB
2519	 CA	JUMP		 	 
- stack 0: 0x5C8
2520	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x5C8
2521	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2522	 CD	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE40101F1000114FF0F0133000C
2523	 CE	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE40101F1000114FF0F0133000C
- stack 0: 0xE0
2524	 D0	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xCBFF0F
2525	 D1	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
2526	 D4	AND		 	 
- stack 1: 0x5C8
- stack 0: 0xFF0F
2527	 D5	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0xFF0F
- stack 0: 0x1
2528	 D7	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
2529	 D8	PUSH2	0040	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
2530	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
2531	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x5C8
- stack 0: 0xF0F0F0F
2532	 DD	PUSH2	0040	 	 
- stack 2: 0x5C8
- stack 1: 0xF0F0F0F
- stack 0: 0x40
2533	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C8
2534	 E1	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2535	 E3	ADD		 	 
- stack 0: 0x5CC
2536	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2537	 E5	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xEA000003290001034800020362FFE40101F1000114FF0F0133000C014D02EC
2538	 E6	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xEA000003290001034800020362FFE40101F1000114FF0F0133000C014D02EC
- stack 0: 0xF0
2539	 E8	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xEA
2540	 E9	JUMP		 	 
- stack 0: 0x5CC
2541	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x5CC
2542	 EB	PUSH2	0040	 	 
- stack 1: 0x5CC
- stack 0: 0x40
2543	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x5CC
- stack 0: 0xF0F0F0F
2544	 EF	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0xF0F0F0F
- stack 0: 0x20
2545	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5CC
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
2546	 F3	OR		 	  ;; # OR
- stack 1: 0x5CC
- stack 0: 0xFF0FFF0F
2547	 F4	PUSH2	0060	 	 
- stack 2: 0x5CC
- stack 1: 0xFF0FFF0F
- stack 0: 0x60
2548	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x5CC
2549	 F8	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2550	 FA	ADD		 	 
- stack 0: 0x5D0
2551	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2552	 FC	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x3290001034800020362FFE40101F1000114FF0F0133000C014D02EC02F00000
2553	 FD	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x3290001034800020362FFE40101F1000114FF0F0133000C014D02EC02F00000
- stack 0: 0xF0
2554	 FF	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x329
2555	 100	JUMP		 	 
- stack 0: 0x5D0
2556	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D0
2557	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2558	 32B	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x3290001034800020362FFE40101F1000114FF0F0133000C014D02EC02F00000
2559	 32C	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x3290001034800020362FFE40101F1000114FF0F0133000C014D02EC02F00000
- stack 0: 0xE0
2560	 32E	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x3290001
2561	 32F	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x3290001
- stack 0: 0xFFFF
2562	 332	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x1
2563	 333	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x1
2564	 335	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x1
2565	 336	PUSH2	0080	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x80
2566	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x0
2567	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D0
- stack 0: 0x1
2568	 33B	PUSH2	0080	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x80
2569	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D0
2570	 33F	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2571	 341	ADD		 	 
- stack 0: 0x5D4
2572	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2573	 343	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x34800020362FFE40101F1000114FF0F0133000C014D02EC02F00000018FFF01
2574	 344	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x34800020362FFE40101F1000114FF0F0133000C014D02EC02F00000018FFF01
- stack 0: 0xF0
2575	 346	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x348
2576	 347	JUMP		 	 
- stack 0: 0x5D4
2577	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D4
2578	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2579	 34A	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x34800020362FFE40101F1000114FF0F0133000C014D02EC02F00000018FFF01
2580	 34B	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x34800020362FFE40101F1000114FF0F0133000C014D02EC02F00000018FFF01
- stack 0: 0xE0
2581	 34D	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x3480002
2582	 34E	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x3480002
- stack 0: 0xFFFF
2583	 351	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x2
2584	 352	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x1
2585	 354	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x2
2586	 355	PUSH2	00A0	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0xA0
2587	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D4
2588	 359	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2589	 35B	ADD		 	 
- stack 0: 0x5D8
2590	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2591	 35D	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x362FFE40101F1000114FF0F0133000C014D02EC02F00000018FFF010099FFF0
2592	 35E	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x362FFE40101F1000114FF0F0133000C014D02EC02F00000018FFF010099FFF0
- stack 0: 0xF0
2593	 360	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x362
2594	 361	JUMP		 	 
- stack 0: 0x5D8
2595	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5D8
2596	 363	PUSH2	0080	 	 
- stack 1: 0x5D8
- stack 0: 0x80
2597	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D8
- stack 0: 0x1
2598	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2599	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D8
- stack 0: 0x1
2600	 36D	PUSH2	00A0	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0xA0
2601	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x2
2602	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2603	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x2
2604	 377	SUB		 	 
- stack 1: 0x5D8
- stack 0: 0x1
2605	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x380
2606	 37B	JUMPI		 	 
- stack 0: 0x5D8
2607	 380	JUMPDEST		 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x5D8
2608	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2609	 382	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x362FFE40101F1000114FF0F0133000C014D02EC02F00000018FFF010099FFF0
2610	 383	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x362FFE40101F1000114FF0F0133000C014D02EC02F00000018FFF010099FFF0
- stack 0: 0xE0
2611	 385	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x362FFE4
2612	 386	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x362FFE4
- stack 0: 0xFFFF
2613	 389	AND		 	 
- stack 1: 0x5D8
- stack 0: 0xFFE4
2614	 38A	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0xFFE4
- stack 0: 0x1
2615	 38C	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2616	 38D	ADD		 	 
- stack 0: 0x5BC
2617	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFF
2618	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5BC
2619	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2620	 395	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE4
2621	 396	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE4
- stack 0: 0xF0
2622	 398	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x86
2623	 399	JUMP		 	 
- stack 0: 0x5BC
2624	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x5BC
2625	 87	PUSH4	ff010000	 	 
- stack 1: 0x5BC
- stack 0: 0xFF010000
2626	 8C	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xFF010000
- stack 0: 0x20
2627	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x5BC
2628	 90	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2629	 92	ADD		 	 
- stack 0: 0x5C0
2630	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2631	 94	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F100
2632	 95	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F100
- stack 0: 0xF0
2633	 97	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x99
2634	 98	JUMP		 	 
- stack 0: 0x5C0
2635	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x5C0
2636	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2637	 9B	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F100
2638	 9C	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA000003290001034800020362FFE40101F100
- stack 0: 0xE0
2639	 9E	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x99FF00
2640	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x99FF00
- stack 0: 0xFFFF
2641	 A2	AND		 	 
- stack 1: 0x5C0
- stack 0: 0xFF00
2642	 A3	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xFF00
- stack 0: 0x1
2643	 A5	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2644	 A6	PUSH2	0020	 	 
- stack 2: 0x5C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
2645	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x5C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
2646	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x5C0
- stack 0: 0xFF00FF00
2647	 AB	PUSH2	0020	 	 
- stack 2: 0x5C0
- stack 1: 0xFF00FF00
- stack 0: 0x20
2648	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C0
2649	 AF	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2650	 B1	ADD		 	 
- stack 0: 0x5C4
2651	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2652	 B3	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE40101F1000114FF0F
2653	 B4	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE40101F1000114FF0F
- stack 0: 0xF0
2654	 B6	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xB8
2655	 B7	JUMP		 	 
- stack 0: 0x5C4
2656	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x5C4
2657	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x5C4
- stack 0: 0xF0F1000
2658	 BE	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0xF0F1000
- stack 0: 0x40
2659	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C4
2660	 C2	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2661	 C4	ADD		 	 
- stack 0: 0x5C8
2662	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2663	 C6	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE40101F1000114FF0F0133000C
2664	 C7	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE40101F1000114FF0F0133000C
- stack 0: 0xF0
2665	 C9	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xCB
2666	 CA	JUMP		 	 
- stack 0: 0x5C8
2667	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x5C8
2668	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2669	 CD	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE40101F1000114FF0F0133000C
2670	 CE	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE40101F1000114FF0F0133000C
- stack 0: 0xE0
2671	 D0	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xCBFF0F
2672	 D1	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
2673	 D4	AND		 	 
- stack 1: 0x5C8
- stack 0: 0xFF0F
2674	 D5	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0xFF0F
- stack 0: 0x1
2675	 D7	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
2676	 D8	PUSH2	0040	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
2677	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
2678	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x5C8
- stack 0: 0xF0F0F0F
2679	 DD	PUSH2	0040	 	 
- stack 2: 0x5C8
- stack 1: 0xF0F0F0F
- stack 0: 0x40
2680	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C8
2681	 E1	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2682	 E3	ADD		 	 
- stack 0: 0x5CC
2683	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2684	 E5	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xEA000003290001034800020362FFE40101F1000114FF0F0133000C014D02EC
2685	 E6	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xEA000003290001034800020362FFE40101F1000114FF0F0133000C014D02EC
- stack 0: 0xF0
2686	 E8	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xEA
2687	 E9	JUMP		 	 
- stack 0: 0x5CC
2688	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x5CC
2689	 EB	PUSH2	0040	 	 
- stack 1: 0x5CC
- stack 0: 0x40
2690	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x5CC
- stack 0: 0xF0F0F0F
2691	 EF	PUSH2	0020	 	 
- stack 2: 0x5CC
- stack 1: 0xF0F0F0F
- stack 0: 0x20
2692	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5CC
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
2693	 F3	OR		 	  ;; # OR
- stack 1: 0x5CC
- stack 0: 0xFF0FFF0F
2694	 F4	PUSH2	0060	 	 
- stack 2: 0x5CC
- stack 1: 0xFF0FFF0F
- stack 0: 0x60
2695	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x5CC
2696	 F8	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2697	 FA	ADD		 	 
- stack 0: 0x5D0
2698	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2699	 FC	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x3290001034800020362FFE40101F1000114FF0F0133000C014D02EC02F00000
2700	 FD	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x3290001034800020362FFE40101F1000114FF0F0133000C014D02EC02F00000
- stack 0: 0xF0
2701	 FF	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x329
2702	 100	JUMP		 	 
- stack 0: 0x5D0
2703	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D0
2704	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2705	 32B	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x3290001034800020362FFE40101F1000114FF0F0133000C014D02EC02F00000
2706	 32C	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x3290001034800020362FFE40101F1000114FF0F0133000C014D02EC02F00000
- stack 0: 0xE0
2707	 32E	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x3290001
2708	 32F	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x3290001
- stack 0: 0xFFFF
2709	 332	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x1
2710	 333	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x1
2711	 335	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x1
2712	 336	PUSH2	0080	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x80
2713	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x1
2714	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D0
- stack 0: 0x2
2715	 33B	PUSH2	0080	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0x80
2716	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D0
2717	 33F	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2718	 341	ADD		 	 
- stack 0: 0x5D4
2719	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2720	 343	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x34800020362FFE40101F1000114FF0F0133000C014D02EC02F00000018FFF01
2721	 344	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x34800020362FFE40101F1000114FF0F0133000C014D02EC02F00000018FFF01
- stack 0: 0xF0
2722	 346	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x348
2723	 347	JUMP		 	 
- stack 0: 0x5D4
2724	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D4
2725	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2726	 34A	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x34800020362FFE40101F1000114FF0F0133000C014D02EC02F00000018FFF01
2727	 34B	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x34800020362FFE40101F1000114FF0F0133000C014D02EC02F00000018FFF01
- stack 0: 0xE0
2728	 34D	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x3480002
2729	 34E	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x3480002
- stack 0: 0xFFFF
2730	 351	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x2
2731	 352	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x1
2732	 354	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x2
2733	 355	PUSH2	00A0	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0xA0
2734	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D4
2735	 359	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2736	 35B	ADD		 	 
- stack 0: 0x5D8
2737	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2738	 35D	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x362FFE40101F1000114FF0F0133000C014D02EC02F00000018FFF010099FFF0
2739	 35E	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x362FFE40101F1000114FF0F0133000C014D02EC02F00000018FFF010099FFF0
- stack 0: 0xF0
2740	 360	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x362
2741	 361	JUMP		 	 
- stack 0: 0x5D8
2742	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5D8
2743	 363	PUSH2	0080	 	 
- stack 1: 0x5D8
- stack 0: 0x80
2744	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D8
- stack 0: 0x2
2745	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2746	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D8
- stack 0: 0x2
2747	 36D	PUSH2	00A0	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0xA0
2748	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0x2
2749	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2750	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0x2
2751	 377	SUB		 	 
- stack 1: 0x5D8
- stack 0: 0x0
2752	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x5D8
- stack 1: 0x0
- stack 0: 0x380
2753	 37B	JUMPI		 	 
- stack 0: 0x5D8
2754	 37C	PUSH2	039A	 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 1: 0x5D8
- stack 0: 0x39A
2755	 37F	JUMP		 	 
- stack 0: 0x5D8
2756	 39A	JUMPDEST		 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x5D8
2757	 39B	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2758	 39D	ADD		 	 
- stack 0: 0x5DC
2759	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2760	 39F	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x101F1000114FF0F0133000C014D02EC02F00000018FFF010099FFF001A20F0F
2761	 3A0	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x101F1000114FF0F0133000C014D02EC02F00000018FFF010099FFF001A20F0F
- stack 0: 0xF0
2762	 3A2	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x101
2763	 3A3	JUMP		 	 
- stack 0: 0x5DC
2764	 101	JUMPDEST		 ;; __riscvimpl_LUI_ff100eb7	  ;; # instr: lui t4,0xff100(ignore imm)
- stack 0: 0x5DC
2765	 102	PUSH4	ff100000	 	 
- stack 1: 0x5DC
- stack 0: 0xFF100000
2766	 107	PUSH2	03A0	 	 
- stack 2: 0x5DC
- stack 1: 0xFF100000
- stack 0: 0x3A0
2767	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x5DC
2768	 10B	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2769	 10D	ADD		 	 
- stack 0: 0x5E0
2770	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2771	 10F	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x114FF0F0133000C014D02EC02F00000018FFF010099FFF001A20F0F00CB00F0
2772	 110	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x114FF0F0133000C014D02EC02F00000018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xF0
2773	 112	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x114
2774	 113	JUMP		 	 
- stack 0: 0x5E0
2775	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x5E0
2776	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2777	 116	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x114FF0F0133000C014D02EC02F00000018FFF010099FFF001A20F0F00CB00F0
2778	 117	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x114FF0F0133000C014D02EC02F00000018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xE0
2779	 119	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x114FF0F
2780	 11A	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x114FF0F
- stack 0: 0xFFFF
2781	 11D	AND		 	 
- stack 1: 0x5E0
- stack 0: 0xFF0F
2782	 11E	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0xFF0F
- stack 0: 0x1
2783	 120	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
2784	 121	PUSH2	03A0	 	 
- stack 2: 0x5E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x3A0
2785	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x5E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xFF100000
2786	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x5E0
- stack 0: 0xFF0FFF0F
2787	 126	PUSH2	03A0	 	 
- stack 2: 0x5E0
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
2788	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x5E0
2789	 12A	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2790	 12C	ADD		 	 
- stack 0: 0x5E4
2791	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2792	 12E	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x133000C014D02EC02F00000018FFF010099FFF001A20F0F00CB00F003E60000
2793	 12F	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x133000C014D02EC02F00000018FFF010099FFF001A20F0F00CB00F003E60000
- stack 0: 0xF0
2794	 131	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x133
2795	 132	JUMP		 	 
- stack 0: 0x5E4
2796	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5E4
2797	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2798	 135	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x133000C014D02EC02F00000018FFF010099FFF001A20F0F00CB00F003E60000
2799	 136	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x133000C014D02EC02F00000018FFF010099FFF001A20F0F00CB00F003E60000
- stack 0: 0xE0
2800	 138	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x133000C
2801	 139	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x133000C
- stack 0: 0xFFFF
2802	 13C	AND		 	 
- stack 1: 0x5E4
- stack 0: 0xC
2803	 13D	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0xC
- stack 0: 0x1
2804	 13F	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0xC
2805	 140	PUSH2	0380	 	 
- stack 2: 0x5E4
- stack 1: 0xC
- stack 0: 0x380
2806	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x5E4
2807	 144	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2808	 146	ADD		 	 
- stack 0: 0x5E8
2809	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2810	 148	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x14D02EC02F00000018FFF010099FFF001A20F0F00CB00F003E6000000EA0000
2811	 149	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x14D02EC02F00000018FFF010099FFF001A20F0F00CB00F003E6000000EA0000
- stack 0: 0xF0
2812	 14B	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x14D
2813	 14C	JUMP		 	 
- stack 0: 0x5E8
2814	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x5E8
2815	 14E	PUSH2	0060	 	 
- stack 1: 0x5E8
- stack 0: 0x60
2816	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x5E8
- stack 0: 0xFF0FFF0F
2817	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E8
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
2818	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E8
- stack 0: 0xFF0FFF0F
2819	 158	PUSH2	03A0	 	 
- stack 2: 0x5E8
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
2820	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x5E8
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
2821	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E8
- stack 2: 0xFF0FFF0F
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
2822	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E8
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
2823	 162	SUB		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2824	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x16B
2825	 166	JUMPI		 	 
- stack 0: 0x5E8
2826	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x5E8
- stack 0: 0x185
2827	 16A	JUMP		 	 
- stack 0: 0x5E8
2828	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x5E8
2829	 186	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2830	 188	ADD		 	 
- stack 0: 0x5EC
2831	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2832	 18A	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x2F00000018FFF010099FFF001A20F0F00CB00F003E6000000EA000003290001
2833	 18B	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x2F00000018FFF010099FFF001A20F0F00CB00F003E6000000EA000003290001
- stack 0: 0xF0
2834	 18D	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x2F0
2835	 18E	JUMP		 	 
- stack 0: 0x5EC
2836	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5EC
2837	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2838	 2F2	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x2F00000018FFF010099FFF001A20F0F00CB00F003E6000000EA000003290001
2839	 2F3	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x2F00000018FFF010099FFF001A20F0F00CB00F003E6000000EA000003290001
- stack 0: 0xE0
2840	 2F5	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x2F00000
2841	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x2F00000
- stack 0: 0xFFFF
2842	 2F9	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
2843	 2FA	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x1
2844	 2FC	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
2845	 2FD	PUSH2	0080	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x80
2846	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x5EC
2847	 301	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2848	 303	ADD		 	 
- stack 0: 0x5F0
2849	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2850	 305	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F003E6000000EA00000329000103480002
2851	 306	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F003E6000000EA00000329000103480002
- stack 0: 0xF0
2852	 308	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x18F
2853	 309	JUMP		 	 
- stack 0: 0x5F0
2854	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x5F0
2855	 190	PUSH4	0ff01000	 	 
- stack 1: 0x5F0
- stack 0: 0xFF01000
2856	 195	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xFF01000
- stack 0: 0x20
2857	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F0
2858	 199	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2859	 19B	ADD		 	 
- stack 0: 0x5F4
2860	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2861	 19D	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
2862	 19E	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
- stack 0: 0xF0
2863	 1A0	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x99
2864	 1A1	JUMP		 	 
- stack 0: 0x5F4
2865	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x5F4
2866	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
2867	 9B	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
2868	 9C	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
- stack 0: 0xE0
2869	 9E	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x99FFF0
2870	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
2871	 A2	AND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFF0
2872	 A3	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0xFFF0
- stack 0: 0x1
2873	 A5	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2874	 A6	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
2875	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
2876	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F4
- stack 0: 0xFF00FF0
2877	 AB	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0xFF00FF0
- stack 0: 0x20
2878	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F4
2879	 AF	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2880	 B1	ADD		 	 
- stack 0: 0x5F8
2881	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2882	 B3	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFE001B5FF10
2883	 B4	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFE001B5FF10
- stack 0: 0xF0
2884	 B6	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1A2
2885	 B7	JUMP		 	 
- stack 0: 0x5F8
2886	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x5F8
2887	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x5F8
- stack 0: 0xF0F0F000
2888	 1A8	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0xF0F0F000
- stack 0: 0x40
2889	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F8
2890	 1AC	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2891	 1AE	ADD		 	 
- stack 0: 0x5FC
2892	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2893	 1B0	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
2894	 1B1	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
- stack 0: 0xF0
2895	 1B3	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xCB
2896	 1B4	JUMP		 	 
- stack 0: 0x5FC
2897	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x5FC
2898	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2899	 CD	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
2900	 CE	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
- stack 0: 0xE0
2901	 D0	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xCB00F0
2902	 D1	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
2903	 D4	AND		 	 
- stack 1: 0x5FC
- stack 0: 0xF0
2904	 D5	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0xF0
- stack 0: 0x1
2905	 D7	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0xF0
2906	 D8	PUSH2	0040	 	 
- stack 2: 0x5FC
- stack 1: 0xF0
- stack 0: 0x40
2907	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x5FC
- stack 1: 0xF0
- stack 0: 0xF0F0F000
2908	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x5FC
- stack 0: 0xF0F0F0F0
2909	 DD	PUSH2	0040	 	 
- stack 2: 0x5FC
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
2910	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5FC
2911	 E1	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2912	 E3	ADD		 	 
- stack 0: 0x600
2913	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2914	 E5	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF00133000D
2915	 E6	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF00133000D
- stack 0: 0xF0
2916	 E8	SHR		 	 
- stack 1: 0x600
- stack 0: 0x3E6
2917	 E9	JUMP		 	 
- stack 0: 0x600
2918	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x600
2919	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2920	 3E8	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF00133000D
2921	 3E9	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF00133000D
- stack 0: 0xE0
2922	 3EB	SHR		 	 
- stack 1: 0x600
- stack 0: 0x3E60000
2923	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x3E60000
- stack 0: 0xFFFF
2924	 3EF	AND		 	 
- stack 1: 0x600
- stack 0: 0x0
2925	 3F0	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x1
2926	 3F2	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x0
2927	 3F3	POP		 	 
- stack 0: 0x600
2928	 3F4	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2929	 3F6	ADD		 	 
- stack 0: 0x604
2930	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2931	 3F8	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0xEA000003290001034800020362FFE001B5FF100114FFF00133000D014D02B4
2932	 3F9	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0xEA000003290001034800020362FFE001B5FF100114FFF00133000D014D02B4
- stack 0: 0xF0
2933	 3FB	SHR		 	 
- stack 1: 0x604
- stack 0: 0xEA
2934	 3FC	JUMP		 	 
- stack 0: 0x604
2935	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x604
2936	 EB	PUSH2	0040	 	 
- stack 1: 0x604
- stack 0: 0x40
2937	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x604
- stack 0: 0xF0F0F0F0
2938	 EF	PUSH2	0020	 	 
- stack 2: 0x604
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
2939	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x604
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
2940	 F3	OR		 	  ;; # OR
- stack 1: 0x604
- stack 0: 0xFFF0FFF0
2941	 F4	PUSH2	0060	 	 
- stack 2: 0x604
- stack 1: 0xFFF0FFF0
- stack 0: 0x60
2942	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x604
2943	 F8	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2944	 FA	ADD		 	 
- stack 0: 0x608
2945	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2946	 FC	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x3290001034800020362FFE001B5FF100114FFF00133000D014D02B402F00000
2947	 FD	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x3290001034800020362FFE001B5FF100114FFF00133000D014D02B402F00000
- stack 0: 0xF0
2948	 FF	SHR		 	 
- stack 1: 0x608
- stack 0: 0x329
2949	 100	JUMP		 	 
- stack 0: 0x608
2950	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x608
2951	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2952	 32B	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x3290001034800020362FFE001B5FF100114FFF00133000D014D02B402F00000
2953	 32C	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x3290001034800020362FFE001B5FF100114FFF00133000D014D02B402F00000
- stack 0: 0xE0
2954	 32E	SHR		 	 
- stack 1: 0x608
- stack 0: 0x3290001
2955	 32F	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x3290001
- stack 0: 0xFFFF
2956	 332	AND		 	 
- stack 1: 0x608
- stack 0: 0x1
2957	 333	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x1
2958	 335	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x1
2959	 336	PUSH2	0080	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x80
2960	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x0
2961	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x608
- stack 0: 0x1
2962	 33B	PUSH2	0080	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x80
2963	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x608
2964	 33F	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2965	 341	ADD		 	 
- stack 0: 0x60C
2966	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2967	 343	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x34800020362FFE001B5FF100114FFF00133000D014D02B402F0000001C80FF0
2968	 344	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x34800020362FFE001B5FF100114FFF00133000D014D02B402F0000001C80FF0
- stack 0: 0xF0
2969	 346	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x348
2970	 347	JUMP		 	 
- stack 0: 0x60C
2971	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x60C
2972	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
2973	 34A	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x34800020362FFE001B5FF100114FFF00133000D014D02B402F0000001C80FF0
2974	 34B	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x34800020362FFE001B5FF100114FFF00133000D014D02B402F0000001C80FF0
- stack 0: 0xE0
2975	 34D	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x3480002
2976	 34E	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x3480002
- stack 0: 0xFFFF
2977	 351	AND		 	 
- stack 1: 0x60C
- stack 0: 0x2
2978	 352	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0x1
2979	 354	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x2
2980	 355	PUSH2	00A0	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0xA0
2981	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x60C
2982	 359	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
2983	 35B	ADD		 	 
- stack 0: 0x610
2984	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
2985	 35D	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x362FFE001B5FF100114FFF00133000D014D02B402F0000001C80FF0009900FF
2986	 35E	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x362FFE001B5FF100114FFF00133000D014D02B402F0000001C80FF0009900FF
- stack 0: 0xF0
2987	 360	SHR		 	 
- stack 1: 0x610
- stack 0: 0x362
2988	 361	JUMP		 	 
- stack 0: 0x610
2989	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x610
2990	 363	PUSH2	0080	 	 
- stack 1: 0x610
- stack 0: 0x80
2991	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x610
- stack 0: 0x1
2992	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2993	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x610
- stack 0: 0x1
2994	 36D	PUSH2	00A0	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0xA0
2995	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x2
2996	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x610
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2997	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x2
2998	 377	SUB		 	 
- stack 1: 0x610
- stack 0: 0x1
2999	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x380
3000	 37B	JUMPI		 	 
- stack 0: 0x610
3001	 380	JUMPDEST		 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x610
3002	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3003	 382	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x362FFE001B5FF100114FFF00133000D014D02B402F0000001C80FF0009900FF
3004	 383	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x362FFE001B5FF100114FFF00133000D014D02B402F0000001C80FF0009900FF
- stack 0: 0xE0
3005	 385	SHR		 	 
- stack 1: 0x610
- stack 0: 0x362FFE0
3006	 386	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x362FFE0
- stack 0: 0xFFFF
3007	 389	AND		 	 
- stack 1: 0x610
- stack 0: 0xFFE0
3008	 38A	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0xFFE0
- stack 0: 0x1
3009	 38C	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3010	 38D	ADD		 	 
- stack 0: 0x5F0
3011	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFF
3012	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5F0
3013	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3014	 395	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F003E6000000EA00000329000103480002
3015	 396	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F003E6000000EA00000329000103480002
- stack 0: 0xF0
3016	 398	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x18F
3017	 399	JUMP		 	 
- stack 0: 0x5F0
3018	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x5F0
3019	 190	PUSH4	0ff01000	 	 
- stack 1: 0x5F0
- stack 0: 0xFF01000
3020	 195	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xFF01000
- stack 0: 0x20
3021	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F0
3022	 199	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3023	 19B	ADD		 	 
- stack 0: 0x5F4
3024	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3025	 19D	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
3026	 19E	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
- stack 0: 0xF0
3027	 1A0	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x99
3028	 1A1	JUMP		 	 
- stack 0: 0x5F4
3029	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x5F4
3030	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
3031	 9B	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
3032	 9C	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x99FFF001A20F0F00CB00F003E6000000EA000003290001034800020362FFE0
- stack 0: 0xE0
3033	 9E	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x99FFF0
3034	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
3035	 A2	AND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFF0
3036	 A3	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0xFFF0
- stack 0: 0x1
3037	 A5	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3038	 A6	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
3039	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
3040	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F4
- stack 0: 0xFF00FF0
3041	 AB	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0xFF00FF0
- stack 0: 0x20
3042	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F4
3043	 AF	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3044	 B1	ADD		 	 
- stack 0: 0x5F8
3045	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3046	 B3	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFE001B5FF10
3047	 B4	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFE001B5FF10
- stack 0: 0xF0
3048	 B6	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1A2
3049	 B7	JUMP		 	 
- stack 0: 0x5F8
3050	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x5F8
3051	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x5F8
- stack 0: 0xF0F0F000
3052	 1A8	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0xF0F0F000
- stack 0: 0x40
3053	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F8
3054	 1AC	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3055	 1AE	ADD		 	 
- stack 0: 0x5FC
3056	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3057	 1B0	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
3058	 1B1	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
- stack 0: 0xF0
3059	 1B3	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xCB
3060	 1B4	JUMP		 	 
- stack 0: 0x5FC
3061	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x5FC
3062	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3063	 CD	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
3064	 CE	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
- stack 0: 0xE0
3065	 D0	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xCB00F0
3066	 D1	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
3067	 D4	AND		 	 
- stack 1: 0x5FC
- stack 0: 0xF0
3068	 D5	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0xF0
- stack 0: 0x1
3069	 D7	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0xF0
3070	 D8	PUSH2	0040	 	 
- stack 2: 0x5FC
- stack 1: 0xF0
- stack 0: 0x40
3071	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x5FC
- stack 1: 0xF0
- stack 0: 0xF0F0F000
3072	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x5FC
- stack 0: 0xF0F0F0F0
3073	 DD	PUSH2	0040	 	 
- stack 2: 0x5FC
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
3074	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5FC
3075	 E1	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3076	 E3	ADD		 	 
- stack 0: 0x600
3077	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3078	 E5	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF00133000D
3079	 E6	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF00133000D
- stack 0: 0xF0
3080	 E8	SHR		 	 
- stack 1: 0x600
- stack 0: 0x3E6
3081	 E9	JUMP		 	 
- stack 0: 0x600
3082	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x600
3083	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3084	 3E8	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF00133000D
3085	 3E9	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF00133000D
- stack 0: 0xE0
3086	 3EB	SHR		 	 
- stack 1: 0x600
- stack 0: 0x3E60000
3087	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x3E60000
- stack 0: 0xFFFF
3088	 3EF	AND		 	 
- stack 1: 0x600
- stack 0: 0x0
3089	 3F0	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x1
3090	 3F2	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x0
3091	 3F3	POP		 	 
- stack 0: 0x600
3092	 3F4	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3093	 3F6	ADD		 	 
- stack 0: 0x604
3094	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3095	 3F8	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0xEA000003290001034800020362FFE001B5FF100114FFF00133000D014D02B4
3096	 3F9	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0xEA000003290001034800020362FFE001B5FF100114FFF00133000D014D02B4
- stack 0: 0xF0
3097	 3FB	SHR		 	 
- stack 1: 0x604
- stack 0: 0xEA
3098	 3FC	JUMP		 	 
- stack 0: 0x604
3099	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x604
3100	 EB	PUSH2	0040	 	 
- stack 1: 0x604
- stack 0: 0x40
3101	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x604
- stack 0: 0xF0F0F0F0
3102	 EF	PUSH2	0020	 	 
- stack 2: 0x604
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
3103	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x604
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
3104	 F3	OR		 	  ;; # OR
- stack 1: 0x604
- stack 0: 0xFFF0FFF0
3105	 F4	PUSH2	0060	 	 
- stack 2: 0x604
- stack 1: 0xFFF0FFF0
- stack 0: 0x60
3106	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x604
3107	 F8	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3108	 FA	ADD		 	 
- stack 0: 0x608
3109	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3110	 FC	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x3290001034800020362FFE001B5FF100114FFF00133000D014D02B402F00000
3111	 FD	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x3290001034800020362FFE001B5FF100114FFF00133000D014D02B402F00000
- stack 0: 0xF0
3112	 FF	SHR		 	 
- stack 1: 0x608
- stack 0: 0x329
3113	 100	JUMP		 	 
- stack 0: 0x608
3114	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x608
3115	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3116	 32B	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x3290001034800020362FFE001B5FF100114FFF00133000D014D02B402F00000
3117	 32C	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x3290001034800020362FFE001B5FF100114FFF00133000D014D02B402F00000
- stack 0: 0xE0
3118	 32E	SHR		 	 
- stack 1: 0x608
- stack 0: 0x3290001
3119	 32F	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x3290001
- stack 0: 0xFFFF
3120	 332	AND		 	 
- stack 1: 0x608
- stack 0: 0x1
3121	 333	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x1
3122	 335	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x1
3123	 336	PUSH2	0080	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x80
3124	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x1
3125	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x608
- stack 0: 0x2
3126	 33B	PUSH2	0080	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x80
3127	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x608
3128	 33F	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3129	 341	ADD		 	 
- stack 0: 0x60C
3130	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3131	 343	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x34800020362FFE001B5FF100114FFF00133000D014D02B402F0000001C80FF0
3132	 344	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x34800020362FFE001B5FF100114FFF00133000D014D02B402F0000001C80FF0
- stack 0: 0xF0
3133	 346	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x348
3134	 347	JUMP		 	 
- stack 0: 0x60C
3135	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x60C
3136	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
3137	 34A	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x34800020362FFE001B5FF100114FFF00133000D014D02B402F0000001C80FF0
3138	 34B	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x34800020362FFE001B5FF100114FFF00133000D014D02B402F0000001C80FF0
- stack 0: 0xE0
3139	 34D	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x3480002
3140	 34E	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x3480002
- stack 0: 0xFFFF
3141	 351	AND		 	 
- stack 1: 0x60C
- stack 0: 0x2
3142	 352	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0x1
3143	 354	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x2
3144	 355	PUSH2	00A0	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0xA0
3145	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x60C
3146	 359	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3147	 35B	ADD		 	 
- stack 0: 0x610
3148	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3149	 35D	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x362FFE001B5FF100114FFF00133000D014D02B402F0000001C80FF0009900FF
3150	 35E	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x362FFE001B5FF100114FFF00133000D014D02B402F0000001C80FF0009900FF
- stack 0: 0xF0
3151	 360	SHR		 	 
- stack 1: 0x610
- stack 0: 0x362
3152	 361	JUMP		 	 
- stack 0: 0x610
3153	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x610
3154	 363	PUSH2	0080	 	 
- stack 1: 0x610
- stack 0: 0x80
3155	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x610
- stack 0: 0x2
3156	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3157	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x610
- stack 0: 0x2
3158	 36D	PUSH2	00A0	 	 
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0xA0
3159	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0x2
3160	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x610
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3161	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0x2
3162	 377	SUB		 	 
- stack 1: 0x610
- stack 0: 0x0
3163	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x380
3164	 37B	JUMPI		 	 
- stack 0: 0x610
3165	 37C	PUSH2	039A	 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 1: 0x610
- stack 0: 0x39A
3166	 37F	JUMP		 	 
- stack 0: 0x610
3167	 39A	JUMPDEST		 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x610
3168	 39B	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3169	 39D	ADD		 	 
- stack 0: 0x614
3170	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3171	 39F	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1B5FF100114FFF00133000D014D02B402F0000001C80FF0009900FF00B8F0F1
3172	 3A0	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x1B5FF100114FFF00133000D014D02B402F0000001C80FF0009900FF00B8F0F1
- stack 0: 0xF0
3173	 3A2	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1B5
3174	 3A3	JUMP		 	 
- stack 0: 0x614
3175	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_fff10eb7	  ;; # instr: lui t4,0xfff10(ignore imm)
- stack 0: 0x614
3176	 1B6	PUSH4	fff10000	 	 
- stack 1: 0x614
- stack 0: 0xFFF10000
3177	 1BB	PUSH2	03A0	 	 
- stack 2: 0x614
- stack 1: 0xFFF10000
- stack 0: 0x3A0
3178	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x614
3179	 1BF	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3180	 1C1	ADD		 	 
- stack 0: 0x618
3181	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3182	 1C3	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x114FFF00133000D014D02B402F0000001C80FF0009900FF00B8F0F100CBFF0F
3183	 1C4	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x114FFF00133000D014D02B402F0000001C80FF0009900FF00B8F0F100CBFF0F
- stack 0: 0xF0
3184	 1C6	SHR		 	 
- stack 1: 0x618
- stack 0: 0x114
3185	 1C7	JUMP		 	 
- stack 0: 0x618
3186	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x618
3187	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3188	 116	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x114FFF00133000D014D02B402F0000001C80FF0009900FF00B8F0F100CBFF0F
3189	 117	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x114FFF00133000D014D02B402F0000001C80FF0009900FF00B8F0F100CBFF0F
- stack 0: 0xE0
3190	 119	SHR		 	 
- stack 1: 0x618
- stack 0: 0x114FFF0
3191	 11A	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x114FFF0
- stack 0: 0xFFFF
3192	 11D	AND		 	 
- stack 1: 0x618
- stack 0: 0xFFF0
3193	 11E	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0xFFF0
- stack 0: 0x1
3194	 120	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3195	 121	PUSH2	03A0	 	 
- stack 2: 0x618
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
3196	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x618
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFF10000
3197	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x618
- stack 0: 0xFFF0FFF0
3198	 126	PUSH2	03A0	 	 
- stack 2: 0x618
- stack 1: 0xFFF0FFF0
- stack 0: 0x3A0
3199	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x618
3200	 12A	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3201	 12C	ADD		 	 
- stack 0: 0x61C
3202	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3203	 12E	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x133000D014D02B402F0000001C80FF0009900FF00B8F0F100CBFF0F03E60000
3204	 12F	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x133000D014D02B402F0000001C80FF0009900FF00B8F0F100CBFF0F03E60000
- stack 0: 0xF0
3205	 131	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x133
3206	 132	JUMP		 	 
- stack 0: 0x61C
3207	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x61C
3208	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3209	 135	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x133000D014D02B402F0000001C80FF0009900FF00B8F0F100CBFF0F03E60000
3210	 136	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x133000D014D02B402F0000001C80FF0009900FF00B8F0F100CBFF0F03E60000
- stack 0: 0xE0
3211	 138	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x133000D
3212	 139	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x133000D
- stack 0: 0xFFFF
3213	 13C	AND		 	 
- stack 1: 0x61C
- stack 0: 0xD
3214	 13D	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0xD
- stack 0: 0x1
3215	 13F	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0xD
3216	 140	PUSH2	0380	 	 
- stack 2: 0x61C
- stack 1: 0xD
- stack 0: 0x380
3217	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x61C
3218	 144	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3219	 146	ADD		 	 
- stack 0: 0x620
3220	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3221	 148	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x14D02B402F0000001C80FF0009900FF00B8F0F100CBFF0F03E6000003E60000
3222	 149	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x14D02B402F0000001C80FF0009900FF00B8F0F100CBFF0F03E6000003E60000
- stack 0: 0xF0
3223	 14B	SHR		 	 
- stack 1: 0x620
- stack 0: 0x14D
3224	 14C	JUMP		 	 
- stack 0: 0x620
3225	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x620
3226	 14E	PUSH2	0060	 	 
- stack 1: 0x620
- stack 0: 0x60
3227	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x620
- stack 0: 0xFFF0FFF0
3228	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x620
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFFFFFFF
3229	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x620
- stack 0: 0xFFF0FFF0
3230	 158	PUSH2	03A0	 	 
- stack 2: 0x620
- stack 1: 0xFFF0FFF0
- stack 0: 0x3A0
3231	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x620
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFF0FFF0
3232	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x620
- stack 2: 0xFFF0FFF0
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFFFFFFF
3233	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x620
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFF0FFF0
3234	 162	SUB		 	 
- stack 1: 0x620
- stack 0: 0x0
3235	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x16B
3236	 166	JUMPI		 	 
- stack 0: 0x620
3237	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x620
- stack 0: 0x185
3238	 16A	JUMP		 	 
- stack 0: 0x620
3239	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x620
3240	 186	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3241	 188	ADD		 	 
- stack 0: 0x624
3242	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3243	 18A	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA0000
3244	 18B	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA0000
- stack 0: 0xF0
3245	 18D	SHR		 	 
- stack 1: 0x624
- stack 0: 0x2F0
3246	 18E	JUMP		 	 
- stack 0: 0x624
3247	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x624
3248	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3249	 2F2	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA0000
3250	 2F3	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x2F0000001C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA0000
- stack 0: 0xE0
3251	 2F5	SHR		 	 
- stack 1: 0x624
- stack 0: 0x2F00000
3252	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x2F00000
- stack 0: 0xFFFF
3253	 2F9	AND		 	 
- stack 1: 0x624
- stack 0: 0x0
3254	 2FA	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x1
3255	 2FC	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x0
3256	 2FD	PUSH2	0080	 	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x80
3257	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x624
3258	 301	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3259	 303	ADD		 	 
- stack 0: 0x628
3260	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3261	 305	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x1C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA000003290001
3262	 306	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x1C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA000003290001
- stack 0: 0xF0
3263	 308	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1C8
3264	 309	JUMP		 	 
- stack 0: 0x628
3265	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x628
3266	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x628
- stack 0: 0xFF0000
3267	 1CE	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xFF0000
- stack 0: 0x20
3268	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x628
3269	 1D2	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3270	 1D4	ADD		 	 
- stack 0: 0x62C
3271	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3272	 1D6	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
3273	 1D7	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
- stack 0: 0xF0
3274	 1D9	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x99
3275	 1DA	JUMP		 	 
- stack 0: 0x62C
3276	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x62C
3277	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3278	 9B	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
3279	 9C	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
- stack 0: 0xE0
3280	 9E	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x9900FF
3281	 9F	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x9900FF
- stack 0: 0xFFFF
3282	 A2	AND		 	 
- stack 1: 0x62C
- stack 0: 0xFF
3283	 A3	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0xFF
- stack 0: 0x1
3284	 A5	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0xFF
3285	 A6	PUSH2	0020	 	 
- stack 2: 0x62C
- stack 1: 0xFF
- stack 0: 0x20
3286	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x62C
- stack 1: 0xFF
- stack 0: 0xFF0000
3287	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x62C
- stack 0: 0xFF00FF
3288	 AB	PUSH2	0020	 	 
- stack 2: 0x62C
- stack 1: 0xFF00FF
- stack 0: 0x20
3289	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x62C
3290	 AF	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3291	 B1	ADD		 	 
- stack 0: 0x630
3292	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3293	 B3	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xB8F0F100CBFF0F03E6000003E6000000EA000003290001034800020362FFDC
3294	 B4	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0xB8F0F100CBFF0F03E6000003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
3295	 B6	SHR		 	 
- stack 1: 0x630
- stack 0: 0xB8
3296	 B7	JUMP		 	 
- stack 0: 0x630
3297	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x630
3298	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x630
- stack 0: 0xF0F1000
3299	 BE	PUSH2	0040	 	 
- stack 2: 0x630
- stack 1: 0xF0F1000
- stack 0: 0x40
3300	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x630
3301	 C2	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3302	 C4	ADD		 	 
- stack 0: 0x634
3303	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3304	 C6	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
3305	 C7	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xF0
3306	 C9	SHR		 	 
- stack 1: 0x634
- stack 0: 0xCB
3307	 CA	JUMP		 	 
- stack 0: 0x634
3308	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x634
3309	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3310	 CD	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
3311	 CE	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xE0
3312	 D0	SHR		 	 
- stack 1: 0x634
- stack 0: 0xCBFF0F
3313	 D1	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
3314	 D4	AND		 	 
- stack 1: 0x634
- stack 0: 0xFF0F
3315	 D5	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0xFF0F
- stack 0: 0x1
3316	 D7	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
3317	 D8	PUSH2	0040	 	 
- stack 2: 0x634
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
3318	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x634
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
3319	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x634
- stack 0: 0xF0F0F0F
3320	 DD	PUSH2	0040	 	 
- stack 2: 0x634
- stack 1: 0xF0F0F0F
- stack 0: 0x40
3321	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x634
3322	 E1	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3323	 E3	ADD		 	 
- stack 0: 0x638
3324	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3325	 E5	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
3326	 E6	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
- stack 0: 0xF0
3327	 E8	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3E6
3328	 E9	JUMP		 	 
- stack 0: 0x638
3329	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
3330	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3331	 3E8	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
3332	 3E9	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
- stack 0: 0xE0
3333	 3EB	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3E60000
3334	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x3E60000
- stack 0: 0xFFFF
3335	 3EF	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
3336	 3F0	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
3337	 3F2	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
3338	 3F3	POP		 	 
- stack 0: 0x638
3339	 3F4	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3340	 3F6	ADD		 	 
- stack 0: 0x63C
3341	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3342	 3F8	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF0133000E
3343	 3F9	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF0133000E
- stack 0: 0xF0
3344	 3FB	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x3E6
3345	 3FC	JUMP		 	 
- stack 0: 0x63C
3346	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x63C
3347	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3348	 3E8	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF0133000E
3349	 3E9	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF0133000E
- stack 0: 0xE0
3350	 3EB	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x3E60000
3351	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x3E60000
- stack 0: 0xFFFF
3352	 3EF	AND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3353	 3F0	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x1
3354	 3F2	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3355	 3F3	POP		 	 
- stack 0: 0x63C
3356	 3F4	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3357	 3F6	ADD		 	 
- stack 0: 0x640
3358	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3359	 3F8	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF0133000E014D0278
3360	 3F9	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF0133000E014D0278
- stack 0: 0xF0
3361	 3FB	SHR		 	 
- stack 1: 0x640
- stack 0: 0xEA
3362	 3FC	JUMP		 	 
- stack 0: 0x640
3363	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x640
3364	 EB	PUSH2	0040	 	 
- stack 1: 0x640
- stack 0: 0x40
3365	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x640
- stack 0: 0xF0F0F0F
3366	 EF	PUSH2	0020	 	 
- stack 2: 0x640
- stack 1: 0xF0F0F0F
- stack 0: 0x20
3367	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x640
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
3368	 F3	OR		 	  ;; # OR
- stack 1: 0x640
- stack 0: 0xFFF0FFF
3369	 F4	PUSH2	0060	 	 
- stack 2: 0x640
- stack 1: 0xFFF0FFF
- stack 0: 0x60
3370	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x640
3371	 F8	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3372	 FA	ADD		 	 
- stack 0: 0x644
3373	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3374	 FC	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF0133000E014D027802F00000
3375	 FD	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF0133000E014D027802F00000
- stack 0: 0xF0
3376	 FF	SHR		 	 
- stack 1: 0x644
- stack 0: 0x329
3377	 100	JUMP		 	 
- stack 0: 0x644
3378	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x644
3379	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3380	 32B	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF0133000E014D027802F00000
3381	 32C	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF0133000E014D027802F00000
- stack 0: 0xE0
3382	 32E	SHR		 	 
- stack 1: 0x644
- stack 0: 0x3290001
3383	 32F	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x3290001
- stack 0: 0xFFFF
3384	 332	AND		 	 
- stack 1: 0x644
- stack 0: 0x1
3385	 333	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
3386	 335	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x1
3387	 336	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x80
3388	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x0
3389	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x644
- stack 0: 0x1
3390	 33B	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x80
3391	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x644
3392	 33F	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3393	 341	ADD		 	 
- stack 0: 0x648
3394	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3395	 343	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF0133000E014D027802F000000086F010
3396	 344	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF0133000E014D027802F000000086F010
- stack 0: 0xF0
3397	 346	SHR		 	 
- stack 1: 0x648
- stack 0: 0x348
3398	 347	JUMP		 	 
- stack 0: 0x648
3399	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x648
3400	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3401	 34A	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF0133000E014D027802F000000086F010
3402	 34B	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF0133000E014D027802F000000086F010
- stack 0: 0xE0
3403	 34D	SHR		 	 
- stack 1: 0x648
- stack 0: 0x3480002
3404	 34E	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x3480002
- stack 0: 0xFFFF
3405	 351	AND		 	 
- stack 1: 0x648
- stack 0: 0x2
3406	 352	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x1
3407	 354	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x2
3408	 355	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xA0
3409	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x648
3410	 359	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3411	 35B	ADD		 	 
- stack 0: 0x64C
3412	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3413	 35D	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x362FFDC01DBFFF10114FFFF0133000E014D027802F000000086F0100099FF00
3414	 35E	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x362FFDC01DBFFF10114FFFF0133000E014D027802F000000086F0100099FF00
- stack 0: 0xF0
3415	 360	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x362
3416	 361	JUMP		 	 
- stack 0: 0x64C
3417	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x64C
3418	 363	PUSH2	0080	 	 
- stack 1: 0x64C
- stack 0: 0x80
3419	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x64C
- stack 0: 0x1
3420	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3421	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x64C
- stack 0: 0x1
3422	 36D	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0xA0
3423	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x2
3424	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x64C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3425	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x2
3426	 377	SUB		 	 
- stack 1: 0x64C
- stack 0: 0x1
3427	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x380
3428	 37B	JUMPI		 	 
- stack 0: 0x64C
3429	 380	JUMPDEST		 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x64C
3430	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3431	 382	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x362FFDC01DBFFF10114FFFF0133000E014D027802F000000086F0100099FF00
3432	 383	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x362FFDC01DBFFF10114FFFF0133000E014D027802F000000086F0100099FF00
- stack 0: 0xE0
3433	 385	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x362FFDC
3434	 386	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x362FFDC
- stack 0: 0xFFFF
3435	 389	AND		 	 
- stack 1: 0x64C
- stack 0: 0xFFDC
3436	 38A	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0xFFDC
- stack 0: 0x1
3437	 38C	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
3438	 38D	ADD		 	 
- stack 0: 0x628
3439	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x628
- stack 0: 0xFFFFFFFF
3440	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x628
3441	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3442	 395	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x1C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA000003290001
3443	 396	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x1C80FF0009900FF00B8F0F100CBFF0F03E6000003E6000000EA000003290001
- stack 0: 0xF0
3444	 398	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1C8
3445	 399	JUMP		 	 
- stack 0: 0x628
3446	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x628
3447	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x628
- stack 0: 0xFF0000
3448	 1CE	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xFF0000
- stack 0: 0x20
3449	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x628
3450	 1D2	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3451	 1D4	ADD		 	 
- stack 0: 0x62C
3452	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3453	 1D6	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
3454	 1D7	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
- stack 0: 0xF0
3455	 1D9	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x99
3456	 1DA	JUMP		 	 
- stack 0: 0x62C
3457	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x62C
3458	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3459	 9B	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
3460	 9C	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x9900FF00B8F0F100CBFF0F03E6000003E6000000EA00000329000103480002
- stack 0: 0xE0
3461	 9E	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x9900FF
3462	 9F	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x9900FF
- stack 0: 0xFFFF
3463	 A2	AND		 	 
- stack 1: 0x62C
- stack 0: 0xFF
3464	 A3	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0xFF
- stack 0: 0x1
3465	 A5	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0xFF
3466	 A6	PUSH2	0020	 	 
- stack 2: 0x62C
- stack 1: 0xFF
- stack 0: 0x20
3467	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x62C
- stack 1: 0xFF
- stack 0: 0xFF0000
3468	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x62C
- stack 0: 0xFF00FF
3469	 AB	PUSH2	0020	 	 
- stack 2: 0x62C
- stack 1: 0xFF00FF
- stack 0: 0x20
3470	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x62C
3471	 AF	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3472	 B1	ADD		 	 
- stack 0: 0x630
3473	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3474	 B3	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xB8F0F100CBFF0F03E6000003E6000000EA000003290001034800020362FFDC
3475	 B4	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0xB8F0F100CBFF0F03E6000003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
3476	 B6	SHR		 	 
- stack 1: 0x630
- stack 0: 0xB8
3477	 B7	JUMP		 	 
- stack 0: 0x630
3478	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x630
3479	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x630
- stack 0: 0xF0F1000
3480	 BE	PUSH2	0040	 	 
- stack 2: 0x630
- stack 1: 0xF0F1000
- stack 0: 0x40
3481	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x630
3482	 C2	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3483	 C4	ADD		 	 
- stack 0: 0x634
3484	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3485	 C6	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
3486	 C7	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xF0
3487	 C9	SHR		 	 
- stack 1: 0x634
- stack 0: 0xCB
3488	 CA	JUMP		 	 
- stack 0: 0x634
3489	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x634
3490	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3491	 CD	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
3492	 CE	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0xCBFF0F03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xE0
3493	 D0	SHR		 	 
- stack 1: 0x634
- stack 0: 0xCBFF0F
3494	 D1	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
3495	 D4	AND		 	 
- stack 1: 0x634
- stack 0: 0xFF0F
3496	 D5	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0xFF0F
- stack 0: 0x1
3497	 D7	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
3498	 D8	PUSH2	0040	 	 
- stack 2: 0x634
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
3499	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x634
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
3500	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x634
- stack 0: 0xF0F0F0F
3501	 DD	PUSH2	0040	 	 
- stack 2: 0x634
- stack 1: 0xF0F0F0F
- stack 0: 0x40
3502	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x634
3503	 E1	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3504	 E3	ADD		 	 
- stack 0: 0x638
3505	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3506	 E5	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
3507	 E6	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
- stack 0: 0xF0
3508	 E8	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3E6
3509	 E9	JUMP		 	 
- stack 0: 0x638
3510	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
3511	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3512	 3E8	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
3513	 3E9	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
- stack 0: 0xE0
3514	 3EB	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3E60000
3515	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x3E60000
- stack 0: 0xFFFF
3516	 3EF	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
3517	 3F0	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
3518	 3F2	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
3519	 3F3	POP		 	 
- stack 0: 0x638
3520	 3F4	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3521	 3F6	ADD		 	 
- stack 0: 0x63C
3522	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3523	 3F8	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF0133000E
3524	 3F9	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF0133000E
- stack 0: 0xF0
3525	 3FB	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x3E6
3526	 3FC	JUMP		 	 
- stack 0: 0x63C
3527	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x63C
3528	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3529	 3E8	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF0133000E
3530	 3E9	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF0133000E
- stack 0: 0xE0
3531	 3EB	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x3E60000
3532	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x3E60000
- stack 0: 0xFFFF
3533	 3EF	AND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3534	 3F0	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x1
3535	 3F2	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3536	 3F3	POP		 	 
- stack 0: 0x63C
3537	 3F4	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3538	 3F6	ADD		 	 
- stack 0: 0x640
3539	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3540	 3F8	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF0133000E014D0278
3541	 3F9	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF0133000E014D0278
- stack 0: 0xF0
3542	 3FB	SHR		 	 
- stack 1: 0x640
- stack 0: 0xEA
3543	 3FC	JUMP		 	 
- stack 0: 0x640
3544	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x640
3545	 EB	PUSH2	0040	 	 
- stack 1: 0x640
- stack 0: 0x40
3546	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x640
- stack 0: 0xF0F0F0F
3547	 EF	PUSH2	0020	 	 
- stack 2: 0x640
- stack 1: 0xF0F0F0F
- stack 0: 0x20
3548	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x640
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
3549	 F3	OR		 	  ;; # OR
- stack 1: 0x640
- stack 0: 0xFFF0FFF
3550	 F4	PUSH2	0060	 	 
- stack 2: 0x640
- stack 1: 0xFFF0FFF
- stack 0: 0x60
3551	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x640
3552	 F8	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3553	 FA	ADD		 	 
- stack 0: 0x644
3554	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3555	 FC	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF0133000E014D027802F00000
3556	 FD	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF0133000E014D027802F00000
- stack 0: 0xF0
3557	 FF	SHR		 	 
- stack 1: 0x644
- stack 0: 0x329
3558	 100	JUMP		 	 
- stack 0: 0x644
3559	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x644
3560	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3561	 32B	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF0133000E014D027802F00000
3562	 32C	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF0133000E014D027802F00000
- stack 0: 0xE0
3563	 32E	SHR		 	 
- stack 1: 0x644
- stack 0: 0x3290001
3564	 32F	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x3290001
- stack 0: 0xFFFF
3565	 332	AND		 	 
- stack 1: 0x644
- stack 0: 0x1
3566	 333	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
3567	 335	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x1
3568	 336	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x80
3569	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
3570	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x644
- stack 0: 0x2
3571	 33B	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0x80
3572	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x644
3573	 33F	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3574	 341	ADD		 	 
- stack 0: 0x648
3575	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3576	 343	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF0133000E014D027802F000000086F010
3577	 344	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF0133000E014D027802F000000086F010
- stack 0: 0xF0
3578	 346	SHR		 	 
- stack 1: 0x648
- stack 0: 0x348
3579	 347	JUMP		 	 
- stack 0: 0x648
3580	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x648
3581	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3582	 34A	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF0133000E014D027802F000000086F010
3583	 34B	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF0133000E014D027802F000000086F010
- stack 0: 0xE0
3584	 34D	SHR		 	 
- stack 1: 0x648
- stack 0: 0x3480002
3585	 34E	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x3480002
- stack 0: 0xFFFF
3586	 351	AND		 	 
- stack 1: 0x648
- stack 0: 0x2
3587	 352	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x1
3588	 354	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x2
3589	 355	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xA0
3590	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x648
3591	 359	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3592	 35B	ADD		 	 
- stack 0: 0x64C
3593	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3594	 35D	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x362FFDC01DBFFF10114FFFF0133000E014D027802F000000086F0100099FF00
3595	 35E	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x362FFDC01DBFFF10114FFFF0133000E014D027802F000000086F0100099FF00
- stack 0: 0xF0
3596	 360	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x362
3597	 361	JUMP		 	 
- stack 0: 0x64C
3598	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x64C
3599	 363	PUSH2	0080	 	 
- stack 1: 0x64C
- stack 0: 0x80
3600	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x64C
- stack 0: 0x2
3601	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3602	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x64C
- stack 0: 0x2
3603	 36D	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xA0
3604	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x2
3605	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x64C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3606	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x2
3607	 377	SUB		 	 
- stack 1: 0x64C
- stack 0: 0x0
3608	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x380
3609	 37B	JUMPI		 	 
- stack 0: 0x64C
3610	 37C	PUSH2	039A	 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 1: 0x64C
- stack 0: 0x39A
3611	 37F	JUMP		 	 
- stack 0: 0x64C
3612	 39A	JUMPDEST		 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x64C
3613	 39B	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3614	 39D	ADD		 	 
- stack 0: 0x650
3615	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3616	 39F	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x1DBFFF10114FFFF0133000E014D027802F000000086F0100099FF0003E60000
3617	 3A0	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x1DBFFF10114FFFF0133000E014D027802F000000086F0100099FF0003E60000
- stack 0: 0xF0
3618	 3A2	SHR		 	 
- stack 1: 0x650
- stack 0: 0x1DB
3619	 3A3	JUMP		 	 
- stack 0: 0x650
3620	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_fff1eb7	  ;; # instr: lui t4,0xfff1(ignore imm)
- stack 0: 0x650
3621	 1DC	PUSH4	0fff1000	 	 
- stack 1: 0x650
- stack 0: 0xFFF1000
3622	 1E1	PUSH2	03A0	 	 
- stack 2: 0x650
- stack 1: 0xFFF1000
- stack 0: 0x3A0
3623	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x650
3624	 1E5	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3625	 1E7	ADD		 	 
- stack 0: 0x654
3626	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3627	 1E9	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x114FFFF0133000E014D027802F000000086F0100099FF0003E6000000B8F0F1
3628	 1EA	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x114FFFF0133000E014D027802F000000086F0100099FF0003E6000000B8F0F1
- stack 0: 0xF0
3629	 1EC	SHR		 	 
- stack 1: 0x654
- stack 0: 0x114
3630	 1ED	JUMP		 	 
- stack 0: 0x654
3631	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x654
3632	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3633	 116	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x114FFFF0133000E014D027802F000000086F0100099FF0003E6000000B8F0F1
3634	 117	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x114FFFF0133000E014D027802F000000086F0100099FF0003E6000000B8F0F1
- stack 0: 0xE0
3635	 119	SHR		 	 
- stack 1: 0x654
- stack 0: 0x114FFFF
3636	 11A	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x114FFFF
- stack 0: 0xFFFF
3637	 11D	AND		 	 
- stack 1: 0x654
- stack 0: 0xFFFF
3638	 11E	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0xFFFF
- stack 0: 0x1
3639	 120	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3640	 121	PUSH2	03A0	 	 
- stack 2: 0x654
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
3641	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x654
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFF1000
3642	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x654
- stack 0: 0xFFF0FFF
3643	 126	PUSH2	03A0	 	 
- stack 2: 0x654
- stack 1: 0xFFF0FFF
- stack 0: 0x3A0
3644	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x654
3645	 12A	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3646	 12C	ADD		 	 
- stack 0: 0x658
3647	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3648	 12E	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x133000E014D027802F000000086F0100099FF0003E6000000B8F0F100CBFF0F
3649	 12F	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x133000E014D027802F000000086F0100099FF0003E6000000B8F0F100CBFF0F
- stack 0: 0xF0
3650	 131	SHR		 	 
- stack 1: 0x658
- stack 0: 0x133
3651	 132	JUMP		 	 
- stack 0: 0x658
3652	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x658
3653	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3654	 135	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x133000E014D027802F000000086F0100099FF0003E6000000B8F0F100CBFF0F
3655	 136	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x133000E014D027802F000000086F0100099FF0003E6000000B8F0F100CBFF0F
- stack 0: 0xE0
3656	 138	SHR		 	 
- stack 1: 0x658
- stack 0: 0x133000E
3657	 139	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x133000E
- stack 0: 0xFFFF
3658	 13C	AND		 	 
- stack 1: 0x658
- stack 0: 0xE
3659	 13D	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0xE
- stack 0: 0x1
3660	 13F	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0xE
3661	 140	PUSH2	0380	 	 
- stack 2: 0x658
- stack 1: 0xE
- stack 0: 0x380
3662	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x658
3663	 144	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3664	 146	ADD		 	 
- stack 0: 0x65C
3665	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3666	 148	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x14D027802F000000086F0100099FF0003E6000000B8F0F100CBFF0F00EA0000
3667	 149	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x14D027802F000000086F0100099FF0003E6000000B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
3668	 14B	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x14D
3669	 14C	JUMP		 	 
- stack 0: 0x65C
3670	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x65C
3671	 14E	PUSH2	0060	 	 
- stack 1: 0x65C
- stack 0: 0x60
3672	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x65C
- stack 0: 0xFFF0FFF
3673	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x65C
- stack 1: 0xFFF0FFF
- stack 0: 0xFFFFFFFF
3674	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x65C
- stack 0: 0xFFF0FFF
3675	 158	PUSH2	03A0	 	 
- stack 2: 0x65C
- stack 1: 0xFFF0FFF
- stack 0: 0x3A0
3676	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x65C
- stack 1: 0xFFF0FFF
- stack 0: 0xFFF0FFF
3677	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x65C
- stack 2: 0xFFF0FFF
- stack 1: 0xFFF0FFF
- stack 0: 0xFFFFFFFF
3678	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x65C
- stack 1: 0xFFF0FFF
- stack 0: 0xFFF0FFF
3679	 162	SUB		 	 
- stack 1: 0x65C
- stack 0: 0x0
3680	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x16B
3681	 166	JUMPI		 	 
- stack 0: 0x65C
3682	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x65C
- stack 0: 0x185
3683	 16A	JUMP		 	 
- stack 0: 0x65C
3684	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x65C
3685	 186	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3686	 188	ADD		 	 
- stack 0: 0x660
3687	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3688	 18A	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x2F000000086F0100099FF0003E6000000B8F0F100CBFF0F00EA000003290001
3689	 18B	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x2F000000086F0100099FF0003E6000000B8F0F100CBFF0F00EA000003290001
- stack 0: 0xF0
3690	 18D	SHR		 	 
- stack 1: 0x660
- stack 0: 0x2F0
3691	 18E	JUMP		 	 
- stack 0: 0x660
3692	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x660
3693	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
3694	 2F2	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x2F000000086F0100099FF0003E6000000B8F0F100CBFF0F00EA000003290001
3695	 2F3	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x2F000000086F0100099FF0003E6000000B8F0F100CBFF0F00EA000003290001
- stack 0: 0xE0
3696	 2F5	SHR		 	 
- stack 1: 0x660
- stack 0: 0x2F00000
3697	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x2F00000
- stack 0: 0xFFFF
3698	 2F9	AND		 	 
- stack 1: 0x660
- stack 0: 0x0
3699	 2FA	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x1
3700	 2FC	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0x0
3701	 2FD	PUSH2	0080	 	 
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x80
3702	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x660
3703	 301	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3704	 303	ADD		 	 
- stack 0: 0x664
3705	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3706	 305	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x86F0100099FF0003E6000000B8F0F100CBFF0F00EA00000329000103480002
3707	 306	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x86F0100099FF0003E6000000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xF0
3708	 308	SHR		 	 
- stack 1: 0x664
- stack 0: 0x86
3709	 309	JUMP		 	 
- stack 0: 0x664
3710	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x664
3711	 87	PUSH4	ff010000	 	 
- stack 1: 0x664
- stack 0: 0xFF010000
3712	 8C	PUSH2	0020	 	 
- stack 2: 0x664
- stack 1: 0xFF010000
- stack 0: 0x20
3713	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x664
3714	 90	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3715	 92	ADD		 	 
- stack 0: 0x668
3716	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3717	 94	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
3718	 95	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
- stack 0: 0xF0
3719	 97	SHR		 	 
- stack 1: 0x668
- stack 0: 0x99
3720	 98	JUMP		 	 
- stack 0: 0x668
3721	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x668
3722	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
3723	 9B	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
3724	 9C	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
- stack 0: 0xE0
3725	 9E	SHR		 	 
- stack 1: 0x668
- stack 0: 0x99FF00
3726	 9F	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x99FF00
- stack 0: 0xFFFF
3727	 A2	AND		 	 
- stack 1: 0x668
- stack 0: 0xFF00
3728	 A3	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0xFF00
- stack 0: 0x1
3729	 A5	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3730	 A6	PUSH2	0020	 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
3731	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
3732	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x668
- stack 0: 0xFF00FF00
3733	 AB	PUSH2	0020	 	 
- stack 2: 0x668
- stack 1: 0xFF00FF00
- stack 0: 0x20
3734	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x668
3735	 AF	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3736	 B1	ADD		 	 
- stack 0: 0x66C
3737	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3738	 B3	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F100
3739	 B4	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F100
- stack 0: 0xF0
3740	 B6	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x3E6
3741	 B7	JUMP		 	 
- stack 0: 0x66C
3742	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x66C
3743	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
3744	 3E8	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F100
3745	 3E9	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F100
- stack 0: 0xE0
3746	 3EB	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x3E60000
3747	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x3E60000
- stack 0: 0xFFFF
3748	 3EF	AND		 	 
- stack 1: 0x66C
- stack 0: 0x0
3749	 3F0	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x1
3750	 3F2	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x0
3751	 3F3	POP		 	 
- stack 0: 0x66C
3752	 3F4	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3753	 3F6	ADD		 	 
- stack 0: 0x670
3754	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3755	 3F8	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE00101F1000114FF0F
3756	 3F9	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE00101F1000114FF0F
- stack 0: 0xF0
3757	 3FB	SHR		 	 
- stack 1: 0x670
- stack 0: 0xB8
3758	 3FC	JUMP		 	 
- stack 0: 0x670
3759	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x670
3760	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x670
- stack 0: 0xF0F1000
3761	 BE	PUSH2	0040	 	 
- stack 2: 0x670
- stack 1: 0xF0F1000
- stack 0: 0x40
3762	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x670
3763	 C2	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3764	 C4	ADD		 	 
- stack 0: 0x674
3765	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3766	 C6	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE00101F1000114FF0F0133000F
3767	 C7	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE00101F1000114FF0F0133000F
- stack 0: 0xF0
3768	 C9	SHR		 	 
- stack 1: 0x674
- stack 0: 0xCB
3769	 CA	JUMP		 	 
- stack 0: 0x674
3770	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x674
3771	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
3772	 CD	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE00101F1000114FF0F0133000F
3773	 CE	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE00101F1000114FF0F0133000F
- stack 0: 0xE0
3774	 D0	SHR		 	 
- stack 1: 0x674
- stack 0: 0xCBFF0F
3775	 D1	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
3776	 D4	AND		 	 
- stack 1: 0x674
- stack 0: 0xFF0F
3777	 D5	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0xFF0F
- stack 0: 0x1
3778	 D7	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
3779	 D8	PUSH2	0040	 	 
- stack 2: 0x674
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
3780	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x674
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
3781	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x674
- stack 0: 0xF0F0F0F
3782	 DD	PUSH2	0040	 	 
- stack 2: 0x674
- stack 1: 0xF0F0F0F
- stack 0: 0x40
3783	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x674
3784	 E1	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3785	 E3	ADD		 	 
- stack 0: 0x678
3786	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3787	 E5	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0xEA000003290001034800020362FFE00101F1000114FF0F0133000F014D0240
3788	 E6	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0xEA000003290001034800020362FFE00101F1000114FF0F0133000F014D0240
- stack 0: 0xF0
3789	 E8	SHR		 	 
- stack 1: 0x678
- stack 0: 0xEA
3790	 E9	JUMP		 	 
- stack 0: 0x678
3791	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x678
3792	 EB	PUSH2	0040	 	 
- stack 1: 0x678
- stack 0: 0x40
3793	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x678
- stack 0: 0xF0F0F0F
3794	 EF	PUSH2	0020	 	 
- stack 2: 0x678
- stack 1: 0xF0F0F0F
- stack 0: 0x20
3795	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x678
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
3796	 F3	OR		 	  ;; # OR
- stack 1: 0x678
- stack 0: 0xFF0FFF0F
3797	 F4	PUSH2	0060	 	 
- stack 2: 0x678
- stack 1: 0xFF0FFF0F
- stack 0: 0x60
3798	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x678
3799	 F8	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3800	 FA	ADD		 	 
- stack 0: 0x67C
3801	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3802	 FC	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x3290001034800020362FFE00101F1000114FF0F0133000F014D024002F00000
3803	 FD	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x3290001034800020362FFE00101F1000114FF0F0133000F014D024002F00000
- stack 0: 0xF0
3804	 FF	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x329
3805	 100	JUMP		 	 
- stack 0: 0x67C
3806	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x67C
3807	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
3808	 32B	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x3290001034800020362FFE00101F1000114FF0F0133000F014D024002F00000
3809	 32C	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x3290001034800020362FFE00101F1000114FF0F0133000F014D024002F00000
- stack 0: 0xE0
3810	 32E	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x3290001
3811	 32F	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x3290001
- stack 0: 0xFFFF
3812	 332	AND		 	 
- stack 1: 0x67C
- stack 0: 0x1
3813	 333	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x1
3814	 335	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x1
3815	 336	PUSH2	0080	 	 
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x80
3816	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x0
3817	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x67C
- stack 0: 0x1
3818	 33B	PUSH2	0080	 	 
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x80
3819	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x67C
3820	 33F	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3821	 341	ADD		 	 
- stack 0: 0x680
3822	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3823	 343	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x34800020362FFE00101F1000114FF0F0133000F014D024002F00000018FFF01
3824	 344	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x34800020362FFE00101F1000114FF0F0133000F014D024002F00000018FFF01
- stack 0: 0xF0
3825	 346	SHR		 	 
- stack 1: 0x680
- stack 0: 0x348
3826	 347	JUMP		 	 
- stack 0: 0x680
3827	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x680
3828	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
3829	 34A	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x34800020362FFE00101F1000114FF0F0133000F014D024002F00000018FFF01
3830	 34B	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x34800020362FFE00101F1000114FF0F0133000F014D024002F00000018FFF01
- stack 0: 0xE0
3831	 34D	SHR		 	 
- stack 1: 0x680
- stack 0: 0x3480002
3832	 34E	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x3480002
- stack 0: 0xFFFF
3833	 351	AND		 	 
- stack 1: 0x680
- stack 0: 0x2
3834	 352	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0x1
3835	 354	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x2
3836	 355	PUSH2	00A0	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0xA0
3837	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x680
3838	 359	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
3839	 35B	ADD		 	 
- stack 0: 0x684
3840	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
3841	 35D	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x362FFE00101F1000114FF0F0133000F014D024002F00000018FFF010099FFF0
3842	 35E	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x362FFE00101F1000114FF0F0133000F014D024002F00000018FFF010099FFF0
- stack 0: 0xF0
3843	 360	SHR		 	 
- stack 1: 0x684
- stack 0: 0x362
3844	 361	JUMP		 	 
- stack 0: 0x684
3845	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x684
3846	 363	PUSH2	0080	 	 
- stack 1: 0x684
- stack 0: 0x80
3847	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x684
- stack 0: 0x1
3848	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3849	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x684
- stack 0: 0x1
3850	 36D	PUSH2	00A0	 	 
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0xA0
3851	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0x2
3852	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x684
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3853	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0x2
3854	 377	SUB		 	 
- stack 1: 0x684
- stack 0: 0x1
3855	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0x380
3856	 37B	JUMPI		 	 
- stack 0: 0x684
3857	 380	JUMPDEST		 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x684
3858	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
3859	 382	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x362FFE00101F1000114FF0F0133000F014D024002F00000018FFF010099FFF0
3860	 383	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x362FFE00101F1000114FF0F0133000F014D024002F00000018FFF010099FFF0
- stack 0: 0xE0
3861	 385	SHR		 	 
- stack 1: 0x684
- stack 0: 0x362FFE0
3862	 386	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x362FFE0
- stack 0: 0xFFFF
3863	 389	AND		 	 
- stack 1: 0x684
- stack 0: 0xFFE0
3864	 38A	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0xFFE0
- stack 0: 0x1
3865	 38C	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3866	 38D	ADD		 	 
- stack 0: 0x664
3867	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x664
- stack 0: 0xFFFFFFFF
3868	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x664
3869	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3870	 395	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x86F0100099FF0003E6000000B8F0F100CBFF0F00EA00000329000103480002
3871	 396	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x86F0100099FF0003E6000000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xF0
3872	 398	SHR		 	 
- stack 1: 0x664
- stack 0: 0x86
3873	 399	JUMP		 	 
- stack 0: 0x664
3874	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x664
3875	 87	PUSH4	ff010000	 	 
- stack 1: 0x664
- stack 0: 0xFF010000
3876	 8C	PUSH2	0020	 	 
- stack 2: 0x664
- stack 1: 0xFF010000
- stack 0: 0x20
3877	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x664
3878	 90	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3879	 92	ADD		 	 
- stack 0: 0x668
3880	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3881	 94	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
3882	 95	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
- stack 0: 0xF0
3883	 97	SHR		 	 
- stack 1: 0x668
- stack 0: 0x99
3884	 98	JUMP		 	 
- stack 0: 0x668
3885	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x668
3886	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
3887	 9B	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
3888	 9C	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x99FF0003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE0
- stack 0: 0xE0
3889	 9E	SHR		 	 
- stack 1: 0x668
- stack 0: 0x99FF00
3890	 9F	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x99FF00
- stack 0: 0xFFFF
3891	 A2	AND		 	 
- stack 1: 0x668
- stack 0: 0xFF00
3892	 A3	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0xFF00
- stack 0: 0x1
3893	 A5	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3894	 A6	PUSH2	0020	 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
3895	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
3896	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x668
- stack 0: 0xFF00FF00
3897	 AB	PUSH2	0020	 	 
- stack 2: 0x668
- stack 1: 0xFF00FF00
- stack 0: 0x20
3898	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x668
3899	 AF	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3900	 B1	ADD		 	 
- stack 0: 0x66C
3901	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3902	 B3	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F100
3903	 B4	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F100
- stack 0: 0xF0
3904	 B6	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x3E6
3905	 B7	JUMP		 	 
- stack 0: 0x66C
3906	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x66C
3907	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
3908	 3E8	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F100
3909	 3E9	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFE00101F100
- stack 0: 0xE0
3910	 3EB	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x3E60000
3911	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x3E60000
- stack 0: 0xFFFF
3912	 3EF	AND		 	 
- stack 1: 0x66C
- stack 0: 0x0
3913	 3F0	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x1
3914	 3F2	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x0
3915	 3F3	POP		 	 
- stack 0: 0x66C
3916	 3F4	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3917	 3F6	ADD		 	 
- stack 0: 0x670
3918	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3919	 3F8	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE00101F1000114FF0F
3920	 3F9	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0xB8F0F100CBFF0F00EA000003290001034800020362FFE00101F1000114FF0F
- stack 0: 0xF0
3921	 3FB	SHR		 	 
- stack 1: 0x670
- stack 0: 0xB8
3922	 3FC	JUMP		 	 
- stack 0: 0x670
3923	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x670
3924	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x670
- stack 0: 0xF0F1000
3925	 BE	PUSH2	0040	 	 
- stack 2: 0x670
- stack 1: 0xF0F1000
- stack 0: 0x40
3926	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x670
3927	 C2	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3928	 C4	ADD		 	 
- stack 0: 0x674
3929	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3930	 C6	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE00101F1000114FF0F0133000F
3931	 C7	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE00101F1000114FF0F0133000F
- stack 0: 0xF0
3932	 C9	SHR		 	 
- stack 1: 0x674
- stack 0: 0xCB
3933	 CA	JUMP		 	 
- stack 0: 0x674
3934	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x674
3935	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
3936	 CD	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xCBFF0F00EA000003290001034800020362FFE00101F1000114FF0F0133000F
3937	 CE	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0xCBFF0F00EA000003290001034800020362FFE00101F1000114FF0F0133000F
- stack 0: 0xE0
3938	 D0	SHR		 	 
- stack 1: 0x674
- stack 0: 0xCBFF0F
3939	 D1	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
3940	 D4	AND		 	 
- stack 1: 0x674
- stack 0: 0xFF0F
3941	 D5	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0xFF0F
- stack 0: 0x1
3942	 D7	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
3943	 D8	PUSH2	0040	 	 
- stack 2: 0x674
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
3944	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x674
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
3945	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x674
- stack 0: 0xF0F0F0F
3946	 DD	PUSH2	0040	 	 
- stack 2: 0x674
- stack 1: 0xF0F0F0F
- stack 0: 0x40
3947	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x674
3948	 E1	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3949	 E3	ADD		 	 
- stack 0: 0x678
3950	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3951	 E5	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0xEA000003290001034800020362FFE00101F1000114FF0F0133000F014D0240
3952	 E6	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0xEA000003290001034800020362FFE00101F1000114FF0F0133000F014D0240
- stack 0: 0xF0
3953	 E8	SHR		 	 
- stack 1: 0x678
- stack 0: 0xEA
3954	 E9	JUMP		 	 
- stack 0: 0x678
3955	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x678
3956	 EB	PUSH2	0040	 	 
- stack 1: 0x678
- stack 0: 0x40
3957	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x678
- stack 0: 0xF0F0F0F
3958	 EF	PUSH2	0020	 	 
- stack 2: 0x678
- stack 1: 0xF0F0F0F
- stack 0: 0x20
3959	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x678
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
3960	 F3	OR		 	  ;; # OR
- stack 1: 0x678
- stack 0: 0xFF0FFF0F
3961	 F4	PUSH2	0060	 	 
- stack 2: 0x678
- stack 1: 0xFF0FFF0F
- stack 0: 0x60
3962	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x678
3963	 F8	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3964	 FA	ADD		 	 
- stack 0: 0x67C
3965	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3966	 FC	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x3290001034800020362FFE00101F1000114FF0F0133000F014D024002F00000
3967	 FD	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x3290001034800020362FFE00101F1000114FF0F0133000F014D024002F00000
- stack 0: 0xF0
3968	 FF	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x329
3969	 100	JUMP		 	 
- stack 0: 0x67C
3970	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x67C
3971	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
3972	 32B	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x3290001034800020362FFE00101F1000114FF0F0133000F014D024002F00000
3973	 32C	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x3290001034800020362FFE00101F1000114FF0F0133000F014D024002F00000
- stack 0: 0xE0
3974	 32E	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x3290001
3975	 32F	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x3290001
- stack 0: 0xFFFF
3976	 332	AND		 	 
- stack 1: 0x67C
- stack 0: 0x1
3977	 333	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x1
3978	 335	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x1
3979	 336	PUSH2	0080	 	 
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x80
3980	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x1
3981	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x67C
- stack 0: 0x2
3982	 33B	PUSH2	0080	 	 
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0x80
3983	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x67C
3984	 33F	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3985	 341	ADD		 	 
- stack 0: 0x680
3986	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3987	 343	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x34800020362FFE00101F1000114FF0F0133000F014D024002F00000018FFF01
3988	 344	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x34800020362FFE00101F1000114FF0F0133000F014D024002F00000018FFF01
- stack 0: 0xF0
3989	 346	SHR		 	 
- stack 1: 0x680
- stack 0: 0x348
3990	 347	JUMP		 	 
- stack 0: 0x680
3991	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x680
3992	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
3993	 34A	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x34800020362FFE00101F1000114FF0F0133000F014D024002F00000018FFF01
3994	 34B	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x34800020362FFE00101F1000114FF0F0133000F014D024002F00000018FFF01
- stack 0: 0xE0
3995	 34D	SHR		 	 
- stack 1: 0x680
- stack 0: 0x3480002
3996	 34E	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x3480002
- stack 0: 0xFFFF
3997	 351	AND		 	 
- stack 1: 0x680
- stack 0: 0x2
3998	 352	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0x1
3999	 354	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x2
4000	 355	PUSH2	00A0	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0xA0
4001	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x680
4002	 359	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4003	 35B	ADD		 	 
- stack 0: 0x684
4004	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4005	 35D	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x362FFE00101F1000114FF0F0133000F014D024002F00000018FFF010099FFF0
4006	 35E	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x362FFE00101F1000114FF0F0133000F014D024002F00000018FFF010099FFF0
- stack 0: 0xF0
4007	 360	SHR		 	 
- stack 1: 0x684
- stack 0: 0x362
4008	 361	JUMP		 	 
- stack 0: 0x684
4009	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x684
4010	 363	PUSH2	0080	 	 
- stack 1: 0x684
- stack 0: 0x80
4011	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x684
- stack 0: 0x2
4012	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4013	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x684
- stack 0: 0x2
4014	 36D	PUSH2	00A0	 	 
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0xA0
4015	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0x2
4016	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x684
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4017	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0x2
4018	 377	SUB		 	 
- stack 1: 0x684
- stack 0: 0x0
4019	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x380
4020	 37B	JUMPI		 	 
- stack 0: 0x684
4021	 37C	PUSH2	039A	 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 1: 0x684
- stack 0: 0x39A
4022	 37F	JUMP		 	 
- stack 0: 0x684
4023	 39A	JUMPDEST		 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x684
4024	 39B	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4025	 39D	ADD		 	 
- stack 0: 0x688
4026	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4027	 39F	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x101F1000114FF0F0133000F014D024002F00000018FFF010099FFF003E60000
4028	 3A0	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x101F1000114FF0F0133000F014D024002F00000018FFF010099FFF003E60000
- stack 0: 0xF0
4029	 3A2	SHR		 	 
- stack 1: 0x688
- stack 0: 0x101
4030	 3A3	JUMP		 	 
- stack 0: 0x688
4031	 101	JUMPDEST		 ;; __riscvimpl_LUI_ff100eb7	  ;; # instr: lui t4,0xff100(ignore imm)
- stack 0: 0x688
4032	 102	PUSH4	ff100000	 	 
- stack 1: 0x688
- stack 0: 0xFF100000
4033	 107	PUSH2	03A0	 	 
- stack 2: 0x688
- stack 1: 0xFF100000
- stack 0: 0x3A0
4034	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x688
4035	 10B	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4036	 10D	ADD		 	 
- stack 0: 0x68C
4037	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4038	 10F	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x114FF0F0133000F014D024002F00000018FFF010099FFF003E6000001A20F0F
4039	 110	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x114FF0F0133000F014D024002F00000018FFF010099FFF003E6000001A20F0F
- stack 0: 0xF0
4040	 112	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x114
4041	 113	JUMP		 	 
- stack 0: 0x68C
4042	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x68C
4043	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
4044	 116	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x114FF0F0133000F014D024002F00000018FFF010099FFF003E6000001A20F0F
4045	 117	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x114FF0F0133000F014D024002F00000018FFF010099FFF003E6000001A20F0F
- stack 0: 0xE0
4046	 119	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x114FF0F
4047	 11A	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x114FF0F
- stack 0: 0xFFFF
4048	 11D	AND		 	 
- stack 1: 0x68C
- stack 0: 0xFF0F
4049	 11E	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0xFF0F
- stack 0: 0x1
4050	 120	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
4051	 121	PUSH2	03A0	 	 
- stack 2: 0x68C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x3A0
4052	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x68C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xFF100000
4053	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x68C
- stack 0: 0xFF0FFF0F
4054	 126	PUSH2	03A0	 	 
- stack 2: 0x68C
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
4055	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x68C
4056	 12A	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4057	 12C	ADD		 	 
- stack 0: 0x690
4058	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4059	 12E	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x133000F014D024002F00000018FFF010099FFF003E6000001A20F0F00CB00F0
4060	 12F	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x133000F014D024002F00000018FFF010099FFF003E6000001A20F0F00CB00F0
- stack 0: 0xF0
4061	 131	SHR		 	 
- stack 1: 0x690
- stack 0: 0x133
4062	 132	JUMP		 	 
- stack 0: 0x690
4063	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x690
4064	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
4065	 135	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x133000F014D024002F00000018FFF010099FFF003E6000001A20F0F00CB00F0
4066	 136	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x133000F014D024002F00000018FFF010099FFF003E6000001A20F0F00CB00F0
- stack 0: 0xE0
4067	 138	SHR		 	 
- stack 1: 0x690
- stack 0: 0x133000F
4068	 139	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x133000F
- stack 0: 0xFFFF
4069	 13C	AND		 	 
- stack 1: 0x690
- stack 0: 0xF
4070	 13D	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0xF
- stack 0: 0x1
4071	 13F	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0xF
4072	 140	PUSH2	0380	 	 
- stack 2: 0x690
- stack 1: 0xF
- stack 0: 0x380
4073	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x690
4074	 144	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4075	 146	ADD		 	 
- stack 0: 0x694
4076	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4077	 148	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x14D024002F00000018FFF010099FFF003E6000001A20F0F00CB00F003E60000
4078	 149	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x14D024002F00000018FFF010099FFF003E6000001A20F0F00CB00F003E60000
- stack 0: 0xF0
4079	 14B	SHR		 	 
- stack 1: 0x694
- stack 0: 0x14D
4080	 14C	JUMP		 	 
- stack 0: 0x694
4081	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x694
4082	 14E	PUSH2	0060	 	 
- stack 1: 0x694
- stack 0: 0x60
4083	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x694
- stack 0: 0xFF0FFF0F
4084	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x694
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
4085	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x694
- stack 0: 0xFF0FFF0F
4086	 158	PUSH2	03A0	 	 
- stack 2: 0x694
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
4087	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x694
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
4088	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x694
- stack 2: 0xFF0FFF0F
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
4089	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x694
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
4090	 162	SUB		 	 
- stack 1: 0x694
- stack 0: 0x0
4091	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x16B
4092	 166	JUMPI		 	 
- stack 0: 0x694
4093	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x694
- stack 0: 0x185
4094	 16A	JUMP		 	 
- stack 0: 0x694
4095	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x694
4096	 186	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4097	 188	ADD		 	 
- stack 0: 0x698
4098	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4099	 18A	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x2F00000018FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA0000
4100	 18B	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x2F00000018FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA0000
- stack 0: 0xF0
4101	 18D	SHR		 	 
- stack 1: 0x698
- stack 0: 0x2F0
4102	 18E	JUMP		 	 
- stack 0: 0x698
4103	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x698
4104	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
4105	 2F2	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x2F00000018FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA0000
4106	 2F3	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x2F00000018FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA0000
- stack 0: 0xE0
4107	 2F5	SHR		 	 
- stack 1: 0x698
- stack 0: 0x2F00000
4108	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x2F00000
- stack 0: 0xFFFF
4109	 2F9	AND		 	 
- stack 1: 0x698
- stack 0: 0x0
4110	 2FA	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x1
4111	 2FC	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x0
4112	 2FD	PUSH2	0080	 	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x80
4113	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x698
4114	 301	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4115	 303	ADD		 	 
- stack 0: 0x69C
4116	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4117	 305	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x18FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA000003290001
4118	 306	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x18FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA000003290001
- stack 0: 0xF0
4119	 308	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x18F
4120	 309	JUMP		 	 
- stack 0: 0x69C
4121	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x69C
4122	 190	PUSH4	0ff01000	 	 
- stack 1: 0x69C
- stack 0: 0xFF01000
4123	 195	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xFF01000
- stack 0: 0x20
4124	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x69C
4125	 199	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4126	 19B	ADD		 	 
- stack 0: 0x6A0
4127	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4128	 19D	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
4129	 19E	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
- stack 0: 0xF0
4130	 1A0	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x99
4131	 1A1	JUMP		 	 
- stack 0: 0x6A0
4132	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x6A0
4133	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4134	 9B	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
4135	 9C	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
- stack 0: 0xE0
4136	 9E	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x99FFF0
4137	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
4138	 A2	AND		 	 
- stack 1: 0x6A0
- stack 0: 0xFFF0
4139	 A3	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0xFFF0
- stack 0: 0x1
4140	 A5	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
4141	 A6	PUSH2	0020	 	 
- stack 2: 0x6A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
4142	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x6A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
4143	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x6A0
- stack 0: 0xFF00FF0
4144	 AB	PUSH2	0020	 	 
- stack 2: 0x6A0
- stack 1: 0xFF00FF0
- stack 0: 0x20
4145	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A0
4146	 AF	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4147	 B1	ADD		 	 
- stack 0: 0x6A4
4148	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4149	 B3	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
4150	 B4	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
4151	 B6	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x3E6
4152	 B7	JUMP		 	 
- stack 0: 0x6A4
4153	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6A4
4154	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
4155	 3E8	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
4156	 3E9	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
- stack 0: 0xE0
4157	 3EB	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x3E60000
4158	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4159	 3EF	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x0
4160	 3F0	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0x1
4161	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x0
4162	 3F3	POP		 	 
- stack 0: 0x6A4
4163	 3F4	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4164	 3F6	ADD		 	 
- stack 0: 0x6A8
4165	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4166	 3F8	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFDC01B5FF10
4167	 3F9	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFDC01B5FF10
- stack 0: 0xF0
4168	 3FB	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x1A2
4169	 3FC	JUMP		 	 
- stack 0: 0x6A8
4170	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x6A8
4171	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x6A8
- stack 0: 0xF0F0F000
4172	 1A8	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0xF0F0F000
- stack 0: 0x40
4173	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A8
4174	 1AC	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4175	 1AE	ADD		 	 
- stack 0: 0x6AC
4176	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4177	 1B0	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
4178	 1B1	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
- stack 0: 0xF0
4179	 1B3	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0xCB
4180	 1B4	JUMP		 	 
- stack 0: 0x6AC
4181	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x6AC
4182	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
4183	 CD	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
4184	 CE	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
- stack 0: 0xE0
4185	 D0	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0xCB00F0
4186	 D1	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
4187	 D4	AND		 	 
- stack 1: 0x6AC
- stack 0: 0xF0
4188	 D5	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0xF0
- stack 0: 0x1
4189	 D7	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0xF0
4190	 D8	PUSH2	0040	 	 
- stack 2: 0x6AC
- stack 1: 0xF0
- stack 0: 0x40
4191	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x6AC
- stack 1: 0xF0
- stack 0: 0xF0F0F000
4192	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x6AC
- stack 0: 0xF0F0F0F0
4193	 DD	PUSH2	0040	 	 
- stack 2: 0x6AC
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
4194	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6AC
4195	 E1	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4196	 E3	ADD		 	 
- stack 0: 0x6B0
4197	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4198	 E5	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330010
4199	 E6	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330010
- stack 0: 0xF0
4200	 E8	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x3E6
4201	 E9	JUMP		 	 
- stack 0: 0x6B0
4202	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6B0
4203	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
4204	 3E8	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330010
4205	 3E9	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330010
- stack 0: 0xE0
4206	 3EB	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x3E60000
4207	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4208	 3EF	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
4209	 3F0	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x0
- stack 0: 0x1
4210	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
4211	 3F3	POP		 	 
- stack 0: 0x6B0
4212	 3F4	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4213	 3F6	ADD		 	 
- stack 0: 0x6B4
4214	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4215	 3F8	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0xEA000003290001034800020362FFDC01B5FF100114FFF001330010014D0204
4216	 3F9	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0xEA000003290001034800020362FFDC01B5FF100114FFF001330010014D0204
- stack 0: 0xF0
4217	 3FB	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0xEA
4218	 3FC	JUMP		 	 
- stack 0: 0x6B4
4219	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x6B4
4220	 EB	PUSH2	0040	 	 
- stack 1: 0x6B4
- stack 0: 0x40
4221	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6B4
- stack 0: 0xF0F0F0F0
4222	 EF	PUSH2	0020	 	 
- stack 2: 0x6B4
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
4223	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6B4
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
4224	 F3	OR		 	  ;; # OR
- stack 1: 0x6B4
- stack 0: 0xFFF0FFF0
4225	 F4	PUSH2	0060	 	 
- stack 2: 0x6B4
- stack 1: 0xFFF0FFF0
- stack 0: 0x60
4226	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6B4
4227	 F8	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4228	 FA	ADD		 	 
- stack 0: 0x6B8
4229	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4230	 FC	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x3290001034800020362FFDC01B5FF100114FFF001330010014D020402F00000
4231	 FD	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x3290001034800020362FFDC01B5FF100114FFF001330010014D020402F00000
- stack 0: 0xF0
4232	 FF	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x329
4233	 100	JUMP		 	 
- stack 0: 0x6B8
4234	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6B8
4235	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
4236	 32B	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x3290001034800020362FFDC01B5FF100114FFF001330010014D020402F00000
4237	 32C	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x3290001034800020362FFDC01B5FF100114FFF001330010014D020402F00000
- stack 0: 0xE0
4238	 32E	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x3290001
4239	 32F	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x3290001
- stack 0: 0xFFFF
4240	 332	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
4241	 333	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
4242	 335	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
4243	 336	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x80
4244	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x0
4245	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x6B8
- stack 0: 0x1
4246	 33B	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x80
4247	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B8
4248	 33F	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4249	 341	ADD		 	 
- stack 0: 0x6BC
4250	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4251	 343	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x34800020362FFDC01B5FF100114FFF001330010014D020402F0000001C80FF0
4252	 344	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x34800020362FFDC01B5FF100114FFF001330010014D020402F0000001C80FF0
- stack 0: 0xF0
4253	 346	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x348
4254	 347	JUMP		 	 
- stack 0: 0x6BC
4255	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6BC
4256	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
4257	 34A	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x34800020362FFDC01B5FF100114FFF001330010014D020402F0000001C80FF0
4258	 34B	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x34800020362FFDC01B5FF100114FFF001330010014D020402F0000001C80FF0
- stack 0: 0xE0
4259	 34D	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x3480002
4260	 34E	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x3480002
- stack 0: 0xFFFF
4261	 351	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
4262	 352	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0x1
4263	 354	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
4264	 355	PUSH2	00A0	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0xA0
4265	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x6BC
4266	 359	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4267	 35B	ADD		 	 
- stack 0: 0x6C0
4268	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4269	 35D	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x362FFDC01B5FF100114FFF001330010014D020402F0000001C80FF0009900FF
4270	 35E	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x362FFDC01B5FF100114FFF001330010014D020402F0000001C80FF0009900FF
- stack 0: 0xF0
4271	 360	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x362
4272	 361	JUMP		 	 
- stack 0: 0x6C0
4273	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x6C0
4274	 363	PUSH2	0080	 	 
- stack 1: 0x6C0
- stack 0: 0x80
4275	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x6C0
- stack 0: 0x1
4276	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4277	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C0
- stack 0: 0x1
4278	 36D	PUSH2	00A0	 	 
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0xA0
4279	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0x2
4280	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4281	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0x2
4282	 377	SUB		 	 
- stack 1: 0x6C0
- stack 0: 0x1
4283	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0x380
4284	 37B	JUMPI		 	 
- stack 0: 0x6C0
4285	 380	JUMPDEST		 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x6C0
4286	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
4287	 382	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x362FFDC01B5FF100114FFF001330010014D020402F0000001C80FF0009900FF
4288	 383	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x362FFDC01B5FF100114FFF001330010014D020402F0000001C80FF0009900FF
- stack 0: 0xE0
4289	 385	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x362FFDC
4290	 386	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x362FFDC
- stack 0: 0xFFFF
4291	 389	AND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFDC
4292	 38A	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0xFFDC
- stack 0: 0x1
4293	 38C	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
4294	 38D	ADD		 	 
- stack 0: 0x69C
4295	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x69C
- stack 0: 0xFFFFFFFF
4296	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x69C
4297	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4298	 395	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x18FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA000003290001
4299	 396	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x18FFF010099FFF003E6000001A20F0F00CB00F003E6000000EA000003290001
- stack 0: 0xF0
4300	 398	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x18F
4301	 399	JUMP		 	 
- stack 0: 0x69C
4302	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x69C
4303	 190	PUSH4	0ff01000	 	 
- stack 1: 0x69C
- stack 0: 0xFF01000
4304	 195	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xFF01000
- stack 0: 0x20
4305	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x69C
4306	 199	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4307	 19B	ADD		 	 
- stack 0: 0x6A0
4308	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4309	 19D	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
4310	 19E	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
- stack 0: 0xF0
4311	 1A0	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x99
4312	 1A1	JUMP		 	 
- stack 0: 0x6A0
4313	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x6A0
4314	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4315	 9B	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
4316	 9C	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x99FFF003E6000001A20F0F00CB00F003E6000000EA00000329000103480002
- stack 0: 0xE0
4317	 9E	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x99FFF0
4318	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
4319	 A2	AND		 	 
- stack 1: 0x6A0
- stack 0: 0xFFF0
4320	 A3	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0xFFF0
- stack 0: 0x1
4321	 A5	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
4322	 A6	PUSH2	0020	 	 
- stack 2: 0x6A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
4323	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x6A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
4324	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x6A0
- stack 0: 0xFF00FF0
4325	 AB	PUSH2	0020	 	 
- stack 2: 0x6A0
- stack 1: 0xFF00FF0
- stack 0: 0x20
4326	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A0
4327	 AF	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4328	 B1	ADD		 	 
- stack 0: 0x6A4
4329	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4330	 B3	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
4331	 B4	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
4332	 B6	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x3E6
4333	 B7	JUMP		 	 
- stack 0: 0x6A4
4334	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6A4
4335	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
4336	 3E8	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
4337	 3E9	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x3E6000001A20F0F00CB00F003E6000000EA000003290001034800020362FFDC
- stack 0: 0xE0
4338	 3EB	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x3E60000
4339	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4340	 3EF	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x0
4341	 3F0	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0x1
4342	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x0
4343	 3F3	POP		 	 
- stack 0: 0x6A4
4344	 3F4	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4345	 3F6	ADD		 	 
- stack 0: 0x6A8
4346	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4347	 3F8	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFDC01B5FF10
4348	 3F9	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x1A20F0F00CB00F003E6000000EA000003290001034800020362FFDC01B5FF10
- stack 0: 0xF0
4349	 3FB	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x1A2
4350	 3FC	JUMP		 	 
- stack 0: 0x6A8
4351	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x6A8
4352	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x6A8
- stack 0: 0xF0F0F000
4353	 1A8	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0xF0F0F000
- stack 0: 0x40
4354	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A8
4355	 1AC	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4356	 1AE	ADD		 	 
- stack 0: 0x6AC
4357	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4358	 1B0	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
4359	 1B1	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
- stack 0: 0xF0
4360	 1B3	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0xCB
4361	 1B4	JUMP		 	 
- stack 0: 0x6AC
4362	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x6AC
4363	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
4364	 CD	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0xCB00F003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
4365	 CE	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0xCB00F003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
- stack 0: 0xE0
4366	 D0	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0xCB00F0
4367	 D1	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
4368	 D4	AND		 	 
- stack 1: 0x6AC
- stack 0: 0xF0
4369	 D5	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0xF0
- stack 0: 0x1
4370	 D7	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0xF0
4371	 D8	PUSH2	0040	 	 
- stack 2: 0x6AC
- stack 1: 0xF0
- stack 0: 0x40
4372	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x6AC
- stack 1: 0xF0
- stack 0: 0xF0F0F000
4373	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x6AC
- stack 0: 0xF0F0F0F0
4374	 DD	PUSH2	0040	 	 
- stack 2: 0x6AC
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
4375	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6AC
4376	 E1	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4377	 E3	ADD		 	 
- stack 0: 0x6B0
4378	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4379	 E5	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330010
4380	 E6	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330010
- stack 0: 0xF0
4381	 E8	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x3E6
4382	 E9	JUMP		 	 
- stack 0: 0x6B0
4383	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6B0
4384	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
4385	 3E8	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330010
4386	 3E9	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330010
- stack 0: 0xE0
4387	 3EB	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x3E60000
4388	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4389	 3EF	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
4390	 3F0	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x0
- stack 0: 0x1
4391	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
4392	 3F3	POP		 	 
- stack 0: 0x6B0
4393	 3F4	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4394	 3F6	ADD		 	 
- stack 0: 0x6B4
4395	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4396	 3F8	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0xEA000003290001034800020362FFDC01B5FF100114FFF001330010014D0204
4397	 3F9	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0xEA000003290001034800020362FFDC01B5FF100114FFF001330010014D0204
- stack 0: 0xF0
4398	 3FB	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0xEA
4399	 3FC	JUMP		 	 
- stack 0: 0x6B4
4400	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x6B4
4401	 EB	PUSH2	0040	 	 
- stack 1: 0x6B4
- stack 0: 0x40
4402	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6B4
- stack 0: 0xF0F0F0F0
4403	 EF	PUSH2	0020	 	 
- stack 2: 0x6B4
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
4404	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6B4
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
4405	 F3	OR		 	  ;; # OR
- stack 1: 0x6B4
- stack 0: 0xFFF0FFF0
4406	 F4	PUSH2	0060	 	 
- stack 2: 0x6B4
- stack 1: 0xFFF0FFF0
- stack 0: 0x60
4407	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6B4
4408	 F8	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4409	 FA	ADD		 	 
- stack 0: 0x6B8
4410	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4411	 FC	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x3290001034800020362FFDC01B5FF100114FFF001330010014D020402F00000
4412	 FD	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x3290001034800020362FFDC01B5FF100114FFF001330010014D020402F00000
- stack 0: 0xF0
4413	 FF	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x329
4414	 100	JUMP		 	 
- stack 0: 0x6B8
4415	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6B8
4416	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
4417	 32B	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x3290001034800020362FFDC01B5FF100114FFF001330010014D020402F00000
4418	 32C	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x3290001034800020362FFDC01B5FF100114FFF001330010014D020402F00000
- stack 0: 0xE0
4419	 32E	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x3290001
4420	 32F	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x3290001
- stack 0: 0xFFFF
4421	 332	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
4422	 333	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
4423	 335	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
4424	 336	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x80
4425	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
4426	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x6B8
- stack 0: 0x2
4427	 33B	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0x80
4428	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B8
4429	 33F	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4430	 341	ADD		 	 
- stack 0: 0x6BC
4431	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4432	 343	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x34800020362FFDC01B5FF100114FFF001330010014D020402F0000001C80FF0
4433	 344	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x34800020362FFDC01B5FF100114FFF001330010014D020402F0000001C80FF0
- stack 0: 0xF0
4434	 346	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x348
4435	 347	JUMP		 	 
- stack 0: 0x6BC
4436	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6BC
4437	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
4438	 34A	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x34800020362FFDC01B5FF100114FFF001330010014D020402F0000001C80FF0
4439	 34B	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x34800020362FFDC01B5FF100114FFF001330010014D020402F0000001C80FF0
- stack 0: 0xE0
4440	 34D	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x3480002
4441	 34E	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x3480002
- stack 0: 0xFFFF
4442	 351	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
4443	 352	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0x1
4444	 354	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
4445	 355	PUSH2	00A0	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0xA0
4446	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x6BC
4447	 359	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4448	 35B	ADD		 	 
- stack 0: 0x6C0
4449	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4450	 35D	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x362FFDC01B5FF100114FFF001330010014D020402F0000001C80FF0009900FF
4451	 35E	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x362FFDC01B5FF100114FFF001330010014D020402F0000001C80FF0009900FF
- stack 0: 0xF0
4452	 360	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x362
4453	 361	JUMP		 	 
- stack 0: 0x6C0
4454	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x6C0
4455	 363	PUSH2	0080	 	 
- stack 1: 0x6C0
- stack 0: 0x80
4456	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x6C0
- stack 0: 0x2
4457	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4458	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C0
- stack 0: 0x2
4459	 36D	PUSH2	00A0	 	 
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0xA0
4460	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0x2
4461	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4462	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0x2
4463	 377	SUB		 	 
- stack 1: 0x6C0
- stack 0: 0x0
4464	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x380
4465	 37B	JUMPI		 	 
- stack 0: 0x6C0
4466	 37C	PUSH2	039A	 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 1: 0x6C0
- stack 0: 0x39A
4467	 37F	JUMP		 	 
- stack 0: 0x6C0
4468	 39A	JUMPDEST		 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x6C0
4469	 39B	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4470	 39D	ADD		 	 
- stack 0: 0x6C4
4471	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4472	 39F	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x1B5FF100114FFF001330010014D020402F0000001C80FF0009900FF03E60000
4473	 3A0	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x1B5FF100114FFF001330010014D020402F0000001C80FF0009900FF03E60000
- stack 0: 0xF0
4474	 3A2	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x1B5
4475	 3A3	JUMP		 	 
- stack 0: 0x6C4
4476	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_fff10eb7	  ;; # instr: lui t4,0xfff10(ignore imm)
- stack 0: 0x6C4
4477	 1B6	PUSH4	fff10000	 	 
- stack 1: 0x6C4
- stack 0: 0xFFF10000
4478	 1BB	PUSH2	03A0	 	 
- stack 2: 0x6C4
- stack 1: 0xFFF10000
- stack 0: 0x3A0
4479	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x6C4
4480	 1BF	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
4481	 1C1	ADD		 	 
- stack 0: 0x6C8
4482	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
4483	 1C3	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x114FFF001330010014D020402F0000001C80FF0009900FF03E6000003E60000
4484	 1C4	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x114FFF001330010014D020402F0000001C80FF0009900FF03E6000003E60000
- stack 0: 0xF0
4485	 1C6	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x114
4486	 1C7	JUMP		 	 
- stack 0: 0x6C8
4487	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x6C8
4488	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
4489	 116	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x114FFF001330010014D020402F0000001C80FF0009900FF03E6000003E60000
4490	 117	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0x114FFF001330010014D020402F0000001C80FF0009900FF03E6000003E60000
- stack 0: 0xE0
4491	 119	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x114FFF0
4492	 11A	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x114FFF0
- stack 0: 0xFFFF
4493	 11D	AND		 	 
- stack 1: 0x6C8
- stack 0: 0xFFF0
4494	 11E	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0xFFF0
- stack 0: 0x1
4495	 120	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
4496	 121	PUSH2	03A0	 	 
- stack 2: 0x6C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
4497	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x6C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFF10000
4498	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x6C8
- stack 0: 0xFFF0FFF0
4499	 126	PUSH2	03A0	 	 
- stack 2: 0x6C8
- stack 1: 0xFFF0FFF0
- stack 0: 0x3A0
4500	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x6C8
4501	 12A	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
4502	 12C	ADD		 	 
- stack 0: 0x6CC
4503	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
4504	 12E	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x1330010014D020402F0000001C80FF0009900FF03E6000003E6000000B8F0F1
4505	 12F	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x1330010014D020402F0000001C80FF0009900FF03E6000003E6000000B8F0F1
- stack 0: 0xF0
4506	 131	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x133
4507	 132	JUMP		 	 
- stack 0: 0x6CC
4508	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6CC
4509	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6CC
- stack 0: 0x6CC
4510	 135	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x1330010014D020402F0000001C80FF0009900FF03E6000003E6000000B8F0F1
4511	 136	PUSH1	E0	 	 
- stack 2: 0x6CC
- stack 1: 0x1330010014D020402F0000001C80FF0009900FF03E6000003E6000000B8F0F1
- stack 0: 0xE0
4512	 138	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x1330010
4513	 139	PUSH2	FFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x1330010
- stack 0: 0xFFFF
4514	 13C	AND		 	 
- stack 1: 0x6CC
- stack 0: 0x10
4515	 13D	PUSH1	01	 	 
- stack 2: 0x6CC
- stack 1: 0x10
- stack 0: 0x1
4516	 13F	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0x10
4517	 140	PUSH2	0380	 	 
- stack 2: 0x6CC
- stack 1: 0x10
- stack 0: 0x380
4518	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x6CC
4519	 144	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
4520	 146	ADD		 	 
- stack 0: 0x6D0
4521	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
4522	 148	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x14D020402F0000001C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F
4523	 149	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x14D020402F0000001C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F
- stack 0: 0xF0
4524	 14B	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x14D
4525	 14C	JUMP		 	 
- stack 0: 0x6D0
4526	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x6D0
4527	 14E	PUSH2	0060	 	 
- stack 1: 0x6D0
- stack 0: 0x60
4528	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x6D0
- stack 0: 0xFFF0FFF0
4529	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D0
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFFFFFFF
4530	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D0
- stack 0: 0xFFF0FFF0
4531	 158	PUSH2	03A0	 	 
- stack 2: 0x6D0
- stack 1: 0xFFF0FFF0
- stack 0: 0x3A0
4532	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x6D0
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFF0FFF0
4533	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D0
- stack 2: 0xFFF0FFF0
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFFFFFFF
4534	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D0
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFF0FFF0
4535	 162	SUB		 	 
- stack 1: 0x6D0
- stack 0: 0x0
4536	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x16B
4537	 166	JUMPI		 	 
- stack 0: 0x6D0
4538	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x6D0
- stack 0: 0x185
4539	 16A	JUMP		 	 
- stack 0: 0x6D0
4540	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x6D0
4541	 186	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
4542	 188	ADD		 	 
- stack 0: 0x6D4
4543	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
4544	 18A	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x2F0000001C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA0000
4545	 18B	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x2F0000001C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
4546	 18D	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x2F0
4547	 18E	JUMP		 	 
- stack 0: 0x6D4
4548	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6D4
4549	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
4550	 2F2	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x2F0000001C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA0000
4551	 2F3	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0x2F0000001C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
4552	 2F5	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x2F00000
4553	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x2F00000
- stack 0: 0xFFFF
4554	 2F9	AND		 	 
- stack 1: 0x6D4
- stack 0: 0x0
4555	 2FA	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0x0
- stack 0: 0x1
4556	 2FC	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0x0
4557	 2FD	PUSH2	0080	 	 
- stack 2: 0x6D4
- stack 1: 0x0
- stack 0: 0x80
4558	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x6D4
4559	 301	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
4560	 303	ADD		 	 
- stack 0: 0x6D8
4561	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
4562	 305	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x1C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA000003290001
4563	 306	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x1C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA000003290001
- stack 0: 0xF0
4564	 308	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x1C8
4565	 309	JUMP		 	 
- stack 0: 0x6D8
4566	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x6D8
4567	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x6D8
- stack 0: 0xFF0000
4568	 1CE	PUSH2	0020	 	 
- stack 2: 0x6D8
- stack 1: 0xFF0000
- stack 0: 0x20
4569	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D8
4570	 1D2	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
4571	 1D4	ADD		 	 
- stack 0: 0x6DC
4572	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
4573	 1D6	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
4574	 1D7	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xF0
4575	 1D9	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x99
4576	 1DA	JUMP		 	 
- stack 0: 0x6DC
4577	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x6DC
4578	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
4579	 9B	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
4580	 9C	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xE0
4581	 9E	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x9900FF
4582	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x9900FF
- stack 0: 0xFFFF
4583	 A2	AND		 	 
- stack 1: 0x6DC
- stack 0: 0xFF
4584	 A3	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0xFF
- stack 0: 0x1
4585	 A5	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0xFF
4586	 A6	PUSH2	0020	 	 
- stack 2: 0x6DC
- stack 1: 0xFF
- stack 0: 0x20
4587	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x6DC
- stack 1: 0xFF
- stack 0: 0xFF0000
4588	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x6DC
- stack 0: 0xFF00FF
4589	 AB	PUSH2	0020	 	 
- stack 2: 0x6DC
- stack 1: 0xFF00FF
- stack 0: 0x20
4590	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x6DC
4591	 AF	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
4592	 B1	ADD		 	 
- stack 0: 0x6E0
4593	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
4594	 B3	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
4595	 B4	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
- stack 0: 0xF0
4596	 B6	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x3E6
4597	 B7	JUMP		 	 
- stack 0: 0x6E0
4598	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E0
4599	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
4600	 3E8	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
4601	 3E9	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
- stack 0: 0xE0
4602	 3EB	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x3E60000
4603	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4604	 3EF	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4605	 3F0	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
4606	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4607	 3F3	POP		 	 
- stack 0: 0x6E0
4608	 3F4	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
4609	 3F6	ADD		 	 
- stack 0: 0x6E4
4610	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
4611	 3F8	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DBFFF1
4612	 3F9	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xF0
4613	 3FB	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x3E6
4614	 3FC	JUMP		 	 
- stack 0: 0x6E4
4615	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E4
4616	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
4617	 3E8	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DBFFF1
4618	 3E9	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xE0
4619	 3EB	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x3E60000
4620	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4621	 3EF	AND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
4622	 3F0	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x1
4623	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
4624	 3F3	POP		 	 
- stack 0: 0x6E4
4625	 3F4	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4626	 3F6	ADD		 	 
- stack 0: 0x6E8
4627	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
4628	 3F8	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0xB8F0F100CBFF0F00EA000003290001034800020362FFDC01DBFFF10114FFFF
4629	 3F9	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0xB8F0F100CBFF0F00EA000003290001034800020362FFDC01DBFFF10114FFFF
- stack 0: 0xF0
4630	 3FB	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0xB8
4631	 3FC	JUMP		 	 
- stack 0: 0x6E8
4632	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x6E8
4633	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x6E8
- stack 0: 0xF0F1000
4634	 BE	PUSH2	0040	 	 
- stack 2: 0x6E8
- stack 1: 0xF0F1000
- stack 0: 0x40
4635	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x6E8
4636	 C2	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4637	 C4	ADD		 	 
- stack 0: 0x6EC
4638	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4639	 C6	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xCBFF0F00EA000003290001034800020362FFDC01DBFFF10114FFFF01330011
4640	 C7	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0xCBFF0F00EA000003290001034800020362FFDC01DBFFF10114FFFF01330011
- stack 0: 0xF0
4641	 C9	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xCB
4642	 CA	JUMP		 	 
- stack 0: 0x6EC
4643	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x6EC
4644	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
4645	 CD	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xCBFF0F00EA000003290001034800020362FFDC01DBFFF10114FFFF01330011
4646	 CE	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0xCBFF0F00EA000003290001034800020362FFDC01DBFFF10114FFFF01330011
- stack 0: 0xE0
4647	 D0	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xCBFF0F
4648	 D1	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
4649	 D4	AND		 	 
- stack 1: 0x6EC
- stack 0: 0xFF0F
4650	 D5	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0xFF0F
- stack 0: 0x1
4651	 D7	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
4652	 D8	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
4653	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x6EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
4654	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x6EC
- stack 0: 0xF0F0F0F
4655	 DD	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0xF0F0F0F
- stack 0: 0x40
4656	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6EC
4657	 E1	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
4658	 E3	ADD		 	 
- stack 0: 0x6F0
4659	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
4660	 E5	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF01330011014D01C8
4661	 E6	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF01330011014D01C8
- stack 0: 0xF0
4662	 E8	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0xEA
4663	 E9	JUMP		 	 
- stack 0: 0x6F0
4664	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x6F0
4665	 EB	PUSH2	0040	 	 
- stack 1: 0x6F0
- stack 0: 0x40
4666	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6F0
- stack 0: 0xF0F0F0F
4667	 EF	PUSH2	0020	 	 
- stack 2: 0x6F0
- stack 1: 0xF0F0F0F
- stack 0: 0x20
4668	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6F0
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
4669	 F3	OR		 	  ;; # OR
- stack 1: 0x6F0
- stack 0: 0xFFF0FFF
4670	 F4	PUSH2	0060	 	 
- stack 2: 0x6F0
- stack 1: 0xFFF0FFF
- stack 0: 0x60
4671	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6F0
4672	 F8	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
4673	 FA	ADD		 	 
- stack 0: 0x6F4
4674	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
4675	 FC	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF01330011014D01C802F00000
4676	 FD	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF01330011014D01C802F00000
- stack 0: 0xF0
4677	 FF	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x329
4678	 100	JUMP		 	 
- stack 0: 0x6F4
4679	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6F4
4680	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
4681	 32B	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF01330011014D01C802F00000
4682	 32C	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF01330011014D01C802F00000
- stack 0: 0xE0
4683	 32E	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x3290001
4684	 32F	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x3290001
- stack 0: 0xFFFF
4685	 332	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x1
4686	 333	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x1
4687	 335	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x1
4688	 336	PUSH2	0080	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x80
4689	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x0
4690	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x6F4
- stack 0: 0x1
4691	 33B	PUSH2	0080	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x80
4692	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x6F4
4693	 33F	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
4694	 341	ADD		 	 
- stack 0: 0x6F8
4695	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
4696	 343	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF01330011014D01C802F0000000B8F0F1
4697	 344	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF01330011014D01C802F0000000B8F0F1
- stack 0: 0xF0
4698	 346	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x348
4699	 347	JUMP		 	 
- stack 0: 0x6F8
4700	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6F8
4701	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F8
- stack 0: 0x6F8
4702	 34A	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF01330011014D01C802F0000000B8F0F1
4703	 34B	PUSH1	E0	 	 
- stack 2: 0x6F8
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF01330011014D01C802F0000000B8F0F1
- stack 0: 0xE0
4704	 34D	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x3480002
4705	 34E	PUSH2	FFFF	 	 
- stack 2: 0x6F8
- stack 1: 0x3480002
- stack 0: 0xFFFF
4706	 351	AND		 	 
- stack 1: 0x6F8
- stack 0: 0x2
4707	 352	PUSH1	01	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0x1
4708	 354	SIGNEXTEND		 	 
- stack 1: 0x6F8
- stack 0: 0x2
4709	 355	PUSH2	00A0	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0xA0
4710	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x6F8
4711	 359	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
4712	 35B	ADD		 	 
- stack 0: 0x6FC
4713	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
4714	 35D	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x362FFDC01DBFFF10114FFFF01330011014D01C802F0000000B8F0F100CBFF0F
4715	 35E	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x362FFDC01DBFFF10114FFFF01330011014D01C802F0000000B8F0F100CBFF0F
- stack 0: 0xF0
4716	 360	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x362
4717	 361	JUMP		 	 
- stack 0: 0x6FC
4718	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x6FC
4719	 363	PUSH2	0080	 	 
- stack 1: 0x6FC
- stack 0: 0x80
4720	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x6FC
- stack 0: 0x1
4721	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4722	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6FC
- stack 0: 0x1
4723	 36D	PUSH2	00A0	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0xA0
4724	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x2
4725	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6FC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4726	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x2
4727	 377	SUB		 	 
- stack 1: 0x6FC
- stack 0: 0x1
4728	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x380
4729	 37B	JUMPI		 	 
- stack 0: 0x6FC
4730	 380	JUMPDEST		 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x6FC
4731	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6FC
- stack 0: 0x6FC
4732	 382	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x362FFDC01DBFFF10114FFFF01330011014D01C802F0000000B8F0F100CBFF0F
4733	 383	PUSH1	E0	 	 
- stack 2: 0x6FC
- stack 1: 0x362FFDC01DBFFF10114FFFF01330011014D01C802F0000000B8F0F100CBFF0F
- stack 0: 0xE0
4734	 385	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x362FFDC
4735	 386	PUSH2	FFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x362FFDC
- stack 0: 0xFFFF
4736	 389	AND		 	 
- stack 1: 0x6FC
- stack 0: 0xFFDC
4737	 38A	PUSH1	01	 	 
- stack 2: 0x6FC
- stack 1: 0xFFDC
- stack 0: 0x1
4738	 38C	SIGNEXTEND		 	 
- stack 1: 0x6FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
4739	 38D	ADD		 	 
- stack 0: 0x6D8
4740	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6D8
- stack 0: 0xFFFFFFFF
4741	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6D8
4742	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
4743	 395	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x1C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA000003290001
4744	 396	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x1C80FF0009900FF03E6000003E6000000B8F0F100CBFF0F00EA000003290001
- stack 0: 0xF0
4745	 398	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x1C8
4746	 399	JUMP		 	 
- stack 0: 0x6D8
4747	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x6D8
4748	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x6D8
- stack 0: 0xFF0000
4749	 1CE	PUSH2	0020	 	 
- stack 2: 0x6D8
- stack 1: 0xFF0000
- stack 0: 0x20
4750	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D8
4751	 1D2	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
4752	 1D4	ADD		 	 
- stack 0: 0x6DC
4753	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
4754	 1D6	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
4755	 1D7	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xF0
4756	 1D9	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x99
4757	 1DA	JUMP		 	 
- stack 0: 0x6DC
4758	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x6DC
4759	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
4760	 9B	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
4761	 9C	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x9900FF03E6000003E6000000B8F0F100CBFF0F00EA00000329000103480002
- stack 0: 0xE0
4762	 9E	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x9900FF
4763	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x9900FF
- stack 0: 0xFFFF
4764	 A2	AND		 	 
- stack 1: 0x6DC
- stack 0: 0xFF
4765	 A3	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0xFF
- stack 0: 0x1
4766	 A5	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0xFF
4767	 A6	PUSH2	0020	 	 
- stack 2: 0x6DC
- stack 1: 0xFF
- stack 0: 0x20
4768	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x6DC
- stack 1: 0xFF
- stack 0: 0xFF0000
4769	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x6DC
- stack 0: 0xFF00FF
4770	 AB	PUSH2	0020	 	 
- stack 2: 0x6DC
- stack 1: 0xFF00FF
- stack 0: 0x20
4771	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x6DC
4772	 AF	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
4773	 B1	ADD		 	 
- stack 0: 0x6E0
4774	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
4775	 B3	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
4776	 B4	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
- stack 0: 0xF0
4777	 B6	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x3E6
4778	 B7	JUMP		 	 
- stack 0: 0x6E0
4779	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E0
4780	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
4781	 3E8	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
4782	 3E9	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x3E6000003E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC
- stack 0: 0xE0
4783	 3EB	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x3E60000
4784	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4785	 3EF	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4786	 3F0	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
4787	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4788	 3F3	POP		 	 
- stack 0: 0x6E0
4789	 3F4	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
4790	 3F6	ADD		 	 
- stack 0: 0x6E4
4791	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
4792	 3F8	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DBFFF1
4793	 3F9	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xF0
4794	 3FB	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x3E6
4795	 3FC	JUMP		 	 
- stack 0: 0x6E4
4796	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E4
4797	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
4798	 3E8	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DBFFF1
4799	 3E9	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x3E6000000B8F0F100CBFF0F00EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xE0
4800	 3EB	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x3E60000
4801	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x3E60000
- stack 0: 0xFFFF
4802	 3EF	AND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
4803	 3F0	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x1
4804	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
4805	 3F3	POP		 	 
- stack 0: 0x6E4
4806	 3F4	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4807	 3F6	ADD		 	 
- stack 0: 0x6E8
4808	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
4809	 3F8	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0xB8F0F100CBFF0F00EA000003290001034800020362FFDC01DBFFF10114FFFF
4810	 3F9	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0xB8F0F100CBFF0F00EA000003290001034800020362FFDC01DBFFF10114FFFF
- stack 0: 0xF0
4811	 3FB	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0xB8
4812	 3FC	JUMP		 	 
- stack 0: 0x6E8
4813	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x6E8
4814	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x6E8
- stack 0: 0xF0F1000
4815	 BE	PUSH2	0040	 	 
- stack 2: 0x6E8
- stack 1: 0xF0F1000
- stack 0: 0x40
4816	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x6E8
4817	 C2	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4818	 C4	ADD		 	 
- stack 0: 0x6EC
4819	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4820	 C6	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xCBFF0F00EA000003290001034800020362FFDC01DBFFF10114FFFF01330011
4821	 C7	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0xCBFF0F00EA000003290001034800020362FFDC01DBFFF10114FFFF01330011
- stack 0: 0xF0
4822	 C9	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xCB
4823	 CA	JUMP		 	 
- stack 0: 0x6EC
4824	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x6EC
4825	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
4826	 CD	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xCBFF0F00EA000003290001034800020362FFDC01DBFFF10114FFFF01330011
4827	 CE	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0xCBFF0F00EA000003290001034800020362FFDC01DBFFF10114FFFF01330011
- stack 0: 0xE0
4828	 D0	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xCBFF0F
4829	 D1	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
4830	 D4	AND		 	 
- stack 1: 0x6EC
- stack 0: 0xFF0F
4831	 D5	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0xFF0F
- stack 0: 0x1
4832	 D7	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
4833	 D8	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
4834	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x6EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
4835	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x6EC
- stack 0: 0xF0F0F0F
4836	 DD	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0xF0F0F0F
- stack 0: 0x40
4837	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6EC
4838	 E1	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
4839	 E3	ADD		 	 
- stack 0: 0x6F0
4840	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
4841	 E5	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF01330011014D01C8
4842	 E6	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF01330011014D01C8
- stack 0: 0xF0
4843	 E8	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0xEA
4844	 E9	JUMP		 	 
- stack 0: 0x6F0
4845	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x6F0
4846	 EB	PUSH2	0040	 	 
- stack 1: 0x6F0
- stack 0: 0x40
4847	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6F0
- stack 0: 0xF0F0F0F
4848	 EF	PUSH2	0020	 	 
- stack 2: 0x6F0
- stack 1: 0xF0F0F0F
- stack 0: 0x20
4849	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6F0
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
4850	 F3	OR		 	  ;; # OR
- stack 1: 0x6F0
- stack 0: 0xFFF0FFF
4851	 F4	PUSH2	0060	 	 
- stack 2: 0x6F0
- stack 1: 0xFFF0FFF
- stack 0: 0x60
4852	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6F0
4853	 F8	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
4854	 FA	ADD		 	 
- stack 0: 0x6F4
4855	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
4856	 FC	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF01330011014D01C802F00000
4857	 FD	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF01330011014D01C802F00000
- stack 0: 0xF0
4858	 FF	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x329
4859	 100	JUMP		 	 
- stack 0: 0x6F4
4860	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6F4
4861	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
4862	 32B	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF01330011014D01C802F00000
4863	 32C	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF01330011014D01C802F00000
- stack 0: 0xE0
4864	 32E	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x3290001
4865	 32F	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x3290001
- stack 0: 0xFFFF
4866	 332	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x1
4867	 333	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x1
4868	 335	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x1
4869	 336	PUSH2	0080	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x80
4870	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x1
4871	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x6F4
- stack 0: 0x2
4872	 33B	PUSH2	0080	 	 
- stack 2: 0x6F4
- stack 1: 0x2
- stack 0: 0x80
4873	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x6F4
4874	 33F	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
4875	 341	ADD		 	 
- stack 0: 0x6F8
4876	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
4877	 343	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF01330011014D01C802F0000000B8F0F1
4878	 344	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF01330011014D01C802F0000000B8F0F1
- stack 0: 0xF0
4879	 346	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x348
4880	 347	JUMP		 	 
- stack 0: 0x6F8
4881	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6F8
4882	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F8
- stack 0: 0x6F8
4883	 34A	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF01330011014D01C802F0000000B8F0F1
4884	 34B	PUSH1	E0	 	 
- stack 2: 0x6F8
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF01330011014D01C802F0000000B8F0F1
- stack 0: 0xE0
4885	 34D	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x3480002
4886	 34E	PUSH2	FFFF	 	 
- stack 2: 0x6F8
- stack 1: 0x3480002
- stack 0: 0xFFFF
4887	 351	AND		 	 
- stack 1: 0x6F8
- stack 0: 0x2
4888	 352	PUSH1	01	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0x1
4889	 354	SIGNEXTEND		 	 
- stack 1: 0x6F8
- stack 0: 0x2
4890	 355	PUSH2	00A0	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0xA0
4891	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x6F8
4892	 359	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
4893	 35B	ADD		 	 
- stack 0: 0x6FC
4894	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
4895	 35D	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x362FFDC01DBFFF10114FFFF01330011014D01C802F0000000B8F0F100CBFF0F
4896	 35E	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x362FFDC01DBFFF10114FFFF01330011014D01C802F0000000B8F0F100CBFF0F
- stack 0: 0xF0
4897	 360	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x362
4898	 361	JUMP		 	 
- stack 0: 0x6FC
4899	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x6FC
4900	 363	PUSH2	0080	 	 
- stack 1: 0x6FC
- stack 0: 0x80
4901	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x6FC
- stack 0: 0x2
4902	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4903	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6FC
- stack 0: 0x2
4904	 36D	PUSH2	00A0	 	 
- stack 2: 0x6FC
- stack 1: 0x2
- stack 0: 0xA0
4905	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x6FC
- stack 1: 0x2
- stack 0: 0x2
4906	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6FC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4907	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6FC
- stack 1: 0x2
- stack 0: 0x2
4908	 377	SUB		 	 
- stack 1: 0x6FC
- stack 0: 0x0
4909	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x6FC
- stack 1: 0x0
- stack 0: 0x380
4910	 37B	JUMPI		 	 
- stack 0: 0x6FC
4911	 37C	PUSH2	039A	 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 1: 0x6FC
- stack 0: 0x39A
4912	 37F	JUMP		 	 
- stack 0: 0x6FC
4913	 39A	JUMPDEST		 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x6FC
4914	 39B	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
4915	 39D	ADD		 	 
- stack 0: 0x700
4916	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
4917	 39F	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x1DBFFF10114FFFF01330011014D01C802F0000000B8F0F100CBFF0F0086F010
4918	 3A0	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x1DBFFF10114FFFF01330011014D01C802F0000000B8F0F100CBFF0F0086F010
- stack 0: 0xF0
4919	 3A2	SHR		 	 
- stack 1: 0x700
- stack 0: 0x1DB
4920	 3A3	JUMP		 	 
- stack 0: 0x700
4921	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_fff1eb7	  ;; # instr: lui t4,0xfff1(ignore imm)
- stack 0: 0x700
4922	 1DC	PUSH4	0fff1000	 	 
- stack 1: 0x700
- stack 0: 0xFFF1000
4923	 1E1	PUSH2	03A0	 	 
- stack 2: 0x700
- stack 1: 0xFFF1000
- stack 0: 0x3A0
4924	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x700
4925	 1E5	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
4926	 1E7	ADD		 	 
- stack 0: 0x704
4927	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
4928	 1E9	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x114FFFF01330011014D01C802F0000000B8F0F100CBFF0F0086F0100099FF00
4929	 1EA	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x114FFFF01330011014D01C802F0000000B8F0F100CBFF0F0086F0100099FF00
- stack 0: 0xF0
4930	 1EC	SHR		 	 
- stack 1: 0x704
- stack 0: 0x114
4931	 1ED	JUMP		 	 
- stack 0: 0x704
4932	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x704
4933	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x704
- stack 0: 0x704
4934	 116	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x114FFFF01330011014D01C802F0000000B8F0F100CBFF0F0086F0100099FF00
4935	 117	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0x114FFFF01330011014D01C802F0000000B8F0F100CBFF0F0086F0100099FF00
- stack 0: 0xE0
4936	 119	SHR		 	 
- stack 1: 0x704
- stack 0: 0x114FFFF
4937	 11A	PUSH2	FFFF	 	 
- stack 2: 0x704
- stack 1: 0x114FFFF
- stack 0: 0xFFFF
4938	 11D	AND		 	 
- stack 1: 0x704
- stack 0: 0xFFFF
4939	 11E	PUSH1	01	 	 
- stack 2: 0x704
- stack 1: 0xFFFF
- stack 0: 0x1
4940	 120	SIGNEXTEND		 	 
- stack 1: 0x704
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4941	 121	PUSH2	03A0	 	 
- stack 2: 0x704
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
4942	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x704
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFF1000
4943	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x704
- stack 0: 0xFFF0FFF
4944	 126	PUSH2	03A0	 	 
- stack 2: 0x704
- stack 1: 0xFFF0FFF
- stack 0: 0x3A0
4945	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x704
4946	 12A	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
4947	 12C	ADD		 	 
- stack 0: 0x708
4948	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
4949	 12E	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x1330011014D01C802F0000000B8F0F100CBFF0F0086F0100099FF0000EA0000
4950	 12F	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x1330011014D01C802F0000000B8F0F100CBFF0F0086F0100099FF0000EA0000
- stack 0: 0xF0
4951	 131	SHR		 	 
- stack 1: 0x708
- stack 0: 0x133
4952	 132	JUMP		 	 
- stack 0: 0x708
4953	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x708
4954	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x708
- stack 0: 0x708
4955	 135	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x1330011014D01C802F0000000B8F0F100CBFF0F0086F0100099FF0000EA0000
4956	 136	PUSH1	E0	 	 
- stack 2: 0x708
- stack 1: 0x1330011014D01C802F0000000B8F0F100CBFF0F0086F0100099FF0000EA0000
- stack 0: 0xE0
4957	 138	SHR		 	 
- stack 1: 0x708
- stack 0: 0x1330011
4958	 139	PUSH2	FFFF	 	 
- stack 2: 0x708
- stack 1: 0x1330011
- stack 0: 0xFFFF
4959	 13C	AND		 	 
- stack 1: 0x708
- stack 0: 0x11
4960	 13D	PUSH1	01	 	 
- stack 2: 0x708
- stack 1: 0x11
- stack 0: 0x1
4961	 13F	SIGNEXTEND		 	 
- stack 1: 0x708
- stack 0: 0x11
4962	 140	PUSH2	0380	 	 
- stack 2: 0x708
- stack 1: 0x11
- stack 0: 0x380
4963	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x708
4964	 144	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
4965	 146	ADD		 	 
- stack 0: 0x70C
4966	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
4967	 148	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x14D01C802F0000000B8F0F100CBFF0F0086F0100099FF0000EA000003290001
4968	 149	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0x14D01C802F0000000B8F0F100CBFF0F0086F0100099FF0000EA000003290001
- stack 0: 0xF0
4969	 14B	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x14D
4970	 14C	JUMP		 	 
- stack 0: 0x70C
4971	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x70C
4972	 14E	PUSH2	0060	 	 
- stack 1: 0x70C
- stack 0: 0x60
4973	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x70C
- stack 0: 0xFFF0FFF
4974	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x70C
- stack 1: 0xFFF0FFF
- stack 0: 0xFFFFFFFF
4975	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x70C
- stack 0: 0xFFF0FFF
4976	 158	PUSH2	03A0	 	 
- stack 2: 0x70C
- stack 1: 0xFFF0FFF
- stack 0: 0x3A0
4977	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x70C
- stack 1: 0xFFF0FFF
- stack 0: 0xFFF0FFF
4978	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x70C
- stack 2: 0xFFF0FFF
- stack 1: 0xFFF0FFF
- stack 0: 0xFFFFFFFF
4979	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x70C
- stack 1: 0xFFF0FFF
- stack 0: 0xFFF0FFF
4980	 162	SUB		 	 
- stack 1: 0x70C
- stack 0: 0x0
4981	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x70C
- stack 1: 0x0
- stack 0: 0x16B
4982	 166	JUMPI		 	 
- stack 0: 0x70C
4983	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x70C
- stack 0: 0x185
4984	 16A	JUMP		 	 
- stack 0: 0x70C
4985	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x70C
4986	 186	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
4987	 188	ADD		 	 
- stack 0: 0x710
4988	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
4989	 18A	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x2F0000000B8F0F100CBFF0F0086F0100099FF0000EA00000329000103480002
4990	 18B	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0x2F0000000B8F0F100CBFF0F0086F0100099FF0000EA00000329000103480002
- stack 0: 0xF0
4991	 18D	SHR		 	 
- stack 1: 0x710
- stack 0: 0x2F0
4992	 18E	JUMP		 	 
- stack 0: 0x710
4993	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x710
4994	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x710
- stack 0: 0x710
4995	 2F2	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x2F0000000B8F0F100CBFF0F0086F0100099FF0000EA00000329000103480002
4996	 2F3	PUSH1	E0	 	 
- stack 2: 0x710
- stack 1: 0x2F0000000B8F0F100CBFF0F0086F0100099FF0000EA00000329000103480002
- stack 0: 0xE0
4997	 2F5	SHR		 	 
- stack 1: 0x710
- stack 0: 0x2F00000
4998	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x710
- stack 1: 0x2F00000
- stack 0: 0xFFFF
4999	 2F9	AND		 	 
- stack 1: 0x710
- stack 0: 0x0
5000	 2FA	PUSH1	01	 	 
- stack 2: 0x710
- stack 1: 0x0
- stack 0: 0x1
5001	 2FC	SIGNEXTEND		 	 
- stack 1: 0x710
- stack 0: 0x0
5002	 2FD	PUSH2	0080	 	 
- stack 2: 0x710
- stack 1: 0x0
- stack 0: 0x80
5003	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x710
5004	 301	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
5005	 303	ADD		 	 
- stack 0: 0x714
5006	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
5007	 305	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0xB8F0F100CBFF0F0086F0100099FF0000EA000003290001034800020362FFE4
5008	 306	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0xB8F0F100CBFF0F0086F0100099FF0000EA000003290001034800020362FFE4
- stack 0: 0xF0
5009	 308	SHR		 	 
- stack 1: 0x714
- stack 0: 0xB8
5010	 309	JUMP		 	 
- stack 0: 0x714
5011	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x714
5012	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x714
- stack 0: 0xF0F1000
5013	 BE	PUSH2	0040	 	 
- stack 2: 0x714
- stack 1: 0xF0F1000
- stack 0: 0x40
5014	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x714
5015	 C2	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
5016	 C4	ADD		 	 
- stack 0: 0x718
5017	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
5018	 C6	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F100
5019	 C7	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F100
- stack 0: 0xF0
5020	 C9	SHR		 	 
- stack 1: 0x718
- stack 0: 0xCB
5021	 CA	JUMP		 	 
- stack 0: 0x718
5022	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x718
5023	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
5024	 CD	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F100
5025	 CE	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F100
- stack 0: 0xE0
5026	 D0	SHR		 	 
- stack 1: 0x718
- stack 0: 0xCBFF0F
5027	 D1	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
5028	 D4	AND		 	 
- stack 1: 0x718
- stack 0: 0xFF0F
5029	 D5	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0xFF0F
- stack 0: 0x1
5030	 D7	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
5031	 D8	PUSH2	0040	 	 
- stack 2: 0x718
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
5032	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x718
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
5033	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x718
- stack 0: 0xF0F0F0F
5034	 DD	PUSH2	0040	 	 
- stack 2: 0x718
- stack 1: 0xF0F0F0F
- stack 0: 0x40
5035	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x718
5036	 E1	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
5037	 E3	ADD		 	 
- stack 0: 0x71C
5038	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
5039	 E5	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x86F0100099FF0000EA000003290001034800020362FFE40101F1000114FF0F
5040	 E6	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x86F0100099FF0000EA000003290001034800020362FFE40101F1000114FF0F
- stack 0: 0xF0
5041	 E8	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x86
5042	 E9	JUMP		 	 
- stack 0: 0x71C
5043	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x71C
5044	 87	PUSH4	ff010000	 	 
- stack 1: 0x71C
- stack 0: 0xFF010000
5045	 8C	PUSH2	0020	 	 
- stack 2: 0x71C
- stack 1: 0xFF010000
- stack 0: 0x20
5046	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x71C
5047	 90	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
5048	 92	ADD		 	 
- stack 0: 0x720
5049	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
5050	 94	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x99FF0000EA000003290001034800020362FFE40101F1000114FF0F01330012
5051	 95	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0x99FF0000EA000003290001034800020362FFE40101F1000114FF0F01330012
- stack 0: 0xF0
5052	 97	SHR		 	 
- stack 1: 0x720
- stack 0: 0x99
5053	 98	JUMP		 	 
- stack 0: 0x720
5054	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x720
5055	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x720
- stack 0: 0x720
5056	 9B	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x99FF0000EA000003290001034800020362FFE40101F1000114FF0F01330012
5057	 9C	PUSH1	E0	 	 
- stack 2: 0x720
- stack 1: 0x99FF0000EA000003290001034800020362FFE40101F1000114FF0F01330012
- stack 0: 0xE0
5058	 9E	SHR		 	 
- stack 1: 0x720
- stack 0: 0x99FF00
5059	 9F	PUSH2	FFFF	 	 
- stack 2: 0x720
- stack 1: 0x99FF00
- stack 0: 0xFFFF
5060	 A2	AND		 	 
- stack 1: 0x720
- stack 0: 0xFF00
5061	 A3	PUSH1	01	 	 
- stack 2: 0x720
- stack 1: 0xFF00
- stack 0: 0x1
5062	 A5	SIGNEXTEND		 	 
- stack 1: 0x720
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
5063	 A6	PUSH2	0020	 	 
- stack 2: 0x720
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
5064	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x720
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
5065	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x720
- stack 0: 0xFF00FF00
5066	 AB	PUSH2	0020	 	 
- stack 2: 0x720
- stack 1: 0xFF00FF00
- stack 0: 0x20
5067	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x720
5068	 AF	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
5069	 B1	ADD		 	 
- stack 0: 0x724
5070	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
5071	 B3	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0xEA000003290001034800020362FFE40101F1000114FF0F01330012014D0194
5072	 B4	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0xEA000003290001034800020362FFE40101F1000114FF0F01330012014D0194
- stack 0: 0xF0
5073	 B6	SHR		 	 
- stack 1: 0x724
- stack 0: 0xEA
5074	 B7	JUMP		 	 
- stack 0: 0x724
5075	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x724
5076	 EB	PUSH2	0040	 	 
- stack 1: 0x724
- stack 0: 0x40
5077	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x724
- stack 0: 0xF0F0F0F
5078	 EF	PUSH2	0020	 	 
- stack 2: 0x724
- stack 1: 0xF0F0F0F
- stack 0: 0x20
5079	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x724
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
5080	 F3	OR		 	  ;; # OR
- stack 1: 0x724
- stack 0: 0xFF0FFF0F
5081	 F4	PUSH2	0060	 	 
- stack 2: 0x724
- stack 1: 0xFF0FFF0F
- stack 0: 0x60
5082	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x724
5083	 F8	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
5084	 FA	ADD		 	 
- stack 0: 0x728
5085	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
5086	 FC	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x3290001034800020362FFE40101F1000114FF0F01330012014D019402F00000
5087	 FD	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x3290001034800020362FFE40101F1000114FF0F01330012014D019402F00000
- stack 0: 0xF0
5088	 FF	SHR		 	 
- stack 1: 0x728
- stack 0: 0x329
5089	 100	JUMP		 	 
- stack 0: 0x728
5090	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x728
5091	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x728
- stack 0: 0x728
5092	 32B	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x3290001034800020362FFE40101F1000114FF0F01330012014D019402F00000
5093	 32C	PUSH1	E0	 	 
- stack 2: 0x728
- stack 1: 0x3290001034800020362FFE40101F1000114FF0F01330012014D019402F00000
- stack 0: 0xE0
5094	 32E	SHR		 	 
- stack 1: 0x728
- stack 0: 0x3290001
5095	 32F	PUSH2	FFFF	 	 
- stack 2: 0x728
- stack 1: 0x3290001
- stack 0: 0xFFFF
5096	 332	AND		 	 
- stack 1: 0x728
- stack 0: 0x1
5097	 333	PUSH1	01	 	 
- stack 2: 0x728
- stack 1: 0x1
- stack 0: 0x1
5098	 335	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0x1
5099	 336	PUSH2	0080	 	 
- stack 2: 0x728
- stack 1: 0x1
- stack 0: 0x80
5100	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x728
- stack 1: 0x1
- stack 0: 0x0
5101	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x728
- stack 0: 0x1
5102	 33B	PUSH2	0080	 	 
- stack 2: 0x728
- stack 1: 0x1
- stack 0: 0x80
5103	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x728
5104	 33F	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
5105	 341	ADD		 	 
- stack 0: 0x72C
5106	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
5107	 343	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x34800020362FFE40101F1000114FF0F01330012014D019402F0000001A20F0F
5108	 344	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x34800020362FFE40101F1000114FF0F01330012014D019402F0000001A20F0F
- stack 0: 0xF0
5109	 346	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x348
5110	 347	JUMP		 	 
- stack 0: 0x72C
5111	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x72C
5112	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
5113	 34A	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x34800020362FFE40101F1000114FF0F01330012014D019402F0000001A20F0F
5114	 34B	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0x34800020362FFE40101F1000114FF0F01330012014D019402F0000001A20F0F
- stack 0: 0xE0
5115	 34D	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x3480002
5116	 34E	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0x3480002
- stack 0: 0xFFFF
5117	 351	AND		 	 
- stack 1: 0x72C
- stack 0: 0x2
5118	 352	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0x1
5119	 354	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x2
5120	 355	PUSH2	00A0	 	 
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0xA0
5121	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x72C
5122	 359	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
5123	 35B	ADD		 	 
- stack 0: 0x730
5124	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
5125	 35D	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x362FFE40101F1000114FF0F01330012014D019402F0000001A20F0F00CB00F0
5126	 35E	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x362FFE40101F1000114FF0F01330012014D019402F0000001A20F0F00CB00F0
- stack 0: 0xF0
5127	 360	SHR		 	 
- stack 1: 0x730
- stack 0: 0x362
5128	 361	JUMP		 	 
- stack 0: 0x730
5129	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x730
5130	 363	PUSH2	0080	 	 
- stack 1: 0x730
- stack 0: 0x80
5131	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x730
- stack 0: 0x1
5132	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x730
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5133	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x730
- stack 0: 0x1
5134	 36D	PUSH2	00A0	 	 
- stack 2: 0x730
- stack 1: 0x1
- stack 0: 0xA0
5135	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x730
- stack 1: 0x1
- stack 0: 0x2
5136	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x730
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5137	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x730
- stack 1: 0x1
- stack 0: 0x2
5138	 377	SUB		 	 
- stack 1: 0x730
- stack 0: 0x1
5139	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x730
- stack 1: 0x1
- stack 0: 0x380
5140	 37B	JUMPI		 	 
- stack 0: 0x730
5141	 380	JUMPDEST		 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x730
5142	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x730
- stack 0: 0x730
5143	 382	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x362FFE40101F1000114FF0F01330012014D019402F0000001A20F0F00CB00F0
5144	 383	PUSH1	E0	 	 
- stack 2: 0x730
- stack 1: 0x362FFE40101F1000114FF0F01330012014D019402F0000001A20F0F00CB00F0
- stack 0: 0xE0
5145	 385	SHR		 	 
- stack 1: 0x730
- stack 0: 0x362FFE4
5146	 386	PUSH2	FFFF	 	 
- stack 2: 0x730
- stack 1: 0x362FFE4
- stack 0: 0xFFFF
5147	 389	AND		 	 
- stack 1: 0x730
- stack 0: 0xFFE4
5148	 38A	PUSH1	01	 	 
- stack 2: 0x730
- stack 1: 0xFFE4
- stack 0: 0x1
5149	 38C	SIGNEXTEND		 	 
- stack 1: 0x730
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
5150	 38D	ADD		 	 
- stack 0: 0x714
5151	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x714
- stack 0: 0xFFFFFFFF
5152	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x714
5153	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
5154	 395	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0xB8F0F100CBFF0F0086F0100099FF0000EA000003290001034800020362FFE4
5155	 396	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0xB8F0F100CBFF0F0086F0100099FF0000EA000003290001034800020362FFE4
- stack 0: 0xF0
5156	 398	SHR		 	 
- stack 1: 0x714
- stack 0: 0xB8
5157	 399	JUMP		 	 
- stack 0: 0x714
5158	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x714
5159	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x714
- stack 0: 0xF0F1000
5160	 BE	PUSH2	0040	 	 
- stack 2: 0x714
- stack 1: 0xF0F1000
- stack 0: 0x40
5161	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x714
5162	 C2	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
5163	 C4	ADD		 	 
- stack 0: 0x718
5164	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
5165	 C6	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F100
5166	 C7	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F100
- stack 0: 0xF0
5167	 C9	SHR		 	 
- stack 1: 0x718
- stack 0: 0xCB
5168	 CA	JUMP		 	 
- stack 0: 0x718
5169	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x718
5170	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
5171	 CD	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F100
5172	 CE	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0xCBFF0F0086F0100099FF0000EA000003290001034800020362FFE40101F100
- stack 0: 0xE0
5173	 D0	SHR		 	 
- stack 1: 0x718
- stack 0: 0xCBFF0F
5174	 D1	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
5175	 D4	AND		 	 
- stack 1: 0x718
- stack 0: 0xFF0F
5176	 D5	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0xFF0F
- stack 0: 0x1
5177	 D7	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
5178	 D8	PUSH2	0040	 	 
- stack 2: 0x718
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
5179	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x718
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
5180	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x718
- stack 0: 0xF0F0F0F
5181	 DD	PUSH2	0040	 	 
- stack 2: 0x718
- stack 1: 0xF0F0F0F
- stack 0: 0x40
5182	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x718
5183	 E1	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
5184	 E3	ADD		 	 
- stack 0: 0x71C
5185	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
5186	 E5	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x86F0100099FF0000EA000003290001034800020362FFE40101F1000114FF0F
5187	 E6	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x86F0100099FF0000EA000003290001034800020362FFE40101F1000114FF0F
- stack 0: 0xF0
5188	 E8	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x86
5189	 E9	JUMP		 	 
- stack 0: 0x71C
5190	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x71C
5191	 87	PUSH4	ff010000	 	 
- stack 1: 0x71C
- stack 0: 0xFF010000
5192	 8C	PUSH2	0020	 	 
- stack 2: 0x71C
- stack 1: 0xFF010000
- stack 0: 0x20
5193	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x71C
5194	 90	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
5195	 92	ADD		 	 
- stack 0: 0x720
5196	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
5197	 94	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x99FF0000EA000003290001034800020362FFE40101F1000114FF0F01330012
5198	 95	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0x99FF0000EA000003290001034800020362FFE40101F1000114FF0F01330012
- stack 0: 0xF0
5199	 97	SHR		 	 
- stack 1: 0x720
- stack 0: 0x99
5200	 98	JUMP		 	 
- stack 0: 0x720
5201	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x720
5202	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x720
- stack 0: 0x720
5203	 9B	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x99FF0000EA000003290001034800020362FFE40101F1000114FF0F01330012
5204	 9C	PUSH1	E0	 	 
- stack 2: 0x720
- stack 1: 0x99FF0000EA000003290001034800020362FFE40101F1000114FF0F01330012
- stack 0: 0xE0
5205	 9E	SHR		 	 
- stack 1: 0x720
- stack 0: 0x99FF00
5206	 9F	PUSH2	FFFF	 	 
- stack 2: 0x720
- stack 1: 0x99FF00
- stack 0: 0xFFFF
5207	 A2	AND		 	 
- stack 1: 0x720
- stack 0: 0xFF00
5208	 A3	PUSH1	01	 	 
- stack 2: 0x720
- stack 1: 0xFF00
- stack 0: 0x1
5209	 A5	SIGNEXTEND		 	 
- stack 1: 0x720
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
5210	 A6	PUSH2	0020	 	 
- stack 2: 0x720
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
5211	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x720
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
5212	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x720
- stack 0: 0xFF00FF00
5213	 AB	PUSH2	0020	 	 
- stack 2: 0x720
- stack 1: 0xFF00FF00
- stack 0: 0x20
5214	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x720
5215	 AF	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
5216	 B1	ADD		 	 
- stack 0: 0x724
5217	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
5218	 B3	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0xEA000003290001034800020362FFE40101F1000114FF0F01330012014D0194
5219	 B4	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0xEA000003290001034800020362FFE40101F1000114FF0F01330012014D0194
- stack 0: 0xF0
5220	 B6	SHR		 	 
- stack 1: 0x724
- stack 0: 0xEA
5221	 B7	JUMP		 	 
- stack 0: 0x724
5222	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x724
5223	 EB	PUSH2	0040	 	 
- stack 1: 0x724
- stack 0: 0x40
5224	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x724
- stack 0: 0xF0F0F0F
5225	 EF	PUSH2	0020	 	 
- stack 2: 0x724
- stack 1: 0xF0F0F0F
- stack 0: 0x20
5226	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x724
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
5227	 F3	OR		 	  ;; # OR
- stack 1: 0x724
- stack 0: 0xFF0FFF0F
5228	 F4	PUSH2	0060	 	 
- stack 2: 0x724
- stack 1: 0xFF0FFF0F
- stack 0: 0x60
5229	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x724
5230	 F8	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
5231	 FA	ADD		 	 
- stack 0: 0x728
5232	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
5233	 FC	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x3290001034800020362FFE40101F1000114FF0F01330012014D019402F00000
5234	 FD	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x3290001034800020362FFE40101F1000114FF0F01330012014D019402F00000
- stack 0: 0xF0
5235	 FF	SHR		 	 
- stack 1: 0x728
- stack 0: 0x329
5236	 100	JUMP		 	 
- stack 0: 0x728
5237	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x728
5238	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x728
- stack 0: 0x728
5239	 32B	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x3290001034800020362FFE40101F1000114FF0F01330012014D019402F00000
5240	 32C	PUSH1	E0	 	 
- stack 2: 0x728
- stack 1: 0x3290001034800020362FFE40101F1000114FF0F01330012014D019402F00000
- stack 0: 0xE0
5241	 32E	SHR		 	 
- stack 1: 0x728
- stack 0: 0x3290001
5242	 32F	PUSH2	FFFF	 	 
- stack 2: 0x728
- stack 1: 0x3290001
- stack 0: 0xFFFF
5243	 332	AND		 	 
- stack 1: 0x728
- stack 0: 0x1
5244	 333	PUSH1	01	 	 
- stack 2: 0x728
- stack 1: 0x1
- stack 0: 0x1
5245	 335	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0x1
5246	 336	PUSH2	0080	 	 
- stack 2: 0x728
- stack 1: 0x1
- stack 0: 0x80
5247	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x728
- stack 1: 0x1
- stack 0: 0x1
5248	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x728
- stack 0: 0x2
5249	 33B	PUSH2	0080	 	 
- stack 2: 0x728
- stack 1: 0x2
- stack 0: 0x80
5250	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x728
5251	 33F	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
5252	 341	ADD		 	 
- stack 0: 0x72C
5253	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
5254	 343	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x34800020362FFE40101F1000114FF0F01330012014D019402F0000001A20F0F
5255	 344	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x34800020362FFE40101F1000114FF0F01330012014D019402F0000001A20F0F
- stack 0: 0xF0
5256	 346	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x348
5257	 347	JUMP		 	 
- stack 0: 0x72C
5258	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x72C
5259	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
5260	 34A	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x34800020362FFE40101F1000114FF0F01330012014D019402F0000001A20F0F
5261	 34B	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0x34800020362FFE40101F1000114FF0F01330012014D019402F0000001A20F0F
- stack 0: 0xE0
5262	 34D	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x3480002
5263	 34E	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0x3480002
- stack 0: 0xFFFF
5264	 351	AND		 	 
- stack 1: 0x72C
- stack 0: 0x2
5265	 352	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0x1
5266	 354	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x2
5267	 355	PUSH2	00A0	 	 
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0xA0
5268	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x72C
5269	 359	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
5270	 35B	ADD		 	 
- stack 0: 0x730
5271	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
5272	 35D	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x362FFE40101F1000114FF0F01330012014D019402F0000001A20F0F00CB00F0
5273	 35E	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x362FFE40101F1000114FF0F01330012014D019402F0000001A20F0F00CB00F0
- stack 0: 0xF0
5274	 360	SHR		 	 
- stack 1: 0x730
- stack 0: 0x362
5275	 361	JUMP		 	 
- stack 0: 0x730
5276	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x730
5277	 363	PUSH2	0080	 	 
- stack 1: 0x730
- stack 0: 0x80
5278	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x730
- stack 0: 0x2
5279	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x730
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5280	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x730
- stack 0: 0x2
5281	 36D	PUSH2	00A0	 	 
- stack 2: 0x730
- stack 1: 0x2
- stack 0: 0xA0
5282	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x730
- stack 1: 0x2
- stack 0: 0x2
5283	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x730
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5284	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x730
- stack 1: 0x2
- stack 0: 0x2
5285	 377	SUB		 	 
- stack 1: 0x730
- stack 0: 0x0
5286	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x730
- stack 1: 0x0
- stack 0: 0x380
5287	 37B	JUMPI		 	 
- stack 0: 0x730
5288	 37C	PUSH2	039A	 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 1: 0x730
- stack 0: 0x39A
5289	 37F	JUMP		 	 
- stack 0: 0x730
5290	 39A	JUMPDEST		 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x730
5291	 39B	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
5292	 39D	ADD		 	 
- stack 0: 0x734
5293	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
5294	 39F	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x101F1000114FF0F01330012014D019402F0000001A20F0F00CB00F0018FFF01
5295	 3A0	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0x101F1000114FF0F01330012014D019402F0000001A20F0F00CB00F0018FFF01
- stack 0: 0xF0
5296	 3A2	SHR		 	 
- stack 1: 0x734
- stack 0: 0x101
5297	 3A3	JUMP		 	 
- stack 0: 0x734
5298	 101	JUMPDEST		 ;; __riscvimpl_LUI_ff100eb7	  ;; # instr: lui t4,0xff100(ignore imm)
- stack 0: 0x734
5299	 102	PUSH4	ff100000	 	 
- stack 1: 0x734
- stack 0: 0xFF100000
5300	 107	PUSH2	03A0	 	 
- stack 2: 0x734
- stack 1: 0xFF100000
- stack 0: 0x3A0
5301	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x734
5302	 10B	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
5303	 10D	ADD		 	 
- stack 0: 0x738
5304	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
5305	 10F	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x114FF0F01330012014D019402F0000001A20F0F00CB00F0018FFF010099FFF0
5306	 110	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x114FF0F01330012014D019402F0000001A20F0F00CB00F0018FFF010099FFF0
- stack 0: 0xF0
5307	 112	SHR		 	 
- stack 1: 0x738
- stack 0: 0x114
5308	 113	JUMP		 	 
- stack 0: 0x738
5309	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x738
5310	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x738
- stack 0: 0x738
5311	 116	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x114FF0F01330012014D019402F0000001A20F0F00CB00F0018FFF010099FFF0
5312	 117	PUSH1	E0	 	 
- stack 2: 0x738
- stack 1: 0x114FF0F01330012014D019402F0000001A20F0F00CB00F0018FFF010099FFF0
- stack 0: 0xE0
5313	 119	SHR		 	 
- stack 1: 0x738
- stack 0: 0x114FF0F
5314	 11A	PUSH2	FFFF	 	 
- stack 2: 0x738
- stack 1: 0x114FF0F
- stack 0: 0xFFFF
5315	 11D	AND		 	 
- stack 1: 0x738
- stack 0: 0xFF0F
5316	 11E	PUSH1	01	 	 
- stack 2: 0x738
- stack 1: 0xFF0F
- stack 0: 0x1
5317	 120	SIGNEXTEND		 	 
- stack 1: 0x738
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
5318	 121	PUSH2	03A0	 	 
- stack 2: 0x738
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x3A0
5319	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x738
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xFF100000
5320	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x738
- stack 0: 0xFF0FFF0F
5321	 126	PUSH2	03A0	 	 
- stack 2: 0x738
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
5322	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x738
5323	 12A	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
5324	 12C	ADD		 	 
- stack 0: 0x73C
5325	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
5326	 12E	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x1330012014D019402F0000001A20F0F00CB00F0018FFF010099FFF003E60000
5327	 12F	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x1330012014D019402F0000001A20F0F00CB00F0018FFF010099FFF003E60000
- stack 0: 0xF0
5328	 131	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x133
5329	 132	JUMP		 	 
- stack 0: 0x73C
5330	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x73C
5331	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x73C
- stack 0: 0x73C
5332	 135	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x1330012014D019402F0000001A20F0F00CB00F0018FFF010099FFF003E60000
5333	 136	PUSH1	E0	 	 
- stack 2: 0x73C
- stack 1: 0x1330012014D019402F0000001A20F0F00CB00F0018FFF010099FFF003E60000
- stack 0: 0xE0
5334	 138	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x1330012
5335	 139	PUSH2	FFFF	 	 
- stack 2: 0x73C
- stack 1: 0x1330012
- stack 0: 0xFFFF
5336	 13C	AND		 	 
- stack 1: 0x73C
- stack 0: 0x12
5337	 13D	PUSH1	01	 	 
- stack 2: 0x73C
- stack 1: 0x12
- stack 0: 0x1
5338	 13F	SIGNEXTEND		 	 
- stack 1: 0x73C
- stack 0: 0x12
5339	 140	PUSH2	0380	 	 
- stack 2: 0x73C
- stack 1: 0x12
- stack 0: 0x380
5340	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x73C
5341	 144	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
5342	 146	ADD		 	 
- stack 0: 0x740
5343	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
5344	 148	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x14D019402F0000001A20F0F00CB00F0018FFF010099FFF003E6000000EA0000
5345	 149	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0x14D019402F0000001A20F0F00CB00F0018FFF010099FFF003E6000000EA0000
- stack 0: 0xF0
5346	 14B	SHR		 	 
- stack 1: 0x740
- stack 0: 0x14D
5347	 14C	JUMP		 	 
- stack 0: 0x740
5348	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x740
5349	 14E	PUSH2	0060	 	 
- stack 1: 0x740
- stack 0: 0x60
5350	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x740
- stack 0: 0xFF0FFF0F
5351	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x740
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
5352	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x740
- stack 0: 0xFF0FFF0F
5353	 158	PUSH2	03A0	 	 
- stack 2: 0x740
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
5354	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x740
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
5355	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x740
- stack 2: 0xFF0FFF0F
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
5356	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x740
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
5357	 162	SUB		 	 
- stack 1: 0x740
- stack 0: 0x0
5358	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x740
- stack 1: 0x0
- stack 0: 0x16B
5359	 166	JUMPI		 	 
- stack 0: 0x740
5360	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x740
- stack 0: 0x185
5361	 16A	JUMP		 	 
- stack 0: 0x740
5362	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x740
5363	 186	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
5364	 188	ADD		 	 
- stack 0: 0x744
5365	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
5366	 18A	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x2F0000001A20F0F00CB00F0018FFF010099FFF003E6000000EA000003290001
5367	 18B	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x2F0000001A20F0F00CB00F0018FFF010099FFF003E6000000EA000003290001
- stack 0: 0xF0
5368	 18D	SHR		 	 
- stack 1: 0x744
- stack 0: 0x2F0
5369	 18E	JUMP		 	 
- stack 0: 0x744
5370	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x744
5371	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
5372	 2F2	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x2F0000001A20F0F00CB00F0018FFF010099FFF003E6000000EA000003290001
5373	 2F3	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x2F0000001A20F0F00CB00F0018FFF010099FFF003E6000000EA000003290001
- stack 0: 0xE0
5374	 2F5	SHR		 	 
- stack 1: 0x744
- stack 0: 0x2F00000
5375	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x2F00000
- stack 0: 0xFFFF
5376	 2F9	AND		 	 
- stack 1: 0x744
- stack 0: 0x0
5377	 2FA	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x0
- stack 0: 0x1
5378	 2FC	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x0
5379	 2FD	PUSH2	0080	 	 
- stack 2: 0x744
- stack 1: 0x0
- stack 0: 0x80
5380	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x744
5381	 301	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
5382	 303	ADD		 	 
- stack 0: 0x748
5383	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
5384	 305	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x1A20F0F00CB00F0018FFF010099FFF003E6000000EA00000329000103480002
5385	 306	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x1A20F0F00CB00F0018FFF010099FFF003E6000000EA00000329000103480002
- stack 0: 0xF0
5386	 308	SHR		 	 
- stack 1: 0x748
- stack 0: 0x1A2
5387	 309	JUMP		 	 
- stack 0: 0x748
5388	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x748
5389	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x748
- stack 0: 0xF0F0F000
5390	 1A8	PUSH2	0040	 	 
- stack 2: 0x748
- stack 1: 0xF0F0F000
- stack 0: 0x40
5391	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x748
5392	 1AC	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
5393	 1AE	ADD		 	 
- stack 0: 0x74C
5394	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
5395	 1B0	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
5396	 1B1	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
- stack 0: 0xF0
5397	 1B3	SHR		 	 
- stack 1: 0x74C
- stack 0: 0xCB
5398	 1B4	JUMP		 	 
- stack 0: 0x74C
5399	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x74C
5400	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x74C
- stack 0: 0x74C
5401	 CD	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
5402	 CE	PUSH1	E0	 	 
- stack 2: 0x74C
- stack 1: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
- stack 0: 0xE0
5403	 D0	SHR		 	 
- stack 1: 0x74C
- stack 0: 0xCB00F0
5404	 D1	PUSH2	FFFF	 	 
- stack 2: 0x74C
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
5405	 D4	AND		 	 
- stack 1: 0x74C
- stack 0: 0xF0
5406	 D5	PUSH1	01	 	 
- stack 2: 0x74C
- stack 1: 0xF0
- stack 0: 0x1
5407	 D7	SIGNEXTEND		 	 
- stack 1: 0x74C
- stack 0: 0xF0
5408	 D8	PUSH2	0040	 	 
- stack 2: 0x74C
- stack 1: 0xF0
- stack 0: 0x40
5409	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x74C
- stack 1: 0xF0
- stack 0: 0xF0F0F000
5410	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x74C
- stack 0: 0xF0F0F0F0
5411	 DD	PUSH2	0040	 	 
- stack 2: 0x74C
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
5412	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x74C
5413	 E1	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
5414	 E3	ADD		 	 
- stack 0: 0x750
5415	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
5416	 E5	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFE001B5FF10
5417	 E6	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFE001B5FF10
- stack 0: 0xF0
5418	 E8	SHR		 	 
- stack 1: 0x750
- stack 0: 0x18F
5419	 E9	JUMP		 	 
- stack 0: 0x750
5420	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x750
5421	 190	PUSH4	0ff01000	 	 
- stack 1: 0x750
- stack 0: 0xFF01000
5422	 195	PUSH2	0020	 	 
- stack 2: 0x750
- stack 1: 0xFF01000
- stack 0: 0x20
5423	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x750
5424	 199	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
5425	 19B	ADD		 	 
- stack 0: 0x754
5426	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
5427	 19D	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
5428	 19E	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
- stack 0: 0xF0
5429	 1A0	SHR		 	 
- stack 1: 0x754
- stack 0: 0x99
5430	 1A1	JUMP		 	 
- stack 0: 0x754
5431	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x754
5432	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
5433	 9B	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
5434	 9C	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
- stack 0: 0xE0
5435	 9E	SHR		 	 
- stack 1: 0x754
- stack 0: 0x99FFF0
5436	 9F	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
5437	 A2	AND		 	 
- stack 1: 0x754
- stack 0: 0xFFF0
5438	 A3	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0xFFF0
- stack 0: 0x1
5439	 A5	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
5440	 A6	PUSH2	0020	 	 
- stack 2: 0x754
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
5441	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x754
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
5442	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x754
- stack 0: 0xFF00FF0
5443	 AB	PUSH2	0020	 	 
- stack 2: 0x754
- stack 1: 0xFF00FF0
- stack 0: 0x20
5444	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x754
5445	 AF	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
5446	 B1	ADD		 	 
- stack 0: 0x758
5447	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
5448	 B3	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF001330013
5449	 B4	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF001330013
- stack 0: 0xF0
5450	 B6	SHR		 	 
- stack 1: 0x758
- stack 0: 0x3E6
5451	 B7	JUMP		 	 
- stack 0: 0x758
5452	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x758
5453	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x758
- stack 0: 0x758
5454	 3E8	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF001330013
5455	 3E9	PUSH1	E0	 	 
- stack 2: 0x758
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF001330013
- stack 0: 0xE0
5456	 3EB	SHR		 	 
- stack 1: 0x758
- stack 0: 0x3E60000
5457	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x758
- stack 1: 0x3E60000
- stack 0: 0xFFFF
5458	 3EF	AND		 	 
- stack 1: 0x758
- stack 0: 0x0
5459	 3F0	PUSH1	01	 	 
- stack 2: 0x758
- stack 1: 0x0
- stack 0: 0x1
5460	 3F2	SIGNEXTEND		 	 
- stack 1: 0x758
- stack 0: 0x0
5461	 3F3	POP		 	 
- stack 0: 0x758
5462	 3F4	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
5463	 3F6	ADD		 	 
- stack 0: 0x75C
5464	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
5465	 3F8	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0xEA000003290001034800020362FFE001B5FF100114FFF001330013014D015C
5466	 3F9	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0xEA000003290001034800020362FFE001B5FF100114FFF001330013014D015C
- stack 0: 0xF0
5467	 3FB	SHR		 	 
- stack 1: 0x75C
- stack 0: 0xEA
5468	 3FC	JUMP		 	 
- stack 0: 0x75C
5469	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x75C
5470	 EB	PUSH2	0040	 	 
- stack 1: 0x75C
- stack 0: 0x40
5471	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x75C
- stack 0: 0xF0F0F0F0
5472	 EF	PUSH2	0020	 	 
- stack 2: 0x75C
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
5473	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x75C
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
5474	 F3	OR		 	  ;; # OR
- stack 1: 0x75C
- stack 0: 0xFFF0FFF0
5475	 F4	PUSH2	0060	 	 
- stack 2: 0x75C
- stack 1: 0xFFF0FFF0
- stack 0: 0x60
5476	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x75C
5477	 F8	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
5478	 FA	ADD		 	 
- stack 0: 0x760
5479	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
5480	 FC	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x3290001034800020362FFE001B5FF100114FFF001330013014D015C02F00000
5481	 FD	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x3290001034800020362FFE001B5FF100114FFF001330013014D015C02F00000
- stack 0: 0xF0
5482	 FF	SHR		 	 
- stack 1: 0x760
- stack 0: 0x329
5483	 100	JUMP		 	 
- stack 0: 0x760
5484	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x760
5485	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
5486	 32B	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x3290001034800020362FFE001B5FF100114FFF001330013014D015C02F00000
5487	 32C	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0x3290001034800020362FFE001B5FF100114FFF001330013014D015C02F00000
- stack 0: 0xE0
5488	 32E	SHR		 	 
- stack 1: 0x760
- stack 0: 0x3290001
5489	 32F	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0x3290001
- stack 0: 0xFFFF
5490	 332	AND		 	 
- stack 1: 0x760
- stack 0: 0x1
5491	 333	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x1
- stack 0: 0x1
5492	 335	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x1
5493	 336	PUSH2	0080	 	 
- stack 2: 0x760
- stack 1: 0x1
- stack 0: 0x80
5494	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x760
- stack 1: 0x1
- stack 0: 0x0
5495	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x760
- stack 0: 0x1
5496	 33B	PUSH2	0080	 	 
- stack 2: 0x760
- stack 1: 0x1
- stack 0: 0x80
5497	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x760
5498	 33F	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
5499	 341	ADD		 	 
- stack 0: 0x764
5500	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
5501	 343	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x34800020362FFE001B5FF100114FFF001330013014D015C02F0000000B8F0F1
5502	 344	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x34800020362FFE001B5FF100114FFF001330013014D015C02F0000000B8F0F1
- stack 0: 0xF0
5503	 346	SHR		 	 
- stack 1: 0x764
- stack 0: 0x348
5504	 347	JUMP		 	 
- stack 0: 0x764
5505	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x764
5506	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
5507	 34A	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x34800020362FFE001B5FF100114FFF001330013014D015C02F0000000B8F0F1
5508	 34B	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0x34800020362FFE001B5FF100114FFF001330013014D015C02F0000000B8F0F1
- stack 0: 0xE0
5509	 34D	SHR		 	 
- stack 1: 0x764
- stack 0: 0x3480002
5510	 34E	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0x3480002
- stack 0: 0xFFFF
5511	 351	AND		 	 
- stack 1: 0x764
- stack 0: 0x2
5512	 352	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0x1
5513	 354	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0x2
5514	 355	PUSH2	00A0	 	 
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0xA0
5515	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x764
5516	 359	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
5517	 35B	ADD		 	 
- stack 0: 0x768
5518	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
5519	 35D	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x362FFE001B5FF100114FFF001330013014D015C02F0000000B8F0F100CBFF0F
5520	 35E	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x362FFE001B5FF100114FFF001330013014D015C02F0000000B8F0F100CBFF0F
- stack 0: 0xF0
5521	 360	SHR		 	 
- stack 1: 0x768
- stack 0: 0x362
5522	 361	JUMP		 	 
- stack 0: 0x768
5523	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x768
5524	 363	PUSH2	0080	 	 
- stack 1: 0x768
- stack 0: 0x80
5525	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x768
- stack 0: 0x1
5526	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x768
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5527	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x768
- stack 0: 0x1
5528	 36D	PUSH2	00A0	 	 
- stack 2: 0x768
- stack 1: 0x1
- stack 0: 0xA0
5529	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x768
- stack 1: 0x1
- stack 0: 0x2
5530	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x768
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5531	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x768
- stack 1: 0x1
- stack 0: 0x2
5532	 377	SUB		 	 
- stack 1: 0x768
- stack 0: 0x1
5533	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x768
- stack 1: 0x1
- stack 0: 0x380
5534	 37B	JUMPI		 	 
- stack 0: 0x768
5535	 380	JUMPDEST		 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x768
5536	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x768
- stack 0: 0x768
5537	 382	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x362FFE001B5FF100114FFF001330013014D015C02F0000000B8F0F100CBFF0F
5538	 383	PUSH1	E0	 	 
- stack 2: 0x768
- stack 1: 0x362FFE001B5FF100114FFF001330013014D015C02F0000000B8F0F100CBFF0F
- stack 0: 0xE0
5539	 385	SHR		 	 
- stack 1: 0x768
- stack 0: 0x362FFE0
5540	 386	PUSH2	FFFF	 	 
- stack 2: 0x768
- stack 1: 0x362FFE0
- stack 0: 0xFFFF
5541	 389	AND		 	 
- stack 1: 0x768
- stack 0: 0xFFE0
5542	 38A	PUSH1	01	 	 
- stack 2: 0x768
- stack 1: 0xFFE0
- stack 0: 0x1
5543	 38C	SIGNEXTEND		 	 
- stack 1: 0x768
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
5544	 38D	ADD		 	 
- stack 0: 0x748
5545	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x748
- stack 0: 0xFFFFFFFF
5546	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x748
5547	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
5548	 395	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x1A20F0F00CB00F0018FFF010099FFF003E6000000EA00000329000103480002
5549	 396	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x1A20F0F00CB00F0018FFF010099FFF003E6000000EA00000329000103480002
- stack 0: 0xF0
5550	 398	SHR		 	 
- stack 1: 0x748
- stack 0: 0x1A2
5551	 399	JUMP		 	 
- stack 0: 0x748
5552	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x748
5553	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x748
- stack 0: 0xF0F0F000
5554	 1A8	PUSH2	0040	 	 
- stack 2: 0x748
- stack 1: 0xF0F0F000
- stack 0: 0x40
5555	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x748
5556	 1AC	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
5557	 1AE	ADD		 	 
- stack 0: 0x74C
5558	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
5559	 1B0	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
5560	 1B1	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
- stack 0: 0xF0
5561	 1B3	SHR		 	 
- stack 1: 0x74C
- stack 0: 0xCB
5562	 1B4	JUMP		 	 
- stack 0: 0x74C
5563	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x74C
5564	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x74C
- stack 0: 0x74C
5565	 CD	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
5566	 CE	PUSH1	E0	 	 
- stack 2: 0x74C
- stack 1: 0xCB00F0018FFF010099FFF003E6000000EA000003290001034800020362FFE0
- stack 0: 0xE0
5567	 D0	SHR		 	 
- stack 1: 0x74C
- stack 0: 0xCB00F0
5568	 D1	PUSH2	FFFF	 	 
- stack 2: 0x74C
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
5569	 D4	AND		 	 
- stack 1: 0x74C
- stack 0: 0xF0
5570	 D5	PUSH1	01	 	 
- stack 2: 0x74C
- stack 1: 0xF0
- stack 0: 0x1
5571	 D7	SIGNEXTEND		 	 
- stack 1: 0x74C
- stack 0: 0xF0
5572	 D8	PUSH2	0040	 	 
- stack 2: 0x74C
- stack 1: 0xF0
- stack 0: 0x40
5573	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x74C
- stack 1: 0xF0
- stack 0: 0xF0F0F000
5574	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x74C
- stack 0: 0xF0F0F0F0
5575	 DD	PUSH2	0040	 	 
- stack 2: 0x74C
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
5576	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x74C
5577	 E1	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
5578	 E3	ADD		 	 
- stack 0: 0x750
5579	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
5580	 E5	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFE001B5FF10
5581	 E6	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFE001B5FF10
- stack 0: 0xF0
5582	 E8	SHR		 	 
- stack 1: 0x750
- stack 0: 0x18F
5583	 E9	JUMP		 	 
- stack 0: 0x750
5584	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x750
5585	 190	PUSH4	0ff01000	 	 
- stack 1: 0x750
- stack 0: 0xFF01000
5586	 195	PUSH2	0020	 	 
- stack 2: 0x750
- stack 1: 0xFF01000
- stack 0: 0x20
5587	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x750
5588	 199	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
5589	 19B	ADD		 	 
- stack 0: 0x754
5590	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
5591	 19D	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
5592	 19E	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
- stack 0: 0xF0
5593	 1A0	SHR		 	 
- stack 1: 0x754
- stack 0: 0x99
5594	 1A1	JUMP		 	 
- stack 0: 0x754
5595	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x754
5596	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
5597	 9B	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
5598	 9C	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFE001B5FF100114FFF0
- stack 0: 0xE0
5599	 9E	SHR		 	 
- stack 1: 0x754
- stack 0: 0x99FFF0
5600	 9F	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
5601	 A2	AND		 	 
- stack 1: 0x754
- stack 0: 0xFFF0
5602	 A3	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0xFFF0
- stack 0: 0x1
5603	 A5	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
5604	 A6	PUSH2	0020	 	 
- stack 2: 0x754
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
5605	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x754
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
5606	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x754
- stack 0: 0xFF00FF0
5607	 AB	PUSH2	0020	 	 
- stack 2: 0x754
- stack 1: 0xFF00FF0
- stack 0: 0x20
5608	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x754
5609	 AF	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
5610	 B1	ADD		 	 
- stack 0: 0x758
5611	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
5612	 B3	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF001330013
5613	 B4	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF001330013
- stack 0: 0xF0
5614	 B6	SHR		 	 
- stack 1: 0x758
- stack 0: 0x3E6
5615	 B7	JUMP		 	 
- stack 0: 0x758
5616	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x758
5617	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x758
- stack 0: 0x758
5618	 3E8	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF001330013
5619	 3E9	PUSH1	E0	 	 
- stack 2: 0x758
- stack 1: 0x3E6000000EA000003290001034800020362FFE001B5FF100114FFF001330013
- stack 0: 0xE0
5620	 3EB	SHR		 	 
- stack 1: 0x758
- stack 0: 0x3E60000
5621	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x758
- stack 1: 0x3E60000
- stack 0: 0xFFFF
5622	 3EF	AND		 	 
- stack 1: 0x758
- stack 0: 0x0
5623	 3F0	PUSH1	01	 	 
- stack 2: 0x758
- stack 1: 0x0
- stack 0: 0x1
5624	 3F2	SIGNEXTEND		 	 
- stack 1: 0x758
- stack 0: 0x0
5625	 3F3	POP		 	 
- stack 0: 0x758
5626	 3F4	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
5627	 3F6	ADD		 	 
- stack 0: 0x75C
5628	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
5629	 3F8	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0xEA000003290001034800020362FFE001B5FF100114FFF001330013014D015C
5630	 3F9	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0xEA000003290001034800020362FFE001B5FF100114FFF001330013014D015C
- stack 0: 0xF0
5631	 3FB	SHR		 	 
- stack 1: 0x75C
- stack 0: 0xEA
5632	 3FC	JUMP		 	 
- stack 0: 0x75C
5633	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x75C
5634	 EB	PUSH2	0040	 	 
- stack 1: 0x75C
- stack 0: 0x40
5635	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x75C
- stack 0: 0xF0F0F0F0
5636	 EF	PUSH2	0020	 	 
- stack 2: 0x75C
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
5637	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x75C
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
5638	 F3	OR		 	  ;; # OR
- stack 1: 0x75C
- stack 0: 0xFFF0FFF0
5639	 F4	PUSH2	0060	 	 
- stack 2: 0x75C
- stack 1: 0xFFF0FFF0
- stack 0: 0x60
5640	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x75C
5641	 F8	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
5642	 FA	ADD		 	 
- stack 0: 0x760
5643	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
5644	 FC	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x3290001034800020362FFE001B5FF100114FFF001330013014D015C02F00000
5645	 FD	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x3290001034800020362FFE001B5FF100114FFF001330013014D015C02F00000
- stack 0: 0xF0
5646	 FF	SHR		 	 
- stack 1: 0x760
- stack 0: 0x329
5647	 100	JUMP		 	 
- stack 0: 0x760
5648	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x760
5649	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
5650	 32B	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x3290001034800020362FFE001B5FF100114FFF001330013014D015C02F00000
5651	 32C	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0x3290001034800020362FFE001B5FF100114FFF001330013014D015C02F00000
- stack 0: 0xE0
5652	 32E	SHR		 	 
- stack 1: 0x760
- stack 0: 0x3290001
5653	 32F	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0x3290001
- stack 0: 0xFFFF
5654	 332	AND		 	 
- stack 1: 0x760
- stack 0: 0x1
5655	 333	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x1
- stack 0: 0x1
5656	 335	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x1
5657	 336	PUSH2	0080	 	 
- stack 2: 0x760
- stack 1: 0x1
- stack 0: 0x80
5658	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x760
- stack 1: 0x1
- stack 0: 0x1
5659	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x760
- stack 0: 0x2
5660	 33B	PUSH2	0080	 	 
- stack 2: 0x760
- stack 1: 0x2
- stack 0: 0x80
5661	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x760
5662	 33F	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
5663	 341	ADD		 	 
- stack 0: 0x764
5664	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
5665	 343	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x34800020362FFE001B5FF100114FFF001330013014D015C02F0000000B8F0F1
5666	 344	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x34800020362FFE001B5FF100114FFF001330013014D015C02F0000000B8F0F1
- stack 0: 0xF0
5667	 346	SHR		 	 
- stack 1: 0x764
- stack 0: 0x348
5668	 347	JUMP		 	 
- stack 0: 0x764
5669	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x764
5670	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
5671	 34A	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x34800020362FFE001B5FF100114FFF001330013014D015C02F0000000B8F0F1
5672	 34B	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0x34800020362FFE001B5FF100114FFF001330013014D015C02F0000000B8F0F1
- stack 0: 0xE0
5673	 34D	SHR		 	 
- stack 1: 0x764
- stack 0: 0x3480002
5674	 34E	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0x3480002
- stack 0: 0xFFFF
5675	 351	AND		 	 
- stack 1: 0x764
- stack 0: 0x2
5676	 352	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0x1
5677	 354	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0x2
5678	 355	PUSH2	00A0	 	 
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0xA0
5679	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x764
5680	 359	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
5681	 35B	ADD		 	 
- stack 0: 0x768
5682	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
5683	 35D	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x362FFE001B5FF100114FFF001330013014D015C02F0000000B8F0F100CBFF0F
5684	 35E	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x362FFE001B5FF100114FFF001330013014D015C02F0000000B8F0F100CBFF0F
- stack 0: 0xF0
5685	 360	SHR		 	 
- stack 1: 0x768
- stack 0: 0x362
5686	 361	JUMP		 	 
- stack 0: 0x768
5687	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x768
5688	 363	PUSH2	0080	 	 
- stack 1: 0x768
- stack 0: 0x80
5689	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x768
- stack 0: 0x2
5690	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x768
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5691	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x768
- stack 0: 0x2
5692	 36D	PUSH2	00A0	 	 
- stack 2: 0x768
- stack 1: 0x2
- stack 0: 0xA0
5693	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x768
- stack 1: 0x2
- stack 0: 0x2
5694	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x768
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5695	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x768
- stack 1: 0x2
- stack 0: 0x2
5696	 377	SUB		 	 
- stack 1: 0x768
- stack 0: 0x0
5697	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x768
- stack 1: 0x0
- stack 0: 0x380
5698	 37B	JUMPI		 	 
- stack 0: 0x768
5699	 37C	PUSH2	039A	 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 1: 0x768
- stack 0: 0x39A
5700	 37F	JUMP		 	 
- stack 0: 0x768
5701	 39A	JUMPDEST		 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x768
5702	 39B	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
5703	 39D	ADD		 	 
- stack 0: 0x76C
5704	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
5705	 39F	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x1B5FF100114FFF001330013014D015C02F0000000B8F0F100CBFF0F01C80FF0
5706	 3A0	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0x1B5FF100114FFF001330013014D015C02F0000000B8F0F100CBFF0F01C80FF0
- stack 0: 0xF0
5707	 3A2	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x1B5
5708	 3A3	JUMP		 	 
- stack 0: 0x76C
5709	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_fff10eb7	  ;; # instr: lui t4,0xfff10(ignore imm)
- stack 0: 0x76C
5710	 1B6	PUSH4	fff10000	 	 
- stack 1: 0x76C
- stack 0: 0xFFF10000
5711	 1BB	PUSH2	03A0	 	 
- stack 2: 0x76C
- stack 1: 0xFFF10000
- stack 0: 0x3A0
5712	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x76C
5713	 1BF	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
5714	 1C1	ADD		 	 
- stack 0: 0x770
5715	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
5716	 1C3	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x114FFF001330013014D015C02F0000000B8F0F100CBFF0F01C80FF0009900FF
5717	 1C4	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x114FFF001330013014D015C02F0000000B8F0F100CBFF0F01C80FF0009900FF
- stack 0: 0xF0
5718	 1C6	SHR		 	 
- stack 1: 0x770
- stack 0: 0x114
5719	 1C7	JUMP		 	 
- stack 0: 0x770
5720	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x770
5721	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x770
- stack 0: 0x770
5722	 116	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x114FFF001330013014D015C02F0000000B8F0F100CBFF0F01C80FF0009900FF
5723	 117	PUSH1	E0	 	 
- stack 2: 0x770
- stack 1: 0x114FFF001330013014D015C02F0000000B8F0F100CBFF0F01C80FF0009900FF
- stack 0: 0xE0
5724	 119	SHR		 	 
- stack 1: 0x770
- stack 0: 0x114FFF0
5725	 11A	PUSH2	FFFF	 	 
- stack 2: 0x770
- stack 1: 0x114FFF0
- stack 0: 0xFFFF
5726	 11D	AND		 	 
- stack 1: 0x770
- stack 0: 0xFFF0
5727	 11E	PUSH1	01	 	 
- stack 2: 0x770
- stack 1: 0xFFF0
- stack 0: 0x1
5728	 120	SIGNEXTEND		 	 
- stack 1: 0x770
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
5729	 121	PUSH2	03A0	 	 
- stack 2: 0x770
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
5730	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x770
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFF10000
5731	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x770
- stack 0: 0xFFF0FFF0
5732	 126	PUSH2	03A0	 	 
- stack 2: 0x770
- stack 1: 0xFFF0FFF0
- stack 0: 0x3A0
5733	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x770
5734	 12A	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
5735	 12C	ADD		 	 
- stack 0: 0x774
5736	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
5737	 12E	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x1330013014D015C02F0000000B8F0F100CBFF0F01C80FF0009900FF03E60000
5738	 12F	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x1330013014D015C02F0000000B8F0F100CBFF0F01C80FF0009900FF03E60000
- stack 0: 0xF0
5739	 131	SHR		 	 
- stack 1: 0x774
- stack 0: 0x133
5740	 132	JUMP		 	 
- stack 0: 0x774
5741	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x774
5742	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x774
- stack 0: 0x774
5743	 135	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x1330013014D015C02F0000000B8F0F100CBFF0F01C80FF0009900FF03E60000
5744	 136	PUSH1	E0	 	 
- stack 2: 0x774
- stack 1: 0x1330013014D015C02F0000000B8F0F100CBFF0F01C80FF0009900FF03E60000
- stack 0: 0xE0
5745	 138	SHR		 	 
- stack 1: 0x774
- stack 0: 0x1330013
5746	 139	PUSH2	FFFF	 	 
- stack 2: 0x774
- stack 1: 0x1330013
- stack 0: 0xFFFF
5747	 13C	AND		 	 
- stack 1: 0x774
- stack 0: 0x13
5748	 13D	PUSH1	01	 	 
- stack 2: 0x774
- stack 1: 0x13
- stack 0: 0x1
5749	 13F	SIGNEXTEND		 	 
- stack 1: 0x774
- stack 0: 0x13
5750	 140	PUSH2	0380	 	 
- stack 2: 0x774
- stack 1: 0x13
- stack 0: 0x380
5751	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x774
5752	 144	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
5753	 146	ADD		 	 
- stack 0: 0x778
5754	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
5755	 148	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x14D015C02F0000000B8F0F100CBFF0F01C80FF0009900FF03E6000003E60000
5756	 149	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x14D015C02F0000000B8F0F100CBFF0F01C80FF0009900FF03E6000003E60000
- stack 0: 0xF0
5757	 14B	SHR		 	 
- stack 1: 0x778
- stack 0: 0x14D
5758	 14C	JUMP		 	 
- stack 0: 0x778
5759	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x778
5760	 14E	PUSH2	0060	 	 
- stack 1: 0x778
- stack 0: 0x60
5761	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x778
- stack 0: 0xFFF0FFF0
5762	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x778
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFFFFFFF
5763	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x778
- stack 0: 0xFFF0FFF0
5764	 158	PUSH2	03A0	 	 
- stack 2: 0x778
- stack 1: 0xFFF0FFF0
- stack 0: 0x3A0
5765	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x778
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFF0FFF0
5766	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x778
- stack 2: 0xFFF0FFF0
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFFFFFFF
5767	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x778
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFF0FFF0
5768	 162	SUB		 	 
- stack 1: 0x778
- stack 0: 0x0
5769	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x778
- stack 1: 0x0
- stack 0: 0x16B
5770	 166	JUMPI		 	 
- stack 0: 0x778
5771	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x778
- stack 0: 0x185
5772	 16A	JUMP		 	 
- stack 0: 0x778
5773	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x778
5774	 186	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
5775	 188	ADD		 	 
- stack 0: 0x77C
5776	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
5777	 18A	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x2F0000000B8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA0000
5778	 18B	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x2F0000000B8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA0000
- stack 0: 0xF0
5779	 18D	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x2F0
5780	 18E	JUMP		 	 
- stack 0: 0x77C
5781	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x77C
5782	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x77C
- stack 0: 0x77C
5783	 2F2	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x2F0000000B8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA0000
5784	 2F3	PUSH1	E0	 	 
- stack 2: 0x77C
- stack 1: 0x2F0000000B8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA0000
- stack 0: 0xE0
5785	 2F5	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x2F00000
5786	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x77C
- stack 1: 0x2F00000
- stack 0: 0xFFFF
5787	 2F9	AND		 	 
- stack 1: 0x77C
- stack 0: 0x0
5788	 2FA	PUSH1	01	 	 
- stack 2: 0x77C
- stack 1: 0x0
- stack 0: 0x1
5789	 2FC	SIGNEXTEND		 	 
- stack 1: 0x77C
- stack 0: 0x0
5790	 2FD	PUSH2	0080	 	 
- stack 2: 0x77C
- stack 1: 0x0
- stack 0: 0x80
5791	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x77C
5792	 301	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
5793	 303	ADD		 	 
- stack 0: 0x780
5794	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
5795	 305	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xB8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA000003290001
5796	 306	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0xB8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA000003290001
- stack 0: 0xF0
5797	 308	SHR		 	 
- stack 1: 0x780
- stack 0: 0xB8
5798	 309	JUMP		 	 
- stack 0: 0x780
5799	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x780
5800	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x780
- stack 0: 0xF0F1000
5801	 BE	PUSH2	0040	 	 
- stack 2: 0x780
- stack 1: 0xF0F1000
- stack 0: 0x40
5802	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x780
5803	 C2	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
5804	 C4	ADD		 	 
- stack 0: 0x784
5805	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
5806	 C6	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
5807	 C7	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
- stack 0: 0xF0
5808	 C9	SHR		 	 
- stack 1: 0x784
- stack 0: 0xCB
5809	 CA	JUMP		 	 
- stack 0: 0x784
5810	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x784
5811	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x784
- stack 0: 0x784
5812	 CD	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
5813	 CE	PUSH1	E0	 	 
- stack 2: 0x784
- stack 1: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
- stack 0: 0xE0
5814	 D0	SHR		 	 
- stack 1: 0x784
- stack 0: 0xCBFF0F
5815	 D1	PUSH2	FFFF	 	 
- stack 2: 0x784
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
5816	 D4	AND		 	 
- stack 1: 0x784
- stack 0: 0xFF0F
5817	 D5	PUSH1	01	 	 
- stack 2: 0x784
- stack 1: 0xFF0F
- stack 0: 0x1
5818	 D7	SIGNEXTEND		 	 
- stack 1: 0x784
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
5819	 D8	PUSH2	0040	 	 
- stack 2: 0x784
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
5820	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x784
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
5821	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x784
- stack 0: 0xF0F0F0F
5822	 DD	PUSH2	0040	 	 
- stack 2: 0x784
- stack 1: 0xF0F0F0F
- stack 0: 0x40
5823	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x784
5824	 E1	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
5825	 E3	ADD		 	 
- stack 0: 0x788
5826	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
5827	 E5	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x1C80FF0009900FF03E6000003E6000000EA000003290001034800020362FFDC
5828	 E6	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x1C80FF0009900FF03E6000003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
5829	 E8	SHR		 	 
- stack 1: 0x788
- stack 0: 0x1C8
5830	 E9	JUMP		 	 
- stack 0: 0x788
5831	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x788
5832	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x788
- stack 0: 0xFF0000
5833	 1CE	PUSH2	0020	 	 
- stack 2: 0x788
- stack 1: 0xFF0000
- stack 0: 0x20
5834	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x788
5835	 1D2	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
5836	 1D4	ADD		 	 
- stack 0: 0x78C
5837	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
5838	 1D6	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
5839	 1D7	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xF0
5840	 1D9	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x99
5841	 1DA	JUMP		 	 
- stack 0: 0x78C
5842	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x78C
5843	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
5844	 9B	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
5845	 9C	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xE0
5846	 9E	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x9900FF
5847	 9F	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0x9900FF
- stack 0: 0xFFFF
5848	 A2	AND		 	 
- stack 1: 0x78C
- stack 0: 0xFF
5849	 A3	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0xFF
- stack 0: 0x1
5850	 A5	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0xFF
5851	 A6	PUSH2	0020	 	 
- stack 2: 0x78C
- stack 1: 0xFF
- stack 0: 0x20
5852	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x78C
- stack 1: 0xFF
- stack 0: 0xFF0000
5853	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x78C
- stack 0: 0xFF00FF
5854	 AB	PUSH2	0020	 	 
- stack 2: 0x78C
- stack 1: 0xFF00FF
- stack 0: 0x20
5855	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x78C
5856	 AF	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
5857	 B1	ADD		 	 
- stack 0: 0x790
5858	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
5859	 B3	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
5860	 B4	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
- stack 0: 0xF0
5861	 B6	SHR		 	 
- stack 1: 0x790
- stack 0: 0x3E6
5862	 B7	JUMP		 	 
- stack 0: 0x790
5863	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x790
5864	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
5865	 3E8	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
5866	 3E9	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
- stack 0: 0xE0
5867	 3EB	SHR		 	 
- stack 1: 0x790
- stack 0: 0x3E60000
5868	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0x3E60000
- stack 0: 0xFFFF
5869	 3EF	AND		 	 
- stack 1: 0x790
- stack 0: 0x0
5870	 3F0	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0x0
- stack 0: 0x1
5871	 3F2	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0x0
5872	 3F3	POP		 	 
- stack 0: 0x790
5873	 3F4	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
5874	 3F6	ADD		 	 
- stack 0: 0x794
5875	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
5876	 3F8	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF01330014
5877	 3F9	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF01330014
- stack 0: 0xF0
5878	 3FB	SHR		 	 
- stack 1: 0x794
- stack 0: 0x3E6
5879	 3FC	JUMP		 	 
- stack 0: 0x794
5880	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x794
5881	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x794
- stack 0: 0x794
5882	 3E8	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF01330014
5883	 3E9	PUSH1	E0	 	 
- stack 2: 0x794
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF01330014
- stack 0: 0xE0
5884	 3EB	SHR		 	 
- stack 1: 0x794
- stack 0: 0x3E60000
5885	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x794
- stack 1: 0x3E60000
- stack 0: 0xFFFF
5886	 3EF	AND		 	 
- stack 1: 0x794
- stack 0: 0x0
5887	 3F0	PUSH1	01	 	 
- stack 2: 0x794
- stack 1: 0x0
- stack 0: 0x1
5888	 3F2	SIGNEXTEND		 	 
- stack 1: 0x794
- stack 0: 0x0
5889	 3F3	POP		 	 
- stack 0: 0x794
5890	 3F4	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
5891	 3F6	ADD		 	 
- stack 0: 0x798
5892	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
5893	 3F8	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF01330014014D0120
5894	 3F9	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF01330014014D0120
- stack 0: 0xF0
5895	 3FB	SHR		 	 
- stack 1: 0x798
- stack 0: 0xEA
5896	 3FC	JUMP		 	 
- stack 0: 0x798
5897	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x798
5898	 EB	PUSH2	0040	 	 
- stack 1: 0x798
- stack 0: 0x40
5899	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x798
- stack 0: 0xF0F0F0F
5900	 EF	PUSH2	0020	 	 
- stack 2: 0x798
- stack 1: 0xF0F0F0F
- stack 0: 0x20
5901	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x798
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
5902	 F3	OR		 	  ;; # OR
- stack 1: 0x798
- stack 0: 0xFFF0FFF
5903	 F4	PUSH2	0060	 	 
- stack 2: 0x798
- stack 1: 0xFFF0FFF
- stack 0: 0x60
5904	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x798
5905	 F8	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
5906	 FA	ADD		 	 
- stack 0: 0x79C
5907	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
5908	 FC	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF01330014014D012002F00000
5909	 FD	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF01330014014D012002F00000
- stack 0: 0xF0
5910	 FF	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x329
5911	 100	JUMP		 	 
- stack 0: 0x79C
5912	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x79C
5913	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
5914	 32B	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF01330014014D012002F00000
5915	 32C	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF01330014014D012002F00000
- stack 0: 0xE0
5916	 32E	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x3290001
5917	 32F	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x3290001
- stack 0: 0xFFFF
5918	 332	AND		 	 
- stack 1: 0x79C
- stack 0: 0x1
5919	 333	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x1
5920	 335	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0x1
5921	 336	PUSH2	0080	 	 
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x80
5922	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x0
5923	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x79C
- stack 0: 0x1
5924	 33B	PUSH2	0080	 	 
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x80
5925	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x79C
5926	 33F	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
5927	 341	ADD		 	 
- stack 0: 0x7A0
5928	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
5929	 343	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF01330014014D012002F0000000B8F0F1
5930	 344	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF01330014014D012002F0000000B8F0F1
- stack 0: 0xF0
5931	 346	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x348
5932	 347	JUMP		 	 
- stack 0: 0x7A0
5933	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7A0
5934	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
5935	 34A	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF01330014014D012002F0000000B8F0F1
5936	 34B	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF01330014014D012002F0000000B8F0F1
- stack 0: 0xE0
5937	 34D	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x3480002
5938	 34E	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x3480002
- stack 0: 0xFFFF
5939	 351	AND		 	 
- stack 1: 0x7A0
- stack 0: 0x2
5940	 352	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0x1
5941	 354	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x2
5942	 355	PUSH2	00A0	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0xA0
5943	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x7A0
5944	 359	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
5945	 35B	ADD		 	 
- stack 0: 0x7A4
5946	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
5947	 35D	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x362FFDC01DBFFF10114FFFF01330014014D012002F0000000B8F0F100CBFF0F
5948	 35E	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x362FFDC01DBFFF10114FFFF01330014014D012002F0000000B8F0F100CBFF0F
- stack 0: 0xF0
5949	 360	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x362
5950	 361	JUMP		 	 
- stack 0: 0x7A4
5951	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x7A4
5952	 363	PUSH2	0080	 	 
- stack 1: 0x7A4
- stack 0: 0x80
5953	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x7A4
- stack 0: 0x1
5954	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5955	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A4
- stack 0: 0x1
5956	 36D	PUSH2	00A0	 	 
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0xA0
5957	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x2
5958	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7A4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5959	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x2
5960	 377	SUB		 	 
- stack 1: 0x7A4
- stack 0: 0x1
5961	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x380
5962	 37B	JUMPI		 	 
- stack 0: 0x7A4
5963	 380	JUMPDEST		 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x7A4
5964	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A4
- stack 0: 0x7A4
5965	 382	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x362FFDC01DBFFF10114FFFF01330014014D012002F0000000B8F0F100CBFF0F
5966	 383	PUSH1	E0	 	 
- stack 2: 0x7A4
- stack 1: 0x362FFDC01DBFFF10114FFFF01330014014D012002F0000000B8F0F100CBFF0F
- stack 0: 0xE0
5967	 385	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x362FFDC
5968	 386	PUSH2	FFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x362FFDC
- stack 0: 0xFFFF
5969	 389	AND		 	 
- stack 1: 0x7A4
- stack 0: 0xFFDC
5970	 38A	PUSH1	01	 	 
- stack 2: 0x7A4
- stack 1: 0xFFDC
- stack 0: 0x1
5971	 38C	SIGNEXTEND		 	 
- stack 1: 0x7A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
5972	 38D	ADD		 	 
- stack 0: 0x780
5973	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x780
- stack 0: 0xFFFFFFFF
5974	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x780
5975	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
5976	 395	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xB8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA000003290001
5977	 396	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0xB8F0F100CBFF0F01C80FF0009900FF03E6000003E6000000EA000003290001
- stack 0: 0xF0
5978	 398	SHR		 	 
- stack 1: 0x780
- stack 0: 0xB8
5979	 399	JUMP		 	 
- stack 0: 0x780
5980	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x780
5981	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x780
- stack 0: 0xF0F1000
5982	 BE	PUSH2	0040	 	 
- stack 2: 0x780
- stack 1: 0xF0F1000
- stack 0: 0x40
5983	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x780
5984	 C2	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
5985	 C4	ADD		 	 
- stack 0: 0x784
5986	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
5987	 C6	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
5988	 C7	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
- stack 0: 0xF0
5989	 C9	SHR		 	 
- stack 1: 0x784
- stack 0: 0xCB
5990	 CA	JUMP		 	 
- stack 0: 0x784
5991	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x784
5992	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x784
- stack 0: 0x784
5993	 CD	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
5994	 CE	PUSH1	E0	 	 
- stack 2: 0x784
- stack 1: 0xCBFF0F01C80FF0009900FF03E6000003E6000000EA00000329000103480002
- stack 0: 0xE0
5995	 D0	SHR		 	 
- stack 1: 0x784
- stack 0: 0xCBFF0F
5996	 D1	PUSH2	FFFF	 	 
- stack 2: 0x784
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
5997	 D4	AND		 	 
- stack 1: 0x784
- stack 0: 0xFF0F
5998	 D5	PUSH1	01	 	 
- stack 2: 0x784
- stack 1: 0xFF0F
- stack 0: 0x1
5999	 D7	SIGNEXTEND		 	 
- stack 1: 0x784
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
6000	 D8	PUSH2	0040	 	 
- stack 2: 0x784
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
6001	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x784
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
6002	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x784
- stack 0: 0xF0F0F0F
6003	 DD	PUSH2	0040	 	 
- stack 2: 0x784
- stack 1: 0xF0F0F0F
- stack 0: 0x40
6004	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x784
6005	 E1	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
6006	 E3	ADD		 	 
- stack 0: 0x788
6007	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
6008	 E5	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x1C80FF0009900FF03E6000003E6000000EA000003290001034800020362FFDC
6009	 E6	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x1C80FF0009900FF03E6000003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
6010	 E8	SHR		 	 
- stack 1: 0x788
- stack 0: 0x1C8
6011	 E9	JUMP		 	 
- stack 0: 0x788
6012	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x788
6013	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x788
- stack 0: 0xFF0000
6014	 1CE	PUSH2	0020	 	 
- stack 2: 0x788
- stack 1: 0xFF0000
- stack 0: 0x20
6015	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x788
6016	 1D2	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
6017	 1D4	ADD		 	 
- stack 0: 0x78C
6018	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
6019	 1D6	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
6020	 1D7	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xF0
6021	 1D9	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x99
6022	 1DA	JUMP		 	 
- stack 0: 0x78C
6023	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x78C
6024	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
6025	 9B	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
6026	 9C	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0x9900FF03E6000003E6000000EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xE0
6027	 9E	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x9900FF
6028	 9F	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0x9900FF
- stack 0: 0xFFFF
6029	 A2	AND		 	 
- stack 1: 0x78C
- stack 0: 0xFF
6030	 A3	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0xFF
- stack 0: 0x1
6031	 A5	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0xFF
6032	 A6	PUSH2	0020	 	 
- stack 2: 0x78C
- stack 1: 0xFF
- stack 0: 0x20
6033	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x78C
- stack 1: 0xFF
- stack 0: 0xFF0000
6034	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x78C
- stack 0: 0xFF00FF
6035	 AB	PUSH2	0020	 	 
- stack 2: 0x78C
- stack 1: 0xFF00FF
- stack 0: 0x20
6036	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x78C
6037	 AF	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
6038	 B1	ADD		 	 
- stack 0: 0x790
6039	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
6040	 B3	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
6041	 B4	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
- stack 0: 0xF0
6042	 B6	SHR		 	 
- stack 1: 0x790
- stack 0: 0x3E6
6043	 B7	JUMP		 	 
- stack 0: 0x790
6044	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x790
6045	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
6046	 3E8	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
6047	 3E9	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0x3E6000003E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF
- stack 0: 0xE0
6048	 3EB	SHR		 	 
- stack 1: 0x790
- stack 0: 0x3E60000
6049	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6050	 3EF	AND		 	 
- stack 1: 0x790
- stack 0: 0x0
6051	 3F0	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0x0
- stack 0: 0x1
6052	 3F2	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0x0
6053	 3F3	POP		 	 
- stack 0: 0x790
6054	 3F4	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
6055	 3F6	ADD		 	 
- stack 0: 0x794
6056	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
6057	 3F8	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF01330014
6058	 3F9	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF01330014
- stack 0: 0xF0
6059	 3FB	SHR		 	 
- stack 1: 0x794
- stack 0: 0x3E6
6060	 3FC	JUMP		 	 
- stack 0: 0x794
6061	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x794
6062	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x794
- stack 0: 0x794
6063	 3E8	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF01330014
6064	 3E9	PUSH1	E0	 	 
- stack 2: 0x794
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01DBFFF10114FFFF01330014
- stack 0: 0xE0
6065	 3EB	SHR		 	 
- stack 1: 0x794
- stack 0: 0x3E60000
6066	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x794
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6067	 3EF	AND		 	 
- stack 1: 0x794
- stack 0: 0x0
6068	 3F0	PUSH1	01	 	 
- stack 2: 0x794
- stack 1: 0x0
- stack 0: 0x1
6069	 3F2	SIGNEXTEND		 	 
- stack 1: 0x794
- stack 0: 0x0
6070	 3F3	POP		 	 
- stack 0: 0x794
6071	 3F4	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
6072	 3F6	ADD		 	 
- stack 0: 0x798
6073	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
6074	 3F8	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF01330014014D0120
6075	 3F9	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF01330014014D0120
- stack 0: 0xF0
6076	 3FB	SHR		 	 
- stack 1: 0x798
- stack 0: 0xEA
6077	 3FC	JUMP		 	 
- stack 0: 0x798
6078	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x798
6079	 EB	PUSH2	0040	 	 
- stack 1: 0x798
- stack 0: 0x40
6080	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x798
- stack 0: 0xF0F0F0F
6081	 EF	PUSH2	0020	 	 
- stack 2: 0x798
- stack 1: 0xF0F0F0F
- stack 0: 0x20
6082	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x798
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
6083	 F3	OR		 	  ;; # OR
- stack 1: 0x798
- stack 0: 0xFFF0FFF
6084	 F4	PUSH2	0060	 	 
- stack 2: 0x798
- stack 1: 0xFFF0FFF
- stack 0: 0x60
6085	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x798
6086	 F8	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
6087	 FA	ADD		 	 
- stack 0: 0x79C
6088	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
6089	 FC	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF01330014014D012002F00000
6090	 FD	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF01330014014D012002F00000
- stack 0: 0xF0
6091	 FF	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x329
6092	 100	JUMP		 	 
- stack 0: 0x79C
6093	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x79C
6094	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
6095	 32B	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF01330014014D012002F00000
6096	 32C	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF01330014014D012002F00000
- stack 0: 0xE0
6097	 32E	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x3290001
6098	 32F	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x3290001
- stack 0: 0xFFFF
6099	 332	AND		 	 
- stack 1: 0x79C
- stack 0: 0x1
6100	 333	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x1
6101	 335	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0x1
6102	 336	PUSH2	0080	 	 
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x80
6103	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x1
6104	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x79C
- stack 0: 0x2
6105	 33B	PUSH2	0080	 	 
- stack 2: 0x79C
- stack 1: 0x2
- stack 0: 0x80
6106	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x79C
6107	 33F	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
6108	 341	ADD		 	 
- stack 0: 0x7A0
6109	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
6110	 343	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF01330014014D012002F0000000B8F0F1
6111	 344	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF01330014014D012002F0000000B8F0F1
- stack 0: 0xF0
6112	 346	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x348
6113	 347	JUMP		 	 
- stack 0: 0x7A0
6114	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7A0
6115	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
6116	 34A	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF01330014014D012002F0000000B8F0F1
6117	 34B	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF01330014014D012002F0000000B8F0F1
- stack 0: 0xE0
6118	 34D	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x3480002
6119	 34E	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x3480002
- stack 0: 0xFFFF
6120	 351	AND		 	 
- stack 1: 0x7A0
- stack 0: 0x2
6121	 352	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0x1
6122	 354	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x2
6123	 355	PUSH2	00A0	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0xA0
6124	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x7A0
6125	 359	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
6126	 35B	ADD		 	 
- stack 0: 0x7A4
6127	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
6128	 35D	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x362FFDC01DBFFF10114FFFF01330014014D012002F0000000B8F0F100CBFF0F
6129	 35E	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x362FFDC01DBFFF10114FFFF01330014014D012002F0000000B8F0F100CBFF0F
- stack 0: 0xF0
6130	 360	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x362
6131	 361	JUMP		 	 
- stack 0: 0x7A4
6132	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x7A4
6133	 363	PUSH2	0080	 	 
- stack 1: 0x7A4
- stack 0: 0x80
6134	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x7A4
- stack 0: 0x2
6135	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6136	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A4
- stack 0: 0x2
6137	 36D	PUSH2	00A0	 	 
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0xA0
6138	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0x2
6139	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7A4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6140	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0x2
6141	 377	SUB		 	 
- stack 1: 0x7A4
- stack 0: 0x0
6142	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x7A4
- stack 1: 0x0
- stack 0: 0x380
6143	 37B	JUMPI		 	 
- stack 0: 0x7A4
6144	 37C	PUSH2	039A	 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 1: 0x7A4
- stack 0: 0x39A
6145	 37F	JUMP		 	 
- stack 0: 0x7A4
6146	 39A	JUMPDEST		 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x7A4
6147	 39B	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
6148	 39D	ADD		 	 
- stack 0: 0x7A8
6149	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
6150	 39F	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x1DBFFF10114FFFF01330014014D012002F0000000B8F0F100CBFF0F03E60000
6151	 3A0	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x1DBFFF10114FFFF01330014014D012002F0000000B8F0F100CBFF0F03E60000
- stack 0: 0xF0
6152	 3A2	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x1DB
6153	 3A3	JUMP		 	 
- stack 0: 0x7A8
6154	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_fff1eb7	  ;; # instr: lui t4,0xfff1(ignore imm)
- stack 0: 0x7A8
6155	 1DC	PUSH4	0fff1000	 	 
- stack 1: 0x7A8
- stack 0: 0xFFF1000
6156	 1E1	PUSH2	03A0	 	 
- stack 2: 0x7A8
- stack 1: 0xFFF1000
- stack 0: 0x3A0
6157	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x7A8
6158	 1E5	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
6159	 1E7	ADD		 	 
- stack 0: 0x7AC
6160	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
6161	 1E9	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x114FFFF01330014014D012002F0000000B8F0F100CBFF0F03E600000086F010
6162	 1EA	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0x114FFFF01330014014D012002F0000000B8F0F100CBFF0F03E600000086F010
- stack 0: 0xF0
6163	 1EC	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x114
6164	 1ED	JUMP		 	 
- stack 0: 0x7AC
6165	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x7AC
6166	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7AC
- stack 0: 0x7AC
6167	 116	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x114FFFF01330014014D012002F0000000B8F0F100CBFF0F03E600000086F010
6168	 117	PUSH1	E0	 	 
- stack 2: 0x7AC
- stack 1: 0x114FFFF01330014014D012002F0000000B8F0F100CBFF0F03E600000086F010
- stack 0: 0xE0
6169	 119	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x114FFFF
6170	 11A	PUSH2	FFFF	 	 
- stack 2: 0x7AC
- stack 1: 0x114FFFF
- stack 0: 0xFFFF
6171	 11D	AND		 	 
- stack 1: 0x7AC
- stack 0: 0xFFFF
6172	 11E	PUSH1	01	 	 
- stack 2: 0x7AC
- stack 1: 0xFFFF
- stack 0: 0x1
6173	 120	SIGNEXTEND		 	 
- stack 1: 0x7AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
6174	 121	PUSH2	03A0	 	 
- stack 2: 0x7AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
6175	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x7AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFF1000
6176	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x7AC
- stack 0: 0xFFF0FFF
6177	 126	PUSH2	03A0	 	 
- stack 2: 0x7AC
- stack 1: 0xFFF0FFF
- stack 0: 0x3A0
6178	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x7AC
6179	 12A	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
6180	 12C	ADD		 	 
- stack 0: 0x7B0
6181	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
6182	 12E	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x1330014014D012002F0000000B8F0F100CBFF0F03E600000086F0100099FF00
6183	 12F	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x1330014014D012002F0000000B8F0F100CBFF0F03E600000086F0100099FF00
- stack 0: 0xF0
6184	 131	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x133
6185	 132	JUMP		 	 
- stack 0: 0x7B0
6186	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7B0
6187	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B0
- stack 0: 0x7B0
6188	 135	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x1330014014D012002F0000000B8F0F100CBFF0F03E600000086F0100099FF00
6189	 136	PUSH1	E0	 	 
- stack 2: 0x7B0
- stack 1: 0x1330014014D012002F0000000B8F0F100CBFF0F03E600000086F0100099FF00
- stack 0: 0xE0
6190	 138	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x1330014
6191	 139	PUSH2	FFFF	 	 
- stack 2: 0x7B0
- stack 1: 0x1330014
- stack 0: 0xFFFF
6192	 13C	AND		 	 
- stack 1: 0x7B0
- stack 0: 0x14
6193	 13D	PUSH1	01	 	 
- stack 2: 0x7B0
- stack 1: 0x14
- stack 0: 0x1
6194	 13F	SIGNEXTEND		 	 
- stack 1: 0x7B0
- stack 0: 0x14
6195	 140	PUSH2	0380	 	 
- stack 2: 0x7B0
- stack 1: 0x14
- stack 0: 0x380
6196	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x7B0
6197	 144	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
6198	 146	ADD		 	 
- stack 0: 0x7B4
6199	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
6200	 148	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x14D012002F0000000B8F0F100CBFF0F03E600000086F0100099FF0000EA0000
6201	 149	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0x14D012002F0000000B8F0F100CBFF0F03E600000086F0100099FF0000EA0000
- stack 0: 0xF0
6202	 14B	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x14D
6203	 14C	JUMP		 	 
- stack 0: 0x7B4
6204	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x7B4
6205	 14E	PUSH2	0060	 	 
- stack 1: 0x7B4
- stack 0: 0x60
6206	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x7B4
- stack 0: 0xFFF0FFF
6207	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B4
- stack 1: 0xFFF0FFF
- stack 0: 0xFFFFFFFF
6208	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B4
- stack 0: 0xFFF0FFF
6209	 158	PUSH2	03A0	 	 
- stack 2: 0x7B4
- stack 1: 0xFFF0FFF
- stack 0: 0x3A0
6210	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x7B4
- stack 1: 0xFFF0FFF
- stack 0: 0xFFF0FFF
6211	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7B4
- stack 2: 0xFFF0FFF
- stack 1: 0xFFF0FFF
- stack 0: 0xFFFFFFFF
6212	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7B4
- stack 1: 0xFFF0FFF
- stack 0: 0xFFF0FFF
6213	 162	SUB		 	 
- stack 1: 0x7B4
- stack 0: 0x0
6214	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x7B4
- stack 1: 0x0
- stack 0: 0x16B
6215	 166	JUMPI		 	 
- stack 0: 0x7B4
6216	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x7B4
- stack 0: 0x185
6217	 16A	JUMP		 	 
- stack 0: 0x7B4
6218	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x7B4
6219	 186	PUSH1	04	 	 
- stack 1: 0x7B4
- stack 0: 0x4
6220	 188	ADD		 	 
- stack 0: 0x7B8
6221	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
6222	 18A	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x2F0000000B8F0F100CBFF0F03E600000086F0100099FF0000EA000003290001
6223	 18B	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0x2F0000000B8F0F100CBFF0F03E600000086F0100099FF0000EA000003290001
- stack 0: 0xF0
6224	 18D	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x2F0
6225	 18E	JUMP		 	 
- stack 0: 0x7B8
6226	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7B8
6227	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B8
- stack 0: 0x7B8
6228	 2F2	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x2F0000000B8F0F100CBFF0F03E600000086F0100099FF0000EA000003290001
6229	 2F3	PUSH1	E0	 	 
- stack 2: 0x7B8
- stack 1: 0x2F0000000B8F0F100CBFF0F03E600000086F0100099FF0000EA000003290001
- stack 0: 0xE0
6230	 2F5	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x2F00000
6231	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x7B8
- stack 1: 0x2F00000
- stack 0: 0xFFFF
6232	 2F9	AND		 	 
- stack 1: 0x7B8
- stack 0: 0x0
6233	 2FA	PUSH1	01	 	 
- stack 2: 0x7B8
- stack 1: 0x0
- stack 0: 0x1
6234	 2FC	SIGNEXTEND		 	 
- stack 1: 0x7B8
- stack 0: 0x0
6235	 2FD	PUSH2	0080	 	 
- stack 2: 0x7B8
- stack 1: 0x0
- stack 0: 0x80
6236	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x7B8
6237	 301	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
6238	 303	ADD		 	 
- stack 0: 0x7BC
6239	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
6240	 305	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0xB8F0F100CBFF0F03E600000086F0100099FF0000EA00000329000103480002
6241	 306	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0xB8F0F100CBFF0F03E600000086F0100099FF0000EA00000329000103480002
- stack 0: 0xF0
6242	 308	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0xB8
6243	 309	JUMP		 	 
- stack 0: 0x7BC
6244	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x7BC
6245	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x7BC
- stack 0: 0xF0F1000
6246	 BE	PUSH2	0040	 	 
- stack 2: 0x7BC
- stack 1: 0xF0F1000
- stack 0: 0x40
6247	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x7BC
6248	 C2	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
6249	 C4	ADD		 	 
- stack 0: 0x7C0
6250	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
6251	 C6	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
6252	 C7	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
- stack 0: 0xF0
6253	 C9	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0xCB
6254	 CA	JUMP		 	 
- stack 0: 0x7C0
6255	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x7C0
6256	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
6257	 CD	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
6258	 CE	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
- stack 0: 0xE0
6259	 D0	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0xCBFF0F
6260	 D1	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
6261	 D4	AND		 	 
- stack 1: 0x7C0
- stack 0: 0xFF0F
6262	 D5	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0xFF0F
- stack 0: 0x1
6263	 D7	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
6264	 D8	PUSH2	0040	 	 
- stack 2: 0x7C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
6265	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x7C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
6266	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x7C0
- stack 0: 0xF0F0F0F
6267	 DD	PUSH2	0040	 	 
- stack 2: 0x7C0
- stack 1: 0xF0F0F0F
- stack 0: 0x40
6268	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7C0
6269	 E1	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
6270	 E3	ADD		 	 
- stack 0: 0x7C4
6271	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
6272	 E5	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F100
6273	 E6	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F100
- stack 0: 0xF0
6274	 E8	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x3E6
6275	 E9	JUMP		 	 
- stack 0: 0x7C4
6276	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C4
6277	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C4
- stack 0: 0x7C4
6278	 3E8	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F100
6279	 3E9	PUSH1	E0	 	 
- stack 2: 0x7C4
- stack 1: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F100
- stack 0: 0xE0
6280	 3EB	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x3E60000
6281	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x7C4
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6282	 3EF	AND		 	 
- stack 1: 0x7C4
- stack 0: 0x0
6283	 3F0	PUSH1	01	 	 
- stack 2: 0x7C4
- stack 1: 0x0
- stack 0: 0x1
6284	 3F2	SIGNEXTEND		 	 
- stack 1: 0x7C4
- stack 0: 0x0
6285	 3F3	POP		 	 
- stack 0: 0x7C4
6286	 3F4	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
6287	 3F6	ADD		 	 
- stack 0: 0x7C8
6288	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
6289	 3F8	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x86F0100099FF0000EA000003290001034800020362FFE00101F1000114FF0F
6290	 3F9	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x86F0100099FF0000EA000003290001034800020362FFE00101F1000114FF0F
- stack 0: 0xF0
6291	 3FB	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x86
6292	 3FC	JUMP		 	 
- stack 0: 0x7C8
6293	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x7C8
6294	 87	PUSH4	ff010000	 	 
- stack 1: 0x7C8
- stack 0: 0xFF010000
6295	 8C	PUSH2	0020	 	 
- stack 2: 0x7C8
- stack 1: 0xFF010000
- stack 0: 0x20
6296	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x7C8
6297	 90	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
6298	 92	ADD		 	 
- stack 0: 0x7CC
6299	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
6300	 94	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x99FF0000EA000003290001034800020362FFE00101F1000114FF0F01330015
6301	 95	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x99FF0000EA000003290001034800020362FFE00101F1000114FF0F01330015
- stack 0: 0xF0
6302	 97	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x99
6303	 98	JUMP		 	 
- stack 0: 0x7CC
6304	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x7CC
6305	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
6306	 9B	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x99FF0000EA000003290001034800020362FFE00101F1000114FF0F01330015
6307	 9C	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x99FF0000EA000003290001034800020362FFE00101F1000114FF0F01330015
- stack 0: 0xE0
6308	 9E	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x99FF00
6309	 9F	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x99FF00
- stack 0: 0xFFFF
6310	 A2	AND		 	 
- stack 1: 0x7CC
- stack 0: 0xFF00
6311	 A3	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0xFF00
- stack 0: 0x1
6312	 A5	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
6313	 A6	PUSH2	0020	 	 
- stack 2: 0x7CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
6314	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x7CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
6315	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x7CC
- stack 0: 0xFF00FF00
6316	 AB	PUSH2	0020	 	 
- stack 2: 0x7CC
- stack 1: 0xFF00FF00
- stack 0: 0x20
6317	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x7CC
6318	 AF	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
6319	 B1	ADD		 	 
- stack 0: 0x7D0
6320	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
6321	 B3	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0xEA000003290001034800020362FFE00101F1000114FF0F01330015014D00E8
6322	 B4	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0xEA000003290001034800020362FFE00101F1000114FF0F01330015014D00E8
- stack 0: 0xF0
6323	 B6	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0xEA
6324	 B7	JUMP		 	 
- stack 0: 0x7D0
6325	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x7D0
6326	 EB	PUSH2	0040	 	 
- stack 1: 0x7D0
- stack 0: 0x40
6327	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x7D0
- stack 0: 0xF0F0F0F
6328	 EF	PUSH2	0020	 	 
- stack 2: 0x7D0
- stack 1: 0xF0F0F0F
- stack 0: 0x20
6329	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x7D0
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
6330	 F3	OR		 	  ;; # OR
- stack 1: 0x7D0
- stack 0: 0xFF0FFF0F
6331	 F4	PUSH2	0060	 	 
- stack 2: 0x7D0
- stack 1: 0xFF0FFF0F
- stack 0: 0x60
6332	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x7D0
6333	 F8	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
6334	 FA	ADD		 	 
- stack 0: 0x7D4
6335	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
6336	 FC	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x3290001034800020362FFE00101F1000114FF0F01330015014D00E802F00000
6337	 FD	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x3290001034800020362FFE00101F1000114FF0F01330015014D00E802F00000
- stack 0: 0xF0
6338	 FF	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x329
6339	 100	JUMP		 	 
- stack 0: 0x7D4
6340	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7D4
6341	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
6342	 32B	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x3290001034800020362FFE00101F1000114FF0F01330015014D00E802F00000
6343	 32C	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0x3290001034800020362FFE00101F1000114FF0F01330015014D00E802F00000
- stack 0: 0xE0
6344	 32E	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x3290001
6345	 32F	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x3290001
- stack 0: 0xFFFF
6346	 332	AND		 	 
- stack 1: 0x7D4
- stack 0: 0x1
6347	 333	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x1
6348	 335	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0x1
6349	 336	PUSH2	0080	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x80
6350	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x0
6351	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x7D4
- stack 0: 0x1
6352	 33B	PUSH2	0080	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x80
6353	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x7D4
6354	 33F	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
6355	 341	ADD		 	 
- stack 0: 0x7D8
6356	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
6357	 343	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x34800020362FFE00101F1000114FF0F01330015014D00E802F0000001A20F0F
6358	 344	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x34800020362FFE00101F1000114FF0F01330015014D00E802F0000001A20F0F
- stack 0: 0xF0
6359	 346	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x348
6360	 347	JUMP		 	 
- stack 0: 0x7D8
6361	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7D8
6362	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D8
- stack 0: 0x7D8
6363	 34A	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x34800020362FFE00101F1000114FF0F01330015014D00E802F0000001A20F0F
6364	 34B	PUSH1	E0	 	 
- stack 2: 0x7D8
- stack 1: 0x34800020362FFE00101F1000114FF0F01330015014D00E802F0000001A20F0F
- stack 0: 0xE0
6365	 34D	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x3480002
6366	 34E	PUSH2	FFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x3480002
- stack 0: 0xFFFF
6367	 351	AND		 	 
- stack 1: 0x7D8
- stack 0: 0x2
6368	 352	PUSH1	01	 	 
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0x1
6369	 354	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0x2
6370	 355	PUSH2	00A0	 	 
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0xA0
6371	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x7D8
6372	 359	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
6373	 35B	ADD		 	 
- stack 0: 0x7DC
6374	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
6375	 35D	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x362FFE00101F1000114FF0F01330015014D00E802F0000001A20F0F00CB00F0
6376	 35E	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0x362FFE00101F1000114FF0F01330015014D00E802F0000001A20F0F00CB00F0
- stack 0: 0xF0
6377	 360	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x362
6378	 361	JUMP		 	 
- stack 0: 0x7DC
6379	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x7DC
6380	 363	PUSH2	0080	 	 
- stack 1: 0x7DC
- stack 0: 0x80
6381	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x7DC
- stack 0: 0x1
6382	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7DC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6383	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7DC
- stack 0: 0x1
6384	 36D	PUSH2	00A0	 	 
- stack 2: 0x7DC
- stack 1: 0x1
- stack 0: 0xA0
6385	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x7DC
- stack 1: 0x1
- stack 0: 0x2
6386	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7DC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6387	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7DC
- stack 1: 0x1
- stack 0: 0x2
6388	 377	SUB		 	 
- stack 1: 0x7DC
- stack 0: 0x1
6389	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x7DC
- stack 1: 0x1
- stack 0: 0x380
6390	 37B	JUMPI		 	 
- stack 0: 0x7DC
6391	 380	JUMPDEST		 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x7DC
6392	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7DC
- stack 0: 0x7DC
6393	 382	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x362FFE00101F1000114FF0F01330015014D00E802F0000001A20F0F00CB00F0
6394	 383	PUSH1	E0	 	 
- stack 2: 0x7DC
- stack 1: 0x362FFE00101F1000114FF0F01330015014D00E802F0000001A20F0F00CB00F0
- stack 0: 0xE0
6395	 385	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x362FFE0
6396	 386	PUSH2	FFFF	 	 
- stack 2: 0x7DC
- stack 1: 0x362FFE0
- stack 0: 0xFFFF
6397	 389	AND		 	 
- stack 1: 0x7DC
- stack 0: 0xFFE0
6398	 38A	PUSH1	01	 	 
- stack 2: 0x7DC
- stack 1: 0xFFE0
- stack 0: 0x1
6399	 38C	SIGNEXTEND		 	 
- stack 1: 0x7DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
6400	 38D	ADD		 	 
- stack 0: 0x7BC
6401	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7BC
- stack 0: 0xFFFFFFFF
6402	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7BC
6403	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
6404	 395	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0xB8F0F100CBFF0F03E600000086F0100099FF0000EA00000329000103480002
6405	 396	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0xB8F0F100CBFF0F03E600000086F0100099FF0000EA00000329000103480002
- stack 0: 0xF0
6406	 398	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0xB8
6407	 399	JUMP		 	 
- stack 0: 0x7BC
6408	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x7BC
6409	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x7BC
- stack 0: 0xF0F1000
6410	 BE	PUSH2	0040	 	 
- stack 2: 0x7BC
- stack 1: 0xF0F1000
- stack 0: 0x40
6411	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x7BC
6412	 C2	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
6413	 C4	ADD		 	 
- stack 0: 0x7C0
6414	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
6415	 C6	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
6416	 C7	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
- stack 0: 0xF0
6417	 C9	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0xCB
6418	 CA	JUMP		 	 
- stack 0: 0x7C0
6419	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x7C0
6420	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
6421	 CD	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
6422	 CE	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0xCBFF0F03E600000086F0100099FF0000EA000003290001034800020362FFE0
- stack 0: 0xE0
6423	 D0	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0xCBFF0F
6424	 D1	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
6425	 D4	AND		 	 
- stack 1: 0x7C0
- stack 0: 0xFF0F
6426	 D5	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0xFF0F
- stack 0: 0x1
6427	 D7	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
6428	 D8	PUSH2	0040	 	 
- stack 2: 0x7C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
6429	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x7C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
6430	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x7C0
- stack 0: 0xF0F0F0F
6431	 DD	PUSH2	0040	 	 
- stack 2: 0x7C0
- stack 1: 0xF0F0F0F
- stack 0: 0x40
6432	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7C0
6433	 E1	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
6434	 E3	ADD		 	 
- stack 0: 0x7C4
6435	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
6436	 E5	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F100
6437	 E6	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F100
- stack 0: 0xF0
6438	 E8	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x3E6
6439	 E9	JUMP		 	 
- stack 0: 0x7C4
6440	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C4
6441	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C4
- stack 0: 0x7C4
6442	 3E8	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F100
6443	 3E9	PUSH1	E0	 	 
- stack 2: 0x7C4
- stack 1: 0x3E600000086F0100099FF0000EA000003290001034800020362FFE00101F100
- stack 0: 0xE0
6444	 3EB	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x3E60000
6445	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x7C4
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6446	 3EF	AND		 	 
- stack 1: 0x7C4
- stack 0: 0x0
6447	 3F0	PUSH1	01	 	 
- stack 2: 0x7C4
- stack 1: 0x0
- stack 0: 0x1
6448	 3F2	SIGNEXTEND		 	 
- stack 1: 0x7C4
- stack 0: 0x0
6449	 3F3	POP		 	 
- stack 0: 0x7C4
6450	 3F4	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
6451	 3F6	ADD		 	 
- stack 0: 0x7C8
6452	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
6453	 3F8	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x86F0100099FF0000EA000003290001034800020362FFE00101F1000114FF0F
6454	 3F9	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x86F0100099FF0000EA000003290001034800020362FFE00101F1000114FF0F
- stack 0: 0xF0
6455	 3FB	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x86
6456	 3FC	JUMP		 	 
- stack 0: 0x7C8
6457	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x7C8
6458	 87	PUSH4	ff010000	 	 
- stack 1: 0x7C8
- stack 0: 0xFF010000
6459	 8C	PUSH2	0020	 	 
- stack 2: 0x7C8
- stack 1: 0xFF010000
- stack 0: 0x20
6460	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x7C8
6461	 90	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
6462	 92	ADD		 	 
- stack 0: 0x7CC
6463	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
6464	 94	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x99FF0000EA000003290001034800020362FFE00101F1000114FF0F01330015
6465	 95	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x99FF0000EA000003290001034800020362FFE00101F1000114FF0F01330015
- stack 0: 0xF0
6466	 97	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x99
6467	 98	JUMP		 	 
- stack 0: 0x7CC
6468	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x7CC
6469	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
6470	 9B	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x99FF0000EA000003290001034800020362FFE00101F1000114FF0F01330015
6471	 9C	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x99FF0000EA000003290001034800020362FFE00101F1000114FF0F01330015
- stack 0: 0xE0
6472	 9E	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x99FF00
6473	 9F	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x99FF00
- stack 0: 0xFFFF
6474	 A2	AND		 	 
- stack 1: 0x7CC
- stack 0: 0xFF00
6475	 A3	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0xFF00
- stack 0: 0x1
6476	 A5	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
6477	 A6	PUSH2	0020	 	 
- stack 2: 0x7CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
6478	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x7CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
6479	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x7CC
- stack 0: 0xFF00FF00
6480	 AB	PUSH2	0020	 	 
- stack 2: 0x7CC
- stack 1: 0xFF00FF00
- stack 0: 0x20
6481	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x7CC
6482	 AF	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
6483	 B1	ADD		 	 
- stack 0: 0x7D0
6484	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
6485	 B3	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0xEA000003290001034800020362FFE00101F1000114FF0F01330015014D00E8
6486	 B4	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0xEA000003290001034800020362FFE00101F1000114FF0F01330015014D00E8
- stack 0: 0xF0
6487	 B6	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0xEA
6488	 B7	JUMP		 	 
- stack 0: 0x7D0
6489	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x7D0
6490	 EB	PUSH2	0040	 	 
- stack 1: 0x7D0
- stack 0: 0x40
6491	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x7D0
- stack 0: 0xF0F0F0F
6492	 EF	PUSH2	0020	 	 
- stack 2: 0x7D0
- stack 1: 0xF0F0F0F
- stack 0: 0x20
6493	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x7D0
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
6494	 F3	OR		 	  ;; # OR
- stack 1: 0x7D0
- stack 0: 0xFF0FFF0F
6495	 F4	PUSH2	0060	 	 
- stack 2: 0x7D0
- stack 1: 0xFF0FFF0F
- stack 0: 0x60
6496	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x7D0
6497	 F8	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
6498	 FA	ADD		 	 
- stack 0: 0x7D4
6499	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
6500	 FC	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x3290001034800020362FFE00101F1000114FF0F01330015014D00E802F00000
6501	 FD	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x3290001034800020362FFE00101F1000114FF0F01330015014D00E802F00000
- stack 0: 0xF0
6502	 FF	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x329
6503	 100	JUMP		 	 
- stack 0: 0x7D4
6504	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7D4
6505	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
6506	 32B	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x3290001034800020362FFE00101F1000114FF0F01330015014D00E802F00000
6507	 32C	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0x3290001034800020362FFE00101F1000114FF0F01330015014D00E802F00000
- stack 0: 0xE0
6508	 32E	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x3290001
6509	 32F	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x3290001
- stack 0: 0xFFFF
6510	 332	AND		 	 
- stack 1: 0x7D4
- stack 0: 0x1
6511	 333	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x1
6512	 335	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0x1
6513	 336	PUSH2	0080	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x80
6514	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x1
6515	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x7D4
- stack 0: 0x2
6516	 33B	PUSH2	0080	 	 
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0x80
6517	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x7D4
6518	 33F	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
6519	 341	ADD		 	 
- stack 0: 0x7D8
6520	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
6521	 343	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x34800020362FFE00101F1000114FF0F01330015014D00E802F0000001A20F0F
6522	 344	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x34800020362FFE00101F1000114FF0F01330015014D00E802F0000001A20F0F
- stack 0: 0xF0
6523	 346	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x348
6524	 347	JUMP		 	 
- stack 0: 0x7D8
6525	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7D8
6526	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D8
- stack 0: 0x7D8
6527	 34A	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x34800020362FFE00101F1000114FF0F01330015014D00E802F0000001A20F0F
6528	 34B	PUSH1	E0	 	 
- stack 2: 0x7D8
- stack 1: 0x34800020362FFE00101F1000114FF0F01330015014D00E802F0000001A20F0F
- stack 0: 0xE0
6529	 34D	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x3480002
6530	 34E	PUSH2	FFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x3480002
- stack 0: 0xFFFF
6531	 351	AND		 	 
- stack 1: 0x7D8
- stack 0: 0x2
6532	 352	PUSH1	01	 	 
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0x1
6533	 354	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0x2
6534	 355	PUSH2	00A0	 	 
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0xA0
6535	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x7D8
6536	 359	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
6537	 35B	ADD		 	 
- stack 0: 0x7DC
6538	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
6539	 35D	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x362FFE00101F1000114FF0F01330015014D00E802F0000001A20F0F00CB00F0
6540	 35E	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0x362FFE00101F1000114FF0F01330015014D00E802F0000001A20F0F00CB00F0
- stack 0: 0xF0
6541	 360	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x362
6542	 361	JUMP		 	 
- stack 0: 0x7DC
6543	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x7DC
6544	 363	PUSH2	0080	 	 
- stack 1: 0x7DC
- stack 0: 0x80
6545	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x7DC
- stack 0: 0x2
6546	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7DC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6547	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7DC
- stack 0: 0x2
6548	 36D	PUSH2	00A0	 	 
- stack 2: 0x7DC
- stack 1: 0x2
- stack 0: 0xA0
6549	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x7DC
- stack 1: 0x2
- stack 0: 0x2
6550	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7DC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6551	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7DC
- stack 1: 0x2
- stack 0: 0x2
6552	 377	SUB		 	 
- stack 1: 0x7DC
- stack 0: 0x0
6553	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x7DC
- stack 1: 0x0
- stack 0: 0x380
6554	 37B	JUMPI		 	 
- stack 0: 0x7DC
6555	 37C	PUSH2	039A	 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 1: 0x7DC
- stack 0: 0x39A
6556	 37F	JUMP		 	 
- stack 0: 0x7DC
6557	 39A	JUMPDEST		 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x7DC
6558	 39B	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
6559	 39D	ADD		 	 
- stack 0: 0x7E0
6560	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
6561	 39F	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x101F1000114FF0F01330015014D00E802F0000001A20F0F00CB00F003E60000
6562	 3A0	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x101F1000114FF0F01330015014D00E802F0000001A20F0F00CB00F003E60000
- stack 0: 0xF0
6563	 3A2	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x101
6564	 3A3	JUMP		 	 
- stack 0: 0x7E0
6565	 101	JUMPDEST		 ;; __riscvimpl_LUI_ff100eb7	  ;; # instr: lui t4,0xff100(ignore imm)
- stack 0: 0x7E0
6566	 102	PUSH4	ff100000	 	 
- stack 1: 0x7E0
- stack 0: 0xFF100000
6567	 107	PUSH2	03A0	 	 
- stack 2: 0x7E0
- stack 1: 0xFF100000
- stack 0: 0x3A0
6568	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x7E0
6569	 10B	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
6570	 10D	ADD		 	 
- stack 0: 0x7E4
6571	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
6572	 10F	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x114FF0F01330015014D00E802F0000001A20F0F00CB00F003E60000018FFF01
6573	 110	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0x114FF0F01330015014D00E802F0000001A20F0F00CB00F003E60000018FFF01
- stack 0: 0xF0
6574	 112	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x114
6575	 113	JUMP		 	 
- stack 0: 0x7E4
6576	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x7E4
6577	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
6578	 116	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x114FF0F01330015014D00E802F0000001A20F0F00CB00F003E60000018FFF01
6579	 117	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0x114FF0F01330015014D00E802F0000001A20F0F00CB00F003E60000018FFF01
- stack 0: 0xE0
6580	 119	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x114FF0F
6581	 11A	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0x114FF0F
- stack 0: 0xFFFF
6582	 11D	AND		 	 
- stack 1: 0x7E4
- stack 0: 0xFF0F
6583	 11E	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0xFF0F
- stack 0: 0x1
6584	 120	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
6585	 121	PUSH2	03A0	 	 
- stack 2: 0x7E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x3A0
6586	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x7E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xFF100000
6587	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x7E4
- stack 0: 0xFF0FFF0F
6588	 126	PUSH2	03A0	 	 
- stack 2: 0x7E4
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
6589	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x7E4
6590	 12A	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
6591	 12C	ADD		 	 
- stack 0: 0x7E8
6592	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
6593	 12E	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x1330015014D00E802F0000001A20F0F00CB00F003E60000018FFF010099FFF0
6594	 12F	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x1330015014D00E802F0000001A20F0F00CB00F003E60000018FFF010099FFF0
- stack 0: 0xF0
6595	 131	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x133
6596	 132	JUMP		 	 
- stack 0: 0x7E8
6597	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7E8
6598	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E8
- stack 0: 0x7E8
6599	 135	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x1330015014D00E802F0000001A20F0F00CB00F003E60000018FFF010099FFF0
6600	 136	PUSH1	E0	 	 
- stack 2: 0x7E8
- stack 1: 0x1330015014D00E802F0000001A20F0F00CB00F003E60000018FFF010099FFF0
- stack 0: 0xE0
6601	 138	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x1330015
6602	 139	PUSH2	FFFF	 	 
- stack 2: 0x7E8
- stack 1: 0x1330015
- stack 0: 0xFFFF
6603	 13C	AND		 	 
- stack 1: 0x7E8
- stack 0: 0x15
6604	 13D	PUSH1	01	 	 
- stack 2: 0x7E8
- stack 1: 0x15
- stack 0: 0x1
6605	 13F	SIGNEXTEND		 	 
- stack 1: 0x7E8
- stack 0: 0x15
6606	 140	PUSH2	0380	 	 
- stack 2: 0x7E8
- stack 1: 0x15
- stack 0: 0x380
6607	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x7E8
6608	 144	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
6609	 146	ADD		 	 
- stack 0: 0x7EC
6610	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
6611	 148	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x14D00E802F0000001A20F0F00CB00F003E60000018FFF010099FFF003E60000
6612	 149	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x14D00E802F0000001A20F0F00CB00F003E60000018FFF010099FFF003E60000
- stack 0: 0xF0
6613	 14B	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x14D
6614	 14C	JUMP		 	 
- stack 0: 0x7EC
6615	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x7EC
6616	 14E	PUSH2	0060	 	 
- stack 1: 0x7EC
- stack 0: 0x60
6617	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x7EC
- stack 0: 0xFF0FFF0F
6618	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7EC
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
6619	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7EC
- stack 0: 0xFF0FFF0F
6620	 158	PUSH2	03A0	 	 
- stack 2: 0x7EC
- stack 1: 0xFF0FFF0F
- stack 0: 0x3A0
6621	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x7EC
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
6622	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7EC
- stack 2: 0xFF0FFF0F
- stack 1: 0xFF0FFF0F
- stack 0: 0xFFFFFFFF
6623	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7EC
- stack 1: 0xFF0FFF0F
- stack 0: 0xFF0FFF0F
6624	 162	SUB		 	 
- stack 1: 0x7EC
- stack 0: 0x0
6625	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x16B
6626	 166	JUMPI		 	 
- stack 0: 0x7EC
6627	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x7EC
- stack 0: 0x185
6628	 16A	JUMP		 	 
- stack 0: 0x7EC
6629	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x7EC
6630	 186	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
6631	 188	ADD		 	 
- stack 0: 0x7F0
6632	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
6633	 18A	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x2F0000001A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA0000
6634	 18B	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x2F0000001A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA0000
- stack 0: 0xF0
6635	 18D	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x2F0
6636	 18E	JUMP		 	 
- stack 0: 0x7F0
6637	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7F0
6638	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F0
- stack 0: 0x7F0
6639	 2F2	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x2F0000001A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA0000
6640	 2F3	PUSH1	E0	 	 
- stack 2: 0x7F0
- stack 1: 0x2F0000001A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA0000
- stack 0: 0xE0
6641	 2F5	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x2F00000
6642	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x7F0
- stack 1: 0x2F00000
- stack 0: 0xFFFF
6643	 2F9	AND		 	 
- stack 1: 0x7F0
- stack 0: 0x0
6644	 2FA	PUSH1	01	 	 
- stack 2: 0x7F0
- stack 1: 0x0
- stack 0: 0x1
6645	 2FC	SIGNEXTEND		 	 
- stack 1: 0x7F0
- stack 0: 0x0
6646	 2FD	PUSH2	0080	 	 
- stack 2: 0x7F0
- stack 1: 0x0
- stack 0: 0x80
6647	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x7F0
6648	 301	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
6649	 303	ADD		 	 
- stack 0: 0x7F4
6650	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
6651	 305	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x1A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA000003290001
6652	 306	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0x1A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA000003290001
- stack 0: 0xF0
6653	 308	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x1A2
6654	 309	JUMP		 	 
- stack 0: 0x7F4
6655	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x7F4
6656	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x7F4
- stack 0: 0xF0F0F000
6657	 1A8	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0xF0F0F000
- stack 0: 0x40
6658	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F4
6659	 1AC	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
6660	 1AE	ADD		 	 
- stack 0: 0x7F8
6661	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
6662	 1B0	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
6663	 1B1	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
- stack 0: 0xF0
6664	 1B3	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0xCB
6665	 1B4	JUMP		 	 
- stack 0: 0x7F8
6666	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x7F8
6667	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F8
- stack 0: 0x7F8
6668	 CD	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
6669	 CE	PUSH1	E0	 	 
- stack 2: 0x7F8
- stack 1: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
- stack 0: 0xE0
6670	 D0	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0xCB00F0
6671	 D1	PUSH2	FFFF	 	 
- stack 2: 0x7F8
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
6672	 D4	AND		 	 
- stack 1: 0x7F8
- stack 0: 0xF0
6673	 D5	PUSH1	01	 	 
- stack 2: 0x7F8
- stack 1: 0xF0
- stack 0: 0x1
6674	 D7	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0xF0
6675	 D8	PUSH2	0040	 	 
- stack 2: 0x7F8
- stack 1: 0xF0
- stack 0: 0x40
6676	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x7F8
- stack 1: 0xF0
- stack 0: 0xF0F0F000
6677	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x7F8
- stack 0: 0xF0F0F0F0
6678	 DD	PUSH2	0040	 	 
- stack 2: 0x7F8
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
6679	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F8
6680	 E1	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
6681	 E3	ADD		 	 
- stack 0: 0x7FC
6682	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
6683	 E5	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
6684	 E6	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
6685	 E8	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x3E6
6686	 E9	JUMP		 	 
- stack 0: 0x7FC
6687	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7FC
6688	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
6689	 3E8	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
6690	 3E9	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
- stack 0: 0xE0
6691	 3EB	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x3E60000
6692	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6693	 3EF	AND		 	 
- stack 1: 0x7FC
- stack 0: 0x0
6694	 3F0	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0x0
- stack 0: 0x1
6695	 3F2	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0x0
6696	 3F3	POP		 	 
- stack 0: 0x7FC
6697	 3F4	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
6698	 3F6	ADD		 	 
- stack 0: 0x800
6699	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
6700	 3F8	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFDC01B5FF10
6701	 3F9	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFDC01B5FF10
- stack 0: 0xF0
6702	 3FB	SHR		 	 
- stack 1: 0x800
- stack 0: 0x18F
6703	 3FC	JUMP		 	 
- stack 0: 0x800
6704	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x800
6705	 190	PUSH4	0ff01000	 	 
- stack 1: 0x800
- stack 0: 0xFF01000
6706	 195	PUSH2	0020	 	 
- stack 2: 0x800
- stack 1: 0xFF01000
- stack 0: 0x20
6707	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x800
6708	 199	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
6709	 19B	ADD		 	 
- stack 0: 0x804
6710	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
6711	 19D	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
6712	 19E	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
- stack 0: 0xF0
6713	 1A0	SHR		 	 
- stack 1: 0x804
- stack 0: 0x99
6714	 1A1	JUMP		 	 
- stack 0: 0x804
6715	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x804
6716	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
6717	 9B	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
6718	 9C	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
- stack 0: 0xE0
6719	 9E	SHR		 	 
- stack 1: 0x804
- stack 0: 0x99FFF0
6720	 9F	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
6721	 A2	AND		 	 
- stack 1: 0x804
- stack 0: 0xFFF0
6722	 A3	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0xFFF0
- stack 0: 0x1
6723	 A5	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
6724	 A6	PUSH2	0020	 	 
- stack 2: 0x804
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
6725	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x804
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
6726	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x804
- stack 0: 0xFF00FF0
6727	 AB	PUSH2	0020	 	 
- stack 2: 0x804
- stack 1: 0xFF00FF0
- stack 0: 0x20
6728	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x804
6729	 AF	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
6730	 B1	ADD		 	 
- stack 0: 0x808
6731	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
6732	 B3	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330016
6733	 B4	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330016
- stack 0: 0xF0
6734	 B6	SHR		 	 
- stack 1: 0x808
- stack 0: 0x3E6
6735	 B7	JUMP		 	 
- stack 0: 0x808
6736	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x808
6737	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x808
- stack 0: 0x808
6738	 3E8	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330016
6739	 3E9	PUSH1	E0	 	 
- stack 2: 0x808
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330016
- stack 0: 0xE0
6740	 3EB	SHR		 	 
- stack 1: 0x808
- stack 0: 0x3E60000
6741	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x808
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6742	 3EF	AND		 	 
- stack 1: 0x808
- stack 0: 0x0
6743	 3F0	PUSH1	01	 	 
- stack 2: 0x808
- stack 1: 0x0
- stack 0: 0x1
6744	 3F2	SIGNEXTEND		 	 
- stack 1: 0x808
- stack 0: 0x0
6745	 3F3	POP		 	 
- stack 0: 0x808
6746	 3F4	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
6747	 3F6	ADD		 	 
- stack 0: 0x80C
6748	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
6749	 3F8	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0xEA000003290001034800020362FFDC01B5FF100114FFF001330016014D00AC
6750	 3F9	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0xEA000003290001034800020362FFDC01B5FF100114FFF001330016014D00AC
- stack 0: 0xF0
6751	 3FB	SHR		 	 
- stack 1: 0x80C
- stack 0: 0xEA
6752	 3FC	JUMP		 	 
- stack 0: 0x80C
6753	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x80C
6754	 EB	PUSH2	0040	 	 
- stack 1: 0x80C
- stack 0: 0x40
6755	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x80C
- stack 0: 0xF0F0F0F0
6756	 EF	PUSH2	0020	 	 
- stack 2: 0x80C
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
6757	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x80C
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
6758	 F3	OR		 	  ;; # OR
- stack 1: 0x80C
- stack 0: 0xFFF0FFF0
6759	 F4	PUSH2	0060	 	 
- stack 2: 0x80C
- stack 1: 0xFFF0FFF0
- stack 0: 0x60
6760	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x80C
6761	 F8	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
6762	 FA	ADD		 	 
- stack 0: 0x810
6763	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
6764	 FC	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x3290001034800020362FFDC01B5FF100114FFF001330016014D00AC02F00000
6765	 FD	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0x3290001034800020362FFDC01B5FF100114FFF001330016014D00AC02F00000
- stack 0: 0xF0
6766	 FF	SHR		 	 
- stack 1: 0x810
- stack 0: 0x329
6767	 100	JUMP		 	 
- stack 0: 0x810
6768	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x810
6769	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x810
- stack 0: 0x810
6770	 32B	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x3290001034800020362FFDC01B5FF100114FFF001330016014D00AC02F00000
6771	 32C	PUSH1	E0	 	 
- stack 2: 0x810
- stack 1: 0x3290001034800020362FFDC01B5FF100114FFF001330016014D00AC02F00000
- stack 0: 0xE0
6772	 32E	SHR		 	 
- stack 1: 0x810
- stack 0: 0x3290001
6773	 32F	PUSH2	FFFF	 	 
- stack 2: 0x810
- stack 1: 0x3290001
- stack 0: 0xFFFF
6774	 332	AND		 	 
- stack 1: 0x810
- stack 0: 0x1
6775	 333	PUSH1	01	 	 
- stack 2: 0x810
- stack 1: 0x1
- stack 0: 0x1
6776	 335	SIGNEXTEND		 	 
- stack 1: 0x810
- stack 0: 0x1
6777	 336	PUSH2	0080	 	 
- stack 2: 0x810
- stack 1: 0x1
- stack 0: 0x80
6778	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x810
- stack 1: 0x1
- stack 0: 0x0
6779	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x810
- stack 0: 0x1
6780	 33B	PUSH2	0080	 	 
- stack 2: 0x810
- stack 1: 0x1
- stack 0: 0x80
6781	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x810
6782	 33F	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
6783	 341	ADD		 	 
- stack 0: 0x814
6784	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
6785	 343	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x34800020362FFDC01B5FF100114FFF001330016014D00AC02F0000000B8F0F1
6786	 344	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0x34800020362FFDC01B5FF100114FFF001330016014D00AC02F0000000B8F0F1
- stack 0: 0xF0
6787	 346	SHR		 	 
- stack 1: 0x814
- stack 0: 0x348
6788	 347	JUMP		 	 
- stack 0: 0x814
6789	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x814
6790	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x814
- stack 0: 0x814
6791	 34A	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x34800020362FFDC01B5FF100114FFF001330016014D00AC02F0000000B8F0F1
6792	 34B	PUSH1	E0	 	 
- stack 2: 0x814
- stack 1: 0x34800020362FFDC01B5FF100114FFF001330016014D00AC02F0000000B8F0F1
- stack 0: 0xE0
6793	 34D	SHR		 	 
- stack 1: 0x814
- stack 0: 0x3480002
6794	 34E	PUSH2	FFFF	 	 
- stack 2: 0x814
- stack 1: 0x3480002
- stack 0: 0xFFFF
6795	 351	AND		 	 
- stack 1: 0x814
- stack 0: 0x2
6796	 352	PUSH1	01	 	 
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0x1
6797	 354	SIGNEXTEND		 	 
- stack 1: 0x814
- stack 0: 0x2
6798	 355	PUSH2	00A0	 	 
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0xA0
6799	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x814
6800	 359	PUSH1	04	 	 
- stack 1: 0x814
- stack 0: 0x4
6801	 35B	ADD		 	 
- stack 0: 0x818
6802	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
6803	 35D	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x362FFDC01B5FF100114FFF001330016014D00AC02F0000000B8F0F100CBFF0F
6804	 35E	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x362FFDC01B5FF100114FFF001330016014D00AC02F0000000B8F0F100CBFF0F
- stack 0: 0xF0
6805	 360	SHR		 	 
- stack 1: 0x818
- stack 0: 0x362
6806	 361	JUMP		 	 
- stack 0: 0x818
6807	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x818
6808	 363	PUSH2	0080	 	 
- stack 1: 0x818
- stack 0: 0x80
6809	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x818
- stack 0: 0x1
6810	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x818
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6811	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x818
- stack 0: 0x1
6812	 36D	PUSH2	00A0	 	 
- stack 2: 0x818
- stack 1: 0x1
- stack 0: 0xA0
6813	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x818
- stack 1: 0x1
- stack 0: 0x2
6814	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x818
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6815	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x818
- stack 1: 0x1
- stack 0: 0x2
6816	 377	SUB		 	 
- stack 1: 0x818
- stack 0: 0x1
6817	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x818
- stack 1: 0x1
- stack 0: 0x380
6818	 37B	JUMPI		 	 
- stack 0: 0x818
6819	 380	JUMPDEST		 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x818
6820	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x818
- stack 0: 0x818
6821	 382	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x362FFDC01B5FF100114FFF001330016014D00AC02F0000000B8F0F100CBFF0F
6822	 383	PUSH1	E0	 	 
- stack 2: 0x818
- stack 1: 0x362FFDC01B5FF100114FFF001330016014D00AC02F0000000B8F0F100CBFF0F
- stack 0: 0xE0
6823	 385	SHR		 	 
- stack 1: 0x818
- stack 0: 0x362FFDC
6824	 386	PUSH2	FFFF	 	 
- stack 2: 0x818
- stack 1: 0x362FFDC
- stack 0: 0xFFFF
6825	 389	AND		 	 
- stack 1: 0x818
- stack 0: 0xFFDC
6826	 38A	PUSH1	01	 	 
- stack 2: 0x818
- stack 1: 0xFFDC
- stack 0: 0x1
6827	 38C	SIGNEXTEND		 	 
- stack 1: 0x818
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
6828	 38D	ADD		 	 
- stack 0: 0x7F4
6829	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7F4
- stack 0: 0xFFFFFFFF
6830	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7F4
6831	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
6832	 395	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x1A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA000003290001
6833	 396	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0x1A20F0F00CB00F003E60000018FFF010099FFF003E6000000EA000003290001
- stack 0: 0xF0
6834	 398	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x1A2
6835	 399	JUMP		 	 
- stack 0: 0x7F4
6836	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x7F4
6837	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x7F4
- stack 0: 0xF0F0F000
6838	 1A8	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0xF0F0F000
- stack 0: 0x40
6839	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F4
6840	 1AC	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
6841	 1AE	ADD		 	 
- stack 0: 0x7F8
6842	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
6843	 1B0	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
6844	 1B1	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
- stack 0: 0xF0
6845	 1B3	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0xCB
6846	 1B4	JUMP		 	 
- stack 0: 0x7F8
6847	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x7F8
6848	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F8
- stack 0: 0x7F8
6849	 CD	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
6850	 CE	PUSH1	E0	 	 
- stack 2: 0x7F8
- stack 1: 0xCB00F003E60000018FFF010099FFF003E6000000EA00000329000103480002
- stack 0: 0xE0
6851	 D0	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0xCB00F0
6852	 D1	PUSH2	FFFF	 	 
- stack 2: 0x7F8
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
6853	 D4	AND		 	 
- stack 1: 0x7F8
- stack 0: 0xF0
6854	 D5	PUSH1	01	 	 
- stack 2: 0x7F8
- stack 1: 0xF0
- stack 0: 0x1
6855	 D7	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0xF0
6856	 D8	PUSH2	0040	 	 
- stack 2: 0x7F8
- stack 1: 0xF0
- stack 0: 0x40
6857	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x7F8
- stack 1: 0xF0
- stack 0: 0xF0F0F000
6858	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x7F8
- stack 0: 0xF0F0F0F0
6859	 DD	PUSH2	0040	 	 
- stack 2: 0x7F8
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
6860	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F8
6861	 E1	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
6862	 E3	ADD		 	 
- stack 0: 0x7FC
6863	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
6864	 E5	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
6865	 E6	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
- stack 0: 0xF0
6866	 E8	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x3E6
6867	 E9	JUMP		 	 
- stack 0: 0x7FC
6868	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7FC
6869	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
6870	 3E8	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
6871	 3E9	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0x3E60000018FFF010099FFF003E6000000EA000003290001034800020362FFDC
- stack 0: 0xE0
6872	 3EB	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x3E60000
6873	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6874	 3EF	AND		 	 
- stack 1: 0x7FC
- stack 0: 0x0
6875	 3F0	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0x0
- stack 0: 0x1
6876	 3F2	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0x0
6877	 3F3	POP		 	 
- stack 0: 0x7FC
6878	 3F4	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
6879	 3F6	ADD		 	 
- stack 0: 0x800
6880	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
6881	 3F8	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFDC01B5FF10
6882	 3F9	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x18FFF010099FFF003E6000000EA000003290001034800020362FFDC01B5FF10
- stack 0: 0xF0
6883	 3FB	SHR		 	 
- stack 1: 0x800
- stack 0: 0x18F
6884	 3FC	JUMP		 	 
- stack 0: 0x800
6885	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x800
6886	 190	PUSH4	0ff01000	 	 
- stack 1: 0x800
- stack 0: 0xFF01000
6887	 195	PUSH2	0020	 	 
- stack 2: 0x800
- stack 1: 0xFF01000
- stack 0: 0x20
6888	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x800
6889	 199	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
6890	 19B	ADD		 	 
- stack 0: 0x804
6891	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
6892	 19D	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
6893	 19E	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
- stack 0: 0xF0
6894	 1A0	SHR		 	 
- stack 1: 0x804
- stack 0: 0x99
6895	 1A1	JUMP		 	 
- stack 0: 0x804
6896	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x804
6897	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
6898	 9B	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x99FFF003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
6899	 9C	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x99FFF003E6000000EA000003290001034800020362FFDC01B5FF100114FFF0
- stack 0: 0xE0
6900	 9E	SHR		 	 
- stack 1: 0x804
- stack 0: 0x99FFF0
6901	 9F	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
6902	 A2	AND		 	 
- stack 1: 0x804
- stack 0: 0xFFF0
6903	 A3	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0xFFF0
- stack 0: 0x1
6904	 A5	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
6905	 A6	PUSH2	0020	 	 
- stack 2: 0x804
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
6906	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x804
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
6907	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x804
- stack 0: 0xFF00FF0
6908	 AB	PUSH2	0020	 	 
- stack 2: 0x804
- stack 1: 0xFF00FF0
- stack 0: 0x20
6909	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x804
6910	 AF	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
6911	 B1	ADD		 	 
- stack 0: 0x808
6912	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
6913	 B3	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330016
6914	 B4	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330016
- stack 0: 0xF0
6915	 B6	SHR		 	 
- stack 1: 0x808
- stack 0: 0x3E6
6916	 B7	JUMP		 	 
- stack 0: 0x808
6917	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x808
6918	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x808
- stack 0: 0x808
6919	 3E8	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330016
6920	 3E9	PUSH1	E0	 	 
- stack 2: 0x808
- stack 1: 0x3E6000000EA000003290001034800020362FFDC01B5FF100114FFF001330016
- stack 0: 0xE0
6921	 3EB	SHR		 	 
- stack 1: 0x808
- stack 0: 0x3E60000
6922	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x808
- stack 1: 0x3E60000
- stack 0: 0xFFFF
6923	 3EF	AND		 	 
- stack 1: 0x808
- stack 0: 0x0
6924	 3F0	PUSH1	01	 	 
- stack 2: 0x808
- stack 1: 0x0
- stack 0: 0x1
6925	 3F2	SIGNEXTEND		 	 
- stack 1: 0x808
- stack 0: 0x0
6926	 3F3	POP		 	 
- stack 0: 0x808
6927	 3F4	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
6928	 3F6	ADD		 	 
- stack 0: 0x80C
6929	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
6930	 3F8	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0xEA000003290001034800020362FFDC01B5FF100114FFF001330016014D00AC
6931	 3F9	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0xEA000003290001034800020362FFDC01B5FF100114FFF001330016014D00AC
- stack 0: 0xF0
6932	 3FB	SHR		 	 
- stack 1: 0x80C
- stack 0: 0xEA
6933	 3FC	JUMP		 	 
- stack 0: 0x80C
6934	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x80C
6935	 EB	PUSH2	0040	 	 
- stack 1: 0x80C
- stack 0: 0x40
6936	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x80C
- stack 0: 0xF0F0F0F0
6937	 EF	PUSH2	0020	 	 
- stack 2: 0x80C
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
6938	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x80C
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
6939	 F3	OR		 	  ;; # OR
- stack 1: 0x80C
- stack 0: 0xFFF0FFF0
6940	 F4	PUSH2	0060	 	 
- stack 2: 0x80C
- stack 1: 0xFFF0FFF0
- stack 0: 0x60
6941	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x80C
6942	 F8	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
6943	 FA	ADD		 	 
- stack 0: 0x810
6944	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
6945	 FC	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x3290001034800020362FFDC01B5FF100114FFF001330016014D00AC02F00000
6946	 FD	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0x3290001034800020362FFDC01B5FF100114FFF001330016014D00AC02F00000
- stack 0: 0xF0
6947	 FF	SHR		 	 
- stack 1: 0x810
- stack 0: 0x329
6948	 100	JUMP		 	 
- stack 0: 0x810
6949	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x810
6950	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x810
- stack 0: 0x810
6951	 32B	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x3290001034800020362FFDC01B5FF100114FFF001330016014D00AC02F00000
6952	 32C	PUSH1	E0	 	 
- stack 2: 0x810
- stack 1: 0x3290001034800020362FFDC01B5FF100114FFF001330016014D00AC02F00000
- stack 0: 0xE0
6953	 32E	SHR		 	 
- stack 1: 0x810
- stack 0: 0x3290001
6954	 32F	PUSH2	FFFF	 	 
- stack 2: 0x810
- stack 1: 0x3290001
- stack 0: 0xFFFF
6955	 332	AND		 	 
- stack 1: 0x810
- stack 0: 0x1
6956	 333	PUSH1	01	 	 
- stack 2: 0x810
- stack 1: 0x1
- stack 0: 0x1
6957	 335	SIGNEXTEND		 	 
- stack 1: 0x810
- stack 0: 0x1
6958	 336	PUSH2	0080	 	 
- stack 2: 0x810
- stack 1: 0x1
- stack 0: 0x80
6959	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x810
- stack 1: 0x1
- stack 0: 0x1
6960	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x810
- stack 0: 0x2
6961	 33B	PUSH2	0080	 	 
- stack 2: 0x810
- stack 1: 0x2
- stack 0: 0x80
6962	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x810
6963	 33F	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
6964	 341	ADD		 	 
- stack 0: 0x814
6965	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
6966	 343	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x34800020362FFDC01B5FF100114FFF001330016014D00AC02F0000000B8F0F1
6967	 344	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0x34800020362FFDC01B5FF100114FFF001330016014D00AC02F0000000B8F0F1
- stack 0: 0xF0
6968	 346	SHR		 	 
- stack 1: 0x814
- stack 0: 0x348
6969	 347	JUMP		 	 
- stack 0: 0x814
6970	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x814
6971	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x814
- stack 0: 0x814
6972	 34A	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x34800020362FFDC01B5FF100114FFF001330016014D00AC02F0000000B8F0F1
6973	 34B	PUSH1	E0	 	 
- stack 2: 0x814
- stack 1: 0x34800020362FFDC01B5FF100114FFF001330016014D00AC02F0000000B8F0F1
- stack 0: 0xE0
6974	 34D	SHR		 	 
- stack 1: 0x814
- stack 0: 0x3480002
6975	 34E	PUSH2	FFFF	 	 
- stack 2: 0x814
- stack 1: 0x3480002
- stack 0: 0xFFFF
6976	 351	AND		 	 
- stack 1: 0x814
- stack 0: 0x2
6977	 352	PUSH1	01	 	 
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0x1
6978	 354	SIGNEXTEND		 	 
- stack 1: 0x814
- stack 0: 0x2
6979	 355	PUSH2	00A0	 	 
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0xA0
6980	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x814
6981	 359	PUSH1	04	 	 
- stack 1: 0x814
- stack 0: 0x4
6982	 35B	ADD		 	 
- stack 0: 0x818
6983	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
6984	 35D	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x362FFDC01B5FF100114FFF001330016014D00AC02F0000000B8F0F100CBFF0F
6985	 35E	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x362FFDC01B5FF100114FFF001330016014D00AC02F0000000B8F0F100CBFF0F
- stack 0: 0xF0
6986	 360	SHR		 	 
- stack 1: 0x818
- stack 0: 0x362
6987	 361	JUMP		 	 
- stack 0: 0x818
6988	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x818
6989	 363	PUSH2	0080	 	 
- stack 1: 0x818
- stack 0: 0x80
6990	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x818
- stack 0: 0x2
6991	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x818
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6992	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x818
- stack 0: 0x2
6993	 36D	PUSH2	00A0	 	 
- stack 2: 0x818
- stack 1: 0x2
- stack 0: 0xA0
6994	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x818
- stack 1: 0x2
- stack 0: 0x2
6995	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x818
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6996	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x818
- stack 1: 0x2
- stack 0: 0x2
6997	 377	SUB		 	 
- stack 1: 0x818
- stack 0: 0x0
6998	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x818
- stack 1: 0x0
- stack 0: 0x380
6999	 37B	JUMPI		 	 
- stack 0: 0x818
7000	 37C	PUSH2	039A	 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 1: 0x818
- stack 0: 0x39A
7001	 37F	JUMP		 	 
- stack 0: 0x818
7002	 39A	JUMPDEST		 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x818
7003	 39B	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
7004	 39D	ADD		 	 
- stack 0: 0x81C
7005	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
7006	 39F	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x1B5FF100114FFF001330016014D00AC02F0000000B8F0F100CBFF0F03E60000
7007	 3A0	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0x1B5FF100114FFF001330016014D00AC02F0000000B8F0F100CBFF0F03E60000
- stack 0: 0xF0
7008	 3A2	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x1B5
7009	 3A3	JUMP		 	 
- stack 0: 0x81C
7010	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_fff10eb7	  ;; # instr: lui t4,0xfff10(ignore imm)
- stack 0: 0x81C
7011	 1B6	PUSH4	fff10000	 	 
- stack 1: 0x81C
- stack 0: 0xFFF10000
7012	 1BB	PUSH2	03A0	 	 
- stack 2: 0x81C
- stack 1: 0xFFF10000
- stack 0: 0x3A0
7013	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x81C
7014	 1BF	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
7015	 1C1	ADD		 	 
- stack 0: 0x820
7016	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
7017	 1C3	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x114FFF001330016014D00AC02F0000000B8F0F100CBFF0F03E6000003E60000
7018	 1C4	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0x114FFF001330016014D00AC02F0000000B8F0F100CBFF0F03E6000003E60000
- stack 0: 0xF0
7019	 1C6	SHR		 	 
- stack 1: 0x820
- stack 0: 0x114
7020	 1C7	JUMP		 	 
- stack 0: 0x820
7021	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x820
7022	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x820
- stack 0: 0x820
7023	 116	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x114FFF001330016014D00AC02F0000000B8F0F100CBFF0F03E6000003E60000
7024	 117	PUSH1	E0	 	 
- stack 2: 0x820
- stack 1: 0x114FFF001330016014D00AC02F0000000B8F0F100CBFF0F03E6000003E60000
- stack 0: 0xE0
7025	 119	SHR		 	 
- stack 1: 0x820
- stack 0: 0x114FFF0
7026	 11A	PUSH2	FFFF	 	 
- stack 2: 0x820
- stack 1: 0x114FFF0
- stack 0: 0xFFFF
7027	 11D	AND		 	 
- stack 1: 0x820
- stack 0: 0xFFF0
7028	 11E	PUSH1	01	 	 
- stack 2: 0x820
- stack 1: 0xFFF0
- stack 0: 0x1
7029	 120	SIGNEXTEND		 	 
- stack 1: 0x820
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
7030	 121	PUSH2	03A0	 	 
- stack 2: 0x820
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
7031	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x820
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFFF10000
7032	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x820
- stack 0: 0xFFF0FFF0
7033	 126	PUSH2	03A0	 	 
- stack 2: 0x820
- stack 1: 0xFFF0FFF0
- stack 0: 0x3A0
7034	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x820
7035	 12A	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
7036	 12C	ADD		 	 
- stack 0: 0x824
7037	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
7038	 12E	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x1330016014D00AC02F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0
7039	 12F	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x1330016014D00AC02F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0
- stack 0: 0xF0
7040	 131	SHR		 	 
- stack 1: 0x824
- stack 0: 0x133
7041	 132	JUMP		 	 
- stack 0: 0x824
7042	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x824
7043	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x824
- stack 0: 0x824
7044	 135	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x1330016014D00AC02F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0
7045	 136	PUSH1	E0	 	 
- stack 2: 0x824
- stack 1: 0x1330016014D00AC02F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0
- stack 0: 0xE0
7046	 138	SHR		 	 
- stack 1: 0x824
- stack 0: 0x1330016
7047	 139	PUSH2	FFFF	 	 
- stack 2: 0x824
- stack 1: 0x1330016
- stack 0: 0xFFFF
7048	 13C	AND		 	 
- stack 1: 0x824
- stack 0: 0x16
7049	 13D	PUSH1	01	 	 
- stack 2: 0x824
- stack 1: 0x16
- stack 0: 0x1
7050	 13F	SIGNEXTEND		 	 
- stack 1: 0x824
- stack 0: 0x16
7051	 140	PUSH2	0380	 	 
- stack 2: 0x824
- stack 1: 0x16
- stack 0: 0x380
7052	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x824
7053	 144	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
7054	 146	ADD		 	 
- stack 0: 0x828
7055	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
7056	 148	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x14D00AC02F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0009900FF
7057	 149	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x14D00AC02F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0009900FF
- stack 0: 0xF0
7058	 14B	SHR		 	 
- stack 1: 0x828
- stack 0: 0x14D
7059	 14C	JUMP		 	 
- stack 0: 0x828
7060	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x828
7061	 14E	PUSH2	0060	 	 
- stack 1: 0x828
- stack 0: 0x60
7062	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x828
- stack 0: 0xFFF0FFF0
7063	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x828
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFFFFFFF
7064	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x828
- stack 0: 0xFFF0FFF0
7065	 158	PUSH2	03A0	 	 
- stack 2: 0x828
- stack 1: 0xFFF0FFF0
- stack 0: 0x3A0
7066	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x828
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFF0FFF0
7067	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x828
- stack 2: 0xFFF0FFF0
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFFFFFFF
7068	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x828
- stack 1: 0xFFF0FFF0
- stack 0: 0xFFF0FFF0
7069	 162	SUB		 	 
- stack 1: 0x828
- stack 0: 0x0
7070	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x828
- stack 1: 0x0
- stack 0: 0x16B
7071	 166	JUMPI		 	 
- stack 0: 0x828
7072	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x828
- stack 0: 0x185
7073	 16A	JUMP		 	 
- stack 0: 0x828
7074	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x828
7075	 186	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
7076	 188	ADD		 	 
- stack 0: 0x82C
7077	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
7078	 18A	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x2F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA0000
7079	 18B	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x2F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA0000
- stack 0: 0xF0
7080	 18D	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x2F0
7081	 18E	JUMP		 	 
- stack 0: 0x82C
7082	 2F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x82C
7083	 2F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x82C
- stack 0: 0x82C
7084	 2F2	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x2F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA0000
7085	 2F3	PUSH1	E0	 	 
- stack 2: 0x82C
- stack 1: 0x2F0000000B8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA0000
- stack 0: 0xE0
7086	 2F5	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x2F00000
7087	 2F6	PUSH2	FFFF	 	 
- stack 2: 0x82C
- stack 1: 0x2F00000
- stack 0: 0xFFFF
7088	 2F9	AND		 	 
- stack 1: 0x82C
- stack 0: 0x0
7089	 2FA	PUSH1	01	 	 
- stack 2: 0x82C
- stack 1: 0x0
- stack 0: 0x1
7090	 2FC	SIGNEXTEND		 	 
- stack 1: 0x82C
- stack 0: 0x0
7091	 2FD	PUSH2	0080	 	 
- stack 2: 0x82C
- stack 1: 0x0
- stack 0: 0x80
7092	 300	MSTORE		 	  ;; # store to x4
- stack 0: 0x82C
7093	 301	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
7094	 303	ADD		 	 
- stack 0: 0x830
7095	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
7096	 305	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xB8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA000003290001
7097	 306	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0xB8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA000003290001
- stack 0: 0xF0
7098	 308	SHR		 	 
- stack 1: 0x830
- stack 0: 0xB8
7099	 309	JUMP		 	 
- stack 0: 0x830
7100	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x830
7101	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x830
- stack 0: 0xF0F1000
7102	 BE	PUSH2	0040	 	 
- stack 2: 0x830
- stack 1: 0xF0F1000
- stack 0: 0x40
7103	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x830
7104	 C2	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
7105	 C4	ADD		 	 
- stack 0: 0x834
7106	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
7107	 C6	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
7108	 C7	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
- stack 0: 0xF0
7109	 C9	SHR		 	 
- stack 1: 0x834
- stack 0: 0xCB
7110	 CA	JUMP		 	 
- stack 0: 0x834
7111	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x834
7112	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x834
- stack 0: 0x834
7113	 CD	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
7114	 CE	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
- stack 0: 0xE0
7115	 D0	SHR		 	 
- stack 1: 0x834
- stack 0: 0xCBFF0F
7116	 D1	PUSH2	FFFF	 	 
- stack 2: 0x834
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
7117	 D4	AND		 	 
- stack 1: 0x834
- stack 0: 0xFF0F
7118	 D5	PUSH1	01	 	 
- stack 2: 0x834
- stack 1: 0xFF0F
- stack 0: 0x1
7119	 D7	SIGNEXTEND		 	 
- stack 1: 0x834
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
7120	 D8	PUSH2	0040	 	 
- stack 2: 0x834
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
7121	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x834
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
7122	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x834
- stack 0: 0xF0F0F0F
7123	 DD	PUSH2	0040	 	 
- stack 2: 0x834
- stack 1: 0xF0F0F0F
- stack 0: 0x40
7124	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x834
7125	 E1	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
7126	 E3	ADD		 	 
- stack 0: 0x838
7127	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
7128	 E5	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
7129	 E6	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
- stack 0: 0xF0
7130	 E8	SHR		 	 
- stack 1: 0x838
- stack 0: 0x3E6
7131	 E9	JUMP		 	 
- stack 0: 0x838
7132	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x838
7133	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x838
- stack 0: 0x838
7134	 3E8	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
7135	 3E9	PUSH1	E0	 	 
- stack 2: 0x838
- stack 1: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
- stack 0: 0xE0
7136	 3EB	SHR		 	 
- stack 1: 0x838
- stack 0: 0x3E60000
7137	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x838
- stack 1: 0x3E60000
- stack 0: 0xFFFF
7138	 3EF	AND		 	 
- stack 1: 0x838
- stack 0: 0x0
7139	 3F0	PUSH1	01	 	 
- stack 2: 0x838
- stack 1: 0x0
- stack 0: 0x1
7140	 3F2	SIGNEXTEND		 	 
- stack 1: 0x838
- stack 0: 0x0
7141	 3F3	POP		 	 
- stack 0: 0x838
7142	 3F4	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
7143	 3F6	ADD		 	 
- stack 0: 0x83C
7144	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
7145	 3F8	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DBFFF1
7146	 3F9	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xF0
7147	 3FB	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x3E6
7148	 3FC	JUMP		 	 
- stack 0: 0x83C
7149	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x83C
7150	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x83C
- stack 0: 0x83C
7151	 3E8	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DBFFF1
7152	 3E9	PUSH1	E0	 	 
- stack 2: 0x83C
- stack 1: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xE0
7153	 3EB	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x3E60000
7154	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x83C
- stack 1: 0x3E60000
- stack 0: 0xFFFF
7155	 3EF	AND		 	 
- stack 1: 0x83C
- stack 0: 0x0
7156	 3F0	PUSH1	01	 	 
- stack 2: 0x83C
- stack 1: 0x0
- stack 0: 0x1
7157	 3F2	SIGNEXTEND		 	 
- stack 1: 0x83C
- stack 0: 0x0
7158	 3F3	POP		 	 
- stack 0: 0x83C
7159	 3F4	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
7160	 3F6	ADD		 	 
- stack 0: 0x840
7161	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
7162	 3F8	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x1C80FF0009900FF00EA000003290001034800020362FFDC01DBFFF10114FFFF
7163	 3F9	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0x1C80FF0009900FF00EA000003290001034800020362FFDC01DBFFF10114FFFF
- stack 0: 0xF0
7164	 3FB	SHR		 	 
- stack 1: 0x840
- stack 0: 0x1C8
7165	 3FC	JUMP		 	 
- stack 0: 0x840
7166	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x840
7167	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x840
- stack 0: 0xFF0000
7168	 1CE	PUSH2	0020	 	 
- stack 2: 0x840
- stack 1: 0xFF0000
- stack 0: 0x20
7169	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x840
7170	 1D2	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
7171	 1D4	ADD		 	 
- stack 0: 0x844
7172	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
7173	 1D6	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x9900FF00EA000003290001034800020362FFDC01DBFFF10114FFFF01330017
7174	 1D7	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0x9900FF00EA000003290001034800020362FFDC01DBFFF10114FFFF01330017
- stack 0: 0xF0
7175	 1D9	SHR		 	 
- stack 1: 0x844
- stack 0: 0x99
7176	 1DA	JUMP		 	 
- stack 0: 0x844
7177	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x844
7178	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x844
- stack 0: 0x844
7179	 9B	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x9900FF00EA000003290001034800020362FFDC01DBFFF10114FFFF01330017
7180	 9C	PUSH1	E0	 	 
- stack 2: 0x844
- stack 1: 0x9900FF00EA000003290001034800020362FFDC01DBFFF10114FFFF01330017
- stack 0: 0xE0
7181	 9E	SHR		 	 
- stack 1: 0x844
- stack 0: 0x9900FF
7182	 9F	PUSH2	FFFF	 	 
- stack 2: 0x844
- stack 1: 0x9900FF
- stack 0: 0xFFFF
7183	 A2	AND		 	 
- stack 1: 0x844
- stack 0: 0xFF
7184	 A3	PUSH1	01	 	 
- stack 2: 0x844
- stack 1: 0xFF
- stack 0: 0x1
7185	 A5	SIGNEXTEND		 	 
- stack 1: 0x844
- stack 0: 0xFF
7186	 A6	PUSH2	0020	 	 
- stack 2: 0x844
- stack 1: 0xFF
- stack 0: 0x20
7187	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x844
- stack 1: 0xFF
- stack 0: 0xFF0000
7188	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x844
- stack 0: 0xFF00FF
7189	 AB	PUSH2	0020	 	 
- stack 2: 0x844
- stack 1: 0xFF00FF
- stack 0: 0x20
7190	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x844
7191	 AF	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
7192	 B1	ADD		 	 
- stack 0: 0x848
7193	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
7194	 B3	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF01330017014D0070
7195	 B4	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF01330017014D0070
- stack 0: 0xF0
7196	 B6	SHR		 	 
- stack 1: 0x848
- stack 0: 0xEA
7197	 B7	JUMP		 	 
- stack 0: 0x848
7198	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x848
7199	 EB	PUSH2	0040	 	 
- stack 1: 0x848
- stack 0: 0x40
7200	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x848
- stack 0: 0xF0F0F0F
7201	 EF	PUSH2	0020	 	 
- stack 2: 0x848
- stack 1: 0xF0F0F0F
- stack 0: 0x20
7202	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x848
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
7203	 F3	OR		 	  ;; # OR
- stack 1: 0x848
- stack 0: 0xFFF0FFF
7204	 F4	PUSH2	0060	 	 
- stack 2: 0x848
- stack 1: 0xFFF0FFF
- stack 0: 0x60
7205	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x848
7206	 F8	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
7207	 FA	ADD		 	 
- stack 0: 0x84C
7208	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
7209	 FC	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF01330017014D00700086F010
7210	 FD	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF01330017014D00700086F010
- stack 0: 0xF0
7211	 FF	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x329
7212	 100	JUMP		 	 
- stack 0: 0x84C
7213	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x84C
7214	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x84C
- stack 0: 0x84C
7215	 32B	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF01330017014D00700086F010
7216	 32C	PUSH1	E0	 	 
- stack 2: 0x84C
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF01330017014D00700086F010
- stack 0: 0xE0
7217	 32E	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x3290001
7218	 32F	PUSH2	FFFF	 	 
- stack 2: 0x84C
- stack 1: 0x3290001
- stack 0: 0xFFFF
7219	 332	AND		 	 
- stack 1: 0x84C
- stack 0: 0x1
7220	 333	PUSH1	01	 	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x1
7221	 335	SIGNEXTEND		 	 
- stack 1: 0x84C
- stack 0: 0x1
7222	 336	PUSH2	0080	 	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x80
7223	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x0
7224	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x84C
- stack 0: 0x1
7225	 33B	PUSH2	0080	 	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x80
7226	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x84C
7227	 33F	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
7228	 341	ADD		 	 
- stack 0: 0x850
7229	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
7230	 343	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF01330017014D00700086F0100099FF00
7231	 344	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF01330017014D00700086F0100099FF00
- stack 0: 0xF0
7232	 346	SHR		 	 
- stack 1: 0x850
- stack 0: 0x348
7233	 347	JUMP		 	 
- stack 0: 0x850
7234	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x850
7235	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x850
- stack 0: 0x850
7236	 34A	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF01330017014D00700086F0100099FF00
7237	 34B	PUSH1	E0	 	 
- stack 2: 0x850
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF01330017014D00700086F0100099FF00
- stack 0: 0xE0
7238	 34D	SHR		 	 
- stack 1: 0x850
- stack 0: 0x3480002
7239	 34E	PUSH2	FFFF	 	 
- stack 2: 0x850
- stack 1: 0x3480002
- stack 0: 0xFFFF
7240	 351	AND		 	 
- stack 1: 0x850
- stack 0: 0x2
7241	 352	PUSH1	01	 	 
- stack 2: 0x850
- stack 1: 0x2
- stack 0: 0x1
7242	 354	SIGNEXTEND		 	 
- stack 1: 0x850
- stack 0: 0x2
7243	 355	PUSH2	00A0	 	 
- stack 2: 0x850
- stack 1: 0x2
- stack 0: 0xA0
7244	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x850
7245	 359	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
7246	 35B	ADD		 	 
- stack 0: 0x854
7247	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
7248	 35D	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x362FFDC01DBFFF10114FFFF01330017014D00700086F0100099FF0003FD0000
7249	 35E	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x362FFDC01DBFFF10114FFFF01330017014D00700086F0100099FF0003FD0000
- stack 0: 0xF0
7250	 360	SHR		 	 
- stack 1: 0x854
- stack 0: 0x362
7251	 361	JUMP		 	 
- stack 0: 0x854
7252	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x854
7253	 363	PUSH2	0080	 	 
- stack 1: 0x854
- stack 0: 0x80
7254	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x854
- stack 0: 0x1
7255	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7256	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x854
- stack 0: 0x1
7257	 36D	PUSH2	00A0	 	 
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0xA0
7258	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x2
7259	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x854
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7260	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x2
7261	 377	SUB		 	 
- stack 1: 0x854
- stack 0: 0x1
7262	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x380
7263	 37B	JUMPI		 	 
- stack 0: 0x854
7264	 380	JUMPDEST		 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x854
7265	 381	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x854
- stack 0: 0x854
7266	 382	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x362FFDC01DBFFF10114FFFF01330017014D00700086F0100099FF0003FD0000
7267	 383	PUSH1	E0	 	 
- stack 2: 0x854
- stack 1: 0x362FFDC01DBFFF10114FFFF01330017014D00700086F0100099FF0003FD0000
- stack 0: 0xE0
7268	 385	SHR		 	 
- stack 1: 0x854
- stack 0: 0x362FFDC
7269	 386	PUSH2	FFFF	 	 
- stack 2: 0x854
- stack 1: 0x362FFDC
- stack 0: 0xFFFF
7270	 389	AND		 	 
- stack 1: 0x854
- stack 0: 0xFFDC
7271	 38A	PUSH1	01	 	 
- stack 2: 0x854
- stack 1: 0xFFDC
- stack 0: 0x1
7272	 38C	SIGNEXTEND		 	 
- stack 1: 0x854
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
7273	 38D	ADD		 	 
- stack 0: 0x830
7274	 38E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x830
- stack 0: 0xFFFFFFFF
7275	 393	AND		 	  ;; # mask to 32 bits
- stack 0: 0x830
7276	 394	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
7277	 395	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xB8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA000003290001
7278	 396	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0xB8F0F100CBFF0F03E6000003E6000001C80FF0009900FF00EA000003290001
- stack 0: 0xF0
7279	 398	SHR		 	 
- stack 1: 0x830
- stack 0: 0xB8
7280	 399	JUMP		 	 
- stack 0: 0x830
7281	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x830
7282	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x830
- stack 0: 0xF0F1000
7283	 BE	PUSH2	0040	 	 
- stack 2: 0x830
- stack 1: 0xF0F1000
- stack 0: 0x40
7284	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x830
7285	 C2	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
7286	 C4	ADD		 	 
- stack 0: 0x834
7287	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
7288	 C6	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
7289	 C7	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
- stack 0: 0xF0
7290	 C9	SHR		 	 
- stack 1: 0x834
- stack 0: 0xCB
7291	 CA	JUMP		 	 
- stack 0: 0x834
7292	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x834
7293	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x834
- stack 0: 0x834
7294	 CD	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
7295	 CE	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0xCBFF0F03E6000003E6000001C80FF0009900FF00EA00000329000103480002
- stack 0: 0xE0
7296	 D0	SHR		 	 
- stack 1: 0x834
- stack 0: 0xCBFF0F
7297	 D1	PUSH2	FFFF	 	 
- stack 2: 0x834
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
7298	 D4	AND		 	 
- stack 1: 0x834
- stack 0: 0xFF0F
7299	 D5	PUSH1	01	 	 
- stack 2: 0x834
- stack 1: 0xFF0F
- stack 0: 0x1
7300	 D7	SIGNEXTEND		 	 
- stack 1: 0x834
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
7301	 D8	PUSH2	0040	 	 
- stack 2: 0x834
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
7302	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x834
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
7303	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x834
- stack 0: 0xF0F0F0F
7304	 DD	PUSH2	0040	 	 
- stack 2: 0x834
- stack 1: 0xF0F0F0F
- stack 0: 0x40
7305	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x834
7306	 E1	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
7307	 E3	ADD		 	 
- stack 0: 0x838
7308	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
7309	 E5	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
7310	 E6	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
- stack 0: 0xF0
7311	 E8	SHR		 	 
- stack 1: 0x838
- stack 0: 0x3E6
7312	 E9	JUMP		 	 
- stack 0: 0x838
7313	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x838
7314	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x838
- stack 0: 0x838
7315	 3E8	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
7316	 3E9	PUSH1	E0	 	 
- stack 2: 0x838
- stack 1: 0x3E6000003E6000001C80FF0009900FF00EA000003290001034800020362FFDC
- stack 0: 0xE0
7317	 3EB	SHR		 	 
- stack 1: 0x838
- stack 0: 0x3E60000
7318	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x838
- stack 1: 0x3E60000
- stack 0: 0xFFFF
7319	 3EF	AND		 	 
- stack 1: 0x838
- stack 0: 0x0
7320	 3F0	PUSH1	01	 	 
- stack 2: 0x838
- stack 1: 0x0
- stack 0: 0x1
7321	 3F2	SIGNEXTEND		 	 
- stack 1: 0x838
- stack 0: 0x0
7322	 3F3	POP		 	 
- stack 0: 0x838
7323	 3F4	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
7324	 3F6	ADD		 	 
- stack 0: 0x83C
7325	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
7326	 3F8	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DBFFF1
7327	 3F9	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xF0
7328	 3FB	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x3E6
7329	 3FC	JUMP		 	 
- stack 0: 0x83C
7330	 3E6	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x83C
7331	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x83C
- stack 0: 0x83C
7332	 3E8	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DBFFF1
7333	 3E9	PUSH1	E0	 	 
- stack 2: 0x83C
- stack 1: 0x3E6000001C80FF0009900FF00EA000003290001034800020362FFDC01DBFFF1
- stack 0: 0xE0
7334	 3EB	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x3E60000
7335	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x83C
- stack 1: 0x3E60000
- stack 0: 0xFFFF
7336	 3EF	AND		 	 
- stack 1: 0x83C
- stack 0: 0x0
7337	 3F0	PUSH1	01	 	 
- stack 2: 0x83C
- stack 1: 0x0
- stack 0: 0x1
7338	 3F2	SIGNEXTEND		 	 
- stack 1: 0x83C
- stack 0: 0x0
7339	 3F3	POP		 	 
- stack 0: 0x83C
7340	 3F4	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
7341	 3F6	ADD		 	 
- stack 0: 0x840
7342	 3F7	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
7343	 3F8	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x1C80FF0009900FF00EA000003290001034800020362FFDC01DBFFF10114FFFF
7344	 3F9	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0x1C80FF0009900FF00EA000003290001034800020362FFDC01DBFFF10114FFFF
- stack 0: 0xF0
7345	 3FB	SHR		 	 
- stack 1: 0x840
- stack 0: 0x1C8
7346	 3FC	JUMP		 	 
- stack 0: 0x840
7347	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x840
7348	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x840
- stack 0: 0xFF0000
7349	 1CE	PUSH2	0020	 	 
- stack 2: 0x840
- stack 1: 0xFF0000
- stack 0: 0x20
7350	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x840
7351	 1D2	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
7352	 1D4	ADD		 	 
- stack 0: 0x844
7353	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
7354	 1D6	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x9900FF00EA000003290001034800020362FFDC01DBFFF10114FFFF01330017
7355	 1D7	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0x9900FF00EA000003290001034800020362FFDC01DBFFF10114FFFF01330017
- stack 0: 0xF0
7356	 1D9	SHR		 	 
- stack 1: 0x844
- stack 0: 0x99
7357	 1DA	JUMP		 	 
- stack 0: 0x844
7358	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x844
7359	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x844
- stack 0: 0x844
7360	 9B	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x9900FF00EA000003290001034800020362FFDC01DBFFF10114FFFF01330017
7361	 9C	PUSH1	E0	 	 
- stack 2: 0x844
- stack 1: 0x9900FF00EA000003290001034800020362FFDC01DBFFF10114FFFF01330017
- stack 0: 0xE0
7362	 9E	SHR		 	 
- stack 1: 0x844
- stack 0: 0x9900FF
7363	 9F	PUSH2	FFFF	 	 
- stack 2: 0x844
- stack 1: 0x9900FF
- stack 0: 0xFFFF
7364	 A2	AND		 	 
- stack 1: 0x844
- stack 0: 0xFF
7365	 A3	PUSH1	01	 	 
- stack 2: 0x844
- stack 1: 0xFF
- stack 0: 0x1
7366	 A5	SIGNEXTEND		 	 
- stack 1: 0x844
- stack 0: 0xFF
7367	 A6	PUSH2	0020	 	 
- stack 2: 0x844
- stack 1: 0xFF
- stack 0: 0x20
7368	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x844
- stack 1: 0xFF
- stack 0: 0xFF0000
7369	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x844
- stack 0: 0xFF00FF
7370	 AB	PUSH2	0020	 	 
- stack 2: 0x844
- stack 1: 0xFF00FF
- stack 0: 0x20
7371	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x844
7372	 AF	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
7373	 B1	ADD		 	 
- stack 0: 0x848
7374	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
7375	 B3	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF01330017014D0070
7376	 B4	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0xEA000003290001034800020362FFDC01DBFFF10114FFFF01330017014D0070
- stack 0: 0xF0
7377	 B6	SHR		 	 
- stack 1: 0x848
- stack 0: 0xEA
7378	 B7	JUMP		 	 
- stack 0: 0x848
7379	 EA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x848
7380	 EB	PUSH2	0040	 	 
- stack 1: 0x848
- stack 0: 0x40
7381	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x848
- stack 0: 0xF0F0F0F
7382	 EF	PUSH2	0020	 	 
- stack 2: 0x848
- stack 1: 0xF0F0F0F
- stack 0: 0x20
7383	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x848
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
7384	 F3	OR		 	  ;; # OR
- stack 1: 0x848
- stack 0: 0xFFF0FFF
7385	 F4	PUSH2	0060	 	 
- stack 2: 0x848
- stack 1: 0xFFF0FFF
- stack 0: 0x60
7386	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x848
7387	 F8	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
7388	 FA	ADD		 	 
- stack 0: 0x84C
7389	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
7390	 FC	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF01330017014D00700086F010
7391	 FD	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF01330017014D00700086F010
- stack 0: 0xF0
7392	 FF	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x329
7393	 100	JUMP		 	 
- stack 0: 0x84C
7394	 329	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x84C
7395	 32A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x84C
- stack 0: 0x84C
7396	 32B	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x3290001034800020362FFDC01DBFFF10114FFFF01330017014D00700086F010
7397	 32C	PUSH1	E0	 	 
- stack 2: 0x84C
- stack 1: 0x3290001034800020362FFDC01DBFFF10114FFFF01330017014D00700086F010
- stack 0: 0xE0
7398	 32E	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x3290001
7399	 32F	PUSH2	FFFF	 	 
- stack 2: 0x84C
- stack 1: 0x3290001
- stack 0: 0xFFFF
7400	 332	AND		 	 
- stack 1: 0x84C
- stack 0: 0x1
7401	 333	PUSH1	01	 	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x1
7402	 335	SIGNEXTEND		 	 
- stack 1: 0x84C
- stack 0: 0x1
7403	 336	PUSH2	0080	 	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x80
7404	 339	MLOAD		 	  ;; # read from x4
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x1
7405	 33A	ADD		 	  ;; # ADDI 4
- stack 1: 0x84C
- stack 0: 0x2
7406	 33B	PUSH2	0080	 	 
- stack 2: 0x84C
- stack 1: 0x2
- stack 0: 0x80
7407	 33E	MSTORE		 	  ;; # store to x4
- stack 0: 0x84C
7408	 33F	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
7409	 341	ADD		 	 
- stack 0: 0x850
7410	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
7411	 343	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF01330017014D00700086F0100099FF00
7412	 344	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF01330017014D00700086F0100099FF00
- stack 0: 0xF0
7413	 346	SHR		 	 
- stack 1: 0x850
- stack 0: 0x348
7414	 347	JUMP		 	 
- stack 0: 0x850
7415	 348	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x850
7416	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x850
- stack 0: 0x850
7417	 34A	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x34800020362FFDC01DBFFF10114FFFF01330017014D00700086F0100099FF00
7418	 34B	PUSH1	E0	 	 
- stack 2: 0x850
- stack 1: 0x34800020362FFDC01DBFFF10114FFFF01330017014D00700086F0100099FF00
- stack 0: 0xE0
7419	 34D	SHR		 	 
- stack 1: 0x850
- stack 0: 0x3480002
7420	 34E	PUSH2	FFFF	 	 
- stack 2: 0x850
- stack 1: 0x3480002
- stack 0: 0xFFFF
7421	 351	AND		 	 
- stack 1: 0x850
- stack 0: 0x2
7422	 352	PUSH1	01	 	 
- stack 2: 0x850
- stack 1: 0x2
- stack 0: 0x1
7423	 354	SIGNEXTEND		 	 
- stack 1: 0x850
- stack 0: 0x2
7424	 355	PUSH2	00A0	 	 
- stack 2: 0x850
- stack 1: 0x2
- stack 0: 0xA0
7425	 358	MSTORE		 	  ;; # store to x5
- stack 0: 0x850
7426	 359	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
7427	 35B	ADD		 	 
- stack 0: 0x854
7428	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
7429	 35D	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x362FFDC01DBFFF10114FFFF01330017014D00700086F0100099FF0003FD0000
7430	 35E	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x362FFDC01DBFFF10114FFFF01330017014D00700086F0100099FF0003FD0000
- stack 0: 0xF0
7431	 360	SHR		 	 
- stack 1: 0x854
- stack 0: 0x362
7432	 361	JUMP		 	 
- stack 0: 0x854
7433	 362	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x854
7434	 363	PUSH2	0080	 	 
- stack 1: 0x854
- stack 0: 0x80
7435	 366	MLOAD		 	  ;; # read from x4
- stack 1: 0x854
- stack 0: 0x2
7436	 367	PUSH4	FFFFFFFF	 	 
- stack 2: 0x854
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7437	 36C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x854
- stack 0: 0x2
7438	 36D	PUSH2	00A0	 	 
- stack 2: 0x854
- stack 1: 0x2
- stack 0: 0xA0
7439	 370	MLOAD		 	  ;; # read from x5
- stack 2: 0x854
- stack 1: 0x2
- stack 0: 0x2
7440	 371	PUSH4	FFFFFFFF	 	 
- stack 3: 0x854
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7441	 376	AND		 	  ;; # mask to 32 bits
- stack 2: 0x854
- stack 1: 0x2
- stack 0: 0x2
7442	 377	SUB		 	 
- stack 1: 0x854
- stack 0: 0x0
7443	 378	PUSH2	0380	 ;; _neq_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 2: 0x854
- stack 1: 0x0
- stack 0: 0x380
7444	 37B	JUMPI		 	 
- stack 0: 0x854
7445	 37C	PUSH2	039A	 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 1: 0x854
- stack 0: 0x39A
7446	 37F	JUMP		 	 
- stack 0: 0x854
7447	 39A	JUMPDEST		 ;; _neq_after_c7131667d3b731f0ce2f11107f71bbd11a6aadfc30d3995c9135509e2ec71fc4	 
- stack 0: 0x854
7448	 39B	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
7449	 39D	ADD		 	 
- stack 0: 0x858
7450	 39E	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
7451	 39F	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x1DBFFF10114FFFF01330017014D00700086F0100099FF0003FD000002DDF010
7452	 3A0	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x1DBFFF10114FFFF01330017014D00700086F0100099FF0003FD000002DDF010
- stack 0: 0xF0
7453	 3A2	SHR		 	 
- stack 1: 0x858
- stack 0: 0x1DB
7454	 3A3	JUMP		 	 
- stack 0: 0x858
7455	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_fff1eb7	  ;; # instr: lui t4,0xfff1(ignore imm)
- stack 0: 0x858
7456	 1DC	PUSH4	0fff1000	 	 
- stack 1: 0x858
- stack 0: 0xFFF1000
7457	 1E1	PUSH2	03A0	 	 
- stack 2: 0x858
- stack 1: 0xFFF1000
- stack 0: 0x3A0
7458	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x858
7459	 1E5	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
7460	 1E7	ADD		 	 
- stack 0: 0x85C
7461	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
7462	 1E9	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x114FFFF01330017014D00700086F0100099FF0003FD000002DDF0100114FF00
7463	 1EA	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x114FFFF01330017014D00700086F0100099FF0003FD000002DDF0100114FF00
- stack 0: 0xF0
7464	 1EC	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x114
7465	 1ED	JUMP		 	 
- stack 0: 0x85C
7466	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x85C
7467	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x85C
- stack 0: 0x85C
7468	 116	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x114FFFF01330017014D00700086F0100099FF0003FD000002DDF0100114FF00
7469	 117	PUSH1	E0	 	 
- stack 2: 0x85C
- stack 1: 0x114FFFF01330017014D00700086F0100099FF0003FD000002DDF0100114FF00
- stack 0: 0xE0
7470	 119	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x114FFFF
7471	 11A	PUSH2	FFFF	 	 
- stack 2: 0x85C
- stack 1: 0x114FFFF
- stack 0: 0xFFFF
7472	 11D	AND		 	 
- stack 1: 0x85C
- stack 0: 0xFFFF
7473	 11E	PUSH1	01	 	 
- stack 2: 0x85C
- stack 1: 0xFFFF
- stack 0: 0x1
7474	 120	SIGNEXTEND		 	 
- stack 1: 0x85C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7475	 121	PUSH2	03A0	 	 
- stack 2: 0x85C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
7476	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x85C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFF1000
7477	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x85C
- stack 0: 0xFFF0FFF
7478	 126	PUSH2	03A0	 	 
- stack 2: 0x85C
- stack 1: 0xFFF0FFF
- stack 0: 0x3A0
7479	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x85C
7480	 12A	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
7481	 12C	ADD		 	 
- stack 0: 0x860
7482	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
7483	 12E	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0x1330017014D00700086F0100099FF0003FD000002DDF0100114FF0001330018
7484	 12F	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0x1330017014D00700086F0100099FF0003FD000002DDF0100114FF0001330018
- stack 0: 0xF0
7485	 131	SHR		 	 
- stack 1: 0x860
- stack 0: 0x133
7486	 132	JUMP		 	 
- stack 0: 0x860
7487	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x860
7488	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x860
- stack 0: 0x860
7489	 135	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0x1330017014D00700086F0100099FF0003FD000002DDF0100114FF0001330018
7490	 136	PUSH1	E0	 	 
- stack 2: 0x860
- stack 1: 0x1330017014D00700086F0100099FF0003FD000002DDF0100114FF0001330018
- stack 0: 0xE0
7491	 138	SHR		 	 
- stack 1: 0x860
- stack 0: 0x1330017
7492	 139	PUSH2	FFFF	 	 
- stack 2: 0x860
- stack 1: 0x1330017
- stack 0: 0xFFFF
7493	 13C	AND		 	 
- stack 1: 0x860
- stack 0: 0x17
7494	 13D	PUSH1	01	 	 
- stack 2: 0x860
- stack 1: 0x17
- stack 0: 0x1
7495	 13F	SIGNEXTEND		 	 
- stack 1: 0x860
- stack 0: 0x17
7496	 140	PUSH2	0380	 	 
- stack 2: 0x860
- stack 1: 0x17
- stack 0: 0x380
7497	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x860
7498	 144	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
7499	 146	ADD		 	 
- stack 0: 0x864
7500	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
7501	 148	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x14D00700086F0100099FF0003FD000002DDF0100114FF000133001802840054
7502	 149	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0x14D00700086F0100099FF0003FD000002DDF0100114FF000133001802840054
- stack 0: 0xF0
7503	 14B	SHR		 	 
- stack 1: 0x864
- stack 0: 0x14D
7504	 14C	JUMP		 	 
- stack 0: 0x864
7505	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a4(ignore imm)
- stack 0: 0x864
7506	 14E	PUSH2	0060	 	 
- stack 1: 0x864
- stack 0: 0x60
7507	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x864
- stack 0: 0xFFF0FFF
7508	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x864
- stack 1: 0xFFF0FFF
- stack 0: 0xFFFFFFFF
7509	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x864
- stack 0: 0xFFF0FFF
7510	 158	PUSH2	03A0	 	 
- stack 2: 0x864
- stack 1: 0xFFF0FFF
- stack 0: 0x3A0
7511	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x864
- stack 1: 0xFFF0FFF
- stack 0: 0xFFF0FFF
7512	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x864
- stack 2: 0xFFF0FFF
- stack 1: 0xFFF0FFF
- stack 0: 0xFFFFFFFF
7513	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x864
- stack 1: 0xFFF0FFF
- stack 0: 0xFFF0FFF
7514	 162	SUB		 	 
- stack 1: 0x864
- stack 0: 0x0
7515	 163	PUSH2	016B	 ;; _neq_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 2: 0x864
- stack 1: 0x0
- stack 0: 0x16B
7516	 166	JUMPI		 	 
- stack 0: 0x864
7517	 167	PUSH2	0185	 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 1: 0x864
- stack 0: 0x185
7518	 16A	JUMP		 	 
- stack 0: 0x864
7519	 185	JUMPDEST		 ;; _neq_after_593e4c9fea73ca2e0f3f4d49a1e14d0b6c8e199b329186d378ce20e7f64af6f5	 
- stack 0: 0x864
7520	 186	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
7521	 188	ADD		 	 
- stack 0: 0x868
7522	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
7523	 18A	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x86F0100099FF0003FD000002DDF0100114FF00013300180284005401C80FF0
7524	 18B	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0x86F0100099FF0003FD000002DDF0100114FF00013300180284005401C80FF0
- stack 0: 0xF0
7525	 18D	SHR		 	 
- stack 1: 0x868
- stack 0: 0x86
7526	 18E	JUMP		 	 
- stack 0: 0x868
7527	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x868
7528	 87	PUSH4	ff010000	 	 
- stack 1: 0x868
- stack 0: 0xFF010000
7529	 8C	PUSH2	0020	 	 
- stack 2: 0x868
- stack 1: 0xFF010000
- stack 0: 0x20
7530	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x868
7531	 90	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
7532	 92	ADD		 	 
- stack 0: 0x86C
7533	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
7534	 94	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x99FF0003FD000002DDF0100114FF00013300180284005401C80FF0009900FF
7535	 95	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0x99FF0003FD000002DDF0100114FF00013300180284005401C80FF0009900FF
- stack 0: 0xF0
7536	 97	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x99
7537	 98	JUMP		 	 
- stack 0: 0x86C
7538	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x86C
7539	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x86C
- stack 0: 0x86C
7540	 9B	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x99FF0003FD000002DDF0100114FF00013300180284005401C80FF0009900FF
7541	 9C	PUSH1	E0	 	 
- stack 2: 0x86C
- stack 1: 0x99FF0003FD000002DDF0100114FF00013300180284005401C80FF0009900FF
- stack 0: 0xE0
7542	 9E	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x99FF00
7543	 9F	PUSH2	FFFF	 	 
- stack 2: 0x86C
- stack 1: 0x99FF00
- stack 0: 0xFFFF
7544	 A2	AND		 	 
- stack 1: 0x86C
- stack 0: 0xFF00
7545	 A3	PUSH1	01	 	 
- stack 2: 0x86C
- stack 1: 0xFF00
- stack 0: 0x1
7546	 A5	SIGNEXTEND		 	 
- stack 1: 0x86C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
7547	 A6	PUSH2	0020	 	 
- stack 2: 0x86C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
7548	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x86C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
7549	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x86C
- stack 0: 0xFF00FF00
7550	 AB	PUSH2	0020	 	 
- stack 2: 0x86C
- stack 1: 0xFF00FF00
- stack 0: 0x20
7551	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x86C
7552	 AF	PUSH1	04	 	 
- stack 1: 0x86C
- stack 0: 0x4
7553	 B1	ADD		 	 
- stack 0: 0x870
7554	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
7555	 B3	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x3FD000002DDF0100114FF00013300180284005401C80FF0009900FF04120000
7556	 B4	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0x3FD000002DDF0100114FF00013300180284005401C80FF0009900FF04120000
- stack 0: 0xF0
7557	 B6	SHR		 	 
- stack 1: 0x870
- stack 0: 0x3FD
7558	 B7	JUMP		 	 
- stack 0: 0x870
7559	 3FD	JUMPDEST		 ;; __riscvimpl_OR_2_0_1	  ;; # instr: or sp,zero,ra(ignore imm)
- stack 0: 0x870
7560	 3FE	PUSH2	0020	 	 
- stack 1: 0x870
- stack 0: 0x20
7561	 401	MLOAD		 	  ;; # read from x1
- stack 1: 0x870
- stack 0: 0xFF00FF00
7562	 402	PUSH1	00	 	 
- stack 2: 0x870
- stack 1: 0xFF00FF00
- stack 0: 0x0
7563	 404	OR		 	  ;; # OR
- stack 1: 0x870
- stack 0: 0xFF00FF00
7564	 405	PUSH2	0040	 	 
- stack 2: 0x870
- stack 1: 0xFF00FF00
- stack 0: 0x40
7565	 408	MSTORE		 	  ;; # store to x2
- stack 0: 0x870
7566	 409	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
7567	 40B	ADD		 	 
- stack 0: 0x874
7568	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
7569	 40D	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x2DDF0100114FF00013300180284005401C80FF0009900FF0412000004270FF0
7570	 40E	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0x2DDF0100114FF00013300180284005401C80FF0009900FF0412000004270FF0
- stack 0: 0xF0
7571	 410	SHR		 	 
- stack 1: 0x874
- stack 0: 0x2DD
7572	 411	JUMP		 	 
- stack 0: 0x874
7573	 2DD	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x874
7574	 2DE	PUSH4	ff010000	 	 
- stack 1: 0x874
- stack 0: 0xFF010000
7575	 2E3	PUSH2	03A0	 	 
- stack 2: 0x874
- stack 1: 0xFF010000
- stack 0: 0x3A0
7576	 2E6	MSTORE		 	  ;; # store to x29
- stack 0: 0x874
7577	 2E7	PUSH1	04	 	 
- stack 1: 0x874
- stack 0: 0x4
7578	 2E9	ADD		 	 
- stack 0: 0x878
7579	 2EA	DUP1		 	  ;; # executing pc
- stack 1: 0x878
- stack 0: 0x878
7580	 2EB	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x114FF00013300180284005401C80FF0009900FF0412000004270FF0011400FF
7581	 2EC	PUSH1	F0	 	 
- stack 2: 0x878
- stack 1: 0x114FF00013300180284005401C80FF0009900FF0412000004270FF0011400FF
- stack 0: 0xF0
7582	 2EE	SHR		 	 
- stack 1: 0x878
- stack 0: 0x114
7583	 2EF	JUMP		 	 
- stack 0: 0x878
7584	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x878
7585	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x878
- stack 0: 0x878
7586	 116	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x114FF00013300180284005401C80FF0009900FF0412000004270FF0011400FF
7587	 117	PUSH1	E0	 	 
- stack 2: 0x878
- stack 1: 0x114FF00013300180284005401C80FF0009900FF0412000004270FF0011400FF
- stack 0: 0xE0
7588	 119	SHR		 	 
- stack 1: 0x878
- stack 0: 0x114FF00
7589	 11A	PUSH2	FFFF	 	 
- stack 2: 0x878
- stack 1: 0x114FF00
- stack 0: 0xFFFF
7590	 11D	AND		 	 
- stack 1: 0x878
- stack 0: 0xFF00
7591	 11E	PUSH1	01	 	 
- stack 2: 0x878
- stack 1: 0xFF00
- stack 0: 0x1
7592	 120	SIGNEXTEND		 	 
- stack 1: 0x878
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
7593	 121	PUSH2	03A0	 	 
- stack 2: 0x878
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
7594	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x878
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
7595	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x878
- stack 0: 0xFF00FF00
7596	 126	PUSH2	03A0	 	 
- stack 2: 0x878
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
7597	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x878
7598	 12A	PUSH1	04	 	 
- stack 1: 0x878
- stack 0: 0x4
7599	 12C	ADD		 	 
- stack 0: 0x87C
7600	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x87C
- stack 0: 0x87C
7601	 12E	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x13300180284005401C80FF0009900FF0412000004270FF0011400FF01330019
7602	 12F	PUSH1	F0	 	 
- stack 2: 0x87C
- stack 1: 0x13300180284005401C80FF0009900FF0412000004270FF0011400FF01330019
- stack 0: 0xF0
7603	 131	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x133
7604	 132	JUMP		 	 
- stack 0: 0x87C
7605	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x87C
7606	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x87C
- stack 0: 0x87C
7607	 135	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x13300180284005401C80FF0009900FF0412000004270FF0011400FF01330019
7608	 136	PUSH1	E0	 	 
- stack 2: 0x87C
- stack 1: 0x13300180284005401C80FF0009900FF0412000004270FF0011400FF01330019
- stack 0: 0xE0
7609	 138	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x1330018
7610	 139	PUSH2	FFFF	 	 
- stack 2: 0x87C
- stack 1: 0x1330018
- stack 0: 0xFFFF
7611	 13C	AND		 	 
- stack 1: 0x87C
- stack 0: 0x18
7612	 13D	PUSH1	01	 	 
- stack 2: 0x87C
- stack 1: 0x18
- stack 0: 0x1
7613	 13F	SIGNEXTEND		 	 
- stack 1: 0x87C
- stack 0: 0x18
7614	 140	PUSH2	0380	 	 
- stack 2: 0x87C
- stack 1: 0x18
- stack 0: 0x380
7615	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x87C
7616	 144	PUSH1	04	 	 
- stack 1: 0x87C
- stack 0: 0x4
7617	 146	ADD		 	 
- stack 0: 0x880
7618	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
7619	 148	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x284005401C80FF0009900FF0412000004270FF0011400FF0133001902840038
7620	 149	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0x284005401C80FF0009900FF0412000004270FF0011400FF0133001902840038
- stack 0: 0xF0
7621	 14B	SHR		 	 
- stack 1: 0x880
- stack 0: 0x284
7622	 14C	JUMP		 	 
- stack 0: 0x880
7623	 284	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,3f0(ignore imm)
- stack 0: 0x880
7624	 285	PUSH2	0040	 	 
- stack 1: 0x880
- stack 0: 0x40
7625	 288	MLOAD		 	  ;; # read from x2
- stack 1: 0x880
- stack 0: 0xFF00FF00
7626	 289	PUSH4	FFFFFFFF	 	 
- stack 2: 0x880
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
7627	 28E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x880
- stack 0: 0xFF00FF00
7628	 28F	PUSH2	03A0	 	 
- stack 2: 0x880
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
7629	 292	MLOAD		 	  ;; # read from x29
- stack 2: 0x880
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
7630	 293	PUSH4	FFFFFFFF	 	 
- stack 3: 0x880
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
7631	 298	AND		 	  ;; # mask to 32 bits
- stack 2: 0x880
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
7632	 299	SUB		 	 
- stack 1: 0x880
- stack 0: 0x0
7633	 29A	PUSH2	02A2	 ;; _neq_49464a3df4ba3beb4e2c23ba455731f8d662be70f0a269a8d04de21672ac6913	 
- stack 2: 0x880
- stack 1: 0x0
- stack 0: 0x2A2
7634	 29D	JUMPI		 	 
- stack 0: 0x880
7635	 29E	PUSH2	02BC	 ;; _neq_after_49464a3df4ba3beb4e2c23ba455731f8d662be70f0a269a8d04de21672ac6913	 
- stack 1: 0x880
- stack 0: 0x2BC
7636	 2A1	JUMP		 	 
- stack 0: 0x880
7637	 2BC	JUMPDEST		 ;; _neq_after_49464a3df4ba3beb4e2c23ba455731f8d662be70f0a269a8d04de21672ac6913	 
- stack 0: 0x880
7638	 2BD	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
7639	 2BF	ADD		 	 
- stack 0: 0x884
7640	 2C0	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
7641	 2C1	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x1C80FF0009900FF0412000004270FF0011400FF0133001902840038043A0000
7642	 2C2	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0x1C80FF0009900FF0412000004270FF0011400FF0133001902840038043A0000
- stack 0: 0xF0
7643	 2C4	SHR		 	 
- stack 1: 0x884
- stack 0: 0x1C8
7644	 2C5	JUMP		 	 
- stack 0: 0x884
7645	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x884
7646	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x884
- stack 0: 0xFF0000
7647	 1CE	PUSH2	0020	 	 
- stack 2: 0x884
- stack 1: 0xFF0000
- stack 0: 0x20
7648	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x884
7649	 1D2	PUSH1	04	 	 
- stack 1: 0x884
- stack 0: 0x4
7650	 1D4	ADD		 	 
- stack 0: 0x888
7651	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x888
- stack 0: 0x888
7652	 1D6	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x9900FF0412000004270FF0011400FF0133001902840038043A0000044D0000
7653	 1D7	PUSH1	F0	 	 
- stack 2: 0x888
- stack 1: 0x9900FF0412000004270FF0011400FF0133001902840038043A0000044D0000
- stack 0: 0xF0
7654	 1D9	SHR		 	 
- stack 1: 0x888
- stack 0: 0x99
7655	 1DA	JUMP		 	 
- stack 0: 0x888
7656	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x888
7657	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x888
- stack 0: 0x888
7658	 9B	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x9900FF0412000004270FF0011400FF0133001902840038043A0000044D0000
7659	 9C	PUSH1	E0	 	 
- stack 2: 0x888
- stack 1: 0x9900FF0412000004270FF0011400FF0133001902840038043A0000044D0000
- stack 0: 0xE0
7660	 9E	SHR		 	 
- stack 1: 0x888
- stack 0: 0x9900FF
7661	 9F	PUSH2	FFFF	 	 
- stack 2: 0x888
- stack 1: 0x9900FF
- stack 0: 0xFFFF
7662	 A2	AND		 	 
- stack 1: 0x888
- stack 0: 0xFF
7663	 A3	PUSH1	01	 	 
- stack 2: 0x888
- stack 1: 0xFF
- stack 0: 0x1
7664	 A5	SIGNEXTEND		 	 
- stack 1: 0x888
- stack 0: 0xFF
7665	 A6	PUSH2	0020	 	 
- stack 2: 0x888
- stack 1: 0xFF
- stack 0: 0x20
7666	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x888
- stack 1: 0xFF
- stack 0: 0xFF0000
7667	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x888
- stack 0: 0xFF00FF
7668	 AB	PUSH2	0020	 	 
- stack 2: 0x888
- stack 1: 0xFF00FF
- stack 0: 0x20
7669	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x888
7670	 AF	PUSH1	04	 	 
- stack 1: 0x888
- stack 0: 0x4
7671	 B1	ADD		 	 
- stack 0: 0x88C
7672	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x88C
- stack 0: 0x88C
7673	 B3	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0x412000004270FF0011400FF0133001902840038043A0000044D00000133001A
7674	 B4	PUSH1	F0	 	 
- stack 2: 0x88C
- stack 1: 0x412000004270FF0011400FF0133001902840038043A0000044D00000133001A
- stack 0: 0xF0
7675	 B6	SHR		 	 
- stack 1: 0x88C
- stack 0: 0x412
7676	 B7	JUMP		 	 
- stack 0: 0x88C
7677	 412	JUMPDEST		 ;; __riscvimpl_OR_2_1_0	  ;; # instr: or sp,ra,zero(ignore imm)
- stack 0: 0x88C
7678	 413	PUSH1	00	 	 
- stack 1: 0x88C
- stack 0: 0x0
7679	 415	PUSH2	0020	 	 
- stack 2: 0x88C
- stack 1: 0x0
- stack 0: 0x20
7680	 418	MLOAD		 	  ;; # read from x1
- stack 2: 0x88C
- stack 1: 0x0
- stack 0: 0xFF00FF
7681	 419	OR		 	  ;; # OR
- stack 1: 0x88C
- stack 0: 0xFF00FF
7682	 41A	PUSH2	0040	 	 
- stack 2: 0x88C
- stack 1: 0xFF00FF
- stack 0: 0x40
7683	 41D	MSTORE		 	  ;; # store to x2
- stack 0: 0x88C
7684	 41E	PUSH1	04	 	 
- stack 1: 0x88C
- stack 0: 0x4
7685	 420	ADD		 	 
- stack 0: 0x890
7686	 421	DUP1		 	  ;; # executing pc
- stack 1: 0x890
- stack 0: 0x890
7687	 422	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0x4270FF0011400FF0133001902840038043A0000044D00000133001A022B0028
7688	 423	PUSH1	F0	 	 
- stack 2: 0x890
- stack 1: 0x4270FF0011400FF0133001902840038043A0000044D00000133001A022B0028
- stack 0: 0xF0
7689	 425	SHR		 	 
- stack 1: 0x890
- stack 0: 0x427
7690	 426	JUMP		 	 
- stack 0: 0x890
7691	 427	JUMPDEST		 ;; __riscvimpl_LUI_ff0eb7	  ;; # instr: lui t4,0xff0(ignore imm)
- stack 0: 0x890
7692	 428	PUSH4	00ff0000	 	 
- stack 1: 0x890
- stack 0: 0xFF0000
7693	 42D	PUSH2	03A0	 	 
- stack 2: 0x890
- stack 1: 0xFF0000
- stack 0: 0x3A0
7694	 430	MSTORE		 	  ;; # store to x29
- stack 0: 0x890
7695	 431	PUSH1	04	 	 
- stack 1: 0x890
- stack 0: 0x4
7696	 433	ADD		 	 
- stack 0: 0x894
7697	 434	DUP1		 	  ;; # executing pc
- stack 1: 0x894
- stack 0: 0x894
7698	 435	MLOAD		 	 
- stack 1: 0x894
- stack 0: 0x11400FF0133001902840038043A0000044D00000133001A022B002804671111
7699	 436	PUSH1	F0	 	 
- stack 2: 0x894
- stack 1: 0x11400FF0133001902840038043A0000044D00000133001A022B002804671111
- stack 0: 0xF0
7700	 438	SHR		 	 
- stack 1: 0x894
- stack 0: 0x114
7701	 439	JUMP		 	 
- stack 0: 0x894
7702	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-241(ignore imm)
- stack 0: 0x894
7703	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x894
- stack 0: 0x894
7704	 116	MLOAD		 	 
- stack 1: 0x894
- stack 0: 0x11400FF0133001902840038043A0000044D00000133001A022B002804671111
7705	 117	PUSH1	E0	 	 
- stack 2: 0x894
- stack 1: 0x11400FF0133001902840038043A0000044D00000133001A022B002804671111
- stack 0: 0xE0
7706	 119	SHR		 	 
- stack 1: 0x894
- stack 0: 0x11400FF
7707	 11A	PUSH2	FFFF	 	 
- stack 2: 0x894
- stack 1: 0x11400FF
- stack 0: 0xFFFF
7708	 11D	AND		 	 
- stack 1: 0x894
- stack 0: 0xFF
7709	 11E	PUSH1	01	 	 
- stack 2: 0x894
- stack 1: 0xFF
- stack 0: 0x1
7710	 120	SIGNEXTEND		 	 
- stack 1: 0x894
- stack 0: 0xFF
7711	 121	PUSH2	03A0	 	 
- stack 2: 0x894
- stack 1: 0xFF
- stack 0: 0x3A0
7712	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x894
- stack 1: 0xFF
- stack 0: 0xFF0000
7713	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x894
- stack 0: 0xFF00FF
7714	 126	PUSH2	03A0	 	 
- stack 2: 0x894
- stack 1: 0xFF00FF
- stack 0: 0x3A0
7715	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x894
7716	 12A	PUSH1	04	 	 
- stack 1: 0x894
- stack 0: 0x4
7717	 12C	ADD		 	 
- stack 0: 0x898
7718	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x898
- stack 0: 0x898
7719	 12E	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0x133001902840038043A0000044D00000133001A022B00280467111100990111
7720	 12F	PUSH1	F0	 	 
- stack 2: 0x898
- stack 1: 0x133001902840038043A0000044D00000133001A022B00280467111100990111
- stack 0: 0xF0
7721	 131	SHR		 	 
- stack 1: 0x898
- stack 0: 0x133
7722	 132	JUMP		 	 
- stack 0: 0x898
7723	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x898
7724	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x898
- stack 0: 0x898
7725	 135	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0x133001902840038043A0000044D00000133001A022B00280467111100990111
7726	 136	PUSH1	E0	 	 
- stack 2: 0x898
- stack 1: 0x133001902840038043A0000044D00000133001A022B00280467111100990111
- stack 0: 0xE0
7727	 138	SHR		 	 
- stack 1: 0x898
- stack 0: 0x1330019
7728	 139	PUSH2	FFFF	 	 
- stack 2: 0x898
- stack 1: 0x1330019
- stack 0: 0xFFFF
7729	 13C	AND		 	 
- stack 1: 0x898
- stack 0: 0x19
7730	 13D	PUSH1	01	 	 
- stack 2: 0x898
- stack 1: 0x19
- stack 0: 0x1
7731	 13F	SIGNEXTEND		 	 
- stack 1: 0x898
- stack 0: 0x19
7732	 140	PUSH2	0380	 	 
- stack 2: 0x898
- stack 1: 0x19
- stack 0: 0x380
7733	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x898
7734	 144	PUSH1	04	 	 
- stack 1: 0x898
- stack 0: 0x4
7735	 146	ADD		 	 
- stack 0: 0x89C
7736	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x89C
- stack 0: 0x89C
7737	 148	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0x2840038043A0000044D00000133001A022B00280467111100990111047A2222
7738	 149	PUSH1	F0	 	 
- stack 2: 0x89C
- stack 1: 0x2840038043A0000044D00000133001A022B00280467111100990111047A2222
- stack 0: 0xF0
7739	 14B	SHR		 	 
- stack 1: 0x89C
- stack 0: 0x284
7740	 14C	JUMP		 	 
- stack 0: 0x89C
7741	 284	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,3f0(ignore imm)
- stack 0: 0x89C
7742	 285	PUSH2	0040	 	 
- stack 1: 0x89C
- stack 0: 0x40
7743	 288	MLOAD		 	  ;; # read from x2
- stack 1: 0x89C
- stack 0: 0xFF00FF
7744	 289	PUSH4	FFFFFFFF	 	 
- stack 2: 0x89C
- stack 1: 0xFF00FF
- stack 0: 0xFFFFFFFF
7745	 28E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x89C
- stack 0: 0xFF00FF
7746	 28F	PUSH2	03A0	 	 
- stack 2: 0x89C
- stack 1: 0xFF00FF
- stack 0: 0x3A0
7747	 292	MLOAD		 	  ;; # read from x29
- stack 2: 0x89C
- stack 1: 0xFF00FF
- stack 0: 0xFF00FF
7748	 293	PUSH4	FFFFFFFF	 	 
- stack 3: 0x89C
- stack 2: 0xFF00FF
- stack 1: 0xFF00FF
- stack 0: 0xFFFFFFFF
7749	 298	AND		 	  ;; # mask to 32 bits
- stack 2: 0x89C
- stack 1: 0xFF00FF
- stack 0: 0xFF00FF
7750	 299	SUB		 	 
- stack 1: 0x89C
- stack 0: 0x0
7751	 29A	PUSH2	02A2	 ;; _neq_49464a3df4ba3beb4e2c23ba455731f8d662be70f0a269a8d04de21672ac6913	 
- stack 2: 0x89C
- stack 1: 0x0
- stack 0: 0x2A2
7752	 29D	JUMPI		 	 
- stack 0: 0x89C
7753	 29E	PUSH2	02BC	 ;; _neq_after_49464a3df4ba3beb4e2c23ba455731f8d662be70f0a269a8d04de21672ac6913	 
- stack 1: 0x89C
- stack 0: 0x2BC
7754	 2A1	JUMP		 	 
- stack 0: 0x89C
7755	 2BC	JUMPDEST		 ;; _neq_after_49464a3df4ba3beb4e2c23ba455731f8d662be70f0a269a8d04de21672ac6913	 
- stack 0: 0x89C
7756	 2BD	PUSH1	04	 	 
- stack 1: 0x89C
- stack 0: 0x4
7757	 2BF	ADD		 	 
- stack 0: 0x8A0
7758	 2C0	DUP1		 	  ;; # executing pc
- stack 1: 0x8A0
- stack 0: 0x8A0
7759	 2C1	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x43A0000044D00000133001A022B00280467111100990111047A222200CB0222
7760	 2C2	PUSH1	F0	 	 
- stack 2: 0x8A0
- stack 1: 0x43A0000044D00000133001A022B00280467111100990111047A222200CB0222
- stack 0: 0xF0
7761	 2C4	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x43A
7762	 2C5	JUMP		 	 
- stack 0: 0x8A0
7763	 43A	JUMPDEST		 ;; __riscvimpl_OR_1_0_0	  ;; # instr: or ra,zero,zero(ignore imm)
- stack 0: 0x8A0
7764	 43B	PUSH1	00	 	 
- stack 1: 0x8A0
- stack 0: 0x0
7765	 43D	PUSH1	00	 	 
- stack 2: 0x8A0
- stack 1: 0x0
- stack 0: 0x0
7766	 43F	OR		 	  ;; # OR
- stack 1: 0x8A0
- stack 0: 0x0
7767	 440	PUSH2	0020	 	 
- stack 2: 0x8A0
- stack 1: 0x0
- stack 0: 0x20
7768	 443	MSTORE		 	  ;; # store to x1
- stack 0: 0x8A0
7769	 444	PUSH1	04	 	 
- stack 1: 0x8A0
- stack 0: 0x4
7770	 446	ADD		 	 
- stack 0: 0x8A4
7771	 447	DUP1		 	  ;; # executing pc
- stack 1: 0x8A4
- stack 0: 0x8A4
7772	 448	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0x44D00000133001A022B00280467111100990111047A222200CB0222048D0000
7773	 449	PUSH1	F0	 	 
- stack 2: 0x8A4
- stack 1: 0x44D00000133001A022B00280467111100990111047A222200CB0222048D0000
- stack 0: 0xF0
7774	 44B	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0x44D
7775	 44C	JUMP		 	 
- stack 0: 0x8A4
7776	 44D	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x8A4
7777	 44E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A4
- stack 0: 0x8A4
7778	 44F	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0x44D00000133001A022B00280467111100990111047A222200CB0222048D0000
7779	 450	PUSH1	E0	 	 
- stack 2: 0x8A4
- stack 1: 0x44D00000133001A022B00280467111100990111047A222200CB0222048D0000
- stack 0: 0xE0
7780	 452	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0x44D0000
7781	 453	PUSH2	FFFF	 	 
- stack 2: 0x8A4
- stack 1: 0x44D0000
- stack 0: 0xFFFF
7782	 456	AND		 	 
- stack 1: 0x8A4
- stack 0: 0x0
7783	 457	PUSH1	01	 	 
- stack 2: 0x8A4
- stack 1: 0x0
- stack 0: 0x1
7784	 459	SIGNEXTEND		 	 
- stack 1: 0x8A4
- stack 0: 0x0
7785	 45A	PUSH2	03A0	 	 
- stack 2: 0x8A4
- stack 1: 0x0
- stack 0: 0x3A0
7786	 45D	MSTORE		 	  ;; # store to x29
- stack 0: 0x8A4
7787	 45E	PUSH1	04	 	 
- stack 1: 0x8A4
- stack 0: 0x4
7788	 460	ADD		 	 
- stack 0: 0x8A8
7789	 461	DUP1		 	  ;; # executing pc
- stack 1: 0x8A8
- stack 0: 0x8A8
7790	 462	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0x133001A022B00280467111100990111047A222200CB0222048D0000044D0000
7791	 463	PUSH1	F0	 	 
- stack 2: 0x8A8
- stack 1: 0x133001A022B00280467111100990111047A222200CB0222048D0000044D0000
- stack 0: 0xF0
7792	 465	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0x133
7793	 466	JUMP		 	 
- stack 0: 0x8A8
7794	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8A8
7795	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A8
- stack 0: 0x8A8
7796	 135	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0x133001A022B00280467111100990111047A222200CB0222048D0000044D0000
7797	 136	PUSH1	E0	 	 
- stack 2: 0x8A8
- stack 1: 0x133001A022B00280467111100990111047A222200CB0222048D0000044D0000
- stack 0: 0xE0
7798	 138	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0x133001A
7799	 139	PUSH2	FFFF	 	 
- stack 2: 0x8A8
- stack 1: 0x133001A
- stack 0: 0xFFFF
7800	 13C	AND		 	 
- stack 1: 0x8A8
- stack 0: 0x1A
7801	 13D	PUSH1	01	 	 
- stack 2: 0x8A8
- stack 1: 0x1A
- stack 0: 0x1
7802	 13F	SIGNEXTEND		 	 
- stack 1: 0x8A8
- stack 0: 0x1A
7803	 140	PUSH2	0380	 	 
- stack 2: 0x8A8
- stack 1: 0x1A
- stack 0: 0x380
7804	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x8A8
7805	 144	PUSH1	04	 	 
- stack 1: 0x8A8
- stack 0: 0x4
7806	 146	ADD		 	 
- stack 0: 0x8AC
7807	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x8AC
- stack 0: 0x8AC
7808	 148	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0x22B00280467111100990111047A222200CB0222048D0000044D00000133001B
7809	 149	PUSH1	F0	 	 
- stack 2: 0x8AC
- stack 1: 0x22B00280467111100990111047A222200CB0222048D0000044D00000133001B
- stack 0: 0xF0
7810	 14B	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0x22B
7811	 14C	JUMP		 	 
- stack 0: 0x8AC
7812	 22B	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,414(ignore imm)
- stack 0: 0x8AC
7813	 22C	PUSH2	0020	 	 
- stack 1: 0x8AC
- stack 0: 0x20
7814	 22F	MLOAD		 	  ;; # read from x1
- stack 1: 0x8AC
- stack 0: 0x0
7815	 230	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8AC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7816	 235	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8AC
- stack 0: 0x0
7817	 236	PUSH2	03A0	 	 
- stack 2: 0x8AC
- stack 1: 0x0
- stack 0: 0x3A0
7818	 239	MLOAD		 	  ;; # read from x29
- stack 2: 0x8AC
- stack 1: 0x0
- stack 0: 0x0
7819	 23A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8AC
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7820	 23F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8AC
- stack 1: 0x0
- stack 0: 0x0
7821	 240	SUB		 	 
- stack 1: 0x8AC
- stack 0: 0x0
7822	 241	PUSH2	0249	 ;; _neq_107d6c10076d93d581b34cfc1b309ed2e16ff318fee66d51dd7ef509b8b844f5	 
- stack 2: 0x8AC
- stack 1: 0x0
- stack 0: 0x249
7823	 244	JUMPI		 	 
- stack 0: 0x8AC
7824	 245	PUSH2	0263	 ;; _neq_after_107d6c10076d93d581b34cfc1b309ed2e16ff318fee66d51dd7ef509b8b844f5	 
- stack 1: 0x8AC
- stack 0: 0x263
7825	 248	JUMP		 	 
- stack 0: 0x8AC
7826	 263	JUMPDEST		 ;; _neq_after_107d6c10076d93d581b34cfc1b309ed2e16ff318fee66d51dd7ef509b8b844f5	 
- stack 0: 0x8AC
7827	 264	PUSH1	04	 	 
- stack 1: 0x8AC
- stack 0: 0x4
7828	 266	ADD		 	 
- stack 0: 0x8B0
7829	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x8B0
- stack 0: 0x8B0
7830	 268	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x467111100990111047A222200CB0222048D0000044D00000133001B04A10008
7831	 269	PUSH1	F0	 	 
- stack 2: 0x8B0
- stack 1: 0x467111100990111047A222200CB0222048D0000044D00000133001B04A10008
- stack 0: 0xF0
7832	 26B	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x467
7833	 26C	JUMP		 	 
- stack 0: 0x8B0
7834	 467	JUMPDEST		 ;; __riscvimpl_LUI_111110b7	  ;; # instr: lui ra,0x11111(ignore imm)
- stack 0: 0x8B0
7835	 468	PUSH4	11111000	 	 
- stack 1: 0x8B0
- stack 0: 0x11111000
7836	 46D	PUSH2	0020	 	 
- stack 2: 0x8B0
- stack 1: 0x11111000
- stack 0: 0x20
7837	 470	MSTORE		 	  ;; # store to x1
- stack 0: 0x8B0
7838	 471	PUSH1	04	 	 
- stack 1: 0x8B0
- stack 0: 0x4
7839	 473	ADD		 	 
- stack 0: 0x8B4
7840	 474	DUP1		 	  ;; # executing pc
- stack 1: 0x8B4
- stack 0: 0x8B4
7841	 475	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x990111047A222200CB0222048D0000044D00000133001B04A1000804E10018
7842	 476	PUSH1	F0	 	 
- stack 2: 0x8B4
- stack 1: 0x990111047A222200CB0222048D0000044D00000133001B04A1000804E10018
- stack 0: 0xF0
7843	 478	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x99
7844	 479	JUMP		 	 
- stack 0: 0x8B4
7845	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x8B4
7846	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B4
- stack 0: 0x8B4
7847	 9B	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x990111047A222200CB0222048D0000044D00000133001B04A1000804E10018
7848	 9C	PUSH1	E0	 	 
- stack 2: 0x8B4
- stack 1: 0x990111047A222200CB0222048D0000044D00000133001B04A1000804E10018
- stack 0: 0xE0
7849	 9E	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x990111
7850	 9F	PUSH2	FFFF	 	 
- stack 2: 0x8B4
- stack 1: 0x990111
- stack 0: 0xFFFF
7851	 A2	AND		 	 
- stack 1: 0x8B4
- stack 0: 0x111
7852	 A3	PUSH1	01	 	 
- stack 2: 0x8B4
- stack 1: 0x111
- stack 0: 0x1
7853	 A5	SIGNEXTEND		 	 
- stack 1: 0x8B4
- stack 0: 0x111
7854	 A6	PUSH2	0020	 	 
- stack 2: 0x8B4
- stack 1: 0x111
- stack 0: 0x20
7855	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x8B4
- stack 1: 0x111
- stack 0: 0x11111000
7856	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x8B4
- stack 0: 0x11111111
7857	 AB	PUSH2	0020	 	 
- stack 2: 0x8B4
- stack 1: 0x11111111
- stack 0: 0x20
7858	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x8B4
7859	 AF	PUSH1	04	 	 
- stack 1: 0x8B4
- stack 0: 0x4
7860	 B1	ADD		 	 
- stack 0: 0x8B8
7861	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x8B8
- stack 0: 0x8B8
7862	 B3	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0x47A222200CB0222048D0000044D00000133001B04A1000804E1001800210001
7863	 B4	PUSH1	F0	 	 
- stack 2: 0x8B8
- stack 1: 0x47A222200CB0222048D0000044D00000133001B04A1000804E1001800210001
- stack 0: 0xF0
7864	 B6	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0x47A
7865	 B7	JUMP		 	 
- stack 0: 0x8B8
7866	 47A	JUMPDEST		 ;; __riscvimpl_LUI_22222137	  ;; # instr: lui sp,0x22222(ignore imm)
- stack 0: 0x8B8
7867	 47B	PUSH4	22222000	 	 
- stack 1: 0x8B8
- stack 0: 0x22222000
7868	 480	PUSH2	0040	 	 
- stack 2: 0x8B8
- stack 1: 0x22222000
- stack 0: 0x40
7869	 483	MSTORE		 	  ;; # store to x2
- stack 0: 0x8B8
7870	 484	PUSH1	04	 	 
- stack 1: 0x8B8
- stack 0: 0x4
7871	 486	ADD		 	 
- stack 0: 0x8BC
7872	 487	DUP1		 	  ;; # executing pc
- stack 1: 0x8BC
- stack 0: 0x8BC
7873	 488	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0xCB0222048D0000044D00000133001B04A1000804E10018002100010034F908
7874	 489	PUSH1	F0	 	 
- stack 2: 0x8BC
- stack 1: 0xCB0222048D0000044D00000133001B04A1000804E10018002100010034F908
- stack 0: 0xF0
7875	 48B	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0xCB
7876	 48C	JUMP		 	 
- stack 0: 0x8BC
7877	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x8BC
7878	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8BC
- stack 0: 0x8BC
7879	 CD	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0xCB0222048D0000044D00000133001B04A1000804E10018002100010034F908
7880	 CE	PUSH1	E0	 	 
- stack 2: 0x8BC
- stack 1: 0xCB0222048D0000044D00000133001B04A1000804E10018002100010034F908
- stack 0: 0xE0
7881	 D0	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0xCB0222
7882	 D1	PUSH2	FFFF	 	 
- stack 2: 0x8BC
- stack 1: 0xCB0222
- stack 0: 0xFFFF
7883	 D4	AND		 	 
- stack 1: 0x8BC
- stack 0: 0x222
7884	 D5	PUSH1	01	 	 
- stack 2: 0x8BC
- stack 1: 0x222
- stack 0: 0x1
7885	 D7	SIGNEXTEND		 	 
- stack 1: 0x8BC
- stack 0: 0x222
7886	 D8	PUSH2	0040	 	 
- stack 2: 0x8BC
- stack 1: 0x222
- stack 0: 0x40
7887	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x8BC
- stack 1: 0x222
- stack 0: 0x22222000
7888	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x8BC
- stack 0: 0x22222222
7889	 DD	PUSH2	0040	 	 
- stack 2: 0x8BC
- stack 1: 0x22222222
- stack 0: 0x40
7890	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x8BC
7891	 E1	PUSH1	04	 	 
- stack 1: 0x8BC
- stack 0: 0x4
7892	 E3	ADD		 	 
- stack 0: 0x8C0
7893	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x8C0
- stack 0: 0x8C0
7894	 E5	MLOAD		 	 
- stack 1: 0x8C0
- stack 0: 0x48D0000044D00000133001B04A1000804E10018002100010034F90800530042
7895	 E6	PUSH1	F0	 	 
- stack 2: 0x8C0
- stack 1: 0x48D0000044D00000133001B04A1000804E10018002100010034F90800530042
- stack 0: 0xF0
7896	 E8	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0x48D
7897	 E9	JUMP		 	 
- stack 0: 0x8C0
7898	 48D	JUMPDEST		 ;; __riscvimpl_OR_0_1_2	  ;; # instr: or zero,ra,sp(ignore imm)
- stack 0: 0x8C0
7899	 48E	PUSH2	0040	 	 
- stack 1: 0x8C0
- stack 0: 0x40
7900	 491	MLOAD		 	  ;; # read from x2
- stack 1: 0x8C0
- stack 0: 0x22222222
7901	 492	PUSH2	0020	 	 
- stack 2: 0x8C0
- stack 1: 0x22222222
- stack 0: 0x20
7902	 495	MLOAD		 	  ;; # read from x1
- stack 2: 0x8C0
- stack 1: 0x22222222
- stack 0: 0x11111111
7903	 496	OR		 	  ;; # OR
- stack 1: 0x8C0
- stack 0: 0x33333333
7904	 497	POP		 	 
- stack 0: 0x8C0
7905	 498	PUSH1	04	 	 
- stack 1: 0x8C0
- stack 0: 0x4
7906	 49A	ADD		 	 
- stack 0: 0x8C4
7907	 49B	DUP1		 	  ;; # executing pc
- stack 1: 0x8C4
- stack 0: 0x8C4
7908	 49C	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0x44D00000133001B04A1000804E10018002100010034F9080053004200660000
7909	 49D	PUSH1	F0	 	 
- stack 2: 0x8C4
- stack 1: 0x44D00000133001B04A1000804E10018002100010034F9080053004200660000
- stack 0: 0xF0
7910	 49F	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0x44D
7911	 4A0	JUMP		 	 
- stack 0: 0x8C4
7912	 44D	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x8C4
7913	 44E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C4
- stack 0: 0x8C4
7914	 44F	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0x44D00000133001B04A1000804E10018002100010034F9080053004200660000
7915	 450	PUSH1	E0	 	 
- stack 2: 0x8C4
- stack 1: 0x44D00000133001B04A1000804E10018002100010034F9080053004200660000
- stack 0: 0xE0
7916	 452	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0x44D0000
7917	 453	PUSH2	FFFF	 	 
- stack 2: 0x8C4
- stack 1: 0x44D0000
- stack 0: 0xFFFF
7918	 456	AND		 	 
- stack 1: 0x8C4
- stack 0: 0x0
7919	 457	PUSH1	01	 	 
- stack 2: 0x8C4
- stack 1: 0x0
- stack 0: 0x1
7920	 459	SIGNEXTEND		 	 
- stack 1: 0x8C4
- stack 0: 0x0
7921	 45A	PUSH2	03A0	 	 
- stack 2: 0x8C4
- stack 1: 0x0
- stack 0: 0x3A0
7922	 45D	MSTORE		 	  ;; # store to x29
- stack 0: 0x8C4
7923	 45E	PUSH1	04	 	 
- stack 1: 0x8C4
- stack 0: 0x4
7924	 460	ADD		 	 
- stack 0: 0x8C8
7925	 461	DUP1		 	  ;; # executing pc
- stack 1: 0x8C8
- stack 0: 0x8C8
7926	 462	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0x133001B04A1000804E10018002100010034F908005300420066000005210001
7927	 463	PUSH1	F0	 	 
- stack 2: 0x8C8
- stack 1: 0x133001B04A1000804E10018002100010034F908005300420066000005210001
- stack 0: 0xF0
7928	 465	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0x133
7929	 466	JUMP		 	 
- stack 0: 0x8C8
7930	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8C8
7931	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C8
- stack 0: 0x8C8
7932	 135	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0x133001B04A1000804E10018002100010034F908005300420066000005210001
7933	 136	PUSH1	E0	 	 
- stack 2: 0x8C8
- stack 1: 0x133001B04A1000804E10018002100010034F908005300420066000005210001
- stack 0: 0xE0
7934	 138	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0x133001B
7935	 139	PUSH2	FFFF	 	 
- stack 2: 0x8C8
- stack 1: 0x133001B
- stack 0: 0xFFFF
7936	 13C	AND		 	 
- stack 1: 0x8C8
- stack 0: 0x1B
7937	 13D	PUSH1	01	 	 
- stack 2: 0x8C8
- stack 1: 0x1B
- stack 0: 0x1
7938	 13F	SIGNEXTEND		 	 
- stack 1: 0x8C8
- stack 0: 0x1B
7939	 140	PUSH2	0380	 	 
- stack 2: 0x8C8
- stack 1: 0x1B
- stack 0: 0x380
7940	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x8C8
7941	 144	PUSH1	04	 	 
- stack 1: 0x8C8
- stack 0: 0x4
7942	 146	ADD		 	 
- stack 0: 0x8CC
7943	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x8CC
- stack 0: 0x8CC
7944	 148	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x4A1000804E10018002100010034F90800530042006600000521000100210001
7945	 149	PUSH1	F0	 	 
- stack 2: 0x8CC
- stack 1: 0x4A1000804E10018002100010034F90800530042006600000521000100210001
- stack 0: 0xF0
7946	 14B	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x4A1
7947	 14C	JUMP		 	 
- stack 0: 0x8CC
7948	 4A1	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x8CC
7949	 4A2	PUSH1	00	 	 
- stack 1: 0x8CC
- stack 0: 0x0
7950	 4A4	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7951	 4A9	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8CC
- stack 0: 0x0
7952	 4AA	PUSH2	03A0	 	 
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0x3A0
7953	 4AD	MLOAD		 	  ;; # read from x29
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0x0
7954	 4AE	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8CC
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7955	 4B3	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0x0
7956	 4B4	SUB		 	 
- stack 1: 0x8CC
- stack 0: 0x0
7957	 4B5	PUSH2	04BD	 ;; _neq_97bf85a6fe2e8702d55676f3d000edd535b03f5fbbb09c34d315ae0f7c43ebf1	 
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0x4BD
7958	 4B8	JUMPI		 	 
- stack 0: 0x8CC
7959	 4B9	PUSH2	04D7	 ;; _neq_after_97bf85a6fe2e8702d55676f3d000edd535b03f5fbbb09c34d315ae0f7c43ebf1	 
- stack 1: 0x8CC
- stack 0: 0x4D7
7960	 4BC	JUMP		 	 
- stack 0: 0x8CC
7961	 4D7	JUMPDEST		 ;; _neq_after_97bf85a6fe2e8702d55676f3d000edd535b03f5fbbb09c34d315ae0f7c43ebf1	 
- stack 0: 0x8CC
7962	 4D8	PUSH1	04	 	 
- stack 1: 0x8CC
- stack 0: 0x4
7963	 4DA	ADD		 	 
- stack 0: 0x8D0
7964	 4DB	DUP1		 	  ;; # executing pc
- stack 1: 0x8D0
- stack 0: 0x8D0
7965	 4DC	MLOAD		 	 
- stack 1: 0x8D0
- stack 0: 0x4E10018002100010034F908005300420066000005210001002100010034F90C
7966	 4DD	PUSH1	F0	 	 
- stack 2: 0x8D0
- stack 1: 0x4E10018002100010034F908005300420066000005210001002100010034F90C
- stack 0: 0xF0
7967	 4DF	SHR		 	 
- stack 1: 0x8D0
- stack 0: 0x4E1
7968	 4E0	JUMP		 	 
- stack 0: 0x8D0
7969	 4E1	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x8D0
7970	 4E2	PUSH1	00	 	 
- stack 1: 0x8D0
- stack 0: 0x0
7971	 4E4	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7972	 4E9	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8D0
- stack 0: 0x0
7973	 4EA	PUSH2	0380	 	 
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x380
7974	 4ED	MLOAD		 	  ;; # read from x28
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1B
7975	 4EE	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8D0
- stack 2: 0x0
- stack 1: 0x1B
- stack 0: 0xFFFFFFFF
7976	 4F3	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1B
7977	 4F4	SUB		 	 
- stack 1: 0x8D0
- stack 0: 0x1B
7978	 4F5	PUSH2	04FD	 ;; _neq_4d1cfb6883cc65d909ef281cf559ff1fb53c203da08bdfd3bc900349b0f7eb18	 
- stack 2: 0x8D0
- stack 1: 0x1B
- stack 0: 0x4FD
7979	 4F8	JUMPI		 	 
- stack 0: 0x8D0
7980	 4FD	JUMPDEST		 ;; _neq_4d1cfb6883cc65d909ef281cf559ff1fb53c203da08bdfd3bc900349b0f7eb18	 
- stack 0: 0x8D0
7981	 4FE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8D0
- stack 0: 0x8D0
7982	 4FF	MLOAD		 	 
- stack 1: 0x8D0
- stack 0: 0x4E10018002100010034F908005300420066000005210001002100010034F90C
7983	 500	PUSH1	E0	 	 
- stack 2: 0x8D0
- stack 1: 0x4E10018002100010034F908005300420066000005210001002100010034F90C
- stack 0: 0xE0
7984	 502	SHR		 	 
- stack 1: 0x8D0
- stack 0: 0x4E10018
7985	 503	PUSH2	FFFF	 	 
- stack 2: 0x8D0
- stack 1: 0x4E10018
- stack 0: 0xFFFF
7986	 506	AND		 	 
- stack 1: 0x8D0
- stack 0: 0x18
7987	 507	PUSH1	01	 	 
- stack 2: 0x8D0
- stack 1: 0x18
- stack 0: 0x1
7988	 509	SIGNEXTEND		 	 
- stack 1: 0x8D0
- stack 0: 0x18
7989	 50A	ADD		 	 
- stack 0: 0x8E8
7990	 50B	PUSH4	FFFFFFFF	 	 
- stack 1: 0x8E8
- stack 0: 0xFFFFFFFF
7991	 510	AND		 	  ;; # mask to 32 bits
- stack 0: 0x8E8
7992	 511	DUP1		 	  ;; # executing pc
- stack 1: 0x8E8
- stack 0: 0x8E8
7993	 512	MLOAD		 	 
- stack 1: 0x8E8
- stack 0: 0x2100010034F90C0053004200660000052C0000006600006574796D00007473
7994	 513	PUSH1	F0	 	 
- stack 2: 0x8E8
- stack 1: 0x2100010034F90C0053004200660000052C0000006600006574796D00007473
- stack 0: 0xF0
7995	 515	SHR		 	 
- stack 1: 0x8E8
- stack 0: 0x21
7996	 516	JUMP		 	 
- stack 0: 0x8E8
7997	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x8E8
7998	 22	PUSH4	00001000	 	 
- stack 1: 0x8E8
- stack 0: 0x1000
7999	 27	PUSH2	0160	 	 
- stack 2: 0x8E8
- stack 1: 0x1000
- stack 0: 0x160
8000	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x8E8
8001	 2B	PUSH1	04	 	 
- stack 1: 0x8E8
- stack 0: 0x4
8002	 2D	ADD		 	 
- stack 0: 0x8EC
8003	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x8EC
- stack 0: 0x8EC
8004	 2F	MLOAD		 	 
- stack 1: 0x8EC
- stack 0: 0x34F90C0053004200660000052C0000006600006574796D0000747300525245
8005	 30	PUSH1	F0	 	 
- stack 2: 0x8EC
- stack 1: 0x34F90C0053004200660000052C0000006600006574796D0000747300525245
- stack 0: 0xF0
8006	 32	SHR		 	 
- stack 1: 0x8EC
- stack 0: 0x34
8007	 33	JUMP		 	 
- stack 0: 0x8EC
8008	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1792(ignore imm)
- stack 0: 0x8EC
8009	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8EC
- stack 0: 0x8EC
8010	 36	MLOAD		 	 
- stack 1: 0x8EC
- stack 0: 0x34F90C0053004200660000052C0000006600006574796D0000747300525245
8011	 37	PUSH1	E0	 	 
- stack 2: 0x8EC
- stack 1: 0x34F90C0053004200660000052C0000006600006574796D0000747300525245
- stack 0: 0xE0
8012	 39	SHR		 	 
- stack 1: 0x8EC
- stack 0: 0x34F90C
8013	 3A	PUSH2	FFFF	 	 
- stack 2: 0x8EC
- stack 1: 0x34F90C
- stack 0: 0xFFFF
8014	 3D	AND		 	 
- stack 1: 0x8EC
- stack 0: 0xF90C
8015	 3E	PUSH1	01	 	 
- stack 2: 0x8EC
- stack 1: 0xF90C
- stack 0: 0x1
8016	 40	SIGNEXTEND		 	 
- stack 1: 0x8EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF90C
8017	 41	PUSH2	0160	 	 
- stack 2: 0x8EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF90C
- stack 0: 0x160
8018	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x8EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF90C
- stack 0: 0x1000
8019	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x8EC
- stack 0: 0x90C
8020	 46	PUSH2	0160	 	 
- stack 2: 0x8EC
- stack 1: 0x90C
- stack 0: 0x160
8021	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x8EC
8022	 4A	PUSH1	04	 	 
- stack 1: 0x8EC
- stack 0: 0x4
8023	 4C	ADD		 	 
- stack 0: 0x8F0
8024	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x8F0
- stack 0: 0x8F0
8025	 4E	MLOAD		 	 
- stack 1: 0x8F0
- stack 0: 0x53004200660000052C0000006600006574796D000074730052524500004B4F
8026	 4F	PUSH1	F0	 	 
- stack 2: 0x8F0
- stack 1: 0x53004200660000052C0000006600006574796D000074730052524500004B4F
- stack 0: 0xF0
8027	 51	SHR		 	 
- stack 1: 0x8F0
- stack 0: 0x53
8028	 52	JUMP		 	 
- stack 0: 0x8F0
8029	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x8F0
8030	 54	PUSH4	00042000	 	 
- stack 1: 0x8F0
- stack 0: 0x42000
8031	 59	PUSH2	0140	 	 
- stack 2: 0x8F0
- stack 1: 0x42000
- stack 0: 0x140
8032	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x8F0
8033	 5D	PUSH1	04	 	 
- stack 1: 0x8F0
- stack 0: 0x4
8034	 5F	ADD		 	 
- stack 0: 0x8F4
8035	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x8F4
- stack 0: 0x8F4
8036	 61	MLOAD		 	 
- stack 1: 0x8F4
- stack 0: 0x660000052C0000006600006574796D000074730052524500004B4F00000000
8037	 62	PUSH1	F0	 	 
- stack 2: 0x8F4
- stack 1: 0x660000052C0000006600006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
8038	 64	SHR		 	 
- stack 1: 0x8F4
- stack 0: 0x66
8039	 65	JUMP		 	 
- stack 0: 0x8F4
8040	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x8F4
8041	 67	PUSH2	0140	 	 
- stack 1: 0x8F4
- stack 0: 0x140
8042	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x8F4
- stack 0: 0x42000
8043	 6B	PUSH2	0075	 ;; _ecall_c64dc7a8010125d3380ed7223f24ee9bc47c57b13bb5fd27c2f50d4e8d295152	 
- stack 2: 0x8F4
- stack 1: 0x42000
- stack 0: 0x75
8044	 6E	JUMPI		 	 
- stack 0: 0x8F4
8045	 75	JUMPDEST		 ;; _ecall_c64dc7a8010125d3380ed7223f24ee9bc47c57b13bb5fd27c2f50d4e8d295152	 
- stack 0: 0x8F4
8046	 76	PUSH1	04	 	 
- stack 1: 0x8F4
- stack 0: 0x4
8047	 78	PUSH2	0160	 	 
- stack 2: 0x8F4
- stack 1: 0x4
- stack 0: 0x160
8048	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x8F4
- stack 1: 0x4
- stack 0: 0x90C
8049	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x8F4
8050	 7D	PUSH1	04	 	 
- stack 1: 0x8F4
- stack 0: 0x4
8051	 7F	ADD		 	 
- stack 0: 0x8F8
8052	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x8F8
- stack 0: 0x8F8
8053	 81	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0x52C0000006600006574796D000074730052524500004B4F0000000000000000
8054	 82	PUSH1	F0	 	 
- stack 2: 0x8F8
- stack 1: 0x52C0000006600006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
8055	 84	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0x52C
8056	 85	JUMP		 	 
- stack 0: 0x8F8
8057	 52C	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x8F8
8058	 52D	PUSH4	00000000	 	 
- stack 1: 0x8F8
- stack 0: 0x0
8059	 532	PUSH2	0140	 	 
- stack 2: 0x8F8
- stack 1: 0x0
- stack 0: 0x140
8060	 535	MSTORE		 	  ;; # store to x10
- stack 0: 0x8F8
8061	 536	PUSH1	04	 	 
- stack 1: 0x8F8
- stack 0: 0x4
8062	 538	ADD		 	 
- stack 0: 0x8FC
8063	 539	DUP1		 	  ;; # executing pc
- stack 1: 0x8FC
- stack 0: 0x8FC
8064	 53A	MLOAD		 	 
- stack 1: 0x8FC
- stack 0: 0x6600006574796D000074730052524500004B4F000000000000000000000000
8065	 53B	PUSH1	F0	 	 
- stack 2: 0x8FC
- stack 1: 0x6600006574796D000074730052524500004B4F000000000000000000000000
- stack 0: 0xF0
8066	 53D	SHR		 	 
- stack 1: 0x8FC
- stack 0: 0x66
8067	 53E	JUMP		 	 
- stack 0: 0x8FC
8068	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x8FC
8069	 67	PUSH2	0140	 	 
- stack 1: 0x8FC
- stack 0: 0x140
8070	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x8FC
- stack 0: 0x0
8071	 6B	PUSH2	0075	 ;; _ecall_c64dc7a8010125d3380ed7223f24ee9bc47c57b13bb5fd27c2f50d4e8d295152	 
- stack 2: 0x8FC
- stack 1: 0x0
- stack 0: 0x75
8072	 6E	JUMPI		 	 
- stack 0: 0x8FC
8073	 6F	PUSH1	20	 	 
- stack 1: 0x8FC
- stack 0: 0x20
8074	 71	PUSH2	0160	 	 
- stack 2: 0x8FC
- stack 1: 0x20
- stack 0: 0x160
8075	 74	RETURN		 	 
Final bytecode length; 2640
Returned: 000000000000000000000000000000000000000000000000000000000000090c
gasUsed : 27759
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424,428,42c,430
** HOT: 434 - range: 434,438,43c,440,444,448,44c,450,454
** HOT: 458 - range: 458,45c,460,464,468,46c,470,474,478
** HOT: 47c - range: 47c,480,484,488,48c,490,494,498,49c
** HOT: 4a0 - range: 4a0,4a4,4a8,4ac,4b0,4b4,4b8,4bc,4c0
** HOT: 4c4 - range: 4c4,4c8,4cc,4d0,4d4,4d8,4dc,4e0,4e4
** HOT: 4e8 - range: 4e8,4ec,4f0,4f4,4f8,4fc,500
** HOT: 504 - range: 504,508,50c,510,514,518,51c,520,524,528
** HOT: 508 - range: 508,50c,510,514,518,51c,520,524,528
** HOT: 52c - range: 52c,530,534,538
** HOT: 53c - range: 53c,540,544,548,54c,550,554,558,55c,560,564
** HOT: 540 - range: 540,544,548,54c,550,554,558,55c,560,564
** HOT: 568 - range: 568,56c,570,574
** HOT: 578 - range: 578,57c,580,584,588,58c,590,594,598,59c,5a0,5a4
** HOT: 57c - range: 57c,580,584,588,58c,590,594,598,59c,5a0,5a4
** HOT: 5a8 - range: 5a8,5ac,5b0,5b4
** HOT: 5b8 - range: 5b8,5bc,5c0,5c4,5c8,5cc,5d0,5d4,5d8
** HOT: 5bc - range: 5bc,5c0,5c4,5c8,5cc,5d0,5d4,5d8
** HOT: 5dc - range: 5dc,5e0,5e4,5e8
** HOT: 5ec - range: 5ec,5f0,5f4,5f8,5fc,600,604,608,60c,610
** HOT: 5f0 - range: 5f0,5f4,5f8,5fc,600,604,608,60c,610
** HOT: 614 - range: 614,618,61c,620
** HOT: 624 - range: 624,628,62c,630,634,638,63c,640,644,648,64c
** HOT: 628 - range: 628,62c,630,634,638,63c,640,644,648,64c
** HOT: 650 - range: 650,654,658,65c
** HOT: 660 - range: 660,664,668,66c,670,674,678,67c,680,684
** HOT: 664 - range: 664,668,66c,670,674,678,67c,680,684
** HOT: 688 - range: 688,68c,690,694
** HOT: 698 - range: 698,69c,6a0,6a4,6a8,6ac,6b0,6b4,6b8,6bc,6c0
** HOT: 69c - range: 69c,6a0,6a4,6a8,6ac,6b0,6b4,6b8,6bc,6c0
** HOT: 6c4 - range: 6c4,6c8,6cc,6d0
** HOT: 6d4 - range: 6d4,6d8,6dc,6e0,6e4,6e8,6ec,6f0,6f4,6f8,6fc
** HOT: 6d8 - range: 6d8,6dc,6e0,6e4,6e8,6ec,6f0,6f4,6f8,6fc
** HOT: 700 - range: 700,704,708,70c
** HOT: 710 - range: 710,714,718,71c,720,724,728,72c,730
** HOT: 714 - range: 714,718,71c,720,724,728,72c,730
** HOT: 734 - range: 734,738,73c,740
** HOT: 744 - range: 744,748,74c,750,754,758,75c,760,764,768
** HOT: 748 - range: 748,74c,750,754,758,75c,760,764,768
** HOT: 76c - range: 76c,770,774,778
** HOT: 77c - range: 77c,780,784,788,78c,790,794,798,79c,7a0,7a4
** HOT: 780 - range: 780,784,788,78c,790,794,798,79c,7a0,7a4
** HOT: 7a8 - range: 7a8,7ac,7b0,7b4
** HOT: 7b8 - range: 7b8,7bc,7c0,7c4,7c8,7cc,7d0,7d4,7d8,7dc
** HOT: 7bc - range: 7bc,7c0,7c4,7c8,7cc,7d0,7d4,7d8,7dc
** HOT: 7e0 - range: 7e0,7e4,7e8,7ec
** HOT: 7f0 - range: 7f0,7f4,7f8,7fc,800,804,808,80c,810,814,818
** HOT: 7f4 - range: 7f4,7f8,7fc,800,804,808,80c,810,814,818
** HOT: 81c - range: 81c,820,824,828
** HOT: 82c - range: 82c,830,834,838,83c,840,844,848,84c,850,854
** HOT: 830 - range: 830,834,838,83c,840,844,848,84c,850,854
** HOT: 858 - range: 858,85c,860,864
** HOT: 868 - range: 868,86c,870,874,878,87c,880
** HOT: 884 - range: 884,888,88c,890,894,898,89c
** HOT: 8a0 - range: 8a0,8a4,8a8,8ac
** HOT: 8b0 - range: 8b0,8b4,8b8,8bc,8c0,8c4,8c8,8cc
