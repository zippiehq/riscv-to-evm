Running in EVM:
0	 0	PUSH4	0230	 	 
- stack 0: 0x230
1	 5	PUSH2	0436	 ;; _rambegin	 
- stack 1: 0x230
- stack 0: 0x436
2	 8	PUSH1	01	 	 
- stack 2: 0x230
- stack 1: 0x436
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x230
- stack 0: 0x437
4	 B	PUSH2	0400	 	 
- stack 2: 0x230
- stack 1: 0x437
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100000034062000530042006600000086F0100099FF0000B8FF0F00D7FF0F
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100000034062000530042006600000086F0100099FF0000B8FF0F00D7FF0F
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34062000530042006600000086F0100099FF0000B8FF0F00D7FF0F00F10002
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34062000530042006600000086F0100099FF0000B8FF0F00D7FF0F00F10002
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1568(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34062000530042006600000086F0100099FF0000B8FF0F00D7FF0F00F10002
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34062000530042006600000086F0100099FF0000B8FF0F00D7FF0F00F10002
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340620
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340620
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x620
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x620
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x620
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x620
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x620
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x620
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x620
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086F0100099FF0000B8FF0F00D7FF0F00F10002010B01C8
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086F0100099FF0000B8FF0F00D7FF0F00F10002010B01C8
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086F0100099FF0000B8FF0F00D7FF0F00F10002010B01C8014DFF01
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086F0100099FF0000B8FF0F00D7FF0F00F10002010B01C8014DFF01
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_cda3465ea1ff063b925970c8bbaf9f71cd9b308db74db07911fba3564c3dec43	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_cda3465ea1ff063b925970c8bbaf9f71cd9b308db74db07911fba3564c3dec43	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x620
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86F0100099FF0000B8FF0F00D7FF0F00F10002010B01C8014DFF010099FFF0
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86F0100099FF0000B8FF0F00D7FF0F00F10002010B01C8014DFF010099FFF0
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x410
76	 87	PUSH4	ff010000	 	 
- stack 1: 0x410
- stack 0: 0xFF010000
77	 8C	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0xFF010000
- stack 0: 0x20
78	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 90	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 92	ADD		 	 
- stack 0: 0x414
81	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 94	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99FF0000B8FF0F00D7FF0F00F10002010B01C8014DFF010099FFF000B800F0
83	 95	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x99FF0000B8FF0F00D7FF0F00F10002010B01C8014DFF010099FFF000B800F0
- stack 0: 0xF0
84	 97	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99
85	 98	JUMP		 	 
- stack 0: 0x414
86	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x414
87	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99FF0000B8FF0F00D7FF0F00F10002010B01C8014DFF010099FFF000B800F0
89	 9C	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x99FF0000B8FF0F00D7FF0F00F10002010B01C8014DFF010099FFF000B800F0
- stack 0: 0xE0
90	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99FF00
91	 9F	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x99FF00
- stack 0: 0xFFFF
92	 A2	AND		 	 
- stack 1: 0x414
- stack 0: 0xFF00
93	 A3	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0xFF00
- stack 0: 0x1
94	 A5	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
95	 A6	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
96	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
97	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x414
- stack 0: 0xFF00FF00
98	 AB	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0xFF00FF00
- stack 0: 0x20
99	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
100	 AF	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
101	 B1	ADD		 	 
- stack 0: 0x418
102	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
103	 B3	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB8FF0F00D7FF0F00F10002010B01C8014DFF010099FFF000B800F00160FF01
104	 B4	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB8FF0F00D7FF0F00F10002010B01C8014DFF010099FFF000B800F00160FF01
- stack 0: 0xF0
105	 B6	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB8
106	 B7	JUMP		 	 
- stack 0: 0x418
107	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x418
108	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
109	 BA	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB8FF0F00D7FF0F00F10002010B01C8014DFF010099FFF000B800F00160FF01
110	 BB	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xB8FF0F00D7FF0F00F10002010B01C8014DFF010099FFF000B800F00160FF01
- stack 0: 0xE0
111	 BD	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB8FF0F
112	 BE	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xB8FF0F
- stack 0: 0xFFFF
113	 C1	AND		 	 
- stack 1: 0x418
- stack 0: 0xFF0F
114	 C2	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0xFF0F
- stack 0: 0x1
115	 C4	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
116	 C5	PUSH2	0020	 	 
- stack 2: 0x418
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x20
117	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x418
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xFF00FF00
118	 C9	OR		 	  ;; # ORI
- stack 1: 0x418
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
119	 CA	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x60
120	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
121	 CE	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
122	 D0	ADD		 	 
- stack 0: 0x41C
123	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
124	 D2	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD7FF0F00F10002010B01C8014DFF010099FFF000B800F00160FF010173FFF0
125	 D3	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD7FF0F00F10002010B01C8014DFF010099FFF000B800F00160FF010173FFF0
- stack 0: 0xF0
126	 D5	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD7
127	 D6	JUMP		 	 
- stack 0: 0x41C
128	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-241(ignore imm)
- stack 0: 0x41C
129	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
130	 D9	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD7FF0F00F10002010B01C8014DFF010099FFF000B800F00160FF010173FFF0
131	 DA	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xD7FF0F00F10002010B01C8014DFF010099FFF000B800F00160FF010173FFF0
- stack 0: 0xE0
132	 DC	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD7FF0F
133	 DD	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xD7FF0F
- stack 0: 0xFFFF
134	 E0	AND		 	 
- stack 1: 0x41C
- stack 0: 0xFF0F
135	 E1	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0xFF0F
- stack 0: 0x1
136	 E3	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
137	 E4	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x3A0
138	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
139	 E8	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
140	 EA	ADD		 	 
- stack 0: 0x420
141	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
142	 EC	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF10002010B01C8014DFF010099FFF000B800F00160FF010173FFF000F10003
143	 ED	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xF10002010B01C8014DFF010099FFF000B800F00160FF010173FFF000F10003
- stack 0: 0xF0
144	 EF	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF1
145	 F0	JUMP		 	 
- stack 0: 0x420
146	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x420
147	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
148	 F3	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF10002010B01C8014DFF010099FFF000B800F00160FF010173FFF000F10003
149	 F4	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0xF10002010B01C8014DFF010099FFF000B800F00160FF010173FFF000F10003
- stack 0: 0xE0
150	 F6	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF10002
151	 F7	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0xF10002
- stack 0: 0xFFFF
152	 FA	AND		 	 
- stack 1: 0x420
- stack 0: 0x2
153	 FB	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x1
154	 FD	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0x2
155	 FE	PUSH2	0380	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x380
156	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x420
157	 102	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
158	 104	ADD		 	 
- stack 0: 0x424
159	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
160	 106	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x10B01C8014DFF010099FFF000B800F00160FF010173FFF000F10003010B01AC
161	 107	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x10B01C8014DFF010099FFF000B800F00160FF010173FFF000F10003010B01AC
- stack 0: 0xF0
162	 109	SHR		 	 
- stack 1: 0x424
- stack 0: 0x10B
163	 10A	JUMP		 	 
- stack 0: 0x424
164	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1c8(ignore imm)
- stack 0: 0x424
165	 10C	PUSH2	0060	 	 
- stack 1: 0x424
- stack 0: 0x60
166	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x424
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
167	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xFFFFFFFF
168	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0xFFFFFF0F
169	 116	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0xFFFFFF0F
- stack 0: 0x3A0
170	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x424
- stack 1: 0xFFFFFF0F
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
171	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0xFFFFFF0F
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xFFFFFFFF
172	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0xFFFFFF0F
- stack 0: 0xFFFFFF0F
173	 120	SUB		 	 
- stack 1: 0x424
- stack 0: 0x0
174	 121	PUSH2	0129	 ;; _neq_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x129
175	 124	JUMPI		 	 
- stack 0: 0x424
176	 125	PUSH2	0143	 ;; _neq_after_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 1: 0x424
- stack 0: 0x143
177	 128	JUMP		 	 
- stack 0: 0x424
178	 143	JUMPDEST		 ;; _neq_after_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 0: 0x424
179	 144	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
180	 146	ADD		 	 
- stack 0: 0x428
181	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
182	 148	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x14DFF010099FFF000B800F00160FF010173FFF000F10003010B01AC01920FF0
183	 149	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x14DFF010099FFF000B800F00160FF010173FFF000F10003010B01AC01920FF0
- stack 0: 0xF0
184	 14B	SHR		 	 
- stack 1: 0x428
- stack 0: 0x14D
185	 14C	JUMP		 	 
- stack 0: 0x428
186	 14D	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x428
187	 14E	PUSH4	0ff01000	 	 
- stack 1: 0x428
- stack 0: 0xFF01000
188	 153	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0xFF01000
- stack 0: 0x20
189	 156	MSTORE		 	  ;; # store to x1
- stack 0: 0x428
190	 157	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
191	 159	ADD		 	 
- stack 0: 0x42C
192	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
193	 15B	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x99FFF000B800F00160FF010173FFF000F10003010B01AC01920FF0009900FF
194	 15C	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x99FFF000B800F00160FF010173FFF000F10003010B01AC01920FF0009900FF
- stack 0: 0xF0
195	 15E	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x99
196	 15F	JUMP		 	 
- stack 0: 0x42C
197	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x42C
198	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
199	 9B	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x99FFF000B800F00160FF010173FFF000F10003010B01AC01920FF0009900FF
200	 9C	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0x99FFF000B800F00160FF010173FFF000F10003010B01AC01920FF0009900FF
- stack 0: 0xE0
201	 9E	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x99FFF0
202	 9F	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
203	 A2	AND		 	 
- stack 1: 0x42C
- stack 0: 0xFFF0
204	 A3	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0xFFF0
- stack 0: 0x1
205	 A5	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
206	 A6	PUSH2	0020	 	 
- stack 2: 0x42C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
207	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x42C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
208	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x42C
- stack 0: 0xFF00FF0
209	 AB	PUSH2	0020	 	 
- stack 2: 0x42C
- stack 1: 0xFF00FF0
- stack 0: 0x20
210	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x42C
211	 AF	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
212	 B1	ADD		 	 
- stack 0: 0x430
213	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
214	 B3	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xB800F00160FF010173FFF000F10003010B01AC01920FF0009900FF00B8070F
215	 B4	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xB800F00160FF010173FFF000F10003010B01AC01920FF0009900FF00B8070F
- stack 0: 0xF0
216	 B6	SHR		 	 
- stack 1: 0x430
- stack 0: 0xB8
217	 B7	JUMP		 	 
- stack 0: 0x430
218	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x430
219	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
220	 BA	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xB800F00160FF010173FFF000F10003010B01AC01920FF0009900FF00B8070F
221	 BB	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0xB800F00160FF010173FFF000F10003010B01AC01920FF0009900FF00B8070F
- stack 0: 0xE0
222	 BD	SHR		 	 
- stack 1: 0x430
- stack 0: 0xB800F0
223	 BE	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0xB800F0
- stack 0: 0xFFFF
224	 C1	AND		 	 
- stack 1: 0x430
- stack 0: 0xF0
225	 C2	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0xF0
- stack 0: 0x1
226	 C4	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0xF0
227	 C5	PUSH2	0020	 	 
- stack 2: 0x430
- stack 1: 0xF0
- stack 0: 0x20
228	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x430
- stack 1: 0xF0
- stack 0: 0xFF00FF0
229	 C9	OR		 	  ;; # ORI
- stack 1: 0x430
- stack 0: 0xFF00FF0
230	 CA	PUSH2	0060	 	 
- stack 2: 0x430
- stack 1: 0xFF00FF0
- stack 0: 0x60
231	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x430
232	 CE	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
233	 D0	ADD		 	 
- stack 0: 0x434
234	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
235	 D2	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x160FF010173FFF000F10003010B01AC01920FF0009900FF00B8070F01A50FF0
236	 D3	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0x160FF010173FFF000F10003010B01AC01920FF0009900FF00B8070F01A50FF0
- stack 0: 0xF0
237	 D5	SHR		 	 
- stack 1: 0x434
- stack 0: 0x160
238	 D6	JUMP		 	 
- stack 0: 0x434
239	 160	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x434
240	 161	PUSH4	0ff01000	 	 
- stack 1: 0x434
- stack 0: 0xFF01000
241	 166	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0xFF01000
- stack 0: 0x3A0
242	 169	MSTORE		 	  ;; # store to x29
- stack 0: 0x434
243	 16A	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
244	 16C	ADD		 	 
- stack 0: 0x438
245	 16D	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
246	 16E	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x173FFF000F10003010B01AC01920FF0009900FF00B8070F01A50FF0017307FF
247	 16F	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x173FFF000F10003010B01AC01920FF0009900FF00B8070F01A50FF0017307FF
- stack 0: 0xF0
248	 171	SHR		 	 
- stack 1: 0x438
- stack 0: 0x173
249	 172	JUMP		 	 
- stack 0: 0x438
250	 173	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x438
251	 174	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
252	 175	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x173FFF000F10003010B01AC01920FF0009900FF00B8070F01A50FF0017307FF
253	 176	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0x173FFF000F10003010B01AC01920FF0009900FF00B8070F01A50FF0017307FF
- stack 0: 0xE0
254	 178	SHR		 	 
- stack 1: 0x438
- stack 0: 0x173FFF0
255	 179	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0x173FFF0
- stack 0: 0xFFFF
256	 17C	AND		 	 
- stack 1: 0x438
- stack 0: 0xFFF0
257	 17D	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0xFFF0
- stack 0: 0x1
258	 17F	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
259	 180	PUSH2	03A0	 	 
- stack 2: 0x438
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
260	 183	MLOAD		 	  ;; # read from x29
- stack 2: 0x438
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
261	 184	ADD		 	  ;; # ADDI 29
- stack 1: 0x438
- stack 0: 0xFF00FF0
262	 185	PUSH2	03A0	 	 
- stack 2: 0x438
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
263	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x438
264	 189	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
265	 18B	ADD		 	 
- stack 0: 0x43C
266	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
267	 18D	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xF10003010B01AC01920FF0009900FF00B8070F01A50FF0017307FF00F10004
268	 18E	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xF10003010B01AC01920FF0009900FF00B8070F01A50FF0017307FF00F10004
- stack 0: 0xF0
269	 190	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xF1
270	 191	JUMP		 	 
- stack 0: 0x43C
271	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x43C
272	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
273	 F3	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xF10003010B01AC01920FF0009900FF00B8070F01A50FF0017307FF00F10004
274	 F4	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0xF10003010B01AC01920FF0009900FF00B8070F01A50FF0017307FF00F10004
- stack 0: 0xE0
275	 F6	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xF10003
276	 F7	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0xF10003
- stack 0: 0xFFFF
277	 FA	AND		 	 
- stack 1: 0x43C
- stack 0: 0x3
278	 FB	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0x3
- stack 0: 0x1
279	 FD	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0x3
280	 FE	PUSH2	0380	 	 
- stack 2: 0x43C
- stack 1: 0x3
- stack 0: 0x380
281	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x43C
282	 102	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
283	 104	ADD		 	 
- stack 0: 0x440
284	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
285	 106	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x10B01AC01920FF0009900FF00B8070F01A50FF0017307FF00F10004010B0190
286	 107	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x10B01AC01920FF0009900FF00B8070F01A50FF0017307FF00F10004010B0190
- stack 0: 0xF0
287	 109	SHR		 	 
- stack 1: 0x440
- stack 0: 0x10B
288	 10A	JUMP		 	 
- stack 0: 0x440
289	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1c8(ignore imm)
- stack 0: 0x440
290	 10C	PUSH2	0060	 	 
- stack 1: 0x440
- stack 0: 0x60
291	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x440
- stack 0: 0xFF00FF0
292	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x440
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
293	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x440
- stack 0: 0xFF00FF0
294	 116	PUSH2	03A0	 	 
- stack 2: 0x440
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
295	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x440
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
296	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x440
- stack 2: 0xFF00FF0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
297	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x440
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
298	 120	SUB		 	 
- stack 1: 0x440
- stack 0: 0x0
299	 121	PUSH2	0129	 ;; _neq_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 2: 0x440
- stack 1: 0x0
- stack 0: 0x129
300	 124	JUMPI		 	 
- stack 0: 0x440
301	 125	PUSH2	0143	 ;; _neq_after_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 1: 0x440
- stack 0: 0x143
302	 128	JUMP		 	 
- stack 0: 0x440
303	 143	JUMPDEST		 ;; _neq_after_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 0: 0x440
304	 144	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
305	 146	ADD		 	 
- stack 0: 0x444
306	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
307	 148	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x1920FF0009900FF00B8070F01A50FF0017307FF00F10004010B019001B800FF
308	 149	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x1920FF0009900FF00B8070F01A50FF0017307FF00F10004010B019001B800FF
- stack 0: 0xF0
309	 14B	SHR		 	 
- stack 1: 0x444
- stack 0: 0x192
310	 14C	JUMP		 	 
- stack 0: 0x444
311	 192	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x444
312	 193	PUSH4	00ff0000	 	 
- stack 1: 0x444
- stack 0: 0xFF0000
313	 198	PUSH2	0020	 	 
- stack 2: 0x444
- stack 1: 0xFF0000
- stack 0: 0x20
314	 19B	MSTORE		 	  ;; # store to x1
- stack 0: 0x444
315	 19C	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
316	 19E	ADD		 	 
- stack 0: 0x448
317	 19F	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
318	 1A0	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x9900FF00B8070F01A50FF0017307FF00F10004010B019001B800FF0099000F
319	 1A1	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0x9900FF00B8070F01A50FF0017307FF00F10004010B019001B800FF0099000F
- stack 0: 0xF0
320	 1A3	SHR		 	 
- stack 1: 0x448
- stack 0: 0x99
321	 1A4	JUMP		 	 
- stack 0: 0x448
322	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x448
323	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x448
- stack 0: 0x448
324	 9B	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x9900FF00B8070F01A50FF0017307FF00F10004010B019001B800FF0099000F
325	 9C	PUSH1	E0	 	 
- stack 2: 0x448
- stack 1: 0x9900FF00B8070F01A50FF0017307FF00F10004010B019001B800FF0099000F
- stack 0: 0xE0
326	 9E	SHR		 	 
- stack 1: 0x448
- stack 0: 0x9900FF
327	 9F	PUSH2	FFFF	 	 
- stack 2: 0x448
- stack 1: 0x9900FF
- stack 0: 0xFFFF
328	 A2	AND		 	 
- stack 1: 0x448
- stack 0: 0xFF
329	 A3	PUSH1	01	 	 
- stack 2: 0x448
- stack 1: 0xFF
- stack 0: 0x1
330	 A5	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0xFF
331	 A6	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0xFF
- stack 0: 0x20
332	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x448
- stack 1: 0xFF
- stack 0: 0xFF0000
333	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x448
- stack 0: 0xFF00FF
334	 AB	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0xFF00FF
- stack 0: 0x20
335	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x448
336	 AF	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
337	 B1	ADD		 	 
- stack 0: 0x44C
338	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
339	 B3	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xB8070F01A50FF0017307FF00F10004010B019001B800FF0099000F00B800F0
340	 B4	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0xB8070F01A50FF0017307FF00F10004010B019001B800FF0099000F00B800F0
- stack 0: 0xF0
341	 B6	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xB8
342	 B7	JUMP		 	 
- stack 0: 0x44C
343	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x44C
344	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
345	 BA	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xB8070F01A50FF0017307FF00F10004010B019001B800FF0099000F00B800F0
346	 BB	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0xB8070F01A50FF0017307FF00F10004010B019001B800FF0099000F00B800F0
- stack 0: 0xE0
347	 BD	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xB8070F
348	 BE	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0xB8070F
- stack 0: 0xFFFF
349	 C1	AND		 	 
- stack 1: 0x44C
- stack 0: 0x70F
350	 C2	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0x70F
- stack 0: 0x1
351	 C4	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0x70F
352	 C5	PUSH2	0020	 	 
- stack 2: 0x44C
- stack 1: 0x70F
- stack 0: 0x20
353	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x44C
- stack 1: 0x70F
- stack 0: 0xFF00FF
354	 C9	OR		 	  ;; # ORI
- stack 1: 0x44C
- stack 0: 0xFF07FF
355	 CA	PUSH2	0060	 	 
- stack 2: 0x44C
- stack 1: 0xFF07FF
- stack 0: 0x60
356	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x44C
357	 CE	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
358	 D0	ADD		 	 
- stack 0: 0x450
359	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
360	 D2	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x1A50FF0017307FF00F10004010B019001B800FF0099000F00B800F001CB00FF
361	 D3	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x1A50FF0017307FF00F10004010B019001B800FF0099000F00B800F001CB00FF
- stack 0: 0xF0
362	 D5	SHR		 	 
- stack 1: 0x450
- stack 0: 0x1A5
363	 D6	JUMP		 	 
- stack 0: 0x450
364	 1A5	JUMPDEST		 ;; __riscvimpl_LUI_ff0eb7	  ;; # instr: lui t4,0xff0(ignore imm)
- stack 0: 0x450
365	 1A6	PUSH4	00ff0000	 	 
- stack 1: 0x450
- stack 0: 0xFF0000
366	 1AB	PUSH2	03A0	 	 
- stack 2: 0x450
- stack 1: 0xFF0000
- stack 0: 0x3A0
367	 1AE	MSTORE		 	  ;; # store to x29
- stack 0: 0x450
368	 1AF	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
369	 1B1	ADD		 	 
- stack 0: 0x454
370	 1B2	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
371	 1B3	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x17307FF00F10004010B019001B800FF0099000F00B800F001CB00FF017300FF
372	 1B4	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x17307FF00F10004010B019001B800FF0099000F00B800F001CB00FF017300FF
- stack 0: 0xF0
373	 1B6	SHR		 	 
- stack 1: 0x454
- stack 0: 0x173
374	 1B7	JUMP		 	 
- stack 0: 0x454
375	 173	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x454
376	 174	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
377	 175	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x17307FF00F10004010B019001B800FF0099000F00B800F001CB00FF017300FF
378	 176	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0x17307FF00F10004010B019001B800FF0099000F00B800F001CB00FF017300FF
- stack 0: 0xE0
379	 178	SHR		 	 
- stack 1: 0x454
- stack 0: 0x17307FF
380	 179	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0x17307FF
- stack 0: 0xFFFF
381	 17C	AND		 	 
- stack 1: 0x454
- stack 0: 0x7FF
382	 17D	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0x7FF
- stack 0: 0x1
383	 17F	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0x7FF
384	 180	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0x7FF
- stack 0: 0x3A0
385	 183	MLOAD		 	  ;; # read from x29
- stack 2: 0x454
- stack 1: 0x7FF
- stack 0: 0xFF0000
386	 184	ADD		 	  ;; # ADDI 29
- stack 1: 0x454
- stack 0: 0xFF07FF
387	 185	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xFF07FF
- stack 0: 0x3A0
388	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x454
389	 189	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
390	 18B	ADD		 	 
- stack 0: 0x458
391	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
392	 18D	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xF10004010B019001B800FF0099000F00B800F001CB00FF017300FF00F10005
393	 18E	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0xF10004010B019001B800FF0099000F00B800F001CB00FF017300FF00F10005
- stack 0: 0xF0
394	 190	SHR		 	 
- stack 1: 0x458
- stack 0: 0xF1
395	 191	JUMP		 	 
- stack 0: 0x458
396	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x458
397	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
398	 F3	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xF10004010B019001B800FF0099000F00B800F001CB00FF017300FF00F10005
399	 F4	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0xF10004010B019001B800FF0099000F00B800F001CB00FF017300FF00F10005
- stack 0: 0xE0
400	 F6	SHR		 	 
- stack 1: 0x458
- stack 0: 0xF10004
401	 F7	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0xF10004
- stack 0: 0xFFFF
402	 FA	AND		 	 
- stack 1: 0x458
- stack 0: 0x4
403	 FB	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0x4
- stack 0: 0x1
404	 FD	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0x4
405	 FE	PUSH2	0380	 	 
- stack 2: 0x458
- stack 1: 0x4
- stack 0: 0x380
406	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x458
407	 102	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
408	 104	ADD		 	 
- stack 0: 0x45C
409	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
410	 106	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x10B019001B800FF0099000F00B800F001CB00FF017300FF00F10005010B0174
411	 107	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x10B019001B800FF0099000F00B800F001CB00FF017300FF00F10005010B0174
- stack 0: 0xF0
412	 109	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x10B
413	 10A	JUMP		 	 
- stack 0: 0x45C
414	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1c8(ignore imm)
- stack 0: 0x45C
415	 10C	PUSH2	0060	 	 
- stack 1: 0x45C
- stack 0: 0x60
416	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x45C
- stack 0: 0xFF07FF
417	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x45C
- stack 1: 0xFF07FF
- stack 0: 0xFFFFFFFF
418	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x45C
- stack 0: 0xFF07FF
419	 116	PUSH2	03A0	 	 
- stack 2: 0x45C
- stack 1: 0xFF07FF
- stack 0: 0x3A0
420	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x45C
- stack 1: 0xFF07FF
- stack 0: 0xFF07FF
421	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x45C
- stack 2: 0xFF07FF
- stack 1: 0xFF07FF
- stack 0: 0xFFFFFFFF
422	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x45C
- stack 1: 0xFF07FF
- stack 0: 0xFF07FF
423	 120	SUB		 	 
- stack 1: 0x45C
- stack 0: 0x0
424	 121	PUSH2	0129	 ;; _neq_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 2: 0x45C
- stack 1: 0x0
- stack 0: 0x129
425	 124	JUMPI		 	 
- stack 0: 0x45C
426	 125	PUSH2	0143	 ;; _neq_after_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 1: 0x45C
- stack 0: 0x143
427	 128	JUMP		 	 
- stack 0: 0x45C
428	 143	JUMPDEST		 ;; _neq_after_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 0: 0x45C
429	 144	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
430	 146	ADD		 	 
- stack 0: 0x460
431	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
432	 148	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x1B800FF0099000F00B800F001CB00FF017300FF00F10005010B01740086F010
433	 149	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x1B800FF0099000F00B800F001CB00FF017300FF00F10005010B01740086F010
- stack 0: 0xF0
434	 14B	SHR		 	 
- stack 1: 0x460
- stack 0: 0x1B8
435	 14C	JUMP		 	 
- stack 0: 0x460
436	 1B8	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x460
437	 1B9	PUSH4	f00ff000	 	 
- stack 1: 0x460
- stack 0: 0xF00FF000
438	 1BE	PUSH2	0020	 	 
- stack 2: 0x460
- stack 1: 0xF00FF000
- stack 0: 0x20
439	 1C1	MSTORE		 	  ;; # store to x1
- stack 0: 0x460
440	 1C2	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
441	 1C4	ADD		 	 
- stack 0: 0x464
442	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
443	 1C6	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x99000F00B800F001CB00FF017300FF00F10005010B01740086F0100099FF00
444	 1C7	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x99000F00B800F001CB00FF017300FF00F10005010B01740086F0100099FF00
- stack 0: 0xF0
445	 1C9	SHR		 	 
- stack 1: 0x464
- stack 0: 0x99
446	 1CA	JUMP		 	 
- stack 0: 0x464
447	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x464
448	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
449	 9B	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x99000F00B800F001CB00FF017300FF00F10005010B01740086F0100099FF00
450	 9C	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0x99000F00B800F001CB00FF017300FF00F10005010B01740086F0100099FF00
- stack 0: 0xE0
451	 9E	SHR		 	 
- stack 1: 0x464
- stack 0: 0x99000F
452	 9F	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0x99000F
- stack 0: 0xFFFF
453	 A2	AND		 	 
- stack 1: 0x464
- stack 0: 0xF
454	 A3	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xF
- stack 0: 0x1
455	 A5	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xF
456	 A6	PUSH2	0020	 	 
- stack 2: 0x464
- stack 1: 0xF
- stack 0: 0x20
457	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x464
- stack 1: 0xF
- stack 0: 0xF00FF000
458	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x464
- stack 0: 0xF00FF00F
459	 AB	PUSH2	0020	 	 
- stack 2: 0x464
- stack 1: 0xF00FF00F
- stack 0: 0x20
460	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x464
461	 AF	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
462	 B1	ADD		 	 
- stack 0: 0x468
463	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
464	 B3	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xB800F001CB00FF017300FF00F10005010B01740086F0100099FF0001DE00F0
465	 B4	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xB800F001CB00FF017300FF00F10005010B01740086F0100099FF0001DE00F0
- stack 0: 0xF0
466	 B6	SHR		 	 
- stack 1: 0x468
- stack 0: 0xB8
467	 B7	JUMP		 	 
- stack 0: 0x468
468	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x468
469	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
470	 BA	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xB800F001CB00FF017300FF00F10005010B01740086F0100099FF0001DE00F0
471	 BB	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0xB800F001CB00FF017300FF00F10005010B01740086F0100099FF0001DE00F0
- stack 0: 0xE0
472	 BD	SHR		 	 
- stack 1: 0x468
- stack 0: 0xB800F0
473	 BE	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0xB800F0
- stack 0: 0xFFFF
474	 C1	AND		 	 
- stack 1: 0x468
- stack 0: 0xF0
475	 C2	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0xF0
- stack 0: 0x1
476	 C4	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0xF0
477	 C5	PUSH2	0020	 	 
- stack 2: 0x468
- stack 1: 0xF0
- stack 0: 0x20
478	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x468
- stack 1: 0xF0
- stack 0: 0xF00FF00F
479	 C9	OR		 	  ;; # ORI
- stack 1: 0x468
- stack 0: 0xF00FF0FF
480	 CA	PUSH2	0060	 	 
- stack 2: 0x468
- stack 1: 0xF00FF0FF
- stack 0: 0x60
481	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x468
482	 CE	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
483	 D0	ADD		 	 
- stack 0: 0x46C
484	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
485	 D2	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x1CB00FF017300FF00F10005010B01740086F0100099FF0001DE00F001FDF010
486	 D3	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x1CB00FF017300FF00F10005010B01740086F0100099FF0001DE00F001FDF010
- stack 0: 0xF0
487	 D5	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x1CB
488	 D6	JUMP		 	 
- stack 0: 0x46C
489	 1CB	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x46C
490	 1CC	PUSH4	f00ff000	 	 
- stack 1: 0x46C
- stack 0: 0xF00FF000
491	 1D1	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0xF00FF000
- stack 0: 0x3A0
492	 1D4	MSTORE		 	  ;; # store to x29
- stack 0: 0x46C
493	 1D5	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
494	 1D7	ADD		 	 
- stack 0: 0x470
495	 1D8	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
496	 1D9	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x17300FF00F10005010B01740086F0100099FF0001DE00F001FDF0100173FFF0
497	 1DA	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x17300FF00F10005010B01740086F0100099FF0001DE00F001FDF0100173FFF0
- stack 0: 0xF0
498	 1DC	SHR		 	 
- stack 1: 0x470
- stack 0: 0x173
499	 1DD	JUMP		 	 
- stack 0: 0x470
500	 173	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x470
501	 174	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
502	 175	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x17300FF00F10005010B01740086F0100099FF0001DE00F001FDF0100173FFF0
503	 176	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x17300FF00F10005010B01740086F0100099FF0001DE00F001FDF0100173FFF0
- stack 0: 0xE0
504	 178	SHR		 	 
- stack 1: 0x470
- stack 0: 0x17300FF
505	 179	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x17300FF
- stack 0: 0xFFFF
506	 17C	AND		 	 
- stack 1: 0x470
- stack 0: 0xFF
507	 17D	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0xFF
- stack 0: 0x1
508	 17F	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0xFF
509	 180	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0xFF
- stack 0: 0x3A0
510	 183	MLOAD		 	  ;; # read from x29
- stack 2: 0x470
- stack 1: 0xFF
- stack 0: 0xF00FF000
511	 184	ADD		 	  ;; # ADDI 29
- stack 1: 0x470
- stack 0: 0xF00FF0FF
512	 185	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0xF00FF0FF
- stack 0: 0x3A0
513	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x470
514	 189	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
515	 18B	ADD		 	 
- stack 0: 0x474
516	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
517	 18D	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xF10005010B01740086F0100099FF0001DE00F001FDF0100173FFF000F10006
518	 18E	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0xF10005010B01740086F0100099FF0001DE00F001FDF0100173FFF000F10006
- stack 0: 0xF0
519	 190	SHR		 	 
- stack 1: 0x474
- stack 0: 0xF1
520	 191	JUMP		 	 
- stack 0: 0x474
521	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x474
522	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
523	 F3	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xF10005010B01740086F0100099FF0001DE00F001FDF0100173FFF000F10006
524	 F4	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0xF10005010B01740086F0100099FF0001DE00F001FDF0100173FFF000F10006
- stack 0: 0xE0
525	 F6	SHR		 	 
- stack 1: 0x474
- stack 0: 0xF10005
526	 F7	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0xF10005
- stack 0: 0xFFFF
527	 FA	AND		 	 
- stack 1: 0x474
- stack 0: 0x5
528	 FB	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x5
- stack 0: 0x1
529	 FD	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x5
530	 FE	PUSH2	0380	 	 
- stack 2: 0x474
- stack 1: 0x5
- stack 0: 0x380
531	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x474
532	 102	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
533	 104	ADD		 	 
- stack 0: 0x478
534	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
535	 106	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x10B01740086F0100099FF0001DE00F001FDF0100173FFF000F1000602100158
536	 107	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x10B01740086F0100099FF0001DE00F001FDF0100173FFF000F1000602100158
- stack 0: 0xF0
537	 109	SHR		 	 
- stack 1: 0x478
- stack 0: 0x10B
538	 10A	JUMP		 	 
- stack 0: 0x478
539	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1c8(ignore imm)
- stack 0: 0x478
540	 10C	PUSH2	0060	 	 
- stack 1: 0x478
- stack 0: 0x60
541	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x478
- stack 0: 0xF00FF0FF
542	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x478
- stack 1: 0xF00FF0FF
- stack 0: 0xFFFFFFFF
543	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x478
- stack 0: 0xF00FF0FF
544	 116	PUSH2	03A0	 	 
- stack 2: 0x478
- stack 1: 0xF00FF0FF
- stack 0: 0x3A0
545	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x478
- stack 1: 0xF00FF0FF
- stack 0: 0xF00FF0FF
546	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x478
- stack 2: 0xF00FF0FF
- stack 1: 0xF00FF0FF
- stack 0: 0xFFFFFFFF
547	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x478
- stack 1: 0xF00FF0FF
- stack 0: 0xF00FF0FF
548	 120	SUB		 	 
- stack 1: 0x478
- stack 0: 0x0
549	 121	PUSH2	0129	 ;; _neq_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x129
550	 124	JUMPI		 	 
- stack 0: 0x478
551	 125	PUSH2	0143	 ;; _neq_after_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 1: 0x478
- stack 0: 0x143
552	 128	JUMP		 	 
- stack 0: 0x478
553	 143	JUMPDEST		 ;; _neq_after_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 0: 0x478
554	 144	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
555	 146	ADD		 	 
- stack 0: 0x47C
556	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
557	 148	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x86F0100099FF0001DE00F001FDF0100173FFF000F100060210015802520000
558	 149	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x86F0100099FF0001DE00F001FDF0100173FFF000F100060210015802520000
- stack 0: 0xF0
559	 14B	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x86
560	 14C	JUMP		 	 
- stack 0: 0x47C
561	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x47C
562	 87	PUSH4	ff010000	 	 
- stack 1: 0x47C
- stack 0: 0xFF010000
563	 8C	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0xFF010000
- stack 0: 0x20
564	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x47C
565	 90	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
566	 92	ADD		 	 
- stack 0: 0x480
567	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
568	 94	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x99FF0001DE00F001FDF0100173FFF000F100060210015802520000014DFF01
569	 95	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x99FF0001DE00F001FDF0100173FFF000F100060210015802520000014DFF01
- stack 0: 0xF0
570	 97	SHR		 	 
- stack 1: 0x480
- stack 0: 0x99
571	 98	JUMP		 	 
- stack 0: 0x480
572	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x480
573	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
574	 9B	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x99FF0001DE00F001FDF0100173FFF000F100060210015802520000014DFF01
575	 9C	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x99FF0001DE00F001FDF0100173FFF000F100060210015802520000014DFF01
- stack 0: 0xE0
576	 9E	SHR		 	 
- stack 1: 0x480
- stack 0: 0x99FF00
577	 9F	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x99FF00
- stack 0: 0xFFFF
578	 A2	AND		 	 
- stack 1: 0x480
- stack 0: 0xFF00
579	 A3	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0xFF00
- stack 0: 0x1
580	 A5	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
581	 A6	PUSH2	0020	 	 
- stack 2: 0x480
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
582	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x480
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
583	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x480
- stack 0: 0xFF00FF00
584	 AB	PUSH2	0020	 	 
- stack 2: 0x480
- stack 1: 0xFF00FF00
- stack 0: 0x20
585	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x480
586	 AF	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
587	 B1	ADD		 	 
- stack 0: 0x484
588	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
589	 B3	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x1DE00F001FDF0100173FFF000F100060210015802520000014DFF010099FFF0
590	 B4	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x1DE00F001FDF0100173FFF000F100060210015802520000014DFF010099FFF0
- stack 0: 0xF0
591	 B6	SHR		 	 
- stack 1: 0x484
- stack 0: 0x1DE
592	 B7	JUMP		 	 
- stack 0: 0x484
593	 1DE	JUMPDEST		 ;; __riscvimpl_ORI_1_1_0	  ;; # instr: ori ra,ra,240(ignore imm)
- stack 0: 0x484
594	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x484
- stack 0: 0x484
595	 1E0	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x1DE00F001FDF0100173FFF000F100060210015802520000014DFF010099FFF0
596	 1E1	PUSH1	E0	 	 
- stack 2: 0x484
- stack 1: 0x1DE00F001FDF0100173FFF000F100060210015802520000014DFF010099FFF0
- stack 0: 0xE0
597	 1E3	SHR		 	 
- stack 1: 0x484
- stack 0: 0x1DE00F0
598	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x484
- stack 1: 0x1DE00F0
- stack 0: 0xFFFF
599	 1E7	AND		 	 
- stack 1: 0x484
- stack 0: 0xF0
600	 1E8	PUSH1	01	 	 
- stack 2: 0x484
- stack 1: 0xF0
- stack 0: 0x1
601	 1EA	SIGNEXTEND		 	 
- stack 1: 0x484
- stack 0: 0xF0
602	 1EB	PUSH2	0020	 	 
- stack 2: 0x484
- stack 1: 0xF0
- stack 0: 0x20
603	 1EE	MLOAD		 	  ;; # read from x1
- stack 2: 0x484
- stack 1: 0xF0
- stack 0: 0xFF00FF00
604	 1EF	OR		 	  ;; # ORI
- stack 1: 0x484
- stack 0: 0xFF00FFF0
605	 1F0	PUSH2	0020	 	 
- stack 2: 0x484
- stack 1: 0xFF00FFF0
- stack 0: 0x20
606	 1F3	MSTORE		 	  ;; # store to x1
- stack 0: 0x484
607	 1F4	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
608	 1F6	ADD		 	 
- stack 0: 0x488
609	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
610	 1F8	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x1FDF0100173FFF000F100060210015802520000014DFF010099FFF000B800F0
611	 1F9	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x1FDF0100173FFF000F100060210015802520000014DFF010099FFF000B800F0
- stack 0: 0xF0
612	 1FB	SHR		 	 
- stack 1: 0x488
- stack 0: 0x1FD
613	 1FC	JUMP		 	 
- stack 0: 0x488
614	 1FD	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x488
615	 1FE	PUSH4	ff010000	 	 
- stack 1: 0x488
- stack 0: 0xFF010000
616	 203	PUSH2	03A0	 	 
- stack 2: 0x488
- stack 1: 0xFF010000
- stack 0: 0x3A0
617	 206	MSTORE		 	  ;; # store to x29
- stack 0: 0x488
618	 207	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
619	 209	ADD		 	 
- stack 0: 0x48C
620	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
621	 20B	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x173FFF000F100060210015802520000014DFF010099FFF000B800F0026C0000
622	 20C	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x173FFF000F100060210015802520000014DFF010099FFF000B800F0026C0000
- stack 0: 0xF0
623	 20E	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x173
624	 20F	JUMP		 	 
- stack 0: 0x48C
625	 173	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x48C
626	 174	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
627	 175	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x173FFF000F100060210015802520000014DFF010099FFF000B800F0026C0000
628	 176	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0x173FFF000F100060210015802520000014DFF010099FFF000B800F0026C0000
- stack 0: 0xE0
629	 178	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x173FFF0
630	 179	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0x173FFF0
- stack 0: 0xFFFF
631	 17C	AND		 	 
- stack 1: 0x48C
- stack 0: 0xFFF0
632	 17D	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0xFFF0
- stack 0: 0x1
633	 17F	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
634	 180	PUSH2	03A0	 	 
- stack 2: 0x48C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
635	 183	MLOAD		 	  ;; # read from x29
- stack 2: 0x48C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF010000
636	 184	ADD		 	  ;; # ADDI 29
- stack 1: 0x48C
- stack 0: 0xFF00FFF0
637	 185	PUSH2	03A0	 	 
- stack 2: 0x48C
- stack 1: 0xFF00FFF0
- stack 0: 0x3A0
638	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x48C
639	 189	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
640	 18B	ADD		 	 
- stack 0: 0x490
641	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
642	 18D	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xF100060210015802520000014DFF010099FFF000B800F0026C0000028B0001
643	 18E	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xF100060210015802520000014DFF010099FFF000B800F0026C0000028B0001
- stack 0: 0xF0
644	 190	SHR		 	 
- stack 1: 0x490
- stack 0: 0xF1
645	 191	JUMP		 	 
- stack 0: 0x490
646	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x490
647	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
648	 F3	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xF100060210015802520000014DFF010099FFF000B800F0026C0000028B0001
649	 F4	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0xF100060210015802520000014DFF010099FFF000B800F0026C0000028B0001
- stack 0: 0xE0
650	 F6	SHR		 	 
- stack 1: 0x490
- stack 0: 0xF10006
651	 F7	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0xF10006
- stack 0: 0xFFFF
652	 FA	AND		 	 
- stack 1: 0x490
- stack 0: 0x6
653	 FB	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0x6
- stack 0: 0x1
654	 FD	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0x6
655	 FE	PUSH2	0380	 	 
- stack 2: 0x490
- stack 1: 0x6
- stack 0: 0x380
656	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x490
657	 102	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
658	 104	ADD		 	 
- stack 0: 0x494
659	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
660	 106	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x210015802520000014DFF010099FFF000B800F0026C0000028B000102AA0002
661	 107	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x210015802520000014DFF010099FFF000B800F0026C0000028B000102AA0002
- stack 0: 0xF0
662	 109	SHR		 	 
- stack 1: 0x494
- stack 0: 0x210
663	 10A	JUMP		 	 
- stack 0: 0x494
664	 210	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,158(ignore imm)
- stack 0: 0x494
665	 211	PUSH2	0020	 	 
- stack 1: 0x494
- stack 0: 0x20
666	 214	MLOAD		 	  ;; # read from x1
- stack 1: 0x494
- stack 0: 0xFF00FFF0
667	 215	PUSH4	FFFFFFFF	 	 
- stack 2: 0x494
- stack 1: 0xFF00FFF0
- stack 0: 0xFFFFFFFF
668	 21A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x494
- stack 0: 0xFF00FFF0
669	 21B	PUSH2	03A0	 	 
- stack 2: 0x494
- stack 1: 0xFF00FFF0
- stack 0: 0x3A0
670	 21E	MLOAD		 	  ;; # read from x29
- stack 2: 0x494
- stack 1: 0xFF00FFF0
- stack 0: 0xFF00FFF0
671	 21F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x494
- stack 2: 0xFF00FFF0
- stack 1: 0xFF00FFF0
- stack 0: 0xFFFFFFFF
672	 224	AND		 	  ;; # mask to 32 bits
- stack 2: 0x494
- stack 1: 0xFF00FFF0
- stack 0: 0xFF00FFF0
673	 225	SUB		 	 
- stack 1: 0x494
- stack 0: 0x0
674	 226	PUSH2	022E	 ;; _neq_aceb3742d1fe005c1a29649af623d4648847180136fb71e583ada0df0b72fb26	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x22E
675	 229	JUMPI		 	 
- stack 0: 0x494
676	 22A	PUSH2	0248	 ;; _neq_after_aceb3742d1fe005c1a29649af623d4648847180136fb71e583ada0df0b72fb26	 
- stack 1: 0x494
- stack 0: 0x248
677	 22D	JUMP		 	 
- stack 0: 0x494
678	 248	JUMPDEST		 ;; _neq_after_aceb3742d1fe005c1a29649af623d4648847180136fb71e583ada0df0b72fb26	 
- stack 0: 0x494
679	 249	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
680	 24B	ADD		 	 
- stack 0: 0x498
681	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
682	 24D	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x2520000014DFF010099FFF000B800F0026C0000028B000102AA000202C4FFE8
683	 24E	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x2520000014DFF010099FFF000B800F0026C0000028B000102AA000202C4FFE8
- stack 0: 0xF0
684	 250	SHR		 	 
- stack 1: 0x498
- stack 0: 0x252
685	 251	JUMP		 	 
- stack 0: 0x498
686	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x498
687	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
688	 254	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x2520000014DFF010099FFF000B800F0026C0000028B000102AA000202C4FFE8
689	 255	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0x2520000014DFF010099FFF000B800F0026C0000028B000102AA000202C4FFE8
- stack 0: 0xE0
690	 257	SHR		 	 
- stack 1: 0x498
- stack 0: 0x2520000
691	 258	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0x2520000
- stack 0: 0xFFFF
692	 25B	AND		 	 
- stack 1: 0x498
- stack 0: 0x0
693	 25C	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0x1
694	 25E	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x0
695	 25F	PUSH2	0080	 	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0x80
696	 262	MSTORE		 	  ;; # store to x4
- stack 0: 0x498
697	 263	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
698	 265	ADD		 	 
- stack 0: 0x49C
699	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
700	 267	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x14DFF010099FFF000B800F0026C0000028B000102AA000202C4FFE80160FF01
701	 268	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x14DFF010099FFF000B800F0026C0000028B000102AA000202C4FFE80160FF01
- stack 0: 0xF0
702	 26A	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x14D
703	 26B	JUMP		 	 
- stack 0: 0x49C
704	 14D	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x49C
705	 14E	PUSH4	0ff01000	 	 
- stack 1: 0x49C
- stack 0: 0xFF01000
706	 153	PUSH2	0020	 	 
- stack 2: 0x49C
- stack 1: 0xFF01000
- stack 0: 0x20
707	 156	MSTORE		 	  ;; # store to x1
- stack 0: 0x49C
708	 157	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
709	 159	ADD		 	 
- stack 0: 0x4A0
710	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
711	 15B	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x99FFF000B800F0026C0000028B000102AA000202C4FFE80160FF010173FFF0
712	 15C	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x99FFF000B800F0026C0000028B000102AA000202C4FFE80160FF010173FFF0
- stack 0: 0xF0
713	 15E	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x99
714	 15F	JUMP		 	 
- stack 0: 0x4A0
715	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4A0
716	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
717	 9B	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x99FFF000B800F0026C0000028B000102AA000202C4FFE80160FF010173FFF0
718	 9C	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0x99FFF000B800F0026C0000028B000102AA000202C4FFE80160FF010173FFF0
- stack 0: 0xE0
719	 9E	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x99FFF0
720	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
721	 A2	AND		 	 
- stack 1: 0x4A0
- stack 0: 0xFFF0
722	 A3	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0xFFF0
- stack 0: 0x1
723	 A5	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
724	 A6	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
725	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
726	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4A0
- stack 0: 0xFF00FF0
727	 AB	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0xFF00FF0
- stack 0: 0x20
728	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A0
729	 AF	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
730	 B1	ADD		 	 
- stack 0: 0x4A4
731	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
732	 B3	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xB800F0026C0000028B000102AA000202C4FFE80160FF010173FFF000F10007
733	 B4	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0xB800F0026C0000028B000102AA000202C4FFE80160FF010173FFF000F10007
- stack 0: 0xF0
734	 B6	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xB8
735	 B7	JUMP		 	 
- stack 0: 0x4A4
736	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x4A4
737	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
738	 BA	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xB800F0026C0000028B000102AA000202C4FFE80160FF010173FFF000F10007
739	 BB	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0xB800F0026C0000028B000102AA000202C4FFE80160FF010173FFF000F10007
- stack 0: 0xE0
740	 BD	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xB800F0
741	 BE	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0xB800F0
- stack 0: 0xFFFF
742	 C1	AND		 	 
- stack 1: 0x4A4
- stack 0: 0xF0
743	 C2	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0xF0
- stack 0: 0x1
744	 C4	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xF0
745	 C5	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0xF0
- stack 0: 0x20
746	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A4
- stack 1: 0xF0
- stack 0: 0xFF00FF0
747	 C9	OR		 	  ;; # ORI
- stack 1: 0x4A4
- stack 0: 0xFF00FF0
748	 CA	PUSH2	0060	 	 
- stack 2: 0x4A4
- stack 1: 0xFF00FF0
- stack 0: 0x60
749	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x4A4
750	 CE	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
751	 D0	ADD		 	 
- stack 0: 0x4A8
752	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
753	 D2	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x26C0000028B000102AA000202C4FFE80160FF010173FFF000F1000703060128
754	 D3	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x26C0000028B000102AA000202C4FFE80160FF010173FFF000F1000703060128
- stack 0: 0xF0
755	 D5	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x26C
756	 D6	JUMP		 	 
- stack 0: 0x4A8
757	 26C	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x4A8
758	 26D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
759	 26E	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x26C0000028B000102AA000202C4FFE80160FF010173FFF000F1000703060128
760	 26F	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0x26C0000028B000102AA000202C4FFE80160FF010173FFF000F1000703060128
- stack 0: 0xE0
761	 271	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x26C0000
762	 272	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x26C0000
- stack 0: 0xFFFF
763	 275	AND		 	 
- stack 1: 0x4A8
- stack 0: 0x0
764	 276	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0x1
765	 278	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0x0
766	 279	PUSH2	0060	 	 
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0x60
767	 27C	MLOAD		 	  ;; # read from x3
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0xFF00FF0
768	 27D	ADD		 	  ;; # ADDI 3
- stack 1: 0x4A8
- stack 0: 0xFF00FF0
769	 27E	PUSH2	00C0	 	 
- stack 2: 0x4A8
- stack 1: 0xFF00FF0
- stack 0: 0xC0
770	 281	MSTORE		 	  ;; # store to x6
- stack 0: 0x4A8
771	 282	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
772	 284	ADD		 	 
- stack 0: 0x4AC
773	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
774	 286	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x28B000102AA000202C4FFE80160FF010173FFF000F100070306012802520000
775	 287	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x28B000102AA000202C4FFE80160FF010173FFF000F100070306012802520000
- stack 0: 0xF0
776	 289	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x28B
777	 28A	JUMP		 	 
- stack 0: 0x4AC
778	 28B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4AC
779	 28C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
780	 28D	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x28B000102AA000202C4FFE80160FF010173FFF000F100070306012802520000
781	 28E	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0x28B000102AA000202C4FFE80160FF010173FFF000F100070306012802520000
- stack 0: 0xE0
782	 290	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x28B0001
783	 291	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0x28B0001
- stack 0: 0xFFFF
784	 294	AND		 	 
- stack 1: 0x4AC
- stack 0: 0x1
785	 295	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0x1
- stack 0: 0x1
786	 297	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0x1
787	 298	PUSH2	0080	 	 
- stack 2: 0x4AC
- stack 1: 0x1
- stack 0: 0x80
788	 29B	MLOAD		 	  ;; # read from x4
- stack 2: 0x4AC
- stack 1: 0x1
- stack 0: 0x0
789	 29C	ADD		 	  ;; # ADDI 4
- stack 1: 0x4AC
- stack 0: 0x1
790	 29D	PUSH2	0080	 	 
- stack 2: 0x4AC
- stack 1: 0x1
- stack 0: 0x80
791	 2A0	MSTORE		 	  ;; # store to x4
- stack 0: 0x4AC
792	 2A1	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
793	 2A3	ADD		 	 
- stack 0: 0x4B0
794	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
795	 2A5	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x2AA000202C4FFE80160FF010173FFF000F10007030601280252000001920FF0
796	 2A6	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x2AA000202C4FFE80160FF010173FFF000F10007030601280252000001920FF0
- stack 0: 0xF0
797	 2A8	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x2AA
798	 2A9	JUMP		 	 
- stack 0: 0x4B0
799	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4B0
800	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
801	 2AC	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x2AA000202C4FFE80160FF010173FFF000F10007030601280252000001920FF0
802	 2AD	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x2AA000202C4FFE80160FF010173FFF000F10007030601280252000001920FF0
- stack 0: 0xE0
803	 2AF	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x2AA0002
804	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x2AA0002
- stack 0: 0xFFFF
805	 2B3	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x2
806	 2B4	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x2
- stack 0: 0x1
807	 2B6	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x2
808	 2B7	PUSH2	00A0	 	 
- stack 2: 0x4B0
- stack 1: 0x2
- stack 0: 0xA0
809	 2BA	MSTORE		 	  ;; # store to x5
- stack 0: 0x4B0
810	 2BB	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
811	 2BD	ADD		 	 
- stack 0: 0x4B4
812	 2BE	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
813	 2BF	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x2C4FFE80160FF010173FFF000F10007030601280252000001920FF0009900FF
814	 2C0	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x2C4FFE80160FF010173FFF000F10007030601280252000001920FF0009900FF
- stack 0: 0xF0
815	 2C2	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x2C4
816	 2C3	JUMP		 	 
- stack 0: 0x4B4
817	 2C4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4B4
818	 2C5	PUSH2	0080	 	 
- stack 1: 0x4B4
- stack 0: 0x80
819	 2C8	MLOAD		 	  ;; # read from x4
- stack 1: 0x4B4
- stack 0: 0x1
820	 2C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
821	 2CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B4
- stack 0: 0x1
822	 2CF	PUSH2	00A0	 	 
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0xA0
823	 2D2	MLOAD		 	  ;; # read from x5
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0x2
824	 2D3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
825	 2D8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0x2
826	 2D9	SUB		 	 
- stack 1: 0x4B4
- stack 0: 0x1
827	 2DA	PUSH2	02E2	 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0x2E2
828	 2DD	JUMPI		 	 
- stack 0: 0x4B4
829	 2E2	JUMPDEST		 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 0: 0x4B4
830	 2E3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
831	 2E4	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x2C4FFE80160FF010173FFF000F10007030601280252000001920FF0009900FF
832	 2E5	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0x2C4FFE80160FF010173FFF000F10007030601280252000001920FF0009900FF
- stack 0: 0xE0
833	 2E7	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x2C4FFE8
834	 2E8	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x2C4FFE8
- stack 0: 0xFFFF
835	 2EB	AND		 	 
- stack 1: 0x4B4
- stack 0: 0xFFE8
836	 2EC	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0xFFE8
- stack 0: 0x1
837	 2EE	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
838	 2EF	ADD		 	 
- stack 0: 0x49C
839	 2F0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x49C
- stack 0: 0xFFFFFFFF
840	 2F5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x49C
841	 2F6	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
842	 2F7	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x14DFF010099FFF000B800F0026C0000028B000102AA000202C4FFE80160FF01
843	 2F8	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x14DFF010099FFF000B800F0026C0000028B000102AA000202C4FFE80160FF01
- stack 0: 0xF0
844	 2FA	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x14D
845	 2FB	JUMP		 	 
- stack 0: 0x49C
846	 14D	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x49C
847	 14E	PUSH4	0ff01000	 	 
- stack 1: 0x49C
- stack 0: 0xFF01000
848	 153	PUSH2	0020	 	 
- stack 2: 0x49C
- stack 1: 0xFF01000
- stack 0: 0x20
849	 156	MSTORE		 	  ;; # store to x1
- stack 0: 0x49C
850	 157	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
851	 159	ADD		 	 
- stack 0: 0x4A0
852	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
853	 15B	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x99FFF000B800F0026C0000028B000102AA000202C4FFE80160FF010173FFF0
854	 15C	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x99FFF000B800F0026C0000028B000102AA000202C4FFE80160FF010173FFF0
- stack 0: 0xF0
855	 15E	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x99
856	 15F	JUMP		 	 
- stack 0: 0x4A0
857	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4A0
858	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
859	 9B	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x99FFF000B800F0026C0000028B000102AA000202C4FFE80160FF010173FFF0
860	 9C	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0x99FFF000B800F0026C0000028B000102AA000202C4FFE80160FF010173FFF0
- stack 0: 0xE0
861	 9E	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x99FFF0
862	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
863	 A2	AND		 	 
- stack 1: 0x4A0
- stack 0: 0xFFF0
864	 A3	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0xFFF0
- stack 0: 0x1
865	 A5	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
866	 A6	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
867	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
868	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4A0
- stack 0: 0xFF00FF0
869	 AB	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0xFF00FF0
- stack 0: 0x20
870	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A0
871	 AF	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
872	 B1	ADD		 	 
- stack 0: 0x4A4
873	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
874	 B3	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xB800F0026C0000028B000102AA000202C4FFE80160FF010173FFF000F10007
875	 B4	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0xB800F0026C0000028B000102AA000202C4FFE80160FF010173FFF000F10007
- stack 0: 0xF0
876	 B6	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xB8
877	 B7	JUMP		 	 
- stack 0: 0x4A4
878	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x4A4
879	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
880	 BA	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xB800F0026C0000028B000102AA000202C4FFE80160FF010173FFF000F10007
881	 BB	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0xB800F0026C0000028B000102AA000202C4FFE80160FF010173FFF000F10007
- stack 0: 0xE0
882	 BD	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xB800F0
883	 BE	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0xB800F0
- stack 0: 0xFFFF
884	 C1	AND		 	 
- stack 1: 0x4A4
- stack 0: 0xF0
885	 C2	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0xF0
- stack 0: 0x1
886	 C4	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xF0
887	 C5	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0xF0
- stack 0: 0x20
888	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A4
- stack 1: 0xF0
- stack 0: 0xFF00FF0
889	 C9	OR		 	  ;; # ORI
- stack 1: 0x4A4
- stack 0: 0xFF00FF0
890	 CA	PUSH2	0060	 	 
- stack 2: 0x4A4
- stack 1: 0xFF00FF0
- stack 0: 0x60
891	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x4A4
892	 CE	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
893	 D0	ADD		 	 
- stack 0: 0x4A8
894	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
895	 D2	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x26C0000028B000102AA000202C4FFE80160FF010173FFF000F1000703060128
896	 D3	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x26C0000028B000102AA000202C4FFE80160FF010173FFF000F1000703060128
- stack 0: 0xF0
897	 D5	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x26C
898	 D6	JUMP		 	 
- stack 0: 0x4A8
899	 26C	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x4A8
900	 26D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
901	 26E	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x26C0000028B000102AA000202C4FFE80160FF010173FFF000F1000703060128
902	 26F	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0x26C0000028B000102AA000202C4FFE80160FF010173FFF000F1000703060128
- stack 0: 0xE0
903	 271	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x26C0000
904	 272	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x26C0000
- stack 0: 0xFFFF
905	 275	AND		 	 
- stack 1: 0x4A8
- stack 0: 0x0
906	 276	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0x1
907	 278	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0x0
908	 279	PUSH2	0060	 	 
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0x60
909	 27C	MLOAD		 	  ;; # read from x3
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0xFF00FF0
910	 27D	ADD		 	  ;; # ADDI 3
- stack 1: 0x4A8
- stack 0: 0xFF00FF0
911	 27E	PUSH2	00C0	 	 
- stack 2: 0x4A8
- stack 1: 0xFF00FF0
- stack 0: 0xC0
912	 281	MSTORE		 	  ;; # store to x6
- stack 0: 0x4A8
913	 282	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
914	 284	ADD		 	 
- stack 0: 0x4AC
915	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
916	 286	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x28B000102AA000202C4FFE80160FF010173FFF000F100070306012802520000
917	 287	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x28B000102AA000202C4FFE80160FF010173FFF000F100070306012802520000
- stack 0: 0xF0
918	 289	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x28B
919	 28A	JUMP		 	 
- stack 0: 0x4AC
920	 28B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4AC
921	 28C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
922	 28D	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x28B000102AA000202C4FFE80160FF010173FFF000F100070306012802520000
923	 28E	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0x28B000102AA000202C4FFE80160FF010173FFF000F100070306012802520000
- stack 0: 0xE0
924	 290	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x28B0001
925	 291	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0x28B0001
- stack 0: 0xFFFF
926	 294	AND		 	 
- stack 1: 0x4AC
- stack 0: 0x1
927	 295	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0x1
- stack 0: 0x1
928	 297	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0x1
929	 298	PUSH2	0080	 	 
- stack 2: 0x4AC
- stack 1: 0x1
- stack 0: 0x80
930	 29B	MLOAD		 	  ;; # read from x4
- stack 2: 0x4AC
- stack 1: 0x1
- stack 0: 0x1
931	 29C	ADD		 	  ;; # ADDI 4
- stack 1: 0x4AC
- stack 0: 0x2
932	 29D	PUSH2	0080	 	 
- stack 2: 0x4AC
- stack 1: 0x2
- stack 0: 0x80
933	 2A0	MSTORE		 	  ;; # store to x4
- stack 0: 0x4AC
934	 2A1	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
935	 2A3	ADD		 	 
- stack 0: 0x4B0
936	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
937	 2A5	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x2AA000202C4FFE80160FF010173FFF000F10007030601280252000001920FF0
938	 2A6	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x2AA000202C4FFE80160FF010173FFF000F10007030601280252000001920FF0
- stack 0: 0xF0
939	 2A8	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x2AA
940	 2A9	JUMP		 	 
- stack 0: 0x4B0
941	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4B0
942	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
943	 2AC	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x2AA000202C4FFE80160FF010173FFF000F10007030601280252000001920FF0
944	 2AD	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x2AA000202C4FFE80160FF010173FFF000F10007030601280252000001920FF0
- stack 0: 0xE0
945	 2AF	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x2AA0002
946	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x2AA0002
- stack 0: 0xFFFF
947	 2B3	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x2
948	 2B4	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x2
- stack 0: 0x1
949	 2B6	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x2
950	 2B7	PUSH2	00A0	 	 
- stack 2: 0x4B0
- stack 1: 0x2
- stack 0: 0xA0
951	 2BA	MSTORE		 	  ;; # store to x5
- stack 0: 0x4B0
952	 2BB	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
953	 2BD	ADD		 	 
- stack 0: 0x4B4
954	 2BE	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
955	 2BF	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x2C4FFE80160FF010173FFF000F10007030601280252000001920FF0009900FF
956	 2C0	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x2C4FFE80160FF010173FFF000F10007030601280252000001920FF0009900FF
- stack 0: 0xF0
957	 2C2	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x2C4
958	 2C3	JUMP		 	 
- stack 0: 0x4B4
959	 2C4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4B4
960	 2C5	PUSH2	0080	 	 
- stack 1: 0x4B4
- stack 0: 0x80
961	 2C8	MLOAD		 	  ;; # read from x4
- stack 1: 0x4B4
- stack 0: 0x2
962	 2C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
963	 2CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B4
- stack 0: 0x2
964	 2CF	PUSH2	00A0	 	 
- stack 2: 0x4B4
- stack 1: 0x2
- stack 0: 0xA0
965	 2D2	MLOAD		 	  ;; # read from x5
- stack 2: 0x4B4
- stack 1: 0x2
- stack 0: 0x2
966	 2D3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
967	 2D8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B4
- stack 1: 0x2
- stack 0: 0x2
968	 2D9	SUB		 	 
- stack 1: 0x4B4
- stack 0: 0x0
969	 2DA	PUSH2	02E2	 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 2: 0x4B4
- stack 1: 0x0
- stack 0: 0x2E2
970	 2DD	JUMPI		 	 
- stack 0: 0x4B4
971	 2DE	PUSH2	02FC	 ;; _neq_after_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 1: 0x4B4
- stack 0: 0x2FC
972	 2E1	JUMP		 	 
- stack 0: 0x4B4
973	 2FC	JUMPDEST		 ;; _neq_after_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 0: 0x4B4
974	 2FD	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
975	 2FF	ADD		 	 
- stack 0: 0x4B8
976	 300	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
977	 301	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x160FF010173FFF000F10007030601280252000001920FF0009900FF00B8070F
978	 302	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x160FF010173FFF000F10007030601280252000001920FF0009900FF00B8070F
- stack 0: 0xF0
979	 304	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x160
980	 305	JUMP		 	 
- stack 0: 0x4B8
981	 160	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x4B8
982	 161	PUSH4	0ff01000	 	 
- stack 1: 0x4B8
- stack 0: 0xFF01000
983	 166	PUSH2	03A0	 	 
- stack 2: 0x4B8
- stack 1: 0xFF01000
- stack 0: 0x3A0
984	 169	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B8
985	 16A	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
986	 16C	ADD		 	 
- stack 0: 0x4BC
987	 16D	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
988	 16E	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x173FFF000F10007030601280252000001920FF0009900FF00B8070F03480000
989	 16F	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x173FFF000F10007030601280252000001920FF0009900FF00B8070F03480000
- stack 0: 0xF0
990	 171	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x173
991	 172	JUMP		 	 
- stack 0: 0x4BC
992	 173	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x4BC
993	 174	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
994	 175	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x173FFF000F10007030601280252000001920FF0009900FF00B8070F03480000
995	 176	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0x173FFF000F10007030601280252000001920FF0009900FF00B8070F03480000
- stack 0: 0xE0
996	 178	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x173FFF0
997	 179	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x173FFF0
- stack 0: 0xFFFF
998	 17C	AND		 	 
- stack 1: 0x4BC
- stack 0: 0xFFF0
999	 17D	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0xFFF0
- stack 0: 0x1
1000	 17F	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1001	 180	PUSH2	03A0	 	 
- stack 2: 0x4BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
1002	 183	MLOAD		 	  ;; # read from x29
- stack 2: 0x4BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
1003	 184	ADD		 	  ;; # ADDI 29
- stack 1: 0x4BC
- stack 0: 0xFF00FF0
1004	 185	PUSH2	03A0	 	 
- stack 2: 0x4BC
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
1005	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x4BC
1006	 189	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
1007	 18B	ADD		 	 
- stack 0: 0x4C0
1008	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
1009	 18D	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xF10007030601280252000001920FF0009900FF00B8070F03480000026C0000
1010	 18E	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0xF10007030601280252000001920FF0009900FF00B8070F03480000026C0000
- stack 0: 0xF0
1011	 190	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xF1
1012	 191	JUMP		 	 
- stack 0: 0x4C0
1013	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C0
1014	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
1015	 F3	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xF10007030601280252000001920FF0009900FF00B8070F03480000026C0000
1016	 F4	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0xF10007030601280252000001920FF0009900FF00B8070F03480000026C0000
- stack 0: 0xE0
1017	 F6	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xF10007
1018	 F7	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0xF10007
- stack 0: 0xFFFF
1019	 FA	AND		 	 
- stack 1: 0x4C0
- stack 0: 0x7
1020	 FB	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0x7
- stack 0: 0x1
1021	 FD	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0x7
1022	 FE	PUSH2	0380	 	 
- stack 2: 0x4C0
- stack 1: 0x7
- stack 0: 0x380
1023	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C0
1024	 102	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
1025	 104	ADD		 	 
- stack 0: 0x4C4
1026	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
1027	 106	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x30601280252000001920FF0009900FF00B8070F03480000026C0000028B0001
1028	 107	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x30601280252000001920FF0009900FF00B8070F03480000026C0000028B0001
- stack 0: 0xF0
1029	 109	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x306
1030	 10A	JUMP		 	 
- stack 0: 0x4C4
1031	 306	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,128(ignore imm)
- stack 0: 0x4C4
1032	 307	PUSH2	00C0	 	 
- stack 1: 0x4C4
- stack 0: 0xC0
1033	 30A	MLOAD		 	  ;; # read from x6
- stack 1: 0x4C4
- stack 0: 0xFF00FF0
1034	 30B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C4
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
1035	 310	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C4
- stack 0: 0xFF00FF0
1036	 311	PUSH2	03A0	 	 
- stack 2: 0x4C4
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
1037	 314	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C4
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
1038	 315	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C4
- stack 2: 0xFF00FF0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
1039	 31A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C4
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
1040	 31B	SUB		 	 
- stack 1: 0x4C4
- stack 0: 0x0
1041	 31C	PUSH2	0324	 ;; _neq_5e7937d0d8f2c70516e4f612eaaf8cc5aa8e5c01ba2a0af8ac79c472b6f1405f	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x324
1042	 31F	JUMPI		 	 
- stack 0: 0x4C4
1043	 320	PUSH2	033E	 ;; _neq_after_5e7937d0d8f2c70516e4f612eaaf8cc5aa8e5c01ba2a0af8ac79c472b6f1405f	 
- stack 1: 0x4C4
- stack 0: 0x33E
1044	 323	JUMP		 	 
- stack 0: 0x4C4
1045	 33E	JUMPDEST		 ;; _neq_after_5e7937d0d8f2c70516e4f612eaaf8cc5aa8e5c01ba2a0af8ac79c472b6f1405f	 
- stack 0: 0x4C4
1046	 33F	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
1047	 341	ADD		 	 
- stack 0: 0x4C8
1048	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
1049	 343	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x252000001920FF0009900FF00B8070F03480000026C0000028B000102AA0002
1050	 344	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x252000001920FF0009900FF00B8070F03480000026C0000028B000102AA0002
- stack 0: 0xF0
1051	 346	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x252
1052	 347	JUMP		 	 
- stack 0: 0x4C8
1053	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x4C8
1054	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
1055	 254	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x252000001920FF0009900FF00B8070F03480000026C0000028B000102AA0002
1056	 255	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0x252000001920FF0009900FF00B8070F03480000026C0000028B000102AA0002
- stack 0: 0xE0
1057	 257	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x2520000
1058	 258	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0x2520000
- stack 0: 0xFFFF
1059	 25B	AND		 	 
- stack 1: 0x4C8
- stack 0: 0x0
1060	 25C	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x1
1061	 25E	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0x0
1062	 25F	PUSH2	0080	 	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x80
1063	 262	MSTORE		 	  ;; # store to x4
- stack 0: 0x4C8
1064	 263	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
1065	 265	ADD		 	 
- stack 0: 0x4CC
1066	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
1067	 267	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x1920FF0009900FF00B8070F03480000026C0000028B000102AA000202C4FFE4
1068	 268	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x1920FF0009900FF00B8070F03480000026C0000028B000102AA000202C4FFE4
- stack 0: 0xF0
1069	 26A	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x192
1070	 26B	JUMP		 	 
- stack 0: 0x4CC
1071	 192	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x4CC
1072	 193	PUSH4	00ff0000	 	 
- stack 1: 0x4CC
- stack 0: 0xFF0000
1073	 198	PUSH2	0020	 	 
- stack 2: 0x4CC
- stack 1: 0xFF0000
- stack 0: 0x20
1074	 19B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4CC
1075	 19C	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
1076	 19E	ADD		 	 
- stack 0: 0x4D0
1077	 19F	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
1078	 1A0	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x9900FF00B8070F03480000026C0000028B000102AA000202C4FFE401A50FF0
1079	 1A1	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x9900FF00B8070F03480000026C0000028B000102AA000202C4FFE401A50FF0
- stack 0: 0xF0
1080	 1A3	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x99
1081	 1A4	JUMP		 	 
- stack 0: 0x4D0
1082	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4D0
1083	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
1084	 9B	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x9900FF00B8070F03480000026C0000028B000102AA000202C4FFE401A50FF0
1085	 9C	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x9900FF00B8070F03480000026C0000028B000102AA000202C4FFE401A50FF0
- stack 0: 0xE0
1086	 9E	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x9900FF
1087	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x9900FF
- stack 0: 0xFFFF
1088	 A2	AND		 	 
- stack 1: 0x4D0
- stack 0: 0xFF
1089	 A3	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0xFF
- stack 0: 0x1
1090	 A5	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0xFF
1091	 A6	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0xFF
- stack 0: 0x20
1092	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D0
- stack 1: 0xFF
- stack 0: 0xFF0000
1093	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4D0
- stack 0: 0xFF00FF
1094	 AB	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0xFF00FF
- stack 0: 0x20
1095	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D0
1096	 AF	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1097	 B1	ADD		 	 
- stack 0: 0x4D4
1098	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1099	 B3	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xB8070F03480000026C0000028B000102AA000202C4FFE401A50FF0017307FF
1100	 B4	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0xB8070F03480000026C0000028B000102AA000202C4FFE401A50FF0017307FF
- stack 0: 0xF0
1101	 B6	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xB8
1102	 B7	JUMP		 	 
- stack 0: 0x4D4
1103	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x4D4
1104	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
1105	 BA	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xB8070F03480000026C0000028B000102AA000202C4FFE401A50FF0017307FF
1106	 BB	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0xB8070F03480000026C0000028B000102AA000202C4FFE401A50FF0017307FF
- stack 0: 0xE0
1107	 BD	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xB8070F
1108	 BE	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0xB8070F
- stack 0: 0xFFFF
1109	 C1	AND		 	 
- stack 1: 0x4D4
- stack 0: 0x70F
1110	 C2	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0x70F
- stack 0: 0x1
1111	 C4	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0x70F
1112	 C5	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0x70F
- stack 0: 0x20
1113	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D4
- stack 1: 0x70F
- stack 0: 0xFF00FF
1114	 C9	OR		 	  ;; # ORI
- stack 1: 0x4D4
- stack 0: 0xFF07FF
1115	 CA	PUSH2	0060	 	 
- stack 2: 0x4D4
- stack 1: 0xFF07FF
- stack 0: 0x60
1116	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x4D4
1117	 CE	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1118	 D0	ADD		 	 
- stack 0: 0x4D8
1119	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1120	 D2	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x3480000026C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008
1121	 D3	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x3480000026C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008
- stack 0: 0xF0
1122	 D5	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x348
1123	 D6	JUMP		 	 
- stack 0: 0x4D8
1124	 348	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x4D8
1125	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
1126	 34A	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x3480000026C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008
1127	 34B	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0x3480000026C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008
- stack 0: 0xE0
1128	 34D	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x3480000
1129	 34E	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x3480000
- stack 0: 0xFFFF
1130	 351	AND		 	 
- stack 1: 0x4D8
- stack 0: 0x0
1131	 352	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0x0
- stack 0: 0x1
1132	 354	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0x0
1133	 355	POP		 	 
- stack 0: 0x4D8
1134	 356	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1135	 358	ADD		 	 
- stack 0: 0x4DC
1136	 359	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1137	 35A	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x26C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008030600F4
1138	 35B	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x26C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008030600F4
- stack 0: 0xF0
1139	 35D	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x26C
1140	 35E	JUMP		 	 
- stack 0: 0x4DC
1141	 26C	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x4DC
1142	 26D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
1143	 26E	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x26C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008030600F4
1144	 26F	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0x26C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008030600F4
- stack 0: 0xE0
1145	 271	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x26C0000
1146	 272	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x26C0000
- stack 0: 0xFFFF
1147	 275	AND		 	 
- stack 1: 0x4DC
- stack 0: 0x0
1148	 276	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x1
1149	 278	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0x0
1150	 279	PUSH2	0060	 	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x60
1151	 27C	MLOAD		 	  ;; # read from x3
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0xFF07FF
1152	 27D	ADD		 	  ;; # ADDI 3
- stack 1: 0x4DC
- stack 0: 0xFF07FF
1153	 27E	PUSH2	00C0	 	 
- stack 2: 0x4DC
- stack 1: 0xFF07FF
- stack 0: 0xC0
1154	 281	MSTORE		 	  ;; # store to x6
- stack 0: 0x4DC
1155	 282	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1156	 284	ADD		 	 
- stack 0: 0x4E0
1157	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1158	 286	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x28B000102AA000202C4FFE401A50FF0017307FF00F10008030600F402520000
1159	 287	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x28B000102AA000202C4FFE401A50FF0017307FF00F10008030600F402520000
- stack 0: 0xF0
1160	 289	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x28B
1161	 28A	JUMP		 	 
- stack 0: 0x4E0
1162	 28B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4E0
1163	 28C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1164	 28D	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x28B000102AA000202C4FFE401A50FF0017307FF00F10008030600F402520000
1165	 28E	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0x28B000102AA000202C4FFE401A50FF0017307FF00F10008030600F402520000
- stack 0: 0xE0
1166	 290	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x28B0001
1167	 291	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x28B0001
- stack 0: 0xFFFF
1168	 294	AND		 	 
- stack 1: 0x4E0
- stack 0: 0x1
1169	 295	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0x1
- stack 0: 0x1
1170	 297	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0x1
1171	 298	PUSH2	0080	 	 
- stack 2: 0x4E0
- stack 1: 0x1
- stack 0: 0x80
1172	 29B	MLOAD		 	  ;; # read from x4
- stack 2: 0x4E0
- stack 1: 0x1
- stack 0: 0x0
1173	 29C	ADD		 	  ;; # ADDI 4
- stack 1: 0x4E0
- stack 0: 0x1
1174	 29D	PUSH2	0080	 	 
- stack 2: 0x4E0
- stack 1: 0x1
- stack 0: 0x80
1175	 2A0	MSTORE		 	  ;; # store to x4
- stack 0: 0x4E0
1176	 2A1	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1177	 2A3	ADD		 	 
- stack 0: 0x4E4
1178	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1179	 2A5	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x2AA000202C4FFE401A50FF0017307FF00F10008030600F40252000001B800FF
1180	 2A6	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x2AA000202C4FFE401A50FF0017307FF00F10008030600F40252000001B800FF
- stack 0: 0xF0
1181	 2A8	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x2AA
1182	 2A9	JUMP		 	 
- stack 0: 0x4E4
1183	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4E4
1184	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1185	 2AC	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x2AA000202C4FFE401A50FF0017307FF00F10008030600F40252000001B800FF
1186	 2AD	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0x2AA000202C4FFE401A50FF0017307FF00F10008030600F40252000001B800FF
- stack 0: 0xE0
1187	 2AF	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x2AA0002
1188	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x2AA0002
- stack 0: 0xFFFF
1189	 2B3	AND		 	 
- stack 1: 0x4E4
- stack 0: 0x2
1190	 2B4	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0x2
- stack 0: 0x1
1191	 2B6	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0x2
1192	 2B7	PUSH2	00A0	 	 
- stack 2: 0x4E4
- stack 1: 0x2
- stack 0: 0xA0
1193	 2BA	MSTORE		 	  ;; # store to x5
- stack 0: 0x4E4
1194	 2BB	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1195	 2BD	ADD		 	 
- stack 0: 0x4E8
1196	 2BE	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1197	 2BF	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x2C4FFE401A50FF0017307FF00F10008030600F40252000001B800FF0099000F
1198	 2C0	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x2C4FFE401A50FF0017307FF00F10008030600F40252000001B800FF0099000F
- stack 0: 0xF0
1199	 2C2	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x2C4
1200	 2C3	JUMP		 	 
- stack 0: 0x4E8
1201	 2C4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4E8
1202	 2C5	PUSH2	0080	 	 
- stack 1: 0x4E8
- stack 0: 0x80
1203	 2C8	MLOAD		 	  ;; # read from x4
- stack 1: 0x4E8
- stack 0: 0x1
1204	 2C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1205	 2CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E8
- stack 0: 0x1
1206	 2CF	PUSH2	00A0	 	 
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0xA0
1207	 2D2	MLOAD		 	  ;; # read from x5
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0x2
1208	 2D3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1209	 2D8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0x2
1210	 2D9	SUB		 	 
- stack 1: 0x4E8
- stack 0: 0x1
1211	 2DA	PUSH2	02E2	 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0x2E2
1212	 2DD	JUMPI		 	 
- stack 0: 0x4E8
1213	 2E2	JUMPDEST		 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 0: 0x4E8
1214	 2E3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1215	 2E4	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x2C4FFE401A50FF0017307FF00F10008030600F40252000001B800FF0099000F
1216	 2E5	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0x2C4FFE401A50FF0017307FF00F10008030600F40252000001B800FF0099000F
- stack 0: 0xE0
1217	 2E7	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x2C4FFE4
1218	 2E8	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x2C4FFE4
- stack 0: 0xFFFF
1219	 2EB	AND		 	 
- stack 1: 0x4E8
- stack 0: 0xFFE4
1220	 2EC	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0xFFE4
- stack 0: 0x1
1221	 2EE	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
1222	 2EF	ADD		 	 
- stack 0: 0x4CC
1223	 2F0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4CC
- stack 0: 0xFFFFFFFF
1224	 2F5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4CC
1225	 2F6	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
1226	 2F7	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x1920FF0009900FF00B8070F03480000026C0000028B000102AA000202C4FFE4
1227	 2F8	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x1920FF0009900FF00B8070F03480000026C0000028B000102AA000202C4FFE4
- stack 0: 0xF0
1228	 2FA	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x192
1229	 2FB	JUMP		 	 
- stack 0: 0x4CC
1230	 192	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x4CC
1231	 193	PUSH4	00ff0000	 	 
- stack 1: 0x4CC
- stack 0: 0xFF0000
1232	 198	PUSH2	0020	 	 
- stack 2: 0x4CC
- stack 1: 0xFF0000
- stack 0: 0x20
1233	 19B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4CC
1234	 19C	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
1235	 19E	ADD		 	 
- stack 0: 0x4D0
1236	 19F	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
1237	 1A0	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x9900FF00B8070F03480000026C0000028B000102AA000202C4FFE401A50FF0
1238	 1A1	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x9900FF00B8070F03480000026C0000028B000102AA000202C4FFE401A50FF0
- stack 0: 0xF0
1239	 1A3	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x99
1240	 1A4	JUMP		 	 
- stack 0: 0x4D0
1241	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4D0
1242	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
1243	 9B	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x9900FF00B8070F03480000026C0000028B000102AA000202C4FFE401A50FF0
1244	 9C	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x9900FF00B8070F03480000026C0000028B000102AA000202C4FFE401A50FF0
- stack 0: 0xE0
1245	 9E	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x9900FF
1246	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x9900FF
- stack 0: 0xFFFF
1247	 A2	AND		 	 
- stack 1: 0x4D0
- stack 0: 0xFF
1248	 A3	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0xFF
- stack 0: 0x1
1249	 A5	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0xFF
1250	 A6	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0xFF
- stack 0: 0x20
1251	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D0
- stack 1: 0xFF
- stack 0: 0xFF0000
1252	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4D0
- stack 0: 0xFF00FF
1253	 AB	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0xFF00FF
- stack 0: 0x20
1254	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D0
1255	 AF	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1256	 B1	ADD		 	 
- stack 0: 0x4D4
1257	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1258	 B3	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xB8070F03480000026C0000028B000102AA000202C4FFE401A50FF0017307FF
1259	 B4	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0xB8070F03480000026C0000028B000102AA000202C4FFE401A50FF0017307FF
- stack 0: 0xF0
1260	 B6	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xB8
1261	 B7	JUMP		 	 
- stack 0: 0x4D4
1262	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x4D4
1263	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
1264	 BA	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xB8070F03480000026C0000028B000102AA000202C4FFE401A50FF0017307FF
1265	 BB	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0xB8070F03480000026C0000028B000102AA000202C4FFE401A50FF0017307FF
- stack 0: 0xE0
1266	 BD	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xB8070F
1267	 BE	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0xB8070F
- stack 0: 0xFFFF
1268	 C1	AND		 	 
- stack 1: 0x4D4
- stack 0: 0x70F
1269	 C2	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0x70F
- stack 0: 0x1
1270	 C4	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0x70F
1271	 C5	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0x70F
- stack 0: 0x20
1272	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D4
- stack 1: 0x70F
- stack 0: 0xFF00FF
1273	 C9	OR		 	  ;; # ORI
- stack 1: 0x4D4
- stack 0: 0xFF07FF
1274	 CA	PUSH2	0060	 	 
- stack 2: 0x4D4
- stack 1: 0xFF07FF
- stack 0: 0x60
1275	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x4D4
1276	 CE	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1277	 D0	ADD		 	 
- stack 0: 0x4D8
1278	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1279	 D2	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x3480000026C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008
1280	 D3	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x3480000026C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008
- stack 0: 0xF0
1281	 D5	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x348
1282	 D6	JUMP		 	 
- stack 0: 0x4D8
1283	 348	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x4D8
1284	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
1285	 34A	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x3480000026C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008
1286	 34B	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0x3480000026C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008
- stack 0: 0xE0
1287	 34D	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x3480000
1288	 34E	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x3480000
- stack 0: 0xFFFF
1289	 351	AND		 	 
- stack 1: 0x4D8
- stack 0: 0x0
1290	 352	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0x0
- stack 0: 0x1
1291	 354	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0x0
1292	 355	POP		 	 
- stack 0: 0x4D8
1293	 356	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1294	 358	ADD		 	 
- stack 0: 0x4DC
1295	 359	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1296	 35A	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x26C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008030600F4
1297	 35B	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x26C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008030600F4
- stack 0: 0xF0
1298	 35D	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x26C
1299	 35E	JUMP		 	 
- stack 0: 0x4DC
1300	 26C	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x4DC
1301	 26D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
1302	 26E	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x26C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008030600F4
1303	 26F	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0x26C0000028B000102AA000202C4FFE401A50FF0017307FF00F10008030600F4
- stack 0: 0xE0
1304	 271	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x26C0000
1305	 272	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x26C0000
- stack 0: 0xFFFF
1306	 275	AND		 	 
- stack 1: 0x4DC
- stack 0: 0x0
1307	 276	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x1
1308	 278	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0x0
1309	 279	PUSH2	0060	 	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x60
1310	 27C	MLOAD		 	  ;; # read from x3
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0xFF07FF
1311	 27D	ADD		 	  ;; # ADDI 3
- stack 1: 0x4DC
- stack 0: 0xFF07FF
1312	 27E	PUSH2	00C0	 	 
- stack 2: 0x4DC
- stack 1: 0xFF07FF
- stack 0: 0xC0
1313	 281	MSTORE		 	  ;; # store to x6
- stack 0: 0x4DC
1314	 282	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1315	 284	ADD		 	 
- stack 0: 0x4E0
1316	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1317	 286	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x28B000102AA000202C4FFE401A50FF0017307FF00F10008030600F402520000
1318	 287	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x28B000102AA000202C4FFE401A50FF0017307FF00F10008030600F402520000
- stack 0: 0xF0
1319	 289	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x28B
1320	 28A	JUMP		 	 
- stack 0: 0x4E0
1321	 28B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4E0
1322	 28C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1323	 28D	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x28B000102AA000202C4FFE401A50FF0017307FF00F10008030600F402520000
1324	 28E	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0x28B000102AA000202C4FFE401A50FF0017307FF00F10008030600F402520000
- stack 0: 0xE0
1325	 290	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x28B0001
1326	 291	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x28B0001
- stack 0: 0xFFFF
1327	 294	AND		 	 
- stack 1: 0x4E0
- stack 0: 0x1
1328	 295	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0x1
- stack 0: 0x1
1329	 297	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0x1
1330	 298	PUSH2	0080	 	 
- stack 2: 0x4E0
- stack 1: 0x1
- stack 0: 0x80
1331	 29B	MLOAD		 	  ;; # read from x4
- stack 2: 0x4E0
- stack 1: 0x1
- stack 0: 0x1
1332	 29C	ADD		 	  ;; # ADDI 4
- stack 1: 0x4E0
- stack 0: 0x2
1333	 29D	PUSH2	0080	 	 
- stack 2: 0x4E0
- stack 1: 0x2
- stack 0: 0x80
1334	 2A0	MSTORE		 	  ;; # store to x4
- stack 0: 0x4E0
1335	 2A1	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1336	 2A3	ADD		 	 
- stack 0: 0x4E4
1337	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1338	 2A5	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x2AA000202C4FFE401A50FF0017307FF00F10008030600F40252000001B800FF
1339	 2A6	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x2AA000202C4FFE401A50FF0017307FF00F10008030600F40252000001B800FF
- stack 0: 0xF0
1340	 2A8	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x2AA
1341	 2A9	JUMP		 	 
- stack 0: 0x4E4
1342	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4E4
1343	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1344	 2AC	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x2AA000202C4FFE401A50FF0017307FF00F10008030600F40252000001B800FF
1345	 2AD	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0x2AA000202C4FFE401A50FF0017307FF00F10008030600F40252000001B800FF
- stack 0: 0xE0
1346	 2AF	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x2AA0002
1347	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x2AA0002
- stack 0: 0xFFFF
1348	 2B3	AND		 	 
- stack 1: 0x4E4
- stack 0: 0x2
1349	 2B4	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0x2
- stack 0: 0x1
1350	 2B6	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0x2
1351	 2B7	PUSH2	00A0	 	 
- stack 2: 0x4E4
- stack 1: 0x2
- stack 0: 0xA0
1352	 2BA	MSTORE		 	  ;; # store to x5
- stack 0: 0x4E4
1353	 2BB	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1354	 2BD	ADD		 	 
- stack 0: 0x4E8
1355	 2BE	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1356	 2BF	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x2C4FFE401A50FF0017307FF00F10008030600F40252000001B800FF0099000F
1357	 2C0	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x2C4FFE401A50FF0017307FF00F10008030600F40252000001B800FF0099000F
- stack 0: 0xF0
1358	 2C2	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x2C4
1359	 2C3	JUMP		 	 
- stack 0: 0x4E8
1360	 2C4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4E8
1361	 2C5	PUSH2	0080	 	 
- stack 1: 0x4E8
- stack 0: 0x80
1362	 2C8	MLOAD		 	  ;; # read from x4
- stack 1: 0x4E8
- stack 0: 0x2
1363	 2C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1364	 2CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E8
- stack 0: 0x2
1365	 2CF	PUSH2	00A0	 	 
- stack 2: 0x4E8
- stack 1: 0x2
- stack 0: 0xA0
1366	 2D2	MLOAD		 	  ;; # read from x5
- stack 2: 0x4E8
- stack 1: 0x2
- stack 0: 0x2
1367	 2D3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1368	 2D8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E8
- stack 1: 0x2
- stack 0: 0x2
1369	 2D9	SUB		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1370	 2DA	PUSH2	02E2	 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x2E2
1371	 2DD	JUMPI		 	 
- stack 0: 0x4E8
1372	 2DE	PUSH2	02FC	 ;; _neq_after_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 1: 0x4E8
- stack 0: 0x2FC
1373	 2E1	JUMP		 	 
- stack 0: 0x4E8
1374	 2FC	JUMPDEST		 ;; _neq_after_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 0: 0x4E8
1375	 2FD	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1376	 2FF	ADD		 	 
- stack 0: 0x4EC
1377	 300	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1378	 301	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x1A50FF0017307FF00F10008030600F40252000001B800FF0099000F00B800F0
1379	 302	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x1A50FF0017307FF00F10008030600F40252000001B800FF0099000F00B800F0
- stack 0: 0xF0
1380	 304	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x1A5
1381	 305	JUMP		 	 
- stack 0: 0x4EC
1382	 1A5	JUMPDEST		 ;; __riscvimpl_LUI_ff0eb7	  ;; # instr: lui t4,0xff0(ignore imm)
- stack 0: 0x4EC
1383	 1A6	PUSH4	00ff0000	 	 
- stack 1: 0x4EC
- stack 0: 0xFF0000
1384	 1AB	PUSH2	03A0	 	 
- stack 2: 0x4EC
- stack 1: 0xFF0000
- stack 0: 0x3A0
1385	 1AE	MSTORE		 	  ;; # store to x29
- stack 0: 0x4EC
1386	 1AF	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1387	 1B1	ADD		 	 
- stack 0: 0x4F0
1388	 1B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1389	 1B3	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x17307FF00F10008030600F40252000001B800FF0099000F00B800F003480000
1390	 1B4	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x17307FF00F10008030600F40252000001B800FF0099000F00B800F003480000
- stack 0: 0xF0
1391	 1B6	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x173
1392	 1B7	JUMP		 	 
- stack 0: 0x4F0
1393	 173	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x4F0
1394	 174	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F0
- stack 0: 0x4F0
1395	 175	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x17307FF00F10008030600F40252000001B800FF0099000F00B800F003480000
1396	 176	PUSH1	E0	 	 
- stack 2: 0x4F0
- stack 1: 0x17307FF00F10008030600F40252000001B800FF0099000F00B800F003480000
- stack 0: 0xE0
1397	 178	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x17307FF
1398	 179	PUSH2	FFFF	 	 
- stack 2: 0x4F0
- stack 1: 0x17307FF
- stack 0: 0xFFFF
1399	 17C	AND		 	 
- stack 1: 0x4F0
- stack 0: 0x7FF
1400	 17D	PUSH1	01	 	 
- stack 2: 0x4F0
- stack 1: 0x7FF
- stack 0: 0x1
1401	 17F	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0x7FF
1402	 180	PUSH2	03A0	 	 
- stack 2: 0x4F0
- stack 1: 0x7FF
- stack 0: 0x3A0
1403	 183	MLOAD		 	  ;; # read from x29
- stack 2: 0x4F0
- stack 1: 0x7FF
- stack 0: 0xFF0000
1404	 184	ADD		 	  ;; # ADDI 29
- stack 1: 0x4F0
- stack 0: 0xFF07FF
1405	 185	PUSH2	03A0	 	 
- stack 2: 0x4F0
- stack 1: 0xFF07FF
- stack 0: 0x3A0
1406	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F0
1407	 189	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1408	 18B	ADD		 	 
- stack 0: 0x4F4
1409	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1410	 18D	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xF10008030600F40252000001B800FF0099000F00B800F00348000003480000
1411	 18E	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0xF10008030600F40252000001B800FF0099000F00B800F00348000003480000
- stack 0: 0xF0
1412	 190	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xF1
1413	 191	JUMP		 	 
- stack 0: 0x4F4
1414	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4F4
1415	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1416	 F3	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xF10008030600F40252000001B800FF0099000F00B800F00348000003480000
1417	 F4	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0xF10008030600F40252000001B800FF0099000F00B800F00348000003480000
- stack 0: 0xE0
1418	 F6	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xF10008
1419	 F7	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0xF10008
- stack 0: 0xFFFF
1420	 FA	AND		 	 
- stack 1: 0x4F4
- stack 0: 0x8
1421	 FB	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0x8
- stack 0: 0x1
1422	 FD	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0x8
1423	 FE	PUSH2	0380	 	 
- stack 2: 0x4F4
- stack 1: 0x8
- stack 0: 0x380
1424	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x4F4
1425	 102	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1426	 104	ADD		 	 
- stack 0: 0x4F8
1427	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1428	 106	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x30600F40252000001B800FF0099000F00B800F00348000003480000026C0000
1429	 107	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x30600F40252000001B800FF0099000F00B800F00348000003480000026C0000
- stack 0: 0xF0
1430	 109	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x306
1431	 10A	JUMP		 	 
- stack 0: 0x4F8
1432	 306	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,128(ignore imm)
- stack 0: 0x4F8
1433	 307	PUSH2	00C0	 	 
- stack 1: 0x4F8
- stack 0: 0xC0
1434	 30A	MLOAD		 	  ;; # read from x6
- stack 1: 0x4F8
- stack 0: 0xFF07FF
1435	 30B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F8
- stack 1: 0xFF07FF
- stack 0: 0xFFFFFFFF
1436	 310	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F8
- stack 0: 0xFF07FF
1437	 311	PUSH2	03A0	 	 
- stack 2: 0x4F8
- stack 1: 0xFF07FF
- stack 0: 0x3A0
1438	 314	MLOAD		 	  ;; # read from x29
- stack 2: 0x4F8
- stack 1: 0xFF07FF
- stack 0: 0xFF07FF
1439	 315	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4F8
- stack 2: 0xFF07FF
- stack 1: 0xFF07FF
- stack 0: 0xFFFFFFFF
1440	 31A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4F8
- stack 1: 0xFF07FF
- stack 0: 0xFF07FF
1441	 31B	SUB		 	 
- stack 1: 0x4F8
- stack 0: 0x0
1442	 31C	PUSH2	0324	 ;; _neq_5e7937d0d8f2c70516e4f612eaaf8cc5aa8e5c01ba2a0af8ac79c472b6f1405f	 
- stack 2: 0x4F8
- stack 1: 0x0
- stack 0: 0x324
1443	 31F	JUMPI		 	 
- stack 0: 0x4F8
1444	 320	PUSH2	033E	 ;; _neq_after_5e7937d0d8f2c70516e4f612eaaf8cc5aa8e5c01ba2a0af8ac79c472b6f1405f	 
- stack 1: 0x4F8
- stack 0: 0x33E
1445	 323	JUMP		 	 
- stack 0: 0x4F8
1446	 33E	JUMPDEST		 ;; _neq_after_5e7937d0d8f2c70516e4f612eaaf8cc5aa8e5c01ba2a0af8ac79c472b6f1405f	 
- stack 0: 0x4F8
1447	 33F	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1448	 341	ADD		 	 
- stack 0: 0x4FC
1449	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1450	 343	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x252000001B800FF0099000F00B800F00348000003480000026C0000028B0001
1451	 344	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x252000001B800FF0099000F00B800F00348000003480000026C0000028B0001
- stack 0: 0xF0
1452	 346	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x252
1453	 347	JUMP		 	 
- stack 0: 0x4FC
1454	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x4FC
1455	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1456	 254	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x252000001B800FF0099000F00B800F00348000003480000026C0000028B0001
1457	 255	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x252000001B800FF0099000F00B800F00348000003480000026C0000028B0001
- stack 0: 0xE0
1458	 257	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x2520000
1459	 258	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x2520000
- stack 0: 0xFFFF
1460	 25B	AND		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1461	 25C	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x1
1462	 25E	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1463	 25F	PUSH2	0080	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x80
1464	 262	MSTORE		 	  ;; # store to x4
- stack 0: 0x4FC
1465	 263	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1466	 265	ADD		 	 
- stack 0: 0x500
1467	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1468	 267	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x1B800FF0099000F00B800F00348000003480000026C0000028B000102AA0002
1469	 268	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x1B800FF0099000F00B800F00348000003480000026C0000028B000102AA0002
- stack 0: 0xF0
1470	 26A	SHR		 	 
- stack 1: 0x500
- stack 0: 0x1B8
1471	 26B	JUMP		 	 
- stack 0: 0x500
1472	 1B8	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x500
1473	 1B9	PUSH4	f00ff000	 	 
- stack 1: 0x500
- stack 0: 0xF00FF000
1474	 1BE	PUSH2	0020	 	 
- stack 2: 0x500
- stack 1: 0xF00FF000
- stack 0: 0x20
1475	 1C1	MSTORE		 	  ;; # store to x1
- stack 0: 0x500
1476	 1C2	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1477	 1C4	ADD		 	 
- stack 0: 0x504
1478	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1479	 1C6	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x99000F00B800F00348000003480000026C0000028B000102AA000202C4FFE0
1480	 1C7	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x99000F00B800F00348000003480000026C0000028B000102AA000202C4FFE0
- stack 0: 0xF0
1481	 1C9	SHR		 	 
- stack 1: 0x504
- stack 0: 0x99
1482	 1CA	JUMP		 	 
- stack 0: 0x504
1483	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x504
1484	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1485	 9B	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x99000F00B800F00348000003480000026C0000028B000102AA000202C4FFE0
1486	 9C	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x99000F00B800F00348000003480000026C0000028B000102AA000202C4FFE0
- stack 0: 0xE0
1487	 9E	SHR		 	 
- stack 1: 0x504
- stack 0: 0x99000F
1488	 9F	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x99000F
- stack 0: 0xFFFF
1489	 A2	AND		 	 
- stack 1: 0x504
- stack 0: 0xF
1490	 A3	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0xF
- stack 0: 0x1
1491	 A5	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0xF
1492	 A6	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0xF
- stack 0: 0x20
1493	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x504
- stack 1: 0xF
- stack 0: 0xF00FF000
1494	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x504
- stack 0: 0xF00FF00F
1495	 AB	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0xF00FF00F
- stack 0: 0x20
1496	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x504
1497	 AF	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1498	 B1	ADD		 	 
- stack 0: 0x508
1499	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1500	 B3	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xB800F00348000003480000026C0000028B000102AA000202C4FFE001CB00FF
1501	 B4	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xB800F00348000003480000026C0000028B000102AA000202C4FFE001CB00FF
- stack 0: 0xF0
1502	 B6	SHR		 	 
- stack 1: 0x508
- stack 0: 0xB8
1503	 B7	JUMP		 	 
- stack 0: 0x508
1504	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x508
1505	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1506	 BA	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xB800F00348000003480000026C0000028B000102AA000202C4FFE001CB00FF
1507	 BB	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0xB800F00348000003480000026C0000028B000102AA000202C4FFE001CB00FF
- stack 0: 0xE0
1508	 BD	SHR		 	 
- stack 1: 0x508
- stack 0: 0xB800F0
1509	 BE	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0xB800F0
- stack 0: 0xFFFF
1510	 C1	AND		 	 
- stack 1: 0x508
- stack 0: 0xF0
1511	 C2	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xF0
- stack 0: 0x1
1512	 C4	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xF0
1513	 C5	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xF0
- stack 0: 0x20
1514	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x508
- stack 1: 0xF0
- stack 0: 0xF00FF00F
1515	 C9	OR		 	  ;; # ORI
- stack 1: 0x508
- stack 0: 0xF00FF0FF
1516	 CA	PUSH2	0060	 	 
- stack 2: 0x508
- stack 1: 0xF00FF0FF
- stack 0: 0x60
1517	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x508
1518	 CE	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1519	 D0	ADD		 	 
- stack 0: 0x50C
1520	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1521	 D2	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x348000003480000026C0000028B000102AA000202C4FFE001CB00FF017300FF
1522	 D3	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x348000003480000026C0000028B000102AA000202C4FFE001CB00FF017300FF
- stack 0: 0xF0
1523	 D5	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x348
1524	 D6	JUMP		 	 
- stack 0: 0x50C
1525	 348	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x50C
1526	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1527	 34A	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x348000003480000026C0000028B000102AA000202C4FFE001CB00FF017300FF
1528	 34B	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0x348000003480000026C0000028B000102AA000202C4FFE001CB00FF017300FF
- stack 0: 0xE0
1529	 34D	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x3480000
1530	 34E	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0x3480000
- stack 0: 0xFFFF
1531	 351	AND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1532	 352	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x1
1533	 354	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1534	 355	POP		 	 
- stack 0: 0x50C
1535	 356	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1536	 358	ADD		 	 
- stack 0: 0x510
1537	 359	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1538	 35A	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x3480000026C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009
1539	 35B	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x3480000026C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009
- stack 0: 0xF0
1540	 35D	SHR		 	 
- stack 1: 0x510
- stack 0: 0x348
1541	 35E	JUMP		 	 
- stack 0: 0x510
1542	 348	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x510
1543	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1544	 34A	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x3480000026C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009
1545	 34B	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0x3480000026C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009
- stack 0: 0xE0
1546	 34D	SHR		 	 
- stack 1: 0x510
- stack 0: 0x3480000
1547	 34E	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0x3480000
- stack 0: 0xFFFF
1548	 351	AND		 	 
- stack 1: 0x510
- stack 0: 0x0
1549	 352	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x0
- stack 0: 0x1
1550	 354	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0x0
1551	 355	POP		 	 
- stack 0: 0x510
1552	 356	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1553	 358	ADD		 	 
- stack 0: 0x514
1554	 359	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1555	 35A	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x26C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC
1556	 35B	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x26C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC
- stack 0: 0xF0
1557	 35D	SHR		 	 
- stack 1: 0x514
- stack 0: 0x26C
1558	 35E	JUMP		 	 
- stack 0: 0x514
1559	 26C	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x514
1560	 26D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1561	 26E	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x26C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC
1562	 26F	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x26C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC
- stack 0: 0xE0
1563	 271	SHR		 	 
- stack 1: 0x514
- stack 0: 0x26C0000
1564	 272	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x26C0000
- stack 0: 0xFFFF
1565	 275	AND		 	 
- stack 1: 0x514
- stack 0: 0x0
1566	 276	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0x1
1567	 278	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x0
1568	 279	PUSH2	0060	 	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0x60
1569	 27C	MLOAD		 	  ;; # read from x3
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0xF00FF0FF
1570	 27D	ADD		 	  ;; # ADDI 3
- stack 1: 0x514
- stack 0: 0xF00FF0FF
1571	 27E	PUSH2	00C0	 	 
- stack 2: 0x514
- stack 1: 0xF00FF0FF
- stack 0: 0xC0
1572	 281	MSTORE		 	  ;; # store to x6
- stack 0: 0x514
1573	 282	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1574	 284	ADD		 	 
- stack 0: 0x518
1575	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1576	 286	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x28B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000
1577	 287	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x28B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000
- stack 0: 0xF0
1578	 289	SHR		 	 
- stack 1: 0x518
- stack 0: 0x28B
1579	 28A	JUMP		 	 
- stack 0: 0x518
1580	 28B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x518
1581	 28C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1582	 28D	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x28B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000
1583	 28E	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x28B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000
- stack 0: 0xE0
1584	 290	SHR		 	 
- stack 1: 0x518
- stack 0: 0x28B0001
1585	 291	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x28B0001
- stack 0: 0xFFFF
1586	 294	AND		 	 
- stack 1: 0x518
- stack 0: 0x1
1587	 295	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x1
1588	 297	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x1
1589	 298	PUSH2	0080	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x80
1590	 29B	MLOAD		 	  ;; # read from x4
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x0
1591	 29C	ADD		 	  ;; # ADDI 4
- stack 1: 0x518
- stack 0: 0x1
1592	 29D	PUSH2	0080	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x80
1593	 2A0	MSTORE		 	  ;; # store to x4
- stack 0: 0x518
1594	 2A1	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1595	 2A3	ADD		 	 
- stack 0: 0x51C
1596	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1597	 2A5	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x2AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000014DFF01
1598	 2A6	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x2AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000014DFF01
- stack 0: 0xF0
1599	 2A8	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x2AA
1600	 2A9	JUMP		 	 
- stack 0: 0x51C
1601	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x51C
1602	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1603	 2AC	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x2AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000014DFF01
1604	 2AD	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x2AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000014DFF01
- stack 0: 0xE0
1605	 2AF	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x2AA0002
1606	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x2AA0002
- stack 0: 0xFFFF
1607	 2B3	AND		 	 
- stack 1: 0x51C
- stack 0: 0x2
1608	 2B4	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0x1
1609	 2B6	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x2
1610	 2B7	PUSH2	00A0	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0xA0
1611	 2BA	MSTORE		 	  ;; # store to x5
- stack 0: 0x51C
1612	 2BB	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1613	 2BD	ADD		 	 
- stack 0: 0x520
1614	 2BE	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1615	 2BF	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x2C4FFE001CB00FF017300FF00F10009030600BC02520000014DFF010099FFF0
1616	 2C0	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x2C4FFE001CB00FF017300FF00F10009030600BC02520000014DFF010099FFF0
- stack 0: 0xF0
1617	 2C2	SHR		 	 
- stack 1: 0x520
- stack 0: 0x2C4
1618	 2C3	JUMP		 	 
- stack 0: 0x520
1619	 2C4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x520
1620	 2C5	PUSH2	0080	 	 
- stack 1: 0x520
- stack 0: 0x80
1621	 2C8	MLOAD		 	  ;; # read from x4
- stack 1: 0x520
- stack 0: 0x1
1622	 2C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1623	 2CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x520
- stack 0: 0x1
1624	 2CF	PUSH2	00A0	 	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0xA0
1625	 2D2	MLOAD		 	  ;; # read from x5
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x2
1626	 2D3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x520
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1627	 2D8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x2
1628	 2D9	SUB		 	 
- stack 1: 0x520
- stack 0: 0x1
1629	 2DA	PUSH2	02E2	 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x2E2
1630	 2DD	JUMPI		 	 
- stack 0: 0x520
1631	 2E2	JUMPDEST		 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 0: 0x520
1632	 2E3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1633	 2E4	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x2C4FFE001CB00FF017300FF00F10009030600BC02520000014DFF010099FFF0
1634	 2E5	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x2C4FFE001CB00FF017300FF00F10009030600BC02520000014DFF010099FFF0
- stack 0: 0xE0
1635	 2E7	SHR		 	 
- stack 1: 0x520
- stack 0: 0x2C4FFE0
1636	 2E8	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x2C4FFE0
- stack 0: 0xFFFF
1637	 2EB	AND		 	 
- stack 1: 0x520
- stack 0: 0xFFE0
1638	 2EC	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0xFFE0
- stack 0: 0x1
1639	 2EE	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1640	 2EF	ADD		 	 
- stack 0: 0x500
1641	 2F0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x500
- stack 0: 0xFFFFFFFF
1642	 2F5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x500
1643	 2F6	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1644	 2F7	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x1B800FF0099000F00B800F00348000003480000026C0000028B000102AA0002
1645	 2F8	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x1B800FF0099000F00B800F00348000003480000026C0000028B000102AA0002
- stack 0: 0xF0
1646	 2FA	SHR		 	 
- stack 1: 0x500
- stack 0: 0x1B8
1647	 2FB	JUMP		 	 
- stack 0: 0x500
1648	 1B8	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x500
1649	 1B9	PUSH4	f00ff000	 	 
- stack 1: 0x500
- stack 0: 0xF00FF000
1650	 1BE	PUSH2	0020	 	 
- stack 2: 0x500
- stack 1: 0xF00FF000
- stack 0: 0x20
1651	 1C1	MSTORE		 	  ;; # store to x1
- stack 0: 0x500
1652	 1C2	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1653	 1C4	ADD		 	 
- stack 0: 0x504
1654	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1655	 1C6	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x99000F00B800F00348000003480000026C0000028B000102AA000202C4FFE0
1656	 1C7	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x99000F00B800F00348000003480000026C0000028B000102AA000202C4FFE0
- stack 0: 0xF0
1657	 1C9	SHR		 	 
- stack 1: 0x504
- stack 0: 0x99
1658	 1CA	JUMP		 	 
- stack 0: 0x504
1659	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x504
1660	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1661	 9B	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x99000F00B800F00348000003480000026C0000028B000102AA000202C4FFE0
1662	 9C	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x99000F00B800F00348000003480000026C0000028B000102AA000202C4FFE0
- stack 0: 0xE0
1663	 9E	SHR		 	 
- stack 1: 0x504
- stack 0: 0x99000F
1664	 9F	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x99000F
- stack 0: 0xFFFF
1665	 A2	AND		 	 
- stack 1: 0x504
- stack 0: 0xF
1666	 A3	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0xF
- stack 0: 0x1
1667	 A5	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0xF
1668	 A6	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0xF
- stack 0: 0x20
1669	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x504
- stack 1: 0xF
- stack 0: 0xF00FF000
1670	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x504
- stack 0: 0xF00FF00F
1671	 AB	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0xF00FF00F
- stack 0: 0x20
1672	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x504
1673	 AF	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1674	 B1	ADD		 	 
- stack 0: 0x508
1675	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1676	 B3	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xB800F00348000003480000026C0000028B000102AA000202C4FFE001CB00FF
1677	 B4	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xB800F00348000003480000026C0000028B000102AA000202C4FFE001CB00FF
- stack 0: 0xF0
1678	 B6	SHR		 	 
- stack 1: 0x508
- stack 0: 0xB8
1679	 B7	JUMP		 	 
- stack 0: 0x508
1680	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x508
1681	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1682	 BA	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xB800F00348000003480000026C0000028B000102AA000202C4FFE001CB00FF
1683	 BB	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0xB800F00348000003480000026C0000028B000102AA000202C4FFE001CB00FF
- stack 0: 0xE0
1684	 BD	SHR		 	 
- stack 1: 0x508
- stack 0: 0xB800F0
1685	 BE	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0xB800F0
- stack 0: 0xFFFF
1686	 C1	AND		 	 
- stack 1: 0x508
- stack 0: 0xF0
1687	 C2	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xF0
- stack 0: 0x1
1688	 C4	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xF0
1689	 C5	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xF0
- stack 0: 0x20
1690	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x508
- stack 1: 0xF0
- stack 0: 0xF00FF00F
1691	 C9	OR		 	  ;; # ORI
- stack 1: 0x508
- stack 0: 0xF00FF0FF
1692	 CA	PUSH2	0060	 	 
- stack 2: 0x508
- stack 1: 0xF00FF0FF
- stack 0: 0x60
1693	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x508
1694	 CE	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1695	 D0	ADD		 	 
- stack 0: 0x50C
1696	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1697	 D2	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x348000003480000026C0000028B000102AA000202C4FFE001CB00FF017300FF
1698	 D3	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x348000003480000026C0000028B000102AA000202C4FFE001CB00FF017300FF
- stack 0: 0xF0
1699	 D5	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x348
1700	 D6	JUMP		 	 
- stack 0: 0x50C
1701	 348	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x50C
1702	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1703	 34A	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x348000003480000026C0000028B000102AA000202C4FFE001CB00FF017300FF
1704	 34B	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0x348000003480000026C0000028B000102AA000202C4FFE001CB00FF017300FF
- stack 0: 0xE0
1705	 34D	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x3480000
1706	 34E	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0x3480000
- stack 0: 0xFFFF
1707	 351	AND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1708	 352	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x1
1709	 354	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1710	 355	POP		 	 
- stack 0: 0x50C
1711	 356	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1712	 358	ADD		 	 
- stack 0: 0x510
1713	 359	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1714	 35A	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x3480000026C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009
1715	 35B	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x3480000026C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009
- stack 0: 0xF0
1716	 35D	SHR		 	 
- stack 1: 0x510
- stack 0: 0x348
1717	 35E	JUMP		 	 
- stack 0: 0x510
1718	 348	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x510
1719	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1720	 34A	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x3480000026C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009
1721	 34B	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0x3480000026C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009
- stack 0: 0xE0
1722	 34D	SHR		 	 
- stack 1: 0x510
- stack 0: 0x3480000
1723	 34E	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0x3480000
- stack 0: 0xFFFF
1724	 351	AND		 	 
- stack 1: 0x510
- stack 0: 0x0
1725	 352	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x0
- stack 0: 0x1
1726	 354	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0x0
1727	 355	POP		 	 
- stack 0: 0x510
1728	 356	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1729	 358	ADD		 	 
- stack 0: 0x514
1730	 359	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1731	 35A	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x26C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC
1732	 35B	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x26C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC
- stack 0: 0xF0
1733	 35D	SHR		 	 
- stack 1: 0x514
- stack 0: 0x26C
1734	 35E	JUMP		 	 
- stack 0: 0x514
1735	 26C	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x514
1736	 26D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1737	 26E	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x26C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC
1738	 26F	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x26C0000028B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC
- stack 0: 0xE0
1739	 271	SHR		 	 
- stack 1: 0x514
- stack 0: 0x26C0000
1740	 272	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x26C0000
- stack 0: 0xFFFF
1741	 275	AND		 	 
- stack 1: 0x514
- stack 0: 0x0
1742	 276	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0x1
1743	 278	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x0
1744	 279	PUSH2	0060	 	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0x60
1745	 27C	MLOAD		 	  ;; # read from x3
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0xF00FF0FF
1746	 27D	ADD		 	  ;; # ADDI 3
- stack 1: 0x514
- stack 0: 0xF00FF0FF
1747	 27E	PUSH2	00C0	 	 
- stack 2: 0x514
- stack 1: 0xF00FF0FF
- stack 0: 0xC0
1748	 281	MSTORE		 	  ;; # store to x6
- stack 0: 0x514
1749	 282	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1750	 284	ADD		 	 
- stack 0: 0x518
1751	 285	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1752	 286	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x28B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000
1753	 287	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x28B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000
- stack 0: 0xF0
1754	 289	SHR		 	 
- stack 1: 0x518
- stack 0: 0x28B
1755	 28A	JUMP		 	 
- stack 0: 0x518
1756	 28B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x518
1757	 28C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1758	 28D	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x28B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000
1759	 28E	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x28B000102AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000
- stack 0: 0xE0
1760	 290	SHR		 	 
- stack 1: 0x518
- stack 0: 0x28B0001
1761	 291	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x28B0001
- stack 0: 0xFFFF
1762	 294	AND		 	 
- stack 1: 0x518
- stack 0: 0x1
1763	 295	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x1
1764	 297	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x1
1765	 298	PUSH2	0080	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x80
1766	 29B	MLOAD		 	  ;; # read from x4
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x1
1767	 29C	ADD		 	  ;; # ADDI 4
- stack 1: 0x518
- stack 0: 0x2
1768	 29D	PUSH2	0080	 	 
- stack 2: 0x518
- stack 1: 0x2
- stack 0: 0x80
1769	 2A0	MSTORE		 	  ;; # store to x4
- stack 0: 0x518
1770	 2A1	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1771	 2A3	ADD		 	 
- stack 0: 0x51C
1772	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1773	 2A5	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x2AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000014DFF01
1774	 2A6	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x2AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000014DFF01
- stack 0: 0xF0
1775	 2A8	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x2AA
1776	 2A9	JUMP		 	 
- stack 0: 0x51C
1777	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x51C
1778	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1779	 2AC	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x2AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000014DFF01
1780	 2AD	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x2AA000202C4FFE001CB00FF017300FF00F10009030600BC02520000014DFF01
- stack 0: 0xE0
1781	 2AF	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x2AA0002
1782	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x2AA0002
- stack 0: 0xFFFF
1783	 2B3	AND		 	 
- stack 1: 0x51C
- stack 0: 0x2
1784	 2B4	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0x1
1785	 2B6	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x2
1786	 2B7	PUSH2	00A0	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0xA0
1787	 2BA	MSTORE		 	  ;; # store to x5
- stack 0: 0x51C
1788	 2BB	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1789	 2BD	ADD		 	 
- stack 0: 0x520
1790	 2BE	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1791	 2BF	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x2C4FFE001CB00FF017300FF00F10009030600BC02520000014DFF010099FFF0
1792	 2C0	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x2C4FFE001CB00FF017300FF00F10009030600BC02520000014DFF010099FFF0
- stack 0: 0xF0
1793	 2C2	SHR		 	 
- stack 1: 0x520
- stack 0: 0x2C4
1794	 2C3	JUMP		 	 
- stack 0: 0x520
1795	 2C4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x520
1796	 2C5	PUSH2	0080	 	 
- stack 1: 0x520
- stack 0: 0x80
1797	 2C8	MLOAD		 	  ;; # read from x4
- stack 1: 0x520
- stack 0: 0x2
1798	 2C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1799	 2CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x520
- stack 0: 0x2
1800	 2CF	PUSH2	00A0	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0xA0
1801	 2D2	MLOAD		 	  ;; # read from x5
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0x2
1802	 2D3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x520
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1803	 2D8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0x2
1804	 2D9	SUB		 	 
- stack 1: 0x520
- stack 0: 0x0
1805	 2DA	PUSH2	02E2	 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 2: 0x520
- stack 1: 0x0
- stack 0: 0x2E2
1806	 2DD	JUMPI		 	 
- stack 0: 0x520
1807	 2DE	PUSH2	02FC	 ;; _neq_after_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 1: 0x520
- stack 0: 0x2FC
1808	 2E1	JUMP		 	 
- stack 0: 0x520
1809	 2FC	JUMPDEST		 ;; _neq_after_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 0: 0x520
1810	 2FD	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1811	 2FF	ADD		 	 
- stack 0: 0x524
1812	 300	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1813	 301	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x1CB00FF017300FF00F10009030600BC02520000014DFF010099FFF000B800F0
1814	 302	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x1CB00FF017300FF00F10009030600BC02520000014DFF010099FFF000B800F0
- stack 0: 0xF0
1815	 304	SHR		 	 
- stack 1: 0x524
- stack 0: 0x1CB
1816	 305	JUMP		 	 
- stack 0: 0x524
1817	 1CB	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x524
1818	 1CC	PUSH4	f00ff000	 	 
- stack 1: 0x524
- stack 0: 0xF00FF000
1819	 1D1	PUSH2	03A0	 	 
- stack 2: 0x524
- stack 1: 0xF00FF000
- stack 0: 0x3A0
1820	 1D4	MSTORE		 	  ;; # store to x29
- stack 0: 0x524
1821	 1D5	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1822	 1D7	ADD		 	 
- stack 0: 0x528
1823	 1D8	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1824	 1D9	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x17300FF00F10009030600BC02520000014DFF010099FFF000B800F0028B0001
1825	 1DA	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x17300FF00F10009030600BC02520000014DFF010099FFF000B800F0028B0001
- stack 0: 0xF0
1826	 1DC	SHR		 	 
- stack 1: 0x528
- stack 0: 0x173
1827	 1DD	JUMP		 	 
- stack 0: 0x528
1828	 173	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x528
1829	 174	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1830	 175	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x17300FF00F10009030600BC02520000014DFF010099FFF000B800F0028B0001
1831	 176	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x17300FF00F10009030600BC02520000014DFF010099FFF000B800F0028B0001
- stack 0: 0xE0
1832	 178	SHR		 	 
- stack 1: 0x528
- stack 0: 0x17300FF
1833	 179	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x17300FF
- stack 0: 0xFFFF
1834	 17C	AND		 	 
- stack 1: 0x528
- stack 0: 0xFF
1835	 17D	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0xFF
- stack 0: 0x1
1836	 17F	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0xFF
1837	 180	PUSH2	03A0	 	 
- stack 2: 0x528
- stack 1: 0xFF
- stack 0: 0x3A0
1838	 183	MLOAD		 	  ;; # read from x29
- stack 2: 0x528
- stack 1: 0xFF
- stack 0: 0xF00FF000
1839	 184	ADD		 	  ;; # ADDI 29
- stack 1: 0x528
- stack 0: 0xF00FF0FF
1840	 185	PUSH2	03A0	 	 
- stack 2: 0x528
- stack 1: 0xF00FF0FF
- stack 0: 0x3A0
1841	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x528
1842	 189	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1843	 18B	ADD		 	 
- stack 0: 0x52C
1844	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1845	 18D	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xF10009030600BC02520000014DFF010099FFF000B800F0028B000102AA0002
1846	 18E	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0xF10009030600BC02520000014DFF010099FFF000B800F0028B000102AA0002
- stack 0: 0xF0
1847	 190	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xF1
1848	 191	JUMP		 	 
- stack 0: 0x52C
1849	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x52C
1850	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1851	 F3	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xF10009030600BC02520000014DFF010099FFF000B800F0028B000102AA0002
1852	 F4	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0xF10009030600BC02520000014DFF010099FFF000B800F0028B000102AA0002
- stack 0: 0xE0
1853	 F6	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xF10009
1854	 F7	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0xF10009
- stack 0: 0xFFFF
1855	 FA	AND		 	 
- stack 1: 0x52C
- stack 0: 0x9
1856	 FB	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x9
- stack 0: 0x1
1857	 FD	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x9
1858	 FE	PUSH2	0380	 	 
- stack 2: 0x52C
- stack 1: 0x9
- stack 0: 0x380
1859	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x52C
1860	 102	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1861	 104	ADD		 	 
- stack 0: 0x530
1862	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1863	 106	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x30600BC02520000014DFF010099FFF000B800F0028B000102AA000202C4FFEC
1864	 107	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x30600BC02520000014DFF010099FFF000B800F0028B000102AA000202C4FFEC
- stack 0: 0xF0
1865	 109	SHR		 	 
- stack 1: 0x530
- stack 0: 0x306
1866	 10A	JUMP		 	 
- stack 0: 0x530
1867	 306	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,128(ignore imm)
- stack 0: 0x530
1868	 307	PUSH2	00C0	 	 
- stack 1: 0x530
- stack 0: 0xC0
1869	 30A	MLOAD		 	  ;; # read from x6
- stack 1: 0x530
- stack 0: 0xF00FF0FF
1870	 30B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x530
- stack 1: 0xF00FF0FF
- stack 0: 0xFFFFFFFF
1871	 310	AND		 	  ;; # mask to 32 bits
- stack 1: 0x530
- stack 0: 0xF00FF0FF
1872	 311	PUSH2	03A0	 	 
- stack 2: 0x530
- stack 1: 0xF00FF0FF
- stack 0: 0x3A0
1873	 314	MLOAD		 	  ;; # read from x29
- stack 2: 0x530
- stack 1: 0xF00FF0FF
- stack 0: 0xF00FF0FF
1874	 315	PUSH4	FFFFFFFF	 	 
- stack 3: 0x530
- stack 2: 0xF00FF0FF
- stack 1: 0xF00FF0FF
- stack 0: 0xFFFFFFFF
1875	 31A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x530
- stack 1: 0xF00FF0FF
- stack 0: 0xF00FF0FF
1876	 31B	SUB		 	 
- stack 1: 0x530
- stack 0: 0x0
1877	 31C	PUSH2	0324	 ;; _neq_5e7937d0d8f2c70516e4f612eaaf8cc5aa8e5c01ba2a0af8ac79c472b6f1405f	 
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0x324
1878	 31F	JUMPI		 	 
- stack 0: 0x530
1879	 320	PUSH2	033E	 ;; _neq_after_5e7937d0d8f2c70516e4f612eaaf8cc5aa8e5c01ba2a0af8ac79c472b6f1405f	 
- stack 1: 0x530
- stack 0: 0x33E
1880	 323	JUMP		 	 
- stack 0: 0x530
1881	 33E	JUMPDEST		 ;; _neq_after_5e7937d0d8f2c70516e4f612eaaf8cc5aa8e5c01ba2a0af8ac79c472b6f1405f	 
- stack 0: 0x530
1882	 33F	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1883	 341	ADD		 	 
- stack 0: 0x534
1884	 342	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1885	 343	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x2520000014DFF010099FFF000B800F0028B000102AA000202C4FFEC0160FF01
1886	 344	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x2520000014DFF010099FFF000B800F0028B000102AA000202C4FFEC0160FF01
- stack 0: 0xF0
1887	 346	SHR		 	 
- stack 1: 0x534
- stack 0: 0x252
1888	 347	JUMP		 	 
- stack 0: 0x534
1889	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x534
1890	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1891	 254	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x2520000014DFF010099FFF000B800F0028B000102AA000202C4FFEC0160FF01
1892	 255	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x2520000014DFF010099FFF000B800F0028B000102AA000202C4FFEC0160FF01
- stack 0: 0xE0
1893	 257	SHR		 	 
- stack 1: 0x534
- stack 0: 0x2520000
1894	 258	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x2520000
- stack 0: 0xFFFF
1895	 25B	AND		 	 
- stack 1: 0x534
- stack 0: 0x0
1896	 25C	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x1
1897	 25E	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0x0
1898	 25F	PUSH2	0080	 	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x80
1899	 262	MSTORE		 	  ;; # store to x4
- stack 0: 0x534
1900	 263	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1901	 265	ADD		 	 
- stack 0: 0x538
1902	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1903	 267	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x14DFF010099FFF000B800F0028B000102AA000202C4FFEC0160FF010173FFF0
1904	 268	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x14DFF010099FFF000B800F0028B000102AA000202C4FFEC0160FF010173FFF0
- stack 0: 0xF0
1905	 26A	SHR		 	 
- stack 1: 0x538
- stack 0: 0x14D
1906	 26B	JUMP		 	 
- stack 0: 0x538
1907	 14D	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x538
1908	 14E	PUSH4	0ff01000	 	 
- stack 1: 0x538
- stack 0: 0xFF01000
1909	 153	PUSH2	0020	 	 
- stack 2: 0x538
- stack 1: 0xFF01000
- stack 0: 0x20
1910	 156	MSTORE		 	  ;; # store to x1
- stack 0: 0x538
1911	 157	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1912	 159	ADD		 	 
- stack 0: 0x53C
1913	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1914	 15B	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x99FFF000B800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A
1915	 15C	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x99FFF000B800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A
- stack 0: 0xF0
1916	 15E	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x99
1917	 15F	JUMP		 	 
- stack 0: 0x53C
1918	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x53C
1919	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1920	 9B	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x99FFF000B800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A
1921	 9C	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0x99FFF000B800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A
- stack 0: 0xE0
1922	 9E	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x99FFF0
1923	 9F	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
1924	 A2	AND		 	 
- stack 1: 0x53C
- stack 0: 0xFFF0
1925	 A3	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0xFFF0
- stack 0: 0x1
1926	 A5	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1927	 A6	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
1928	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x53C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
1929	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x53C
- stack 0: 0xFF00FF0
1930	 AB	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0xFF00FF0
- stack 0: 0x20
1931	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
1932	 AF	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1933	 B1	ADD		 	 
- stack 0: 0x540
1934	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1935	 B3	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xB800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A010B0090
1936	 B4	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0xB800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A010B0090
- stack 0: 0xF0
1937	 B6	SHR		 	 
- stack 1: 0x540
- stack 0: 0xB8
1938	 B7	JUMP		 	 
- stack 0: 0x540
1939	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x540
1940	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1941	 BA	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xB800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A010B0090
1942	 BB	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0xB800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A010B0090
- stack 0: 0xE0
1943	 BD	SHR		 	 
- stack 1: 0x540
- stack 0: 0xB800F0
1944	 BE	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0xB800F0
- stack 0: 0xFFFF
1945	 C1	AND		 	 
- stack 1: 0x540
- stack 0: 0xF0
1946	 C2	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xF0
- stack 0: 0x1
1947	 C4	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xF0
1948	 C5	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xF0
- stack 0: 0x20
1949	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x540
- stack 1: 0xF0
- stack 0: 0xFF00FF0
1950	 C9	OR		 	  ;; # ORI
- stack 1: 0x540
- stack 0: 0xFF00FF0
1951	 CA	PUSH2	0060	 	 
- stack 2: 0x540
- stack 1: 0xFF00FF0
- stack 0: 0x60
1952	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x540
1953	 CE	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1954	 D0	ADD		 	 
- stack 0: 0x544
1955	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1956	 D2	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x28B000102AA000202C4FFEC0160FF010173FFF000F1000A010B009002520000
1957	 D3	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x28B000102AA000202C4FFEC0160FF010173FFF000F1000A010B009002520000
- stack 0: 0xF0
1958	 D5	SHR		 	 
- stack 1: 0x544
- stack 0: 0x28B
1959	 D6	JUMP		 	 
- stack 0: 0x544
1960	 28B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x544
1961	 28C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1962	 28D	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x28B000102AA000202C4FFEC0160FF010173FFF000F1000A010B009002520000
1963	 28E	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x28B000102AA000202C4FFEC0160FF010173FFF000F1000A010B009002520000
- stack 0: 0xE0
1964	 290	SHR		 	 
- stack 1: 0x544
- stack 0: 0x28B0001
1965	 291	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x28B0001
- stack 0: 0xFFFF
1966	 294	AND		 	 
- stack 1: 0x544
- stack 0: 0x1
1967	 295	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x1
1968	 297	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x1
1969	 298	PUSH2	0080	 	 
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x80
1970	 29B	MLOAD		 	  ;; # read from x4
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x0
1971	 29C	ADD		 	  ;; # ADDI 4
- stack 1: 0x544
- stack 0: 0x1
1972	 29D	PUSH2	0080	 	 
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x80
1973	 2A0	MSTORE		 	  ;; # store to x4
- stack 0: 0x544
1974	 2A1	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1975	 2A3	ADD		 	 
- stack 0: 0x548
1976	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1977	 2A5	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x2AA000202C4FFEC0160FF010173FFF000F1000A010B00900252000001920FF0
1978	 2A6	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x2AA000202C4FFEC0160FF010173FFF000F1000A010B00900252000001920FF0
- stack 0: 0xF0
1979	 2A8	SHR		 	 
- stack 1: 0x548
- stack 0: 0x2AA
1980	 2A9	JUMP		 	 
- stack 0: 0x548
1981	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x548
1982	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1983	 2AC	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x2AA000202C4FFEC0160FF010173FFF000F1000A010B00900252000001920FF0
1984	 2AD	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x2AA000202C4FFEC0160FF010173FFF000F1000A010B00900252000001920FF0
- stack 0: 0xE0
1985	 2AF	SHR		 	 
- stack 1: 0x548
- stack 0: 0x2AA0002
1986	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x2AA0002
- stack 0: 0xFFFF
1987	 2B3	AND		 	 
- stack 1: 0x548
- stack 0: 0x2
1988	 2B4	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0x1
1989	 2B6	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x2
1990	 2B7	PUSH2	00A0	 	 
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0xA0
1991	 2BA	MSTORE		 	  ;; # store to x5
- stack 0: 0x548
1992	 2BB	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1993	 2BD	ADD		 	 
- stack 0: 0x54C
1994	 2BE	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1995	 2BF	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x2C4FFEC0160FF010173FFF000F1000A010B00900252000001920FF0009900FF
1996	 2C0	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x2C4FFEC0160FF010173FFF000F1000A010B00900252000001920FF0009900FF
- stack 0: 0xF0
1997	 2C2	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x2C4
1998	 2C3	JUMP		 	 
- stack 0: 0x54C
1999	 2C4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x54C
2000	 2C5	PUSH2	0080	 	 
- stack 1: 0x54C
- stack 0: 0x80
2001	 2C8	MLOAD		 	  ;; # read from x4
- stack 1: 0x54C
- stack 0: 0x1
2002	 2C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x54C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2003	 2CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x54C
- stack 0: 0x1
2004	 2CF	PUSH2	00A0	 	 
- stack 2: 0x54C
- stack 1: 0x1
- stack 0: 0xA0
2005	 2D2	MLOAD		 	  ;; # read from x5
- stack 2: 0x54C
- stack 1: 0x1
- stack 0: 0x2
2006	 2D3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x54C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2007	 2D8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x54C
- stack 1: 0x1
- stack 0: 0x2
2008	 2D9	SUB		 	 
- stack 1: 0x54C
- stack 0: 0x1
2009	 2DA	PUSH2	02E2	 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 2: 0x54C
- stack 1: 0x1
- stack 0: 0x2E2
2010	 2DD	JUMPI		 	 
- stack 0: 0x54C
2011	 2E2	JUMPDEST		 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 0: 0x54C
2012	 2E3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
2013	 2E4	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x2C4FFEC0160FF010173FFF000F1000A010B00900252000001920FF0009900FF
2014	 2E5	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x2C4FFEC0160FF010173FFF000F1000A010B00900252000001920FF0009900FF
- stack 0: 0xE0
2015	 2E7	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x2C4FFEC
2016	 2E8	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x2C4FFEC
- stack 0: 0xFFFF
2017	 2EB	AND		 	 
- stack 1: 0x54C
- stack 0: 0xFFEC
2018	 2EC	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0xFFEC
- stack 0: 0x1
2019	 2EE	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
2020	 2EF	ADD		 	 
- stack 0: 0x538
2021	 2F0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x538
- stack 0: 0xFFFFFFFF
2022	 2F5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x538
2023	 2F6	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
2024	 2F7	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x14DFF010099FFF000B800F0028B000102AA000202C4FFEC0160FF010173FFF0
2025	 2F8	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x14DFF010099FFF000B800F0028B000102AA000202C4FFEC0160FF010173FFF0
- stack 0: 0xF0
2026	 2FA	SHR		 	 
- stack 1: 0x538
- stack 0: 0x14D
2027	 2FB	JUMP		 	 
- stack 0: 0x538
2028	 14D	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x538
2029	 14E	PUSH4	0ff01000	 	 
- stack 1: 0x538
- stack 0: 0xFF01000
2030	 153	PUSH2	0020	 	 
- stack 2: 0x538
- stack 1: 0xFF01000
- stack 0: 0x20
2031	 156	MSTORE		 	  ;; # store to x1
- stack 0: 0x538
2032	 157	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
2033	 159	ADD		 	 
- stack 0: 0x53C
2034	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
2035	 15B	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x99FFF000B800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A
2036	 15C	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x99FFF000B800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A
- stack 0: 0xF0
2037	 15E	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x99
2038	 15F	JUMP		 	 
- stack 0: 0x53C
2039	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x53C
2040	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
2041	 9B	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x99FFF000B800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A
2042	 9C	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0x99FFF000B800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A
- stack 0: 0xE0
2043	 9E	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x99FFF0
2044	 9F	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
2045	 A2	AND		 	 
- stack 1: 0x53C
- stack 0: 0xFFF0
2046	 A3	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0xFFF0
- stack 0: 0x1
2047	 A5	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2048	 A6	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
2049	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x53C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
2050	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x53C
- stack 0: 0xFF00FF0
2051	 AB	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0xFF00FF0
- stack 0: 0x20
2052	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
2053	 AF	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
2054	 B1	ADD		 	 
- stack 0: 0x540
2055	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
2056	 B3	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xB800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A010B0090
2057	 B4	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0xB800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A010B0090
- stack 0: 0xF0
2058	 B6	SHR		 	 
- stack 1: 0x540
- stack 0: 0xB8
2059	 B7	JUMP		 	 
- stack 0: 0x540
2060	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x540
2061	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
2062	 BA	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xB800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A010B0090
2063	 BB	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0xB800F0028B000102AA000202C4FFEC0160FF010173FFF000F1000A010B0090
- stack 0: 0xE0
2064	 BD	SHR		 	 
- stack 1: 0x540
- stack 0: 0xB800F0
2065	 BE	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0xB800F0
- stack 0: 0xFFFF
2066	 C1	AND		 	 
- stack 1: 0x540
- stack 0: 0xF0
2067	 C2	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xF0
- stack 0: 0x1
2068	 C4	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xF0
2069	 C5	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xF0
- stack 0: 0x20
2070	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x540
- stack 1: 0xF0
- stack 0: 0xFF00FF0
2071	 C9	OR		 	  ;; # ORI
- stack 1: 0x540
- stack 0: 0xFF00FF0
2072	 CA	PUSH2	0060	 	 
- stack 2: 0x540
- stack 1: 0xFF00FF0
- stack 0: 0x60
2073	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x540
2074	 CE	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
2075	 D0	ADD		 	 
- stack 0: 0x544
2076	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
2077	 D2	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x28B000102AA000202C4FFEC0160FF010173FFF000F1000A010B009002520000
2078	 D3	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x28B000102AA000202C4FFEC0160FF010173FFF000F1000A010B009002520000
- stack 0: 0xF0
2079	 D5	SHR		 	 
- stack 1: 0x544
- stack 0: 0x28B
2080	 D6	JUMP		 	 
- stack 0: 0x544
2081	 28B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x544
2082	 28C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
2083	 28D	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x28B000102AA000202C4FFEC0160FF010173FFF000F1000A010B009002520000
2084	 28E	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x28B000102AA000202C4FFEC0160FF010173FFF000F1000A010B009002520000
- stack 0: 0xE0
2085	 290	SHR		 	 
- stack 1: 0x544
- stack 0: 0x28B0001
2086	 291	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x28B0001
- stack 0: 0xFFFF
2087	 294	AND		 	 
- stack 1: 0x544
- stack 0: 0x1
2088	 295	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x1
2089	 297	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x1
2090	 298	PUSH2	0080	 	 
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x80
2091	 29B	MLOAD		 	  ;; # read from x4
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x1
2092	 29C	ADD		 	  ;; # ADDI 4
- stack 1: 0x544
- stack 0: 0x2
2093	 29D	PUSH2	0080	 	 
- stack 2: 0x544
- stack 1: 0x2
- stack 0: 0x80
2094	 2A0	MSTORE		 	  ;; # store to x4
- stack 0: 0x544
2095	 2A1	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
2096	 2A3	ADD		 	 
- stack 0: 0x548
2097	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
2098	 2A5	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x2AA000202C4FFEC0160FF010173FFF000F1000A010B00900252000001920FF0
2099	 2A6	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x2AA000202C4FFEC0160FF010173FFF000F1000A010B00900252000001920FF0
- stack 0: 0xF0
2100	 2A8	SHR		 	 
- stack 1: 0x548
- stack 0: 0x2AA
2101	 2A9	JUMP		 	 
- stack 0: 0x548
2102	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x548
2103	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
2104	 2AC	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x2AA000202C4FFEC0160FF010173FFF000F1000A010B00900252000001920FF0
2105	 2AD	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x2AA000202C4FFEC0160FF010173FFF000F1000A010B00900252000001920FF0
- stack 0: 0xE0
2106	 2AF	SHR		 	 
- stack 1: 0x548
- stack 0: 0x2AA0002
2107	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x2AA0002
- stack 0: 0xFFFF
2108	 2B3	AND		 	 
- stack 1: 0x548
- stack 0: 0x2
2109	 2B4	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0x1
2110	 2B6	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x2
2111	 2B7	PUSH2	00A0	 	 
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0xA0
2112	 2BA	MSTORE		 	  ;; # store to x5
- stack 0: 0x548
2113	 2BB	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
2114	 2BD	ADD		 	 
- stack 0: 0x54C
2115	 2BE	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
2116	 2BF	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x2C4FFEC0160FF010173FFF000F1000A010B00900252000001920FF0009900FF
2117	 2C0	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x2C4FFEC0160FF010173FFF000F1000A010B00900252000001920FF0009900FF
- stack 0: 0xF0
2118	 2C2	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x2C4
2119	 2C3	JUMP		 	 
- stack 0: 0x54C
2120	 2C4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x54C
2121	 2C5	PUSH2	0080	 	 
- stack 1: 0x54C
- stack 0: 0x80
2122	 2C8	MLOAD		 	  ;; # read from x4
- stack 1: 0x54C
- stack 0: 0x2
2123	 2C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2124	 2CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x54C
- stack 0: 0x2
2125	 2CF	PUSH2	00A0	 	 
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0xA0
2126	 2D2	MLOAD		 	  ;; # read from x5
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0x2
2127	 2D3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x54C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2128	 2D8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0x2
2129	 2D9	SUB		 	 
- stack 1: 0x54C
- stack 0: 0x0
2130	 2DA	PUSH2	02E2	 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x2E2
2131	 2DD	JUMPI		 	 
- stack 0: 0x54C
2132	 2DE	PUSH2	02FC	 ;; _neq_after_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 1: 0x54C
- stack 0: 0x2FC
2133	 2E1	JUMP		 	 
- stack 0: 0x54C
2134	 2FC	JUMPDEST		 ;; _neq_after_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 0: 0x54C
2135	 2FD	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
2136	 2FF	ADD		 	 
- stack 0: 0x550
2137	 300	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
2138	 301	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x160FF010173FFF000F1000A010B00900252000001920FF0009900FF03480000
2139	 302	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x160FF010173FFF000F1000A010B00900252000001920FF0009900FF03480000
- stack 0: 0xF0
2140	 304	SHR		 	 
- stack 1: 0x550
- stack 0: 0x160
2141	 305	JUMP		 	 
- stack 0: 0x550
2142	 160	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x550
2143	 161	PUSH4	0ff01000	 	 
- stack 1: 0x550
- stack 0: 0xFF01000
2144	 166	PUSH2	03A0	 	 
- stack 2: 0x550
- stack 1: 0xFF01000
- stack 0: 0x3A0
2145	 169	MSTORE		 	  ;; # store to x29
- stack 0: 0x550
2146	 16A	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
2147	 16C	ADD		 	 
- stack 0: 0x554
2148	 16D	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
2149	 16E	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x173FFF000F1000A010B00900252000001920FF0009900FF0348000000B8FF0F
2150	 16F	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x173FFF000F1000A010B00900252000001920FF0009900FF0348000000B8FF0F
- stack 0: 0xF0
2151	 171	SHR		 	 
- stack 1: 0x554
- stack 0: 0x173
2152	 172	JUMP		 	 
- stack 0: 0x554
2153	 173	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x554
2154	 174	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
2155	 175	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x173FFF000F1000A010B00900252000001920FF0009900FF0348000000B8FF0F
2156	 176	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x173FFF000F1000A010B00900252000001920FF0009900FF0348000000B8FF0F
- stack 0: 0xE0
2157	 178	SHR		 	 
- stack 1: 0x554
- stack 0: 0x173FFF0
2158	 179	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x173FFF0
- stack 0: 0xFFFF
2159	 17C	AND		 	 
- stack 1: 0x554
- stack 0: 0xFFF0
2160	 17D	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0xFFF0
- stack 0: 0x1
2161	 17F	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2162	 180	PUSH2	03A0	 	 
- stack 2: 0x554
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
2163	 183	MLOAD		 	  ;; # read from x29
- stack 2: 0x554
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
2164	 184	ADD		 	  ;; # ADDI 29
- stack 1: 0x554
- stack 0: 0xFF00FF0
2165	 185	PUSH2	03A0	 	 
- stack 2: 0x554
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
2166	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x554
2167	 189	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
2168	 18B	ADD		 	 
- stack 0: 0x558
2169	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
2170	 18D	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xF1000A010B00900252000001920FF0009900FF0348000000B8FF0F028B0001
2171	 18E	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xF1000A010B00900252000001920FF0009900FF0348000000B8FF0F028B0001
- stack 0: 0xF0
2172	 190	SHR		 	 
- stack 1: 0x558
- stack 0: 0xF1
2173	 191	JUMP		 	 
- stack 0: 0x558
2174	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x558
2175	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
2176	 F3	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xF1000A010B00900252000001920FF0009900FF0348000000B8FF0F028B0001
2177	 F4	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0xF1000A010B00900252000001920FF0009900FF0348000000B8FF0F028B0001
- stack 0: 0xE0
2178	 F6	SHR		 	 
- stack 1: 0x558
- stack 0: 0xF1000A
2179	 F7	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0xF1000A
- stack 0: 0xFFFF
2180	 FA	AND		 	 
- stack 1: 0x558
- stack 0: 0xA
2181	 FB	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0xA
- stack 0: 0x1
2182	 FD	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0xA
2183	 FE	PUSH2	0380	 	 
- stack 2: 0x558
- stack 1: 0xA
- stack 0: 0x380
2184	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x558
2185	 102	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
2186	 104	ADD		 	 
- stack 0: 0x55C
2187	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
2188	 106	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x10B00900252000001920FF0009900FF0348000000B8FF0F028B000102AA0002
2189	 107	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x10B00900252000001920FF0009900FF0348000000B8FF0F028B000102AA0002
- stack 0: 0xF0
2190	 109	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x10B
2191	 10A	JUMP		 	 
- stack 0: 0x55C
2192	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1c8(ignore imm)
- stack 0: 0x55C
2193	 10C	PUSH2	0060	 	 
- stack 1: 0x55C
- stack 0: 0x60
2194	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x55C
- stack 0: 0xFF00FF0
2195	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x55C
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
2196	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x55C
- stack 0: 0xFF00FF0
2197	 116	PUSH2	03A0	 	 
- stack 2: 0x55C
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
2198	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x55C
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
2199	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x55C
- stack 2: 0xFF00FF0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
2200	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x55C
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
2201	 120	SUB		 	 
- stack 1: 0x55C
- stack 0: 0x0
2202	 121	PUSH2	0129	 ;; _neq_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0x129
2203	 124	JUMPI		 	 
- stack 0: 0x55C
2204	 125	PUSH2	0143	 ;; _neq_after_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 1: 0x55C
- stack 0: 0x143
2205	 128	JUMP		 	 
- stack 0: 0x55C
2206	 143	JUMPDEST		 ;; _neq_after_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 0: 0x55C
2207	 144	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
2208	 146	ADD		 	 
- stack 0: 0x560
2209	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
2210	 148	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x252000001920FF0009900FF0348000000B8FF0F028B000102AA000202C4FFE8
2211	 149	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x252000001920FF0009900FF0348000000B8FF0F028B000102AA000202C4FFE8
- stack 0: 0xF0
2212	 14B	SHR		 	 
- stack 1: 0x560
- stack 0: 0x252
2213	 14C	JUMP		 	 
- stack 0: 0x560
2214	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x560
2215	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
2216	 254	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x252000001920FF0009900FF0348000000B8FF0F028B000102AA000202C4FFE8
2217	 255	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x252000001920FF0009900FF0348000000B8FF0F028B000102AA000202C4FFE8
- stack 0: 0xE0
2218	 257	SHR		 	 
- stack 1: 0x560
- stack 0: 0x2520000
2219	 258	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x2520000
- stack 0: 0xFFFF
2220	 25B	AND		 	 
- stack 1: 0x560
- stack 0: 0x0
2221	 25C	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x1
2222	 25E	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x0
2223	 25F	PUSH2	0080	 	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x80
2224	 262	MSTORE		 	  ;; # store to x4
- stack 0: 0x560
2225	 263	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
2226	 265	ADD		 	 
- stack 0: 0x564
2227	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2228	 267	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x1920FF0009900FF0348000000B8FF0F028B000102AA000202C4FFE800D7FFFF
2229	 268	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x1920FF0009900FF0348000000B8FF0F028B000102AA000202C4FFE800D7FFFF
- stack 0: 0xF0
2230	 26A	SHR		 	 
- stack 1: 0x564
- stack 0: 0x192
2231	 26B	JUMP		 	 
- stack 0: 0x564
2232	 192	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x564
2233	 193	PUSH4	00ff0000	 	 
- stack 1: 0x564
- stack 0: 0xFF0000
2234	 198	PUSH2	0020	 	 
- stack 2: 0x564
- stack 1: 0xFF0000
- stack 0: 0x20
2235	 19B	MSTORE		 	  ;; # store to x1
- stack 0: 0x564
2236	 19C	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2237	 19E	ADD		 	 
- stack 0: 0x568
2238	 19F	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2239	 1A0	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x9900FF0348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B
2240	 1A1	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x9900FF0348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B
- stack 0: 0xF0
2241	 1A3	SHR		 	 
- stack 1: 0x568
- stack 0: 0x99
2242	 1A4	JUMP		 	 
- stack 0: 0x568
2243	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x568
2244	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
2245	 9B	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x9900FF0348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B
2246	 9C	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x9900FF0348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B
- stack 0: 0xE0
2247	 9E	SHR		 	 
- stack 1: 0x568
- stack 0: 0x9900FF
2248	 9F	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x9900FF
- stack 0: 0xFFFF
2249	 A2	AND		 	 
- stack 1: 0x568
- stack 0: 0xFF
2250	 A3	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0xFF
- stack 0: 0x1
2251	 A5	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0xFF
2252	 A6	PUSH2	0020	 	 
- stack 2: 0x568
- stack 1: 0xFF
- stack 0: 0x20
2253	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x568
- stack 1: 0xFF
- stack 0: 0xFF0000
2254	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x568
- stack 0: 0xFF00FF
2255	 AB	PUSH2	0020	 	 
- stack 2: 0x568
- stack 1: 0xFF00FF
- stack 0: 0x20
2256	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x568
2257	 AF	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2258	 B1	ADD		 	 
- stack 0: 0x56C
2259	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2260	 B3	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B0064
2261	 B4	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B0064
- stack 0: 0xF0
2262	 B6	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x348
2263	 B7	JUMP		 	 
- stack 0: 0x56C
2264	 348	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x56C
2265	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
2266	 34A	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B0064
2267	 34B	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B0064
- stack 0: 0xE0
2268	 34D	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x3480000
2269	 34E	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x3480000
- stack 0: 0xFFFF
2270	 351	AND		 	 
- stack 1: 0x56C
- stack 0: 0x0
2271	 352	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x1
2272	 354	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x0
2273	 355	POP		 	 
- stack 0: 0x56C
2274	 356	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2275	 358	ADD		 	 
- stack 0: 0x570
2276	 359	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2277	 35A	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0xB8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B006402520000
2278	 35B	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0xB8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B006402520000
- stack 0: 0xF0
2279	 35D	SHR		 	 
- stack 1: 0x570
- stack 0: 0xB8
2280	 35E	JUMP		 	 
- stack 0: 0x570
2281	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x570
2282	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
2283	 BA	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0xB8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B006402520000
2284	 BB	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0xB8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B006402520000
- stack 0: 0xE0
2285	 BD	SHR		 	 
- stack 1: 0x570
- stack 0: 0xB8FF0F
2286	 BE	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0xB8FF0F
- stack 0: 0xFFFF
2287	 C1	AND		 	 
- stack 1: 0x570
- stack 0: 0xFF0F
2288	 C2	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0xFF0F
- stack 0: 0x1
2289	 C4	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
2290	 C5	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x20
2291	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x570
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xFF00FF
2292	 C9	OR		 	  ;; # ORI
- stack 1: 0x570
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2293	 CA	PUSH2	0060	 	 
- stack 2: 0x570
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
2294	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x570
2295	 CE	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2296	 D0	ADD		 	 
- stack 0: 0x574
2297	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2298	 D2	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x28B000102AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF
2299	 D3	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x28B000102AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF
- stack 0: 0xF0
2300	 D5	SHR		 	 
- stack 1: 0x574
- stack 0: 0x28B
2301	 D6	JUMP		 	 
- stack 0: 0x574
2302	 28B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x574
2303	 28C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
2304	 28D	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x28B000102AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF
2305	 28E	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x28B000102AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF
- stack 0: 0xE0
2306	 290	SHR		 	 
- stack 1: 0x574
- stack 0: 0x28B0001
2307	 291	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x28B0001
- stack 0: 0xFFFF
2308	 294	AND		 	 
- stack 1: 0x574
- stack 0: 0x1
2309	 295	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x1
2310	 297	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x1
2311	 298	PUSH2	0080	 	 
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x80
2312	 29B	MLOAD		 	  ;; # read from x4
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x0
2313	 29C	ADD		 	  ;; # ADDI 4
- stack 1: 0x574
- stack 0: 0x1
2314	 29D	PUSH2	0080	 	 
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x80
2315	 2A0	MSTORE		 	  ;; # store to x4
- stack 0: 0x574
2316	 2A1	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2317	 2A3	ADD		 	 
- stack 0: 0x578
2318	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2319	 2A5	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x2AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF0099000F
2320	 2A6	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x2AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF0099000F
- stack 0: 0xF0
2321	 2A8	SHR		 	 
- stack 1: 0x578
- stack 0: 0x2AA
2322	 2A9	JUMP		 	 
- stack 0: 0x578
2323	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x578
2324	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2325	 2AC	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x2AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF0099000F
2326	 2AD	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x2AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF0099000F
- stack 0: 0xE0
2327	 2AF	SHR		 	 
- stack 1: 0x578
- stack 0: 0x2AA0002
2328	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x2AA0002
- stack 0: 0xFFFF
2329	 2B3	AND		 	 
- stack 1: 0x578
- stack 0: 0x2
2330	 2B4	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x2
- stack 0: 0x1
2331	 2B6	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x2
2332	 2B7	PUSH2	00A0	 	 
- stack 2: 0x578
- stack 1: 0x2
- stack 0: 0xA0
2333	 2BA	MSTORE		 	  ;; # store to x5
- stack 0: 0x578
2334	 2BB	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2335	 2BD	ADD		 	 
- stack 0: 0x57C
2336	 2BE	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2337	 2BF	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x2C4FFE800D7FFFF00F1000B010B00640252000001B800FF0099000F03480000
2338	 2C0	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x2C4FFE800D7FFFF00F1000B010B00640252000001B800FF0099000F03480000
- stack 0: 0xF0
2339	 2C2	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x2C4
2340	 2C3	JUMP		 	 
- stack 0: 0x57C
2341	 2C4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x57C
2342	 2C5	PUSH2	0080	 	 
- stack 1: 0x57C
- stack 0: 0x80
2343	 2C8	MLOAD		 	  ;; # read from x4
- stack 1: 0x57C
- stack 0: 0x1
2344	 2C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x57C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2345	 2CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x57C
- stack 0: 0x1
2346	 2CF	PUSH2	00A0	 	 
- stack 2: 0x57C
- stack 1: 0x1
- stack 0: 0xA0
2347	 2D2	MLOAD		 	  ;; # read from x5
- stack 2: 0x57C
- stack 1: 0x1
- stack 0: 0x2
2348	 2D3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x57C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2349	 2D8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x57C
- stack 1: 0x1
- stack 0: 0x2
2350	 2D9	SUB		 	 
- stack 1: 0x57C
- stack 0: 0x1
2351	 2DA	PUSH2	02E2	 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 2: 0x57C
- stack 1: 0x1
- stack 0: 0x2E2
2352	 2DD	JUMPI		 	 
- stack 0: 0x57C
2353	 2E2	JUMPDEST		 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 0: 0x57C
2354	 2E3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2355	 2E4	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x2C4FFE800D7FFFF00F1000B010B00640252000001B800FF0099000F03480000
2356	 2E5	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x2C4FFE800D7FFFF00F1000B010B00640252000001B800FF0099000F03480000
- stack 0: 0xE0
2357	 2E7	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x2C4FFE8
2358	 2E8	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x2C4FFE8
- stack 0: 0xFFFF
2359	 2EB	AND		 	 
- stack 1: 0x57C
- stack 0: 0xFFE8
2360	 2EC	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0xFFE8
- stack 0: 0x1
2361	 2EE	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2362	 2EF	ADD		 	 
- stack 0: 0x564
2363	 2F0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x564
- stack 0: 0xFFFFFFFF
2364	 2F5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x564
2365	 2F6	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2366	 2F7	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x1920FF0009900FF0348000000B8FF0F028B000102AA000202C4FFE800D7FFFF
2367	 2F8	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x1920FF0009900FF0348000000B8FF0F028B000102AA000202C4FFE800D7FFFF
- stack 0: 0xF0
2368	 2FA	SHR		 	 
- stack 1: 0x564
- stack 0: 0x192
2369	 2FB	JUMP		 	 
- stack 0: 0x564
2370	 192	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x564
2371	 193	PUSH4	00ff0000	 	 
- stack 1: 0x564
- stack 0: 0xFF0000
2372	 198	PUSH2	0020	 	 
- stack 2: 0x564
- stack 1: 0xFF0000
- stack 0: 0x20
2373	 19B	MSTORE		 	  ;; # store to x1
- stack 0: 0x564
2374	 19C	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2375	 19E	ADD		 	 
- stack 0: 0x568
2376	 19F	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2377	 1A0	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x9900FF0348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B
2378	 1A1	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x9900FF0348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B
- stack 0: 0xF0
2379	 1A3	SHR		 	 
- stack 1: 0x568
- stack 0: 0x99
2380	 1A4	JUMP		 	 
- stack 0: 0x568
2381	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x568
2382	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
2383	 9B	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x9900FF0348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B
2384	 9C	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x9900FF0348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B
- stack 0: 0xE0
2385	 9E	SHR		 	 
- stack 1: 0x568
- stack 0: 0x9900FF
2386	 9F	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x9900FF
- stack 0: 0xFFFF
2387	 A2	AND		 	 
- stack 1: 0x568
- stack 0: 0xFF
2388	 A3	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0xFF
- stack 0: 0x1
2389	 A5	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0xFF
2390	 A6	PUSH2	0020	 	 
- stack 2: 0x568
- stack 1: 0xFF
- stack 0: 0x20
2391	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x568
- stack 1: 0xFF
- stack 0: 0xFF0000
2392	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x568
- stack 0: 0xFF00FF
2393	 AB	PUSH2	0020	 	 
- stack 2: 0x568
- stack 1: 0xFF00FF
- stack 0: 0x20
2394	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x568
2395	 AF	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2396	 B1	ADD		 	 
- stack 0: 0x56C
2397	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2398	 B3	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B0064
2399	 B4	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B0064
- stack 0: 0xF0
2400	 B6	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x348
2401	 B7	JUMP		 	 
- stack 0: 0x56C
2402	 348	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x56C
2403	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
2404	 34A	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B0064
2405	 34B	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x348000000B8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B0064
- stack 0: 0xE0
2406	 34D	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x3480000
2407	 34E	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x3480000
- stack 0: 0xFFFF
2408	 351	AND		 	 
- stack 1: 0x56C
- stack 0: 0x0
2409	 352	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x1
2410	 354	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x0
2411	 355	POP		 	 
- stack 0: 0x56C
2412	 356	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2413	 358	ADD		 	 
- stack 0: 0x570
2414	 359	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2415	 35A	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0xB8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B006402520000
2416	 35B	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0xB8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B006402520000
- stack 0: 0xF0
2417	 35D	SHR		 	 
- stack 1: 0x570
- stack 0: 0xB8
2418	 35E	JUMP		 	 
- stack 0: 0x570
2419	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x570
2420	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
2421	 BA	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0xB8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B006402520000
2422	 BB	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0xB8FF0F028B000102AA000202C4FFE800D7FFFF00F1000B010B006402520000
- stack 0: 0xE0
2423	 BD	SHR		 	 
- stack 1: 0x570
- stack 0: 0xB8FF0F
2424	 BE	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0xB8FF0F
- stack 0: 0xFFFF
2425	 C1	AND		 	 
- stack 1: 0x570
- stack 0: 0xFF0F
2426	 C2	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0xFF0F
- stack 0: 0x1
2427	 C4	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
2428	 C5	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x20
2429	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x570
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xFF00FF
2430	 C9	OR		 	  ;; # ORI
- stack 1: 0x570
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2431	 CA	PUSH2	0060	 	 
- stack 2: 0x570
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
2432	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x570
2433	 CE	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2434	 D0	ADD		 	 
- stack 0: 0x574
2435	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2436	 D2	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x28B000102AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF
2437	 D3	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x28B000102AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF
- stack 0: 0xF0
2438	 D5	SHR		 	 
- stack 1: 0x574
- stack 0: 0x28B
2439	 D6	JUMP		 	 
- stack 0: 0x574
2440	 28B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x574
2441	 28C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
2442	 28D	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x28B000102AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF
2443	 28E	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x28B000102AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF
- stack 0: 0xE0
2444	 290	SHR		 	 
- stack 1: 0x574
- stack 0: 0x28B0001
2445	 291	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x28B0001
- stack 0: 0xFFFF
2446	 294	AND		 	 
- stack 1: 0x574
- stack 0: 0x1
2447	 295	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x1
2448	 297	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x1
2449	 298	PUSH2	0080	 	 
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x80
2450	 29B	MLOAD		 	  ;; # read from x4
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x1
2451	 29C	ADD		 	  ;; # ADDI 4
- stack 1: 0x574
- stack 0: 0x2
2452	 29D	PUSH2	0080	 	 
- stack 2: 0x574
- stack 1: 0x2
- stack 0: 0x80
2453	 2A0	MSTORE		 	  ;; # store to x4
- stack 0: 0x574
2454	 2A1	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2455	 2A3	ADD		 	 
- stack 0: 0x578
2456	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2457	 2A5	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x2AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF0099000F
2458	 2A6	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x2AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF0099000F
- stack 0: 0xF0
2459	 2A8	SHR		 	 
- stack 1: 0x578
- stack 0: 0x2AA
2460	 2A9	JUMP		 	 
- stack 0: 0x578
2461	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x578
2462	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2463	 2AC	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x2AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF0099000F
2464	 2AD	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x2AA000202C4FFE800D7FFFF00F1000B010B00640252000001B800FF0099000F
- stack 0: 0xE0
2465	 2AF	SHR		 	 
- stack 1: 0x578
- stack 0: 0x2AA0002
2466	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x2AA0002
- stack 0: 0xFFFF
2467	 2B3	AND		 	 
- stack 1: 0x578
- stack 0: 0x2
2468	 2B4	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x2
- stack 0: 0x1
2469	 2B6	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x2
2470	 2B7	PUSH2	00A0	 	 
- stack 2: 0x578
- stack 1: 0x2
- stack 0: 0xA0
2471	 2BA	MSTORE		 	  ;; # store to x5
- stack 0: 0x578
2472	 2BB	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2473	 2BD	ADD		 	 
- stack 0: 0x57C
2474	 2BE	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2475	 2BF	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x2C4FFE800D7FFFF00F1000B010B00640252000001B800FF0099000F03480000
2476	 2C0	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x2C4FFE800D7FFFF00F1000B010B00640252000001B800FF0099000F03480000
- stack 0: 0xF0
2477	 2C2	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x2C4
2478	 2C3	JUMP		 	 
- stack 0: 0x57C
2479	 2C4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x57C
2480	 2C5	PUSH2	0080	 	 
- stack 1: 0x57C
- stack 0: 0x80
2481	 2C8	MLOAD		 	  ;; # read from x4
- stack 1: 0x57C
- stack 0: 0x2
2482	 2C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2483	 2CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x57C
- stack 0: 0x2
2484	 2CF	PUSH2	00A0	 	 
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0xA0
2485	 2D2	MLOAD		 	  ;; # read from x5
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0x2
2486	 2D3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x57C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2487	 2D8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0x2
2488	 2D9	SUB		 	 
- stack 1: 0x57C
- stack 0: 0x0
2489	 2DA	PUSH2	02E2	 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x2E2
2490	 2DD	JUMPI		 	 
- stack 0: 0x57C
2491	 2DE	PUSH2	02FC	 ;; _neq_after_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 1: 0x57C
- stack 0: 0x2FC
2492	 2E1	JUMP		 	 
- stack 0: 0x57C
2493	 2FC	JUMPDEST		 ;; _neq_after_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 0: 0x57C
2494	 2FD	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2495	 2FF	ADD		 	 
- stack 0: 0x580
2496	 300	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2497	 301	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xD7FFFF00F1000B010B00640252000001B800FF0099000F0348000003480000
2498	 302	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xD7FFFF00F1000B010B00640252000001B800FF0099000F0348000003480000
- stack 0: 0xF0
2499	 304	SHR		 	 
- stack 1: 0x580
- stack 0: 0xD7
2500	 305	JUMP		 	 
- stack 0: 0x580
2501	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-241(ignore imm)
- stack 0: 0x580
2502	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2503	 D9	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xD7FFFF00F1000B010B00640252000001B800FF0099000F0348000003480000
2504	 DA	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0xD7FFFF00F1000B010B00640252000001B800FF0099000F0348000003480000
- stack 0: 0xE0
2505	 DC	SHR		 	 
- stack 1: 0x580
- stack 0: 0xD7FFFF
2506	 DD	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0xD7FFFF
- stack 0: 0xFFFF
2507	 E0	AND		 	 
- stack 1: 0x580
- stack 0: 0xFFFF
2508	 E1	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0xFFFF
- stack 0: 0x1
2509	 E3	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2510	 E4	PUSH2	03A0	 	 
- stack 2: 0x580
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
2511	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x580
2512	 E8	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2513	 EA	ADD		 	 
- stack 0: 0x584
2514	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2515	 EC	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xF1000B010B00640252000001B800FF0099000F034800000348000000B800F0
2516	 ED	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xF1000B010B00640252000001B800FF0099000F034800000348000000B800F0
- stack 0: 0xF0
2517	 EF	SHR		 	 
- stack 1: 0x584
- stack 0: 0xF1
2518	 F0	JUMP		 	 
- stack 0: 0x584
2519	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x584
2520	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2521	 F3	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xF1000B010B00640252000001B800FF0099000F034800000348000000B800F0
2522	 F4	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0xF1000B010B00640252000001B800FF0099000F034800000348000000B800F0
- stack 0: 0xE0
2523	 F6	SHR		 	 
- stack 1: 0x584
- stack 0: 0xF1000B
2524	 F7	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0xF1000B
- stack 0: 0xFFFF
2525	 FA	AND		 	 
- stack 1: 0x584
- stack 0: 0xB
2526	 FB	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0xB
- stack 0: 0x1
2527	 FD	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0xB
2528	 FE	PUSH2	0380	 	 
- stack 2: 0x584
- stack 1: 0xB
- stack 0: 0x380
2529	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x584
2530	 102	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2531	 104	ADD		 	 
- stack 0: 0x588
2532	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2533	 106	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x10B00640252000001B800FF0099000F034800000348000000B800F0028B0001
2534	 107	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x10B00640252000001B800FF0099000F034800000348000000B800F0028B0001
- stack 0: 0xF0
2535	 109	SHR		 	 
- stack 1: 0x588
- stack 0: 0x10B
2536	 10A	JUMP		 	 
- stack 0: 0x588
2537	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1c8(ignore imm)
- stack 0: 0x588
2538	 10C	PUSH2	0060	 	 
- stack 1: 0x588
- stack 0: 0x60
2539	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x588
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2540	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
2541	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0xFFFFFFFF
2542	 116	PUSH2	03A0	 	 
- stack 2: 0x588
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
2543	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x588
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2544	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x588
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
2545	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x588
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
2546	 120	SUB		 	 
- stack 1: 0x588
- stack 0: 0x0
2547	 121	PUSH2	0129	 ;; _neq_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x129
2548	 124	JUMPI		 	 
- stack 0: 0x588
2549	 125	PUSH2	0143	 ;; _neq_after_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 1: 0x588
- stack 0: 0x143
2550	 128	JUMP		 	 
- stack 0: 0x588
2551	 143	JUMPDEST		 ;; _neq_after_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 0: 0x588
2552	 144	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2553	 146	ADD		 	 
- stack 0: 0x58C
2554	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2555	 148	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x252000001B800FF0099000F034800000348000000B800F0028B000102AA0002
2556	 149	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x252000001B800FF0099000F034800000348000000B800F0028B000102AA0002
- stack 0: 0xF0
2557	 14B	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x252
2558	 14C	JUMP		 	 
- stack 0: 0x58C
2559	 252	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x58C
2560	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2561	 254	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x252000001B800FF0099000F034800000348000000B800F0028B000102AA0002
2562	 255	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x252000001B800FF0099000F034800000348000000B800F0028B000102AA0002
- stack 0: 0xE0
2563	 257	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x2520000
2564	 258	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x2520000
- stack 0: 0xFFFF
2565	 25B	AND		 	 
- stack 1: 0x58C
- stack 0: 0x0
2566	 25C	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x1
2567	 25E	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x0
2568	 25F	PUSH2	0080	 	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x80
2569	 262	MSTORE		 	  ;; # store to x4
- stack 0: 0x58C
2570	 263	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2571	 265	ADD		 	 
- stack 0: 0x590
2572	 266	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2573	 267	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x1B800FF0099000F034800000348000000B800F0028B000102AA000202C4FFE4
2574	 268	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x1B800FF0099000F034800000348000000B800F0028B000102AA000202C4FFE4
- stack 0: 0xF0
2575	 26A	SHR		 	 
- stack 1: 0x590
- stack 0: 0x1B8
2576	 26B	JUMP		 	 
- stack 0: 0x590
2577	 1B8	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x590
2578	 1B9	PUSH4	f00ff000	 	 
- stack 1: 0x590
- stack 0: 0xF00FF000
2579	 1BE	PUSH2	0020	 	 
- stack 2: 0x590
- stack 1: 0xF00FF000
- stack 0: 0x20
2580	 1C1	MSTORE		 	  ;; # store to x1
- stack 0: 0x590
2581	 1C2	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2582	 1C4	ADD		 	 
- stack 0: 0x594
2583	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2584	 1C6	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x99000F034800000348000000B800F0028B000102AA000202C4FFE401CB00FF
2585	 1C7	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x99000F034800000348000000B800F0028B000102AA000202C4FFE401CB00FF
- stack 0: 0xF0
2586	 1C9	SHR		 	 
- stack 1: 0x594
- stack 0: 0x99
2587	 1CA	JUMP		 	 
- stack 0: 0x594
2588	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x594
2589	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2590	 9B	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x99000F034800000348000000B800F0028B000102AA000202C4FFE401CB00FF
2591	 9C	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x99000F034800000348000000B800F0028B000102AA000202C4FFE401CB00FF
- stack 0: 0xE0
2592	 9E	SHR		 	 
- stack 1: 0x594
- stack 0: 0x99000F
2593	 9F	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x99000F
- stack 0: 0xFFFF
2594	 A2	AND		 	 
- stack 1: 0x594
- stack 0: 0xF
2595	 A3	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0xF
- stack 0: 0x1
2596	 A5	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0xF
2597	 A6	PUSH2	0020	 	 
- stack 2: 0x594
- stack 1: 0xF
- stack 0: 0x20
2598	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x594
- stack 1: 0xF
- stack 0: 0xF00FF000
2599	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x594
- stack 0: 0xF00FF00F
2600	 AB	PUSH2	0020	 	 
- stack 2: 0x594
- stack 1: 0xF00FF00F
- stack 0: 0x20
2601	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x594
2602	 AF	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2603	 B1	ADD		 	 
- stack 0: 0x598
2604	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2605	 B3	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x34800000348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF
2606	 B4	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x34800000348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF
- stack 0: 0xF0
2607	 B6	SHR		 	 
- stack 1: 0x598
- stack 0: 0x348
2608	 B7	JUMP		 	 
- stack 0: 0x598
2609	 348	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x598
2610	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2611	 34A	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x34800000348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF
2612	 34B	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x34800000348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF
- stack 0: 0xE0
2613	 34D	SHR		 	 
- stack 1: 0x598
- stack 0: 0x3480000
2614	 34E	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x3480000
- stack 0: 0xFFFF
2615	 351	AND		 	 
- stack 1: 0x598
- stack 0: 0x0
2616	 352	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x1
2617	 354	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x0
2618	 355	POP		 	 
- stack 0: 0x598
2619	 356	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2620	 358	ADD		 	 
- stack 0: 0x59C
2621	 359	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2622	 35A	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C
2623	 35B	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C
- stack 0: 0xF0
2624	 35D	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x348
2625	 35E	JUMP		 	 
- stack 0: 0x59C
2626	 348	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x59C
2627	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2628	 34A	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C
2629	 34B	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C
- stack 0: 0xE0
2630	 34D	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x3480000
2631	 34E	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x3480000
- stack 0: 0xFFFF
2632	 351	AND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2633	 352	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1
2634	 354	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2635	 355	POP		 	 
- stack 0: 0x59C
2636	 356	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2637	 358	ADD		 	 
- stack 0: 0x5A0
2638	 359	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2639	 35A	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xB800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030
2640	 35B	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0xB800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030
- stack 0: 0xF0
2641	 35D	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xB8
2642	 35E	JUMP		 	 
- stack 0: 0x5A0
2643	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x5A0
2644	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2645	 BA	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xB800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030
2646	 BB	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0xB800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030
- stack 0: 0xE0
2647	 BD	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xB800F0
2648	 BE	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0xB800F0
- stack 0: 0xFFFF
2649	 C1	AND		 	 
- stack 1: 0x5A0
- stack 0: 0xF0
2650	 C2	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0xF0
- stack 0: 0x1
2651	 C4	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0xF0
2652	 C5	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0xF0
- stack 0: 0x20
2653	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A0
- stack 1: 0xF0
- stack 0: 0xF00FF00F
2654	 C9	OR		 	  ;; # ORI
- stack 1: 0x5A0
- stack 0: 0xF00FF0FF
2655	 CA	PUSH2	0060	 	 
- stack 2: 0x5A0
- stack 1: 0xF00FF0FF
- stack 0: 0x60
2656	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A0
2657	 CE	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2658	 D0	ADD		 	 
- stack 0: 0x5A4
2659	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2660	 D2	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x28B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F0
2661	 D3	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x28B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F0
- stack 0: 0xF0
2662	 D5	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x28B
2663	 D6	JUMP		 	 
- stack 0: 0x5A4
2664	 28B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5A4
2665	 28C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2666	 28D	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x28B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F0
2667	 28E	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x28B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F0
- stack 0: 0xE0
2668	 290	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x28B0001
2669	 291	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x28B0001
- stack 0: 0xFFFF
2670	 294	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x1
2671	 295	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x1
2672	 297	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x1
2673	 298	PUSH2	0080	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x80
2674	 29B	MLOAD		 	  ;; # read from x4
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x0
2675	 29C	ADD		 	  ;; # ADDI 4
- stack 1: 0x5A4
- stack 0: 0x1
2676	 29D	PUSH2	0080	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x80
2677	 2A0	MSTORE		 	  ;; # store to x4
- stack 0: 0x5A4
2678	 2A1	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2679	 2A3	ADD		 	 
- stack 0: 0x5A8
2680	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2681	 2A5	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F000D700F0
2682	 2A6	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x2AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F000D700F0
- stack 0: 0xF0
2683	 2A8	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2AA
2684	 2A9	JUMP		 	 
- stack 0: 0x5A8
2685	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5A8
2686	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2687	 2AC	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F000D700F0
2688	 2AD	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x2AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F000D700F0
- stack 0: 0xE0
2689	 2AF	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2AA0002
2690	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x2AA0002
- stack 0: 0xFFFF
2691	 2B3	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x2
2692	 2B4	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0x1
2693	 2B6	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x2
2694	 2B7	PUSH2	00A0	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0xA0
2695	 2BA	MSTORE		 	  ;; # store to x5
- stack 0: 0x5A8
2696	 2BB	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2697	 2BD	ADD		 	 
- stack 0: 0x5AC
2698	 2BE	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2699	 2BF	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x2C4FFE401CB00FF017300FF00F1000C010B0030035F00F000D700F000F1000D
2700	 2C0	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x2C4FFE401CB00FF017300FF00F1000C010B0030035F00F000D700F000F1000D
- stack 0: 0xF0
2701	 2C2	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2C4
2702	 2C3	JUMP		 	 
- stack 0: 0x5AC
2703	 2C4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5AC
2704	 2C5	PUSH2	0080	 	 
- stack 1: 0x5AC
- stack 0: 0x80
2705	 2C8	MLOAD		 	  ;; # read from x4
- stack 1: 0x5AC
- stack 0: 0x1
2706	 2C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2707	 2CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5AC
- stack 0: 0x1
2708	 2CF	PUSH2	00A0	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0xA0
2709	 2D2	MLOAD		 	  ;; # read from x5
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x2
2710	 2D3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5AC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2711	 2D8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x2
2712	 2D9	SUB		 	 
- stack 1: 0x5AC
- stack 0: 0x1
2713	 2DA	PUSH2	02E2	 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x2E2
2714	 2DD	JUMPI		 	 
- stack 0: 0x5AC
2715	 2E2	JUMPDEST		 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 0: 0x5AC
2716	 2E3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2717	 2E4	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x2C4FFE401CB00FF017300FF00F1000C010B0030035F00F000D700F000F1000D
2718	 2E5	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x2C4FFE401CB00FF017300FF00F1000C010B0030035F00F000D700F000F1000D
- stack 0: 0xE0
2719	 2E7	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2C4FFE4
2720	 2E8	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x2C4FFE4
- stack 0: 0xFFFF
2721	 2EB	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFE4
2722	 2EC	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xFFE4
- stack 0: 0x1
2723	 2EE	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2724	 2EF	ADD		 	 
- stack 0: 0x590
2725	 2F0	PUSH4	FFFFFFFF	 	 
- stack 1: 0x590
- stack 0: 0xFFFFFFFF
2726	 2F5	AND		 	  ;; # mask to 32 bits
- stack 0: 0x590
2727	 2F6	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2728	 2F7	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x1B800FF0099000F034800000348000000B800F0028B000102AA000202C4FFE4
2729	 2F8	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x1B800FF0099000F034800000348000000B800F0028B000102AA000202C4FFE4
- stack 0: 0xF0
2730	 2FA	SHR		 	 
- stack 1: 0x590
- stack 0: 0x1B8
2731	 2FB	JUMP		 	 
- stack 0: 0x590
2732	 1B8	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x590
2733	 1B9	PUSH4	f00ff000	 	 
- stack 1: 0x590
- stack 0: 0xF00FF000
2734	 1BE	PUSH2	0020	 	 
- stack 2: 0x590
- stack 1: 0xF00FF000
- stack 0: 0x20
2735	 1C1	MSTORE		 	  ;; # store to x1
- stack 0: 0x590
2736	 1C2	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2737	 1C4	ADD		 	 
- stack 0: 0x594
2738	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2739	 1C6	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x99000F034800000348000000B800F0028B000102AA000202C4FFE401CB00FF
2740	 1C7	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x99000F034800000348000000B800F0028B000102AA000202C4FFE401CB00FF
- stack 0: 0xF0
2741	 1C9	SHR		 	 
- stack 1: 0x594
- stack 0: 0x99
2742	 1CA	JUMP		 	 
- stack 0: 0x594
2743	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x594
2744	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2745	 9B	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x99000F034800000348000000B800F0028B000102AA000202C4FFE401CB00FF
2746	 9C	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x99000F034800000348000000B800F0028B000102AA000202C4FFE401CB00FF
- stack 0: 0xE0
2747	 9E	SHR		 	 
- stack 1: 0x594
- stack 0: 0x99000F
2748	 9F	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x99000F
- stack 0: 0xFFFF
2749	 A2	AND		 	 
- stack 1: 0x594
- stack 0: 0xF
2750	 A3	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0xF
- stack 0: 0x1
2751	 A5	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0xF
2752	 A6	PUSH2	0020	 	 
- stack 2: 0x594
- stack 1: 0xF
- stack 0: 0x20
2753	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x594
- stack 1: 0xF
- stack 0: 0xF00FF000
2754	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x594
- stack 0: 0xF00FF00F
2755	 AB	PUSH2	0020	 	 
- stack 2: 0x594
- stack 1: 0xF00FF00F
- stack 0: 0x20
2756	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x594
2757	 AF	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2758	 B1	ADD		 	 
- stack 0: 0x598
2759	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2760	 B3	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x34800000348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF
2761	 B4	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x34800000348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF
- stack 0: 0xF0
2762	 B6	SHR		 	 
- stack 1: 0x598
- stack 0: 0x348
2763	 B7	JUMP		 	 
- stack 0: 0x598
2764	 348	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x598
2765	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2766	 34A	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x34800000348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF
2767	 34B	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x34800000348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF
- stack 0: 0xE0
2768	 34D	SHR		 	 
- stack 1: 0x598
- stack 0: 0x3480000
2769	 34E	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x3480000
- stack 0: 0xFFFF
2770	 351	AND		 	 
- stack 1: 0x598
- stack 0: 0x0
2771	 352	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x1
2772	 354	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x0
2773	 355	POP		 	 
- stack 0: 0x598
2774	 356	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2775	 358	ADD		 	 
- stack 0: 0x59C
2776	 359	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2777	 35A	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C
2778	 35B	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C
- stack 0: 0xF0
2779	 35D	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x348
2780	 35E	JUMP		 	 
- stack 0: 0x59C
2781	 348	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x59C
2782	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2783	 34A	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C
2784	 34B	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x348000000B800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C
- stack 0: 0xE0
2785	 34D	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x3480000
2786	 34E	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x3480000
- stack 0: 0xFFFF
2787	 351	AND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2788	 352	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1
2789	 354	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
2790	 355	POP		 	 
- stack 0: 0x59C
2791	 356	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2792	 358	ADD		 	 
- stack 0: 0x5A0
2793	 359	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2794	 35A	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xB800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030
2795	 35B	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0xB800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030
- stack 0: 0xF0
2796	 35D	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xB8
2797	 35E	JUMP		 	 
- stack 0: 0x5A0
2798	 B8	JUMPDEST		 ;; __riscvimpl_ORI_3_1_0	  ;; # instr: ori gp,ra,-241(ignore imm)
- stack 0: 0x5A0
2799	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2800	 BA	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xB800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030
2801	 BB	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0xB800F0028B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030
- stack 0: 0xE0
2802	 BD	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xB800F0
2803	 BE	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0xB800F0
- stack 0: 0xFFFF
2804	 C1	AND		 	 
- stack 1: 0x5A0
- stack 0: 0xF0
2805	 C2	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0xF0
- stack 0: 0x1
2806	 C4	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0xF0
2807	 C5	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0xF0
- stack 0: 0x20
2808	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A0
- stack 1: 0xF0
- stack 0: 0xF00FF00F
2809	 C9	OR		 	  ;; # ORI
- stack 1: 0x5A0
- stack 0: 0xF00FF0FF
2810	 CA	PUSH2	0060	 	 
- stack 2: 0x5A0
- stack 1: 0xF00FF0FF
- stack 0: 0x60
2811	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A0
2812	 CE	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2813	 D0	ADD		 	 
- stack 0: 0x5A4
2814	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2815	 D2	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x28B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F0
2816	 D3	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x28B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F0
- stack 0: 0xF0
2817	 D5	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x28B
2818	 D6	JUMP		 	 
- stack 0: 0x5A4
2819	 28B	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5A4
2820	 28C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2821	 28D	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x28B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F0
2822	 28E	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x28B000102AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F0
- stack 0: 0xE0
2823	 290	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x28B0001
2824	 291	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x28B0001
- stack 0: 0xFFFF
2825	 294	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x1
2826	 295	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x1
2827	 297	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x1
2828	 298	PUSH2	0080	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x80
2829	 29B	MLOAD		 	  ;; # read from x4
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x1
2830	 29C	ADD		 	  ;; # ADDI 4
- stack 1: 0x5A4
- stack 0: 0x2
2831	 29D	PUSH2	0080	 	 
- stack 2: 0x5A4
- stack 1: 0x2
- stack 0: 0x80
2832	 2A0	MSTORE		 	  ;; # store to x4
- stack 0: 0x5A4
2833	 2A1	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2834	 2A3	ADD		 	 
- stack 0: 0x5A8
2835	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2836	 2A5	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F000D700F0
2837	 2A6	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x2AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F000D700F0
- stack 0: 0xF0
2838	 2A8	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2AA
2839	 2A9	JUMP		 	 
- stack 0: 0x5A8
2840	 2AA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5A8
2841	 2AB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2842	 2AC	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F000D700F0
2843	 2AD	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x2AA000202C4FFE401CB00FF017300FF00F1000C010B0030035F00F000D700F0
- stack 0: 0xE0
2844	 2AF	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2AA0002
2845	 2B0	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x2AA0002
- stack 0: 0xFFFF
2846	 2B3	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x2
2847	 2B4	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0x1
2848	 2B6	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x2
2849	 2B7	PUSH2	00A0	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0xA0
2850	 2BA	MSTORE		 	  ;; # store to x5
- stack 0: 0x5A8
2851	 2BB	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2852	 2BD	ADD		 	 
- stack 0: 0x5AC
2853	 2BE	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2854	 2BF	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x2C4FFE401CB00FF017300FF00F1000C010B0030035F00F000D700F000F1000D
2855	 2C0	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x2C4FFE401CB00FF017300FF00F1000C010B0030035F00F000D700F000F1000D
- stack 0: 0xF0
2856	 2C2	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2C4
2857	 2C3	JUMP		 	 
- stack 0: 0x5AC
2858	 2C4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5AC
2859	 2C5	PUSH2	0080	 	 
- stack 1: 0x5AC
- stack 0: 0x80
2860	 2C8	MLOAD		 	  ;; # read from x4
- stack 1: 0x5AC
- stack 0: 0x2
2861	 2C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2862	 2CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5AC
- stack 0: 0x2
2863	 2CF	PUSH2	00A0	 	 
- stack 2: 0x5AC
- stack 1: 0x2
- stack 0: 0xA0
2864	 2D2	MLOAD		 	  ;; # read from x5
- stack 2: 0x5AC
- stack 1: 0x2
- stack 0: 0x2
2865	 2D3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5AC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2866	 2D8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5AC
- stack 1: 0x2
- stack 0: 0x2
2867	 2D9	SUB		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2868	 2DA	PUSH2	02E2	 ;; _neq_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x2E2
2869	 2DD	JUMPI		 	 
- stack 0: 0x5AC
2870	 2DE	PUSH2	02FC	 ;; _neq_after_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 1: 0x5AC
- stack 0: 0x2FC
2871	 2E1	JUMP		 	 
- stack 0: 0x5AC
2872	 2FC	JUMPDEST		 ;; _neq_after_7409a2b602c31c326a0cf8fe937545b886c8f866cd1b8ae97d32e2ead77efbc1	 
- stack 0: 0x5AC
2873	 2FD	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2874	 2FF	ADD		 	 
- stack 0: 0x5B0
2875	 300	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2876	 301	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1CB00FF017300FF00F1000C010B0030035F00F000D700F000F1000D02100020
2877	 302	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x1CB00FF017300FF00F1000C010B0030035F00F000D700F000F1000D02100020
- stack 0: 0xF0
2878	 304	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1CB
2879	 305	JUMP		 	 
- stack 0: 0x5B0
2880	 1CB	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x5B0
2881	 1CC	PUSH4	f00ff000	 	 
- stack 1: 0x5B0
- stack 0: 0xF00FF000
2882	 1D1	PUSH2	03A0	 	 
- stack 2: 0x5B0
- stack 1: 0xF00FF000
- stack 0: 0x3A0
2883	 1D4	MSTORE		 	  ;; # store to x29
- stack 0: 0x5B0
2884	 1D5	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2885	 1D7	ADD		 	 
- stack 0: 0x5B4
2886	 1D8	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2887	 1D9	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x17300FF00F1000C010B0030035F00F000D700F000F1000D0210002001920FF0
2888	 1DA	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x17300FF00F1000C010B0030035F00F000D700F000F1000D0210002001920FF0
- stack 0: 0xF0
2889	 1DC	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x173
2890	 1DD	JUMP		 	 
- stack 0: 0x5B4
2891	 173	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-16(ignore imm)
- stack 0: 0x5B4
2892	 174	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2893	 175	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x17300FF00F1000C010B0030035F00F000D700F000F1000D0210002001920FF0
2894	 176	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x17300FF00F1000C010B0030035F00F000D700F000F1000D0210002001920FF0
- stack 0: 0xE0
2895	 178	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x17300FF
2896	 179	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x17300FF
- stack 0: 0xFFFF
2897	 17C	AND		 	 
- stack 1: 0x5B4
- stack 0: 0xFF
2898	 17D	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0xFF
- stack 0: 0x1
2899	 17F	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0xFF
2900	 180	PUSH2	03A0	 	 
- stack 2: 0x5B4
- stack 1: 0xFF
- stack 0: 0x3A0
2901	 183	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B4
- stack 1: 0xFF
- stack 0: 0xF00FF000
2902	 184	ADD		 	  ;; # ADDI 29
- stack 1: 0x5B4
- stack 0: 0xF00FF0FF
2903	 185	PUSH2	03A0	 	 
- stack 2: 0x5B4
- stack 1: 0xF00FF0FF
- stack 0: 0x3A0
2904	 188	MSTORE		 	  ;; # store to x29
- stack 0: 0x5B4
2905	 189	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2906	 18B	ADD		 	 
- stack 0: 0x5B8
2907	 18C	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2908	 18D	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0xF1000C010B0030035F00F000D700F000F1000D0210002001920FF0009900FF
2909	 18E	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0xF1000C010B0030035F00F000D700F000F1000D0210002001920FF0009900FF
- stack 0: 0xF0
2910	 190	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0xF1
2911	 191	JUMP		 	 
- stack 0: 0x5B8
2912	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5B8
2913	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2914	 F3	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0xF1000C010B0030035F00F000D700F000F1000D0210002001920FF0009900FF
2915	 F4	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0xF1000C010B0030035F00F000D700F000F1000D0210002001920FF0009900FF
- stack 0: 0xE0
2916	 F6	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0xF1000C
2917	 F7	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0xF1000C
- stack 0: 0xFFFF
2918	 FA	AND		 	 
- stack 1: 0x5B8
- stack 0: 0xC
2919	 FB	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0xC
- stack 0: 0x1
2920	 FD	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0xC
2921	 FE	PUSH2	0380	 	 
- stack 2: 0x5B8
- stack 1: 0xC
- stack 0: 0x380
2922	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x5B8
2923	 102	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2924	 104	ADD		 	 
- stack 0: 0x5BC
2925	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2926	 106	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x10B0030035F00F000D700F000F1000D0210002001920FF0009900FF037C070F
2927	 107	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x10B0030035F00F000D700F000F1000D0210002001920FF0009900FF037C070F
- stack 0: 0xF0
2928	 109	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x10B
2929	 10A	JUMP		 	 
- stack 0: 0x5BC
2930	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1c8(ignore imm)
- stack 0: 0x5BC
2931	 10C	PUSH2	0060	 	 
- stack 1: 0x5BC
- stack 0: 0x60
2932	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x5BC
- stack 0: 0xF00FF0FF
2933	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0xF00FF0FF
- stack 0: 0xFFFFFFFF
2934	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0xF00FF0FF
2935	 116	PUSH2	03A0	 	 
- stack 2: 0x5BC
- stack 1: 0xF00FF0FF
- stack 0: 0x3A0
2936	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x5BC
- stack 1: 0xF00FF0FF
- stack 0: 0xF00FF0FF
2937	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5BC
- stack 2: 0xF00FF0FF
- stack 1: 0xF00FF0FF
- stack 0: 0xFFFFFFFF
2938	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5BC
- stack 1: 0xF00FF0FF
- stack 0: 0xF00FF0FF
2939	 120	SUB		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2940	 121	PUSH2	0129	 ;; _neq_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x129
2941	 124	JUMPI		 	 
- stack 0: 0x5BC
2942	 125	PUSH2	0143	 ;; _neq_after_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 1: 0x5BC
- stack 0: 0x143
2943	 128	JUMP		 	 
- stack 0: 0x5BC
2944	 143	JUMPDEST		 ;; _neq_after_a4de0f39f0d54097655f2cb9c457dfbaa7498bde59c51184a2113c39bf2e1907	 
- stack 0: 0x5BC
2945	 144	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2946	 146	ADD		 	 
- stack 0: 0x5C0
2947	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2948	 148	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x35F00F000D700F000F1000D0210002001920FF0009900FF037C070F00D70000
2949	 149	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x35F00F000D700F000F1000D0210002001920FF0009900FF037C070F00D70000
- stack 0: 0xF0
2950	 14B	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x35F
2951	 14C	JUMP		 	 
- stack 0: 0x5C0
2952	 35F	JUMPDEST		 ;; __riscvimpl_ORI_1_0_0	  ;; # instr: ori ra,zero,240(ignore imm)
- stack 0: 0x5C0
2953	 360	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2954	 361	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x35F00F000D700F000F1000D0210002001920FF0009900FF037C070F00D70000
2955	 362	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x35F00F000D700F000F1000D0210002001920FF0009900FF037C070F00D70000
- stack 0: 0xE0
2956	 364	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x35F00F0
2957	 365	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x35F00F0
- stack 0: 0xFFFF
2958	 368	AND		 	 
- stack 1: 0x5C0
- stack 0: 0xF0
2959	 369	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xF0
- stack 0: 0x1
2960	 36B	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xF0
2961	 36C	PUSH1	00	 	 
- stack 2: 0x5C0
- stack 1: 0xF0
- stack 0: 0x0
2962	 36E	OR		 	  ;; # ORI
- stack 1: 0x5C0
- stack 0: 0xF0
2963	 36F	PUSH2	0020	 	 
- stack 2: 0x5C0
- stack 1: 0xF0
- stack 0: 0x20
2964	 372	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C0
2965	 373	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2966	 375	ADD		 	 
- stack 0: 0x5C4
2967	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2968	 377	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xD700F000F1000D0210002001920FF0009900FF037C070F00D7000000F1000E
2969	 378	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0xD700F000F1000D0210002001920FF0009900FF037C070F00D7000000F1000E
- stack 0: 0xF0
2970	 37A	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xD7
2971	 37B	JUMP		 	 
- stack 0: 0x5C4
2972	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-241(ignore imm)
- stack 0: 0x5C4
2973	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2974	 D9	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xD700F000F1000D0210002001920FF0009900FF037C070F00D7000000F1000E
2975	 DA	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0xD700F000F1000D0210002001920FF0009900FF037C070F00D7000000F1000E
- stack 0: 0xE0
2976	 DC	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xD700F0
2977	 DD	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0xD700F0
- stack 0: 0xFFFF
2978	 E0	AND		 	 
- stack 1: 0x5C4
- stack 0: 0xF0
2979	 E1	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0xF0
- stack 0: 0x1
2980	 E3	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0xF0
2981	 E4	PUSH2	03A0	 	 
- stack 2: 0x5C4
- stack 1: 0xF0
- stack 0: 0x3A0
2982	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C4
2983	 E8	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2984	 EA	ADD		 	 
- stack 0: 0x5C8
2985	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2986	 EC	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xF1000D0210002001920FF0009900FF037C070F00D7000000F1000E03980008
2987	 ED	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0xF1000D0210002001920FF0009900FF037C070F00D7000000F1000E03980008
- stack 0: 0xF0
2988	 EF	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xF1
2989	 F0	JUMP		 	 
- stack 0: 0x5C8
2990	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5C8
2991	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2992	 F3	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xF1000D0210002001920FF0009900FF037C070F00D7000000F1000E03980008
2993	 F4	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0xF1000D0210002001920FF0009900FF037C070F00D7000000F1000E03980008
- stack 0: 0xE0
2994	 F6	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xF1000D
2995	 F7	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0xF1000D
- stack 0: 0xFFFF
2996	 FA	AND		 	 
- stack 1: 0x5C8
- stack 0: 0xD
2997	 FB	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0xD
- stack 0: 0x1
2998	 FD	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0xD
2999	 FE	PUSH2	0380	 	 
- stack 2: 0x5C8
- stack 1: 0xD
- stack 0: 0x380
3000	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x5C8
3001	 102	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
3002	 104	ADD		 	 
- stack 0: 0x5CC
3003	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
3004	 106	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x210002001920FF0009900FF037C070F00D7000000F1000E0398000803D80018
3005	 107	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x210002001920FF0009900FF037C070F00D7000000F1000E0398000803D80018
- stack 0: 0xF0
3006	 109	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x210
3007	 10A	JUMP		 	 
- stack 0: 0x5CC
3008	 210	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,158(ignore imm)
- stack 0: 0x5CC
3009	 211	PUSH2	0020	 	 
- stack 1: 0x5CC
- stack 0: 0x20
3010	 214	MLOAD		 	  ;; # read from x1
- stack 1: 0x5CC
- stack 0: 0xF0
3011	 215	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5CC
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
3012	 21A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5CC
- stack 0: 0xF0
3013	 21B	PUSH2	03A0	 	 
- stack 2: 0x5CC
- stack 1: 0xF0
- stack 0: 0x3A0
3014	 21E	MLOAD		 	  ;; # read from x29
- stack 2: 0x5CC
- stack 1: 0xF0
- stack 0: 0xF0
3015	 21F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5CC
- stack 2: 0xF0
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
3016	 224	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5CC
- stack 1: 0xF0
- stack 0: 0xF0
3017	 225	SUB		 	 
- stack 1: 0x5CC
- stack 0: 0x0
3018	 226	PUSH2	022E	 ;; _neq_aceb3742d1fe005c1a29649af623d4648847180136fb71e583ada0df0b72fb26	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0x22E
3019	 229	JUMPI		 	 
- stack 0: 0x5CC
3020	 22A	PUSH2	0248	 ;; _neq_after_aceb3742d1fe005c1a29649af623d4648847180136fb71e583ada0df0b72fb26	 
- stack 1: 0x5CC
- stack 0: 0x248
3021	 22D	JUMP		 	 
- stack 0: 0x5CC
3022	 248	JUMPDEST		 ;; _neq_after_aceb3742d1fe005c1a29649af623d4648847180136fb71e583ada0df0b72fb26	 
- stack 0: 0x5CC
3023	 249	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
3024	 24B	ADD		 	 
- stack 0: 0x5D0
3025	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
3026	 24D	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x1920FF0009900FF037C070F00D7000000F1000E0398000803D8001800210000
3027	 24E	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x1920FF0009900FF037C070F00D7000000F1000E0398000803D8001800210000
- stack 0: 0xF0
3028	 250	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x192
3029	 251	JUMP		 	 
- stack 0: 0x5D0
3030	 192	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x5D0
3031	 193	PUSH4	00ff0000	 	 
- stack 1: 0x5D0
- stack 0: 0xFF0000
3032	 198	PUSH2	0020	 	 
- stack 2: 0x5D0
- stack 1: 0xFF0000
- stack 0: 0x20
3033	 19B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D0
3034	 19C	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
3035	 19E	ADD		 	 
- stack 0: 0x5D4
3036	 19F	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3037	 1A0	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x9900FF037C070F00D7000000F1000E0398000803D800180021000000340628
3038	 1A1	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x9900FF037C070F00D7000000F1000E0398000803D800180021000000340628
- stack 0: 0xF0
3039	 1A3	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x99
3040	 1A4	JUMP		 	 
- stack 0: 0x5D4
3041	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x5D4
3042	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
3043	 9B	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x9900FF037C070F00D7000000F1000E0398000803D800180021000000340628
3044	 9C	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x9900FF037C070F00D7000000F1000E0398000803D800180021000000340628
- stack 0: 0xE0
3045	 9E	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x9900FF
3046	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x9900FF
- stack 0: 0xFFFF
3047	 A2	AND		 	 
- stack 1: 0x5D4
- stack 0: 0xFF
3048	 A3	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0xFF
- stack 0: 0x1
3049	 A5	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0xFF
3050	 A6	PUSH2	0020	 	 
- stack 2: 0x5D4
- stack 1: 0xFF
- stack 0: 0x20
3051	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x5D4
- stack 1: 0xFF
- stack 0: 0xFF0000
3052	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x5D4
- stack 0: 0xFF00FF
3053	 AB	PUSH2	0020	 	 
- stack 2: 0x5D4
- stack 1: 0xFF00FF
- stack 0: 0x20
3054	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D4
3055	 AF	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3056	 B1	ADD		 	 
- stack 0: 0x5D8
3057	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3058	 B3	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x37C070F00D7000000F1000E0398000803D80018002100000034062800530042
3059	 B4	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x37C070F00D7000000F1000E0398000803D80018002100000034062800530042
- stack 0: 0xF0
3060	 B6	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x37C
3061	 B7	JUMP		 	 
- stack 0: 0x5D8
3062	 37C	JUMPDEST		 ;; __riscvimpl_ORI_0_1_0	  ;; # instr: ori zero,ra,1807(ignore imm)
- stack 0: 0x5D8
3063	 37D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
3064	 37E	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x37C070F00D7000000F1000E0398000803D80018002100000034062800530042
3065	 37F	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x37C070F00D7000000F1000E0398000803D80018002100000034062800530042
- stack 0: 0xE0
3066	 381	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x37C070F
3067	 382	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x37C070F
- stack 0: 0xFFFF
3068	 385	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x70F
3069	 386	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x70F
- stack 0: 0x1
3070	 388	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x70F
3071	 389	PUSH2	0020	 	 
- stack 2: 0x5D8
- stack 1: 0x70F
- stack 0: 0x20
3072	 38C	MLOAD		 	  ;; # read from x1
- stack 2: 0x5D8
- stack 1: 0x70F
- stack 0: 0xFF00FF
3073	 38D	OR		 	  ;; # ORI
- stack 1: 0x5D8
- stack 0: 0xFF07FF
3074	 38E	POP		 	 
- stack 0: 0x5D8
3075	 38F	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3076	 391	ADD		 	 
- stack 0: 0x5DC
3077	 392	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3078	 393	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0xD7000000F1000E0398000803D8001800210000003406280053004200660000
3079	 394	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0xD7000000F1000E0398000803D8001800210000003406280053004200660000
- stack 0: 0xF0
3080	 396	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0xD7
3081	 397	JUMP		 	 
- stack 0: 0x5DC
3082	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-241(ignore imm)
- stack 0: 0x5DC
3083	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
3084	 D9	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0xD7000000F1000E0398000803D8001800210000003406280053004200660000
3085	 DA	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0xD7000000F1000E0398000803D8001800210000003406280053004200660000
- stack 0: 0xE0
3086	 DC	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0xD70000
3087	 DD	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0xD70000
- stack 0: 0xFFFF
3088	 E0	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
3089	 E1	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x1
3090	 E3	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
3091	 E4	PUSH2	03A0	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x3A0
3092	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x5DC
3093	 E8	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
3094	 EA	ADD		 	 
- stack 0: 0x5E0
3095	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
3096	 EC	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0xF1000E0398000803D800180021000000340628005300420066000004180001
3097	 ED	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0xF1000E0398000803D800180021000000340628005300420066000004180001
- stack 0: 0xF0
3098	 EF	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0xF1
3099	 F0	JUMP		 	 
- stack 0: 0x5E0
3100	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5E0
3101	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
3102	 F3	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0xF1000E0398000803D800180021000000340628005300420066000004180001
3103	 F4	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0xF1000E0398000803D800180021000000340628005300420066000004180001
- stack 0: 0xE0
3104	 F6	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0xF1000E
3105	 F7	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0xF1000E
- stack 0: 0xFFFF
3106	 FA	AND		 	 
- stack 1: 0x5E0
- stack 0: 0xE
3107	 FB	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0xE
- stack 0: 0x1
3108	 FD	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0xE
3109	 FE	PUSH2	0380	 	 
- stack 2: 0x5E0
- stack 1: 0xE
- stack 0: 0x380
3110	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x5E0
3111	 102	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
3112	 104	ADD		 	 
- stack 0: 0x5E4
3113	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3114	 106	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x398000803D80018002100000034062800530042006600000418000100210000
3115	 107	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x398000803D80018002100000034062800530042006600000418000100210000
- stack 0: 0xF0
3116	 109	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x398
3117	 10A	JUMP		 	 
- stack 0: 0x5E4
3118	 398	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x5E4
3119	 399	PUSH1	00	 	 
- stack 1: 0x5E4
- stack 0: 0x0
3120	 39B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3121	 3A0	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E4
- stack 0: 0x0
3122	 3A1	PUSH2	03A0	 	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x3A0
3123	 3A4	MLOAD		 	  ;; # read from x29
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x0
3124	 3A5	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3125	 3AA	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x0
3126	 3AB	SUB		 	 
- stack 1: 0x5E4
- stack 0: 0x0
3127	 3AC	PUSH2	03B4	 ;; _neq_b1af4fa53204d7cd6426a2a26ca10469d8b5d72ee41ebe18a39a932b15e6f7ac	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x3B4
3128	 3AF	JUMPI		 	 
- stack 0: 0x5E4
3129	 3B0	PUSH2	03CE	 ;; _neq_after_b1af4fa53204d7cd6426a2a26ca10469d8b5d72ee41ebe18a39a932b15e6f7ac	 
- stack 1: 0x5E4
- stack 0: 0x3CE
3130	 3B3	JUMP		 	 
- stack 0: 0x5E4
3131	 3CE	JUMPDEST		 ;; _neq_after_b1af4fa53204d7cd6426a2a26ca10469d8b5d72ee41ebe18a39a932b15e6f7ac	 
- stack 0: 0x5E4
3132	 3CF	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3133	 3D1	ADD		 	 
- stack 0: 0x5E8
3134	 3D2	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3135	 3D3	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x3D800180021000000340628005300420066000004180001002100000034062C
3136	 3D4	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x3D800180021000000340628005300420066000004180001002100000034062C
- stack 0: 0xF0
3137	 3D6	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x3D8
3138	 3D7	JUMP		 	 
- stack 0: 0x5E8
3139	 3D8	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x5E8
3140	 3D9	PUSH1	00	 	 
- stack 1: 0x5E8
- stack 0: 0x0
3141	 3DB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3142	 3E0	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E8
- stack 0: 0x0
3143	 3E1	PUSH2	0380	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x380
3144	 3E4	MLOAD		 	  ;; # read from x28
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0xE
3145	 3E5	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E8
- stack 2: 0x0
- stack 1: 0xE
- stack 0: 0xFFFFFFFF
3146	 3EA	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0xE
3147	 3EB	SUB		 	 
- stack 1: 0x5E8
- stack 0: 0xE
3148	 3EC	PUSH2	03F4	 ;; _neq_77ad33ba1f69268e14beef5b5db5d2bbd61a8cfb09562be54b5edb4711922d37	 
- stack 2: 0x5E8
- stack 1: 0xE
- stack 0: 0x3F4
3149	 3EF	JUMPI		 	 
- stack 0: 0x5E8
3150	 3F4	JUMPDEST		 ;; _neq_77ad33ba1f69268e14beef5b5db5d2bbd61a8cfb09562be54b5edb4711922d37	 
- stack 0: 0x5E8
3151	 3F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
3152	 3F6	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x3D800180021000000340628005300420066000004180001002100000034062C
3153	 3F7	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x3D800180021000000340628005300420066000004180001002100000034062C
- stack 0: 0xE0
3154	 3F9	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x3D80018
3155	 3FA	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x3D80018
- stack 0: 0xFFFF
3156	 3FD	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x18
3157	 3FE	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x18
- stack 0: 0x1
3158	 400	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x18
3159	 401	ADD		 	 
- stack 0: 0x600
3160	 402	PUSH4	FFFFFFFF	 	 
- stack 1: 0x600
- stack 0: 0xFFFFFFFF
3161	 407	AND		 	  ;; # mask to 32 bits
- stack 0: 0x600
3162	 408	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3163	 409	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x2100000034062C005300420066000004230000006600000000000000000000
3164	 40A	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x2100000034062C005300420066000004230000006600000000000000000000
- stack 0: 0xF0
3165	 40C	SHR		 	 
- stack 1: 0x600
- stack 0: 0x21
3166	 40D	JUMP		 	 
- stack 0: 0x600
3167	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x600
3168	 22	PUSH4	00000000	 	 
- stack 1: 0x600
- stack 0: 0x0
3169	 27	PUSH2	0160	 	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x160
3170	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x600
3171	 2B	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3172	 2D	ADD		 	 
- stack 0: 0x604
3173	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3174	 2F	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x34062C0053004200660000042300000066000000000000000000006574796D
3175	 30	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x34062C0053004200660000042300000066000000000000000000006574796D
- stack 0: 0xF0
3176	 32	SHR		 	 
- stack 1: 0x604
- stack 0: 0x34
3177	 33	JUMP		 	 
- stack 0: 0x604
3178	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1568(ignore imm)
- stack 0: 0x604
3179	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3180	 36	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x34062C0053004200660000042300000066000000000000000000006574796D
3181	 37	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x34062C0053004200660000042300000066000000000000000000006574796D
- stack 0: 0xE0
3182	 39	SHR		 	 
- stack 1: 0x604
- stack 0: 0x34062C
3183	 3A	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x34062C
- stack 0: 0xFFFF
3184	 3D	AND		 	 
- stack 1: 0x604
- stack 0: 0x62C
3185	 3E	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x62C
- stack 0: 0x1
3186	 40	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x62C
3187	 41	PUSH2	0160	 	 
- stack 2: 0x604
- stack 1: 0x62C
- stack 0: 0x160
3188	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x604
- stack 1: 0x62C
- stack 0: 0x0
3189	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x604
- stack 0: 0x62C
3190	 46	PUSH2	0160	 	 
- stack 2: 0x604
- stack 1: 0x62C
- stack 0: 0x160
3191	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x604
3192	 4A	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3193	 4C	ADD		 	 
- stack 0: 0x608
3194	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3195	 4E	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x53004200660000042300000066000000000000000000006574796D00007473
3196	 4F	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x53004200660000042300000066000000000000000000006574796D00007473
- stack 0: 0xF0
3197	 51	SHR		 	 
- stack 1: 0x608
- stack 0: 0x53
3198	 52	JUMP		 	 
- stack 0: 0x608
3199	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x608
3200	 54	PUSH4	00042000	 	 
- stack 1: 0x608
- stack 0: 0x42000
3201	 59	PUSH2	0140	 	 
- stack 2: 0x608
- stack 1: 0x42000
- stack 0: 0x140
3202	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x608
3203	 5D	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3204	 5F	ADD		 	 
- stack 0: 0x60C
3205	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3206	 61	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x660000042300000066000000000000000000006574796D0000747300525245
3207	 62	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x660000042300000066000000000000000000006574796D0000747300525245
- stack 0: 0xF0
3208	 64	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x66
3209	 65	JUMP		 	 
- stack 0: 0x60C
3210	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x60C
3211	 67	PUSH2	0140	 	 
- stack 1: 0x60C
- stack 0: 0x140
3212	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x60C
- stack 0: 0x42000
3213	 6B	PUSH2	0075	 ;; _ecall_cda3465ea1ff063b925970c8bbaf9f71cd9b308db74db07911fba3564c3dec43	 
- stack 2: 0x60C
- stack 1: 0x42000
- stack 0: 0x75
3214	 6E	JUMPI		 	 
- stack 0: 0x60C
3215	 75	JUMPDEST		 ;; _ecall_cda3465ea1ff063b925970c8bbaf9f71cd9b308db74db07911fba3564c3dec43	 
- stack 0: 0x60C
3216	 76	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3217	 78	PUSH2	0160	 	 
- stack 2: 0x60C
- stack 1: 0x4
- stack 0: 0x160
3218	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x60C
- stack 1: 0x4
- stack 0: 0x62C
3219	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x60C
3220	 7D	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3221	 7F	ADD		 	 
- stack 0: 0x610
3222	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3223	 81	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x42300000066000000000000000000006574796D000074730052524500004B4F
3224	 82	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x42300000066000000000000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
3225	 84	SHR		 	 
- stack 1: 0x610
- stack 0: 0x423
3226	 85	JUMP		 	 
- stack 0: 0x610
3227	 423	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x610
3228	 424	PUSH4	00000000	 	 
- stack 1: 0x610
- stack 0: 0x0
3229	 429	PUSH2	0140	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x140
3230	 42C	MSTORE		 	  ;; # store to x10
- stack 0: 0x610
3231	 42D	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3232	 42F	ADD		 	 
- stack 0: 0x614
3233	 430	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3234	 431	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x66000000000000000000006574796D000074730052524500004B4F00000000
3235	 432	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x66000000000000000000006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
3236	 434	SHR		 	 
- stack 1: 0x614
- stack 0: 0x66
3237	 435	JUMP		 	 
- stack 0: 0x614
3238	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x614
3239	 67	PUSH2	0140	 	 
- stack 1: 0x614
- stack 0: 0x140
3240	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x614
- stack 0: 0x0
3241	 6B	PUSH2	0075	 ;; _ecall_cda3465ea1ff063b925970c8bbaf9f71cd9b308db74db07911fba3564c3dec43	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x75
3242	 6E	JUMPI		 	 
- stack 0: 0x614
3243	 6F	PUSH1	20	 	 
- stack 1: 0x614
- stack 0: 0x20
3244	 71	PUSH2	0160	 	 
- stack 2: 0x614
- stack 1: 0x20
- stack 0: 0x160
3245	 74	RETURN		 	 
Final bytecode length; 1639
Returned: 000000000000000000000000000000000000000000000000000000000000062c
gasUsed : 11745
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424
** HOT: 428 - range: 428,42c,430,434,438,43c,440
** HOT: 444 - range: 444,448,44c,450,454,458,45c
** HOT: 460 - range: 460,464,468,46c,470,474,478
** HOT: 47c - range: 47c,480,484,488,48c,490,494
** HOT: 498 - range: 498,49c,4a0,4a4,4a8,4ac,4b0,4b4
** HOT: 49c - range: 49c,4a0,4a4,4a8,4ac,4b0,4b4
** HOT: 4b8 - range: 4b8,4bc,4c0,4c4
** HOT: 4c8 - range: 4c8,4cc,4d0,4d4,4d8,4dc,4e0,4e4,4e8
** HOT: 4cc - range: 4cc,4d0,4d4,4d8,4dc,4e0,4e4,4e8
** HOT: 4ec - range: 4ec,4f0,4f4,4f8
** HOT: 4fc - range: 4fc,500,504,508,50c,510,514,518,51c,520
** HOT: 500 - range: 500,504,508,50c,510,514,518,51c,520
** HOT: 524 - range: 524,528,52c,530
** HOT: 534 - range: 534,538,53c,540,544,548,54c
** HOT: 538 - range: 538,53c,540,544,548,54c
** HOT: 550 - range: 550,554,558,55c
** HOT: 560 - range: 560,564,568,56c,570,574,578,57c
** HOT: 564 - range: 564,568,56c,570,574,578,57c
** HOT: 580 - range: 580,584,588
** HOT: 58c - range: 58c,590,594,598,59c,5a0,5a4,5a8,5ac
** HOT: 590 - range: 590,594,598,59c,5a0,5a4,5a8,5ac
** HOT: 5b0 - range: 5b0,5b4,5b8,5bc
** HOT: 5c0 - range: 5c0,5c4,5c8,5cc
** HOT: 5d0 - range: 5d0,5d4,5d8,5dc,5e0,5e4
