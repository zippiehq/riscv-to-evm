Running in EVM:
0	 0	PUSH4	0130	 	 
- stack 0: 0x130
1	 5	PUSH2	01CB	 ;; _rambegin	 
- stack 1: 0x130
- stack 0: 0x1CB
2	 8	PUSH1	01	 	 
- stack 2: 0x130
- stack 1: 0x1CB
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x130
- stack 0: 0x1CC
4	 B	PUSH2	0400	 	 
- stack 2: 0x130
- stack 1: 0x1CC
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100000034052000530042006600000086001400A0000600BA000000D10002
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100000034052000530042006600000086001400A0000600BA000000D10002
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34052000530042006600000086001400A0000600BA000000D1000200EB0002
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34052000530042006600000086001400A0000600BA000000D1000200EB0002
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1312(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34052000530042006600000086001400A0000600BA000000D1000200EB0002
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34052000530042006600000086001400A0000600BA000000D1000200EB0002
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340520
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340520
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x520
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x520
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x520
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x520
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x520
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x520
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x520
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086001400A0000600BA000000D1000200EB0002010500C8
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086001400A0000600BA000000D1000200EB0002010500C8
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086001400A0000600BA000000D1000200EB0002010500C80086FFEC
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086001400A0000600BA000000D1000200EB0002010500C80086FFEC
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_6ef17c3aa161d5f27de7c422edfea6081cb1c6f69fcc7d1e66e1777130a95270	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_6ef17c3aa161d5f27de7c422edfea6081cb1c6f69fcc7d1e66e1777130a95270	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x520
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86001400A0000600BA000000D1000200EB0002010500C80086FFEC00A00006
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86001400A0000600BA000000D1000200EB0002010500C80086FFEC00A00006
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,20(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86001400A0000600BA000000D1000200EB0002010500C80086FFEC00A00006
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86001400A0000600BA000000D1000200EB0002010500C80086FFEC00A00006
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860014
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860014
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x14
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x14
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x14
84	 93	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x14
- stack 0: 0x20
85	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000600BA000000D1000200EB0002010500C80086FFEC00A0000600BA0000
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000600BA000000D1000200EB0002010500C80086FFEC00A0000600BA0000
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,6(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000600BA000000D1000200EB0002010500C80086FFEC00A0000600BA0000
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000600BA000000D1000200EB0002010500C80086FFEC00A0000600BA0000
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00006
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00006
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x6
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x6
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x6
102	 AD	PUSH2	0040	 	 
- stack 2: 0x414
- stack 1: 0x6
- stack 0: 0x40
103	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x414
104	 B1	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
105	 B3	ADD		 	 
- stack 0: 0x418
106	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
107	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000000D1000200EB0002010500C80086FFEC00A0000600BA000000D1FFFE
108	 B6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBA000000D1000200EB0002010500C80086FFEC00A0000600BA000000D1FFFE
- stack 0: 0xF0
109	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA
110	 B9	JUMP		 	 
- stack 0: 0x418
111	 BA	JUMPDEST		 ;; __riscvimpl_OR_3_1_2	  ;; # instr: or gp,ra,sp(ignore imm)
- stack 0: 0x418
112	 BB	PUSH2	0040	 	 
- stack 1: 0x418
- stack 0: 0x40
113	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x418
- stack 0: 0x6
114	 BF	PUSH2	0020	 	 
- stack 2: 0x418
- stack 1: 0x6
- stack 0: 0x20
115	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x418
- stack 1: 0x6
- stack 0: 0x14
116	 C3	OR		 	  ;; # OR
- stack 1: 0x418
- stack 0: 0x16
117	 C4	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0x16
- stack 0: 0x60
118	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
119	 C8	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
120	 CA	ADD		 	 
- stack 0: 0x41C
121	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
122	 CC	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD1000200EB0002010500C80086FFEC00A0000600BA000000D1FFFE00EB0003
123	 CD	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD1000200EB0002010500C80086FFEC00A0000600BA000000D1FFFE00EB0003
- stack 0: 0xF0
124	 CF	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD1
125	 D0	JUMP		 	 
- stack 0: 0x41C
126	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,2(ignore imm)
- stack 0: 0x41C
127	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
128	 D3	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD1000200EB0002010500C80086FFEC00A0000600BA000000D1FFFE00EB0003
129	 D4	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xD1000200EB0002010500C80086FFEC00A0000600BA000000D1FFFE00EB0003
- stack 0: 0xE0
130	 D6	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD10002
131	 D7	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xD10002
- stack 0: 0xFFFF
132	 DA	AND		 	 
- stack 1: 0x41C
- stack 0: 0x2
133	 DB	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0x2
- stack 0: 0x1
134	 DD	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x2
135	 DE	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0x2
- stack 0: 0x3A0
136	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
137	 E2	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
138	 E4	ADD		 	 
- stack 0: 0x420
139	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
140	 E6	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xEB0002010500C80086FFEC00A0000600BA000000D1FFFE00EB0003010500B0
141	 E7	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xEB0002010500C80086FFEC00A0000600BA000000D1FFFE00EB0003010500B0
- stack 0: 0xF0
142	 E9	SHR		 	 
- stack 1: 0x420
- stack 0: 0xEB
143	 EA	JUMP		 	 
- stack 0: 0x420
144	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x420
145	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
146	 ED	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xEB0002010500C80086FFEC00A0000600BA000000D1FFFE00EB0003010500B0
147	 EE	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0xEB0002010500C80086FFEC00A0000600BA000000D1FFFE00EB0003010500B0
- stack 0: 0xE0
148	 F0	SHR		 	 
- stack 1: 0x420
- stack 0: 0xEB0002
149	 F1	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0xEB0002
- stack 0: 0xFFFF
150	 F4	AND		 	 
- stack 1: 0x420
- stack 0: 0x2
151	 F5	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x1
152	 F7	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0x2
153	 F8	PUSH2	0380	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x380
154	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x420
155	 FC	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
156	 FE	ADD		 	 
- stack 0: 0x424
157	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
158	 100	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x10500C80086FFEC00A0000600BA000000D1FFFE00EB0003010500B000860014
159	 101	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x10500C80086FFEC00A0000600BA000000D1FFFE00EB0003010500B000860014
- stack 0: 0xF0
160	 103	SHR		 	 
- stack 1: 0x424
- stack 0: 0x105
161	 104	JUMP		 	 
- stack 0: 0x424
162	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,c8(ignore imm)
- stack 0: 0x424
163	 106	PUSH2	0060	 	 
- stack 1: 0x424
- stack 0: 0x60
164	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x424
- stack 0: 0x16
165	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0x16
- stack 0: 0xFFFFFFFF
166	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x16
167	 110	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0x16
- stack 0: 0x3A0
168	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x424
- stack 1: 0x16
- stack 0: 0x2
169	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0x16
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
170	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0x16
- stack 0: 0x2
171	 11A	SUB		 	 
- stack 1: 0x424
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
172	 11B	PUSH2	0123	 ;; _neq_19f68cabc5c988b7b9c63d8c75c9741671870423237cdca9ef82c3b0f64b79f6	 
- stack 2: 0x424
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
- stack 0: 0x123
173	 11E	JUMPI		 	 
- stack 0: 0x424
174	 123	JUMPDEST		 ;; _neq_19f68cabc5c988b7b9c63d8c75c9741671870423237cdca9ef82c3b0f64b79f6	 
- stack 0: 0x424
175	 124	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
176	 125	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x10500C80086FFEC00A0000600BA000000D1FFFE00EB0003010500B000860014
177	 126	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x10500C80086FFEC00A0000600BA000000D1FFFE00EB0003010500B000860014
- stack 0: 0xE0
178	 128	SHR		 	 
- stack 1: 0x424
- stack 0: 0x10500C8
179	 129	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x10500C8
- stack 0: 0xFFFF
180	 12C	AND		 	 
- stack 1: 0x424
- stack 0: 0xC8
181	 12D	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0xC8
- stack 0: 0x1
182	 12F	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0xC8
183	 130	ADD		 	 
- stack 0: 0x4EC
184	 131	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFF
185	 136	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4EC
186	 137	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
187	 138	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x21000000340528005300420066000001AD0001002100000034052C00530042
188	 139	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x21000000340528005300420066000001AD0001002100000034052C00530042
- stack 0: 0xF0
189	 13B	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x21
190	 13C	JUMP		 	 
- stack 0: 0x4EC
191	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x4EC
192	 22	PUSH4	00000000	 	 
- stack 1: 0x4EC
- stack 0: 0x0
193	 27	PUSH2	0160	 	 
- stack 2: 0x4EC
- stack 1: 0x0
- stack 0: 0x160
194	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x4EC
195	 2B	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
196	 2D	ADD		 	 
- stack 0: 0x4F0
197	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
198	 2F	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x340528005300420066000001AD0001002100000034052C0053004200660000
199	 30	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x340528005300420066000001AD0001002100000034052C0053004200660000
- stack 0: 0xF0
200	 32	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x34
201	 33	JUMP		 	 
- stack 0: 0x4F0
202	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1312(ignore imm)
- stack 0: 0x4F0
203	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F0
- stack 0: 0x4F0
204	 36	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x340528005300420066000001AD0001002100000034052C0053004200660000
205	 37	PUSH1	E0	 	 
- stack 2: 0x4F0
- stack 1: 0x340528005300420066000001AD0001002100000034052C0053004200660000
- stack 0: 0xE0
206	 39	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x340528
207	 3A	PUSH2	FFFF	 	 
- stack 2: 0x4F0
- stack 1: 0x340528
- stack 0: 0xFFFF
208	 3D	AND		 	 
- stack 1: 0x4F0
- stack 0: 0x528
209	 3E	PUSH1	01	 	 
- stack 2: 0x4F0
- stack 1: 0x528
- stack 0: 0x1
210	 40	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0x528
211	 41	PUSH2	0160	 	 
- stack 2: 0x4F0
- stack 1: 0x528
- stack 0: 0x160
212	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x4F0
- stack 1: 0x528
- stack 0: 0x0
213	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x4F0
- stack 0: 0x528
214	 46	PUSH2	0160	 	 
- stack 2: 0x4F0
- stack 1: 0x528
- stack 0: 0x160
215	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x4F0
216	 4A	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
217	 4C	ADD		 	 
- stack 0: 0x4F4
218	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
219	 4E	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x5300420066000001AD0001002100000034052C005300420066000001B80000
220	 4F	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x5300420066000001AD0001002100000034052C005300420066000001B80000
- stack 0: 0xF0
221	 51	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x53
222	 52	JUMP		 	 
- stack 0: 0x4F4
223	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x4F4
224	 54	PUSH4	00042000	 	 
- stack 1: 0x4F4
- stack 0: 0x42000
225	 59	PUSH2	0140	 	 
- stack 2: 0x4F4
- stack 1: 0x42000
- stack 0: 0x140
226	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x4F4
227	 5D	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
228	 5F	ADD		 	 
- stack 0: 0x4F8
229	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
230	 61	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x66000001AD0001002100000034052C005300420066000001B8000000660000
231	 62	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x66000001AD0001002100000034052C005300420066000001B8000000660000
- stack 0: 0xF0
232	 64	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x66
233	 65	JUMP		 	 
- stack 0: 0x4F8
234	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x4F8
235	 67	PUSH2	0140	 	 
- stack 1: 0x4F8
- stack 0: 0x140
236	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x4F8
- stack 0: 0x42000
237	 6B	PUSH2	0075	 ;; _ecall_6ef17c3aa161d5f27de7c422edfea6081cb1c6f69fcc7d1e66e1777130a95270	 
- stack 2: 0x4F8
- stack 1: 0x42000
- stack 0: 0x75
238	 6E	JUMPI		 	 
- stack 0: 0x4F8
239	 75	JUMPDEST		 ;; _ecall_6ef17c3aa161d5f27de7c422edfea6081cb1c6f69fcc7d1e66e1777130a95270	 
- stack 0: 0x4F8
240	 76	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
241	 78	PUSH2	0160	 	 
- stack 2: 0x4F8
- stack 1: 0x4
- stack 0: 0x160
242	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x4F8
- stack 1: 0x4
- stack 0: 0x528
243	 7C	LOG0		 	 
*** PRINT: ERR
- stack 0: 0x4F8
244	 7D	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
245	 7F	ADD		 	 
- stack 0: 0x4FC
246	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
247	 81	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1AD0001002100000034052C005300420066000001B800000066000000000000
248	 82	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x1AD0001002100000034052C005300420066000001B800000066000000000000
- stack 0: 0xF0
249	 84	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1AD
250	 85	JUMP		 	 
- stack 0: 0x4FC
251	 1AD	JUMPDEST		 ;; __riscvimpl_EBREAK_0_0_0	  ;; # instr: ebreak(ignore imm)
- stack 0: 0x4FC
252	 1AE	INVALID		 	  ;; # EBREAK
Error: {"error":"invalid opcode","errorType":"VmError"}
    at invokeRiscv (/root/risc-to-evm/v2.ts:1371:11)
