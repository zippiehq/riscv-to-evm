Running in EVM:
0	 0	PUSH4	044C	 	 
- stack 0: 0x44C
1	 5	PUSH2	04D0	 ;; _rambegin	 
- stack 1: 0x44C
- stack 0: 0x4D0
2	 8	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0x4D0
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x44C
- stack 0: 0x4D1
4	 B	PUSH2	0400	 	 
- stack 2: 0x44C
- stack 1: 0x4D1
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100010034F8300053004200660000008600000095043000B4FFAA00CE0000
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100010034F8300053004200660000008600000095043000B4FFAA00CE0000
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00001000	 	 
- stack 1: 0x400
- stack 0: 0x1000
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x1000
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F8300053004200660000008600000095043000B4FFAA00CE000000F70000
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34F8300053004200660000008600000095043000B4FFAA00CE000000F70000
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-2000(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F8300053004200660000008600000095043000B4FFAA00CE000000F70000
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34F8300053004200660000008600000095043000B4FFAA00CE000000F70000
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34F830
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x34F830
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0xF830
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0xF830
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF830
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF830
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF830
- stack 0: 0x1000
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x830
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x830
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x53004200660000008600000095043000B4FFAA00CE000000F70000012CFFAA
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x53004200660000008600000095043000B4FFAA00CE000000F70000012CFFAA
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x660000008600000095043000B4FFAA00CE000000F70000012CFFAA01460002
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x660000008600000095043000B4FFAA00CE000000F70000012CFFAA01460002
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_37e65f6c5aaa5193c30620baad50caf3f0dc7c8b2a79fa5373398d2af03cdfee	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_37e65f6c5aaa5193c30620baad50caf3f0dc7c8b2a79fa5373398d2af03cdfee	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x830
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x8600000095043000B4FFAA00CE000000F70000012CFFAA01460002016003D8
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x8600000095043000B4FFAA00CE000000F70000012CFFAA01460002016003D8
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	 
- stack 1: 0x410
- stack 0: 0x410
77	 88	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x410
- stack 0: 0x20
78	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 8C	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 8E	ADD		 	 
- stack 0: 0x414
81	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 90	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x95043000B4FFAA00CE000000F70000012CFFAA01460002016003D800860000
83	 91	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x95043000B4FFAA00CE000000F70000012CFFAA01460002016003D800860000
- stack 0: 0xF0
84	 93	SHR		 	 
- stack 1: 0x414
- stack 0: 0x95
85	 94	JUMP		 	 
- stack 0: 0x414
86	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1072(ignore imm)
- stack 0: 0x414
87	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 97	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x95043000B4FFAA00CE000000F70000012CFFAA01460002016003D800860000
89	 98	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x95043000B4FFAA00CE000000F70000012CFFAA01460002016003D800860000
- stack 0: 0xE0
90	 9A	SHR		 	 
- stack 1: 0x414
- stack 0: 0x950430
91	 9B	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x950430
- stack 0: 0xFFFF
92	 9E	AND		 	 
- stack 1: 0x414
- stack 0: 0x430
93	 9F	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x430
- stack 0: 0x1
94	 A1	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x430
95	 A2	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x430
- stack 0: 0x20
96	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0x430
- stack 0: 0x410
97	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x414
- stack 0: 0x840
98	 A7	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x840
- stack 0: 0x20
99	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
100	 AB	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
101	 AD	ADD		 	 
- stack 0: 0x418
102	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
103	 AF	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB4FFAA00CE000000F70000012CFFAA01460002016003D80086000000950410
104	 B0	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB4FFAA00CE000000F70000012CFFAA01460002016003D80086000000950410
- stack 0: 0xF0
105	 B2	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB4
106	 B3	JUMP		 	 
- stack 0: 0x418
107	 B4	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,-86(ignore imm)
- stack 0: 0x418
108	 B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
109	 B6	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB4FFAA00CE000000F70000012CFFAA01460002016003D80086000000950410
110	 B7	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xB4FFAA00CE000000F70000012CFFAA01460002016003D80086000000950410
- stack 0: 0xE0
111	 B9	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB4FFAA
112	 BA	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xB4FFAA
- stack 0: 0xFFFF
113	 BD	AND		 	 
- stack 1: 0x418
- stack 0: 0xFFAA
114	 BE	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0xFFAA
- stack 0: 0x1
115	 C0	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
116	 C1	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x40
117	 C4	MSTORE		 	  ;; # store to x2
- stack 0: 0x418
118	 C5	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
119	 C7	ADD		 	 
- stack 0: 0x41C
120	 C8	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
121	 C9	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xCE000000F70000012CFFAA01460002016003D8008600000095041000B40000
122	 CA	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xCE000000F70000012CFFAA01460002016003D8008600000095041000B40000
- stack 0: 0xF0
123	 CC	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xCE
124	 CD	JUMP		 	 
- stack 0: 0x41C
125	 CE	JUMPDEST		 ;; __riscvimpl_SB_0_1_2	  ;; # instr: sb sp,0(ra)(ignore imm)
- stack 0: 0x41C
126	 CF	PUSH2	0040	 	 
- stack 1: 0x41C
- stack 0: 0x40
127	 D2	MLOAD		 	  ;; # read from x2
- stack 1: 0x41C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
128	 D3	PUSH2	0020	 	 
- stack 2: 0x41C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x20
129	 D6	MLOAD		 	  ;; # read from x1
- stack 2: 0x41C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x840
130	 D7	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x41C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 1: 0x840
- stack 0: 0x41C
131	 D8	MLOAD		 	 
- stack 3: 0x41C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 1: 0x840
- stack 0: 0xCE000000F70000012CFFAA01460002016003D8008600000095041000B40000
132	 D9	PUSH1	E0	 	 
- stack 4: 0x41C
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 2: 0x840
- stack 1: 0xCE000000F70000012CFFAA01460002016003D8008600000095041000B40000
- stack 0: 0xE0
133	 DB	SHR		 	 
- stack 3: 0x41C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 1: 0x840
- stack 0: 0xCE0000
134	 DC	PUSH2	FFFF	 	 
- stack 4: 0x41C
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 2: 0x840
- stack 1: 0xCE0000
- stack 0: 0xFFFF
135	 DF	AND		 	 
- stack 3: 0x41C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 1: 0x840
- stack 0: 0x0
136	 E0	PUSH1	01	 	 
- stack 4: 0x41C
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x1
137	 E2	SIGNEXTEND		 	 
- stack 3: 0x41C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 1: 0x840
- stack 0: 0x0
138	 E3	ADD		 	 
- stack 2: 0x41C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x840
139	 E4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x41C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
140	 E9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x41C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x840
141	 EA	PUSH1	03	 	 
- stack 3: 0x41C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 1: 0x840
- stack 0: 0x3
142	 EC	XOR		 	 
- stack 2: 0x41C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x843
143	 ED	MSTORE8		 	 
- stack 0: 0x41C
144	 EE	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
145	 F0	ADD		 	 
- stack 0: 0x420
146	 F1	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
147	 F2	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF70000012CFFAA01460002016003D8008600000095041000B4000000CE0001
148	 F3	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xF70000012CFFAA01460002016003D8008600000095041000B4000000CE0001
- stack 0: 0xF0
149	 F5	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF7
150	 F6	JUMP		 	 
- stack 0: 0x420
151	 F7	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x420
152	 F8	PUSH2	0020	 	 
- stack 1: 0x420
- stack 0: 0x20
153	 FB	MLOAD		 	  ;; # read from x1
- stack 1: 0x420
- stack 0: 0x840
154	 FC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x420
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
155	 101	AND		 	  ;; # mask to 32 bits
- stack 1: 0x420
- stack 0: 0x840
156	 102	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x420
- stack 1: 0x840
- stack 0: 0x420
157	 103	MLOAD		 	 
- stack 2: 0x420
- stack 1: 0x840
- stack 0: 0xF70000012CFFAA01460002016003D8008600000095041000B4000000CE0001
158	 104	PUSH1	E0	 	 
- stack 3: 0x420
- stack 2: 0x840
- stack 1: 0xF70000012CFFAA01460002016003D8008600000095041000B4000000CE0001
- stack 0: 0xE0
159	 106	SHR		 	 
- stack 2: 0x420
- stack 1: 0x840
- stack 0: 0xF70000
160	 107	PUSH2	FFFF	 	 
- stack 3: 0x420
- stack 2: 0x840
- stack 1: 0xF70000
- stack 0: 0xFFFF
161	 10A	AND		 	 
- stack 2: 0x420
- stack 1: 0x840
- stack 0: 0x0
162	 10B	PUSH1	01	 	 
- stack 3: 0x420
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x1
163	 10D	SIGNEXTEND		 	 
- stack 2: 0x420
- stack 1: 0x840
- stack 0: 0x0
164	 10E	ADD		 	 
- stack 1: 0x420
- stack 0: 0x840
165	 10F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x420
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
166	 114	AND		 	  ;; # mask to 32 bits
- stack 1: 0x420
- stack 0: 0x840
167	 115	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x420
- stack 1: 0x840
- stack 0: 0x3
168	 117	XOR		 	 
- stack 1: 0x420
- stack 0: 0x843
169	 118	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xAAEFEFEFEF0000EFEF0000000000000000000000000000000000000000000000
170	 119	PUSH1	F8	 	 
- stack 2: 0x420
- stack 1: 0xAAEFEFEFEF0000EFEF0000000000000000000000000000000000000000000000
- stack 0: 0xF8
171	 11B	SHR		 	 
- stack 1: 0x420
- stack 0: 0xAA
172	 11C	PUSH1	00	 	 
- stack 2: 0x420
- stack 1: 0xAA
- stack 0: 0x0
173	 11E	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
174	 11F	PUSH2	0060	 	 
- stack 2: 0x420
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x60
175	 122	MSTORE		 	  ;; # store to x3
- stack 0: 0x420
176	 123	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
177	 125	ADD		 	 
- stack 0: 0x424
178	 126	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
179	 127	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x12CFFAA01460002016003D8008600000095041000B4000000CE000100F70001
180	 128	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x12CFFAA01460002016003D8008600000095041000B4000000CE000100F70001
- stack 0: 0xF0
181	 12A	SHR		 	 
- stack 1: 0x424
- stack 0: 0x12C
182	 12B	JUMP		 	 
- stack 0: 0x424
183	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x424
184	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
185	 12E	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x12CFFAA01460002016003D8008600000095041000B4000000CE000100F70001
186	 12F	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x12CFFAA01460002016003D8008600000095041000B4000000CE000100F70001
- stack 0: 0xE0
187	 131	SHR		 	 
- stack 1: 0x424
- stack 0: 0x12CFFAA
188	 132	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x12CFFAA
- stack 0: 0xFFFF
189	 135	AND		 	 
- stack 1: 0x424
- stack 0: 0xFFAA
190	 136	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0xFFAA
- stack 0: 0x1
191	 138	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
192	 139	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x3A0
193	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x424
194	 13D	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
195	 13F	ADD		 	 
- stack 0: 0x428
196	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
197	 141	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x1460002016003D8008600000095041000B4000000CE000100F70001012C0000
198	 142	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x1460002016003D8008600000095041000B4000000CE000100F70001012C0000
- stack 0: 0xF0
199	 144	SHR		 	 
- stack 1: 0x428
- stack 0: 0x146
200	 145	JUMP		 	 
- stack 0: 0x428
201	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x428
202	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
203	 148	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x1460002016003D8008600000095041000B4000000CE000100F70001012C0000
204	 149	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0x1460002016003D8008600000095041000B4000000CE000100F70001012C0000
- stack 0: 0xE0
205	 14B	SHR		 	 
- stack 1: 0x428
- stack 0: 0x1460002
206	 14C	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0x1460002
- stack 0: 0xFFFF
207	 14F	AND		 	 
- stack 1: 0x428
- stack 0: 0x2
208	 150	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0x2
- stack 0: 0x1
209	 152	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0x2
210	 153	PUSH2	0380	 	 
- stack 2: 0x428
- stack 1: 0x2
- stack 0: 0x380
211	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x428
212	 157	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
213	 159	ADD		 	 
- stack 0: 0x42C
214	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
215	 15B	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x16003D8008600000095041000B4000000CE000100F70001012C000001460003
216	 15C	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x16003D8008600000095041000B4000000CE000100F70001012C000001460003
- stack 0: 0xF0
217	 15E	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x160
218	 15F	JUMP		 	 
- stack 0: 0x42C
219	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x42C
220	 161	PUSH2	0060	 	 
- stack 1: 0x42C
- stack 0: 0x60
221	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x42C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
222	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x42C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0xFFFFFFFF
223	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x42C
- stack 0: 0xFFFFFFAA
224	 16B	PUSH2	03A0	 	 
- stack 2: 0x42C
- stack 1: 0xFFFFFFAA
- stack 0: 0x3A0
225	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x42C
- stack 1: 0xFFFFFFAA
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
226	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x42C
- stack 2: 0xFFFFFFAA
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0xFFFFFFFF
227	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x42C
- stack 1: 0xFFFFFFAA
- stack 0: 0xFFFFFFAA
228	 175	SUB		 	 
- stack 1: 0x42C
- stack 0: 0x0
229	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x42C
- stack 1: 0x0
- stack 0: 0x17E
230	 179	JUMPI		 	 
- stack 0: 0x42C
231	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x42C
- stack 0: 0x198
232	 17D	JUMP		 	 
- stack 0: 0x42C
233	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x42C
234	 199	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
235	 19B	ADD		 	 
- stack 0: 0x430
236	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
237	 19D	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x8600000095041000B4000000CE000100F70001012C000001460003016003B8
238	 19E	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x8600000095041000B4000000CE000100F70001012C000001460003016003B8
- stack 0: 0xF0
239	 1A0	SHR		 	 
- stack 1: 0x430
- stack 0: 0x86
240	 1A1	JUMP		 	 
- stack 0: 0x430
241	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x430
242	 87	DUP1		 	 
- stack 1: 0x430
- stack 0: 0x430
243	 88	PUSH2	0020	 	 
- stack 2: 0x430
- stack 1: 0x430
- stack 0: 0x20
244	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x430
245	 8C	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
246	 8E	ADD		 	 
- stack 0: 0x434
247	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
248	 90	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x95041000B4000000CE000100F70001012C000001460003016003B800860000
249	 91	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0x95041000B4000000CE000100F70001012C000001460003016003B800860000
- stack 0: 0xF0
250	 93	SHR		 	 
- stack 1: 0x434
- stack 0: 0x95
251	 94	JUMP		 	 
- stack 0: 0x434
252	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1072(ignore imm)
- stack 0: 0x434
253	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
254	 97	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x95041000B4000000CE000100F70001012C000001460003016003B800860000
255	 98	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0x95041000B4000000CE000100F70001012C000001460003016003B800860000
- stack 0: 0xE0
256	 9A	SHR		 	 
- stack 1: 0x434
- stack 0: 0x950410
257	 9B	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0x950410
- stack 0: 0xFFFF
258	 9E	AND		 	 
- stack 1: 0x434
- stack 0: 0x410
259	 9F	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0x410
- stack 0: 0x1
260	 A1	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0x410
261	 A2	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0x410
- stack 0: 0x20
262	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x434
- stack 1: 0x410
- stack 0: 0x430
263	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x434
- stack 0: 0x840
264	 A7	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0x840
- stack 0: 0x20
265	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x434
266	 AB	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
267	 AD	ADD		 	 
- stack 0: 0x438
268	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
269	 AF	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xB4000000CE000100F70001012C000001460003016003B800860000009503F0
270	 B0	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xB4000000CE000100F70001012C000001460003016003B800860000009503F0
- stack 0: 0xF0
271	 B2	SHR		 	 
- stack 1: 0x438
- stack 0: 0xB4
272	 B3	JUMP		 	 
- stack 0: 0x438
273	 B4	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,-86(ignore imm)
- stack 0: 0x438
274	 B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
275	 B6	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xB4000000CE000100F70001012C000001460003016003B800860000009503F0
276	 B7	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xB4000000CE000100F70001012C000001460003016003B800860000009503F0
- stack 0: 0xE0
277	 B9	SHR		 	 
- stack 1: 0x438
- stack 0: 0xB40000
278	 BA	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xB40000
- stack 0: 0xFFFF
279	 BD	AND		 	 
- stack 1: 0x438
- stack 0: 0x0
280	 BE	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x0
- stack 0: 0x1
281	 C0	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x0
282	 C1	PUSH2	0040	 	 
- stack 2: 0x438
- stack 1: 0x0
- stack 0: 0x40
283	 C4	MSTORE		 	  ;; # store to x2
- stack 0: 0x438
284	 C5	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
285	 C7	ADD		 	 
- stack 0: 0x43C
286	 C8	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
287	 C9	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xCE000100F70001012C000001460003016003B800860000009503F001A2FFFF
288	 CA	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xCE000100F70001012C000001460003016003B800860000009503F001A2FFFF
- stack 0: 0xF0
289	 CC	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xCE
290	 CD	JUMP		 	 
- stack 0: 0x43C
291	 CE	JUMPDEST		 ;; __riscvimpl_SB_0_1_2	  ;; # instr: sb sp,0(ra)(ignore imm)
- stack 0: 0x43C
292	 CF	PUSH2	0040	 	 
- stack 1: 0x43C
- stack 0: 0x40
293	 D2	MLOAD		 	  ;; # read from x2
- stack 1: 0x43C
- stack 0: 0x0
294	 D3	PUSH2	0020	 	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x20
295	 D6	MLOAD		 	  ;; # read from x1
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x840
296	 D7	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x43C
- stack 2: 0x0
- stack 1: 0x840
- stack 0: 0x43C
297	 D8	MLOAD		 	 
- stack 3: 0x43C
- stack 2: 0x0
- stack 1: 0x840
- stack 0: 0xCE000100F70001012C000001460003016003B800860000009503F001A2FFFF
298	 D9	PUSH1	E0	 	 
- stack 4: 0x43C
- stack 3: 0x0
- stack 2: 0x840
- stack 1: 0xCE000100F70001012C000001460003016003B800860000009503F001A2FFFF
- stack 0: 0xE0
299	 DB	SHR		 	 
- stack 3: 0x43C
- stack 2: 0x0
- stack 1: 0x840
- stack 0: 0xCE0001
300	 DC	PUSH2	FFFF	 	 
- stack 4: 0x43C
- stack 3: 0x0
- stack 2: 0x840
- stack 1: 0xCE0001
- stack 0: 0xFFFF
301	 DF	AND		 	 
- stack 3: 0x43C
- stack 2: 0x0
- stack 1: 0x840
- stack 0: 0x1
302	 E0	PUSH1	01	 	 
- stack 4: 0x43C
- stack 3: 0x0
- stack 2: 0x840
- stack 1: 0x1
- stack 0: 0x1
303	 E2	SIGNEXTEND		 	 
- stack 3: 0x43C
- stack 2: 0x0
- stack 1: 0x840
- stack 0: 0x1
304	 E3	ADD		 	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x841
305	 E4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0x0
- stack 1: 0x841
- stack 0: 0xFFFFFFFF
306	 E9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x841
307	 EA	PUSH1	03	 	 
- stack 3: 0x43C
- stack 2: 0x0
- stack 1: 0x841
- stack 0: 0x3
308	 EC	XOR		 	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x842
309	 ED	MSTORE8		 	 
- stack 0: 0x43C
310	 EE	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
311	 F0	ADD		 	 
- stack 0: 0x440
312	 F1	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
313	 F2	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xF70001012C000001460003016003B800860000009503F001A2FFFF01B5FFA0
314	 F3	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0xF70001012C000001460003016003B800860000009503F001A2FFFF01B5FFA0
- stack 0: 0xF0
315	 F5	SHR		 	 
- stack 1: 0x440
- stack 0: 0xF7
316	 F6	JUMP		 	 
- stack 0: 0x440
317	 F7	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x440
318	 F8	PUSH2	0020	 	 
- stack 1: 0x440
- stack 0: 0x20
319	 FB	MLOAD		 	  ;; # read from x1
- stack 1: 0x440
- stack 0: 0x840
320	 FC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x440
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
321	 101	AND		 	  ;; # mask to 32 bits
- stack 1: 0x440
- stack 0: 0x840
322	 102	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x440
- stack 1: 0x840
- stack 0: 0x440
323	 103	MLOAD		 	 
- stack 2: 0x440
- stack 1: 0x840
- stack 0: 0xF70001012C000001460003016003B800860000009503F001A2FFFF01B5FFA0
324	 104	PUSH1	E0	 	 
- stack 3: 0x440
- stack 2: 0x840
- stack 1: 0xF70001012C000001460003016003B800860000009503F001A2FFFF01B5FFA0
- stack 0: 0xE0
325	 106	SHR		 	 
- stack 2: 0x440
- stack 1: 0x840
- stack 0: 0xF70001
326	 107	PUSH2	FFFF	 	 
- stack 3: 0x440
- stack 2: 0x840
- stack 1: 0xF70001
- stack 0: 0xFFFF
327	 10A	AND		 	 
- stack 2: 0x440
- stack 1: 0x840
- stack 0: 0x1
328	 10B	PUSH1	01	 	 
- stack 3: 0x440
- stack 2: 0x840
- stack 1: 0x1
- stack 0: 0x1
329	 10D	SIGNEXTEND		 	 
- stack 2: 0x440
- stack 1: 0x840
- stack 0: 0x1
330	 10E	ADD		 	 
- stack 1: 0x440
- stack 0: 0x841
331	 10F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x440
- stack 1: 0x841
- stack 0: 0xFFFFFFFF
332	 114	AND		 	  ;; # mask to 32 bits
- stack 1: 0x440
- stack 0: 0x841
333	 115	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x440
- stack 1: 0x841
- stack 0: 0x3
334	 117	XOR		 	 
- stack 1: 0x440
- stack 0: 0x842
335	 118	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xAAEFEFEFEF0000EFEF00000000000000000000000000000000000000000000
336	 119	PUSH1	F8	 	 
- stack 2: 0x440
- stack 1: 0xAAEFEFEFEF0000EFEF00000000000000000000000000000000000000000000
- stack 0: 0xF8
337	 11B	SHR		 	 
- stack 1: 0x440
- stack 0: 0x0
338	 11C	PUSH1	00	 	 
- stack 2: 0x440
- stack 1: 0x0
- stack 0: 0x0
339	 11E	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0x0
340	 11F	PUSH2	0060	 	 
- stack 2: 0x440
- stack 1: 0x0
- stack 0: 0x60
341	 122	MSTORE		 	  ;; # store to x3
- stack 0: 0x440
342	 123	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
343	 125	ADD		 	 
- stack 0: 0x444
344	 126	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
345	 127	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x12C000001460003016003B800860000009503F001A2FFFF01B5FFA000CE0002
346	 128	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x12C000001460003016003B800860000009503F001A2FFFF01B5FFA000CE0002
- stack 0: 0xF0
347	 12A	SHR		 	 
- stack 1: 0x444
- stack 0: 0x12C
348	 12B	JUMP		 	 
- stack 0: 0x444
349	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x444
350	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
351	 12E	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x12C000001460003016003B800860000009503F001A2FFFF01B5FFA000CE0002
352	 12F	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0x12C000001460003016003B800860000009503F001A2FFFF01B5FFA000CE0002
- stack 0: 0xE0
353	 131	SHR		 	 
- stack 1: 0x444
- stack 0: 0x12C0000
354	 132	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0x12C0000
- stack 0: 0xFFFF
355	 135	AND		 	 
- stack 1: 0x444
- stack 0: 0x0
356	 136	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x1
357	 138	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x0
358	 139	PUSH2	03A0	 	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x3A0
359	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x444
360	 13D	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
361	 13F	ADD		 	 
- stack 0: 0x448
362	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
363	 141	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x1460003016003B800860000009503F001A2FFFF01B5FFA000CE000201D40002
364	 142	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0x1460003016003B800860000009503F001A2FFFF01B5FFA000CE000201D40002
- stack 0: 0xF0
365	 144	SHR		 	 
- stack 1: 0x448
- stack 0: 0x146
366	 145	JUMP		 	 
- stack 0: 0x448
367	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x448
368	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x448
- stack 0: 0x448
369	 148	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x1460003016003B800860000009503F001A2FFFF01B5FFA000CE000201D40002
370	 149	PUSH1	E0	 	 
- stack 2: 0x448
- stack 1: 0x1460003016003B800860000009503F001A2FFFF01B5FFA000CE000201D40002
- stack 0: 0xE0
371	 14B	SHR		 	 
- stack 1: 0x448
- stack 0: 0x1460003
372	 14C	PUSH2	FFFF	 	 
- stack 2: 0x448
- stack 1: 0x1460003
- stack 0: 0xFFFF
373	 14F	AND		 	 
- stack 1: 0x448
- stack 0: 0x3
374	 150	PUSH1	01	 	 
- stack 2: 0x448
- stack 1: 0x3
- stack 0: 0x1
375	 152	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0x3
376	 153	PUSH2	0380	 	 
- stack 2: 0x448
- stack 1: 0x3
- stack 0: 0x380
377	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x448
378	 157	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
379	 159	ADD		 	 
- stack 0: 0x44C
380	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
381	 15B	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x16003B800860000009503F001A2FFFF01B5FFA000CE000201D400020209FFFF
382	 15C	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x16003B800860000009503F001A2FFFF01B5FFA000CE000201D400020209FFFF
- stack 0: 0xF0
383	 15E	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x160
384	 15F	JUMP		 	 
- stack 0: 0x44C
385	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x44C
386	 161	PUSH2	0060	 	 
- stack 1: 0x44C
- stack 0: 0x60
387	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x44C
- stack 0: 0x0
388	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x44C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
389	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x44C
- stack 0: 0x0
390	 16B	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0x0
- stack 0: 0x3A0
391	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x44C
- stack 1: 0x0
- stack 0: 0x0
392	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x44C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
393	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x44C
- stack 1: 0x0
- stack 0: 0x0
394	 175	SUB		 	 
- stack 1: 0x44C
- stack 0: 0x0
395	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x44C
- stack 1: 0x0
- stack 0: 0x17E
396	 179	JUMPI		 	 
- stack 0: 0x44C
397	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x44C
- stack 0: 0x198
398	 17D	JUMP		 	 
- stack 0: 0x44C
399	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x44C
400	 199	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
401	 19B	ADD		 	 
- stack 0: 0x450
402	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
403	 19D	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x860000009503F001A2FFFF01B5FFA000CE000201D400020209FFFF021CFFA0
404	 19E	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x860000009503F001A2FFFF01B5FFA000CE000201D400020209FFFF021CFFA0
- stack 0: 0xF0
405	 1A0	SHR		 	 
- stack 1: 0x450
- stack 0: 0x86
406	 1A1	JUMP		 	 
- stack 0: 0x450
407	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x450
408	 87	DUP1		 	 
- stack 1: 0x450
- stack 0: 0x450
409	 88	PUSH2	0020	 	 
- stack 2: 0x450
- stack 1: 0x450
- stack 0: 0x20
410	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x450
411	 8C	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
412	 8E	ADD		 	 
- stack 0: 0x454
413	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
414	 90	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x9503F001A2FFFF01B5FFA000CE000201D400020209FFFF021CFFA001460004
415	 91	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x9503F001A2FFFF01B5FFA000CE000201D400020209FFFF021CFFA001460004
- stack 0: 0xF0
416	 93	SHR		 	 
- stack 1: 0x454
- stack 0: 0x95
417	 94	JUMP		 	 
- stack 0: 0x454
418	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1072(ignore imm)
- stack 0: 0x454
419	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
420	 97	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x9503F001A2FFFF01B5FFA000CE000201D400020209FFFF021CFFA001460004
421	 98	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0x9503F001A2FFFF01B5FFA000CE000201D400020209FFFF021CFFA001460004
- stack 0: 0xE0
422	 9A	SHR		 	 
- stack 1: 0x454
- stack 0: 0x9503F0
423	 9B	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0x9503F0
- stack 0: 0xFFFF
424	 9E	AND		 	 
- stack 1: 0x454
- stack 0: 0x3F0
425	 9F	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0x3F0
- stack 0: 0x1
426	 A1	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0x3F0
427	 A2	PUSH2	0020	 	 
- stack 2: 0x454
- stack 1: 0x3F0
- stack 0: 0x20
428	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x454
- stack 1: 0x3F0
- stack 0: 0x450
429	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x454
- stack 0: 0x840
430	 A7	PUSH2	0020	 	 
- stack 2: 0x454
- stack 1: 0x840
- stack 0: 0x20
431	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x454
432	 AB	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
433	 AD	ADD		 	 
- stack 0: 0x458
434	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
435	 AF	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x1A2FFFF01B5FFA000CE000201D400020209FFFF021CFFA00146000401600390
436	 B0	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x1A2FFFF01B5FFA000CE000201D400020209FFFF021CFFA00146000401600390
- stack 0: 0xF0
437	 B2	SHR		 	 
- stack 1: 0x458
- stack 0: 0x1A2
438	 B3	JUMP		 	 
- stack 0: 0x458
439	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_fffff137	  ;; # instr: lui sp,0xfffff(ignore imm)
- stack 0: 0x458
440	 1A3	PUSH4	fffff000	 	 
- stack 1: 0x458
- stack 0: 0xFFFFF000
441	 1A8	PUSH2	0040	 	 
- stack 2: 0x458
- stack 1: 0xFFFFF000
- stack 0: 0x40
442	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x458
443	 1AC	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
444	 1AE	ADD		 	 
- stack 0: 0x45C
445	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
446	 1B0	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x1B5FFA000CE000201D400020209FFFF021CFFA0014600040160039000860000
447	 1B1	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x1B5FFA000CE000201D400020209FFFF021CFFA0014600040160039000860000
- stack 0: 0xF0
448	 1B3	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x1B5
449	 1B4	JUMP		 	 
- stack 0: 0x45C
450	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x45C
451	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
452	 1B7	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x1B5FFA000CE000201D400020209FFFF021CFFA0014600040160039000860000
453	 1B8	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0x1B5FFA000CE000201D400020209FFFF021CFFA0014600040160039000860000
- stack 0: 0xE0
454	 1BA	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x1B5FFA0
455	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0x1B5FFA0
- stack 0: 0xFFFF
456	 1BE	AND		 	 
- stack 1: 0x45C
- stack 0: 0xFFA0
457	 1BF	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0xFFA0
- stack 0: 0x1
458	 1C1	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
459	 1C2	PUSH2	0040	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 0: 0x40
460	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 0: 0xFFFFF000
461	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x45C
- stack 0: 0xFFFFEFA0
462	 1C7	PUSH2	0040	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFEFA0
- stack 0: 0x40
463	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x45C
464	 1CB	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
465	 1CD	ADD		 	 
- stack 0: 0x460
466	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
467	 1CF	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0xCE000201D400020209FFFF021CFFA0014600040160039000860000009503C8
468	 1D0	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0xCE000201D400020209FFFF021CFFA0014600040160039000860000009503C8
- stack 0: 0xF0
469	 1D2	SHR		 	 
- stack 1: 0x460
- stack 0: 0xCE
470	 1D3	JUMP		 	 
- stack 0: 0x460
471	 CE	JUMPDEST		 ;; __riscvimpl_SB_0_1_2	  ;; # instr: sb sp,0(ra)(ignore imm)
- stack 0: 0x460
472	 CF	PUSH2	0040	 	 
- stack 1: 0x460
- stack 0: 0x40
473	 D2	MLOAD		 	  ;; # read from x2
- stack 1: 0x460
- stack 0: 0xFFFFEFA0
474	 D3	PUSH2	0020	 	 
- stack 2: 0x460
- stack 1: 0xFFFFEFA0
- stack 0: 0x20
475	 D6	MLOAD		 	  ;; # read from x1
- stack 2: 0x460
- stack 1: 0xFFFFEFA0
- stack 0: 0x840
476	 D7	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x460
- stack 2: 0xFFFFEFA0
- stack 1: 0x840
- stack 0: 0x460
477	 D8	MLOAD		 	 
- stack 3: 0x460
- stack 2: 0xFFFFEFA0
- stack 1: 0x840
- stack 0: 0xCE000201D400020209FFFF021CFFA0014600040160039000860000009503C8
478	 D9	PUSH1	E0	 	 
- stack 4: 0x460
- stack 3: 0xFFFFEFA0
- stack 2: 0x840
- stack 1: 0xCE000201D400020209FFFF021CFFA0014600040160039000860000009503C8
- stack 0: 0xE0
479	 DB	SHR		 	 
- stack 3: 0x460
- stack 2: 0xFFFFEFA0
- stack 1: 0x840
- stack 0: 0xCE0002
480	 DC	PUSH2	FFFF	 	 
- stack 4: 0x460
- stack 3: 0xFFFFEFA0
- stack 2: 0x840
- stack 1: 0xCE0002
- stack 0: 0xFFFF
481	 DF	AND		 	 
- stack 3: 0x460
- stack 2: 0xFFFFEFA0
- stack 1: 0x840
- stack 0: 0x2
482	 E0	PUSH1	01	 	 
- stack 4: 0x460
- stack 3: 0xFFFFEFA0
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0x1
483	 E2	SIGNEXTEND		 	 
- stack 3: 0x460
- stack 2: 0xFFFFEFA0
- stack 1: 0x840
- stack 0: 0x2
484	 E3	ADD		 	 
- stack 2: 0x460
- stack 1: 0xFFFFEFA0
- stack 0: 0x842
485	 E4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x460
- stack 2: 0xFFFFEFA0
- stack 1: 0x842
- stack 0: 0xFFFFFFFF
486	 E9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x460
- stack 1: 0xFFFFEFA0
- stack 0: 0x842
487	 EA	PUSH1	03	 	 
- stack 3: 0x460
- stack 2: 0xFFFFEFA0
- stack 1: 0x842
- stack 0: 0x3
488	 EC	XOR		 	 
- stack 2: 0x460
- stack 1: 0xFFFFEFA0
- stack 0: 0x841
489	 ED	MSTORE8		 	 
- stack 0: 0x460
490	 EE	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
491	 F0	ADD		 	 
- stack 0: 0x464
492	 F1	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
493	 F2	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x1D400020209FFFF021CFFA0014600040160039000860000009503C800B4000A
494	 F3	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x1D400020209FFFF021CFFA0014600040160039000860000009503C800B4000A
- stack 0: 0xF0
495	 F5	SHR		 	 
- stack 1: 0x464
- stack 0: 0x1D4
496	 F6	JUMP		 	 
- stack 0: 0x464
497	 1D4	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,2(ra)(ignore imm)
- stack 0: 0x464
498	 1D5	PUSH2	0020	 	 
- stack 1: 0x464
- stack 0: 0x20
499	 1D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x464
- stack 0: 0x840
500	 1D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x464
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
501	 1DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x464
- stack 0: 0x840
502	 1DF	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x464
- stack 1: 0x840
- stack 0: 0x464
503	 1E0	MLOAD		 	 
- stack 2: 0x464
- stack 1: 0x840
- stack 0: 0x1D400020209FFFF021CFFA0014600040160039000860000009503C800B4000A
504	 1E1	PUSH1	E0	 	 
- stack 3: 0x464
- stack 2: 0x840
- stack 1: 0x1D400020209FFFF021CFFA0014600040160039000860000009503C800B4000A
- stack 0: 0xE0
505	 1E3	SHR		 	 
- stack 2: 0x464
- stack 1: 0x840
- stack 0: 0x1D40002
506	 1E4	PUSH2	FFFF	 	 
- stack 3: 0x464
- stack 2: 0x840
- stack 1: 0x1D40002
- stack 0: 0xFFFF
507	 1E7	AND		 	 
- stack 2: 0x464
- stack 1: 0x840
- stack 0: 0x2
508	 1E8	PUSH1	01	 	 
- stack 3: 0x464
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0x1
509	 1EA	SIGNEXTEND		 	 
- stack 2: 0x464
- stack 1: 0x840
- stack 0: 0x2
510	 1EB	ADD		 	 
- stack 1: 0x464
- stack 0: 0x842
511	 1EC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x464
- stack 1: 0x842
- stack 0: 0xFFFFFFFF
512	 1F1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x464
- stack 0: 0x842
513	 1F2	PUSH1	02	 	 
- stack 2: 0x464
- stack 1: 0x842
- stack 0: 0x2
514	 1F4	XOR		 	 
- stack 1: 0x464
- stack 0: 0x840
515	 1F5	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xEFA000AAEFEFEFEF0000EFEF0000000000000000000000000000000000000000
516	 1F6	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xEFA000AAEFEFEFEF0000EFEF0000000000000000000000000000000000000000
- stack 0: 0xF0
517	 1F8	SHR		 	 
- stack 1: 0x464
- stack 0: 0xEFA0
518	 1F9	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xEFA0
- stack 0: 0x1
519	 1FB	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFA0
520	 1FC	PUSH2	0060	 	 
- stack 2: 0x464
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFA0
- stack 0: 0x60
521	 1FF	MSTORE		 	  ;; # store to x3
- stack 0: 0x464
522	 200	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
523	 202	ADD		 	 
- stack 0: 0x468
524	 203	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
525	 204	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x209FFFF021CFFA0014600040160039000860000009503C800B4000A00CE0003
526	 205	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x209FFFF021CFFA0014600040160039000860000009503C800B4000A00CE0003
- stack 0: 0xF0
527	 207	SHR		 	 
- stack 1: 0x468
- stack 0: 0x209
528	 208	JUMP		 	 
- stack 0: 0x468
529	 209	JUMPDEST		 ;; __riscvimpl_LUI_fffffeb7	  ;; # instr: lui t4,0xfffff(ignore imm)
- stack 0: 0x468
530	 20A	PUSH4	fffff000	 	 
- stack 1: 0x468
- stack 0: 0xFFFFF000
531	 20F	PUSH2	03A0	 	 
- stack 2: 0x468
- stack 1: 0xFFFFF000
- stack 0: 0x3A0
532	 212	MSTORE		 	  ;; # store to x29
- stack 0: 0x468
533	 213	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
534	 215	ADD		 	 
- stack 0: 0x46C
535	 216	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
536	 217	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x21CFFA0014600040160039000860000009503C800B4000A00CE000300F70003
537	 218	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x21CFFA0014600040160039000860000009503C800B4000A00CE000300F70003
- stack 0: 0xF0
538	 21A	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x21C
539	 21B	JUMP		 	 
- stack 0: 0x46C
540	 21C	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-96(ignore imm)
- stack 0: 0x46C
541	 21D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x46C
- stack 0: 0x46C
542	 21E	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x21CFFA0014600040160039000860000009503C800B4000A00CE000300F70003
543	 21F	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0x21CFFA0014600040160039000860000009503C800B4000A00CE000300F70003
- stack 0: 0xE0
544	 221	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x21CFFA0
545	 222	PUSH2	FFFF	 	 
- stack 2: 0x46C
- stack 1: 0x21CFFA0
- stack 0: 0xFFFF
546	 225	AND		 	 
- stack 1: 0x46C
- stack 0: 0xFFA0
547	 226	PUSH1	01	 	 
- stack 2: 0x46C
- stack 1: 0xFFA0
- stack 0: 0x1
548	 228	SIGNEXTEND		 	 
- stack 1: 0x46C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
549	 229	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 0: 0x3A0
550	 22C	MLOAD		 	  ;; # read from x29
- stack 2: 0x46C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 0: 0xFFFFF000
551	 22D	ADD		 	  ;; # ADDI 29
- stack 1: 0x46C
- stack 0: 0xFFFFEFA0
552	 22E	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0xFFFFEFA0
- stack 0: 0x3A0
553	 231	MSTORE		 	  ;; # store to x29
- stack 0: 0x46C
554	 232	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
555	 234	ADD		 	 
- stack 0: 0x470
556	 235	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
557	 236	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x14600040160039000860000009503C800B4000A00CE000300F70003012C000A
558	 237	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x14600040160039000860000009503C800B4000A00CE000300F70003012C000A
- stack 0: 0xF0
559	 239	SHR		 	 
- stack 1: 0x470
- stack 0: 0x146
560	 23A	JUMP		 	 
- stack 0: 0x470
561	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x470
562	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
563	 148	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x14600040160039000860000009503C800B4000A00CE000300F70003012C000A
564	 149	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x14600040160039000860000009503C800B4000A00CE000300F70003012C000A
- stack 0: 0xE0
565	 14B	SHR		 	 
- stack 1: 0x470
- stack 0: 0x1460004
566	 14C	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x1460004
- stack 0: 0xFFFF
567	 14F	AND		 	 
- stack 1: 0x470
- stack 0: 0x4
568	 150	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0x4
- stack 0: 0x1
569	 152	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0x4
570	 153	PUSH2	0380	 	 
- stack 2: 0x470
- stack 1: 0x4
- stack 0: 0x380
571	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x470
572	 157	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
573	 159	ADD		 	 
- stack 0: 0x474
574	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
575	 15B	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x160039000860000009503C800B4000A00CE000300F70003012C000A01460005
576	 15C	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x160039000860000009503C800B4000A00CE000300F70003012C000A01460005
- stack 0: 0xF0
577	 15E	SHR		 	 
- stack 1: 0x474
- stack 0: 0x160
578	 15F	JUMP		 	 
- stack 0: 0x474
579	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x474
580	 161	PUSH2	0060	 	 
- stack 1: 0x474
- stack 0: 0x60
581	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x474
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFA0
582	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x474
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFA0
- stack 0: 0xFFFFFFFF
583	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x474
- stack 0: 0xFFFFEFA0
584	 16B	PUSH2	03A0	 	 
- stack 2: 0x474
- stack 1: 0xFFFFEFA0
- stack 0: 0x3A0
585	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x474
- stack 1: 0xFFFFEFA0
- stack 0: 0xFFFFEFA0
586	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x474
- stack 2: 0xFFFFEFA0
- stack 1: 0xFFFFEFA0
- stack 0: 0xFFFFFFFF
587	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x474
- stack 1: 0xFFFFEFA0
- stack 0: 0xFFFFEFA0
588	 175	SUB		 	 
- stack 1: 0x474
- stack 0: 0x0
589	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x474
- stack 1: 0x0
- stack 0: 0x17E
590	 179	JUMPI		 	 
- stack 0: 0x474
591	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x474
- stack 0: 0x198
592	 17D	JUMP		 	 
- stack 0: 0x474
593	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x474
594	 199	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
595	 19B	ADD		 	 
- stack 0: 0x478
596	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
597	 19D	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x860000009503C800B4000A00CE000300F70003012C000A0146000501600370
598	 19E	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x860000009503C800B4000A00CE000300F70003012C000A0146000501600370
- stack 0: 0xF0
599	 1A0	SHR		 	 
- stack 1: 0x478
- stack 0: 0x86
600	 1A1	JUMP		 	 
- stack 0: 0x478
601	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x478
602	 87	DUP1		 	 
- stack 1: 0x478
- stack 0: 0x478
603	 88	PUSH2	0020	 	 
- stack 2: 0x478
- stack 1: 0x478
- stack 0: 0x20
604	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x478
605	 8C	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
606	 8E	ADD		 	 
- stack 0: 0x47C
607	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
608	 90	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x9503C800B4000A00CE000300F70003012C000A014600050160037000860000
609	 91	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x9503C800B4000A00CE000300F70003012C000A014600050160037000860000
- stack 0: 0xF0
610	 93	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x95
611	 94	JUMP		 	 
- stack 0: 0x47C
612	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1072(ignore imm)
- stack 0: 0x47C
613	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
614	 97	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x9503C800B4000A00CE000300F70003012C000A014600050160037000860000
615	 98	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0x9503C800B4000A00CE000300F70003012C000A014600050160037000860000
- stack 0: 0xE0
616	 9A	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x9503C8
617	 9B	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0x9503C8
- stack 0: 0xFFFF
618	 9E	AND		 	 
- stack 1: 0x47C
- stack 0: 0x3C8
619	 9F	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0x3C8
- stack 0: 0x1
620	 A1	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0x3C8
621	 A2	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0x3C8
- stack 0: 0x20
622	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x47C
- stack 1: 0x3C8
- stack 0: 0x478
623	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x47C
- stack 0: 0x840
624	 A7	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0x840
- stack 0: 0x20
625	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x47C
626	 AB	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
627	 AD	ADD		 	 
- stack 0: 0x480
628	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
629	 AF	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xB4000A00CE000300F70003012C000A014600050160037000860000009503AF
630	 B0	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0xB4000A00CE000300F70003012C000A014600050160037000860000009503AF
- stack 0: 0xF0
631	 B2	SHR		 	 
- stack 1: 0x480
- stack 0: 0xB4
632	 B3	JUMP		 	 
- stack 0: 0x480
633	 B4	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,-86(ignore imm)
- stack 0: 0x480
634	 B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
635	 B6	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xB4000A00CE000300F70003012C000A014600050160037000860000009503AF
636	 B7	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0xB4000A00CE000300F70003012C000A014600050160037000860000009503AF
- stack 0: 0xE0
637	 B9	SHR		 	 
- stack 1: 0x480
- stack 0: 0xB4000A
638	 BA	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0xB4000A
- stack 0: 0xFFFF
639	 BD	AND		 	 
- stack 1: 0x480
- stack 0: 0xA
640	 BE	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0xA
- stack 0: 0x1
641	 C0	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0xA
642	 C1	PUSH2	0040	 	 
- stack 2: 0x480
- stack 1: 0xA
- stack 0: 0x40
643	 C4	MSTORE		 	  ;; # store to x2
- stack 0: 0x480
644	 C5	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
645	 C7	ADD		 	 
- stack 0: 0x484
646	 C8	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
647	 C9	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0xCE000300F70003012C000A014600050160037000860000009503AF00B4FFAA
648	 CA	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0xCE000300F70003012C000A014600050160037000860000009503AF00B4FFAA
- stack 0: 0xF0
649	 CC	SHR		 	 
- stack 1: 0x484
- stack 0: 0xCE
650	 CD	JUMP		 	 
- stack 0: 0x484
651	 CE	JUMPDEST		 ;; __riscvimpl_SB_0_1_2	  ;; # instr: sb sp,0(ra)(ignore imm)
- stack 0: 0x484
652	 CF	PUSH2	0040	 	 
- stack 1: 0x484
- stack 0: 0x40
653	 D2	MLOAD		 	  ;; # read from x2
- stack 1: 0x484
- stack 0: 0xA
654	 D3	PUSH2	0020	 	 
- stack 2: 0x484
- stack 1: 0xA
- stack 0: 0x20
655	 D6	MLOAD		 	  ;; # read from x1
- stack 2: 0x484
- stack 1: 0xA
- stack 0: 0x840
656	 D7	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x484
- stack 2: 0xA
- stack 1: 0x840
- stack 0: 0x484
657	 D8	MLOAD		 	 
- stack 3: 0x484
- stack 2: 0xA
- stack 1: 0x840
- stack 0: 0xCE000300F70003012C000A014600050160037000860000009503AF00B4FFAA
658	 D9	PUSH1	E0	 	 
- stack 4: 0x484
- stack 3: 0xA
- stack 2: 0x840
- stack 1: 0xCE000300F70003012C000A014600050160037000860000009503AF00B4FFAA
- stack 0: 0xE0
659	 DB	SHR		 	 
- stack 3: 0x484
- stack 2: 0xA
- stack 1: 0x840
- stack 0: 0xCE0003
660	 DC	PUSH2	FFFF	 	 
- stack 4: 0x484
- stack 3: 0xA
- stack 2: 0x840
- stack 1: 0xCE0003
- stack 0: 0xFFFF
661	 DF	AND		 	 
- stack 3: 0x484
- stack 2: 0xA
- stack 1: 0x840
- stack 0: 0x3
662	 E0	PUSH1	01	 	 
- stack 4: 0x484
- stack 3: 0xA
- stack 2: 0x840
- stack 1: 0x3
- stack 0: 0x1
663	 E2	SIGNEXTEND		 	 
- stack 3: 0x484
- stack 2: 0xA
- stack 1: 0x840
- stack 0: 0x3
664	 E3	ADD		 	 
- stack 2: 0x484
- stack 1: 0xA
- stack 0: 0x843
665	 E4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x484
- stack 2: 0xA
- stack 1: 0x843
- stack 0: 0xFFFFFFFF
666	 E9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x484
- stack 1: 0xA
- stack 0: 0x843
667	 EA	PUSH1	03	 	 
- stack 3: 0x484
- stack 2: 0xA
- stack 1: 0x843
- stack 0: 0x3
668	 EC	XOR		 	 
- stack 2: 0x484
- stack 1: 0xA
- stack 0: 0x840
669	 ED	MSTORE8		 	 
- stack 0: 0x484
670	 EE	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
671	 F0	ADD		 	 
- stack 0: 0x488
672	 F1	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
673	 F2	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xF70003012C000A014600050160037000860000009503AF00B4FFAA00CEFFFD
674	 F3	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0xF70003012C000A014600050160037000860000009503AF00B4FFAA00CEFFFD
- stack 0: 0xF0
675	 F5	SHR		 	 
- stack 1: 0x488
- stack 0: 0xF7
676	 F6	JUMP		 	 
- stack 0: 0x488
677	 F7	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x488
678	 F8	PUSH2	0020	 	 
- stack 1: 0x488
- stack 0: 0x20
679	 FB	MLOAD		 	  ;; # read from x1
- stack 1: 0x488
- stack 0: 0x840
680	 FC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x488
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
681	 101	AND		 	  ;; # mask to 32 bits
- stack 1: 0x488
- stack 0: 0x840
682	 102	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x488
- stack 1: 0x840
- stack 0: 0x488
683	 103	MLOAD		 	 
- stack 2: 0x488
- stack 1: 0x840
- stack 0: 0xF70003012C000A014600050160037000860000009503AF00B4FFAA00CEFFFD
684	 104	PUSH1	E0	 	 
- stack 3: 0x488
- stack 2: 0x840
- stack 1: 0xF70003012C000A014600050160037000860000009503AF00B4FFAA00CEFFFD
- stack 0: 0xE0
685	 106	SHR		 	 
- stack 2: 0x488
- stack 1: 0x840
- stack 0: 0xF70003
686	 107	PUSH2	FFFF	 	 
- stack 3: 0x488
- stack 2: 0x840
- stack 1: 0xF70003
- stack 0: 0xFFFF
687	 10A	AND		 	 
- stack 2: 0x488
- stack 1: 0x840
- stack 0: 0x3
688	 10B	PUSH1	01	 	 
- stack 3: 0x488
- stack 2: 0x840
- stack 1: 0x3
- stack 0: 0x1
689	 10D	SIGNEXTEND		 	 
- stack 2: 0x488
- stack 1: 0x840
- stack 0: 0x3
690	 10E	ADD		 	 
- stack 1: 0x488
- stack 0: 0x843
691	 10F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x488
- stack 1: 0x843
- stack 0: 0xFFFFFFFF
692	 114	AND		 	  ;; # mask to 32 bits
- stack 1: 0x488
- stack 0: 0x843
693	 115	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x488
- stack 1: 0x843
- stack 0: 0x3
694	 117	XOR		 	 
- stack 1: 0x488
- stack 0: 0x840
695	 118	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xAA000AAEFEFEFEF0000EFEF0000000000000000000000000000000000000000
696	 119	PUSH1	F8	 	 
- stack 2: 0x488
- stack 1: 0xAA000AAEFEFEFEF0000EFEF0000000000000000000000000000000000000000
- stack 0: 0xF8
697	 11B	SHR		 	 
- stack 1: 0x488
- stack 0: 0xA
698	 11C	PUSH1	00	 	 
- stack 2: 0x488
- stack 1: 0xA
- stack 0: 0x0
699	 11E	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0xA
700	 11F	PUSH2	0060	 	 
- stack 2: 0x488
- stack 1: 0xA
- stack 0: 0x60
701	 122	MSTORE		 	  ;; # store to x3
- stack 0: 0x488
702	 123	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
703	 125	ADD		 	 
- stack 0: 0x48C
704	 126	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
705	 127	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x12C000A014600050160037000860000009503AF00B4FFAA00CEFFFD00F7FFFD
706	 128	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x12C000A014600050160037000860000009503AF00B4FFAA00CEFFFD00F7FFFD
- stack 0: 0xF0
707	 12A	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x12C
708	 12B	JUMP		 	 
- stack 0: 0x48C
709	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x48C
710	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
711	 12E	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x12C000A014600050160037000860000009503AF00B4FFAA00CEFFFD00F7FFFD
712	 12F	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0x12C000A014600050160037000860000009503AF00B4FFAA00CEFFFD00F7FFFD
- stack 0: 0xE0
713	 131	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x12C000A
714	 132	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0x12C000A
- stack 0: 0xFFFF
715	 135	AND		 	 
- stack 1: 0x48C
- stack 0: 0xA
716	 136	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0xA
- stack 0: 0x1
717	 138	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0xA
718	 139	PUSH2	03A0	 	 
- stack 2: 0x48C
- stack 1: 0xA
- stack 0: 0x3A0
719	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x48C
720	 13D	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
721	 13F	ADD		 	 
- stack 0: 0x490
722	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
723	 141	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x14600050160037000860000009503AF00B4FFAA00CEFFFD00F7FFFD012CFFAA
724	 142	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x14600050160037000860000009503AF00B4FFAA00CEFFFD00F7FFFD012CFFAA
- stack 0: 0xF0
725	 144	SHR		 	 
- stack 1: 0x490
- stack 0: 0x146
726	 145	JUMP		 	 
- stack 0: 0x490
727	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x490
728	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
729	 148	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x14600050160037000860000009503AF00B4FFAA00CEFFFD00F7FFFD012CFFAA
730	 149	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0x14600050160037000860000009503AF00B4FFAA00CEFFFD00F7FFFD012CFFAA
- stack 0: 0xE0
731	 14B	SHR		 	 
- stack 1: 0x490
- stack 0: 0x1460005
732	 14C	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0x1460005
- stack 0: 0xFFFF
733	 14F	AND		 	 
- stack 1: 0x490
- stack 0: 0x5
734	 150	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0x5
- stack 0: 0x1
735	 152	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0x5
736	 153	PUSH2	0380	 	 
- stack 2: 0x490
- stack 1: 0x5
- stack 0: 0x380
737	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x490
738	 157	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
739	 159	ADD		 	 
- stack 0: 0x494
740	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
741	 15B	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x160037000860000009503AF00B4FFAA00CEFFFD00F7FFFD012CFFAA01460006
742	 15C	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x160037000860000009503AF00B4FFAA00CEFFFD00F7FFFD012CFFAA01460006
- stack 0: 0xF0
743	 15E	SHR		 	 
- stack 1: 0x494
- stack 0: 0x160
744	 15F	JUMP		 	 
- stack 0: 0x494
745	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x494
746	 161	PUSH2	0060	 	 
- stack 1: 0x494
- stack 0: 0x60
747	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x494
- stack 0: 0xA
748	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x494
- stack 1: 0xA
- stack 0: 0xFFFFFFFF
749	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x494
- stack 0: 0xA
750	 16B	PUSH2	03A0	 	 
- stack 2: 0x494
- stack 1: 0xA
- stack 0: 0x3A0
751	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x494
- stack 1: 0xA
- stack 0: 0xA
752	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x494
- stack 2: 0xA
- stack 1: 0xA
- stack 0: 0xFFFFFFFF
753	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x494
- stack 1: 0xA
- stack 0: 0xA
754	 175	SUB		 	 
- stack 1: 0x494
- stack 0: 0x0
755	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x17E
756	 179	JUMPI		 	 
- stack 0: 0x494
757	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x494
- stack 0: 0x198
758	 17D	JUMP		 	 
- stack 0: 0x494
759	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x494
760	 199	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
761	 19B	ADD		 	 
- stack 0: 0x498
762	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
763	 19D	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x860000009503AF00B4FFAA00CEFFFD00F7FFFD012CFFAA0146000601600350
764	 19E	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x860000009503AF00B4FFAA00CEFFFD00F7FFFD012CFFAA0146000601600350
- stack 0: 0xF0
765	 1A0	SHR		 	 
- stack 1: 0x498
- stack 0: 0x86
766	 1A1	JUMP		 	 
- stack 0: 0x498
767	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x498
768	 87	DUP1		 	 
- stack 1: 0x498
- stack 0: 0x498
769	 88	PUSH2	0020	 	 
- stack 2: 0x498
- stack 1: 0x498
- stack 0: 0x20
770	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x498
771	 8C	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
772	 8E	ADD		 	 
- stack 0: 0x49C
773	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
774	 90	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x9503AF00B4FFAA00CEFFFD00F7FFFD012CFFAA014600060160035000860000
775	 91	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x9503AF00B4FFAA00CEFFFD00F7FFFD012CFFAA014600060160035000860000
- stack 0: 0xF0
776	 93	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x95
777	 94	JUMP		 	 
- stack 0: 0x49C
778	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1072(ignore imm)
- stack 0: 0x49C
779	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x49C
- stack 0: 0x49C
780	 97	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x9503AF00B4FFAA00CEFFFD00F7FFFD012CFFAA014600060160035000860000
781	 98	PUSH1	E0	 	 
- stack 2: 0x49C
- stack 1: 0x9503AF00B4FFAA00CEFFFD00F7FFFD012CFFAA014600060160035000860000
- stack 0: 0xE0
782	 9A	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x9503AF
783	 9B	PUSH2	FFFF	 	 
- stack 2: 0x49C
- stack 1: 0x9503AF
- stack 0: 0xFFFF
784	 9E	AND		 	 
- stack 1: 0x49C
- stack 0: 0x3AF
785	 9F	PUSH1	01	 	 
- stack 2: 0x49C
- stack 1: 0x3AF
- stack 0: 0x1
786	 A1	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0x3AF
787	 A2	PUSH2	0020	 	 
- stack 2: 0x49C
- stack 1: 0x3AF
- stack 0: 0x20
788	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x49C
- stack 1: 0x3AF
- stack 0: 0x498
789	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x49C
- stack 0: 0x847
790	 A7	PUSH2	0020	 	 
- stack 2: 0x49C
- stack 1: 0x847
- stack 0: 0x20
791	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x49C
792	 AB	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
793	 AD	ADD		 	 
- stack 0: 0x4A0
794	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
795	 AF	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0xB4FFAA00CEFFFD00F7FFFD012CFFAA0146000601600350008600000095038F
796	 B0	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0xB4FFAA00CEFFFD00F7FFFD012CFFAA0146000601600350008600000095038F
- stack 0: 0xF0
797	 B2	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0xB4
798	 B3	JUMP		 	 
- stack 0: 0x4A0
799	 B4	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,-86(ignore imm)
- stack 0: 0x4A0
800	 B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
801	 B6	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0xB4FFAA00CEFFFD00F7FFFD012CFFAA0146000601600350008600000095038F
802	 B7	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0xB4FFAA00CEFFFD00F7FFFD012CFFAA0146000601600350008600000095038F
- stack 0: 0xE0
803	 B9	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0xB4FFAA
804	 BA	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0xB4FFAA
- stack 0: 0xFFFF
805	 BD	AND		 	 
- stack 1: 0x4A0
- stack 0: 0xFFAA
806	 BE	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0xFFAA
- stack 0: 0x1
807	 C0	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
808	 C1	PUSH2	0040	 	 
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x40
809	 C4	MSTORE		 	  ;; # store to x2
- stack 0: 0x4A0
810	 C5	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
811	 C7	ADD		 	 
- stack 0: 0x4A4
812	 C8	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
813	 C9	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xCEFFFD00F7FFFD012CFFAA0146000601600350008600000095038F00B40000
814	 CA	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0xCEFFFD00F7FFFD012CFFAA0146000601600350008600000095038F00B40000
- stack 0: 0xF0
815	 CC	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xCE
816	 CD	JUMP		 	 
- stack 0: 0x4A4
817	 CE	JUMPDEST		 ;; __riscvimpl_SB_0_1_2	  ;; # instr: sb sp,0(ra)(ignore imm)
- stack 0: 0x4A4
818	 CF	PUSH2	0040	 	 
- stack 1: 0x4A4
- stack 0: 0x40
819	 D2	MLOAD		 	  ;; # read from x2
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
820	 D3	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x20
821	 D6	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x847
822	 D7	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x4A4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 1: 0x847
- stack 0: 0x4A4
823	 D8	MLOAD		 	 
- stack 3: 0x4A4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 1: 0x847
- stack 0: 0xCEFFFD00F7FFFD012CFFAA0146000601600350008600000095038F00B40000
824	 D9	PUSH1	E0	 	 
- stack 4: 0x4A4
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 2: 0x847
- stack 1: 0xCEFFFD00F7FFFD012CFFAA0146000601600350008600000095038F00B40000
- stack 0: 0xE0
825	 DB	SHR		 	 
- stack 3: 0x4A4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 1: 0x847
- stack 0: 0xCEFFFD
826	 DC	PUSH2	FFFF	 	 
- stack 4: 0x4A4
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 2: 0x847
- stack 1: 0xCEFFFD
- stack 0: 0xFFFF
827	 DF	AND		 	 
- stack 3: 0x4A4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 1: 0x847
- stack 0: 0xFFFD
828	 E0	PUSH1	01	 	 
- stack 4: 0x4A4
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 2: 0x847
- stack 1: 0xFFFD
- stack 0: 0x1
829	 E2	SIGNEXTEND		 	 
- stack 3: 0x4A4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 1: 0x847
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD
830	 E3	ADD		 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x844
831	 E4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4A4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 1: 0x844
- stack 0: 0xFFFFFFFF
832	 E9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x844
833	 EA	PUSH1	03	 	 
- stack 3: 0x4A4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 1: 0x844
- stack 0: 0x3
834	 EC	XOR		 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x847
835	 ED	MSTORE8		 	 
- stack 0: 0x4A4
836	 EE	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
837	 F0	ADD		 	 
- stack 0: 0x4A8
838	 F1	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
839	 F2	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xF7FFFD012CFFAA0146000601600350008600000095038F00B4000000CEFFFE
840	 F3	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xF7FFFD012CFFAA0146000601600350008600000095038F00B4000000CEFFFE
- stack 0: 0xF0
841	 F5	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xF7
842	 F6	JUMP		 	 
- stack 0: 0x4A8
843	 F7	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x4A8
844	 F8	PUSH2	0020	 	 
- stack 1: 0x4A8
- stack 0: 0x20
845	 FB	MLOAD		 	  ;; # read from x1
- stack 1: 0x4A8
- stack 0: 0x847
846	 FC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x847
- stack 0: 0xFFFFFFFF
847	 101	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A8
- stack 0: 0x847
848	 102	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4A8
- stack 1: 0x847
- stack 0: 0x4A8
849	 103	MLOAD		 	 
- stack 2: 0x4A8
- stack 1: 0x847
- stack 0: 0xF7FFFD012CFFAA0146000601600350008600000095038F00B4000000CEFFFE
850	 104	PUSH1	E0	 	 
- stack 3: 0x4A8
- stack 2: 0x847
- stack 1: 0xF7FFFD012CFFAA0146000601600350008600000095038F00B4000000CEFFFE
- stack 0: 0xE0
851	 106	SHR		 	 
- stack 2: 0x4A8
- stack 1: 0x847
- stack 0: 0xF7FFFD
852	 107	PUSH2	FFFF	 	 
- stack 3: 0x4A8
- stack 2: 0x847
- stack 1: 0xF7FFFD
- stack 0: 0xFFFF
853	 10A	AND		 	 
- stack 2: 0x4A8
- stack 1: 0x847
- stack 0: 0xFFFD
854	 10B	PUSH1	01	 	 
- stack 3: 0x4A8
- stack 2: 0x847
- stack 1: 0xFFFD
- stack 0: 0x1
855	 10D	SIGNEXTEND		 	 
- stack 2: 0x4A8
- stack 1: 0x847
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD
856	 10E	ADD		 	 
- stack 1: 0x4A8
- stack 0: 0x844
857	 10F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x844
- stack 0: 0xFFFFFFFF
858	 114	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A8
- stack 0: 0x844
859	 115	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x4A8
- stack 1: 0x844
- stack 0: 0x3
860	 117	XOR		 	 
- stack 1: 0x4A8
- stack 0: 0x847
861	 118	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xAA0000EFEF000000000000000000000000000000000000000000000000000000
862	 119	PUSH1	F8	 	 
- stack 2: 0x4A8
- stack 1: 0xAA0000EFEF000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
863	 11B	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xAA
864	 11C	PUSH1	00	 	 
- stack 2: 0x4A8
- stack 1: 0xAA
- stack 0: 0x0
865	 11E	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
866	 11F	PUSH2	0060	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x60
867	 122	MSTORE		 	  ;; # store to x3
- stack 0: 0x4A8
868	 123	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
869	 125	ADD		 	 
- stack 0: 0x4AC
870	 126	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
871	 127	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x12CFFAA0146000601600350008600000095038F00B4000000CEFFFE00F7FFFE
872	 128	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x12CFFAA0146000601600350008600000095038F00B4000000CEFFFE00F7FFFE
- stack 0: 0xF0
873	 12A	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x12C
874	 12B	JUMP		 	 
- stack 0: 0x4AC
875	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x4AC
876	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
877	 12E	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x12CFFAA0146000601600350008600000095038F00B4000000CEFFFE00F7FFFE
878	 12F	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0x12CFFAA0146000601600350008600000095038F00B4000000CEFFFE00F7FFFE
- stack 0: 0xE0
879	 131	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x12CFFAA
880	 132	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0x12CFFAA
- stack 0: 0xFFFF
881	 135	AND		 	 
- stack 1: 0x4AC
- stack 0: 0xFFAA
882	 136	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0xFFAA
- stack 0: 0x1
883	 138	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
884	 139	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0x3A0
885	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x4AC
886	 13D	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
887	 13F	ADD		 	 
- stack 0: 0x4B0
888	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
889	 141	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x146000601600350008600000095038F00B4000000CEFFFE00F7FFFE012C0000
890	 142	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x146000601600350008600000095038F00B4000000CEFFFE00F7FFFE012C0000
- stack 0: 0xF0
891	 144	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x146
892	 145	JUMP		 	 
- stack 0: 0x4B0
893	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4B0
894	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
895	 148	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x146000601600350008600000095038F00B4000000CEFFFE00F7FFFE012C0000
896	 149	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x146000601600350008600000095038F00B4000000CEFFFE00F7FFFE012C0000
- stack 0: 0xE0
897	 14B	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x1460006
898	 14C	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x1460006
- stack 0: 0xFFFF
899	 14F	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x6
900	 150	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x6
- stack 0: 0x1
901	 152	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x6
902	 153	PUSH2	0380	 	 
- stack 2: 0x4B0
- stack 1: 0x6
- stack 0: 0x380
903	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x4B0
904	 157	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
905	 159	ADD		 	 
- stack 0: 0x4B4
906	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
907	 15B	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x1600350008600000095038F00B4000000CEFFFE00F7FFFE012C000001460007
908	 15C	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x1600350008600000095038F00B4000000CEFFFE00F7FFFE012C000001460007
- stack 0: 0xF0
909	 15E	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x160
910	 15F	JUMP		 	 
- stack 0: 0x4B4
911	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x4B4
912	 161	PUSH2	0060	 	 
- stack 1: 0x4B4
- stack 0: 0x60
913	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
914	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0xFFFFFFFF
915	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B4
- stack 0: 0xFFFFFFAA
916	 16B	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFAA
- stack 0: 0x3A0
917	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x4B4
- stack 1: 0xFFFFFFAA
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
918	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B4
- stack 2: 0xFFFFFFAA
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA
- stack 0: 0xFFFFFFFF
919	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B4
- stack 1: 0xFFFFFFAA
- stack 0: 0xFFFFFFAA
920	 175	SUB		 	 
- stack 1: 0x4B4
- stack 0: 0x0
921	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x4B4
- stack 1: 0x0
- stack 0: 0x17E
922	 179	JUMPI		 	 
- stack 0: 0x4B4
923	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x4B4
- stack 0: 0x198
924	 17D	JUMP		 	 
- stack 0: 0x4B4
925	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x4B4
926	 199	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
927	 19B	ADD		 	 
- stack 0: 0x4B8
928	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
929	 19D	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x8600000095038F00B4000000CEFFFE00F7FFFE012C00000146000701600330
930	 19E	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x8600000095038F00B4000000CEFFFE00F7FFFE012C00000146000701600330
- stack 0: 0xF0
931	 1A0	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x86
932	 1A1	JUMP		 	 
- stack 0: 0x4B8
933	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4B8
934	 87	DUP1		 	 
- stack 1: 0x4B8
- stack 0: 0x4B8
935	 88	PUSH2	0020	 	 
- stack 2: 0x4B8
- stack 1: 0x4B8
- stack 0: 0x20
936	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B8
937	 8C	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
938	 8E	ADD		 	 
- stack 0: 0x4BC
939	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
940	 90	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x95038F00B4000000CEFFFE00F7FFFE012C0000014600070160033000860000
941	 91	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x95038F00B4000000CEFFFE00F7FFFE012C0000014600070160033000860000
- stack 0: 0xF0
942	 93	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x95
943	 94	JUMP		 	 
- stack 0: 0x4BC
944	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1072(ignore imm)
- stack 0: 0x4BC
945	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
946	 97	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x95038F00B4000000CEFFFE00F7FFFE012C0000014600070160033000860000
947	 98	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0x95038F00B4000000CEFFFE00F7FFFE012C0000014600070160033000860000
- stack 0: 0xE0
948	 9A	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x95038F
949	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x95038F
- stack 0: 0xFFFF
950	 9E	AND		 	 
- stack 1: 0x4BC
- stack 0: 0x38F
951	 9F	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0x38F
- stack 0: 0x1
952	 A1	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0x38F
953	 A2	PUSH2	0020	 	 
- stack 2: 0x4BC
- stack 1: 0x38F
- stack 0: 0x20
954	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4BC
- stack 1: 0x38F
- stack 0: 0x4B8
955	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4BC
- stack 0: 0x847
956	 A7	PUSH2	0020	 	 
- stack 2: 0x4BC
- stack 1: 0x847
- stack 0: 0x20
957	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4BC
958	 AB	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
959	 AD	ADD		 	 
- stack 0: 0x4C0
960	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
961	 AF	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xB4000000CEFFFE00F7FFFE012C00000146000701600330008600000095036F
962	 B0	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0xB4000000CEFFFE00F7FFFE012C00000146000701600330008600000095036F
- stack 0: 0xF0
963	 B2	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xB4
964	 B3	JUMP		 	 
- stack 0: 0x4C0
965	 B4	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,-86(ignore imm)
- stack 0: 0x4C0
966	 B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
967	 B6	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xB4000000CEFFFE00F7FFFE012C00000146000701600330008600000095036F
968	 B7	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0xB4000000CEFFFE00F7FFFE012C00000146000701600330008600000095036F
- stack 0: 0xE0
969	 B9	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xB40000
970	 BA	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0xB40000
- stack 0: 0xFFFF
971	 BD	AND		 	 
- stack 1: 0x4C0
- stack 0: 0x0
972	 BE	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0x0
- stack 0: 0x1
973	 C0	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0x0
974	 C1	PUSH2	0040	 	 
- stack 2: 0x4C0
- stack 1: 0x0
- stack 0: 0x40
975	 C4	MSTORE		 	  ;; # store to x2
- stack 0: 0x4C0
976	 C5	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
977	 C7	ADD		 	 
- stack 0: 0x4C4
978	 C8	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
979	 C9	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xCEFFFE00F7FFFE012C00000146000701600330008600000095036F00B4FFA0
980	 CA	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0xCEFFFE00F7FFFE012C00000146000701600330008600000095036F00B4FFA0
- stack 0: 0xF0
981	 CC	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xCE
982	 CD	JUMP		 	 
- stack 0: 0x4C4
983	 CE	JUMPDEST		 ;; __riscvimpl_SB_0_1_2	  ;; # instr: sb sp,0(ra)(ignore imm)
- stack 0: 0x4C4
984	 CF	PUSH2	0040	 	 
- stack 1: 0x4C4
- stack 0: 0x40
985	 D2	MLOAD		 	  ;; # read from x2
- stack 1: 0x4C4
- stack 0: 0x0
986	 D3	PUSH2	0020	 	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x20
987	 D6	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x847
988	 D7	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x4C4
- stack 2: 0x0
- stack 1: 0x847
- stack 0: 0x4C4
989	 D8	MLOAD		 	 
- stack 3: 0x4C4
- stack 2: 0x0
- stack 1: 0x847
- stack 0: 0xCEFFFE00F7FFFE012C00000146000701600330008600000095036F00B4FFA0
990	 D9	PUSH1	E0	 	 
- stack 4: 0x4C4
- stack 3: 0x0
- stack 2: 0x847
- stack 1: 0xCEFFFE00F7FFFE012C00000146000701600330008600000095036F00B4FFA0
- stack 0: 0xE0
991	 DB	SHR		 	 
- stack 3: 0x4C4
- stack 2: 0x0
- stack 1: 0x847
- stack 0: 0xCEFFFE
992	 DC	PUSH2	FFFF	 	 
- stack 4: 0x4C4
- stack 3: 0x0
- stack 2: 0x847
- stack 1: 0xCEFFFE
- stack 0: 0xFFFF
993	 DF	AND		 	 
- stack 3: 0x4C4
- stack 2: 0x0
- stack 1: 0x847
- stack 0: 0xFFFE
994	 E0	PUSH1	01	 	 
- stack 4: 0x4C4
- stack 3: 0x0
- stack 2: 0x847
- stack 1: 0xFFFE
- stack 0: 0x1
995	 E2	SIGNEXTEND		 	 
- stack 3: 0x4C4
- stack 2: 0x0
- stack 1: 0x847
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
996	 E3	ADD		 	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x845
997	 E4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C4
- stack 2: 0x0
- stack 1: 0x845
- stack 0: 0xFFFFFFFF
998	 E9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x845
999	 EA	PUSH1	03	 	 
- stack 3: 0x4C4
- stack 2: 0x0
- stack 1: 0x845
- stack 0: 0x3
1000	 EC	XOR		 	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x846
1001	 ED	MSTORE8		 	 
- stack 0: 0x4C4
1002	 EE	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
1003	 F0	ADD		 	 
- stack 0: 0x4C8
1004	 F1	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
1005	 F2	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xF7FFFE012C00000146000701600330008600000095036F00B4FFA000CEFFFF
1006	 F3	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0xF7FFFE012C00000146000701600330008600000095036F00B4FFA000CEFFFF
- stack 0: 0xF0
1007	 F5	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xF7
1008	 F6	JUMP		 	 
- stack 0: 0x4C8
1009	 F7	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x4C8
1010	 F8	PUSH2	0020	 	 
- stack 1: 0x4C8
- stack 0: 0x20
1011	 FB	MLOAD		 	  ;; # read from x1
- stack 1: 0x4C8
- stack 0: 0x847
1012	 FC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C8
- stack 1: 0x847
- stack 0: 0xFFFFFFFF
1013	 101	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C8
- stack 0: 0x847
1014	 102	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4C8
- stack 1: 0x847
- stack 0: 0x4C8
1015	 103	MLOAD		 	 
- stack 2: 0x4C8
- stack 1: 0x847
- stack 0: 0xF7FFFE012C00000146000701600330008600000095036F00B4FFA000CEFFFF
1016	 104	PUSH1	E0	 	 
- stack 3: 0x4C8
- stack 2: 0x847
- stack 1: 0xF7FFFE012C00000146000701600330008600000095036F00B4FFA000CEFFFF
- stack 0: 0xE0
1017	 106	SHR		 	 
- stack 2: 0x4C8
- stack 1: 0x847
- stack 0: 0xF7FFFE
1018	 107	PUSH2	FFFF	 	 
- stack 3: 0x4C8
- stack 2: 0x847
- stack 1: 0xF7FFFE
- stack 0: 0xFFFF
1019	 10A	AND		 	 
- stack 2: 0x4C8
- stack 1: 0x847
- stack 0: 0xFFFE
1020	 10B	PUSH1	01	 	 
- stack 3: 0x4C8
- stack 2: 0x847
- stack 1: 0xFFFE
- stack 0: 0x1
1021	 10D	SIGNEXTEND		 	 
- stack 2: 0x4C8
- stack 1: 0x847
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1022	 10E	ADD		 	 
- stack 1: 0x4C8
- stack 0: 0x845
1023	 10F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C8
- stack 1: 0x845
- stack 0: 0xFFFFFFFF
1024	 114	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C8
- stack 0: 0x845
1025	 115	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x4C8
- stack 1: 0x845
- stack 0: 0x3
1026	 117	XOR		 	 
- stack 1: 0x4C8
- stack 0: 0x846
1027	 118	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xAA0000EFEF0000000000000000000000000000000000000000000000000000
1028	 119	PUSH1	F8	 	 
- stack 2: 0x4C8
- stack 1: 0xAA0000EFEF0000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
1029	 11B	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x0
1030	 11C	PUSH1	00	 	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x0
1031	 11E	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0x0
1032	 11F	PUSH2	0060	 	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x60
1033	 122	MSTORE		 	  ;; # store to x3
- stack 0: 0x4C8
1034	 123	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
1035	 125	ADD		 	 
- stack 0: 0x4CC
1036	 126	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
1037	 127	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x12C00000146000701600330008600000095036F00B4FFA000CEFFFF00F7FFFF
1038	 128	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x12C00000146000701600330008600000095036F00B4FFA000CEFFFF00F7FFFF
- stack 0: 0xF0
1039	 12A	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x12C
1040	 12B	JUMP		 	 
- stack 0: 0x4CC
1041	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x4CC
1042	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
1043	 12E	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x12C00000146000701600330008600000095036F00B4FFA000CEFFFF00F7FFFF
1044	 12F	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0x12C00000146000701600330008600000095036F00B4FFA000CEFFFF00F7FFFF
- stack 0: 0xE0
1045	 131	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x12C0000
1046	 132	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0x12C0000
- stack 0: 0xFFFF
1047	 135	AND		 	 
- stack 1: 0x4CC
- stack 0: 0x0
1048	 136	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0x0
- stack 0: 0x1
1049	 138	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0x0
1050	 139	PUSH2	03A0	 	 
- stack 2: 0x4CC
- stack 1: 0x0
- stack 0: 0x3A0
1051	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x4CC
1052	 13D	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
1053	 13F	ADD		 	 
- stack 0: 0x4D0
1054	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
1055	 141	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x146000701600330008600000095036F00B4FFA000CEFFFF00F7FFFF012CFFA0
1056	 142	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x146000701600330008600000095036F00B4FFA000CEFFFF00F7FFFF012CFFA0
- stack 0: 0xF0
1057	 144	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x146
1058	 145	JUMP		 	 
- stack 0: 0x4D0
1059	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4D0
1060	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
1061	 148	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x146000701600330008600000095036F00B4FFA000CEFFFF00F7FFFF012CFFA0
1062	 149	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x146000701600330008600000095036F00B4FFA000CEFFFF00F7FFFF012CFFA0
- stack 0: 0xE0
1063	 14B	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x1460007
1064	 14C	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x1460007
- stack 0: 0xFFFF
1065	 14F	AND		 	 
- stack 1: 0x4D0
- stack 0: 0x7
1066	 150	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0x7
- stack 0: 0x1
1067	 152	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0x7
1068	 153	PUSH2	0380	 	 
- stack 2: 0x4D0
- stack 1: 0x7
- stack 0: 0x380
1069	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x4D0
1070	 157	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1071	 159	ADD		 	 
- stack 0: 0x4D4
1072	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1073	 15B	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x1600330008600000095036F00B4FFA000CEFFFF00F7FFFF012CFFA001460008
1074	 15C	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x1600330008600000095036F00B4FFA000CEFFFF00F7FFFF012CFFA001460008
- stack 0: 0xF0
1075	 15E	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x160
1076	 15F	JUMP		 	 
- stack 0: 0x4D4
1077	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x4D4
1078	 161	PUSH2	0060	 	 
- stack 1: 0x4D4
- stack 0: 0x60
1079	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x4D4
- stack 0: 0x0
1080	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1081	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D4
- stack 0: 0x0
1082	 16B	PUSH2	03A0	 	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x3A0
1083	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x0
1084	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1085	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x0
1086	 175	SUB		 	 
- stack 1: 0x4D4
- stack 0: 0x0
1087	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x17E
1088	 179	JUMPI		 	 
- stack 0: 0x4D4
1089	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x4D4
- stack 0: 0x198
1090	 17D	JUMP		 	 
- stack 0: 0x4D4
1091	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x4D4
1092	 199	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1093	 19B	ADD		 	 
- stack 0: 0x4D8
1094	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1095	 19D	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x8600000095036F00B4FFA000CEFFFF00F7FFFF012CFFA00146000801600310
1096	 19E	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x8600000095036F00B4FFA000CEFFFF00F7FFFF012CFFA00146000801600310
- stack 0: 0xF0
1097	 1A0	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x86
1098	 1A1	JUMP		 	 
- stack 0: 0x4D8
1099	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4D8
1100	 87	DUP1		 	 
- stack 1: 0x4D8
- stack 0: 0x4D8
1101	 88	PUSH2	0020	 	 
- stack 2: 0x4D8
- stack 1: 0x4D8
- stack 0: 0x20
1102	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D8
1103	 8C	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1104	 8E	ADD		 	 
- stack 0: 0x4DC
1105	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1106	 90	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x95036F00B4FFA000CEFFFF00F7FFFF012CFFA0014600080160031000860000
1107	 91	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x95036F00B4FFA000CEFFFF00F7FFFF012CFFA0014600080160031000860000
- stack 0: 0xF0
1108	 93	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x95
1109	 94	JUMP		 	 
- stack 0: 0x4DC
1110	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1072(ignore imm)
- stack 0: 0x4DC
1111	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
1112	 97	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x95036F00B4FFA000CEFFFF00F7FFFF012CFFA0014600080160031000860000
1113	 98	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0x95036F00B4FFA000CEFFFF00F7FFFF012CFFA0014600080160031000860000
- stack 0: 0xE0
1114	 9A	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x95036F
1115	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x95036F
- stack 0: 0xFFFF
1116	 9E	AND		 	 
- stack 1: 0x4DC
- stack 0: 0x36F
1117	 9F	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0x36F
- stack 0: 0x1
1118	 A1	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0x36F
1119	 A2	PUSH2	0020	 	 
- stack 2: 0x4DC
- stack 1: 0x36F
- stack 0: 0x20
1120	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4DC
- stack 1: 0x36F
- stack 0: 0x4D8
1121	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4DC
- stack 0: 0x847
1122	 A7	PUSH2	0020	 	 
- stack 2: 0x4DC
- stack 1: 0x847
- stack 0: 0x20
1123	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4DC
1124	 AB	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1125	 AD	ADD		 	 
- stack 0: 0x4E0
1126	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1127	 AF	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xB4FFA000CEFFFF00F7FFFF012CFFA00146000801600310008600000095034F
1128	 B0	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0xB4FFA000CEFFFF00F7FFFF012CFFA00146000801600310008600000095034F
- stack 0: 0xF0
1129	 B2	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xB4
1130	 B3	JUMP		 	 
- stack 0: 0x4E0
1131	 B4	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,-86(ignore imm)
- stack 0: 0x4E0
1132	 B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1133	 B6	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xB4FFA000CEFFFF00F7FFFF012CFFA00146000801600310008600000095034F
1134	 B7	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0xB4FFA000CEFFFF00F7FFFF012CFFA00146000801600310008600000095034F
- stack 0: 0xE0
1135	 B9	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xB4FFA0
1136	 BA	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0xB4FFA0
- stack 0: 0xFFFF
1137	 BD	AND		 	 
- stack 1: 0x4E0
- stack 0: 0xFFA0
1138	 BE	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0xFFA0
- stack 0: 0x1
1139	 C0	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
1140	 C1	PUSH2	0040	 	 
- stack 2: 0x4E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 0: 0x40
1141	 C4	MSTORE		 	  ;; # store to x2
- stack 0: 0x4E0
1142	 C5	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1143	 C7	ADD		 	 
- stack 0: 0x4E4
1144	 C8	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1145	 C9	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0xCEFFFF00F7FFFF012CFFA00146000801600310008600000095034F00B4000A
1146	 CA	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0xCEFFFF00F7FFFF012CFFA00146000801600310008600000095034F00B4000A
- stack 0: 0xF0
1147	 CC	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0xCE
1148	 CD	JUMP		 	 
- stack 0: 0x4E4
1149	 CE	JUMPDEST		 ;; __riscvimpl_SB_0_1_2	  ;; # instr: sb sp,0(ra)(ignore imm)
- stack 0: 0x4E4
1150	 CF	PUSH2	0040	 	 
- stack 1: 0x4E4
- stack 0: 0x40
1151	 D2	MLOAD		 	  ;; # read from x2
- stack 1: 0x4E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
1152	 D3	PUSH2	0020	 	 
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 0: 0x20
1153	 D6	MLOAD		 	  ;; # read from x1
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 0: 0x847
1154	 D7	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x4E4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 1: 0x847
- stack 0: 0x4E4
1155	 D8	MLOAD		 	 
- stack 3: 0x4E4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 1: 0x847
- stack 0: 0xCEFFFF00F7FFFF012CFFA00146000801600310008600000095034F00B4000A
1156	 D9	PUSH1	E0	 	 
- stack 4: 0x4E4
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 2: 0x847
- stack 1: 0xCEFFFF00F7FFFF012CFFA00146000801600310008600000095034F00B4000A
- stack 0: 0xE0
1157	 DB	SHR		 	 
- stack 3: 0x4E4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 1: 0x847
- stack 0: 0xCEFFFF
1158	 DC	PUSH2	FFFF	 	 
- stack 4: 0x4E4
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 2: 0x847
- stack 1: 0xCEFFFF
- stack 0: 0xFFFF
1159	 DF	AND		 	 
- stack 3: 0x4E4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 1: 0x847
- stack 0: 0xFFFF
1160	 E0	PUSH1	01	 	 
- stack 4: 0x4E4
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 2: 0x847
- stack 1: 0xFFFF
- stack 0: 0x1
1161	 E2	SIGNEXTEND		 	 
- stack 3: 0x4E4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 1: 0x847
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1162	 E3	ADD		 	 
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 0: 0x846
1163	 E4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 1: 0x846
- stack 0: 0xFFFFFFFF
1164	 E9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 0: 0x846
1165	 EA	PUSH1	03	 	 
- stack 3: 0x4E4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 1: 0x846
- stack 0: 0x3
1166	 EC	XOR		 	 
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 0: 0x845
1167	 ED	MSTORE8		 	 
- stack 0: 0x4E4
1168	 EE	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1169	 F0	ADD		 	 
- stack 0: 0x4E8
1170	 F1	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1171	 F2	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xF7FFFF012CFFA00146000801600310008600000095034F00B4000A00CE0000
1172	 F3	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0xF7FFFF012CFFA00146000801600310008600000095034F00B4000A00CE0000
- stack 0: 0xF0
1173	 F5	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xF7
1174	 F6	JUMP		 	 
- stack 0: 0x4E8
1175	 F7	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x4E8
1176	 F8	PUSH2	0020	 	 
- stack 1: 0x4E8
- stack 0: 0x20
1177	 FB	MLOAD		 	  ;; # read from x1
- stack 1: 0x4E8
- stack 0: 0x847
1178	 FC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x847
- stack 0: 0xFFFFFFFF
1179	 101	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E8
- stack 0: 0x847
1180	 102	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4E8
- stack 1: 0x847
- stack 0: 0x4E8
1181	 103	MLOAD		 	 
- stack 2: 0x4E8
- stack 1: 0x847
- stack 0: 0xF7FFFF012CFFA00146000801600310008600000095034F00B4000A00CE0000
1182	 104	PUSH1	E0	 	 
- stack 3: 0x4E8
- stack 2: 0x847
- stack 1: 0xF7FFFF012CFFA00146000801600310008600000095034F00B4000A00CE0000
- stack 0: 0xE0
1183	 106	SHR		 	 
- stack 2: 0x4E8
- stack 1: 0x847
- stack 0: 0xF7FFFF
1184	 107	PUSH2	FFFF	 	 
- stack 3: 0x4E8
- stack 2: 0x847
- stack 1: 0xF7FFFF
- stack 0: 0xFFFF
1185	 10A	AND		 	 
- stack 2: 0x4E8
- stack 1: 0x847
- stack 0: 0xFFFF
1186	 10B	PUSH1	01	 	 
- stack 3: 0x4E8
- stack 2: 0x847
- stack 1: 0xFFFF
- stack 0: 0x1
1187	 10D	SIGNEXTEND		 	 
- stack 2: 0x4E8
- stack 1: 0x847
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1188	 10E	ADD		 	 
- stack 1: 0x4E8
- stack 0: 0x846
1189	 10F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x846
- stack 0: 0xFFFFFFFF
1190	 114	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E8
- stack 0: 0x846
1191	 115	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x4E8
- stack 1: 0x846
- stack 0: 0x3
1192	 117	XOR		 	 
- stack 1: 0x4E8
- stack 0: 0x845
1193	 118	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xA000AA0000EFEF00000000000000000000000000000000000000000000000000
1194	 119	PUSH1	F8	 	 
- stack 2: 0x4E8
- stack 1: 0xA000AA0000EFEF00000000000000000000000000000000000000000000000000
- stack 0: 0xF8
1195	 11B	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xA0
1196	 11C	PUSH1	00	 	 
- stack 2: 0x4E8
- stack 1: 0xA0
- stack 0: 0x0
1197	 11E	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
1198	 11F	PUSH2	0060	 	 
- stack 2: 0x4E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 0: 0x60
1199	 122	MSTORE		 	  ;; # store to x3
- stack 0: 0x4E8
1200	 123	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1201	 125	ADD		 	 
- stack 0: 0x4EC
1202	 126	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1203	 127	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x12CFFA00146000801600310008600000095034F00B4000A00CE000000F70000
1204	 128	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x12CFFA00146000801600310008600000095034F00B4000A00CE000000F70000
- stack 0: 0xF0
1205	 12A	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x12C
1206	 12B	JUMP		 	 
- stack 0: 0x4EC
1207	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x4EC
1208	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1209	 12E	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x12CFFA00146000801600310008600000095034F00B4000A00CE000000F70000
1210	 12F	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0x12CFFA00146000801600310008600000095034F00B4000A00CE000000F70000
- stack 0: 0xE0
1211	 131	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x12CFFA0
1212	 132	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x12CFFA0
- stack 0: 0xFFFF
1213	 135	AND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFA0
1214	 136	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xFFA0
- stack 0: 0x1
1215	 138	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
1216	 139	PUSH2	03A0	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 0: 0x3A0
1217	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x4EC
1218	 13D	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1219	 13F	ADD		 	 
- stack 0: 0x4F0
1220	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1221	 141	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x146000801600310008600000095034F00B4000A00CE000000F70000012C000A
1222	 142	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x146000801600310008600000095034F00B4000A00CE000000F70000012C000A
- stack 0: 0xF0
1223	 144	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x146
1224	 145	JUMP		 	 
- stack 0: 0x4F0
1225	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4F0
1226	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F0
- stack 0: 0x4F0
1227	 148	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x146000801600310008600000095034F00B4000A00CE000000F70000012C000A
1228	 149	PUSH1	E0	 	 
- stack 2: 0x4F0
- stack 1: 0x146000801600310008600000095034F00B4000A00CE000000F70000012C000A
- stack 0: 0xE0
1229	 14B	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x1460008
1230	 14C	PUSH2	FFFF	 	 
- stack 2: 0x4F0
- stack 1: 0x1460008
- stack 0: 0xFFFF
1231	 14F	AND		 	 
- stack 1: 0x4F0
- stack 0: 0x8
1232	 150	PUSH1	01	 	 
- stack 2: 0x4F0
- stack 1: 0x8
- stack 0: 0x1
1233	 152	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0x8
1234	 153	PUSH2	0380	 	 
- stack 2: 0x4F0
- stack 1: 0x8
- stack 0: 0x380
1235	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x4F0
1236	 157	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1237	 159	ADD		 	 
- stack 0: 0x4F4
1238	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1239	 15B	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x1600310008600000095034F00B4000A00CE000000F70000012C000A01460009
1240	 15C	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x1600310008600000095034F00B4000A00CE000000F70000012C000A01460009
- stack 0: 0xF0
1241	 15E	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x160
1242	 15F	JUMP		 	 
- stack 0: 0x4F4
1243	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x4F4
1244	 161	PUSH2	0060	 	 
- stack 1: 0x4F4
- stack 0: 0x60
1245	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x4F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
1246	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 0: 0xFFFFFFFF
1247	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F4
- stack 0: 0xFFFFFFA0
1248	 16B	PUSH2	03A0	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFFFFA0
- stack 0: 0x3A0
1249	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x4F4
- stack 1: 0xFFFFFFA0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
1250	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4F4
- stack 2: 0xFFFFFFA0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0
- stack 0: 0xFFFFFFFF
1251	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4F4
- stack 1: 0xFFFFFFA0
- stack 0: 0xFFFFFFA0
1252	 175	SUB		 	 
- stack 1: 0x4F4
- stack 0: 0x0
1253	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x4F4
- stack 1: 0x0
- stack 0: 0x17E
1254	 179	JUMPI		 	 
- stack 0: 0x4F4
1255	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x4F4
- stack 0: 0x198
1256	 17D	JUMP		 	 
- stack 0: 0x4F4
1257	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x4F4
1258	 199	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1259	 19B	ADD		 	 
- stack 0: 0x4F8
1260	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1261	 19D	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x8600000095034F00B4000A00CE000000F70000012C000A01460009016002F0
1262	 19E	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x8600000095034F00B4000A00CE000000F70000012C000A01460009016002F0
- stack 0: 0xF0
1263	 1A0	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x86
1264	 1A1	JUMP		 	 
- stack 0: 0x4F8
1265	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4F8
1266	 87	DUP1		 	 
- stack 1: 0x4F8
- stack 0: 0x4F8
1267	 88	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0x4F8
- stack 0: 0x20
1268	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F8
1269	 8C	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1270	 8E	ADD		 	 
- stack 0: 0x4FC
1271	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1272	 90	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x95034F00B4000A00CE000000F70000012C000A01460009016002F000860000
1273	 91	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x95034F00B4000A00CE000000F70000012C000A01460009016002F000860000
- stack 0: 0xF0
1274	 93	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x95
1275	 94	JUMP		 	 
- stack 0: 0x4FC
1276	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1072(ignore imm)
- stack 0: 0x4FC
1277	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1278	 97	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x95034F00B4000A00CE000000F70000012C000A01460009016002F000860000
1279	 98	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x95034F00B4000A00CE000000F70000012C000A01460009016002F000860000
- stack 0: 0xE0
1280	 9A	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x95034F
1281	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x95034F
- stack 0: 0xFFFF
1282	 9E	AND		 	 
- stack 1: 0x4FC
- stack 0: 0x34F
1283	 9F	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0x34F
- stack 0: 0x1
1284	 A1	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0x34F
1285	 A2	PUSH2	0020	 	 
- stack 2: 0x4FC
- stack 1: 0x34F
- stack 0: 0x20
1286	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4FC
- stack 1: 0x34F
- stack 0: 0x4F8
1287	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4FC
- stack 0: 0x847
1288	 A7	PUSH2	0020	 	 
- stack 2: 0x4FC
- stack 1: 0x847
- stack 0: 0x20
1289	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4FC
1290	 AB	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1291	 AD	ADD		 	 
- stack 0: 0x500
1292	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1293	 AF	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0xB4000A00CE000000F70000012C000A01460009016002F00086000000950330
1294	 B0	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0xB4000A00CE000000F70000012C000A01460009016002F00086000000950330
- stack 0: 0xF0
1295	 B2	SHR		 	 
- stack 1: 0x500
- stack 0: 0xB4
1296	 B3	JUMP		 	 
- stack 0: 0x500
1297	 B4	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,-86(ignore imm)
- stack 0: 0x500
1298	 B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1299	 B6	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0xB4000A00CE000000F70000012C000A01460009016002F00086000000950330
1300	 B7	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0xB4000A00CE000000F70000012C000A01460009016002F00086000000950330
- stack 0: 0xE0
1301	 B9	SHR		 	 
- stack 1: 0x500
- stack 0: 0xB4000A
1302	 BA	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0xB4000A
- stack 0: 0xFFFF
1303	 BD	AND		 	 
- stack 1: 0x500
- stack 0: 0xA
1304	 BE	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0xA
- stack 0: 0x1
1305	 C0	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0xA
1306	 C1	PUSH2	0040	 	 
- stack 2: 0x500
- stack 1: 0xA
- stack 0: 0x40
1307	 C4	MSTORE		 	  ;; # store to x2
- stack 0: 0x500
1308	 C5	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1309	 C7	ADD		 	 
- stack 0: 0x504
1310	 C8	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1311	 C9	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0xCE000000F70000012C000A01460009016002F00086000000950330023B2345
1312	 CA	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0xCE000000F70000012C000A01460009016002F00086000000950330023B2345
- stack 0: 0xF0
1313	 CC	SHR		 	 
- stack 1: 0x504
- stack 0: 0xCE
1314	 CD	JUMP		 	 
- stack 0: 0x504
1315	 CE	JUMPDEST		 ;; __riscvimpl_SB_0_1_2	  ;; # instr: sb sp,0(ra)(ignore imm)
- stack 0: 0x504
1316	 CF	PUSH2	0040	 	 
- stack 1: 0x504
- stack 0: 0x40
1317	 D2	MLOAD		 	  ;; # read from x2
- stack 1: 0x504
- stack 0: 0xA
1318	 D3	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0xA
- stack 0: 0x20
1319	 D6	MLOAD		 	  ;; # read from x1
- stack 2: 0x504
- stack 1: 0xA
- stack 0: 0x847
1320	 D7	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x504
- stack 2: 0xA
- stack 1: 0x847
- stack 0: 0x504
1321	 D8	MLOAD		 	 
- stack 3: 0x504
- stack 2: 0xA
- stack 1: 0x847
- stack 0: 0xCE000000F70000012C000A01460009016002F00086000000950330023B2345
1322	 D9	PUSH1	E0	 	 
- stack 4: 0x504
- stack 3: 0xA
- stack 2: 0x847
- stack 1: 0xCE000000F70000012C000A01460009016002F00086000000950330023B2345
- stack 0: 0xE0
1323	 DB	SHR		 	 
- stack 3: 0x504
- stack 2: 0xA
- stack 1: 0x847
- stack 0: 0xCE0000
1324	 DC	PUSH2	FFFF	 	 
- stack 4: 0x504
- stack 3: 0xA
- stack 2: 0x847
- stack 1: 0xCE0000
- stack 0: 0xFFFF
1325	 DF	AND		 	 
- stack 3: 0x504
- stack 2: 0xA
- stack 1: 0x847
- stack 0: 0x0
1326	 E0	PUSH1	01	 	 
- stack 4: 0x504
- stack 3: 0xA
- stack 2: 0x847
- stack 1: 0x0
- stack 0: 0x1
1327	 E2	SIGNEXTEND		 	 
- stack 3: 0x504
- stack 2: 0xA
- stack 1: 0x847
- stack 0: 0x0
1328	 E3	ADD		 	 
- stack 2: 0x504
- stack 1: 0xA
- stack 0: 0x847
1329	 E4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x504
- stack 2: 0xA
- stack 1: 0x847
- stack 0: 0xFFFFFFFF
1330	 E9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x504
- stack 1: 0xA
- stack 0: 0x847
1331	 EA	PUSH1	03	 	 
- stack 3: 0x504
- stack 2: 0xA
- stack 1: 0x847
- stack 0: 0x3
1332	 EC	XOR		 	 
- stack 2: 0x504
- stack 1: 0xA
- stack 0: 0x844
1333	 ED	MSTORE8		 	 
- stack 0: 0x504
1334	 EE	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1335	 F0	ADD		 	 
- stack 0: 0x508
1336	 F1	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1337	 F2	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xF70000012C000A01460009016002F00086000000950330023B234501B50678
1338	 F3	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xF70000012C000A01460009016002F00086000000950330023B234501B50678
- stack 0: 0xF0
1339	 F5	SHR		 	 
- stack 1: 0x508
- stack 0: 0xF7
1340	 F6	JUMP		 	 
- stack 0: 0x508
1341	 F7	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x508
1342	 F8	PUSH2	0020	 	 
- stack 1: 0x508
- stack 0: 0x20
1343	 FB	MLOAD		 	  ;; # read from x1
- stack 1: 0x508
- stack 0: 0x847
1344	 FC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x508
- stack 1: 0x847
- stack 0: 0xFFFFFFFF
1345	 101	AND		 	  ;; # mask to 32 bits
- stack 1: 0x508
- stack 0: 0x847
1346	 102	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x508
- stack 1: 0x847
- stack 0: 0x508
1347	 103	MLOAD		 	 
- stack 2: 0x508
- stack 1: 0x847
- stack 0: 0xF70000012C000A01460009016002F00086000000950330023B234501B50678
1348	 104	PUSH1	E0	 	 
- stack 3: 0x508
- stack 2: 0x847
- stack 1: 0xF70000012C000A01460009016002F00086000000950330023B234501B50678
- stack 0: 0xE0
1349	 106	SHR		 	 
- stack 2: 0x508
- stack 1: 0x847
- stack 0: 0xF70000
1350	 107	PUSH2	FFFF	 	 
- stack 3: 0x508
- stack 2: 0x847
- stack 1: 0xF70000
- stack 0: 0xFFFF
1351	 10A	AND		 	 
- stack 2: 0x508
- stack 1: 0x847
- stack 0: 0x0
1352	 10B	PUSH1	01	 	 
- stack 3: 0x508
- stack 2: 0x847
- stack 1: 0x0
- stack 0: 0x1
1353	 10D	SIGNEXTEND		 	 
- stack 2: 0x508
- stack 1: 0x847
- stack 0: 0x0
1354	 10E	ADD		 	 
- stack 1: 0x508
- stack 0: 0x847
1355	 10F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x508
- stack 1: 0x847
- stack 0: 0xFFFFFFFF
1356	 114	AND		 	  ;; # mask to 32 bits
- stack 1: 0x508
- stack 0: 0x847
1357	 115	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x508
- stack 1: 0x847
- stack 0: 0x3
1358	 117	XOR		 	 
- stack 1: 0x508
- stack 0: 0x844
1359	 118	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xAA000AA0000EFEF000000000000000000000000000000000000000000000000
1360	 119	PUSH1	F8	 	 
- stack 2: 0x508
- stack 1: 0xAA000AA0000EFEF000000000000000000000000000000000000000000000000
- stack 0: 0xF8
1361	 11B	SHR		 	 
- stack 1: 0x508
- stack 0: 0xA
1362	 11C	PUSH1	00	 	 
- stack 2: 0x508
- stack 1: 0xA
- stack 0: 0x0
1363	 11E	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xA
1364	 11F	PUSH2	0060	 	 
- stack 2: 0x508
- stack 1: 0xA
- stack 0: 0x60
1365	 122	MSTORE		 	  ;; # store to x3
- stack 0: 0x508
1366	 123	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1367	 125	ADD		 	 
- stack 0: 0x50C
1368	 126	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1369	 127	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x12C000A01460009016002F00086000000950330023B234501B50678024EFFE0
1370	 128	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x12C000A01460009016002F00086000000950330023B234501B50678024EFFE0
- stack 0: 0xF0
1371	 12A	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x12C
1372	 12B	JUMP		 	 
- stack 0: 0x50C
1373	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x50C
1374	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1375	 12E	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x12C000A01460009016002F00086000000950330023B234501B50678024EFFE0
1376	 12F	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0x12C000A01460009016002F00086000000950330023B234501B50678024EFFE0
- stack 0: 0xE0
1377	 131	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x12C000A
1378	 132	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0x12C000A
- stack 0: 0xFFFF
1379	 135	AND		 	 
- stack 1: 0x50C
- stack 0: 0xA
1380	 136	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xA
- stack 0: 0x1
1381	 138	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xA
1382	 139	PUSH2	03A0	 	 
- stack 2: 0x50C
- stack 1: 0xA
- stack 0: 0x3A0
1383	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x50C
1384	 13D	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1385	 13F	ADD		 	 
- stack 0: 0x510
1386	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1387	 141	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1460009016002F00086000000950330023B234501B50678024EFFE0026D0020
1388	 142	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x1460009016002F00086000000950330023B234501B50678024EFFE0026D0020
- stack 0: 0xF0
1389	 144	SHR		 	 
- stack 1: 0x510
- stack 0: 0x146
1390	 145	JUMP		 	 
- stack 0: 0x510
1391	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x510
1392	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1393	 148	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1460009016002F00086000000950330023B234501B50678024EFFE0026D0020
1394	 149	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0x1460009016002F00086000000950330023B234501B50678024EFFE0026D0020
- stack 0: 0xE0
1395	 14B	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1460009
1396	 14C	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0x1460009
- stack 0: 0xFFFF
1397	 14F	AND		 	 
- stack 1: 0x510
- stack 0: 0x9
1398	 150	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x9
- stack 0: 0x1
1399	 152	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0x9
1400	 153	PUSH2	0380	 	 
- stack 2: 0x510
- stack 1: 0x9
- stack 0: 0x380
1401	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x510
1402	 157	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1403	 159	ADD		 	 
- stack 0: 0x514
1404	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1405	 15B	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x16002F00086000000950330023B234501B50678024EFFE0026D002000F70000
1406	 15C	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x16002F00086000000950330023B234501B50678024EFFE0026D002000F70000
- stack 0: 0xF0
1407	 15E	SHR		 	 
- stack 1: 0x514
- stack 0: 0x160
1408	 15F	JUMP		 	 
- stack 0: 0x514
1409	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x514
1410	 161	PUSH2	0060	 	 
- stack 1: 0x514
- stack 0: 0x60
1411	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x514
- stack 0: 0xA
1412	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x514
- stack 1: 0xA
- stack 0: 0xFFFFFFFF
1413	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x514
- stack 0: 0xA
1414	 16B	PUSH2	03A0	 	 
- stack 2: 0x514
- stack 1: 0xA
- stack 0: 0x3A0
1415	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x514
- stack 1: 0xA
- stack 0: 0xA
1416	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x514
- stack 2: 0xA
- stack 1: 0xA
- stack 0: 0xFFFFFFFF
1417	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x514
- stack 1: 0xA
- stack 0: 0xA
1418	 175	SUB		 	 
- stack 1: 0x514
- stack 0: 0x0
1419	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0x17E
1420	 179	JUMPI		 	 
- stack 0: 0x514
1421	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x514
- stack 0: 0x198
1422	 17D	JUMP		 	 
- stack 0: 0x514
1423	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x514
1424	 199	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1425	 19B	ADD		 	 
- stack 0: 0x518
1426	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1427	 19D	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x86000000950330023B234501B50678024EFFE0026D002000F70000012C0078
1428	 19E	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x86000000950330023B234501B50678024EFFE0026D002000F70000012C0078
- stack 0: 0xF0
1429	 1A0	SHR		 	 
- stack 1: 0x518
- stack 0: 0x86
1430	 1A1	JUMP		 	 
- stack 0: 0x518
1431	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x518
1432	 87	DUP1		 	 
- stack 1: 0x518
- stack 0: 0x518
1433	 88	PUSH2	0020	 	 
- stack 2: 0x518
- stack 1: 0x518
- stack 0: 0x20
1434	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x518
1435	 8C	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1436	 8E	ADD		 	 
- stack 0: 0x51C
1437	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1438	 90	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x950330023B234501B50678024EFFE0026D002000F70000012C00780146000A
1439	 91	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x950330023B234501B50678024EFFE0026D002000F70000012C00780146000A
- stack 0: 0xF0
1440	 93	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x95
1441	 94	JUMP		 	 
- stack 0: 0x51C
1442	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1072(ignore imm)
- stack 0: 0x51C
1443	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1444	 97	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x950330023B234501B50678024EFFE0026D002000F70000012C00780146000A
1445	 98	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x950330023B234501B50678024EFFE0026D002000F70000012C00780146000A
- stack 0: 0xE0
1446	 9A	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x950330
1447	 9B	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x950330
- stack 0: 0xFFFF
1448	 9E	AND		 	 
- stack 1: 0x51C
- stack 0: 0x330
1449	 9F	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x330
- stack 0: 0x1
1450	 A1	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x330
1451	 A2	PUSH2	0020	 	 
- stack 2: 0x51C
- stack 1: 0x330
- stack 0: 0x20
1452	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x51C
- stack 1: 0x330
- stack 0: 0x518
1453	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x51C
- stack 0: 0x848
1454	 A7	PUSH2	0020	 	 
- stack 2: 0x51C
- stack 1: 0x848
- stack 0: 0x20
1455	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x51C
1456	 AB	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1457	 AD	ADD		 	 
- stack 0: 0x520
1458	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1459	 AF	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x23B234501B50678024EFFE0026D002000F70000012C00780146000A016002C8
1460	 B0	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x23B234501B50678024EFFE0026D002000F70000012C00780146000A016002C8
- stack 0: 0xF0
1461	 B2	SHR		 	 
- stack 1: 0x520
- stack 0: 0x23B
1462	 B3	JUMP		 	 
- stack 0: 0x520
1463	 23B	JUMPDEST		 ;; __riscvimpl_LUI_12345137	  ;; # instr: lui sp,0x12345(ignore imm)
- stack 0: 0x520
1464	 23C	PUSH4	12345000	 	 
- stack 1: 0x520
- stack 0: 0x12345000
1465	 241	PUSH2	0040	 	 
- stack 2: 0x520
- stack 1: 0x12345000
- stack 0: 0x40
1466	 244	MSTORE		 	  ;; # store to x2
- stack 0: 0x520
1467	 245	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1468	 247	ADD		 	 
- stack 0: 0x524
1469	 248	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1470	 249	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x1B50678024EFFE0026D002000F70000012C00780146000A016002C800860000
1471	 24A	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x1B50678024EFFE0026D002000F70000012C00780146000A016002C800860000
- stack 0: 0xF0
1472	 24C	SHR		 	 
- stack 1: 0x524
- stack 0: 0x1B5
1473	 24D	JUMP		 	 
- stack 0: 0x524
1474	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x524
1475	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1476	 1B7	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x1B50678024EFFE0026D002000F70000012C00780146000A016002C800860000
1477	 1B8	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x1B50678024EFFE0026D002000F70000012C00780146000A016002C800860000
- stack 0: 0xE0
1478	 1BA	SHR		 	 
- stack 1: 0x524
- stack 0: 0x1B50678
1479	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x1B50678
- stack 0: 0xFFFF
1480	 1BE	AND		 	 
- stack 1: 0x524
- stack 0: 0x678
1481	 1BF	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0x678
- stack 0: 0x1
1482	 1C1	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0x678
1483	 1C2	PUSH2	0040	 	 
- stack 2: 0x524
- stack 1: 0x678
- stack 0: 0x40
1484	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x524
- stack 1: 0x678
- stack 0: 0x12345000
1485	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x524
- stack 0: 0x12345678
1486	 1C7	PUSH2	0040	 	 
- stack 2: 0x524
- stack 1: 0x12345678
- stack 0: 0x40
1487	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x524
1488	 1CB	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1489	 1CD	ADD		 	 
- stack 0: 0x528
1490	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1491	 1CF	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x24EFFE0026D002000F70000012C00780146000A016002C80086000000950308
1492	 1D0	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x24EFFE0026D002000F70000012C00780146000A016002C80086000000950308
- stack 0: 0xF0
1493	 1D2	SHR		 	 
- stack 1: 0x528
- stack 0: 0x24E
1494	 1D3	JUMP		 	 
- stack 0: 0x528
1495	 24E	JUMPDEST		 ;; __riscvimpl_ADDI_4_1_0	  ;; # instr: addi tp,ra,-32(ignore imm)
- stack 0: 0x528
1496	 24F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1497	 250	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x24EFFE0026D002000F70000012C00780146000A016002C80086000000950308
1498	 251	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0x24EFFE0026D002000F70000012C00780146000A016002C80086000000950308
- stack 0: 0xE0
1499	 253	SHR		 	 
- stack 1: 0x528
- stack 0: 0x24EFFE0
1500	 254	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0x24EFFE0
- stack 0: 0xFFFF
1501	 257	AND		 	 
- stack 1: 0x528
- stack 0: 0xFFE0
1502	 258	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0xFFE0
- stack 0: 0x1
1503	 25A	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1504	 25B	PUSH2	0020	 	 
- stack 2: 0x528
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x20
1505	 25E	MLOAD		 	  ;; # read from x1
- stack 2: 0x528
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x848
1506	 25F	ADD		 	  ;; # ADDI 1
- stack 1: 0x528
- stack 0: 0x828
1507	 260	PUSH2	0080	 	 
- stack 2: 0x528
- stack 1: 0x828
- stack 0: 0x80
1508	 263	MSTORE		 	  ;; # store to x4
- stack 0: 0x528
1509	 264	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1510	 266	ADD		 	 
- stack 0: 0x52C
1511	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1512	 268	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x26D002000F70000012C00780146000A016002C8008600000095030802960003
1513	 269	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x26D002000F70000012C00780146000A016002C8008600000095030802960003
- stack 0: 0xF0
1514	 26B	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x26D
1515	 26C	JUMP		 	 
- stack 0: 0x52C
1516	 26D	JUMPDEST		 ;; __riscvimpl_SB_0_4_2	  ;; # instr: sb sp,32(tp)(ignore imm)
- stack 0: 0x52C
1517	 26E	PUSH2	0040	 	 
- stack 1: 0x52C
- stack 0: 0x40
1518	 271	MLOAD		 	  ;; # read from x2
- stack 1: 0x52C
- stack 0: 0x12345678
1519	 272	PUSH2	0080	 	 
- stack 2: 0x52C
- stack 1: 0x12345678
- stack 0: 0x80
1520	 275	MLOAD		 	  ;; # read from x4
- stack 2: 0x52C
- stack 1: 0x12345678
- stack 0: 0x828
1521	 276	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x52C
- stack 2: 0x12345678
- stack 1: 0x828
- stack 0: 0x52C
1522	 277	MLOAD		 	 
- stack 3: 0x52C
- stack 2: 0x12345678
- stack 1: 0x828
- stack 0: 0x26D002000F70000012C00780146000A016002C8008600000095030802960003
1523	 278	PUSH1	E0	 	 
- stack 4: 0x52C
- stack 3: 0x12345678
- stack 2: 0x828
- stack 1: 0x26D002000F70000012C00780146000A016002C8008600000095030802960003
- stack 0: 0xE0
1524	 27A	SHR		 	 
- stack 3: 0x52C
- stack 2: 0x12345678
- stack 1: 0x828
- stack 0: 0x26D0020
1525	 27B	PUSH2	FFFF	 	 
- stack 4: 0x52C
- stack 3: 0x12345678
- stack 2: 0x828
- stack 1: 0x26D0020
- stack 0: 0xFFFF
1526	 27E	AND		 	 
- stack 3: 0x52C
- stack 2: 0x12345678
- stack 1: 0x828
- stack 0: 0x20
1527	 27F	PUSH1	01	 	 
- stack 4: 0x52C
- stack 3: 0x12345678
- stack 2: 0x828
- stack 1: 0x20
- stack 0: 0x1
1528	 281	SIGNEXTEND		 	 
- stack 3: 0x52C
- stack 2: 0x12345678
- stack 1: 0x828
- stack 0: 0x20
1529	 282	ADD		 	 
- stack 2: 0x52C
- stack 1: 0x12345678
- stack 0: 0x848
1530	 283	PUSH4	FFFFFFFF	 	 
- stack 3: 0x52C
- stack 2: 0x12345678
- stack 1: 0x848
- stack 0: 0xFFFFFFFF
1531	 288	AND		 	  ;; # mask to 32 bits
- stack 2: 0x52C
- stack 1: 0x12345678
- stack 0: 0x848
1532	 289	PUSH1	03	 	 
- stack 3: 0x52C
- stack 2: 0x12345678
- stack 1: 0x848
- stack 0: 0x3
1533	 28B	XOR		 	 
- stack 2: 0x52C
- stack 1: 0x12345678
- stack 0: 0x84B
1534	 28C	MSTORE8		 	 
- stack 0: 0x52C
1535	 28D	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1536	 28F	ADD		 	 
- stack 0: 0x530
1537	 290	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1538	 291	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xF70000012C00780146000A016002C800860000009503080296000301B50098
1539	 292	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0xF70000012C00780146000A016002C800860000009503080296000301B50098
- stack 0: 0xF0
1540	 294	SHR		 	 
- stack 1: 0x530
- stack 0: 0xF7
1541	 295	JUMP		 	 
- stack 0: 0x530
1542	 F7	JUMPDEST		 ;; __riscvimpl_LB_3_1_0	  ;; # instr: lb gp,0(ra)(ignore imm)
- stack 0: 0x530
1543	 F8	PUSH2	0020	 	 
- stack 1: 0x530
- stack 0: 0x20
1544	 FB	MLOAD		 	  ;; # read from x1
- stack 1: 0x530
- stack 0: 0x848
1545	 FC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x530
- stack 1: 0x848
- stack 0: 0xFFFFFFFF
1546	 101	AND		 	  ;; # mask to 32 bits
- stack 1: 0x530
- stack 0: 0x848
1547	 102	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x530
- stack 1: 0x848
- stack 0: 0x530
1548	 103	MLOAD		 	 
- stack 2: 0x530
- stack 1: 0x848
- stack 0: 0xF70000012C00780146000A016002C800860000009503080296000301B50098
1549	 104	PUSH1	E0	 	 
- stack 3: 0x530
- stack 2: 0x848
- stack 1: 0xF70000012C00780146000A016002C800860000009503080296000301B50098
- stack 0: 0xE0
1550	 106	SHR		 	 
- stack 2: 0x530
- stack 1: 0x848
- stack 0: 0xF70000
1551	 107	PUSH2	FFFF	 	 
- stack 3: 0x530
- stack 2: 0x848
- stack 1: 0xF70000
- stack 0: 0xFFFF
1552	 10A	AND		 	 
- stack 2: 0x530
- stack 1: 0x848
- stack 0: 0x0
1553	 10B	PUSH1	01	 	 
- stack 3: 0x530
- stack 2: 0x848
- stack 1: 0x0
- stack 0: 0x1
1554	 10D	SIGNEXTEND		 	 
- stack 2: 0x530
- stack 1: 0x848
- stack 0: 0x0
1555	 10E	ADD		 	 
- stack 1: 0x530
- stack 0: 0x848
1556	 10F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x530
- stack 1: 0x848
- stack 0: 0xFFFFFFFF
1557	 114	AND		 	  ;; # mask to 32 bits
- stack 1: 0x530
- stack 0: 0x848
1558	 115	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x530
- stack 1: 0x848
- stack 0: 0x3
1559	 117	XOR		 	 
- stack 1: 0x530
- stack 0: 0x84B
1560	 118	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x7800000000000000000000000000000000000000000000000000000000000000
1561	 119	PUSH1	F8	 	 
- stack 2: 0x530
- stack 1: 0x7800000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
1562	 11B	SHR		 	 
- stack 1: 0x530
- stack 0: 0x78
1563	 11C	PUSH1	00	 	 
- stack 2: 0x530
- stack 1: 0x78
- stack 0: 0x0
1564	 11E	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0x78
1565	 11F	PUSH2	0060	 	 
- stack 2: 0x530
- stack 1: 0x78
- stack 0: 0x60
1566	 122	MSTORE		 	  ;; # store to x3
- stack 0: 0x530
1567	 123	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1568	 125	ADD		 	 
- stack 0: 0x534
1569	 126	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1570	 127	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x12C00780146000A016002C800860000009503080296000301B500980095FFFA
1571	 128	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x12C00780146000A016002C800860000009503080296000301B500980095FFFA
- stack 0: 0xF0
1572	 12A	SHR		 	 
- stack 1: 0x534
- stack 0: 0x12C
1573	 12B	JUMP		 	 
- stack 0: 0x534
1574	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x534
1575	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1576	 12E	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x12C00780146000A016002C800860000009503080296000301B500980095FFFA
1577	 12F	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x12C00780146000A016002C800860000009503080296000301B500980095FFFA
- stack 0: 0xE0
1578	 131	SHR		 	 
- stack 1: 0x534
- stack 0: 0x12C0078
1579	 132	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x12C0078
- stack 0: 0xFFFF
1580	 135	AND		 	 
- stack 1: 0x534
- stack 0: 0x78
1581	 136	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0x78
- stack 0: 0x1
1582	 138	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0x78
1583	 139	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0x78
- stack 0: 0x3A0
1584	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x534
1585	 13D	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1586	 13F	ADD		 	 
- stack 0: 0x538
1587	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1588	 141	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x146000A016002C800860000009503080296000301B500980095FFFA00CE0007
1589	 142	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x146000A016002C800860000009503080296000301B500980095FFFA00CE0007
- stack 0: 0xF0
1590	 144	SHR		 	 
- stack 1: 0x538
- stack 0: 0x146
1591	 145	JUMP		 	 
- stack 0: 0x538
1592	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x538
1593	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1594	 148	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x146000A016002C800860000009503080296000301B500980095FFFA00CE0007
1595	 149	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x146000A016002C800860000009503080296000301B500980095FFFA00CE0007
- stack 0: 0xE0
1596	 14B	SHR		 	 
- stack 1: 0x538
- stack 0: 0x146000A
1597	 14C	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x146000A
- stack 0: 0xFFFF
1598	 14F	AND		 	 
- stack 1: 0x538
- stack 0: 0xA
1599	 150	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0xA
- stack 0: 0x1
1600	 152	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0xA
1601	 153	PUSH2	0380	 	 
- stack 2: 0x538
- stack 1: 0xA
- stack 0: 0x380
1602	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x538
1603	 157	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1604	 159	ADD		 	 
- stack 0: 0x53C
1605	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1606	 15B	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x16002C800860000009503080296000301B500980095FFFA00CE000702A90000
1607	 15C	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x16002C800860000009503080296000301B500980095FFFA00CE000702A90000
- stack 0: 0xF0
1608	 15E	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x160
1609	 15F	JUMP		 	 
- stack 0: 0x53C
1610	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x53C
1611	 161	PUSH2	0060	 	 
- stack 1: 0x53C
- stack 0: 0x60
1612	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x53C
- stack 0: 0x78
1613	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x53C
- stack 1: 0x78
- stack 0: 0xFFFFFFFF
1614	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x53C
- stack 0: 0x78
1615	 16B	PUSH2	03A0	 	 
- stack 2: 0x53C
- stack 1: 0x78
- stack 0: 0x3A0
1616	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x53C
- stack 1: 0x78
- stack 0: 0x78
1617	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x53C
- stack 2: 0x78
- stack 1: 0x78
- stack 0: 0xFFFFFFFF
1618	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x53C
- stack 1: 0x78
- stack 0: 0x78
1619	 175	SUB		 	 
- stack 1: 0x53C
- stack 0: 0x0
1620	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0x17E
1621	 179	JUMPI		 	 
- stack 0: 0x53C
1622	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x53C
- stack 0: 0x198
1623	 17D	JUMP		 	 
- stack 0: 0x53C
1624	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x53C
1625	 199	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1626	 19B	ADD		 	 
- stack 0: 0x540
1627	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1628	 19D	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x860000009503080296000301B500980095FFFA00CE000702A9000002B802F1
1629	 19E	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x860000009503080296000301B500980095FFFA00CE000702A9000002B802F1
- stack 0: 0xF0
1630	 1A0	SHR		 	 
- stack 1: 0x540
- stack 0: 0x86
1631	 1A1	JUMP		 	 
- stack 0: 0x540
1632	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x540
1633	 87	DUP1		 	 
- stack 1: 0x540
- stack 0: 0x540
1634	 88	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0x540
- stack 0: 0x20
1635	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
1636	 8C	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1637	 8E	ADD		 	 
- stack 0: 0x544
1638	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1639	 90	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x9503080296000301B500980095FFFA00CE000702A9000002B802F102D70000
1640	 91	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x9503080296000301B500980095FFFA00CE000702A9000002B802F102D70000
- stack 0: 0xF0
1641	 93	SHR		 	 
- stack 1: 0x544
- stack 0: 0x95
1642	 94	JUMP		 	 
- stack 0: 0x544
1643	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1072(ignore imm)
- stack 0: 0x544
1644	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1645	 97	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x9503080296000301B500980095FFFA00CE000702A9000002B802F102D70000
1646	 98	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x9503080296000301B500980095FFFA00CE000702A9000002B802F102D70000
- stack 0: 0xE0
1647	 9A	SHR		 	 
- stack 1: 0x544
- stack 0: 0x950308
1648	 9B	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x950308
- stack 0: 0xFFFF
1649	 9E	AND		 	 
- stack 1: 0x544
- stack 0: 0x308
1650	 9F	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x308
- stack 0: 0x1
1651	 A1	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x308
1652	 A2	PUSH2	0020	 	 
- stack 2: 0x544
- stack 1: 0x308
- stack 0: 0x20
1653	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x544
- stack 1: 0x308
- stack 0: 0x540
1654	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x544
- stack 0: 0x848
1655	 A7	PUSH2	0020	 	 
- stack 2: 0x544
- stack 1: 0x848
- stack 0: 0x20
1656	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x544
1657	 AB	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1658	 AD	ADD		 	 
- stack 0: 0x548
1659	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1660	 AF	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x296000301B500980095FFFA00CE000702A9000002B802F102D70000012CFF98
1661	 B0	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x296000301B500980095FFFA00CE000702A9000002B802F102D70000012CFF98
- stack 0: 0xF0
1662	 B2	SHR		 	 
- stack 1: 0x548
- stack 0: 0x296
1663	 B3	JUMP		 	 
- stack 0: 0x548
1664	 296	JUMPDEST		 ;; __riscvimpl_LUI_3137	  ;; # instr: lui sp,0x3(ignore imm)
- stack 0: 0x548
1665	 297	PUSH4	00003000	 	 
- stack 1: 0x548
- stack 0: 0x3000
1666	 29C	PUSH2	0040	 	 
- stack 2: 0x548
- stack 1: 0x3000
- stack 0: 0x40
1667	 29F	MSTORE		 	  ;; # store to x2
- stack 0: 0x548
1668	 2A0	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1669	 2A2	ADD		 	 
- stack 0: 0x54C
1670	 2A3	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1671	 2A4	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x1B500980095FFFA00CE000702A9000002B802F102D70000012CFF980146000B
1672	 2A5	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x1B500980095FFFA00CE000702A9000002B802F102D70000012CFF980146000B
- stack 0: 0xF0
1673	 2A7	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1B5
1674	 2A8	JUMP		 	 
- stack 0: 0x54C
1675	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x54C
1676	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1677	 1B7	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x1B500980095FFFA00CE000702A9000002B802F102D70000012CFF980146000B
1678	 1B8	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x1B500980095FFFA00CE000702A9000002B802F102D70000012CFF980146000B
- stack 0: 0xE0
1679	 1BA	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1B50098
1680	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x1B50098
- stack 0: 0xFFFF
1681	 1BE	AND		 	 
- stack 1: 0x54C
- stack 0: 0x98
1682	 1BF	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x98
- stack 0: 0x1
1683	 1C1	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x98
1684	 1C2	PUSH2	0040	 	 
- stack 2: 0x54C
- stack 1: 0x98
- stack 0: 0x40
1685	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x54C
- stack 1: 0x98
- stack 0: 0x3000
1686	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x54C
- stack 0: 0x3098
1687	 1C7	PUSH2	0040	 	 
- stack 2: 0x54C
- stack 1: 0x3098
- stack 0: 0x40
1688	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x54C
1689	 1CB	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1690	 1CD	ADD		 	 
- stack 0: 0x550
1691	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1692	 1CF	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x95FFFA00CE000702A9000002B802F102D70000012CFF980146000B01600298
1693	 1D0	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x95FFFA00CE000702A9000002B802F102D70000012CFF980146000B01600298
- stack 0: 0xF0
1694	 1D2	SHR		 	 
- stack 1: 0x550
- stack 0: 0x95
1695	 1D3	JUMP		 	 
- stack 0: 0x550
1696	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1072(ignore imm)
- stack 0: 0x550
1697	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1698	 97	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x95FFFA00CE000702A9000002B802F102D70000012CFF980146000B01600298
1699	 98	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x95FFFA00CE000702A9000002B802F102D70000012CFF980146000B01600298
- stack 0: 0xE0
1700	 9A	SHR		 	 
- stack 1: 0x550
- stack 0: 0x95FFFA
1701	 9B	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x95FFFA
- stack 0: 0xFFFF
1702	 9E	AND		 	 
- stack 1: 0x550
- stack 0: 0xFFFA
1703	 9F	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0xFFFA
- stack 0: 0x1
1704	 A1	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA
1705	 A2	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA
- stack 0: 0x20
1706	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x550
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA
- stack 0: 0x848
1707	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x550
- stack 0: 0x842
1708	 A7	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0x842
- stack 0: 0x20
1709	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x550
1710	 AB	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1711	 AD	ADD		 	 
- stack 0: 0x554
1712	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1713	 AF	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xCE000702A9000002B802F102D70000012CFF980146000B016002980146000C
1714	 B0	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0xCE000702A9000002B802F102D70000012CFF980146000B016002980146000C
- stack 0: 0xF0
1715	 B2	SHR		 	 
- stack 1: 0x554
- stack 0: 0xCE
1716	 B3	JUMP		 	 
- stack 0: 0x554
1717	 CE	JUMPDEST		 ;; __riscvimpl_SB_0_1_2	  ;; # instr: sb sp,0(ra)(ignore imm)
- stack 0: 0x554
1718	 CF	PUSH2	0040	 	 
- stack 1: 0x554
- stack 0: 0x40
1719	 D2	MLOAD		 	  ;; # read from x2
- stack 1: 0x554
- stack 0: 0x3098
1720	 D3	PUSH2	0020	 	 
- stack 2: 0x554
- stack 1: 0x3098
- stack 0: 0x20
1721	 D6	MLOAD		 	  ;; # read from x1
- stack 2: 0x554
- stack 1: 0x3098
- stack 0: 0x842
1722	 D7	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x554
- stack 2: 0x3098
- stack 1: 0x842
- stack 0: 0x554
1723	 D8	MLOAD		 	 
- stack 3: 0x554
- stack 2: 0x3098
- stack 1: 0x842
- stack 0: 0xCE000702A9000002B802F102D70000012CFF980146000B016002980146000C
1724	 D9	PUSH1	E0	 	 
- stack 4: 0x554
- stack 3: 0x3098
- stack 2: 0x842
- stack 1: 0xCE000702A9000002B802F102D70000012CFF980146000B016002980146000C
- stack 0: 0xE0
1725	 DB	SHR		 	 
- stack 3: 0x554
- stack 2: 0x3098
- stack 1: 0x842
- stack 0: 0xCE0007
1726	 DC	PUSH2	FFFF	 	 
- stack 4: 0x554
- stack 3: 0x3098
- stack 2: 0x842
- stack 1: 0xCE0007
- stack 0: 0xFFFF
1727	 DF	AND		 	 
- stack 3: 0x554
- stack 2: 0x3098
- stack 1: 0x842
- stack 0: 0x7
1728	 E0	PUSH1	01	 	 
- stack 4: 0x554
- stack 3: 0x3098
- stack 2: 0x842
- stack 1: 0x7
- stack 0: 0x1
1729	 E2	SIGNEXTEND		 	 
- stack 3: 0x554
- stack 2: 0x3098
- stack 1: 0x842
- stack 0: 0x7
1730	 E3	ADD		 	 
- stack 2: 0x554
- stack 1: 0x3098
- stack 0: 0x849
1731	 E4	PUSH4	FFFFFFFF	 	 
- stack 3: 0x554
- stack 2: 0x3098
- stack 1: 0x849
- stack 0: 0xFFFFFFFF
1732	 E9	AND		 	  ;; # mask to 32 bits
- stack 2: 0x554
- stack 1: 0x3098
- stack 0: 0x849
1733	 EA	PUSH1	03	 	 
- stack 3: 0x554
- stack 2: 0x3098
- stack 1: 0x849
- stack 0: 0x3
1734	 EC	XOR		 	 
- stack 2: 0x554
- stack 1: 0x3098
- stack 0: 0x84A
1735	 ED	MSTORE8		 	 
- stack 0: 0x554
1736	 EE	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1737	 F0	ADD		 	 
- stack 0: 0x558
1738	 F1	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1739	 F2	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x2A9000002B802F102D70000012CFF980146000B016002980146000C030C0000
1740	 F3	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x2A9000002B802F102D70000012CFF980146000B016002980146000C030C0000
- stack 0: 0xF0
1741	 F5	SHR		 	 
- stack 1: 0x558
- stack 0: 0x2A9
1742	 F6	JUMP		 	 
- stack 0: 0x558
1743	 2A9	JUMPDEST		 ;; __riscvimpl_AUIPC_17020000	  ;; # instr: auipc tp,0x0(ignore imm)
- stack 0: 0x558
1744	 2AA	DUP1		 	 
- stack 1: 0x558
- stack 0: 0x558
1745	 2AB	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x558
- stack 0: 0x80
1746	 2AE	MSTORE		 	  ;; # store to x4
- stack 0: 0x558
1747	 2AF	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1748	 2B1	ADD		 	 
- stack 0: 0x55C
1749	 2B2	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1750	 2B3	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x2B802F102D70000012CFF980146000B016002980146000C030C00000326FFDD
1751	 2B4	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x2B802F102D70000012CFF980146000B016002980146000C030C00000326FFDD
- stack 0: 0xF0
1752	 2B6	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x2B8
1753	 2B7	JUMP		 	 
- stack 0: 0x55C
1754	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x55C
1755	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1756	 2BA	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x2B802F102D70000012CFF980146000B016002980146000C030C00000326FFDD
1757	 2BB	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x2B802F102D70000012CFF980146000B016002980146000C030C00000326FFDD
- stack 0: 0xE0
1758	 2BD	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x2B802F1
1759	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x2B802F1
- stack 0: 0xFFFF
1760	 2C1	AND		 	 
- stack 1: 0x55C
- stack 0: 0x2F1
1761	 2C2	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x2F1
- stack 0: 0x1
1762	 2C4	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x2F1
1763	 2C5	PUSH2	0080	 	 
- stack 2: 0x55C
- stack 1: 0x2F1
- stack 0: 0x80
1764	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x55C
- stack 1: 0x2F1
- stack 0: 0x558
1765	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x55C
- stack 0: 0x849
1766	 2CA	PUSH2	0080	 	 
- stack 2: 0x55C
- stack 1: 0x849
- stack 0: 0x80
1767	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x55C
1768	 2CE	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1769	 2D0	ADD		 	 
- stack 0: 0x560
1770	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1771	 2D2	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x2D70000012CFF980146000B016002980146000C030C00000326FFDD03400000
1772	 2D3	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x2D70000012CFF980146000B016002980146000C030C00000326FFDD03400000
- stack 0: 0xF0
1773	 2D5	SHR		 	 
- stack 1: 0x560
- stack 0: 0x2D7
1774	 2D6	JUMP		 	 
- stack 0: 0x560
1775	 2D7	JUMPDEST		 ;; __riscvimpl_LB_3_4_0	  ;; # instr: lb gp,0(tp)(ignore imm)
- stack 0: 0x560
1776	 2D8	PUSH2	0080	 	 
- stack 1: 0x560
- stack 0: 0x80
1777	 2DB	MLOAD		 	  ;; # read from x4
- stack 1: 0x560
- stack 0: 0x849
1778	 2DC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x560
- stack 1: 0x849
- stack 0: 0xFFFFFFFF
1779	 2E1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x560
- stack 0: 0x849
1780	 2E2	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x560
- stack 1: 0x849
- stack 0: 0x560
1781	 2E3	MLOAD		 	 
- stack 2: 0x560
- stack 1: 0x849
- stack 0: 0x2D70000012CFF980146000B016002980146000C030C00000326FFDD03400000
1782	 2E4	PUSH1	E0	 	 
- stack 3: 0x560
- stack 2: 0x849
- stack 1: 0x2D70000012CFF980146000B016002980146000C030C00000326FFDD03400000
- stack 0: 0xE0
1783	 2E6	SHR		 	 
- stack 2: 0x560
- stack 1: 0x849
- stack 0: 0x2D70000
1784	 2E7	PUSH2	FFFF	 	 
- stack 3: 0x560
- stack 2: 0x849
- stack 1: 0x2D70000
- stack 0: 0xFFFF
1785	 2EA	AND		 	 
- stack 2: 0x560
- stack 1: 0x849
- stack 0: 0x0
1786	 2EB	PUSH1	01	 	 
- stack 3: 0x560
- stack 2: 0x849
- stack 1: 0x0
- stack 0: 0x1
1787	 2ED	SIGNEXTEND		 	 
- stack 2: 0x560
- stack 1: 0x849
- stack 0: 0x0
1788	 2EE	ADD		 	 
- stack 1: 0x560
- stack 0: 0x849
1789	 2EF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x560
- stack 1: 0x849
- stack 0: 0xFFFFFFFF
1790	 2F4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x560
- stack 0: 0x849
1791	 2F5	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x560
- stack 1: 0x849
- stack 0: 0x3
1792	 2F7	XOR		 	 
- stack 1: 0x560
- stack 0: 0x84A
1793	 2F8	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x9878000000000000000000000000000000000000000000000000000000000000
1794	 2F9	PUSH1	F8	 	 
- stack 2: 0x560
- stack 1: 0x9878000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
1795	 2FB	SHR		 	 
- stack 1: 0x560
- stack 0: 0x98
1796	 2FC	PUSH1	00	 	 
- stack 2: 0x560
- stack 1: 0x98
- stack 0: 0x0
1797	 2FE	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF98
1798	 2FF	PUSH2	0060	 	 
- stack 2: 0x560
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF98
- stack 0: 0x60
1799	 302	MSTORE		 	  ;; # store to x3
- stack 0: 0x560
1800	 303	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1801	 305	ADD		 	 
- stack 0: 0x564
1802	 306	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1803	 307	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x12CFF980146000B016002980146000C030C00000326FFDD0340000001B502C4
1804	 308	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x12CFF980146000B016002980146000C030C00000326FFDD0340000001B502C4
- stack 0: 0xF0
1805	 30A	SHR		 	 
- stack 1: 0x564
- stack 0: 0x12C
1806	 30B	JUMP		 	 
- stack 0: 0x564
1807	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x564
1808	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
1809	 12E	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x12CFF980146000B016002980146000C030C00000326FFDD0340000001B502C4
1810	 12F	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x12CFF980146000B016002980146000C030C00000326FFDD0340000001B502C4
- stack 0: 0xE0
1811	 131	SHR		 	 
- stack 1: 0x564
- stack 0: 0x12CFF98
1812	 132	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x12CFF98
- stack 0: 0xFFFF
1813	 135	AND		 	 
- stack 1: 0x564
- stack 0: 0xFF98
1814	 136	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0xFF98
- stack 0: 0x1
1815	 138	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF98
1816	 139	PUSH2	03A0	 	 
- stack 2: 0x564
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF98
- stack 0: 0x3A0
1817	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x564
1818	 13D	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1819	 13F	ADD		 	 
- stack 0: 0x568
1820	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1821	 141	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x146000B016002980146000C030C00000326FFDD0340000001B502C4034F0000
1822	 142	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x146000B016002980146000C030C00000326FFDD0340000001B502C4034F0000
- stack 0: 0xF0
1823	 144	SHR		 	 
- stack 1: 0x568
- stack 0: 0x146
1824	 145	JUMP		 	 
- stack 0: 0x568
1825	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x568
1826	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1827	 148	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x146000B016002980146000C030C00000326FFDD0340000001B502C4034F0000
1828	 149	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x146000B016002980146000C030C00000326FFDD0340000001B502C4034F0000
- stack 0: 0xE0
1829	 14B	SHR		 	 
- stack 1: 0x568
- stack 0: 0x146000B
1830	 14C	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x146000B
- stack 0: 0xFFFF
1831	 14F	AND		 	 
- stack 1: 0x568
- stack 0: 0xB
1832	 150	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0xB
- stack 0: 0x1
1833	 152	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0xB
1834	 153	PUSH2	0380	 	 
- stack 2: 0x568
- stack 1: 0xB
- stack 0: 0x380
1835	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x568
1836	 157	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1837	 159	ADD		 	 
- stack 0: 0x56C
1838	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1839	 15B	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x16002980146000C030C00000326FFDD0340000001B502C4034F000003780000
1840	 15C	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x16002980146000C030C00000326FFDD0340000001B502C4034F000003780000
- stack 0: 0xF0
1841	 15E	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x160
1842	 15F	JUMP		 	 
- stack 0: 0x56C
1843	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x56C
1844	 161	PUSH2	0060	 	 
- stack 1: 0x56C
- stack 0: 0x60
1845	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x56C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF98
1846	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x56C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF98
- stack 0: 0xFFFFFFFF
1847	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x56C
- stack 0: 0xFFFFFF98
1848	 16B	PUSH2	03A0	 	 
- stack 2: 0x56C
- stack 1: 0xFFFFFF98
- stack 0: 0x3A0
1849	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x56C
- stack 1: 0xFFFFFF98
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF98
1850	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x56C
- stack 2: 0xFFFFFF98
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF98
- stack 0: 0xFFFFFFFF
1851	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x56C
- stack 1: 0xFFFFFF98
- stack 0: 0xFFFFFF98
1852	 175	SUB		 	 
- stack 1: 0x56C
- stack 0: 0x0
1853	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x17E
1854	 179	JUMPI		 	 
- stack 0: 0x56C
1855	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x56C
- stack 0: 0x198
1856	 17D	JUMP		 	 
- stack 0: 0x56C
1857	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x56C
1858	 199	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1859	 19B	ADD		 	 
- stack 0: 0x570
1860	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1861	 19D	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x146000C030C00000326FFDD0340000001B502C4034F000003780000012CFFDD
1862	 19E	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x146000C030C00000326FFDD0340000001B502C4034F000003780000012CFFDD
- stack 0: 0xF0
1863	 1A0	SHR		 	 
- stack 1: 0x570
- stack 0: 0x146
1864	 1A1	JUMP		 	 
- stack 0: 0x570
1865	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x570
1866	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
1867	 148	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x146000C030C00000326FFDD0340000001B502C4034F000003780000012CFFDD
1868	 149	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x146000C030C00000326FFDD0340000001B502C4034F000003780000012CFFDD
- stack 0: 0xE0
1869	 14B	SHR		 	 
- stack 1: 0x570
- stack 0: 0x146000C
1870	 14C	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x146000C
- stack 0: 0xFFFF
1871	 14F	AND		 	 
- stack 1: 0x570
- stack 0: 0xC
1872	 150	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0xC
- stack 0: 0x1
1873	 152	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0xC
1874	 153	PUSH2	0380	 	 
- stack 2: 0x570
- stack 1: 0xC
- stack 0: 0x380
1875	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x570
1876	 157	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1877	 159	ADD		 	 
- stack 0: 0x574
1878	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1879	 15B	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x30C00000326FFDD0340000001B502C4034F000003780000012CFFDD01600274
1880	 15C	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x30C00000326FFDD0340000001B502C4034F000003780000012CFFDD01600274
- stack 0: 0xF0
1881	 15E	SHR		 	 
- stack 1: 0x574
- stack 0: 0x30C
1882	 15F	JUMP		 	 
- stack 0: 0x574
1883	 30C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x574
1884	 30D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1885	 30E	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x30C00000326FFDD0340000001B502C4034F000003780000012CFFDD01600274
1886	 30F	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x30C00000326FFDD0340000001B502C4034F000003780000012CFFDD01600274
- stack 0: 0xE0
1887	 311	SHR		 	 
- stack 1: 0x574
- stack 0: 0x30C0000
1888	 312	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x30C0000
- stack 0: 0xFFFF
1889	 315	AND		 	 
- stack 1: 0x574
- stack 0: 0x0
1890	 316	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x1
1891	 318	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x0
1892	 319	PUSH2	0080	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x80
1893	 31C	MSTORE		 	  ;; # store to x4
- stack 0: 0x574
1894	 31D	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1895	 31F	ADD		 	 
- stack 0: 0x578
1896	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1897	 321	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x326FFDD0340000001B502C4034F000003780000012CFFDD0160027402B80001
1898	 322	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x326FFDD0340000001B502C4034F000003780000012CFFDD0160027402B80001
- stack 0: 0xF0
1899	 324	SHR		 	 
- stack 1: 0x578
- stack 0: 0x326
1900	 325	JUMP		 	 
- stack 0: 0x578
1901	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x578
1902	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
1903	 328	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x326FFDD0340000001B502C4034F000003780000012CFFDD0160027402B80001
1904	 329	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x326FFDD0340000001B502C4034F000003780000012CFFDD0160027402B80001
- stack 0: 0xE0
1905	 32B	SHR		 	 
- stack 1: 0x578
- stack 0: 0x326FFDD
1906	 32C	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x326FFDD
- stack 0: 0xFFFF
1907	 32F	AND		 	 
- stack 1: 0x578
- stack 0: 0xFFDD
1908	 330	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0xFFDD
- stack 0: 0x1
1909	 332	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
1910	 333	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x20
1911	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x578
1912	 337	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1913	 339	ADD		 	 
- stack 0: 0x57C
1914	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1915	 33B	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x340000001B502C4034F000003780000012CFFDD0160027402B8000103AD0002
1916	 33C	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x340000001B502C4034F000003780000012CFFDD0160027402B8000103AD0002
- stack 0: 0xF0
1917	 33E	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x340
1918	 33F	JUMP		 	 
- stack 0: 0x57C
1919	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x57C
1920	 341	DUP1		 	 
- stack 1: 0x57C
- stack 0: 0x57C
1921	 342	PUSH2	0040	 	 
- stack 2: 0x57C
- stack 1: 0x57C
- stack 0: 0x40
1922	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x57C
1923	 346	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1924	 348	ADD		 	 
- stack 0: 0x580
1925	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1926	 34A	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x1B502C4034F000003780000012CFFDD0160027402B8000103AD000203C7FFDC
1927	 34B	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x1B502C4034F000003780000012CFFDD0160027402B8000103AD000203C7FFDC
- stack 0: 0xF0
1928	 34D	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1B5
1929	 34E	JUMP		 	 
- stack 0: 0x580
1930	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x580
1931	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
1932	 1B7	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x1B502C4034F000003780000012CFFDD0160027402B8000103AD000203C7FFDC
1933	 1B8	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x1B502C4034F000003780000012CFFDD0160027402B8000103AD000203C7FFDC
- stack 0: 0xE0
1934	 1BA	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1B502C4
1935	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x1B502C4
- stack 0: 0xFFFF
1936	 1BE	AND		 	 
- stack 1: 0x580
- stack 0: 0x2C4
1937	 1BF	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x2C4
- stack 0: 0x1
1938	 1C1	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x2C4
1939	 1C2	PUSH2	0040	 	 
- stack 2: 0x580
- stack 1: 0x2C4
- stack 0: 0x40
1940	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x580
- stack 1: 0x2C4
- stack 0: 0x57C
1941	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x580
- stack 0: 0x840
1942	 1C7	PUSH2	0040	 	 
- stack 2: 0x580
- stack 1: 0x840
- stack 0: 0x40
1943	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x580
1944	 1CB	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1945	 1CD	ADD		 	 
- stack 0: 0x584
1946	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1947	 1CF	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x34F000003780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D
1948	 1D0	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x34F000003780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D
- stack 0: 0xF0
1949	 1D2	SHR		 	 
- stack 1: 0x584
- stack 0: 0x34F
1950	 1D3	JUMP		 	 
- stack 0: 0x584
1951	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x584
1952	 350	PUSH2	0020	 	 
- stack 1: 0x584
- stack 0: 0x20
1953	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x584
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
1954	 354	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x40
1955	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x840
1956	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x584
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 1: 0x840
- stack 0: 0x584
1957	 359	MLOAD		 	 
- stack 3: 0x584
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 1: 0x840
- stack 0: 0x34F000003780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D
1958	 35A	PUSH1	E0	 	 
- stack 4: 0x584
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 2: 0x840
- stack 1: 0x34F000003780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D
- stack 0: 0xE0
1959	 35C	SHR		 	 
- stack 3: 0x584
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 1: 0x840
- stack 0: 0x34F0000
1960	 35D	PUSH2	FFFF	 	 
- stack 4: 0x584
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 2: 0x840
- stack 1: 0x34F0000
- stack 0: 0xFFFF
1961	 360	AND		 	 
- stack 3: 0x584
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 1: 0x840
- stack 0: 0x0
1962	 361	PUSH1	01	 	 
- stack 4: 0x584
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x1
1963	 363	SIGNEXTEND		 	 
- stack 3: 0x584
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 1: 0x840
- stack 0: 0x0
1964	 364	ADD		 	 
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x840
1965	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x584
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
1966	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x840
1967	 36B	PUSH1	03	 	 
- stack 3: 0x584
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 1: 0x840
- stack 0: 0x3
1968	 36D	XOR		 	 
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x843
1969	 36E	MSTORE8		 	 
- stack 0: 0x584
1970	 36F	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1971	 371	ADD		 	 
- stack 0: 0x588
1972	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1973	 373	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x3780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D030C0000
1974	 374	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x3780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D030C0000
- stack 0: 0xF0
1975	 376	SHR		 	 
- stack 1: 0x588
- stack 0: 0x378
1976	 377	JUMP		 	 
- stack 0: 0x588
1977	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x588
1978	 379	PUSH2	0040	 	 
- stack 1: 0x588
- stack 0: 0x40
1979	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x588
- stack 0: 0x840
1980	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
1981	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0x840
1982	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0x588
1983	 384	MLOAD		 	 
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0x3780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D030C0000
1984	 385	PUSH1	E0	 	 
- stack 3: 0x588
- stack 2: 0x840
- stack 1: 0x3780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D030C0000
- stack 0: 0xE0
1985	 387	SHR		 	 
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0x3780000
1986	 388	PUSH2	FFFF	 	 
- stack 3: 0x588
- stack 2: 0x840
- stack 1: 0x3780000
- stack 0: 0xFFFF
1987	 38B	AND		 	 
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0x0
1988	 38C	PUSH1	01	 	 
- stack 3: 0x588
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x1
1989	 38E	SIGNEXTEND		 	 
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0x0
1990	 38F	ADD		 	 
- stack 1: 0x588
- stack 0: 0x840
1991	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
1992	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0x840
1993	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0x3
1994	 398	XOR		 	 
- stack 1: 0x588
- stack 0: 0x843
1995	 399	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xDD0AA000AA000098780000000000000000000000000000000000000000000000
1996	 39A	PUSH1	F8	 	 
- stack 2: 0x588
- stack 1: 0xDD0AA000AA000098780000000000000000000000000000000000000000000000
- stack 0: 0xF8
1997	 39C	SHR		 	 
- stack 1: 0x588
- stack 0: 0xDD
1998	 39D	PUSH1	00	 	 
- stack 2: 0x588
- stack 1: 0xDD
- stack 0: 0x0
1999	 39F	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
2000	 3A0	PUSH2	0060	 	 
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x60
2001	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x588
2002	 3A4	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2003	 3A6	ADD		 	 
- stack 0: 0x58C
2004	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2005	 3A8	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x12CFFDD0160027402B8000103AD000203C7FFDC0146000D030C00000326FFCD
2006	 3A9	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x12CFFDD0160027402B8000103AD000203C7FFDC0146000D030C00000326FFCD
- stack 0: 0xF0
2007	 3AB	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x12C
2008	 3AC	JUMP		 	 
- stack 0: 0x58C
2009	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x58C
2010	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2011	 12E	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x12CFFDD0160027402B8000103AD000203C7FFDC0146000D030C00000326FFCD
2012	 12F	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x12CFFDD0160027402B8000103AD000203C7FFDC0146000D030C00000326FFCD
- stack 0: 0xE0
2013	 131	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x12CFFDD
2014	 132	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x12CFFDD
- stack 0: 0xFFFF
2015	 135	AND		 	 
- stack 1: 0x58C
- stack 0: 0xFFDD
2016	 136	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0xFFDD
- stack 0: 0x1
2017	 138	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
2018	 139	PUSH2	03A0	 	 
- stack 2: 0x58C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x3A0
2019	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x58C
2020	 13D	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2021	 13F	ADD		 	 
- stack 0: 0x590
2022	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2023	 141	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x160027402B8000103AD000203C7FFDC0146000D030C00000326FFCD03400000
2024	 142	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x160027402B8000103AD000203C7FFDC0146000D030C00000326FFCD03400000
- stack 0: 0xF0
2025	 144	SHR		 	 
- stack 1: 0x590
- stack 0: 0x160
2026	 145	JUMP		 	 
- stack 0: 0x590
2027	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x590
2028	 161	PUSH2	0060	 	 
- stack 1: 0x590
- stack 0: 0x60
2029	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x590
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
2030	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x590
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0xFFFFFFFF
2031	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x590
- stack 0: 0xFFFFFFDD
2032	 16B	PUSH2	03A0	 	 
- stack 2: 0x590
- stack 1: 0xFFFFFFDD
- stack 0: 0x3A0
2033	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x590
- stack 1: 0xFFFFFFDD
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
2034	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x590
- stack 2: 0xFFFFFFDD
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0xFFFFFFFF
2035	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x590
- stack 1: 0xFFFFFFDD
- stack 0: 0xFFFFFFDD
2036	 175	SUB		 	 
- stack 1: 0x590
- stack 0: 0x0
2037	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x17E
2038	 179	JUMPI		 	 
- stack 0: 0x590
2039	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x590
- stack 0: 0x198
2040	 17D	JUMP		 	 
- stack 0: 0x590
2041	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x590
2042	 199	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2043	 19B	ADD		 	 
- stack 0: 0x594
2044	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2045	 19D	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x2B8000103AD000203C7FFDC0146000D030C00000326FFCD0340000001B50294
2046	 19E	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x2B8000103AD000203C7FFDC0146000D030C00000326FFCD0340000001B50294
- stack 0: 0xF0
2047	 1A0	SHR		 	 
- stack 1: 0x594
- stack 0: 0x2B8
2048	 1A1	JUMP		 	 
- stack 0: 0x594
2049	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x594
2050	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2051	 2BA	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x2B8000103AD000203C7FFDC0146000D030C00000326FFCD0340000001B50294
2052	 2BB	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x2B8000103AD000203C7FFDC0146000D030C00000326FFCD0340000001B50294
- stack 0: 0xE0
2053	 2BD	SHR		 	 
- stack 1: 0x594
- stack 0: 0x2B80001
2054	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x2B80001
- stack 0: 0xFFFF
2055	 2C1	AND		 	 
- stack 1: 0x594
- stack 0: 0x1
2056	 2C2	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x1
2057	 2C4	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x1
2058	 2C5	PUSH2	0080	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x80
2059	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x0
2060	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x594
- stack 0: 0x1
2061	 2CA	PUSH2	0080	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x80
2062	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x594
2063	 2CE	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2064	 2D0	ADD		 	 
- stack 0: 0x598
2065	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2066	 2D2	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x3AD000203C7FFDC0146000D030C00000326FFCD0340000001B5029404090000
2067	 2D3	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x3AD000203C7FFDC0146000D030C00000326FFCD0340000001B5029404090000
- stack 0: 0xF0
2068	 2D5	SHR		 	 
- stack 1: 0x598
- stack 0: 0x3AD
2069	 2D6	JUMP		 	 
- stack 0: 0x598
2070	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x598
2071	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2072	 3AF	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x3AD000203C7FFDC0146000D030C00000326FFCD0340000001B5029404090000
2073	 3B0	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x3AD000203C7FFDC0146000D030C00000326FFCD0340000001B5029404090000
- stack 0: 0xE0
2074	 3B2	SHR		 	 
- stack 1: 0x598
- stack 0: 0x3AD0002
2075	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
2076	 3B6	AND		 	 
- stack 1: 0x598
- stack 0: 0x2
2077	 3B7	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x2
- stack 0: 0x1
2078	 3B9	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x2
2079	 3BA	PUSH2	00A0	 	 
- stack 2: 0x598
- stack 1: 0x2
- stack 0: 0xA0
2080	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x598
2081	 3BE	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2082	 3C0	ADD		 	 
- stack 0: 0x59C
2083	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2084	 3C2	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x3C7FFDC0146000D030C00000326FFCD0340000001B5029404090000034F0001
2085	 3C3	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x3C7FFDC0146000D030C00000326FFCD0340000001B5029404090000034F0001
- stack 0: 0xF0
2086	 3C5	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x3C7
2087	 3C6	JUMP		 	 
- stack 0: 0x59C
2088	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x59C
2089	 3C8	PUSH2	0080	 	 
- stack 1: 0x59C
- stack 0: 0x80
2090	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x59C
- stack 0: 0x1
2091	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2092	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x59C
- stack 0: 0x1
2093	 3D2	PUSH2	00A0	 	 
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0xA0
2094	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0x2
2095	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x59C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2096	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0x2
2097	 3DC	SUB		 	 
- stack 1: 0x59C
- stack 0: 0x1
2098	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0x3E5
2099	 3E0	JUMPI		 	 
- stack 0: 0x59C
2100	 3E5	JUMPDEST		 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x59C
2101	 3E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2102	 3E7	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x3C7FFDC0146000D030C00000326FFCD0340000001B5029404090000034F0001
2103	 3E8	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x3C7FFDC0146000D030C00000326FFCD0340000001B5029404090000034F0001
- stack 0: 0xE0
2104	 3EA	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x3C7FFDC
2105	 3EB	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x3C7FFDC
- stack 0: 0xFFFF
2106	 3EE	AND		 	 
- stack 1: 0x59C
- stack 0: 0xFFDC
2107	 3EF	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0xFFDC
- stack 0: 0x1
2108	 3F1	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
2109	 3F2	ADD		 	 
- stack 0: 0x578
2110	 3F3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x578
- stack 0: 0xFFFFFFFF
2111	 3F8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x578
2112	 3F9	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2113	 3FA	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x326FFDD0340000001B502C4034F000003780000012CFFDD0160027402B80001
2114	 3FB	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x326FFDD0340000001B502C4034F000003780000012CFFDD0160027402B80001
- stack 0: 0xF0
2115	 3FD	SHR		 	 
- stack 1: 0x578
- stack 0: 0x326
2116	 3FE	JUMP		 	 
- stack 0: 0x578
2117	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x578
2118	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2119	 328	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x326FFDD0340000001B502C4034F000003780000012CFFDD0160027402B80001
2120	 329	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x326FFDD0340000001B502C4034F000003780000012CFFDD0160027402B80001
- stack 0: 0xE0
2121	 32B	SHR		 	 
- stack 1: 0x578
- stack 0: 0x326FFDD
2122	 32C	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x326FFDD
- stack 0: 0xFFFF
2123	 32F	AND		 	 
- stack 1: 0x578
- stack 0: 0xFFDD
2124	 330	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0xFFDD
- stack 0: 0x1
2125	 332	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
2126	 333	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x20
2127	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x578
2128	 337	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2129	 339	ADD		 	 
- stack 0: 0x57C
2130	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2131	 33B	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x340000001B502C4034F000003780000012CFFDD0160027402B8000103AD0002
2132	 33C	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x340000001B502C4034F000003780000012CFFDD0160027402B8000103AD0002
- stack 0: 0xF0
2133	 33E	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x340
2134	 33F	JUMP		 	 
- stack 0: 0x57C
2135	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x57C
2136	 341	DUP1		 	 
- stack 1: 0x57C
- stack 0: 0x57C
2137	 342	PUSH2	0040	 	 
- stack 2: 0x57C
- stack 1: 0x57C
- stack 0: 0x40
2138	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x57C
2139	 346	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2140	 348	ADD		 	 
- stack 0: 0x580
2141	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2142	 34A	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x1B502C4034F000003780000012CFFDD0160027402B8000103AD000203C7FFDC
2143	 34B	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x1B502C4034F000003780000012CFFDD0160027402B8000103AD000203C7FFDC
- stack 0: 0xF0
2144	 34D	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1B5
2145	 34E	JUMP		 	 
- stack 0: 0x580
2146	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x580
2147	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2148	 1B7	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x1B502C4034F000003780000012CFFDD0160027402B8000103AD000203C7FFDC
2149	 1B8	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x1B502C4034F000003780000012CFFDD0160027402B8000103AD000203C7FFDC
- stack 0: 0xE0
2150	 1BA	SHR		 	 
- stack 1: 0x580
- stack 0: 0x1B502C4
2151	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x1B502C4
- stack 0: 0xFFFF
2152	 1BE	AND		 	 
- stack 1: 0x580
- stack 0: 0x2C4
2153	 1BF	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x2C4
- stack 0: 0x1
2154	 1C1	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x2C4
2155	 1C2	PUSH2	0040	 	 
- stack 2: 0x580
- stack 1: 0x2C4
- stack 0: 0x40
2156	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x580
- stack 1: 0x2C4
- stack 0: 0x57C
2157	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x580
- stack 0: 0x840
2158	 1C7	PUSH2	0040	 	 
- stack 2: 0x580
- stack 1: 0x840
- stack 0: 0x40
2159	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x580
2160	 1CB	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2161	 1CD	ADD		 	 
- stack 0: 0x584
2162	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2163	 1CF	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x34F000003780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D
2164	 1D0	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x34F000003780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D
- stack 0: 0xF0
2165	 1D2	SHR		 	 
- stack 1: 0x584
- stack 0: 0x34F
2166	 1D3	JUMP		 	 
- stack 0: 0x584
2167	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x584
2168	 350	PUSH2	0020	 	 
- stack 1: 0x584
- stack 0: 0x20
2169	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x584
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
2170	 354	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x40
2171	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x840
2172	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x584
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 1: 0x840
- stack 0: 0x584
2173	 359	MLOAD		 	 
- stack 3: 0x584
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 1: 0x840
- stack 0: 0x34F000003780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D
2174	 35A	PUSH1	E0	 	 
- stack 4: 0x584
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 2: 0x840
- stack 1: 0x34F000003780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D
- stack 0: 0xE0
2175	 35C	SHR		 	 
- stack 3: 0x584
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 1: 0x840
- stack 0: 0x34F0000
2176	 35D	PUSH2	FFFF	 	 
- stack 4: 0x584
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 2: 0x840
- stack 1: 0x34F0000
- stack 0: 0xFFFF
2177	 360	AND		 	 
- stack 3: 0x584
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 1: 0x840
- stack 0: 0x0
2178	 361	PUSH1	01	 	 
- stack 4: 0x584
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x1
2179	 363	SIGNEXTEND		 	 
- stack 3: 0x584
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 1: 0x840
- stack 0: 0x0
2180	 364	ADD		 	 
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x840
2181	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x584
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
2182	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x840
2183	 36B	PUSH1	03	 	 
- stack 3: 0x584
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 1: 0x840
- stack 0: 0x3
2184	 36D	XOR		 	 
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x843
2185	 36E	MSTORE8		 	 
- stack 0: 0x584
2186	 36F	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2187	 371	ADD		 	 
- stack 0: 0x588
2188	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2189	 373	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x3780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D030C0000
2190	 374	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x3780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D030C0000
- stack 0: 0xF0
2191	 376	SHR		 	 
- stack 1: 0x588
- stack 0: 0x378
2192	 377	JUMP		 	 
- stack 0: 0x588
2193	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x588
2194	 379	PUSH2	0040	 	 
- stack 1: 0x588
- stack 0: 0x40
2195	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x588
- stack 0: 0x840
2196	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
2197	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0x840
2198	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0x588
2199	 384	MLOAD		 	 
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0x3780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D030C0000
2200	 385	PUSH1	E0	 	 
- stack 3: 0x588
- stack 2: 0x840
- stack 1: 0x3780000012CFFDD0160027402B8000103AD000203C7FFDC0146000D030C0000
- stack 0: 0xE0
2201	 387	SHR		 	 
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0x3780000
2202	 388	PUSH2	FFFF	 	 
- stack 3: 0x588
- stack 2: 0x840
- stack 1: 0x3780000
- stack 0: 0xFFFF
2203	 38B	AND		 	 
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0x0
2204	 38C	PUSH1	01	 	 
- stack 3: 0x588
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x1
2205	 38E	SIGNEXTEND		 	 
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0x0
2206	 38F	ADD		 	 
- stack 1: 0x588
- stack 0: 0x840
2207	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
2208	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0x840
2209	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x588
- stack 1: 0x840
- stack 0: 0x3
2210	 398	XOR		 	 
- stack 1: 0x588
- stack 0: 0x843
2211	 399	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xDD0AA000AA000098780000000000000000000000000000000000000000000000
2212	 39A	PUSH1	F8	 	 
- stack 2: 0x588
- stack 1: 0xDD0AA000AA000098780000000000000000000000000000000000000000000000
- stack 0: 0xF8
2213	 39C	SHR		 	 
- stack 1: 0x588
- stack 0: 0xDD
2214	 39D	PUSH1	00	 	 
- stack 2: 0x588
- stack 1: 0xDD
- stack 0: 0x0
2215	 39F	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
2216	 3A0	PUSH2	0060	 	 
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x60
2217	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x588
2218	 3A4	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2219	 3A6	ADD		 	 
- stack 0: 0x58C
2220	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2221	 3A8	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x12CFFDD0160027402B8000103AD000203C7FFDC0146000D030C00000326FFCD
2222	 3A9	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x12CFFDD0160027402B8000103AD000203C7FFDC0146000D030C00000326FFCD
- stack 0: 0xF0
2223	 3AB	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x12C
2224	 3AC	JUMP		 	 
- stack 0: 0x58C
2225	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x58C
2226	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2227	 12E	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x12CFFDD0160027402B8000103AD000203C7FFDC0146000D030C00000326FFCD
2228	 12F	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x12CFFDD0160027402B8000103AD000203C7FFDC0146000D030C00000326FFCD
- stack 0: 0xE0
2229	 131	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x12CFFDD
2230	 132	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x12CFFDD
- stack 0: 0xFFFF
2231	 135	AND		 	 
- stack 1: 0x58C
- stack 0: 0xFFDD
2232	 136	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0xFFDD
- stack 0: 0x1
2233	 138	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
2234	 139	PUSH2	03A0	 	 
- stack 2: 0x58C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0x3A0
2235	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x58C
2236	 13D	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2237	 13F	ADD		 	 
- stack 0: 0x590
2238	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2239	 141	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x160027402B8000103AD000203C7FFDC0146000D030C00000326FFCD03400000
2240	 142	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x160027402B8000103AD000203C7FFDC0146000D030C00000326FFCD03400000
- stack 0: 0xF0
2241	 144	SHR		 	 
- stack 1: 0x590
- stack 0: 0x160
2242	 145	JUMP		 	 
- stack 0: 0x590
2243	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x590
2244	 161	PUSH2	0060	 	 
- stack 1: 0x590
- stack 0: 0x60
2245	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x590
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
2246	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x590
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0xFFFFFFFF
2247	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x590
- stack 0: 0xFFFFFFDD
2248	 16B	PUSH2	03A0	 	 
- stack 2: 0x590
- stack 1: 0xFFFFFFDD
- stack 0: 0x3A0
2249	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x590
- stack 1: 0xFFFFFFDD
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
2250	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x590
- stack 2: 0xFFFFFFDD
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD
- stack 0: 0xFFFFFFFF
2251	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x590
- stack 1: 0xFFFFFFDD
- stack 0: 0xFFFFFFDD
2252	 175	SUB		 	 
- stack 1: 0x590
- stack 0: 0x0
2253	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x17E
2254	 179	JUMPI		 	 
- stack 0: 0x590
2255	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x590
- stack 0: 0x198
2256	 17D	JUMP		 	 
- stack 0: 0x590
2257	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x590
2258	 199	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2259	 19B	ADD		 	 
- stack 0: 0x594
2260	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2261	 19D	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x2B8000103AD000203C7FFDC0146000D030C00000326FFCD0340000001B50294
2262	 19E	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x2B8000103AD000203C7FFDC0146000D030C00000326FFCD0340000001B50294
- stack 0: 0xF0
2263	 1A0	SHR		 	 
- stack 1: 0x594
- stack 0: 0x2B8
2264	 1A1	JUMP		 	 
- stack 0: 0x594
2265	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x594
2266	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2267	 2BA	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x2B8000103AD000203C7FFDC0146000D030C00000326FFCD0340000001B50294
2268	 2BB	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x2B8000103AD000203C7FFDC0146000D030C00000326FFCD0340000001B50294
- stack 0: 0xE0
2269	 2BD	SHR		 	 
- stack 1: 0x594
- stack 0: 0x2B80001
2270	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x2B80001
- stack 0: 0xFFFF
2271	 2C1	AND		 	 
- stack 1: 0x594
- stack 0: 0x1
2272	 2C2	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x1
2273	 2C4	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x1
2274	 2C5	PUSH2	0080	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x80
2275	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0x1
2276	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x594
- stack 0: 0x2
2277	 2CA	PUSH2	0080	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0x80
2278	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x594
2279	 2CE	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2280	 2D0	ADD		 	 
- stack 0: 0x598
2281	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2282	 2D2	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x3AD000203C7FFDC0146000D030C00000326FFCD0340000001B5029404090000
2283	 2D3	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x3AD000203C7FFDC0146000D030C00000326FFCD0340000001B5029404090000
- stack 0: 0xF0
2284	 2D5	SHR		 	 
- stack 1: 0x598
- stack 0: 0x3AD
2285	 2D6	JUMP		 	 
- stack 0: 0x598
2286	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x598
2287	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2288	 3AF	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x3AD000203C7FFDC0146000D030C00000326FFCD0340000001B5029404090000
2289	 3B0	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x3AD000203C7FFDC0146000D030C00000326FFCD0340000001B5029404090000
- stack 0: 0xE0
2290	 3B2	SHR		 	 
- stack 1: 0x598
- stack 0: 0x3AD0002
2291	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
2292	 3B6	AND		 	 
- stack 1: 0x598
- stack 0: 0x2
2293	 3B7	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x2
- stack 0: 0x1
2294	 3B9	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x2
2295	 3BA	PUSH2	00A0	 	 
- stack 2: 0x598
- stack 1: 0x2
- stack 0: 0xA0
2296	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x598
2297	 3BE	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2298	 3C0	ADD		 	 
- stack 0: 0x59C
2299	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2300	 3C2	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x3C7FFDC0146000D030C00000326FFCD0340000001B5029404090000034F0001
2301	 3C3	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x3C7FFDC0146000D030C00000326FFCD0340000001B5029404090000034F0001
- stack 0: 0xF0
2302	 3C5	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x3C7
2303	 3C6	JUMP		 	 
- stack 0: 0x59C
2304	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x59C
2305	 3C8	PUSH2	0080	 	 
- stack 1: 0x59C
- stack 0: 0x80
2306	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x59C
- stack 0: 0x2
2307	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2308	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x59C
- stack 0: 0x2
2309	 3D2	PUSH2	00A0	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0xA0
2310	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0x2
2311	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x59C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2312	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0x2
2313	 3DC	SUB		 	 
- stack 1: 0x59C
- stack 0: 0x0
2314	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x3E5
2315	 3E0	JUMPI		 	 
- stack 0: 0x59C
2316	 3E1	PUSH2	03FF	 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 1: 0x59C
- stack 0: 0x3FF
2317	 3E4	JUMP		 	 
- stack 0: 0x59C
2318	 3FF	JUMPDEST		 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x59C
2319	 400	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2320	 402	ADD		 	 
- stack 0: 0x5A0
2321	 403	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2322	 404	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x146000D030C00000326FFCD0340000001B5029404090000034F000103780001
2323	 405	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x146000D030C00000326FFCD0340000001B5029404090000034F000103780001
- stack 0: 0xF0
2324	 407	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x146
2325	 408	JUMP		 	 
- stack 0: 0x5A0
2326	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5A0
2327	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2328	 148	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x146000D030C00000326FFCD0340000001B5029404090000034F000103780001
2329	 149	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x146000D030C00000326FFCD0340000001B5029404090000034F000103780001
- stack 0: 0xE0
2330	 14B	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x146000D
2331	 14C	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x146000D
- stack 0: 0xFFFF
2332	 14F	AND		 	 
- stack 1: 0x5A0
- stack 0: 0xD
2333	 150	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0xD
- stack 0: 0x1
2334	 152	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0xD
2335	 153	PUSH2	0380	 	 
- stack 2: 0x5A0
- stack 1: 0xD
- stack 0: 0x380
2336	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x5A0
2337	 157	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2338	 159	ADD		 	 
- stack 0: 0x5A4
2339	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2340	 15B	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x30C00000326FFCD0340000001B5029404090000034F000103780001012CFFCD
2341	 15C	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x30C00000326FFCD0340000001B5029404090000034F000103780001012CFFCD
- stack 0: 0xF0
2342	 15E	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x30C
2343	 15F	JUMP		 	 
- stack 0: 0x5A4
2344	 30C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5A4
2345	 30D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2346	 30E	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x30C00000326FFCD0340000001B5029404090000034F000103780001012CFFCD
2347	 30F	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x30C00000326FFCD0340000001B5029404090000034F000103780001012CFFCD
- stack 0: 0xE0
2348	 311	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x30C0000
2349	 312	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x30C0000
- stack 0: 0xFFFF
2350	 315	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2351	 316	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2352	 318	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2353	 319	PUSH2	0080	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x80
2354	 31C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5A4
2355	 31D	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2356	 31F	ADD		 	 
- stack 0: 0x5A8
2357	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2358	 321	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x326FFCD0340000001B5029404090000034F000103780001012CFFCD01600240
2359	 322	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x326FFCD0340000001B5029404090000034F000103780001012CFFCD01600240
- stack 0: 0xF0
2360	 324	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x326
2361	 325	JUMP		 	 
- stack 0: 0x5A8
2362	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x5A8
2363	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2364	 328	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x326FFCD0340000001B5029404090000034F000103780001012CFFCD01600240
2365	 329	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x326FFCD0340000001B5029404090000034F000103780001012CFFCD01600240
- stack 0: 0xE0
2366	 32B	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x326FFCD
2367	 32C	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x326FFCD
- stack 0: 0xFFFF
2368	 32F	AND		 	 
- stack 1: 0x5A8
- stack 0: 0xFFCD
2369	 330	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0xFFCD
- stack 0: 0x1
2370	 332	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
2371	 333	PUSH2	0020	 	 
- stack 2: 0x5A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x20
2372	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A8
2373	 337	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2374	 339	ADD		 	 
- stack 0: 0x5AC
2375	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2376	 33B	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x340000001B5029404090000034F000103780001012CFFCD0160024002B80001
2377	 33C	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x340000001B5029404090000034F000103780001012CFFCD0160024002B80001
- stack 0: 0xF0
2378	 33E	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x340
2379	 33F	JUMP		 	 
- stack 0: 0x5AC
2380	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x5AC
2381	 341	DUP1		 	 
- stack 1: 0x5AC
- stack 0: 0x5AC
2382	 342	PUSH2	0040	 	 
- stack 2: 0x5AC
- stack 1: 0x5AC
- stack 0: 0x40
2383	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x5AC
2384	 346	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2385	 348	ADD		 	 
- stack 0: 0x5B0
2386	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2387	 34A	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1B5029404090000034F000103780001012CFFCD0160024002B8000103AD0002
2388	 34B	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x1B5029404090000034F000103780001012CFFCD0160024002B8000103AD0002
- stack 0: 0xF0
2389	 34D	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1B5
2390	 34E	JUMP		 	 
- stack 0: 0x5B0
2391	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x5B0
2392	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2393	 1B7	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1B5029404090000034F000103780001012CFFCD0160024002B8000103AD0002
2394	 1B8	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x1B5029404090000034F000103780001012CFFCD0160024002B8000103AD0002
- stack 0: 0xE0
2395	 1BA	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1B50294
2396	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x1B50294
- stack 0: 0xFFFF
2397	 1BE	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x294
2398	 1BF	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x294
- stack 0: 0x1
2399	 1C1	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x294
2400	 1C2	PUSH2	0040	 	 
- stack 2: 0x5B0
- stack 1: 0x294
- stack 0: 0x40
2401	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x5B0
- stack 1: 0x294
- stack 0: 0x5AC
2402	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x5B0
- stack 0: 0x840
2403	 1C7	PUSH2	0040	 	 
- stack 2: 0x5B0
- stack 1: 0x840
- stack 0: 0x40
2404	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5B0
2405	 1CB	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2406	 1CD	ADD		 	 
- stack 0: 0x5B4
2407	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2408	 1CF	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x4090000034F000103780001012CFFCD0160024002B8000103AD000203C7FFD8
2409	 1D0	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x4090000034F000103780001012CFFCD0160024002B8000103AD000203C7FFD8
- stack 0: 0xF0
2410	 1D2	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x409
2411	 1D3	JUMP		 	 
- stack 0: 0x5B4
2412	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5B4
2413	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2414	 40B	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x4090000034F000103780001012CFFCD0160024002B8000103AD000203C7FFD8
2415	 40C	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x4090000034F000103780001012CFFCD0160024002B8000103AD000203C7FFD8
- stack 0: 0xE0
2416	 40E	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x4090000
2417	 40F	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x4090000
- stack 0: 0xFFFF
2418	 412	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2419	 413	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x1
2420	 415	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2421	 416	POP		 	 
- stack 0: 0x5B4
2422	 417	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2423	 419	ADD		 	 
- stack 0: 0x5B8
2424	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2425	 41B	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x34F000103780001012CFFCD0160024002B8000103AD000203C7FFD80146000E
2426	 41C	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x34F000103780001012CFFCD0160024002B8000103AD000203C7FFD80146000E
- stack 0: 0xF0
2427	 41E	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x34F
2428	 41F	JUMP		 	 
- stack 0: 0x5B8
2429	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x5B8
2430	 350	PUSH2	0020	 	 
- stack 1: 0x5B8
- stack 0: 0x20
2431	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x5B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
2432	 354	PUSH2	0040	 	 
- stack 2: 0x5B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x40
2433	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x5B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x840
2434	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x5B8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 1: 0x840
- stack 0: 0x5B8
2435	 359	MLOAD		 	 
- stack 3: 0x5B8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 1: 0x840
- stack 0: 0x34F000103780001012CFFCD0160024002B8000103AD000203C7FFD80146000E
2436	 35A	PUSH1	E0	 	 
- stack 4: 0x5B8
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 2: 0x840
- stack 1: 0x34F000103780001012CFFCD0160024002B8000103AD000203C7FFD80146000E
- stack 0: 0xE0
2437	 35C	SHR		 	 
- stack 3: 0x5B8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 1: 0x840
- stack 0: 0x34F0001
2438	 35D	PUSH2	FFFF	 	 
- stack 4: 0x5B8
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 2: 0x840
- stack 1: 0x34F0001
- stack 0: 0xFFFF
2439	 360	AND		 	 
- stack 3: 0x5B8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 1: 0x840
- stack 0: 0x1
2440	 361	PUSH1	01	 	 
- stack 4: 0x5B8
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 2: 0x840
- stack 1: 0x1
- stack 0: 0x1
2441	 363	SIGNEXTEND		 	 
- stack 3: 0x5B8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 1: 0x840
- stack 0: 0x1
2442	 364	ADD		 	 
- stack 2: 0x5B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x841
2443	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 1: 0x841
- stack 0: 0xFFFFFFFF
2444	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x841
2445	 36B	PUSH1	03	 	 
- stack 3: 0x5B8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 1: 0x841
- stack 0: 0x3
2446	 36D	XOR		 	 
- stack 2: 0x5B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x842
2447	 36E	MSTORE8		 	 
- stack 0: 0x5B8
2448	 36F	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2449	 371	ADD		 	 
- stack 0: 0x5BC
2450	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2451	 373	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x3780001012CFFCD0160024002B8000103AD000203C7FFD80146000E030C0000
2452	 374	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x3780001012CFFCD0160024002B8000103AD000203C7FFD80146000E030C0000
- stack 0: 0xF0
2453	 376	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x378
2454	 377	JUMP		 	 
- stack 0: 0x5BC
2455	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x5BC
2456	 379	PUSH2	0040	 	 
- stack 1: 0x5BC
- stack 0: 0x40
2457	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x5BC
- stack 0: 0x840
2458	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
2459	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x840
2460	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5BC
- stack 1: 0x840
- stack 0: 0x5BC
2461	 384	MLOAD		 	 
- stack 2: 0x5BC
- stack 1: 0x840
- stack 0: 0x3780001012CFFCD0160024002B8000103AD000203C7FFD80146000E030C0000
2462	 385	PUSH1	E0	 	 
- stack 3: 0x5BC
- stack 2: 0x840
- stack 1: 0x3780001012CFFCD0160024002B8000103AD000203C7FFD80146000E030C0000
- stack 0: 0xE0
2463	 387	SHR		 	 
- stack 2: 0x5BC
- stack 1: 0x840
- stack 0: 0x3780001
2464	 388	PUSH2	FFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x840
- stack 1: 0x3780001
- stack 0: 0xFFFF
2465	 38B	AND		 	 
- stack 2: 0x5BC
- stack 1: 0x840
- stack 0: 0x1
2466	 38C	PUSH1	01	 	 
- stack 3: 0x5BC
- stack 2: 0x840
- stack 1: 0x1
- stack 0: 0x1
2467	 38E	SIGNEXTEND		 	 
- stack 2: 0x5BC
- stack 1: 0x840
- stack 0: 0x1
2468	 38F	ADD		 	 
- stack 1: 0x5BC
- stack 0: 0x841
2469	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x841
- stack 0: 0xFFFFFFFF
2470	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x841
2471	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x5BC
- stack 1: 0x841
- stack 0: 0x3
2472	 398	XOR		 	 
- stack 1: 0x5BC
- stack 0: 0x842
2473	 399	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xCDDD0AA000AA0000987800000000000000000000000000000000000000000000
2474	 39A	PUSH1	F8	 	 
- stack 2: 0x5BC
- stack 1: 0xCDDD0AA000AA0000987800000000000000000000000000000000000000000000
- stack 0: 0xF8
2475	 39C	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xCD
2476	 39D	PUSH1	00	 	 
- stack 2: 0x5BC
- stack 1: 0xCD
- stack 0: 0x0
2477	 39F	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
2478	 3A0	PUSH2	0060	 	 
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x60
2479	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x5BC
2480	 3A4	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2481	 3A6	ADD		 	 
- stack 0: 0x5C0
2482	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2483	 3A8	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x12CFFCD0160024002B8000103AD000203C7FFD80146000E030C00000326FFCC
2484	 3A9	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x12CFFCD0160024002B8000103AD000203C7FFD80146000E030C00000326FFCC
- stack 0: 0xF0
2485	 3AB	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x12C
2486	 3AC	JUMP		 	 
- stack 0: 0x5C0
2487	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x5C0
2488	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2489	 12E	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x12CFFCD0160024002B8000103AD000203C7FFD80146000E030C00000326FFCC
2490	 12F	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x12CFFCD0160024002B8000103AD000203C7FFD80146000E030C00000326FFCC
- stack 0: 0xE0
2491	 131	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x12CFFCD
2492	 132	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x12CFFCD
- stack 0: 0xFFFF
2493	 135	AND		 	 
- stack 1: 0x5C0
- stack 0: 0xFFCD
2494	 136	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xFFCD
- stack 0: 0x1
2495	 138	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
2496	 139	PUSH2	03A0	 	 
- stack 2: 0x5C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x3A0
2497	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C0
2498	 13D	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2499	 13F	ADD		 	 
- stack 0: 0x5C4
2500	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2501	 141	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x160024002B8000103AD000203C7FFD80146000E030C00000326FFCC03400000
2502	 142	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x160024002B8000103AD000203C7FFD80146000E030C00000326FFCC03400000
- stack 0: 0xF0
2503	 144	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x160
2504	 145	JUMP		 	 
- stack 0: 0x5C4
2505	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x5C4
2506	 161	PUSH2	0060	 	 
- stack 1: 0x5C4
- stack 0: 0x60
2507	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x5C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
2508	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0xFFFFFFFF
2509	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C4
- stack 0: 0xFFFFFFCD
2510	 16B	PUSH2	03A0	 	 
- stack 2: 0x5C4
- stack 1: 0xFFFFFFCD
- stack 0: 0x3A0
2511	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x5C4
- stack 1: 0xFFFFFFCD
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
2512	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5C4
- stack 2: 0xFFFFFFCD
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0xFFFFFFFF
2513	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5C4
- stack 1: 0xFFFFFFCD
- stack 0: 0xFFFFFFCD
2514	 175	SUB		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2515	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x17E
2516	 179	JUMPI		 	 
- stack 0: 0x5C4
2517	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x5C4
- stack 0: 0x198
2518	 17D	JUMP		 	 
- stack 0: 0x5C4
2519	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x5C4
2520	 199	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2521	 19B	ADD		 	 
- stack 0: 0x5C8
2522	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2523	 19D	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x2B8000103AD000203C7FFD80146000E030C00000326FFCC0340000001B50260
2524	 19E	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x2B8000103AD000203C7FFD80146000E030C00000326FFCC0340000001B50260
- stack 0: 0xF0
2525	 1A0	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x2B8
2526	 1A1	JUMP		 	 
- stack 0: 0x5C8
2527	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x5C8
2528	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2529	 2BA	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x2B8000103AD000203C7FFD80146000E030C00000326FFCC0340000001B50260
2530	 2BB	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x2B8000103AD000203C7FFD80146000E030C00000326FFCC0340000001B50260
- stack 0: 0xE0
2531	 2BD	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x2B80001
2532	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x2B80001
- stack 0: 0xFFFF
2533	 2C1	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x1
2534	 2C2	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x1
2535	 2C4	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x1
2536	 2C5	PUSH2	0080	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x80
2537	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x0
2538	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x5C8
- stack 0: 0x1
2539	 2CA	PUSH2	0080	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x80
2540	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C8
2541	 2CE	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2542	 2D0	ADD		 	 
- stack 0: 0x5CC
2543	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2544	 2D2	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x3AD000203C7FFD80146000E030C00000326FFCC0340000001B5026004090000
2545	 2D3	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x3AD000203C7FFD80146000E030C00000326FFCC0340000001B5026004090000
- stack 0: 0xF0
2546	 2D5	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x3AD
2547	 2D6	JUMP		 	 
- stack 0: 0x5CC
2548	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5CC
2549	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2550	 3AF	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x3AD000203C7FFD80146000E030C00000326FFCC0340000001B5026004090000
2551	 3B0	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x3AD000203C7FFD80146000E030C00000326FFCC0340000001B5026004090000
- stack 0: 0xE0
2552	 3B2	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x3AD0002
2553	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
2554	 3B6	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x2
2555	 3B7	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0x1
2556	 3B9	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x2
2557	 3BA	PUSH2	00A0	 	 
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0xA0
2558	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x5CC
2559	 3BE	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2560	 3C0	ADD		 	 
- stack 0: 0x5D0
2561	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2562	 3C2	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x3C7FFD80146000E030C00000326FFCC0340000001B502600409000004090000
2563	 3C3	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x3C7FFD80146000E030C00000326FFCC0340000001B502600409000004090000
- stack 0: 0xF0
2564	 3C5	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x3C7
2565	 3C6	JUMP		 	 
- stack 0: 0x5D0
2566	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x5D0
2567	 3C8	PUSH2	0080	 	 
- stack 1: 0x5D0
- stack 0: 0x80
2568	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D0
- stack 0: 0x1
2569	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2570	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D0
- stack 0: 0x1
2571	 3D2	PUSH2	00A0	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0xA0
2572	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x2
2573	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2574	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x2
2575	 3DC	SUB		 	 
- stack 1: 0x5D0
- stack 0: 0x1
2576	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x3E5
2577	 3E0	JUMPI		 	 
- stack 0: 0x5D0
2578	 3E5	JUMPDEST		 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x5D0
2579	 3E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2580	 3E7	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x3C7FFD80146000E030C00000326FFCC0340000001B502600409000004090000
2581	 3E8	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x3C7FFD80146000E030C00000326FFCC0340000001B502600409000004090000
- stack 0: 0xE0
2582	 3EA	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x3C7FFD8
2583	 3EB	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x3C7FFD8
- stack 0: 0xFFFF
2584	 3EE	AND		 	 
- stack 1: 0x5D0
- stack 0: 0xFFD8
2585	 3EF	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0xFFD8
- stack 0: 0x1
2586	 3F1	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
2587	 3F2	ADD		 	 
- stack 0: 0x5A8
2588	 3F3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5A8
- stack 0: 0xFFFFFFFF
2589	 3F8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5A8
2590	 3F9	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2591	 3FA	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x326FFCD0340000001B5029404090000034F000103780001012CFFCD01600240
2592	 3FB	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x326FFCD0340000001B5029404090000034F000103780001012CFFCD01600240
- stack 0: 0xF0
2593	 3FD	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x326
2594	 3FE	JUMP		 	 
- stack 0: 0x5A8
2595	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x5A8
2596	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2597	 328	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x326FFCD0340000001B5029404090000034F000103780001012CFFCD01600240
2598	 329	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x326FFCD0340000001B5029404090000034F000103780001012CFFCD01600240
- stack 0: 0xE0
2599	 32B	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x326FFCD
2600	 32C	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x326FFCD
- stack 0: 0xFFFF
2601	 32F	AND		 	 
- stack 1: 0x5A8
- stack 0: 0xFFCD
2602	 330	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0xFFCD
- stack 0: 0x1
2603	 332	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
2604	 333	PUSH2	0020	 	 
- stack 2: 0x5A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x20
2605	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A8
2606	 337	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2607	 339	ADD		 	 
- stack 0: 0x5AC
2608	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2609	 33B	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x340000001B5029404090000034F000103780001012CFFCD0160024002B80001
2610	 33C	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x340000001B5029404090000034F000103780001012CFFCD0160024002B80001
- stack 0: 0xF0
2611	 33E	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x340
2612	 33F	JUMP		 	 
- stack 0: 0x5AC
2613	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x5AC
2614	 341	DUP1		 	 
- stack 1: 0x5AC
- stack 0: 0x5AC
2615	 342	PUSH2	0040	 	 
- stack 2: 0x5AC
- stack 1: 0x5AC
- stack 0: 0x40
2616	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x5AC
2617	 346	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2618	 348	ADD		 	 
- stack 0: 0x5B0
2619	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2620	 34A	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1B5029404090000034F000103780001012CFFCD0160024002B8000103AD0002
2621	 34B	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x1B5029404090000034F000103780001012CFFCD0160024002B8000103AD0002
- stack 0: 0xF0
2622	 34D	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1B5
2623	 34E	JUMP		 	 
- stack 0: 0x5B0
2624	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x5B0
2625	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2626	 1B7	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1B5029404090000034F000103780001012CFFCD0160024002B8000103AD0002
2627	 1B8	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x1B5029404090000034F000103780001012CFFCD0160024002B8000103AD0002
- stack 0: 0xE0
2628	 1BA	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1B50294
2629	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x1B50294
- stack 0: 0xFFFF
2630	 1BE	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x294
2631	 1BF	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x294
- stack 0: 0x1
2632	 1C1	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x294
2633	 1C2	PUSH2	0040	 	 
- stack 2: 0x5B0
- stack 1: 0x294
- stack 0: 0x40
2634	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x5B0
- stack 1: 0x294
- stack 0: 0x5AC
2635	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x5B0
- stack 0: 0x840
2636	 1C7	PUSH2	0040	 	 
- stack 2: 0x5B0
- stack 1: 0x840
- stack 0: 0x40
2637	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5B0
2638	 1CB	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2639	 1CD	ADD		 	 
- stack 0: 0x5B4
2640	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2641	 1CF	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x4090000034F000103780001012CFFCD0160024002B8000103AD000203C7FFD8
2642	 1D0	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x4090000034F000103780001012CFFCD0160024002B8000103AD000203C7FFD8
- stack 0: 0xF0
2643	 1D2	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x409
2644	 1D3	JUMP		 	 
- stack 0: 0x5B4
2645	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5B4
2646	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2647	 40B	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x4090000034F000103780001012CFFCD0160024002B8000103AD000203C7FFD8
2648	 40C	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x4090000034F000103780001012CFFCD0160024002B8000103AD000203C7FFD8
- stack 0: 0xE0
2649	 40E	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x4090000
2650	 40F	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x4090000
- stack 0: 0xFFFF
2651	 412	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2652	 413	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x1
2653	 415	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2654	 416	POP		 	 
- stack 0: 0x5B4
2655	 417	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2656	 419	ADD		 	 
- stack 0: 0x5B8
2657	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2658	 41B	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x34F000103780001012CFFCD0160024002B8000103AD000203C7FFD80146000E
2659	 41C	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x34F000103780001012CFFCD0160024002B8000103AD000203C7FFD80146000E
- stack 0: 0xF0
2660	 41E	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x34F
2661	 41F	JUMP		 	 
- stack 0: 0x5B8
2662	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x5B8
2663	 350	PUSH2	0020	 	 
- stack 1: 0x5B8
- stack 0: 0x20
2664	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x5B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
2665	 354	PUSH2	0040	 	 
- stack 2: 0x5B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x40
2666	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x5B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x840
2667	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x5B8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 1: 0x840
- stack 0: 0x5B8
2668	 359	MLOAD		 	 
- stack 3: 0x5B8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 1: 0x840
- stack 0: 0x34F000103780001012CFFCD0160024002B8000103AD000203C7FFD80146000E
2669	 35A	PUSH1	E0	 	 
- stack 4: 0x5B8
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 2: 0x840
- stack 1: 0x34F000103780001012CFFCD0160024002B8000103AD000203C7FFD80146000E
- stack 0: 0xE0
2670	 35C	SHR		 	 
- stack 3: 0x5B8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 1: 0x840
- stack 0: 0x34F0001
2671	 35D	PUSH2	FFFF	 	 
- stack 4: 0x5B8
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 2: 0x840
- stack 1: 0x34F0001
- stack 0: 0xFFFF
2672	 360	AND		 	 
- stack 3: 0x5B8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 1: 0x840
- stack 0: 0x1
2673	 361	PUSH1	01	 	 
- stack 4: 0x5B8
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 2: 0x840
- stack 1: 0x1
- stack 0: 0x1
2674	 363	SIGNEXTEND		 	 
- stack 3: 0x5B8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 1: 0x840
- stack 0: 0x1
2675	 364	ADD		 	 
- stack 2: 0x5B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x841
2676	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 1: 0x841
- stack 0: 0xFFFFFFFF
2677	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x841
2678	 36B	PUSH1	03	 	 
- stack 3: 0x5B8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 1: 0x841
- stack 0: 0x3
2679	 36D	XOR		 	 
- stack 2: 0x5B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x842
2680	 36E	MSTORE8		 	 
- stack 0: 0x5B8
2681	 36F	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2682	 371	ADD		 	 
- stack 0: 0x5BC
2683	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2684	 373	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x3780001012CFFCD0160024002B8000103AD000203C7FFD80146000E030C0000
2685	 374	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x3780001012CFFCD0160024002B8000103AD000203C7FFD80146000E030C0000
- stack 0: 0xF0
2686	 376	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x378
2687	 377	JUMP		 	 
- stack 0: 0x5BC
2688	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x5BC
2689	 379	PUSH2	0040	 	 
- stack 1: 0x5BC
- stack 0: 0x40
2690	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x5BC
- stack 0: 0x840
2691	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
2692	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x840
2693	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5BC
- stack 1: 0x840
- stack 0: 0x5BC
2694	 384	MLOAD		 	 
- stack 2: 0x5BC
- stack 1: 0x840
- stack 0: 0x3780001012CFFCD0160024002B8000103AD000203C7FFD80146000E030C0000
2695	 385	PUSH1	E0	 	 
- stack 3: 0x5BC
- stack 2: 0x840
- stack 1: 0x3780001012CFFCD0160024002B8000103AD000203C7FFD80146000E030C0000
- stack 0: 0xE0
2696	 387	SHR		 	 
- stack 2: 0x5BC
- stack 1: 0x840
- stack 0: 0x3780001
2697	 388	PUSH2	FFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x840
- stack 1: 0x3780001
- stack 0: 0xFFFF
2698	 38B	AND		 	 
- stack 2: 0x5BC
- stack 1: 0x840
- stack 0: 0x1
2699	 38C	PUSH1	01	 	 
- stack 3: 0x5BC
- stack 2: 0x840
- stack 1: 0x1
- stack 0: 0x1
2700	 38E	SIGNEXTEND		 	 
- stack 2: 0x5BC
- stack 1: 0x840
- stack 0: 0x1
2701	 38F	ADD		 	 
- stack 1: 0x5BC
- stack 0: 0x841
2702	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x841
- stack 0: 0xFFFFFFFF
2703	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x841
2704	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x5BC
- stack 1: 0x841
- stack 0: 0x3
2705	 398	XOR		 	 
- stack 1: 0x5BC
- stack 0: 0x842
2706	 399	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xCDDD0AA000AA0000987800000000000000000000000000000000000000000000
2707	 39A	PUSH1	F8	 	 
- stack 2: 0x5BC
- stack 1: 0xCDDD0AA000AA0000987800000000000000000000000000000000000000000000
- stack 0: 0xF8
2708	 39C	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xCD
2709	 39D	PUSH1	00	 	 
- stack 2: 0x5BC
- stack 1: 0xCD
- stack 0: 0x0
2710	 39F	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
2711	 3A0	PUSH2	0060	 	 
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x60
2712	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x5BC
2713	 3A4	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2714	 3A6	ADD		 	 
- stack 0: 0x5C0
2715	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2716	 3A8	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x12CFFCD0160024002B8000103AD000203C7FFD80146000E030C00000326FFCC
2717	 3A9	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x12CFFCD0160024002B8000103AD000203C7FFD80146000E030C00000326FFCC
- stack 0: 0xF0
2718	 3AB	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x12C
2719	 3AC	JUMP		 	 
- stack 0: 0x5C0
2720	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x5C0
2721	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2722	 12E	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x12CFFCD0160024002B8000103AD000203C7FFD80146000E030C00000326FFCC
2723	 12F	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x12CFFCD0160024002B8000103AD000203C7FFD80146000E030C00000326FFCC
- stack 0: 0xE0
2724	 131	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x12CFFCD
2725	 132	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x12CFFCD
- stack 0: 0xFFFF
2726	 135	AND		 	 
- stack 1: 0x5C0
- stack 0: 0xFFCD
2727	 136	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xFFCD
- stack 0: 0x1
2728	 138	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
2729	 139	PUSH2	03A0	 	 
- stack 2: 0x5C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0x3A0
2730	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C0
2731	 13D	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2732	 13F	ADD		 	 
- stack 0: 0x5C4
2733	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2734	 141	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x160024002B8000103AD000203C7FFD80146000E030C00000326FFCC03400000
2735	 142	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x160024002B8000103AD000203C7FFD80146000E030C00000326FFCC03400000
- stack 0: 0xF0
2736	 144	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x160
2737	 145	JUMP		 	 
- stack 0: 0x5C4
2738	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x5C4
2739	 161	PUSH2	0060	 	 
- stack 1: 0x5C4
- stack 0: 0x60
2740	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x5C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
2741	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0xFFFFFFFF
2742	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C4
- stack 0: 0xFFFFFFCD
2743	 16B	PUSH2	03A0	 	 
- stack 2: 0x5C4
- stack 1: 0xFFFFFFCD
- stack 0: 0x3A0
2744	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x5C4
- stack 1: 0xFFFFFFCD
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
2745	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5C4
- stack 2: 0xFFFFFFCD
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD
- stack 0: 0xFFFFFFFF
2746	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5C4
- stack 1: 0xFFFFFFCD
- stack 0: 0xFFFFFFCD
2747	 175	SUB		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2748	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x17E
2749	 179	JUMPI		 	 
- stack 0: 0x5C4
2750	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x5C4
- stack 0: 0x198
2751	 17D	JUMP		 	 
- stack 0: 0x5C4
2752	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x5C4
2753	 199	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2754	 19B	ADD		 	 
- stack 0: 0x5C8
2755	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2756	 19D	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x2B8000103AD000203C7FFD80146000E030C00000326FFCC0340000001B50260
2757	 19E	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x2B8000103AD000203C7FFD80146000E030C00000326FFCC0340000001B50260
- stack 0: 0xF0
2758	 1A0	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x2B8
2759	 1A1	JUMP		 	 
- stack 0: 0x5C8
2760	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x5C8
2761	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2762	 2BA	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x2B8000103AD000203C7FFD80146000E030C00000326FFCC0340000001B50260
2763	 2BB	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x2B8000103AD000203C7FFD80146000E030C00000326FFCC0340000001B50260
- stack 0: 0xE0
2764	 2BD	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x2B80001
2765	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x2B80001
- stack 0: 0xFFFF
2766	 2C1	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x1
2767	 2C2	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x1
2768	 2C4	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x1
2769	 2C5	PUSH2	0080	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x80
2770	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x1
2771	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x5C8
- stack 0: 0x2
2772	 2CA	PUSH2	0080	 	 
- stack 2: 0x5C8
- stack 1: 0x2
- stack 0: 0x80
2773	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C8
2774	 2CE	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2775	 2D0	ADD		 	 
- stack 0: 0x5CC
2776	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2777	 2D2	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x3AD000203C7FFD80146000E030C00000326FFCC0340000001B5026004090000
2778	 2D3	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x3AD000203C7FFD80146000E030C00000326FFCC0340000001B5026004090000
- stack 0: 0xF0
2779	 2D5	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x3AD
2780	 2D6	JUMP		 	 
- stack 0: 0x5CC
2781	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5CC
2782	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2783	 3AF	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x3AD000203C7FFD80146000E030C00000326FFCC0340000001B5026004090000
2784	 3B0	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x3AD000203C7FFD80146000E030C00000326FFCC0340000001B5026004090000
- stack 0: 0xE0
2785	 3B2	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x3AD0002
2786	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
2787	 3B6	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x2
2788	 3B7	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0x1
2789	 3B9	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x2
2790	 3BA	PUSH2	00A0	 	 
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0xA0
2791	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x5CC
2792	 3BE	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2793	 3C0	ADD		 	 
- stack 0: 0x5D0
2794	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2795	 3C2	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x3C7FFD80146000E030C00000326FFCC0340000001B502600409000004090000
2796	 3C3	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x3C7FFD80146000E030C00000326FFCC0340000001B502600409000004090000
- stack 0: 0xF0
2797	 3C5	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x3C7
2798	 3C6	JUMP		 	 
- stack 0: 0x5D0
2799	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x5D0
2800	 3C8	PUSH2	0080	 	 
- stack 1: 0x5D0
- stack 0: 0x80
2801	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D0
- stack 0: 0x2
2802	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2803	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D0
- stack 0: 0x2
2804	 3D2	PUSH2	00A0	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0xA0
2805	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0x2
2806	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2807	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0x2
2808	 3DC	SUB		 	 
- stack 1: 0x5D0
- stack 0: 0x0
2809	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x3E5
2810	 3E0	JUMPI		 	 
- stack 0: 0x5D0
2811	 3E1	PUSH2	03FF	 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 1: 0x5D0
- stack 0: 0x3FF
2812	 3E4	JUMP		 	 
- stack 0: 0x5D0
2813	 3FF	JUMPDEST		 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x5D0
2814	 400	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2815	 402	ADD		 	 
- stack 0: 0x5D4
2816	 403	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2817	 404	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x146000E030C00000326FFCC0340000001B502600409000004090000034F0002
2818	 405	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x146000E030C00000326FFCC0340000001B502600409000004090000034F0002
- stack 0: 0xF0
2819	 407	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x146
2820	 408	JUMP		 	 
- stack 0: 0x5D4
2821	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5D4
2822	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2823	 148	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x146000E030C00000326FFCC0340000001B502600409000004090000034F0002
2824	 149	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x146000E030C00000326FFCC0340000001B502600409000004090000034F0002
- stack 0: 0xE0
2825	 14B	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x146000E
2826	 14C	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x146000E
- stack 0: 0xFFFF
2827	 14F	AND		 	 
- stack 1: 0x5D4
- stack 0: 0xE
2828	 150	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0xE
- stack 0: 0x1
2829	 152	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0xE
2830	 153	PUSH2	0380	 	 
- stack 2: 0x5D4
- stack 1: 0xE
- stack 0: 0x380
2831	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x5D4
2832	 157	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2833	 159	ADD		 	 
- stack 0: 0x5D8
2834	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2835	 15B	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x30C00000326FFCC0340000001B502600409000004090000034F000203780002
2836	 15C	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x30C00000326FFCC0340000001B502600409000004090000034F000203780002
- stack 0: 0xF0
2837	 15E	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x30C
2838	 15F	JUMP		 	 
- stack 0: 0x5D8
2839	 30C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5D8
2840	 30D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2841	 30E	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x30C00000326FFCC0340000001B502600409000004090000034F000203780002
2842	 30F	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x30C00000326FFCC0340000001B502600409000004090000034F000203780002
- stack 0: 0xE0
2843	 311	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x30C0000
2844	 312	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x30C0000
- stack 0: 0xFFFF
2845	 315	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x0
2846	 316	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x0
- stack 0: 0x1
2847	 318	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x0
2848	 319	PUSH2	0080	 	 
- stack 2: 0x5D8
- stack 1: 0x0
- stack 0: 0x80
2849	 31C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D8
2850	 31D	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2851	 31F	ADD		 	 
- stack 0: 0x5DC
2852	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2853	 321	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x326FFCC0340000001B502600409000004090000034F000203780002012CFFCC
2854	 322	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x326FFCC0340000001B502600409000004090000034F000203780002012CFFCC
- stack 0: 0xF0
2855	 324	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x326
2856	 325	JUMP		 	 
- stack 0: 0x5DC
2857	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x5DC
2858	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2859	 328	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x326FFCC0340000001B502600409000004090000034F000203780002012CFFCC
2860	 329	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x326FFCC0340000001B502600409000004090000034F000203780002012CFFCC
- stack 0: 0xE0
2861	 32B	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x326FFCC
2862	 32C	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x326FFCC
- stack 0: 0xFFFF
2863	 32F	AND		 	 
- stack 1: 0x5DC
- stack 0: 0xFFCC
2864	 330	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0xFFCC
- stack 0: 0x1
2865	 332	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
2866	 333	PUSH2	0020	 	 
- stack 2: 0x5DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x20
2867	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x5DC
2868	 337	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2869	 339	ADD		 	 
- stack 0: 0x5E0
2870	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2871	 33B	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x340000001B502600409000004090000034F000203780002012CFFCC01600208
2872	 33C	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x340000001B502600409000004090000034F000203780002012CFFCC01600208
- stack 0: 0xF0
2873	 33E	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x340
2874	 33F	JUMP		 	 
- stack 0: 0x5E0
2875	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x5E0
2876	 341	DUP1		 	 
- stack 1: 0x5E0
- stack 0: 0x5E0
2877	 342	PUSH2	0040	 	 
- stack 2: 0x5E0
- stack 1: 0x5E0
- stack 0: 0x40
2878	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x5E0
2879	 346	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2880	 348	ADD		 	 
- stack 0: 0x5E4
2881	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2882	 34A	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1B502600409000004090000034F000203780002012CFFCC0160020802B80001
2883	 34B	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x1B502600409000004090000034F000203780002012CFFCC0160020802B80001
- stack 0: 0xF0
2884	 34D	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1B5
2885	 34E	JUMP		 	 
- stack 0: 0x5E4
2886	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x5E4
2887	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2888	 1B7	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1B502600409000004090000034F000203780002012CFFCC0160020802B80001
2889	 1B8	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x1B502600409000004090000034F000203780002012CFFCC0160020802B80001
- stack 0: 0xE0
2890	 1BA	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1B50260
2891	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x1B50260
- stack 0: 0xFFFF
2892	 1BE	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x260
2893	 1BF	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x260
- stack 0: 0x1
2894	 1C1	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x260
2895	 1C2	PUSH2	0040	 	 
- stack 2: 0x5E4
- stack 1: 0x260
- stack 0: 0x40
2896	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x5E4
- stack 1: 0x260
- stack 0: 0x5E0
2897	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x5E4
- stack 0: 0x840
2898	 1C7	PUSH2	0040	 	 
- stack 2: 0x5E4
- stack 1: 0x840
- stack 0: 0x40
2899	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5E4
2900	 1CB	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2901	 1CD	ADD		 	 
- stack 0: 0x5E8
2902	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2903	 1CF	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x409000004090000034F000203780002012CFFCC0160020802B8000103AD0002
2904	 1D0	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x409000004090000034F000203780002012CFFCC0160020802B8000103AD0002
- stack 0: 0xF0
2905	 1D2	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x409
2906	 1D3	JUMP		 	 
- stack 0: 0x5E8
2907	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5E8
2908	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
2909	 40B	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x409000004090000034F000203780002012CFFCC0160020802B8000103AD0002
2910	 40C	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x409000004090000034F000203780002012CFFCC0160020802B8000103AD0002
- stack 0: 0xE0
2911	 40E	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x4090000
2912	 40F	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x4090000
- stack 0: 0xFFFF
2913	 412	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2914	 413	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x1
2915	 415	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2916	 416	POP		 	 
- stack 0: 0x5E8
2917	 417	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2918	 419	ADD		 	 
- stack 0: 0x5EC
2919	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2920	 41B	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x4090000034F000203780002012CFFCC0160020802B8000103AD000203C7FFD4
2921	 41C	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x4090000034F000203780002012CFFCC0160020802B8000103AD000203C7FFD4
- stack 0: 0xF0
2922	 41E	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x409
2923	 41F	JUMP		 	 
- stack 0: 0x5EC
2924	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5EC
2925	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2926	 40B	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x4090000034F000203780002012CFFCC0160020802B8000103AD000203C7FFD4
2927	 40C	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x4090000034F000203780002012CFFCC0160020802B8000103AD000203C7FFD4
- stack 0: 0xE0
2928	 40E	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x4090000
2929	 40F	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x4090000
- stack 0: 0xFFFF
2930	 412	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
2931	 413	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x1
2932	 415	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
2933	 416	POP		 	 
- stack 0: 0x5EC
2934	 417	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2935	 419	ADD		 	 
- stack 0: 0x5F0
2936	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2937	 41B	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x34F000203780002012CFFCC0160020802B8000103AD000203C7FFD40146000F
2938	 41C	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x34F000203780002012CFFCC0160020802B8000103AD000203C7FFD40146000F
- stack 0: 0xF0
2939	 41E	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x34F
2940	 41F	JUMP		 	 
- stack 0: 0x5F0
2941	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x5F0
2942	 350	PUSH2	0020	 	 
- stack 1: 0x5F0
- stack 0: 0x20
2943	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
2944	 354	PUSH2	0040	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x40
2945	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x840
2946	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x5F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 1: 0x840
- stack 0: 0x5F0
2947	 359	MLOAD		 	 
- stack 3: 0x5F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 1: 0x840
- stack 0: 0x34F000203780002012CFFCC0160020802B8000103AD000203C7FFD40146000F
2948	 35A	PUSH1	E0	 	 
- stack 4: 0x5F0
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 2: 0x840
- stack 1: 0x34F000203780002012CFFCC0160020802B8000103AD000203C7FFD40146000F
- stack 0: 0xE0
2949	 35C	SHR		 	 
- stack 3: 0x5F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 1: 0x840
- stack 0: 0x34F0002
2950	 35D	PUSH2	FFFF	 	 
- stack 4: 0x5F0
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 2: 0x840
- stack 1: 0x34F0002
- stack 0: 0xFFFF
2951	 360	AND		 	 
- stack 3: 0x5F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 1: 0x840
- stack 0: 0x2
2952	 361	PUSH1	01	 	 
- stack 4: 0x5F0
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0x1
2953	 363	SIGNEXTEND		 	 
- stack 3: 0x5F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 1: 0x840
- stack 0: 0x2
2954	 364	ADD		 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x842
2955	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 1: 0x842
- stack 0: 0xFFFFFFFF
2956	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x842
2957	 36B	PUSH1	03	 	 
- stack 3: 0x5F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 1: 0x842
- stack 0: 0x3
2958	 36D	XOR		 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x841
2959	 36E	MSTORE8		 	 
- stack 0: 0x5F0
2960	 36F	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2961	 371	ADD		 	 
- stack 0: 0x5F4
2962	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2963	 373	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x3780002012CFFCC0160020802B8000103AD000203C7FFD40146000F030C0000
2964	 374	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x3780002012CFFCC0160020802B8000103AD000203C7FFD40146000F030C0000
- stack 0: 0xF0
2965	 376	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x378
2966	 377	JUMP		 	 
- stack 0: 0x5F4
2967	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x5F4
2968	 379	PUSH2	0040	 	 
- stack 1: 0x5F4
- stack 0: 0x40
2969	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x5F4
- stack 0: 0x840
2970	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
2971	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x840
2972	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5F4
- stack 1: 0x840
- stack 0: 0x5F4
2973	 384	MLOAD		 	 
- stack 2: 0x5F4
- stack 1: 0x840
- stack 0: 0x3780002012CFFCC0160020802B8000103AD000203C7FFD40146000F030C0000
2974	 385	PUSH1	E0	 	 
- stack 3: 0x5F4
- stack 2: 0x840
- stack 1: 0x3780002012CFFCC0160020802B8000103AD000203C7FFD40146000F030C0000
- stack 0: 0xE0
2975	 387	SHR		 	 
- stack 2: 0x5F4
- stack 1: 0x840
- stack 0: 0x3780002
2976	 388	PUSH2	FFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x840
- stack 1: 0x3780002
- stack 0: 0xFFFF
2977	 38B	AND		 	 
- stack 2: 0x5F4
- stack 1: 0x840
- stack 0: 0x2
2978	 38C	PUSH1	01	 	 
- stack 3: 0x5F4
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0x1
2979	 38E	SIGNEXTEND		 	 
- stack 2: 0x5F4
- stack 1: 0x840
- stack 0: 0x2
2980	 38F	ADD		 	 
- stack 1: 0x5F4
- stack 0: 0x842
2981	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x842
- stack 0: 0xFFFFFFFF
2982	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x842
2983	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x5F4
- stack 1: 0x842
- stack 0: 0x3
2984	 398	XOR		 	 
- stack 1: 0x5F4
- stack 0: 0x841
2985	 399	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0xCCCDDD0AA000AA00009878000000000000000000000000000000000000000000
2986	 39A	PUSH1	F8	 	 
- stack 2: 0x5F4
- stack 1: 0xCCCDDD0AA000AA00009878000000000000000000000000000000000000000000
- stack 0: 0xF8
2987	 39C	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0xCC
2988	 39D	PUSH1	00	 	 
- stack 2: 0x5F4
- stack 1: 0xCC
- stack 0: 0x0
2989	 39F	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
2990	 3A0	PUSH2	0060	 	 
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x60
2991	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x5F4
2992	 3A4	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2993	 3A6	ADD		 	 
- stack 0: 0x5F8
2994	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2995	 3A8	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x12CFFCC0160020802B8000103AD000203C7FFD40146000F030C00000326FFBC
2996	 3A9	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x12CFFCC0160020802B8000103AD000203C7FFD40146000F030C00000326FFBC
- stack 0: 0xF0
2997	 3AB	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x12C
2998	 3AC	JUMP		 	 
- stack 0: 0x5F8
2999	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x5F8
3000	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3001	 12E	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x12CFFCC0160020802B8000103AD000203C7FFD40146000F030C00000326FFBC
3002	 12F	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x12CFFCC0160020802B8000103AD000203C7FFD40146000F030C00000326FFBC
- stack 0: 0xE0
3003	 131	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x12CFFCC
3004	 132	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x12CFFCC
- stack 0: 0xFFFF
3005	 135	AND		 	 
- stack 1: 0x5F8
- stack 0: 0xFFCC
3006	 136	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xFFCC
- stack 0: 0x1
3007	 138	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
3008	 139	PUSH2	03A0	 	 
- stack 2: 0x5F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x3A0
3009	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x5F8
3010	 13D	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3011	 13F	ADD		 	 
- stack 0: 0x5FC
3012	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3013	 141	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x160020802B8000103AD000203C7FFD40146000F030C00000326FFBC04090000
3014	 142	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x160020802B8000103AD000203C7FFD40146000F030C00000326FFBC04090000
- stack 0: 0xF0
3015	 144	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x160
3016	 145	JUMP		 	 
- stack 0: 0x5FC
3017	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x5FC
3018	 161	PUSH2	0060	 	 
- stack 1: 0x5FC
- stack 0: 0x60
3019	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x5FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
3020	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0xFFFFFFFF
3021	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5FC
- stack 0: 0xFFFFFFCC
3022	 16B	PUSH2	03A0	 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFFFCC
- stack 0: 0x3A0
3023	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x5FC
- stack 1: 0xFFFFFFCC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
3024	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5FC
- stack 2: 0xFFFFFFCC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0xFFFFFFFF
3025	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5FC
- stack 1: 0xFFFFFFCC
- stack 0: 0xFFFFFFCC
3026	 175	SUB		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3027	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x17E
3028	 179	JUMPI		 	 
- stack 0: 0x5FC
3029	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x5FC
- stack 0: 0x198
3030	 17D	JUMP		 	 
- stack 0: 0x5FC
3031	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x5FC
3032	 199	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3033	 19B	ADD		 	 
- stack 0: 0x600
3034	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3035	 19D	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x2B8000103AD000203C7FFD40146000F030C00000326FFBC0409000003400000
3036	 19E	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x2B8000103AD000203C7FFD40146000F030C00000326FFBC0409000003400000
- stack 0: 0xF0
3037	 1A0	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2B8
3038	 1A1	JUMP		 	 
- stack 0: 0x600
3039	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x600
3040	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3041	 2BA	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x2B8000103AD000203C7FFD40146000F030C00000326FFBC0409000003400000
3042	 2BB	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x2B8000103AD000203C7FFD40146000F030C00000326FFBC0409000003400000
- stack 0: 0xE0
3043	 2BD	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2B80001
3044	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x2B80001
- stack 0: 0xFFFF
3045	 2C1	AND		 	 
- stack 1: 0x600
- stack 0: 0x1
3046	 2C2	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
3047	 2C4	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x1
3048	 2C5	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x80
3049	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x0
3050	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x600
- stack 0: 0x1
3051	 2CA	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x80
3052	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x600
3053	 2CE	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3054	 2D0	ADD		 	 
- stack 0: 0x604
3055	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3056	 2D2	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3AD000203C7FFD40146000F030C00000326FFBC040900000340000001B50224
3057	 2D3	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x3AD000203C7FFD40146000F030C00000326FFBC040900000340000001B50224
- stack 0: 0xF0
3058	 2D5	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3AD
3059	 2D6	JUMP		 	 
- stack 0: 0x604
3060	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x604
3061	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3062	 3AF	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3AD000203C7FFD40146000F030C00000326FFBC040900000340000001B50224
3063	 3B0	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x3AD000203C7FFD40146000F030C00000326FFBC040900000340000001B50224
- stack 0: 0xE0
3064	 3B2	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3AD0002
3065	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
3066	 3B6	AND		 	 
- stack 1: 0x604
- stack 0: 0x2
3067	 3B7	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x1
3068	 3B9	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x2
3069	 3BA	PUSH2	00A0	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0xA0
3070	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x604
3071	 3BE	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3072	 3C0	ADD		 	 
- stack 0: 0x608
3073	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3074	 3C2	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x3C7FFD40146000F030C00000326FFBC040900000340000001B50224034F0003
3075	 3C3	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x3C7FFD40146000F030C00000326FFBC040900000340000001B50224034F0003
- stack 0: 0xF0
3076	 3C5	SHR		 	 
- stack 1: 0x608
- stack 0: 0x3C7
3077	 3C6	JUMP		 	 
- stack 0: 0x608
3078	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x608
3079	 3C8	PUSH2	0080	 	 
- stack 1: 0x608
- stack 0: 0x80
3080	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x608
- stack 0: 0x1
3081	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3082	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x608
- stack 0: 0x1
3083	 3D2	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0xA0
3084	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x2
3085	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x608
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3086	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x2
3087	 3DC	SUB		 	 
- stack 1: 0x608
- stack 0: 0x1
3088	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x3E5
3089	 3E0	JUMPI		 	 
- stack 0: 0x608
3090	 3E5	JUMPDEST		 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x608
3091	 3E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3092	 3E7	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x3C7FFD40146000F030C00000326FFBC040900000340000001B50224034F0003
3093	 3E8	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x3C7FFD40146000F030C00000326FFBC040900000340000001B50224034F0003
- stack 0: 0xE0
3094	 3EA	SHR		 	 
- stack 1: 0x608
- stack 0: 0x3C7FFD4
3095	 3EB	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x3C7FFD4
- stack 0: 0xFFFF
3096	 3EE	AND		 	 
- stack 1: 0x608
- stack 0: 0xFFD4
3097	 3EF	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0xFFD4
- stack 0: 0x1
3098	 3F1	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4
3099	 3F2	ADD		 	 
- stack 0: 0x5DC
3100	 3F3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5DC
- stack 0: 0xFFFFFFFF
3101	 3F8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5DC
3102	 3F9	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3103	 3FA	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x326FFCC0340000001B502600409000004090000034F000203780002012CFFCC
3104	 3FB	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x326FFCC0340000001B502600409000004090000034F000203780002012CFFCC
- stack 0: 0xF0
3105	 3FD	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x326
3106	 3FE	JUMP		 	 
- stack 0: 0x5DC
3107	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x5DC
3108	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
3109	 328	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x326FFCC0340000001B502600409000004090000034F000203780002012CFFCC
3110	 329	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x326FFCC0340000001B502600409000004090000034F000203780002012CFFCC
- stack 0: 0xE0
3111	 32B	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x326FFCC
3112	 32C	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x326FFCC
- stack 0: 0xFFFF
3113	 32F	AND		 	 
- stack 1: 0x5DC
- stack 0: 0xFFCC
3114	 330	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0xFFCC
- stack 0: 0x1
3115	 332	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
3116	 333	PUSH2	0020	 	 
- stack 2: 0x5DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x20
3117	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x5DC
3118	 337	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
3119	 339	ADD		 	 
- stack 0: 0x5E0
3120	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
3121	 33B	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x340000001B502600409000004090000034F000203780002012CFFCC01600208
3122	 33C	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x340000001B502600409000004090000034F000203780002012CFFCC01600208
- stack 0: 0xF0
3123	 33E	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x340
3124	 33F	JUMP		 	 
- stack 0: 0x5E0
3125	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x5E0
3126	 341	DUP1		 	 
- stack 1: 0x5E0
- stack 0: 0x5E0
3127	 342	PUSH2	0040	 	 
- stack 2: 0x5E0
- stack 1: 0x5E0
- stack 0: 0x40
3128	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x5E0
3129	 346	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
3130	 348	ADD		 	 
- stack 0: 0x5E4
3131	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3132	 34A	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1B502600409000004090000034F000203780002012CFFCC0160020802B80001
3133	 34B	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x1B502600409000004090000034F000203780002012CFFCC0160020802B80001
- stack 0: 0xF0
3134	 34D	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1B5
3135	 34E	JUMP		 	 
- stack 0: 0x5E4
3136	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x5E4
3137	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
3138	 1B7	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x1B502600409000004090000034F000203780002012CFFCC0160020802B80001
3139	 1B8	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x1B502600409000004090000034F000203780002012CFFCC0160020802B80001
- stack 0: 0xE0
3140	 1BA	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x1B50260
3141	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x1B50260
- stack 0: 0xFFFF
3142	 1BE	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x260
3143	 1BF	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x260
- stack 0: 0x1
3144	 1C1	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x260
3145	 1C2	PUSH2	0040	 	 
- stack 2: 0x5E4
- stack 1: 0x260
- stack 0: 0x40
3146	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x5E4
- stack 1: 0x260
- stack 0: 0x5E0
3147	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x5E4
- stack 0: 0x840
3148	 1C7	PUSH2	0040	 	 
- stack 2: 0x5E4
- stack 1: 0x840
- stack 0: 0x40
3149	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x5E4
3150	 1CB	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3151	 1CD	ADD		 	 
- stack 0: 0x5E8
3152	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3153	 1CF	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x409000004090000034F000203780002012CFFCC0160020802B8000103AD0002
3154	 1D0	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x409000004090000034F000203780002012CFFCC0160020802B8000103AD0002
- stack 0: 0xF0
3155	 1D2	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x409
3156	 1D3	JUMP		 	 
- stack 0: 0x5E8
3157	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5E8
3158	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
3159	 40B	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x409000004090000034F000203780002012CFFCC0160020802B8000103AD0002
3160	 40C	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x409000004090000034F000203780002012CFFCC0160020802B8000103AD0002
- stack 0: 0xE0
3161	 40E	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x4090000
3162	 40F	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x4090000
- stack 0: 0xFFFF
3163	 412	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3164	 413	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x1
3165	 415	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
3166	 416	POP		 	 
- stack 0: 0x5E8
3167	 417	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3168	 419	ADD		 	 
- stack 0: 0x5EC
3169	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3170	 41B	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x4090000034F000203780002012CFFCC0160020802B8000103AD000203C7FFD4
3171	 41C	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x4090000034F000203780002012CFFCC0160020802B8000103AD000203C7FFD4
- stack 0: 0xF0
3172	 41E	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x409
3173	 41F	JUMP		 	 
- stack 0: 0x5EC
3174	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5EC
3175	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
3176	 40B	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x4090000034F000203780002012CFFCC0160020802B8000103AD000203C7FFD4
3177	 40C	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x4090000034F000203780002012CFFCC0160020802B8000103AD000203C7FFD4
- stack 0: 0xE0
3178	 40E	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x4090000
3179	 40F	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x4090000
- stack 0: 0xFFFF
3180	 412	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
3181	 413	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x1
3182	 415	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
3183	 416	POP		 	 
- stack 0: 0x5EC
3184	 417	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3185	 419	ADD		 	 
- stack 0: 0x5F0
3186	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3187	 41B	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x34F000203780002012CFFCC0160020802B8000103AD000203C7FFD40146000F
3188	 41C	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x34F000203780002012CFFCC0160020802B8000103AD000203C7FFD40146000F
- stack 0: 0xF0
3189	 41E	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x34F
3190	 41F	JUMP		 	 
- stack 0: 0x5F0
3191	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x5F0
3192	 350	PUSH2	0020	 	 
- stack 1: 0x5F0
- stack 0: 0x20
3193	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
3194	 354	PUSH2	0040	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x40
3195	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x840
3196	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x5F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 1: 0x840
- stack 0: 0x5F0
3197	 359	MLOAD		 	 
- stack 3: 0x5F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 1: 0x840
- stack 0: 0x34F000203780002012CFFCC0160020802B8000103AD000203C7FFD40146000F
3198	 35A	PUSH1	E0	 	 
- stack 4: 0x5F0
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 2: 0x840
- stack 1: 0x34F000203780002012CFFCC0160020802B8000103AD000203C7FFD40146000F
- stack 0: 0xE0
3199	 35C	SHR		 	 
- stack 3: 0x5F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 1: 0x840
- stack 0: 0x34F0002
3200	 35D	PUSH2	FFFF	 	 
- stack 4: 0x5F0
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 2: 0x840
- stack 1: 0x34F0002
- stack 0: 0xFFFF
3201	 360	AND		 	 
- stack 3: 0x5F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 1: 0x840
- stack 0: 0x2
3202	 361	PUSH1	01	 	 
- stack 4: 0x5F0
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0x1
3203	 363	SIGNEXTEND		 	 
- stack 3: 0x5F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 1: 0x840
- stack 0: 0x2
3204	 364	ADD		 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x842
3205	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 1: 0x842
- stack 0: 0xFFFFFFFF
3206	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x842
3207	 36B	PUSH1	03	 	 
- stack 3: 0x5F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 1: 0x842
- stack 0: 0x3
3208	 36D	XOR		 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x841
3209	 36E	MSTORE8		 	 
- stack 0: 0x5F0
3210	 36F	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3211	 371	ADD		 	 
- stack 0: 0x5F4
3212	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3213	 373	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x3780002012CFFCC0160020802B8000103AD000203C7FFD40146000F030C0000
3214	 374	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x3780002012CFFCC0160020802B8000103AD000203C7FFD40146000F030C0000
- stack 0: 0xF0
3215	 376	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x378
3216	 377	JUMP		 	 
- stack 0: 0x5F4
3217	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x5F4
3218	 379	PUSH2	0040	 	 
- stack 1: 0x5F4
- stack 0: 0x40
3219	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x5F4
- stack 0: 0x840
3220	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
3221	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x840
3222	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5F4
- stack 1: 0x840
- stack 0: 0x5F4
3223	 384	MLOAD		 	 
- stack 2: 0x5F4
- stack 1: 0x840
- stack 0: 0x3780002012CFFCC0160020802B8000103AD000203C7FFD40146000F030C0000
3224	 385	PUSH1	E0	 	 
- stack 3: 0x5F4
- stack 2: 0x840
- stack 1: 0x3780002012CFFCC0160020802B8000103AD000203C7FFD40146000F030C0000
- stack 0: 0xE0
3225	 387	SHR		 	 
- stack 2: 0x5F4
- stack 1: 0x840
- stack 0: 0x3780002
3226	 388	PUSH2	FFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x840
- stack 1: 0x3780002
- stack 0: 0xFFFF
3227	 38B	AND		 	 
- stack 2: 0x5F4
- stack 1: 0x840
- stack 0: 0x2
3228	 38C	PUSH1	01	 	 
- stack 3: 0x5F4
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0x1
3229	 38E	SIGNEXTEND		 	 
- stack 2: 0x5F4
- stack 1: 0x840
- stack 0: 0x2
3230	 38F	ADD		 	 
- stack 1: 0x5F4
- stack 0: 0x842
3231	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x842
- stack 0: 0xFFFFFFFF
3232	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x842
3233	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x5F4
- stack 1: 0x842
- stack 0: 0x3
3234	 398	XOR		 	 
- stack 1: 0x5F4
- stack 0: 0x841
3235	 399	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0xCCCDDD0AA000AA00009878000000000000000000000000000000000000000000
3236	 39A	PUSH1	F8	 	 
- stack 2: 0x5F4
- stack 1: 0xCCCDDD0AA000AA00009878000000000000000000000000000000000000000000
- stack 0: 0xF8
3237	 39C	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0xCC
3238	 39D	PUSH1	00	 	 
- stack 2: 0x5F4
- stack 1: 0xCC
- stack 0: 0x0
3239	 39F	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
3240	 3A0	PUSH2	0060	 	 
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x60
3241	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x5F4
3242	 3A4	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3243	 3A6	ADD		 	 
- stack 0: 0x5F8
3244	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3245	 3A8	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x12CFFCC0160020802B8000103AD000203C7FFD40146000F030C00000326FFBC
3246	 3A9	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x12CFFCC0160020802B8000103AD000203C7FFD40146000F030C00000326FFBC
- stack 0: 0xF0
3247	 3AB	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x12C
3248	 3AC	JUMP		 	 
- stack 0: 0x5F8
3249	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x5F8
3250	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3251	 12E	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x12CFFCC0160020802B8000103AD000203C7FFD40146000F030C00000326FFBC
3252	 12F	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x12CFFCC0160020802B8000103AD000203C7FFD40146000F030C00000326FFBC
- stack 0: 0xE0
3253	 131	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x12CFFCC
3254	 132	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x12CFFCC
- stack 0: 0xFFFF
3255	 135	AND		 	 
- stack 1: 0x5F8
- stack 0: 0xFFCC
3256	 136	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xFFCC
- stack 0: 0x1
3257	 138	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
3258	 139	PUSH2	03A0	 	 
- stack 2: 0x5F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0x3A0
3259	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x5F8
3260	 13D	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3261	 13F	ADD		 	 
- stack 0: 0x5FC
3262	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3263	 141	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x160020802B8000103AD000203C7FFD40146000F030C00000326FFBC04090000
3264	 142	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x160020802B8000103AD000203C7FFD40146000F030C00000326FFBC04090000
- stack 0: 0xF0
3265	 144	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x160
3266	 145	JUMP		 	 
- stack 0: 0x5FC
3267	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x5FC
3268	 161	PUSH2	0060	 	 
- stack 1: 0x5FC
- stack 0: 0x60
3269	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x5FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
3270	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0xFFFFFFFF
3271	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5FC
- stack 0: 0xFFFFFFCC
3272	 16B	PUSH2	03A0	 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFFFCC
- stack 0: 0x3A0
3273	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x5FC
- stack 1: 0xFFFFFFCC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
3274	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5FC
- stack 2: 0xFFFFFFCC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
- stack 0: 0xFFFFFFFF
3275	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5FC
- stack 1: 0xFFFFFFCC
- stack 0: 0xFFFFFFCC
3276	 175	SUB		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3277	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x17E
3278	 179	JUMPI		 	 
- stack 0: 0x5FC
3279	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x5FC
- stack 0: 0x198
3280	 17D	JUMP		 	 
- stack 0: 0x5FC
3281	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x5FC
3282	 199	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3283	 19B	ADD		 	 
- stack 0: 0x600
3284	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3285	 19D	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x2B8000103AD000203C7FFD40146000F030C00000326FFBC0409000003400000
3286	 19E	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x2B8000103AD000203C7FFD40146000F030C00000326FFBC0409000003400000
- stack 0: 0xF0
3287	 1A0	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2B8
3288	 1A1	JUMP		 	 
- stack 0: 0x600
3289	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x600
3290	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3291	 2BA	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x2B8000103AD000203C7FFD40146000F030C00000326FFBC0409000003400000
3292	 2BB	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x2B8000103AD000203C7FFD40146000F030C00000326FFBC0409000003400000
- stack 0: 0xE0
3293	 2BD	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2B80001
3294	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x2B80001
- stack 0: 0xFFFF
3295	 2C1	AND		 	 
- stack 1: 0x600
- stack 0: 0x1
3296	 2C2	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
3297	 2C4	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x1
3298	 2C5	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x80
3299	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
3300	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x600
- stack 0: 0x2
3301	 2CA	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0x80
3302	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x600
3303	 2CE	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3304	 2D0	ADD		 	 
- stack 0: 0x604
3305	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3306	 2D2	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3AD000203C7FFD40146000F030C00000326FFBC040900000340000001B50224
3307	 2D3	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x3AD000203C7FFD40146000F030C00000326FFBC040900000340000001B50224
- stack 0: 0xF0
3308	 2D5	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3AD
3309	 2D6	JUMP		 	 
- stack 0: 0x604
3310	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x604
3311	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3312	 3AF	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3AD000203C7FFD40146000F030C00000326FFBC040900000340000001B50224
3313	 3B0	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x3AD000203C7FFD40146000F030C00000326FFBC040900000340000001B50224
- stack 0: 0xE0
3314	 3B2	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3AD0002
3315	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
3316	 3B6	AND		 	 
- stack 1: 0x604
- stack 0: 0x2
3317	 3B7	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x1
3318	 3B9	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x2
3319	 3BA	PUSH2	00A0	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0xA0
3320	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x604
3321	 3BE	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3322	 3C0	ADD		 	 
- stack 0: 0x608
3323	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3324	 3C2	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x3C7FFD40146000F030C00000326FFBC040900000340000001B50224034F0003
3325	 3C3	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x3C7FFD40146000F030C00000326FFBC040900000340000001B50224034F0003
- stack 0: 0xF0
3326	 3C5	SHR		 	 
- stack 1: 0x608
- stack 0: 0x3C7
3327	 3C6	JUMP		 	 
- stack 0: 0x608
3328	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x608
3329	 3C8	PUSH2	0080	 	 
- stack 1: 0x608
- stack 0: 0x80
3330	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x608
- stack 0: 0x2
3331	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3332	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x608
- stack 0: 0x2
3333	 3D2	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xA0
3334	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x2
3335	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x608
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3336	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x2
3337	 3DC	SUB		 	 
- stack 1: 0x608
- stack 0: 0x0
3338	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x3E5
3339	 3E0	JUMPI		 	 
- stack 0: 0x608
3340	 3E1	PUSH2	03FF	 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 1: 0x608
- stack 0: 0x3FF
3341	 3E4	JUMP		 	 
- stack 0: 0x608
3342	 3FF	JUMPDEST		 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x608
3343	 400	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3344	 402	ADD		 	 
- stack 0: 0x60C
3345	 403	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3346	 404	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x146000F030C00000326FFBC040900000340000001B50224034F000303780003
3347	 405	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x146000F030C00000326FFBC040900000340000001B50224034F000303780003
- stack 0: 0xF0
3348	 407	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x146
3349	 408	JUMP		 	 
- stack 0: 0x60C
3350	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x60C
3351	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
3352	 148	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x146000F030C00000326FFBC040900000340000001B50224034F000303780003
3353	 149	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x146000F030C00000326FFBC040900000340000001B50224034F000303780003
- stack 0: 0xE0
3354	 14B	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x146000F
3355	 14C	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x146000F
- stack 0: 0xFFFF
3356	 14F	AND		 	 
- stack 1: 0x60C
- stack 0: 0xF
3357	 150	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0xF
- stack 0: 0x1
3358	 152	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0xF
3359	 153	PUSH2	0380	 	 
- stack 2: 0x60C
- stack 1: 0xF
- stack 0: 0x380
3360	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x60C
3361	 157	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3362	 159	ADD		 	 
- stack 0: 0x610
3363	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3364	 15B	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x30C00000326FFBC040900000340000001B50224034F000303780003012CFFBC
3365	 15C	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x30C00000326FFBC040900000340000001B50224034F000303780003012CFFBC
- stack 0: 0xF0
3366	 15E	SHR		 	 
- stack 1: 0x610
- stack 0: 0x30C
3367	 15F	JUMP		 	 
- stack 0: 0x610
3368	 30C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x610
3369	 30D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3370	 30E	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x30C00000326FFBC040900000340000001B50224034F000303780003012CFFBC
3371	 30F	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x30C00000326FFBC040900000340000001B50224034F000303780003012CFFBC
- stack 0: 0xE0
3372	 311	SHR		 	 
- stack 1: 0x610
- stack 0: 0x30C0000
3373	 312	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x30C0000
- stack 0: 0xFFFF
3374	 315	AND		 	 
- stack 1: 0x610
- stack 0: 0x0
3375	 316	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x1
3376	 318	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x0
3377	 319	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x80
3378	 31C	MSTORE		 	  ;; # store to x4
- stack 0: 0x610
3379	 31D	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3380	 31F	ADD		 	 
- stack 0: 0x614
3381	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3382	 321	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x326FFBC040900000340000001B50224034F000303780003012CFFBC016001D4
3383	 322	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x326FFBC040900000340000001B50224034F000303780003012CFFBC016001D4
- stack 0: 0xF0
3384	 324	SHR		 	 
- stack 1: 0x614
- stack 0: 0x326
3385	 325	JUMP		 	 
- stack 0: 0x614
3386	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x614
3387	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3388	 328	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x326FFBC040900000340000001B50224034F000303780003012CFFBC016001D4
3389	 329	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x326FFBC040900000340000001B50224034F000303780003012CFFBC016001D4
- stack 0: 0xE0
3390	 32B	SHR		 	 
- stack 1: 0x614
- stack 0: 0x326FFBC
3391	 32C	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x326FFBC
- stack 0: 0xFFFF
3392	 32F	AND		 	 
- stack 1: 0x614
- stack 0: 0xFFBC
3393	 330	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0xFFBC
- stack 0: 0x1
3394	 332	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
3395	 333	PUSH2	0020	 	 
- stack 2: 0x614
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x20
3396	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x614
3397	 337	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3398	 339	ADD		 	 
- stack 0: 0x618
3399	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3400	 33B	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x40900000340000001B50224034F000303780003012CFFBC016001D402B80001
3401	 33C	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x40900000340000001B50224034F000303780003012CFFBC016001D402B80001
- stack 0: 0xF0
3402	 33E	SHR		 	 
- stack 1: 0x618
- stack 0: 0x409
3403	 33F	JUMP		 	 
- stack 0: 0x618
3404	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x618
3405	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3406	 40B	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x40900000340000001B50224034F000303780003012CFFBC016001D402B80001
3407	 40C	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x40900000340000001B50224034F000303780003012CFFBC016001D402B80001
- stack 0: 0xE0
3408	 40E	SHR		 	 
- stack 1: 0x618
- stack 0: 0x4090000
3409	 40F	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x4090000
- stack 0: 0xFFFF
3410	 412	AND		 	 
- stack 1: 0x618
- stack 0: 0x0
3411	 413	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x1
3412	 415	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x0
3413	 416	POP		 	 
- stack 0: 0x618
3414	 417	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3415	 419	ADD		 	 
- stack 0: 0x61C
3416	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3417	 41B	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x340000001B50224034F000303780003012CFFBC016001D402B8000103AD0002
3418	 41C	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x340000001B50224034F000303780003012CFFBC016001D402B8000103AD0002
- stack 0: 0xF0
3419	 41E	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x340
3420	 41F	JUMP		 	 
- stack 0: 0x61C
3421	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x61C
3422	 341	DUP1		 	 
- stack 1: 0x61C
- stack 0: 0x61C
3423	 342	PUSH2	0040	 	 
- stack 2: 0x61C
- stack 1: 0x61C
- stack 0: 0x40
3424	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x61C
3425	 346	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3426	 348	ADD		 	 
- stack 0: 0x620
3427	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3428	 34A	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x1B50224034F000303780003012CFFBC016001D402B8000103AD000203C7FFD8
3429	 34B	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x1B50224034F000303780003012CFFBC016001D402B8000103AD000203C7FFD8
- stack 0: 0xF0
3430	 34D	SHR		 	 
- stack 1: 0x620
- stack 0: 0x1B5
3431	 34E	JUMP		 	 
- stack 0: 0x620
3432	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x620
3433	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3434	 1B7	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x1B50224034F000303780003012CFFBC016001D402B8000103AD000203C7FFD8
3435	 1B8	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x1B50224034F000303780003012CFFBC016001D402B8000103AD000203C7FFD8
- stack 0: 0xE0
3436	 1BA	SHR		 	 
- stack 1: 0x620
- stack 0: 0x1B50224
3437	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x1B50224
- stack 0: 0xFFFF
3438	 1BE	AND		 	 
- stack 1: 0x620
- stack 0: 0x224
3439	 1BF	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x224
- stack 0: 0x1
3440	 1C1	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x224
3441	 1C2	PUSH2	0040	 	 
- stack 2: 0x620
- stack 1: 0x224
- stack 0: 0x40
3442	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x620
- stack 1: 0x224
- stack 0: 0x61C
3443	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x620
- stack 0: 0x840
3444	 1C7	PUSH2	0040	 	 
- stack 2: 0x620
- stack 1: 0x840
- stack 0: 0x40
3445	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x620
3446	 1CB	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3447	 1CD	ADD		 	 
- stack 0: 0x624
3448	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3449	 1CF	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x34F000303780003012CFFBC016001D402B8000103AD000203C7FFD801460010
3450	 1D0	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x34F000303780003012CFFBC016001D402B8000103AD000203C7FFD801460010
- stack 0: 0xF0
3451	 1D2	SHR		 	 
- stack 1: 0x624
- stack 0: 0x34F
3452	 1D3	JUMP		 	 
- stack 0: 0x624
3453	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x624
3454	 350	PUSH2	0020	 	 
- stack 1: 0x624
- stack 0: 0x20
3455	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x624
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
3456	 354	PUSH2	0040	 	 
- stack 2: 0x624
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x40
3457	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x624
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x840
3458	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x624
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 1: 0x840
- stack 0: 0x624
3459	 359	MLOAD		 	 
- stack 3: 0x624
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 1: 0x840
- stack 0: 0x34F000303780003012CFFBC016001D402B8000103AD000203C7FFD801460010
3460	 35A	PUSH1	E0	 	 
- stack 4: 0x624
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 2: 0x840
- stack 1: 0x34F000303780003012CFFBC016001D402B8000103AD000203C7FFD801460010
- stack 0: 0xE0
3461	 35C	SHR		 	 
- stack 3: 0x624
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 1: 0x840
- stack 0: 0x34F0003
3462	 35D	PUSH2	FFFF	 	 
- stack 4: 0x624
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 2: 0x840
- stack 1: 0x34F0003
- stack 0: 0xFFFF
3463	 360	AND		 	 
- stack 3: 0x624
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 1: 0x840
- stack 0: 0x3
3464	 361	PUSH1	01	 	 
- stack 4: 0x624
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 2: 0x840
- stack 1: 0x3
- stack 0: 0x1
3465	 363	SIGNEXTEND		 	 
- stack 3: 0x624
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 1: 0x840
- stack 0: 0x3
3466	 364	ADD		 	 
- stack 2: 0x624
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x843
3467	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x624
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 1: 0x843
- stack 0: 0xFFFFFFFF
3468	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x624
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x843
3469	 36B	PUSH1	03	 	 
- stack 3: 0x624
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 1: 0x843
- stack 0: 0x3
3470	 36D	XOR		 	 
- stack 2: 0x624
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x840
3471	 36E	MSTORE8		 	 
- stack 0: 0x624
3472	 36F	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3473	 371	ADD		 	 
- stack 0: 0x628
3474	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3475	 373	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x3780003012CFFBC016001D402B8000103AD000203C7FFD801460010030C0000
3476	 374	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x3780003012CFFBC016001D402B8000103AD000203C7FFD801460010030C0000
- stack 0: 0xF0
3477	 376	SHR		 	 
- stack 1: 0x628
- stack 0: 0x378
3478	 377	JUMP		 	 
- stack 0: 0x628
3479	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x628
3480	 379	PUSH2	0040	 	 
- stack 1: 0x628
- stack 0: 0x40
3481	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x628
- stack 0: 0x840
3482	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x628
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
3483	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x628
- stack 0: 0x840
3484	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x628
- stack 1: 0x840
- stack 0: 0x628
3485	 384	MLOAD		 	 
- stack 2: 0x628
- stack 1: 0x840
- stack 0: 0x3780003012CFFBC016001D402B8000103AD000203C7FFD801460010030C0000
3486	 385	PUSH1	E0	 	 
- stack 3: 0x628
- stack 2: 0x840
- stack 1: 0x3780003012CFFBC016001D402B8000103AD000203C7FFD801460010030C0000
- stack 0: 0xE0
3487	 387	SHR		 	 
- stack 2: 0x628
- stack 1: 0x840
- stack 0: 0x3780003
3488	 388	PUSH2	FFFF	 	 
- stack 3: 0x628
- stack 2: 0x840
- stack 1: 0x3780003
- stack 0: 0xFFFF
3489	 38B	AND		 	 
- stack 2: 0x628
- stack 1: 0x840
- stack 0: 0x3
3490	 38C	PUSH1	01	 	 
- stack 3: 0x628
- stack 2: 0x840
- stack 1: 0x3
- stack 0: 0x1
3491	 38E	SIGNEXTEND		 	 
- stack 2: 0x628
- stack 1: 0x840
- stack 0: 0x3
3492	 38F	ADD		 	 
- stack 1: 0x628
- stack 0: 0x843
3493	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x628
- stack 1: 0x843
- stack 0: 0xFFFFFFFF
3494	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x628
- stack 0: 0x843
3495	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x628
- stack 1: 0x843
- stack 0: 0x3
3496	 398	XOR		 	 
- stack 1: 0x628
- stack 0: 0x840
3497	 399	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xBCCCCDDD0AA000AA000098780000000000000000000000000000000000000000
3498	 39A	PUSH1	F8	 	 
- stack 2: 0x628
- stack 1: 0xBCCCCDDD0AA000AA000098780000000000000000000000000000000000000000
- stack 0: 0xF8
3499	 39C	SHR		 	 
- stack 1: 0x628
- stack 0: 0xBC
3500	 39D	PUSH1	00	 	 
- stack 2: 0x628
- stack 1: 0xBC
- stack 0: 0x0
3501	 39F	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
3502	 3A0	PUSH2	0060	 	 
- stack 2: 0x628
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x60
3503	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x628
3504	 3A4	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3505	 3A6	ADD		 	 
- stack 0: 0x62C
3506	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3507	 3A8	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x12CFFBC016001D402B8000103AD000203C7FFD801460010030C00000326FFBB
3508	 3A9	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x12CFFBC016001D402B8000103AD000203C7FFD801460010030C00000326FFBB
- stack 0: 0xF0
3509	 3AB	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x12C
3510	 3AC	JUMP		 	 
- stack 0: 0x62C
3511	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x62C
3512	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3513	 12E	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x12CFFBC016001D402B8000103AD000203C7FFD801460010030C00000326FFBB
3514	 12F	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x12CFFBC016001D402B8000103AD000203C7FFD801460010030C00000326FFBB
- stack 0: 0xE0
3515	 131	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x12CFFBC
3516	 132	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x12CFFBC
- stack 0: 0xFFFF
3517	 135	AND		 	 
- stack 1: 0x62C
- stack 0: 0xFFBC
3518	 136	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0xFFBC
- stack 0: 0x1
3519	 138	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
3520	 139	PUSH2	03A0	 	 
- stack 2: 0x62C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x3A0
3521	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x62C
3522	 13D	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3523	 13F	ADD		 	 
- stack 0: 0x630
3524	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3525	 141	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x16001D402B8000103AD000203C7FFD801460010030C00000326FFBB04090000
3526	 142	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x16001D402B8000103AD000203C7FFD801460010030C00000326FFBB04090000
- stack 0: 0xF0
3527	 144	SHR		 	 
- stack 1: 0x630
- stack 0: 0x160
3528	 145	JUMP		 	 
- stack 0: 0x630
3529	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x630
3530	 161	PUSH2	0060	 	 
- stack 1: 0x630
- stack 0: 0x60
3531	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x630
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
3532	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0xFFFFFFFF
3533	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x630
- stack 0: 0xFFFFFFBC
3534	 16B	PUSH2	03A0	 	 
- stack 2: 0x630
- stack 1: 0xFFFFFFBC
- stack 0: 0x3A0
3535	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x630
- stack 1: 0xFFFFFFBC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
3536	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x630
- stack 2: 0xFFFFFFBC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0xFFFFFFFF
3537	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x630
- stack 1: 0xFFFFFFBC
- stack 0: 0xFFFFFFBC
3538	 175	SUB		 	 
- stack 1: 0x630
- stack 0: 0x0
3539	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x17E
3540	 179	JUMPI		 	 
- stack 0: 0x630
3541	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x630
- stack 0: 0x198
3542	 17D	JUMP		 	 
- stack 0: 0x630
3543	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x630
3544	 199	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3545	 19B	ADD		 	 
- stack 0: 0x634
3546	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3547	 19D	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x2B8000103AD000203C7FFD801460010030C00000326FFBB0409000003400000
3548	 19E	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x2B8000103AD000203C7FFD801460010030C00000326FFBB0409000003400000
- stack 0: 0xF0
3549	 1A0	SHR		 	 
- stack 1: 0x634
- stack 0: 0x2B8
3550	 1A1	JUMP		 	 
- stack 0: 0x634
3551	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x634
3552	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3553	 2BA	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x2B8000103AD000203C7FFD801460010030C00000326FFBB0409000003400000
3554	 2BB	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x2B8000103AD000203C7FFD801460010030C00000326FFBB0409000003400000
- stack 0: 0xE0
3555	 2BD	SHR		 	 
- stack 1: 0x634
- stack 0: 0x2B80001
3556	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x2B80001
- stack 0: 0xFFFF
3557	 2C1	AND		 	 
- stack 1: 0x634
- stack 0: 0x1
3558	 2C2	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x1
3559	 2C4	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x1
3560	 2C5	PUSH2	0080	 	 
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x80
3561	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x0
3562	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x634
- stack 0: 0x1
3563	 2CA	PUSH2	0080	 	 
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x80
3564	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x634
3565	 2CE	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3566	 2D0	ADD		 	 
- stack 0: 0x638
3567	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3568	 2D2	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3AD000203C7FFD801460010030C00000326FFBB040900000340000001B501F0
3569	 2D3	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x3AD000203C7FFD801460010030C00000326FFBB040900000340000001B501F0
- stack 0: 0xF0
3570	 2D5	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3AD
3571	 2D6	JUMP		 	 
- stack 0: 0x638
3572	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x638
3573	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3574	 3AF	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3AD000203C7FFD801460010030C00000326FFBB040900000340000001B501F0
3575	 3B0	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x3AD000203C7FFD801460010030C00000326FFBB040900000340000001B501F0
- stack 0: 0xE0
3576	 3B2	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3AD0002
3577	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
3578	 3B6	AND		 	 
- stack 1: 0x638
- stack 0: 0x2
3579	 3B7	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0x1
3580	 3B9	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x2
3581	 3BA	PUSH2	00A0	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0xA0
3582	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x638
3583	 3BE	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3584	 3C0	ADD		 	 
- stack 0: 0x63C
3585	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3586	 3C2	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x3C7FFD801460010030C00000326FFBB040900000340000001B501F004090000
3587	 3C3	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x3C7FFD801460010030C00000326FFBB040900000340000001B501F004090000
- stack 0: 0xF0
3588	 3C5	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x3C7
3589	 3C6	JUMP		 	 
- stack 0: 0x63C
3590	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x63C
3591	 3C8	PUSH2	0080	 	 
- stack 1: 0x63C
- stack 0: 0x80
3592	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x63C
- stack 0: 0x1
3593	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x63C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3594	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x63C
- stack 0: 0x1
3595	 3D2	PUSH2	00A0	 	 
- stack 2: 0x63C
- stack 1: 0x1
- stack 0: 0xA0
3596	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x63C
- stack 1: 0x1
- stack 0: 0x2
3597	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x63C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3598	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x63C
- stack 1: 0x1
- stack 0: 0x2
3599	 3DC	SUB		 	 
- stack 1: 0x63C
- stack 0: 0x1
3600	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x63C
- stack 1: 0x1
- stack 0: 0x3E5
3601	 3E0	JUMPI		 	 
- stack 0: 0x63C
3602	 3E5	JUMPDEST		 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x63C
3603	 3E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3604	 3E7	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x3C7FFD801460010030C00000326FFBB040900000340000001B501F004090000
3605	 3E8	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x3C7FFD801460010030C00000326FFBB040900000340000001B501F004090000
- stack 0: 0xE0
3606	 3EA	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x3C7FFD8
3607	 3EB	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x3C7FFD8
- stack 0: 0xFFFF
3608	 3EE	AND		 	 
- stack 1: 0x63C
- stack 0: 0xFFD8
3609	 3EF	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0xFFD8
- stack 0: 0x1
3610	 3F1	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
3611	 3F2	ADD		 	 
- stack 0: 0x614
3612	 3F3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x614
- stack 0: 0xFFFFFFFF
3613	 3F8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x614
3614	 3F9	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3615	 3FA	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x326FFBC040900000340000001B50224034F000303780003012CFFBC016001D4
3616	 3FB	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x326FFBC040900000340000001B50224034F000303780003012CFFBC016001D4
- stack 0: 0xF0
3617	 3FD	SHR		 	 
- stack 1: 0x614
- stack 0: 0x326
3618	 3FE	JUMP		 	 
- stack 0: 0x614
3619	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x614
3620	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3621	 328	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x326FFBC040900000340000001B50224034F000303780003012CFFBC016001D4
3622	 329	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x326FFBC040900000340000001B50224034F000303780003012CFFBC016001D4
- stack 0: 0xE0
3623	 32B	SHR		 	 
- stack 1: 0x614
- stack 0: 0x326FFBC
3624	 32C	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x326FFBC
- stack 0: 0xFFFF
3625	 32F	AND		 	 
- stack 1: 0x614
- stack 0: 0xFFBC
3626	 330	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0xFFBC
- stack 0: 0x1
3627	 332	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
3628	 333	PUSH2	0020	 	 
- stack 2: 0x614
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x20
3629	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x614
3630	 337	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3631	 339	ADD		 	 
- stack 0: 0x618
3632	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3633	 33B	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x40900000340000001B50224034F000303780003012CFFBC016001D402B80001
3634	 33C	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x40900000340000001B50224034F000303780003012CFFBC016001D402B80001
- stack 0: 0xF0
3635	 33E	SHR		 	 
- stack 1: 0x618
- stack 0: 0x409
3636	 33F	JUMP		 	 
- stack 0: 0x618
3637	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x618
3638	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3639	 40B	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x40900000340000001B50224034F000303780003012CFFBC016001D402B80001
3640	 40C	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x40900000340000001B50224034F000303780003012CFFBC016001D402B80001
- stack 0: 0xE0
3641	 40E	SHR		 	 
- stack 1: 0x618
- stack 0: 0x4090000
3642	 40F	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x4090000
- stack 0: 0xFFFF
3643	 412	AND		 	 
- stack 1: 0x618
- stack 0: 0x0
3644	 413	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x1
3645	 415	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x0
3646	 416	POP		 	 
- stack 0: 0x618
3647	 417	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3648	 419	ADD		 	 
- stack 0: 0x61C
3649	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3650	 41B	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x340000001B50224034F000303780003012CFFBC016001D402B8000103AD0002
3651	 41C	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x340000001B50224034F000303780003012CFFBC016001D402B8000103AD0002
- stack 0: 0xF0
3652	 41E	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x340
3653	 41F	JUMP		 	 
- stack 0: 0x61C
3654	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x61C
3655	 341	DUP1		 	 
- stack 1: 0x61C
- stack 0: 0x61C
3656	 342	PUSH2	0040	 	 
- stack 2: 0x61C
- stack 1: 0x61C
- stack 0: 0x40
3657	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x61C
3658	 346	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3659	 348	ADD		 	 
- stack 0: 0x620
3660	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3661	 34A	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x1B50224034F000303780003012CFFBC016001D402B8000103AD000203C7FFD8
3662	 34B	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x1B50224034F000303780003012CFFBC016001D402B8000103AD000203C7FFD8
- stack 0: 0xF0
3663	 34D	SHR		 	 
- stack 1: 0x620
- stack 0: 0x1B5
3664	 34E	JUMP		 	 
- stack 0: 0x620
3665	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x620
3666	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3667	 1B7	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x1B50224034F000303780003012CFFBC016001D402B8000103AD000203C7FFD8
3668	 1B8	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x1B50224034F000303780003012CFFBC016001D402B8000103AD000203C7FFD8
- stack 0: 0xE0
3669	 1BA	SHR		 	 
- stack 1: 0x620
- stack 0: 0x1B50224
3670	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x1B50224
- stack 0: 0xFFFF
3671	 1BE	AND		 	 
- stack 1: 0x620
- stack 0: 0x224
3672	 1BF	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x224
- stack 0: 0x1
3673	 1C1	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x224
3674	 1C2	PUSH2	0040	 	 
- stack 2: 0x620
- stack 1: 0x224
- stack 0: 0x40
3675	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x620
- stack 1: 0x224
- stack 0: 0x61C
3676	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x620
- stack 0: 0x840
3677	 1C7	PUSH2	0040	 	 
- stack 2: 0x620
- stack 1: 0x840
- stack 0: 0x40
3678	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x620
3679	 1CB	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3680	 1CD	ADD		 	 
- stack 0: 0x624
3681	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3682	 1CF	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x34F000303780003012CFFBC016001D402B8000103AD000203C7FFD801460010
3683	 1D0	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x34F000303780003012CFFBC016001D402B8000103AD000203C7FFD801460010
- stack 0: 0xF0
3684	 1D2	SHR		 	 
- stack 1: 0x624
- stack 0: 0x34F
3685	 1D3	JUMP		 	 
- stack 0: 0x624
3686	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x624
3687	 350	PUSH2	0020	 	 
- stack 1: 0x624
- stack 0: 0x20
3688	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x624
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
3689	 354	PUSH2	0040	 	 
- stack 2: 0x624
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x40
3690	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x624
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x840
3691	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x624
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 1: 0x840
- stack 0: 0x624
3692	 359	MLOAD		 	 
- stack 3: 0x624
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 1: 0x840
- stack 0: 0x34F000303780003012CFFBC016001D402B8000103AD000203C7FFD801460010
3693	 35A	PUSH1	E0	 	 
- stack 4: 0x624
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 2: 0x840
- stack 1: 0x34F000303780003012CFFBC016001D402B8000103AD000203C7FFD801460010
- stack 0: 0xE0
3694	 35C	SHR		 	 
- stack 3: 0x624
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 1: 0x840
- stack 0: 0x34F0003
3695	 35D	PUSH2	FFFF	 	 
- stack 4: 0x624
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 2: 0x840
- stack 1: 0x34F0003
- stack 0: 0xFFFF
3696	 360	AND		 	 
- stack 3: 0x624
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 1: 0x840
- stack 0: 0x3
3697	 361	PUSH1	01	 	 
- stack 4: 0x624
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 2: 0x840
- stack 1: 0x3
- stack 0: 0x1
3698	 363	SIGNEXTEND		 	 
- stack 3: 0x624
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 1: 0x840
- stack 0: 0x3
3699	 364	ADD		 	 
- stack 2: 0x624
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x843
3700	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x624
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 1: 0x843
- stack 0: 0xFFFFFFFF
3701	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x624
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x843
3702	 36B	PUSH1	03	 	 
- stack 3: 0x624
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 1: 0x843
- stack 0: 0x3
3703	 36D	XOR		 	 
- stack 2: 0x624
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x840
3704	 36E	MSTORE8		 	 
- stack 0: 0x624
3705	 36F	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3706	 371	ADD		 	 
- stack 0: 0x628
3707	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3708	 373	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x3780003012CFFBC016001D402B8000103AD000203C7FFD801460010030C0000
3709	 374	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x3780003012CFFBC016001D402B8000103AD000203C7FFD801460010030C0000
- stack 0: 0xF0
3710	 376	SHR		 	 
- stack 1: 0x628
- stack 0: 0x378
3711	 377	JUMP		 	 
- stack 0: 0x628
3712	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x628
3713	 379	PUSH2	0040	 	 
- stack 1: 0x628
- stack 0: 0x40
3714	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x628
- stack 0: 0x840
3715	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x628
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
3716	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x628
- stack 0: 0x840
3717	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x628
- stack 1: 0x840
- stack 0: 0x628
3718	 384	MLOAD		 	 
- stack 2: 0x628
- stack 1: 0x840
- stack 0: 0x3780003012CFFBC016001D402B8000103AD000203C7FFD801460010030C0000
3719	 385	PUSH1	E0	 	 
- stack 3: 0x628
- stack 2: 0x840
- stack 1: 0x3780003012CFFBC016001D402B8000103AD000203C7FFD801460010030C0000
- stack 0: 0xE0
3720	 387	SHR		 	 
- stack 2: 0x628
- stack 1: 0x840
- stack 0: 0x3780003
3721	 388	PUSH2	FFFF	 	 
- stack 3: 0x628
- stack 2: 0x840
- stack 1: 0x3780003
- stack 0: 0xFFFF
3722	 38B	AND		 	 
- stack 2: 0x628
- stack 1: 0x840
- stack 0: 0x3
3723	 38C	PUSH1	01	 	 
- stack 3: 0x628
- stack 2: 0x840
- stack 1: 0x3
- stack 0: 0x1
3724	 38E	SIGNEXTEND		 	 
- stack 2: 0x628
- stack 1: 0x840
- stack 0: 0x3
3725	 38F	ADD		 	 
- stack 1: 0x628
- stack 0: 0x843
3726	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x628
- stack 1: 0x843
- stack 0: 0xFFFFFFFF
3727	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x628
- stack 0: 0x843
3728	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x628
- stack 1: 0x843
- stack 0: 0x3
3729	 398	XOR		 	 
- stack 1: 0x628
- stack 0: 0x840
3730	 399	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xBCCCCDDD0AA000AA000098780000000000000000000000000000000000000000
3731	 39A	PUSH1	F8	 	 
- stack 2: 0x628
- stack 1: 0xBCCCCDDD0AA000AA000098780000000000000000000000000000000000000000
- stack 0: 0xF8
3732	 39C	SHR		 	 
- stack 1: 0x628
- stack 0: 0xBC
3733	 39D	PUSH1	00	 	 
- stack 2: 0x628
- stack 1: 0xBC
- stack 0: 0x0
3734	 39F	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
3735	 3A0	PUSH2	0060	 	 
- stack 2: 0x628
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x60
3736	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x628
3737	 3A4	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3738	 3A6	ADD		 	 
- stack 0: 0x62C
3739	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3740	 3A8	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x12CFFBC016001D402B8000103AD000203C7FFD801460010030C00000326FFBB
3741	 3A9	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x12CFFBC016001D402B8000103AD000203C7FFD801460010030C00000326FFBB
- stack 0: 0xF0
3742	 3AB	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x12C
3743	 3AC	JUMP		 	 
- stack 0: 0x62C
3744	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x62C
3745	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3746	 12E	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x12CFFBC016001D402B8000103AD000203C7FFD801460010030C00000326FFBB
3747	 12F	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x12CFFBC016001D402B8000103AD000203C7FFD801460010030C00000326FFBB
- stack 0: 0xE0
3748	 131	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x12CFFBC
3749	 132	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x12CFFBC
- stack 0: 0xFFFF
3750	 135	AND		 	 
- stack 1: 0x62C
- stack 0: 0xFFBC
3751	 136	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0xFFBC
- stack 0: 0x1
3752	 138	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
3753	 139	PUSH2	03A0	 	 
- stack 2: 0x62C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0x3A0
3754	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x62C
3755	 13D	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3756	 13F	ADD		 	 
- stack 0: 0x630
3757	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3758	 141	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x16001D402B8000103AD000203C7FFD801460010030C00000326FFBB04090000
3759	 142	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x16001D402B8000103AD000203C7FFD801460010030C00000326FFBB04090000
- stack 0: 0xF0
3760	 144	SHR		 	 
- stack 1: 0x630
- stack 0: 0x160
3761	 145	JUMP		 	 
- stack 0: 0x630
3762	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x630
3763	 161	PUSH2	0060	 	 
- stack 1: 0x630
- stack 0: 0x60
3764	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x630
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
3765	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0xFFFFFFFF
3766	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x630
- stack 0: 0xFFFFFFBC
3767	 16B	PUSH2	03A0	 	 
- stack 2: 0x630
- stack 1: 0xFFFFFFBC
- stack 0: 0x3A0
3768	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x630
- stack 1: 0xFFFFFFBC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
3769	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x630
- stack 2: 0xFFFFFFBC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC
- stack 0: 0xFFFFFFFF
3770	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x630
- stack 1: 0xFFFFFFBC
- stack 0: 0xFFFFFFBC
3771	 175	SUB		 	 
- stack 1: 0x630
- stack 0: 0x0
3772	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x17E
3773	 179	JUMPI		 	 
- stack 0: 0x630
3774	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x630
- stack 0: 0x198
3775	 17D	JUMP		 	 
- stack 0: 0x630
3776	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x630
3777	 199	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3778	 19B	ADD		 	 
- stack 0: 0x634
3779	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3780	 19D	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x2B8000103AD000203C7FFD801460010030C00000326FFBB0409000003400000
3781	 19E	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x2B8000103AD000203C7FFD801460010030C00000326FFBB0409000003400000
- stack 0: 0xF0
3782	 1A0	SHR		 	 
- stack 1: 0x634
- stack 0: 0x2B8
3783	 1A1	JUMP		 	 
- stack 0: 0x634
3784	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x634
3785	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3786	 2BA	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x2B8000103AD000203C7FFD801460010030C00000326FFBB0409000003400000
3787	 2BB	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x2B8000103AD000203C7FFD801460010030C00000326FFBB0409000003400000
- stack 0: 0xE0
3788	 2BD	SHR		 	 
- stack 1: 0x634
- stack 0: 0x2B80001
3789	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x2B80001
- stack 0: 0xFFFF
3790	 2C1	AND		 	 
- stack 1: 0x634
- stack 0: 0x1
3791	 2C2	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x1
3792	 2C4	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x1
3793	 2C5	PUSH2	0080	 	 
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x80
3794	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x634
- stack 1: 0x1
- stack 0: 0x1
3795	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x634
- stack 0: 0x2
3796	 2CA	PUSH2	0080	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x80
3797	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x634
3798	 2CE	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3799	 2D0	ADD		 	 
- stack 0: 0x638
3800	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3801	 2D2	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3AD000203C7FFD801460010030C00000326FFBB040900000340000001B501F0
3802	 2D3	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x3AD000203C7FFD801460010030C00000326FFBB040900000340000001B501F0
- stack 0: 0xF0
3803	 2D5	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3AD
3804	 2D6	JUMP		 	 
- stack 0: 0x638
3805	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x638
3806	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3807	 3AF	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3AD000203C7FFD801460010030C00000326FFBB040900000340000001B501F0
3808	 3B0	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x3AD000203C7FFD801460010030C00000326FFBB040900000340000001B501F0
- stack 0: 0xE0
3809	 3B2	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3AD0002
3810	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
3811	 3B6	AND		 	 
- stack 1: 0x638
- stack 0: 0x2
3812	 3B7	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0x1
3813	 3B9	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x2
3814	 3BA	PUSH2	00A0	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0xA0
3815	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x638
3816	 3BE	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3817	 3C0	ADD		 	 
- stack 0: 0x63C
3818	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3819	 3C2	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x3C7FFD801460010030C00000326FFBB040900000340000001B501F004090000
3820	 3C3	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x3C7FFD801460010030C00000326FFBB040900000340000001B501F004090000
- stack 0: 0xF0
3821	 3C5	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x3C7
3822	 3C6	JUMP		 	 
- stack 0: 0x63C
3823	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x63C
3824	 3C8	PUSH2	0080	 	 
- stack 1: 0x63C
- stack 0: 0x80
3825	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x63C
- stack 0: 0x2
3826	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x63C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3827	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x63C
- stack 0: 0x2
3828	 3D2	PUSH2	00A0	 	 
- stack 2: 0x63C
- stack 1: 0x2
- stack 0: 0xA0
3829	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x63C
- stack 1: 0x2
- stack 0: 0x2
3830	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x63C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3831	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x63C
- stack 1: 0x2
- stack 0: 0x2
3832	 3DC	SUB		 	 
- stack 1: 0x63C
- stack 0: 0x0
3833	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x3E5
3834	 3E0	JUMPI		 	 
- stack 0: 0x63C
3835	 3E1	PUSH2	03FF	 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 1: 0x63C
- stack 0: 0x3FF
3836	 3E4	JUMP		 	 
- stack 0: 0x63C
3837	 3FF	JUMPDEST		 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x63C
3838	 400	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3839	 402	ADD		 	 
- stack 0: 0x640
3840	 403	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3841	 404	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x1460010030C00000326FFBB040900000340000001B501F004090000034F0004
3842	 405	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x1460010030C00000326FFBB040900000340000001B501F004090000034F0004
- stack 0: 0xF0
3843	 407	SHR		 	 
- stack 1: 0x640
- stack 0: 0x146
3844	 408	JUMP		 	 
- stack 0: 0x640
3845	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x640
3846	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3847	 148	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x1460010030C00000326FFBB040900000340000001B501F004090000034F0004
3848	 149	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x1460010030C00000326FFBB040900000340000001B501F004090000034F0004
- stack 0: 0xE0
3849	 14B	SHR		 	 
- stack 1: 0x640
- stack 0: 0x1460010
3850	 14C	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x1460010
- stack 0: 0xFFFF
3851	 14F	AND		 	 
- stack 1: 0x640
- stack 0: 0x10
3852	 150	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x10
- stack 0: 0x1
3853	 152	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x10
3854	 153	PUSH2	0380	 	 
- stack 2: 0x640
- stack 1: 0x10
- stack 0: 0x380
3855	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x640
3856	 157	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3857	 159	ADD		 	 
- stack 0: 0x644
3858	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3859	 15B	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x30C00000326FFBB040900000340000001B501F004090000034F000403780004
3860	 15C	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x30C00000326FFBB040900000340000001B501F004090000034F000403780004
- stack 0: 0xF0
3861	 15E	SHR		 	 
- stack 1: 0x644
- stack 0: 0x30C
3862	 15F	JUMP		 	 
- stack 0: 0x644
3863	 30C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x644
3864	 30D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3865	 30E	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x30C00000326FFBB040900000340000001B501F004090000034F000403780004
3866	 30F	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x30C00000326FFBB040900000340000001B501F004090000034F000403780004
- stack 0: 0xE0
3867	 311	SHR		 	 
- stack 1: 0x644
- stack 0: 0x30C0000
3868	 312	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x30C0000
- stack 0: 0xFFFF
3869	 315	AND		 	 
- stack 1: 0x644
- stack 0: 0x0
3870	 316	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x1
3871	 318	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x0
3872	 319	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x80
3873	 31C	MSTORE		 	  ;; # store to x4
- stack 0: 0x644
3874	 31D	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3875	 31F	ADD		 	 
- stack 0: 0x648
3876	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3877	 321	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x326FFBB040900000340000001B501F004090000034F000403780004012CFFBB
3878	 322	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x326FFBB040900000340000001B501F004090000034F000403780004012CFFBB
- stack 0: 0xF0
3879	 324	SHR		 	 
- stack 1: 0x648
- stack 0: 0x326
3880	 325	JUMP		 	 
- stack 0: 0x648
3881	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x648
3882	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3883	 328	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x326FFBB040900000340000001B501F004090000034F000403780004012CFFBB
3884	 329	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x326FFBB040900000340000001B501F004090000034F000403780004012CFFBB
- stack 0: 0xE0
3885	 32B	SHR		 	 
- stack 1: 0x648
- stack 0: 0x326FFBB
3886	 32C	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x326FFBB
- stack 0: 0xFFFF
3887	 32F	AND		 	 
- stack 1: 0x648
- stack 0: 0xFFBB
3888	 330	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0xFFBB
- stack 0: 0x1
3889	 332	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
3890	 333	PUSH2	0020	 	 
- stack 2: 0x648
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x20
3891	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x648
3892	 337	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3893	 339	ADD		 	 
- stack 0: 0x64C
3894	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3895	 33B	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x40900000340000001B501F004090000034F000403780004012CFFBB0160019C
3896	 33C	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x40900000340000001B501F004090000034F000403780004012CFFBB0160019C
- stack 0: 0xF0
3897	 33E	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x409
3898	 33F	JUMP		 	 
- stack 0: 0x64C
3899	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x64C
3900	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3901	 40B	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x40900000340000001B501F004090000034F000403780004012CFFBB0160019C
3902	 40C	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x40900000340000001B501F004090000034F000403780004012CFFBB0160019C
- stack 0: 0xE0
3903	 40E	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x4090000
3904	 40F	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x4090000
- stack 0: 0xFFFF
3905	 412	AND		 	 
- stack 1: 0x64C
- stack 0: 0x0
3906	 413	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x1
3907	 415	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x0
3908	 416	POP		 	 
- stack 0: 0x64C
3909	 417	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3910	 419	ADD		 	 
- stack 0: 0x650
3911	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3912	 41B	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x340000001B501F004090000034F000403780004012CFFBB0160019C02B80001
3913	 41C	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x340000001B501F004090000034F000403780004012CFFBB0160019C02B80001
- stack 0: 0xF0
3914	 41E	SHR		 	 
- stack 1: 0x650
- stack 0: 0x340
3915	 41F	JUMP		 	 
- stack 0: 0x650
3916	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x650
3917	 341	DUP1		 	 
- stack 1: 0x650
- stack 0: 0x650
3918	 342	PUSH2	0040	 	 
- stack 2: 0x650
- stack 1: 0x650
- stack 0: 0x40
3919	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x650
3920	 346	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3921	 348	ADD		 	 
- stack 0: 0x654
3922	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3923	 34A	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x1B501F004090000034F000403780004012CFFBB0160019C02B8000103AD0002
3924	 34B	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x1B501F004090000034F000403780004012CFFBB0160019C02B8000103AD0002
- stack 0: 0xF0
3925	 34D	SHR		 	 
- stack 1: 0x654
- stack 0: 0x1B5
3926	 34E	JUMP		 	 
- stack 0: 0x654
3927	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x654
3928	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3929	 1B7	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x1B501F004090000034F000403780004012CFFBB0160019C02B8000103AD0002
3930	 1B8	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x1B501F004090000034F000403780004012CFFBB0160019C02B8000103AD0002
- stack 0: 0xE0
3931	 1BA	SHR		 	 
- stack 1: 0x654
- stack 0: 0x1B501F0
3932	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x1B501F0
- stack 0: 0xFFFF
3933	 1BE	AND		 	 
- stack 1: 0x654
- stack 0: 0x1F0
3934	 1BF	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x1F0
- stack 0: 0x1
3935	 1C1	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x1F0
3936	 1C2	PUSH2	0040	 	 
- stack 2: 0x654
- stack 1: 0x1F0
- stack 0: 0x40
3937	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x654
- stack 1: 0x1F0
- stack 0: 0x650
3938	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x654
- stack 0: 0x840
3939	 1C7	PUSH2	0040	 	 
- stack 2: 0x654
- stack 1: 0x840
- stack 0: 0x40
3940	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x654
3941	 1CB	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3942	 1CD	ADD		 	 
- stack 0: 0x658
3943	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3944	 1CF	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x4090000034F000403780004012CFFBB0160019C02B8000103AD000203C7FFD4
3945	 1D0	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x4090000034F000403780004012CFFBB0160019C02B8000103AD000203C7FFD4
- stack 0: 0xF0
3946	 1D2	SHR		 	 
- stack 1: 0x658
- stack 0: 0x409
3947	 1D3	JUMP		 	 
- stack 0: 0x658
3948	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x658
3949	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3950	 40B	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x4090000034F000403780004012CFFBB0160019C02B8000103AD000203C7FFD4
3951	 40C	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x4090000034F000403780004012CFFBB0160019C02B8000103AD000203C7FFD4
- stack 0: 0xE0
3952	 40E	SHR		 	 
- stack 1: 0x658
- stack 0: 0x4090000
3953	 40F	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x4090000
- stack 0: 0xFFFF
3954	 412	AND		 	 
- stack 1: 0x658
- stack 0: 0x0
3955	 413	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x1
3956	 415	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x0
3957	 416	POP		 	 
- stack 0: 0x658
3958	 417	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3959	 419	ADD		 	 
- stack 0: 0x65C
3960	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3961	 41B	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x34F000403780004012CFFBB0160019C02B8000103AD000203C7FFD401460011
3962	 41C	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x34F000403780004012CFFBB0160019C02B8000103AD000203C7FFD401460011
- stack 0: 0xF0
3963	 41E	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x34F
3964	 41F	JUMP		 	 
- stack 0: 0x65C
3965	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x65C
3966	 350	PUSH2	0020	 	 
- stack 1: 0x65C
- stack 0: 0x20
3967	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x65C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
3968	 354	PUSH2	0040	 	 
- stack 2: 0x65C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x40
3969	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x65C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x840
3970	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x65C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 1: 0x840
- stack 0: 0x65C
3971	 359	MLOAD		 	 
- stack 3: 0x65C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 1: 0x840
- stack 0: 0x34F000403780004012CFFBB0160019C02B8000103AD000203C7FFD401460011
3972	 35A	PUSH1	E0	 	 
- stack 4: 0x65C
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 2: 0x840
- stack 1: 0x34F000403780004012CFFBB0160019C02B8000103AD000203C7FFD401460011
- stack 0: 0xE0
3973	 35C	SHR		 	 
- stack 3: 0x65C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 1: 0x840
- stack 0: 0x34F0004
3974	 35D	PUSH2	FFFF	 	 
- stack 4: 0x65C
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 2: 0x840
- stack 1: 0x34F0004
- stack 0: 0xFFFF
3975	 360	AND		 	 
- stack 3: 0x65C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 1: 0x840
- stack 0: 0x4
3976	 361	PUSH1	01	 	 
- stack 4: 0x65C
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 2: 0x840
- stack 1: 0x4
- stack 0: 0x1
3977	 363	SIGNEXTEND		 	 
- stack 3: 0x65C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 1: 0x840
- stack 0: 0x4
3978	 364	ADD		 	 
- stack 2: 0x65C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x844
3979	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x65C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 1: 0x844
- stack 0: 0xFFFFFFFF
3980	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x65C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x844
3981	 36B	PUSH1	03	 	 
- stack 3: 0x65C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 1: 0x844
- stack 0: 0x3
3982	 36D	XOR		 	 
- stack 2: 0x65C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x847
3983	 36E	MSTORE8		 	 
- stack 0: 0x65C
3984	 36F	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3985	 371	ADD		 	 
- stack 0: 0x660
3986	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3987	 373	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x3780004012CFFBB0160019C02B8000103AD000203C7FFD401460011030C0000
3988	 374	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x3780004012CFFBB0160019C02B8000103AD000203C7FFD401460011030C0000
- stack 0: 0xF0
3989	 376	SHR		 	 
- stack 1: 0x660
- stack 0: 0x378
3990	 377	JUMP		 	 
- stack 0: 0x660
3991	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x660
3992	 379	PUSH2	0040	 	 
- stack 1: 0x660
- stack 0: 0x40
3993	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x660
- stack 0: 0x840
3994	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x660
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
3995	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x660
- stack 0: 0x840
3996	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x660
- stack 1: 0x840
- stack 0: 0x660
3997	 384	MLOAD		 	 
- stack 2: 0x660
- stack 1: 0x840
- stack 0: 0x3780004012CFFBB0160019C02B8000103AD000203C7FFD401460011030C0000
3998	 385	PUSH1	E0	 	 
- stack 3: 0x660
- stack 2: 0x840
- stack 1: 0x3780004012CFFBB0160019C02B8000103AD000203C7FFD401460011030C0000
- stack 0: 0xE0
3999	 387	SHR		 	 
- stack 2: 0x660
- stack 1: 0x840
- stack 0: 0x3780004
4000	 388	PUSH2	FFFF	 	 
- stack 3: 0x660
- stack 2: 0x840
- stack 1: 0x3780004
- stack 0: 0xFFFF
4001	 38B	AND		 	 
- stack 2: 0x660
- stack 1: 0x840
- stack 0: 0x4
4002	 38C	PUSH1	01	 	 
- stack 3: 0x660
- stack 2: 0x840
- stack 1: 0x4
- stack 0: 0x1
4003	 38E	SIGNEXTEND		 	 
- stack 2: 0x660
- stack 1: 0x840
- stack 0: 0x4
4004	 38F	ADD		 	 
- stack 1: 0x660
- stack 0: 0x844
4005	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x660
- stack 1: 0x844
- stack 0: 0xFFFFFFFF
4006	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x660
- stack 0: 0x844
4007	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x660
- stack 1: 0x844
- stack 0: 0x3
4008	 398	XOR		 	 
- stack 1: 0x660
- stack 0: 0x847
4009	 399	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0xBB00009878000000000000000000000000000000000000000000000000000000
4010	 39A	PUSH1	F8	 	 
- stack 2: 0x660
- stack 1: 0xBB00009878000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
4011	 39C	SHR		 	 
- stack 1: 0x660
- stack 0: 0xBB
4012	 39D	PUSH1	00	 	 
- stack 2: 0x660
- stack 1: 0xBB
- stack 0: 0x0
4013	 39F	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
4014	 3A0	PUSH2	0060	 	 
- stack 2: 0x660
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x60
4015	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x660
4016	 3A4	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
4017	 3A6	ADD		 	 
- stack 0: 0x664
4018	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
4019	 3A8	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x12CFFBB0160019C02B8000103AD000203C7FFD401460011030C00000326FFAB
4020	 3A9	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x12CFFBB0160019C02B8000103AD000203C7FFD401460011030C00000326FFAB
- stack 0: 0xF0
4021	 3AB	SHR		 	 
- stack 1: 0x664
- stack 0: 0x12C
4022	 3AC	JUMP		 	 
- stack 0: 0x664
4023	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x664
4024	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
4025	 12E	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x12CFFBB0160019C02B8000103AD000203C7FFD401460011030C00000326FFAB
4026	 12F	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x12CFFBB0160019C02B8000103AD000203C7FFD401460011030C00000326FFAB
- stack 0: 0xE0
4027	 131	SHR		 	 
- stack 1: 0x664
- stack 0: 0x12CFFBB
4028	 132	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x12CFFBB
- stack 0: 0xFFFF
4029	 135	AND		 	 
- stack 1: 0x664
- stack 0: 0xFFBB
4030	 136	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0xFFBB
- stack 0: 0x1
4031	 138	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
4032	 139	PUSH2	03A0	 	 
- stack 2: 0x664
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x3A0
4033	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x664
4034	 13D	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
4035	 13F	ADD		 	 
- stack 0: 0x668
4036	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
4037	 141	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x160019C02B8000103AD000203C7FFD401460011030C00000326FFAB04090000
4038	 142	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x160019C02B8000103AD000203C7FFD401460011030C00000326FFAB04090000
- stack 0: 0xF0
4039	 144	SHR		 	 
- stack 1: 0x668
- stack 0: 0x160
4040	 145	JUMP		 	 
- stack 0: 0x668
4041	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x668
4042	 161	PUSH2	0060	 	 
- stack 1: 0x668
- stack 0: 0x60
4043	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x668
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
4044	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0xFFFFFFFF
4045	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x668
- stack 0: 0xFFFFFFBB
4046	 16B	PUSH2	03A0	 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFBB
- stack 0: 0x3A0
4047	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x668
- stack 1: 0xFFFFFFBB
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
4048	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x668
- stack 2: 0xFFFFFFBB
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0xFFFFFFFF
4049	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x668
- stack 1: 0xFFFFFFBB
- stack 0: 0xFFFFFFBB
4050	 175	SUB		 	 
- stack 1: 0x668
- stack 0: 0x0
4051	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x17E
4052	 179	JUMPI		 	 
- stack 0: 0x668
4053	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x668
- stack 0: 0x198
4054	 17D	JUMP		 	 
- stack 0: 0x668
4055	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x668
4056	 199	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
4057	 19B	ADD		 	 
- stack 0: 0x66C
4058	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4059	 19D	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x2B8000103AD000203C7FFD401460011030C00000326FFAB0409000004090000
4060	 19E	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x2B8000103AD000203C7FFD401460011030C00000326FFAB0409000004090000
- stack 0: 0xF0
4061	 1A0	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x2B8
4062	 1A1	JUMP		 	 
- stack 0: 0x66C
4063	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x66C
4064	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
4065	 2BA	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x2B8000103AD000203C7FFD401460011030C00000326FFAB0409000004090000
4066	 2BB	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x2B8000103AD000203C7FFD401460011030C00000326FFAB0409000004090000
- stack 0: 0xE0
4067	 2BD	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x2B80001
4068	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x2B80001
- stack 0: 0xFFFF
4069	 2C1	AND		 	 
- stack 1: 0x66C
- stack 0: 0x1
4070	 2C2	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x1
4071	 2C4	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x1
4072	 2C5	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x80
4073	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x0
4074	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x66C
- stack 0: 0x1
4075	 2CA	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x80
4076	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x66C
4077	 2CE	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4078	 2D0	ADD		 	 
- stack 0: 0x670
4079	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4080	 2D2	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x3AD000203C7FFD401460011030C00000326FFAB040900000409000003400000
4081	 2D3	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x3AD000203C7FFD401460011030C00000326FFAB040900000409000003400000
- stack 0: 0xF0
4082	 2D5	SHR		 	 
- stack 1: 0x670
- stack 0: 0x3AD
4083	 2D6	JUMP		 	 
- stack 0: 0x670
4084	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x670
4085	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4086	 3AF	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x3AD000203C7FFD401460011030C00000326FFAB040900000409000003400000
4087	 3B0	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x3AD000203C7FFD401460011030C00000326FFAB040900000409000003400000
- stack 0: 0xE0
4088	 3B2	SHR		 	 
- stack 1: 0x670
- stack 0: 0x3AD0002
4089	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
4090	 3B6	AND		 	 
- stack 1: 0x670
- stack 0: 0x2
4091	 3B7	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0x1
4092	 3B9	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x2
4093	 3BA	PUSH2	00A0	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0xA0
4094	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x670
4095	 3BE	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4096	 3C0	ADD		 	 
- stack 0: 0x674
4097	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4098	 3C2	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x3C7FFD401460011030C00000326FFAB04090000040900000340000001B501B4
4099	 3C3	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x3C7FFD401460011030C00000326FFAB04090000040900000340000001B501B4
- stack 0: 0xF0
4100	 3C5	SHR		 	 
- stack 1: 0x674
- stack 0: 0x3C7
4101	 3C6	JUMP		 	 
- stack 0: 0x674
4102	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x674
4103	 3C8	PUSH2	0080	 	 
- stack 1: 0x674
- stack 0: 0x80
4104	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x674
- stack 0: 0x1
4105	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4106	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x1
4107	 3D2	PUSH2	00A0	 	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0xA0
4108	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x2
4109	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x674
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4110	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x2
4111	 3DC	SUB		 	 
- stack 1: 0x674
- stack 0: 0x1
4112	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x3E5
4113	 3E0	JUMPI		 	 
- stack 0: 0x674
4114	 3E5	JUMPDEST		 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x674
4115	 3E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
4116	 3E7	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x3C7FFD401460011030C00000326FFAB04090000040900000340000001B501B4
4117	 3E8	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x3C7FFD401460011030C00000326FFAB04090000040900000340000001B501B4
- stack 0: 0xE0
4118	 3EA	SHR		 	 
- stack 1: 0x674
- stack 0: 0x3C7FFD4
4119	 3EB	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x3C7FFD4
- stack 0: 0xFFFF
4120	 3EE	AND		 	 
- stack 1: 0x674
- stack 0: 0xFFD4
4121	 3EF	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0xFFD4
- stack 0: 0x1
4122	 3F1	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4
4123	 3F2	ADD		 	 
- stack 0: 0x648
4124	 3F3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x648
- stack 0: 0xFFFFFFFF
4125	 3F8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x648
4126	 3F9	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
4127	 3FA	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x326FFBB040900000340000001B501F004090000034F000403780004012CFFBB
4128	 3FB	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x326FFBB040900000340000001B501F004090000034F000403780004012CFFBB
- stack 0: 0xF0
4129	 3FD	SHR		 	 
- stack 1: 0x648
- stack 0: 0x326
4130	 3FE	JUMP		 	 
- stack 0: 0x648
4131	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x648
4132	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
4133	 328	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x326FFBB040900000340000001B501F004090000034F000403780004012CFFBB
4134	 329	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x326FFBB040900000340000001B501F004090000034F000403780004012CFFBB
- stack 0: 0xE0
4135	 32B	SHR		 	 
- stack 1: 0x648
- stack 0: 0x326FFBB
4136	 32C	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x326FFBB
- stack 0: 0xFFFF
4137	 32F	AND		 	 
- stack 1: 0x648
- stack 0: 0xFFBB
4138	 330	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0xFFBB
- stack 0: 0x1
4139	 332	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
4140	 333	PUSH2	0020	 	 
- stack 2: 0x648
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x20
4141	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x648
4142	 337	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
4143	 339	ADD		 	 
- stack 0: 0x64C
4144	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
4145	 33B	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x40900000340000001B501F004090000034F000403780004012CFFBB0160019C
4146	 33C	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x40900000340000001B501F004090000034F000403780004012CFFBB0160019C
- stack 0: 0xF0
4147	 33E	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x409
4148	 33F	JUMP		 	 
- stack 0: 0x64C
4149	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x64C
4150	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
4151	 40B	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x40900000340000001B501F004090000034F000403780004012CFFBB0160019C
4152	 40C	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x40900000340000001B501F004090000034F000403780004012CFFBB0160019C
- stack 0: 0xE0
4153	 40E	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x4090000
4154	 40F	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x4090000
- stack 0: 0xFFFF
4155	 412	AND		 	 
- stack 1: 0x64C
- stack 0: 0x0
4156	 413	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x1
4157	 415	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x0
4158	 416	POP		 	 
- stack 0: 0x64C
4159	 417	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
4160	 419	ADD		 	 
- stack 0: 0x650
4161	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
4162	 41B	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x340000001B501F004090000034F000403780004012CFFBB0160019C02B80001
4163	 41C	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x340000001B501F004090000034F000403780004012CFFBB0160019C02B80001
- stack 0: 0xF0
4164	 41E	SHR		 	 
- stack 1: 0x650
- stack 0: 0x340
4165	 41F	JUMP		 	 
- stack 0: 0x650
4166	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x650
4167	 341	DUP1		 	 
- stack 1: 0x650
- stack 0: 0x650
4168	 342	PUSH2	0040	 	 
- stack 2: 0x650
- stack 1: 0x650
- stack 0: 0x40
4169	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x650
4170	 346	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
4171	 348	ADD		 	 
- stack 0: 0x654
4172	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
4173	 34A	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x1B501F004090000034F000403780004012CFFBB0160019C02B8000103AD0002
4174	 34B	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x1B501F004090000034F000403780004012CFFBB0160019C02B8000103AD0002
- stack 0: 0xF0
4175	 34D	SHR		 	 
- stack 1: 0x654
- stack 0: 0x1B5
4176	 34E	JUMP		 	 
- stack 0: 0x654
4177	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x654
4178	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
4179	 1B7	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x1B501F004090000034F000403780004012CFFBB0160019C02B8000103AD0002
4180	 1B8	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x1B501F004090000034F000403780004012CFFBB0160019C02B8000103AD0002
- stack 0: 0xE0
4181	 1BA	SHR		 	 
- stack 1: 0x654
- stack 0: 0x1B501F0
4182	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x1B501F0
- stack 0: 0xFFFF
4183	 1BE	AND		 	 
- stack 1: 0x654
- stack 0: 0x1F0
4184	 1BF	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x1F0
- stack 0: 0x1
4185	 1C1	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x1F0
4186	 1C2	PUSH2	0040	 	 
- stack 2: 0x654
- stack 1: 0x1F0
- stack 0: 0x40
4187	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x654
- stack 1: 0x1F0
- stack 0: 0x650
4188	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x654
- stack 0: 0x840
4189	 1C7	PUSH2	0040	 	 
- stack 2: 0x654
- stack 1: 0x840
- stack 0: 0x40
4190	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x654
4191	 1CB	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
4192	 1CD	ADD		 	 
- stack 0: 0x658
4193	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
4194	 1CF	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x4090000034F000403780004012CFFBB0160019C02B8000103AD000203C7FFD4
4195	 1D0	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x4090000034F000403780004012CFFBB0160019C02B8000103AD000203C7FFD4
- stack 0: 0xF0
4196	 1D2	SHR		 	 
- stack 1: 0x658
- stack 0: 0x409
4197	 1D3	JUMP		 	 
- stack 0: 0x658
4198	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x658
4199	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
4200	 40B	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x4090000034F000403780004012CFFBB0160019C02B8000103AD000203C7FFD4
4201	 40C	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x4090000034F000403780004012CFFBB0160019C02B8000103AD000203C7FFD4
- stack 0: 0xE0
4202	 40E	SHR		 	 
- stack 1: 0x658
- stack 0: 0x4090000
4203	 40F	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x4090000
- stack 0: 0xFFFF
4204	 412	AND		 	 
- stack 1: 0x658
- stack 0: 0x0
4205	 413	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x1
4206	 415	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x0
4207	 416	POP		 	 
- stack 0: 0x658
4208	 417	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
4209	 419	ADD		 	 
- stack 0: 0x65C
4210	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
4211	 41B	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x34F000403780004012CFFBB0160019C02B8000103AD000203C7FFD401460011
4212	 41C	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x34F000403780004012CFFBB0160019C02B8000103AD000203C7FFD401460011
- stack 0: 0xF0
4213	 41E	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x34F
4214	 41F	JUMP		 	 
- stack 0: 0x65C
4215	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x65C
4216	 350	PUSH2	0020	 	 
- stack 1: 0x65C
- stack 0: 0x20
4217	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x65C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
4218	 354	PUSH2	0040	 	 
- stack 2: 0x65C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x40
4219	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x65C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x840
4220	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x65C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 1: 0x840
- stack 0: 0x65C
4221	 359	MLOAD		 	 
- stack 3: 0x65C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 1: 0x840
- stack 0: 0x34F000403780004012CFFBB0160019C02B8000103AD000203C7FFD401460011
4222	 35A	PUSH1	E0	 	 
- stack 4: 0x65C
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 2: 0x840
- stack 1: 0x34F000403780004012CFFBB0160019C02B8000103AD000203C7FFD401460011
- stack 0: 0xE0
4223	 35C	SHR		 	 
- stack 3: 0x65C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 1: 0x840
- stack 0: 0x34F0004
4224	 35D	PUSH2	FFFF	 	 
- stack 4: 0x65C
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 2: 0x840
- stack 1: 0x34F0004
- stack 0: 0xFFFF
4225	 360	AND		 	 
- stack 3: 0x65C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 1: 0x840
- stack 0: 0x4
4226	 361	PUSH1	01	 	 
- stack 4: 0x65C
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 2: 0x840
- stack 1: 0x4
- stack 0: 0x1
4227	 363	SIGNEXTEND		 	 
- stack 3: 0x65C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 1: 0x840
- stack 0: 0x4
4228	 364	ADD		 	 
- stack 2: 0x65C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x844
4229	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x65C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 1: 0x844
- stack 0: 0xFFFFFFFF
4230	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x65C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x844
4231	 36B	PUSH1	03	 	 
- stack 3: 0x65C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 1: 0x844
- stack 0: 0x3
4232	 36D	XOR		 	 
- stack 2: 0x65C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x847
4233	 36E	MSTORE8		 	 
- stack 0: 0x65C
4234	 36F	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
4235	 371	ADD		 	 
- stack 0: 0x660
4236	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
4237	 373	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x3780004012CFFBB0160019C02B8000103AD000203C7FFD401460011030C0000
4238	 374	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x3780004012CFFBB0160019C02B8000103AD000203C7FFD401460011030C0000
- stack 0: 0xF0
4239	 376	SHR		 	 
- stack 1: 0x660
- stack 0: 0x378
4240	 377	JUMP		 	 
- stack 0: 0x660
4241	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x660
4242	 379	PUSH2	0040	 	 
- stack 1: 0x660
- stack 0: 0x40
4243	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x660
- stack 0: 0x840
4244	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x660
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
4245	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x660
- stack 0: 0x840
4246	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x660
- stack 1: 0x840
- stack 0: 0x660
4247	 384	MLOAD		 	 
- stack 2: 0x660
- stack 1: 0x840
- stack 0: 0x3780004012CFFBB0160019C02B8000103AD000203C7FFD401460011030C0000
4248	 385	PUSH1	E0	 	 
- stack 3: 0x660
- stack 2: 0x840
- stack 1: 0x3780004012CFFBB0160019C02B8000103AD000203C7FFD401460011030C0000
- stack 0: 0xE0
4249	 387	SHR		 	 
- stack 2: 0x660
- stack 1: 0x840
- stack 0: 0x3780004
4250	 388	PUSH2	FFFF	 	 
- stack 3: 0x660
- stack 2: 0x840
- stack 1: 0x3780004
- stack 0: 0xFFFF
4251	 38B	AND		 	 
- stack 2: 0x660
- stack 1: 0x840
- stack 0: 0x4
4252	 38C	PUSH1	01	 	 
- stack 3: 0x660
- stack 2: 0x840
- stack 1: 0x4
- stack 0: 0x1
4253	 38E	SIGNEXTEND		 	 
- stack 2: 0x660
- stack 1: 0x840
- stack 0: 0x4
4254	 38F	ADD		 	 
- stack 1: 0x660
- stack 0: 0x844
4255	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x660
- stack 1: 0x844
- stack 0: 0xFFFFFFFF
4256	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x660
- stack 0: 0x844
4257	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x660
- stack 1: 0x844
- stack 0: 0x3
4258	 398	XOR		 	 
- stack 1: 0x660
- stack 0: 0x847
4259	 399	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0xBB00009878000000000000000000000000000000000000000000000000000000
4260	 39A	PUSH1	F8	 	 
- stack 2: 0x660
- stack 1: 0xBB00009878000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
4261	 39C	SHR		 	 
- stack 1: 0x660
- stack 0: 0xBB
4262	 39D	PUSH1	00	 	 
- stack 2: 0x660
- stack 1: 0xBB
- stack 0: 0x0
4263	 39F	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
4264	 3A0	PUSH2	0060	 	 
- stack 2: 0x660
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x60
4265	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x660
4266	 3A4	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
4267	 3A6	ADD		 	 
- stack 0: 0x664
4268	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
4269	 3A8	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x12CFFBB0160019C02B8000103AD000203C7FFD401460011030C00000326FFAB
4270	 3A9	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x12CFFBB0160019C02B8000103AD000203C7FFD401460011030C00000326FFAB
- stack 0: 0xF0
4271	 3AB	SHR		 	 
- stack 1: 0x664
- stack 0: 0x12C
4272	 3AC	JUMP		 	 
- stack 0: 0x664
4273	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x664
4274	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
4275	 12E	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x12CFFBB0160019C02B8000103AD000203C7FFD401460011030C00000326FFAB
4276	 12F	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x12CFFBB0160019C02B8000103AD000203C7FFD401460011030C00000326FFAB
- stack 0: 0xE0
4277	 131	SHR		 	 
- stack 1: 0x664
- stack 0: 0x12CFFBB
4278	 132	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x12CFFBB
- stack 0: 0xFFFF
4279	 135	AND		 	 
- stack 1: 0x664
- stack 0: 0xFFBB
4280	 136	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0xFFBB
- stack 0: 0x1
4281	 138	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
4282	 139	PUSH2	03A0	 	 
- stack 2: 0x664
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0x3A0
4283	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x664
4284	 13D	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
4285	 13F	ADD		 	 
- stack 0: 0x668
4286	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
4287	 141	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x160019C02B8000103AD000203C7FFD401460011030C00000326FFAB04090000
4288	 142	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x160019C02B8000103AD000203C7FFD401460011030C00000326FFAB04090000
- stack 0: 0xF0
4289	 144	SHR		 	 
- stack 1: 0x668
- stack 0: 0x160
4290	 145	JUMP		 	 
- stack 0: 0x668
4291	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x668
4292	 161	PUSH2	0060	 	 
- stack 1: 0x668
- stack 0: 0x60
4293	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x668
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
4294	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0xFFFFFFFF
4295	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x668
- stack 0: 0xFFFFFFBB
4296	 16B	PUSH2	03A0	 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFBB
- stack 0: 0x3A0
4297	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x668
- stack 1: 0xFFFFFFBB
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
4298	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x668
- stack 2: 0xFFFFFFBB
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB
- stack 0: 0xFFFFFFFF
4299	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x668
- stack 1: 0xFFFFFFBB
- stack 0: 0xFFFFFFBB
4300	 175	SUB		 	 
- stack 1: 0x668
- stack 0: 0x0
4301	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x17E
4302	 179	JUMPI		 	 
- stack 0: 0x668
4303	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x668
- stack 0: 0x198
4304	 17D	JUMP		 	 
- stack 0: 0x668
4305	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x668
4306	 199	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
4307	 19B	ADD		 	 
- stack 0: 0x66C
4308	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4309	 19D	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x2B8000103AD000203C7FFD401460011030C00000326FFAB0409000004090000
4310	 19E	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x2B8000103AD000203C7FFD401460011030C00000326FFAB0409000004090000
- stack 0: 0xF0
4311	 1A0	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x2B8
4312	 1A1	JUMP		 	 
- stack 0: 0x66C
4313	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x66C
4314	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
4315	 2BA	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x2B8000103AD000203C7FFD401460011030C00000326FFAB0409000004090000
4316	 2BB	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x2B8000103AD000203C7FFD401460011030C00000326FFAB0409000004090000
- stack 0: 0xE0
4317	 2BD	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x2B80001
4318	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x2B80001
- stack 0: 0xFFFF
4319	 2C1	AND		 	 
- stack 1: 0x66C
- stack 0: 0x1
4320	 2C2	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x1
4321	 2C4	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x1
4322	 2C5	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x80
4323	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x1
4324	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x66C
- stack 0: 0x2
4325	 2CA	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x2
- stack 0: 0x80
4326	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x66C
4327	 2CE	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4328	 2D0	ADD		 	 
- stack 0: 0x670
4329	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4330	 2D2	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x3AD000203C7FFD401460011030C00000326FFAB040900000409000003400000
4331	 2D3	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x3AD000203C7FFD401460011030C00000326FFAB040900000409000003400000
- stack 0: 0xF0
4332	 2D5	SHR		 	 
- stack 1: 0x670
- stack 0: 0x3AD
4333	 2D6	JUMP		 	 
- stack 0: 0x670
4334	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x670
4335	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4336	 3AF	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x3AD000203C7FFD401460011030C00000326FFAB040900000409000003400000
4337	 3B0	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x3AD000203C7FFD401460011030C00000326FFAB040900000409000003400000
- stack 0: 0xE0
4338	 3B2	SHR		 	 
- stack 1: 0x670
- stack 0: 0x3AD0002
4339	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
4340	 3B6	AND		 	 
- stack 1: 0x670
- stack 0: 0x2
4341	 3B7	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0x1
4342	 3B9	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x2
4343	 3BA	PUSH2	00A0	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0xA0
4344	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x670
4345	 3BE	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4346	 3C0	ADD		 	 
- stack 0: 0x674
4347	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4348	 3C2	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x3C7FFD401460011030C00000326FFAB04090000040900000340000001B501B4
4349	 3C3	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x3C7FFD401460011030C00000326FFAB04090000040900000340000001B501B4
- stack 0: 0xF0
4350	 3C5	SHR		 	 
- stack 1: 0x674
- stack 0: 0x3C7
4351	 3C6	JUMP		 	 
- stack 0: 0x674
4352	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x674
4353	 3C8	PUSH2	0080	 	 
- stack 1: 0x674
- stack 0: 0x80
4354	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x674
- stack 0: 0x2
4355	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4356	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x2
4357	 3D2	PUSH2	00A0	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0xA0
4358	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x2
4359	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x674
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4360	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x2
4361	 3DC	SUB		 	 
- stack 1: 0x674
- stack 0: 0x0
4362	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x3E5
4363	 3E0	JUMPI		 	 
- stack 0: 0x674
4364	 3E1	PUSH2	03FF	 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 1: 0x674
- stack 0: 0x3FF
4365	 3E4	JUMP		 	 
- stack 0: 0x674
4366	 3FF	JUMPDEST		 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x674
4367	 400	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4368	 402	ADD		 	 
- stack 0: 0x678
4369	 403	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4370	 404	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x1460011030C00000326FFAB04090000040900000340000001B501B4034F0005
4371	 405	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x1460011030C00000326FFAB04090000040900000340000001B501B4034F0005
- stack 0: 0xF0
4372	 407	SHR		 	 
- stack 1: 0x678
- stack 0: 0x146
4373	 408	JUMP		 	 
- stack 0: 0x678
4374	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x678
4375	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
4376	 148	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x1460011030C00000326FFAB04090000040900000340000001B501B4034F0005
4377	 149	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x1460011030C00000326FFAB04090000040900000340000001B501B4034F0005
- stack 0: 0xE0
4378	 14B	SHR		 	 
- stack 1: 0x678
- stack 0: 0x1460011
4379	 14C	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x1460011
- stack 0: 0xFFFF
4380	 14F	AND		 	 
- stack 1: 0x678
- stack 0: 0x11
4381	 150	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x11
- stack 0: 0x1
4382	 152	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x11
4383	 153	PUSH2	0380	 	 
- stack 2: 0x678
- stack 1: 0x11
- stack 0: 0x380
4384	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x678
4385	 157	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
4386	 159	ADD		 	 
- stack 0: 0x67C
4387	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
4388	 15B	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x30C00000326FFAB04090000040900000340000001B501B4034F000503780005
4389	 15C	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x30C00000326FFAB04090000040900000340000001B501B4034F000503780005
- stack 0: 0xF0
4390	 15E	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x30C
4391	 15F	JUMP		 	 
- stack 0: 0x67C
4392	 30C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x67C
4393	 30D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
4394	 30E	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x30C00000326FFAB04090000040900000340000001B501B4034F000503780005
4395	 30F	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x30C00000326FFAB04090000040900000340000001B501B4034F000503780005
- stack 0: 0xE0
4396	 311	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x30C0000
4397	 312	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x30C0000
- stack 0: 0xFFFF
4398	 315	AND		 	 
- stack 1: 0x67C
- stack 0: 0x0
4399	 316	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x1
4400	 318	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x0
4401	 319	PUSH2	0080	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x80
4402	 31C	MSTORE		 	  ;; # store to x4
- stack 0: 0x67C
4403	 31D	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4404	 31F	ADD		 	 
- stack 0: 0x680
4405	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4406	 321	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x326FFAB04090000040900000340000001B501B4034F000503780005012CFFAB
4407	 322	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x326FFAB04090000040900000340000001B501B4034F000503780005012CFFAB
- stack 0: 0xF0
4408	 324	SHR		 	 
- stack 1: 0x680
- stack 0: 0x326
4409	 325	JUMP		 	 
- stack 0: 0x680
4410	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x680
4411	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
4412	 328	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x326FFAB04090000040900000340000001B501B4034F000503780005012CFFAB
4413	 329	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x326FFAB04090000040900000340000001B501B4034F000503780005012CFFAB
- stack 0: 0xE0
4414	 32B	SHR		 	 
- stack 1: 0x680
- stack 0: 0x326FFAB
4415	 32C	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x326FFAB
- stack 0: 0xFFFF
4416	 32F	AND		 	 
- stack 1: 0x680
- stack 0: 0xFFAB
4417	 330	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0xFFAB
- stack 0: 0x1
4418	 332	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
4419	 333	PUSH2	0020	 	 
- stack 2: 0x680
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x20
4420	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x680
4421	 337	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4422	 339	ADD		 	 
- stack 0: 0x684
4423	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4424	 33B	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x4090000040900000340000001B501B4034F000503780005012CFFAB01600164
4425	 33C	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x4090000040900000340000001B501B4034F000503780005012CFFAB01600164
- stack 0: 0xF0
4426	 33E	SHR		 	 
- stack 1: 0x684
- stack 0: 0x409
4427	 33F	JUMP		 	 
- stack 0: 0x684
4428	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x684
4429	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
4430	 40B	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x4090000040900000340000001B501B4034F000503780005012CFFAB01600164
4431	 40C	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x4090000040900000340000001B501B4034F000503780005012CFFAB01600164
- stack 0: 0xE0
4432	 40E	SHR		 	 
- stack 1: 0x684
- stack 0: 0x4090000
4433	 40F	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x4090000
- stack 0: 0xFFFF
4434	 412	AND		 	 
- stack 1: 0x684
- stack 0: 0x0
4435	 413	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x1
4436	 415	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x0
4437	 416	POP		 	 
- stack 0: 0x684
4438	 417	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4439	 419	ADD		 	 
- stack 0: 0x688
4440	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4441	 41B	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x40900000340000001B501B4034F000503780005012CFFAB0160016402B80001
4442	 41C	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x40900000340000001B501B4034F000503780005012CFFAB0160016402B80001
- stack 0: 0xF0
4443	 41E	SHR		 	 
- stack 1: 0x688
- stack 0: 0x409
4444	 41F	JUMP		 	 
- stack 0: 0x688
4445	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x688
4446	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4447	 40B	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x40900000340000001B501B4034F000503780005012CFFAB0160016402B80001
4448	 40C	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x40900000340000001B501B4034F000503780005012CFFAB0160016402B80001
- stack 0: 0xE0
4449	 40E	SHR		 	 
- stack 1: 0x688
- stack 0: 0x4090000
4450	 40F	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x4090000
- stack 0: 0xFFFF
4451	 412	AND		 	 
- stack 1: 0x688
- stack 0: 0x0
4452	 413	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x1
4453	 415	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x0
4454	 416	POP		 	 
- stack 0: 0x688
4455	 417	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4456	 419	ADD		 	 
- stack 0: 0x68C
4457	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4458	 41B	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x340000001B501B4034F000503780005012CFFAB0160016402B8000103AD0002
4459	 41C	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x340000001B501B4034F000503780005012CFFAB0160016402B8000103AD0002
- stack 0: 0xF0
4460	 41E	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x340
4461	 41F	JUMP		 	 
- stack 0: 0x68C
4462	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x68C
4463	 341	DUP1		 	 
- stack 1: 0x68C
- stack 0: 0x68C
4464	 342	PUSH2	0040	 	 
- stack 2: 0x68C
- stack 1: 0x68C
- stack 0: 0x40
4465	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x68C
4466	 346	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4467	 348	ADD		 	 
- stack 0: 0x690
4468	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4469	 34A	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x1B501B4034F000503780005012CFFAB0160016402B8000103AD000203C7FFD4
4470	 34B	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x1B501B4034F000503780005012CFFAB0160016402B8000103AD000203C7FFD4
- stack 0: 0xF0
4471	 34D	SHR		 	 
- stack 1: 0x690
- stack 0: 0x1B5
4472	 34E	JUMP		 	 
- stack 0: 0x690
4473	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x690
4474	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
4475	 1B7	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x1B501B4034F000503780005012CFFAB0160016402B8000103AD000203C7FFD4
4476	 1B8	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x1B501B4034F000503780005012CFFAB0160016402B8000103AD000203C7FFD4
- stack 0: 0xE0
4477	 1BA	SHR		 	 
- stack 1: 0x690
- stack 0: 0x1B501B4
4478	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x1B501B4
- stack 0: 0xFFFF
4479	 1BE	AND		 	 
- stack 1: 0x690
- stack 0: 0x1B4
4480	 1BF	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0x1B4
- stack 0: 0x1
4481	 1C1	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0x1B4
4482	 1C2	PUSH2	0040	 	 
- stack 2: 0x690
- stack 1: 0x1B4
- stack 0: 0x40
4483	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x690
- stack 1: 0x1B4
- stack 0: 0x68C
4484	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x690
- stack 0: 0x840
4485	 1C7	PUSH2	0040	 	 
- stack 2: 0x690
- stack 1: 0x840
- stack 0: 0x40
4486	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x690
4487	 1CB	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4488	 1CD	ADD		 	 
- stack 0: 0x694
4489	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4490	 1CF	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x34F000503780005012CFFAB0160016402B8000103AD000203C7FFD401460012
4491	 1D0	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x34F000503780005012CFFAB0160016402B8000103AD000203C7FFD401460012
- stack 0: 0xF0
4492	 1D2	SHR		 	 
- stack 1: 0x694
- stack 0: 0x34F
4493	 1D3	JUMP		 	 
- stack 0: 0x694
4494	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x694
4495	 350	PUSH2	0020	 	 
- stack 1: 0x694
- stack 0: 0x20
4496	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x694
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
4497	 354	PUSH2	0040	 	 
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x40
4498	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x840
4499	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x694
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 1: 0x840
- stack 0: 0x694
4500	 359	MLOAD		 	 
- stack 3: 0x694
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 1: 0x840
- stack 0: 0x34F000503780005012CFFAB0160016402B8000103AD000203C7FFD401460012
4501	 35A	PUSH1	E0	 	 
- stack 4: 0x694
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 2: 0x840
- stack 1: 0x34F000503780005012CFFAB0160016402B8000103AD000203C7FFD401460012
- stack 0: 0xE0
4502	 35C	SHR		 	 
- stack 3: 0x694
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 1: 0x840
- stack 0: 0x34F0005
4503	 35D	PUSH2	FFFF	 	 
- stack 4: 0x694
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 2: 0x840
- stack 1: 0x34F0005
- stack 0: 0xFFFF
4504	 360	AND		 	 
- stack 3: 0x694
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 1: 0x840
- stack 0: 0x5
4505	 361	PUSH1	01	 	 
- stack 4: 0x694
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 2: 0x840
- stack 1: 0x5
- stack 0: 0x1
4506	 363	SIGNEXTEND		 	 
- stack 3: 0x694
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 1: 0x840
- stack 0: 0x5
4507	 364	ADD		 	 
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x845
4508	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x694
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 1: 0x845
- stack 0: 0xFFFFFFFF
4509	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x845
4510	 36B	PUSH1	03	 	 
- stack 3: 0x694
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 1: 0x845
- stack 0: 0x3
4511	 36D	XOR		 	 
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x846
4512	 36E	MSTORE8		 	 
- stack 0: 0x694
4513	 36F	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4514	 371	ADD		 	 
- stack 0: 0x698
4515	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4516	 373	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x3780005012CFFAB0160016402B8000103AD000203C7FFD401460012030C0000
4517	 374	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x3780005012CFFAB0160016402B8000103AD000203C7FFD401460012030C0000
- stack 0: 0xF0
4518	 376	SHR		 	 
- stack 1: 0x698
- stack 0: 0x378
4519	 377	JUMP		 	 
- stack 0: 0x698
4520	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x698
4521	 379	PUSH2	0040	 	 
- stack 1: 0x698
- stack 0: 0x40
4522	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x698
- stack 0: 0x840
4523	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x698
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
4524	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x698
- stack 0: 0x840
4525	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x698
- stack 1: 0x840
- stack 0: 0x698
4526	 384	MLOAD		 	 
- stack 2: 0x698
- stack 1: 0x840
- stack 0: 0x3780005012CFFAB0160016402B8000103AD000203C7FFD401460012030C0000
4527	 385	PUSH1	E0	 	 
- stack 3: 0x698
- stack 2: 0x840
- stack 1: 0x3780005012CFFAB0160016402B8000103AD000203C7FFD401460012030C0000
- stack 0: 0xE0
4528	 387	SHR		 	 
- stack 2: 0x698
- stack 1: 0x840
- stack 0: 0x3780005
4529	 388	PUSH2	FFFF	 	 
- stack 3: 0x698
- stack 2: 0x840
- stack 1: 0x3780005
- stack 0: 0xFFFF
4530	 38B	AND		 	 
- stack 2: 0x698
- stack 1: 0x840
- stack 0: 0x5
4531	 38C	PUSH1	01	 	 
- stack 3: 0x698
- stack 2: 0x840
- stack 1: 0x5
- stack 0: 0x1
4532	 38E	SIGNEXTEND		 	 
- stack 2: 0x698
- stack 1: 0x840
- stack 0: 0x5
4533	 38F	ADD		 	 
- stack 1: 0x698
- stack 0: 0x845
4534	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x698
- stack 1: 0x845
- stack 0: 0xFFFFFFFF
4535	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x698
- stack 0: 0x845
4536	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x698
- stack 1: 0x845
- stack 0: 0x3
4537	 398	XOR		 	 
- stack 1: 0x698
- stack 0: 0x846
4538	 399	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0xABBB000098780000000000000000000000000000000000000000000000000000
4539	 39A	PUSH1	F8	 	 
- stack 2: 0x698
- stack 1: 0xABBB000098780000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
4540	 39C	SHR		 	 
- stack 1: 0x698
- stack 0: 0xAB
4541	 39D	PUSH1	00	 	 
- stack 2: 0x698
- stack 1: 0xAB
- stack 0: 0x0
4542	 39F	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
4543	 3A0	PUSH2	0060	 	 
- stack 2: 0x698
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x60
4544	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x698
4545	 3A4	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4546	 3A6	ADD		 	 
- stack 0: 0x69C
4547	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4548	 3A8	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x12CFFAB0160016402B8000103AD000203C7FFD401460012030C000003400000
4549	 3A9	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x12CFFAB0160016402B8000103AD000203C7FFD401460012030C000003400000
- stack 0: 0xF0
4550	 3AB	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x12C
4551	 3AC	JUMP		 	 
- stack 0: 0x69C
4552	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x69C
4553	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4554	 12E	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x12CFFAB0160016402B8000103AD000203C7FFD401460012030C000003400000
4555	 12F	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x12CFFAB0160016402B8000103AD000203C7FFD401460012030C000003400000
- stack 0: 0xE0
4556	 131	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x12CFFAB
4557	 132	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x12CFFAB
- stack 0: 0xFFFF
4558	 135	AND		 	 
- stack 1: 0x69C
- stack 0: 0xFFAB
4559	 136	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0xFFAB
- stack 0: 0x1
4560	 138	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
4561	 139	PUSH2	03A0	 	 
- stack 2: 0x69C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x3A0
4562	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x69C
4563	 13D	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4564	 13F	ADD		 	 
- stack 0: 0x6A0
4565	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4566	 141	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x160016402B8000103AD000203C7FFD401460012030C00000340000001B50188
4567	 142	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x160016402B8000103AD000203C7FFD401460012030C00000340000001B50188
- stack 0: 0xF0
4568	 144	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x160
4569	 145	JUMP		 	 
- stack 0: 0x6A0
4570	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x6A0
4571	 161	PUSH2	0060	 	 
- stack 1: 0x6A0
- stack 0: 0x60
4572	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
4573	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0xFFFFFFFF
4574	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A0
- stack 0: 0xFFFFFFAB
4575	 16B	PUSH2	03A0	 	 
- stack 2: 0x6A0
- stack 1: 0xFFFFFFAB
- stack 0: 0x3A0
4576	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x6A0
- stack 1: 0xFFFFFFAB
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
4577	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A0
- stack 2: 0xFFFFFFAB
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0xFFFFFFFF
4578	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A0
- stack 1: 0xFFFFFFAB
- stack 0: 0xFFFFFFAB
4579	 175	SUB		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4580	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x17E
4581	 179	JUMPI		 	 
- stack 0: 0x6A0
4582	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x6A0
- stack 0: 0x198
4583	 17D	JUMP		 	 
- stack 0: 0x6A0
4584	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x6A0
4585	 199	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4586	 19B	ADD		 	 
- stack 0: 0x6A4
4587	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4588	 19D	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x2B8000103AD000203C7FFD401460012030C00000340000001B5018803260033
4589	 19E	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x2B8000103AD000203C7FFD401460012030C00000340000001B5018803260033
- stack 0: 0xF0
4590	 1A0	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x2B8
4591	 1A1	JUMP		 	 
- stack 0: 0x6A4
4592	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x6A4
4593	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
4594	 2BA	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x2B8000103AD000203C7FFD401460012030C00000340000001B5018803260033
4595	 2BB	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x2B8000103AD000203C7FFD401460012030C00000340000001B5018803260033
- stack 0: 0xE0
4596	 2BD	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x2B80001
4597	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x2B80001
- stack 0: 0xFFFF
4598	 2C1	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
4599	 2C2	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x1
4600	 2C4	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
4601	 2C5	PUSH2	0080	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x80
4602	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x0
4603	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x6A4
- stack 0: 0x1
4604	 2CA	PUSH2	0080	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x80
4605	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x6A4
4606	 2CE	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4607	 2D0	ADD		 	 
- stack 0: 0x6A8
4608	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4609	 2D2	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x3AD000203C7FFD401460012030C00000340000001B5018803260033034F0000
4610	 2D3	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x3AD000203C7FFD401460012030C00000340000001B5018803260033034F0000
- stack 0: 0xF0
4611	 2D5	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x3AD
4612	 2D6	JUMP		 	 
- stack 0: 0x6A8
4613	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6A8
4614	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
4615	 3AF	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x3AD000203C7FFD401460012030C00000340000001B5018803260033034F0000
4616	 3B0	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0x3AD000203C7FFD401460012030C00000340000001B5018803260033034F0000
- stack 0: 0xE0
4617	 3B2	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x3AD0002
4618	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
4619	 3B6	AND		 	 
- stack 1: 0x6A8
- stack 0: 0x2
4620	 3B7	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0x2
- stack 0: 0x1
4621	 3B9	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0x2
4622	 3BA	PUSH2	00A0	 	 
- stack 2: 0x6A8
- stack 1: 0x2
- stack 0: 0xA0
4623	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x6A8
4624	 3BE	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4625	 3C0	ADD		 	 
- stack 0: 0x6AC
4626	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4627	 3C2	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3C7FFD401460012030C00000340000001B5018803260033034F000003780000
4628	 3C3	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x3C7FFD401460012030C00000340000001B5018803260033034F000003780000
- stack 0: 0xF0
4629	 3C5	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x3C7
4630	 3C6	JUMP		 	 
- stack 0: 0x6AC
4631	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x6AC
4632	 3C8	PUSH2	0080	 	 
- stack 1: 0x6AC
- stack 0: 0x80
4633	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x6AC
- stack 0: 0x1
4634	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4635	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6AC
- stack 0: 0x1
4636	 3D2	PUSH2	00A0	 	 
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0xA0
4637	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0x2
4638	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6AC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4639	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0x2
4640	 3DC	SUB		 	 
- stack 1: 0x6AC
- stack 0: 0x1
4641	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0x3E5
4642	 3E0	JUMPI		 	 
- stack 0: 0x6AC
4643	 3E5	JUMPDEST		 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x6AC
4644	 3E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
4645	 3E7	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3C7FFD401460012030C00000340000001B5018803260033034F000003780000
4646	 3E8	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x3C7FFD401460012030C00000340000001B5018803260033034F000003780000
- stack 0: 0xE0
4647	 3EA	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x3C7FFD4
4648	 3EB	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x3C7FFD4
- stack 0: 0xFFFF
4649	 3EE	AND		 	 
- stack 1: 0x6AC
- stack 0: 0xFFD4
4650	 3EF	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0xFFD4
- stack 0: 0x1
4651	 3F1	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4
4652	 3F2	ADD		 	 
- stack 0: 0x680
4653	 3F3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x680
- stack 0: 0xFFFFFFFF
4654	 3F8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x680
4655	 3F9	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4656	 3FA	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x326FFAB04090000040900000340000001B501B4034F000503780005012CFFAB
4657	 3FB	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x326FFAB04090000040900000340000001B501B4034F000503780005012CFFAB
- stack 0: 0xF0
4658	 3FD	SHR		 	 
- stack 1: 0x680
- stack 0: 0x326
4659	 3FE	JUMP		 	 
- stack 0: 0x680
4660	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x680
4661	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
4662	 328	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x326FFAB04090000040900000340000001B501B4034F000503780005012CFFAB
4663	 329	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x326FFAB04090000040900000340000001B501B4034F000503780005012CFFAB
- stack 0: 0xE0
4664	 32B	SHR		 	 
- stack 1: 0x680
- stack 0: 0x326FFAB
4665	 32C	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x326FFAB
- stack 0: 0xFFFF
4666	 32F	AND		 	 
- stack 1: 0x680
- stack 0: 0xFFAB
4667	 330	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0xFFAB
- stack 0: 0x1
4668	 332	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
4669	 333	PUSH2	0020	 	 
- stack 2: 0x680
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x20
4670	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x680
4671	 337	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4672	 339	ADD		 	 
- stack 0: 0x684
4673	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4674	 33B	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x4090000040900000340000001B501B4034F000503780005012CFFAB01600164
4675	 33C	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x4090000040900000340000001B501B4034F000503780005012CFFAB01600164
- stack 0: 0xF0
4676	 33E	SHR		 	 
- stack 1: 0x684
- stack 0: 0x409
4677	 33F	JUMP		 	 
- stack 0: 0x684
4678	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x684
4679	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
4680	 40B	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x4090000040900000340000001B501B4034F000503780005012CFFAB01600164
4681	 40C	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x4090000040900000340000001B501B4034F000503780005012CFFAB01600164
- stack 0: 0xE0
4682	 40E	SHR		 	 
- stack 1: 0x684
- stack 0: 0x4090000
4683	 40F	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x4090000
- stack 0: 0xFFFF
4684	 412	AND		 	 
- stack 1: 0x684
- stack 0: 0x0
4685	 413	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x1
4686	 415	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x0
4687	 416	POP		 	 
- stack 0: 0x684
4688	 417	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4689	 419	ADD		 	 
- stack 0: 0x688
4690	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4691	 41B	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x40900000340000001B501B4034F000503780005012CFFAB0160016402B80001
4692	 41C	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x40900000340000001B501B4034F000503780005012CFFAB0160016402B80001
- stack 0: 0xF0
4693	 41E	SHR		 	 
- stack 1: 0x688
- stack 0: 0x409
4694	 41F	JUMP		 	 
- stack 0: 0x688
4695	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x688
4696	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4697	 40B	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x40900000340000001B501B4034F000503780005012CFFAB0160016402B80001
4698	 40C	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x40900000340000001B501B4034F000503780005012CFFAB0160016402B80001
- stack 0: 0xE0
4699	 40E	SHR		 	 
- stack 1: 0x688
- stack 0: 0x4090000
4700	 40F	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x4090000
- stack 0: 0xFFFF
4701	 412	AND		 	 
- stack 1: 0x688
- stack 0: 0x0
4702	 413	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x1
4703	 415	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x0
4704	 416	POP		 	 
- stack 0: 0x688
4705	 417	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4706	 419	ADD		 	 
- stack 0: 0x68C
4707	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4708	 41B	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x340000001B501B4034F000503780005012CFFAB0160016402B8000103AD0002
4709	 41C	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x340000001B501B4034F000503780005012CFFAB0160016402B8000103AD0002
- stack 0: 0xF0
4710	 41E	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x340
4711	 41F	JUMP		 	 
- stack 0: 0x68C
4712	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x68C
4713	 341	DUP1		 	 
- stack 1: 0x68C
- stack 0: 0x68C
4714	 342	PUSH2	0040	 	 
- stack 2: 0x68C
- stack 1: 0x68C
- stack 0: 0x40
4715	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x68C
4716	 346	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4717	 348	ADD		 	 
- stack 0: 0x690
4718	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4719	 34A	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x1B501B4034F000503780005012CFFAB0160016402B8000103AD000203C7FFD4
4720	 34B	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x1B501B4034F000503780005012CFFAB0160016402B8000103AD000203C7FFD4
- stack 0: 0xF0
4721	 34D	SHR		 	 
- stack 1: 0x690
- stack 0: 0x1B5
4722	 34E	JUMP		 	 
- stack 0: 0x690
4723	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x690
4724	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
4725	 1B7	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x1B501B4034F000503780005012CFFAB0160016402B8000103AD000203C7FFD4
4726	 1B8	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x1B501B4034F000503780005012CFFAB0160016402B8000103AD000203C7FFD4
- stack 0: 0xE0
4727	 1BA	SHR		 	 
- stack 1: 0x690
- stack 0: 0x1B501B4
4728	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x1B501B4
- stack 0: 0xFFFF
4729	 1BE	AND		 	 
- stack 1: 0x690
- stack 0: 0x1B4
4730	 1BF	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0x1B4
- stack 0: 0x1
4731	 1C1	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0x1B4
4732	 1C2	PUSH2	0040	 	 
- stack 2: 0x690
- stack 1: 0x1B4
- stack 0: 0x40
4733	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x690
- stack 1: 0x1B4
- stack 0: 0x68C
4734	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x690
- stack 0: 0x840
4735	 1C7	PUSH2	0040	 	 
- stack 2: 0x690
- stack 1: 0x840
- stack 0: 0x40
4736	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x690
4737	 1CB	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4738	 1CD	ADD		 	 
- stack 0: 0x694
4739	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4740	 1CF	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x34F000503780005012CFFAB0160016402B8000103AD000203C7FFD401460012
4741	 1D0	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x34F000503780005012CFFAB0160016402B8000103AD000203C7FFD401460012
- stack 0: 0xF0
4742	 1D2	SHR		 	 
- stack 1: 0x694
- stack 0: 0x34F
4743	 1D3	JUMP		 	 
- stack 0: 0x694
4744	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x694
4745	 350	PUSH2	0020	 	 
- stack 1: 0x694
- stack 0: 0x20
4746	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x694
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
4747	 354	PUSH2	0040	 	 
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x40
4748	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x840
4749	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x694
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 1: 0x840
- stack 0: 0x694
4750	 359	MLOAD		 	 
- stack 3: 0x694
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 1: 0x840
- stack 0: 0x34F000503780005012CFFAB0160016402B8000103AD000203C7FFD401460012
4751	 35A	PUSH1	E0	 	 
- stack 4: 0x694
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 2: 0x840
- stack 1: 0x34F000503780005012CFFAB0160016402B8000103AD000203C7FFD401460012
- stack 0: 0xE0
4752	 35C	SHR		 	 
- stack 3: 0x694
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 1: 0x840
- stack 0: 0x34F0005
4753	 35D	PUSH2	FFFF	 	 
- stack 4: 0x694
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 2: 0x840
- stack 1: 0x34F0005
- stack 0: 0xFFFF
4754	 360	AND		 	 
- stack 3: 0x694
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 1: 0x840
- stack 0: 0x5
4755	 361	PUSH1	01	 	 
- stack 4: 0x694
- stack 3: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 2: 0x840
- stack 1: 0x5
- stack 0: 0x1
4756	 363	SIGNEXTEND		 	 
- stack 3: 0x694
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 1: 0x840
- stack 0: 0x5
4757	 364	ADD		 	 
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x845
4758	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x694
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 1: 0x845
- stack 0: 0xFFFFFFFF
4759	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x845
4760	 36B	PUSH1	03	 	 
- stack 3: 0x694
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 1: 0x845
- stack 0: 0x3
4761	 36D	XOR		 	 
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x846
4762	 36E	MSTORE8		 	 
- stack 0: 0x694
4763	 36F	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4764	 371	ADD		 	 
- stack 0: 0x698
4765	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4766	 373	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x3780005012CFFAB0160016402B8000103AD000203C7FFD401460012030C0000
4767	 374	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x3780005012CFFAB0160016402B8000103AD000203C7FFD401460012030C0000
- stack 0: 0xF0
4768	 376	SHR		 	 
- stack 1: 0x698
- stack 0: 0x378
4769	 377	JUMP		 	 
- stack 0: 0x698
4770	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x698
4771	 379	PUSH2	0040	 	 
- stack 1: 0x698
- stack 0: 0x40
4772	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x698
- stack 0: 0x840
4773	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x698
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
4774	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x698
- stack 0: 0x840
4775	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x698
- stack 1: 0x840
- stack 0: 0x698
4776	 384	MLOAD		 	 
- stack 2: 0x698
- stack 1: 0x840
- stack 0: 0x3780005012CFFAB0160016402B8000103AD000203C7FFD401460012030C0000
4777	 385	PUSH1	E0	 	 
- stack 3: 0x698
- stack 2: 0x840
- stack 1: 0x3780005012CFFAB0160016402B8000103AD000203C7FFD401460012030C0000
- stack 0: 0xE0
4778	 387	SHR		 	 
- stack 2: 0x698
- stack 1: 0x840
- stack 0: 0x3780005
4779	 388	PUSH2	FFFF	 	 
- stack 3: 0x698
- stack 2: 0x840
- stack 1: 0x3780005
- stack 0: 0xFFFF
4780	 38B	AND		 	 
- stack 2: 0x698
- stack 1: 0x840
- stack 0: 0x5
4781	 38C	PUSH1	01	 	 
- stack 3: 0x698
- stack 2: 0x840
- stack 1: 0x5
- stack 0: 0x1
4782	 38E	SIGNEXTEND		 	 
- stack 2: 0x698
- stack 1: 0x840
- stack 0: 0x5
4783	 38F	ADD		 	 
- stack 1: 0x698
- stack 0: 0x845
4784	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x698
- stack 1: 0x845
- stack 0: 0xFFFFFFFF
4785	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x698
- stack 0: 0x845
4786	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x698
- stack 1: 0x845
- stack 0: 0x3
4787	 398	XOR		 	 
- stack 1: 0x698
- stack 0: 0x846
4788	 399	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0xABBB000098780000000000000000000000000000000000000000000000000000
4789	 39A	PUSH1	F8	 	 
- stack 2: 0x698
- stack 1: 0xABBB000098780000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
4790	 39C	SHR		 	 
- stack 1: 0x698
- stack 0: 0xAB
4791	 39D	PUSH1	00	 	 
- stack 2: 0x698
- stack 1: 0xAB
- stack 0: 0x0
4792	 39F	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
4793	 3A0	PUSH2	0060	 	 
- stack 2: 0x698
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x60
4794	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x698
4795	 3A4	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4796	 3A6	ADD		 	 
- stack 0: 0x69C
4797	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4798	 3A8	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x12CFFAB0160016402B8000103AD000203C7FFD401460012030C000003400000
4799	 3A9	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x12CFFAB0160016402B8000103AD000203C7FFD401460012030C000003400000
- stack 0: 0xF0
4800	 3AB	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x12C
4801	 3AC	JUMP		 	 
- stack 0: 0x69C
4802	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x69C
4803	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4804	 12E	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x12CFFAB0160016402B8000103AD000203C7FFD401460012030C000003400000
4805	 12F	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x12CFFAB0160016402B8000103AD000203C7FFD401460012030C000003400000
- stack 0: 0xE0
4806	 131	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x12CFFAB
4807	 132	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x12CFFAB
- stack 0: 0xFFFF
4808	 135	AND		 	 
- stack 1: 0x69C
- stack 0: 0xFFAB
4809	 136	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0xFFAB
- stack 0: 0x1
4810	 138	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
4811	 139	PUSH2	03A0	 	 
- stack 2: 0x69C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0x3A0
4812	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x69C
4813	 13D	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4814	 13F	ADD		 	 
- stack 0: 0x6A0
4815	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4816	 141	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x160016402B8000103AD000203C7FFD401460012030C00000340000001B50188
4817	 142	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x160016402B8000103AD000203C7FFD401460012030C00000340000001B50188
- stack 0: 0xF0
4818	 144	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x160
4819	 145	JUMP		 	 
- stack 0: 0x6A0
4820	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x6A0
4821	 161	PUSH2	0060	 	 
- stack 1: 0x6A0
- stack 0: 0x60
4822	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
4823	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0xFFFFFFFF
4824	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A0
- stack 0: 0xFFFFFFAB
4825	 16B	PUSH2	03A0	 	 
- stack 2: 0x6A0
- stack 1: 0xFFFFFFAB
- stack 0: 0x3A0
4826	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x6A0
- stack 1: 0xFFFFFFAB
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
4827	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A0
- stack 2: 0xFFFFFFAB
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB
- stack 0: 0xFFFFFFFF
4828	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A0
- stack 1: 0xFFFFFFAB
- stack 0: 0xFFFFFFAB
4829	 175	SUB		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4830	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x17E
4831	 179	JUMPI		 	 
- stack 0: 0x6A0
4832	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x6A0
- stack 0: 0x198
4833	 17D	JUMP		 	 
- stack 0: 0x6A0
4834	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x6A0
4835	 199	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4836	 19B	ADD		 	 
- stack 0: 0x6A4
4837	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4838	 19D	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x2B8000103AD000203C7FFD401460012030C00000340000001B5018803260033
4839	 19E	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x2B8000103AD000203C7FFD401460012030C00000340000001B5018803260033
- stack 0: 0xF0
4840	 1A0	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x2B8
4841	 1A1	JUMP		 	 
- stack 0: 0x6A4
4842	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x6A4
4843	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
4844	 2BA	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x2B8000103AD000203C7FFD401460012030C00000340000001B5018803260033
4845	 2BB	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x2B8000103AD000203C7FFD401460012030C00000340000001B5018803260033
- stack 0: 0xE0
4846	 2BD	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x2B80001
4847	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x2B80001
- stack 0: 0xFFFF
4848	 2C1	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
4849	 2C2	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x1
4850	 2C4	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
4851	 2C5	PUSH2	0080	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x80
4852	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x1
4853	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x6A4
- stack 0: 0x2
4854	 2CA	PUSH2	0080	 	 
- stack 2: 0x6A4
- stack 1: 0x2
- stack 0: 0x80
4855	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x6A4
4856	 2CE	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4857	 2D0	ADD		 	 
- stack 0: 0x6A8
4858	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4859	 2D2	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x3AD000203C7FFD401460012030C00000340000001B5018803260033034F0000
4860	 2D3	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x3AD000203C7FFD401460012030C00000340000001B5018803260033034F0000
- stack 0: 0xF0
4861	 2D5	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x3AD
4862	 2D6	JUMP		 	 
- stack 0: 0x6A8
4863	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6A8
4864	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
4865	 3AF	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x3AD000203C7FFD401460012030C00000340000001B5018803260033034F0000
4866	 3B0	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0x3AD000203C7FFD401460012030C00000340000001B5018803260033034F0000
- stack 0: 0xE0
4867	 3B2	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x3AD0002
4868	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
4869	 3B6	AND		 	 
- stack 1: 0x6A8
- stack 0: 0x2
4870	 3B7	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0x2
- stack 0: 0x1
4871	 3B9	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0x2
4872	 3BA	PUSH2	00A0	 	 
- stack 2: 0x6A8
- stack 1: 0x2
- stack 0: 0xA0
4873	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x6A8
4874	 3BE	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4875	 3C0	ADD		 	 
- stack 0: 0x6AC
4876	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4877	 3C2	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3C7FFD401460012030C00000340000001B5018803260033034F000003780000
4878	 3C3	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x3C7FFD401460012030C00000340000001B5018803260033034F000003780000
- stack 0: 0xF0
4879	 3C5	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x3C7
4880	 3C6	JUMP		 	 
- stack 0: 0x6AC
4881	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x6AC
4882	 3C8	PUSH2	0080	 	 
- stack 1: 0x6AC
- stack 0: 0x80
4883	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x6AC
- stack 0: 0x2
4884	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4885	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6AC
- stack 0: 0x2
4886	 3D2	PUSH2	00A0	 	 
- stack 2: 0x6AC
- stack 1: 0x2
- stack 0: 0xA0
4887	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x6AC
- stack 1: 0x2
- stack 0: 0x2
4888	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6AC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4889	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6AC
- stack 1: 0x2
- stack 0: 0x2
4890	 3DC	SUB		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4891	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x3E5
4892	 3E0	JUMPI		 	 
- stack 0: 0x6AC
4893	 3E1	PUSH2	03FF	 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 1: 0x6AC
- stack 0: 0x3FF
4894	 3E4	JUMP		 	 
- stack 0: 0x6AC
4895	 3FF	JUMPDEST		 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x6AC
4896	 400	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4897	 402	ADD		 	 
- stack 0: 0x6B0
4898	 403	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4899	 404	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x1460012030C00000340000001B5018803260033034F000003780000012C0033
4900	 405	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x1460012030C00000340000001B5018803260033034F000003780000012C0033
- stack 0: 0xF0
4901	 407	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x146
4902	 408	JUMP		 	 
- stack 0: 0x6B0
4903	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6B0
4904	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
4905	 148	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x1460012030C00000340000001B5018803260033034F000003780000012C0033
4906	 149	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x1460012030C00000340000001B5018803260033034F000003780000012C0033
- stack 0: 0xE0
4907	 14B	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x1460012
4908	 14C	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x1460012
- stack 0: 0xFFFF
4909	 14F	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x12
4910	 150	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x12
- stack 0: 0x1
4911	 152	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x12
4912	 153	PUSH2	0380	 	 
- stack 2: 0x6B0
- stack 1: 0x12
- stack 0: 0x380
4913	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x6B0
4914	 157	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4915	 159	ADD		 	 
- stack 0: 0x6B4
4916	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4917	 15B	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x30C00000340000001B5018803260033034F000003780000012C003301600134
4918	 15C	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x30C00000340000001B5018803260033034F000003780000012C003301600134
- stack 0: 0xF0
4919	 15E	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x30C
4920	 15F	JUMP		 	 
- stack 0: 0x6B4
4921	 30C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6B4
4922	 30D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
4923	 30E	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x30C00000340000001B5018803260033034F000003780000012C003301600134
4924	 30F	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x30C00000340000001B5018803260033034F000003780000012C003301600134
- stack 0: 0xE0
4925	 311	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x30C0000
4926	 312	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x30C0000
- stack 0: 0xFFFF
4927	 315	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
4928	 316	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x1
4929	 318	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
4930	 319	PUSH2	0080	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x80
4931	 31C	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B4
4932	 31D	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4933	 31F	ADD		 	 
- stack 0: 0x6B8
4934	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4935	 321	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x340000001B5018803260033034F000003780000012C00330160013402B80001
4936	 322	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x340000001B5018803260033034F000003780000012C00330160013402B80001
- stack 0: 0xF0
4937	 324	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x340
4938	 325	JUMP		 	 
- stack 0: 0x6B8
4939	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x6B8
4940	 341	DUP1		 	 
- stack 1: 0x6B8
- stack 0: 0x6B8
4941	 342	PUSH2	0040	 	 
- stack 2: 0x6B8
- stack 1: 0x6B8
- stack 0: 0x40
4942	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x6B8
4943	 346	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4944	 348	ADD		 	 
- stack 0: 0x6BC
4945	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4946	 34A	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x1B5018803260033034F000003780000012C00330160013402B8000103AD0002
4947	 34B	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x1B5018803260033034F000003780000012C00330160013402B8000103AD0002
- stack 0: 0xF0
4948	 34D	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x1B5
4949	 34E	JUMP		 	 
- stack 0: 0x6BC
4950	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x6BC
4951	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
4952	 1B7	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x1B5018803260033034F000003780000012C00330160013402B8000103AD0002
4953	 1B8	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x1B5018803260033034F000003780000012C00330160013402B8000103AD0002
- stack 0: 0xE0
4954	 1BA	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x1B50188
4955	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x1B50188
- stack 0: 0xFFFF
4956	 1BE	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x188
4957	 1BF	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x188
- stack 0: 0x1
4958	 1C1	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x188
4959	 1C2	PUSH2	0040	 	 
- stack 2: 0x6BC
- stack 1: 0x188
- stack 0: 0x40
4960	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x6BC
- stack 1: 0x188
- stack 0: 0x6B8
4961	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x6BC
- stack 0: 0x840
4962	 1C7	PUSH2	0040	 	 
- stack 2: 0x6BC
- stack 1: 0x840
- stack 0: 0x40
4963	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x6BC
4964	 1CB	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4965	 1CD	ADD		 	 
- stack 0: 0x6C0
4966	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4967	 1CF	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x3260033034F000003780000012C00330160013402B8000103AD000203C7FFDC
4968	 1D0	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x3260033034F000003780000012C00330160013402B8000103AD000203C7FFDC
- stack 0: 0xF0
4969	 1D2	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x326
4970	 1D3	JUMP		 	 
- stack 0: 0x6C0
4971	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x6C0
4972	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
4973	 328	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x3260033034F000003780000012C00330160013402B8000103AD000203C7FFDC
4974	 329	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x3260033034F000003780000012C00330160013402B8000103AD000203C7FFDC
- stack 0: 0xE0
4975	 32B	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x3260033
4976	 32C	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x3260033
- stack 0: 0xFFFF
4977	 32F	AND		 	 
- stack 1: 0x6C0
- stack 0: 0x33
4978	 330	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0x33
- stack 0: 0x1
4979	 332	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0x33
4980	 333	PUSH2	0020	 	 
- stack 2: 0x6C0
- stack 1: 0x33
- stack 0: 0x20
4981	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x6C0
4982	 337	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4983	 339	ADD		 	 
- stack 0: 0x6C4
4984	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4985	 33B	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x34F000003780000012C00330160013402B8000103AD000203C7FFDC01460013
4986	 33C	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x34F000003780000012C00330160013402B8000103AD000203C7FFDC01460013
- stack 0: 0xF0
4987	 33E	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x34F
4988	 33F	JUMP		 	 
- stack 0: 0x6C4
4989	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x6C4
4990	 350	PUSH2	0020	 	 
- stack 1: 0x6C4
- stack 0: 0x20
4991	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x6C4
- stack 0: 0x33
4992	 354	PUSH2	0040	 	 
- stack 2: 0x6C4
- stack 1: 0x33
- stack 0: 0x40
4993	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x6C4
- stack 1: 0x33
- stack 0: 0x840
4994	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x6C4
- stack 2: 0x33
- stack 1: 0x840
- stack 0: 0x6C4
4995	 359	MLOAD		 	 
- stack 3: 0x6C4
- stack 2: 0x33
- stack 1: 0x840
- stack 0: 0x34F000003780000012C00330160013402B8000103AD000203C7FFDC01460013
4996	 35A	PUSH1	E0	 	 
- stack 4: 0x6C4
- stack 3: 0x33
- stack 2: 0x840
- stack 1: 0x34F000003780000012C00330160013402B8000103AD000203C7FFDC01460013
- stack 0: 0xE0
4997	 35C	SHR		 	 
- stack 3: 0x6C4
- stack 2: 0x33
- stack 1: 0x840
- stack 0: 0x34F0000
4998	 35D	PUSH2	FFFF	 	 
- stack 4: 0x6C4
- stack 3: 0x33
- stack 2: 0x840
- stack 1: 0x34F0000
- stack 0: 0xFFFF
4999	 360	AND		 	 
- stack 3: 0x6C4
- stack 2: 0x33
- stack 1: 0x840
- stack 0: 0x0
5000	 361	PUSH1	01	 	 
- stack 4: 0x6C4
- stack 3: 0x33
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x1
5001	 363	SIGNEXTEND		 	 
- stack 3: 0x6C4
- stack 2: 0x33
- stack 1: 0x840
- stack 0: 0x0
5002	 364	ADD		 	 
- stack 2: 0x6C4
- stack 1: 0x33
- stack 0: 0x840
5003	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C4
- stack 2: 0x33
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
5004	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C4
- stack 1: 0x33
- stack 0: 0x840
5005	 36B	PUSH1	03	 	 
- stack 3: 0x6C4
- stack 2: 0x33
- stack 1: 0x840
- stack 0: 0x3
5006	 36D	XOR		 	 
- stack 2: 0x6C4
- stack 1: 0x33
- stack 0: 0x843
5007	 36E	MSTORE8		 	 
- stack 0: 0x6C4
5008	 36F	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
5009	 371	ADD		 	 
- stack 0: 0x6C8
5010	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
5011	 373	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x3780000012C00330160013402B8000103AD000203C7FFDC01460013030C0000
5012	 374	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x3780000012C00330160013402B8000103AD000203C7FFDC01460013030C0000
- stack 0: 0xF0
5013	 376	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x378
5014	 377	JUMP		 	 
- stack 0: 0x6C8
5015	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x6C8
5016	 379	PUSH2	0040	 	 
- stack 1: 0x6C8
- stack 0: 0x40
5017	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x6C8
- stack 0: 0x840
5018	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
5019	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C8
- stack 0: 0x840
5020	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0x6C8
5021	 384	MLOAD		 	 
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0x3780000012C00330160013402B8000103AD000203C7FFDC01460013030C0000
5022	 385	PUSH1	E0	 	 
- stack 3: 0x6C8
- stack 2: 0x840
- stack 1: 0x3780000012C00330160013402B8000103AD000203C7FFDC01460013030C0000
- stack 0: 0xE0
5023	 387	SHR		 	 
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0x3780000
5024	 388	PUSH2	FFFF	 	 
- stack 3: 0x6C8
- stack 2: 0x840
- stack 1: 0x3780000
- stack 0: 0xFFFF
5025	 38B	AND		 	 
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0x0
5026	 38C	PUSH1	01	 	 
- stack 3: 0x6C8
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x1
5027	 38E	SIGNEXTEND		 	 
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0x0
5028	 38F	ADD		 	 
- stack 1: 0x6C8
- stack 0: 0x840
5029	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
5030	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C8
- stack 0: 0x840
5031	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0x3
5032	 398	XOR		 	 
- stack 1: 0x6C8
- stack 0: 0x843
5033	 399	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x330AA0ABBB000098780000000000000000000000000000000000000000000000
5034	 39A	PUSH1	F8	 	 
- stack 2: 0x6C8
- stack 1: 0x330AA0ABBB000098780000000000000000000000000000000000000000000000
- stack 0: 0xF8
5035	 39C	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x33
5036	 39D	PUSH1	00	 	 
- stack 2: 0x6C8
- stack 1: 0x33
- stack 0: 0x0
5037	 39F	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x33
5038	 3A0	PUSH2	0060	 	 
- stack 2: 0x6C8
- stack 1: 0x33
- stack 0: 0x60
5039	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x6C8
5040	 3A4	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
5041	 3A6	ADD		 	 
- stack 0: 0x6CC
5042	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
5043	 3A8	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x12C00330160013402B8000103AD000203C7FFDC01460013030C000003400000
5044	 3A9	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x12C00330160013402B8000103AD000203C7FFDC01460013030C000003400000
- stack 0: 0xF0
5045	 3AB	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x12C
5046	 3AC	JUMP		 	 
- stack 0: 0x6CC
5047	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x6CC
5048	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6CC
- stack 0: 0x6CC
5049	 12E	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x12C00330160013402B8000103AD000203C7FFDC01460013030C000003400000
5050	 12F	PUSH1	E0	 	 
- stack 2: 0x6CC
- stack 1: 0x12C00330160013402B8000103AD000203C7FFDC01460013030C000003400000
- stack 0: 0xE0
5051	 131	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x12C0033
5052	 132	PUSH2	FFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x12C0033
- stack 0: 0xFFFF
5053	 135	AND		 	 
- stack 1: 0x6CC
- stack 0: 0x33
5054	 136	PUSH1	01	 	 
- stack 2: 0x6CC
- stack 1: 0x33
- stack 0: 0x1
5055	 138	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0x33
5056	 139	PUSH2	03A0	 	 
- stack 2: 0x6CC
- stack 1: 0x33
- stack 0: 0x3A0
5057	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x6CC
5058	 13D	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
5059	 13F	ADD		 	 
- stack 0: 0x6D0
5060	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
5061	 141	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x160013402B8000103AD000203C7FFDC01460013030C00000340000001B50158
5062	 142	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x160013402B8000103AD000203C7FFDC01460013030C00000340000001B50158
- stack 0: 0xF0
5063	 144	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x160
5064	 145	JUMP		 	 
- stack 0: 0x6D0
5065	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x6D0
5066	 161	PUSH2	0060	 	 
- stack 1: 0x6D0
- stack 0: 0x60
5067	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x6D0
- stack 0: 0x33
5068	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x33
- stack 0: 0xFFFFFFFF
5069	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D0
- stack 0: 0x33
5070	 16B	PUSH2	03A0	 	 
- stack 2: 0x6D0
- stack 1: 0x33
- stack 0: 0x3A0
5071	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x6D0
- stack 1: 0x33
- stack 0: 0x33
5072	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D0
- stack 2: 0x33
- stack 1: 0x33
- stack 0: 0xFFFFFFFF
5073	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D0
- stack 1: 0x33
- stack 0: 0x33
5074	 175	SUB		 	 
- stack 1: 0x6D0
- stack 0: 0x0
5075	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x17E
5076	 179	JUMPI		 	 
- stack 0: 0x6D0
5077	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x6D0
- stack 0: 0x198
5078	 17D	JUMP		 	 
- stack 0: 0x6D0
5079	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x6D0
5080	 199	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
5081	 19B	ADD		 	 
- stack 0: 0x6D4
5082	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
5083	 19D	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x2B8000103AD000203C7FFDC01460013030C00000340000001B5015803260023
5084	 19E	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x2B8000103AD000203C7FFDC01460013030C00000340000001B5015803260023
- stack 0: 0xF0
5085	 1A0	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x2B8
5086	 1A1	JUMP		 	 
- stack 0: 0x6D4
5087	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x6D4
5088	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
5089	 2BA	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x2B8000103AD000203C7FFDC01460013030C00000340000001B5015803260023
5090	 2BB	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0x2B8000103AD000203C7FFDC01460013030C00000340000001B5015803260023
- stack 0: 0xE0
5091	 2BD	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x2B80001
5092	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x2B80001
- stack 0: 0xFFFF
5093	 2C1	AND		 	 
- stack 1: 0x6D4
- stack 0: 0x1
5094	 2C2	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x1
5095	 2C4	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0x1
5096	 2C5	PUSH2	0080	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x80
5097	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x0
5098	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x6D4
- stack 0: 0x1
5099	 2CA	PUSH2	0080	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x80
5100	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x6D4
5101	 2CE	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
5102	 2D0	ADD		 	 
- stack 0: 0x6D8
5103	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
5104	 2D2	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x3AD000203C7FFDC01460013030C00000340000001B501580326002304090000
5105	 2D3	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x3AD000203C7FFDC01460013030C00000340000001B501580326002304090000
- stack 0: 0xF0
5106	 2D5	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x3AD
5107	 2D6	JUMP		 	 
- stack 0: 0x6D8
5108	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6D8
5109	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
5110	 3AF	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x3AD000203C7FFDC01460013030C00000340000001B501580326002304090000
5111	 3B0	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x3AD000203C7FFDC01460013030C00000340000001B501580326002304090000
- stack 0: 0xE0
5112	 3B2	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x3AD0002
5113	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
5114	 3B6	AND		 	 
- stack 1: 0x6D8
- stack 0: 0x2
5115	 3B7	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0x1
5116	 3B9	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0x2
5117	 3BA	PUSH2	00A0	 	 
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0xA0
5118	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x6D8
5119	 3BE	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
5120	 3C0	ADD		 	 
- stack 0: 0x6DC
5121	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
5122	 3C2	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3C7FFDC01460013030C00000340000001B501580326002304090000034F0001
5123	 3C3	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x3C7FFDC01460013030C00000340000001B501580326002304090000034F0001
- stack 0: 0xF0
5124	 3C5	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x3C7
5125	 3C6	JUMP		 	 
- stack 0: 0x6DC
5126	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x6DC
5127	 3C8	PUSH2	0080	 	 
- stack 1: 0x6DC
- stack 0: 0x80
5128	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x6DC
- stack 0: 0x1
5129	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5130	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6DC
- stack 0: 0x1
5131	 3D2	PUSH2	00A0	 	 
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0xA0
5132	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0x2
5133	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6DC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5134	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0x2
5135	 3DC	SUB		 	 
- stack 1: 0x6DC
- stack 0: 0x1
5136	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0x3E5
5137	 3E0	JUMPI		 	 
- stack 0: 0x6DC
5138	 3E5	JUMPDEST		 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x6DC
5139	 3E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
5140	 3E7	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3C7FFDC01460013030C00000340000001B501580326002304090000034F0001
5141	 3E8	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x3C7FFDC01460013030C00000340000001B501580326002304090000034F0001
- stack 0: 0xE0
5142	 3EA	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x3C7FFDC
5143	 3EB	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x3C7FFDC
- stack 0: 0xFFFF
5144	 3EE	AND		 	 
- stack 1: 0x6DC
- stack 0: 0xFFDC
5145	 3EF	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0xFFDC
- stack 0: 0x1
5146	 3F1	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
5147	 3F2	ADD		 	 
- stack 0: 0x6B8
5148	 3F3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6B8
- stack 0: 0xFFFFFFFF
5149	 3F8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6B8
5150	 3F9	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
5151	 3FA	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x340000001B5018803260033034F000003780000012C00330160013402B80001
5152	 3FB	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x340000001B5018803260033034F000003780000012C00330160013402B80001
- stack 0: 0xF0
5153	 3FD	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x340
5154	 3FE	JUMP		 	 
- stack 0: 0x6B8
5155	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x6B8
5156	 341	DUP1		 	 
- stack 1: 0x6B8
- stack 0: 0x6B8
5157	 342	PUSH2	0040	 	 
- stack 2: 0x6B8
- stack 1: 0x6B8
- stack 0: 0x40
5158	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x6B8
5159	 346	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
5160	 348	ADD		 	 
- stack 0: 0x6BC
5161	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
5162	 34A	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x1B5018803260033034F000003780000012C00330160013402B8000103AD0002
5163	 34B	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x1B5018803260033034F000003780000012C00330160013402B8000103AD0002
- stack 0: 0xF0
5164	 34D	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x1B5
5165	 34E	JUMP		 	 
- stack 0: 0x6BC
5166	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x6BC
5167	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
5168	 1B7	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x1B5018803260033034F000003780000012C00330160013402B8000103AD0002
5169	 1B8	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x1B5018803260033034F000003780000012C00330160013402B8000103AD0002
- stack 0: 0xE0
5170	 1BA	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x1B50188
5171	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x1B50188
- stack 0: 0xFFFF
5172	 1BE	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x188
5173	 1BF	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x188
- stack 0: 0x1
5174	 1C1	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x188
5175	 1C2	PUSH2	0040	 	 
- stack 2: 0x6BC
- stack 1: 0x188
- stack 0: 0x40
5176	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x6BC
- stack 1: 0x188
- stack 0: 0x6B8
5177	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x6BC
- stack 0: 0x840
5178	 1C7	PUSH2	0040	 	 
- stack 2: 0x6BC
- stack 1: 0x840
- stack 0: 0x40
5179	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x6BC
5180	 1CB	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
5181	 1CD	ADD		 	 
- stack 0: 0x6C0
5182	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
5183	 1CF	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x3260033034F000003780000012C00330160013402B8000103AD000203C7FFDC
5184	 1D0	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x3260033034F000003780000012C00330160013402B8000103AD000203C7FFDC
- stack 0: 0xF0
5185	 1D2	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x326
5186	 1D3	JUMP		 	 
- stack 0: 0x6C0
5187	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x6C0
5188	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
5189	 328	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x3260033034F000003780000012C00330160013402B8000103AD000203C7FFDC
5190	 329	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x3260033034F000003780000012C00330160013402B8000103AD000203C7FFDC
- stack 0: 0xE0
5191	 32B	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x3260033
5192	 32C	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x3260033
- stack 0: 0xFFFF
5193	 32F	AND		 	 
- stack 1: 0x6C0
- stack 0: 0x33
5194	 330	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0x33
- stack 0: 0x1
5195	 332	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0x33
5196	 333	PUSH2	0020	 	 
- stack 2: 0x6C0
- stack 1: 0x33
- stack 0: 0x20
5197	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x6C0
5198	 337	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
5199	 339	ADD		 	 
- stack 0: 0x6C4
5200	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
5201	 33B	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x34F000003780000012C00330160013402B8000103AD000203C7FFDC01460013
5202	 33C	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x34F000003780000012C00330160013402B8000103AD000203C7FFDC01460013
- stack 0: 0xF0
5203	 33E	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x34F
5204	 33F	JUMP		 	 
- stack 0: 0x6C4
5205	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x6C4
5206	 350	PUSH2	0020	 	 
- stack 1: 0x6C4
- stack 0: 0x20
5207	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x6C4
- stack 0: 0x33
5208	 354	PUSH2	0040	 	 
- stack 2: 0x6C4
- stack 1: 0x33
- stack 0: 0x40
5209	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x6C4
- stack 1: 0x33
- stack 0: 0x840
5210	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x6C4
- stack 2: 0x33
- stack 1: 0x840
- stack 0: 0x6C4
5211	 359	MLOAD		 	 
- stack 3: 0x6C4
- stack 2: 0x33
- stack 1: 0x840
- stack 0: 0x34F000003780000012C00330160013402B8000103AD000203C7FFDC01460013
5212	 35A	PUSH1	E0	 	 
- stack 4: 0x6C4
- stack 3: 0x33
- stack 2: 0x840
- stack 1: 0x34F000003780000012C00330160013402B8000103AD000203C7FFDC01460013
- stack 0: 0xE0
5213	 35C	SHR		 	 
- stack 3: 0x6C4
- stack 2: 0x33
- stack 1: 0x840
- stack 0: 0x34F0000
5214	 35D	PUSH2	FFFF	 	 
- stack 4: 0x6C4
- stack 3: 0x33
- stack 2: 0x840
- stack 1: 0x34F0000
- stack 0: 0xFFFF
5215	 360	AND		 	 
- stack 3: 0x6C4
- stack 2: 0x33
- stack 1: 0x840
- stack 0: 0x0
5216	 361	PUSH1	01	 	 
- stack 4: 0x6C4
- stack 3: 0x33
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x1
5217	 363	SIGNEXTEND		 	 
- stack 3: 0x6C4
- stack 2: 0x33
- stack 1: 0x840
- stack 0: 0x0
5218	 364	ADD		 	 
- stack 2: 0x6C4
- stack 1: 0x33
- stack 0: 0x840
5219	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C4
- stack 2: 0x33
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
5220	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C4
- stack 1: 0x33
- stack 0: 0x840
5221	 36B	PUSH1	03	 	 
- stack 3: 0x6C4
- stack 2: 0x33
- stack 1: 0x840
- stack 0: 0x3
5222	 36D	XOR		 	 
- stack 2: 0x6C4
- stack 1: 0x33
- stack 0: 0x843
5223	 36E	MSTORE8		 	 
- stack 0: 0x6C4
5224	 36F	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
5225	 371	ADD		 	 
- stack 0: 0x6C8
5226	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
5227	 373	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x3780000012C00330160013402B8000103AD000203C7FFDC01460013030C0000
5228	 374	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x3780000012C00330160013402B8000103AD000203C7FFDC01460013030C0000
- stack 0: 0xF0
5229	 376	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x378
5230	 377	JUMP		 	 
- stack 0: 0x6C8
5231	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x6C8
5232	 379	PUSH2	0040	 	 
- stack 1: 0x6C8
- stack 0: 0x40
5233	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x6C8
- stack 0: 0x840
5234	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
5235	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C8
- stack 0: 0x840
5236	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0x6C8
5237	 384	MLOAD		 	 
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0x3780000012C00330160013402B8000103AD000203C7FFDC01460013030C0000
5238	 385	PUSH1	E0	 	 
- stack 3: 0x6C8
- stack 2: 0x840
- stack 1: 0x3780000012C00330160013402B8000103AD000203C7FFDC01460013030C0000
- stack 0: 0xE0
5239	 387	SHR		 	 
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0x3780000
5240	 388	PUSH2	FFFF	 	 
- stack 3: 0x6C8
- stack 2: 0x840
- stack 1: 0x3780000
- stack 0: 0xFFFF
5241	 38B	AND		 	 
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0x0
5242	 38C	PUSH1	01	 	 
- stack 3: 0x6C8
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x1
5243	 38E	SIGNEXTEND		 	 
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0x0
5244	 38F	ADD		 	 
- stack 1: 0x6C8
- stack 0: 0x840
5245	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
5246	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C8
- stack 0: 0x840
5247	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x6C8
- stack 1: 0x840
- stack 0: 0x3
5248	 398	XOR		 	 
- stack 1: 0x6C8
- stack 0: 0x843
5249	 399	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x330AA0ABBB000098780000000000000000000000000000000000000000000000
5250	 39A	PUSH1	F8	 	 
- stack 2: 0x6C8
- stack 1: 0x330AA0ABBB000098780000000000000000000000000000000000000000000000
- stack 0: 0xF8
5251	 39C	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x33
5252	 39D	PUSH1	00	 	 
- stack 2: 0x6C8
- stack 1: 0x33
- stack 0: 0x0
5253	 39F	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x33
5254	 3A0	PUSH2	0060	 	 
- stack 2: 0x6C8
- stack 1: 0x33
- stack 0: 0x60
5255	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x6C8
5256	 3A4	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
5257	 3A6	ADD		 	 
- stack 0: 0x6CC
5258	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
5259	 3A8	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x12C00330160013402B8000103AD000203C7FFDC01460013030C000003400000
5260	 3A9	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x12C00330160013402B8000103AD000203C7FFDC01460013030C000003400000
- stack 0: 0xF0
5261	 3AB	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x12C
5262	 3AC	JUMP		 	 
- stack 0: 0x6CC
5263	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x6CC
5264	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6CC
- stack 0: 0x6CC
5265	 12E	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x12C00330160013402B8000103AD000203C7FFDC01460013030C000003400000
5266	 12F	PUSH1	E0	 	 
- stack 2: 0x6CC
- stack 1: 0x12C00330160013402B8000103AD000203C7FFDC01460013030C000003400000
- stack 0: 0xE0
5267	 131	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x12C0033
5268	 132	PUSH2	FFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x12C0033
- stack 0: 0xFFFF
5269	 135	AND		 	 
- stack 1: 0x6CC
- stack 0: 0x33
5270	 136	PUSH1	01	 	 
- stack 2: 0x6CC
- stack 1: 0x33
- stack 0: 0x1
5271	 138	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0x33
5272	 139	PUSH2	03A0	 	 
- stack 2: 0x6CC
- stack 1: 0x33
- stack 0: 0x3A0
5273	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x6CC
5274	 13D	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
5275	 13F	ADD		 	 
- stack 0: 0x6D0
5276	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
5277	 141	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x160013402B8000103AD000203C7FFDC01460013030C00000340000001B50158
5278	 142	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x160013402B8000103AD000203C7FFDC01460013030C00000340000001B50158
- stack 0: 0xF0
5279	 144	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x160
5280	 145	JUMP		 	 
- stack 0: 0x6D0
5281	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x6D0
5282	 161	PUSH2	0060	 	 
- stack 1: 0x6D0
- stack 0: 0x60
5283	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x6D0
- stack 0: 0x33
5284	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x33
- stack 0: 0xFFFFFFFF
5285	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D0
- stack 0: 0x33
5286	 16B	PUSH2	03A0	 	 
- stack 2: 0x6D0
- stack 1: 0x33
- stack 0: 0x3A0
5287	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x6D0
- stack 1: 0x33
- stack 0: 0x33
5288	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D0
- stack 2: 0x33
- stack 1: 0x33
- stack 0: 0xFFFFFFFF
5289	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D0
- stack 1: 0x33
- stack 0: 0x33
5290	 175	SUB		 	 
- stack 1: 0x6D0
- stack 0: 0x0
5291	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x17E
5292	 179	JUMPI		 	 
- stack 0: 0x6D0
5293	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x6D0
- stack 0: 0x198
5294	 17D	JUMP		 	 
- stack 0: 0x6D0
5295	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x6D0
5296	 199	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
5297	 19B	ADD		 	 
- stack 0: 0x6D4
5298	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
5299	 19D	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x2B8000103AD000203C7FFDC01460013030C00000340000001B5015803260023
5300	 19E	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x2B8000103AD000203C7FFDC01460013030C00000340000001B5015803260023
- stack 0: 0xF0
5301	 1A0	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x2B8
5302	 1A1	JUMP		 	 
- stack 0: 0x6D4
5303	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x6D4
5304	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
5305	 2BA	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x2B8000103AD000203C7FFDC01460013030C00000340000001B5015803260023
5306	 2BB	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0x2B8000103AD000203C7FFDC01460013030C00000340000001B5015803260023
- stack 0: 0xE0
5307	 2BD	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x2B80001
5308	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x2B80001
- stack 0: 0xFFFF
5309	 2C1	AND		 	 
- stack 1: 0x6D4
- stack 0: 0x1
5310	 2C2	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x1
5311	 2C4	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0x1
5312	 2C5	PUSH2	0080	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x80
5313	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x1
5314	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x6D4
- stack 0: 0x2
5315	 2CA	PUSH2	0080	 	 
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0x80
5316	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x6D4
5317	 2CE	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
5318	 2D0	ADD		 	 
- stack 0: 0x6D8
5319	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
5320	 2D2	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x3AD000203C7FFDC01460013030C00000340000001B501580326002304090000
5321	 2D3	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x3AD000203C7FFDC01460013030C00000340000001B501580326002304090000
- stack 0: 0xF0
5322	 2D5	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x3AD
5323	 2D6	JUMP		 	 
- stack 0: 0x6D8
5324	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6D8
5325	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
5326	 3AF	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x3AD000203C7FFDC01460013030C00000340000001B501580326002304090000
5327	 3B0	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x3AD000203C7FFDC01460013030C00000340000001B501580326002304090000
- stack 0: 0xE0
5328	 3B2	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x3AD0002
5329	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
5330	 3B6	AND		 	 
- stack 1: 0x6D8
- stack 0: 0x2
5331	 3B7	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0x1
5332	 3B9	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0x2
5333	 3BA	PUSH2	00A0	 	 
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0xA0
5334	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x6D8
5335	 3BE	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
5336	 3C0	ADD		 	 
- stack 0: 0x6DC
5337	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
5338	 3C2	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3C7FFDC01460013030C00000340000001B501580326002304090000034F0001
5339	 3C3	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x3C7FFDC01460013030C00000340000001B501580326002304090000034F0001
- stack 0: 0xF0
5340	 3C5	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x3C7
5341	 3C6	JUMP		 	 
- stack 0: 0x6DC
5342	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x6DC
5343	 3C8	PUSH2	0080	 	 
- stack 1: 0x6DC
- stack 0: 0x80
5344	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x6DC
- stack 0: 0x2
5345	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5346	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6DC
- stack 0: 0x2
5347	 3D2	PUSH2	00A0	 	 
- stack 2: 0x6DC
- stack 1: 0x2
- stack 0: 0xA0
5348	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x6DC
- stack 1: 0x2
- stack 0: 0x2
5349	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6DC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5350	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6DC
- stack 1: 0x2
- stack 0: 0x2
5351	 3DC	SUB		 	 
- stack 1: 0x6DC
- stack 0: 0x0
5352	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x3E5
5353	 3E0	JUMPI		 	 
- stack 0: 0x6DC
5354	 3E1	PUSH2	03FF	 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 1: 0x6DC
- stack 0: 0x3FF
5355	 3E4	JUMP		 	 
- stack 0: 0x6DC
5356	 3FF	JUMPDEST		 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x6DC
5357	 400	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
5358	 402	ADD		 	 
- stack 0: 0x6E0
5359	 403	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
5360	 404	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x1460013030C00000340000001B501580326002304090000034F000103780001
5361	 405	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x1460013030C00000340000001B501580326002304090000034F000103780001
- stack 0: 0xF0
5362	 407	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x146
5363	 408	JUMP		 	 
- stack 0: 0x6E0
5364	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6E0
5365	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
5366	 148	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x1460013030C00000340000001B501580326002304090000034F000103780001
5367	 149	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x1460013030C00000340000001B501580326002304090000034F000103780001
- stack 0: 0xE0
5368	 14B	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x1460013
5369	 14C	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x1460013
- stack 0: 0xFFFF
5370	 14F	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x13
5371	 150	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x13
- stack 0: 0x1
5372	 152	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x13
5373	 153	PUSH2	0380	 	 
- stack 2: 0x6E0
- stack 1: 0x13
- stack 0: 0x380
5374	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x6E0
5375	 157	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
5376	 159	ADD		 	 
- stack 0: 0x6E4
5377	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
5378	 15B	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x30C00000340000001B501580326002304090000034F000103780001012C0023
5379	 15C	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x30C00000340000001B501580326002304090000034F000103780001012C0023
- stack 0: 0xF0
5380	 15E	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x30C
5381	 15F	JUMP		 	 
- stack 0: 0x6E4
5382	 30C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6E4
5383	 30D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
5384	 30E	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x30C00000340000001B501580326002304090000034F000103780001012C0023
5385	 30F	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x30C00000340000001B501580326002304090000034F000103780001012C0023
- stack 0: 0xE0
5386	 311	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x30C0000
5387	 312	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x30C0000
- stack 0: 0xFFFF
5388	 315	AND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
5389	 316	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x1
5390	 318	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
5391	 319	PUSH2	0080	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x80
5392	 31C	MSTORE		 	  ;; # store to x4
- stack 0: 0x6E4
5393	 31D	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
5394	 31F	ADD		 	 
- stack 0: 0x6E8
5395	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
5396	 321	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x340000001B501580326002304090000034F000103780001012C002301600100
5397	 322	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x340000001B501580326002304090000034F000103780001012C002301600100
- stack 0: 0xF0
5398	 324	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x340
5399	 325	JUMP		 	 
- stack 0: 0x6E8
5400	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x6E8
5401	 341	DUP1		 	 
- stack 1: 0x6E8
- stack 0: 0x6E8
5402	 342	PUSH2	0040	 	 
- stack 2: 0x6E8
- stack 1: 0x6E8
- stack 0: 0x40
5403	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x6E8
5404	 346	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
5405	 348	ADD		 	 
- stack 0: 0x6EC
5406	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
5407	 34A	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x1B501580326002304090000034F000103780001012C00230160010002B80001
5408	 34B	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x1B501580326002304090000034F000103780001012C00230160010002B80001
- stack 0: 0xF0
5409	 34D	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x1B5
5410	 34E	JUMP		 	 
- stack 0: 0x6EC
5411	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x6EC
5412	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
5413	 1B7	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x1B501580326002304090000034F000103780001012C00230160010002B80001
5414	 1B8	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x1B501580326002304090000034F000103780001012C00230160010002B80001
- stack 0: 0xE0
5415	 1BA	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x1B50158
5416	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x1B50158
- stack 0: 0xFFFF
5417	 1BE	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x158
5418	 1BF	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x158
- stack 0: 0x1
5419	 1C1	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x158
5420	 1C2	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0x158
- stack 0: 0x40
5421	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x6EC
- stack 1: 0x158
- stack 0: 0x6E8
5422	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x6EC
- stack 0: 0x840
5423	 1C7	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0x840
- stack 0: 0x40
5424	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x6EC
5425	 1CB	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
5426	 1CD	ADD		 	 
- stack 0: 0x6F0
5427	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
5428	 1CF	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x326002304090000034F000103780001012C00230160010002B8000103AD0002
5429	 1D0	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x326002304090000034F000103780001012C00230160010002B8000103AD0002
- stack 0: 0xF0
5430	 1D2	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x326
5431	 1D3	JUMP		 	 
- stack 0: 0x6F0
5432	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x6F0
5433	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
5434	 328	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x326002304090000034F000103780001012C00230160010002B8000103AD0002
5435	 329	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x326002304090000034F000103780001012C00230160010002B8000103AD0002
- stack 0: 0xE0
5436	 32B	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x3260023
5437	 32C	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x3260023
- stack 0: 0xFFFF
5438	 32F	AND		 	 
- stack 1: 0x6F0
- stack 0: 0x23
5439	 330	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0x23
- stack 0: 0x1
5440	 332	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0x23
5441	 333	PUSH2	0020	 	 
- stack 2: 0x6F0
- stack 1: 0x23
- stack 0: 0x20
5442	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x6F0
5443	 337	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
5444	 339	ADD		 	 
- stack 0: 0x6F4
5445	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
5446	 33B	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x4090000034F000103780001012C00230160010002B8000103AD000203C7FFD8
5447	 33C	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x4090000034F000103780001012C00230160010002B8000103AD000203C7FFD8
- stack 0: 0xF0
5448	 33E	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x409
5449	 33F	JUMP		 	 
- stack 0: 0x6F4
5450	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6F4
5451	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
5452	 40B	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x4090000034F000103780001012C00230160010002B8000103AD000203C7FFD8
5453	 40C	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x4090000034F000103780001012C00230160010002B8000103AD000203C7FFD8
- stack 0: 0xE0
5454	 40E	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x4090000
5455	 40F	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x4090000
- stack 0: 0xFFFF
5456	 412	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x0
5457	 413	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x0
- stack 0: 0x1
5458	 415	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x0
5459	 416	POP		 	 
- stack 0: 0x6F4
5460	 417	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
5461	 419	ADD		 	 
- stack 0: 0x6F8
5462	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
5463	 41B	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x34F000103780001012C00230160010002B8000103AD000203C7FFD801460014
5464	 41C	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x34F000103780001012C00230160010002B8000103AD000203C7FFD801460014
- stack 0: 0xF0
5465	 41E	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x34F
5466	 41F	JUMP		 	 
- stack 0: 0x6F8
5467	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x6F8
5468	 350	PUSH2	0020	 	 
- stack 1: 0x6F8
- stack 0: 0x20
5469	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x6F8
- stack 0: 0x23
5470	 354	PUSH2	0040	 	 
- stack 2: 0x6F8
- stack 1: 0x23
- stack 0: 0x40
5471	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x6F8
- stack 1: 0x23
- stack 0: 0x840
5472	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x6F8
- stack 2: 0x23
- stack 1: 0x840
- stack 0: 0x6F8
5473	 359	MLOAD		 	 
- stack 3: 0x6F8
- stack 2: 0x23
- stack 1: 0x840
- stack 0: 0x34F000103780001012C00230160010002B8000103AD000203C7FFD801460014
5474	 35A	PUSH1	E0	 	 
- stack 4: 0x6F8
- stack 3: 0x23
- stack 2: 0x840
- stack 1: 0x34F000103780001012C00230160010002B8000103AD000203C7FFD801460014
- stack 0: 0xE0
5475	 35C	SHR		 	 
- stack 3: 0x6F8
- stack 2: 0x23
- stack 1: 0x840
- stack 0: 0x34F0001
5476	 35D	PUSH2	FFFF	 	 
- stack 4: 0x6F8
- stack 3: 0x23
- stack 2: 0x840
- stack 1: 0x34F0001
- stack 0: 0xFFFF
5477	 360	AND		 	 
- stack 3: 0x6F8
- stack 2: 0x23
- stack 1: 0x840
- stack 0: 0x1
5478	 361	PUSH1	01	 	 
- stack 4: 0x6F8
- stack 3: 0x23
- stack 2: 0x840
- stack 1: 0x1
- stack 0: 0x1
5479	 363	SIGNEXTEND		 	 
- stack 3: 0x6F8
- stack 2: 0x23
- stack 1: 0x840
- stack 0: 0x1
5480	 364	ADD		 	 
- stack 2: 0x6F8
- stack 1: 0x23
- stack 0: 0x841
5481	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6F8
- stack 2: 0x23
- stack 1: 0x841
- stack 0: 0xFFFFFFFF
5482	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6F8
- stack 1: 0x23
- stack 0: 0x841
5483	 36B	PUSH1	03	 	 
- stack 3: 0x6F8
- stack 2: 0x23
- stack 1: 0x841
- stack 0: 0x3
5484	 36D	XOR		 	 
- stack 2: 0x6F8
- stack 1: 0x23
- stack 0: 0x842
5485	 36E	MSTORE8		 	 
- stack 0: 0x6F8
5486	 36F	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
5487	 371	ADD		 	 
- stack 0: 0x6FC
5488	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
5489	 373	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x3780001012C00230160010002B8000103AD000203C7FFD801460014030C0000
5490	 374	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x3780001012C00230160010002B8000103AD000203C7FFD801460014030C0000
- stack 0: 0xF0
5491	 376	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x378
5492	 377	JUMP		 	 
- stack 0: 0x6FC
5493	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x6FC
5494	 379	PUSH2	0040	 	 
- stack 1: 0x6FC
- stack 0: 0x40
5495	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x6FC
- stack 0: 0x840
5496	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
5497	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6FC
- stack 0: 0x840
5498	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6FC
- stack 1: 0x840
- stack 0: 0x6FC
5499	 384	MLOAD		 	 
- stack 2: 0x6FC
- stack 1: 0x840
- stack 0: 0x3780001012C00230160010002B8000103AD000203C7FFD801460014030C0000
5500	 385	PUSH1	E0	 	 
- stack 3: 0x6FC
- stack 2: 0x840
- stack 1: 0x3780001012C00230160010002B8000103AD000203C7FFD801460014030C0000
- stack 0: 0xE0
5501	 387	SHR		 	 
- stack 2: 0x6FC
- stack 1: 0x840
- stack 0: 0x3780001
5502	 388	PUSH2	FFFF	 	 
- stack 3: 0x6FC
- stack 2: 0x840
- stack 1: 0x3780001
- stack 0: 0xFFFF
5503	 38B	AND		 	 
- stack 2: 0x6FC
- stack 1: 0x840
- stack 0: 0x1
5504	 38C	PUSH1	01	 	 
- stack 3: 0x6FC
- stack 2: 0x840
- stack 1: 0x1
- stack 0: 0x1
5505	 38E	SIGNEXTEND		 	 
- stack 2: 0x6FC
- stack 1: 0x840
- stack 0: 0x1
5506	 38F	ADD		 	 
- stack 1: 0x6FC
- stack 0: 0x841
5507	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x841
- stack 0: 0xFFFFFFFF
5508	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6FC
- stack 0: 0x841
5509	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x6FC
- stack 1: 0x841
- stack 0: 0x3
5510	 398	XOR		 	 
- stack 1: 0x6FC
- stack 0: 0x842
5511	 399	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x23330AA0ABBB0000987800000000000000000000000000000000000000000000
5512	 39A	PUSH1	F8	 	 
- stack 2: 0x6FC
- stack 1: 0x23330AA0ABBB0000987800000000000000000000000000000000000000000000
- stack 0: 0xF8
5513	 39C	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x23
5514	 39D	PUSH1	00	 	 
- stack 2: 0x6FC
- stack 1: 0x23
- stack 0: 0x0
5515	 39F	SIGNEXTEND		 	 
- stack 1: 0x6FC
- stack 0: 0x23
5516	 3A0	PUSH2	0060	 	 
- stack 2: 0x6FC
- stack 1: 0x23
- stack 0: 0x60
5517	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x6FC
5518	 3A4	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
5519	 3A6	ADD		 	 
- stack 0: 0x700
5520	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
5521	 3A8	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x12C00230160010002B8000103AD000203C7FFD801460014030C000003400000
5522	 3A9	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x12C00230160010002B8000103AD000203C7FFD801460014030C000003400000
- stack 0: 0xF0
5523	 3AB	SHR		 	 
- stack 1: 0x700
- stack 0: 0x12C
5524	 3AC	JUMP		 	 
- stack 0: 0x700
5525	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x700
5526	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x700
- stack 0: 0x700
5527	 12E	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x12C00230160010002B8000103AD000203C7FFD801460014030C000003400000
5528	 12F	PUSH1	E0	 	 
- stack 2: 0x700
- stack 1: 0x12C00230160010002B8000103AD000203C7FFD801460014030C000003400000
- stack 0: 0xE0
5529	 131	SHR		 	 
- stack 1: 0x700
- stack 0: 0x12C0023
5530	 132	PUSH2	FFFF	 	 
- stack 2: 0x700
- stack 1: 0x12C0023
- stack 0: 0xFFFF
5531	 135	AND		 	 
- stack 1: 0x700
- stack 0: 0x23
5532	 136	PUSH1	01	 	 
- stack 2: 0x700
- stack 1: 0x23
- stack 0: 0x1
5533	 138	SIGNEXTEND		 	 
- stack 1: 0x700
- stack 0: 0x23
5534	 139	PUSH2	03A0	 	 
- stack 2: 0x700
- stack 1: 0x23
- stack 0: 0x3A0
5535	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x700
5536	 13D	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
5537	 13F	ADD		 	 
- stack 0: 0x704
5538	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
5539	 141	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x160010002B8000103AD000203C7FFD801460014030C00000340000001B50124
5540	 142	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x160010002B8000103AD000203C7FFD801460014030C00000340000001B50124
- stack 0: 0xF0
5541	 144	SHR		 	 
- stack 1: 0x704
- stack 0: 0x160
5542	 145	JUMP		 	 
- stack 0: 0x704
5543	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x704
5544	 161	PUSH2	0060	 	 
- stack 1: 0x704
- stack 0: 0x60
5545	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x704
- stack 0: 0x23
5546	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x704
- stack 1: 0x23
- stack 0: 0xFFFFFFFF
5547	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x704
- stack 0: 0x23
5548	 16B	PUSH2	03A0	 	 
- stack 2: 0x704
- stack 1: 0x23
- stack 0: 0x3A0
5549	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x704
- stack 1: 0x23
- stack 0: 0x23
5550	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x704
- stack 2: 0x23
- stack 1: 0x23
- stack 0: 0xFFFFFFFF
5551	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x704
- stack 1: 0x23
- stack 0: 0x23
5552	 175	SUB		 	 
- stack 1: 0x704
- stack 0: 0x0
5553	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x704
- stack 1: 0x0
- stack 0: 0x17E
5554	 179	JUMPI		 	 
- stack 0: 0x704
5555	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x704
- stack 0: 0x198
5556	 17D	JUMP		 	 
- stack 0: 0x704
5557	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x704
5558	 199	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
5559	 19B	ADD		 	 
- stack 0: 0x708
5560	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
5561	 19D	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x2B8000103AD000203C7FFD801460014030C00000340000001B5012403260022
5562	 19E	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x2B8000103AD000203C7FFD801460014030C00000340000001B5012403260022
- stack 0: 0xF0
5563	 1A0	SHR		 	 
- stack 1: 0x708
- stack 0: 0x2B8
5564	 1A1	JUMP		 	 
- stack 0: 0x708
5565	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x708
5566	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x708
- stack 0: 0x708
5567	 2BA	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x2B8000103AD000203C7FFD801460014030C00000340000001B5012403260022
5568	 2BB	PUSH1	E0	 	 
- stack 2: 0x708
- stack 1: 0x2B8000103AD000203C7FFD801460014030C00000340000001B5012403260022
- stack 0: 0xE0
5569	 2BD	SHR		 	 
- stack 1: 0x708
- stack 0: 0x2B80001
5570	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x708
- stack 1: 0x2B80001
- stack 0: 0xFFFF
5571	 2C1	AND		 	 
- stack 1: 0x708
- stack 0: 0x1
5572	 2C2	PUSH1	01	 	 
- stack 2: 0x708
- stack 1: 0x1
- stack 0: 0x1
5573	 2C4	SIGNEXTEND		 	 
- stack 1: 0x708
- stack 0: 0x1
5574	 2C5	PUSH2	0080	 	 
- stack 2: 0x708
- stack 1: 0x1
- stack 0: 0x80
5575	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x708
- stack 1: 0x1
- stack 0: 0x0
5576	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x708
- stack 0: 0x1
5577	 2CA	PUSH2	0080	 	 
- stack 2: 0x708
- stack 1: 0x1
- stack 0: 0x80
5578	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x708
5579	 2CE	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
5580	 2D0	ADD		 	 
- stack 0: 0x70C
5581	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
5582	 2D2	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x3AD000203C7FFD801460014030C00000340000001B501240326002204090000
5583	 2D3	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0x3AD000203C7FFD801460014030C00000340000001B501240326002204090000
- stack 0: 0xF0
5584	 2D5	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x3AD
5585	 2D6	JUMP		 	 
- stack 0: 0x70C
5586	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x70C
5587	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
5588	 3AF	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x3AD000203C7FFD801460014030C00000340000001B501240326002204090000
5589	 3B0	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0x3AD000203C7FFD801460014030C00000340000001B501240326002204090000
- stack 0: 0xE0
5590	 3B2	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x3AD0002
5591	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
5592	 3B6	AND		 	 
- stack 1: 0x70C
- stack 0: 0x2
5593	 3B7	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0x2
- stack 0: 0x1
5594	 3B9	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0x2
5595	 3BA	PUSH2	00A0	 	 
- stack 2: 0x70C
- stack 1: 0x2
- stack 0: 0xA0
5596	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x70C
5597	 3BE	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
5598	 3C0	ADD		 	 
- stack 0: 0x710
5599	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
5600	 3C2	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x3C7FFD801460014030C00000340000001B50124032600220409000004090000
5601	 3C3	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0x3C7FFD801460014030C00000340000001B50124032600220409000004090000
- stack 0: 0xF0
5602	 3C5	SHR		 	 
- stack 1: 0x710
- stack 0: 0x3C7
5603	 3C6	JUMP		 	 
- stack 0: 0x710
5604	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x710
5605	 3C8	PUSH2	0080	 	 
- stack 1: 0x710
- stack 0: 0x80
5606	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x710
- stack 0: 0x1
5607	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5608	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x710
- stack 0: 0x1
5609	 3D2	PUSH2	00A0	 	 
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0xA0
5610	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0x2
5611	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x710
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5612	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0x2
5613	 3DC	SUB		 	 
- stack 1: 0x710
- stack 0: 0x1
5614	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0x3E5
5615	 3E0	JUMPI		 	 
- stack 0: 0x710
5616	 3E5	JUMPDEST		 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x710
5617	 3E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x710
- stack 0: 0x710
5618	 3E7	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x3C7FFD801460014030C00000340000001B50124032600220409000004090000
5619	 3E8	PUSH1	E0	 	 
- stack 2: 0x710
- stack 1: 0x3C7FFD801460014030C00000340000001B50124032600220409000004090000
- stack 0: 0xE0
5620	 3EA	SHR		 	 
- stack 1: 0x710
- stack 0: 0x3C7FFD8
5621	 3EB	PUSH2	FFFF	 	 
- stack 2: 0x710
- stack 1: 0x3C7FFD8
- stack 0: 0xFFFF
5622	 3EE	AND		 	 
- stack 1: 0x710
- stack 0: 0xFFD8
5623	 3EF	PUSH1	01	 	 
- stack 2: 0x710
- stack 1: 0xFFD8
- stack 0: 0x1
5624	 3F1	SIGNEXTEND		 	 
- stack 1: 0x710
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
5625	 3F2	ADD		 	 
- stack 0: 0x6E8
5626	 3F3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFF
5627	 3F8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6E8
5628	 3F9	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
5629	 3FA	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x340000001B501580326002304090000034F000103780001012C002301600100
5630	 3FB	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x340000001B501580326002304090000034F000103780001012C002301600100
- stack 0: 0xF0
5631	 3FD	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x340
5632	 3FE	JUMP		 	 
- stack 0: 0x6E8
5633	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x6E8
5634	 341	DUP1		 	 
- stack 1: 0x6E8
- stack 0: 0x6E8
5635	 342	PUSH2	0040	 	 
- stack 2: 0x6E8
- stack 1: 0x6E8
- stack 0: 0x40
5636	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x6E8
5637	 346	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
5638	 348	ADD		 	 
- stack 0: 0x6EC
5639	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
5640	 34A	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x1B501580326002304090000034F000103780001012C00230160010002B80001
5641	 34B	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x1B501580326002304090000034F000103780001012C00230160010002B80001
- stack 0: 0xF0
5642	 34D	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x1B5
5643	 34E	JUMP		 	 
- stack 0: 0x6EC
5644	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x6EC
5645	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
5646	 1B7	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x1B501580326002304090000034F000103780001012C00230160010002B80001
5647	 1B8	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x1B501580326002304090000034F000103780001012C00230160010002B80001
- stack 0: 0xE0
5648	 1BA	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x1B50158
5649	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x1B50158
- stack 0: 0xFFFF
5650	 1BE	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x158
5651	 1BF	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x158
- stack 0: 0x1
5652	 1C1	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x158
5653	 1C2	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0x158
- stack 0: 0x40
5654	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x6EC
- stack 1: 0x158
- stack 0: 0x6E8
5655	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x6EC
- stack 0: 0x840
5656	 1C7	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0x840
- stack 0: 0x40
5657	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x6EC
5658	 1CB	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
5659	 1CD	ADD		 	 
- stack 0: 0x6F0
5660	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
5661	 1CF	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x326002304090000034F000103780001012C00230160010002B8000103AD0002
5662	 1D0	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x326002304090000034F000103780001012C00230160010002B8000103AD0002
- stack 0: 0xF0
5663	 1D2	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x326
5664	 1D3	JUMP		 	 
- stack 0: 0x6F0
5665	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x6F0
5666	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
5667	 328	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x326002304090000034F000103780001012C00230160010002B8000103AD0002
5668	 329	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x326002304090000034F000103780001012C00230160010002B8000103AD0002
- stack 0: 0xE0
5669	 32B	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x3260023
5670	 32C	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x3260023
- stack 0: 0xFFFF
5671	 32F	AND		 	 
- stack 1: 0x6F0
- stack 0: 0x23
5672	 330	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0x23
- stack 0: 0x1
5673	 332	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0x23
5674	 333	PUSH2	0020	 	 
- stack 2: 0x6F0
- stack 1: 0x23
- stack 0: 0x20
5675	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x6F0
5676	 337	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
5677	 339	ADD		 	 
- stack 0: 0x6F4
5678	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
5679	 33B	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x4090000034F000103780001012C00230160010002B8000103AD000203C7FFD8
5680	 33C	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x4090000034F000103780001012C00230160010002B8000103AD000203C7FFD8
- stack 0: 0xF0
5681	 33E	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x409
5682	 33F	JUMP		 	 
- stack 0: 0x6F4
5683	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6F4
5684	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
5685	 40B	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x4090000034F000103780001012C00230160010002B8000103AD000203C7FFD8
5686	 40C	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x4090000034F000103780001012C00230160010002B8000103AD000203C7FFD8
- stack 0: 0xE0
5687	 40E	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x4090000
5688	 40F	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x4090000
- stack 0: 0xFFFF
5689	 412	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x0
5690	 413	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x0
- stack 0: 0x1
5691	 415	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x0
5692	 416	POP		 	 
- stack 0: 0x6F4
5693	 417	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
5694	 419	ADD		 	 
- stack 0: 0x6F8
5695	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
5696	 41B	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x34F000103780001012C00230160010002B8000103AD000203C7FFD801460014
5697	 41C	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x34F000103780001012C00230160010002B8000103AD000203C7FFD801460014
- stack 0: 0xF0
5698	 41E	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x34F
5699	 41F	JUMP		 	 
- stack 0: 0x6F8
5700	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x6F8
5701	 350	PUSH2	0020	 	 
- stack 1: 0x6F8
- stack 0: 0x20
5702	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x6F8
- stack 0: 0x23
5703	 354	PUSH2	0040	 	 
- stack 2: 0x6F8
- stack 1: 0x23
- stack 0: 0x40
5704	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x6F8
- stack 1: 0x23
- stack 0: 0x840
5705	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x6F8
- stack 2: 0x23
- stack 1: 0x840
- stack 0: 0x6F8
5706	 359	MLOAD		 	 
- stack 3: 0x6F8
- stack 2: 0x23
- stack 1: 0x840
- stack 0: 0x34F000103780001012C00230160010002B8000103AD000203C7FFD801460014
5707	 35A	PUSH1	E0	 	 
- stack 4: 0x6F8
- stack 3: 0x23
- stack 2: 0x840
- stack 1: 0x34F000103780001012C00230160010002B8000103AD000203C7FFD801460014
- stack 0: 0xE0
5708	 35C	SHR		 	 
- stack 3: 0x6F8
- stack 2: 0x23
- stack 1: 0x840
- stack 0: 0x34F0001
5709	 35D	PUSH2	FFFF	 	 
- stack 4: 0x6F8
- stack 3: 0x23
- stack 2: 0x840
- stack 1: 0x34F0001
- stack 0: 0xFFFF
5710	 360	AND		 	 
- stack 3: 0x6F8
- stack 2: 0x23
- stack 1: 0x840
- stack 0: 0x1
5711	 361	PUSH1	01	 	 
- stack 4: 0x6F8
- stack 3: 0x23
- stack 2: 0x840
- stack 1: 0x1
- stack 0: 0x1
5712	 363	SIGNEXTEND		 	 
- stack 3: 0x6F8
- stack 2: 0x23
- stack 1: 0x840
- stack 0: 0x1
5713	 364	ADD		 	 
- stack 2: 0x6F8
- stack 1: 0x23
- stack 0: 0x841
5714	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6F8
- stack 2: 0x23
- stack 1: 0x841
- stack 0: 0xFFFFFFFF
5715	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6F8
- stack 1: 0x23
- stack 0: 0x841
5716	 36B	PUSH1	03	 	 
- stack 3: 0x6F8
- stack 2: 0x23
- stack 1: 0x841
- stack 0: 0x3
5717	 36D	XOR		 	 
- stack 2: 0x6F8
- stack 1: 0x23
- stack 0: 0x842
5718	 36E	MSTORE8		 	 
- stack 0: 0x6F8
5719	 36F	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
5720	 371	ADD		 	 
- stack 0: 0x6FC
5721	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
5722	 373	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x3780001012C00230160010002B8000103AD000203C7FFD801460014030C0000
5723	 374	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x3780001012C00230160010002B8000103AD000203C7FFD801460014030C0000
- stack 0: 0xF0
5724	 376	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x378
5725	 377	JUMP		 	 
- stack 0: 0x6FC
5726	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x6FC
5727	 379	PUSH2	0040	 	 
- stack 1: 0x6FC
- stack 0: 0x40
5728	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x6FC
- stack 0: 0x840
5729	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
5730	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6FC
- stack 0: 0x840
5731	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6FC
- stack 1: 0x840
- stack 0: 0x6FC
5732	 384	MLOAD		 	 
- stack 2: 0x6FC
- stack 1: 0x840
- stack 0: 0x3780001012C00230160010002B8000103AD000203C7FFD801460014030C0000
5733	 385	PUSH1	E0	 	 
- stack 3: 0x6FC
- stack 2: 0x840
- stack 1: 0x3780001012C00230160010002B8000103AD000203C7FFD801460014030C0000
- stack 0: 0xE0
5734	 387	SHR		 	 
- stack 2: 0x6FC
- stack 1: 0x840
- stack 0: 0x3780001
5735	 388	PUSH2	FFFF	 	 
- stack 3: 0x6FC
- stack 2: 0x840
- stack 1: 0x3780001
- stack 0: 0xFFFF
5736	 38B	AND		 	 
- stack 2: 0x6FC
- stack 1: 0x840
- stack 0: 0x1
5737	 38C	PUSH1	01	 	 
- stack 3: 0x6FC
- stack 2: 0x840
- stack 1: 0x1
- stack 0: 0x1
5738	 38E	SIGNEXTEND		 	 
- stack 2: 0x6FC
- stack 1: 0x840
- stack 0: 0x1
5739	 38F	ADD		 	 
- stack 1: 0x6FC
- stack 0: 0x841
5740	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x841
- stack 0: 0xFFFFFFFF
5741	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6FC
- stack 0: 0x841
5742	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x6FC
- stack 1: 0x841
- stack 0: 0x3
5743	 398	XOR		 	 
- stack 1: 0x6FC
- stack 0: 0x842
5744	 399	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x23330AA0ABBB0000987800000000000000000000000000000000000000000000
5745	 39A	PUSH1	F8	 	 
- stack 2: 0x6FC
- stack 1: 0x23330AA0ABBB0000987800000000000000000000000000000000000000000000
- stack 0: 0xF8
5746	 39C	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x23
5747	 39D	PUSH1	00	 	 
- stack 2: 0x6FC
- stack 1: 0x23
- stack 0: 0x0
5748	 39F	SIGNEXTEND		 	 
- stack 1: 0x6FC
- stack 0: 0x23
5749	 3A0	PUSH2	0060	 	 
- stack 2: 0x6FC
- stack 1: 0x23
- stack 0: 0x60
5750	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x6FC
5751	 3A4	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
5752	 3A6	ADD		 	 
- stack 0: 0x700
5753	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
5754	 3A8	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x12C00230160010002B8000103AD000203C7FFD801460014030C000003400000
5755	 3A9	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x12C00230160010002B8000103AD000203C7FFD801460014030C000003400000
- stack 0: 0xF0
5756	 3AB	SHR		 	 
- stack 1: 0x700
- stack 0: 0x12C
5757	 3AC	JUMP		 	 
- stack 0: 0x700
5758	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x700
5759	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x700
- stack 0: 0x700
5760	 12E	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x12C00230160010002B8000103AD000203C7FFD801460014030C000003400000
5761	 12F	PUSH1	E0	 	 
- stack 2: 0x700
- stack 1: 0x12C00230160010002B8000103AD000203C7FFD801460014030C000003400000
- stack 0: 0xE0
5762	 131	SHR		 	 
- stack 1: 0x700
- stack 0: 0x12C0023
5763	 132	PUSH2	FFFF	 	 
- stack 2: 0x700
- stack 1: 0x12C0023
- stack 0: 0xFFFF
5764	 135	AND		 	 
- stack 1: 0x700
- stack 0: 0x23
5765	 136	PUSH1	01	 	 
- stack 2: 0x700
- stack 1: 0x23
- stack 0: 0x1
5766	 138	SIGNEXTEND		 	 
- stack 1: 0x700
- stack 0: 0x23
5767	 139	PUSH2	03A0	 	 
- stack 2: 0x700
- stack 1: 0x23
- stack 0: 0x3A0
5768	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x700
5769	 13D	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
5770	 13F	ADD		 	 
- stack 0: 0x704
5771	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
5772	 141	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x160010002B8000103AD000203C7FFD801460014030C00000340000001B50124
5773	 142	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x160010002B8000103AD000203C7FFD801460014030C00000340000001B50124
- stack 0: 0xF0
5774	 144	SHR		 	 
- stack 1: 0x704
- stack 0: 0x160
5775	 145	JUMP		 	 
- stack 0: 0x704
5776	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x704
5777	 161	PUSH2	0060	 	 
- stack 1: 0x704
- stack 0: 0x60
5778	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x704
- stack 0: 0x23
5779	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x704
- stack 1: 0x23
- stack 0: 0xFFFFFFFF
5780	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x704
- stack 0: 0x23
5781	 16B	PUSH2	03A0	 	 
- stack 2: 0x704
- stack 1: 0x23
- stack 0: 0x3A0
5782	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x704
- stack 1: 0x23
- stack 0: 0x23
5783	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x704
- stack 2: 0x23
- stack 1: 0x23
- stack 0: 0xFFFFFFFF
5784	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x704
- stack 1: 0x23
- stack 0: 0x23
5785	 175	SUB		 	 
- stack 1: 0x704
- stack 0: 0x0
5786	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x704
- stack 1: 0x0
- stack 0: 0x17E
5787	 179	JUMPI		 	 
- stack 0: 0x704
5788	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x704
- stack 0: 0x198
5789	 17D	JUMP		 	 
- stack 0: 0x704
5790	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x704
5791	 199	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
5792	 19B	ADD		 	 
- stack 0: 0x708
5793	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
5794	 19D	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x2B8000103AD000203C7FFD801460014030C00000340000001B5012403260022
5795	 19E	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x2B8000103AD000203C7FFD801460014030C00000340000001B5012403260022
- stack 0: 0xF0
5796	 1A0	SHR		 	 
- stack 1: 0x708
- stack 0: 0x2B8
5797	 1A1	JUMP		 	 
- stack 0: 0x708
5798	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x708
5799	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x708
- stack 0: 0x708
5800	 2BA	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x2B8000103AD000203C7FFD801460014030C00000340000001B5012403260022
5801	 2BB	PUSH1	E0	 	 
- stack 2: 0x708
- stack 1: 0x2B8000103AD000203C7FFD801460014030C00000340000001B5012403260022
- stack 0: 0xE0
5802	 2BD	SHR		 	 
- stack 1: 0x708
- stack 0: 0x2B80001
5803	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x708
- stack 1: 0x2B80001
- stack 0: 0xFFFF
5804	 2C1	AND		 	 
- stack 1: 0x708
- stack 0: 0x1
5805	 2C2	PUSH1	01	 	 
- stack 2: 0x708
- stack 1: 0x1
- stack 0: 0x1
5806	 2C4	SIGNEXTEND		 	 
- stack 1: 0x708
- stack 0: 0x1
5807	 2C5	PUSH2	0080	 	 
- stack 2: 0x708
- stack 1: 0x1
- stack 0: 0x80
5808	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x708
- stack 1: 0x1
- stack 0: 0x1
5809	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x708
- stack 0: 0x2
5810	 2CA	PUSH2	0080	 	 
- stack 2: 0x708
- stack 1: 0x2
- stack 0: 0x80
5811	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x708
5812	 2CE	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
5813	 2D0	ADD		 	 
- stack 0: 0x70C
5814	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
5815	 2D2	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x3AD000203C7FFD801460014030C00000340000001B501240326002204090000
5816	 2D3	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0x3AD000203C7FFD801460014030C00000340000001B501240326002204090000
- stack 0: 0xF0
5817	 2D5	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x3AD
5818	 2D6	JUMP		 	 
- stack 0: 0x70C
5819	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x70C
5820	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
5821	 3AF	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x3AD000203C7FFD801460014030C00000340000001B501240326002204090000
5822	 3B0	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0x3AD000203C7FFD801460014030C00000340000001B501240326002204090000
- stack 0: 0xE0
5823	 3B2	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x3AD0002
5824	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
5825	 3B6	AND		 	 
- stack 1: 0x70C
- stack 0: 0x2
5826	 3B7	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0x2
- stack 0: 0x1
5827	 3B9	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0x2
5828	 3BA	PUSH2	00A0	 	 
- stack 2: 0x70C
- stack 1: 0x2
- stack 0: 0xA0
5829	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x70C
5830	 3BE	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
5831	 3C0	ADD		 	 
- stack 0: 0x710
5832	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
5833	 3C2	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x3C7FFD801460014030C00000340000001B50124032600220409000004090000
5834	 3C3	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0x3C7FFD801460014030C00000340000001B50124032600220409000004090000
- stack 0: 0xF0
5835	 3C5	SHR		 	 
- stack 1: 0x710
- stack 0: 0x3C7
5836	 3C6	JUMP		 	 
- stack 0: 0x710
5837	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x710
5838	 3C8	PUSH2	0080	 	 
- stack 1: 0x710
- stack 0: 0x80
5839	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x710
- stack 0: 0x2
5840	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x710
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5841	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x710
- stack 0: 0x2
5842	 3D2	PUSH2	00A0	 	 
- stack 2: 0x710
- stack 1: 0x2
- stack 0: 0xA0
5843	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x710
- stack 1: 0x2
- stack 0: 0x2
5844	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x710
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5845	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x710
- stack 1: 0x2
- stack 0: 0x2
5846	 3DC	SUB		 	 
- stack 1: 0x710
- stack 0: 0x0
5847	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x710
- stack 1: 0x0
- stack 0: 0x3E5
5848	 3E0	JUMPI		 	 
- stack 0: 0x710
5849	 3E1	PUSH2	03FF	 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 1: 0x710
- stack 0: 0x3FF
5850	 3E4	JUMP		 	 
- stack 0: 0x710
5851	 3FF	JUMPDEST		 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x710
5852	 400	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
5853	 402	ADD		 	 
- stack 0: 0x714
5854	 403	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
5855	 404	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x1460014030C00000340000001B50124032600220409000004090000034F0002
5856	 405	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x1460014030C00000340000001B50124032600220409000004090000034F0002
- stack 0: 0xF0
5857	 407	SHR		 	 
- stack 1: 0x714
- stack 0: 0x146
5858	 408	JUMP		 	 
- stack 0: 0x714
5859	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x714
5860	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
5861	 148	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x1460014030C00000340000001B50124032600220409000004090000034F0002
5862	 149	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x1460014030C00000340000001B50124032600220409000004090000034F0002
- stack 0: 0xE0
5863	 14B	SHR		 	 
- stack 1: 0x714
- stack 0: 0x1460014
5864	 14C	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x1460014
- stack 0: 0xFFFF
5865	 14F	AND		 	 
- stack 1: 0x714
- stack 0: 0x14
5866	 150	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0x14
- stack 0: 0x1
5867	 152	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0x14
5868	 153	PUSH2	0380	 	 
- stack 2: 0x714
- stack 1: 0x14
- stack 0: 0x380
5869	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x714
5870	 157	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
5871	 159	ADD		 	 
- stack 0: 0x718
5872	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
5873	 15B	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x30C00000340000001B50124032600220409000004090000034F000203780002
5874	 15C	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x30C00000340000001B50124032600220409000004090000034F000203780002
- stack 0: 0xF0
5875	 15E	SHR		 	 
- stack 1: 0x718
- stack 0: 0x30C
5876	 15F	JUMP		 	 
- stack 0: 0x718
5877	 30C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x718
5878	 30D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
5879	 30E	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x30C00000340000001B50124032600220409000004090000034F000203780002
5880	 30F	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x30C00000340000001B50124032600220409000004090000034F000203780002
- stack 0: 0xE0
5881	 311	SHR		 	 
- stack 1: 0x718
- stack 0: 0x30C0000
5882	 312	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x30C0000
- stack 0: 0xFFFF
5883	 315	AND		 	 
- stack 1: 0x718
- stack 0: 0x0
5884	 316	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x0
- stack 0: 0x1
5885	 318	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x0
5886	 319	PUSH2	0080	 	 
- stack 2: 0x718
- stack 1: 0x0
- stack 0: 0x80
5887	 31C	MSTORE		 	  ;; # store to x4
- stack 0: 0x718
5888	 31D	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
5889	 31F	ADD		 	 
- stack 0: 0x71C
5890	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
5891	 321	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x340000001B50124032600220409000004090000034F000203780002012C0022
5892	 322	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x340000001B50124032600220409000004090000034F000203780002012C0022
- stack 0: 0xF0
5893	 324	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x340
5894	 325	JUMP		 	 
- stack 0: 0x71C
5895	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x71C
5896	 341	DUP1		 	 
- stack 1: 0x71C
- stack 0: 0x71C
5897	 342	PUSH2	0040	 	 
- stack 2: 0x71C
- stack 1: 0x71C
- stack 0: 0x40
5898	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x71C
5899	 346	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
5900	 348	ADD		 	 
- stack 0: 0x720
5901	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
5902	 34A	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x1B50124032600220409000004090000034F000203780002012C0022016000C8
5903	 34B	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0x1B50124032600220409000004090000034F000203780002012C0022016000C8
- stack 0: 0xF0
5904	 34D	SHR		 	 
- stack 1: 0x720
- stack 0: 0x1B5
5905	 34E	JUMP		 	 
- stack 0: 0x720
5906	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x720
5907	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x720
- stack 0: 0x720
5908	 1B7	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x1B50124032600220409000004090000034F000203780002012C0022016000C8
5909	 1B8	PUSH1	E0	 	 
- stack 2: 0x720
- stack 1: 0x1B50124032600220409000004090000034F000203780002012C0022016000C8
- stack 0: 0xE0
5910	 1BA	SHR		 	 
- stack 1: 0x720
- stack 0: 0x1B50124
5911	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x720
- stack 1: 0x1B50124
- stack 0: 0xFFFF
5912	 1BE	AND		 	 
- stack 1: 0x720
- stack 0: 0x124
5913	 1BF	PUSH1	01	 	 
- stack 2: 0x720
- stack 1: 0x124
- stack 0: 0x1
5914	 1C1	SIGNEXTEND		 	 
- stack 1: 0x720
- stack 0: 0x124
5915	 1C2	PUSH2	0040	 	 
- stack 2: 0x720
- stack 1: 0x124
- stack 0: 0x40
5916	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x720
- stack 1: 0x124
- stack 0: 0x71C
5917	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x720
- stack 0: 0x840
5918	 1C7	PUSH2	0040	 	 
- stack 2: 0x720
- stack 1: 0x840
- stack 0: 0x40
5919	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x720
5920	 1CB	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
5921	 1CD	ADD		 	 
- stack 0: 0x724
5922	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
5923	 1CF	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x32600220409000004090000034F000203780002012C0022016000C802B80001
5924	 1D0	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x32600220409000004090000034F000203780002012C0022016000C802B80001
- stack 0: 0xF0
5925	 1D2	SHR		 	 
- stack 1: 0x724
- stack 0: 0x326
5926	 1D3	JUMP		 	 
- stack 0: 0x724
5927	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x724
5928	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
5929	 328	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x32600220409000004090000034F000203780002012C0022016000C802B80001
5930	 329	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0x32600220409000004090000034F000203780002012C0022016000C802B80001
- stack 0: 0xE0
5931	 32B	SHR		 	 
- stack 1: 0x724
- stack 0: 0x3260022
5932	 32C	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0x3260022
- stack 0: 0xFFFF
5933	 32F	AND		 	 
- stack 1: 0x724
- stack 0: 0x22
5934	 330	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x22
- stack 0: 0x1
5935	 332	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x22
5936	 333	PUSH2	0020	 	 
- stack 2: 0x724
- stack 1: 0x22
- stack 0: 0x20
5937	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x724
5938	 337	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
5939	 339	ADD		 	 
- stack 0: 0x728
5940	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
5941	 33B	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x409000004090000034F000203780002012C0022016000C802B8000103AD0002
5942	 33C	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x409000004090000034F000203780002012C0022016000C802B8000103AD0002
- stack 0: 0xF0
5943	 33E	SHR		 	 
- stack 1: 0x728
- stack 0: 0x409
5944	 33F	JUMP		 	 
- stack 0: 0x728
5945	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x728
5946	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x728
- stack 0: 0x728
5947	 40B	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x409000004090000034F000203780002012C0022016000C802B8000103AD0002
5948	 40C	PUSH1	E0	 	 
- stack 2: 0x728
- stack 1: 0x409000004090000034F000203780002012C0022016000C802B8000103AD0002
- stack 0: 0xE0
5949	 40E	SHR		 	 
- stack 1: 0x728
- stack 0: 0x4090000
5950	 40F	PUSH2	FFFF	 	 
- stack 2: 0x728
- stack 1: 0x4090000
- stack 0: 0xFFFF
5951	 412	AND		 	 
- stack 1: 0x728
- stack 0: 0x0
5952	 413	PUSH1	01	 	 
- stack 2: 0x728
- stack 1: 0x0
- stack 0: 0x1
5953	 415	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0x0
5954	 416	POP		 	 
- stack 0: 0x728
5955	 417	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
5956	 419	ADD		 	 
- stack 0: 0x72C
5957	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
5958	 41B	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x4090000034F000203780002012C0022016000C802B8000103AD000203C7FFD4
5959	 41C	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x4090000034F000203780002012C0022016000C802B8000103AD000203C7FFD4
- stack 0: 0xF0
5960	 41E	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x409
5961	 41F	JUMP		 	 
- stack 0: 0x72C
5962	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x72C
5963	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
5964	 40B	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x4090000034F000203780002012C0022016000C802B8000103AD000203C7FFD4
5965	 40C	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0x4090000034F000203780002012C0022016000C802B8000103AD000203C7FFD4
- stack 0: 0xE0
5966	 40E	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x4090000
5967	 40F	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0x4090000
- stack 0: 0xFFFF
5968	 412	AND		 	 
- stack 1: 0x72C
- stack 0: 0x0
5969	 413	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x0
- stack 0: 0x1
5970	 415	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x0
5971	 416	POP		 	 
- stack 0: 0x72C
5972	 417	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
5973	 419	ADD		 	 
- stack 0: 0x730
5974	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
5975	 41B	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x34F000203780002012C0022016000C802B8000103AD000203C7FFD401460015
5976	 41C	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x34F000203780002012C0022016000C802B8000103AD000203C7FFD401460015
- stack 0: 0xF0
5977	 41E	SHR		 	 
- stack 1: 0x730
- stack 0: 0x34F
5978	 41F	JUMP		 	 
- stack 0: 0x730
5979	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x730
5980	 350	PUSH2	0020	 	 
- stack 1: 0x730
- stack 0: 0x20
5981	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x730
- stack 0: 0x22
5982	 354	PUSH2	0040	 	 
- stack 2: 0x730
- stack 1: 0x22
- stack 0: 0x40
5983	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x730
- stack 1: 0x22
- stack 0: 0x840
5984	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x730
- stack 2: 0x22
- stack 1: 0x840
- stack 0: 0x730
5985	 359	MLOAD		 	 
- stack 3: 0x730
- stack 2: 0x22
- stack 1: 0x840
- stack 0: 0x34F000203780002012C0022016000C802B8000103AD000203C7FFD401460015
5986	 35A	PUSH1	E0	 	 
- stack 4: 0x730
- stack 3: 0x22
- stack 2: 0x840
- stack 1: 0x34F000203780002012C0022016000C802B8000103AD000203C7FFD401460015
- stack 0: 0xE0
5987	 35C	SHR		 	 
- stack 3: 0x730
- stack 2: 0x22
- stack 1: 0x840
- stack 0: 0x34F0002
5988	 35D	PUSH2	FFFF	 	 
- stack 4: 0x730
- stack 3: 0x22
- stack 2: 0x840
- stack 1: 0x34F0002
- stack 0: 0xFFFF
5989	 360	AND		 	 
- stack 3: 0x730
- stack 2: 0x22
- stack 1: 0x840
- stack 0: 0x2
5990	 361	PUSH1	01	 	 
- stack 4: 0x730
- stack 3: 0x22
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0x1
5991	 363	SIGNEXTEND		 	 
- stack 3: 0x730
- stack 2: 0x22
- stack 1: 0x840
- stack 0: 0x2
5992	 364	ADD		 	 
- stack 2: 0x730
- stack 1: 0x22
- stack 0: 0x842
5993	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x730
- stack 2: 0x22
- stack 1: 0x842
- stack 0: 0xFFFFFFFF
5994	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x730
- stack 1: 0x22
- stack 0: 0x842
5995	 36B	PUSH1	03	 	 
- stack 3: 0x730
- stack 2: 0x22
- stack 1: 0x842
- stack 0: 0x3
5996	 36D	XOR		 	 
- stack 2: 0x730
- stack 1: 0x22
- stack 0: 0x841
5997	 36E	MSTORE8		 	 
- stack 0: 0x730
5998	 36F	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
5999	 371	ADD		 	 
- stack 0: 0x734
6000	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
6001	 373	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x3780002012C0022016000C802B8000103AD000203C7FFD401460015030C0000
6002	 374	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0x3780002012C0022016000C802B8000103AD000203C7FFD401460015030C0000
- stack 0: 0xF0
6003	 376	SHR		 	 
- stack 1: 0x734
- stack 0: 0x378
6004	 377	JUMP		 	 
- stack 0: 0x734
6005	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x734
6006	 379	PUSH2	0040	 	 
- stack 1: 0x734
- stack 0: 0x40
6007	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x734
- stack 0: 0x840
6008	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x734
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
6009	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x734
- stack 0: 0x840
6010	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x734
- stack 1: 0x840
- stack 0: 0x734
6011	 384	MLOAD		 	 
- stack 2: 0x734
- stack 1: 0x840
- stack 0: 0x3780002012C0022016000C802B8000103AD000203C7FFD401460015030C0000
6012	 385	PUSH1	E0	 	 
- stack 3: 0x734
- stack 2: 0x840
- stack 1: 0x3780002012C0022016000C802B8000103AD000203C7FFD401460015030C0000
- stack 0: 0xE0
6013	 387	SHR		 	 
- stack 2: 0x734
- stack 1: 0x840
- stack 0: 0x3780002
6014	 388	PUSH2	FFFF	 	 
- stack 3: 0x734
- stack 2: 0x840
- stack 1: 0x3780002
- stack 0: 0xFFFF
6015	 38B	AND		 	 
- stack 2: 0x734
- stack 1: 0x840
- stack 0: 0x2
6016	 38C	PUSH1	01	 	 
- stack 3: 0x734
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0x1
6017	 38E	SIGNEXTEND		 	 
- stack 2: 0x734
- stack 1: 0x840
- stack 0: 0x2
6018	 38F	ADD		 	 
- stack 1: 0x734
- stack 0: 0x842
6019	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x734
- stack 1: 0x842
- stack 0: 0xFFFFFFFF
6020	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x734
- stack 0: 0x842
6021	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x734
- stack 1: 0x842
- stack 0: 0x3
6022	 398	XOR		 	 
- stack 1: 0x734
- stack 0: 0x841
6023	 399	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x2223330AA0ABBB00009878000000000000000000000000000000000000000000
6024	 39A	PUSH1	F8	 	 
- stack 2: 0x734
- stack 1: 0x2223330AA0ABBB00009878000000000000000000000000000000000000000000
- stack 0: 0xF8
6025	 39C	SHR		 	 
- stack 1: 0x734
- stack 0: 0x22
6026	 39D	PUSH1	00	 	 
- stack 2: 0x734
- stack 1: 0x22
- stack 0: 0x0
6027	 39F	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0x22
6028	 3A0	PUSH2	0060	 	 
- stack 2: 0x734
- stack 1: 0x22
- stack 0: 0x60
6029	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x734
6030	 3A4	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
6031	 3A6	ADD		 	 
- stack 0: 0x738
6032	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
6033	 3A8	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x12C0022016000C802B8000103AD000203C7FFD401460015030C000003400000
6034	 3A9	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x12C0022016000C802B8000103AD000203C7FFD401460015030C000003400000
- stack 0: 0xF0
6035	 3AB	SHR		 	 
- stack 1: 0x738
- stack 0: 0x12C
6036	 3AC	JUMP		 	 
- stack 0: 0x738
6037	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x738
6038	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x738
- stack 0: 0x738
6039	 12E	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x12C0022016000C802B8000103AD000203C7FFD401460015030C000003400000
6040	 12F	PUSH1	E0	 	 
- stack 2: 0x738
- stack 1: 0x12C0022016000C802B8000103AD000203C7FFD401460015030C000003400000
- stack 0: 0xE0
6041	 131	SHR		 	 
- stack 1: 0x738
- stack 0: 0x12C0022
6042	 132	PUSH2	FFFF	 	 
- stack 2: 0x738
- stack 1: 0x12C0022
- stack 0: 0xFFFF
6043	 135	AND		 	 
- stack 1: 0x738
- stack 0: 0x22
6044	 136	PUSH1	01	 	 
- stack 2: 0x738
- stack 1: 0x22
- stack 0: 0x1
6045	 138	SIGNEXTEND		 	 
- stack 1: 0x738
- stack 0: 0x22
6046	 139	PUSH2	03A0	 	 
- stack 2: 0x738
- stack 1: 0x22
- stack 0: 0x3A0
6047	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x738
6048	 13D	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
6049	 13F	ADD		 	 
- stack 0: 0x73C
6050	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
6051	 141	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x16000C802B8000103AD000203C7FFD401460015030C00000340000001B500EC
6052	 142	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x16000C802B8000103AD000203C7FFD401460015030C00000340000001B500EC
- stack 0: 0xF0
6053	 144	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x160
6054	 145	JUMP		 	 
- stack 0: 0x73C
6055	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x73C
6056	 161	PUSH2	0060	 	 
- stack 1: 0x73C
- stack 0: 0x60
6057	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x73C
- stack 0: 0x22
6058	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x73C
- stack 1: 0x22
- stack 0: 0xFFFFFFFF
6059	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x73C
- stack 0: 0x22
6060	 16B	PUSH2	03A0	 	 
- stack 2: 0x73C
- stack 1: 0x22
- stack 0: 0x3A0
6061	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x73C
- stack 1: 0x22
- stack 0: 0x22
6062	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x73C
- stack 2: 0x22
- stack 1: 0x22
- stack 0: 0xFFFFFFFF
6063	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x73C
- stack 1: 0x22
- stack 0: 0x22
6064	 175	SUB		 	 
- stack 1: 0x73C
- stack 0: 0x0
6065	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x73C
- stack 1: 0x0
- stack 0: 0x17E
6066	 179	JUMPI		 	 
- stack 0: 0x73C
6067	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x73C
- stack 0: 0x198
6068	 17D	JUMP		 	 
- stack 0: 0x73C
6069	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x73C
6070	 199	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
6071	 19B	ADD		 	 
- stack 0: 0x740
6072	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
6073	 19D	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x2B8000103AD000203C7FFD401460015030C00000340000001B500EC04090000
6074	 19E	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0x2B8000103AD000203C7FFD401460015030C00000340000001B500EC04090000
- stack 0: 0xF0
6075	 1A0	SHR		 	 
- stack 1: 0x740
- stack 0: 0x2B8
6076	 1A1	JUMP		 	 
- stack 0: 0x740
6077	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x740
6078	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x740
- stack 0: 0x740
6079	 2BA	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x2B8000103AD000203C7FFD401460015030C00000340000001B500EC04090000
6080	 2BB	PUSH1	E0	 	 
- stack 2: 0x740
- stack 1: 0x2B8000103AD000203C7FFD401460015030C00000340000001B500EC04090000
- stack 0: 0xE0
6081	 2BD	SHR		 	 
- stack 1: 0x740
- stack 0: 0x2B80001
6082	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x740
- stack 1: 0x2B80001
- stack 0: 0xFFFF
6083	 2C1	AND		 	 
- stack 1: 0x740
- stack 0: 0x1
6084	 2C2	PUSH1	01	 	 
- stack 2: 0x740
- stack 1: 0x1
- stack 0: 0x1
6085	 2C4	SIGNEXTEND		 	 
- stack 1: 0x740
- stack 0: 0x1
6086	 2C5	PUSH2	0080	 	 
- stack 2: 0x740
- stack 1: 0x1
- stack 0: 0x80
6087	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x740
- stack 1: 0x1
- stack 0: 0x0
6088	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x740
- stack 0: 0x1
6089	 2CA	PUSH2	0080	 	 
- stack 2: 0x740
- stack 1: 0x1
- stack 0: 0x80
6090	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x740
6091	 2CE	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
6092	 2D0	ADD		 	 
- stack 0: 0x744
6093	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
6094	 2D2	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x3AD000203C7FFD401460015030C00000340000001B500EC0409000003260012
6095	 2D3	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x3AD000203C7FFD401460015030C00000340000001B500EC0409000003260012
- stack 0: 0xF0
6096	 2D5	SHR		 	 
- stack 1: 0x744
- stack 0: 0x3AD
6097	 2D6	JUMP		 	 
- stack 0: 0x744
6098	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x744
6099	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
6100	 3AF	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x3AD000203C7FFD401460015030C00000340000001B500EC0409000003260012
6101	 3B0	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x3AD000203C7FFD401460015030C00000340000001B500EC0409000003260012
- stack 0: 0xE0
6102	 3B2	SHR		 	 
- stack 1: 0x744
- stack 0: 0x3AD0002
6103	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
6104	 3B6	AND		 	 
- stack 1: 0x744
- stack 0: 0x2
6105	 3B7	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x2
- stack 0: 0x1
6106	 3B9	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x2
6107	 3BA	PUSH2	00A0	 	 
- stack 2: 0x744
- stack 1: 0x2
- stack 0: 0xA0
6108	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x744
6109	 3BE	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
6110	 3C0	ADD		 	 
- stack 0: 0x748
6111	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
6112	 3C2	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3C7FFD401460015030C00000340000001B500EC0409000003260012034F0003
6113	 3C3	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x3C7FFD401460015030C00000340000001B500EC0409000003260012034F0003
- stack 0: 0xF0
6114	 3C5	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3C7
6115	 3C6	JUMP		 	 
- stack 0: 0x748
6116	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x748
6117	 3C8	PUSH2	0080	 	 
- stack 1: 0x748
- stack 0: 0x80
6118	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x748
- stack 0: 0x1
6119	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x748
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6120	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x748
- stack 0: 0x1
6121	 3D2	PUSH2	00A0	 	 
- stack 2: 0x748
- stack 1: 0x1
- stack 0: 0xA0
6122	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x748
- stack 1: 0x1
- stack 0: 0x2
6123	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x748
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6124	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x748
- stack 1: 0x1
- stack 0: 0x2
6125	 3DC	SUB		 	 
- stack 1: 0x748
- stack 0: 0x1
6126	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x748
- stack 1: 0x1
- stack 0: 0x3E5
6127	 3E0	JUMPI		 	 
- stack 0: 0x748
6128	 3E5	JUMPDEST		 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x748
6129	 3E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
6130	 3E7	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3C7FFD401460015030C00000340000001B500EC0409000003260012034F0003
6131	 3E8	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0x3C7FFD401460015030C00000340000001B500EC0409000003260012034F0003
- stack 0: 0xE0
6132	 3EA	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3C7FFD4
6133	 3EB	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0x3C7FFD4
- stack 0: 0xFFFF
6134	 3EE	AND		 	 
- stack 1: 0x748
- stack 0: 0xFFD4
6135	 3EF	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0xFFD4
- stack 0: 0x1
6136	 3F1	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4
6137	 3F2	ADD		 	 
- stack 0: 0x71C
6138	 3F3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x71C
- stack 0: 0xFFFFFFFF
6139	 3F8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x71C
6140	 3F9	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
6141	 3FA	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x340000001B50124032600220409000004090000034F000203780002012C0022
6142	 3FB	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x340000001B50124032600220409000004090000034F000203780002012C0022
- stack 0: 0xF0
6143	 3FD	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x340
6144	 3FE	JUMP		 	 
- stack 0: 0x71C
6145	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x71C
6146	 341	DUP1		 	 
- stack 1: 0x71C
- stack 0: 0x71C
6147	 342	PUSH2	0040	 	 
- stack 2: 0x71C
- stack 1: 0x71C
- stack 0: 0x40
6148	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x71C
6149	 346	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
6150	 348	ADD		 	 
- stack 0: 0x720
6151	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
6152	 34A	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x1B50124032600220409000004090000034F000203780002012C0022016000C8
6153	 34B	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0x1B50124032600220409000004090000034F000203780002012C0022016000C8
- stack 0: 0xF0
6154	 34D	SHR		 	 
- stack 1: 0x720
- stack 0: 0x1B5
6155	 34E	JUMP		 	 
- stack 0: 0x720
6156	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x720
6157	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x720
- stack 0: 0x720
6158	 1B7	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x1B50124032600220409000004090000034F000203780002012C0022016000C8
6159	 1B8	PUSH1	E0	 	 
- stack 2: 0x720
- stack 1: 0x1B50124032600220409000004090000034F000203780002012C0022016000C8
- stack 0: 0xE0
6160	 1BA	SHR		 	 
- stack 1: 0x720
- stack 0: 0x1B50124
6161	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x720
- stack 1: 0x1B50124
- stack 0: 0xFFFF
6162	 1BE	AND		 	 
- stack 1: 0x720
- stack 0: 0x124
6163	 1BF	PUSH1	01	 	 
- stack 2: 0x720
- stack 1: 0x124
- stack 0: 0x1
6164	 1C1	SIGNEXTEND		 	 
- stack 1: 0x720
- stack 0: 0x124
6165	 1C2	PUSH2	0040	 	 
- stack 2: 0x720
- stack 1: 0x124
- stack 0: 0x40
6166	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x720
- stack 1: 0x124
- stack 0: 0x71C
6167	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x720
- stack 0: 0x840
6168	 1C7	PUSH2	0040	 	 
- stack 2: 0x720
- stack 1: 0x840
- stack 0: 0x40
6169	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x720
6170	 1CB	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
6171	 1CD	ADD		 	 
- stack 0: 0x724
6172	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
6173	 1CF	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x32600220409000004090000034F000203780002012C0022016000C802B80001
6174	 1D0	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x32600220409000004090000034F000203780002012C0022016000C802B80001
- stack 0: 0xF0
6175	 1D2	SHR		 	 
- stack 1: 0x724
- stack 0: 0x326
6176	 1D3	JUMP		 	 
- stack 0: 0x724
6177	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x724
6178	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
6179	 328	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x32600220409000004090000034F000203780002012C0022016000C802B80001
6180	 329	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0x32600220409000004090000034F000203780002012C0022016000C802B80001
- stack 0: 0xE0
6181	 32B	SHR		 	 
- stack 1: 0x724
- stack 0: 0x3260022
6182	 32C	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0x3260022
- stack 0: 0xFFFF
6183	 32F	AND		 	 
- stack 1: 0x724
- stack 0: 0x22
6184	 330	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x22
- stack 0: 0x1
6185	 332	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x22
6186	 333	PUSH2	0020	 	 
- stack 2: 0x724
- stack 1: 0x22
- stack 0: 0x20
6187	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x724
6188	 337	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
6189	 339	ADD		 	 
- stack 0: 0x728
6190	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
6191	 33B	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x409000004090000034F000203780002012C0022016000C802B8000103AD0002
6192	 33C	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x409000004090000034F000203780002012C0022016000C802B8000103AD0002
- stack 0: 0xF0
6193	 33E	SHR		 	 
- stack 1: 0x728
- stack 0: 0x409
6194	 33F	JUMP		 	 
- stack 0: 0x728
6195	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x728
6196	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x728
- stack 0: 0x728
6197	 40B	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x409000004090000034F000203780002012C0022016000C802B8000103AD0002
6198	 40C	PUSH1	E0	 	 
- stack 2: 0x728
- stack 1: 0x409000004090000034F000203780002012C0022016000C802B8000103AD0002
- stack 0: 0xE0
6199	 40E	SHR		 	 
- stack 1: 0x728
- stack 0: 0x4090000
6200	 40F	PUSH2	FFFF	 	 
- stack 2: 0x728
- stack 1: 0x4090000
- stack 0: 0xFFFF
6201	 412	AND		 	 
- stack 1: 0x728
- stack 0: 0x0
6202	 413	PUSH1	01	 	 
- stack 2: 0x728
- stack 1: 0x0
- stack 0: 0x1
6203	 415	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0x0
6204	 416	POP		 	 
- stack 0: 0x728
6205	 417	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
6206	 419	ADD		 	 
- stack 0: 0x72C
6207	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
6208	 41B	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x4090000034F000203780002012C0022016000C802B8000103AD000203C7FFD4
6209	 41C	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x4090000034F000203780002012C0022016000C802B8000103AD000203C7FFD4
- stack 0: 0xF0
6210	 41E	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x409
6211	 41F	JUMP		 	 
- stack 0: 0x72C
6212	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x72C
6213	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
6214	 40B	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x4090000034F000203780002012C0022016000C802B8000103AD000203C7FFD4
6215	 40C	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0x4090000034F000203780002012C0022016000C802B8000103AD000203C7FFD4
- stack 0: 0xE0
6216	 40E	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x4090000
6217	 40F	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0x4090000
- stack 0: 0xFFFF
6218	 412	AND		 	 
- stack 1: 0x72C
- stack 0: 0x0
6219	 413	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x0
- stack 0: 0x1
6220	 415	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x0
6221	 416	POP		 	 
- stack 0: 0x72C
6222	 417	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
6223	 419	ADD		 	 
- stack 0: 0x730
6224	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
6225	 41B	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x34F000203780002012C0022016000C802B8000103AD000203C7FFD401460015
6226	 41C	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x34F000203780002012C0022016000C802B8000103AD000203C7FFD401460015
- stack 0: 0xF0
6227	 41E	SHR		 	 
- stack 1: 0x730
- stack 0: 0x34F
6228	 41F	JUMP		 	 
- stack 0: 0x730
6229	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x730
6230	 350	PUSH2	0020	 	 
- stack 1: 0x730
- stack 0: 0x20
6231	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x730
- stack 0: 0x22
6232	 354	PUSH2	0040	 	 
- stack 2: 0x730
- stack 1: 0x22
- stack 0: 0x40
6233	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x730
- stack 1: 0x22
- stack 0: 0x840
6234	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x730
- stack 2: 0x22
- stack 1: 0x840
- stack 0: 0x730
6235	 359	MLOAD		 	 
- stack 3: 0x730
- stack 2: 0x22
- stack 1: 0x840
- stack 0: 0x34F000203780002012C0022016000C802B8000103AD000203C7FFD401460015
6236	 35A	PUSH1	E0	 	 
- stack 4: 0x730
- stack 3: 0x22
- stack 2: 0x840
- stack 1: 0x34F000203780002012C0022016000C802B8000103AD000203C7FFD401460015
- stack 0: 0xE0
6237	 35C	SHR		 	 
- stack 3: 0x730
- stack 2: 0x22
- stack 1: 0x840
- stack 0: 0x34F0002
6238	 35D	PUSH2	FFFF	 	 
- stack 4: 0x730
- stack 3: 0x22
- stack 2: 0x840
- stack 1: 0x34F0002
- stack 0: 0xFFFF
6239	 360	AND		 	 
- stack 3: 0x730
- stack 2: 0x22
- stack 1: 0x840
- stack 0: 0x2
6240	 361	PUSH1	01	 	 
- stack 4: 0x730
- stack 3: 0x22
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0x1
6241	 363	SIGNEXTEND		 	 
- stack 3: 0x730
- stack 2: 0x22
- stack 1: 0x840
- stack 0: 0x2
6242	 364	ADD		 	 
- stack 2: 0x730
- stack 1: 0x22
- stack 0: 0x842
6243	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x730
- stack 2: 0x22
- stack 1: 0x842
- stack 0: 0xFFFFFFFF
6244	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x730
- stack 1: 0x22
- stack 0: 0x842
6245	 36B	PUSH1	03	 	 
- stack 3: 0x730
- stack 2: 0x22
- stack 1: 0x842
- stack 0: 0x3
6246	 36D	XOR		 	 
- stack 2: 0x730
- stack 1: 0x22
- stack 0: 0x841
6247	 36E	MSTORE8		 	 
- stack 0: 0x730
6248	 36F	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
6249	 371	ADD		 	 
- stack 0: 0x734
6250	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
6251	 373	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x3780002012C0022016000C802B8000103AD000203C7FFD401460015030C0000
6252	 374	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0x3780002012C0022016000C802B8000103AD000203C7FFD401460015030C0000
- stack 0: 0xF0
6253	 376	SHR		 	 
- stack 1: 0x734
- stack 0: 0x378
6254	 377	JUMP		 	 
- stack 0: 0x734
6255	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x734
6256	 379	PUSH2	0040	 	 
- stack 1: 0x734
- stack 0: 0x40
6257	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x734
- stack 0: 0x840
6258	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x734
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
6259	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x734
- stack 0: 0x840
6260	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x734
- stack 1: 0x840
- stack 0: 0x734
6261	 384	MLOAD		 	 
- stack 2: 0x734
- stack 1: 0x840
- stack 0: 0x3780002012C0022016000C802B8000103AD000203C7FFD401460015030C0000
6262	 385	PUSH1	E0	 	 
- stack 3: 0x734
- stack 2: 0x840
- stack 1: 0x3780002012C0022016000C802B8000103AD000203C7FFD401460015030C0000
- stack 0: 0xE0
6263	 387	SHR		 	 
- stack 2: 0x734
- stack 1: 0x840
- stack 0: 0x3780002
6264	 388	PUSH2	FFFF	 	 
- stack 3: 0x734
- stack 2: 0x840
- stack 1: 0x3780002
- stack 0: 0xFFFF
6265	 38B	AND		 	 
- stack 2: 0x734
- stack 1: 0x840
- stack 0: 0x2
6266	 38C	PUSH1	01	 	 
- stack 3: 0x734
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0x1
6267	 38E	SIGNEXTEND		 	 
- stack 2: 0x734
- stack 1: 0x840
- stack 0: 0x2
6268	 38F	ADD		 	 
- stack 1: 0x734
- stack 0: 0x842
6269	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x734
- stack 1: 0x842
- stack 0: 0xFFFFFFFF
6270	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x734
- stack 0: 0x842
6271	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x734
- stack 1: 0x842
- stack 0: 0x3
6272	 398	XOR		 	 
- stack 1: 0x734
- stack 0: 0x841
6273	 399	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x2223330AA0ABBB00009878000000000000000000000000000000000000000000
6274	 39A	PUSH1	F8	 	 
- stack 2: 0x734
- stack 1: 0x2223330AA0ABBB00009878000000000000000000000000000000000000000000
- stack 0: 0xF8
6275	 39C	SHR		 	 
- stack 1: 0x734
- stack 0: 0x22
6276	 39D	PUSH1	00	 	 
- stack 2: 0x734
- stack 1: 0x22
- stack 0: 0x0
6277	 39F	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0x22
6278	 3A0	PUSH2	0060	 	 
- stack 2: 0x734
- stack 1: 0x22
- stack 0: 0x60
6279	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x734
6280	 3A4	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
6281	 3A6	ADD		 	 
- stack 0: 0x738
6282	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
6283	 3A8	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x12C0022016000C802B8000103AD000203C7FFD401460015030C000003400000
6284	 3A9	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x12C0022016000C802B8000103AD000203C7FFD401460015030C000003400000
- stack 0: 0xF0
6285	 3AB	SHR		 	 
- stack 1: 0x738
- stack 0: 0x12C
6286	 3AC	JUMP		 	 
- stack 0: 0x738
6287	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x738
6288	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x738
- stack 0: 0x738
6289	 12E	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x12C0022016000C802B8000103AD000203C7FFD401460015030C000003400000
6290	 12F	PUSH1	E0	 	 
- stack 2: 0x738
- stack 1: 0x12C0022016000C802B8000103AD000203C7FFD401460015030C000003400000
- stack 0: 0xE0
6291	 131	SHR		 	 
- stack 1: 0x738
- stack 0: 0x12C0022
6292	 132	PUSH2	FFFF	 	 
- stack 2: 0x738
- stack 1: 0x12C0022
- stack 0: 0xFFFF
6293	 135	AND		 	 
- stack 1: 0x738
- stack 0: 0x22
6294	 136	PUSH1	01	 	 
- stack 2: 0x738
- stack 1: 0x22
- stack 0: 0x1
6295	 138	SIGNEXTEND		 	 
- stack 1: 0x738
- stack 0: 0x22
6296	 139	PUSH2	03A0	 	 
- stack 2: 0x738
- stack 1: 0x22
- stack 0: 0x3A0
6297	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x738
6298	 13D	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
6299	 13F	ADD		 	 
- stack 0: 0x73C
6300	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
6301	 141	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x16000C802B8000103AD000203C7FFD401460015030C00000340000001B500EC
6302	 142	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x16000C802B8000103AD000203C7FFD401460015030C00000340000001B500EC
- stack 0: 0xF0
6303	 144	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x160
6304	 145	JUMP		 	 
- stack 0: 0x73C
6305	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x73C
6306	 161	PUSH2	0060	 	 
- stack 1: 0x73C
- stack 0: 0x60
6307	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x73C
- stack 0: 0x22
6308	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x73C
- stack 1: 0x22
- stack 0: 0xFFFFFFFF
6309	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x73C
- stack 0: 0x22
6310	 16B	PUSH2	03A0	 	 
- stack 2: 0x73C
- stack 1: 0x22
- stack 0: 0x3A0
6311	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x73C
- stack 1: 0x22
- stack 0: 0x22
6312	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x73C
- stack 2: 0x22
- stack 1: 0x22
- stack 0: 0xFFFFFFFF
6313	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x73C
- stack 1: 0x22
- stack 0: 0x22
6314	 175	SUB		 	 
- stack 1: 0x73C
- stack 0: 0x0
6315	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x73C
- stack 1: 0x0
- stack 0: 0x17E
6316	 179	JUMPI		 	 
- stack 0: 0x73C
6317	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x73C
- stack 0: 0x198
6318	 17D	JUMP		 	 
- stack 0: 0x73C
6319	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x73C
6320	 199	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
6321	 19B	ADD		 	 
- stack 0: 0x740
6322	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
6323	 19D	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x2B8000103AD000203C7FFD401460015030C00000340000001B500EC04090000
6324	 19E	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0x2B8000103AD000203C7FFD401460015030C00000340000001B500EC04090000
- stack 0: 0xF0
6325	 1A0	SHR		 	 
- stack 1: 0x740
- stack 0: 0x2B8
6326	 1A1	JUMP		 	 
- stack 0: 0x740
6327	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x740
6328	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x740
- stack 0: 0x740
6329	 2BA	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x2B8000103AD000203C7FFD401460015030C00000340000001B500EC04090000
6330	 2BB	PUSH1	E0	 	 
- stack 2: 0x740
- stack 1: 0x2B8000103AD000203C7FFD401460015030C00000340000001B500EC04090000
- stack 0: 0xE0
6331	 2BD	SHR		 	 
- stack 1: 0x740
- stack 0: 0x2B80001
6332	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x740
- stack 1: 0x2B80001
- stack 0: 0xFFFF
6333	 2C1	AND		 	 
- stack 1: 0x740
- stack 0: 0x1
6334	 2C2	PUSH1	01	 	 
- stack 2: 0x740
- stack 1: 0x1
- stack 0: 0x1
6335	 2C4	SIGNEXTEND		 	 
- stack 1: 0x740
- stack 0: 0x1
6336	 2C5	PUSH2	0080	 	 
- stack 2: 0x740
- stack 1: 0x1
- stack 0: 0x80
6337	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x740
- stack 1: 0x1
- stack 0: 0x1
6338	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x740
- stack 0: 0x2
6339	 2CA	PUSH2	0080	 	 
- stack 2: 0x740
- stack 1: 0x2
- stack 0: 0x80
6340	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x740
6341	 2CE	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
6342	 2D0	ADD		 	 
- stack 0: 0x744
6343	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
6344	 2D2	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x3AD000203C7FFD401460015030C00000340000001B500EC0409000003260012
6345	 2D3	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x3AD000203C7FFD401460015030C00000340000001B500EC0409000003260012
- stack 0: 0xF0
6346	 2D5	SHR		 	 
- stack 1: 0x744
- stack 0: 0x3AD
6347	 2D6	JUMP		 	 
- stack 0: 0x744
6348	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x744
6349	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
6350	 3AF	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x3AD000203C7FFD401460015030C00000340000001B500EC0409000003260012
6351	 3B0	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x3AD000203C7FFD401460015030C00000340000001B500EC0409000003260012
- stack 0: 0xE0
6352	 3B2	SHR		 	 
- stack 1: 0x744
- stack 0: 0x3AD0002
6353	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
6354	 3B6	AND		 	 
- stack 1: 0x744
- stack 0: 0x2
6355	 3B7	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x2
- stack 0: 0x1
6356	 3B9	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x2
6357	 3BA	PUSH2	00A0	 	 
- stack 2: 0x744
- stack 1: 0x2
- stack 0: 0xA0
6358	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x744
6359	 3BE	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
6360	 3C0	ADD		 	 
- stack 0: 0x748
6361	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
6362	 3C2	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3C7FFD401460015030C00000340000001B500EC0409000003260012034F0003
6363	 3C3	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x3C7FFD401460015030C00000340000001B500EC0409000003260012034F0003
- stack 0: 0xF0
6364	 3C5	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3C7
6365	 3C6	JUMP		 	 
- stack 0: 0x748
6366	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x748
6367	 3C8	PUSH2	0080	 	 
- stack 1: 0x748
- stack 0: 0x80
6368	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x748
- stack 0: 0x2
6369	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6370	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x748
- stack 0: 0x2
6371	 3D2	PUSH2	00A0	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0xA0
6372	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0x2
6373	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x748
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6374	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0x2
6375	 3DC	SUB		 	 
- stack 1: 0x748
- stack 0: 0x0
6376	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x748
- stack 1: 0x0
- stack 0: 0x3E5
6377	 3E0	JUMPI		 	 
- stack 0: 0x748
6378	 3E1	PUSH2	03FF	 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 1: 0x748
- stack 0: 0x3FF
6379	 3E4	JUMP		 	 
- stack 0: 0x748
6380	 3FF	JUMPDEST		 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x748
6381	 400	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
6382	 402	ADD		 	 
- stack 0: 0x74C
6383	 403	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
6384	 404	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x1460015030C00000340000001B500EC0409000003260012034F000303780003
6385	 405	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x1460015030C00000340000001B500EC0409000003260012034F000303780003
- stack 0: 0xF0
6386	 407	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x146
6387	 408	JUMP		 	 
- stack 0: 0x74C
6388	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x74C
6389	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x74C
- stack 0: 0x74C
6390	 148	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x1460015030C00000340000001B500EC0409000003260012034F000303780003
6391	 149	PUSH1	E0	 	 
- stack 2: 0x74C
- stack 1: 0x1460015030C00000340000001B500EC0409000003260012034F000303780003
- stack 0: 0xE0
6392	 14B	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x1460015
6393	 14C	PUSH2	FFFF	 	 
- stack 2: 0x74C
- stack 1: 0x1460015
- stack 0: 0xFFFF
6394	 14F	AND		 	 
- stack 1: 0x74C
- stack 0: 0x15
6395	 150	PUSH1	01	 	 
- stack 2: 0x74C
- stack 1: 0x15
- stack 0: 0x1
6396	 152	SIGNEXTEND		 	 
- stack 1: 0x74C
- stack 0: 0x15
6397	 153	PUSH2	0380	 	 
- stack 2: 0x74C
- stack 1: 0x15
- stack 0: 0x380
6398	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x74C
6399	 157	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
6400	 159	ADD		 	 
- stack 0: 0x750
6401	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
6402	 15B	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x30C00000340000001B500EC0409000003260012034F000303780003012C0012
6403	 15C	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x30C00000340000001B500EC0409000003260012034F000303780003012C0012
- stack 0: 0xF0
6404	 15E	SHR		 	 
- stack 1: 0x750
- stack 0: 0x30C
6405	 15F	JUMP		 	 
- stack 0: 0x750
6406	 30C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x750
6407	 30D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x750
- stack 0: 0x750
6408	 30E	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x30C00000340000001B500EC0409000003260012034F000303780003012C0012
6409	 30F	PUSH1	E0	 	 
- stack 2: 0x750
- stack 1: 0x30C00000340000001B500EC0409000003260012034F000303780003012C0012
- stack 0: 0xE0
6410	 311	SHR		 	 
- stack 1: 0x750
- stack 0: 0x30C0000
6411	 312	PUSH2	FFFF	 	 
- stack 2: 0x750
- stack 1: 0x30C0000
- stack 0: 0xFFFF
6412	 315	AND		 	 
- stack 1: 0x750
- stack 0: 0x0
6413	 316	PUSH1	01	 	 
- stack 2: 0x750
- stack 1: 0x0
- stack 0: 0x1
6414	 318	SIGNEXTEND		 	 
- stack 1: 0x750
- stack 0: 0x0
6415	 319	PUSH2	0080	 	 
- stack 2: 0x750
- stack 1: 0x0
- stack 0: 0x80
6416	 31C	MSTORE		 	  ;; # store to x4
- stack 0: 0x750
6417	 31D	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
6418	 31F	ADD		 	 
- stack 0: 0x754
6419	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
6420	 321	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x340000001B500EC0409000003260012034F000303780003012C001201600094
6421	 322	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x340000001B500EC0409000003260012034F000303780003012C001201600094
- stack 0: 0xF0
6422	 324	SHR		 	 
- stack 1: 0x754
- stack 0: 0x340
6423	 325	JUMP		 	 
- stack 0: 0x754
6424	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x754
6425	 341	DUP1		 	 
- stack 1: 0x754
- stack 0: 0x754
6426	 342	PUSH2	0040	 	 
- stack 2: 0x754
- stack 1: 0x754
- stack 0: 0x40
6427	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x754
6428	 346	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
6429	 348	ADD		 	 
- stack 0: 0x758
6430	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
6431	 34A	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x1B500EC0409000003260012034F000303780003012C00120160009402B80001
6432	 34B	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0x1B500EC0409000003260012034F000303780003012C00120160009402B80001
- stack 0: 0xF0
6433	 34D	SHR		 	 
- stack 1: 0x758
- stack 0: 0x1B5
6434	 34E	JUMP		 	 
- stack 0: 0x758
6435	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x758
6436	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x758
- stack 0: 0x758
6437	 1B7	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x1B500EC0409000003260012034F000303780003012C00120160009402B80001
6438	 1B8	PUSH1	E0	 	 
- stack 2: 0x758
- stack 1: 0x1B500EC0409000003260012034F000303780003012C00120160009402B80001
- stack 0: 0xE0
6439	 1BA	SHR		 	 
- stack 1: 0x758
- stack 0: 0x1B500EC
6440	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x758
- stack 1: 0x1B500EC
- stack 0: 0xFFFF
6441	 1BE	AND		 	 
- stack 1: 0x758
- stack 0: 0xEC
6442	 1BF	PUSH1	01	 	 
- stack 2: 0x758
- stack 1: 0xEC
- stack 0: 0x1
6443	 1C1	SIGNEXTEND		 	 
- stack 1: 0x758
- stack 0: 0xEC
6444	 1C2	PUSH2	0040	 	 
- stack 2: 0x758
- stack 1: 0xEC
- stack 0: 0x40
6445	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x758
- stack 1: 0xEC
- stack 0: 0x754
6446	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x758
- stack 0: 0x840
6447	 1C7	PUSH2	0040	 	 
- stack 2: 0x758
- stack 1: 0x840
- stack 0: 0x40
6448	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x758
6449	 1CB	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
6450	 1CD	ADD		 	 
- stack 0: 0x75C
6451	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
6452	 1CF	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x409000003260012034F000303780003012C00120160009402B8000103AD0002
6453	 1D0	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x409000003260012034F000303780003012C00120160009402B8000103AD0002
- stack 0: 0xF0
6454	 1D2	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x409
6455	 1D3	JUMP		 	 
- stack 0: 0x75C
6456	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x75C
6457	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
6458	 40B	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x409000003260012034F000303780003012C00120160009402B8000103AD0002
6459	 40C	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x409000003260012034F000303780003012C00120160009402B8000103AD0002
- stack 0: 0xE0
6460	 40E	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x4090000
6461	 40F	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x4090000
- stack 0: 0xFFFF
6462	 412	AND		 	 
- stack 1: 0x75C
- stack 0: 0x0
6463	 413	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x0
- stack 0: 0x1
6464	 415	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x0
6465	 416	POP		 	 
- stack 0: 0x75C
6466	 417	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
6467	 419	ADD		 	 
- stack 0: 0x760
6468	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
6469	 41B	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x3260012034F000303780003012C00120160009402B8000103AD000203C7FFD8
6470	 41C	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x3260012034F000303780003012C00120160009402B8000103AD000203C7FFD8
- stack 0: 0xF0
6471	 41E	SHR		 	 
- stack 1: 0x760
- stack 0: 0x326
6472	 41F	JUMP		 	 
- stack 0: 0x760
6473	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x760
6474	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
6475	 328	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x3260012034F000303780003012C00120160009402B8000103AD000203C7FFD8
6476	 329	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0x3260012034F000303780003012C00120160009402B8000103AD000203C7FFD8
- stack 0: 0xE0
6477	 32B	SHR		 	 
- stack 1: 0x760
- stack 0: 0x3260012
6478	 32C	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0x3260012
- stack 0: 0xFFFF
6479	 32F	AND		 	 
- stack 1: 0x760
- stack 0: 0x12
6480	 330	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x12
- stack 0: 0x1
6481	 332	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x12
6482	 333	PUSH2	0020	 	 
- stack 2: 0x760
- stack 1: 0x12
- stack 0: 0x20
6483	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x760
6484	 337	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
6485	 339	ADD		 	 
- stack 0: 0x764
6486	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
6487	 33B	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x34F000303780003012C00120160009402B8000103AD000203C7FFD801460016
6488	 33C	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x34F000303780003012C00120160009402B8000103AD000203C7FFD801460016
- stack 0: 0xF0
6489	 33E	SHR		 	 
- stack 1: 0x764
- stack 0: 0x34F
6490	 33F	JUMP		 	 
- stack 0: 0x764
6491	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x764
6492	 350	PUSH2	0020	 	 
- stack 1: 0x764
- stack 0: 0x20
6493	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x764
- stack 0: 0x12
6494	 354	PUSH2	0040	 	 
- stack 2: 0x764
- stack 1: 0x12
- stack 0: 0x40
6495	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x764
- stack 1: 0x12
- stack 0: 0x840
6496	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x764
- stack 2: 0x12
- stack 1: 0x840
- stack 0: 0x764
6497	 359	MLOAD		 	 
- stack 3: 0x764
- stack 2: 0x12
- stack 1: 0x840
- stack 0: 0x34F000303780003012C00120160009402B8000103AD000203C7FFD801460016
6498	 35A	PUSH1	E0	 	 
- stack 4: 0x764
- stack 3: 0x12
- stack 2: 0x840
- stack 1: 0x34F000303780003012C00120160009402B8000103AD000203C7FFD801460016
- stack 0: 0xE0
6499	 35C	SHR		 	 
- stack 3: 0x764
- stack 2: 0x12
- stack 1: 0x840
- stack 0: 0x34F0003
6500	 35D	PUSH2	FFFF	 	 
- stack 4: 0x764
- stack 3: 0x12
- stack 2: 0x840
- stack 1: 0x34F0003
- stack 0: 0xFFFF
6501	 360	AND		 	 
- stack 3: 0x764
- stack 2: 0x12
- stack 1: 0x840
- stack 0: 0x3
6502	 361	PUSH1	01	 	 
- stack 4: 0x764
- stack 3: 0x12
- stack 2: 0x840
- stack 1: 0x3
- stack 0: 0x1
6503	 363	SIGNEXTEND		 	 
- stack 3: 0x764
- stack 2: 0x12
- stack 1: 0x840
- stack 0: 0x3
6504	 364	ADD		 	 
- stack 2: 0x764
- stack 1: 0x12
- stack 0: 0x843
6505	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x764
- stack 2: 0x12
- stack 1: 0x843
- stack 0: 0xFFFFFFFF
6506	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x764
- stack 1: 0x12
- stack 0: 0x843
6507	 36B	PUSH1	03	 	 
- stack 3: 0x764
- stack 2: 0x12
- stack 1: 0x843
- stack 0: 0x3
6508	 36D	XOR		 	 
- stack 2: 0x764
- stack 1: 0x12
- stack 0: 0x840
6509	 36E	MSTORE8		 	 
- stack 0: 0x764
6510	 36F	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
6511	 371	ADD		 	 
- stack 0: 0x768
6512	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
6513	 373	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x3780003012C00120160009402B8000103AD000203C7FFD801460016030C0000
6514	 374	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x3780003012C00120160009402B8000103AD000203C7FFD801460016030C0000
- stack 0: 0xF0
6515	 376	SHR		 	 
- stack 1: 0x768
- stack 0: 0x378
6516	 377	JUMP		 	 
- stack 0: 0x768
6517	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x768
6518	 379	PUSH2	0040	 	 
- stack 1: 0x768
- stack 0: 0x40
6519	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x768
- stack 0: 0x840
6520	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x768
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
6521	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x768
- stack 0: 0x840
6522	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x768
- stack 1: 0x840
- stack 0: 0x768
6523	 384	MLOAD		 	 
- stack 2: 0x768
- stack 1: 0x840
- stack 0: 0x3780003012C00120160009402B8000103AD000203C7FFD801460016030C0000
6524	 385	PUSH1	E0	 	 
- stack 3: 0x768
- stack 2: 0x840
- stack 1: 0x3780003012C00120160009402B8000103AD000203C7FFD801460016030C0000
- stack 0: 0xE0
6525	 387	SHR		 	 
- stack 2: 0x768
- stack 1: 0x840
- stack 0: 0x3780003
6526	 388	PUSH2	FFFF	 	 
- stack 3: 0x768
- stack 2: 0x840
- stack 1: 0x3780003
- stack 0: 0xFFFF
6527	 38B	AND		 	 
- stack 2: 0x768
- stack 1: 0x840
- stack 0: 0x3
6528	 38C	PUSH1	01	 	 
- stack 3: 0x768
- stack 2: 0x840
- stack 1: 0x3
- stack 0: 0x1
6529	 38E	SIGNEXTEND		 	 
- stack 2: 0x768
- stack 1: 0x840
- stack 0: 0x3
6530	 38F	ADD		 	 
- stack 1: 0x768
- stack 0: 0x843
6531	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x768
- stack 1: 0x843
- stack 0: 0xFFFFFFFF
6532	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x768
- stack 0: 0x843
6533	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x768
- stack 1: 0x843
- stack 0: 0x3
6534	 398	XOR		 	 
- stack 1: 0x768
- stack 0: 0x840
6535	 399	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x122223330AA0ABBB000098780000000000000000000000000000000000000000
6536	 39A	PUSH1	F8	 	 
- stack 2: 0x768
- stack 1: 0x122223330AA0ABBB000098780000000000000000000000000000000000000000
- stack 0: 0xF8
6537	 39C	SHR		 	 
- stack 1: 0x768
- stack 0: 0x12
6538	 39D	PUSH1	00	 	 
- stack 2: 0x768
- stack 1: 0x12
- stack 0: 0x0
6539	 39F	SIGNEXTEND		 	 
- stack 1: 0x768
- stack 0: 0x12
6540	 3A0	PUSH2	0060	 	 
- stack 2: 0x768
- stack 1: 0x12
- stack 0: 0x60
6541	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x768
6542	 3A4	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
6543	 3A6	ADD		 	 
- stack 0: 0x76C
6544	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
6545	 3A8	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x12C00120160009402B8000103AD000203C7FFD801460016030C000003400000
6546	 3A9	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0x12C00120160009402B8000103AD000203C7FFD801460016030C000003400000
- stack 0: 0xF0
6547	 3AB	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x12C
6548	 3AC	JUMP		 	 
- stack 0: 0x76C
6549	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x76C
6550	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x76C
- stack 0: 0x76C
6551	 12E	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x12C00120160009402B8000103AD000203C7FFD801460016030C000003400000
6552	 12F	PUSH1	E0	 	 
- stack 2: 0x76C
- stack 1: 0x12C00120160009402B8000103AD000203C7FFD801460016030C000003400000
- stack 0: 0xE0
6553	 131	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x12C0012
6554	 132	PUSH2	FFFF	 	 
- stack 2: 0x76C
- stack 1: 0x12C0012
- stack 0: 0xFFFF
6555	 135	AND		 	 
- stack 1: 0x76C
- stack 0: 0x12
6556	 136	PUSH1	01	 	 
- stack 2: 0x76C
- stack 1: 0x12
- stack 0: 0x1
6557	 138	SIGNEXTEND		 	 
- stack 1: 0x76C
- stack 0: 0x12
6558	 139	PUSH2	03A0	 	 
- stack 2: 0x76C
- stack 1: 0x12
- stack 0: 0x3A0
6559	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x76C
6560	 13D	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
6561	 13F	ADD		 	 
- stack 0: 0x770
6562	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
6563	 141	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x160009402B8000103AD000203C7FFD801460016030C00000340000001B500B8
6564	 142	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x160009402B8000103AD000203C7FFD801460016030C00000340000001B500B8
- stack 0: 0xF0
6565	 144	SHR		 	 
- stack 1: 0x770
- stack 0: 0x160
6566	 145	JUMP		 	 
- stack 0: 0x770
6567	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x770
6568	 161	PUSH2	0060	 	 
- stack 1: 0x770
- stack 0: 0x60
6569	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x770
- stack 0: 0x12
6570	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x770
- stack 1: 0x12
- stack 0: 0xFFFFFFFF
6571	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x770
- stack 0: 0x12
6572	 16B	PUSH2	03A0	 	 
- stack 2: 0x770
- stack 1: 0x12
- stack 0: 0x3A0
6573	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x770
- stack 1: 0x12
- stack 0: 0x12
6574	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x770
- stack 2: 0x12
- stack 1: 0x12
- stack 0: 0xFFFFFFFF
6575	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x770
- stack 1: 0x12
- stack 0: 0x12
6576	 175	SUB		 	 
- stack 1: 0x770
- stack 0: 0x0
6577	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x770
- stack 1: 0x0
- stack 0: 0x17E
6578	 179	JUMPI		 	 
- stack 0: 0x770
6579	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x770
- stack 0: 0x198
6580	 17D	JUMP		 	 
- stack 0: 0x770
6581	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x770
6582	 199	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
6583	 19B	ADD		 	 
- stack 0: 0x774
6584	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
6585	 19D	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x2B8000103AD000203C7FFD801460016030C00000340000001B500B804090000
6586	 19E	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x2B8000103AD000203C7FFD801460016030C00000340000001B500B804090000
- stack 0: 0xF0
6587	 1A0	SHR		 	 
- stack 1: 0x774
- stack 0: 0x2B8
6588	 1A1	JUMP		 	 
- stack 0: 0x774
6589	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x774
6590	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x774
- stack 0: 0x774
6591	 2BA	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x2B8000103AD000203C7FFD801460016030C00000340000001B500B804090000
6592	 2BB	PUSH1	E0	 	 
- stack 2: 0x774
- stack 1: 0x2B8000103AD000203C7FFD801460016030C00000340000001B500B804090000
- stack 0: 0xE0
6593	 2BD	SHR		 	 
- stack 1: 0x774
- stack 0: 0x2B80001
6594	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x774
- stack 1: 0x2B80001
- stack 0: 0xFFFF
6595	 2C1	AND		 	 
- stack 1: 0x774
- stack 0: 0x1
6596	 2C2	PUSH1	01	 	 
- stack 2: 0x774
- stack 1: 0x1
- stack 0: 0x1
6597	 2C4	SIGNEXTEND		 	 
- stack 1: 0x774
- stack 0: 0x1
6598	 2C5	PUSH2	0080	 	 
- stack 2: 0x774
- stack 1: 0x1
- stack 0: 0x80
6599	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x774
- stack 1: 0x1
- stack 0: 0x0
6600	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x774
- stack 0: 0x1
6601	 2CA	PUSH2	0080	 	 
- stack 2: 0x774
- stack 1: 0x1
- stack 0: 0x80
6602	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x774
6603	 2CE	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
6604	 2D0	ADD		 	 
- stack 0: 0x778
6605	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
6606	 2D2	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x3AD000203C7FFD801460016030C00000340000001B500B80409000003260011
6607	 2D3	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x3AD000203C7FFD801460016030C00000340000001B500B80409000003260011
- stack 0: 0xF0
6608	 2D5	SHR		 	 
- stack 1: 0x778
- stack 0: 0x3AD
6609	 2D6	JUMP		 	 
- stack 0: 0x778
6610	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x778
6611	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x778
- stack 0: 0x778
6612	 3AF	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x3AD000203C7FFD801460016030C00000340000001B500B80409000003260011
6613	 3B0	PUSH1	E0	 	 
- stack 2: 0x778
- stack 1: 0x3AD000203C7FFD801460016030C00000340000001B500B80409000003260011
- stack 0: 0xE0
6614	 3B2	SHR		 	 
- stack 1: 0x778
- stack 0: 0x3AD0002
6615	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x778
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
6616	 3B6	AND		 	 
- stack 1: 0x778
- stack 0: 0x2
6617	 3B7	PUSH1	01	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0x1
6618	 3B9	SIGNEXTEND		 	 
- stack 1: 0x778
- stack 0: 0x2
6619	 3BA	PUSH2	00A0	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0xA0
6620	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x778
6621	 3BE	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
6622	 3C0	ADD		 	 
- stack 0: 0x77C
6623	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
6624	 3C2	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x3C7FFD801460016030C00000340000001B500B8040900000326001104090000
6625	 3C3	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x3C7FFD801460016030C00000340000001B500B8040900000326001104090000
- stack 0: 0xF0
6626	 3C5	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x3C7
6627	 3C6	JUMP		 	 
- stack 0: 0x77C
6628	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x77C
6629	 3C8	PUSH2	0080	 	 
- stack 1: 0x77C
- stack 0: 0x80
6630	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x77C
- stack 0: 0x1
6631	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6632	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x77C
- stack 0: 0x1
6633	 3D2	PUSH2	00A0	 	 
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0xA0
6634	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0x2
6635	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x77C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6636	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0x2
6637	 3DC	SUB		 	 
- stack 1: 0x77C
- stack 0: 0x1
6638	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0x3E5
6639	 3E0	JUMPI		 	 
- stack 0: 0x77C
6640	 3E5	JUMPDEST		 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x77C
6641	 3E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x77C
- stack 0: 0x77C
6642	 3E7	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x3C7FFD801460016030C00000340000001B500B8040900000326001104090000
6643	 3E8	PUSH1	E0	 	 
- stack 2: 0x77C
- stack 1: 0x3C7FFD801460016030C00000340000001B500B8040900000326001104090000
- stack 0: 0xE0
6644	 3EA	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x3C7FFD8
6645	 3EB	PUSH2	FFFF	 	 
- stack 2: 0x77C
- stack 1: 0x3C7FFD8
- stack 0: 0xFFFF
6646	 3EE	AND		 	 
- stack 1: 0x77C
- stack 0: 0xFFD8
6647	 3EF	PUSH1	01	 	 
- stack 2: 0x77C
- stack 1: 0xFFD8
- stack 0: 0x1
6648	 3F1	SIGNEXTEND		 	 
- stack 1: 0x77C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
6649	 3F2	ADD		 	 
- stack 0: 0x754
6650	 3F3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x754
- stack 0: 0xFFFFFFFF
6651	 3F8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x754
6652	 3F9	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
6653	 3FA	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x340000001B500EC0409000003260012034F000303780003012C001201600094
6654	 3FB	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x340000001B500EC0409000003260012034F000303780003012C001201600094
- stack 0: 0xF0
6655	 3FD	SHR		 	 
- stack 1: 0x754
- stack 0: 0x340
6656	 3FE	JUMP		 	 
- stack 0: 0x754
6657	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x754
6658	 341	DUP1		 	 
- stack 1: 0x754
- stack 0: 0x754
6659	 342	PUSH2	0040	 	 
- stack 2: 0x754
- stack 1: 0x754
- stack 0: 0x40
6660	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x754
6661	 346	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
6662	 348	ADD		 	 
- stack 0: 0x758
6663	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
6664	 34A	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x1B500EC0409000003260012034F000303780003012C00120160009402B80001
6665	 34B	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0x1B500EC0409000003260012034F000303780003012C00120160009402B80001
- stack 0: 0xF0
6666	 34D	SHR		 	 
- stack 1: 0x758
- stack 0: 0x1B5
6667	 34E	JUMP		 	 
- stack 0: 0x758
6668	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x758
6669	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x758
- stack 0: 0x758
6670	 1B7	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x1B500EC0409000003260012034F000303780003012C00120160009402B80001
6671	 1B8	PUSH1	E0	 	 
- stack 2: 0x758
- stack 1: 0x1B500EC0409000003260012034F000303780003012C00120160009402B80001
- stack 0: 0xE0
6672	 1BA	SHR		 	 
- stack 1: 0x758
- stack 0: 0x1B500EC
6673	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x758
- stack 1: 0x1B500EC
- stack 0: 0xFFFF
6674	 1BE	AND		 	 
- stack 1: 0x758
- stack 0: 0xEC
6675	 1BF	PUSH1	01	 	 
- stack 2: 0x758
- stack 1: 0xEC
- stack 0: 0x1
6676	 1C1	SIGNEXTEND		 	 
- stack 1: 0x758
- stack 0: 0xEC
6677	 1C2	PUSH2	0040	 	 
- stack 2: 0x758
- stack 1: 0xEC
- stack 0: 0x40
6678	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x758
- stack 1: 0xEC
- stack 0: 0x754
6679	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x758
- stack 0: 0x840
6680	 1C7	PUSH2	0040	 	 
- stack 2: 0x758
- stack 1: 0x840
- stack 0: 0x40
6681	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x758
6682	 1CB	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
6683	 1CD	ADD		 	 
- stack 0: 0x75C
6684	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
6685	 1CF	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x409000003260012034F000303780003012C00120160009402B8000103AD0002
6686	 1D0	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x409000003260012034F000303780003012C00120160009402B8000103AD0002
- stack 0: 0xF0
6687	 1D2	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x409
6688	 1D3	JUMP		 	 
- stack 0: 0x75C
6689	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x75C
6690	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
6691	 40B	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x409000003260012034F000303780003012C00120160009402B8000103AD0002
6692	 40C	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x409000003260012034F000303780003012C00120160009402B8000103AD0002
- stack 0: 0xE0
6693	 40E	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x4090000
6694	 40F	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x4090000
- stack 0: 0xFFFF
6695	 412	AND		 	 
- stack 1: 0x75C
- stack 0: 0x0
6696	 413	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x0
- stack 0: 0x1
6697	 415	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x0
6698	 416	POP		 	 
- stack 0: 0x75C
6699	 417	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
6700	 419	ADD		 	 
- stack 0: 0x760
6701	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
6702	 41B	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x3260012034F000303780003012C00120160009402B8000103AD000203C7FFD8
6703	 41C	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x3260012034F000303780003012C00120160009402B8000103AD000203C7FFD8
- stack 0: 0xF0
6704	 41E	SHR		 	 
- stack 1: 0x760
- stack 0: 0x326
6705	 41F	JUMP		 	 
- stack 0: 0x760
6706	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x760
6707	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
6708	 328	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x3260012034F000303780003012C00120160009402B8000103AD000203C7FFD8
6709	 329	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0x3260012034F000303780003012C00120160009402B8000103AD000203C7FFD8
- stack 0: 0xE0
6710	 32B	SHR		 	 
- stack 1: 0x760
- stack 0: 0x3260012
6711	 32C	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0x3260012
- stack 0: 0xFFFF
6712	 32F	AND		 	 
- stack 1: 0x760
- stack 0: 0x12
6713	 330	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x12
- stack 0: 0x1
6714	 332	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x12
6715	 333	PUSH2	0020	 	 
- stack 2: 0x760
- stack 1: 0x12
- stack 0: 0x20
6716	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x760
6717	 337	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
6718	 339	ADD		 	 
- stack 0: 0x764
6719	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
6720	 33B	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x34F000303780003012C00120160009402B8000103AD000203C7FFD801460016
6721	 33C	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x34F000303780003012C00120160009402B8000103AD000203C7FFD801460016
- stack 0: 0xF0
6722	 33E	SHR		 	 
- stack 1: 0x764
- stack 0: 0x34F
6723	 33F	JUMP		 	 
- stack 0: 0x764
6724	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x764
6725	 350	PUSH2	0020	 	 
- stack 1: 0x764
- stack 0: 0x20
6726	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x764
- stack 0: 0x12
6727	 354	PUSH2	0040	 	 
- stack 2: 0x764
- stack 1: 0x12
- stack 0: 0x40
6728	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x764
- stack 1: 0x12
- stack 0: 0x840
6729	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x764
- stack 2: 0x12
- stack 1: 0x840
- stack 0: 0x764
6730	 359	MLOAD		 	 
- stack 3: 0x764
- stack 2: 0x12
- stack 1: 0x840
- stack 0: 0x34F000303780003012C00120160009402B8000103AD000203C7FFD801460016
6731	 35A	PUSH1	E0	 	 
- stack 4: 0x764
- stack 3: 0x12
- stack 2: 0x840
- stack 1: 0x34F000303780003012C00120160009402B8000103AD000203C7FFD801460016
- stack 0: 0xE0
6732	 35C	SHR		 	 
- stack 3: 0x764
- stack 2: 0x12
- stack 1: 0x840
- stack 0: 0x34F0003
6733	 35D	PUSH2	FFFF	 	 
- stack 4: 0x764
- stack 3: 0x12
- stack 2: 0x840
- stack 1: 0x34F0003
- stack 0: 0xFFFF
6734	 360	AND		 	 
- stack 3: 0x764
- stack 2: 0x12
- stack 1: 0x840
- stack 0: 0x3
6735	 361	PUSH1	01	 	 
- stack 4: 0x764
- stack 3: 0x12
- stack 2: 0x840
- stack 1: 0x3
- stack 0: 0x1
6736	 363	SIGNEXTEND		 	 
- stack 3: 0x764
- stack 2: 0x12
- stack 1: 0x840
- stack 0: 0x3
6737	 364	ADD		 	 
- stack 2: 0x764
- stack 1: 0x12
- stack 0: 0x843
6738	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x764
- stack 2: 0x12
- stack 1: 0x843
- stack 0: 0xFFFFFFFF
6739	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x764
- stack 1: 0x12
- stack 0: 0x843
6740	 36B	PUSH1	03	 	 
- stack 3: 0x764
- stack 2: 0x12
- stack 1: 0x843
- stack 0: 0x3
6741	 36D	XOR		 	 
- stack 2: 0x764
- stack 1: 0x12
- stack 0: 0x840
6742	 36E	MSTORE8		 	 
- stack 0: 0x764
6743	 36F	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
6744	 371	ADD		 	 
- stack 0: 0x768
6745	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
6746	 373	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x3780003012C00120160009402B8000103AD000203C7FFD801460016030C0000
6747	 374	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x3780003012C00120160009402B8000103AD000203C7FFD801460016030C0000
- stack 0: 0xF0
6748	 376	SHR		 	 
- stack 1: 0x768
- stack 0: 0x378
6749	 377	JUMP		 	 
- stack 0: 0x768
6750	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x768
6751	 379	PUSH2	0040	 	 
- stack 1: 0x768
- stack 0: 0x40
6752	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x768
- stack 0: 0x840
6753	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x768
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
6754	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x768
- stack 0: 0x840
6755	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x768
- stack 1: 0x840
- stack 0: 0x768
6756	 384	MLOAD		 	 
- stack 2: 0x768
- stack 1: 0x840
- stack 0: 0x3780003012C00120160009402B8000103AD000203C7FFD801460016030C0000
6757	 385	PUSH1	E0	 	 
- stack 3: 0x768
- stack 2: 0x840
- stack 1: 0x3780003012C00120160009402B8000103AD000203C7FFD801460016030C0000
- stack 0: 0xE0
6758	 387	SHR		 	 
- stack 2: 0x768
- stack 1: 0x840
- stack 0: 0x3780003
6759	 388	PUSH2	FFFF	 	 
- stack 3: 0x768
- stack 2: 0x840
- stack 1: 0x3780003
- stack 0: 0xFFFF
6760	 38B	AND		 	 
- stack 2: 0x768
- stack 1: 0x840
- stack 0: 0x3
6761	 38C	PUSH1	01	 	 
- stack 3: 0x768
- stack 2: 0x840
- stack 1: 0x3
- stack 0: 0x1
6762	 38E	SIGNEXTEND		 	 
- stack 2: 0x768
- stack 1: 0x840
- stack 0: 0x3
6763	 38F	ADD		 	 
- stack 1: 0x768
- stack 0: 0x843
6764	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x768
- stack 1: 0x843
- stack 0: 0xFFFFFFFF
6765	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x768
- stack 0: 0x843
6766	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x768
- stack 1: 0x843
- stack 0: 0x3
6767	 398	XOR		 	 
- stack 1: 0x768
- stack 0: 0x840
6768	 399	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x122223330AA0ABBB000098780000000000000000000000000000000000000000
6769	 39A	PUSH1	F8	 	 
- stack 2: 0x768
- stack 1: 0x122223330AA0ABBB000098780000000000000000000000000000000000000000
- stack 0: 0xF8
6770	 39C	SHR		 	 
- stack 1: 0x768
- stack 0: 0x12
6771	 39D	PUSH1	00	 	 
- stack 2: 0x768
- stack 1: 0x12
- stack 0: 0x0
6772	 39F	SIGNEXTEND		 	 
- stack 1: 0x768
- stack 0: 0x12
6773	 3A0	PUSH2	0060	 	 
- stack 2: 0x768
- stack 1: 0x12
- stack 0: 0x60
6774	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x768
6775	 3A4	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
6776	 3A6	ADD		 	 
- stack 0: 0x76C
6777	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
6778	 3A8	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x12C00120160009402B8000103AD000203C7FFD801460016030C000003400000
6779	 3A9	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0x12C00120160009402B8000103AD000203C7FFD801460016030C000003400000
- stack 0: 0xF0
6780	 3AB	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x12C
6781	 3AC	JUMP		 	 
- stack 0: 0x76C
6782	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x76C
6783	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x76C
- stack 0: 0x76C
6784	 12E	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x12C00120160009402B8000103AD000203C7FFD801460016030C000003400000
6785	 12F	PUSH1	E0	 	 
- stack 2: 0x76C
- stack 1: 0x12C00120160009402B8000103AD000203C7FFD801460016030C000003400000
- stack 0: 0xE0
6786	 131	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x12C0012
6787	 132	PUSH2	FFFF	 	 
- stack 2: 0x76C
- stack 1: 0x12C0012
- stack 0: 0xFFFF
6788	 135	AND		 	 
- stack 1: 0x76C
- stack 0: 0x12
6789	 136	PUSH1	01	 	 
- stack 2: 0x76C
- stack 1: 0x12
- stack 0: 0x1
6790	 138	SIGNEXTEND		 	 
- stack 1: 0x76C
- stack 0: 0x12
6791	 139	PUSH2	03A0	 	 
- stack 2: 0x76C
- stack 1: 0x12
- stack 0: 0x3A0
6792	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x76C
6793	 13D	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
6794	 13F	ADD		 	 
- stack 0: 0x770
6795	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
6796	 141	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x160009402B8000103AD000203C7FFD801460016030C00000340000001B500B8
6797	 142	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x160009402B8000103AD000203C7FFD801460016030C00000340000001B500B8
- stack 0: 0xF0
6798	 144	SHR		 	 
- stack 1: 0x770
- stack 0: 0x160
6799	 145	JUMP		 	 
- stack 0: 0x770
6800	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x770
6801	 161	PUSH2	0060	 	 
- stack 1: 0x770
- stack 0: 0x60
6802	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x770
- stack 0: 0x12
6803	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x770
- stack 1: 0x12
- stack 0: 0xFFFFFFFF
6804	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x770
- stack 0: 0x12
6805	 16B	PUSH2	03A0	 	 
- stack 2: 0x770
- stack 1: 0x12
- stack 0: 0x3A0
6806	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x770
- stack 1: 0x12
- stack 0: 0x12
6807	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x770
- stack 2: 0x12
- stack 1: 0x12
- stack 0: 0xFFFFFFFF
6808	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x770
- stack 1: 0x12
- stack 0: 0x12
6809	 175	SUB		 	 
- stack 1: 0x770
- stack 0: 0x0
6810	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x770
- stack 1: 0x0
- stack 0: 0x17E
6811	 179	JUMPI		 	 
- stack 0: 0x770
6812	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x770
- stack 0: 0x198
6813	 17D	JUMP		 	 
- stack 0: 0x770
6814	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x770
6815	 199	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
6816	 19B	ADD		 	 
- stack 0: 0x774
6817	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
6818	 19D	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x2B8000103AD000203C7FFD801460016030C00000340000001B500B804090000
6819	 19E	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x2B8000103AD000203C7FFD801460016030C00000340000001B500B804090000
- stack 0: 0xF0
6820	 1A0	SHR		 	 
- stack 1: 0x774
- stack 0: 0x2B8
6821	 1A1	JUMP		 	 
- stack 0: 0x774
6822	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x774
6823	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x774
- stack 0: 0x774
6824	 2BA	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x2B8000103AD000203C7FFD801460016030C00000340000001B500B804090000
6825	 2BB	PUSH1	E0	 	 
- stack 2: 0x774
- stack 1: 0x2B8000103AD000203C7FFD801460016030C00000340000001B500B804090000
- stack 0: 0xE0
6826	 2BD	SHR		 	 
- stack 1: 0x774
- stack 0: 0x2B80001
6827	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x774
- stack 1: 0x2B80001
- stack 0: 0xFFFF
6828	 2C1	AND		 	 
- stack 1: 0x774
- stack 0: 0x1
6829	 2C2	PUSH1	01	 	 
- stack 2: 0x774
- stack 1: 0x1
- stack 0: 0x1
6830	 2C4	SIGNEXTEND		 	 
- stack 1: 0x774
- stack 0: 0x1
6831	 2C5	PUSH2	0080	 	 
- stack 2: 0x774
- stack 1: 0x1
- stack 0: 0x80
6832	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x774
- stack 1: 0x1
- stack 0: 0x1
6833	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x774
- stack 0: 0x2
6834	 2CA	PUSH2	0080	 	 
- stack 2: 0x774
- stack 1: 0x2
- stack 0: 0x80
6835	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x774
6836	 2CE	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
6837	 2D0	ADD		 	 
- stack 0: 0x778
6838	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
6839	 2D2	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x3AD000203C7FFD801460016030C00000340000001B500B80409000003260011
6840	 2D3	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x3AD000203C7FFD801460016030C00000340000001B500B80409000003260011
- stack 0: 0xF0
6841	 2D5	SHR		 	 
- stack 1: 0x778
- stack 0: 0x3AD
6842	 2D6	JUMP		 	 
- stack 0: 0x778
6843	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x778
6844	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x778
- stack 0: 0x778
6845	 3AF	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x3AD000203C7FFD801460016030C00000340000001B500B80409000003260011
6846	 3B0	PUSH1	E0	 	 
- stack 2: 0x778
- stack 1: 0x3AD000203C7FFD801460016030C00000340000001B500B80409000003260011
- stack 0: 0xE0
6847	 3B2	SHR		 	 
- stack 1: 0x778
- stack 0: 0x3AD0002
6848	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x778
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
6849	 3B6	AND		 	 
- stack 1: 0x778
- stack 0: 0x2
6850	 3B7	PUSH1	01	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0x1
6851	 3B9	SIGNEXTEND		 	 
- stack 1: 0x778
- stack 0: 0x2
6852	 3BA	PUSH2	00A0	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0xA0
6853	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x778
6854	 3BE	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
6855	 3C0	ADD		 	 
- stack 0: 0x77C
6856	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
6857	 3C2	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x3C7FFD801460016030C00000340000001B500B8040900000326001104090000
6858	 3C3	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x3C7FFD801460016030C00000340000001B500B8040900000326001104090000
- stack 0: 0xF0
6859	 3C5	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x3C7
6860	 3C6	JUMP		 	 
- stack 0: 0x77C
6861	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x77C
6862	 3C8	PUSH2	0080	 	 
- stack 1: 0x77C
- stack 0: 0x80
6863	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x77C
- stack 0: 0x2
6864	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x77C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6865	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x77C
- stack 0: 0x2
6866	 3D2	PUSH2	00A0	 	 
- stack 2: 0x77C
- stack 1: 0x2
- stack 0: 0xA0
6867	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x77C
- stack 1: 0x2
- stack 0: 0x2
6868	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x77C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6869	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x77C
- stack 1: 0x2
- stack 0: 0x2
6870	 3DC	SUB		 	 
- stack 1: 0x77C
- stack 0: 0x0
6871	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x77C
- stack 1: 0x0
- stack 0: 0x3E5
6872	 3E0	JUMPI		 	 
- stack 0: 0x77C
6873	 3E1	PUSH2	03FF	 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 1: 0x77C
- stack 0: 0x3FF
6874	 3E4	JUMP		 	 
- stack 0: 0x77C
6875	 3FF	JUMPDEST		 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x77C
6876	 400	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
6877	 402	ADD		 	 
- stack 0: 0x780
6878	 403	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
6879	 404	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x1460016030C00000340000001B500B8040900000326001104090000034F0004
6880	 405	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0x1460016030C00000340000001B500B8040900000326001104090000034F0004
- stack 0: 0xF0
6881	 407	SHR		 	 
- stack 1: 0x780
- stack 0: 0x146
6882	 408	JUMP		 	 
- stack 0: 0x780
6883	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x780
6884	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x780
- stack 0: 0x780
6885	 148	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x1460016030C00000340000001B500B8040900000326001104090000034F0004
6886	 149	PUSH1	E0	 	 
- stack 2: 0x780
- stack 1: 0x1460016030C00000340000001B500B8040900000326001104090000034F0004
- stack 0: 0xE0
6887	 14B	SHR		 	 
- stack 1: 0x780
- stack 0: 0x1460016
6888	 14C	PUSH2	FFFF	 	 
- stack 2: 0x780
- stack 1: 0x1460016
- stack 0: 0xFFFF
6889	 14F	AND		 	 
- stack 1: 0x780
- stack 0: 0x16
6890	 150	PUSH1	01	 	 
- stack 2: 0x780
- stack 1: 0x16
- stack 0: 0x1
6891	 152	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0x16
6892	 153	PUSH2	0380	 	 
- stack 2: 0x780
- stack 1: 0x16
- stack 0: 0x380
6893	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x780
6894	 157	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
6895	 159	ADD		 	 
- stack 0: 0x784
6896	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
6897	 15B	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x30C00000340000001B500B8040900000326001104090000034F000403780004
6898	 15C	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0x30C00000340000001B500B8040900000326001104090000034F000403780004
- stack 0: 0xF0
6899	 15E	SHR		 	 
- stack 1: 0x784
- stack 0: 0x30C
6900	 15F	JUMP		 	 
- stack 0: 0x784
6901	 30C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x784
6902	 30D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x784
- stack 0: 0x784
6903	 30E	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x30C00000340000001B500B8040900000326001104090000034F000403780004
6904	 30F	PUSH1	E0	 	 
- stack 2: 0x784
- stack 1: 0x30C00000340000001B500B8040900000326001104090000034F000403780004
- stack 0: 0xE0
6905	 311	SHR		 	 
- stack 1: 0x784
- stack 0: 0x30C0000
6906	 312	PUSH2	FFFF	 	 
- stack 2: 0x784
- stack 1: 0x30C0000
- stack 0: 0xFFFF
6907	 315	AND		 	 
- stack 1: 0x784
- stack 0: 0x0
6908	 316	PUSH1	01	 	 
- stack 2: 0x784
- stack 1: 0x0
- stack 0: 0x1
6909	 318	SIGNEXTEND		 	 
- stack 1: 0x784
- stack 0: 0x0
6910	 319	PUSH2	0080	 	 
- stack 2: 0x784
- stack 1: 0x0
- stack 0: 0x80
6911	 31C	MSTORE		 	  ;; # store to x4
- stack 0: 0x784
6912	 31D	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
6913	 31F	ADD		 	 
- stack 0: 0x788
6914	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
6915	 321	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x340000001B500B8040900000326001104090000034F000403780004012C0011
6916	 322	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x340000001B500B8040900000326001104090000034F000403780004012C0011
- stack 0: 0xF0
6917	 324	SHR		 	 
- stack 1: 0x788
- stack 0: 0x340
6918	 325	JUMP		 	 
- stack 0: 0x788
6919	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x788
6920	 341	DUP1		 	 
- stack 1: 0x788
- stack 0: 0x788
6921	 342	PUSH2	0040	 	 
- stack 2: 0x788
- stack 1: 0x788
- stack 0: 0x40
6922	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x788
6923	 346	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
6924	 348	ADD		 	 
- stack 0: 0x78C
6925	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
6926	 34A	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x1B500B8040900000326001104090000034F000403780004012C00110160005C
6927	 34B	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x1B500B8040900000326001104090000034F000403780004012C00110160005C
- stack 0: 0xF0
6928	 34D	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x1B5
6929	 34E	JUMP		 	 
- stack 0: 0x78C
6930	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x78C
6931	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
6932	 1B7	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x1B500B8040900000326001104090000034F000403780004012C00110160005C
6933	 1B8	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0x1B500B8040900000326001104090000034F000403780004012C00110160005C
- stack 0: 0xE0
6934	 1BA	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x1B500B8
6935	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0x1B500B8
- stack 0: 0xFFFF
6936	 1BE	AND		 	 
- stack 1: 0x78C
- stack 0: 0xB8
6937	 1BF	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0xB8
- stack 0: 0x1
6938	 1C1	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0xB8
6939	 1C2	PUSH2	0040	 	 
- stack 2: 0x78C
- stack 1: 0xB8
- stack 0: 0x40
6940	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x78C
- stack 1: 0xB8
- stack 0: 0x788
6941	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x78C
- stack 0: 0x840
6942	 1C7	PUSH2	0040	 	 
- stack 2: 0x78C
- stack 1: 0x840
- stack 0: 0x40
6943	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x78C
6944	 1CB	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
6945	 1CD	ADD		 	 
- stack 0: 0x790
6946	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
6947	 1CF	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x40900000326001104090000034F000403780004012C00110160005C02B80001
6948	 1D0	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x40900000326001104090000034F000403780004012C00110160005C02B80001
- stack 0: 0xF0
6949	 1D2	SHR		 	 
- stack 1: 0x790
- stack 0: 0x409
6950	 1D3	JUMP		 	 
- stack 0: 0x790
6951	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x790
6952	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
6953	 40B	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x40900000326001104090000034F000403780004012C00110160005C02B80001
6954	 40C	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0x40900000326001104090000034F000403780004012C00110160005C02B80001
- stack 0: 0xE0
6955	 40E	SHR		 	 
- stack 1: 0x790
- stack 0: 0x4090000
6956	 40F	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0x4090000
- stack 0: 0xFFFF
6957	 412	AND		 	 
- stack 1: 0x790
- stack 0: 0x0
6958	 413	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0x0
- stack 0: 0x1
6959	 415	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0x0
6960	 416	POP		 	 
- stack 0: 0x790
6961	 417	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
6962	 419	ADD		 	 
- stack 0: 0x794
6963	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
6964	 41B	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x326001104090000034F000403780004012C00110160005C02B8000103AD0002
6965	 41C	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0x326001104090000034F000403780004012C00110160005C02B8000103AD0002
- stack 0: 0xF0
6966	 41E	SHR		 	 
- stack 1: 0x794
- stack 0: 0x326
6967	 41F	JUMP		 	 
- stack 0: 0x794
6968	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x794
6969	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x794
- stack 0: 0x794
6970	 328	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x326001104090000034F000403780004012C00110160005C02B8000103AD0002
6971	 329	PUSH1	E0	 	 
- stack 2: 0x794
- stack 1: 0x326001104090000034F000403780004012C00110160005C02B8000103AD0002
- stack 0: 0xE0
6972	 32B	SHR		 	 
- stack 1: 0x794
- stack 0: 0x3260011
6973	 32C	PUSH2	FFFF	 	 
- stack 2: 0x794
- stack 1: 0x3260011
- stack 0: 0xFFFF
6974	 32F	AND		 	 
- stack 1: 0x794
- stack 0: 0x11
6975	 330	PUSH1	01	 	 
- stack 2: 0x794
- stack 1: 0x11
- stack 0: 0x1
6976	 332	SIGNEXTEND		 	 
- stack 1: 0x794
- stack 0: 0x11
6977	 333	PUSH2	0020	 	 
- stack 2: 0x794
- stack 1: 0x11
- stack 0: 0x20
6978	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x794
6979	 337	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
6980	 339	ADD		 	 
- stack 0: 0x798
6981	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
6982	 33B	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x4090000034F000403780004012C00110160005C02B8000103AD000203C7FFD4
6983	 33C	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0x4090000034F000403780004012C00110160005C02B8000103AD000203C7FFD4
- stack 0: 0xF0
6984	 33E	SHR		 	 
- stack 1: 0x798
- stack 0: 0x409
6985	 33F	JUMP		 	 
- stack 0: 0x798
6986	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x798
6987	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x798
- stack 0: 0x798
6988	 40B	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x4090000034F000403780004012C00110160005C02B8000103AD000203C7FFD4
6989	 40C	PUSH1	E0	 	 
- stack 2: 0x798
- stack 1: 0x4090000034F000403780004012C00110160005C02B8000103AD000203C7FFD4
- stack 0: 0xE0
6990	 40E	SHR		 	 
- stack 1: 0x798
- stack 0: 0x4090000
6991	 40F	PUSH2	FFFF	 	 
- stack 2: 0x798
- stack 1: 0x4090000
- stack 0: 0xFFFF
6992	 412	AND		 	 
- stack 1: 0x798
- stack 0: 0x0
6993	 413	PUSH1	01	 	 
- stack 2: 0x798
- stack 1: 0x0
- stack 0: 0x1
6994	 415	SIGNEXTEND		 	 
- stack 1: 0x798
- stack 0: 0x0
6995	 416	POP		 	 
- stack 0: 0x798
6996	 417	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
6997	 419	ADD		 	 
- stack 0: 0x79C
6998	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
6999	 41B	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x34F000403780004012C00110160005C02B8000103AD000203C7FFD401460017
7000	 41C	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x34F000403780004012C00110160005C02B8000103AD000203C7FFD401460017
- stack 0: 0xF0
7001	 41E	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x34F
7002	 41F	JUMP		 	 
- stack 0: 0x79C
7003	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x79C
7004	 350	PUSH2	0020	 	 
- stack 1: 0x79C
- stack 0: 0x20
7005	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x79C
- stack 0: 0x11
7006	 354	PUSH2	0040	 	 
- stack 2: 0x79C
- stack 1: 0x11
- stack 0: 0x40
7007	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x79C
- stack 1: 0x11
- stack 0: 0x840
7008	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x79C
- stack 2: 0x11
- stack 1: 0x840
- stack 0: 0x79C
7009	 359	MLOAD		 	 
- stack 3: 0x79C
- stack 2: 0x11
- stack 1: 0x840
- stack 0: 0x34F000403780004012C00110160005C02B8000103AD000203C7FFD401460017
7010	 35A	PUSH1	E0	 	 
- stack 4: 0x79C
- stack 3: 0x11
- stack 2: 0x840
- stack 1: 0x34F000403780004012C00110160005C02B8000103AD000203C7FFD401460017
- stack 0: 0xE0
7011	 35C	SHR		 	 
- stack 3: 0x79C
- stack 2: 0x11
- stack 1: 0x840
- stack 0: 0x34F0004
7012	 35D	PUSH2	FFFF	 	 
- stack 4: 0x79C
- stack 3: 0x11
- stack 2: 0x840
- stack 1: 0x34F0004
- stack 0: 0xFFFF
7013	 360	AND		 	 
- stack 3: 0x79C
- stack 2: 0x11
- stack 1: 0x840
- stack 0: 0x4
7014	 361	PUSH1	01	 	 
- stack 4: 0x79C
- stack 3: 0x11
- stack 2: 0x840
- stack 1: 0x4
- stack 0: 0x1
7015	 363	SIGNEXTEND		 	 
- stack 3: 0x79C
- stack 2: 0x11
- stack 1: 0x840
- stack 0: 0x4
7016	 364	ADD		 	 
- stack 2: 0x79C
- stack 1: 0x11
- stack 0: 0x844
7017	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x79C
- stack 2: 0x11
- stack 1: 0x844
- stack 0: 0xFFFFFFFF
7018	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x79C
- stack 1: 0x11
- stack 0: 0x844
7019	 36B	PUSH1	03	 	 
- stack 3: 0x79C
- stack 2: 0x11
- stack 1: 0x844
- stack 0: 0x3
7020	 36D	XOR		 	 
- stack 2: 0x79C
- stack 1: 0x11
- stack 0: 0x847
7021	 36E	MSTORE8		 	 
- stack 0: 0x79C
7022	 36F	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
7023	 371	ADD		 	 
- stack 0: 0x7A0
7024	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
7025	 373	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x3780004012C00110160005C02B8000103AD000203C7FFD401460017030C0000
7026	 374	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x3780004012C00110160005C02B8000103AD000203C7FFD401460017030C0000
- stack 0: 0xF0
7027	 376	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x378
7028	 377	JUMP		 	 
- stack 0: 0x7A0
7029	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x7A0
7030	 379	PUSH2	0040	 	 
- stack 1: 0x7A0
- stack 0: 0x40
7031	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x7A0
- stack 0: 0x840
7032	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
7033	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A0
- stack 0: 0x840
7034	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7A0
- stack 1: 0x840
- stack 0: 0x7A0
7035	 384	MLOAD		 	 
- stack 2: 0x7A0
- stack 1: 0x840
- stack 0: 0x3780004012C00110160005C02B8000103AD000203C7FFD401460017030C0000
7036	 385	PUSH1	E0	 	 
- stack 3: 0x7A0
- stack 2: 0x840
- stack 1: 0x3780004012C00110160005C02B8000103AD000203C7FFD401460017030C0000
- stack 0: 0xE0
7037	 387	SHR		 	 
- stack 2: 0x7A0
- stack 1: 0x840
- stack 0: 0x3780004
7038	 388	PUSH2	FFFF	 	 
- stack 3: 0x7A0
- stack 2: 0x840
- stack 1: 0x3780004
- stack 0: 0xFFFF
7039	 38B	AND		 	 
- stack 2: 0x7A0
- stack 1: 0x840
- stack 0: 0x4
7040	 38C	PUSH1	01	 	 
- stack 3: 0x7A0
- stack 2: 0x840
- stack 1: 0x4
- stack 0: 0x1
7041	 38E	SIGNEXTEND		 	 
- stack 2: 0x7A0
- stack 1: 0x840
- stack 0: 0x4
7042	 38F	ADD		 	 
- stack 1: 0x7A0
- stack 0: 0x844
7043	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x844
- stack 0: 0xFFFFFFFF
7044	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A0
- stack 0: 0x844
7045	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x7A0
- stack 1: 0x844
- stack 0: 0x3
7046	 398	XOR		 	 
- stack 1: 0x7A0
- stack 0: 0x847
7047	 399	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x1100009878000000000000000000000000000000000000000000000000000000
7048	 39A	PUSH1	F8	 	 
- stack 2: 0x7A0
- stack 1: 0x1100009878000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
7049	 39C	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x11
7050	 39D	PUSH1	00	 	 
- stack 2: 0x7A0
- stack 1: 0x11
- stack 0: 0x0
7051	 39F	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x11
7052	 3A0	PUSH2	0060	 	 
- stack 2: 0x7A0
- stack 1: 0x11
- stack 0: 0x60
7053	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x7A0
7054	 3A4	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
7055	 3A6	ADD		 	 
- stack 0: 0x7A4
7056	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
7057	 3A8	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x12C00110160005C02B8000103AD000203C7FFD401460017030C000003400000
7058	 3A9	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x12C00110160005C02B8000103AD000203C7FFD401460017030C000003400000
- stack 0: 0xF0
7059	 3AB	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x12C
7060	 3AC	JUMP		 	 
- stack 0: 0x7A4
7061	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x7A4
7062	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A4
- stack 0: 0x7A4
7063	 12E	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x12C00110160005C02B8000103AD000203C7FFD401460017030C000003400000
7064	 12F	PUSH1	E0	 	 
- stack 2: 0x7A4
- stack 1: 0x12C00110160005C02B8000103AD000203C7FFD401460017030C000003400000
- stack 0: 0xE0
7065	 131	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x12C0011
7066	 132	PUSH2	FFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x12C0011
- stack 0: 0xFFFF
7067	 135	AND		 	 
- stack 1: 0x7A4
- stack 0: 0x11
7068	 136	PUSH1	01	 	 
- stack 2: 0x7A4
- stack 1: 0x11
- stack 0: 0x1
7069	 138	SIGNEXTEND		 	 
- stack 1: 0x7A4
- stack 0: 0x11
7070	 139	PUSH2	03A0	 	 
- stack 2: 0x7A4
- stack 1: 0x11
- stack 0: 0x3A0
7071	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x7A4
7072	 13D	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
7073	 13F	ADD		 	 
- stack 0: 0x7A8
7074	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
7075	 141	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x160005C02B8000103AD000203C7FFD401460017030C00000340000001B50080
7076	 142	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x160005C02B8000103AD000203C7FFD401460017030C00000340000001B50080
- stack 0: 0xF0
7077	 144	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x160
7078	 145	JUMP		 	 
- stack 0: 0x7A8
7079	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x7A8
7080	 161	PUSH2	0060	 	 
- stack 1: 0x7A8
- stack 0: 0x60
7081	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x7A8
- stack 0: 0x11
7082	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x11
- stack 0: 0xFFFFFFFF
7083	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A8
- stack 0: 0x11
7084	 16B	PUSH2	03A0	 	 
- stack 2: 0x7A8
- stack 1: 0x11
- stack 0: 0x3A0
7085	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x7A8
- stack 1: 0x11
- stack 0: 0x11
7086	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7A8
- stack 2: 0x11
- stack 1: 0x11
- stack 0: 0xFFFFFFFF
7087	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7A8
- stack 1: 0x11
- stack 0: 0x11
7088	 175	SUB		 	 
- stack 1: 0x7A8
- stack 0: 0x0
7089	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x7A8
- stack 1: 0x0
- stack 0: 0x17E
7090	 179	JUMPI		 	 
- stack 0: 0x7A8
7091	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x7A8
- stack 0: 0x198
7092	 17D	JUMP		 	 
- stack 0: 0x7A8
7093	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x7A8
7094	 199	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
7095	 19B	ADD		 	 
- stack 0: 0x7AC
7096	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
7097	 19D	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x2B8000103AD000203C7FFD401460017030C00000340000001B5008004090000
7098	 19E	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0x2B8000103AD000203C7FFD401460017030C00000340000001B5008004090000
- stack 0: 0xF0
7099	 1A0	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x2B8
7100	 1A1	JUMP		 	 
- stack 0: 0x7AC
7101	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x7AC
7102	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7AC
- stack 0: 0x7AC
7103	 2BA	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x2B8000103AD000203C7FFD401460017030C00000340000001B5008004090000
7104	 2BB	PUSH1	E0	 	 
- stack 2: 0x7AC
- stack 1: 0x2B8000103AD000203C7FFD401460017030C00000340000001B5008004090000
- stack 0: 0xE0
7105	 2BD	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x2B80001
7106	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x7AC
- stack 1: 0x2B80001
- stack 0: 0xFFFF
7107	 2C1	AND		 	 
- stack 1: 0x7AC
- stack 0: 0x1
7108	 2C2	PUSH1	01	 	 
- stack 2: 0x7AC
- stack 1: 0x1
- stack 0: 0x1
7109	 2C4	SIGNEXTEND		 	 
- stack 1: 0x7AC
- stack 0: 0x1
7110	 2C5	PUSH2	0080	 	 
- stack 2: 0x7AC
- stack 1: 0x1
- stack 0: 0x80
7111	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x7AC
- stack 1: 0x1
- stack 0: 0x0
7112	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x7AC
- stack 0: 0x1
7113	 2CA	PUSH2	0080	 	 
- stack 2: 0x7AC
- stack 1: 0x1
- stack 0: 0x80
7114	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x7AC
7115	 2CE	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
7116	 2D0	ADD		 	 
- stack 0: 0x7B0
7117	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
7118	 2D2	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x3AD000203C7FFD401460017030C00000340000001B500800409000004090000
7119	 2D3	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x3AD000203C7FFD401460017030C00000340000001B500800409000004090000
- stack 0: 0xF0
7120	 2D5	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x3AD
7121	 2D6	JUMP		 	 
- stack 0: 0x7B0
7122	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7B0
7123	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B0
- stack 0: 0x7B0
7124	 3AF	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x3AD000203C7FFD401460017030C00000340000001B500800409000004090000
7125	 3B0	PUSH1	E0	 	 
- stack 2: 0x7B0
- stack 1: 0x3AD000203C7FFD401460017030C00000340000001B500800409000004090000
- stack 0: 0xE0
7126	 3B2	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x3AD0002
7127	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x7B0
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
7128	 3B6	AND		 	 
- stack 1: 0x7B0
- stack 0: 0x2
7129	 3B7	PUSH1	01	 	 
- stack 2: 0x7B0
- stack 1: 0x2
- stack 0: 0x1
7130	 3B9	SIGNEXTEND		 	 
- stack 1: 0x7B0
- stack 0: 0x2
7131	 3BA	PUSH2	00A0	 	 
- stack 2: 0x7B0
- stack 1: 0x2
- stack 0: 0xA0
7132	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x7B0
7133	 3BE	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
7134	 3C0	ADD		 	 
- stack 0: 0x7B4
7135	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
7136	 3C2	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x3C7FFD401460017030C00000340000001B50080040900000409000003260001
7137	 3C3	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0x3C7FFD401460017030C00000340000001B50080040900000409000003260001
- stack 0: 0xF0
7138	 3C5	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x3C7
7139	 3C6	JUMP		 	 
- stack 0: 0x7B4
7140	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x7B4
7141	 3C8	PUSH2	0080	 	 
- stack 1: 0x7B4
- stack 0: 0x80
7142	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x7B4
- stack 0: 0x1
7143	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7144	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B4
- stack 0: 0x1
7145	 3D2	PUSH2	00A0	 	 
- stack 2: 0x7B4
- stack 1: 0x1
- stack 0: 0xA0
7146	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x7B4
- stack 1: 0x1
- stack 0: 0x2
7147	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7B4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7148	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7B4
- stack 1: 0x1
- stack 0: 0x2
7149	 3DC	SUB		 	 
- stack 1: 0x7B4
- stack 0: 0x1
7150	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x7B4
- stack 1: 0x1
- stack 0: 0x3E5
7151	 3E0	JUMPI		 	 
- stack 0: 0x7B4
7152	 3E5	JUMPDEST		 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x7B4
7153	 3E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B4
- stack 0: 0x7B4
7154	 3E7	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x3C7FFD401460017030C00000340000001B50080040900000409000003260001
7155	 3E8	PUSH1	E0	 	 
- stack 2: 0x7B4
- stack 1: 0x3C7FFD401460017030C00000340000001B50080040900000409000003260001
- stack 0: 0xE0
7156	 3EA	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x3C7FFD4
7157	 3EB	PUSH2	FFFF	 	 
- stack 2: 0x7B4
- stack 1: 0x3C7FFD4
- stack 0: 0xFFFF
7158	 3EE	AND		 	 
- stack 1: 0x7B4
- stack 0: 0xFFD4
7159	 3EF	PUSH1	01	 	 
- stack 2: 0x7B4
- stack 1: 0xFFD4
- stack 0: 0x1
7160	 3F1	SIGNEXTEND		 	 
- stack 1: 0x7B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4
7161	 3F2	ADD		 	 
- stack 0: 0x788
7162	 3F3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x788
- stack 0: 0xFFFFFFFF
7163	 3F8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x788
7164	 3F9	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
7165	 3FA	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x340000001B500B8040900000326001104090000034F000403780004012C0011
7166	 3FB	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x340000001B500B8040900000326001104090000034F000403780004012C0011
- stack 0: 0xF0
7167	 3FD	SHR		 	 
- stack 1: 0x788
- stack 0: 0x340
7168	 3FE	JUMP		 	 
- stack 0: 0x788
7169	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x788
7170	 341	DUP1		 	 
- stack 1: 0x788
- stack 0: 0x788
7171	 342	PUSH2	0040	 	 
- stack 2: 0x788
- stack 1: 0x788
- stack 0: 0x40
7172	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x788
7173	 346	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
7174	 348	ADD		 	 
- stack 0: 0x78C
7175	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
7176	 34A	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x1B500B8040900000326001104090000034F000403780004012C00110160005C
7177	 34B	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x1B500B8040900000326001104090000034F000403780004012C00110160005C
- stack 0: 0xF0
7178	 34D	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x1B5
7179	 34E	JUMP		 	 
- stack 0: 0x78C
7180	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x78C
7181	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
7182	 1B7	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x1B500B8040900000326001104090000034F000403780004012C00110160005C
7183	 1B8	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0x1B500B8040900000326001104090000034F000403780004012C00110160005C
- stack 0: 0xE0
7184	 1BA	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x1B500B8
7185	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0x1B500B8
- stack 0: 0xFFFF
7186	 1BE	AND		 	 
- stack 1: 0x78C
- stack 0: 0xB8
7187	 1BF	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0xB8
- stack 0: 0x1
7188	 1C1	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0xB8
7189	 1C2	PUSH2	0040	 	 
- stack 2: 0x78C
- stack 1: 0xB8
- stack 0: 0x40
7190	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x78C
- stack 1: 0xB8
- stack 0: 0x788
7191	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x78C
- stack 0: 0x840
7192	 1C7	PUSH2	0040	 	 
- stack 2: 0x78C
- stack 1: 0x840
- stack 0: 0x40
7193	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x78C
7194	 1CB	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
7195	 1CD	ADD		 	 
- stack 0: 0x790
7196	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
7197	 1CF	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x40900000326001104090000034F000403780004012C00110160005C02B80001
7198	 1D0	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x40900000326001104090000034F000403780004012C00110160005C02B80001
- stack 0: 0xF0
7199	 1D2	SHR		 	 
- stack 1: 0x790
- stack 0: 0x409
7200	 1D3	JUMP		 	 
- stack 0: 0x790
7201	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x790
7202	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
7203	 40B	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x40900000326001104090000034F000403780004012C00110160005C02B80001
7204	 40C	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0x40900000326001104090000034F000403780004012C00110160005C02B80001
- stack 0: 0xE0
7205	 40E	SHR		 	 
- stack 1: 0x790
- stack 0: 0x4090000
7206	 40F	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0x4090000
- stack 0: 0xFFFF
7207	 412	AND		 	 
- stack 1: 0x790
- stack 0: 0x0
7208	 413	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0x0
- stack 0: 0x1
7209	 415	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0x0
7210	 416	POP		 	 
- stack 0: 0x790
7211	 417	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
7212	 419	ADD		 	 
- stack 0: 0x794
7213	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
7214	 41B	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x326001104090000034F000403780004012C00110160005C02B8000103AD0002
7215	 41C	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0x326001104090000034F000403780004012C00110160005C02B8000103AD0002
- stack 0: 0xF0
7216	 41E	SHR		 	 
- stack 1: 0x794
- stack 0: 0x326
7217	 41F	JUMP		 	 
- stack 0: 0x794
7218	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x794
7219	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x794
- stack 0: 0x794
7220	 328	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x326001104090000034F000403780004012C00110160005C02B8000103AD0002
7221	 329	PUSH1	E0	 	 
- stack 2: 0x794
- stack 1: 0x326001104090000034F000403780004012C00110160005C02B8000103AD0002
- stack 0: 0xE0
7222	 32B	SHR		 	 
- stack 1: 0x794
- stack 0: 0x3260011
7223	 32C	PUSH2	FFFF	 	 
- stack 2: 0x794
- stack 1: 0x3260011
- stack 0: 0xFFFF
7224	 32F	AND		 	 
- stack 1: 0x794
- stack 0: 0x11
7225	 330	PUSH1	01	 	 
- stack 2: 0x794
- stack 1: 0x11
- stack 0: 0x1
7226	 332	SIGNEXTEND		 	 
- stack 1: 0x794
- stack 0: 0x11
7227	 333	PUSH2	0020	 	 
- stack 2: 0x794
- stack 1: 0x11
- stack 0: 0x20
7228	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x794
7229	 337	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
7230	 339	ADD		 	 
- stack 0: 0x798
7231	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
7232	 33B	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x4090000034F000403780004012C00110160005C02B8000103AD000203C7FFD4
7233	 33C	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0x4090000034F000403780004012C00110160005C02B8000103AD000203C7FFD4
- stack 0: 0xF0
7234	 33E	SHR		 	 
- stack 1: 0x798
- stack 0: 0x409
7235	 33F	JUMP		 	 
- stack 0: 0x798
7236	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x798
7237	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x798
- stack 0: 0x798
7238	 40B	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x4090000034F000403780004012C00110160005C02B8000103AD000203C7FFD4
7239	 40C	PUSH1	E0	 	 
- stack 2: 0x798
- stack 1: 0x4090000034F000403780004012C00110160005C02B8000103AD000203C7FFD4
- stack 0: 0xE0
7240	 40E	SHR		 	 
- stack 1: 0x798
- stack 0: 0x4090000
7241	 40F	PUSH2	FFFF	 	 
- stack 2: 0x798
- stack 1: 0x4090000
- stack 0: 0xFFFF
7242	 412	AND		 	 
- stack 1: 0x798
- stack 0: 0x0
7243	 413	PUSH1	01	 	 
- stack 2: 0x798
- stack 1: 0x0
- stack 0: 0x1
7244	 415	SIGNEXTEND		 	 
- stack 1: 0x798
- stack 0: 0x0
7245	 416	POP		 	 
- stack 0: 0x798
7246	 417	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
7247	 419	ADD		 	 
- stack 0: 0x79C
7248	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
7249	 41B	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x34F000403780004012C00110160005C02B8000103AD000203C7FFD401460017
7250	 41C	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x34F000403780004012C00110160005C02B8000103AD000203C7FFD401460017
- stack 0: 0xF0
7251	 41E	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x34F
7252	 41F	JUMP		 	 
- stack 0: 0x79C
7253	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x79C
7254	 350	PUSH2	0020	 	 
- stack 1: 0x79C
- stack 0: 0x20
7255	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x79C
- stack 0: 0x11
7256	 354	PUSH2	0040	 	 
- stack 2: 0x79C
- stack 1: 0x11
- stack 0: 0x40
7257	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x79C
- stack 1: 0x11
- stack 0: 0x840
7258	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x79C
- stack 2: 0x11
- stack 1: 0x840
- stack 0: 0x79C
7259	 359	MLOAD		 	 
- stack 3: 0x79C
- stack 2: 0x11
- stack 1: 0x840
- stack 0: 0x34F000403780004012C00110160005C02B8000103AD000203C7FFD401460017
7260	 35A	PUSH1	E0	 	 
- stack 4: 0x79C
- stack 3: 0x11
- stack 2: 0x840
- stack 1: 0x34F000403780004012C00110160005C02B8000103AD000203C7FFD401460017
- stack 0: 0xE0
7261	 35C	SHR		 	 
- stack 3: 0x79C
- stack 2: 0x11
- stack 1: 0x840
- stack 0: 0x34F0004
7262	 35D	PUSH2	FFFF	 	 
- stack 4: 0x79C
- stack 3: 0x11
- stack 2: 0x840
- stack 1: 0x34F0004
- stack 0: 0xFFFF
7263	 360	AND		 	 
- stack 3: 0x79C
- stack 2: 0x11
- stack 1: 0x840
- stack 0: 0x4
7264	 361	PUSH1	01	 	 
- stack 4: 0x79C
- stack 3: 0x11
- stack 2: 0x840
- stack 1: 0x4
- stack 0: 0x1
7265	 363	SIGNEXTEND		 	 
- stack 3: 0x79C
- stack 2: 0x11
- stack 1: 0x840
- stack 0: 0x4
7266	 364	ADD		 	 
- stack 2: 0x79C
- stack 1: 0x11
- stack 0: 0x844
7267	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x79C
- stack 2: 0x11
- stack 1: 0x844
- stack 0: 0xFFFFFFFF
7268	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x79C
- stack 1: 0x11
- stack 0: 0x844
7269	 36B	PUSH1	03	 	 
- stack 3: 0x79C
- stack 2: 0x11
- stack 1: 0x844
- stack 0: 0x3
7270	 36D	XOR		 	 
- stack 2: 0x79C
- stack 1: 0x11
- stack 0: 0x847
7271	 36E	MSTORE8		 	 
- stack 0: 0x79C
7272	 36F	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
7273	 371	ADD		 	 
- stack 0: 0x7A0
7274	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
7275	 373	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x3780004012C00110160005C02B8000103AD000203C7FFD401460017030C0000
7276	 374	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x3780004012C00110160005C02B8000103AD000203C7FFD401460017030C0000
- stack 0: 0xF0
7277	 376	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x378
7278	 377	JUMP		 	 
- stack 0: 0x7A0
7279	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x7A0
7280	 379	PUSH2	0040	 	 
- stack 1: 0x7A0
- stack 0: 0x40
7281	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x7A0
- stack 0: 0x840
7282	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
7283	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A0
- stack 0: 0x840
7284	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7A0
- stack 1: 0x840
- stack 0: 0x7A0
7285	 384	MLOAD		 	 
- stack 2: 0x7A0
- stack 1: 0x840
- stack 0: 0x3780004012C00110160005C02B8000103AD000203C7FFD401460017030C0000
7286	 385	PUSH1	E0	 	 
- stack 3: 0x7A0
- stack 2: 0x840
- stack 1: 0x3780004012C00110160005C02B8000103AD000203C7FFD401460017030C0000
- stack 0: 0xE0
7287	 387	SHR		 	 
- stack 2: 0x7A0
- stack 1: 0x840
- stack 0: 0x3780004
7288	 388	PUSH2	FFFF	 	 
- stack 3: 0x7A0
- stack 2: 0x840
- stack 1: 0x3780004
- stack 0: 0xFFFF
7289	 38B	AND		 	 
- stack 2: 0x7A0
- stack 1: 0x840
- stack 0: 0x4
7290	 38C	PUSH1	01	 	 
- stack 3: 0x7A0
- stack 2: 0x840
- stack 1: 0x4
- stack 0: 0x1
7291	 38E	SIGNEXTEND		 	 
- stack 2: 0x7A0
- stack 1: 0x840
- stack 0: 0x4
7292	 38F	ADD		 	 
- stack 1: 0x7A0
- stack 0: 0x844
7293	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x844
- stack 0: 0xFFFFFFFF
7294	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A0
- stack 0: 0x844
7295	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x7A0
- stack 1: 0x844
- stack 0: 0x3
7296	 398	XOR		 	 
- stack 1: 0x7A0
- stack 0: 0x847
7297	 399	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x1100009878000000000000000000000000000000000000000000000000000000
7298	 39A	PUSH1	F8	 	 
- stack 2: 0x7A0
- stack 1: 0x1100009878000000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
7299	 39C	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x11
7300	 39D	PUSH1	00	 	 
- stack 2: 0x7A0
- stack 1: 0x11
- stack 0: 0x0
7301	 39F	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x11
7302	 3A0	PUSH2	0060	 	 
- stack 2: 0x7A0
- stack 1: 0x11
- stack 0: 0x60
7303	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x7A0
7304	 3A4	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
7305	 3A6	ADD		 	 
- stack 0: 0x7A4
7306	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
7307	 3A8	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x12C00110160005C02B8000103AD000203C7FFD401460017030C000003400000
7308	 3A9	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x12C00110160005C02B8000103AD000203C7FFD401460017030C000003400000
- stack 0: 0xF0
7309	 3AB	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x12C
7310	 3AC	JUMP		 	 
- stack 0: 0x7A4
7311	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x7A4
7312	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A4
- stack 0: 0x7A4
7313	 12E	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x12C00110160005C02B8000103AD000203C7FFD401460017030C000003400000
7314	 12F	PUSH1	E0	 	 
- stack 2: 0x7A4
- stack 1: 0x12C00110160005C02B8000103AD000203C7FFD401460017030C000003400000
- stack 0: 0xE0
7315	 131	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x12C0011
7316	 132	PUSH2	FFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x12C0011
- stack 0: 0xFFFF
7317	 135	AND		 	 
- stack 1: 0x7A4
- stack 0: 0x11
7318	 136	PUSH1	01	 	 
- stack 2: 0x7A4
- stack 1: 0x11
- stack 0: 0x1
7319	 138	SIGNEXTEND		 	 
- stack 1: 0x7A4
- stack 0: 0x11
7320	 139	PUSH2	03A0	 	 
- stack 2: 0x7A4
- stack 1: 0x11
- stack 0: 0x3A0
7321	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x7A4
7322	 13D	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
7323	 13F	ADD		 	 
- stack 0: 0x7A8
7324	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
7325	 141	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x160005C02B8000103AD000203C7FFD401460017030C00000340000001B50080
7326	 142	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x160005C02B8000103AD000203C7FFD401460017030C00000340000001B50080
- stack 0: 0xF0
7327	 144	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x160
7328	 145	JUMP		 	 
- stack 0: 0x7A8
7329	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x7A8
7330	 161	PUSH2	0060	 	 
- stack 1: 0x7A8
- stack 0: 0x60
7331	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x7A8
- stack 0: 0x11
7332	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x11
- stack 0: 0xFFFFFFFF
7333	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A8
- stack 0: 0x11
7334	 16B	PUSH2	03A0	 	 
- stack 2: 0x7A8
- stack 1: 0x11
- stack 0: 0x3A0
7335	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x7A8
- stack 1: 0x11
- stack 0: 0x11
7336	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7A8
- stack 2: 0x11
- stack 1: 0x11
- stack 0: 0xFFFFFFFF
7337	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7A8
- stack 1: 0x11
- stack 0: 0x11
7338	 175	SUB		 	 
- stack 1: 0x7A8
- stack 0: 0x0
7339	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x7A8
- stack 1: 0x0
- stack 0: 0x17E
7340	 179	JUMPI		 	 
- stack 0: 0x7A8
7341	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x7A8
- stack 0: 0x198
7342	 17D	JUMP		 	 
- stack 0: 0x7A8
7343	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x7A8
7344	 199	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
7345	 19B	ADD		 	 
- stack 0: 0x7AC
7346	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
7347	 19D	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x2B8000103AD000203C7FFD401460017030C00000340000001B5008004090000
7348	 19E	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0x2B8000103AD000203C7FFD401460017030C00000340000001B5008004090000
- stack 0: 0xF0
7349	 1A0	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x2B8
7350	 1A1	JUMP		 	 
- stack 0: 0x7AC
7351	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x7AC
7352	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7AC
- stack 0: 0x7AC
7353	 2BA	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x2B8000103AD000203C7FFD401460017030C00000340000001B5008004090000
7354	 2BB	PUSH1	E0	 	 
- stack 2: 0x7AC
- stack 1: 0x2B8000103AD000203C7FFD401460017030C00000340000001B5008004090000
- stack 0: 0xE0
7355	 2BD	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x2B80001
7356	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x7AC
- stack 1: 0x2B80001
- stack 0: 0xFFFF
7357	 2C1	AND		 	 
- stack 1: 0x7AC
- stack 0: 0x1
7358	 2C2	PUSH1	01	 	 
- stack 2: 0x7AC
- stack 1: 0x1
- stack 0: 0x1
7359	 2C4	SIGNEXTEND		 	 
- stack 1: 0x7AC
- stack 0: 0x1
7360	 2C5	PUSH2	0080	 	 
- stack 2: 0x7AC
- stack 1: 0x1
- stack 0: 0x80
7361	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x7AC
- stack 1: 0x1
- stack 0: 0x1
7362	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x7AC
- stack 0: 0x2
7363	 2CA	PUSH2	0080	 	 
- stack 2: 0x7AC
- stack 1: 0x2
- stack 0: 0x80
7364	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x7AC
7365	 2CE	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
7366	 2D0	ADD		 	 
- stack 0: 0x7B0
7367	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
7368	 2D2	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x3AD000203C7FFD401460017030C00000340000001B500800409000004090000
7369	 2D3	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x3AD000203C7FFD401460017030C00000340000001B500800409000004090000
- stack 0: 0xF0
7370	 2D5	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x3AD
7371	 2D6	JUMP		 	 
- stack 0: 0x7B0
7372	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7B0
7373	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B0
- stack 0: 0x7B0
7374	 3AF	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x3AD000203C7FFD401460017030C00000340000001B500800409000004090000
7375	 3B0	PUSH1	E0	 	 
- stack 2: 0x7B0
- stack 1: 0x3AD000203C7FFD401460017030C00000340000001B500800409000004090000
- stack 0: 0xE0
7376	 3B2	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x3AD0002
7377	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x7B0
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
7378	 3B6	AND		 	 
- stack 1: 0x7B0
- stack 0: 0x2
7379	 3B7	PUSH1	01	 	 
- stack 2: 0x7B0
- stack 1: 0x2
- stack 0: 0x1
7380	 3B9	SIGNEXTEND		 	 
- stack 1: 0x7B0
- stack 0: 0x2
7381	 3BA	PUSH2	00A0	 	 
- stack 2: 0x7B0
- stack 1: 0x2
- stack 0: 0xA0
7382	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x7B0
7383	 3BE	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
7384	 3C0	ADD		 	 
- stack 0: 0x7B4
7385	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
7386	 3C2	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x3C7FFD401460017030C00000340000001B50080040900000409000003260001
7387	 3C3	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0x3C7FFD401460017030C00000340000001B50080040900000409000003260001
- stack 0: 0xF0
7388	 3C5	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x3C7
7389	 3C6	JUMP		 	 
- stack 0: 0x7B4
7390	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x7B4
7391	 3C8	PUSH2	0080	 	 
- stack 1: 0x7B4
- stack 0: 0x80
7392	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x7B4
- stack 0: 0x2
7393	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7394	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B4
- stack 0: 0x2
7395	 3D2	PUSH2	00A0	 	 
- stack 2: 0x7B4
- stack 1: 0x2
- stack 0: 0xA0
7396	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x7B4
- stack 1: 0x2
- stack 0: 0x2
7397	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7B4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7398	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7B4
- stack 1: 0x2
- stack 0: 0x2
7399	 3DC	SUB		 	 
- stack 1: 0x7B4
- stack 0: 0x0
7400	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x7B4
- stack 1: 0x0
- stack 0: 0x3E5
7401	 3E0	JUMPI		 	 
- stack 0: 0x7B4
7402	 3E1	PUSH2	03FF	 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 1: 0x7B4
- stack 0: 0x3FF
7403	 3E4	JUMP		 	 
- stack 0: 0x7B4
7404	 3FF	JUMPDEST		 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x7B4
7405	 400	PUSH1	04	 	 
- stack 1: 0x7B4
- stack 0: 0x4
7406	 402	ADD		 	 
- stack 0: 0x7B8
7407	 403	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
7408	 404	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x1460017030C00000340000001B50080040900000409000003260001034F0005
7409	 405	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0x1460017030C00000340000001B50080040900000409000003260001034F0005
- stack 0: 0xF0
7410	 407	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x146
7411	 408	JUMP		 	 
- stack 0: 0x7B8
7412	 146	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7B8
7413	 147	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B8
- stack 0: 0x7B8
7414	 148	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x1460017030C00000340000001B50080040900000409000003260001034F0005
7415	 149	PUSH1	E0	 	 
- stack 2: 0x7B8
- stack 1: 0x1460017030C00000340000001B50080040900000409000003260001034F0005
- stack 0: 0xE0
7416	 14B	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x1460017
7417	 14C	PUSH2	FFFF	 	 
- stack 2: 0x7B8
- stack 1: 0x1460017
- stack 0: 0xFFFF
7418	 14F	AND		 	 
- stack 1: 0x7B8
- stack 0: 0x17
7419	 150	PUSH1	01	 	 
- stack 2: 0x7B8
- stack 1: 0x17
- stack 0: 0x1
7420	 152	SIGNEXTEND		 	 
- stack 1: 0x7B8
- stack 0: 0x17
7421	 153	PUSH2	0380	 	 
- stack 2: 0x7B8
- stack 1: 0x17
- stack 0: 0x380
7422	 156	MSTORE		 	  ;; # store to x28
- stack 0: 0x7B8
7423	 157	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
7424	 159	ADD		 	 
- stack 0: 0x7BC
7425	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
7426	 15B	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x30C00000340000001B50080040900000409000003260001034F000503780005
7427	 15C	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0x30C00000340000001B50080040900000409000003260001034F000503780005
- stack 0: 0xF0
7428	 15E	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x30C
7429	 15F	JUMP		 	 
- stack 0: 0x7BC
7430	 30C	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7BC
7431	 30D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7BC
- stack 0: 0x7BC
7432	 30E	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x30C00000340000001B50080040900000409000003260001034F000503780005
7433	 30F	PUSH1	E0	 	 
- stack 2: 0x7BC
- stack 1: 0x30C00000340000001B50080040900000409000003260001034F000503780005
- stack 0: 0xE0
7434	 311	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x30C0000
7435	 312	PUSH2	FFFF	 	 
- stack 2: 0x7BC
- stack 1: 0x30C0000
- stack 0: 0xFFFF
7436	 315	AND		 	 
- stack 1: 0x7BC
- stack 0: 0x0
7437	 316	PUSH1	01	 	 
- stack 2: 0x7BC
- stack 1: 0x0
- stack 0: 0x1
7438	 318	SIGNEXTEND		 	 
- stack 1: 0x7BC
- stack 0: 0x0
7439	 319	PUSH2	0080	 	 
- stack 2: 0x7BC
- stack 1: 0x0
- stack 0: 0x80
7440	 31C	MSTORE		 	  ;; # store to x4
- stack 0: 0x7BC
7441	 31D	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
7442	 31F	ADD		 	 
- stack 0: 0x7C0
7443	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
7444	 321	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x340000001B50080040900000409000003260001034F000503780005012C0001
7445	 322	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x340000001B50080040900000409000003260001034F000503780005012C0001
- stack 0: 0xF0
7446	 324	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x340
7447	 325	JUMP		 	 
- stack 0: 0x7C0
7448	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x7C0
7449	 341	DUP1		 	 
- stack 1: 0x7C0
- stack 0: 0x7C0
7450	 342	PUSH2	0040	 	 
- stack 2: 0x7C0
- stack 1: 0x7C0
- stack 0: 0x40
7451	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x7C0
7452	 346	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
7453	 348	ADD		 	 
- stack 0: 0x7C4
7454	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
7455	 34A	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x1B50080040900000409000003260001034F000503780005012C000101600024
7456	 34B	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x1B50080040900000409000003260001034F000503780005012C000101600024
- stack 0: 0xF0
7457	 34D	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x1B5
7458	 34E	JUMP		 	 
- stack 0: 0x7C4
7459	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x7C4
7460	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C4
- stack 0: 0x7C4
7461	 1B7	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x1B50080040900000409000003260001034F000503780005012C000101600024
7462	 1B8	PUSH1	E0	 	 
- stack 2: 0x7C4
- stack 1: 0x1B50080040900000409000003260001034F000503780005012C000101600024
- stack 0: 0xE0
7463	 1BA	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x1B50080
7464	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x7C4
- stack 1: 0x1B50080
- stack 0: 0xFFFF
7465	 1BE	AND		 	 
- stack 1: 0x7C4
- stack 0: 0x80
7466	 1BF	PUSH1	01	 	 
- stack 2: 0x7C4
- stack 1: 0x80
- stack 0: 0x1
7467	 1C1	SIGNEXTEND		 	 
- stack 1: 0x7C4
- stack 0: 0x80
7468	 1C2	PUSH2	0040	 	 
- stack 2: 0x7C4
- stack 1: 0x80
- stack 0: 0x40
7469	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x7C4
- stack 1: 0x80
- stack 0: 0x7C0
7470	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x7C4
- stack 0: 0x840
7471	 1C7	PUSH2	0040	 	 
- stack 2: 0x7C4
- stack 1: 0x840
- stack 0: 0x40
7472	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x7C4
7473	 1CB	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
7474	 1CD	ADD		 	 
- stack 0: 0x7C8
7475	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
7476	 1CF	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x40900000409000003260001034F000503780005012C00010160002402B80001
7477	 1D0	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x40900000409000003260001034F000503780005012C00010160002402B80001
- stack 0: 0xF0
7478	 1D2	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x409
7479	 1D3	JUMP		 	 
- stack 0: 0x7C8
7480	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C8
7481	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
7482	 40B	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x40900000409000003260001034F000503780005012C00010160002402B80001
7483	 40C	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x40900000409000003260001034F000503780005012C00010160002402B80001
- stack 0: 0xE0
7484	 40E	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x4090000
7485	 40F	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x4090000
- stack 0: 0xFFFF
7486	 412	AND		 	 
- stack 1: 0x7C8
- stack 0: 0x0
7487	 413	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0x0
- stack 0: 0x1
7488	 415	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0x0
7489	 416	POP		 	 
- stack 0: 0x7C8
7490	 417	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
7491	 419	ADD		 	 
- stack 0: 0x7CC
7492	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
7493	 41B	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x409000003260001034F000503780005012C00010160002402B8000103AD0002
7494	 41C	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x409000003260001034F000503780005012C00010160002402B8000103AD0002
- stack 0: 0xF0
7495	 41E	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x409
7496	 41F	JUMP		 	 
- stack 0: 0x7CC
7497	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7CC
7498	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
7499	 40B	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x409000003260001034F000503780005012C00010160002402B8000103AD0002
7500	 40C	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x409000003260001034F000503780005012C00010160002402B8000103AD0002
- stack 0: 0xE0
7501	 40E	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x4090000
7502	 40F	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x4090000
- stack 0: 0xFFFF
7503	 412	AND		 	 
- stack 1: 0x7CC
- stack 0: 0x0
7504	 413	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0x0
- stack 0: 0x1
7505	 415	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0x0
7506	 416	POP		 	 
- stack 0: 0x7CC
7507	 417	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
7508	 419	ADD		 	 
- stack 0: 0x7D0
7509	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
7510	 41B	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3260001034F000503780005012C00010160002402B8000103AD000203C7FFD4
7511	 41C	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x3260001034F000503780005012C00010160002402B8000103AD000203C7FFD4
- stack 0: 0xF0
7512	 41E	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x326
7513	 41F	JUMP		 	 
- stack 0: 0x7D0
7514	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x7D0
7515	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
7516	 328	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3260001034F000503780005012C00010160002402B8000103AD000203C7FFD4
7517	 329	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x3260001034F000503780005012C00010160002402B8000103AD000203C7FFD4
- stack 0: 0xE0
7518	 32B	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3260001
7519	 32C	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x3260001
- stack 0: 0xFFFF
7520	 32F	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x1
7521	 330	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x1
7522	 332	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x1
7523	 333	PUSH2	0020	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x20
7524	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x7D0
7525	 337	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
7526	 339	ADD		 	 
- stack 0: 0x7D4
7527	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
7528	 33B	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x34F000503780005012C00010160002402B8000103AD000203C7FFD4042000EF
7529	 33C	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x34F000503780005012C00010160002402B8000103AD000203C7FFD4042000EF
- stack 0: 0xF0
7530	 33E	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x34F
7531	 33F	JUMP		 	 
- stack 0: 0x7D4
7532	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x7D4
7533	 350	PUSH2	0020	 	 
- stack 1: 0x7D4
- stack 0: 0x20
7534	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x7D4
- stack 0: 0x1
7535	 354	PUSH2	0040	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x40
7536	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x840
7537	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x840
- stack 0: 0x7D4
7538	 359	MLOAD		 	 
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x840
- stack 0: 0x34F000503780005012C00010160002402B8000103AD000203C7FFD4042000EF
7539	 35A	PUSH1	E0	 	 
- stack 4: 0x7D4
- stack 3: 0x1
- stack 2: 0x840
- stack 1: 0x34F000503780005012C00010160002402B8000103AD000203C7FFD4042000EF
- stack 0: 0xE0
7540	 35C	SHR		 	 
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x840
- stack 0: 0x34F0005
7541	 35D	PUSH2	FFFF	 	 
- stack 4: 0x7D4
- stack 3: 0x1
- stack 2: 0x840
- stack 1: 0x34F0005
- stack 0: 0xFFFF
7542	 360	AND		 	 
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x840
- stack 0: 0x5
7543	 361	PUSH1	01	 	 
- stack 4: 0x7D4
- stack 3: 0x1
- stack 2: 0x840
- stack 1: 0x5
- stack 0: 0x1
7544	 363	SIGNEXTEND		 	 
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x840
- stack 0: 0x5
7545	 364	ADD		 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x845
7546	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x845
- stack 0: 0xFFFFFFFF
7547	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x845
7548	 36B	PUSH1	03	 	 
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x845
- stack 0: 0x3
7549	 36D	XOR		 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x846
7550	 36E	MSTORE8		 	 
- stack 0: 0x7D4
7551	 36F	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
7552	 371	ADD		 	 
- stack 0: 0x7D8
7553	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
7554	 373	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x3780005012C00010160002402B8000103AD000203C7FFD4042000EF043A0000
7555	 374	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x3780005012C00010160002402B8000103AD000203C7FFD4042000EF043A0000
- stack 0: 0xF0
7556	 376	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x378
7557	 377	JUMP		 	 
- stack 0: 0x7D8
7558	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x7D8
7559	 379	PUSH2	0040	 	 
- stack 1: 0x7D8
- stack 0: 0x40
7560	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x7D8
- stack 0: 0x840
7561	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
7562	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D8
- stack 0: 0x840
7563	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7D8
- stack 1: 0x840
- stack 0: 0x7D8
7564	 384	MLOAD		 	 
- stack 2: 0x7D8
- stack 1: 0x840
- stack 0: 0x3780005012C00010160002402B8000103AD000203C7FFD4042000EF043A0000
7565	 385	PUSH1	E0	 	 
- stack 3: 0x7D8
- stack 2: 0x840
- stack 1: 0x3780005012C00010160002402B8000103AD000203C7FFD4042000EF043A0000
- stack 0: 0xE0
7566	 387	SHR		 	 
- stack 2: 0x7D8
- stack 1: 0x840
- stack 0: 0x3780005
7567	 388	PUSH2	FFFF	 	 
- stack 3: 0x7D8
- stack 2: 0x840
- stack 1: 0x3780005
- stack 0: 0xFFFF
7568	 38B	AND		 	 
- stack 2: 0x7D8
- stack 1: 0x840
- stack 0: 0x5
7569	 38C	PUSH1	01	 	 
- stack 3: 0x7D8
- stack 2: 0x840
- stack 1: 0x5
- stack 0: 0x1
7570	 38E	SIGNEXTEND		 	 
- stack 2: 0x7D8
- stack 1: 0x840
- stack 0: 0x5
7571	 38F	ADD		 	 
- stack 1: 0x7D8
- stack 0: 0x845
7572	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x845
- stack 0: 0xFFFFFFFF
7573	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D8
- stack 0: 0x845
7574	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x7D8
- stack 1: 0x845
- stack 0: 0x3
7575	 398	XOR		 	 
- stack 1: 0x7D8
- stack 0: 0x846
7576	 399	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x111000098780000000000000000000000000000000000000000000000000000
7577	 39A	PUSH1	F8	 	 
- stack 2: 0x7D8
- stack 1: 0x111000098780000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
7578	 39C	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x1
7579	 39D	PUSH1	00	 	 
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x0
7580	 39F	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0x1
7581	 3A0	PUSH2	0060	 	 
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x60
7582	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x7D8
7583	 3A4	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
7584	 3A6	ADD		 	 
- stack 0: 0x7DC
7585	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
7586	 3A8	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x12C00010160002402B8000103AD000203C7FFD4042000EF043A00000034004C
7587	 3A9	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0x12C00010160002402B8000103AD000203C7FFD4042000EF043A00000034004C
- stack 0: 0xF0
7588	 3AB	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x12C
7589	 3AC	JUMP		 	 
- stack 0: 0x7DC
7590	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x7DC
7591	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7DC
- stack 0: 0x7DC
7592	 12E	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x12C00010160002402B8000103AD000203C7FFD4042000EF043A00000034004C
7593	 12F	PUSH1	E0	 	 
- stack 2: 0x7DC
- stack 1: 0x12C00010160002402B8000103AD000203C7FFD4042000EF043A00000034004C
- stack 0: 0xE0
7594	 131	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x12C0001
7595	 132	PUSH2	FFFF	 	 
- stack 2: 0x7DC
- stack 1: 0x12C0001
- stack 0: 0xFFFF
7596	 135	AND		 	 
- stack 1: 0x7DC
- stack 0: 0x1
7597	 136	PUSH1	01	 	 
- stack 2: 0x7DC
- stack 1: 0x1
- stack 0: 0x1
7598	 138	SIGNEXTEND		 	 
- stack 1: 0x7DC
- stack 0: 0x1
7599	 139	PUSH2	03A0	 	 
- stack 2: 0x7DC
- stack 1: 0x1
- stack 0: 0x3A0
7600	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x7DC
7601	 13D	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
7602	 13F	ADD		 	 
- stack 0: 0x7E0
7603	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
7604	 141	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x160002402B8000103AD000203C7FFD4042000EF043A00000034004C04490003
7605	 142	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x160002402B8000103AD000203C7FFD4042000EF043A00000034004C04490003
- stack 0: 0xF0
7606	 144	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x160
7607	 145	JUMP		 	 
- stack 0: 0x7E0
7608	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x7E0
7609	 161	PUSH2	0060	 	 
- stack 1: 0x7E0
- stack 0: 0x60
7610	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x7E0
- stack 0: 0x1
7611	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7612	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E0
- stack 0: 0x1
7613	 16B	PUSH2	03A0	 	 
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x3A0
7614	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x1
7615	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7E0
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7616	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x1
7617	 175	SUB		 	 
- stack 1: 0x7E0
- stack 0: 0x0
7618	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x7E0
- stack 1: 0x0
- stack 0: 0x17E
7619	 179	JUMPI		 	 
- stack 0: 0x7E0
7620	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x7E0
- stack 0: 0x198
7621	 17D	JUMP		 	 
- stack 0: 0x7E0
7622	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x7E0
7623	 199	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
7624	 19B	ADD		 	 
- stack 0: 0x7E4
7625	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
7626	 19D	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x2B8000103AD000203C7FFD4042000EF043A00000034004C0449000304720018
7627	 19E	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0x2B8000103AD000203C7FFD4042000EF043A00000034004C0449000304720018
- stack 0: 0xF0
7628	 1A0	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x2B8
7629	 1A1	JUMP		 	 
- stack 0: 0x7E4
7630	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x7E4
7631	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
7632	 2BA	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x2B8000103AD000203C7FFD4042000EF043A00000034004C0449000304720018
7633	 2BB	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0x2B8000103AD000203C7FFD4042000EF043A00000034004C0449000304720018
- stack 0: 0xE0
7634	 2BD	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x2B80001
7635	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0x2B80001
- stack 0: 0xFFFF
7636	 2C1	AND		 	 
- stack 1: 0x7E4
- stack 0: 0x1
7637	 2C2	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0x1
- stack 0: 0x1
7638	 2C4	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0x1
7639	 2C5	PUSH2	0080	 	 
- stack 2: 0x7E4
- stack 1: 0x1
- stack 0: 0x80
7640	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x7E4
- stack 1: 0x1
- stack 0: 0x0
7641	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x7E4
- stack 0: 0x1
7642	 2CA	PUSH2	0080	 	 
- stack 2: 0x7E4
- stack 1: 0x1
- stack 0: 0x80
7643	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x7E4
7644	 2CE	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
7645	 2D0	ADD		 	 
- stack 0: 0x7E8
7646	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
7647	 2D2	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x3AD000203C7FFD4042000EF043A00000034004C044900030472001800210001
7648	 2D3	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x3AD000203C7FFD4042000EF043A00000034004C044900030472001800210001
- stack 0: 0xF0
7649	 2D5	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x3AD
7650	 2D6	JUMP		 	 
- stack 0: 0x7E8
7651	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7E8
7652	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E8
- stack 0: 0x7E8
7653	 3AF	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x3AD000203C7FFD4042000EF043A00000034004C044900030472001800210001
7654	 3B0	PUSH1	E0	 	 
- stack 2: 0x7E8
- stack 1: 0x3AD000203C7FFD4042000EF043A00000034004C044900030472001800210001
- stack 0: 0xE0
7655	 3B2	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x3AD0002
7656	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x7E8
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
7657	 3B6	AND		 	 
- stack 1: 0x7E8
- stack 0: 0x2
7658	 3B7	PUSH1	01	 	 
- stack 2: 0x7E8
- stack 1: 0x2
- stack 0: 0x1
7659	 3B9	SIGNEXTEND		 	 
- stack 1: 0x7E8
- stack 0: 0x2
7660	 3BA	PUSH2	00A0	 	 
- stack 2: 0x7E8
- stack 1: 0x2
- stack 0: 0xA0
7661	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x7E8
7662	 3BE	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
7663	 3C0	ADD		 	 
- stack 0: 0x7EC
7664	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
7665	 3C2	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x3C7FFD4042000EF043A00000034004C0449000304720018002100010034F838
7666	 3C3	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x3C7FFD4042000EF043A00000034004C0449000304720018002100010034F838
- stack 0: 0xF0
7667	 3C5	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x3C7
7668	 3C6	JUMP		 	 
- stack 0: 0x7EC
7669	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x7EC
7670	 3C8	PUSH2	0080	 	 
- stack 1: 0x7EC
- stack 0: 0x80
7671	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x7EC
- stack 0: 0x1
7672	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7673	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7EC
- stack 0: 0x1
7674	 3D2	PUSH2	00A0	 	 
- stack 2: 0x7EC
- stack 1: 0x1
- stack 0: 0xA0
7675	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x7EC
- stack 1: 0x1
- stack 0: 0x2
7676	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7EC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7677	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7EC
- stack 1: 0x1
- stack 0: 0x2
7678	 3DC	SUB		 	 
- stack 1: 0x7EC
- stack 0: 0x1
7679	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x7EC
- stack 1: 0x1
- stack 0: 0x3E5
7680	 3E0	JUMPI		 	 
- stack 0: 0x7EC
7681	 3E5	JUMPDEST		 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x7EC
7682	 3E6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7EC
- stack 0: 0x7EC
7683	 3E7	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x3C7FFD4042000EF043A00000034004C0449000304720018002100010034F838
7684	 3E8	PUSH1	E0	 	 
- stack 2: 0x7EC
- stack 1: 0x3C7FFD4042000EF043A00000034004C0449000304720018002100010034F838
- stack 0: 0xE0
7685	 3EA	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x3C7FFD4
7686	 3EB	PUSH2	FFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x3C7FFD4
- stack 0: 0xFFFF
7687	 3EE	AND		 	 
- stack 1: 0x7EC
- stack 0: 0xFFD4
7688	 3EF	PUSH1	01	 	 
- stack 2: 0x7EC
- stack 1: 0xFFD4
- stack 0: 0x1
7689	 3F1	SIGNEXTEND		 	 
- stack 1: 0x7EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4
7690	 3F2	ADD		 	 
- stack 0: 0x7C0
7691	 3F3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7C0
- stack 0: 0xFFFFFFFF
7692	 3F8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7C0
7693	 3F9	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
7694	 3FA	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x340000001B50080040900000409000003260001034F000503780005012C0001
7695	 3FB	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x340000001B50080040900000409000003260001034F000503780005012C0001
- stack 0: 0xF0
7696	 3FD	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x340
7697	 3FE	JUMP		 	 
- stack 0: 0x7C0
7698	 340	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x7C0
7699	 341	DUP1		 	 
- stack 1: 0x7C0
- stack 0: 0x7C0
7700	 342	PUSH2	0040	 	 
- stack 2: 0x7C0
- stack 1: 0x7C0
- stack 0: 0x40
7701	 345	MSTORE		 	  ;; # store to x2
- stack 0: 0x7C0
7702	 346	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
7703	 348	ADD		 	 
- stack 0: 0x7C4
7704	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
7705	 34A	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x1B50080040900000409000003260001034F000503780005012C000101600024
7706	 34B	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x1B50080040900000409000003260001034F000503780005012C000101600024
- stack 0: 0xF0
7707	 34D	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x1B5
7708	 34E	JUMP		 	 
- stack 0: 0x7C4
7709	 1B5	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-96(ignore imm)
- stack 0: 0x7C4
7710	 1B6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C4
- stack 0: 0x7C4
7711	 1B7	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x1B50080040900000409000003260001034F000503780005012C000101600024
7712	 1B8	PUSH1	E0	 	 
- stack 2: 0x7C4
- stack 1: 0x1B50080040900000409000003260001034F000503780005012C000101600024
- stack 0: 0xE0
7713	 1BA	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x1B50080
7714	 1BB	PUSH2	FFFF	 	 
- stack 2: 0x7C4
- stack 1: 0x1B50080
- stack 0: 0xFFFF
7715	 1BE	AND		 	 
- stack 1: 0x7C4
- stack 0: 0x80
7716	 1BF	PUSH1	01	 	 
- stack 2: 0x7C4
- stack 1: 0x80
- stack 0: 0x1
7717	 1C1	SIGNEXTEND		 	 
- stack 1: 0x7C4
- stack 0: 0x80
7718	 1C2	PUSH2	0040	 	 
- stack 2: 0x7C4
- stack 1: 0x80
- stack 0: 0x40
7719	 1C5	MLOAD		 	  ;; # read from x2
- stack 2: 0x7C4
- stack 1: 0x80
- stack 0: 0x7C0
7720	 1C6	ADD		 	  ;; # ADDI 2
- stack 1: 0x7C4
- stack 0: 0x840
7721	 1C7	PUSH2	0040	 	 
- stack 2: 0x7C4
- stack 1: 0x840
- stack 0: 0x40
7722	 1CA	MSTORE		 	  ;; # store to x2
- stack 0: 0x7C4
7723	 1CB	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
7724	 1CD	ADD		 	 
- stack 0: 0x7C8
7725	 1CE	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
7726	 1CF	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x40900000409000003260001034F000503780005012C00010160002402B80001
7727	 1D0	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x40900000409000003260001034F000503780005012C00010160002402B80001
- stack 0: 0xF0
7728	 1D2	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x409
7729	 1D3	JUMP		 	 
- stack 0: 0x7C8
7730	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C8
7731	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
7732	 40B	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x40900000409000003260001034F000503780005012C00010160002402B80001
7733	 40C	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x40900000409000003260001034F000503780005012C00010160002402B80001
- stack 0: 0xE0
7734	 40E	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x4090000
7735	 40F	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x4090000
- stack 0: 0xFFFF
7736	 412	AND		 	 
- stack 1: 0x7C8
- stack 0: 0x0
7737	 413	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0x0
- stack 0: 0x1
7738	 415	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0x0
7739	 416	POP		 	 
- stack 0: 0x7C8
7740	 417	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
7741	 419	ADD		 	 
- stack 0: 0x7CC
7742	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
7743	 41B	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x409000003260001034F000503780005012C00010160002402B8000103AD0002
7744	 41C	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x409000003260001034F000503780005012C00010160002402B8000103AD0002
- stack 0: 0xF0
7745	 41E	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x409
7746	 41F	JUMP		 	 
- stack 0: 0x7CC
7747	 409	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7CC
7748	 40A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
7749	 40B	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x409000003260001034F000503780005012C00010160002402B8000103AD0002
7750	 40C	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x409000003260001034F000503780005012C00010160002402B8000103AD0002
- stack 0: 0xE0
7751	 40E	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x4090000
7752	 40F	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x4090000
- stack 0: 0xFFFF
7753	 412	AND		 	 
- stack 1: 0x7CC
- stack 0: 0x0
7754	 413	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0x0
- stack 0: 0x1
7755	 415	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0x0
7756	 416	POP		 	 
- stack 0: 0x7CC
7757	 417	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
7758	 419	ADD		 	 
- stack 0: 0x7D0
7759	 41A	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
7760	 41B	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3260001034F000503780005012C00010160002402B8000103AD000203C7FFD4
7761	 41C	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x3260001034F000503780005012C00010160002402B8000103AD000203C7FFD4
- stack 0: 0xF0
7762	 41E	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x326
7763	 41F	JUMP		 	 
- stack 0: 0x7D0
7764	 326	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-35(ignore imm)
- stack 0: 0x7D0
7765	 327	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
7766	 328	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3260001034F000503780005012C00010160002402B8000103AD000203C7FFD4
7767	 329	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x3260001034F000503780005012C00010160002402B8000103AD000203C7FFD4
- stack 0: 0xE0
7768	 32B	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3260001
7769	 32C	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x3260001
- stack 0: 0xFFFF
7770	 32F	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x1
7771	 330	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x1
7772	 332	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x1
7773	 333	PUSH2	0020	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x20
7774	 336	MSTORE		 	  ;; # store to x1
- stack 0: 0x7D0
7775	 337	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
7776	 339	ADD		 	 
- stack 0: 0x7D4
7777	 33A	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
7778	 33B	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x34F000503780005012C00010160002402B8000103AD000203C7FFD4042000EF
7779	 33C	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x34F000503780005012C00010160002402B8000103AD000203C7FFD4042000EF
- stack 0: 0xF0
7780	 33E	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x34F
7781	 33F	JUMP		 	 
- stack 0: 0x7D4
7782	 34F	JUMPDEST		 ;; __riscvimpl_SB_0_2_1	  ;; # instr: sb ra,0(sp)(ignore imm)
- stack 0: 0x7D4
7783	 350	PUSH2	0020	 	 
- stack 1: 0x7D4
- stack 0: 0x20
7784	 353	MLOAD		 	  ;; # read from x1
- stack 1: 0x7D4
- stack 0: 0x1
7785	 354	PUSH2	0040	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x40
7786	 357	MLOAD		 	  ;; # read from x2
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x840
7787	 358	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x840
- stack 0: 0x7D4
7788	 359	MLOAD		 	 
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x840
- stack 0: 0x34F000503780005012C00010160002402B8000103AD000203C7FFD4042000EF
7789	 35A	PUSH1	E0	 	 
- stack 4: 0x7D4
- stack 3: 0x1
- stack 2: 0x840
- stack 1: 0x34F000503780005012C00010160002402B8000103AD000203C7FFD4042000EF
- stack 0: 0xE0
7790	 35C	SHR		 	 
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x840
- stack 0: 0x34F0005
7791	 35D	PUSH2	FFFF	 	 
- stack 4: 0x7D4
- stack 3: 0x1
- stack 2: 0x840
- stack 1: 0x34F0005
- stack 0: 0xFFFF
7792	 360	AND		 	 
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x840
- stack 0: 0x5
7793	 361	PUSH1	01	 	 
- stack 4: 0x7D4
- stack 3: 0x1
- stack 2: 0x840
- stack 1: 0x5
- stack 0: 0x1
7794	 363	SIGNEXTEND		 	 
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x840
- stack 0: 0x5
7795	 364	ADD		 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x845
7796	 365	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x845
- stack 0: 0xFFFFFFFF
7797	 36A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x845
7798	 36B	PUSH1	03	 	 
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x845
- stack 0: 0x3
7799	 36D	XOR		 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x846
7800	 36E	MSTORE8		 	 
- stack 0: 0x7D4
7801	 36F	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
7802	 371	ADD		 	 
- stack 0: 0x7D8
7803	 372	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
7804	 373	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x3780005012C00010160002402B8000103AD000203C7FFD4042000EF043A0000
7805	 374	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x3780005012C00010160002402B8000103AD000203C7FFD4042000EF043A0000
- stack 0: 0xF0
7806	 376	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x378
7807	 377	JUMP		 	 
- stack 0: 0x7D8
7808	 378	JUMPDEST		 ;; __riscvimpl_LB_3_2_0	  ;; # instr: lb gp,0(sp)(ignore imm)
- stack 0: 0x7D8
7809	 379	PUSH2	0040	 	 
- stack 1: 0x7D8
- stack 0: 0x40
7810	 37C	MLOAD		 	  ;; # read from x2
- stack 1: 0x7D8
- stack 0: 0x840
7811	 37D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
7812	 382	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D8
- stack 0: 0x840
7813	 383	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7D8
- stack 1: 0x840
- stack 0: 0x7D8
7814	 384	MLOAD		 	 
- stack 2: 0x7D8
- stack 1: 0x840
- stack 0: 0x3780005012C00010160002402B8000103AD000203C7FFD4042000EF043A0000
7815	 385	PUSH1	E0	 	 
- stack 3: 0x7D8
- stack 2: 0x840
- stack 1: 0x3780005012C00010160002402B8000103AD000203C7FFD4042000EF043A0000
- stack 0: 0xE0
7816	 387	SHR		 	 
- stack 2: 0x7D8
- stack 1: 0x840
- stack 0: 0x3780005
7817	 388	PUSH2	FFFF	 	 
- stack 3: 0x7D8
- stack 2: 0x840
- stack 1: 0x3780005
- stack 0: 0xFFFF
7818	 38B	AND		 	 
- stack 2: 0x7D8
- stack 1: 0x840
- stack 0: 0x5
7819	 38C	PUSH1	01	 	 
- stack 3: 0x7D8
- stack 2: 0x840
- stack 1: 0x5
- stack 0: 0x1
7820	 38E	SIGNEXTEND		 	 
- stack 2: 0x7D8
- stack 1: 0x840
- stack 0: 0x5
7821	 38F	ADD		 	 
- stack 1: 0x7D8
- stack 0: 0x845
7822	 390	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x845
- stack 0: 0xFFFFFFFF
7823	 395	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D8
- stack 0: 0x845
7824	 396	PUSH1	03	 	  ;; # big endian fixup
- stack 2: 0x7D8
- stack 1: 0x845
- stack 0: 0x3
7825	 398	XOR		 	 
- stack 1: 0x7D8
- stack 0: 0x846
7826	 399	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x111000098780000000000000000000000000000000000000000000000000000
7827	 39A	PUSH1	F8	 	 
- stack 2: 0x7D8
- stack 1: 0x111000098780000000000000000000000000000000000000000000000000000
- stack 0: 0xF8
7828	 39C	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x1
7829	 39D	PUSH1	00	 	 
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x0
7830	 39F	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0x1
7831	 3A0	PUSH2	0060	 	 
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x60
7832	 3A3	MSTORE		 	  ;; # store to x3
- stack 0: 0x7D8
7833	 3A4	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
7834	 3A6	ADD		 	 
- stack 0: 0x7DC
7835	 3A7	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
7836	 3A8	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x12C00010160002402B8000103AD000203C7FFD4042000EF043A00000034004C
7837	 3A9	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0x12C00010160002402B8000103AD000203C7FFD4042000EF043A00000034004C
- stack 0: 0xF0
7838	 3AB	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x12C
7839	 3AC	JUMP		 	 
- stack 0: 0x7DC
7840	 12C	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-86(ignore imm)
- stack 0: 0x7DC
7841	 12D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7DC
- stack 0: 0x7DC
7842	 12E	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x12C00010160002402B8000103AD000203C7FFD4042000EF043A00000034004C
7843	 12F	PUSH1	E0	 	 
- stack 2: 0x7DC
- stack 1: 0x12C00010160002402B8000103AD000203C7FFD4042000EF043A00000034004C
- stack 0: 0xE0
7844	 131	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x12C0001
7845	 132	PUSH2	FFFF	 	 
- stack 2: 0x7DC
- stack 1: 0x12C0001
- stack 0: 0xFFFF
7846	 135	AND		 	 
- stack 1: 0x7DC
- stack 0: 0x1
7847	 136	PUSH1	01	 	 
- stack 2: 0x7DC
- stack 1: 0x1
- stack 0: 0x1
7848	 138	SIGNEXTEND		 	 
- stack 1: 0x7DC
- stack 0: 0x1
7849	 139	PUSH2	03A0	 	 
- stack 2: 0x7DC
- stack 1: 0x1
- stack 0: 0x3A0
7850	 13C	MSTORE		 	  ;; # store to x29
- stack 0: 0x7DC
7851	 13D	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
7852	 13F	ADD		 	 
- stack 0: 0x7E0
7853	 140	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
7854	 141	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x160002402B8000103AD000203C7FFD4042000EF043A00000034004C04490003
7855	 142	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x160002402B8000103AD000203C7FFD4042000EF043A00000034004C04490003
- stack 0: 0xF0
7856	 144	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x160
7857	 145	JUMP		 	 
- stack 0: 0x7E0
7858	 160	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,3d8(ignore imm)
- stack 0: 0x7E0
7859	 161	PUSH2	0060	 	 
- stack 1: 0x7E0
- stack 0: 0x60
7860	 164	MLOAD		 	  ;; # read from x3
- stack 1: 0x7E0
- stack 0: 0x1
7861	 165	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7862	 16A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E0
- stack 0: 0x1
7863	 16B	PUSH2	03A0	 	 
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x3A0
7864	 16E	MLOAD		 	  ;; # read from x29
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x1
7865	 16F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7E0
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7866	 174	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x1
7867	 175	SUB		 	 
- stack 1: 0x7E0
- stack 0: 0x0
7868	 176	PUSH2	017E	 ;; _neq_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 2: 0x7E0
- stack 1: 0x0
- stack 0: 0x17E
7869	 179	JUMPI		 	 
- stack 0: 0x7E0
7870	 17A	PUSH2	0198	 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 1: 0x7E0
- stack 0: 0x198
7871	 17D	JUMP		 	 
- stack 0: 0x7E0
7872	 198	JUMPDEST		 ;; _neq_after_8f21a1140b4aad7feddfd1df13d2a1699ef2171cd5eacde8dae27aa004d0e03a	 
- stack 0: 0x7E0
7873	 199	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
7874	 19B	ADD		 	 
- stack 0: 0x7E4
7875	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
7876	 19D	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x2B8000103AD000203C7FFD4042000EF043A00000034004C0449000304720018
7877	 19E	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0x2B8000103AD000203C7FFD4042000EF043A00000034004C0449000304720018
- stack 0: 0xF0
7878	 1A0	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x2B8
7879	 1A1	JUMP		 	 
- stack 0: 0x7E4
7880	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,753(ignore imm)
- stack 0: 0x7E4
7881	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
7882	 2BA	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x2B8000103AD000203C7FFD4042000EF043A00000034004C0449000304720018
7883	 2BB	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0x2B8000103AD000203C7FFD4042000EF043A00000034004C0449000304720018
- stack 0: 0xE0
7884	 2BD	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x2B80001
7885	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0x2B80001
- stack 0: 0xFFFF
7886	 2C1	AND		 	 
- stack 1: 0x7E4
- stack 0: 0x1
7887	 2C2	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0x1
- stack 0: 0x1
7888	 2C4	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0x1
7889	 2C5	PUSH2	0080	 	 
- stack 2: 0x7E4
- stack 1: 0x1
- stack 0: 0x80
7890	 2C8	MLOAD		 	  ;; # read from x4
- stack 2: 0x7E4
- stack 1: 0x1
- stack 0: 0x1
7891	 2C9	ADD		 	  ;; # ADDI 4
- stack 1: 0x7E4
- stack 0: 0x2
7892	 2CA	PUSH2	0080	 	 
- stack 2: 0x7E4
- stack 1: 0x2
- stack 0: 0x80
7893	 2CD	MSTORE		 	  ;; # store to x4
- stack 0: 0x7E4
7894	 2CE	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
7895	 2D0	ADD		 	 
- stack 0: 0x7E8
7896	 2D1	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
7897	 2D2	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x3AD000203C7FFD4042000EF043A00000034004C044900030472001800210001
7898	 2D3	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x3AD000203C7FFD4042000EF043A00000034004C044900030472001800210001
- stack 0: 0xF0
7899	 2D5	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x3AD
7900	 2D6	JUMP		 	 
- stack 0: 0x7E8
7901	 3AD	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7E8
7902	 3AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E8
- stack 0: 0x7E8
7903	 3AF	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x3AD000203C7FFD4042000EF043A00000034004C044900030472001800210001
7904	 3B0	PUSH1	E0	 	 
- stack 2: 0x7E8
- stack 1: 0x3AD000203C7FFD4042000EF043A00000034004C044900030472001800210001
- stack 0: 0xE0
7905	 3B2	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x3AD0002
7906	 3B3	PUSH2	FFFF	 	 
- stack 2: 0x7E8
- stack 1: 0x3AD0002
- stack 0: 0xFFFF
7907	 3B6	AND		 	 
- stack 1: 0x7E8
- stack 0: 0x2
7908	 3B7	PUSH1	01	 	 
- stack 2: 0x7E8
- stack 1: 0x2
- stack 0: 0x1
7909	 3B9	SIGNEXTEND		 	 
- stack 1: 0x7E8
- stack 0: 0x2
7910	 3BA	PUSH2	00A0	 	 
- stack 2: 0x7E8
- stack 1: 0x2
- stack 0: 0xA0
7911	 3BD	MSTORE		 	  ;; # store to x5
- stack 0: 0x7E8
7912	 3BE	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
7913	 3C0	ADD		 	 
- stack 0: 0x7EC
7914	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
7915	 3C2	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x3C7FFD4042000EF043A00000034004C0449000304720018002100010034F838
7916	 3C3	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x3C7FFD4042000EF043A00000034004C0449000304720018002100010034F838
- stack 0: 0xF0
7917	 3C5	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x3C7
7918	 3C6	JUMP		 	 
- stack 0: 0x7EC
7919	 3C7	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-24(ignore imm)
- stack 0: 0x7EC
7920	 3C8	PUSH2	0080	 	 
- stack 1: 0x7EC
- stack 0: 0x80
7921	 3CB	MLOAD		 	  ;; # read from x4
- stack 1: 0x7EC
- stack 0: 0x2
7922	 3CC	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7923	 3D1	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7EC
- stack 0: 0x2
7924	 3D2	PUSH2	00A0	 	 
- stack 2: 0x7EC
- stack 1: 0x2
- stack 0: 0xA0
7925	 3D5	MLOAD		 	  ;; # read from x5
- stack 2: 0x7EC
- stack 1: 0x2
- stack 0: 0x2
7926	 3D6	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7EC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7927	 3DB	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7EC
- stack 1: 0x2
- stack 0: 0x2
7928	 3DC	SUB		 	 
- stack 1: 0x7EC
- stack 0: 0x0
7929	 3DD	PUSH2	03E5	 ;; _neq_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x3E5
7930	 3E0	JUMPI		 	 
- stack 0: 0x7EC
7931	 3E1	PUSH2	03FF	 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 1: 0x7EC
- stack 0: 0x3FF
7932	 3E4	JUMP		 	 
- stack 0: 0x7EC
7933	 3FF	JUMPDEST		 ;; _neq_after_255b44a6d995f87556f407dc02b2dd042f3f3533f07ea4edda07e5e35e44235b	 
- stack 0: 0x7EC
7934	 400	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
7935	 402	ADD		 	 
- stack 0: 0x7F0
7936	 403	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
7937	 404	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x42000EF043A00000034004C0449000304720018002100010034F83800530042
7938	 405	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x42000EF043A00000034004C0449000304720018002100010034F83800530042
- stack 0: 0xF0
7939	 407	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x420
7940	 408	JUMP		 	 
- stack 0: 0x7F0
7941	 420	JUMPDEST		 ;; __riscvimpl_ADDI_10_0_0	  ;; # instr: addi a0,zero,239(ignore imm)
- stack 0: 0x7F0
7942	 421	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F0
- stack 0: 0x7F0
7943	 422	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x42000EF043A00000034004C0449000304720018002100010034F83800530042
7944	 423	PUSH1	E0	 	 
- stack 2: 0x7F0
- stack 1: 0x42000EF043A00000034004C0449000304720018002100010034F83800530042
- stack 0: 0xE0
7945	 425	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x42000EF
7946	 426	PUSH2	FFFF	 	 
- stack 2: 0x7F0
- stack 1: 0x42000EF
- stack 0: 0xFFFF
7947	 429	AND		 	 
- stack 1: 0x7F0
- stack 0: 0xEF
7948	 42A	PUSH1	01	 	 
- stack 2: 0x7F0
- stack 1: 0xEF
- stack 0: 0x1
7949	 42C	SIGNEXTEND		 	 
- stack 1: 0x7F0
- stack 0: 0xEF
7950	 42D	PUSH2	0140	 	 
- stack 2: 0x7F0
- stack 1: 0xEF
- stack 0: 0x140
7951	 430	MSTORE		 	  ;; # store to x10
- stack 0: 0x7F0
7952	 431	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
7953	 433	ADD		 	 
- stack 0: 0x7F4
7954	 434	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
7955	 435	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x43A00000034004C0449000304720018002100010034F8380053004200660000
7956	 436	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0x43A00000034004C0449000304720018002100010034F8380053004200660000
- stack 0: 0xF0
7957	 438	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x43A
7958	 439	JUMP		 	 
- stack 0: 0x7F4
7959	 43A	JUMPDEST		 ;; __riscvimpl_AUIPC_97050000	  ;; # instr: auipc a1,0x0(ignore imm)
- stack 0: 0x7F4
7960	 43B	DUP1		 	 
- stack 1: 0x7F4
- stack 0: 0x7F4
7961	 43C	PUSH2	0160	 	 
- stack 2: 0x7F4
- stack 1: 0x7F4
- stack 0: 0x160
7962	 43F	MSTORE		 	  ;; # store to x11
- stack 0: 0x7F4
7963	 440	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
7964	 442	ADD		 	 
- stack 0: 0x7F8
7965	 443	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
7966	 444	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x34004C0449000304720018002100010034F838005300420066000004B20001
7967	 445	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0x34004C0449000304720018002100010034F838005300420066000004B20001
- stack 0: 0xF0
7968	 447	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x34
7969	 448	JUMP		 	 
- stack 0: 0x7F8
7970	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-2000(ignore imm)
- stack 0: 0x7F8
7971	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F8
- stack 0: 0x7F8
7972	 36	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x34004C0449000304720018002100010034F838005300420066000004B20001
7973	 37	PUSH1	E0	 	 
- stack 2: 0x7F8
- stack 1: 0x34004C0449000304720018002100010034F838005300420066000004B20001
- stack 0: 0xE0
7974	 39	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x34004C
7975	 3A	PUSH2	FFFF	 	 
- stack 2: 0x7F8
- stack 1: 0x34004C
- stack 0: 0xFFFF
7976	 3D	AND		 	 
- stack 1: 0x7F8
- stack 0: 0x4C
7977	 3E	PUSH1	01	 	 
- stack 2: 0x7F8
- stack 1: 0x4C
- stack 0: 0x1
7978	 40	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0x4C
7979	 41	PUSH2	0160	 	 
- stack 2: 0x7F8
- stack 1: 0x4C
- stack 0: 0x160
7980	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x7F8
- stack 1: 0x4C
- stack 0: 0x7F4
7981	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x7F8
- stack 0: 0x840
7982	 46	PUSH2	0160	 	 
- stack 2: 0x7F8
- stack 1: 0x840
- stack 0: 0x160
7983	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x7F8
7984	 4A	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
7985	 4C	ADD		 	 
- stack 0: 0x7FC
7986	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
7987	 4E	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x449000304720018002100010034F838005300420066000004B2000100210001
7988	 4F	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x449000304720018002100010034F838005300420066000004B2000100210001
- stack 0: 0xF0
7989	 51	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x449
7990	 52	JUMP		 	 
- stack 0: 0x7FC
7991	 449	JUMPDEST		 ;; __riscvimpl_SB_0_11_10	  ;; # instr: sb a0,3(a1)(ignore imm)
- stack 0: 0x7FC
7992	 44A	PUSH2	0140	 	 
- stack 1: 0x7FC
- stack 0: 0x140
7993	 44D	MLOAD		 	  ;; # read from x10
- stack 1: 0x7FC
- stack 0: 0xEF
7994	 44E	PUSH2	0160	 	 
- stack 2: 0x7FC
- stack 1: 0xEF
- stack 0: 0x160
7995	 451	MLOAD		 	  ;; # read from x11
- stack 2: 0x7FC
- stack 1: 0xEF
- stack 0: 0x840
7996	 452	DUP3		 	  ;; # get IMM from PC
- stack 3: 0x7FC
- stack 2: 0xEF
- stack 1: 0x840
- stack 0: 0x7FC
7997	 453	MLOAD		 	 
- stack 3: 0x7FC
- stack 2: 0xEF
- stack 1: 0x840
- stack 0: 0x449000304720018002100010034F838005300420066000004B2000100210001
7998	 454	PUSH1	E0	 	 
- stack 4: 0x7FC
- stack 3: 0xEF
- stack 2: 0x840
- stack 1: 0x449000304720018002100010034F838005300420066000004B2000100210001
- stack 0: 0xE0
7999	 456	SHR		 	 
- stack 3: 0x7FC
- stack 2: 0xEF
- stack 1: 0x840
- stack 0: 0x4490003
8000	 457	PUSH2	FFFF	 	 
- stack 4: 0x7FC
- stack 3: 0xEF
- stack 2: 0x840
- stack 1: 0x4490003
- stack 0: 0xFFFF
8001	 45A	AND		 	 
- stack 3: 0x7FC
- stack 2: 0xEF
- stack 1: 0x840
- stack 0: 0x3
8002	 45B	PUSH1	01	 	 
- stack 4: 0x7FC
- stack 3: 0xEF
- stack 2: 0x840
- stack 1: 0x3
- stack 0: 0x1
8003	 45D	SIGNEXTEND		 	 
- stack 3: 0x7FC
- stack 2: 0xEF
- stack 1: 0x840
- stack 0: 0x3
8004	 45E	ADD		 	 
- stack 2: 0x7FC
- stack 1: 0xEF
- stack 0: 0x843
8005	 45F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7FC
- stack 2: 0xEF
- stack 1: 0x843
- stack 0: 0xFFFFFFFF
8006	 464	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7FC
- stack 1: 0xEF
- stack 0: 0x843
8007	 465	PUSH1	03	 	 
- stack 3: 0x7FC
- stack 2: 0xEF
- stack 1: 0x843
- stack 0: 0x3
8008	 467	XOR		 	 
- stack 2: 0x7FC
- stack 1: 0xEF
- stack 0: 0x840
8009	 468	MSTORE8		 	 
- stack 0: 0x7FC
8010	 469	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
8011	 46B	ADD		 	 
- stack 0: 0x800
8012	 46C	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
8013	 46D	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x4720018002100010034F838005300420066000004B20001002100010034F83C
8014	 46E	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x4720018002100010034F838005300420066000004B20001002100010034F83C
- stack 0: 0xF0
8015	 470	SHR		 	 
- stack 1: 0x800
- stack 0: 0x472
8016	 471	JUMP		 	 
- stack 0: 0x800
8017	 472	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x800
8018	 473	PUSH1	00	 	 
- stack 1: 0x800
- stack 0: 0x0
8019	 475	PUSH4	FFFFFFFF	 	 
- stack 2: 0x800
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8020	 47A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x800
- stack 0: 0x0
8021	 47B	PUSH2	0380	 	 
- stack 2: 0x800
- stack 1: 0x0
- stack 0: 0x380
8022	 47E	MLOAD		 	  ;; # read from x28
- stack 2: 0x800
- stack 1: 0x0
- stack 0: 0x17
8023	 47F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x800
- stack 2: 0x0
- stack 1: 0x17
- stack 0: 0xFFFFFFFF
8024	 484	AND		 	  ;; # mask to 32 bits
- stack 2: 0x800
- stack 1: 0x0
- stack 0: 0x17
8025	 485	SUB		 	 
- stack 1: 0x800
- stack 0: 0x17
8026	 486	PUSH2	048E	 ;; _neq_8ad7dd572047c9b964416ec67af6d034b67cf6159948a0d1ace1961b55069611	 
- stack 2: 0x800
- stack 1: 0x17
- stack 0: 0x48E
8027	 489	JUMPI		 	 
- stack 0: 0x800
8028	 48E	JUMPDEST		 ;; _neq_8ad7dd572047c9b964416ec67af6d034b67cf6159948a0d1ace1961b55069611	 
- stack 0: 0x800
8029	 48F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x800
- stack 0: 0x800
8030	 490	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x4720018002100010034F838005300420066000004B20001002100010034F83C
8031	 491	PUSH1	E0	 	 
- stack 2: 0x800
- stack 1: 0x4720018002100010034F838005300420066000004B20001002100010034F83C
- stack 0: 0xE0
8032	 493	SHR		 	 
- stack 1: 0x800
- stack 0: 0x4720018
8033	 494	PUSH2	FFFF	 	 
- stack 2: 0x800
- stack 1: 0x4720018
- stack 0: 0xFFFF
8034	 497	AND		 	 
- stack 1: 0x800
- stack 0: 0x18
8035	 498	PUSH1	01	 	 
- stack 2: 0x800
- stack 1: 0x18
- stack 0: 0x1
8036	 49A	SIGNEXTEND		 	 
- stack 1: 0x800
- stack 0: 0x18
8037	 49B	ADD		 	 
- stack 0: 0x818
8038	 49C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x818
- stack 0: 0xFFFFFFFF
8039	 4A1	AND		 	  ;; # mask to 32 bits
- stack 0: 0x818
8040	 4A2	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
8041	 4A3	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x2100010034F83C005300420066000004BD0000006600006574796D00007473
8042	 4A4	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x2100010034F83C005300420066000004BD0000006600006574796D00007473
- stack 0: 0xF0
8043	 4A6	SHR		 	 
- stack 1: 0x818
- stack 0: 0x21
8044	 4A7	JUMP		 	 
- stack 0: 0x818
8045	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x818
8046	 22	PUSH4	00001000	 	 
- stack 1: 0x818
- stack 0: 0x1000
8047	 27	PUSH2	0160	 	 
- stack 2: 0x818
- stack 1: 0x1000
- stack 0: 0x160
8048	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x818
8049	 2B	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
8050	 2D	ADD		 	 
- stack 0: 0x81C
8051	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
8052	 2F	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x34F83C005300420066000004BD0000006600006574796D0000747300525245
8053	 30	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0x34F83C005300420066000004BD0000006600006574796D0000747300525245
- stack 0: 0xF0
8054	 32	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x34
8055	 33	JUMP		 	 
- stack 0: 0x81C
8056	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-2000(ignore imm)
- stack 0: 0x81C
8057	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x81C
- stack 0: 0x81C
8058	 36	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x34F83C005300420066000004BD0000006600006574796D0000747300525245
8059	 37	PUSH1	E0	 	 
- stack 2: 0x81C
- stack 1: 0x34F83C005300420066000004BD0000006600006574796D0000747300525245
- stack 0: 0xE0
8060	 39	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x34F83C
8061	 3A	PUSH2	FFFF	 	 
- stack 2: 0x81C
- stack 1: 0x34F83C
- stack 0: 0xFFFF
8062	 3D	AND		 	 
- stack 1: 0x81C
- stack 0: 0xF83C
8063	 3E	PUSH1	01	 	 
- stack 2: 0x81C
- stack 1: 0xF83C
- stack 0: 0x1
8064	 40	SIGNEXTEND		 	 
- stack 1: 0x81C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83C
8065	 41	PUSH2	0160	 	 
- stack 2: 0x81C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83C
- stack 0: 0x160
8066	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x81C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83C
- stack 0: 0x1000
8067	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x81C
- stack 0: 0x83C
8068	 46	PUSH2	0160	 	 
- stack 2: 0x81C
- stack 1: 0x83C
- stack 0: 0x160
8069	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x81C
8070	 4A	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
8071	 4C	ADD		 	 
- stack 0: 0x820
8072	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
8073	 4E	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x5300420066000004BD0000006600006574796D000074730052524500004B4F
8074	 4F	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0x5300420066000004BD0000006600006574796D000074730052524500004B4F
- stack 0: 0xF0
8075	 51	SHR		 	 
- stack 1: 0x820
- stack 0: 0x53
8076	 52	JUMP		 	 
- stack 0: 0x820
8077	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x820
8078	 54	PUSH4	00042000	 	 
- stack 1: 0x820
- stack 0: 0x42000
8079	 59	PUSH2	0140	 	 
- stack 2: 0x820
- stack 1: 0x42000
- stack 0: 0x140
8080	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x820
8081	 5D	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
8082	 5F	ADD		 	 
- stack 0: 0x824
8083	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
8084	 61	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x66000004BD0000006600006574796D000074730052524500004B4FEF222333
8085	 62	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x66000004BD0000006600006574796D000074730052524500004B4FEF222333
- stack 0: 0xF0
8086	 64	SHR		 	 
- stack 1: 0x824
- stack 0: 0x66
8087	 65	JUMP		 	 
- stack 0: 0x824
8088	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x824
8089	 67	PUSH2	0140	 	 
- stack 1: 0x824
- stack 0: 0x140
8090	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x824
- stack 0: 0x42000
8091	 6B	PUSH2	0075	 ;; _ecall_37e65f6c5aaa5193c30620baad50caf3f0dc7c8b2a79fa5373398d2af03cdfee	 
- stack 2: 0x824
- stack 1: 0x42000
- stack 0: 0x75
8092	 6E	JUMPI		 	 
- stack 0: 0x824
8093	 75	JUMPDEST		 ;; _ecall_37e65f6c5aaa5193c30620baad50caf3f0dc7c8b2a79fa5373398d2af03cdfee	 
- stack 0: 0x824
8094	 76	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
8095	 78	PUSH2	0160	 	 
- stack 2: 0x824
- stack 1: 0x4
- stack 0: 0x160
8096	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x824
- stack 1: 0x4
- stack 0: 0x83C
8097	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x824
8098	 7D	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
8099	 7F	ADD		 	 
- stack 0: 0x828
8100	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
8101	 81	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x4BD0000006600006574796D000074730052524500004B4FEF2223330AA00111
8102	 82	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x4BD0000006600006574796D000074730052524500004B4FEF2223330AA00111
- stack 0: 0xF0
8103	 84	SHR		 	 
- stack 1: 0x828
- stack 0: 0x4BD
8104	 85	JUMP		 	 
- stack 0: 0x828
8105	 4BD	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x828
8106	 4BE	PUSH4	00000000	 	 
- stack 1: 0x828
- stack 0: 0x0
8107	 4C3	PUSH2	0140	 	 
- stack 2: 0x828
- stack 1: 0x0
- stack 0: 0x140
8108	 4C6	MSTORE		 	  ;; # store to x10
- stack 0: 0x828
8109	 4C7	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
8110	 4C9	ADD		 	 
- stack 0: 0x82C
8111	 4CA	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
8112	 4CB	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x6600006574796D000074730052524500004B4FEF2223330AA0011100009878
8113	 4CC	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x6600006574796D000074730052524500004B4FEF2223330AA0011100009878
- stack 0: 0xF0
8114	 4CE	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x66
8115	 4CF	JUMP		 	 
- stack 0: 0x82C
8116	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x82C
8117	 67	PUSH2	0140	 	 
- stack 1: 0x82C
- stack 0: 0x140
8118	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x82C
- stack 0: 0x0
8119	 6B	PUSH2	0075	 ;; _ecall_37e65f6c5aaa5193c30620baad50caf3f0dc7c8b2a79fa5373398d2af03cdfee	 
- stack 2: 0x82C
- stack 1: 0x0
- stack 0: 0x75
8120	 6E	JUMPI		 	 
- stack 0: 0x82C
8121	 6F	PUSH1	20	 	 
- stack 1: 0x82C
- stack 0: 0x20
8122	 71	PUSH2	0160	 	 
- stack 2: 0x82C
- stack 1: 0x20
- stack 0: 0x160
8123	 74	RETURN		 	 
Final bytecode length; 2333
Returned: 000000000000000000000000000000000000000000000000000000000000083c
gasUsed : 27883
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424,428,42c
** HOT: 430 - range: 430,434,438,43c,440,444,448,44c
** HOT: 450 - range: 450,454,458,45c,460,464,468,46c,470,474
** HOT: 478 - range: 478,47c,480,484,488,48c,490,494
** HOT: 498 - range: 498,49c,4a0,4a4,4a8,4ac,4b0,4b4
** HOT: 4b8 - range: 4b8,4bc,4c0,4c4,4c8,4cc,4d0,4d4
** HOT: 4d8 - range: 4d8,4dc,4e0,4e4,4e8,4ec,4f0,4f4
** HOT: 4f8 - range: 4f8,4fc,500,504,508,50c,510,514
** HOT: 518 - range: 518,51c,520,524,528,52c,530,534,538,53c
** HOT: 540 - range: 540,544,548,54c,550,554,558,55c,560,564,568,56c
** HOT: 570 - range: 570,574,578,57c,580,584,588,58c,590
** HOT: 578 - range: 578,57c,580,584,588,58c,590
** HOT: 594 - range: 594,598,59c
** HOT: 5a0 - range: 5a0,5a4,5a8,5ac,5b0,5b4,5b8,5bc,5c0,5c4
** HOT: 5a8 - range: 5a8,5ac,5b0,5b4,5b8,5bc,5c0,5c4
** HOT: 5c8 - range: 5c8,5cc,5d0
** HOT: 5d4 - range: 5d4,5d8,5dc,5e0,5e4,5e8,5ec,5f0,5f4,5f8,5fc
** HOT: 5dc - range: 5dc,5e0,5e4,5e8,5ec,5f0,5f4,5f8,5fc
** HOT: 600 - range: 600,604,608
** HOT: 60c - range: 60c,610,614,618,61c,620,624,628,62c,630
** HOT: 614 - range: 614,618,61c,620,624,628,62c,630
** HOT: 634 - range: 634,638,63c
** HOT: 640 - range: 640,644,648,64c,650,654,658,65c,660,664,668
** HOT: 648 - range: 648,64c,650,654,658,65c,660,664,668
** HOT: 66c - range: 66c,670,674
** HOT: 678 - range: 678,67c,680,684,688,68c,690,694,698,69c,6a0
** HOT: 680 - range: 680,684,688,68c,690,694,698,69c,6a0
** HOT: 6a4 - range: 6a4,6a8,6ac
** HOT: 6b0 - range: 6b0,6b4,6b8,6bc,6c0,6c4,6c8,6cc,6d0
** HOT: 6b8 - range: 6b8,6bc,6c0,6c4,6c8,6cc,6d0
** HOT: 6d4 - range: 6d4,6d8,6dc
** HOT: 6e0 - range: 6e0,6e4,6e8,6ec,6f0,6f4,6f8,6fc,700,704
** HOT: 6e8 - range: 6e8,6ec,6f0,6f4,6f8,6fc,700,704
** HOT: 708 - range: 708,70c,710
** HOT: 714 - range: 714,718,71c,720,724,728,72c,730,734,738,73c
** HOT: 71c - range: 71c,720,724,728,72c,730,734,738,73c
** HOT: 740 - range: 740,744,748
** HOT: 74c - range: 74c,750,754,758,75c,760,764,768,76c,770
** HOT: 754 - range: 754,758,75c,760,764,768,76c,770
** HOT: 774 - range: 774,778,77c
** HOT: 780 - range: 780,784,788,78c,790,794,798,79c,7a0,7a4,7a8
** HOT: 788 - range: 788,78c,790,794,798,79c,7a0,7a4,7a8
** HOT: 7ac - range: 7ac,7b0,7b4
** HOT: 7b8 - range: 7b8,7bc,7c0,7c4,7c8,7cc,7d0,7d4,7d8,7dc,7e0
** HOT: 7c0 - range: 7c0,7c4,7c8,7cc,7d0,7d4,7d8,7dc,7e0
** HOT: 7e4 - range: 7e4,7e8,7ec
** HOT: 7f0 - range: 7f0,7f4,7f8,7fc,800
