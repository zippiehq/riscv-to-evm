Running in EVM:
0	 0	PUSH4	04E4	 	 
- stack 0: 0x4E4
1	 5	PUSH2	06EF	 ;; _rambegin	 
- stack 1: 0x4E4
- stack 0: 0x6EF
2	 8	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0x6EF
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x4E4
- stack 0: 0x6F0
4	 B	PUSH2	0400	 	 
- stack 2: 0x4E4
- stack 1: 0x6F0
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100010034F8C0005300420066000000860000009504C000B400AA00CE0000
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100010034F8C0005300420066000000860000009504C000B400AA00CE0000
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00001000	 	 
- stack 1: 0x400
- stack 0: 0x1000
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x1000
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F8C0005300420066000000860000009504C000B400AA00CE000001200000
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34F8C0005300420066000000860000009504C000B400AA00CE000001200000
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1856(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F8C0005300420066000000860000009504C000B400AA00CE000001200000
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34F8C0005300420066000000860000009504C000B400AA00CE000001200000
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34F8C0
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x34F8C0
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0xF8C0
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0xF8C0
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8C0
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8C0
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8C0
- stack 0: 0x1000
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x8C0
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x8C0
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x5300420066000000860000009504C000B400AA00CE000001200000015500AA
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x5300420066000000860000009504C000B400AA00CE000001200000015500AA
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x66000000860000009504C000B400AA00CE000001200000015500AA016F0002
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x66000000860000009504C000B400AA00CE000001200000015500AA016F0002
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_4fb38844d03556948b13ad6e5ad6d3b3469e437d704a9492b730737587aa4784	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_4fb38844d03556948b13ad6e5ad6d3b3469e437d704a9492b730737587aa4784	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x8C0
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x860000009504C000B400AA00CE000001200000015500AA016F00020189045C
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x860000009504C000B400AA00CE000001200000015500AA016F00020189045C
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	 
- stack 1: 0x410
- stack 0: 0x410
77	 88	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x410
- stack 0: 0x20
78	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 8C	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 8E	ADD		 	 
- stack 0: 0x414
81	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 90	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x9504C000B400AA00CE000001200000015500AA016F00020189045C00860000
83	 91	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x9504C000B400AA00CE000001200000015500AA016F00020189045C00860000
- stack 0: 0xF0
84	 93	SHR		 	 
- stack 1: 0x414
- stack 0: 0x95
85	 94	JUMP		 	 
- stack 0: 0x414
86	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x414
87	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 97	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x9504C000B400AA00CE000001200000015500AA016F00020189045C00860000
89	 98	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x9504C000B400AA00CE000001200000015500AA016F00020189045C00860000
- stack 0: 0xE0
90	 9A	SHR		 	 
- stack 1: 0x414
- stack 0: 0x9504C0
91	 9B	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x9504C0
- stack 0: 0xFFFF
92	 9E	AND		 	 
- stack 1: 0x414
- stack 0: 0x4C0
93	 9F	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x4C0
- stack 0: 0x1
94	 A1	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x4C0
95	 A2	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x4C0
- stack 0: 0x20
96	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0x4C0
- stack 0: 0x410
97	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x414
- stack 0: 0x8D0
98	 A7	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x8D0
- stack 0: 0x20
99	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
100	 AB	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
101	 AD	ADD		 	 
- stack 0: 0x418
102	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
103	 AF	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB400AA00CE000001200000015500AA016F00020189045C00860000009504A0
104	 B0	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB400AA00CE000001200000015500AA016F00020189045C00860000009504A0
- stack 0: 0xF0
105	 B2	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB4
106	 B3	JUMP		 	 
- stack 0: 0x418
107	 B4	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,170(ignore imm)
- stack 0: 0x418
108	 B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
109	 B6	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB400AA00CE000001200000015500AA016F00020189045C00860000009504A0
110	 B7	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xB400AA00CE000001200000015500AA016F00020189045C00860000009504A0
- stack 0: 0xE0
111	 B9	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB400AA
112	 BA	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xB400AA
- stack 0: 0xFFFF
113	 BD	AND		 	 
- stack 1: 0x418
- stack 0: 0xAA
114	 BE	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0xAA
- stack 0: 0x1
115	 C0	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0xAA
116	 C1	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0xAA
- stack 0: 0x40
117	 C4	MSTORE		 	  ;; # store to x2
- stack 0: 0x418
118	 C5	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
119	 C7	ADD		 	 
- stack 0: 0x41C
120	 C8	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
121	 C9	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xCE000001200000015500AA016F00020189045C00860000009504A001CBFFFB
122	 CA	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xCE000001200000015500AA016F00020189045C00860000009504A001CBFFFB
- stack 0: 0xF0
123	 CC	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xCE
124	 CD	JUMP		 	 
- stack 0: 0x41C
125	 CE	JUMPDEST		 ;; __riscvimpl_SH_0_1_2	  ;; # instr: sh sp,0(ra)(ignore imm)
- stack 0: 0x41C
126	 CF	PUSH2	0020	 	 
- stack 1: 0x41C
- stack 0: 0x20
127	 D2	MLOAD		 	  ;; # read from x1
- stack 1: 0x41C
- stack 0: 0x8D0
128	 D3	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x41C
- stack 1: 0x8D0
- stack 0: 0x41C
129	 D4	MLOAD		 	 
- stack 2: 0x41C
- stack 1: 0x8D0
- stack 0: 0xCE000001200000015500AA016F00020189045C00860000009504A001CBFFFB
130	 D5	PUSH1	E0	 	 
- stack 3: 0x41C
- stack 2: 0x8D0
- stack 1: 0xCE000001200000015500AA016F00020189045C00860000009504A001CBFFFB
- stack 0: 0xE0
131	 D7	SHR		 	 
- stack 2: 0x41C
- stack 1: 0x8D0
- stack 0: 0xCE0000
132	 D8	PUSH2	FFFF	 	 
- stack 3: 0x41C
- stack 2: 0x8D0
- stack 1: 0xCE0000
- stack 0: 0xFFFF
133	 DB	AND		 	 
- stack 2: 0x41C
- stack 1: 0x8D0
- stack 0: 0x0
134	 DC	PUSH1	01	 	 
- stack 3: 0x41C
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
135	 DE	SIGNEXTEND		 	 
- stack 2: 0x41C
- stack 1: 0x8D0
- stack 0: 0x0
136	 DF	ADD		 	 
- stack 1: 0x41C
- stack 0: 0x8D0
137	 E0	PUSH4	FFFFFFFF	 	 
- stack 2: 0x41C
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
138	 E5	AND		 	  ;; # mask to 32 bits
- stack 1: 0x41C
- stack 0: 0x8D0
139	 E6	PUSH1	02	 	 
- stack 2: 0x41C
- stack 1: 0x8D0
- stack 0: 0x2
140	 E8	XOR		 	 
- stack 1: 0x41C
- stack 0: 0x8D2
141	 E9	DUP1		 	 
- stack 2: 0x41C
- stack 1: 0x8D2
- stack 0: 0x8D2
142	 EA	MLOAD		 	  ;; # fetch
- stack 2: 0x41C
- stack 1: 0x8D2
- stack 0: 0xBEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF0000000000000000000000000000
143	 EB	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x41C
- stack 2: 0x8D2
- stack 1: 0xBEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF0000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
144	 10C	AND		 	 
- stack 2: 0x41C
- stack 1: 0x8D2
- stack 0: 0xBEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF0000000000000000000000000000
145	 10D	PUSH2	0040	 	 
- stack 3: 0x41C
- stack 2: 0x8D2
- stack 1: 0xBEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF0000000000000000000000000000
- stack 0: 0x40
146	 110	MLOAD		 	  ;; # read from x2
- stack 3: 0x41C
- stack 2: 0x8D2
- stack 1: 0xBEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF0000000000000000000000000000
- stack 0: 0xAA
147	 111	PUSH1	F0	 	 
- stack 4: 0x41C
- stack 3: 0x8D2
- stack 2: 0xBEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF0000000000000000000000000000
- stack 1: 0xAA
- stack 0: 0xF0
148	 113	SHL		 	 
- stack 3: 0x41C
- stack 2: 0x8D2
- stack 1: 0xBEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF0000000000000000000000000000
- stack 0: 0xAA000000000000000000000000000000000000000000000000000000000000
149	 114	ADD		 	 
- stack 2: 0x41C
- stack 1: 0x8D2
- stack 0: 0xAABEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF0000000000000000000000000000
150	 115	SWAP1		 	 
- stack 2: 0x41C
- stack 1: 0xAABEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF0000000000000000000000000000
- stack 0: 0x8D2
151	 116	MSTORE		 	 
- stack 0: 0x41C
152	 117	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
153	 119	ADD		 	 
- stack 0: 0x420
154	 11A	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
155	 11B	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0x1200000015500AA016F00020189045C00860000009504A001CBFFFB01DEFA00
156	 11C	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0x1200000015500AA016F00020189045C00860000009504A001CBFFFB01DEFA00
- stack 0: 0xF0
157	 11E	SHR		 	 
- stack 1: 0x420
- stack 0: 0x120
158	 11F	JUMP		 	 
- stack 0: 0x420
159	 120	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x420
160	 121	PUSH2	0020	 	 
- stack 1: 0x420
- stack 0: 0x20
161	 124	MLOAD		 	  ;; # read from x1
- stack 1: 0x420
- stack 0: 0x8D0
162	 125	PUSH4	FFFFFFFF	 	 
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
163	 12A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x420
- stack 0: 0x8D0
164	 12B	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0x420
165	 12C	MLOAD		 	 
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0x1200000015500AA016F00020189045C00860000009504A001CBFFFB01DEFA00
166	 12D	PUSH1	E0	 	 
- stack 3: 0x420
- stack 2: 0x8D0
- stack 1: 0x1200000015500AA016F00020189045C00860000009504A001CBFFFB01DEFA00
- stack 0: 0xE0
167	 12F	SHR		 	 
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0x1200000
168	 130	PUSH2	FFFF	 	 
- stack 3: 0x420
- stack 2: 0x8D0
- stack 1: 0x1200000
- stack 0: 0xFFFF
169	 133	AND		 	 
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0x0
170	 134	PUSH1	01	 	 
- stack 3: 0x420
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
171	 136	SIGNEXTEND		 	 
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0x0
172	 137	ADD		 	 
- stack 1: 0x420
- stack 0: 0x8D0
173	 138	PUSH4	FFFFFFFF	 	 
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
174	 13D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x420
- stack 0: 0x8D0
175	 13E	PUSH1	02	 	 
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0x2
176	 140	XOR		 	 
- stack 1: 0x420
- stack 0: 0x8D2
177	 141	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xAABEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF0000000000000000000000000000
178	 142	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xAABEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF0000000000000000000000000000
- stack 0: 0xF0
179	 144	SHR		 	 
- stack 1: 0x420
- stack 0: 0xAA
180	 145	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0xAA
- stack 0: 0x1
181	 147	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0xAA
182	 148	PUSH2	0060	 	 
- stack 2: 0x420
- stack 1: 0xAA
- stack 0: 0x60
183	 14B	MSTORE		 	  ;; # store to x3
- stack 0: 0x420
184	 14C	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
185	 14E	ADD		 	 
- stack 0: 0x424
186	 14F	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
187	 150	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x15500AA016F00020189045C00860000009504A001CBFFFB01DEFA0000CE0002
188	 151	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x15500AA016F00020189045C00860000009504A001CBFFFB01DEFA0000CE0002
- stack 0: 0xF0
189	 153	SHR		 	 
- stack 1: 0x424
- stack 0: 0x155
190	 154	JUMP		 	 
- stack 0: 0x424
191	 155	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,170(ignore imm)
- stack 0: 0x424
192	 156	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
193	 157	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x15500AA016F00020189045C00860000009504A001CBFFFB01DEFA0000CE0002
194	 158	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x15500AA016F00020189045C00860000009504A001CBFFFB01DEFA0000CE0002
- stack 0: 0xE0
195	 15A	SHR		 	 
- stack 1: 0x424
- stack 0: 0x15500AA
196	 15B	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x15500AA
- stack 0: 0xFFFF
197	 15E	AND		 	 
- stack 1: 0x424
- stack 0: 0xAA
198	 15F	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0xAA
- stack 0: 0x1
199	 161	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0xAA
200	 162	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0xAA
- stack 0: 0x3A0
201	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x424
202	 166	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
203	 168	ADD		 	 
- stack 0: 0x428
204	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
205	 16A	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x16F00020189045C00860000009504A001CBFFFB01DEFA0000CE000201200002
206	 16B	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x16F00020189045C00860000009504A001CBFFFB01DEFA0000CE000201200002
- stack 0: 0xF0
207	 16D	SHR		 	 
- stack 1: 0x428
- stack 0: 0x16F
208	 16E	JUMP		 	 
- stack 0: 0x428
209	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x428
210	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
211	 171	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x16F00020189045C00860000009504A001CBFFFB01DEFA0000CE000201200002
212	 172	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0x16F00020189045C00860000009504A001CBFFFB01DEFA0000CE000201200002
- stack 0: 0xE0
213	 174	SHR		 	 
- stack 1: 0x428
- stack 0: 0x16F0002
214	 175	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0x16F0002
- stack 0: 0xFFFF
215	 178	AND		 	 
- stack 1: 0x428
- stack 0: 0x2
216	 179	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0x2
- stack 0: 0x1
217	 17B	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0x2
218	 17C	PUSH2	0380	 	 
- stack 2: 0x428
- stack 1: 0x2
- stack 0: 0x380
219	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x428
220	 180	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
221	 182	ADD		 	 
- stack 0: 0x42C
222	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
223	 184	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x189045C00860000009504A001CBFFFB01DEFA0000CE00020120000201FDFFFB
224	 185	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x189045C00860000009504A001CBFFFB01DEFA0000CE00020120000201FDFFFB
- stack 0: 0xF0
225	 187	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x189
226	 188	JUMP		 	 
- stack 0: 0x42C
227	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x42C
228	 18A	PUSH2	0060	 	 
- stack 1: 0x42C
- stack 0: 0x60
229	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x42C
- stack 0: 0xAA
230	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x42C
- stack 1: 0xAA
- stack 0: 0xFFFFFFFF
231	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x42C
- stack 0: 0xAA
232	 194	PUSH2	03A0	 	 
- stack 2: 0x42C
- stack 1: 0xAA
- stack 0: 0x3A0
233	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x42C
- stack 1: 0xAA
- stack 0: 0xAA
234	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x42C
- stack 2: 0xAA
- stack 1: 0xAA
- stack 0: 0xFFFFFFFF
235	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x42C
- stack 1: 0xAA
- stack 0: 0xAA
236	 19E	SUB		 	 
- stack 1: 0x42C
- stack 0: 0x0
237	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x42C
- stack 1: 0x0
- stack 0: 0x1A7
238	 1A2	JUMPI		 	 
- stack 0: 0x42C
239	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x42C
- stack 0: 0x1C1
240	 1A6	JUMP		 	 
- stack 0: 0x42C
241	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x42C
242	 1C2	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
243	 1C4	ADD		 	 
- stack 0: 0x430
244	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
245	 1C6	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x860000009504A001CBFFFB01DEFA0000CE00020120000201FDFFFB0210FA00
246	 1C7	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x860000009504A001CBFFFB01DEFA0000CE00020120000201FDFFFB0210FA00
- stack 0: 0xF0
247	 1C9	SHR		 	 
- stack 1: 0x430
- stack 0: 0x86
248	 1CA	JUMP		 	 
- stack 0: 0x430
249	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x430
250	 87	DUP1		 	 
- stack 1: 0x430
- stack 0: 0x430
251	 88	PUSH2	0020	 	 
- stack 2: 0x430
- stack 1: 0x430
- stack 0: 0x20
252	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x430
253	 8C	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
254	 8E	ADD		 	 
- stack 0: 0x434
255	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
256	 90	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x9504A001CBFFFB01DEFA0000CE00020120000201FDFFFB0210FA00016F0003
257	 91	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0x9504A001CBFFFB01DEFA0000CE00020120000201FDFFFB0210FA00016F0003
- stack 0: 0xF0
258	 93	SHR		 	 
- stack 1: 0x434
- stack 0: 0x95
259	 94	JUMP		 	 
- stack 0: 0x434
260	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x434
261	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
262	 97	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x9504A001CBFFFB01DEFA0000CE00020120000201FDFFFB0210FA00016F0003
263	 98	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0x9504A001CBFFFB01DEFA0000CE00020120000201FDFFFB0210FA00016F0003
- stack 0: 0xE0
264	 9A	SHR		 	 
- stack 1: 0x434
- stack 0: 0x9504A0
265	 9B	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0x9504A0
- stack 0: 0xFFFF
266	 9E	AND		 	 
- stack 1: 0x434
- stack 0: 0x4A0
267	 9F	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0x4A0
- stack 0: 0x1
268	 A1	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0x4A0
269	 A2	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0x4A0
- stack 0: 0x20
270	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x434
- stack 1: 0x4A0
- stack 0: 0x430
271	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x434
- stack 0: 0x8D0
272	 A7	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0x8D0
- stack 0: 0x20
273	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x434
274	 AB	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
275	 AD	ADD		 	 
- stack 0: 0x438
276	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
277	 AF	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x1CBFFFB01DEFA0000CE00020120000201FDFFFB0210FA00016F000301890434
278	 B0	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x1CBFFFB01DEFA0000CE00020120000201FDFFFB0210FA00016F000301890434
- stack 0: 0xF0
279	 B2	SHR		 	 
- stack 1: 0x438
- stack 0: 0x1CB
280	 B3	JUMP		 	 
- stack 0: 0x438
281	 1CB	JUMPDEST		 ;; __riscvimpl_LUI_ffffb137	  ;; # instr: lui sp,0xffffb(ignore imm)
- stack 0: 0x438
282	 1CC	PUSH4	ffffb000	 	 
- stack 1: 0x438
- stack 0: 0xFFFFB000
283	 1D1	PUSH2	0040	 	 
- stack 2: 0x438
- stack 1: 0xFFFFB000
- stack 0: 0x40
284	 1D4	MSTORE		 	  ;; # store to x2
- stack 0: 0x438
285	 1D5	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
286	 1D7	ADD		 	 
- stack 0: 0x43C
287	 1D8	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
288	 1D9	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x1DEFA0000CE00020120000201FDFFFB0210FA00016F00030189043400860000
289	 1DA	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x1DEFA0000CE00020120000201FDFFFB0210FA00016F00030189043400860000
- stack 0: 0xF0
290	 1DC	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x1DE
291	 1DD	JUMP		 	 
- stack 0: 0x43C
292	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x43C
293	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
294	 1E0	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x1DEFA0000CE00020120000201FDFFFB0210FA00016F00030189043400860000
295	 1E1	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0x1DEFA0000CE00020120000201FDFFFB0210FA00016F00030189043400860000
- stack 0: 0xE0
296	 1E3	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x1DEFA00
297	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0x1DEFA00
- stack 0: 0xFFFF
298	 1E7	AND		 	 
- stack 1: 0x43C
- stack 0: 0xFA00
299	 1E8	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0xFA00
- stack 0: 0x1
300	 1EA	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
301	 1EB	PUSH2	0040	 	 
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0x40
302	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0xFFFFB000
303	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x43C
- stack 0: 0xFFFFAA00
304	 1F0	PUSH2	0040	 	 
- stack 2: 0x43C
- stack 1: 0xFFFFAA00
- stack 0: 0x40
305	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x43C
306	 1F4	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
307	 1F6	ADD		 	 
- stack 0: 0x440
308	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
309	 1F8	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xCE00020120000201FDFFFB0210FA00016F0003018904340086000000950478
310	 1F9	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0xCE00020120000201FDFFFB0210FA00016F0003018904340086000000950478
- stack 0: 0xF0
311	 1FB	SHR		 	 
- stack 1: 0x440
- stack 0: 0xCE
312	 1FC	JUMP		 	 
- stack 0: 0x440
313	 CE	JUMPDEST		 ;; __riscvimpl_SH_0_1_2	  ;; # instr: sh sp,0(ra)(ignore imm)
- stack 0: 0x440
314	 CF	PUSH2	0020	 	 
- stack 1: 0x440
- stack 0: 0x20
315	 D2	MLOAD		 	  ;; # read from x1
- stack 1: 0x440
- stack 0: 0x8D0
316	 D3	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x440
- stack 1: 0x8D0
- stack 0: 0x440
317	 D4	MLOAD		 	 
- stack 2: 0x440
- stack 1: 0x8D0
- stack 0: 0xCE00020120000201FDFFFB0210FA00016F0003018904340086000000950478
318	 D5	PUSH1	E0	 	 
- stack 3: 0x440
- stack 2: 0x8D0
- stack 1: 0xCE00020120000201FDFFFB0210FA00016F0003018904340086000000950478
- stack 0: 0xE0
319	 D7	SHR		 	 
- stack 2: 0x440
- stack 1: 0x8D0
- stack 0: 0xCE0002
320	 D8	PUSH2	FFFF	 	 
- stack 3: 0x440
- stack 2: 0x8D0
- stack 1: 0xCE0002
- stack 0: 0xFFFF
321	 DB	AND		 	 
- stack 2: 0x440
- stack 1: 0x8D0
- stack 0: 0x2
322	 DC	PUSH1	01	 	 
- stack 3: 0x440
- stack 2: 0x8D0
- stack 1: 0x2
- stack 0: 0x1
323	 DE	SIGNEXTEND		 	 
- stack 2: 0x440
- stack 1: 0x8D0
- stack 0: 0x2
324	 DF	ADD		 	 
- stack 1: 0x440
- stack 0: 0x8D2
325	 E0	PUSH4	FFFFFFFF	 	 
- stack 2: 0x440
- stack 1: 0x8D2
- stack 0: 0xFFFFFFFF
326	 E5	AND		 	  ;; # mask to 32 bits
- stack 1: 0x440
- stack 0: 0x8D2
327	 E6	PUSH1	02	 	 
- stack 2: 0x440
- stack 1: 0x8D2
- stack 0: 0x2
328	 E8	XOR		 	 
- stack 1: 0x440
- stack 0: 0x8D0
329	 E9	DUP1		 	 
- stack 2: 0x440
- stack 1: 0x8D0
- stack 0: 0x8D0
330	 EA	MLOAD		 	  ;; # fetch
- stack 2: 0x440
- stack 1: 0x8D0
- stack 0: 0xBEEF00AABEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000
331	 EB	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x440
- stack 2: 0x8D0
- stack 1: 0xBEEF00AABEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
332	 10C	AND		 	 
- stack 2: 0x440
- stack 1: 0x8D0
- stack 0: 0xAABEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000
333	 10D	PUSH2	0040	 	 
- stack 3: 0x440
- stack 2: 0x8D0
- stack 1: 0xAABEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000
- stack 0: 0x40
334	 110	MLOAD		 	  ;; # read from x2
- stack 3: 0x440
- stack 2: 0x8D0
- stack 1: 0xAABEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000
- stack 0: 0xFFFFAA00
335	 111	PUSH1	F0	 	 
- stack 4: 0x440
- stack 3: 0x8D0
- stack 2: 0xAABEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000
- stack 1: 0xFFFFAA00
- stack 0: 0xF0
336	 113	SHL		 	 
- stack 3: 0x440
- stack 2: 0x8D0
- stack 1: 0xAABEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000
- stack 0: 0xAA00000000000000000000000000000000000000000000000000000000000000
337	 114	ADD		 	 
- stack 2: 0x440
- stack 1: 0x8D0
- stack 0: 0xAA0000AABEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000
338	 115	SWAP1		 	 
- stack 2: 0x440
- stack 1: 0xAA0000AABEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000
- stack 0: 0x8D0
339	 116	MSTORE		 	 
- stack 0: 0x440
340	 117	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
341	 119	ADD		 	 
- stack 0: 0x444
342	 11A	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
343	 11B	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x120000201FDFFFB0210FA00016F0003018904340086000000950478022FEEF1
344	 11C	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x120000201FDFFFB0210FA00016F0003018904340086000000950478022FEEF1
- stack 0: 0xF0
345	 11E	SHR		 	 
- stack 1: 0x444
- stack 0: 0x120
346	 11F	JUMP		 	 
- stack 0: 0x444
347	 120	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x444
348	 121	PUSH2	0020	 	 
- stack 1: 0x444
- stack 0: 0x20
349	 124	MLOAD		 	  ;; # read from x1
- stack 1: 0x444
- stack 0: 0x8D0
350	 125	PUSH4	FFFFFFFF	 	 
- stack 2: 0x444
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
351	 12A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x444
- stack 0: 0x8D0
352	 12B	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x444
- stack 1: 0x8D0
- stack 0: 0x444
353	 12C	MLOAD		 	 
- stack 2: 0x444
- stack 1: 0x8D0
- stack 0: 0x120000201FDFFFB0210FA00016F0003018904340086000000950478022FEEF1
354	 12D	PUSH1	E0	 	 
- stack 3: 0x444
- stack 2: 0x8D0
- stack 1: 0x120000201FDFFFB0210FA00016F0003018904340086000000950478022FEEF1
- stack 0: 0xE0
355	 12F	SHR		 	 
- stack 2: 0x444
- stack 1: 0x8D0
- stack 0: 0x1200002
356	 130	PUSH2	FFFF	 	 
- stack 3: 0x444
- stack 2: 0x8D0
- stack 1: 0x1200002
- stack 0: 0xFFFF
357	 133	AND		 	 
- stack 2: 0x444
- stack 1: 0x8D0
- stack 0: 0x2
358	 134	PUSH1	01	 	 
- stack 3: 0x444
- stack 2: 0x8D0
- stack 1: 0x2
- stack 0: 0x1
359	 136	SIGNEXTEND		 	 
- stack 2: 0x444
- stack 1: 0x8D0
- stack 0: 0x2
360	 137	ADD		 	 
- stack 1: 0x444
- stack 0: 0x8D2
361	 138	PUSH4	FFFFFFFF	 	 
- stack 2: 0x444
- stack 1: 0x8D2
- stack 0: 0xFFFFFFFF
362	 13D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x444
- stack 0: 0x8D2
363	 13E	PUSH1	02	 	 
- stack 2: 0x444
- stack 1: 0x8D2
- stack 0: 0x2
364	 140	XOR		 	 
- stack 1: 0x444
- stack 0: 0x8D0
365	 141	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xAA0000AABEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000
366	 142	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xAA0000AABEEFBEEFBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000
- stack 0: 0xF0
367	 144	SHR		 	 
- stack 1: 0x444
- stack 0: 0xAA00
368	 145	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0xAA00
- stack 0: 0x1
369	 147	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA00
370	 148	PUSH2	0060	 	 
- stack 2: 0x444
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA00
- stack 0: 0x60
371	 14B	MSTORE		 	  ;; # store to x3
- stack 0: 0x444
372	 14C	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
373	 14E	ADD		 	 
- stack 0: 0x448
374	 14F	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
375	 150	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x1FDFFFB0210FA00016F0003018904340086000000950478022FEEF101DEFAA0
376	 151	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0x1FDFFFB0210FA00016F0003018904340086000000950478022FEEF101DEFAA0
- stack 0: 0xF0
377	 153	SHR		 	 
- stack 1: 0x448
- stack 0: 0x1FD
378	 154	JUMP		 	 
- stack 0: 0x448
379	 1FD	JUMPDEST		 ;; __riscvimpl_LUI_ffffbeb7	  ;; # instr: lui t4,0xffffb(ignore imm)
- stack 0: 0x448
380	 1FE	PUSH4	ffffb000	 	 
- stack 1: 0x448
- stack 0: 0xFFFFB000
381	 203	PUSH2	03A0	 	 
- stack 2: 0x448
- stack 1: 0xFFFFB000
- stack 0: 0x3A0
382	 206	MSTORE		 	  ;; # store to x29
- stack 0: 0x448
383	 207	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
384	 209	ADD		 	 
- stack 0: 0x44C
385	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
386	 20B	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x210FA00016F0003018904340086000000950478022FEEF101DEFAA000CE0004
387	 20C	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x210FA00016F0003018904340086000000950478022FEEF101DEFAA000CE0004
- stack 0: 0xF0
388	 20E	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x210
389	 20F	JUMP		 	 
- stack 0: 0x44C
390	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x44C
391	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
392	 212	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x210FA00016F0003018904340086000000950478022FEEF101DEFAA000CE0004
393	 213	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0x210FA00016F0003018904340086000000950478022FEEF101DEFAA000CE0004
- stack 0: 0xE0
394	 215	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x210FA00
395	 216	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0x210FA00
- stack 0: 0xFFFF
396	 219	AND		 	 
- stack 1: 0x44C
- stack 0: 0xFA00
397	 21A	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0xFA00
- stack 0: 0x1
398	 21C	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
399	 21D	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0x3A0
400	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0xFFFFB000
401	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x44C
- stack 0: 0xFFFFAA00
402	 222	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0xFFFFAA00
- stack 0: 0x3A0
403	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x44C
404	 226	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
405	 228	ADD		 	 
- stack 0: 0x450
406	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
407	 22A	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x16F0003018904340086000000950478022FEEF101DEFAA000CE000402420004
408	 22B	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x16F0003018904340086000000950478022FEEF101DEFAA000CE000402420004
- stack 0: 0xF0
409	 22D	SHR		 	 
- stack 1: 0x450
- stack 0: 0x16F
410	 22E	JUMP		 	 
- stack 0: 0x450
411	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
412	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
413	 171	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x16F0003018904340086000000950478022FEEF101DEFAA000CE000402420004
414	 172	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x16F0003018904340086000000950478022FEEF101DEFAA000CE000402420004
- stack 0: 0xE0
415	 174	SHR		 	 
- stack 1: 0x450
- stack 0: 0x16F0003
416	 175	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x16F0003
- stack 0: 0xFFFF
417	 178	AND		 	 
- stack 1: 0x450
- stack 0: 0x3
418	 179	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x3
- stack 0: 0x1
419	 17B	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x3
420	 17C	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x3
- stack 0: 0x380
421	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
422	 180	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
423	 182	ADD		 	 
- stack 0: 0x454
424	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
425	 184	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x18904340086000000950478022FEEF101DEFAA000CE0004024200040271EEF1
426	 185	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x18904340086000000950478022FEEF101DEFAA000CE0004024200040271EEF1
- stack 0: 0xF0
427	 187	SHR		 	 
- stack 1: 0x454
- stack 0: 0x189
428	 188	JUMP		 	 
- stack 0: 0x454
429	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x454
430	 18A	PUSH2	0060	 	 
- stack 1: 0x454
- stack 0: 0x60
431	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x454
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA00
432	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x454
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA00
- stack 0: 0xFFFFFFFF
433	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x454
- stack 0: 0xFFFFAA00
434	 194	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xFFFFAA00
- stack 0: 0x3A0
435	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x454
- stack 1: 0xFFFFAA00
- stack 0: 0xFFFFAA00
436	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x454
- stack 2: 0xFFFFAA00
- stack 1: 0xFFFFAA00
- stack 0: 0xFFFFFFFF
437	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x454
- stack 1: 0xFFFFAA00
- stack 0: 0xFFFFAA00
438	 19E	SUB		 	 
- stack 1: 0x454
- stack 0: 0x0
439	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x454
- stack 1: 0x0
- stack 0: 0x1A7
440	 1A2	JUMPI		 	 
- stack 0: 0x454
441	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x454
- stack 0: 0x1C1
442	 1A6	JUMP		 	 
- stack 0: 0x454
443	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x454
444	 1C2	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
445	 1C4	ADD		 	 
- stack 0: 0x458
446	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
447	 1C6	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x86000000950478022FEEF101DEFAA000CE0004024200040271EEF10210FAA0
448	 1C7	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x86000000950478022FEEF101DEFAA000CE0004024200040271EEF10210FAA0
- stack 0: 0xF0
449	 1C9	SHR		 	 
- stack 1: 0x458
- stack 0: 0x86
450	 1CA	JUMP		 	 
- stack 0: 0x458
451	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x458
452	 87	DUP1		 	 
- stack 1: 0x458
- stack 0: 0x458
453	 88	PUSH2	0020	 	 
- stack 2: 0x458
- stack 1: 0x458
- stack 0: 0x20
454	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x458
455	 8C	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
456	 8E	ADD		 	 
- stack 0: 0x45C
457	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
458	 90	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x950478022FEEF101DEFAA000CE0004024200040271EEF10210FAA0016F0004
459	 91	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x950478022FEEF101DEFAA000CE0004024200040271EEF10210FAA0016F0004
- stack 0: 0xF0
460	 93	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x95
461	 94	JUMP		 	 
- stack 0: 0x45C
462	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x45C
463	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
464	 97	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x950478022FEEF101DEFAA000CE0004024200040271EEF10210FAA0016F0004
465	 98	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0x950478022FEEF101DEFAA000CE0004024200040271EEF10210FAA0016F0004
- stack 0: 0xE0
466	 9A	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x950478
467	 9B	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0x950478
- stack 0: 0xFFFF
468	 9E	AND		 	 
- stack 1: 0x45C
- stack 0: 0x478
469	 9F	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0x478
- stack 0: 0x1
470	 A1	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0x478
471	 A2	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0x478
- stack 0: 0x20
472	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x45C
- stack 1: 0x478
- stack 0: 0x458
473	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x45C
- stack 0: 0x8D0
474	 A7	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0x8D0
- stack 0: 0x20
475	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x45C
476	 AB	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
477	 AD	ADD		 	 
- stack 0: 0x460
478	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
479	 AF	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x22FEEF101DEFAA000CE0004024200040271EEF10210FAA0016F00040189040C
480	 B0	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x22FEEF101DEFAA000CE0004024200040271EEF10210FAA0016F00040189040C
- stack 0: 0xF0
481	 B2	SHR		 	 
- stack 1: 0x460
- stack 0: 0x22F
482	 B3	JUMP		 	 
- stack 0: 0x460
483	 22F	JUMPDEST		 ;; __riscvimpl_LUI_beef1137	  ;; # instr: lui sp,0xbeef1(ignore imm)
- stack 0: 0x460
484	 230	PUSH4	beef1000	 	 
- stack 1: 0x460
- stack 0: 0xBEEF1000
485	 235	PUSH2	0040	 	 
- stack 2: 0x460
- stack 1: 0xBEEF1000
- stack 0: 0x40
486	 238	MSTORE		 	  ;; # store to x2
- stack 0: 0x460
487	 239	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
488	 23B	ADD		 	 
- stack 0: 0x464
489	 23C	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
490	 23D	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x1DEFAA000CE0004024200040271EEF10210FAA0016F00040189040C00860000
491	 23E	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x1DEFAA000CE0004024200040271EEF10210FAA0016F00040189040C00860000
- stack 0: 0xF0
492	 240	SHR		 	 
- stack 1: 0x464
- stack 0: 0x1DE
493	 241	JUMP		 	 
- stack 0: 0x464
494	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x464
495	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
496	 1E0	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x1DEFAA000CE0004024200040271EEF10210FAA0016F00040189040C00860000
497	 1E1	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0x1DEFAA000CE0004024200040271EEF10210FAA0016F00040189040C00860000
- stack 0: 0xE0
498	 1E3	SHR		 	 
- stack 1: 0x464
- stack 0: 0x1DEFAA0
499	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0x1DEFAA0
- stack 0: 0xFFFF
500	 1E7	AND		 	 
- stack 1: 0x464
- stack 0: 0xFAA0
501	 1E8	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xFAA0
- stack 0: 0x1
502	 1EA	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
503	 1EB	PUSH2	0040	 	 
- stack 2: 0x464
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0x40
504	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x464
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0xBEEF1000
505	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x464
- stack 0: 0xBEEF0AA0
506	 1F0	PUSH2	0040	 	 
- stack 2: 0x464
- stack 1: 0xBEEF0AA0
- stack 0: 0x40
507	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x464
508	 1F4	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
509	 1F6	ADD		 	 
- stack 0: 0x468
510	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
511	 1F8	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xCE0004024200040271EEF10210FAA0016F00040189040C0086000000950450
512	 1F9	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xCE0004024200040271EEF10210FAA0016F00040189040C0086000000950450
- stack 0: 0xF0
513	 1FB	SHR		 	 
- stack 1: 0x468
- stack 0: 0xCE
514	 1FC	JUMP		 	 
- stack 0: 0x468
515	 CE	JUMPDEST		 ;; __riscvimpl_SH_0_1_2	  ;; # instr: sh sp,0(ra)(ignore imm)
- stack 0: 0x468
516	 CF	PUSH2	0020	 	 
- stack 1: 0x468
- stack 0: 0x20
517	 D2	MLOAD		 	  ;; # read from x1
- stack 1: 0x468
- stack 0: 0x8D0
518	 D3	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x468
- stack 1: 0x8D0
- stack 0: 0x468
519	 D4	MLOAD		 	 
- stack 2: 0x468
- stack 1: 0x8D0
- stack 0: 0xCE0004024200040271EEF10210FAA0016F00040189040C0086000000950450
520	 D5	PUSH1	E0	 	 
- stack 3: 0x468
- stack 2: 0x8D0
- stack 1: 0xCE0004024200040271EEF10210FAA0016F00040189040C0086000000950450
- stack 0: 0xE0
521	 D7	SHR		 	 
- stack 2: 0x468
- stack 1: 0x8D0
- stack 0: 0xCE0004
522	 D8	PUSH2	FFFF	 	 
- stack 3: 0x468
- stack 2: 0x8D0
- stack 1: 0xCE0004
- stack 0: 0xFFFF
523	 DB	AND		 	 
- stack 2: 0x468
- stack 1: 0x8D0
- stack 0: 0x4
524	 DC	PUSH1	01	 	 
- stack 3: 0x468
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
525	 DE	SIGNEXTEND		 	 
- stack 2: 0x468
- stack 1: 0x8D0
- stack 0: 0x4
526	 DF	ADD		 	 
- stack 1: 0x468
- stack 0: 0x8D4
527	 E0	PUSH4	FFFFFFFF	 	 
- stack 2: 0x468
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
528	 E5	AND		 	  ;; # mask to 32 bits
- stack 1: 0x468
- stack 0: 0x8D4
529	 E6	PUSH1	02	 	 
- stack 2: 0x468
- stack 1: 0x8D4
- stack 0: 0x2
530	 E8	XOR		 	 
- stack 1: 0x468
- stack 0: 0x8D6
531	 E9	DUP1		 	 
- stack 2: 0x468
- stack 1: 0x8D6
- stack 0: 0x8D6
532	 EA	MLOAD		 	  ;; # fetch
- stack 2: 0x468
- stack 1: 0x8D6
- stack 0: 0xBEEFBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000000000000000
533	 EB	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x468
- stack 2: 0x8D6
- stack 1: 0xBEEFBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
534	 10C	AND		 	 
- stack 2: 0x468
- stack 1: 0x8D6
- stack 0: 0xBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000000000000000
535	 10D	PUSH2	0040	 	 
- stack 3: 0x468
- stack 2: 0x8D6
- stack 1: 0xBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000000000000000
- stack 0: 0x40
536	 110	MLOAD		 	  ;; # read from x2
- stack 3: 0x468
- stack 2: 0x8D6
- stack 1: 0xBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000000000000000
- stack 0: 0xBEEF0AA0
537	 111	PUSH1	F0	 	 
- stack 4: 0x468
- stack 3: 0x8D6
- stack 2: 0xBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000000000000000
- stack 1: 0xBEEF0AA0
- stack 0: 0xF0
538	 113	SHL		 	 
- stack 3: 0x468
- stack 2: 0x8D6
- stack 1: 0xBEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000000000000000
- stack 0: 0xAA0000000000000000000000000000000000000000000000000000000000000
539	 114	ADD		 	 
- stack 2: 0x468
- stack 1: 0x8D6
- stack 0: 0xAA0BEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000000000000000
540	 115	SWAP1		 	 
- stack 2: 0x468
- stack 1: 0xAA0BEEFBEEFBEEFBEEFBEEFBEEF000000000000000000000000000000000000
- stack 0: 0x8D6
541	 116	MSTORE		 	 
- stack 0: 0x468
542	 117	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
543	 119	ADD		 	 
- stack 0: 0x46C
544	 11A	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
545	 11B	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x24200040271EEF10210FAA0016F00040189040C00860000009504500284FFFA
546	 11C	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x24200040271EEF10210FAA0016F00040189040C00860000009504500284FFFA
- stack 0: 0xF0
547	 11E	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x242
548	 11F	JUMP		 	 
- stack 0: 0x46C
549	 242	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,4(ra)(ignore imm)
- stack 0: 0x46C
550	 243	PUSH2	0020	 	 
- stack 1: 0x46C
- stack 0: 0x20
551	 246	MLOAD		 	  ;; # read from x1
- stack 1: 0x46C
- stack 0: 0x8D0
552	 247	PUSH4	FFFFFFFF	 	 
- stack 2: 0x46C
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
553	 24C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x46C
- stack 0: 0x8D0
554	 24D	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x46C
- stack 1: 0x8D0
- stack 0: 0x46C
555	 24E	MLOAD		 	 
- stack 2: 0x46C
- stack 1: 0x8D0
- stack 0: 0x24200040271EEF10210FAA0016F00040189040C00860000009504500284FFFA
556	 24F	PUSH1	E0	 	 
- stack 3: 0x46C
- stack 2: 0x8D0
- stack 1: 0x24200040271EEF10210FAA0016F00040189040C00860000009504500284FFFA
- stack 0: 0xE0
557	 251	SHR		 	 
- stack 2: 0x46C
- stack 1: 0x8D0
- stack 0: 0x2420004
558	 252	PUSH2	FFFF	 	 
- stack 3: 0x46C
- stack 2: 0x8D0
- stack 1: 0x2420004
- stack 0: 0xFFFF
559	 255	AND		 	 
- stack 2: 0x46C
- stack 1: 0x8D0
- stack 0: 0x4
560	 256	PUSH1	01	 	 
- stack 3: 0x46C
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
561	 258	SIGNEXTEND		 	 
- stack 2: 0x46C
- stack 1: 0x8D0
- stack 0: 0x4
562	 259	ADD		 	 
- stack 1: 0x46C
- stack 0: 0x8D4
563	 25A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x46C
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
564	 25F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x46C
- stack 0: 0x8D4
565	 260	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xBEEF0AA0BEEFBEEFBEEFBEEFBEEFBEEF00000000000000000000000000000000
566	 261	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0xBEEF0AA0BEEFBEEFBEEFBEEFBEEFBEEF00000000000000000000000000000000
- stack 0: 0xE0
567	 263	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xBEEF0AA0
568	 264	PUSH2	0060	 	 
- stack 2: 0x46C
- stack 1: 0xBEEF0AA0
- stack 0: 0x60
569	 267	MSTORE		 	  ;; # store to x3
- stack 0: 0x46C
570	 268	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
571	 26A	ADD		 	 
- stack 0: 0x470
572	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
573	 26C	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x271EEF10210FAA0016F00040189040C00860000009504500284FFFA01DE000A
574	 26D	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x271EEF10210FAA0016F00040189040C00860000009504500284FFFA01DE000A
- stack 0: 0xF0
575	 26F	SHR		 	 
- stack 1: 0x470
- stack 0: 0x271
576	 270	JUMP		 	 
- stack 0: 0x470
577	 271	JUMPDEST		 ;; __riscvimpl_LUI_beef1eb7	  ;; # instr: lui t4,0xbeef1(ignore imm)
- stack 0: 0x470
578	 272	PUSH4	beef1000	 	 
- stack 1: 0x470
- stack 0: 0xBEEF1000
579	 277	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0xBEEF1000
- stack 0: 0x3A0
580	 27A	MSTORE		 	  ;; # store to x29
- stack 0: 0x470
581	 27B	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
582	 27D	ADD		 	 
- stack 0: 0x474
583	 27E	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
584	 27F	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x210FAA0016F00040189040C00860000009504500284FFFA01DE000A00CE0006
585	 280	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x210FAA0016F00040189040C00860000009504500284FFFA01DE000A00CE0006
- stack 0: 0xF0
586	 282	SHR		 	 
- stack 1: 0x474
- stack 0: 0x210
587	 283	JUMP		 	 
- stack 0: 0x474
588	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x474
589	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
590	 212	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x210FAA0016F00040189040C00860000009504500284FFFA01DE000A00CE0006
591	 213	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0x210FAA0016F00040189040C00860000009504500284FFFA01DE000A00CE0006
- stack 0: 0xE0
592	 215	SHR		 	 
- stack 1: 0x474
- stack 0: 0x210FAA0
593	 216	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0x210FAA0
- stack 0: 0xFFFF
594	 219	AND		 	 
- stack 1: 0x474
- stack 0: 0xFAA0
595	 21A	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0xFAA0
- stack 0: 0x1
596	 21C	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
597	 21D	PUSH2	03A0	 	 
- stack 2: 0x474
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0x3A0
598	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x474
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0xBEEF1000
599	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x474
- stack 0: 0xBEEF0AA0
600	 222	PUSH2	03A0	 	 
- stack 2: 0x474
- stack 1: 0xBEEF0AA0
- stack 0: 0x3A0
601	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x474
602	 226	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
603	 228	ADD		 	 
- stack 0: 0x478
604	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
605	 22A	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x16F00040189040C00860000009504500284FFFA01DE000A00CE000601200006
606	 22B	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x16F00040189040C00860000009504500284FFFA01DE000A00CE000601200006
- stack 0: 0xF0
607	 22D	SHR		 	 
- stack 1: 0x478
- stack 0: 0x16F
608	 22E	JUMP		 	 
- stack 0: 0x478
609	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x478
610	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
611	 171	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x16F00040189040C00860000009504500284FFFA01DE000A00CE000601200006
612	 172	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0x16F00040189040C00860000009504500284FFFA01DE000A00CE000601200006
- stack 0: 0xE0
613	 174	SHR		 	 
- stack 1: 0x478
- stack 0: 0x16F0004
614	 175	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0x16F0004
- stack 0: 0xFFFF
615	 178	AND		 	 
- stack 1: 0x478
- stack 0: 0x4
616	 179	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0x4
- stack 0: 0x1
617	 17B	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0x4
618	 17C	PUSH2	0380	 	 
- stack 2: 0x478
- stack 1: 0x4
- stack 0: 0x380
619	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x478
620	 180	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
621	 182	ADD		 	 
- stack 0: 0x47C
622	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
623	 184	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x189040C00860000009504500284FFFA01DE000A00CE0006012000060297FFFA
624	 185	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x189040C00860000009504500284FFFA01DE000A00CE0006012000060297FFFA
- stack 0: 0xF0
625	 187	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x189
626	 188	JUMP		 	 
- stack 0: 0x47C
627	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x47C
628	 18A	PUSH2	0060	 	 
- stack 1: 0x47C
- stack 0: 0x60
629	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x47C
- stack 0: 0xBEEF0AA0
630	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x47C
- stack 1: 0xBEEF0AA0
- stack 0: 0xFFFFFFFF
631	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x47C
- stack 0: 0xBEEF0AA0
632	 194	PUSH2	03A0	 	 
- stack 2: 0x47C
- stack 1: 0xBEEF0AA0
- stack 0: 0x3A0
633	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x47C
- stack 1: 0xBEEF0AA0
- stack 0: 0xBEEF0AA0
634	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x47C
- stack 2: 0xBEEF0AA0
- stack 1: 0xBEEF0AA0
- stack 0: 0xFFFFFFFF
635	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x47C
- stack 1: 0xBEEF0AA0
- stack 0: 0xBEEF0AA0
636	 19E	SUB		 	 
- stack 1: 0x47C
- stack 0: 0x0
637	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x1A7
638	 1A2	JUMPI		 	 
- stack 0: 0x47C
639	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x47C
- stack 0: 0x1C1
640	 1A6	JUMP		 	 
- stack 0: 0x47C
641	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x47C
642	 1C2	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
643	 1C4	ADD		 	 
- stack 0: 0x480
644	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
645	 1C6	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x860000009504500284FFFA01DE000A00CE0006012000060297FFFA0210000A
646	 1C7	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x860000009504500284FFFA01DE000A00CE0006012000060297FFFA0210000A
- stack 0: 0xF0
647	 1C9	SHR		 	 
- stack 1: 0x480
- stack 0: 0x86
648	 1CA	JUMP		 	 
- stack 0: 0x480
649	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x480
650	 87	DUP1		 	 
- stack 1: 0x480
- stack 0: 0x480
651	 88	PUSH2	0020	 	 
- stack 2: 0x480
- stack 1: 0x480
- stack 0: 0x20
652	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x480
653	 8C	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
654	 8E	ADD		 	 
- stack 0: 0x484
655	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
656	 90	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x9504500284FFFA01DE000A00CE0006012000060297FFFA0210000A016F0005
657	 91	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x9504500284FFFA01DE000A00CE0006012000060297FFFA0210000A016F0005
- stack 0: 0xF0
658	 93	SHR		 	 
- stack 1: 0x484
- stack 0: 0x95
659	 94	JUMP		 	 
- stack 0: 0x484
660	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x484
661	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x484
- stack 0: 0x484
662	 97	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x9504500284FFFA01DE000A00CE0006012000060297FFFA0210000A016F0005
663	 98	PUSH1	E0	 	 
- stack 2: 0x484
- stack 1: 0x9504500284FFFA01DE000A00CE0006012000060297FFFA0210000A016F0005
- stack 0: 0xE0
664	 9A	SHR		 	 
- stack 1: 0x484
- stack 0: 0x950450
665	 9B	PUSH2	FFFF	 	 
- stack 2: 0x484
- stack 1: 0x950450
- stack 0: 0xFFFF
666	 9E	AND		 	 
- stack 1: 0x484
- stack 0: 0x450
667	 9F	PUSH1	01	 	 
- stack 2: 0x484
- stack 1: 0x450
- stack 0: 0x1
668	 A1	SIGNEXTEND		 	 
- stack 1: 0x484
- stack 0: 0x450
669	 A2	PUSH2	0020	 	 
- stack 2: 0x484
- stack 1: 0x450
- stack 0: 0x20
670	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x484
- stack 1: 0x450
- stack 0: 0x480
671	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x484
- stack 0: 0x8D0
672	 A7	PUSH2	0020	 	 
- stack 2: 0x484
- stack 1: 0x8D0
- stack 0: 0x20
673	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x484
674	 AB	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
675	 AD	ADD		 	 
- stack 0: 0x488
676	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
677	 AF	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x284FFFA01DE000A00CE0006012000060297FFFA0210000A016F0005018903E4
678	 B0	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x284FFFA01DE000A00CE0006012000060297FFFA0210000A016F0005018903E4
- stack 0: 0xF0
679	 B2	SHR		 	 
- stack 1: 0x488
- stack 0: 0x284
680	 B3	JUMP		 	 
- stack 0: 0x488
681	 284	JUMPDEST		 ;; __riscvimpl_LUI_ffffa137	  ;; # instr: lui sp,0xffffa(ignore imm)
- stack 0: 0x488
682	 285	PUSH4	ffffa000	 	 
- stack 1: 0x488
- stack 0: 0xFFFFA000
683	 28A	PUSH2	0040	 	 
- stack 2: 0x488
- stack 1: 0xFFFFA000
- stack 0: 0x40
684	 28D	MSTORE		 	  ;; # store to x2
- stack 0: 0x488
685	 28E	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
686	 290	ADD		 	 
- stack 0: 0x48C
687	 291	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
688	 292	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x1DE000A00CE0006012000060297FFFA0210000A016F0005018903E400860000
689	 293	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x1DE000A00CE0006012000060297FFFA0210000A016F0005018903E400860000
- stack 0: 0xF0
690	 295	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x1DE
691	 296	JUMP		 	 
- stack 0: 0x48C
692	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x48C
693	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
694	 1E0	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x1DE000A00CE0006012000060297FFFA0210000A016F0005018903E400860000
695	 1E1	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0x1DE000A00CE0006012000060297FFFA0210000A016F0005018903E400860000
- stack 0: 0xE0
696	 1E3	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x1DE000A
697	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0x1DE000A
- stack 0: 0xFFFF
698	 1E7	AND		 	 
- stack 1: 0x48C
- stack 0: 0xA
699	 1E8	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0xA
- stack 0: 0x1
700	 1EA	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0xA
701	 1EB	PUSH2	0040	 	 
- stack 2: 0x48C
- stack 1: 0xA
- stack 0: 0x40
702	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x48C
- stack 1: 0xA
- stack 0: 0xFFFFA000
703	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x48C
- stack 0: 0xFFFFA00A
704	 1F0	PUSH2	0040	 	 
- stack 2: 0x48C
- stack 1: 0xFFFFA00A
- stack 0: 0x40
705	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x48C
706	 1F4	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
707	 1F6	ADD		 	 
- stack 0: 0x490
708	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
709	 1F8	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xCE0006012000060297FFFA0210000A016F0005018903E40086000000950436
710	 1F9	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xCE0006012000060297FFFA0210000A016F0005018903E40086000000950436
- stack 0: 0xF0
711	 1FB	SHR		 	 
- stack 1: 0x490
- stack 0: 0xCE
712	 1FC	JUMP		 	 
- stack 0: 0x490
713	 CE	JUMPDEST		 ;; __riscvimpl_SH_0_1_2	  ;; # instr: sh sp,0(ra)(ignore imm)
- stack 0: 0x490
714	 CF	PUSH2	0020	 	 
- stack 1: 0x490
- stack 0: 0x20
715	 D2	MLOAD		 	  ;; # read from x1
- stack 1: 0x490
- stack 0: 0x8D0
716	 D3	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x490
- stack 1: 0x8D0
- stack 0: 0x490
717	 D4	MLOAD		 	 
- stack 2: 0x490
- stack 1: 0x8D0
- stack 0: 0xCE0006012000060297FFFA0210000A016F0005018903E40086000000950436
718	 D5	PUSH1	E0	 	 
- stack 3: 0x490
- stack 2: 0x8D0
- stack 1: 0xCE0006012000060297FFFA0210000A016F0005018903E40086000000950436
- stack 0: 0xE0
719	 D7	SHR		 	 
- stack 2: 0x490
- stack 1: 0x8D0
- stack 0: 0xCE0006
720	 D8	PUSH2	FFFF	 	 
- stack 3: 0x490
- stack 2: 0x8D0
- stack 1: 0xCE0006
- stack 0: 0xFFFF
721	 DB	AND		 	 
- stack 2: 0x490
- stack 1: 0x8D0
- stack 0: 0x6
722	 DC	PUSH1	01	 	 
- stack 3: 0x490
- stack 2: 0x8D0
- stack 1: 0x6
- stack 0: 0x1
723	 DE	SIGNEXTEND		 	 
- stack 2: 0x490
- stack 1: 0x8D0
- stack 0: 0x6
724	 DF	ADD		 	 
- stack 1: 0x490
- stack 0: 0x8D6
725	 E0	PUSH4	FFFFFFFF	 	 
- stack 2: 0x490
- stack 1: 0x8D6
- stack 0: 0xFFFFFFFF
726	 E5	AND		 	  ;; # mask to 32 bits
- stack 1: 0x490
- stack 0: 0x8D6
727	 E6	PUSH1	02	 	 
- stack 2: 0x490
- stack 1: 0x8D6
- stack 0: 0x2
728	 E8	XOR		 	 
- stack 1: 0x490
- stack 0: 0x8D4
729	 E9	DUP1		 	 
- stack 2: 0x490
- stack 1: 0x8D4
- stack 0: 0x8D4
730	 EA	MLOAD		 	  ;; # fetch
- stack 2: 0x490
- stack 1: 0x8D4
- stack 0: 0xBEEF0AA0BEEFBEEFBEEFBEEFBEEFBEEF00000000000000000000000000000000
731	 EB	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x490
- stack 2: 0x8D4
- stack 1: 0xBEEF0AA0BEEFBEEFBEEFBEEFBEEFBEEF00000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
732	 10C	AND		 	 
- stack 2: 0x490
- stack 1: 0x8D4
- stack 0: 0xAA0BEEFBEEFBEEFBEEFBEEFBEEF00000000000000000000000000000000
733	 10D	PUSH2	0040	 	 
- stack 3: 0x490
- stack 2: 0x8D4
- stack 1: 0xAA0BEEFBEEFBEEFBEEFBEEFBEEF00000000000000000000000000000000
- stack 0: 0x40
734	 110	MLOAD		 	  ;; # read from x2
- stack 3: 0x490
- stack 2: 0x8D4
- stack 1: 0xAA0BEEFBEEFBEEFBEEFBEEFBEEF00000000000000000000000000000000
- stack 0: 0xFFFFA00A
735	 111	PUSH1	F0	 	 
- stack 4: 0x490
- stack 3: 0x8D4
- stack 2: 0xAA0BEEFBEEFBEEFBEEFBEEFBEEF00000000000000000000000000000000
- stack 1: 0xFFFFA00A
- stack 0: 0xF0
736	 113	SHL		 	 
- stack 3: 0x490
- stack 2: 0x8D4
- stack 1: 0xAA0BEEFBEEFBEEFBEEFBEEFBEEF00000000000000000000000000000000
- stack 0: 0xA00A000000000000000000000000000000000000000000000000000000000000
737	 114	ADD		 	 
- stack 2: 0x490
- stack 1: 0x8D4
- stack 0: 0xA00A0AA0BEEFBEEFBEEFBEEFBEEFBEEF00000000000000000000000000000000
738	 115	SWAP1		 	 
- stack 2: 0x490
- stack 1: 0xA00A0AA0BEEFBEEFBEEFBEEFBEEFBEEF00000000000000000000000000000000
- stack 0: 0x8D4
739	 116	MSTORE		 	 
- stack 0: 0x490
740	 117	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
741	 119	ADD		 	 
- stack 0: 0x494
742	 11A	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
743	 11B	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x12000060297FFFA0210000A016F0005018903E4008600000095043600B400AA
744	 11C	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x12000060297FFFA0210000A016F0005018903E4008600000095043600B400AA
- stack 0: 0xF0
745	 11E	SHR		 	 
- stack 1: 0x494
- stack 0: 0x120
746	 11F	JUMP		 	 
- stack 0: 0x494
747	 120	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x494
748	 121	PUSH2	0020	 	 
- stack 1: 0x494
- stack 0: 0x20
749	 124	MLOAD		 	  ;; # read from x1
- stack 1: 0x494
- stack 0: 0x8D0
750	 125	PUSH4	FFFFFFFF	 	 
- stack 2: 0x494
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
751	 12A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x494
- stack 0: 0x8D0
752	 12B	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x494
- stack 1: 0x8D0
- stack 0: 0x494
753	 12C	MLOAD		 	 
- stack 2: 0x494
- stack 1: 0x8D0
- stack 0: 0x12000060297FFFA0210000A016F0005018903E4008600000095043600B400AA
754	 12D	PUSH1	E0	 	 
- stack 3: 0x494
- stack 2: 0x8D0
- stack 1: 0x12000060297FFFA0210000A016F0005018903E4008600000095043600B400AA
- stack 0: 0xE0
755	 12F	SHR		 	 
- stack 2: 0x494
- stack 1: 0x8D0
- stack 0: 0x1200006
756	 130	PUSH2	FFFF	 	 
- stack 3: 0x494
- stack 2: 0x8D0
- stack 1: 0x1200006
- stack 0: 0xFFFF
757	 133	AND		 	 
- stack 2: 0x494
- stack 1: 0x8D0
- stack 0: 0x6
758	 134	PUSH1	01	 	 
- stack 3: 0x494
- stack 2: 0x8D0
- stack 1: 0x6
- stack 0: 0x1
759	 136	SIGNEXTEND		 	 
- stack 2: 0x494
- stack 1: 0x8D0
- stack 0: 0x6
760	 137	ADD		 	 
- stack 1: 0x494
- stack 0: 0x8D6
761	 138	PUSH4	FFFFFFFF	 	 
- stack 2: 0x494
- stack 1: 0x8D6
- stack 0: 0xFFFFFFFF
762	 13D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x494
- stack 0: 0x8D6
763	 13E	PUSH1	02	 	 
- stack 2: 0x494
- stack 1: 0x8D6
- stack 0: 0x2
764	 140	XOR		 	 
- stack 1: 0x494
- stack 0: 0x8D4
765	 141	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xA00A0AA0BEEFBEEFBEEFBEEFBEEFBEEF00000000000000000000000000000000
766	 142	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xA00A0AA0BEEFBEEFBEEFBEEFBEEFBEEF00000000000000000000000000000000
- stack 0: 0xF0
767	 144	SHR		 	 
- stack 1: 0x494
- stack 0: 0xA00A
768	 145	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0xA00A
- stack 0: 0x1
769	 147	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00A
770	 148	PUSH2	0060	 	 
- stack 2: 0x494
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00A
- stack 0: 0x60
771	 14B	MSTORE		 	  ;; # store to x3
- stack 0: 0x494
772	 14C	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
773	 14E	ADD		 	 
- stack 0: 0x498
774	 14F	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
775	 150	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x297FFFA0210000A016F0005018903E4008600000095043600B400AA00CEFFFA
776	 151	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x297FFFA0210000A016F0005018903E4008600000095043600B400AA00CEFFFA
- stack 0: 0xF0
777	 153	SHR		 	 
- stack 1: 0x498
- stack 0: 0x297
778	 154	JUMP		 	 
- stack 0: 0x498
779	 297	JUMPDEST		 ;; __riscvimpl_LUI_ffffaeb7	  ;; # instr: lui t4,0xffffa(ignore imm)
- stack 0: 0x498
780	 298	PUSH4	ffffa000	 	 
- stack 1: 0x498
- stack 0: 0xFFFFA000
781	 29D	PUSH2	03A0	 	 
- stack 2: 0x498
- stack 1: 0xFFFFA000
- stack 0: 0x3A0
782	 2A0	MSTORE		 	  ;; # store to x29
- stack 0: 0x498
783	 2A1	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
784	 2A3	ADD		 	 
- stack 0: 0x49C
785	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
786	 2A5	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x210000A016F0005018903E4008600000095043600B400AA00CEFFFA0120FFFA
787	 2A6	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x210000A016F0005018903E4008600000095043600B400AA00CEFFFA0120FFFA
- stack 0: 0xF0
788	 2A8	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x210
789	 2A9	JUMP		 	 
- stack 0: 0x49C
790	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x49C
791	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x49C
- stack 0: 0x49C
792	 212	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x210000A016F0005018903E4008600000095043600B400AA00CEFFFA0120FFFA
793	 213	PUSH1	E0	 	 
- stack 2: 0x49C
- stack 1: 0x210000A016F0005018903E4008600000095043600B400AA00CEFFFA0120FFFA
- stack 0: 0xE0
794	 215	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x210000A
795	 216	PUSH2	FFFF	 	 
- stack 2: 0x49C
- stack 1: 0x210000A
- stack 0: 0xFFFF
796	 219	AND		 	 
- stack 1: 0x49C
- stack 0: 0xA
797	 21A	PUSH1	01	 	 
- stack 2: 0x49C
- stack 1: 0xA
- stack 0: 0x1
798	 21C	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0xA
799	 21D	PUSH2	03A0	 	 
- stack 2: 0x49C
- stack 1: 0xA
- stack 0: 0x3A0
800	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x49C
- stack 1: 0xA
- stack 0: 0xFFFFA000
801	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x49C
- stack 0: 0xFFFFA00A
802	 222	PUSH2	03A0	 	 
- stack 2: 0x49C
- stack 1: 0xFFFFA00A
- stack 0: 0x3A0
803	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x49C
804	 226	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
805	 228	ADD		 	 
- stack 0: 0x4A0
806	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
807	 22A	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x16F0005018903E4008600000095043600B400AA00CEFFFA0120FFFA015500AA
808	 22B	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x16F0005018903E4008600000095043600B400AA00CEFFFA0120FFFA015500AA
- stack 0: 0xF0
809	 22D	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x16F
810	 22E	JUMP		 	 
- stack 0: 0x4A0
811	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4A0
812	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
813	 171	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x16F0005018903E4008600000095043600B400AA00CEFFFA0120FFFA015500AA
814	 172	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0x16F0005018903E4008600000095043600B400AA00CEFFFA0120FFFA015500AA
- stack 0: 0xE0
815	 174	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x16F0005
816	 175	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x16F0005
- stack 0: 0xFFFF
817	 178	AND		 	 
- stack 1: 0x4A0
- stack 0: 0x5
818	 179	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0x5
- stack 0: 0x1
819	 17B	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0x5
820	 17C	PUSH2	0380	 	 
- stack 2: 0x4A0
- stack 1: 0x5
- stack 0: 0x380
821	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x4A0
822	 180	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
823	 182	ADD		 	 
- stack 0: 0x4A4
824	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
825	 184	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x18903E4008600000095043600B400AA00CEFFFA0120FFFA015500AA016F0006
826	 185	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x18903E4008600000095043600B400AA00CEFFFA0120FFFA015500AA016F0006
- stack 0: 0xF0
827	 187	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x189
828	 188	JUMP		 	 
- stack 0: 0x4A4
829	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x4A4
830	 18A	PUSH2	0060	 	 
- stack 1: 0x4A4
- stack 0: 0x60
831	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00A
832	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00A
- stack 0: 0xFFFFFFFF
833	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A4
- stack 0: 0xFFFFA00A
834	 194	PUSH2	03A0	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFA00A
- stack 0: 0x3A0
835	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x4A4
- stack 1: 0xFFFFA00A
- stack 0: 0xFFFFA00A
836	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4A4
- stack 2: 0xFFFFA00A
- stack 1: 0xFFFFA00A
- stack 0: 0xFFFFFFFF
837	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4A4
- stack 1: 0xFFFFA00A
- stack 0: 0xFFFFA00A
838	 19E	SUB		 	 
- stack 1: 0x4A4
- stack 0: 0x0
839	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x4A4
- stack 1: 0x0
- stack 0: 0x1A7
840	 1A2	JUMPI		 	 
- stack 0: 0x4A4
841	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x4A4
- stack 0: 0x1C1
842	 1A6	JUMP		 	 
- stack 0: 0x4A4
843	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x4A4
844	 1C2	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
845	 1C4	ADD		 	 
- stack 0: 0x4A8
846	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
847	 1C6	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x8600000095043600B400AA00CEFFFA0120FFFA015500AA016F0006018903C4
848	 1C7	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x8600000095043600B400AA00CEFFFA0120FFFA015500AA016F0006018903C4
- stack 0: 0xF0
849	 1C9	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x86
850	 1CA	JUMP		 	 
- stack 0: 0x4A8
851	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4A8
852	 87	DUP1		 	 
- stack 1: 0x4A8
- stack 0: 0x4A8
853	 88	PUSH2	0020	 	 
- stack 2: 0x4A8
- stack 1: 0x4A8
- stack 0: 0x20
854	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A8
855	 8C	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
856	 8E	ADD		 	 
- stack 0: 0x4AC
857	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
858	 90	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x95043600B400AA00CEFFFA0120FFFA015500AA016F0006018903C400860000
859	 91	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x95043600B400AA00CEFFFA0120FFFA015500AA016F0006018903C400860000
- stack 0: 0xF0
860	 93	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x95
861	 94	JUMP		 	 
- stack 0: 0x4AC
862	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x4AC
863	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
864	 97	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x95043600B400AA00CEFFFA0120FFFA015500AA016F0006018903C400860000
865	 98	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0x95043600B400AA00CEFFFA0120FFFA015500AA016F0006018903C400860000
- stack 0: 0xE0
866	 9A	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x950436
867	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0x950436
- stack 0: 0xFFFF
868	 9E	AND		 	 
- stack 1: 0x4AC
- stack 0: 0x436
869	 9F	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0x436
- stack 0: 0x1
870	 A1	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0x436
871	 A2	PUSH2	0020	 	 
- stack 2: 0x4AC
- stack 1: 0x436
- stack 0: 0x20
872	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4AC
- stack 1: 0x436
- stack 0: 0x4A8
873	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4AC
- stack 0: 0x8DE
874	 A7	PUSH2	0020	 	 
- stack 2: 0x4AC
- stack 1: 0x8DE
- stack 0: 0x20
875	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4AC
876	 AB	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
877	 AD	ADD		 	 
- stack 0: 0x4B0
878	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
879	 AF	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xB400AA00CEFFFA0120FFFA015500AA016F0006018903C40086000000950416
880	 B0	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0xB400AA00CEFFFA0120FFFA015500AA016F0006018903C40086000000950416
- stack 0: 0xF0
881	 B2	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xB4
882	 B3	JUMP		 	 
- stack 0: 0x4B0
883	 B4	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,170(ignore imm)
- stack 0: 0x4B0
884	 B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
885	 B6	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xB400AA00CEFFFA0120FFFA015500AA016F0006018903C40086000000950416
886	 B7	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0xB400AA00CEFFFA0120FFFA015500AA016F0006018903C40086000000950416
- stack 0: 0xE0
887	 B9	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xB400AA
888	 BA	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0xB400AA
- stack 0: 0xFFFF
889	 BD	AND		 	 
- stack 1: 0x4B0
- stack 0: 0xAA
890	 BE	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0xAA
- stack 0: 0x1
891	 C0	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0xAA
892	 C1	PUSH2	0040	 	 
- stack 2: 0x4B0
- stack 1: 0xAA
- stack 0: 0x40
893	 C4	MSTORE		 	  ;; # store to x2
- stack 0: 0x4B0
894	 C5	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
895	 C7	ADD		 	 
- stack 0: 0x4B4
896	 C8	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
897	 C9	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0xCEFFFA0120FFFA015500AA016F0006018903C4008600000095041601CBFFFB
898	 CA	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0xCEFFFA0120FFFA015500AA016F0006018903C4008600000095041601CBFFFB
- stack 0: 0xF0
899	 CC	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0xCE
900	 CD	JUMP		 	 
- stack 0: 0x4B4
901	 CE	JUMPDEST		 ;; __riscvimpl_SH_0_1_2	  ;; # instr: sh sp,0(ra)(ignore imm)
- stack 0: 0x4B4
902	 CF	PUSH2	0020	 	 
- stack 1: 0x4B4
- stack 0: 0x20
903	 D2	MLOAD		 	  ;; # read from x1
- stack 1: 0x4B4
- stack 0: 0x8DE
904	 D3	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4B4
- stack 1: 0x8DE
- stack 0: 0x4B4
905	 D4	MLOAD		 	 
- stack 2: 0x4B4
- stack 1: 0x8DE
- stack 0: 0xCEFFFA0120FFFA015500AA016F0006018903C4008600000095041601CBFFFB
906	 D5	PUSH1	E0	 	 
- stack 3: 0x4B4
- stack 2: 0x8DE
- stack 1: 0xCEFFFA0120FFFA015500AA016F0006018903C4008600000095041601CBFFFB
- stack 0: 0xE0
907	 D7	SHR		 	 
- stack 2: 0x4B4
- stack 1: 0x8DE
- stack 0: 0xCEFFFA
908	 D8	PUSH2	FFFF	 	 
- stack 3: 0x4B4
- stack 2: 0x8DE
- stack 1: 0xCEFFFA
- stack 0: 0xFFFF
909	 DB	AND		 	 
- stack 2: 0x4B4
- stack 1: 0x8DE
- stack 0: 0xFFFA
910	 DC	PUSH1	01	 	 
- stack 3: 0x4B4
- stack 2: 0x8DE
- stack 1: 0xFFFA
- stack 0: 0x1
911	 DE	SIGNEXTEND		 	 
- stack 2: 0x4B4
- stack 1: 0x8DE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA
912	 DF	ADD		 	 
- stack 1: 0x4B4
- stack 0: 0x8D8
913	 E0	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
914	 E5	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B4
- stack 0: 0x8D8
915	 E6	PUSH1	02	 	 
- stack 2: 0x4B4
- stack 1: 0x8D8
- stack 0: 0x2
916	 E8	XOR		 	 
- stack 1: 0x4B4
- stack 0: 0x8DA
917	 E9	DUP1		 	 
- stack 2: 0x4B4
- stack 1: 0x8DA
- stack 0: 0x8DA
918	 EA	MLOAD		 	  ;; # fetch
- stack 2: 0x4B4
- stack 1: 0x8DA
- stack 0: 0xBEEFBEEFBEEFBEEFBEEF00000000000000000000000000000000000000000000
919	 EB	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x4B4
- stack 2: 0x8DA
- stack 1: 0xBEEFBEEFBEEFBEEFBEEF00000000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
920	 10C	AND		 	 
- stack 2: 0x4B4
- stack 1: 0x8DA
- stack 0: 0xBEEFBEEFBEEFBEEF00000000000000000000000000000000000000000000
921	 10D	PUSH2	0040	 	 
- stack 3: 0x4B4
- stack 2: 0x8DA
- stack 1: 0xBEEFBEEFBEEFBEEF00000000000000000000000000000000000000000000
- stack 0: 0x40
922	 110	MLOAD		 	  ;; # read from x2
- stack 3: 0x4B4
- stack 2: 0x8DA
- stack 1: 0xBEEFBEEFBEEFBEEF00000000000000000000000000000000000000000000
- stack 0: 0xAA
923	 111	PUSH1	F0	 	 
- stack 4: 0x4B4
- stack 3: 0x8DA
- stack 2: 0xBEEFBEEFBEEFBEEF00000000000000000000000000000000000000000000
- stack 1: 0xAA
- stack 0: 0xF0
924	 113	SHL		 	 
- stack 3: 0x4B4
- stack 2: 0x8DA
- stack 1: 0xBEEFBEEFBEEFBEEF00000000000000000000000000000000000000000000
- stack 0: 0xAA000000000000000000000000000000000000000000000000000000000000
925	 114	ADD		 	 
- stack 2: 0x4B4
- stack 1: 0x8DA
- stack 0: 0xAABEEFBEEFBEEFBEEF00000000000000000000000000000000000000000000
926	 115	SWAP1		 	 
- stack 2: 0x4B4
- stack 1: 0xAABEEFBEEFBEEFBEEF00000000000000000000000000000000000000000000
- stack 0: 0x8DA
927	 116	MSTORE		 	 
- stack 0: 0x4B4
928	 117	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
929	 119	ADD		 	 
- stack 0: 0x4B8
930	 11A	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
931	 11B	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x120FFFA015500AA016F0006018903C4008600000095041601CBFFFB01DEFA00
932	 11C	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x120FFFA015500AA016F0006018903C4008600000095041601CBFFFB01DEFA00
- stack 0: 0xF0
933	 11E	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x120
934	 11F	JUMP		 	 
- stack 0: 0x4B8
935	 120	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x4B8
936	 121	PUSH2	0020	 	 
- stack 1: 0x4B8
- stack 0: 0x20
937	 124	MLOAD		 	  ;; # read from x1
- stack 1: 0x4B8
- stack 0: 0x8DE
938	 125	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x8DE
- stack 0: 0xFFFFFFFF
939	 12A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B8
- stack 0: 0x8DE
940	 12B	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4B8
- stack 1: 0x8DE
- stack 0: 0x4B8
941	 12C	MLOAD		 	 
- stack 2: 0x4B8
- stack 1: 0x8DE
- stack 0: 0x120FFFA015500AA016F0006018903C4008600000095041601CBFFFB01DEFA00
942	 12D	PUSH1	E0	 	 
- stack 3: 0x4B8
- stack 2: 0x8DE
- stack 1: 0x120FFFA015500AA016F0006018903C4008600000095041601CBFFFB01DEFA00
- stack 0: 0xE0
943	 12F	SHR		 	 
- stack 2: 0x4B8
- stack 1: 0x8DE
- stack 0: 0x120FFFA
944	 130	PUSH2	FFFF	 	 
- stack 3: 0x4B8
- stack 2: 0x8DE
- stack 1: 0x120FFFA
- stack 0: 0xFFFF
945	 133	AND		 	 
- stack 2: 0x4B8
- stack 1: 0x8DE
- stack 0: 0xFFFA
946	 134	PUSH1	01	 	 
- stack 3: 0x4B8
- stack 2: 0x8DE
- stack 1: 0xFFFA
- stack 0: 0x1
947	 136	SIGNEXTEND		 	 
- stack 2: 0x4B8
- stack 1: 0x8DE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA
948	 137	ADD		 	 
- stack 1: 0x4B8
- stack 0: 0x8D8
949	 138	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
950	 13D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B8
- stack 0: 0x8D8
951	 13E	PUSH1	02	 	 
- stack 2: 0x4B8
- stack 1: 0x8D8
- stack 0: 0x2
952	 140	XOR		 	 
- stack 1: 0x4B8
- stack 0: 0x8DA
953	 141	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xAABEEFBEEFBEEFBEEF00000000000000000000000000000000000000000000
954	 142	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0xAABEEFBEEFBEEFBEEF00000000000000000000000000000000000000000000
- stack 0: 0xF0
955	 144	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xAA
956	 145	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0xAA
- stack 0: 0x1
957	 147	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0xAA
958	 148	PUSH2	0060	 	 
- stack 2: 0x4B8
- stack 1: 0xAA
- stack 0: 0x60
959	 14B	MSTORE		 	  ;; # store to x3
- stack 0: 0x4B8
960	 14C	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
961	 14E	ADD		 	 
- stack 0: 0x4BC
962	 14F	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
963	 150	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x15500AA016F0006018903C4008600000095041601CBFFFB01DEFA0000CEFFFC
964	 151	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x15500AA016F0006018903C4008600000095041601CBFFFB01DEFA0000CEFFFC
- stack 0: 0xF0
965	 153	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x155
966	 154	JUMP		 	 
- stack 0: 0x4BC
967	 155	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,170(ignore imm)
- stack 0: 0x4BC
968	 156	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
969	 157	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x15500AA016F0006018903C4008600000095041601CBFFFB01DEFA0000CEFFFC
970	 158	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0x15500AA016F0006018903C4008600000095041601CBFFFB01DEFA0000CEFFFC
- stack 0: 0xE0
971	 15A	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x15500AA
972	 15B	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x15500AA
- stack 0: 0xFFFF
973	 15E	AND		 	 
- stack 1: 0x4BC
- stack 0: 0xAA
974	 15F	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0xAA
- stack 0: 0x1
975	 161	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0xAA
976	 162	PUSH2	03A0	 	 
- stack 2: 0x4BC
- stack 1: 0xAA
- stack 0: 0x3A0
977	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x4BC
978	 166	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
979	 168	ADD		 	 
- stack 0: 0x4C0
980	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
981	 16A	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x16F0006018903C4008600000095041601CBFFFB01DEFA0000CEFFFC0120FFFC
982	 16B	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x16F0006018903C4008600000095041601CBFFFB01DEFA0000CEFFFC0120FFFC
- stack 0: 0xF0
983	 16D	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x16F
984	 16E	JUMP		 	 
- stack 0: 0x4C0
985	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C0
986	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
987	 171	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x16F0006018903C4008600000095041601CBFFFB01DEFA0000CEFFFC0120FFFC
988	 172	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0x16F0006018903C4008600000095041601CBFFFB01DEFA0000CEFFFC0120FFFC
- stack 0: 0xE0
989	 174	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x16F0006
990	 175	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x16F0006
- stack 0: 0xFFFF
991	 178	AND		 	 
- stack 1: 0x4C0
- stack 0: 0x6
992	 179	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0x6
- stack 0: 0x1
993	 17B	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0x6
994	 17C	PUSH2	0380	 	 
- stack 2: 0x4C0
- stack 1: 0x6
- stack 0: 0x380
995	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C0
996	 180	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
997	 182	ADD		 	 
- stack 0: 0x4C4
998	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
999	 184	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x18903C4008600000095041601CBFFFB01DEFA0000CEFFFC0120FFFC01FDFFFB
1000	 185	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x18903C4008600000095041601CBFFFB01DEFA0000CEFFFC0120FFFC01FDFFFB
- stack 0: 0xF0
1001	 187	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x189
1002	 188	JUMP		 	 
- stack 0: 0x4C4
1003	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x4C4
1004	 18A	PUSH2	0060	 	 
- stack 1: 0x4C4
- stack 0: 0x60
1005	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x4C4
- stack 0: 0xAA
1006	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C4
- stack 1: 0xAA
- stack 0: 0xFFFFFFFF
1007	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C4
- stack 0: 0xAA
1008	 194	PUSH2	03A0	 	 
- stack 2: 0x4C4
- stack 1: 0xAA
- stack 0: 0x3A0
1009	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C4
- stack 1: 0xAA
- stack 0: 0xAA
1010	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C4
- stack 2: 0xAA
- stack 1: 0xAA
- stack 0: 0xFFFFFFFF
1011	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C4
- stack 1: 0xAA
- stack 0: 0xAA
1012	 19E	SUB		 	 
- stack 1: 0x4C4
- stack 0: 0x0
1013	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x1A7
1014	 1A2	JUMPI		 	 
- stack 0: 0x4C4
1015	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x4C4
- stack 0: 0x1C1
1016	 1A6	JUMP		 	 
- stack 0: 0x4C4
1017	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x4C4
1018	 1C2	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
1019	 1C4	ADD		 	 
- stack 0: 0x4C8
1020	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
1021	 1C6	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x8600000095041601CBFFFB01DEFA0000CEFFFC0120FFFC01FDFFFB0210FA00
1022	 1C7	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x8600000095041601CBFFFB01DEFA0000CEFFFC0120FFFC01FDFFFB0210FA00
- stack 0: 0xF0
1023	 1C9	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x86
1024	 1CA	JUMP		 	 
- stack 0: 0x4C8
1025	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4C8
1026	 87	DUP1		 	 
- stack 1: 0x4C8
- stack 0: 0x4C8
1027	 88	PUSH2	0020	 	 
- stack 2: 0x4C8
- stack 1: 0x4C8
- stack 0: 0x20
1028	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C8
1029	 8C	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
1030	 8E	ADD		 	 
- stack 0: 0x4CC
1031	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
1032	 90	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x95041601CBFFFB01DEFA0000CEFFFC0120FFFC01FDFFFB0210FA00016F0007
1033	 91	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x95041601CBFFFB01DEFA0000CEFFFC0120FFFC01FDFFFB0210FA00016F0007
- stack 0: 0xF0
1034	 93	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x95
1035	 94	JUMP		 	 
- stack 0: 0x4CC
1036	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x4CC
1037	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
1038	 97	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x95041601CBFFFB01DEFA0000CEFFFC0120FFFC01FDFFFB0210FA00016F0007
1039	 98	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0x95041601CBFFFB01DEFA0000CEFFFC0120FFFC01FDFFFB0210FA00016F0007
- stack 0: 0xE0
1040	 9A	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x950416
1041	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0x950416
- stack 0: 0xFFFF
1042	 9E	AND		 	 
- stack 1: 0x4CC
- stack 0: 0x416
1043	 9F	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0x416
- stack 0: 0x1
1044	 A1	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0x416
1045	 A2	PUSH2	0020	 	 
- stack 2: 0x4CC
- stack 1: 0x416
- stack 0: 0x20
1046	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4CC
- stack 1: 0x416
- stack 0: 0x4C8
1047	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4CC
- stack 0: 0x8DE
1048	 A7	PUSH2	0020	 	 
- stack 2: 0x4CC
- stack 1: 0x8DE
- stack 0: 0x20
1049	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4CC
1050	 AB	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
1051	 AD	ADD		 	 
- stack 0: 0x4D0
1052	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
1053	 AF	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x1CBFFFB01DEFA0000CEFFFC0120FFFC01FDFFFB0210FA00016F00070189039C
1054	 B0	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x1CBFFFB01DEFA0000CEFFFC0120FFFC01FDFFFB0210FA00016F00070189039C
- stack 0: 0xF0
1055	 B2	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x1CB
1056	 B3	JUMP		 	 
- stack 0: 0x4D0
1057	 1CB	JUMPDEST		 ;; __riscvimpl_LUI_ffffb137	  ;; # instr: lui sp,0xffffb(ignore imm)
- stack 0: 0x4D0
1058	 1CC	PUSH4	ffffb000	 	 
- stack 1: 0x4D0
- stack 0: 0xFFFFB000
1059	 1D1	PUSH2	0040	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFFB000
- stack 0: 0x40
1060	 1D4	MSTORE		 	  ;; # store to x2
- stack 0: 0x4D0
1061	 1D5	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1062	 1D7	ADD		 	 
- stack 0: 0x4D4
1063	 1D8	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1064	 1D9	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x1DEFA0000CEFFFC0120FFFC01FDFFFB0210FA00016F00070189039C00860000
1065	 1DA	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x1DEFA0000CEFFFC0120FFFC01FDFFFB0210FA00016F00070189039C00860000
- stack 0: 0xF0
1066	 1DC	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x1DE
1067	 1DD	JUMP		 	 
- stack 0: 0x4D4
1068	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x4D4
1069	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
1070	 1E0	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x1DEFA0000CEFFFC0120FFFC01FDFFFB0210FA00016F00070189039C00860000
1071	 1E1	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0x1DEFA0000CEFFFC0120FFFC01FDFFFB0210FA00016F00070189039C00860000
- stack 0: 0xE0
1072	 1E3	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x1DEFA00
1073	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x1DEFA00
- stack 0: 0xFFFF
1074	 1E7	AND		 	 
- stack 1: 0x4D4
- stack 0: 0xFA00
1075	 1E8	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0xFA00
- stack 0: 0x1
1076	 1EA	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
1077	 1EB	PUSH2	0040	 	 
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0x40
1078	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0xFFFFB000
1079	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x4D4
- stack 0: 0xFFFFAA00
1080	 1F0	PUSH2	0040	 	 
- stack 2: 0x4D4
- stack 1: 0xFFFFAA00
- stack 0: 0x40
1081	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x4D4
1082	 1F4	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1083	 1F6	ADD		 	 
- stack 0: 0x4D8
1084	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1085	 1F8	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xCEFFFC0120FFFC01FDFFFB0210FA00016F00070189039C00860000009503EE
1086	 1F9	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0xCEFFFC0120FFFC01FDFFFB0210FA00016F00070189039C00860000009503EE
- stack 0: 0xF0
1087	 1FB	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xCE
1088	 1FC	JUMP		 	 
- stack 0: 0x4D8
1089	 CE	JUMPDEST		 ;; __riscvimpl_SH_0_1_2	  ;; # instr: sh sp,0(ra)(ignore imm)
- stack 0: 0x4D8
1090	 CF	PUSH2	0020	 	 
- stack 1: 0x4D8
- stack 0: 0x20
1091	 D2	MLOAD		 	  ;; # read from x1
- stack 1: 0x4D8
- stack 0: 0x8DE
1092	 D3	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4D8
- stack 1: 0x8DE
- stack 0: 0x4D8
1093	 D4	MLOAD		 	 
- stack 2: 0x4D8
- stack 1: 0x8DE
- stack 0: 0xCEFFFC0120FFFC01FDFFFB0210FA00016F00070189039C00860000009503EE
1094	 D5	PUSH1	E0	 	 
- stack 3: 0x4D8
- stack 2: 0x8DE
- stack 1: 0xCEFFFC0120FFFC01FDFFFB0210FA00016F00070189039C00860000009503EE
- stack 0: 0xE0
1095	 D7	SHR		 	 
- stack 2: 0x4D8
- stack 1: 0x8DE
- stack 0: 0xCEFFFC
1096	 D8	PUSH2	FFFF	 	 
- stack 3: 0x4D8
- stack 2: 0x8DE
- stack 1: 0xCEFFFC
- stack 0: 0xFFFF
1097	 DB	AND		 	 
- stack 2: 0x4D8
- stack 1: 0x8DE
- stack 0: 0xFFFC
1098	 DC	PUSH1	01	 	 
- stack 3: 0x4D8
- stack 2: 0x8DE
- stack 1: 0xFFFC
- stack 0: 0x1
1099	 DE	SIGNEXTEND		 	 
- stack 2: 0x4D8
- stack 1: 0x8DE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
1100	 DF	ADD		 	 
- stack 1: 0x4D8
- stack 0: 0x8DA
1101	 E0	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x8DA
- stack 0: 0xFFFFFFFF
1102	 E5	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D8
- stack 0: 0x8DA
1103	 E6	PUSH1	02	 	 
- stack 2: 0x4D8
- stack 1: 0x8DA
- stack 0: 0x2
1104	 E8	XOR		 	 
- stack 1: 0x4D8
- stack 0: 0x8D8
1105	 E9	DUP1		 	 
- stack 2: 0x4D8
- stack 1: 0x8D8
- stack 0: 0x8D8
1106	 EA	MLOAD		 	  ;; # fetch
- stack 2: 0x4D8
- stack 1: 0x8D8
- stack 0: 0xBEEF00AABEEFBEEFBEEFBEEF0000000000000000000000000000000000000000
1107	 EB	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x4D8
- stack 2: 0x8D8
- stack 1: 0xBEEF00AABEEFBEEFBEEFBEEF0000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1108	 10C	AND		 	 
- stack 2: 0x4D8
- stack 1: 0x8D8
- stack 0: 0xAABEEFBEEFBEEFBEEF0000000000000000000000000000000000000000
1109	 10D	PUSH2	0040	 	 
- stack 3: 0x4D8
- stack 2: 0x8D8
- stack 1: 0xAABEEFBEEFBEEFBEEF0000000000000000000000000000000000000000
- stack 0: 0x40
1110	 110	MLOAD		 	  ;; # read from x2
- stack 3: 0x4D8
- stack 2: 0x8D8
- stack 1: 0xAABEEFBEEFBEEFBEEF0000000000000000000000000000000000000000
- stack 0: 0xFFFFAA00
1111	 111	PUSH1	F0	 	 
- stack 4: 0x4D8
- stack 3: 0x8D8
- stack 2: 0xAABEEFBEEFBEEFBEEF0000000000000000000000000000000000000000
- stack 1: 0xFFFFAA00
- stack 0: 0xF0
1112	 113	SHL		 	 
- stack 3: 0x4D8
- stack 2: 0x8D8
- stack 1: 0xAABEEFBEEFBEEFBEEF0000000000000000000000000000000000000000
- stack 0: 0xAA00000000000000000000000000000000000000000000000000000000000000
1113	 114	ADD		 	 
- stack 2: 0x4D8
- stack 1: 0x8D8
- stack 0: 0xAA0000AABEEFBEEFBEEFBEEF0000000000000000000000000000000000000000
1114	 115	SWAP1		 	 
- stack 2: 0x4D8
- stack 1: 0xAA0000AABEEFBEEFBEEFBEEF0000000000000000000000000000000000000000
- stack 0: 0x8D8
1115	 116	MSTORE		 	 
- stack 0: 0x4D8
1116	 117	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1117	 119	ADD		 	 
- stack 0: 0x4DC
1118	 11A	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1119	 11B	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x120FFFC01FDFFFB0210FA00016F00070189039C00860000009503EE02AA0001
1120	 11C	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x120FFFC01FDFFFB0210FA00016F00070189039C00860000009503EE02AA0001
- stack 0: 0xF0
1121	 11E	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x120
1122	 11F	JUMP		 	 
- stack 0: 0x4DC
1123	 120	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x4DC
1124	 121	PUSH2	0020	 	 
- stack 1: 0x4DC
- stack 0: 0x20
1125	 124	MLOAD		 	  ;; # read from x1
- stack 1: 0x4DC
- stack 0: 0x8DE
1126	 125	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x8DE
- stack 0: 0xFFFFFFFF
1127	 12A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4DC
- stack 0: 0x8DE
1128	 12B	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4DC
- stack 1: 0x8DE
- stack 0: 0x4DC
1129	 12C	MLOAD		 	 
- stack 2: 0x4DC
- stack 1: 0x8DE
- stack 0: 0x120FFFC01FDFFFB0210FA00016F00070189039C00860000009503EE02AA0001
1130	 12D	PUSH1	E0	 	 
- stack 3: 0x4DC
- stack 2: 0x8DE
- stack 1: 0x120FFFC01FDFFFB0210FA00016F00070189039C00860000009503EE02AA0001
- stack 0: 0xE0
1131	 12F	SHR		 	 
- stack 2: 0x4DC
- stack 1: 0x8DE
- stack 0: 0x120FFFC
1132	 130	PUSH2	FFFF	 	 
- stack 3: 0x4DC
- stack 2: 0x8DE
- stack 1: 0x120FFFC
- stack 0: 0xFFFF
1133	 133	AND		 	 
- stack 2: 0x4DC
- stack 1: 0x8DE
- stack 0: 0xFFFC
1134	 134	PUSH1	01	 	 
- stack 3: 0x4DC
- stack 2: 0x8DE
- stack 1: 0xFFFC
- stack 0: 0x1
1135	 136	SIGNEXTEND		 	 
- stack 2: 0x4DC
- stack 1: 0x8DE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
1136	 137	ADD		 	 
- stack 1: 0x4DC
- stack 0: 0x8DA
1137	 138	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x8DA
- stack 0: 0xFFFFFFFF
1138	 13D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4DC
- stack 0: 0x8DA
1139	 13E	PUSH1	02	 	 
- stack 2: 0x4DC
- stack 1: 0x8DA
- stack 0: 0x2
1140	 140	XOR		 	 
- stack 1: 0x4DC
- stack 0: 0x8D8
1141	 141	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xAA0000AABEEFBEEFBEEFBEEF0000000000000000000000000000000000000000
1142	 142	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0xAA0000AABEEFBEEFBEEFBEEF0000000000000000000000000000000000000000
- stack 0: 0xF0
1143	 144	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xAA00
1144	 145	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0xAA00
- stack 0: 0x1
1145	 147	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA00
1146	 148	PUSH2	0060	 	 
- stack 2: 0x4DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA00
- stack 0: 0x60
1147	 14B	MSTORE		 	  ;; # store to x3
- stack 0: 0x4DC
1148	 14C	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1149	 14E	ADD		 	 
- stack 0: 0x4E0
1150	 14F	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1151	 150	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x1FDFFFB0210FA00016F00070189039C00860000009503EE02AA000101DEFAA0
1152	 151	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x1FDFFFB0210FA00016F00070189039C00860000009503EE02AA000101DEFAA0
- stack 0: 0xF0
1153	 153	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x1FD
1154	 154	JUMP		 	 
- stack 0: 0x4E0
1155	 1FD	JUMPDEST		 ;; __riscvimpl_LUI_ffffbeb7	  ;; # instr: lui t4,0xffffb(ignore imm)
- stack 0: 0x4E0
1156	 1FE	PUSH4	ffffb000	 	 
- stack 1: 0x4E0
- stack 0: 0xFFFFB000
1157	 203	PUSH2	03A0	 	 
- stack 2: 0x4E0
- stack 1: 0xFFFFB000
- stack 0: 0x3A0
1158	 206	MSTORE		 	  ;; # store to x29
- stack 0: 0x4E0
1159	 207	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1160	 209	ADD		 	 
- stack 0: 0x4E4
1161	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1162	 20B	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x210FA00016F00070189039C00860000009503EE02AA000101DEFAA000CEFFFE
1163	 20C	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x210FA00016F00070189039C00860000009503EE02AA000101DEFAA000CEFFFE
- stack 0: 0xF0
1164	 20E	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x210
1165	 20F	JUMP		 	 
- stack 0: 0x4E4
1166	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x4E4
1167	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1168	 212	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x210FA00016F00070189039C00860000009503EE02AA000101DEFAA000CEFFFE
1169	 213	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0x210FA00016F00070189039C00860000009503EE02AA000101DEFAA000CEFFFE
- stack 0: 0xE0
1170	 215	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x210FA00
1171	 216	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x210FA00
- stack 0: 0xFFFF
1172	 219	AND		 	 
- stack 1: 0x4E4
- stack 0: 0xFA00
1173	 21A	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0xFA00
- stack 0: 0x1
1174	 21C	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
1175	 21D	PUSH2	03A0	 	 
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0x3A0
1176	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0xFFFFB000
1177	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x4E4
- stack 0: 0xFFFFAA00
1178	 222	PUSH2	03A0	 	 
- stack 2: 0x4E4
- stack 1: 0xFFFFAA00
- stack 0: 0x3A0
1179	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x4E4
1180	 226	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1181	 228	ADD		 	 
- stack 0: 0x4E8
1182	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1183	 22A	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x16F00070189039C00860000009503EE02AA000101DEFAA000CEFFFE0120FFFE
1184	 22B	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x16F00070189039C00860000009503EE02AA000101DEFAA000CEFFFE0120FFFE
- stack 0: 0xF0
1185	 22D	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x16F
1186	 22E	JUMP		 	 
- stack 0: 0x4E8
1187	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E8
1188	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1189	 171	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x16F00070189039C00860000009503EE02AA000101DEFAA000CEFFFE0120FFFE
1190	 172	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0x16F00070189039C00860000009503EE02AA000101DEFAA000CEFFFE0120FFFE
- stack 0: 0xE0
1191	 174	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x16F0007
1192	 175	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x16F0007
- stack 0: 0xFFFF
1193	 178	AND		 	 
- stack 1: 0x4E8
- stack 0: 0x7
1194	 179	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0x7
- stack 0: 0x1
1195	 17B	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0x7
1196	 17C	PUSH2	0380	 	 
- stack 2: 0x4E8
- stack 1: 0x7
- stack 0: 0x380
1197	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E8
1198	 180	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1199	 182	ADD		 	 
- stack 0: 0x4EC
1200	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1201	 184	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x189039C00860000009503EE02AA000101DEFAA000CEFFFE0120FFFE02BD0001
1202	 185	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x189039C00860000009503EE02AA000101DEFAA000CEFFFE0120FFFE02BD0001
- stack 0: 0xF0
1203	 187	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x189
1204	 188	JUMP		 	 
- stack 0: 0x4EC
1205	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x4EC
1206	 18A	PUSH2	0060	 	 
- stack 1: 0x4EC
- stack 0: 0x60
1207	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA00
1208	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA00
- stack 0: 0xFFFFFFFF
1209	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4EC
- stack 0: 0xFFFFAA00
1210	 194	PUSH2	03A0	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFFAA00
- stack 0: 0x3A0
1211	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x4EC
- stack 1: 0xFFFFAA00
- stack 0: 0xFFFFAA00
1212	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4EC
- stack 2: 0xFFFFAA00
- stack 1: 0xFFFFAA00
- stack 0: 0xFFFFFFFF
1213	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4EC
- stack 1: 0xFFFFAA00
- stack 0: 0xFFFFAA00
1214	 19E	SUB		 	 
- stack 1: 0x4EC
- stack 0: 0x0
1215	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x4EC
- stack 1: 0x0
- stack 0: 0x1A7
1216	 1A2	JUMPI		 	 
- stack 0: 0x4EC
1217	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x4EC
- stack 0: 0x1C1
1218	 1A6	JUMP		 	 
- stack 0: 0x4EC
1219	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x4EC
1220	 1C2	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1221	 1C4	ADD		 	 
- stack 0: 0x4F0
1222	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1223	 1C6	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x860000009503EE02AA000101DEFAA000CEFFFE0120FFFE02BD00010210FAA0
1224	 1C7	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x860000009503EE02AA000101DEFAA000CEFFFE0120FFFE02BD00010210FAA0
- stack 0: 0xF0
1225	 1C9	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x86
1226	 1CA	JUMP		 	 
- stack 0: 0x4F0
1227	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4F0
1228	 87	DUP1		 	 
- stack 1: 0x4F0
- stack 0: 0x4F0
1229	 88	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0x4F0
- stack 0: 0x20
1230	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F0
1231	 8C	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1232	 8E	ADD		 	 
- stack 0: 0x4F4
1233	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1234	 90	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x9503EE02AA000101DEFAA000CEFFFE0120FFFE02BD00010210FAA0016F0008
1235	 91	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x9503EE02AA000101DEFAA000CEFFFE0120FFFE02BD00010210FAA0016F0008
- stack 0: 0xF0
1236	 93	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x95
1237	 94	JUMP		 	 
- stack 0: 0x4F4
1238	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x4F4
1239	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1240	 97	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x9503EE02AA000101DEFAA000CEFFFE0120FFFE02BD00010210FAA0016F0008
1241	 98	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x9503EE02AA000101DEFAA000CEFFFE0120FFFE02BD00010210FAA0016F0008
- stack 0: 0xE0
1242	 9A	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x9503EE
1243	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x9503EE
- stack 0: 0xFFFF
1244	 9E	AND		 	 
- stack 1: 0x4F4
- stack 0: 0x3EE
1245	 9F	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0x3EE
- stack 0: 0x1
1246	 A1	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0x3EE
1247	 A2	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0x3EE
- stack 0: 0x20
1248	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F4
- stack 1: 0x3EE
- stack 0: 0x4F0
1249	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F4
- stack 0: 0x8DE
1250	 A7	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0x8DE
- stack 0: 0x20
1251	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F4
1252	 AB	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1253	 AD	ADD		 	 
- stack 0: 0x4F8
1254	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1255	 AF	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x2AA000101DEFAA000CEFFFE0120FFFE02BD00010210FAA0016F000801890374
1256	 B0	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x2AA000101DEFAA000CEFFFE0120FFFE02BD00010210FAA0016F000801890374
- stack 0: 0xF0
1257	 B2	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x2AA
1258	 B3	JUMP		 	 
- stack 0: 0x4F8
1259	 2AA	JUMPDEST		 ;; __riscvimpl_LUI_1137	  ;; # instr: lui sp,0x1(ignore imm)
- stack 0: 0x4F8
1260	 2AB	PUSH4	00001000	 	 
- stack 1: 0x4F8
- stack 0: 0x1000
1261	 2B0	PUSH2	0040	 	 
- stack 2: 0x4F8
- stack 1: 0x1000
- stack 0: 0x40
1262	 2B3	MSTORE		 	  ;; # store to x2
- stack 0: 0x4F8
1263	 2B4	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1264	 2B6	ADD		 	 
- stack 0: 0x4FC
1265	 2B7	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1266	 2B8	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1DEFAA000CEFFFE0120FFFE02BD00010210FAA0016F00080189037400860000
1267	 2B9	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x1DEFAA000CEFFFE0120FFFE02BD00010210FAA0016F00080189037400860000
- stack 0: 0xF0
1268	 2BB	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1DE
1269	 2BC	JUMP		 	 
- stack 0: 0x4FC
1270	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x4FC
1271	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1272	 1E0	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1DEFAA000CEFFFE0120FFFE02BD00010210FAA0016F00080189037400860000
1273	 1E1	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x1DEFAA000CEFFFE0120FFFE02BD00010210FAA0016F00080189037400860000
- stack 0: 0xE0
1274	 1E3	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1DEFAA0
1275	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x1DEFAA0
- stack 0: 0xFFFF
1276	 1E7	AND		 	 
- stack 1: 0x4FC
- stack 0: 0xFAA0
1277	 1E8	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0xFAA0
- stack 0: 0x1
1278	 1EA	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
1279	 1EB	PUSH2	0040	 	 
- stack 2: 0x4FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0x40
1280	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x4FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0x1000
1281	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x4FC
- stack 0: 0xAA0
1282	 1F0	PUSH2	0040	 	 
- stack 2: 0x4FC
- stack 1: 0xAA0
- stack 0: 0x40
1283	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x4FC
1284	 1F4	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1285	 1F6	ADD		 	 
- stack 0: 0x500
1286	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1287	 1F8	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0xCEFFFE0120FFFE02BD00010210FAA0016F00080189037400860000009503C6
1288	 1F9	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0xCEFFFE0120FFFE02BD00010210FAA0016F00080189037400860000009503C6
- stack 0: 0xF0
1289	 1FB	SHR		 	 
- stack 1: 0x500
- stack 0: 0xCE
1290	 1FC	JUMP		 	 
- stack 0: 0x500
1291	 CE	JUMPDEST		 ;; __riscvimpl_SH_0_1_2	  ;; # instr: sh sp,0(ra)(ignore imm)
- stack 0: 0x500
1292	 CF	PUSH2	0020	 	 
- stack 1: 0x500
- stack 0: 0x20
1293	 D2	MLOAD		 	  ;; # read from x1
- stack 1: 0x500
- stack 0: 0x8DE
1294	 D3	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x500
- stack 1: 0x8DE
- stack 0: 0x500
1295	 D4	MLOAD		 	 
- stack 2: 0x500
- stack 1: 0x8DE
- stack 0: 0xCEFFFE0120FFFE02BD00010210FAA0016F00080189037400860000009503C6
1296	 D5	PUSH1	E0	 	 
- stack 3: 0x500
- stack 2: 0x8DE
- stack 1: 0xCEFFFE0120FFFE02BD00010210FAA0016F00080189037400860000009503C6
- stack 0: 0xE0
1297	 D7	SHR		 	 
- stack 2: 0x500
- stack 1: 0x8DE
- stack 0: 0xCEFFFE
1298	 D8	PUSH2	FFFF	 	 
- stack 3: 0x500
- stack 2: 0x8DE
- stack 1: 0xCEFFFE
- stack 0: 0xFFFF
1299	 DB	AND		 	 
- stack 2: 0x500
- stack 1: 0x8DE
- stack 0: 0xFFFE
1300	 DC	PUSH1	01	 	 
- stack 3: 0x500
- stack 2: 0x8DE
- stack 1: 0xFFFE
- stack 0: 0x1
1301	 DE	SIGNEXTEND		 	 
- stack 2: 0x500
- stack 1: 0x8DE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1302	 DF	ADD		 	 
- stack 1: 0x500
- stack 0: 0x8DC
1303	 E0	PUSH4	FFFFFFFF	 	 
- stack 2: 0x500
- stack 1: 0x8DC
- stack 0: 0xFFFFFFFF
1304	 E5	AND		 	  ;; # mask to 32 bits
- stack 1: 0x500
- stack 0: 0x8DC
1305	 E6	PUSH1	02	 	 
- stack 2: 0x500
- stack 1: 0x8DC
- stack 0: 0x2
1306	 E8	XOR		 	 
- stack 1: 0x500
- stack 0: 0x8DE
1307	 E9	DUP1		 	 
- stack 2: 0x500
- stack 1: 0x8DE
- stack 0: 0x8DE
1308	 EA	MLOAD		 	  ;; # fetch
- stack 2: 0x500
- stack 1: 0x8DE
- stack 0: 0xBEEFBEEFBEEF0000000000000000000000000000000000000000000000000000
1309	 EB	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x500
- stack 2: 0x8DE
- stack 1: 0xBEEFBEEFBEEF0000000000000000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1310	 10C	AND		 	 
- stack 2: 0x500
- stack 1: 0x8DE
- stack 0: 0xBEEFBEEF0000000000000000000000000000000000000000000000000000
1311	 10D	PUSH2	0040	 	 
- stack 3: 0x500
- stack 2: 0x8DE
- stack 1: 0xBEEFBEEF0000000000000000000000000000000000000000000000000000
- stack 0: 0x40
1312	 110	MLOAD		 	  ;; # read from x2
- stack 3: 0x500
- stack 2: 0x8DE
- stack 1: 0xBEEFBEEF0000000000000000000000000000000000000000000000000000
- stack 0: 0xAA0
1313	 111	PUSH1	F0	 	 
- stack 4: 0x500
- stack 3: 0x8DE
- stack 2: 0xBEEFBEEF0000000000000000000000000000000000000000000000000000
- stack 1: 0xAA0
- stack 0: 0xF0
1314	 113	SHL		 	 
- stack 3: 0x500
- stack 2: 0x8DE
- stack 1: 0xBEEFBEEF0000000000000000000000000000000000000000000000000000
- stack 0: 0xAA0000000000000000000000000000000000000000000000000000000000000
1315	 114	ADD		 	 
- stack 2: 0x500
- stack 1: 0x8DE
- stack 0: 0xAA0BEEFBEEF0000000000000000000000000000000000000000000000000000
1316	 115	SWAP1		 	 
- stack 2: 0x500
- stack 1: 0xAA0BEEFBEEF0000000000000000000000000000000000000000000000000000
- stack 0: 0x8DE
1317	 116	MSTORE		 	 
- stack 0: 0x500
1318	 117	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1319	 119	ADD		 	 
- stack 0: 0x504
1320	 11A	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1321	 11B	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x120FFFE02BD00010210FAA0016F00080189037400860000009503C60284FFFA
1322	 11C	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x120FFFE02BD00010210FAA0016F00080189037400860000009503C60284FFFA
- stack 0: 0xF0
1323	 11E	SHR		 	 
- stack 1: 0x504
- stack 0: 0x120
1324	 11F	JUMP		 	 
- stack 0: 0x504
1325	 120	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x504
1326	 121	PUSH2	0020	 	 
- stack 1: 0x504
- stack 0: 0x20
1327	 124	MLOAD		 	  ;; # read from x1
- stack 1: 0x504
- stack 0: 0x8DE
1328	 125	PUSH4	FFFFFFFF	 	 
- stack 2: 0x504
- stack 1: 0x8DE
- stack 0: 0xFFFFFFFF
1329	 12A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x504
- stack 0: 0x8DE
1330	 12B	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x504
- stack 1: 0x8DE
- stack 0: 0x504
1331	 12C	MLOAD		 	 
- stack 2: 0x504
- stack 1: 0x8DE
- stack 0: 0x120FFFE02BD00010210FAA0016F00080189037400860000009503C60284FFFA
1332	 12D	PUSH1	E0	 	 
- stack 3: 0x504
- stack 2: 0x8DE
- stack 1: 0x120FFFE02BD00010210FAA0016F00080189037400860000009503C60284FFFA
- stack 0: 0xE0
1333	 12F	SHR		 	 
- stack 2: 0x504
- stack 1: 0x8DE
- stack 0: 0x120FFFE
1334	 130	PUSH2	FFFF	 	 
- stack 3: 0x504
- stack 2: 0x8DE
- stack 1: 0x120FFFE
- stack 0: 0xFFFF
1335	 133	AND		 	 
- stack 2: 0x504
- stack 1: 0x8DE
- stack 0: 0xFFFE
1336	 134	PUSH1	01	 	 
- stack 3: 0x504
- stack 2: 0x8DE
- stack 1: 0xFFFE
- stack 0: 0x1
1337	 136	SIGNEXTEND		 	 
- stack 2: 0x504
- stack 1: 0x8DE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1338	 137	ADD		 	 
- stack 1: 0x504
- stack 0: 0x8DC
1339	 138	PUSH4	FFFFFFFF	 	 
- stack 2: 0x504
- stack 1: 0x8DC
- stack 0: 0xFFFFFFFF
1340	 13D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x504
- stack 0: 0x8DC
1341	 13E	PUSH1	02	 	 
- stack 2: 0x504
- stack 1: 0x8DC
- stack 0: 0x2
1342	 140	XOR		 	 
- stack 1: 0x504
- stack 0: 0x8DE
1343	 141	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0xAA0BEEFBEEF0000000000000000000000000000000000000000000000000000
1344	 142	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0xAA0BEEFBEEF0000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
1345	 144	SHR		 	 
- stack 1: 0x504
- stack 0: 0xAA0
1346	 145	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0xAA0
- stack 0: 0x1
1347	 147	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0xAA0
1348	 148	PUSH2	0060	 	 
- stack 2: 0x504
- stack 1: 0xAA0
- stack 0: 0x60
1349	 14B	MSTORE		 	  ;; # store to x3
- stack 0: 0x504
1350	 14C	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1351	 14E	ADD		 	 
- stack 0: 0x508
1352	 14F	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1353	 150	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x2BD00010210FAA0016F00080189037400860000009503C60284FFFA01DE000A
1354	 151	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x2BD00010210FAA0016F00080189037400860000009503C60284FFFA01DE000A
- stack 0: 0xF0
1355	 153	SHR		 	 
- stack 1: 0x508
- stack 0: 0x2BD
1356	 154	JUMP		 	 
- stack 0: 0x508
1357	 2BD	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x508
1358	 2BE	PUSH4	00001000	 	 
- stack 1: 0x508
- stack 0: 0x1000
1359	 2C3	PUSH2	03A0	 	 
- stack 2: 0x508
- stack 1: 0x1000
- stack 0: 0x3A0
1360	 2C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x508
1361	 2C7	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1362	 2C9	ADD		 	 
- stack 0: 0x50C
1363	 2CA	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1364	 2CB	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x210FAA0016F00080189037400860000009503C60284FFFA01DE000A00CE0000
1365	 2CC	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x210FAA0016F00080189037400860000009503C60284FFFA01DE000A00CE0000
- stack 0: 0xF0
1366	 2CE	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x210
1367	 2CF	JUMP		 	 
- stack 0: 0x50C
1368	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x50C
1369	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1370	 212	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x210FAA0016F00080189037400860000009503C60284FFFA01DE000A00CE0000
1371	 213	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0x210FAA0016F00080189037400860000009503C60284FFFA01DE000A00CE0000
- stack 0: 0xE0
1372	 215	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x210FAA0
1373	 216	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0x210FAA0
- stack 0: 0xFFFF
1374	 219	AND		 	 
- stack 1: 0x50C
- stack 0: 0xFAA0
1375	 21A	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xFAA0
- stack 0: 0x1
1376	 21C	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
1377	 21D	PUSH2	03A0	 	 
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0x3A0
1378	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0x1000
1379	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x50C
- stack 0: 0xAA0
1380	 222	PUSH2	03A0	 	 
- stack 2: 0x50C
- stack 1: 0xAA0
- stack 0: 0x3A0
1381	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x50C
1382	 226	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1383	 228	ADD		 	 
- stack 0: 0x510
1384	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1385	 22A	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x16F00080189037400860000009503C60284FFFA01DE000A00CE000001200000
1386	 22B	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x16F00080189037400860000009503C60284FFFA01DE000A00CE000001200000
- stack 0: 0xF0
1387	 22D	SHR		 	 
- stack 1: 0x510
- stack 0: 0x16F
1388	 22E	JUMP		 	 
- stack 0: 0x510
1389	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x510
1390	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1391	 171	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x16F00080189037400860000009503C60284FFFA01DE000A00CE000001200000
1392	 172	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0x16F00080189037400860000009503C60284FFFA01DE000A00CE000001200000
- stack 0: 0xE0
1393	 174	SHR		 	 
- stack 1: 0x510
- stack 0: 0x16F0008
1394	 175	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0x16F0008
- stack 0: 0xFFFF
1395	 178	AND		 	 
- stack 1: 0x510
- stack 0: 0x8
1396	 179	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x8
- stack 0: 0x1
1397	 17B	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0x8
1398	 17C	PUSH2	0380	 	 
- stack 2: 0x510
- stack 1: 0x8
- stack 0: 0x380
1399	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x510
1400	 180	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1401	 182	ADD		 	 
- stack 0: 0x514
1402	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1403	 184	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x189037400860000009503C60284FFFA01DE000A00CE0000012000000297FFFA
1404	 185	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x189037400860000009503C60284FFFA01DE000A00CE0000012000000297FFFA
- stack 0: 0xF0
1405	 187	SHR		 	 
- stack 1: 0x514
- stack 0: 0x189
1406	 188	JUMP		 	 
- stack 0: 0x514
1407	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x514
1408	 18A	PUSH2	0060	 	 
- stack 1: 0x514
- stack 0: 0x60
1409	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x514
- stack 0: 0xAA0
1410	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x514
- stack 1: 0xAA0
- stack 0: 0xFFFFFFFF
1411	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x514
- stack 0: 0xAA0
1412	 194	PUSH2	03A0	 	 
- stack 2: 0x514
- stack 1: 0xAA0
- stack 0: 0x3A0
1413	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x514
- stack 1: 0xAA0
- stack 0: 0xAA0
1414	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x514
- stack 2: 0xAA0
- stack 1: 0xAA0
- stack 0: 0xFFFFFFFF
1415	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x514
- stack 1: 0xAA0
- stack 0: 0xAA0
1416	 19E	SUB		 	 
- stack 1: 0x514
- stack 0: 0x0
1417	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0x1A7
1418	 1A2	JUMPI		 	 
- stack 0: 0x514
1419	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x514
- stack 0: 0x1C1
1420	 1A6	JUMP		 	 
- stack 0: 0x514
1421	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x514
1422	 1C2	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1423	 1C4	ADD		 	 
- stack 0: 0x518
1424	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1425	 1C6	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x860000009503C60284FFFA01DE000A00CE0000012000000297FFFA0210000A
1426	 1C7	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x860000009503C60284FFFA01DE000A00CE0000012000000297FFFA0210000A
- stack 0: 0xF0
1427	 1C9	SHR		 	 
- stack 1: 0x518
- stack 0: 0x86
1428	 1CA	JUMP		 	 
- stack 0: 0x518
1429	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x518
1430	 87	DUP1		 	 
- stack 1: 0x518
- stack 0: 0x518
1431	 88	PUSH2	0020	 	 
- stack 2: 0x518
- stack 1: 0x518
- stack 0: 0x20
1432	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x518
1433	 8C	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1434	 8E	ADD		 	 
- stack 0: 0x51C
1435	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1436	 90	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x9503C60284FFFA01DE000A00CE0000012000000297FFFA0210000A016F0009
1437	 91	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x9503C60284FFFA01DE000A00CE0000012000000297FFFA0210000A016F0009
- stack 0: 0xF0
1438	 93	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x95
1439	 94	JUMP		 	 
- stack 0: 0x51C
1440	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x51C
1441	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1442	 97	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x9503C60284FFFA01DE000A00CE0000012000000297FFFA0210000A016F0009
1443	 98	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x9503C60284FFFA01DE000A00CE0000012000000297FFFA0210000A016F0009
- stack 0: 0xE0
1444	 9A	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x9503C6
1445	 9B	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x9503C6
- stack 0: 0xFFFF
1446	 9E	AND		 	 
- stack 1: 0x51C
- stack 0: 0x3C6
1447	 9F	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x3C6
- stack 0: 0x1
1448	 A1	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x3C6
1449	 A2	PUSH2	0020	 	 
- stack 2: 0x51C
- stack 1: 0x3C6
- stack 0: 0x20
1450	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x51C
- stack 1: 0x3C6
- stack 0: 0x518
1451	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x51C
- stack 0: 0x8DE
1452	 A7	PUSH2	0020	 	 
- stack 2: 0x51C
- stack 1: 0x8DE
- stack 0: 0x20
1453	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x51C
1454	 AB	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1455	 AD	ADD		 	 
- stack 0: 0x520
1456	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1457	 AF	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x284FFFA01DE000A00CE0000012000000297FFFA0210000A016F00090189034C
1458	 B0	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x284FFFA01DE000A00CE0000012000000297FFFA0210000A016F00090189034C
- stack 0: 0xF0
1459	 B2	SHR		 	 
- stack 1: 0x520
- stack 0: 0x284
1460	 B3	JUMP		 	 
- stack 0: 0x520
1461	 284	JUMPDEST		 ;; __riscvimpl_LUI_ffffa137	  ;; # instr: lui sp,0xffffa(ignore imm)
- stack 0: 0x520
1462	 285	PUSH4	ffffa000	 	 
- stack 1: 0x520
- stack 0: 0xFFFFA000
1463	 28A	PUSH2	0040	 	 
- stack 2: 0x520
- stack 1: 0xFFFFA000
- stack 0: 0x40
1464	 28D	MSTORE		 	  ;; # store to x2
- stack 0: 0x520
1465	 28E	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1466	 290	ADD		 	 
- stack 0: 0x524
1467	 291	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1468	 292	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x1DE000A00CE0000012000000297FFFA0210000A016F00090189034C00860000
1469	 293	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x1DE000A00CE0000012000000297FFFA0210000A016F00090189034C00860000
- stack 0: 0xF0
1470	 295	SHR		 	 
- stack 1: 0x524
- stack 0: 0x1DE
1471	 296	JUMP		 	 
- stack 0: 0x524
1472	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x524
1473	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1474	 1E0	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x1DE000A00CE0000012000000297FFFA0210000A016F00090189034C00860000
1475	 1E1	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x1DE000A00CE0000012000000297FFFA0210000A016F00090189034C00860000
- stack 0: 0xE0
1476	 1E3	SHR		 	 
- stack 1: 0x524
- stack 0: 0x1DE000A
1477	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x1DE000A
- stack 0: 0xFFFF
1478	 1E7	AND		 	 
- stack 1: 0x524
- stack 0: 0xA
1479	 1E8	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0xA
- stack 0: 0x1
1480	 1EA	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xA
1481	 1EB	PUSH2	0040	 	 
- stack 2: 0x524
- stack 1: 0xA
- stack 0: 0x40
1482	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x524
- stack 1: 0xA
- stack 0: 0xFFFFA000
1483	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x524
- stack 0: 0xFFFFA00A
1484	 1F0	PUSH2	0040	 	 
- stack 2: 0x524
- stack 1: 0xFFFFA00A
- stack 0: 0x40
1485	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x524
1486	 1F4	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1487	 1F6	ADD		 	 
- stack 0: 0x528
1488	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1489	 1F8	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xCE0000012000000297FFFA0210000A016F00090189034C00860000009503A0
1490	 1F9	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0xCE0000012000000297FFFA0210000A016F00090189034C00860000009503A0
- stack 0: 0xF0
1491	 1FB	SHR		 	 
- stack 1: 0x528
- stack 0: 0xCE
1492	 1FC	JUMP		 	 
- stack 0: 0x528
1493	 CE	JUMPDEST		 ;; __riscvimpl_SH_0_1_2	  ;; # instr: sh sp,0(ra)(ignore imm)
- stack 0: 0x528
1494	 CF	PUSH2	0020	 	 
- stack 1: 0x528
- stack 0: 0x20
1495	 D2	MLOAD		 	  ;; # read from x1
- stack 1: 0x528
- stack 0: 0x8DE
1496	 D3	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x528
- stack 1: 0x8DE
- stack 0: 0x528
1497	 D4	MLOAD		 	 
- stack 2: 0x528
- stack 1: 0x8DE
- stack 0: 0xCE0000012000000297FFFA0210000A016F00090189034C00860000009503A0
1498	 D5	PUSH1	E0	 	 
- stack 3: 0x528
- stack 2: 0x8DE
- stack 1: 0xCE0000012000000297FFFA0210000A016F00090189034C00860000009503A0
- stack 0: 0xE0
1499	 D7	SHR		 	 
- stack 2: 0x528
- stack 1: 0x8DE
- stack 0: 0xCE0000
1500	 D8	PUSH2	FFFF	 	 
- stack 3: 0x528
- stack 2: 0x8DE
- stack 1: 0xCE0000
- stack 0: 0xFFFF
1501	 DB	AND		 	 
- stack 2: 0x528
- stack 1: 0x8DE
- stack 0: 0x0
1502	 DC	PUSH1	01	 	 
- stack 3: 0x528
- stack 2: 0x8DE
- stack 1: 0x0
- stack 0: 0x1
1503	 DE	SIGNEXTEND		 	 
- stack 2: 0x528
- stack 1: 0x8DE
- stack 0: 0x0
1504	 DF	ADD		 	 
- stack 1: 0x528
- stack 0: 0x8DE
1505	 E0	PUSH4	FFFFFFFF	 	 
- stack 2: 0x528
- stack 1: 0x8DE
- stack 0: 0xFFFFFFFF
1506	 E5	AND		 	  ;; # mask to 32 bits
- stack 1: 0x528
- stack 0: 0x8DE
1507	 E6	PUSH1	02	 	 
- stack 2: 0x528
- stack 1: 0x8DE
- stack 0: 0x2
1508	 E8	XOR		 	 
- stack 1: 0x528
- stack 0: 0x8DC
1509	 E9	DUP1		 	 
- stack 2: 0x528
- stack 1: 0x8DC
- stack 0: 0x8DC
1510	 EA	MLOAD		 	  ;; # fetch
- stack 2: 0x528
- stack 1: 0x8DC
- stack 0: 0xBEEF0AA0BEEFBEEF000000000000000000000000000000000000000000000000
1511	 EB	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x528
- stack 2: 0x8DC
- stack 1: 0xBEEF0AA0BEEFBEEF000000000000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1512	 10C	AND		 	 
- stack 2: 0x528
- stack 1: 0x8DC
- stack 0: 0xAA0BEEFBEEF000000000000000000000000000000000000000000000000
1513	 10D	PUSH2	0040	 	 
- stack 3: 0x528
- stack 2: 0x8DC
- stack 1: 0xAA0BEEFBEEF000000000000000000000000000000000000000000000000
- stack 0: 0x40
1514	 110	MLOAD		 	  ;; # read from x2
- stack 3: 0x528
- stack 2: 0x8DC
- stack 1: 0xAA0BEEFBEEF000000000000000000000000000000000000000000000000
- stack 0: 0xFFFFA00A
1515	 111	PUSH1	F0	 	 
- stack 4: 0x528
- stack 3: 0x8DC
- stack 2: 0xAA0BEEFBEEF000000000000000000000000000000000000000000000000
- stack 1: 0xFFFFA00A
- stack 0: 0xF0
1516	 113	SHL		 	 
- stack 3: 0x528
- stack 2: 0x8DC
- stack 1: 0xAA0BEEFBEEF000000000000000000000000000000000000000000000000
- stack 0: 0xA00A000000000000000000000000000000000000000000000000000000000000
1517	 114	ADD		 	 
- stack 2: 0x528
- stack 1: 0x8DC
- stack 0: 0xA00A0AA0BEEFBEEF000000000000000000000000000000000000000000000000
1518	 115	SWAP1		 	 
- stack 2: 0x528
- stack 1: 0xA00A0AA0BEEFBEEF000000000000000000000000000000000000000000000000
- stack 0: 0x8DC
1519	 116	MSTORE		 	 
- stack 0: 0x528
1520	 117	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1521	 119	ADD		 	 
- stack 0: 0x52C
1522	 11A	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1523	 11B	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x12000000297FFFA0210000A016F00090189034C00860000009503A002D02345
1524	 11C	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x12000000297FFFA0210000A016F00090189034C00860000009503A002D02345
- stack 0: 0xF0
1525	 11E	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x120
1526	 11F	JUMP		 	 
- stack 0: 0x52C
1527	 120	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x52C
1528	 121	PUSH2	0020	 	 
- stack 1: 0x52C
- stack 0: 0x20
1529	 124	MLOAD		 	  ;; # read from x1
- stack 1: 0x52C
- stack 0: 0x8DE
1530	 125	PUSH4	FFFFFFFF	 	 
- stack 2: 0x52C
- stack 1: 0x8DE
- stack 0: 0xFFFFFFFF
1531	 12A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x52C
- stack 0: 0x8DE
1532	 12B	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x52C
- stack 1: 0x8DE
- stack 0: 0x52C
1533	 12C	MLOAD		 	 
- stack 2: 0x52C
- stack 1: 0x8DE
- stack 0: 0x12000000297FFFA0210000A016F00090189034C00860000009503A002D02345
1534	 12D	PUSH1	E0	 	 
- stack 3: 0x52C
- stack 2: 0x8DE
- stack 1: 0x12000000297FFFA0210000A016F00090189034C00860000009503A002D02345
- stack 0: 0xE0
1535	 12F	SHR		 	 
- stack 2: 0x52C
- stack 1: 0x8DE
- stack 0: 0x1200000
1536	 130	PUSH2	FFFF	 	 
- stack 3: 0x52C
- stack 2: 0x8DE
- stack 1: 0x1200000
- stack 0: 0xFFFF
1537	 133	AND		 	 
- stack 2: 0x52C
- stack 1: 0x8DE
- stack 0: 0x0
1538	 134	PUSH1	01	 	 
- stack 3: 0x52C
- stack 2: 0x8DE
- stack 1: 0x0
- stack 0: 0x1
1539	 136	SIGNEXTEND		 	 
- stack 2: 0x52C
- stack 1: 0x8DE
- stack 0: 0x0
1540	 137	ADD		 	 
- stack 1: 0x52C
- stack 0: 0x8DE
1541	 138	PUSH4	FFFFFFFF	 	 
- stack 2: 0x52C
- stack 1: 0x8DE
- stack 0: 0xFFFFFFFF
1542	 13D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x52C
- stack 0: 0x8DE
1543	 13E	PUSH1	02	 	 
- stack 2: 0x52C
- stack 1: 0x8DE
- stack 0: 0x2
1544	 140	XOR		 	 
- stack 1: 0x52C
- stack 0: 0x8DC
1545	 141	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xA00A0AA0BEEFBEEF000000000000000000000000000000000000000000000000
1546	 142	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0xA00A0AA0BEEFBEEF000000000000000000000000000000000000000000000000
- stack 0: 0xF0
1547	 144	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xA00A
1548	 145	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0xA00A
- stack 0: 0x1
1549	 147	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00A
1550	 148	PUSH2	0060	 	 
- stack 2: 0x52C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00A
- stack 0: 0x60
1551	 14B	MSTORE		 	  ;; # store to x3
- stack 0: 0x52C
1552	 14C	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1553	 14E	ADD		 	 
- stack 0: 0x530
1554	 14F	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1555	 150	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x297FFFA0210000A016F00090189034C00860000009503A002D0234501DE0678
1556	 151	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x297FFFA0210000A016F00090189034C00860000009503A002D0234501DE0678
- stack 0: 0xF0
1557	 153	SHR		 	 
- stack 1: 0x530
- stack 0: 0x297
1558	 154	JUMP		 	 
- stack 0: 0x530
1559	 297	JUMPDEST		 ;; __riscvimpl_LUI_ffffaeb7	  ;; # instr: lui t4,0xffffa(ignore imm)
- stack 0: 0x530
1560	 298	PUSH4	ffffa000	 	 
- stack 1: 0x530
- stack 0: 0xFFFFA000
1561	 29D	PUSH2	03A0	 	 
- stack 2: 0x530
- stack 1: 0xFFFFA000
- stack 0: 0x3A0
1562	 2A0	MSTORE		 	  ;; # store to x29
- stack 0: 0x530
1563	 2A1	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1564	 2A3	ADD		 	 
- stack 0: 0x534
1565	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1566	 2A5	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x210000A016F00090189034C00860000009503A002D0234501DE067802E3FFE0
1567	 2A6	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x210000A016F00090189034C00860000009503A002D0234501DE067802E3FFE0
- stack 0: 0xF0
1568	 2A8	SHR		 	 
- stack 1: 0x534
- stack 0: 0x210
1569	 2A9	JUMP		 	 
- stack 0: 0x534
1570	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x534
1571	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1572	 212	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x210000A016F00090189034C00860000009503A002D0234501DE067802E3FFE0
1573	 213	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x210000A016F00090189034C00860000009503A002D0234501DE067802E3FFE0
- stack 0: 0xE0
1574	 215	SHR		 	 
- stack 1: 0x534
- stack 0: 0x210000A
1575	 216	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x210000A
- stack 0: 0xFFFF
1576	 219	AND		 	 
- stack 1: 0x534
- stack 0: 0xA
1577	 21A	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0xA
- stack 0: 0x1
1578	 21C	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0xA
1579	 21D	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0xA
- stack 0: 0x3A0
1580	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x534
- stack 1: 0xA
- stack 0: 0xFFFFA000
1581	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x534
- stack 0: 0xFFFFA00A
1582	 222	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0xFFFFA00A
- stack 0: 0x3A0
1583	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x534
1584	 226	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1585	 228	ADD		 	 
- stack 0: 0x538
1586	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1587	 22A	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x16F00090189034C00860000009503A002D0234501DE067802E3FFE003020020
1588	 22B	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x16F00090189034C00860000009503A002D0234501DE067802E3FFE003020020
- stack 0: 0xF0
1589	 22D	SHR		 	 
- stack 1: 0x538
- stack 0: 0x16F
1590	 22E	JUMP		 	 
- stack 0: 0x538
1591	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x538
1592	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1593	 171	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x16F00090189034C00860000009503A002D0234501DE067802E3FFE003020020
1594	 172	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x16F00090189034C00860000009503A002D0234501DE067802E3FFE003020020
- stack 0: 0xE0
1595	 174	SHR		 	 
- stack 1: 0x538
- stack 0: 0x16F0009
1596	 175	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x16F0009
- stack 0: 0xFFFF
1597	 178	AND		 	 
- stack 1: 0x538
- stack 0: 0x9
1598	 179	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0x9
- stack 0: 0x1
1599	 17B	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0x9
1600	 17C	PUSH2	0380	 	 
- stack 2: 0x538
- stack 1: 0x9
- stack 0: 0x380
1601	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x538
1602	 180	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1603	 182	ADD		 	 
- stack 0: 0x53C
1604	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1605	 184	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x189034C00860000009503A002D0234501DE067802E3FFE00302002001200000
1606	 185	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x189034C00860000009503A002D0234501DE067802E3FFE00302002001200000
- stack 0: 0xF0
1607	 187	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x189
1608	 188	JUMP		 	 
- stack 0: 0x53C
1609	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x53C
1610	 18A	PUSH2	0060	 	 
- stack 1: 0x53C
- stack 0: 0x60
1611	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x53C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00A
1612	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x53C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00A
- stack 0: 0xFFFFFFFF
1613	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x53C
- stack 0: 0xFFFFA00A
1614	 194	PUSH2	03A0	 	 
- stack 2: 0x53C
- stack 1: 0xFFFFA00A
- stack 0: 0x3A0
1615	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x53C
- stack 1: 0xFFFFA00A
- stack 0: 0xFFFFA00A
1616	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x53C
- stack 2: 0xFFFFA00A
- stack 1: 0xFFFFA00A
- stack 0: 0xFFFFFFFF
1617	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x53C
- stack 1: 0xFFFFA00A
- stack 0: 0xFFFFA00A
1618	 19E	SUB		 	 
- stack 1: 0x53C
- stack 0: 0x0
1619	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0x1A7
1620	 1A2	JUMPI		 	 
- stack 0: 0x53C
1621	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x53C
- stack 0: 0x1C1
1622	 1A6	JUMP		 	 
- stack 0: 0x53C
1623	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x53C
1624	 1C2	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1625	 1C4	ADD		 	 
- stack 0: 0x540
1626	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1627	 1C6	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x860000009503A002D0234501DE067802E3FFE0030200200120000003540005
1628	 1C7	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x860000009503A002D0234501DE067802E3FFE0030200200120000003540005
- stack 0: 0xF0
1629	 1C9	SHR		 	 
- stack 1: 0x540
- stack 0: 0x86
1630	 1CA	JUMP		 	 
- stack 0: 0x540
1631	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x540
1632	 87	DUP1		 	 
- stack 1: 0x540
- stack 0: 0x540
1633	 88	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0x540
- stack 0: 0x20
1634	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
1635	 8C	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1636	 8E	ADD		 	 
- stack 0: 0x544
1637	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1638	 90	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x9503A002D0234501DE067802E3FFE003020020012000000354000502100678
1639	 91	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x9503A002D0234501DE067802E3FFE003020020012000000354000502100678
- stack 0: 0xF0
1640	 93	SHR		 	 
- stack 1: 0x544
- stack 0: 0x95
1641	 94	JUMP		 	 
- stack 0: 0x544
1642	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x544
1643	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1644	 97	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x9503A002D0234501DE067802E3FFE003020020012000000354000502100678
1645	 98	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x9503A002D0234501DE067802E3FFE003020020012000000354000502100678
- stack 0: 0xE0
1646	 9A	SHR		 	 
- stack 1: 0x544
- stack 0: 0x9503A0
1647	 9B	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x9503A0
- stack 0: 0xFFFF
1648	 9E	AND		 	 
- stack 1: 0x544
- stack 0: 0x3A0
1649	 9F	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x3A0
- stack 0: 0x1
1650	 A1	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x3A0
1651	 A2	PUSH2	0020	 	 
- stack 2: 0x544
- stack 1: 0x3A0
- stack 0: 0x20
1652	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x544
- stack 1: 0x3A0
- stack 0: 0x540
1653	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x544
- stack 0: 0x8E0
1654	 A7	PUSH2	0020	 	 
- stack 2: 0x544
- stack 1: 0x8E0
- stack 0: 0x20
1655	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x544
1656	 AB	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1657	 AD	ADD		 	 
- stack 0: 0x548
1658	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1659	 AF	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x2D0234501DE067802E3FFE003020020012000000354000502100678016F000A
1660	 B0	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x2D0234501DE067802E3FFE003020020012000000354000502100678016F000A
- stack 0: 0xF0
1661	 B2	SHR		 	 
- stack 1: 0x548
- stack 0: 0x2D0
1662	 B3	JUMP		 	 
- stack 0: 0x548
1663	 2D0	JUMPDEST		 ;; __riscvimpl_LUI_12345137	  ;; # instr: lui sp,0x12345(ignore imm)
- stack 0: 0x548
1664	 2D1	PUSH4	12345000	 	 
- stack 1: 0x548
- stack 0: 0x12345000
1665	 2D6	PUSH2	0040	 	 
- stack 2: 0x548
- stack 1: 0x12345000
- stack 0: 0x40
1666	 2D9	MSTORE		 	  ;; # store to x2
- stack 0: 0x548
1667	 2DA	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1668	 2DC	ADD		 	 
- stack 0: 0x54C
1669	 2DD	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1670	 2DE	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x1DE067802E3FFE003020020012000000354000502100678016F000A01890320
1671	 2DF	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x1DE067802E3FFE003020020012000000354000502100678016F000A01890320
- stack 0: 0xF0
1672	 2E1	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1DE
1673	 2E2	JUMP		 	 
- stack 0: 0x54C
1674	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x54C
1675	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1676	 1E0	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x1DE067802E3FFE003020020012000000354000502100678016F000A01890320
1677	 1E1	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x1DE067802E3FFE003020020012000000354000502100678016F000A01890320
- stack 0: 0xE0
1678	 1E3	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1DE0678
1679	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x1DE0678
- stack 0: 0xFFFF
1680	 1E7	AND		 	 
- stack 1: 0x54C
- stack 0: 0x678
1681	 1E8	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x678
- stack 0: 0x1
1682	 1EA	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x678
1683	 1EB	PUSH2	0040	 	 
- stack 2: 0x54C
- stack 1: 0x678
- stack 0: 0x40
1684	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x54C
- stack 1: 0x678
- stack 0: 0x12345000
1685	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x54C
- stack 0: 0x12345678
1686	 1F0	PUSH2	0040	 	 
- stack 2: 0x54C
- stack 1: 0x12345678
- stack 0: 0x40
1687	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x54C
1688	 1F4	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1689	 1F6	ADD		 	 
- stack 0: 0x550
1690	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1691	 1F8	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x2E3FFE003020020012000000354000502100678016F000A0189032000860000
1692	 1F9	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x2E3FFE003020020012000000354000502100678016F000A0189032000860000
- stack 0: 0xF0
1693	 1FB	SHR		 	 
- stack 1: 0x550
- stack 0: 0x2E3
1694	 1FC	JUMP		 	 
- stack 0: 0x550
1695	 2E3	JUMPDEST		 ;; __riscvimpl_ADDI_4_1_0	  ;; # instr: addi tp,ra,-32(ignore imm)
- stack 0: 0x550
1696	 2E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1697	 2E5	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x2E3FFE003020020012000000354000502100678016F000A0189032000860000
1698	 2E6	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x2E3FFE003020020012000000354000502100678016F000A0189032000860000
- stack 0: 0xE0
1699	 2E8	SHR		 	 
- stack 1: 0x550
- stack 0: 0x2E3FFE0
1700	 2E9	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x2E3FFE0
- stack 0: 0xFFFF
1701	 2EC	AND		 	 
- stack 1: 0x550
- stack 0: 0xFFE0
1702	 2ED	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0xFFE0
- stack 0: 0x1
1703	 2EF	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1704	 2F0	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x20
1705	 2F3	MLOAD		 	  ;; # read from x1
- stack 2: 0x550
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x8E0
1706	 2F4	ADD		 	  ;; # ADDI 1
- stack 1: 0x550
- stack 0: 0x8C0
1707	 2F5	PUSH2	0080	 	 
- stack 2: 0x550
- stack 1: 0x8C0
- stack 0: 0x80
1708	 2F8	MSTORE		 	  ;; # store to x4
- stack 0: 0x550
1709	 2F9	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1710	 2FB	ADD		 	 
- stack 0: 0x554
1711	 2FC	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1712	 2FD	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x3020020012000000354000502100678016F000A018903200086000000950374
1713	 2FE	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x3020020012000000354000502100678016F000A018903200086000000950374
- stack 0: 0xF0
1714	 300	SHR		 	 
- stack 1: 0x554
- stack 0: 0x302
1715	 301	JUMP		 	 
- stack 0: 0x554
1716	 302	JUMPDEST		 ;; __riscvimpl_SH_0_4_2	  ;; # instr: sh sp,32(tp)(ignore imm)
- stack 0: 0x554
1717	 303	PUSH2	0080	 	 
- stack 1: 0x554
- stack 0: 0x80
1718	 306	MLOAD		 	  ;; # read from x4
- stack 1: 0x554
- stack 0: 0x8C0
1719	 307	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x554
- stack 1: 0x8C0
- stack 0: 0x554
1720	 308	MLOAD		 	 
- stack 2: 0x554
- stack 1: 0x8C0
- stack 0: 0x3020020012000000354000502100678016F000A018903200086000000950374
1721	 309	PUSH1	E0	 	 
- stack 3: 0x554
- stack 2: 0x8C0
- stack 1: 0x3020020012000000354000502100678016F000A018903200086000000950374
- stack 0: 0xE0
1722	 30B	SHR		 	 
- stack 2: 0x554
- stack 1: 0x8C0
- stack 0: 0x3020020
1723	 30C	PUSH2	FFFF	 	 
- stack 3: 0x554
- stack 2: 0x8C0
- stack 1: 0x3020020
- stack 0: 0xFFFF
1724	 30F	AND		 	 
- stack 2: 0x554
- stack 1: 0x8C0
- stack 0: 0x20
1725	 310	PUSH1	01	 	 
- stack 3: 0x554
- stack 2: 0x8C0
- stack 1: 0x20
- stack 0: 0x1
1726	 312	SIGNEXTEND		 	 
- stack 2: 0x554
- stack 1: 0x8C0
- stack 0: 0x20
1727	 313	ADD		 	 
- stack 1: 0x554
- stack 0: 0x8E0
1728	 314	PUSH4	FFFFFFFF	 	 
- stack 2: 0x554
- stack 1: 0x8E0
- stack 0: 0xFFFFFFFF
1729	 319	AND		 	  ;; # mask to 32 bits
- stack 1: 0x554
- stack 0: 0x8E0
1730	 31A	PUSH1	02	 	 
- stack 2: 0x554
- stack 1: 0x8E0
- stack 0: 0x2
1731	 31C	XOR		 	 
- stack 1: 0x554
- stack 0: 0x8E2
1732	 31D	DUP1		 	 
- stack 2: 0x554
- stack 1: 0x8E2
- stack 0: 0x8E2
1733	 31E	MLOAD		 	  ;; # fetch
- stack 2: 0x554
- stack 1: 0x8E2
- stack 0: 0xBEEF000000000000000000000000000000000000000000000000000000000000
1734	 31F	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x554
- stack 2: 0x8E2
- stack 1: 0xBEEF000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1735	 340	AND		 	 
- stack 2: 0x554
- stack 1: 0x8E2
- stack 0: 0x0
1736	 341	PUSH2	0040	 	 
- stack 3: 0x554
- stack 2: 0x8E2
- stack 1: 0x0
- stack 0: 0x40
1737	 344	MLOAD		 	  ;; # read from x2
- stack 3: 0x554
- stack 2: 0x8E2
- stack 1: 0x0
- stack 0: 0x12345678
1738	 345	PUSH1	F0	 	 
- stack 4: 0x554
- stack 3: 0x8E2
- stack 2: 0x0
- stack 1: 0x12345678
- stack 0: 0xF0
1739	 347	SHL		 	 
- stack 3: 0x554
- stack 2: 0x8E2
- stack 1: 0x0
- stack 0: 0x5678000000000000000000000000000000000000000000000000000000000000
1740	 348	ADD		 	 
- stack 2: 0x554
- stack 1: 0x8E2
- stack 0: 0x5678000000000000000000000000000000000000000000000000000000000000
1741	 349	SWAP1		 	 
- stack 2: 0x554
- stack 1: 0x5678000000000000000000000000000000000000000000000000000000000000
- stack 0: 0x8E2
1742	 34A	MSTORE		 	 
- stack 0: 0x554
1743	 34B	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1744	 34D	ADD		 	 
- stack 0: 0x558
1745	 34E	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1746	 34F	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x12000000354000502100678016F000A01890320008600000095037403670003
1747	 350	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x12000000354000502100678016F000A01890320008600000095037403670003
- stack 0: 0xF0
1748	 352	SHR		 	 
- stack 1: 0x558
- stack 0: 0x120
1749	 353	JUMP		 	 
- stack 0: 0x558
1750	 120	JUMPDEST		 ;; __riscvimpl_LH_3_1_0	  ;; # instr: lh gp,0(ra)(ignore imm)
- stack 0: 0x558
1751	 121	PUSH2	0020	 	 
- stack 1: 0x558
- stack 0: 0x20
1752	 124	MLOAD		 	  ;; # read from x1
- stack 1: 0x558
- stack 0: 0x8E0
1753	 125	PUSH4	FFFFFFFF	 	 
- stack 2: 0x558
- stack 1: 0x8E0
- stack 0: 0xFFFFFFFF
1754	 12A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x558
- stack 0: 0x8E0
1755	 12B	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x558
- stack 1: 0x8E0
- stack 0: 0x558
1756	 12C	MLOAD		 	 
- stack 2: 0x558
- stack 1: 0x8E0
- stack 0: 0x12000000354000502100678016F000A01890320008600000095037403670003
1757	 12D	PUSH1	E0	 	 
- stack 3: 0x558
- stack 2: 0x8E0
- stack 1: 0x12000000354000502100678016F000A01890320008600000095037403670003
- stack 0: 0xE0
1758	 12F	SHR		 	 
- stack 2: 0x558
- stack 1: 0x8E0
- stack 0: 0x1200000
1759	 130	PUSH2	FFFF	 	 
- stack 3: 0x558
- stack 2: 0x8E0
- stack 1: 0x1200000
- stack 0: 0xFFFF
1760	 133	AND		 	 
- stack 2: 0x558
- stack 1: 0x8E0
- stack 0: 0x0
1761	 134	PUSH1	01	 	 
- stack 3: 0x558
- stack 2: 0x8E0
- stack 1: 0x0
- stack 0: 0x1
1762	 136	SIGNEXTEND		 	 
- stack 2: 0x558
- stack 1: 0x8E0
- stack 0: 0x0
1763	 137	ADD		 	 
- stack 1: 0x558
- stack 0: 0x8E0
1764	 138	PUSH4	FFFFFFFF	 	 
- stack 2: 0x558
- stack 1: 0x8E0
- stack 0: 0xFFFFFFFF
1765	 13D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x558
- stack 0: 0x8E0
1766	 13E	PUSH1	02	 	 
- stack 2: 0x558
- stack 1: 0x8E0
- stack 0: 0x2
1767	 140	XOR		 	 
- stack 1: 0x558
- stack 0: 0x8E2
1768	 141	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x5678000000000000000000000000000000000000000000000000000000000000
1769	 142	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x5678000000000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
1770	 144	SHR		 	 
- stack 1: 0x558
- stack 0: 0x5678
1771	 145	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x5678
- stack 0: 0x1
1772	 147	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x5678
1773	 148	PUSH2	0060	 	 
- stack 2: 0x558
- stack 1: 0x5678
- stack 0: 0x60
1774	 14B	MSTORE		 	  ;; # store to x3
- stack 0: 0x558
1775	 14C	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1776	 14E	ADD		 	 
- stack 0: 0x55C
1777	 14F	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1778	 150	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x354000502100678016F000A0189032000860000009503740367000301DE0098
1779	 151	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x354000502100678016F000A0189032000860000009503740367000301DE0098
- stack 0: 0xF0
1780	 153	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x354
1781	 154	JUMP		 	 
- stack 0: 0x55C
1782	 354	JUMPDEST		 ;; __riscvimpl_LUI_5eb7	  ;; # instr: lui t4,0x5(ignore imm)
- stack 0: 0x55C
1783	 355	PUSH4	00005000	 	 
- stack 1: 0x55C
- stack 0: 0x5000
1784	 35A	PUSH2	03A0	 	 
- stack 2: 0x55C
- stack 1: 0x5000
- stack 0: 0x3A0
1785	 35D	MSTORE		 	  ;; # store to x29
- stack 0: 0x55C
1786	 35E	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1787	 360	ADD		 	 
- stack 0: 0x560
1788	 361	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1789	 362	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x2100678016F000A0189032000860000009503740367000301DE00980095FFFB
1790	 363	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x2100678016F000A0189032000860000009503740367000301DE00980095FFFB
- stack 0: 0xF0
1791	 365	SHR		 	 
- stack 1: 0x560
- stack 0: 0x210
1792	 366	JUMP		 	 
- stack 0: 0x560
1793	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x560
1794	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1795	 212	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x2100678016F000A0189032000860000009503740367000301DE00980095FFFB
1796	 213	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x2100678016F000A0189032000860000009503740367000301DE00980095FFFB
- stack 0: 0xE0
1797	 215	SHR		 	 
- stack 1: 0x560
- stack 0: 0x2100678
1798	 216	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x2100678
- stack 0: 0xFFFF
1799	 219	AND		 	 
- stack 1: 0x560
- stack 0: 0x678
1800	 21A	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x678
- stack 0: 0x1
1801	 21C	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x678
1802	 21D	PUSH2	03A0	 	 
- stack 2: 0x560
- stack 1: 0x678
- stack 0: 0x3A0
1803	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x560
- stack 1: 0x678
- stack 0: 0x5000
1804	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x560
- stack 0: 0x5678
1805	 222	PUSH2	03A0	 	 
- stack 2: 0x560
- stack 1: 0x5678
- stack 0: 0x3A0
1806	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x560
1807	 226	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1808	 228	ADD		 	 
- stack 0: 0x564
1809	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1810	 22A	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x16F000A0189032000860000009503740367000301DE00980095FFFB00CE0007
1811	 22B	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x16F000A0189032000860000009503740367000301DE00980095FFFB00CE0007
- stack 0: 0xF0
1812	 22D	SHR		 	 
- stack 1: 0x564
- stack 0: 0x16F
1813	 22E	JUMP		 	 
- stack 0: 0x564
1814	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x564
1815	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
1816	 171	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x16F000A0189032000860000009503740367000301DE00980095FFFB00CE0007
1817	 172	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x16F000A0189032000860000009503740367000301DE00980095FFFB00CE0007
- stack 0: 0xE0
1818	 174	SHR		 	 
- stack 1: 0x564
- stack 0: 0x16F000A
1819	 175	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x16F000A
- stack 0: 0xFFFF
1820	 178	AND		 	 
- stack 1: 0x564
- stack 0: 0xA
1821	 179	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0xA
- stack 0: 0x1
1822	 17B	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0xA
1823	 17C	PUSH2	0380	 	 
- stack 2: 0x564
- stack 1: 0xA
- stack 0: 0x380
1824	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x564
1825	 180	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1826	 182	ADD		 	 
- stack 0: 0x568
1827	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1828	 184	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x189032000860000009503740367000301DE00980095FFFB00CE0007037A0000
1829	 185	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x189032000860000009503740367000301DE00980095FFFB00CE0007037A0000
- stack 0: 0xF0
1830	 187	SHR		 	 
- stack 1: 0x568
- stack 0: 0x189
1831	 188	JUMP		 	 
- stack 0: 0x568
1832	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x568
1833	 18A	PUSH2	0060	 	 
- stack 1: 0x568
- stack 0: 0x60
1834	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x568
- stack 0: 0x5678
1835	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x568
- stack 1: 0x5678
- stack 0: 0xFFFFFFFF
1836	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x568
- stack 0: 0x5678
1837	 194	PUSH2	03A0	 	 
- stack 2: 0x568
- stack 1: 0x5678
- stack 0: 0x3A0
1838	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x568
- stack 1: 0x5678
- stack 0: 0x5678
1839	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x568
- stack 2: 0x5678
- stack 1: 0x5678
- stack 0: 0xFFFFFFFF
1840	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x568
- stack 1: 0x5678
- stack 0: 0x5678
1841	 19E	SUB		 	 
- stack 1: 0x568
- stack 0: 0x0
1842	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x1A7
1843	 1A2	JUMPI		 	 
- stack 0: 0x568
1844	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x568
- stack 0: 0x1C1
1845	 1A6	JUMP		 	 
- stack 0: 0x568
1846	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x568
1847	 1C2	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1848	 1C4	ADD		 	 
- stack 0: 0x56C
1849	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1850	 1C6	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x860000009503740367000301DE00980095FFFB00CE0007037A00000389035E
1851	 1C7	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x860000009503740367000301DE00980095FFFB00CE0007037A00000389035E
- stack 0: 0xF0
1852	 1C9	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x86
1853	 1CA	JUMP		 	 
- stack 0: 0x56C
1854	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x56C
1855	 87	DUP1		 	 
- stack 1: 0x56C
- stack 0: 0x56C
1856	 88	PUSH2	0020	 	 
- stack 2: 0x56C
- stack 1: 0x56C
- stack 0: 0x20
1857	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x56C
1858	 8C	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1859	 8E	ADD		 	 
- stack 0: 0x570
1860	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1861	 90	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x9503740367000301DE00980095FFFB00CE0007037A00000389035E03A80000
1862	 91	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x9503740367000301DE00980095FFFB00CE0007037A00000389035E03A80000
- stack 0: 0xF0
1863	 93	SHR		 	 
- stack 1: 0x570
- stack 0: 0x95
1864	 94	JUMP		 	 
- stack 0: 0x570
1865	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x570
1866	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
1867	 97	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x9503740367000301DE00980095FFFB00CE0007037A00000389035E03A80000
1868	 98	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x9503740367000301DE00980095FFFB00CE0007037A00000389035E03A80000
- stack 0: 0xE0
1869	 9A	SHR		 	 
- stack 1: 0x570
- stack 0: 0x950374
1870	 9B	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x950374
- stack 0: 0xFFFF
1871	 9E	AND		 	 
- stack 1: 0x570
- stack 0: 0x374
1872	 9F	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x374
- stack 0: 0x1
1873	 A1	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x374
1874	 A2	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0x374
- stack 0: 0x20
1875	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x570
- stack 1: 0x374
- stack 0: 0x56C
1876	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x570
- stack 0: 0x8E0
1877	 A7	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0x8E0
- stack 0: 0x20
1878	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x570
1879	 AB	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1880	 AD	ADD		 	 
- stack 0: 0x574
1881	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1882	 AF	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x367000301DE00980095FFFB00CE0007037A00000389035E03A8000003DD0003
1883	 B0	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x367000301DE00980095FFFB00CE0007037A00000389035E03A8000003DD0003
- stack 0: 0xF0
1884	 B2	SHR		 	 
- stack 1: 0x574
- stack 0: 0x367
1885	 B3	JUMP		 	 
- stack 0: 0x574
1886	 367	JUMPDEST		 ;; __riscvimpl_LUI_3137	  ;; # instr: lui sp,0x3(ignore imm)
- stack 0: 0x574
1887	 368	PUSH4	00003000	 	 
- stack 1: 0x574
- stack 0: 0x3000
1888	 36D	PUSH2	0040	 	 
- stack 2: 0x574
- stack 1: 0x3000
- stack 0: 0x40
1889	 370	MSTORE		 	  ;; # store to x2
- stack 0: 0x574
1890	 371	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1891	 373	ADD		 	 
- stack 0: 0x578
1892	 374	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1893	 375	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1DE00980095FFFB00CE0007037A00000389035E03A8000003DD000302100098
1894	 376	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1DE00980095FFFB00CE0007037A00000389035E03A8000003DD000302100098
- stack 0: 0xF0
1895	 378	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1DE
1896	 379	JUMP		 	 
- stack 0: 0x578
1897	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x578
1898	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
1899	 1E0	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1DE00980095FFFB00CE0007037A00000389035E03A8000003DD000302100098
1900	 1E1	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x1DE00980095FFFB00CE0007037A00000389035E03A8000003DD000302100098
- stack 0: 0xE0
1901	 1E3	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1DE0098
1902	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x1DE0098
- stack 0: 0xFFFF
1903	 1E7	AND		 	 
- stack 1: 0x578
- stack 0: 0x98
1904	 1E8	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x98
- stack 0: 0x1
1905	 1EA	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x98
1906	 1EB	PUSH2	0040	 	 
- stack 2: 0x578
- stack 1: 0x98
- stack 0: 0x40
1907	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x578
- stack 1: 0x98
- stack 0: 0x3000
1908	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x578
- stack 0: 0x3098
1909	 1F0	PUSH2	0040	 	 
- stack 2: 0x578
- stack 1: 0x3098
- stack 0: 0x40
1910	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x578
1911	 1F4	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1912	 1F6	ADD		 	 
- stack 0: 0x57C
1913	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1914	 1F8	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x95FFFB00CE0007037A00000389035E03A8000003DD000302100098016F000B
1915	 1F9	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x95FFFB00CE0007037A00000389035E03A8000003DD000302100098016F000B
- stack 0: 0xF0
1916	 1FB	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x95
1917	 1FC	JUMP		 	 
- stack 0: 0x57C
1918	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x57C
1919	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
1920	 97	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x95FFFB00CE0007037A00000389035E03A8000003DD000302100098016F000B
1921	 98	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x95FFFB00CE0007037A00000389035E03A8000003DD000302100098016F000B
- stack 0: 0xE0
1922	 9A	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x95FFFB
1923	 9B	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x95FFFB
- stack 0: 0xFFFF
1924	 9E	AND		 	 
- stack 1: 0x57C
- stack 0: 0xFFFB
1925	 9F	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0xFFFB
- stack 0: 0x1
1926	 A1	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB
1927	 A2	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB
- stack 0: 0x20
1928	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x57C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB
- stack 0: 0x8E0
1929	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x57C
- stack 0: 0x8DB
1930	 A7	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0x8DB
- stack 0: 0x20
1931	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x57C
1932	 AB	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1933	 AD	ADD		 	 
- stack 0: 0x580
1934	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1935	 AF	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xCE0007037A00000389035E03A8000003DD000302100098016F000B018902EC
1936	 B0	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xCE0007037A00000389035E03A8000003DD000302100098016F000B018902EC
- stack 0: 0xF0
1937	 B2	SHR		 	 
- stack 1: 0x580
- stack 0: 0xCE
1938	 B3	JUMP		 	 
- stack 0: 0x580
1939	 CE	JUMPDEST		 ;; __riscvimpl_SH_0_1_2	  ;; # instr: sh sp,0(ra)(ignore imm)
- stack 0: 0x580
1940	 CF	PUSH2	0020	 	 
- stack 1: 0x580
- stack 0: 0x20
1941	 D2	MLOAD		 	  ;; # read from x1
- stack 1: 0x580
- stack 0: 0x8DB
1942	 D3	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x580
- stack 1: 0x8DB
- stack 0: 0x580
1943	 D4	MLOAD		 	 
- stack 2: 0x580
- stack 1: 0x8DB
- stack 0: 0xCE0007037A00000389035E03A8000003DD000302100098016F000B018902EC
1944	 D5	PUSH1	E0	 	 
- stack 3: 0x580
- stack 2: 0x8DB
- stack 1: 0xCE0007037A00000389035E03A8000003DD000302100098016F000B018902EC
- stack 0: 0xE0
1945	 D7	SHR		 	 
- stack 2: 0x580
- stack 1: 0x8DB
- stack 0: 0xCE0007
1946	 D8	PUSH2	FFFF	 	 
- stack 3: 0x580
- stack 2: 0x8DB
- stack 1: 0xCE0007
- stack 0: 0xFFFF
1947	 DB	AND		 	 
- stack 2: 0x580
- stack 1: 0x8DB
- stack 0: 0x7
1948	 DC	PUSH1	01	 	 
- stack 3: 0x580
- stack 2: 0x8DB
- stack 1: 0x7
- stack 0: 0x1
1949	 DE	SIGNEXTEND		 	 
- stack 2: 0x580
- stack 1: 0x8DB
- stack 0: 0x7
1950	 DF	ADD		 	 
- stack 1: 0x580
- stack 0: 0x8E2
1951	 E0	PUSH4	FFFFFFFF	 	 
- stack 2: 0x580
- stack 1: 0x8E2
- stack 0: 0xFFFFFFFF
1952	 E5	AND		 	  ;; # mask to 32 bits
- stack 1: 0x580
- stack 0: 0x8E2
1953	 E6	PUSH1	02	 	 
- stack 2: 0x580
- stack 1: 0x8E2
- stack 0: 0x2
1954	 E8	XOR		 	 
- stack 1: 0x580
- stack 0: 0x8E0
1955	 E9	DUP1		 	 
- stack 2: 0x580
- stack 1: 0x8E0
- stack 0: 0x8E0
1956	 EA	MLOAD		 	  ;; # fetch
- stack 2: 0x580
- stack 1: 0x8E0
- stack 0: 0xBEEF567800000000000000000000000000000000000000000000000000000000
1957	 EB	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x580
- stack 2: 0x8E0
- stack 1: 0xBEEF567800000000000000000000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1958	 10C	AND		 	 
- stack 2: 0x580
- stack 1: 0x8E0
- stack 0: 0x567800000000000000000000000000000000000000000000000000000000
1959	 10D	PUSH2	0040	 	 
- stack 3: 0x580
- stack 2: 0x8E0
- stack 1: 0x567800000000000000000000000000000000000000000000000000000000
- stack 0: 0x40
1960	 110	MLOAD		 	  ;; # read from x2
- stack 3: 0x580
- stack 2: 0x8E0
- stack 1: 0x567800000000000000000000000000000000000000000000000000000000
- stack 0: 0x3098
1961	 111	PUSH1	F0	 	 
- stack 4: 0x580
- stack 3: 0x8E0
- stack 2: 0x567800000000000000000000000000000000000000000000000000000000
- stack 1: 0x3098
- stack 0: 0xF0
1962	 113	SHL		 	 
- stack 3: 0x580
- stack 2: 0x8E0
- stack 1: 0x567800000000000000000000000000000000000000000000000000000000
- stack 0: 0x3098000000000000000000000000000000000000000000000000000000000000
1963	 114	ADD		 	 
- stack 2: 0x580
- stack 1: 0x8E0
- stack 0: 0x3098567800000000000000000000000000000000000000000000000000000000
1964	 115	SWAP1		 	 
- stack 2: 0x580
- stack 1: 0x3098567800000000000000000000000000000000000000000000000000000000
- stack 0: 0x8E0
1965	 116	MSTORE		 	 
- stack 0: 0x580
1966	 117	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1967	 119	ADD		 	 
- stack 0: 0x584
1968	 11A	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1969	 11B	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x37A00000389035E03A8000003DD000302100098016F000B018902EC016F000C
1970	 11C	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x37A00000389035E03A8000003DD000302100098016F000B018902EC016F000C
- stack 0: 0xF0
1971	 11E	SHR		 	 
- stack 1: 0x584
- stack 0: 0x37A
1972	 11F	JUMP		 	 
- stack 0: 0x584
1973	 37A	JUMPDEST		 ;; __riscvimpl_AUIPC_17020000	  ;; # instr: auipc tp,0x0(ignore imm)
- stack 0: 0x584
1974	 37B	DUP1		 	 
- stack 1: 0x584
- stack 0: 0x584
1975	 37C	PUSH2	0080	 	 
- stack 2: 0x584
- stack 1: 0x584
- stack 0: 0x80
1976	 37F	MSTORE		 	  ;; # store to x4
- stack 0: 0x584
1977	 380	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1978	 382	ADD		 	 
- stack 0: 0x588
1979	 383	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1980	 384	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x389035E03A8000003DD000302100098016F000B018902EC016F000C03F00000
1981	 385	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x389035E03A8000003DD000302100098016F000B018902EC016F000C03F00000
- stack 0: 0xF0
1982	 387	SHR		 	 
- stack 1: 0x588
- stack 0: 0x389
1983	 388	JUMP		 	 
- stack 0: 0x588
1984	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x588
1985	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
1986	 38B	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x389035E03A8000003DD000302100098016F000B018902EC016F000C03F00000
1987	 38C	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x389035E03A8000003DD000302100098016F000B018902EC016F000C03F00000
- stack 0: 0xE0
1988	 38E	SHR		 	 
- stack 1: 0x588
- stack 0: 0x389035E
1989	 38F	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x389035E
- stack 0: 0xFFFF
1990	 392	AND		 	 
- stack 1: 0x588
- stack 0: 0x35E
1991	 393	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x35E
- stack 0: 0x1
1992	 395	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x35E
1993	 396	PUSH2	0080	 	 
- stack 2: 0x588
- stack 1: 0x35E
- stack 0: 0x80
1994	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x588
- stack 1: 0x35E
- stack 0: 0x584
1995	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x588
- stack 0: 0x8E2
1996	 39B	PUSH2	0080	 	 
- stack 2: 0x588
- stack 1: 0x8E2
- stack 0: 0x80
1997	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x588
1998	 39F	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
1999	 3A1	ADD		 	 
- stack 0: 0x58C
2000	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2001	 3A3	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x3A8000003DD000302100098016F000B018902EC016F000C03F00000040AFFFD
2002	 3A4	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x3A8000003DD000302100098016F000B018902EC016F000C03F00000040AFFFD
- stack 0: 0xF0
2003	 3A6	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x3A8
2004	 3A7	JUMP		 	 
- stack 0: 0x58C
2005	 3A8	JUMPDEST		 ;; __riscvimpl_LH_3_4_0	  ;; # instr: lh gp,0(tp)(ignore imm)
- stack 0: 0x58C
2006	 3A9	PUSH2	0080	 	 
- stack 1: 0x58C
- stack 0: 0x80
2007	 3AC	MLOAD		 	  ;; # read from x4
- stack 1: 0x58C
- stack 0: 0x8E2
2008	 3AD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x58C
- stack 1: 0x8E2
- stack 0: 0xFFFFFFFF
2009	 3B2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x58C
- stack 0: 0x8E2
2010	 3B3	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x58C
- stack 1: 0x8E2
- stack 0: 0x58C
2011	 3B4	MLOAD		 	 
- stack 2: 0x58C
- stack 1: 0x8E2
- stack 0: 0x3A8000003DD000302100098016F000B018902EC016F000C03F00000040AFFFD
2012	 3B5	PUSH1	E0	 	 
- stack 3: 0x58C
- stack 2: 0x8E2
- stack 1: 0x3A8000003DD000302100098016F000B018902EC016F000C03F00000040AFFFD
- stack 0: 0xE0
2013	 3B7	SHR		 	 
- stack 2: 0x58C
- stack 1: 0x8E2
- stack 0: 0x3A80000
2014	 3B8	PUSH2	FFFF	 	 
- stack 3: 0x58C
- stack 2: 0x8E2
- stack 1: 0x3A80000
- stack 0: 0xFFFF
2015	 3BB	AND		 	 
- stack 2: 0x58C
- stack 1: 0x8E2
- stack 0: 0x0
2016	 3BC	PUSH1	01	 	 
- stack 3: 0x58C
- stack 2: 0x8E2
- stack 1: 0x0
- stack 0: 0x1
2017	 3BE	SIGNEXTEND		 	 
- stack 2: 0x58C
- stack 1: 0x8E2
- stack 0: 0x0
2018	 3BF	ADD		 	 
- stack 1: 0x58C
- stack 0: 0x8E2
2019	 3C0	PUSH4	FFFFFFFF	 	 
- stack 2: 0x58C
- stack 1: 0x8E2
- stack 0: 0xFFFFFFFF
2020	 3C5	AND		 	  ;; # mask to 32 bits
- stack 1: 0x58C
- stack 0: 0x8E2
2021	 3C6	PUSH1	02	 	 
- stack 2: 0x58C
- stack 1: 0x8E2
- stack 0: 0x2
2022	 3C8	XOR		 	 
- stack 1: 0x58C
- stack 0: 0x8E0
2023	 3C9	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x3098567800000000000000000000000000000000000000000000000000000000
2024	 3CA	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x3098567800000000000000000000000000000000000000000000000000000000
- stack 0: 0xF0
2025	 3CC	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x3098
2026	 3CD	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x3098
- stack 0: 0x1
2027	 3CF	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x3098
2028	 3D0	PUSH2	0060	 	 
- stack 2: 0x58C
- stack 1: 0x3098
- stack 0: 0x60
2029	 3D3	MSTORE		 	  ;; # store to x3
- stack 0: 0x58C
2030	 3D4	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2031	 3D6	ADD		 	 
- stack 0: 0x590
2032	 3D7	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2033	 3D8	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x3DD000302100098016F000B018902EC016F000C03F00000040AFFFD0095FCDD
2034	 3D9	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x3DD000302100098016F000B018902EC016F000C03F00000040AFFFD0095FCDD
- stack 0: 0xF0
2035	 3DB	SHR		 	 
- stack 1: 0x590
- stack 0: 0x3DD
2036	 3DC	JUMP		 	 
- stack 0: 0x590
2037	 3DD	JUMPDEST		 ;; __riscvimpl_LUI_3eb7	  ;; # instr: lui t4,0x3(ignore imm)
- stack 0: 0x590
2038	 3DE	PUSH4	00003000	 	 
- stack 1: 0x590
- stack 0: 0x3000
2039	 3E3	PUSH2	03A0	 	 
- stack 2: 0x590
- stack 1: 0x3000
- stack 0: 0x3A0
2040	 3E6	MSTORE		 	  ;; # store to x29
- stack 0: 0x590
2041	 3E7	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2042	 3E9	ADD		 	 
- stack 0: 0x594
2043	 3EA	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2044	 3EB	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x2100098016F000B018902EC016F000C03F00000040AFFFD0095FCDD041D0000
2045	 3EC	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x2100098016F000B018902EC016F000C03F00000040AFFFD0095FCDD041D0000
- stack 0: 0xF0
2046	 3EE	SHR		 	 
- stack 1: 0x594
- stack 0: 0x210
2047	 3EF	JUMP		 	 
- stack 0: 0x594
2048	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x594
2049	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2050	 212	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x2100098016F000B018902EC016F000C03F00000040AFFFD0095FCDD041D0000
2051	 213	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x2100098016F000B018902EC016F000C03F00000040AFFFD0095FCDD041D0000
- stack 0: 0xE0
2052	 215	SHR		 	 
- stack 1: 0x594
- stack 0: 0x2100098
2053	 216	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x2100098
- stack 0: 0xFFFF
2054	 219	AND		 	 
- stack 1: 0x594
- stack 0: 0x98
2055	 21A	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x98
- stack 0: 0x1
2056	 21C	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x98
2057	 21D	PUSH2	03A0	 	 
- stack 2: 0x594
- stack 1: 0x98
- stack 0: 0x3A0
2058	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x594
- stack 1: 0x98
- stack 0: 0x3000
2059	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x594
- stack 0: 0x3098
2060	 222	PUSH2	03A0	 	 
- stack 2: 0x594
- stack 1: 0x3098
- stack 0: 0x3A0
2061	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x594
2062	 226	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2063	 228	ADD		 	 
- stack 0: 0x598
2064	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2065	 22A	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x16F000B018902EC016F000C03F00000040AFFFD0095FCDD041D000001DE0320
2066	 22B	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x16F000B018902EC016F000C03F00000040AFFFD0095FCDD041D000001DE0320
- stack 0: 0xF0
2067	 22D	SHR		 	 
- stack 1: 0x598
- stack 0: 0x16F
2068	 22E	JUMP		 	 
- stack 0: 0x598
2069	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x598
2070	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2071	 171	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x16F000B018902EC016F000C03F00000040AFFFD0095FCDD041D000001DE0320
2072	 172	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x16F000B018902EC016F000C03F00000040AFFFD0095FCDD041D000001DE0320
- stack 0: 0xE0
2073	 174	SHR		 	 
- stack 1: 0x598
- stack 0: 0x16F000B
2074	 175	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x16F000B
- stack 0: 0xFFFF
2075	 178	AND		 	 
- stack 1: 0x598
- stack 0: 0xB
2076	 179	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0xB
- stack 0: 0x1
2077	 17B	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0xB
2078	 17C	PUSH2	0380	 	 
- stack 2: 0x598
- stack 1: 0xB
- stack 0: 0x380
2079	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x598
2080	 180	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2081	 182	ADD		 	 
- stack 0: 0x59C
2082	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2083	 184	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x18902EC016F000C03F00000040AFFFD0095FCDD041D000001DE0320042C0000
2084	 185	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x18902EC016F000C03F00000040AFFFD0095FCDD041D000001DE0320042C0000
- stack 0: 0xF0
2085	 187	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x189
2086	 188	JUMP		 	 
- stack 0: 0x59C
2087	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x59C
2088	 18A	PUSH2	0060	 	 
- stack 1: 0x59C
- stack 0: 0x60
2089	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x59C
- stack 0: 0x3098
2090	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x59C
- stack 1: 0x3098
- stack 0: 0xFFFFFFFF
2091	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x59C
- stack 0: 0x3098
2092	 194	PUSH2	03A0	 	 
- stack 2: 0x59C
- stack 1: 0x3098
- stack 0: 0x3A0
2093	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x59C
- stack 1: 0x3098
- stack 0: 0x3098
2094	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x59C
- stack 2: 0x3098
- stack 1: 0x3098
- stack 0: 0xFFFFFFFF
2095	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x59C
- stack 1: 0x3098
- stack 0: 0x3098
2096	 19E	SUB		 	 
- stack 1: 0x59C
- stack 0: 0x0
2097	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1A7
2098	 1A2	JUMPI		 	 
- stack 0: 0x59C
2099	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x59C
- stack 0: 0x1C1
2100	 1A6	JUMP		 	 
- stack 0: 0x59C
2101	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x59C
2102	 1C2	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2103	 1C4	ADD		 	 
- stack 0: 0x5A0
2104	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2105	 1C6	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x16F000C03F00000040AFFFD0095FCDD041D000001DE0320042C0000047E0000
2106	 1C7	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x16F000C03F00000040AFFFD0095FCDD041D000001DE0320042C0000047E0000
- stack 0: 0xF0
2107	 1C9	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x16F
2108	 1CA	JUMP		 	 
- stack 0: 0x5A0
2109	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5A0
2110	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2111	 171	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x16F000C03F00000040AFFFD0095FCDD041D000001DE0320042C0000047E0000
2112	 172	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x16F000C03F00000040AFFFD0095FCDD041D000001DE0320042C0000047E0000
- stack 0: 0xE0
2113	 174	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x16F000C
2114	 175	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x16F000C
- stack 0: 0xFFFF
2115	 178	AND		 	 
- stack 1: 0x5A0
- stack 0: 0xC
2116	 179	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0xC
- stack 0: 0x1
2117	 17B	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0xC
2118	 17C	PUSH2	0380	 	 
- stack 2: 0x5A0
- stack 1: 0xC
- stack 0: 0x380
2119	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x5A0
2120	 180	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2121	 182	ADD		 	 
- stack 0: 0x5A4
2122	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2123	 184	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x3F00000040AFFFD0095FCDD041D000001DE0320042C0000047E000004B3FFFD
2124	 185	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x3F00000040AFFFD0095FCDD041D000001DE0320042C0000047E000004B3FFFD
- stack 0: 0xF0
2125	 187	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x3F0
2126	 188	JUMP		 	 
- stack 0: 0x5A4
2127	 3F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5A4
2128	 3F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2129	 3F2	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x3F00000040AFFFD0095FCDD041D000001DE0320042C0000047E000004B3FFFD
2130	 3F3	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x3F00000040AFFFD0095FCDD041D000001DE0320042C0000047E000004B3FFFD
- stack 0: 0xE0
2131	 3F5	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x3F00000
2132	 3F6	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x3F00000
- stack 0: 0xFFFF
2133	 3F9	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2134	 3FA	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2135	 3FC	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2136	 3FD	PUSH2	0080	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x80
2137	 400	MSTORE		 	  ;; # store to x4
- stack 0: 0x5A4
2138	 401	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2139	 403	ADD		 	 
- stack 0: 0x5A8
2140	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2141	 405	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x40AFFFD0095FCDD041D000001DE0320042C0000047E000004B3FFFD0210FCDD
2142	 406	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x40AFFFD0095FCDD041D000001DE0320042C0000047E000004B3FFFD0210FCDD
- stack 0: 0xF0
2143	 408	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x40A
2144	 409	JUMP		 	 
- stack 0: 0x5A8
2145	 40A	JUMPDEST		 ;; __riscvimpl_LUI_ffffd0b7	  ;; # instr: lui ra,0xffffd(ignore imm)
- stack 0: 0x5A8
2146	 40B	PUSH4	ffffd000	 	 
- stack 1: 0x5A8
- stack 0: 0xFFFFD000
2147	 410	PUSH2	0020	 	 
- stack 2: 0x5A8
- stack 1: 0xFFFFD000
- stack 0: 0x20
2148	 413	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A8
2149	 414	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2150	 416	ADD		 	 
- stack 0: 0x5AC
2151	 417	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2152	 418	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x95FCDD041D000001DE0320042C0000047E000004B3FFFD0210FCDD018902C0
2153	 419	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x95FCDD041D000001DE0320042C0000047E000004B3FFFD0210FCDD018902C0
- stack 0: 0xF0
2154	 41B	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x95
2155	 41C	JUMP		 	 
- stack 0: 0x5AC
2156	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x5AC
2157	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2158	 97	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x95FCDD041D000001DE0320042C0000047E000004B3FFFD0210FCDD018902C0
2159	 98	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x95FCDD041D000001DE0320042C0000047E000004B3FFFD0210FCDD018902C0
- stack 0: 0xE0
2160	 9A	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x95FCDD
2161	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x95FCDD
- stack 0: 0xFFFF
2162	 9E	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xFCDD
2163	 9F	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xFCDD
- stack 0: 0x1
2164	 A1	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
2165	 A2	PUSH2	0020	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0x20
2166	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0xFFFFD000
2167	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5AC
- stack 0: 0xFFFFCCDD
2168	 A7	PUSH2	0020	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFFCCDD
- stack 0: 0x20
2169	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5AC
2170	 AB	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2171	 AD	ADD		 	 
- stack 0: 0x5B0
2172	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2173	 AF	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x41D000001DE0320042C0000047E000004B3FFFD0210FCDD018902C003890001
2174	 B0	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x41D000001DE0320042C0000047E000004B3FFFD0210FCDD018902C003890001
- stack 0: 0xF0
2175	 B2	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x41D
2176	 B3	JUMP		 	 
- stack 0: 0x5B0
2177	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x5B0
2178	 41E	DUP1		 	 
- stack 1: 0x5B0
- stack 0: 0x5B0
2179	 41F	PUSH2	0040	 	 
- stack 2: 0x5B0
- stack 1: 0x5B0
- stack 0: 0x40
2180	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x5B0
2181	 423	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2182	 425	ADD		 	 
- stack 0: 0x5B4
2183	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2184	 427	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1DE0320042C0000047E000004B3FFFD0210FCDD018902C00389000104C60002
2185	 428	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x1DE0320042C0000047E000004B3FFFD0210FCDD018902C00389000104C60002
- stack 0: 0xF0
2186	 42A	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1DE
2187	 42B	JUMP		 	 
- stack 0: 0x5B4
2188	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x5B4
2189	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2190	 1E0	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1DE0320042C0000047E000004B3FFFD0210FCDD018902C00389000104C60002
2191	 1E1	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x1DE0320042C0000047E000004B3FFFD0210FCDD018902C00389000104C60002
- stack 0: 0xE0
2192	 1E3	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1DE0320
2193	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x1DE0320
- stack 0: 0xFFFF
2194	 1E7	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x320
2195	 1E8	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x320
- stack 0: 0x1
2196	 1EA	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x320
2197	 1EB	PUSH2	0040	 	 
- stack 2: 0x5B4
- stack 1: 0x320
- stack 0: 0x40
2198	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x5B4
- stack 1: 0x320
- stack 0: 0x5B0
2199	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x5B4
- stack 0: 0x8D0
2200	 1F0	PUSH2	0040	 	 
- stack 2: 0x5B4
- stack 1: 0x8D0
- stack 0: 0x40
2201	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x5B4
2202	 1F4	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2203	 1F6	ADD		 	 
- stack 0: 0x5B8
2204	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2205	 1F8	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x42C0000047E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4
2206	 1F9	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x42C0000047E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4
- stack 0: 0xF0
2207	 1FB	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x42C
2208	 1FC	JUMP		 	 
- stack 0: 0x5B8
2209	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x5B8
2210	 42D	PUSH2	0040	 	 
- stack 1: 0x5B8
- stack 0: 0x40
2211	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x5B8
- stack 0: 0x8D0
2212	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5B8
- stack 1: 0x8D0
- stack 0: 0x5B8
2213	 432	MLOAD		 	 
- stack 2: 0x5B8
- stack 1: 0x8D0
- stack 0: 0x42C0000047E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4
2214	 433	PUSH1	E0	 	 
- stack 3: 0x5B8
- stack 2: 0x8D0
- stack 1: 0x42C0000047E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4
- stack 0: 0xE0
2215	 435	SHR		 	 
- stack 2: 0x5B8
- stack 1: 0x8D0
- stack 0: 0x42C0000
2216	 436	PUSH2	FFFF	 	 
- stack 3: 0x5B8
- stack 2: 0x8D0
- stack 1: 0x42C0000
- stack 0: 0xFFFF
2217	 439	AND		 	 
- stack 2: 0x5B8
- stack 1: 0x8D0
- stack 0: 0x0
2218	 43A	PUSH1	01	 	 
- stack 3: 0x5B8
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
2219	 43C	SIGNEXTEND		 	 
- stack 2: 0x5B8
- stack 1: 0x8D0
- stack 0: 0x0
2220	 43D	ADD		 	 
- stack 1: 0x5B8
- stack 0: 0x8D0
2221	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
2222	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B8
- stack 0: 0x8D0
2223	 444	PUSH1	02	 	 
- stack 2: 0x5B8
- stack 1: 0x8D0
- stack 0: 0x2
2224	 446	XOR		 	 
- stack 1: 0x5B8
- stack 0: 0x8D2
2225	 447	DUP1		 	 
- stack 2: 0x5B8
- stack 1: 0x8D2
- stack 0: 0x8D2
2226	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x5B8
- stack 1: 0x8D2
- stack 0: 0xAAA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
2227	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x5B8
- stack 2: 0x8D2
- stack 1: 0xAAA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2228	 46A	AND		 	 
- stack 2: 0x5B8
- stack 1: 0x8D2
- stack 0: 0xA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
2229	 46B	PUSH2	0020	 	 
- stack 3: 0x5B8
- stack 2: 0x8D2
- stack 1: 0xA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
- stack 0: 0x20
2230	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x5B8
- stack 2: 0x8D2
- stack 1: 0xA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
- stack 0: 0xFFFFCCDD
2231	 46F	PUSH1	F0	 	 
- stack 4: 0x5B8
- stack 3: 0x8D2
- stack 2: 0xA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
- stack 1: 0xFFFFCCDD
- stack 0: 0xF0
2232	 471	SHL		 	 
- stack 3: 0x5B8
- stack 2: 0x8D2
- stack 1: 0xA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
- stack 0: 0xCCDD000000000000000000000000000000000000000000000000000000000000
2233	 472	ADD		 	 
- stack 2: 0x5B8
- stack 1: 0x8D2
- stack 0: 0xCCDDA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
2234	 473	SWAP1		 	 
- stack 2: 0x5B8
- stack 1: 0xCCDDA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
- stack 0: 0x8D2
2235	 474	MSTORE		 	 
- stack 0: 0x5B8
2236	 475	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2237	 477	ADD		 	 
- stack 0: 0x5BC
2238	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2239	 479	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x47E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4016F000D
2240	 47A	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x47E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4016F000D
- stack 0: 0xF0
2241	 47C	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x47E
2242	 47D	JUMP		 	 
- stack 0: 0x5BC
2243	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x5BC
2244	 47F	PUSH2	0040	 	 
- stack 1: 0x5BC
- stack 0: 0x40
2245	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x5BC
- stack 0: 0x8D0
2246	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
2247	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x8D0
2248	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0x5BC
2249	 48A	MLOAD		 	 
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0x47E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4016F000D
2250	 48B	PUSH1	E0	 	 
- stack 3: 0x5BC
- stack 2: 0x8D0
- stack 1: 0x47E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4016F000D
- stack 0: 0xE0
2251	 48D	SHR		 	 
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0x47E0000
2252	 48E	PUSH2	FFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x8D0
- stack 1: 0x47E0000
- stack 0: 0xFFFF
2253	 491	AND		 	 
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0x0
2254	 492	PUSH1	01	 	 
- stack 3: 0x5BC
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
2255	 494	SIGNEXTEND		 	 
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0x0
2256	 495	ADD		 	 
- stack 1: 0x5BC
- stack 0: 0x8D0
2257	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
2258	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x8D0
2259	 49C	PUSH1	02	 	 
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0x2
2260	 49E	XOR		 	 
- stack 1: 0x5BC
- stack 0: 0x8D2
2261	 49F	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xCCDDA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
2262	 4A0	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0xCCDDA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
- stack 0: 0xF0
2263	 4A2	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xCCDD
2264	 4A3	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0xCCDD
- stack 0: 0x1
2265	 4A5	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCDD
2266	 4A6	PUSH2	0060	 	 
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCDD
- stack 0: 0x60
2267	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x5BC
2268	 4AA	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2269	 4AC	ADD		 	 
- stack 0: 0x5C0
2270	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2271	 4AE	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x4B3FFFD0210FCDD018902C00389000104C6000204E0FFD4016F000D03F00000
2272	 4AF	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x4B3FFFD0210FCDD018902C00389000104C6000204E0FFD4016F000D03F00000
- stack 0: 0xF0
2273	 4B1	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x4B3
2274	 4B2	JUMP		 	 
- stack 0: 0x5C0
2275	 4B3	JUMPDEST		 ;; __riscvimpl_LUI_ffffdeb7	  ;; # instr: lui t4,0xffffd(ignore imm)
- stack 0: 0x5C0
2276	 4B4	PUSH4	ffffd000	 	 
- stack 1: 0x5C0
- stack 0: 0xFFFFD000
2277	 4B9	PUSH2	03A0	 	 
- stack 2: 0x5C0
- stack 1: 0xFFFFD000
- stack 0: 0x3A0
2278	 4BC	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C0
2279	 4BD	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2280	 4BF	ADD		 	 
- stack 0: 0x5C4
2281	 4C0	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2282	 4C1	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x210FCDD018902C00389000104C6000204E0FFD4016F000D03F000000522FFFC
2283	 4C2	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x210FCDD018902C00389000104C6000204E0FFD4016F000D03F000000522FFFC
- stack 0: 0xF0
2284	 4C4	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x210
2285	 4C5	JUMP		 	 
- stack 0: 0x5C4
2286	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x5C4
2287	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2288	 212	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x210FCDD018902C00389000104C6000204E0FFD4016F000D03F000000522FFFC
2289	 213	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x210FCDD018902C00389000104C6000204E0FFD4016F000D03F000000522FFFC
- stack 0: 0xE0
2290	 215	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x210FCDD
2291	 216	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x210FCDD
- stack 0: 0xFFFF
2292	 219	AND		 	 
- stack 1: 0x5C4
- stack 0: 0xFCDD
2293	 21A	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0xFCDD
- stack 0: 0x1
2294	 21C	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
2295	 21D	PUSH2	03A0	 	 
- stack 2: 0x5C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0x3A0
2296	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x5C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0xFFFFD000
2297	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x5C4
- stack 0: 0xFFFFCCDD
2298	 222	PUSH2	03A0	 	 
- stack 2: 0x5C4
- stack 1: 0xFFFFCCDD
- stack 0: 0x3A0
2299	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C4
2300	 226	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2301	 228	ADD		 	 
- stack 0: 0x5C8
2302	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2303	 22A	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x18902C00389000104C6000204E0FFD4016F000D03F000000522FFFC0095FCCD
2304	 22B	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x18902C00389000104C6000204E0FFD4016F000D03F000000522FFFC0095FCCD
- stack 0: 0xF0
2305	 22D	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x189
2306	 22E	JUMP		 	 
- stack 0: 0x5C8
2307	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x5C8
2308	 18A	PUSH2	0060	 	 
- stack 1: 0x5C8
- stack 0: 0x60
2309	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCDD
2310	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCDD
- stack 0: 0xFFFFFFFF
2311	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C8
- stack 0: 0xFFFFCCDD
2312	 194	PUSH2	03A0	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFFCCDD
- stack 0: 0x3A0
2313	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x5C8
- stack 1: 0xFFFFCCDD
- stack 0: 0xFFFFCCDD
2314	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5C8
- stack 2: 0xFFFFCCDD
- stack 1: 0xFFFFCCDD
- stack 0: 0xFFFFFFFF
2315	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5C8
- stack 1: 0xFFFFCCDD
- stack 0: 0xFFFFCCDD
2316	 19E	SUB		 	 
- stack 1: 0x5C8
- stack 0: 0x0
2317	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x1A7
2318	 1A2	JUMPI		 	 
- stack 0: 0x5C8
2319	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x5C8
- stack 0: 0x1C1
2320	 1A6	JUMP		 	 
- stack 0: 0x5C8
2321	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x5C8
2322	 1C2	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2323	 1C4	ADD		 	 
- stack 0: 0x5CC
2324	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2325	 1C6	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x389000104C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D0000
2326	 1C7	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x389000104C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D0000
- stack 0: 0xF0
2327	 1C9	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x389
2328	 1CA	JUMP		 	 
- stack 0: 0x5CC
2329	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x5CC
2330	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2331	 38B	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x389000104C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D0000
2332	 38C	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x389000104C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D0000
- stack 0: 0xE0
2333	 38E	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x3890001
2334	 38F	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x3890001
- stack 0: 0xFFFF
2335	 392	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2336	 393	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x1
2337	 395	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2338	 396	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x80
2339	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x0
2340	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x5CC
- stack 0: 0x1
2341	 39B	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x80
2342	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x5CC
2343	 39F	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2344	 3A1	ADD		 	 
- stack 0: 0x5D0
2345	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2346	 3A3	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x4C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D000001DE02E8
2347	 3A4	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x4C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D000001DE02E8
- stack 0: 0xF0
2348	 3A6	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x4C6
2349	 3A7	JUMP		 	 
- stack 0: 0x5D0
2350	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D0
2351	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2352	 4C8	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x4C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D000001DE02E8
2353	 4C9	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x4C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D000001DE02E8
- stack 0: 0xE0
2354	 4CB	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x4C60002
2355	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x4C60002
- stack 0: 0xFFFF
2356	 4CF	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2357	 4D0	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0x1
2358	 4D2	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2359	 4D3	PUSH2	00A0	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0xA0
2360	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D0
2361	 4D7	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2362	 4D9	ADD		 	 
- stack 0: 0x5D4
2363	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2364	 4DB	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x4E0FFD4016F000D03F000000522FFFC0095FCCD041D000001DE02E805350000
2365	 4DC	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x4E0FFD4016F000D03F000000522FFFC0095FCCD041D000001DE02E805350000
- stack 0: 0xF0
2366	 4DE	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x4E0
2367	 4DF	JUMP		 	 
- stack 0: 0x5D4
2368	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x5D4
2369	 4E1	PUSH2	0080	 	 
- stack 1: 0x5D4
- stack 0: 0x80
2370	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D4
- stack 0: 0x1
2371	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2372	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x1
2373	 4EB	PUSH2	00A0	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0xA0
2374	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x2
2375	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2376	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x2
2377	 4F5	SUB		 	 
- stack 1: 0x5D4
- stack 0: 0x1
2378	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x4FE
2379	 4F9	JUMPI		 	 
- stack 0: 0x5D4
2380	 4FE	JUMPDEST		 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x5D4
2381	 4FF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2382	 500	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x4E0FFD4016F000D03F000000522FFFC0095FCCD041D000001DE02E805350000
2383	 501	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x4E0FFD4016F000D03F000000522FFFC0095FCCD041D000001DE02E805350000
- stack 0: 0xE0
2384	 503	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x4E0FFD4
2385	 504	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x4E0FFD4
- stack 0: 0xFFFF
2386	 507	AND		 	 
- stack 1: 0x5D4
- stack 0: 0xFFD4
2387	 508	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0xFFD4
- stack 0: 0x1
2388	 50A	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4
2389	 50B	ADD		 	 
- stack 0: 0x5A8
2390	 50C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5A8
- stack 0: 0xFFFFFFFF
2391	 511	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5A8
2392	 512	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2393	 513	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x40AFFFD0095FCDD041D000001DE0320042C0000047E000004B3FFFD0210FCDD
2394	 514	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x40AFFFD0095FCDD041D000001DE0320042C0000047E000004B3FFFD0210FCDD
- stack 0: 0xF0
2395	 516	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x40A
2396	 517	JUMP		 	 
- stack 0: 0x5A8
2397	 40A	JUMPDEST		 ;; __riscvimpl_LUI_ffffd0b7	  ;; # instr: lui ra,0xffffd(ignore imm)
- stack 0: 0x5A8
2398	 40B	PUSH4	ffffd000	 	 
- stack 1: 0x5A8
- stack 0: 0xFFFFD000
2399	 410	PUSH2	0020	 	 
- stack 2: 0x5A8
- stack 1: 0xFFFFD000
- stack 0: 0x20
2400	 413	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A8
2401	 414	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2402	 416	ADD		 	 
- stack 0: 0x5AC
2403	 417	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2404	 418	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x95FCDD041D000001DE0320042C0000047E000004B3FFFD0210FCDD018902C0
2405	 419	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x95FCDD041D000001DE0320042C0000047E000004B3FFFD0210FCDD018902C0
- stack 0: 0xF0
2406	 41B	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x95
2407	 41C	JUMP		 	 
- stack 0: 0x5AC
2408	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x5AC
2409	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2410	 97	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x95FCDD041D000001DE0320042C0000047E000004B3FFFD0210FCDD018902C0
2411	 98	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x95FCDD041D000001DE0320042C0000047E000004B3FFFD0210FCDD018902C0
- stack 0: 0xE0
2412	 9A	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x95FCDD
2413	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x95FCDD
- stack 0: 0xFFFF
2414	 9E	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xFCDD
2415	 9F	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xFCDD
- stack 0: 0x1
2416	 A1	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
2417	 A2	PUSH2	0020	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0x20
2418	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0xFFFFD000
2419	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5AC
- stack 0: 0xFFFFCCDD
2420	 A7	PUSH2	0020	 	 
- stack 2: 0x5AC
- stack 1: 0xFFFFCCDD
- stack 0: 0x20
2421	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5AC
2422	 AB	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2423	 AD	ADD		 	 
- stack 0: 0x5B0
2424	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2425	 AF	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x41D000001DE0320042C0000047E000004B3FFFD0210FCDD018902C003890001
2426	 B0	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x41D000001DE0320042C0000047E000004B3FFFD0210FCDD018902C003890001
- stack 0: 0xF0
2427	 B2	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x41D
2428	 B3	JUMP		 	 
- stack 0: 0x5B0
2429	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x5B0
2430	 41E	DUP1		 	 
- stack 1: 0x5B0
- stack 0: 0x5B0
2431	 41F	PUSH2	0040	 	 
- stack 2: 0x5B0
- stack 1: 0x5B0
- stack 0: 0x40
2432	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x5B0
2433	 423	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2434	 425	ADD		 	 
- stack 0: 0x5B4
2435	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2436	 427	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1DE0320042C0000047E000004B3FFFD0210FCDD018902C00389000104C60002
2437	 428	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x1DE0320042C0000047E000004B3FFFD0210FCDD018902C00389000104C60002
- stack 0: 0xF0
2438	 42A	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1DE
2439	 42B	JUMP		 	 
- stack 0: 0x5B4
2440	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x5B4
2441	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2442	 1E0	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x1DE0320042C0000047E000004B3FFFD0210FCDD018902C00389000104C60002
2443	 1E1	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x1DE0320042C0000047E000004B3FFFD0210FCDD018902C00389000104C60002
- stack 0: 0xE0
2444	 1E3	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x1DE0320
2445	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x1DE0320
- stack 0: 0xFFFF
2446	 1E7	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x320
2447	 1E8	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x320
- stack 0: 0x1
2448	 1EA	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x320
2449	 1EB	PUSH2	0040	 	 
- stack 2: 0x5B4
- stack 1: 0x320
- stack 0: 0x40
2450	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x5B4
- stack 1: 0x320
- stack 0: 0x5B0
2451	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x5B4
- stack 0: 0x8D0
2452	 1F0	PUSH2	0040	 	 
- stack 2: 0x5B4
- stack 1: 0x8D0
- stack 0: 0x40
2453	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x5B4
2454	 1F4	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2455	 1F6	ADD		 	 
- stack 0: 0x5B8
2456	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2457	 1F8	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x42C0000047E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4
2458	 1F9	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x42C0000047E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4
- stack 0: 0xF0
2459	 1FB	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x42C
2460	 1FC	JUMP		 	 
- stack 0: 0x5B8
2461	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x5B8
2462	 42D	PUSH2	0040	 	 
- stack 1: 0x5B8
- stack 0: 0x40
2463	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x5B8
- stack 0: 0x8D0
2464	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5B8
- stack 1: 0x8D0
- stack 0: 0x5B8
2465	 432	MLOAD		 	 
- stack 2: 0x5B8
- stack 1: 0x8D0
- stack 0: 0x42C0000047E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4
2466	 433	PUSH1	E0	 	 
- stack 3: 0x5B8
- stack 2: 0x8D0
- stack 1: 0x42C0000047E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4
- stack 0: 0xE0
2467	 435	SHR		 	 
- stack 2: 0x5B8
- stack 1: 0x8D0
- stack 0: 0x42C0000
2468	 436	PUSH2	FFFF	 	 
- stack 3: 0x5B8
- stack 2: 0x8D0
- stack 1: 0x42C0000
- stack 0: 0xFFFF
2469	 439	AND		 	 
- stack 2: 0x5B8
- stack 1: 0x8D0
- stack 0: 0x0
2470	 43A	PUSH1	01	 	 
- stack 3: 0x5B8
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
2471	 43C	SIGNEXTEND		 	 
- stack 2: 0x5B8
- stack 1: 0x8D0
- stack 0: 0x0
2472	 43D	ADD		 	 
- stack 1: 0x5B8
- stack 0: 0x8D0
2473	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
2474	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B8
- stack 0: 0x8D0
2475	 444	PUSH1	02	 	 
- stack 2: 0x5B8
- stack 1: 0x8D0
- stack 0: 0x2
2476	 446	XOR		 	 
- stack 1: 0x5B8
- stack 0: 0x8D2
2477	 447	DUP1		 	 
- stack 2: 0x5B8
- stack 1: 0x8D2
- stack 0: 0x8D2
2478	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x5B8
- stack 1: 0x8D2
- stack 0: 0xCCDDA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
2479	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x5B8
- stack 2: 0x8D2
- stack 1: 0xCCDDA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2480	 46A	AND		 	 
- stack 2: 0x5B8
- stack 1: 0x8D2
- stack 0: 0xA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
2481	 46B	PUSH2	0020	 	 
- stack 3: 0x5B8
- stack 2: 0x8D2
- stack 1: 0xA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
- stack 0: 0x20
2482	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x5B8
- stack 2: 0x8D2
- stack 1: 0xA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
- stack 0: 0xFFFFCCDD
2483	 46F	PUSH1	F0	 	 
- stack 4: 0x5B8
- stack 3: 0x8D2
- stack 2: 0xA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
- stack 1: 0xFFFFCCDD
- stack 0: 0xF0
2484	 471	SHL		 	 
- stack 3: 0x5B8
- stack 2: 0x8D2
- stack 1: 0xA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
- stack 0: 0xCCDD000000000000000000000000000000000000000000000000000000000000
2485	 472	ADD		 	 
- stack 2: 0x5B8
- stack 1: 0x8D2
- stack 0: 0xCCDDA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
2486	 473	SWAP1		 	 
- stack 2: 0x5B8
- stack 1: 0xCCDDA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
- stack 0: 0x8D2
2487	 474	MSTORE		 	 
- stack 0: 0x5B8
2488	 475	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2489	 477	ADD		 	 
- stack 0: 0x5BC
2490	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2491	 479	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x47E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4016F000D
2492	 47A	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x47E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4016F000D
- stack 0: 0xF0
2493	 47C	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x47E
2494	 47D	JUMP		 	 
- stack 0: 0x5BC
2495	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x5BC
2496	 47F	PUSH2	0040	 	 
- stack 1: 0x5BC
- stack 0: 0x40
2497	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x5BC
- stack 0: 0x8D0
2498	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
2499	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x8D0
2500	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0x5BC
2501	 48A	MLOAD		 	 
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0x47E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4016F000D
2502	 48B	PUSH1	E0	 	 
- stack 3: 0x5BC
- stack 2: 0x8D0
- stack 1: 0x47E000004B3FFFD0210FCDD018902C00389000104C6000204E0FFD4016F000D
- stack 0: 0xE0
2503	 48D	SHR		 	 
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0x47E0000
2504	 48E	PUSH2	FFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x8D0
- stack 1: 0x47E0000
- stack 0: 0xFFFF
2505	 491	AND		 	 
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0x0
2506	 492	PUSH1	01	 	 
- stack 3: 0x5BC
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
2507	 494	SIGNEXTEND		 	 
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0x0
2508	 495	ADD		 	 
- stack 1: 0x5BC
- stack 0: 0x8D0
2509	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
2510	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x8D0
2511	 49C	PUSH1	02	 	 
- stack 2: 0x5BC
- stack 1: 0x8D0
- stack 0: 0x2
2512	 49E	XOR		 	 
- stack 1: 0x5BC
- stack 0: 0x8D2
2513	 49F	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xCCDDA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
2514	 4A0	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0xCCDDA00A0AA0AA0000AAA00A0AA0309856780000000000000000000000000000
- stack 0: 0xF0
2515	 4A2	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xCCDD
2516	 4A3	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0xCCDD
- stack 0: 0x1
2517	 4A5	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCDD
2518	 4A6	PUSH2	0060	 	 
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCDD
- stack 0: 0x60
2519	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x5BC
2520	 4AA	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2521	 4AC	ADD		 	 
- stack 0: 0x5C0
2522	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2523	 4AE	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x4B3FFFD0210FCDD018902C00389000104C6000204E0FFD4016F000D03F00000
2524	 4AF	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x4B3FFFD0210FCDD018902C00389000104C6000204E0FFD4016F000D03F00000
- stack 0: 0xF0
2525	 4B1	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x4B3
2526	 4B2	JUMP		 	 
- stack 0: 0x5C0
2527	 4B3	JUMPDEST		 ;; __riscvimpl_LUI_ffffdeb7	  ;; # instr: lui t4,0xffffd(ignore imm)
- stack 0: 0x5C0
2528	 4B4	PUSH4	ffffd000	 	 
- stack 1: 0x5C0
- stack 0: 0xFFFFD000
2529	 4B9	PUSH2	03A0	 	 
- stack 2: 0x5C0
- stack 1: 0xFFFFD000
- stack 0: 0x3A0
2530	 4BC	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C0
2531	 4BD	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2532	 4BF	ADD		 	 
- stack 0: 0x5C4
2533	 4C0	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2534	 4C1	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x210FCDD018902C00389000104C6000204E0FFD4016F000D03F000000522FFFC
2535	 4C2	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x210FCDD018902C00389000104C6000204E0FFD4016F000D03F000000522FFFC
- stack 0: 0xF0
2536	 4C4	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x210
2537	 4C5	JUMP		 	 
- stack 0: 0x5C4
2538	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x5C4
2539	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2540	 212	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x210FCDD018902C00389000104C6000204E0FFD4016F000D03F000000522FFFC
2541	 213	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x210FCDD018902C00389000104C6000204E0FFD4016F000D03F000000522FFFC
- stack 0: 0xE0
2542	 215	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x210FCDD
2543	 216	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x210FCDD
- stack 0: 0xFFFF
2544	 219	AND		 	 
- stack 1: 0x5C4
- stack 0: 0xFCDD
2545	 21A	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0xFCDD
- stack 0: 0x1
2546	 21C	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
2547	 21D	PUSH2	03A0	 	 
- stack 2: 0x5C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0x3A0
2548	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x5C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0xFFFFD000
2549	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x5C4
- stack 0: 0xFFFFCCDD
2550	 222	PUSH2	03A0	 	 
- stack 2: 0x5C4
- stack 1: 0xFFFFCCDD
- stack 0: 0x3A0
2551	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C4
2552	 226	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2553	 228	ADD		 	 
- stack 0: 0x5C8
2554	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2555	 22A	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x18902C00389000104C6000204E0FFD4016F000D03F000000522FFFC0095FCCD
2556	 22B	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x18902C00389000104C6000204E0FFD4016F000D03F000000522FFFC0095FCCD
- stack 0: 0xF0
2557	 22D	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x189
2558	 22E	JUMP		 	 
- stack 0: 0x5C8
2559	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x5C8
2560	 18A	PUSH2	0060	 	 
- stack 1: 0x5C8
- stack 0: 0x60
2561	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCDD
2562	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCDD
- stack 0: 0xFFFFFFFF
2563	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C8
- stack 0: 0xFFFFCCDD
2564	 194	PUSH2	03A0	 	 
- stack 2: 0x5C8
- stack 1: 0xFFFFCCDD
- stack 0: 0x3A0
2565	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x5C8
- stack 1: 0xFFFFCCDD
- stack 0: 0xFFFFCCDD
2566	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5C8
- stack 2: 0xFFFFCCDD
- stack 1: 0xFFFFCCDD
- stack 0: 0xFFFFFFFF
2567	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5C8
- stack 1: 0xFFFFCCDD
- stack 0: 0xFFFFCCDD
2568	 19E	SUB		 	 
- stack 1: 0x5C8
- stack 0: 0x0
2569	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x1A7
2570	 1A2	JUMPI		 	 
- stack 0: 0x5C8
2571	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x5C8
- stack 0: 0x1C1
2572	 1A6	JUMP		 	 
- stack 0: 0x5C8
2573	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x5C8
2574	 1C2	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2575	 1C4	ADD		 	 
- stack 0: 0x5CC
2576	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2577	 1C6	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x389000104C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D0000
2578	 1C7	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x389000104C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D0000
- stack 0: 0xF0
2579	 1C9	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x389
2580	 1CA	JUMP		 	 
- stack 0: 0x5CC
2581	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x5CC
2582	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2583	 38B	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x389000104C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D0000
2584	 38C	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x389000104C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D0000
- stack 0: 0xE0
2585	 38E	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x3890001
2586	 38F	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x3890001
- stack 0: 0xFFFF
2587	 392	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2588	 393	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x1
2589	 395	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2590	 396	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x80
2591	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x1
2592	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x5CC
- stack 0: 0x2
2593	 39B	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0x80
2594	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x5CC
2595	 39F	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2596	 3A1	ADD		 	 
- stack 0: 0x5D0
2597	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2598	 3A3	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x4C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D000001DE02E8
2599	 3A4	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x4C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D000001DE02E8
- stack 0: 0xF0
2600	 3A6	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x4C6
2601	 3A7	JUMP		 	 
- stack 0: 0x5D0
2602	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D0
2603	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2604	 4C8	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x4C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D000001DE02E8
2605	 4C9	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x4C6000204E0FFD4016F000D03F000000522FFFC0095FCCD041D000001DE02E8
- stack 0: 0xE0
2606	 4CB	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x4C60002
2607	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x4C60002
- stack 0: 0xFFFF
2608	 4CF	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2609	 4D0	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0x1
2610	 4D2	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2611	 4D3	PUSH2	00A0	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0xA0
2612	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D0
2613	 4D7	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2614	 4D9	ADD		 	 
- stack 0: 0x5D4
2615	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2616	 4DB	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x4E0FFD4016F000D03F000000522FFFC0095FCCD041D000001DE02E805350000
2617	 4DC	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x4E0FFD4016F000D03F000000522FFFC0095FCCD041D000001DE02E805350000
- stack 0: 0xF0
2618	 4DE	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x4E0
2619	 4DF	JUMP		 	 
- stack 0: 0x5D4
2620	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x5D4
2621	 4E1	PUSH2	0080	 	 
- stack 1: 0x5D4
- stack 0: 0x80
2622	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D4
- stack 0: 0x2
2623	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2624	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x2
2625	 4EB	PUSH2	00A0	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0xA0
2626	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x2
2627	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2628	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x2
2629	 4F5	SUB		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2630	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x4FE
2631	 4F9	JUMPI		 	 
- stack 0: 0x5D4
2632	 4FA	PUSH2	0518	 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 1: 0x5D4
- stack 0: 0x518
2633	 4FD	JUMP		 	 
- stack 0: 0x5D4
2634	 518	JUMPDEST		 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x5D4
2635	 519	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2636	 51B	ADD		 	 
- stack 0: 0x5D8
2637	 51C	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2638	 51D	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x16F000D03F000000522FFFC0095FCCD041D000001DE02E805350000042C0002
2639	 51E	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x16F000D03F000000522FFFC0095FCCD041D000001DE02E805350000042C0002
- stack 0: 0xF0
2640	 520	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x16F
2641	 521	JUMP		 	 
- stack 0: 0x5D8
2642	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5D8
2643	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2644	 171	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x16F000D03F000000522FFFC0095FCCD041D000001DE02E805350000042C0002
2645	 172	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x16F000D03F000000522FFFC0095FCCD041D000001DE02E805350000042C0002
- stack 0: 0xE0
2646	 174	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x16F000D
2647	 175	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x16F000D
- stack 0: 0xFFFF
2648	 178	AND		 	 
- stack 1: 0x5D8
- stack 0: 0xD
2649	 179	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0xD
- stack 0: 0x1
2650	 17B	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0xD
2651	 17C	PUSH2	0380	 	 
- stack 2: 0x5D8
- stack 1: 0xD
- stack 0: 0x380
2652	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x5D8
2653	 180	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2654	 182	ADD		 	 
- stack 0: 0x5DC
2655	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2656	 184	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x3F000000522FFFC0095FCCD041D000001DE02E805350000042C0002047E0002
2657	 185	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x3F000000522FFFC0095FCCD041D000001DE02E805350000042C0002047E0002
- stack 0: 0xF0
2658	 187	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x3F0
2659	 188	JUMP		 	 
- stack 0: 0x5DC
2660	 3F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5DC
2661	 3F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2662	 3F2	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x3F000000522FFFC0095FCCD041D000001DE02E805350000042C0002047E0002
2663	 3F3	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x3F000000522FFFC0095FCCD041D000001DE02E805350000042C0002047E0002
- stack 0: 0xE0
2664	 3F5	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x3F00000
2665	 3F6	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x3F00000
- stack 0: 0xFFFF
2666	 3F9	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2667	 3FA	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x1
2668	 3FC	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2669	 3FD	PUSH2	0080	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x80
2670	 400	MSTORE		 	  ;; # store to x4
- stack 0: 0x5DC
2671	 401	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2672	 403	ADD		 	 
- stack 0: 0x5E0
2673	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2674	 405	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x522FFFC0095FCCD041D000001DE02E805350000042C0002047E0002054CFFFC
2675	 406	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x522FFFC0095FCCD041D000001DE02E805350000042C0002047E0002054CFFFC
- stack 0: 0xF0
2676	 408	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x522
2677	 409	JUMP		 	 
- stack 0: 0x5E0
2678	 522	JUMPDEST		 ;; __riscvimpl_LUI_ffffc0b7	  ;; # instr: lui ra,0xffffc(ignore imm)
- stack 0: 0x5E0
2679	 523	PUSH4	ffffc000	 	 
- stack 1: 0x5E0
- stack 0: 0xFFFFC000
2680	 528	PUSH2	0020	 	 
- stack 2: 0x5E0
- stack 1: 0xFFFFC000
- stack 0: 0x20
2681	 52B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E0
2682	 52C	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2683	 52E	ADD		 	 
- stack 0: 0x5E4
2684	 52F	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2685	 530	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x95FCCD041D000001DE02E805350000042C0002047E0002054CFFFC0210FCCD
2686	 531	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x95FCCD041D000001DE02E805350000042C0002047E0002054CFFFC0210FCCD
- stack 0: 0xF0
2687	 533	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x95
2688	 534	JUMP		 	 
- stack 0: 0x5E4
2689	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x5E4
2690	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2691	 97	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x95FCCD041D000001DE02E805350000042C0002047E0002054CFFFC0210FCCD
2692	 98	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x95FCCD041D000001DE02E805350000042C0002047E0002054CFFFC0210FCCD
- stack 0: 0xE0
2693	 9A	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x95FCCD
2694	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x95FCCD
- stack 0: 0xFFFF
2695	 9E	AND		 	 
- stack 1: 0x5E4
- stack 0: 0xFCCD
2696	 9F	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0xFCCD
- stack 0: 0x1
2697	 A1	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
2698	 A2	PUSH2	0020	 	 
- stack 2: 0x5E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0x20
2699	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0xFFFFC000
2700	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5E4
- stack 0: 0xFFFFBCCD
2701	 A7	PUSH2	0020	 	 
- stack 2: 0x5E4
- stack 1: 0xFFFFBCCD
- stack 0: 0x20
2702	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E4
2703	 AB	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2704	 AD	ADD		 	 
- stack 0: 0x5E8
2705	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2706	 AF	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x41D000001DE02E805350000042C0002047E0002054CFFFC0210FCCD01890284
2707	 B0	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x41D000001DE02E805350000042C0002047E0002054CFFFC0210FCCD01890284
- stack 0: 0xF0
2708	 B2	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x41D
2709	 B3	JUMP		 	 
- stack 0: 0x5E8
2710	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x5E8
2711	 41E	DUP1		 	 
- stack 1: 0x5E8
- stack 0: 0x5E8
2712	 41F	PUSH2	0040	 	 
- stack 2: 0x5E8
- stack 1: 0x5E8
- stack 0: 0x40
2713	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x5E8
2714	 423	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2715	 425	ADD		 	 
- stack 0: 0x5EC
2716	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2717	 427	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x1DE02E805350000042C0002047E0002054CFFFC0210FCCD0189028403890001
2718	 428	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x1DE02E805350000042C0002047E0002054CFFFC0210FCCD0189028403890001
- stack 0: 0xF0
2719	 42A	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x1DE
2720	 42B	JUMP		 	 
- stack 0: 0x5EC
2721	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x5EC
2722	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2723	 1E0	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x1DE02E805350000042C0002047E0002054CFFFC0210FCCD0189028403890001
2724	 1E1	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x1DE02E805350000042C0002047E0002054CFFFC0210FCCD0189028403890001
- stack 0: 0xE0
2725	 1E3	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x1DE02E8
2726	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x1DE02E8
- stack 0: 0xFFFF
2727	 1E7	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x2E8
2728	 1E8	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x2E8
- stack 0: 0x1
2729	 1EA	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x2E8
2730	 1EB	PUSH2	0040	 	 
- stack 2: 0x5EC
- stack 1: 0x2E8
- stack 0: 0x40
2731	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x5EC
- stack 1: 0x2E8
- stack 0: 0x5E8
2732	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x5EC
- stack 0: 0x8D0
2733	 1F0	PUSH2	0040	 	 
- stack 2: 0x5EC
- stack 1: 0x8D0
- stack 0: 0x40
2734	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x5EC
2735	 1F4	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2736	 1F6	ADD		 	 
- stack 0: 0x5F0
2737	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2738	 1F8	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x5350000042C0002047E0002054CFFFC0210FCCD018902840389000104C60002
2739	 1F9	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x5350000042C0002047E0002054CFFFC0210FCCD018902840389000104C60002
- stack 0: 0xF0
2740	 1FB	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x535
2741	 1FC	JUMP		 	 
- stack 0: 0x5F0
2742	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5F0
2743	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2744	 537	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x5350000042C0002047E0002054CFFFC0210FCCD018902840389000104C60002
2745	 538	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x5350000042C0002047E0002054CFFFC0210FCCD018902840389000104C60002
- stack 0: 0xE0
2746	 53A	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x5350000
2747	 53B	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x5350000
- stack 0: 0xFFFF
2748	 53E	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
2749	 53F	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x1
2750	 541	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
2751	 542	POP		 	 
- stack 0: 0x5F0
2752	 543	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2753	 545	ADD		 	 
- stack 0: 0x5F4
2754	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2755	 547	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x42C0002047E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0
2756	 548	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x42C0002047E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0
- stack 0: 0xF0
2757	 54A	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x42C
2758	 54B	JUMP		 	 
- stack 0: 0x5F4
2759	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x5F4
2760	 42D	PUSH2	0040	 	 
- stack 1: 0x5F4
- stack 0: 0x40
2761	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x5F4
- stack 0: 0x8D0
2762	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0x5F4
2763	 432	MLOAD		 	 
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0x42C0002047E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0
2764	 433	PUSH1	E0	 	 
- stack 3: 0x5F4
- stack 2: 0x8D0
- stack 1: 0x42C0002047E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0
- stack 0: 0xE0
2765	 435	SHR		 	 
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0x42C0002
2766	 436	PUSH2	FFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x8D0
- stack 1: 0x42C0002
- stack 0: 0xFFFF
2767	 439	AND		 	 
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0x2
2768	 43A	PUSH1	01	 	 
- stack 3: 0x5F4
- stack 2: 0x8D0
- stack 1: 0x2
- stack 0: 0x1
2769	 43C	SIGNEXTEND		 	 
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0x2
2770	 43D	ADD		 	 
- stack 1: 0x5F4
- stack 0: 0x8D2
2771	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x8D2
- stack 0: 0xFFFFFFFF
2772	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x8D2
2773	 444	PUSH1	02	 	 
- stack 2: 0x5F4
- stack 1: 0x8D2
- stack 0: 0x2
2774	 446	XOR		 	 
- stack 1: 0x5F4
- stack 0: 0x8D0
2775	 447	DUP1		 	 
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0x8D0
2776	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0xAA00CCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
2777	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x8D0
- stack 1: 0xAA00CCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2778	 46A	AND		 	 
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0xCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
2779	 46B	PUSH2	0020	 	 
- stack 3: 0x5F4
- stack 2: 0x8D0
- stack 1: 0xCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
- stack 0: 0x20
2780	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x5F4
- stack 2: 0x8D0
- stack 1: 0xCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
- stack 0: 0xFFFFBCCD
2781	 46F	PUSH1	F0	 	 
- stack 4: 0x5F4
- stack 3: 0x8D0
- stack 2: 0xCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
- stack 1: 0xFFFFBCCD
- stack 0: 0xF0
2782	 471	SHL		 	 
- stack 3: 0x5F4
- stack 2: 0x8D0
- stack 1: 0xCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
- stack 0: 0xBCCD000000000000000000000000000000000000000000000000000000000000
2783	 472	ADD		 	 
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0xBCCDCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
2784	 473	SWAP1		 	 
- stack 2: 0x5F4
- stack 1: 0xBCCDCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
- stack 0: 0x8D0
2785	 474	MSTORE		 	 
- stack 0: 0x5F4
2786	 475	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2787	 477	ADD		 	 
- stack 0: 0x5F8
2788	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2789	 479	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x47E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0016F000E
2790	 47A	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x47E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0016F000E
- stack 0: 0xF0
2791	 47C	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x47E
2792	 47D	JUMP		 	 
- stack 0: 0x5F8
2793	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x5F8
2794	 47F	PUSH2	0040	 	 
- stack 1: 0x5F8
- stack 0: 0x40
2795	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x5F8
- stack 0: 0x8D0
2796	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
2797	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F8
- stack 0: 0x8D0
2798	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5F8
- stack 1: 0x8D0
- stack 0: 0x5F8
2799	 48A	MLOAD		 	 
- stack 2: 0x5F8
- stack 1: 0x8D0
- stack 0: 0x47E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0016F000E
2800	 48B	PUSH1	E0	 	 
- stack 3: 0x5F8
- stack 2: 0x8D0
- stack 1: 0x47E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0016F000E
- stack 0: 0xE0
2801	 48D	SHR		 	 
- stack 2: 0x5F8
- stack 1: 0x8D0
- stack 0: 0x47E0002
2802	 48E	PUSH2	FFFF	 	 
- stack 3: 0x5F8
- stack 2: 0x8D0
- stack 1: 0x47E0002
- stack 0: 0xFFFF
2803	 491	AND		 	 
- stack 2: 0x5F8
- stack 1: 0x8D0
- stack 0: 0x2
2804	 492	PUSH1	01	 	 
- stack 3: 0x5F8
- stack 2: 0x8D0
- stack 1: 0x2
- stack 0: 0x1
2805	 494	SIGNEXTEND		 	 
- stack 2: 0x5F8
- stack 1: 0x8D0
- stack 0: 0x2
2806	 495	ADD		 	 
- stack 1: 0x5F8
- stack 0: 0x8D2
2807	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x8D2
- stack 0: 0xFFFFFFFF
2808	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F8
- stack 0: 0x8D2
2809	 49C	PUSH1	02	 	 
- stack 2: 0x5F8
- stack 1: 0x8D2
- stack 0: 0x2
2810	 49E	XOR		 	 
- stack 1: 0x5F8
- stack 0: 0x8D0
2811	 49F	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xBCCDCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
2812	 4A0	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0xBCCDCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
- stack 0: 0xF0
2813	 4A2	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xBCCD
2814	 4A3	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xBCCD
- stack 0: 0x1
2815	 4A5	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCCD
2816	 4A6	PUSH2	0060	 	 
- stack 2: 0x5F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCCD
- stack 0: 0x60
2817	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x5F8
2818	 4AA	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2819	 4AC	ADD		 	 
- stack 0: 0x5FC
2820	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2821	 4AE	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x54CFFFC0210FCCD018902840389000104C6000204E0FFD0016F000E03F00000
2822	 4AF	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x54CFFFC0210FCCD018902840389000104C6000204E0FFD0016F000E03F00000
- stack 0: 0xF0
2823	 4B1	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x54C
2824	 4B2	JUMP		 	 
- stack 0: 0x5FC
2825	 54C	JUMPDEST		 ;; __riscvimpl_LUI_ffffceb7	  ;; # instr: lui t4,0xffffc(ignore imm)
- stack 0: 0x5FC
2826	 54D	PUSH4	ffffc000	 	 
- stack 1: 0x5FC
- stack 0: 0xFFFFC000
2827	 552	PUSH2	03A0	 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFC000
- stack 0: 0x3A0
2828	 555	MSTORE		 	  ;; # store to x29
- stack 0: 0x5FC
2829	 556	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2830	 558	ADD		 	 
- stack 0: 0x600
2831	 559	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2832	 55A	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x210FCCD018902840389000104C6000204E0FFD0016F000E03F000000522FFFC
2833	 55B	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x210FCCD018902840389000104C6000204E0FFD0016F000E03F000000522FFFC
- stack 0: 0xF0
2834	 55D	SHR		 	 
- stack 1: 0x600
- stack 0: 0x210
2835	 55E	JUMP		 	 
- stack 0: 0x600
2836	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x600
2837	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2838	 212	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x210FCCD018902840389000104C6000204E0FFD0016F000E03F000000522FFFC
2839	 213	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x210FCCD018902840389000104C6000204E0FFD0016F000E03F000000522FFFC
- stack 0: 0xE0
2840	 215	SHR		 	 
- stack 1: 0x600
- stack 0: 0x210FCCD
2841	 216	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x210FCCD
- stack 0: 0xFFFF
2842	 219	AND		 	 
- stack 1: 0x600
- stack 0: 0xFCCD
2843	 21A	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0xFCCD
- stack 0: 0x1
2844	 21C	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
2845	 21D	PUSH2	03A0	 	 
- stack 2: 0x600
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0x3A0
2846	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x600
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0xFFFFC000
2847	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x600
- stack 0: 0xFFFFBCCD
2848	 222	PUSH2	03A0	 	 
- stack 2: 0x600
- stack 1: 0xFFFFBCCD
- stack 0: 0x3A0
2849	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x600
2850	 226	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2851	 228	ADD		 	 
- stack 0: 0x604
2852	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2853	 22A	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x18902840389000104C6000204E0FFD0016F000E03F000000522FFFC0095FBCC
2854	 22B	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x18902840389000104C6000204E0FFD0016F000E03F000000522FFFC0095FBCC
- stack 0: 0xF0
2855	 22D	SHR		 	 
- stack 1: 0x604
- stack 0: 0x189
2856	 22E	JUMP		 	 
- stack 0: 0x604
2857	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x604
2858	 18A	PUSH2	0060	 	 
- stack 1: 0x604
- stack 0: 0x60
2859	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x604
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCCD
2860	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCCD
- stack 0: 0xFFFFFFFF
2861	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0xFFFFBCCD
2862	 194	PUSH2	03A0	 	 
- stack 2: 0x604
- stack 1: 0xFFFFBCCD
- stack 0: 0x3A0
2863	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x604
- stack 1: 0xFFFFBCCD
- stack 0: 0xFFFFBCCD
2864	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x604
- stack 2: 0xFFFFBCCD
- stack 1: 0xFFFFBCCD
- stack 0: 0xFFFFFFFF
2865	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x604
- stack 1: 0xFFFFBCCD
- stack 0: 0xFFFFBCCD
2866	 19E	SUB		 	 
- stack 1: 0x604
- stack 0: 0x0
2867	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x1A7
2868	 1A2	JUMPI		 	 
- stack 0: 0x604
2869	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x604
- stack 0: 0x1C1
2870	 1A6	JUMP		 	 
- stack 0: 0x604
2871	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x604
2872	 1C2	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2873	 1C4	ADD		 	 
- stack 0: 0x608
2874	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2875	 1C6	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x389000104C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D0000
2876	 1C7	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x389000104C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D0000
- stack 0: 0xF0
2877	 1C9	SHR		 	 
- stack 1: 0x608
- stack 0: 0x389
2878	 1CA	JUMP		 	 
- stack 0: 0x608
2879	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x608
2880	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2881	 38B	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x389000104C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D0000
2882	 38C	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x389000104C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D0000
- stack 0: 0xE0
2883	 38E	SHR		 	 
- stack 1: 0x608
- stack 0: 0x3890001
2884	 38F	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x3890001
- stack 0: 0xFFFF
2885	 392	AND		 	 
- stack 1: 0x608
- stack 0: 0x1
2886	 393	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x1
2887	 395	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x1
2888	 396	PUSH2	0080	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x80
2889	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x0
2890	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x608
- stack 0: 0x1
2891	 39B	PUSH2	0080	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x80
2892	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x608
2893	 39F	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2894	 3A1	ADD		 	 
- stack 0: 0x60C
2895	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2896	 3A3	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x4C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D000001DE02AC
2897	 3A4	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x4C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D000001DE02AC
- stack 0: 0xF0
2898	 3A6	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x4C6
2899	 3A7	JUMP		 	 
- stack 0: 0x60C
2900	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x60C
2901	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
2902	 4C8	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x4C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D000001DE02AC
2903	 4C9	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x4C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D000001DE02AC
- stack 0: 0xE0
2904	 4CB	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x4C60002
2905	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x4C60002
- stack 0: 0xFFFF
2906	 4CF	AND		 	 
- stack 1: 0x60C
- stack 0: 0x2
2907	 4D0	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0x1
2908	 4D2	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x2
2909	 4D3	PUSH2	00A0	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0xA0
2910	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x60C
2911	 4D7	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
2912	 4D9	ADD		 	 
- stack 0: 0x610
2913	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
2914	 4DB	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x4E0FFD0016F000E03F000000522FFFC0095FBCC041D000001DE02AC05350000
2915	 4DC	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x4E0FFD0016F000E03F000000522FFFC0095FBCC041D000001DE02AC05350000
- stack 0: 0xF0
2916	 4DE	SHR		 	 
- stack 1: 0x610
- stack 0: 0x4E0
2917	 4DF	JUMP		 	 
- stack 0: 0x610
2918	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x610
2919	 4E1	PUSH2	0080	 	 
- stack 1: 0x610
- stack 0: 0x80
2920	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x610
- stack 0: 0x1
2921	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2922	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x610
- stack 0: 0x1
2923	 4EB	PUSH2	00A0	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0xA0
2924	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x2
2925	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x610
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2926	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x2
2927	 4F5	SUB		 	 
- stack 1: 0x610
- stack 0: 0x1
2928	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x4FE
2929	 4F9	JUMPI		 	 
- stack 0: 0x610
2930	 4FE	JUMPDEST		 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x610
2931	 4FF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
2932	 500	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x4E0FFD0016F000E03F000000522FFFC0095FBCC041D000001DE02AC05350000
2933	 501	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x4E0FFD0016F000E03F000000522FFFC0095FBCC041D000001DE02AC05350000
- stack 0: 0xE0
2934	 503	SHR		 	 
- stack 1: 0x610
- stack 0: 0x4E0FFD0
2935	 504	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x4E0FFD0
- stack 0: 0xFFFF
2936	 507	AND		 	 
- stack 1: 0x610
- stack 0: 0xFFD0
2937	 508	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0xFFD0
- stack 0: 0x1
2938	 50A	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD0
2939	 50B	ADD		 	 
- stack 0: 0x5E0
2940	 50C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5E0
- stack 0: 0xFFFFFFFF
2941	 511	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5E0
2942	 512	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2943	 513	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x522FFFC0095FCCD041D000001DE02E805350000042C0002047E0002054CFFFC
2944	 514	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x522FFFC0095FCCD041D000001DE02E805350000042C0002047E0002054CFFFC
- stack 0: 0xF0
2945	 516	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x522
2946	 517	JUMP		 	 
- stack 0: 0x5E0
2947	 522	JUMPDEST		 ;; __riscvimpl_LUI_ffffc0b7	  ;; # instr: lui ra,0xffffc(ignore imm)
- stack 0: 0x5E0
2948	 523	PUSH4	ffffc000	 	 
- stack 1: 0x5E0
- stack 0: 0xFFFFC000
2949	 528	PUSH2	0020	 	 
- stack 2: 0x5E0
- stack 1: 0xFFFFC000
- stack 0: 0x20
2950	 52B	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E0
2951	 52C	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2952	 52E	ADD		 	 
- stack 0: 0x5E4
2953	 52F	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2954	 530	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x95FCCD041D000001DE02E805350000042C0002047E0002054CFFFC0210FCCD
2955	 531	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x95FCCD041D000001DE02E805350000042C0002047E0002054CFFFC0210FCCD
- stack 0: 0xF0
2956	 533	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x95
2957	 534	JUMP		 	 
- stack 0: 0x5E4
2958	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x5E4
2959	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2960	 97	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x95FCCD041D000001DE02E805350000042C0002047E0002054CFFFC0210FCCD
2961	 98	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x95FCCD041D000001DE02E805350000042C0002047E0002054CFFFC0210FCCD
- stack 0: 0xE0
2962	 9A	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x95FCCD
2963	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x95FCCD
- stack 0: 0xFFFF
2964	 9E	AND		 	 
- stack 1: 0x5E4
- stack 0: 0xFCCD
2965	 9F	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0xFCCD
- stack 0: 0x1
2966	 A1	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
2967	 A2	PUSH2	0020	 	 
- stack 2: 0x5E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0x20
2968	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0xFFFFC000
2969	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5E4
- stack 0: 0xFFFFBCCD
2970	 A7	PUSH2	0020	 	 
- stack 2: 0x5E4
- stack 1: 0xFFFFBCCD
- stack 0: 0x20
2971	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E4
2972	 AB	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2973	 AD	ADD		 	 
- stack 0: 0x5E8
2974	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2975	 AF	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x41D000001DE02E805350000042C0002047E0002054CFFFC0210FCCD01890284
2976	 B0	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x41D000001DE02E805350000042C0002047E0002054CFFFC0210FCCD01890284
- stack 0: 0xF0
2977	 B2	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x41D
2978	 B3	JUMP		 	 
- stack 0: 0x5E8
2979	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x5E8
2980	 41E	DUP1		 	 
- stack 1: 0x5E8
- stack 0: 0x5E8
2981	 41F	PUSH2	0040	 	 
- stack 2: 0x5E8
- stack 1: 0x5E8
- stack 0: 0x40
2982	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x5E8
2983	 423	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2984	 425	ADD		 	 
- stack 0: 0x5EC
2985	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2986	 427	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x1DE02E805350000042C0002047E0002054CFFFC0210FCCD0189028403890001
2987	 428	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x1DE02E805350000042C0002047E0002054CFFFC0210FCCD0189028403890001
- stack 0: 0xF0
2988	 42A	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x1DE
2989	 42B	JUMP		 	 
- stack 0: 0x5EC
2990	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x5EC
2991	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2992	 1E0	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x1DE02E805350000042C0002047E0002054CFFFC0210FCCD0189028403890001
2993	 1E1	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x1DE02E805350000042C0002047E0002054CFFFC0210FCCD0189028403890001
- stack 0: 0xE0
2994	 1E3	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x1DE02E8
2995	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x1DE02E8
- stack 0: 0xFFFF
2996	 1E7	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x2E8
2997	 1E8	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x2E8
- stack 0: 0x1
2998	 1EA	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x2E8
2999	 1EB	PUSH2	0040	 	 
- stack 2: 0x5EC
- stack 1: 0x2E8
- stack 0: 0x40
3000	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x5EC
- stack 1: 0x2E8
- stack 0: 0x5E8
3001	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x5EC
- stack 0: 0x8D0
3002	 1F0	PUSH2	0040	 	 
- stack 2: 0x5EC
- stack 1: 0x8D0
- stack 0: 0x40
3003	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x5EC
3004	 1F4	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3005	 1F6	ADD		 	 
- stack 0: 0x5F0
3006	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3007	 1F8	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x5350000042C0002047E0002054CFFFC0210FCCD018902840389000104C60002
3008	 1F9	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x5350000042C0002047E0002054CFFFC0210FCCD018902840389000104C60002
- stack 0: 0xF0
3009	 1FB	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x535
3010	 1FC	JUMP		 	 
- stack 0: 0x5F0
3011	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5F0
3012	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3013	 537	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x5350000042C0002047E0002054CFFFC0210FCCD018902840389000104C60002
3014	 538	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x5350000042C0002047E0002054CFFFC0210FCCD018902840389000104C60002
- stack 0: 0xE0
3015	 53A	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x5350000
3016	 53B	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x5350000
- stack 0: 0xFFFF
3017	 53E	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3018	 53F	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x1
3019	 541	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
3020	 542	POP		 	 
- stack 0: 0x5F0
3021	 543	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3022	 545	ADD		 	 
- stack 0: 0x5F4
3023	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3024	 547	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x42C0002047E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0
3025	 548	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x42C0002047E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0
- stack 0: 0xF0
3026	 54A	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x42C
3027	 54B	JUMP		 	 
- stack 0: 0x5F4
3028	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x5F4
3029	 42D	PUSH2	0040	 	 
- stack 1: 0x5F4
- stack 0: 0x40
3030	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x5F4
- stack 0: 0x8D0
3031	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0x5F4
3032	 432	MLOAD		 	 
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0x42C0002047E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0
3033	 433	PUSH1	E0	 	 
- stack 3: 0x5F4
- stack 2: 0x8D0
- stack 1: 0x42C0002047E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0
- stack 0: 0xE0
3034	 435	SHR		 	 
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0x42C0002
3035	 436	PUSH2	FFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x8D0
- stack 1: 0x42C0002
- stack 0: 0xFFFF
3036	 439	AND		 	 
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0x2
3037	 43A	PUSH1	01	 	 
- stack 3: 0x5F4
- stack 2: 0x8D0
- stack 1: 0x2
- stack 0: 0x1
3038	 43C	SIGNEXTEND		 	 
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0x2
3039	 43D	ADD		 	 
- stack 1: 0x5F4
- stack 0: 0x8D2
3040	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x8D2
- stack 0: 0xFFFFFFFF
3041	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x8D2
3042	 444	PUSH1	02	 	 
- stack 2: 0x5F4
- stack 1: 0x8D2
- stack 0: 0x2
3043	 446	XOR		 	 
- stack 1: 0x5F4
- stack 0: 0x8D0
3044	 447	DUP1		 	 
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0x8D0
3045	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0xBCCDCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
3046	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x8D0
- stack 1: 0xBCCDCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3047	 46A	AND		 	 
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0xCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
3048	 46B	PUSH2	0020	 	 
- stack 3: 0x5F4
- stack 2: 0x8D0
- stack 1: 0xCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
- stack 0: 0x20
3049	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x5F4
- stack 2: 0x8D0
- stack 1: 0xCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
- stack 0: 0xFFFFBCCD
3050	 46F	PUSH1	F0	 	 
- stack 4: 0x5F4
- stack 3: 0x8D0
- stack 2: 0xCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
- stack 1: 0xFFFFBCCD
- stack 0: 0xF0
3051	 471	SHL		 	 
- stack 3: 0x5F4
- stack 2: 0x8D0
- stack 1: 0xCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
- stack 0: 0xBCCD000000000000000000000000000000000000000000000000000000000000
3052	 472	ADD		 	 
- stack 2: 0x5F4
- stack 1: 0x8D0
- stack 0: 0xBCCDCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
3053	 473	SWAP1		 	 
- stack 2: 0x5F4
- stack 1: 0xBCCDCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
- stack 0: 0x8D0
3054	 474	MSTORE		 	 
- stack 0: 0x5F4
3055	 475	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3056	 477	ADD		 	 
- stack 0: 0x5F8
3057	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3058	 479	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x47E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0016F000E
3059	 47A	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x47E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0016F000E
- stack 0: 0xF0
3060	 47C	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x47E
3061	 47D	JUMP		 	 
- stack 0: 0x5F8
3062	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x5F8
3063	 47F	PUSH2	0040	 	 
- stack 1: 0x5F8
- stack 0: 0x40
3064	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x5F8
- stack 0: 0x8D0
3065	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
3066	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F8
- stack 0: 0x8D0
3067	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5F8
- stack 1: 0x8D0
- stack 0: 0x5F8
3068	 48A	MLOAD		 	 
- stack 2: 0x5F8
- stack 1: 0x8D0
- stack 0: 0x47E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0016F000E
3069	 48B	PUSH1	E0	 	 
- stack 3: 0x5F8
- stack 2: 0x8D0
- stack 1: 0x47E0002054CFFFC0210FCCD018902840389000104C6000204E0FFD0016F000E
- stack 0: 0xE0
3070	 48D	SHR		 	 
- stack 2: 0x5F8
- stack 1: 0x8D0
- stack 0: 0x47E0002
3071	 48E	PUSH2	FFFF	 	 
- stack 3: 0x5F8
- stack 2: 0x8D0
- stack 1: 0x47E0002
- stack 0: 0xFFFF
3072	 491	AND		 	 
- stack 2: 0x5F8
- stack 1: 0x8D0
- stack 0: 0x2
3073	 492	PUSH1	01	 	 
- stack 3: 0x5F8
- stack 2: 0x8D0
- stack 1: 0x2
- stack 0: 0x1
3074	 494	SIGNEXTEND		 	 
- stack 2: 0x5F8
- stack 1: 0x8D0
- stack 0: 0x2
3075	 495	ADD		 	 
- stack 1: 0x5F8
- stack 0: 0x8D2
3076	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x8D2
- stack 0: 0xFFFFFFFF
3077	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F8
- stack 0: 0x8D2
3078	 49C	PUSH1	02	 	 
- stack 2: 0x5F8
- stack 1: 0x8D2
- stack 0: 0x2
3079	 49E	XOR		 	 
- stack 1: 0x5F8
- stack 0: 0x8D0
3080	 49F	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xBCCDCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
3081	 4A0	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0xBCCDCCDDA00A0AA0AA0000AAA00A0AA030985678000000000000000000000000
- stack 0: 0xF0
3082	 4A2	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xBCCD
3083	 4A3	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xBCCD
- stack 0: 0x1
3084	 4A5	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCCD
3085	 4A6	PUSH2	0060	 	 
- stack 2: 0x5F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCCD
- stack 0: 0x60
3086	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x5F8
3087	 4AA	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3088	 4AC	ADD		 	 
- stack 0: 0x5FC
3089	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3090	 4AE	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x54CFFFC0210FCCD018902840389000104C6000204E0FFD0016F000E03F00000
3091	 4AF	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x54CFFFC0210FCCD018902840389000104C6000204E0FFD0016F000E03F00000
- stack 0: 0xF0
3092	 4B1	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x54C
3093	 4B2	JUMP		 	 
- stack 0: 0x5FC
3094	 54C	JUMPDEST		 ;; __riscvimpl_LUI_ffffceb7	  ;; # instr: lui t4,0xffffc(ignore imm)
- stack 0: 0x5FC
3095	 54D	PUSH4	ffffc000	 	 
- stack 1: 0x5FC
- stack 0: 0xFFFFC000
3096	 552	PUSH2	03A0	 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFC000
- stack 0: 0x3A0
3097	 555	MSTORE		 	  ;; # store to x29
- stack 0: 0x5FC
3098	 556	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3099	 558	ADD		 	 
- stack 0: 0x600
3100	 559	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3101	 55A	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x210FCCD018902840389000104C6000204E0FFD0016F000E03F000000522FFFC
3102	 55B	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x210FCCD018902840389000104C6000204E0FFD0016F000E03F000000522FFFC
- stack 0: 0xF0
3103	 55D	SHR		 	 
- stack 1: 0x600
- stack 0: 0x210
3104	 55E	JUMP		 	 
- stack 0: 0x600
3105	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x600
3106	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
3107	 212	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x210FCCD018902840389000104C6000204E0FFD0016F000E03F000000522FFFC
3108	 213	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x210FCCD018902840389000104C6000204E0FFD0016F000E03F000000522FFFC
- stack 0: 0xE0
3109	 215	SHR		 	 
- stack 1: 0x600
- stack 0: 0x210FCCD
3110	 216	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x210FCCD
- stack 0: 0xFFFF
3111	 219	AND		 	 
- stack 1: 0x600
- stack 0: 0xFCCD
3112	 21A	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0xFCCD
- stack 0: 0x1
3113	 21C	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
3114	 21D	PUSH2	03A0	 	 
- stack 2: 0x600
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0x3A0
3115	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x600
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0xFFFFC000
3116	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x600
- stack 0: 0xFFFFBCCD
3117	 222	PUSH2	03A0	 	 
- stack 2: 0x600
- stack 1: 0xFFFFBCCD
- stack 0: 0x3A0
3118	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x600
3119	 226	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3120	 228	ADD		 	 
- stack 0: 0x604
3121	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3122	 22A	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x18902840389000104C6000204E0FFD0016F000E03F000000522FFFC0095FBCC
3123	 22B	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x18902840389000104C6000204E0FFD0016F000E03F000000522FFFC0095FBCC
- stack 0: 0xF0
3124	 22D	SHR		 	 
- stack 1: 0x604
- stack 0: 0x189
3125	 22E	JUMP		 	 
- stack 0: 0x604
3126	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x604
3127	 18A	PUSH2	0060	 	 
- stack 1: 0x604
- stack 0: 0x60
3128	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x604
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCCD
3129	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCCD
- stack 0: 0xFFFFFFFF
3130	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0xFFFFBCCD
3131	 194	PUSH2	03A0	 	 
- stack 2: 0x604
- stack 1: 0xFFFFBCCD
- stack 0: 0x3A0
3132	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x604
- stack 1: 0xFFFFBCCD
- stack 0: 0xFFFFBCCD
3133	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x604
- stack 2: 0xFFFFBCCD
- stack 1: 0xFFFFBCCD
- stack 0: 0xFFFFFFFF
3134	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x604
- stack 1: 0xFFFFBCCD
- stack 0: 0xFFFFBCCD
3135	 19E	SUB		 	 
- stack 1: 0x604
- stack 0: 0x0
3136	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x1A7
3137	 1A2	JUMPI		 	 
- stack 0: 0x604
3138	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x604
- stack 0: 0x1C1
3139	 1A6	JUMP		 	 
- stack 0: 0x604
3140	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x604
3141	 1C2	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3142	 1C4	ADD		 	 
- stack 0: 0x608
3143	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3144	 1C6	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x389000104C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D0000
3145	 1C7	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x389000104C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D0000
- stack 0: 0xF0
3146	 1C9	SHR		 	 
- stack 1: 0x608
- stack 0: 0x389
3147	 1CA	JUMP		 	 
- stack 0: 0x608
3148	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x608
3149	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3150	 38B	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x389000104C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D0000
3151	 38C	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x389000104C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D0000
- stack 0: 0xE0
3152	 38E	SHR		 	 
- stack 1: 0x608
- stack 0: 0x3890001
3153	 38F	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x3890001
- stack 0: 0xFFFF
3154	 392	AND		 	 
- stack 1: 0x608
- stack 0: 0x1
3155	 393	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x1
3156	 395	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x1
3157	 396	PUSH2	0080	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x80
3158	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x1
3159	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x608
- stack 0: 0x2
3160	 39B	PUSH2	0080	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x80
3161	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x608
3162	 39F	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3163	 3A1	ADD		 	 
- stack 0: 0x60C
3164	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3165	 3A3	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x4C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D000001DE02AC
3166	 3A4	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x4C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D000001DE02AC
- stack 0: 0xF0
3167	 3A6	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x4C6
3168	 3A7	JUMP		 	 
- stack 0: 0x60C
3169	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x60C
3170	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
3171	 4C8	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x4C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D000001DE02AC
3172	 4C9	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x4C6000204E0FFD0016F000E03F000000522FFFC0095FBCC041D000001DE02AC
- stack 0: 0xE0
3173	 4CB	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x4C60002
3174	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x4C60002
- stack 0: 0xFFFF
3175	 4CF	AND		 	 
- stack 1: 0x60C
- stack 0: 0x2
3176	 4D0	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0x1
3177	 4D2	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x2
3178	 4D3	PUSH2	00A0	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0xA0
3179	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x60C
3180	 4D7	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3181	 4D9	ADD		 	 
- stack 0: 0x610
3182	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3183	 4DB	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x4E0FFD0016F000E03F000000522FFFC0095FBCC041D000001DE02AC05350000
3184	 4DC	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x4E0FFD0016F000E03F000000522FFFC0095FBCC041D000001DE02AC05350000
- stack 0: 0xF0
3185	 4DE	SHR		 	 
- stack 1: 0x610
- stack 0: 0x4E0
3186	 4DF	JUMP		 	 
- stack 0: 0x610
3187	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x610
3188	 4E1	PUSH2	0080	 	 
- stack 1: 0x610
- stack 0: 0x80
3189	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x610
- stack 0: 0x2
3190	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3191	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x610
- stack 0: 0x2
3192	 4EB	PUSH2	00A0	 	 
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0xA0
3193	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0x2
3194	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x610
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3195	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0x2
3196	 4F5	SUB		 	 
- stack 1: 0x610
- stack 0: 0x0
3197	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x4FE
3198	 4F9	JUMPI		 	 
- stack 0: 0x610
3199	 4FA	PUSH2	0518	 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 1: 0x610
- stack 0: 0x518
3200	 4FD	JUMP		 	 
- stack 0: 0x610
3201	 518	JUMPDEST		 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x610
3202	 519	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3203	 51B	ADD		 	 
- stack 0: 0x614
3204	 51C	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3205	 51D	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x16F000E03F000000522FFFC0095FBCC041D000001DE02AC0535000005350000
3206	 51E	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x16F000E03F000000522FFFC0095FBCC041D000001DE02AC0535000005350000
- stack 0: 0xF0
3207	 520	SHR		 	 
- stack 1: 0x614
- stack 0: 0x16F
3208	 521	JUMP		 	 
- stack 0: 0x614
3209	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x614
3210	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3211	 171	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x16F000E03F000000522FFFC0095FBCC041D000001DE02AC0535000005350000
3212	 172	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x16F000E03F000000522FFFC0095FBCC041D000001DE02AC0535000005350000
- stack 0: 0xE0
3213	 174	SHR		 	 
- stack 1: 0x614
- stack 0: 0x16F000E
3214	 175	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x16F000E
- stack 0: 0xFFFF
3215	 178	AND		 	 
- stack 1: 0x614
- stack 0: 0xE
3216	 179	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0xE
- stack 0: 0x1
3217	 17B	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0xE
3218	 17C	PUSH2	0380	 	 
- stack 2: 0x614
- stack 1: 0xE
- stack 0: 0x380
3219	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x614
3220	 180	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3221	 182	ADD		 	 
- stack 0: 0x618
3222	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3223	 184	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x3F000000522FFFC0095FBCC041D000001DE02AC0535000005350000042C0004
3224	 185	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x3F000000522FFFC0095FBCC041D000001DE02AC0535000005350000042C0004
- stack 0: 0xF0
3225	 187	SHR		 	 
- stack 1: 0x618
- stack 0: 0x3F0
3226	 188	JUMP		 	 
- stack 0: 0x618
3227	 3F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x618
3228	 3F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3229	 3F2	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x3F000000522FFFC0095FBCC041D000001DE02AC0535000005350000042C0004
3230	 3F3	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x3F000000522FFFC0095FBCC041D000001DE02AC0535000005350000042C0004
- stack 0: 0xE0
3231	 3F5	SHR		 	 
- stack 1: 0x618
- stack 0: 0x3F00000
3232	 3F6	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x3F00000
- stack 0: 0xFFFF
3233	 3F9	AND		 	 
- stack 1: 0x618
- stack 0: 0x0
3234	 3FA	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x1
3235	 3FC	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x0
3236	 3FD	PUSH2	0080	 	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x80
3237	 400	MSTORE		 	  ;; # store to x4
- stack 0: 0x618
3238	 401	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3239	 403	ADD		 	 
- stack 0: 0x61C
3240	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3241	 405	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x522FFFC0095FBCC041D000001DE02AC0535000005350000042C0004047E0004
3242	 406	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x522FFFC0095FBCC041D000001DE02AC0535000005350000042C0004047E0004
- stack 0: 0xF0
3243	 408	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x522
3244	 409	JUMP		 	 
- stack 0: 0x61C
3245	 522	JUMPDEST		 ;; __riscvimpl_LUI_ffffc0b7	  ;; # instr: lui ra,0xffffc(ignore imm)
- stack 0: 0x61C
3246	 523	PUSH4	ffffc000	 	 
- stack 1: 0x61C
- stack 0: 0xFFFFC000
3247	 528	PUSH2	0020	 	 
- stack 2: 0x61C
- stack 1: 0xFFFFC000
- stack 0: 0x20
3248	 52B	MSTORE		 	  ;; # store to x1
- stack 0: 0x61C
3249	 52C	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3250	 52E	ADD		 	 
- stack 0: 0x620
3251	 52F	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3252	 530	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x95FBCC041D000001DE02AC0535000005350000042C0004047E0004054CFFFC
3253	 531	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x95FBCC041D000001DE02AC0535000005350000042C0004047E0004054CFFFC
- stack 0: 0xF0
3254	 533	SHR		 	 
- stack 1: 0x620
- stack 0: 0x95
3255	 534	JUMP		 	 
- stack 0: 0x620
3256	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x620
3257	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3258	 97	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x95FBCC041D000001DE02AC0535000005350000042C0004047E0004054CFFFC
3259	 98	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x95FBCC041D000001DE02AC0535000005350000042C0004047E0004054CFFFC
- stack 0: 0xE0
3260	 9A	SHR		 	 
- stack 1: 0x620
- stack 0: 0x95FBCC
3261	 9B	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x95FBCC
- stack 0: 0xFFFF
3262	 9E	AND		 	 
- stack 1: 0x620
- stack 0: 0xFBCC
3263	 9F	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0xFBCC
- stack 0: 0x1
3264	 A1	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
3265	 A2	PUSH2	0020	 	 
- stack 2: 0x620
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0x20
3266	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x620
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0xFFFFC000
3267	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x620
- stack 0: 0xFFFFBBCC
3268	 A7	PUSH2	0020	 	 
- stack 2: 0x620
- stack 1: 0xFFFFBBCC
- stack 0: 0x20
3269	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x620
3270	 AB	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3271	 AD	ADD		 	 
- stack 0: 0x624
3272	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3273	 AF	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x41D000001DE02AC0535000005350000042C0004047E0004054CFFFC0210FBCC
3274	 B0	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x41D000001DE02AC0535000005350000042C0004047E0004054CFFFC0210FBCC
- stack 0: 0xF0
3275	 B2	SHR		 	 
- stack 1: 0x624
- stack 0: 0x41D
3276	 B3	JUMP		 	 
- stack 0: 0x624
3277	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x624
3278	 41E	DUP1		 	 
- stack 1: 0x624
- stack 0: 0x624
3279	 41F	PUSH2	0040	 	 
- stack 2: 0x624
- stack 1: 0x624
- stack 0: 0x40
3280	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x624
3281	 423	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3282	 425	ADD		 	 
- stack 0: 0x628
3283	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3284	 427	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x1DE02AC0535000005350000042C0004047E0004054CFFFC0210FBCC01890244
3285	 428	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x1DE02AC0535000005350000042C0004047E0004054CFFFC0210FBCC01890244
- stack 0: 0xF0
3286	 42A	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1DE
3287	 42B	JUMP		 	 
- stack 0: 0x628
3288	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x628
3289	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3290	 1E0	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x1DE02AC0535000005350000042C0004047E0004054CFFFC0210FBCC01890244
3291	 1E1	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x1DE02AC0535000005350000042C0004047E0004054CFFFC0210FBCC01890244
- stack 0: 0xE0
3292	 1E3	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1DE02AC
3293	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x1DE02AC
- stack 0: 0xFFFF
3294	 1E7	AND		 	 
- stack 1: 0x628
- stack 0: 0x2AC
3295	 1E8	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x2AC
- stack 0: 0x1
3296	 1EA	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x2AC
3297	 1EB	PUSH2	0040	 	 
- stack 2: 0x628
- stack 1: 0x2AC
- stack 0: 0x40
3298	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x628
- stack 1: 0x2AC
- stack 0: 0x624
3299	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x628
- stack 0: 0x8D0
3300	 1F0	PUSH2	0040	 	 
- stack 2: 0x628
- stack 1: 0x8D0
- stack 0: 0x40
3301	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x628
3302	 1F4	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3303	 1F6	ADD		 	 
- stack 0: 0x62C
3304	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3305	 1F8	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x535000005350000042C0004047E0004054CFFFC0210FBCC0189024403890001
3306	 1F9	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x535000005350000042C0004047E0004054CFFFC0210FBCC0189024403890001
- stack 0: 0xF0
3307	 1FB	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x535
3308	 1FC	JUMP		 	 
- stack 0: 0x62C
3309	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x62C
3310	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3311	 537	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x535000005350000042C0004047E0004054CFFFC0210FBCC0189024403890001
3312	 538	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x535000005350000042C0004047E0004054CFFFC0210FBCC0189024403890001
- stack 0: 0xE0
3313	 53A	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x5350000
3314	 53B	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x5350000
- stack 0: 0xFFFF
3315	 53E	AND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3316	 53F	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x1
3317	 541	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3318	 542	POP		 	 
- stack 0: 0x62C
3319	 543	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3320	 545	ADD		 	 
- stack 0: 0x630
3321	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3322	 547	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x5350000042C0004047E0004054CFFFC0210FBCC018902440389000104C60002
3323	 548	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x5350000042C0004047E0004054CFFFC0210FBCC018902440389000104C60002
- stack 0: 0xF0
3324	 54A	SHR		 	 
- stack 1: 0x630
- stack 0: 0x535
3325	 54B	JUMP		 	 
- stack 0: 0x630
3326	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x630
3327	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3328	 537	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x5350000042C0004047E0004054CFFFC0210FBCC018902440389000104C60002
3329	 538	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x5350000042C0004047E0004054CFFFC0210FBCC018902440389000104C60002
- stack 0: 0xE0
3330	 53A	SHR		 	 
- stack 1: 0x630
- stack 0: 0x5350000
3331	 53B	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x5350000
- stack 0: 0xFFFF
3332	 53E	AND		 	 
- stack 1: 0x630
- stack 0: 0x0
3333	 53F	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x1
3334	 541	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x0
3335	 542	POP		 	 
- stack 0: 0x630
3336	 543	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3337	 545	ADD		 	 
- stack 0: 0x634
3338	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3339	 547	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x42C0004047E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC
3340	 548	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x42C0004047E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC
- stack 0: 0xF0
3341	 54A	SHR		 	 
- stack 1: 0x634
- stack 0: 0x42C
3342	 54B	JUMP		 	 
- stack 0: 0x634
3343	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x634
3344	 42D	PUSH2	0040	 	 
- stack 1: 0x634
- stack 0: 0x40
3345	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x634
- stack 0: 0x8D0
3346	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x634
- stack 1: 0x8D0
- stack 0: 0x634
3347	 432	MLOAD		 	 
- stack 2: 0x634
- stack 1: 0x8D0
- stack 0: 0x42C0004047E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC
3348	 433	PUSH1	E0	 	 
- stack 3: 0x634
- stack 2: 0x8D0
- stack 1: 0x42C0004047E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC
- stack 0: 0xE0
3349	 435	SHR		 	 
- stack 2: 0x634
- stack 1: 0x8D0
- stack 0: 0x42C0004
3350	 436	PUSH2	FFFF	 	 
- stack 3: 0x634
- stack 2: 0x8D0
- stack 1: 0x42C0004
- stack 0: 0xFFFF
3351	 439	AND		 	 
- stack 2: 0x634
- stack 1: 0x8D0
- stack 0: 0x4
3352	 43A	PUSH1	01	 	 
- stack 3: 0x634
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
3353	 43C	SIGNEXTEND		 	 
- stack 2: 0x634
- stack 1: 0x8D0
- stack 0: 0x4
3354	 43D	ADD		 	 
- stack 1: 0x634
- stack 0: 0x8D4
3355	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x634
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
3356	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x634
- stack 0: 0x8D4
3357	 444	PUSH1	02	 	 
- stack 2: 0x634
- stack 1: 0x8D4
- stack 0: 0x2
3358	 446	XOR		 	 
- stack 1: 0x634
- stack 0: 0x8D6
3359	 447	DUP1		 	 
- stack 2: 0x634
- stack 1: 0x8D6
- stack 0: 0x8D6
3360	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x634
- stack 1: 0x8D6
- stack 0: 0xAA0AA0000AAA00A0AA030985678000000000000000000000000000000000000
3361	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x634
- stack 2: 0x8D6
- stack 1: 0xAA0AA0000AAA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3362	 46A	AND		 	 
- stack 2: 0x634
- stack 1: 0x8D6
- stack 0: 0xAA0000AAA00A0AA030985678000000000000000000000000000000000000
3363	 46B	PUSH2	0020	 	 
- stack 3: 0x634
- stack 2: 0x8D6
- stack 1: 0xAA0000AAA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0x20
3364	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x634
- stack 2: 0x8D6
- stack 1: 0xAA0000AAA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0xFFFFBBCC
3365	 46F	PUSH1	F0	 	 
- stack 4: 0x634
- stack 3: 0x8D6
- stack 2: 0xAA0000AAA00A0AA030985678000000000000000000000000000000000000
- stack 1: 0xFFFFBBCC
- stack 0: 0xF0
3366	 471	SHL		 	 
- stack 3: 0x634
- stack 2: 0x8D6
- stack 1: 0xAA0000AAA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0xBBCC000000000000000000000000000000000000000000000000000000000000
3367	 472	ADD		 	 
- stack 2: 0x634
- stack 1: 0x8D6
- stack 0: 0xBBCCAA0000AAA00A0AA030985678000000000000000000000000000000000000
3368	 473	SWAP1		 	 
- stack 2: 0x634
- stack 1: 0xBBCCAA0000AAA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0x8D6
3369	 474	MSTORE		 	 
- stack 0: 0x634
3370	 475	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3371	 477	ADD		 	 
- stack 0: 0x638
3372	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3373	 479	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x47E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC016F000F
3374	 47A	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x47E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC016F000F
- stack 0: 0xF0
3375	 47C	SHR		 	 
- stack 1: 0x638
- stack 0: 0x47E
3376	 47D	JUMP		 	 
- stack 0: 0x638
3377	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x638
3378	 47F	PUSH2	0040	 	 
- stack 1: 0x638
- stack 0: 0x40
3379	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x638
- stack 0: 0x8D0
3380	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x638
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
3381	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x638
- stack 0: 0x8D0
3382	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x638
- stack 1: 0x8D0
- stack 0: 0x638
3383	 48A	MLOAD		 	 
- stack 2: 0x638
- stack 1: 0x8D0
- stack 0: 0x47E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC016F000F
3384	 48B	PUSH1	E0	 	 
- stack 3: 0x638
- stack 2: 0x8D0
- stack 1: 0x47E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC016F000F
- stack 0: 0xE0
3385	 48D	SHR		 	 
- stack 2: 0x638
- stack 1: 0x8D0
- stack 0: 0x47E0004
3386	 48E	PUSH2	FFFF	 	 
- stack 3: 0x638
- stack 2: 0x8D0
- stack 1: 0x47E0004
- stack 0: 0xFFFF
3387	 491	AND		 	 
- stack 2: 0x638
- stack 1: 0x8D0
- stack 0: 0x4
3388	 492	PUSH1	01	 	 
- stack 3: 0x638
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
3389	 494	SIGNEXTEND		 	 
- stack 2: 0x638
- stack 1: 0x8D0
- stack 0: 0x4
3390	 495	ADD		 	 
- stack 1: 0x638
- stack 0: 0x8D4
3391	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x638
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
3392	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x638
- stack 0: 0x8D4
3393	 49C	PUSH1	02	 	 
- stack 2: 0x638
- stack 1: 0x8D4
- stack 0: 0x2
3394	 49E	XOR		 	 
- stack 1: 0x638
- stack 0: 0x8D6
3395	 49F	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xBBCCAA0000AAA00A0AA030985678000000000000000000000000000000000000
3396	 4A0	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0xBBCCAA0000AAA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0xF0
3397	 4A2	SHR		 	 
- stack 1: 0x638
- stack 0: 0xBBCC
3398	 4A3	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0xBBCC
- stack 0: 0x1
3399	 4A5	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBCC
3400	 4A6	PUSH2	0060	 	 
- stack 2: 0x638
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBCC
- stack 0: 0x60
3401	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x638
3402	 4AA	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3403	 4AC	ADD		 	 
- stack 0: 0x63C
3404	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3405	 4AE	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x54CFFFC0210FBCC018902440389000104C6000204E0FFCC016F000F03F00000
3406	 4AF	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x54CFFFC0210FBCC018902440389000104C6000204E0FFCC016F000F03F00000
- stack 0: 0xF0
3407	 4B1	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x54C
3408	 4B2	JUMP		 	 
- stack 0: 0x63C
3409	 54C	JUMPDEST		 ;; __riscvimpl_LUI_ffffceb7	  ;; # instr: lui t4,0xffffc(ignore imm)
- stack 0: 0x63C
3410	 54D	PUSH4	ffffc000	 	 
- stack 1: 0x63C
- stack 0: 0xFFFFC000
3411	 552	PUSH2	03A0	 	 
- stack 2: 0x63C
- stack 1: 0xFFFFC000
- stack 0: 0x3A0
3412	 555	MSTORE		 	  ;; # store to x29
- stack 0: 0x63C
3413	 556	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3414	 558	ADD		 	 
- stack 0: 0x640
3415	 559	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3416	 55A	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x210FBCC018902440389000104C6000204E0FFCC016F000F03F00000055FFFFB
3417	 55B	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x210FBCC018902440389000104C6000204E0FFCC016F000F03F00000055FFFFB
- stack 0: 0xF0
3418	 55D	SHR		 	 
- stack 1: 0x640
- stack 0: 0x210
3419	 55E	JUMP		 	 
- stack 0: 0x640
3420	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x640
3421	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3422	 212	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x210FBCC018902440389000104C6000204E0FFCC016F000F03F00000055FFFFB
3423	 213	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x210FBCC018902440389000104C6000204E0FFCC016F000F03F00000055FFFFB
- stack 0: 0xE0
3424	 215	SHR		 	 
- stack 1: 0x640
- stack 0: 0x210FBCC
3425	 216	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x210FBCC
- stack 0: 0xFFFF
3426	 219	AND		 	 
- stack 1: 0x640
- stack 0: 0xFBCC
3427	 21A	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0xFBCC
- stack 0: 0x1
3428	 21C	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
3429	 21D	PUSH2	03A0	 	 
- stack 2: 0x640
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0x3A0
3430	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x640
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0xFFFFC000
3431	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x640
- stack 0: 0xFFFFBBCC
3432	 222	PUSH2	03A0	 	 
- stack 2: 0x640
- stack 1: 0xFFFFBBCC
- stack 0: 0x3A0
3433	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x640
3434	 226	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3435	 228	ADD		 	 
- stack 0: 0x644
3436	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3437	 22A	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x18902440389000104C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC
3438	 22B	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x18902440389000104C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC
- stack 0: 0xF0
3439	 22D	SHR		 	 
- stack 1: 0x644
- stack 0: 0x189
3440	 22E	JUMP		 	 
- stack 0: 0x644
3441	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x644
3442	 18A	PUSH2	0060	 	 
- stack 1: 0x644
- stack 0: 0x60
3443	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x644
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBCC
3444	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x644
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBCC
- stack 0: 0xFFFFFFFF
3445	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x644
- stack 0: 0xFFFFBBCC
3446	 194	PUSH2	03A0	 	 
- stack 2: 0x644
- stack 1: 0xFFFFBBCC
- stack 0: 0x3A0
3447	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x644
- stack 1: 0xFFFFBBCC
- stack 0: 0xFFFFBBCC
3448	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x644
- stack 2: 0xFFFFBBCC
- stack 1: 0xFFFFBBCC
- stack 0: 0xFFFFFFFF
3449	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x644
- stack 1: 0xFFFFBBCC
- stack 0: 0xFFFFBBCC
3450	 19E	SUB		 	 
- stack 1: 0x644
- stack 0: 0x0
3451	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x1A7
3452	 1A2	JUMPI		 	 
- stack 0: 0x644
3453	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x644
- stack 0: 0x1C1
3454	 1A6	JUMP		 	 
- stack 0: 0x644
3455	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x644
3456	 1C2	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3457	 1C4	ADD		 	 
- stack 0: 0x648
3458	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3459	 1C6	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x389000104C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000
3460	 1C7	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x389000104C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000
- stack 0: 0xF0
3461	 1C9	SHR		 	 
- stack 1: 0x648
- stack 0: 0x389
3462	 1CA	JUMP		 	 
- stack 0: 0x648
3463	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x648
3464	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3465	 38B	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x389000104C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000
3466	 38C	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x389000104C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000
- stack 0: 0xE0
3467	 38E	SHR		 	 
- stack 1: 0x648
- stack 0: 0x3890001
3468	 38F	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x3890001
- stack 0: 0xFFFF
3469	 392	AND		 	 
- stack 1: 0x648
- stack 0: 0x1
3470	 393	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x1
3471	 395	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x1
3472	 396	PUSH2	0080	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x80
3473	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x0
3474	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x648
- stack 0: 0x1
3475	 39B	PUSH2	0080	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x80
3476	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x648
3477	 39F	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3478	 3A1	ADD		 	 
- stack 0: 0x64C
3479	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3480	 3A3	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x4C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000041D0000
3481	 3A4	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x4C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000041D0000
- stack 0: 0xF0
3482	 3A6	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x4C6
3483	 3A7	JUMP		 	 
- stack 0: 0x64C
3484	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x64C
3485	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3486	 4C8	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x4C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000041D0000
3487	 4C9	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x4C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000041D0000
- stack 0: 0xE0
3488	 4CB	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x4C60002
3489	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x4C60002
- stack 0: 0xFFFF
3490	 4CF	AND		 	 
- stack 1: 0x64C
- stack 0: 0x2
3491	 4D0	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x1
3492	 4D2	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x2
3493	 4D3	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xA0
3494	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x64C
3495	 4D7	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3496	 4D9	ADD		 	 
- stack 0: 0x650
3497	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3498	 4DB	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x4E0FFCC016F000F03F00000055FFFFB0095FBBC05350000041D000001DE0268
3499	 4DC	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x4E0FFCC016F000F03F00000055FFFFB0095FBBC05350000041D000001DE0268
- stack 0: 0xF0
3500	 4DE	SHR		 	 
- stack 1: 0x650
- stack 0: 0x4E0
3501	 4DF	JUMP		 	 
- stack 0: 0x650
3502	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x650
3503	 4E1	PUSH2	0080	 	 
- stack 1: 0x650
- stack 0: 0x80
3504	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x650
- stack 0: 0x1
3505	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3506	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x650
- stack 0: 0x1
3507	 4EB	PUSH2	00A0	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0xA0
3508	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x2
3509	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x650
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3510	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x2
3511	 4F5	SUB		 	 
- stack 1: 0x650
- stack 0: 0x1
3512	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x4FE
3513	 4F9	JUMPI		 	 
- stack 0: 0x650
3514	 4FE	JUMPDEST		 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x650
3515	 4FF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3516	 500	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x4E0FFCC016F000F03F00000055FFFFB0095FBBC05350000041D000001DE0268
3517	 501	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x4E0FFCC016F000F03F00000055FFFFB0095FBBC05350000041D000001DE0268
- stack 0: 0xE0
3518	 503	SHR		 	 
- stack 1: 0x650
- stack 0: 0x4E0FFCC
3519	 504	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x4E0FFCC
- stack 0: 0xFFFF
3520	 507	AND		 	 
- stack 1: 0x650
- stack 0: 0xFFCC
3521	 508	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0xFFCC
- stack 0: 0x1
3522	 50A	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
3523	 50B	ADD		 	 
- stack 0: 0x61C
3524	 50C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x61C
- stack 0: 0xFFFFFFFF
3525	 511	AND		 	  ;; # mask to 32 bits
- stack 0: 0x61C
3526	 512	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3527	 513	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x522FFFC0095FBCC041D000001DE02AC0535000005350000042C0004047E0004
3528	 514	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x522FFFC0095FBCC041D000001DE02AC0535000005350000042C0004047E0004
- stack 0: 0xF0
3529	 516	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x522
3530	 517	JUMP		 	 
- stack 0: 0x61C
3531	 522	JUMPDEST		 ;; __riscvimpl_LUI_ffffc0b7	  ;; # instr: lui ra,0xffffc(ignore imm)
- stack 0: 0x61C
3532	 523	PUSH4	ffffc000	 	 
- stack 1: 0x61C
- stack 0: 0xFFFFC000
3533	 528	PUSH2	0020	 	 
- stack 2: 0x61C
- stack 1: 0xFFFFC000
- stack 0: 0x20
3534	 52B	MSTORE		 	  ;; # store to x1
- stack 0: 0x61C
3535	 52C	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3536	 52E	ADD		 	 
- stack 0: 0x620
3537	 52F	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3538	 530	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x95FBCC041D000001DE02AC0535000005350000042C0004047E0004054CFFFC
3539	 531	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x95FBCC041D000001DE02AC0535000005350000042C0004047E0004054CFFFC
- stack 0: 0xF0
3540	 533	SHR		 	 
- stack 1: 0x620
- stack 0: 0x95
3541	 534	JUMP		 	 
- stack 0: 0x620
3542	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x620
3543	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3544	 97	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x95FBCC041D000001DE02AC0535000005350000042C0004047E0004054CFFFC
3545	 98	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x95FBCC041D000001DE02AC0535000005350000042C0004047E0004054CFFFC
- stack 0: 0xE0
3546	 9A	SHR		 	 
- stack 1: 0x620
- stack 0: 0x95FBCC
3547	 9B	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x95FBCC
- stack 0: 0xFFFF
3548	 9E	AND		 	 
- stack 1: 0x620
- stack 0: 0xFBCC
3549	 9F	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0xFBCC
- stack 0: 0x1
3550	 A1	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
3551	 A2	PUSH2	0020	 	 
- stack 2: 0x620
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0x20
3552	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x620
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0xFFFFC000
3553	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x620
- stack 0: 0xFFFFBBCC
3554	 A7	PUSH2	0020	 	 
- stack 2: 0x620
- stack 1: 0xFFFFBBCC
- stack 0: 0x20
3555	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x620
3556	 AB	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3557	 AD	ADD		 	 
- stack 0: 0x624
3558	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3559	 AF	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x41D000001DE02AC0535000005350000042C0004047E0004054CFFFC0210FBCC
3560	 B0	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x41D000001DE02AC0535000005350000042C0004047E0004054CFFFC0210FBCC
- stack 0: 0xF0
3561	 B2	SHR		 	 
- stack 1: 0x624
- stack 0: 0x41D
3562	 B3	JUMP		 	 
- stack 0: 0x624
3563	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x624
3564	 41E	DUP1		 	 
- stack 1: 0x624
- stack 0: 0x624
3565	 41F	PUSH2	0040	 	 
- stack 2: 0x624
- stack 1: 0x624
- stack 0: 0x40
3566	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x624
3567	 423	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3568	 425	ADD		 	 
- stack 0: 0x628
3569	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3570	 427	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x1DE02AC0535000005350000042C0004047E0004054CFFFC0210FBCC01890244
3571	 428	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x1DE02AC0535000005350000042C0004047E0004054CFFFC0210FBCC01890244
- stack 0: 0xF0
3572	 42A	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1DE
3573	 42B	JUMP		 	 
- stack 0: 0x628
3574	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x628
3575	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3576	 1E0	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x1DE02AC0535000005350000042C0004047E0004054CFFFC0210FBCC01890244
3577	 1E1	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x1DE02AC0535000005350000042C0004047E0004054CFFFC0210FBCC01890244
- stack 0: 0xE0
3578	 1E3	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1DE02AC
3579	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x1DE02AC
- stack 0: 0xFFFF
3580	 1E7	AND		 	 
- stack 1: 0x628
- stack 0: 0x2AC
3581	 1E8	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x2AC
- stack 0: 0x1
3582	 1EA	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x2AC
3583	 1EB	PUSH2	0040	 	 
- stack 2: 0x628
- stack 1: 0x2AC
- stack 0: 0x40
3584	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x628
- stack 1: 0x2AC
- stack 0: 0x624
3585	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x628
- stack 0: 0x8D0
3586	 1F0	PUSH2	0040	 	 
- stack 2: 0x628
- stack 1: 0x8D0
- stack 0: 0x40
3587	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x628
3588	 1F4	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3589	 1F6	ADD		 	 
- stack 0: 0x62C
3590	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3591	 1F8	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x535000005350000042C0004047E0004054CFFFC0210FBCC0189024403890001
3592	 1F9	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x535000005350000042C0004047E0004054CFFFC0210FBCC0189024403890001
- stack 0: 0xF0
3593	 1FB	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x535
3594	 1FC	JUMP		 	 
- stack 0: 0x62C
3595	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x62C
3596	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3597	 537	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x535000005350000042C0004047E0004054CFFFC0210FBCC0189024403890001
3598	 538	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x535000005350000042C0004047E0004054CFFFC0210FBCC0189024403890001
- stack 0: 0xE0
3599	 53A	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x5350000
3600	 53B	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x5350000
- stack 0: 0xFFFF
3601	 53E	AND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3602	 53F	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x1
3603	 541	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3604	 542	POP		 	 
- stack 0: 0x62C
3605	 543	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3606	 545	ADD		 	 
- stack 0: 0x630
3607	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3608	 547	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x5350000042C0004047E0004054CFFFC0210FBCC018902440389000104C60002
3609	 548	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x5350000042C0004047E0004054CFFFC0210FBCC018902440389000104C60002
- stack 0: 0xF0
3610	 54A	SHR		 	 
- stack 1: 0x630
- stack 0: 0x535
3611	 54B	JUMP		 	 
- stack 0: 0x630
3612	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x630
3613	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3614	 537	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x5350000042C0004047E0004054CFFFC0210FBCC018902440389000104C60002
3615	 538	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x5350000042C0004047E0004054CFFFC0210FBCC018902440389000104C60002
- stack 0: 0xE0
3616	 53A	SHR		 	 
- stack 1: 0x630
- stack 0: 0x5350000
3617	 53B	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x5350000
- stack 0: 0xFFFF
3618	 53E	AND		 	 
- stack 1: 0x630
- stack 0: 0x0
3619	 53F	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x1
3620	 541	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x0
3621	 542	POP		 	 
- stack 0: 0x630
3622	 543	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3623	 545	ADD		 	 
- stack 0: 0x634
3624	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3625	 547	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x42C0004047E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC
3626	 548	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x42C0004047E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC
- stack 0: 0xF0
3627	 54A	SHR		 	 
- stack 1: 0x634
- stack 0: 0x42C
3628	 54B	JUMP		 	 
- stack 0: 0x634
3629	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x634
3630	 42D	PUSH2	0040	 	 
- stack 1: 0x634
- stack 0: 0x40
3631	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x634
- stack 0: 0x8D0
3632	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x634
- stack 1: 0x8D0
- stack 0: 0x634
3633	 432	MLOAD		 	 
- stack 2: 0x634
- stack 1: 0x8D0
- stack 0: 0x42C0004047E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC
3634	 433	PUSH1	E0	 	 
- stack 3: 0x634
- stack 2: 0x8D0
- stack 1: 0x42C0004047E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC
- stack 0: 0xE0
3635	 435	SHR		 	 
- stack 2: 0x634
- stack 1: 0x8D0
- stack 0: 0x42C0004
3636	 436	PUSH2	FFFF	 	 
- stack 3: 0x634
- stack 2: 0x8D0
- stack 1: 0x42C0004
- stack 0: 0xFFFF
3637	 439	AND		 	 
- stack 2: 0x634
- stack 1: 0x8D0
- stack 0: 0x4
3638	 43A	PUSH1	01	 	 
- stack 3: 0x634
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
3639	 43C	SIGNEXTEND		 	 
- stack 2: 0x634
- stack 1: 0x8D0
- stack 0: 0x4
3640	 43D	ADD		 	 
- stack 1: 0x634
- stack 0: 0x8D4
3641	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x634
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
3642	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x634
- stack 0: 0x8D4
3643	 444	PUSH1	02	 	 
- stack 2: 0x634
- stack 1: 0x8D4
- stack 0: 0x2
3644	 446	XOR		 	 
- stack 1: 0x634
- stack 0: 0x8D6
3645	 447	DUP1		 	 
- stack 2: 0x634
- stack 1: 0x8D6
- stack 0: 0x8D6
3646	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x634
- stack 1: 0x8D6
- stack 0: 0xBBCCAA0000AAA00A0AA030985678000000000000000000000000000000000000
3647	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x634
- stack 2: 0x8D6
- stack 1: 0xBBCCAA0000AAA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3648	 46A	AND		 	 
- stack 2: 0x634
- stack 1: 0x8D6
- stack 0: 0xAA0000AAA00A0AA030985678000000000000000000000000000000000000
3649	 46B	PUSH2	0020	 	 
- stack 3: 0x634
- stack 2: 0x8D6
- stack 1: 0xAA0000AAA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0x20
3650	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x634
- stack 2: 0x8D6
- stack 1: 0xAA0000AAA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0xFFFFBBCC
3651	 46F	PUSH1	F0	 	 
- stack 4: 0x634
- stack 3: 0x8D6
- stack 2: 0xAA0000AAA00A0AA030985678000000000000000000000000000000000000
- stack 1: 0xFFFFBBCC
- stack 0: 0xF0
3652	 471	SHL		 	 
- stack 3: 0x634
- stack 2: 0x8D6
- stack 1: 0xAA0000AAA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0xBBCC000000000000000000000000000000000000000000000000000000000000
3653	 472	ADD		 	 
- stack 2: 0x634
- stack 1: 0x8D6
- stack 0: 0xBBCCAA0000AAA00A0AA030985678000000000000000000000000000000000000
3654	 473	SWAP1		 	 
- stack 2: 0x634
- stack 1: 0xBBCCAA0000AAA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0x8D6
3655	 474	MSTORE		 	 
- stack 0: 0x634
3656	 475	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3657	 477	ADD		 	 
- stack 0: 0x638
3658	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3659	 479	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x47E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC016F000F
3660	 47A	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x47E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC016F000F
- stack 0: 0xF0
3661	 47C	SHR		 	 
- stack 1: 0x638
- stack 0: 0x47E
3662	 47D	JUMP		 	 
- stack 0: 0x638
3663	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x638
3664	 47F	PUSH2	0040	 	 
- stack 1: 0x638
- stack 0: 0x40
3665	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x638
- stack 0: 0x8D0
3666	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x638
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
3667	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x638
- stack 0: 0x8D0
3668	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x638
- stack 1: 0x8D0
- stack 0: 0x638
3669	 48A	MLOAD		 	 
- stack 2: 0x638
- stack 1: 0x8D0
- stack 0: 0x47E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC016F000F
3670	 48B	PUSH1	E0	 	 
- stack 3: 0x638
- stack 2: 0x8D0
- stack 1: 0x47E0004054CFFFC0210FBCC018902440389000104C6000204E0FFCC016F000F
- stack 0: 0xE0
3671	 48D	SHR		 	 
- stack 2: 0x638
- stack 1: 0x8D0
- stack 0: 0x47E0004
3672	 48E	PUSH2	FFFF	 	 
- stack 3: 0x638
- stack 2: 0x8D0
- stack 1: 0x47E0004
- stack 0: 0xFFFF
3673	 491	AND		 	 
- stack 2: 0x638
- stack 1: 0x8D0
- stack 0: 0x4
3674	 492	PUSH1	01	 	 
- stack 3: 0x638
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
3675	 494	SIGNEXTEND		 	 
- stack 2: 0x638
- stack 1: 0x8D0
- stack 0: 0x4
3676	 495	ADD		 	 
- stack 1: 0x638
- stack 0: 0x8D4
3677	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x638
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
3678	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x638
- stack 0: 0x8D4
3679	 49C	PUSH1	02	 	 
- stack 2: 0x638
- stack 1: 0x8D4
- stack 0: 0x2
3680	 49E	XOR		 	 
- stack 1: 0x638
- stack 0: 0x8D6
3681	 49F	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xBBCCAA0000AAA00A0AA030985678000000000000000000000000000000000000
3682	 4A0	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0xBBCCAA0000AAA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0xF0
3683	 4A2	SHR		 	 
- stack 1: 0x638
- stack 0: 0xBBCC
3684	 4A3	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0xBBCC
- stack 0: 0x1
3685	 4A5	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBCC
3686	 4A6	PUSH2	0060	 	 
- stack 2: 0x638
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBCC
- stack 0: 0x60
3687	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x638
3688	 4AA	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3689	 4AC	ADD		 	 
- stack 0: 0x63C
3690	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3691	 4AE	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x54CFFFC0210FBCC018902440389000104C6000204E0FFCC016F000F03F00000
3692	 4AF	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x54CFFFC0210FBCC018902440389000104C6000204E0FFCC016F000F03F00000
- stack 0: 0xF0
3693	 4B1	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x54C
3694	 4B2	JUMP		 	 
- stack 0: 0x63C
3695	 54C	JUMPDEST		 ;; __riscvimpl_LUI_ffffceb7	  ;; # instr: lui t4,0xffffc(ignore imm)
- stack 0: 0x63C
3696	 54D	PUSH4	ffffc000	 	 
- stack 1: 0x63C
- stack 0: 0xFFFFC000
3697	 552	PUSH2	03A0	 	 
- stack 2: 0x63C
- stack 1: 0xFFFFC000
- stack 0: 0x3A0
3698	 555	MSTORE		 	  ;; # store to x29
- stack 0: 0x63C
3699	 556	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3700	 558	ADD		 	 
- stack 0: 0x640
3701	 559	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3702	 55A	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x210FBCC018902440389000104C6000204E0FFCC016F000F03F00000055FFFFB
3703	 55B	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x210FBCC018902440389000104C6000204E0FFCC016F000F03F00000055FFFFB
- stack 0: 0xF0
3704	 55D	SHR		 	 
- stack 1: 0x640
- stack 0: 0x210
3705	 55E	JUMP		 	 
- stack 0: 0x640
3706	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x640
3707	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3708	 212	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x210FBCC018902440389000104C6000204E0FFCC016F000F03F00000055FFFFB
3709	 213	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x210FBCC018902440389000104C6000204E0FFCC016F000F03F00000055FFFFB
- stack 0: 0xE0
3710	 215	SHR		 	 
- stack 1: 0x640
- stack 0: 0x210FBCC
3711	 216	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x210FBCC
- stack 0: 0xFFFF
3712	 219	AND		 	 
- stack 1: 0x640
- stack 0: 0xFBCC
3713	 21A	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0xFBCC
- stack 0: 0x1
3714	 21C	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
3715	 21D	PUSH2	03A0	 	 
- stack 2: 0x640
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0x3A0
3716	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x640
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0xFFFFC000
3717	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x640
- stack 0: 0xFFFFBBCC
3718	 222	PUSH2	03A0	 	 
- stack 2: 0x640
- stack 1: 0xFFFFBBCC
- stack 0: 0x3A0
3719	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x640
3720	 226	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3721	 228	ADD		 	 
- stack 0: 0x644
3722	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3723	 22A	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x18902440389000104C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC
3724	 22B	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x18902440389000104C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC
- stack 0: 0xF0
3725	 22D	SHR		 	 
- stack 1: 0x644
- stack 0: 0x189
3726	 22E	JUMP		 	 
- stack 0: 0x644
3727	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x644
3728	 18A	PUSH2	0060	 	 
- stack 1: 0x644
- stack 0: 0x60
3729	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x644
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBCC
3730	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x644
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBCC
- stack 0: 0xFFFFFFFF
3731	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x644
- stack 0: 0xFFFFBBCC
3732	 194	PUSH2	03A0	 	 
- stack 2: 0x644
- stack 1: 0xFFFFBBCC
- stack 0: 0x3A0
3733	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x644
- stack 1: 0xFFFFBBCC
- stack 0: 0xFFFFBBCC
3734	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x644
- stack 2: 0xFFFFBBCC
- stack 1: 0xFFFFBBCC
- stack 0: 0xFFFFFFFF
3735	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x644
- stack 1: 0xFFFFBBCC
- stack 0: 0xFFFFBBCC
3736	 19E	SUB		 	 
- stack 1: 0x644
- stack 0: 0x0
3737	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x1A7
3738	 1A2	JUMPI		 	 
- stack 0: 0x644
3739	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x644
- stack 0: 0x1C1
3740	 1A6	JUMP		 	 
- stack 0: 0x644
3741	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x644
3742	 1C2	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3743	 1C4	ADD		 	 
- stack 0: 0x648
3744	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3745	 1C6	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x389000104C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000
3746	 1C7	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x389000104C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000
- stack 0: 0xF0
3747	 1C9	SHR		 	 
- stack 1: 0x648
- stack 0: 0x389
3748	 1CA	JUMP		 	 
- stack 0: 0x648
3749	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x648
3750	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3751	 38B	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x389000104C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000
3752	 38C	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x389000104C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000
- stack 0: 0xE0
3753	 38E	SHR		 	 
- stack 1: 0x648
- stack 0: 0x3890001
3754	 38F	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x3890001
- stack 0: 0xFFFF
3755	 392	AND		 	 
- stack 1: 0x648
- stack 0: 0x1
3756	 393	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x1
3757	 395	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x1
3758	 396	PUSH2	0080	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x80
3759	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x1
3760	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x648
- stack 0: 0x2
3761	 39B	PUSH2	0080	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x80
3762	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x648
3763	 39F	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3764	 3A1	ADD		 	 
- stack 0: 0x64C
3765	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3766	 3A3	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x4C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000041D0000
3767	 3A4	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x4C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000041D0000
- stack 0: 0xF0
3768	 3A6	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x4C6
3769	 3A7	JUMP		 	 
- stack 0: 0x64C
3770	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x64C
3771	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3772	 4C8	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x4C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000041D0000
3773	 4C9	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x4C6000204E0FFCC016F000F03F00000055FFFFB0095FBBC05350000041D0000
- stack 0: 0xE0
3774	 4CB	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x4C60002
3775	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x4C60002
- stack 0: 0xFFFF
3776	 4CF	AND		 	 
- stack 1: 0x64C
- stack 0: 0x2
3777	 4D0	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x1
3778	 4D2	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x2
3779	 4D3	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xA0
3780	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x64C
3781	 4D7	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3782	 4D9	ADD		 	 
- stack 0: 0x650
3783	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3784	 4DB	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x4E0FFCC016F000F03F00000055FFFFB0095FBBC05350000041D000001DE0268
3785	 4DC	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x4E0FFCC016F000F03F00000055FFFFB0095FBBC05350000041D000001DE0268
- stack 0: 0xF0
3786	 4DE	SHR		 	 
- stack 1: 0x650
- stack 0: 0x4E0
3787	 4DF	JUMP		 	 
- stack 0: 0x650
3788	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x650
3789	 4E1	PUSH2	0080	 	 
- stack 1: 0x650
- stack 0: 0x80
3790	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x650
- stack 0: 0x2
3791	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3792	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x650
- stack 0: 0x2
3793	 4EB	PUSH2	00A0	 	 
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0xA0
3794	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0x2
3795	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x650
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3796	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0x2
3797	 4F5	SUB		 	 
- stack 1: 0x650
- stack 0: 0x0
3798	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0x4FE
3799	 4F9	JUMPI		 	 
- stack 0: 0x650
3800	 4FA	PUSH2	0518	 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 1: 0x650
- stack 0: 0x518
3801	 4FD	JUMP		 	 
- stack 0: 0x650
3802	 518	JUMPDEST		 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x650
3803	 519	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3804	 51B	ADD		 	 
- stack 0: 0x654
3805	 51C	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3806	 51D	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x16F000F03F00000055FFFFB0095FBBC05350000041D000001DE0268042C0006
3807	 51E	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x16F000F03F00000055FFFFB0095FBBC05350000041D000001DE0268042C0006
- stack 0: 0xF0
3808	 520	SHR		 	 
- stack 1: 0x654
- stack 0: 0x16F
3809	 521	JUMP		 	 
- stack 0: 0x654
3810	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x654
3811	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3812	 171	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x16F000F03F00000055FFFFB0095FBBC05350000041D000001DE0268042C0006
3813	 172	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x16F000F03F00000055FFFFB0095FBBC05350000041D000001DE0268042C0006
- stack 0: 0xE0
3814	 174	SHR		 	 
- stack 1: 0x654
- stack 0: 0x16F000F
3815	 175	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x16F000F
- stack 0: 0xFFFF
3816	 178	AND		 	 
- stack 1: 0x654
- stack 0: 0xF
3817	 179	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0xF
- stack 0: 0x1
3818	 17B	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0xF
3819	 17C	PUSH2	0380	 	 
- stack 2: 0x654
- stack 1: 0xF
- stack 0: 0x380
3820	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x654
3821	 180	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3822	 182	ADD		 	 
- stack 0: 0x658
3823	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3824	 184	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x3F00000055FFFFB0095FBBC05350000041D000001DE0268042C0006047E0006
3825	 185	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x3F00000055FFFFB0095FBBC05350000041D000001DE0268042C0006047E0006
- stack 0: 0xF0
3826	 187	SHR		 	 
- stack 1: 0x658
- stack 0: 0x3F0
3827	 188	JUMP		 	 
- stack 0: 0x658
3828	 3F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x658
3829	 3F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3830	 3F2	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x3F00000055FFFFB0095FBBC05350000041D000001DE0268042C0006047E0006
3831	 3F3	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x3F00000055FFFFB0095FBBC05350000041D000001DE0268042C0006047E0006
- stack 0: 0xE0
3832	 3F5	SHR		 	 
- stack 1: 0x658
- stack 0: 0x3F00000
3833	 3F6	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x3F00000
- stack 0: 0xFFFF
3834	 3F9	AND		 	 
- stack 1: 0x658
- stack 0: 0x0
3835	 3FA	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x1
3836	 3FC	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x0
3837	 3FD	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x80
3838	 400	MSTORE		 	  ;; # store to x4
- stack 0: 0x658
3839	 401	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3840	 403	ADD		 	 
- stack 0: 0x65C
3841	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3842	 405	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x55FFFFB0095FBBC05350000041D000001DE0268042C0006047E000601FDFFFB
3843	 406	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x55FFFFB0095FBBC05350000041D000001DE0268042C0006047E000601FDFFFB
- stack 0: 0xF0
3844	 408	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x55F
3845	 409	JUMP		 	 
- stack 0: 0x65C
3846	 55F	JUMPDEST		 ;; __riscvimpl_LUI_ffffb0b7	  ;; # instr: lui ra,0xffffb(ignore imm)
- stack 0: 0x65C
3847	 560	PUSH4	ffffb000	 	 
- stack 1: 0x65C
- stack 0: 0xFFFFB000
3848	 565	PUSH2	0020	 	 
- stack 2: 0x65C
- stack 1: 0xFFFFB000
- stack 0: 0x20
3849	 568	MSTORE		 	  ;; # store to x1
- stack 0: 0x65C
3850	 569	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3851	 56B	ADD		 	 
- stack 0: 0x660
3852	 56C	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3853	 56D	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x95FBBC05350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC
3854	 56E	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x95FBBC05350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC
- stack 0: 0xF0
3855	 570	SHR		 	 
- stack 1: 0x660
- stack 0: 0x95
3856	 571	JUMP		 	 
- stack 0: 0x660
3857	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x660
3858	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
3859	 97	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x95FBBC05350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC
3860	 98	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x95FBBC05350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC
- stack 0: 0xE0
3861	 9A	SHR		 	 
- stack 1: 0x660
- stack 0: 0x95FBBC
3862	 9B	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x95FBBC
- stack 0: 0xFFFF
3863	 9E	AND		 	 
- stack 1: 0x660
- stack 0: 0xFBBC
3864	 9F	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0xFBBC
- stack 0: 0x1
3865	 A1	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
3866	 A2	PUSH2	0020	 	 
- stack 2: 0x660
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0x20
3867	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x660
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0xFFFFB000
3868	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x660
- stack 0: 0xFFFFABBC
3869	 A7	PUSH2	0020	 	 
- stack 2: 0x660
- stack 1: 0xFFFFABBC
- stack 0: 0x20
3870	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x660
3871	 AB	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3872	 AD	ADD		 	 
- stack 0: 0x664
3873	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3874	 AF	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x5350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC01890208
3875	 B0	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x5350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC01890208
- stack 0: 0xF0
3876	 B2	SHR		 	 
- stack 1: 0x664
- stack 0: 0x535
3877	 B3	JUMP		 	 
- stack 0: 0x664
3878	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x664
3879	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
3880	 537	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x5350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC01890208
3881	 538	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x5350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC01890208
- stack 0: 0xE0
3882	 53A	SHR		 	 
- stack 1: 0x664
- stack 0: 0x5350000
3883	 53B	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x5350000
- stack 0: 0xFFFF
3884	 53E	AND		 	 
- stack 1: 0x664
- stack 0: 0x0
3885	 53F	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x1
3886	 541	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x0
3887	 542	POP		 	 
- stack 0: 0x664
3888	 543	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3889	 545	ADD		 	 
- stack 0: 0x668
3890	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3891	 547	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x41D000001DE0268042C0006047E000601FDFFFB0210FBBC0189020803890001
3892	 548	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x41D000001DE0268042C0006047E000601FDFFFB0210FBBC0189020803890001
- stack 0: 0xF0
3893	 54A	SHR		 	 
- stack 1: 0x668
- stack 0: 0x41D
3894	 54B	JUMP		 	 
- stack 0: 0x668
3895	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x668
3896	 41E	DUP1		 	 
- stack 1: 0x668
- stack 0: 0x668
3897	 41F	PUSH2	0040	 	 
- stack 2: 0x668
- stack 1: 0x668
- stack 0: 0x40
3898	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x668
3899	 423	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3900	 425	ADD		 	 
- stack 0: 0x66C
3901	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3902	 427	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x1DE0268042C0006047E000601FDFFFB0210FBBC018902080389000104C60002
3903	 428	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x1DE0268042C0006047E000601FDFFFB0210FBBC018902080389000104C60002
- stack 0: 0xF0
3904	 42A	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x1DE
3905	 42B	JUMP		 	 
- stack 0: 0x66C
3906	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x66C
3907	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
3908	 1E0	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x1DE0268042C0006047E000601FDFFFB0210FBBC018902080389000104C60002
3909	 1E1	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x1DE0268042C0006047E000601FDFFFB0210FBBC018902080389000104C60002
- stack 0: 0xE0
3910	 1E3	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x1DE0268
3911	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x1DE0268
- stack 0: 0xFFFF
3912	 1E7	AND		 	 
- stack 1: 0x66C
- stack 0: 0x268
3913	 1E8	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x268
- stack 0: 0x1
3914	 1EA	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x268
3915	 1EB	PUSH2	0040	 	 
- stack 2: 0x66C
- stack 1: 0x268
- stack 0: 0x40
3916	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x66C
- stack 1: 0x268
- stack 0: 0x668
3917	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x66C
- stack 0: 0x8D0
3918	 1F0	PUSH2	0040	 	 
- stack 2: 0x66C
- stack 1: 0x8D0
- stack 0: 0x40
3919	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x66C
3920	 1F4	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3921	 1F6	ADD		 	 
- stack 0: 0x670
3922	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3923	 1F8	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x42C0006047E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0
3924	 1F9	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x42C0006047E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0
- stack 0: 0xF0
3925	 1FB	SHR		 	 
- stack 1: 0x670
- stack 0: 0x42C
3926	 1FC	JUMP		 	 
- stack 0: 0x670
3927	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x670
3928	 42D	PUSH2	0040	 	 
- stack 1: 0x670
- stack 0: 0x40
3929	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x670
- stack 0: 0x8D0
3930	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x670
- stack 1: 0x8D0
- stack 0: 0x670
3931	 432	MLOAD		 	 
- stack 2: 0x670
- stack 1: 0x8D0
- stack 0: 0x42C0006047E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0
3932	 433	PUSH1	E0	 	 
- stack 3: 0x670
- stack 2: 0x8D0
- stack 1: 0x42C0006047E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0
- stack 0: 0xE0
3933	 435	SHR		 	 
- stack 2: 0x670
- stack 1: 0x8D0
- stack 0: 0x42C0006
3934	 436	PUSH2	FFFF	 	 
- stack 3: 0x670
- stack 2: 0x8D0
- stack 1: 0x42C0006
- stack 0: 0xFFFF
3935	 439	AND		 	 
- stack 2: 0x670
- stack 1: 0x8D0
- stack 0: 0x6
3936	 43A	PUSH1	01	 	 
- stack 3: 0x670
- stack 2: 0x8D0
- stack 1: 0x6
- stack 0: 0x1
3937	 43C	SIGNEXTEND		 	 
- stack 2: 0x670
- stack 1: 0x8D0
- stack 0: 0x6
3938	 43D	ADD		 	 
- stack 1: 0x670
- stack 0: 0x8D6
3939	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x670
- stack 1: 0x8D6
- stack 0: 0xFFFFFFFF
3940	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x670
- stack 0: 0x8D6
3941	 444	PUSH1	02	 	 
- stack 2: 0x670
- stack 1: 0x8D6
- stack 0: 0x2
3942	 446	XOR		 	 
- stack 1: 0x670
- stack 0: 0x8D4
3943	 447	DUP1		 	 
- stack 2: 0x670
- stack 1: 0x8D4
- stack 0: 0x8D4
3944	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x670
- stack 1: 0x8D4
- stack 0: 0xA00ABBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
3945	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x670
- stack 2: 0x8D4
- stack 1: 0xA00ABBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3946	 46A	AND		 	 
- stack 2: 0x670
- stack 1: 0x8D4
- stack 0: 0xBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
3947	 46B	PUSH2	0020	 	 
- stack 3: 0x670
- stack 2: 0x8D4
- stack 1: 0xBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
- stack 0: 0x20
3948	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x670
- stack 2: 0x8D4
- stack 1: 0xBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
- stack 0: 0xFFFFABBC
3949	 46F	PUSH1	F0	 	 
- stack 4: 0x670
- stack 3: 0x8D4
- stack 2: 0xBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
- stack 1: 0xFFFFABBC
- stack 0: 0xF0
3950	 471	SHL		 	 
- stack 3: 0x670
- stack 2: 0x8D4
- stack 1: 0xBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
- stack 0: 0xABBC000000000000000000000000000000000000000000000000000000000000
3951	 472	ADD		 	 
- stack 2: 0x670
- stack 1: 0x8D4
- stack 0: 0xABBCBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
3952	 473	SWAP1		 	 
- stack 2: 0x670
- stack 1: 0xABBCBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
- stack 0: 0x8D4
3953	 474	MSTORE		 	 
- stack 0: 0x670
3954	 475	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3955	 477	ADD		 	 
- stack 0: 0x674
3956	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3957	 479	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x47E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0016F0010
3958	 47A	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x47E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0016F0010
- stack 0: 0xF0
3959	 47C	SHR		 	 
- stack 1: 0x674
- stack 0: 0x47E
3960	 47D	JUMP		 	 
- stack 0: 0x674
3961	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x674
3962	 47F	PUSH2	0040	 	 
- stack 1: 0x674
- stack 0: 0x40
3963	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x674
- stack 0: 0x8D0
3964	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
3965	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x8D0
3966	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x674
- stack 1: 0x8D0
- stack 0: 0x674
3967	 48A	MLOAD		 	 
- stack 2: 0x674
- stack 1: 0x8D0
- stack 0: 0x47E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0016F0010
3968	 48B	PUSH1	E0	 	 
- stack 3: 0x674
- stack 2: 0x8D0
- stack 1: 0x47E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0016F0010
- stack 0: 0xE0
3969	 48D	SHR		 	 
- stack 2: 0x674
- stack 1: 0x8D0
- stack 0: 0x47E0006
3970	 48E	PUSH2	FFFF	 	 
- stack 3: 0x674
- stack 2: 0x8D0
- stack 1: 0x47E0006
- stack 0: 0xFFFF
3971	 491	AND		 	 
- stack 2: 0x674
- stack 1: 0x8D0
- stack 0: 0x6
3972	 492	PUSH1	01	 	 
- stack 3: 0x674
- stack 2: 0x8D0
- stack 1: 0x6
- stack 0: 0x1
3973	 494	SIGNEXTEND		 	 
- stack 2: 0x674
- stack 1: 0x8D0
- stack 0: 0x6
3974	 495	ADD		 	 
- stack 1: 0x674
- stack 0: 0x8D6
3975	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x8D6
- stack 0: 0xFFFFFFFF
3976	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x8D6
3977	 49C	PUSH1	02	 	 
- stack 2: 0x674
- stack 1: 0x8D6
- stack 0: 0x2
3978	 49E	XOR		 	 
- stack 1: 0x674
- stack 0: 0x8D4
3979	 49F	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xABBCBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
3980	 4A0	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0xABBCBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
- stack 0: 0xF0
3981	 4A2	SHR		 	 
- stack 1: 0x674
- stack 0: 0xABBC
3982	 4A3	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0xABBC
- stack 0: 0x1
3983	 4A5	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABBC
3984	 4A6	PUSH2	0060	 	 
- stack 2: 0x674
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABBC
- stack 0: 0x60
3985	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x674
3986	 4AA	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3987	 4AC	ADD		 	 
- stack 0: 0x678
3988	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3989	 4AE	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x1FDFFFB0210FBBC018902080389000104C6000204E0FFD0016F001003F00000
3990	 4AF	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x1FDFFFB0210FBBC018902080389000104C6000204E0FFD0016F001003F00000
- stack 0: 0xF0
3991	 4B1	SHR		 	 
- stack 1: 0x678
- stack 0: 0x1FD
3992	 4B2	JUMP		 	 
- stack 0: 0x678
3993	 1FD	JUMPDEST		 ;; __riscvimpl_LUI_ffffbeb7	  ;; # instr: lui t4,0xffffb(ignore imm)
- stack 0: 0x678
3994	 1FE	PUSH4	ffffb000	 	 
- stack 1: 0x678
- stack 0: 0xFFFFB000
3995	 203	PUSH2	03A0	 	 
- stack 2: 0x678
- stack 1: 0xFFFFB000
- stack 0: 0x3A0
3996	 206	MSTORE		 	  ;; # store to x29
- stack 0: 0x678
3997	 207	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3998	 209	ADD		 	 
- stack 0: 0x67C
3999	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
4000	 20B	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x210FBBC018902080389000104C6000204E0FFD0016F001003F00000055FFFFB
4001	 20C	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x210FBBC018902080389000104C6000204E0FFD0016F001003F00000055FFFFB
- stack 0: 0xF0
4002	 20E	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x210
4003	 20F	JUMP		 	 
- stack 0: 0x67C
4004	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x67C
4005	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
4006	 212	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x210FBBC018902080389000104C6000204E0FFD0016F001003F00000055FFFFB
4007	 213	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x210FBBC018902080389000104C6000204E0FFD0016F001003F00000055FFFFB
- stack 0: 0xE0
4008	 215	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x210FBBC
4009	 216	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x210FBBC
- stack 0: 0xFFFF
4010	 219	AND		 	 
- stack 1: 0x67C
- stack 0: 0xFBBC
4011	 21A	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0xFBBC
- stack 0: 0x1
4012	 21C	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
4013	 21D	PUSH2	03A0	 	 
- stack 2: 0x67C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0x3A0
4014	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x67C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0xFFFFB000
4015	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x67C
- stack 0: 0xFFFFABBC
4016	 222	PUSH2	03A0	 	 
- stack 2: 0x67C
- stack 1: 0xFFFFABBC
- stack 0: 0x3A0
4017	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x67C
4018	 226	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4019	 228	ADD		 	 
- stack 0: 0x680
4020	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4021	 22A	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x18902080389000104C6000204E0FFD0016F001003F00000055FFFFB0095FABB
4022	 22B	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x18902080389000104C6000204E0FFD0016F001003F00000055FFFFB0095FABB
- stack 0: 0xF0
4023	 22D	SHR		 	 
- stack 1: 0x680
- stack 0: 0x189
4024	 22E	JUMP		 	 
- stack 0: 0x680
4025	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x680
4026	 18A	PUSH2	0060	 	 
- stack 1: 0x680
- stack 0: 0x60
4027	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x680
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABBC
4028	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x680
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABBC
- stack 0: 0xFFFFFFFF
4029	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x680
- stack 0: 0xFFFFABBC
4030	 194	PUSH2	03A0	 	 
- stack 2: 0x680
- stack 1: 0xFFFFABBC
- stack 0: 0x3A0
4031	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x680
- stack 1: 0xFFFFABBC
- stack 0: 0xFFFFABBC
4032	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x680
- stack 2: 0xFFFFABBC
- stack 1: 0xFFFFABBC
- stack 0: 0xFFFFFFFF
4033	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x680
- stack 1: 0xFFFFABBC
- stack 0: 0xFFFFABBC
4034	 19E	SUB		 	 
- stack 1: 0x680
- stack 0: 0x0
4035	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x1A7
4036	 1A2	JUMPI		 	 
- stack 0: 0x680
4037	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x680
- stack 0: 0x1C1
4038	 1A6	JUMP		 	 
- stack 0: 0x680
4039	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x680
4040	 1C2	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4041	 1C4	ADD		 	 
- stack 0: 0x684
4042	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4043	 1C6	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x389000104C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000
4044	 1C7	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x389000104C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000
- stack 0: 0xF0
4045	 1C9	SHR		 	 
- stack 1: 0x684
- stack 0: 0x389
4046	 1CA	JUMP		 	 
- stack 0: 0x684
4047	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x684
4048	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
4049	 38B	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x389000104C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000
4050	 38C	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x389000104C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000
- stack 0: 0xE0
4051	 38E	SHR		 	 
- stack 1: 0x684
- stack 0: 0x3890001
4052	 38F	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x3890001
- stack 0: 0xFFFF
4053	 392	AND		 	 
- stack 1: 0x684
- stack 0: 0x1
4054	 393	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0x1
4055	 395	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x1
4056	 396	PUSH2	0080	 	 
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0x80
4057	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0x0
4058	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x684
- stack 0: 0x1
4059	 39B	PUSH2	0080	 	 
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0x80
4060	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x684
4061	 39F	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4062	 3A1	ADD		 	 
- stack 0: 0x688
4063	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4064	 3A3	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x4C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000041D0000
4065	 3A4	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x4C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000041D0000
- stack 0: 0xF0
4066	 3A6	SHR		 	 
- stack 1: 0x688
- stack 0: 0x4C6
4067	 3A7	JUMP		 	 
- stack 0: 0x688
4068	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x688
4069	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4070	 4C8	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x4C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000041D0000
4071	 4C9	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x4C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000041D0000
- stack 0: 0xE0
4072	 4CB	SHR		 	 
- stack 1: 0x688
- stack 0: 0x4C60002
4073	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x4C60002
- stack 0: 0xFFFF
4074	 4CF	AND		 	 
- stack 1: 0x688
- stack 0: 0x2
4075	 4D0	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0x1
4076	 4D2	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x2
4077	 4D3	PUSH2	00A0	 	 
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0xA0
4078	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x688
4079	 4D7	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4080	 4D9	ADD		 	 
- stack 0: 0x68C
4081	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4082	 4DB	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x4E0FFD0016F001003F00000055FFFFB0095FABB05350000041D000001DE022C
4083	 4DC	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x4E0FFD0016F001003F00000055FFFFB0095FABB05350000041D000001DE022C
- stack 0: 0xF0
4084	 4DE	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x4E0
4085	 4DF	JUMP		 	 
- stack 0: 0x68C
4086	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x68C
4087	 4E1	PUSH2	0080	 	 
- stack 1: 0x68C
- stack 0: 0x80
4088	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x68C
- stack 0: 0x1
4089	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x68C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4090	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x68C
- stack 0: 0x1
4091	 4EB	PUSH2	00A0	 	 
- stack 2: 0x68C
- stack 1: 0x1
- stack 0: 0xA0
4092	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x68C
- stack 1: 0x1
- stack 0: 0x2
4093	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x68C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4094	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x68C
- stack 1: 0x1
- stack 0: 0x2
4095	 4F5	SUB		 	 
- stack 1: 0x68C
- stack 0: 0x1
4096	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x68C
- stack 1: 0x1
- stack 0: 0x4FE
4097	 4F9	JUMPI		 	 
- stack 0: 0x68C
4098	 4FE	JUMPDEST		 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x68C
4099	 4FF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
4100	 500	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x4E0FFD0016F001003F00000055FFFFB0095FABB05350000041D000001DE022C
4101	 501	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x4E0FFD0016F001003F00000055FFFFB0095FABB05350000041D000001DE022C
- stack 0: 0xE0
4102	 503	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x4E0FFD0
4103	 504	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x4E0FFD0
- stack 0: 0xFFFF
4104	 507	AND		 	 
- stack 1: 0x68C
- stack 0: 0xFFD0
4105	 508	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0xFFD0
- stack 0: 0x1
4106	 50A	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD0
4107	 50B	ADD		 	 
- stack 0: 0x65C
4108	 50C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x65C
- stack 0: 0xFFFFFFFF
4109	 511	AND		 	  ;; # mask to 32 bits
- stack 0: 0x65C
4110	 512	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
4111	 513	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x55FFFFB0095FBBC05350000041D000001DE0268042C0006047E000601FDFFFB
4112	 514	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x55FFFFB0095FBBC05350000041D000001DE0268042C0006047E000601FDFFFB
- stack 0: 0xF0
4113	 516	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x55F
4114	 517	JUMP		 	 
- stack 0: 0x65C
4115	 55F	JUMPDEST		 ;; __riscvimpl_LUI_ffffb0b7	  ;; # instr: lui ra,0xffffb(ignore imm)
- stack 0: 0x65C
4116	 560	PUSH4	ffffb000	 	 
- stack 1: 0x65C
- stack 0: 0xFFFFB000
4117	 565	PUSH2	0020	 	 
- stack 2: 0x65C
- stack 1: 0xFFFFB000
- stack 0: 0x20
4118	 568	MSTORE		 	  ;; # store to x1
- stack 0: 0x65C
4119	 569	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
4120	 56B	ADD		 	 
- stack 0: 0x660
4121	 56C	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
4122	 56D	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x95FBBC05350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC
4123	 56E	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x95FBBC05350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC
- stack 0: 0xF0
4124	 570	SHR		 	 
- stack 1: 0x660
- stack 0: 0x95
4125	 571	JUMP		 	 
- stack 0: 0x660
4126	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x660
4127	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
4128	 97	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x95FBBC05350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC
4129	 98	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x95FBBC05350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC
- stack 0: 0xE0
4130	 9A	SHR		 	 
- stack 1: 0x660
- stack 0: 0x95FBBC
4131	 9B	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x95FBBC
- stack 0: 0xFFFF
4132	 9E	AND		 	 
- stack 1: 0x660
- stack 0: 0xFBBC
4133	 9F	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0xFBBC
- stack 0: 0x1
4134	 A1	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
4135	 A2	PUSH2	0020	 	 
- stack 2: 0x660
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0x20
4136	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x660
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0xFFFFB000
4137	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x660
- stack 0: 0xFFFFABBC
4138	 A7	PUSH2	0020	 	 
- stack 2: 0x660
- stack 1: 0xFFFFABBC
- stack 0: 0x20
4139	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x660
4140	 AB	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
4141	 AD	ADD		 	 
- stack 0: 0x664
4142	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
4143	 AF	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x5350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC01890208
4144	 B0	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x5350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC01890208
- stack 0: 0xF0
4145	 B2	SHR		 	 
- stack 1: 0x664
- stack 0: 0x535
4146	 B3	JUMP		 	 
- stack 0: 0x664
4147	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x664
4148	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
4149	 537	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x5350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC01890208
4150	 538	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x5350000041D000001DE0268042C0006047E000601FDFFFB0210FBBC01890208
- stack 0: 0xE0
4151	 53A	SHR		 	 
- stack 1: 0x664
- stack 0: 0x5350000
4152	 53B	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x5350000
- stack 0: 0xFFFF
4153	 53E	AND		 	 
- stack 1: 0x664
- stack 0: 0x0
4154	 53F	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x1
4155	 541	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x0
4156	 542	POP		 	 
- stack 0: 0x664
4157	 543	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
4158	 545	ADD		 	 
- stack 0: 0x668
4159	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
4160	 547	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x41D000001DE0268042C0006047E000601FDFFFB0210FBBC0189020803890001
4161	 548	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x41D000001DE0268042C0006047E000601FDFFFB0210FBBC0189020803890001
- stack 0: 0xF0
4162	 54A	SHR		 	 
- stack 1: 0x668
- stack 0: 0x41D
4163	 54B	JUMP		 	 
- stack 0: 0x668
4164	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x668
4165	 41E	DUP1		 	 
- stack 1: 0x668
- stack 0: 0x668
4166	 41F	PUSH2	0040	 	 
- stack 2: 0x668
- stack 1: 0x668
- stack 0: 0x40
4167	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x668
4168	 423	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
4169	 425	ADD		 	 
- stack 0: 0x66C
4170	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4171	 427	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x1DE0268042C0006047E000601FDFFFB0210FBBC018902080389000104C60002
4172	 428	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x1DE0268042C0006047E000601FDFFFB0210FBBC018902080389000104C60002
- stack 0: 0xF0
4173	 42A	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x1DE
4174	 42B	JUMP		 	 
- stack 0: 0x66C
4175	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x66C
4176	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
4177	 1E0	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x1DE0268042C0006047E000601FDFFFB0210FBBC018902080389000104C60002
4178	 1E1	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x1DE0268042C0006047E000601FDFFFB0210FBBC018902080389000104C60002
- stack 0: 0xE0
4179	 1E3	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x1DE0268
4180	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x1DE0268
- stack 0: 0xFFFF
4181	 1E7	AND		 	 
- stack 1: 0x66C
- stack 0: 0x268
4182	 1E8	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x268
- stack 0: 0x1
4183	 1EA	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x268
4184	 1EB	PUSH2	0040	 	 
- stack 2: 0x66C
- stack 1: 0x268
- stack 0: 0x40
4185	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x66C
- stack 1: 0x268
- stack 0: 0x668
4186	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x66C
- stack 0: 0x8D0
4187	 1F0	PUSH2	0040	 	 
- stack 2: 0x66C
- stack 1: 0x8D0
- stack 0: 0x40
4188	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x66C
4189	 1F4	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4190	 1F6	ADD		 	 
- stack 0: 0x670
4191	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4192	 1F8	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x42C0006047E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0
4193	 1F9	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x42C0006047E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0
- stack 0: 0xF0
4194	 1FB	SHR		 	 
- stack 1: 0x670
- stack 0: 0x42C
4195	 1FC	JUMP		 	 
- stack 0: 0x670
4196	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x670
4197	 42D	PUSH2	0040	 	 
- stack 1: 0x670
- stack 0: 0x40
4198	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x670
- stack 0: 0x8D0
4199	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x670
- stack 1: 0x8D0
- stack 0: 0x670
4200	 432	MLOAD		 	 
- stack 2: 0x670
- stack 1: 0x8D0
- stack 0: 0x42C0006047E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0
4201	 433	PUSH1	E0	 	 
- stack 3: 0x670
- stack 2: 0x8D0
- stack 1: 0x42C0006047E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0
- stack 0: 0xE0
4202	 435	SHR		 	 
- stack 2: 0x670
- stack 1: 0x8D0
- stack 0: 0x42C0006
4203	 436	PUSH2	FFFF	 	 
- stack 3: 0x670
- stack 2: 0x8D0
- stack 1: 0x42C0006
- stack 0: 0xFFFF
4204	 439	AND		 	 
- stack 2: 0x670
- stack 1: 0x8D0
- stack 0: 0x6
4205	 43A	PUSH1	01	 	 
- stack 3: 0x670
- stack 2: 0x8D0
- stack 1: 0x6
- stack 0: 0x1
4206	 43C	SIGNEXTEND		 	 
- stack 2: 0x670
- stack 1: 0x8D0
- stack 0: 0x6
4207	 43D	ADD		 	 
- stack 1: 0x670
- stack 0: 0x8D6
4208	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x670
- stack 1: 0x8D6
- stack 0: 0xFFFFFFFF
4209	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x670
- stack 0: 0x8D6
4210	 444	PUSH1	02	 	 
- stack 2: 0x670
- stack 1: 0x8D6
- stack 0: 0x2
4211	 446	XOR		 	 
- stack 1: 0x670
- stack 0: 0x8D4
4212	 447	DUP1		 	 
- stack 2: 0x670
- stack 1: 0x8D4
- stack 0: 0x8D4
4213	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x670
- stack 1: 0x8D4
- stack 0: 0xABBCBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
4214	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x670
- stack 2: 0x8D4
- stack 1: 0xABBCBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4215	 46A	AND		 	 
- stack 2: 0x670
- stack 1: 0x8D4
- stack 0: 0xBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
4216	 46B	PUSH2	0020	 	 
- stack 3: 0x670
- stack 2: 0x8D4
- stack 1: 0xBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
- stack 0: 0x20
4217	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x670
- stack 2: 0x8D4
- stack 1: 0xBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
- stack 0: 0xFFFFABBC
4218	 46F	PUSH1	F0	 	 
- stack 4: 0x670
- stack 3: 0x8D4
- stack 2: 0xBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
- stack 1: 0xFFFFABBC
- stack 0: 0xF0
4219	 471	SHL		 	 
- stack 3: 0x670
- stack 2: 0x8D4
- stack 1: 0xBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
- stack 0: 0xABBC000000000000000000000000000000000000000000000000000000000000
4220	 472	ADD		 	 
- stack 2: 0x670
- stack 1: 0x8D4
- stack 0: 0xABBCBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
4221	 473	SWAP1		 	 
- stack 2: 0x670
- stack 1: 0xABBCBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
- stack 0: 0x8D4
4222	 474	MSTORE		 	 
- stack 0: 0x670
4223	 475	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4224	 477	ADD		 	 
- stack 0: 0x674
4225	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4226	 479	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x47E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0016F0010
4227	 47A	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x47E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0016F0010
- stack 0: 0xF0
4228	 47C	SHR		 	 
- stack 1: 0x674
- stack 0: 0x47E
4229	 47D	JUMP		 	 
- stack 0: 0x674
4230	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x674
4231	 47F	PUSH2	0040	 	 
- stack 1: 0x674
- stack 0: 0x40
4232	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x674
- stack 0: 0x8D0
4233	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
4234	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x8D0
4235	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x674
- stack 1: 0x8D0
- stack 0: 0x674
4236	 48A	MLOAD		 	 
- stack 2: 0x674
- stack 1: 0x8D0
- stack 0: 0x47E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0016F0010
4237	 48B	PUSH1	E0	 	 
- stack 3: 0x674
- stack 2: 0x8D0
- stack 1: 0x47E000601FDFFFB0210FBBC018902080389000104C6000204E0FFD0016F0010
- stack 0: 0xE0
4238	 48D	SHR		 	 
- stack 2: 0x674
- stack 1: 0x8D0
- stack 0: 0x47E0006
4239	 48E	PUSH2	FFFF	 	 
- stack 3: 0x674
- stack 2: 0x8D0
- stack 1: 0x47E0006
- stack 0: 0xFFFF
4240	 491	AND		 	 
- stack 2: 0x674
- stack 1: 0x8D0
- stack 0: 0x6
4241	 492	PUSH1	01	 	 
- stack 3: 0x674
- stack 2: 0x8D0
- stack 1: 0x6
- stack 0: 0x1
4242	 494	SIGNEXTEND		 	 
- stack 2: 0x674
- stack 1: 0x8D0
- stack 0: 0x6
4243	 495	ADD		 	 
- stack 1: 0x674
- stack 0: 0x8D6
4244	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x8D6
- stack 0: 0xFFFFFFFF
4245	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x8D6
4246	 49C	PUSH1	02	 	 
- stack 2: 0x674
- stack 1: 0x8D6
- stack 0: 0x2
4247	 49E	XOR		 	 
- stack 1: 0x674
- stack 0: 0x8D4
4248	 49F	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xABBCBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
4249	 4A0	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0xABBCBBCCAA0000AAA00A0AA03098567800000000000000000000000000000000
- stack 0: 0xF0
4250	 4A2	SHR		 	 
- stack 1: 0x674
- stack 0: 0xABBC
4251	 4A3	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0xABBC
- stack 0: 0x1
4252	 4A5	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABBC
4253	 4A6	PUSH2	0060	 	 
- stack 2: 0x674
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABBC
- stack 0: 0x60
4254	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x674
4255	 4AA	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4256	 4AC	ADD		 	 
- stack 0: 0x678
4257	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4258	 4AE	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x1FDFFFB0210FBBC018902080389000104C6000204E0FFD0016F001003F00000
4259	 4AF	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x1FDFFFB0210FBBC018902080389000104C6000204E0FFD0016F001003F00000
- stack 0: 0xF0
4260	 4B1	SHR		 	 
- stack 1: 0x678
- stack 0: 0x1FD
4261	 4B2	JUMP		 	 
- stack 0: 0x678
4262	 1FD	JUMPDEST		 ;; __riscvimpl_LUI_ffffbeb7	  ;; # instr: lui t4,0xffffb(ignore imm)
- stack 0: 0x678
4263	 1FE	PUSH4	ffffb000	 	 
- stack 1: 0x678
- stack 0: 0xFFFFB000
4264	 203	PUSH2	03A0	 	 
- stack 2: 0x678
- stack 1: 0xFFFFB000
- stack 0: 0x3A0
4265	 206	MSTORE		 	  ;; # store to x29
- stack 0: 0x678
4266	 207	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
4267	 209	ADD		 	 
- stack 0: 0x67C
4268	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
4269	 20B	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x210FBBC018902080389000104C6000204E0FFD0016F001003F00000055FFFFB
4270	 20C	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x210FBBC018902080389000104C6000204E0FFD0016F001003F00000055FFFFB
- stack 0: 0xF0
4271	 20E	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x210
4272	 20F	JUMP		 	 
- stack 0: 0x67C
4273	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x67C
4274	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
4275	 212	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x210FBBC018902080389000104C6000204E0FFD0016F001003F00000055FFFFB
4276	 213	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x210FBBC018902080389000104C6000204E0FFD0016F001003F00000055FFFFB
- stack 0: 0xE0
4277	 215	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x210FBBC
4278	 216	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x210FBBC
- stack 0: 0xFFFF
4279	 219	AND		 	 
- stack 1: 0x67C
- stack 0: 0xFBBC
4280	 21A	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0xFBBC
- stack 0: 0x1
4281	 21C	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
4282	 21D	PUSH2	03A0	 	 
- stack 2: 0x67C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0x3A0
4283	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x67C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0xFFFFB000
4284	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x67C
- stack 0: 0xFFFFABBC
4285	 222	PUSH2	03A0	 	 
- stack 2: 0x67C
- stack 1: 0xFFFFABBC
- stack 0: 0x3A0
4286	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x67C
4287	 226	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4288	 228	ADD		 	 
- stack 0: 0x680
4289	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4290	 22A	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x18902080389000104C6000204E0FFD0016F001003F00000055FFFFB0095FABB
4291	 22B	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x18902080389000104C6000204E0FFD0016F001003F00000055FFFFB0095FABB
- stack 0: 0xF0
4292	 22D	SHR		 	 
- stack 1: 0x680
- stack 0: 0x189
4293	 22E	JUMP		 	 
- stack 0: 0x680
4294	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x680
4295	 18A	PUSH2	0060	 	 
- stack 1: 0x680
- stack 0: 0x60
4296	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x680
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABBC
4297	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x680
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABBC
- stack 0: 0xFFFFFFFF
4298	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x680
- stack 0: 0xFFFFABBC
4299	 194	PUSH2	03A0	 	 
- stack 2: 0x680
- stack 1: 0xFFFFABBC
- stack 0: 0x3A0
4300	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x680
- stack 1: 0xFFFFABBC
- stack 0: 0xFFFFABBC
4301	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x680
- stack 2: 0xFFFFABBC
- stack 1: 0xFFFFABBC
- stack 0: 0xFFFFFFFF
4302	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x680
- stack 1: 0xFFFFABBC
- stack 0: 0xFFFFABBC
4303	 19E	SUB		 	 
- stack 1: 0x680
- stack 0: 0x0
4304	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x1A7
4305	 1A2	JUMPI		 	 
- stack 0: 0x680
4306	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x680
- stack 0: 0x1C1
4307	 1A6	JUMP		 	 
- stack 0: 0x680
4308	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x680
4309	 1C2	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4310	 1C4	ADD		 	 
- stack 0: 0x684
4311	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4312	 1C6	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x389000104C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000
4313	 1C7	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x389000104C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000
- stack 0: 0xF0
4314	 1C9	SHR		 	 
- stack 1: 0x684
- stack 0: 0x389
4315	 1CA	JUMP		 	 
- stack 0: 0x684
4316	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x684
4317	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
4318	 38B	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x389000104C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000
4319	 38C	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x389000104C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000
- stack 0: 0xE0
4320	 38E	SHR		 	 
- stack 1: 0x684
- stack 0: 0x3890001
4321	 38F	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x3890001
- stack 0: 0xFFFF
4322	 392	AND		 	 
- stack 1: 0x684
- stack 0: 0x1
4323	 393	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0x1
4324	 395	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x1
4325	 396	PUSH2	0080	 	 
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0x80
4326	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x684
- stack 1: 0x1
- stack 0: 0x1
4327	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x684
- stack 0: 0x2
4328	 39B	PUSH2	0080	 	 
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0x80
4329	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x684
4330	 39F	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4331	 3A1	ADD		 	 
- stack 0: 0x688
4332	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4333	 3A3	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x4C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000041D0000
4334	 3A4	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x4C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000041D0000
- stack 0: 0xF0
4335	 3A6	SHR		 	 
- stack 1: 0x688
- stack 0: 0x4C6
4336	 3A7	JUMP		 	 
- stack 0: 0x688
4337	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x688
4338	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4339	 4C8	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x4C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000041D0000
4340	 4C9	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x4C6000204E0FFD0016F001003F00000055FFFFB0095FABB05350000041D0000
- stack 0: 0xE0
4341	 4CB	SHR		 	 
- stack 1: 0x688
- stack 0: 0x4C60002
4342	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x4C60002
- stack 0: 0xFFFF
4343	 4CF	AND		 	 
- stack 1: 0x688
- stack 0: 0x2
4344	 4D0	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0x1
4345	 4D2	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x2
4346	 4D3	PUSH2	00A0	 	 
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0xA0
4347	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x688
4348	 4D7	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4349	 4D9	ADD		 	 
- stack 0: 0x68C
4350	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4351	 4DB	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x4E0FFD0016F001003F00000055FFFFB0095FABB05350000041D000001DE022C
4352	 4DC	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x4E0FFD0016F001003F00000055FFFFB0095FABB05350000041D000001DE022C
- stack 0: 0xF0
4353	 4DE	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x4E0
4354	 4DF	JUMP		 	 
- stack 0: 0x68C
4355	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x68C
4356	 4E1	PUSH2	0080	 	 
- stack 1: 0x68C
- stack 0: 0x80
4357	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x68C
- stack 0: 0x2
4358	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x68C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4359	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x68C
- stack 0: 0x2
4360	 4EB	PUSH2	00A0	 	 
- stack 2: 0x68C
- stack 1: 0x2
- stack 0: 0xA0
4361	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x68C
- stack 1: 0x2
- stack 0: 0x2
4362	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x68C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4363	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x68C
- stack 1: 0x2
- stack 0: 0x2
4364	 4F5	SUB		 	 
- stack 1: 0x68C
- stack 0: 0x0
4365	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x4FE
4366	 4F9	JUMPI		 	 
- stack 0: 0x68C
4367	 4FA	PUSH2	0518	 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 1: 0x68C
- stack 0: 0x518
4368	 4FD	JUMP		 	 
- stack 0: 0x68C
4369	 518	JUMPDEST		 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x68C
4370	 519	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4371	 51B	ADD		 	 
- stack 0: 0x690
4372	 51C	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4373	 51D	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x16F001003F00000055FFFFB0095FABB05350000041D000001DE022C05350000
4374	 51E	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x16F001003F00000055FFFFB0095FABB05350000041D000001DE022C05350000
- stack 0: 0xF0
4375	 520	SHR		 	 
- stack 1: 0x690
- stack 0: 0x16F
4376	 521	JUMP		 	 
- stack 0: 0x690
4377	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x690
4378	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
4379	 171	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x16F001003F00000055FFFFB0095FABB05350000041D000001DE022C05350000
4380	 172	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x16F001003F00000055FFFFB0095FABB05350000041D000001DE022C05350000
- stack 0: 0xE0
4381	 174	SHR		 	 
- stack 1: 0x690
- stack 0: 0x16F0010
4382	 175	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x16F0010
- stack 0: 0xFFFF
4383	 178	AND		 	 
- stack 1: 0x690
- stack 0: 0x10
4384	 179	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0x10
- stack 0: 0x1
4385	 17B	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0x10
4386	 17C	PUSH2	0380	 	 
- stack 2: 0x690
- stack 1: 0x10
- stack 0: 0x380
4387	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x690
4388	 180	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4389	 182	ADD		 	 
- stack 0: 0x694
4390	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4391	 184	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x3F00000055FFFFB0095FABB05350000041D000001DE022C05350000042C0008
4392	 185	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x3F00000055FFFFB0095FABB05350000041D000001DE022C05350000042C0008
- stack 0: 0xF0
4393	 187	SHR		 	 
- stack 1: 0x694
- stack 0: 0x3F0
4394	 188	JUMP		 	 
- stack 0: 0x694
4395	 3F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x694
4396	 3F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4397	 3F2	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x3F00000055FFFFB0095FABB05350000041D000001DE022C05350000042C0008
4398	 3F3	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x3F00000055FFFFB0095FABB05350000041D000001DE022C05350000042C0008
- stack 0: 0xE0
4399	 3F5	SHR		 	 
- stack 1: 0x694
- stack 0: 0x3F00000
4400	 3F6	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x3F00000
- stack 0: 0xFFFF
4401	 3F9	AND		 	 
- stack 1: 0x694
- stack 0: 0x0
4402	 3FA	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x1
4403	 3FC	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x0
4404	 3FD	PUSH2	0080	 	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x80
4405	 400	MSTORE		 	  ;; # store to x4
- stack 0: 0x694
4406	 401	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4407	 403	ADD		 	 
- stack 0: 0x698
4408	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4409	 405	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x55FFFFB0095FABB05350000041D000001DE022C05350000042C0008047E0008
4410	 406	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x55FFFFB0095FABB05350000041D000001DE022C05350000042C0008047E0008
- stack 0: 0xF0
4411	 408	SHR		 	 
- stack 1: 0x698
- stack 0: 0x55F
4412	 409	JUMP		 	 
- stack 0: 0x698
4413	 55F	JUMPDEST		 ;; __riscvimpl_LUI_ffffb0b7	  ;; # instr: lui ra,0xffffb(ignore imm)
- stack 0: 0x698
4414	 560	PUSH4	ffffb000	 	 
- stack 1: 0x698
- stack 0: 0xFFFFB000
4415	 565	PUSH2	0020	 	 
- stack 2: 0x698
- stack 1: 0xFFFFB000
- stack 0: 0x20
4416	 568	MSTORE		 	  ;; # store to x1
- stack 0: 0x698
4417	 569	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4418	 56B	ADD		 	 
- stack 0: 0x69C
4419	 56C	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4420	 56D	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x95FABB05350000041D000001DE022C05350000042C0008047E000801FDFFFB
4421	 56E	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x95FABB05350000041D000001DE022C05350000042C0008047E000801FDFFFB
- stack 0: 0xF0
4422	 570	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x95
4423	 571	JUMP		 	 
- stack 0: 0x69C
4424	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x69C
4425	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4426	 97	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x95FABB05350000041D000001DE022C05350000042C0008047E000801FDFFFB
4427	 98	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x95FABB05350000041D000001DE022C05350000042C0008047E000801FDFFFB
- stack 0: 0xE0
4428	 9A	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x95FABB
4429	 9B	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x95FABB
- stack 0: 0xFFFF
4430	 9E	AND		 	 
- stack 1: 0x69C
- stack 0: 0xFABB
4431	 9F	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0xFABB
- stack 0: 0x1
4432	 A1	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
4433	 A2	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0x20
4434	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x69C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0xFFFFB000
4435	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x69C
- stack 0: 0xFFFFAABB
4436	 A7	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xFFFFAABB
- stack 0: 0x20
4437	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x69C
4438	 AB	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4439	 AD	ADD		 	 
- stack 0: 0x6A0
4440	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4441	 AF	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x5350000041D000001DE022C05350000042C0008047E000801FDFFFB0210FABB
4442	 B0	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x5350000041D000001DE022C05350000042C0008047E000801FDFFFB0210FABB
- stack 0: 0xF0
4443	 B2	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x535
4444	 B3	JUMP		 	 
- stack 0: 0x6A0
4445	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6A0
4446	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4447	 537	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x5350000041D000001DE022C05350000042C0008047E000801FDFFFB0210FABB
4448	 538	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x5350000041D000001DE022C05350000042C0008047E000801FDFFFB0210FABB
- stack 0: 0xE0
4449	 53A	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x5350000
4450	 53B	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x5350000
- stack 0: 0xFFFF
4451	 53E	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4452	 53F	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
4453	 541	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4454	 542	POP		 	 
- stack 0: 0x6A0
4455	 543	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4456	 545	ADD		 	 
- stack 0: 0x6A4
4457	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4458	 547	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x41D000001DE022C05350000042C0008047E000801FDFFFB0210FABB018901C8
4459	 548	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x41D000001DE022C05350000042C0008047E000801FDFFFB0210FABB018901C8
- stack 0: 0xF0
4460	 54A	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x41D
4461	 54B	JUMP		 	 
- stack 0: 0x6A4
4462	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x6A4
4463	 41E	DUP1		 	 
- stack 1: 0x6A4
- stack 0: 0x6A4
4464	 41F	PUSH2	0040	 	 
- stack 2: 0x6A4
- stack 1: 0x6A4
- stack 0: 0x40
4465	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A4
4466	 423	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4467	 425	ADD		 	 
- stack 0: 0x6A8
4468	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4469	 427	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x1DE022C05350000042C0008047E000801FDFFFB0210FABB018901C803890001
4470	 428	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x1DE022C05350000042C0008047E000801FDFFFB0210FABB018901C803890001
- stack 0: 0xF0
4471	 42A	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x1DE
4472	 42B	JUMP		 	 
- stack 0: 0x6A8
4473	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x6A8
4474	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
4475	 1E0	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x1DE022C05350000042C0008047E000801FDFFFB0210FABB018901C803890001
4476	 1E1	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0x1DE022C05350000042C0008047E000801FDFFFB0210FABB018901C803890001
- stack 0: 0xE0
4477	 1E3	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x1DE022C
4478	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x1DE022C
- stack 0: 0xFFFF
4479	 1E7	AND		 	 
- stack 1: 0x6A8
- stack 0: 0x22C
4480	 1E8	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0x22C
- stack 0: 0x1
4481	 1EA	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0x22C
4482	 1EB	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0x22C
- stack 0: 0x40
4483	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x6A8
- stack 1: 0x22C
- stack 0: 0x6A4
4484	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x6A8
- stack 0: 0x8D0
4485	 1F0	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0x8D0
- stack 0: 0x40
4486	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A8
4487	 1F4	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4488	 1F6	ADD		 	 
- stack 0: 0x6AC
4489	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4490	 1F8	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x5350000042C0008047E000801FDFFFB0210FABB018901C80389000104C60002
4491	 1F9	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x5350000042C0008047E000801FDFFFB0210FABB018901C80389000104C60002
- stack 0: 0xF0
4492	 1FB	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x535
4493	 1FC	JUMP		 	 
- stack 0: 0x6AC
4494	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6AC
4495	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
4496	 537	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x5350000042C0008047E000801FDFFFB0210FABB018901C80389000104C60002
4497	 538	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x5350000042C0008047E000801FDFFFB0210FABB018901C80389000104C60002
- stack 0: 0xE0
4498	 53A	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x5350000
4499	 53B	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x5350000
- stack 0: 0xFFFF
4500	 53E	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4501	 53F	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x1
4502	 541	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4503	 542	POP		 	 
- stack 0: 0x6AC
4504	 543	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4505	 545	ADD		 	 
- stack 0: 0x6B0
4506	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4507	 547	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x42C0008047E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC
4508	 548	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x42C0008047E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC
- stack 0: 0xF0
4509	 54A	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x42C
4510	 54B	JUMP		 	 
- stack 0: 0x6B0
4511	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x6B0
4512	 42D	PUSH2	0040	 	 
- stack 1: 0x6B0
- stack 0: 0x40
4513	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x6B0
- stack 0: 0x8D0
4514	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6B0
- stack 1: 0x8D0
- stack 0: 0x6B0
4515	 432	MLOAD		 	 
- stack 2: 0x6B0
- stack 1: 0x8D0
- stack 0: 0x42C0008047E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC
4516	 433	PUSH1	E0	 	 
- stack 3: 0x6B0
- stack 2: 0x8D0
- stack 1: 0x42C0008047E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC
- stack 0: 0xE0
4517	 435	SHR		 	 
- stack 2: 0x6B0
- stack 1: 0x8D0
- stack 0: 0x42C0008
4518	 436	PUSH2	FFFF	 	 
- stack 3: 0x6B0
- stack 2: 0x8D0
- stack 1: 0x42C0008
- stack 0: 0xFFFF
4519	 439	AND		 	 
- stack 2: 0x6B0
- stack 1: 0x8D0
- stack 0: 0x8
4520	 43A	PUSH1	01	 	 
- stack 3: 0x6B0
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
4521	 43C	SIGNEXTEND		 	 
- stack 2: 0x6B0
- stack 1: 0x8D0
- stack 0: 0x8
4522	 43D	ADD		 	 
- stack 1: 0x6B0
- stack 0: 0x8D8
4523	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
4524	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6B0
- stack 0: 0x8D8
4525	 444	PUSH1	02	 	 
- stack 2: 0x6B0
- stack 1: 0x8D8
- stack 0: 0x2
4526	 446	XOR		 	 
- stack 1: 0x6B0
- stack 0: 0x8DA
4527	 447	DUP1		 	 
- stack 2: 0x6B0
- stack 1: 0x8DA
- stack 0: 0x8DA
4528	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x6B0
- stack 1: 0x8DA
- stack 0: 0xAAA00A0AA03098567800000000000000000000000000000000000000000000
4529	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x6B0
- stack 2: 0x8DA
- stack 1: 0xAAA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4530	 46A	AND		 	 
- stack 2: 0x6B0
- stack 1: 0x8DA
- stack 0: 0xA00A0AA03098567800000000000000000000000000000000000000000000
4531	 46B	PUSH2	0020	 	 
- stack 3: 0x6B0
- stack 2: 0x8DA
- stack 1: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0x20
4532	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x6B0
- stack 2: 0x8DA
- stack 1: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0xFFFFAABB
4533	 46F	PUSH1	F0	 	 
- stack 4: 0x6B0
- stack 3: 0x8DA
- stack 2: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 1: 0xFFFFAABB
- stack 0: 0xF0
4534	 471	SHL		 	 
- stack 3: 0x6B0
- stack 2: 0x8DA
- stack 1: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0xAABB000000000000000000000000000000000000000000000000000000000000
4535	 472	ADD		 	 
- stack 2: 0x6B0
- stack 1: 0x8DA
- stack 0: 0xAABBA00A0AA03098567800000000000000000000000000000000000000000000
4536	 473	SWAP1		 	 
- stack 2: 0x6B0
- stack 1: 0xAABBA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0x8DA
4537	 474	MSTORE		 	 
- stack 0: 0x6B0
4538	 475	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4539	 477	ADD		 	 
- stack 0: 0x6B4
4540	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4541	 479	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x47E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC016F0011
4542	 47A	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x47E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC016F0011
- stack 0: 0xF0
4543	 47C	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x47E
4544	 47D	JUMP		 	 
- stack 0: 0x6B4
4545	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x6B4
4546	 47F	PUSH2	0040	 	 
- stack 1: 0x6B4
- stack 0: 0x40
4547	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x6B4
- stack 0: 0x8D0
4548	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
4549	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6B4
- stack 0: 0x8D0
4550	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6B4
- stack 1: 0x8D0
- stack 0: 0x6B4
4551	 48A	MLOAD		 	 
- stack 2: 0x6B4
- stack 1: 0x8D0
- stack 0: 0x47E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC016F0011
4552	 48B	PUSH1	E0	 	 
- stack 3: 0x6B4
- stack 2: 0x8D0
- stack 1: 0x47E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC016F0011
- stack 0: 0xE0
4553	 48D	SHR		 	 
- stack 2: 0x6B4
- stack 1: 0x8D0
- stack 0: 0x47E0008
4554	 48E	PUSH2	FFFF	 	 
- stack 3: 0x6B4
- stack 2: 0x8D0
- stack 1: 0x47E0008
- stack 0: 0xFFFF
4555	 491	AND		 	 
- stack 2: 0x6B4
- stack 1: 0x8D0
- stack 0: 0x8
4556	 492	PUSH1	01	 	 
- stack 3: 0x6B4
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
4557	 494	SIGNEXTEND		 	 
- stack 2: 0x6B4
- stack 1: 0x8D0
- stack 0: 0x8
4558	 495	ADD		 	 
- stack 1: 0x6B4
- stack 0: 0x8D8
4559	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
4560	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6B4
- stack 0: 0x8D8
4561	 49C	PUSH1	02	 	 
- stack 2: 0x6B4
- stack 1: 0x8D8
- stack 0: 0x2
4562	 49E	XOR		 	 
- stack 1: 0x6B4
- stack 0: 0x8DA
4563	 49F	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0xAABBA00A0AA03098567800000000000000000000000000000000000000000000
4564	 4A0	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0xAABBA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0xF0
4565	 4A2	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0xAABB
4566	 4A3	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0xAABB
- stack 0: 0x1
4567	 4A5	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAABB
4568	 4A6	PUSH2	0060	 	 
- stack 2: 0x6B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAABB
- stack 0: 0x60
4569	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x6B4
4570	 4AA	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4571	 4AC	ADD		 	 
- stack 0: 0x6B8
4572	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4573	 4AE	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x1FDFFFB0210FABB018901C80389000104C6000204E0FFCC016F001103F00000
4574	 4AF	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x1FDFFFB0210FABB018901C80389000104C6000204E0FFCC016F001103F00000
- stack 0: 0xF0
4575	 4B1	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x1FD
4576	 4B2	JUMP		 	 
- stack 0: 0x6B8
4577	 1FD	JUMPDEST		 ;; __riscvimpl_LUI_ffffbeb7	  ;; # instr: lui t4,0xffffb(ignore imm)
- stack 0: 0x6B8
4578	 1FE	PUSH4	ffffb000	 	 
- stack 1: 0x6B8
- stack 0: 0xFFFFB000
4579	 203	PUSH2	03A0	 	 
- stack 2: 0x6B8
- stack 1: 0xFFFFB000
- stack 0: 0x3A0
4580	 206	MSTORE		 	  ;; # store to x29
- stack 0: 0x6B8
4581	 207	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4582	 209	ADD		 	 
- stack 0: 0x6BC
4583	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4584	 20B	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x210FABB018901C80389000104C6000204E0FFCC016F001103F000000572FFFE
4585	 20C	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x210FABB018901C80389000104C6000204E0FFCC016F001103F000000572FFFE
- stack 0: 0xF0
4586	 20E	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x210
4587	 20F	JUMP		 	 
- stack 0: 0x6BC
4588	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x6BC
4589	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
4590	 212	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x210FABB018901C80389000104C6000204E0FFCC016F001103F000000572FFFE
4591	 213	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x210FABB018901C80389000104C6000204E0FFCC016F001103F000000572FFFE
- stack 0: 0xE0
4592	 215	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x210FABB
4593	 216	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x210FABB
- stack 0: 0xFFFF
4594	 219	AND		 	 
- stack 1: 0x6BC
- stack 0: 0xFABB
4595	 21A	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0xFABB
- stack 0: 0x1
4596	 21C	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
4597	 21D	PUSH2	03A0	 	 
- stack 2: 0x6BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0x3A0
4598	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x6BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0xFFFFB000
4599	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x6BC
- stack 0: 0xFFFFAABB
4600	 222	PUSH2	03A0	 	 
- stack 2: 0x6BC
- stack 1: 0xFFFFAABB
- stack 0: 0x3A0
4601	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x6BC
4602	 226	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4603	 228	ADD		 	 
- stack 0: 0x6C0
4604	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4605	 22A	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x18901C80389000104C6000204E0FFCC016F001103F000000572FFFE0095FAAB
4606	 22B	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x18901C80389000104C6000204E0FFCC016F001103F000000572FFFE0095FAAB
- stack 0: 0xF0
4607	 22D	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x189
4608	 22E	JUMP		 	 
- stack 0: 0x6C0
4609	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x6C0
4610	 18A	PUSH2	0060	 	 
- stack 1: 0x6C0
- stack 0: 0x60
4611	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAABB
4612	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAABB
- stack 0: 0xFFFFFFFF
4613	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C0
- stack 0: 0xFFFFAABB
4614	 194	PUSH2	03A0	 	 
- stack 2: 0x6C0
- stack 1: 0xFFFFAABB
- stack 0: 0x3A0
4615	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x6C0
- stack 1: 0xFFFFAABB
- stack 0: 0xFFFFAABB
4616	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C0
- stack 2: 0xFFFFAABB
- stack 1: 0xFFFFAABB
- stack 0: 0xFFFFFFFF
4617	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C0
- stack 1: 0xFFFFAABB
- stack 0: 0xFFFFAABB
4618	 19E	SUB		 	 
- stack 1: 0x6C0
- stack 0: 0x0
4619	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x1A7
4620	 1A2	JUMPI		 	 
- stack 0: 0x6C0
4621	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x6C0
- stack 0: 0x1C1
4622	 1A6	JUMP		 	 
- stack 0: 0x6C0
4623	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x6C0
4624	 1C2	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4625	 1C4	ADD		 	 
- stack 0: 0x6C4
4626	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4627	 1C6	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x389000104C6000204E0FFCC016F001103F000000572FFFE0095FAAB05350000
4628	 1C7	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x389000104C6000204E0FFCC016F001103F000000572FFFE0095FAAB05350000
- stack 0: 0xF0
4629	 1C9	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x389
4630	 1CA	JUMP		 	 
- stack 0: 0x6C4
4631	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x6C4
4632	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C4
- stack 0: 0x6C4
4633	 38B	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x389000104C6000204E0FFCC016F001103F000000572FFFE0095FAAB05350000
4634	 38C	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0x389000104C6000204E0FFCC016F001103F000000572FFFE0095FAAB05350000
- stack 0: 0xE0
4635	 38E	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x3890001
4636	 38F	PUSH2	FFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x3890001
- stack 0: 0xFFFF
4637	 392	AND		 	 
- stack 1: 0x6C4
- stack 0: 0x1
4638	 393	PUSH1	01	 	 
- stack 2: 0x6C4
- stack 1: 0x1
- stack 0: 0x1
4639	 395	SIGNEXTEND		 	 
- stack 1: 0x6C4
- stack 0: 0x1
4640	 396	PUSH2	0080	 	 
- stack 2: 0x6C4
- stack 1: 0x1
- stack 0: 0x80
4641	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x6C4
- stack 1: 0x1
- stack 0: 0x0
4642	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x6C4
- stack 0: 0x1
4643	 39B	PUSH2	0080	 	 
- stack 2: 0x6C4
- stack 1: 0x1
- stack 0: 0x80
4644	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x6C4
4645	 39F	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
4646	 3A1	ADD		 	 
- stack 0: 0x6C8
4647	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
4648	 3A3	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x4C6000204E0FFCC016F001103F000000572FFFE0095FAAB0535000005350000
4649	 3A4	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x4C6000204E0FFCC016F001103F000000572FFFE0095FAAB0535000005350000
- stack 0: 0xF0
4650	 3A6	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x4C6
4651	 3A7	JUMP		 	 
- stack 0: 0x6C8
4652	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6C8
4653	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
4654	 4C8	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x4C6000204E0FFCC016F001103F000000572FFFE0095FAAB0535000005350000
4655	 4C9	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0x4C6000204E0FFCC016F001103F000000572FFFE0095FAAB0535000005350000
- stack 0: 0xE0
4656	 4CB	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x4C60002
4657	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x4C60002
- stack 0: 0xFFFF
4658	 4CF	AND		 	 
- stack 1: 0x6C8
- stack 0: 0x2
4659	 4D0	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0x2
- stack 0: 0x1
4660	 4D2	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x2
4661	 4D3	PUSH2	00A0	 	 
- stack 2: 0x6C8
- stack 1: 0x2
- stack 0: 0xA0
4662	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x6C8
4663	 4D7	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
4664	 4D9	ADD		 	 
- stack 0: 0x6CC
4665	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
4666	 4DB	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x4E0FFCC016F001103F000000572FFFE0095FAAB0535000005350000041D0000
4667	 4DC	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x4E0FFCC016F001103F000000572FFFE0095FAAB0535000005350000041D0000
- stack 0: 0xF0
4668	 4DE	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x4E0
4669	 4DF	JUMP		 	 
- stack 0: 0x6CC
4670	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x6CC
4671	 4E1	PUSH2	0080	 	 
- stack 1: 0x6CC
- stack 0: 0x80
4672	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x6CC
- stack 0: 0x1
4673	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4674	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6CC
- stack 0: 0x1
4675	 4EB	PUSH2	00A0	 	 
- stack 2: 0x6CC
- stack 1: 0x1
- stack 0: 0xA0
4676	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x6CC
- stack 1: 0x1
- stack 0: 0x2
4677	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6CC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4678	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6CC
- stack 1: 0x1
- stack 0: 0x2
4679	 4F5	SUB		 	 
- stack 1: 0x6CC
- stack 0: 0x1
4680	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x6CC
- stack 1: 0x1
- stack 0: 0x4FE
4681	 4F9	JUMPI		 	 
- stack 0: 0x6CC
4682	 4FE	JUMPDEST		 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x6CC
4683	 4FF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6CC
- stack 0: 0x6CC
4684	 500	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x4E0FFCC016F001103F000000572FFFE0095FAAB0535000005350000041D0000
4685	 501	PUSH1	E0	 	 
- stack 2: 0x6CC
- stack 1: 0x4E0FFCC016F001103F000000572FFFE0095FAAB0535000005350000041D0000
- stack 0: 0xE0
4686	 503	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x4E0FFCC
4687	 504	PUSH2	FFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x4E0FFCC
- stack 0: 0xFFFF
4688	 507	AND		 	 
- stack 1: 0x6CC
- stack 0: 0xFFCC
4689	 508	PUSH1	01	 	 
- stack 2: 0x6CC
- stack 1: 0xFFCC
- stack 0: 0x1
4690	 50A	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
4691	 50B	ADD		 	 
- stack 0: 0x698
4692	 50C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x698
- stack 0: 0xFFFFFFFF
4693	 511	AND		 	  ;; # mask to 32 bits
- stack 0: 0x698
4694	 512	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4695	 513	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x55FFFFB0095FABB05350000041D000001DE022C05350000042C0008047E0008
4696	 514	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x55FFFFB0095FABB05350000041D000001DE022C05350000042C0008047E0008
- stack 0: 0xF0
4697	 516	SHR		 	 
- stack 1: 0x698
- stack 0: 0x55F
4698	 517	JUMP		 	 
- stack 0: 0x698
4699	 55F	JUMPDEST		 ;; __riscvimpl_LUI_ffffb0b7	  ;; # instr: lui ra,0xffffb(ignore imm)
- stack 0: 0x698
4700	 560	PUSH4	ffffb000	 	 
- stack 1: 0x698
- stack 0: 0xFFFFB000
4701	 565	PUSH2	0020	 	 
- stack 2: 0x698
- stack 1: 0xFFFFB000
- stack 0: 0x20
4702	 568	MSTORE		 	  ;; # store to x1
- stack 0: 0x698
4703	 569	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4704	 56B	ADD		 	 
- stack 0: 0x69C
4705	 56C	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4706	 56D	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x95FABB05350000041D000001DE022C05350000042C0008047E000801FDFFFB
4707	 56E	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x95FABB05350000041D000001DE022C05350000042C0008047E000801FDFFFB
- stack 0: 0xF0
4708	 570	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x95
4709	 571	JUMP		 	 
- stack 0: 0x69C
4710	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x69C
4711	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4712	 97	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x95FABB05350000041D000001DE022C05350000042C0008047E000801FDFFFB
4713	 98	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x95FABB05350000041D000001DE022C05350000042C0008047E000801FDFFFB
- stack 0: 0xE0
4714	 9A	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x95FABB
4715	 9B	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x95FABB
- stack 0: 0xFFFF
4716	 9E	AND		 	 
- stack 1: 0x69C
- stack 0: 0xFABB
4717	 9F	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0xFABB
- stack 0: 0x1
4718	 A1	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
4719	 A2	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0x20
4720	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x69C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0xFFFFB000
4721	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x69C
- stack 0: 0xFFFFAABB
4722	 A7	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xFFFFAABB
- stack 0: 0x20
4723	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x69C
4724	 AB	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4725	 AD	ADD		 	 
- stack 0: 0x6A0
4726	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4727	 AF	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x5350000041D000001DE022C05350000042C0008047E000801FDFFFB0210FABB
4728	 B0	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x5350000041D000001DE022C05350000042C0008047E000801FDFFFB0210FABB
- stack 0: 0xF0
4729	 B2	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x535
4730	 B3	JUMP		 	 
- stack 0: 0x6A0
4731	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6A0
4732	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4733	 537	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x5350000041D000001DE022C05350000042C0008047E000801FDFFFB0210FABB
4734	 538	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x5350000041D000001DE022C05350000042C0008047E000801FDFFFB0210FABB
- stack 0: 0xE0
4735	 53A	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x5350000
4736	 53B	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x5350000
- stack 0: 0xFFFF
4737	 53E	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4738	 53F	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
4739	 541	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4740	 542	POP		 	 
- stack 0: 0x6A0
4741	 543	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4742	 545	ADD		 	 
- stack 0: 0x6A4
4743	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4744	 547	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x41D000001DE022C05350000042C0008047E000801FDFFFB0210FABB018901C8
4745	 548	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x41D000001DE022C05350000042C0008047E000801FDFFFB0210FABB018901C8
- stack 0: 0xF0
4746	 54A	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x41D
4747	 54B	JUMP		 	 
- stack 0: 0x6A4
4748	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x6A4
4749	 41E	DUP1		 	 
- stack 1: 0x6A4
- stack 0: 0x6A4
4750	 41F	PUSH2	0040	 	 
- stack 2: 0x6A4
- stack 1: 0x6A4
- stack 0: 0x40
4751	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A4
4752	 423	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4753	 425	ADD		 	 
- stack 0: 0x6A8
4754	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4755	 427	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x1DE022C05350000042C0008047E000801FDFFFB0210FABB018901C803890001
4756	 428	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x1DE022C05350000042C0008047E000801FDFFFB0210FABB018901C803890001
- stack 0: 0xF0
4757	 42A	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x1DE
4758	 42B	JUMP		 	 
- stack 0: 0x6A8
4759	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x6A8
4760	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
4761	 1E0	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x1DE022C05350000042C0008047E000801FDFFFB0210FABB018901C803890001
4762	 1E1	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0x1DE022C05350000042C0008047E000801FDFFFB0210FABB018901C803890001
- stack 0: 0xE0
4763	 1E3	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x1DE022C
4764	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x1DE022C
- stack 0: 0xFFFF
4765	 1E7	AND		 	 
- stack 1: 0x6A8
- stack 0: 0x22C
4766	 1E8	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0x22C
- stack 0: 0x1
4767	 1EA	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0x22C
4768	 1EB	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0x22C
- stack 0: 0x40
4769	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x6A8
- stack 1: 0x22C
- stack 0: 0x6A4
4770	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x6A8
- stack 0: 0x8D0
4771	 1F0	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0x8D0
- stack 0: 0x40
4772	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A8
4773	 1F4	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4774	 1F6	ADD		 	 
- stack 0: 0x6AC
4775	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4776	 1F8	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x5350000042C0008047E000801FDFFFB0210FABB018901C80389000104C60002
4777	 1F9	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x5350000042C0008047E000801FDFFFB0210FABB018901C80389000104C60002
- stack 0: 0xF0
4778	 1FB	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x535
4779	 1FC	JUMP		 	 
- stack 0: 0x6AC
4780	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6AC
4781	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
4782	 537	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x5350000042C0008047E000801FDFFFB0210FABB018901C80389000104C60002
4783	 538	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x5350000042C0008047E000801FDFFFB0210FABB018901C80389000104C60002
- stack 0: 0xE0
4784	 53A	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x5350000
4785	 53B	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x5350000
- stack 0: 0xFFFF
4786	 53E	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4787	 53F	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x1
4788	 541	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4789	 542	POP		 	 
- stack 0: 0x6AC
4790	 543	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4791	 545	ADD		 	 
- stack 0: 0x6B0
4792	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4793	 547	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x42C0008047E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC
4794	 548	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x42C0008047E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC
- stack 0: 0xF0
4795	 54A	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x42C
4796	 54B	JUMP		 	 
- stack 0: 0x6B0
4797	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x6B0
4798	 42D	PUSH2	0040	 	 
- stack 1: 0x6B0
- stack 0: 0x40
4799	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x6B0
- stack 0: 0x8D0
4800	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6B0
- stack 1: 0x8D0
- stack 0: 0x6B0
4801	 432	MLOAD		 	 
- stack 2: 0x6B0
- stack 1: 0x8D0
- stack 0: 0x42C0008047E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC
4802	 433	PUSH1	E0	 	 
- stack 3: 0x6B0
- stack 2: 0x8D0
- stack 1: 0x42C0008047E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC
- stack 0: 0xE0
4803	 435	SHR		 	 
- stack 2: 0x6B0
- stack 1: 0x8D0
- stack 0: 0x42C0008
4804	 436	PUSH2	FFFF	 	 
- stack 3: 0x6B0
- stack 2: 0x8D0
- stack 1: 0x42C0008
- stack 0: 0xFFFF
4805	 439	AND		 	 
- stack 2: 0x6B0
- stack 1: 0x8D0
- stack 0: 0x8
4806	 43A	PUSH1	01	 	 
- stack 3: 0x6B0
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
4807	 43C	SIGNEXTEND		 	 
- stack 2: 0x6B0
- stack 1: 0x8D0
- stack 0: 0x8
4808	 43D	ADD		 	 
- stack 1: 0x6B0
- stack 0: 0x8D8
4809	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
4810	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6B0
- stack 0: 0x8D8
4811	 444	PUSH1	02	 	 
- stack 2: 0x6B0
- stack 1: 0x8D8
- stack 0: 0x2
4812	 446	XOR		 	 
- stack 1: 0x6B0
- stack 0: 0x8DA
4813	 447	DUP1		 	 
- stack 2: 0x6B0
- stack 1: 0x8DA
- stack 0: 0x8DA
4814	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x6B0
- stack 1: 0x8DA
- stack 0: 0xAABBA00A0AA03098567800000000000000000000000000000000000000000000
4815	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x6B0
- stack 2: 0x8DA
- stack 1: 0xAABBA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4816	 46A	AND		 	 
- stack 2: 0x6B0
- stack 1: 0x8DA
- stack 0: 0xA00A0AA03098567800000000000000000000000000000000000000000000
4817	 46B	PUSH2	0020	 	 
- stack 3: 0x6B0
- stack 2: 0x8DA
- stack 1: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0x20
4818	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x6B0
- stack 2: 0x8DA
- stack 1: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0xFFFFAABB
4819	 46F	PUSH1	F0	 	 
- stack 4: 0x6B0
- stack 3: 0x8DA
- stack 2: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 1: 0xFFFFAABB
- stack 0: 0xF0
4820	 471	SHL		 	 
- stack 3: 0x6B0
- stack 2: 0x8DA
- stack 1: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0xAABB000000000000000000000000000000000000000000000000000000000000
4821	 472	ADD		 	 
- stack 2: 0x6B0
- stack 1: 0x8DA
- stack 0: 0xAABBA00A0AA03098567800000000000000000000000000000000000000000000
4822	 473	SWAP1		 	 
- stack 2: 0x6B0
- stack 1: 0xAABBA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0x8DA
4823	 474	MSTORE		 	 
- stack 0: 0x6B0
4824	 475	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4825	 477	ADD		 	 
- stack 0: 0x6B4
4826	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4827	 479	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x47E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC016F0011
4828	 47A	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x47E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC016F0011
- stack 0: 0xF0
4829	 47C	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x47E
4830	 47D	JUMP		 	 
- stack 0: 0x6B4
4831	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x6B4
4832	 47F	PUSH2	0040	 	 
- stack 1: 0x6B4
- stack 0: 0x40
4833	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x6B4
- stack 0: 0x8D0
4834	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
4835	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6B4
- stack 0: 0x8D0
4836	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6B4
- stack 1: 0x8D0
- stack 0: 0x6B4
4837	 48A	MLOAD		 	 
- stack 2: 0x6B4
- stack 1: 0x8D0
- stack 0: 0x47E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC016F0011
4838	 48B	PUSH1	E0	 	 
- stack 3: 0x6B4
- stack 2: 0x8D0
- stack 1: 0x47E000801FDFFFB0210FABB018901C80389000104C6000204E0FFCC016F0011
- stack 0: 0xE0
4839	 48D	SHR		 	 
- stack 2: 0x6B4
- stack 1: 0x8D0
- stack 0: 0x47E0008
4840	 48E	PUSH2	FFFF	 	 
- stack 3: 0x6B4
- stack 2: 0x8D0
- stack 1: 0x47E0008
- stack 0: 0xFFFF
4841	 491	AND		 	 
- stack 2: 0x6B4
- stack 1: 0x8D0
- stack 0: 0x8
4842	 492	PUSH1	01	 	 
- stack 3: 0x6B4
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
4843	 494	SIGNEXTEND		 	 
- stack 2: 0x6B4
- stack 1: 0x8D0
- stack 0: 0x8
4844	 495	ADD		 	 
- stack 1: 0x6B4
- stack 0: 0x8D8
4845	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
4846	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6B4
- stack 0: 0x8D8
4847	 49C	PUSH1	02	 	 
- stack 2: 0x6B4
- stack 1: 0x8D8
- stack 0: 0x2
4848	 49E	XOR		 	 
- stack 1: 0x6B4
- stack 0: 0x8DA
4849	 49F	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0xAABBA00A0AA03098567800000000000000000000000000000000000000000000
4850	 4A0	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0xAABBA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0xF0
4851	 4A2	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0xAABB
4852	 4A3	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0xAABB
- stack 0: 0x1
4853	 4A5	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAABB
4854	 4A6	PUSH2	0060	 	 
- stack 2: 0x6B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAABB
- stack 0: 0x60
4855	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x6B4
4856	 4AA	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4857	 4AC	ADD		 	 
- stack 0: 0x6B8
4858	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4859	 4AE	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x1FDFFFB0210FABB018901C80389000104C6000204E0FFCC016F001103F00000
4860	 4AF	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x1FDFFFB0210FABB018901C80389000104C6000204E0FFCC016F001103F00000
- stack 0: 0xF0
4861	 4B1	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x1FD
4862	 4B2	JUMP		 	 
- stack 0: 0x6B8
4863	 1FD	JUMPDEST		 ;; __riscvimpl_LUI_ffffbeb7	  ;; # instr: lui t4,0xffffb(ignore imm)
- stack 0: 0x6B8
4864	 1FE	PUSH4	ffffb000	 	 
- stack 1: 0x6B8
- stack 0: 0xFFFFB000
4865	 203	PUSH2	03A0	 	 
- stack 2: 0x6B8
- stack 1: 0xFFFFB000
- stack 0: 0x3A0
4866	 206	MSTORE		 	  ;; # store to x29
- stack 0: 0x6B8
4867	 207	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4868	 209	ADD		 	 
- stack 0: 0x6BC
4869	 20A	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4870	 20B	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x210FABB018901C80389000104C6000204E0FFCC016F001103F000000572FFFE
4871	 20C	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x210FABB018901C80389000104C6000204E0FFCC016F001103F000000572FFFE
- stack 0: 0xF0
4872	 20E	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x210
4873	 20F	JUMP		 	 
- stack 0: 0x6BC
4874	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x6BC
4875	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
4876	 212	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x210FABB018901C80389000104C6000204E0FFCC016F001103F000000572FFFE
4877	 213	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x210FABB018901C80389000104C6000204E0FFCC016F001103F000000572FFFE
- stack 0: 0xE0
4878	 215	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x210FABB
4879	 216	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x210FABB
- stack 0: 0xFFFF
4880	 219	AND		 	 
- stack 1: 0x6BC
- stack 0: 0xFABB
4881	 21A	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0xFABB
- stack 0: 0x1
4882	 21C	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
4883	 21D	PUSH2	03A0	 	 
- stack 2: 0x6BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0x3A0
4884	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x6BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0xFFFFB000
4885	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x6BC
- stack 0: 0xFFFFAABB
4886	 222	PUSH2	03A0	 	 
- stack 2: 0x6BC
- stack 1: 0xFFFFAABB
- stack 0: 0x3A0
4887	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x6BC
4888	 226	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4889	 228	ADD		 	 
- stack 0: 0x6C0
4890	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4891	 22A	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x18901C80389000104C6000204E0FFCC016F001103F000000572FFFE0095FAAB
4892	 22B	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x18901C80389000104C6000204E0FFCC016F001103F000000572FFFE0095FAAB
- stack 0: 0xF0
4893	 22D	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x189
4894	 22E	JUMP		 	 
- stack 0: 0x6C0
4895	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x6C0
4896	 18A	PUSH2	0060	 	 
- stack 1: 0x6C0
- stack 0: 0x60
4897	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAABB
4898	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAABB
- stack 0: 0xFFFFFFFF
4899	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C0
- stack 0: 0xFFFFAABB
4900	 194	PUSH2	03A0	 	 
- stack 2: 0x6C0
- stack 1: 0xFFFFAABB
- stack 0: 0x3A0
4901	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x6C0
- stack 1: 0xFFFFAABB
- stack 0: 0xFFFFAABB
4902	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C0
- stack 2: 0xFFFFAABB
- stack 1: 0xFFFFAABB
- stack 0: 0xFFFFFFFF
4903	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C0
- stack 1: 0xFFFFAABB
- stack 0: 0xFFFFAABB
4904	 19E	SUB		 	 
- stack 1: 0x6C0
- stack 0: 0x0
4905	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x1A7
4906	 1A2	JUMPI		 	 
- stack 0: 0x6C0
4907	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x6C0
- stack 0: 0x1C1
4908	 1A6	JUMP		 	 
- stack 0: 0x6C0
4909	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x6C0
4910	 1C2	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4911	 1C4	ADD		 	 
- stack 0: 0x6C4
4912	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4913	 1C6	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x389000104C6000204E0FFCC016F001103F000000572FFFE0095FAAB05350000
4914	 1C7	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x389000104C6000204E0FFCC016F001103F000000572FFFE0095FAAB05350000
- stack 0: 0xF0
4915	 1C9	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x389
4916	 1CA	JUMP		 	 
- stack 0: 0x6C4
4917	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x6C4
4918	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C4
- stack 0: 0x6C4
4919	 38B	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x389000104C6000204E0FFCC016F001103F000000572FFFE0095FAAB05350000
4920	 38C	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0x389000104C6000204E0FFCC016F001103F000000572FFFE0095FAAB05350000
- stack 0: 0xE0
4921	 38E	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x3890001
4922	 38F	PUSH2	FFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x3890001
- stack 0: 0xFFFF
4923	 392	AND		 	 
- stack 1: 0x6C4
- stack 0: 0x1
4924	 393	PUSH1	01	 	 
- stack 2: 0x6C4
- stack 1: 0x1
- stack 0: 0x1
4925	 395	SIGNEXTEND		 	 
- stack 1: 0x6C4
- stack 0: 0x1
4926	 396	PUSH2	0080	 	 
- stack 2: 0x6C4
- stack 1: 0x1
- stack 0: 0x80
4927	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x6C4
- stack 1: 0x1
- stack 0: 0x1
4928	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x6C4
- stack 0: 0x2
4929	 39B	PUSH2	0080	 	 
- stack 2: 0x6C4
- stack 1: 0x2
- stack 0: 0x80
4930	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x6C4
4931	 39F	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
4932	 3A1	ADD		 	 
- stack 0: 0x6C8
4933	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
4934	 3A3	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x4C6000204E0FFCC016F001103F000000572FFFE0095FAAB0535000005350000
4935	 3A4	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x4C6000204E0FFCC016F001103F000000572FFFE0095FAAB0535000005350000
- stack 0: 0xF0
4936	 3A6	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x4C6
4937	 3A7	JUMP		 	 
- stack 0: 0x6C8
4938	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6C8
4939	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
4940	 4C8	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x4C6000204E0FFCC016F001103F000000572FFFE0095FAAB0535000005350000
4941	 4C9	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0x4C6000204E0FFCC016F001103F000000572FFFE0095FAAB0535000005350000
- stack 0: 0xE0
4942	 4CB	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x4C60002
4943	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x4C60002
- stack 0: 0xFFFF
4944	 4CF	AND		 	 
- stack 1: 0x6C8
- stack 0: 0x2
4945	 4D0	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0x2
- stack 0: 0x1
4946	 4D2	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x2
4947	 4D3	PUSH2	00A0	 	 
- stack 2: 0x6C8
- stack 1: 0x2
- stack 0: 0xA0
4948	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x6C8
4949	 4D7	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
4950	 4D9	ADD		 	 
- stack 0: 0x6CC
4951	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
4952	 4DB	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x4E0FFCC016F001103F000000572FFFE0095FAAB0535000005350000041D0000
4953	 4DC	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x4E0FFCC016F001103F000000572FFFE0095FAAB0535000005350000041D0000
- stack 0: 0xF0
4954	 4DE	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x4E0
4955	 4DF	JUMP		 	 
- stack 0: 0x6CC
4956	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x6CC
4957	 4E1	PUSH2	0080	 	 
- stack 1: 0x6CC
- stack 0: 0x80
4958	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x6CC
- stack 0: 0x2
4959	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4960	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6CC
- stack 0: 0x2
4961	 4EB	PUSH2	00A0	 	 
- stack 2: 0x6CC
- stack 1: 0x2
- stack 0: 0xA0
4962	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x6CC
- stack 1: 0x2
- stack 0: 0x2
4963	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6CC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4964	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6CC
- stack 1: 0x2
- stack 0: 0x2
4965	 4F5	SUB		 	 
- stack 1: 0x6CC
- stack 0: 0x0
4966	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0x4FE
4967	 4F9	JUMPI		 	 
- stack 0: 0x6CC
4968	 4FA	PUSH2	0518	 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 1: 0x6CC
- stack 0: 0x518
4969	 4FD	JUMP		 	 
- stack 0: 0x6CC
4970	 518	JUMPDEST		 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x6CC
4971	 519	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
4972	 51B	ADD		 	 
- stack 0: 0x6D0
4973	 51C	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
4974	 51D	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x16F001103F000000572FFFE0095FAAB0535000005350000041D000001DE01E8
4975	 51E	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x16F001103F000000572FFFE0095FAAB0535000005350000041D000001DE01E8
- stack 0: 0xF0
4976	 520	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x16F
4977	 521	JUMP		 	 
- stack 0: 0x6D0
4978	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6D0
4979	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
4980	 171	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x16F001103F000000572FFFE0095FAAB0535000005350000041D000001DE01E8
4981	 172	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x16F001103F000000572FFFE0095FAAB0535000005350000041D000001DE01E8
- stack 0: 0xE0
4982	 174	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x16F0011
4983	 175	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x16F0011
- stack 0: 0xFFFF
4984	 178	AND		 	 
- stack 1: 0x6D0
- stack 0: 0x11
4985	 179	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0x11
- stack 0: 0x1
4986	 17B	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0x11
4987	 17C	PUSH2	0380	 	 
- stack 2: 0x6D0
- stack 1: 0x11
- stack 0: 0x380
4988	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x6D0
4989	 180	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
4990	 182	ADD		 	 
- stack 0: 0x6D4
4991	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
4992	 184	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x3F000000572FFFE0095FAAB0535000005350000041D000001DE01E8042C000A
4993	 185	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x3F000000572FFFE0095FAAB0535000005350000041D000001DE01E8042C000A
- stack 0: 0xF0
4994	 187	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x3F0
4995	 188	JUMP		 	 
- stack 0: 0x6D4
4996	 3F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6D4
4997	 3F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
4998	 3F2	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x3F000000572FFFE0095FAAB0535000005350000041D000001DE01E8042C000A
4999	 3F3	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0x3F000000572FFFE0095FAAB0535000005350000041D000001DE01E8042C000A
- stack 0: 0xE0
5000	 3F5	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x3F00000
5001	 3F6	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x3F00000
- stack 0: 0xFFFF
5002	 3F9	AND		 	 
- stack 1: 0x6D4
- stack 0: 0x0
5003	 3FA	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0x0
- stack 0: 0x1
5004	 3FC	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0x0
5005	 3FD	PUSH2	0080	 	 
- stack 2: 0x6D4
- stack 1: 0x0
- stack 0: 0x80
5006	 400	MSTORE		 	  ;; # store to x4
- stack 0: 0x6D4
5007	 401	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
5008	 403	ADD		 	 
- stack 0: 0x6D8
5009	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
5010	 405	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x572FFFE0095FAAB0535000005350000041D000001DE01E8042C000A047E000A
5011	 406	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x572FFFE0095FAAB0535000005350000041D000001DE01E8042C000A047E000A
- stack 0: 0xF0
5012	 408	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x572
5013	 409	JUMP		 	 
- stack 0: 0x6D8
5014	 572	JUMPDEST		 ;; __riscvimpl_LUI_ffffe0b7	  ;; # instr: lui ra,0xffffe(ignore imm)
- stack 0: 0x6D8
5015	 573	PUSH4	ffffe000	 	 
- stack 1: 0x6D8
- stack 0: 0xFFFFE000
5016	 578	PUSH2	0020	 	 
- stack 2: 0x6D8
- stack 1: 0xFFFFE000
- stack 0: 0x20
5017	 57B	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D8
5018	 57C	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
5019	 57E	ADD		 	 
- stack 0: 0x6DC
5020	 57F	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
5021	 580	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x95FAAB0535000005350000041D000001DE01E8042C000A047E000A0585FFFE
5022	 581	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x95FAAB0535000005350000041D000001DE01E8042C000A047E000A0585FFFE
- stack 0: 0xF0
5023	 583	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x95
5024	 584	JUMP		 	 
- stack 0: 0x6DC
5025	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x6DC
5026	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
5027	 97	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x95FAAB0535000005350000041D000001DE01E8042C000A047E000A0585FFFE
5028	 98	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x95FAAB0535000005350000041D000001DE01E8042C000A047E000A0585FFFE
- stack 0: 0xE0
5029	 9A	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x95FAAB
5030	 9B	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x95FAAB
- stack 0: 0xFFFF
5031	 9E	AND		 	 
- stack 1: 0x6DC
- stack 0: 0xFAAB
5032	 9F	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0xFAAB
- stack 0: 0x1
5033	 A1	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
5034	 A2	PUSH2	0020	 	 
- stack 2: 0x6DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0x20
5035	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x6DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0xFFFFE000
5036	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x6DC
- stack 0: 0xFFFFDAAB
5037	 A7	PUSH2	0020	 	 
- stack 2: 0x6DC
- stack 1: 0xFFFFDAAB
- stack 0: 0x20
5038	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x6DC
5039	 AB	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
5040	 AD	ADD		 	 
- stack 0: 0x6E0
5041	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
5042	 AF	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x535000005350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB
5043	 B0	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x535000005350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB
- stack 0: 0xF0
5044	 B2	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x535
5045	 B3	JUMP		 	 
- stack 0: 0x6E0
5046	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E0
5047	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
5048	 537	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x535000005350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB
5049	 538	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x535000005350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB
- stack 0: 0xE0
5050	 53A	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x5350000
5051	 53B	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x5350000
- stack 0: 0xFFFF
5052	 53E	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
5053	 53F	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
5054	 541	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
5055	 542	POP		 	 
- stack 0: 0x6E0
5056	 543	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
5057	 545	ADD		 	 
- stack 0: 0x6E4
5058	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
5059	 547	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x5350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB01890188
5060	 548	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x5350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB01890188
- stack 0: 0xF0
5061	 54A	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x535
5062	 54B	JUMP		 	 
- stack 0: 0x6E4
5063	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E4
5064	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
5065	 537	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x5350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB01890188
5066	 538	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x5350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB01890188
- stack 0: 0xE0
5067	 53A	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x5350000
5068	 53B	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x5350000
- stack 0: 0xFFFF
5069	 53E	AND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
5070	 53F	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x1
5071	 541	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
5072	 542	POP		 	 
- stack 0: 0x6E4
5073	 543	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
5074	 545	ADD		 	 
- stack 0: 0x6E8
5075	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
5076	 547	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x41D000001DE01E8042C000A047E000A0585FFFE0210FAAB0189018803890001
5077	 548	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x41D000001DE01E8042C000A047E000A0585FFFE0210FAAB0189018803890001
- stack 0: 0xF0
5078	 54A	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x41D
5079	 54B	JUMP		 	 
- stack 0: 0x6E8
5080	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x6E8
5081	 41E	DUP1		 	 
- stack 1: 0x6E8
- stack 0: 0x6E8
5082	 41F	PUSH2	0040	 	 
- stack 2: 0x6E8
- stack 1: 0x6E8
- stack 0: 0x40
5083	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x6E8
5084	 423	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
5085	 425	ADD		 	 
- stack 0: 0x6EC
5086	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
5087	 427	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x1DE01E8042C000A047E000A0585FFFE0210FAAB018901880389000104C60002
5088	 428	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x1DE01E8042C000A047E000A0585FFFE0210FAAB018901880389000104C60002
- stack 0: 0xF0
5089	 42A	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x1DE
5090	 42B	JUMP		 	 
- stack 0: 0x6EC
5091	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x6EC
5092	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
5093	 1E0	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x1DE01E8042C000A047E000A0585FFFE0210FAAB018901880389000104C60002
5094	 1E1	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x1DE01E8042C000A047E000A0585FFFE0210FAAB018901880389000104C60002
- stack 0: 0xE0
5095	 1E3	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x1DE01E8
5096	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x1DE01E8
- stack 0: 0xFFFF
5097	 1E7	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x1E8
5098	 1E8	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x1E8
- stack 0: 0x1
5099	 1EA	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x1E8
5100	 1EB	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0x1E8
- stack 0: 0x40
5101	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x6EC
- stack 1: 0x1E8
- stack 0: 0x6E8
5102	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x6EC
- stack 0: 0x8D0
5103	 1F0	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0x8D0
- stack 0: 0x40
5104	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x6EC
5105	 1F4	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
5106	 1F6	ADD		 	 
- stack 0: 0x6F0
5107	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
5108	 1F8	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x42C000A047E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC
5109	 1F9	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x42C000A047E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC
- stack 0: 0xF0
5110	 1FB	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x42C
5111	 1FC	JUMP		 	 
- stack 0: 0x6F0
5112	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x6F0
5113	 42D	PUSH2	0040	 	 
- stack 1: 0x6F0
- stack 0: 0x40
5114	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x6F0
- stack 0: 0x8D0
5115	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6F0
- stack 1: 0x8D0
- stack 0: 0x6F0
5116	 432	MLOAD		 	 
- stack 2: 0x6F0
- stack 1: 0x8D0
- stack 0: 0x42C000A047E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC
5117	 433	PUSH1	E0	 	 
- stack 3: 0x6F0
- stack 2: 0x8D0
- stack 1: 0x42C000A047E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC
- stack 0: 0xE0
5118	 435	SHR		 	 
- stack 2: 0x6F0
- stack 1: 0x8D0
- stack 0: 0x42C000A
5119	 436	PUSH2	FFFF	 	 
- stack 3: 0x6F0
- stack 2: 0x8D0
- stack 1: 0x42C000A
- stack 0: 0xFFFF
5120	 439	AND		 	 
- stack 2: 0x6F0
- stack 1: 0x8D0
- stack 0: 0xA
5121	 43A	PUSH1	01	 	 
- stack 3: 0x6F0
- stack 2: 0x8D0
- stack 1: 0xA
- stack 0: 0x1
5122	 43C	SIGNEXTEND		 	 
- stack 2: 0x6F0
- stack 1: 0x8D0
- stack 0: 0xA
5123	 43D	ADD		 	 
- stack 1: 0x6F0
- stack 0: 0x8DA
5124	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x8DA
- stack 0: 0xFFFFFFFF
5125	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F0
- stack 0: 0x8DA
5126	 444	PUSH1	02	 	 
- stack 2: 0x6F0
- stack 1: 0x8DA
- stack 0: 0x2
5127	 446	XOR		 	 
- stack 1: 0x6F0
- stack 0: 0x8D8
5128	 447	DUP1		 	 
- stack 2: 0x6F0
- stack 1: 0x8D8
- stack 0: 0x8D8
5129	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x6F0
- stack 1: 0x8D8
- stack 0: 0xAA00AABBA00A0AA0309856780000000000000000000000000000000000000000
5130	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x6F0
- stack 2: 0x8D8
- stack 1: 0xAA00AABBA00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5131	 46A	AND		 	 
- stack 2: 0x6F0
- stack 1: 0x8D8
- stack 0: 0xAABBA00A0AA0309856780000000000000000000000000000000000000000
5132	 46B	PUSH2	0020	 	 
- stack 3: 0x6F0
- stack 2: 0x8D8
- stack 1: 0xAABBA00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0x20
5133	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x6F0
- stack 2: 0x8D8
- stack 1: 0xAABBA00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0xFFFFDAAB
5134	 46F	PUSH1	F0	 	 
- stack 4: 0x6F0
- stack 3: 0x8D8
- stack 2: 0xAABBA00A0AA0309856780000000000000000000000000000000000000000
- stack 1: 0xFFFFDAAB
- stack 0: 0xF0
5135	 471	SHL		 	 
- stack 3: 0x6F0
- stack 2: 0x8D8
- stack 1: 0xAABBA00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0xDAAB000000000000000000000000000000000000000000000000000000000000
5136	 472	ADD		 	 
- stack 2: 0x6F0
- stack 1: 0x8D8
- stack 0: 0xDAABAABBA00A0AA0309856780000000000000000000000000000000000000000
5137	 473	SWAP1		 	 
- stack 2: 0x6F0
- stack 1: 0xDAABAABBA00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0x8D8
5138	 474	MSTORE		 	 
- stack 0: 0x6F0
5139	 475	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
5140	 477	ADD		 	 
- stack 0: 0x6F4
5141	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
5142	 479	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x47E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC016F0012
5143	 47A	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x47E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC016F0012
- stack 0: 0xF0
5144	 47C	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x47E
5145	 47D	JUMP		 	 
- stack 0: 0x6F4
5146	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x6F4
5147	 47F	PUSH2	0040	 	 
- stack 1: 0x6F4
- stack 0: 0x40
5148	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x6F4
- stack 0: 0x8D0
5149	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5150	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F4
- stack 0: 0x8D0
5151	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6F4
- stack 1: 0x8D0
- stack 0: 0x6F4
5152	 48A	MLOAD		 	 
- stack 2: 0x6F4
- stack 1: 0x8D0
- stack 0: 0x47E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC016F0012
5153	 48B	PUSH1	E0	 	 
- stack 3: 0x6F4
- stack 2: 0x8D0
- stack 1: 0x47E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC016F0012
- stack 0: 0xE0
5154	 48D	SHR		 	 
- stack 2: 0x6F4
- stack 1: 0x8D0
- stack 0: 0x47E000A
5155	 48E	PUSH2	FFFF	 	 
- stack 3: 0x6F4
- stack 2: 0x8D0
- stack 1: 0x47E000A
- stack 0: 0xFFFF
5156	 491	AND		 	 
- stack 2: 0x6F4
- stack 1: 0x8D0
- stack 0: 0xA
5157	 492	PUSH1	01	 	 
- stack 3: 0x6F4
- stack 2: 0x8D0
- stack 1: 0xA
- stack 0: 0x1
5158	 494	SIGNEXTEND		 	 
- stack 2: 0x6F4
- stack 1: 0x8D0
- stack 0: 0xA
5159	 495	ADD		 	 
- stack 1: 0x6F4
- stack 0: 0x8DA
5160	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x8DA
- stack 0: 0xFFFFFFFF
5161	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F4
- stack 0: 0x8DA
5162	 49C	PUSH1	02	 	 
- stack 2: 0x6F4
- stack 1: 0x8DA
- stack 0: 0x2
5163	 49E	XOR		 	 
- stack 1: 0x6F4
- stack 0: 0x8D8
5164	 49F	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0xDAABAABBA00A0AA0309856780000000000000000000000000000000000000000
5165	 4A0	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0xDAABAABBA00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0xF0
5166	 4A2	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0xDAAB
5167	 4A3	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0xDAAB
- stack 0: 0x1
5168	 4A5	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDAAB
5169	 4A6	PUSH2	0060	 	 
- stack 2: 0x6F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDAAB
- stack 0: 0x60
5170	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x6F4
5171	 4AA	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
5172	 4AC	ADD		 	 
- stack 0: 0x6F8
5173	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
5174	 4AE	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x585FFFE0210FAAB018901880389000104C6000204E0FFCC016F001203F00000
5175	 4AF	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x585FFFE0210FAAB018901880389000104C6000204E0FFCC016F001203F00000
- stack 0: 0xF0
5176	 4B1	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x585
5177	 4B2	JUMP		 	 
- stack 0: 0x6F8
5178	 585	JUMPDEST		 ;; __riscvimpl_LUI_ffffeeb7	  ;; # instr: lui t4,0xffffe(ignore imm)
- stack 0: 0x6F8
5179	 586	PUSH4	ffffe000	 	 
- stack 1: 0x6F8
- stack 0: 0xFFFFE000
5180	 58B	PUSH2	03A0	 	 
- stack 2: 0x6F8
- stack 1: 0xFFFFE000
- stack 0: 0x3A0
5181	 58E	MSTORE		 	  ;; # store to x29
- stack 0: 0x6F8
5182	 58F	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
5183	 591	ADD		 	 
- stack 0: 0x6FC
5184	 592	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
5185	 593	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x210FAAB018901880389000104C6000204E0FFCC016F001203F00000041D0000
5186	 594	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x210FAAB018901880389000104C6000204E0FFCC016F001203F00000041D0000
- stack 0: 0xF0
5187	 596	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x210
5188	 597	JUMP		 	 
- stack 0: 0x6FC
5189	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x6FC
5190	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6FC
- stack 0: 0x6FC
5191	 212	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x210FAAB018901880389000104C6000204E0FFCC016F001203F00000041D0000
5192	 213	PUSH1	E0	 	 
- stack 2: 0x6FC
- stack 1: 0x210FAAB018901880389000104C6000204E0FFCC016F001203F00000041D0000
- stack 0: 0xE0
5193	 215	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x210FAAB
5194	 216	PUSH2	FFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x210FAAB
- stack 0: 0xFFFF
5195	 219	AND		 	 
- stack 1: 0x6FC
- stack 0: 0xFAAB
5196	 21A	PUSH1	01	 	 
- stack 2: 0x6FC
- stack 1: 0xFAAB
- stack 0: 0x1
5197	 21C	SIGNEXTEND		 	 
- stack 1: 0x6FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
5198	 21D	PUSH2	03A0	 	 
- stack 2: 0x6FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0x3A0
5199	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x6FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0xFFFFE000
5200	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x6FC
- stack 0: 0xFFFFDAAB
5201	 222	PUSH2	03A0	 	 
- stack 2: 0x6FC
- stack 1: 0xFFFFDAAB
- stack 0: 0x3A0
5202	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x6FC
5203	 226	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
5204	 228	ADD		 	 
- stack 0: 0x700
5205	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
5206	 22A	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x18901880389000104C6000204E0FFCC016F001203F00000041D000001DE01B8
5207	 22B	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x18901880389000104C6000204E0FFCC016F001203F00000041D000001DE01B8
- stack 0: 0xF0
5208	 22D	SHR		 	 
- stack 1: 0x700
- stack 0: 0x189
5209	 22E	JUMP		 	 
- stack 0: 0x700
5210	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x700
5211	 18A	PUSH2	0060	 	 
- stack 1: 0x700
- stack 0: 0x60
5212	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x700
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDAAB
5213	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x700
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDAAB
- stack 0: 0xFFFFFFFF
5214	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x700
- stack 0: 0xFFFFDAAB
5215	 194	PUSH2	03A0	 	 
- stack 2: 0x700
- stack 1: 0xFFFFDAAB
- stack 0: 0x3A0
5216	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x700
- stack 1: 0xFFFFDAAB
- stack 0: 0xFFFFDAAB
5217	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x700
- stack 2: 0xFFFFDAAB
- stack 1: 0xFFFFDAAB
- stack 0: 0xFFFFFFFF
5218	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x700
- stack 1: 0xFFFFDAAB
- stack 0: 0xFFFFDAAB
5219	 19E	SUB		 	 
- stack 1: 0x700
- stack 0: 0x0
5220	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x700
- stack 1: 0x0
- stack 0: 0x1A7
5221	 1A2	JUMPI		 	 
- stack 0: 0x700
5222	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x700
- stack 0: 0x1C1
5223	 1A6	JUMP		 	 
- stack 0: 0x700
5224	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x700
5225	 1C2	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
5226	 1C4	ADD		 	 
- stack 0: 0x704
5227	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
5228	 1C6	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x389000104C6000204E0FFCC016F001203F00000041D000001DE01B805980002
5229	 1C7	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x389000104C6000204E0FFCC016F001203F00000041D000001DE01B805980002
- stack 0: 0xF0
5230	 1C9	SHR		 	 
- stack 1: 0x704
- stack 0: 0x389
5231	 1CA	JUMP		 	 
- stack 0: 0x704
5232	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x704
5233	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x704
- stack 0: 0x704
5234	 38B	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x389000104C6000204E0FFCC016F001203F00000041D000001DE01B805980002
5235	 38C	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0x389000104C6000204E0FFCC016F001203F00000041D000001DE01B805980002
- stack 0: 0xE0
5236	 38E	SHR		 	 
- stack 1: 0x704
- stack 0: 0x3890001
5237	 38F	PUSH2	FFFF	 	 
- stack 2: 0x704
- stack 1: 0x3890001
- stack 0: 0xFFFF
5238	 392	AND		 	 
- stack 1: 0x704
- stack 0: 0x1
5239	 393	PUSH1	01	 	 
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0x1
5240	 395	SIGNEXTEND		 	 
- stack 1: 0x704
- stack 0: 0x1
5241	 396	PUSH2	0080	 	 
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0x80
5242	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0x0
5243	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x704
- stack 0: 0x1
5244	 39B	PUSH2	0080	 	 
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0x80
5245	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x704
5246	 39F	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
5247	 3A1	ADD		 	 
- stack 0: 0x708
5248	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
5249	 3A3	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x4C6000204E0FFCC016F001203F00000041D000001DE01B80598000200950233
5250	 3A4	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x4C6000204E0FFCC016F001203F00000041D000001DE01B80598000200950233
- stack 0: 0xF0
5251	 3A6	SHR		 	 
- stack 1: 0x708
- stack 0: 0x4C6
5252	 3A7	JUMP		 	 
- stack 0: 0x708
5253	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x708
5254	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x708
- stack 0: 0x708
5255	 4C8	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x4C6000204E0FFCC016F001203F00000041D000001DE01B80598000200950233
5256	 4C9	PUSH1	E0	 	 
- stack 2: 0x708
- stack 1: 0x4C6000204E0FFCC016F001203F00000041D000001DE01B80598000200950233
- stack 0: 0xE0
5257	 4CB	SHR		 	 
- stack 1: 0x708
- stack 0: 0x4C60002
5258	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x708
- stack 1: 0x4C60002
- stack 0: 0xFFFF
5259	 4CF	AND		 	 
- stack 1: 0x708
- stack 0: 0x2
5260	 4D0	PUSH1	01	 	 
- stack 2: 0x708
- stack 1: 0x2
- stack 0: 0x1
5261	 4D2	SIGNEXTEND		 	 
- stack 1: 0x708
- stack 0: 0x2
5262	 4D3	PUSH2	00A0	 	 
- stack 2: 0x708
- stack 1: 0x2
- stack 0: 0xA0
5263	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x708
5264	 4D7	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
5265	 4D9	ADD		 	 
- stack 0: 0x70C
5266	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
5267	 4DB	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x4E0FFCC016F001203F00000041D000001DE01B80598000200950233042C0000
5268	 4DC	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0x4E0FFCC016F001203F00000041D000001DE01B80598000200950233042C0000
- stack 0: 0xF0
5269	 4DE	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x4E0
5270	 4DF	JUMP		 	 
- stack 0: 0x70C
5271	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x70C
5272	 4E1	PUSH2	0080	 	 
- stack 1: 0x70C
- stack 0: 0x80
5273	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x70C
- stack 0: 0x1
5274	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x70C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5275	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x70C
- stack 0: 0x1
5276	 4EB	PUSH2	00A0	 	 
- stack 2: 0x70C
- stack 1: 0x1
- stack 0: 0xA0
5277	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x70C
- stack 1: 0x1
- stack 0: 0x2
5278	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x70C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5279	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x70C
- stack 1: 0x1
- stack 0: 0x2
5280	 4F5	SUB		 	 
- stack 1: 0x70C
- stack 0: 0x1
5281	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x70C
- stack 1: 0x1
- stack 0: 0x4FE
5282	 4F9	JUMPI		 	 
- stack 0: 0x70C
5283	 4FE	JUMPDEST		 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x70C
5284	 4FF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
5285	 500	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x4E0FFCC016F001203F00000041D000001DE01B80598000200950233042C0000
5286	 501	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0x4E0FFCC016F001203F00000041D000001DE01B80598000200950233042C0000
- stack 0: 0xE0
5287	 503	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x4E0FFCC
5288	 504	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0x4E0FFCC
- stack 0: 0xFFFF
5289	 507	AND		 	 
- stack 1: 0x70C
- stack 0: 0xFFCC
5290	 508	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0xFFCC
- stack 0: 0x1
5291	 50A	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
5292	 50B	ADD		 	 
- stack 0: 0x6D8
5293	 50C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6D8
- stack 0: 0xFFFFFFFF
5294	 511	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6D8
5295	 512	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
5296	 513	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x572FFFE0095FAAB0535000005350000041D000001DE01E8042C000A047E000A
5297	 514	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x572FFFE0095FAAB0535000005350000041D000001DE01E8042C000A047E000A
- stack 0: 0xF0
5298	 516	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x572
5299	 517	JUMP		 	 
- stack 0: 0x6D8
5300	 572	JUMPDEST		 ;; __riscvimpl_LUI_ffffe0b7	  ;; # instr: lui ra,0xffffe(ignore imm)
- stack 0: 0x6D8
5301	 573	PUSH4	ffffe000	 	 
- stack 1: 0x6D8
- stack 0: 0xFFFFE000
5302	 578	PUSH2	0020	 	 
- stack 2: 0x6D8
- stack 1: 0xFFFFE000
- stack 0: 0x20
5303	 57B	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D8
5304	 57C	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
5305	 57E	ADD		 	 
- stack 0: 0x6DC
5306	 57F	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
5307	 580	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x95FAAB0535000005350000041D000001DE01E8042C000A047E000A0585FFFE
5308	 581	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x95FAAB0535000005350000041D000001DE01E8042C000A047E000A0585FFFE
- stack 0: 0xF0
5309	 583	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x95
5310	 584	JUMP		 	 
- stack 0: 0x6DC
5311	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x6DC
5312	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
5313	 97	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x95FAAB0535000005350000041D000001DE01E8042C000A047E000A0585FFFE
5314	 98	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x95FAAB0535000005350000041D000001DE01E8042C000A047E000A0585FFFE
- stack 0: 0xE0
5315	 9A	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x95FAAB
5316	 9B	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x95FAAB
- stack 0: 0xFFFF
5317	 9E	AND		 	 
- stack 1: 0x6DC
- stack 0: 0xFAAB
5318	 9F	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0xFAAB
- stack 0: 0x1
5319	 A1	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
5320	 A2	PUSH2	0020	 	 
- stack 2: 0x6DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0x20
5321	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x6DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0xFFFFE000
5322	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x6DC
- stack 0: 0xFFFFDAAB
5323	 A7	PUSH2	0020	 	 
- stack 2: 0x6DC
- stack 1: 0xFFFFDAAB
- stack 0: 0x20
5324	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x6DC
5325	 AB	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
5326	 AD	ADD		 	 
- stack 0: 0x6E0
5327	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
5328	 AF	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x535000005350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB
5329	 B0	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x535000005350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB
- stack 0: 0xF0
5330	 B2	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x535
5331	 B3	JUMP		 	 
- stack 0: 0x6E0
5332	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E0
5333	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
5334	 537	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x535000005350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB
5335	 538	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x535000005350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB
- stack 0: 0xE0
5336	 53A	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x5350000
5337	 53B	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x5350000
- stack 0: 0xFFFF
5338	 53E	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
5339	 53F	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
5340	 541	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
5341	 542	POP		 	 
- stack 0: 0x6E0
5342	 543	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
5343	 545	ADD		 	 
- stack 0: 0x6E4
5344	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
5345	 547	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x5350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB01890188
5346	 548	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x5350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB01890188
- stack 0: 0xF0
5347	 54A	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x535
5348	 54B	JUMP		 	 
- stack 0: 0x6E4
5349	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E4
5350	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
5351	 537	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x5350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB01890188
5352	 538	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x5350000041D000001DE01E8042C000A047E000A0585FFFE0210FAAB01890188
- stack 0: 0xE0
5353	 53A	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x5350000
5354	 53B	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x5350000
- stack 0: 0xFFFF
5355	 53E	AND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
5356	 53F	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x1
5357	 541	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
5358	 542	POP		 	 
- stack 0: 0x6E4
5359	 543	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
5360	 545	ADD		 	 
- stack 0: 0x6E8
5361	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
5362	 547	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x41D000001DE01E8042C000A047E000A0585FFFE0210FAAB0189018803890001
5363	 548	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x41D000001DE01E8042C000A047E000A0585FFFE0210FAAB0189018803890001
- stack 0: 0xF0
5364	 54A	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x41D
5365	 54B	JUMP		 	 
- stack 0: 0x6E8
5366	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x6E8
5367	 41E	DUP1		 	 
- stack 1: 0x6E8
- stack 0: 0x6E8
5368	 41F	PUSH2	0040	 	 
- stack 2: 0x6E8
- stack 1: 0x6E8
- stack 0: 0x40
5369	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x6E8
5370	 423	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
5371	 425	ADD		 	 
- stack 0: 0x6EC
5372	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
5373	 427	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x1DE01E8042C000A047E000A0585FFFE0210FAAB018901880389000104C60002
5374	 428	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x1DE01E8042C000A047E000A0585FFFE0210FAAB018901880389000104C60002
- stack 0: 0xF0
5375	 42A	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x1DE
5376	 42B	JUMP		 	 
- stack 0: 0x6EC
5377	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x6EC
5378	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
5379	 1E0	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x1DE01E8042C000A047E000A0585FFFE0210FAAB018901880389000104C60002
5380	 1E1	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x1DE01E8042C000A047E000A0585FFFE0210FAAB018901880389000104C60002
- stack 0: 0xE0
5381	 1E3	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x1DE01E8
5382	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x1DE01E8
- stack 0: 0xFFFF
5383	 1E7	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x1E8
5384	 1E8	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x1E8
- stack 0: 0x1
5385	 1EA	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x1E8
5386	 1EB	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0x1E8
- stack 0: 0x40
5387	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x6EC
- stack 1: 0x1E8
- stack 0: 0x6E8
5388	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x6EC
- stack 0: 0x8D0
5389	 1F0	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0x8D0
- stack 0: 0x40
5390	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x6EC
5391	 1F4	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
5392	 1F6	ADD		 	 
- stack 0: 0x6F0
5393	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
5394	 1F8	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x42C000A047E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC
5395	 1F9	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x42C000A047E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC
- stack 0: 0xF0
5396	 1FB	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x42C
5397	 1FC	JUMP		 	 
- stack 0: 0x6F0
5398	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x6F0
5399	 42D	PUSH2	0040	 	 
- stack 1: 0x6F0
- stack 0: 0x40
5400	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x6F0
- stack 0: 0x8D0
5401	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6F0
- stack 1: 0x8D0
- stack 0: 0x6F0
5402	 432	MLOAD		 	 
- stack 2: 0x6F0
- stack 1: 0x8D0
- stack 0: 0x42C000A047E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC
5403	 433	PUSH1	E0	 	 
- stack 3: 0x6F0
- stack 2: 0x8D0
- stack 1: 0x42C000A047E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC
- stack 0: 0xE0
5404	 435	SHR		 	 
- stack 2: 0x6F0
- stack 1: 0x8D0
- stack 0: 0x42C000A
5405	 436	PUSH2	FFFF	 	 
- stack 3: 0x6F0
- stack 2: 0x8D0
- stack 1: 0x42C000A
- stack 0: 0xFFFF
5406	 439	AND		 	 
- stack 2: 0x6F0
- stack 1: 0x8D0
- stack 0: 0xA
5407	 43A	PUSH1	01	 	 
- stack 3: 0x6F0
- stack 2: 0x8D0
- stack 1: 0xA
- stack 0: 0x1
5408	 43C	SIGNEXTEND		 	 
- stack 2: 0x6F0
- stack 1: 0x8D0
- stack 0: 0xA
5409	 43D	ADD		 	 
- stack 1: 0x6F0
- stack 0: 0x8DA
5410	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x8DA
- stack 0: 0xFFFFFFFF
5411	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F0
- stack 0: 0x8DA
5412	 444	PUSH1	02	 	 
- stack 2: 0x6F0
- stack 1: 0x8DA
- stack 0: 0x2
5413	 446	XOR		 	 
- stack 1: 0x6F0
- stack 0: 0x8D8
5414	 447	DUP1		 	 
- stack 2: 0x6F0
- stack 1: 0x8D8
- stack 0: 0x8D8
5415	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x6F0
- stack 1: 0x8D8
- stack 0: 0xDAABAABBA00A0AA0309856780000000000000000000000000000000000000000
5416	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x6F0
- stack 2: 0x8D8
- stack 1: 0xDAABAABBA00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5417	 46A	AND		 	 
- stack 2: 0x6F0
- stack 1: 0x8D8
- stack 0: 0xAABBA00A0AA0309856780000000000000000000000000000000000000000
5418	 46B	PUSH2	0020	 	 
- stack 3: 0x6F0
- stack 2: 0x8D8
- stack 1: 0xAABBA00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0x20
5419	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x6F0
- stack 2: 0x8D8
- stack 1: 0xAABBA00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0xFFFFDAAB
5420	 46F	PUSH1	F0	 	 
- stack 4: 0x6F0
- stack 3: 0x8D8
- stack 2: 0xAABBA00A0AA0309856780000000000000000000000000000000000000000
- stack 1: 0xFFFFDAAB
- stack 0: 0xF0
5421	 471	SHL		 	 
- stack 3: 0x6F0
- stack 2: 0x8D8
- stack 1: 0xAABBA00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0xDAAB000000000000000000000000000000000000000000000000000000000000
5422	 472	ADD		 	 
- stack 2: 0x6F0
- stack 1: 0x8D8
- stack 0: 0xDAABAABBA00A0AA0309856780000000000000000000000000000000000000000
5423	 473	SWAP1		 	 
- stack 2: 0x6F0
- stack 1: 0xDAABAABBA00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0x8D8
5424	 474	MSTORE		 	 
- stack 0: 0x6F0
5425	 475	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
5426	 477	ADD		 	 
- stack 0: 0x6F4
5427	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
5428	 479	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x47E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC016F0012
5429	 47A	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x47E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC016F0012
- stack 0: 0xF0
5430	 47C	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x47E
5431	 47D	JUMP		 	 
- stack 0: 0x6F4
5432	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x6F4
5433	 47F	PUSH2	0040	 	 
- stack 1: 0x6F4
- stack 0: 0x40
5434	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x6F4
- stack 0: 0x8D0
5435	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5436	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F4
- stack 0: 0x8D0
5437	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6F4
- stack 1: 0x8D0
- stack 0: 0x6F4
5438	 48A	MLOAD		 	 
- stack 2: 0x6F4
- stack 1: 0x8D0
- stack 0: 0x47E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC016F0012
5439	 48B	PUSH1	E0	 	 
- stack 3: 0x6F4
- stack 2: 0x8D0
- stack 1: 0x47E000A0585FFFE0210FAAB018901880389000104C6000204E0FFCC016F0012
- stack 0: 0xE0
5440	 48D	SHR		 	 
- stack 2: 0x6F4
- stack 1: 0x8D0
- stack 0: 0x47E000A
5441	 48E	PUSH2	FFFF	 	 
- stack 3: 0x6F4
- stack 2: 0x8D0
- stack 1: 0x47E000A
- stack 0: 0xFFFF
5442	 491	AND		 	 
- stack 2: 0x6F4
- stack 1: 0x8D0
- stack 0: 0xA
5443	 492	PUSH1	01	 	 
- stack 3: 0x6F4
- stack 2: 0x8D0
- stack 1: 0xA
- stack 0: 0x1
5444	 494	SIGNEXTEND		 	 
- stack 2: 0x6F4
- stack 1: 0x8D0
- stack 0: 0xA
5445	 495	ADD		 	 
- stack 1: 0x6F4
- stack 0: 0x8DA
5446	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x8DA
- stack 0: 0xFFFFFFFF
5447	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F4
- stack 0: 0x8DA
5448	 49C	PUSH1	02	 	 
- stack 2: 0x6F4
- stack 1: 0x8DA
- stack 0: 0x2
5449	 49E	XOR		 	 
- stack 1: 0x6F4
- stack 0: 0x8D8
5450	 49F	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0xDAABAABBA00A0AA0309856780000000000000000000000000000000000000000
5451	 4A0	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0xDAABAABBA00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0xF0
5452	 4A2	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0xDAAB
5453	 4A3	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0xDAAB
- stack 0: 0x1
5454	 4A5	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDAAB
5455	 4A6	PUSH2	0060	 	 
- stack 2: 0x6F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDAAB
- stack 0: 0x60
5456	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x6F4
5457	 4AA	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
5458	 4AC	ADD		 	 
- stack 0: 0x6F8
5459	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
5460	 4AE	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x585FFFE0210FAAB018901880389000104C6000204E0FFCC016F001203F00000
5461	 4AF	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x585FFFE0210FAAB018901880389000104C6000204E0FFCC016F001203F00000
- stack 0: 0xF0
5462	 4B1	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x585
5463	 4B2	JUMP		 	 
- stack 0: 0x6F8
5464	 585	JUMPDEST		 ;; __riscvimpl_LUI_ffffeeb7	  ;; # instr: lui t4,0xffffe(ignore imm)
- stack 0: 0x6F8
5465	 586	PUSH4	ffffe000	 	 
- stack 1: 0x6F8
- stack 0: 0xFFFFE000
5466	 58B	PUSH2	03A0	 	 
- stack 2: 0x6F8
- stack 1: 0xFFFFE000
- stack 0: 0x3A0
5467	 58E	MSTORE		 	  ;; # store to x29
- stack 0: 0x6F8
5468	 58F	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
5469	 591	ADD		 	 
- stack 0: 0x6FC
5470	 592	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
5471	 593	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x210FAAB018901880389000104C6000204E0FFCC016F001203F00000041D0000
5472	 594	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x210FAAB018901880389000104C6000204E0FFCC016F001203F00000041D0000
- stack 0: 0xF0
5473	 596	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x210
5474	 597	JUMP		 	 
- stack 0: 0x6FC
5475	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x6FC
5476	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6FC
- stack 0: 0x6FC
5477	 212	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x210FAAB018901880389000104C6000204E0FFCC016F001203F00000041D0000
5478	 213	PUSH1	E0	 	 
- stack 2: 0x6FC
- stack 1: 0x210FAAB018901880389000104C6000204E0FFCC016F001203F00000041D0000
- stack 0: 0xE0
5479	 215	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x210FAAB
5480	 216	PUSH2	FFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x210FAAB
- stack 0: 0xFFFF
5481	 219	AND		 	 
- stack 1: 0x6FC
- stack 0: 0xFAAB
5482	 21A	PUSH1	01	 	 
- stack 2: 0x6FC
- stack 1: 0xFAAB
- stack 0: 0x1
5483	 21C	SIGNEXTEND		 	 
- stack 1: 0x6FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
5484	 21D	PUSH2	03A0	 	 
- stack 2: 0x6FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0x3A0
5485	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x6FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0xFFFFE000
5486	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x6FC
- stack 0: 0xFFFFDAAB
5487	 222	PUSH2	03A0	 	 
- stack 2: 0x6FC
- stack 1: 0xFFFFDAAB
- stack 0: 0x3A0
5488	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x6FC
5489	 226	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
5490	 228	ADD		 	 
- stack 0: 0x700
5491	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
5492	 22A	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x18901880389000104C6000204E0FFCC016F001203F00000041D000001DE01B8
5493	 22B	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x18901880389000104C6000204E0FFCC016F001203F00000041D000001DE01B8
- stack 0: 0xF0
5494	 22D	SHR		 	 
- stack 1: 0x700
- stack 0: 0x189
5495	 22E	JUMP		 	 
- stack 0: 0x700
5496	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x700
5497	 18A	PUSH2	0060	 	 
- stack 1: 0x700
- stack 0: 0x60
5498	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x700
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDAAB
5499	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x700
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDAAB
- stack 0: 0xFFFFFFFF
5500	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x700
- stack 0: 0xFFFFDAAB
5501	 194	PUSH2	03A0	 	 
- stack 2: 0x700
- stack 1: 0xFFFFDAAB
- stack 0: 0x3A0
5502	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x700
- stack 1: 0xFFFFDAAB
- stack 0: 0xFFFFDAAB
5503	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x700
- stack 2: 0xFFFFDAAB
- stack 1: 0xFFFFDAAB
- stack 0: 0xFFFFFFFF
5504	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x700
- stack 1: 0xFFFFDAAB
- stack 0: 0xFFFFDAAB
5505	 19E	SUB		 	 
- stack 1: 0x700
- stack 0: 0x0
5506	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x700
- stack 1: 0x0
- stack 0: 0x1A7
5507	 1A2	JUMPI		 	 
- stack 0: 0x700
5508	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x700
- stack 0: 0x1C1
5509	 1A6	JUMP		 	 
- stack 0: 0x700
5510	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x700
5511	 1C2	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
5512	 1C4	ADD		 	 
- stack 0: 0x704
5513	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
5514	 1C6	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x389000104C6000204E0FFCC016F001203F00000041D000001DE01B805980002
5515	 1C7	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x389000104C6000204E0FFCC016F001203F00000041D000001DE01B805980002
- stack 0: 0xF0
5516	 1C9	SHR		 	 
- stack 1: 0x704
- stack 0: 0x389
5517	 1CA	JUMP		 	 
- stack 0: 0x704
5518	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x704
5519	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x704
- stack 0: 0x704
5520	 38B	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x389000104C6000204E0FFCC016F001203F00000041D000001DE01B805980002
5521	 38C	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0x389000104C6000204E0FFCC016F001203F00000041D000001DE01B805980002
- stack 0: 0xE0
5522	 38E	SHR		 	 
- stack 1: 0x704
- stack 0: 0x3890001
5523	 38F	PUSH2	FFFF	 	 
- stack 2: 0x704
- stack 1: 0x3890001
- stack 0: 0xFFFF
5524	 392	AND		 	 
- stack 1: 0x704
- stack 0: 0x1
5525	 393	PUSH1	01	 	 
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0x1
5526	 395	SIGNEXTEND		 	 
- stack 1: 0x704
- stack 0: 0x1
5527	 396	PUSH2	0080	 	 
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0x80
5528	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0x1
5529	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x704
- stack 0: 0x2
5530	 39B	PUSH2	0080	 	 
- stack 2: 0x704
- stack 1: 0x2
- stack 0: 0x80
5531	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x704
5532	 39F	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
5533	 3A1	ADD		 	 
- stack 0: 0x708
5534	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
5535	 3A3	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x4C6000204E0FFCC016F001203F00000041D000001DE01B80598000200950233
5536	 3A4	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x4C6000204E0FFCC016F001203F00000041D000001DE01B80598000200950233
- stack 0: 0xF0
5537	 3A6	SHR		 	 
- stack 1: 0x708
- stack 0: 0x4C6
5538	 3A7	JUMP		 	 
- stack 0: 0x708
5539	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x708
5540	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x708
- stack 0: 0x708
5541	 4C8	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x4C6000204E0FFCC016F001203F00000041D000001DE01B80598000200950233
5542	 4C9	PUSH1	E0	 	 
- stack 2: 0x708
- stack 1: 0x4C6000204E0FFCC016F001203F00000041D000001DE01B80598000200950233
- stack 0: 0xE0
5543	 4CB	SHR		 	 
- stack 1: 0x708
- stack 0: 0x4C60002
5544	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x708
- stack 1: 0x4C60002
- stack 0: 0xFFFF
5545	 4CF	AND		 	 
- stack 1: 0x708
- stack 0: 0x2
5546	 4D0	PUSH1	01	 	 
- stack 2: 0x708
- stack 1: 0x2
- stack 0: 0x1
5547	 4D2	SIGNEXTEND		 	 
- stack 1: 0x708
- stack 0: 0x2
5548	 4D3	PUSH2	00A0	 	 
- stack 2: 0x708
- stack 1: 0x2
- stack 0: 0xA0
5549	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x708
5550	 4D7	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
5551	 4D9	ADD		 	 
- stack 0: 0x70C
5552	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
5553	 4DB	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x4E0FFCC016F001203F00000041D000001DE01B80598000200950233042C0000
5554	 4DC	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0x4E0FFCC016F001203F00000041D000001DE01B80598000200950233042C0000
- stack 0: 0xF0
5555	 4DE	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x4E0
5556	 4DF	JUMP		 	 
- stack 0: 0x70C
5557	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x70C
5558	 4E1	PUSH2	0080	 	 
- stack 1: 0x70C
- stack 0: 0x80
5559	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x70C
- stack 0: 0x2
5560	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x70C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5561	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x70C
- stack 0: 0x2
5562	 4EB	PUSH2	00A0	 	 
- stack 2: 0x70C
- stack 1: 0x2
- stack 0: 0xA0
5563	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x70C
- stack 1: 0x2
- stack 0: 0x2
5564	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x70C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5565	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x70C
- stack 1: 0x2
- stack 0: 0x2
5566	 4F5	SUB		 	 
- stack 1: 0x70C
- stack 0: 0x0
5567	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x70C
- stack 1: 0x0
- stack 0: 0x4FE
5568	 4F9	JUMPI		 	 
- stack 0: 0x70C
5569	 4FA	PUSH2	0518	 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 1: 0x70C
- stack 0: 0x518
5570	 4FD	JUMP		 	 
- stack 0: 0x70C
5571	 518	JUMPDEST		 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x70C
5572	 519	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
5573	 51B	ADD		 	 
- stack 0: 0x710
5574	 51C	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
5575	 51D	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x16F001203F00000041D000001DE01B80598000200950233042C0000047E0000
5576	 51E	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0x16F001203F00000041D000001DE01B80598000200950233042C0000047E0000
- stack 0: 0xF0
5577	 520	SHR		 	 
- stack 1: 0x710
- stack 0: 0x16F
5578	 521	JUMP		 	 
- stack 0: 0x710
5579	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x710
5580	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x710
- stack 0: 0x710
5581	 171	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x16F001203F00000041D000001DE01B80598000200950233042C0000047E0000
5582	 172	PUSH1	E0	 	 
- stack 2: 0x710
- stack 1: 0x16F001203F00000041D000001DE01B80598000200950233042C0000047E0000
- stack 0: 0xE0
5583	 174	SHR		 	 
- stack 1: 0x710
- stack 0: 0x16F0012
5584	 175	PUSH2	FFFF	 	 
- stack 2: 0x710
- stack 1: 0x16F0012
- stack 0: 0xFFFF
5585	 178	AND		 	 
- stack 1: 0x710
- stack 0: 0x12
5586	 179	PUSH1	01	 	 
- stack 2: 0x710
- stack 1: 0x12
- stack 0: 0x1
5587	 17B	SIGNEXTEND		 	 
- stack 1: 0x710
- stack 0: 0x12
5588	 17C	PUSH2	0380	 	 
- stack 2: 0x710
- stack 1: 0x12
- stack 0: 0x380
5589	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x710
5590	 180	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
5591	 182	ADD		 	 
- stack 0: 0x714
5592	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
5593	 184	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x3F00000041D000001DE01B80598000200950233042C0000047E000005AB0002
5594	 185	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x3F00000041D000001DE01B80598000200950233042C0000047E000005AB0002
- stack 0: 0xF0
5595	 187	SHR		 	 
- stack 1: 0x714
- stack 0: 0x3F0
5596	 188	JUMP		 	 
- stack 0: 0x714
5597	 3F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x714
5598	 3F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
5599	 3F2	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x3F00000041D000001DE01B80598000200950233042C0000047E000005AB0002
5600	 3F3	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x3F00000041D000001DE01B80598000200950233042C0000047E000005AB0002
- stack 0: 0xE0
5601	 3F5	SHR		 	 
- stack 1: 0x714
- stack 0: 0x3F00000
5602	 3F6	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x3F00000
- stack 0: 0xFFFF
5603	 3F9	AND		 	 
- stack 1: 0x714
- stack 0: 0x0
5604	 3FA	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0x0
- stack 0: 0x1
5605	 3FC	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0x0
5606	 3FD	PUSH2	0080	 	 
- stack 2: 0x714
- stack 1: 0x0
- stack 0: 0x80
5607	 400	MSTORE		 	  ;; # store to x4
- stack 0: 0x714
5608	 401	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
5609	 403	ADD		 	 
- stack 0: 0x718
5610	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
5611	 405	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x41D000001DE01B80598000200950233042C0000047E000005AB000202100233
5612	 406	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x41D000001DE01B80598000200950233042C0000047E000005AB000202100233
- stack 0: 0xF0
5613	 408	SHR		 	 
- stack 1: 0x718
- stack 0: 0x41D
5614	 409	JUMP		 	 
- stack 0: 0x718
5615	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x718
5616	 41E	DUP1		 	 
- stack 1: 0x718
- stack 0: 0x718
5617	 41F	PUSH2	0040	 	 
- stack 2: 0x718
- stack 1: 0x718
- stack 0: 0x40
5618	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x718
5619	 423	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
5620	 425	ADD		 	 
- stack 0: 0x71C
5621	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
5622	 427	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x1DE01B80598000200950233042C0000047E000005AB00020210023301890150
5623	 428	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x1DE01B80598000200950233042C0000047E000005AB00020210023301890150
- stack 0: 0xF0
5624	 42A	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x1DE
5625	 42B	JUMP		 	 
- stack 0: 0x71C
5626	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x71C
5627	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
5628	 1E0	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x1DE01B80598000200950233042C0000047E000005AB00020210023301890150
5629	 1E1	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x1DE01B80598000200950233042C0000047E000005AB00020210023301890150
- stack 0: 0xE0
5630	 1E3	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x1DE01B8
5631	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x1DE01B8
- stack 0: 0xFFFF
5632	 1E7	AND		 	 
- stack 1: 0x71C
- stack 0: 0x1B8
5633	 1E8	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0x1B8
- stack 0: 0x1
5634	 1EA	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0x1B8
5635	 1EB	PUSH2	0040	 	 
- stack 2: 0x71C
- stack 1: 0x1B8
- stack 0: 0x40
5636	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x71C
- stack 1: 0x1B8
- stack 0: 0x718
5637	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x71C
- stack 0: 0x8D0
5638	 1F0	PUSH2	0040	 	 
- stack 2: 0x71C
- stack 1: 0x8D0
- stack 0: 0x40
5639	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x71C
5640	 1F4	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
5641	 1F6	ADD		 	 
- stack 0: 0x720
5642	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
5643	 1F8	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x598000200950233042C0000047E000005AB0002021002330189015003890001
5644	 1F9	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0x598000200950233042C0000047E000005AB0002021002330189015003890001
- stack 0: 0xF0
5645	 1FB	SHR		 	 
- stack 1: 0x720
- stack 0: 0x598
5646	 1FC	JUMP		 	 
- stack 0: 0x720
5647	 598	JUMPDEST		 ;; __riscvimpl_LUI_20b7	  ;; # instr: lui ra,0x2(ignore imm)
- stack 0: 0x720
5648	 599	PUSH4	00002000	 	 
- stack 1: 0x720
- stack 0: 0x2000
5649	 59E	PUSH2	0020	 	 
- stack 2: 0x720
- stack 1: 0x2000
- stack 0: 0x20
5650	 5A1	MSTORE		 	  ;; # store to x1
- stack 0: 0x720
5651	 5A2	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
5652	 5A4	ADD		 	 
- stack 0: 0x724
5653	 5A5	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
5654	 5A6	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x950233042C0000047E000005AB000202100233018901500389000104C60002
5655	 5A7	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x950233042C0000047E000005AB000202100233018901500389000104C60002
- stack 0: 0xF0
5656	 5A9	SHR		 	 
- stack 1: 0x724
- stack 0: 0x95
5657	 5AA	JUMP		 	 
- stack 0: 0x724
5658	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x724
5659	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
5660	 97	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x950233042C0000047E000005AB000202100233018901500389000104C60002
5661	 98	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0x950233042C0000047E000005AB000202100233018901500389000104C60002
- stack 0: 0xE0
5662	 9A	SHR		 	 
- stack 1: 0x724
- stack 0: 0x950233
5663	 9B	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0x950233
- stack 0: 0xFFFF
5664	 9E	AND		 	 
- stack 1: 0x724
- stack 0: 0x233
5665	 9F	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x233
- stack 0: 0x1
5666	 A1	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x233
5667	 A2	PUSH2	0020	 	 
- stack 2: 0x724
- stack 1: 0x233
- stack 0: 0x20
5668	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x724
- stack 1: 0x233
- stack 0: 0x2000
5669	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x724
- stack 0: 0x2233
5670	 A7	PUSH2	0020	 	 
- stack 2: 0x724
- stack 1: 0x2233
- stack 0: 0x20
5671	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x724
5672	 AB	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
5673	 AD	ADD		 	 
- stack 0: 0x728
5674	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
5675	 AF	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x42C0000047E000005AB000202100233018901500389000104C6000204E0FFD4
5676	 B0	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x42C0000047E000005AB000202100233018901500389000104C6000204E0FFD4
- stack 0: 0xF0
5677	 B2	SHR		 	 
- stack 1: 0x728
- stack 0: 0x42C
5678	 B3	JUMP		 	 
- stack 0: 0x728
5679	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x728
5680	 42D	PUSH2	0040	 	 
- stack 1: 0x728
- stack 0: 0x40
5681	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x728
- stack 0: 0x8D0
5682	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x728
- stack 1: 0x8D0
- stack 0: 0x728
5683	 432	MLOAD		 	 
- stack 2: 0x728
- stack 1: 0x8D0
- stack 0: 0x42C0000047E000005AB000202100233018901500389000104C6000204E0FFD4
5684	 433	PUSH1	E0	 	 
- stack 3: 0x728
- stack 2: 0x8D0
- stack 1: 0x42C0000047E000005AB000202100233018901500389000104C6000204E0FFD4
- stack 0: 0xE0
5685	 435	SHR		 	 
- stack 2: 0x728
- stack 1: 0x8D0
- stack 0: 0x42C0000
5686	 436	PUSH2	FFFF	 	 
- stack 3: 0x728
- stack 2: 0x8D0
- stack 1: 0x42C0000
- stack 0: 0xFFFF
5687	 439	AND		 	 
- stack 2: 0x728
- stack 1: 0x8D0
- stack 0: 0x0
5688	 43A	PUSH1	01	 	 
- stack 3: 0x728
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
5689	 43C	SIGNEXTEND		 	 
- stack 2: 0x728
- stack 1: 0x8D0
- stack 0: 0x0
5690	 43D	ADD		 	 
- stack 1: 0x728
- stack 0: 0x8D0
5691	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x728
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5692	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x728
- stack 0: 0x8D0
5693	 444	PUSH1	02	 	 
- stack 2: 0x728
- stack 1: 0x8D0
- stack 0: 0x2
5694	 446	XOR		 	 
- stack 1: 0x728
- stack 0: 0x8D2
5695	 447	DUP1		 	 
- stack 2: 0x728
- stack 1: 0x8D2
- stack 0: 0x8D2
5696	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x728
- stack 1: 0x8D2
- stack 0: 0xCCDDABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
5697	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x728
- stack 2: 0x8D2
- stack 1: 0xCCDDABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5698	 46A	AND		 	 
- stack 2: 0x728
- stack 1: 0x8D2
- stack 0: 0xABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
5699	 46B	PUSH2	0020	 	 
- stack 3: 0x728
- stack 2: 0x8D2
- stack 1: 0xABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
- stack 0: 0x20
5700	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x728
- stack 2: 0x8D2
- stack 1: 0xABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
- stack 0: 0x2233
5701	 46F	PUSH1	F0	 	 
- stack 4: 0x728
- stack 3: 0x8D2
- stack 2: 0xABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
- stack 1: 0x2233
- stack 0: 0xF0
5702	 471	SHL		 	 
- stack 3: 0x728
- stack 2: 0x8D2
- stack 1: 0xABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
- stack 0: 0x2233000000000000000000000000000000000000000000000000000000000000
5703	 472	ADD		 	 
- stack 2: 0x728
- stack 1: 0x8D2
- stack 0: 0x2233ABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
5704	 473	SWAP1		 	 
- stack 2: 0x728
- stack 1: 0x2233ABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
- stack 0: 0x8D2
5705	 474	MSTORE		 	 
- stack 0: 0x728
5706	 475	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
5707	 477	ADD		 	 
- stack 0: 0x72C
5708	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
5709	 479	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x47E000005AB000202100233018901500389000104C6000204E0FFD4016F0013
5710	 47A	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x47E000005AB000202100233018901500389000104C6000204E0FFD4016F0013
- stack 0: 0xF0
5711	 47C	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x47E
5712	 47D	JUMP		 	 
- stack 0: 0x72C
5713	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x72C
5714	 47F	PUSH2	0040	 	 
- stack 1: 0x72C
- stack 0: 0x40
5715	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x72C
- stack 0: 0x8D0
5716	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5717	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x72C
- stack 0: 0x8D0
5718	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0x72C
5719	 48A	MLOAD		 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0x47E000005AB000202100233018901500389000104C6000204E0FFD4016F0013
5720	 48B	PUSH1	E0	 	 
- stack 3: 0x72C
- stack 2: 0x8D0
- stack 1: 0x47E000005AB000202100233018901500389000104C6000204E0FFD4016F0013
- stack 0: 0xE0
5721	 48D	SHR		 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0x47E0000
5722	 48E	PUSH2	FFFF	 	 
- stack 3: 0x72C
- stack 2: 0x8D0
- stack 1: 0x47E0000
- stack 0: 0xFFFF
5723	 491	AND		 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0x0
5724	 492	PUSH1	01	 	 
- stack 3: 0x72C
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
5725	 494	SIGNEXTEND		 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0x0
5726	 495	ADD		 	 
- stack 1: 0x72C
- stack 0: 0x8D0
5727	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5728	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x72C
- stack 0: 0x8D0
5729	 49C	PUSH1	02	 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0x2
5730	 49E	XOR		 	 
- stack 1: 0x72C
- stack 0: 0x8D2
5731	 49F	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x2233ABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
5732	 4A0	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x2233ABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
- stack 0: 0xF0
5733	 4A2	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x2233
5734	 4A3	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x2233
- stack 0: 0x1
5735	 4A5	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x2233
5736	 4A6	PUSH2	0060	 	 
- stack 2: 0x72C
- stack 1: 0x2233
- stack 0: 0x60
5737	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x72C
5738	 4AA	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
5739	 4AC	ADD		 	 
- stack 0: 0x730
5740	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
5741	 4AE	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x5AB000202100233018901500389000104C6000204E0FFD4016F001303F00000
5742	 4AF	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x5AB000202100233018901500389000104C6000204E0FFD4016F001303F00000
- stack 0: 0xF0
5743	 4B1	SHR		 	 
- stack 1: 0x730
- stack 0: 0x5AB
5744	 4B2	JUMP		 	 
- stack 0: 0x730
5745	 5AB	JUMPDEST		 ;; __riscvimpl_LUI_2eb7	  ;; # instr: lui t4,0x2(ignore imm)
- stack 0: 0x730
5746	 5AC	PUSH4	00002000	 	 
- stack 1: 0x730
- stack 0: 0x2000
5747	 5B1	PUSH2	03A0	 	 
- stack 2: 0x730
- stack 1: 0x2000
- stack 0: 0x3A0
5748	 5B4	MSTORE		 	  ;; # store to x29
- stack 0: 0x730
5749	 5B5	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
5750	 5B7	ADD		 	 
- stack 0: 0x734
5751	 5B8	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
5752	 5B9	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x2100233018901500389000104C6000204E0FFD4016F001303F00000041D0000
5753	 5BA	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0x2100233018901500389000104C6000204E0FFD4016F001303F00000041D0000
- stack 0: 0xF0
5754	 5BC	SHR		 	 
- stack 1: 0x734
- stack 0: 0x210
5755	 5BD	JUMP		 	 
- stack 0: 0x734
5756	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x734
5757	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x734
- stack 0: 0x734
5758	 212	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x2100233018901500389000104C6000204E0FFD4016F001303F00000041D0000
5759	 213	PUSH1	E0	 	 
- stack 2: 0x734
- stack 1: 0x2100233018901500389000104C6000204E0FFD4016F001303F00000041D0000
- stack 0: 0xE0
5760	 215	SHR		 	 
- stack 1: 0x734
- stack 0: 0x2100233
5761	 216	PUSH2	FFFF	 	 
- stack 2: 0x734
- stack 1: 0x2100233
- stack 0: 0xFFFF
5762	 219	AND		 	 
- stack 1: 0x734
- stack 0: 0x233
5763	 21A	PUSH1	01	 	 
- stack 2: 0x734
- stack 1: 0x233
- stack 0: 0x1
5764	 21C	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0x233
5765	 21D	PUSH2	03A0	 	 
- stack 2: 0x734
- stack 1: 0x233
- stack 0: 0x3A0
5766	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x734
- stack 1: 0x233
- stack 0: 0x2000
5767	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x734
- stack 0: 0x2233
5768	 222	PUSH2	03A0	 	 
- stack 2: 0x734
- stack 1: 0x2233
- stack 0: 0x3A0
5769	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x734
5770	 226	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
5771	 228	ADD		 	 
- stack 0: 0x738
5772	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
5773	 22A	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x18901500389000104C6000204E0FFD4016F001303F00000041D000001DE0180
5774	 22B	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x18901500389000104C6000204E0FFD4016F001303F00000041D000001DE0180
- stack 0: 0xF0
5775	 22D	SHR		 	 
- stack 1: 0x738
- stack 0: 0x189
5776	 22E	JUMP		 	 
- stack 0: 0x738
5777	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x738
5778	 18A	PUSH2	0060	 	 
- stack 1: 0x738
- stack 0: 0x60
5779	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x738
- stack 0: 0x2233
5780	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x738
- stack 1: 0x2233
- stack 0: 0xFFFFFFFF
5781	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x738
- stack 0: 0x2233
5782	 194	PUSH2	03A0	 	 
- stack 2: 0x738
- stack 1: 0x2233
- stack 0: 0x3A0
5783	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x738
- stack 1: 0x2233
- stack 0: 0x2233
5784	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x738
- stack 2: 0x2233
- stack 1: 0x2233
- stack 0: 0xFFFFFFFF
5785	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x738
- stack 1: 0x2233
- stack 0: 0x2233
5786	 19E	SUB		 	 
- stack 1: 0x738
- stack 0: 0x0
5787	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x738
- stack 1: 0x0
- stack 0: 0x1A7
5788	 1A2	JUMPI		 	 
- stack 0: 0x738
5789	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x738
- stack 0: 0x1C1
5790	 1A6	JUMP		 	 
- stack 0: 0x738
5791	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x738
5792	 1C2	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
5793	 1C4	ADD		 	 
- stack 0: 0x73C
5794	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
5795	 1C6	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x389000104C6000204E0FFD4016F001303F00000041D000001DE018005BE0001
5796	 1C7	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x389000104C6000204E0FFD4016F001303F00000041D000001DE018005BE0001
- stack 0: 0xF0
5797	 1C9	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x389
5798	 1CA	JUMP		 	 
- stack 0: 0x73C
5799	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x73C
5800	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x73C
- stack 0: 0x73C
5801	 38B	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x389000104C6000204E0FFD4016F001303F00000041D000001DE018005BE0001
5802	 38C	PUSH1	E0	 	 
- stack 2: 0x73C
- stack 1: 0x389000104C6000204E0FFD4016F001303F00000041D000001DE018005BE0001
- stack 0: 0xE0
5803	 38E	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x3890001
5804	 38F	PUSH2	FFFF	 	 
- stack 2: 0x73C
- stack 1: 0x3890001
- stack 0: 0xFFFF
5805	 392	AND		 	 
- stack 1: 0x73C
- stack 0: 0x1
5806	 393	PUSH1	01	 	 
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0x1
5807	 395	SIGNEXTEND		 	 
- stack 1: 0x73C
- stack 0: 0x1
5808	 396	PUSH2	0080	 	 
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0x80
5809	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0x0
5810	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x73C
- stack 0: 0x1
5811	 39B	PUSH2	0080	 	 
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0x80
5812	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x73C
5813	 39F	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
5814	 3A1	ADD		 	 
- stack 0: 0x740
5815	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
5816	 3A3	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x4C6000204E0FFD4016F001303F00000041D000001DE018005BE000100950223
5817	 3A4	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0x4C6000204E0FFD4016F001303F00000041D000001DE018005BE000100950223
- stack 0: 0xF0
5818	 3A6	SHR		 	 
- stack 1: 0x740
- stack 0: 0x4C6
5819	 3A7	JUMP		 	 
- stack 0: 0x740
5820	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x740
5821	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x740
- stack 0: 0x740
5822	 4C8	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x4C6000204E0FFD4016F001303F00000041D000001DE018005BE000100950223
5823	 4C9	PUSH1	E0	 	 
- stack 2: 0x740
- stack 1: 0x4C6000204E0FFD4016F001303F00000041D000001DE018005BE000100950223
- stack 0: 0xE0
5824	 4CB	SHR		 	 
- stack 1: 0x740
- stack 0: 0x4C60002
5825	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x740
- stack 1: 0x4C60002
- stack 0: 0xFFFF
5826	 4CF	AND		 	 
- stack 1: 0x740
- stack 0: 0x2
5827	 4D0	PUSH1	01	 	 
- stack 2: 0x740
- stack 1: 0x2
- stack 0: 0x1
5828	 4D2	SIGNEXTEND		 	 
- stack 1: 0x740
- stack 0: 0x2
5829	 4D3	PUSH2	00A0	 	 
- stack 2: 0x740
- stack 1: 0x2
- stack 0: 0xA0
5830	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x740
5831	 4D7	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
5832	 4D9	ADD		 	 
- stack 0: 0x744
5833	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
5834	 4DB	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x4E0FFD4016F001303F00000041D000001DE018005BE00010095022305350000
5835	 4DC	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x4E0FFD4016F001303F00000041D000001DE018005BE00010095022305350000
- stack 0: 0xF0
5836	 4DE	SHR		 	 
- stack 1: 0x744
- stack 0: 0x4E0
5837	 4DF	JUMP		 	 
- stack 0: 0x744
5838	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x744
5839	 4E1	PUSH2	0080	 	 
- stack 1: 0x744
- stack 0: 0x80
5840	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x744
- stack 0: 0x1
5841	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5842	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x744
- stack 0: 0x1
5843	 4EB	PUSH2	00A0	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0xA0
5844	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x2
5845	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x744
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5846	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x2
5847	 4F5	SUB		 	 
- stack 1: 0x744
- stack 0: 0x1
5848	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x4FE
5849	 4F9	JUMPI		 	 
- stack 0: 0x744
5850	 4FE	JUMPDEST		 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x744
5851	 4FF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
5852	 500	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x4E0FFD4016F001303F00000041D000001DE018005BE00010095022305350000
5853	 501	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x4E0FFD4016F001303F00000041D000001DE018005BE00010095022305350000
- stack 0: 0xE0
5854	 503	SHR		 	 
- stack 1: 0x744
- stack 0: 0x4E0FFD4
5855	 504	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x4E0FFD4
- stack 0: 0xFFFF
5856	 507	AND		 	 
- stack 1: 0x744
- stack 0: 0xFFD4
5857	 508	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0xFFD4
- stack 0: 0x1
5858	 50A	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4
5859	 50B	ADD		 	 
- stack 0: 0x718
5860	 50C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x718
- stack 0: 0xFFFFFFFF
5861	 511	AND		 	  ;; # mask to 32 bits
- stack 0: 0x718
5862	 512	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
5863	 513	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x41D000001DE01B80598000200950233042C0000047E000005AB000202100233
5864	 514	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x41D000001DE01B80598000200950233042C0000047E000005AB000202100233
- stack 0: 0xF0
5865	 516	SHR		 	 
- stack 1: 0x718
- stack 0: 0x41D
5866	 517	JUMP		 	 
- stack 0: 0x718
5867	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x718
5868	 41E	DUP1		 	 
- stack 1: 0x718
- stack 0: 0x718
5869	 41F	PUSH2	0040	 	 
- stack 2: 0x718
- stack 1: 0x718
- stack 0: 0x40
5870	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x718
5871	 423	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
5872	 425	ADD		 	 
- stack 0: 0x71C
5873	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
5874	 427	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x1DE01B80598000200950233042C0000047E000005AB00020210023301890150
5875	 428	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x1DE01B80598000200950233042C0000047E000005AB00020210023301890150
- stack 0: 0xF0
5876	 42A	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x1DE
5877	 42B	JUMP		 	 
- stack 0: 0x71C
5878	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x71C
5879	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
5880	 1E0	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x1DE01B80598000200950233042C0000047E000005AB00020210023301890150
5881	 1E1	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x1DE01B80598000200950233042C0000047E000005AB00020210023301890150
- stack 0: 0xE0
5882	 1E3	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x1DE01B8
5883	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x1DE01B8
- stack 0: 0xFFFF
5884	 1E7	AND		 	 
- stack 1: 0x71C
- stack 0: 0x1B8
5885	 1E8	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0x1B8
- stack 0: 0x1
5886	 1EA	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0x1B8
5887	 1EB	PUSH2	0040	 	 
- stack 2: 0x71C
- stack 1: 0x1B8
- stack 0: 0x40
5888	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x71C
- stack 1: 0x1B8
- stack 0: 0x718
5889	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x71C
- stack 0: 0x8D0
5890	 1F0	PUSH2	0040	 	 
- stack 2: 0x71C
- stack 1: 0x8D0
- stack 0: 0x40
5891	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x71C
5892	 1F4	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
5893	 1F6	ADD		 	 
- stack 0: 0x720
5894	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
5895	 1F8	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x598000200950233042C0000047E000005AB0002021002330189015003890001
5896	 1F9	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0x598000200950233042C0000047E000005AB0002021002330189015003890001
- stack 0: 0xF0
5897	 1FB	SHR		 	 
- stack 1: 0x720
- stack 0: 0x598
5898	 1FC	JUMP		 	 
- stack 0: 0x720
5899	 598	JUMPDEST		 ;; __riscvimpl_LUI_20b7	  ;; # instr: lui ra,0x2(ignore imm)
- stack 0: 0x720
5900	 599	PUSH4	00002000	 	 
- stack 1: 0x720
- stack 0: 0x2000
5901	 59E	PUSH2	0020	 	 
- stack 2: 0x720
- stack 1: 0x2000
- stack 0: 0x20
5902	 5A1	MSTORE		 	  ;; # store to x1
- stack 0: 0x720
5903	 5A2	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
5904	 5A4	ADD		 	 
- stack 0: 0x724
5905	 5A5	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
5906	 5A6	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x950233042C0000047E000005AB000202100233018901500389000104C60002
5907	 5A7	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x950233042C0000047E000005AB000202100233018901500389000104C60002
- stack 0: 0xF0
5908	 5A9	SHR		 	 
- stack 1: 0x724
- stack 0: 0x95
5909	 5AA	JUMP		 	 
- stack 0: 0x724
5910	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x724
5911	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
5912	 97	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x950233042C0000047E000005AB000202100233018901500389000104C60002
5913	 98	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0x950233042C0000047E000005AB000202100233018901500389000104C60002
- stack 0: 0xE0
5914	 9A	SHR		 	 
- stack 1: 0x724
- stack 0: 0x950233
5915	 9B	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0x950233
- stack 0: 0xFFFF
5916	 9E	AND		 	 
- stack 1: 0x724
- stack 0: 0x233
5917	 9F	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x233
- stack 0: 0x1
5918	 A1	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x233
5919	 A2	PUSH2	0020	 	 
- stack 2: 0x724
- stack 1: 0x233
- stack 0: 0x20
5920	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x724
- stack 1: 0x233
- stack 0: 0x2000
5921	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x724
- stack 0: 0x2233
5922	 A7	PUSH2	0020	 	 
- stack 2: 0x724
- stack 1: 0x2233
- stack 0: 0x20
5923	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x724
5924	 AB	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
5925	 AD	ADD		 	 
- stack 0: 0x728
5926	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
5927	 AF	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x42C0000047E000005AB000202100233018901500389000104C6000204E0FFD4
5928	 B0	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x42C0000047E000005AB000202100233018901500389000104C6000204E0FFD4
- stack 0: 0xF0
5929	 B2	SHR		 	 
- stack 1: 0x728
- stack 0: 0x42C
5930	 B3	JUMP		 	 
- stack 0: 0x728
5931	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x728
5932	 42D	PUSH2	0040	 	 
- stack 1: 0x728
- stack 0: 0x40
5933	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x728
- stack 0: 0x8D0
5934	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x728
- stack 1: 0x8D0
- stack 0: 0x728
5935	 432	MLOAD		 	 
- stack 2: 0x728
- stack 1: 0x8D0
- stack 0: 0x42C0000047E000005AB000202100233018901500389000104C6000204E0FFD4
5936	 433	PUSH1	E0	 	 
- stack 3: 0x728
- stack 2: 0x8D0
- stack 1: 0x42C0000047E000005AB000202100233018901500389000104C6000204E0FFD4
- stack 0: 0xE0
5937	 435	SHR		 	 
- stack 2: 0x728
- stack 1: 0x8D0
- stack 0: 0x42C0000
5938	 436	PUSH2	FFFF	 	 
- stack 3: 0x728
- stack 2: 0x8D0
- stack 1: 0x42C0000
- stack 0: 0xFFFF
5939	 439	AND		 	 
- stack 2: 0x728
- stack 1: 0x8D0
- stack 0: 0x0
5940	 43A	PUSH1	01	 	 
- stack 3: 0x728
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
5941	 43C	SIGNEXTEND		 	 
- stack 2: 0x728
- stack 1: 0x8D0
- stack 0: 0x0
5942	 43D	ADD		 	 
- stack 1: 0x728
- stack 0: 0x8D0
5943	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x728
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5944	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x728
- stack 0: 0x8D0
5945	 444	PUSH1	02	 	 
- stack 2: 0x728
- stack 1: 0x8D0
- stack 0: 0x2
5946	 446	XOR		 	 
- stack 1: 0x728
- stack 0: 0x8D2
5947	 447	DUP1		 	 
- stack 2: 0x728
- stack 1: 0x8D2
- stack 0: 0x8D2
5948	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x728
- stack 1: 0x8D2
- stack 0: 0x2233ABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
5949	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x728
- stack 2: 0x8D2
- stack 1: 0x2233ABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5950	 46A	AND		 	 
- stack 2: 0x728
- stack 1: 0x8D2
- stack 0: 0xABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
5951	 46B	PUSH2	0020	 	 
- stack 3: 0x728
- stack 2: 0x8D2
- stack 1: 0xABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
- stack 0: 0x20
5952	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x728
- stack 2: 0x8D2
- stack 1: 0xABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
- stack 0: 0x2233
5953	 46F	PUSH1	F0	 	 
- stack 4: 0x728
- stack 3: 0x8D2
- stack 2: 0xABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
- stack 1: 0x2233
- stack 0: 0xF0
5954	 471	SHL		 	 
- stack 3: 0x728
- stack 2: 0x8D2
- stack 1: 0xABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
- stack 0: 0x2233000000000000000000000000000000000000000000000000000000000000
5955	 472	ADD		 	 
- stack 2: 0x728
- stack 1: 0x8D2
- stack 0: 0x2233ABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
5956	 473	SWAP1		 	 
- stack 2: 0x728
- stack 1: 0x2233ABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
- stack 0: 0x8D2
5957	 474	MSTORE		 	 
- stack 0: 0x728
5958	 475	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
5959	 477	ADD		 	 
- stack 0: 0x72C
5960	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
5961	 479	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x47E000005AB000202100233018901500389000104C6000204E0FFD4016F0013
5962	 47A	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x47E000005AB000202100233018901500389000104C6000204E0FFD4016F0013
- stack 0: 0xF0
5963	 47C	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x47E
5964	 47D	JUMP		 	 
- stack 0: 0x72C
5965	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x72C
5966	 47F	PUSH2	0040	 	 
- stack 1: 0x72C
- stack 0: 0x40
5967	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x72C
- stack 0: 0x8D0
5968	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5969	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x72C
- stack 0: 0x8D0
5970	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0x72C
5971	 48A	MLOAD		 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0x47E000005AB000202100233018901500389000104C6000204E0FFD4016F0013
5972	 48B	PUSH1	E0	 	 
- stack 3: 0x72C
- stack 2: 0x8D0
- stack 1: 0x47E000005AB000202100233018901500389000104C6000204E0FFD4016F0013
- stack 0: 0xE0
5973	 48D	SHR		 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0x47E0000
5974	 48E	PUSH2	FFFF	 	 
- stack 3: 0x72C
- stack 2: 0x8D0
- stack 1: 0x47E0000
- stack 0: 0xFFFF
5975	 491	AND		 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0x0
5976	 492	PUSH1	01	 	 
- stack 3: 0x72C
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
5977	 494	SIGNEXTEND		 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0x0
5978	 495	ADD		 	 
- stack 1: 0x72C
- stack 0: 0x8D0
5979	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5980	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x72C
- stack 0: 0x8D0
5981	 49C	PUSH1	02	 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0x2
5982	 49E	XOR		 	 
- stack 1: 0x72C
- stack 0: 0x8D2
5983	 49F	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x2233ABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
5984	 4A0	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x2233ABBCBBCCDAABAABBA00A0AA0309856780000000000000000000000000000
- stack 0: 0xF0
5985	 4A2	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x2233
5986	 4A3	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x2233
- stack 0: 0x1
5987	 4A5	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x2233
5988	 4A6	PUSH2	0060	 	 
- stack 2: 0x72C
- stack 1: 0x2233
- stack 0: 0x60
5989	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x72C
5990	 4AA	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
5991	 4AC	ADD		 	 
- stack 0: 0x730
5992	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
5993	 4AE	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x5AB000202100233018901500389000104C6000204E0FFD4016F001303F00000
5994	 4AF	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x5AB000202100233018901500389000104C6000204E0FFD4016F001303F00000
- stack 0: 0xF0
5995	 4B1	SHR		 	 
- stack 1: 0x730
- stack 0: 0x5AB
5996	 4B2	JUMP		 	 
- stack 0: 0x730
5997	 5AB	JUMPDEST		 ;; __riscvimpl_LUI_2eb7	  ;; # instr: lui t4,0x2(ignore imm)
- stack 0: 0x730
5998	 5AC	PUSH4	00002000	 	 
- stack 1: 0x730
- stack 0: 0x2000
5999	 5B1	PUSH2	03A0	 	 
- stack 2: 0x730
- stack 1: 0x2000
- stack 0: 0x3A0
6000	 5B4	MSTORE		 	  ;; # store to x29
- stack 0: 0x730
6001	 5B5	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
6002	 5B7	ADD		 	 
- stack 0: 0x734
6003	 5B8	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
6004	 5B9	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x2100233018901500389000104C6000204E0FFD4016F001303F00000041D0000
6005	 5BA	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0x2100233018901500389000104C6000204E0FFD4016F001303F00000041D0000
- stack 0: 0xF0
6006	 5BC	SHR		 	 
- stack 1: 0x734
- stack 0: 0x210
6007	 5BD	JUMP		 	 
- stack 0: 0x734
6008	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x734
6009	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x734
- stack 0: 0x734
6010	 212	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x2100233018901500389000104C6000204E0FFD4016F001303F00000041D0000
6011	 213	PUSH1	E0	 	 
- stack 2: 0x734
- stack 1: 0x2100233018901500389000104C6000204E0FFD4016F001303F00000041D0000
- stack 0: 0xE0
6012	 215	SHR		 	 
- stack 1: 0x734
- stack 0: 0x2100233
6013	 216	PUSH2	FFFF	 	 
- stack 2: 0x734
- stack 1: 0x2100233
- stack 0: 0xFFFF
6014	 219	AND		 	 
- stack 1: 0x734
- stack 0: 0x233
6015	 21A	PUSH1	01	 	 
- stack 2: 0x734
- stack 1: 0x233
- stack 0: 0x1
6016	 21C	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0x233
6017	 21D	PUSH2	03A0	 	 
- stack 2: 0x734
- stack 1: 0x233
- stack 0: 0x3A0
6018	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x734
- stack 1: 0x233
- stack 0: 0x2000
6019	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x734
- stack 0: 0x2233
6020	 222	PUSH2	03A0	 	 
- stack 2: 0x734
- stack 1: 0x2233
- stack 0: 0x3A0
6021	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x734
6022	 226	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
6023	 228	ADD		 	 
- stack 0: 0x738
6024	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
6025	 22A	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x18901500389000104C6000204E0FFD4016F001303F00000041D000001DE0180
6026	 22B	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x18901500389000104C6000204E0FFD4016F001303F00000041D000001DE0180
- stack 0: 0xF0
6027	 22D	SHR		 	 
- stack 1: 0x738
- stack 0: 0x189
6028	 22E	JUMP		 	 
- stack 0: 0x738
6029	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x738
6030	 18A	PUSH2	0060	 	 
- stack 1: 0x738
- stack 0: 0x60
6031	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x738
- stack 0: 0x2233
6032	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x738
- stack 1: 0x2233
- stack 0: 0xFFFFFFFF
6033	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x738
- stack 0: 0x2233
6034	 194	PUSH2	03A0	 	 
- stack 2: 0x738
- stack 1: 0x2233
- stack 0: 0x3A0
6035	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x738
- stack 1: 0x2233
- stack 0: 0x2233
6036	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x738
- stack 2: 0x2233
- stack 1: 0x2233
- stack 0: 0xFFFFFFFF
6037	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x738
- stack 1: 0x2233
- stack 0: 0x2233
6038	 19E	SUB		 	 
- stack 1: 0x738
- stack 0: 0x0
6039	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x738
- stack 1: 0x0
- stack 0: 0x1A7
6040	 1A2	JUMPI		 	 
- stack 0: 0x738
6041	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x738
- stack 0: 0x1C1
6042	 1A6	JUMP		 	 
- stack 0: 0x738
6043	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x738
6044	 1C2	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
6045	 1C4	ADD		 	 
- stack 0: 0x73C
6046	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
6047	 1C6	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x389000104C6000204E0FFD4016F001303F00000041D000001DE018005BE0001
6048	 1C7	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x389000104C6000204E0FFD4016F001303F00000041D000001DE018005BE0001
- stack 0: 0xF0
6049	 1C9	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x389
6050	 1CA	JUMP		 	 
- stack 0: 0x73C
6051	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x73C
6052	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x73C
- stack 0: 0x73C
6053	 38B	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x389000104C6000204E0FFD4016F001303F00000041D000001DE018005BE0001
6054	 38C	PUSH1	E0	 	 
- stack 2: 0x73C
- stack 1: 0x389000104C6000204E0FFD4016F001303F00000041D000001DE018005BE0001
- stack 0: 0xE0
6055	 38E	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x3890001
6056	 38F	PUSH2	FFFF	 	 
- stack 2: 0x73C
- stack 1: 0x3890001
- stack 0: 0xFFFF
6057	 392	AND		 	 
- stack 1: 0x73C
- stack 0: 0x1
6058	 393	PUSH1	01	 	 
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0x1
6059	 395	SIGNEXTEND		 	 
- stack 1: 0x73C
- stack 0: 0x1
6060	 396	PUSH2	0080	 	 
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0x80
6061	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0x1
6062	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x73C
- stack 0: 0x2
6063	 39B	PUSH2	0080	 	 
- stack 2: 0x73C
- stack 1: 0x2
- stack 0: 0x80
6064	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x73C
6065	 39F	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
6066	 3A1	ADD		 	 
- stack 0: 0x740
6067	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
6068	 3A3	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x4C6000204E0FFD4016F001303F00000041D000001DE018005BE000100950223
6069	 3A4	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0x4C6000204E0FFD4016F001303F00000041D000001DE018005BE000100950223
- stack 0: 0xF0
6070	 3A6	SHR		 	 
- stack 1: 0x740
- stack 0: 0x4C6
6071	 3A7	JUMP		 	 
- stack 0: 0x740
6072	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x740
6073	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x740
- stack 0: 0x740
6074	 4C8	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x4C6000204E0FFD4016F001303F00000041D000001DE018005BE000100950223
6075	 4C9	PUSH1	E0	 	 
- stack 2: 0x740
- stack 1: 0x4C6000204E0FFD4016F001303F00000041D000001DE018005BE000100950223
- stack 0: 0xE0
6076	 4CB	SHR		 	 
- stack 1: 0x740
- stack 0: 0x4C60002
6077	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x740
- stack 1: 0x4C60002
- stack 0: 0xFFFF
6078	 4CF	AND		 	 
- stack 1: 0x740
- stack 0: 0x2
6079	 4D0	PUSH1	01	 	 
- stack 2: 0x740
- stack 1: 0x2
- stack 0: 0x1
6080	 4D2	SIGNEXTEND		 	 
- stack 1: 0x740
- stack 0: 0x2
6081	 4D3	PUSH2	00A0	 	 
- stack 2: 0x740
- stack 1: 0x2
- stack 0: 0xA0
6082	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x740
6083	 4D7	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
6084	 4D9	ADD		 	 
- stack 0: 0x744
6085	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
6086	 4DB	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x4E0FFD4016F001303F00000041D000001DE018005BE00010095022305350000
6087	 4DC	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x4E0FFD4016F001303F00000041D000001DE018005BE00010095022305350000
- stack 0: 0xF0
6088	 4DE	SHR		 	 
- stack 1: 0x744
- stack 0: 0x4E0
6089	 4DF	JUMP		 	 
- stack 0: 0x744
6090	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x744
6091	 4E1	PUSH2	0080	 	 
- stack 1: 0x744
- stack 0: 0x80
6092	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x744
- stack 0: 0x2
6093	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x744
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6094	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x744
- stack 0: 0x2
6095	 4EB	PUSH2	00A0	 	 
- stack 2: 0x744
- stack 1: 0x2
- stack 0: 0xA0
6096	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x744
- stack 1: 0x2
- stack 0: 0x2
6097	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x744
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6098	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x744
- stack 1: 0x2
- stack 0: 0x2
6099	 4F5	SUB		 	 
- stack 1: 0x744
- stack 0: 0x0
6100	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x744
- stack 1: 0x0
- stack 0: 0x4FE
6101	 4F9	JUMPI		 	 
- stack 0: 0x744
6102	 4FA	PUSH2	0518	 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 1: 0x744
- stack 0: 0x518
6103	 4FD	JUMP		 	 
- stack 0: 0x744
6104	 518	JUMPDEST		 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x744
6105	 519	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
6106	 51B	ADD		 	 
- stack 0: 0x748
6107	 51C	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
6108	 51D	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x16F001303F00000041D000001DE018005BE00010095022305350000042C0002
6109	 51E	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x16F001303F00000041D000001DE018005BE00010095022305350000042C0002
- stack 0: 0xF0
6110	 520	SHR		 	 
- stack 1: 0x748
- stack 0: 0x16F
6111	 521	JUMP		 	 
- stack 0: 0x748
6112	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x748
6113	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
6114	 171	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x16F001303F00000041D000001DE018005BE00010095022305350000042C0002
6115	 172	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0x16F001303F00000041D000001DE018005BE00010095022305350000042C0002
- stack 0: 0xE0
6116	 174	SHR		 	 
- stack 1: 0x748
- stack 0: 0x16F0013
6117	 175	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0x16F0013
- stack 0: 0xFFFF
6118	 178	AND		 	 
- stack 1: 0x748
- stack 0: 0x13
6119	 179	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0x13
- stack 0: 0x1
6120	 17B	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0x13
6121	 17C	PUSH2	0380	 	 
- stack 2: 0x748
- stack 1: 0x13
- stack 0: 0x380
6122	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x748
6123	 180	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
6124	 182	ADD		 	 
- stack 0: 0x74C
6125	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
6126	 184	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x3F00000041D000001DE018005BE00010095022305350000042C0002047E0002
6127	 185	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x3F00000041D000001DE018005BE00010095022305350000042C0002047E0002
- stack 0: 0xF0
6128	 187	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x3F0
6129	 188	JUMP		 	 
- stack 0: 0x74C
6130	 3F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x74C
6131	 3F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x74C
- stack 0: 0x74C
6132	 3F2	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x3F00000041D000001DE018005BE00010095022305350000042C0002047E0002
6133	 3F3	PUSH1	E0	 	 
- stack 2: 0x74C
- stack 1: 0x3F00000041D000001DE018005BE00010095022305350000042C0002047E0002
- stack 0: 0xE0
6134	 3F5	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x3F00000
6135	 3F6	PUSH2	FFFF	 	 
- stack 2: 0x74C
- stack 1: 0x3F00000
- stack 0: 0xFFFF
6136	 3F9	AND		 	 
- stack 1: 0x74C
- stack 0: 0x0
6137	 3FA	PUSH1	01	 	 
- stack 2: 0x74C
- stack 1: 0x0
- stack 0: 0x1
6138	 3FC	SIGNEXTEND		 	 
- stack 1: 0x74C
- stack 0: 0x0
6139	 3FD	PUSH2	0080	 	 
- stack 2: 0x74C
- stack 1: 0x0
- stack 0: 0x80
6140	 400	MSTORE		 	  ;; # store to x4
- stack 0: 0x74C
6141	 401	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
6142	 403	ADD		 	 
- stack 0: 0x750
6143	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
6144	 405	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x41D000001DE018005BE00010095022305350000042C0002047E000202BD0001
6145	 406	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x41D000001DE018005BE00010095022305350000042C0002047E000202BD0001
- stack 0: 0xF0
6146	 408	SHR		 	 
- stack 1: 0x750
- stack 0: 0x41D
6147	 409	JUMP		 	 
- stack 0: 0x750
6148	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x750
6149	 41E	DUP1		 	 
- stack 1: 0x750
- stack 0: 0x750
6150	 41F	PUSH2	0040	 	 
- stack 2: 0x750
- stack 1: 0x750
- stack 0: 0x40
6151	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x750
6152	 423	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
6153	 425	ADD		 	 
- stack 0: 0x754
6154	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
6155	 427	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x1DE018005BE00010095022305350000042C0002047E000202BD000102100223
6156	 428	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x1DE018005BE00010095022305350000042C0002047E000202BD000102100223
- stack 0: 0xF0
6157	 42A	SHR		 	 
- stack 1: 0x754
- stack 0: 0x1DE
6158	 42B	JUMP		 	 
- stack 0: 0x754
6159	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x754
6160	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
6161	 1E0	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x1DE018005BE00010095022305350000042C0002047E000202BD000102100223
6162	 1E1	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0x1DE018005BE00010095022305350000042C0002047E000202BD000102100223
- stack 0: 0xE0
6163	 1E3	SHR		 	 
- stack 1: 0x754
- stack 0: 0x1DE0180
6164	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0x1DE0180
- stack 0: 0xFFFF
6165	 1E7	AND		 	 
- stack 1: 0x754
- stack 0: 0x180
6166	 1E8	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0x180
- stack 0: 0x1
6167	 1EA	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0x180
6168	 1EB	PUSH2	0040	 	 
- stack 2: 0x754
- stack 1: 0x180
- stack 0: 0x40
6169	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x754
- stack 1: 0x180
- stack 0: 0x750
6170	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x754
- stack 0: 0x8D0
6171	 1F0	PUSH2	0040	 	 
- stack 2: 0x754
- stack 1: 0x8D0
- stack 0: 0x40
6172	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x754
6173	 1F4	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
6174	 1F6	ADD		 	 
- stack 0: 0x758
6175	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
6176	 1F8	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x5BE00010095022305350000042C0002047E000202BD00010210022301890114
6177	 1F9	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0x5BE00010095022305350000042C0002047E000202BD00010210022301890114
- stack 0: 0xF0
6178	 1FB	SHR		 	 
- stack 1: 0x758
- stack 0: 0x5BE
6179	 1FC	JUMP		 	 
- stack 0: 0x758
6180	 5BE	JUMPDEST		 ;; __riscvimpl_LUI_10b7	  ;; # instr: lui ra,0x1(ignore imm)
- stack 0: 0x758
6181	 5BF	PUSH4	00001000	 	 
- stack 1: 0x758
- stack 0: 0x1000
6182	 5C4	PUSH2	0020	 	 
- stack 2: 0x758
- stack 1: 0x1000
- stack 0: 0x20
6183	 5C7	MSTORE		 	  ;; # store to x1
- stack 0: 0x758
6184	 5C8	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
6185	 5CA	ADD		 	 
- stack 0: 0x75C
6186	 5CB	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
6187	 5CC	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x95022305350000042C0002047E000202BD0001021002230189011403890001
6188	 5CD	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x95022305350000042C0002047E000202BD0001021002230189011403890001
- stack 0: 0xF0
6189	 5CF	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x95
6190	 5D0	JUMP		 	 
- stack 0: 0x75C
6191	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x75C
6192	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
6193	 97	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x95022305350000042C0002047E000202BD0001021002230189011403890001
6194	 98	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x95022305350000042C0002047E000202BD0001021002230189011403890001
- stack 0: 0xE0
6195	 9A	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x950223
6196	 9B	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x950223
- stack 0: 0xFFFF
6197	 9E	AND		 	 
- stack 1: 0x75C
- stack 0: 0x223
6198	 9F	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x223
- stack 0: 0x1
6199	 A1	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x223
6200	 A2	PUSH2	0020	 	 
- stack 2: 0x75C
- stack 1: 0x223
- stack 0: 0x20
6201	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x75C
- stack 1: 0x223
- stack 0: 0x1000
6202	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x75C
- stack 0: 0x1223
6203	 A7	PUSH2	0020	 	 
- stack 2: 0x75C
- stack 1: 0x1223
- stack 0: 0x20
6204	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x75C
6205	 AB	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
6206	 AD	ADD		 	 
- stack 0: 0x760
6207	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
6208	 AF	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x5350000042C0002047E000202BD000102100223018901140389000104C60002
6209	 B0	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x5350000042C0002047E000202BD000102100223018901140389000104C60002
- stack 0: 0xF0
6210	 B2	SHR		 	 
- stack 1: 0x760
- stack 0: 0x535
6211	 B3	JUMP		 	 
- stack 0: 0x760
6212	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x760
6213	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
6214	 537	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x5350000042C0002047E000202BD000102100223018901140389000104C60002
6215	 538	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0x5350000042C0002047E000202BD000102100223018901140389000104C60002
- stack 0: 0xE0
6216	 53A	SHR		 	 
- stack 1: 0x760
- stack 0: 0x5350000
6217	 53B	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0x5350000
- stack 0: 0xFFFF
6218	 53E	AND		 	 
- stack 1: 0x760
- stack 0: 0x0
6219	 53F	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x0
- stack 0: 0x1
6220	 541	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x0
6221	 542	POP		 	 
- stack 0: 0x760
6222	 543	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
6223	 545	ADD		 	 
- stack 0: 0x764
6224	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
6225	 547	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x42C0002047E000202BD000102100223018901140389000104C6000204E0FFD0
6226	 548	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x42C0002047E000202BD000102100223018901140389000104C6000204E0FFD0
- stack 0: 0xF0
6227	 54A	SHR		 	 
- stack 1: 0x764
- stack 0: 0x42C
6228	 54B	JUMP		 	 
- stack 0: 0x764
6229	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x764
6230	 42D	PUSH2	0040	 	 
- stack 1: 0x764
- stack 0: 0x40
6231	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x764
- stack 0: 0x8D0
6232	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x764
6233	 432	MLOAD		 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x42C0002047E000202BD000102100223018901140389000104C6000204E0FFD0
6234	 433	PUSH1	E0	 	 
- stack 3: 0x764
- stack 2: 0x8D0
- stack 1: 0x42C0002047E000202BD000102100223018901140389000104C6000204E0FFD0
- stack 0: 0xE0
6235	 435	SHR		 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x42C0002
6236	 436	PUSH2	FFFF	 	 
- stack 3: 0x764
- stack 2: 0x8D0
- stack 1: 0x42C0002
- stack 0: 0xFFFF
6237	 439	AND		 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x2
6238	 43A	PUSH1	01	 	 
- stack 3: 0x764
- stack 2: 0x8D0
- stack 1: 0x2
- stack 0: 0x1
6239	 43C	SIGNEXTEND		 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x2
6240	 43D	ADD		 	 
- stack 1: 0x764
- stack 0: 0x8D2
6241	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x764
- stack 1: 0x8D2
- stack 0: 0xFFFFFFFF
6242	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x764
- stack 0: 0x8D2
6243	 444	PUSH1	02	 	 
- stack 2: 0x764
- stack 1: 0x8D2
- stack 0: 0x2
6244	 446	XOR		 	 
- stack 1: 0x764
- stack 0: 0x8D0
6245	 447	DUP1		 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x8D0
6246	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0xBCCD2233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
6247	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x764
- stack 2: 0x8D0
- stack 1: 0xBCCD2233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
6248	 46A	AND		 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x2233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
6249	 46B	PUSH2	0020	 	 
- stack 3: 0x764
- stack 2: 0x8D0
- stack 1: 0x2233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
- stack 0: 0x20
6250	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x764
- stack 2: 0x8D0
- stack 1: 0x2233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
- stack 0: 0x1223
6251	 46F	PUSH1	F0	 	 
- stack 4: 0x764
- stack 3: 0x8D0
- stack 2: 0x2233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
- stack 1: 0x1223
- stack 0: 0xF0
6252	 471	SHL		 	 
- stack 3: 0x764
- stack 2: 0x8D0
- stack 1: 0x2233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
- stack 0: 0x1223000000000000000000000000000000000000000000000000000000000000
6253	 472	ADD		 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x12232233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
6254	 473	SWAP1		 	 
- stack 2: 0x764
- stack 1: 0x12232233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
- stack 0: 0x8D0
6255	 474	MSTORE		 	 
- stack 0: 0x764
6256	 475	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
6257	 477	ADD		 	 
- stack 0: 0x768
6258	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
6259	 479	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x47E000202BD000102100223018901140389000104C6000204E0FFD0016F0014
6260	 47A	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x47E000202BD000102100223018901140389000104C6000204E0FFD0016F0014
- stack 0: 0xF0
6261	 47C	SHR		 	 
- stack 1: 0x768
- stack 0: 0x47E
6262	 47D	JUMP		 	 
- stack 0: 0x768
6263	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x768
6264	 47F	PUSH2	0040	 	 
- stack 1: 0x768
- stack 0: 0x40
6265	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x768
- stack 0: 0x8D0
6266	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x768
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
6267	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x768
- stack 0: 0x8D0
6268	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x768
- stack 1: 0x8D0
- stack 0: 0x768
6269	 48A	MLOAD		 	 
- stack 2: 0x768
- stack 1: 0x8D0
- stack 0: 0x47E000202BD000102100223018901140389000104C6000204E0FFD0016F0014
6270	 48B	PUSH1	E0	 	 
- stack 3: 0x768
- stack 2: 0x8D0
- stack 1: 0x47E000202BD000102100223018901140389000104C6000204E0FFD0016F0014
- stack 0: 0xE0
6271	 48D	SHR		 	 
- stack 2: 0x768
- stack 1: 0x8D0
- stack 0: 0x47E0002
6272	 48E	PUSH2	FFFF	 	 
- stack 3: 0x768
- stack 2: 0x8D0
- stack 1: 0x47E0002
- stack 0: 0xFFFF
6273	 491	AND		 	 
- stack 2: 0x768
- stack 1: 0x8D0
- stack 0: 0x2
6274	 492	PUSH1	01	 	 
- stack 3: 0x768
- stack 2: 0x8D0
- stack 1: 0x2
- stack 0: 0x1
6275	 494	SIGNEXTEND		 	 
- stack 2: 0x768
- stack 1: 0x8D0
- stack 0: 0x2
6276	 495	ADD		 	 
- stack 1: 0x768
- stack 0: 0x8D2
6277	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x768
- stack 1: 0x8D2
- stack 0: 0xFFFFFFFF
6278	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x768
- stack 0: 0x8D2
6279	 49C	PUSH1	02	 	 
- stack 2: 0x768
- stack 1: 0x8D2
- stack 0: 0x2
6280	 49E	XOR		 	 
- stack 1: 0x768
- stack 0: 0x8D0
6281	 49F	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x12232233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
6282	 4A0	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x12232233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
- stack 0: 0xF0
6283	 4A2	SHR		 	 
- stack 1: 0x768
- stack 0: 0x1223
6284	 4A3	PUSH1	01	 	 
- stack 2: 0x768
- stack 1: 0x1223
- stack 0: 0x1
6285	 4A5	SIGNEXTEND		 	 
- stack 1: 0x768
- stack 0: 0x1223
6286	 4A6	PUSH2	0060	 	 
- stack 2: 0x768
- stack 1: 0x1223
- stack 0: 0x60
6287	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x768
6288	 4AA	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
6289	 4AC	ADD		 	 
- stack 0: 0x76C
6290	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
6291	 4AE	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x2BD000102100223018901140389000104C6000204E0FFD0016F001403F00000
6292	 4AF	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0x2BD000102100223018901140389000104C6000204E0FFD0016F001403F00000
- stack 0: 0xF0
6293	 4B1	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x2BD
6294	 4B2	JUMP		 	 
- stack 0: 0x76C
6295	 2BD	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x76C
6296	 2BE	PUSH4	00001000	 	 
- stack 1: 0x76C
- stack 0: 0x1000
6297	 2C3	PUSH2	03A0	 	 
- stack 2: 0x76C
- stack 1: 0x1000
- stack 0: 0x3A0
6298	 2C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x76C
6299	 2C7	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
6300	 2C9	ADD		 	 
- stack 0: 0x770
6301	 2CA	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
6302	 2CB	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x2100223018901140389000104C6000204E0FFD0016F001403F00000041D0000
6303	 2CC	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x2100223018901140389000104C6000204E0FFD0016F001403F00000041D0000
- stack 0: 0xF0
6304	 2CE	SHR		 	 
- stack 1: 0x770
- stack 0: 0x210
6305	 2CF	JUMP		 	 
- stack 0: 0x770
6306	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x770
6307	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x770
- stack 0: 0x770
6308	 212	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x2100223018901140389000104C6000204E0FFD0016F001403F00000041D0000
6309	 213	PUSH1	E0	 	 
- stack 2: 0x770
- stack 1: 0x2100223018901140389000104C6000204E0FFD0016F001403F00000041D0000
- stack 0: 0xE0
6310	 215	SHR		 	 
- stack 1: 0x770
- stack 0: 0x2100223
6311	 216	PUSH2	FFFF	 	 
- stack 2: 0x770
- stack 1: 0x2100223
- stack 0: 0xFFFF
6312	 219	AND		 	 
- stack 1: 0x770
- stack 0: 0x223
6313	 21A	PUSH1	01	 	 
- stack 2: 0x770
- stack 1: 0x223
- stack 0: 0x1
6314	 21C	SIGNEXTEND		 	 
- stack 1: 0x770
- stack 0: 0x223
6315	 21D	PUSH2	03A0	 	 
- stack 2: 0x770
- stack 1: 0x223
- stack 0: 0x3A0
6316	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x770
- stack 1: 0x223
- stack 0: 0x1000
6317	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x770
- stack 0: 0x1223
6318	 222	PUSH2	03A0	 	 
- stack 2: 0x770
- stack 1: 0x1223
- stack 0: 0x3A0
6319	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x770
6320	 226	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
6321	 228	ADD		 	 
- stack 0: 0x774
6322	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
6323	 22A	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x18901140389000104C6000204E0FFD0016F001403F00000041D000001DE0144
6324	 22B	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x18901140389000104C6000204E0FFD0016F001403F00000041D000001DE0144
- stack 0: 0xF0
6325	 22D	SHR		 	 
- stack 1: 0x774
- stack 0: 0x189
6326	 22E	JUMP		 	 
- stack 0: 0x774
6327	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x774
6328	 18A	PUSH2	0060	 	 
- stack 1: 0x774
- stack 0: 0x60
6329	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x774
- stack 0: 0x1223
6330	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x774
- stack 1: 0x1223
- stack 0: 0xFFFFFFFF
6331	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x774
- stack 0: 0x1223
6332	 194	PUSH2	03A0	 	 
- stack 2: 0x774
- stack 1: 0x1223
- stack 0: 0x3A0
6333	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x774
- stack 1: 0x1223
- stack 0: 0x1223
6334	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x774
- stack 2: 0x1223
- stack 1: 0x1223
- stack 0: 0xFFFFFFFF
6335	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x774
- stack 1: 0x1223
- stack 0: 0x1223
6336	 19E	SUB		 	 
- stack 1: 0x774
- stack 0: 0x0
6337	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x774
- stack 1: 0x0
- stack 0: 0x1A7
6338	 1A2	JUMPI		 	 
- stack 0: 0x774
6339	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x774
- stack 0: 0x1C1
6340	 1A6	JUMP		 	 
- stack 0: 0x774
6341	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x774
6342	 1C2	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
6343	 1C4	ADD		 	 
- stack 0: 0x778
6344	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
6345	 1C6	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x389000104C6000204E0FFD0016F001403F00000041D000001DE014405BE0001
6346	 1C7	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x389000104C6000204E0FFD0016F001403F00000041D000001DE014405BE0001
- stack 0: 0xF0
6347	 1C9	SHR		 	 
- stack 1: 0x778
- stack 0: 0x389
6348	 1CA	JUMP		 	 
- stack 0: 0x778
6349	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x778
6350	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x778
- stack 0: 0x778
6351	 38B	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x389000104C6000204E0FFD0016F001403F00000041D000001DE014405BE0001
6352	 38C	PUSH1	E0	 	 
- stack 2: 0x778
- stack 1: 0x389000104C6000204E0FFD0016F001403F00000041D000001DE014405BE0001
- stack 0: 0xE0
6353	 38E	SHR		 	 
- stack 1: 0x778
- stack 0: 0x3890001
6354	 38F	PUSH2	FFFF	 	 
- stack 2: 0x778
- stack 1: 0x3890001
- stack 0: 0xFFFF
6355	 392	AND		 	 
- stack 1: 0x778
- stack 0: 0x1
6356	 393	PUSH1	01	 	 
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x1
6357	 395	SIGNEXTEND		 	 
- stack 1: 0x778
- stack 0: 0x1
6358	 396	PUSH2	0080	 	 
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x80
6359	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x0
6360	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x778
- stack 0: 0x1
6361	 39B	PUSH2	0080	 	 
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x80
6362	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x778
6363	 39F	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
6364	 3A1	ADD		 	 
- stack 0: 0x77C
6365	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
6366	 3A3	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x4C6000204E0FFD0016F001403F00000041D000001DE014405BE000100950122
6367	 3A4	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x4C6000204E0FFD0016F001403F00000041D000001DE014405BE000100950122
- stack 0: 0xF0
6368	 3A6	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x4C6
6369	 3A7	JUMP		 	 
- stack 0: 0x77C
6370	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x77C
6371	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x77C
- stack 0: 0x77C
6372	 4C8	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x4C6000204E0FFD0016F001403F00000041D000001DE014405BE000100950122
6373	 4C9	PUSH1	E0	 	 
- stack 2: 0x77C
- stack 1: 0x4C6000204E0FFD0016F001403F00000041D000001DE014405BE000100950122
- stack 0: 0xE0
6374	 4CB	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x4C60002
6375	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x77C
- stack 1: 0x4C60002
- stack 0: 0xFFFF
6376	 4CF	AND		 	 
- stack 1: 0x77C
- stack 0: 0x2
6377	 4D0	PUSH1	01	 	 
- stack 2: 0x77C
- stack 1: 0x2
- stack 0: 0x1
6378	 4D2	SIGNEXTEND		 	 
- stack 1: 0x77C
- stack 0: 0x2
6379	 4D3	PUSH2	00A0	 	 
- stack 2: 0x77C
- stack 1: 0x2
- stack 0: 0xA0
6380	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x77C
6381	 4D7	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
6382	 4D9	ADD		 	 
- stack 0: 0x780
6383	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
6384	 4DB	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x4E0FFD0016F001403F00000041D000001DE014405BE00010095012205350000
6385	 4DC	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0x4E0FFD0016F001403F00000041D000001DE014405BE00010095012205350000
- stack 0: 0xF0
6386	 4DE	SHR		 	 
- stack 1: 0x780
- stack 0: 0x4E0
6387	 4DF	JUMP		 	 
- stack 0: 0x780
6388	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x780
6389	 4E1	PUSH2	0080	 	 
- stack 1: 0x780
- stack 0: 0x80
6390	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x780
- stack 0: 0x1
6391	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x780
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6392	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x780
- stack 0: 0x1
6393	 4EB	PUSH2	00A0	 	 
- stack 2: 0x780
- stack 1: 0x1
- stack 0: 0xA0
6394	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x780
- stack 1: 0x1
- stack 0: 0x2
6395	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x780
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6396	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x780
- stack 1: 0x1
- stack 0: 0x2
6397	 4F5	SUB		 	 
- stack 1: 0x780
- stack 0: 0x1
6398	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x780
- stack 1: 0x1
- stack 0: 0x4FE
6399	 4F9	JUMPI		 	 
- stack 0: 0x780
6400	 4FE	JUMPDEST		 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x780
6401	 4FF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x780
- stack 0: 0x780
6402	 500	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x4E0FFD0016F001403F00000041D000001DE014405BE00010095012205350000
6403	 501	PUSH1	E0	 	 
- stack 2: 0x780
- stack 1: 0x4E0FFD0016F001403F00000041D000001DE014405BE00010095012205350000
- stack 0: 0xE0
6404	 503	SHR		 	 
- stack 1: 0x780
- stack 0: 0x4E0FFD0
6405	 504	PUSH2	FFFF	 	 
- stack 2: 0x780
- stack 1: 0x4E0FFD0
- stack 0: 0xFFFF
6406	 507	AND		 	 
- stack 1: 0x780
- stack 0: 0xFFD0
6407	 508	PUSH1	01	 	 
- stack 2: 0x780
- stack 1: 0xFFD0
- stack 0: 0x1
6408	 50A	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD0
6409	 50B	ADD		 	 
- stack 0: 0x750
6410	 50C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x750
- stack 0: 0xFFFFFFFF
6411	 511	AND		 	  ;; # mask to 32 bits
- stack 0: 0x750
6412	 512	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
6413	 513	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x41D000001DE018005BE00010095022305350000042C0002047E000202BD0001
6414	 514	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x41D000001DE018005BE00010095022305350000042C0002047E000202BD0001
- stack 0: 0xF0
6415	 516	SHR		 	 
- stack 1: 0x750
- stack 0: 0x41D
6416	 517	JUMP		 	 
- stack 0: 0x750
6417	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x750
6418	 41E	DUP1		 	 
- stack 1: 0x750
- stack 0: 0x750
6419	 41F	PUSH2	0040	 	 
- stack 2: 0x750
- stack 1: 0x750
- stack 0: 0x40
6420	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x750
6421	 423	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
6422	 425	ADD		 	 
- stack 0: 0x754
6423	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
6424	 427	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x1DE018005BE00010095022305350000042C0002047E000202BD000102100223
6425	 428	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x1DE018005BE00010095022305350000042C0002047E000202BD000102100223
- stack 0: 0xF0
6426	 42A	SHR		 	 
- stack 1: 0x754
- stack 0: 0x1DE
6427	 42B	JUMP		 	 
- stack 0: 0x754
6428	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x754
6429	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
6430	 1E0	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x1DE018005BE00010095022305350000042C0002047E000202BD000102100223
6431	 1E1	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0x1DE018005BE00010095022305350000042C0002047E000202BD000102100223
- stack 0: 0xE0
6432	 1E3	SHR		 	 
- stack 1: 0x754
- stack 0: 0x1DE0180
6433	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0x1DE0180
- stack 0: 0xFFFF
6434	 1E7	AND		 	 
- stack 1: 0x754
- stack 0: 0x180
6435	 1E8	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0x180
- stack 0: 0x1
6436	 1EA	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0x180
6437	 1EB	PUSH2	0040	 	 
- stack 2: 0x754
- stack 1: 0x180
- stack 0: 0x40
6438	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x754
- stack 1: 0x180
- stack 0: 0x750
6439	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x754
- stack 0: 0x8D0
6440	 1F0	PUSH2	0040	 	 
- stack 2: 0x754
- stack 1: 0x8D0
- stack 0: 0x40
6441	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x754
6442	 1F4	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
6443	 1F6	ADD		 	 
- stack 0: 0x758
6444	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
6445	 1F8	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x5BE00010095022305350000042C0002047E000202BD00010210022301890114
6446	 1F9	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0x5BE00010095022305350000042C0002047E000202BD00010210022301890114
- stack 0: 0xF0
6447	 1FB	SHR		 	 
- stack 1: 0x758
- stack 0: 0x5BE
6448	 1FC	JUMP		 	 
- stack 0: 0x758
6449	 5BE	JUMPDEST		 ;; __riscvimpl_LUI_10b7	  ;; # instr: lui ra,0x1(ignore imm)
- stack 0: 0x758
6450	 5BF	PUSH4	00001000	 	 
- stack 1: 0x758
- stack 0: 0x1000
6451	 5C4	PUSH2	0020	 	 
- stack 2: 0x758
- stack 1: 0x1000
- stack 0: 0x20
6452	 5C7	MSTORE		 	  ;; # store to x1
- stack 0: 0x758
6453	 5C8	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
6454	 5CA	ADD		 	 
- stack 0: 0x75C
6455	 5CB	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
6456	 5CC	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x95022305350000042C0002047E000202BD0001021002230189011403890001
6457	 5CD	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x95022305350000042C0002047E000202BD0001021002230189011403890001
- stack 0: 0xF0
6458	 5CF	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x95
6459	 5D0	JUMP		 	 
- stack 0: 0x75C
6460	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x75C
6461	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
6462	 97	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x95022305350000042C0002047E000202BD0001021002230189011403890001
6463	 98	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x95022305350000042C0002047E000202BD0001021002230189011403890001
- stack 0: 0xE0
6464	 9A	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x950223
6465	 9B	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x950223
- stack 0: 0xFFFF
6466	 9E	AND		 	 
- stack 1: 0x75C
- stack 0: 0x223
6467	 9F	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x223
- stack 0: 0x1
6468	 A1	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x223
6469	 A2	PUSH2	0020	 	 
- stack 2: 0x75C
- stack 1: 0x223
- stack 0: 0x20
6470	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x75C
- stack 1: 0x223
- stack 0: 0x1000
6471	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x75C
- stack 0: 0x1223
6472	 A7	PUSH2	0020	 	 
- stack 2: 0x75C
- stack 1: 0x1223
- stack 0: 0x20
6473	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x75C
6474	 AB	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
6475	 AD	ADD		 	 
- stack 0: 0x760
6476	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
6477	 AF	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x5350000042C0002047E000202BD000102100223018901140389000104C60002
6478	 B0	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x5350000042C0002047E000202BD000102100223018901140389000104C60002
- stack 0: 0xF0
6479	 B2	SHR		 	 
- stack 1: 0x760
- stack 0: 0x535
6480	 B3	JUMP		 	 
- stack 0: 0x760
6481	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x760
6482	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
6483	 537	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x5350000042C0002047E000202BD000102100223018901140389000104C60002
6484	 538	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0x5350000042C0002047E000202BD000102100223018901140389000104C60002
- stack 0: 0xE0
6485	 53A	SHR		 	 
- stack 1: 0x760
- stack 0: 0x5350000
6486	 53B	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0x5350000
- stack 0: 0xFFFF
6487	 53E	AND		 	 
- stack 1: 0x760
- stack 0: 0x0
6488	 53F	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x0
- stack 0: 0x1
6489	 541	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x0
6490	 542	POP		 	 
- stack 0: 0x760
6491	 543	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
6492	 545	ADD		 	 
- stack 0: 0x764
6493	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
6494	 547	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x42C0002047E000202BD000102100223018901140389000104C6000204E0FFD0
6495	 548	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x42C0002047E000202BD000102100223018901140389000104C6000204E0FFD0
- stack 0: 0xF0
6496	 54A	SHR		 	 
- stack 1: 0x764
- stack 0: 0x42C
6497	 54B	JUMP		 	 
- stack 0: 0x764
6498	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x764
6499	 42D	PUSH2	0040	 	 
- stack 1: 0x764
- stack 0: 0x40
6500	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x764
- stack 0: 0x8D0
6501	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x764
6502	 432	MLOAD		 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x42C0002047E000202BD000102100223018901140389000104C6000204E0FFD0
6503	 433	PUSH1	E0	 	 
- stack 3: 0x764
- stack 2: 0x8D0
- stack 1: 0x42C0002047E000202BD000102100223018901140389000104C6000204E0FFD0
- stack 0: 0xE0
6504	 435	SHR		 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x42C0002
6505	 436	PUSH2	FFFF	 	 
- stack 3: 0x764
- stack 2: 0x8D0
- stack 1: 0x42C0002
- stack 0: 0xFFFF
6506	 439	AND		 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x2
6507	 43A	PUSH1	01	 	 
- stack 3: 0x764
- stack 2: 0x8D0
- stack 1: 0x2
- stack 0: 0x1
6508	 43C	SIGNEXTEND		 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x2
6509	 43D	ADD		 	 
- stack 1: 0x764
- stack 0: 0x8D2
6510	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x764
- stack 1: 0x8D2
- stack 0: 0xFFFFFFFF
6511	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x764
- stack 0: 0x8D2
6512	 444	PUSH1	02	 	 
- stack 2: 0x764
- stack 1: 0x8D2
- stack 0: 0x2
6513	 446	XOR		 	 
- stack 1: 0x764
- stack 0: 0x8D0
6514	 447	DUP1		 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x8D0
6515	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x12232233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
6516	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x764
- stack 2: 0x8D0
- stack 1: 0x12232233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
6517	 46A	AND		 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x2233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
6518	 46B	PUSH2	0020	 	 
- stack 3: 0x764
- stack 2: 0x8D0
- stack 1: 0x2233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
- stack 0: 0x20
6519	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x764
- stack 2: 0x8D0
- stack 1: 0x2233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
- stack 0: 0x1223
6520	 46F	PUSH1	F0	 	 
- stack 4: 0x764
- stack 3: 0x8D0
- stack 2: 0x2233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
- stack 1: 0x1223
- stack 0: 0xF0
6521	 471	SHL		 	 
- stack 3: 0x764
- stack 2: 0x8D0
- stack 1: 0x2233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
- stack 0: 0x1223000000000000000000000000000000000000000000000000000000000000
6522	 472	ADD		 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x12232233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
6523	 473	SWAP1		 	 
- stack 2: 0x764
- stack 1: 0x12232233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
- stack 0: 0x8D0
6524	 474	MSTORE		 	 
- stack 0: 0x764
6525	 475	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
6526	 477	ADD		 	 
- stack 0: 0x768
6527	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
6528	 479	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x47E000202BD000102100223018901140389000104C6000204E0FFD0016F0014
6529	 47A	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x47E000202BD000102100223018901140389000104C6000204E0FFD0016F0014
- stack 0: 0xF0
6530	 47C	SHR		 	 
- stack 1: 0x768
- stack 0: 0x47E
6531	 47D	JUMP		 	 
- stack 0: 0x768
6532	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x768
6533	 47F	PUSH2	0040	 	 
- stack 1: 0x768
- stack 0: 0x40
6534	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x768
- stack 0: 0x8D0
6535	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x768
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
6536	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x768
- stack 0: 0x8D0
6537	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x768
- stack 1: 0x8D0
- stack 0: 0x768
6538	 48A	MLOAD		 	 
- stack 2: 0x768
- stack 1: 0x8D0
- stack 0: 0x47E000202BD000102100223018901140389000104C6000204E0FFD0016F0014
6539	 48B	PUSH1	E0	 	 
- stack 3: 0x768
- stack 2: 0x8D0
- stack 1: 0x47E000202BD000102100223018901140389000104C6000204E0FFD0016F0014
- stack 0: 0xE0
6540	 48D	SHR		 	 
- stack 2: 0x768
- stack 1: 0x8D0
- stack 0: 0x47E0002
6541	 48E	PUSH2	FFFF	 	 
- stack 3: 0x768
- stack 2: 0x8D0
- stack 1: 0x47E0002
- stack 0: 0xFFFF
6542	 491	AND		 	 
- stack 2: 0x768
- stack 1: 0x8D0
- stack 0: 0x2
6543	 492	PUSH1	01	 	 
- stack 3: 0x768
- stack 2: 0x8D0
- stack 1: 0x2
- stack 0: 0x1
6544	 494	SIGNEXTEND		 	 
- stack 2: 0x768
- stack 1: 0x8D0
- stack 0: 0x2
6545	 495	ADD		 	 
- stack 1: 0x768
- stack 0: 0x8D2
6546	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x768
- stack 1: 0x8D2
- stack 0: 0xFFFFFFFF
6547	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x768
- stack 0: 0x8D2
6548	 49C	PUSH1	02	 	 
- stack 2: 0x768
- stack 1: 0x8D2
- stack 0: 0x2
6549	 49E	XOR		 	 
- stack 1: 0x768
- stack 0: 0x8D0
6550	 49F	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x12232233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
6551	 4A0	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x12232233ABBCBBCCDAABAABBA00A0AA030985678000000000000000000000000
- stack 0: 0xF0
6552	 4A2	SHR		 	 
- stack 1: 0x768
- stack 0: 0x1223
6553	 4A3	PUSH1	01	 	 
- stack 2: 0x768
- stack 1: 0x1223
- stack 0: 0x1
6554	 4A5	SIGNEXTEND		 	 
- stack 1: 0x768
- stack 0: 0x1223
6555	 4A6	PUSH2	0060	 	 
- stack 2: 0x768
- stack 1: 0x1223
- stack 0: 0x60
6556	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x768
6557	 4AA	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
6558	 4AC	ADD		 	 
- stack 0: 0x76C
6559	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
6560	 4AE	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x2BD000102100223018901140389000104C6000204E0FFD0016F001403F00000
6561	 4AF	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0x2BD000102100223018901140389000104C6000204E0FFD0016F001403F00000
- stack 0: 0xF0
6562	 4B1	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x2BD
6563	 4B2	JUMP		 	 
- stack 0: 0x76C
6564	 2BD	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x76C
6565	 2BE	PUSH4	00001000	 	 
- stack 1: 0x76C
- stack 0: 0x1000
6566	 2C3	PUSH2	03A0	 	 
- stack 2: 0x76C
- stack 1: 0x1000
- stack 0: 0x3A0
6567	 2C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x76C
6568	 2C7	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
6569	 2C9	ADD		 	 
- stack 0: 0x770
6570	 2CA	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
6571	 2CB	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x2100223018901140389000104C6000204E0FFD0016F001403F00000041D0000
6572	 2CC	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x2100223018901140389000104C6000204E0FFD0016F001403F00000041D0000
- stack 0: 0xF0
6573	 2CE	SHR		 	 
- stack 1: 0x770
- stack 0: 0x210
6574	 2CF	JUMP		 	 
- stack 0: 0x770
6575	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x770
6576	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x770
- stack 0: 0x770
6577	 212	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x2100223018901140389000104C6000204E0FFD0016F001403F00000041D0000
6578	 213	PUSH1	E0	 	 
- stack 2: 0x770
- stack 1: 0x2100223018901140389000104C6000204E0FFD0016F001403F00000041D0000
- stack 0: 0xE0
6579	 215	SHR		 	 
- stack 1: 0x770
- stack 0: 0x2100223
6580	 216	PUSH2	FFFF	 	 
- stack 2: 0x770
- stack 1: 0x2100223
- stack 0: 0xFFFF
6581	 219	AND		 	 
- stack 1: 0x770
- stack 0: 0x223
6582	 21A	PUSH1	01	 	 
- stack 2: 0x770
- stack 1: 0x223
- stack 0: 0x1
6583	 21C	SIGNEXTEND		 	 
- stack 1: 0x770
- stack 0: 0x223
6584	 21D	PUSH2	03A0	 	 
- stack 2: 0x770
- stack 1: 0x223
- stack 0: 0x3A0
6585	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x770
- stack 1: 0x223
- stack 0: 0x1000
6586	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x770
- stack 0: 0x1223
6587	 222	PUSH2	03A0	 	 
- stack 2: 0x770
- stack 1: 0x1223
- stack 0: 0x3A0
6588	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x770
6589	 226	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
6590	 228	ADD		 	 
- stack 0: 0x774
6591	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
6592	 22A	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x18901140389000104C6000204E0FFD0016F001403F00000041D000001DE0144
6593	 22B	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x18901140389000104C6000204E0FFD0016F001403F00000041D000001DE0144
- stack 0: 0xF0
6594	 22D	SHR		 	 
- stack 1: 0x774
- stack 0: 0x189
6595	 22E	JUMP		 	 
- stack 0: 0x774
6596	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x774
6597	 18A	PUSH2	0060	 	 
- stack 1: 0x774
- stack 0: 0x60
6598	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x774
- stack 0: 0x1223
6599	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x774
- stack 1: 0x1223
- stack 0: 0xFFFFFFFF
6600	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x774
- stack 0: 0x1223
6601	 194	PUSH2	03A0	 	 
- stack 2: 0x774
- stack 1: 0x1223
- stack 0: 0x3A0
6602	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x774
- stack 1: 0x1223
- stack 0: 0x1223
6603	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x774
- stack 2: 0x1223
- stack 1: 0x1223
- stack 0: 0xFFFFFFFF
6604	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x774
- stack 1: 0x1223
- stack 0: 0x1223
6605	 19E	SUB		 	 
- stack 1: 0x774
- stack 0: 0x0
6606	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x774
- stack 1: 0x0
- stack 0: 0x1A7
6607	 1A2	JUMPI		 	 
- stack 0: 0x774
6608	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x774
- stack 0: 0x1C1
6609	 1A6	JUMP		 	 
- stack 0: 0x774
6610	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x774
6611	 1C2	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
6612	 1C4	ADD		 	 
- stack 0: 0x778
6613	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
6614	 1C6	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x389000104C6000204E0FFD0016F001403F00000041D000001DE014405BE0001
6615	 1C7	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x389000104C6000204E0FFD0016F001403F00000041D000001DE014405BE0001
- stack 0: 0xF0
6616	 1C9	SHR		 	 
- stack 1: 0x778
- stack 0: 0x389
6617	 1CA	JUMP		 	 
- stack 0: 0x778
6618	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x778
6619	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x778
- stack 0: 0x778
6620	 38B	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x389000104C6000204E0FFD0016F001403F00000041D000001DE014405BE0001
6621	 38C	PUSH1	E0	 	 
- stack 2: 0x778
- stack 1: 0x389000104C6000204E0FFD0016F001403F00000041D000001DE014405BE0001
- stack 0: 0xE0
6622	 38E	SHR		 	 
- stack 1: 0x778
- stack 0: 0x3890001
6623	 38F	PUSH2	FFFF	 	 
- stack 2: 0x778
- stack 1: 0x3890001
- stack 0: 0xFFFF
6624	 392	AND		 	 
- stack 1: 0x778
- stack 0: 0x1
6625	 393	PUSH1	01	 	 
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x1
6626	 395	SIGNEXTEND		 	 
- stack 1: 0x778
- stack 0: 0x1
6627	 396	PUSH2	0080	 	 
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x80
6628	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x1
6629	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x778
- stack 0: 0x2
6630	 39B	PUSH2	0080	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0x80
6631	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x778
6632	 39F	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
6633	 3A1	ADD		 	 
- stack 0: 0x77C
6634	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
6635	 3A3	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x4C6000204E0FFD0016F001403F00000041D000001DE014405BE000100950122
6636	 3A4	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x4C6000204E0FFD0016F001403F00000041D000001DE014405BE000100950122
- stack 0: 0xF0
6637	 3A6	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x4C6
6638	 3A7	JUMP		 	 
- stack 0: 0x77C
6639	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x77C
6640	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x77C
- stack 0: 0x77C
6641	 4C8	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x4C6000204E0FFD0016F001403F00000041D000001DE014405BE000100950122
6642	 4C9	PUSH1	E0	 	 
- stack 2: 0x77C
- stack 1: 0x4C6000204E0FFD0016F001403F00000041D000001DE014405BE000100950122
- stack 0: 0xE0
6643	 4CB	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x4C60002
6644	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x77C
- stack 1: 0x4C60002
- stack 0: 0xFFFF
6645	 4CF	AND		 	 
- stack 1: 0x77C
- stack 0: 0x2
6646	 4D0	PUSH1	01	 	 
- stack 2: 0x77C
- stack 1: 0x2
- stack 0: 0x1
6647	 4D2	SIGNEXTEND		 	 
- stack 1: 0x77C
- stack 0: 0x2
6648	 4D3	PUSH2	00A0	 	 
- stack 2: 0x77C
- stack 1: 0x2
- stack 0: 0xA0
6649	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x77C
6650	 4D7	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
6651	 4D9	ADD		 	 
- stack 0: 0x780
6652	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
6653	 4DB	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x4E0FFD0016F001403F00000041D000001DE014405BE00010095012205350000
6654	 4DC	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0x4E0FFD0016F001403F00000041D000001DE014405BE00010095012205350000
- stack 0: 0xF0
6655	 4DE	SHR		 	 
- stack 1: 0x780
- stack 0: 0x4E0
6656	 4DF	JUMP		 	 
- stack 0: 0x780
6657	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x780
6658	 4E1	PUSH2	0080	 	 
- stack 1: 0x780
- stack 0: 0x80
6659	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x780
- stack 0: 0x2
6660	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x780
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6661	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x780
- stack 0: 0x2
6662	 4EB	PUSH2	00A0	 	 
- stack 2: 0x780
- stack 1: 0x2
- stack 0: 0xA0
6663	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x780
- stack 1: 0x2
- stack 0: 0x2
6664	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x780
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6665	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x780
- stack 1: 0x2
- stack 0: 0x2
6666	 4F5	SUB		 	 
- stack 1: 0x780
- stack 0: 0x0
6667	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x780
- stack 1: 0x0
- stack 0: 0x4FE
6668	 4F9	JUMPI		 	 
- stack 0: 0x780
6669	 4FA	PUSH2	0518	 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 1: 0x780
- stack 0: 0x518
6670	 4FD	JUMP		 	 
- stack 0: 0x780
6671	 518	JUMPDEST		 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x780
6672	 519	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
6673	 51B	ADD		 	 
- stack 0: 0x784
6674	 51C	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
6675	 51D	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x16F001403F00000041D000001DE014405BE0001009501220535000005350000
6676	 51E	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0x16F001403F00000041D000001DE014405BE0001009501220535000005350000
- stack 0: 0xF0
6677	 520	SHR		 	 
- stack 1: 0x784
- stack 0: 0x16F
6678	 521	JUMP		 	 
- stack 0: 0x784
6679	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x784
6680	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x784
- stack 0: 0x784
6681	 171	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x16F001403F00000041D000001DE014405BE0001009501220535000005350000
6682	 172	PUSH1	E0	 	 
- stack 2: 0x784
- stack 1: 0x16F001403F00000041D000001DE014405BE0001009501220535000005350000
- stack 0: 0xE0
6683	 174	SHR		 	 
- stack 1: 0x784
- stack 0: 0x16F0014
6684	 175	PUSH2	FFFF	 	 
- stack 2: 0x784
- stack 1: 0x16F0014
- stack 0: 0xFFFF
6685	 178	AND		 	 
- stack 1: 0x784
- stack 0: 0x14
6686	 179	PUSH1	01	 	 
- stack 2: 0x784
- stack 1: 0x14
- stack 0: 0x1
6687	 17B	SIGNEXTEND		 	 
- stack 1: 0x784
- stack 0: 0x14
6688	 17C	PUSH2	0380	 	 
- stack 2: 0x784
- stack 1: 0x14
- stack 0: 0x380
6689	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x784
6690	 180	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
6691	 182	ADD		 	 
- stack 0: 0x788
6692	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
6693	 184	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x3F00000041D000001DE014405BE0001009501220535000005350000042C0004
6694	 185	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x3F00000041D000001DE014405BE0001009501220535000005350000042C0004
- stack 0: 0xF0
6695	 187	SHR		 	 
- stack 1: 0x788
- stack 0: 0x3F0
6696	 188	JUMP		 	 
- stack 0: 0x788
6697	 3F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x788
6698	 3F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x788
- stack 0: 0x788
6699	 3F2	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x3F00000041D000001DE014405BE0001009501220535000005350000042C0004
6700	 3F3	PUSH1	E0	 	 
- stack 2: 0x788
- stack 1: 0x3F00000041D000001DE014405BE0001009501220535000005350000042C0004
- stack 0: 0xE0
6701	 3F5	SHR		 	 
- stack 1: 0x788
- stack 0: 0x3F00000
6702	 3F6	PUSH2	FFFF	 	 
- stack 2: 0x788
- stack 1: 0x3F00000
- stack 0: 0xFFFF
6703	 3F9	AND		 	 
- stack 1: 0x788
- stack 0: 0x0
6704	 3FA	PUSH1	01	 	 
- stack 2: 0x788
- stack 1: 0x0
- stack 0: 0x1
6705	 3FC	SIGNEXTEND		 	 
- stack 1: 0x788
- stack 0: 0x0
6706	 3FD	PUSH2	0080	 	 
- stack 2: 0x788
- stack 1: 0x0
- stack 0: 0x80
6707	 400	MSTORE		 	  ;; # store to x4
- stack 0: 0x788
6708	 401	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
6709	 403	ADD		 	 
- stack 0: 0x78C
6710	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
6711	 405	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x41D000001DE014405BE0001009501220535000005350000042C0004047E0004
6712	 406	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x41D000001DE014405BE0001009501220535000005350000042C0004047E0004
- stack 0: 0xF0
6713	 408	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x41D
6714	 409	JUMP		 	 
- stack 0: 0x78C
6715	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x78C
6716	 41E	DUP1		 	 
- stack 1: 0x78C
- stack 0: 0x78C
6717	 41F	PUSH2	0040	 	 
- stack 2: 0x78C
- stack 1: 0x78C
- stack 0: 0x40
6718	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x78C
6719	 423	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
6720	 425	ADD		 	 
- stack 0: 0x790
6721	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
6722	 427	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x1DE014405BE0001009501220535000005350000042C0004047E000402BD0001
6723	 428	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x1DE014405BE0001009501220535000005350000042C0004047E000402BD0001
- stack 0: 0xF0
6724	 42A	SHR		 	 
- stack 1: 0x790
- stack 0: 0x1DE
6725	 42B	JUMP		 	 
- stack 0: 0x790
6726	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x790
6727	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
6728	 1E0	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x1DE014405BE0001009501220535000005350000042C0004047E000402BD0001
6729	 1E1	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0x1DE014405BE0001009501220535000005350000042C0004047E000402BD0001
- stack 0: 0xE0
6730	 1E3	SHR		 	 
- stack 1: 0x790
- stack 0: 0x1DE0144
6731	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0x1DE0144
- stack 0: 0xFFFF
6732	 1E7	AND		 	 
- stack 1: 0x790
- stack 0: 0x144
6733	 1E8	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0x144
- stack 0: 0x1
6734	 1EA	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0x144
6735	 1EB	PUSH2	0040	 	 
- stack 2: 0x790
- stack 1: 0x144
- stack 0: 0x40
6736	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x790
- stack 1: 0x144
- stack 0: 0x78C
6737	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x790
- stack 0: 0x8D0
6738	 1F0	PUSH2	0040	 	 
- stack 2: 0x790
- stack 1: 0x8D0
- stack 0: 0x40
6739	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x790
6740	 1F4	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
6741	 1F6	ADD		 	 
- stack 0: 0x794
6742	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
6743	 1F8	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x5BE0001009501220535000005350000042C0004047E000402BD000102100122
6744	 1F9	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0x5BE0001009501220535000005350000042C0004047E000402BD000102100122
- stack 0: 0xF0
6745	 1FB	SHR		 	 
- stack 1: 0x794
- stack 0: 0x5BE
6746	 1FC	JUMP		 	 
- stack 0: 0x794
6747	 5BE	JUMPDEST		 ;; __riscvimpl_LUI_10b7	  ;; # instr: lui ra,0x1(ignore imm)
- stack 0: 0x794
6748	 5BF	PUSH4	00001000	 	 
- stack 1: 0x794
- stack 0: 0x1000
6749	 5C4	PUSH2	0020	 	 
- stack 2: 0x794
- stack 1: 0x1000
- stack 0: 0x20
6750	 5C7	MSTORE		 	  ;; # store to x1
- stack 0: 0x794
6751	 5C8	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
6752	 5CA	ADD		 	 
- stack 0: 0x798
6753	 5CB	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
6754	 5CC	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x9501220535000005350000042C0004047E000402BD000102100122018900D4
6755	 5CD	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0x9501220535000005350000042C0004047E000402BD000102100122018900D4
- stack 0: 0xF0
6756	 5CF	SHR		 	 
- stack 1: 0x798
- stack 0: 0x95
6757	 5D0	JUMP		 	 
- stack 0: 0x798
6758	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x798
6759	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x798
- stack 0: 0x798
6760	 97	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x9501220535000005350000042C0004047E000402BD000102100122018900D4
6761	 98	PUSH1	E0	 	 
- stack 2: 0x798
- stack 1: 0x9501220535000005350000042C0004047E000402BD000102100122018900D4
- stack 0: 0xE0
6762	 9A	SHR		 	 
- stack 1: 0x798
- stack 0: 0x950122
6763	 9B	PUSH2	FFFF	 	 
- stack 2: 0x798
- stack 1: 0x950122
- stack 0: 0xFFFF
6764	 9E	AND		 	 
- stack 1: 0x798
- stack 0: 0x122
6765	 9F	PUSH1	01	 	 
- stack 2: 0x798
- stack 1: 0x122
- stack 0: 0x1
6766	 A1	SIGNEXTEND		 	 
- stack 1: 0x798
- stack 0: 0x122
6767	 A2	PUSH2	0020	 	 
- stack 2: 0x798
- stack 1: 0x122
- stack 0: 0x20
6768	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x798
- stack 1: 0x122
- stack 0: 0x1000
6769	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x798
- stack 0: 0x1122
6770	 A7	PUSH2	0020	 	 
- stack 2: 0x798
- stack 1: 0x1122
- stack 0: 0x20
6771	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x798
6772	 AB	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
6773	 AD	ADD		 	 
- stack 0: 0x79C
6774	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
6775	 AF	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x535000005350000042C0004047E000402BD000102100122018900D403890001
6776	 B0	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x535000005350000042C0004047E000402BD000102100122018900D403890001
- stack 0: 0xF0
6777	 B2	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x535
6778	 B3	JUMP		 	 
- stack 0: 0x79C
6779	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x79C
6780	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
6781	 537	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x535000005350000042C0004047E000402BD000102100122018900D403890001
6782	 538	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x535000005350000042C0004047E000402BD000102100122018900D403890001
- stack 0: 0xE0
6783	 53A	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x5350000
6784	 53B	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x5350000
- stack 0: 0xFFFF
6785	 53E	AND		 	 
- stack 1: 0x79C
- stack 0: 0x0
6786	 53F	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0x0
- stack 0: 0x1
6787	 541	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0x0
6788	 542	POP		 	 
- stack 0: 0x79C
6789	 543	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
6790	 545	ADD		 	 
- stack 0: 0x7A0
6791	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
6792	 547	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x5350000042C0004047E000402BD000102100122018900D40389000104C60002
6793	 548	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x5350000042C0004047E000402BD000102100122018900D40389000104C60002
- stack 0: 0xF0
6794	 54A	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x535
6795	 54B	JUMP		 	 
- stack 0: 0x7A0
6796	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7A0
6797	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
6798	 537	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x5350000042C0004047E000402BD000102100122018900D40389000104C60002
6799	 538	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0x5350000042C0004047E000402BD000102100122018900D40389000104C60002
- stack 0: 0xE0
6800	 53A	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x5350000
6801	 53B	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x5350000
- stack 0: 0xFFFF
6802	 53E	AND		 	 
- stack 1: 0x7A0
- stack 0: 0x0
6803	 53F	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0x0
- stack 0: 0x1
6804	 541	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x0
6805	 542	POP		 	 
- stack 0: 0x7A0
6806	 543	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
6807	 545	ADD		 	 
- stack 0: 0x7A4
6808	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
6809	 547	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x42C0004047E000402BD000102100122018900D40389000104C6000204E0FFCC
6810	 548	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x42C0004047E000402BD000102100122018900D40389000104C6000204E0FFCC
- stack 0: 0xF0
6811	 54A	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x42C
6812	 54B	JUMP		 	 
- stack 0: 0x7A4
6813	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x7A4
6814	 42D	PUSH2	0040	 	 
- stack 1: 0x7A4
- stack 0: 0x40
6815	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x7A4
- stack 0: 0x8D0
6816	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7A4
- stack 1: 0x8D0
- stack 0: 0x7A4
6817	 432	MLOAD		 	 
- stack 2: 0x7A4
- stack 1: 0x8D0
- stack 0: 0x42C0004047E000402BD000102100122018900D40389000104C6000204E0FFCC
6818	 433	PUSH1	E0	 	 
- stack 3: 0x7A4
- stack 2: 0x8D0
- stack 1: 0x42C0004047E000402BD000102100122018900D40389000104C6000204E0FFCC
- stack 0: 0xE0
6819	 435	SHR		 	 
- stack 2: 0x7A4
- stack 1: 0x8D0
- stack 0: 0x42C0004
6820	 436	PUSH2	FFFF	 	 
- stack 3: 0x7A4
- stack 2: 0x8D0
- stack 1: 0x42C0004
- stack 0: 0xFFFF
6821	 439	AND		 	 
- stack 2: 0x7A4
- stack 1: 0x8D0
- stack 0: 0x4
6822	 43A	PUSH1	01	 	 
- stack 3: 0x7A4
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
6823	 43C	SIGNEXTEND		 	 
- stack 2: 0x7A4
- stack 1: 0x8D0
- stack 0: 0x4
6824	 43D	ADD		 	 
- stack 1: 0x7A4
- stack 0: 0x8D4
6825	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
6826	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A4
- stack 0: 0x8D4
6827	 444	PUSH1	02	 	 
- stack 2: 0x7A4
- stack 1: 0x8D4
- stack 0: 0x2
6828	 446	XOR		 	 
- stack 1: 0x7A4
- stack 0: 0x8D6
6829	 447	DUP1		 	 
- stack 2: 0x7A4
- stack 1: 0x8D6
- stack 0: 0x8D6
6830	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x7A4
- stack 1: 0x8D6
- stack 0: 0xBBCCDAABAABBA00A0AA030985678000000000000000000000000000000000000
6831	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x7A4
- stack 2: 0x8D6
- stack 1: 0xBBCCDAABAABBA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
6832	 46A	AND		 	 
- stack 2: 0x7A4
- stack 1: 0x8D6
- stack 0: 0xDAABAABBA00A0AA030985678000000000000000000000000000000000000
6833	 46B	PUSH2	0020	 	 
- stack 3: 0x7A4
- stack 2: 0x8D6
- stack 1: 0xDAABAABBA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0x20
6834	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x7A4
- stack 2: 0x8D6
- stack 1: 0xDAABAABBA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0x1122
6835	 46F	PUSH1	F0	 	 
- stack 4: 0x7A4
- stack 3: 0x8D6
- stack 2: 0xDAABAABBA00A0AA030985678000000000000000000000000000000000000
- stack 1: 0x1122
- stack 0: 0xF0
6836	 471	SHL		 	 
- stack 3: 0x7A4
- stack 2: 0x8D6
- stack 1: 0xDAABAABBA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0x1122000000000000000000000000000000000000000000000000000000000000
6837	 472	ADD		 	 
- stack 2: 0x7A4
- stack 1: 0x8D6
- stack 0: 0x1122DAABAABBA00A0AA030985678000000000000000000000000000000000000
6838	 473	SWAP1		 	 
- stack 2: 0x7A4
- stack 1: 0x1122DAABAABBA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0x8D6
6839	 474	MSTORE		 	 
- stack 0: 0x7A4
6840	 475	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
6841	 477	ADD		 	 
- stack 0: 0x7A8
6842	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
6843	 479	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x47E000402BD000102100122018900D40389000104C6000204E0FFCC016F0015
6844	 47A	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x47E000402BD000102100122018900D40389000104C6000204E0FFCC016F0015
- stack 0: 0xF0
6845	 47C	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x47E
6846	 47D	JUMP		 	 
- stack 0: 0x7A8
6847	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x7A8
6848	 47F	PUSH2	0040	 	 
- stack 1: 0x7A8
- stack 0: 0x40
6849	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x7A8
- stack 0: 0x8D0
6850	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
6851	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A8
- stack 0: 0x8D0
6852	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7A8
- stack 1: 0x8D0
- stack 0: 0x7A8
6853	 48A	MLOAD		 	 
- stack 2: 0x7A8
- stack 1: 0x8D0
- stack 0: 0x47E000402BD000102100122018900D40389000104C6000204E0FFCC016F0015
6854	 48B	PUSH1	E0	 	 
- stack 3: 0x7A8
- stack 2: 0x8D0
- stack 1: 0x47E000402BD000102100122018900D40389000104C6000204E0FFCC016F0015
- stack 0: 0xE0
6855	 48D	SHR		 	 
- stack 2: 0x7A8
- stack 1: 0x8D0
- stack 0: 0x47E0004
6856	 48E	PUSH2	FFFF	 	 
- stack 3: 0x7A8
- stack 2: 0x8D0
- stack 1: 0x47E0004
- stack 0: 0xFFFF
6857	 491	AND		 	 
- stack 2: 0x7A8
- stack 1: 0x8D0
- stack 0: 0x4
6858	 492	PUSH1	01	 	 
- stack 3: 0x7A8
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
6859	 494	SIGNEXTEND		 	 
- stack 2: 0x7A8
- stack 1: 0x8D0
- stack 0: 0x4
6860	 495	ADD		 	 
- stack 1: 0x7A8
- stack 0: 0x8D4
6861	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
6862	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A8
- stack 0: 0x8D4
6863	 49C	PUSH1	02	 	 
- stack 2: 0x7A8
- stack 1: 0x8D4
- stack 0: 0x2
6864	 49E	XOR		 	 
- stack 1: 0x7A8
- stack 0: 0x8D6
6865	 49F	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x1122DAABAABBA00A0AA030985678000000000000000000000000000000000000
6866	 4A0	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x1122DAABAABBA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0xF0
6867	 4A2	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x1122
6868	 4A3	PUSH1	01	 	 
- stack 2: 0x7A8
- stack 1: 0x1122
- stack 0: 0x1
6869	 4A5	SIGNEXTEND		 	 
- stack 1: 0x7A8
- stack 0: 0x1122
6870	 4A6	PUSH2	0060	 	 
- stack 2: 0x7A8
- stack 1: 0x1122
- stack 0: 0x60
6871	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x7A8
6872	 4AA	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
6873	 4AC	ADD		 	 
- stack 0: 0x7AC
6874	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
6875	 4AE	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x2BD000102100122018900D40389000104C6000204E0FFCC016F001503F00000
6876	 4AF	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0x2BD000102100122018900D40389000104C6000204E0FFCC016F001503F00000
- stack 0: 0xF0
6877	 4B1	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x2BD
6878	 4B2	JUMP		 	 
- stack 0: 0x7AC
6879	 2BD	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x7AC
6880	 2BE	PUSH4	00001000	 	 
- stack 1: 0x7AC
- stack 0: 0x1000
6881	 2C3	PUSH2	03A0	 	 
- stack 2: 0x7AC
- stack 1: 0x1000
- stack 0: 0x3A0
6882	 2C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x7AC
6883	 2C7	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
6884	 2C9	ADD		 	 
- stack 0: 0x7B0
6885	 2CA	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
6886	 2CB	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x2100122018900D40389000104C6000204E0FFCC016F001503F00000041D0000
6887	 2CC	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x2100122018900D40389000104C6000204E0FFCC016F001503F00000041D0000
- stack 0: 0xF0
6888	 2CE	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x210
6889	 2CF	JUMP		 	 
- stack 0: 0x7B0
6890	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x7B0
6891	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B0
- stack 0: 0x7B0
6892	 212	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x2100122018900D40389000104C6000204E0FFCC016F001503F00000041D0000
6893	 213	PUSH1	E0	 	 
- stack 2: 0x7B0
- stack 1: 0x2100122018900D40389000104C6000204E0FFCC016F001503F00000041D0000
- stack 0: 0xE0
6894	 215	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x2100122
6895	 216	PUSH2	FFFF	 	 
- stack 2: 0x7B0
- stack 1: 0x2100122
- stack 0: 0xFFFF
6896	 219	AND		 	 
- stack 1: 0x7B0
- stack 0: 0x122
6897	 21A	PUSH1	01	 	 
- stack 2: 0x7B0
- stack 1: 0x122
- stack 0: 0x1
6898	 21C	SIGNEXTEND		 	 
- stack 1: 0x7B0
- stack 0: 0x122
6899	 21D	PUSH2	03A0	 	 
- stack 2: 0x7B0
- stack 1: 0x122
- stack 0: 0x3A0
6900	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x7B0
- stack 1: 0x122
- stack 0: 0x1000
6901	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x7B0
- stack 0: 0x1122
6902	 222	PUSH2	03A0	 	 
- stack 2: 0x7B0
- stack 1: 0x1122
- stack 0: 0x3A0
6903	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x7B0
6904	 226	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
6905	 228	ADD		 	 
- stack 0: 0x7B4
6906	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
6907	 22A	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x18900D40389000104C6000204E0FFCC016F001503F00000041D000001DE0104
6908	 22B	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0x18900D40389000104C6000204E0FFCC016F001503F00000041D000001DE0104
- stack 0: 0xF0
6909	 22D	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x189
6910	 22E	JUMP		 	 
- stack 0: 0x7B4
6911	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x7B4
6912	 18A	PUSH2	0060	 	 
- stack 1: 0x7B4
- stack 0: 0x60
6913	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x7B4
- stack 0: 0x1122
6914	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B4
- stack 1: 0x1122
- stack 0: 0xFFFFFFFF
6915	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B4
- stack 0: 0x1122
6916	 194	PUSH2	03A0	 	 
- stack 2: 0x7B4
- stack 1: 0x1122
- stack 0: 0x3A0
6917	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x7B4
- stack 1: 0x1122
- stack 0: 0x1122
6918	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7B4
- stack 2: 0x1122
- stack 1: 0x1122
- stack 0: 0xFFFFFFFF
6919	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7B4
- stack 1: 0x1122
- stack 0: 0x1122
6920	 19E	SUB		 	 
- stack 1: 0x7B4
- stack 0: 0x0
6921	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x7B4
- stack 1: 0x0
- stack 0: 0x1A7
6922	 1A2	JUMPI		 	 
- stack 0: 0x7B4
6923	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x7B4
- stack 0: 0x1C1
6924	 1A6	JUMP		 	 
- stack 0: 0x7B4
6925	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x7B4
6926	 1C2	PUSH1	04	 	 
- stack 1: 0x7B4
- stack 0: 0x4
6927	 1C4	ADD		 	 
- stack 0: 0x7B8
6928	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
6929	 1C6	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x389000104C6000204E0FFCC016F001503F00000041D000001DE010405350000
6930	 1C7	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0x389000104C6000204E0FFCC016F001503F00000041D000001DE010405350000
- stack 0: 0xF0
6931	 1C9	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x389
6932	 1CA	JUMP		 	 
- stack 0: 0x7B8
6933	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x7B8
6934	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B8
- stack 0: 0x7B8
6935	 38B	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x389000104C6000204E0FFCC016F001503F00000041D000001DE010405350000
6936	 38C	PUSH1	E0	 	 
- stack 2: 0x7B8
- stack 1: 0x389000104C6000204E0FFCC016F001503F00000041D000001DE010405350000
- stack 0: 0xE0
6937	 38E	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x3890001
6938	 38F	PUSH2	FFFF	 	 
- stack 2: 0x7B8
- stack 1: 0x3890001
- stack 0: 0xFFFF
6939	 392	AND		 	 
- stack 1: 0x7B8
- stack 0: 0x1
6940	 393	PUSH1	01	 	 
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0x1
6941	 395	SIGNEXTEND		 	 
- stack 1: 0x7B8
- stack 0: 0x1
6942	 396	PUSH2	0080	 	 
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0x80
6943	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0x0
6944	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x7B8
- stack 0: 0x1
6945	 39B	PUSH2	0080	 	 
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0x80
6946	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x7B8
6947	 39F	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
6948	 3A1	ADD		 	 
- stack 0: 0x7BC
6949	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
6950	 3A3	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x4C6000204E0FFCC016F001503F00000041D000001DE01040535000005D10112
6951	 3A4	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0x4C6000204E0FFCC016F001503F00000041D000001DE01040535000005D10112
- stack 0: 0xF0
6952	 3A6	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x4C6
6953	 3A7	JUMP		 	 
- stack 0: 0x7BC
6954	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7BC
6955	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7BC
- stack 0: 0x7BC
6956	 4C8	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x4C6000204E0FFCC016F001503F00000041D000001DE01040535000005D10112
6957	 4C9	PUSH1	E0	 	 
- stack 2: 0x7BC
- stack 1: 0x4C6000204E0FFCC016F001503F00000041D000001DE01040535000005D10112
- stack 0: 0xE0
6958	 4CB	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x4C60002
6959	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x7BC
- stack 1: 0x4C60002
- stack 0: 0xFFFF
6960	 4CF	AND		 	 
- stack 1: 0x7BC
- stack 0: 0x2
6961	 4D0	PUSH1	01	 	 
- stack 2: 0x7BC
- stack 1: 0x2
- stack 0: 0x1
6962	 4D2	SIGNEXTEND		 	 
- stack 1: 0x7BC
- stack 0: 0x2
6963	 4D3	PUSH2	00A0	 	 
- stack 2: 0x7BC
- stack 1: 0x2
- stack 0: 0xA0
6964	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x7BC
6965	 4D7	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
6966	 4D9	ADD		 	 
- stack 0: 0x7C0
6967	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
6968	 4DB	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x4E0FFCC016F001503F00000041D000001DE01040535000005D10112042C0006
6969	 4DC	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x4E0FFCC016F001503F00000041D000001DE01040535000005D10112042C0006
- stack 0: 0xF0
6970	 4DE	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x4E0
6971	 4DF	JUMP		 	 
- stack 0: 0x7C0
6972	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x7C0
6973	 4E1	PUSH2	0080	 	 
- stack 1: 0x7C0
- stack 0: 0x80
6974	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x7C0
- stack 0: 0x1
6975	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7C0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6976	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7C0
- stack 0: 0x1
6977	 4EB	PUSH2	00A0	 	 
- stack 2: 0x7C0
- stack 1: 0x1
- stack 0: 0xA0
6978	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x7C0
- stack 1: 0x1
- stack 0: 0x2
6979	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7C0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6980	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7C0
- stack 1: 0x1
- stack 0: 0x2
6981	 4F5	SUB		 	 
- stack 1: 0x7C0
- stack 0: 0x1
6982	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x7C0
- stack 1: 0x1
- stack 0: 0x4FE
6983	 4F9	JUMPI		 	 
- stack 0: 0x7C0
6984	 4FE	JUMPDEST		 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x7C0
6985	 4FF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
6986	 500	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x4E0FFCC016F001503F00000041D000001DE01040535000005D10112042C0006
6987	 501	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0x4E0FFCC016F001503F00000041D000001DE01040535000005D10112042C0006
- stack 0: 0xE0
6988	 503	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x4E0FFCC
6989	 504	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0x4E0FFCC
- stack 0: 0xFFFF
6990	 507	AND		 	 
- stack 1: 0x7C0
- stack 0: 0xFFCC
6991	 508	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0xFFCC
- stack 0: 0x1
6992	 50A	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
6993	 50B	ADD		 	 
- stack 0: 0x78C
6994	 50C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x78C
- stack 0: 0xFFFFFFFF
6995	 511	AND		 	  ;; # mask to 32 bits
- stack 0: 0x78C
6996	 512	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
6997	 513	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x41D000001DE014405BE0001009501220535000005350000042C0004047E0004
6998	 514	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x41D000001DE014405BE0001009501220535000005350000042C0004047E0004
- stack 0: 0xF0
6999	 516	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x41D
7000	 517	JUMP		 	 
- stack 0: 0x78C
7001	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x78C
7002	 41E	DUP1		 	 
- stack 1: 0x78C
- stack 0: 0x78C
7003	 41F	PUSH2	0040	 	 
- stack 2: 0x78C
- stack 1: 0x78C
- stack 0: 0x40
7004	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x78C
7005	 423	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
7006	 425	ADD		 	 
- stack 0: 0x790
7007	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
7008	 427	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x1DE014405BE0001009501220535000005350000042C0004047E000402BD0001
7009	 428	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x1DE014405BE0001009501220535000005350000042C0004047E000402BD0001
- stack 0: 0xF0
7010	 42A	SHR		 	 
- stack 1: 0x790
- stack 0: 0x1DE
7011	 42B	JUMP		 	 
- stack 0: 0x790
7012	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x790
7013	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
7014	 1E0	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x1DE014405BE0001009501220535000005350000042C0004047E000402BD0001
7015	 1E1	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0x1DE014405BE0001009501220535000005350000042C0004047E000402BD0001
- stack 0: 0xE0
7016	 1E3	SHR		 	 
- stack 1: 0x790
- stack 0: 0x1DE0144
7017	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0x1DE0144
- stack 0: 0xFFFF
7018	 1E7	AND		 	 
- stack 1: 0x790
- stack 0: 0x144
7019	 1E8	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0x144
- stack 0: 0x1
7020	 1EA	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0x144
7021	 1EB	PUSH2	0040	 	 
- stack 2: 0x790
- stack 1: 0x144
- stack 0: 0x40
7022	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x790
- stack 1: 0x144
- stack 0: 0x78C
7023	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x790
- stack 0: 0x8D0
7024	 1F0	PUSH2	0040	 	 
- stack 2: 0x790
- stack 1: 0x8D0
- stack 0: 0x40
7025	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x790
7026	 1F4	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
7027	 1F6	ADD		 	 
- stack 0: 0x794
7028	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
7029	 1F8	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x5BE0001009501220535000005350000042C0004047E000402BD000102100122
7030	 1F9	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0x5BE0001009501220535000005350000042C0004047E000402BD000102100122
- stack 0: 0xF0
7031	 1FB	SHR		 	 
- stack 1: 0x794
- stack 0: 0x5BE
7032	 1FC	JUMP		 	 
- stack 0: 0x794
7033	 5BE	JUMPDEST		 ;; __riscvimpl_LUI_10b7	  ;; # instr: lui ra,0x1(ignore imm)
- stack 0: 0x794
7034	 5BF	PUSH4	00001000	 	 
- stack 1: 0x794
- stack 0: 0x1000
7035	 5C4	PUSH2	0020	 	 
- stack 2: 0x794
- stack 1: 0x1000
- stack 0: 0x20
7036	 5C7	MSTORE		 	  ;; # store to x1
- stack 0: 0x794
7037	 5C8	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
7038	 5CA	ADD		 	 
- stack 0: 0x798
7039	 5CB	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
7040	 5CC	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x9501220535000005350000042C0004047E000402BD000102100122018900D4
7041	 5CD	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0x9501220535000005350000042C0004047E000402BD000102100122018900D4
- stack 0: 0xF0
7042	 5CF	SHR		 	 
- stack 1: 0x798
- stack 0: 0x95
7043	 5D0	JUMP		 	 
- stack 0: 0x798
7044	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x798
7045	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x798
- stack 0: 0x798
7046	 97	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x9501220535000005350000042C0004047E000402BD000102100122018900D4
7047	 98	PUSH1	E0	 	 
- stack 2: 0x798
- stack 1: 0x9501220535000005350000042C0004047E000402BD000102100122018900D4
- stack 0: 0xE0
7048	 9A	SHR		 	 
- stack 1: 0x798
- stack 0: 0x950122
7049	 9B	PUSH2	FFFF	 	 
- stack 2: 0x798
- stack 1: 0x950122
- stack 0: 0xFFFF
7050	 9E	AND		 	 
- stack 1: 0x798
- stack 0: 0x122
7051	 9F	PUSH1	01	 	 
- stack 2: 0x798
- stack 1: 0x122
- stack 0: 0x1
7052	 A1	SIGNEXTEND		 	 
- stack 1: 0x798
- stack 0: 0x122
7053	 A2	PUSH2	0020	 	 
- stack 2: 0x798
- stack 1: 0x122
- stack 0: 0x20
7054	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x798
- stack 1: 0x122
- stack 0: 0x1000
7055	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x798
- stack 0: 0x1122
7056	 A7	PUSH2	0020	 	 
- stack 2: 0x798
- stack 1: 0x1122
- stack 0: 0x20
7057	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x798
7058	 AB	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
7059	 AD	ADD		 	 
- stack 0: 0x79C
7060	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
7061	 AF	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x535000005350000042C0004047E000402BD000102100122018900D403890001
7062	 B0	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x535000005350000042C0004047E000402BD000102100122018900D403890001
- stack 0: 0xF0
7063	 B2	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x535
7064	 B3	JUMP		 	 
- stack 0: 0x79C
7065	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x79C
7066	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
7067	 537	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x535000005350000042C0004047E000402BD000102100122018900D403890001
7068	 538	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x535000005350000042C0004047E000402BD000102100122018900D403890001
- stack 0: 0xE0
7069	 53A	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x5350000
7070	 53B	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x5350000
- stack 0: 0xFFFF
7071	 53E	AND		 	 
- stack 1: 0x79C
- stack 0: 0x0
7072	 53F	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0x0
- stack 0: 0x1
7073	 541	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0x0
7074	 542	POP		 	 
- stack 0: 0x79C
7075	 543	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
7076	 545	ADD		 	 
- stack 0: 0x7A0
7077	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
7078	 547	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x5350000042C0004047E000402BD000102100122018900D40389000104C60002
7079	 548	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x5350000042C0004047E000402BD000102100122018900D40389000104C60002
- stack 0: 0xF0
7080	 54A	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x535
7081	 54B	JUMP		 	 
- stack 0: 0x7A0
7082	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7A0
7083	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
7084	 537	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x5350000042C0004047E000402BD000102100122018900D40389000104C60002
7085	 538	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0x5350000042C0004047E000402BD000102100122018900D40389000104C60002
- stack 0: 0xE0
7086	 53A	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x5350000
7087	 53B	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x5350000
- stack 0: 0xFFFF
7088	 53E	AND		 	 
- stack 1: 0x7A0
- stack 0: 0x0
7089	 53F	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0x0
- stack 0: 0x1
7090	 541	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x0
7091	 542	POP		 	 
- stack 0: 0x7A0
7092	 543	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
7093	 545	ADD		 	 
- stack 0: 0x7A4
7094	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
7095	 547	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x42C0004047E000402BD000102100122018900D40389000104C6000204E0FFCC
7096	 548	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x42C0004047E000402BD000102100122018900D40389000104C6000204E0FFCC
- stack 0: 0xF0
7097	 54A	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x42C
7098	 54B	JUMP		 	 
- stack 0: 0x7A4
7099	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x7A4
7100	 42D	PUSH2	0040	 	 
- stack 1: 0x7A4
- stack 0: 0x40
7101	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x7A4
- stack 0: 0x8D0
7102	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7A4
- stack 1: 0x8D0
- stack 0: 0x7A4
7103	 432	MLOAD		 	 
- stack 2: 0x7A4
- stack 1: 0x8D0
- stack 0: 0x42C0004047E000402BD000102100122018900D40389000104C6000204E0FFCC
7104	 433	PUSH1	E0	 	 
- stack 3: 0x7A4
- stack 2: 0x8D0
- stack 1: 0x42C0004047E000402BD000102100122018900D40389000104C6000204E0FFCC
- stack 0: 0xE0
7105	 435	SHR		 	 
- stack 2: 0x7A4
- stack 1: 0x8D0
- stack 0: 0x42C0004
7106	 436	PUSH2	FFFF	 	 
- stack 3: 0x7A4
- stack 2: 0x8D0
- stack 1: 0x42C0004
- stack 0: 0xFFFF
7107	 439	AND		 	 
- stack 2: 0x7A4
- stack 1: 0x8D0
- stack 0: 0x4
7108	 43A	PUSH1	01	 	 
- stack 3: 0x7A4
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
7109	 43C	SIGNEXTEND		 	 
- stack 2: 0x7A4
- stack 1: 0x8D0
- stack 0: 0x4
7110	 43D	ADD		 	 
- stack 1: 0x7A4
- stack 0: 0x8D4
7111	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
7112	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A4
- stack 0: 0x8D4
7113	 444	PUSH1	02	 	 
- stack 2: 0x7A4
- stack 1: 0x8D4
- stack 0: 0x2
7114	 446	XOR		 	 
- stack 1: 0x7A4
- stack 0: 0x8D6
7115	 447	DUP1		 	 
- stack 2: 0x7A4
- stack 1: 0x8D6
- stack 0: 0x8D6
7116	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x7A4
- stack 1: 0x8D6
- stack 0: 0x1122DAABAABBA00A0AA030985678000000000000000000000000000000000000
7117	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x7A4
- stack 2: 0x8D6
- stack 1: 0x1122DAABAABBA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7118	 46A	AND		 	 
- stack 2: 0x7A4
- stack 1: 0x8D6
- stack 0: 0xDAABAABBA00A0AA030985678000000000000000000000000000000000000
7119	 46B	PUSH2	0020	 	 
- stack 3: 0x7A4
- stack 2: 0x8D6
- stack 1: 0xDAABAABBA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0x20
7120	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x7A4
- stack 2: 0x8D6
- stack 1: 0xDAABAABBA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0x1122
7121	 46F	PUSH1	F0	 	 
- stack 4: 0x7A4
- stack 3: 0x8D6
- stack 2: 0xDAABAABBA00A0AA030985678000000000000000000000000000000000000
- stack 1: 0x1122
- stack 0: 0xF0
7122	 471	SHL		 	 
- stack 3: 0x7A4
- stack 2: 0x8D6
- stack 1: 0xDAABAABBA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0x1122000000000000000000000000000000000000000000000000000000000000
7123	 472	ADD		 	 
- stack 2: 0x7A4
- stack 1: 0x8D6
- stack 0: 0x1122DAABAABBA00A0AA030985678000000000000000000000000000000000000
7124	 473	SWAP1		 	 
- stack 2: 0x7A4
- stack 1: 0x1122DAABAABBA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0x8D6
7125	 474	MSTORE		 	 
- stack 0: 0x7A4
7126	 475	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
7127	 477	ADD		 	 
- stack 0: 0x7A8
7128	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
7129	 479	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x47E000402BD000102100122018900D40389000104C6000204E0FFCC016F0015
7130	 47A	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x47E000402BD000102100122018900D40389000104C6000204E0FFCC016F0015
- stack 0: 0xF0
7131	 47C	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x47E
7132	 47D	JUMP		 	 
- stack 0: 0x7A8
7133	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x7A8
7134	 47F	PUSH2	0040	 	 
- stack 1: 0x7A8
- stack 0: 0x40
7135	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x7A8
- stack 0: 0x8D0
7136	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
7137	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A8
- stack 0: 0x8D0
7138	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7A8
- stack 1: 0x8D0
- stack 0: 0x7A8
7139	 48A	MLOAD		 	 
- stack 2: 0x7A8
- stack 1: 0x8D0
- stack 0: 0x47E000402BD000102100122018900D40389000104C6000204E0FFCC016F0015
7140	 48B	PUSH1	E0	 	 
- stack 3: 0x7A8
- stack 2: 0x8D0
- stack 1: 0x47E000402BD000102100122018900D40389000104C6000204E0FFCC016F0015
- stack 0: 0xE0
7141	 48D	SHR		 	 
- stack 2: 0x7A8
- stack 1: 0x8D0
- stack 0: 0x47E0004
7142	 48E	PUSH2	FFFF	 	 
- stack 3: 0x7A8
- stack 2: 0x8D0
- stack 1: 0x47E0004
- stack 0: 0xFFFF
7143	 491	AND		 	 
- stack 2: 0x7A8
- stack 1: 0x8D0
- stack 0: 0x4
7144	 492	PUSH1	01	 	 
- stack 3: 0x7A8
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
7145	 494	SIGNEXTEND		 	 
- stack 2: 0x7A8
- stack 1: 0x8D0
- stack 0: 0x4
7146	 495	ADD		 	 
- stack 1: 0x7A8
- stack 0: 0x8D4
7147	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
7148	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A8
- stack 0: 0x8D4
7149	 49C	PUSH1	02	 	 
- stack 2: 0x7A8
- stack 1: 0x8D4
- stack 0: 0x2
7150	 49E	XOR		 	 
- stack 1: 0x7A8
- stack 0: 0x8D6
7151	 49F	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x1122DAABAABBA00A0AA030985678000000000000000000000000000000000000
7152	 4A0	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x1122DAABAABBA00A0AA030985678000000000000000000000000000000000000
- stack 0: 0xF0
7153	 4A2	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x1122
7154	 4A3	PUSH1	01	 	 
- stack 2: 0x7A8
- stack 1: 0x1122
- stack 0: 0x1
7155	 4A5	SIGNEXTEND		 	 
- stack 1: 0x7A8
- stack 0: 0x1122
7156	 4A6	PUSH2	0060	 	 
- stack 2: 0x7A8
- stack 1: 0x1122
- stack 0: 0x60
7157	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x7A8
7158	 4AA	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
7159	 4AC	ADD		 	 
- stack 0: 0x7AC
7160	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
7161	 4AE	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x2BD000102100122018900D40389000104C6000204E0FFCC016F001503F00000
7162	 4AF	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0x2BD000102100122018900D40389000104C6000204E0FFCC016F001503F00000
- stack 0: 0xF0
7163	 4B1	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x2BD
7164	 4B2	JUMP		 	 
- stack 0: 0x7AC
7165	 2BD	JUMPDEST		 ;; __riscvimpl_LUI_1eb7	  ;; # instr: lui t4,0x1(ignore imm)
- stack 0: 0x7AC
7166	 2BE	PUSH4	00001000	 	 
- stack 1: 0x7AC
- stack 0: 0x1000
7167	 2C3	PUSH2	03A0	 	 
- stack 2: 0x7AC
- stack 1: 0x1000
- stack 0: 0x3A0
7168	 2C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x7AC
7169	 2C7	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
7170	 2C9	ADD		 	 
- stack 0: 0x7B0
7171	 2CA	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
7172	 2CB	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x2100122018900D40389000104C6000204E0FFCC016F001503F00000041D0000
7173	 2CC	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x2100122018900D40389000104C6000204E0FFCC016F001503F00000041D0000
- stack 0: 0xF0
7174	 2CE	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x210
7175	 2CF	JUMP		 	 
- stack 0: 0x7B0
7176	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x7B0
7177	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B0
- stack 0: 0x7B0
7178	 212	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x2100122018900D40389000104C6000204E0FFCC016F001503F00000041D0000
7179	 213	PUSH1	E0	 	 
- stack 2: 0x7B0
- stack 1: 0x2100122018900D40389000104C6000204E0FFCC016F001503F00000041D0000
- stack 0: 0xE0
7180	 215	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x2100122
7181	 216	PUSH2	FFFF	 	 
- stack 2: 0x7B0
- stack 1: 0x2100122
- stack 0: 0xFFFF
7182	 219	AND		 	 
- stack 1: 0x7B0
- stack 0: 0x122
7183	 21A	PUSH1	01	 	 
- stack 2: 0x7B0
- stack 1: 0x122
- stack 0: 0x1
7184	 21C	SIGNEXTEND		 	 
- stack 1: 0x7B0
- stack 0: 0x122
7185	 21D	PUSH2	03A0	 	 
- stack 2: 0x7B0
- stack 1: 0x122
- stack 0: 0x3A0
7186	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x7B0
- stack 1: 0x122
- stack 0: 0x1000
7187	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x7B0
- stack 0: 0x1122
7188	 222	PUSH2	03A0	 	 
- stack 2: 0x7B0
- stack 1: 0x1122
- stack 0: 0x3A0
7189	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x7B0
7190	 226	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
7191	 228	ADD		 	 
- stack 0: 0x7B4
7192	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
7193	 22A	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x18900D40389000104C6000204E0FFCC016F001503F00000041D000001DE0104
7194	 22B	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0x18900D40389000104C6000204E0FFCC016F001503F00000041D000001DE0104
- stack 0: 0xF0
7195	 22D	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x189
7196	 22E	JUMP		 	 
- stack 0: 0x7B4
7197	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x7B4
7198	 18A	PUSH2	0060	 	 
- stack 1: 0x7B4
- stack 0: 0x60
7199	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x7B4
- stack 0: 0x1122
7200	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B4
- stack 1: 0x1122
- stack 0: 0xFFFFFFFF
7201	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B4
- stack 0: 0x1122
7202	 194	PUSH2	03A0	 	 
- stack 2: 0x7B4
- stack 1: 0x1122
- stack 0: 0x3A0
7203	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x7B4
- stack 1: 0x1122
- stack 0: 0x1122
7204	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7B4
- stack 2: 0x1122
- stack 1: 0x1122
- stack 0: 0xFFFFFFFF
7205	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7B4
- stack 1: 0x1122
- stack 0: 0x1122
7206	 19E	SUB		 	 
- stack 1: 0x7B4
- stack 0: 0x0
7207	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x7B4
- stack 1: 0x0
- stack 0: 0x1A7
7208	 1A2	JUMPI		 	 
- stack 0: 0x7B4
7209	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x7B4
- stack 0: 0x1C1
7210	 1A6	JUMP		 	 
- stack 0: 0x7B4
7211	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x7B4
7212	 1C2	PUSH1	04	 	 
- stack 1: 0x7B4
- stack 0: 0x4
7213	 1C4	ADD		 	 
- stack 0: 0x7B8
7214	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
7215	 1C6	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x389000104C6000204E0FFCC016F001503F00000041D000001DE010405350000
7216	 1C7	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0x389000104C6000204E0FFCC016F001503F00000041D000001DE010405350000
- stack 0: 0xF0
7217	 1C9	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x389
7218	 1CA	JUMP		 	 
- stack 0: 0x7B8
7219	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x7B8
7220	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B8
- stack 0: 0x7B8
7221	 38B	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x389000104C6000204E0FFCC016F001503F00000041D000001DE010405350000
7222	 38C	PUSH1	E0	 	 
- stack 2: 0x7B8
- stack 1: 0x389000104C6000204E0FFCC016F001503F00000041D000001DE010405350000
- stack 0: 0xE0
7223	 38E	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x3890001
7224	 38F	PUSH2	FFFF	 	 
- stack 2: 0x7B8
- stack 1: 0x3890001
- stack 0: 0xFFFF
7225	 392	AND		 	 
- stack 1: 0x7B8
- stack 0: 0x1
7226	 393	PUSH1	01	 	 
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0x1
7227	 395	SIGNEXTEND		 	 
- stack 1: 0x7B8
- stack 0: 0x1
7228	 396	PUSH2	0080	 	 
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0x80
7229	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0x1
7230	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x7B8
- stack 0: 0x2
7231	 39B	PUSH2	0080	 	 
- stack 2: 0x7B8
- stack 1: 0x2
- stack 0: 0x80
7232	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x7B8
7233	 39F	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
7234	 3A1	ADD		 	 
- stack 0: 0x7BC
7235	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
7236	 3A3	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x4C6000204E0FFCC016F001503F00000041D000001DE01040535000005D10112
7237	 3A4	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0x4C6000204E0FFCC016F001503F00000041D000001DE01040535000005D10112
- stack 0: 0xF0
7238	 3A6	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x4C6
7239	 3A7	JUMP		 	 
- stack 0: 0x7BC
7240	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7BC
7241	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7BC
- stack 0: 0x7BC
7242	 4C8	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x4C6000204E0FFCC016F001503F00000041D000001DE01040535000005D10112
7243	 4C9	PUSH1	E0	 	 
- stack 2: 0x7BC
- stack 1: 0x4C6000204E0FFCC016F001503F00000041D000001DE01040535000005D10112
- stack 0: 0xE0
7244	 4CB	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x4C60002
7245	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x7BC
- stack 1: 0x4C60002
- stack 0: 0xFFFF
7246	 4CF	AND		 	 
- stack 1: 0x7BC
- stack 0: 0x2
7247	 4D0	PUSH1	01	 	 
- stack 2: 0x7BC
- stack 1: 0x2
- stack 0: 0x1
7248	 4D2	SIGNEXTEND		 	 
- stack 1: 0x7BC
- stack 0: 0x2
7249	 4D3	PUSH2	00A0	 	 
- stack 2: 0x7BC
- stack 1: 0x2
- stack 0: 0xA0
7250	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x7BC
7251	 4D7	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
7252	 4D9	ADD		 	 
- stack 0: 0x7C0
7253	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
7254	 4DB	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x4E0FFCC016F001503F00000041D000001DE01040535000005D10112042C0006
7255	 4DC	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x4E0FFCC016F001503F00000041D000001DE01040535000005D10112042C0006
- stack 0: 0xF0
7256	 4DE	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x4E0
7257	 4DF	JUMP		 	 
- stack 0: 0x7C0
7258	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x7C0
7259	 4E1	PUSH2	0080	 	 
- stack 1: 0x7C0
- stack 0: 0x80
7260	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x7C0
- stack 0: 0x2
7261	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7C0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7262	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7C0
- stack 0: 0x2
7263	 4EB	PUSH2	00A0	 	 
- stack 2: 0x7C0
- stack 1: 0x2
- stack 0: 0xA0
7264	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x7C0
- stack 1: 0x2
- stack 0: 0x2
7265	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7C0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7266	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7C0
- stack 1: 0x2
- stack 0: 0x2
7267	 4F5	SUB		 	 
- stack 1: 0x7C0
- stack 0: 0x0
7268	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x7C0
- stack 1: 0x0
- stack 0: 0x4FE
7269	 4F9	JUMPI		 	 
- stack 0: 0x7C0
7270	 4FA	PUSH2	0518	 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 1: 0x7C0
- stack 0: 0x518
7271	 4FD	JUMP		 	 
- stack 0: 0x7C0
7272	 518	JUMPDEST		 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x7C0
7273	 519	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
7274	 51B	ADD		 	 
- stack 0: 0x7C4
7275	 51C	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
7276	 51D	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x16F001503F00000041D000001DE01040535000005D10112042C0006047E0006
7277	 51E	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x16F001503F00000041D000001DE01040535000005D10112042C0006047E0006
- stack 0: 0xF0
7278	 520	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x16F
7279	 521	JUMP		 	 
- stack 0: 0x7C4
7280	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7C4
7281	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C4
- stack 0: 0x7C4
7282	 171	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x16F001503F00000041D000001DE01040535000005D10112042C0006047E0006
7283	 172	PUSH1	E0	 	 
- stack 2: 0x7C4
- stack 1: 0x16F001503F00000041D000001DE01040535000005D10112042C0006047E0006
- stack 0: 0xE0
7284	 174	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x16F0015
7285	 175	PUSH2	FFFF	 	 
- stack 2: 0x7C4
- stack 1: 0x16F0015
- stack 0: 0xFFFF
7286	 178	AND		 	 
- stack 1: 0x7C4
- stack 0: 0x15
7287	 179	PUSH1	01	 	 
- stack 2: 0x7C4
- stack 1: 0x15
- stack 0: 0x1
7288	 17B	SIGNEXTEND		 	 
- stack 1: 0x7C4
- stack 0: 0x15
7289	 17C	PUSH2	0380	 	 
- stack 2: 0x7C4
- stack 1: 0x15
- stack 0: 0x380
7290	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x7C4
7291	 180	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
7292	 182	ADD		 	 
- stack 0: 0x7C8
7293	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
7294	 184	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x3F00000041D000001DE01040535000005D10112042C0006047E000601550112
7295	 185	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x3F00000041D000001DE01040535000005D10112042C0006047E000601550112
- stack 0: 0xF0
7296	 187	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x3F0
7297	 188	JUMP		 	 
- stack 0: 0x7C8
7298	 3F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7C8
7299	 3F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
7300	 3F2	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x3F00000041D000001DE01040535000005D10112042C0006047E000601550112
7301	 3F3	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x3F00000041D000001DE01040535000005D10112042C0006047E000601550112
- stack 0: 0xE0
7302	 3F5	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x3F00000
7303	 3F6	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x3F00000
- stack 0: 0xFFFF
7304	 3F9	AND		 	 
- stack 1: 0x7C8
- stack 0: 0x0
7305	 3FA	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0x0
- stack 0: 0x1
7306	 3FC	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0x0
7307	 3FD	PUSH2	0080	 	 
- stack 2: 0x7C8
- stack 1: 0x0
- stack 0: 0x80
7308	 400	MSTORE		 	  ;; # store to x4
- stack 0: 0x7C8
7309	 401	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
7310	 403	ADD		 	 
- stack 0: 0x7CC
7311	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
7312	 405	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x41D000001DE01040535000005D10112042C0006047E000601550112018900A0
7313	 406	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x41D000001DE01040535000005D10112042C0006047E000601550112018900A0
- stack 0: 0xF0
7314	 408	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x41D
7315	 409	JUMP		 	 
- stack 0: 0x7CC
7316	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x7CC
7317	 41E	DUP1		 	 
- stack 1: 0x7CC
- stack 0: 0x7CC
7318	 41F	PUSH2	0040	 	 
- stack 2: 0x7CC
- stack 1: 0x7CC
- stack 0: 0x40
7319	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x7CC
7320	 423	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
7321	 425	ADD		 	 
- stack 0: 0x7D0
7322	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
7323	 427	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x1DE01040535000005D10112042C0006047E000601550112018900A003890001
7324	 428	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x1DE01040535000005D10112042C0006047E000601550112018900A003890001
- stack 0: 0xF0
7325	 42A	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x1DE
7326	 42B	JUMP		 	 
- stack 0: 0x7D0
7327	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x7D0
7328	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
7329	 1E0	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x1DE01040535000005D10112042C0006047E000601550112018900A003890001
7330	 1E1	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x1DE01040535000005D10112042C0006047E000601550112018900A003890001
- stack 0: 0xE0
7331	 1E3	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x1DE0104
7332	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x1DE0104
- stack 0: 0xFFFF
7333	 1E7	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x104
7334	 1E8	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x104
- stack 0: 0x1
7335	 1EA	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x104
7336	 1EB	PUSH2	0040	 	 
- stack 2: 0x7D0
- stack 1: 0x104
- stack 0: 0x40
7337	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x7D0
- stack 1: 0x104
- stack 0: 0x7CC
7338	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x7D0
- stack 0: 0x8D0
7339	 1F0	PUSH2	0040	 	 
- stack 2: 0x7D0
- stack 1: 0x8D0
- stack 0: 0x40
7340	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x7D0
7341	 1F4	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
7342	 1F6	ADD		 	 
- stack 0: 0x7D4
7343	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
7344	 1F8	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x535000005D10112042C0006047E000601550112018900A00389000104C60002
7345	 1F9	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x535000005D10112042C0006047E000601550112018900A00389000104C60002
- stack 0: 0xF0
7346	 1FB	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x535
7347	 1FC	JUMP		 	 
- stack 0: 0x7D4
7348	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7D4
7349	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
7350	 537	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x535000005D10112042C0006047E000601550112018900A00389000104C60002
7351	 538	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0x535000005D10112042C0006047E000601550112018900A00389000104C60002
- stack 0: 0xE0
7352	 53A	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x5350000
7353	 53B	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x5350000
- stack 0: 0xFFFF
7354	 53E	AND		 	 
- stack 1: 0x7D4
- stack 0: 0x0
7355	 53F	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0x0
- stack 0: 0x1
7356	 541	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0x0
7357	 542	POP		 	 
- stack 0: 0x7D4
7358	 543	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
7359	 545	ADD		 	 
- stack 0: 0x7D8
7360	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
7361	 547	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x5D10112042C0006047E000601550112018900A00389000104C6000204E0FFD8
7362	 548	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x5D10112042C0006047E000601550112018900A00389000104C6000204E0FFD8
- stack 0: 0xF0
7363	 54A	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x5D1
7364	 54B	JUMP		 	 
- stack 0: 0x7D8
7365	 5D1	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,274(ignore imm)
- stack 0: 0x7D8
7366	 5D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D8
- stack 0: 0x7D8
7367	 5D3	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x5D10112042C0006047E000601550112018900A00389000104C6000204E0FFD8
7368	 5D4	PUSH1	E0	 	 
- stack 2: 0x7D8
- stack 1: 0x5D10112042C0006047E000601550112018900A00389000104C6000204E0FFD8
- stack 0: 0xE0
7369	 5D6	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x5D10112
7370	 5D7	PUSH2	FFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x5D10112
- stack 0: 0xFFFF
7371	 5DA	AND		 	 
- stack 1: 0x7D8
- stack 0: 0x112
7372	 5DB	PUSH1	01	 	 
- stack 2: 0x7D8
- stack 1: 0x112
- stack 0: 0x1
7373	 5DD	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0x112
7374	 5DE	PUSH2	0020	 	 
- stack 2: 0x7D8
- stack 1: 0x112
- stack 0: 0x20
7375	 5E1	MSTORE		 	  ;; # store to x1
- stack 0: 0x7D8
7376	 5E2	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
7377	 5E4	ADD		 	 
- stack 0: 0x7DC
7378	 5E5	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
7379	 5E6	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x42C0006047E000601550112018900A00389000104C6000204E0FFD8016F0016
7380	 5E7	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0x42C0006047E000601550112018900A00389000104C6000204E0FFD8016F0016
- stack 0: 0xF0
7381	 5E9	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x42C
7382	 5EA	JUMP		 	 
- stack 0: 0x7DC
7383	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x7DC
7384	 42D	PUSH2	0040	 	 
- stack 1: 0x7DC
- stack 0: 0x40
7385	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x7DC
- stack 0: 0x8D0
7386	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7DC
- stack 1: 0x8D0
- stack 0: 0x7DC
7387	 432	MLOAD		 	 
- stack 2: 0x7DC
- stack 1: 0x8D0
- stack 0: 0x42C0006047E000601550112018900A00389000104C6000204E0FFD8016F0016
7388	 433	PUSH1	E0	 	 
- stack 3: 0x7DC
- stack 2: 0x8D0
- stack 1: 0x42C0006047E000601550112018900A00389000104C6000204E0FFD8016F0016
- stack 0: 0xE0
7389	 435	SHR		 	 
- stack 2: 0x7DC
- stack 1: 0x8D0
- stack 0: 0x42C0006
7390	 436	PUSH2	FFFF	 	 
- stack 3: 0x7DC
- stack 2: 0x8D0
- stack 1: 0x42C0006
- stack 0: 0xFFFF
7391	 439	AND		 	 
- stack 2: 0x7DC
- stack 1: 0x8D0
- stack 0: 0x6
7392	 43A	PUSH1	01	 	 
- stack 3: 0x7DC
- stack 2: 0x8D0
- stack 1: 0x6
- stack 0: 0x1
7393	 43C	SIGNEXTEND		 	 
- stack 2: 0x7DC
- stack 1: 0x8D0
- stack 0: 0x6
7394	 43D	ADD		 	 
- stack 1: 0x7DC
- stack 0: 0x8D6
7395	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7DC
- stack 1: 0x8D6
- stack 0: 0xFFFFFFFF
7396	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7DC
- stack 0: 0x8D6
7397	 444	PUSH1	02	 	 
- stack 2: 0x7DC
- stack 1: 0x8D6
- stack 0: 0x2
7398	 446	XOR		 	 
- stack 1: 0x7DC
- stack 0: 0x8D4
7399	 447	DUP1		 	 
- stack 2: 0x7DC
- stack 1: 0x8D4
- stack 0: 0x8D4
7400	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x7DC
- stack 1: 0x8D4
- stack 0: 0xABBC1122DAABAABBA00A0AA03098567800000000000000000000000000000000
7401	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x7DC
- stack 2: 0x8D4
- stack 1: 0xABBC1122DAABAABBA00A0AA03098567800000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7402	 46A	AND		 	 
- stack 2: 0x7DC
- stack 1: 0x8D4
- stack 0: 0x1122DAABAABBA00A0AA03098567800000000000000000000000000000000
7403	 46B	PUSH2	0020	 	 
- stack 3: 0x7DC
- stack 2: 0x8D4
- stack 1: 0x1122DAABAABBA00A0AA03098567800000000000000000000000000000000
- stack 0: 0x20
7404	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x7DC
- stack 2: 0x8D4
- stack 1: 0x1122DAABAABBA00A0AA03098567800000000000000000000000000000000
- stack 0: 0x112
7405	 46F	PUSH1	F0	 	 
- stack 4: 0x7DC
- stack 3: 0x8D4
- stack 2: 0x1122DAABAABBA00A0AA03098567800000000000000000000000000000000
- stack 1: 0x112
- stack 0: 0xF0
7406	 471	SHL		 	 
- stack 3: 0x7DC
- stack 2: 0x8D4
- stack 1: 0x1122DAABAABBA00A0AA03098567800000000000000000000000000000000
- stack 0: 0x112000000000000000000000000000000000000000000000000000000000000
7407	 472	ADD		 	 
- stack 2: 0x7DC
- stack 1: 0x8D4
- stack 0: 0x1121122DAABAABBA00A0AA03098567800000000000000000000000000000000
7408	 473	SWAP1		 	 
- stack 2: 0x7DC
- stack 1: 0x1121122DAABAABBA00A0AA03098567800000000000000000000000000000000
- stack 0: 0x8D4
7409	 474	MSTORE		 	 
- stack 0: 0x7DC
7410	 475	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
7411	 477	ADD		 	 
- stack 0: 0x7E0
7412	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
7413	 479	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x47E000601550112018900A00389000104C6000204E0FFD8016F001603F00000
7414	 47A	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x47E000601550112018900A00389000104C6000204E0FFD8016F001603F00000
- stack 0: 0xF0
7415	 47C	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x47E
7416	 47D	JUMP		 	 
- stack 0: 0x7E0
7417	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x7E0
7418	 47F	PUSH2	0040	 	 
- stack 1: 0x7E0
- stack 0: 0x40
7419	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x7E0
- stack 0: 0x8D0
7420	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E0
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
7421	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E0
- stack 0: 0x8D0
7422	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7E0
- stack 1: 0x8D0
- stack 0: 0x7E0
7423	 48A	MLOAD		 	 
- stack 2: 0x7E0
- stack 1: 0x8D0
- stack 0: 0x47E000601550112018900A00389000104C6000204E0FFD8016F001603F00000
7424	 48B	PUSH1	E0	 	 
- stack 3: 0x7E0
- stack 2: 0x8D0
- stack 1: 0x47E000601550112018900A00389000104C6000204E0FFD8016F001603F00000
- stack 0: 0xE0
7425	 48D	SHR		 	 
- stack 2: 0x7E0
- stack 1: 0x8D0
- stack 0: 0x47E0006
7426	 48E	PUSH2	FFFF	 	 
- stack 3: 0x7E0
- stack 2: 0x8D0
- stack 1: 0x47E0006
- stack 0: 0xFFFF
7427	 491	AND		 	 
- stack 2: 0x7E0
- stack 1: 0x8D0
- stack 0: 0x6
7428	 492	PUSH1	01	 	 
- stack 3: 0x7E0
- stack 2: 0x8D0
- stack 1: 0x6
- stack 0: 0x1
7429	 494	SIGNEXTEND		 	 
- stack 2: 0x7E0
- stack 1: 0x8D0
- stack 0: 0x6
7430	 495	ADD		 	 
- stack 1: 0x7E0
- stack 0: 0x8D6
7431	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E0
- stack 1: 0x8D6
- stack 0: 0xFFFFFFFF
7432	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E0
- stack 0: 0x8D6
7433	 49C	PUSH1	02	 	 
- stack 2: 0x7E0
- stack 1: 0x8D6
- stack 0: 0x2
7434	 49E	XOR		 	 
- stack 1: 0x7E0
- stack 0: 0x8D4
7435	 49F	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x1121122DAABAABBA00A0AA03098567800000000000000000000000000000000
7436	 4A0	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x1121122DAABAABBA00A0AA03098567800000000000000000000000000000000
- stack 0: 0xF0
7437	 4A2	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x112
7438	 4A3	PUSH1	01	 	 
- stack 2: 0x7E0
- stack 1: 0x112
- stack 0: 0x1
7439	 4A5	SIGNEXTEND		 	 
- stack 1: 0x7E0
- stack 0: 0x112
7440	 4A6	PUSH2	0060	 	 
- stack 2: 0x7E0
- stack 1: 0x112
- stack 0: 0x60
7441	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x7E0
7442	 4AA	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
7443	 4AC	ADD		 	 
- stack 0: 0x7E4
7444	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
7445	 4AE	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x1550112018900A00389000104C6000204E0FFD8016F001603F00000041D0000
7446	 4AF	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0x1550112018900A00389000104C6000204E0FFD8016F001603F00000041D0000
- stack 0: 0xF0
7447	 4B1	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x155
7448	 4B2	JUMP		 	 
- stack 0: 0x7E4
7449	 155	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,170(ignore imm)
- stack 0: 0x7E4
7450	 156	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
7451	 157	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x1550112018900A00389000104C6000204E0FFD8016F001603F00000041D0000
7452	 158	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0x1550112018900A00389000104C6000204E0FFD8016F001603F00000041D0000
- stack 0: 0xE0
7453	 15A	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x1550112
7454	 15B	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0x1550112
- stack 0: 0xFFFF
7455	 15E	AND		 	 
- stack 1: 0x7E4
- stack 0: 0x112
7456	 15F	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0x112
- stack 0: 0x1
7457	 161	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0x112
7458	 162	PUSH2	03A0	 	 
- stack 2: 0x7E4
- stack 1: 0x112
- stack 0: 0x3A0
7459	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x7E4
7460	 166	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
7461	 168	ADD		 	 
- stack 0: 0x7E8
7462	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
7463	 16A	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x18900A00389000104C6000204E0FFD8016F001603F00000041D000001DE00D0
7464	 16B	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x18900A00389000104C6000204E0FFD8016F001603F00000041D000001DE00D0
- stack 0: 0xF0
7465	 16D	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x189
7466	 16E	JUMP		 	 
- stack 0: 0x7E8
7467	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x7E8
7468	 18A	PUSH2	0060	 	 
- stack 1: 0x7E8
- stack 0: 0x60
7469	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x7E8
- stack 0: 0x112
7470	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E8
- stack 1: 0x112
- stack 0: 0xFFFFFFFF
7471	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E8
- stack 0: 0x112
7472	 194	PUSH2	03A0	 	 
- stack 2: 0x7E8
- stack 1: 0x112
- stack 0: 0x3A0
7473	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x7E8
- stack 1: 0x112
- stack 0: 0x112
7474	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7E8
- stack 2: 0x112
- stack 1: 0x112
- stack 0: 0xFFFFFFFF
7475	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7E8
- stack 1: 0x112
- stack 0: 0x112
7476	 19E	SUB		 	 
- stack 1: 0x7E8
- stack 0: 0x0
7477	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x7E8
- stack 1: 0x0
- stack 0: 0x1A7
7478	 1A2	JUMPI		 	 
- stack 0: 0x7E8
7479	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x7E8
- stack 0: 0x1C1
7480	 1A6	JUMP		 	 
- stack 0: 0x7E8
7481	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x7E8
7482	 1C2	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
7483	 1C4	ADD		 	 
- stack 0: 0x7EC
7484	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
7485	 1C6	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x389000104C6000204E0FFD8016F001603F00000041D000001DE00D005350000
7486	 1C7	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x389000104C6000204E0FFD8016F001603F00000041D000001DE00D005350000
- stack 0: 0xF0
7487	 1C9	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x389
7488	 1CA	JUMP		 	 
- stack 0: 0x7EC
7489	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x7EC
7490	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7EC
- stack 0: 0x7EC
7491	 38B	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x389000104C6000204E0FFD8016F001603F00000041D000001DE00D005350000
7492	 38C	PUSH1	E0	 	 
- stack 2: 0x7EC
- stack 1: 0x389000104C6000204E0FFD8016F001603F00000041D000001DE00D005350000
- stack 0: 0xE0
7493	 38E	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x3890001
7494	 38F	PUSH2	FFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x3890001
- stack 0: 0xFFFF
7495	 392	AND		 	 
- stack 1: 0x7EC
- stack 0: 0x1
7496	 393	PUSH1	01	 	 
- stack 2: 0x7EC
- stack 1: 0x1
- stack 0: 0x1
7497	 395	SIGNEXTEND		 	 
- stack 1: 0x7EC
- stack 0: 0x1
7498	 396	PUSH2	0080	 	 
- stack 2: 0x7EC
- stack 1: 0x1
- stack 0: 0x80
7499	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x7EC
- stack 1: 0x1
- stack 0: 0x0
7500	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x7EC
- stack 0: 0x1
7501	 39B	PUSH2	0080	 	 
- stack 2: 0x7EC
- stack 1: 0x1
- stack 0: 0x80
7502	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x7EC
7503	 39F	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
7504	 3A1	ADD		 	 
- stack 0: 0x7F0
7505	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
7506	 3A3	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x4C6000204E0FFD8016F001603F00000041D000001DE00D00535000005D10011
7507	 3A4	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x4C6000204E0FFD8016F001603F00000041D000001DE00D00535000005D10011
- stack 0: 0xF0
7508	 3A6	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x4C6
7509	 3A7	JUMP		 	 
- stack 0: 0x7F0
7510	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7F0
7511	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F0
- stack 0: 0x7F0
7512	 4C8	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x4C6000204E0FFD8016F001603F00000041D000001DE00D00535000005D10011
7513	 4C9	PUSH1	E0	 	 
- stack 2: 0x7F0
- stack 1: 0x4C6000204E0FFD8016F001603F00000041D000001DE00D00535000005D10011
- stack 0: 0xE0
7514	 4CB	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x4C60002
7515	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x7F0
- stack 1: 0x4C60002
- stack 0: 0xFFFF
7516	 4CF	AND		 	 
- stack 1: 0x7F0
- stack 0: 0x2
7517	 4D0	PUSH1	01	 	 
- stack 2: 0x7F0
- stack 1: 0x2
- stack 0: 0x1
7518	 4D2	SIGNEXTEND		 	 
- stack 1: 0x7F0
- stack 0: 0x2
7519	 4D3	PUSH2	00A0	 	 
- stack 2: 0x7F0
- stack 1: 0x2
- stack 0: 0xA0
7520	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x7F0
7521	 4D7	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
7522	 4D9	ADD		 	 
- stack 0: 0x7F4
7523	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
7524	 4DB	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x4E0FFD8016F001603F00000041D000001DE00D00535000005D1001105350000
7525	 4DC	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0x4E0FFD8016F001603F00000041D000001DE00D00535000005D1001105350000
- stack 0: 0xF0
7526	 4DE	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x4E0
7527	 4DF	JUMP		 	 
- stack 0: 0x7F4
7528	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x7F4
7529	 4E1	PUSH2	0080	 	 
- stack 1: 0x7F4
- stack 0: 0x80
7530	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x7F4
- stack 0: 0x1
7531	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7F4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7532	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7F4
- stack 0: 0x1
7533	 4EB	PUSH2	00A0	 	 
- stack 2: 0x7F4
- stack 1: 0x1
- stack 0: 0xA0
7534	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x7F4
- stack 1: 0x1
- stack 0: 0x2
7535	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7F4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7536	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7F4
- stack 1: 0x1
- stack 0: 0x2
7537	 4F5	SUB		 	 
- stack 1: 0x7F4
- stack 0: 0x1
7538	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x7F4
- stack 1: 0x1
- stack 0: 0x4FE
7539	 4F9	JUMPI		 	 
- stack 0: 0x7F4
7540	 4FE	JUMPDEST		 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x7F4
7541	 4FF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F4
- stack 0: 0x7F4
7542	 500	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x4E0FFD8016F001603F00000041D000001DE00D00535000005D1001105350000
7543	 501	PUSH1	E0	 	 
- stack 2: 0x7F4
- stack 1: 0x4E0FFD8016F001603F00000041D000001DE00D00535000005D1001105350000
- stack 0: 0xE0
7544	 503	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x4E0FFD8
7545	 504	PUSH2	FFFF	 	 
- stack 2: 0x7F4
- stack 1: 0x4E0FFD8
- stack 0: 0xFFFF
7546	 507	AND		 	 
- stack 1: 0x7F4
- stack 0: 0xFFD8
7547	 508	PUSH1	01	 	 
- stack 2: 0x7F4
- stack 1: 0xFFD8
- stack 0: 0x1
7548	 50A	SIGNEXTEND		 	 
- stack 1: 0x7F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
7549	 50B	ADD		 	 
- stack 0: 0x7CC
7550	 50C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7CC
- stack 0: 0xFFFFFFFF
7551	 511	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7CC
7552	 512	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
7553	 513	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x41D000001DE01040535000005D10112042C0006047E000601550112018900A0
7554	 514	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x41D000001DE01040535000005D10112042C0006047E000601550112018900A0
- stack 0: 0xF0
7555	 516	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x41D
7556	 517	JUMP		 	 
- stack 0: 0x7CC
7557	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x7CC
7558	 41E	DUP1		 	 
- stack 1: 0x7CC
- stack 0: 0x7CC
7559	 41F	PUSH2	0040	 	 
- stack 2: 0x7CC
- stack 1: 0x7CC
- stack 0: 0x40
7560	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x7CC
7561	 423	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
7562	 425	ADD		 	 
- stack 0: 0x7D0
7563	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
7564	 427	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x1DE01040535000005D10112042C0006047E000601550112018900A003890001
7565	 428	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x1DE01040535000005D10112042C0006047E000601550112018900A003890001
- stack 0: 0xF0
7566	 42A	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x1DE
7567	 42B	JUMP		 	 
- stack 0: 0x7D0
7568	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x7D0
7569	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
7570	 1E0	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x1DE01040535000005D10112042C0006047E000601550112018900A003890001
7571	 1E1	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x1DE01040535000005D10112042C0006047E000601550112018900A003890001
- stack 0: 0xE0
7572	 1E3	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x1DE0104
7573	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x1DE0104
- stack 0: 0xFFFF
7574	 1E7	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x104
7575	 1E8	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x104
- stack 0: 0x1
7576	 1EA	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x104
7577	 1EB	PUSH2	0040	 	 
- stack 2: 0x7D0
- stack 1: 0x104
- stack 0: 0x40
7578	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x7D0
- stack 1: 0x104
- stack 0: 0x7CC
7579	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x7D0
- stack 0: 0x8D0
7580	 1F0	PUSH2	0040	 	 
- stack 2: 0x7D0
- stack 1: 0x8D0
- stack 0: 0x40
7581	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x7D0
7582	 1F4	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
7583	 1F6	ADD		 	 
- stack 0: 0x7D4
7584	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
7585	 1F8	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x535000005D10112042C0006047E000601550112018900A00389000104C60002
7586	 1F9	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x535000005D10112042C0006047E000601550112018900A00389000104C60002
- stack 0: 0xF0
7587	 1FB	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x535
7588	 1FC	JUMP		 	 
- stack 0: 0x7D4
7589	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7D4
7590	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
7591	 537	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x535000005D10112042C0006047E000601550112018900A00389000104C60002
7592	 538	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0x535000005D10112042C0006047E000601550112018900A00389000104C60002
- stack 0: 0xE0
7593	 53A	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x5350000
7594	 53B	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x5350000
- stack 0: 0xFFFF
7595	 53E	AND		 	 
- stack 1: 0x7D4
- stack 0: 0x0
7596	 53F	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0x0
- stack 0: 0x1
7597	 541	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0x0
7598	 542	POP		 	 
- stack 0: 0x7D4
7599	 543	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
7600	 545	ADD		 	 
- stack 0: 0x7D8
7601	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
7602	 547	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x5D10112042C0006047E000601550112018900A00389000104C6000204E0FFD8
7603	 548	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x5D10112042C0006047E000601550112018900A00389000104C6000204E0FFD8
- stack 0: 0xF0
7604	 54A	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x5D1
7605	 54B	JUMP		 	 
- stack 0: 0x7D8
7606	 5D1	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,274(ignore imm)
- stack 0: 0x7D8
7607	 5D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D8
- stack 0: 0x7D8
7608	 5D3	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x5D10112042C0006047E000601550112018900A00389000104C6000204E0FFD8
7609	 5D4	PUSH1	E0	 	 
- stack 2: 0x7D8
- stack 1: 0x5D10112042C0006047E000601550112018900A00389000104C6000204E0FFD8
- stack 0: 0xE0
7610	 5D6	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x5D10112
7611	 5D7	PUSH2	FFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x5D10112
- stack 0: 0xFFFF
7612	 5DA	AND		 	 
- stack 1: 0x7D8
- stack 0: 0x112
7613	 5DB	PUSH1	01	 	 
- stack 2: 0x7D8
- stack 1: 0x112
- stack 0: 0x1
7614	 5DD	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0x112
7615	 5DE	PUSH2	0020	 	 
- stack 2: 0x7D8
- stack 1: 0x112
- stack 0: 0x20
7616	 5E1	MSTORE		 	  ;; # store to x1
- stack 0: 0x7D8
7617	 5E2	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
7618	 5E4	ADD		 	 
- stack 0: 0x7DC
7619	 5E5	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
7620	 5E6	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x42C0006047E000601550112018900A00389000104C6000204E0FFD8016F0016
7621	 5E7	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0x42C0006047E000601550112018900A00389000104C6000204E0FFD8016F0016
- stack 0: 0xF0
7622	 5E9	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x42C
7623	 5EA	JUMP		 	 
- stack 0: 0x7DC
7624	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x7DC
7625	 42D	PUSH2	0040	 	 
- stack 1: 0x7DC
- stack 0: 0x40
7626	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x7DC
- stack 0: 0x8D0
7627	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7DC
- stack 1: 0x8D0
- stack 0: 0x7DC
7628	 432	MLOAD		 	 
- stack 2: 0x7DC
- stack 1: 0x8D0
- stack 0: 0x42C0006047E000601550112018900A00389000104C6000204E0FFD8016F0016
7629	 433	PUSH1	E0	 	 
- stack 3: 0x7DC
- stack 2: 0x8D0
- stack 1: 0x42C0006047E000601550112018900A00389000104C6000204E0FFD8016F0016
- stack 0: 0xE0
7630	 435	SHR		 	 
- stack 2: 0x7DC
- stack 1: 0x8D0
- stack 0: 0x42C0006
7631	 436	PUSH2	FFFF	 	 
- stack 3: 0x7DC
- stack 2: 0x8D0
- stack 1: 0x42C0006
- stack 0: 0xFFFF
7632	 439	AND		 	 
- stack 2: 0x7DC
- stack 1: 0x8D0
- stack 0: 0x6
7633	 43A	PUSH1	01	 	 
- stack 3: 0x7DC
- stack 2: 0x8D0
- stack 1: 0x6
- stack 0: 0x1
7634	 43C	SIGNEXTEND		 	 
- stack 2: 0x7DC
- stack 1: 0x8D0
- stack 0: 0x6
7635	 43D	ADD		 	 
- stack 1: 0x7DC
- stack 0: 0x8D6
7636	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7DC
- stack 1: 0x8D6
- stack 0: 0xFFFFFFFF
7637	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7DC
- stack 0: 0x8D6
7638	 444	PUSH1	02	 	 
- stack 2: 0x7DC
- stack 1: 0x8D6
- stack 0: 0x2
7639	 446	XOR		 	 
- stack 1: 0x7DC
- stack 0: 0x8D4
7640	 447	DUP1		 	 
- stack 2: 0x7DC
- stack 1: 0x8D4
- stack 0: 0x8D4
7641	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x7DC
- stack 1: 0x8D4
- stack 0: 0x1121122DAABAABBA00A0AA03098567800000000000000000000000000000000
7642	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x7DC
- stack 2: 0x8D4
- stack 1: 0x1121122DAABAABBA00A0AA03098567800000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7643	 46A	AND		 	 
- stack 2: 0x7DC
- stack 1: 0x8D4
- stack 0: 0x1122DAABAABBA00A0AA03098567800000000000000000000000000000000
7644	 46B	PUSH2	0020	 	 
- stack 3: 0x7DC
- stack 2: 0x8D4
- stack 1: 0x1122DAABAABBA00A0AA03098567800000000000000000000000000000000
- stack 0: 0x20
7645	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x7DC
- stack 2: 0x8D4
- stack 1: 0x1122DAABAABBA00A0AA03098567800000000000000000000000000000000
- stack 0: 0x112
7646	 46F	PUSH1	F0	 	 
- stack 4: 0x7DC
- stack 3: 0x8D4
- stack 2: 0x1122DAABAABBA00A0AA03098567800000000000000000000000000000000
- stack 1: 0x112
- stack 0: 0xF0
7647	 471	SHL		 	 
- stack 3: 0x7DC
- stack 2: 0x8D4
- stack 1: 0x1122DAABAABBA00A0AA03098567800000000000000000000000000000000
- stack 0: 0x112000000000000000000000000000000000000000000000000000000000000
7648	 472	ADD		 	 
- stack 2: 0x7DC
- stack 1: 0x8D4
- stack 0: 0x1121122DAABAABBA00A0AA03098567800000000000000000000000000000000
7649	 473	SWAP1		 	 
- stack 2: 0x7DC
- stack 1: 0x1121122DAABAABBA00A0AA03098567800000000000000000000000000000000
- stack 0: 0x8D4
7650	 474	MSTORE		 	 
- stack 0: 0x7DC
7651	 475	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
7652	 477	ADD		 	 
- stack 0: 0x7E0
7653	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
7654	 479	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x47E000601550112018900A00389000104C6000204E0FFD8016F001603F00000
7655	 47A	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x47E000601550112018900A00389000104C6000204E0FFD8016F001603F00000
- stack 0: 0xF0
7656	 47C	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x47E
7657	 47D	JUMP		 	 
- stack 0: 0x7E0
7658	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x7E0
7659	 47F	PUSH2	0040	 	 
- stack 1: 0x7E0
- stack 0: 0x40
7660	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x7E0
- stack 0: 0x8D0
7661	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E0
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
7662	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E0
- stack 0: 0x8D0
7663	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7E0
- stack 1: 0x8D0
- stack 0: 0x7E0
7664	 48A	MLOAD		 	 
- stack 2: 0x7E0
- stack 1: 0x8D0
- stack 0: 0x47E000601550112018900A00389000104C6000204E0FFD8016F001603F00000
7665	 48B	PUSH1	E0	 	 
- stack 3: 0x7E0
- stack 2: 0x8D0
- stack 1: 0x47E000601550112018900A00389000104C6000204E0FFD8016F001603F00000
- stack 0: 0xE0
7666	 48D	SHR		 	 
- stack 2: 0x7E0
- stack 1: 0x8D0
- stack 0: 0x47E0006
7667	 48E	PUSH2	FFFF	 	 
- stack 3: 0x7E0
- stack 2: 0x8D0
- stack 1: 0x47E0006
- stack 0: 0xFFFF
7668	 491	AND		 	 
- stack 2: 0x7E0
- stack 1: 0x8D0
- stack 0: 0x6
7669	 492	PUSH1	01	 	 
- stack 3: 0x7E0
- stack 2: 0x8D0
- stack 1: 0x6
- stack 0: 0x1
7670	 494	SIGNEXTEND		 	 
- stack 2: 0x7E0
- stack 1: 0x8D0
- stack 0: 0x6
7671	 495	ADD		 	 
- stack 1: 0x7E0
- stack 0: 0x8D6
7672	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E0
- stack 1: 0x8D6
- stack 0: 0xFFFFFFFF
7673	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E0
- stack 0: 0x8D6
7674	 49C	PUSH1	02	 	 
- stack 2: 0x7E0
- stack 1: 0x8D6
- stack 0: 0x2
7675	 49E	XOR		 	 
- stack 1: 0x7E0
- stack 0: 0x8D4
7676	 49F	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x1121122DAABAABBA00A0AA03098567800000000000000000000000000000000
7677	 4A0	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x1121122DAABAABBA00A0AA03098567800000000000000000000000000000000
- stack 0: 0xF0
7678	 4A2	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x112
7679	 4A3	PUSH1	01	 	 
- stack 2: 0x7E0
- stack 1: 0x112
- stack 0: 0x1
7680	 4A5	SIGNEXTEND		 	 
- stack 1: 0x7E0
- stack 0: 0x112
7681	 4A6	PUSH2	0060	 	 
- stack 2: 0x7E0
- stack 1: 0x112
- stack 0: 0x60
7682	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x7E0
7683	 4AA	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
7684	 4AC	ADD		 	 
- stack 0: 0x7E4
7685	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
7686	 4AE	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x1550112018900A00389000104C6000204E0FFD8016F001603F00000041D0000
7687	 4AF	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0x1550112018900A00389000104C6000204E0FFD8016F001603F00000041D0000
- stack 0: 0xF0
7688	 4B1	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x155
7689	 4B2	JUMP		 	 
- stack 0: 0x7E4
7690	 155	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,170(ignore imm)
- stack 0: 0x7E4
7691	 156	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
7692	 157	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x1550112018900A00389000104C6000204E0FFD8016F001603F00000041D0000
7693	 158	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0x1550112018900A00389000104C6000204E0FFD8016F001603F00000041D0000
- stack 0: 0xE0
7694	 15A	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x1550112
7695	 15B	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0x1550112
- stack 0: 0xFFFF
7696	 15E	AND		 	 
- stack 1: 0x7E4
- stack 0: 0x112
7697	 15F	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0x112
- stack 0: 0x1
7698	 161	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0x112
7699	 162	PUSH2	03A0	 	 
- stack 2: 0x7E4
- stack 1: 0x112
- stack 0: 0x3A0
7700	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x7E4
7701	 166	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
7702	 168	ADD		 	 
- stack 0: 0x7E8
7703	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
7704	 16A	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x18900A00389000104C6000204E0FFD8016F001603F00000041D000001DE00D0
7705	 16B	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x18900A00389000104C6000204E0FFD8016F001603F00000041D000001DE00D0
- stack 0: 0xF0
7706	 16D	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x189
7707	 16E	JUMP		 	 
- stack 0: 0x7E8
7708	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x7E8
7709	 18A	PUSH2	0060	 	 
- stack 1: 0x7E8
- stack 0: 0x60
7710	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x7E8
- stack 0: 0x112
7711	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E8
- stack 1: 0x112
- stack 0: 0xFFFFFFFF
7712	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E8
- stack 0: 0x112
7713	 194	PUSH2	03A0	 	 
- stack 2: 0x7E8
- stack 1: 0x112
- stack 0: 0x3A0
7714	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x7E8
- stack 1: 0x112
- stack 0: 0x112
7715	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7E8
- stack 2: 0x112
- stack 1: 0x112
- stack 0: 0xFFFFFFFF
7716	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7E8
- stack 1: 0x112
- stack 0: 0x112
7717	 19E	SUB		 	 
- stack 1: 0x7E8
- stack 0: 0x0
7718	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x7E8
- stack 1: 0x0
- stack 0: 0x1A7
7719	 1A2	JUMPI		 	 
- stack 0: 0x7E8
7720	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x7E8
- stack 0: 0x1C1
7721	 1A6	JUMP		 	 
- stack 0: 0x7E8
7722	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x7E8
7723	 1C2	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
7724	 1C4	ADD		 	 
- stack 0: 0x7EC
7725	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
7726	 1C6	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x389000104C6000204E0FFD8016F001603F00000041D000001DE00D005350000
7727	 1C7	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x389000104C6000204E0FFD8016F001603F00000041D000001DE00D005350000
- stack 0: 0xF0
7728	 1C9	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x389
7729	 1CA	JUMP		 	 
- stack 0: 0x7EC
7730	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x7EC
7731	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7EC
- stack 0: 0x7EC
7732	 38B	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x389000104C6000204E0FFD8016F001603F00000041D000001DE00D005350000
7733	 38C	PUSH1	E0	 	 
- stack 2: 0x7EC
- stack 1: 0x389000104C6000204E0FFD8016F001603F00000041D000001DE00D005350000
- stack 0: 0xE0
7734	 38E	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x3890001
7735	 38F	PUSH2	FFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x3890001
- stack 0: 0xFFFF
7736	 392	AND		 	 
- stack 1: 0x7EC
- stack 0: 0x1
7737	 393	PUSH1	01	 	 
- stack 2: 0x7EC
- stack 1: 0x1
- stack 0: 0x1
7738	 395	SIGNEXTEND		 	 
- stack 1: 0x7EC
- stack 0: 0x1
7739	 396	PUSH2	0080	 	 
- stack 2: 0x7EC
- stack 1: 0x1
- stack 0: 0x80
7740	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x7EC
- stack 1: 0x1
- stack 0: 0x1
7741	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x7EC
- stack 0: 0x2
7742	 39B	PUSH2	0080	 	 
- stack 2: 0x7EC
- stack 1: 0x2
- stack 0: 0x80
7743	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x7EC
7744	 39F	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
7745	 3A1	ADD		 	 
- stack 0: 0x7F0
7746	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
7747	 3A3	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x4C6000204E0FFD8016F001603F00000041D000001DE00D00535000005D10011
7748	 3A4	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x4C6000204E0FFD8016F001603F00000041D000001DE00D00535000005D10011
- stack 0: 0xF0
7749	 3A6	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x4C6
7750	 3A7	JUMP		 	 
- stack 0: 0x7F0
7751	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7F0
7752	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F0
- stack 0: 0x7F0
7753	 4C8	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x4C6000204E0FFD8016F001603F00000041D000001DE00D00535000005D10011
7754	 4C9	PUSH1	E0	 	 
- stack 2: 0x7F0
- stack 1: 0x4C6000204E0FFD8016F001603F00000041D000001DE00D00535000005D10011
- stack 0: 0xE0
7755	 4CB	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x4C60002
7756	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x7F0
- stack 1: 0x4C60002
- stack 0: 0xFFFF
7757	 4CF	AND		 	 
- stack 1: 0x7F0
- stack 0: 0x2
7758	 4D0	PUSH1	01	 	 
- stack 2: 0x7F0
- stack 1: 0x2
- stack 0: 0x1
7759	 4D2	SIGNEXTEND		 	 
- stack 1: 0x7F0
- stack 0: 0x2
7760	 4D3	PUSH2	00A0	 	 
- stack 2: 0x7F0
- stack 1: 0x2
- stack 0: 0xA0
7761	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x7F0
7762	 4D7	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
7763	 4D9	ADD		 	 
- stack 0: 0x7F4
7764	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
7765	 4DB	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x4E0FFD8016F001603F00000041D000001DE00D00535000005D1001105350000
7766	 4DC	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0x4E0FFD8016F001603F00000041D000001DE00D00535000005D1001105350000
- stack 0: 0xF0
7767	 4DE	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x4E0
7768	 4DF	JUMP		 	 
- stack 0: 0x7F4
7769	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x7F4
7770	 4E1	PUSH2	0080	 	 
- stack 1: 0x7F4
- stack 0: 0x80
7771	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x7F4
- stack 0: 0x2
7772	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7F4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7773	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7F4
- stack 0: 0x2
7774	 4EB	PUSH2	00A0	 	 
- stack 2: 0x7F4
- stack 1: 0x2
- stack 0: 0xA0
7775	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x7F4
- stack 1: 0x2
- stack 0: 0x2
7776	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7F4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7777	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7F4
- stack 1: 0x2
- stack 0: 0x2
7778	 4F5	SUB		 	 
- stack 1: 0x7F4
- stack 0: 0x0
7779	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x7F4
- stack 1: 0x0
- stack 0: 0x4FE
7780	 4F9	JUMPI		 	 
- stack 0: 0x7F4
7781	 4FA	PUSH2	0518	 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 1: 0x7F4
- stack 0: 0x518
7782	 4FD	JUMP		 	 
- stack 0: 0x7F4
7783	 518	JUMPDEST		 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x7F4
7784	 519	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
7785	 51B	ADD		 	 
- stack 0: 0x7F8
7786	 51C	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
7787	 51D	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x16F001603F00000041D000001DE00D00535000005D1001105350000042C0008
7788	 51E	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0x16F001603F00000041D000001DE00D00535000005D1001105350000042C0008
- stack 0: 0xF0
7789	 520	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x16F
7790	 521	JUMP		 	 
- stack 0: 0x7F8
7791	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7F8
7792	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F8
- stack 0: 0x7F8
7793	 171	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x16F001603F00000041D000001DE00D00535000005D1001105350000042C0008
7794	 172	PUSH1	E0	 	 
- stack 2: 0x7F8
- stack 1: 0x16F001603F00000041D000001DE00D00535000005D1001105350000042C0008
- stack 0: 0xE0
7795	 174	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x16F0016
7796	 175	PUSH2	FFFF	 	 
- stack 2: 0x7F8
- stack 1: 0x16F0016
- stack 0: 0xFFFF
7797	 178	AND		 	 
- stack 1: 0x7F8
- stack 0: 0x16
7798	 179	PUSH1	01	 	 
- stack 2: 0x7F8
- stack 1: 0x16
- stack 0: 0x1
7799	 17B	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0x16
7800	 17C	PUSH2	0380	 	 
- stack 2: 0x7F8
- stack 1: 0x16
- stack 0: 0x380
7801	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x7F8
7802	 180	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
7803	 182	ADD		 	 
- stack 0: 0x7FC
7804	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
7805	 184	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x3F00000041D000001DE00D00535000005D1001105350000042C0008047E0008
7806	 185	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x3F00000041D000001DE00D00535000005D1001105350000042C0008047E0008
- stack 0: 0xF0
7807	 187	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x3F0
7808	 188	JUMP		 	 
- stack 0: 0x7FC
7809	 3F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7FC
7810	 3F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
7811	 3F2	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x3F00000041D000001DE00D00535000005D1001105350000042C0008047E0008
7812	 3F3	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0x3F00000041D000001DE00D00535000005D1001105350000042C0008047E0008
- stack 0: 0xE0
7813	 3F5	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x3F00000
7814	 3F6	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0x3F00000
- stack 0: 0xFFFF
7815	 3F9	AND		 	 
- stack 1: 0x7FC
- stack 0: 0x0
7816	 3FA	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0x0
- stack 0: 0x1
7817	 3FC	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0x0
7818	 3FD	PUSH2	0080	 	 
- stack 2: 0x7FC
- stack 1: 0x0
- stack 0: 0x80
7819	 400	MSTORE		 	  ;; # store to x4
- stack 0: 0x7FC
7820	 401	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
7821	 403	ADD		 	 
- stack 0: 0x800
7822	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
7823	 405	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x41D000001DE00D00535000005D1001105350000042C0008047E000801550011
7824	 406	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x41D000001DE00D00535000005D1001105350000042C0008047E000801550011
- stack 0: 0xF0
7825	 408	SHR		 	 
- stack 1: 0x800
- stack 0: 0x41D
7826	 409	JUMP		 	 
- stack 0: 0x800
7827	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x800
7828	 41E	DUP1		 	 
- stack 1: 0x800
- stack 0: 0x800
7829	 41F	PUSH2	0040	 	 
- stack 2: 0x800
- stack 1: 0x800
- stack 0: 0x40
7830	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x800
7831	 423	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
7832	 425	ADD		 	 
- stack 0: 0x804
7833	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
7834	 427	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x1DE00D00535000005D1001105350000042C0008047E00080155001101890068
7835	 428	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x1DE00D00535000005D1001105350000042C0008047E00080155001101890068
- stack 0: 0xF0
7836	 42A	SHR		 	 
- stack 1: 0x804
- stack 0: 0x1DE
7837	 42B	JUMP		 	 
- stack 0: 0x804
7838	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x804
7839	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
7840	 1E0	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x1DE00D00535000005D1001105350000042C0008047E00080155001101890068
7841	 1E1	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x1DE00D00535000005D1001105350000042C0008047E00080155001101890068
- stack 0: 0xE0
7842	 1E3	SHR		 	 
- stack 1: 0x804
- stack 0: 0x1DE00D0
7843	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x1DE00D0
- stack 0: 0xFFFF
7844	 1E7	AND		 	 
- stack 1: 0x804
- stack 0: 0xD0
7845	 1E8	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0xD0
- stack 0: 0x1
7846	 1EA	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0xD0
7847	 1EB	PUSH2	0040	 	 
- stack 2: 0x804
- stack 1: 0xD0
- stack 0: 0x40
7848	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x804
- stack 1: 0xD0
- stack 0: 0x800
7849	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x804
- stack 0: 0x8D0
7850	 1F0	PUSH2	0040	 	 
- stack 2: 0x804
- stack 1: 0x8D0
- stack 0: 0x40
7851	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x804
7852	 1F4	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
7853	 1F6	ADD		 	 
- stack 0: 0x808
7854	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
7855	 1F8	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x535000005D1001105350000042C0008047E0008015500110189006803890001
7856	 1F9	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0x535000005D1001105350000042C0008047E0008015500110189006803890001
- stack 0: 0xF0
7857	 1FB	SHR		 	 
- stack 1: 0x808
- stack 0: 0x535
7858	 1FC	JUMP		 	 
- stack 0: 0x808
7859	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x808
7860	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x808
- stack 0: 0x808
7861	 537	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x535000005D1001105350000042C0008047E0008015500110189006803890001
7862	 538	PUSH1	E0	 	 
- stack 2: 0x808
- stack 1: 0x535000005D1001105350000042C0008047E0008015500110189006803890001
- stack 0: 0xE0
7863	 53A	SHR		 	 
- stack 1: 0x808
- stack 0: 0x5350000
7864	 53B	PUSH2	FFFF	 	 
- stack 2: 0x808
- stack 1: 0x5350000
- stack 0: 0xFFFF
7865	 53E	AND		 	 
- stack 1: 0x808
- stack 0: 0x0
7866	 53F	PUSH1	01	 	 
- stack 2: 0x808
- stack 1: 0x0
- stack 0: 0x1
7867	 541	SIGNEXTEND		 	 
- stack 1: 0x808
- stack 0: 0x0
7868	 542	POP		 	 
- stack 0: 0x808
7869	 543	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
7870	 545	ADD		 	 
- stack 0: 0x80C
7871	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
7872	 547	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x5D1001105350000042C0008047E000801550011018900680389000104C60002
7873	 548	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0x5D1001105350000042C0008047E000801550011018900680389000104C60002
- stack 0: 0xF0
7874	 54A	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x5D1
7875	 54B	JUMP		 	 
- stack 0: 0x80C
7876	 5D1	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,274(ignore imm)
- stack 0: 0x80C
7877	 5D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x80C
- stack 0: 0x80C
7878	 5D3	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x5D1001105350000042C0008047E000801550011018900680389000104C60002
7879	 5D4	PUSH1	E0	 	 
- stack 2: 0x80C
- stack 1: 0x5D1001105350000042C0008047E000801550011018900680389000104C60002
- stack 0: 0xE0
7880	 5D6	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x5D10011
7881	 5D7	PUSH2	FFFF	 	 
- stack 2: 0x80C
- stack 1: 0x5D10011
- stack 0: 0xFFFF
7882	 5DA	AND		 	 
- stack 1: 0x80C
- stack 0: 0x11
7883	 5DB	PUSH1	01	 	 
- stack 2: 0x80C
- stack 1: 0x11
- stack 0: 0x1
7884	 5DD	SIGNEXTEND		 	 
- stack 1: 0x80C
- stack 0: 0x11
7885	 5DE	PUSH2	0020	 	 
- stack 2: 0x80C
- stack 1: 0x11
- stack 0: 0x20
7886	 5E1	MSTORE		 	  ;; # store to x1
- stack 0: 0x80C
7887	 5E2	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
7888	 5E4	ADD		 	 
- stack 0: 0x810
7889	 5E5	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
7890	 5E6	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x5350000042C0008047E000801550011018900680389000104C6000204E0FFD4
7891	 5E7	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0x5350000042C0008047E000801550011018900680389000104C6000204E0FFD4
- stack 0: 0xF0
7892	 5E9	SHR		 	 
- stack 1: 0x810
- stack 0: 0x535
7893	 5EA	JUMP		 	 
- stack 0: 0x810
7894	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x810
7895	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x810
- stack 0: 0x810
7896	 537	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x5350000042C0008047E000801550011018900680389000104C6000204E0FFD4
7897	 538	PUSH1	E0	 	 
- stack 2: 0x810
- stack 1: 0x5350000042C0008047E000801550011018900680389000104C6000204E0FFD4
- stack 0: 0xE0
7898	 53A	SHR		 	 
- stack 1: 0x810
- stack 0: 0x5350000
7899	 53B	PUSH2	FFFF	 	 
- stack 2: 0x810
- stack 1: 0x5350000
- stack 0: 0xFFFF
7900	 53E	AND		 	 
- stack 1: 0x810
- stack 0: 0x0
7901	 53F	PUSH1	01	 	 
- stack 2: 0x810
- stack 1: 0x0
- stack 0: 0x1
7902	 541	SIGNEXTEND		 	 
- stack 1: 0x810
- stack 0: 0x0
7903	 542	POP		 	 
- stack 0: 0x810
7904	 543	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
7905	 545	ADD		 	 
- stack 0: 0x814
7906	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
7907	 547	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x42C0008047E000801550011018900680389000104C6000204E0FFD4016F0017
7908	 548	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0x42C0008047E000801550011018900680389000104C6000204E0FFD4016F0017
- stack 0: 0xF0
7909	 54A	SHR		 	 
- stack 1: 0x814
- stack 0: 0x42C
7910	 54B	JUMP		 	 
- stack 0: 0x814
7911	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x814
7912	 42D	PUSH2	0040	 	 
- stack 1: 0x814
- stack 0: 0x40
7913	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x814
- stack 0: 0x8D0
7914	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x814
- stack 1: 0x8D0
- stack 0: 0x814
7915	 432	MLOAD		 	 
- stack 2: 0x814
- stack 1: 0x8D0
- stack 0: 0x42C0008047E000801550011018900680389000104C6000204E0FFD4016F0017
7916	 433	PUSH1	E0	 	 
- stack 3: 0x814
- stack 2: 0x8D0
- stack 1: 0x42C0008047E000801550011018900680389000104C6000204E0FFD4016F0017
- stack 0: 0xE0
7917	 435	SHR		 	 
- stack 2: 0x814
- stack 1: 0x8D0
- stack 0: 0x42C0008
7918	 436	PUSH2	FFFF	 	 
- stack 3: 0x814
- stack 2: 0x8D0
- stack 1: 0x42C0008
- stack 0: 0xFFFF
7919	 439	AND		 	 
- stack 2: 0x814
- stack 1: 0x8D0
- stack 0: 0x8
7920	 43A	PUSH1	01	 	 
- stack 3: 0x814
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
7921	 43C	SIGNEXTEND		 	 
- stack 2: 0x814
- stack 1: 0x8D0
- stack 0: 0x8
7922	 43D	ADD		 	 
- stack 1: 0x814
- stack 0: 0x8D8
7923	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x814
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
7924	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x814
- stack 0: 0x8D8
7925	 444	PUSH1	02	 	 
- stack 2: 0x814
- stack 1: 0x8D8
- stack 0: 0x2
7926	 446	XOR		 	 
- stack 1: 0x814
- stack 0: 0x8DA
7927	 447	DUP1		 	 
- stack 2: 0x814
- stack 1: 0x8DA
- stack 0: 0x8DA
7928	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x814
- stack 1: 0x8DA
- stack 0: 0xAABBA00A0AA03098567800000000000000000000000000000000000000000000
7929	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x814
- stack 2: 0x8DA
- stack 1: 0xAABBA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7930	 46A	AND		 	 
- stack 2: 0x814
- stack 1: 0x8DA
- stack 0: 0xA00A0AA03098567800000000000000000000000000000000000000000000
7931	 46B	PUSH2	0020	 	 
- stack 3: 0x814
- stack 2: 0x8DA
- stack 1: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0x20
7932	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x814
- stack 2: 0x8DA
- stack 1: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0x11
7933	 46F	PUSH1	F0	 	 
- stack 4: 0x814
- stack 3: 0x8DA
- stack 2: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 1: 0x11
- stack 0: 0xF0
7934	 471	SHL		 	 
- stack 3: 0x814
- stack 2: 0x8DA
- stack 1: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0x11000000000000000000000000000000000000000000000000000000000000
7935	 472	ADD		 	 
- stack 2: 0x814
- stack 1: 0x8DA
- stack 0: 0x11A00A0AA03098567800000000000000000000000000000000000000000000
7936	 473	SWAP1		 	 
- stack 2: 0x814
- stack 1: 0x11A00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0x8DA
7937	 474	MSTORE		 	 
- stack 0: 0x814
7938	 475	PUSH1	04	 	 
- stack 1: 0x814
- stack 0: 0x4
7939	 477	ADD		 	 
- stack 0: 0x818
7940	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
7941	 479	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x47E000801550011018900680389000104C6000204E0FFD4016F001703F00000
7942	 47A	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x47E000801550011018900680389000104C6000204E0FFD4016F001703F00000
- stack 0: 0xF0
7943	 47C	SHR		 	 
- stack 1: 0x818
- stack 0: 0x47E
7944	 47D	JUMP		 	 
- stack 0: 0x818
7945	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x818
7946	 47F	PUSH2	0040	 	 
- stack 1: 0x818
- stack 0: 0x40
7947	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x818
- stack 0: 0x8D0
7948	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x818
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
7949	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x818
- stack 0: 0x8D0
7950	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x818
- stack 1: 0x8D0
- stack 0: 0x818
7951	 48A	MLOAD		 	 
- stack 2: 0x818
- stack 1: 0x8D0
- stack 0: 0x47E000801550011018900680389000104C6000204E0FFD4016F001703F00000
7952	 48B	PUSH1	E0	 	 
- stack 3: 0x818
- stack 2: 0x8D0
- stack 1: 0x47E000801550011018900680389000104C6000204E0FFD4016F001703F00000
- stack 0: 0xE0
7953	 48D	SHR		 	 
- stack 2: 0x818
- stack 1: 0x8D0
- stack 0: 0x47E0008
7954	 48E	PUSH2	FFFF	 	 
- stack 3: 0x818
- stack 2: 0x8D0
- stack 1: 0x47E0008
- stack 0: 0xFFFF
7955	 491	AND		 	 
- stack 2: 0x818
- stack 1: 0x8D0
- stack 0: 0x8
7956	 492	PUSH1	01	 	 
- stack 3: 0x818
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
7957	 494	SIGNEXTEND		 	 
- stack 2: 0x818
- stack 1: 0x8D0
- stack 0: 0x8
7958	 495	ADD		 	 
- stack 1: 0x818
- stack 0: 0x8D8
7959	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x818
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
7960	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x818
- stack 0: 0x8D8
7961	 49C	PUSH1	02	 	 
- stack 2: 0x818
- stack 1: 0x8D8
- stack 0: 0x2
7962	 49E	XOR		 	 
- stack 1: 0x818
- stack 0: 0x8DA
7963	 49F	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x11A00A0AA03098567800000000000000000000000000000000000000000000
7964	 4A0	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x11A00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0xF0
7965	 4A2	SHR		 	 
- stack 1: 0x818
- stack 0: 0x11
7966	 4A3	PUSH1	01	 	 
- stack 2: 0x818
- stack 1: 0x11
- stack 0: 0x1
7967	 4A5	SIGNEXTEND		 	 
- stack 1: 0x818
- stack 0: 0x11
7968	 4A6	PUSH2	0060	 	 
- stack 2: 0x818
- stack 1: 0x11
- stack 0: 0x60
7969	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x818
7970	 4AA	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
7971	 4AC	ADD		 	 
- stack 0: 0x81C
7972	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
7973	 4AE	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x1550011018900680389000104C6000204E0FFD4016F001703F00000041D0000
7974	 4AF	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0x1550011018900680389000104C6000204E0FFD4016F001703F00000041D0000
- stack 0: 0xF0
7975	 4B1	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x155
7976	 4B2	JUMP		 	 
- stack 0: 0x81C
7977	 155	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,170(ignore imm)
- stack 0: 0x81C
7978	 156	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x81C
- stack 0: 0x81C
7979	 157	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x1550011018900680389000104C6000204E0FFD4016F001703F00000041D0000
7980	 158	PUSH1	E0	 	 
- stack 2: 0x81C
- stack 1: 0x1550011018900680389000104C6000204E0FFD4016F001703F00000041D0000
- stack 0: 0xE0
7981	 15A	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x1550011
7982	 15B	PUSH2	FFFF	 	 
- stack 2: 0x81C
- stack 1: 0x1550011
- stack 0: 0xFFFF
7983	 15E	AND		 	 
- stack 1: 0x81C
- stack 0: 0x11
7984	 15F	PUSH1	01	 	 
- stack 2: 0x81C
- stack 1: 0x11
- stack 0: 0x1
7985	 161	SIGNEXTEND		 	 
- stack 1: 0x81C
- stack 0: 0x11
7986	 162	PUSH2	03A0	 	 
- stack 2: 0x81C
- stack 1: 0x11
- stack 0: 0x3A0
7987	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x81C
7988	 166	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
7989	 168	ADD		 	 
- stack 0: 0x820
7990	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
7991	 16A	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x18900680389000104C6000204E0FFD4016F001703F00000041D000001DE0098
7992	 16B	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0x18900680389000104C6000204E0FFD4016F001703F00000041D000001DE0098
- stack 0: 0xF0
7993	 16D	SHR		 	 
- stack 1: 0x820
- stack 0: 0x189
7994	 16E	JUMP		 	 
- stack 0: 0x820
7995	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x820
7996	 18A	PUSH2	0060	 	 
- stack 1: 0x820
- stack 0: 0x60
7997	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x820
- stack 0: 0x11
7998	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x820
- stack 1: 0x11
- stack 0: 0xFFFFFFFF
7999	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x820
- stack 0: 0x11
8000	 194	PUSH2	03A0	 	 
- stack 2: 0x820
- stack 1: 0x11
- stack 0: 0x3A0
8001	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x820
- stack 1: 0x11
- stack 0: 0x11
8002	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x820
- stack 2: 0x11
- stack 1: 0x11
- stack 0: 0xFFFFFFFF
8003	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x820
- stack 1: 0x11
- stack 0: 0x11
8004	 19E	SUB		 	 
- stack 1: 0x820
- stack 0: 0x0
8005	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x820
- stack 1: 0x0
- stack 0: 0x1A7
8006	 1A2	JUMPI		 	 
- stack 0: 0x820
8007	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x820
- stack 0: 0x1C1
8008	 1A6	JUMP		 	 
- stack 0: 0x820
8009	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x820
8010	 1C2	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
8011	 1C4	ADD		 	 
- stack 0: 0x824
8012	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
8013	 1C6	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x389000104C6000204E0FFD4016F001703F00000041D000001DE009805350000
8014	 1C7	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x389000104C6000204E0FFD4016F001703F00000041D000001DE009805350000
- stack 0: 0xF0
8015	 1C9	SHR		 	 
- stack 1: 0x824
- stack 0: 0x389
8016	 1CA	JUMP		 	 
- stack 0: 0x824
8017	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x824
8018	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x824
- stack 0: 0x824
8019	 38B	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x389000104C6000204E0FFD4016F001703F00000041D000001DE009805350000
8020	 38C	PUSH1	E0	 	 
- stack 2: 0x824
- stack 1: 0x389000104C6000204E0FFD4016F001703F00000041D000001DE009805350000
- stack 0: 0xE0
8021	 38E	SHR		 	 
- stack 1: 0x824
- stack 0: 0x3890001
8022	 38F	PUSH2	FFFF	 	 
- stack 2: 0x824
- stack 1: 0x3890001
- stack 0: 0xFFFF
8023	 392	AND		 	 
- stack 1: 0x824
- stack 0: 0x1
8024	 393	PUSH1	01	 	 
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x1
8025	 395	SIGNEXTEND		 	 
- stack 1: 0x824
- stack 0: 0x1
8026	 396	PUSH2	0080	 	 
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x80
8027	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x0
8028	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x824
- stack 0: 0x1
8029	 39B	PUSH2	0080	 	 
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x80
8030	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x824
8031	 39F	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
8032	 3A1	ADD		 	 
- stack 0: 0x828
8033	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
8034	 3A3	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x4C6000204E0FFD4016F001703F00000041D000001DE00980535000005350000
8035	 3A4	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x4C6000204E0FFD4016F001703F00000041D000001DE00980535000005350000
- stack 0: 0xF0
8036	 3A6	SHR		 	 
- stack 1: 0x828
- stack 0: 0x4C6
8037	 3A7	JUMP		 	 
- stack 0: 0x828
8038	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x828
8039	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
8040	 4C8	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x4C6000204E0FFD4016F001703F00000041D000001DE00980535000005350000
8041	 4C9	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0x4C6000204E0FFD4016F001703F00000041D000001DE00980535000005350000
- stack 0: 0xE0
8042	 4CB	SHR		 	 
- stack 1: 0x828
- stack 0: 0x4C60002
8043	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0x4C60002
- stack 0: 0xFFFF
8044	 4CF	AND		 	 
- stack 1: 0x828
- stack 0: 0x2
8045	 4D0	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0x2
- stack 0: 0x1
8046	 4D2	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0x2
8047	 4D3	PUSH2	00A0	 	 
- stack 2: 0x828
- stack 1: 0x2
- stack 0: 0xA0
8048	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x828
8049	 4D7	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
8050	 4D9	ADD		 	 
- stack 0: 0x82C
8051	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
8052	 4DB	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x4E0FFD4016F001703F00000041D000001DE0098053500000535000005EB0003
8053	 4DC	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x4E0FFD4016F001703F00000041D000001DE0098053500000535000005EB0003
- stack 0: 0xF0
8054	 4DE	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x4E0
8055	 4DF	JUMP		 	 
- stack 0: 0x82C
8056	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x82C
8057	 4E1	PUSH2	0080	 	 
- stack 1: 0x82C
- stack 0: 0x80
8058	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x82C
- stack 0: 0x1
8059	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
8060	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x82C
- stack 0: 0x1
8061	 4EB	PUSH2	00A0	 	 
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0xA0
8062	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x2
8063	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x82C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8064	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x2
8065	 4F5	SUB		 	 
- stack 1: 0x82C
- stack 0: 0x1
8066	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x4FE
8067	 4F9	JUMPI		 	 
- stack 0: 0x82C
8068	 4FE	JUMPDEST		 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x82C
8069	 4FF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x82C
- stack 0: 0x82C
8070	 500	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x4E0FFD4016F001703F00000041D000001DE0098053500000535000005EB0003
8071	 501	PUSH1	E0	 	 
- stack 2: 0x82C
- stack 1: 0x4E0FFD4016F001703F00000041D000001DE0098053500000535000005EB0003
- stack 0: 0xE0
8072	 503	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x4E0FFD4
8073	 504	PUSH2	FFFF	 	 
- stack 2: 0x82C
- stack 1: 0x4E0FFD4
- stack 0: 0xFFFF
8074	 507	AND		 	 
- stack 1: 0x82C
- stack 0: 0xFFD4
8075	 508	PUSH1	01	 	 
- stack 2: 0x82C
- stack 1: 0xFFD4
- stack 0: 0x1
8076	 50A	SIGNEXTEND		 	 
- stack 1: 0x82C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4
8077	 50B	ADD		 	 
- stack 0: 0x800
8078	 50C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x800
- stack 0: 0xFFFFFFFF
8079	 511	AND		 	  ;; # mask to 32 bits
- stack 0: 0x800
8080	 512	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
8081	 513	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x41D000001DE00D00535000005D1001105350000042C0008047E000801550011
8082	 514	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x41D000001DE00D00535000005D1001105350000042C0008047E000801550011
- stack 0: 0xF0
8083	 516	SHR		 	 
- stack 1: 0x800
- stack 0: 0x41D
8084	 517	JUMP		 	 
- stack 0: 0x800
8085	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x800
8086	 41E	DUP1		 	 
- stack 1: 0x800
- stack 0: 0x800
8087	 41F	PUSH2	0040	 	 
- stack 2: 0x800
- stack 1: 0x800
- stack 0: 0x40
8088	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x800
8089	 423	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
8090	 425	ADD		 	 
- stack 0: 0x804
8091	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
8092	 427	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x1DE00D00535000005D1001105350000042C0008047E00080155001101890068
8093	 428	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x1DE00D00535000005D1001105350000042C0008047E00080155001101890068
- stack 0: 0xF0
8094	 42A	SHR		 	 
- stack 1: 0x804
- stack 0: 0x1DE
8095	 42B	JUMP		 	 
- stack 0: 0x804
8096	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x804
8097	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
8098	 1E0	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x1DE00D00535000005D1001105350000042C0008047E00080155001101890068
8099	 1E1	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x1DE00D00535000005D1001105350000042C0008047E00080155001101890068
- stack 0: 0xE0
8100	 1E3	SHR		 	 
- stack 1: 0x804
- stack 0: 0x1DE00D0
8101	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x1DE00D0
- stack 0: 0xFFFF
8102	 1E7	AND		 	 
- stack 1: 0x804
- stack 0: 0xD0
8103	 1E8	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0xD0
- stack 0: 0x1
8104	 1EA	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0xD0
8105	 1EB	PUSH2	0040	 	 
- stack 2: 0x804
- stack 1: 0xD0
- stack 0: 0x40
8106	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x804
- stack 1: 0xD0
- stack 0: 0x800
8107	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x804
- stack 0: 0x8D0
8108	 1F0	PUSH2	0040	 	 
- stack 2: 0x804
- stack 1: 0x8D0
- stack 0: 0x40
8109	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x804
8110	 1F4	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
8111	 1F6	ADD		 	 
- stack 0: 0x808
8112	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
8113	 1F8	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x535000005D1001105350000042C0008047E0008015500110189006803890001
8114	 1F9	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0x535000005D1001105350000042C0008047E0008015500110189006803890001
- stack 0: 0xF0
8115	 1FB	SHR		 	 
- stack 1: 0x808
- stack 0: 0x535
8116	 1FC	JUMP		 	 
- stack 0: 0x808
8117	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x808
8118	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x808
- stack 0: 0x808
8119	 537	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x535000005D1001105350000042C0008047E0008015500110189006803890001
8120	 538	PUSH1	E0	 	 
- stack 2: 0x808
- stack 1: 0x535000005D1001105350000042C0008047E0008015500110189006803890001
- stack 0: 0xE0
8121	 53A	SHR		 	 
- stack 1: 0x808
- stack 0: 0x5350000
8122	 53B	PUSH2	FFFF	 	 
- stack 2: 0x808
- stack 1: 0x5350000
- stack 0: 0xFFFF
8123	 53E	AND		 	 
- stack 1: 0x808
- stack 0: 0x0
8124	 53F	PUSH1	01	 	 
- stack 2: 0x808
- stack 1: 0x0
- stack 0: 0x1
8125	 541	SIGNEXTEND		 	 
- stack 1: 0x808
- stack 0: 0x0
8126	 542	POP		 	 
- stack 0: 0x808
8127	 543	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
8128	 545	ADD		 	 
- stack 0: 0x80C
8129	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
8130	 547	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x5D1001105350000042C0008047E000801550011018900680389000104C60002
8131	 548	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0x5D1001105350000042C0008047E000801550011018900680389000104C60002
- stack 0: 0xF0
8132	 54A	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x5D1
8133	 54B	JUMP		 	 
- stack 0: 0x80C
8134	 5D1	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,274(ignore imm)
- stack 0: 0x80C
8135	 5D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x80C
- stack 0: 0x80C
8136	 5D3	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x5D1001105350000042C0008047E000801550011018900680389000104C60002
8137	 5D4	PUSH1	E0	 	 
- stack 2: 0x80C
- stack 1: 0x5D1001105350000042C0008047E000801550011018900680389000104C60002
- stack 0: 0xE0
8138	 5D6	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x5D10011
8139	 5D7	PUSH2	FFFF	 	 
- stack 2: 0x80C
- stack 1: 0x5D10011
- stack 0: 0xFFFF
8140	 5DA	AND		 	 
- stack 1: 0x80C
- stack 0: 0x11
8141	 5DB	PUSH1	01	 	 
- stack 2: 0x80C
- stack 1: 0x11
- stack 0: 0x1
8142	 5DD	SIGNEXTEND		 	 
- stack 1: 0x80C
- stack 0: 0x11
8143	 5DE	PUSH2	0020	 	 
- stack 2: 0x80C
- stack 1: 0x11
- stack 0: 0x20
8144	 5E1	MSTORE		 	  ;; # store to x1
- stack 0: 0x80C
8145	 5E2	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
8146	 5E4	ADD		 	 
- stack 0: 0x810
8147	 5E5	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
8148	 5E6	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x5350000042C0008047E000801550011018900680389000104C6000204E0FFD4
8149	 5E7	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0x5350000042C0008047E000801550011018900680389000104C6000204E0FFD4
- stack 0: 0xF0
8150	 5E9	SHR		 	 
- stack 1: 0x810
- stack 0: 0x535
8151	 5EA	JUMP		 	 
- stack 0: 0x810
8152	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x810
8153	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x810
- stack 0: 0x810
8154	 537	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x5350000042C0008047E000801550011018900680389000104C6000204E0FFD4
8155	 538	PUSH1	E0	 	 
- stack 2: 0x810
- stack 1: 0x5350000042C0008047E000801550011018900680389000104C6000204E0FFD4
- stack 0: 0xE0
8156	 53A	SHR		 	 
- stack 1: 0x810
- stack 0: 0x5350000
8157	 53B	PUSH2	FFFF	 	 
- stack 2: 0x810
- stack 1: 0x5350000
- stack 0: 0xFFFF
8158	 53E	AND		 	 
- stack 1: 0x810
- stack 0: 0x0
8159	 53F	PUSH1	01	 	 
- stack 2: 0x810
- stack 1: 0x0
- stack 0: 0x1
8160	 541	SIGNEXTEND		 	 
- stack 1: 0x810
- stack 0: 0x0
8161	 542	POP		 	 
- stack 0: 0x810
8162	 543	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
8163	 545	ADD		 	 
- stack 0: 0x814
8164	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
8165	 547	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x42C0008047E000801550011018900680389000104C6000204E0FFD4016F0017
8166	 548	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0x42C0008047E000801550011018900680389000104C6000204E0FFD4016F0017
- stack 0: 0xF0
8167	 54A	SHR		 	 
- stack 1: 0x814
- stack 0: 0x42C
8168	 54B	JUMP		 	 
- stack 0: 0x814
8169	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x814
8170	 42D	PUSH2	0040	 	 
- stack 1: 0x814
- stack 0: 0x40
8171	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x814
- stack 0: 0x8D0
8172	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x814
- stack 1: 0x8D0
- stack 0: 0x814
8173	 432	MLOAD		 	 
- stack 2: 0x814
- stack 1: 0x8D0
- stack 0: 0x42C0008047E000801550011018900680389000104C6000204E0FFD4016F0017
8174	 433	PUSH1	E0	 	 
- stack 3: 0x814
- stack 2: 0x8D0
- stack 1: 0x42C0008047E000801550011018900680389000104C6000204E0FFD4016F0017
- stack 0: 0xE0
8175	 435	SHR		 	 
- stack 2: 0x814
- stack 1: 0x8D0
- stack 0: 0x42C0008
8176	 436	PUSH2	FFFF	 	 
- stack 3: 0x814
- stack 2: 0x8D0
- stack 1: 0x42C0008
- stack 0: 0xFFFF
8177	 439	AND		 	 
- stack 2: 0x814
- stack 1: 0x8D0
- stack 0: 0x8
8178	 43A	PUSH1	01	 	 
- stack 3: 0x814
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
8179	 43C	SIGNEXTEND		 	 
- stack 2: 0x814
- stack 1: 0x8D0
- stack 0: 0x8
8180	 43D	ADD		 	 
- stack 1: 0x814
- stack 0: 0x8D8
8181	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x814
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
8182	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x814
- stack 0: 0x8D8
8183	 444	PUSH1	02	 	 
- stack 2: 0x814
- stack 1: 0x8D8
- stack 0: 0x2
8184	 446	XOR		 	 
- stack 1: 0x814
- stack 0: 0x8DA
8185	 447	DUP1		 	 
- stack 2: 0x814
- stack 1: 0x8DA
- stack 0: 0x8DA
8186	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x814
- stack 1: 0x8DA
- stack 0: 0x11A00A0AA03098567800000000000000000000000000000000000000000000
8187	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x814
- stack 2: 0x8DA
- stack 1: 0x11A00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
8188	 46A	AND		 	 
- stack 2: 0x814
- stack 1: 0x8DA
- stack 0: 0xA00A0AA03098567800000000000000000000000000000000000000000000
8189	 46B	PUSH2	0020	 	 
- stack 3: 0x814
- stack 2: 0x8DA
- stack 1: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0x20
8190	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x814
- stack 2: 0x8DA
- stack 1: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0x11
8191	 46F	PUSH1	F0	 	 
- stack 4: 0x814
- stack 3: 0x8DA
- stack 2: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 1: 0x11
- stack 0: 0xF0
8192	 471	SHL		 	 
- stack 3: 0x814
- stack 2: 0x8DA
- stack 1: 0xA00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0x11000000000000000000000000000000000000000000000000000000000000
8193	 472	ADD		 	 
- stack 2: 0x814
- stack 1: 0x8DA
- stack 0: 0x11A00A0AA03098567800000000000000000000000000000000000000000000
8194	 473	SWAP1		 	 
- stack 2: 0x814
- stack 1: 0x11A00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0x8DA
8195	 474	MSTORE		 	 
- stack 0: 0x814
8196	 475	PUSH1	04	 	 
- stack 1: 0x814
- stack 0: 0x4
8197	 477	ADD		 	 
- stack 0: 0x818
8198	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
8199	 479	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x47E000801550011018900680389000104C6000204E0FFD4016F001703F00000
8200	 47A	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x47E000801550011018900680389000104C6000204E0FFD4016F001703F00000
- stack 0: 0xF0
8201	 47C	SHR		 	 
- stack 1: 0x818
- stack 0: 0x47E
8202	 47D	JUMP		 	 
- stack 0: 0x818
8203	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x818
8204	 47F	PUSH2	0040	 	 
- stack 1: 0x818
- stack 0: 0x40
8205	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x818
- stack 0: 0x8D0
8206	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x818
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
8207	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x818
- stack 0: 0x8D0
8208	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x818
- stack 1: 0x8D0
- stack 0: 0x818
8209	 48A	MLOAD		 	 
- stack 2: 0x818
- stack 1: 0x8D0
- stack 0: 0x47E000801550011018900680389000104C6000204E0FFD4016F001703F00000
8210	 48B	PUSH1	E0	 	 
- stack 3: 0x818
- stack 2: 0x8D0
- stack 1: 0x47E000801550011018900680389000104C6000204E0FFD4016F001703F00000
- stack 0: 0xE0
8211	 48D	SHR		 	 
- stack 2: 0x818
- stack 1: 0x8D0
- stack 0: 0x47E0008
8212	 48E	PUSH2	FFFF	 	 
- stack 3: 0x818
- stack 2: 0x8D0
- stack 1: 0x47E0008
- stack 0: 0xFFFF
8213	 491	AND		 	 
- stack 2: 0x818
- stack 1: 0x8D0
- stack 0: 0x8
8214	 492	PUSH1	01	 	 
- stack 3: 0x818
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
8215	 494	SIGNEXTEND		 	 
- stack 2: 0x818
- stack 1: 0x8D0
- stack 0: 0x8
8216	 495	ADD		 	 
- stack 1: 0x818
- stack 0: 0x8D8
8217	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x818
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
8218	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x818
- stack 0: 0x8D8
8219	 49C	PUSH1	02	 	 
- stack 2: 0x818
- stack 1: 0x8D8
- stack 0: 0x2
8220	 49E	XOR		 	 
- stack 1: 0x818
- stack 0: 0x8DA
8221	 49F	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x11A00A0AA03098567800000000000000000000000000000000000000000000
8222	 4A0	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x11A00A0AA03098567800000000000000000000000000000000000000000000
- stack 0: 0xF0
8223	 4A2	SHR		 	 
- stack 1: 0x818
- stack 0: 0x11
8224	 4A3	PUSH1	01	 	 
- stack 2: 0x818
- stack 1: 0x11
- stack 0: 0x1
8225	 4A5	SIGNEXTEND		 	 
- stack 1: 0x818
- stack 0: 0x11
8226	 4A6	PUSH2	0060	 	 
- stack 2: 0x818
- stack 1: 0x11
- stack 0: 0x60
8227	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x818
8228	 4AA	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
8229	 4AC	ADD		 	 
- stack 0: 0x81C
8230	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
8231	 4AE	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x1550011018900680389000104C6000204E0FFD4016F001703F00000041D0000
8232	 4AF	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0x1550011018900680389000104C6000204E0FFD4016F001703F00000041D0000
- stack 0: 0xF0
8233	 4B1	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x155
8234	 4B2	JUMP		 	 
- stack 0: 0x81C
8235	 155	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,170(ignore imm)
- stack 0: 0x81C
8236	 156	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x81C
- stack 0: 0x81C
8237	 157	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x1550011018900680389000104C6000204E0FFD4016F001703F00000041D0000
8238	 158	PUSH1	E0	 	 
- stack 2: 0x81C
- stack 1: 0x1550011018900680389000104C6000204E0FFD4016F001703F00000041D0000
- stack 0: 0xE0
8239	 15A	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x1550011
8240	 15B	PUSH2	FFFF	 	 
- stack 2: 0x81C
- stack 1: 0x1550011
- stack 0: 0xFFFF
8241	 15E	AND		 	 
- stack 1: 0x81C
- stack 0: 0x11
8242	 15F	PUSH1	01	 	 
- stack 2: 0x81C
- stack 1: 0x11
- stack 0: 0x1
8243	 161	SIGNEXTEND		 	 
- stack 1: 0x81C
- stack 0: 0x11
8244	 162	PUSH2	03A0	 	 
- stack 2: 0x81C
- stack 1: 0x11
- stack 0: 0x3A0
8245	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x81C
8246	 166	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
8247	 168	ADD		 	 
- stack 0: 0x820
8248	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
8249	 16A	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x18900680389000104C6000204E0FFD4016F001703F00000041D000001DE0098
8250	 16B	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0x18900680389000104C6000204E0FFD4016F001703F00000041D000001DE0098
- stack 0: 0xF0
8251	 16D	SHR		 	 
- stack 1: 0x820
- stack 0: 0x189
8252	 16E	JUMP		 	 
- stack 0: 0x820
8253	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x820
8254	 18A	PUSH2	0060	 	 
- stack 1: 0x820
- stack 0: 0x60
8255	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x820
- stack 0: 0x11
8256	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x820
- stack 1: 0x11
- stack 0: 0xFFFFFFFF
8257	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x820
- stack 0: 0x11
8258	 194	PUSH2	03A0	 	 
- stack 2: 0x820
- stack 1: 0x11
- stack 0: 0x3A0
8259	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x820
- stack 1: 0x11
- stack 0: 0x11
8260	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x820
- stack 2: 0x11
- stack 1: 0x11
- stack 0: 0xFFFFFFFF
8261	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x820
- stack 1: 0x11
- stack 0: 0x11
8262	 19E	SUB		 	 
- stack 1: 0x820
- stack 0: 0x0
8263	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x820
- stack 1: 0x0
- stack 0: 0x1A7
8264	 1A2	JUMPI		 	 
- stack 0: 0x820
8265	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x820
- stack 0: 0x1C1
8266	 1A6	JUMP		 	 
- stack 0: 0x820
8267	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x820
8268	 1C2	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
8269	 1C4	ADD		 	 
- stack 0: 0x824
8270	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
8271	 1C6	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x389000104C6000204E0FFD4016F001703F00000041D000001DE009805350000
8272	 1C7	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x389000104C6000204E0FFD4016F001703F00000041D000001DE009805350000
- stack 0: 0xF0
8273	 1C9	SHR		 	 
- stack 1: 0x824
- stack 0: 0x389
8274	 1CA	JUMP		 	 
- stack 0: 0x824
8275	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x824
8276	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x824
- stack 0: 0x824
8277	 38B	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x389000104C6000204E0FFD4016F001703F00000041D000001DE009805350000
8278	 38C	PUSH1	E0	 	 
- stack 2: 0x824
- stack 1: 0x389000104C6000204E0FFD4016F001703F00000041D000001DE009805350000
- stack 0: 0xE0
8279	 38E	SHR		 	 
- stack 1: 0x824
- stack 0: 0x3890001
8280	 38F	PUSH2	FFFF	 	 
- stack 2: 0x824
- stack 1: 0x3890001
- stack 0: 0xFFFF
8281	 392	AND		 	 
- stack 1: 0x824
- stack 0: 0x1
8282	 393	PUSH1	01	 	 
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x1
8283	 395	SIGNEXTEND		 	 
- stack 1: 0x824
- stack 0: 0x1
8284	 396	PUSH2	0080	 	 
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x80
8285	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x1
8286	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x824
- stack 0: 0x2
8287	 39B	PUSH2	0080	 	 
- stack 2: 0x824
- stack 1: 0x2
- stack 0: 0x80
8288	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x824
8289	 39F	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
8290	 3A1	ADD		 	 
- stack 0: 0x828
8291	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
8292	 3A3	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x4C6000204E0FFD4016F001703F00000041D000001DE00980535000005350000
8293	 3A4	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x4C6000204E0FFD4016F001703F00000041D000001DE00980535000005350000
- stack 0: 0xF0
8294	 3A6	SHR		 	 
- stack 1: 0x828
- stack 0: 0x4C6
8295	 3A7	JUMP		 	 
- stack 0: 0x828
8296	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x828
8297	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
8298	 4C8	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x4C6000204E0FFD4016F001703F00000041D000001DE00980535000005350000
8299	 4C9	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0x4C6000204E0FFD4016F001703F00000041D000001DE00980535000005350000
- stack 0: 0xE0
8300	 4CB	SHR		 	 
- stack 1: 0x828
- stack 0: 0x4C60002
8301	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0x4C60002
- stack 0: 0xFFFF
8302	 4CF	AND		 	 
- stack 1: 0x828
- stack 0: 0x2
8303	 4D0	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0x2
- stack 0: 0x1
8304	 4D2	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0x2
8305	 4D3	PUSH2	00A0	 	 
- stack 2: 0x828
- stack 1: 0x2
- stack 0: 0xA0
8306	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x828
8307	 4D7	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
8308	 4D9	ADD		 	 
- stack 0: 0x82C
8309	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
8310	 4DB	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x4E0FFD4016F001703F00000041D000001DE0098053500000535000005EB0003
8311	 4DC	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x4E0FFD4016F001703F00000041D000001DE0098053500000535000005EB0003
- stack 0: 0xF0
8312	 4DE	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x4E0
8313	 4DF	JUMP		 	 
- stack 0: 0x82C
8314	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x82C
8315	 4E1	PUSH2	0080	 	 
- stack 1: 0x82C
- stack 0: 0x80
8316	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x82C
- stack 0: 0x2
8317	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x82C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8318	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x82C
- stack 0: 0x2
8319	 4EB	PUSH2	00A0	 	 
- stack 2: 0x82C
- stack 1: 0x2
- stack 0: 0xA0
8320	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x82C
- stack 1: 0x2
- stack 0: 0x2
8321	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x82C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8322	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x82C
- stack 1: 0x2
- stack 0: 0x2
8323	 4F5	SUB		 	 
- stack 1: 0x82C
- stack 0: 0x0
8324	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x82C
- stack 1: 0x0
- stack 0: 0x4FE
8325	 4F9	JUMPI		 	 
- stack 0: 0x82C
8326	 4FA	PUSH2	0518	 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 1: 0x82C
- stack 0: 0x518
8327	 4FD	JUMP		 	 
- stack 0: 0x82C
8328	 518	JUMPDEST		 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x82C
8329	 519	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
8330	 51B	ADD		 	 
- stack 0: 0x830
8331	 51C	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
8332	 51D	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x16F001703F00000041D000001DE0098053500000535000005EB000300950001
8333	 51E	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0x16F001703F00000041D000001DE0098053500000535000005EB000300950001
- stack 0: 0xF0
8334	 520	SHR		 	 
- stack 1: 0x830
- stack 0: 0x16F
8335	 521	JUMP		 	 
- stack 0: 0x830
8336	 16F	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x830
8337	 170	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x830
- stack 0: 0x830
8338	 171	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x16F001703F00000041D000001DE0098053500000535000005EB000300950001
8339	 172	PUSH1	E0	 	 
- stack 2: 0x830
- stack 1: 0x16F001703F00000041D000001DE0098053500000535000005EB000300950001
- stack 0: 0xE0
8340	 174	SHR		 	 
- stack 1: 0x830
- stack 0: 0x16F0017
8341	 175	PUSH2	FFFF	 	 
- stack 2: 0x830
- stack 1: 0x16F0017
- stack 0: 0xFFFF
8342	 178	AND		 	 
- stack 1: 0x830
- stack 0: 0x17
8343	 179	PUSH1	01	 	 
- stack 2: 0x830
- stack 1: 0x17
- stack 0: 0x1
8344	 17B	SIGNEXTEND		 	 
- stack 1: 0x830
- stack 0: 0x17
8345	 17C	PUSH2	0380	 	 
- stack 2: 0x830
- stack 1: 0x17
- stack 0: 0x380
8346	 17F	MSTORE		 	  ;; # store to x28
- stack 0: 0x830
8347	 180	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
8348	 182	ADD		 	 
- stack 0: 0x834
8349	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
8350	 184	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x3F00000041D000001DE0098053500000535000005EB000300950001042C000A
8351	 185	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0x3F00000041D000001DE0098053500000535000005EB000300950001042C000A
- stack 0: 0xF0
8352	 187	SHR		 	 
- stack 1: 0x834
- stack 0: 0x3F0
8353	 188	JUMP		 	 
- stack 0: 0x834
8354	 3F0	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x834
8355	 3F1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x834
- stack 0: 0x834
8356	 3F2	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x3F00000041D000001DE0098053500000535000005EB000300950001042C000A
8357	 3F3	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0x3F00000041D000001DE0098053500000535000005EB000300950001042C000A
- stack 0: 0xE0
8358	 3F5	SHR		 	 
- stack 1: 0x834
- stack 0: 0x3F00000
8359	 3F6	PUSH2	FFFF	 	 
- stack 2: 0x834
- stack 1: 0x3F00000
- stack 0: 0xFFFF
8360	 3F9	AND		 	 
- stack 1: 0x834
- stack 0: 0x0
8361	 3FA	PUSH1	01	 	 
- stack 2: 0x834
- stack 1: 0x0
- stack 0: 0x1
8362	 3FC	SIGNEXTEND		 	 
- stack 1: 0x834
- stack 0: 0x0
8363	 3FD	PUSH2	0080	 	 
- stack 2: 0x834
- stack 1: 0x0
- stack 0: 0x80
8364	 400	MSTORE		 	  ;; # store to x4
- stack 0: 0x834
8365	 401	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
8366	 403	ADD		 	 
- stack 0: 0x838
8367	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
8368	 405	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x41D000001DE0098053500000535000005EB000300950001042C000A047E000A
8369	 406	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x41D000001DE0098053500000535000005EB000300950001042C000A047E000A
- stack 0: 0xF0
8370	 408	SHR		 	 
- stack 1: 0x838
- stack 0: 0x41D
8371	 409	JUMP		 	 
- stack 0: 0x838
8372	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x838
8373	 41E	DUP1		 	 
- stack 1: 0x838
- stack 0: 0x838
8374	 41F	PUSH2	0040	 	 
- stack 2: 0x838
- stack 1: 0x838
- stack 0: 0x40
8375	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x838
8376	 423	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
8377	 425	ADD		 	 
- stack 0: 0x83C
8378	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
8379	 427	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x1DE0098053500000535000005EB000300950001042C000A047E000A03DD0003
8380	 428	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x1DE0098053500000535000005EB000300950001042C000A047E000A03DD0003
- stack 0: 0xF0
8381	 42A	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x1DE
8382	 42B	JUMP		 	 
- stack 0: 0x83C
8383	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x83C
8384	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x83C
- stack 0: 0x83C
8385	 1E0	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x1DE0098053500000535000005EB000300950001042C000A047E000A03DD0003
8386	 1E1	PUSH1	E0	 	 
- stack 2: 0x83C
- stack 1: 0x1DE0098053500000535000005EB000300950001042C000A047E000A03DD0003
- stack 0: 0xE0
8387	 1E3	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x1DE0098
8388	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x83C
- stack 1: 0x1DE0098
- stack 0: 0xFFFF
8389	 1E7	AND		 	 
- stack 1: 0x83C
- stack 0: 0x98
8390	 1E8	PUSH1	01	 	 
- stack 2: 0x83C
- stack 1: 0x98
- stack 0: 0x1
8391	 1EA	SIGNEXTEND		 	 
- stack 1: 0x83C
- stack 0: 0x98
8392	 1EB	PUSH2	0040	 	 
- stack 2: 0x83C
- stack 1: 0x98
- stack 0: 0x40
8393	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x83C
- stack 1: 0x98
- stack 0: 0x838
8394	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x83C
- stack 0: 0x8D0
8395	 1F0	PUSH2	0040	 	 
- stack 2: 0x83C
- stack 1: 0x8D0
- stack 0: 0x40
8396	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x83C
8397	 1F4	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
8398	 1F6	ADD		 	 
- stack 0: 0x840
8399	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
8400	 1F8	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x53500000535000005EB000300950001042C000A047E000A03DD000302100001
8401	 1F9	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0x53500000535000005EB000300950001042C000A047E000A03DD000302100001
- stack 0: 0xF0
8402	 1FB	SHR		 	 
- stack 1: 0x840
- stack 0: 0x535
8403	 1FC	JUMP		 	 
- stack 0: 0x840
8404	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x840
8405	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x840
- stack 0: 0x840
8406	 537	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x53500000535000005EB000300950001042C000A047E000A03DD000302100001
8407	 538	PUSH1	E0	 	 
- stack 2: 0x840
- stack 1: 0x53500000535000005EB000300950001042C000A047E000A03DD000302100001
- stack 0: 0xE0
8408	 53A	SHR		 	 
- stack 1: 0x840
- stack 0: 0x5350000
8409	 53B	PUSH2	FFFF	 	 
- stack 2: 0x840
- stack 1: 0x5350000
- stack 0: 0xFFFF
8410	 53E	AND		 	 
- stack 1: 0x840
- stack 0: 0x0
8411	 53F	PUSH1	01	 	 
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x1
8412	 541	SIGNEXTEND		 	 
- stack 1: 0x840
- stack 0: 0x0
8413	 542	POP		 	 
- stack 0: 0x840
8414	 543	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
8415	 545	ADD		 	 
- stack 0: 0x844
8416	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
8417	 547	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x535000005EB000300950001042C000A047E000A03DD00030210000101890028
8418	 548	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0x535000005EB000300950001042C000A047E000A03DD00030210000101890028
- stack 0: 0xF0
8419	 54A	SHR		 	 
- stack 1: 0x844
- stack 0: 0x535
8420	 54B	JUMP		 	 
- stack 0: 0x844
8421	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x844
8422	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x844
- stack 0: 0x844
8423	 537	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x535000005EB000300950001042C000A047E000A03DD00030210000101890028
8424	 538	PUSH1	E0	 	 
- stack 2: 0x844
- stack 1: 0x535000005EB000300950001042C000A047E000A03DD00030210000101890028
- stack 0: 0xE0
8425	 53A	SHR		 	 
- stack 1: 0x844
- stack 0: 0x5350000
8426	 53B	PUSH2	FFFF	 	 
- stack 2: 0x844
- stack 1: 0x5350000
- stack 0: 0xFFFF
8427	 53E	AND		 	 
- stack 1: 0x844
- stack 0: 0x0
8428	 53F	PUSH1	01	 	 
- stack 2: 0x844
- stack 1: 0x0
- stack 0: 0x1
8429	 541	SIGNEXTEND		 	 
- stack 1: 0x844
- stack 0: 0x0
8430	 542	POP		 	 
- stack 0: 0x844
8431	 543	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
8432	 545	ADD		 	 
- stack 0: 0x848
8433	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
8434	 547	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x5EB000300950001042C000A047E000A03DD0003021000010189002803890001
8435	 548	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x5EB000300950001042C000A047E000A03DD0003021000010189002803890001
- stack 0: 0xF0
8436	 54A	SHR		 	 
- stack 1: 0x848
- stack 0: 0x5EB
8437	 54B	JUMP		 	 
- stack 0: 0x848
8438	 5EB	JUMPDEST		 ;; __riscvimpl_LUI_30b7	  ;; # instr: lui ra,0x3(ignore imm)
- stack 0: 0x848
8439	 5EC	PUSH4	00003000	 	 
- stack 1: 0x848
- stack 0: 0x3000
8440	 5F1	PUSH2	0020	 	 
- stack 2: 0x848
- stack 1: 0x3000
- stack 0: 0x20
8441	 5F4	MSTORE		 	  ;; # store to x1
- stack 0: 0x848
8442	 5F5	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
8443	 5F7	ADD		 	 
- stack 0: 0x84C
8444	 5F8	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
8445	 5F9	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x950001042C000A047E000A03DD000302100001018900280389000104C60002
8446	 5FA	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0x950001042C000A047E000A03DD000302100001018900280389000104C60002
- stack 0: 0xF0
8447	 5FC	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x95
8448	 5FD	JUMP		 	 
- stack 0: 0x84C
8449	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x84C
8450	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x84C
- stack 0: 0x84C
8451	 97	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x950001042C000A047E000A03DD000302100001018900280389000104C60002
8452	 98	PUSH1	E0	 	 
- stack 2: 0x84C
- stack 1: 0x950001042C000A047E000A03DD000302100001018900280389000104C60002
- stack 0: 0xE0
8453	 9A	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x950001
8454	 9B	PUSH2	FFFF	 	 
- stack 2: 0x84C
- stack 1: 0x950001
- stack 0: 0xFFFF
8455	 9E	AND		 	 
- stack 1: 0x84C
- stack 0: 0x1
8456	 9F	PUSH1	01	 	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x1
8457	 A1	SIGNEXTEND		 	 
- stack 1: 0x84C
- stack 0: 0x1
8458	 A2	PUSH2	0020	 	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x20
8459	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x3000
8460	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x84C
- stack 0: 0x3001
8461	 A7	PUSH2	0020	 	 
- stack 2: 0x84C
- stack 1: 0x3001
- stack 0: 0x20
8462	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x84C
8463	 AB	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
8464	 AD	ADD		 	 
- stack 0: 0x850
8465	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
8466	 AF	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x42C000A047E000A03DD000302100001018900280389000104C6000204E0FFCC
8467	 B0	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0x42C000A047E000A03DD000302100001018900280389000104C6000204E0FFCC
- stack 0: 0xF0
8468	 B2	SHR		 	 
- stack 1: 0x850
- stack 0: 0x42C
8469	 B3	JUMP		 	 
- stack 0: 0x850
8470	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x850
8471	 42D	PUSH2	0040	 	 
- stack 1: 0x850
- stack 0: 0x40
8472	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x850
- stack 0: 0x8D0
8473	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x850
- stack 1: 0x8D0
- stack 0: 0x850
8474	 432	MLOAD		 	 
- stack 2: 0x850
- stack 1: 0x8D0
- stack 0: 0x42C000A047E000A03DD000302100001018900280389000104C6000204E0FFCC
8475	 433	PUSH1	E0	 	 
- stack 3: 0x850
- stack 2: 0x8D0
- stack 1: 0x42C000A047E000A03DD000302100001018900280389000104C6000204E0FFCC
- stack 0: 0xE0
8476	 435	SHR		 	 
- stack 2: 0x850
- stack 1: 0x8D0
- stack 0: 0x42C000A
8477	 436	PUSH2	FFFF	 	 
- stack 3: 0x850
- stack 2: 0x8D0
- stack 1: 0x42C000A
- stack 0: 0xFFFF
8478	 439	AND		 	 
- stack 2: 0x850
- stack 1: 0x8D0
- stack 0: 0xA
8479	 43A	PUSH1	01	 	 
- stack 3: 0x850
- stack 2: 0x8D0
- stack 1: 0xA
- stack 0: 0x1
8480	 43C	SIGNEXTEND		 	 
- stack 2: 0x850
- stack 1: 0x8D0
- stack 0: 0xA
8481	 43D	ADD		 	 
- stack 1: 0x850
- stack 0: 0x8DA
8482	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x850
- stack 1: 0x8DA
- stack 0: 0xFFFFFFFF
8483	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x850
- stack 0: 0x8DA
8484	 444	PUSH1	02	 	 
- stack 2: 0x850
- stack 1: 0x8DA
- stack 0: 0x2
8485	 446	XOR		 	 
- stack 1: 0x850
- stack 0: 0x8D8
8486	 447	DUP1		 	 
- stack 2: 0x850
- stack 1: 0x8D8
- stack 0: 0x8D8
8487	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x850
- stack 1: 0x8D8
- stack 0: 0xDAAB0011A00A0AA0309856780000000000000000000000000000000000000000
8488	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x850
- stack 2: 0x8D8
- stack 1: 0xDAAB0011A00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
8489	 46A	AND		 	 
- stack 2: 0x850
- stack 1: 0x8D8
- stack 0: 0x11A00A0AA0309856780000000000000000000000000000000000000000
8490	 46B	PUSH2	0020	 	 
- stack 3: 0x850
- stack 2: 0x8D8
- stack 1: 0x11A00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0x20
8491	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x850
- stack 2: 0x8D8
- stack 1: 0x11A00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0x3001
8492	 46F	PUSH1	F0	 	 
- stack 4: 0x850
- stack 3: 0x8D8
- stack 2: 0x11A00A0AA0309856780000000000000000000000000000000000000000
- stack 1: 0x3001
- stack 0: 0xF0
8493	 471	SHL		 	 
- stack 3: 0x850
- stack 2: 0x8D8
- stack 1: 0x11A00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0x3001000000000000000000000000000000000000000000000000000000000000
8494	 472	ADD		 	 
- stack 2: 0x850
- stack 1: 0x8D8
- stack 0: 0x30010011A00A0AA0309856780000000000000000000000000000000000000000
8495	 473	SWAP1		 	 
- stack 2: 0x850
- stack 1: 0x30010011A00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0x8D8
8496	 474	MSTORE		 	 
- stack 0: 0x850
8497	 475	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
8498	 477	ADD		 	 
- stack 0: 0x854
8499	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
8500	 479	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x47E000A03DD000302100001018900280389000104C6000204E0FFCC05FE000C
8501	 47A	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x47E000A03DD000302100001018900280389000104C6000204E0FFCC05FE000C
- stack 0: 0xF0
8502	 47C	SHR		 	 
- stack 1: 0x854
- stack 0: 0x47E
8503	 47D	JUMP		 	 
- stack 0: 0x854
8504	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x854
8505	 47F	PUSH2	0040	 	 
- stack 1: 0x854
- stack 0: 0x40
8506	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x854
- stack 0: 0x8D0
8507	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x854
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
8508	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x854
- stack 0: 0x8D0
8509	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x854
- stack 1: 0x8D0
- stack 0: 0x854
8510	 48A	MLOAD		 	 
- stack 2: 0x854
- stack 1: 0x8D0
- stack 0: 0x47E000A03DD000302100001018900280389000104C6000204E0FFCC05FE000C
8511	 48B	PUSH1	E0	 	 
- stack 3: 0x854
- stack 2: 0x8D0
- stack 1: 0x47E000A03DD000302100001018900280389000104C6000204E0FFCC05FE000C
- stack 0: 0xE0
8512	 48D	SHR		 	 
- stack 2: 0x854
- stack 1: 0x8D0
- stack 0: 0x47E000A
8513	 48E	PUSH2	FFFF	 	 
- stack 3: 0x854
- stack 2: 0x8D0
- stack 1: 0x47E000A
- stack 0: 0xFFFF
8514	 491	AND		 	 
- stack 2: 0x854
- stack 1: 0x8D0
- stack 0: 0xA
8515	 492	PUSH1	01	 	 
- stack 3: 0x854
- stack 2: 0x8D0
- stack 1: 0xA
- stack 0: 0x1
8516	 494	SIGNEXTEND		 	 
- stack 2: 0x854
- stack 1: 0x8D0
- stack 0: 0xA
8517	 495	ADD		 	 
- stack 1: 0x854
- stack 0: 0x8DA
8518	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x854
- stack 1: 0x8DA
- stack 0: 0xFFFFFFFF
8519	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x854
- stack 0: 0x8DA
8520	 49C	PUSH1	02	 	 
- stack 2: 0x854
- stack 1: 0x8DA
- stack 0: 0x2
8521	 49E	XOR		 	 
- stack 1: 0x854
- stack 0: 0x8D8
8522	 49F	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x30010011A00A0AA0309856780000000000000000000000000000000000000000
8523	 4A0	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x30010011A00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0xF0
8524	 4A2	SHR		 	 
- stack 1: 0x854
- stack 0: 0x3001
8525	 4A3	PUSH1	01	 	 
- stack 2: 0x854
- stack 1: 0x3001
- stack 0: 0x1
8526	 4A5	SIGNEXTEND		 	 
- stack 1: 0x854
- stack 0: 0x3001
8527	 4A6	PUSH2	0060	 	 
- stack 2: 0x854
- stack 1: 0x3001
- stack 0: 0x60
8528	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x854
8529	 4AA	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
8530	 4AC	ADD		 	 
- stack 0: 0x858
8531	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
8532	 4AE	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3DD000302100001018900280389000104C6000204E0FFCC05FE000C0611FEEF
8533	 4AF	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x3DD000302100001018900280389000104C6000204E0FFCC05FE000C0611FEEF
- stack 0: 0xF0
8534	 4B1	SHR		 	 
- stack 1: 0x858
- stack 0: 0x3DD
8535	 4B2	JUMP		 	 
- stack 0: 0x858
8536	 3DD	JUMPDEST		 ;; __riscvimpl_LUI_3eb7	  ;; # instr: lui t4,0x3(ignore imm)
- stack 0: 0x858
8537	 3DE	PUSH4	00003000	 	 
- stack 1: 0x858
- stack 0: 0x3000
8538	 3E3	PUSH2	03A0	 	 
- stack 2: 0x858
- stack 1: 0x3000
- stack 0: 0x3A0
8539	 3E6	MSTORE		 	  ;; # store to x29
- stack 0: 0x858
8540	 3E7	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
8541	 3E9	ADD		 	 
- stack 0: 0x85C
8542	 3EA	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
8543	 3EB	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x2100001018900280389000104C6000204E0FFCC05FE000C0611FEEF06300000
8544	 3EC	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x2100001018900280389000104C6000204E0FFCC05FE000C0611FEEF06300000
- stack 0: 0xF0
8545	 3EE	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x210
8546	 3EF	JUMP		 	 
- stack 0: 0x85C
8547	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x85C
8548	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x85C
- stack 0: 0x85C
8549	 212	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x2100001018900280389000104C6000204E0FFCC05FE000C0611FEEF06300000
8550	 213	PUSH1	E0	 	 
- stack 2: 0x85C
- stack 1: 0x2100001018900280389000104C6000204E0FFCC05FE000C0611FEEF06300000
- stack 0: 0xE0
8551	 215	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x2100001
8552	 216	PUSH2	FFFF	 	 
- stack 2: 0x85C
- stack 1: 0x2100001
- stack 0: 0xFFFF
8553	 219	AND		 	 
- stack 1: 0x85C
- stack 0: 0x1
8554	 21A	PUSH1	01	 	 
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0x1
8555	 21C	SIGNEXTEND		 	 
- stack 1: 0x85C
- stack 0: 0x1
8556	 21D	PUSH2	03A0	 	 
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0x3A0
8557	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0x3000
8558	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x85C
- stack 0: 0x3001
8559	 222	PUSH2	03A0	 	 
- stack 2: 0x85C
- stack 1: 0x3001
- stack 0: 0x3A0
8560	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x85C
8561	 226	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
8562	 228	ADD		 	 
- stack 0: 0x860
8563	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
8564	 22A	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0x18900280389000104C6000204E0FFCC05FE000C0611FEEF0630000000340058
8565	 22B	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0x18900280389000104C6000204E0FFCC05FE000C0611FEEF0630000000340058
- stack 0: 0xF0
8566	 22D	SHR		 	 
- stack 1: 0x860
- stack 0: 0x189
8567	 22E	JUMP		 	 
- stack 0: 0x860
8568	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x860
8569	 18A	PUSH2	0060	 	 
- stack 1: 0x860
- stack 0: 0x60
8570	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x860
- stack 0: 0x3001
8571	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x860
- stack 1: 0x3001
- stack 0: 0xFFFFFFFF
8572	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x860
- stack 0: 0x3001
8573	 194	PUSH2	03A0	 	 
- stack 2: 0x860
- stack 1: 0x3001
- stack 0: 0x3A0
8574	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x860
- stack 1: 0x3001
- stack 0: 0x3001
8575	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x860
- stack 2: 0x3001
- stack 1: 0x3001
- stack 0: 0xFFFFFFFF
8576	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x860
- stack 1: 0x3001
- stack 0: 0x3001
8577	 19E	SUB		 	 
- stack 1: 0x860
- stack 0: 0x0
8578	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x860
- stack 1: 0x0
- stack 0: 0x1A7
8579	 1A2	JUMPI		 	 
- stack 0: 0x860
8580	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x860
- stack 0: 0x1C1
8581	 1A6	JUMP		 	 
- stack 0: 0x860
8582	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x860
8583	 1C2	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
8584	 1C4	ADD		 	 
- stack 0: 0x864
8585	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
8586	 1C6	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x389000104C6000204E0FFCC05FE000C0611FEEF0630000000340058063F0006
8587	 1C7	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0x389000104C6000204E0FFCC05FE000C0611FEEF0630000000340058063F0006
- stack 0: 0xF0
8588	 1C9	SHR		 	 
- stack 1: 0x864
- stack 0: 0x389
8589	 1CA	JUMP		 	 
- stack 0: 0x864
8590	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x864
8591	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x864
- stack 0: 0x864
8592	 38B	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x389000104C6000204E0FFCC05FE000C0611FEEF0630000000340058063F0006
8593	 38C	PUSH1	E0	 	 
- stack 2: 0x864
- stack 1: 0x389000104C6000204E0FFCC05FE000C0611FEEF0630000000340058063F0006
- stack 0: 0xE0
8594	 38E	SHR		 	 
- stack 1: 0x864
- stack 0: 0x3890001
8595	 38F	PUSH2	FFFF	 	 
- stack 2: 0x864
- stack 1: 0x3890001
- stack 0: 0xFFFF
8596	 392	AND		 	 
- stack 1: 0x864
- stack 0: 0x1
8597	 393	PUSH1	01	 	 
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x1
8598	 395	SIGNEXTEND		 	 
- stack 1: 0x864
- stack 0: 0x1
8599	 396	PUSH2	0080	 	 
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x80
8600	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x0
8601	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x864
- stack 0: 0x1
8602	 39B	PUSH2	0080	 	 
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x80
8603	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x864
8604	 39F	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
8605	 3A1	ADD		 	 
- stack 0: 0x868
8606	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
8607	 3A3	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x4C6000204E0FFCC05FE000C0611FEEF0630000000340058063F000606910018
8608	 3A4	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0x4C6000204E0FFCC05FE000C0611FEEF0630000000340058063F000606910018
- stack 0: 0xF0
8609	 3A6	SHR		 	 
- stack 1: 0x868
- stack 0: 0x4C6
8610	 3A7	JUMP		 	 
- stack 0: 0x868
8611	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x868
8612	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x868
- stack 0: 0x868
8613	 4C8	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x4C6000204E0FFCC05FE000C0611FEEF0630000000340058063F000606910018
8614	 4C9	PUSH1	E0	 	 
- stack 2: 0x868
- stack 1: 0x4C6000204E0FFCC05FE000C0611FEEF0630000000340058063F000606910018
- stack 0: 0xE0
8615	 4CB	SHR		 	 
- stack 1: 0x868
- stack 0: 0x4C60002
8616	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x868
- stack 1: 0x4C60002
- stack 0: 0xFFFF
8617	 4CF	AND		 	 
- stack 1: 0x868
- stack 0: 0x2
8618	 4D0	PUSH1	01	 	 
- stack 2: 0x868
- stack 1: 0x2
- stack 0: 0x1
8619	 4D2	SIGNEXTEND		 	 
- stack 1: 0x868
- stack 0: 0x2
8620	 4D3	PUSH2	00A0	 	 
- stack 2: 0x868
- stack 1: 0x2
- stack 0: 0xA0
8621	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x868
8622	 4D7	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
8623	 4D9	ADD		 	 
- stack 0: 0x86C
8624	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
8625	 4DB	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x4E0FFCC05FE000C0611FEEF0630000000340058063F00060691001800210001
8626	 4DC	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0x4E0FFCC05FE000C0611FEEF0630000000340058063F00060691001800210001
- stack 0: 0xF0
8627	 4DE	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x4E0
8628	 4DF	JUMP		 	 
- stack 0: 0x86C
8629	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x86C
8630	 4E1	PUSH2	0080	 	 
- stack 1: 0x86C
- stack 0: 0x80
8631	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x86C
- stack 0: 0x1
8632	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
8633	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x86C
- stack 0: 0x1
8634	 4EB	PUSH2	00A0	 	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0xA0
8635	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x2
8636	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x86C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8637	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x2
8638	 4F5	SUB		 	 
- stack 1: 0x86C
- stack 0: 0x1
8639	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x4FE
8640	 4F9	JUMPI		 	 
- stack 0: 0x86C
8641	 4FE	JUMPDEST		 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x86C
8642	 4FF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x86C
- stack 0: 0x86C
8643	 500	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x4E0FFCC05FE000C0611FEEF0630000000340058063F00060691001800210001
8644	 501	PUSH1	E0	 	 
- stack 2: 0x86C
- stack 1: 0x4E0FFCC05FE000C0611FEEF0630000000340058063F00060691001800210001
- stack 0: 0xE0
8645	 503	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x4E0FFCC
8646	 504	PUSH2	FFFF	 	 
- stack 2: 0x86C
- stack 1: 0x4E0FFCC
- stack 0: 0xFFFF
8647	 507	AND		 	 
- stack 1: 0x86C
- stack 0: 0xFFCC
8648	 508	PUSH1	01	 	 
- stack 2: 0x86C
- stack 1: 0xFFCC
- stack 0: 0x1
8649	 50A	SIGNEXTEND		 	 
- stack 1: 0x86C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
8650	 50B	ADD		 	 
- stack 0: 0x838
8651	 50C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x838
- stack 0: 0xFFFFFFFF
8652	 511	AND		 	  ;; # mask to 32 bits
- stack 0: 0x838
8653	 512	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
8654	 513	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x41D000001DE0098053500000535000005EB000300950001042C000A047E000A
8655	 514	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x41D000001DE0098053500000535000005EB000300950001042C000A047E000A
- stack 0: 0xF0
8656	 516	SHR		 	 
- stack 1: 0x838
- stack 0: 0x41D
8657	 517	JUMP		 	 
- stack 0: 0x838
8658	 41D	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x838
8659	 41E	DUP1		 	 
- stack 1: 0x838
- stack 0: 0x838
8660	 41F	PUSH2	0040	 	 
- stack 2: 0x838
- stack 1: 0x838
- stack 0: 0x40
8661	 422	MSTORE		 	  ;; # store to x2
- stack 0: 0x838
8662	 423	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
8663	 425	ADD		 	 
- stack 0: 0x83C
8664	 426	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
8665	 427	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x1DE0098053500000535000005EB000300950001042C000A047E000A03DD0003
8666	 428	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x1DE0098053500000535000005EB000300950001042C000A047E000A03DD0003
- stack 0: 0xF0
8667	 42A	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x1DE
8668	 42B	JUMP		 	 
- stack 0: 0x83C
8669	 1DE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1536(ignore imm)
- stack 0: 0x83C
8670	 1DF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x83C
- stack 0: 0x83C
8671	 1E0	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x1DE0098053500000535000005EB000300950001042C000A047E000A03DD0003
8672	 1E1	PUSH1	E0	 	 
- stack 2: 0x83C
- stack 1: 0x1DE0098053500000535000005EB000300950001042C000A047E000A03DD0003
- stack 0: 0xE0
8673	 1E3	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x1DE0098
8674	 1E4	PUSH2	FFFF	 	 
- stack 2: 0x83C
- stack 1: 0x1DE0098
- stack 0: 0xFFFF
8675	 1E7	AND		 	 
- stack 1: 0x83C
- stack 0: 0x98
8676	 1E8	PUSH1	01	 	 
- stack 2: 0x83C
- stack 1: 0x98
- stack 0: 0x1
8677	 1EA	SIGNEXTEND		 	 
- stack 1: 0x83C
- stack 0: 0x98
8678	 1EB	PUSH2	0040	 	 
- stack 2: 0x83C
- stack 1: 0x98
- stack 0: 0x40
8679	 1EE	MLOAD		 	  ;; # read from x2
- stack 2: 0x83C
- stack 1: 0x98
- stack 0: 0x838
8680	 1EF	ADD		 	  ;; # ADDI 2
- stack 1: 0x83C
- stack 0: 0x8D0
8681	 1F0	PUSH2	0040	 	 
- stack 2: 0x83C
- stack 1: 0x8D0
- stack 0: 0x40
8682	 1F3	MSTORE		 	  ;; # store to x2
- stack 0: 0x83C
8683	 1F4	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
8684	 1F6	ADD		 	 
- stack 0: 0x840
8685	 1F7	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
8686	 1F8	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x53500000535000005EB000300950001042C000A047E000A03DD000302100001
8687	 1F9	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0x53500000535000005EB000300950001042C000A047E000A03DD000302100001
- stack 0: 0xF0
8688	 1FB	SHR		 	 
- stack 1: 0x840
- stack 0: 0x535
8689	 1FC	JUMP		 	 
- stack 0: 0x840
8690	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x840
8691	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x840
- stack 0: 0x840
8692	 537	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x53500000535000005EB000300950001042C000A047E000A03DD000302100001
8693	 538	PUSH1	E0	 	 
- stack 2: 0x840
- stack 1: 0x53500000535000005EB000300950001042C000A047E000A03DD000302100001
- stack 0: 0xE0
8694	 53A	SHR		 	 
- stack 1: 0x840
- stack 0: 0x5350000
8695	 53B	PUSH2	FFFF	 	 
- stack 2: 0x840
- stack 1: 0x5350000
- stack 0: 0xFFFF
8696	 53E	AND		 	 
- stack 1: 0x840
- stack 0: 0x0
8697	 53F	PUSH1	01	 	 
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x1
8698	 541	SIGNEXTEND		 	 
- stack 1: 0x840
- stack 0: 0x0
8699	 542	POP		 	 
- stack 0: 0x840
8700	 543	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
8701	 545	ADD		 	 
- stack 0: 0x844
8702	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
8703	 547	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x535000005EB000300950001042C000A047E000A03DD00030210000101890028
8704	 548	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0x535000005EB000300950001042C000A047E000A03DD00030210000101890028
- stack 0: 0xF0
8705	 54A	SHR		 	 
- stack 1: 0x844
- stack 0: 0x535
8706	 54B	JUMP		 	 
- stack 0: 0x844
8707	 535	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x844
8708	 536	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x844
- stack 0: 0x844
8709	 537	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x535000005EB000300950001042C000A047E000A03DD00030210000101890028
8710	 538	PUSH1	E0	 	 
- stack 2: 0x844
- stack 1: 0x535000005EB000300950001042C000A047E000A03DD00030210000101890028
- stack 0: 0xE0
8711	 53A	SHR		 	 
- stack 1: 0x844
- stack 0: 0x5350000
8712	 53B	PUSH2	FFFF	 	 
- stack 2: 0x844
- stack 1: 0x5350000
- stack 0: 0xFFFF
8713	 53E	AND		 	 
- stack 1: 0x844
- stack 0: 0x0
8714	 53F	PUSH1	01	 	 
- stack 2: 0x844
- stack 1: 0x0
- stack 0: 0x1
8715	 541	SIGNEXTEND		 	 
- stack 1: 0x844
- stack 0: 0x0
8716	 542	POP		 	 
- stack 0: 0x844
8717	 543	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
8718	 545	ADD		 	 
- stack 0: 0x848
8719	 546	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
8720	 547	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x5EB000300950001042C000A047E000A03DD0003021000010189002803890001
8721	 548	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x5EB000300950001042C000A047E000A03DD0003021000010189002803890001
- stack 0: 0xF0
8722	 54A	SHR		 	 
- stack 1: 0x848
- stack 0: 0x5EB
8723	 54B	JUMP		 	 
- stack 0: 0x848
8724	 5EB	JUMPDEST		 ;; __riscvimpl_LUI_30b7	  ;; # instr: lui ra,0x3(ignore imm)
- stack 0: 0x848
8725	 5EC	PUSH4	00003000	 	 
- stack 1: 0x848
- stack 0: 0x3000
8726	 5F1	PUSH2	0020	 	 
- stack 2: 0x848
- stack 1: 0x3000
- stack 0: 0x20
8727	 5F4	MSTORE		 	  ;; # store to x1
- stack 0: 0x848
8728	 5F5	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
8729	 5F7	ADD		 	 
- stack 0: 0x84C
8730	 5F8	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
8731	 5F9	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x950001042C000A047E000A03DD000302100001018900280389000104C60002
8732	 5FA	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0x950001042C000A047E000A03DD000302100001018900280389000104C60002
- stack 0: 0xF0
8733	 5FC	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x95
8734	 5FD	JUMP		 	 
- stack 0: 0x84C
8735	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x84C
8736	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x84C
- stack 0: 0x84C
8737	 97	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x950001042C000A047E000A03DD000302100001018900280389000104C60002
8738	 98	PUSH1	E0	 	 
- stack 2: 0x84C
- stack 1: 0x950001042C000A047E000A03DD000302100001018900280389000104C60002
- stack 0: 0xE0
8739	 9A	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x950001
8740	 9B	PUSH2	FFFF	 	 
- stack 2: 0x84C
- stack 1: 0x950001
- stack 0: 0xFFFF
8741	 9E	AND		 	 
- stack 1: 0x84C
- stack 0: 0x1
8742	 9F	PUSH1	01	 	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x1
8743	 A1	SIGNEXTEND		 	 
- stack 1: 0x84C
- stack 0: 0x1
8744	 A2	PUSH2	0020	 	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x20
8745	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x3000
8746	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x84C
- stack 0: 0x3001
8747	 A7	PUSH2	0020	 	 
- stack 2: 0x84C
- stack 1: 0x3001
- stack 0: 0x20
8748	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x84C
8749	 AB	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
8750	 AD	ADD		 	 
- stack 0: 0x850
8751	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
8752	 AF	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x42C000A047E000A03DD000302100001018900280389000104C6000204E0FFCC
8753	 B0	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0x42C000A047E000A03DD000302100001018900280389000104C6000204E0FFCC
- stack 0: 0xF0
8754	 B2	SHR		 	 
- stack 1: 0x850
- stack 0: 0x42C
8755	 B3	JUMP		 	 
- stack 0: 0x850
8756	 42C	JUMPDEST		 ;; __riscvimpl_SH_0_2_1	  ;; # instr: sh ra,0(sp)(ignore imm)
- stack 0: 0x850
8757	 42D	PUSH2	0040	 	 
- stack 1: 0x850
- stack 0: 0x40
8758	 430	MLOAD		 	  ;; # read from x2
- stack 1: 0x850
- stack 0: 0x8D0
8759	 431	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x850
- stack 1: 0x8D0
- stack 0: 0x850
8760	 432	MLOAD		 	 
- stack 2: 0x850
- stack 1: 0x8D0
- stack 0: 0x42C000A047E000A03DD000302100001018900280389000104C6000204E0FFCC
8761	 433	PUSH1	E0	 	 
- stack 3: 0x850
- stack 2: 0x8D0
- stack 1: 0x42C000A047E000A03DD000302100001018900280389000104C6000204E0FFCC
- stack 0: 0xE0
8762	 435	SHR		 	 
- stack 2: 0x850
- stack 1: 0x8D0
- stack 0: 0x42C000A
8763	 436	PUSH2	FFFF	 	 
- stack 3: 0x850
- stack 2: 0x8D0
- stack 1: 0x42C000A
- stack 0: 0xFFFF
8764	 439	AND		 	 
- stack 2: 0x850
- stack 1: 0x8D0
- stack 0: 0xA
8765	 43A	PUSH1	01	 	 
- stack 3: 0x850
- stack 2: 0x8D0
- stack 1: 0xA
- stack 0: 0x1
8766	 43C	SIGNEXTEND		 	 
- stack 2: 0x850
- stack 1: 0x8D0
- stack 0: 0xA
8767	 43D	ADD		 	 
- stack 1: 0x850
- stack 0: 0x8DA
8768	 43E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x850
- stack 1: 0x8DA
- stack 0: 0xFFFFFFFF
8769	 443	AND		 	  ;; # mask to 32 bits
- stack 1: 0x850
- stack 0: 0x8DA
8770	 444	PUSH1	02	 	 
- stack 2: 0x850
- stack 1: 0x8DA
- stack 0: 0x2
8771	 446	XOR		 	 
- stack 1: 0x850
- stack 0: 0x8D8
8772	 447	DUP1		 	 
- stack 2: 0x850
- stack 1: 0x8D8
- stack 0: 0x8D8
8773	 448	MLOAD		 	  ;; # fetch
- stack 2: 0x850
- stack 1: 0x8D8
- stack 0: 0x30010011A00A0AA0309856780000000000000000000000000000000000000000
8774	 449	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x850
- stack 2: 0x8D8
- stack 1: 0x30010011A00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
8775	 46A	AND		 	 
- stack 2: 0x850
- stack 1: 0x8D8
- stack 0: 0x11A00A0AA0309856780000000000000000000000000000000000000000
8776	 46B	PUSH2	0020	 	 
- stack 3: 0x850
- stack 2: 0x8D8
- stack 1: 0x11A00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0x20
8777	 46E	MLOAD		 	  ;; # read from x1
- stack 3: 0x850
- stack 2: 0x8D8
- stack 1: 0x11A00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0x3001
8778	 46F	PUSH1	F0	 	 
- stack 4: 0x850
- stack 3: 0x8D8
- stack 2: 0x11A00A0AA0309856780000000000000000000000000000000000000000
- stack 1: 0x3001
- stack 0: 0xF0
8779	 471	SHL		 	 
- stack 3: 0x850
- stack 2: 0x8D8
- stack 1: 0x11A00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0x3001000000000000000000000000000000000000000000000000000000000000
8780	 472	ADD		 	 
- stack 2: 0x850
- stack 1: 0x8D8
- stack 0: 0x30010011A00A0AA0309856780000000000000000000000000000000000000000
8781	 473	SWAP1		 	 
- stack 2: 0x850
- stack 1: 0x30010011A00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0x8D8
8782	 474	MSTORE		 	 
- stack 0: 0x850
8783	 475	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
8784	 477	ADD		 	 
- stack 0: 0x854
8785	 478	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
8786	 479	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x47E000A03DD000302100001018900280389000104C6000204E0FFCC05FE000C
8787	 47A	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x47E000A03DD000302100001018900280389000104C6000204E0FFCC05FE000C
- stack 0: 0xF0
8788	 47C	SHR		 	 
- stack 1: 0x854
- stack 0: 0x47E
8789	 47D	JUMP		 	 
- stack 0: 0x854
8790	 47E	JUMPDEST		 ;; __riscvimpl_LH_3_2_0	  ;; # instr: lh gp,0(sp)(ignore imm)
- stack 0: 0x854
8791	 47F	PUSH2	0040	 	 
- stack 1: 0x854
- stack 0: 0x40
8792	 482	MLOAD		 	  ;; # read from x2
- stack 1: 0x854
- stack 0: 0x8D0
8793	 483	PUSH4	FFFFFFFF	 	 
- stack 2: 0x854
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
8794	 488	AND		 	  ;; # mask to 32 bits
- stack 1: 0x854
- stack 0: 0x8D0
8795	 489	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x854
- stack 1: 0x8D0
- stack 0: 0x854
8796	 48A	MLOAD		 	 
- stack 2: 0x854
- stack 1: 0x8D0
- stack 0: 0x47E000A03DD000302100001018900280389000104C6000204E0FFCC05FE000C
8797	 48B	PUSH1	E0	 	 
- stack 3: 0x854
- stack 2: 0x8D0
- stack 1: 0x47E000A03DD000302100001018900280389000104C6000204E0FFCC05FE000C
- stack 0: 0xE0
8798	 48D	SHR		 	 
- stack 2: 0x854
- stack 1: 0x8D0
- stack 0: 0x47E000A
8799	 48E	PUSH2	FFFF	 	 
- stack 3: 0x854
- stack 2: 0x8D0
- stack 1: 0x47E000A
- stack 0: 0xFFFF
8800	 491	AND		 	 
- stack 2: 0x854
- stack 1: 0x8D0
- stack 0: 0xA
8801	 492	PUSH1	01	 	 
- stack 3: 0x854
- stack 2: 0x8D0
- stack 1: 0xA
- stack 0: 0x1
8802	 494	SIGNEXTEND		 	 
- stack 2: 0x854
- stack 1: 0x8D0
- stack 0: 0xA
8803	 495	ADD		 	 
- stack 1: 0x854
- stack 0: 0x8DA
8804	 496	PUSH4	FFFFFFFF	 	 
- stack 2: 0x854
- stack 1: 0x8DA
- stack 0: 0xFFFFFFFF
8805	 49B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x854
- stack 0: 0x8DA
8806	 49C	PUSH1	02	 	 
- stack 2: 0x854
- stack 1: 0x8DA
- stack 0: 0x2
8807	 49E	XOR		 	 
- stack 1: 0x854
- stack 0: 0x8D8
8808	 49F	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x30010011A00A0AA0309856780000000000000000000000000000000000000000
8809	 4A0	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x30010011A00A0AA0309856780000000000000000000000000000000000000000
- stack 0: 0xF0
8810	 4A2	SHR		 	 
- stack 1: 0x854
- stack 0: 0x3001
8811	 4A3	PUSH1	01	 	 
- stack 2: 0x854
- stack 1: 0x3001
- stack 0: 0x1
8812	 4A5	SIGNEXTEND		 	 
- stack 1: 0x854
- stack 0: 0x3001
8813	 4A6	PUSH2	0060	 	 
- stack 2: 0x854
- stack 1: 0x3001
- stack 0: 0x60
8814	 4A9	MSTORE		 	  ;; # store to x3
- stack 0: 0x854
8815	 4AA	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
8816	 4AC	ADD		 	 
- stack 0: 0x858
8817	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
8818	 4AE	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3DD000302100001018900280389000104C6000204E0FFCC05FE000C0611FEEF
8819	 4AF	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x3DD000302100001018900280389000104C6000204E0FFCC05FE000C0611FEEF
- stack 0: 0xF0
8820	 4B1	SHR		 	 
- stack 1: 0x858
- stack 0: 0x3DD
8821	 4B2	JUMP		 	 
- stack 0: 0x858
8822	 3DD	JUMPDEST		 ;; __riscvimpl_LUI_3eb7	  ;; # instr: lui t4,0x3(ignore imm)
- stack 0: 0x858
8823	 3DE	PUSH4	00003000	 	 
- stack 1: 0x858
- stack 0: 0x3000
8824	 3E3	PUSH2	03A0	 	 
- stack 2: 0x858
- stack 1: 0x3000
- stack 0: 0x3A0
8825	 3E6	MSTORE		 	  ;; # store to x29
- stack 0: 0x858
8826	 3E7	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
8827	 3E9	ADD		 	 
- stack 0: 0x85C
8828	 3EA	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
8829	 3EB	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x2100001018900280389000104C6000204E0FFCC05FE000C0611FEEF06300000
8830	 3EC	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x2100001018900280389000104C6000204E0FFCC05FE000C0611FEEF06300000
- stack 0: 0xF0
8831	 3EE	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x210
8832	 3EF	JUMP		 	 
- stack 0: 0x85C
8833	 210	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1536(ignore imm)
- stack 0: 0x85C
8834	 211	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x85C
- stack 0: 0x85C
8835	 212	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x2100001018900280389000104C6000204E0FFCC05FE000C0611FEEF06300000
8836	 213	PUSH1	E0	 	 
- stack 2: 0x85C
- stack 1: 0x2100001018900280389000104C6000204E0FFCC05FE000C0611FEEF06300000
- stack 0: 0xE0
8837	 215	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x2100001
8838	 216	PUSH2	FFFF	 	 
- stack 2: 0x85C
- stack 1: 0x2100001
- stack 0: 0xFFFF
8839	 219	AND		 	 
- stack 1: 0x85C
- stack 0: 0x1
8840	 21A	PUSH1	01	 	 
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0x1
8841	 21C	SIGNEXTEND		 	 
- stack 1: 0x85C
- stack 0: 0x1
8842	 21D	PUSH2	03A0	 	 
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0x3A0
8843	 220	MLOAD		 	  ;; # read from x29
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0x3000
8844	 221	ADD		 	  ;; # ADDI 29
- stack 1: 0x85C
- stack 0: 0x3001
8845	 222	PUSH2	03A0	 	 
- stack 2: 0x85C
- stack 1: 0x3001
- stack 0: 0x3A0
8846	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x85C
8847	 226	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
8848	 228	ADD		 	 
- stack 0: 0x860
8849	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
8850	 22A	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0x18900280389000104C6000204E0FFCC05FE000C0611FEEF0630000000340058
8851	 22B	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0x18900280389000104C6000204E0FFCC05FE000C0611FEEF0630000000340058
- stack 0: 0xF0
8852	 22D	SHR		 	 
- stack 1: 0x860
- stack 0: 0x189
8853	 22E	JUMP		 	 
- stack 0: 0x860
8854	 189	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,45c(ignore imm)
- stack 0: 0x860
8855	 18A	PUSH2	0060	 	 
- stack 1: 0x860
- stack 0: 0x60
8856	 18D	MLOAD		 	  ;; # read from x3
- stack 1: 0x860
- stack 0: 0x3001
8857	 18E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x860
- stack 1: 0x3001
- stack 0: 0xFFFFFFFF
8858	 193	AND		 	  ;; # mask to 32 bits
- stack 1: 0x860
- stack 0: 0x3001
8859	 194	PUSH2	03A0	 	 
- stack 2: 0x860
- stack 1: 0x3001
- stack 0: 0x3A0
8860	 197	MLOAD		 	  ;; # read from x29
- stack 2: 0x860
- stack 1: 0x3001
- stack 0: 0x3001
8861	 198	PUSH4	FFFFFFFF	 	 
- stack 3: 0x860
- stack 2: 0x3001
- stack 1: 0x3001
- stack 0: 0xFFFFFFFF
8862	 19D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x860
- stack 1: 0x3001
- stack 0: 0x3001
8863	 19E	SUB		 	 
- stack 1: 0x860
- stack 0: 0x0
8864	 19F	PUSH2	01A7	 ;; _neq_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 2: 0x860
- stack 1: 0x0
- stack 0: 0x1A7
8865	 1A2	JUMPI		 	 
- stack 0: 0x860
8866	 1A3	PUSH2	01C1	 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 1: 0x860
- stack 0: 0x1C1
8867	 1A6	JUMP		 	 
- stack 0: 0x860
8868	 1C1	JUMPDEST		 ;; _neq_after_361edb64310e0bf3115f5109c1c4185c435e60822b8d01824a52f6e59d2ebb4f	 
- stack 0: 0x860
8869	 1C2	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
8870	 1C4	ADD		 	 
- stack 0: 0x864
8871	 1C5	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
8872	 1C6	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x389000104C6000204E0FFCC05FE000C0611FEEF0630000000340058063F0006
8873	 1C7	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0x389000104C6000204E0FFCC05FE000C0611FEEF0630000000340058063F0006
- stack 0: 0xF0
8874	 1C9	SHR		 	 
- stack 1: 0x864
- stack 0: 0x389
8875	 1CA	JUMP		 	 
- stack 0: 0x864
8876	 389	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,862(ignore imm)
- stack 0: 0x864
8877	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x864
- stack 0: 0x864
8878	 38B	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x389000104C6000204E0FFCC05FE000C0611FEEF0630000000340058063F0006
8879	 38C	PUSH1	E0	 	 
- stack 2: 0x864
- stack 1: 0x389000104C6000204E0FFCC05FE000C0611FEEF0630000000340058063F0006
- stack 0: 0xE0
8880	 38E	SHR		 	 
- stack 1: 0x864
- stack 0: 0x3890001
8881	 38F	PUSH2	FFFF	 	 
- stack 2: 0x864
- stack 1: 0x3890001
- stack 0: 0xFFFF
8882	 392	AND		 	 
- stack 1: 0x864
- stack 0: 0x1
8883	 393	PUSH1	01	 	 
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x1
8884	 395	SIGNEXTEND		 	 
- stack 1: 0x864
- stack 0: 0x1
8885	 396	PUSH2	0080	 	 
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x80
8886	 399	MLOAD		 	  ;; # read from x4
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x1
8887	 39A	ADD		 	  ;; # ADDI 4
- stack 1: 0x864
- stack 0: 0x2
8888	 39B	PUSH2	0080	 	 
- stack 2: 0x864
- stack 1: 0x2
- stack 0: 0x80
8889	 39E	MSTORE		 	  ;; # store to x4
- stack 0: 0x864
8890	 39F	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
8891	 3A1	ADD		 	 
- stack 0: 0x868
8892	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
8893	 3A3	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x4C6000204E0FFCC05FE000C0611FEEF0630000000340058063F000606910018
8894	 3A4	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0x4C6000204E0FFCC05FE000C0611FEEF0630000000340058063F000606910018
- stack 0: 0xF0
8895	 3A6	SHR		 	 
- stack 1: 0x868
- stack 0: 0x4C6
8896	 3A7	JUMP		 	 
- stack 0: 0x868
8897	 4C6	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x868
8898	 4C7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x868
- stack 0: 0x868
8899	 4C8	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x4C6000204E0FFCC05FE000C0611FEEF0630000000340058063F000606910018
8900	 4C9	PUSH1	E0	 	 
- stack 2: 0x868
- stack 1: 0x4C6000204E0FFCC05FE000C0611FEEF0630000000340058063F000606910018
- stack 0: 0xE0
8901	 4CB	SHR		 	 
- stack 1: 0x868
- stack 0: 0x4C60002
8902	 4CC	PUSH2	FFFF	 	 
- stack 2: 0x868
- stack 1: 0x4C60002
- stack 0: 0xFFFF
8903	 4CF	AND		 	 
- stack 1: 0x868
- stack 0: 0x2
8904	 4D0	PUSH1	01	 	 
- stack 2: 0x868
- stack 1: 0x2
- stack 0: 0x1
8905	 4D2	SIGNEXTEND		 	 
- stack 1: 0x868
- stack 0: 0x2
8906	 4D3	PUSH2	00A0	 	 
- stack 2: 0x868
- stack 1: 0x2
- stack 0: 0xA0
8907	 4D6	MSTORE		 	  ;; # store to x5
- stack 0: 0x868
8908	 4D7	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
8909	 4D9	ADD		 	 
- stack 0: 0x86C
8910	 4DA	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
8911	 4DB	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x4E0FFCC05FE000C0611FEEF0630000000340058063F00060691001800210001
8912	 4DC	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0x4E0FFCC05FE000C0611FEEF0630000000340058063F00060691001800210001
- stack 0: 0xF0
8913	 4DE	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x4E0
8914	 4DF	JUMP		 	 
- stack 0: 0x86C
8915	 4E0	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x86C
8916	 4E1	PUSH2	0080	 	 
- stack 1: 0x86C
- stack 0: 0x80
8917	 4E4	MLOAD		 	  ;; # read from x4
- stack 1: 0x86C
- stack 0: 0x2
8918	 4E5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x86C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8919	 4EA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x86C
- stack 0: 0x2
8920	 4EB	PUSH2	00A0	 	 
- stack 2: 0x86C
- stack 1: 0x2
- stack 0: 0xA0
8921	 4EE	MLOAD		 	  ;; # read from x5
- stack 2: 0x86C
- stack 1: 0x2
- stack 0: 0x2
8922	 4EF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x86C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8923	 4F4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x86C
- stack 1: 0x2
- stack 0: 0x2
8924	 4F5	SUB		 	 
- stack 1: 0x86C
- stack 0: 0x0
8925	 4F6	PUSH2	04FE	 ;; _neq_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 2: 0x86C
- stack 1: 0x0
- stack 0: 0x4FE
8926	 4F9	JUMPI		 	 
- stack 0: 0x86C
8927	 4FA	PUSH2	0518	 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 1: 0x86C
- stack 0: 0x518
8928	 4FD	JUMP		 	 
- stack 0: 0x86C
8929	 518	JUMPDEST		 ;; _neq_after_c5a0aff7ba37aea9b4551a538c522b756460c3da206287e6421cdcf700c64592	 
- stack 0: 0x86C
8930	 519	PUSH1	04	 	 
- stack 1: 0x86C
- stack 0: 0x4
8931	 51B	ADD		 	 
- stack 0: 0x870
8932	 51C	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
8933	 51D	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x5FE000C0611FEEF0630000000340058063F000606910018002100010034F8C8
8934	 51E	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0x5FE000C0611FEEF0630000000340058063F000606910018002100010034F8C8
- stack 0: 0xF0
8935	 520	SHR		 	 
- stack 1: 0x870
- stack 0: 0x5FE
8936	 521	JUMP		 	 
- stack 0: 0x870
8937	 5FE	JUMPDEST		 ;; __riscvimpl_LUI_c537	  ;; # instr: lui a0,0xc(ignore imm)
- stack 0: 0x870
8938	 5FF	PUSH4	0000c000	 	 
- stack 1: 0x870
- stack 0: 0xC000
8939	 604	PUSH2	0140	 	 
- stack 2: 0x870
- stack 1: 0xC000
- stack 0: 0x140
8940	 607	MSTORE		 	  ;; # store to x10
- stack 0: 0x870
8941	 608	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
8942	 60A	ADD		 	 
- stack 0: 0x874
8943	 60B	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
8944	 60C	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x611FEEF0630000000340058063F000606910018002100010034F8C800530042
8945	 60D	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0x611FEEF0630000000340058063F000606910018002100010034F8C800530042
- stack 0: 0xF0
8946	 60F	SHR		 	 
- stack 1: 0x874
- stack 0: 0x611
8947	 610	JUMP		 	 
- stack 0: 0x874
8948	 611	JUMPDEST		 ;; __riscvimpl_ADDI_10_10_0	  ;; # instr: addi a0,a0,-273(ignore imm)
- stack 0: 0x874
8949	 612	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x874
- stack 0: 0x874
8950	 613	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x611FEEF0630000000340058063F000606910018002100010034F8C800530042
8951	 614	PUSH1	E0	 	 
- stack 2: 0x874
- stack 1: 0x611FEEF0630000000340058063F000606910018002100010034F8C800530042
- stack 0: 0xE0
8952	 616	SHR		 	 
- stack 1: 0x874
- stack 0: 0x611FEEF
8953	 617	PUSH2	FFFF	 	 
- stack 2: 0x874
- stack 1: 0x611FEEF
- stack 0: 0xFFFF
8954	 61A	AND		 	 
- stack 1: 0x874
- stack 0: 0xFEEF
8955	 61B	PUSH1	01	 	 
- stack 2: 0x874
- stack 1: 0xFEEF
- stack 0: 0x1
8956	 61D	SIGNEXTEND		 	 
- stack 1: 0x874
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEF
8957	 61E	PUSH2	0140	 	 
- stack 2: 0x874
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEF
- stack 0: 0x140
8958	 621	MLOAD		 	  ;; # read from x10
- stack 2: 0x874
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEF
- stack 0: 0xC000
8959	 622	ADD		 	  ;; # ADDI 10
- stack 1: 0x874
- stack 0: 0xBEEF
8960	 623	PUSH2	0140	 	 
- stack 2: 0x874
- stack 1: 0xBEEF
- stack 0: 0x140
8961	 626	MSTORE		 	  ;; # store to x10
- stack 0: 0x874
8962	 627	PUSH1	04	 	 
- stack 1: 0x874
- stack 0: 0x4
8963	 629	ADD		 	 
- stack 0: 0x878
8964	 62A	DUP1		 	  ;; # executing pc
- stack 1: 0x878
- stack 0: 0x878
8965	 62B	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x630000000340058063F000606910018002100010034F8C80053004200660000
8966	 62C	PUSH1	F0	 	 
- stack 2: 0x878
- stack 1: 0x630000000340058063F000606910018002100010034F8C80053004200660000
- stack 0: 0xF0
8967	 62E	SHR		 	 
- stack 1: 0x878
- stack 0: 0x630
8968	 62F	JUMP		 	 
- stack 0: 0x878
8969	 630	JUMPDEST		 ;; __riscvimpl_AUIPC_97050000	  ;; # instr: auipc a1,0x0(ignore imm)
- stack 0: 0x878
8970	 631	DUP1		 	 
- stack 1: 0x878
- stack 0: 0x878
8971	 632	PUSH2	0160	 	 
- stack 2: 0x878
- stack 1: 0x878
- stack 0: 0x160
8972	 635	MSTORE		 	  ;; # store to x11
- stack 0: 0x878
8973	 636	PUSH1	04	 	 
- stack 1: 0x878
- stack 0: 0x4
8974	 638	ADD		 	 
- stack 0: 0x87C
8975	 639	DUP1		 	  ;; # executing pc
- stack 1: 0x87C
- stack 0: 0x87C
8976	 63A	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x340058063F000606910018002100010034F8C8005300420066000006D10001
8977	 63B	PUSH1	F0	 	 
- stack 2: 0x87C
- stack 1: 0x340058063F000606910018002100010034F8C8005300420066000006D10001
- stack 0: 0xF0
8978	 63D	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x34
8979	 63E	JUMP		 	 
- stack 0: 0x87C
8980	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1856(ignore imm)
- stack 0: 0x87C
8981	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x87C
- stack 0: 0x87C
8982	 36	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x340058063F000606910018002100010034F8C8005300420066000006D10001
8983	 37	PUSH1	E0	 	 
- stack 2: 0x87C
- stack 1: 0x340058063F000606910018002100010034F8C8005300420066000006D10001
- stack 0: 0xE0
8984	 39	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x340058
8985	 3A	PUSH2	FFFF	 	 
- stack 2: 0x87C
- stack 1: 0x340058
- stack 0: 0xFFFF
8986	 3D	AND		 	 
- stack 1: 0x87C
- stack 0: 0x58
8987	 3E	PUSH1	01	 	 
- stack 2: 0x87C
- stack 1: 0x58
- stack 0: 0x1
8988	 40	SIGNEXTEND		 	 
- stack 1: 0x87C
- stack 0: 0x58
8989	 41	PUSH2	0160	 	 
- stack 2: 0x87C
- stack 1: 0x58
- stack 0: 0x160
8990	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x87C
- stack 1: 0x58
- stack 0: 0x878
8991	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x87C
- stack 0: 0x8D0
8992	 46	PUSH2	0160	 	 
- stack 2: 0x87C
- stack 1: 0x8D0
- stack 0: 0x160
8993	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x87C
8994	 4A	PUSH1	04	 	 
- stack 1: 0x87C
- stack 0: 0x4
8995	 4C	ADD		 	 
- stack 0: 0x880
8996	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
8997	 4E	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x63F000606910018002100010034F8C8005300420066000006D1000100210001
8998	 4F	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0x63F000606910018002100010034F8C8005300420066000006D1000100210001
- stack 0: 0xF0
8999	 51	SHR		 	 
- stack 1: 0x880
- stack 0: 0x63F
9000	 52	JUMP		 	 
- stack 0: 0x880
9001	 63F	JUMPDEST		 ;; __riscvimpl_SH_0_11_10	  ;; # instr: sh a0,6(a1)(ignore imm)
- stack 0: 0x880
9002	 640	PUSH2	0160	 	 
- stack 1: 0x880
- stack 0: 0x160
9003	 643	MLOAD		 	  ;; # read from x11
- stack 1: 0x880
- stack 0: 0x8D0
9004	 644	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x880
- stack 1: 0x8D0
- stack 0: 0x880
9005	 645	MLOAD		 	 
- stack 2: 0x880
- stack 1: 0x8D0
- stack 0: 0x63F000606910018002100010034F8C8005300420066000006D1000100210001
9006	 646	PUSH1	E0	 	 
- stack 3: 0x880
- stack 2: 0x8D0
- stack 1: 0x63F000606910018002100010034F8C8005300420066000006D1000100210001
- stack 0: 0xE0
9007	 648	SHR		 	 
- stack 2: 0x880
- stack 1: 0x8D0
- stack 0: 0x63F0006
9008	 649	PUSH2	FFFF	 	 
- stack 3: 0x880
- stack 2: 0x8D0
- stack 1: 0x63F0006
- stack 0: 0xFFFF
9009	 64C	AND		 	 
- stack 2: 0x880
- stack 1: 0x8D0
- stack 0: 0x6
9010	 64D	PUSH1	01	 	 
- stack 3: 0x880
- stack 2: 0x8D0
- stack 1: 0x6
- stack 0: 0x1
9011	 64F	SIGNEXTEND		 	 
- stack 2: 0x880
- stack 1: 0x8D0
- stack 0: 0x6
9012	 650	ADD		 	 
- stack 1: 0x880
- stack 0: 0x8D6
9013	 651	PUSH4	FFFFFFFF	 	 
- stack 2: 0x880
- stack 1: 0x8D6
- stack 0: 0xFFFFFFFF
9014	 656	AND		 	  ;; # mask to 32 bits
- stack 1: 0x880
- stack 0: 0x8D6
9015	 657	PUSH1	02	 	 
- stack 2: 0x880
- stack 1: 0x8D6
- stack 0: 0x2
9016	 659	XOR		 	 
- stack 1: 0x880
- stack 0: 0x8D4
9017	 65A	DUP1		 	 
- stack 2: 0x880
- stack 1: 0x8D4
- stack 0: 0x8D4
9018	 65B	MLOAD		 	  ;; # fetch
- stack 2: 0x880
- stack 1: 0x8D4
- stack 0: 0x112112230010011A00A0AA03098567800000000000000000000000000000000
9019	 65C	PUSH32	0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x880
- stack 2: 0x8D4
- stack 1: 0x112112230010011A00A0AA03098567800000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
9020	 67D	AND		 	 
- stack 2: 0x880
- stack 1: 0x8D4
- stack 0: 0x112230010011A00A0AA03098567800000000000000000000000000000000
9021	 67E	PUSH2	0140	 	 
- stack 3: 0x880
- stack 2: 0x8D4
- stack 1: 0x112230010011A00A0AA03098567800000000000000000000000000000000
- stack 0: 0x140
9022	 681	MLOAD		 	  ;; # read from x10
- stack 3: 0x880
- stack 2: 0x8D4
- stack 1: 0x112230010011A00A0AA03098567800000000000000000000000000000000
- stack 0: 0xBEEF
9023	 682	PUSH1	F0	 	 
- stack 4: 0x880
- stack 3: 0x8D4
- stack 2: 0x112230010011A00A0AA03098567800000000000000000000000000000000
- stack 1: 0xBEEF
- stack 0: 0xF0
9024	 684	SHL		 	 
- stack 3: 0x880
- stack 2: 0x8D4
- stack 1: 0x112230010011A00A0AA03098567800000000000000000000000000000000
- stack 0: 0xBEEF000000000000000000000000000000000000000000000000000000000000
9025	 685	ADD		 	 
- stack 2: 0x880
- stack 1: 0x8D4
- stack 0: 0xBEEF112230010011A00A0AA03098567800000000000000000000000000000000
9026	 686	SWAP1		 	 
- stack 2: 0x880
- stack 1: 0xBEEF112230010011A00A0AA03098567800000000000000000000000000000000
- stack 0: 0x8D4
9027	 687	MSTORE		 	 
- stack 0: 0x880
9028	 688	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
9029	 68A	ADD		 	 
- stack 0: 0x884
9030	 68B	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
9031	 68C	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x6910018002100010034F8C8005300420066000006D10001002100010034F8CC
9032	 68D	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0x6910018002100010034F8C8005300420066000006D10001002100010034F8CC
- stack 0: 0xF0
9033	 68F	SHR		 	 
- stack 1: 0x884
- stack 0: 0x691
9034	 690	JUMP		 	 
- stack 0: 0x884
9035	 691	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x884
9036	 692	PUSH1	00	 	 
- stack 1: 0x884
- stack 0: 0x0
9037	 694	PUSH4	FFFFFFFF	 	 
- stack 2: 0x884
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
9038	 699	AND		 	  ;; # mask to 32 bits
- stack 1: 0x884
- stack 0: 0x0
9039	 69A	PUSH2	0380	 	 
- stack 2: 0x884
- stack 1: 0x0
- stack 0: 0x380
9040	 69D	MLOAD		 	  ;; # read from x28
- stack 2: 0x884
- stack 1: 0x0
- stack 0: 0x17
9041	 69E	PUSH4	FFFFFFFF	 	 
- stack 3: 0x884
- stack 2: 0x0
- stack 1: 0x17
- stack 0: 0xFFFFFFFF
9042	 6A3	AND		 	  ;; # mask to 32 bits
- stack 2: 0x884
- stack 1: 0x0
- stack 0: 0x17
9043	 6A4	SUB		 	 
- stack 1: 0x884
- stack 0: 0x17
9044	 6A5	PUSH2	06AD	 ;; _neq_5b97c82965e25de142208b8076644a8832e1ae2f6b3eca701c256bc1986c050a	 
- stack 2: 0x884
- stack 1: 0x17
- stack 0: 0x6AD
9045	 6A8	JUMPI		 	 
- stack 0: 0x884
9046	 6AD	JUMPDEST		 ;; _neq_5b97c82965e25de142208b8076644a8832e1ae2f6b3eca701c256bc1986c050a	 
- stack 0: 0x884
9047	 6AE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x884
- stack 0: 0x884
9048	 6AF	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x6910018002100010034F8C8005300420066000006D10001002100010034F8CC
9049	 6B0	PUSH1	E0	 	 
- stack 2: 0x884
- stack 1: 0x6910018002100010034F8C8005300420066000006D10001002100010034F8CC
- stack 0: 0xE0
9050	 6B2	SHR		 	 
- stack 1: 0x884
- stack 0: 0x6910018
9051	 6B3	PUSH2	FFFF	 	 
- stack 2: 0x884
- stack 1: 0x6910018
- stack 0: 0xFFFF
9052	 6B6	AND		 	 
- stack 1: 0x884
- stack 0: 0x18
9053	 6B7	PUSH1	01	 	 
- stack 2: 0x884
- stack 1: 0x18
- stack 0: 0x1
9054	 6B9	SIGNEXTEND		 	 
- stack 1: 0x884
- stack 0: 0x18
9055	 6BA	ADD		 	 
- stack 0: 0x89C
9056	 6BB	PUSH4	FFFFFFFF	 	 
- stack 1: 0x89C
- stack 0: 0xFFFFFFFF
9057	 6C0	AND		 	  ;; # mask to 32 bits
- stack 0: 0x89C
9058	 6C1	DUP1		 	  ;; # executing pc
- stack 1: 0x89C
- stack 0: 0x89C
9059	 6C2	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0x2100010034F8CC005300420066000006DC0000006600000000000000000000
9060	 6C3	PUSH1	F0	 	 
- stack 2: 0x89C
- stack 1: 0x2100010034F8CC005300420066000006DC0000006600000000000000000000
- stack 0: 0xF0
9061	 6C5	SHR		 	 
- stack 1: 0x89C
- stack 0: 0x21
9062	 6C6	JUMP		 	 
- stack 0: 0x89C
9063	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x89C
9064	 22	PUSH4	00001000	 	 
- stack 1: 0x89C
- stack 0: 0x1000
9065	 27	PUSH2	0160	 	 
- stack 2: 0x89C
- stack 1: 0x1000
- stack 0: 0x160
9066	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x89C
9067	 2B	PUSH1	04	 	 
- stack 1: 0x89C
- stack 0: 0x4
9068	 2D	ADD		 	 
- stack 0: 0x8A0
9069	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x8A0
- stack 0: 0x8A0
9070	 2F	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x34F8CC005300420066000006DC000000660000000000000000000000000000
9071	 30	PUSH1	F0	 	 
- stack 2: 0x8A0
- stack 1: 0x34F8CC005300420066000006DC000000660000000000000000000000000000
- stack 0: 0xF0
9072	 32	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x34
9073	 33	JUMP		 	 
- stack 0: 0x8A0
9074	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1856(ignore imm)
- stack 0: 0x8A0
9075	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A0
- stack 0: 0x8A0
9076	 36	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x34F8CC005300420066000006DC000000660000000000000000000000000000
9077	 37	PUSH1	E0	 	 
- stack 2: 0x8A0
- stack 1: 0x34F8CC005300420066000006DC000000660000000000000000000000000000
- stack 0: 0xE0
9078	 39	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x34F8CC
9079	 3A	PUSH2	FFFF	 	 
- stack 2: 0x8A0
- stack 1: 0x34F8CC
- stack 0: 0xFFFF
9080	 3D	AND		 	 
- stack 1: 0x8A0
- stack 0: 0xF8CC
9081	 3E	PUSH1	01	 	 
- stack 2: 0x8A0
- stack 1: 0xF8CC
- stack 0: 0x1
9082	 40	SIGNEXTEND		 	 
- stack 1: 0x8A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8CC
9083	 41	PUSH2	0160	 	 
- stack 2: 0x8A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8CC
- stack 0: 0x160
9084	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x8A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8CC
- stack 0: 0x1000
9085	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x8A0
- stack 0: 0x8CC
9086	 46	PUSH2	0160	 	 
- stack 2: 0x8A0
- stack 1: 0x8CC
- stack 0: 0x160
9087	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x8A0
9088	 4A	PUSH1	04	 	 
- stack 1: 0x8A0
- stack 0: 0x4
9089	 4C	ADD		 	 
- stack 0: 0x8A4
9090	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x8A4
- stack 0: 0x8A4
9091	 4E	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0x5300420066000006DC0000006600000000000000000000000000006574796D
9092	 4F	PUSH1	F0	 	 
- stack 2: 0x8A4
- stack 1: 0x5300420066000006DC0000006600000000000000000000000000006574796D
- stack 0: 0xF0
9093	 51	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0x53
9094	 52	JUMP		 	 
- stack 0: 0x8A4
9095	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x8A4
9096	 54	PUSH4	00042000	 	 
- stack 1: 0x8A4
- stack 0: 0x42000
9097	 59	PUSH2	0140	 	 
- stack 2: 0x8A4
- stack 1: 0x42000
- stack 0: 0x140
9098	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x8A4
9099	 5D	PUSH1	04	 	 
- stack 1: 0x8A4
- stack 0: 0x4
9100	 5F	ADD		 	 
- stack 0: 0x8A8
9101	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x8A8
- stack 0: 0x8A8
9102	 61	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0x66000006DC0000006600000000000000000000000000006574796D00007473
9103	 62	PUSH1	F0	 	 
- stack 2: 0x8A8
- stack 1: 0x66000006DC0000006600000000000000000000000000006574796D00007473
- stack 0: 0xF0
9104	 64	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0x66
9105	 65	JUMP		 	 
- stack 0: 0x8A8
9106	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x8A8
9107	 67	PUSH2	0140	 	 
- stack 1: 0x8A8
- stack 0: 0x140
9108	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x8A8
- stack 0: 0x42000
9109	 6B	PUSH2	0075	 ;; _ecall_4fb38844d03556948b13ad6e5ad6d3b3469e437d704a9492b730737587aa4784	 
- stack 2: 0x8A8
- stack 1: 0x42000
- stack 0: 0x75
9110	 6E	JUMPI		 	 
- stack 0: 0x8A8
9111	 75	JUMPDEST		 ;; _ecall_4fb38844d03556948b13ad6e5ad6d3b3469e437d704a9492b730737587aa4784	 
- stack 0: 0x8A8
9112	 76	PUSH1	04	 	 
- stack 1: 0x8A8
- stack 0: 0x4
9113	 78	PUSH2	0160	 	 
- stack 2: 0x8A8
- stack 1: 0x4
- stack 0: 0x160
9114	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x8A8
- stack 1: 0x4
- stack 0: 0x8CC
9115	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x8A8
9116	 7D	PUSH1	04	 	 
- stack 1: 0x8A8
- stack 0: 0x4
9117	 7F	ADD		 	 
- stack 0: 0x8AC
9118	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x8AC
- stack 0: 0x8AC
9119	 81	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0x6DC0000006600000000000000000000000000006574796D0000747300525245
9120	 82	PUSH1	F0	 	 
- stack 2: 0x8AC
- stack 1: 0x6DC0000006600000000000000000000000000006574796D0000747300525245
- stack 0: 0xF0
9121	 84	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0x6DC
9122	 85	JUMP		 	 
- stack 0: 0x8AC
9123	 6DC	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x8AC
9124	 6DD	PUSH4	00000000	 	 
- stack 1: 0x8AC
- stack 0: 0x0
9125	 6E2	PUSH2	0140	 	 
- stack 2: 0x8AC
- stack 1: 0x0
- stack 0: 0x140
9126	 6E5	MSTORE		 	  ;; # store to x10
- stack 0: 0x8AC
9127	 6E6	PUSH1	04	 	 
- stack 1: 0x8AC
- stack 0: 0x4
9128	 6E8	ADD		 	 
- stack 0: 0x8B0
9129	 6E9	DUP1		 	  ;; # executing pc
- stack 1: 0x8B0
- stack 0: 0x8B0
9130	 6EA	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x6600000000000000000000000000006574796D000074730052524500004B4F
9131	 6EB	PUSH1	F0	 	 
- stack 2: 0x8B0
- stack 1: 0x6600000000000000000000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
9132	 6ED	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x66
9133	 6EE	JUMP		 	 
- stack 0: 0x8B0
9134	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x8B0
9135	 67	PUSH2	0140	 	 
- stack 1: 0x8B0
- stack 0: 0x140
9136	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x8B0
- stack 0: 0x0
9137	 6B	PUSH2	0075	 ;; _ecall_4fb38844d03556948b13ad6e5ad6d3b3469e437d704a9492b730737587aa4784	 
- stack 2: 0x8B0
- stack 1: 0x0
- stack 0: 0x75
9138	 6E	JUMPI		 	 
- stack 0: 0x8B0
9139	 6F	PUSH1	20	 	 
- stack 1: 0x8B0
- stack 0: 0x20
9140	 71	PUSH2	0160	 	 
- stack 2: 0x8B0
- stack 1: 0x20
- stack 0: 0x160
9141	 74	RETURN		 	 
Final bytecode length; 3028
Returned: 00000000000000000000000000000000000000000000000000000000000008cc
gasUsed : 31125
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424,428,42c
** HOT: 430 - range: 430,434,438,43c,440,444,448,44c,450,454
** HOT: 458 - range: 458,45c,460,464,468,46c,470,474,478,47c
** HOT: 480 - range: 480,484,488,48c,490,494,498,49c,4a0,4a4
** HOT: 4a8 - range: 4a8,4ac,4b0,4b4,4b8,4bc,4c0,4c4
** HOT: 4c8 - range: 4c8,4cc,4d0,4d4,4d8,4dc,4e0,4e4,4e8,4ec
** HOT: 4f0 - range: 4f0,4f4,4f8,4fc,500,504,508,50c,510,514
** HOT: 518 - range: 518,51c,520,524,528,52c,530,534,538,53c
** HOT: 540 - range: 540,544,548,54c,550,554,558,55c,560,564,568
** HOT: 56c - range: 56c,570,574,578,57c,580,584,588,58c,590,594,598,59c
** HOT: 5a0 - range: 5a0,5a4,5a8,5ac,5b0,5b4,5b8,5bc,5c0,5c4,5c8
** HOT: 5a8 - range: 5a8,5ac,5b0,5b4,5b8,5bc,5c0,5c4,5c8
** HOT: 5cc - range: 5cc,5d0,5d4
** HOT: 5d8 - range: 5d8,5dc,5e0,5e4,5e8,5ec,5f0,5f4,5f8,5fc,600,604
** HOT: 5e0 - range: 5e0,5e4,5e8,5ec,5f0,5f4,5f8,5fc,600,604
** HOT: 608 - range: 608,60c,610
** HOT: 614 - range: 614,618,61c,620,624,628,62c,630,634,638,63c,640,644
** HOT: 61c - range: 61c,620,624,628,62c,630,634,638,63c,640,644
** HOT: 648 - range: 648,64c,650
** HOT: 654 - range: 654,658,65c,660,664,668,66c,670,674,678,67c,680
** HOT: 65c - range: 65c,660,664,668,66c,670,674,678,67c,680
** HOT: 684 - range: 684,688,68c
** HOT: 690 - range: 690,694,698,69c,6a0,6a4,6a8,6ac,6b0,6b4,6b8,6bc,6c0
** HOT: 698 - range: 698,69c,6a0,6a4,6a8,6ac,6b0,6b4,6b8,6bc,6c0
** HOT: 6c4 - range: 6c4,6c8,6cc
** HOT: 6d0 - range: 6d0,6d4,6d8,6dc,6e0,6e4,6e8,6ec,6f0,6f4,6f8,6fc,700
** HOT: 6d8 - range: 6d8,6dc,6e0,6e4,6e8,6ec,6f0,6f4,6f8,6fc,700
** HOT: 704 - range: 704,708,70c
** HOT: 710 - range: 710,714,718,71c,720,724,728,72c,730,734,738
** HOT: 718 - range: 718,71c,720,724,728,72c,730,734,738
** HOT: 73c - range: 73c,740,744
** HOT: 748 - range: 748,74c,750,754,758,75c,760,764,768,76c,770,774
** HOT: 750 - range: 750,754,758,75c,760,764,768,76c,770,774
** HOT: 778 - range: 778,77c,780
** HOT: 784 - range: 784,788,78c,790,794,798,79c,7a0,7a4,7a8,7ac,7b0,7b4
** HOT: 78c - range: 78c,790,794,798,79c,7a0,7a4,7a8,7ac,7b0,7b4
** HOT: 7b8 - range: 7b8,7bc,7c0
** HOT: 7c4 - range: 7c4,7c8,7cc,7d0,7d4,7d8,7dc,7e0,7e4,7e8
** HOT: 7cc - range: 7cc,7d0,7d4,7d8,7dc,7e0,7e4,7e8
** HOT: 7ec - range: 7ec,7f0,7f4
** HOT: 7f8 - range: 7f8,7fc,800,804,808,80c,810,814,818,81c,820
** HOT: 800 - range: 800,804,808,80c,810,814,818,81c,820
** HOT: 824 - range: 824,828,82c
** HOT: 830 - range: 830,834,838,83c,840,844,848,84c,850,854,858,85c,860
** HOT: 838 - range: 838,83c,840,844,848,84c,850,854,858,85c,860
** HOT: 864 - range: 864,868,86c
** HOT: 870 - range: 870,874,878,87c,880,884
