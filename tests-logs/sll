Running in EVM:
0	 0	PUSH4	05C0	 	 
- stack 0: 0x5C0
1	 5	PUSH2	055C	 ;; _rambegin	 
- stack 1: 0x5C0
- stack 0: 0x55C
2	 8	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0x55C
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x5C0
- stack 0: 0x55D
4	 B	PUSH2	0400	 	 
- stack 2: 0x5C0
- stack 1: 0x55D
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100010034F9B000530042006600000086000100A0000000BA000000DA0001
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100010034F9B000530042006600000086000100A0000000BA000000DA0001
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00001000	 	 
- stack 1: 0x400
- stack 0: 0x1000
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x1000
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F9B000530042006600000086000100A0000000BA000000DA000100F40002
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34F9B000530042006600000086000100A0000000BA000000DA000100F40002
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1616(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F9B000530042006600000086000100A0000000BA000000DA000100F40002
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34F9B000530042006600000086000100A0000000BA000000DA000100F40002
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34F9B0
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x34F9B0
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0xF9B0
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0xF9B0
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9B0
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9B0
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9B0
- stack 0: 0x1000
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x9B0
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x9B0
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000100A0000000BA000000DA000100F40002010E0558
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000100A0000000BA000000DA000100F40002010E0558
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000100A0000000BA000000DA000100F40002010E055800860001
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000100A0000000BA000000DA000100F40002010E055800860001
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_566db1eefd43abf29e02015902c1b5bbd2fa6d88fea7bf3d8e6a74e79a9af66f	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_566db1eefd43abf29e02015902c1b5bbd2fa6d88fea7bf3d8e6a74e79a9af66f	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x9B0
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000100A0000000BA000000DA000100F40002010E05580086000100A00001
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000100A0000000BA000000DA000100F40002010E05580086000100A00001
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000100A0000000BA000000DA000100F40002010E05580086000100A00001
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000100A0000000BA000000DA000100F40002010E05580086000100A00001
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860001
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860001
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x1
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x1
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x1
84	 93	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x1
- stack 0: 0x20
85	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000DA000100F40002010E05580086000100A0000100BA0000
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000DA000100F40002010E05580086000100A0000100BA0000
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000DA000100F40002010E05580086000100A0000100BA0000
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000DA000100F40002010E05580086000100A0000100BA0000
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	0040	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x40
103	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x414
104	 B1	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
105	 B3	ADD		 	 
- stack 0: 0x418
106	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
107	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000000DA000100F40002010E05580086000100A0000100BA000000DA0002
108	 B6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBA000000DA000100F40002010E05580086000100A0000100BA000000DA0002
- stack 0: 0xF0
109	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA
110	 B9	JUMP		 	 
- stack 0: 0x418
111	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x418
112	 BB	PUSH2	0020	 	 
- stack 1: 0x418
- stack 0: 0x20
113	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x418
- stack 0: 0x1
114	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x418
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
115	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x418
- stack 0: 0x1
116	 C5	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0x1
- stack 0: 0x40
117	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x418
- stack 1: 0x1
- stack 0: 0x0
118	 C9	PUSH1	1F	 	 
- stack 3: 0x418
- stack 2: 0x1
- stack 1: 0x0
- stack 0: 0x1F
119	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x418
- stack 1: 0x1
- stack 0: 0x0
120	 CC	SHL		 	 
- stack 1: 0x418
- stack 0: 0x1
121	 CD	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0x1
- stack 0: 0x60
122	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
123	 D1	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
124	 D3	ADD		 	 
- stack 0: 0x41C
125	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
126	 D5	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xDA000100F40002010E05580086000100A0000100BA000000DA000200F40003
127	 D6	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xDA000100F40002010E05580086000100A0000100BA000000DA000200F40003
- stack 0: 0xF0
128	 D8	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xDA
129	 D9	JUMP		 	 
- stack 0: 0x41C
130	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x41C
131	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
132	 DC	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xDA000100F40002010E05580086000100A0000100BA000000DA000200F40003
133	 DD	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xDA000100F40002010E05580086000100A0000100BA000000DA000200F40003
- stack 0: 0xE0
134	 DF	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xDA0001
135	 E0	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xDA0001
- stack 0: 0xFFFF
136	 E3	AND		 	 
- stack 1: 0x41C
- stack 0: 0x1
137	 E4	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0x1
138	 E6	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x1
139	 E7	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0x1
- stack 0: 0x3A0
140	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
141	 EB	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
142	 ED	ADD		 	 
- stack 0: 0x420
143	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
144	 EF	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF40002010E05580086000100A0000100BA000000DA000200F40003010E0540
145	 F0	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xF40002010E05580086000100A0000100BA000000DA000200F40003010E0540
- stack 0: 0xF0
146	 F2	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF4
147	 F3	JUMP		 	 
- stack 0: 0x420
148	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x420
149	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
150	 F6	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF40002010E05580086000100A0000100BA000000DA000200F40003010E0540
151	 F7	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0xF40002010E05580086000100A0000100BA000000DA000200F40003010E0540
- stack 0: 0xE0
152	 F9	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF40002
153	 FA	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0xF40002
- stack 0: 0xFFFF
154	 FD	AND		 	 
- stack 1: 0x420
- stack 0: 0x2
155	 FE	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x1
156	 100	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0x2
157	 101	PUSH2	0380	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x380
158	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x420
159	 105	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
160	 107	ADD		 	 
- stack 0: 0x424
161	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
162	 109	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x10E05580086000100A0000100BA000000DA000200F40003010E054000860001
163	 10A	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x10E05580086000100A0000100BA000000DA000200F40003010E054000860001
- stack 0: 0xF0
164	 10C	SHR		 	 
- stack 1: 0x424
- stack 0: 0x10E
165	 10D	JUMP		 	 
- stack 0: 0x424
166	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x424
167	 10F	PUSH2	0060	 	 
- stack 1: 0x424
- stack 0: 0x60
168	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x424
- stack 0: 0x1
169	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
170	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x1
171	 119	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0x1
- stack 0: 0x3A0
172	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x424
- stack 1: 0x1
- stack 0: 0x1
173	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
174	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0x1
- stack 0: 0x1
175	 123	SUB		 	 
- stack 1: 0x424
- stack 0: 0x0
176	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x12C
177	 127	JUMPI		 	 
- stack 0: 0x424
178	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x424
- stack 0: 0x146
179	 12B	JUMP		 	 
- stack 0: 0x424
180	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x424
181	 147	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
182	 149	ADD		 	 
- stack 0: 0x428
183	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
184	 14B	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x86000100A0000100BA000000DA000200F40003010E05400086000100A00007
185	 14C	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x86000100A0000100BA000000DA000200F40003010E05400086000100A00007
- stack 0: 0xF0
186	 14E	SHR		 	 
- stack 1: 0x428
- stack 0: 0x86
187	 14F	JUMP		 	 
- stack 0: 0x428
188	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x428
189	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
190	 88	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x86000100A0000100BA000000DA000200F40003010E05400086000100A00007
191	 89	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0x86000100A0000100BA000000DA000200F40003010E05400086000100A00007
- stack 0: 0xE0
192	 8B	SHR		 	 
- stack 1: 0x428
- stack 0: 0x860001
193	 8C	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0x860001
- stack 0: 0xFFFF
194	 8F	AND		 	 
- stack 1: 0x428
- stack 0: 0x1
195	 90	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x1
196	 92	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0x1
197	 93	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x20
198	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x428
199	 97	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
200	 99	ADD		 	 
- stack 0: 0x42C
201	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
202	 9B	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xA0000100BA000000DA000200F40003010E05400086000100A0000700BA0000
203	 9C	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0xA0000100BA000000DA000200F40003010E05400086000100A0000700BA0000
- stack 0: 0xF0
204	 9E	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xA0
205	 9F	JUMP		 	 
- stack 0: 0x42C
206	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x42C
207	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
208	 A2	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xA0000100BA000000DA000200F40003010E05400086000100A0000700BA0000
209	 A3	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0xA0000100BA000000DA000200F40003010E05400086000100A0000700BA0000
- stack 0: 0xE0
210	 A5	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xA00001
211	 A6	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0xA00001
- stack 0: 0xFFFF
212	 A9	AND		 	 
- stack 1: 0x42C
- stack 0: 0x1
213	 AA	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x1
214	 AC	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x1
215	 AD	PUSH2	0040	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x40
216	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x42C
217	 B1	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
218	 B3	ADD		 	 
- stack 0: 0x430
219	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
220	 B5	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xBA000000DA000200F40003010E05400086000100A0000700BA000000DA0080
221	 B6	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xBA000000DA000200F40003010E05400086000100A0000700BA000000DA0080
- stack 0: 0xF0
222	 B8	SHR		 	 
- stack 1: 0x430
- stack 0: 0xBA
223	 B9	JUMP		 	 
- stack 0: 0x430
224	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x430
225	 BB	PUSH2	0020	 	 
- stack 1: 0x430
- stack 0: 0x20
226	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x430
- stack 0: 0x1
227	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
228	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x430
- stack 0: 0x1
229	 C5	PUSH2	0040	 	 
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x40
230	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x1
231	 C9	PUSH1	1F	 	 
- stack 3: 0x430
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0x1F
232	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x1
233	 CC	SHL		 	 
- stack 1: 0x430
- stack 0: 0x2
234	 CD	PUSH2	0060	 	 
- stack 2: 0x430
- stack 1: 0x2
- stack 0: 0x60
235	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x430
236	 D1	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
237	 D3	ADD		 	 
- stack 0: 0x434
238	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
239	 D5	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xDA000200F40003010E05400086000100A0000700BA000000DA008000F40004
240	 D6	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xDA000200F40003010E05400086000100A0000700BA000000DA008000F40004
- stack 0: 0xF0
241	 D8	SHR		 	 
- stack 1: 0x434
- stack 0: 0xDA
242	 D9	JUMP		 	 
- stack 0: 0x434
243	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x434
244	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
245	 DC	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xDA000200F40003010E05400086000100A0000700BA000000DA008000F40004
246	 DD	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xDA000200F40003010E05400086000100A0000700BA000000DA008000F40004
- stack 0: 0xE0
247	 DF	SHR		 	 
- stack 1: 0x434
- stack 0: 0xDA0002
248	 E0	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xDA0002
- stack 0: 0xFFFF
249	 E3	AND		 	 
- stack 1: 0x434
- stack 0: 0x2
250	 E4	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0x2
- stack 0: 0x1
251	 E6	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0x2
252	 E7	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0x2
- stack 0: 0x3A0
253	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x434
254	 EB	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
255	 ED	ADD		 	 
- stack 0: 0x438
256	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
257	 EF	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xF40003010E05400086000100A0000700BA000000DA008000F40004010E0528
258	 F0	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xF40003010E05400086000100A0000700BA000000DA008000F40004010E0528
- stack 0: 0xF0
259	 F2	SHR		 	 
- stack 1: 0x438
- stack 0: 0xF4
260	 F3	JUMP		 	 
- stack 0: 0x438
261	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x438
262	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
263	 F6	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xF40003010E05400086000100A0000700BA000000DA008000F40004010E0528
264	 F7	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xF40003010E05400086000100A0000700BA000000DA008000F40004010E0528
- stack 0: 0xE0
265	 F9	SHR		 	 
- stack 1: 0x438
- stack 0: 0xF40003
266	 FA	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xF40003
- stack 0: 0xFFFF
267	 FD	AND		 	 
- stack 1: 0x438
- stack 0: 0x3
268	 FE	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x1
269	 100	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x3
270	 101	PUSH2	0380	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x380
271	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x438
272	 105	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
273	 107	ADD		 	 
- stack 0: 0x43C
274	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
275	 109	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x10E05400086000100A0000700BA000000DA008000F40004010E052800860001
276	 10A	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x10E05400086000100A0000700BA000000DA008000F40004010E052800860001
- stack 0: 0xF0
277	 10C	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x10E
278	 10D	JUMP		 	 
- stack 0: 0x43C
279	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x43C
280	 10F	PUSH2	0060	 	 
- stack 1: 0x43C
- stack 0: 0x60
281	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x43C
- stack 0: 0x2
282	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
283	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0x2
284	 119	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0x2
- stack 0: 0x3A0
285	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x43C
- stack 1: 0x2
- stack 0: 0x2
286	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
287	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0x2
- stack 0: 0x2
288	 123	SUB		 	 
- stack 1: 0x43C
- stack 0: 0x0
289	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x12C
290	 127	JUMPI		 	 
- stack 0: 0x43C
291	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x43C
- stack 0: 0x146
292	 12B	JUMP		 	 
- stack 0: 0x43C
293	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x43C
294	 147	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
295	 149	ADD		 	 
- stack 0: 0x440
296	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
297	 14B	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x86000100A0000700BA000000DA008000F40004010E05280086000100A0000E
298	 14C	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x86000100A0000700BA000000DA008000F40004010E05280086000100A0000E
- stack 0: 0xF0
299	 14E	SHR		 	 
- stack 1: 0x440
- stack 0: 0x86
300	 14F	JUMP		 	 
- stack 0: 0x440
301	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x440
302	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
303	 88	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x86000100A0000700BA000000DA008000F40004010E05280086000100A0000E
304	 89	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0x86000100A0000700BA000000DA008000F40004010E05280086000100A0000E
- stack 0: 0xE0
305	 8B	SHR		 	 
- stack 1: 0x440
- stack 0: 0x860001
306	 8C	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0x860001
- stack 0: 0xFFFF
307	 8F	AND		 	 
- stack 1: 0x440
- stack 0: 0x1
308	 90	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0x1
- stack 0: 0x1
309	 92	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0x1
310	 93	PUSH2	0020	 	 
- stack 2: 0x440
- stack 1: 0x1
- stack 0: 0x20
311	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x440
312	 97	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
313	 99	ADD		 	 
- stack 0: 0x444
314	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
315	 9B	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xA0000700BA000000DA008000F40004010E05280086000100A0000E00BA0000
316	 9C	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xA0000700BA000000DA008000F40004010E05280086000100A0000E00BA0000
- stack 0: 0xF0
317	 9E	SHR		 	 
- stack 1: 0x444
- stack 0: 0xA0
318	 9F	JUMP		 	 
- stack 0: 0x444
319	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x444
320	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
321	 A2	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xA0000700BA000000DA008000F40004010E05280086000100A0000E00BA0000
322	 A3	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0xA0000700BA000000DA008000F40004010E05280086000100A0000E00BA0000
- stack 0: 0xE0
323	 A5	SHR		 	 
- stack 1: 0x444
- stack 0: 0xA00007
324	 A6	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0xA00007
- stack 0: 0xFFFF
325	 A9	AND		 	 
- stack 1: 0x444
- stack 0: 0x7
326	 AA	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x7
- stack 0: 0x1
327	 AC	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x7
328	 AD	PUSH2	0040	 	 
- stack 2: 0x444
- stack 1: 0x7
- stack 0: 0x40
329	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x444
330	 B1	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
331	 B3	ADD		 	 
- stack 0: 0x448
332	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
333	 B5	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xBA000000DA008000F40004010E05280086000100A0000E00BA000001500004
334	 B6	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xBA000000DA008000F40004010E05280086000100A0000E00BA000001500004
- stack 0: 0xF0
335	 B8	SHR		 	 
- stack 1: 0x448
- stack 0: 0xBA
336	 B9	JUMP		 	 
- stack 0: 0x448
337	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x448
338	 BB	PUSH2	0020	 	 
- stack 1: 0x448
- stack 0: 0x20
339	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x448
- stack 0: 0x1
340	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
341	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0x1
342	 C5	PUSH2	0040	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x40
343	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x7
344	 C9	PUSH1	1F	 	 
- stack 3: 0x448
- stack 2: 0x1
- stack 1: 0x7
- stack 0: 0x1F
345	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x7
346	 CC	SHL		 	 
- stack 1: 0x448
- stack 0: 0x80
347	 CD	PUSH2	0060	 	 
- stack 2: 0x448
- stack 1: 0x80
- stack 0: 0x60
348	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x448
349	 D1	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
350	 D3	ADD		 	 
- stack 0: 0x44C
351	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
352	 D5	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xDA008000F40004010E05280086000100A0000E00BA00000150000400F40005
353	 D6	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0xDA008000F40004010E05280086000100A0000E00BA00000150000400F40005
- stack 0: 0xF0
354	 D8	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xDA
355	 D9	JUMP		 	 
- stack 0: 0x44C
356	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x44C
357	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
358	 DC	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xDA008000F40004010E05280086000100A0000E00BA00000150000400F40005
359	 DD	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0xDA008000F40004010E05280086000100A0000E00BA00000150000400F40005
- stack 0: 0xE0
360	 DF	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xDA0080
361	 E0	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0xDA0080
- stack 0: 0xFFFF
362	 E3	AND		 	 
- stack 1: 0x44C
- stack 0: 0x80
363	 E4	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0x80
- stack 0: 0x1
364	 E6	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0x80
365	 E7	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0x80
- stack 0: 0x3A0
366	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x44C
367	 EB	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
368	 ED	ADD		 	 
- stack 0: 0x450
369	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
370	 EF	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xF40004010E05280086000100A0000E00BA00000150000400F40005010E0510
371	 F0	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0xF40004010E05280086000100A0000E00BA00000150000400F40005010E0510
- stack 0: 0xF0
372	 F2	SHR		 	 
- stack 1: 0x450
- stack 0: 0xF4
373	 F3	JUMP		 	 
- stack 0: 0x450
374	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
375	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
376	 F6	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xF40004010E05280086000100A0000E00BA00000150000400F40005010E0510
377	 F7	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0xF40004010E05280086000100A0000E00BA00000150000400F40005010E0510
- stack 0: 0xE0
378	 F9	SHR		 	 
- stack 1: 0x450
- stack 0: 0xF40004
379	 FA	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0xF40004
- stack 0: 0xFFFF
380	 FD	AND		 	 
- stack 1: 0x450
- stack 0: 0x4
381	 FE	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x1
382	 100	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x4
383	 101	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x380
384	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
385	 105	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
386	 107	ADD		 	 
- stack 0: 0x454
387	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
388	 109	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x10E05280086000100A0000E00BA00000150000400F40005010E051000860001
389	 10A	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x10E05280086000100A0000E00BA00000150000400F40005010E051000860001
- stack 0: 0xF0
390	 10C	SHR		 	 
- stack 1: 0x454
- stack 0: 0x10E
391	 10D	JUMP		 	 
- stack 0: 0x454
392	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x454
393	 10F	PUSH2	0060	 	 
- stack 1: 0x454
- stack 0: 0x60
394	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x454
- stack 0: 0x80
395	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x454
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
396	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x454
- stack 0: 0x80
397	 119	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0x80
- stack 0: 0x3A0
398	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x454
- stack 1: 0x80
- stack 0: 0x80
399	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x454
- stack 2: 0x80
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
400	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x454
- stack 1: 0x80
- stack 0: 0x80
401	 123	SUB		 	 
- stack 1: 0x454
- stack 0: 0x0
402	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x454
- stack 1: 0x0
- stack 0: 0x12C
403	 127	JUMPI		 	 
- stack 0: 0x454
404	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x454
- stack 0: 0x146
405	 12B	JUMP		 	 
- stack 0: 0x454
406	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x454
407	 147	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
408	 149	ADD		 	 
- stack 0: 0x458
409	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
410	 14B	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x86000100A0000E00BA00000150000400F40005010E05100086000100A0001F
411	 14C	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x86000100A0000E00BA00000150000400F40005010E05100086000100A0001F
- stack 0: 0xF0
412	 14E	SHR		 	 
- stack 1: 0x458
- stack 0: 0x86
413	 14F	JUMP		 	 
- stack 0: 0x458
414	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x458
415	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
416	 88	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x86000100A0000E00BA00000150000400F40005010E05100086000100A0001F
417	 89	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0x86000100A0000E00BA00000150000400F40005010E05100086000100A0001F
- stack 0: 0xE0
418	 8B	SHR		 	 
- stack 1: 0x458
- stack 0: 0x860001
419	 8C	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0x860001
- stack 0: 0xFFFF
420	 8F	AND		 	 
- stack 1: 0x458
- stack 0: 0x1
421	 90	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0x1
- stack 0: 0x1
422	 92	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0x1
423	 93	PUSH2	0020	 	 
- stack 2: 0x458
- stack 1: 0x1
- stack 0: 0x20
424	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x458
425	 97	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
426	 99	ADD		 	 
- stack 0: 0x45C
427	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
428	 9B	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xA0000E00BA00000150000400F40005010E05100086000100A0001F00BA0000
429	 9C	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0xA0000E00BA00000150000400F40005010E05100086000100A0001F00BA0000
- stack 0: 0xF0
430	 9E	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xA0
431	 9F	JUMP		 	 
- stack 0: 0x45C
432	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x45C
433	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
434	 A2	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xA0000E00BA00000150000400F40005010E05100086000100A0001F00BA0000
435	 A3	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0xA0000E00BA00000150000400F40005010E05100086000100A0001F00BA0000
- stack 0: 0xE0
436	 A5	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xA0000E
437	 A6	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0xA0000E
- stack 0: 0xFFFF
438	 A9	AND		 	 
- stack 1: 0x45C
- stack 0: 0xE
439	 AA	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0xE
- stack 0: 0x1
440	 AC	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0xE
441	 AD	PUSH2	0040	 	 
- stack 2: 0x45C
- stack 1: 0xE
- stack 0: 0x40
442	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x45C
443	 B1	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
444	 B3	ADD		 	 
- stack 0: 0x460
445	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
446	 B5	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0xBA00000150000400F40005010E05100086000100A0001F00BA000001630000
447	 B6	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0xBA00000150000400F40005010E05100086000100A0001F00BA000001630000
- stack 0: 0xF0
448	 B8	SHR		 	 
- stack 1: 0x460
- stack 0: 0xBA
449	 B9	JUMP		 	 
- stack 0: 0x460
450	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x460
451	 BB	PUSH2	0020	 	 
- stack 1: 0x460
- stack 0: 0x20
452	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x460
- stack 0: 0x1
453	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x460
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
454	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x460
- stack 0: 0x1
455	 C5	PUSH2	0040	 	 
- stack 2: 0x460
- stack 1: 0x1
- stack 0: 0x40
456	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x460
- stack 1: 0x1
- stack 0: 0xE
457	 C9	PUSH1	1F	 	 
- stack 3: 0x460
- stack 2: 0x1
- stack 1: 0xE
- stack 0: 0x1F
458	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x460
- stack 1: 0x1
- stack 0: 0xE
459	 CC	SHL		 	 
- stack 1: 0x460
- stack 0: 0x4000
460	 CD	PUSH2	0060	 	 
- stack 2: 0x460
- stack 1: 0x4000
- stack 0: 0x60
461	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x460
462	 D1	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
463	 D3	ADD		 	 
- stack 0: 0x464
464	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
465	 D5	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x150000400F40005010E05100086000100A0001F00BA00000163000000F40006
466	 D6	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x150000400F40005010E05100086000100A0001F00BA00000163000000F40006
- stack 0: 0xF0
467	 D8	SHR		 	 
- stack 1: 0x464
- stack 0: 0x150
468	 D9	JUMP		 	 
- stack 0: 0x464
469	 150	JUMPDEST		 ;; __riscvimpl_LUI_4eb7	  ;; # instr: lui t4,0x4(ignore imm)
- stack 0: 0x464
470	 151	PUSH4	00004000	 	 
- stack 1: 0x464
- stack 0: 0x4000
471	 156	PUSH2	03A0	 	 
- stack 2: 0x464
- stack 1: 0x4000
- stack 0: 0x3A0
472	 159	MSTORE		 	  ;; # store to x29
- stack 0: 0x464
473	 15A	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
474	 15C	ADD		 	 
- stack 0: 0x468
475	 15D	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
476	 15E	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xF40005010E05100086000100A0001F00BA00000163000000F40006010E04F8
477	 15F	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xF40005010E05100086000100A0001F00BA00000163000000F40006010E04F8
- stack 0: 0xF0
478	 161	SHR		 	 
- stack 1: 0x468
- stack 0: 0xF4
479	 162	JUMP		 	 
- stack 0: 0x468
480	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x468
481	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
482	 F6	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xF40005010E05100086000100A0001F00BA00000163000000F40006010E04F8
483	 F7	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0xF40005010E05100086000100A0001F00BA00000163000000F40006010E04F8
- stack 0: 0xE0
484	 F9	SHR		 	 
- stack 1: 0x468
- stack 0: 0xF40005
485	 FA	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0xF40005
- stack 0: 0xFFFF
486	 FD	AND		 	 
- stack 1: 0x468
- stack 0: 0x5
487	 FE	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0x5
- stack 0: 0x1
488	 100	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0x5
489	 101	PUSH2	0380	 	 
- stack 2: 0x468
- stack 1: 0x5
- stack 0: 0x380
490	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x468
491	 105	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
492	 107	ADD		 	 
- stack 0: 0x46C
493	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
494	 109	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x10E05100086000100A0001F00BA00000163000000F40006010E04F80086FFFF
495	 10A	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x10E05100086000100A0001F00BA00000163000000F40006010E04F80086FFFF
- stack 0: 0xF0
496	 10C	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x10E
497	 10D	JUMP		 	 
- stack 0: 0x46C
498	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x46C
499	 10F	PUSH2	0060	 	 
- stack 1: 0x46C
- stack 0: 0x60
500	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x46C
- stack 0: 0x4000
501	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x46C
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
502	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x46C
- stack 0: 0x4000
503	 119	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0x4000
- stack 0: 0x3A0
504	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x46C
- stack 1: 0x4000
- stack 0: 0x4000
505	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x46C
- stack 2: 0x4000
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
506	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x46C
- stack 1: 0x4000
- stack 0: 0x4000
507	 123	SUB		 	 
- stack 1: 0x46C
- stack 0: 0x0
508	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x46C
- stack 1: 0x0
- stack 0: 0x12C
509	 127	JUMPI		 	 
- stack 0: 0x46C
510	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x46C
- stack 0: 0x146
511	 12B	JUMP		 	 
- stack 0: 0x46C
512	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x46C
513	 147	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
514	 149	ADD		 	 
- stack 0: 0x470
515	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
516	 14B	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x86000100A0001F00BA00000163000000F40006010E04F80086FFFF00A00000
517	 14C	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x86000100A0001F00BA00000163000000F40006010E04F80086FFFF00A00000
- stack 0: 0xF0
518	 14E	SHR		 	 
- stack 1: 0x470
- stack 0: 0x86
519	 14F	JUMP		 	 
- stack 0: 0x470
520	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x470
521	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
522	 88	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x86000100A0001F00BA00000163000000F40006010E04F80086FFFF00A00000
523	 89	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x86000100A0001F00BA00000163000000F40006010E04F80086FFFF00A00000
- stack 0: 0xE0
524	 8B	SHR		 	 
- stack 1: 0x470
- stack 0: 0x860001
525	 8C	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x860001
- stack 0: 0xFFFF
526	 8F	AND		 	 
- stack 1: 0x470
- stack 0: 0x1
527	 90	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0x1
- stack 0: 0x1
528	 92	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0x1
529	 93	PUSH2	0020	 	 
- stack 2: 0x470
- stack 1: 0x1
- stack 0: 0x20
530	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x470
531	 97	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
532	 99	ADD		 	 
- stack 0: 0x474
533	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
534	 9B	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0001F00BA00000163000000F40006010E04F80086FFFF00A0000000BA0000
535	 9C	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0xA0001F00BA00000163000000F40006010E04F80086FFFF00A0000000BA0000
- stack 0: 0xF0
536	 9E	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA0
537	 9F	JUMP		 	 
- stack 0: 0x474
538	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x474
539	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
540	 A2	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0001F00BA00000163000000F40006010E04F80086FFFF00A0000000BA0000
541	 A3	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0xA0001F00BA00000163000000F40006010E04F80086FFFF00A0000000BA0000
- stack 0: 0xE0
542	 A5	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA0001F
543	 A6	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0xA0001F
- stack 0: 0xFFFF
544	 A9	AND		 	 
- stack 1: 0x474
- stack 0: 0x1F
545	 AA	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x1F
- stack 0: 0x1
546	 AC	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x1F
547	 AD	PUSH2	0040	 	 
- stack 2: 0x474
- stack 1: 0x1F
- stack 0: 0x40
548	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x474
549	 B1	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
550	 B3	ADD		 	 
- stack 0: 0x478
551	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
552	 B5	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBA00000163000000F40006010E04F80086FFFF00A0000000BA000000DAFFFF
553	 B6	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0xBA00000163000000F40006010E04F80086FFFF00A0000000BA000000DAFFFF
- stack 0: 0xF0
554	 B8	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBA
555	 B9	JUMP		 	 
- stack 0: 0x478
556	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x478
557	 BB	PUSH2	0020	 	 
- stack 1: 0x478
- stack 0: 0x20
558	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x478
- stack 0: 0x1
559	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x478
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
560	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x478
- stack 0: 0x1
561	 C5	PUSH2	0040	 	 
- stack 2: 0x478
- stack 1: 0x1
- stack 0: 0x40
562	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x478
- stack 1: 0x1
- stack 0: 0x1F
563	 C9	PUSH1	1F	 	 
- stack 3: 0x478
- stack 2: 0x1
- stack 1: 0x1F
- stack 0: 0x1F
564	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x478
- stack 1: 0x1
- stack 0: 0x1F
565	 CC	SHL		 	 
- stack 1: 0x478
- stack 0: 0x80000000
566	 CD	PUSH2	0060	 	 
- stack 2: 0x478
- stack 1: 0x80000000
- stack 0: 0x60
567	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x478
568	 D1	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
569	 D3	ADD		 	 
- stack 0: 0x47C
570	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
571	 D5	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x163000000F40006010E04F80086FFFF00A0000000BA000000DAFFFF00F40007
572	 D6	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x163000000F40006010E04F80086FFFF00A0000000BA000000DAFFFF00F40007
- stack 0: 0xF0
573	 D8	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x163
574	 D9	JUMP		 	 
- stack 0: 0x47C
575	 163	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x47C
576	 164	PUSH4	80000000	 	 
- stack 1: 0x47C
- stack 0: 0x80000000
577	 169	PUSH2	03A0	 	 
- stack 2: 0x47C
- stack 1: 0x80000000
- stack 0: 0x3A0
578	 16C	MSTORE		 	  ;; # store to x29
- stack 0: 0x47C
579	 16D	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
580	 16F	ADD		 	 
- stack 0: 0x480
581	 170	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
582	 171	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xF40006010E04F80086FFFF00A0000000BA000000DAFFFF00F40007010E04E0
583	 172	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0xF40006010E04F80086FFFF00A0000000BA000000DAFFFF00F40007010E04E0
- stack 0: 0xF0
584	 174	SHR		 	 
- stack 1: 0x480
- stack 0: 0xF4
585	 175	JUMP		 	 
- stack 0: 0x480
586	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x480
587	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
588	 F6	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xF40006010E04F80086FFFF00A0000000BA000000DAFFFF00F40007010E04E0
589	 F7	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0xF40006010E04F80086FFFF00A0000000BA000000DAFFFF00F40007010E04E0
- stack 0: 0xE0
590	 F9	SHR		 	 
- stack 1: 0x480
- stack 0: 0xF40006
591	 FA	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0xF40006
- stack 0: 0xFFFF
592	 FD	AND		 	 
- stack 1: 0x480
- stack 0: 0x6
593	 FE	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0x6
- stack 0: 0x1
594	 100	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x6
595	 101	PUSH2	0380	 	 
- stack 2: 0x480
- stack 1: 0x6
- stack 0: 0x380
596	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x480
597	 105	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
598	 107	ADD		 	 
- stack 0: 0x484
599	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
600	 109	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x10E04F80086FFFF00A0000000BA000000DAFFFF00F40007010E04E00086FFFF
601	 10A	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x10E04F80086FFFF00A0000000BA000000DAFFFF00F40007010E04E00086FFFF
- stack 0: 0xF0
602	 10C	SHR		 	 
- stack 1: 0x484
- stack 0: 0x10E
603	 10D	JUMP		 	 
- stack 0: 0x484
604	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x484
605	 10F	PUSH2	0060	 	 
- stack 1: 0x484
- stack 0: 0x60
606	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x484
- stack 0: 0x80000000
607	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x484
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
608	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x484
- stack 0: 0x80000000
609	 119	PUSH2	03A0	 	 
- stack 2: 0x484
- stack 1: 0x80000000
- stack 0: 0x3A0
610	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x484
- stack 1: 0x80000000
- stack 0: 0x80000000
611	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x484
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
612	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x484
- stack 1: 0x80000000
- stack 0: 0x80000000
613	 123	SUB		 	 
- stack 1: 0x484
- stack 0: 0x0
614	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x12C
615	 127	JUMPI		 	 
- stack 0: 0x484
616	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x484
- stack 0: 0x146
617	 12B	JUMP		 	 
- stack 0: 0x484
618	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x484
619	 147	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
620	 149	ADD		 	 
- stack 0: 0x488
621	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
622	 14B	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x86FFFF00A0000000BA000000DAFFFF00F40007010E04E00086FFFF00A00001
623	 14C	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x86FFFF00A0000000BA000000DAFFFF00F40007010E04E00086FFFF00A00001
- stack 0: 0xF0
624	 14E	SHR		 	 
- stack 1: 0x488
- stack 0: 0x86
625	 14F	JUMP		 	 
- stack 0: 0x488
626	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x488
627	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x488
- stack 0: 0x488
628	 88	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x86FFFF00A0000000BA000000DAFFFF00F40007010E04E00086FFFF00A00001
629	 89	PUSH1	E0	 	 
- stack 2: 0x488
- stack 1: 0x86FFFF00A0000000BA000000DAFFFF00F40007010E04E00086FFFF00A00001
- stack 0: 0xE0
630	 8B	SHR		 	 
- stack 1: 0x488
- stack 0: 0x86FFFF
631	 8C	PUSH2	FFFF	 	 
- stack 2: 0x488
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
632	 8F	AND		 	 
- stack 1: 0x488
- stack 0: 0xFFFF
633	 90	PUSH1	01	 	 
- stack 2: 0x488
- stack 1: 0xFFFF
- stack 0: 0x1
634	 92	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
635	 93	PUSH2	0020	 	 
- stack 2: 0x488
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
636	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x488
637	 97	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
638	 99	ADD		 	 
- stack 0: 0x48C
639	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
640	 9B	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0xA0000000BA000000DAFFFF00F40007010E04E00086FFFF00A0000100BA0000
641	 9C	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0xA0000000BA000000DAFFFF00F40007010E04E00086FFFF00A0000100BA0000
- stack 0: 0xF0
642	 9E	SHR		 	 
- stack 1: 0x48C
- stack 0: 0xA0
643	 9F	JUMP		 	 
- stack 0: 0x48C
644	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x48C
645	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
646	 A2	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0xA0000000BA000000DAFFFF00F40007010E04E00086FFFF00A0000100BA0000
647	 A3	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0xA0000000BA000000DAFFFF00F40007010E04E00086FFFF00A0000100BA0000
- stack 0: 0xE0
648	 A5	SHR		 	 
- stack 1: 0x48C
- stack 0: 0xA00000
649	 A6	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0xA00000
- stack 0: 0xFFFF
650	 A9	AND		 	 
- stack 1: 0x48C
- stack 0: 0x0
651	 AA	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0x0
- stack 0: 0x1
652	 AC	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0x0
653	 AD	PUSH2	0040	 	 
- stack 2: 0x48C
- stack 1: 0x0
- stack 0: 0x40
654	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x48C
655	 B1	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
656	 B3	ADD		 	 
- stack 0: 0x490
657	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
658	 B5	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xBA000000DAFFFF00F40007010E04E00086FFFF00A0000100BA000000DAFFFE
659	 B6	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xBA000000DAFFFF00F40007010E04E00086FFFF00A0000100BA000000DAFFFE
- stack 0: 0xF0
660	 B8	SHR		 	 
- stack 1: 0x490
- stack 0: 0xBA
661	 B9	JUMP		 	 
- stack 0: 0x490
662	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x490
663	 BB	PUSH2	0020	 	 
- stack 1: 0x490
- stack 0: 0x20
664	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x490
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
665	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x490
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
666	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x490
- stack 0: 0xFFFFFFFF
667	 C5	PUSH2	0040	 	 
- stack 2: 0x490
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
668	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x490
- stack 1: 0xFFFFFFFF
- stack 0: 0x0
669	 C9	PUSH1	1F	 	 
- stack 3: 0x490
- stack 2: 0xFFFFFFFF
- stack 1: 0x0
- stack 0: 0x1F
670	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x490
- stack 1: 0xFFFFFFFF
- stack 0: 0x0
671	 CC	SHL		 	 
- stack 1: 0x490
- stack 0: 0xFFFFFFFF
672	 CD	PUSH2	0060	 	 
- stack 2: 0x490
- stack 1: 0xFFFFFFFF
- stack 0: 0x60
673	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x490
674	 D1	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
675	 D3	ADD		 	 
- stack 0: 0x494
676	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
677	 D5	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xDAFFFF00F40007010E04E00086FFFF00A0000100BA000000DAFFFE00F40008
678	 D6	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xDAFFFF00F40007010E04E00086FFFF00A0000100BA000000DAFFFE00F40008
- stack 0: 0xF0
679	 D8	SHR		 	 
- stack 1: 0x494
- stack 0: 0xDA
680	 D9	JUMP		 	 
- stack 0: 0x494
681	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x494
682	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
683	 DC	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xDAFFFF00F40007010E04E00086FFFF00A0000100BA000000DAFFFE00F40008
684	 DD	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0xDAFFFF00F40007010E04E00086FFFF00A0000100BA000000DAFFFE00F40008
- stack 0: 0xE0
685	 DF	SHR		 	 
- stack 1: 0x494
- stack 0: 0xDAFFFF
686	 E0	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0xDAFFFF
- stack 0: 0xFFFF
687	 E3	AND		 	 
- stack 1: 0x494
- stack 0: 0xFFFF
688	 E4	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0xFFFF
- stack 0: 0x1
689	 E6	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
690	 E7	PUSH2	03A0	 	 
- stack 2: 0x494
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
691	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x494
692	 EB	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
693	 ED	ADD		 	 
- stack 0: 0x498
694	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
695	 EF	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xF40007010E04E00086FFFF00A0000100BA000000DAFFFE00F40008010E04C8
696	 F0	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xF40007010E04E00086FFFF00A0000100BA000000DAFFFE00F40008010E04C8
- stack 0: 0xF0
697	 F2	SHR		 	 
- stack 1: 0x498
- stack 0: 0xF4
698	 F3	JUMP		 	 
- stack 0: 0x498
699	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x498
700	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
701	 F6	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xF40007010E04E00086FFFF00A0000100BA000000DAFFFE00F40008010E04C8
702	 F7	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0xF40007010E04E00086FFFF00A0000100BA000000DAFFFE00F40008010E04C8
- stack 0: 0xE0
703	 F9	SHR		 	 
- stack 1: 0x498
- stack 0: 0xF40007
704	 FA	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0xF40007
- stack 0: 0xFFFF
705	 FD	AND		 	 
- stack 1: 0x498
- stack 0: 0x7
706	 FE	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x7
- stack 0: 0x1
707	 100	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x7
708	 101	PUSH2	0380	 	 
- stack 2: 0x498
- stack 1: 0x7
- stack 0: 0x380
709	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x498
710	 105	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
711	 107	ADD		 	 
- stack 0: 0x49C
712	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
713	 109	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x10E04E00086FFFF00A0000100BA000000DAFFFE00F40008010E04C80086FFFF
714	 10A	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x10E04E00086FFFF00A0000100BA000000DAFFFE00F40008010E04C80086FFFF
- stack 0: 0xF0
715	 10C	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x10E
716	 10D	JUMP		 	 
- stack 0: 0x49C
717	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x49C
718	 10F	PUSH2	0060	 	 
- stack 1: 0x49C
- stack 0: 0x60
719	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x49C
- stack 0: 0xFFFFFFFF
720	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
721	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0xFFFFFFFF
722	 119	PUSH2	03A0	 	 
- stack 2: 0x49C
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
723	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x49C
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
724	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x49C
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
725	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x49C
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
726	 123	SUB		 	 
- stack 1: 0x49C
- stack 0: 0x0
727	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x12C
728	 127	JUMPI		 	 
- stack 0: 0x49C
729	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x49C
- stack 0: 0x146
730	 12B	JUMP		 	 
- stack 0: 0x49C
731	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x49C
732	 147	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
733	 149	ADD		 	 
- stack 0: 0x4A0
734	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
735	 14B	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x86FFFF00A0000100BA000000DAFFFE00F40008010E04C80086FFFF00A00007
736	 14C	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x86FFFF00A0000100BA000000DAFFFE00F40008010E04C80086FFFF00A00007
- stack 0: 0xF0
737	 14E	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x86
738	 14F	JUMP		 	 
- stack 0: 0x4A0
739	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x4A0
740	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
741	 88	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x86FFFF00A0000100BA000000DAFFFE00F40008010E04C80086FFFF00A00007
742	 89	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0x86FFFF00A0000100BA000000DAFFFE00F40008010E04C80086FFFF00A00007
- stack 0: 0xE0
743	 8B	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x86FFFF
744	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
745	 8F	AND		 	 
- stack 1: 0x4A0
- stack 0: 0xFFFF
746	 90	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0xFFFF
- stack 0: 0x1
747	 92	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
748	 93	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
749	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A0
750	 97	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
751	 99	ADD		 	 
- stack 0: 0x4A4
752	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
753	 9B	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xA0000100BA000000DAFFFE00F40008010E04C80086FFFF00A0000700BA0000
754	 9C	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0xA0000100BA000000DAFFFE00F40008010E04C80086FFFF00A0000700BA0000
- stack 0: 0xF0
755	 9E	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xA0
756	 9F	JUMP		 	 
- stack 0: 0x4A4
757	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4A4
758	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
759	 A2	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xA0000100BA000000DAFFFE00F40008010E04C80086FFFF00A0000700BA0000
760	 A3	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0xA0000100BA000000DAFFFE00F40008010E04C80086FFFF00A0000700BA0000
- stack 0: 0xE0
761	 A5	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xA00001
762	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0xA00001
- stack 0: 0xFFFF
763	 A9	AND		 	 
- stack 1: 0x4A4
- stack 0: 0x1
764	 AA	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0x1
- stack 0: 0x1
765	 AC	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0x1
766	 AD	PUSH2	0040	 	 
- stack 2: 0x4A4
- stack 1: 0x1
- stack 0: 0x40
767	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x4A4
768	 B1	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
769	 B3	ADD		 	 
- stack 0: 0x4A8
770	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
771	 B5	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xBA000000DAFFFE00F40008010E04C80086FFFF00A0000700BA000000DAFF80
772	 B6	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xBA000000DAFFFE00F40008010E04C80086FFFF00A0000700BA000000DAFF80
- stack 0: 0xF0
773	 B8	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xBA
774	 B9	JUMP		 	 
- stack 0: 0x4A8
775	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x4A8
776	 BB	PUSH2	0020	 	 
- stack 1: 0x4A8
- stack 0: 0x20
777	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
778	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
779	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFF
780	 C5	PUSH2	0040	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
781	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFF
- stack 0: 0x1
782	 C9	PUSH1	1F	 	 
- stack 3: 0x4A8
- stack 2: 0xFFFFFFFF
- stack 1: 0x1
- stack 0: 0x1F
783	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFF
- stack 0: 0x1
784	 CC	SHL		 	 
- stack 1: 0x4A8
- stack 0: 0x1FFFFFFFE
785	 CD	PUSH2	0060	 	 
- stack 2: 0x4A8
- stack 1: 0x1FFFFFFFE
- stack 0: 0x60
786	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x4A8
787	 D1	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
788	 D3	ADD		 	 
- stack 0: 0x4AC
789	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
790	 D5	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xDAFFFE00F40008010E04C80086FFFF00A0000700BA000000DAFF8000F40009
791	 D6	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xDAFFFE00F40008010E04C80086FFFF00A0000700BA000000DAFF8000F40009
- stack 0: 0xF0
792	 D8	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xDA
793	 D9	JUMP		 	 
- stack 0: 0x4AC
794	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x4AC
795	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
796	 DC	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xDAFFFE00F40008010E04C80086FFFF00A0000700BA000000DAFF8000F40009
797	 DD	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0xDAFFFE00F40008010E04C80086FFFF00A0000700BA000000DAFF8000F40009
- stack 0: 0xE0
798	 DF	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xDAFFFE
799	 E0	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0xDAFFFE
- stack 0: 0xFFFF
800	 E3	AND		 	 
- stack 1: 0x4AC
- stack 0: 0xFFFE
801	 E4	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFE
- stack 0: 0x1
802	 E6	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
803	 E7	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3A0
804	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x4AC
805	 EB	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
806	 ED	ADD		 	 
- stack 0: 0x4B0
807	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
808	 EF	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xF40008010E04C80086FFFF00A0000700BA000000DAFF8000F40009010E04B0
809	 F0	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0xF40008010E04C80086FFFF00A0000700BA000000DAFF8000F40009010E04B0
- stack 0: 0xF0
810	 F2	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xF4
811	 F3	JUMP		 	 
- stack 0: 0x4B0
812	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4B0
813	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
814	 F6	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xF40008010E04C80086FFFF00A0000700BA000000DAFF8000F40009010E04B0
815	 F7	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0xF40008010E04C80086FFFF00A0000700BA000000DAFF8000F40009010E04B0
- stack 0: 0xE0
816	 F9	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xF40008
817	 FA	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0xF40008
- stack 0: 0xFFFF
818	 FD	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x8
819	 FE	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x8
- stack 0: 0x1
820	 100	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x8
821	 101	PUSH2	0380	 	 
- stack 2: 0x4B0
- stack 1: 0x8
- stack 0: 0x380
822	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x4B0
823	 105	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
824	 107	ADD		 	 
- stack 0: 0x4B4
825	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
826	 109	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x10E04C80086FFFF00A0000700BA000000DAFF8000F40009010E04B00086FFFF
827	 10A	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x10E04C80086FFFF00A0000700BA000000DAFF8000F40009010E04B00086FFFF
- stack 0: 0xF0
828	 10C	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x10E
829	 10D	JUMP		 	 
- stack 0: 0x4B4
830	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x4B4
831	 10F	PUSH2	0060	 	 
- stack 1: 0x4B4
- stack 0: 0x60
832	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x4B4
- stack 0: 0x1FFFFFFFE
833	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x1FFFFFFFE
- stack 0: 0xFFFFFFFF
834	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFE
835	 119	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFE
- stack 0: 0x3A0
836	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
837	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B4
- stack 2: 0xFFFFFFFE
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
838	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFE
839	 123	SUB		 	 
- stack 1: 0x4B4
- stack 0: 0x0
840	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x4B4
- stack 1: 0x0
- stack 0: 0x12C
841	 127	JUMPI		 	 
- stack 0: 0x4B4
842	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x4B4
- stack 0: 0x146
843	 12B	JUMP		 	 
- stack 0: 0x4B4
844	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x4B4
845	 147	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
846	 149	ADD		 	 
- stack 0: 0x4B8
847	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
848	 14B	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x86FFFF00A0000700BA000000DAFF8000F40009010E04B00086FFFF00A0000E
849	 14C	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x86FFFF00A0000700BA000000DAFF8000F40009010E04B00086FFFF00A0000E
- stack 0: 0xF0
850	 14E	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x86
851	 14F	JUMP		 	 
- stack 0: 0x4B8
852	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x4B8
853	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
854	 88	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x86FFFF00A0000700BA000000DAFF8000F40009010E04B00086FFFF00A0000E
855	 89	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0x86FFFF00A0000700BA000000DAFF8000F40009010E04B00086FFFF00A0000E
- stack 0: 0xE0
856	 8B	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x86FFFF
857	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
858	 8F	AND		 	 
- stack 1: 0x4B8
- stack 0: 0xFFFF
859	 90	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0xFFFF
- stack 0: 0x1
860	 92	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
861	 93	PUSH2	0020	 	 
- stack 2: 0x4B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
862	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B8
863	 97	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
864	 99	ADD		 	 
- stack 0: 0x4BC
865	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
866	 9B	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0xA0000700BA000000DAFF8000F40009010E04B00086FFFF00A0000E00BA0000
867	 9C	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0xA0000700BA000000DAFF8000F40009010E04B00086FFFF00A0000E00BA0000
- stack 0: 0xF0
868	 9E	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0xA0
869	 9F	JUMP		 	 
- stack 0: 0x4BC
870	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4BC
871	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
872	 A2	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0xA0000700BA000000DAFF8000F40009010E04B00086FFFF00A0000E00BA0000
873	 A3	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0xA0000700BA000000DAFF8000F40009010E04B00086FFFF00A0000E00BA0000
- stack 0: 0xE0
874	 A5	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0xA00007
875	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0xA00007
- stack 0: 0xFFFF
876	 A9	AND		 	 
- stack 1: 0x4BC
- stack 0: 0x7
877	 AA	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0x7
- stack 0: 0x1
878	 AC	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0x7
879	 AD	PUSH2	0040	 	 
- stack 2: 0x4BC
- stack 1: 0x7
- stack 0: 0x40
880	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x4BC
881	 B1	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
882	 B3	ADD		 	 
- stack 0: 0x4C0
883	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
884	 B5	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xBA000000DAFF8000F40009010E04B00086FFFF00A0000E00BA00000176FFFC
885	 B6	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0xBA000000DAFF8000F40009010E04B00086FFFF00A0000E00BA00000176FFFC
- stack 0: 0xF0
886	 B8	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xBA
887	 B9	JUMP		 	 
- stack 0: 0x4C0
888	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x4C0
889	 BB	PUSH2	0020	 	 
- stack 1: 0x4C0
- stack 0: 0x20
890	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
891	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
892	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFF
893	 C5	PUSH2	0040	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
894	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFF
- stack 0: 0x7
895	 C9	PUSH1	1F	 	 
- stack 3: 0x4C0
- stack 2: 0xFFFFFFFF
- stack 1: 0x7
- stack 0: 0x1F
896	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFF
- stack 0: 0x7
897	 CC	SHL		 	 
- stack 1: 0x4C0
- stack 0: 0x7FFFFFFF80
898	 CD	PUSH2	0060	 	 
- stack 2: 0x4C0
- stack 1: 0x7FFFFFFF80
- stack 0: 0x60
899	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x4C0
900	 D1	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
901	 D3	ADD		 	 
- stack 0: 0x4C4
902	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
903	 D5	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xDAFF8000F40009010E04B00086FFFF00A0000E00BA00000176FFFC00F4000A
904	 D6	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0xDAFF8000F40009010E04B00086FFFF00A0000E00BA00000176FFFC00F4000A
- stack 0: 0xF0
905	 D8	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xDA
906	 D9	JUMP		 	 
- stack 0: 0x4C4
907	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x4C4
908	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
909	 DC	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xDAFF8000F40009010E04B00086FFFF00A0000E00BA00000176FFFC00F4000A
910	 DD	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0xDAFF8000F40009010E04B00086FFFF00A0000E00BA00000176FFFC00F4000A
- stack 0: 0xE0
911	 DF	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xDAFF80
912	 E0	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0xDAFF80
- stack 0: 0xFFFF
913	 E3	AND		 	 
- stack 1: 0x4C4
- stack 0: 0xFF80
914	 E4	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0xFF80
- stack 0: 0x1
915	 E6	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80
916	 E7	PUSH2	03A0	 	 
- stack 2: 0x4C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80
- stack 0: 0x3A0
917	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x4C4
918	 EB	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
919	 ED	ADD		 	 
- stack 0: 0x4C8
920	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
921	 EF	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xF40009010E04B00086FFFF00A0000E00BA00000176FFFC00F4000A010E0498
922	 F0	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0xF40009010E04B00086FFFF00A0000E00BA00000176FFFC00F4000A010E0498
- stack 0: 0xF0
923	 F2	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xF4
924	 F3	JUMP		 	 
- stack 0: 0x4C8
925	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C8
926	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
927	 F6	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xF40009010E04B00086FFFF00A0000E00BA00000176FFFC00F4000A010E0498
928	 F7	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0xF40009010E04B00086FFFF00A0000E00BA00000176FFFC00F4000A010E0498
- stack 0: 0xE0
929	 F9	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xF40009
930	 FA	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0xF40009
- stack 0: 0xFFFF
931	 FD	AND		 	 
- stack 1: 0x4C8
- stack 0: 0x9
932	 FE	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0x9
- stack 0: 0x1
933	 100	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0x9
934	 101	PUSH2	0380	 	 
- stack 2: 0x4C8
- stack 1: 0x9
- stack 0: 0x380
935	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C8
936	 105	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
937	 107	ADD		 	 
- stack 0: 0x4CC
938	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
939	 109	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x10E04B00086FFFF00A0000E00BA00000176FFFC00F4000A010E04980086FFFF
940	 10A	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x10E04B00086FFFF00A0000E00BA00000176FFFC00F4000A010E04980086FFFF
- stack 0: 0xF0
941	 10C	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x10E
942	 10D	JUMP		 	 
- stack 0: 0x4CC
943	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x4CC
944	 10F	PUSH2	0060	 	 
- stack 1: 0x4CC
- stack 0: 0x60
945	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x4CC
- stack 0: 0x7FFFFFFF80
946	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4CC
- stack 1: 0x7FFFFFFF80
- stack 0: 0xFFFFFFFF
947	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4CC
- stack 0: 0xFFFFFF80
948	 119	PUSH2	03A0	 	 
- stack 2: 0x4CC
- stack 1: 0xFFFFFF80
- stack 0: 0x3A0
949	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x4CC
- stack 1: 0xFFFFFF80
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80
950	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4CC
- stack 2: 0xFFFFFF80
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80
- stack 0: 0xFFFFFFFF
951	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4CC
- stack 1: 0xFFFFFF80
- stack 0: 0xFFFFFF80
952	 123	SUB		 	 
- stack 1: 0x4CC
- stack 0: 0x0
953	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x4CC
- stack 1: 0x0
- stack 0: 0x12C
954	 127	JUMPI		 	 
- stack 0: 0x4CC
955	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x4CC
- stack 0: 0x146
956	 12B	JUMP		 	 
- stack 0: 0x4CC
957	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x4CC
958	 147	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
959	 149	ADD		 	 
- stack 0: 0x4D0
960	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
961	 14B	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x86FFFF00A0000E00BA00000176FFFC00F4000A010E04980086FFFF00A0001F
962	 14C	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x86FFFF00A0000E00BA00000176FFFC00F4000A010E04980086FFFF00A0001F
- stack 0: 0xF0
963	 14E	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x86
964	 14F	JUMP		 	 
- stack 0: 0x4D0
965	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x4D0
966	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
967	 88	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x86FFFF00A0000E00BA00000176FFFC00F4000A010E04980086FFFF00A0001F
968	 89	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x86FFFF00A0000E00BA00000176FFFC00F4000A010E04980086FFFF00A0001F
- stack 0: 0xE0
969	 8B	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x86FFFF
970	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
971	 8F	AND		 	 
- stack 1: 0x4D0
- stack 0: 0xFFFF
972	 90	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFF
- stack 0: 0x1
973	 92	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
974	 93	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
975	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D0
976	 97	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
977	 99	ADD		 	 
- stack 0: 0x4D4
978	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
979	 9B	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xA0000E00BA00000176FFFC00F4000A010E04980086FFFF00A0001F00BA0000
980	 9C	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0xA0000E00BA00000176FFFC00F4000A010E04980086FFFF00A0001F00BA0000
- stack 0: 0xF0
981	 9E	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xA0
982	 9F	JUMP		 	 
- stack 0: 0x4D4
983	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4D4
984	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
985	 A2	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xA0000E00BA00000176FFFC00F4000A010E04980086FFFF00A0001F00BA0000
986	 A3	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0xA0000E00BA00000176FFFC00F4000A010E04980086FFFF00A0001F00BA0000
- stack 0: 0xE0
987	 A5	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xA0000E
988	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0xA0000E
- stack 0: 0xFFFF
989	 A9	AND		 	 
- stack 1: 0x4D4
- stack 0: 0xE
990	 AA	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0xE
- stack 0: 0x1
991	 AC	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0xE
992	 AD	PUSH2	0040	 	 
- stack 2: 0x4D4
- stack 1: 0xE
- stack 0: 0x40
993	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x4D4
994	 B1	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
995	 B3	ADD		 	 
- stack 0: 0x4D8
996	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
997	 B5	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xBA00000176FFFC00F4000A010E04980086FFFF00A0001F00BA000001630000
998	 B6	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0xBA00000176FFFC00F4000A010E04980086FFFF00A0001F00BA000001630000
- stack 0: 0xF0
999	 B8	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xBA
1000	 B9	JUMP		 	 
- stack 0: 0x4D8
1001	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x4D8
1002	 BB	PUSH2	0020	 	 
- stack 1: 0x4D8
- stack 0: 0x20
1003	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x4D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1004	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1005	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D8
- stack 0: 0xFFFFFFFF
1006	 C5	PUSH2	0040	 	 
- stack 2: 0x4D8
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
1007	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x4D8
- stack 1: 0xFFFFFFFF
- stack 0: 0xE
1008	 C9	PUSH1	1F	 	 
- stack 3: 0x4D8
- stack 2: 0xFFFFFFFF
- stack 1: 0xE
- stack 0: 0x1F
1009	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x4D8
- stack 1: 0xFFFFFFFF
- stack 0: 0xE
1010	 CC	SHL		 	 
- stack 1: 0x4D8
- stack 0: 0x3FFFFFFFC000
1011	 CD	PUSH2	0060	 	 
- stack 2: 0x4D8
- stack 1: 0x3FFFFFFFC000
- stack 0: 0x60
1012	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x4D8
1013	 D1	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1014	 D3	ADD		 	 
- stack 0: 0x4DC
1015	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1016	 D5	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x176FFFC00F4000A010E04980086FFFF00A0001F00BA00000163000000F4000B
1017	 D6	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x176FFFC00F4000A010E04980086FFFF00A0001F00BA00000163000000F4000B
- stack 0: 0xF0
1018	 D8	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x176
1019	 D9	JUMP		 	 
- stack 0: 0x4DC
1020	 176	JUMPDEST		 ;; __riscvimpl_LUI_ffffceb7	  ;; # instr: lui t4,0xffffc(ignore imm)
- stack 0: 0x4DC
1021	 177	PUSH4	ffffc000	 	 
- stack 1: 0x4DC
- stack 0: 0xFFFFC000
1022	 17C	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0xFFFFC000
- stack 0: 0x3A0
1023	 17F	MSTORE		 	  ;; # store to x29
- stack 0: 0x4DC
1024	 180	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1025	 182	ADD		 	 
- stack 0: 0x4E0
1026	 183	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1027	 184	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xF4000A010E04980086FFFF00A0001F00BA00000163000000F4000B010E0480
1028	 185	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0xF4000A010E04980086FFFF00A0001F00BA00000163000000F4000B010E0480
- stack 0: 0xF0
1029	 187	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xF4
1030	 188	JUMP		 	 
- stack 0: 0x4E0
1031	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E0
1032	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1033	 F6	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xF4000A010E04980086FFFF00A0001F00BA00000163000000F4000B010E0480
1034	 F7	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0xF4000A010E04980086FFFF00A0001F00BA00000163000000F4000B010E0480
- stack 0: 0xE0
1035	 F9	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xF4000A
1036	 FA	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0xF4000A
- stack 0: 0xFFFF
1037	 FD	AND		 	 
- stack 1: 0x4E0
- stack 0: 0xA
1038	 FE	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0xA
- stack 0: 0x1
1039	 100	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0xA
1040	 101	PUSH2	0380	 	 
- stack 2: 0x4E0
- stack 1: 0xA
- stack 0: 0x380
1041	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E0
1042	 105	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1043	 107	ADD		 	 
- stack 0: 0x4E4
1044	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1045	 109	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x10E04980086FFFF00A0001F00BA00000163000000F4000B010E048001891212
1046	 10A	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x10E04980086FFFF00A0001F00BA00000163000000F4000B010E048001891212
- stack 0: 0xF0
1047	 10C	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x10E
1048	 10D	JUMP		 	 
- stack 0: 0x4E4
1049	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x4E4
1050	 10F	PUSH2	0060	 	 
- stack 1: 0x4E4
- stack 0: 0x60
1051	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x4E4
- stack 0: 0x3FFFFFFFC000
1052	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x3FFFFFFFC000
- stack 0: 0xFFFFFFFF
1053	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E4
- stack 0: 0xFFFFC000
1054	 119	PUSH2	03A0	 	 
- stack 2: 0x4E4
- stack 1: 0xFFFFC000
- stack 0: 0x3A0
1055	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E4
- stack 1: 0xFFFFC000
- stack 0: 0xFFFFC000
1056	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E4
- stack 2: 0xFFFFC000
- stack 1: 0xFFFFC000
- stack 0: 0xFFFFFFFF
1057	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E4
- stack 1: 0xFFFFC000
- stack 0: 0xFFFFC000
1058	 123	SUB		 	 
- stack 1: 0x4E4
- stack 0: 0x0
1059	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x4E4
- stack 1: 0x0
- stack 0: 0x12C
1060	 127	JUMPI		 	 
- stack 0: 0x4E4
1061	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x4E4
- stack 0: 0x146
1062	 12B	JUMP		 	 
- stack 0: 0x4E4
1063	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x4E4
1064	 147	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1065	 149	ADD		 	 
- stack 0: 0x4E8
1066	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1067	 14B	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x86FFFF00A0001F00BA00000163000000F4000B010E048001891212019C0121
1068	 14C	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x86FFFF00A0001F00BA00000163000000F4000B010E048001891212019C0121
- stack 0: 0xF0
1069	 14E	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x86
1070	 14F	JUMP		 	 
- stack 0: 0x4E8
1071	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x4E8
1072	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1073	 88	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x86FFFF00A0001F00BA00000163000000F4000B010E048001891212019C0121
1074	 89	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0x86FFFF00A0001F00BA00000163000000F4000B010E048001891212019C0121
- stack 0: 0xE0
1075	 8B	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x86FFFF
1076	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
1077	 8F	AND		 	 
- stack 1: 0x4E8
- stack 0: 0xFFFF
1078	 90	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0xFFFF
- stack 0: 0x1
1079	 92	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1080	 93	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1081	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E8
1082	 97	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1083	 99	ADD		 	 
- stack 0: 0x4EC
1084	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1085	 9B	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xA0001F00BA00000163000000F4000B010E048001891212019C012100A00000
1086	 9C	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0xA0001F00BA00000163000000F4000B010E048001891212019C012100A00000
- stack 0: 0xF0
1087	 9E	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xA0
1088	 9F	JUMP		 	 
- stack 0: 0x4EC
1089	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4EC
1090	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1091	 A2	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xA0001F00BA00000163000000F4000B010E048001891212019C012100A00000
1092	 A3	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0xA0001F00BA00000163000000F4000B010E048001891212019C012100A00000
- stack 0: 0xE0
1093	 A5	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xA0001F
1094	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0xA0001F
- stack 0: 0xFFFF
1095	 A9	AND		 	 
- stack 1: 0x4EC
- stack 0: 0x1F
1096	 AA	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0x1F
- stack 0: 0x1
1097	 AC	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0x1F
1098	 AD	PUSH2	0040	 	 
- stack 2: 0x4EC
- stack 1: 0x1F
- stack 0: 0x40
1099	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x4EC
1100	 B1	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1101	 B3	ADD		 	 
- stack 0: 0x4F0
1102	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1103	 B5	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xBA00000163000000F4000B010E048001891212019C012100A0000000BA0000
1104	 B6	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xBA00000163000000F4000B010E048001891212019C012100A0000000BA0000
- stack 0: 0xF0
1105	 B8	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xBA
1106	 B9	JUMP		 	 
- stack 0: 0x4F0
1107	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x4F0
1108	 BB	PUSH2	0020	 	 
- stack 1: 0x4F0
- stack 0: 0x20
1109	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x4F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1110	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1111	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F0
- stack 0: 0xFFFFFFFF
1112	 C5	PUSH2	0040	 	 
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
1113	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFF
- stack 0: 0x1F
1114	 C9	PUSH1	1F	 	 
- stack 3: 0x4F0
- stack 2: 0xFFFFFFFF
- stack 1: 0x1F
- stack 0: 0x1F
1115	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFF
- stack 0: 0x1F
1116	 CC	SHL		 	 
- stack 1: 0x4F0
- stack 0: 0x7FFFFFFF80000000
1117	 CD	PUSH2	0060	 	 
- stack 2: 0x4F0
- stack 1: 0x7FFFFFFF80000000
- stack 0: 0x60
1118	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x4F0
1119	 D1	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1120	 D3	ADD		 	 
- stack 0: 0x4F4
1121	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1122	 D5	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x163000000F4000B010E048001891212019C012100A0000000BA000001BB1212
1123	 D6	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x163000000F4000B010E048001891212019C012100A0000000BA000001BB1212
- stack 0: 0xF0
1124	 D8	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x163
1125	 D9	JUMP		 	 
- stack 0: 0x4F4
1126	 163	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x4F4
1127	 164	PUSH4	80000000	 	 
- stack 1: 0x4F4
- stack 0: 0x80000000
1128	 169	PUSH2	03A0	 	 
- stack 2: 0x4F4
- stack 1: 0x80000000
- stack 0: 0x3A0
1129	 16C	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F4
1130	 16D	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1131	 16F	ADD		 	 
- stack 0: 0x4F8
1132	 170	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1133	 171	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xF4000B010E048001891212019C012100A0000000BA000001BB121201CE0121
1134	 172	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0xF4000B010E048001891212019C012100A0000000BA000001BB121201CE0121
- stack 0: 0xF0
1135	 174	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xF4
1136	 175	JUMP		 	 
- stack 0: 0x4F8
1137	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4F8
1138	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1139	 F6	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xF4000B010E048001891212019C012100A0000000BA000001BB121201CE0121
1140	 F7	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0xF4000B010E048001891212019C012100A0000000BA000001BB121201CE0121
- stack 0: 0xE0
1141	 F9	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xF4000B
1142	 FA	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0xF4000B
- stack 0: 0xFFFF
1143	 FD	AND		 	 
- stack 1: 0x4F8
- stack 0: 0xB
1144	 FE	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0xB
- stack 0: 0x1
1145	 100	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0xB
1146	 101	PUSH2	0380	 	 
- stack 2: 0x4F8
- stack 1: 0xB
- stack 0: 0x380
1147	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x4F8
1148	 105	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1149	 107	ADD		 	 
- stack 0: 0x4FC
1150	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1151	 109	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x10E048001891212019C012100A0000000BA000001BB121201CE012100F4000C
1152	 10A	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x10E048001891212019C012100A0000000BA000001BB121201CE012100F4000C
- stack 0: 0xF0
1153	 10C	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x10E
1154	 10D	JUMP		 	 
- stack 0: 0x4FC
1155	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x4FC
1156	 10F	PUSH2	0060	 	 
- stack 1: 0x4FC
- stack 0: 0x60
1157	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x4FC
- stack 0: 0x7FFFFFFF80000000
1158	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x7FFFFFFF80000000
- stack 0: 0xFFFFFFFF
1159	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0x80000000
1160	 119	PUSH2	03A0	 	 
- stack 2: 0x4FC
- stack 1: 0x80000000
- stack 0: 0x3A0
1161	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x4FC
- stack 1: 0x80000000
- stack 0: 0x80000000
1162	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4FC
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
1163	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4FC
- stack 1: 0x80000000
- stack 0: 0x80000000
1164	 123	SUB		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1165	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x12C
1166	 127	JUMPI		 	 
- stack 0: 0x4FC
1167	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x4FC
- stack 0: 0x146
1168	 12B	JUMP		 	 
- stack 0: 0x4FC
1169	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x4FC
1170	 147	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1171	 149	ADD		 	 
- stack 0: 0x500
1172	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1173	 14B	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x1891212019C012100A0000000BA000001BB121201CE012100F4000C010E0460
1174	 14C	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x1891212019C012100A0000000BA000001BB121201CE012100F4000C010E0460
- stack 0: 0xF0
1175	 14E	SHR		 	 
- stack 1: 0x500
- stack 0: 0x189
1176	 14F	JUMP		 	 
- stack 0: 0x500
1177	 189	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x500
1178	 18A	PUSH4	21212000	 	 
- stack 1: 0x500
- stack 0: 0x21212000
1179	 18F	PUSH2	0020	 	 
- stack 2: 0x500
- stack 1: 0x21212000
- stack 0: 0x20
1180	 192	MSTORE		 	  ;; # store to x1
- stack 0: 0x500
1181	 193	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1182	 195	ADD		 	 
- stack 0: 0x504
1183	 196	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1184	 197	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x19C012100A0000000BA000001BB121201CE012100F4000C010E046001891212
1185	 198	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x19C012100A0000000BA000001BB121201CE012100F4000C010E046001891212
- stack 0: 0xF0
1186	 19A	SHR		 	 
- stack 1: 0x504
- stack 0: 0x19C
1187	 19B	JUMP		 	 
- stack 0: 0x504
1188	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,289(ignore imm)
- stack 0: 0x504
1189	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1190	 19E	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x19C012100A0000000BA000001BB121201CE012100F4000C010E046001891212
1191	 19F	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x19C012100A0000000BA000001BB121201CE012100F4000C010E046001891212
- stack 0: 0xE0
1192	 1A1	SHR		 	 
- stack 1: 0x504
- stack 0: 0x19C0121
1193	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x19C0121
- stack 0: 0xFFFF
1194	 1A5	AND		 	 
- stack 1: 0x504
- stack 0: 0x121
1195	 1A6	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0x121
- stack 0: 0x1
1196	 1A8	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0x121
1197	 1A9	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0x121
- stack 0: 0x20
1198	 1AC	MLOAD		 	  ;; # read from x1
- stack 2: 0x504
- stack 1: 0x121
- stack 0: 0x21212000
1199	 1AD	ADD		 	  ;; # ADDI 1
- stack 1: 0x504
- stack 0: 0x21212121
1200	 1AE	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0x21212121
- stack 0: 0x20
1201	 1B1	MSTORE		 	  ;; # store to x1
- stack 0: 0x504
1202	 1B2	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1203	 1B4	ADD		 	 
- stack 0: 0x508
1204	 1B5	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1205	 1B6	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xA0000000BA000001BB121201CE012100F4000C010E046001891212019C0121
1206	 1B7	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xA0000000BA000001BB121201CE012100F4000C010E046001891212019C0121
- stack 0: 0xF0
1207	 1B9	SHR		 	 
- stack 1: 0x508
- stack 0: 0xA0
1208	 1BA	JUMP		 	 
- stack 0: 0x508
1209	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x508
1210	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1211	 A2	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xA0000000BA000001BB121201CE012100F4000C010E046001891212019C0121
1212	 A3	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0xA0000000BA000001BB121201CE012100F4000C010E046001891212019C0121
- stack 0: 0xE0
1213	 A5	SHR		 	 
- stack 1: 0x508
- stack 0: 0xA00000
1214	 A6	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0xA00000
- stack 0: 0xFFFF
1215	 A9	AND		 	 
- stack 1: 0x508
- stack 0: 0x0
1216	 AA	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x1
1217	 AC	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0x0
1218	 AD	PUSH2	0040	 	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x40
1219	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x508
1220	 B1	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1221	 B3	ADD		 	 
- stack 0: 0x50C
1222	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1223	 B5	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xBA000001BB121201CE012100F4000C010E046001891212019C012100A00001
1224	 B6	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xBA000001BB121201CE012100F4000C010E046001891212019C012100A00001
- stack 0: 0xF0
1225	 B8	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xBA
1226	 B9	JUMP		 	 
- stack 0: 0x50C
1227	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x50C
1228	 BB	PUSH2	0020	 	 
- stack 1: 0x50C
- stack 0: 0x20
1229	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x50C
- stack 0: 0x21212121
1230	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x50C
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1231	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x50C
- stack 0: 0x21212121
1232	 C5	PUSH2	0040	 	 
- stack 2: 0x50C
- stack 1: 0x21212121
- stack 0: 0x40
1233	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x50C
- stack 1: 0x21212121
- stack 0: 0x0
1234	 C9	PUSH1	1F	 	 
- stack 3: 0x50C
- stack 2: 0x21212121
- stack 1: 0x0
- stack 0: 0x1F
1235	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x50C
- stack 1: 0x21212121
- stack 0: 0x0
1236	 CC	SHL		 	 
- stack 1: 0x50C
- stack 0: 0x21212121
1237	 CD	PUSH2	0060	 	 
- stack 2: 0x50C
- stack 1: 0x21212121
- stack 0: 0x60
1238	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x50C
1239	 D1	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1240	 D3	ADD		 	 
- stack 0: 0x510
1241	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1242	 D5	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1BB121201CE012100F4000C010E046001891212019C012100A0000100BA0000
1243	 D6	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x1BB121201CE012100F4000C010E046001891212019C012100A0000100BA0000
- stack 0: 0xF0
1244	 D8	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1BB
1245	 D9	JUMP		 	 
- stack 0: 0x510
1246	 1BB	JUMPDEST		 ;; __riscvimpl_LUI_21212eb7	  ;; # instr: lui t4,0x21212(ignore imm)
- stack 0: 0x510
1247	 1BC	PUSH4	21212000	 	 
- stack 1: 0x510
- stack 0: 0x21212000
1248	 1C1	PUSH2	03A0	 	 
- stack 2: 0x510
- stack 1: 0x21212000
- stack 0: 0x3A0
1249	 1C4	MSTORE		 	  ;; # store to x29
- stack 0: 0x510
1250	 1C5	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1251	 1C7	ADD		 	 
- stack 0: 0x514
1252	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1253	 1C9	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x1CE012100F4000C010E046001891212019C012100A0000100BA000001ED2424
1254	 1CA	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x1CE012100F4000C010E046001891212019C012100A0000100BA000001ED2424
- stack 0: 0xF0
1255	 1CC	SHR		 	 
- stack 1: 0x514
- stack 0: 0x1CE
1256	 1CD	JUMP		 	 
- stack 0: 0x514
1257	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,289(ignore imm)
- stack 0: 0x514
1258	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1259	 1D0	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x1CE012100F4000C010E046001891212019C012100A0000100BA000001ED2424
1260	 1D1	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x1CE012100F4000C010E046001891212019C012100A0000100BA000001ED2424
- stack 0: 0xE0
1261	 1D3	SHR		 	 
- stack 1: 0x514
- stack 0: 0x1CE0121
1262	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x1CE0121
- stack 0: 0xFFFF
1263	 1D7	AND		 	 
- stack 1: 0x514
- stack 0: 0x121
1264	 1D8	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x121
- stack 0: 0x1
1265	 1DA	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x121
1266	 1DB	PUSH2	03A0	 	 
- stack 2: 0x514
- stack 1: 0x121
- stack 0: 0x3A0
1267	 1DE	MLOAD		 	  ;; # read from x29
- stack 2: 0x514
- stack 1: 0x121
- stack 0: 0x21212000
1268	 1DF	ADD		 	  ;; # ADDI 29
- stack 1: 0x514
- stack 0: 0x21212121
1269	 1E0	PUSH2	03A0	 	 
- stack 2: 0x514
- stack 1: 0x21212121
- stack 0: 0x3A0
1270	 1E3	MSTORE		 	  ;; # store to x29
- stack 0: 0x514
1271	 1E4	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1272	 1E6	ADD		 	 
- stack 0: 0x518
1273	 1E7	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1274	 1E8	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xF4000C010E046001891212019C012100A0000100BA000001ED242401CE0242
1275	 1E9	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0xF4000C010E046001891212019C012100A0000100BA000001ED242401CE0242
- stack 0: 0xF0
1276	 1EB	SHR		 	 
- stack 1: 0x518
- stack 0: 0xF4
1277	 1EC	JUMP		 	 
- stack 0: 0x518
1278	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x518
1279	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1280	 F6	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xF4000C010E046001891212019C012100A0000100BA000001ED242401CE0242
1281	 F7	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0xF4000C010E046001891212019C012100A0000100BA000001ED242401CE0242
- stack 0: 0xE0
1282	 F9	SHR		 	 
- stack 1: 0x518
- stack 0: 0xF4000C
1283	 FA	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0xF4000C
- stack 0: 0xFFFF
1284	 FD	AND		 	 
- stack 1: 0x518
- stack 0: 0xC
1285	 FE	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0xC
- stack 0: 0x1
1286	 100	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0xC
1287	 101	PUSH2	0380	 	 
- stack 2: 0x518
- stack 1: 0xC
- stack 0: 0x380
1288	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x518
1289	 105	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1290	 107	ADD		 	 
- stack 0: 0x51C
1291	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1292	 109	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x10E046001891212019C012100A0000100BA000001ED242401CE024200F4000D
1293	 10A	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x10E046001891212019C012100A0000100BA000001ED242401CE024200F4000D
- stack 0: 0xF0
1294	 10C	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x10E
1295	 10D	JUMP		 	 
- stack 0: 0x51C
1296	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x51C
1297	 10F	PUSH2	0060	 	 
- stack 1: 0x51C
- stack 0: 0x60
1298	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x51C
- stack 0: 0x21212121
1299	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x51C
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1300	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x51C
- stack 0: 0x21212121
1301	 119	PUSH2	03A0	 	 
- stack 2: 0x51C
- stack 1: 0x21212121
- stack 0: 0x3A0
1302	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x51C
- stack 1: 0x21212121
- stack 0: 0x21212121
1303	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x51C
- stack 2: 0x21212121
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1304	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x51C
- stack 1: 0x21212121
- stack 0: 0x21212121
1305	 123	SUB		 	 
- stack 1: 0x51C
- stack 0: 0x0
1306	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x12C
1307	 127	JUMPI		 	 
- stack 0: 0x51C
1308	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x51C
- stack 0: 0x146
1309	 12B	JUMP		 	 
- stack 0: 0x51C
1310	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x51C
1311	 147	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1312	 149	ADD		 	 
- stack 0: 0x520
1313	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1314	 14B	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x1891212019C012100A0000100BA000001ED242401CE024200F4000D010E0440
1315	 14C	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x1891212019C012100A0000100BA000001ED242401CE024200F4000D010E0440
- stack 0: 0xF0
1316	 14E	SHR		 	 
- stack 1: 0x520
- stack 0: 0x189
1317	 14F	JUMP		 	 
- stack 0: 0x520
1318	 189	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x520
1319	 18A	PUSH4	21212000	 	 
- stack 1: 0x520
- stack 0: 0x21212000
1320	 18F	PUSH2	0020	 	 
- stack 2: 0x520
- stack 1: 0x21212000
- stack 0: 0x20
1321	 192	MSTORE		 	  ;; # store to x1
- stack 0: 0x520
1322	 193	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1323	 195	ADD		 	 
- stack 0: 0x524
1324	 196	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1325	 197	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x19C012100A0000100BA000001ED242401CE024200F4000D010E044001891212
1326	 198	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x19C012100A0000100BA000001ED242401CE024200F4000D010E044001891212
- stack 0: 0xF0
1327	 19A	SHR		 	 
- stack 1: 0x524
- stack 0: 0x19C
1328	 19B	JUMP		 	 
- stack 0: 0x524
1329	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,289(ignore imm)
- stack 0: 0x524
1330	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1331	 19E	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x19C012100A0000100BA000001ED242401CE024200F4000D010E044001891212
1332	 19F	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x19C012100A0000100BA000001ED242401CE024200F4000D010E044001891212
- stack 0: 0xE0
1333	 1A1	SHR		 	 
- stack 1: 0x524
- stack 0: 0x19C0121
1334	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x19C0121
- stack 0: 0xFFFF
1335	 1A5	AND		 	 
- stack 1: 0x524
- stack 0: 0x121
1336	 1A6	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0x121
- stack 0: 0x1
1337	 1A8	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0x121
1338	 1A9	PUSH2	0020	 	 
- stack 2: 0x524
- stack 1: 0x121
- stack 0: 0x20
1339	 1AC	MLOAD		 	  ;; # read from x1
- stack 2: 0x524
- stack 1: 0x121
- stack 0: 0x21212000
1340	 1AD	ADD		 	  ;; # ADDI 1
- stack 1: 0x524
- stack 0: 0x21212121
1341	 1AE	PUSH2	0020	 	 
- stack 2: 0x524
- stack 1: 0x21212121
- stack 0: 0x20
1342	 1B1	MSTORE		 	  ;; # store to x1
- stack 0: 0x524
1343	 1B2	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1344	 1B4	ADD		 	 
- stack 0: 0x528
1345	 1B5	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1346	 1B6	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xA0000100BA000001ED242401CE024200F4000D010E044001891212019C0121
1347	 1B7	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0xA0000100BA000001ED242401CE024200F4000D010E044001891212019C0121
- stack 0: 0xF0
1348	 1B9	SHR		 	 
- stack 1: 0x528
- stack 0: 0xA0
1349	 1BA	JUMP		 	 
- stack 0: 0x528
1350	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x528
1351	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1352	 A2	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xA0000100BA000001ED242401CE024200F4000D010E044001891212019C0121
1353	 A3	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0xA0000100BA000001ED242401CE024200F4000D010E044001891212019C0121
- stack 0: 0xE0
1354	 A5	SHR		 	 
- stack 1: 0x528
- stack 0: 0xA00001
1355	 A6	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0xA00001
- stack 0: 0xFFFF
1356	 A9	AND		 	 
- stack 1: 0x528
- stack 0: 0x1
1357	 AA	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x1
1358	 AC	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0x1
1359	 AD	PUSH2	0040	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x40
1360	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x528
1361	 B1	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1362	 B3	ADD		 	 
- stack 0: 0x52C
1363	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1364	 B5	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xBA000001ED242401CE024200F4000D010E044001891212019C012100A00007
1365	 B6	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0xBA000001ED242401CE024200F4000D010E044001891212019C012100A00007
- stack 0: 0xF0
1366	 B8	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xBA
1367	 B9	JUMP		 	 
- stack 0: 0x52C
1368	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x52C
1369	 BB	PUSH2	0020	 	 
- stack 1: 0x52C
- stack 0: 0x20
1370	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x52C
- stack 0: 0x21212121
1371	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x52C
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1372	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x52C
- stack 0: 0x21212121
1373	 C5	PUSH2	0040	 	 
- stack 2: 0x52C
- stack 1: 0x21212121
- stack 0: 0x40
1374	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x52C
- stack 1: 0x21212121
- stack 0: 0x1
1375	 C9	PUSH1	1F	 	 
- stack 3: 0x52C
- stack 2: 0x21212121
- stack 1: 0x1
- stack 0: 0x1F
1376	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x52C
- stack 1: 0x21212121
- stack 0: 0x1
1377	 CC	SHL		 	 
- stack 1: 0x52C
- stack 0: 0x42424242
1378	 CD	PUSH2	0060	 	 
- stack 2: 0x52C
- stack 1: 0x42424242
- stack 0: 0x60
1379	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x52C
1380	 D1	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1381	 D3	ADD		 	 
- stack 0: 0x530
1382	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1383	 D5	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x1ED242401CE024200F4000D010E044001891212019C012100A0000700BA0000
1384	 D6	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x1ED242401CE024200F4000D010E044001891212019C012100A0000700BA0000
- stack 0: 0xF0
1385	 D8	SHR		 	 
- stack 1: 0x530
- stack 0: 0x1ED
1386	 D9	JUMP		 	 
- stack 0: 0x530
1387	 1ED	JUMPDEST		 ;; __riscvimpl_LUI_42424eb7	  ;; # instr: lui t4,0x42424(ignore imm)
- stack 0: 0x530
1388	 1EE	PUSH4	42424000	 	 
- stack 1: 0x530
- stack 0: 0x42424000
1389	 1F3	PUSH2	03A0	 	 
- stack 2: 0x530
- stack 1: 0x42424000
- stack 0: 0x3A0
1390	 1F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x530
1391	 1F7	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1392	 1F9	ADD		 	 
- stack 0: 0x534
1393	 1FA	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1394	 1FB	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1CE024200F4000D010E044001891212019C012100A0000700BA000002000909
1395	 1FC	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x1CE024200F4000D010E044001891212019C012100A0000700BA000002000909
- stack 0: 0xF0
1396	 1FE	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1CE
1397	 1FF	JUMP		 	 
- stack 0: 0x534
1398	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,289(ignore imm)
- stack 0: 0x534
1399	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1400	 1D0	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1CE024200F4000D010E044001891212019C012100A0000700BA000002000909
1401	 1D1	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x1CE024200F4000D010E044001891212019C012100A0000700BA000002000909
- stack 0: 0xE0
1402	 1D3	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1CE0242
1403	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x1CE0242
- stack 0: 0xFFFF
1404	 1D7	AND		 	 
- stack 1: 0x534
- stack 0: 0x242
1405	 1D8	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0x242
- stack 0: 0x1
1406	 1DA	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0x242
1407	 1DB	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0x242
- stack 0: 0x3A0
1408	 1DE	MLOAD		 	  ;; # read from x29
- stack 2: 0x534
- stack 1: 0x242
- stack 0: 0x42424000
1409	 1DF	ADD		 	  ;; # ADDI 29
- stack 1: 0x534
- stack 0: 0x42424242
1410	 1E0	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0x42424242
- stack 0: 0x3A0
1411	 1E3	MSTORE		 	  ;; # store to x29
- stack 0: 0x534
1412	 1E4	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1413	 1E6	ADD		 	 
- stack 0: 0x538
1414	 1E7	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1415	 1E8	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0xF4000D010E044001891212019C012100A0000700BA00000200090901CE0080
1416	 1E9	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0xF4000D010E044001891212019C012100A0000700BA00000200090901CE0080
- stack 0: 0xF0
1417	 1EB	SHR		 	 
- stack 1: 0x538
- stack 0: 0xF4
1418	 1EC	JUMP		 	 
- stack 0: 0x538
1419	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x538
1420	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1421	 F6	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0xF4000D010E044001891212019C012100A0000700BA00000200090901CE0080
1422	 F7	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0xF4000D010E044001891212019C012100A0000700BA00000200090901CE0080
- stack 0: 0xE0
1423	 F9	SHR		 	 
- stack 1: 0x538
- stack 0: 0xF4000D
1424	 FA	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0xF4000D
- stack 0: 0xFFFF
1425	 FD	AND		 	 
- stack 1: 0x538
- stack 0: 0xD
1426	 FE	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0xD
- stack 0: 0x1
1427	 100	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0xD
1428	 101	PUSH2	0380	 	 
- stack 2: 0x538
- stack 1: 0xD
- stack 0: 0x380
1429	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x538
1430	 105	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1431	 107	ADD		 	 
- stack 0: 0x53C
1432	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1433	 109	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x10E044001891212019C012100A0000700BA00000200090901CE008000F4000E
1434	 10A	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x10E044001891212019C012100A0000700BA00000200090901CE008000F4000E
- stack 0: 0xF0
1435	 10C	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x10E
1436	 10D	JUMP		 	 
- stack 0: 0x53C
1437	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x53C
1438	 10F	PUSH2	0060	 	 
- stack 1: 0x53C
- stack 0: 0x60
1439	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x53C
- stack 0: 0x42424242
1440	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x53C
- stack 1: 0x42424242
- stack 0: 0xFFFFFFFF
1441	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x53C
- stack 0: 0x42424242
1442	 119	PUSH2	03A0	 	 
- stack 2: 0x53C
- stack 1: 0x42424242
- stack 0: 0x3A0
1443	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x53C
- stack 1: 0x42424242
- stack 0: 0x42424242
1444	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x53C
- stack 2: 0x42424242
- stack 1: 0x42424242
- stack 0: 0xFFFFFFFF
1445	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x53C
- stack 1: 0x42424242
- stack 0: 0x42424242
1446	 123	SUB		 	 
- stack 1: 0x53C
- stack 0: 0x0
1447	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0x12C
1448	 127	JUMPI		 	 
- stack 0: 0x53C
1449	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x53C
- stack 0: 0x146
1450	 12B	JUMP		 	 
- stack 0: 0x53C
1451	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x53C
1452	 147	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1453	 149	ADD		 	 
- stack 0: 0x540
1454	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1455	 14B	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x1891212019C012100A0000700BA00000200090901CE008000F4000E010E0420
1456	 14C	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x1891212019C012100A0000700BA00000200090901CE008000F4000E010E0420
- stack 0: 0xF0
1457	 14E	SHR		 	 
- stack 1: 0x540
- stack 0: 0x189
1458	 14F	JUMP		 	 
- stack 0: 0x540
1459	 189	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x540
1460	 18A	PUSH4	21212000	 	 
- stack 1: 0x540
- stack 0: 0x21212000
1461	 18F	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0x21212000
- stack 0: 0x20
1462	 192	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
1463	 193	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1464	 195	ADD		 	 
- stack 0: 0x544
1465	 196	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1466	 197	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x19C012100A0000700BA00000200090901CE008000F4000E010E042001891212
1467	 198	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x19C012100A0000700BA00000200090901CE008000F4000E010E042001891212
- stack 0: 0xF0
1468	 19A	SHR		 	 
- stack 1: 0x544
- stack 0: 0x19C
1469	 19B	JUMP		 	 
- stack 0: 0x544
1470	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,289(ignore imm)
- stack 0: 0x544
1471	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1472	 19E	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x19C012100A0000700BA00000200090901CE008000F4000E010E042001891212
1473	 19F	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x19C012100A0000700BA00000200090901CE008000F4000E010E042001891212
- stack 0: 0xE0
1474	 1A1	SHR		 	 
- stack 1: 0x544
- stack 0: 0x19C0121
1475	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x19C0121
- stack 0: 0xFFFF
1476	 1A5	AND		 	 
- stack 1: 0x544
- stack 0: 0x121
1477	 1A6	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x121
- stack 0: 0x1
1478	 1A8	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x121
1479	 1A9	PUSH2	0020	 	 
- stack 2: 0x544
- stack 1: 0x121
- stack 0: 0x20
1480	 1AC	MLOAD		 	  ;; # read from x1
- stack 2: 0x544
- stack 1: 0x121
- stack 0: 0x21212000
1481	 1AD	ADD		 	  ;; # ADDI 1
- stack 1: 0x544
- stack 0: 0x21212121
1482	 1AE	PUSH2	0020	 	 
- stack 2: 0x544
- stack 1: 0x21212121
- stack 0: 0x20
1483	 1B1	MSTORE		 	  ;; # store to x1
- stack 0: 0x544
1484	 1B2	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1485	 1B4	ADD		 	 
- stack 0: 0x548
1486	 1B5	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1487	 1B6	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xA0000700BA00000200090901CE008000F4000E010E042001891212019C0121
1488	 1B7	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0xA0000700BA00000200090901CE008000F4000E010E042001891212019C0121
- stack 0: 0xF0
1489	 1B9	SHR		 	 
- stack 1: 0x548
- stack 0: 0xA0
1490	 1BA	JUMP		 	 
- stack 0: 0x548
1491	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x548
1492	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1493	 A2	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xA0000700BA00000200090901CE008000F4000E010E042001891212019C0121
1494	 A3	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0xA0000700BA00000200090901CE008000F4000E010E042001891212019C0121
- stack 0: 0xE0
1495	 A5	SHR		 	 
- stack 1: 0x548
- stack 0: 0xA00007
1496	 A6	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0xA00007
- stack 0: 0xFFFF
1497	 A9	AND		 	 
- stack 1: 0x548
- stack 0: 0x7
1498	 AA	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x7
- stack 0: 0x1
1499	 AC	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x7
1500	 AD	PUSH2	0040	 	 
- stack 2: 0x548
- stack 1: 0x7
- stack 0: 0x40
1501	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x548
1502	 B1	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1503	 B3	ADD		 	 
- stack 0: 0x54C
1504	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1505	 B5	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xBA00000200090901CE008000F4000E010E042001891212019C012100A0000E
1506	 B6	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xBA00000200090901CE008000F4000E010E042001891212019C012100A0000E
- stack 0: 0xF0
1507	 B8	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xBA
1508	 B9	JUMP		 	 
- stack 0: 0x54C
1509	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x54C
1510	 BB	PUSH2	0020	 	 
- stack 1: 0x54C
- stack 0: 0x20
1511	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x54C
- stack 0: 0x21212121
1512	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x54C
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1513	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x54C
- stack 0: 0x21212121
1514	 C5	PUSH2	0040	 	 
- stack 2: 0x54C
- stack 1: 0x21212121
- stack 0: 0x40
1515	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x54C
- stack 1: 0x21212121
- stack 0: 0x7
1516	 C9	PUSH1	1F	 	 
- stack 3: 0x54C
- stack 2: 0x21212121
- stack 1: 0x7
- stack 0: 0x1F
1517	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x54C
- stack 1: 0x21212121
- stack 0: 0x7
1518	 CC	SHL		 	 
- stack 1: 0x54C
- stack 0: 0x1090909080
1519	 CD	PUSH2	0060	 	 
- stack 2: 0x54C
- stack 1: 0x1090909080
- stack 0: 0x60
1520	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x54C
1521	 D1	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1522	 D3	ADD		 	 
- stack 0: 0x550
1523	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1524	 D5	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x200090901CE008000F4000E010E042001891212019C012100A0000E00BA0000
1525	 D6	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x200090901CE008000F4000E010E042001891212019C012100A0000E00BA0000
- stack 0: 0xF0
1526	 D8	SHR		 	 
- stack 1: 0x550
- stack 0: 0x200
1527	 D9	JUMP		 	 
- stack 0: 0x550
1528	 200	JUMPDEST		 ;; __riscvimpl_LUI_90909eb7	  ;; # instr: lui t4,0x90909(ignore imm)
- stack 0: 0x550
1529	 201	PUSH4	90909000	 	 
- stack 1: 0x550
- stack 0: 0x90909000
1530	 206	PUSH2	03A0	 	 
- stack 2: 0x550
- stack 1: 0x90909000
- stack 0: 0x3A0
1531	 209	MSTORE		 	  ;; # store to x29
- stack 0: 0x550
1532	 20A	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1533	 20C	ADD		 	 
- stack 0: 0x554
1534	 20D	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1535	 20E	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x1CE008000F4000E010E042001891212019C012100A0000E00BA000002138484
1536	 20F	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x1CE008000F4000E010E042001891212019C012100A0000E00BA000002138484
- stack 0: 0xF0
1537	 211	SHR		 	 
- stack 1: 0x554
- stack 0: 0x1CE
1538	 212	JUMP		 	 
- stack 0: 0x554
1539	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,289(ignore imm)
- stack 0: 0x554
1540	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1541	 1D0	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x1CE008000F4000E010E042001891212019C012100A0000E00BA000002138484
1542	 1D1	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x1CE008000F4000E010E042001891212019C012100A0000E00BA000002138484
- stack 0: 0xE0
1543	 1D3	SHR		 	 
- stack 1: 0x554
- stack 0: 0x1CE0080
1544	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x1CE0080
- stack 0: 0xFFFF
1545	 1D7	AND		 	 
- stack 1: 0x554
- stack 0: 0x80
1546	 1D8	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x80
- stack 0: 0x1
1547	 1DA	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x80
1548	 1DB	PUSH2	03A0	 	 
- stack 2: 0x554
- stack 1: 0x80
- stack 0: 0x3A0
1549	 1DE	MLOAD		 	  ;; # read from x29
- stack 2: 0x554
- stack 1: 0x80
- stack 0: 0x90909000
1550	 1DF	ADD		 	  ;; # ADDI 29
- stack 1: 0x554
- stack 0: 0x90909080
1551	 1E0	PUSH2	03A0	 	 
- stack 2: 0x554
- stack 1: 0x90909080
- stack 0: 0x3A0
1552	 1E3	MSTORE		 	  ;; # store to x29
- stack 0: 0x554
1553	 1E4	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1554	 1E6	ADD		 	 
- stack 0: 0x558
1555	 1E7	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1556	 1E8	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xF4000E010E042001891212019C012100A0000E00BA00000213848400F4000F
1557	 1E9	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xF4000E010E042001891212019C012100A0000E00BA00000213848400F4000F
- stack 0: 0xF0
1558	 1EB	SHR		 	 
- stack 1: 0x558
- stack 0: 0xF4
1559	 1EC	JUMP		 	 
- stack 0: 0x558
1560	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x558
1561	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1562	 F6	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xF4000E010E042001891212019C012100A0000E00BA00000213848400F4000F
1563	 F7	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0xF4000E010E042001891212019C012100A0000E00BA00000213848400F4000F
- stack 0: 0xE0
1564	 F9	SHR		 	 
- stack 1: 0x558
- stack 0: 0xF4000E
1565	 FA	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0xF4000E
- stack 0: 0xFFFF
1566	 FD	AND		 	 
- stack 1: 0x558
- stack 0: 0xE
1567	 FE	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0xE
- stack 0: 0x1
1568	 100	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0xE
1569	 101	PUSH2	0380	 	 
- stack 2: 0x558
- stack 1: 0xE
- stack 0: 0x380
1570	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x558
1571	 105	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1572	 107	ADD		 	 
- stack 0: 0x55C
1573	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1574	 109	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x10E042001891212019C012100A0000E00BA00000213848400F4000F010E0404
1575	 10A	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x10E042001891212019C012100A0000E00BA00000213848400F4000F010E0404
- stack 0: 0xF0
1576	 10C	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x10E
1577	 10D	JUMP		 	 
- stack 0: 0x55C
1578	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x55C
1579	 10F	PUSH2	0060	 	 
- stack 1: 0x55C
- stack 0: 0x60
1580	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x55C
- stack 0: 0x1090909080
1581	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x55C
- stack 1: 0x1090909080
- stack 0: 0xFFFFFFFF
1582	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x55C
- stack 0: 0x90909080
1583	 119	PUSH2	03A0	 	 
- stack 2: 0x55C
- stack 1: 0x90909080
- stack 0: 0x3A0
1584	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x55C
- stack 1: 0x90909080
- stack 0: 0x90909080
1585	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x55C
- stack 2: 0x90909080
- stack 1: 0x90909080
- stack 0: 0xFFFFFFFF
1586	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x55C
- stack 1: 0x90909080
- stack 0: 0x90909080
1587	 123	SUB		 	 
- stack 1: 0x55C
- stack 0: 0x0
1588	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0x12C
1589	 127	JUMPI		 	 
- stack 0: 0x55C
1590	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x55C
- stack 0: 0x146
1591	 12B	JUMP		 	 
- stack 0: 0x55C
1592	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x55C
1593	 147	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1594	 149	ADD		 	 
- stack 0: 0x560
1595	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1596	 14B	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x1891212019C012100A0000E00BA00000213848400F4000F010E040401891212
1597	 14C	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x1891212019C012100A0000E00BA00000213848400F4000F010E040401891212
- stack 0: 0xF0
1598	 14E	SHR		 	 
- stack 1: 0x560
- stack 0: 0x189
1599	 14F	JUMP		 	 
- stack 0: 0x560
1600	 189	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x560
1601	 18A	PUSH4	21212000	 	 
- stack 1: 0x560
- stack 0: 0x21212000
1602	 18F	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0x21212000
- stack 0: 0x20
1603	 192	MSTORE		 	  ;; # store to x1
- stack 0: 0x560
1604	 193	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1605	 195	ADD		 	 
- stack 0: 0x564
1606	 196	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1607	 197	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x19C012100A0000E00BA00000213848400F4000F010E040401891212019C0121
1608	 198	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x19C012100A0000E00BA00000213848400F4000F010E040401891212019C0121
- stack 0: 0xF0
1609	 19A	SHR		 	 
- stack 1: 0x564
- stack 0: 0x19C
1610	 19B	JUMP		 	 
- stack 0: 0x564
1611	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,289(ignore imm)
- stack 0: 0x564
1612	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
1613	 19E	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x19C012100A0000E00BA00000213848400F4000F010E040401891212019C0121
1614	 19F	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x19C012100A0000E00BA00000213848400F4000F010E040401891212019C0121
- stack 0: 0xE0
1615	 1A1	SHR		 	 
- stack 1: 0x564
- stack 0: 0x19C0121
1616	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x19C0121
- stack 0: 0xFFFF
1617	 1A5	AND		 	 
- stack 1: 0x564
- stack 0: 0x121
1618	 1A6	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0x121
- stack 0: 0x1
1619	 1A8	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0x121
1620	 1A9	PUSH2	0020	 	 
- stack 2: 0x564
- stack 1: 0x121
- stack 0: 0x20
1621	 1AC	MLOAD		 	  ;; # read from x1
- stack 2: 0x564
- stack 1: 0x121
- stack 0: 0x21212000
1622	 1AD	ADD		 	  ;; # ADDI 1
- stack 1: 0x564
- stack 0: 0x21212121
1623	 1AE	PUSH2	0020	 	 
- stack 2: 0x564
- stack 1: 0x21212121
- stack 0: 0x20
1624	 1B1	MSTORE		 	  ;; # store to x1
- stack 0: 0x564
1625	 1B2	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1626	 1B4	ADD		 	 
- stack 0: 0x568
1627	 1B5	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1628	 1B6	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xA0000E00BA00000213848400F4000F010E040401891212019C012100A0001F
1629	 1B7	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0xA0000E00BA00000213848400F4000F010E040401891212019C012100A0001F
- stack 0: 0xF0
1630	 1B9	SHR		 	 
- stack 1: 0x568
- stack 0: 0xA0
1631	 1BA	JUMP		 	 
- stack 0: 0x568
1632	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x568
1633	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1634	 A2	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xA0000E00BA00000213848400F4000F010E040401891212019C012100A0001F
1635	 A3	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0xA0000E00BA00000213848400F4000F010E040401891212019C012100A0001F
- stack 0: 0xE0
1636	 A5	SHR		 	 
- stack 1: 0x568
- stack 0: 0xA0000E
1637	 A6	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0xA0000E
- stack 0: 0xFFFF
1638	 A9	AND		 	 
- stack 1: 0x568
- stack 0: 0xE
1639	 AA	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0xE
- stack 0: 0x1
1640	 AC	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0xE
1641	 AD	PUSH2	0040	 	 
- stack 2: 0x568
- stack 1: 0xE
- stack 0: 0x40
1642	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x568
1643	 B1	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1644	 B3	ADD		 	 
- stack 0: 0x56C
1645	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1646	 B5	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0xBA00000213848400F4000F010E040401891212019C012100A0001F00BA0000
1647	 B6	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0xBA00000213848400F4000F010E040401891212019C012100A0001F00BA0000
- stack 0: 0xF0
1648	 B8	SHR		 	 
- stack 1: 0x56C
- stack 0: 0xBA
1649	 B9	JUMP		 	 
- stack 0: 0x56C
1650	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x56C
1651	 BB	PUSH2	0020	 	 
- stack 1: 0x56C
- stack 0: 0x20
1652	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x56C
- stack 0: 0x21212121
1653	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x56C
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1654	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x56C
- stack 0: 0x21212121
1655	 C5	PUSH2	0040	 	 
- stack 2: 0x56C
- stack 1: 0x21212121
- stack 0: 0x40
1656	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x56C
- stack 1: 0x21212121
- stack 0: 0xE
1657	 C9	PUSH1	1F	 	 
- stack 3: 0x56C
- stack 2: 0x21212121
- stack 1: 0xE
- stack 0: 0x1F
1658	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x56C
- stack 1: 0x21212121
- stack 0: 0xE
1659	 CC	SHL		 	 
- stack 1: 0x56C
- stack 0: 0x84848484000
1660	 CD	PUSH2	0060	 	 
- stack 2: 0x56C
- stack 1: 0x84848484000
- stack 0: 0x60
1661	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x56C
1662	 D1	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1663	 D3	ADD		 	 
- stack 0: 0x570
1664	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1665	 D5	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x213848400F4000F010E040401891212019C012100A0001F00BA000001630000
1666	 D6	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x213848400F4000F010E040401891212019C012100A0001F00BA000001630000
- stack 0: 0xF0
1667	 D8	SHR		 	 
- stack 1: 0x570
- stack 0: 0x213
1668	 D9	JUMP		 	 
- stack 0: 0x570
1669	 213	JUMPDEST		 ;; __riscvimpl_LUI_48484eb7	  ;; # instr: lui t4,0x48484(ignore imm)
- stack 0: 0x570
1670	 214	PUSH4	48484000	 	 
- stack 1: 0x570
- stack 0: 0x48484000
1671	 219	PUSH2	03A0	 	 
- stack 2: 0x570
- stack 1: 0x48484000
- stack 0: 0x3A0
1672	 21C	MSTORE		 	  ;; # store to x29
- stack 0: 0x570
1673	 21D	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1674	 21F	ADD		 	 
- stack 0: 0x574
1675	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1676	 221	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xF4000F010E040401891212019C012100A0001F00BA00000163000000F40010
1677	 222	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0xF4000F010E040401891212019C012100A0001F00BA00000163000000F40010
- stack 0: 0xF0
1678	 224	SHR		 	 
- stack 1: 0x574
- stack 0: 0xF4
1679	 225	JUMP		 	 
- stack 0: 0x574
1680	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x574
1681	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1682	 F6	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xF4000F010E040401891212019C012100A0001F00BA00000163000000F40010
1683	 F7	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0xF4000F010E040401891212019C012100A0001F00BA00000163000000F40010
- stack 0: 0xE0
1684	 F9	SHR		 	 
- stack 1: 0x574
- stack 0: 0xF4000F
1685	 FA	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0xF4000F
- stack 0: 0xFFFF
1686	 FD	AND		 	 
- stack 1: 0x574
- stack 0: 0xF
1687	 FE	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0xF
- stack 0: 0x1
1688	 100	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0xF
1689	 101	PUSH2	0380	 	 
- stack 2: 0x574
- stack 1: 0xF
- stack 0: 0x380
1690	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x574
1691	 105	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1692	 107	ADD		 	 
- stack 0: 0x578
1693	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1694	 109	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x10E040401891212019C012100A0001F00BA00000163000000F40010010E03E8
1695	 10A	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x10E040401891212019C012100A0001F00BA00000163000000F40010010E03E8
- stack 0: 0xF0
1696	 10C	SHR		 	 
- stack 1: 0x578
- stack 0: 0x10E
1697	 10D	JUMP		 	 
- stack 0: 0x578
1698	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x578
1699	 10F	PUSH2	0060	 	 
- stack 1: 0x578
- stack 0: 0x60
1700	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x578
- stack 0: 0x84848484000
1701	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x578
- stack 1: 0x84848484000
- stack 0: 0xFFFFFFFF
1702	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x578
- stack 0: 0x48484000
1703	 119	PUSH2	03A0	 	 
- stack 2: 0x578
- stack 1: 0x48484000
- stack 0: 0x3A0
1704	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x578
- stack 1: 0x48484000
- stack 0: 0x48484000
1705	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x578
- stack 2: 0x48484000
- stack 1: 0x48484000
- stack 0: 0xFFFFFFFF
1706	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x578
- stack 1: 0x48484000
- stack 0: 0x48484000
1707	 123	SUB		 	 
- stack 1: 0x578
- stack 0: 0x0
1708	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x12C
1709	 127	JUMPI		 	 
- stack 0: 0x578
1710	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x578
- stack 0: 0x146
1711	 12B	JUMP		 	 
- stack 0: 0x578
1712	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x578
1713	 147	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1714	 149	ADD		 	 
- stack 0: 0x57C
1715	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1716	 14B	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1891212019C012100A0001F00BA00000163000000F40010010E03E801891212
1717	 14C	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x1891212019C012100A0001F00BA00000163000000F40010010E03E801891212
- stack 0: 0xF0
1718	 14E	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x189
1719	 14F	JUMP		 	 
- stack 0: 0x57C
1720	 189	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x57C
1721	 18A	PUSH4	21212000	 	 
- stack 1: 0x57C
- stack 0: 0x21212000
1722	 18F	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0x21212000
- stack 0: 0x20
1723	 192	MSTORE		 	  ;; # store to x1
- stack 0: 0x57C
1724	 193	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1725	 195	ADD		 	 
- stack 0: 0x580
1726	 196	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1727	 197	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x19C012100A0001F00BA00000163000000F40010010E03E801891212019C0121
1728	 198	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x19C012100A0001F00BA00000163000000F40010010E03E801891212019C0121
- stack 0: 0xF0
1729	 19A	SHR		 	 
- stack 1: 0x580
- stack 0: 0x19C
1730	 19B	JUMP		 	 
- stack 0: 0x580
1731	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,289(ignore imm)
- stack 0: 0x580
1732	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
1733	 19E	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x19C012100A0001F00BA00000163000000F40010010E03E801891212019C0121
1734	 19F	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x19C012100A0001F00BA00000163000000F40010010E03E801891212019C0121
- stack 0: 0xE0
1735	 1A1	SHR		 	 
- stack 1: 0x580
- stack 0: 0x19C0121
1736	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x19C0121
- stack 0: 0xFFFF
1737	 1A5	AND		 	 
- stack 1: 0x580
- stack 0: 0x121
1738	 1A6	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x121
- stack 0: 0x1
1739	 1A8	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x121
1740	 1A9	PUSH2	0020	 	 
- stack 2: 0x580
- stack 1: 0x121
- stack 0: 0x20
1741	 1AC	MLOAD		 	  ;; # read from x1
- stack 2: 0x580
- stack 1: 0x121
- stack 0: 0x21212000
1742	 1AD	ADD		 	  ;; # ADDI 1
- stack 1: 0x580
- stack 0: 0x21212121
1743	 1AE	PUSH2	0020	 	 
- stack 2: 0x580
- stack 1: 0x21212121
- stack 0: 0x20
1744	 1B1	MSTORE		 	  ;; # store to x1
- stack 0: 0x580
1745	 1B2	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1746	 1B4	ADD		 	 
- stack 0: 0x584
1747	 1B5	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1748	 1B6	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xA0001F00BA00000163000000F40010010E03E801891212019C012100A0FFE0
1749	 1B7	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xA0001F00BA00000163000000F40010010E03E801891212019C012100A0FFE0
- stack 0: 0xF0
1750	 1B9	SHR		 	 
- stack 1: 0x584
- stack 0: 0xA0
1751	 1BA	JUMP		 	 
- stack 0: 0x584
1752	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x584
1753	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
1754	 A2	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xA0001F00BA00000163000000F40010010E03E801891212019C012100A0FFE0
1755	 A3	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0xA0001F00BA00000163000000F40010010E03E801891212019C012100A0FFE0
- stack 0: 0xE0
1756	 A5	SHR		 	 
- stack 1: 0x584
- stack 0: 0xA0001F
1757	 A6	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0xA0001F
- stack 0: 0xFFFF
1758	 A9	AND		 	 
- stack 1: 0x584
- stack 0: 0x1F
1759	 AA	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x1F
- stack 0: 0x1
1760	 AC	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x1F
1761	 AD	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0x1F
- stack 0: 0x40
1762	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x584
1763	 B1	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1764	 B3	ADD		 	 
- stack 0: 0x588
1765	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1766	 B5	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xBA00000163000000F40010010E03E801891212019C012100A0FFE000BA0000
1767	 B6	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xBA00000163000000F40010010E03E801891212019C012100A0FFE000BA0000
- stack 0: 0xF0
1768	 B8	SHR		 	 
- stack 1: 0x588
- stack 0: 0xBA
1769	 B9	JUMP		 	 
- stack 0: 0x588
1770	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x588
1771	 BB	PUSH2	0020	 	 
- stack 1: 0x588
- stack 0: 0x20
1772	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x588
- stack 0: 0x21212121
1773	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1774	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0x21212121
1775	 C5	PUSH2	0040	 	 
- stack 2: 0x588
- stack 1: 0x21212121
- stack 0: 0x40
1776	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x588
- stack 1: 0x21212121
- stack 0: 0x1F
1777	 C9	PUSH1	1F	 	 
- stack 3: 0x588
- stack 2: 0x21212121
- stack 1: 0x1F
- stack 0: 0x1F
1778	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x588
- stack 1: 0x21212121
- stack 0: 0x1F
1779	 CC	SHL		 	 
- stack 1: 0x588
- stack 0: 0x1090909080000000
1780	 CD	PUSH2	0060	 	 
- stack 2: 0x588
- stack 1: 0x1090909080000000
- stack 0: 0x60
1781	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x588
1782	 D1	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
1783	 D3	ADD		 	 
- stack 0: 0x58C
1784	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
1785	 D5	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x163000000F40010010E03E801891212019C012100A0FFE000BA000001BB1212
1786	 D6	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x163000000F40010010E03E801891212019C012100A0FFE000BA000001BB1212
- stack 0: 0xF0
1787	 D8	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x163
1788	 D9	JUMP		 	 
- stack 0: 0x58C
1789	 163	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x58C
1790	 164	PUSH4	80000000	 	 
- stack 1: 0x58C
- stack 0: 0x80000000
1791	 169	PUSH2	03A0	 	 
- stack 2: 0x58C
- stack 1: 0x80000000
- stack 0: 0x3A0
1792	 16C	MSTORE		 	  ;; # store to x29
- stack 0: 0x58C
1793	 16D	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
1794	 16F	ADD		 	 
- stack 0: 0x590
1795	 170	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
1796	 171	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0xF40010010E03E801891212019C012100A0FFE000BA000001BB121201CE0121
1797	 172	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0xF40010010E03E801891212019C012100A0FFE000BA000001BB121201CE0121
- stack 0: 0xF0
1798	 174	SHR		 	 
- stack 1: 0x590
- stack 0: 0xF4
1799	 175	JUMP		 	 
- stack 0: 0x590
1800	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x590
1801	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
1802	 F6	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0xF40010010E03E801891212019C012100A0FFE000BA000001BB121201CE0121
1803	 F7	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0xF40010010E03E801891212019C012100A0FFE000BA000001BB121201CE0121
- stack 0: 0xE0
1804	 F9	SHR		 	 
- stack 1: 0x590
- stack 0: 0xF40010
1805	 FA	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0xF40010
- stack 0: 0xFFFF
1806	 FD	AND		 	 
- stack 1: 0x590
- stack 0: 0x10
1807	 FE	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x10
- stack 0: 0x1
1808	 100	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x10
1809	 101	PUSH2	0380	 	 
- stack 2: 0x590
- stack 1: 0x10
- stack 0: 0x380
1810	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x590
1811	 105	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
1812	 107	ADD		 	 
- stack 0: 0x594
1813	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
1814	 109	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x10E03E801891212019C012100A0FFE000BA000001BB121201CE012100F40011
1815	 10A	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x10E03E801891212019C012100A0FFE000BA000001BB121201CE012100F40011
- stack 0: 0xF0
1816	 10C	SHR		 	 
- stack 1: 0x594
- stack 0: 0x10E
1817	 10D	JUMP		 	 
- stack 0: 0x594
1818	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x594
1819	 10F	PUSH2	0060	 	 
- stack 1: 0x594
- stack 0: 0x60
1820	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x594
- stack 0: 0x1090909080000000
1821	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x594
- stack 1: 0x1090909080000000
- stack 0: 0xFFFFFFFF
1822	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x594
- stack 0: 0x80000000
1823	 119	PUSH2	03A0	 	 
- stack 2: 0x594
- stack 1: 0x80000000
- stack 0: 0x3A0
1824	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x594
- stack 1: 0x80000000
- stack 0: 0x80000000
1825	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x594
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
1826	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x594
- stack 1: 0x80000000
- stack 0: 0x80000000
1827	 123	SUB		 	 
- stack 1: 0x594
- stack 0: 0x0
1828	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x12C
1829	 127	JUMPI		 	 
- stack 0: 0x594
1830	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x594
- stack 0: 0x146
1831	 12B	JUMP		 	 
- stack 0: 0x594
1832	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x594
1833	 147	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
1834	 149	ADD		 	 
- stack 0: 0x598
1835	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
1836	 14B	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1891212019C012100A0FFE000BA000001BB121201CE012100F40011010E03C8
1837	 14C	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x1891212019C012100A0FFE000BA000001BB121201CE012100F40011010E03C8
- stack 0: 0xF0
1838	 14E	SHR		 	 
- stack 1: 0x598
- stack 0: 0x189
1839	 14F	JUMP		 	 
- stack 0: 0x598
1840	 189	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x598
1841	 18A	PUSH4	21212000	 	 
- stack 1: 0x598
- stack 0: 0x21212000
1842	 18F	PUSH2	0020	 	 
- stack 2: 0x598
- stack 1: 0x21212000
- stack 0: 0x20
1843	 192	MSTORE		 	  ;; # store to x1
- stack 0: 0x598
1844	 193	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
1845	 195	ADD		 	 
- stack 0: 0x59C
1846	 196	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
1847	 197	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x19C012100A0FFE000BA000001BB121201CE012100F40011010E03C801891212
1848	 198	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x19C012100A0FFE000BA000001BB121201CE012100F40011010E03C801891212
- stack 0: 0xF0
1849	 19A	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x19C
1850	 19B	JUMP		 	 
- stack 0: 0x59C
1851	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,289(ignore imm)
- stack 0: 0x59C
1852	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
1853	 19E	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x19C012100A0FFE000BA000001BB121201CE012100F40011010E03C801891212
1854	 19F	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x19C012100A0FFE000BA000001BB121201CE012100F40011010E03C801891212
- stack 0: 0xE0
1855	 1A1	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x19C0121
1856	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x19C0121
- stack 0: 0xFFFF
1857	 1A5	AND		 	 
- stack 1: 0x59C
- stack 0: 0x121
1858	 1A6	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x121
- stack 0: 0x1
1859	 1A8	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x121
1860	 1A9	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0x121
- stack 0: 0x20
1861	 1AC	MLOAD		 	  ;; # read from x1
- stack 2: 0x59C
- stack 1: 0x121
- stack 0: 0x21212000
1862	 1AD	ADD		 	  ;; # ADDI 1
- stack 1: 0x59C
- stack 0: 0x21212121
1863	 1AE	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0x21212121
- stack 0: 0x20
1864	 1B1	MSTORE		 	  ;; # store to x1
- stack 0: 0x59C
1865	 1B2	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
1866	 1B4	ADD		 	 
- stack 0: 0x5A0
1867	 1B5	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
1868	 1B6	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xA0FFE000BA000001BB121201CE012100F40011010E03C801891212019C0121
1869	 1B7	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0xA0FFE000BA000001BB121201CE012100F40011010E03C801891212019C0121
- stack 0: 0xF0
1870	 1B9	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xA0
1871	 1BA	JUMP		 	 
- stack 0: 0x5A0
1872	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5A0
1873	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
1874	 A2	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xA0FFE000BA000001BB121201CE012100F40011010E03C801891212019C0121
1875	 A3	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0xA0FFE000BA000001BB121201CE012100F40011010E03C801891212019C0121
- stack 0: 0xE0
1876	 A5	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xA0FFE0
1877	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0xA0FFE0
- stack 0: 0xFFFF
1878	 A9	AND		 	 
- stack 1: 0x5A0
- stack 0: 0xFFE0
1879	 AA	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0xFFE0
- stack 0: 0x1
1880	 AC	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1881	 AD	PUSH2	0040	 	 
- stack 2: 0x5A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x40
1882	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5A0
1883	 B1	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
1884	 B3	ADD		 	 
- stack 0: 0x5A4
1885	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
1886	 B5	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xBA000001BB121201CE012100F40011010E03C801891212019C012100A0FFE1
1887	 B6	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0xBA000001BB121201CE012100F40011010E03C801891212019C012100A0FFE1
- stack 0: 0xF0
1888	 B8	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xBA
1889	 B9	JUMP		 	 
- stack 0: 0x5A4
1890	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x5A4
1891	 BB	PUSH2	0020	 	 
- stack 1: 0x5A4
- stack 0: 0x20
1892	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x5A4
- stack 0: 0x21212121
1893	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1894	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A4
- stack 0: 0x21212121
1895	 C5	PUSH2	0040	 	 
- stack 2: 0x5A4
- stack 1: 0x21212121
- stack 0: 0x40
1896	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x5A4
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1897	 C9	PUSH1	1F	 	 
- stack 3: 0x5A4
- stack 2: 0x21212121
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x1F
1898	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x5A4
- stack 1: 0x21212121
- stack 0: 0x0
1899	 CC	SHL		 	 
- stack 1: 0x5A4
- stack 0: 0x21212121
1900	 CD	PUSH2	0060	 	 
- stack 2: 0x5A4
- stack 1: 0x21212121
- stack 0: 0x60
1901	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A4
1902	 D1	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
1903	 D3	ADD		 	 
- stack 0: 0x5A8
1904	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
1905	 D5	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x1BB121201CE012100F40011010E03C801891212019C012100A0FFE100BA0000
1906	 D6	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x1BB121201CE012100F40011010E03C801891212019C012100A0FFE100BA0000
- stack 0: 0xF0
1907	 D8	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x1BB
1908	 D9	JUMP		 	 
- stack 0: 0x5A8
1909	 1BB	JUMPDEST		 ;; __riscvimpl_LUI_21212eb7	  ;; # instr: lui t4,0x21212(ignore imm)
- stack 0: 0x5A8
1910	 1BC	PUSH4	21212000	 	 
- stack 1: 0x5A8
- stack 0: 0x21212000
1911	 1C1	PUSH2	03A0	 	 
- stack 2: 0x5A8
- stack 1: 0x21212000
- stack 0: 0x3A0
1912	 1C4	MSTORE		 	  ;; # store to x29
- stack 0: 0x5A8
1913	 1C5	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
1914	 1C7	ADD		 	 
- stack 0: 0x5AC
1915	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
1916	 1C9	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x1CE012100F40011010E03C801891212019C012100A0FFE100BA000001ED2424
1917	 1CA	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x1CE012100F40011010E03C801891212019C012100A0FFE100BA000001ED2424
- stack 0: 0xF0
1918	 1CC	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x1CE
1919	 1CD	JUMP		 	 
- stack 0: 0x5AC
1920	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,289(ignore imm)
- stack 0: 0x5AC
1921	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
1922	 1D0	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x1CE012100F40011010E03C801891212019C012100A0FFE100BA000001ED2424
1923	 1D1	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x1CE012100F40011010E03C801891212019C012100A0FFE100BA000001ED2424
- stack 0: 0xE0
1924	 1D3	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x1CE0121
1925	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x1CE0121
- stack 0: 0xFFFF
1926	 1D7	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x121
1927	 1D8	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x121
- stack 0: 0x1
1928	 1DA	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x121
1929	 1DB	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0x121
- stack 0: 0x3A0
1930	 1DE	MLOAD		 	  ;; # read from x29
- stack 2: 0x5AC
- stack 1: 0x121
- stack 0: 0x21212000
1931	 1DF	ADD		 	  ;; # ADDI 29
- stack 1: 0x5AC
- stack 0: 0x21212121
1932	 1E0	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0x21212121
- stack 0: 0x3A0
1933	 1E3	MSTORE		 	  ;; # store to x29
- stack 0: 0x5AC
1934	 1E4	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
1935	 1E6	ADD		 	 
- stack 0: 0x5B0
1936	 1E7	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
1937	 1E8	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xF40011010E03C801891212019C012100A0FFE100BA000001ED242401CE0242
1938	 1E9	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0xF40011010E03C801891212019C012100A0FFE100BA000001ED242401CE0242
- stack 0: 0xF0
1939	 1EB	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xF4
1940	 1EC	JUMP		 	 
- stack 0: 0x5B0
1941	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5B0
1942	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
1943	 F6	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xF40011010E03C801891212019C012100A0FFE100BA000001ED242401CE0242
1944	 F7	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0xF40011010E03C801891212019C012100A0FFE100BA000001ED242401CE0242
- stack 0: 0xE0
1945	 F9	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xF40011
1946	 FA	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0xF40011
- stack 0: 0xFFFF
1947	 FD	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x11
1948	 FE	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x11
- stack 0: 0x1
1949	 100	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x11
1950	 101	PUSH2	0380	 	 
- stack 2: 0x5B0
- stack 1: 0x11
- stack 0: 0x380
1951	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x5B0
1952	 105	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
1953	 107	ADD		 	 
- stack 0: 0x5B4
1954	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
1955	 109	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x10E03C801891212019C012100A0FFE100BA000001ED242401CE024200F40012
1956	 10A	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x10E03C801891212019C012100A0FFE100BA000001ED242401CE024200F40012
- stack 0: 0xF0
1957	 10C	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x10E
1958	 10D	JUMP		 	 
- stack 0: 0x5B4
1959	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x5B4
1960	 10F	PUSH2	0060	 	 
- stack 1: 0x5B4
- stack 0: 0x60
1961	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x5B4
- stack 0: 0x21212121
1962	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1963	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B4
- stack 0: 0x21212121
1964	 119	PUSH2	03A0	 	 
- stack 2: 0x5B4
- stack 1: 0x21212121
- stack 0: 0x3A0
1965	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B4
- stack 1: 0x21212121
- stack 0: 0x21212121
1966	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B4
- stack 2: 0x21212121
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1967	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B4
- stack 1: 0x21212121
- stack 0: 0x21212121
1968	 123	SUB		 	 
- stack 1: 0x5B4
- stack 0: 0x0
1969	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x12C
1970	 127	JUMPI		 	 
- stack 0: 0x5B4
1971	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x5B4
- stack 0: 0x146
1972	 12B	JUMP		 	 
- stack 0: 0x5B4
1973	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x5B4
1974	 147	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
1975	 149	ADD		 	 
- stack 0: 0x5B8
1976	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
1977	 14B	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1891212019C012100A0FFE100BA000001ED242401CE024200F40012010E03A8
1978	 14C	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x1891212019C012100A0FFE100BA000001ED242401CE024200F40012010E03A8
- stack 0: 0xF0
1979	 14E	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x189
1980	 14F	JUMP		 	 
- stack 0: 0x5B8
1981	 189	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x5B8
1982	 18A	PUSH4	21212000	 	 
- stack 1: 0x5B8
- stack 0: 0x21212000
1983	 18F	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0x21212000
- stack 0: 0x20
1984	 192	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B8
1985	 193	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
1986	 195	ADD		 	 
- stack 0: 0x5BC
1987	 196	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
1988	 197	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x19C012100A0FFE100BA000001ED242401CE024200F40012010E03A801891212
1989	 198	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x19C012100A0FFE100BA000001ED242401CE024200F40012010E03A801891212
- stack 0: 0xF0
1990	 19A	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x19C
1991	 19B	JUMP		 	 
- stack 0: 0x5BC
1992	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,289(ignore imm)
- stack 0: 0x5BC
1993	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
1994	 19E	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x19C012100A0FFE100BA000001ED242401CE024200F40012010E03A801891212
1995	 19F	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x19C012100A0FFE100BA000001ED242401CE024200F40012010E03A801891212
- stack 0: 0xE0
1996	 1A1	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x19C0121
1997	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x19C0121
- stack 0: 0xFFFF
1998	 1A5	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x121
1999	 1A6	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x121
- stack 0: 0x1
2000	 1A8	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x121
2001	 1A9	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0x121
- stack 0: 0x20
2002	 1AC	MLOAD		 	  ;; # read from x1
- stack 2: 0x5BC
- stack 1: 0x121
- stack 0: 0x21212000
2003	 1AD	ADD		 	  ;; # ADDI 1
- stack 1: 0x5BC
- stack 0: 0x21212121
2004	 1AE	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0x21212121
- stack 0: 0x20
2005	 1B1	MSTORE		 	  ;; # store to x1
- stack 0: 0x5BC
2006	 1B2	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2007	 1B4	ADD		 	 
- stack 0: 0x5C0
2008	 1B5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2009	 1B6	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xA0FFE100BA000001ED242401CE024200F40012010E03A801891212019C0121
2010	 1B7	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0xA0FFE100BA000001ED242401CE024200F40012010E03A801891212019C0121
- stack 0: 0xF0
2011	 1B9	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xA0
2012	 1BA	JUMP		 	 
- stack 0: 0x5C0
2013	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5C0
2014	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2015	 A2	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xA0FFE100BA000001ED242401CE024200F40012010E03A801891212019C0121
2016	 A3	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0xA0FFE100BA000001ED242401CE024200F40012010E03A801891212019C0121
- stack 0: 0xE0
2017	 A5	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xA0FFE1
2018	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0xA0FFE1
- stack 0: 0xFFFF
2019	 A9	AND		 	 
- stack 1: 0x5C0
- stack 0: 0xFFE1
2020	 AA	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xFFE1
- stack 0: 0x1
2021	 AC	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1
2022	 AD	PUSH2	0040	 	 
- stack 2: 0x5C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1
- stack 0: 0x40
2023	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C0
2024	 B1	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2025	 B3	ADD		 	 
- stack 0: 0x5C4
2026	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2027	 B5	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xBA000001ED242401CE024200F40012010E03A801891212019C012100A0FFE7
2028	 B6	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0xBA000001ED242401CE024200F40012010E03A801891212019C012100A0FFE7
- stack 0: 0xF0
2029	 B8	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xBA
2030	 B9	JUMP		 	 
- stack 0: 0x5C4
2031	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x5C4
2032	 BB	PUSH2	0020	 	 
- stack 1: 0x5C4
- stack 0: 0x20
2033	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x5C4
- stack 0: 0x21212121
2034	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
2035	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C4
- stack 0: 0x21212121
2036	 C5	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0x21212121
- stack 0: 0x40
2037	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x5C4
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1
2038	 C9	PUSH1	1F	 	 
- stack 3: 0x5C4
- stack 2: 0x21212121
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1
- stack 0: 0x1F
2039	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x5C4
- stack 1: 0x21212121
- stack 0: 0x1
2040	 CC	SHL		 	 
- stack 1: 0x5C4
- stack 0: 0x42424242
2041	 CD	PUSH2	0060	 	 
- stack 2: 0x5C4
- stack 1: 0x42424242
- stack 0: 0x60
2042	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x5C4
2043	 D1	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2044	 D3	ADD		 	 
- stack 0: 0x5C8
2045	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2046	 D5	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x1ED242401CE024200F40012010E03A801891212019C012100A0FFE700BA0000
2047	 D6	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x1ED242401CE024200F40012010E03A801891212019C012100A0FFE700BA0000
- stack 0: 0xF0
2048	 D8	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x1ED
2049	 D9	JUMP		 	 
- stack 0: 0x5C8
2050	 1ED	JUMPDEST		 ;; __riscvimpl_LUI_42424eb7	  ;; # instr: lui t4,0x42424(ignore imm)
- stack 0: 0x5C8
2051	 1EE	PUSH4	42424000	 	 
- stack 1: 0x5C8
- stack 0: 0x42424000
2052	 1F3	PUSH2	03A0	 	 
- stack 2: 0x5C8
- stack 1: 0x42424000
- stack 0: 0x3A0
2053	 1F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C8
2054	 1F7	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2055	 1F9	ADD		 	 
- stack 0: 0x5CC
2056	 1FA	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2057	 1FB	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x1CE024200F40012010E03A801891212019C012100A0FFE700BA000002000909
2058	 1FC	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x1CE024200F40012010E03A801891212019C012100A0FFE700BA000002000909
- stack 0: 0xF0
2059	 1FE	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x1CE
2060	 1FF	JUMP		 	 
- stack 0: 0x5CC
2061	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,289(ignore imm)
- stack 0: 0x5CC
2062	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2063	 1D0	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x1CE024200F40012010E03A801891212019C012100A0FFE700BA000002000909
2064	 1D1	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x1CE024200F40012010E03A801891212019C012100A0FFE700BA000002000909
- stack 0: 0xE0
2065	 1D3	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x1CE0242
2066	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x1CE0242
- stack 0: 0xFFFF
2067	 1D7	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x242
2068	 1D8	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x242
- stack 0: 0x1
2069	 1DA	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x242
2070	 1DB	PUSH2	03A0	 	 
- stack 2: 0x5CC
- stack 1: 0x242
- stack 0: 0x3A0
2071	 1DE	MLOAD		 	  ;; # read from x29
- stack 2: 0x5CC
- stack 1: 0x242
- stack 0: 0x42424000
2072	 1DF	ADD		 	  ;; # ADDI 29
- stack 1: 0x5CC
- stack 0: 0x42424242
2073	 1E0	PUSH2	03A0	 	 
- stack 2: 0x5CC
- stack 1: 0x42424242
- stack 0: 0x3A0
2074	 1E3	MSTORE		 	  ;; # store to x29
- stack 0: 0x5CC
2075	 1E4	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2076	 1E6	ADD		 	 
- stack 0: 0x5D0
2077	 1E7	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2078	 1E8	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xF40012010E03A801891212019C012100A0FFE700BA00000200090901CE0080
2079	 1E9	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xF40012010E03A801891212019C012100A0FFE700BA00000200090901CE0080
- stack 0: 0xF0
2080	 1EB	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xF4
2081	 1EC	JUMP		 	 
- stack 0: 0x5D0
2082	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5D0
2083	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2084	 F6	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xF40012010E03A801891212019C012100A0FFE700BA00000200090901CE0080
2085	 F7	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0xF40012010E03A801891212019C012100A0FFE700BA00000200090901CE0080
- stack 0: 0xE0
2086	 F9	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xF40012
2087	 FA	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0xF40012
- stack 0: 0xFFFF
2088	 FD	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x12
2089	 FE	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x12
- stack 0: 0x1
2090	 100	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x12
2091	 101	PUSH2	0380	 	 
- stack 2: 0x5D0
- stack 1: 0x12
- stack 0: 0x380
2092	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x5D0
2093	 105	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2094	 107	ADD		 	 
- stack 0: 0x5D4
2095	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2096	 109	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x10E03A801891212019C012100A0FFE700BA00000200090901CE008000F40013
2097	 10A	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x10E03A801891212019C012100A0FFE700BA00000200090901CE008000F40013
- stack 0: 0xF0
2098	 10C	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x10E
2099	 10D	JUMP		 	 
- stack 0: 0x5D4
2100	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x5D4
2101	 10F	PUSH2	0060	 	 
- stack 1: 0x5D4
- stack 0: 0x60
2102	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x5D4
- stack 0: 0x42424242
2103	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x42424242
- stack 0: 0xFFFFFFFF
2104	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x42424242
2105	 119	PUSH2	03A0	 	 
- stack 2: 0x5D4
- stack 1: 0x42424242
- stack 0: 0x3A0
2106	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x5D4
- stack 1: 0x42424242
- stack 0: 0x42424242
2107	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x42424242
- stack 1: 0x42424242
- stack 0: 0xFFFFFFFF
2108	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0x42424242
- stack 0: 0x42424242
2109	 123	SUB		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2110	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x12C
2111	 127	JUMPI		 	 
- stack 0: 0x5D4
2112	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x5D4
- stack 0: 0x146
2113	 12B	JUMP		 	 
- stack 0: 0x5D4
2114	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x5D4
2115	 147	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2116	 149	ADD		 	 
- stack 0: 0x5D8
2117	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2118	 14B	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x1891212019C012100A0FFE700BA00000200090901CE008000F40013010E0388
2119	 14C	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x1891212019C012100A0FFE700BA00000200090901CE008000F40013010E0388
- stack 0: 0xF0
2120	 14E	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x189
2121	 14F	JUMP		 	 
- stack 0: 0x5D8
2122	 189	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x5D8
2123	 18A	PUSH4	21212000	 	 
- stack 1: 0x5D8
- stack 0: 0x21212000
2124	 18F	PUSH2	0020	 	 
- stack 2: 0x5D8
- stack 1: 0x21212000
- stack 0: 0x20
2125	 192	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D8
2126	 193	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2127	 195	ADD		 	 
- stack 0: 0x5DC
2128	 196	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2129	 197	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x19C012100A0FFE700BA00000200090901CE008000F40013010E038801891212
2130	 198	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x19C012100A0FFE700BA00000200090901CE008000F40013010E038801891212
- stack 0: 0xF0
2131	 19A	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x19C
2132	 19B	JUMP		 	 
- stack 0: 0x5DC
2133	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,289(ignore imm)
- stack 0: 0x5DC
2134	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2135	 19E	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x19C012100A0FFE700BA00000200090901CE008000F40013010E038801891212
2136	 19F	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x19C012100A0FFE700BA00000200090901CE008000F40013010E038801891212
- stack 0: 0xE0
2137	 1A1	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x19C0121
2138	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x19C0121
- stack 0: 0xFFFF
2139	 1A5	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x121
2140	 1A6	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x121
- stack 0: 0x1
2141	 1A8	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x121
2142	 1A9	PUSH2	0020	 	 
- stack 2: 0x5DC
- stack 1: 0x121
- stack 0: 0x20
2143	 1AC	MLOAD		 	  ;; # read from x1
- stack 2: 0x5DC
- stack 1: 0x121
- stack 0: 0x21212000
2144	 1AD	ADD		 	  ;; # ADDI 1
- stack 1: 0x5DC
- stack 0: 0x21212121
2145	 1AE	PUSH2	0020	 	 
- stack 2: 0x5DC
- stack 1: 0x21212121
- stack 0: 0x20
2146	 1B1	MSTORE		 	  ;; # store to x1
- stack 0: 0x5DC
2147	 1B2	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2148	 1B4	ADD		 	 
- stack 0: 0x5E0
2149	 1B5	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2150	 1B6	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0xA0FFE700BA00000200090901CE008000F40013010E038801891212019C0121
2151	 1B7	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0xA0FFE700BA00000200090901CE008000F40013010E038801891212019C0121
- stack 0: 0xF0
2152	 1B9	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0xA0
2153	 1BA	JUMP		 	 
- stack 0: 0x5E0
2154	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5E0
2155	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2156	 A2	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0xA0FFE700BA00000200090901CE008000F40013010E038801891212019C0121
2157	 A3	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0xA0FFE700BA00000200090901CE008000F40013010E038801891212019C0121
- stack 0: 0xE0
2158	 A5	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0xA0FFE7
2159	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0xA0FFE7
- stack 0: 0xFFFF
2160	 A9	AND		 	 
- stack 1: 0x5E0
- stack 0: 0xFFE7
2161	 AA	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0xFFE7
- stack 0: 0x1
2162	 AC	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE7
2163	 AD	PUSH2	0040	 	 
- stack 2: 0x5E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE7
- stack 0: 0x40
2164	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5E0
2165	 B1	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2166	 B3	ADD		 	 
- stack 0: 0x5E4
2167	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2168	 B5	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0xBA00000200090901CE008000F40013010E038801891212019C012100A0FFEE
2169	 B6	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0xBA00000200090901CE008000F40013010E038801891212019C012100A0FFEE
- stack 0: 0xF0
2170	 B8	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0xBA
2171	 B9	JUMP		 	 
- stack 0: 0x5E4
2172	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x5E4
2173	 BB	PUSH2	0020	 	 
- stack 1: 0x5E4
- stack 0: 0x20
2174	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x5E4
- stack 0: 0x21212121
2175	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
2176	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E4
- stack 0: 0x21212121
2177	 C5	PUSH2	0040	 	 
- stack 2: 0x5E4
- stack 1: 0x21212121
- stack 0: 0x40
2178	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x5E4
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE7
2179	 C9	PUSH1	1F	 	 
- stack 3: 0x5E4
- stack 2: 0x21212121
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE7
- stack 0: 0x1F
2180	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x5E4
- stack 1: 0x21212121
- stack 0: 0x7
2181	 CC	SHL		 	 
- stack 1: 0x5E4
- stack 0: 0x1090909080
2182	 CD	PUSH2	0060	 	 
- stack 2: 0x5E4
- stack 1: 0x1090909080
- stack 0: 0x60
2183	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x5E4
2184	 D1	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2185	 D3	ADD		 	 
- stack 0: 0x5E8
2186	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2187	 D5	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x200090901CE008000F40013010E038801891212019C012100A0FFEE00BA0000
2188	 D6	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x200090901CE008000F40013010E038801891212019C012100A0FFEE00BA0000
- stack 0: 0xF0
2189	 D8	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x200
2190	 D9	JUMP		 	 
- stack 0: 0x5E8
2191	 200	JUMPDEST		 ;; __riscvimpl_LUI_90909eb7	  ;; # instr: lui t4,0x90909(ignore imm)
- stack 0: 0x5E8
2192	 201	PUSH4	90909000	 	 
- stack 1: 0x5E8
- stack 0: 0x90909000
2193	 206	PUSH2	03A0	 	 
- stack 2: 0x5E8
- stack 1: 0x90909000
- stack 0: 0x3A0
2194	 209	MSTORE		 	  ;; # store to x29
- stack 0: 0x5E8
2195	 20A	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2196	 20C	ADD		 	 
- stack 0: 0x5EC
2197	 20D	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2198	 20E	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x1CE008000F40013010E038801891212019C012100A0FFEE00BA000002138484
2199	 20F	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x1CE008000F40013010E038801891212019C012100A0FFEE00BA000002138484
- stack 0: 0xF0
2200	 211	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x1CE
2201	 212	JUMP		 	 
- stack 0: 0x5EC
2202	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,289(ignore imm)
- stack 0: 0x5EC
2203	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2204	 1D0	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x1CE008000F40013010E038801891212019C012100A0FFEE00BA000002138484
2205	 1D1	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x1CE008000F40013010E038801891212019C012100A0FFEE00BA000002138484
- stack 0: 0xE0
2206	 1D3	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x1CE0080
2207	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x1CE0080
- stack 0: 0xFFFF
2208	 1D7	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x80
2209	 1D8	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x80
- stack 0: 0x1
2210	 1DA	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x80
2211	 1DB	PUSH2	03A0	 	 
- stack 2: 0x5EC
- stack 1: 0x80
- stack 0: 0x3A0
2212	 1DE	MLOAD		 	  ;; # read from x29
- stack 2: 0x5EC
- stack 1: 0x80
- stack 0: 0x90909000
2213	 1DF	ADD		 	  ;; # ADDI 29
- stack 1: 0x5EC
- stack 0: 0x90909080
2214	 1E0	PUSH2	03A0	 	 
- stack 2: 0x5EC
- stack 1: 0x90909080
- stack 0: 0x3A0
2215	 1E3	MSTORE		 	  ;; # store to x29
- stack 0: 0x5EC
2216	 1E4	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2217	 1E6	ADD		 	 
- stack 0: 0x5F0
2218	 1E7	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2219	 1E8	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xF40013010E038801891212019C012100A0FFEE00BA00000213848400F40014
2220	 1E9	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0xF40013010E038801891212019C012100A0FFEE00BA00000213848400F40014
- stack 0: 0xF0
2221	 1EB	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xF4
2222	 1EC	JUMP		 	 
- stack 0: 0x5F0
2223	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5F0
2224	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2225	 F6	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xF40013010E038801891212019C012100A0FFEE00BA00000213848400F40014
2226	 F7	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0xF40013010E038801891212019C012100A0FFEE00BA00000213848400F40014
- stack 0: 0xE0
2227	 F9	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xF40013
2228	 FA	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0xF40013
- stack 0: 0xFFFF
2229	 FD	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x13
2230	 FE	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x13
- stack 0: 0x1
2231	 100	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x13
2232	 101	PUSH2	0380	 	 
- stack 2: 0x5F0
- stack 1: 0x13
- stack 0: 0x380
2233	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x5F0
2234	 105	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2235	 107	ADD		 	 
- stack 0: 0x5F4
2236	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2237	 109	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x10E038801891212019C012100A0FFEE00BA00000213848400F40014010E036C
2238	 10A	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x10E038801891212019C012100A0FFEE00BA00000213848400F40014010E036C
- stack 0: 0xF0
2239	 10C	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x10E
2240	 10D	JUMP		 	 
- stack 0: 0x5F4
2241	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x5F4
2242	 10F	PUSH2	0060	 	 
- stack 1: 0x5F4
- stack 0: 0x60
2243	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x5F4
- stack 0: 0x1090909080
2244	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x1090909080
- stack 0: 0xFFFFFFFF
2245	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x90909080
2246	 119	PUSH2	03A0	 	 
- stack 2: 0x5F4
- stack 1: 0x90909080
- stack 0: 0x3A0
2247	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x5F4
- stack 1: 0x90909080
- stack 0: 0x90909080
2248	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x90909080
- stack 1: 0x90909080
- stack 0: 0xFFFFFFFF
2249	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F4
- stack 1: 0x90909080
- stack 0: 0x90909080
2250	 123	SUB		 	 
- stack 1: 0x5F4
- stack 0: 0x0
2251	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x12C
2252	 127	JUMPI		 	 
- stack 0: 0x5F4
2253	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x5F4
- stack 0: 0x146
2254	 12B	JUMP		 	 
- stack 0: 0x5F4
2255	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x5F4
2256	 147	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2257	 149	ADD		 	 
- stack 0: 0x5F8
2258	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2259	 14B	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1891212019C012100A0FFEE00BA00000213848400F40014010E036C01891212
2260	 14C	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x1891212019C012100A0FFEE00BA00000213848400F40014010E036C01891212
- stack 0: 0xF0
2261	 14E	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x189
2262	 14F	JUMP		 	 
- stack 0: 0x5F8
2263	 189	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x5F8
2264	 18A	PUSH4	21212000	 	 
- stack 1: 0x5F8
- stack 0: 0x21212000
2265	 18F	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0x21212000
- stack 0: 0x20
2266	 192	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F8
2267	 193	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2268	 195	ADD		 	 
- stack 0: 0x5FC
2269	 196	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2270	 197	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x19C012100A0FFEE00BA00000213848400F40014010E036C01891212019C0120
2271	 198	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x19C012100A0FFEE00BA00000213848400F40014010E036C01891212019C0120
- stack 0: 0xF0
2272	 19A	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x19C
2273	 19B	JUMP		 	 
- stack 0: 0x5FC
2274	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,289(ignore imm)
- stack 0: 0x5FC
2275	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2276	 19E	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x19C012100A0FFEE00BA00000213848400F40014010E036C01891212019C0120
2277	 19F	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x19C012100A0FFEE00BA00000213848400F40014010E036C01891212019C0120
- stack 0: 0xE0
2278	 1A1	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x19C0121
2279	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x19C0121
- stack 0: 0xFFFF
2280	 1A5	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x121
2281	 1A6	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x121
- stack 0: 0x1
2282	 1A8	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x121
2283	 1A9	PUSH2	0020	 	 
- stack 2: 0x5FC
- stack 1: 0x121
- stack 0: 0x20
2284	 1AC	MLOAD		 	  ;; # read from x1
- stack 2: 0x5FC
- stack 1: 0x121
- stack 0: 0x21212000
2285	 1AD	ADD		 	  ;; # ADDI 1
- stack 1: 0x5FC
- stack 0: 0x21212121
2286	 1AE	PUSH2	0020	 	 
- stack 2: 0x5FC
- stack 1: 0x21212121
- stack 0: 0x20
2287	 1B1	MSTORE		 	  ;; # store to x1
- stack 0: 0x5FC
2288	 1B2	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2289	 1B4	ADD		 	 
- stack 0: 0x600
2290	 1B5	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2291	 1B6	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xA0FFEE00BA00000213848400F40014010E036C01891212019C012000A0FFFF
2292	 1B7	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xA0FFEE00BA00000213848400F40014010E036C01891212019C012000A0FFFF
- stack 0: 0xF0
2293	 1B9	SHR		 	 
- stack 1: 0x600
- stack 0: 0xA0
2294	 1BA	JUMP		 	 
- stack 0: 0x600
2295	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x600
2296	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2297	 A2	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xA0FFEE00BA00000213848400F40014010E036C01891212019C012000A0FFFF
2298	 A3	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0xA0FFEE00BA00000213848400F40014010E036C01891212019C012000A0FFFF
- stack 0: 0xE0
2299	 A5	SHR		 	 
- stack 1: 0x600
- stack 0: 0xA0FFEE
2300	 A6	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0xA0FFEE
- stack 0: 0xFFFF
2301	 A9	AND		 	 
- stack 1: 0x600
- stack 0: 0xFFEE
2302	 AA	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0xFFEE
- stack 0: 0x1
2303	 AC	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE
2304	 AD	PUSH2	0040	 	 
- stack 2: 0x600
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE
- stack 0: 0x40
2305	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x600
2306	 B1	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2307	 B3	ADD		 	 
- stack 0: 0x604
2308	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2309	 B5	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0xBA00000213848400F40014010E036C01891212019C012000A0FFFF00BA0000
2310	 B6	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0xBA00000213848400F40014010E036C01891212019C012000A0FFFF00BA0000
- stack 0: 0xF0
2311	 B8	SHR		 	 
- stack 1: 0x604
- stack 0: 0xBA
2312	 B9	JUMP		 	 
- stack 0: 0x604
2313	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x604
2314	 BB	PUSH2	0020	 	 
- stack 1: 0x604
- stack 0: 0x20
2315	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x604
- stack 0: 0x21212121
2316	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
2317	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0x21212121
2318	 C5	PUSH2	0040	 	 
- stack 2: 0x604
- stack 1: 0x21212121
- stack 0: 0x40
2319	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x604
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE
2320	 C9	PUSH1	1F	 	 
- stack 3: 0x604
- stack 2: 0x21212121
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE
- stack 0: 0x1F
2321	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x604
- stack 1: 0x21212121
- stack 0: 0xE
2322	 CC	SHL		 	 
- stack 1: 0x604
- stack 0: 0x84848484000
2323	 CD	PUSH2	0060	 	 
- stack 2: 0x604
- stack 1: 0x84848484000
- stack 0: 0x60
2324	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x604
2325	 D1	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2326	 D3	ADD		 	 
- stack 0: 0x608
2327	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2328	 D5	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x213848400F40014010E036C01891212019C012000A0FFFF00BA000000DA0000
2329	 D6	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x213848400F40014010E036C01891212019C012000A0FFFF00BA000000DA0000
- stack 0: 0xF0
2330	 D8	SHR		 	 
- stack 1: 0x608
- stack 0: 0x213
2331	 D9	JUMP		 	 
- stack 0: 0x608
2332	 213	JUMPDEST		 ;; __riscvimpl_LUI_48484eb7	  ;; # instr: lui t4,0x48484(ignore imm)
- stack 0: 0x608
2333	 214	PUSH4	48484000	 	 
- stack 1: 0x608
- stack 0: 0x48484000
2334	 219	PUSH2	03A0	 	 
- stack 2: 0x608
- stack 1: 0x48484000
- stack 0: 0x3A0
2335	 21C	MSTORE		 	  ;; # store to x29
- stack 0: 0x608
2336	 21D	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2337	 21F	ADD		 	 
- stack 0: 0x60C
2338	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2339	 221	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xF40014010E036C01891212019C012000A0FFFF00BA000000DA000000F40015
2340	 222	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0xF40014010E036C01891212019C012000A0FFFF00BA000000DA000000F40015
- stack 0: 0xF0
2341	 224	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xF4
2342	 225	JUMP		 	 
- stack 0: 0x60C
2343	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x60C
2344	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
2345	 F6	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xF40014010E036C01891212019C012000A0FFFF00BA000000DA000000F40015
2346	 F7	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0xF40014010E036C01891212019C012000A0FFFF00BA000000DA000000F40015
- stack 0: 0xE0
2347	 F9	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xF40014
2348	 FA	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0xF40014
- stack 0: 0xFFFF
2349	 FD	AND		 	 
- stack 1: 0x60C
- stack 0: 0x14
2350	 FE	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x14
- stack 0: 0x1
2351	 100	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x14
2352	 101	PUSH2	0380	 	 
- stack 2: 0x60C
- stack 1: 0x14
- stack 0: 0x380
2353	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x60C
2354	 105	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
2355	 107	ADD		 	 
- stack 0: 0x610
2356	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
2357	 109	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x10E036C01891212019C012000A0FFFF00BA000000DA000000F40015010E0350
2358	 10A	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x10E036C01891212019C012000A0FFFF00BA000000DA000000F40015010E0350
- stack 0: 0xF0
2359	 10C	SHR		 	 
- stack 1: 0x610
- stack 0: 0x10E
2360	 10D	JUMP		 	 
- stack 0: 0x610
2361	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x610
2362	 10F	PUSH2	0060	 	 
- stack 1: 0x610
- stack 0: 0x60
2363	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x610
- stack 0: 0x84848484000
2364	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x610
- stack 1: 0x84848484000
- stack 0: 0xFFFFFFFF
2365	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x610
- stack 0: 0x48484000
2366	 119	PUSH2	03A0	 	 
- stack 2: 0x610
- stack 1: 0x48484000
- stack 0: 0x3A0
2367	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x610
- stack 1: 0x48484000
- stack 0: 0x48484000
2368	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x610
- stack 2: 0x48484000
- stack 1: 0x48484000
- stack 0: 0xFFFFFFFF
2369	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x610
- stack 1: 0x48484000
- stack 0: 0x48484000
2370	 123	SUB		 	 
- stack 1: 0x610
- stack 0: 0x0
2371	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x12C
2372	 127	JUMPI		 	 
- stack 0: 0x610
2373	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x610
- stack 0: 0x146
2374	 12B	JUMP		 	 
- stack 0: 0x610
2375	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x610
2376	 147	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
2377	 149	ADD		 	 
- stack 0: 0x614
2378	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
2379	 14B	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1891212019C012000A0FFFF00BA000000DA000000F40015010E035000860001
2380	 14C	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x1891212019C012000A0FFFF00BA000000DA000000F40015010E035000860001
- stack 0: 0xF0
2381	 14E	SHR		 	 
- stack 1: 0x614
- stack 0: 0x189
2382	 14F	JUMP		 	 
- stack 0: 0x614
2383	 189	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x614
2384	 18A	PUSH4	21212000	 	 
- stack 1: 0x614
- stack 0: 0x21212000
2385	 18F	PUSH2	0020	 	 
- stack 2: 0x614
- stack 1: 0x21212000
- stack 0: 0x20
2386	 192	MSTORE		 	  ;; # store to x1
- stack 0: 0x614
2387	 193	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
2388	 195	ADD		 	 
- stack 0: 0x618
2389	 196	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
2390	 197	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x19C012000A0FFFF00BA000000DA000000F40015010E03500086000100A00007
2391	 198	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x19C012000A0FFFF00BA000000DA000000F40015010E03500086000100A00007
- stack 0: 0xF0
2392	 19A	SHR		 	 
- stack 1: 0x618
- stack 0: 0x19C
2393	 19B	JUMP		 	 
- stack 0: 0x618
2394	 19C	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,289(ignore imm)
- stack 0: 0x618
2395	 19D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
2396	 19E	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x19C012000A0FFFF00BA000000DA000000F40015010E03500086000100A00007
2397	 19F	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x19C012000A0FFFF00BA000000DA000000F40015010E03500086000100A00007
- stack 0: 0xE0
2398	 1A1	SHR		 	 
- stack 1: 0x618
- stack 0: 0x19C0120
2399	 1A2	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x19C0120
- stack 0: 0xFFFF
2400	 1A5	AND		 	 
- stack 1: 0x618
- stack 0: 0x120
2401	 1A6	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x120
- stack 0: 0x1
2402	 1A8	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x120
2403	 1A9	PUSH2	0020	 	 
- stack 2: 0x618
- stack 1: 0x120
- stack 0: 0x20
2404	 1AC	MLOAD		 	  ;; # read from x1
- stack 2: 0x618
- stack 1: 0x120
- stack 0: 0x21212000
2405	 1AD	ADD		 	  ;; # ADDI 1
- stack 1: 0x618
- stack 0: 0x21212120
2406	 1AE	PUSH2	0020	 	 
- stack 2: 0x618
- stack 1: 0x21212120
- stack 0: 0x20
2407	 1B1	MSTORE		 	  ;; # store to x1
- stack 0: 0x618
2408	 1B2	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
2409	 1B4	ADD		 	 
- stack 0: 0x61C
2410	 1B5	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
2411	 1B6	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0xA0FFFF00BA000000DA000000F40015010E03500086000100A0000702260000
2412	 1B7	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0xA0FFFF00BA000000DA000000F40015010E03500086000100A0000702260000
- stack 0: 0xF0
2413	 1B9	SHR		 	 
- stack 1: 0x61C
- stack 0: 0xA0
2414	 1BA	JUMP		 	 
- stack 0: 0x61C
2415	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x61C
2416	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
2417	 A2	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0xA0FFFF00BA000000DA000000F40015010E03500086000100A0000702260000
2418	 A3	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0xA0FFFF00BA000000DA000000F40015010E03500086000100A0000702260000
- stack 0: 0xE0
2419	 A5	SHR		 	 
- stack 1: 0x61C
- stack 0: 0xA0FFFF
2420	 A6	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
2421	 A9	AND		 	 
- stack 1: 0x61C
- stack 0: 0xFFFF
2422	 AA	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0xFFFF
- stack 0: 0x1
2423	 AC	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2424	 AD	PUSH2	0040	 	 
- stack 2: 0x61C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2425	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x61C
2426	 B1	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
2427	 B3	ADD		 	 
- stack 0: 0x620
2428	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
2429	 B5	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0xBA000000DA000000F40015010E03500086000100A000070226000000DA0080
2430	 B6	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0xBA000000DA000000F40015010E03500086000100A000070226000000DA0080
- stack 0: 0xF0
2431	 B8	SHR		 	 
- stack 1: 0x620
- stack 0: 0xBA
2432	 B9	JUMP		 	 
- stack 0: 0x620
2433	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x620
2434	 BB	PUSH2	0020	 	 
- stack 1: 0x620
- stack 0: 0x20
2435	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x620
- stack 0: 0x21212120
2436	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x620
- stack 1: 0x21212120
- stack 0: 0xFFFFFFFF
2437	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x620
- stack 0: 0x21212120
2438	 C5	PUSH2	0040	 	 
- stack 2: 0x620
- stack 1: 0x21212120
- stack 0: 0x40
2439	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x620
- stack 1: 0x21212120
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2440	 C9	PUSH1	1F	 	 
- stack 3: 0x620
- stack 2: 0x21212120
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1F
2441	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x620
- stack 1: 0x21212120
- stack 0: 0x1F
2442	 CC	SHL		 	 
- stack 1: 0x620
- stack 0: 0x1090909000000000
2443	 CD	PUSH2	0060	 	 
- stack 2: 0x620
- stack 1: 0x1090909000000000
- stack 0: 0x60
2444	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x620
2445	 D1	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
2446	 D3	ADD		 	 
- stack 0: 0x624
2447	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
2448	 D5	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xDA000000F40015010E03500086000100A000070226000000DA008000F40016
2449	 D6	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0xDA000000F40015010E03500086000100A000070226000000DA008000F40016
- stack 0: 0xF0
2450	 D8	SHR		 	 
- stack 1: 0x624
- stack 0: 0xDA
2451	 D9	JUMP		 	 
- stack 0: 0x624
2452	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x624
2453	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
2454	 DC	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xDA000000F40015010E03500086000100A000070226000000DA008000F40016
2455	 DD	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0xDA000000F40015010E03500086000100A000070226000000DA008000F40016
- stack 0: 0xE0
2456	 DF	SHR		 	 
- stack 1: 0x624
- stack 0: 0xDA0000
2457	 E0	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0xDA0000
- stack 0: 0xFFFF
2458	 E3	AND		 	 
- stack 1: 0x624
- stack 0: 0x0
2459	 E4	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x1
2460	 E6	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x0
2461	 E7	PUSH2	03A0	 	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x3A0
2462	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x624
2463	 EB	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
2464	 ED	ADD		 	 
- stack 0: 0x628
2465	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
2466	 EF	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xF40015010E03500086000100A000070226000000DA008000F4001602460338
2467	 F0	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0xF40015010E03500086000100A000070226000000DA008000F4001602460338
- stack 0: 0xF0
2468	 F2	SHR		 	 
- stack 1: 0x628
- stack 0: 0xF4
2469	 F3	JUMP		 	 
- stack 0: 0x628
2470	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x628
2471	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
2472	 F6	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xF40015010E03500086000100A000070226000000DA008000F4001602460338
2473	 F7	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0xF40015010E03500086000100A000070226000000DA008000F4001602460338
- stack 0: 0xE0
2474	 F9	SHR		 	 
- stack 1: 0x628
- stack 0: 0xF40015
2475	 FA	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0xF40015
- stack 0: 0xFFFF
2476	 FD	AND		 	 
- stack 1: 0x628
- stack 0: 0x15
2477	 FE	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x15
- stack 0: 0x1
2478	 100	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x15
2479	 101	PUSH2	0380	 	 
- stack 2: 0x628
- stack 1: 0x15
- stack 0: 0x380
2480	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x628
2481	 105	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
2482	 107	ADD		 	 
- stack 0: 0x62C
2483	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
2484	 109	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x10E03500086000100A000070226000000DA008000F400160246033800860001
2485	 10A	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x10E03500086000100A000070226000000DA008000F400160246033800860001
- stack 0: 0xF0
2486	 10C	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x10E
2487	 10D	JUMP		 	 
- stack 0: 0x62C
2488	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x62C
2489	 10F	PUSH2	0060	 	 
- stack 1: 0x62C
- stack 0: 0x60
2490	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x62C
- stack 0: 0x1090909000000000
2491	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x62C
- stack 1: 0x1090909000000000
- stack 0: 0xFFFFFFFF
2492	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x62C
- stack 0: 0x0
2493	 119	PUSH2	03A0	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x3A0
2494	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x0
2495	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x62C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2496	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x0
2497	 123	SUB		 	 
- stack 1: 0x62C
- stack 0: 0x0
2498	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x12C
2499	 127	JUMPI		 	 
- stack 0: 0x62C
2500	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x62C
- stack 0: 0x146
2501	 12B	JUMP		 	 
- stack 0: 0x62C
2502	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x62C
2503	 147	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
2504	 149	ADD		 	 
- stack 0: 0x630
2505	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
2506	 14B	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x86000100A000070226000000DA008000F40016024603380086000100A0000E
2507	 14C	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x86000100A000070226000000DA008000F40016024603380086000100A0000E
- stack 0: 0xF0
2508	 14E	SHR		 	 
- stack 1: 0x630
- stack 0: 0x86
2509	 14F	JUMP		 	 
- stack 0: 0x630
2510	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x630
2511	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
2512	 88	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x86000100A000070226000000DA008000F40016024603380086000100A0000E
2513	 89	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x86000100A000070226000000DA008000F40016024603380086000100A0000E
- stack 0: 0xE0
2514	 8B	SHR		 	 
- stack 1: 0x630
- stack 0: 0x860001
2515	 8C	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x860001
- stack 0: 0xFFFF
2516	 8F	AND		 	 
- stack 1: 0x630
- stack 0: 0x1
2517	 90	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x1
2518	 92	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x1
2519	 93	PUSH2	0020	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x20
2520	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x630
2521	 97	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
2522	 99	ADD		 	 
- stack 0: 0x634
2523	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
2524	 9B	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xA000070226000000DA008000F40016024603380086000100A0000E02880000
2525	 9C	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0xA000070226000000DA008000F40016024603380086000100A0000E02880000
- stack 0: 0xF0
2526	 9E	SHR		 	 
- stack 1: 0x634
- stack 0: 0xA0
2527	 9F	JUMP		 	 
- stack 0: 0x634
2528	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x634
2529	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
2530	 A2	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xA000070226000000DA008000F40016024603380086000100A0000E02880000
2531	 A3	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0xA000070226000000DA008000F40016024603380086000100A0000E02880000
- stack 0: 0xE0
2532	 A5	SHR		 	 
- stack 1: 0x634
- stack 0: 0xA00007
2533	 A6	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0xA00007
- stack 0: 0xFFFF
2534	 A9	AND		 	 
- stack 1: 0x634
- stack 0: 0x7
2535	 AA	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x7
- stack 0: 0x1
2536	 AC	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x7
2537	 AD	PUSH2	0040	 	 
- stack 2: 0x634
- stack 1: 0x7
- stack 0: 0x40
2538	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x634
2539	 B1	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
2540	 B3	ADD		 	 
- stack 0: 0x638
2541	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
2542	 B5	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x226000000DA008000F40016024603380086000100A0000E0288000001500004
2543	 B6	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x226000000DA008000F40016024603380086000100A0000E0288000001500004
- stack 0: 0xF0
2544	 B8	SHR		 	 
- stack 1: 0x638
- stack 0: 0x226
2545	 B9	JUMP		 	 
- stack 0: 0x638
2546	 226	JUMPDEST		 ;; __riscvimpl_SLL_1_1_2	  ;; # instr: sll ra,ra,sp(ignore imm)
- stack 0: 0x638
2547	 227	PUSH2	0020	 	 
- stack 1: 0x638
- stack 0: 0x20
2548	 22A	MLOAD		 	  ;; # read from x1
- stack 1: 0x638
- stack 0: 0x1
2549	 22B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2550	 230	AND		 	  ;; # mask to 32 bits
- stack 1: 0x638
- stack 0: 0x1
2551	 231	PUSH2	0040	 	 
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0x40
2552	 234	MLOAD		 	  ;; # read from x2
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0x7
2553	 235	PUSH1	1F	 	 
- stack 3: 0x638
- stack 2: 0x1
- stack 1: 0x7
- stack 0: 0x1F
2554	 237	AND		 	  ;; # mask to 5 bits
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0x7
2555	 238	SHL		 	 
- stack 1: 0x638
- stack 0: 0x80
2556	 239	PUSH2	0020	 	 
- stack 2: 0x638
- stack 1: 0x80
- stack 0: 0x20
2557	 23C	MSTORE		 	  ;; # store to x1
- stack 0: 0x638
2558	 23D	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
2559	 23F	ADD		 	 
- stack 0: 0x63C
2560	 240	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
2561	 241	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xDA008000F40016024603380086000100A0000E028800000150000400F40017
2562	 242	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xDA008000F40016024603380086000100A0000E028800000150000400F40017
- stack 0: 0xF0
2563	 244	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xDA
2564	 245	JUMP		 	 
- stack 0: 0x63C
2565	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x63C
2566	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
2567	 DC	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xDA008000F40016024603380086000100A0000E028800000150000400F40017
2568	 DD	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0xDA008000F40016024603380086000100A0000E028800000150000400F40017
- stack 0: 0xE0
2569	 DF	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xDA0080
2570	 E0	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0xDA0080
- stack 0: 0xFFFF
2571	 E3	AND		 	 
- stack 1: 0x63C
- stack 0: 0x80
2572	 E4	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x80
- stack 0: 0x1
2573	 E6	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x80
2574	 E7	PUSH2	03A0	 	 
- stack 2: 0x63C
- stack 1: 0x80
- stack 0: 0x3A0
2575	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x63C
2576	 EB	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
2577	 ED	ADD		 	 
- stack 0: 0x640
2578	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
2579	 EF	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xF40016024603380086000100A0000E028800000150000400F4001702A80320
2580	 F0	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0xF40016024603380086000100A0000E028800000150000400F4001702A80320
- stack 0: 0xF0
2581	 F2	SHR		 	 
- stack 1: 0x640
- stack 0: 0xF4
2582	 F3	JUMP		 	 
- stack 0: 0x640
2583	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x640
2584	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
2585	 F6	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xF40016024603380086000100A0000E028800000150000400F4001702A80320
2586	 F7	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0xF40016024603380086000100A0000E028800000150000400F4001702A80320
- stack 0: 0xE0
2587	 F9	SHR		 	 
- stack 1: 0x640
- stack 0: 0xF40016
2588	 FA	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0xF40016
- stack 0: 0xFFFF
2589	 FD	AND		 	 
- stack 1: 0x640
- stack 0: 0x16
2590	 FE	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x16
- stack 0: 0x1
2591	 100	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x16
2592	 101	PUSH2	0380	 	 
- stack 2: 0x640
- stack 1: 0x16
- stack 0: 0x380
2593	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x640
2594	 105	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
2595	 107	ADD		 	 
- stack 0: 0x644
2596	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
2597	 109	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x24603380086000100A0000E028800000150000400F4001702A8032000860003
2598	 10A	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x24603380086000100A0000E028800000150000400F4001702A8032000860003
- stack 0: 0xF0
2599	 10C	SHR		 	 
- stack 1: 0x644
- stack 0: 0x246
2600	 10D	JUMP		 	 
- stack 0: 0x644
2601	 246	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,338(ignore imm)
- stack 0: 0x644
2602	 247	PUSH2	0020	 	 
- stack 1: 0x644
- stack 0: 0x20
2603	 24A	MLOAD		 	  ;; # read from x1
- stack 1: 0x644
- stack 0: 0x80
2604	 24B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x644
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
2605	 250	AND		 	  ;; # mask to 32 bits
- stack 1: 0x644
- stack 0: 0x80
2606	 251	PUSH2	03A0	 	 
- stack 2: 0x644
- stack 1: 0x80
- stack 0: 0x3A0
2607	 254	MLOAD		 	  ;; # read from x29
- stack 2: 0x644
- stack 1: 0x80
- stack 0: 0x80
2608	 255	PUSH4	FFFFFFFF	 	 
- stack 3: 0x644
- stack 2: 0x80
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
2609	 25A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x644
- stack 1: 0x80
- stack 0: 0x80
2610	 25B	SUB		 	 
- stack 1: 0x644
- stack 0: 0x0
2611	 25C	PUSH2	0264	 ;; _neq_04a911ab758c032f05a3f56e947f52e48400aca3677ec6b10020ebb39886d47d	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x264
2612	 25F	JUMPI		 	 
- stack 0: 0x644
2613	 260	PUSH2	027E	 ;; _neq_after_04a911ab758c032f05a3f56e947f52e48400aca3677ec6b10020ebb39886d47d	 
- stack 1: 0x644
- stack 0: 0x27E
2614	 263	JUMP		 	 
- stack 0: 0x644
2615	 27E	JUMPDEST		 ;; _neq_after_04a911ab758c032f05a3f56e947f52e48400aca3677ec6b10020ebb39886d47d	 
- stack 0: 0x644
2616	 27F	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
2617	 281	ADD		 	 
- stack 0: 0x648
2618	 282	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
2619	 283	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x86000100A0000E028800000150000400F4001702A803200086000302EA0000
2620	 284	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x86000100A0000E028800000150000400F4001702A803200086000302EA0000
- stack 0: 0xF0
2621	 286	SHR		 	 
- stack 1: 0x648
- stack 0: 0x86
2622	 287	JUMP		 	 
- stack 0: 0x648
2623	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x648
2624	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
2625	 88	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x86000100A0000E028800000150000400F4001702A803200086000302EA0000
2626	 89	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x86000100A0000E028800000150000400F4001702A803200086000302EA0000
- stack 0: 0xE0
2627	 8B	SHR		 	 
- stack 1: 0x648
- stack 0: 0x860001
2628	 8C	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x860001
- stack 0: 0xFFFF
2629	 8F	AND		 	 
- stack 1: 0x648
- stack 0: 0x1
2630	 90	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x1
2631	 92	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x1
2632	 93	PUSH2	0020	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x20
2633	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x648
2634	 97	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
2635	 99	ADD		 	 
- stack 0: 0x64C
2636	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
2637	 9B	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xA0000E028800000150000400F4001702A803200086000302EA000000DA0018
2638	 9C	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0xA0000E028800000150000400F4001702A803200086000302EA000000DA0018
- stack 0: 0xF0
2639	 9E	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xA0
2640	 9F	JUMP		 	 
- stack 0: 0x64C
2641	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x64C
2642	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
2643	 A2	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xA0000E028800000150000400F4001702A803200086000302EA000000DA0018
2644	 A3	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0xA0000E028800000150000400F4001702A803200086000302EA000000DA0018
- stack 0: 0xE0
2645	 A5	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xA0000E
2646	 A6	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0xA0000E
- stack 0: 0xFFFF
2647	 A9	AND		 	 
- stack 1: 0x64C
- stack 0: 0xE
2648	 AA	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0xE
- stack 0: 0x1
2649	 AC	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0xE
2650	 AD	PUSH2	0040	 	 
- stack 2: 0x64C
- stack 1: 0xE
- stack 0: 0x40
2651	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x64C
2652	 B1	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
2653	 B3	ADD		 	 
- stack 0: 0x650
2654	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
2655	 B5	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x28800000150000400F4001702A803200086000302EA000000DA001800F40018
2656	 B6	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x28800000150000400F4001702A803200086000302EA000000DA001800F40018
- stack 0: 0xF0
2657	 B8	SHR		 	 
- stack 1: 0x650
- stack 0: 0x288
2658	 B9	JUMP		 	 
- stack 0: 0x650
2659	 288	JUMPDEST		 ;; __riscvimpl_SLL_2_1_2	  ;; # instr: sll sp,ra,sp(ignore imm)
- stack 0: 0x650
2660	 289	PUSH2	0020	 	 
- stack 1: 0x650
- stack 0: 0x20
2661	 28C	MLOAD		 	  ;; # read from x1
- stack 1: 0x650
- stack 0: 0x1
2662	 28D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2663	 292	AND		 	  ;; # mask to 32 bits
- stack 1: 0x650
- stack 0: 0x1
2664	 293	PUSH2	0040	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x40
2665	 296	MLOAD		 	  ;; # read from x2
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0xE
2666	 297	PUSH1	1F	 	 
- stack 3: 0x650
- stack 2: 0x1
- stack 1: 0xE
- stack 0: 0x1F
2667	 299	AND		 	  ;; # mask to 5 bits
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0xE
2668	 29A	SHL		 	 
- stack 1: 0x650
- stack 0: 0x4000
2669	 29B	PUSH2	0040	 	 
- stack 2: 0x650
- stack 1: 0x4000
- stack 0: 0x40
2670	 29E	MSTORE		 	  ;; # store to x2
- stack 0: 0x650
2671	 29F	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
2672	 2A1	ADD		 	 
- stack 0: 0x654
2673	 2A2	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
2674	 2A3	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x150000400F4001702A803200086000302EA000000DA001800F400180246030C
2675	 2A4	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x150000400F4001702A803200086000302EA000000DA001800F400180246030C
- stack 0: 0xF0
2676	 2A6	SHR		 	 
- stack 1: 0x654
- stack 0: 0x150
2677	 2A7	JUMP		 	 
- stack 0: 0x654
2678	 150	JUMPDEST		 ;; __riscvimpl_LUI_4eb7	  ;; # instr: lui t4,0x4(ignore imm)
- stack 0: 0x654
2679	 151	PUSH4	00004000	 	 
- stack 1: 0x654
- stack 0: 0x4000
2680	 156	PUSH2	03A0	 	 
- stack 2: 0x654
- stack 1: 0x4000
- stack 0: 0x3A0
2681	 159	MSTORE		 	  ;; # store to x29
- stack 0: 0x654
2682	 15A	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
2683	 15C	ADD		 	 
- stack 0: 0x658
2684	 15D	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
2685	 15E	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0xF4001702A803200086000302EA000000DA001800F400180246030C030A0000
2686	 15F	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0xF4001702A803200086000302EA000000DA001800F400180246030C030A0000
- stack 0: 0xF0
2687	 161	SHR		 	 
- stack 1: 0x658
- stack 0: 0xF4
2688	 162	JUMP		 	 
- stack 0: 0x658
2689	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x658
2690	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
2691	 F6	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0xF4001702A803200086000302EA000000DA001800F400180246030C030A0000
2692	 F7	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0xF4001702A803200086000302EA000000DA001800F400180246030C030A0000
- stack 0: 0xE0
2693	 F9	SHR		 	 
- stack 1: 0x658
- stack 0: 0xF40017
2694	 FA	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0xF40017
- stack 0: 0xFFFF
2695	 FD	AND		 	 
- stack 1: 0x658
- stack 0: 0x17
2696	 FE	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x17
- stack 0: 0x1
2697	 100	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x17
2698	 101	PUSH2	0380	 	 
- stack 2: 0x658
- stack 1: 0x17
- stack 0: 0x380
2699	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x658
2700	 105	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
2701	 107	ADD		 	 
- stack 0: 0x65C
2702	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
2703	 109	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x2A803200086000302EA000000DA001800F400180246030C030A000000860001
2704	 10A	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x2A803200086000302EA000000DA001800F400180246030C030A000000860001
- stack 0: 0xF0
2705	 10C	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x2A8
2706	 10D	JUMP		 	 
- stack 0: 0x65C
2707	 2A8	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,320(ignore imm)
- stack 0: 0x65C
2708	 2A9	PUSH2	0040	 	 
- stack 1: 0x65C
- stack 0: 0x40
2709	 2AC	MLOAD		 	  ;; # read from x2
- stack 1: 0x65C
- stack 0: 0x4000
2710	 2AD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x65C
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
2711	 2B2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x65C
- stack 0: 0x4000
2712	 2B3	PUSH2	03A0	 	 
- stack 2: 0x65C
- stack 1: 0x4000
- stack 0: 0x3A0
2713	 2B6	MLOAD		 	  ;; # read from x29
- stack 2: 0x65C
- stack 1: 0x4000
- stack 0: 0x4000
2714	 2B7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x65C
- stack 2: 0x4000
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
2715	 2BC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x65C
- stack 1: 0x4000
- stack 0: 0x4000
2716	 2BD	SUB		 	 
- stack 1: 0x65C
- stack 0: 0x0
2717	 2BE	PUSH2	02C6	 ;; _neq_43fcf4b2f3d37e9b70e16c2b7919bc66e11c9bd3aea60c9348e8e8364fe62612	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x2C6
2718	 2C1	JUMPI		 	 
- stack 0: 0x65C
2719	 2C2	PUSH2	02E0	 ;; _neq_after_43fcf4b2f3d37e9b70e16c2b7919bc66e11c9bd3aea60c9348e8e8364fe62612	 
- stack 1: 0x65C
- stack 0: 0x2E0
2720	 2C5	JUMP		 	 
- stack 0: 0x65C
2721	 2E0	JUMPDEST		 ;; _neq_after_43fcf4b2f3d37e9b70e16c2b7919bc66e11c9bd3aea60c9348e8e8364fe62612	 
- stack 0: 0x65C
2722	 2E1	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
2723	 2E3	ADD		 	 
- stack 0: 0x660
2724	 2E4	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
2725	 2E5	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x86000302EA000000DA001800F400180246030C030A00000086000100A00007
2726	 2E6	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x86000302EA000000DA001800F400180246030C030A00000086000100A00007
- stack 0: 0xF0
2727	 2E8	SHR		 	 
- stack 1: 0x660
- stack 0: 0x86
2728	 2E9	JUMP		 	 
- stack 0: 0x660
2729	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x660
2730	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
2731	 88	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x86000302EA000000DA001800F400180246030C030A00000086000100A00007
2732	 89	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x86000302EA000000DA001800F400180246030C030A00000086000100A00007
- stack 0: 0xE0
2733	 8B	SHR		 	 
- stack 1: 0x660
- stack 0: 0x860003
2734	 8C	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x860003
- stack 0: 0xFFFF
2735	 8F	AND		 	 
- stack 1: 0x660
- stack 0: 0x3
2736	 90	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0x3
- stack 0: 0x1
2737	 92	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0x3
2738	 93	PUSH2	0020	 	 
- stack 2: 0x660
- stack 1: 0x3
- stack 0: 0x20
2739	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x660
2740	 97	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
2741	 99	ADD		 	 
- stack 0: 0x664
2742	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
2743	 9B	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x2EA000000DA001800F400180246030C030A00000086000100A0000700BA0000
2744	 9C	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x2EA000000DA001800F400180246030C030A00000086000100A0000700BA0000
- stack 0: 0xF0
2745	 9E	SHR		 	 
- stack 1: 0x664
- stack 0: 0x2EA
2746	 9F	JUMP		 	 
- stack 0: 0x664
2747	 2EA	JUMPDEST		 ;; __riscvimpl_SLL_1_1_1	  ;; # instr: sll ra,ra,ra(ignore imm)
- stack 0: 0x664
2748	 2EB	PUSH2	0020	 	 
- stack 1: 0x664
- stack 0: 0x20
2749	 2EE	MLOAD		 	  ;; # read from x1
- stack 1: 0x664
- stack 0: 0x3
2750	 2EF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x664
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
2751	 2F4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x664
- stack 0: 0x3
2752	 2F5	PUSH2	0020	 	 
- stack 2: 0x664
- stack 1: 0x3
- stack 0: 0x20
2753	 2F8	MLOAD		 	  ;; # read from x1
- stack 2: 0x664
- stack 1: 0x3
- stack 0: 0x3
2754	 2F9	PUSH1	1F	 	 
- stack 3: 0x664
- stack 2: 0x3
- stack 1: 0x3
- stack 0: 0x1F
2755	 2FB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x664
- stack 1: 0x3
- stack 0: 0x3
2756	 2FC	SHL		 	 
- stack 1: 0x664
- stack 0: 0x18
2757	 2FD	PUSH2	0020	 	 
- stack 2: 0x664
- stack 1: 0x18
- stack 0: 0x20
2758	 300	MSTORE		 	  ;; # store to x1
- stack 0: 0x664
2759	 301	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
2760	 303	ADD		 	 
- stack 0: 0x668
2761	 304	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
2762	 305	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0xDA001800F400180246030C030A00000086000100A0000700BA000003240000
2763	 306	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0xDA001800F400180246030C030A00000086000100A0000700BA000003240000
- stack 0: 0xF0
2764	 308	SHR		 	 
- stack 1: 0x668
- stack 0: 0xDA
2765	 309	JUMP		 	 
- stack 0: 0x668
2766	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x668
2767	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
2768	 DC	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0xDA001800F400180246030C030A00000086000100A0000700BA000003240000
2769	 DD	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0xDA001800F400180246030C030A00000086000100A0000700BA000003240000
- stack 0: 0xE0
2770	 DF	SHR		 	 
- stack 1: 0x668
- stack 0: 0xDA0018
2771	 E0	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0xDA0018
- stack 0: 0xFFFF
2772	 E3	AND		 	 
- stack 1: 0x668
- stack 0: 0x18
2773	 E4	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0x18
- stack 0: 0x1
2774	 E6	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0x18
2775	 E7	PUSH2	03A0	 	 
- stack 2: 0x668
- stack 1: 0x18
- stack 0: 0x3A0
2776	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x668
2777	 EB	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
2778	 ED	ADD		 	 
- stack 0: 0x66C
2779	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
2780	 EF	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xF400180246030C030A00000086000100A0000700BA00000324000003430001
2781	 F0	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xF400180246030C030A00000086000100A0000700BA00000324000003430001
- stack 0: 0xF0
2782	 F2	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xF4
2783	 F3	JUMP		 	 
- stack 0: 0x66C
2784	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x66C
2785	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
2786	 F6	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xF400180246030C030A00000086000100A0000700BA00000324000003430001
2787	 F7	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0xF400180246030C030A00000086000100A0000700BA00000324000003430001
- stack 0: 0xE0
2788	 F9	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xF40018
2789	 FA	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0xF40018
- stack 0: 0xFFFF
2790	 FD	AND		 	 
- stack 1: 0x66C
- stack 0: 0x18
2791	 FE	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x18
- stack 0: 0x1
2792	 100	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x18
2793	 101	PUSH2	0380	 	 
- stack 2: 0x66C
- stack 1: 0x18
- stack 0: 0x380
2794	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x66C
2795	 105	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
2796	 107	ADD		 	 
- stack 0: 0x670
2797	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
2798	 109	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x246030C030A00000086000100A0000700BA0000032400000343000103620002
2799	 10A	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x246030C030A00000086000100A0000700BA0000032400000343000103620002
- stack 0: 0xF0
2800	 10C	SHR		 	 
- stack 1: 0x670
- stack 0: 0x246
2801	 10D	JUMP		 	 
- stack 0: 0x670
2802	 246	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,338(ignore imm)
- stack 0: 0x670
2803	 247	PUSH2	0020	 	 
- stack 1: 0x670
- stack 0: 0x20
2804	 24A	MLOAD		 	  ;; # read from x1
- stack 1: 0x670
- stack 0: 0x18
2805	 24B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x670
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
2806	 250	AND		 	  ;; # mask to 32 bits
- stack 1: 0x670
- stack 0: 0x18
2807	 251	PUSH2	03A0	 	 
- stack 2: 0x670
- stack 1: 0x18
- stack 0: 0x3A0
2808	 254	MLOAD		 	  ;; # read from x29
- stack 2: 0x670
- stack 1: 0x18
- stack 0: 0x18
2809	 255	PUSH4	FFFFFFFF	 	 
- stack 3: 0x670
- stack 2: 0x18
- stack 1: 0x18
- stack 0: 0xFFFFFFFF
2810	 25A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x670
- stack 1: 0x18
- stack 0: 0x18
2811	 25B	SUB		 	 
- stack 1: 0x670
- stack 0: 0x0
2812	 25C	PUSH2	0264	 ;; _neq_04a911ab758c032f05a3f56e947f52e48400aca3677ec6b10020ebb39886d47d	 
- stack 2: 0x670
- stack 1: 0x0
- stack 0: 0x264
2813	 25F	JUMPI		 	 
- stack 0: 0x670
2814	 260	PUSH2	027E	 ;; _neq_after_04a911ab758c032f05a3f56e947f52e48400aca3677ec6b10020ebb39886d47d	 
- stack 1: 0x670
- stack 0: 0x27E
2815	 263	JUMP		 	 
- stack 0: 0x670
2816	 27E	JUMPDEST		 ;; _neq_after_04a911ab758c032f05a3f56e947f52e48400aca3677ec6b10020ebb39886d47d	 
- stack 0: 0x670
2817	 27F	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
2818	 281	ADD		 	 
- stack 0: 0x674
2819	 282	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
2820	 283	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x30A00000086000100A0000700BA0000032400000343000103620002037CFFE8
2821	 284	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x30A00000086000100A0000700BA0000032400000343000103620002037CFFE8
- stack 0: 0xF0
2822	 286	SHR		 	 
- stack 1: 0x674
- stack 0: 0x30A
2823	 287	JUMP		 	 
- stack 0: 0x674
2824	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x674
2825	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
2826	 30C	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x30A00000086000100A0000700BA0000032400000343000103620002037CFFE8
2827	 30D	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x30A00000086000100A0000700BA0000032400000343000103620002037CFFE8
- stack 0: 0xE0
2828	 30F	SHR		 	 
- stack 1: 0x674
- stack 0: 0x30A0000
2829	 310	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x30A0000
- stack 0: 0xFFFF
2830	 313	AND		 	 
- stack 1: 0x674
- stack 0: 0x0
2831	 314	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x1
2832	 316	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x0
2833	 317	PUSH2	0080	 	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x80
2834	 31A	MSTORE		 	  ;; # store to x4
- stack 0: 0x674
2835	 31B	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
2836	 31D	ADD		 	 
- stack 0: 0x678
2837	 31E	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
2838	 31F	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x86000100A0000700BA0000032400000343000103620002037CFFE800DA0080
2839	 320	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x86000100A0000700BA0000032400000343000103620002037CFFE800DA0080
- stack 0: 0xF0
2840	 322	SHR		 	 
- stack 1: 0x678
- stack 0: 0x86
2841	 323	JUMP		 	 
- stack 0: 0x678
2842	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x678
2843	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
2844	 88	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x86000100A0000700BA0000032400000343000103620002037CFFE800DA0080
2845	 89	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x86000100A0000700BA0000032400000343000103620002037CFFE800DA0080
- stack 0: 0xE0
2846	 8B	SHR		 	 
- stack 1: 0x678
- stack 0: 0x860001
2847	 8C	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x860001
- stack 0: 0xFFFF
2848	 8F	AND		 	 
- stack 1: 0x678
- stack 0: 0x1
2849	 90	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x1
2850	 92	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x1
2851	 93	PUSH2	0020	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x20
2852	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x678
2853	 97	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
2854	 99	ADD		 	 
- stack 0: 0x67C
2855	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
2856	 9B	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0xA0000700BA0000032400000343000103620002037CFFE800DA008000F40019
2857	 9C	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0xA0000700BA0000032400000343000103620002037CFFE800DA008000F40019
- stack 0: 0xF0
2858	 9E	SHR		 	 
- stack 1: 0x67C
- stack 0: 0xA0
2859	 9F	JUMP		 	 
- stack 0: 0x67C
2860	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x67C
2861	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
2862	 A2	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0xA0000700BA0000032400000343000103620002037CFFE800DA008000F40019
2863	 A3	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0xA0000700BA0000032400000343000103620002037CFFE800DA008000F40019
- stack 0: 0xE0
2864	 A5	SHR		 	 
- stack 1: 0x67C
- stack 0: 0xA00007
2865	 A6	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0xA00007
- stack 0: 0xFFFF
2866	 A9	AND		 	 
- stack 1: 0x67C
- stack 0: 0x7
2867	 AA	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x7
- stack 0: 0x1
2868	 AC	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x7
2869	 AD	PUSH2	0040	 	 
- stack 2: 0x67C
- stack 1: 0x7
- stack 0: 0x40
2870	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x67C
2871	 B1	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
2872	 B3	ADD		 	 
- stack 0: 0x680
2873	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
2874	 B5	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xBA0000032400000343000103620002037CFFE800DA008000F4001903BE02E0
2875	 B6	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0xBA0000032400000343000103620002037CFFE800DA008000F4001903BE02E0
- stack 0: 0xF0
2876	 B8	SHR		 	 
- stack 1: 0x680
- stack 0: 0xBA
2877	 B9	JUMP		 	 
- stack 0: 0x680
2878	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x680
2879	 BB	PUSH2	0020	 	 
- stack 1: 0x680
- stack 0: 0x20
2880	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x680
- stack 0: 0x1
2881	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2882	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x680
- stack 0: 0x1
2883	 C5	PUSH2	0040	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x40
2884	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x7
2885	 C9	PUSH1	1F	 	 
- stack 3: 0x680
- stack 2: 0x1
- stack 1: 0x7
- stack 0: 0x1F
2886	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x7
2887	 CC	SHL		 	 
- stack 1: 0x680
- stack 0: 0x80
2888	 CD	PUSH2	0060	 	 
- stack 2: 0x680
- stack 1: 0x80
- stack 0: 0x60
2889	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x680
2890	 D1	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
2891	 D3	ADD		 	 
- stack 0: 0x684
2892	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
2893	 D5	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x32400000343000103620002037CFFE800DA008000F4001903BE02E0030A0000
2894	 D6	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x32400000343000103620002037CFFE800DA008000F4001903BE02E0030A0000
- stack 0: 0xF0
2895	 D8	SHR		 	 
- stack 1: 0x684
- stack 0: 0x324
2896	 D9	JUMP		 	 
- stack 0: 0x684
2897	 324	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x684
2898	 325	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
2899	 326	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x32400000343000103620002037CFFE800DA008000F4001903BE02E0030A0000
2900	 327	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x32400000343000103620002037CFFE800DA008000F4001903BE02E0030A0000
- stack 0: 0xE0
2901	 329	SHR		 	 
- stack 1: 0x684
- stack 0: 0x3240000
2902	 32A	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x3240000
- stack 0: 0xFFFF
2903	 32D	AND		 	 
- stack 1: 0x684
- stack 0: 0x0
2904	 32E	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x1
2905	 330	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x0
2906	 331	PUSH2	0060	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x60
2907	 334	MLOAD		 	  ;; # read from x3
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x80
2908	 335	ADD		 	  ;; # ADDI 3
- stack 1: 0x684
- stack 0: 0x80
2909	 336	PUSH2	00C0	 	 
- stack 2: 0x684
- stack 1: 0x80
- stack 0: 0xC0
2910	 339	MSTORE		 	  ;; # store to x6
- stack 0: 0x684
2911	 33A	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
2912	 33C	ADD		 	 
- stack 0: 0x688
2913	 33D	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
2914	 33E	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x343000103620002037CFFE800DA008000F4001903BE02E0030A000000860001
2915	 33F	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x343000103620002037CFFE800DA008000F4001903BE02E0030A000000860001
- stack 0: 0xF0
2916	 341	SHR		 	 
- stack 1: 0x688
- stack 0: 0x343
2917	 342	JUMP		 	 
- stack 0: 0x688
2918	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x688
2919	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
2920	 345	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x343000103620002037CFFE800DA008000F4001903BE02E0030A000000860001
2921	 346	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x343000103620002037CFFE800DA008000F4001903BE02E0030A000000860001
- stack 0: 0xE0
2922	 348	SHR		 	 
- stack 1: 0x688
- stack 0: 0x3430001
2923	 349	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x3430001
- stack 0: 0xFFFF
2924	 34C	AND		 	 
- stack 1: 0x688
- stack 0: 0x1
2925	 34D	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x1
2926	 34F	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x1
2927	 350	PUSH2	0080	 	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x80
2928	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x0
2929	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x688
- stack 0: 0x1
2930	 355	PUSH2	0080	 	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x80
2931	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x688
2932	 359	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
2933	 35B	ADD		 	 
- stack 0: 0x68C
2934	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
2935	 35D	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x3620002037CFFE800DA008000F4001903BE02E0030A00000086000100A0000E
2936	 35E	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x3620002037CFFE800DA008000F4001903BE02E0030A00000086000100A0000E
- stack 0: 0xF0
2937	 360	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x362
2938	 361	JUMP		 	 
- stack 0: 0x68C
2939	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x68C
2940	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
2941	 364	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x3620002037CFFE800DA008000F4001903BE02E0030A00000086000100A0000E
2942	 365	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x3620002037CFFE800DA008000F4001903BE02E0030A00000086000100A0000E
- stack 0: 0xE0
2943	 367	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x3620002
2944	 368	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x3620002
- stack 0: 0xFFFF
2945	 36B	AND		 	 
- stack 1: 0x68C
- stack 0: 0x2
2946	 36C	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0x2
- stack 0: 0x1
2947	 36E	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0x2
2948	 36F	PUSH2	00A0	 	 
- stack 2: 0x68C
- stack 1: 0x2
- stack 0: 0xA0
2949	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x68C
2950	 373	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
2951	 375	ADD		 	 
- stack 0: 0x690
2952	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
2953	 377	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x37CFFE800DA008000F4001903BE02E0030A00000086000100A0000E00BA0000
2954	 378	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x37CFFE800DA008000F4001903BE02E0030A00000086000100A0000E00BA0000
- stack 0: 0xF0
2955	 37A	SHR		 	 
- stack 1: 0x690
- stack 0: 0x37C
2956	 37B	JUMP		 	 
- stack 0: 0x690
2957	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x690
2958	 37D	PUSH2	0080	 	 
- stack 1: 0x690
- stack 0: 0x80
2959	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x690
- stack 0: 0x1
2960	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x690
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2961	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x690
- stack 0: 0x1
2962	 387	PUSH2	00A0	 	 
- stack 2: 0x690
- stack 1: 0x1
- stack 0: 0xA0
2963	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x690
- stack 1: 0x1
- stack 0: 0x2
2964	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x690
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2965	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x690
- stack 1: 0x1
- stack 0: 0x2
2966	 391	SUB		 	 
- stack 1: 0x690
- stack 0: 0x1
2967	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x690
- stack 1: 0x1
- stack 0: 0x39A
2968	 395	JUMPI		 	 
- stack 0: 0x690
2969	 39A	JUMPDEST		 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x690
2970	 39B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
2971	 39C	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x37CFFE800DA008000F4001903BE02E0030A00000086000100A0000E00BA0000
2972	 39D	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x37CFFE800DA008000F4001903BE02E0030A00000086000100A0000E00BA0000
- stack 0: 0xE0
2973	 39F	SHR		 	 
- stack 1: 0x690
- stack 0: 0x37CFFE8
2974	 3A0	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x37CFFE8
- stack 0: 0xFFFF
2975	 3A3	AND		 	 
- stack 1: 0x690
- stack 0: 0xFFE8
2976	 3A4	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0xFFE8
- stack 0: 0x1
2977	 3A6	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2978	 3A7	ADD		 	 
- stack 0: 0x678
2979	 3A8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x678
- stack 0: 0xFFFFFFFF
2980	 3AD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x678
2981	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
2982	 3AF	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x86000100A0000700BA0000032400000343000103620002037CFFE800DA0080
2983	 3B0	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x86000100A0000700BA0000032400000343000103620002037CFFE800DA0080
- stack 0: 0xF0
2984	 3B2	SHR		 	 
- stack 1: 0x678
- stack 0: 0x86
2985	 3B3	JUMP		 	 
- stack 0: 0x678
2986	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x678
2987	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
2988	 88	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x86000100A0000700BA0000032400000343000103620002037CFFE800DA0080
2989	 89	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x86000100A0000700BA0000032400000343000103620002037CFFE800DA0080
- stack 0: 0xE0
2990	 8B	SHR		 	 
- stack 1: 0x678
- stack 0: 0x860001
2991	 8C	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x860001
- stack 0: 0xFFFF
2992	 8F	AND		 	 
- stack 1: 0x678
- stack 0: 0x1
2993	 90	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x1
2994	 92	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x1
2995	 93	PUSH2	0020	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x20
2996	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x678
2997	 97	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
2998	 99	ADD		 	 
- stack 0: 0x67C
2999	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3000	 9B	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0xA0000700BA0000032400000343000103620002037CFFE800DA008000F40019
3001	 9C	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0xA0000700BA0000032400000343000103620002037CFFE800DA008000F40019
- stack 0: 0xF0
3002	 9E	SHR		 	 
- stack 1: 0x67C
- stack 0: 0xA0
3003	 9F	JUMP		 	 
- stack 0: 0x67C
3004	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x67C
3005	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
3006	 A2	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0xA0000700BA0000032400000343000103620002037CFFE800DA008000F40019
3007	 A3	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0xA0000700BA0000032400000343000103620002037CFFE800DA008000F40019
- stack 0: 0xE0
3008	 A5	SHR		 	 
- stack 1: 0x67C
- stack 0: 0xA00007
3009	 A6	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0xA00007
- stack 0: 0xFFFF
3010	 A9	AND		 	 
- stack 1: 0x67C
- stack 0: 0x7
3011	 AA	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x7
- stack 0: 0x1
3012	 AC	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x7
3013	 AD	PUSH2	0040	 	 
- stack 2: 0x67C
- stack 1: 0x7
- stack 0: 0x40
3014	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x67C
3015	 B1	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3016	 B3	ADD		 	 
- stack 0: 0x680
3017	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3018	 B5	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xBA0000032400000343000103620002037CFFE800DA008000F4001903BE02E0
3019	 B6	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0xBA0000032400000343000103620002037CFFE800DA008000F4001903BE02E0
- stack 0: 0xF0
3020	 B8	SHR		 	 
- stack 1: 0x680
- stack 0: 0xBA
3021	 B9	JUMP		 	 
- stack 0: 0x680
3022	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x680
3023	 BB	PUSH2	0020	 	 
- stack 1: 0x680
- stack 0: 0x20
3024	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x680
- stack 0: 0x1
3025	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3026	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x680
- stack 0: 0x1
3027	 C5	PUSH2	0040	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x40
3028	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x7
3029	 C9	PUSH1	1F	 	 
- stack 3: 0x680
- stack 2: 0x1
- stack 1: 0x7
- stack 0: 0x1F
3030	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x7
3031	 CC	SHL		 	 
- stack 1: 0x680
- stack 0: 0x80
3032	 CD	PUSH2	0060	 	 
- stack 2: 0x680
- stack 1: 0x80
- stack 0: 0x60
3033	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x680
3034	 D1	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
3035	 D3	ADD		 	 
- stack 0: 0x684
3036	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
3037	 D5	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x32400000343000103620002037CFFE800DA008000F4001903BE02E0030A0000
3038	 D6	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x32400000343000103620002037CFFE800DA008000F4001903BE02E0030A0000
- stack 0: 0xF0
3039	 D8	SHR		 	 
- stack 1: 0x684
- stack 0: 0x324
3040	 D9	JUMP		 	 
- stack 0: 0x684
3041	 324	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x684
3042	 325	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
3043	 326	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x32400000343000103620002037CFFE800DA008000F4001903BE02E0030A0000
3044	 327	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x32400000343000103620002037CFFE800DA008000F4001903BE02E0030A0000
- stack 0: 0xE0
3045	 329	SHR		 	 
- stack 1: 0x684
- stack 0: 0x3240000
3046	 32A	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x3240000
- stack 0: 0xFFFF
3047	 32D	AND		 	 
- stack 1: 0x684
- stack 0: 0x0
3048	 32E	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x1
3049	 330	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x0
3050	 331	PUSH2	0060	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x60
3051	 334	MLOAD		 	  ;; # read from x3
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x80
3052	 335	ADD		 	  ;; # ADDI 3
- stack 1: 0x684
- stack 0: 0x80
3053	 336	PUSH2	00C0	 	 
- stack 2: 0x684
- stack 1: 0x80
- stack 0: 0xC0
3054	 339	MSTORE		 	  ;; # store to x6
- stack 0: 0x684
3055	 33A	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
3056	 33C	ADD		 	 
- stack 0: 0x688
3057	 33D	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
3058	 33E	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x343000103620002037CFFE800DA008000F4001903BE02E0030A000000860001
3059	 33F	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x343000103620002037CFFE800DA008000F4001903BE02E0030A000000860001
- stack 0: 0xF0
3060	 341	SHR		 	 
- stack 1: 0x688
- stack 0: 0x343
3061	 342	JUMP		 	 
- stack 0: 0x688
3062	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x688
3063	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
3064	 345	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x343000103620002037CFFE800DA008000F4001903BE02E0030A000000860001
3065	 346	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x343000103620002037CFFE800DA008000F4001903BE02E0030A000000860001
- stack 0: 0xE0
3066	 348	SHR		 	 
- stack 1: 0x688
- stack 0: 0x3430001
3067	 349	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x3430001
- stack 0: 0xFFFF
3068	 34C	AND		 	 
- stack 1: 0x688
- stack 0: 0x1
3069	 34D	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x1
3070	 34F	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x1
3071	 350	PUSH2	0080	 	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x80
3072	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x1
3073	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x688
- stack 0: 0x2
3074	 355	PUSH2	0080	 	 
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0x80
3075	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x688
3076	 359	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
3077	 35B	ADD		 	 
- stack 0: 0x68C
3078	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
3079	 35D	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x3620002037CFFE800DA008000F4001903BE02E0030A00000086000100A0000E
3080	 35E	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x3620002037CFFE800DA008000F4001903BE02E0030A00000086000100A0000E
- stack 0: 0xF0
3081	 360	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x362
3082	 361	JUMP		 	 
- stack 0: 0x68C
3083	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x68C
3084	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
3085	 364	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x3620002037CFFE800DA008000F4001903BE02E0030A00000086000100A0000E
3086	 365	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x3620002037CFFE800DA008000F4001903BE02E0030A00000086000100A0000E
- stack 0: 0xE0
3087	 367	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x3620002
3088	 368	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x3620002
- stack 0: 0xFFFF
3089	 36B	AND		 	 
- stack 1: 0x68C
- stack 0: 0x2
3090	 36C	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0x2
- stack 0: 0x1
3091	 36E	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0x2
3092	 36F	PUSH2	00A0	 	 
- stack 2: 0x68C
- stack 1: 0x2
- stack 0: 0xA0
3093	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x68C
3094	 373	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
3095	 375	ADD		 	 
- stack 0: 0x690
3096	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
3097	 377	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x37CFFE800DA008000F4001903BE02E0030A00000086000100A0000E00BA0000
3098	 378	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x37CFFE800DA008000F4001903BE02E0030A00000086000100A0000E00BA0000
- stack 0: 0xF0
3099	 37A	SHR		 	 
- stack 1: 0x690
- stack 0: 0x37C
3100	 37B	JUMP		 	 
- stack 0: 0x690
3101	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x690
3102	 37D	PUSH2	0080	 	 
- stack 1: 0x690
- stack 0: 0x80
3103	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x690
- stack 0: 0x2
3104	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x690
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3105	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x690
- stack 0: 0x2
3106	 387	PUSH2	00A0	 	 
- stack 2: 0x690
- stack 1: 0x2
- stack 0: 0xA0
3107	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x690
- stack 1: 0x2
- stack 0: 0x2
3108	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x690
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3109	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x690
- stack 1: 0x2
- stack 0: 0x2
3110	 391	SUB		 	 
- stack 1: 0x690
- stack 0: 0x0
3111	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x39A
3112	 395	JUMPI		 	 
- stack 0: 0x690
3113	 396	PUSH2	03B4	 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 1: 0x690
- stack 0: 0x3B4
3114	 399	JUMP		 	 
- stack 0: 0x690
3115	 3B4	JUMPDEST		 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x690
3116	 3B5	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
3117	 3B7	ADD		 	 
- stack 0: 0x694
3118	 3B8	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
3119	 3B9	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xDA008000F4001903BE02E0030A00000086000100A0000E00BA000004000000
3120	 3BA	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0xDA008000F4001903BE02E0030A00000086000100A0000E00BA000004000000
- stack 0: 0xF0
3121	 3BC	SHR		 	 
- stack 1: 0x694
- stack 0: 0xDA
3122	 3BD	JUMP		 	 
- stack 0: 0x694
3123	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x694
3124	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
3125	 DC	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xDA008000F4001903BE02E0030A00000086000100A0000E00BA000004000000
3126	 DD	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0xDA008000F4001903BE02E0030A00000086000100A0000E00BA000004000000
- stack 0: 0xE0
3127	 DF	SHR		 	 
- stack 1: 0x694
- stack 0: 0xDA0080
3128	 E0	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0xDA0080
- stack 0: 0xFFFF
3129	 E3	AND		 	 
- stack 1: 0x694
- stack 0: 0x80
3130	 E4	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x80
- stack 0: 0x1
3131	 E6	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x80
3132	 E7	PUSH2	03A0	 	 
- stack 2: 0x694
- stack 1: 0x80
- stack 0: 0x3A0
3133	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x694
3134	 EB	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
3135	 ED	ADD		 	 
- stack 0: 0x698
3136	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
3137	 EF	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0xF4001903BE02E0030A00000086000100A0000E00BA00000400000003240000
3138	 F0	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0xF4001903BE02E0030A00000086000100A0000E00BA00000400000003240000
- stack 0: 0xF0
3139	 F2	SHR		 	 
- stack 1: 0x698
- stack 0: 0xF4
3140	 F3	JUMP		 	 
- stack 0: 0x698
3141	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x698
3142	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
3143	 F6	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0xF4001903BE02E0030A00000086000100A0000E00BA00000400000003240000
3144	 F7	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0xF4001903BE02E0030A00000086000100A0000E00BA00000400000003240000
- stack 0: 0xE0
3145	 F9	SHR		 	 
- stack 1: 0x698
- stack 0: 0xF40019
3146	 FA	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0xF40019
- stack 0: 0xFFFF
3147	 FD	AND		 	 
- stack 1: 0x698
- stack 0: 0x19
3148	 FE	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x19
- stack 0: 0x1
3149	 100	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x19
3150	 101	PUSH2	0380	 	 
- stack 2: 0x698
- stack 1: 0x19
- stack 0: 0x380
3151	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x698
3152	 105	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
3153	 107	ADD		 	 
- stack 0: 0x69C
3154	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
3155	 109	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x3BE02E0030A00000086000100A0000E00BA0000040000000324000003430001
3156	 10A	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x3BE02E0030A00000086000100A0000E00BA0000040000000324000003430001
- stack 0: 0xF0
3157	 10C	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x3BE
3158	 10D	JUMP		 	 
- stack 0: 0x69C
3159	 3BE	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,2e0(ignore imm)
- stack 0: 0x69C
3160	 3BF	PUSH2	00C0	 	 
- stack 1: 0x69C
- stack 0: 0xC0
3161	 3C2	MLOAD		 	  ;; # read from x6
- stack 1: 0x69C
- stack 0: 0x80
3162	 3C3	PUSH4	FFFFFFFF	 	 
- stack 2: 0x69C
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
3163	 3C8	AND		 	  ;; # mask to 32 bits
- stack 1: 0x69C
- stack 0: 0x80
3164	 3C9	PUSH2	03A0	 	 
- stack 2: 0x69C
- stack 1: 0x80
- stack 0: 0x3A0
3165	 3CC	MLOAD		 	  ;; # read from x29
- stack 2: 0x69C
- stack 1: 0x80
- stack 0: 0x80
3166	 3CD	PUSH4	FFFFFFFF	 	 
- stack 3: 0x69C
- stack 2: 0x80
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
3167	 3D2	AND		 	  ;; # mask to 32 bits
- stack 2: 0x69C
- stack 1: 0x80
- stack 0: 0x80
3168	 3D3	SUB		 	 
- stack 1: 0x69C
- stack 0: 0x0
3169	 3D4	PUSH2	03DC	 ;; _neq_71ba06e6fcae51ace1b341e29dc243c7f99608c29fb2d1b5207c4d1fe1becb5e	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x3DC
3170	 3D7	JUMPI		 	 
- stack 0: 0x69C
3171	 3D8	PUSH2	03F6	 ;; _neq_after_71ba06e6fcae51ace1b341e29dc243c7f99608c29fb2d1b5207c4d1fe1becb5e	 
- stack 1: 0x69C
- stack 0: 0x3F6
3172	 3DB	JUMP		 	 
- stack 0: 0x69C
3173	 3F6	JUMPDEST		 ;; _neq_after_71ba06e6fcae51ace1b341e29dc243c7f99608c29fb2d1b5207c4d1fe1becb5e	 
- stack 0: 0x69C
3174	 3F7	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
3175	 3F9	ADD		 	 
- stack 0: 0x6A0
3176	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
3177	 3FB	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x30A00000086000100A0000E00BA000004000000032400000343000103620002
3178	 3FC	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x30A00000086000100A0000E00BA000004000000032400000343000103620002
- stack 0: 0xF0
3179	 3FE	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x30A
3180	 3FF	JUMP		 	 
- stack 0: 0x6A0
3181	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6A0
3182	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
3183	 30C	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x30A00000086000100A0000E00BA000004000000032400000343000103620002
3184	 30D	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x30A00000086000100A0000E00BA000004000000032400000343000103620002
- stack 0: 0xE0
3185	 30F	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x30A0000
3186	 310	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x30A0000
- stack 0: 0xFFFF
3187	 313	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
3188	 314	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
3189	 316	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
3190	 317	PUSH2	0080	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x80
3191	 31A	MSTORE		 	  ;; # store to x4
- stack 0: 0x6A0
3192	 31B	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
3193	 31D	ADD		 	 
- stack 0: 0x6A4
3194	 31E	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
3195	 31F	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x86000100A0000E00BA000004000000032400000343000103620002037CFFE4
3196	 320	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x86000100A0000E00BA000004000000032400000343000103620002037CFFE4
- stack 0: 0xF0
3197	 322	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x86
3198	 323	JUMP		 	 
- stack 0: 0x6A4
3199	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x6A4
3200	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
3201	 88	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x86000100A0000E00BA000004000000032400000343000103620002037CFFE4
3202	 89	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x86000100A0000E00BA000004000000032400000343000103620002037CFFE4
- stack 0: 0xE0
3203	 8B	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x860001
3204	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x860001
- stack 0: 0xFFFF
3205	 8F	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
3206	 90	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x1
3207	 92	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
3208	 93	PUSH2	0020	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x20
3209	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A4
3210	 97	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
3211	 99	ADD		 	 
- stack 0: 0x6A8
3212	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
3213	 9B	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xA0000E00BA000004000000032400000343000103620002037CFFE401500004
3214	 9C	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0xA0000E00BA000004000000032400000343000103620002037CFFE401500004
- stack 0: 0xF0
3215	 9E	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xA0
3216	 9F	JUMP		 	 
- stack 0: 0x6A8
3217	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6A8
3218	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
3219	 A2	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xA0000E00BA000004000000032400000343000103620002037CFFE401500004
3220	 A3	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0xA0000E00BA000004000000032400000343000103620002037CFFE401500004
- stack 0: 0xE0
3221	 A5	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xA0000E
3222	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0xA0000E
- stack 0: 0xFFFF
3223	 A9	AND		 	 
- stack 1: 0x6A8
- stack 0: 0xE
3224	 AA	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0xE
- stack 0: 0x1
3225	 AC	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0xE
3226	 AD	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0xE
- stack 0: 0x40
3227	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A8
3228	 B1	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
3229	 B3	ADD		 	 
- stack 0: 0x6AC
3230	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
3231	 B5	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0xBA000004000000032400000343000103620002037CFFE40150000400F4001A
3232	 B6	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0xBA000004000000032400000343000103620002037CFFE40150000400F4001A
- stack 0: 0xF0
3233	 B8	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0xBA
3234	 B9	JUMP		 	 
- stack 0: 0x6AC
3235	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x6AC
3236	 BB	PUSH2	0020	 	 
- stack 1: 0x6AC
- stack 0: 0x20
3237	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x6AC
- stack 0: 0x1
3238	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3239	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6AC
- stack 0: 0x1
3240	 C5	PUSH2	0040	 	 
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0x40
3241	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0xE
3242	 C9	PUSH1	1F	 	 
- stack 3: 0x6AC
- stack 2: 0x1
- stack 1: 0xE
- stack 0: 0x1F
3243	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0xE
3244	 CC	SHL		 	 
- stack 1: 0x6AC
- stack 0: 0x4000
3245	 CD	PUSH2	0060	 	 
- stack 2: 0x6AC
- stack 1: 0x4000
- stack 0: 0x60
3246	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x6AC
3247	 D1	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
3248	 D3	ADD		 	 
- stack 0: 0x6B0
3249	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
3250	 D5	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x4000000032400000343000103620002037CFFE40150000400F4001A03BE02B0
3251	 D6	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x4000000032400000343000103620002037CFFE40150000400F4001A03BE02B0
- stack 0: 0xF0
3252	 D8	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x400
3253	 D9	JUMP		 	 
- stack 0: 0x6B0
3254	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6B0
3255	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
3256	 402	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x4000000032400000343000103620002037CFFE40150000400F4001A03BE02B0
3257	 403	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x4000000032400000343000103620002037CFFE40150000400F4001A03BE02B0
- stack 0: 0xE0
3258	 405	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x4000000
3259	 406	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x4000000
- stack 0: 0xFFFF
3260	 409	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
3261	 40A	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x0
- stack 0: 0x1
3262	 40C	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
3263	 40D	POP		 	 
- stack 0: 0x6B0
3264	 40E	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
3265	 410	ADD		 	 
- stack 0: 0x6B4
3266	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
3267	 412	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x32400000343000103620002037CFFE40150000400F4001A03BE02B0030A0000
3268	 413	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x32400000343000103620002037CFFE40150000400F4001A03BE02B0030A0000
- stack 0: 0xF0
3269	 415	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x324
3270	 416	JUMP		 	 
- stack 0: 0x6B4
3271	 324	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x6B4
3272	 325	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
3273	 326	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x32400000343000103620002037CFFE40150000400F4001A03BE02B0030A0000
3274	 327	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x32400000343000103620002037CFFE40150000400F4001A03BE02B0030A0000
- stack 0: 0xE0
3275	 329	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3240000
3276	 32A	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x3240000
- stack 0: 0xFFFF
3277	 32D	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
3278	 32E	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x1
3279	 330	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
3280	 331	PUSH2	0060	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x60
3281	 334	MLOAD		 	  ;; # read from x3
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x4000
3282	 335	ADD		 	  ;; # ADDI 3
- stack 1: 0x6B4
- stack 0: 0x4000
3283	 336	PUSH2	00C0	 	 
- stack 2: 0x6B4
- stack 1: 0x4000
- stack 0: 0xC0
3284	 339	MSTORE		 	  ;; # store to x6
- stack 0: 0x6B4
3285	 33A	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3286	 33C	ADD		 	 
- stack 0: 0x6B8
3287	 33D	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
3288	 33E	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x343000103620002037CFFE40150000400F4001A03BE02B0030A000000860001
3289	 33F	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x343000103620002037CFFE40150000400F4001A03BE02B0030A000000860001
- stack 0: 0xF0
3290	 341	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x343
3291	 342	JUMP		 	 
- stack 0: 0x6B8
3292	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6B8
3293	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
3294	 345	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x343000103620002037CFFE40150000400F4001A03BE02B0030A000000860001
3295	 346	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x343000103620002037CFFE40150000400F4001A03BE02B0030A000000860001
- stack 0: 0xE0
3296	 348	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x3430001
3297	 349	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x3430001
- stack 0: 0xFFFF
3298	 34C	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
3299	 34D	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
3300	 34F	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
3301	 350	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x80
3302	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x0
3303	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x6B8
- stack 0: 0x1
3304	 355	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x80
3305	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B8
3306	 359	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
3307	 35B	ADD		 	 
- stack 0: 0x6BC
3308	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
3309	 35D	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3620002037CFFE40150000400F4001A03BE02B0030A00000086000100A0001F
3310	 35E	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x3620002037CFFE40150000400F4001A03BE02B0030A00000086000100A0001F
- stack 0: 0xF0
3311	 360	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x362
3312	 361	JUMP		 	 
- stack 0: 0x6BC
3313	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6BC
3314	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
3315	 364	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3620002037CFFE40150000400F4001A03BE02B0030A00000086000100A0001F
3316	 365	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x3620002037CFFE40150000400F4001A03BE02B0030A00000086000100A0001F
- stack 0: 0xE0
3317	 367	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x3620002
3318	 368	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x3620002
- stack 0: 0xFFFF
3319	 36B	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
3320	 36C	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0x1
3321	 36E	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
3322	 36F	PUSH2	00A0	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0xA0
3323	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x6BC
3324	 373	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
3325	 375	ADD		 	 
- stack 0: 0x6C0
3326	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
3327	 377	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x37CFFE40150000400F4001A03BE02B0030A00000086000100A0001F00BA0000
3328	 378	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x37CFFE40150000400F4001A03BE02B0030A00000086000100A0001F00BA0000
- stack 0: 0xF0
3329	 37A	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x37C
3330	 37B	JUMP		 	 
- stack 0: 0x6C0
3331	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6C0
3332	 37D	PUSH2	0080	 	 
- stack 1: 0x6C0
- stack 0: 0x80
3333	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x6C0
- stack 0: 0x1
3334	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3335	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C0
- stack 0: 0x1
3336	 387	PUSH2	00A0	 	 
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0xA0
3337	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0x2
3338	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3339	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0x2
3340	 391	SUB		 	 
- stack 1: 0x6C0
- stack 0: 0x1
3341	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0x39A
3342	 395	JUMPI		 	 
- stack 0: 0x6C0
3343	 39A	JUMPDEST		 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x6C0
3344	 39B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
3345	 39C	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x37CFFE40150000400F4001A03BE02B0030A00000086000100A0001F00BA0000
3346	 39D	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x37CFFE40150000400F4001A03BE02B0030A00000086000100A0001F00BA0000
- stack 0: 0xE0
3347	 39F	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x37CFFE4
3348	 3A0	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x37CFFE4
- stack 0: 0xFFFF
3349	 3A3	AND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFE4
3350	 3A4	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0xFFE4
- stack 0: 0x1
3351	 3A6	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
3352	 3A7	ADD		 	 
- stack 0: 0x6A4
3353	 3A8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6A4
- stack 0: 0xFFFFFFFF
3354	 3AD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6A4
3355	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
3356	 3AF	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x86000100A0000E00BA000004000000032400000343000103620002037CFFE4
3357	 3B0	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x86000100A0000E00BA000004000000032400000343000103620002037CFFE4
- stack 0: 0xF0
3358	 3B2	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x86
3359	 3B3	JUMP		 	 
- stack 0: 0x6A4
3360	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x6A4
3361	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
3362	 88	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x86000100A0000E00BA000004000000032400000343000103620002037CFFE4
3363	 89	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x86000100A0000E00BA000004000000032400000343000103620002037CFFE4
- stack 0: 0xE0
3364	 8B	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x860001
3365	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x860001
- stack 0: 0xFFFF
3366	 8F	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
3367	 90	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x1
3368	 92	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
3369	 93	PUSH2	0020	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x20
3370	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A4
3371	 97	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
3372	 99	ADD		 	 
- stack 0: 0x6A8
3373	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
3374	 9B	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xA0000E00BA000004000000032400000343000103620002037CFFE401500004
3375	 9C	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0xA0000E00BA000004000000032400000343000103620002037CFFE401500004
- stack 0: 0xF0
3376	 9E	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xA0
3377	 9F	JUMP		 	 
- stack 0: 0x6A8
3378	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6A8
3379	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
3380	 A2	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xA0000E00BA000004000000032400000343000103620002037CFFE401500004
3381	 A3	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0xA0000E00BA000004000000032400000343000103620002037CFFE401500004
- stack 0: 0xE0
3382	 A5	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xA0000E
3383	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0xA0000E
- stack 0: 0xFFFF
3384	 A9	AND		 	 
- stack 1: 0x6A8
- stack 0: 0xE
3385	 AA	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0xE
- stack 0: 0x1
3386	 AC	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0xE
3387	 AD	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0xE
- stack 0: 0x40
3388	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A8
3389	 B1	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
3390	 B3	ADD		 	 
- stack 0: 0x6AC
3391	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
3392	 B5	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0xBA000004000000032400000343000103620002037CFFE40150000400F4001A
3393	 B6	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0xBA000004000000032400000343000103620002037CFFE40150000400F4001A
- stack 0: 0xF0
3394	 B8	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0xBA
3395	 B9	JUMP		 	 
- stack 0: 0x6AC
3396	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x6AC
3397	 BB	PUSH2	0020	 	 
- stack 1: 0x6AC
- stack 0: 0x20
3398	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x6AC
- stack 0: 0x1
3399	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3400	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6AC
- stack 0: 0x1
3401	 C5	PUSH2	0040	 	 
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0x40
3402	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0xE
3403	 C9	PUSH1	1F	 	 
- stack 3: 0x6AC
- stack 2: 0x1
- stack 1: 0xE
- stack 0: 0x1F
3404	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0xE
3405	 CC	SHL		 	 
- stack 1: 0x6AC
- stack 0: 0x4000
3406	 CD	PUSH2	0060	 	 
- stack 2: 0x6AC
- stack 1: 0x4000
- stack 0: 0x60
3407	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x6AC
3408	 D1	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
3409	 D3	ADD		 	 
- stack 0: 0x6B0
3410	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
3411	 D5	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x4000000032400000343000103620002037CFFE40150000400F4001A03BE02B0
3412	 D6	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x4000000032400000343000103620002037CFFE40150000400F4001A03BE02B0
- stack 0: 0xF0
3413	 D8	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x400
3414	 D9	JUMP		 	 
- stack 0: 0x6B0
3415	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6B0
3416	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
3417	 402	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x4000000032400000343000103620002037CFFE40150000400F4001A03BE02B0
3418	 403	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x4000000032400000343000103620002037CFFE40150000400F4001A03BE02B0
- stack 0: 0xE0
3419	 405	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x4000000
3420	 406	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x4000000
- stack 0: 0xFFFF
3421	 409	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
3422	 40A	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x0
- stack 0: 0x1
3423	 40C	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
3424	 40D	POP		 	 
- stack 0: 0x6B0
3425	 40E	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
3426	 410	ADD		 	 
- stack 0: 0x6B4
3427	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
3428	 412	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x32400000343000103620002037CFFE40150000400F4001A03BE02B0030A0000
3429	 413	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x32400000343000103620002037CFFE40150000400F4001A03BE02B0030A0000
- stack 0: 0xF0
3430	 415	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x324
3431	 416	JUMP		 	 
- stack 0: 0x6B4
3432	 324	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x6B4
3433	 325	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
3434	 326	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x32400000343000103620002037CFFE40150000400F4001A03BE02B0030A0000
3435	 327	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x32400000343000103620002037CFFE40150000400F4001A03BE02B0030A0000
- stack 0: 0xE0
3436	 329	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3240000
3437	 32A	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x3240000
- stack 0: 0xFFFF
3438	 32D	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
3439	 32E	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x1
3440	 330	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
3441	 331	PUSH2	0060	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x60
3442	 334	MLOAD		 	  ;; # read from x3
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x4000
3443	 335	ADD		 	  ;; # ADDI 3
- stack 1: 0x6B4
- stack 0: 0x4000
3444	 336	PUSH2	00C0	 	 
- stack 2: 0x6B4
- stack 1: 0x4000
- stack 0: 0xC0
3445	 339	MSTORE		 	  ;; # store to x6
- stack 0: 0x6B4
3446	 33A	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3447	 33C	ADD		 	 
- stack 0: 0x6B8
3448	 33D	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
3449	 33E	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x343000103620002037CFFE40150000400F4001A03BE02B0030A000000860001
3450	 33F	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x343000103620002037CFFE40150000400F4001A03BE02B0030A000000860001
- stack 0: 0xF0
3451	 341	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x343
3452	 342	JUMP		 	 
- stack 0: 0x6B8
3453	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6B8
3454	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
3455	 345	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x343000103620002037CFFE40150000400F4001A03BE02B0030A000000860001
3456	 346	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x343000103620002037CFFE40150000400F4001A03BE02B0030A000000860001
- stack 0: 0xE0
3457	 348	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x3430001
3458	 349	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x3430001
- stack 0: 0xFFFF
3459	 34C	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
3460	 34D	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
3461	 34F	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
3462	 350	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x80
3463	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
3464	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x6B8
- stack 0: 0x2
3465	 355	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0x80
3466	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B8
3467	 359	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
3468	 35B	ADD		 	 
- stack 0: 0x6BC
3469	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
3470	 35D	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3620002037CFFE40150000400F4001A03BE02B0030A00000086000100A0001F
3471	 35E	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x3620002037CFFE40150000400F4001A03BE02B0030A00000086000100A0001F
- stack 0: 0xF0
3472	 360	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x362
3473	 361	JUMP		 	 
- stack 0: 0x6BC
3474	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6BC
3475	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
3476	 364	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3620002037CFFE40150000400F4001A03BE02B0030A00000086000100A0001F
3477	 365	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x3620002037CFFE40150000400F4001A03BE02B0030A00000086000100A0001F
- stack 0: 0xE0
3478	 367	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x3620002
3479	 368	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x3620002
- stack 0: 0xFFFF
3480	 36B	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
3481	 36C	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0x1
3482	 36E	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
3483	 36F	PUSH2	00A0	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0xA0
3484	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x6BC
3485	 373	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
3486	 375	ADD		 	 
- stack 0: 0x6C0
3487	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
3488	 377	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x37CFFE40150000400F4001A03BE02B0030A00000086000100A0001F00BA0000
3489	 378	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x37CFFE40150000400F4001A03BE02B0030A00000086000100A0001F00BA0000
- stack 0: 0xF0
3490	 37A	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x37C
3491	 37B	JUMP		 	 
- stack 0: 0x6C0
3492	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6C0
3493	 37D	PUSH2	0080	 	 
- stack 1: 0x6C0
- stack 0: 0x80
3494	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x6C0
- stack 0: 0x2
3495	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3496	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C0
- stack 0: 0x2
3497	 387	PUSH2	00A0	 	 
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0xA0
3498	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0x2
3499	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3500	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0x2
3501	 391	SUB		 	 
- stack 1: 0x6C0
- stack 0: 0x0
3502	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x39A
3503	 395	JUMPI		 	 
- stack 0: 0x6C0
3504	 396	PUSH2	03B4	 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 1: 0x6C0
- stack 0: 0x3B4
3505	 399	JUMP		 	 
- stack 0: 0x6C0
3506	 3B4	JUMPDEST		 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x6C0
3507	 3B5	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
3508	 3B7	ADD		 	 
- stack 0: 0x6C4
3509	 3B8	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
3510	 3B9	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x150000400F4001A03BE02B0030A00000086000100A0001F00BA000004000000
3511	 3BA	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x150000400F4001A03BE02B0030A00000086000100A0001F00BA000004000000
- stack 0: 0xF0
3512	 3BC	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x150
3513	 3BD	JUMP		 	 
- stack 0: 0x6C4
3514	 150	JUMPDEST		 ;; __riscvimpl_LUI_4eb7	  ;; # instr: lui t4,0x4(ignore imm)
- stack 0: 0x6C4
3515	 151	PUSH4	00004000	 	 
- stack 1: 0x6C4
- stack 0: 0x4000
3516	 156	PUSH2	03A0	 	 
- stack 2: 0x6C4
- stack 1: 0x4000
- stack 0: 0x3A0
3517	 159	MSTORE		 	  ;; # store to x29
- stack 0: 0x6C4
3518	 15A	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
3519	 15C	ADD		 	 
- stack 0: 0x6C8
3520	 15D	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
3521	 15E	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0xF4001A03BE02B0030A00000086000100A0001F00BA00000400000004000000
3522	 15F	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0xF4001A03BE02B0030A00000086000100A0001F00BA00000400000004000000
- stack 0: 0xF0
3523	 161	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0xF4
3524	 162	JUMP		 	 
- stack 0: 0x6C8
3525	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6C8
3526	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
3527	 F6	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0xF4001A03BE02B0030A00000086000100A0001F00BA00000400000004000000
3528	 F7	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0xF4001A03BE02B0030A00000086000100A0001F00BA00000400000004000000
- stack 0: 0xE0
3529	 F9	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0xF4001A
3530	 FA	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0xF4001A
- stack 0: 0xFFFF
3531	 FD	AND		 	 
- stack 1: 0x6C8
- stack 0: 0x1A
3532	 FE	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0x1A
- stack 0: 0x1
3533	 100	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x1A
3534	 101	PUSH2	0380	 	 
- stack 2: 0x6C8
- stack 1: 0x1A
- stack 0: 0x380
3535	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x6C8
3536	 105	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
3537	 107	ADD		 	 
- stack 0: 0x6CC
3538	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
3539	 109	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x3BE02B0030A00000086000100A0001F00BA0000040000000400000003240000
3540	 10A	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x3BE02B0030A00000086000100A0001F00BA0000040000000400000003240000
- stack 0: 0xF0
3541	 10C	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x3BE
3542	 10D	JUMP		 	 
- stack 0: 0x6CC
3543	 3BE	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,2e0(ignore imm)
- stack 0: 0x6CC
3544	 3BF	PUSH2	00C0	 	 
- stack 1: 0x6CC
- stack 0: 0xC0
3545	 3C2	MLOAD		 	  ;; # read from x6
- stack 1: 0x6CC
- stack 0: 0x4000
3546	 3C3	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
3547	 3C8	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6CC
- stack 0: 0x4000
3548	 3C9	PUSH2	03A0	 	 
- stack 2: 0x6CC
- stack 1: 0x4000
- stack 0: 0x3A0
3549	 3CC	MLOAD		 	  ;; # read from x29
- stack 2: 0x6CC
- stack 1: 0x4000
- stack 0: 0x4000
3550	 3CD	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6CC
- stack 2: 0x4000
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
3551	 3D2	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6CC
- stack 1: 0x4000
- stack 0: 0x4000
3552	 3D3	SUB		 	 
- stack 1: 0x6CC
- stack 0: 0x0
3553	 3D4	PUSH2	03DC	 ;; _neq_71ba06e6fcae51ace1b341e29dc243c7f99608c29fb2d1b5207c4d1fe1becb5e	 
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0x3DC
3554	 3D7	JUMPI		 	 
- stack 0: 0x6CC
3555	 3D8	PUSH2	03F6	 ;; _neq_after_71ba06e6fcae51ace1b341e29dc243c7f99608c29fb2d1b5207c4d1fe1becb5e	 
- stack 1: 0x6CC
- stack 0: 0x3F6
3556	 3DB	JUMP		 	 
- stack 0: 0x6CC
3557	 3F6	JUMPDEST		 ;; _neq_after_71ba06e6fcae51ace1b341e29dc243c7f99608c29fb2d1b5207c4d1fe1becb5e	 
- stack 0: 0x6CC
3558	 3F7	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
3559	 3F9	ADD		 	 
- stack 0: 0x6D0
3560	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
3561	 3FB	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x30A00000086000100A0001F00BA000004000000040000000324000003430001
3562	 3FC	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x30A00000086000100A0001F00BA000004000000040000000324000003430001
- stack 0: 0xF0
3563	 3FE	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x30A
3564	 3FF	JUMP		 	 
- stack 0: 0x6D0
3565	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6D0
3566	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
3567	 30C	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x30A00000086000100A0001F00BA000004000000040000000324000003430001
3568	 30D	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x30A00000086000100A0001F00BA000004000000040000000324000003430001
- stack 0: 0xE0
3569	 30F	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x30A0000
3570	 310	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x30A0000
- stack 0: 0xFFFF
3571	 313	AND		 	 
- stack 1: 0x6D0
- stack 0: 0x0
3572	 314	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x1
3573	 316	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0x0
3574	 317	PUSH2	0080	 	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x80
3575	 31A	MSTORE		 	  ;; # store to x4
- stack 0: 0x6D0
3576	 31B	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
3577	 31D	ADD		 	 
- stack 0: 0x6D4
3578	 31E	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
3579	 31F	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x86000100A0001F00BA00000400000004000000032400000343000103620002
3580	 320	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x86000100A0001F00BA00000400000004000000032400000343000103620002
- stack 0: 0xF0
3581	 322	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x86
3582	 323	JUMP		 	 
- stack 0: 0x6D4
3583	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x6D4
3584	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
3585	 88	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x86000100A0001F00BA00000400000004000000032400000343000103620002
3586	 89	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0x86000100A0001F00BA00000400000004000000032400000343000103620002
- stack 0: 0xE0
3587	 8B	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x860001
3588	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x860001
- stack 0: 0xFFFF
3589	 8F	AND		 	 
- stack 1: 0x6D4
- stack 0: 0x1
3590	 90	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x1
3591	 92	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0x1
3592	 93	PUSH2	0020	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x20
3593	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D4
3594	 97	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
3595	 99	ADD		 	 
- stack 0: 0x6D8
3596	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
3597	 9B	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0xA0001F00BA00000400000004000000032400000343000103620002037CFFE0
3598	 9C	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0xA0001F00BA00000400000004000000032400000343000103620002037CFFE0
- stack 0: 0xF0
3599	 9E	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0xA0
3600	 9F	JUMP		 	 
- stack 0: 0x6D8
3601	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6D8
3602	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
3603	 A2	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0xA0001F00BA00000400000004000000032400000343000103620002037CFFE0
3604	 A3	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0xA0001F00BA00000400000004000000032400000343000103620002037CFFE0
- stack 0: 0xE0
3605	 A5	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0xA0001F
3606	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0xA0001F
- stack 0: 0xFFFF
3607	 A9	AND		 	 
- stack 1: 0x6D8
- stack 0: 0x1F
3608	 AA	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0x1F
- stack 0: 0x1
3609	 AC	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0x1F
3610	 AD	PUSH2	0040	 	 
- stack 2: 0x6D8
- stack 1: 0x1F
- stack 0: 0x40
3611	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6D8
3612	 B1	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
3613	 B3	ADD		 	 
- stack 0: 0x6DC
3614	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
3615	 B5	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0xBA00000400000004000000032400000343000103620002037CFFE001630000
3616	 B6	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0xBA00000400000004000000032400000343000103620002037CFFE001630000
- stack 0: 0xF0
3617	 B8	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0xBA
3618	 B9	JUMP		 	 
- stack 0: 0x6DC
3619	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x6DC
3620	 BB	PUSH2	0020	 	 
- stack 1: 0x6DC
- stack 0: 0x20
3621	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x6DC
- stack 0: 0x1
3622	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3623	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6DC
- stack 0: 0x1
3624	 C5	PUSH2	0040	 	 
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0x40
3625	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0x1F
3626	 C9	PUSH1	1F	 	 
- stack 3: 0x6DC
- stack 2: 0x1
- stack 1: 0x1F
- stack 0: 0x1F
3627	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0x1F
3628	 CC	SHL		 	 
- stack 1: 0x6DC
- stack 0: 0x80000000
3629	 CD	PUSH2	0060	 	 
- stack 2: 0x6DC
- stack 1: 0x80000000
- stack 0: 0x60
3630	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x6DC
3631	 D1	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
3632	 D3	ADD		 	 
- stack 0: 0x6E0
3633	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
3634	 D5	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x400000004000000032400000343000103620002037CFFE00163000000F4001B
3635	 D6	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x400000004000000032400000343000103620002037CFFE00163000000F4001B
- stack 0: 0xF0
3636	 D8	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x400
3637	 D9	JUMP		 	 
- stack 0: 0x6E0
3638	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E0
3639	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
3640	 402	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x400000004000000032400000343000103620002037CFFE00163000000F4001B
3641	 403	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x400000004000000032400000343000103620002037CFFE00163000000F4001B
- stack 0: 0xE0
3642	 405	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x4000000
3643	 406	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x4000000
- stack 0: 0xFFFF
3644	 409	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
3645	 40A	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
3646	 40C	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
3647	 40D	POP		 	 
- stack 0: 0x6E0
3648	 40E	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
3649	 410	ADD		 	 
- stack 0: 0x6E4
3650	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
3651	 412	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x4000000032400000343000103620002037CFFE00163000000F4001B03BE027C
3652	 413	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x4000000032400000343000103620002037CFFE00163000000F4001B03BE027C
- stack 0: 0xF0
3653	 415	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x400
3654	 416	JUMP		 	 
- stack 0: 0x6E4
3655	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E4
3656	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
3657	 402	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x4000000032400000343000103620002037CFFE00163000000F4001B03BE027C
3658	 403	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x4000000032400000343000103620002037CFFE00163000000F4001B03BE027C
- stack 0: 0xE0
3659	 405	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x4000000
3660	 406	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x4000000
- stack 0: 0xFFFF
3661	 409	AND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
3662	 40A	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x1
3663	 40C	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
3664	 40D	POP		 	 
- stack 0: 0x6E4
3665	 40E	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
3666	 410	ADD		 	 
- stack 0: 0x6E8
3667	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
3668	 412	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x32400000343000103620002037CFFE00163000000F4001B03BE027C030A0000
3669	 413	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x32400000343000103620002037CFFE00163000000F4001B03BE027C030A0000
- stack 0: 0xF0
3670	 415	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x324
3671	 416	JUMP		 	 
- stack 0: 0x6E8
3672	 324	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x6E8
3673	 325	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
3674	 326	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x32400000343000103620002037CFFE00163000000F4001B03BE027C030A0000
3675	 327	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x32400000343000103620002037CFFE00163000000F4001B03BE027C030A0000
- stack 0: 0xE0
3676	 329	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x3240000
3677	 32A	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x3240000
- stack 0: 0xFFFF
3678	 32D	AND		 	 
- stack 1: 0x6E8
- stack 0: 0x0
3679	 32E	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0x0
- stack 0: 0x1
3680	 330	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0x0
3681	 331	PUSH2	0060	 	 
- stack 2: 0x6E8
- stack 1: 0x0
- stack 0: 0x60
3682	 334	MLOAD		 	  ;; # read from x3
- stack 2: 0x6E8
- stack 1: 0x0
- stack 0: 0x80000000
3683	 335	ADD		 	  ;; # ADDI 3
- stack 1: 0x6E8
- stack 0: 0x80000000
3684	 336	PUSH2	00C0	 	 
- stack 2: 0x6E8
- stack 1: 0x80000000
- stack 0: 0xC0
3685	 339	MSTORE		 	  ;; # store to x6
- stack 0: 0x6E8
3686	 33A	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
3687	 33C	ADD		 	 
- stack 0: 0x6EC
3688	 33D	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
3689	 33E	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x343000103620002037CFFE00163000000F4001B03BE027C030A000000860001
3690	 33F	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x343000103620002037CFFE00163000000F4001B03BE027C030A000000860001
- stack 0: 0xF0
3691	 341	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x343
3692	 342	JUMP		 	 
- stack 0: 0x6EC
3693	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6EC
3694	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
3695	 345	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x343000103620002037CFFE00163000000F4001B03BE027C030A000000860001
3696	 346	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x343000103620002037CFFE00163000000F4001B03BE027C030A000000860001
- stack 0: 0xE0
3697	 348	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x3430001
3698	 349	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x3430001
- stack 0: 0xFFFF
3699	 34C	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x1
3700	 34D	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x1
- stack 0: 0x1
3701	 34F	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x1
3702	 350	PUSH2	0080	 	 
- stack 2: 0x6EC
- stack 1: 0x1
- stack 0: 0x80
3703	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x6EC
- stack 1: 0x1
- stack 0: 0x0
3704	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x6EC
- stack 0: 0x1
3705	 355	PUSH2	0080	 	 
- stack 2: 0x6EC
- stack 1: 0x1
- stack 0: 0x80
3706	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x6EC
3707	 359	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
3708	 35B	ADD		 	 
- stack 0: 0x6F0
3709	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
3710	 35D	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x3620002037CFFE00163000000F4001B03BE027C030A00000086000100A00007
3711	 35E	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x3620002037CFFE00163000000F4001B03BE027C030A00000086000100A00007
- stack 0: 0xF0
3712	 360	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x362
3713	 361	JUMP		 	 
- stack 0: 0x6F0
3714	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6F0
3715	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
3716	 364	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x3620002037CFFE00163000000F4001B03BE027C030A00000086000100A00007
3717	 365	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x3620002037CFFE00163000000F4001B03BE027C030A00000086000100A00007
- stack 0: 0xE0
3718	 367	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x3620002
3719	 368	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x3620002
- stack 0: 0xFFFF
3720	 36B	AND		 	 
- stack 1: 0x6F0
- stack 0: 0x2
3721	 36C	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0x1
3722	 36E	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0x2
3723	 36F	PUSH2	00A0	 	 
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0xA0
3724	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x6F0
3725	 373	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
3726	 375	ADD		 	 
- stack 0: 0x6F4
3727	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
3728	 377	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x37CFFE00163000000F4001B03BE027C030A00000086000100A0000700BA0000
3729	 378	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x37CFFE00163000000F4001B03BE027C030A00000086000100A0000700BA0000
- stack 0: 0xF0
3730	 37A	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x37C
3731	 37B	JUMP		 	 
- stack 0: 0x6F4
3732	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6F4
3733	 37D	PUSH2	0080	 	 
- stack 1: 0x6F4
- stack 0: 0x80
3734	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x6F4
- stack 0: 0x1
3735	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3736	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F4
- stack 0: 0x1
3737	 387	PUSH2	00A0	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0xA0
3738	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x2
3739	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6F4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3740	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x2
3741	 391	SUB		 	 
- stack 1: 0x6F4
- stack 0: 0x1
3742	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x39A
3743	 395	JUMPI		 	 
- stack 0: 0x6F4
3744	 39A	JUMPDEST		 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x6F4
3745	 39B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
3746	 39C	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x37CFFE00163000000F4001B03BE027C030A00000086000100A0000700BA0000
3747	 39D	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x37CFFE00163000000F4001B03BE027C030A00000086000100A0000700BA0000
- stack 0: 0xE0
3748	 39F	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x37CFFE0
3749	 3A0	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x37CFFE0
- stack 0: 0xFFFF
3750	 3A3	AND		 	 
- stack 1: 0x6F4
- stack 0: 0xFFE0
3751	 3A4	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0xFFE0
- stack 0: 0x1
3752	 3A6	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3753	 3A7	ADD		 	 
- stack 0: 0x6D4
3754	 3A8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFF
3755	 3AD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6D4
3756	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
3757	 3AF	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x86000100A0001F00BA00000400000004000000032400000343000103620002
3758	 3B0	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x86000100A0001F00BA00000400000004000000032400000343000103620002
- stack 0: 0xF0
3759	 3B2	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x86
3760	 3B3	JUMP		 	 
- stack 0: 0x6D4
3761	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x6D4
3762	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
3763	 88	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x86000100A0001F00BA00000400000004000000032400000343000103620002
3764	 89	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0x86000100A0001F00BA00000400000004000000032400000343000103620002
- stack 0: 0xE0
3765	 8B	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x860001
3766	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x860001
- stack 0: 0xFFFF
3767	 8F	AND		 	 
- stack 1: 0x6D4
- stack 0: 0x1
3768	 90	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x1
3769	 92	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0x1
3770	 93	PUSH2	0020	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x20
3771	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D4
3772	 97	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
3773	 99	ADD		 	 
- stack 0: 0x6D8
3774	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
3775	 9B	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0xA0001F00BA00000400000004000000032400000343000103620002037CFFE0
3776	 9C	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0xA0001F00BA00000400000004000000032400000343000103620002037CFFE0
- stack 0: 0xF0
3777	 9E	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0xA0
3778	 9F	JUMP		 	 
- stack 0: 0x6D8
3779	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6D8
3780	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
3781	 A2	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0xA0001F00BA00000400000004000000032400000343000103620002037CFFE0
3782	 A3	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0xA0001F00BA00000400000004000000032400000343000103620002037CFFE0
- stack 0: 0xE0
3783	 A5	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0xA0001F
3784	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0xA0001F
- stack 0: 0xFFFF
3785	 A9	AND		 	 
- stack 1: 0x6D8
- stack 0: 0x1F
3786	 AA	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0x1F
- stack 0: 0x1
3787	 AC	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0x1F
3788	 AD	PUSH2	0040	 	 
- stack 2: 0x6D8
- stack 1: 0x1F
- stack 0: 0x40
3789	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6D8
3790	 B1	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
3791	 B3	ADD		 	 
- stack 0: 0x6DC
3792	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
3793	 B5	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0xBA00000400000004000000032400000343000103620002037CFFE001630000
3794	 B6	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0xBA00000400000004000000032400000343000103620002037CFFE001630000
- stack 0: 0xF0
3795	 B8	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0xBA
3796	 B9	JUMP		 	 
- stack 0: 0x6DC
3797	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x6DC
3798	 BB	PUSH2	0020	 	 
- stack 1: 0x6DC
- stack 0: 0x20
3799	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x6DC
- stack 0: 0x1
3800	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3801	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6DC
- stack 0: 0x1
3802	 C5	PUSH2	0040	 	 
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0x40
3803	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0x1F
3804	 C9	PUSH1	1F	 	 
- stack 3: 0x6DC
- stack 2: 0x1
- stack 1: 0x1F
- stack 0: 0x1F
3805	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0x1F
3806	 CC	SHL		 	 
- stack 1: 0x6DC
- stack 0: 0x80000000
3807	 CD	PUSH2	0060	 	 
- stack 2: 0x6DC
- stack 1: 0x80000000
- stack 0: 0x60
3808	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x6DC
3809	 D1	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
3810	 D3	ADD		 	 
- stack 0: 0x6E0
3811	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
3812	 D5	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x400000004000000032400000343000103620002037CFFE00163000000F4001B
3813	 D6	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x400000004000000032400000343000103620002037CFFE00163000000F4001B
- stack 0: 0xF0
3814	 D8	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x400
3815	 D9	JUMP		 	 
- stack 0: 0x6E0
3816	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E0
3817	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
3818	 402	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x400000004000000032400000343000103620002037CFFE00163000000F4001B
3819	 403	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x400000004000000032400000343000103620002037CFFE00163000000F4001B
- stack 0: 0xE0
3820	 405	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x4000000
3821	 406	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x4000000
- stack 0: 0xFFFF
3822	 409	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
3823	 40A	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
3824	 40C	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
3825	 40D	POP		 	 
- stack 0: 0x6E0
3826	 40E	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
3827	 410	ADD		 	 
- stack 0: 0x6E4
3828	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
3829	 412	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x4000000032400000343000103620002037CFFE00163000000F4001B03BE027C
3830	 413	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x4000000032400000343000103620002037CFFE00163000000F4001B03BE027C
- stack 0: 0xF0
3831	 415	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x400
3832	 416	JUMP		 	 
- stack 0: 0x6E4
3833	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E4
3834	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
3835	 402	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x4000000032400000343000103620002037CFFE00163000000F4001B03BE027C
3836	 403	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x4000000032400000343000103620002037CFFE00163000000F4001B03BE027C
- stack 0: 0xE0
3837	 405	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x4000000
3838	 406	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x4000000
- stack 0: 0xFFFF
3839	 409	AND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
3840	 40A	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x1
3841	 40C	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
3842	 40D	POP		 	 
- stack 0: 0x6E4
3843	 40E	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
3844	 410	ADD		 	 
- stack 0: 0x6E8
3845	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
3846	 412	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x32400000343000103620002037CFFE00163000000F4001B03BE027C030A0000
3847	 413	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x32400000343000103620002037CFFE00163000000F4001B03BE027C030A0000
- stack 0: 0xF0
3848	 415	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x324
3849	 416	JUMP		 	 
- stack 0: 0x6E8
3850	 324	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x6E8
3851	 325	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
3852	 326	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x32400000343000103620002037CFFE00163000000F4001B03BE027C030A0000
3853	 327	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x32400000343000103620002037CFFE00163000000F4001B03BE027C030A0000
- stack 0: 0xE0
3854	 329	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x3240000
3855	 32A	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x3240000
- stack 0: 0xFFFF
3856	 32D	AND		 	 
- stack 1: 0x6E8
- stack 0: 0x0
3857	 32E	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0x0
- stack 0: 0x1
3858	 330	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0x0
3859	 331	PUSH2	0060	 	 
- stack 2: 0x6E8
- stack 1: 0x0
- stack 0: 0x60
3860	 334	MLOAD		 	  ;; # read from x3
- stack 2: 0x6E8
- stack 1: 0x0
- stack 0: 0x80000000
3861	 335	ADD		 	  ;; # ADDI 3
- stack 1: 0x6E8
- stack 0: 0x80000000
3862	 336	PUSH2	00C0	 	 
- stack 2: 0x6E8
- stack 1: 0x80000000
- stack 0: 0xC0
3863	 339	MSTORE		 	  ;; # store to x6
- stack 0: 0x6E8
3864	 33A	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
3865	 33C	ADD		 	 
- stack 0: 0x6EC
3866	 33D	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
3867	 33E	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x343000103620002037CFFE00163000000F4001B03BE027C030A000000860001
3868	 33F	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x343000103620002037CFFE00163000000F4001B03BE027C030A000000860001
- stack 0: 0xF0
3869	 341	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x343
3870	 342	JUMP		 	 
- stack 0: 0x6EC
3871	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6EC
3872	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
3873	 345	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x343000103620002037CFFE00163000000F4001B03BE027C030A000000860001
3874	 346	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x343000103620002037CFFE00163000000F4001B03BE027C030A000000860001
- stack 0: 0xE0
3875	 348	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x3430001
3876	 349	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x3430001
- stack 0: 0xFFFF
3877	 34C	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x1
3878	 34D	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x1
- stack 0: 0x1
3879	 34F	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x1
3880	 350	PUSH2	0080	 	 
- stack 2: 0x6EC
- stack 1: 0x1
- stack 0: 0x80
3881	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x6EC
- stack 1: 0x1
- stack 0: 0x1
3882	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x6EC
- stack 0: 0x2
3883	 355	PUSH2	0080	 	 
- stack 2: 0x6EC
- stack 1: 0x2
- stack 0: 0x80
3884	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x6EC
3885	 359	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
3886	 35B	ADD		 	 
- stack 0: 0x6F0
3887	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
3888	 35D	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x3620002037CFFE00163000000F4001B03BE027C030A00000086000100A00007
3889	 35E	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x3620002037CFFE00163000000F4001B03BE027C030A00000086000100A00007
- stack 0: 0xF0
3890	 360	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x362
3891	 361	JUMP		 	 
- stack 0: 0x6F0
3892	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6F0
3893	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
3894	 364	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x3620002037CFFE00163000000F4001B03BE027C030A00000086000100A00007
3895	 365	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x3620002037CFFE00163000000F4001B03BE027C030A00000086000100A00007
- stack 0: 0xE0
3896	 367	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x3620002
3897	 368	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x3620002
- stack 0: 0xFFFF
3898	 36B	AND		 	 
- stack 1: 0x6F0
- stack 0: 0x2
3899	 36C	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0x1
3900	 36E	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0x2
3901	 36F	PUSH2	00A0	 	 
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0xA0
3902	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x6F0
3903	 373	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
3904	 375	ADD		 	 
- stack 0: 0x6F4
3905	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
3906	 377	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x37CFFE00163000000F4001B03BE027C030A00000086000100A0000700BA0000
3907	 378	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x37CFFE00163000000F4001B03BE027C030A00000086000100A0000700BA0000
- stack 0: 0xF0
3908	 37A	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x37C
3909	 37B	JUMP		 	 
- stack 0: 0x6F4
3910	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6F4
3911	 37D	PUSH2	0080	 	 
- stack 1: 0x6F4
- stack 0: 0x80
3912	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x6F4
- stack 0: 0x2
3913	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3914	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F4
- stack 0: 0x2
3915	 387	PUSH2	00A0	 	 
- stack 2: 0x6F4
- stack 1: 0x2
- stack 0: 0xA0
3916	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x6F4
- stack 1: 0x2
- stack 0: 0x2
3917	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6F4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3918	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6F4
- stack 1: 0x2
- stack 0: 0x2
3919	 391	SUB		 	 
- stack 1: 0x6F4
- stack 0: 0x0
3920	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x6F4
- stack 1: 0x0
- stack 0: 0x39A
3921	 395	JUMPI		 	 
- stack 0: 0x6F4
3922	 396	PUSH2	03B4	 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 1: 0x6F4
- stack 0: 0x3B4
3923	 399	JUMP		 	 
- stack 0: 0x6F4
3924	 3B4	JUMPDEST		 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x6F4
3925	 3B5	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
3926	 3B7	ADD		 	 
- stack 0: 0x6F8
3927	 3B8	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
3928	 3B9	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x163000000F4001B03BE027C030A00000086000100A0000700BA000003430001
3929	 3BA	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x163000000F4001B03BE027C030A00000086000100A0000700BA000003430001
- stack 0: 0xF0
3930	 3BC	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x163
3931	 3BD	JUMP		 	 
- stack 0: 0x6F8
3932	 163	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x6F8
3933	 164	PUSH4	80000000	 	 
- stack 1: 0x6F8
- stack 0: 0x80000000
3934	 169	PUSH2	03A0	 	 
- stack 2: 0x6F8
- stack 1: 0x80000000
- stack 0: 0x3A0
3935	 16C	MSTORE		 	  ;; # store to x29
- stack 0: 0x6F8
3936	 16D	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
3937	 16F	ADD		 	 
- stack 0: 0x6FC
3938	 170	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
3939	 171	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0xF4001B03BE027C030A00000086000100A0000700BA00000343000103620002
3940	 172	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0xF4001B03BE027C030A00000086000100A0000700BA00000343000103620002
- stack 0: 0xF0
3941	 174	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0xF4
3942	 175	JUMP		 	 
- stack 0: 0x6FC
3943	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6FC
3944	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6FC
- stack 0: 0x6FC
3945	 F6	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0xF4001B03BE027C030A00000086000100A0000700BA00000343000103620002
3946	 F7	PUSH1	E0	 	 
- stack 2: 0x6FC
- stack 1: 0xF4001B03BE027C030A00000086000100A0000700BA00000343000103620002
- stack 0: 0xE0
3947	 F9	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0xF4001B
3948	 FA	PUSH2	FFFF	 	 
- stack 2: 0x6FC
- stack 1: 0xF4001B
- stack 0: 0xFFFF
3949	 FD	AND		 	 
- stack 1: 0x6FC
- stack 0: 0x1B
3950	 FE	PUSH1	01	 	 
- stack 2: 0x6FC
- stack 1: 0x1B
- stack 0: 0x1
3951	 100	SIGNEXTEND		 	 
- stack 1: 0x6FC
- stack 0: 0x1B
3952	 101	PUSH2	0380	 	 
- stack 2: 0x6FC
- stack 1: 0x1B
- stack 0: 0x380
3953	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x6FC
3954	 105	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
3955	 107	ADD		 	 
- stack 0: 0x700
3956	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
3957	 109	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x3BE027C030A00000086000100A0000700BA00000343000103620002037CFFEC
3958	 10A	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x3BE027C030A00000086000100A0000700BA00000343000103620002037CFFEC
- stack 0: 0xF0
3959	 10C	SHR		 	 
- stack 1: 0x700
- stack 0: 0x3BE
3960	 10D	JUMP		 	 
- stack 0: 0x700
3961	 3BE	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,2e0(ignore imm)
- stack 0: 0x700
3962	 3BF	PUSH2	00C0	 	 
- stack 1: 0x700
- stack 0: 0xC0
3963	 3C2	MLOAD		 	  ;; # read from x6
- stack 1: 0x700
- stack 0: 0x80000000
3964	 3C3	PUSH4	FFFFFFFF	 	 
- stack 2: 0x700
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
3965	 3C8	AND		 	  ;; # mask to 32 bits
- stack 1: 0x700
- stack 0: 0x80000000
3966	 3C9	PUSH2	03A0	 	 
- stack 2: 0x700
- stack 1: 0x80000000
- stack 0: 0x3A0
3967	 3CC	MLOAD		 	  ;; # read from x29
- stack 2: 0x700
- stack 1: 0x80000000
- stack 0: 0x80000000
3968	 3CD	PUSH4	FFFFFFFF	 	 
- stack 3: 0x700
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
3969	 3D2	AND		 	  ;; # mask to 32 bits
- stack 2: 0x700
- stack 1: 0x80000000
- stack 0: 0x80000000
3970	 3D3	SUB		 	 
- stack 1: 0x700
- stack 0: 0x0
3971	 3D4	PUSH2	03DC	 ;; _neq_71ba06e6fcae51ace1b341e29dc243c7f99608c29fb2d1b5207c4d1fe1becb5e	 
- stack 2: 0x700
- stack 1: 0x0
- stack 0: 0x3DC
3972	 3D7	JUMPI		 	 
- stack 0: 0x700
3973	 3D8	PUSH2	03F6	 ;; _neq_after_71ba06e6fcae51ace1b341e29dc243c7f99608c29fb2d1b5207c4d1fe1becb5e	 
- stack 1: 0x700
- stack 0: 0x3F6
3974	 3DB	JUMP		 	 
- stack 0: 0x700
3975	 3F6	JUMPDEST		 ;; _neq_after_71ba06e6fcae51ace1b341e29dc243c7f99608c29fb2d1b5207c4d1fe1becb5e	 
- stack 0: 0x700
3976	 3F7	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
3977	 3F9	ADD		 	 
- stack 0: 0x704
3978	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
3979	 3FB	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x30A00000086000100A0000700BA00000343000103620002037CFFEC00DA0080
3980	 3FC	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x30A00000086000100A0000700BA00000343000103620002037CFFEC00DA0080
- stack 0: 0xF0
3981	 3FE	SHR		 	 
- stack 1: 0x704
- stack 0: 0x30A
3982	 3FF	JUMP		 	 
- stack 0: 0x704
3983	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x704
3984	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x704
- stack 0: 0x704
3985	 30C	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x30A00000086000100A0000700BA00000343000103620002037CFFEC00DA0080
3986	 30D	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0x30A00000086000100A0000700BA00000343000103620002037CFFEC00DA0080
- stack 0: 0xE0
3987	 30F	SHR		 	 
- stack 1: 0x704
- stack 0: 0x30A0000
3988	 310	PUSH2	FFFF	 	 
- stack 2: 0x704
- stack 1: 0x30A0000
- stack 0: 0xFFFF
3989	 313	AND		 	 
- stack 1: 0x704
- stack 0: 0x0
3990	 314	PUSH1	01	 	 
- stack 2: 0x704
- stack 1: 0x0
- stack 0: 0x1
3991	 316	SIGNEXTEND		 	 
- stack 1: 0x704
- stack 0: 0x0
3992	 317	PUSH2	0080	 	 
- stack 2: 0x704
- stack 1: 0x0
- stack 0: 0x80
3993	 31A	MSTORE		 	  ;; # store to x4
- stack 0: 0x704
3994	 31B	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
3995	 31D	ADD		 	 
- stack 0: 0x708
3996	 31E	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
3997	 31F	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x86000100A0000700BA00000343000103620002037CFFEC00DA008000F4001C
3998	 320	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x86000100A0000700BA00000343000103620002037CFFEC00DA008000F4001C
- stack 0: 0xF0
3999	 322	SHR		 	 
- stack 1: 0x708
- stack 0: 0x86
4000	 323	JUMP		 	 
- stack 0: 0x708
4001	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x708
4002	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x708
- stack 0: 0x708
4003	 88	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x86000100A0000700BA00000343000103620002037CFFEC00DA008000F4001C
4004	 89	PUSH1	E0	 	 
- stack 2: 0x708
- stack 1: 0x86000100A0000700BA00000343000103620002037CFFEC00DA008000F4001C
- stack 0: 0xE0
4005	 8B	SHR		 	 
- stack 1: 0x708
- stack 0: 0x860001
4006	 8C	PUSH2	FFFF	 	 
- stack 2: 0x708
- stack 1: 0x860001
- stack 0: 0xFFFF
4007	 8F	AND		 	 
- stack 1: 0x708
- stack 0: 0x1
4008	 90	PUSH1	01	 	 
- stack 2: 0x708
- stack 1: 0x1
- stack 0: 0x1
4009	 92	SIGNEXTEND		 	 
- stack 1: 0x708
- stack 0: 0x1
4010	 93	PUSH2	0020	 	 
- stack 2: 0x708
- stack 1: 0x1
- stack 0: 0x20
4011	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x708
4012	 97	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
4013	 99	ADD		 	 
- stack 0: 0x70C
4014	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
4015	 9B	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0xA0000700BA00000343000103620002037CFFEC00DA008000F4001C010E0254
4016	 9C	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0xA0000700BA00000343000103620002037CFFEC00DA008000F4001C010E0254
- stack 0: 0xF0
4017	 9E	SHR		 	 
- stack 1: 0x70C
- stack 0: 0xA0
4018	 9F	JUMP		 	 
- stack 0: 0x70C
4019	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x70C
4020	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
4021	 A2	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0xA0000700BA00000343000103620002037CFFEC00DA008000F4001C010E0254
4022	 A3	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0xA0000700BA00000343000103620002037CFFEC00DA008000F4001C010E0254
- stack 0: 0xE0
4023	 A5	SHR		 	 
- stack 1: 0x70C
- stack 0: 0xA00007
4024	 A6	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0xA00007
- stack 0: 0xFFFF
4025	 A9	AND		 	 
- stack 1: 0x70C
- stack 0: 0x7
4026	 AA	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0x7
- stack 0: 0x1
4027	 AC	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0x7
4028	 AD	PUSH2	0040	 	 
- stack 2: 0x70C
- stack 1: 0x7
- stack 0: 0x40
4029	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x70C
4030	 B1	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
4031	 B3	ADD		 	 
- stack 0: 0x710
4032	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
4033	 B5	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0xBA00000343000103620002037CFFEC00DA008000F4001C010E0254030A0000
4034	 B6	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0xBA00000343000103620002037CFFEC00DA008000F4001C010E0254030A0000
- stack 0: 0xF0
4035	 B8	SHR		 	 
- stack 1: 0x710
- stack 0: 0xBA
4036	 B9	JUMP		 	 
- stack 0: 0x710
4037	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x710
4038	 BB	PUSH2	0020	 	 
- stack 1: 0x710
- stack 0: 0x20
4039	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x710
- stack 0: 0x1
4040	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4041	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x710
- stack 0: 0x1
4042	 C5	PUSH2	0040	 	 
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0x40
4043	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0x7
4044	 C9	PUSH1	1F	 	 
- stack 3: 0x710
- stack 2: 0x1
- stack 1: 0x7
- stack 0: 0x1F
4045	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0x7
4046	 CC	SHL		 	 
- stack 1: 0x710
- stack 0: 0x80
4047	 CD	PUSH2	0060	 	 
- stack 2: 0x710
- stack 1: 0x80
- stack 0: 0x60
4048	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x710
4049	 D1	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
4050	 D3	ADD		 	 
- stack 0: 0x714
4051	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
4052	 D5	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x343000103620002037CFFEC00DA008000F4001C010E0254030A000000860001
4053	 D6	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x343000103620002037CFFEC00DA008000F4001C010E0254030A000000860001
- stack 0: 0xF0
4054	 D8	SHR		 	 
- stack 1: 0x714
- stack 0: 0x343
4055	 D9	JUMP		 	 
- stack 0: 0x714
4056	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x714
4057	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
4058	 345	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x343000103620002037CFFEC00DA008000F4001C010E0254030A000000860001
4059	 346	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x343000103620002037CFFEC00DA008000F4001C010E0254030A000000860001
- stack 0: 0xE0
4060	 348	SHR		 	 
- stack 1: 0x714
- stack 0: 0x3430001
4061	 349	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x3430001
- stack 0: 0xFFFF
4062	 34C	AND		 	 
- stack 1: 0x714
- stack 0: 0x1
4063	 34D	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x1
4064	 34F	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0x1
4065	 350	PUSH2	0080	 	 
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x80
4066	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x0
4067	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x714
- stack 0: 0x1
4068	 355	PUSH2	0080	 	 
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x80
4069	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x714
4070	 359	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
4071	 35B	ADD		 	 
- stack 0: 0x718
4072	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
4073	 35D	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x3620002037CFFEC00DA008000F4001C010E0254030A00000086000100A0000E
4074	 35E	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x3620002037CFFEC00DA008000F4001C010E0254030A00000086000100A0000E
- stack 0: 0xF0
4075	 360	SHR		 	 
- stack 1: 0x718
- stack 0: 0x362
4076	 361	JUMP		 	 
- stack 0: 0x718
4077	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x718
4078	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
4079	 364	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x3620002037CFFEC00DA008000F4001C010E0254030A00000086000100A0000E
4080	 365	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x3620002037CFFEC00DA008000F4001C010E0254030A00000086000100A0000E
- stack 0: 0xE0
4081	 367	SHR		 	 
- stack 1: 0x718
- stack 0: 0x3620002
4082	 368	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x3620002
- stack 0: 0xFFFF
4083	 36B	AND		 	 
- stack 1: 0x718
- stack 0: 0x2
4084	 36C	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x2
- stack 0: 0x1
4085	 36E	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x2
4086	 36F	PUSH2	00A0	 	 
- stack 2: 0x718
- stack 1: 0x2
- stack 0: 0xA0
4087	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x718
4088	 373	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
4089	 375	ADD		 	 
- stack 0: 0x71C
4090	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
4091	 377	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x37CFFEC00DA008000F4001C010E0254030A00000086000100A0000E04000000
4092	 378	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x37CFFEC00DA008000F4001C010E0254030A00000086000100A0000E04000000
- stack 0: 0xF0
4093	 37A	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x37C
4094	 37B	JUMP		 	 
- stack 0: 0x71C
4095	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x71C
4096	 37D	PUSH2	0080	 	 
- stack 1: 0x71C
- stack 0: 0x80
4097	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x71C
- stack 0: 0x1
4098	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4099	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x71C
- stack 0: 0x1
4100	 387	PUSH2	00A0	 	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0xA0
4101	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x2
4102	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x71C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4103	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x2
4104	 391	SUB		 	 
- stack 1: 0x71C
- stack 0: 0x1
4105	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x39A
4106	 395	JUMPI		 	 
- stack 0: 0x71C
4107	 39A	JUMPDEST		 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x71C
4108	 39B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
4109	 39C	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x37CFFEC00DA008000F4001C010E0254030A00000086000100A0000E04000000
4110	 39D	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x37CFFEC00DA008000F4001C010E0254030A00000086000100A0000E04000000
- stack 0: 0xE0
4111	 39F	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x37CFFEC
4112	 3A0	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x37CFFEC
- stack 0: 0xFFFF
4113	 3A3	AND		 	 
- stack 1: 0x71C
- stack 0: 0xFFEC
4114	 3A4	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0xFFEC
- stack 0: 0x1
4115	 3A6	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
4116	 3A7	ADD		 	 
- stack 0: 0x708
4117	 3A8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x708
- stack 0: 0xFFFFFFFF
4118	 3AD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x708
4119	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
4120	 3AF	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x86000100A0000700BA00000343000103620002037CFFEC00DA008000F4001C
4121	 3B0	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x86000100A0000700BA00000343000103620002037CFFEC00DA008000F4001C
- stack 0: 0xF0
4122	 3B2	SHR		 	 
- stack 1: 0x708
- stack 0: 0x86
4123	 3B3	JUMP		 	 
- stack 0: 0x708
4124	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x708
4125	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x708
- stack 0: 0x708
4126	 88	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x86000100A0000700BA00000343000103620002037CFFEC00DA008000F4001C
4127	 89	PUSH1	E0	 	 
- stack 2: 0x708
- stack 1: 0x86000100A0000700BA00000343000103620002037CFFEC00DA008000F4001C
- stack 0: 0xE0
4128	 8B	SHR		 	 
- stack 1: 0x708
- stack 0: 0x860001
4129	 8C	PUSH2	FFFF	 	 
- stack 2: 0x708
- stack 1: 0x860001
- stack 0: 0xFFFF
4130	 8F	AND		 	 
- stack 1: 0x708
- stack 0: 0x1
4131	 90	PUSH1	01	 	 
- stack 2: 0x708
- stack 1: 0x1
- stack 0: 0x1
4132	 92	SIGNEXTEND		 	 
- stack 1: 0x708
- stack 0: 0x1
4133	 93	PUSH2	0020	 	 
- stack 2: 0x708
- stack 1: 0x1
- stack 0: 0x20
4134	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x708
4135	 97	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
4136	 99	ADD		 	 
- stack 0: 0x70C
4137	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
4138	 9B	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0xA0000700BA00000343000103620002037CFFEC00DA008000F4001C010E0254
4139	 9C	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0xA0000700BA00000343000103620002037CFFEC00DA008000F4001C010E0254
- stack 0: 0xF0
4140	 9E	SHR		 	 
- stack 1: 0x70C
- stack 0: 0xA0
4141	 9F	JUMP		 	 
- stack 0: 0x70C
4142	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x70C
4143	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
4144	 A2	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0xA0000700BA00000343000103620002037CFFEC00DA008000F4001C010E0254
4145	 A3	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0xA0000700BA00000343000103620002037CFFEC00DA008000F4001C010E0254
- stack 0: 0xE0
4146	 A5	SHR		 	 
- stack 1: 0x70C
- stack 0: 0xA00007
4147	 A6	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0xA00007
- stack 0: 0xFFFF
4148	 A9	AND		 	 
- stack 1: 0x70C
- stack 0: 0x7
4149	 AA	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0x7
- stack 0: 0x1
4150	 AC	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0x7
4151	 AD	PUSH2	0040	 	 
- stack 2: 0x70C
- stack 1: 0x7
- stack 0: 0x40
4152	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x70C
4153	 B1	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
4154	 B3	ADD		 	 
- stack 0: 0x710
4155	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
4156	 B5	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0xBA00000343000103620002037CFFEC00DA008000F4001C010E0254030A0000
4157	 B6	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0xBA00000343000103620002037CFFEC00DA008000F4001C010E0254030A0000
- stack 0: 0xF0
4158	 B8	SHR		 	 
- stack 1: 0x710
- stack 0: 0xBA
4159	 B9	JUMP		 	 
- stack 0: 0x710
4160	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x710
4161	 BB	PUSH2	0020	 	 
- stack 1: 0x710
- stack 0: 0x20
4162	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x710
- stack 0: 0x1
4163	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4164	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x710
- stack 0: 0x1
4165	 C5	PUSH2	0040	 	 
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0x40
4166	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0x7
4167	 C9	PUSH1	1F	 	 
- stack 3: 0x710
- stack 2: 0x1
- stack 1: 0x7
- stack 0: 0x1F
4168	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0x7
4169	 CC	SHL		 	 
- stack 1: 0x710
- stack 0: 0x80
4170	 CD	PUSH2	0060	 	 
- stack 2: 0x710
- stack 1: 0x80
- stack 0: 0x60
4171	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x710
4172	 D1	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
4173	 D3	ADD		 	 
- stack 0: 0x714
4174	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
4175	 D5	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x343000103620002037CFFEC00DA008000F4001C010E0254030A000000860001
4176	 D6	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x343000103620002037CFFEC00DA008000F4001C010E0254030A000000860001
- stack 0: 0xF0
4177	 D8	SHR		 	 
- stack 1: 0x714
- stack 0: 0x343
4178	 D9	JUMP		 	 
- stack 0: 0x714
4179	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x714
4180	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
4181	 345	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x343000103620002037CFFEC00DA008000F4001C010E0254030A000000860001
4182	 346	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x343000103620002037CFFEC00DA008000F4001C010E0254030A000000860001
- stack 0: 0xE0
4183	 348	SHR		 	 
- stack 1: 0x714
- stack 0: 0x3430001
4184	 349	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x3430001
- stack 0: 0xFFFF
4185	 34C	AND		 	 
- stack 1: 0x714
- stack 0: 0x1
4186	 34D	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x1
4187	 34F	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0x1
4188	 350	PUSH2	0080	 	 
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x80
4189	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x1
4190	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x714
- stack 0: 0x2
4191	 355	PUSH2	0080	 	 
- stack 2: 0x714
- stack 1: 0x2
- stack 0: 0x80
4192	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x714
4193	 359	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
4194	 35B	ADD		 	 
- stack 0: 0x718
4195	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
4196	 35D	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x3620002037CFFEC00DA008000F4001C010E0254030A00000086000100A0000E
4197	 35E	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x3620002037CFFEC00DA008000F4001C010E0254030A00000086000100A0000E
- stack 0: 0xF0
4198	 360	SHR		 	 
- stack 1: 0x718
- stack 0: 0x362
4199	 361	JUMP		 	 
- stack 0: 0x718
4200	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x718
4201	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
4202	 364	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x3620002037CFFEC00DA008000F4001C010E0254030A00000086000100A0000E
4203	 365	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x3620002037CFFEC00DA008000F4001C010E0254030A00000086000100A0000E
- stack 0: 0xE0
4204	 367	SHR		 	 
- stack 1: 0x718
- stack 0: 0x3620002
4205	 368	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x3620002
- stack 0: 0xFFFF
4206	 36B	AND		 	 
- stack 1: 0x718
- stack 0: 0x2
4207	 36C	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x2
- stack 0: 0x1
4208	 36E	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x2
4209	 36F	PUSH2	00A0	 	 
- stack 2: 0x718
- stack 1: 0x2
- stack 0: 0xA0
4210	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x718
4211	 373	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
4212	 375	ADD		 	 
- stack 0: 0x71C
4213	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
4214	 377	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x37CFFEC00DA008000F4001C010E0254030A00000086000100A0000E04000000
4215	 378	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x37CFFEC00DA008000F4001C010E0254030A00000086000100A0000E04000000
- stack 0: 0xF0
4216	 37A	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x37C
4217	 37B	JUMP		 	 
- stack 0: 0x71C
4218	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x71C
4219	 37D	PUSH2	0080	 	 
- stack 1: 0x71C
- stack 0: 0x80
4220	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x71C
- stack 0: 0x2
4221	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4222	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x71C
- stack 0: 0x2
4223	 387	PUSH2	00A0	 	 
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0xA0
4224	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0x2
4225	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x71C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4226	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0x2
4227	 391	SUB		 	 
- stack 1: 0x71C
- stack 0: 0x0
4228	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x71C
- stack 1: 0x0
- stack 0: 0x39A
4229	 395	JUMPI		 	 
- stack 0: 0x71C
4230	 396	PUSH2	03B4	 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 1: 0x71C
- stack 0: 0x3B4
4231	 399	JUMP		 	 
- stack 0: 0x71C
4232	 3B4	JUMPDEST		 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x71C
4233	 3B5	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
4234	 3B7	ADD		 	 
- stack 0: 0x720
4235	 3B8	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
4236	 3B9	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0xDA008000F4001C010E0254030A00000086000100A0000E0400000000BA0000
4237	 3BA	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0xDA008000F4001C010E0254030A00000086000100A0000E0400000000BA0000
- stack 0: 0xF0
4238	 3BC	SHR		 	 
- stack 1: 0x720
- stack 0: 0xDA
4239	 3BD	JUMP		 	 
- stack 0: 0x720
4240	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x720
4241	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x720
- stack 0: 0x720
4242	 DC	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0xDA008000F4001C010E0254030A00000086000100A0000E0400000000BA0000
4243	 DD	PUSH1	E0	 	 
- stack 2: 0x720
- stack 1: 0xDA008000F4001C010E0254030A00000086000100A0000E0400000000BA0000
- stack 0: 0xE0
4244	 DF	SHR		 	 
- stack 1: 0x720
- stack 0: 0xDA0080
4245	 E0	PUSH2	FFFF	 	 
- stack 2: 0x720
- stack 1: 0xDA0080
- stack 0: 0xFFFF
4246	 E3	AND		 	 
- stack 1: 0x720
- stack 0: 0x80
4247	 E4	PUSH1	01	 	 
- stack 2: 0x720
- stack 1: 0x80
- stack 0: 0x1
4248	 E6	SIGNEXTEND		 	 
- stack 1: 0x720
- stack 0: 0x80
4249	 E7	PUSH2	03A0	 	 
- stack 2: 0x720
- stack 1: 0x80
- stack 0: 0x3A0
4250	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x720
4251	 EB	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
4252	 ED	ADD		 	 
- stack 0: 0x724
4253	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
4254	 EF	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0xF4001C010E0254030A00000086000100A0000E0400000000BA000003430001
4255	 F0	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0xF4001C010E0254030A00000086000100A0000E0400000000BA000003430001
- stack 0: 0xF0
4256	 F2	SHR		 	 
- stack 1: 0x724
- stack 0: 0xF4
4257	 F3	JUMP		 	 
- stack 0: 0x724
4258	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x724
4259	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
4260	 F6	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0xF4001C010E0254030A00000086000100A0000E0400000000BA000003430001
4261	 F7	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0xF4001C010E0254030A00000086000100A0000E0400000000BA000003430001
- stack 0: 0xE0
4262	 F9	SHR		 	 
- stack 1: 0x724
- stack 0: 0xF4001C
4263	 FA	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0xF4001C
- stack 0: 0xFFFF
4264	 FD	AND		 	 
- stack 1: 0x724
- stack 0: 0x1C
4265	 FE	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x1C
- stack 0: 0x1
4266	 100	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x1C
4267	 101	PUSH2	0380	 	 
- stack 2: 0x724
- stack 1: 0x1C
- stack 0: 0x380
4268	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x724
4269	 105	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
4270	 107	ADD		 	 
- stack 0: 0x728
4271	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
4272	 109	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x10E0254030A00000086000100A0000E0400000000BA00000343000103620002
4273	 10A	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x10E0254030A00000086000100A0000E0400000000BA00000343000103620002
- stack 0: 0xF0
4274	 10C	SHR		 	 
- stack 1: 0x728
- stack 0: 0x10E
4275	 10D	JUMP		 	 
- stack 0: 0x728
4276	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x728
4277	 10F	PUSH2	0060	 	 
- stack 1: 0x728
- stack 0: 0x60
4278	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x728
- stack 0: 0x80
4279	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x728
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
4280	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x728
- stack 0: 0x80
4281	 119	PUSH2	03A0	 	 
- stack 2: 0x728
- stack 1: 0x80
- stack 0: 0x3A0
4282	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x728
- stack 1: 0x80
- stack 0: 0x80
4283	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x728
- stack 2: 0x80
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
4284	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x728
- stack 1: 0x80
- stack 0: 0x80
4285	 123	SUB		 	 
- stack 1: 0x728
- stack 0: 0x0
4286	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x728
- stack 1: 0x0
- stack 0: 0x12C
4287	 127	JUMPI		 	 
- stack 0: 0x728
4288	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x728
- stack 0: 0x146
4289	 12B	JUMP		 	 
- stack 0: 0x728
4290	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x728
4291	 147	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
4292	 149	ADD		 	 
- stack 0: 0x72C
4293	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
4294	 14B	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x30A00000086000100A0000E0400000000BA00000343000103620002037CFFE8
4295	 14C	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x30A00000086000100A0000E0400000000BA00000343000103620002037CFFE8
- stack 0: 0xF0
4296	 14E	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x30A
4297	 14F	JUMP		 	 
- stack 0: 0x72C
4298	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x72C
4299	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
4300	 30C	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x30A00000086000100A0000E0400000000BA00000343000103620002037CFFE8
4301	 30D	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0x30A00000086000100A0000E0400000000BA00000343000103620002037CFFE8
- stack 0: 0xE0
4302	 30F	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x30A0000
4303	 310	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0x30A0000
- stack 0: 0xFFFF
4304	 313	AND		 	 
- stack 1: 0x72C
- stack 0: 0x0
4305	 314	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x0
- stack 0: 0x1
4306	 316	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x0
4307	 317	PUSH2	0080	 	 
- stack 2: 0x72C
- stack 1: 0x0
- stack 0: 0x80
4308	 31A	MSTORE		 	  ;; # store to x4
- stack 0: 0x72C
4309	 31B	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
4310	 31D	ADD		 	 
- stack 0: 0x730
4311	 31E	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
4312	 31F	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x86000100A0000E0400000000BA00000343000103620002037CFFE801500004
4313	 320	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x86000100A0000E0400000000BA00000343000103620002037CFFE801500004
- stack 0: 0xF0
4314	 322	SHR		 	 
- stack 1: 0x730
- stack 0: 0x86
4315	 323	JUMP		 	 
- stack 0: 0x730
4316	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x730
4317	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x730
- stack 0: 0x730
4318	 88	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x86000100A0000E0400000000BA00000343000103620002037CFFE801500004
4319	 89	PUSH1	E0	 	 
- stack 2: 0x730
- stack 1: 0x86000100A0000E0400000000BA00000343000103620002037CFFE801500004
- stack 0: 0xE0
4320	 8B	SHR		 	 
- stack 1: 0x730
- stack 0: 0x860001
4321	 8C	PUSH2	FFFF	 	 
- stack 2: 0x730
- stack 1: 0x860001
- stack 0: 0xFFFF
4322	 8F	AND		 	 
- stack 1: 0x730
- stack 0: 0x1
4323	 90	PUSH1	01	 	 
- stack 2: 0x730
- stack 1: 0x1
- stack 0: 0x1
4324	 92	SIGNEXTEND		 	 
- stack 1: 0x730
- stack 0: 0x1
4325	 93	PUSH2	0020	 	 
- stack 2: 0x730
- stack 1: 0x1
- stack 0: 0x20
4326	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x730
4327	 97	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
4328	 99	ADD		 	 
- stack 0: 0x734
4329	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
4330	 9B	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0xA0000E0400000000BA00000343000103620002037CFFE80150000400F4001D
4331	 9C	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0xA0000E0400000000BA00000343000103620002037CFFE80150000400F4001D
- stack 0: 0xF0
4332	 9E	SHR		 	 
- stack 1: 0x734
- stack 0: 0xA0
4333	 9F	JUMP		 	 
- stack 0: 0x734
4334	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x734
4335	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x734
- stack 0: 0x734
4336	 A2	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0xA0000E0400000000BA00000343000103620002037CFFE80150000400F4001D
4337	 A3	PUSH1	E0	 	 
- stack 2: 0x734
- stack 1: 0xA0000E0400000000BA00000343000103620002037CFFE80150000400F4001D
- stack 0: 0xE0
4338	 A5	SHR		 	 
- stack 1: 0x734
- stack 0: 0xA0000E
4339	 A6	PUSH2	FFFF	 	 
- stack 2: 0x734
- stack 1: 0xA0000E
- stack 0: 0xFFFF
4340	 A9	AND		 	 
- stack 1: 0x734
- stack 0: 0xE
4341	 AA	PUSH1	01	 	 
- stack 2: 0x734
- stack 1: 0xE
- stack 0: 0x1
4342	 AC	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0xE
4343	 AD	PUSH2	0040	 	 
- stack 2: 0x734
- stack 1: 0xE
- stack 0: 0x40
4344	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x734
4345	 B1	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
4346	 B3	ADD		 	 
- stack 0: 0x738
4347	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
4348	 B5	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x400000000BA00000343000103620002037CFFE80150000400F4001D010E0228
4349	 B6	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x400000000BA00000343000103620002037CFFE80150000400F4001D010E0228
- stack 0: 0xF0
4350	 B8	SHR		 	 
- stack 1: 0x738
- stack 0: 0x400
4351	 B9	JUMP		 	 
- stack 0: 0x738
4352	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x738
4353	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x738
- stack 0: 0x738
4354	 402	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x400000000BA00000343000103620002037CFFE80150000400F4001D010E0228
4355	 403	PUSH1	E0	 	 
- stack 2: 0x738
- stack 1: 0x400000000BA00000343000103620002037CFFE80150000400F4001D010E0228
- stack 0: 0xE0
4356	 405	SHR		 	 
- stack 1: 0x738
- stack 0: 0x4000000
4357	 406	PUSH2	FFFF	 	 
- stack 2: 0x738
- stack 1: 0x4000000
- stack 0: 0xFFFF
4358	 409	AND		 	 
- stack 1: 0x738
- stack 0: 0x0
4359	 40A	PUSH1	01	 	 
- stack 2: 0x738
- stack 1: 0x0
- stack 0: 0x1
4360	 40C	SIGNEXTEND		 	 
- stack 1: 0x738
- stack 0: 0x0
4361	 40D	POP		 	 
- stack 0: 0x738
4362	 40E	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
4363	 410	ADD		 	 
- stack 0: 0x73C
4364	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
4365	 412	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0xBA00000343000103620002037CFFE80150000400F4001D010E0228030A0000
4366	 413	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0xBA00000343000103620002037CFFE80150000400F4001D010E0228030A0000
- stack 0: 0xF0
4367	 415	SHR		 	 
- stack 1: 0x73C
- stack 0: 0xBA
4368	 416	JUMP		 	 
- stack 0: 0x73C
4369	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x73C
4370	 BB	PUSH2	0020	 	 
- stack 1: 0x73C
- stack 0: 0x20
4371	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x73C
- stack 0: 0x1
4372	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4373	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x73C
- stack 0: 0x1
4374	 C5	PUSH2	0040	 	 
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0x40
4375	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0xE
4376	 C9	PUSH1	1F	 	 
- stack 3: 0x73C
- stack 2: 0x1
- stack 1: 0xE
- stack 0: 0x1F
4377	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0xE
4378	 CC	SHL		 	 
- stack 1: 0x73C
- stack 0: 0x4000
4379	 CD	PUSH2	0060	 	 
- stack 2: 0x73C
- stack 1: 0x4000
- stack 0: 0x60
4380	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x73C
4381	 D1	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
4382	 D3	ADD		 	 
- stack 0: 0x740
4383	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
4384	 D5	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x343000103620002037CFFE80150000400F4001D010E0228030A000000860001
4385	 D6	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0x343000103620002037CFFE80150000400F4001D010E0228030A000000860001
- stack 0: 0xF0
4386	 D8	SHR		 	 
- stack 1: 0x740
- stack 0: 0x343
4387	 D9	JUMP		 	 
- stack 0: 0x740
4388	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x740
4389	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x740
- stack 0: 0x740
4390	 345	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x343000103620002037CFFE80150000400F4001D010E0228030A000000860001
4391	 346	PUSH1	E0	 	 
- stack 2: 0x740
- stack 1: 0x343000103620002037CFFE80150000400F4001D010E0228030A000000860001
- stack 0: 0xE0
4392	 348	SHR		 	 
- stack 1: 0x740
- stack 0: 0x3430001
4393	 349	PUSH2	FFFF	 	 
- stack 2: 0x740
- stack 1: 0x3430001
- stack 0: 0xFFFF
4394	 34C	AND		 	 
- stack 1: 0x740
- stack 0: 0x1
4395	 34D	PUSH1	01	 	 
- stack 2: 0x740
- stack 1: 0x1
- stack 0: 0x1
4396	 34F	SIGNEXTEND		 	 
- stack 1: 0x740
- stack 0: 0x1
4397	 350	PUSH2	0080	 	 
- stack 2: 0x740
- stack 1: 0x1
- stack 0: 0x80
4398	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x740
- stack 1: 0x1
- stack 0: 0x0
4399	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x740
- stack 0: 0x1
4400	 355	PUSH2	0080	 	 
- stack 2: 0x740
- stack 1: 0x1
- stack 0: 0x80
4401	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x740
4402	 359	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
4403	 35B	ADD		 	 
- stack 0: 0x744
4404	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
4405	 35D	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x3620002037CFFE80150000400F4001D010E0228030A00000086000100A0001F
4406	 35E	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x3620002037CFFE80150000400F4001D010E0228030A00000086000100A0001F
- stack 0: 0xF0
4407	 360	SHR		 	 
- stack 1: 0x744
- stack 0: 0x362
4408	 361	JUMP		 	 
- stack 0: 0x744
4409	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x744
4410	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
4411	 364	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x3620002037CFFE80150000400F4001D010E0228030A00000086000100A0001F
4412	 365	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x3620002037CFFE80150000400F4001D010E0228030A00000086000100A0001F
- stack 0: 0xE0
4413	 367	SHR		 	 
- stack 1: 0x744
- stack 0: 0x3620002
4414	 368	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x3620002
- stack 0: 0xFFFF
4415	 36B	AND		 	 
- stack 1: 0x744
- stack 0: 0x2
4416	 36C	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x2
- stack 0: 0x1
4417	 36E	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x2
4418	 36F	PUSH2	00A0	 	 
- stack 2: 0x744
- stack 1: 0x2
- stack 0: 0xA0
4419	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x744
4420	 373	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
4421	 375	ADD		 	 
- stack 0: 0x748
4422	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
4423	 377	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x37CFFE80150000400F4001D010E0228030A00000086000100A0001F04000000
4424	 378	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x37CFFE80150000400F4001D010E0228030A00000086000100A0001F04000000
- stack 0: 0xF0
4425	 37A	SHR		 	 
- stack 1: 0x748
- stack 0: 0x37C
4426	 37B	JUMP		 	 
- stack 0: 0x748
4427	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x748
4428	 37D	PUSH2	0080	 	 
- stack 1: 0x748
- stack 0: 0x80
4429	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x748
- stack 0: 0x1
4430	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x748
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4431	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x748
- stack 0: 0x1
4432	 387	PUSH2	00A0	 	 
- stack 2: 0x748
- stack 1: 0x1
- stack 0: 0xA0
4433	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x748
- stack 1: 0x1
- stack 0: 0x2
4434	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x748
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4435	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x748
- stack 1: 0x1
- stack 0: 0x2
4436	 391	SUB		 	 
- stack 1: 0x748
- stack 0: 0x1
4437	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x748
- stack 1: 0x1
- stack 0: 0x39A
4438	 395	JUMPI		 	 
- stack 0: 0x748
4439	 39A	JUMPDEST		 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x748
4440	 39B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
4441	 39C	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x37CFFE80150000400F4001D010E0228030A00000086000100A0001F04000000
4442	 39D	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0x37CFFE80150000400F4001D010E0228030A00000086000100A0001F04000000
- stack 0: 0xE0
4443	 39F	SHR		 	 
- stack 1: 0x748
- stack 0: 0x37CFFE8
4444	 3A0	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0x37CFFE8
- stack 0: 0xFFFF
4445	 3A3	AND		 	 
- stack 1: 0x748
- stack 0: 0xFFE8
4446	 3A4	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0xFFE8
- stack 0: 0x1
4447	 3A6	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
4448	 3A7	ADD		 	 
- stack 0: 0x730
4449	 3A8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x730
- stack 0: 0xFFFFFFFF
4450	 3AD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x730
4451	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
4452	 3AF	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x86000100A0000E0400000000BA00000343000103620002037CFFE801500004
4453	 3B0	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x86000100A0000E0400000000BA00000343000103620002037CFFE801500004
- stack 0: 0xF0
4454	 3B2	SHR		 	 
- stack 1: 0x730
- stack 0: 0x86
4455	 3B3	JUMP		 	 
- stack 0: 0x730
4456	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x730
4457	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x730
- stack 0: 0x730
4458	 88	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x86000100A0000E0400000000BA00000343000103620002037CFFE801500004
4459	 89	PUSH1	E0	 	 
- stack 2: 0x730
- stack 1: 0x86000100A0000E0400000000BA00000343000103620002037CFFE801500004
- stack 0: 0xE0
4460	 8B	SHR		 	 
- stack 1: 0x730
- stack 0: 0x860001
4461	 8C	PUSH2	FFFF	 	 
- stack 2: 0x730
- stack 1: 0x860001
- stack 0: 0xFFFF
4462	 8F	AND		 	 
- stack 1: 0x730
- stack 0: 0x1
4463	 90	PUSH1	01	 	 
- stack 2: 0x730
- stack 1: 0x1
- stack 0: 0x1
4464	 92	SIGNEXTEND		 	 
- stack 1: 0x730
- stack 0: 0x1
4465	 93	PUSH2	0020	 	 
- stack 2: 0x730
- stack 1: 0x1
- stack 0: 0x20
4466	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x730
4467	 97	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
4468	 99	ADD		 	 
- stack 0: 0x734
4469	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
4470	 9B	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0xA0000E0400000000BA00000343000103620002037CFFE80150000400F4001D
4471	 9C	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0xA0000E0400000000BA00000343000103620002037CFFE80150000400F4001D
- stack 0: 0xF0
4472	 9E	SHR		 	 
- stack 1: 0x734
- stack 0: 0xA0
4473	 9F	JUMP		 	 
- stack 0: 0x734
4474	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x734
4475	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x734
- stack 0: 0x734
4476	 A2	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0xA0000E0400000000BA00000343000103620002037CFFE80150000400F4001D
4477	 A3	PUSH1	E0	 	 
- stack 2: 0x734
- stack 1: 0xA0000E0400000000BA00000343000103620002037CFFE80150000400F4001D
- stack 0: 0xE0
4478	 A5	SHR		 	 
- stack 1: 0x734
- stack 0: 0xA0000E
4479	 A6	PUSH2	FFFF	 	 
- stack 2: 0x734
- stack 1: 0xA0000E
- stack 0: 0xFFFF
4480	 A9	AND		 	 
- stack 1: 0x734
- stack 0: 0xE
4481	 AA	PUSH1	01	 	 
- stack 2: 0x734
- stack 1: 0xE
- stack 0: 0x1
4482	 AC	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0xE
4483	 AD	PUSH2	0040	 	 
- stack 2: 0x734
- stack 1: 0xE
- stack 0: 0x40
4484	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x734
4485	 B1	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
4486	 B3	ADD		 	 
- stack 0: 0x738
4487	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
4488	 B5	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x400000000BA00000343000103620002037CFFE80150000400F4001D010E0228
4489	 B6	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x400000000BA00000343000103620002037CFFE80150000400F4001D010E0228
- stack 0: 0xF0
4490	 B8	SHR		 	 
- stack 1: 0x738
- stack 0: 0x400
4491	 B9	JUMP		 	 
- stack 0: 0x738
4492	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x738
4493	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x738
- stack 0: 0x738
4494	 402	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x400000000BA00000343000103620002037CFFE80150000400F4001D010E0228
4495	 403	PUSH1	E0	 	 
- stack 2: 0x738
- stack 1: 0x400000000BA00000343000103620002037CFFE80150000400F4001D010E0228
- stack 0: 0xE0
4496	 405	SHR		 	 
- stack 1: 0x738
- stack 0: 0x4000000
4497	 406	PUSH2	FFFF	 	 
- stack 2: 0x738
- stack 1: 0x4000000
- stack 0: 0xFFFF
4498	 409	AND		 	 
- stack 1: 0x738
- stack 0: 0x0
4499	 40A	PUSH1	01	 	 
- stack 2: 0x738
- stack 1: 0x0
- stack 0: 0x1
4500	 40C	SIGNEXTEND		 	 
- stack 1: 0x738
- stack 0: 0x0
4501	 40D	POP		 	 
- stack 0: 0x738
4502	 40E	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
4503	 410	ADD		 	 
- stack 0: 0x73C
4504	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
4505	 412	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0xBA00000343000103620002037CFFE80150000400F4001D010E0228030A0000
4506	 413	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0xBA00000343000103620002037CFFE80150000400F4001D010E0228030A0000
- stack 0: 0xF0
4507	 415	SHR		 	 
- stack 1: 0x73C
- stack 0: 0xBA
4508	 416	JUMP		 	 
- stack 0: 0x73C
4509	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x73C
4510	 BB	PUSH2	0020	 	 
- stack 1: 0x73C
- stack 0: 0x20
4511	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x73C
- stack 0: 0x1
4512	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4513	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x73C
- stack 0: 0x1
4514	 C5	PUSH2	0040	 	 
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0x40
4515	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0xE
4516	 C9	PUSH1	1F	 	 
- stack 3: 0x73C
- stack 2: 0x1
- stack 1: 0xE
- stack 0: 0x1F
4517	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0xE
4518	 CC	SHL		 	 
- stack 1: 0x73C
- stack 0: 0x4000
4519	 CD	PUSH2	0060	 	 
- stack 2: 0x73C
- stack 1: 0x4000
- stack 0: 0x60
4520	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x73C
4521	 D1	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
4522	 D3	ADD		 	 
- stack 0: 0x740
4523	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
4524	 D5	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x343000103620002037CFFE80150000400F4001D010E0228030A000000860001
4525	 D6	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0x343000103620002037CFFE80150000400F4001D010E0228030A000000860001
- stack 0: 0xF0
4526	 D8	SHR		 	 
- stack 1: 0x740
- stack 0: 0x343
4527	 D9	JUMP		 	 
- stack 0: 0x740
4528	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x740
4529	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x740
- stack 0: 0x740
4530	 345	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x343000103620002037CFFE80150000400F4001D010E0228030A000000860001
4531	 346	PUSH1	E0	 	 
- stack 2: 0x740
- stack 1: 0x343000103620002037CFFE80150000400F4001D010E0228030A000000860001
- stack 0: 0xE0
4532	 348	SHR		 	 
- stack 1: 0x740
- stack 0: 0x3430001
4533	 349	PUSH2	FFFF	 	 
- stack 2: 0x740
- stack 1: 0x3430001
- stack 0: 0xFFFF
4534	 34C	AND		 	 
- stack 1: 0x740
- stack 0: 0x1
4535	 34D	PUSH1	01	 	 
- stack 2: 0x740
- stack 1: 0x1
- stack 0: 0x1
4536	 34F	SIGNEXTEND		 	 
- stack 1: 0x740
- stack 0: 0x1
4537	 350	PUSH2	0080	 	 
- stack 2: 0x740
- stack 1: 0x1
- stack 0: 0x80
4538	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x740
- stack 1: 0x1
- stack 0: 0x1
4539	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x740
- stack 0: 0x2
4540	 355	PUSH2	0080	 	 
- stack 2: 0x740
- stack 1: 0x2
- stack 0: 0x80
4541	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x740
4542	 359	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
4543	 35B	ADD		 	 
- stack 0: 0x744
4544	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
4545	 35D	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x3620002037CFFE80150000400F4001D010E0228030A00000086000100A0001F
4546	 35E	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x3620002037CFFE80150000400F4001D010E0228030A00000086000100A0001F
- stack 0: 0xF0
4547	 360	SHR		 	 
- stack 1: 0x744
- stack 0: 0x362
4548	 361	JUMP		 	 
- stack 0: 0x744
4549	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x744
4550	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
4551	 364	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x3620002037CFFE80150000400F4001D010E0228030A00000086000100A0001F
4552	 365	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x3620002037CFFE80150000400F4001D010E0228030A00000086000100A0001F
- stack 0: 0xE0
4553	 367	SHR		 	 
- stack 1: 0x744
- stack 0: 0x3620002
4554	 368	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x3620002
- stack 0: 0xFFFF
4555	 36B	AND		 	 
- stack 1: 0x744
- stack 0: 0x2
4556	 36C	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x2
- stack 0: 0x1
4557	 36E	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x2
4558	 36F	PUSH2	00A0	 	 
- stack 2: 0x744
- stack 1: 0x2
- stack 0: 0xA0
4559	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x744
4560	 373	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
4561	 375	ADD		 	 
- stack 0: 0x748
4562	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
4563	 377	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x37CFFE80150000400F4001D010E0228030A00000086000100A0001F04000000
4564	 378	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x37CFFE80150000400F4001D010E0228030A00000086000100A0001F04000000
- stack 0: 0xF0
4565	 37A	SHR		 	 
- stack 1: 0x748
- stack 0: 0x37C
4566	 37B	JUMP		 	 
- stack 0: 0x748
4567	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x748
4568	 37D	PUSH2	0080	 	 
- stack 1: 0x748
- stack 0: 0x80
4569	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x748
- stack 0: 0x2
4570	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4571	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x748
- stack 0: 0x2
4572	 387	PUSH2	00A0	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0xA0
4573	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0x2
4574	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x748
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4575	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0x2
4576	 391	SUB		 	 
- stack 1: 0x748
- stack 0: 0x0
4577	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x748
- stack 1: 0x0
- stack 0: 0x39A
4578	 395	JUMPI		 	 
- stack 0: 0x748
4579	 396	PUSH2	03B4	 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 1: 0x748
- stack 0: 0x3B4
4580	 399	JUMP		 	 
- stack 0: 0x748
4581	 3B4	JUMPDEST		 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x748
4582	 3B5	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
4583	 3B7	ADD		 	 
- stack 0: 0x74C
4584	 3B8	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
4585	 3B9	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x150000400F4001D010E0228030A00000086000100A0001F0400000004000000
4586	 3BA	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x150000400F4001D010E0228030A00000086000100A0001F0400000004000000
- stack 0: 0xF0
4587	 3BC	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x150
4588	 3BD	JUMP		 	 
- stack 0: 0x74C
4589	 150	JUMPDEST		 ;; __riscvimpl_LUI_4eb7	  ;; # instr: lui t4,0x4(ignore imm)
- stack 0: 0x74C
4590	 151	PUSH4	00004000	 	 
- stack 1: 0x74C
- stack 0: 0x4000
4591	 156	PUSH2	03A0	 	 
- stack 2: 0x74C
- stack 1: 0x4000
- stack 0: 0x3A0
4592	 159	MSTORE		 	  ;; # store to x29
- stack 0: 0x74C
4593	 15A	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
4594	 15C	ADD		 	 
- stack 0: 0x750
4595	 15D	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
4596	 15E	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0xF4001D010E0228030A00000086000100A0001F040000000400000000BA0000
4597	 15F	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0xF4001D010E0228030A00000086000100A0001F040000000400000000BA0000
- stack 0: 0xF0
4598	 161	SHR		 	 
- stack 1: 0x750
- stack 0: 0xF4
4599	 162	JUMP		 	 
- stack 0: 0x750
4600	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x750
4601	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x750
- stack 0: 0x750
4602	 F6	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0xF4001D010E0228030A00000086000100A0001F040000000400000000BA0000
4603	 F7	PUSH1	E0	 	 
- stack 2: 0x750
- stack 1: 0xF4001D010E0228030A00000086000100A0001F040000000400000000BA0000
- stack 0: 0xE0
4604	 F9	SHR		 	 
- stack 1: 0x750
- stack 0: 0xF4001D
4605	 FA	PUSH2	FFFF	 	 
- stack 2: 0x750
- stack 1: 0xF4001D
- stack 0: 0xFFFF
4606	 FD	AND		 	 
- stack 1: 0x750
- stack 0: 0x1D
4607	 FE	PUSH1	01	 	 
- stack 2: 0x750
- stack 1: 0x1D
- stack 0: 0x1
4608	 100	SIGNEXTEND		 	 
- stack 1: 0x750
- stack 0: 0x1D
4609	 101	PUSH2	0380	 	 
- stack 2: 0x750
- stack 1: 0x1D
- stack 0: 0x380
4610	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x750
4611	 105	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
4612	 107	ADD		 	 
- stack 0: 0x754
4613	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
4614	 109	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x10E0228030A00000086000100A0001F040000000400000000BA000003430001
4615	 10A	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x10E0228030A00000086000100A0001F040000000400000000BA000003430001
- stack 0: 0xF0
4616	 10C	SHR		 	 
- stack 1: 0x754
- stack 0: 0x10E
4617	 10D	JUMP		 	 
- stack 0: 0x754
4618	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x754
4619	 10F	PUSH2	0060	 	 
- stack 1: 0x754
- stack 0: 0x60
4620	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x754
- stack 0: 0x4000
4621	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x754
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
4622	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x754
- stack 0: 0x4000
4623	 119	PUSH2	03A0	 	 
- stack 2: 0x754
- stack 1: 0x4000
- stack 0: 0x3A0
4624	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x754
- stack 1: 0x4000
- stack 0: 0x4000
4625	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x754
- stack 2: 0x4000
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
4626	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x754
- stack 1: 0x4000
- stack 0: 0x4000
4627	 123	SUB		 	 
- stack 1: 0x754
- stack 0: 0x0
4628	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x754
- stack 1: 0x0
- stack 0: 0x12C
4629	 127	JUMPI		 	 
- stack 0: 0x754
4630	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x754
- stack 0: 0x146
4631	 12B	JUMP		 	 
- stack 0: 0x754
4632	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x754
4633	 147	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
4634	 149	ADD		 	 
- stack 0: 0x758
4635	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
4636	 14B	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x30A00000086000100A0001F040000000400000000BA00000343000103620002
4637	 14C	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0x30A00000086000100A0001F040000000400000000BA00000343000103620002
- stack 0: 0xF0
4638	 14E	SHR		 	 
- stack 1: 0x758
- stack 0: 0x30A
4639	 14F	JUMP		 	 
- stack 0: 0x758
4640	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x758
4641	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x758
- stack 0: 0x758
4642	 30C	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x30A00000086000100A0001F040000000400000000BA00000343000103620002
4643	 30D	PUSH1	E0	 	 
- stack 2: 0x758
- stack 1: 0x30A00000086000100A0001F040000000400000000BA00000343000103620002
- stack 0: 0xE0
4644	 30F	SHR		 	 
- stack 1: 0x758
- stack 0: 0x30A0000
4645	 310	PUSH2	FFFF	 	 
- stack 2: 0x758
- stack 1: 0x30A0000
- stack 0: 0xFFFF
4646	 313	AND		 	 
- stack 1: 0x758
- stack 0: 0x0
4647	 314	PUSH1	01	 	 
- stack 2: 0x758
- stack 1: 0x0
- stack 0: 0x1
4648	 316	SIGNEXTEND		 	 
- stack 1: 0x758
- stack 0: 0x0
4649	 317	PUSH2	0080	 	 
- stack 2: 0x758
- stack 1: 0x0
- stack 0: 0x80
4650	 31A	MSTORE		 	  ;; # store to x4
- stack 0: 0x758
4651	 31B	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
4652	 31D	ADD		 	 
- stack 0: 0x75C
4653	 31E	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
4654	 31F	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x86000100A0001F040000000400000000BA00000343000103620002037CFFE4
4655	 320	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x86000100A0001F040000000400000000BA00000343000103620002037CFFE4
- stack 0: 0xF0
4656	 322	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x86
4657	 323	JUMP		 	 
- stack 0: 0x75C
4658	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x75C
4659	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
4660	 88	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x86000100A0001F040000000400000000BA00000343000103620002037CFFE4
4661	 89	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x86000100A0001F040000000400000000BA00000343000103620002037CFFE4
- stack 0: 0xE0
4662	 8B	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x860001
4663	 8C	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x860001
- stack 0: 0xFFFF
4664	 8F	AND		 	 
- stack 1: 0x75C
- stack 0: 0x1
4665	 90	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x1
4666	 92	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x1
4667	 93	PUSH2	0020	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x20
4668	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x75C
4669	 97	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
4670	 99	ADD		 	 
- stack 0: 0x760
4671	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
4672	 9B	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0xA0001F040000000400000000BA00000343000103620002037CFFE401630000
4673	 9C	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0xA0001F040000000400000000BA00000343000103620002037CFFE401630000
- stack 0: 0xF0
4674	 9E	SHR		 	 
- stack 1: 0x760
- stack 0: 0xA0
4675	 9F	JUMP		 	 
- stack 0: 0x760
4676	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x760
4677	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
4678	 A2	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0xA0001F040000000400000000BA00000343000103620002037CFFE401630000
4679	 A3	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0xA0001F040000000400000000BA00000343000103620002037CFFE401630000
- stack 0: 0xE0
4680	 A5	SHR		 	 
- stack 1: 0x760
- stack 0: 0xA0001F
4681	 A6	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0xA0001F
- stack 0: 0xFFFF
4682	 A9	AND		 	 
- stack 1: 0x760
- stack 0: 0x1F
4683	 AA	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x1F
- stack 0: 0x1
4684	 AC	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x1F
4685	 AD	PUSH2	0040	 	 
- stack 2: 0x760
- stack 1: 0x1F
- stack 0: 0x40
4686	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x760
4687	 B1	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
4688	 B3	ADD		 	 
- stack 0: 0x764
4689	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
4690	 B5	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x40000000400000000BA00000343000103620002037CFFE40163000000F4001E
4691	 B6	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x40000000400000000BA00000343000103620002037CFFE40163000000F4001E
- stack 0: 0xF0
4692	 B8	SHR		 	 
- stack 1: 0x764
- stack 0: 0x400
4693	 B9	JUMP		 	 
- stack 0: 0x764
4694	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x764
4695	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
4696	 402	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x40000000400000000BA00000343000103620002037CFFE40163000000F4001E
4697	 403	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0x40000000400000000BA00000343000103620002037CFFE40163000000F4001E
- stack 0: 0xE0
4698	 405	SHR		 	 
- stack 1: 0x764
- stack 0: 0x4000000
4699	 406	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0x4000000
- stack 0: 0xFFFF
4700	 409	AND		 	 
- stack 1: 0x764
- stack 0: 0x0
4701	 40A	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0x0
- stack 0: 0x1
4702	 40C	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0x0
4703	 40D	POP		 	 
- stack 0: 0x764
4704	 40E	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
4705	 410	ADD		 	 
- stack 0: 0x768
4706	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
4707	 412	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x400000000BA00000343000103620002037CFFE40163000000F4001E010E01F8
4708	 413	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x400000000BA00000343000103620002037CFFE40163000000F4001E010E01F8
- stack 0: 0xF0
4709	 415	SHR		 	 
- stack 1: 0x768
- stack 0: 0x400
4710	 416	JUMP		 	 
- stack 0: 0x768
4711	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x768
4712	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x768
- stack 0: 0x768
4713	 402	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x400000000BA00000343000103620002037CFFE40163000000F4001E010E01F8
4714	 403	PUSH1	E0	 	 
- stack 2: 0x768
- stack 1: 0x400000000BA00000343000103620002037CFFE40163000000F4001E010E01F8
- stack 0: 0xE0
4715	 405	SHR		 	 
- stack 1: 0x768
- stack 0: 0x4000000
4716	 406	PUSH2	FFFF	 	 
- stack 2: 0x768
- stack 1: 0x4000000
- stack 0: 0xFFFF
4717	 409	AND		 	 
- stack 1: 0x768
- stack 0: 0x0
4718	 40A	PUSH1	01	 	 
- stack 2: 0x768
- stack 1: 0x0
- stack 0: 0x1
4719	 40C	SIGNEXTEND		 	 
- stack 1: 0x768
- stack 0: 0x0
4720	 40D	POP		 	 
- stack 0: 0x768
4721	 40E	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
4722	 410	ADD		 	 
- stack 0: 0x76C
4723	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
4724	 412	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0xBA00000343000103620002037CFFE40163000000F4001E010E01F8030A0000
4725	 413	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0xBA00000343000103620002037CFFE40163000000F4001E010E01F8030A0000
- stack 0: 0xF0
4726	 415	SHR		 	 
- stack 1: 0x76C
- stack 0: 0xBA
4727	 416	JUMP		 	 
- stack 0: 0x76C
4728	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x76C
4729	 BB	PUSH2	0020	 	 
- stack 1: 0x76C
- stack 0: 0x20
4730	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x76C
- stack 0: 0x1
4731	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x76C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4732	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x76C
- stack 0: 0x1
4733	 C5	PUSH2	0040	 	 
- stack 2: 0x76C
- stack 1: 0x1
- stack 0: 0x40
4734	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x76C
- stack 1: 0x1
- stack 0: 0x1F
4735	 C9	PUSH1	1F	 	 
- stack 3: 0x76C
- stack 2: 0x1
- stack 1: 0x1F
- stack 0: 0x1F
4736	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x76C
- stack 1: 0x1
- stack 0: 0x1F
4737	 CC	SHL		 	 
- stack 1: 0x76C
- stack 0: 0x80000000
4738	 CD	PUSH2	0060	 	 
- stack 2: 0x76C
- stack 1: 0x80000000
- stack 0: 0x60
4739	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x76C
4740	 D1	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
4741	 D3	ADD		 	 
- stack 0: 0x770
4742	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
4743	 D5	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x343000103620002037CFFE40163000000F4001E010E01F8030A000000860001
4744	 D6	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x343000103620002037CFFE40163000000F4001E010E01F8030A000000860001
- stack 0: 0xF0
4745	 D8	SHR		 	 
- stack 1: 0x770
- stack 0: 0x343
4746	 D9	JUMP		 	 
- stack 0: 0x770
4747	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x770
4748	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x770
- stack 0: 0x770
4749	 345	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x343000103620002037CFFE40163000000F4001E010E01F8030A000000860001
4750	 346	PUSH1	E0	 	 
- stack 2: 0x770
- stack 1: 0x343000103620002037CFFE40163000000F4001E010E01F8030A000000860001
- stack 0: 0xE0
4751	 348	SHR		 	 
- stack 1: 0x770
- stack 0: 0x3430001
4752	 349	PUSH2	FFFF	 	 
- stack 2: 0x770
- stack 1: 0x3430001
- stack 0: 0xFFFF
4753	 34C	AND		 	 
- stack 1: 0x770
- stack 0: 0x1
4754	 34D	PUSH1	01	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x1
4755	 34F	SIGNEXTEND		 	 
- stack 1: 0x770
- stack 0: 0x1
4756	 350	PUSH2	0080	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x80
4757	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x0
4758	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x770
- stack 0: 0x1
4759	 355	PUSH2	0080	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x80
4760	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x770
4761	 359	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
4762	 35B	ADD		 	 
- stack 0: 0x774
4763	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
4764	 35D	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x3620002037CFFE40163000000F4001E010E01F8030A00000086000104000000
4765	 35E	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x3620002037CFFE40163000000F4001E010E01F8030A00000086000104000000
- stack 0: 0xF0
4766	 360	SHR		 	 
- stack 1: 0x774
- stack 0: 0x362
4767	 361	JUMP		 	 
- stack 0: 0x774
4768	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x774
4769	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x774
- stack 0: 0x774
4770	 364	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x3620002037CFFE40163000000F4001E010E01F8030A00000086000104000000
4771	 365	PUSH1	E0	 	 
- stack 2: 0x774
- stack 1: 0x3620002037CFFE40163000000F4001E010E01F8030A00000086000104000000
- stack 0: 0xE0
4772	 367	SHR		 	 
- stack 1: 0x774
- stack 0: 0x3620002
4773	 368	PUSH2	FFFF	 	 
- stack 2: 0x774
- stack 1: 0x3620002
- stack 0: 0xFFFF
4774	 36B	AND		 	 
- stack 1: 0x774
- stack 0: 0x2
4775	 36C	PUSH1	01	 	 
- stack 2: 0x774
- stack 1: 0x2
- stack 0: 0x1
4776	 36E	SIGNEXTEND		 	 
- stack 1: 0x774
- stack 0: 0x2
4777	 36F	PUSH2	00A0	 	 
- stack 2: 0x774
- stack 1: 0x2
- stack 0: 0xA0
4778	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x774
4779	 373	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
4780	 375	ADD		 	 
- stack 0: 0x778
4781	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
4782	 377	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x37CFFE40163000000F4001E010E01F8030A0000008600010400000000A00007
4783	 378	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x37CFFE40163000000F4001E010E01F8030A0000008600010400000000A00007
- stack 0: 0xF0
4784	 37A	SHR		 	 
- stack 1: 0x778
- stack 0: 0x37C
4785	 37B	JUMP		 	 
- stack 0: 0x778
4786	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x778
4787	 37D	PUSH2	0080	 	 
- stack 1: 0x778
- stack 0: 0x80
4788	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x778
- stack 0: 0x1
4789	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4790	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x778
- stack 0: 0x1
4791	 387	PUSH2	00A0	 	 
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0xA0
4792	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x2
4793	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x778
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4794	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x2
4795	 391	SUB		 	 
- stack 1: 0x778
- stack 0: 0x1
4796	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x39A
4797	 395	JUMPI		 	 
- stack 0: 0x778
4798	 39A	JUMPDEST		 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x778
4799	 39B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x778
- stack 0: 0x778
4800	 39C	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x37CFFE40163000000F4001E010E01F8030A0000008600010400000000A00007
4801	 39D	PUSH1	E0	 	 
- stack 2: 0x778
- stack 1: 0x37CFFE40163000000F4001E010E01F8030A0000008600010400000000A00007
- stack 0: 0xE0
4802	 39F	SHR		 	 
- stack 1: 0x778
- stack 0: 0x37CFFE4
4803	 3A0	PUSH2	FFFF	 	 
- stack 2: 0x778
- stack 1: 0x37CFFE4
- stack 0: 0xFFFF
4804	 3A3	AND		 	 
- stack 1: 0x778
- stack 0: 0xFFE4
4805	 3A4	PUSH1	01	 	 
- stack 2: 0x778
- stack 1: 0xFFE4
- stack 0: 0x1
4806	 3A6	SIGNEXTEND		 	 
- stack 1: 0x778
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4807	 3A7	ADD		 	 
- stack 0: 0x75C
4808	 3A8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x75C
- stack 0: 0xFFFFFFFF
4809	 3AD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x75C
4810	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
4811	 3AF	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x86000100A0001F040000000400000000BA00000343000103620002037CFFE4
4812	 3B0	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x86000100A0001F040000000400000000BA00000343000103620002037CFFE4
- stack 0: 0xF0
4813	 3B2	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x86
4814	 3B3	JUMP		 	 
- stack 0: 0x75C
4815	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x75C
4816	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
4817	 88	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x86000100A0001F040000000400000000BA00000343000103620002037CFFE4
4818	 89	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x86000100A0001F040000000400000000BA00000343000103620002037CFFE4
- stack 0: 0xE0
4819	 8B	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x860001
4820	 8C	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x860001
- stack 0: 0xFFFF
4821	 8F	AND		 	 
- stack 1: 0x75C
- stack 0: 0x1
4822	 90	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x1
4823	 92	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x1
4824	 93	PUSH2	0020	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x20
4825	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x75C
4826	 97	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
4827	 99	ADD		 	 
- stack 0: 0x760
4828	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
4829	 9B	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0xA0001F040000000400000000BA00000343000103620002037CFFE401630000
4830	 9C	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0xA0001F040000000400000000BA00000343000103620002037CFFE401630000
- stack 0: 0xF0
4831	 9E	SHR		 	 
- stack 1: 0x760
- stack 0: 0xA0
4832	 9F	JUMP		 	 
- stack 0: 0x760
4833	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x760
4834	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
4835	 A2	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0xA0001F040000000400000000BA00000343000103620002037CFFE401630000
4836	 A3	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0xA0001F040000000400000000BA00000343000103620002037CFFE401630000
- stack 0: 0xE0
4837	 A5	SHR		 	 
- stack 1: 0x760
- stack 0: 0xA0001F
4838	 A6	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0xA0001F
- stack 0: 0xFFFF
4839	 A9	AND		 	 
- stack 1: 0x760
- stack 0: 0x1F
4840	 AA	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x1F
- stack 0: 0x1
4841	 AC	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x1F
4842	 AD	PUSH2	0040	 	 
- stack 2: 0x760
- stack 1: 0x1F
- stack 0: 0x40
4843	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x760
4844	 B1	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
4845	 B3	ADD		 	 
- stack 0: 0x764
4846	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
4847	 B5	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x40000000400000000BA00000343000103620002037CFFE40163000000F4001E
4848	 B6	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x40000000400000000BA00000343000103620002037CFFE40163000000F4001E
- stack 0: 0xF0
4849	 B8	SHR		 	 
- stack 1: 0x764
- stack 0: 0x400
4850	 B9	JUMP		 	 
- stack 0: 0x764
4851	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x764
4852	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
4853	 402	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x40000000400000000BA00000343000103620002037CFFE40163000000F4001E
4854	 403	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0x40000000400000000BA00000343000103620002037CFFE40163000000F4001E
- stack 0: 0xE0
4855	 405	SHR		 	 
- stack 1: 0x764
- stack 0: 0x4000000
4856	 406	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0x4000000
- stack 0: 0xFFFF
4857	 409	AND		 	 
- stack 1: 0x764
- stack 0: 0x0
4858	 40A	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0x0
- stack 0: 0x1
4859	 40C	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0x0
4860	 40D	POP		 	 
- stack 0: 0x764
4861	 40E	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
4862	 410	ADD		 	 
- stack 0: 0x768
4863	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
4864	 412	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x400000000BA00000343000103620002037CFFE40163000000F4001E010E01F8
4865	 413	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x400000000BA00000343000103620002037CFFE40163000000F4001E010E01F8
- stack 0: 0xF0
4866	 415	SHR		 	 
- stack 1: 0x768
- stack 0: 0x400
4867	 416	JUMP		 	 
- stack 0: 0x768
4868	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x768
4869	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x768
- stack 0: 0x768
4870	 402	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x400000000BA00000343000103620002037CFFE40163000000F4001E010E01F8
4871	 403	PUSH1	E0	 	 
- stack 2: 0x768
- stack 1: 0x400000000BA00000343000103620002037CFFE40163000000F4001E010E01F8
- stack 0: 0xE0
4872	 405	SHR		 	 
- stack 1: 0x768
- stack 0: 0x4000000
4873	 406	PUSH2	FFFF	 	 
- stack 2: 0x768
- stack 1: 0x4000000
- stack 0: 0xFFFF
4874	 409	AND		 	 
- stack 1: 0x768
- stack 0: 0x0
4875	 40A	PUSH1	01	 	 
- stack 2: 0x768
- stack 1: 0x0
- stack 0: 0x1
4876	 40C	SIGNEXTEND		 	 
- stack 1: 0x768
- stack 0: 0x0
4877	 40D	POP		 	 
- stack 0: 0x768
4878	 40E	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
4879	 410	ADD		 	 
- stack 0: 0x76C
4880	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
4881	 412	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0xBA00000343000103620002037CFFE40163000000F4001E010E01F8030A0000
4882	 413	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0xBA00000343000103620002037CFFE40163000000F4001E010E01F8030A0000
- stack 0: 0xF0
4883	 415	SHR		 	 
- stack 1: 0x76C
- stack 0: 0xBA
4884	 416	JUMP		 	 
- stack 0: 0x76C
4885	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x76C
4886	 BB	PUSH2	0020	 	 
- stack 1: 0x76C
- stack 0: 0x20
4887	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x76C
- stack 0: 0x1
4888	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x76C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4889	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x76C
- stack 0: 0x1
4890	 C5	PUSH2	0040	 	 
- stack 2: 0x76C
- stack 1: 0x1
- stack 0: 0x40
4891	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x76C
- stack 1: 0x1
- stack 0: 0x1F
4892	 C9	PUSH1	1F	 	 
- stack 3: 0x76C
- stack 2: 0x1
- stack 1: 0x1F
- stack 0: 0x1F
4893	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x76C
- stack 1: 0x1
- stack 0: 0x1F
4894	 CC	SHL		 	 
- stack 1: 0x76C
- stack 0: 0x80000000
4895	 CD	PUSH2	0060	 	 
- stack 2: 0x76C
- stack 1: 0x80000000
- stack 0: 0x60
4896	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x76C
4897	 D1	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
4898	 D3	ADD		 	 
- stack 0: 0x770
4899	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
4900	 D5	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x343000103620002037CFFE40163000000F4001E010E01F8030A000000860001
4901	 D6	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x343000103620002037CFFE40163000000F4001E010E01F8030A000000860001
- stack 0: 0xF0
4902	 D8	SHR		 	 
- stack 1: 0x770
- stack 0: 0x343
4903	 D9	JUMP		 	 
- stack 0: 0x770
4904	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x770
4905	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x770
- stack 0: 0x770
4906	 345	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x343000103620002037CFFE40163000000F4001E010E01F8030A000000860001
4907	 346	PUSH1	E0	 	 
- stack 2: 0x770
- stack 1: 0x343000103620002037CFFE40163000000F4001E010E01F8030A000000860001
- stack 0: 0xE0
4908	 348	SHR		 	 
- stack 1: 0x770
- stack 0: 0x3430001
4909	 349	PUSH2	FFFF	 	 
- stack 2: 0x770
- stack 1: 0x3430001
- stack 0: 0xFFFF
4910	 34C	AND		 	 
- stack 1: 0x770
- stack 0: 0x1
4911	 34D	PUSH1	01	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x1
4912	 34F	SIGNEXTEND		 	 
- stack 1: 0x770
- stack 0: 0x1
4913	 350	PUSH2	0080	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x80
4914	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x1
4915	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x770
- stack 0: 0x2
4916	 355	PUSH2	0080	 	 
- stack 2: 0x770
- stack 1: 0x2
- stack 0: 0x80
4917	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x770
4918	 359	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
4919	 35B	ADD		 	 
- stack 0: 0x774
4920	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
4921	 35D	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x3620002037CFFE40163000000F4001E010E01F8030A00000086000104000000
4922	 35E	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x3620002037CFFE40163000000F4001E010E01F8030A00000086000104000000
- stack 0: 0xF0
4923	 360	SHR		 	 
- stack 1: 0x774
- stack 0: 0x362
4924	 361	JUMP		 	 
- stack 0: 0x774
4925	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x774
4926	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x774
- stack 0: 0x774
4927	 364	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x3620002037CFFE40163000000F4001E010E01F8030A00000086000104000000
4928	 365	PUSH1	E0	 	 
- stack 2: 0x774
- stack 1: 0x3620002037CFFE40163000000F4001E010E01F8030A00000086000104000000
- stack 0: 0xE0
4929	 367	SHR		 	 
- stack 1: 0x774
- stack 0: 0x3620002
4930	 368	PUSH2	FFFF	 	 
- stack 2: 0x774
- stack 1: 0x3620002
- stack 0: 0xFFFF
4931	 36B	AND		 	 
- stack 1: 0x774
- stack 0: 0x2
4932	 36C	PUSH1	01	 	 
- stack 2: 0x774
- stack 1: 0x2
- stack 0: 0x1
4933	 36E	SIGNEXTEND		 	 
- stack 1: 0x774
- stack 0: 0x2
4934	 36F	PUSH2	00A0	 	 
- stack 2: 0x774
- stack 1: 0x2
- stack 0: 0xA0
4935	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x774
4936	 373	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
4937	 375	ADD		 	 
- stack 0: 0x778
4938	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
4939	 377	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x37CFFE40163000000F4001E010E01F8030A0000008600010400000000A00007
4940	 378	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x37CFFE40163000000F4001E010E01F8030A0000008600010400000000A00007
- stack 0: 0xF0
4941	 37A	SHR		 	 
- stack 1: 0x778
- stack 0: 0x37C
4942	 37B	JUMP		 	 
- stack 0: 0x778
4943	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x778
4944	 37D	PUSH2	0080	 	 
- stack 1: 0x778
- stack 0: 0x80
4945	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x778
- stack 0: 0x2
4946	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4947	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x778
- stack 0: 0x2
4948	 387	PUSH2	00A0	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0xA0
4949	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0x2
4950	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x778
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4951	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0x2
4952	 391	SUB		 	 
- stack 1: 0x778
- stack 0: 0x0
4953	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x778
- stack 1: 0x0
- stack 0: 0x39A
4954	 395	JUMPI		 	 
- stack 0: 0x778
4955	 396	PUSH2	03B4	 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 1: 0x778
- stack 0: 0x3B4
4956	 399	JUMP		 	 
- stack 0: 0x778
4957	 3B4	JUMPDEST		 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x778
4958	 3B5	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
4959	 3B7	ADD		 	 
- stack 0: 0x77C
4960	 3B8	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
4961	 3B9	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x163000000F4001E010E01F8030A0000008600010400000000A0000700BA0000
4962	 3BA	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x163000000F4001E010E01F8030A0000008600010400000000A0000700BA0000
- stack 0: 0xF0
4963	 3BC	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x163
4964	 3BD	JUMP		 	 
- stack 0: 0x77C
4965	 163	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x77C
4966	 164	PUSH4	80000000	 	 
- stack 1: 0x77C
- stack 0: 0x80000000
4967	 169	PUSH2	03A0	 	 
- stack 2: 0x77C
- stack 1: 0x80000000
- stack 0: 0x3A0
4968	 16C	MSTORE		 	  ;; # store to x29
- stack 0: 0x77C
4969	 16D	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
4970	 16F	ADD		 	 
- stack 0: 0x780
4971	 170	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
4972	 171	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xF4001E010E01F8030A0000008600010400000000A0000700BA000003430001
4973	 172	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0xF4001E010E01F8030A0000008600010400000000A0000700BA000003430001
- stack 0: 0xF0
4974	 174	SHR		 	 
- stack 1: 0x780
- stack 0: 0xF4
4975	 175	JUMP		 	 
- stack 0: 0x780
4976	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x780
4977	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x780
- stack 0: 0x780
4978	 F6	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xF4001E010E01F8030A0000008600010400000000A0000700BA000003430001
4979	 F7	PUSH1	E0	 	 
- stack 2: 0x780
- stack 1: 0xF4001E010E01F8030A0000008600010400000000A0000700BA000003430001
- stack 0: 0xE0
4980	 F9	SHR		 	 
- stack 1: 0x780
- stack 0: 0xF4001E
4981	 FA	PUSH2	FFFF	 	 
- stack 2: 0x780
- stack 1: 0xF4001E
- stack 0: 0xFFFF
4982	 FD	AND		 	 
- stack 1: 0x780
- stack 0: 0x1E
4983	 FE	PUSH1	01	 	 
- stack 2: 0x780
- stack 1: 0x1E
- stack 0: 0x1
4984	 100	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0x1E
4985	 101	PUSH2	0380	 	 
- stack 2: 0x780
- stack 1: 0x1E
- stack 0: 0x380
4986	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x780
4987	 105	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
4988	 107	ADD		 	 
- stack 0: 0x784
4989	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
4990	 109	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x10E01F8030A0000008600010400000000A0000700BA00000343000103620002
4991	 10A	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0x10E01F8030A0000008600010400000000A0000700BA00000343000103620002
- stack 0: 0xF0
4992	 10C	SHR		 	 
- stack 1: 0x784
- stack 0: 0x10E
4993	 10D	JUMP		 	 
- stack 0: 0x784
4994	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x784
4995	 10F	PUSH2	0060	 	 
- stack 1: 0x784
- stack 0: 0x60
4996	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x784
- stack 0: 0x80000000
4997	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x784
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
4998	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x784
- stack 0: 0x80000000
4999	 119	PUSH2	03A0	 	 
- stack 2: 0x784
- stack 1: 0x80000000
- stack 0: 0x3A0
5000	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x784
- stack 1: 0x80000000
- stack 0: 0x80000000
5001	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x784
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
5002	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x784
- stack 1: 0x80000000
- stack 0: 0x80000000
5003	 123	SUB		 	 
- stack 1: 0x784
- stack 0: 0x0
5004	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x784
- stack 1: 0x0
- stack 0: 0x12C
5005	 127	JUMPI		 	 
- stack 0: 0x784
5006	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x784
- stack 0: 0x146
5007	 12B	JUMP		 	 
- stack 0: 0x784
5008	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x784
5009	 147	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
5010	 149	ADD		 	 
- stack 0: 0x788
5011	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
5012	 14B	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x30A0000008600010400000000A0000700BA00000343000103620002037CFFE8
5013	 14C	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x30A0000008600010400000000A0000700BA00000343000103620002037CFFE8
- stack 0: 0xF0
5014	 14E	SHR		 	 
- stack 1: 0x788
- stack 0: 0x30A
5015	 14F	JUMP		 	 
- stack 0: 0x788
5016	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x788
5017	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x788
- stack 0: 0x788
5018	 30C	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x30A0000008600010400000000A0000700BA00000343000103620002037CFFE8
5019	 30D	PUSH1	E0	 	 
- stack 2: 0x788
- stack 1: 0x30A0000008600010400000000A0000700BA00000343000103620002037CFFE8
- stack 0: 0xE0
5020	 30F	SHR		 	 
- stack 1: 0x788
- stack 0: 0x30A0000
5021	 310	PUSH2	FFFF	 	 
- stack 2: 0x788
- stack 1: 0x30A0000
- stack 0: 0xFFFF
5022	 313	AND		 	 
- stack 1: 0x788
- stack 0: 0x0
5023	 314	PUSH1	01	 	 
- stack 2: 0x788
- stack 1: 0x0
- stack 0: 0x1
5024	 316	SIGNEXTEND		 	 
- stack 1: 0x788
- stack 0: 0x0
5025	 317	PUSH2	0080	 	 
- stack 2: 0x788
- stack 1: 0x0
- stack 0: 0x80
5026	 31A	MSTORE		 	  ;; # store to x4
- stack 0: 0x788
5027	 31B	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
5028	 31D	ADD		 	 
- stack 0: 0x78C
5029	 31E	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
5030	 31F	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x8600010400000000A0000700BA00000343000103620002037CFFE800DA0080
5031	 320	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x8600010400000000A0000700BA00000343000103620002037CFFE800DA0080
- stack 0: 0xF0
5032	 322	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x86
5033	 323	JUMP		 	 
- stack 0: 0x78C
5034	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x78C
5035	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
5036	 88	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x8600010400000000A0000700BA00000343000103620002037CFFE800DA0080
5037	 89	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0x8600010400000000A0000700BA00000343000103620002037CFFE800DA0080
- stack 0: 0xE0
5038	 8B	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x860001
5039	 8C	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0x860001
- stack 0: 0xFFFF
5040	 8F	AND		 	 
- stack 1: 0x78C
- stack 0: 0x1
5041	 90	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0x1
- stack 0: 0x1
5042	 92	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0x1
5043	 93	PUSH2	0020	 	 
- stack 2: 0x78C
- stack 1: 0x1
- stack 0: 0x20
5044	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x78C
5045	 97	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
5046	 99	ADD		 	 
- stack 0: 0x790
5047	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
5048	 9B	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x400000000A0000700BA00000343000103620002037CFFE800DA008000F4001F
5049	 9C	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x400000000A0000700BA00000343000103620002037CFFE800DA008000F4001F
- stack 0: 0xF0
5050	 9E	SHR		 	 
- stack 1: 0x790
- stack 0: 0x400
5051	 9F	JUMP		 	 
- stack 0: 0x790
5052	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x790
5053	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
5054	 402	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x400000000A0000700BA00000343000103620002037CFFE800DA008000F4001F
5055	 403	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0x400000000A0000700BA00000343000103620002037CFFE800DA008000F4001F
- stack 0: 0xE0
5056	 405	SHR		 	 
- stack 1: 0x790
- stack 0: 0x4000000
5057	 406	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0x4000000
- stack 0: 0xFFFF
5058	 409	AND		 	 
- stack 1: 0x790
- stack 0: 0x0
5059	 40A	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0x0
- stack 0: 0x1
5060	 40C	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0x0
5061	 40D	POP		 	 
- stack 0: 0x790
5062	 40E	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
5063	 410	ADD		 	 
- stack 0: 0x794
5064	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
5065	 412	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0xA0000700BA00000343000103620002037CFFE800DA008000F4001F010E01CC
5066	 413	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0xA0000700BA00000343000103620002037CFFE800DA008000F4001F010E01CC
- stack 0: 0xF0
5067	 415	SHR		 	 
- stack 1: 0x794
- stack 0: 0xA0
5068	 416	JUMP		 	 
- stack 0: 0x794
5069	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x794
5070	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x794
- stack 0: 0x794
5071	 A2	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0xA0000700BA00000343000103620002037CFFE800DA008000F4001F010E01CC
5072	 A3	PUSH1	E0	 	 
- stack 2: 0x794
- stack 1: 0xA0000700BA00000343000103620002037CFFE800DA008000F4001F010E01CC
- stack 0: 0xE0
5073	 A5	SHR		 	 
- stack 1: 0x794
- stack 0: 0xA00007
5074	 A6	PUSH2	FFFF	 	 
- stack 2: 0x794
- stack 1: 0xA00007
- stack 0: 0xFFFF
5075	 A9	AND		 	 
- stack 1: 0x794
- stack 0: 0x7
5076	 AA	PUSH1	01	 	 
- stack 2: 0x794
- stack 1: 0x7
- stack 0: 0x1
5077	 AC	SIGNEXTEND		 	 
- stack 1: 0x794
- stack 0: 0x7
5078	 AD	PUSH2	0040	 	 
- stack 2: 0x794
- stack 1: 0x7
- stack 0: 0x40
5079	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x794
5080	 B1	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
5081	 B3	ADD		 	 
- stack 0: 0x798
5082	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
5083	 B5	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0xBA00000343000103620002037CFFE800DA008000F4001F010E01CC030A0000
5084	 B6	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0xBA00000343000103620002037CFFE800DA008000F4001F010E01CC030A0000
- stack 0: 0xF0
5085	 B8	SHR		 	 
- stack 1: 0x798
- stack 0: 0xBA
5086	 B9	JUMP		 	 
- stack 0: 0x798
5087	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x798
5088	 BB	PUSH2	0020	 	 
- stack 1: 0x798
- stack 0: 0x20
5089	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x798
- stack 0: 0x1
5090	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5091	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x798
- stack 0: 0x1
5092	 C5	PUSH2	0040	 	 
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x40
5093	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x7
5094	 C9	PUSH1	1F	 	 
- stack 3: 0x798
- stack 2: 0x1
- stack 1: 0x7
- stack 0: 0x1F
5095	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x7
5096	 CC	SHL		 	 
- stack 1: 0x798
- stack 0: 0x80
5097	 CD	PUSH2	0060	 	 
- stack 2: 0x798
- stack 1: 0x80
- stack 0: 0x60
5098	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x798
5099	 D1	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
5100	 D3	ADD		 	 
- stack 0: 0x79C
5101	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
5102	 D5	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x343000103620002037CFFE800DA008000F4001F010E01CC030A000000860001
5103	 D6	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x343000103620002037CFFE800DA008000F4001F010E01CC030A000000860001
- stack 0: 0xF0
5104	 D8	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x343
5105	 D9	JUMP		 	 
- stack 0: 0x79C
5106	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x79C
5107	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
5108	 345	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x343000103620002037CFFE800DA008000F4001F010E01CC030A000000860001
5109	 346	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x343000103620002037CFFE800DA008000F4001F010E01CC030A000000860001
- stack 0: 0xE0
5110	 348	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x3430001
5111	 349	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x3430001
- stack 0: 0xFFFF
5112	 34C	AND		 	 
- stack 1: 0x79C
- stack 0: 0x1
5113	 34D	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x1
5114	 34F	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0x1
5115	 350	PUSH2	0080	 	 
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x80
5116	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x0
5117	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x79C
- stack 0: 0x1
5118	 355	PUSH2	0080	 	 
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x80
5119	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x79C
5120	 359	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
5121	 35B	ADD		 	 
- stack 0: 0x7A0
5122	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
5123	 35D	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x3620002037CFFE800DA008000F4001F010E01CC030A00000086000104000000
5124	 35E	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x3620002037CFFE800DA008000F4001F010E01CC030A00000086000104000000
- stack 0: 0xF0
5125	 360	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x362
5126	 361	JUMP		 	 
- stack 0: 0x7A0
5127	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7A0
5128	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
5129	 364	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x3620002037CFFE800DA008000F4001F010E01CC030A00000086000104000000
5130	 365	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0x3620002037CFFE800DA008000F4001F010E01CC030A00000086000104000000
- stack 0: 0xE0
5131	 367	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x3620002
5132	 368	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x3620002
- stack 0: 0xFFFF
5133	 36B	AND		 	 
- stack 1: 0x7A0
- stack 0: 0x2
5134	 36C	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0x1
5135	 36E	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x2
5136	 36F	PUSH2	00A0	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0xA0
5137	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x7A0
5138	 373	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
5139	 375	ADD		 	 
- stack 0: 0x7A4
5140	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
5141	 377	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x37CFFE800DA008000F4001F010E01CC030A0000008600010400000000A0000E
5142	 378	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x37CFFE800DA008000F4001F010E01CC030A0000008600010400000000A0000E
- stack 0: 0xF0
5143	 37A	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x37C
5144	 37B	JUMP		 	 
- stack 0: 0x7A4
5145	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7A4
5146	 37D	PUSH2	0080	 	 
- stack 1: 0x7A4
- stack 0: 0x80
5147	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x7A4
- stack 0: 0x1
5148	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5149	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A4
- stack 0: 0x1
5150	 387	PUSH2	00A0	 	 
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0xA0
5151	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x2
5152	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7A4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5153	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x2
5154	 391	SUB		 	 
- stack 1: 0x7A4
- stack 0: 0x1
5155	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x39A
5156	 395	JUMPI		 	 
- stack 0: 0x7A4
5157	 39A	JUMPDEST		 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x7A4
5158	 39B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A4
- stack 0: 0x7A4
5159	 39C	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x37CFFE800DA008000F4001F010E01CC030A0000008600010400000000A0000E
5160	 39D	PUSH1	E0	 	 
- stack 2: 0x7A4
- stack 1: 0x37CFFE800DA008000F4001F010E01CC030A0000008600010400000000A0000E
- stack 0: 0xE0
5161	 39F	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x37CFFE8
5162	 3A0	PUSH2	FFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x37CFFE8
- stack 0: 0xFFFF
5163	 3A3	AND		 	 
- stack 1: 0x7A4
- stack 0: 0xFFE8
5164	 3A4	PUSH1	01	 	 
- stack 2: 0x7A4
- stack 1: 0xFFE8
- stack 0: 0x1
5165	 3A6	SIGNEXTEND		 	 
- stack 1: 0x7A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
5166	 3A7	ADD		 	 
- stack 0: 0x78C
5167	 3A8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x78C
- stack 0: 0xFFFFFFFF
5168	 3AD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x78C
5169	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
5170	 3AF	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x8600010400000000A0000700BA00000343000103620002037CFFE800DA0080
5171	 3B0	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x8600010400000000A0000700BA00000343000103620002037CFFE800DA0080
- stack 0: 0xF0
5172	 3B2	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x86
5173	 3B3	JUMP		 	 
- stack 0: 0x78C
5174	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x78C
5175	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
5176	 88	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x8600010400000000A0000700BA00000343000103620002037CFFE800DA0080
5177	 89	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0x8600010400000000A0000700BA00000343000103620002037CFFE800DA0080
- stack 0: 0xE0
5178	 8B	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x860001
5179	 8C	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0x860001
- stack 0: 0xFFFF
5180	 8F	AND		 	 
- stack 1: 0x78C
- stack 0: 0x1
5181	 90	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0x1
- stack 0: 0x1
5182	 92	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0x1
5183	 93	PUSH2	0020	 	 
- stack 2: 0x78C
- stack 1: 0x1
- stack 0: 0x20
5184	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x78C
5185	 97	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
5186	 99	ADD		 	 
- stack 0: 0x790
5187	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
5188	 9B	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x400000000A0000700BA00000343000103620002037CFFE800DA008000F4001F
5189	 9C	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x400000000A0000700BA00000343000103620002037CFFE800DA008000F4001F
- stack 0: 0xF0
5190	 9E	SHR		 	 
- stack 1: 0x790
- stack 0: 0x400
5191	 9F	JUMP		 	 
- stack 0: 0x790
5192	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x790
5193	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
5194	 402	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x400000000A0000700BA00000343000103620002037CFFE800DA008000F4001F
5195	 403	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0x400000000A0000700BA00000343000103620002037CFFE800DA008000F4001F
- stack 0: 0xE0
5196	 405	SHR		 	 
- stack 1: 0x790
- stack 0: 0x4000000
5197	 406	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0x4000000
- stack 0: 0xFFFF
5198	 409	AND		 	 
- stack 1: 0x790
- stack 0: 0x0
5199	 40A	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0x0
- stack 0: 0x1
5200	 40C	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0x0
5201	 40D	POP		 	 
- stack 0: 0x790
5202	 40E	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
5203	 410	ADD		 	 
- stack 0: 0x794
5204	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
5205	 412	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0xA0000700BA00000343000103620002037CFFE800DA008000F4001F010E01CC
5206	 413	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0xA0000700BA00000343000103620002037CFFE800DA008000F4001F010E01CC
- stack 0: 0xF0
5207	 415	SHR		 	 
- stack 1: 0x794
- stack 0: 0xA0
5208	 416	JUMP		 	 
- stack 0: 0x794
5209	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x794
5210	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x794
- stack 0: 0x794
5211	 A2	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0xA0000700BA00000343000103620002037CFFE800DA008000F4001F010E01CC
5212	 A3	PUSH1	E0	 	 
- stack 2: 0x794
- stack 1: 0xA0000700BA00000343000103620002037CFFE800DA008000F4001F010E01CC
- stack 0: 0xE0
5213	 A5	SHR		 	 
- stack 1: 0x794
- stack 0: 0xA00007
5214	 A6	PUSH2	FFFF	 	 
- stack 2: 0x794
- stack 1: 0xA00007
- stack 0: 0xFFFF
5215	 A9	AND		 	 
- stack 1: 0x794
- stack 0: 0x7
5216	 AA	PUSH1	01	 	 
- stack 2: 0x794
- stack 1: 0x7
- stack 0: 0x1
5217	 AC	SIGNEXTEND		 	 
- stack 1: 0x794
- stack 0: 0x7
5218	 AD	PUSH2	0040	 	 
- stack 2: 0x794
- stack 1: 0x7
- stack 0: 0x40
5219	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x794
5220	 B1	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
5221	 B3	ADD		 	 
- stack 0: 0x798
5222	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
5223	 B5	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0xBA00000343000103620002037CFFE800DA008000F4001F010E01CC030A0000
5224	 B6	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0xBA00000343000103620002037CFFE800DA008000F4001F010E01CC030A0000
- stack 0: 0xF0
5225	 B8	SHR		 	 
- stack 1: 0x798
- stack 0: 0xBA
5226	 B9	JUMP		 	 
- stack 0: 0x798
5227	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x798
5228	 BB	PUSH2	0020	 	 
- stack 1: 0x798
- stack 0: 0x20
5229	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x798
- stack 0: 0x1
5230	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5231	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x798
- stack 0: 0x1
5232	 C5	PUSH2	0040	 	 
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x40
5233	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x7
5234	 C9	PUSH1	1F	 	 
- stack 3: 0x798
- stack 2: 0x1
- stack 1: 0x7
- stack 0: 0x1F
5235	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x7
5236	 CC	SHL		 	 
- stack 1: 0x798
- stack 0: 0x80
5237	 CD	PUSH2	0060	 	 
- stack 2: 0x798
- stack 1: 0x80
- stack 0: 0x60
5238	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x798
5239	 D1	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
5240	 D3	ADD		 	 
- stack 0: 0x79C
5241	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
5242	 D5	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x343000103620002037CFFE800DA008000F4001F010E01CC030A000000860001
5243	 D6	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x343000103620002037CFFE800DA008000F4001F010E01CC030A000000860001
- stack 0: 0xF0
5244	 D8	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x343
5245	 D9	JUMP		 	 
- stack 0: 0x79C
5246	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x79C
5247	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
5248	 345	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x343000103620002037CFFE800DA008000F4001F010E01CC030A000000860001
5249	 346	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x343000103620002037CFFE800DA008000F4001F010E01CC030A000000860001
- stack 0: 0xE0
5250	 348	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x3430001
5251	 349	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x3430001
- stack 0: 0xFFFF
5252	 34C	AND		 	 
- stack 1: 0x79C
- stack 0: 0x1
5253	 34D	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x1
5254	 34F	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0x1
5255	 350	PUSH2	0080	 	 
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x80
5256	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x79C
- stack 1: 0x1
- stack 0: 0x1
5257	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x79C
- stack 0: 0x2
5258	 355	PUSH2	0080	 	 
- stack 2: 0x79C
- stack 1: 0x2
- stack 0: 0x80
5259	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x79C
5260	 359	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
5261	 35B	ADD		 	 
- stack 0: 0x7A0
5262	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
5263	 35D	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x3620002037CFFE800DA008000F4001F010E01CC030A00000086000104000000
5264	 35E	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x3620002037CFFE800DA008000F4001F010E01CC030A00000086000104000000
- stack 0: 0xF0
5265	 360	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x362
5266	 361	JUMP		 	 
- stack 0: 0x7A0
5267	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7A0
5268	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
5269	 364	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x3620002037CFFE800DA008000F4001F010E01CC030A00000086000104000000
5270	 365	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0x3620002037CFFE800DA008000F4001F010E01CC030A00000086000104000000
- stack 0: 0xE0
5271	 367	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x3620002
5272	 368	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x3620002
- stack 0: 0xFFFF
5273	 36B	AND		 	 
- stack 1: 0x7A0
- stack 0: 0x2
5274	 36C	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0x1
5275	 36E	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x2
5276	 36F	PUSH2	00A0	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0xA0
5277	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x7A0
5278	 373	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
5279	 375	ADD		 	 
- stack 0: 0x7A4
5280	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
5281	 377	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x37CFFE800DA008000F4001F010E01CC030A0000008600010400000000A0000E
5282	 378	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x37CFFE800DA008000F4001F010E01CC030A0000008600010400000000A0000E
- stack 0: 0xF0
5283	 37A	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x37C
5284	 37B	JUMP		 	 
- stack 0: 0x7A4
5285	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7A4
5286	 37D	PUSH2	0080	 	 
- stack 1: 0x7A4
- stack 0: 0x80
5287	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x7A4
- stack 0: 0x2
5288	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5289	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A4
- stack 0: 0x2
5290	 387	PUSH2	00A0	 	 
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0xA0
5291	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0x2
5292	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7A4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5293	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0x2
5294	 391	SUB		 	 
- stack 1: 0x7A4
- stack 0: 0x0
5295	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x7A4
- stack 1: 0x0
- stack 0: 0x39A
5296	 395	JUMPI		 	 
- stack 0: 0x7A4
5297	 396	PUSH2	03B4	 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 1: 0x7A4
- stack 0: 0x3B4
5298	 399	JUMP		 	 
- stack 0: 0x7A4
5299	 3B4	JUMPDEST		 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x7A4
5300	 3B5	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
5301	 3B7	ADD		 	 
- stack 0: 0x7A8
5302	 3B8	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
5303	 3B9	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0xDA008000F4001F010E01CC030A0000008600010400000000A0000E04000000
5304	 3BA	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0xDA008000F4001F010E01CC030A0000008600010400000000A0000E04000000
- stack 0: 0xF0
5305	 3BC	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0xDA
5306	 3BD	JUMP		 	 
- stack 0: 0x7A8
5307	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x7A8
5308	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A8
- stack 0: 0x7A8
5309	 DC	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0xDA008000F4001F010E01CC030A0000008600010400000000A0000E04000000
5310	 DD	PUSH1	E0	 	 
- stack 2: 0x7A8
- stack 1: 0xDA008000F4001F010E01CC030A0000008600010400000000A0000E04000000
- stack 0: 0xE0
5311	 DF	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0xDA0080
5312	 E0	PUSH2	FFFF	 	 
- stack 2: 0x7A8
- stack 1: 0xDA0080
- stack 0: 0xFFFF
5313	 E3	AND		 	 
- stack 1: 0x7A8
- stack 0: 0x80
5314	 E4	PUSH1	01	 	 
- stack 2: 0x7A8
- stack 1: 0x80
- stack 0: 0x1
5315	 E6	SIGNEXTEND		 	 
- stack 1: 0x7A8
- stack 0: 0x80
5316	 E7	PUSH2	03A0	 	 
- stack 2: 0x7A8
- stack 1: 0x80
- stack 0: 0x3A0
5317	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x7A8
5318	 EB	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
5319	 ED	ADD		 	 
- stack 0: 0x7AC
5320	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
5321	 EF	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0xF4001F010E01CC030A0000008600010400000000A0000E0400000000BA0000
5322	 F0	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0xF4001F010E01CC030A0000008600010400000000A0000E0400000000BA0000
- stack 0: 0xF0
5323	 F2	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0xF4
5324	 F3	JUMP		 	 
- stack 0: 0x7AC
5325	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7AC
5326	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7AC
- stack 0: 0x7AC
5327	 F6	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0xF4001F010E01CC030A0000008600010400000000A0000E0400000000BA0000
5328	 F7	PUSH1	E0	 	 
- stack 2: 0x7AC
- stack 1: 0xF4001F010E01CC030A0000008600010400000000A0000E0400000000BA0000
- stack 0: 0xE0
5329	 F9	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0xF4001F
5330	 FA	PUSH2	FFFF	 	 
- stack 2: 0x7AC
- stack 1: 0xF4001F
- stack 0: 0xFFFF
5331	 FD	AND		 	 
- stack 1: 0x7AC
- stack 0: 0x1F
5332	 FE	PUSH1	01	 	 
- stack 2: 0x7AC
- stack 1: 0x1F
- stack 0: 0x1
5333	 100	SIGNEXTEND		 	 
- stack 1: 0x7AC
- stack 0: 0x1F
5334	 101	PUSH2	0380	 	 
- stack 2: 0x7AC
- stack 1: 0x1F
- stack 0: 0x380
5335	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x7AC
5336	 105	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
5337	 107	ADD		 	 
- stack 0: 0x7B0
5338	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
5339	 109	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x10E01CC030A0000008600010400000000A0000E0400000000BA000003430001
5340	 10A	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x10E01CC030A0000008600010400000000A0000E0400000000BA000003430001
- stack 0: 0xF0
5341	 10C	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x10E
5342	 10D	JUMP		 	 
- stack 0: 0x7B0
5343	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x7B0
5344	 10F	PUSH2	0060	 	 
- stack 1: 0x7B0
- stack 0: 0x60
5345	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x7B0
- stack 0: 0x80
5346	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B0
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
5347	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B0
- stack 0: 0x80
5348	 119	PUSH2	03A0	 	 
- stack 2: 0x7B0
- stack 1: 0x80
- stack 0: 0x3A0
5349	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x7B0
- stack 1: 0x80
- stack 0: 0x80
5350	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7B0
- stack 2: 0x80
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
5351	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7B0
- stack 1: 0x80
- stack 0: 0x80
5352	 123	SUB		 	 
- stack 1: 0x7B0
- stack 0: 0x0
5353	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x7B0
- stack 1: 0x0
- stack 0: 0x12C
5354	 127	JUMPI		 	 
- stack 0: 0x7B0
5355	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x7B0
- stack 0: 0x146
5356	 12B	JUMP		 	 
- stack 0: 0x7B0
5357	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x7B0
5358	 147	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
5359	 149	ADD		 	 
- stack 0: 0x7B4
5360	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
5361	 14B	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x30A0000008600010400000000A0000E0400000000BA00000343000103620002
5362	 14C	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0x30A0000008600010400000000A0000E0400000000BA00000343000103620002
- stack 0: 0xF0
5363	 14E	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x30A
5364	 14F	JUMP		 	 
- stack 0: 0x7B4
5365	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7B4
5366	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B4
- stack 0: 0x7B4
5367	 30C	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x30A0000008600010400000000A0000E0400000000BA00000343000103620002
5368	 30D	PUSH1	E0	 	 
- stack 2: 0x7B4
- stack 1: 0x30A0000008600010400000000A0000E0400000000BA00000343000103620002
- stack 0: 0xE0
5369	 30F	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x30A0000
5370	 310	PUSH2	FFFF	 	 
- stack 2: 0x7B4
- stack 1: 0x30A0000
- stack 0: 0xFFFF
5371	 313	AND		 	 
- stack 1: 0x7B4
- stack 0: 0x0
5372	 314	PUSH1	01	 	 
- stack 2: 0x7B4
- stack 1: 0x0
- stack 0: 0x1
5373	 316	SIGNEXTEND		 	 
- stack 1: 0x7B4
- stack 0: 0x0
5374	 317	PUSH2	0080	 	 
- stack 2: 0x7B4
- stack 1: 0x0
- stack 0: 0x80
5375	 31A	MSTORE		 	  ;; # store to x4
- stack 0: 0x7B4
5376	 31B	PUSH1	04	 	 
- stack 1: 0x7B4
- stack 0: 0x4
5377	 31D	ADD		 	 
- stack 0: 0x7B8
5378	 31E	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
5379	 31F	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x8600010400000000A0000E0400000000BA00000343000103620002037CFFE4
5380	 320	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0x8600010400000000A0000E0400000000BA00000343000103620002037CFFE4
- stack 0: 0xF0
5381	 322	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x86
5382	 323	JUMP		 	 
- stack 0: 0x7B8
5383	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x7B8
5384	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B8
- stack 0: 0x7B8
5385	 88	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x8600010400000000A0000E0400000000BA00000343000103620002037CFFE4
5386	 89	PUSH1	E0	 	 
- stack 2: 0x7B8
- stack 1: 0x8600010400000000A0000E0400000000BA00000343000103620002037CFFE4
- stack 0: 0xE0
5387	 8B	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x860001
5388	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7B8
- stack 1: 0x860001
- stack 0: 0xFFFF
5389	 8F	AND		 	 
- stack 1: 0x7B8
- stack 0: 0x1
5390	 90	PUSH1	01	 	 
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0x1
5391	 92	SIGNEXTEND		 	 
- stack 1: 0x7B8
- stack 0: 0x1
5392	 93	PUSH2	0020	 	 
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0x20
5393	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7B8
5394	 97	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
5395	 99	ADD		 	 
- stack 0: 0x7BC
5396	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
5397	 9B	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x400000000A0000E0400000000BA00000343000103620002037CFFE401500004
5398	 9C	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0x400000000A0000E0400000000BA00000343000103620002037CFFE401500004
- stack 0: 0xF0
5399	 9E	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x400
5400	 9F	JUMP		 	 
- stack 0: 0x7BC
5401	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7BC
5402	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7BC
- stack 0: 0x7BC
5403	 402	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x400000000A0000E0400000000BA00000343000103620002037CFFE401500004
5404	 403	PUSH1	E0	 	 
- stack 2: 0x7BC
- stack 1: 0x400000000A0000E0400000000BA00000343000103620002037CFFE401500004
- stack 0: 0xE0
5405	 405	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x4000000
5406	 406	PUSH2	FFFF	 	 
- stack 2: 0x7BC
- stack 1: 0x4000000
- stack 0: 0xFFFF
5407	 409	AND		 	 
- stack 1: 0x7BC
- stack 0: 0x0
5408	 40A	PUSH1	01	 	 
- stack 2: 0x7BC
- stack 1: 0x0
- stack 0: 0x1
5409	 40C	SIGNEXTEND		 	 
- stack 1: 0x7BC
- stack 0: 0x0
5410	 40D	POP		 	 
- stack 0: 0x7BC
5411	 40E	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
5412	 410	ADD		 	 
- stack 0: 0x7C0
5413	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
5414	 412	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0xA0000E0400000000BA00000343000103620002037CFFE40150000400F40020
5415	 413	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0xA0000E0400000000BA00000343000103620002037CFFE40150000400F40020
- stack 0: 0xF0
5416	 415	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0xA0
5417	 416	JUMP		 	 
- stack 0: 0x7C0
5418	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7C0
5419	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
5420	 A2	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0xA0000E0400000000BA00000343000103620002037CFFE40150000400F40020
5421	 A3	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0xA0000E0400000000BA00000343000103620002037CFFE40150000400F40020
- stack 0: 0xE0
5422	 A5	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0xA0000E
5423	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0xA0000E
- stack 0: 0xFFFF
5424	 A9	AND		 	 
- stack 1: 0x7C0
- stack 0: 0xE
5425	 AA	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0xE
- stack 0: 0x1
5426	 AC	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0xE
5427	 AD	PUSH2	0040	 	 
- stack 2: 0x7C0
- stack 1: 0xE
- stack 0: 0x40
5428	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7C0
5429	 B1	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
5430	 B3	ADD		 	 
- stack 0: 0x7C4
5431	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
5432	 B5	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x400000000BA00000343000103620002037CFFE40150000400F40020010E019C
5433	 B6	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x400000000BA00000343000103620002037CFFE40150000400F40020010E019C
- stack 0: 0xF0
5434	 B8	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x400
5435	 B9	JUMP		 	 
- stack 0: 0x7C4
5436	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C4
5437	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C4
- stack 0: 0x7C4
5438	 402	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x400000000BA00000343000103620002037CFFE40150000400F40020010E019C
5439	 403	PUSH1	E0	 	 
- stack 2: 0x7C4
- stack 1: 0x400000000BA00000343000103620002037CFFE40150000400F40020010E019C
- stack 0: 0xE0
5440	 405	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x4000000
5441	 406	PUSH2	FFFF	 	 
- stack 2: 0x7C4
- stack 1: 0x4000000
- stack 0: 0xFFFF
5442	 409	AND		 	 
- stack 1: 0x7C4
- stack 0: 0x0
5443	 40A	PUSH1	01	 	 
- stack 2: 0x7C4
- stack 1: 0x0
- stack 0: 0x1
5444	 40C	SIGNEXTEND		 	 
- stack 1: 0x7C4
- stack 0: 0x0
5445	 40D	POP		 	 
- stack 0: 0x7C4
5446	 40E	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
5447	 410	ADD		 	 
- stack 0: 0x7C8
5448	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
5449	 412	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0xBA00000343000103620002037CFFE40150000400F40020010E019C030A0000
5450	 413	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0xBA00000343000103620002037CFFE40150000400F40020010E019C030A0000
- stack 0: 0xF0
5451	 415	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0xBA
5452	 416	JUMP		 	 
- stack 0: 0x7C8
5453	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x7C8
5454	 BB	PUSH2	0020	 	 
- stack 1: 0x7C8
- stack 0: 0x20
5455	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x7C8
- stack 0: 0x1
5456	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5457	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7C8
- stack 0: 0x1
5458	 C5	PUSH2	0040	 	 
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x40
5459	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0xE
5460	 C9	PUSH1	1F	 	 
- stack 3: 0x7C8
- stack 2: 0x1
- stack 1: 0xE
- stack 0: 0x1F
5461	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0xE
5462	 CC	SHL		 	 
- stack 1: 0x7C8
- stack 0: 0x4000
5463	 CD	PUSH2	0060	 	 
- stack 2: 0x7C8
- stack 1: 0x4000
- stack 0: 0x60
5464	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x7C8
5465	 D1	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
5466	 D3	ADD		 	 
- stack 0: 0x7CC
5467	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
5468	 D5	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x343000103620002037CFFE40150000400F40020010E019C030A000000860001
5469	 D6	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x343000103620002037CFFE40150000400F40020010E019C030A000000860001
- stack 0: 0xF0
5470	 D8	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x343
5471	 D9	JUMP		 	 
- stack 0: 0x7CC
5472	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7CC
5473	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
5474	 345	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x343000103620002037CFFE40150000400F40020010E019C030A000000860001
5475	 346	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x343000103620002037CFFE40150000400F40020010E019C030A000000860001
- stack 0: 0xE0
5476	 348	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x3430001
5477	 349	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x3430001
- stack 0: 0xFFFF
5478	 34C	AND		 	 
- stack 1: 0x7CC
- stack 0: 0x1
5479	 34D	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x1
5480	 34F	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0x1
5481	 350	PUSH2	0080	 	 
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x80
5482	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x0
5483	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x7CC
- stack 0: 0x1
5484	 355	PUSH2	0080	 	 
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x80
5485	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x7CC
5486	 359	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
5487	 35B	ADD		 	 
- stack 0: 0x7D0
5488	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
5489	 35D	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3620002037CFFE40150000400F40020010E019C030A00000086000104000000
5490	 35E	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x3620002037CFFE40150000400F40020010E019C030A00000086000104000000
- stack 0: 0xF0
5491	 360	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x362
5492	 361	JUMP		 	 
- stack 0: 0x7D0
5493	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7D0
5494	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
5495	 364	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3620002037CFFE40150000400F40020010E019C030A00000086000104000000
5496	 365	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x3620002037CFFE40150000400F40020010E019C030A00000086000104000000
- stack 0: 0xE0
5497	 367	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3620002
5498	 368	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x3620002
- stack 0: 0xFFFF
5499	 36B	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x2
5500	 36C	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0x1
5501	 36E	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x2
5502	 36F	PUSH2	00A0	 	 
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0xA0
5503	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x7D0
5504	 373	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
5505	 375	ADD		 	 
- stack 0: 0x7D4
5506	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
5507	 377	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x37CFFE40150000400F40020010E019C030A0000008600010400000004000000
5508	 378	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x37CFFE40150000400F40020010E019C030A0000008600010400000004000000
- stack 0: 0xF0
5509	 37A	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x37C
5510	 37B	JUMP		 	 
- stack 0: 0x7D4
5511	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7D4
5512	 37D	PUSH2	0080	 	 
- stack 1: 0x7D4
- stack 0: 0x80
5513	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x7D4
- stack 0: 0x1
5514	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5515	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D4
- stack 0: 0x1
5516	 387	PUSH2	00A0	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0xA0
5517	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x2
5518	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5519	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x2
5520	 391	SUB		 	 
- stack 1: 0x7D4
- stack 0: 0x1
5521	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x39A
5522	 395	JUMPI		 	 
- stack 0: 0x7D4
5523	 39A	JUMPDEST		 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x7D4
5524	 39B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
5525	 39C	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x37CFFE40150000400F40020010E019C030A0000008600010400000004000000
5526	 39D	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0x37CFFE40150000400F40020010E019C030A0000008600010400000004000000
- stack 0: 0xE0
5527	 39F	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x37CFFE4
5528	 3A0	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x37CFFE4
- stack 0: 0xFFFF
5529	 3A3	AND		 	 
- stack 1: 0x7D4
- stack 0: 0xFFE4
5530	 3A4	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0xFFE4
- stack 0: 0x1
5531	 3A6	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
5532	 3A7	ADD		 	 
- stack 0: 0x7B8
5533	 3A8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7B8
- stack 0: 0xFFFFFFFF
5534	 3AD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7B8
5535	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
5536	 3AF	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x8600010400000000A0000E0400000000BA00000343000103620002037CFFE4
5537	 3B0	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0x8600010400000000A0000E0400000000BA00000343000103620002037CFFE4
- stack 0: 0xF0
5538	 3B2	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x86
5539	 3B3	JUMP		 	 
- stack 0: 0x7B8
5540	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x7B8
5541	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B8
- stack 0: 0x7B8
5542	 88	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x8600010400000000A0000E0400000000BA00000343000103620002037CFFE4
5543	 89	PUSH1	E0	 	 
- stack 2: 0x7B8
- stack 1: 0x8600010400000000A0000E0400000000BA00000343000103620002037CFFE4
- stack 0: 0xE0
5544	 8B	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x860001
5545	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7B8
- stack 1: 0x860001
- stack 0: 0xFFFF
5546	 8F	AND		 	 
- stack 1: 0x7B8
- stack 0: 0x1
5547	 90	PUSH1	01	 	 
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0x1
5548	 92	SIGNEXTEND		 	 
- stack 1: 0x7B8
- stack 0: 0x1
5549	 93	PUSH2	0020	 	 
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0x20
5550	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7B8
5551	 97	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
5552	 99	ADD		 	 
- stack 0: 0x7BC
5553	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
5554	 9B	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x400000000A0000E0400000000BA00000343000103620002037CFFE401500004
5555	 9C	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0x400000000A0000E0400000000BA00000343000103620002037CFFE401500004
- stack 0: 0xF0
5556	 9E	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x400
5557	 9F	JUMP		 	 
- stack 0: 0x7BC
5558	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7BC
5559	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7BC
- stack 0: 0x7BC
5560	 402	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x400000000A0000E0400000000BA00000343000103620002037CFFE401500004
5561	 403	PUSH1	E0	 	 
- stack 2: 0x7BC
- stack 1: 0x400000000A0000E0400000000BA00000343000103620002037CFFE401500004
- stack 0: 0xE0
5562	 405	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x4000000
5563	 406	PUSH2	FFFF	 	 
- stack 2: 0x7BC
- stack 1: 0x4000000
- stack 0: 0xFFFF
5564	 409	AND		 	 
- stack 1: 0x7BC
- stack 0: 0x0
5565	 40A	PUSH1	01	 	 
- stack 2: 0x7BC
- stack 1: 0x0
- stack 0: 0x1
5566	 40C	SIGNEXTEND		 	 
- stack 1: 0x7BC
- stack 0: 0x0
5567	 40D	POP		 	 
- stack 0: 0x7BC
5568	 40E	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
5569	 410	ADD		 	 
- stack 0: 0x7C0
5570	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
5571	 412	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0xA0000E0400000000BA00000343000103620002037CFFE40150000400F40020
5572	 413	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0xA0000E0400000000BA00000343000103620002037CFFE40150000400F40020
- stack 0: 0xF0
5573	 415	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0xA0
5574	 416	JUMP		 	 
- stack 0: 0x7C0
5575	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7C0
5576	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
5577	 A2	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0xA0000E0400000000BA00000343000103620002037CFFE40150000400F40020
5578	 A3	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0xA0000E0400000000BA00000343000103620002037CFFE40150000400F40020
- stack 0: 0xE0
5579	 A5	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0xA0000E
5580	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0xA0000E
- stack 0: 0xFFFF
5581	 A9	AND		 	 
- stack 1: 0x7C0
- stack 0: 0xE
5582	 AA	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0xE
- stack 0: 0x1
5583	 AC	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0xE
5584	 AD	PUSH2	0040	 	 
- stack 2: 0x7C0
- stack 1: 0xE
- stack 0: 0x40
5585	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7C0
5586	 B1	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
5587	 B3	ADD		 	 
- stack 0: 0x7C4
5588	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
5589	 B5	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x400000000BA00000343000103620002037CFFE40150000400F40020010E019C
5590	 B6	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x400000000BA00000343000103620002037CFFE40150000400F40020010E019C
- stack 0: 0xF0
5591	 B8	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x400
5592	 B9	JUMP		 	 
- stack 0: 0x7C4
5593	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C4
5594	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C4
- stack 0: 0x7C4
5595	 402	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x400000000BA00000343000103620002037CFFE40150000400F40020010E019C
5596	 403	PUSH1	E0	 	 
- stack 2: 0x7C4
- stack 1: 0x400000000BA00000343000103620002037CFFE40150000400F40020010E019C
- stack 0: 0xE0
5597	 405	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x4000000
5598	 406	PUSH2	FFFF	 	 
- stack 2: 0x7C4
- stack 1: 0x4000000
- stack 0: 0xFFFF
5599	 409	AND		 	 
- stack 1: 0x7C4
- stack 0: 0x0
5600	 40A	PUSH1	01	 	 
- stack 2: 0x7C4
- stack 1: 0x0
- stack 0: 0x1
5601	 40C	SIGNEXTEND		 	 
- stack 1: 0x7C4
- stack 0: 0x0
5602	 40D	POP		 	 
- stack 0: 0x7C4
5603	 40E	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
5604	 410	ADD		 	 
- stack 0: 0x7C8
5605	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
5606	 412	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0xBA00000343000103620002037CFFE40150000400F40020010E019C030A0000
5607	 413	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0xBA00000343000103620002037CFFE40150000400F40020010E019C030A0000
- stack 0: 0xF0
5608	 415	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0xBA
5609	 416	JUMP		 	 
- stack 0: 0x7C8
5610	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x7C8
5611	 BB	PUSH2	0020	 	 
- stack 1: 0x7C8
- stack 0: 0x20
5612	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x7C8
- stack 0: 0x1
5613	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5614	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7C8
- stack 0: 0x1
5615	 C5	PUSH2	0040	 	 
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x40
5616	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0xE
5617	 C9	PUSH1	1F	 	 
- stack 3: 0x7C8
- stack 2: 0x1
- stack 1: 0xE
- stack 0: 0x1F
5618	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0xE
5619	 CC	SHL		 	 
- stack 1: 0x7C8
- stack 0: 0x4000
5620	 CD	PUSH2	0060	 	 
- stack 2: 0x7C8
- stack 1: 0x4000
- stack 0: 0x60
5621	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x7C8
5622	 D1	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
5623	 D3	ADD		 	 
- stack 0: 0x7CC
5624	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
5625	 D5	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x343000103620002037CFFE40150000400F40020010E019C030A000000860001
5626	 D6	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x343000103620002037CFFE40150000400F40020010E019C030A000000860001
- stack 0: 0xF0
5627	 D8	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x343
5628	 D9	JUMP		 	 
- stack 0: 0x7CC
5629	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7CC
5630	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
5631	 345	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x343000103620002037CFFE40150000400F40020010E019C030A000000860001
5632	 346	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x343000103620002037CFFE40150000400F40020010E019C030A000000860001
- stack 0: 0xE0
5633	 348	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x3430001
5634	 349	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x3430001
- stack 0: 0xFFFF
5635	 34C	AND		 	 
- stack 1: 0x7CC
- stack 0: 0x1
5636	 34D	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x1
5637	 34F	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0x1
5638	 350	PUSH2	0080	 	 
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x80
5639	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x1
5640	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x7CC
- stack 0: 0x2
5641	 355	PUSH2	0080	 	 
- stack 2: 0x7CC
- stack 1: 0x2
- stack 0: 0x80
5642	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x7CC
5643	 359	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
5644	 35B	ADD		 	 
- stack 0: 0x7D0
5645	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
5646	 35D	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3620002037CFFE40150000400F40020010E019C030A00000086000104000000
5647	 35E	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x3620002037CFFE40150000400F40020010E019C030A00000086000104000000
- stack 0: 0xF0
5648	 360	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x362
5649	 361	JUMP		 	 
- stack 0: 0x7D0
5650	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7D0
5651	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
5652	 364	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3620002037CFFE40150000400F40020010E019C030A00000086000104000000
5653	 365	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x3620002037CFFE40150000400F40020010E019C030A00000086000104000000
- stack 0: 0xE0
5654	 367	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3620002
5655	 368	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x3620002
- stack 0: 0xFFFF
5656	 36B	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x2
5657	 36C	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0x1
5658	 36E	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x2
5659	 36F	PUSH2	00A0	 	 
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0xA0
5660	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x7D0
5661	 373	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
5662	 375	ADD		 	 
- stack 0: 0x7D4
5663	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
5664	 377	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x37CFFE40150000400F40020010E019C030A0000008600010400000004000000
5665	 378	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x37CFFE40150000400F40020010E019C030A0000008600010400000004000000
- stack 0: 0xF0
5666	 37A	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x37C
5667	 37B	JUMP		 	 
- stack 0: 0x7D4
5668	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7D4
5669	 37D	PUSH2	0080	 	 
- stack 1: 0x7D4
- stack 0: 0x80
5670	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x7D4
- stack 0: 0x2
5671	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5672	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D4
- stack 0: 0x2
5673	 387	PUSH2	00A0	 	 
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0xA0
5674	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0x2
5675	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7D4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5676	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0x2
5677	 391	SUB		 	 
- stack 1: 0x7D4
- stack 0: 0x0
5678	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x7D4
- stack 1: 0x0
- stack 0: 0x39A
5679	 395	JUMPI		 	 
- stack 0: 0x7D4
5680	 396	PUSH2	03B4	 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 1: 0x7D4
- stack 0: 0x3B4
5681	 399	JUMP		 	 
- stack 0: 0x7D4
5682	 3B4	JUMPDEST		 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x7D4
5683	 3B5	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
5684	 3B7	ADD		 	 
- stack 0: 0x7D8
5685	 3B8	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
5686	 3B9	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x150000400F40020010E019C030A000000860001040000000400000000A0001F
5687	 3BA	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x150000400F40020010E019C030A000000860001040000000400000000A0001F
- stack 0: 0xF0
5688	 3BC	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x150
5689	 3BD	JUMP		 	 
- stack 0: 0x7D8
5690	 150	JUMPDEST		 ;; __riscvimpl_LUI_4eb7	  ;; # instr: lui t4,0x4(ignore imm)
- stack 0: 0x7D8
5691	 151	PUSH4	00004000	 	 
- stack 1: 0x7D8
- stack 0: 0x4000
5692	 156	PUSH2	03A0	 	 
- stack 2: 0x7D8
- stack 1: 0x4000
- stack 0: 0x3A0
5693	 159	MSTORE		 	  ;; # store to x29
- stack 0: 0x7D8
5694	 15A	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
5695	 15C	ADD		 	 
- stack 0: 0x7DC
5696	 15D	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
5697	 15E	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0xF40020010E019C030A000000860001040000000400000000A0001F00BA0000
5698	 15F	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0xF40020010E019C030A000000860001040000000400000000A0001F00BA0000
- stack 0: 0xF0
5699	 161	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0xF4
5700	 162	JUMP		 	 
- stack 0: 0x7DC
5701	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7DC
5702	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7DC
- stack 0: 0x7DC
5703	 F6	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0xF40020010E019C030A000000860001040000000400000000A0001F00BA0000
5704	 F7	PUSH1	E0	 	 
- stack 2: 0x7DC
- stack 1: 0xF40020010E019C030A000000860001040000000400000000A0001F00BA0000
- stack 0: 0xE0
5705	 F9	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0xF40020
5706	 FA	PUSH2	FFFF	 	 
- stack 2: 0x7DC
- stack 1: 0xF40020
- stack 0: 0xFFFF
5707	 FD	AND		 	 
- stack 1: 0x7DC
- stack 0: 0x20
5708	 FE	PUSH1	01	 	 
- stack 2: 0x7DC
- stack 1: 0x20
- stack 0: 0x1
5709	 100	SIGNEXTEND		 	 
- stack 1: 0x7DC
- stack 0: 0x20
5710	 101	PUSH2	0380	 	 
- stack 2: 0x7DC
- stack 1: 0x20
- stack 0: 0x380
5711	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x7DC
5712	 105	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
5713	 107	ADD		 	 
- stack 0: 0x7E0
5714	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
5715	 109	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x10E019C030A000000860001040000000400000000A0001F00BA000003430001
5716	 10A	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x10E019C030A000000860001040000000400000000A0001F00BA000003430001
- stack 0: 0xF0
5717	 10C	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x10E
5718	 10D	JUMP		 	 
- stack 0: 0x7E0
5719	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x7E0
5720	 10F	PUSH2	0060	 	 
- stack 1: 0x7E0
- stack 0: 0x60
5721	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x7E0
- stack 0: 0x4000
5722	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E0
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
5723	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E0
- stack 0: 0x4000
5724	 119	PUSH2	03A0	 	 
- stack 2: 0x7E0
- stack 1: 0x4000
- stack 0: 0x3A0
5725	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x7E0
- stack 1: 0x4000
- stack 0: 0x4000
5726	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7E0
- stack 2: 0x4000
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
5727	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7E0
- stack 1: 0x4000
- stack 0: 0x4000
5728	 123	SUB		 	 
- stack 1: 0x7E0
- stack 0: 0x0
5729	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x7E0
- stack 1: 0x0
- stack 0: 0x12C
5730	 127	JUMPI		 	 
- stack 0: 0x7E0
5731	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x7E0
- stack 0: 0x146
5732	 12B	JUMP		 	 
- stack 0: 0x7E0
5733	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x7E0
5734	 147	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
5735	 149	ADD		 	 
- stack 0: 0x7E4
5736	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
5737	 14B	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x30A000000860001040000000400000000A0001F00BA00000343000103620002
5738	 14C	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0x30A000000860001040000000400000000A0001F00BA00000343000103620002
- stack 0: 0xF0
5739	 14E	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x30A
5740	 14F	JUMP		 	 
- stack 0: 0x7E4
5741	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7E4
5742	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
5743	 30C	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x30A000000860001040000000400000000A0001F00BA00000343000103620002
5744	 30D	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0x30A000000860001040000000400000000A0001F00BA00000343000103620002
- stack 0: 0xE0
5745	 30F	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x30A0000
5746	 310	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0x30A0000
- stack 0: 0xFFFF
5747	 313	AND		 	 
- stack 1: 0x7E4
- stack 0: 0x0
5748	 314	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0x0
- stack 0: 0x1
5749	 316	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0x0
5750	 317	PUSH2	0080	 	 
- stack 2: 0x7E4
- stack 1: 0x0
- stack 0: 0x80
5751	 31A	MSTORE		 	  ;; # store to x4
- stack 0: 0x7E4
5752	 31B	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
5753	 31D	ADD		 	 
- stack 0: 0x7E8
5754	 31E	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
5755	 31F	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x860001040000000400000000A0001F00BA00000343000103620002037CFFE4
5756	 320	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x860001040000000400000000A0001F00BA00000343000103620002037CFFE4
- stack 0: 0xF0
5757	 322	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x86
5758	 323	JUMP		 	 
- stack 0: 0x7E8
5759	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x7E8
5760	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E8
- stack 0: 0x7E8
5761	 88	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x860001040000000400000000A0001F00BA00000343000103620002037CFFE4
5762	 89	PUSH1	E0	 	 
- stack 2: 0x7E8
- stack 1: 0x860001040000000400000000A0001F00BA00000343000103620002037CFFE4
- stack 0: 0xE0
5763	 8B	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x860001
5764	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7E8
- stack 1: 0x860001
- stack 0: 0xFFFF
5765	 8F	AND		 	 
- stack 1: 0x7E8
- stack 0: 0x1
5766	 90	PUSH1	01	 	 
- stack 2: 0x7E8
- stack 1: 0x1
- stack 0: 0x1
5767	 92	SIGNEXTEND		 	 
- stack 1: 0x7E8
- stack 0: 0x1
5768	 93	PUSH2	0020	 	 
- stack 2: 0x7E8
- stack 1: 0x1
- stack 0: 0x20
5769	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7E8
5770	 97	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
5771	 99	ADD		 	 
- stack 0: 0x7EC
5772	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
5773	 9B	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x40000000400000000A0001F00BA00000343000103620002037CFFE401630000
5774	 9C	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x40000000400000000A0001F00BA00000343000103620002037CFFE401630000
- stack 0: 0xF0
5775	 9E	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x400
5776	 9F	JUMP		 	 
- stack 0: 0x7EC
5777	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7EC
5778	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7EC
- stack 0: 0x7EC
5779	 402	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x40000000400000000A0001F00BA00000343000103620002037CFFE401630000
5780	 403	PUSH1	E0	 	 
- stack 2: 0x7EC
- stack 1: 0x40000000400000000A0001F00BA00000343000103620002037CFFE401630000
- stack 0: 0xE0
5781	 405	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x4000000
5782	 406	PUSH2	FFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x4000000
- stack 0: 0xFFFF
5783	 409	AND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
5784	 40A	PUSH1	01	 	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x1
5785	 40C	SIGNEXTEND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
5786	 40D	POP		 	 
- stack 0: 0x7EC
5787	 40E	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
5788	 410	ADD		 	 
- stack 0: 0x7F0
5789	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
5790	 412	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x400000000A0001F00BA00000343000103620002037CFFE40163000000F40021
5791	 413	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x400000000A0001F00BA00000343000103620002037CFFE40163000000F40021
- stack 0: 0xF0
5792	 415	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x400
5793	 416	JUMP		 	 
- stack 0: 0x7F0
5794	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7F0
5795	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F0
- stack 0: 0x7F0
5796	 402	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x400000000A0001F00BA00000343000103620002037CFFE40163000000F40021
5797	 403	PUSH1	E0	 	 
- stack 2: 0x7F0
- stack 1: 0x400000000A0001F00BA00000343000103620002037CFFE40163000000F40021
- stack 0: 0xE0
5798	 405	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x4000000
5799	 406	PUSH2	FFFF	 	 
- stack 2: 0x7F0
- stack 1: 0x4000000
- stack 0: 0xFFFF
5800	 409	AND		 	 
- stack 1: 0x7F0
- stack 0: 0x0
5801	 40A	PUSH1	01	 	 
- stack 2: 0x7F0
- stack 1: 0x0
- stack 0: 0x1
5802	 40C	SIGNEXTEND		 	 
- stack 1: 0x7F0
- stack 0: 0x0
5803	 40D	POP		 	 
- stack 0: 0x7F0
5804	 40E	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
5805	 410	ADD		 	 
- stack 0: 0x7F4
5806	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
5807	 412	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xA0001F00BA00000343000103620002037CFFE40163000000F40021010E016C
5808	 413	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0xA0001F00BA00000343000103620002037CFFE40163000000F40021010E016C
- stack 0: 0xF0
5809	 415	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xA0
5810	 416	JUMP		 	 
- stack 0: 0x7F4
5811	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7F4
5812	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F4
- stack 0: 0x7F4
5813	 A2	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xA0001F00BA00000343000103620002037CFFE40163000000F40021010E016C
5814	 A3	PUSH1	E0	 	 
- stack 2: 0x7F4
- stack 1: 0xA0001F00BA00000343000103620002037CFFE40163000000F40021010E016C
- stack 0: 0xE0
5815	 A5	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xA0001F
5816	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7F4
- stack 1: 0xA0001F
- stack 0: 0xFFFF
5817	 A9	AND		 	 
- stack 1: 0x7F4
- stack 0: 0x1F
5818	 AA	PUSH1	01	 	 
- stack 2: 0x7F4
- stack 1: 0x1F
- stack 0: 0x1
5819	 AC	SIGNEXTEND		 	 
- stack 1: 0x7F4
- stack 0: 0x1F
5820	 AD	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0x1F
- stack 0: 0x40
5821	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F4
5822	 B1	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
5823	 B3	ADD		 	 
- stack 0: 0x7F8
5824	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
5825	 B5	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0xBA00000343000103620002037CFFE40163000000F40021010E016C030A0000
5826	 B6	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0xBA00000343000103620002037CFFE40163000000F40021010E016C030A0000
- stack 0: 0xF0
5827	 B8	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0xBA
5828	 B9	JUMP		 	 
- stack 0: 0x7F8
5829	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x7F8
5830	 BB	PUSH2	0020	 	 
- stack 1: 0x7F8
- stack 0: 0x20
5831	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x7F8
- stack 0: 0x1
5832	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7F8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5833	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7F8
- stack 0: 0x1
5834	 C5	PUSH2	0040	 	 
- stack 2: 0x7F8
- stack 1: 0x1
- stack 0: 0x40
5835	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x7F8
- stack 1: 0x1
- stack 0: 0x1F
5836	 C9	PUSH1	1F	 	 
- stack 3: 0x7F8
- stack 2: 0x1
- stack 1: 0x1F
- stack 0: 0x1F
5837	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x7F8
- stack 1: 0x1
- stack 0: 0x1F
5838	 CC	SHL		 	 
- stack 1: 0x7F8
- stack 0: 0x80000000
5839	 CD	PUSH2	0060	 	 
- stack 2: 0x7F8
- stack 1: 0x80000000
- stack 0: 0x60
5840	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x7F8
5841	 D1	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
5842	 D3	ADD		 	 
- stack 0: 0x7FC
5843	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
5844	 D5	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x343000103620002037CFFE40163000000F40021010E016C030A000000A00007
5845	 D6	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x343000103620002037CFFE40163000000F40021010E016C030A000000A00007
- stack 0: 0xF0
5846	 D8	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x343
5847	 D9	JUMP		 	 
- stack 0: 0x7FC
5848	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7FC
5849	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
5850	 345	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x343000103620002037CFFE40163000000F40021010E016C030A000000A00007
5851	 346	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0x343000103620002037CFFE40163000000F40021010E016C030A000000A00007
- stack 0: 0xE0
5852	 348	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x3430001
5853	 349	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0x3430001
- stack 0: 0xFFFF
5854	 34C	AND		 	 
- stack 1: 0x7FC
- stack 0: 0x1
5855	 34D	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0x1
- stack 0: 0x1
5856	 34F	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0x1
5857	 350	PUSH2	0080	 	 
- stack 2: 0x7FC
- stack 1: 0x1
- stack 0: 0x80
5858	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x7FC
- stack 1: 0x1
- stack 0: 0x0
5859	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x7FC
- stack 0: 0x1
5860	 355	PUSH2	0080	 	 
- stack 2: 0x7FC
- stack 1: 0x1
- stack 0: 0x80
5861	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x7FC
5862	 359	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
5863	 35B	ADD		 	 
- stack 0: 0x800
5864	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
5865	 35D	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x3620002037CFFE40163000000F40021010E016C030A000000A0000700860001
5866	 35E	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x3620002037CFFE40163000000F40021010E016C030A000000A0000700860001
- stack 0: 0xF0
5867	 360	SHR		 	 
- stack 1: 0x800
- stack 0: 0x362
5868	 361	JUMP		 	 
- stack 0: 0x800
5869	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x800
5870	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x800
- stack 0: 0x800
5871	 364	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x3620002037CFFE40163000000F40021010E016C030A000000A0000700860001
5872	 365	PUSH1	E0	 	 
- stack 2: 0x800
- stack 1: 0x3620002037CFFE40163000000F40021010E016C030A000000A0000700860001
- stack 0: 0xE0
5873	 367	SHR		 	 
- stack 1: 0x800
- stack 0: 0x3620002
5874	 368	PUSH2	FFFF	 	 
- stack 2: 0x800
- stack 1: 0x3620002
- stack 0: 0xFFFF
5875	 36B	AND		 	 
- stack 1: 0x800
- stack 0: 0x2
5876	 36C	PUSH1	01	 	 
- stack 2: 0x800
- stack 1: 0x2
- stack 0: 0x1
5877	 36E	SIGNEXTEND		 	 
- stack 1: 0x800
- stack 0: 0x2
5878	 36F	PUSH2	00A0	 	 
- stack 2: 0x800
- stack 1: 0x2
- stack 0: 0xA0
5879	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x800
5880	 373	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
5881	 375	ADD		 	 
- stack 0: 0x804
5882	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
5883	 377	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x37CFFE40163000000F40021010E016C030A000000A000070086000100BA0000
5884	 378	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x37CFFE40163000000F40021010E016C030A000000A000070086000100BA0000
- stack 0: 0xF0
5885	 37A	SHR		 	 
- stack 1: 0x804
- stack 0: 0x37C
5886	 37B	JUMP		 	 
- stack 0: 0x804
5887	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x804
5888	 37D	PUSH2	0080	 	 
- stack 1: 0x804
- stack 0: 0x80
5889	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x804
- stack 0: 0x1
5890	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5891	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x804
- stack 0: 0x1
5892	 387	PUSH2	00A0	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0xA0
5893	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x2
5894	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x804
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5895	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x2
5896	 391	SUB		 	 
- stack 1: 0x804
- stack 0: 0x1
5897	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x39A
5898	 395	JUMPI		 	 
- stack 0: 0x804
5899	 39A	JUMPDEST		 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x804
5900	 39B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
5901	 39C	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x37CFFE40163000000F40021010E016C030A000000A000070086000100BA0000
5902	 39D	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x37CFFE40163000000F40021010E016C030A000000A000070086000100BA0000
- stack 0: 0xE0
5903	 39F	SHR		 	 
- stack 1: 0x804
- stack 0: 0x37CFFE4
5904	 3A0	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x37CFFE4
- stack 0: 0xFFFF
5905	 3A3	AND		 	 
- stack 1: 0x804
- stack 0: 0xFFE4
5906	 3A4	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0xFFE4
- stack 0: 0x1
5907	 3A6	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
5908	 3A7	ADD		 	 
- stack 0: 0x7E8
5909	 3A8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7E8
- stack 0: 0xFFFFFFFF
5910	 3AD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7E8
5911	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
5912	 3AF	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x860001040000000400000000A0001F00BA00000343000103620002037CFFE4
5913	 3B0	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x860001040000000400000000A0001F00BA00000343000103620002037CFFE4
- stack 0: 0xF0
5914	 3B2	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x86
5915	 3B3	JUMP		 	 
- stack 0: 0x7E8
5916	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x7E8
5917	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E8
- stack 0: 0x7E8
5918	 88	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x860001040000000400000000A0001F00BA00000343000103620002037CFFE4
5919	 89	PUSH1	E0	 	 
- stack 2: 0x7E8
- stack 1: 0x860001040000000400000000A0001F00BA00000343000103620002037CFFE4
- stack 0: 0xE0
5920	 8B	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x860001
5921	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7E8
- stack 1: 0x860001
- stack 0: 0xFFFF
5922	 8F	AND		 	 
- stack 1: 0x7E8
- stack 0: 0x1
5923	 90	PUSH1	01	 	 
- stack 2: 0x7E8
- stack 1: 0x1
- stack 0: 0x1
5924	 92	SIGNEXTEND		 	 
- stack 1: 0x7E8
- stack 0: 0x1
5925	 93	PUSH2	0020	 	 
- stack 2: 0x7E8
- stack 1: 0x1
- stack 0: 0x20
5926	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7E8
5927	 97	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
5928	 99	ADD		 	 
- stack 0: 0x7EC
5929	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
5930	 9B	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x40000000400000000A0001F00BA00000343000103620002037CFFE401630000
5931	 9C	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x40000000400000000A0001F00BA00000343000103620002037CFFE401630000
- stack 0: 0xF0
5932	 9E	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x400
5933	 9F	JUMP		 	 
- stack 0: 0x7EC
5934	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7EC
5935	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7EC
- stack 0: 0x7EC
5936	 402	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x40000000400000000A0001F00BA00000343000103620002037CFFE401630000
5937	 403	PUSH1	E0	 	 
- stack 2: 0x7EC
- stack 1: 0x40000000400000000A0001F00BA00000343000103620002037CFFE401630000
- stack 0: 0xE0
5938	 405	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x4000000
5939	 406	PUSH2	FFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x4000000
- stack 0: 0xFFFF
5940	 409	AND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
5941	 40A	PUSH1	01	 	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x1
5942	 40C	SIGNEXTEND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
5943	 40D	POP		 	 
- stack 0: 0x7EC
5944	 40E	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
5945	 410	ADD		 	 
- stack 0: 0x7F0
5946	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
5947	 412	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x400000000A0001F00BA00000343000103620002037CFFE40163000000F40021
5948	 413	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x400000000A0001F00BA00000343000103620002037CFFE40163000000F40021
- stack 0: 0xF0
5949	 415	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x400
5950	 416	JUMP		 	 
- stack 0: 0x7F0
5951	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7F0
5952	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F0
- stack 0: 0x7F0
5953	 402	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x400000000A0001F00BA00000343000103620002037CFFE40163000000F40021
5954	 403	PUSH1	E0	 	 
- stack 2: 0x7F0
- stack 1: 0x400000000A0001F00BA00000343000103620002037CFFE40163000000F40021
- stack 0: 0xE0
5955	 405	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x4000000
5956	 406	PUSH2	FFFF	 	 
- stack 2: 0x7F0
- stack 1: 0x4000000
- stack 0: 0xFFFF
5957	 409	AND		 	 
- stack 1: 0x7F0
- stack 0: 0x0
5958	 40A	PUSH1	01	 	 
- stack 2: 0x7F0
- stack 1: 0x0
- stack 0: 0x1
5959	 40C	SIGNEXTEND		 	 
- stack 1: 0x7F0
- stack 0: 0x0
5960	 40D	POP		 	 
- stack 0: 0x7F0
5961	 40E	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
5962	 410	ADD		 	 
- stack 0: 0x7F4
5963	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
5964	 412	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xA0001F00BA00000343000103620002037CFFE40163000000F40021010E016C
5965	 413	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0xA0001F00BA00000343000103620002037CFFE40163000000F40021010E016C
- stack 0: 0xF0
5966	 415	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xA0
5967	 416	JUMP		 	 
- stack 0: 0x7F4
5968	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7F4
5969	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F4
- stack 0: 0x7F4
5970	 A2	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xA0001F00BA00000343000103620002037CFFE40163000000F40021010E016C
5971	 A3	PUSH1	E0	 	 
- stack 2: 0x7F4
- stack 1: 0xA0001F00BA00000343000103620002037CFFE40163000000F40021010E016C
- stack 0: 0xE0
5972	 A5	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xA0001F
5973	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7F4
- stack 1: 0xA0001F
- stack 0: 0xFFFF
5974	 A9	AND		 	 
- stack 1: 0x7F4
- stack 0: 0x1F
5975	 AA	PUSH1	01	 	 
- stack 2: 0x7F4
- stack 1: 0x1F
- stack 0: 0x1
5976	 AC	SIGNEXTEND		 	 
- stack 1: 0x7F4
- stack 0: 0x1F
5977	 AD	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0x1F
- stack 0: 0x40
5978	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F4
5979	 B1	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
5980	 B3	ADD		 	 
- stack 0: 0x7F8
5981	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
5982	 B5	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0xBA00000343000103620002037CFFE40163000000F40021010E016C030A0000
5983	 B6	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0xBA00000343000103620002037CFFE40163000000F40021010E016C030A0000
- stack 0: 0xF0
5984	 B8	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0xBA
5985	 B9	JUMP		 	 
- stack 0: 0x7F8
5986	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x7F8
5987	 BB	PUSH2	0020	 	 
- stack 1: 0x7F8
- stack 0: 0x20
5988	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x7F8
- stack 0: 0x1
5989	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7F8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5990	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7F8
- stack 0: 0x1
5991	 C5	PUSH2	0040	 	 
- stack 2: 0x7F8
- stack 1: 0x1
- stack 0: 0x40
5992	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x7F8
- stack 1: 0x1
- stack 0: 0x1F
5993	 C9	PUSH1	1F	 	 
- stack 3: 0x7F8
- stack 2: 0x1
- stack 1: 0x1F
- stack 0: 0x1F
5994	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x7F8
- stack 1: 0x1
- stack 0: 0x1F
5995	 CC	SHL		 	 
- stack 1: 0x7F8
- stack 0: 0x80000000
5996	 CD	PUSH2	0060	 	 
- stack 2: 0x7F8
- stack 1: 0x80000000
- stack 0: 0x60
5997	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x7F8
5998	 D1	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
5999	 D3	ADD		 	 
- stack 0: 0x7FC
6000	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
6001	 D5	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x343000103620002037CFFE40163000000F40021010E016C030A000000A00007
6002	 D6	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x343000103620002037CFFE40163000000F40021010E016C030A000000A00007
- stack 0: 0xF0
6003	 D8	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x343
6004	 D9	JUMP		 	 
- stack 0: 0x7FC
6005	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7FC
6006	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
6007	 345	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x343000103620002037CFFE40163000000F40021010E016C030A000000A00007
6008	 346	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0x343000103620002037CFFE40163000000F40021010E016C030A000000A00007
- stack 0: 0xE0
6009	 348	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x3430001
6010	 349	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0x3430001
- stack 0: 0xFFFF
6011	 34C	AND		 	 
- stack 1: 0x7FC
- stack 0: 0x1
6012	 34D	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0x1
- stack 0: 0x1
6013	 34F	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0x1
6014	 350	PUSH2	0080	 	 
- stack 2: 0x7FC
- stack 1: 0x1
- stack 0: 0x80
6015	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x7FC
- stack 1: 0x1
- stack 0: 0x1
6016	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x7FC
- stack 0: 0x2
6017	 355	PUSH2	0080	 	 
- stack 2: 0x7FC
- stack 1: 0x2
- stack 0: 0x80
6018	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x7FC
6019	 359	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
6020	 35B	ADD		 	 
- stack 0: 0x800
6021	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
6022	 35D	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x3620002037CFFE40163000000F40021010E016C030A000000A0000700860001
6023	 35E	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x3620002037CFFE40163000000F40021010E016C030A000000A0000700860001
- stack 0: 0xF0
6024	 360	SHR		 	 
- stack 1: 0x800
- stack 0: 0x362
6025	 361	JUMP		 	 
- stack 0: 0x800
6026	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x800
6027	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x800
- stack 0: 0x800
6028	 364	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x3620002037CFFE40163000000F40021010E016C030A000000A0000700860001
6029	 365	PUSH1	E0	 	 
- stack 2: 0x800
- stack 1: 0x3620002037CFFE40163000000F40021010E016C030A000000A0000700860001
- stack 0: 0xE0
6030	 367	SHR		 	 
- stack 1: 0x800
- stack 0: 0x3620002
6031	 368	PUSH2	FFFF	 	 
- stack 2: 0x800
- stack 1: 0x3620002
- stack 0: 0xFFFF
6032	 36B	AND		 	 
- stack 1: 0x800
- stack 0: 0x2
6033	 36C	PUSH1	01	 	 
- stack 2: 0x800
- stack 1: 0x2
- stack 0: 0x1
6034	 36E	SIGNEXTEND		 	 
- stack 1: 0x800
- stack 0: 0x2
6035	 36F	PUSH2	00A0	 	 
- stack 2: 0x800
- stack 1: 0x2
- stack 0: 0xA0
6036	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x800
6037	 373	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
6038	 375	ADD		 	 
- stack 0: 0x804
6039	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
6040	 377	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x37CFFE40163000000F40021010E016C030A000000A000070086000100BA0000
6041	 378	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x37CFFE40163000000F40021010E016C030A000000A000070086000100BA0000
- stack 0: 0xF0
6042	 37A	SHR		 	 
- stack 1: 0x804
- stack 0: 0x37C
6043	 37B	JUMP		 	 
- stack 0: 0x804
6044	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x804
6045	 37D	PUSH2	0080	 	 
- stack 1: 0x804
- stack 0: 0x80
6046	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x804
- stack 0: 0x2
6047	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x804
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6048	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x804
- stack 0: 0x2
6049	 387	PUSH2	00A0	 	 
- stack 2: 0x804
- stack 1: 0x2
- stack 0: 0xA0
6050	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x804
- stack 1: 0x2
- stack 0: 0x2
6051	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x804
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6052	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x804
- stack 1: 0x2
- stack 0: 0x2
6053	 391	SUB		 	 
- stack 1: 0x804
- stack 0: 0x0
6054	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x804
- stack 1: 0x0
- stack 0: 0x39A
6055	 395	JUMPI		 	 
- stack 0: 0x804
6056	 396	PUSH2	03B4	 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 1: 0x804
- stack 0: 0x3B4
6057	 399	JUMP		 	 
- stack 0: 0x804
6058	 3B4	JUMPDEST		 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x804
6059	 3B5	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
6060	 3B7	ADD		 	 
- stack 0: 0x808
6061	 3B8	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
6062	 3B9	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x163000000F40021010E016C030A000000A000070086000100BA000003430001
6063	 3BA	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0x163000000F40021010E016C030A000000A000070086000100BA000003430001
- stack 0: 0xF0
6064	 3BC	SHR		 	 
- stack 1: 0x808
- stack 0: 0x163
6065	 3BD	JUMP		 	 
- stack 0: 0x808
6066	 163	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x808
6067	 164	PUSH4	80000000	 	 
- stack 1: 0x808
- stack 0: 0x80000000
6068	 169	PUSH2	03A0	 	 
- stack 2: 0x808
- stack 1: 0x80000000
- stack 0: 0x3A0
6069	 16C	MSTORE		 	  ;; # store to x29
- stack 0: 0x808
6070	 16D	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
6071	 16F	ADD		 	 
- stack 0: 0x80C
6072	 170	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
6073	 171	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0xF40021010E016C030A000000A000070086000100BA00000343000103620002
6074	 172	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0xF40021010E016C030A000000A000070086000100BA00000343000103620002
- stack 0: 0xF0
6075	 174	SHR		 	 
- stack 1: 0x80C
- stack 0: 0xF4
6076	 175	JUMP		 	 
- stack 0: 0x80C
6077	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x80C
6078	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x80C
- stack 0: 0x80C
6079	 F6	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0xF40021010E016C030A000000A000070086000100BA00000343000103620002
6080	 F7	PUSH1	E0	 	 
- stack 2: 0x80C
- stack 1: 0xF40021010E016C030A000000A000070086000100BA00000343000103620002
- stack 0: 0xE0
6081	 F9	SHR		 	 
- stack 1: 0x80C
- stack 0: 0xF40021
6082	 FA	PUSH2	FFFF	 	 
- stack 2: 0x80C
- stack 1: 0xF40021
- stack 0: 0xFFFF
6083	 FD	AND		 	 
- stack 1: 0x80C
- stack 0: 0x21
6084	 FE	PUSH1	01	 	 
- stack 2: 0x80C
- stack 1: 0x21
- stack 0: 0x1
6085	 100	SIGNEXTEND		 	 
- stack 1: 0x80C
- stack 0: 0x21
6086	 101	PUSH2	0380	 	 
- stack 2: 0x80C
- stack 1: 0x21
- stack 0: 0x380
6087	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x80C
6088	 105	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
6089	 107	ADD		 	 
- stack 0: 0x810
6090	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
6091	 109	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x10E016C030A000000A000070086000100BA00000343000103620002037CFFEC
6092	 10A	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0x10E016C030A000000A000070086000100BA00000343000103620002037CFFEC
- stack 0: 0xF0
6093	 10C	SHR		 	 
- stack 1: 0x810
- stack 0: 0x10E
6094	 10D	JUMP		 	 
- stack 0: 0x810
6095	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x810
6096	 10F	PUSH2	0060	 	 
- stack 1: 0x810
- stack 0: 0x60
6097	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x810
- stack 0: 0x80000000
6098	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x810
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
6099	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x810
- stack 0: 0x80000000
6100	 119	PUSH2	03A0	 	 
- stack 2: 0x810
- stack 1: 0x80000000
- stack 0: 0x3A0
6101	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x810
- stack 1: 0x80000000
- stack 0: 0x80000000
6102	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x810
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
6103	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x810
- stack 1: 0x80000000
- stack 0: 0x80000000
6104	 123	SUB		 	 
- stack 1: 0x810
- stack 0: 0x0
6105	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x810
- stack 1: 0x0
- stack 0: 0x12C
6106	 127	JUMPI		 	 
- stack 0: 0x810
6107	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x810
- stack 0: 0x146
6108	 12B	JUMP		 	 
- stack 0: 0x810
6109	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x810
6110	 147	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
6111	 149	ADD		 	 
- stack 0: 0x814
6112	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
6113	 14B	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x30A000000A000070086000100BA00000343000103620002037CFFEC00DA0080
6114	 14C	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0x30A000000A000070086000100BA00000343000103620002037CFFEC00DA0080
- stack 0: 0xF0
6115	 14E	SHR		 	 
- stack 1: 0x814
- stack 0: 0x30A
6116	 14F	JUMP		 	 
- stack 0: 0x814
6117	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x814
6118	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x814
- stack 0: 0x814
6119	 30C	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x30A000000A000070086000100BA00000343000103620002037CFFEC00DA0080
6120	 30D	PUSH1	E0	 	 
- stack 2: 0x814
- stack 1: 0x30A000000A000070086000100BA00000343000103620002037CFFEC00DA0080
- stack 0: 0xE0
6121	 30F	SHR		 	 
- stack 1: 0x814
- stack 0: 0x30A0000
6122	 310	PUSH2	FFFF	 	 
- stack 2: 0x814
- stack 1: 0x30A0000
- stack 0: 0xFFFF
6123	 313	AND		 	 
- stack 1: 0x814
- stack 0: 0x0
6124	 314	PUSH1	01	 	 
- stack 2: 0x814
- stack 1: 0x0
- stack 0: 0x1
6125	 316	SIGNEXTEND		 	 
- stack 1: 0x814
- stack 0: 0x0
6126	 317	PUSH2	0080	 	 
- stack 2: 0x814
- stack 1: 0x0
- stack 0: 0x80
6127	 31A	MSTORE		 	  ;; # store to x4
- stack 0: 0x814
6128	 31B	PUSH1	04	 	 
- stack 1: 0x814
- stack 0: 0x4
6129	 31D	ADD		 	 
- stack 0: 0x818
6130	 31E	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
6131	 31F	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0xA000070086000100BA00000343000103620002037CFFEC00DA008000F40022
6132	 320	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0xA000070086000100BA00000343000103620002037CFFEC00DA008000F40022
- stack 0: 0xF0
6133	 322	SHR		 	 
- stack 1: 0x818
- stack 0: 0xA0
6134	 323	JUMP		 	 
- stack 0: 0x818
6135	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x818
6136	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x818
- stack 0: 0x818
6137	 A2	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0xA000070086000100BA00000343000103620002037CFFEC00DA008000F40022
6138	 A3	PUSH1	E0	 	 
- stack 2: 0x818
- stack 1: 0xA000070086000100BA00000343000103620002037CFFEC00DA008000F40022
- stack 0: 0xE0
6139	 A5	SHR		 	 
- stack 1: 0x818
- stack 0: 0xA00007
6140	 A6	PUSH2	FFFF	 	 
- stack 2: 0x818
- stack 1: 0xA00007
- stack 0: 0xFFFF
6141	 A9	AND		 	 
- stack 1: 0x818
- stack 0: 0x7
6142	 AA	PUSH1	01	 	 
- stack 2: 0x818
- stack 1: 0x7
- stack 0: 0x1
6143	 AC	SIGNEXTEND		 	 
- stack 1: 0x818
- stack 0: 0x7
6144	 AD	PUSH2	0040	 	 
- stack 2: 0x818
- stack 1: 0x7
- stack 0: 0x40
6145	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x818
6146	 B1	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
6147	 B3	ADD		 	 
- stack 0: 0x81C
6148	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
6149	 B5	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x86000100BA00000343000103620002037CFFEC00DA008000F40022010E0144
6150	 B6	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0x86000100BA00000343000103620002037CFFEC00DA008000F40022010E0144
- stack 0: 0xF0
6151	 B8	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x86
6152	 B9	JUMP		 	 
- stack 0: 0x81C
6153	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x81C
6154	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x81C
- stack 0: 0x81C
6155	 88	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x86000100BA00000343000103620002037CFFEC00DA008000F40022010E0144
6156	 89	PUSH1	E0	 	 
- stack 2: 0x81C
- stack 1: 0x86000100BA00000343000103620002037CFFEC00DA008000F40022010E0144
- stack 0: 0xE0
6157	 8B	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x860001
6158	 8C	PUSH2	FFFF	 	 
- stack 2: 0x81C
- stack 1: 0x860001
- stack 0: 0xFFFF
6159	 8F	AND		 	 
- stack 1: 0x81C
- stack 0: 0x1
6160	 90	PUSH1	01	 	 
- stack 2: 0x81C
- stack 1: 0x1
- stack 0: 0x1
6161	 92	SIGNEXTEND		 	 
- stack 1: 0x81C
- stack 0: 0x1
6162	 93	PUSH2	0020	 	 
- stack 2: 0x81C
- stack 1: 0x1
- stack 0: 0x20
6163	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x81C
6164	 97	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
6165	 99	ADD		 	 
- stack 0: 0x820
6166	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
6167	 9B	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0xBA00000343000103620002037CFFEC00DA008000F40022010E0144030A0000
6168	 9C	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0xBA00000343000103620002037CFFEC00DA008000F40022010E0144030A0000
- stack 0: 0xF0
6169	 9E	SHR		 	 
- stack 1: 0x820
- stack 0: 0xBA
6170	 9F	JUMP		 	 
- stack 0: 0x820
6171	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x820
6172	 BB	PUSH2	0020	 	 
- stack 1: 0x820
- stack 0: 0x20
6173	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x820
- stack 0: 0x1
6174	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x820
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6175	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x820
- stack 0: 0x1
6176	 C5	PUSH2	0040	 	 
- stack 2: 0x820
- stack 1: 0x1
- stack 0: 0x40
6177	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x820
- stack 1: 0x1
- stack 0: 0x7
6178	 C9	PUSH1	1F	 	 
- stack 3: 0x820
- stack 2: 0x1
- stack 1: 0x7
- stack 0: 0x1F
6179	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x820
- stack 1: 0x1
- stack 0: 0x7
6180	 CC	SHL		 	 
- stack 1: 0x820
- stack 0: 0x80
6181	 CD	PUSH2	0060	 	 
- stack 2: 0x820
- stack 1: 0x80
- stack 0: 0x60
6182	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x820
6183	 D1	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
6184	 D3	ADD		 	 
- stack 0: 0x824
6185	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
6186	 D5	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x343000103620002037CFFEC00DA008000F40022010E0144030A000000A0000E
6187	 D6	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x343000103620002037CFFEC00DA008000F40022010E0144030A000000A0000E
- stack 0: 0xF0
6188	 D8	SHR		 	 
- stack 1: 0x824
- stack 0: 0x343
6189	 D9	JUMP		 	 
- stack 0: 0x824
6190	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x824
6191	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x824
- stack 0: 0x824
6192	 345	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x343000103620002037CFFEC00DA008000F40022010E0144030A000000A0000E
6193	 346	PUSH1	E0	 	 
- stack 2: 0x824
- stack 1: 0x343000103620002037CFFEC00DA008000F40022010E0144030A000000A0000E
- stack 0: 0xE0
6194	 348	SHR		 	 
- stack 1: 0x824
- stack 0: 0x3430001
6195	 349	PUSH2	FFFF	 	 
- stack 2: 0x824
- stack 1: 0x3430001
- stack 0: 0xFFFF
6196	 34C	AND		 	 
- stack 1: 0x824
- stack 0: 0x1
6197	 34D	PUSH1	01	 	 
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x1
6198	 34F	SIGNEXTEND		 	 
- stack 1: 0x824
- stack 0: 0x1
6199	 350	PUSH2	0080	 	 
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x80
6200	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x0
6201	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x824
- stack 0: 0x1
6202	 355	PUSH2	0080	 	 
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x80
6203	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x824
6204	 359	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
6205	 35B	ADD		 	 
- stack 0: 0x828
6206	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
6207	 35D	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x3620002037CFFEC00DA008000F40022010E0144030A000000A0000E00860001
6208	 35E	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x3620002037CFFEC00DA008000F40022010E0144030A000000A0000E00860001
- stack 0: 0xF0
6209	 360	SHR		 	 
- stack 1: 0x828
- stack 0: 0x362
6210	 361	JUMP		 	 
- stack 0: 0x828
6211	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x828
6212	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
6213	 364	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x3620002037CFFEC00DA008000F40022010E0144030A000000A0000E00860001
6214	 365	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0x3620002037CFFEC00DA008000F40022010E0144030A000000A0000E00860001
- stack 0: 0xE0
6215	 367	SHR		 	 
- stack 1: 0x828
- stack 0: 0x3620002
6216	 368	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0x3620002
- stack 0: 0xFFFF
6217	 36B	AND		 	 
- stack 1: 0x828
- stack 0: 0x2
6218	 36C	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0x2
- stack 0: 0x1
6219	 36E	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0x2
6220	 36F	PUSH2	00A0	 	 
- stack 2: 0x828
- stack 1: 0x2
- stack 0: 0xA0
6221	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x828
6222	 373	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
6223	 375	ADD		 	 
- stack 0: 0x82C
6224	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
6225	 377	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x37CFFEC00DA008000F40022010E0144030A000000A0000E0086000104000000
6226	 378	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x37CFFEC00DA008000F40022010E0144030A000000A0000E0086000104000000
- stack 0: 0xF0
6227	 37A	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x37C
6228	 37B	JUMP		 	 
- stack 0: 0x82C
6229	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x82C
6230	 37D	PUSH2	0080	 	 
- stack 1: 0x82C
- stack 0: 0x80
6231	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x82C
- stack 0: 0x1
6232	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6233	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x82C
- stack 0: 0x1
6234	 387	PUSH2	00A0	 	 
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0xA0
6235	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x2
6236	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x82C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6237	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x2
6238	 391	SUB		 	 
- stack 1: 0x82C
- stack 0: 0x1
6239	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x39A
6240	 395	JUMPI		 	 
- stack 0: 0x82C
6241	 39A	JUMPDEST		 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x82C
6242	 39B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x82C
- stack 0: 0x82C
6243	 39C	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x37CFFEC00DA008000F40022010E0144030A000000A0000E0086000104000000
6244	 39D	PUSH1	E0	 	 
- stack 2: 0x82C
- stack 1: 0x37CFFEC00DA008000F40022010E0144030A000000A0000E0086000104000000
- stack 0: 0xE0
6245	 39F	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x37CFFEC
6246	 3A0	PUSH2	FFFF	 	 
- stack 2: 0x82C
- stack 1: 0x37CFFEC
- stack 0: 0xFFFF
6247	 3A3	AND		 	 
- stack 1: 0x82C
- stack 0: 0xFFEC
6248	 3A4	PUSH1	01	 	 
- stack 2: 0x82C
- stack 1: 0xFFEC
- stack 0: 0x1
6249	 3A6	SIGNEXTEND		 	 
- stack 1: 0x82C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
6250	 3A7	ADD		 	 
- stack 0: 0x818
6251	 3A8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x818
- stack 0: 0xFFFFFFFF
6252	 3AD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x818
6253	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
6254	 3AF	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0xA000070086000100BA00000343000103620002037CFFEC00DA008000F40022
6255	 3B0	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0xA000070086000100BA00000343000103620002037CFFEC00DA008000F40022
- stack 0: 0xF0
6256	 3B2	SHR		 	 
- stack 1: 0x818
- stack 0: 0xA0
6257	 3B3	JUMP		 	 
- stack 0: 0x818
6258	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x818
6259	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x818
- stack 0: 0x818
6260	 A2	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0xA000070086000100BA00000343000103620002037CFFEC00DA008000F40022
6261	 A3	PUSH1	E0	 	 
- stack 2: 0x818
- stack 1: 0xA000070086000100BA00000343000103620002037CFFEC00DA008000F40022
- stack 0: 0xE0
6262	 A5	SHR		 	 
- stack 1: 0x818
- stack 0: 0xA00007
6263	 A6	PUSH2	FFFF	 	 
- stack 2: 0x818
- stack 1: 0xA00007
- stack 0: 0xFFFF
6264	 A9	AND		 	 
- stack 1: 0x818
- stack 0: 0x7
6265	 AA	PUSH1	01	 	 
- stack 2: 0x818
- stack 1: 0x7
- stack 0: 0x1
6266	 AC	SIGNEXTEND		 	 
- stack 1: 0x818
- stack 0: 0x7
6267	 AD	PUSH2	0040	 	 
- stack 2: 0x818
- stack 1: 0x7
- stack 0: 0x40
6268	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x818
6269	 B1	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
6270	 B3	ADD		 	 
- stack 0: 0x81C
6271	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
6272	 B5	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x86000100BA00000343000103620002037CFFEC00DA008000F40022010E0144
6273	 B6	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0x86000100BA00000343000103620002037CFFEC00DA008000F40022010E0144
- stack 0: 0xF0
6274	 B8	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x86
6275	 B9	JUMP		 	 
- stack 0: 0x81C
6276	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x81C
6277	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x81C
- stack 0: 0x81C
6278	 88	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x86000100BA00000343000103620002037CFFEC00DA008000F40022010E0144
6279	 89	PUSH1	E0	 	 
- stack 2: 0x81C
- stack 1: 0x86000100BA00000343000103620002037CFFEC00DA008000F40022010E0144
- stack 0: 0xE0
6280	 8B	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x860001
6281	 8C	PUSH2	FFFF	 	 
- stack 2: 0x81C
- stack 1: 0x860001
- stack 0: 0xFFFF
6282	 8F	AND		 	 
- stack 1: 0x81C
- stack 0: 0x1
6283	 90	PUSH1	01	 	 
- stack 2: 0x81C
- stack 1: 0x1
- stack 0: 0x1
6284	 92	SIGNEXTEND		 	 
- stack 1: 0x81C
- stack 0: 0x1
6285	 93	PUSH2	0020	 	 
- stack 2: 0x81C
- stack 1: 0x1
- stack 0: 0x20
6286	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x81C
6287	 97	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
6288	 99	ADD		 	 
- stack 0: 0x820
6289	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
6290	 9B	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0xBA00000343000103620002037CFFEC00DA008000F40022010E0144030A0000
6291	 9C	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0xBA00000343000103620002037CFFEC00DA008000F40022010E0144030A0000
- stack 0: 0xF0
6292	 9E	SHR		 	 
- stack 1: 0x820
- stack 0: 0xBA
6293	 9F	JUMP		 	 
- stack 0: 0x820
6294	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x820
6295	 BB	PUSH2	0020	 	 
- stack 1: 0x820
- stack 0: 0x20
6296	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x820
- stack 0: 0x1
6297	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x820
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6298	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x820
- stack 0: 0x1
6299	 C5	PUSH2	0040	 	 
- stack 2: 0x820
- stack 1: 0x1
- stack 0: 0x40
6300	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x820
- stack 1: 0x1
- stack 0: 0x7
6301	 C9	PUSH1	1F	 	 
- stack 3: 0x820
- stack 2: 0x1
- stack 1: 0x7
- stack 0: 0x1F
6302	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x820
- stack 1: 0x1
- stack 0: 0x7
6303	 CC	SHL		 	 
- stack 1: 0x820
- stack 0: 0x80
6304	 CD	PUSH2	0060	 	 
- stack 2: 0x820
- stack 1: 0x80
- stack 0: 0x60
6305	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x820
6306	 D1	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
6307	 D3	ADD		 	 
- stack 0: 0x824
6308	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
6309	 D5	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x343000103620002037CFFEC00DA008000F40022010E0144030A000000A0000E
6310	 D6	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x343000103620002037CFFEC00DA008000F40022010E0144030A000000A0000E
- stack 0: 0xF0
6311	 D8	SHR		 	 
- stack 1: 0x824
- stack 0: 0x343
6312	 D9	JUMP		 	 
- stack 0: 0x824
6313	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x824
6314	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x824
- stack 0: 0x824
6315	 345	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x343000103620002037CFFEC00DA008000F40022010E0144030A000000A0000E
6316	 346	PUSH1	E0	 	 
- stack 2: 0x824
- stack 1: 0x343000103620002037CFFEC00DA008000F40022010E0144030A000000A0000E
- stack 0: 0xE0
6317	 348	SHR		 	 
- stack 1: 0x824
- stack 0: 0x3430001
6318	 349	PUSH2	FFFF	 	 
- stack 2: 0x824
- stack 1: 0x3430001
- stack 0: 0xFFFF
6319	 34C	AND		 	 
- stack 1: 0x824
- stack 0: 0x1
6320	 34D	PUSH1	01	 	 
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x1
6321	 34F	SIGNEXTEND		 	 
- stack 1: 0x824
- stack 0: 0x1
6322	 350	PUSH2	0080	 	 
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x80
6323	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x824
- stack 1: 0x1
- stack 0: 0x1
6324	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x824
- stack 0: 0x2
6325	 355	PUSH2	0080	 	 
- stack 2: 0x824
- stack 1: 0x2
- stack 0: 0x80
6326	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x824
6327	 359	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
6328	 35B	ADD		 	 
- stack 0: 0x828
6329	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
6330	 35D	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x3620002037CFFEC00DA008000F40022010E0144030A000000A0000E00860001
6331	 35E	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x3620002037CFFEC00DA008000F40022010E0144030A000000A0000E00860001
- stack 0: 0xF0
6332	 360	SHR		 	 
- stack 1: 0x828
- stack 0: 0x362
6333	 361	JUMP		 	 
- stack 0: 0x828
6334	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x828
6335	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
6336	 364	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x3620002037CFFEC00DA008000F40022010E0144030A000000A0000E00860001
6337	 365	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0x3620002037CFFEC00DA008000F40022010E0144030A000000A0000E00860001
- stack 0: 0xE0
6338	 367	SHR		 	 
- stack 1: 0x828
- stack 0: 0x3620002
6339	 368	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0x3620002
- stack 0: 0xFFFF
6340	 36B	AND		 	 
- stack 1: 0x828
- stack 0: 0x2
6341	 36C	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0x2
- stack 0: 0x1
6342	 36E	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0x2
6343	 36F	PUSH2	00A0	 	 
- stack 2: 0x828
- stack 1: 0x2
- stack 0: 0xA0
6344	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x828
6345	 373	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
6346	 375	ADD		 	 
- stack 0: 0x82C
6347	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
6348	 377	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x37CFFEC00DA008000F40022010E0144030A000000A0000E0086000104000000
6349	 378	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x37CFFEC00DA008000F40022010E0144030A000000A0000E0086000104000000
- stack 0: 0xF0
6350	 37A	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x37C
6351	 37B	JUMP		 	 
- stack 0: 0x82C
6352	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x82C
6353	 37D	PUSH2	0080	 	 
- stack 1: 0x82C
- stack 0: 0x80
6354	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x82C
- stack 0: 0x2
6355	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x82C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6356	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x82C
- stack 0: 0x2
6357	 387	PUSH2	00A0	 	 
- stack 2: 0x82C
- stack 1: 0x2
- stack 0: 0xA0
6358	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x82C
- stack 1: 0x2
- stack 0: 0x2
6359	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x82C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6360	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x82C
- stack 1: 0x2
- stack 0: 0x2
6361	 391	SUB		 	 
- stack 1: 0x82C
- stack 0: 0x0
6362	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x82C
- stack 1: 0x0
- stack 0: 0x39A
6363	 395	JUMPI		 	 
- stack 0: 0x82C
6364	 396	PUSH2	03B4	 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 1: 0x82C
- stack 0: 0x3B4
6365	 399	JUMP		 	 
- stack 0: 0x82C
6366	 3B4	JUMPDEST		 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x82C
6367	 3B5	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
6368	 3B7	ADD		 	 
- stack 0: 0x830
6369	 3B8	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
6370	 3B9	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xDA008000F40022010E0144030A000000A0000E008600010400000000BA0000
6371	 3BA	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0xDA008000F40022010E0144030A000000A0000E008600010400000000BA0000
- stack 0: 0xF0
6372	 3BC	SHR		 	 
- stack 1: 0x830
- stack 0: 0xDA
6373	 3BD	JUMP		 	 
- stack 0: 0x830
6374	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x830
6375	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x830
- stack 0: 0x830
6376	 DC	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xDA008000F40022010E0144030A000000A0000E008600010400000000BA0000
6377	 DD	PUSH1	E0	 	 
- stack 2: 0x830
- stack 1: 0xDA008000F40022010E0144030A000000A0000E008600010400000000BA0000
- stack 0: 0xE0
6378	 DF	SHR		 	 
- stack 1: 0x830
- stack 0: 0xDA0080
6379	 E0	PUSH2	FFFF	 	 
- stack 2: 0x830
- stack 1: 0xDA0080
- stack 0: 0xFFFF
6380	 E3	AND		 	 
- stack 1: 0x830
- stack 0: 0x80
6381	 E4	PUSH1	01	 	 
- stack 2: 0x830
- stack 1: 0x80
- stack 0: 0x1
6382	 E6	SIGNEXTEND		 	 
- stack 1: 0x830
- stack 0: 0x80
6383	 E7	PUSH2	03A0	 	 
- stack 2: 0x830
- stack 1: 0x80
- stack 0: 0x3A0
6384	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x830
6385	 EB	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
6386	 ED	ADD		 	 
- stack 0: 0x834
6387	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
6388	 EF	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0xF40022010E0144030A000000A0000E008600010400000000BA000003430001
6389	 F0	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0xF40022010E0144030A000000A0000E008600010400000000BA000003430001
- stack 0: 0xF0
6390	 F2	SHR		 	 
- stack 1: 0x834
- stack 0: 0xF4
6391	 F3	JUMP		 	 
- stack 0: 0x834
6392	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x834
6393	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x834
- stack 0: 0x834
6394	 F6	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0xF40022010E0144030A000000A0000E008600010400000000BA000003430001
6395	 F7	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0xF40022010E0144030A000000A0000E008600010400000000BA000003430001
- stack 0: 0xE0
6396	 F9	SHR		 	 
- stack 1: 0x834
- stack 0: 0xF40022
6397	 FA	PUSH2	FFFF	 	 
- stack 2: 0x834
- stack 1: 0xF40022
- stack 0: 0xFFFF
6398	 FD	AND		 	 
- stack 1: 0x834
- stack 0: 0x22
6399	 FE	PUSH1	01	 	 
- stack 2: 0x834
- stack 1: 0x22
- stack 0: 0x1
6400	 100	SIGNEXTEND		 	 
- stack 1: 0x834
- stack 0: 0x22
6401	 101	PUSH2	0380	 	 
- stack 2: 0x834
- stack 1: 0x22
- stack 0: 0x380
6402	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x834
6403	 105	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
6404	 107	ADD		 	 
- stack 0: 0x838
6405	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
6406	 109	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x10E0144030A000000A0000E008600010400000000BA00000343000103620002
6407	 10A	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x10E0144030A000000A0000E008600010400000000BA00000343000103620002
- stack 0: 0xF0
6408	 10C	SHR		 	 
- stack 1: 0x838
- stack 0: 0x10E
6409	 10D	JUMP		 	 
- stack 0: 0x838
6410	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x838
6411	 10F	PUSH2	0060	 	 
- stack 1: 0x838
- stack 0: 0x60
6412	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x838
- stack 0: 0x80
6413	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x838
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
6414	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x838
- stack 0: 0x80
6415	 119	PUSH2	03A0	 	 
- stack 2: 0x838
- stack 1: 0x80
- stack 0: 0x3A0
6416	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x838
- stack 1: 0x80
- stack 0: 0x80
6417	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x838
- stack 2: 0x80
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
6418	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x838
- stack 1: 0x80
- stack 0: 0x80
6419	 123	SUB		 	 
- stack 1: 0x838
- stack 0: 0x0
6420	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x838
- stack 1: 0x0
- stack 0: 0x12C
6421	 127	JUMPI		 	 
- stack 0: 0x838
6422	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x838
- stack 0: 0x146
6423	 12B	JUMP		 	 
- stack 0: 0x838
6424	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x838
6425	 147	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
6426	 149	ADD		 	 
- stack 0: 0x83C
6427	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
6428	 14B	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x30A000000A0000E008600010400000000BA00000343000103620002037CFFE8
6429	 14C	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x30A000000A0000E008600010400000000BA00000343000103620002037CFFE8
- stack 0: 0xF0
6430	 14E	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x30A
6431	 14F	JUMP		 	 
- stack 0: 0x83C
6432	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x83C
6433	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x83C
- stack 0: 0x83C
6434	 30C	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x30A000000A0000E008600010400000000BA00000343000103620002037CFFE8
6435	 30D	PUSH1	E0	 	 
- stack 2: 0x83C
- stack 1: 0x30A000000A0000E008600010400000000BA00000343000103620002037CFFE8
- stack 0: 0xE0
6436	 30F	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x30A0000
6437	 310	PUSH2	FFFF	 	 
- stack 2: 0x83C
- stack 1: 0x30A0000
- stack 0: 0xFFFF
6438	 313	AND		 	 
- stack 1: 0x83C
- stack 0: 0x0
6439	 314	PUSH1	01	 	 
- stack 2: 0x83C
- stack 1: 0x0
- stack 0: 0x1
6440	 316	SIGNEXTEND		 	 
- stack 1: 0x83C
- stack 0: 0x0
6441	 317	PUSH2	0080	 	 
- stack 2: 0x83C
- stack 1: 0x0
- stack 0: 0x80
6442	 31A	MSTORE		 	  ;; # store to x4
- stack 0: 0x83C
6443	 31B	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
6444	 31D	ADD		 	 
- stack 0: 0x840
6445	 31E	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
6446	 31F	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0xA0000E008600010400000000BA00000343000103620002037CFFE801500004
6447	 320	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0xA0000E008600010400000000BA00000343000103620002037CFFE801500004
- stack 0: 0xF0
6448	 322	SHR		 	 
- stack 1: 0x840
- stack 0: 0xA0
6449	 323	JUMP		 	 
- stack 0: 0x840
6450	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x840
6451	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x840
- stack 0: 0x840
6452	 A2	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0xA0000E008600010400000000BA00000343000103620002037CFFE801500004
6453	 A3	PUSH1	E0	 	 
- stack 2: 0x840
- stack 1: 0xA0000E008600010400000000BA00000343000103620002037CFFE801500004
- stack 0: 0xE0
6454	 A5	SHR		 	 
- stack 1: 0x840
- stack 0: 0xA0000E
6455	 A6	PUSH2	FFFF	 	 
- stack 2: 0x840
- stack 1: 0xA0000E
- stack 0: 0xFFFF
6456	 A9	AND		 	 
- stack 1: 0x840
- stack 0: 0xE
6457	 AA	PUSH1	01	 	 
- stack 2: 0x840
- stack 1: 0xE
- stack 0: 0x1
6458	 AC	SIGNEXTEND		 	 
- stack 1: 0x840
- stack 0: 0xE
6459	 AD	PUSH2	0040	 	 
- stack 2: 0x840
- stack 1: 0xE
- stack 0: 0x40
6460	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x840
6461	 B1	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
6462	 B3	ADD		 	 
- stack 0: 0x844
6463	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
6464	 B5	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x8600010400000000BA00000343000103620002037CFFE80150000400F40023
6465	 B6	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0x8600010400000000BA00000343000103620002037CFFE80150000400F40023
- stack 0: 0xF0
6466	 B8	SHR		 	 
- stack 1: 0x844
- stack 0: 0x86
6467	 B9	JUMP		 	 
- stack 0: 0x844
6468	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x844
6469	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x844
- stack 0: 0x844
6470	 88	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x8600010400000000BA00000343000103620002037CFFE80150000400F40023
6471	 89	PUSH1	E0	 	 
- stack 2: 0x844
- stack 1: 0x8600010400000000BA00000343000103620002037CFFE80150000400F40023
- stack 0: 0xE0
6472	 8B	SHR		 	 
- stack 1: 0x844
- stack 0: 0x860001
6473	 8C	PUSH2	FFFF	 	 
- stack 2: 0x844
- stack 1: 0x860001
- stack 0: 0xFFFF
6474	 8F	AND		 	 
- stack 1: 0x844
- stack 0: 0x1
6475	 90	PUSH1	01	 	 
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0x1
6476	 92	SIGNEXTEND		 	 
- stack 1: 0x844
- stack 0: 0x1
6477	 93	PUSH2	0020	 	 
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0x20
6478	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x844
6479	 97	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
6480	 99	ADD		 	 
- stack 0: 0x848
6481	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
6482	 9B	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x400000000BA00000343000103620002037CFFE80150000400F40023010E0118
6483	 9C	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x400000000BA00000343000103620002037CFFE80150000400F40023010E0118
- stack 0: 0xF0
6484	 9E	SHR		 	 
- stack 1: 0x848
- stack 0: 0x400
6485	 9F	JUMP		 	 
- stack 0: 0x848
6486	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x848
6487	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x848
- stack 0: 0x848
6488	 402	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x400000000BA00000343000103620002037CFFE80150000400F40023010E0118
6489	 403	PUSH1	E0	 	 
- stack 2: 0x848
- stack 1: 0x400000000BA00000343000103620002037CFFE80150000400F40023010E0118
- stack 0: 0xE0
6490	 405	SHR		 	 
- stack 1: 0x848
- stack 0: 0x4000000
6491	 406	PUSH2	FFFF	 	 
- stack 2: 0x848
- stack 1: 0x4000000
- stack 0: 0xFFFF
6492	 409	AND		 	 
- stack 1: 0x848
- stack 0: 0x0
6493	 40A	PUSH1	01	 	 
- stack 2: 0x848
- stack 1: 0x0
- stack 0: 0x1
6494	 40C	SIGNEXTEND		 	 
- stack 1: 0x848
- stack 0: 0x0
6495	 40D	POP		 	 
- stack 0: 0x848
6496	 40E	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
6497	 410	ADD		 	 
- stack 0: 0x84C
6498	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
6499	 412	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0xBA00000343000103620002037CFFE80150000400F40023010E0118030A0000
6500	 413	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0xBA00000343000103620002037CFFE80150000400F40023010E0118030A0000
- stack 0: 0xF0
6501	 415	SHR		 	 
- stack 1: 0x84C
- stack 0: 0xBA
6502	 416	JUMP		 	 
- stack 0: 0x84C
6503	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x84C
6504	 BB	PUSH2	0020	 	 
- stack 1: 0x84C
- stack 0: 0x20
6505	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x84C
- stack 0: 0x1
6506	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6507	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x84C
- stack 0: 0x1
6508	 C5	PUSH2	0040	 	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x40
6509	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0xE
6510	 C9	PUSH1	1F	 	 
- stack 3: 0x84C
- stack 2: 0x1
- stack 1: 0xE
- stack 0: 0x1F
6511	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0xE
6512	 CC	SHL		 	 
- stack 1: 0x84C
- stack 0: 0x4000
6513	 CD	PUSH2	0060	 	 
- stack 2: 0x84C
- stack 1: 0x4000
- stack 0: 0x60
6514	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x84C
6515	 D1	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
6516	 D3	ADD		 	 
- stack 0: 0x850
6517	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
6518	 D5	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x343000103620002037CFFE80150000400F40023010E0118030A000000A0001F
6519	 D6	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0x343000103620002037CFFE80150000400F40023010E0118030A000000A0001F
- stack 0: 0xF0
6520	 D8	SHR		 	 
- stack 1: 0x850
- stack 0: 0x343
6521	 D9	JUMP		 	 
- stack 0: 0x850
6522	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x850
6523	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x850
- stack 0: 0x850
6524	 345	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x343000103620002037CFFE80150000400F40023010E0118030A000000A0001F
6525	 346	PUSH1	E0	 	 
- stack 2: 0x850
- stack 1: 0x343000103620002037CFFE80150000400F40023010E0118030A000000A0001F
- stack 0: 0xE0
6526	 348	SHR		 	 
- stack 1: 0x850
- stack 0: 0x3430001
6527	 349	PUSH2	FFFF	 	 
- stack 2: 0x850
- stack 1: 0x3430001
- stack 0: 0xFFFF
6528	 34C	AND		 	 
- stack 1: 0x850
- stack 0: 0x1
6529	 34D	PUSH1	01	 	 
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0x1
6530	 34F	SIGNEXTEND		 	 
- stack 1: 0x850
- stack 0: 0x1
6531	 350	PUSH2	0080	 	 
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0x80
6532	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0x0
6533	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x850
- stack 0: 0x1
6534	 355	PUSH2	0080	 	 
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0x80
6535	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x850
6536	 359	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
6537	 35B	ADD		 	 
- stack 0: 0x854
6538	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
6539	 35D	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x3620002037CFFE80150000400F40023010E0118030A000000A0001F00860001
6540	 35E	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x3620002037CFFE80150000400F40023010E0118030A000000A0001F00860001
- stack 0: 0xF0
6541	 360	SHR		 	 
- stack 1: 0x854
- stack 0: 0x362
6542	 361	JUMP		 	 
- stack 0: 0x854
6543	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x854
6544	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x854
- stack 0: 0x854
6545	 364	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x3620002037CFFE80150000400F40023010E0118030A000000A0001F00860001
6546	 365	PUSH1	E0	 	 
- stack 2: 0x854
- stack 1: 0x3620002037CFFE80150000400F40023010E0118030A000000A0001F00860001
- stack 0: 0xE0
6547	 367	SHR		 	 
- stack 1: 0x854
- stack 0: 0x3620002
6548	 368	PUSH2	FFFF	 	 
- stack 2: 0x854
- stack 1: 0x3620002
- stack 0: 0xFFFF
6549	 36B	AND		 	 
- stack 1: 0x854
- stack 0: 0x2
6550	 36C	PUSH1	01	 	 
- stack 2: 0x854
- stack 1: 0x2
- stack 0: 0x1
6551	 36E	SIGNEXTEND		 	 
- stack 1: 0x854
- stack 0: 0x2
6552	 36F	PUSH2	00A0	 	 
- stack 2: 0x854
- stack 1: 0x2
- stack 0: 0xA0
6553	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x854
6554	 373	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
6555	 375	ADD		 	 
- stack 0: 0x858
6556	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
6557	 377	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x37CFFE80150000400F40023010E0118030A000000A0001F0086000104000000
6558	 378	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x37CFFE80150000400F40023010E0118030A000000A0001F0086000104000000
- stack 0: 0xF0
6559	 37A	SHR		 	 
- stack 1: 0x858
- stack 0: 0x37C
6560	 37B	JUMP		 	 
- stack 0: 0x858
6561	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x858
6562	 37D	PUSH2	0080	 	 
- stack 1: 0x858
- stack 0: 0x80
6563	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x858
- stack 0: 0x1
6564	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x858
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6565	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x858
- stack 0: 0x1
6566	 387	PUSH2	00A0	 	 
- stack 2: 0x858
- stack 1: 0x1
- stack 0: 0xA0
6567	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x858
- stack 1: 0x1
- stack 0: 0x2
6568	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x858
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6569	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x858
- stack 1: 0x1
- stack 0: 0x2
6570	 391	SUB		 	 
- stack 1: 0x858
- stack 0: 0x1
6571	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x858
- stack 1: 0x1
- stack 0: 0x39A
6572	 395	JUMPI		 	 
- stack 0: 0x858
6573	 39A	JUMPDEST		 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x858
6574	 39B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x858
- stack 0: 0x858
6575	 39C	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x37CFFE80150000400F40023010E0118030A000000A0001F0086000104000000
6576	 39D	PUSH1	E0	 	 
- stack 2: 0x858
- stack 1: 0x37CFFE80150000400F40023010E0118030A000000A0001F0086000104000000
- stack 0: 0xE0
6577	 39F	SHR		 	 
- stack 1: 0x858
- stack 0: 0x37CFFE8
6578	 3A0	PUSH2	FFFF	 	 
- stack 2: 0x858
- stack 1: 0x37CFFE8
- stack 0: 0xFFFF
6579	 3A3	AND		 	 
- stack 1: 0x858
- stack 0: 0xFFE8
6580	 3A4	PUSH1	01	 	 
- stack 2: 0x858
- stack 1: 0xFFE8
- stack 0: 0x1
6581	 3A6	SIGNEXTEND		 	 
- stack 1: 0x858
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
6582	 3A7	ADD		 	 
- stack 0: 0x840
6583	 3A8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
6584	 3AD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x840
6585	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
6586	 3AF	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0xA0000E008600010400000000BA00000343000103620002037CFFE801500004
6587	 3B0	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0xA0000E008600010400000000BA00000343000103620002037CFFE801500004
- stack 0: 0xF0
6588	 3B2	SHR		 	 
- stack 1: 0x840
- stack 0: 0xA0
6589	 3B3	JUMP		 	 
- stack 0: 0x840
6590	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x840
6591	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x840
- stack 0: 0x840
6592	 A2	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0xA0000E008600010400000000BA00000343000103620002037CFFE801500004
6593	 A3	PUSH1	E0	 	 
- stack 2: 0x840
- stack 1: 0xA0000E008600010400000000BA00000343000103620002037CFFE801500004
- stack 0: 0xE0
6594	 A5	SHR		 	 
- stack 1: 0x840
- stack 0: 0xA0000E
6595	 A6	PUSH2	FFFF	 	 
- stack 2: 0x840
- stack 1: 0xA0000E
- stack 0: 0xFFFF
6596	 A9	AND		 	 
- stack 1: 0x840
- stack 0: 0xE
6597	 AA	PUSH1	01	 	 
- stack 2: 0x840
- stack 1: 0xE
- stack 0: 0x1
6598	 AC	SIGNEXTEND		 	 
- stack 1: 0x840
- stack 0: 0xE
6599	 AD	PUSH2	0040	 	 
- stack 2: 0x840
- stack 1: 0xE
- stack 0: 0x40
6600	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x840
6601	 B1	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
6602	 B3	ADD		 	 
- stack 0: 0x844
6603	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
6604	 B5	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x8600010400000000BA00000343000103620002037CFFE80150000400F40023
6605	 B6	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0x8600010400000000BA00000343000103620002037CFFE80150000400F40023
- stack 0: 0xF0
6606	 B8	SHR		 	 
- stack 1: 0x844
- stack 0: 0x86
6607	 B9	JUMP		 	 
- stack 0: 0x844
6608	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x844
6609	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x844
- stack 0: 0x844
6610	 88	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x8600010400000000BA00000343000103620002037CFFE80150000400F40023
6611	 89	PUSH1	E0	 	 
- stack 2: 0x844
- stack 1: 0x8600010400000000BA00000343000103620002037CFFE80150000400F40023
- stack 0: 0xE0
6612	 8B	SHR		 	 
- stack 1: 0x844
- stack 0: 0x860001
6613	 8C	PUSH2	FFFF	 	 
- stack 2: 0x844
- stack 1: 0x860001
- stack 0: 0xFFFF
6614	 8F	AND		 	 
- stack 1: 0x844
- stack 0: 0x1
6615	 90	PUSH1	01	 	 
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0x1
6616	 92	SIGNEXTEND		 	 
- stack 1: 0x844
- stack 0: 0x1
6617	 93	PUSH2	0020	 	 
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0x20
6618	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x844
6619	 97	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
6620	 99	ADD		 	 
- stack 0: 0x848
6621	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
6622	 9B	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x400000000BA00000343000103620002037CFFE80150000400F40023010E0118
6623	 9C	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x400000000BA00000343000103620002037CFFE80150000400F40023010E0118
- stack 0: 0xF0
6624	 9E	SHR		 	 
- stack 1: 0x848
- stack 0: 0x400
6625	 9F	JUMP		 	 
- stack 0: 0x848
6626	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x848
6627	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x848
- stack 0: 0x848
6628	 402	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x400000000BA00000343000103620002037CFFE80150000400F40023010E0118
6629	 403	PUSH1	E0	 	 
- stack 2: 0x848
- stack 1: 0x400000000BA00000343000103620002037CFFE80150000400F40023010E0118
- stack 0: 0xE0
6630	 405	SHR		 	 
- stack 1: 0x848
- stack 0: 0x4000000
6631	 406	PUSH2	FFFF	 	 
- stack 2: 0x848
- stack 1: 0x4000000
- stack 0: 0xFFFF
6632	 409	AND		 	 
- stack 1: 0x848
- stack 0: 0x0
6633	 40A	PUSH1	01	 	 
- stack 2: 0x848
- stack 1: 0x0
- stack 0: 0x1
6634	 40C	SIGNEXTEND		 	 
- stack 1: 0x848
- stack 0: 0x0
6635	 40D	POP		 	 
- stack 0: 0x848
6636	 40E	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
6637	 410	ADD		 	 
- stack 0: 0x84C
6638	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
6639	 412	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0xBA00000343000103620002037CFFE80150000400F40023010E0118030A0000
6640	 413	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0xBA00000343000103620002037CFFE80150000400F40023010E0118030A0000
- stack 0: 0xF0
6641	 415	SHR		 	 
- stack 1: 0x84C
- stack 0: 0xBA
6642	 416	JUMP		 	 
- stack 0: 0x84C
6643	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x84C
6644	 BB	PUSH2	0020	 	 
- stack 1: 0x84C
- stack 0: 0x20
6645	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x84C
- stack 0: 0x1
6646	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6647	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x84C
- stack 0: 0x1
6648	 C5	PUSH2	0040	 	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x40
6649	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0xE
6650	 C9	PUSH1	1F	 	 
- stack 3: 0x84C
- stack 2: 0x1
- stack 1: 0xE
- stack 0: 0x1F
6651	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0xE
6652	 CC	SHL		 	 
- stack 1: 0x84C
- stack 0: 0x4000
6653	 CD	PUSH2	0060	 	 
- stack 2: 0x84C
- stack 1: 0x4000
- stack 0: 0x60
6654	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x84C
6655	 D1	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
6656	 D3	ADD		 	 
- stack 0: 0x850
6657	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
6658	 D5	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x343000103620002037CFFE80150000400F40023010E0118030A000000A0001F
6659	 D6	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0x343000103620002037CFFE80150000400F40023010E0118030A000000A0001F
- stack 0: 0xF0
6660	 D8	SHR		 	 
- stack 1: 0x850
- stack 0: 0x343
6661	 D9	JUMP		 	 
- stack 0: 0x850
6662	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x850
6663	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x850
- stack 0: 0x850
6664	 345	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x343000103620002037CFFE80150000400F40023010E0118030A000000A0001F
6665	 346	PUSH1	E0	 	 
- stack 2: 0x850
- stack 1: 0x343000103620002037CFFE80150000400F40023010E0118030A000000A0001F
- stack 0: 0xE0
6666	 348	SHR		 	 
- stack 1: 0x850
- stack 0: 0x3430001
6667	 349	PUSH2	FFFF	 	 
- stack 2: 0x850
- stack 1: 0x3430001
- stack 0: 0xFFFF
6668	 34C	AND		 	 
- stack 1: 0x850
- stack 0: 0x1
6669	 34D	PUSH1	01	 	 
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0x1
6670	 34F	SIGNEXTEND		 	 
- stack 1: 0x850
- stack 0: 0x1
6671	 350	PUSH2	0080	 	 
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0x80
6672	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0x1
6673	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x850
- stack 0: 0x2
6674	 355	PUSH2	0080	 	 
- stack 2: 0x850
- stack 1: 0x2
- stack 0: 0x80
6675	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x850
6676	 359	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
6677	 35B	ADD		 	 
- stack 0: 0x854
6678	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
6679	 35D	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x3620002037CFFE80150000400F40023010E0118030A000000A0001F00860001
6680	 35E	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x3620002037CFFE80150000400F40023010E0118030A000000A0001F00860001
- stack 0: 0xF0
6681	 360	SHR		 	 
- stack 1: 0x854
- stack 0: 0x362
6682	 361	JUMP		 	 
- stack 0: 0x854
6683	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x854
6684	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x854
- stack 0: 0x854
6685	 364	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x3620002037CFFE80150000400F40023010E0118030A000000A0001F00860001
6686	 365	PUSH1	E0	 	 
- stack 2: 0x854
- stack 1: 0x3620002037CFFE80150000400F40023010E0118030A000000A0001F00860001
- stack 0: 0xE0
6687	 367	SHR		 	 
- stack 1: 0x854
- stack 0: 0x3620002
6688	 368	PUSH2	FFFF	 	 
- stack 2: 0x854
- stack 1: 0x3620002
- stack 0: 0xFFFF
6689	 36B	AND		 	 
- stack 1: 0x854
- stack 0: 0x2
6690	 36C	PUSH1	01	 	 
- stack 2: 0x854
- stack 1: 0x2
- stack 0: 0x1
6691	 36E	SIGNEXTEND		 	 
- stack 1: 0x854
- stack 0: 0x2
6692	 36F	PUSH2	00A0	 	 
- stack 2: 0x854
- stack 1: 0x2
- stack 0: 0xA0
6693	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x854
6694	 373	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
6695	 375	ADD		 	 
- stack 0: 0x858
6696	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
6697	 377	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x37CFFE80150000400F40023010E0118030A000000A0001F0086000104000000
6698	 378	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x37CFFE80150000400F40023010E0118030A000000A0001F0086000104000000
- stack 0: 0xF0
6699	 37A	SHR		 	 
- stack 1: 0x858
- stack 0: 0x37C
6700	 37B	JUMP		 	 
- stack 0: 0x858
6701	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x858
6702	 37D	PUSH2	0080	 	 
- stack 1: 0x858
- stack 0: 0x80
6703	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x858
- stack 0: 0x2
6704	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x858
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6705	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x858
- stack 0: 0x2
6706	 387	PUSH2	00A0	 	 
- stack 2: 0x858
- stack 1: 0x2
- stack 0: 0xA0
6707	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x858
- stack 1: 0x2
- stack 0: 0x2
6708	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x858
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6709	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x858
- stack 1: 0x2
- stack 0: 0x2
6710	 391	SUB		 	 
- stack 1: 0x858
- stack 0: 0x0
6711	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x858
- stack 1: 0x0
- stack 0: 0x39A
6712	 395	JUMPI		 	 
- stack 0: 0x858
6713	 396	PUSH2	03B4	 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 1: 0x858
- stack 0: 0x3B4
6714	 399	JUMP		 	 
- stack 0: 0x858
6715	 3B4	JUMPDEST		 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x858
6716	 3B5	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
6717	 3B7	ADD		 	 
- stack 0: 0x85C
6718	 3B8	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
6719	 3B9	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x150000400F40023010E0118030A000000A0001F008600010400000004000000
6720	 3BA	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x150000400F40023010E0118030A000000A0001F008600010400000004000000
- stack 0: 0xF0
6721	 3BC	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x150
6722	 3BD	JUMP		 	 
- stack 0: 0x85C
6723	 150	JUMPDEST		 ;; __riscvimpl_LUI_4eb7	  ;; # instr: lui t4,0x4(ignore imm)
- stack 0: 0x85C
6724	 151	PUSH4	00004000	 	 
- stack 1: 0x85C
- stack 0: 0x4000
6725	 156	PUSH2	03A0	 	 
- stack 2: 0x85C
- stack 1: 0x4000
- stack 0: 0x3A0
6726	 159	MSTORE		 	  ;; # store to x29
- stack 0: 0x85C
6727	 15A	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
6728	 15C	ADD		 	 
- stack 0: 0x860
6729	 15D	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
6730	 15E	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0xF40023010E0118030A000000A0001F00860001040000000400000000BA0000
6731	 15F	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0xF40023010E0118030A000000A0001F00860001040000000400000000BA0000
- stack 0: 0xF0
6732	 161	SHR		 	 
- stack 1: 0x860
- stack 0: 0xF4
6733	 162	JUMP		 	 
- stack 0: 0x860
6734	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x860
6735	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x860
- stack 0: 0x860
6736	 F6	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0xF40023010E0118030A000000A0001F00860001040000000400000000BA0000
6737	 F7	PUSH1	E0	 	 
- stack 2: 0x860
- stack 1: 0xF40023010E0118030A000000A0001F00860001040000000400000000BA0000
- stack 0: 0xE0
6738	 F9	SHR		 	 
- stack 1: 0x860
- stack 0: 0xF40023
6739	 FA	PUSH2	FFFF	 	 
- stack 2: 0x860
- stack 1: 0xF40023
- stack 0: 0xFFFF
6740	 FD	AND		 	 
- stack 1: 0x860
- stack 0: 0x23
6741	 FE	PUSH1	01	 	 
- stack 2: 0x860
- stack 1: 0x23
- stack 0: 0x1
6742	 100	SIGNEXTEND		 	 
- stack 1: 0x860
- stack 0: 0x23
6743	 101	PUSH2	0380	 	 
- stack 2: 0x860
- stack 1: 0x23
- stack 0: 0x380
6744	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x860
6745	 105	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
6746	 107	ADD		 	 
- stack 0: 0x864
6747	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
6748	 109	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x10E0118030A000000A0001F00860001040000000400000000BA000003430001
6749	 10A	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0x10E0118030A000000A0001F00860001040000000400000000BA000003430001
- stack 0: 0xF0
6750	 10C	SHR		 	 
- stack 1: 0x864
- stack 0: 0x10E
6751	 10D	JUMP		 	 
- stack 0: 0x864
6752	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x864
6753	 10F	PUSH2	0060	 	 
- stack 1: 0x864
- stack 0: 0x60
6754	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x864
- stack 0: 0x4000
6755	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x864
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
6756	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x864
- stack 0: 0x4000
6757	 119	PUSH2	03A0	 	 
- stack 2: 0x864
- stack 1: 0x4000
- stack 0: 0x3A0
6758	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x864
- stack 1: 0x4000
- stack 0: 0x4000
6759	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x864
- stack 2: 0x4000
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
6760	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x864
- stack 1: 0x4000
- stack 0: 0x4000
6761	 123	SUB		 	 
- stack 1: 0x864
- stack 0: 0x0
6762	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x864
- stack 1: 0x0
- stack 0: 0x12C
6763	 127	JUMPI		 	 
- stack 0: 0x864
6764	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x864
- stack 0: 0x146
6765	 12B	JUMP		 	 
- stack 0: 0x864
6766	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x864
6767	 147	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
6768	 149	ADD		 	 
- stack 0: 0x868
6769	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
6770	 14B	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x30A000000A0001F00860001040000000400000000BA00000343000103620002
6771	 14C	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0x30A000000A0001F00860001040000000400000000BA00000343000103620002
- stack 0: 0xF0
6772	 14E	SHR		 	 
- stack 1: 0x868
- stack 0: 0x30A
6773	 14F	JUMP		 	 
- stack 0: 0x868
6774	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x868
6775	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x868
- stack 0: 0x868
6776	 30C	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x30A000000A0001F00860001040000000400000000BA00000343000103620002
6777	 30D	PUSH1	E0	 	 
- stack 2: 0x868
- stack 1: 0x30A000000A0001F00860001040000000400000000BA00000343000103620002
- stack 0: 0xE0
6778	 30F	SHR		 	 
- stack 1: 0x868
- stack 0: 0x30A0000
6779	 310	PUSH2	FFFF	 	 
- stack 2: 0x868
- stack 1: 0x30A0000
- stack 0: 0xFFFF
6780	 313	AND		 	 
- stack 1: 0x868
- stack 0: 0x0
6781	 314	PUSH1	01	 	 
- stack 2: 0x868
- stack 1: 0x0
- stack 0: 0x1
6782	 316	SIGNEXTEND		 	 
- stack 1: 0x868
- stack 0: 0x0
6783	 317	PUSH2	0080	 	 
- stack 2: 0x868
- stack 1: 0x0
- stack 0: 0x80
6784	 31A	MSTORE		 	  ;; # store to x4
- stack 0: 0x868
6785	 31B	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
6786	 31D	ADD		 	 
- stack 0: 0x86C
6787	 31E	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
6788	 31F	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0xA0001F00860001040000000400000000BA00000343000103620002037CFFE4
6789	 320	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0xA0001F00860001040000000400000000BA00000343000103620002037CFFE4
- stack 0: 0xF0
6790	 322	SHR		 	 
- stack 1: 0x86C
- stack 0: 0xA0
6791	 323	JUMP		 	 
- stack 0: 0x86C
6792	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x86C
6793	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x86C
- stack 0: 0x86C
6794	 A2	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0xA0001F00860001040000000400000000BA00000343000103620002037CFFE4
6795	 A3	PUSH1	E0	 	 
- stack 2: 0x86C
- stack 1: 0xA0001F00860001040000000400000000BA00000343000103620002037CFFE4
- stack 0: 0xE0
6796	 A5	SHR		 	 
- stack 1: 0x86C
- stack 0: 0xA0001F
6797	 A6	PUSH2	FFFF	 	 
- stack 2: 0x86C
- stack 1: 0xA0001F
- stack 0: 0xFFFF
6798	 A9	AND		 	 
- stack 1: 0x86C
- stack 0: 0x1F
6799	 AA	PUSH1	01	 	 
- stack 2: 0x86C
- stack 1: 0x1F
- stack 0: 0x1
6800	 AC	SIGNEXTEND		 	 
- stack 1: 0x86C
- stack 0: 0x1F
6801	 AD	PUSH2	0040	 	 
- stack 2: 0x86C
- stack 1: 0x1F
- stack 0: 0x40
6802	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x86C
6803	 B1	PUSH1	04	 	 
- stack 1: 0x86C
- stack 0: 0x4
6804	 B3	ADD		 	 
- stack 0: 0x870
6805	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
6806	 B5	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x860001040000000400000000BA00000343000103620002037CFFE401630000
6807	 B6	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0x860001040000000400000000BA00000343000103620002037CFFE401630000
- stack 0: 0xF0
6808	 B8	SHR		 	 
- stack 1: 0x870
- stack 0: 0x86
6809	 B9	JUMP		 	 
- stack 0: 0x870
6810	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x870
6811	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x870
- stack 0: 0x870
6812	 88	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x860001040000000400000000BA00000343000103620002037CFFE401630000
6813	 89	PUSH1	E0	 	 
- stack 2: 0x870
- stack 1: 0x860001040000000400000000BA00000343000103620002037CFFE401630000
- stack 0: 0xE0
6814	 8B	SHR		 	 
- stack 1: 0x870
- stack 0: 0x860001
6815	 8C	PUSH2	FFFF	 	 
- stack 2: 0x870
- stack 1: 0x860001
- stack 0: 0xFFFF
6816	 8F	AND		 	 
- stack 1: 0x870
- stack 0: 0x1
6817	 90	PUSH1	01	 	 
- stack 2: 0x870
- stack 1: 0x1
- stack 0: 0x1
6818	 92	SIGNEXTEND		 	 
- stack 1: 0x870
- stack 0: 0x1
6819	 93	PUSH2	0020	 	 
- stack 2: 0x870
- stack 1: 0x1
- stack 0: 0x20
6820	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x870
6821	 97	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
6822	 99	ADD		 	 
- stack 0: 0x874
6823	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
6824	 9B	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x40000000400000000BA00000343000103620002037CFFE40163000000F40024
6825	 9C	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0x40000000400000000BA00000343000103620002037CFFE40163000000F40024
- stack 0: 0xF0
6826	 9E	SHR		 	 
- stack 1: 0x874
- stack 0: 0x400
6827	 9F	JUMP		 	 
- stack 0: 0x874
6828	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x874
6829	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x874
- stack 0: 0x874
6830	 402	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x40000000400000000BA00000343000103620002037CFFE40163000000F40024
6831	 403	PUSH1	E0	 	 
- stack 2: 0x874
- stack 1: 0x40000000400000000BA00000343000103620002037CFFE40163000000F40024
- stack 0: 0xE0
6832	 405	SHR		 	 
- stack 1: 0x874
- stack 0: 0x4000000
6833	 406	PUSH2	FFFF	 	 
- stack 2: 0x874
- stack 1: 0x4000000
- stack 0: 0xFFFF
6834	 409	AND		 	 
- stack 1: 0x874
- stack 0: 0x0
6835	 40A	PUSH1	01	 	 
- stack 2: 0x874
- stack 1: 0x0
- stack 0: 0x1
6836	 40C	SIGNEXTEND		 	 
- stack 1: 0x874
- stack 0: 0x0
6837	 40D	POP		 	 
- stack 0: 0x874
6838	 40E	PUSH1	04	 	 
- stack 1: 0x874
- stack 0: 0x4
6839	 410	ADD		 	 
- stack 0: 0x878
6840	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x878
- stack 0: 0x878
6841	 412	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x400000000BA00000343000103620002037CFFE40163000000F40024010E00E8
6842	 413	PUSH1	F0	 	 
- stack 2: 0x878
- stack 1: 0x400000000BA00000343000103620002037CFFE40163000000F40024010E00E8
- stack 0: 0xF0
6843	 415	SHR		 	 
- stack 1: 0x878
- stack 0: 0x400
6844	 416	JUMP		 	 
- stack 0: 0x878
6845	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x878
6846	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x878
- stack 0: 0x878
6847	 402	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x400000000BA00000343000103620002037CFFE40163000000F40024010E00E8
6848	 403	PUSH1	E0	 	 
- stack 2: 0x878
- stack 1: 0x400000000BA00000343000103620002037CFFE40163000000F40024010E00E8
- stack 0: 0xE0
6849	 405	SHR		 	 
- stack 1: 0x878
- stack 0: 0x4000000
6850	 406	PUSH2	FFFF	 	 
- stack 2: 0x878
- stack 1: 0x4000000
- stack 0: 0xFFFF
6851	 409	AND		 	 
- stack 1: 0x878
- stack 0: 0x0
6852	 40A	PUSH1	01	 	 
- stack 2: 0x878
- stack 1: 0x0
- stack 0: 0x1
6853	 40C	SIGNEXTEND		 	 
- stack 1: 0x878
- stack 0: 0x0
6854	 40D	POP		 	 
- stack 0: 0x878
6855	 40E	PUSH1	04	 	 
- stack 1: 0x878
- stack 0: 0x4
6856	 410	ADD		 	 
- stack 0: 0x87C
6857	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x87C
- stack 0: 0x87C
6858	 412	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0xBA00000343000103620002037CFFE40163000000F40024010E00E8030A0000
6859	 413	PUSH1	F0	 	 
- stack 2: 0x87C
- stack 1: 0xBA00000343000103620002037CFFE40163000000F40024010E00E8030A0000
- stack 0: 0xF0
6860	 415	SHR		 	 
- stack 1: 0x87C
- stack 0: 0xBA
6861	 416	JUMP		 	 
- stack 0: 0x87C
6862	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x87C
6863	 BB	PUSH2	0020	 	 
- stack 1: 0x87C
- stack 0: 0x20
6864	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x87C
- stack 0: 0x1
6865	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x87C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6866	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x87C
- stack 0: 0x1
6867	 C5	PUSH2	0040	 	 
- stack 2: 0x87C
- stack 1: 0x1
- stack 0: 0x40
6868	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x87C
- stack 1: 0x1
- stack 0: 0x1F
6869	 C9	PUSH1	1F	 	 
- stack 3: 0x87C
- stack 2: 0x1
- stack 1: 0x1F
- stack 0: 0x1F
6870	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x87C
- stack 1: 0x1
- stack 0: 0x1F
6871	 CC	SHL		 	 
- stack 1: 0x87C
- stack 0: 0x80000000
6872	 CD	PUSH2	0060	 	 
- stack 2: 0x87C
- stack 1: 0x80000000
- stack 0: 0x60
6873	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x87C
6874	 D1	PUSH1	04	 	 
- stack 1: 0x87C
- stack 0: 0x4
6875	 D3	ADD		 	 
- stack 0: 0x880
6876	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
6877	 D5	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x343000103620002037CFFE40163000000F40024010E00E8030A000000A00007
6878	 D6	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0x343000103620002037CFFE40163000000F40024010E00E8030A000000A00007
- stack 0: 0xF0
6879	 D8	SHR		 	 
- stack 1: 0x880
- stack 0: 0x343
6880	 D9	JUMP		 	 
- stack 0: 0x880
6881	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x880
6882	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x880
- stack 0: 0x880
6883	 345	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x343000103620002037CFFE40163000000F40024010E00E8030A000000A00007
6884	 346	PUSH1	E0	 	 
- stack 2: 0x880
- stack 1: 0x343000103620002037CFFE40163000000F40024010E00E8030A000000A00007
- stack 0: 0xE0
6885	 348	SHR		 	 
- stack 1: 0x880
- stack 0: 0x3430001
6886	 349	PUSH2	FFFF	 	 
- stack 2: 0x880
- stack 1: 0x3430001
- stack 0: 0xFFFF
6887	 34C	AND		 	 
- stack 1: 0x880
- stack 0: 0x1
6888	 34D	PUSH1	01	 	 
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x1
6889	 34F	SIGNEXTEND		 	 
- stack 1: 0x880
- stack 0: 0x1
6890	 350	PUSH2	0080	 	 
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x80
6891	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x0
6892	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x880
- stack 0: 0x1
6893	 355	PUSH2	0080	 	 
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x80
6894	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x880
6895	 359	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
6896	 35B	ADD		 	 
- stack 0: 0x884
6897	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
6898	 35D	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x3620002037CFFE40163000000F40024010E00E8030A000000A0000704000000
6899	 35E	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0x3620002037CFFE40163000000F40024010E00E8030A000000A0000704000000
- stack 0: 0xF0
6900	 360	SHR		 	 
- stack 1: 0x884
- stack 0: 0x362
6901	 361	JUMP		 	 
- stack 0: 0x884
6902	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x884
6903	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x884
- stack 0: 0x884
6904	 364	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x3620002037CFFE40163000000F40024010E00E8030A000000A0000704000000
6905	 365	PUSH1	E0	 	 
- stack 2: 0x884
- stack 1: 0x3620002037CFFE40163000000F40024010E00E8030A000000A0000704000000
- stack 0: 0xE0
6906	 367	SHR		 	 
- stack 1: 0x884
- stack 0: 0x3620002
6907	 368	PUSH2	FFFF	 	 
- stack 2: 0x884
- stack 1: 0x3620002
- stack 0: 0xFFFF
6908	 36B	AND		 	 
- stack 1: 0x884
- stack 0: 0x2
6909	 36C	PUSH1	01	 	 
- stack 2: 0x884
- stack 1: 0x2
- stack 0: 0x1
6910	 36E	SIGNEXTEND		 	 
- stack 1: 0x884
- stack 0: 0x2
6911	 36F	PUSH2	00A0	 	 
- stack 2: 0x884
- stack 1: 0x2
- stack 0: 0xA0
6912	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x884
6913	 373	PUSH1	04	 	 
- stack 1: 0x884
- stack 0: 0x4
6914	 375	ADD		 	 
- stack 0: 0x888
6915	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x888
- stack 0: 0x888
6916	 377	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x37CFFE40163000000F40024010E00E8030A000000A000070400000000860001
6917	 378	PUSH1	F0	 	 
- stack 2: 0x888
- stack 1: 0x37CFFE40163000000F40024010E00E8030A000000A000070400000000860001
- stack 0: 0xF0
6918	 37A	SHR		 	 
- stack 1: 0x888
- stack 0: 0x37C
6919	 37B	JUMP		 	 
- stack 0: 0x888
6920	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x888
6921	 37D	PUSH2	0080	 	 
- stack 1: 0x888
- stack 0: 0x80
6922	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x888
- stack 0: 0x1
6923	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x888
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6924	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x888
- stack 0: 0x1
6925	 387	PUSH2	00A0	 	 
- stack 2: 0x888
- stack 1: 0x1
- stack 0: 0xA0
6926	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x888
- stack 1: 0x1
- stack 0: 0x2
6927	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x888
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6928	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x888
- stack 1: 0x1
- stack 0: 0x2
6929	 391	SUB		 	 
- stack 1: 0x888
- stack 0: 0x1
6930	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x888
- stack 1: 0x1
- stack 0: 0x39A
6931	 395	JUMPI		 	 
- stack 0: 0x888
6932	 39A	JUMPDEST		 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x888
6933	 39B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x888
- stack 0: 0x888
6934	 39C	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x37CFFE40163000000F40024010E00E8030A000000A000070400000000860001
6935	 39D	PUSH1	E0	 	 
- stack 2: 0x888
- stack 1: 0x37CFFE40163000000F40024010E00E8030A000000A000070400000000860001
- stack 0: 0xE0
6936	 39F	SHR		 	 
- stack 1: 0x888
- stack 0: 0x37CFFE4
6937	 3A0	PUSH2	FFFF	 	 
- stack 2: 0x888
- stack 1: 0x37CFFE4
- stack 0: 0xFFFF
6938	 3A3	AND		 	 
- stack 1: 0x888
- stack 0: 0xFFE4
6939	 3A4	PUSH1	01	 	 
- stack 2: 0x888
- stack 1: 0xFFE4
- stack 0: 0x1
6940	 3A6	SIGNEXTEND		 	 
- stack 1: 0x888
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
6941	 3A7	ADD		 	 
- stack 0: 0x86C
6942	 3A8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x86C
- stack 0: 0xFFFFFFFF
6943	 3AD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x86C
6944	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
6945	 3AF	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0xA0001F00860001040000000400000000BA00000343000103620002037CFFE4
6946	 3B0	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0xA0001F00860001040000000400000000BA00000343000103620002037CFFE4
- stack 0: 0xF0
6947	 3B2	SHR		 	 
- stack 1: 0x86C
- stack 0: 0xA0
6948	 3B3	JUMP		 	 
- stack 0: 0x86C
6949	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x86C
6950	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x86C
- stack 0: 0x86C
6951	 A2	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0xA0001F00860001040000000400000000BA00000343000103620002037CFFE4
6952	 A3	PUSH1	E0	 	 
- stack 2: 0x86C
- stack 1: 0xA0001F00860001040000000400000000BA00000343000103620002037CFFE4
- stack 0: 0xE0
6953	 A5	SHR		 	 
- stack 1: 0x86C
- stack 0: 0xA0001F
6954	 A6	PUSH2	FFFF	 	 
- stack 2: 0x86C
- stack 1: 0xA0001F
- stack 0: 0xFFFF
6955	 A9	AND		 	 
- stack 1: 0x86C
- stack 0: 0x1F
6956	 AA	PUSH1	01	 	 
- stack 2: 0x86C
- stack 1: 0x1F
- stack 0: 0x1
6957	 AC	SIGNEXTEND		 	 
- stack 1: 0x86C
- stack 0: 0x1F
6958	 AD	PUSH2	0040	 	 
- stack 2: 0x86C
- stack 1: 0x1F
- stack 0: 0x40
6959	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x86C
6960	 B1	PUSH1	04	 	 
- stack 1: 0x86C
- stack 0: 0x4
6961	 B3	ADD		 	 
- stack 0: 0x870
6962	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
6963	 B5	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x860001040000000400000000BA00000343000103620002037CFFE401630000
6964	 B6	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0x860001040000000400000000BA00000343000103620002037CFFE401630000
- stack 0: 0xF0
6965	 B8	SHR		 	 
- stack 1: 0x870
- stack 0: 0x86
6966	 B9	JUMP		 	 
- stack 0: 0x870
6967	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x870
6968	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x870
- stack 0: 0x870
6969	 88	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x860001040000000400000000BA00000343000103620002037CFFE401630000
6970	 89	PUSH1	E0	 	 
- stack 2: 0x870
- stack 1: 0x860001040000000400000000BA00000343000103620002037CFFE401630000
- stack 0: 0xE0
6971	 8B	SHR		 	 
- stack 1: 0x870
- stack 0: 0x860001
6972	 8C	PUSH2	FFFF	 	 
- stack 2: 0x870
- stack 1: 0x860001
- stack 0: 0xFFFF
6973	 8F	AND		 	 
- stack 1: 0x870
- stack 0: 0x1
6974	 90	PUSH1	01	 	 
- stack 2: 0x870
- stack 1: 0x1
- stack 0: 0x1
6975	 92	SIGNEXTEND		 	 
- stack 1: 0x870
- stack 0: 0x1
6976	 93	PUSH2	0020	 	 
- stack 2: 0x870
- stack 1: 0x1
- stack 0: 0x20
6977	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x870
6978	 97	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
6979	 99	ADD		 	 
- stack 0: 0x874
6980	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
6981	 9B	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x40000000400000000BA00000343000103620002037CFFE40163000000F40024
6982	 9C	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0x40000000400000000BA00000343000103620002037CFFE40163000000F40024
- stack 0: 0xF0
6983	 9E	SHR		 	 
- stack 1: 0x874
- stack 0: 0x400
6984	 9F	JUMP		 	 
- stack 0: 0x874
6985	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x874
6986	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x874
- stack 0: 0x874
6987	 402	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x40000000400000000BA00000343000103620002037CFFE40163000000F40024
6988	 403	PUSH1	E0	 	 
- stack 2: 0x874
- stack 1: 0x40000000400000000BA00000343000103620002037CFFE40163000000F40024
- stack 0: 0xE0
6989	 405	SHR		 	 
- stack 1: 0x874
- stack 0: 0x4000000
6990	 406	PUSH2	FFFF	 	 
- stack 2: 0x874
- stack 1: 0x4000000
- stack 0: 0xFFFF
6991	 409	AND		 	 
- stack 1: 0x874
- stack 0: 0x0
6992	 40A	PUSH1	01	 	 
- stack 2: 0x874
- stack 1: 0x0
- stack 0: 0x1
6993	 40C	SIGNEXTEND		 	 
- stack 1: 0x874
- stack 0: 0x0
6994	 40D	POP		 	 
- stack 0: 0x874
6995	 40E	PUSH1	04	 	 
- stack 1: 0x874
- stack 0: 0x4
6996	 410	ADD		 	 
- stack 0: 0x878
6997	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x878
- stack 0: 0x878
6998	 412	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x400000000BA00000343000103620002037CFFE40163000000F40024010E00E8
6999	 413	PUSH1	F0	 	 
- stack 2: 0x878
- stack 1: 0x400000000BA00000343000103620002037CFFE40163000000F40024010E00E8
- stack 0: 0xF0
7000	 415	SHR		 	 
- stack 1: 0x878
- stack 0: 0x400
7001	 416	JUMP		 	 
- stack 0: 0x878
7002	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x878
7003	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x878
- stack 0: 0x878
7004	 402	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x400000000BA00000343000103620002037CFFE40163000000F40024010E00E8
7005	 403	PUSH1	E0	 	 
- stack 2: 0x878
- stack 1: 0x400000000BA00000343000103620002037CFFE40163000000F40024010E00E8
- stack 0: 0xE0
7006	 405	SHR		 	 
- stack 1: 0x878
- stack 0: 0x4000000
7007	 406	PUSH2	FFFF	 	 
- stack 2: 0x878
- stack 1: 0x4000000
- stack 0: 0xFFFF
7008	 409	AND		 	 
- stack 1: 0x878
- stack 0: 0x0
7009	 40A	PUSH1	01	 	 
- stack 2: 0x878
- stack 1: 0x0
- stack 0: 0x1
7010	 40C	SIGNEXTEND		 	 
- stack 1: 0x878
- stack 0: 0x0
7011	 40D	POP		 	 
- stack 0: 0x878
7012	 40E	PUSH1	04	 	 
- stack 1: 0x878
- stack 0: 0x4
7013	 410	ADD		 	 
- stack 0: 0x87C
7014	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x87C
- stack 0: 0x87C
7015	 412	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0xBA00000343000103620002037CFFE40163000000F40024010E00E8030A0000
7016	 413	PUSH1	F0	 	 
- stack 2: 0x87C
- stack 1: 0xBA00000343000103620002037CFFE40163000000F40024010E00E8030A0000
- stack 0: 0xF0
7017	 415	SHR		 	 
- stack 1: 0x87C
- stack 0: 0xBA
7018	 416	JUMP		 	 
- stack 0: 0x87C
7019	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x87C
7020	 BB	PUSH2	0020	 	 
- stack 1: 0x87C
- stack 0: 0x20
7021	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x87C
- stack 0: 0x1
7022	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x87C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7023	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x87C
- stack 0: 0x1
7024	 C5	PUSH2	0040	 	 
- stack 2: 0x87C
- stack 1: 0x1
- stack 0: 0x40
7025	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x87C
- stack 1: 0x1
- stack 0: 0x1F
7026	 C9	PUSH1	1F	 	 
- stack 3: 0x87C
- stack 2: 0x1
- stack 1: 0x1F
- stack 0: 0x1F
7027	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x87C
- stack 1: 0x1
- stack 0: 0x1F
7028	 CC	SHL		 	 
- stack 1: 0x87C
- stack 0: 0x80000000
7029	 CD	PUSH2	0060	 	 
- stack 2: 0x87C
- stack 1: 0x80000000
- stack 0: 0x60
7030	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x87C
7031	 D1	PUSH1	04	 	 
- stack 1: 0x87C
- stack 0: 0x4
7032	 D3	ADD		 	 
- stack 0: 0x880
7033	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
7034	 D5	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x343000103620002037CFFE40163000000F40024010E00E8030A000000A00007
7035	 D6	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0x343000103620002037CFFE40163000000F40024010E00E8030A000000A00007
- stack 0: 0xF0
7036	 D8	SHR		 	 
- stack 1: 0x880
- stack 0: 0x343
7037	 D9	JUMP		 	 
- stack 0: 0x880
7038	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x880
7039	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x880
- stack 0: 0x880
7040	 345	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x343000103620002037CFFE40163000000F40024010E00E8030A000000A00007
7041	 346	PUSH1	E0	 	 
- stack 2: 0x880
- stack 1: 0x343000103620002037CFFE40163000000F40024010E00E8030A000000A00007
- stack 0: 0xE0
7042	 348	SHR		 	 
- stack 1: 0x880
- stack 0: 0x3430001
7043	 349	PUSH2	FFFF	 	 
- stack 2: 0x880
- stack 1: 0x3430001
- stack 0: 0xFFFF
7044	 34C	AND		 	 
- stack 1: 0x880
- stack 0: 0x1
7045	 34D	PUSH1	01	 	 
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x1
7046	 34F	SIGNEXTEND		 	 
- stack 1: 0x880
- stack 0: 0x1
7047	 350	PUSH2	0080	 	 
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x80
7048	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x1
7049	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x880
- stack 0: 0x2
7050	 355	PUSH2	0080	 	 
- stack 2: 0x880
- stack 1: 0x2
- stack 0: 0x80
7051	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x880
7052	 359	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
7053	 35B	ADD		 	 
- stack 0: 0x884
7054	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
7055	 35D	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x3620002037CFFE40163000000F40024010E00E8030A000000A0000704000000
7056	 35E	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0x3620002037CFFE40163000000F40024010E00E8030A000000A0000704000000
- stack 0: 0xF0
7057	 360	SHR		 	 
- stack 1: 0x884
- stack 0: 0x362
7058	 361	JUMP		 	 
- stack 0: 0x884
7059	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x884
7060	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x884
- stack 0: 0x884
7061	 364	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x3620002037CFFE40163000000F40024010E00E8030A000000A0000704000000
7062	 365	PUSH1	E0	 	 
- stack 2: 0x884
- stack 1: 0x3620002037CFFE40163000000F40024010E00E8030A000000A0000704000000
- stack 0: 0xE0
7063	 367	SHR		 	 
- stack 1: 0x884
- stack 0: 0x3620002
7064	 368	PUSH2	FFFF	 	 
- stack 2: 0x884
- stack 1: 0x3620002
- stack 0: 0xFFFF
7065	 36B	AND		 	 
- stack 1: 0x884
- stack 0: 0x2
7066	 36C	PUSH1	01	 	 
- stack 2: 0x884
- stack 1: 0x2
- stack 0: 0x1
7067	 36E	SIGNEXTEND		 	 
- stack 1: 0x884
- stack 0: 0x2
7068	 36F	PUSH2	00A0	 	 
- stack 2: 0x884
- stack 1: 0x2
- stack 0: 0xA0
7069	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x884
7070	 373	PUSH1	04	 	 
- stack 1: 0x884
- stack 0: 0x4
7071	 375	ADD		 	 
- stack 0: 0x888
7072	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x888
- stack 0: 0x888
7073	 377	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x37CFFE40163000000F40024010E00E8030A000000A000070400000000860001
7074	 378	PUSH1	F0	 	 
- stack 2: 0x888
- stack 1: 0x37CFFE40163000000F40024010E00E8030A000000A000070400000000860001
- stack 0: 0xF0
7075	 37A	SHR		 	 
- stack 1: 0x888
- stack 0: 0x37C
7076	 37B	JUMP		 	 
- stack 0: 0x888
7077	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x888
7078	 37D	PUSH2	0080	 	 
- stack 1: 0x888
- stack 0: 0x80
7079	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x888
- stack 0: 0x2
7080	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7081	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x888
- stack 0: 0x2
7082	 387	PUSH2	00A0	 	 
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0xA0
7083	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0x2
7084	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x888
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7085	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0x2
7086	 391	SUB		 	 
- stack 1: 0x888
- stack 0: 0x0
7087	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x888
- stack 1: 0x0
- stack 0: 0x39A
7088	 395	JUMPI		 	 
- stack 0: 0x888
7089	 396	PUSH2	03B4	 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 1: 0x888
- stack 0: 0x3B4
7090	 399	JUMP		 	 
- stack 0: 0x888
7091	 3B4	JUMPDEST		 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x888
7092	 3B5	PUSH1	04	 	 
- stack 1: 0x888
- stack 0: 0x4
7093	 3B7	ADD		 	 
- stack 0: 0x88C
7094	 3B8	DUP1		 	  ;; # executing pc
- stack 1: 0x88C
- stack 0: 0x88C
7095	 3B9	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0x163000000F40024010E00E8030A000000A00007040000000086000100BA0000
7096	 3BA	PUSH1	F0	 	 
- stack 2: 0x88C
- stack 1: 0x163000000F40024010E00E8030A000000A00007040000000086000100BA0000
- stack 0: 0xF0
7097	 3BC	SHR		 	 
- stack 1: 0x88C
- stack 0: 0x163
7098	 3BD	JUMP		 	 
- stack 0: 0x88C
7099	 163	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x88C
7100	 164	PUSH4	80000000	 	 
- stack 1: 0x88C
- stack 0: 0x80000000
7101	 169	PUSH2	03A0	 	 
- stack 2: 0x88C
- stack 1: 0x80000000
- stack 0: 0x3A0
7102	 16C	MSTORE		 	  ;; # store to x29
- stack 0: 0x88C
7103	 16D	PUSH1	04	 	 
- stack 1: 0x88C
- stack 0: 0x4
7104	 16F	ADD		 	 
- stack 0: 0x890
7105	 170	DUP1		 	  ;; # executing pc
- stack 1: 0x890
- stack 0: 0x890
7106	 171	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0xF40024010E00E8030A000000A00007040000000086000100BA000003430001
7107	 172	PUSH1	F0	 	 
- stack 2: 0x890
- stack 1: 0xF40024010E00E8030A000000A00007040000000086000100BA000003430001
- stack 0: 0xF0
7108	 174	SHR		 	 
- stack 1: 0x890
- stack 0: 0xF4
7109	 175	JUMP		 	 
- stack 0: 0x890
7110	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x890
7111	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x890
- stack 0: 0x890
7112	 F6	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0xF40024010E00E8030A000000A00007040000000086000100BA000003430001
7113	 F7	PUSH1	E0	 	 
- stack 2: 0x890
- stack 1: 0xF40024010E00E8030A000000A00007040000000086000100BA000003430001
- stack 0: 0xE0
7114	 F9	SHR		 	 
- stack 1: 0x890
- stack 0: 0xF40024
7115	 FA	PUSH2	FFFF	 	 
- stack 2: 0x890
- stack 1: 0xF40024
- stack 0: 0xFFFF
7116	 FD	AND		 	 
- stack 1: 0x890
- stack 0: 0x24
7117	 FE	PUSH1	01	 	 
- stack 2: 0x890
- stack 1: 0x24
- stack 0: 0x1
7118	 100	SIGNEXTEND		 	 
- stack 1: 0x890
- stack 0: 0x24
7119	 101	PUSH2	0380	 	 
- stack 2: 0x890
- stack 1: 0x24
- stack 0: 0x380
7120	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x890
7121	 105	PUSH1	04	 	 
- stack 1: 0x890
- stack 0: 0x4
7122	 107	ADD		 	 
- stack 0: 0x894
7123	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x894
- stack 0: 0x894
7124	 109	MLOAD		 	 
- stack 1: 0x894
- stack 0: 0x10E00E8030A000000A00007040000000086000100BA00000343000103620002
7125	 10A	PUSH1	F0	 	 
- stack 2: 0x894
- stack 1: 0x10E00E8030A000000A00007040000000086000100BA00000343000103620002
- stack 0: 0xF0
7126	 10C	SHR		 	 
- stack 1: 0x894
- stack 0: 0x10E
7127	 10D	JUMP		 	 
- stack 0: 0x894
7128	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x894
7129	 10F	PUSH2	0060	 	 
- stack 1: 0x894
- stack 0: 0x60
7130	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x894
- stack 0: 0x80000000
7131	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x894
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
7132	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x894
- stack 0: 0x80000000
7133	 119	PUSH2	03A0	 	 
- stack 2: 0x894
- stack 1: 0x80000000
- stack 0: 0x3A0
7134	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x894
- stack 1: 0x80000000
- stack 0: 0x80000000
7135	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x894
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
7136	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x894
- stack 1: 0x80000000
- stack 0: 0x80000000
7137	 123	SUB		 	 
- stack 1: 0x894
- stack 0: 0x0
7138	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x894
- stack 1: 0x0
- stack 0: 0x12C
7139	 127	JUMPI		 	 
- stack 0: 0x894
7140	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x894
- stack 0: 0x146
7141	 12B	JUMP		 	 
- stack 0: 0x894
7142	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x894
7143	 147	PUSH1	04	 	 
- stack 1: 0x894
- stack 0: 0x4
7144	 149	ADD		 	 
- stack 0: 0x898
7145	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x898
- stack 0: 0x898
7146	 14B	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0x30A000000A00007040000000086000100BA00000343000103620002037CFFE8
7147	 14C	PUSH1	F0	 	 
- stack 2: 0x898
- stack 1: 0x30A000000A00007040000000086000100BA00000343000103620002037CFFE8
- stack 0: 0xF0
7148	 14E	SHR		 	 
- stack 1: 0x898
- stack 0: 0x30A
7149	 14F	JUMP		 	 
- stack 0: 0x898
7150	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x898
7151	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x898
- stack 0: 0x898
7152	 30C	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0x30A000000A00007040000000086000100BA00000343000103620002037CFFE8
7153	 30D	PUSH1	E0	 	 
- stack 2: 0x898
- stack 1: 0x30A000000A00007040000000086000100BA00000343000103620002037CFFE8
- stack 0: 0xE0
7154	 30F	SHR		 	 
- stack 1: 0x898
- stack 0: 0x30A0000
7155	 310	PUSH2	FFFF	 	 
- stack 2: 0x898
- stack 1: 0x30A0000
- stack 0: 0xFFFF
7156	 313	AND		 	 
- stack 1: 0x898
- stack 0: 0x0
7157	 314	PUSH1	01	 	 
- stack 2: 0x898
- stack 1: 0x0
- stack 0: 0x1
7158	 316	SIGNEXTEND		 	 
- stack 1: 0x898
- stack 0: 0x0
7159	 317	PUSH2	0080	 	 
- stack 2: 0x898
- stack 1: 0x0
- stack 0: 0x80
7160	 31A	MSTORE		 	  ;; # store to x4
- stack 0: 0x898
7161	 31B	PUSH1	04	 	 
- stack 1: 0x898
- stack 0: 0x4
7162	 31D	ADD		 	 
- stack 0: 0x89C
7163	 31E	DUP1		 	  ;; # executing pc
- stack 1: 0x89C
- stack 0: 0x89C
7164	 31F	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0xA00007040000000086000100BA00000343000103620002037CFFE800DA0080
7165	 320	PUSH1	F0	 	 
- stack 2: 0x89C
- stack 1: 0xA00007040000000086000100BA00000343000103620002037CFFE800DA0080
- stack 0: 0xF0
7166	 322	SHR		 	 
- stack 1: 0x89C
- stack 0: 0xA0
7167	 323	JUMP		 	 
- stack 0: 0x89C
7168	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x89C
7169	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x89C
- stack 0: 0x89C
7170	 A2	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0xA00007040000000086000100BA00000343000103620002037CFFE800DA0080
7171	 A3	PUSH1	E0	 	 
- stack 2: 0x89C
- stack 1: 0xA00007040000000086000100BA00000343000103620002037CFFE800DA0080
- stack 0: 0xE0
7172	 A5	SHR		 	 
- stack 1: 0x89C
- stack 0: 0xA00007
7173	 A6	PUSH2	FFFF	 	 
- stack 2: 0x89C
- stack 1: 0xA00007
- stack 0: 0xFFFF
7174	 A9	AND		 	 
- stack 1: 0x89C
- stack 0: 0x7
7175	 AA	PUSH1	01	 	 
- stack 2: 0x89C
- stack 1: 0x7
- stack 0: 0x1
7176	 AC	SIGNEXTEND		 	 
- stack 1: 0x89C
- stack 0: 0x7
7177	 AD	PUSH2	0040	 	 
- stack 2: 0x89C
- stack 1: 0x7
- stack 0: 0x40
7178	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x89C
7179	 B1	PUSH1	04	 	 
- stack 1: 0x89C
- stack 0: 0x4
7180	 B3	ADD		 	 
- stack 0: 0x8A0
7181	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x8A0
- stack 0: 0x8A0
7182	 B5	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x40000000086000100BA00000343000103620002037CFFE800DA008000F40025
7183	 B6	PUSH1	F0	 	 
- stack 2: 0x8A0
- stack 1: 0x40000000086000100BA00000343000103620002037CFFE800DA008000F40025
- stack 0: 0xF0
7184	 B8	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x400
7185	 B9	JUMP		 	 
- stack 0: 0x8A0
7186	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8A0
7187	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A0
- stack 0: 0x8A0
7188	 402	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x40000000086000100BA00000343000103620002037CFFE800DA008000F40025
7189	 403	PUSH1	E0	 	 
- stack 2: 0x8A0
- stack 1: 0x40000000086000100BA00000343000103620002037CFFE800DA008000F40025
- stack 0: 0xE0
7190	 405	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x4000000
7191	 406	PUSH2	FFFF	 	 
- stack 2: 0x8A0
- stack 1: 0x4000000
- stack 0: 0xFFFF
7192	 409	AND		 	 
- stack 1: 0x8A0
- stack 0: 0x0
7193	 40A	PUSH1	01	 	 
- stack 2: 0x8A0
- stack 1: 0x0
- stack 0: 0x1
7194	 40C	SIGNEXTEND		 	 
- stack 1: 0x8A0
- stack 0: 0x0
7195	 40D	POP		 	 
- stack 0: 0x8A0
7196	 40E	PUSH1	04	 	 
- stack 1: 0x8A0
- stack 0: 0x4
7197	 410	ADD		 	 
- stack 0: 0x8A4
7198	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x8A4
- stack 0: 0x8A4
7199	 412	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0x86000100BA00000343000103620002037CFFE800DA008000F40025010E00BC
7200	 413	PUSH1	F0	 	 
- stack 2: 0x8A4
- stack 1: 0x86000100BA00000343000103620002037CFFE800DA008000F40025010E00BC
- stack 0: 0xF0
7201	 415	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0x86
7202	 416	JUMP		 	 
- stack 0: 0x8A4
7203	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x8A4
7204	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A4
- stack 0: 0x8A4
7205	 88	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0x86000100BA00000343000103620002037CFFE800DA008000F40025010E00BC
7206	 89	PUSH1	E0	 	 
- stack 2: 0x8A4
- stack 1: 0x86000100BA00000343000103620002037CFFE800DA008000F40025010E00BC
- stack 0: 0xE0
7207	 8B	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0x860001
7208	 8C	PUSH2	FFFF	 	 
- stack 2: 0x8A4
- stack 1: 0x860001
- stack 0: 0xFFFF
7209	 8F	AND		 	 
- stack 1: 0x8A4
- stack 0: 0x1
7210	 90	PUSH1	01	 	 
- stack 2: 0x8A4
- stack 1: 0x1
- stack 0: 0x1
7211	 92	SIGNEXTEND		 	 
- stack 1: 0x8A4
- stack 0: 0x1
7212	 93	PUSH2	0020	 	 
- stack 2: 0x8A4
- stack 1: 0x1
- stack 0: 0x20
7213	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x8A4
7214	 97	PUSH1	04	 	 
- stack 1: 0x8A4
- stack 0: 0x4
7215	 99	ADD		 	 
- stack 0: 0x8A8
7216	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x8A8
- stack 0: 0x8A8
7217	 9B	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0xBA00000343000103620002037CFFE800DA008000F40025010E00BC030A0000
7218	 9C	PUSH1	F0	 	 
- stack 2: 0x8A8
- stack 1: 0xBA00000343000103620002037CFFE800DA008000F40025010E00BC030A0000
- stack 0: 0xF0
7219	 9E	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0xBA
7220	 9F	JUMP		 	 
- stack 0: 0x8A8
7221	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x8A8
7222	 BB	PUSH2	0020	 	 
- stack 1: 0x8A8
- stack 0: 0x20
7223	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x8A8
- stack 0: 0x1
7224	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8A8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7225	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8A8
- stack 0: 0x1
7226	 C5	PUSH2	0040	 	 
- stack 2: 0x8A8
- stack 1: 0x1
- stack 0: 0x40
7227	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x8A8
- stack 1: 0x1
- stack 0: 0x7
7228	 C9	PUSH1	1F	 	 
- stack 3: 0x8A8
- stack 2: 0x1
- stack 1: 0x7
- stack 0: 0x1F
7229	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x8A8
- stack 1: 0x1
- stack 0: 0x7
7230	 CC	SHL		 	 
- stack 1: 0x8A8
- stack 0: 0x80
7231	 CD	PUSH2	0060	 	 
- stack 2: 0x8A8
- stack 1: 0x80
- stack 0: 0x60
7232	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x8A8
7233	 D1	PUSH1	04	 	 
- stack 1: 0x8A8
- stack 0: 0x4
7234	 D3	ADD		 	 
- stack 0: 0x8AC
7235	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x8AC
- stack 0: 0x8AC
7236	 D5	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0x343000103620002037CFFE800DA008000F40025010E00BC030A000000A0000E
7237	 D6	PUSH1	F0	 	 
- stack 2: 0x8AC
- stack 1: 0x343000103620002037CFFE800DA008000F40025010E00BC030A000000A0000E
- stack 0: 0xF0
7238	 D8	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0x343
7239	 D9	JUMP		 	 
- stack 0: 0x8AC
7240	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x8AC
7241	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8AC
- stack 0: 0x8AC
7242	 345	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0x343000103620002037CFFE800DA008000F40025010E00BC030A000000A0000E
7243	 346	PUSH1	E0	 	 
- stack 2: 0x8AC
- stack 1: 0x343000103620002037CFFE800DA008000F40025010E00BC030A000000A0000E
- stack 0: 0xE0
7244	 348	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0x3430001
7245	 349	PUSH2	FFFF	 	 
- stack 2: 0x8AC
- stack 1: 0x3430001
- stack 0: 0xFFFF
7246	 34C	AND		 	 
- stack 1: 0x8AC
- stack 0: 0x1
7247	 34D	PUSH1	01	 	 
- stack 2: 0x8AC
- stack 1: 0x1
- stack 0: 0x1
7248	 34F	SIGNEXTEND		 	 
- stack 1: 0x8AC
- stack 0: 0x1
7249	 350	PUSH2	0080	 	 
- stack 2: 0x8AC
- stack 1: 0x1
- stack 0: 0x80
7250	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x8AC
- stack 1: 0x1
- stack 0: 0x0
7251	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x8AC
- stack 0: 0x1
7252	 355	PUSH2	0080	 	 
- stack 2: 0x8AC
- stack 1: 0x1
- stack 0: 0x80
7253	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x8AC
7254	 359	PUSH1	04	 	 
- stack 1: 0x8AC
- stack 0: 0x4
7255	 35B	ADD		 	 
- stack 0: 0x8B0
7256	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x8B0
- stack 0: 0x8B0
7257	 35D	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x3620002037CFFE800DA008000F40025010E00BC030A000000A0000E04000000
7258	 35E	PUSH1	F0	 	 
- stack 2: 0x8B0
- stack 1: 0x3620002037CFFE800DA008000F40025010E00BC030A000000A0000E04000000
- stack 0: 0xF0
7259	 360	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x362
7260	 361	JUMP		 	 
- stack 0: 0x8B0
7261	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x8B0
7262	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B0
- stack 0: 0x8B0
7263	 364	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x3620002037CFFE800DA008000F40025010E00BC030A000000A0000E04000000
7264	 365	PUSH1	E0	 	 
- stack 2: 0x8B0
- stack 1: 0x3620002037CFFE800DA008000F40025010E00BC030A000000A0000E04000000
- stack 0: 0xE0
7265	 367	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x3620002
7266	 368	PUSH2	FFFF	 	 
- stack 2: 0x8B0
- stack 1: 0x3620002
- stack 0: 0xFFFF
7267	 36B	AND		 	 
- stack 1: 0x8B0
- stack 0: 0x2
7268	 36C	PUSH1	01	 	 
- stack 2: 0x8B0
- stack 1: 0x2
- stack 0: 0x1
7269	 36E	SIGNEXTEND		 	 
- stack 1: 0x8B0
- stack 0: 0x2
7270	 36F	PUSH2	00A0	 	 
- stack 2: 0x8B0
- stack 1: 0x2
- stack 0: 0xA0
7271	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x8B0
7272	 373	PUSH1	04	 	 
- stack 1: 0x8B0
- stack 0: 0x4
7273	 375	ADD		 	 
- stack 0: 0x8B4
7274	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x8B4
- stack 0: 0x8B4
7275	 377	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x37CFFE800DA008000F40025010E00BC030A000000A0000E0400000000860001
7276	 378	PUSH1	F0	 	 
- stack 2: 0x8B4
- stack 1: 0x37CFFE800DA008000F40025010E00BC030A000000A0000E0400000000860001
- stack 0: 0xF0
7277	 37A	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x37C
7278	 37B	JUMP		 	 
- stack 0: 0x8B4
7279	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x8B4
7280	 37D	PUSH2	0080	 	 
- stack 1: 0x8B4
- stack 0: 0x80
7281	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x8B4
- stack 0: 0x1
7282	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8B4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7283	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8B4
- stack 0: 0x1
7284	 387	PUSH2	00A0	 	 
- stack 2: 0x8B4
- stack 1: 0x1
- stack 0: 0xA0
7285	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x8B4
- stack 1: 0x1
- stack 0: 0x2
7286	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8B4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7287	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8B4
- stack 1: 0x1
- stack 0: 0x2
7288	 391	SUB		 	 
- stack 1: 0x8B4
- stack 0: 0x1
7289	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x8B4
- stack 1: 0x1
- stack 0: 0x39A
7290	 395	JUMPI		 	 
- stack 0: 0x8B4
7291	 39A	JUMPDEST		 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x8B4
7292	 39B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B4
- stack 0: 0x8B4
7293	 39C	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x37CFFE800DA008000F40025010E00BC030A000000A0000E0400000000860001
7294	 39D	PUSH1	E0	 	 
- stack 2: 0x8B4
- stack 1: 0x37CFFE800DA008000F40025010E00BC030A000000A0000E0400000000860001
- stack 0: 0xE0
7295	 39F	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x37CFFE8
7296	 3A0	PUSH2	FFFF	 	 
- stack 2: 0x8B4
- stack 1: 0x37CFFE8
- stack 0: 0xFFFF
7297	 3A3	AND		 	 
- stack 1: 0x8B4
- stack 0: 0xFFE8
7298	 3A4	PUSH1	01	 	 
- stack 2: 0x8B4
- stack 1: 0xFFE8
- stack 0: 0x1
7299	 3A6	SIGNEXTEND		 	 
- stack 1: 0x8B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
7300	 3A7	ADD		 	 
- stack 0: 0x89C
7301	 3A8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x89C
- stack 0: 0xFFFFFFFF
7302	 3AD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x89C
7303	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x89C
- stack 0: 0x89C
7304	 3AF	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0xA00007040000000086000100BA00000343000103620002037CFFE800DA0080
7305	 3B0	PUSH1	F0	 	 
- stack 2: 0x89C
- stack 1: 0xA00007040000000086000100BA00000343000103620002037CFFE800DA0080
- stack 0: 0xF0
7306	 3B2	SHR		 	 
- stack 1: 0x89C
- stack 0: 0xA0
7307	 3B3	JUMP		 	 
- stack 0: 0x89C
7308	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x89C
7309	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x89C
- stack 0: 0x89C
7310	 A2	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0xA00007040000000086000100BA00000343000103620002037CFFE800DA0080
7311	 A3	PUSH1	E0	 	 
- stack 2: 0x89C
- stack 1: 0xA00007040000000086000100BA00000343000103620002037CFFE800DA0080
- stack 0: 0xE0
7312	 A5	SHR		 	 
- stack 1: 0x89C
- stack 0: 0xA00007
7313	 A6	PUSH2	FFFF	 	 
- stack 2: 0x89C
- stack 1: 0xA00007
- stack 0: 0xFFFF
7314	 A9	AND		 	 
- stack 1: 0x89C
- stack 0: 0x7
7315	 AA	PUSH1	01	 	 
- stack 2: 0x89C
- stack 1: 0x7
- stack 0: 0x1
7316	 AC	SIGNEXTEND		 	 
- stack 1: 0x89C
- stack 0: 0x7
7317	 AD	PUSH2	0040	 	 
- stack 2: 0x89C
- stack 1: 0x7
- stack 0: 0x40
7318	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x89C
7319	 B1	PUSH1	04	 	 
- stack 1: 0x89C
- stack 0: 0x4
7320	 B3	ADD		 	 
- stack 0: 0x8A0
7321	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x8A0
- stack 0: 0x8A0
7322	 B5	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x40000000086000100BA00000343000103620002037CFFE800DA008000F40025
7323	 B6	PUSH1	F0	 	 
- stack 2: 0x8A0
- stack 1: 0x40000000086000100BA00000343000103620002037CFFE800DA008000F40025
- stack 0: 0xF0
7324	 B8	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x400
7325	 B9	JUMP		 	 
- stack 0: 0x8A0
7326	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8A0
7327	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A0
- stack 0: 0x8A0
7328	 402	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x40000000086000100BA00000343000103620002037CFFE800DA008000F40025
7329	 403	PUSH1	E0	 	 
- stack 2: 0x8A0
- stack 1: 0x40000000086000100BA00000343000103620002037CFFE800DA008000F40025
- stack 0: 0xE0
7330	 405	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x4000000
7331	 406	PUSH2	FFFF	 	 
- stack 2: 0x8A0
- stack 1: 0x4000000
- stack 0: 0xFFFF
7332	 409	AND		 	 
- stack 1: 0x8A0
- stack 0: 0x0
7333	 40A	PUSH1	01	 	 
- stack 2: 0x8A0
- stack 1: 0x0
- stack 0: 0x1
7334	 40C	SIGNEXTEND		 	 
- stack 1: 0x8A0
- stack 0: 0x0
7335	 40D	POP		 	 
- stack 0: 0x8A0
7336	 40E	PUSH1	04	 	 
- stack 1: 0x8A0
- stack 0: 0x4
7337	 410	ADD		 	 
- stack 0: 0x8A4
7338	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x8A4
- stack 0: 0x8A4
7339	 412	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0x86000100BA00000343000103620002037CFFE800DA008000F40025010E00BC
7340	 413	PUSH1	F0	 	 
- stack 2: 0x8A4
- stack 1: 0x86000100BA00000343000103620002037CFFE800DA008000F40025010E00BC
- stack 0: 0xF0
7341	 415	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0x86
7342	 416	JUMP		 	 
- stack 0: 0x8A4
7343	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x8A4
7344	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A4
- stack 0: 0x8A4
7345	 88	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0x86000100BA00000343000103620002037CFFE800DA008000F40025010E00BC
7346	 89	PUSH1	E0	 	 
- stack 2: 0x8A4
- stack 1: 0x86000100BA00000343000103620002037CFFE800DA008000F40025010E00BC
- stack 0: 0xE0
7347	 8B	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0x860001
7348	 8C	PUSH2	FFFF	 	 
- stack 2: 0x8A4
- stack 1: 0x860001
- stack 0: 0xFFFF
7349	 8F	AND		 	 
- stack 1: 0x8A4
- stack 0: 0x1
7350	 90	PUSH1	01	 	 
- stack 2: 0x8A4
- stack 1: 0x1
- stack 0: 0x1
7351	 92	SIGNEXTEND		 	 
- stack 1: 0x8A4
- stack 0: 0x1
7352	 93	PUSH2	0020	 	 
- stack 2: 0x8A4
- stack 1: 0x1
- stack 0: 0x20
7353	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x8A4
7354	 97	PUSH1	04	 	 
- stack 1: 0x8A4
- stack 0: 0x4
7355	 99	ADD		 	 
- stack 0: 0x8A8
7356	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x8A8
- stack 0: 0x8A8
7357	 9B	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0xBA00000343000103620002037CFFE800DA008000F40025010E00BC030A0000
7358	 9C	PUSH1	F0	 	 
- stack 2: 0x8A8
- stack 1: 0xBA00000343000103620002037CFFE800DA008000F40025010E00BC030A0000
- stack 0: 0xF0
7359	 9E	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0xBA
7360	 9F	JUMP		 	 
- stack 0: 0x8A8
7361	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x8A8
7362	 BB	PUSH2	0020	 	 
- stack 1: 0x8A8
- stack 0: 0x20
7363	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x8A8
- stack 0: 0x1
7364	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8A8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7365	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8A8
- stack 0: 0x1
7366	 C5	PUSH2	0040	 	 
- stack 2: 0x8A8
- stack 1: 0x1
- stack 0: 0x40
7367	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x8A8
- stack 1: 0x1
- stack 0: 0x7
7368	 C9	PUSH1	1F	 	 
- stack 3: 0x8A8
- stack 2: 0x1
- stack 1: 0x7
- stack 0: 0x1F
7369	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x8A8
- stack 1: 0x1
- stack 0: 0x7
7370	 CC	SHL		 	 
- stack 1: 0x8A8
- stack 0: 0x80
7371	 CD	PUSH2	0060	 	 
- stack 2: 0x8A8
- stack 1: 0x80
- stack 0: 0x60
7372	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x8A8
7373	 D1	PUSH1	04	 	 
- stack 1: 0x8A8
- stack 0: 0x4
7374	 D3	ADD		 	 
- stack 0: 0x8AC
7375	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x8AC
- stack 0: 0x8AC
7376	 D5	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0x343000103620002037CFFE800DA008000F40025010E00BC030A000000A0000E
7377	 D6	PUSH1	F0	 	 
- stack 2: 0x8AC
- stack 1: 0x343000103620002037CFFE800DA008000F40025010E00BC030A000000A0000E
- stack 0: 0xF0
7378	 D8	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0x343
7379	 D9	JUMP		 	 
- stack 0: 0x8AC
7380	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x8AC
7381	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8AC
- stack 0: 0x8AC
7382	 345	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0x343000103620002037CFFE800DA008000F40025010E00BC030A000000A0000E
7383	 346	PUSH1	E0	 	 
- stack 2: 0x8AC
- stack 1: 0x343000103620002037CFFE800DA008000F40025010E00BC030A000000A0000E
- stack 0: 0xE0
7384	 348	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0x3430001
7385	 349	PUSH2	FFFF	 	 
- stack 2: 0x8AC
- stack 1: 0x3430001
- stack 0: 0xFFFF
7386	 34C	AND		 	 
- stack 1: 0x8AC
- stack 0: 0x1
7387	 34D	PUSH1	01	 	 
- stack 2: 0x8AC
- stack 1: 0x1
- stack 0: 0x1
7388	 34F	SIGNEXTEND		 	 
- stack 1: 0x8AC
- stack 0: 0x1
7389	 350	PUSH2	0080	 	 
- stack 2: 0x8AC
- stack 1: 0x1
- stack 0: 0x80
7390	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x8AC
- stack 1: 0x1
- stack 0: 0x1
7391	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x8AC
- stack 0: 0x2
7392	 355	PUSH2	0080	 	 
- stack 2: 0x8AC
- stack 1: 0x2
- stack 0: 0x80
7393	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x8AC
7394	 359	PUSH1	04	 	 
- stack 1: 0x8AC
- stack 0: 0x4
7395	 35B	ADD		 	 
- stack 0: 0x8B0
7396	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x8B0
- stack 0: 0x8B0
7397	 35D	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x3620002037CFFE800DA008000F40025010E00BC030A000000A0000E04000000
7398	 35E	PUSH1	F0	 	 
- stack 2: 0x8B0
- stack 1: 0x3620002037CFFE800DA008000F40025010E00BC030A000000A0000E04000000
- stack 0: 0xF0
7399	 360	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x362
7400	 361	JUMP		 	 
- stack 0: 0x8B0
7401	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x8B0
7402	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B0
- stack 0: 0x8B0
7403	 364	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x3620002037CFFE800DA008000F40025010E00BC030A000000A0000E04000000
7404	 365	PUSH1	E0	 	 
- stack 2: 0x8B0
- stack 1: 0x3620002037CFFE800DA008000F40025010E00BC030A000000A0000E04000000
- stack 0: 0xE0
7405	 367	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x3620002
7406	 368	PUSH2	FFFF	 	 
- stack 2: 0x8B0
- stack 1: 0x3620002
- stack 0: 0xFFFF
7407	 36B	AND		 	 
- stack 1: 0x8B0
- stack 0: 0x2
7408	 36C	PUSH1	01	 	 
- stack 2: 0x8B0
- stack 1: 0x2
- stack 0: 0x1
7409	 36E	SIGNEXTEND		 	 
- stack 1: 0x8B0
- stack 0: 0x2
7410	 36F	PUSH2	00A0	 	 
- stack 2: 0x8B0
- stack 1: 0x2
- stack 0: 0xA0
7411	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x8B0
7412	 373	PUSH1	04	 	 
- stack 1: 0x8B0
- stack 0: 0x4
7413	 375	ADD		 	 
- stack 0: 0x8B4
7414	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x8B4
- stack 0: 0x8B4
7415	 377	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x37CFFE800DA008000F40025010E00BC030A000000A0000E0400000000860001
7416	 378	PUSH1	F0	 	 
- stack 2: 0x8B4
- stack 1: 0x37CFFE800DA008000F40025010E00BC030A000000A0000E0400000000860001
- stack 0: 0xF0
7417	 37A	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x37C
7418	 37B	JUMP		 	 
- stack 0: 0x8B4
7419	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x8B4
7420	 37D	PUSH2	0080	 	 
- stack 1: 0x8B4
- stack 0: 0x80
7421	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x8B4
- stack 0: 0x2
7422	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8B4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7423	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8B4
- stack 0: 0x2
7424	 387	PUSH2	00A0	 	 
- stack 2: 0x8B4
- stack 1: 0x2
- stack 0: 0xA0
7425	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x8B4
- stack 1: 0x2
- stack 0: 0x2
7426	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8B4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7427	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8B4
- stack 1: 0x2
- stack 0: 0x2
7428	 391	SUB		 	 
- stack 1: 0x8B4
- stack 0: 0x0
7429	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x8B4
- stack 1: 0x0
- stack 0: 0x39A
7430	 395	JUMPI		 	 
- stack 0: 0x8B4
7431	 396	PUSH2	03B4	 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 1: 0x8B4
- stack 0: 0x3B4
7432	 399	JUMP		 	 
- stack 0: 0x8B4
7433	 3B4	JUMPDEST		 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x8B4
7434	 3B5	PUSH1	04	 	 
- stack 1: 0x8B4
- stack 0: 0x4
7435	 3B7	ADD		 	 
- stack 0: 0x8B8
7436	 3B8	DUP1		 	  ;; # executing pc
- stack 1: 0x8B8
- stack 0: 0x8B8
7437	 3B9	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0xDA008000F40025010E00BC030A000000A0000E040000000086000104000000
7438	 3BA	PUSH1	F0	 	 
- stack 2: 0x8B8
- stack 1: 0xDA008000F40025010E00BC030A000000A0000E040000000086000104000000
- stack 0: 0xF0
7439	 3BC	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0xDA
7440	 3BD	JUMP		 	 
- stack 0: 0x8B8
7441	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x8B8
7442	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B8
- stack 0: 0x8B8
7443	 DC	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0xDA008000F40025010E00BC030A000000A0000E040000000086000104000000
7444	 DD	PUSH1	E0	 	 
- stack 2: 0x8B8
- stack 1: 0xDA008000F40025010E00BC030A000000A0000E040000000086000104000000
- stack 0: 0xE0
7445	 DF	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0xDA0080
7446	 E0	PUSH2	FFFF	 	 
- stack 2: 0x8B8
- stack 1: 0xDA0080
- stack 0: 0xFFFF
7447	 E3	AND		 	 
- stack 1: 0x8B8
- stack 0: 0x80
7448	 E4	PUSH1	01	 	 
- stack 2: 0x8B8
- stack 1: 0x80
- stack 0: 0x1
7449	 E6	SIGNEXTEND		 	 
- stack 1: 0x8B8
- stack 0: 0x80
7450	 E7	PUSH2	03A0	 	 
- stack 2: 0x8B8
- stack 1: 0x80
- stack 0: 0x3A0
7451	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x8B8
7452	 EB	PUSH1	04	 	 
- stack 1: 0x8B8
- stack 0: 0x4
7453	 ED	ADD		 	 
- stack 0: 0x8BC
7454	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x8BC
- stack 0: 0x8BC
7455	 EF	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0xF40025010E00BC030A000000A0000E04000000008600010400000000BA0000
7456	 F0	PUSH1	F0	 	 
- stack 2: 0x8BC
- stack 1: 0xF40025010E00BC030A000000A0000E04000000008600010400000000BA0000
- stack 0: 0xF0
7457	 F2	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0xF4
7458	 F3	JUMP		 	 
- stack 0: 0x8BC
7459	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8BC
7460	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8BC
- stack 0: 0x8BC
7461	 F6	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0xF40025010E00BC030A000000A0000E04000000008600010400000000BA0000
7462	 F7	PUSH1	E0	 	 
- stack 2: 0x8BC
- stack 1: 0xF40025010E00BC030A000000A0000E04000000008600010400000000BA0000
- stack 0: 0xE0
7463	 F9	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0xF40025
7464	 FA	PUSH2	FFFF	 	 
- stack 2: 0x8BC
- stack 1: 0xF40025
- stack 0: 0xFFFF
7465	 FD	AND		 	 
- stack 1: 0x8BC
- stack 0: 0x25
7466	 FE	PUSH1	01	 	 
- stack 2: 0x8BC
- stack 1: 0x25
- stack 0: 0x1
7467	 100	SIGNEXTEND		 	 
- stack 1: 0x8BC
- stack 0: 0x25
7468	 101	PUSH2	0380	 	 
- stack 2: 0x8BC
- stack 1: 0x25
- stack 0: 0x380
7469	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x8BC
7470	 105	PUSH1	04	 	 
- stack 1: 0x8BC
- stack 0: 0x4
7471	 107	ADD		 	 
- stack 0: 0x8C0
7472	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x8C0
- stack 0: 0x8C0
7473	 109	MLOAD		 	 
- stack 1: 0x8C0
- stack 0: 0x10E00BC030A000000A0000E04000000008600010400000000BA000003430001
7474	 10A	PUSH1	F0	 	 
- stack 2: 0x8C0
- stack 1: 0x10E00BC030A000000A0000E04000000008600010400000000BA000003430001
- stack 0: 0xF0
7475	 10C	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0x10E
7476	 10D	JUMP		 	 
- stack 0: 0x8C0
7477	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x8C0
7478	 10F	PUSH2	0060	 	 
- stack 1: 0x8C0
- stack 0: 0x60
7479	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x8C0
- stack 0: 0x80
7480	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8C0
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
7481	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8C0
- stack 0: 0x80
7482	 119	PUSH2	03A0	 	 
- stack 2: 0x8C0
- stack 1: 0x80
- stack 0: 0x3A0
7483	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x8C0
- stack 1: 0x80
- stack 0: 0x80
7484	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8C0
- stack 2: 0x80
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
7485	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8C0
- stack 1: 0x80
- stack 0: 0x80
7486	 123	SUB		 	 
- stack 1: 0x8C0
- stack 0: 0x0
7487	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x8C0
- stack 1: 0x0
- stack 0: 0x12C
7488	 127	JUMPI		 	 
- stack 0: 0x8C0
7489	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x8C0
- stack 0: 0x146
7490	 12B	JUMP		 	 
- stack 0: 0x8C0
7491	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x8C0
7492	 147	PUSH1	04	 	 
- stack 1: 0x8C0
- stack 0: 0x4
7493	 149	ADD		 	 
- stack 0: 0x8C4
7494	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x8C4
- stack 0: 0x8C4
7495	 14B	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0x30A000000A0000E04000000008600010400000000BA00000343000103620002
7496	 14C	PUSH1	F0	 	 
- stack 2: 0x8C4
- stack 1: 0x30A000000A0000E04000000008600010400000000BA00000343000103620002
- stack 0: 0xF0
7497	 14E	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0x30A
7498	 14F	JUMP		 	 
- stack 0: 0x8C4
7499	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x8C4
7500	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C4
- stack 0: 0x8C4
7501	 30C	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0x30A000000A0000E04000000008600010400000000BA00000343000103620002
7502	 30D	PUSH1	E0	 	 
- stack 2: 0x8C4
- stack 1: 0x30A000000A0000E04000000008600010400000000BA00000343000103620002
- stack 0: 0xE0
7503	 30F	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0x30A0000
7504	 310	PUSH2	FFFF	 	 
- stack 2: 0x8C4
- stack 1: 0x30A0000
- stack 0: 0xFFFF
7505	 313	AND		 	 
- stack 1: 0x8C4
- stack 0: 0x0
7506	 314	PUSH1	01	 	 
- stack 2: 0x8C4
- stack 1: 0x0
- stack 0: 0x1
7507	 316	SIGNEXTEND		 	 
- stack 1: 0x8C4
- stack 0: 0x0
7508	 317	PUSH2	0080	 	 
- stack 2: 0x8C4
- stack 1: 0x0
- stack 0: 0x80
7509	 31A	MSTORE		 	  ;; # store to x4
- stack 0: 0x8C4
7510	 31B	PUSH1	04	 	 
- stack 1: 0x8C4
- stack 0: 0x4
7511	 31D	ADD		 	 
- stack 0: 0x8C8
7512	 31E	DUP1		 	  ;; # executing pc
- stack 1: 0x8C8
- stack 0: 0x8C8
7513	 31F	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0xA0000E04000000008600010400000000BA00000343000103620002037CFFE4
7514	 320	PUSH1	F0	 	 
- stack 2: 0x8C8
- stack 1: 0xA0000E04000000008600010400000000BA00000343000103620002037CFFE4
- stack 0: 0xF0
7515	 322	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0xA0
7516	 323	JUMP		 	 
- stack 0: 0x8C8
7517	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x8C8
7518	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C8
- stack 0: 0x8C8
7519	 A2	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0xA0000E04000000008600010400000000BA00000343000103620002037CFFE4
7520	 A3	PUSH1	E0	 	 
- stack 2: 0x8C8
- stack 1: 0xA0000E04000000008600010400000000BA00000343000103620002037CFFE4
- stack 0: 0xE0
7521	 A5	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0xA0000E
7522	 A6	PUSH2	FFFF	 	 
- stack 2: 0x8C8
- stack 1: 0xA0000E
- stack 0: 0xFFFF
7523	 A9	AND		 	 
- stack 1: 0x8C8
- stack 0: 0xE
7524	 AA	PUSH1	01	 	 
- stack 2: 0x8C8
- stack 1: 0xE
- stack 0: 0x1
7525	 AC	SIGNEXTEND		 	 
- stack 1: 0x8C8
- stack 0: 0xE
7526	 AD	PUSH2	0040	 	 
- stack 2: 0x8C8
- stack 1: 0xE
- stack 0: 0x40
7527	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x8C8
7528	 B1	PUSH1	04	 	 
- stack 1: 0x8C8
- stack 0: 0x4
7529	 B3	ADD		 	 
- stack 0: 0x8CC
7530	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x8CC
- stack 0: 0x8CC
7531	 B5	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x4000000008600010400000000BA00000343000103620002037CFFE401500004
7532	 B6	PUSH1	F0	 	 
- stack 2: 0x8CC
- stack 1: 0x4000000008600010400000000BA00000343000103620002037CFFE401500004
- stack 0: 0xF0
7533	 B8	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x400
7534	 B9	JUMP		 	 
- stack 0: 0x8CC
7535	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8CC
7536	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8CC
- stack 0: 0x8CC
7537	 402	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x4000000008600010400000000BA00000343000103620002037CFFE401500004
7538	 403	PUSH1	E0	 	 
- stack 2: 0x8CC
- stack 1: 0x4000000008600010400000000BA00000343000103620002037CFFE401500004
- stack 0: 0xE0
7539	 405	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x4000000
7540	 406	PUSH2	FFFF	 	 
- stack 2: 0x8CC
- stack 1: 0x4000000
- stack 0: 0xFFFF
7541	 409	AND		 	 
- stack 1: 0x8CC
- stack 0: 0x0
7542	 40A	PUSH1	01	 	 
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0x1
7543	 40C	SIGNEXTEND		 	 
- stack 1: 0x8CC
- stack 0: 0x0
7544	 40D	POP		 	 
- stack 0: 0x8CC
7545	 40E	PUSH1	04	 	 
- stack 1: 0x8CC
- stack 0: 0x4
7546	 410	ADD		 	 
- stack 0: 0x8D0
7547	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x8D0
- stack 0: 0x8D0
7548	 412	MLOAD		 	 
- stack 1: 0x8D0
- stack 0: 0x8600010400000000BA00000343000103620002037CFFE40150000400F40026
7549	 413	PUSH1	F0	 	 
- stack 2: 0x8D0
- stack 1: 0x8600010400000000BA00000343000103620002037CFFE40150000400F40026
- stack 0: 0xF0
7550	 415	SHR		 	 
- stack 1: 0x8D0
- stack 0: 0x86
7551	 416	JUMP		 	 
- stack 0: 0x8D0
7552	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x8D0
7553	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8D0
- stack 0: 0x8D0
7554	 88	MLOAD		 	 
- stack 1: 0x8D0
- stack 0: 0x8600010400000000BA00000343000103620002037CFFE40150000400F40026
7555	 89	PUSH1	E0	 	 
- stack 2: 0x8D0
- stack 1: 0x8600010400000000BA00000343000103620002037CFFE40150000400F40026
- stack 0: 0xE0
7556	 8B	SHR		 	 
- stack 1: 0x8D0
- stack 0: 0x860001
7557	 8C	PUSH2	FFFF	 	 
- stack 2: 0x8D0
- stack 1: 0x860001
- stack 0: 0xFFFF
7558	 8F	AND		 	 
- stack 1: 0x8D0
- stack 0: 0x1
7559	 90	PUSH1	01	 	 
- stack 2: 0x8D0
- stack 1: 0x1
- stack 0: 0x1
7560	 92	SIGNEXTEND		 	 
- stack 1: 0x8D0
- stack 0: 0x1
7561	 93	PUSH2	0020	 	 
- stack 2: 0x8D0
- stack 1: 0x1
- stack 0: 0x20
7562	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x8D0
7563	 97	PUSH1	04	 	 
- stack 1: 0x8D0
- stack 0: 0x4
7564	 99	ADD		 	 
- stack 0: 0x8D4
7565	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x8D4
- stack 0: 0x8D4
7566	 9B	MLOAD		 	 
- stack 1: 0x8D4
- stack 0: 0x400000000BA00000343000103620002037CFFE40150000400F40026010E008C
7567	 9C	PUSH1	F0	 	 
- stack 2: 0x8D4
- stack 1: 0x400000000BA00000343000103620002037CFFE40150000400F40026010E008C
- stack 0: 0xF0
7568	 9E	SHR		 	 
- stack 1: 0x8D4
- stack 0: 0x400
7569	 9F	JUMP		 	 
- stack 0: 0x8D4
7570	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8D4
7571	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8D4
- stack 0: 0x8D4
7572	 402	MLOAD		 	 
- stack 1: 0x8D4
- stack 0: 0x400000000BA00000343000103620002037CFFE40150000400F40026010E008C
7573	 403	PUSH1	E0	 	 
- stack 2: 0x8D4
- stack 1: 0x400000000BA00000343000103620002037CFFE40150000400F40026010E008C
- stack 0: 0xE0
7574	 405	SHR		 	 
- stack 1: 0x8D4
- stack 0: 0x4000000
7575	 406	PUSH2	FFFF	 	 
- stack 2: 0x8D4
- stack 1: 0x4000000
- stack 0: 0xFFFF
7576	 409	AND		 	 
- stack 1: 0x8D4
- stack 0: 0x0
7577	 40A	PUSH1	01	 	 
- stack 2: 0x8D4
- stack 1: 0x0
- stack 0: 0x1
7578	 40C	SIGNEXTEND		 	 
- stack 1: 0x8D4
- stack 0: 0x0
7579	 40D	POP		 	 
- stack 0: 0x8D4
7580	 40E	PUSH1	04	 	 
- stack 1: 0x8D4
- stack 0: 0x4
7581	 410	ADD		 	 
- stack 0: 0x8D8
7582	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x8D8
- stack 0: 0x8D8
7583	 412	MLOAD		 	 
- stack 1: 0x8D8
- stack 0: 0xBA00000343000103620002037CFFE40150000400F40026010E008C030A0000
7584	 413	PUSH1	F0	 	 
- stack 2: 0x8D8
- stack 1: 0xBA00000343000103620002037CFFE40150000400F40026010E008C030A0000
- stack 0: 0xF0
7585	 415	SHR		 	 
- stack 1: 0x8D8
- stack 0: 0xBA
7586	 416	JUMP		 	 
- stack 0: 0x8D8
7587	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x8D8
7588	 BB	PUSH2	0020	 	 
- stack 1: 0x8D8
- stack 0: 0x20
7589	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x8D8
- stack 0: 0x1
7590	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8D8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7591	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8D8
- stack 0: 0x1
7592	 C5	PUSH2	0040	 	 
- stack 2: 0x8D8
- stack 1: 0x1
- stack 0: 0x40
7593	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x8D8
- stack 1: 0x1
- stack 0: 0xE
7594	 C9	PUSH1	1F	 	 
- stack 3: 0x8D8
- stack 2: 0x1
- stack 1: 0xE
- stack 0: 0x1F
7595	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x8D8
- stack 1: 0x1
- stack 0: 0xE
7596	 CC	SHL		 	 
- stack 1: 0x8D8
- stack 0: 0x4000
7597	 CD	PUSH2	0060	 	 
- stack 2: 0x8D8
- stack 1: 0x4000
- stack 0: 0x60
7598	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x8D8
7599	 D1	PUSH1	04	 	 
- stack 1: 0x8D8
- stack 0: 0x4
7600	 D3	ADD		 	 
- stack 0: 0x8DC
7601	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x8DC
- stack 0: 0x8DC
7602	 D5	MLOAD		 	 
- stack 1: 0x8DC
- stack 0: 0x343000103620002037CFFE40150000400F40026010E008C030A000000A0001F
7603	 D6	PUSH1	F0	 	 
- stack 2: 0x8DC
- stack 1: 0x343000103620002037CFFE40150000400F40026010E008C030A000000A0001F
- stack 0: 0xF0
7604	 D8	SHR		 	 
- stack 1: 0x8DC
- stack 0: 0x343
7605	 D9	JUMP		 	 
- stack 0: 0x8DC
7606	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x8DC
7607	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8DC
- stack 0: 0x8DC
7608	 345	MLOAD		 	 
- stack 1: 0x8DC
- stack 0: 0x343000103620002037CFFE40150000400F40026010E008C030A000000A0001F
7609	 346	PUSH1	E0	 	 
- stack 2: 0x8DC
- stack 1: 0x343000103620002037CFFE40150000400F40026010E008C030A000000A0001F
- stack 0: 0xE0
7610	 348	SHR		 	 
- stack 1: 0x8DC
- stack 0: 0x3430001
7611	 349	PUSH2	FFFF	 	 
- stack 2: 0x8DC
- stack 1: 0x3430001
- stack 0: 0xFFFF
7612	 34C	AND		 	 
- stack 1: 0x8DC
- stack 0: 0x1
7613	 34D	PUSH1	01	 	 
- stack 2: 0x8DC
- stack 1: 0x1
- stack 0: 0x1
7614	 34F	SIGNEXTEND		 	 
- stack 1: 0x8DC
- stack 0: 0x1
7615	 350	PUSH2	0080	 	 
- stack 2: 0x8DC
- stack 1: 0x1
- stack 0: 0x80
7616	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x8DC
- stack 1: 0x1
- stack 0: 0x0
7617	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x8DC
- stack 0: 0x1
7618	 355	PUSH2	0080	 	 
- stack 2: 0x8DC
- stack 1: 0x1
- stack 0: 0x80
7619	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x8DC
7620	 359	PUSH1	04	 	 
- stack 1: 0x8DC
- stack 0: 0x4
7621	 35B	ADD		 	 
- stack 0: 0x8E0
7622	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x8E0
- stack 0: 0x8E0
7623	 35D	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0x3620002037CFFE40150000400F40026010E008C030A000000A0001F04000000
7624	 35E	PUSH1	F0	 	 
- stack 2: 0x8E0
- stack 1: 0x3620002037CFFE40150000400F40026010E008C030A000000A0001F04000000
- stack 0: 0xF0
7625	 360	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0x362
7626	 361	JUMP		 	 
- stack 0: 0x8E0
7627	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x8E0
7628	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E0
- stack 0: 0x8E0
7629	 364	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0x3620002037CFFE40150000400F40026010E008C030A000000A0001F04000000
7630	 365	PUSH1	E0	 	 
- stack 2: 0x8E0
- stack 1: 0x3620002037CFFE40150000400F40026010E008C030A000000A0001F04000000
- stack 0: 0xE0
7631	 367	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0x3620002
7632	 368	PUSH2	FFFF	 	 
- stack 2: 0x8E0
- stack 1: 0x3620002
- stack 0: 0xFFFF
7633	 36B	AND		 	 
- stack 1: 0x8E0
- stack 0: 0x2
7634	 36C	PUSH1	01	 	 
- stack 2: 0x8E0
- stack 1: 0x2
- stack 0: 0x1
7635	 36E	SIGNEXTEND		 	 
- stack 1: 0x8E0
- stack 0: 0x2
7636	 36F	PUSH2	00A0	 	 
- stack 2: 0x8E0
- stack 1: 0x2
- stack 0: 0xA0
7637	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x8E0
7638	 373	PUSH1	04	 	 
- stack 1: 0x8E0
- stack 0: 0x4
7639	 375	ADD		 	 
- stack 0: 0x8E4
7640	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x8E4
- stack 0: 0x8E4
7641	 377	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0x37CFFE40150000400F40026010E008C030A000000A0001F0400000004000000
7642	 378	PUSH1	F0	 	 
- stack 2: 0x8E4
- stack 1: 0x37CFFE40150000400F40026010E008C030A000000A0001F0400000004000000
- stack 0: 0xF0
7643	 37A	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0x37C
7644	 37B	JUMP		 	 
- stack 0: 0x8E4
7645	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x8E4
7646	 37D	PUSH2	0080	 	 
- stack 1: 0x8E4
- stack 0: 0x80
7647	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x8E4
- stack 0: 0x1
7648	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8E4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7649	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8E4
- stack 0: 0x1
7650	 387	PUSH2	00A0	 	 
- stack 2: 0x8E4
- stack 1: 0x1
- stack 0: 0xA0
7651	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x8E4
- stack 1: 0x1
- stack 0: 0x2
7652	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8E4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7653	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8E4
- stack 1: 0x1
- stack 0: 0x2
7654	 391	SUB		 	 
- stack 1: 0x8E4
- stack 0: 0x1
7655	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x8E4
- stack 1: 0x1
- stack 0: 0x39A
7656	 395	JUMPI		 	 
- stack 0: 0x8E4
7657	 39A	JUMPDEST		 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x8E4
7658	 39B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E4
- stack 0: 0x8E4
7659	 39C	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0x37CFFE40150000400F40026010E008C030A000000A0001F0400000004000000
7660	 39D	PUSH1	E0	 	 
- stack 2: 0x8E4
- stack 1: 0x37CFFE40150000400F40026010E008C030A000000A0001F0400000004000000
- stack 0: 0xE0
7661	 39F	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0x37CFFE4
7662	 3A0	PUSH2	FFFF	 	 
- stack 2: 0x8E4
- stack 1: 0x37CFFE4
- stack 0: 0xFFFF
7663	 3A3	AND		 	 
- stack 1: 0x8E4
- stack 0: 0xFFE4
7664	 3A4	PUSH1	01	 	 
- stack 2: 0x8E4
- stack 1: 0xFFE4
- stack 0: 0x1
7665	 3A6	SIGNEXTEND		 	 
- stack 1: 0x8E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
7666	 3A7	ADD		 	 
- stack 0: 0x8C8
7667	 3A8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x8C8
- stack 0: 0xFFFFFFFF
7668	 3AD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x8C8
7669	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x8C8
- stack 0: 0x8C8
7670	 3AF	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0xA0000E04000000008600010400000000BA00000343000103620002037CFFE4
7671	 3B0	PUSH1	F0	 	 
- stack 2: 0x8C8
- stack 1: 0xA0000E04000000008600010400000000BA00000343000103620002037CFFE4
- stack 0: 0xF0
7672	 3B2	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0xA0
7673	 3B3	JUMP		 	 
- stack 0: 0x8C8
7674	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x8C8
7675	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C8
- stack 0: 0x8C8
7676	 A2	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0xA0000E04000000008600010400000000BA00000343000103620002037CFFE4
7677	 A3	PUSH1	E0	 	 
- stack 2: 0x8C8
- stack 1: 0xA0000E04000000008600010400000000BA00000343000103620002037CFFE4
- stack 0: 0xE0
7678	 A5	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0xA0000E
7679	 A6	PUSH2	FFFF	 	 
- stack 2: 0x8C8
- stack 1: 0xA0000E
- stack 0: 0xFFFF
7680	 A9	AND		 	 
- stack 1: 0x8C8
- stack 0: 0xE
7681	 AA	PUSH1	01	 	 
- stack 2: 0x8C8
- stack 1: 0xE
- stack 0: 0x1
7682	 AC	SIGNEXTEND		 	 
- stack 1: 0x8C8
- stack 0: 0xE
7683	 AD	PUSH2	0040	 	 
- stack 2: 0x8C8
- stack 1: 0xE
- stack 0: 0x40
7684	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x8C8
7685	 B1	PUSH1	04	 	 
- stack 1: 0x8C8
- stack 0: 0x4
7686	 B3	ADD		 	 
- stack 0: 0x8CC
7687	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x8CC
- stack 0: 0x8CC
7688	 B5	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x4000000008600010400000000BA00000343000103620002037CFFE401500004
7689	 B6	PUSH1	F0	 	 
- stack 2: 0x8CC
- stack 1: 0x4000000008600010400000000BA00000343000103620002037CFFE401500004
- stack 0: 0xF0
7690	 B8	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x400
7691	 B9	JUMP		 	 
- stack 0: 0x8CC
7692	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8CC
7693	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8CC
- stack 0: 0x8CC
7694	 402	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x4000000008600010400000000BA00000343000103620002037CFFE401500004
7695	 403	PUSH1	E0	 	 
- stack 2: 0x8CC
- stack 1: 0x4000000008600010400000000BA00000343000103620002037CFFE401500004
- stack 0: 0xE0
7696	 405	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x4000000
7697	 406	PUSH2	FFFF	 	 
- stack 2: 0x8CC
- stack 1: 0x4000000
- stack 0: 0xFFFF
7698	 409	AND		 	 
- stack 1: 0x8CC
- stack 0: 0x0
7699	 40A	PUSH1	01	 	 
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0x1
7700	 40C	SIGNEXTEND		 	 
- stack 1: 0x8CC
- stack 0: 0x0
7701	 40D	POP		 	 
- stack 0: 0x8CC
7702	 40E	PUSH1	04	 	 
- stack 1: 0x8CC
- stack 0: 0x4
7703	 410	ADD		 	 
- stack 0: 0x8D0
7704	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x8D0
- stack 0: 0x8D0
7705	 412	MLOAD		 	 
- stack 1: 0x8D0
- stack 0: 0x8600010400000000BA00000343000103620002037CFFE40150000400F40026
7706	 413	PUSH1	F0	 	 
- stack 2: 0x8D0
- stack 1: 0x8600010400000000BA00000343000103620002037CFFE40150000400F40026
- stack 0: 0xF0
7707	 415	SHR		 	 
- stack 1: 0x8D0
- stack 0: 0x86
7708	 416	JUMP		 	 
- stack 0: 0x8D0
7709	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x8D0
7710	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8D0
- stack 0: 0x8D0
7711	 88	MLOAD		 	 
- stack 1: 0x8D0
- stack 0: 0x8600010400000000BA00000343000103620002037CFFE40150000400F40026
7712	 89	PUSH1	E0	 	 
- stack 2: 0x8D0
- stack 1: 0x8600010400000000BA00000343000103620002037CFFE40150000400F40026
- stack 0: 0xE0
7713	 8B	SHR		 	 
- stack 1: 0x8D0
- stack 0: 0x860001
7714	 8C	PUSH2	FFFF	 	 
- stack 2: 0x8D0
- stack 1: 0x860001
- stack 0: 0xFFFF
7715	 8F	AND		 	 
- stack 1: 0x8D0
- stack 0: 0x1
7716	 90	PUSH1	01	 	 
- stack 2: 0x8D0
- stack 1: 0x1
- stack 0: 0x1
7717	 92	SIGNEXTEND		 	 
- stack 1: 0x8D0
- stack 0: 0x1
7718	 93	PUSH2	0020	 	 
- stack 2: 0x8D0
- stack 1: 0x1
- stack 0: 0x20
7719	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x8D0
7720	 97	PUSH1	04	 	 
- stack 1: 0x8D0
- stack 0: 0x4
7721	 99	ADD		 	 
- stack 0: 0x8D4
7722	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x8D4
- stack 0: 0x8D4
7723	 9B	MLOAD		 	 
- stack 1: 0x8D4
- stack 0: 0x400000000BA00000343000103620002037CFFE40150000400F40026010E008C
7724	 9C	PUSH1	F0	 	 
- stack 2: 0x8D4
- stack 1: 0x400000000BA00000343000103620002037CFFE40150000400F40026010E008C
- stack 0: 0xF0
7725	 9E	SHR		 	 
- stack 1: 0x8D4
- stack 0: 0x400
7726	 9F	JUMP		 	 
- stack 0: 0x8D4
7727	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8D4
7728	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8D4
- stack 0: 0x8D4
7729	 402	MLOAD		 	 
- stack 1: 0x8D4
- stack 0: 0x400000000BA00000343000103620002037CFFE40150000400F40026010E008C
7730	 403	PUSH1	E0	 	 
- stack 2: 0x8D4
- stack 1: 0x400000000BA00000343000103620002037CFFE40150000400F40026010E008C
- stack 0: 0xE0
7731	 405	SHR		 	 
- stack 1: 0x8D4
- stack 0: 0x4000000
7732	 406	PUSH2	FFFF	 	 
- stack 2: 0x8D4
- stack 1: 0x4000000
- stack 0: 0xFFFF
7733	 409	AND		 	 
- stack 1: 0x8D4
- stack 0: 0x0
7734	 40A	PUSH1	01	 	 
- stack 2: 0x8D4
- stack 1: 0x0
- stack 0: 0x1
7735	 40C	SIGNEXTEND		 	 
- stack 1: 0x8D4
- stack 0: 0x0
7736	 40D	POP		 	 
- stack 0: 0x8D4
7737	 40E	PUSH1	04	 	 
- stack 1: 0x8D4
- stack 0: 0x4
7738	 410	ADD		 	 
- stack 0: 0x8D8
7739	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x8D8
- stack 0: 0x8D8
7740	 412	MLOAD		 	 
- stack 1: 0x8D8
- stack 0: 0xBA00000343000103620002037CFFE40150000400F40026010E008C030A0000
7741	 413	PUSH1	F0	 	 
- stack 2: 0x8D8
- stack 1: 0xBA00000343000103620002037CFFE40150000400F40026010E008C030A0000
- stack 0: 0xF0
7742	 415	SHR		 	 
- stack 1: 0x8D8
- stack 0: 0xBA
7743	 416	JUMP		 	 
- stack 0: 0x8D8
7744	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x8D8
7745	 BB	PUSH2	0020	 	 
- stack 1: 0x8D8
- stack 0: 0x20
7746	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x8D8
- stack 0: 0x1
7747	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8D8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7748	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8D8
- stack 0: 0x1
7749	 C5	PUSH2	0040	 	 
- stack 2: 0x8D8
- stack 1: 0x1
- stack 0: 0x40
7750	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x8D8
- stack 1: 0x1
- stack 0: 0xE
7751	 C9	PUSH1	1F	 	 
- stack 3: 0x8D8
- stack 2: 0x1
- stack 1: 0xE
- stack 0: 0x1F
7752	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x8D8
- stack 1: 0x1
- stack 0: 0xE
7753	 CC	SHL		 	 
- stack 1: 0x8D8
- stack 0: 0x4000
7754	 CD	PUSH2	0060	 	 
- stack 2: 0x8D8
- stack 1: 0x4000
- stack 0: 0x60
7755	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x8D8
7756	 D1	PUSH1	04	 	 
- stack 1: 0x8D8
- stack 0: 0x4
7757	 D3	ADD		 	 
- stack 0: 0x8DC
7758	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x8DC
- stack 0: 0x8DC
7759	 D5	MLOAD		 	 
- stack 1: 0x8DC
- stack 0: 0x343000103620002037CFFE40150000400F40026010E008C030A000000A0001F
7760	 D6	PUSH1	F0	 	 
- stack 2: 0x8DC
- stack 1: 0x343000103620002037CFFE40150000400F40026010E008C030A000000A0001F
- stack 0: 0xF0
7761	 D8	SHR		 	 
- stack 1: 0x8DC
- stack 0: 0x343
7762	 D9	JUMP		 	 
- stack 0: 0x8DC
7763	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x8DC
7764	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8DC
- stack 0: 0x8DC
7765	 345	MLOAD		 	 
- stack 1: 0x8DC
- stack 0: 0x343000103620002037CFFE40150000400F40026010E008C030A000000A0001F
7766	 346	PUSH1	E0	 	 
- stack 2: 0x8DC
- stack 1: 0x343000103620002037CFFE40150000400F40026010E008C030A000000A0001F
- stack 0: 0xE0
7767	 348	SHR		 	 
- stack 1: 0x8DC
- stack 0: 0x3430001
7768	 349	PUSH2	FFFF	 	 
- stack 2: 0x8DC
- stack 1: 0x3430001
- stack 0: 0xFFFF
7769	 34C	AND		 	 
- stack 1: 0x8DC
- stack 0: 0x1
7770	 34D	PUSH1	01	 	 
- stack 2: 0x8DC
- stack 1: 0x1
- stack 0: 0x1
7771	 34F	SIGNEXTEND		 	 
- stack 1: 0x8DC
- stack 0: 0x1
7772	 350	PUSH2	0080	 	 
- stack 2: 0x8DC
- stack 1: 0x1
- stack 0: 0x80
7773	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x8DC
- stack 1: 0x1
- stack 0: 0x1
7774	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x8DC
- stack 0: 0x2
7775	 355	PUSH2	0080	 	 
- stack 2: 0x8DC
- stack 1: 0x2
- stack 0: 0x80
7776	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x8DC
7777	 359	PUSH1	04	 	 
- stack 1: 0x8DC
- stack 0: 0x4
7778	 35B	ADD		 	 
- stack 0: 0x8E0
7779	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x8E0
- stack 0: 0x8E0
7780	 35D	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0x3620002037CFFE40150000400F40026010E008C030A000000A0001F04000000
7781	 35E	PUSH1	F0	 	 
- stack 2: 0x8E0
- stack 1: 0x3620002037CFFE40150000400F40026010E008C030A000000A0001F04000000
- stack 0: 0xF0
7782	 360	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0x362
7783	 361	JUMP		 	 
- stack 0: 0x8E0
7784	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x8E0
7785	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E0
- stack 0: 0x8E0
7786	 364	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0x3620002037CFFE40150000400F40026010E008C030A000000A0001F04000000
7787	 365	PUSH1	E0	 	 
- stack 2: 0x8E0
- stack 1: 0x3620002037CFFE40150000400F40026010E008C030A000000A0001F04000000
- stack 0: 0xE0
7788	 367	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0x3620002
7789	 368	PUSH2	FFFF	 	 
- stack 2: 0x8E0
- stack 1: 0x3620002
- stack 0: 0xFFFF
7790	 36B	AND		 	 
- stack 1: 0x8E0
- stack 0: 0x2
7791	 36C	PUSH1	01	 	 
- stack 2: 0x8E0
- stack 1: 0x2
- stack 0: 0x1
7792	 36E	SIGNEXTEND		 	 
- stack 1: 0x8E0
- stack 0: 0x2
7793	 36F	PUSH2	00A0	 	 
- stack 2: 0x8E0
- stack 1: 0x2
- stack 0: 0xA0
7794	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x8E0
7795	 373	PUSH1	04	 	 
- stack 1: 0x8E0
- stack 0: 0x4
7796	 375	ADD		 	 
- stack 0: 0x8E4
7797	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x8E4
- stack 0: 0x8E4
7798	 377	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0x37CFFE40150000400F40026010E008C030A000000A0001F0400000004000000
7799	 378	PUSH1	F0	 	 
- stack 2: 0x8E4
- stack 1: 0x37CFFE40150000400F40026010E008C030A000000A0001F0400000004000000
- stack 0: 0xF0
7800	 37A	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0x37C
7801	 37B	JUMP		 	 
- stack 0: 0x8E4
7802	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x8E4
7803	 37D	PUSH2	0080	 	 
- stack 1: 0x8E4
- stack 0: 0x80
7804	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x8E4
- stack 0: 0x2
7805	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8E4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7806	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8E4
- stack 0: 0x2
7807	 387	PUSH2	00A0	 	 
- stack 2: 0x8E4
- stack 1: 0x2
- stack 0: 0xA0
7808	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x8E4
- stack 1: 0x2
- stack 0: 0x2
7809	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8E4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7810	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8E4
- stack 1: 0x2
- stack 0: 0x2
7811	 391	SUB		 	 
- stack 1: 0x8E4
- stack 0: 0x0
7812	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x8E4
- stack 1: 0x0
- stack 0: 0x39A
7813	 395	JUMPI		 	 
- stack 0: 0x8E4
7814	 396	PUSH2	03B4	 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 1: 0x8E4
- stack 0: 0x3B4
7815	 399	JUMP		 	 
- stack 0: 0x8E4
7816	 3B4	JUMPDEST		 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x8E4
7817	 3B5	PUSH1	04	 	 
- stack 1: 0x8E4
- stack 0: 0x4
7818	 3B7	ADD		 	 
- stack 0: 0x8E8
7819	 3B8	DUP1		 	  ;; # executing pc
- stack 1: 0x8E8
- stack 0: 0x8E8
7820	 3B9	MLOAD		 	 
- stack 1: 0x8E8
- stack 0: 0x150000400F40026010E008C030A000000A0001F040000000400000000860001
7821	 3BA	PUSH1	F0	 	 
- stack 2: 0x8E8
- stack 1: 0x150000400F40026010E008C030A000000A0001F040000000400000000860001
- stack 0: 0xF0
7822	 3BC	SHR		 	 
- stack 1: 0x8E8
- stack 0: 0x150
7823	 3BD	JUMP		 	 
- stack 0: 0x8E8
7824	 150	JUMPDEST		 ;; __riscvimpl_LUI_4eb7	  ;; # instr: lui t4,0x4(ignore imm)
- stack 0: 0x8E8
7825	 151	PUSH4	00004000	 	 
- stack 1: 0x8E8
- stack 0: 0x4000
7826	 156	PUSH2	03A0	 	 
- stack 2: 0x8E8
- stack 1: 0x4000
- stack 0: 0x3A0
7827	 159	MSTORE		 	  ;; # store to x29
- stack 0: 0x8E8
7828	 15A	PUSH1	04	 	 
- stack 1: 0x8E8
- stack 0: 0x4
7829	 15C	ADD		 	 
- stack 0: 0x8EC
7830	 15D	DUP1		 	  ;; # executing pc
- stack 1: 0x8EC
- stack 0: 0x8EC
7831	 15E	MLOAD		 	 
- stack 1: 0x8EC
- stack 0: 0xF40026010E008C030A000000A0001F04000000040000000086000100BA0000
7832	 15F	PUSH1	F0	 	 
- stack 2: 0x8EC
- stack 1: 0xF40026010E008C030A000000A0001F04000000040000000086000100BA0000
- stack 0: 0xF0
7833	 161	SHR		 	 
- stack 1: 0x8EC
- stack 0: 0xF4
7834	 162	JUMP		 	 
- stack 0: 0x8EC
7835	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8EC
7836	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8EC
- stack 0: 0x8EC
7837	 F6	MLOAD		 	 
- stack 1: 0x8EC
- stack 0: 0xF40026010E008C030A000000A0001F04000000040000000086000100BA0000
7838	 F7	PUSH1	E0	 	 
- stack 2: 0x8EC
- stack 1: 0xF40026010E008C030A000000A0001F04000000040000000086000100BA0000
- stack 0: 0xE0
7839	 F9	SHR		 	 
- stack 1: 0x8EC
- stack 0: 0xF40026
7840	 FA	PUSH2	FFFF	 	 
- stack 2: 0x8EC
- stack 1: 0xF40026
- stack 0: 0xFFFF
7841	 FD	AND		 	 
- stack 1: 0x8EC
- stack 0: 0x26
7842	 FE	PUSH1	01	 	 
- stack 2: 0x8EC
- stack 1: 0x26
- stack 0: 0x1
7843	 100	SIGNEXTEND		 	 
- stack 1: 0x8EC
- stack 0: 0x26
7844	 101	PUSH2	0380	 	 
- stack 2: 0x8EC
- stack 1: 0x26
- stack 0: 0x380
7845	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x8EC
7846	 105	PUSH1	04	 	 
- stack 1: 0x8EC
- stack 0: 0x4
7847	 107	ADD		 	 
- stack 0: 0x8F0
7848	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x8F0
- stack 0: 0x8F0
7849	 109	MLOAD		 	 
- stack 1: 0x8F0
- stack 0: 0x10E008C030A000000A0001F04000000040000000086000100BA000003430001
7850	 10A	PUSH1	F0	 	 
- stack 2: 0x8F0
- stack 1: 0x10E008C030A000000A0001F04000000040000000086000100BA000003430001
- stack 0: 0xF0
7851	 10C	SHR		 	 
- stack 1: 0x8F0
- stack 0: 0x10E
7852	 10D	JUMP		 	 
- stack 0: 0x8F0
7853	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x8F0
7854	 10F	PUSH2	0060	 	 
- stack 1: 0x8F0
- stack 0: 0x60
7855	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x8F0
- stack 0: 0x4000
7856	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8F0
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
7857	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8F0
- stack 0: 0x4000
7858	 119	PUSH2	03A0	 	 
- stack 2: 0x8F0
- stack 1: 0x4000
- stack 0: 0x3A0
7859	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x8F0
- stack 1: 0x4000
- stack 0: 0x4000
7860	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8F0
- stack 2: 0x4000
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
7861	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8F0
- stack 1: 0x4000
- stack 0: 0x4000
7862	 123	SUB		 	 
- stack 1: 0x8F0
- stack 0: 0x0
7863	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x8F0
- stack 1: 0x0
- stack 0: 0x12C
7864	 127	JUMPI		 	 
- stack 0: 0x8F0
7865	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x8F0
- stack 0: 0x146
7866	 12B	JUMP		 	 
- stack 0: 0x8F0
7867	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x8F0
7868	 147	PUSH1	04	 	 
- stack 1: 0x8F0
- stack 0: 0x4
7869	 149	ADD		 	 
- stack 0: 0x8F4
7870	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x8F4
- stack 0: 0x8F4
7871	 14B	MLOAD		 	 
- stack 1: 0x8F4
- stack 0: 0x30A000000A0001F04000000040000000086000100BA00000343000103620002
7872	 14C	PUSH1	F0	 	 
- stack 2: 0x8F4
- stack 1: 0x30A000000A0001F04000000040000000086000100BA00000343000103620002
- stack 0: 0xF0
7873	 14E	SHR		 	 
- stack 1: 0x8F4
- stack 0: 0x30A
7874	 14F	JUMP		 	 
- stack 0: 0x8F4
7875	 30A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x8F4
7876	 30B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8F4
- stack 0: 0x8F4
7877	 30C	MLOAD		 	 
- stack 1: 0x8F4
- stack 0: 0x30A000000A0001F04000000040000000086000100BA00000343000103620002
7878	 30D	PUSH1	E0	 	 
- stack 2: 0x8F4
- stack 1: 0x30A000000A0001F04000000040000000086000100BA00000343000103620002
- stack 0: 0xE0
7879	 30F	SHR		 	 
- stack 1: 0x8F4
- stack 0: 0x30A0000
7880	 310	PUSH2	FFFF	 	 
- stack 2: 0x8F4
- stack 1: 0x30A0000
- stack 0: 0xFFFF
7881	 313	AND		 	 
- stack 1: 0x8F4
- stack 0: 0x0
7882	 314	PUSH1	01	 	 
- stack 2: 0x8F4
- stack 1: 0x0
- stack 0: 0x1
7883	 316	SIGNEXTEND		 	 
- stack 1: 0x8F4
- stack 0: 0x0
7884	 317	PUSH2	0080	 	 
- stack 2: 0x8F4
- stack 1: 0x0
- stack 0: 0x80
7885	 31A	MSTORE		 	  ;; # store to x4
- stack 0: 0x8F4
7886	 31B	PUSH1	04	 	 
- stack 1: 0x8F4
- stack 0: 0x4
7887	 31D	ADD		 	 
- stack 0: 0x8F8
7888	 31E	DUP1		 	  ;; # executing pc
- stack 1: 0x8F8
- stack 0: 0x8F8
7889	 31F	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0xA0001F04000000040000000086000100BA00000343000103620002037CFFE4
7890	 320	PUSH1	F0	 	 
- stack 2: 0x8F8
- stack 1: 0xA0001F04000000040000000086000100BA00000343000103620002037CFFE4
- stack 0: 0xF0
7891	 322	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0xA0
7892	 323	JUMP		 	 
- stack 0: 0x8F8
7893	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x8F8
7894	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8F8
- stack 0: 0x8F8
7895	 A2	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0xA0001F04000000040000000086000100BA00000343000103620002037CFFE4
7896	 A3	PUSH1	E0	 	 
- stack 2: 0x8F8
- stack 1: 0xA0001F04000000040000000086000100BA00000343000103620002037CFFE4
- stack 0: 0xE0
7897	 A5	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0xA0001F
7898	 A6	PUSH2	FFFF	 	 
- stack 2: 0x8F8
- stack 1: 0xA0001F
- stack 0: 0xFFFF
7899	 A9	AND		 	 
- stack 1: 0x8F8
- stack 0: 0x1F
7900	 AA	PUSH1	01	 	 
- stack 2: 0x8F8
- stack 1: 0x1F
- stack 0: 0x1
7901	 AC	SIGNEXTEND		 	 
- stack 1: 0x8F8
- stack 0: 0x1F
7902	 AD	PUSH2	0040	 	 
- stack 2: 0x8F8
- stack 1: 0x1F
- stack 0: 0x40
7903	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x8F8
7904	 B1	PUSH1	04	 	 
- stack 1: 0x8F8
- stack 0: 0x4
7905	 B3	ADD		 	 
- stack 0: 0x8FC
7906	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x8FC
- stack 0: 0x8FC
7907	 B5	MLOAD		 	 
- stack 1: 0x8FC
- stack 0: 0x4000000040000000086000100BA00000343000103620002037CFFE401630000
7908	 B6	PUSH1	F0	 	 
- stack 2: 0x8FC
- stack 1: 0x4000000040000000086000100BA00000343000103620002037CFFE401630000
- stack 0: 0xF0
7909	 B8	SHR		 	 
- stack 1: 0x8FC
- stack 0: 0x400
7910	 B9	JUMP		 	 
- stack 0: 0x8FC
7911	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8FC
7912	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8FC
- stack 0: 0x8FC
7913	 402	MLOAD		 	 
- stack 1: 0x8FC
- stack 0: 0x4000000040000000086000100BA00000343000103620002037CFFE401630000
7914	 403	PUSH1	E0	 	 
- stack 2: 0x8FC
- stack 1: 0x4000000040000000086000100BA00000343000103620002037CFFE401630000
- stack 0: 0xE0
7915	 405	SHR		 	 
- stack 1: 0x8FC
- stack 0: 0x4000000
7916	 406	PUSH2	FFFF	 	 
- stack 2: 0x8FC
- stack 1: 0x4000000
- stack 0: 0xFFFF
7917	 409	AND		 	 
- stack 1: 0x8FC
- stack 0: 0x0
7918	 40A	PUSH1	01	 	 
- stack 2: 0x8FC
- stack 1: 0x0
- stack 0: 0x1
7919	 40C	SIGNEXTEND		 	 
- stack 1: 0x8FC
- stack 0: 0x0
7920	 40D	POP		 	 
- stack 0: 0x8FC
7921	 40E	PUSH1	04	 	 
- stack 1: 0x8FC
- stack 0: 0x4
7922	 410	ADD		 	 
- stack 0: 0x900
7923	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x900
- stack 0: 0x900
7924	 412	MLOAD		 	 
- stack 1: 0x900
- stack 0: 0x40000000086000100BA00000343000103620002037CFFE40163000000F40027
7925	 413	PUSH1	F0	 	 
- stack 2: 0x900
- stack 1: 0x40000000086000100BA00000343000103620002037CFFE40163000000F40027
- stack 0: 0xF0
7926	 415	SHR		 	 
- stack 1: 0x900
- stack 0: 0x400
7927	 416	JUMP		 	 
- stack 0: 0x900
7928	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x900
7929	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x900
- stack 0: 0x900
7930	 402	MLOAD		 	 
- stack 1: 0x900
- stack 0: 0x40000000086000100BA00000343000103620002037CFFE40163000000F40027
7931	 403	PUSH1	E0	 	 
- stack 2: 0x900
- stack 1: 0x40000000086000100BA00000343000103620002037CFFE40163000000F40027
- stack 0: 0xE0
7932	 405	SHR		 	 
- stack 1: 0x900
- stack 0: 0x4000000
7933	 406	PUSH2	FFFF	 	 
- stack 2: 0x900
- stack 1: 0x4000000
- stack 0: 0xFFFF
7934	 409	AND		 	 
- stack 1: 0x900
- stack 0: 0x0
7935	 40A	PUSH1	01	 	 
- stack 2: 0x900
- stack 1: 0x0
- stack 0: 0x1
7936	 40C	SIGNEXTEND		 	 
- stack 1: 0x900
- stack 0: 0x0
7937	 40D	POP		 	 
- stack 0: 0x900
7938	 40E	PUSH1	04	 	 
- stack 1: 0x900
- stack 0: 0x4
7939	 410	ADD		 	 
- stack 0: 0x904
7940	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x904
- stack 0: 0x904
7941	 412	MLOAD		 	 
- stack 1: 0x904
- stack 0: 0x86000100BA00000343000103620002037CFFE40163000000F40027010E005C
7942	 413	PUSH1	F0	 	 
- stack 2: 0x904
- stack 1: 0x86000100BA00000343000103620002037CFFE40163000000F40027010E005C
- stack 0: 0xF0
7943	 415	SHR		 	 
- stack 1: 0x904
- stack 0: 0x86
7944	 416	JUMP		 	 
- stack 0: 0x904
7945	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x904
7946	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x904
- stack 0: 0x904
7947	 88	MLOAD		 	 
- stack 1: 0x904
- stack 0: 0x86000100BA00000343000103620002037CFFE40163000000F40027010E005C
7948	 89	PUSH1	E0	 	 
- stack 2: 0x904
- stack 1: 0x86000100BA00000343000103620002037CFFE40163000000F40027010E005C
- stack 0: 0xE0
7949	 8B	SHR		 	 
- stack 1: 0x904
- stack 0: 0x860001
7950	 8C	PUSH2	FFFF	 	 
- stack 2: 0x904
- stack 1: 0x860001
- stack 0: 0xFFFF
7951	 8F	AND		 	 
- stack 1: 0x904
- stack 0: 0x1
7952	 90	PUSH1	01	 	 
- stack 2: 0x904
- stack 1: 0x1
- stack 0: 0x1
7953	 92	SIGNEXTEND		 	 
- stack 1: 0x904
- stack 0: 0x1
7954	 93	PUSH2	0020	 	 
- stack 2: 0x904
- stack 1: 0x1
- stack 0: 0x20
7955	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x904
7956	 97	PUSH1	04	 	 
- stack 1: 0x904
- stack 0: 0x4
7957	 99	ADD		 	 
- stack 0: 0x908
7958	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x908
- stack 0: 0x908
7959	 9B	MLOAD		 	 
- stack 1: 0x908
- stack 0: 0xBA00000343000103620002037CFFE40163000000F40027010E005C0086000F
7960	 9C	PUSH1	F0	 	 
- stack 2: 0x908
- stack 1: 0xBA00000343000103620002037CFFE40163000000F40027010E005C0086000F
- stack 0: 0xF0
7961	 9E	SHR		 	 
- stack 1: 0x908
- stack 0: 0xBA
7962	 9F	JUMP		 	 
- stack 0: 0x908
7963	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x908
7964	 BB	PUSH2	0020	 	 
- stack 1: 0x908
- stack 0: 0x20
7965	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x908
- stack 0: 0x1
7966	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x908
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7967	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x908
- stack 0: 0x1
7968	 C5	PUSH2	0040	 	 
- stack 2: 0x908
- stack 1: 0x1
- stack 0: 0x40
7969	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x908
- stack 1: 0x1
- stack 0: 0x1F
7970	 C9	PUSH1	1F	 	 
- stack 3: 0x908
- stack 2: 0x1
- stack 1: 0x1F
- stack 0: 0x1F
7971	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x908
- stack 1: 0x1
- stack 0: 0x1F
7972	 CC	SHL		 	 
- stack 1: 0x908
- stack 0: 0x80000000
7973	 CD	PUSH2	0060	 	 
- stack 2: 0x908
- stack 1: 0x80000000
- stack 0: 0x60
7974	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x908
7975	 D1	PUSH1	04	 	 
- stack 1: 0x908
- stack 0: 0x4
7976	 D3	ADD		 	 
- stack 0: 0x90C
7977	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x90C
- stack 0: 0x90C
7978	 D5	MLOAD		 	 
- stack 1: 0x90C
- stack 0: 0x343000103620002037CFFE40163000000F40027010E005C0086000F04170000
7979	 D6	PUSH1	F0	 	 
- stack 2: 0x90C
- stack 1: 0x343000103620002037CFFE40163000000F40027010E005C0086000F04170000
- stack 0: 0xF0
7980	 D8	SHR		 	 
- stack 1: 0x90C
- stack 0: 0x343
7981	 D9	JUMP		 	 
- stack 0: 0x90C
7982	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x90C
7983	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x90C
- stack 0: 0x90C
7984	 345	MLOAD		 	 
- stack 1: 0x90C
- stack 0: 0x343000103620002037CFFE40163000000F40027010E005C0086000F04170000
7985	 346	PUSH1	E0	 	 
- stack 2: 0x90C
- stack 1: 0x343000103620002037CFFE40163000000F40027010E005C0086000F04170000
- stack 0: 0xE0
7986	 348	SHR		 	 
- stack 1: 0x90C
- stack 0: 0x3430001
7987	 349	PUSH2	FFFF	 	 
- stack 2: 0x90C
- stack 1: 0x3430001
- stack 0: 0xFFFF
7988	 34C	AND		 	 
- stack 1: 0x90C
- stack 0: 0x1
7989	 34D	PUSH1	01	 	 
- stack 2: 0x90C
- stack 1: 0x1
- stack 0: 0x1
7990	 34F	SIGNEXTEND		 	 
- stack 1: 0x90C
- stack 0: 0x1
7991	 350	PUSH2	0080	 	 
- stack 2: 0x90C
- stack 1: 0x1
- stack 0: 0x80
7992	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x90C
- stack 1: 0x1
- stack 0: 0x0
7993	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x90C
- stack 0: 0x1
7994	 355	PUSH2	0080	 	 
- stack 2: 0x90C
- stack 1: 0x1
- stack 0: 0x80
7995	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x90C
7996	 359	PUSH1	04	 	 
- stack 1: 0x90C
- stack 0: 0x4
7997	 35B	ADD		 	 
- stack 0: 0x910
7998	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x910
- stack 0: 0x910
7999	 35D	MLOAD		 	 
- stack 1: 0x910
- stack 0: 0x3620002037CFFE40163000000F40027010E005C0086000F0417000000DA0000
8000	 35E	PUSH1	F0	 	 
- stack 2: 0x910
- stack 1: 0x3620002037CFFE40163000000F40027010E005C0086000F0417000000DA0000
- stack 0: 0xF0
8001	 360	SHR		 	 
- stack 1: 0x910
- stack 0: 0x362
8002	 361	JUMP		 	 
- stack 0: 0x910
8003	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x910
8004	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x910
- stack 0: 0x910
8005	 364	MLOAD		 	 
- stack 1: 0x910
- stack 0: 0x3620002037CFFE40163000000F40027010E005C0086000F0417000000DA0000
8006	 365	PUSH1	E0	 	 
- stack 2: 0x910
- stack 1: 0x3620002037CFFE40163000000F40027010E005C0086000F0417000000DA0000
- stack 0: 0xE0
8007	 367	SHR		 	 
- stack 1: 0x910
- stack 0: 0x3620002
8008	 368	PUSH2	FFFF	 	 
- stack 2: 0x910
- stack 1: 0x3620002
- stack 0: 0xFFFF
8009	 36B	AND		 	 
- stack 1: 0x910
- stack 0: 0x2
8010	 36C	PUSH1	01	 	 
- stack 2: 0x910
- stack 1: 0x2
- stack 0: 0x1
8011	 36E	SIGNEXTEND		 	 
- stack 1: 0x910
- stack 0: 0x2
8012	 36F	PUSH2	00A0	 	 
- stack 2: 0x910
- stack 1: 0x2
- stack 0: 0xA0
8013	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x910
8014	 373	PUSH1	04	 	 
- stack 1: 0x910
- stack 0: 0x4
8015	 375	ADD		 	 
- stack 0: 0x914
8016	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x914
- stack 0: 0x914
8017	 377	MLOAD		 	 
- stack 1: 0x914
- stack 0: 0x37CFFE40163000000F40027010E005C0086000F0417000000DA000000F40028
8018	 378	PUSH1	F0	 	 
- stack 2: 0x914
- stack 1: 0x37CFFE40163000000F40027010E005C0086000F0417000000DA000000F40028
- stack 0: 0xF0
8019	 37A	SHR		 	 
- stack 1: 0x914
- stack 0: 0x37C
8020	 37B	JUMP		 	 
- stack 0: 0x914
8021	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x914
8022	 37D	PUSH2	0080	 	 
- stack 1: 0x914
- stack 0: 0x80
8023	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x914
- stack 0: 0x1
8024	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x914
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
8025	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x914
- stack 0: 0x1
8026	 387	PUSH2	00A0	 	 
- stack 2: 0x914
- stack 1: 0x1
- stack 0: 0xA0
8027	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x914
- stack 1: 0x1
- stack 0: 0x2
8028	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x914
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8029	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x914
- stack 1: 0x1
- stack 0: 0x2
8030	 391	SUB		 	 
- stack 1: 0x914
- stack 0: 0x1
8031	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x914
- stack 1: 0x1
- stack 0: 0x39A
8032	 395	JUMPI		 	 
- stack 0: 0x914
8033	 39A	JUMPDEST		 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x914
8034	 39B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x914
- stack 0: 0x914
8035	 39C	MLOAD		 	 
- stack 1: 0x914
- stack 0: 0x37CFFE40163000000F40027010E005C0086000F0417000000DA000000F40028
8036	 39D	PUSH1	E0	 	 
- stack 2: 0x914
- stack 1: 0x37CFFE40163000000F40027010E005C0086000F0417000000DA000000F40028
- stack 0: 0xE0
8037	 39F	SHR		 	 
- stack 1: 0x914
- stack 0: 0x37CFFE4
8038	 3A0	PUSH2	FFFF	 	 
- stack 2: 0x914
- stack 1: 0x37CFFE4
- stack 0: 0xFFFF
8039	 3A3	AND		 	 
- stack 1: 0x914
- stack 0: 0xFFE4
8040	 3A4	PUSH1	01	 	 
- stack 2: 0x914
- stack 1: 0xFFE4
- stack 0: 0x1
8041	 3A6	SIGNEXTEND		 	 
- stack 1: 0x914
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
8042	 3A7	ADD		 	 
- stack 0: 0x8F8
8043	 3A8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x8F8
- stack 0: 0xFFFFFFFF
8044	 3AD	AND		 	  ;; # mask to 32 bits
- stack 0: 0x8F8
8045	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x8F8
- stack 0: 0x8F8
8046	 3AF	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0xA0001F04000000040000000086000100BA00000343000103620002037CFFE4
8047	 3B0	PUSH1	F0	 	 
- stack 2: 0x8F8
- stack 1: 0xA0001F04000000040000000086000100BA00000343000103620002037CFFE4
- stack 0: 0xF0
8048	 3B2	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0xA0
8049	 3B3	JUMP		 	 
- stack 0: 0x8F8
8050	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x8F8
8051	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8F8
- stack 0: 0x8F8
8052	 A2	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0xA0001F04000000040000000086000100BA00000343000103620002037CFFE4
8053	 A3	PUSH1	E0	 	 
- stack 2: 0x8F8
- stack 1: 0xA0001F04000000040000000086000100BA00000343000103620002037CFFE4
- stack 0: 0xE0
8054	 A5	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0xA0001F
8055	 A6	PUSH2	FFFF	 	 
- stack 2: 0x8F8
- stack 1: 0xA0001F
- stack 0: 0xFFFF
8056	 A9	AND		 	 
- stack 1: 0x8F8
- stack 0: 0x1F
8057	 AA	PUSH1	01	 	 
- stack 2: 0x8F8
- stack 1: 0x1F
- stack 0: 0x1
8058	 AC	SIGNEXTEND		 	 
- stack 1: 0x8F8
- stack 0: 0x1F
8059	 AD	PUSH2	0040	 	 
- stack 2: 0x8F8
- stack 1: 0x1F
- stack 0: 0x40
8060	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x8F8
8061	 B1	PUSH1	04	 	 
- stack 1: 0x8F8
- stack 0: 0x4
8062	 B3	ADD		 	 
- stack 0: 0x8FC
8063	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x8FC
- stack 0: 0x8FC
8064	 B5	MLOAD		 	 
- stack 1: 0x8FC
- stack 0: 0x4000000040000000086000100BA00000343000103620002037CFFE401630000
8065	 B6	PUSH1	F0	 	 
- stack 2: 0x8FC
- stack 1: 0x4000000040000000086000100BA00000343000103620002037CFFE401630000
- stack 0: 0xF0
8066	 B8	SHR		 	 
- stack 1: 0x8FC
- stack 0: 0x400
8067	 B9	JUMP		 	 
- stack 0: 0x8FC
8068	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8FC
8069	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8FC
- stack 0: 0x8FC
8070	 402	MLOAD		 	 
- stack 1: 0x8FC
- stack 0: 0x4000000040000000086000100BA00000343000103620002037CFFE401630000
8071	 403	PUSH1	E0	 	 
- stack 2: 0x8FC
- stack 1: 0x4000000040000000086000100BA00000343000103620002037CFFE401630000
- stack 0: 0xE0
8072	 405	SHR		 	 
- stack 1: 0x8FC
- stack 0: 0x4000000
8073	 406	PUSH2	FFFF	 	 
- stack 2: 0x8FC
- stack 1: 0x4000000
- stack 0: 0xFFFF
8074	 409	AND		 	 
- stack 1: 0x8FC
- stack 0: 0x0
8075	 40A	PUSH1	01	 	 
- stack 2: 0x8FC
- stack 1: 0x0
- stack 0: 0x1
8076	 40C	SIGNEXTEND		 	 
- stack 1: 0x8FC
- stack 0: 0x0
8077	 40D	POP		 	 
- stack 0: 0x8FC
8078	 40E	PUSH1	04	 	 
- stack 1: 0x8FC
- stack 0: 0x4
8079	 410	ADD		 	 
- stack 0: 0x900
8080	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x900
- stack 0: 0x900
8081	 412	MLOAD		 	 
- stack 1: 0x900
- stack 0: 0x40000000086000100BA00000343000103620002037CFFE40163000000F40027
8082	 413	PUSH1	F0	 	 
- stack 2: 0x900
- stack 1: 0x40000000086000100BA00000343000103620002037CFFE40163000000F40027
- stack 0: 0xF0
8083	 415	SHR		 	 
- stack 1: 0x900
- stack 0: 0x400
8084	 416	JUMP		 	 
- stack 0: 0x900
8085	 400	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x900
8086	 401	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x900
- stack 0: 0x900
8087	 402	MLOAD		 	 
- stack 1: 0x900
- stack 0: 0x40000000086000100BA00000343000103620002037CFFE40163000000F40027
8088	 403	PUSH1	E0	 	 
- stack 2: 0x900
- stack 1: 0x40000000086000100BA00000343000103620002037CFFE40163000000F40027
- stack 0: 0xE0
8089	 405	SHR		 	 
- stack 1: 0x900
- stack 0: 0x4000000
8090	 406	PUSH2	FFFF	 	 
- stack 2: 0x900
- stack 1: 0x4000000
- stack 0: 0xFFFF
8091	 409	AND		 	 
- stack 1: 0x900
- stack 0: 0x0
8092	 40A	PUSH1	01	 	 
- stack 2: 0x900
- stack 1: 0x0
- stack 0: 0x1
8093	 40C	SIGNEXTEND		 	 
- stack 1: 0x900
- stack 0: 0x0
8094	 40D	POP		 	 
- stack 0: 0x900
8095	 40E	PUSH1	04	 	 
- stack 1: 0x900
- stack 0: 0x4
8096	 410	ADD		 	 
- stack 0: 0x904
8097	 411	DUP1		 	  ;; # executing pc
- stack 1: 0x904
- stack 0: 0x904
8098	 412	MLOAD		 	 
- stack 1: 0x904
- stack 0: 0x86000100BA00000343000103620002037CFFE40163000000F40027010E005C
8099	 413	PUSH1	F0	 	 
- stack 2: 0x904
- stack 1: 0x86000100BA00000343000103620002037CFFE40163000000F40027010E005C
- stack 0: 0xF0
8100	 415	SHR		 	 
- stack 1: 0x904
- stack 0: 0x86
8101	 416	JUMP		 	 
- stack 0: 0x904
8102	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x904
8103	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x904
- stack 0: 0x904
8104	 88	MLOAD		 	 
- stack 1: 0x904
- stack 0: 0x86000100BA00000343000103620002037CFFE40163000000F40027010E005C
8105	 89	PUSH1	E0	 	 
- stack 2: 0x904
- stack 1: 0x86000100BA00000343000103620002037CFFE40163000000F40027010E005C
- stack 0: 0xE0
8106	 8B	SHR		 	 
- stack 1: 0x904
- stack 0: 0x860001
8107	 8C	PUSH2	FFFF	 	 
- stack 2: 0x904
- stack 1: 0x860001
- stack 0: 0xFFFF
8108	 8F	AND		 	 
- stack 1: 0x904
- stack 0: 0x1
8109	 90	PUSH1	01	 	 
- stack 2: 0x904
- stack 1: 0x1
- stack 0: 0x1
8110	 92	SIGNEXTEND		 	 
- stack 1: 0x904
- stack 0: 0x1
8111	 93	PUSH2	0020	 	 
- stack 2: 0x904
- stack 1: 0x1
- stack 0: 0x20
8112	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x904
8113	 97	PUSH1	04	 	 
- stack 1: 0x904
- stack 0: 0x4
8114	 99	ADD		 	 
- stack 0: 0x908
8115	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x908
- stack 0: 0x908
8116	 9B	MLOAD		 	 
- stack 1: 0x908
- stack 0: 0xBA00000343000103620002037CFFE40163000000F40027010E005C0086000F
8117	 9C	PUSH1	F0	 	 
- stack 2: 0x908
- stack 1: 0xBA00000343000103620002037CFFE40163000000F40027010E005C0086000F
- stack 0: 0xF0
8118	 9E	SHR		 	 
- stack 1: 0x908
- stack 0: 0xBA
8119	 9F	JUMP		 	 
- stack 0: 0x908
8120	 BA	JUMPDEST		 ;; __riscvimpl_SLL_3_1_2	  ;; # instr: sll gp,ra,sp(ignore imm)
- stack 0: 0x908
8121	 BB	PUSH2	0020	 	 
- stack 1: 0x908
- stack 0: 0x20
8122	 BE	MLOAD		 	  ;; # read from x1
- stack 1: 0x908
- stack 0: 0x1
8123	 BF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x908
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
8124	 C4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x908
- stack 0: 0x1
8125	 C5	PUSH2	0040	 	 
- stack 2: 0x908
- stack 1: 0x1
- stack 0: 0x40
8126	 C8	MLOAD		 	  ;; # read from x2
- stack 2: 0x908
- stack 1: 0x1
- stack 0: 0x1F
8127	 C9	PUSH1	1F	 	 
- stack 3: 0x908
- stack 2: 0x1
- stack 1: 0x1F
- stack 0: 0x1F
8128	 CB	AND		 	  ;; # mask to 5 bits
- stack 2: 0x908
- stack 1: 0x1
- stack 0: 0x1F
8129	 CC	SHL		 	 
- stack 1: 0x908
- stack 0: 0x80000000
8130	 CD	PUSH2	0060	 	 
- stack 2: 0x908
- stack 1: 0x80000000
- stack 0: 0x60
8131	 D0	MSTORE		 	  ;; # store to x3
- stack 0: 0x908
8132	 D1	PUSH1	04	 	 
- stack 1: 0x908
- stack 0: 0x4
8133	 D3	ADD		 	 
- stack 0: 0x90C
8134	 D4	DUP1		 	  ;; # executing pc
- stack 1: 0x90C
- stack 0: 0x90C
8135	 D5	MLOAD		 	 
- stack 1: 0x90C
- stack 0: 0x343000103620002037CFFE40163000000F40027010E005C0086000F04170000
8136	 D6	PUSH1	F0	 	 
- stack 2: 0x90C
- stack 1: 0x343000103620002037CFFE40163000000F40027010E005C0086000F04170000
- stack 0: 0xF0
8137	 D8	SHR		 	 
- stack 1: 0x90C
- stack 0: 0x343
8138	 D9	JUMP		 	 
- stack 0: 0x90C
8139	 343	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x90C
8140	 344	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x90C
- stack 0: 0x90C
8141	 345	MLOAD		 	 
- stack 1: 0x90C
- stack 0: 0x343000103620002037CFFE40163000000F40027010E005C0086000F04170000
8142	 346	PUSH1	E0	 	 
- stack 2: 0x90C
- stack 1: 0x343000103620002037CFFE40163000000F40027010E005C0086000F04170000
- stack 0: 0xE0
8143	 348	SHR		 	 
- stack 1: 0x90C
- stack 0: 0x3430001
8144	 349	PUSH2	FFFF	 	 
- stack 2: 0x90C
- stack 1: 0x3430001
- stack 0: 0xFFFF
8145	 34C	AND		 	 
- stack 1: 0x90C
- stack 0: 0x1
8146	 34D	PUSH1	01	 	 
- stack 2: 0x90C
- stack 1: 0x1
- stack 0: 0x1
8147	 34F	SIGNEXTEND		 	 
- stack 1: 0x90C
- stack 0: 0x1
8148	 350	PUSH2	0080	 	 
- stack 2: 0x90C
- stack 1: 0x1
- stack 0: 0x80
8149	 353	MLOAD		 	  ;; # read from x4
- stack 2: 0x90C
- stack 1: 0x1
- stack 0: 0x1
8150	 354	ADD		 	  ;; # ADDI 4
- stack 1: 0x90C
- stack 0: 0x2
8151	 355	PUSH2	0080	 	 
- stack 2: 0x90C
- stack 1: 0x2
- stack 0: 0x80
8152	 358	MSTORE		 	  ;; # store to x4
- stack 0: 0x90C
8153	 359	PUSH1	04	 	 
- stack 1: 0x90C
- stack 0: 0x4
8154	 35B	ADD		 	 
- stack 0: 0x910
8155	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x910
- stack 0: 0x910
8156	 35D	MLOAD		 	 
- stack 1: 0x910
- stack 0: 0x3620002037CFFE40163000000F40027010E005C0086000F0417000000DA0000
8157	 35E	PUSH1	F0	 	 
- stack 2: 0x910
- stack 1: 0x3620002037CFFE40163000000F40027010E005C0086000F0417000000DA0000
- stack 0: 0xF0
8158	 360	SHR		 	 
- stack 1: 0x910
- stack 0: 0x362
8159	 361	JUMP		 	 
- stack 0: 0x910
8160	 362	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x910
8161	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x910
- stack 0: 0x910
8162	 364	MLOAD		 	 
- stack 1: 0x910
- stack 0: 0x3620002037CFFE40163000000F40027010E005C0086000F0417000000DA0000
8163	 365	PUSH1	E0	 	 
- stack 2: 0x910
- stack 1: 0x3620002037CFFE40163000000F40027010E005C0086000F0417000000DA0000
- stack 0: 0xE0
8164	 367	SHR		 	 
- stack 1: 0x910
- stack 0: 0x3620002
8165	 368	PUSH2	FFFF	 	 
- stack 2: 0x910
- stack 1: 0x3620002
- stack 0: 0xFFFF
8166	 36B	AND		 	 
- stack 1: 0x910
- stack 0: 0x2
8167	 36C	PUSH1	01	 	 
- stack 2: 0x910
- stack 1: 0x2
- stack 0: 0x1
8168	 36E	SIGNEXTEND		 	 
- stack 1: 0x910
- stack 0: 0x2
8169	 36F	PUSH2	00A0	 	 
- stack 2: 0x910
- stack 1: 0x2
- stack 0: 0xA0
8170	 372	MSTORE		 	  ;; # store to x5
- stack 0: 0x910
8171	 373	PUSH1	04	 	 
- stack 1: 0x910
- stack 0: 0x4
8172	 375	ADD		 	 
- stack 0: 0x914
8173	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x914
- stack 0: 0x914
8174	 377	MLOAD		 	 
- stack 1: 0x914
- stack 0: 0x37CFFE40163000000F40027010E005C0086000F0417000000DA000000F40028
8175	 378	PUSH1	F0	 	 
- stack 2: 0x914
- stack 1: 0x37CFFE40163000000F40027010E005C0086000F0417000000DA000000F40028
- stack 0: 0xF0
8176	 37A	SHR		 	 
- stack 1: 0x914
- stack 0: 0x37C
8177	 37B	JUMP		 	 
- stack 0: 0x914
8178	 37C	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x914
8179	 37D	PUSH2	0080	 	 
- stack 1: 0x914
- stack 0: 0x80
8180	 380	MLOAD		 	  ;; # read from x4
- stack 1: 0x914
- stack 0: 0x2
8181	 381	PUSH4	FFFFFFFF	 	 
- stack 2: 0x914
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8182	 386	AND		 	  ;; # mask to 32 bits
- stack 1: 0x914
- stack 0: 0x2
8183	 387	PUSH2	00A0	 	 
- stack 2: 0x914
- stack 1: 0x2
- stack 0: 0xA0
8184	 38A	MLOAD		 	  ;; # read from x5
- stack 2: 0x914
- stack 1: 0x2
- stack 0: 0x2
8185	 38B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x914
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8186	 390	AND		 	  ;; # mask to 32 bits
- stack 2: 0x914
- stack 1: 0x2
- stack 0: 0x2
8187	 391	SUB		 	 
- stack 1: 0x914
- stack 0: 0x0
8188	 392	PUSH2	039A	 ;; _neq_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 2: 0x914
- stack 1: 0x0
- stack 0: 0x39A
8189	 395	JUMPI		 	 
- stack 0: 0x914
8190	 396	PUSH2	03B4	 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 1: 0x914
- stack 0: 0x3B4
8191	 399	JUMP		 	 
- stack 0: 0x914
8192	 3B4	JUMPDEST		 ;; _neq_after_710282b39a169624e476012975453804719d5d9ac5e5355a359b14ccf8a57ebd	 
- stack 0: 0x914
8193	 3B5	PUSH1	04	 	 
- stack 1: 0x914
- stack 0: 0x4
8194	 3B7	ADD		 	 
- stack 0: 0x918
8195	 3B8	DUP1		 	  ;; # executing pc
- stack 1: 0x918
- stack 0: 0x918
8196	 3B9	MLOAD		 	 
- stack 1: 0x918
- stack 0: 0x163000000F40027010E005C0086000F0417000000DA000000F4002802A80048
8197	 3BA	PUSH1	F0	 	 
- stack 2: 0x918
- stack 1: 0x163000000F40027010E005C0086000F0417000000DA000000F4002802A80048
- stack 0: 0xF0
8198	 3BC	SHR		 	 
- stack 1: 0x918
- stack 0: 0x163
8199	 3BD	JUMP		 	 
- stack 0: 0x918
8200	 163	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x918
8201	 164	PUSH4	80000000	 	 
- stack 1: 0x918
- stack 0: 0x80000000
8202	 169	PUSH2	03A0	 	 
- stack 2: 0x918
- stack 1: 0x80000000
- stack 0: 0x3A0
8203	 16C	MSTORE		 	  ;; # store to x29
- stack 0: 0x918
8204	 16D	PUSH1	04	 	 
- stack 1: 0x918
- stack 0: 0x4
8205	 16F	ADD		 	 
- stack 0: 0x91C
8206	 170	DUP1		 	  ;; # executing pc
- stack 1: 0x91C
- stack 0: 0x91C
8207	 171	MLOAD		 	 
- stack 1: 0x91C
- stack 0: 0xF40027010E005C0086000F0417000000DA000000F4002802A8004800860020
8208	 172	PUSH1	F0	 	 
- stack 2: 0x91C
- stack 1: 0xF40027010E005C0086000F0417000000DA000000F4002802A8004800860020
- stack 0: 0xF0
8209	 174	SHR		 	 
- stack 1: 0x91C
- stack 0: 0xF4
8210	 175	JUMP		 	 
- stack 0: 0x91C
8211	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x91C
8212	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x91C
- stack 0: 0x91C
8213	 F6	MLOAD		 	 
- stack 1: 0x91C
- stack 0: 0xF40027010E005C0086000F0417000000DA000000F4002802A8004800860020
8214	 F7	PUSH1	E0	 	 
- stack 2: 0x91C
- stack 1: 0xF40027010E005C0086000F0417000000DA000000F4002802A8004800860020
- stack 0: 0xE0
8215	 F9	SHR		 	 
- stack 1: 0x91C
- stack 0: 0xF40027
8216	 FA	PUSH2	FFFF	 	 
- stack 2: 0x91C
- stack 1: 0xF40027
- stack 0: 0xFFFF
8217	 FD	AND		 	 
- stack 1: 0x91C
- stack 0: 0x27
8218	 FE	PUSH1	01	 	 
- stack 2: 0x91C
- stack 1: 0x27
- stack 0: 0x1
8219	 100	SIGNEXTEND		 	 
- stack 1: 0x91C
- stack 0: 0x27
8220	 101	PUSH2	0380	 	 
- stack 2: 0x91C
- stack 1: 0x27
- stack 0: 0x380
8221	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x91C
8222	 105	PUSH1	04	 	 
- stack 1: 0x91C
- stack 0: 0x4
8223	 107	ADD		 	 
- stack 0: 0x920
8224	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x920
- stack 0: 0x920
8225	 109	MLOAD		 	 
- stack 1: 0x920
- stack 0: 0x10E005C0086000F0417000000DA000000F4002802A800480086002004350000
8226	 10A	PUSH1	F0	 	 
- stack 2: 0x920
- stack 1: 0x10E005C0086000F0417000000DA000000F4002802A800480086002004350000
- stack 0: 0xF0
8227	 10C	SHR		 	 
- stack 1: 0x920
- stack 0: 0x10E
8228	 10D	JUMP		 	 
- stack 0: 0x920
8229	 10E	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,558(ignore imm)
- stack 0: 0x920
8230	 10F	PUSH2	0060	 	 
- stack 1: 0x920
- stack 0: 0x60
8231	 112	MLOAD		 	  ;; # read from x3
- stack 1: 0x920
- stack 0: 0x80000000
8232	 113	PUSH4	FFFFFFFF	 	 
- stack 2: 0x920
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
8233	 118	AND		 	  ;; # mask to 32 bits
- stack 1: 0x920
- stack 0: 0x80000000
8234	 119	PUSH2	03A0	 	 
- stack 2: 0x920
- stack 1: 0x80000000
- stack 0: 0x3A0
8235	 11C	MLOAD		 	  ;; # read from x29
- stack 2: 0x920
- stack 1: 0x80000000
- stack 0: 0x80000000
8236	 11D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x920
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
8237	 122	AND		 	  ;; # mask to 32 bits
- stack 2: 0x920
- stack 1: 0x80000000
- stack 0: 0x80000000
8238	 123	SUB		 	 
- stack 1: 0x920
- stack 0: 0x0
8239	 124	PUSH2	012C	 ;; _neq_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 2: 0x920
- stack 1: 0x0
- stack 0: 0x12C
8240	 127	JUMPI		 	 
- stack 0: 0x920
8241	 128	PUSH2	0146	 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 1: 0x920
- stack 0: 0x146
8242	 12B	JUMP		 	 
- stack 0: 0x920
8243	 146	JUMPDEST		 ;; _neq_after_abccc97e244e706c08a712d9ac576dfbca7d792c95b8860248bdb40bc175413b	 
- stack 0: 0x920
8244	 147	PUSH1	04	 	 
- stack 1: 0x920
- stack 0: 0x4
8245	 149	ADD		 	 
- stack 0: 0x924
8246	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x924
- stack 0: 0x924
8247	 14B	MLOAD		 	 
- stack 1: 0x924
- stack 0: 0x86000F0417000000DA000000F4002802A80048008600200435000000DA0020
8248	 14C	PUSH1	F0	 	 
- stack 2: 0x924
- stack 1: 0x86000F0417000000DA000000F4002802A80048008600200435000000DA0020
- stack 0: 0xF0
8249	 14E	SHR		 	 
- stack 1: 0x924
- stack 0: 0x86
8250	 14F	JUMP		 	 
- stack 0: 0x924
8251	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x924
8252	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x924
- stack 0: 0x924
8253	 88	MLOAD		 	 
- stack 1: 0x924
- stack 0: 0x86000F0417000000DA000000F4002802A80048008600200435000000DA0020
8254	 89	PUSH1	E0	 	 
- stack 2: 0x924
- stack 1: 0x86000F0417000000DA000000F4002802A80048008600200435000000DA0020
- stack 0: 0xE0
8255	 8B	SHR		 	 
- stack 1: 0x924
- stack 0: 0x86000F
8256	 8C	PUSH2	FFFF	 	 
- stack 2: 0x924
- stack 1: 0x86000F
- stack 0: 0xFFFF
8257	 8F	AND		 	 
- stack 1: 0x924
- stack 0: 0xF
8258	 90	PUSH1	01	 	 
- stack 2: 0x924
- stack 1: 0xF
- stack 0: 0x1
8259	 92	SIGNEXTEND		 	 
- stack 1: 0x924
- stack 0: 0xF
8260	 93	PUSH2	0020	 	 
- stack 2: 0x924
- stack 1: 0xF
- stack 0: 0x20
8261	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x924
8262	 97	PUSH1	04	 	 
- stack 1: 0x924
- stack 0: 0x4
8263	 99	ADD		 	 
- stack 0: 0x928
8264	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x928
- stack 0: 0x928
8265	 9B	MLOAD		 	 
- stack 1: 0x928
- stack 0: 0x417000000DA000000F4002802A80048008600200435000000DA002000F40029
8266	 9C	PUSH1	F0	 	 
- stack 2: 0x928
- stack 1: 0x417000000DA000000F4002802A80048008600200435000000DA002000F40029
- stack 0: 0xF0
8267	 9E	SHR		 	 
- stack 1: 0x928
- stack 0: 0x417
8268	 9F	JUMP		 	 
- stack 0: 0x928
8269	 417	JUMPDEST		 ;; __riscvimpl_SLL_2_0_1	  ;; # instr: sll sp,zero,ra(ignore imm)
- stack 0: 0x928
8270	 418	PUSH1	00	 	 
- stack 1: 0x928
- stack 0: 0x0
8271	 41A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x928
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8272	 41F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x928
- stack 0: 0x0
8273	 420	PUSH2	0020	 	 
- stack 2: 0x928
- stack 1: 0x0
- stack 0: 0x20
8274	 423	MLOAD		 	  ;; # read from x1
- stack 2: 0x928
- stack 1: 0x0
- stack 0: 0xF
8275	 424	PUSH1	1F	 	 
- stack 3: 0x928
- stack 2: 0x0
- stack 1: 0xF
- stack 0: 0x1F
8276	 426	AND		 	  ;; # mask to 5 bits
- stack 2: 0x928
- stack 1: 0x0
- stack 0: 0xF
8277	 427	SHL		 	 
- stack 1: 0x928
- stack 0: 0x0
8278	 428	PUSH2	0040	 	 
- stack 2: 0x928
- stack 1: 0x0
- stack 0: 0x40
8279	 42B	MSTORE		 	  ;; # store to x2
- stack 0: 0x928
8280	 42C	PUSH1	04	 	 
- stack 1: 0x928
- stack 0: 0x4
8281	 42E	ADD		 	 
- stack 0: 0x92C
8282	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x92C
- stack 0: 0x92C
8283	 430	MLOAD		 	 
- stack 1: 0x92C
- stack 0: 0xDA000000F4002802A80048008600200435000000DA002000F4002902A80034
8284	 431	PUSH1	F0	 	 
- stack 2: 0x92C
- stack 1: 0xDA000000F4002802A80048008600200435000000DA002000F4002902A80034
- stack 0: 0xF0
8285	 433	SHR		 	 
- stack 1: 0x92C
- stack 0: 0xDA
8286	 434	JUMP		 	 
- stack 0: 0x92C
8287	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x92C
8288	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x92C
- stack 0: 0x92C
8289	 DC	MLOAD		 	 
- stack 1: 0x92C
- stack 0: 0xDA000000F4002802A80048008600200435000000DA002000F4002902A80034
8290	 DD	PUSH1	E0	 	 
- stack 2: 0x92C
- stack 1: 0xDA000000F4002802A80048008600200435000000DA002000F4002902A80034
- stack 0: 0xE0
8291	 DF	SHR		 	 
- stack 1: 0x92C
- stack 0: 0xDA0000
8292	 E0	PUSH2	FFFF	 	 
- stack 2: 0x92C
- stack 1: 0xDA0000
- stack 0: 0xFFFF
8293	 E3	AND		 	 
- stack 1: 0x92C
- stack 0: 0x0
8294	 E4	PUSH1	01	 	 
- stack 2: 0x92C
- stack 1: 0x0
- stack 0: 0x1
8295	 E6	SIGNEXTEND		 	 
- stack 1: 0x92C
- stack 0: 0x0
8296	 E7	PUSH2	03A0	 	 
- stack 2: 0x92C
- stack 1: 0x0
- stack 0: 0x3A0
8297	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x92C
8298	 EB	PUSH1	04	 	 
- stack 1: 0x92C
- stack 0: 0x4
8299	 ED	ADD		 	 
- stack 0: 0x930
8300	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x930
- stack 0: 0x930
8301	 EF	MLOAD		 	 
- stack 1: 0x930
- stack 0: 0xF4002802A80048008600200435000000DA002000F4002902A8003404530000
8302	 F0	PUSH1	F0	 	 
- stack 2: 0x930
- stack 1: 0xF4002802A80048008600200435000000DA002000F4002902A8003404530000
- stack 0: 0xF0
8303	 F2	SHR		 	 
- stack 1: 0x930
- stack 0: 0xF4
8304	 F3	JUMP		 	 
- stack 0: 0x930
8305	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x930
8306	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x930
- stack 0: 0x930
8307	 F6	MLOAD		 	 
- stack 1: 0x930
- stack 0: 0xF4002802A80048008600200435000000DA002000F4002902A8003404530000
8308	 F7	PUSH1	E0	 	 
- stack 2: 0x930
- stack 1: 0xF4002802A80048008600200435000000DA002000F4002902A8003404530000
- stack 0: 0xE0
8309	 F9	SHR		 	 
- stack 1: 0x930
- stack 0: 0xF40028
8310	 FA	PUSH2	FFFF	 	 
- stack 2: 0x930
- stack 1: 0xF40028
- stack 0: 0xFFFF
8311	 FD	AND		 	 
- stack 1: 0x930
- stack 0: 0x28
8312	 FE	PUSH1	01	 	 
- stack 2: 0x930
- stack 1: 0x28
- stack 0: 0x1
8313	 100	SIGNEXTEND		 	 
- stack 1: 0x930
- stack 0: 0x28
8314	 101	PUSH2	0380	 	 
- stack 2: 0x930
- stack 1: 0x28
- stack 0: 0x380
8315	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x930
8316	 105	PUSH1	04	 	 
- stack 1: 0x930
- stack 0: 0x4
8317	 107	ADD		 	 
- stack 0: 0x934
8318	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x934
- stack 0: 0x934
8319	 109	MLOAD		 	 
- stack 1: 0x934
- stack 0: 0x2A80048008600200435000000DA002000F4002902A800340453000000DA0000
8320	 10A	PUSH1	F0	 	 
- stack 2: 0x934
- stack 1: 0x2A80048008600200435000000DA002000F4002902A800340453000000DA0000
- stack 0: 0xF0
8321	 10C	SHR		 	 
- stack 1: 0x934
- stack 0: 0x2A8
8322	 10D	JUMP		 	 
- stack 0: 0x934
8323	 2A8	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,320(ignore imm)
- stack 0: 0x934
8324	 2A9	PUSH2	0040	 	 
- stack 1: 0x934
- stack 0: 0x40
8325	 2AC	MLOAD		 	  ;; # read from x2
- stack 1: 0x934
- stack 0: 0x0
8326	 2AD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x934
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8327	 2B2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x934
- stack 0: 0x0
8328	 2B3	PUSH2	03A0	 	 
- stack 2: 0x934
- stack 1: 0x0
- stack 0: 0x3A0
8329	 2B6	MLOAD		 	  ;; # read from x29
- stack 2: 0x934
- stack 1: 0x0
- stack 0: 0x0
8330	 2B7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x934
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8331	 2BC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x934
- stack 1: 0x0
- stack 0: 0x0
8332	 2BD	SUB		 	 
- stack 1: 0x934
- stack 0: 0x0
8333	 2BE	PUSH2	02C6	 ;; _neq_43fcf4b2f3d37e9b70e16c2b7919bc66e11c9bd3aea60c9348e8e8364fe62612	 
- stack 2: 0x934
- stack 1: 0x0
- stack 0: 0x2C6
8334	 2C1	JUMPI		 	 
- stack 0: 0x934
8335	 2C2	PUSH2	02E0	 ;; _neq_after_43fcf4b2f3d37e9b70e16c2b7919bc66e11c9bd3aea60c9348e8e8364fe62612	 
- stack 1: 0x934
- stack 0: 0x2E0
8336	 2C5	JUMP		 	 
- stack 0: 0x934
8337	 2E0	JUMPDEST		 ;; _neq_after_43fcf4b2f3d37e9b70e16c2b7919bc66e11c9bd3aea60c9348e8e8364fe62612	 
- stack 0: 0x934
8338	 2E1	PUSH1	04	 	 
- stack 1: 0x934
- stack 0: 0x4
8339	 2E3	ADD		 	 
- stack 0: 0x938
8340	 2E4	DUP1		 	  ;; # executing pc
- stack 1: 0x938
- stack 0: 0x938
8341	 2E5	MLOAD		 	 
- stack 1: 0x938
- stack 0: 0x8600200435000000DA002000F4002902A800340453000000DA000000F4002A
8342	 2E6	PUSH1	F0	 	 
- stack 2: 0x938
- stack 1: 0x8600200435000000DA002000F4002902A800340453000000DA000000F4002A
- stack 0: 0xF0
8343	 2E8	SHR		 	 
- stack 1: 0x938
- stack 0: 0x86
8344	 2E9	JUMP		 	 
- stack 0: 0x938
8345	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x938
8346	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x938
- stack 0: 0x938
8347	 88	MLOAD		 	 
- stack 1: 0x938
- stack 0: 0x8600200435000000DA002000F4002902A800340453000000DA000000F4002A
8348	 89	PUSH1	E0	 	 
- stack 2: 0x938
- stack 1: 0x8600200435000000DA002000F4002902A800340453000000DA000000F4002A
- stack 0: 0xE0
8349	 8B	SHR		 	 
- stack 1: 0x938
- stack 0: 0x860020
8350	 8C	PUSH2	FFFF	 	 
- stack 2: 0x938
- stack 1: 0x860020
- stack 0: 0xFFFF
8351	 8F	AND		 	 
- stack 1: 0x938
- stack 0: 0x20
8352	 90	PUSH1	01	 	 
- stack 2: 0x938
- stack 1: 0x20
- stack 0: 0x1
8353	 92	SIGNEXTEND		 	 
- stack 1: 0x938
- stack 0: 0x20
8354	 93	PUSH2	0020	 	 
- stack 2: 0x938
- stack 1: 0x20
- stack 0: 0x20
8355	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x938
8356	 97	PUSH1	04	 	 
- stack 1: 0x938
- stack 0: 0x4
8357	 99	ADD		 	 
- stack 0: 0x93C
8358	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x93C
- stack 0: 0x93C
8359	 9B	MLOAD		 	 
- stack 1: 0x93C
- stack 0: 0x435000000DA002000F4002902A800340453000000DA000000F4002A02460024
8360	 9C	PUSH1	F0	 	 
- stack 2: 0x93C
- stack 1: 0x435000000DA002000F4002902A800340453000000DA000000F4002A02460024
- stack 0: 0xF0
8361	 9E	SHR		 	 
- stack 1: 0x93C
- stack 0: 0x435
8362	 9F	JUMP		 	 
- stack 0: 0x93C
8363	 435	JUMPDEST		 ;; __riscvimpl_SLL_2_1_0	  ;; # instr: sll sp,ra,zero(ignore imm)
- stack 0: 0x93C
8364	 436	PUSH2	0020	 	 
- stack 1: 0x93C
- stack 0: 0x20
8365	 439	MLOAD		 	  ;; # read from x1
- stack 1: 0x93C
- stack 0: 0x20
8366	 43A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x93C
- stack 1: 0x20
- stack 0: 0xFFFFFFFF
8367	 43F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x93C
- stack 0: 0x20
8368	 440	PUSH1	00	 	 
- stack 2: 0x93C
- stack 1: 0x20
- stack 0: 0x0
8369	 442	PUSH1	1F	 	 
- stack 3: 0x93C
- stack 2: 0x20
- stack 1: 0x0
- stack 0: 0x1F
8370	 444	AND		 	  ;; # mask to 5 bits
- stack 2: 0x93C
- stack 1: 0x20
- stack 0: 0x0
8371	 445	SHL		 	 
- stack 1: 0x93C
- stack 0: 0x20
8372	 446	PUSH2	0040	 	 
- stack 2: 0x93C
- stack 1: 0x20
- stack 0: 0x40
8373	 449	MSTORE		 	  ;; # store to x2
- stack 0: 0x93C
8374	 44A	PUSH1	04	 	 
- stack 1: 0x93C
- stack 0: 0x4
8375	 44C	ADD		 	 
- stack 0: 0x940
8376	 44D	DUP1		 	  ;; # executing pc
- stack 1: 0x940
- stack 0: 0x940
8377	 44E	MLOAD		 	 
- stack 1: 0x940
- stack 0: 0xDA002000F4002902A800340453000000DA000000F4002A0246002400860400
8378	 44F	PUSH1	F0	 	 
- stack 2: 0x940
- stack 1: 0xDA002000F4002902A800340453000000DA000000F4002A0246002400860400
- stack 0: 0xF0
8379	 451	SHR		 	 
- stack 1: 0x940
- stack 0: 0xDA
8380	 452	JUMP		 	 
- stack 0: 0x940
8381	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x940
8382	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x940
- stack 0: 0x940
8383	 DC	MLOAD		 	 
- stack 1: 0x940
- stack 0: 0xDA002000F4002902A800340453000000DA000000F4002A0246002400860400
8384	 DD	PUSH1	E0	 	 
- stack 2: 0x940
- stack 1: 0xDA002000F4002902A800340453000000DA000000F4002A0246002400860400
- stack 0: 0xE0
8385	 DF	SHR		 	 
- stack 1: 0x940
- stack 0: 0xDA0020
8386	 E0	PUSH2	FFFF	 	 
- stack 2: 0x940
- stack 1: 0xDA0020
- stack 0: 0xFFFF
8387	 E3	AND		 	 
- stack 1: 0x940
- stack 0: 0x20
8388	 E4	PUSH1	01	 	 
- stack 2: 0x940
- stack 1: 0x20
- stack 0: 0x1
8389	 E6	SIGNEXTEND		 	 
- stack 1: 0x940
- stack 0: 0x20
8390	 E7	PUSH2	03A0	 	 
- stack 2: 0x940
- stack 1: 0x20
- stack 0: 0x3A0
8391	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x940
8392	 EB	PUSH1	04	 	 
- stack 1: 0x940
- stack 0: 0x4
8393	 ED	ADD		 	 
- stack 0: 0x944
8394	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x944
- stack 0: 0x944
8395	 EF	MLOAD		 	 
- stack 1: 0x944
- stack 0: 0xF4002902A800340453000000DA000000F4002A0246002400860400046F0001
8396	 F0	PUSH1	F0	 	 
- stack 2: 0x944
- stack 1: 0xF4002902A800340453000000DA000000F4002A0246002400860400046F0001
- stack 0: 0xF0
8397	 F2	SHR		 	 
- stack 1: 0x944
- stack 0: 0xF4
8398	 F3	JUMP		 	 
- stack 0: 0x944
8399	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x944
8400	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x944
- stack 0: 0x944
8401	 F6	MLOAD		 	 
- stack 1: 0x944
- stack 0: 0xF4002902A800340453000000DA000000F4002A0246002400860400046F0001
8402	 F7	PUSH1	E0	 	 
- stack 2: 0x944
- stack 1: 0xF4002902A800340453000000DA000000F4002A0246002400860400046F0001
- stack 0: 0xE0
8403	 F9	SHR		 	 
- stack 1: 0x944
- stack 0: 0xF40029
8404	 FA	PUSH2	FFFF	 	 
- stack 2: 0x944
- stack 1: 0xF40029
- stack 0: 0xFFFF
8405	 FD	AND		 	 
- stack 1: 0x944
- stack 0: 0x29
8406	 FE	PUSH1	01	 	 
- stack 2: 0x944
- stack 1: 0x29
- stack 0: 0x1
8407	 100	SIGNEXTEND		 	 
- stack 1: 0x944
- stack 0: 0x29
8408	 101	PUSH2	0380	 	 
- stack 2: 0x944
- stack 1: 0x29
- stack 0: 0x380
8409	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x944
8410	 105	PUSH1	04	 	 
- stack 1: 0x944
- stack 0: 0x4
8411	 107	ADD		 	 
- stack 0: 0x948
8412	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x948
- stack 0: 0x948
8413	 109	MLOAD		 	 
- stack 1: 0x948
- stack 0: 0x2A800340453000000DA000000F4002A0246002400860400046F00010482F800
8414	 10A	PUSH1	F0	 	 
- stack 2: 0x948
- stack 1: 0x2A800340453000000DA000000F4002A0246002400860400046F00010482F800
- stack 0: 0xF0
8415	 10C	SHR		 	 
- stack 1: 0x948
- stack 0: 0x2A8
8416	 10D	JUMP		 	 
- stack 0: 0x948
8417	 2A8	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,320(ignore imm)
- stack 0: 0x948
8418	 2A9	PUSH2	0040	 	 
- stack 1: 0x948
- stack 0: 0x40
8419	 2AC	MLOAD		 	  ;; # read from x2
- stack 1: 0x948
- stack 0: 0x20
8420	 2AD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x948
- stack 1: 0x20
- stack 0: 0xFFFFFFFF
8421	 2B2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x948
- stack 0: 0x20
8422	 2B3	PUSH2	03A0	 	 
- stack 2: 0x948
- stack 1: 0x20
- stack 0: 0x3A0
8423	 2B6	MLOAD		 	  ;; # read from x29
- stack 2: 0x948
- stack 1: 0x20
- stack 0: 0x20
8424	 2B7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x948
- stack 2: 0x20
- stack 1: 0x20
- stack 0: 0xFFFFFFFF
8425	 2BC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x948
- stack 1: 0x20
- stack 0: 0x20
8426	 2BD	SUB		 	 
- stack 1: 0x948
- stack 0: 0x0
8427	 2BE	PUSH2	02C6	 ;; _neq_43fcf4b2f3d37e9b70e16c2b7919bc66e11c9bd3aea60c9348e8e8364fe62612	 
- stack 2: 0x948
- stack 1: 0x0
- stack 0: 0x2C6
8428	 2C1	JUMPI		 	 
- stack 0: 0x948
8429	 2C2	PUSH2	02E0	 ;; _neq_after_43fcf4b2f3d37e9b70e16c2b7919bc66e11c9bd3aea60c9348e8e8364fe62612	 
- stack 1: 0x948
- stack 0: 0x2E0
8430	 2C5	JUMP		 	 
- stack 0: 0x948
8431	 2E0	JUMPDEST		 ;; _neq_after_43fcf4b2f3d37e9b70e16c2b7919bc66e11c9bd3aea60c9348e8e8364fe62612	 
- stack 0: 0x948
8432	 2E1	PUSH1	04	 	 
- stack 1: 0x948
- stack 0: 0x4
8433	 2E3	ADD		 	 
- stack 0: 0x94C
8434	 2E4	DUP1		 	  ;; # executing pc
- stack 1: 0x94C
- stack 0: 0x94C
8435	 2E5	MLOAD		 	 
- stack 1: 0x94C
- stack 0: 0x453000000DA000000F4002A0246002400860400046F00010482F80004A10000
8436	 2E6	PUSH1	F0	 	 
- stack 2: 0x94C
- stack 1: 0x453000000DA000000F4002A0246002400860400046F00010482F80004A10000
- stack 0: 0xF0
8437	 2E8	SHR		 	 
- stack 1: 0x94C
- stack 0: 0x453
8438	 2E9	JUMP		 	 
- stack 0: 0x94C
8439	 453	JUMPDEST		 ;; __riscvimpl_SLL_1_0_0	  ;; # instr: sll ra,zero,zero(ignore imm)
- stack 0: 0x94C
8440	 454	PUSH1	00	 	 
- stack 1: 0x94C
- stack 0: 0x0
8441	 456	PUSH4	FFFFFFFF	 	 
- stack 2: 0x94C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8442	 45B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x94C
- stack 0: 0x0
8443	 45C	PUSH1	00	 	 
- stack 2: 0x94C
- stack 1: 0x0
- stack 0: 0x0
8444	 45E	PUSH1	1F	 	 
- stack 3: 0x94C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0x1F
8445	 460	AND		 	  ;; # mask to 5 bits
- stack 2: 0x94C
- stack 1: 0x0
- stack 0: 0x0
8446	 461	SHL		 	 
- stack 1: 0x94C
- stack 0: 0x0
8447	 462	PUSH2	0020	 	 
- stack 2: 0x94C
- stack 1: 0x0
- stack 0: 0x20
8448	 465	MSTORE		 	  ;; # store to x1
- stack 0: 0x94C
8449	 466	PUSH1	04	 	 
- stack 1: 0x94C
- stack 0: 0x4
8450	 468	ADD		 	 
- stack 0: 0x950
8451	 469	DUP1		 	  ;; # executing pc
- stack 1: 0x950
- stack 0: 0x950
8452	 46A	MLOAD		 	 
- stack 1: 0x950
- stack 0: 0xDA000000F4002A0246002400860400046F00010482F80004A1000000DA0000
8453	 46B	PUSH1	F0	 	 
- stack 2: 0x950
- stack 1: 0xDA000000F4002A0246002400860400046F00010482F80004A1000000DA0000
- stack 0: 0xF0
8454	 46D	SHR		 	 
- stack 1: 0x950
- stack 0: 0xDA
8455	 46E	JUMP		 	 
- stack 0: 0x950
8456	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x950
8457	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x950
- stack 0: 0x950
8458	 DC	MLOAD		 	 
- stack 1: 0x950
- stack 0: 0xDA000000F4002A0246002400860400046F00010482F80004A1000000DA0000
8459	 DD	PUSH1	E0	 	 
- stack 2: 0x950
- stack 1: 0xDA000000F4002A0246002400860400046F00010482F80004A1000000DA0000
- stack 0: 0xE0
8460	 DF	SHR		 	 
- stack 1: 0x950
- stack 0: 0xDA0000
8461	 E0	PUSH2	FFFF	 	 
- stack 2: 0x950
- stack 1: 0xDA0000
- stack 0: 0xFFFF
8462	 E3	AND		 	 
- stack 1: 0x950
- stack 0: 0x0
8463	 E4	PUSH1	01	 	 
- stack 2: 0x950
- stack 1: 0x0
- stack 0: 0x1
8464	 E6	SIGNEXTEND		 	 
- stack 1: 0x950
- stack 0: 0x0
8465	 E7	PUSH2	03A0	 	 
- stack 2: 0x950
- stack 1: 0x0
- stack 0: 0x3A0
8466	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x950
8467	 EB	PUSH1	04	 	 
- stack 1: 0x950
- stack 0: 0x4
8468	 ED	ADD		 	 
- stack 0: 0x954
8469	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x954
- stack 0: 0x954
8470	 EF	MLOAD		 	 
- stack 1: 0x954
- stack 0: 0xF4002A0246002400860400046F00010482F80004A1000000DA000000F4002B
8471	 F0	PUSH1	F0	 	 
- stack 2: 0x954
- stack 1: 0xF4002A0246002400860400046F00010482F80004A1000000DA000000F4002B
- stack 0: 0xF0
8472	 F2	SHR		 	 
- stack 1: 0x954
- stack 0: 0xF4
8473	 F3	JUMP		 	 
- stack 0: 0x954
8474	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x954
8475	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x954
- stack 0: 0x954
8476	 F6	MLOAD		 	 
- stack 1: 0x954
- stack 0: 0xF4002A0246002400860400046F00010482F80004A1000000DA000000F4002B
8477	 F7	PUSH1	E0	 	 
- stack 2: 0x954
- stack 1: 0xF4002A0246002400860400046F00010482F80004A1000000DA000000F4002B
- stack 0: 0xE0
8478	 F9	SHR		 	 
- stack 1: 0x954
- stack 0: 0xF4002A
8479	 FA	PUSH2	FFFF	 	 
- stack 2: 0x954
- stack 1: 0xF4002A
- stack 0: 0xFFFF
8480	 FD	AND		 	 
- stack 1: 0x954
- stack 0: 0x2A
8481	 FE	PUSH1	01	 	 
- stack 2: 0x954
- stack 1: 0x2A
- stack 0: 0x1
8482	 100	SIGNEXTEND		 	 
- stack 1: 0x954
- stack 0: 0x2A
8483	 101	PUSH2	0380	 	 
- stack 2: 0x954
- stack 1: 0x2A
- stack 0: 0x380
8484	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x954
8485	 105	PUSH1	04	 	 
- stack 1: 0x954
- stack 0: 0x4
8486	 107	ADD		 	 
- stack 0: 0x958
8487	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x958
- stack 0: 0x958
8488	 109	MLOAD		 	 
- stack 1: 0x958
- stack 0: 0x246002400860400046F00010482F80004A1000000DA000000F4002B04BE0008
8489	 10A	PUSH1	F0	 	 
- stack 2: 0x958
- stack 1: 0x246002400860400046F00010482F80004A1000000DA000000F4002B04BE0008
- stack 0: 0xF0
8490	 10C	SHR		 	 
- stack 1: 0x958
- stack 0: 0x246
8491	 10D	JUMP		 	 
- stack 0: 0x958
8492	 246	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,338(ignore imm)
- stack 0: 0x958
8493	 247	PUSH2	0020	 	 
- stack 1: 0x958
- stack 0: 0x20
8494	 24A	MLOAD		 	  ;; # read from x1
- stack 1: 0x958
- stack 0: 0x0
8495	 24B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x958
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8496	 250	AND		 	  ;; # mask to 32 bits
- stack 1: 0x958
- stack 0: 0x0
8497	 251	PUSH2	03A0	 	 
- stack 2: 0x958
- stack 1: 0x0
- stack 0: 0x3A0
8498	 254	MLOAD		 	  ;; # read from x29
- stack 2: 0x958
- stack 1: 0x0
- stack 0: 0x0
8499	 255	PUSH4	FFFFFFFF	 	 
- stack 3: 0x958
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8500	 25A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x958
- stack 1: 0x0
- stack 0: 0x0
8501	 25B	SUB		 	 
- stack 1: 0x958
- stack 0: 0x0
8502	 25C	PUSH2	0264	 ;; _neq_04a911ab758c032f05a3f56e947f52e48400aca3677ec6b10020ebb39886d47d	 
- stack 2: 0x958
- stack 1: 0x0
- stack 0: 0x264
8503	 25F	JUMPI		 	 
- stack 0: 0x958
8504	 260	PUSH2	027E	 ;; _neq_after_04a911ab758c032f05a3f56e947f52e48400aca3677ec6b10020ebb39886d47d	 
- stack 1: 0x958
- stack 0: 0x27E
8505	 263	JUMP		 	 
- stack 0: 0x958
8506	 27E	JUMPDEST		 ;; _neq_after_04a911ab758c032f05a3f56e947f52e48400aca3677ec6b10020ebb39886d47d	 
- stack 0: 0x958
8507	 27F	PUSH1	04	 	 
- stack 1: 0x958
- stack 0: 0x4
8508	 281	ADD		 	 
- stack 0: 0x95C
8509	 282	DUP1		 	  ;; # executing pc
- stack 1: 0x95C
- stack 0: 0x95C
8510	 283	MLOAD		 	 
- stack 1: 0x95C
- stack 0: 0x860400046F00010482F80004A1000000DA000000F4002B04BE000804FE0018
8511	 284	PUSH1	F0	 	 
- stack 2: 0x95C
- stack 1: 0x860400046F00010482F80004A1000000DA000000F4002B04BE000804FE0018
- stack 0: 0xF0
8512	 286	SHR		 	 
- stack 1: 0x95C
- stack 0: 0x86
8513	 287	JUMP		 	 
- stack 0: 0x95C
8514	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x95C
8515	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x95C
- stack 0: 0x95C
8516	 88	MLOAD		 	 
- stack 1: 0x95C
- stack 0: 0x860400046F00010482F80004A1000000DA000000F4002B04BE000804FE0018
8517	 89	PUSH1	E0	 	 
- stack 2: 0x95C
- stack 1: 0x860400046F00010482F80004A1000000DA000000F4002B04BE000804FE0018
- stack 0: 0xE0
8518	 8B	SHR		 	 
- stack 1: 0x95C
- stack 0: 0x860400
8519	 8C	PUSH2	FFFF	 	 
- stack 2: 0x95C
- stack 1: 0x860400
- stack 0: 0xFFFF
8520	 8F	AND		 	 
- stack 1: 0x95C
- stack 0: 0x400
8521	 90	PUSH1	01	 	 
- stack 2: 0x95C
- stack 1: 0x400
- stack 0: 0x1
8522	 92	SIGNEXTEND		 	 
- stack 1: 0x95C
- stack 0: 0x400
8523	 93	PUSH2	0020	 	 
- stack 2: 0x95C
- stack 1: 0x400
- stack 0: 0x20
8524	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x95C
8525	 97	PUSH1	04	 	 
- stack 1: 0x95C
- stack 0: 0x4
8526	 99	ADD		 	 
- stack 0: 0x960
8527	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x960
- stack 0: 0x960
8528	 9B	MLOAD		 	 
- stack 1: 0x960
- stack 0: 0x46F00010482F80004A1000000DA000000F4002B04BE000804FE001800210001
8529	 9C	PUSH1	F0	 	 
- stack 2: 0x960
- stack 1: 0x46F00010482F80004A1000000DA000000F4002B04BE000804FE001800210001
- stack 0: 0xF0
8530	 9E	SHR		 	 
- stack 1: 0x960
- stack 0: 0x46F
8531	 9F	JUMP		 	 
- stack 0: 0x960
8532	 46F	JUMPDEST		 ;; __riscvimpl_LUI_1137	  ;; # instr: lui sp,0x1(ignore imm)
- stack 0: 0x960
8533	 470	PUSH4	00001000	 	 
- stack 1: 0x960
- stack 0: 0x1000
8534	 475	PUSH2	0040	 	 
- stack 2: 0x960
- stack 1: 0x1000
- stack 0: 0x40
8535	 478	MSTORE		 	  ;; # store to x2
- stack 0: 0x960
8536	 479	PUSH1	04	 	 
- stack 1: 0x960
- stack 0: 0x4
8537	 47B	ADD		 	 
- stack 0: 0x964
8538	 47C	DUP1		 	  ;; # executing pc
- stack 1: 0x964
- stack 0: 0x964
8539	 47D	MLOAD		 	 
- stack 1: 0x964
- stack 0: 0x482F80004A1000000DA000000F4002B04BE000804FE0018002100010034F9B8
8540	 47E	PUSH1	F0	 	 
- stack 2: 0x964
- stack 1: 0x482F80004A1000000DA000000F4002B04BE000804FE0018002100010034F9B8
- stack 0: 0xF0
8541	 480	SHR		 	 
- stack 1: 0x964
- stack 0: 0x482
8542	 481	JUMP		 	 
- stack 0: 0x964
8543	 482	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-2048(ignore imm)
- stack 0: 0x964
8544	 483	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x964
- stack 0: 0x964
8545	 484	MLOAD		 	 
- stack 1: 0x964
- stack 0: 0x482F80004A1000000DA000000F4002B04BE000804FE0018002100010034F9B8
8546	 485	PUSH1	E0	 	 
- stack 2: 0x964
- stack 1: 0x482F80004A1000000DA000000F4002B04BE000804FE0018002100010034F9B8
- stack 0: 0xE0
8547	 487	SHR		 	 
- stack 1: 0x964
- stack 0: 0x482F800
8548	 488	PUSH2	FFFF	 	 
- stack 2: 0x964
- stack 1: 0x482F800
- stack 0: 0xFFFF
8549	 48B	AND		 	 
- stack 1: 0x964
- stack 0: 0xF800
8550	 48C	PUSH1	01	 	 
- stack 2: 0x964
- stack 1: 0xF800
- stack 0: 0x1
8551	 48E	SIGNEXTEND		 	 
- stack 1: 0x964
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
8552	 48F	PUSH2	0040	 	 
- stack 2: 0x964
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x40
8553	 492	MLOAD		 	  ;; # read from x2
- stack 2: 0x964
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x1000
8554	 493	ADD		 	  ;; # ADDI 2
- stack 1: 0x964
- stack 0: 0x800
8555	 494	PUSH2	0040	 	 
- stack 2: 0x964
- stack 1: 0x800
- stack 0: 0x40
8556	 497	MSTORE		 	  ;; # store to x2
- stack 0: 0x964
8557	 498	PUSH1	04	 	 
- stack 1: 0x964
- stack 0: 0x4
8558	 49A	ADD		 	 
- stack 0: 0x968
8559	 49B	DUP1		 	  ;; # executing pc
- stack 1: 0x968
- stack 0: 0x968
8560	 49C	MLOAD		 	 
- stack 1: 0x968
- stack 0: 0x4A1000000DA000000F4002B04BE000804FE0018002100010034F9B800530042
8561	 49D	PUSH1	F0	 	 
- stack 2: 0x968
- stack 1: 0x4A1000000DA000000F4002B04BE000804FE0018002100010034F9B800530042
- stack 0: 0xF0
8562	 49F	SHR		 	 
- stack 1: 0x968
- stack 0: 0x4A1
8563	 4A0	JUMP		 	 
- stack 0: 0x968
8564	 4A1	JUMPDEST		 ;; __riscvimpl_SLL_0_1_2	  ;; # instr: sll zero,ra,sp(ignore imm)
- stack 0: 0x968
8565	 4A2	PUSH2	0020	 	 
- stack 1: 0x968
- stack 0: 0x20
8566	 4A5	MLOAD		 	  ;; # read from x1
- stack 1: 0x968
- stack 0: 0x400
8567	 4A6	PUSH4	FFFFFFFF	 	 
- stack 2: 0x968
- stack 1: 0x400
- stack 0: 0xFFFFFFFF
8568	 4AB	AND		 	  ;; # mask to 32 bits
- stack 1: 0x968
- stack 0: 0x400
8569	 4AC	PUSH2	0040	 	 
- stack 2: 0x968
- stack 1: 0x400
- stack 0: 0x40
8570	 4AF	MLOAD		 	  ;; # read from x2
- stack 2: 0x968
- stack 1: 0x400
- stack 0: 0x800
8571	 4B0	PUSH1	1F	 	 
- stack 3: 0x968
- stack 2: 0x400
- stack 1: 0x800
- stack 0: 0x1F
8572	 4B2	AND		 	  ;; # mask to 5 bits
- stack 2: 0x968
- stack 1: 0x400
- stack 0: 0x0
8573	 4B3	SHL		 	 
- stack 1: 0x968
- stack 0: 0x400
8574	 4B4	POP		 	 
- stack 0: 0x968
8575	 4B5	PUSH1	04	 	 
- stack 1: 0x968
- stack 0: 0x4
8576	 4B7	ADD		 	 
- stack 0: 0x96C
8577	 4B8	DUP1		 	  ;; # executing pc
- stack 1: 0x96C
- stack 0: 0x96C
8578	 4B9	MLOAD		 	 
- stack 1: 0x96C
- stack 0: 0xDA000000F4002B04BE000804FE0018002100010034F9B80053004200660000
8579	 4BA	PUSH1	F0	 	 
- stack 2: 0x96C
- stack 1: 0xDA000000F4002B04BE000804FE0018002100010034F9B80053004200660000
- stack 0: 0xF0
8580	 4BC	SHR		 	 
- stack 1: 0x96C
- stack 0: 0xDA
8581	 4BD	JUMP		 	 
- stack 0: 0x96C
8582	 DA	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x96C
8583	 DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x96C
- stack 0: 0x96C
8584	 DC	MLOAD		 	 
- stack 1: 0x96C
- stack 0: 0xDA000000F4002B04BE000804FE0018002100010034F9B80053004200660000
8585	 DD	PUSH1	E0	 	 
- stack 2: 0x96C
- stack 1: 0xDA000000F4002B04BE000804FE0018002100010034F9B80053004200660000
- stack 0: 0xE0
8586	 DF	SHR		 	 
- stack 1: 0x96C
- stack 0: 0xDA0000
8587	 E0	PUSH2	FFFF	 	 
- stack 2: 0x96C
- stack 1: 0xDA0000
- stack 0: 0xFFFF
8588	 E3	AND		 	 
- stack 1: 0x96C
- stack 0: 0x0
8589	 E4	PUSH1	01	 	 
- stack 2: 0x96C
- stack 1: 0x0
- stack 0: 0x1
8590	 E6	SIGNEXTEND		 	 
- stack 1: 0x96C
- stack 0: 0x0
8591	 E7	PUSH2	03A0	 	 
- stack 2: 0x96C
- stack 1: 0x0
- stack 0: 0x3A0
8592	 EA	MSTORE		 	  ;; # store to x29
- stack 0: 0x96C
8593	 EB	PUSH1	04	 	 
- stack 1: 0x96C
- stack 0: 0x4
8594	 ED	ADD		 	 
- stack 0: 0x970
8595	 EE	DUP1		 	  ;; # executing pc
- stack 1: 0x970
- stack 0: 0x970
8596	 EF	MLOAD		 	 
- stack 1: 0x970
- stack 0: 0xF4002B04BE000804FE0018002100010034F9B80053004200660000053E0001
8597	 F0	PUSH1	F0	 	 
- stack 2: 0x970
- stack 1: 0xF4002B04BE000804FE0018002100010034F9B80053004200660000053E0001
- stack 0: 0xF0
8598	 F2	SHR		 	 
- stack 1: 0x970
- stack 0: 0xF4
8599	 F3	JUMP		 	 
- stack 0: 0x970
8600	 F4	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x970
8601	 F5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x970
- stack 0: 0x970
8602	 F6	MLOAD		 	 
- stack 1: 0x970
- stack 0: 0xF4002B04BE000804FE0018002100010034F9B80053004200660000053E0001
8603	 F7	PUSH1	E0	 	 
- stack 2: 0x970
- stack 1: 0xF4002B04BE000804FE0018002100010034F9B80053004200660000053E0001
- stack 0: 0xE0
8604	 F9	SHR		 	 
- stack 1: 0x970
- stack 0: 0xF4002B
8605	 FA	PUSH2	FFFF	 	 
- stack 2: 0x970
- stack 1: 0xF4002B
- stack 0: 0xFFFF
8606	 FD	AND		 	 
- stack 1: 0x970
- stack 0: 0x2B
8607	 FE	PUSH1	01	 	 
- stack 2: 0x970
- stack 1: 0x2B
- stack 0: 0x1
8608	 100	SIGNEXTEND		 	 
- stack 1: 0x970
- stack 0: 0x2B
8609	 101	PUSH2	0380	 	 
- stack 2: 0x970
- stack 1: 0x2B
- stack 0: 0x380
8610	 104	MSTORE		 	  ;; # store to x28
- stack 0: 0x970
8611	 105	PUSH1	04	 	 
- stack 1: 0x970
- stack 0: 0x4
8612	 107	ADD		 	 
- stack 0: 0x974
8613	 108	DUP1		 	  ;; # executing pc
- stack 1: 0x974
- stack 0: 0x974
8614	 109	MLOAD		 	 
- stack 1: 0x974
- stack 0: 0x4BE000804FE0018002100010034F9B80053004200660000053E000100210001
8615	 10A	PUSH1	F0	 	 
- stack 2: 0x974
- stack 1: 0x4BE000804FE0018002100010034F9B80053004200660000053E000100210001
- stack 0: 0xF0
8616	 10C	SHR		 	 
- stack 1: 0x974
- stack 0: 0x4BE
8617	 10D	JUMP		 	 
- stack 0: 0x974
8618	 4BE	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x974
8619	 4BF	PUSH1	00	 	 
- stack 1: 0x974
- stack 0: 0x0
8620	 4C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x974
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8621	 4C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x974
- stack 0: 0x0
8622	 4C7	PUSH2	03A0	 	 
- stack 2: 0x974
- stack 1: 0x0
- stack 0: 0x3A0
8623	 4CA	MLOAD		 	  ;; # read from x29
- stack 2: 0x974
- stack 1: 0x0
- stack 0: 0x0
8624	 4CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x974
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8625	 4D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x974
- stack 1: 0x0
- stack 0: 0x0
8626	 4D1	SUB		 	 
- stack 1: 0x974
- stack 0: 0x0
8627	 4D2	PUSH2	04DA	 ;; _neq_fa1c0a7f318d8f49667880fb3f3744802acca635d77c3555bc6072311c4de730	 
- stack 2: 0x974
- stack 1: 0x0
- stack 0: 0x4DA
8628	 4D5	JUMPI		 	 
- stack 0: 0x974
8629	 4D6	PUSH2	04F4	 ;; _neq_after_fa1c0a7f318d8f49667880fb3f3744802acca635d77c3555bc6072311c4de730	 
- stack 1: 0x974
- stack 0: 0x4F4
8630	 4D9	JUMP		 	 
- stack 0: 0x974
8631	 4F4	JUMPDEST		 ;; _neq_after_fa1c0a7f318d8f49667880fb3f3744802acca635d77c3555bc6072311c4de730	 
- stack 0: 0x974
8632	 4F5	PUSH1	04	 	 
- stack 1: 0x974
- stack 0: 0x4
8633	 4F7	ADD		 	 
- stack 0: 0x978
8634	 4F8	DUP1		 	  ;; # executing pc
- stack 1: 0x978
- stack 0: 0x978
8635	 4F9	MLOAD		 	 
- stack 1: 0x978
- stack 0: 0x4FE0018002100010034F9B80053004200660000053E0001002100010034F9BC
8636	 4FA	PUSH1	F0	 	 
- stack 2: 0x978
- stack 1: 0x4FE0018002100010034F9B80053004200660000053E0001002100010034F9BC
- stack 0: 0xF0
8637	 4FC	SHR		 	 
- stack 1: 0x978
- stack 0: 0x4FE
8638	 4FD	JUMP		 	 
- stack 0: 0x978
8639	 4FE	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x978
8640	 4FF	PUSH1	00	 	 
- stack 1: 0x978
- stack 0: 0x0
8641	 501	PUSH4	FFFFFFFF	 	 
- stack 2: 0x978
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8642	 506	AND		 	  ;; # mask to 32 bits
- stack 1: 0x978
- stack 0: 0x0
8643	 507	PUSH2	0380	 	 
- stack 2: 0x978
- stack 1: 0x0
- stack 0: 0x380
8644	 50A	MLOAD		 	  ;; # read from x28
- stack 2: 0x978
- stack 1: 0x0
- stack 0: 0x2B
8645	 50B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x978
- stack 2: 0x0
- stack 1: 0x2B
- stack 0: 0xFFFFFFFF
8646	 510	AND		 	  ;; # mask to 32 bits
- stack 2: 0x978
- stack 1: 0x0
- stack 0: 0x2B
8647	 511	SUB		 	 
- stack 1: 0x978
- stack 0: 0x2B
8648	 512	PUSH2	051A	 ;; _neq_c1e89e4d0eda73c35cf5d9398d3bfbf5a3ef59fee44d67b817b53c25120d066e	 
- stack 2: 0x978
- stack 1: 0x2B
- stack 0: 0x51A
8649	 515	JUMPI		 	 
- stack 0: 0x978
8650	 51A	JUMPDEST		 ;; _neq_c1e89e4d0eda73c35cf5d9398d3bfbf5a3ef59fee44d67b817b53c25120d066e	 
- stack 0: 0x978
8651	 51B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x978
- stack 0: 0x978
8652	 51C	MLOAD		 	 
- stack 1: 0x978
- stack 0: 0x4FE0018002100010034F9B80053004200660000053E0001002100010034F9BC
8653	 51D	PUSH1	E0	 	 
- stack 2: 0x978
- stack 1: 0x4FE0018002100010034F9B80053004200660000053E0001002100010034F9BC
- stack 0: 0xE0
8654	 51F	SHR		 	 
- stack 1: 0x978
- stack 0: 0x4FE0018
8655	 520	PUSH2	FFFF	 	 
- stack 2: 0x978
- stack 1: 0x4FE0018
- stack 0: 0xFFFF
8656	 523	AND		 	 
- stack 1: 0x978
- stack 0: 0x18
8657	 524	PUSH1	01	 	 
- stack 2: 0x978
- stack 1: 0x18
- stack 0: 0x1
8658	 526	SIGNEXTEND		 	 
- stack 1: 0x978
- stack 0: 0x18
8659	 527	ADD		 	 
- stack 0: 0x990
8660	 528	PUSH4	FFFFFFFF	 	 
- stack 1: 0x990
- stack 0: 0xFFFFFFFF
8661	 52D	AND		 	  ;; # mask to 32 bits
- stack 0: 0x990
8662	 52E	DUP1		 	  ;; # executing pc
- stack 1: 0x990
- stack 0: 0x990
8663	 52F	MLOAD		 	 
- stack 1: 0x990
- stack 0: 0x2100010034F9BC005300420066000005490000006600000000000000000000
8664	 530	PUSH1	F0	 	 
- stack 2: 0x990
- stack 1: 0x2100010034F9BC005300420066000005490000006600000000000000000000
- stack 0: 0xF0
8665	 532	SHR		 	 
- stack 1: 0x990
- stack 0: 0x21
8666	 533	JUMP		 	 
- stack 0: 0x990
8667	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x990
8668	 22	PUSH4	00001000	 	 
- stack 1: 0x990
- stack 0: 0x1000
8669	 27	PUSH2	0160	 	 
- stack 2: 0x990
- stack 1: 0x1000
- stack 0: 0x160
8670	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x990
8671	 2B	PUSH1	04	 	 
- stack 1: 0x990
- stack 0: 0x4
8672	 2D	ADD		 	 
- stack 0: 0x994
8673	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x994
- stack 0: 0x994
8674	 2F	MLOAD		 	 
- stack 1: 0x994
- stack 0: 0x34F9BC0053004200660000054900000066000000000000000000006574796D
8675	 30	PUSH1	F0	 	 
- stack 2: 0x994
- stack 1: 0x34F9BC0053004200660000054900000066000000000000000000006574796D
- stack 0: 0xF0
8676	 32	SHR		 	 
- stack 1: 0x994
- stack 0: 0x34
8677	 33	JUMP		 	 
- stack 0: 0x994
8678	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1616(ignore imm)
- stack 0: 0x994
8679	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x994
- stack 0: 0x994
8680	 36	MLOAD		 	 
- stack 1: 0x994
- stack 0: 0x34F9BC0053004200660000054900000066000000000000000000006574796D
8681	 37	PUSH1	E0	 	 
- stack 2: 0x994
- stack 1: 0x34F9BC0053004200660000054900000066000000000000000000006574796D
- stack 0: 0xE0
8682	 39	SHR		 	 
- stack 1: 0x994
- stack 0: 0x34F9BC
8683	 3A	PUSH2	FFFF	 	 
- stack 2: 0x994
- stack 1: 0x34F9BC
- stack 0: 0xFFFF
8684	 3D	AND		 	 
- stack 1: 0x994
- stack 0: 0xF9BC
8685	 3E	PUSH1	01	 	 
- stack 2: 0x994
- stack 1: 0xF9BC
- stack 0: 0x1
8686	 40	SIGNEXTEND		 	 
- stack 1: 0x994
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9BC
8687	 41	PUSH2	0160	 	 
- stack 2: 0x994
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9BC
- stack 0: 0x160
8688	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x994
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9BC
- stack 0: 0x1000
8689	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x994
- stack 0: 0x9BC
8690	 46	PUSH2	0160	 	 
- stack 2: 0x994
- stack 1: 0x9BC
- stack 0: 0x160
8691	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x994
8692	 4A	PUSH1	04	 	 
- stack 1: 0x994
- stack 0: 0x4
8693	 4C	ADD		 	 
- stack 0: 0x998
8694	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x998
- stack 0: 0x998
8695	 4E	MLOAD		 	 
- stack 1: 0x998
- stack 0: 0x53004200660000054900000066000000000000000000006574796D00007473
8696	 4F	PUSH1	F0	 	 
- stack 2: 0x998
- stack 1: 0x53004200660000054900000066000000000000000000006574796D00007473
- stack 0: 0xF0
8697	 51	SHR		 	 
- stack 1: 0x998
- stack 0: 0x53
8698	 52	JUMP		 	 
- stack 0: 0x998
8699	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x998
8700	 54	PUSH4	00042000	 	 
- stack 1: 0x998
- stack 0: 0x42000
8701	 59	PUSH2	0140	 	 
- stack 2: 0x998
- stack 1: 0x42000
- stack 0: 0x140
8702	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x998
8703	 5D	PUSH1	04	 	 
- stack 1: 0x998
- stack 0: 0x4
8704	 5F	ADD		 	 
- stack 0: 0x99C
8705	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x99C
- stack 0: 0x99C
8706	 61	MLOAD		 	 
- stack 1: 0x99C
- stack 0: 0x660000054900000066000000000000000000006574796D0000747300525245
8707	 62	PUSH1	F0	 	 
- stack 2: 0x99C
- stack 1: 0x660000054900000066000000000000000000006574796D0000747300525245
- stack 0: 0xF0
8708	 64	SHR		 	 
- stack 1: 0x99C
- stack 0: 0x66
8709	 65	JUMP		 	 
- stack 0: 0x99C
8710	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x99C
8711	 67	PUSH2	0140	 	 
- stack 1: 0x99C
- stack 0: 0x140
8712	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x99C
- stack 0: 0x42000
8713	 6B	PUSH2	0075	 ;; _ecall_566db1eefd43abf29e02015902c1b5bbd2fa6d88fea7bf3d8e6a74e79a9af66f	 
- stack 2: 0x99C
- stack 1: 0x42000
- stack 0: 0x75
8714	 6E	JUMPI		 	 
- stack 0: 0x99C
8715	 75	JUMPDEST		 ;; _ecall_566db1eefd43abf29e02015902c1b5bbd2fa6d88fea7bf3d8e6a74e79a9af66f	 
- stack 0: 0x99C
8716	 76	PUSH1	04	 	 
- stack 1: 0x99C
- stack 0: 0x4
8717	 78	PUSH2	0160	 	 
- stack 2: 0x99C
- stack 1: 0x4
- stack 0: 0x160
8718	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x99C
- stack 1: 0x4
- stack 0: 0x9BC
8719	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x99C
8720	 7D	PUSH1	04	 	 
- stack 1: 0x99C
- stack 0: 0x4
8721	 7F	ADD		 	 
- stack 0: 0x9A0
8722	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x9A0
- stack 0: 0x9A0
8723	 81	MLOAD		 	 
- stack 1: 0x9A0
- stack 0: 0x54900000066000000000000000000006574796D000074730052524500004B4F
8724	 82	PUSH1	F0	 	 
- stack 2: 0x9A0
- stack 1: 0x54900000066000000000000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
8725	 84	SHR		 	 
- stack 1: 0x9A0
- stack 0: 0x549
8726	 85	JUMP		 	 
- stack 0: 0x9A0
8727	 549	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x9A0
8728	 54A	PUSH4	00000000	 	 
- stack 1: 0x9A0
- stack 0: 0x0
8729	 54F	PUSH2	0140	 	 
- stack 2: 0x9A0
- stack 1: 0x0
- stack 0: 0x140
8730	 552	MSTORE		 	  ;; # store to x10
- stack 0: 0x9A0
8731	 553	PUSH1	04	 	 
- stack 1: 0x9A0
- stack 0: 0x4
8732	 555	ADD		 	 
- stack 0: 0x9A4
8733	 556	DUP1		 	  ;; # executing pc
- stack 1: 0x9A4
- stack 0: 0x9A4
8734	 557	MLOAD		 	 
- stack 1: 0x9A4
- stack 0: 0x66000000000000000000006574796D000074730052524500004B4F00000000
8735	 558	PUSH1	F0	 	 
- stack 2: 0x9A4
- stack 1: 0x66000000000000000000006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
8736	 55A	SHR		 	 
- stack 1: 0x9A4
- stack 0: 0x66
8737	 55B	JUMP		 	 
- stack 0: 0x9A4
8738	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x9A4
8739	 67	PUSH2	0140	 	 
- stack 1: 0x9A4
- stack 0: 0x140
8740	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x9A4
- stack 0: 0x0
8741	 6B	PUSH2	0075	 ;; _ecall_566db1eefd43abf29e02015902c1b5bbd2fa6d88fea7bf3d8e6a74e79a9af66f	 
- stack 2: 0x9A4
- stack 1: 0x0
- stack 0: 0x75
8742	 6E	JUMPI		 	 
- stack 0: 0x9A4
8743	 6F	PUSH1	20	 	 
- stack 1: 0x9A4
- stack 0: 0x20
8744	 71	PUSH2	0160	 	 
- stack 2: 0x9A4
- stack 1: 0x20
- stack 0: 0x160
8745	 74	RETURN		 	 
Final bytecode length; 2845
Returned: 00000000000000000000000000000000000000000000000000000000000009bc
gasUsed : 30092
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424
** HOT: 428 - range: 428,42c,430,434,438,43c
** HOT: 440 - range: 440,444,448,44c,450,454
** HOT: 458 - range: 458,45c,460,464,468,46c
** HOT: 470 - range: 470,474,478,47c,480,484
** HOT: 488 - range: 488,48c,490,494,498,49c
** HOT: 4a0 - range: 4a0,4a4,4a8,4ac,4b0,4b4
** HOT: 4b8 - range: 4b8,4bc,4c0,4c4,4c8,4cc
** HOT: 4d0 - range: 4d0,4d4,4d8,4dc,4e0,4e4
** HOT: 4e8 - range: 4e8,4ec,4f0,4f4,4f8,4fc
** HOT: 500 - range: 500,504,508,50c,510,514,518,51c
** HOT: 520 - range: 520,524,528,52c,530,534,538,53c
** HOT: 540 - range: 540,544,548,54c,550,554,558,55c
** HOT: 560 - range: 560,564,568,56c,570,574,578
** HOT: 57c - range: 57c,580,584,588,58c,590,594
** HOT: 598 - range: 598,59c,5a0,5a4,5a8,5ac,5b0,5b4
** HOT: 5b8 - range: 5b8,5bc,5c0,5c4,5c8,5cc,5d0,5d4
** HOT: 5d8 - range: 5d8,5dc,5e0,5e4,5e8,5ec,5f0,5f4
** HOT: 5f8 - range: 5f8,5fc,600,604,608,60c,610
** HOT: 614 - range: 614,618,61c,620,624,628,62c
** HOT: 630 - range: 630,634,638,63c,640,644
** HOT: 648 - range: 648,64c,650,654,658,65c
** HOT: 660 - range: 660,664,668,66c,670
** HOT: 674 - range: 674,678,67c,680,684,688,68c,690
** HOT: 678 - range: 678,67c,680,684,688,68c,690
** HOT: 694 - range: 694,698,69c
** HOT: 6a0 - range: 6a0,6a4,6a8,6ac,6b0,6b4,6b8,6bc,6c0
** HOT: 6a4 - range: 6a4,6a8,6ac,6b0,6b4,6b8,6bc,6c0
** HOT: 6c4 - range: 6c4,6c8,6cc
** HOT: 6d0 - range: 6d0,6d4,6d8,6dc,6e0,6e4,6e8,6ec,6f0,6f4
** HOT: 6d4 - range: 6d4,6d8,6dc,6e0,6e4,6e8,6ec,6f0,6f4
** HOT: 6f8 - range: 6f8,6fc,700
** HOT: 704 - range: 704,708,70c,710,714,718,71c
** HOT: 708 - range: 708,70c,710,714,718,71c
** HOT: 720 - range: 720,724,728
** HOT: 72c - range: 72c,730,734,738,73c,740,744,748
** HOT: 730 - range: 730,734,738,73c,740,744,748
** HOT: 74c - range: 74c,750,754
** HOT: 758 - range: 758,75c,760,764,768,76c,770,774,778
** HOT: 75c - range: 75c,760,764,768,76c,770,774,778
** HOT: 77c - range: 77c,780,784
** HOT: 788 - range: 788,78c,790,794,798,79c,7a0,7a4
** HOT: 78c - range: 78c,790,794,798,79c,7a0,7a4
** HOT: 7a8 - range: 7a8,7ac,7b0
** HOT: 7b4 - range: 7b4,7b8,7bc,7c0,7c4,7c8,7cc,7d0,7d4
** HOT: 7b8 - range: 7b8,7bc,7c0,7c4,7c8,7cc,7d0,7d4
** HOT: 7d8 - range: 7d8,7dc,7e0
** HOT: 7e4 - range: 7e4,7e8,7ec,7f0,7f4,7f8,7fc,800,804
** HOT: 7e8 - range: 7e8,7ec,7f0,7f4,7f8,7fc,800,804
** HOT: 808 - range: 808,80c,810
** HOT: 814 - range: 814,818,81c,820,824,828,82c
** HOT: 818 - range: 818,81c,820,824,828,82c
** HOT: 830 - range: 830,834,838
** HOT: 83c - range: 83c,840,844,848,84c,850,854,858
** HOT: 840 - range: 840,844,848,84c,850,854,858
** HOT: 85c - range: 85c,860,864
** HOT: 868 - range: 868,86c,870,874,878,87c,880,884,888
** HOT: 86c - range: 86c,870,874,878,87c,880,884,888
** HOT: 88c - range: 88c,890,894
** HOT: 898 - range: 898,89c,8a0,8a4,8a8,8ac,8b0,8b4
** HOT: 89c - range: 89c,8a0,8a4,8a8,8ac,8b0,8b4
** HOT: 8b8 - range: 8b8,8bc,8c0
** HOT: 8c4 - range: 8c4,8c8,8cc,8d0,8d4,8d8,8dc,8e0,8e4
** HOT: 8c8 - range: 8c8,8cc,8d0,8d4,8d8,8dc,8e0,8e4
** HOT: 8e8 - range: 8e8,8ec,8f0
** HOT: 8f4 - range: 8f4,8f8,8fc,900,904,908,90c,910,914
** HOT: 8f8 - range: 8f8,8fc,900,904,908,90c,910,914
** HOT: 918 - range: 918,91c,920
** HOT: 924 - range: 924,928,92c,930,934
** HOT: 938 - range: 938,93c,940,944,948
** HOT: 94c - range: 94c,950,954,958
** HOT: 95c - range: 95c,960,964,968,96c,970,974
