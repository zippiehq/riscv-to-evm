Running in EVM:
0	 0	PUSH4	02D0	 	 
- stack 0: 0x2D0
1	 5	PUSH2	0456	 ;; _rambegin	 
- stack 1: 0x2D0
- stack 0: 0x456
2	 8	PUSH1	01	 	 
- stack 2: 0x2D0
- stack 1: 0x456
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x2D0
- stack 0: 0x457
4	 B	PUSH2	0400	 	 
- stack 2: 0x2D0
- stack 1: 0x457
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x210000003406C000530042006600000086000100A0000000C2000100DC0002
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x210000003406C000530042006600000086000100A0000000C2000100DC0002
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406C000530042006600000086000100A0000000C2000100DC000200F60274
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x3406C000530042006600000086000100A0000000C2000100DC000200F60274
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1728(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406C000530042006600000086000100A0000000C2000100DC000200F60274
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x3406C000530042006600000086000100A0000000C2000100DC000200F60274
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x3406C0
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x3406C0
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x6C0
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x6C0
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x6C0
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x6C0
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x6C0
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x6C0
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x6C0
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000100A0000000C2000100DC000200F6027400860001
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000100A0000000C2000100DC000200F6027400860001
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000100A0000000C2000100DC000200F602740086000100A00001
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000100A0000000C2000100DC000200F602740086000100A00001
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_18dc04e6c02d8f805e08d026b55c5cb6a021c802bbddd16eaf87f139b7e593bf	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_18dc04e6c02d8f805e08d026b55c5cb6a021c802bbddd16eaf87f139b7e593bf	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x6C0
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000100A0000000C2000100DC000200F602740086000100A0000100C20002
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000100A0000000C2000100DC000200F602740086000100A0000100C20002
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000100A0000000C2000100DC000200F602740086000100A0000100C20002
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000100A0000000C2000100DC000200F602740086000100A0000100C20002
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860001
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860001
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x1
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x1
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x1
84	 93	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x1
- stack 0: 0x20
85	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000C2000100DC000200F602740086000100A0000100C2000200DC0003
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000C2000100DC000200F602740086000100A0000100C2000200DC0003
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x414
94	 A1	PUSH2	0020	 	 
- stack 1: 0x414
- stack 0: 0x20
95	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x414
- stack 0: 0x1
96	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x414
- stack 1: 0x1
- stack 0: 0x414
97	 A6	MLOAD		 	 
- stack 2: 0x414
- stack 1: 0x1
- stack 0: 0xA0000000C2000100DC000200F602740086000100A0000100C2000200DC0003
98	 A7	PUSH1	E0	 	 
- stack 3: 0x414
- stack 2: 0x1
- stack 1: 0xA0000000C2000100DC000200F602740086000100A0000100C2000200DC0003
- stack 0: 0xE0
99	 A9	SHR		 	 
- stack 2: 0x414
- stack 1: 0x1
- stack 0: 0xA00000
100	 AA	PUSH2	FFFF	 	 
- stack 3: 0x414
- stack 2: 0x1
- stack 1: 0xA00000
- stack 0: 0xFFFF
101	 AD	AND		 	 
- stack 2: 0x414
- stack 1: 0x1
- stack 0: 0x0
102	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x414
- stack 0: 0x1
103	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x414
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
104	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x414
- stack 0: 0x1
105	 B5	PUSH2	0060	 	 
- stack 2: 0x414
- stack 1: 0x1
- stack 0: 0x60
106	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x414
107	 B9	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
108	 BB	ADD		 	 
- stack 0: 0x418
109	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
110	 BD	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xC2000100DC000200F602740086000100A0000100C2000200DC000300F60260
111	 BE	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xC2000100DC000200F602740086000100A0000100C2000200DC000300F60260
- stack 0: 0xF0
112	 C0	SHR		 	 
- stack 1: 0x418
- stack 0: 0xC2
113	 C1	JUMP		 	 
- stack 0: 0x418
114	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x418
115	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
116	 C4	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xC2000100DC000200F602740086000100A0000100C2000200DC000300F60260
117	 C5	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xC2000100DC000200F602740086000100A0000100C2000200DC000300F60260
- stack 0: 0xE0
118	 C7	SHR		 	 
- stack 1: 0x418
- stack 0: 0xC20001
119	 C8	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xC20001
- stack 0: 0xFFFF
120	 CB	AND		 	 
- stack 1: 0x418
- stack 0: 0x1
121	 CC	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0x1
- stack 0: 0x1
122	 CE	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0x1
123	 CF	PUSH2	03A0	 	 
- stack 2: 0x418
- stack 1: 0x1
- stack 0: 0x3A0
124	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x418
125	 D3	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
126	 D5	ADD		 	 
- stack 0: 0x41C
127	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
128	 D7	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xDC000200F602740086000100A0000100C2000200DC000300F6026000860001
129	 D8	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xDC000200F602740086000100A0000100C2000200DC000300F6026000860001
- stack 0: 0xF0
130	 DA	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xDC
131	 DB	JUMP		 	 
- stack 0: 0x41C
132	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x41C
133	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
134	 DE	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xDC000200F602740086000100A0000100C2000200DC000300F6026000860001
135	 DF	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xDC000200F602740086000100A0000100C2000200DC000300F6026000860001
- stack 0: 0xE0
136	 E1	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xDC0002
137	 E2	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xDC0002
- stack 0: 0xFFFF
138	 E5	AND		 	 
- stack 1: 0x41C
- stack 0: 0x2
139	 E6	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0x2
- stack 0: 0x1
140	 E8	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x2
141	 E9	PUSH2	0380	 	 
- stack 2: 0x41C
- stack 1: 0x2
- stack 0: 0x380
142	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x41C
143	 ED	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
144	 EF	ADD		 	 
- stack 0: 0x420
145	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
146	 F1	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF602740086000100A0000100C2000200DC000300F602600086000100A00007
147	 F2	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xF602740086000100A0000100C2000200DC000300F602600086000100A00007
- stack 0: 0xF0
148	 F4	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF6
149	 F5	JUMP		 	 
- stack 0: 0x420
150	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x420
151	 F7	PUSH2	0060	 	 
- stack 1: 0x420
- stack 0: 0x60
152	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x420
- stack 0: 0x1
153	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x420
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
154	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x420
- stack 0: 0x1
155	 101	PUSH2	03A0	 	 
- stack 2: 0x420
- stack 1: 0x1
- stack 0: 0x3A0
156	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x420
- stack 1: 0x1
- stack 0: 0x1
157	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x420
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
158	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x420
- stack 1: 0x1
- stack 0: 0x1
159	 10B	SUB		 	 
- stack 1: 0x420
- stack 0: 0x0
160	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x114
161	 10F	JUMPI		 	 
- stack 0: 0x420
162	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x420
- stack 0: 0x12E
163	 113	JUMP		 	 
- stack 0: 0x420
164	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x420
165	 12F	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
166	 131	ADD		 	 
- stack 0: 0x424
167	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
168	 133	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x86000100A0000100C2000200DC000300F602600086000100A0000700C20080
169	 134	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x86000100A0000100C2000200DC000300F602600086000100A0000700C20080
- stack 0: 0xF0
170	 136	SHR		 	 
- stack 1: 0x424
- stack 0: 0x86
171	 137	JUMP		 	 
- stack 0: 0x424
172	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x424
173	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
174	 88	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x86000100A0000100C2000200DC000300F602600086000100A0000700C20080
175	 89	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x86000100A0000100C2000200DC000300F602600086000100A0000700C20080
- stack 0: 0xE0
176	 8B	SHR		 	 
- stack 1: 0x424
- stack 0: 0x860001
177	 8C	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x860001
- stack 0: 0xFFFF
178	 8F	AND		 	 
- stack 1: 0x424
- stack 0: 0x1
179	 90	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0x1
- stack 0: 0x1
180	 92	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0x1
181	 93	PUSH2	0020	 	 
- stack 2: 0x424
- stack 1: 0x1
- stack 0: 0x20
182	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x424
183	 97	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
184	 99	ADD		 	 
- stack 0: 0x428
185	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
186	 9B	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xA0000100C2000200DC000300F602600086000100A0000700C2008000DC0004
187	 9C	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0xA0000100C2000200DC000300F602600086000100A0000700C2008000DC0004
- stack 0: 0xF0
188	 9E	SHR		 	 
- stack 1: 0x428
- stack 0: 0xA0
189	 9F	JUMP		 	 
- stack 0: 0x428
190	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x428
191	 A1	PUSH2	0020	 	 
- stack 1: 0x428
- stack 0: 0x20
192	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x428
- stack 0: 0x1
193	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x428
194	 A6	MLOAD		 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0xA0000100C2000200DC000300F602600086000100A0000700C2008000DC0004
195	 A7	PUSH1	E0	 	 
- stack 3: 0x428
- stack 2: 0x1
- stack 1: 0xA0000100C2000200DC000300F602600086000100A0000700C2008000DC0004
- stack 0: 0xE0
196	 A9	SHR		 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0xA00001
197	 AA	PUSH2	FFFF	 	 
- stack 3: 0x428
- stack 2: 0x1
- stack 1: 0xA00001
- stack 0: 0xFFFF
198	 AD	AND		 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x1
199	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x428
- stack 0: 0x2
200	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x428
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
201	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x428
- stack 0: 0x2
202	 B5	PUSH2	0060	 	 
- stack 2: 0x428
- stack 1: 0x2
- stack 0: 0x60
203	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x428
204	 B9	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
205	 BB	ADD		 	 
- stack 0: 0x42C
206	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
207	 BD	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xC2000200DC000300F602600086000100A0000700C2008000DC000400F6024C
208	 BE	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0xC2000200DC000300F602600086000100A0000700C2008000DC000400F6024C
- stack 0: 0xF0
209	 C0	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xC2
210	 C1	JUMP		 	 
- stack 0: 0x42C
211	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x42C
212	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
213	 C4	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xC2000200DC000300F602600086000100A0000700C2008000DC000400F6024C
214	 C5	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0xC2000200DC000300F602600086000100A0000700C2008000DC000400F6024C
- stack 0: 0xE0
215	 C7	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xC20002
216	 C8	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0xC20002
- stack 0: 0xFFFF
217	 CB	AND		 	 
- stack 1: 0x42C
- stack 0: 0x2
218	 CC	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x2
- stack 0: 0x1
219	 CE	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x2
220	 CF	PUSH2	03A0	 	 
- stack 2: 0x42C
- stack 1: 0x2
- stack 0: 0x3A0
221	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x42C
222	 D3	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
223	 D5	ADD		 	 
- stack 0: 0x430
224	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
225	 D7	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xDC000300F602600086000100A0000700C2008000DC000400F6024C00860001
226	 D8	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xDC000300F602600086000100A0000700C2008000DC000400F6024C00860001
- stack 0: 0xF0
227	 DA	SHR		 	 
- stack 1: 0x430
- stack 0: 0xDC
228	 DB	JUMP		 	 
- stack 0: 0x430
229	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x430
230	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
231	 DE	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xDC000300F602600086000100A0000700C2008000DC000400F6024C00860001
232	 DF	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0xDC000300F602600086000100A0000700C2008000DC000400F6024C00860001
- stack 0: 0xE0
233	 E1	SHR		 	 
- stack 1: 0x430
- stack 0: 0xDC0003
234	 E2	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0xDC0003
- stack 0: 0xFFFF
235	 E5	AND		 	 
- stack 1: 0x430
- stack 0: 0x3
236	 E6	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x1
237	 E8	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x3
238	 E9	PUSH2	0380	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x380
239	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x430
240	 ED	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
241	 EF	ADD		 	 
- stack 0: 0x434
242	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
243	 F1	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xF602600086000100A0000700C2008000DC000400F6024C0086000100A0000E
244	 F2	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xF602600086000100A0000700C2008000DC000400F6024C0086000100A0000E
- stack 0: 0xF0
245	 F4	SHR		 	 
- stack 1: 0x434
- stack 0: 0xF6
246	 F5	JUMP		 	 
- stack 0: 0x434
247	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x434
248	 F7	PUSH2	0060	 	 
- stack 1: 0x434
- stack 0: 0x60
249	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x434
- stack 0: 0x2
250	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x434
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
251	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x434
- stack 0: 0x2
252	 101	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0x2
- stack 0: 0x3A0
253	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x434
- stack 1: 0x2
- stack 0: 0x2
254	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x434
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
255	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x434
- stack 1: 0x2
- stack 0: 0x2
256	 10B	SUB		 	 
- stack 1: 0x434
- stack 0: 0x0
257	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x114
258	 10F	JUMPI		 	 
- stack 0: 0x434
259	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x434
- stack 0: 0x12E
260	 113	JUMP		 	 
- stack 0: 0x434
261	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x434
262	 12F	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
263	 131	ADD		 	 
- stack 0: 0x438
264	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
265	 133	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x86000100A0000700C2008000DC000400F6024C0086000100A0000E01380004
266	 134	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x86000100A0000700C2008000DC000400F6024C0086000100A0000E01380004
- stack 0: 0xF0
267	 136	SHR		 	 
- stack 1: 0x438
- stack 0: 0x86
268	 137	JUMP		 	 
- stack 0: 0x438
269	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x438
270	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
271	 88	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x86000100A0000700C2008000DC000400F6024C0086000100A0000E01380004
272	 89	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0x86000100A0000700C2008000DC000400F6024C0086000100A0000E01380004
- stack 0: 0xE0
273	 8B	SHR		 	 
- stack 1: 0x438
- stack 0: 0x860001
274	 8C	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0x860001
- stack 0: 0xFFFF
275	 8F	AND		 	 
- stack 1: 0x438
- stack 0: 0x1
276	 90	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x1
- stack 0: 0x1
277	 92	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x1
278	 93	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0x1
- stack 0: 0x20
279	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x438
280	 97	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
281	 99	ADD		 	 
- stack 0: 0x43C
282	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
283	 9B	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xA0000700C2008000DC000400F6024C0086000100A0000E0138000400DC0005
284	 9C	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xA0000700C2008000DC000400F6024C0086000100A0000E0138000400DC0005
- stack 0: 0xF0
285	 9E	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xA0
286	 9F	JUMP		 	 
- stack 0: 0x43C
287	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x43C
288	 A1	PUSH2	0020	 	 
- stack 1: 0x43C
- stack 0: 0x20
289	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x43C
- stack 0: 0x1
290	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x43C
291	 A6	MLOAD		 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0xA0000700C2008000DC000400F6024C0086000100A0000E0138000400DC0005
292	 A7	PUSH1	E0	 	 
- stack 3: 0x43C
- stack 2: 0x1
- stack 1: 0xA0000700C2008000DC000400F6024C0086000100A0000E0138000400DC0005
- stack 0: 0xE0
293	 A9	SHR		 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0xA00007
294	 AA	PUSH2	FFFF	 	 
- stack 3: 0x43C
- stack 2: 0x1
- stack 1: 0xA00007
- stack 0: 0xFFFF
295	 AD	AND		 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x7
296	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x43C
- stack 0: 0x80
297	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
298	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0x80
299	 B5	PUSH2	0060	 	 
- stack 2: 0x43C
- stack 1: 0x80
- stack 0: 0x60
300	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x43C
301	 B9	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
302	 BB	ADD		 	 
- stack 0: 0x440
303	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
304	 BD	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xC2008000DC000400F6024C0086000100A0000E0138000400DC000500F60238
305	 BE	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0xC2008000DC000400F6024C0086000100A0000E0138000400DC000500F60238
- stack 0: 0xF0
306	 C0	SHR		 	 
- stack 1: 0x440
- stack 0: 0xC2
307	 C1	JUMP		 	 
- stack 0: 0x440
308	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x440
309	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
310	 C4	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xC2008000DC000400F6024C0086000100A0000E0138000400DC000500F60238
311	 C5	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0xC2008000DC000400F6024C0086000100A0000E0138000400DC000500F60238
- stack 0: 0xE0
312	 C7	SHR		 	 
- stack 1: 0x440
- stack 0: 0xC20080
313	 C8	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0xC20080
- stack 0: 0xFFFF
314	 CB	AND		 	 
- stack 1: 0x440
- stack 0: 0x80
315	 CC	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0x80
- stack 0: 0x1
316	 CE	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0x80
317	 CF	PUSH2	03A0	 	 
- stack 2: 0x440
- stack 1: 0x80
- stack 0: 0x3A0
318	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x440
319	 D3	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
320	 D5	ADD		 	 
- stack 0: 0x444
321	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
322	 D7	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xDC000400F6024C0086000100A0000E0138000400DC000500F6023800860001
323	 D8	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xDC000400F6024C0086000100A0000E0138000400DC000500F6023800860001
- stack 0: 0xF0
324	 DA	SHR		 	 
- stack 1: 0x444
- stack 0: 0xDC
325	 DB	JUMP		 	 
- stack 0: 0x444
326	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x444
327	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
328	 DE	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xDC000400F6024C0086000100A0000E0138000400DC000500F6023800860001
329	 DF	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0xDC000400F6024C0086000100A0000E0138000400DC000500F6023800860001
- stack 0: 0xE0
330	 E1	SHR		 	 
- stack 1: 0x444
- stack 0: 0xDC0004
331	 E2	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0xDC0004
- stack 0: 0xFFFF
332	 E5	AND		 	 
- stack 1: 0x444
- stack 0: 0x4
333	 E6	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x4
- stack 0: 0x1
334	 E8	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x4
335	 E9	PUSH2	0380	 	 
- stack 2: 0x444
- stack 1: 0x4
- stack 0: 0x380
336	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x444
337	 ED	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
338	 EF	ADD		 	 
- stack 0: 0x448
339	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
340	 F1	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xF6024C0086000100A0000E0138000400DC000500F602380086000100A0001F
341	 F2	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xF6024C0086000100A0000E0138000400DC000500F602380086000100A0001F
- stack 0: 0xF0
342	 F4	SHR		 	 
- stack 1: 0x448
- stack 0: 0xF6
343	 F5	JUMP		 	 
- stack 0: 0x448
344	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x448
345	 F7	PUSH2	0060	 	 
- stack 1: 0x448
- stack 0: 0x60
346	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x448
- stack 0: 0x80
347	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
348	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0x80
349	 101	PUSH2	03A0	 	 
- stack 2: 0x448
- stack 1: 0x80
- stack 0: 0x3A0
350	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x448
- stack 1: 0x80
- stack 0: 0x80
351	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x448
- stack 2: 0x80
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
352	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x448
- stack 1: 0x80
- stack 0: 0x80
353	 10B	SUB		 	 
- stack 1: 0x448
- stack 0: 0x0
354	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x448
- stack 1: 0x0
- stack 0: 0x114
355	 10F	JUMPI		 	 
- stack 0: 0x448
356	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x448
- stack 0: 0x12E
357	 113	JUMP		 	 
- stack 0: 0x448
358	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x448
359	 12F	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
360	 131	ADD		 	 
- stack 0: 0x44C
361	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
362	 133	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x86000100A0000E0138000400DC000500F602380086000100A0001F014B0000
363	 134	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x86000100A0000E0138000400DC000500F602380086000100A0001F014B0000
- stack 0: 0xF0
364	 136	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x86
365	 137	JUMP		 	 
- stack 0: 0x44C
366	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x44C
367	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
368	 88	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x86000100A0000E0138000400DC000500F602380086000100A0001F014B0000
369	 89	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0x86000100A0000E0138000400DC000500F602380086000100A0001F014B0000
- stack 0: 0xE0
370	 8B	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x860001
371	 8C	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0x860001
- stack 0: 0xFFFF
372	 8F	AND		 	 
- stack 1: 0x44C
- stack 0: 0x1
373	 90	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0x1
- stack 0: 0x1
374	 92	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0x1
375	 93	PUSH2	0020	 	 
- stack 2: 0x44C
- stack 1: 0x1
- stack 0: 0x20
376	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x44C
377	 97	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
378	 99	ADD		 	 
- stack 0: 0x450
379	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
380	 9B	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xA0000E0138000400DC000500F602380086000100A0001F014B000000DC0006
381	 9C	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0xA0000E0138000400DC000500F602380086000100A0001F014B000000DC0006
- stack 0: 0xF0
382	 9E	SHR		 	 
- stack 1: 0x450
- stack 0: 0xA0
383	 9F	JUMP		 	 
- stack 0: 0x450
384	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x450
385	 A1	PUSH2	0020	 	 
- stack 1: 0x450
- stack 0: 0x20
386	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x450
- stack 0: 0x1
387	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x450
- stack 1: 0x1
- stack 0: 0x450
388	 A6	MLOAD		 	 
- stack 2: 0x450
- stack 1: 0x1
- stack 0: 0xA0000E0138000400DC000500F602380086000100A0001F014B000000DC0006
389	 A7	PUSH1	E0	 	 
- stack 3: 0x450
- stack 2: 0x1
- stack 1: 0xA0000E0138000400DC000500F602380086000100A0001F014B000000DC0006
- stack 0: 0xE0
390	 A9	SHR		 	 
- stack 2: 0x450
- stack 1: 0x1
- stack 0: 0xA0000E
391	 AA	PUSH2	FFFF	 	 
- stack 3: 0x450
- stack 2: 0x1
- stack 1: 0xA0000E
- stack 0: 0xFFFF
392	 AD	AND		 	 
- stack 2: 0x450
- stack 1: 0x1
- stack 0: 0xE
393	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x450
- stack 0: 0x4000
394	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x450
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
395	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x450
- stack 0: 0x4000
396	 B5	PUSH2	0060	 	 
- stack 2: 0x450
- stack 1: 0x4000
- stack 0: 0x60
397	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x450
398	 B9	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
399	 BB	ADD		 	 
- stack 0: 0x454
400	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
401	 BD	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x138000400DC000500F602380086000100A0001F014B000000DC000600F60224
402	 BE	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x138000400DC000500F602380086000100A0001F014B000000DC000600F60224
- stack 0: 0xF0
403	 C0	SHR		 	 
- stack 1: 0x454
- stack 0: 0x138
404	 C1	JUMP		 	 
- stack 0: 0x454
405	 138	JUMPDEST		 ;; __riscvimpl_LUI_4eb7	  ;; # instr: lui t4,0x4(ignore imm)
- stack 0: 0x454
406	 139	PUSH4	00004000	 	 
- stack 1: 0x454
- stack 0: 0x4000
407	 13E	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0x4000
- stack 0: 0x3A0
408	 141	MSTORE		 	  ;; # store to x29
- stack 0: 0x454
409	 142	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
410	 144	ADD		 	 
- stack 0: 0x458
411	 145	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
412	 146	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xDC000500F602380086000100A0001F014B000000DC000600F602240086FFFF
413	 147	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0xDC000500F602380086000100A0001F014B000000DC000600F602240086FFFF
- stack 0: 0xF0
414	 149	SHR		 	 
- stack 1: 0x458
- stack 0: 0xDC
415	 14A	JUMP		 	 
- stack 0: 0x458
416	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x458
417	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
418	 DE	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xDC000500F602380086000100A0001F014B000000DC000600F602240086FFFF
419	 DF	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0xDC000500F602380086000100A0001F014B000000DC000600F602240086FFFF
- stack 0: 0xE0
420	 E1	SHR		 	 
- stack 1: 0x458
- stack 0: 0xDC0005
421	 E2	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0xDC0005
- stack 0: 0xFFFF
422	 E5	AND		 	 
- stack 1: 0x458
- stack 0: 0x5
423	 E6	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0x5
- stack 0: 0x1
424	 E8	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0x5
425	 E9	PUSH2	0380	 	 
- stack 2: 0x458
- stack 1: 0x5
- stack 0: 0x380
426	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x458
427	 ED	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
428	 EF	ADD		 	 
- stack 0: 0x45C
429	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
430	 F1	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xF602380086000100A0001F014B000000DC000600F602240086FFFF00A00000
431	 F2	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0xF602380086000100A0001F014B000000DC000600F602240086FFFF00A00000
- stack 0: 0xF0
432	 F4	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xF6
433	 F5	JUMP		 	 
- stack 0: 0x45C
434	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x45C
435	 F7	PUSH2	0060	 	 
- stack 1: 0x45C
- stack 0: 0x60
436	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x45C
- stack 0: 0x4000
437	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x45C
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
438	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x45C
- stack 0: 0x4000
439	 101	PUSH2	03A0	 	 
- stack 2: 0x45C
- stack 1: 0x4000
- stack 0: 0x3A0
440	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x45C
- stack 1: 0x4000
- stack 0: 0x4000
441	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x45C
- stack 2: 0x4000
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
442	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x45C
- stack 1: 0x4000
- stack 0: 0x4000
443	 10B	SUB		 	 
- stack 1: 0x45C
- stack 0: 0x0
444	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x45C
- stack 1: 0x0
- stack 0: 0x114
445	 10F	JUMPI		 	 
- stack 0: 0x45C
446	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x45C
- stack 0: 0x12E
447	 113	JUMP		 	 
- stack 0: 0x45C
448	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x45C
449	 12F	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
450	 131	ADD		 	 
- stack 0: 0x460
451	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
452	 133	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x86000100A0001F014B000000DC000600F602240086FFFF00A0000000C2FFFF
453	 134	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x86000100A0001F014B000000DC000600F602240086FFFF00A0000000C2FFFF
- stack 0: 0xF0
454	 136	SHR		 	 
- stack 1: 0x460
- stack 0: 0x86
455	 137	JUMP		 	 
- stack 0: 0x460
456	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x460
457	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x460
- stack 0: 0x460
458	 88	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x86000100A0001F014B000000DC000600F602240086FFFF00A0000000C2FFFF
459	 89	PUSH1	E0	 	 
- stack 2: 0x460
- stack 1: 0x86000100A0001F014B000000DC000600F602240086FFFF00A0000000C2FFFF
- stack 0: 0xE0
460	 8B	SHR		 	 
- stack 1: 0x460
- stack 0: 0x860001
461	 8C	PUSH2	FFFF	 	 
- stack 2: 0x460
- stack 1: 0x860001
- stack 0: 0xFFFF
462	 8F	AND		 	 
- stack 1: 0x460
- stack 0: 0x1
463	 90	PUSH1	01	 	 
- stack 2: 0x460
- stack 1: 0x1
- stack 0: 0x1
464	 92	SIGNEXTEND		 	 
- stack 1: 0x460
- stack 0: 0x1
465	 93	PUSH2	0020	 	 
- stack 2: 0x460
- stack 1: 0x1
- stack 0: 0x20
466	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x460
467	 97	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
468	 99	ADD		 	 
- stack 0: 0x464
469	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
470	 9B	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xA0001F014B000000DC000600F602240086FFFF00A0000000C2FFFF00DC0007
471	 9C	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xA0001F014B000000DC000600F602240086FFFF00A0000000C2FFFF00DC0007
- stack 0: 0xF0
472	 9E	SHR		 	 
- stack 1: 0x464
- stack 0: 0xA0
473	 9F	JUMP		 	 
- stack 0: 0x464
474	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x464
475	 A1	PUSH2	0020	 	 
- stack 1: 0x464
- stack 0: 0x20
476	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x464
- stack 0: 0x1
477	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x464
- stack 1: 0x1
- stack 0: 0x464
478	 A6	MLOAD		 	 
- stack 2: 0x464
- stack 1: 0x1
- stack 0: 0xA0001F014B000000DC000600F602240086FFFF00A0000000C2FFFF00DC0007
479	 A7	PUSH1	E0	 	 
- stack 3: 0x464
- stack 2: 0x1
- stack 1: 0xA0001F014B000000DC000600F602240086FFFF00A0000000C2FFFF00DC0007
- stack 0: 0xE0
480	 A9	SHR		 	 
- stack 2: 0x464
- stack 1: 0x1
- stack 0: 0xA0001F
481	 AA	PUSH2	FFFF	 	 
- stack 3: 0x464
- stack 2: 0x1
- stack 1: 0xA0001F
- stack 0: 0xFFFF
482	 AD	AND		 	 
- stack 2: 0x464
- stack 1: 0x1
- stack 0: 0x1F
483	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x464
- stack 0: 0x80000000
484	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x464
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
485	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x464
- stack 0: 0x80000000
486	 B5	PUSH2	0060	 	 
- stack 2: 0x464
- stack 1: 0x80000000
- stack 0: 0x60
487	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x464
488	 B9	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
489	 BB	ADD		 	 
- stack 0: 0x468
490	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
491	 BD	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x14B000000DC000600F602240086FFFF00A0000000C2FFFF00DC000700F60210
492	 BE	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x14B000000DC000600F602240086FFFF00A0000000C2FFFF00DC000700F60210
- stack 0: 0xF0
493	 C0	SHR		 	 
- stack 1: 0x468
- stack 0: 0x14B
494	 C1	JUMP		 	 
- stack 0: 0x468
495	 14B	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x468
496	 14C	PUSH4	80000000	 	 
- stack 1: 0x468
- stack 0: 0x80000000
497	 151	PUSH2	03A0	 	 
- stack 2: 0x468
- stack 1: 0x80000000
- stack 0: 0x3A0
498	 154	MSTORE		 	  ;; # store to x29
- stack 0: 0x468
499	 155	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
500	 157	ADD		 	 
- stack 0: 0x46C
501	 158	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
502	 159	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xDC000600F602240086FFFF00A0000000C2FFFF00DC000700F602100086FFFF
503	 15A	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0xDC000600F602240086FFFF00A0000000C2FFFF00DC000700F602100086FFFF
- stack 0: 0xF0
504	 15C	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xDC
505	 15D	JUMP		 	 
- stack 0: 0x46C
506	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x46C
507	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x46C
- stack 0: 0x46C
508	 DE	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xDC000600F602240086FFFF00A0000000C2FFFF00DC000700F602100086FFFF
509	 DF	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0xDC000600F602240086FFFF00A0000000C2FFFF00DC000700F602100086FFFF
- stack 0: 0xE0
510	 E1	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xDC0006
511	 E2	PUSH2	FFFF	 	 
- stack 2: 0x46C
- stack 1: 0xDC0006
- stack 0: 0xFFFF
512	 E5	AND		 	 
- stack 1: 0x46C
- stack 0: 0x6
513	 E6	PUSH1	01	 	 
- stack 2: 0x46C
- stack 1: 0x6
- stack 0: 0x1
514	 E8	SIGNEXTEND		 	 
- stack 1: 0x46C
- stack 0: 0x6
515	 E9	PUSH2	0380	 	 
- stack 2: 0x46C
- stack 1: 0x6
- stack 0: 0x380
516	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x46C
517	 ED	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
518	 EF	ADD		 	 
- stack 0: 0x470
519	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
520	 F1	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0xF602240086FFFF00A0000000C2FFFF00DC000700F602100086FFFF00A00001
521	 F2	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0xF602240086FFFF00A0000000C2FFFF00DC000700F602100086FFFF00A00001
- stack 0: 0xF0
522	 F4	SHR		 	 
- stack 1: 0x470
- stack 0: 0xF6
523	 F5	JUMP		 	 
- stack 0: 0x470
524	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x470
525	 F7	PUSH2	0060	 	 
- stack 1: 0x470
- stack 0: 0x60
526	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x470
- stack 0: 0x80000000
527	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x470
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
528	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x470
- stack 0: 0x80000000
529	 101	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0x80000000
- stack 0: 0x3A0
530	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x470
- stack 1: 0x80000000
- stack 0: 0x80000000
531	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x470
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
532	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x470
- stack 1: 0x80000000
- stack 0: 0x80000000
533	 10B	SUB		 	 
- stack 1: 0x470
- stack 0: 0x0
534	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x114
535	 10F	JUMPI		 	 
- stack 0: 0x470
536	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x470
- stack 0: 0x12E
537	 113	JUMP		 	 
- stack 0: 0x470
538	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x470
539	 12F	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
540	 131	ADD		 	 
- stack 0: 0x474
541	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
542	 133	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x86FFFF00A0000000C2FFFF00DC000700F602100086FFFF00A0000100C2FFFE
543	 134	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x86FFFF00A0000000C2FFFF00DC000700F602100086FFFF00A0000100C2FFFE
- stack 0: 0xF0
544	 136	SHR		 	 
- stack 1: 0x474
- stack 0: 0x86
545	 137	JUMP		 	 
- stack 0: 0x474
546	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x474
547	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
548	 88	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x86FFFF00A0000000C2FFFF00DC000700F602100086FFFF00A0000100C2FFFE
549	 89	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0x86FFFF00A0000000C2FFFF00DC000700F602100086FFFF00A0000100C2FFFE
- stack 0: 0xE0
550	 8B	SHR		 	 
- stack 1: 0x474
- stack 0: 0x86FFFF
551	 8C	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
552	 8F	AND		 	 
- stack 1: 0x474
- stack 0: 0xFFFF
553	 90	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0xFFFF
- stack 0: 0x1
554	 92	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
555	 93	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
556	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x474
557	 97	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
558	 99	ADD		 	 
- stack 0: 0x478
559	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
560	 9B	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xA0000000C2FFFF00DC000700F602100086FFFF00A0000100C2FFFE00DC0008
561	 9C	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0xA0000000C2FFFF00DC000700F602100086FFFF00A0000100C2FFFE00DC0008
- stack 0: 0xF0
562	 9E	SHR		 	 
- stack 1: 0x478
- stack 0: 0xA0
563	 9F	JUMP		 	 
- stack 0: 0x478
564	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x478
565	 A1	PUSH2	0020	 	 
- stack 1: 0x478
- stack 0: 0x20
566	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x478
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
567	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x478
568	 A6	MLOAD		 	 
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xA0000000C2FFFF00DC000700F602100086FFFF00A0000100C2FFFE00DC0008
569	 A7	PUSH1	E0	 	 
- stack 3: 0x478
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xA0000000C2FFFF00DC000700F602100086FFFF00A0000100C2FFFE00DC0008
- stack 0: 0xE0
570	 A9	SHR		 	 
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xA00000
571	 AA	PUSH2	FFFF	 	 
- stack 3: 0x478
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xA00000
- stack 0: 0xFFFF
572	 AD	AND		 	 
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
573	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x478
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
574	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
575	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x478
- stack 0: 0xFFFFFFFF
576	 B5	PUSH2	0060	 	 
- stack 2: 0x478
- stack 1: 0xFFFFFFFF
- stack 0: 0x60
577	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x478
578	 B9	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
579	 BB	ADD		 	 
- stack 0: 0x47C
580	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
581	 BD	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xC2FFFF00DC000700F602100086FFFF00A0000100C2FFFE00DC000800F601FC
582	 BE	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0xC2FFFF00DC000700F602100086FFFF00A0000100C2FFFE00DC000800F601FC
- stack 0: 0xF0
583	 C0	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xC2
584	 C1	JUMP		 	 
- stack 0: 0x47C
585	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x47C
586	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
587	 C4	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xC2FFFF00DC000700F602100086FFFF00A0000100C2FFFE00DC000800F601FC
588	 C5	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0xC2FFFF00DC000700F602100086FFFF00A0000100C2FFFE00DC000800F601FC
- stack 0: 0xE0
589	 C7	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xC2FFFF
590	 C8	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0xC2FFFF
- stack 0: 0xFFFF
591	 CB	AND		 	 
- stack 1: 0x47C
- stack 0: 0xFFFF
592	 CC	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0xFFFF
- stack 0: 0x1
593	 CE	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
594	 CF	PUSH2	03A0	 	 
- stack 2: 0x47C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
595	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x47C
596	 D3	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
597	 D5	ADD		 	 
- stack 0: 0x480
598	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
599	 D7	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xDC000700F602100086FFFF00A0000100C2FFFE00DC000800F601FC0086FFFF
600	 D8	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0xDC000700F602100086FFFF00A0000100C2FFFE00DC000800F601FC0086FFFF
- stack 0: 0xF0
601	 DA	SHR		 	 
- stack 1: 0x480
- stack 0: 0xDC
602	 DB	JUMP		 	 
- stack 0: 0x480
603	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x480
604	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
605	 DE	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xDC000700F602100086FFFF00A0000100C2FFFE00DC000800F601FC0086FFFF
606	 DF	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0xDC000700F602100086FFFF00A0000100C2FFFE00DC000800F601FC0086FFFF
- stack 0: 0xE0
607	 E1	SHR		 	 
- stack 1: 0x480
- stack 0: 0xDC0007
608	 E2	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0xDC0007
- stack 0: 0xFFFF
609	 E5	AND		 	 
- stack 1: 0x480
- stack 0: 0x7
610	 E6	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0x7
- stack 0: 0x1
611	 E8	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x7
612	 E9	PUSH2	0380	 	 
- stack 2: 0x480
- stack 1: 0x7
- stack 0: 0x380
613	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x480
614	 ED	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
615	 EF	ADD		 	 
- stack 0: 0x484
616	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
617	 F1	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0xF602100086FFFF00A0000100C2FFFE00DC000800F601FC0086FFFF00A00007
618	 F2	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0xF602100086FFFF00A0000100C2FFFE00DC000800F601FC0086FFFF00A00007
- stack 0: 0xF0
619	 F4	SHR		 	 
- stack 1: 0x484
- stack 0: 0xF6
620	 F5	JUMP		 	 
- stack 0: 0x484
621	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x484
622	 F7	PUSH2	0060	 	 
- stack 1: 0x484
- stack 0: 0x60
623	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x484
- stack 0: 0xFFFFFFFF
624	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x484
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
625	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x484
- stack 0: 0xFFFFFFFF
626	 101	PUSH2	03A0	 	 
- stack 2: 0x484
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
627	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x484
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
628	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x484
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
629	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x484
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
630	 10B	SUB		 	 
- stack 1: 0x484
- stack 0: 0x0
631	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x114
632	 10F	JUMPI		 	 
- stack 0: 0x484
633	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x484
- stack 0: 0x12E
634	 113	JUMP		 	 
- stack 0: 0x484
635	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x484
636	 12F	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
637	 131	ADD		 	 
- stack 0: 0x488
638	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
639	 133	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x86FFFF00A0000100C2FFFE00DC000800F601FC0086FFFF00A0000700C2FF80
640	 134	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x86FFFF00A0000100C2FFFE00DC000800F601FC0086FFFF00A0000700C2FF80
- stack 0: 0xF0
641	 136	SHR		 	 
- stack 1: 0x488
- stack 0: 0x86
642	 137	JUMP		 	 
- stack 0: 0x488
643	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x488
644	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x488
- stack 0: 0x488
645	 88	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x86FFFF00A0000100C2FFFE00DC000800F601FC0086FFFF00A0000700C2FF80
646	 89	PUSH1	E0	 	 
- stack 2: 0x488
- stack 1: 0x86FFFF00A0000100C2FFFE00DC000800F601FC0086FFFF00A0000700C2FF80
- stack 0: 0xE0
647	 8B	SHR		 	 
- stack 1: 0x488
- stack 0: 0x86FFFF
648	 8C	PUSH2	FFFF	 	 
- stack 2: 0x488
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
649	 8F	AND		 	 
- stack 1: 0x488
- stack 0: 0xFFFF
650	 90	PUSH1	01	 	 
- stack 2: 0x488
- stack 1: 0xFFFF
- stack 0: 0x1
651	 92	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
652	 93	PUSH2	0020	 	 
- stack 2: 0x488
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
653	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x488
654	 97	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
655	 99	ADD		 	 
- stack 0: 0x48C
656	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
657	 9B	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0xA0000100C2FFFE00DC000800F601FC0086FFFF00A0000700C2FF8000DC0009
658	 9C	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0xA0000100C2FFFE00DC000800F601FC0086FFFF00A0000700C2FF8000DC0009
- stack 0: 0xF0
659	 9E	SHR		 	 
- stack 1: 0x48C
- stack 0: 0xA0
660	 9F	JUMP		 	 
- stack 0: 0x48C
661	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x48C
662	 A1	PUSH2	0020	 	 
- stack 1: 0x48C
- stack 0: 0x20
663	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x48C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
664	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x48C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x48C
665	 A6	MLOAD		 	 
- stack 2: 0x48C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xA0000100C2FFFE00DC000800F601FC0086FFFF00A0000700C2FF8000DC0009
666	 A7	PUSH1	E0	 	 
- stack 3: 0x48C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xA0000100C2FFFE00DC000800F601FC0086FFFF00A0000700C2FF8000DC0009
- stack 0: 0xE0
667	 A9	SHR		 	 
- stack 2: 0x48C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xA00001
668	 AA	PUSH2	FFFF	 	 
- stack 3: 0x48C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xA00001
- stack 0: 0xFFFF
669	 AD	AND		 	 
- stack 2: 0x48C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1
670	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x48C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
671	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x48C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
672	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x48C
- stack 0: 0xFFFFFFFE
673	 B5	PUSH2	0060	 	 
- stack 2: 0x48C
- stack 1: 0xFFFFFFFE
- stack 0: 0x60
674	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x48C
675	 B9	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
676	 BB	ADD		 	 
- stack 0: 0x490
677	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
678	 BD	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xC2FFFE00DC000800F601FC0086FFFF00A0000700C2FF8000DC000900F601E8
679	 BE	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xC2FFFE00DC000800F601FC0086FFFF00A0000700C2FF8000DC000900F601E8
- stack 0: 0xF0
680	 C0	SHR		 	 
- stack 1: 0x490
- stack 0: 0xC2
681	 C1	JUMP		 	 
- stack 0: 0x490
682	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x490
683	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
684	 C4	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xC2FFFE00DC000800F601FC0086FFFF00A0000700C2FF8000DC000900F601E8
685	 C5	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0xC2FFFE00DC000800F601FC0086FFFF00A0000700C2FF8000DC000900F601E8
- stack 0: 0xE0
686	 C7	SHR		 	 
- stack 1: 0x490
- stack 0: 0xC2FFFE
687	 C8	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0xC2FFFE
- stack 0: 0xFFFF
688	 CB	AND		 	 
- stack 1: 0x490
- stack 0: 0xFFFE
689	 CC	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0xFFFE
- stack 0: 0x1
690	 CE	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
691	 CF	PUSH2	03A0	 	 
- stack 2: 0x490
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3A0
692	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x490
693	 D3	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
694	 D5	ADD		 	 
- stack 0: 0x494
695	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
696	 D7	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xDC000800F601FC0086FFFF00A0000700C2FF8000DC000900F601E80086FFFF
697	 D8	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xDC000800F601FC0086FFFF00A0000700C2FF8000DC000900F601E80086FFFF
- stack 0: 0xF0
698	 DA	SHR		 	 
- stack 1: 0x494
- stack 0: 0xDC
699	 DB	JUMP		 	 
- stack 0: 0x494
700	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x494
701	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
702	 DE	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xDC000800F601FC0086FFFF00A0000700C2FF8000DC000900F601E80086FFFF
703	 DF	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0xDC000800F601FC0086FFFF00A0000700C2FF8000DC000900F601E80086FFFF
- stack 0: 0xE0
704	 E1	SHR		 	 
- stack 1: 0x494
- stack 0: 0xDC0008
705	 E2	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0xDC0008
- stack 0: 0xFFFF
706	 E5	AND		 	 
- stack 1: 0x494
- stack 0: 0x8
707	 E6	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x8
- stack 0: 0x1
708	 E8	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x8
709	 E9	PUSH2	0380	 	 
- stack 2: 0x494
- stack 1: 0x8
- stack 0: 0x380
710	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x494
711	 ED	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
712	 EF	ADD		 	 
- stack 0: 0x498
713	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
714	 F1	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xF601FC0086FFFF00A0000700C2FF8000DC000900F601E80086FFFF00A0000E
715	 F2	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xF601FC0086FFFF00A0000700C2FF8000DC000900F601E80086FFFF00A0000E
- stack 0: 0xF0
716	 F4	SHR		 	 
- stack 1: 0x498
- stack 0: 0xF6
717	 F5	JUMP		 	 
- stack 0: 0x498
718	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x498
719	 F7	PUSH2	0060	 	 
- stack 1: 0x498
- stack 0: 0x60
720	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x498
- stack 0: 0xFFFFFFFE
721	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x498
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFF
722	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x498
- stack 0: 0xFFFFFFFE
723	 101	PUSH2	03A0	 	 
- stack 2: 0x498
- stack 1: 0xFFFFFFFE
- stack 0: 0x3A0
724	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x498
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
725	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x498
- stack 2: 0xFFFFFFFE
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
726	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x498
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFE
727	 10B	SUB		 	 
- stack 1: 0x498
- stack 0: 0x0
728	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0x114
729	 10F	JUMPI		 	 
- stack 0: 0x498
730	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x498
- stack 0: 0x12E
731	 113	JUMP		 	 
- stack 0: 0x498
732	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x498
733	 12F	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
734	 131	ADD		 	 
- stack 0: 0x49C
735	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
736	 133	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x86FFFF00A0000700C2FF8000DC000900F601E80086FFFF00A0000E015EFFFC
737	 134	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x86FFFF00A0000700C2FF8000DC000900F601E80086FFFF00A0000E015EFFFC
- stack 0: 0xF0
738	 136	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x86
739	 137	JUMP		 	 
- stack 0: 0x49C
740	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x49C
741	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x49C
- stack 0: 0x49C
742	 88	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x86FFFF00A0000700C2FF8000DC000900F601E80086FFFF00A0000E015EFFFC
743	 89	PUSH1	E0	 	 
- stack 2: 0x49C
- stack 1: 0x86FFFF00A0000700C2FF8000DC000900F601E80086FFFF00A0000E015EFFFC
- stack 0: 0xE0
744	 8B	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x86FFFF
745	 8C	PUSH2	FFFF	 	 
- stack 2: 0x49C
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
746	 8F	AND		 	 
- stack 1: 0x49C
- stack 0: 0xFFFF
747	 90	PUSH1	01	 	 
- stack 2: 0x49C
- stack 1: 0xFFFF
- stack 0: 0x1
748	 92	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
749	 93	PUSH2	0020	 	 
- stack 2: 0x49C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
750	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x49C
751	 97	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
752	 99	ADD		 	 
- stack 0: 0x4A0
753	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
754	 9B	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0xA0000700C2FF8000DC000900F601E80086FFFF00A0000E015EFFFC00DC000A
755	 9C	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0xA0000700C2FF8000DC000900F601E80086FFFF00A0000E015EFFFC00DC000A
- stack 0: 0xF0
756	 9E	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0xA0
757	 9F	JUMP		 	 
- stack 0: 0x4A0
758	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x4A0
759	 A1	PUSH2	0020	 	 
- stack 1: 0x4A0
- stack 0: 0x20
760	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x4A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
761	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x4A0
762	 A6	MLOAD		 	 
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xA0000700C2FF8000DC000900F601E80086FFFF00A0000E015EFFFC00DC000A
763	 A7	PUSH1	E0	 	 
- stack 3: 0x4A0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xA0000700C2FF8000DC000900F601E80086FFFF00A0000E015EFFFC00DC000A
- stack 0: 0xE0
764	 A9	SHR		 	 
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xA00007
765	 AA	PUSH2	FFFF	 	 
- stack 3: 0x4A0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xA00007
- stack 0: 0xFFFF
766	 AD	AND		 	 
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x7
767	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x4A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80
768	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80
- stack 0: 0xFFFFFFFF
769	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A0
- stack 0: 0xFFFFFF80
770	 B5	PUSH2	0060	 	 
- stack 2: 0x4A0
- stack 1: 0xFFFFFF80
- stack 0: 0x60
771	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x4A0
772	 B9	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
773	 BB	ADD		 	 
- stack 0: 0x4A4
774	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
775	 BD	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xC2FF8000DC000900F601E80086FFFF00A0000E015EFFFC00DC000A00F601D4
776	 BE	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0xC2FF8000DC000900F601E80086FFFF00A0000E015EFFFC00DC000A00F601D4
- stack 0: 0xF0
777	 C0	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xC2
778	 C1	JUMP		 	 
- stack 0: 0x4A4
779	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x4A4
780	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
781	 C4	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xC2FF8000DC000900F601E80086FFFF00A0000E015EFFFC00DC000A00F601D4
782	 C5	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0xC2FF8000DC000900F601E80086FFFF00A0000E015EFFFC00DC000A00F601D4
- stack 0: 0xE0
783	 C7	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xC2FF80
784	 C8	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0xC2FF80
- stack 0: 0xFFFF
785	 CB	AND		 	 
- stack 1: 0x4A4
- stack 0: 0xFF80
786	 CC	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0xFF80
- stack 0: 0x1
787	 CE	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80
788	 CF	PUSH2	03A0	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80
- stack 0: 0x3A0
789	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x4A4
790	 D3	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
791	 D5	ADD		 	 
- stack 0: 0x4A8
792	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
793	 D7	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xDC000900F601E80086FFFF00A0000E015EFFFC00DC000A00F601D40086FFFF
794	 D8	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xDC000900F601E80086FFFF00A0000E015EFFFC00DC000A00F601D40086FFFF
- stack 0: 0xF0
795	 DA	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xDC
796	 DB	JUMP		 	 
- stack 0: 0x4A8
797	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4A8
798	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
799	 DE	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xDC000900F601E80086FFFF00A0000E015EFFFC00DC000A00F601D40086FFFF
800	 DF	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0xDC000900F601E80086FFFF00A0000E015EFFFC00DC000A00F601D40086FFFF
- stack 0: 0xE0
801	 E1	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xDC0009
802	 E2	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0xDC0009
- stack 0: 0xFFFF
803	 E5	AND		 	 
- stack 1: 0x4A8
- stack 0: 0x9
804	 E6	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0x9
- stack 0: 0x1
805	 E8	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0x9
806	 E9	PUSH2	0380	 	 
- stack 2: 0x4A8
- stack 1: 0x9
- stack 0: 0x380
807	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x4A8
808	 ED	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
809	 EF	ADD		 	 
- stack 0: 0x4AC
810	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
811	 F1	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xF601E80086FFFF00A0000E015EFFFC00DC000A00F601D40086FFFF00A0001F
812	 F2	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xF601E80086FFFF00A0000E015EFFFC00DC000A00F601D40086FFFF00A0001F
- stack 0: 0xF0
813	 F4	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xF6
814	 F5	JUMP		 	 
- stack 0: 0x4AC
815	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x4AC
816	 F7	PUSH2	0060	 	 
- stack 1: 0x4AC
- stack 0: 0x60
817	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x4AC
- stack 0: 0xFFFFFF80
818	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFFFF80
- stack 0: 0xFFFFFFFF
819	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4AC
- stack 0: 0xFFFFFF80
820	 101	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFFFF80
- stack 0: 0x3A0
821	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x4AC
- stack 1: 0xFFFFFF80
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80
822	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4AC
- stack 2: 0xFFFFFF80
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80
- stack 0: 0xFFFFFFFF
823	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4AC
- stack 1: 0xFFFFFF80
- stack 0: 0xFFFFFF80
824	 10B	SUB		 	 
- stack 1: 0x4AC
- stack 0: 0x0
825	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x4AC
- stack 1: 0x0
- stack 0: 0x114
826	 10F	JUMPI		 	 
- stack 0: 0x4AC
827	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x4AC
- stack 0: 0x12E
828	 113	JUMP		 	 
- stack 0: 0x4AC
829	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x4AC
830	 12F	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
831	 131	ADD		 	 
- stack 0: 0x4B0
832	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
833	 133	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x86FFFF00A0000E015EFFFC00DC000A00F601D40086FFFF00A0001F014B0000
834	 134	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x86FFFF00A0000E015EFFFC00DC000A00F601D40086FFFF00A0001F014B0000
- stack 0: 0xF0
835	 136	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x86
836	 137	JUMP		 	 
- stack 0: 0x4B0
837	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x4B0
838	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
839	 88	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x86FFFF00A0000E015EFFFC00DC000A00F601D40086FFFF00A0001F014B0000
840	 89	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x86FFFF00A0000E015EFFFC00DC000A00F601D40086FFFF00A0001F014B0000
- stack 0: 0xE0
841	 8B	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x86FFFF
842	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
843	 8F	AND		 	 
- stack 1: 0x4B0
- stack 0: 0xFFFF
844	 90	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0xFFFF
- stack 0: 0x1
845	 92	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
846	 93	PUSH2	0020	 	 
- stack 2: 0x4B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
847	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B0
848	 97	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
849	 99	ADD		 	 
- stack 0: 0x4B4
850	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
851	 9B	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0xA0000E015EFFFC00DC000A00F601D40086FFFF00A0001F014B000000DC000B
852	 9C	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0xA0000E015EFFFC00DC000A00F601D40086FFFF00A0001F014B000000DC000B
- stack 0: 0xF0
853	 9E	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0xA0
854	 9F	JUMP		 	 
- stack 0: 0x4B4
855	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x4B4
856	 A1	PUSH2	0020	 	 
- stack 1: 0x4B4
- stack 0: 0x20
857	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
858	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x4B4
859	 A6	MLOAD		 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xA0000E015EFFFC00DC000A00F601D40086FFFF00A0001F014B000000DC000B
860	 A7	PUSH1	E0	 	 
- stack 3: 0x4B4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xA0000E015EFFFC00DC000A00F601D40086FFFF00A0001F014B000000DC000B
- stack 0: 0xE0
861	 A9	SHR		 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xA0000E
862	 AA	PUSH2	FFFF	 	 
- stack 3: 0x4B4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xA0000E
- stack 0: 0xFFFF
863	 AD	AND		 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xE
864	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000
865	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000
- stack 0: 0xFFFFFFFF
866	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B4
- stack 0: 0xFFFFC000
867	 B5	PUSH2	0060	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFC000
- stack 0: 0x60
868	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x4B4
869	 B9	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
870	 BB	ADD		 	 
- stack 0: 0x4B8
871	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
872	 BD	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x15EFFFC00DC000A00F601D40086FFFF00A0001F014B000000DC000B00F601C0
873	 BE	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x15EFFFC00DC000A00F601D40086FFFF00A0001F014B000000DC000B00F601C0
- stack 0: 0xF0
874	 C0	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x15E
875	 C1	JUMP		 	 
- stack 0: 0x4B8
876	 15E	JUMPDEST		 ;; __riscvimpl_LUI_ffffceb7	  ;; # instr: lui t4,0xffffc(ignore imm)
- stack 0: 0x4B8
877	 15F	PUSH4	ffffc000	 	 
- stack 1: 0x4B8
- stack 0: 0xFFFFC000
878	 164	PUSH2	03A0	 	 
- stack 2: 0x4B8
- stack 1: 0xFFFFC000
- stack 0: 0x3A0
879	 167	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B8
880	 168	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
881	 16A	ADD		 	 
- stack 0: 0x4BC
882	 16B	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
883	 16C	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0xDC000A00F601D40086FFFF00A0001F014B000000DC000B00F601C001711212
884	 16D	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0xDC000A00F601D40086FFFF00A0001F014B000000DC000B00F601C001711212
- stack 0: 0xF0
885	 16F	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0xDC
886	 170	JUMP		 	 
- stack 0: 0x4BC
887	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4BC
888	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
889	 DE	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0xDC000A00F601D40086FFFF00A0001F014B000000DC000B00F601C001711212
890	 DF	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0xDC000A00F601D40086FFFF00A0001F014B000000DC000B00F601C001711212
- stack 0: 0xE0
891	 E1	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0xDC000A
892	 E2	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0xDC000A
- stack 0: 0xFFFF
893	 E5	AND		 	 
- stack 1: 0x4BC
- stack 0: 0xA
894	 E6	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0xA
- stack 0: 0x1
895	 E8	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0xA
896	 E9	PUSH2	0380	 	 
- stack 2: 0x4BC
- stack 1: 0xA
- stack 0: 0x380
897	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x4BC
898	 ED	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
899	 EF	ADD		 	 
- stack 0: 0x4C0
900	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
901	 F1	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xF601D40086FFFF00A0001F014B000000DC000B00F601C00171121201840121
902	 F2	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0xF601D40086FFFF00A0001F014B000000DC000B00F601C00171121201840121
- stack 0: 0xF0
903	 F4	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xF6
904	 F5	JUMP		 	 
- stack 0: 0x4C0
905	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x4C0
906	 F7	PUSH2	0060	 	 
- stack 1: 0x4C0
- stack 0: 0x60
907	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x4C0
- stack 0: 0xFFFFC000
908	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFC000
- stack 0: 0xFFFFFFFF
909	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C0
- stack 0: 0xFFFFC000
910	 101	PUSH2	03A0	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFC000
- stack 0: 0x3A0
911	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C0
- stack 1: 0xFFFFC000
- stack 0: 0xFFFFC000
912	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C0
- stack 2: 0xFFFFC000
- stack 1: 0xFFFFC000
- stack 0: 0xFFFFFFFF
913	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C0
- stack 1: 0xFFFFC000
- stack 0: 0xFFFFC000
914	 10B	SUB		 	 
- stack 1: 0x4C0
- stack 0: 0x0
915	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x4C0
- stack 1: 0x0
- stack 0: 0x114
916	 10F	JUMPI		 	 
- stack 0: 0x4C0
917	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x4C0
- stack 0: 0x12E
918	 113	JUMP		 	 
- stack 0: 0x4C0
919	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x4C0
920	 12F	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
921	 131	ADD		 	 
- stack 0: 0x4C4
922	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
923	 133	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x86FFFF00A0001F014B000000DC000B00F601C0017112120184012100A00000
924	 134	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x86FFFF00A0001F014B000000DC000B00F601C0017112120184012100A00000
- stack 0: 0xF0
925	 136	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x86
926	 137	JUMP		 	 
- stack 0: 0x4C4
927	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x4C4
928	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
929	 88	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x86FFFF00A0001F014B000000DC000B00F601C0017112120184012100A00000
930	 89	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0x86FFFF00A0001F014B000000DC000B00F601C0017112120184012100A00000
- stack 0: 0xE0
931	 8B	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x86FFFF
932	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
933	 8F	AND		 	 
- stack 1: 0x4C4
- stack 0: 0xFFFF
934	 90	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0xFFFF
- stack 0: 0x1
935	 92	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
936	 93	PUSH2	0020	 	 
- stack 2: 0x4C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
937	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C4
938	 97	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
939	 99	ADD		 	 
- stack 0: 0x4C8
940	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
941	 9B	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xA0001F014B000000DC000B00F601C0017112120184012100A0000001A31212
942	 9C	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0xA0001F014B000000DC000B00F601C0017112120184012100A0000001A31212
- stack 0: 0xF0
943	 9E	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xA0
944	 9F	JUMP		 	 
- stack 0: 0x4C8
945	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x4C8
946	 A1	PUSH2	0020	 	 
- stack 1: 0x4C8
- stack 0: 0x20
947	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x4C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
948	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x4C8
949	 A6	MLOAD		 	 
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xA0001F014B000000DC000B00F601C0017112120184012100A0000001A31212
950	 A7	PUSH1	E0	 	 
- stack 3: 0x4C8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xA0001F014B000000DC000B00F601C0017112120184012100A0000001A31212
- stack 0: 0xE0
951	 A9	SHR		 	 
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xA0001F
952	 AA	PUSH2	FFFF	 	 
- stack 3: 0x4C8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xA0001F
- stack 0: 0xFFFF
953	 AD	AND		 	 
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1F
954	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x4C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
955	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xFFFFFFFF
956	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C8
- stack 0: 0x80000000
957	 B5	PUSH2	0060	 	 
- stack 2: 0x4C8
- stack 1: 0x80000000
- stack 0: 0x60
958	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x4C8
959	 B9	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
960	 BB	ADD		 	 
- stack 0: 0x4CC
961	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
962	 BD	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x14B000000DC000B00F601C0017112120184012100A0000001A3121201B60121
963	 BE	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x14B000000DC000B00F601C0017112120184012100A0000001A3121201B60121
- stack 0: 0xF0
964	 C0	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x14B
965	 C1	JUMP		 	 
- stack 0: 0x4CC
966	 14B	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x4CC
967	 14C	PUSH4	80000000	 	 
- stack 1: 0x4CC
- stack 0: 0x80000000
968	 151	PUSH2	03A0	 	 
- stack 2: 0x4CC
- stack 1: 0x80000000
- stack 0: 0x3A0
969	 154	MSTORE		 	  ;; # store to x29
- stack 0: 0x4CC
970	 155	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
971	 157	ADD		 	 
- stack 0: 0x4D0
972	 158	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
973	 159	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0xDC000B00F601C0017112120184012100A0000001A3121201B6012100DC000C
974	 15A	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0xDC000B00F601C0017112120184012100A0000001A3121201B6012100DC000C
- stack 0: 0xF0
975	 15C	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0xDC
976	 15D	JUMP		 	 
- stack 0: 0x4D0
977	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4D0
978	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
979	 DE	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0xDC000B00F601C0017112120184012100A0000001A3121201B6012100DC000C
980	 DF	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0xDC000B00F601C0017112120184012100A0000001A3121201B6012100DC000C
- stack 0: 0xE0
981	 E1	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0xDC000B
982	 E2	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0xDC000B
- stack 0: 0xFFFF
983	 E5	AND		 	 
- stack 1: 0x4D0
- stack 0: 0xB
984	 E6	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0xB
- stack 0: 0x1
985	 E8	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0xB
986	 E9	PUSH2	0380	 	 
- stack 2: 0x4D0
- stack 1: 0xB
- stack 0: 0x380
987	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x4D0
988	 ED	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
989	 EF	ADD		 	 
- stack 0: 0x4D4
990	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
991	 F1	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xF601C0017112120184012100A0000001A3121201B6012100DC000C00F601A4
992	 F2	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0xF601C0017112120184012100A0000001A3121201B6012100DC000C00F601A4
- stack 0: 0xF0
993	 F4	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xF6
994	 F5	JUMP		 	 
- stack 0: 0x4D4
995	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x4D4
996	 F7	PUSH2	0060	 	 
- stack 1: 0x4D4
- stack 0: 0x60
997	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x4D4
- stack 0: 0x80000000
998	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
999	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D4
- stack 0: 0x80000000
1000	 101	PUSH2	03A0	 	 
- stack 2: 0x4D4
- stack 1: 0x80000000
- stack 0: 0x3A0
1001	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x4D4
- stack 1: 0x80000000
- stack 0: 0x80000000
1002	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D4
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
1003	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D4
- stack 1: 0x80000000
- stack 0: 0x80000000
1004	 10B	SUB		 	 
- stack 1: 0x4D4
- stack 0: 0x0
1005	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x114
1006	 10F	JUMPI		 	 
- stack 0: 0x4D4
1007	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x4D4
- stack 0: 0x12E
1008	 113	JUMP		 	 
- stack 0: 0x4D4
1009	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x4D4
1010	 12F	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1011	 131	ADD		 	 
- stack 0: 0x4D8
1012	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1013	 133	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x17112120184012100A0000001A3121201B6012100DC000C00F601A401711212
1014	 134	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x17112120184012100A0000001A3121201B6012100DC000C00F601A401711212
- stack 0: 0xF0
1015	 136	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x171
1016	 137	JUMP		 	 
- stack 0: 0x4D8
1017	 171	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x4D8
1018	 172	PUSH4	21212000	 	 
- stack 1: 0x4D8
- stack 0: 0x21212000
1019	 177	PUSH2	0020	 	 
- stack 2: 0x4D8
- stack 1: 0x21212000
- stack 0: 0x20
1020	 17A	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D8
1021	 17B	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1022	 17D	ADD		 	 
- stack 0: 0x4DC
1023	 17E	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1024	 17F	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x184012100A0000001A3121201B6012100DC000C00F601A40171121201840121
1025	 180	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x184012100A0000001A3121201B6012100DC000C00F601A40171121201840121
- stack 0: 0xF0
1026	 182	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x184
1027	 183	JUMP		 	 
- stack 0: 0x4DC
1028	 184	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,289(ignore imm)
- stack 0: 0x4DC
1029	 185	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
1030	 186	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x184012100A0000001A3121201B6012100DC000C00F601A40171121201840121
1031	 187	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0x184012100A0000001A3121201B6012100DC000C00F601A40171121201840121
- stack 0: 0xE0
1032	 189	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x1840121
1033	 18A	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x1840121
- stack 0: 0xFFFF
1034	 18D	AND		 	 
- stack 1: 0x4DC
- stack 0: 0x121
1035	 18E	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0x121
- stack 0: 0x1
1036	 190	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0x121
1037	 191	PUSH2	0020	 	 
- stack 2: 0x4DC
- stack 1: 0x121
- stack 0: 0x20
1038	 194	MLOAD		 	  ;; # read from x1
- stack 2: 0x4DC
- stack 1: 0x121
- stack 0: 0x21212000
1039	 195	ADD		 	  ;; # ADDI 1
- stack 1: 0x4DC
- stack 0: 0x21212121
1040	 196	PUSH2	0020	 	 
- stack 2: 0x4DC
- stack 1: 0x21212121
- stack 0: 0x20
1041	 199	MSTORE		 	  ;; # store to x1
- stack 0: 0x4DC
1042	 19A	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1043	 19C	ADD		 	 
- stack 0: 0x4E0
1044	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1045	 19E	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xA0000001A3121201B6012100DC000C00F601A4017112120184012100A00001
1046	 19F	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0xA0000001A3121201B6012100DC000C00F601A4017112120184012100A00001
- stack 0: 0xF0
1047	 1A1	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xA0
1048	 1A2	JUMP		 	 
- stack 0: 0x4E0
1049	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x4E0
1050	 A1	PUSH2	0020	 	 
- stack 1: 0x4E0
- stack 0: 0x20
1051	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x4E0
- stack 0: 0x21212121
1052	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4E0
- stack 1: 0x21212121
- stack 0: 0x4E0
1053	 A6	MLOAD		 	 
- stack 2: 0x4E0
- stack 1: 0x21212121
- stack 0: 0xA0000001A3121201B6012100DC000C00F601A4017112120184012100A00001
1054	 A7	PUSH1	E0	 	 
- stack 3: 0x4E0
- stack 2: 0x21212121
- stack 1: 0xA0000001A3121201B6012100DC000C00F601A4017112120184012100A00001
- stack 0: 0xE0
1055	 A9	SHR		 	 
- stack 2: 0x4E0
- stack 1: 0x21212121
- stack 0: 0xA00000
1056	 AA	PUSH2	FFFF	 	 
- stack 3: 0x4E0
- stack 2: 0x21212121
- stack 1: 0xA00000
- stack 0: 0xFFFF
1057	 AD	AND		 	 
- stack 2: 0x4E0
- stack 1: 0x21212121
- stack 0: 0x0
1058	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x4E0
- stack 0: 0x21212121
1059	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1060	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E0
- stack 0: 0x21212121
1061	 B5	PUSH2	0060	 	 
- stack 2: 0x4E0
- stack 1: 0x21212121
- stack 0: 0x60
1062	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x4E0
1063	 B9	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1064	 BB	ADD		 	 
- stack 0: 0x4E4
1065	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1066	 BD	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x1A3121201B6012100DC000C00F601A4017112120184012100A0000101D52424
1067	 BE	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x1A3121201B6012100DC000C00F601A4017112120184012100A0000101D52424
- stack 0: 0xF0
1068	 C0	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x1A3
1069	 C1	JUMP		 	 
- stack 0: 0x4E4
1070	 1A3	JUMPDEST		 ;; __riscvimpl_LUI_21212eb7	  ;; # instr: lui t4,0x21212(ignore imm)
- stack 0: 0x4E4
1071	 1A4	PUSH4	21212000	 	 
- stack 1: 0x4E4
- stack 0: 0x21212000
1072	 1A9	PUSH2	03A0	 	 
- stack 2: 0x4E4
- stack 1: 0x21212000
- stack 0: 0x3A0
1073	 1AC	MSTORE		 	  ;; # store to x29
- stack 0: 0x4E4
1074	 1AD	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1075	 1AF	ADD		 	 
- stack 0: 0x4E8
1076	 1B0	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1077	 1B1	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x1B6012100DC000C00F601A4017112120184012100A0000101D5242401B60242
1078	 1B2	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x1B6012100DC000C00F601A4017112120184012100A0000101D5242401B60242
- stack 0: 0xF0
1079	 1B4	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x1B6
1080	 1B5	JUMP		 	 
- stack 0: 0x4E8
1081	 1B6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,289(ignore imm)
- stack 0: 0x4E8
1082	 1B7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1083	 1B8	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x1B6012100DC000C00F601A4017112120184012100A0000101D5242401B60242
1084	 1B9	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0x1B6012100DC000C00F601A4017112120184012100A0000101D5242401B60242
- stack 0: 0xE0
1085	 1BB	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x1B60121
1086	 1BC	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x1B60121
- stack 0: 0xFFFF
1087	 1BF	AND		 	 
- stack 1: 0x4E8
- stack 0: 0x121
1088	 1C0	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0x121
- stack 0: 0x1
1089	 1C2	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0x121
1090	 1C3	PUSH2	03A0	 	 
- stack 2: 0x4E8
- stack 1: 0x121
- stack 0: 0x3A0
1091	 1C6	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E8
- stack 1: 0x121
- stack 0: 0x21212000
1092	 1C7	ADD		 	  ;; # ADDI 29
- stack 1: 0x4E8
- stack 0: 0x21212121
1093	 1C8	PUSH2	03A0	 	 
- stack 2: 0x4E8
- stack 1: 0x21212121
- stack 0: 0x3A0
1094	 1CB	MSTORE		 	  ;; # store to x29
- stack 0: 0x4E8
1095	 1CC	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1096	 1CE	ADD		 	 
- stack 0: 0x4EC
1097	 1CF	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1098	 1D0	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xDC000C00F601A4017112120184012100A0000101D5242401B6024200DC000D
1099	 1D1	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0xDC000C00F601A4017112120184012100A0000101D5242401B6024200DC000D
- stack 0: 0xF0
1100	 1D3	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xDC
1101	 1D4	JUMP		 	 
- stack 0: 0x4EC
1102	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4EC
1103	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1104	 DE	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xDC000C00F601A4017112120184012100A0000101D5242401B6024200DC000D
1105	 DF	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0xDC000C00F601A4017112120184012100A0000101D5242401B6024200DC000D
- stack 0: 0xE0
1106	 E1	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xDC000C
1107	 E2	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0xDC000C
- stack 0: 0xFFFF
1108	 E5	AND		 	 
- stack 1: 0x4EC
- stack 0: 0xC
1109	 E6	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xC
- stack 0: 0x1
1110	 E8	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xC
1111	 E9	PUSH2	0380	 	 
- stack 2: 0x4EC
- stack 1: 0xC
- stack 0: 0x380
1112	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x4EC
1113	 ED	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1114	 EF	ADD		 	 
- stack 0: 0x4F0
1115	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1116	 F1	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xF601A4017112120184012100A0000101D5242401B6024200DC000D00F60188
1117	 F2	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xF601A4017112120184012100A0000101D5242401B6024200DC000D00F60188
- stack 0: 0xF0
1118	 F4	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xF6
1119	 F5	JUMP		 	 
- stack 0: 0x4F0
1120	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x4F0
1121	 F7	PUSH2	0060	 	 
- stack 1: 0x4F0
- stack 0: 0x60
1122	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x4F0
- stack 0: 0x21212121
1123	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F0
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1124	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F0
- stack 0: 0x21212121
1125	 101	PUSH2	03A0	 	 
- stack 2: 0x4F0
- stack 1: 0x21212121
- stack 0: 0x3A0
1126	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x4F0
- stack 1: 0x21212121
- stack 0: 0x21212121
1127	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4F0
- stack 2: 0x21212121
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1128	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4F0
- stack 1: 0x21212121
- stack 0: 0x21212121
1129	 10B	SUB		 	 
- stack 1: 0x4F0
- stack 0: 0x0
1130	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0x114
1131	 10F	JUMPI		 	 
- stack 0: 0x4F0
1132	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x4F0
- stack 0: 0x12E
1133	 113	JUMP		 	 
- stack 0: 0x4F0
1134	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x4F0
1135	 12F	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1136	 131	ADD		 	 
- stack 0: 0x4F4
1137	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1138	 133	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x17112120184012100A0000101D5242401B6024200DC000D00F6018801711212
1139	 134	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x17112120184012100A0000101D5242401B6024200DC000D00F6018801711212
- stack 0: 0xF0
1140	 136	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x171
1141	 137	JUMP		 	 
- stack 0: 0x4F4
1142	 171	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x4F4
1143	 172	PUSH4	21212000	 	 
- stack 1: 0x4F4
- stack 0: 0x21212000
1144	 177	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0x21212000
- stack 0: 0x20
1145	 17A	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F4
1146	 17B	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1147	 17D	ADD		 	 
- stack 0: 0x4F8
1148	 17E	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1149	 17F	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x184012100A0000101D5242401B6024200DC000D00F601880171121201840121
1150	 180	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x184012100A0000101D5242401B6024200DC000D00F601880171121201840121
- stack 0: 0xF0
1151	 182	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x184
1152	 183	JUMP		 	 
- stack 0: 0x4F8
1153	 184	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,289(ignore imm)
- stack 0: 0x4F8
1154	 185	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1155	 186	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x184012100A0000101D5242401B6024200DC000D00F601880171121201840121
1156	 187	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x184012100A0000101D5242401B6024200DC000D00F601880171121201840121
- stack 0: 0xE0
1157	 189	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x1840121
1158	 18A	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x1840121
- stack 0: 0xFFFF
1159	 18D	AND		 	 
- stack 1: 0x4F8
- stack 0: 0x121
1160	 18E	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x121
- stack 0: 0x1
1161	 190	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x121
1162	 191	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0x121
- stack 0: 0x20
1163	 194	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F8
- stack 1: 0x121
- stack 0: 0x21212000
1164	 195	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F8
- stack 0: 0x21212121
1165	 196	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0x21212121
- stack 0: 0x20
1166	 199	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F8
1167	 19A	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1168	 19C	ADD		 	 
- stack 0: 0x4FC
1169	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1170	 19E	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0xA0000101D5242401B6024200DC000D00F60188017112120184012100A00007
1171	 19F	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0xA0000101D5242401B6024200DC000D00F60188017112120184012100A00007
- stack 0: 0xF0
1172	 1A1	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0xA0
1173	 1A2	JUMP		 	 
- stack 0: 0x4FC
1174	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x4FC
1175	 A1	PUSH2	0020	 	 
- stack 1: 0x4FC
- stack 0: 0x20
1176	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x4FC
- stack 0: 0x21212121
1177	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4FC
- stack 1: 0x21212121
- stack 0: 0x4FC
1178	 A6	MLOAD		 	 
- stack 2: 0x4FC
- stack 1: 0x21212121
- stack 0: 0xA0000101D5242401B6024200DC000D00F60188017112120184012100A00007
1179	 A7	PUSH1	E0	 	 
- stack 3: 0x4FC
- stack 2: 0x21212121
- stack 1: 0xA0000101D5242401B6024200DC000D00F60188017112120184012100A00007
- stack 0: 0xE0
1180	 A9	SHR		 	 
- stack 2: 0x4FC
- stack 1: 0x21212121
- stack 0: 0xA00001
1181	 AA	PUSH2	FFFF	 	 
- stack 3: 0x4FC
- stack 2: 0x21212121
- stack 1: 0xA00001
- stack 0: 0xFFFF
1182	 AD	AND		 	 
- stack 2: 0x4FC
- stack 1: 0x21212121
- stack 0: 0x1
1183	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x4FC
- stack 0: 0x42424242
1184	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x42424242
- stack 0: 0xFFFFFFFF
1185	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0x42424242
1186	 B5	PUSH2	0060	 	 
- stack 2: 0x4FC
- stack 1: 0x42424242
- stack 0: 0x60
1187	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x4FC
1188	 B9	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1189	 BB	ADD		 	 
- stack 0: 0x500
1190	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1191	 BD	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x1D5242401B6024200DC000D00F60188017112120184012100A0000701E80909
1192	 BE	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x1D5242401B6024200DC000D00F60188017112120184012100A0000701E80909
- stack 0: 0xF0
1193	 C0	SHR		 	 
- stack 1: 0x500
- stack 0: 0x1D5
1194	 C1	JUMP		 	 
- stack 0: 0x500
1195	 1D5	JUMPDEST		 ;; __riscvimpl_LUI_42424eb7	  ;; # instr: lui t4,0x42424(ignore imm)
- stack 0: 0x500
1196	 1D6	PUSH4	42424000	 	 
- stack 1: 0x500
- stack 0: 0x42424000
1197	 1DB	PUSH2	03A0	 	 
- stack 2: 0x500
- stack 1: 0x42424000
- stack 0: 0x3A0
1198	 1DE	MSTORE		 	  ;; # store to x29
- stack 0: 0x500
1199	 1DF	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1200	 1E1	ADD		 	 
- stack 0: 0x504
1201	 1E2	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1202	 1E3	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x1B6024200DC000D00F60188017112120184012100A0000701E8090901B60080
1203	 1E4	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x1B6024200DC000D00F60188017112120184012100A0000701E8090901B60080
- stack 0: 0xF0
1204	 1E6	SHR		 	 
- stack 1: 0x504
- stack 0: 0x1B6
1205	 1E7	JUMP		 	 
- stack 0: 0x504
1206	 1B6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,289(ignore imm)
- stack 0: 0x504
1207	 1B7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1208	 1B8	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x1B6024200DC000D00F60188017112120184012100A0000701E8090901B60080
1209	 1B9	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x1B6024200DC000D00F60188017112120184012100A0000701E8090901B60080
- stack 0: 0xE0
1210	 1BB	SHR		 	 
- stack 1: 0x504
- stack 0: 0x1B60242
1211	 1BC	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x1B60242
- stack 0: 0xFFFF
1212	 1BF	AND		 	 
- stack 1: 0x504
- stack 0: 0x242
1213	 1C0	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0x242
- stack 0: 0x1
1214	 1C2	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0x242
1215	 1C3	PUSH2	03A0	 	 
- stack 2: 0x504
- stack 1: 0x242
- stack 0: 0x3A0
1216	 1C6	MLOAD		 	  ;; # read from x29
- stack 2: 0x504
- stack 1: 0x242
- stack 0: 0x42424000
1217	 1C7	ADD		 	  ;; # ADDI 29
- stack 1: 0x504
- stack 0: 0x42424242
1218	 1C8	PUSH2	03A0	 	 
- stack 2: 0x504
- stack 1: 0x42424242
- stack 0: 0x3A0
1219	 1CB	MSTORE		 	  ;; # store to x29
- stack 0: 0x504
1220	 1CC	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1221	 1CE	ADD		 	 
- stack 0: 0x508
1222	 1CF	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1223	 1D0	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xDC000D00F60188017112120184012100A0000701E8090901B6008000DC000E
1224	 1D1	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xDC000D00F60188017112120184012100A0000701E8090901B6008000DC000E
- stack 0: 0xF0
1225	 1D3	SHR		 	 
- stack 1: 0x508
- stack 0: 0xDC
1226	 1D4	JUMP		 	 
- stack 0: 0x508
1227	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x508
1228	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1229	 DE	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xDC000D00F60188017112120184012100A0000701E8090901B6008000DC000E
1230	 DF	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0xDC000D00F60188017112120184012100A0000701E8090901B6008000DC000E
- stack 0: 0xE0
1231	 E1	SHR		 	 
- stack 1: 0x508
- stack 0: 0xDC000D
1232	 E2	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0xDC000D
- stack 0: 0xFFFF
1233	 E5	AND		 	 
- stack 1: 0x508
- stack 0: 0xD
1234	 E6	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xD
- stack 0: 0x1
1235	 E8	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xD
1236	 E9	PUSH2	0380	 	 
- stack 2: 0x508
- stack 1: 0xD
- stack 0: 0x380
1237	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x508
1238	 ED	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1239	 EF	ADD		 	 
- stack 0: 0x50C
1240	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1241	 F1	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xF60188017112120184012100A0000701E8090901B6008000DC000E00F6016C
1242	 F2	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xF60188017112120184012100A0000701E8090901B6008000DC000E00F6016C
- stack 0: 0xF0
1243	 F4	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xF6
1244	 F5	JUMP		 	 
- stack 0: 0x50C
1245	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x50C
1246	 F7	PUSH2	0060	 	 
- stack 1: 0x50C
- stack 0: 0x60
1247	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x50C
- stack 0: 0x42424242
1248	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x50C
- stack 1: 0x42424242
- stack 0: 0xFFFFFFFF
1249	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x50C
- stack 0: 0x42424242
1250	 101	PUSH2	03A0	 	 
- stack 2: 0x50C
- stack 1: 0x42424242
- stack 0: 0x3A0
1251	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x50C
- stack 1: 0x42424242
- stack 0: 0x42424242
1252	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x50C
- stack 2: 0x42424242
- stack 1: 0x42424242
- stack 0: 0xFFFFFFFF
1253	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x50C
- stack 1: 0x42424242
- stack 0: 0x42424242
1254	 10B	SUB		 	 
- stack 1: 0x50C
- stack 0: 0x0
1255	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x114
1256	 10F	JUMPI		 	 
- stack 0: 0x50C
1257	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x50C
- stack 0: 0x12E
1258	 113	JUMP		 	 
- stack 0: 0x50C
1259	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x50C
1260	 12F	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1261	 131	ADD		 	 
- stack 0: 0x510
1262	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1263	 133	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x17112120184012100A0000701E8090901B6008000DC000E00F6016C01711212
1264	 134	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x17112120184012100A0000701E8090901B6008000DC000E00F6016C01711212
- stack 0: 0xF0
1265	 136	SHR		 	 
- stack 1: 0x510
- stack 0: 0x171
1266	 137	JUMP		 	 
- stack 0: 0x510
1267	 171	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x510
1268	 172	PUSH4	21212000	 	 
- stack 1: 0x510
- stack 0: 0x21212000
1269	 177	PUSH2	0020	 	 
- stack 2: 0x510
- stack 1: 0x21212000
- stack 0: 0x20
1270	 17A	MSTORE		 	  ;; # store to x1
- stack 0: 0x510
1271	 17B	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1272	 17D	ADD		 	 
- stack 0: 0x514
1273	 17E	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1274	 17F	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x184012100A0000701E8090901B6008000DC000E00F6016C0171121201840121
1275	 180	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x184012100A0000701E8090901B6008000DC000E00F6016C0171121201840121
- stack 0: 0xF0
1276	 182	SHR		 	 
- stack 1: 0x514
- stack 0: 0x184
1277	 183	JUMP		 	 
- stack 0: 0x514
1278	 184	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,289(ignore imm)
- stack 0: 0x514
1279	 185	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1280	 186	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x184012100A0000701E8090901B6008000DC000E00F6016C0171121201840121
1281	 187	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x184012100A0000701E8090901B6008000DC000E00F6016C0171121201840121
- stack 0: 0xE0
1282	 189	SHR		 	 
- stack 1: 0x514
- stack 0: 0x1840121
1283	 18A	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x1840121
- stack 0: 0xFFFF
1284	 18D	AND		 	 
- stack 1: 0x514
- stack 0: 0x121
1285	 18E	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x121
- stack 0: 0x1
1286	 190	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x121
1287	 191	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0x121
- stack 0: 0x20
1288	 194	MLOAD		 	  ;; # read from x1
- stack 2: 0x514
- stack 1: 0x121
- stack 0: 0x21212000
1289	 195	ADD		 	  ;; # ADDI 1
- stack 1: 0x514
- stack 0: 0x21212121
1290	 196	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0x21212121
- stack 0: 0x20
1291	 199	MSTORE		 	  ;; # store to x1
- stack 0: 0x514
1292	 19A	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1293	 19C	ADD		 	 
- stack 0: 0x518
1294	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1295	 19E	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xA0000701E8090901B6008000DC000E00F6016C017112120184012100A0000E
1296	 19F	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0xA0000701E8090901B6008000DC000E00F6016C017112120184012100A0000E
- stack 0: 0xF0
1297	 1A1	SHR		 	 
- stack 1: 0x518
- stack 0: 0xA0
1298	 1A2	JUMP		 	 
- stack 0: 0x518
1299	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x518
1300	 A1	PUSH2	0020	 	 
- stack 1: 0x518
- stack 0: 0x20
1301	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x518
- stack 0: 0x21212121
1302	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x518
- stack 1: 0x21212121
- stack 0: 0x518
1303	 A6	MLOAD		 	 
- stack 2: 0x518
- stack 1: 0x21212121
- stack 0: 0xA0000701E8090901B6008000DC000E00F6016C017112120184012100A0000E
1304	 A7	PUSH1	E0	 	 
- stack 3: 0x518
- stack 2: 0x21212121
- stack 1: 0xA0000701E8090901B6008000DC000E00F6016C017112120184012100A0000E
- stack 0: 0xE0
1305	 A9	SHR		 	 
- stack 2: 0x518
- stack 1: 0x21212121
- stack 0: 0xA00007
1306	 AA	PUSH2	FFFF	 	 
- stack 3: 0x518
- stack 2: 0x21212121
- stack 1: 0xA00007
- stack 0: 0xFFFF
1307	 AD	AND		 	 
- stack 2: 0x518
- stack 1: 0x21212121
- stack 0: 0x7
1308	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x518
- stack 0: 0x1090909080
1309	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0x1090909080
- stack 0: 0xFFFFFFFF
1310	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x90909080
1311	 B5	PUSH2	0060	 	 
- stack 2: 0x518
- stack 1: 0x90909080
- stack 0: 0x60
1312	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x518
1313	 B9	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1314	 BB	ADD		 	 
- stack 0: 0x51C
1315	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1316	 BD	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x1E8090901B6008000DC000E00F6016C017112120184012100A0000E01FB8484
1317	 BE	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x1E8090901B6008000DC000E00F6016C017112120184012100A0000E01FB8484
- stack 0: 0xF0
1318	 C0	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x1E8
1319	 C1	JUMP		 	 
- stack 0: 0x51C
1320	 1E8	JUMPDEST		 ;; __riscvimpl_LUI_90909eb7	  ;; # instr: lui t4,0x90909(ignore imm)
- stack 0: 0x51C
1321	 1E9	PUSH4	90909000	 	 
- stack 1: 0x51C
- stack 0: 0x90909000
1322	 1EE	PUSH2	03A0	 	 
- stack 2: 0x51C
- stack 1: 0x90909000
- stack 0: 0x3A0
1323	 1F1	MSTORE		 	  ;; # store to x29
- stack 0: 0x51C
1324	 1F2	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1325	 1F4	ADD		 	 
- stack 0: 0x520
1326	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1327	 1F6	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x1B6008000DC000E00F6016C017112120184012100A0000E01FB848400DC000F
1328	 1F7	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x1B6008000DC000E00F6016C017112120184012100A0000E01FB848400DC000F
- stack 0: 0xF0
1329	 1F9	SHR		 	 
- stack 1: 0x520
- stack 0: 0x1B6
1330	 1FA	JUMP		 	 
- stack 0: 0x520
1331	 1B6	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,289(ignore imm)
- stack 0: 0x520
1332	 1B7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1333	 1B8	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x1B6008000DC000E00F6016C017112120184012100A0000E01FB848400DC000F
1334	 1B9	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x1B6008000DC000E00F6016C017112120184012100A0000E01FB848400DC000F
- stack 0: 0xE0
1335	 1BB	SHR		 	 
- stack 1: 0x520
- stack 0: 0x1B60080
1336	 1BC	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x1B60080
- stack 0: 0xFFFF
1337	 1BF	AND		 	 
- stack 1: 0x520
- stack 0: 0x80
1338	 1C0	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x80
- stack 0: 0x1
1339	 1C2	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x80
1340	 1C3	PUSH2	03A0	 	 
- stack 2: 0x520
- stack 1: 0x80
- stack 0: 0x3A0
1341	 1C6	MLOAD		 	  ;; # read from x29
- stack 2: 0x520
- stack 1: 0x80
- stack 0: 0x90909000
1342	 1C7	ADD		 	  ;; # ADDI 29
- stack 1: 0x520
- stack 0: 0x90909080
1343	 1C8	PUSH2	03A0	 	 
- stack 2: 0x520
- stack 1: 0x90909080
- stack 0: 0x3A0
1344	 1CB	MSTORE		 	  ;; # store to x29
- stack 0: 0x520
1345	 1CC	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1346	 1CE	ADD		 	 
- stack 0: 0x524
1347	 1CF	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1348	 1D0	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0xDC000E00F6016C017112120184012100A0000E01FB848400DC000F00F60154
1349	 1D1	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0xDC000E00F6016C017112120184012100A0000E01FB848400DC000F00F60154
- stack 0: 0xF0
1350	 1D3	SHR		 	 
- stack 1: 0x524
- stack 0: 0xDC
1351	 1D4	JUMP		 	 
- stack 0: 0x524
1352	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x524
1353	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1354	 DE	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0xDC000E00F6016C017112120184012100A0000E01FB848400DC000F00F60154
1355	 DF	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0xDC000E00F6016C017112120184012100A0000E01FB848400DC000F00F60154
- stack 0: 0xE0
1356	 E1	SHR		 	 
- stack 1: 0x524
- stack 0: 0xDC000E
1357	 E2	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0xDC000E
- stack 0: 0xFFFF
1358	 E5	AND		 	 
- stack 1: 0x524
- stack 0: 0xE
1359	 E6	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0xE
- stack 0: 0x1
1360	 E8	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xE
1361	 E9	PUSH2	0380	 	 
- stack 2: 0x524
- stack 1: 0xE
- stack 0: 0x380
1362	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x524
1363	 ED	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1364	 EF	ADD		 	 
- stack 0: 0x528
1365	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1366	 F1	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xF6016C017112120184012100A0000E01FB848400DC000F00F6015401711212
1367	 F2	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0xF6016C017112120184012100A0000E01FB848400DC000F00F6015401711212
- stack 0: 0xF0
1368	 F4	SHR		 	 
- stack 1: 0x528
- stack 0: 0xF6
1369	 F5	JUMP		 	 
- stack 0: 0x528
1370	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x528
1371	 F7	PUSH2	0060	 	 
- stack 1: 0x528
- stack 0: 0x60
1372	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x528
- stack 0: 0x90909080
1373	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x528
- stack 1: 0x90909080
- stack 0: 0xFFFFFFFF
1374	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x528
- stack 0: 0x90909080
1375	 101	PUSH2	03A0	 	 
- stack 2: 0x528
- stack 1: 0x90909080
- stack 0: 0x3A0
1376	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x528
- stack 1: 0x90909080
- stack 0: 0x90909080
1377	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x528
- stack 2: 0x90909080
- stack 1: 0x90909080
- stack 0: 0xFFFFFFFF
1378	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x528
- stack 1: 0x90909080
- stack 0: 0x90909080
1379	 10B	SUB		 	 
- stack 1: 0x528
- stack 0: 0x0
1380	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x528
- stack 1: 0x0
- stack 0: 0x114
1381	 10F	JUMPI		 	 
- stack 0: 0x528
1382	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x528
- stack 0: 0x12E
1383	 113	JUMP		 	 
- stack 0: 0x528
1384	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x528
1385	 12F	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1386	 131	ADD		 	 
- stack 0: 0x52C
1387	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1388	 133	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x17112120184012100A0000E01FB848400DC000F00F601540171121201840121
1389	 134	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x17112120184012100A0000E01FB848400DC000F00F601540171121201840121
- stack 0: 0xF0
1390	 136	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x171
1391	 137	JUMP		 	 
- stack 0: 0x52C
1392	 171	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x52C
1393	 172	PUSH4	21212000	 	 
- stack 1: 0x52C
- stack 0: 0x21212000
1394	 177	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x21212000
- stack 0: 0x20
1395	 17A	MSTORE		 	  ;; # store to x1
- stack 0: 0x52C
1396	 17B	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1397	 17D	ADD		 	 
- stack 0: 0x530
1398	 17E	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1399	 17F	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x184012100A0000E01FB848400DC000F00F60154017112120184012100A0001F
1400	 180	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x184012100A0000E01FB848400DC000F00F60154017112120184012100A0001F
- stack 0: 0xF0
1401	 182	SHR		 	 
- stack 1: 0x530
- stack 0: 0x184
1402	 183	JUMP		 	 
- stack 0: 0x530
1403	 184	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,289(ignore imm)
- stack 0: 0x530
1404	 185	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1405	 186	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x184012100A0000E01FB848400DC000F00F60154017112120184012100A0001F
1406	 187	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x184012100A0000E01FB848400DC000F00F60154017112120184012100A0001F
- stack 0: 0xE0
1407	 189	SHR		 	 
- stack 1: 0x530
- stack 0: 0x1840121
1408	 18A	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x1840121
- stack 0: 0xFFFF
1409	 18D	AND		 	 
- stack 1: 0x530
- stack 0: 0x121
1410	 18E	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0x121
- stack 0: 0x1
1411	 190	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0x121
1412	 191	PUSH2	0020	 	 
- stack 2: 0x530
- stack 1: 0x121
- stack 0: 0x20
1413	 194	MLOAD		 	  ;; # read from x1
- stack 2: 0x530
- stack 1: 0x121
- stack 0: 0x21212000
1414	 195	ADD		 	  ;; # ADDI 1
- stack 1: 0x530
- stack 0: 0x21212121
1415	 196	PUSH2	0020	 	 
- stack 2: 0x530
- stack 1: 0x21212121
- stack 0: 0x20
1416	 199	MSTORE		 	  ;; # store to x1
- stack 0: 0x530
1417	 19A	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1418	 19C	ADD		 	 
- stack 0: 0x534
1419	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1420	 19E	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xA0000E01FB848400DC000F00F60154017112120184012100A0001F014B0000
1421	 19F	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0xA0000E01FB848400DC000F00F60154017112120184012100A0001F014B0000
- stack 0: 0xF0
1422	 1A1	SHR		 	 
- stack 1: 0x534
- stack 0: 0xA0
1423	 1A2	JUMP		 	 
- stack 0: 0x534
1424	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x534
1425	 A1	PUSH2	0020	 	 
- stack 1: 0x534
- stack 0: 0x20
1426	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x534
- stack 0: 0x21212121
1427	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x534
- stack 1: 0x21212121
- stack 0: 0x534
1428	 A6	MLOAD		 	 
- stack 2: 0x534
- stack 1: 0x21212121
- stack 0: 0xA0000E01FB848400DC000F00F60154017112120184012100A0001F014B0000
1429	 A7	PUSH1	E0	 	 
- stack 3: 0x534
- stack 2: 0x21212121
- stack 1: 0xA0000E01FB848400DC000F00F60154017112120184012100A0001F014B0000
- stack 0: 0xE0
1430	 A9	SHR		 	 
- stack 2: 0x534
- stack 1: 0x21212121
- stack 0: 0xA0000E
1431	 AA	PUSH2	FFFF	 	 
- stack 3: 0x534
- stack 2: 0x21212121
- stack 1: 0xA0000E
- stack 0: 0xFFFF
1432	 AD	AND		 	 
- stack 2: 0x534
- stack 1: 0x21212121
- stack 0: 0xE
1433	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x534
- stack 0: 0x84848484000
1434	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x534
- stack 1: 0x84848484000
- stack 0: 0xFFFFFFFF
1435	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x534
- stack 0: 0x48484000
1436	 B5	PUSH2	0060	 	 
- stack 2: 0x534
- stack 1: 0x48484000
- stack 0: 0x60
1437	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x534
1438	 B9	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1439	 BB	ADD		 	 
- stack 0: 0x538
1440	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1441	 BD	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x1FB848400DC000F00F60154017112120184012100A0001F014B000000DC0010
1442	 BE	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x1FB848400DC000F00F60154017112120184012100A0001F014B000000DC0010
- stack 0: 0xF0
1443	 C0	SHR		 	 
- stack 1: 0x538
- stack 0: 0x1FB
1444	 C1	JUMP		 	 
- stack 0: 0x538
1445	 1FB	JUMPDEST		 ;; __riscvimpl_LUI_48484eb7	  ;; # instr: lui t4,0x48484(ignore imm)
- stack 0: 0x538
1446	 1FC	PUSH4	48484000	 	 
- stack 1: 0x538
- stack 0: 0x48484000
1447	 201	PUSH2	03A0	 	 
- stack 2: 0x538
- stack 1: 0x48484000
- stack 0: 0x3A0
1448	 204	MSTORE		 	  ;; # store to x29
- stack 0: 0x538
1449	 205	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1450	 207	ADD		 	 
- stack 0: 0x53C
1451	 208	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1452	 209	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xDC000F00F60154017112120184012100A0001F014B000000DC001000F6013C
1453	 20A	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0xDC000F00F60154017112120184012100A0001F014B000000DC001000F6013C
- stack 0: 0xF0
1454	 20C	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xDC
1455	 20D	JUMP		 	 
- stack 0: 0x53C
1456	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x53C
1457	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1458	 DE	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xDC000F00F60154017112120184012100A0001F014B000000DC001000F6013C
1459	 DF	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0xDC000F00F60154017112120184012100A0001F014B000000DC001000F6013C
- stack 0: 0xE0
1460	 E1	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xDC000F
1461	 E2	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0xDC000F
- stack 0: 0xFFFF
1462	 E5	AND		 	 
- stack 1: 0x53C
- stack 0: 0xF
1463	 E6	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0xF
- stack 0: 0x1
1464	 E8	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0xF
1465	 E9	PUSH2	0380	 	 
- stack 2: 0x53C
- stack 1: 0xF
- stack 0: 0x380
1466	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x53C
1467	 ED	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1468	 EF	ADD		 	 
- stack 0: 0x540
1469	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1470	 F1	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xF60154017112120184012100A0001F014B000000DC001000F6013C00860001
1471	 F2	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0xF60154017112120184012100A0001F014B000000DC001000F6013C00860001
- stack 0: 0xF0
1472	 F4	SHR		 	 
- stack 1: 0x540
- stack 0: 0xF6
1473	 F5	JUMP		 	 
- stack 0: 0x540
1474	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x540
1475	 F7	PUSH2	0060	 	 
- stack 1: 0x540
- stack 0: 0x60
1476	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x540
- stack 0: 0x48484000
1477	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x540
- stack 1: 0x48484000
- stack 0: 0xFFFFFFFF
1478	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x540
- stack 0: 0x48484000
1479	 101	PUSH2	03A0	 	 
- stack 2: 0x540
- stack 1: 0x48484000
- stack 0: 0x3A0
1480	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x540
- stack 1: 0x48484000
- stack 0: 0x48484000
1481	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x540
- stack 2: 0x48484000
- stack 1: 0x48484000
- stack 0: 0xFFFFFFFF
1482	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x540
- stack 1: 0x48484000
- stack 0: 0x48484000
1483	 10B	SUB		 	 
- stack 1: 0x540
- stack 0: 0x0
1484	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x540
- stack 1: 0x0
- stack 0: 0x114
1485	 10F	JUMPI		 	 
- stack 0: 0x540
1486	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x540
- stack 0: 0x12E
1487	 113	JUMP		 	 
- stack 0: 0x540
1488	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x540
1489	 12F	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1490	 131	ADD		 	 
- stack 0: 0x544
1491	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1492	 133	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x17112120184012100A0001F014B000000DC001000F6013C00860001020E0007
1493	 134	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x17112120184012100A0001F014B000000DC001000F6013C00860001020E0007
- stack 0: 0xF0
1494	 136	SHR		 	 
- stack 1: 0x544
- stack 0: 0x171
1495	 137	JUMP		 	 
- stack 0: 0x544
1496	 171	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x544
1497	 172	PUSH4	21212000	 	 
- stack 1: 0x544
- stack 0: 0x21212000
1498	 177	PUSH2	0020	 	 
- stack 2: 0x544
- stack 1: 0x21212000
- stack 0: 0x20
1499	 17A	MSTORE		 	  ;; # store to x1
- stack 0: 0x544
1500	 17B	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1501	 17D	ADD		 	 
- stack 0: 0x548
1502	 17E	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1503	 17F	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x184012100A0001F014B000000DC001000F6013C00860001020E000700C20080
1504	 180	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x184012100A0001F014B000000DC001000F6013C00860001020E000700C20080
- stack 0: 0xF0
1505	 182	SHR		 	 
- stack 1: 0x548
- stack 0: 0x184
1506	 183	JUMP		 	 
- stack 0: 0x548
1507	 184	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,289(ignore imm)
- stack 0: 0x548
1508	 185	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1509	 186	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x184012100A0001F014B000000DC001000F6013C00860001020E000700C20080
1510	 187	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x184012100A0001F014B000000DC001000F6013C00860001020E000700C20080
- stack 0: 0xE0
1511	 189	SHR		 	 
- stack 1: 0x548
- stack 0: 0x1840121
1512	 18A	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x1840121
- stack 0: 0xFFFF
1513	 18D	AND		 	 
- stack 1: 0x548
- stack 0: 0x121
1514	 18E	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x121
- stack 0: 0x1
1515	 190	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x121
1516	 191	PUSH2	0020	 	 
- stack 2: 0x548
- stack 1: 0x121
- stack 0: 0x20
1517	 194	MLOAD		 	  ;; # read from x1
- stack 2: 0x548
- stack 1: 0x121
- stack 0: 0x21212000
1518	 195	ADD		 	  ;; # ADDI 1
- stack 1: 0x548
- stack 0: 0x21212121
1519	 196	PUSH2	0020	 	 
- stack 2: 0x548
- stack 1: 0x21212121
- stack 0: 0x20
1520	 199	MSTORE		 	  ;; # store to x1
- stack 0: 0x548
1521	 19A	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1522	 19C	ADD		 	 
- stack 0: 0x54C
1523	 19D	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1524	 19E	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xA0001F014B000000DC001000F6013C00860001020E000700C2008000DC0011
1525	 19F	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xA0001F014B000000DC001000F6013C00860001020E000700C2008000DC0011
- stack 0: 0xF0
1526	 1A1	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xA0
1527	 1A2	JUMP		 	 
- stack 0: 0x54C
1528	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x54C
1529	 A1	PUSH2	0020	 	 
- stack 1: 0x54C
- stack 0: 0x20
1530	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x54C
- stack 0: 0x21212121
1531	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x54C
- stack 1: 0x21212121
- stack 0: 0x54C
1532	 A6	MLOAD		 	 
- stack 2: 0x54C
- stack 1: 0x21212121
- stack 0: 0xA0001F014B000000DC001000F6013C00860001020E000700C2008000DC0011
1533	 A7	PUSH1	E0	 	 
- stack 3: 0x54C
- stack 2: 0x21212121
- stack 1: 0xA0001F014B000000DC001000F6013C00860001020E000700C2008000DC0011
- stack 0: 0xE0
1534	 A9	SHR		 	 
- stack 2: 0x54C
- stack 1: 0x21212121
- stack 0: 0xA0001F
1535	 AA	PUSH2	FFFF	 	 
- stack 3: 0x54C
- stack 2: 0x21212121
- stack 1: 0xA0001F
- stack 0: 0xFFFF
1536	 AD	AND		 	 
- stack 2: 0x54C
- stack 1: 0x21212121
- stack 0: 0x1F
1537	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x54C
- stack 0: 0x1090909080000000
1538	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x54C
- stack 1: 0x1090909080000000
- stack 0: 0xFFFFFFFF
1539	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x54C
- stack 0: 0x80000000
1540	 B5	PUSH2	0060	 	 
- stack 2: 0x54C
- stack 1: 0x80000000
- stack 0: 0x60
1541	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x54C
1542	 B9	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1543	 BB	ADD		 	 
- stack 0: 0x550
1544	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1545	 BD	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x14B000000DC001000F6013C00860001020E000700C2008000DC001102300128
1546	 BE	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x14B000000DC001000F6013C00860001020E000700C2008000DC001102300128
- stack 0: 0xF0
1547	 C0	SHR		 	 
- stack 1: 0x550
- stack 0: 0x14B
1548	 C1	JUMP		 	 
- stack 0: 0x550
1549	 14B	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x550
1550	 14C	PUSH4	80000000	 	 
- stack 1: 0x550
- stack 0: 0x80000000
1551	 151	PUSH2	03A0	 	 
- stack 2: 0x550
- stack 1: 0x80000000
- stack 0: 0x3A0
1552	 154	MSTORE		 	  ;; # store to x29
- stack 0: 0x550
1553	 155	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1554	 157	ADD		 	 
- stack 0: 0x554
1555	 158	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1556	 159	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xDC001000F6013C00860001020E000700C2008000DC00110230012802720000
1557	 15A	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0xDC001000F6013C00860001020E000700C2008000DC00110230012802720000
- stack 0: 0xF0
1558	 15C	SHR		 	 
- stack 1: 0x554
- stack 0: 0xDC
1559	 15D	JUMP		 	 
- stack 0: 0x554
1560	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x554
1561	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1562	 DE	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xDC001000F6013C00860001020E000700C2008000DC00110230012802720000
1563	 DF	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0xDC001000F6013C00860001020E000700C2008000DC00110230012802720000
- stack 0: 0xE0
1564	 E1	SHR		 	 
- stack 1: 0x554
- stack 0: 0xDC0010
1565	 E2	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0xDC0010
- stack 0: 0xFFFF
1566	 E5	AND		 	 
- stack 1: 0x554
- stack 0: 0x10
1567	 E6	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x10
- stack 0: 0x1
1568	 E8	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x10
1569	 E9	PUSH2	0380	 	 
- stack 2: 0x554
- stack 1: 0x10
- stack 0: 0x380
1570	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x554
1571	 ED	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1572	 EF	ADD		 	 
- stack 0: 0x558
1573	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1574	 F1	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xF6013C00860001020E000700C2008000DC0011023001280272000000860001
1575	 F2	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xF6013C00860001020E000700C2008000DC0011023001280272000000860001
- stack 0: 0xF0
1576	 F4	SHR		 	 
- stack 1: 0x558
- stack 0: 0xF6
1577	 F5	JUMP		 	 
- stack 0: 0x558
1578	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x558
1579	 F7	PUSH2	0060	 	 
- stack 1: 0x558
- stack 0: 0x60
1580	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x558
- stack 0: 0x80000000
1581	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x558
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
1582	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x558
- stack 0: 0x80000000
1583	 101	PUSH2	03A0	 	 
- stack 2: 0x558
- stack 1: 0x80000000
- stack 0: 0x3A0
1584	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x558
- stack 1: 0x80000000
- stack 0: 0x80000000
1585	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x558
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
1586	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x558
- stack 1: 0x80000000
- stack 0: 0x80000000
1587	 10B	SUB		 	 
- stack 1: 0x558
- stack 0: 0x0
1588	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x114
1589	 10F	JUMPI		 	 
- stack 0: 0x558
1590	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x558
- stack 0: 0x12E
1591	 113	JUMP		 	 
- stack 0: 0x558
1592	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x558
1593	 12F	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1594	 131	ADD		 	 
- stack 0: 0x55C
1595	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1596	 133	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x860001020E000700C2008000DC001102300128027200000086000100A00007
1597	 134	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x860001020E000700C2008000DC001102300128027200000086000100A00007
- stack 0: 0xF0
1598	 136	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x86
1599	 137	JUMP		 	 
- stack 0: 0x55C
1600	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x55C
1601	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1602	 88	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x860001020E000700C2008000DC001102300128027200000086000100A00007
1603	 89	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x860001020E000700C2008000DC001102300128027200000086000100A00007
- stack 0: 0xE0
1604	 8B	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x860001
1605	 8C	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x860001
- stack 0: 0xFFFF
1606	 8F	AND		 	 
- stack 1: 0x55C
- stack 0: 0x1
1607	 90	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x1
1608	 92	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x1
1609	 93	PUSH2	0020	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x20
1610	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x55C
1611	 97	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1612	 99	ADD		 	 
- stack 0: 0x560
1613	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1614	 9B	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x20E000700C2008000DC001102300128027200000086000100A00007028C0000
1615	 9C	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x20E000700C2008000DC001102300128027200000086000100A00007028C0000
- stack 0: 0xF0
1616	 9E	SHR		 	 
- stack 1: 0x560
- stack 0: 0x20E
1617	 9F	JUMP		 	 
- stack 0: 0x560
1618	 20E	JUMPDEST		 ;; __riscvimpl_SLLI_1_1_0	  ;; # instr: slli ra,ra,7(ignore imm)
- stack 0: 0x560
1619	 20F	PUSH2	0020	 	 
- stack 1: 0x560
- stack 0: 0x20
1620	 212	MLOAD		 	  ;; # read from x1
- stack 1: 0x560
- stack 0: 0x1
1621	 213	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x560
1622	 214	MLOAD		 	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x20E000700C2008000DC001102300128027200000086000100A00007028C0000
1623	 215	PUSH1	E0	 	 
- stack 3: 0x560
- stack 2: 0x1
- stack 1: 0x20E000700C2008000DC001102300128027200000086000100A00007028C0000
- stack 0: 0xE0
1624	 217	SHR		 	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x20E0007
1625	 218	PUSH2	FFFF	 	 
- stack 3: 0x560
- stack 2: 0x1
- stack 1: 0x20E0007
- stack 0: 0xFFFF
1626	 21B	AND		 	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x7
1627	 21C	SHL		 	  ;; # SLLI
- stack 1: 0x560
- stack 0: 0x80
1628	 21D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x560
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
1629	 222	AND		 	  ;; # mask to 32 bits
- stack 1: 0x560
- stack 0: 0x80
1630	 223	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0x80
- stack 0: 0x20
1631	 226	MSTORE		 	  ;; # store to x1
- stack 0: 0x560
1632	 227	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1633	 229	ADD		 	 
- stack 0: 0x564
1634	 22A	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1635	 22B	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xC2008000DC001102300128027200000086000100A00007028C000002AB0001
1636	 22C	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0xC2008000DC001102300128027200000086000100A00007028C000002AB0001
- stack 0: 0xF0
1637	 22E	SHR		 	 
- stack 1: 0x564
- stack 0: 0xC2
1638	 22F	JUMP		 	 
- stack 0: 0x564
1639	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x564
1640	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
1641	 C4	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xC2008000DC001102300128027200000086000100A00007028C000002AB0001
1642	 C5	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0xC2008000DC001102300128027200000086000100A00007028C000002AB0001
- stack 0: 0xE0
1643	 C7	SHR		 	 
- stack 1: 0x564
- stack 0: 0xC20080
1644	 C8	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0xC20080
- stack 0: 0xFFFF
1645	 CB	AND		 	 
- stack 1: 0x564
- stack 0: 0x80
1646	 CC	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0x80
- stack 0: 0x1
1647	 CE	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0x80
1648	 CF	PUSH2	03A0	 	 
- stack 2: 0x564
- stack 1: 0x80
- stack 0: 0x3A0
1649	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x564
1650	 D3	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1651	 D5	ADD		 	 
- stack 0: 0x568
1652	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1653	 D7	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xDC001102300128027200000086000100A00007028C000002AB000102CA0002
1654	 D8	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0xDC001102300128027200000086000100A00007028C000002AB000102CA0002
- stack 0: 0xF0
1655	 DA	SHR		 	 
- stack 1: 0x568
- stack 0: 0xDC
1656	 DB	JUMP		 	 
- stack 0: 0x568
1657	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x568
1658	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1659	 DE	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xDC001102300128027200000086000100A00007028C000002AB000102CA0002
1660	 DF	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0xDC001102300128027200000086000100A00007028C000002AB000102CA0002
- stack 0: 0xE0
1661	 E1	SHR		 	 
- stack 1: 0x568
- stack 0: 0xDC0011
1662	 E2	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0xDC0011
- stack 0: 0xFFFF
1663	 E5	AND		 	 
- stack 1: 0x568
- stack 0: 0x11
1664	 E6	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x11
- stack 0: 0x1
1665	 E8	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x11
1666	 E9	PUSH2	0380	 	 
- stack 2: 0x568
- stack 1: 0x11
- stack 0: 0x380
1667	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x568
1668	 ED	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1669	 EF	ADD		 	 
- stack 0: 0x56C
1670	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1671	 F1	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x2300128027200000086000100A00007028C000002AB000102CA000202E4FFEC
1672	 F2	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x2300128027200000086000100A00007028C000002AB000102CA000202E4FFEC
- stack 0: 0xF0
1673	 F4	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x230
1674	 F5	JUMP		 	 
- stack 0: 0x56C
1675	 230	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,128(ignore imm)
- stack 0: 0x56C
1676	 231	PUSH2	0020	 	 
- stack 1: 0x56C
- stack 0: 0x20
1677	 234	MLOAD		 	  ;; # read from x1
- stack 1: 0x56C
- stack 0: 0x80
1678	 235	PUSH4	FFFFFFFF	 	 
- stack 2: 0x56C
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
1679	 23A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x56C
- stack 0: 0x80
1680	 23B	PUSH2	03A0	 	 
- stack 2: 0x56C
- stack 1: 0x80
- stack 0: 0x3A0
1681	 23E	MLOAD		 	  ;; # read from x29
- stack 2: 0x56C
- stack 1: 0x80
- stack 0: 0x80
1682	 23F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x56C
- stack 2: 0x80
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
1683	 244	AND		 	  ;; # mask to 32 bits
- stack 2: 0x56C
- stack 1: 0x80
- stack 0: 0x80
1684	 245	SUB		 	 
- stack 1: 0x56C
- stack 0: 0x0
1685	 246	PUSH2	024E	 ;; _neq_dc8ae426bddc8ee88af486b5927fd02eb1e138f5ee6e00243f4bd1905e2da377	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x24E
1686	 249	JUMPI		 	 
- stack 0: 0x56C
1687	 24A	PUSH2	0268	 ;; _neq_after_dc8ae426bddc8ee88af486b5927fd02eb1e138f5ee6e00243f4bd1905e2da377	 
- stack 1: 0x56C
- stack 0: 0x268
1688	 24D	JUMP		 	 
- stack 0: 0x56C
1689	 268	JUMPDEST		 ;; _neq_after_dc8ae426bddc8ee88af486b5927fd02eb1e138f5ee6e00243f4bd1905e2da377	 
- stack 0: 0x56C
1690	 269	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1691	 26B	ADD		 	 
- stack 0: 0x570
1692	 26C	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1693	 26D	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x27200000086000100A00007028C000002AB000102CA000202E4FFEC00C20080
1694	 26E	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x27200000086000100A00007028C000002AB000102CA000202E4FFEC00C20080
- stack 0: 0xF0
1695	 270	SHR		 	 
- stack 1: 0x570
- stack 0: 0x272
1696	 271	JUMP		 	 
- stack 0: 0x570
1697	 272	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x570
1698	 273	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
1699	 274	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x27200000086000100A00007028C000002AB000102CA000202E4FFEC00C20080
1700	 275	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x27200000086000100A00007028C000002AB000102CA000202E4FFEC00C20080
- stack 0: 0xE0
1701	 277	SHR		 	 
- stack 1: 0x570
- stack 0: 0x2720000
1702	 278	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x2720000
- stack 0: 0xFFFF
1703	 27B	AND		 	 
- stack 1: 0x570
- stack 0: 0x0
1704	 27C	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x1
1705	 27E	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x0
1706	 27F	PUSH2	0080	 	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x80
1707	 282	MSTORE		 	  ;; # store to x4
- stack 0: 0x570
1708	 283	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1709	 285	ADD		 	 
- stack 0: 0x574
1710	 286	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1711	 287	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x86000100A00007028C000002AB000102CA000202E4FFEC00C2008000DC0012
1712	 288	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x86000100A00007028C000002AB000102CA000202E4FFEC00C2008000DC0012
- stack 0: 0xF0
1713	 28A	SHR		 	 
- stack 1: 0x574
- stack 0: 0x86
1714	 28B	JUMP		 	 
- stack 0: 0x574
1715	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x574
1716	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1717	 88	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x86000100A00007028C000002AB000102CA000202E4FFEC00C2008000DC0012
1718	 89	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x86000100A00007028C000002AB000102CA000202E4FFEC00C2008000DC0012
- stack 0: 0xE0
1719	 8B	SHR		 	 
- stack 1: 0x574
- stack 0: 0x860001
1720	 8C	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x860001
- stack 0: 0xFFFF
1721	 8F	AND		 	 
- stack 1: 0x574
- stack 0: 0x1
1722	 90	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x1
1723	 92	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x1
1724	 93	PUSH2	0020	 	 
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x20
1725	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x574
1726	 97	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1727	 99	ADD		 	 
- stack 0: 0x578
1728	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1729	 9B	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xA00007028C000002AB000102CA000202E4FFEC00C2008000DC001203260100
1730	 9C	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0xA00007028C000002AB000102CA000202E4FFEC00C2008000DC001203260100
- stack 0: 0xF0
1731	 9E	SHR		 	 
- stack 1: 0x578
- stack 0: 0xA0
1732	 9F	JUMP		 	 
- stack 0: 0x578
1733	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x578
1734	 A1	PUSH2	0020	 	 
- stack 1: 0x578
- stack 0: 0x20
1735	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x578
- stack 0: 0x1
1736	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x578
1737	 A6	MLOAD		 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0xA00007028C000002AB000102CA000202E4FFEC00C2008000DC001203260100
1738	 A7	PUSH1	E0	 	 
- stack 3: 0x578
- stack 2: 0x1
- stack 1: 0xA00007028C000002AB000102CA000202E4FFEC00C2008000DC001203260100
- stack 0: 0xE0
1739	 A9	SHR		 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0xA00007
1740	 AA	PUSH2	FFFF	 	 
- stack 3: 0x578
- stack 2: 0x1
- stack 1: 0xA00007
- stack 0: 0xFFFF
1741	 AD	AND		 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x7
1742	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x578
- stack 0: 0x80
1743	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x578
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
1744	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x578
- stack 0: 0x80
1745	 B5	PUSH2	0060	 	 
- stack 2: 0x578
- stack 1: 0x80
- stack 0: 0x60
1746	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x578
1747	 B9	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1748	 BB	ADD		 	 
- stack 0: 0x57C
1749	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1750	 BD	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x28C000002AB000102CA000202E4FFEC00C2008000DC00120326010002720000
1751	 BE	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x28C000002AB000102CA000202E4FFEC00C2008000DC00120326010002720000
- stack 0: 0xF0
1752	 C0	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x28C
1753	 C1	JUMP		 	 
- stack 0: 0x57C
1754	 28C	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x57C
1755	 28D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
1756	 28E	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x28C000002AB000102CA000202E4FFEC00C2008000DC00120326010002720000
1757	 28F	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x28C000002AB000102CA000202E4FFEC00C2008000DC00120326010002720000
- stack 0: 0xE0
1758	 291	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x28C0000
1759	 292	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x28C0000
- stack 0: 0xFFFF
1760	 295	AND		 	 
- stack 1: 0x57C
- stack 0: 0x0
1761	 296	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x1
1762	 298	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x0
1763	 299	PUSH2	0060	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x60
1764	 29C	MLOAD		 	  ;; # read from x3
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x80
1765	 29D	ADD		 	  ;; # ADDI 3
- stack 1: 0x57C
- stack 0: 0x80
1766	 29E	PUSH2	00C0	 	 
- stack 2: 0x57C
- stack 1: 0x80
- stack 0: 0xC0
1767	 2A1	MSTORE		 	  ;; # store to x6
- stack 0: 0x57C
1768	 2A2	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1769	 2A4	ADD		 	 
- stack 0: 0x580
1770	 2A5	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1771	 2A6	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x2AB000102CA000202E4FFEC00C2008000DC0012032601000272000000860001
1772	 2A7	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x2AB000102CA000202E4FFEC00C2008000DC0012032601000272000000860001
- stack 0: 0xF0
1773	 2A9	SHR		 	 
- stack 1: 0x580
- stack 0: 0x2AB
1774	 2AA	JUMP		 	 
- stack 0: 0x580
1775	 2AB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x580
1776	 2AC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
1777	 2AD	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x2AB000102CA000202E4FFEC00C2008000DC0012032601000272000000860001
1778	 2AE	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x2AB000102CA000202E4FFEC00C2008000DC0012032601000272000000860001
- stack 0: 0xE0
1779	 2B0	SHR		 	 
- stack 1: 0x580
- stack 0: 0x2AB0001
1780	 2B1	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x2AB0001
- stack 0: 0xFFFF
1781	 2B4	AND		 	 
- stack 1: 0x580
- stack 0: 0x1
1782	 2B5	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x1
1783	 2B7	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x1
1784	 2B8	PUSH2	0080	 	 
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x80
1785	 2BB	MLOAD		 	  ;; # read from x4
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x0
1786	 2BC	ADD		 	  ;; # ADDI 4
- stack 1: 0x580
- stack 0: 0x1
1787	 2BD	PUSH2	0080	 	 
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x80
1788	 2C0	MSTORE		 	  ;; # store to x4
- stack 0: 0x580
1789	 2C1	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1790	 2C3	ADD		 	 
- stack 0: 0x584
1791	 2C4	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1792	 2C5	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x2CA000202E4FFEC00C2008000DC001203260100027200000086000100A0000E
1793	 2C6	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x2CA000202E4FFEC00C2008000DC001203260100027200000086000100A0000E
- stack 0: 0xF0
1794	 2C8	SHR		 	 
- stack 1: 0x584
- stack 0: 0x2CA
1795	 2C9	JUMP		 	 
- stack 0: 0x584
1796	 2CA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x584
1797	 2CB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
1798	 2CC	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x2CA000202E4FFEC00C2008000DC001203260100027200000086000100A0000E
1799	 2CD	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x2CA000202E4FFEC00C2008000DC001203260100027200000086000100A0000E
- stack 0: 0xE0
1800	 2CF	SHR		 	 
- stack 1: 0x584
- stack 0: 0x2CA0002
1801	 2D0	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x2CA0002
- stack 0: 0xFFFF
1802	 2D3	AND		 	 
- stack 1: 0x584
- stack 0: 0x2
1803	 2D4	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x2
- stack 0: 0x1
1804	 2D6	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x2
1805	 2D7	PUSH2	00A0	 	 
- stack 2: 0x584
- stack 1: 0x2
- stack 0: 0xA0
1806	 2DA	MSTORE		 	  ;; # store to x5
- stack 0: 0x584
1807	 2DB	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1808	 2DD	ADD		 	 
- stack 0: 0x588
1809	 2DE	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1810	 2DF	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x2E4FFEC00C2008000DC001203260100027200000086000100A0000E03680000
1811	 2E0	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x2E4FFEC00C2008000DC001203260100027200000086000100A0000E03680000
- stack 0: 0xF0
1812	 2E2	SHR		 	 
- stack 1: 0x588
- stack 0: 0x2E4
1813	 2E3	JUMP		 	 
- stack 0: 0x588
1814	 2E4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x588
1815	 2E5	PUSH2	0080	 	 
- stack 1: 0x588
- stack 0: 0x80
1816	 2E8	MLOAD		 	  ;; # read from x4
- stack 1: 0x588
- stack 0: 0x1
1817	 2E9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1818	 2EE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0x1
1819	 2EF	PUSH2	00A0	 	 
- stack 2: 0x588
- stack 1: 0x1
- stack 0: 0xA0
1820	 2F2	MLOAD		 	  ;; # read from x5
- stack 2: 0x588
- stack 1: 0x1
- stack 0: 0x2
1821	 2F3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x588
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1822	 2F8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x588
- stack 1: 0x1
- stack 0: 0x2
1823	 2F9	SUB		 	 
- stack 1: 0x588
- stack 0: 0x1
1824	 2FA	PUSH2	0302	 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 2: 0x588
- stack 1: 0x1
- stack 0: 0x302
1825	 2FD	JUMPI		 	 
- stack 0: 0x588
1826	 302	JUMPDEST		 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 0: 0x588
1827	 303	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
1828	 304	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x2E4FFEC00C2008000DC001203260100027200000086000100A0000E03680000
1829	 305	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x2E4FFEC00C2008000DC001203260100027200000086000100A0000E03680000
- stack 0: 0xE0
1830	 307	SHR		 	 
- stack 1: 0x588
- stack 0: 0x2E4FFEC
1831	 308	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x2E4FFEC
- stack 0: 0xFFFF
1832	 30B	AND		 	 
- stack 1: 0x588
- stack 0: 0xFFEC
1833	 30C	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0xFFEC
- stack 0: 0x1
1834	 30E	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
1835	 30F	ADD		 	 
- stack 0: 0x574
1836	 310	PUSH4	FFFFFFFF	 	 
- stack 1: 0x574
- stack 0: 0xFFFFFFFF
1837	 315	AND		 	  ;; # mask to 32 bits
- stack 0: 0x574
1838	 316	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1839	 317	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x86000100A00007028C000002AB000102CA000202E4FFEC00C2008000DC0012
1840	 318	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x86000100A00007028C000002AB000102CA000202E4FFEC00C2008000DC0012
- stack 0: 0xF0
1841	 31A	SHR		 	 
- stack 1: 0x574
- stack 0: 0x86
1842	 31B	JUMP		 	 
- stack 0: 0x574
1843	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x574
1844	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1845	 88	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x86000100A00007028C000002AB000102CA000202E4FFEC00C2008000DC0012
1846	 89	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x86000100A00007028C000002AB000102CA000202E4FFEC00C2008000DC0012
- stack 0: 0xE0
1847	 8B	SHR		 	 
- stack 1: 0x574
- stack 0: 0x860001
1848	 8C	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x860001
- stack 0: 0xFFFF
1849	 8F	AND		 	 
- stack 1: 0x574
- stack 0: 0x1
1850	 90	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x1
1851	 92	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x1
1852	 93	PUSH2	0020	 	 
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x20
1853	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x574
1854	 97	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1855	 99	ADD		 	 
- stack 0: 0x578
1856	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1857	 9B	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xA00007028C000002AB000102CA000202E4FFEC00C2008000DC001203260100
1858	 9C	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0xA00007028C000002AB000102CA000202E4FFEC00C2008000DC001203260100
- stack 0: 0xF0
1859	 9E	SHR		 	 
- stack 1: 0x578
- stack 0: 0xA0
1860	 9F	JUMP		 	 
- stack 0: 0x578
1861	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x578
1862	 A1	PUSH2	0020	 	 
- stack 1: 0x578
- stack 0: 0x20
1863	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x578
- stack 0: 0x1
1864	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x578
1865	 A6	MLOAD		 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0xA00007028C000002AB000102CA000202E4FFEC00C2008000DC001203260100
1866	 A7	PUSH1	E0	 	 
- stack 3: 0x578
- stack 2: 0x1
- stack 1: 0xA00007028C000002AB000102CA000202E4FFEC00C2008000DC001203260100
- stack 0: 0xE0
1867	 A9	SHR		 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0xA00007
1868	 AA	PUSH2	FFFF	 	 
- stack 3: 0x578
- stack 2: 0x1
- stack 1: 0xA00007
- stack 0: 0xFFFF
1869	 AD	AND		 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x7
1870	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x578
- stack 0: 0x80
1871	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x578
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
1872	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x578
- stack 0: 0x80
1873	 B5	PUSH2	0060	 	 
- stack 2: 0x578
- stack 1: 0x80
- stack 0: 0x60
1874	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x578
1875	 B9	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1876	 BB	ADD		 	 
- stack 0: 0x57C
1877	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1878	 BD	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x28C000002AB000102CA000202E4FFEC00C2008000DC00120326010002720000
1879	 BE	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x28C000002AB000102CA000202E4FFEC00C2008000DC00120326010002720000
- stack 0: 0xF0
1880	 C0	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x28C
1881	 C1	JUMP		 	 
- stack 0: 0x57C
1882	 28C	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x57C
1883	 28D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
1884	 28E	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x28C000002AB000102CA000202E4FFEC00C2008000DC00120326010002720000
1885	 28F	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x28C000002AB000102CA000202E4FFEC00C2008000DC00120326010002720000
- stack 0: 0xE0
1886	 291	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x28C0000
1887	 292	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x28C0000
- stack 0: 0xFFFF
1888	 295	AND		 	 
- stack 1: 0x57C
- stack 0: 0x0
1889	 296	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x1
1890	 298	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x0
1891	 299	PUSH2	0060	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x60
1892	 29C	MLOAD		 	  ;; # read from x3
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x80
1893	 29D	ADD		 	  ;; # ADDI 3
- stack 1: 0x57C
- stack 0: 0x80
1894	 29E	PUSH2	00C0	 	 
- stack 2: 0x57C
- stack 1: 0x80
- stack 0: 0xC0
1895	 2A1	MSTORE		 	  ;; # store to x6
- stack 0: 0x57C
1896	 2A2	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1897	 2A4	ADD		 	 
- stack 0: 0x580
1898	 2A5	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1899	 2A6	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x2AB000102CA000202E4FFEC00C2008000DC0012032601000272000000860001
1900	 2A7	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x2AB000102CA000202E4FFEC00C2008000DC0012032601000272000000860001
- stack 0: 0xF0
1901	 2A9	SHR		 	 
- stack 1: 0x580
- stack 0: 0x2AB
1902	 2AA	JUMP		 	 
- stack 0: 0x580
1903	 2AB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x580
1904	 2AC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
1905	 2AD	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x2AB000102CA000202E4FFEC00C2008000DC0012032601000272000000860001
1906	 2AE	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x2AB000102CA000202E4FFEC00C2008000DC0012032601000272000000860001
- stack 0: 0xE0
1907	 2B0	SHR		 	 
- stack 1: 0x580
- stack 0: 0x2AB0001
1908	 2B1	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x2AB0001
- stack 0: 0xFFFF
1909	 2B4	AND		 	 
- stack 1: 0x580
- stack 0: 0x1
1910	 2B5	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x1
1911	 2B7	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x1
1912	 2B8	PUSH2	0080	 	 
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x80
1913	 2BB	MLOAD		 	  ;; # read from x4
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x1
1914	 2BC	ADD		 	  ;; # ADDI 4
- stack 1: 0x580
- stack 0: 0x2
1915	 2BD	PUSH2	0080	 	 
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0x80
1916	 2C0	MSTORE		 	  ;; # store to x4
- stack 0: 0x580
1917	 2C1	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1918	 2C3	ADD		 	 
- stack 0: 0x584
1919	 2C4	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1920	 2C5	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x2CA000202E4FFEC00C2008000DC001203260100027200000086000100A0000E
1921	 2C6	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x2CA000202E4FFEC00C2008000DC001203260100027200000086000100A0000E
- stack 0: 0xF0
1922	 2C8	SHR		 	 
- stack 1: 0x584
- stack 0: 0x2CA
1923	 2C9	JUMP		 	 
- stack 0: 0x584
1924	 2CA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x584
1925	 2CB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
1926	 2CC	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x2CA000202E4FFEC00C2008000DC001203260100027200000086000100A0000E
1927	 2CD	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x2CA000202E4FFEC00C2008000DC001203260100027200000086000100A0000E
- stack 0: 0xE0
1928	 2CF	SHR		 	 
- stack 1: 0x584
- stack 0: 0x2CA0002
1929	 2D0	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x2CA0002
- stack 0: 0xFFFF
1930	 2D3	AND		 	 
- stack 1: 0x584
- stack 0: 0x2
1931	 2D4	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x2
- stack 0: 0x1
1932	 2D6	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x2
1933	 2D7	PUSH2	00A0	 	 
- stack 2: 0x584
- stack 1: 0x2
- stack 0: 0xA0
1934	 2DA	MSTORE		 	  ;; # store to x5
- stack 0: 0x584
1935	 2DB	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1936	 2DD	ADD		 	 
- stack 0: 0x588
1937	 2DE	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1938	 2DF	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x2E4FFEC00C2008000DC001203260100027200000086000100A0000E03680000
1939	 2E0	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x2E4FFEC00C2008000DC001203260100027200000086000100A0000E03680000
- stack 0: 0xF0
1940	 2E2	SHR		 	 
- stack 1: 0x588
- stack 0: 0x2E4
1941	 2E3	JUMP		 	 
- stack 0: 0x588
1942	 2E4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x588
1943	 2E5	PUSH2	0080	 	 
- stack 1: 0x588
- stack 0: 0x80
1944	 2E8	MLOAD		 	  ;; # read from x4
- stack 1: 0x588
- stack 0: 0x2
1945	 2E9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1946	 2EE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0x2
1947	 2EF	PUSH2	00A0	 	 
- stack 2: 0x588
- stack 1: 0x2
- stack 0: 0xA0
1948	 2F2	MLOAD		 	  ;; # read from x5
- stack 2: 0x588
- stack 1: 0x2
- stack 0: 0x2
1949	 2F3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x588
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1950	 2F8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x588
- stack 1: 0x2
- stack 0: 0x2
1951	 2F9	SUB		 	 
- stack 1: 0x588
- stack 0: 0x0
1952	 2FA	PUSH2	0302	 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 2: 0x588
- stack 1: 0x0
- stack 0: 0x302
1953	 2FD	JUMPI		 	 
- stack 0: 0x588
1954	 2FE	PUSH2	031C	 ;; _neq_after_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 1: 0x588
- stack 0: 0x31C
1955	 301	JUMP		 	 
- stack 0: 0x588
1956	 31C	JUMPDEST		 ;; _neq_after_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 0: 0x588
1957	 31D	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
1958	 31F	ADD		 	 
- stack 0: 0x58C
1959	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
1960	 321	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xC2008000DC001203260100027200000086000100A0000E03680000028C0000
1961	 322	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0xC2008000DC001203260100027200000086000100A0000E03680000028C0000
- stack 0: 0xF0
1962	 324	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xC2
1963	 325	JUMP		 	 
- stack 0: 0x58C
1964	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x58C
1965	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
1966	 C4	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xC2008000DC001203260100027200000086000100A0000E03680000028C0000
1967	 C5	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0xC2008000DC001203260100027200000086000100A0000E03680000028C0000
- stack 0: 0xE0
1968	 C7	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xC20080
1969	 C8	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0xC20080
- stack 0: 0xFFFF
1970	 CB	AND		 	 
- stack 1: 0x58C
- stack 0: 0x80
1971	 CC	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x80
- stack 0: 0x1
1972	 CE	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x80
1973	 CF	PUSH2	03A0	 	 
- stack 2: 0x58C
- stack 1: 0x80
- stack 0: 0x3A0
1974	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x58C
1975	 D3	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
1976	 D5	ADD		 	 
- stack 0: 0x590
1977	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
1978	 D7	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0xDC001203260100027200000086000100A0000E03680000028C000002AB0001
1979	 D8	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0xDC001203260100027200000086000100A0000E03680000028C000002AB0001
- stack 0: 0xF0
1980	 DA	SHR		 	 
- stack 1: 0x590
- stack 0: 0xDC
1981	 DB	JUMP		 	 
- stack 0: 0x590
1982	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x590
1983	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
1984	 DE	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0xDC001203260100027200000086000100A0000E03680000028C000002AB0001
1985	 DF	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0xDC001203260100027200000086000100A0000E03680000028C000002AB0001
- stack 0: 0xE0
1986	 E1	SHR		 	 
- stack 1: 0x590
- stack 0: 0xDC0012
1987	 E2	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0xDC0012
- stack 0: 0xFFFF
1988	 E5	AND		 	 
- stack 1: 0x590
- stack 0: 0x12
1989	 E6	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x12
- stack 0: 0x1
1990	 E8	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x12
1991	 E9	PUSH2	0380	 	 
- stack 2: 0x590
- stack 1: 0x12
- stack 0: 0x380
1992	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x590
1993	 ED	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
1994	 EF	ADD		 	 
- stack 0: 0x594
1995	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
1996	 F1	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x3260100027200000086000100A0000E03680000028C000002AB000102CA0002
1997	 F2	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x3260100027200000086000100A0000E03680000028C000002AB000102CA0002
- stack 0: 0xF0
1998	 F4	SHR		 	 
- stack 1: 0x594
- stack 0: 0x326
1999	 F5	JUMP		 	 
- stack 0: 0x594
2000	 326	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,100(ignore imm)
- stack 0: 0x594
2001	 327	PUSH2	00C0	 	 
- stack 1: 0x594
- stack 0: 0xC0
2002	 32A	MLOAD		 	  ;; # read from x6
- stack 1: 0x594
- stack 0: 0x80
2003	 32B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x594
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
2004	 330	AND		 	  ;; # mask to 32 bits
- stack 1: 0x594
- stack 0: 0x80
2005	 331	PUSH2	03A0	 	 
- stack 2: 0x594
- stack 1: 0x80
- stack 0: 0x3A0
2006	 334	MLOAD		 	  ;; # read from x29
- stack 2: 0x594
- stack 1: 0x80
- stack 0: 0x80
2007	 335	PUSH4	FFFFFFFF	 	 
- stack 3: 0x594
- stack 2: 0x80
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
2008	 33A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x594
- stack 1: 0x80
- stack 0: 0x80
2009	 33B	SUB		 	 
- stack 1: 0x594
- stack 0: 0x0
2010	 33C	PUSH2	0344	 ;; _neq_5478db8b2baa678cc15033f1ccd6bdb778a9003075c03558679d53919941c169	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x344
2011	 33F	JUMPI		 	 
- stack 0: 0x594
2012	 340	PUSH2	035E	 ;; _neq_after_5478db8b2baa678cc15033f1ccd6bdb778a9003075c03558679d53919941c169	 
- stack 1: 0x594
- stack 0: 0x35E
2013	 343	JUMP		 	 
- stack 0: 0x594
2014	 35E	JUMPDEST		 ;; _neq_after_5478db8b2baa678cc15033f1ccd6bdb778a9003075c03558679d53919941c169	 
- stack 0: 0x594
2015	 35F	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2016	 361	ADD		 	 
- stack 0: 0x598
2017	 362	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2018	 363	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x27200000086000100A0000E03680000028C000002AB000102CA000202E4FFE8
2019	 364	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x27200000086000100A0000E03680000028C000002AB000102CA000202E4FFE8
- stack 0: 0xF0
2020	 366	SHR		 	 
- stack 1: 0x598
- stack 0: 0x272
2021	 367	JUMP		 	 
- stack 0: 0x598
2022	 272	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x598
2023	 273	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2024	 274	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x27200000086000100A0000E03680000028C000002AB000102CA000202E4FFE8
2025	 275	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x27200000086000100A0000E03680000028C000002AB000102CA000202E4FFE8
- stack 0: 0xE0
2026	 277	SHR		 	 
- stack 1: 0x598
- stack 0: 0x2720000
2027	 278	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x2720000
- stack 0: 0xFFFF
2028	 27B	AND		 	 
- stack 1: 0x598
- stack 0: 0x0
2029	 27C	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x1
2030	 27E	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x0
2031	 27F	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x80
2032	 282	MSTORE		 	  ;; # store to x4
- stack 0: 0x598
2033	 283	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2034	 285	ADD		 	 
- stack 0: 0x59C
2035	 286	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2036	 287	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x86000100A0000E03680000028C000002AB000102CA000202E4FFE801380004
2037	 288	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x86000100A0000E03680000028C000002AB000102CA000202E4FFE801380004
- stack 0: 0xF0
2038	 28A	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x86
2039	 28B	JUMP		 	 
- stack 0: 0x59C
2040	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x59C
2041	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2042	 88	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x86000100A0000E03680000028C000002AB000102CA000202E4FFE801380004
2043	 89	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x86000100A0000E03680000028C000002AB000102CA000202E4FFE801380004
- stack 0: 0xE0
2044	 8B	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x860001
2045	 8C	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x860001
- stack 0: 0xFFFF
2046	 8F	AND		 	 
- stack 1: 0x59C
- stack 0: 0x1
2047	 90	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0x1
2048	 92	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x1
2049	 93	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0x20
2050	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x59C
2051	 97	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2052	 99	ADD		 	 
- stack 0: 0x5A0
2053	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2054	 9B	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xA0000E03680000028C000002AB000102CA000202E4FFE80138000400DC0013
2055	 9C	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0xA0000E03680000028C000002AB000102CA000202E4FFE80138000400DC0013
- stack 0: 0xF0
2056	 9E	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xA0
2057	 9F	JUMP		 	 
- stack 0: 0x5A0
2058	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x5A0
2059	 A1	PUSH2	0020	 	 
- stack 1: 0x5A0
- stack 0: 0x20
2060	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x5A0
- stack 0: 0x1
2061	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x5A0
2062	 A6	MLOAD		 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0xA0000E03680000028C000002AB000102CA000202E4FFE80138000400DC0013
2063	 A7	PUSH1	E0	 	 
- stack 3: 0x5A0
- stack 2: 0x1
- stack 1: 0xA0000E03680000028C000002AB000102CA000202E4FFE80138000400DC0013
- stack 0: 0xE0
2064	 A9	SHR		 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0xA0000E
2065	 AA	PUSH2	FFFF	 	 
- stack 3: 0x5A0
- stack 2: 0x1
- stack 1: 0xA0000E
- stack 0: 0xFFFF
2066	 AD	AND		 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0xE
2067	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x5A0
- stack 0: 0x4000
2068	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
2069	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A0
- stack 0: 0x4000
2070	 B5	PUSH2	0060	 	 
- stack 2: 0x5A0
- stack 1: 0x4000
- stack 0: 0x60
2071	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A0
2072	 B9	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2073	 BB	ADD		 	 
- stack 0: 0x5A4
2074	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2075	 BD	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x3680000028C000002AB000102CA000202E4FFE80138000400DC0013032600D4
2076	 BE	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x3680000028C000002AB000102CA000202E4FFE80138000400DC0013032600D4
- stack 0: 0xF0
2077	 C0	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x368
2078	 C1	JUMP		 	 
- stack 0: 0x5A4
2079	 368	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A4
2080	 369	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2081	 36A	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x3680000028C000002AB000102CA000202E4FFE80138000400DC0013032600D4
2082	 36B	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x3680000028C000002AB000102CA000202E4FFE80138000400DC0013032600D4
- stack 0: 0xE0
2083	 36D	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x3680000
2084	 36E	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x3680000
- stack 0: 0xFFFF
2085	 371	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2086	 372	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2087	 374	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2088	 375	POP		 	 
- stack 0: 0x5A4
2089	 376	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2090	 378	ADD		 	 
- stack 0: 0x5A8
2091	 379	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2092	 37A	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x28C000002AB000102CA000202E4FFE80138000400DC0013032600D402720000
2093	 37B	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x28C000002AB000102CA000202E4FFE80138000400DC0013032600D402720000
- stack 0: 0xF0
2094	 37D	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x28C
2095	 37E	JUMP		 	 
- stack 0: 0x5A8
2096	 28C	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5A8
2097	 28D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2098	 28E	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x28C000002AB000102CA000202E4FFE80138000400DC0013032600D402720000
2099	 28F	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x28C000002AB000102CA000202E4FFE80138000400DC0013032600D402720000
- stack 0: 0xE0
2100	 291	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x28C0000
2101	 292	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x28C0000
- stack 0: 0xFFFF
2102	 295	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2103	 296	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2104	 298	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2105	 299	PUSH2	0060	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x60
2106	 29C	MLOAD		 	  ;; # read from x3
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x4000
2107	 29D	ADD		 	  ;; # ADDI 3
- stack 1: 0x5A8
- stack 0: 0x4000
2108	 29E	PUSH2	00C0	 	 
- stack 2: 0x5A8
- stack 1: 0x4000
- stack 0: 0xC0
2109	 2A1	MSTORE		 	  ;; # store to x6
- stack 0: 0x5A8
2110	 2A2	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2111	 2A4	ADD		 	 
- stack 0: 0x5AC
2112	 2A5	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2113	 2A6	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x2AB000102CA000202E4FFE80138000400DC0013032600D40272000000860001
2114	 2A7	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x2AB000102CA000202E4FFE80138000400DC0013032600D40272000000860001
- stack 0: 0xF0
2115	 2A9	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2AB
2116	 2AA	JUMP		 	 
- stack 0: 0x5AC
2117	 2AB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5AC
2118	 2AC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2119	 2AD	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x2AB000102CA000202E4FFE80138000400DC0013032600D40272000000860001
2120	 2AE	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x2AB000102CA000202E4FFE80138000400DC0013032600D40272000000860001
- stack 0: 0xE0
2121	 2B0	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2AB0001
2122	 2B1	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x2AB0001
- stack 0: 0xFFFF
2123	 2B4	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x1
2124	 2B5	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x1
2125	 2B7	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x1
2126	 2B8	PUSH2	0080	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x80
2127	 2BB	MLOAD		 	  ;; # read from x4
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x0
2128	 2BC	ADD		 	  ;; # ADDI 4
- stack 1: 0x5AC
- stack 0: 0x1
2129	 2BD	PUSH2	0080	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x80
2130	 2C0	MSTORE		 	  ;; # store to x4
- stack 0: 0x5AC
2131	 2C1	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2132	 2C3	ADD		 	 
- stack 0: 0x5B0
2133	 2C4	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2134	 2C5	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x2CA000202E4FFE80138000400DC0013032600D4027200000086000100A0001F
2135	 2C6	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x2CA000202E4FFE80138000400DC0013032600D4027200000086000100A0001F
- stack 0: 0xF0
2136	 2C8	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x2CA
2137	 2C9	JUMP		 	 
- stack 0: 0x5B0
2138	 2CA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B0
2139	 2CB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2140	 2CC	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x2CA000202E4FFE80138000400DC0013032600D4027200000086000100A0001F
2141	 2CD	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x2CA000202E4FFE80138000400DC0013032600D4027200000086000100A0001F
- stack 0: 0xE0
2142	 2CF	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x2CA0002
2143	 2D0	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x2CA0002
- stack 0: 0xFFFF
2144	 2D3	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x2
2145	 2D4	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x2
- stack 0: 0x1
2146	 2D6	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x2
2147	 2D7	PUSH2	00A0	 	 
- stack 2: 0x5B0
- stack 1: 0x2
- stack 0: 0xA0
2148	 2DA	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B0
2149	 2DB	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2150	 2DD	ADD		 	 
- stack 0: 0x5B4
2151	 2DE	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2152	 2DF	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x2E4FFE80138000400DC0013032600D4027200000086000100A0001F03680000
2153	 2E0	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x2E4FFE80138000400DC0013032600D4027200000086000100A0001F03680000
- stack 0: 0xF0
2154	 2E2	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x2E4
2155	 2E3	JUMP		 	 
- stack 0: 0x5B4
2156	 2E4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5B4
2157	 2E5	PUSH2	0080	 	 
- stack 1: 0x5B4
- stack 0: 0x80
2158	 2E8	MLOAD		 	  ;; # read from x4
- stack 1: 0x5B4
- stack 0: 0x1
2159	 2E9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2160	 2EE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B4
- stack 0: 0x1
2161	 2EF	PUSH2	00A0	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0xA0
2162	 2F2	MLOAD		 	  ;; # read from x5
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x2
2163	 2F3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2164	 2F8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x2
2165	 2F9	SUB		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2166	 2FA	PUSH2	0302	 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x302
2167	 2FD	JUMPI		 	 
- stack 0: 0x5B4
2168	 302	JUMPDEST		 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 0: 0x5B4
2169	 303	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2170	 304	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x2E4FFE80138000400DC0013032600D4027200000086000100A0001F03680000
2171	 305	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x2E4FFE80138000400DC0013032600D4027200000086000100A0001F03680000
- stack 0: 0xE0
2172	 307	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x2E4FFE8
2173	 308	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x2E4FFE8
- stack 0: 0xFFFF
2174	 30B	AND		 	 
- stack 1: 0x5B4
- stack 0: 0xFFE8
2175	 30C	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0xFFE8
- stack 0: 0x1
2176	 30E	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2177	 30F	ADD		 	 
- stack 0: 0x59C
2178	 310	PUSH4	FFFFFFFF	 	 
- stack 1: 0x59C
- stack 0: 0xFFFFFFFF
2179	 315	AND		 	  ;; # mask to 32 bits
- stack 0: 0x59C
2180	 316	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2181	 317	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x86000100A0000E03680000028C000002AB000102CA000202E4FFE801380004
2182	 318	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x86000100A0000E03680000028C000002AB000102CA000202E4FFE801380004
- stack 0: 0xF0
2183	 31A	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x86
2184	 31B	JUMP		 	 
- stack 0: 0x59C
2185	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x59C
2186	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2187	 88	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x86000100A0000E03680000028C000002AB000102CA000202E4FFE801380004
2188	 89	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x86000100A0000E03680000028C000002AB000102CA000202E4FFE801380004
- stack 0: 0xE0
2189	 8B	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x860001
2190	 8C	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x860001
- stack 0: 0xFFFF
2191	 8F	AND		 	 
- stack 1: 0x59C
- stack 0: 0x1
2192	 90	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0x1
2193	 92	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x1
2194	 93	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0x1
- stack 0: 0x20
2195	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x59C
2196	 97	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2197	 99	ADD		 	 
- stack 0: 0x5A0
2198	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2199	 9B	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xA0000E03680000028C000002AB000102CA000202E4FFE80138000400DC0013
2200	 9C	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0xA0000E03680000028C000002AB000102CA000202E4FFE80138000400DC0013
- stack 0: 0xF0
2201	 9E	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xA0
2202	 9F	JUMP		 	 
- stack 0: 0x5A0
2203	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x5A0
2204	 A1	PUSH2	0020	 	 
- stack 1: 0x5A0
- stack 0: 0x20
2205	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x5A0
- stack 0: 0x1
2206	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x5A0
2207	 A6	MLOAD		 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0xA0000E03680000028C000002AB000102CA000202E4FFE80138000400DC0013
2208	 A7	PUSH1	E0	 	 
- stack 3: 0x5A0
- stack 2: 0x1
- stack 1: 0xA0000E03680000028C000002AB000102CA000202E4FFE80138000400DC0013
- stack 0: 0xE0
2209	 A9	SHR		 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0xA0000E
2210	 AA	PUSH2	FFFF	 	 
- stack 3: 0x5A0
- stack 2: 0x1
- stack 1: 0xA0000E
- stack 0: 0xFFFF
2211	 AD	AND		 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0xE
2212	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x5A0
- stack 0: 0x4000
2213	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
2214	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A0
- stack 0: 0x4000
2215	 B5	PUSH2	0060	 	 
- stack 2: 0x5A0
- stack 1: 0x4000
- stack 0: 0x60
2216	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A0
2217	 B9	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2218	 BB	ADD		 	 
- stack 0: 0x5A4
2219	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2220	 BD	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x3680000028C000002AB000102CA000202E4FFE80138000400DC0013032600D4
2221	 BE	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x3680000028C000002AB000102CA000202E4FFE80138000400DC0013032600D4
- stack 0: 0xF0
2222	 C0	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x368
2223	 C1	JUMP		 	 
- stack 0: 0x5A4
2224	 368	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A4
2225	 369	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2226	 36A	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x3680000028C000002AB000102CA000202E4FFE80138000400DC0013032600D4
2227	 36B	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x3680000028C000002AB000102CA000202E4FFE80138000400DC0013032600D4
- stack 0: 0xE0
2228	 36D	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x3680000
2229	 36E	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x3680000
- stack 0: 0xFFFF
2230	 371	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2231	 372	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2232	 374	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2233	 375	POP		 	 
- stack 0: 0x5A4
2234	 376	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2235	 378	ADD		 	 
- stack 0: 0x5A8
2236	 379	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2237	 37A	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x28C000002AB000102CA000202E4FFE80138000400DC0013032600D402720000
2238	 37B	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x28C000002AB000102CA000202E4FFE80138000400DC0013032600D402720000
- stack 0: 0xF0
2239	 37D	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x28C
2240	 37E	JUMP		 	 
- stack 0: 0x5A8
2241	 28C	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5A8
2242	 28D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2243	 28E	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x28C000002AB000102CA000202E4FFE80138000400DC0013032600D402720000
2244	 28F	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x28C000002AB000102CA000202E4FFE80138000400DC0013032600D402720000
- stack 0: 0xE0
2245	 291	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x28C0000
2246	 292	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x28C0000
- stack 0: 0xFFFF
2247	 295	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2248	 296	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2249	 298	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2250	 299	PUSH2	0060	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x60
2251	 29C	MLOAD		 	  ;; # read from x3
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x4000
2252	 29D	ADD		 	  ;; # ADDI 3
- stack 1: 0x5A8
- stack 0: 0x4000
2253	 29E	PUSH2	00C0	 	 
- stack 2: 0x5A8
- stack 1: 0x4000
- stack 0: 0xC0
2254	 2A1	MSTORE		 	  ;; # store to x6
- stack 0: 0x5A8
2255	 2A2	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2256	 2A4	ADD		 	 
- stack 0: 0x5AC
2257	 2A5	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2258	 2A6	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x2AB000102CA000202E4FFE80138000400DC0013032600D40272000000860001
2259	 2A7	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x2AB000102CA000202E4FFE80138000400DC0013032600D40272000000860001
- stack 0: 0xF0
2260	 2A9	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2AB
2261	 2AA	JUMP		 	 
- stack 0: 0x5AC
2262	 2AB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5AC
2263	 2AC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2264	 2AD	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x2AB000102CA000202E4FFE80138000400DC0013032600D40272000000860001
2265	 2AE	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x2AB000102CA000202E4FFE80138000400DC0013032600D40272000000860001
- stack 0: 0xE0
2266	 2B0	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2AB0001
2267	 2B1	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x2AB0001
- stack 0: 0xFFFF
2268	 2B4	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x1
2269	 2B5	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x1
2270	 2B7	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x1
2271	 2B8	PUSH2	0080	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x80
2272	 2BB	MLOAD		 	  ;; # read from x4
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x1
2273	 2BC	ADD		 	  ;; # ADDI 4
- stack 1: 0x5AC
- stack 0: 0x2
2274	 2BD	PUSH2	0080	 	 
- stack 2: 0x5AC
- stack 1: 0x2
- stack 0: 0x80
2275	 2C0	MSTORE		 	  ;; # store to x4
- stack 0: 0x5AC
2276	 2C1	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2277	 2C3	ADD		 	 
- stack 0: 0x5B0
2278	 2C4	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2279	 2C5	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x2CA000202E4FFE80138000400DC0013032600D4027200000086000100A0001F
2280	 2C6	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x2CA000202E4FFE80138000400DC0013032600D4027200000086000100A0001F
- stack 0: 0xF0
2281	 2C8	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x2CA
2282	 2C9	JUMP		 	 
- stack 0: 0x5B0
2283	 2CA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B0
2284	 2CB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2285	 2CC	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x2CA000202E4FFE80138000400DC0013032600D4027200000086000100A0001F
2286	 2CD	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x2CA000202E4FFE80138000400DC0013032600D4027200000086000100A0001F
- stack 0: 0xE0
2287	 2CF	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x2CA0002
2288	 2D0	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x2CA0002
- stack 0: 0xFFFF
2289	 2D3	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x2
2290	 2D4	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x2
- stack 0: 0x1
2291	 2D6	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x2
2292	 2D7	PUSH2	00A0	 	 
- stack 2: 0x5B0
- stack 1: 0x2
- stack 0: 0xA0
2293	 2DA	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B0
2294	 2DB	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2295	 2DD	ADD		 	 
- stack 0: 0x5B4
2296	 2DE	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2297	 2DF	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x2E4FFE80138000400DC0013032600D4027200000086000100A0001F03680000
2298	 2E0	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x2E4FFE80138000400DC0013032600D4027200000086000100A0001F03680000
- stack 0: 0xF0
2299	 2E2	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x2E4
2300	 2E3	JUMP		 	 
- stack 0: 0x5B4
2301	 2E4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5B4
2302	 2E5	PUSH2	0080	 	 
- stack 1: 0x5B4
- stack 0: 0x80
2303	 2E8	MLOAD		 	  ;; # read from x4
- stack 1: 0x5B4
- stack 0: 0x2
2304	 2E9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2305	 2EE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B4
- stack 0: 0x2
2306	 2EF	PUSH2	00A0	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0xA0
2307	 2F2	MLOAD		 	  ;; # read from x5
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0x2
2308	 2F3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2309	 2F8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0x2
2310	 2F9	SUB		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2311	 2FA	PUSH2	0302	 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x302
2312	 2FD	JUMPI		 	 
- stack 0: 0x5B4
2313	 2FE	PUSH2	031C	 ;; _neq_after_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 1: 0x5B4
- stack 0: 0x31C
2314	 301	JUMP		 	 
- stack 0: 0x5B4
2315	 31C	JUMPDEST		 ;; _neq_after_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 0: 0x5B4
2316	 31D	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2317	 31F	ADD		 	 
- stack 0: 0x5B8
2318	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2319	 321	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x138000400DC0013032600D4027200000086000100A0001F0368000003680000
2320	 322	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x138000400DC0013032600D4027200000086000100A0001F0368000003680000
- stack 0: 0xF0
2321	 324	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x138
2322	 325	JUMP		 	 
- stack 0: 0x5B8
2323	 138	JUMPDEST		 ;; __riscvimpl_LUI_4eb7	  ;; # instr: lui t4,0x4(ignore imm)
- stack 0: 0x5B8
2324	 139	PUSH4	00004000	 	 
- stack 1: 0x5B8
- stack 0: 0x4000
2325	 13E	PUSH2	03A0	 	 
- stack 2: 0x5B8
- stack 1: 0x4000
- stack 0: 0x3A0
2326	 141	MSTORE		 	  ;; # store to x29
- stack 0: 0x5B8
2327	 142	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2328	 144	ADD		 	 
- stack 0: 0x5BC
2329	 145	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2330	 146	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xDC0013032600D4027200000086000100A0001F0368000003680000028C0000
2331	 147	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0xDC0013032600D4027200000086000100A0001F0368000003680000028C0000
- stack 0: 0xF0
2332	 149	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xDC
2333	 14A	JUMP		 	 
- stack 0: 0x5BC
2334	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5BC
2335	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2336	 DE	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xDC0013032600D4027200000086000100A0001F0368000003680000028C0000
2337	 DF	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0xDC0013032600D4027200000086000100A0001F0368000003680000028C0000
- stack 0: 0xE0
2338	 E1	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xDC0013
2339	 E2	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0xDC0013
- stack 0: 0xFFFF
2340	 E5	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x13
2341	 E6	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x13
- stack 0: 0x1
2342	 E8	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x13
2343	 E9	PUSH2	0380	 	 
- stack 2: 0x5BC
- stack 1: 0x13
- stack 0: 0x380
2344	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x5BC
2345	 ED	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2346	 EF	ADD		 	 
- stack 0: 0x5C0
2347	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2348	 F1	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x32600D4027200000086000100A0001F0368000003680000028C000002AB0001
2349	 F2	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x32600D4027200000086000100A0001F0368000003680000028C000002AB0001
- stack 0: 0xF0
2350	 F4	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x326
2351	 F5	JUMP		 	 
- stack 0: 0x5C0
2352	 326	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,100(ignore imm)
- stack 0: 0x5C0
2353	 327	PUSH2	00C0	 	 
- stack 1: 0x5C0
- stack 0: 0xC0
2354	 32A	MLOAD		 	  ;; # read from x6
- stack 1: 0x5C0
- stack 0: 0x4000
2355	 32B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
2356	 330	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C0
- stack 0: 0x4000
2357	 331	PUSH2	03A0	 	 
- stack 2: 0x5C0
- stack 1: 0x4000
- stack 0: 0x3A0
2358	 334	MLOAD		 	  ;; # read from x29
- stack 2: 0x5C0
- stack 1: 0x4000
- stack 0: 0x4000
2359	 335	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5C0
- stack 2: 0x4000
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
2360	 33A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5C0
- stack 1: 0x4000
- stack 0: 0x4000
2361	 33B	SUB		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2362	 33C	PUSH2	0344	 ;; _neq_5478db8b2baa678cc15033f1ccd6bdb778a9003075c03558679d53919941c169	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x344
2363	 33F	JUMPI		 	 
- stack 0: 0x5C0
2364	 340	PUSH2	035E	 ;; _neq_after_5478db8b2baa678cc15033f1ccd6bdb778a9003075c03558679d53919941c169	 
- stack 1: 0x5C0
- stack 0: 0x35E
2365	 343	JUMP		 	 
- stack 0: 0x5C0
2366	 35E	JUMPDEST		 ;; _neq_after_5478db8b2baa678cc15033f1ccd6bdb778a9003075c03558679d53919941c169	 
- stack 0: 0x5C0
2367	 35F	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2368	 361	ADD		 	 
- stack 0: 0x5C4
2369	 362	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2370	 363	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x27200000086000100A0001F0368000003680000028C000002AB000102CA0002
2371	 364	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x27200000086000100A0001F0368000003680000028C000002AB000102CA0002
- stack 0: 0xF0
2372	 366	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x272
2373	 367	JUMP		 	 
- stack 0: 0x5C4
2374	 272	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5C4
2375	 273	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2376	 274	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x27200000086000100A0001F0368000003680000028C000002AB000102CA0002
2377	 275	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x27200000086000100A0001F0368000003680000028C000002AB000102CA0002
- stack 0: 0xE0
2378	 277	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x2720000
2379	 278	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x2720000
- stack 0: 0xFFFF
2380	 27B	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2381	 27C	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x1
2382	 27E	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2383	 27F	PUSH2	0080	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x80
2384	 282	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C4
2385	 283	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2386	 285	ADD		 	 
- stack 0: 0x5C8
2387	 286	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2388	 287	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x86000100A0001F0368000003680000028C000002AB000102CA000202E4FFE4
2389	 288	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x86000100A0001F0368000003680000028C000002AB000102CA000202E4FFE4
- stack 0: 0xF0
2390	 28A	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x86
2391	 28B	JUMP		 	 
- stack 0: 0x5C8
2392	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x5C8
2393	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2394	 88	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x86000100A0001F0368000003680000028C000002AB000102CA000202E4FFE4
2395	 89	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x86000100A0001F0368000003680000028C000002AB000102CA000202E4FFE4
- stack 0: 0xE0
2396	 8B	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x860001
2397	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x860001
- stack 0: 0xFFFF
2398	 8F	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x1
2399	 90	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x1
2400	 92	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x1
2401	 93	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x20
2402	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
2403	 97	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2404	 99	ADD		 	 
- stack 0: 0x5CC
2405	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2406	 9B	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xA0001F0368000003680000028C000002AB000102CA000202E4FFE4014B0000
2407	 9C	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xA0001F0368000003680000028C000002AB000102CA000202E4FFE4014B0000
- stack 0: 0xF0
2408	 9E	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xA0
2409	 9F	JUMP		 	 
- stack 0: 0x5CC
2410	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x5CC
2411	 A1	PUSH2	0020	 	 
- stack 1: 0x5CC
- stack 0: 0x20
2412	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x5CC
- stack 0: 0x1
2413	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x5CC
2414	 A6	MLOAD		 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0xA0001F0368000003680000028C000002AB000102CA000202E4FFE4014B0000
2415	 A7	PUSH1	E0	 	 
- stack 3: 0x5CC
- stack 2: 0x1
- stack 1: 0xA0001F0368000003680000028C000002AB000102CA000202E4FFE4014B0000
- stack 0: 0xE0
2416	 A9	SHR		 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0xA0001F
2417	 AA	PUSH2	FFFF	 	 
- stack 3: 0x5CC
- stack 2: 0x1
- stack 1: 0xA0001F
- stack 0: 0xFFFF
2418	 AD	AND		 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x1F
2419	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x5CC
- stack 0: 0x80000000
2420	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
2421	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5CC
- stack 0: 0x80000000
2422	 B5	PUSH2	0060	 	 
- stack 2: 0x5CC
- stack 1: 0x80000000
- stack 0: 0x60
2423	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x5CC
2424	 B9	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2425	 BB	ADD		 	 
- stack 0: 0x5D0
2426	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2427	 BD	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x368000003680000028C000002AB000102CA000202E4FFE4014B000000DC0014
2428	 BE	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x368000003680000028C000002AB000102CA000202E4FFE4014B000000DC0014
- stack 0: 0xF0
2429	 C0	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x368
2430	 C1	JUMP		 	 
- stack 0: 0x5D0
2431	 368	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5D0
2432	 369	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2433	 36A	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x368000003680000028C000002AB000102CA000202E4FFE4014B000000DC0014
2434	 36B	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x368000003680000028C000002AB000102CA000202E4FFE4014B000000DC0014
- stack 0: 0xE0
2435	 36D	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x3680000
2436	 36E	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x3680000
- stack 0: 0xFFFF
2437	 371	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
2438	 372	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x1
2439	 374	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
2440	 375	POP		 	 
- stack 0: 0x5D0
2441	 376	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2442	 378	ADD		 	 
- stack 0: 0x5D4
2443	 379	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2444	 37A	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x3680000028C000002AB000102CA000202E4FFE4014B000000DC0014032600A4
2445	 37B	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x3680000028C000002AB000102CA000202E4FFE4014B000000DC0014032600A4
- stack 0: 0xF0
2446	 37D	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x368
2447	 37E	JUMP		 	 
- stack 0: 0x5D4
2448	 368	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5D4
2449	 369	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2450	 36A	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x3680000028C000002AB000102CA000202E4FFE4014B000000DC0014032600A4
2451	 36B	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x3680000028C000002AB000102CA000202E4FFE4014B000000DC0014032600A4
- stack 0: 0xE0
2452	 36D	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x3680000
2453	 36E	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x3680000
- stack 0: 0xFFFF
2454	 371	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2455	 372	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x1
2456	 374	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2457	 375	POP		 	 
- stack 0: 0x5D4
2458	 376	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2459	 378	ADD		 	 
- stack 0: 0x5D8
2460	 379	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2461	 37A	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x28C000002AB000102CA000202E4FFE4014B000000DC0014032600A402720000
2462	 37B	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x28C000002AB000102CA000202E4FFE4014B000000DC0014032600A402720000
- stack 0: 0xF0
2463	 37D	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x28C
2464	 37E	JUMP		 	 
- stack 0: 0x5D8
2465	 28C	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5D8
2466	 28D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2467	 28E	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x28C000002AB000102CA000202E4FFE4014B000000DC0014032600A402720000
2468	 28F	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x28C000002AB000102CA000202E4FFE4014B000000DC0014032600A402720000
- stack 0: 0xE0
2469	 291	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x28C0000
2470	 292	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x28C0000
- stack 0: 0xFFFF
2471	 295	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x0
2472	 296	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x0
- stack 0: 0x1
2473	 298	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x0
2474	 299	PUSH2	0060	 	 
- stack 2: 0x5D8
- stack 1: 0x0
- stack 0: 0x60
2475	 29C	MLOAD		 	  ;; # read from x3
- stack 2: 0x5D8
- stack 1: 0x0
- stack 0: 0x80000000
2476	 29D	ADD		 	  ;; # ADDI 3
- stack 1: 0x5D8
- stack 0: 0x80000000
2477	 29E	PUSH2	00C0	 	 
- stack 2: 0x5D8
- stack 1: 0x80000000
- stack 0: 0xC0
2478	 2A1	MSTORE		 	  ;; # store to x6
- stack 0: 0x5D8
2479	 2A2	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2480	 2A4	ADD		 	 
- stack 0: 0x5DC
2481	 2A5	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2482	 2A6	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x2AB000102CA000202E4FFE4014B000000DC0014032600A40272000000860001
2483	 2A7	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x2AB000102CA000202E4FFE4014B000000DC0014032600A40272000000860001
- stack 0: 0xF0
2484	 2A9	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x2AB
2485	 2AA	JUMP		 	 
- stack 0: 0x5DC
2486	 2AB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5DC
2487	 2AC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2488	 2AD	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x2AB000102CA000202E4FFE4014B000000DC0014032600A40272000000860001
2489	 2AE	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x2AB000102CA000202E4FFE4014B000000DC0014032600A40272000000860001
- stack 0: 0xE0
2490	 2B0	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x2AB0001
2491	 2B1	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x2AB0001
- stack 0: 0xFFFF
2492	 2B4	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x1
2493	 2B5	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x1
2494	 2B7	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x1
2495	 2B8	PUSH2	0080	 	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x80
2496	 2BB	MLOAD		 	  ;; # read from x4
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x0
2497	 2BC	ADD		 	  ;; # ADDI 4
- stack 1: 0x5DC
- stack 0: 0x1
2498	 2BD	PUSH2	0080	 	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x80
2499	 2C0	MSTORE		 	  ;; # store to x4
- stack 0: 0x5DC
2500	 2C1	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2501	 2C3	ADD		 	 
- stack 0: 0x5E0
2502	 2C4	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2503	 2C5	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x2CA000202E4FFE4014B000000DC0014032600A4027200000086000100A00007
2504	 2C6	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x2CA000202E4FFE4014B000000DC0014032600A4027200000086000100A00007
- stack 0: 0xF0
2505	 2C8	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x2CA
2506	 2C9	JUMP		 	 
- stack 0: 0x5E0
2507	 2CA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5E0
2508	 2CB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2509	 2CC	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x2CA000202E4FFE4014B000000DC0014032600A4027200000086000100A00007
2510	 2CD	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x2CA000202E4FFE4014B000000DC0014032600A4027200000086000100A00007
- stack 0: 0xE0
2511	 2CF	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x2CA0002
2512	 2D0	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x2CA0002
- stack 0: 0xFFFF
2513	 2D3	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x2
2514	 2D4	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0x1
2515	 2D6	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x2
2516	 2D7	PUSH2	00A0	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0xA0
2517	 2DA	MSTORE		 	  ;; # store to x5
- stack 0: 0x5E0
2518	 2DB	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2519	 2DD	ADD		 	 
- stack 0: 0x5E4
2520	 2DE	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2521	 2DF	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x2E4FFE4014B000000DC0014032600A4027200000086000100A0000702AB0001
2522	 2E0	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x2E4FFE4014B000000DC0014032600A4027200000086000100A0000702AB0001
- stack 0: 0xF0
2523	 2E2	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x2E4
2524	 2E3	JUMP		 	 
- stack 0: 0x5E4
2525	 2E4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5E4
2526	 2E5	PUSH2	0080	 	 
- stack 1: 0x5E4
- stack 0: 0x80
2527	 2E8	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E4
- stack 0: 0x1
2528	 2E9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2529	 2EE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E4
- stack 0: 0x1
2530	 2EF	PUSH2	00A0	 	 
- stack 2: 0x5E4
- stack 1: 0x1
- stack 0: 0xA0
2531	 2F2	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E4
- stack 1: 0x1
- stack 0: 0x2
2532	 2F3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2533	 2F8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E4
- stack 1: 0x1
- stack 0: 0x2
2534	 2F9	SUB		 	 
- stack 1: 0x5E4
- stack 0: 0x1
2535	 2FA	PUSH2	0302	 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 2: 0x5E4
- stack 1: 0x1
- stack 0: 0x302
2536	 2FD	JUMPI		 	 
- stack 0: 0x5E4
2537	 302	JUMPDEST		 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 0: 0x5E4
2538	 303	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2539	 304	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x2E4FFE4014B000000DC0014032600A4027200000086000100A0000702AB0001
2540	 305	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x2E4FFE4014B000000DC0014032600A4027200000086000100A0000702AB0001
- stack 0: 0xE0
2541	 307	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x2E4FFE4
2542	 308	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x2E4FFE4
- stack 0: 0xFFFF
2543	 30B	AND		 	 
- stack 1: 0x5E4
- stack 0: 0xFFE4
2544	 30C	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0xFFE4
- stack 0: 0x1
2545	 30E	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2546	 30F	ADD		 	 
- stack 0: 0x5C8
2547	 310	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFF
2548	 315	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5C8
2549	 316	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2550	 317	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x86000100A0001F0368000003680000028C000002AB000102CA000202E4FFE4
2551	 318	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x86000100A0001F0368000003680000028C000002AB000102CA000202E4FFE4
- stack 0: 0xF0
2552	 31A	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x86
2553	 31B	JUMP		 	 
- stack 0: 0x5C8
2554	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x5C8
2555	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2556	 88	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x86000100A0001F0368000003680000028C000002AB000102CA000202E4FFE4
2557	 89	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x86000100A0001F0368000003680000028C000002AB000102CA000202E4FFE4
- stack 0: 0xE0
2558	 8B	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x860001
2559	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x860001
- stack 0: 0xFFFF
2560	 8F	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x1
2561	 90	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x1
2562	 92	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x1
2563	 93	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x20
2564	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
2565	 97	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2566	 99	ADD		 	 
- stack 0: 0x5CC
2567	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2568	 9B	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xA0001F0368000003680000028C000002AB000102CA000202E4FFE4014B0000
2569	 9C	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xA0001F0368000003680000028C000002AB000102CA000202E4FFE4014B0000
- stack 0: 0xF0
2570	 9E	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xA0
2571	 9F	JUMP		 	 
- stack 0: 0x5CC
2572	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x5CC
2573	 A1	PUSH2	0020	 	 
- stack 1: 0x5CC
- stack 0: 0x20
2574	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x5CC
- stack 0: 0x1
2575	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x5CC
2576	 A6	MLOAD		 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0xA0001F0368000003680000028C000002AB000102CA000202E4FFE4014B0000
2577	 A7	PUSH1	E0	 	 
- stack 3: 0x5CC
- stack 2: 0x1
- stack 1: 0xA0001F0368000003680000028C000002AB000102CA000202E4FFE4014B0000
- stack 0: 0xE0
2578	 A9	SHR		 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0xA0001F
2579	 AA	PUSH2	FFFF	 	 
- stack 3: 0x5CC
- stack 2: 0x1
- stack 1: 0xA0001F
- stack 0: 0xFFFF
2580	 AD	AND		 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x1F
2581	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x5CC
- stack 0: 0x80000000
2582	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
2583	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5CC
- stack 0: 0x80000000
2584	 B5	PUSH2	0060	 	 
- stack 2: 0x5CC
- stack 1: 0x80000000
- stack 0: 0x60
2585	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x5CC
2586	 B9	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2587	 BB	ADD		 	 
- stack 0: 0x5D0
2588	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2589	 BD	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x368000003680000028C000002AB000102CA000202E4FFE4014B000000DC0014
2590	 BE	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x368000003680000028C000002AB000102CA000202E4FFE4014B000000DC0014
- stack 0: 0xF0
2591	 C0	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x368
2592	 C1	JUMP		 	 
- stack 0: 0x5D0
2593	 368	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5D0
2594	 369	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2595	 36A	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x368000003680000028C000002AB000102CA000202E4FFE4014B000000DC0014
2596	 36B	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x368000003680000028C000002AB000102CA000202E4FFE4014B000000DC0014
- stack 0: 0xE0
2597	 36D	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x3680000
2598	 36E	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x3680000
- stack 0: 0xFFFF
2599	 371	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
2600	 372	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x1
2601	 374	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
2602	 375	POP		 	 
- stack 0: 0x5D0
2603	 376	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2604	 378	ADD		 	 
- stack 0: 0x5D4
2605	 379	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2606	 37A	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x3680000028C000002AB000102CA000202E4FFE4014B000000DC0014032600A4
2607	 37B	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x3680000028C000002AB000102CA000202E4FFE4014B000000DC0014032600A4
- stack 0: 0xF0
2608	 37D	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x368
2609	 37E	JUMP		 	 
- stack 0: 0x5D4
2610	 368	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5D4
2611	 369	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2612	 36A	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x3680000028C000002AB000102CA000202E4FFE4014B000000DC0014032600A4
2613	 36B	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x3680000028C000002AB000102CA000202E4FFE4014B000000DC0014032600A4
- stack 0: 0xE0
2614	 36D	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x3680000
2615	 36E	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x3680000
- stack 0: 0xFFFF
2616	 371	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2617	 372	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x1
2618	 374	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2619	 375	POP		 	 
- stack 0: 0x5D4
2620	 376	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2621	 378	ADD		 	 
- stack 0: 0x5D8
2622	 379	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2623	 37A	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x28C000002AB000102CA000202E4FFE4014B000000DC0014032600A402720000
2624	 37B	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x28C000002AB000102CA000202E4FFE4014B000000DC0014032600A402720000
- stack 0: 0xF0
2625	 37D	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x28C
2626	 37E	JUMP		 	 
- stack 0: 0x5D8
2627	 28C	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5D8
2628	 28D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2629	 28E	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x28C000002AB000102CA000202E4FFE4014B000000DC0014032600A402720000
2630	 28F	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x28C000002AB000102CA000202E4FFE4014B000000DC0014032600A402720000
- stack 0: 0xE0
2631	 291	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x28C0000
2632	 292	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x28C0000
- stack 0: 0xFFFF
2633	 295	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x0
2634	 296	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x0
- stack 0: 0x1
2635	 298	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x0
2636	 299	PUSH2	0060	 	 
- stack 2: 0x5D8
- stack 1: 0x0
- stack 0: 0x60
2637	 29C	MLOAD		 	  ;; # read from x3
- stack 2: 0x5D8
- stack 1: 0x0
- stack 0: 0x80000000
2638	 29D	ADD		 	  ;; # ADDI 3
- stack 1: 0x5D8
- stack 0: 0x80000000
2639	 29E	PUSH2	00C0	 	 
- stack 2: 0x5D8
- stack 1: 0x80000000
- stack 0: 0xC0
2640	 2A1	MSTORE		 	  ;; # store to x6
- stack 0: 0x5D8
2641	 2A2	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2642	 2A4	ADD		 	 
- stack 0: 0x5DC
2643	 2A5	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2644	 2A6	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x2AB000102CA000202E4FFE4014B000000DC0014032600A40272000000860001
2645	 2A7	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x2AB000102CA000202E4FFE4014B000000DC0014032600A40272000000860001
- stack 0: 0xF0
2646	 2A9	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x2AB
2647	 2AA	JUMP		 	 
- stack 0: 0x5DC
2648	 2AB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5DC
2649	 2AC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2650	 2AD	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x2AB000102CA000202E4FFE4014B000000DC0014032600A40272000000860001
2651	 2AE	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x2AB000102CA000202E4FFE4014B000000DC0014032600A40272000000860001
- stack 0: 0xE0
2652	 2B0	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x2AB0001
2653	 2B1	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x2AB0001
- stack 0: 0xFFFF
2654	 2B4	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x1
2655	 2B5	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x1
2656	 2B7	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x1
2657	 2B8	PUSH2	0080	 	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x80
2658	 2BB	MLOAD		 	  ;; # read from x4
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x1
2659	 2BC	ADD		 	  ;; # ADDI 4
- stack 1: 0x5DC
- stack 0: 0x2
2660	 2BD	PUSH2	0080	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0x80
2661	 2C0	MSTORE		 	  ;; # store to x4
- stack 0: 0x5DC
2662	 2C1	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2663	 2C3	ADD		 	 
- stack 0: 0x5E0
2664	 2C4	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2665	 2C5	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x2CA000202E4FFE4014B000000DC0014032600A4027200000086000100A00007
2666	 2C6	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x2CA000202E4FFE4014B000000DC0014032600A4027200000086000100A00007
- stack 0: 0xF0
2667	 2C8	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x2CA
2668	 2C9	JUMP		 	 
- stack 0: 0x5E0
2669	 2CA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5E0
2670	 2CB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2671	 2CC	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x2CA000202E4FFE4014B000000DC0014032600A4027200000086000100A00007
2672	 2CD	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x2CA000202E4FFE4014B000000DC0014032600A4027200000086000100A00007
- stack 0: 0xE0
2673	 2CF	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x2CA0002
2674	 2D0	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x2CA0002
- stack 0: 0xFFFF
2675	 2D3	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x2
2676	 2D4	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0x1
2677	 2D6	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x2
2678	 2D7	PUSH2	00A0	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0xA0
2679	 2DA	MSTORE		 	  ;; # store to x5
- stack 0: 0x5E0
2680	 2DB	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2681	 2DD	ADD		 	 
- stack 0: 0x5E4
2682	 2DE	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2683	 2DF	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x2E4FFE4014B000000DC0014032600A4027200000086000100A0000702AB0001
2684	 2E0	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x2E4FFE4014B000000DC0014032600A4027200000086000100A0000702AB0001
- stack 0: 0xF0
2685	 2E2	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x2E4
2686	 2E3	JUMP		 	 
- stack 0: 0x5E4
2687	 2E4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5E4
2688	 2E5	PUSH2	0080	 	 
- stack 1: 0x5E4
- stack 0: 0x80
2689	 2E8	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E4
- stack 0: 0x2
2690	 2E9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2691	 2EE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E4
- stack 0: 0x2
2692	 2EF	PUSH2	00A0	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0xA0
2693	 2F2	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0x2
2694	 2F3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2695	 2F8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0x2
2696	 2F9	SUB		 	 
- stack 1: 0x5E4
- stack 0: 0x0
2697	 2FA	PUSH2	0302	 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x302
2698	 2FD	JUMPI		 	 
- stack 0: 0x5E4
2699	 2FE	PUSH2	031C	 ;; _neq_after_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 1: 0x5E4
- stack 0: 0x31C
2700	 301	JUMP		 	 
- stack 0: 0x5E4
2701	 31C	JUMPDEST		 ;; _neq_after_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 0: 0x5E4
2702	 31D	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2703	 31F	ADD		 	 
- stack 0: 0x5E8
2704	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2705	 321	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x14B000000DC0014032600A4027200000086000100A0000702AB000102CA0002
2706	 322	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x14B000000DC0014032600A4027200000086000100A0000702AB000102CA0002
- stack 0: 0xF0
2707	 324	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x14B
2708	 325	JUMP		 	 
- stack 0: 0x5E8
2709	 14B	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x5E8
2710	 14C	PUSH4	80000000	 	 
- stack 1: 0x5E8
- stack 0: 0x80000000
2711	 151	PUSH2	03A0	 	 
- stack 2: 0x5E8
- stack 1: 0x80000000
- stack 0: 0x3A0
2712	 154	MSTORE		 	  ;; # store to x29
- stack 0: 0x5E8
2713	 155	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2714	 157	ADD		 	 
- stack 0: 0x5EC
2715	 158	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2716	 159	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xDC0014032600A4027200000086000100A0000702AB000102CA000202E4FFF0
2717	 15A	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0xDC0014032600A4027200000086000100A0000702AB000102CA000202E4FFF0
- stack 0: 0xF0
2718	 15C	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xDC
2719	 15D	JUMP		 	 
- stack 0: 0x5EC
2720	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5EC
2721	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2722	 DE	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xDC0014032600A4027200000086000100A0000702AB000102CA000202E4FFF0
2723	 DF	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0xDC0014032600A4027200000086000100A0000702AB000102CA000202E4FFF0
- stack 0: 0xE0
2724	 E1	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xDC0014
2725	 E2	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0xDC0014
- stack 0: 0xFFFF
2726	 E5	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x14
2727	 E6	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x14
- stack 0: 0x1
2728	 E8	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x14
2729	 E9	PUSH2	0380	 	 
- stack 2: 0x5EC
- stack 1: 0x14
- stack 0: 0x380
2730	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x5EC
2731	 ED	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2732	 EF	ADD		 	 
- stack 0: 0x5F0
2733	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2734	 F1	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x32600A4027200000086000100A0000702AB000102CA000202E4FFF000C20080
2735	 F2	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x32600A4027200000086000100A0000702AB000102CA000202E4FFF000C20080
- stack 0: 0xF0
2736	 F4	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x326
2737	 F5	JUMP		 	 
- stack 0: 0x5F0
2738	 326	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,100(ignore imm)
- stack 0: 0x5F0
2739	 327	PUSH2	00C0	 	 
- stack 1: 0x5F0
- stack 0: 0xC0
2740	 32A	MLOAD		 	  ;; # read from x6
- stack 1: 0x5F0
- stack 0: 0x80000000
2741	 32B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
2742	 330	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F0
- stack 0: 0x80000000
2743	 331	PUSH2	03A0	 	 
- stack 2: 0x5F0
- stack 1: 0x80000000
- stack 0: 0x3A0
2744	 334	MLOAD		 	  ;; # read from x29
- stack 2: 0x5F0
- stack 1: 0x80000000
- stack 0: 0x80000000
2745	 335	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F0
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
2746	 33A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F0
- stack 1: 0x80000000
- stack 0: 0x80000000
2747	 33B	SUB		 	 
- stack 1: 0x5F0
- stack 0: 0x0
2748	 33C	PUSH2	0344	 ;; _neq_5478db8b2baa678cc15033f1ccd6bdb778a9003075c03558679d53919941c169	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x344
2749	 33F	JUMPI		 	 
- stack 0: 0x5F0
2750	 340	PUSH2	035E	 ;; _neq_after_5478db8b2baa678cc15033f1ccd6bdb778a9003075c03558679d53919941c169	 
- stack 1: 0x5F0
- stack 0: 0x35E
2751	 343	JUMP		 	 
- stack 0: 0x5F0
2752	 35E	JUMPDEST		 ;; _neq_after_5478db8b2baa678cc15033f1ccd6bdb778a9003075c03558679d53919941c169	 
- stack 0: 0x5F0
2753	 35F	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2754	 361	ADD		 	 
- stack 0: 0x5F4
2755	 362	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2756	 363	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x27200000086000100A0000702AB000102CA000202E4FFF000C2008000DC0015
2757	 364	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x27200000086000100A0000702AB000102CA000202E4FFF000C2008000DC0015
- stack 0: 0xF0
2758	 366	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x272
2759	 367	JUMP		 	 
- stack 0: 0x5F4
2760	 272	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5F4
2761	 273	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
2762	 274	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x27200000086000100A0000702AB000102CA000202E4FFF000C2008000DC0015
2763	 275	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x27200000086000100A0000702AB000102CA000202E4FFF000C2008000DC0015
- stack 0: 0xE0
2764	 277	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x2720000
2765	 278	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x2720000
- stack 0: 0xFFFF
2766	 27B	AND		 	 
- stack 1: 0x5F4
- stack 0: 0x0
2767	 27C	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x1
2768	 27E	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0x0
2769	 27F	PUSH2	0080	 	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x80
2770	 282	MSTORE		 	  ;; # store to x4
- stack 0: 0x5F4
2771	 283	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2772	 285	ADD		 	 
- stack 0: 0x5F8
2773	 286	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2774	 287	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x86000100A0000702AB000102CA000202E4FFF000C2008000DC001500F60080
2775	 288	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x86000100A0000702AB000102CA000202E4FFF000C2008000DC001500F60080
- stack 0: 0xF0
2776	 28A	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x86
2777	 28B	JUMP		 	 
- stack 0: 0x5F8
2778	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x5F8
2779	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
2780	 88	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x86000100A0000702AB000102CA000202E4FFF000C2008000DC001500F60080
2781	 89	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x86000100A0000702AB000102CA000202E4FFF000C2008000DC001500F60080
- stack 0: 0xE0
2782	 8B	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x860001
2783	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x860001
- stack 0: 0xFFFF
2784	 8F	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
2785	 90	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x1
2786	 92	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
2787	 93	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x20
2788	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F8
2789	 97	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2790	 99	ADD		 	 
- stack 0: 0x5FC
2791	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2792	 9B	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xA0000702AB000102CA000202E4FFF000C2008000DC001500F6008002720000
2793	 9C	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0xA0000702AB000102CA000202E4FFF000C2008000DC001500F6008002720000
- stack 0: 0xF0
2794	 9E	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xA0
2795	 9F	JUMP		 	 
- stack 0: 0x5FC
2796	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x5FC
2797	 A1	PUSH2	0020	 	 
- stack 1: 0x5FC
- stack 0: 0x20
2798	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x5FC
- stack 0: 0x1
2799	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x5FC
2800	 A6	MLOAD		 	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0xA0000702AB000102CA000202E4FFF000C2008000DC001500F6008002720000
2801	 A7	PUSH1	E0	 	 
- stack 3: 0x5FC
- stack 2: 0x1
- stack 1: 0xA0000702AB000102CA000202E4FFF000C2008000DC001500F6008002720000
- stack 0: 0xE0
2802	 A9	SHR		 	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0xA00007
2803	 AA	PUSH2	FFFF	 	 
- stack 3: 0x5FC
- stack 2: 0x1
- stack 1: 0xA00007
- stack 0: 0xFFFF
2804	 AD	AND		 	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x7
2805	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x5FC
- stack 0: 0x80
2806	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
2807	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5FC
- stack 0: 0x80
2808	 B5	PUSH2	0060	 	 
- stack 2: 0x5FC
- stack 1: 0x80
- stack 0: 0x60
2809	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x5FC
2810	 B9	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2811	 BB	ADD		 	 
- stack 0: 0x600
2812	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2813	 BD	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x2AB000102CA000202E4FFF000C2008000DC001500F600800272000000860001
2814	 BE	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x2AB000102CA000202E4FFF000C2008000DC001500F600800272000000860001
- stack 0: 0xF0
2815	 C0	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2AB
2816	 C1	JUMP		 	 
- stack 0: 0x600
2817	 2AB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x600
2818	 2AC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2819	 2AD	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x2AB000102CA000202E4FFF000C2008000DC001500F600800272000000860001
2820	 2AE	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x2AB000102CA000202E4FFF000C2008000DC001500F600800272000000860001
- stack 0: 0xE0
2821	 2B0	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2AB0001
2822	 2B1	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x2AB0001
- stack 0: 0xFFFF
2823	 2B4	AND		 	 
- stack 1: 0x600
- stack 0: 0x1
2824	 2B5	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
2825	 2B7	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x1
2826	 2B8	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x80
2827	 2BB	MLOAD		 	  ;; # read from x4
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x0
2828	 2BC	ADD		 	  ;; # ADDI 4
- stack 1: 0x600
- stack 0: 0x1
2829	 2BD	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x80
2830	 2C0	MSTORE		 	  ;; # store to x4
- stack 0: 0x600
2831	 2C1	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2832	 2C3	ADD		 	 
- stack 0: 0x604
2833	 2C4	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2834	 2C5	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x2CA000202E4FFF000C2008000DC001500F60080027200000086000103680000
2835	 2C6	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x2CA000202E4FFF000C2008000DC001500F60080027200000086000103680000
- stack 0: 0xF0
2836	 2C8	SHR		 	 
- stack 1: 0x604
- stack 0: 0x2CA
2837	 2C9	JUMP		 	 
- stack 0: 0x604
2838	 2CA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x604
2839	 2CB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
2840	 2CC	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x2CA000202E4FFF000C2008000DC001500F60080027200000086000103680000
2841	 2CD	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x2CA000202E4FFF000C2008000DC001500F60080027200000086000103680000
- stack 0: 0xE0
2842	 2CF	SHR		 	 
- stack 1: 0x604
- stack 0: 0x2CA0002
2843	 2D0	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x2CA0002
- stack 0: 0xFFFF
2844	 2D3	AND		 	 
- stack 1: 0x604
- stack 0: 0x2
2845	 2D4	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x1
2846	 2D6	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x2
2847	 2D7	PUSH2	00A0	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0xA0
2848	 2DA	MSTORE		 	  ;; # store to x5
- stack 0: 0x604
2849	 2DB	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2850	 2DD	ADD		 	 
- stack 0: 0x608
2851	 2DE	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2852	 2DF	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x2E4FFF000C2008000DC001500F6008002720000008600010368000000A0000E
2853	 2E0	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x2E4FFF000C2008000DC001500F6008002720000008600010368000000A0000E
- stack 0: 0xF0
2854	 2E2	SHR		 	 
- stack 1: 0x608
- stack 0: 0x2E4
2855	 2E3	JUMP		 	 
- stack 0: 0x608
2856	 2E4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x608
2857	 2E5	PUSH2	0080	 	 
- stack 1: 0x608
- stack 0: 0x80
2858	 2E8	MLOAD		 	  ;; # read from x4
- stack 1: 0x608
- stack 0: 0x1
2859	 2E9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2860	 2EE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x608
- stack 0: 0x1
2861	 2EF	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0xA0
2862	 2F2	MLOAD		 	  ;; # read from x5
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x2
2863	 2F3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x608
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2864	 2F8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x2
2865	 2F9	SUB		 	 
- stack 1: 0x608
- stack 0: 0x1
2866	 2FA	PUSH2	0302	 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x302
2867	 2FD	JUMPI		 	 
- stack 0: 0x608
2868	 302	JUMPDEST		 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 0: 0x608
2869	 303	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2870	 304	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x2E4FFF000C2008000DC001500F6008002720000008600010368000000A0000E
2871	 305	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x2E4FFF000C2008000DC001500F6008002720000008600010368000000A0000E
- stack 0: 0xE0
2872	 307	SHR		 	 
- stack 1: 0x608
- stack 0: 0x2E4FFF0
2873	 308	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x2E4FFF0
- stack 0: 0xFFFF
2874	 30B	AND		 	 
- stack 1: 0x608
- stack 0: 0xFFF0
2875	 30C	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0xFFF0
- stack 0: 0x1
2876	 30E	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2877	 30F	ADD		 	 
- stack 0: 0x5F8
2878	 310	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5F8
- stack 0: 0xFFFFFFFF
2879	 315	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5F8
2880	 316	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2881	 317	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x86000100A0000702AB000102CA000202E4FFF000C2008000DC001500F60080
2882	 318	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x86000100A0000702AB000102CA000202E4FFF000C2008000DC001500F60080
- stack 0: 0xF0
2883	 31A	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x86
2884	 31B	JUMP		 	 
- stack 0: 0x5F8
2885	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x5F8
2886	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
2887	 88	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x86000100A0000702AB000102CA000202E4FFF000C2008000DC001500F60080
2888	 89	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x86000100A0000702AB000102CA000202E4FFF000C2008000DC001500F60080
- stack 0: 0xE0
2889	 8B	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x860001
2890	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x860001
- stack 0: 0xFFFF
2891	 8F	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
2892	 90	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x1
2893	 92	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
2894	 93	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x20
2895	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F8
2896	 97	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2897	 99	ADD		 	 
- stack 0: 0x5FC
2898	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2899	 9B	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xA0000702AB000102CA000202E4FFF000C2008000DC001500F6008002720000
2900	 9C	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0xA0000702AB000102CA000202E4FFF000C2008000DC001500F6008002720000
- stack 0: 0xF0
2901	 9E	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xA0
2902	 9F	JUMP		 	 
- stack 0: 0x5FC
2903	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x5FC
2904	 A1	PUSH2	0020	 	 
- stack 1: 0x5FC
- stack 0: 0x20
2905	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x5FC
- stack 0: 0x1
2906	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x5FC
2907	 A6	MLOAD		 	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0xA0000702AB000102CA000202E4FFF000C2008000DC001500F6008002720000
2908	 A7	PUSH1	E0	 	 
- stack 3: 0x5FC
- stack 2: 0x1
- stack 1: 0xA0000702AB000102CA000202E4FFF000C2008000DC001500F6008002720000
- stack 0: 0xE0
2909	 A9	SHR		 	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0xA00007
2910	 AA	PUSH2	FFFF	 	 
- stack 3: 0x5FC
- stack 2: 0x1
- stack 1: 0xA00007
- stack 0: 0xFFFF
2911	 AD	AND		 	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x7
2912	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x5FC
- stack 0: 0x80
2913	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
2914	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5FC
- stack 0: 0x80
2915	 B5	PUSH2	0060	 	 
- stack 2: 0x5FC
- stack 1: 0x80
- stack 0: 0x60
2916	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x5FC
2917	 B9	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2918	 BB	ADD		 	 
- stack 0: 0x600
2919	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2920	 BD	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x2AB000102CA000202E4FFF000C2008000DC001500F600800272000000860001
2921	 BE	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x2AB000102CA000202E4FFF000C2008000DC001500F600800272000000860001
- stack 0: 0xF0
2922	 C0	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2AB
2923	 C1	JUMP		 	 
- stack 0: 0x600
2924	 2AB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x600
2925	 2AC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2926	 2AD	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x2AB000102CA000202E4FFF000C2008000DC001500F600800272000000860001
2927	 2AE	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x2AB000102CA000202E4FFF000C2008000DC001500F600800272000000860001
- stack 0: 0xE0
2928	 2B0	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2AB0001
2929	 2B1	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x2AB0001
- stack 0: 0xFFFF
2930	 2B4	AND		 	 
- stack 1: 0x600
- stack 0: 0x1
2931	 2B5	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
2932	 2B7	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x1
2933	 2B8	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x80
2934	 2BB	MLOAD		 	  ;; # read from x4
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
2935	 2BC	ADD		 	  ;; # ADDI 4
- stack 1: 0x600
- stack 0: 0x2
2936	 2BD	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0x80
2937	 2C0	MSTORE		 	  ;; # store to x4
- stack 0: 0x600
2938	 2C1	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2939	 2C3	ADD		 	 
- stack 0: 0x604
2940	 2C4	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2941	 2C5	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x2CA000202E4FFF000C2008000DC001500F60080027200000086000103680000
2942	 2C6	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x2CA000202E4FFF000C2008000DC001500F60080027200000086000103680000
- stack 0: 0xF0
2943	 2C8	SHR		 	 
- stack 1: 0x604
- stack 0: 0x2CA
2944	 2C9	JUMP		 	 
- stack 0: 0x604
2945	 2CA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x604
2946	 2CB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
2947	 2CC	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x2CA000202E4FFF000C2008000DC001500F60080027200000086000103680000
2948	 2CD	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x2CA000202E4FFF000C2008000DC001500F60080027200000086000103680000
- stack 0: 0xE0
2949	 2CF	SHR		 	 
- stack 1: 0x604
- stack 0: 0x2CA0002
2950	 2D0	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x2CA0002
- stack 0: 0xFFFF
2951	 2D3	AND		 	 
- stack 1: 0x604
- stack 0: 0x2
2952	 2D4	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x1
2953	 2D6	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x2
2954	 2D7	PUSH2	00A0	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0xA0
2955	 2DA	MSTORE		 	  ;; # store to x5
- stack 0: 0x604
2956	 2DB	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2957	 2DD	ADD		 	 
- stack 0: 0x608
2958	 2DE	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2959	 2DF	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x2E4FFF000C2008000DC001500F6008002720000008600010368000000A0000E
2960	 2E0	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x2E4FFF000C2008000DC001500F6008002720000008600010368000000A0000E
- stack 0: 0xF0
2961	 2E2	SHR		 	 
- stack 1: 0x608
- stack 0: 0x2E4
2962	 2E3	JUMP		 	 
- stack 0: 0x608
2963	 2E4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x608
2964	 2E5	PUSH2	0080	 	 
- stack 1: 0x608
- stack 0: 0x80
2965	 2E8	MLOAD		 	  ;; # read from x4
- stack 1: 0x608
- stack 0: 0x2
2966	 2E9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2967	 2EE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x608
- stack 0: 0x2
2968	 2EF	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xA0
2969	 2F2	MLOAD		 	  ;; # read from x5
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x2
2970	 2F3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x608
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2971	 2F8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x2
2972	 2F9	SUB		 	 
- stack 1: 0x608
- stack 0: 0x0
2973	 2FA	PUSH2	0302	 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x302
2974	 2FD	JUMPI		 	 
- stack 0: 0x608
2975	 2FE	PUSH2	031C	 ;; _neq_after_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 1: 0x608
- stack 0: 0x31C
2976	 301	JUMP		 	 
- stack 0: 0x608
2977	 31C	JUMPDEST		 ;; _neq_after_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 0: 0x608
2978	 31D	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2979	 31F	ADD		 	 
- stack 0: 0x60C
2980	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2981	 321	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xC2008000DC001500F6008002720000008600010368000000A0000E02AB0001
2982	 322	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0xC2008000DC001500F6008002720000008600010368000000A0000E02AB0001
- stack 0: 0xF0
2983	 324	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xC2
2984	 325	JUMP		 	 
- stack 0: 0x60C
2985	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x60C
2986	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
2987	 C4	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xC2008000DC001500F6008002720000008600010368000000A0000E02AB0001
2988	 C5	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0xC2008000DC001500F6008002720000008600010368000000A0000E02AB0001
- stack 0: 0xE0
2989	 C7	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xC20080
2990	 C8	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0xC20080
- stack 0: 0xFFFF
2991	 CB	AND		 	 
- stack 1: 0x60C
- stack 0: 0x80
2992	 CC	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x80
- stack 0: 0x1
2993	 CE	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x80
2994	 CF	PUSH2	03A0	 	 
- stack 2: 0x60C
- stack 1: 0x80
- stack 0: 0x3A0
2995	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x60C
2996	 D3	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
2997	 D5	ADD		 	 
- stack 0: 0x610
2998	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
2999	 D7	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xDC001500F6008002720000008600010368000000A0000E02AB000102CA0002
3000	 D8	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0xDC001500F6008002720000008600010368000000A0000E02AB000102CA0002
- stack 0: 0xF0
3001	 DA	SHR		 	 
- stack 1: 0x610
- stack 0: 0xDC
3002	 DB	JUMP		 	 
- stack 0: 0x610
3003	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x610
3004	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3005	 DE	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xDC001500F6008002720000008600010368000000A0000E02AB000102CA0002
3006	 DF	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0xDC001500F6008002720000008600010368000000A0000E02AB000102CA0002
- stack 0: 0xE0
3007	 E1	SHR		 	 
- stack 1: 0x610
- stack 0: 0xDC0015
3008	 E2	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0xDC0015
- stack 0: 0xFFFF
3009	 E5	AND		 	 
- stack 1: 0x610
- stack 0: 0x15
3010	 E6	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x15
- stack 0: 0x1
3011	 E8	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x15
3012	 E9	PUSH2	0380	 	 
- stack 2: 0x610
- stack 1: 0x15
- stack 0: 0x380
3013	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x610
3014	 ED	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3015	 EF	ADD		 	 
- stack 0: 0x614
3016	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3017	 F1	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0xF6008002720000008600010368000000A0000E02AB000102CA000202E4FFEC
3018	 F2	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0xF6008002720000008600010368000000A0000E02AB000102CA000202E4FFEC
- stack 0: 0xF0
3019	 F4	SHR		 	 
- stack 1: 0x614
- stack 0: 0xF6
3020	 F5	JUMP		 	 
- stack 0: 0x614
3021	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x614
3022	 F7	PUSH2	0060	 	 
- stack 1: 0x614
- stack 0: 0x60
3023	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x614
- stack 0: 0x80
3024	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x614
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
3025	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x614
- stack 0: 0x80
3026	 101	PUSH2	03A0	 	 
- stack 2: 0x614
- stack 1: 0x80
- stack 0: 0x3A0
3027	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x614
- stack 1: 0x80
- stack 0: 0x80
3028	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x614
- stack 2: 0x80
- stack 1: 0x80
- stack 0: 0xFFFFFFFF
3029	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x614
- stack 1: 0x80
- stack 0: 0x80
3030	 10B	SUB		 	 
- stack 1: 0x614
- stack 0: 0x0
3031	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x114
3032	 10F	JUMPI		 	 
- stack 0: 0x614
3033	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x614
- stack 0: 0x12E
3034	 113	JUMP		 	 
- stack 0: 0x614
3035	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x614
3036	 12F	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3037	 131	ADD		 	 
- stack 0: 0x618
3038	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3039	 133	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x2720000008600010368000000A0000E02AB000102CA000202E4FFEC01380004
3040	 134	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x2720000008600010368000000A0000E02AB000102CA000202E4FFEC01380004
- stack 0: 0xF0
3041	 136	SHR		 	 
- stack 1: 0x618
- stack 0: 0x272
3042	 137	JUMP		 	 
- stack 0: 0x618
3043	 272	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x618
3044	 273	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3045	 274	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x2720000008600010368000000A0000E02AB000102CA000202E4FFEC01380004
3046	 275	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x2720000008600010368000000A0000E02AB000102CA000202E4FFEC01380004
- stack 0: 0xE0
3047	 277	SHR		 	 
- stack 1: 0x618
- stack 0: 0x2720000
3048	 278	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x2720000
- stack 0: 0xFFFF
3049	 27B	AND		 	 
- stack 1: 0x618
- stack 0: 0x0
3050	 27C	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x1
3051	 27E	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x0
3052	 27F	PUSH2	0080	 	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x80
3053	 282	MSTORE		 	  ;; # store to x4
- stack 0: 0x618
3054	 283	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3055	 285	ADD		 	 
- stack 0: 0x61C
3056	 286	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3057	 287	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x8600010368000000A0000E02AB000102CA000202E4FFEC0138000400DC0016
3058	 288	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x8600010368000000A0000E02AB000102CA000202E4FFEC0138000400DC0016
- stack 0: 0xF0
3059	 28A	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x86
3060	 28B	JUMP		 	 
- stack 0: 0x61C
3061	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x61C
3062	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3063	 88	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x8600010368000000A0000E02AB000102CA000202E4FFEC0138000400DC0016
3064	 89	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x8600010368000000A0000E02AB000102CA000202E4FFEC0138000400DC0016
- stack 0: 0xE0
3065	 8B	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x860001
3066	 8C	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x860001
- stack 0: 0xFFFF
3067	 8F	AND		 	 
- stack 1: 0x61C
- stack 0: 0x1
3068	 90	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x1
3069	 92	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x1
3070	 93	PUSH2	0020	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x20
3071	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x61C
3072	 97	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3073	 99	ADD		 	 
- stack 0: 0x620
3074	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3075	 9B	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x368000000A0000E02AB000102CA000202E4FFEC0138000400DC001600F60058
3076	 9C	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x368000000A0000E02AB000102CA000202E4FFEC0138000400DC001600F60058
- stack 0: 0xF0
3077	 9E	SHR		 	 
- stack 1: 0x620
- stack 0: 0x368
3078	 9F	JUMP		 	 
- stack 0: 0x620
3079	 368	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x620
3080	 369	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3081	 36A	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x368000000A0000E02AB000102CA000202E4FFEC0138000400DC001600F60058
3082	 36B	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x368000000A0000E02AB000102CA000202E4FFEC0138000400DC001600F60058
- stack 0: 0xE0
3083	 36D	SHR		 	 
- stack 1: 0x620
- stack 0: 0x3680000
3084	 36E	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x3680000
- stack 0: 0xFFFF
3085	 371	AND		 	 
- stack 1: 0x620
- stack 0: 0x0
3086	 372	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x1
3087	 374	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x0
3088	 375	POP		 	 
- stack 0: 0x620
3089	 376	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3090	 378	ADD		 	 
- stack 0: 0x624
3091	 379	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3092	 37A	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xA0000E02AB000102CA000202E4FFEC0138000400DC001600F6005802720000
3093	 37B	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0xA0000E02AB000102CA000202E4FFEC0138000400DC001600F6005802720000
- stack 0: 0xF0
3094	 37D	SHR		 	 
- stack 1: 0x624
- stack 0: 0xA0
3095	 37E	JUMP		 	 
- stack 0: 0x624
3096	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x624
3097	 A1	PUSH2	0020	 	 
- stack 1: 0x624
- stack 0: 0x20
3098	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x624
- stack 0: 0x1
3099	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0x624
3100	 A6	MLOAD		 	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0xA0000E02AB000102CA000202E4FFEC0138000400DC001600F6005802720000
3101	 A7	PUSH1	E0	 	 
- stack 3: 0x624
- stack 2: 0x1
- stack 1: 0xA0000E02AB000102CA000202E4FFEC0138000400DC001600F6005802720000
- stack 0: 0xE0
3102	 A9	SHR		 	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0xA0000E
3103	 AA	PUSH2	FFFF	 	 
- stack 3: 0x624
- stack 2: 0x1
- stack 1: 0xA0000E
- stack 0: 0xFFFF
3104	 AD	AND		 	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0xE
3105	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x624
- stack 0: 0x4000
3106	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
3107	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x4000
3108	 B5	PUSH2	0060	 	 
- stack 2: 0x624
- stack 1: 0x4000
- stack 0: 0x60
3109	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x624
3110	 B9	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3111	 BB	ADD		 	 
- stack 0: 0x628
3112	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3113	 BD	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x2AB000102CA000202E4FFEC0138000400DC001600F600580272000000860001
3114	 BE	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x2AB000102CA000202E4FFEC0138000400DC001600F600580272000000860001
- stack 0: 0xF0
3115	 C0	SHR		 	 
- stack 1: 0x628
- stack 0: 0x2AB
3116	 C1	JUMP		 	 
- stack 0: 0x628
3117	 2AB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x628
3118	 2AC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3119	 2AD	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x2AB000102CA000202E4FFEC0138000400DC001600F600580272000000860001
3120	 2AE	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x2AB000102CA000202E4FFEC0138000400DC001600F600580272000000860001
- stack 0: 0xE0
3121	 2B0	SHR		 	 
- stack 1: 0x628
- stack 0: 0x2AB0001
3122	 2B1	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x2AB0001
- stack 0: 0xFFFF
3123	 2B4	AND		 	 
- stack 1: 0x628
- stack 0: 0x1
3124	 2B5	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x1
3125	 2B7	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x1
3126	 2B8	PUSH2	0080	 	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x80
3127	 2BB	MLOAD		 	  ;; # read from x4
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x0
3128	 2BC	ADD		 	  ;; # ADDI 4
- stack 1: 0x628
- stack 0: 0x1
3129	 2BD	PUSH2	0080	 	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x80
3130	 2C0	MSTORE		 	  ;; # store to x4
- stack 0: 0x628
3131	 2C1	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3132	 2C3	ADD		 	 
- stack 0: 0x62C
3133	 2C4	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3134	 2C5	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x2CA000202E4FFEC0138000400DC001600F60058027200000086000103680000
3135	 2C6	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x2CA000202E4FFEC0138000400DC001600F60058027200000086000103680000
- stack 0: 0xF0
3136	 2C8	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x2CA
3137	 2C9	JUMP		 	 
- stack 0: 0x62C
3138	 2CA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x62C
3139	 2CB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3140	 2CC	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x2CA000202E4FFEC0138000400DC001600F60058027200000086000103680000
3141	 2CD	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x2CA000202E4FFEC0138000400DC001600F60058027200000086000103680000
- stack 0: 0xE0
3142	 2CF	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x2CA0002
3143	 2D0	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x2CA0002
- stack 0: 0xFFFF
3144	 2D3	AND		 	 
- stack 1: 0x62C
- stack 0: 0x2
3145	 2D4	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0x1
3146	 2D6	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x2
3147	 2D7	PUSH2	00A0	 	 
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0xA0
3148	 2DA	MSTORE		 	  ;; # store to x5
- stack 0: 0x62C
3149	 2DB	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3150	 2DD	ADD		 	 
- stack 0: 0x630
3151	 2DE	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3152	 2DF	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x2E4FFEC0138000400DC001600F6005802720000008600010368000003680000
3153	 2E0	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x2E4FFEC0138000400DC001600F6005802720000008600010368000003680000
- stack 0: 0xF0
3154	 2E2	SHR		 	 
- stack 1: 0x630
- stack 0: 0x2E4
3155	 2E3	JUMP		 	 
- stack 0: 0x630
3156	 2E4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x630
3157	 2E5	PUSH2	0080	 	 
- stack 1: 0x630
- stack 0: 0x80
3158	 2E8	MLOAD		 	  ;; # read from x4
- stack 1: 0x630
- stack 0: 0x1
3159	 2E9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3160	 2EE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x630
- stack 0: 0x1
3161	 2EF	PUSH2	00A0	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0xA0
3162	 2F2	MLOAD		 	  ;; # read from x5
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x2
3163	 2F3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x630
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3164	 2F8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x2
3165	 2F9	SUB		 	 
- stack 1: 0x630
- stack 0: 0x1
3166	 2FA	PUSH2	0302	 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x302
3167	 2FD	JUMPI		 	 
- stack 0: 0x630
3168	 302	JUMPDEST		 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 0: 0x630
3169	 303	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3170	 304	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x2E4FFEC0138000400DC001600F6005802720000008600010368000003680000
3171	 305	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x2E4FFEC0138000400DC001600F6005802720000008600010368000003680000
- stack 0: 0xE0
3172	 307	SHR		 	 
- stack 1: 0x630
- stack 0: 0x2E4FFEC
3173	 308	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x2E4FFEC
- stack 0: 0xFFFF
3174	 30B	AND		 	 
- stack 1: 0x630
- stack 0: 0xFFEC
3175	 30C	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0xFFEC
- stack 0: 0x1
3176	 30E	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
3177	 30F	ADD		 	 
- stack 0: 0x61C
3178	 310	PUSH4	FFFFFFFF	 	 
- stack 1: 0x61C
- stack 0: 0xFFFFFFFF
3179	 315	AND		 	  ;; # mask to 32 bits
- stack 0: 0x61C
3180	 316	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3181	 317	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x8600010368000000A0000E02AB000102CA000202E4FFEC0138000400DC0016
3182	 318	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x8600010368000000A0000E02AB000102CA000202E4FFEC0138000400DC0016
- stack 0: 0xF0
3183	 31A	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x86
3184	 31B	JUMP		 	 
- stack 0: 0x61C
3185	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x61C
3186	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3187	 88	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x8600010368000000A0000E02AB000102CA000202E4FFEC0138000400DC0016
3188	 89	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x8600010368000000A0000E02AB000102CA000202E4FFEC0138000400DC0016
- stack 0: 0xE0
3189	 8B	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x860001
3190	 8C	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x860001
- stack 0: 0xFFFF
3191	 8F	AND		 	 
- stack 1: 0x61C
- stack 0: 0x1
3192	 90	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x1
3193	 92	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x1
3194	 93	PUSH2	0020	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x20
3195	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x61C
3196	 97	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3197	 99	ADD		 	 
- stack 0: 0x620
3198	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3199	 9B	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x368000000A0000E02AB000102CA000202E4FFEC0138000400DC001600F60058
3200	 9C	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x368000000A0000E02AB000102CA000202E4FFEC0138000400DC001600F60058
- stack 0: 0xF0
3201	 9E	SHR		 	 
- stack 1: 0x620
- stack 0: 0x368
3202	 9F	JUMP		 	 
- stack 0: 0x620
3203	 368	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x620
3204	 369	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3205	 36A	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x368000000A0000E02AB000102CA000202E4FFEC0138000400DC001600F60058
3206	 36B	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x368000000A0000E02AB000102CA000202E4FFEC0138000400DC001600F60058
- stack 0: 0xE0
3207	 36D	SHR		 	 
- stack 1: 0x620
- stack 0: 0x3680000
3208	 36E	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x3680000
- stack 0: 0xFFFF
3209	 371	AND		 	 
- stack 1: 0x620
- stack 0: 0x0
3210	 372	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x1
3211	 374	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x0
3212	 375	POP		 	 
- stack 0: 0x620
3213	 376	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3214	 378	ADD		 	 
- stack 0: 0x624
3215	 379	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3216	 37A	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xA0000E02AB000102CA000202E4FFEC0138000400DC001600F6005802720000
3217	 37B	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0xA0000E02AB000102CA000202E4FFEC0138000400DC001600F6005802720000
- stack 0: 0xF0
3218	 37D	SHR		 	 
- stack 1: 0x624
- stack 0: 0xA0
3219	 37E	JUMP		 	 
- stack 0: 0x624
3220	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x624
3221	 A1	PUSH2	0020	 	 
- stack 1: 0x624
- stack 0: 0x20
3222	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x624
- stack 0: 0x1
3223	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0x624
3224	 A6	MLOAD		 	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0xA0000E02AB000102CA000202E4FFEC0138000400DC001600F6005802720000
3225	 A7	PUSH1	E0	 	 
- stack 3: 0x624
- stack 2: 0x1
- stack 1: 0xA0000E02AB000102CA000202E4FFEC0138000400DC001600F6005802720000
- stack 0: 0xE0
3226	 A9	SHR		 	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0xA0000E
3227	 AA	PUSH2	FFFF	 	 
- stack 3: 0x624
- stack 2: 0x1
- stack 1: 0xA0000E
- stack 0: 0xFFFF
3228	 AD	AND		 	 
- stack 2: 0x624
- stack 1: 0x1
- stack 0: 0xE
3229	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x624
- stack 0: 0x4000
3230	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
3231	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x4000
3232	 B5	PUSH2	0060	 	 
- stack 2: 0x624
- stack 1: 0x4000
- stack 0: 0x60
3233	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x624
3234	 B9	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3235	 BB	ADD		 	 
- stack 0: 0x628
3236	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3237	 BD	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x2AB000102CA000202E4FFEC0138000400DC001600F600580272000000860001
3238	 BE	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x2AB000102CA000202E4FFEC0138000400DC001600F600580272000000860001
- stack 0: 0xF0
3239	 C0	SHR		 	 
- stack 1: 0x628
- stack 0: 0x2AB
3240	 C1	JUMP		 	 
- stack 0: 0x628
3241	 2AB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x628
3242	 2AC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3243	 2AD	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x2AB000102CA000202E4FFEC0138000400DC001600F600580272000000860001
3244	 2AE	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x2AB000102CA000202E4FFEC0138000400DC001600F600580272000000860001
- stack 0: 0xE0
3245	 2B0	SHR		 	 
- stack 1: 0x628
- stack 0: 0x2AB0001
3246	 2B1	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x2AB0001
- stack 0: 0xFFFF
3247	 2B4	AND		 	 
- stack 1: 0x628
- stack 0: 0x1
3248	 2B5	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x1
3249	 2B7	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x1
3250	 2B8	PUSH2	0080	 	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x80
3251	 2BB	MLOAD		 	  ;; # read from x4
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x1
3252	 2BC	ADD		 	  ;; # ADDI 4
- stack 1: 0x628
- stack 0: 0x2
3253	 2BD	PUSH2	0080	 	 
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0x80
3254	 2C0	MSTORE		 	  ;; # store to x4
- stack 0: 0x628
3255	 2C1	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3256	 2C3	ADD		 	 
- stack 0: 0x62C
3257	 2C4	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3258	 2C5	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x2CA000202E4FFEC0138000400DC001600F60058027200000086000103680000
3259	 2C6	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x2CA000202E4FFEC0138000400DC001600F60058027200000086000103680000
- stack 0: 0xF0
3260	 2C8	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x2CA
3261	 2C9	JUMP		 	 
- stack 0: 0x62C
3262	 2CA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x62C
3263	 2CB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3264	 2CC	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x2CA000202E4FFEC0138000400DC001600F60058027200000086000103680000
3265	 2CD	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x2CA000202E4FFEC0138000400DC001600F60058027200000086000103680000
- stack 0: 0xE0
3266	 2CF	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x2CA0002
3267	 2D0	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x2CA0002
- stack 0: 0xFFFF
3268	 2D3	AND		 	 
- stack 1: 0x62C
- stack 0: 0x2
3269	 2D4	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0x1
3270	 2D6	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x2
3271	 2D7	PUSH2	00A0	 	 
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0xA0
3272	 2DA	MSTORE		 	  ;; # store to x5
- stack 0: 0x62C
3273	 2DB	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3274	 2DD	ADD		 	 
- stack 0: 0x630
3275	 2DE	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3276	 2DF	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x2E4FFEC0138000400DC001600F6005802720000008600010368000003680000
3277	 2E0	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x2E4FFEC0138000400DC001600F6005802720000008600010368000003680000
- stack 0: 0xF0
3278	 2E2	SHR		 	 
- stack 1: 0x630
- stack 0: 0x2E4
3279	 2E3	JUMP		 	 
- stack 0: 0x630
3280	 2E4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x630
3281	 2E5	PUSH2	0080	 	 
- stack 1: 0x630
- stack 0: 0x80
3282	 2E8	MLOAD		 	  ;; # read from x4
- stack 1: 0x630
- stack 0: 0x2
3283	 2E9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3284	 2EE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x630
- stack 0: 0x2
3285	 2EF	PUSH2	00A0	 	 
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0xA0
3286	 2F2	MLOAD		 	  ;; # read from x5
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0x2
3287	 2F3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x630
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3288	 2F8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0x2
3289	 2F9	SUB		 	 
- stack 1: 0x630
- stack 0: 0x0
3290	 2FA	PUSH2	0302	 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x302
3291	 2FD	JUMPI		 	 
- stack 0: 0x630
3292	 2FE	PUSH2	031C	 ;; _neq_after_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 1: 0x630
- stack 0: 0x31C
3293	 301	JUMP		 	 
- stack 0: 0x630
3294	 31C	JUMPDEST		 ;; _neq_after_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 0: 0x630
3295	 31D	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3296	 31F	ADD		 	 
- stack 0: 0x634
3297	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3298	 321	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x138000400DC001600F600580272000000860001036800000368000000A0001F
3299	 322	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x138000400DC001600F600580272000000860001036800000368000000A0001F
- stack 0: 0xF0
3300	 324	SHR		 	 
- stack 1: 0x634
- stack 0: 0x138
3301	 325	JUMP		 	 
- stack 0: 0x634
3302	 138	JUMPDEST		 ;; __riscvimpl_LUI_4eb7	  ;; # instr: lui t4,0x4(ignore imm)
- stack 0: 0x634
3303	 139	PUSH4	00004000	 	 
- stack 1: 0x634
- stack 0: 0x4000
3304	 13E	PUSH2	03A0	 	 
- stack 2: 0x634
- stack 1: 0x4000
- stack 0: 0x3A0
3305	 141	MSTORE		 	  ;; # store to x29
- stack 0: 0x634
3306	 142	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3307	 144	ADD		 	 
- stack 0: 0x638
3308	 145	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3309	 146	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xDC001600F600580272000000860001036800000368000000A0001F02AB0001
3310	 147	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0xDC001600F600580272000000860001036800000368000000A0001F02AB0001
- stack 0: 0xF0
3311	 149	SHR		 	 
- stack 1: 0x638
- stack 0: 0xDC
3312	 14A	JUMP		 	 
- stack 0: 0x638
3313	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x638
3314	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3315	 DE	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xDC001600F600580272000000860001036800000368000000A0001F02AB0001
3316	 DF	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0xDC001600F600580272000000860001036800000368000000A0001F02AB0001
- stack 0: 0xE0
3317	 E1	SHR		 	 
- stack 1: 0x638
- stack 0: 0xDC0016
3318	 E2	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0xDC0016
- stack 0: 0xFFFF
3319	 E5	AND		 	 
- stack 1: 0x638
- stack 0: 0x16
3320	 E6	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x16
- stack 0: 0x1
3321	 E8	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x16
3322	 E9	PUSH2	0380	 	 
- stack 2: 0x638
- stack 1: 0x16
- stack 0: 0x380
3323	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x638
3324	 ED	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3325	 EF	ADD		 	 
- stack 0: 0x63C
3326	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3327	 F1	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xF600580272000000860001036800000368000000A0001F02AB000102CA0002
3328	 F2	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xF600580272000000860001036800000368000000A0001F02AB000102CA0002
- stack 0: 0xF0
3329	 F4	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xF6
3330	 F5	JUMP		 	 
- stack 0: 0x63C
3331	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x63C
3332	 F7	PUSH2	0060	 	 
- stack 1: 0x63C
- stack 0: 0x60
3333	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x63C
- stack 0: 0x4000
3334	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x63C
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
3335	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x63C
- stack 0: 0x4000
3336	 101	PUSH2	03A0	 	 
- stack 2: 0x63C
- stack 1: 0x4000
- stack 0: 0x3A0
3337	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x63C
- stack 1: 0x4000
- stack 0: 0x4000
3338	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x63C
- stack 2: 0x4000
- stack 1: 0x4000
- stack 0: 0xFFFFFFFF
3339	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x63C
- stack 1: 0x4000
- stack 0: 0x4000
3340	 10B	SUB		 	 
- stack 1: 0x63C
- stack 0: 0x0
3341	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x114
3342	 10F	JUMPI		 	 
- stack 0: 0x63C
3343	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x63C
- stack 0: 0x12E
3344	 113	JUMP		 	 
- stack 0: 0x63C
3345	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x63C
3346	 12F	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3347	 131	ADD		 	 
- stack 0: 0x640
3348	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3349	 133	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x272000000860001036800000368000000A0001F02AB000102CA000202E4FFE8
3350	 134	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x272000000860001036800000368000000A0001F02AB000102CA000202E4FFE8
- stack 0: 0xF0
3351	 136	SHR		 	 
- stack 1: 0x640
- stack 0: 0x272
3352	 137	JUMP		 	 
- stack 0: 0x640
3353	 272	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x640
3354	 273	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3355	 274	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x272000000860001036800000368000000A0001F02AB000102CA000202E4FFE8
3356	 275	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x272000000860001036800000368000000A0001F02AB000102CA000202E4FFE8
- stack 0: 0xE0
3357	 277	SHR		 	 
- stack 1: 0x640
- stack 0: 0x2720000
3358	 278	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x2720000
- stack 0: 0xFFFF
3359	 27B	AND		 	 
- stack 1: 0x640
- stack 0: 0x0
3360	 27C	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x1
3361	 27E	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x0
3362	 27F	PUSH2	0080	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x80
3363	 282	MSTORE		 	  ;; # store to x4
- stack 0: 0x640
3364	 283	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3365	 285	ADD		 	 
- stack 0: 0x644
3366	 286	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3367	 287	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x860001036800000368000000A0001F02AB000102CA000202E4FFE8014B0000
3368	 288	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x860001036800000368000000A0001F02AB000102CA000202E4FFE8014B0000
- stack 0: 0xF0
3369	 28A	SHR		 	 
- stack 1: 0x644
- stack 0: 0x86
3370	 28B	JUMP		 	 
- stack 0: 0x644
3371	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x644
3372	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3373	 88	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x860001036800000368000000A0001F02AB000102CA000202E4FFE8014B0000
3374	 89	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x860001036800000368000000A0001F02AB000102CA000202E4FFE8014B0000
- stack 0: 0xE0
3375	 8B	SHR		 	 
- stack 1: 0x644
- stack 0: 0x860001
3376	 8C	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x860001
- stack 0: 0xFFFF
3377	 8F	AND		 	 
- stack 1: 0x644
- stack 0: 0x1
3378	 90	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
3379	 92	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x1
3380	 93	PUSH2	0020	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x20
3381	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x644
3382	 97	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3383	 99	ADD		 	 
- stack 0: 0x648
3384	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3385	 9B	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x36800000368000000A0001F02AB000102CA000202E4FFE8014B000000DC0017
3386	 9C	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x36800000368000000A0001F02AB000102CA000202E4FFE8014B000000DC0017
- stack 0: 0xF0
3387	 9E	SHR		 	 
- stack 1: 0x648
- stack 0: 0x368
3388	 9F	JUMP		 	 
- stack 0: 0x648
3389	 368	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x648
3390	 369	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3391	 36A	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x36800000368000000A0001F02AB000102CA000202E4FFE8014B000000DC0017
3392	 36B	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x36800000368000000A0001F02AB000102CA000202E4FFE8014B000000DC0017
- stack 0: 0xE0
3393	 36D	SHR		 	 
- stack 1: 0x648
- stack 0: 0x3680000
3394	 36E	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x3680000
- stack 0: 0xFFFF
3395	 371	AND		 	 
- stack 1: 0x648
- stack 0: 0x0
3396	 372	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x1
3397	 374	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x0
3398	 375	POP		 	 
- stack 0: 0x648
3399	 376	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3400	 378	ADD		 	 
- stack 0: 0x64C
3401	 379	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3402	 37A	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x368000000A0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C
3403	 37B	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x368000000A0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C
- stack 0: 0xF0
3404	 37D	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x368
3405	 37E	JUMP		 	 
- stack 0: 0x64C
3406	 368	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x64C
3407	 369	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3408	 36A	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x368000000A0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C
3409	 36B	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x368000000A0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C
- stack 0: 0xE0
3410	 36D	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x3680000
3411	 36E	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x3680000
- stack 0: 0xFFFF
3412	 371	AND		 	 
- stack 1: 0x64C
- stack 0: 0x0
3413	 372	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x1
3414	 374	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x0
3415	 375	POP		 	 
- stack 0: 0x64C
3416	 376	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3417	 378	ADD		 	 
- stack 0: 0x650
3418	 379	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3419	 37A	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0xA0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F
3420	 37B	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0xA0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F
- stack 0: 0xF0
3421	 37D	SHR		 	 
- stack 1: 0x650
- stack 0: 0xA0
3422	 37E	JUMP		 	 
- stack 0: 0x650
3423	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x650
3424	 A1	PUSH2	0020	 	 
- stack 1: 0x650
- stack 0: 0x20
3425	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x650
- stack 0: 0x1
3426	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x650
3427	 A6	MLOAD		 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0xA0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F
3428	 A7	PUSH1	E0	 	 
- stack 3: 0x650
- stack 2: 0x1
- stack 1: 0xA0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F
- stack 0: 0xE0
3429	 A9	SHR		 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0xA0001F
3430	 AA	PUSH2	FFFF	 	 
- stack 3: 0x650
- stack 2: 0x1
- stack 1: 0xA0001F
- stack 0: 0xFFFF
3431	 AD	AND		 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x1F
3432	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x650
- stack 0: 0x80000000
3433	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x650
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
3434	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x650
- stack 0: 0x80000000
3435	 B5	PUSH2	0060	 	 
- stack 2: 0x650
- stack 1: 0x80000000
- stack 0: 0x60
3436	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x650
3437	 B9	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3438	 BB	ADD		 	 
- stack 0: 0x654
3439	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3440	 BD	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x2AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F00C20000
3441	 BE	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x2AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F00C20000
- stack 0: 0xF0
3442	 C0	SHR		 	 
- stack 1: 0x654
- stack 0: 0x2AB
3443	 C1	JUMP		 	 
- stack 0: 0x654
3444	 2AB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x654
3445	 2AC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3446	 2AD	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x2AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F00C20000
3447	 2AE	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x2AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F00C20000
- stack 0: 0xE0
3448	 2B0	SHR		 	 
- stack 1: 0x654
- stack 0: 0x2AB0001
3449	 2B1	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x2AB0001
- stack 0: 0xFFFF
3450	 2B4	AND		 	 
- stack 1: 0x654
- stack 0: 0x1
3451	 2B5	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x1
3452	 2B7	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x1
3453	 2B8	PUSH2	0080	 	 
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x80
3454	 2BB	MLOAD		 	  ;; # read from x4
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x0
3455	 2BC	ADD		 	  ;; # ADDI 4
- stack 1: 0x654
- stack 0: 0x1
3456	 2BD	PUSH2	0080	 	 
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x80
3457	 2C0	MSTORE		 	  ;; # store to x4
- stack 0: 0x654
3458	 2C1	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3459	 2C3	ADD		 	 
- stack 0: 0x658
3460	 2C4	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3461	 2C5	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2CA000202E4FFE8014B000000DC001700F6002C037F001F00C2000000DC0018
3462	 2C6	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x2CA000202E4FFE8014B000000DC001700F6002C037F001F00C2000000DC0018
- stack 0: 0xF0
3463	 2C8	SHR		 	 
- stack 1: 0x658
- stack 0: 0x2CA
3464	 2C9	JUMP		 	 
- stack 0: 0x658
3465	 2CA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x658
3466	 2CB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3467	 2CC	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2CA000202E4FFE8014B000000DC001700F6002C037F001F00C2000000DC0018
3468	 2CD	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x2CA000202E4FFE8014B000000DC001700F6002C037F001F00C2000000DC0018
- stack 0: 0xE0
3469	 2CF	SHR		 	 
- stack 1: 0x658
- stack 0: 0x2CA0002
3470	 2D0	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x2CA0002
- stack 0: 0xFFFF
3471	 2D3	AND		 	 
- stack 1: 0x658
- stack 0: 0x2
3472	 2D4	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0x1
3473	 2D6	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x2
3474	 2D7	PUSH2	00A0	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0xA0
3475	 2DA	MSTORE		 	  ;; # store to x5
- stack 0: 0x658
3476	 2DB	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3477	 2DD	ADD		 	 
- stack 0: 0x65C
3478	 2DE	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3479	 2DF	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x2E4FFE8014B000000DC001700F6002C037F001F00C2000000DC00180230001C
3480	 2E0	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x2E4FFE8014B000000DC001700F6002C037F001F00C2000000DC00180230001C
- stack 0: 0xF0
3481	 2E2	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x2E4
3482	 2E3	JUMP		 	 
- stack 0: 0x65C
3483	 2E4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x65C
3484	 2E5	PUSH2	0080	 	 
- stack 1: 0x65C
- stack 0: 0x80
3485	 2E8	MLOAD		 	  ;; # read from x4
- stack 1: 0x65C
- stack 0: 0x1
3486	 2E9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x65C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3487	 2EE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x65C
- stack 0: 0x1
3488	 2EF	PUSH2	00A0	 	 
- stack 2: 0x65C
- stack 1: 0x1
- stack 0: 0xA0
3489	 2F2	MLOAD		 	  ;; # read from x5
- stack 2: 0x65C
- stack 1: 0x1
- stack 0: 0x2
3490	 2F3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x65C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3491	 2F8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x65C
- stack 1: 0x1
- stack 0: 0x2
3492	 2F9	SUB		 	 
- stack 1: 0x65C
- stack 0: 0x1
3493	 2FA	PUSH2	0302	 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 2: 0x65C
- stack 1: 0x1
- stack 0: 0x302
3494	 2FD	JUMPI		 	 
- stack 0: 0x65C
3495	 302	JUMPDEST		 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 0: 0x65C
3496	 303	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3497	 304	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x2E4FFE8014B000000DC001700F6002C037F001F00C2000000DC00180230001C
3498	 305	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x2E4FFE8014B000000DC001700F6002C037F001F00C2000000DC00180230001C
- stack 0: 0xE0
3499	 307	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x2E4FFE8
3500	 308	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x2E4FFE8
- stack 0: 0xFFFF
3501	 30B	AND		 	 
- stack 1: 0x65C
- stack 0: 0xFFE8
3502	 30C	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0xFFE8
- stack 0: 0x1
3503	 30E	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
3504	 30F	ADD		 	 
- stack 0: 0x644
3505	 310	PUSH4	FFFFFFFF	 	 
- stack 1: 0x644
- stack 0: 0xFFFFFFFF
3506	 315	AND		 	  ;; # mask to 32 bits
- stack 0: 0x644
3507	 316	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3508	 317	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x860001036800000368000000A0001F02AB000102CA000202E4FFE8014B0000
3509	 318	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x860001036800000368000000A0001F02AB000102CA000202E4FFE8014B0000
- stack 0: 0xF0
3510	 31A	SHR		 	 
- stack 1: 0x644
- stack 0: 0x86
3511	 31B	JUMP		 	 
- stack 0: 0x644
3512	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x644
3513	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3514	 88	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x860001036800000368000000A0001F02AB000102CA000202E4FFE8014B0000
3515	 89	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x860001036800000368000000A0001F02AB000102CA000202E4FFE8014B0000
- stack 0: 0xE0
3516	 8B	SHR		 	 
- stack 1: 0x644
- stack 0: 0x860001
3517	 8C	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x860001
- stack 0: 0xFFFF
3518	 8F	AND		 	 
- stack 1: 0x644
- stack 0: 0x1
3519	 90	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
3520	 92	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x1
3521	 93	PUSH2	0020	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x20
3522	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x644
3523	 97	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3524	 99	ADD		 	 
- stack 0: 0x648
3525	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3526	 9B	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x36800000368000000A0001F02AB000102CA000202E4FFE8014B000000DC0017
3527	 9C	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x36800000368000000A0001F02AB000102CA000202E4FFE8014B000000DC0017
- stack 0: 0xF0
3528	 9E	SHR		 	 
- stack 1: 0x648
- stack 0: 0x368
3529	 9F	JUMP		 	 
- stack 0: 0x648
3530	 368	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x648
3531	 369	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3532	 36A	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x36800000368000000A0001F02AB000102CA000202E4FFE8014B000000DC0017
3533	 36B	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x36800000368000000A0001F02AB000102CA000202E4FFE8014B000000DC0017
- stack 0: 0xE0
3534	 36D	SHR		 	 
- stack 1: 0x648
- stack 0: 0x3680000
3535	 36E	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x3680000
- stack 0: 0xFFFF
3536	 371	AND		 	 
- stack 1: 0x648
- stack 0: 0x0
3537	 372	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x1
3538	 374	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x0
3539	 375	POP		 	 
- stack 0: 0x648
3540	 376	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3541	 378	ADD		 	 
- stack 0: 0x64C
3542	 379	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3543	 37A	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x368000000A0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C
3544	 37B	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x368000000A0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C
- stack 0: 0xF0
3545	 37D	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x368
3546	 37E	JUMP		 	 
- stack 0: 0x64C
3547	 368	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x64C
3548	 369	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3549	 36A	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x368000000A0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C
3550	 36B	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x368000000A0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C
- stack 0: 0xE0
3551	 36D	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x3680000
3552	 36E	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x3680000
- stack 0: 0xFFFF
3553	 371	AND		 	 
- stack 1: 0x64C
- stack 0: 0x0
3554	 372	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x1
3555	 374	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x0
3556	 375	POP		 	 
- stack 0: 0x64C
3557	 376	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3558	 378	ADD		 	 
- stack 0: 0x650
3559	 379	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3560	 37A	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0xA0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F
3561	 37B	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0xA0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F
- stack 0: 0xF0
3562	 37D	SHR		 	 
- stack 1: 0x650
- stack 0: 0xA0
3563	 37E	JUMP		 	 
- stack 0: 0x650
3564	 A0	JUMPDEST		 ;; __riscvimpl_SLLI_3_1_0	  ;; # instr: slli gp,ra,0(ignore imm)
- stack 0: 0x650
3565	 A1	PUSH2	0020	 	 
- stack 1: 0x650
- stack 0: 0x20
3566	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x650
- stack 0: 0x1
3567	 A5	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x650
3568	 A6	MLOAD		 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0xA0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F
3569	 A7	PUSH1	E0	 	 
- stack 3: 0x650
- stack 2: 0x1
- stack 1: 0xA0001F02AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F
- stack 0: 0xE0
3570	 A9	SHR		 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0xA0001F
3571	 AA	PUSH2	FFFF	 	 
- stack 3: 0x650
- stack 2: 0x1
- stack 1: 0xA0001F
- stack 0: 0xFFFF
3572	 AD	AND		 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x1F
3573	 AE	SHL		 	  ;; # SLLI
- stack 1: 0x650
- stack 0: 0x80000000
3574	 AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x650
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
3575	 B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x650
- stack 0: 0x80000000
3576	 B5	PUSH2	0060	 	 
- stack 2: 0x650
- stack 1: 0x80000000
- stack 0: 0x60
3577	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x650
3578	 B9	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3579	 BB	ADD		 	 
- stack 0: 0x654
3580	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3581	 BD	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x2AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F00C20000
3582	 BE	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x2AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F00C20000
- stack 0: 0xF0
3583	 C0	SHR		 	 
- stack 1: 0x654
- stack 0: 0x2AB
3584	 C1	JUMP		 	 
- stack 0: 0x654
3585	 2AB	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x654
3586	 2AC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3587	 2AD	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x2AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F00C20000
3588	 2AE	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x2AB000102CA000202E4FFE8014B000000DC001700F6002C037F001F00C20000
- stack 0: 0xE0
3589	 2B0	SHR		 	 
- stack 1: 0x654
- stack 0: 0x2AB0001
3590	 2B1	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x2AB0001
- stack 0: 0xFFFF
3591	 2B4	AND		 	 
- stack 1: 0x654
- stack 0: 0x1
3592	 2B5	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x1
3593	 2B7	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x1
3594	 2B8	PUSH2	0080	 	 
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x80
3595	 2BB	MLOAD		 	  ;; # read from x4
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x1
3596	 2BC	ADD		 	  ;; # ADDI 4
- stack 1: 0x654
- stack 0: 0x2
3597	 2BD	PUSH2	0080	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x80
3598	 2C0	MSTORE		 	  ;; # store to x4
- stack 0: 0x654
3599	 2C1	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3600	 2C3	ADD		 	 
- stack 0: 0x658
3601	 2C4	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3602	 2C5	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2CA000202E4FFE8014B000000DC001700F6002C037F001F00C2000000DC0018
3603	 2C6	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x2CA000202E4FFE8014B000000DC001700F6002C037F001F00C2000000DC0018
- stack 0: 0xF0
3604	 2C8	SHR		 	 
- stack 1: 0x658
- stack 0: 0x2CA
3605	 2C9	JUMP		 	 
- stack 0: 0x658
3606	 2CA	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x658
3607	 2CB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3608	 2CC	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2CA000202E4FFE8014B000000DC001700F6002C037F001F00C2000000DC0018
3609	 2CD	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x2CA000202E4FFE8014B000000DC001700F6002C037F001F00C2000000DC0018
- stack 0: 0xE0
3610	 2CF	SHR		 	 
- stack 1: 0x658
- stack 0: 0x2CA0002
3611	 2D0	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x2CA0002
- stack 0: 0xFFFF
3612	 2D3	AND		 	 
- stack 1: 0x658
- stack 0: 0x2
3613	 2D4	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0x1
3614	 2D6	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x2
3615	 2D7	PUSH2	00A0	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0xA0
3616	 2DA	MSTORE		 	  ;; # store to x5
- stack 0: 0x658
3617	 2DB	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3618	 2DD	ADD		 	 
- stack 0: 0x65C
3619	 2DE	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3620	 2DF	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x2E4FFE8014B000000DC001700F6002C037F001F00C2000000DC00180230001C
3621	 2E0	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x2E4FFE8014B000000DC001700F6002C037F001F00C2000000DC00180230001C
- stack 0: 0xF0
3622	 2E2	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x2E4
3623	 2E3	JUMP		 	 
- stack 0: 0x65C
3624	 2E4	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x65C
3625	 2E5	PUSH2	0080	 	 
- stack 1: 0x65C
- stack 0: 0x80
3626	 2E8	MLOAD		 	  ;; # read from x4
- stack 1: 0x65C
- stack 0: 0x2
3627	 2E9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3628	 2EE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x65C
- stack 0: 0x2
3629	 2EF	PUSH2	00A0	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0xA0
3630	 2F2	MLOAD		 	  ;; # read from x5
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0x2
3631	 2F3	PUSH4	FFFFFFFF	 	 
- stack 3: 0x65C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3632	 2F8	AND		 	  ;; # mask to 32 bits
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0x2
3633	 2F9	SUB		 	 
- stack 1: 0x65C
- stack 0: 0x0
3634	 2FA	PUSH2	0302	 ;; _neq_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x302
3635	 2FD	JUMPI		 	 
- stack 0: 0x65C
3636	 2FE	PUSH2	031C	 ;; _neq_after_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 1: 0x65C
- stack 0: 0x31C
3637	 301	JUMP		 	 
- stack 0: 0x65C
3638	 31C	JUMPDEST		 ;; _neq_after_c3726a744a76a4b2e2155b20b4b85e10669b31e72c751df0eecd45cfd35a9991	 
- stack 0: 0x65C
3639	 31D	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3640	 31F	ADD		 	 
- stack 0: 0x660
3641	 320	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3642	 321	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x14B000000DC001700F6002C037F001F00C2000000DC00180230001C00860021
3643	 322	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x14B000000DC001700F6002C037F001F00C2000000DC00180230001C00860021
- stack 0: 0xF0
3644	 324	SHR		 	 
- stack 1: 0x660
- stack 0: 0x14B
3645	 325	JUMP		 	 
- stack 0: 0x660
3646	 14B	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x660
3647	 14C	PUSH4	80000000	 	 
- stack 1: 0x660
- stack 0: 0x80000000
3648	 151	PUSH2	03A0	 	 
- stack 2: 0x660
- stack 1: 0x80000000
- stack 0: 0x3A0
3649	 154	MSTORE		 	  ;; # store to x29
- stack 0: 0x660
3650	 155	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3651	 157	ADD		 	 
- stack 0: 0x664
3652	 158	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3653	 159	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xDC001700F6002C037F001F00C2000000DC00180230001C00860021039F0014
3654	 15A	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0xDC001700F6002C037F001F00C2000000DC00180230001C00860021039F0014
- stack 0: 0xF0
3655	 15C	SHR		 	 
- stack 1: 0x664
- stack 0: 0xDC
3656	 15D	JUMP		 	 
- stack 0: 0x664
3657	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x664
3658	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
3659	 DE	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xDC001700F6002C037F001F00C2000000DC00180230001C00860021039F0014
3660	 DF	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0xDC001700F6002C037F001F00C2000000DC00180230001C00860021039F0014
- stack 0: 0xE0
3661	 E1	SHR		 	 
- stack 1: 0x664
- stack 0: 0xDC0017
3662	 E2	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0xDC0017
- stack 0: 0xFFFF
3663	 E5	AND		 	 
- stack 1: 0x664
- stack 0: 0x17
3664	 E6	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x17
- stack 0: 0x1
3665	 E8	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x17
3666	 E9	PUSH2	0380	 	 
- stack 2: 0x664
- stack 1: 0x17
- stack 0: 0x380
3667	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x664
3668	 ED	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3669	 EF	ADD		 	 
- stack 0: 0x668
3670	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3671	 F1	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0xF6002C037F001F00C2000000DC00180230001C00860021039F001400C20000
3672	 F2	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0xF6002C037F001F00C2000000DC00180230001C00860021039F001400C20000
- stack 0: 0xF0
3673	 F4	SHR		 	 
- stack 1: 0x668
- stack 0: 0xF6
3674	 F5	JUMP		 	 
- stack 0: 0x668
3675	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,274(ignore imm)
- stack 0: 0x668
3676	 F7	PUSH2	0060	 	 
- stack 1: 0x668
- stack 0: 0x60
3677	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x668
- stack 0: 0x80000000
3678	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x668
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
3679	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x668
- stack 0: 0x80000000
3680	 101	PUSH2	03A0	 	 
- stack 2: 0x668
- stack 1: 0x80000000
- stack 0: 0x3A0
3681	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x668
- stack 1: 0x80000000
- stack 0: 0x80000000
3682	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x668
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
3683	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x668
- stack 1: 0x80000000
- stack 0: 0x80000000
3684	 10B	SUB		 	 
- stack 1: 0x668
- stack 0: 0x0
3685	 10C	PUSH2	0114	 ;; _neq_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x114
3686	 10F	JUMPI		 	 
- stack 0: 0x668
3687	 110	PUSH2	012E	 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 1: 0x668
- stack 0: 0x12E
3688	 113	JUMP		 	 
- stack 0: 0x668
3689	 12E	JUMPDEST		 ;; _neq_after_fc93144594025fdc3a20ff4fa90ee1493605cd91efd061251d055507074ee7af	 
- stack 0: 0x668
3690	 12F	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3691	 131	ADD		 	 
- stack 0: 0x66C
3692	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3693	 133	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x37F001F00C2000000DC00180230001C00860021039F001400C2000000DC0019
3694	 134	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x37F001F00C2000000DC00180230001C00860021039F001400C2000000DC0019
- stack 0: 0xF0
3695	 136	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x37F
3696	 137	JUMP		 	 
- stack 0: 0x66C
3697	 37F	JUMPDEST		 ;; __riscvimpl_SLLI_1_0_0	  ;; # instr: slli ra,zero,31(ignore imm)
- stack 0: 0x66C
3698	 380	PUSH1	00	 	 
- stack 1: 0x66C
- stack 0: 0x0
3699	 382	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x66C
3700	 383	MLOAD		 	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x37F001F00C2000000DC00180230001C00860021039F001400C2000000DC0019
3701	 384	PUSH1	E0	 	 
- stack 3: 0x66C
- stack 2: 0x0
- stack 1: 0x37F001F00C2000000DC00180230001C00860021039F001400C2000000DC0019
- stack 0: 0xE0
3702	 386	SHR		 	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x37F001F
3703	 387	PUSH2	FFFF	 	 
- stack 3: 0x66C
- stack 2: 0x0
- stack 1: 0x37F001F
- stack 0: 0xFFFF
3704	 38A	AND		 	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x1F
3705	 38B	SHL		 	  ;; # SLLI
- stack 1: 0x66C
- stack 0: 0x0
3706	 38C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3707	 391	AND		 	  ;; # mask to 32 bits
- stack 1: 0x66C
- stack 0: 0x0
3708	 392	PUSH2	0020	 	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x20
3709	 395	MSTORE		 	  ;; # store to x1
- stack 0: 0x66C
3710	 396	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3711	 398	ADD		 	 
- stack 0: 0x670
3712	 399	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3713	 39A	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xC2000000DC00180230001C00860021039F001400C2000000DC001903B80008
3714	 39B	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0xC2000000DC00180230001C00860021039F001400C2000000DC001903B80008
- stack 0: 0xF0
3715	 39D	SHR		 	 
- stack 1: 0x670
- stack 0: 0xC2
3716	 39E	JUMP		 	 
- stack 0: 0x670
3717	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x670
3718	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
3719	 C4	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xC2000000DC00180230001C00860021039F001400C2000000DC001903B80008
3720	 C5	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0xC2000000DC00180230001C00860021039F001400C2000000DC001903B80008
- stack 0: 0xE0
3721	 C7	SHR		 	 
- stack 1: 0x670
- stack 0: 0xC20000
3722	 C8	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0xC20000
- stack 0: 0xFFFF
3723	 CB	AND		 	 
- stack 1: 0x670
- stack 0: 0x0
3724	 CC	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x0
- stack 0: 0x1
3725	 CE	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x0
3726	 CF	PUSH2	03A0	 	 
- stack 2: 0x670
- stack 1: 0x0
- stack 0: 0x3A0
3727	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x670
3728	 D3	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3729	 D5	ADD		 	 
- stack 0: 0x674
3730	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3731	 D7	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xDC00180230001C00860021039F001400C2000000DC001903B8000803F80018
3732	 D8	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0xDC00180230001C00860021039F001400C2000000DC001903B8000803F80018
- stack 0: 0xF0
3733	 DA	SHR		 	 
- stack 1: 0x674
- stack 0: 0xDC
3734	 DB	JUMP		 	 
- stack 0: 0x674
3735	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x674
3736	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
3737	 DE	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xDC00180230001C00860021039F001400C2000000DC001903B8000803F80018
3738	 DF	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0xDC00180230001C00860021039F001400C2000000DC001903B8000803F80018
- stack 0: 0xE0
3739	 E1	SHR		 	 
- stack 1: 0x674
- stack 0: 0xDC0018
3740	 E2	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0xDC0018
- stack 0: 0xFFFF
3741	 E5	AND		 	 
- stack 1: 0x674
- stack 0: 0x18
3742	 E6	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x18
- stack 0: 0x1
3743	 E8	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x18
3744	 E9	PUSH2	0380	 	 
- stack 2: 0x674
- stack 1: 0x18
- stack 0: 0x380
3745	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x674
3746	 ED	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3747	 EF	ADD		 	 
- stack 0: 0x678
3748	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3749	 F1	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x230001C00860021039F001400C2000000DC001903B8000803F8001800210000
3750	 F2	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x230001C00860021039F001400C2000000DC001903B8000803F8001800210000
- stack 0: 0xF0
3751	 F4	SHR		 	 
- stack 1: 0x678
- stack 0: 0x230
3752	 F5	JUMP		 	 
- stack 0: 0x678
3753	 230	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,128(ignore imm)
- stack 0: 0x678
3754	 231	PUSH2	0020	 	 
- stack 1: 0x678
- stack 0: 0x20
3755	 234	MLOAD		 	  ;; # read from x1
- stack 1: 0x678
- stack 0: 0x0
3756	 235	PUSH4	FFFFFFFF	 	 
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3757	 23A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x678
- stack 0: 0x0
3758	 23B	PUSH2	03A0	 	 
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0x3A0
3759	 23E	MLOAD		 	  ;; # read from x29
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0x0
3760	 23F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x678
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3761	 244	AND		 	  ;; # mask to 32 bits
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0x0
3762	 245	SUB		 	 
- stack 1: 0x678
- stack 0: 0x0
3763	 246	PUSH2	024E	 ;; _neq_dc8ae426bddc8ee88af486b5927fd02eb1e138f5ee6e00243f4bd1905e2da377	 
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0x24E
3764	 249	JUMPI		 	 
- stack 0: 0x678
3765	 24A	PUSH2	0268	 ;; _neq_after_dc8ae426bddc8ee88af486b5927fd02eb1e138f5ee6e00243f4bd1905e2da377	 
- stack 1: 0x678
- stack 0: 0x268
3766	 24D	JUMP		 	 
- stack 0: 0x678
3767	 268	JUMPDEST		 ;; _neq_after_dc8ae426bddc8ee88af486b5927fd02eb1e138f5ee6e00243f4bd1905e2da377	 
- stack 0: 0x678
3768	 269	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3769	 26B	ADD		 	 
- stack 0: 0x67C
3770	 26C	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3771	 26D	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x860021039F001400C2000000DC001903B8000803F8001800210000003406C8
3772	 26E	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x860021039F001400C2000000DC001903B8000803F8001800210000003406C8
- stack 0: 0xF0
3773	 270	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x86
3774	 271	JUMP		 	 
- stack 0: 0x67C
3775	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,1(ignore imm)
- stack 0: 0x67C
3776	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
3777	 88	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x860021039F001400C2000000DC001903B8000803F8001800210000003406C8
3778	 89	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x860021039F001400C2000000DC001903B8000803F8001800210000003406C8
- stack 0: 0xE0
3779	 8B	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x860021
3780	 8C	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x860021
- stack 0: 0xFFFF
3781	 8F	AND		 	 
- stack 1: 0x67C
- stack 0: 0x21
3782	 90	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x21
- stack 0: 0x1
3783	 92	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x21
3784	 93	PUSH2	0020	 	 
- stack 2: 0x67C
- stack 1: 0x21
- stack 0: 0x20
3785	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x67C
3786	 97	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3787	 99	ADD		 	 
- stack 0: 0x680
3788	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3789	 9B	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x39F001400C2000000DC001903B8000803F8001800210000003406C800530042
3790	 9C	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x39F001400C2000000DC001903B8000803F8001800210000003406C800530042
- stack 0: 0xF0
3791	 9E	SHR		 	 
- stack 1: 0x680
- stack 0: 0x39F
3792	 9F	JUMP		 	 
- stack 0: 0x680
3793	 39F	JUMPDEST		 ;; __riscvimpl_SLLI_0_1_0	  ;; # instr: slli zero,ra,20(ignore imm)
- stack 0: 0x680
3794	 3A0	PUSH2	0020	 	 
- stack 1: 0x680
- stack 0: 0x20
3795	 3A3	MLOAD		 	  ;; # read from x1
- stack 1: 0x680
- stack 0: 0x21
3796	 3A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x680
- stack 1: 0x21
- stack 0: 0x680
3797	 3A5	MLOAD		 	 
- stack 2: 0x680
- stack 1: 0x21
- stack 0: 0x39F001400C2000000DC001903B8000803F8001800210000003406C800530042
3798	 3A6	PUSH1	E0	 	 
- stack 3: 0x680
- stack 2: 0x21
- stack 1: 0x39F001400C2000000DC001903B8000803F8001800210000003406C800530042
- stack 0: 0xE0
3799	 3A8	SHR		 	 
- stack 2: 0x680
- stack 1: 0x21
- stack 0: 0x39F0014
3800	 3A9	PUSH2	FFFF	 	 
- stack 3: 0x680
- stack 2: 0x21
- stack 1: 0x39F0014
- stack 0: 0xFFFF
3801	 3AC	AND		 	 
- stack 2: 0x680
- stack 1: 0x21
- stack 0: 0x14
3802	 3AD	SHL		 	  ;; # SLLI
- stack 1: 0x680
- stack 0: 0x2100000
3803	 3AE	POP		 	 
- stack 0: 0x680
3804	 3AF	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
3805	 3B1	ADD		 	 
- stack 0: 0x684
3806	 3B2	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
3807	 3B3	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xC2000000DC001903B8000803F8001800210000003406C80053004200660000
3808	 3B4	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0xC2000000DC001903B8000803F8001800210000003406C80053004200660000
- stack 0: 0xF0
3809	 3B6	SHR		 	 
- stack 1: 0x684
- stack 0: 0xC2
3810	 3B7	JUMP		 	 
- stack 0: 0x684
3811	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,1(ignore imm)
- stack 0: 0x684
3812	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
3813	 C4	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xC2000000DC001903B8000803F8001800210000003406C80053004200660000
3814	 C5	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0xC2000000DC001903B8000803F8001800210000003406C80053004200660000
- stack 0: 0xE0
3815	 C7	SHR		 	 
- stack 1: 0x684
- stack 0: 0xC20000
3816	 C8	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0xC20000
- stack 0: 0xFFFF
3817	 CB	AND		 	 
- stack 1: 0x684
- stack 0: 0x0
3818	 CC	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x1
3819	 CE	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x0
3820	 CF	PUSH2	03A0	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x3A0
3821	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x684
3822	 D3	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
3823	 D5	ADD		 	 
- stack 0: 0x688
3824	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
3825	 D7	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0xDC001903B8000803F8001800210000003406C8005300420066000004380001
3826	 D8	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0xDC001903B8000803F8001800210000003406C8005300420066000004380001
- stack 0: 0xF0
3827	 DA	SHR		 	 
- stack 1: 0x688
- stack 0: 0xDC
3828	 DB	JUMP		 	 
- stack 0: 0x688
3829	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x688
3830	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
3831	 DE	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0xDC001903B8000803F8001800210000003406C8005300420066000004380001
3832	 DF	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0xDC001903B8000803F8001800210000003406C8005300420066000004380001
- stack 0: 0xE0
3833	 E1	SHR		 	 
- stack 1: 0x688
- stack 0: 0xDC0019
3834	 E2	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0xDC0019
- stack 0: 0xFFFF
3835	 E5	AND		 	 
- stack 1: 0x688
- stack 0: 0x19
3836	 E6	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x19
- stack 0: 0x1
3837	 E8	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x19
3838	 E9	PUSH2	0380	 	 
- stack 2: 0x688
- stack 1: 0x19
- stack 0: 0x380
3839	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x688
3840	 ED	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
3841	 EF	ADD		 	 
- stack 0: 0x68C
3842	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
3843	 F1	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x3B8000803F8001800210000003406C800530042006600000438000100210000
3844	 F2	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x3B8000803F8001800210000003406C800530042006600000438000100210000
- stack 0: 0xF0
3845	 F4	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x3B8
3846	 F5	JUMP		 	 
- stack 0: 0x68C
3847	 3B8	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x68C
3848	 3B9	PUSH1	00	 	 
- stack 1: 0x68C
- stack 0: 0x0
3849	 3BB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3850	 3C0	AND		 	  ;; # mask to 32 bits
- stack 1: 0x68C
- stack 0: 0x0
3851	 3C1	PUSH2	03A0	 	 
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x3A0
3852	 3C4	MLOAD		 	  ;; # read from x29
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x0
3853	 3C5	PUSH4	FFFFFFFF	 	 
- stack 3: 0x68C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3854	 3CA	AND		 	  ;; # mask to 32 bits
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x0
3855	 3CB	SUB		 	 
- stack 1: 0x68C
- stack 0: 0x0
3856	 3CC	PUSH2	03D4	 ;; _neq_eb1d626f05a5c3c3f6233abc87953f16c14fc98c101382fd9a88bf99f16b14d6	 
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x3D4
3857	 3CF	JUMPI		 	 
- stack 0: 0x68C
3858	 3D0	PUSH2	03EE	 ;; _neq_after_eb1d626f05a5c3c3f6233abc87953f16c14fc98c101382fd9a88bf99f16b14d6	 
- stack 1: 0x68C
- stack 0: 0x3EE
3859	 3D3	JUMP		 	 
- stack 0: 0x68C
3860	 3EE	JUMPDEST		 ;; _neq_after_eb1d626f05a5c3c3f6233abc87953f16c14fc98c101382fd9a88bf99f16b14d6	 
- stack 0: 0x68C
3861	 3EF	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
3862	 3F1	ADD		 	 
- stack 0: 0x690
3863	 3F2	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
3864	 3F3	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x3F8001800210000003406C800530042006600000438000100210000003406CC
3865	 3F4	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x3F8001800210000003406C800530042006600000438000100210000003406CC
- stack 0: 0xF0
3866	 3F6	SHR		 	 
- stack 1: 0x690
- stack 0: 0x3F8
3867	 3F7	JUMP		 	 
- stack 0: 0x690
3868	 3F8	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x690
3869	 3F9	PUSH1	00	 	 
- stack 1: 0x690
- stack 0: 0x0
3870	 3FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3871	 400	AND		 	  ;; # mask to 32 bits
- stack 1: 0x690
- stack 0: 0x0
3872	 401	PUSH2	0380	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x380
3873	 404	MLOAD		 	  ;; # read from x28
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x19
3874	 405	PUSH4	FFFFFFFF	 	 
- stack 3: 0x690
- stack 2: 0x0
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
3875	 40A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x19
3876	 40B	SUB		 	 
- stack 1: 0x690
- stack 0: 0x19
3877	 40C	PUSH2	0414	 ;; _neq_f3631bf8c10eba26d7bb6cb35b5ae823e21f0d1671ea7c569321303c476d3489	 
- stack 2: 0x690
- stack 1: 0x19
- stack 0: 0x414
3878	 40F	JUMPI		 	 
- stack 0: 0x690
3879	 414	JUMPDEST		 ;; _neq_f3631bf8c10eba26d7bb6cb35b5ae823e21f0d1671ea7c569321303c476d3489	 
- stack 0: 0x690
3880	 415	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
3881	 416	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x3F8001800210000003406C800530042006600000438000100210000003406CC
3882	 417	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x3F8001800210000003406C800530042006600000438000100210000003406CC
- stack 0: 0xE0
3883	 419	SHR		 	 
- stack 1: 0x690
- stack 0: 0x3F80018
3884	 41A	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x3F80018
- stack 0: 0xFFFF
3885	 41D	AND		 	 
- stack 1: 0x690
- stack 0: 0x18
3886	 41E	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0x18
- stack 0: 0x1
3887	 420	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0x18
3888	 421	ADD		 	 
- stack 0: 0x6A8
3889	 422	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6A8
- stack 0: 0xFFFFFFFF
3890	 427	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6A8
3891	 428	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
3892	 429	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x210000003406CC005300420066000004430000006600006574796D00007473
3893	 42A	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x210000003406CC005300420066000004430000006600006574796D00007473
- stack 0: 0xF0
3894	 42C	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x21
3895	 42D	JUMP		 	 
- stack 0: 0x6A8
3896	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x6A8
3897	 22	PUSH4	00000000	 	 
- stack 1: 0x6A8
- stack 0: 0x0
3898	 27	PUSH2	0160	 	 
- stack 2: 0x6A8
- stack 1: 0x0
- stack 0: 0x160
3899	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x6A8
3900	 2B	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
3901	 2D	ADD		 	 
- stack 0: 0x6AC
3902	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
3903	 2F	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3406CC005300420066000004430000006600006574796D0000747300525245
3904	 30	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x3406CC005300420066000004430000006600006574796D0000747300525245
- stack 0: 0xF0
3905	 32	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x34
3906	 33	JUMP		 	 
- stack 0: 0x6AC
3907	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1728(ignore imm)
- stack 0: 0x6AC
3908	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
3909	 36	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3406CC005300420066000004430000006600006574796D0000747300525245
3910	 37	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x3406CC005300420066000004430000006600006574796D0000747300525245
- stack 0: 0xE0
3911	 39	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x3406CC
3912	 3A	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x3406CC
- stack 0: 0xFFFF
3913	 3D	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x6CC
3914	 3E	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x6CC
- stack 0: 0x1
3915	 40	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x6CC
3916	 41	PUSH2	0160	 	 
- stack 2: 0x6AC
- stack 1: 0x6CC
- stack 0: 0x160
3917	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x6AC
- stack 1: 0x6CC
- stack 0: 0x0
3918	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x6AC
- stack 0: 0x6CC
3919	 46	PUSH2	0160	 	 
- stack 2: 0x6AC
- stack 1: 0x6CC
- stack 0: 0x160
3920	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x6AC
3921	 4A	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
3922	 4C	ADD		 	 
- stack 0: 0x6B0
3923	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
3924	 4E	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x5300420066000004430000006600006574796D000074730052524500004B4F
3925	 4F	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x5300420066000004430000006600006574796D000074730052524500004B4F
- stack 0: 0xF0
3926	 51	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x53
3927	 52	JUMP		 	 
- stack 0: 0x6B0
3928	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x6B0
3929	 54	PUSH4	00042000	 	 
- stack 1: 0x6B0
- stack 0: 0x42000
3930	 59	PUSH2	0140	 	 
- stack 2: 0x6B0
- stack 1: 0x42000
- stack 0: 0x140
3931	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x6B0
3932	 5D	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
3933	 5F	ADD		 	 
- stack 0: 0x6B4
3934	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
3935	 61	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x66000004430000006600006574796D000074730052524500004B4F00000000
3936	 62	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x66000004430000006600006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
3937	 64	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x66
3938	 65	JUMP		 	 
- stack 0: 0x6B4
3939	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6B4
3940	 67	PUSH2	0140	 	 
- stack 1: 0x6B4
- stack 0: 0x140
3941	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6B4
- stack 0: 0x42000
3942	 6B	PUSH2	0075	 ;; _ecall_18dc04e6c02d8f805e08d026b55c5cb6a021c802bbddd16eaf87f139b7e593bf	 
- stack 2: 0x6B4
- stack 1: 0x42000
- stack 0: 0x75
3943	 6E	JUMPI		 	 
- stack 0: 0x6B4
3944	 75	JUMPDEST		 ;; _ecall_18dc04e6c02d8f805e08d026b55c5cb6a021c802bbddd16eaf87f139b7e593bf	 
- stack 0: 0x6B4
3945	 76	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3946	 78	PUSH2	0160	 	 
- stack 2: 0x6B4
- stack 1: 0x4
- stack 0: 0x160
3947	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x6B4
- stack 1: 0x4
- stack 0: 0x6CC
3948	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x6B4
3949	 7D	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3950	 7F	ADD		 	 
- stack 0: 0x6B8
3951	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
3952	 81	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x4430000006600006574796D000074730052524500004B4F0000000000000000
3953	 82	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x4430000006600006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
3954	 84	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x443
3955	 85	JUMP		 	 
- stack 0: 0x6B8
3956	 443	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x6B8
3957	 444	PUSH4	00000000	 	 
- stack 1: 0x6B8
- stack 0: 0x0
3958	 449	PUSH2	0140	 	 
- stack 2: 0x6B8
- stack 1: 0x0
- stack 0: 0x140
3959	 44C	MSTORE		 	  ;; # store to x10
- stack 0: 0x6B8
3960	 44D	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
3961	 44F	ADD		 	 
- stack 0: 0x6BC
3962	 450	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
3963	 451	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x6600006574796D000074730052524500004B4F000000000000000000000000
3964	 452	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x6600006574796D000074730052524500004B4F000000000000000000000000
- stack 0: 0xF0
3965	 454	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x66
3966	 455	JUMP		 	 
- stack 0: 0x6BC
3967	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6BC
3968	 67	PUSH2	0140	 	 
- stack 1: 0x6BC
- stack 0: 0x140
3969	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6BC
- stack 0: 0x0
3970	 6B	PUSH2	0075	 ;; _ecall_18dc04e6c02d8f805e08d026b55c5cb6a021c802bbddd16eaf87f139b7e593bf	 
- stack 2: 0x6BC
- stack 1: 0x0
- stack 0: 0x75
3971	 6E	JUMPI		 	 
- stack 0: 0x6BC
3972	 6F	PUSH1	20	 	 
- stack 1: 0x6BC
- stack 0: 0x20
3973	 71	PUSH2	0160	 	 
- stack 2: 0x6BC
- stack 1: 0x20
- stack 0: 0x160
3974	 74	RETURN		 	 
Final bytecode length; 1831
Returned: 00000000000000000000000000000000000000000000000000000000000006cc
gasUsed : 14189
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420
** HOT: 424 - range: 424,428,42c,430,434
** HOT: 438 - range: 438,43c,440,444,448
** HOT: 44c - range: 44c,450,454,458,45c
** HOT: 460 - range: 460,464,468,46c,470
** HOT: 474 - range: 474,478,47c,480,484
** HOT: 488 - range: 488,48c,490,494,498
** HOT: 49c - range: 49c,4a0,4a4,4a8,4ac
** HOT: 4b0 - range: 4b0,4b4,4b8,4bc,4c0
** HOT: 4c4 - range: 4c4,4c8,4cc,4d0,4d4
** HOT: 4d8 - range: 4d8,4dc,4e0,4e4,4e8,4ec,4f0
** HOT: 4f4 - range: 4f4,4f8,4fc,500,504,508,50c
** HOT: 510 - range: 510,514,518,51c,520,524,528
** HOT: 52c - range: 52c,530,534,538,53c,540
** HOT: 544 - range: 544,548,54c,550,554,558
** HOT: 55c - range: 55c,560,564,568,56c
** HOT: 570 - range: 570,574,578,57c,580,584,588
** HOT: 574 - range: 574,578,57c,580,584,588
** HOT: 58c - range: 58c,590,594
** HOT: 598 - range: 598,59c,5a0,5a4,5a8,5ac,5b0,5b4
** HOT: 59c - range: 59c,5a0,5a4,5a8,5ac,5b0,5b4
** HOT: 5b8 - range: 5b8,5bc,5c0
** HOT: 5c4 - range: 5c4,5c8,5cc,5d0,5d4,5d8,5dc,5e0,5e4
** HOT: 5c8 - range: 5c8,5cc,5d0,5d4,5d8,5dc,5e0,5e4
** HOT: 5e8 - range: 5e8,5ec,5f0
** HOT: 5f4 - range: 5f4,5f8,5fc,600,604,608
** HOT: 5f8 - range: 5f8,5fc,600,604,608
** HOT: 60c - range: 60c,610,614
** HOT: 618 - range: 618,61c,620,624,628,62c,630
** HOT: 61c - range: 61c,620,624,628,62c,630
** HOT: 634 - range: 634,638,63c
** HOT: 640 - range: 640,644,648,64c,650,654,658,65c
** HOT: 644 - range: 644,648,64c,650,654,658,65c
** HOT: 660 - range: 660,664,668
** HOT: 66c - range: 66c,670,674,678
** HOT: 67c - range: 67c,680,684,688,68c
